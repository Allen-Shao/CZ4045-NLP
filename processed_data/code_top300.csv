,PostId,Code,CodeLength
0,7692349,"WARNING  2011-10-07 20:01:01,252 urlfetch_stub.py:108] No ssl package found. urlfetch 

will not be able to validate SSL certificates.
INFO     2011-10-07 20:01:01,847 appengine_rpc.py:159] Server: appengine.google.com
INFO     2011-10-07 20:01:01,855 appcfg.py:463] Checking for updates to the SDK.
INFO     2011-10-07 20:01:04,625 appcfg.py:480] The SDK is up to date.
WARNING  2011-10-07 20:01:04,625 datastore_file_stub.py:512] Could not read datastore data from /var/folders/e0/e0U5NtMXFHOB6jVwkVhsnE+++TM/-Tmp-/dev_appserver.datastore
INFO     2011-10-07 20:01:04,627 rdbms_sqlite.py:58] Connecting to SQLite database '' with file '/var/folders/e0/e0U5NtMXFHOB6jVwkVhsnE+++TM/-Tmp-/dev_appserver.rdbms'
WARNING  2011-10-07 20:01:04,633 dev_appserver.py:4748] Could not initialize images API; you are likely missing the Python ""PIL"" module. ImportError: No module named _imaging
INFO     2011-10-07 20:01:04,641 dev_appserver_multiprocess.py:637] Running application tpbitblock on port 8080: http://localhost:8080
INFO     2011-10-07 20:01:08,448 __init__.py:365] building _go_app
INFO     2011-10-07 20:01:11,105 __init__.py:351] running _go_app
throw: init rescheduling

runtime.throw+0x40 /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/runtime.c:102
    runtime.throw(0x278c7f, 0xdc73)
schedule+0x3e /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/proc.c:535
    schedule(0x10803000, 0x10803000)
runtime.mcall+0x3a /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/386/asm.s:174
    runtime.mcall(0x10803000, 0x0)

goroutine 2 [1]:
net.*pollServer¬∑Run /private/tmp/appengine/google_appengine/goroot/src/pkg/net/fd.go:213
    net.*pollServer¬∑Run(0x10801c90, 0x0)
runtime.goexit /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/proc.c:178
    runtime.goexit()
----- goroutine created by -----
net.newPollServer+0x2dd /private/tmp/appengine/google_appengine/goroot/src/pkg/net/newpollserver.go:39

goroutine 1 [4]:
runtime.gosched+0x4d /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/proc.c:603
    runtime.gosched()
runtime.chanrecv+0x14d /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/chan.c:361
    runtime.chanrecv(0x1081d900, 0x30800e6c, 0x0, 0x0, 0x0, ...)
runtime.chanrecv1+0x3f /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/chan.c:424
    runtime.chanrecv1(0x1081d900, 0x1081e580)
net.*pollServer¬∑WaitRead+0x47 /private/tmp/appengine/google_appengine/goroot/src/pkg/net/fd.go:255
    net.*pollServer¬∑WaitRead(0x10801c90, 0x1081e580, 0x0)
net.*netFD¬∑accept+0x2ae /private/tmp/appengine/google_appengine/goroot/src/pkg/net/fd.go:605
    net.*netFD¬∑accept(0x1081e580, 0x45716, 0x0, 0x0, 0x0, ...)
net.*TCPListener¬∑AcceptTCP+0x53 /private/tmp/appengine/google_appengine/goroot/src/pkg/net/tcpsock.go:272
    net.*TCPListener¬∑AcceptTCP(0x108008b8, 0x30800f00, 0x0, 0x0)
net.*TCPListener¬∑Accept+0x36 /private/tmp/appengine/google_appengine/goroot/src/pkg/net/tcpsock.go:282
    net.*TCPListener¬∑Accept(0x108008b8, 0x0, 0x0, 0x0, 0x0, ...)
http.*Server¬∑Serve+0x96 /private/tmp/appengine/google_appengine/goroot/src/pkg/http/server.go:868
    http.*Server¬∑Serve(0x10839d20, 0x10839e20, 0x108008b8, 0x0, 0x0, ...)
http.*Server¬∑ListenAndServe+0x9c /private/tmp/appengine/google_appengine/goroot/src/pkg/http/server.go:855
    http.*Server¬∑ListenAndServe(0x10839d20, 0x10839d20, 0x406)
http.ListenAndServe+0x52 /private/tmp/appengine/google_appengine/goroot/src/pkg/http/server.go:920
    http.ListenAndServe(0x155640, 0x6, 0x0, 0x0, 0x0, ...)
BitBlock.init¬∑1+0x174 BitBlock/BitBlock.go:43
    BitBlock.init¬∑1()
BitBlock.init+0x70 BitBlock/BitBlock.go:0
    BitBlock.init()
main.init+0x39 _go_main.go:0
    main.init()
runtime.mainstart+0x5 /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/386/asm.s:91
    runtime.mainstart()
runtime.goexit /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/proc.c:178
    runtime.goexit()
----- goroutine created by -----
_rt0_386+0xbf /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/386/asm.s:80
ERROR    2011-10-07 20:01:12,196 dev_appserver.py:4200] Exception encountered handling request
Traceback (most recent call last):
  File ""/Google App Engine/google/appengine/tools/dev_appserver.py"", line 4143, in _HandleRequest
    self._Dispatch(dispatcher, self.rfile, outfile, env_dict)
  File ""/Google App Engine/google/appengine/tools/dev_appserver.py"", line 4049, in _Dispatch
    base_env_dict=env_dict)
  File ""/Google App Engine/google/appengine/tools/dev_appserver.py"", line 616, in Dispatch
    base_env_dict=base_env_dict)
  File ""/Google App Engine/google/appengine/tools/dev_appserver.py"", line 3120, in Dispatch
    self._module_dict)
  File ""/Google App Engine/google/appengine/tools/dev_appserver.py"", line 2972, in ExecuteCGI
    env, infile, outfile)
  File ""/Google App Engine/google/appengine/ext/go/__init__.py"", line 399, in execute_go_cgi
    GO_APP.make_and_run()
  File ""/Google App Engine/google/appengine/ext/go/__init__.py"", line 362, in make_and_run
    wait_until_go_app_ready(self.proc.pid)
  File ""/Google App Engine/google/appengine/ext/go/__init__.py"", line 285, in wait_until_go_app_ready
    raise Exception('unable to start ' + GO_APP_NAME)
Exception: unable to start _go_app
INFO     2011-10-07 20:01:12,242 dev_appserver.py:4247] ""GET / HTTP/1.1"" 500 -
INFO     2011-10-07 20:01:12,505 __init__.py:351] running _go_app
throw: init rescheduling

runtime.throw+0x40 /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/runtime.c:102
    runtime.throw(0x278c7f, 0xdc73)
schedule+0x3e /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/proc.c:535
    schedule(0x10803000, 0x10803000)
runtime.mcall+0x3a /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/386/asm.s:174
    runtime.mcall(0x10803000, 0x0)

goroutine 2 [1]:
net.*pollServer¬∑Run /private/tmp/appengine/google_appengine/goroot/src/pkg/net/fd.go:213
    net.*pollServer¬∑Run(0x10801c90, 0x0)
runtime.goexit /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/proc.c:178
    runtime.goexit()
----- goroutine created by -----
net.newPollServer+0x2dd /private/tmp/appengine/google_appengine/goroot/src/pkg/net/newpollserver.go:39

goroutine 1 [4]:
runtime.gosched+0x4d /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/proc.c:603
    runtime.gosched()
runtime.chanrecv+0x14d /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/chan.c:361
    runtime.chanrecv(0x1081d900, 0x30800e6c, 0x0, 0x0, 0x0, ...)
runtime.chanrecv1+0x3f /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/chan.c:424
    runtime.chanrecv1(0x1081d900, 0x1081e580)
net.*pollServer¬∑WaitRead+0x47 /private/tmp/appengine/google_appengine/goroot/src/pkg/net/fd.go:255
    net.*pollServer¬∑WaitRead(0x10801c90, 0x1081e580, 0x0)
net.*netFD¬∑accept+0x2ae /private/tmp/appengine/google_appengine/goroot/src/pkg/net/fd.go:605
    net.*netFD¬∑accept(0x1081e580, 0x45716, 0x0, 0x0, 0x0, ...)
net.*TCPListener¬∑AcceptTCP+0x53 /private/tmp/appengine/google_appengine/goroot/src/pkg/net/tcpsock.go:272
    net.*TCPListener¬∑AcceptTCP(0x108008b8, 0x30800f00, 0x0, 0x0)
net.*TCPListener¬∑Accept+0x36 /private/tmp/appengine/google_appengine/goroot/src/pkg/net/tcpsock.go:282
    net.*TCPListener¬∑Accept(0x108008b8, 0x0, 0x0, 0x0, 0x0, ...)
http.*Server¬∑Serve+0x96 /private/tmp/appengine/google_appengine/goroot/src/pkg/http/server.go:868
    http.*Server¬∑Serve(0x10839d20, 0x10839e20, 0x108008b8, 0x0, 0x0, ...)
http.*Server¬∑ListenAndServe+0x9c /private/tmp/appengine/google_appengine/goroot/src/pkg/http/server.go:855
    http.*Server¬∑ListenAndServe(0x10839d20, 0x10839d20, 0x406)
http.ListenAndServe+0x52 /private/tmp/appengine/google_appengine/goroot/src/pkg/http/server.go:920
    http.ListenAndServe(0x155640, 0x6, 0x0, 0x0, 0x0, ...)
BitBlock.init¬∑1+0x174 BitBlock/BitBlock.go:43
    BitBlock.init¬∑1()
BitBlock.init+0x70 BitBlock/BitBlock.go:0
    BitBlock.init()
main.init+0x39 _go_main.go:0
    main.init()
runtime.mainstart+0x5 /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/386/asm.s:91
    runtime.mainstart()
runtime.goexit /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/proc.c:178
    runtime.goexit()
----- goroutine created by -----
_rt0_386+0xbf /private/tmp/appengine/google_appengine/goroot/src/pkg/runtime/386/asm.s:80
ERROR    2011-10-07 20:01:13,530 dev_appserver.py:4200] Exception encountered handling request
Traceback (most recent call last):
  File ""/Google App Engine/google/appengine/tools/dev_appserver.py"", line 4143, in _HandleRequest
    self._Dispatch(dispatcher, self.rfile, outfile, env_dict)
  File ""/Google App Engine/google/appengine/tools/dev_appserver.py"", line 4049, in _Dispatch
    base_env_dict=env_dict)
  File ""/Google App Engine/google/appengine/tools/dev_appserver.py"", line 616, in Dispatch
    base_env_dict=base_env_dict)
  File ""/Google App Engine/google/appengine/tools/dev_appserver.py"", line 3120, in Dispatch
    self._module_dict)
  File ""/Google App Engine/google/appengine/tools/dev_appserver.py"", line 2972, in ExecuteCGI
    env, infile, outfile)
  File ""/Google App Engine/google/appengine/ext/go/__init__.py"", line 399, in execute_go_cgi
    GO_APP.make_and_run()
  File ""/Google App Engine/google/appengine/ext/go/__init__.py"", line 362, in make_and_run
    wait_until_go_app_ready(self.proc.pid)
  File ""/Google App Engine/google/appengine/ext/go/__init__.py"", line 285, in wait_until_go_app_ready
    raise Exception('unable to start ' + GO_APP_NAME)
Exception: unable to start _go_app
INFO     2011-10-07 20:01:13,531 dev_appserver.py:4247] ""GET /favicon.ico HTTP/1.1"" 500 -
",9803
1,8272760,"package main

import ""rand""

func Routine1(command12 chan int, response12 chan int, command13 chan int, response13 chan int) {

    // z12 is a variable which stores the value comming from channel 2 and z13 is a variable which stores the value comming from channel 3.

    z12 := 200
    z13 := 200
    m12 := false
    m13 := false
    y := 0

    for i := 0; i < 20; i++ {
        y = rand.Intn(100)

        // If y's value is not 0 then the value will be sent to routine 2 or 3 according to   prime or not.
        // If y's value is 0 then process state (the varibles used by it means z12, z13) and channel state will be saved.[routine 1 is initiator]

        if y == 0 {
            print(z12, ""    z12 STATE SAVED\n"")
            print(z13, ""    z13 STATE SAVED\n"")

            // Routine 1 is initiator,  it sends 0 to make other process to save the state.

            y = 0
            command12 <- y
            command13 <- y

            // Untill routine 2 and 3 does not send 0, process 1 is on channel saving state (it's process state is already saved).
            // When routine 1 recives 0 from both other processes, channel is saved and routine 1 retuns to it's common routine procedure.
            // When routine 1 recives 0 from any other processes, saving channel bettwen them is stopped.
            // m12, m13 is used to mark whether 0 recived or not.

            for m12 != true || m13 != true {
                select {
                case cmd1 := <-response12:
                    {
                        z12 = cmd1
                        if z12 != 0 {
                            print(z12, ""    z12  Channel Saving.... \n"")
                            y = rand.Intn(100)
                            command12 <- y
                        }
                        if z12 == 0 {
                            m12 = true
                            print("" z12  Channel Saving Stopped \n"")
                        }
                    }

                case cmd2 := <-response13:
                    {
                        z13 = cmd2
                        if z13 != 0 {
                            print(z13, ""    z13  Channel Saving.... \n"")
                            y = rand.Intn(100)
                            command13 <- y
                        }
                        if z13 == 0 {
                            m13 = true
                            print(""    z13  Channel Saving Stopped \n"")
                        }
                    }
                }

            }

            // After saving process state it retuns to it's normal behaviour.

            m12 = false
            m13 = false
        }

        if y != 0 {

            // If y value is not 0, routine 1 just sends int to other process according to prime or not and recives int accordingly.

            if y%2 == 0 {
                command12 <- y
            }

            if y%2 != 0 {
                command13 <- y
            }
            select {
            case cmd1 := <-response12:
                {
                    z12 = cmd1
                    print(z12, ""    z12\n"")
                }
            case cmd2 := <-response13:
                {
                    z13 = cmd2
                    print(z13, ""   z13\n"")
                }
            }
        }
    }
    close(command12)
    close(command13)
}


//Routine 2 (or 3) is not an initiator (means it can't send 0). When it recives 0 (from routine 1 or 3) it save the state of process and the state of the channel from which it recived).
// When it recives 0 from both other two routine, it saves all channel state and returns to it's common behaviour. [same in routine 3]

func Routine2(command12 chan int, response12 chan int, command23 chan int, response23 chan int) {
    z21 := 200
    z23 := 200
    m21 := false
    m23 := false

    for i := 0; i < 20; i++ {
        select {
        case x, open := <-command12:
            {
                if !open {
                    return
                }
                if x != 0 && m23 != true {
                    z21 = x
                    print(z21, ""   z21\n"")
                }
                if x != 0 && m23 == true {
                    z21 = x
                    print(z21, ""   z21 Channel Saving \n"")
                }
                if x == 0 {
                    m21 = true
                    if m21 == true && m23 == true {
                        print("" z21 and z23 Channel Saving Stopped \n"")
                        m23 = false
                        m21 = false
                    }
                    if m21 == true && m23 != true {
                        z21 = x
                        print(z21, ""   z21  Channel Saved \n"")

                    }

                }
            }

        case x, open := <-response23:
            {
                if !open {
                    return
                }
                if x != 0 && m21 != true {
                    z23 = x
                    print(z23, ""   z21\n"")
                }
                if x != 0 && m21 == true {
                    z23 = x
                    print(z23, ""   z23 Channel Saving \n"")
                }
                if x == 0 {
                    m23 = true
                    if m21 == true && m23 == true {
                        print("" z23 Channel Saving Stopped \n"")
                        m23 = false
                        m21 = false
                    }
                    if m23 == true && m21 != true {
                        z23 = x
                        print(z23, ""   z23  Channel Saved \n"")
                    }

                }
            }
        }

        if m23 == false && m21 == false {
            y := rand.Intn(100)
            if y%2 == 0 {
                if y == 0 {
                    y = 10
                    response12 <- y
                }
            }

            if y%2 != 0 {
                if y == 0 {
                    y = 10
                    response23 <- y
                }
            }
        }

        if m23 == true && m21 != true {
            y := rand.Intn(100)
            response12 <- y
        }

        if m23 != true && m21 == true {
            y := rand.Intn(100)
            command23 <- y
        }

    }
    close(response12)
    close(command23)
}

func Routine3(command13 chan int, response13 chan int, command23 chan int, response23 chan int) {
    z31 := 200
    z32 := 200
    m31 := false
    m32 := false

    for i := 0; i < 20; i++ {
        select {
        case x, open := <-command13:
            {
                if !open {
                    return
                }
                if x != 0 && m32 != true {
                    z31 = x
                    print(z31, ""   z21\n"")
                }
                if x != 0 && m32 == true {
                    z31 = x
                    print(z31, ""   z31 Channel Saving \n"")
                }
                if x == 0 {
                    m31 = true
                    if m31 == true && m32 == true {
                        print("" z21 Channel Saving Stopped \n"")
                        m31 = false
                        m32 = false
                    }
                    if m31 == true && m32 != true {
                        z31 = x
                        print(z31, ""   z31  Channel Saved \n"")

                    }

                }
            }

        case x, open := <-command23:
            {
                if !open {
                    return
                }
                if x != 0 && m31 != true {
                    z32 = x
                    print(z32, ""   z32\n"")
                }
                if x != 0 && m31 == true {
                    z32 = x
                    print(z32, ""   z32 Channel Saving \n"")
                }
                if x == 0 {
                    m32 = true
                    if m31 == true && m32 == true {
                        print("" z32 Channel Saving Stopped \n"")
                        m31 = false
                        m32 = false
                    }
                    if m32 == true && m31 != true {
                        z32 = x
                        print(z32, ""   z32  Channel Saved \n"")

                    }

                }
            }
        }
        if m31 == false && m32 == false {
            y := rand.Intn(100)
            if y%2 == 0 {
                response13 <- y
            }

            if y%2 != 0 {
                response23 <- y
            }
        }

        if m31 == true && m32 != true {
            y := rand.Intn(100)
            response13 <- y
        }

        if m31 != true && m32 == true {
            y := rand.Intn(100)
            response23 <- y
        }

    }
    close(response13)
    close(response23)
}


func main() {

    // Three concurrent channels are created to pass integers to each other.
    // command 12 used to send int and response12 is used to receive int from routine 1 to routine 2.
    // response 12 used to send int and command 12 is used to receive int from routine 2 to routine 1. {so as for others}

    command12 := make(chan int)
    response12 := make(chan int)
    command13 := make(chan int)
    response13 := make(chan int)
    command23 := make(chan int)
    response23 := make(chan int)

    go Routine1(command12, response12, command13, response13)
    go Routine2(command12, response12, command23, response23)
    Routine3(command13, response13, command23, response23)
}
",9500
2,10369513,"WORK=C:\Users\roxor\AppData\Local\Temp\go-build292908674
mkdir -p $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\
cd C:\Go\src\pkg\github.com\zombiezen\Go-GLUT\glut
C:\Go\pkg\tool\windows_amd64\cgo.exe -objdir $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\ -- -I $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\ glut.go
C:\Go\pkg\tool\windows_amd64\6c.exe -FVw -I $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\ -I C:\Go\pkg\windows_amd64 -o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_defun.6 -DGOOS_windows -DGOARCH_amd64 $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_defun.c
gcc -I . -g -O2 -m64 -mthreads -I $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\ -o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_main.o -c $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_main.c
gcc -I . -g -O2 -m64 -mthreads -I $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\ -o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_export.o -c $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_export.c
gcc -I . -g -O2 -m64 -mthreads -I $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\ -o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\glut.cgo2.o -c $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\glut.cgo2.c
gcc -I . -g -O2 -m64 -mthreads -I $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\ -o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\support.o -c .\support.c
gcc -I . -g -O2 -m64 -mthreads -o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_.o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_main.o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_export.o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\glut.cgo2.o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\support.o -lfreeglut
C:\Go\pkg\tool\windows_amd64\cgo.exe -objdir $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\ -dynimport $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_.o -dynout $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_import.c
C:\Go\pkg\tool\windows_amd64\6c.exe -FVw -I $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\ -I C:\Go\pkg\windows_amd64 -o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_import.6 -DGOOS_windows -DGOARCH_amd64 $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_import.c
gcc -I . -g -O2 -m64 -mthreads -o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_all.o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_export.o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\glut.cgo2.o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\support.o -Wl,-r -nostdlib -lgcc -lmingwex -lmingw32
C:\Go\pkg\tool\windows_amd64\6g.exe -o $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_go_.6 -p github.com/zombiezen/Go-GLUT/glut -D _/C_/Go/src/pkg/github.com/zombiezen/Go-GLUT/glut -I $WORK $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_gotypes.go $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\glut.cgo1.go
C:\Go\pkg\tool\windows_amd64\pack.exe grc $WORK\github.com\zombiezen\Go-GLUT\glut.a $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_go_.6 $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_import.6 $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_cgo_defun.6 $WORK\github.com\zombiezen\Go-GLUT\glut\_obj\_all.o
mkdir -p C:\Go\pkg\windows_amd64\github.com\zombiezen\Go-GLUT\
cp $WORK\github.com\zombiezen\Go-GLUT\glut.a C:\Go\pkg\windows_amd64\github.com\zombiezen\Go-GLUT\glut.a
",3235
3,10369513,"// # include 
// #cgo windows LDFLAGS: -lfreeglut
// #include 
// #include ""support.h""
import ""C""
",98
4,10369513,"//#cgo windows LDFLAGS: -lglfwdll -lglu32 -lopengl32
//#include 
//#define GLFW_DLL
//#include 
import ""C""
",107
5,10369513,"WORK=C:\Users\roxor\AppData\Local\Temp\go-build499107422
mkdir -p $WORK\github.com\jteeuwen\glfw\_obj\
cd C:\Go\src\pkg\github.com\jteeuwen\glfw
C:\Go\pkg\tool\windows_amd64\cgo.exe -objdir $WORK\github.com\jteeuwen\glfw\_obj\ -- -I $WORK\github.com\jteeuwen\glfw\_obj\ callback.go glfw.go image.go vidmode.go
C:\Go\pkg\tool\windows_amd64\6c.exe -FVw -I $WORK\github.com\jteeuwen\glfw\_obj\ -I C:\Go\pkg\windows_amd64 -o $WORK\github.com\jteeuwen\glfw\_obj\_cgo_defun.6 -DGOOS_windows -DGOARCH_amd64 $WORK\github.com\jteeuwen\glfw\_obj\_cgo_defun.c
gcc -I . -g -O2 -m64 -mthreads -I $WORK\github.com\jteeuwen\glfw\_obj\ -o $WORK\github.com\jteeuwen\glfw\_obj\_cgo_main.o -c $WORK\github.com\jteeuwen\glfw\_obj\_cgo_main.c
gcc -I . -g -O2 -m64 -mthreads -I $WORK\github.com\jteeuwen\glfw\_obj\ -o $WORK\github.com\jteeuwen\glfw\_obj\_cgo_export.o -c $WORK\github.com\jteeuwen\glfw\_obj\_cgo_export.c
gcc -I . -g -O2 -m64 -mthreads -I $WORK\github.com\jteeuwen\glfw\_obj\ -o $WORK\github.com\jteeuwen\glfw\_obj\callback.cgo2.o -c $WORK\github.com\jteeuwen\glfw\_obj\callback.cgo2.c
gcc -I . -g -O2 -m64 -mthreads -I $WORK\github.com\jteeuwen\glfw\_obj\ -o $WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o -c $WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.c
gcc -I . -g -O2 -m64 -mthreads -I $WORK\github.com\jteeuwen\glfw\_obj\ -o $WORK\github.com\jteeuwen\glfw\_obj\image.cgo2.o -c $WORK\github.com\jteeuwen\glfw\_obj\image.cgo2.c
gcc -I . -g -O2 -m64 -mthreads -I $WORK\github.com\jteeuwen\glfw\_obj\ -o $WORK\github.com\jteeuwen\glfw\_obj\vidmode.cgo2.o -c $WORK\github.com\jteeuwen\glfw\_obj\vidmode.cgo2.c
gcc -I . -g -O2 -m64 -mthreads -I $WORK\github.com\jteeuwen\glfw\_obj\ -o $WORK\github.com\jteeuwen\glfw\_obj\callback.o -c .\callback.c
gcc -I . -g -O2 -m64 -mthreads -o $WORK\github.com\jteeuwen\glfw\_obj\_cgo_.o $WORK\github.com\jteeuwen\glfw\_obj\_cgo_main.o $WORK\github.com\jteeuwen\glfw\_obj\_cgo_export.o $WORK\github.com\jteeuwen\glfw\_obj\callback.cgo2.o $WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o $WORK\github.com\jteeuwen\glfw\_obj\image.cgo2.o $WORK\github.com\jteeuwen\glfw\_obj\vidmode.cgo2.o $WORK\github.com\jteeuwen\glfw\_obj\callback.o -lglfwdll -lglu32 -lopengl32
# github.com/jteeuwen/glfw
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetNumberOfProcessors':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:39: undefined reference to `__imp_glfwGetNumberOfProcessors'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetKey':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:51: undefined reference to `__imp_glfwGetKey'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwSetTime':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:60: undefined reference to `__imp_glfwSetTime'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwExtensionSupported':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:71: undefined reference to `__imp_glfwExtensionSupported'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwPollEvents':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:80: undefined reference to `__imp_glfwPollEvents'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetMousePos':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:90: undefined reference to `__imp_glfwGetMousePos'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetJoystickParam':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:102: undefined reference to `__imp_glfwGetJoystickParam'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetProcAddress':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:112: undefined reference to `__imp_glfwGetProcAddress'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetGLVersion':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:123: undefined reference to `__imp_glfwGetGLVersion'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwSetMouseWheel':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:133: undefined reference to `__imp_glfwSetMouseWheel'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetJoystickPos':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:148: undefined reference to `__imp_glfwGetJoystickPos'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwOpenWindow':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:168: undefined reference to `__imp_glfwOpenWindow'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwSetMousePos':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:178: undefined reference to `__imp_glfwSetMousePos'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwSwapInterval':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:188: undefined reference to `__imp_glfwSwapInterval'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetMouseButton':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:209: undefined reference to `__imp_glfwGetMouseButton'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwSetWindowTitle':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:218: undefined reference to `__imp_glfwSetWindowTitle'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetVideoModes':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:231: undefined reference to `__imp_glfwGetVideoModes'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetJoystickButtons':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:246: undefined reference to `__imp_glfwGetJoystickButtons'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwRestoreWindow':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:255: undefined reference to `__imp_glfwRestoreWindow'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwInit':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:265: undefined reference to `__imp_glfwInit'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwSwapBuffers':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:274: undefined reference to `__imp_glfwSwapBuffers'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetMouseWheel':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:284: undefined reference to `__imp_glfwGetMouseWheel'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwIconifyWindow':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:293: undefined reference to `__imp_glfwIconifyWindow'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwWaitEvents':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:302: undefined reference to `__imp_glfwWaitEvents'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwSetWindowPos':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:312: undefined reference to `__imp_glfwSetWindowPos'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetWindowSize':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:322: undefined reference to `__imp_glfwGetWindowSize'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwDisable':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:332: undefined reference to `__imp_glfwDisable'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetWindowParam':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:344: undefined reference to `__imp_glfwGetWindowParam'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwCloseWindow':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:353: undefined reference to `__imp_glfwCloseWindow'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwOpenWindowHint':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:363: undefined reference to `__imp_glfwOpenWindowHint'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwSleep':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:372: undefined reference to `__imp_glfwSleep'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwEnable':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:382: undefined reference to `__imp_glfwEnable'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwSetWindowSize':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:392: undefined reference to `__imp_glfwSetWindowSize'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwTerminate':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:411: undefined reference to `__imp_glfwTerminate'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetDesktopMode':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:420: undefined reference to `__imp_glfwGetDesktopMode'
$WORK\github.com\jteeuwen\glfw\_obj\glfw.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwGetTime':
C:\Go\src\pkg\github.com\jteeuwen\glfw/glfw.go:429: undefined reference to `__imp_glfwGetTime'
$WORK\github.com\jteeuwen\glfw\_obj\image.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwFreeImage':
C:\Go\src\pkg\github.com\jteeuwen\glfw/image.go:38: undefined reference to `__imp_glfwFreeImage'
$WORK\github.com\jteeuwen\glfw\_obj\image.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwReadImage':
C:\Go\src\pkg\github.com\jteeuwen\glfw/image.go:52: undefined reference to `__imp_glfwReadImage'
$WORK\github.com\jteeuwen\glfw\_obj\image.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwLoadTextureImage2D':
C:\Go\src\pkg\github.com\jteeuwen\glfw/image.go:65: undefined reference to `__imp_glfwLoadTextureImage2D'
$WORK\github.com\jteeuwen\glfw\_obj\image.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwLoadMemoryTexture2D':
C:\Go\src\pkg\github.com\jteeuwen\glfw/image.go:78: undefined reference to `__imp_glfwLoadMemoryTexture2D'
$WORK\github.com\jteeuwen\glfw\_obj\image.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwLoadTexture2D':
C:\Go\src\pkg\github.com\jteeuwen\glfw/image.go:91: undefined reference to `__imp_glfwLoadTexture2D'
$WORK\github.com\jteeuwen\glfw\_obj\image.cgo2.o: In function `_cgo_680190d759a2_Cfunc_glfwReadMemoryImage':
C:\Go\src\pkg\github.com\jteeuwen\glfw/image.go:107: undefined reference to `__imp_glfwReadMemoryImage'
$WORK\github.com\jteeuwen\glfw\_obj\callback.o: In function `setWindowSizeCB':
C:/Go/src/pkg/github.com/jteeuwen/glfw/callback.c:9: undefined reference to `__imp_glfwSetWindowSizeCallback'
$WORK\github.com\jteeuwen\glfw\_obj\callback.o: In function `setWindowCloseCB':
C:/Go/src/pkg/github.com/jteeuwen/glfw/callback.c:14: undefined reference to `__imp_glfwSetWindowCloseCallback'
$WORK\github.com\jteeuwen\glfw\_obj\callback.o: In function `setWindowRefreshCB':
C:/Go/src/pkg/github.com/jteeuwen/glfw/callback.c:19: undefined reference to `__imp_glfwSetWindowRefreshCallback'
$WORK\github.com\jteeuwen\glfw\_obj\callback.o: In function `setMouseButtonCB':
C:/Go/src/pkg/github.com/jteeuwen/glfw/callback.c:24: undefined reference to `__imp_glfwSetMouseButtonCallback'
$WORK\github.com\jteeuwen\glfw\_obj\callback.o: In function `setMousePosCB':
C:/Go/src/pkg/github.com/jteeuwen/glfw/callback.c:29: undefined reference to `__imp_glfwSetMousePosCallback'
$WORK\github.com\jteeuwen\glfw\_obj\callback.o: In function `setMouseWheelCB':
C:/Go/src/pkg/github.com/jteeuwen/glfw/callback.c:34: undefined reference to `__imp_glfwSetMouseWheelCallback'
$WORK\github.com\jteeuwen\glfw\_obj\callback.o: In function `setKeyCB':
C:/Go/src/pkg/github.com/jteeuwen/glfw/callback.c:39: undefined reference to `__imp_glfwSetKeyCallback'
$WORK\github.com\jteeuwen\glfw\_obj\callback.o: In function `setCharCB':
C:/Go/src/pkg/github.com/jteeuwen/glfw/callback.c:44: undefined reference to `__imp_glfwSetCharCallback'
collect2: ld returned 1 exit status
",12373
6,12482910,"$ go run objParser.go ak47.obj extincteur_obj.obj 
--Creating ak47.json3d from ak47.obj
--Exported 85772 faces with 89088 verticies
--Creating extincteur_obj.json3d from extincteur_obj.obj
--Exported 150316 faces with 151425 verticies
Parsed 2 files in 8.4963s
",261
7,12482910,"$ go run objParser.go ak47.obj extincteur_obj.obj 
--Creating ak47.json3d from ak47.obj
--Creating extincteur_obj.json3d from extincteur_obj.obj
--Exported 85772 faces with 89088 verticies
--Exported 150316 faces with 151425 verticies
Parsed 2 files in 10.23137s
",263
8,12482910,"package main

func parseFile(name string, finished chan int) {
    var Verts []*Vertex
    var Texs []*TexCoord
    var Faces []*Face

    var objFile, mtlFile, jsonFile *os.File
    var parseMaterial bool

    // Set up files and i/o
    inName := name
    outName := strings.Replace(inName, "".obj"", "".json3d"", -1)
    parseMaterial = false

    fmt.Printf(""--""+FgGreen+""Creating""+Reset+"" %s from %s\n"", outName, inName)

    var err error
    var part []byte
    var prefix bool

    if objFile, err = os.Open(inName); err != nil {
        fmt.Println(FgRed+""!!Failed to open input file!!""+Reset)
        return
    }

    if jsonFile, err = os.Create(outName); err != nil {
        fmt.Println(FgRed+""!!Failed to create output file!!""+Reset)
        return
    }

    reader := bufio.NewReader(objFile)
    writer := bufio.NewWriter(jsonFile)
    buffer := bytes.NewBuffer(make([]byte, 1024))

    // Read the file in and parse out what we need
    for {
        if part, prefix, err = reader.ReadLine(); err != nil {
            break
        }

        buffer.Write(part)
        if !prefix {
            line := buffer.String()
            if(strings.Contains(line, ""v "")) {
                Verts = append(Verts, parseVertex(line))
            } else if(strings.Contains(line, ""vt "")) {
                Texs = append(Texs, parseTexCoord(line))
            } else if(strings.Contains(line, ""f "")) {
                Faces = append(Faces, parseFace(line, Verts, Texs))
            } else if(strings.Contains(line, ""mtllib "")) {
                mtlName := strings.Split(line, "" "")[1]
                if mtlFile, err = os.Open(mtlName); err != nil {
                    fmt.Printf(""--""+FgRed+""Failed to find material file: %s\n""+Reset, mtlName)
                    parseMaterial = false
                } else {
                    parseMaterial = true
                }
            }
            buffer.Reset()
        }
    }

    if err == io.EOF {
        err = nil
    }

    objFile.Close()

    // Write out the data
    writer.WriteString(""{\""obj\"":[\n"");

    // Write out the verts
    writer.WriteString(""{\""vrt\"":[\n"");
    for i, vert := range Verts {
        writer.WriteString(vert.String())
        if i < len(Verts) - 1 { writer.WriteString("","") }
        writer.WriteString(""\n"")
    }

    // Write out the faces
    writer.WriteString(""],\""fac\"":[\n"")
    for i, face := range Faces {
        writer.WriteString(face.String(true))
        if i < len(Faces) - 1 { writer.WriteString("","") }
        writer.WriteString(""\n"")
    }

    // Write out the normals
    writer.WriteString(""],\""nrm\"":["")
    for i, face := range Faces {


        writer.WriteString(""["")
        for j, vert := range face.verts {
            length := math.Sqrt((vert.X * vert.X) + (vert.Y * vert.Y) + (vert.Z * vert.Z))
            x := vert.X / length
            y := vert.Y / length
            z := vert.Z / length
            normal := fmt.Sprintf(""[%f,%f,%f]"", x, y, z)
            writer.WriteString(normal)
            if(j < len(face.verts)-1) { writer.WriteString("","") }
        }
        writer.WriteString(""]"")




        //writer.WriteString(""[0, 1, 0]"")
        if i < len(Faces) - 1 { writer.WriteString("","") }
        writer.WriteString(""\n"")
    }

    // Write out the tex coords
    writer.WriteString(""],\""tex\"":["")
    for i, face := range Faces {
        writer.WriteString(""["")
        writer.WriteString(face.tex[0].String())
        writer.WriteString("","")
        writer.WriteString(face.tex[1].String())
        writer.WriteString("","")
        writer.WriteString(face.tex[2].String())
        writer.WriteString(""]"")
        if i < len(Faces) - 1 { writer.WriteString("","") }
        writer.WriteString(""\n"")
    }

    // Close obj block
    writer.WriteString(""]}]"");

    if parseMaterial {
        writer.WriteString("",mat:[{"");
        reader := bufio.NewReader(mtlFile)

        // Read the file in and parse out what we need
        for {
            if part, prefix, err = reader.ReadLine(); err != nil {
                break
            }

            buffer.Write(part)
            if !prefix {
                line := buffer.String()
                if(strings.Contains(line, ""map_Kd "")) {
                    parts := strings.Split(line, "" "")
                    entry := fmt.Sprintf(""\""t\"":\""%s\"","", parts[1])
                    writer.WriteString(entry)

                    width, height := 256, 256
                    var imageFile *os.File
                    if imageFile, err = os.Open(parts[1]); err != nil {
                        fmt.Printf(""--""+FgRed+""Failed to find %s, defaulting to 256x256""+Reset+""\n"", parts[1])
                        return
                    } else {
                        var config image.Config
                        imageReader := bufio.NewReader(imageFile)
                        config, err = jpeg.DecodeConfig(imageReader)
                        width, height = config.Width, config.Height
                        fmt.Printf(""--""+FgGreen+""Verifing""+Reset+"" that %s is %dpx x %dpx\n"", parts[1], width, height)
                    }

                    size := fmt.Sprintf(""\""w\"":%d,\""h\"":%d,"", width, height)
                    writer.WriteString(size)

                } else if(strings.Contains(line, ""Kd "")) {
                    parts := strings.Split(line, "" "")
                    entry := fmt.Sprintf(""\""r\"":%s, \""g\"":%s, \""b\"":%s,"", parts[1], parts[2], parts[3])
                    writer.WriteString(entry)
                }
                buffer.Reset()
            }
        }

        if err == io.EOF {
            err = nil
        }

        writer.WriteString(""\""res\"":100,\""uv\"":true}]"");
    }

    // Close json
    writer.WriteString(""}"");
    writer.Flush()
    jsonFile.Close()

    fmt.Printf(""--""+FgGreen+""Exported""+Reset+"" %d faces with %d verticies\n"", len(Faces), len(Verts))

    finished <- -1
}

func main(){
    // Verify we were called correctly
    if len(os.Args) < 2 {
        fmt.Println(""Usage: go run objParser.go "");
        return
    }

    files := len(os.Args)
    finished := make(chan int)

    now := time.Now()

    for i := 1; i < files; i++ {
        go parseFile(os.Args[i], finished)
    }

    for i := 1; i < files; i++ {
        <- finished
    }

    fmt.Printf(""Parsed %d files in %s\n"", files-1, time.Since(now))
}
",6363
9,12885235,"package hello

import (
    ""fmt""
    ""net/http""
)

func init() {
    http.HandleFunc(""/"", handler)
}

func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprint(w, ""Hello, world!"")
}
",195
10,12885235,"application: helloworld
version: 1
runtime: go
api_version: go1
",64
11,12885235,"- url: /.*
  script: _go_app
",29
12,12885235,"Last login: Sun Oct 14 13:05:37 on ttys000
derek-etnyres-macbook-pro-2:~ dereketnyre$ dev_appserver.py myapp/
WARNING  2012-10-14 18:19:54,239 rdbms_mysqldb.py:74] The rdbms API is not available because the MySQLdb library could not be loaded.
Warning: You are using a Python runtime (2.7) that is more recent than the production runtime environment (2.5). Your application may use features that are not available in the production environment and may not work correctly when deployed to production.
CRITICAL 2012-10-14 18:19:54,686 appcfg.py:562] The api_version specified in app.yaml (go1) is not supported by this release of the SDK.  The supported api_versions are ['1'].
",676
13,12885235,"derek-etnyres-macbook-pro-2:~ dereketnyre$ dev_appserver.py myapp/
WARNING  2012-10-14 21:03:14,910 rdbms_mysqldb.py:74] The rdbms API is not available because the MySQLdb library could not be loaded.
Warning: You are using a Python runtime (2.7) that is more recent than the production runtime environment (2.5). Your application may use features that are not available in the production environment and may not work correctly when deployed to production.
INFO     2012-10-14 21:03:15,324 appcfg.py:585] Checking for updates to the SDK.
INFO     2012-10-14 21:03:15,551 appcfg.py:603] The SDK is up to date.
WARNING  2012-10-14 21:03:15,551 datastore_file_stub.py:518] Could not read datastore data from /var/folders/s0/095xdtkd3cgbjp73tpxx309r0000gn/T/dev_appserver.datastore
WARNING  2012-10-14 21:03:15,552 simple_search_stub.py:949] Could not read search indexes from /var/folders/s0/095xdtkd3cgbjp73tpxx309r0000gn/T/dev_appserver.searchindexes
WARNING  2012-10-14 21:03:15,562 dev_appserver.py:3621] Could not initialize images API; you are likely missing the Python ""PIL"" module. ImportError: No module named _imaging
INFO     2012-10-14 21:03:15,570 dev_appserver_multiprocess.py:655] Running application dev~helloworld on port 8080: http://localhost:8080
INFO     2012-10-14 21:03:15,570 dev_appserver_multiprocess.py:657] Admin console is available at: http://localhost:8080/_ah/admin
",1395
14,12885235,": no goroot found at /Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/goroot 
      args = ('no goroot found at /Applications/GoogleAppEngine...bundle/Contents/Resources/google_appengine/goroot',) 
      message = 'no goroot found at /Applications/GoogleAppEngine...bundle/Contents/Resources/google_appengine/goroot'
",396
15,12885235,"pe 'exceptions.AttributeError'> Python 2.7.2: /usr/bin/python
Sun Oct 14 21:29:05 2012
A problem occurred in a Python script. Here is the sequence of function calls leading up to the error, in the order they occurred.

 /Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver.py in _HandleRequest(self=)
   2952         outfile = cStringIO.StringIO()
   2953         try:
=> 2954           self._Dispatch(dispatcher, self.rfile, outfile, env_dict)
   2955         finally:
   2956           self.module_manager.UpdateModuleFileModificationTimes()
self = , self._Dispatch = >, dispatcher = , self.rfile = , outfile = , env_dict = {'APPENGINE_RUNTIME': 'go', 'APPLICATION_ID': 'dev~helloworld', 'CURRENT_VERSION_ID': '1.1', 'DEFAULT_VERSION_HOSTNAME': 'localhost:8080', 'REMOTE_ADDR': '127.0.0.1', 'REQUEST_ID_HASH': 'C1DFD96E', 'REQUEST_METHOD': 'GET', 'SDK_VERSION': '1.7.2', 'SERVER_NAME': 'localhost', 'SERVER_PORT': '8080', ...}
 /Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver.py in _Dispatch(self=, dispatcher=, socket_infile=, outfile=, env_dict={'APPENGINE_RUNTIME': 'go', 'APPLICATION_ID': 'dev~helloworld', 'CURRENT_VERSION_ID': '1.1', 'DEFAULT_VERSION_HOSTNAME': 'localhost:8080', 'REMOTE_ADDR': '127.0.0.1', 'REQUEST_ID_HASH': 'C1DFD96E', 'REQUEST_METHOD': 'GET', 'SDK_VERSION': '1.7.2', 'SERVER_NAME': 'localhost', 'SERVER_PORT': '8080', ...})
   2822           dispatcher.Dispatch(app_server_request,
   2823                               outfile,
=> 2824                               base_env_dict=env_dict)
   2825         finally:
   2826           request_file.close()
base_env_dict undefined, env_dict = {'APPENGINE_RUNTIME': 'go', 'APPLICATION_ID': 'dev~helloworld', 'CURRENT_VERSION_ID': '1.1', 'DEFAULT_VERSION_HOSTNAME': 'localhost:8080', 'REMOTE_ADDR': '127.0.0.1', 'REQUEST_ID_HASH': 'C1DFD96E', 'REQUEST_METHOD': 'GET', 'SDK_VERSION': '1.7.2', 'SERVER_NAME': 'localhost', 'SERVER_PORT': '8080', ...}
 /Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver.py in Dispatch(self=, request= force_admin: False>, outfile=, base_env_dict={'APPENGINE_RUNTIME': 'go', 'APPLICATION_ID': 'dev~helloworld', 'CURRENT_VERSION_ID': '1.1', 'DEFAULT_VERSION_HOSTNAME': 'localhost:8080', 'REMOTE_ADDR': '127.0.0.1', 'REQUEST_ID_HASH': 'C1DFD96E', 'REQUEST_METHOD': 'GET', 'SDK_VERSION': '1.7.2', 'SERVER_NAME': 'localhost', 'SERVER_PORT': '8080', ...})
    705         forward_request = dispatcher.Dispatch(request,
    706                                               outfile,
=>  707                                               base_env_dict=base_env_dict)
    708 
    709         while forward_request:
base_env_dict = {'APPENGINE_RUNTIME': 'go', 'APPLICATION_ID': 'dev~helloworld', 'CURRENT_VERSION_ID': '1.1', 'DEFAULT_VERSION_HOSTNAME': 'localhost:8080', 'REMOTE_ADDR': '127.0.0.1', 'REQUEST_ID_HASH': 'C1DFD96E', 'REQUEST_METHOD': 'GET', 'SDK_VERSION': '1.7.2', 'SERVER_NAME': 'localhost', 'SERVER_PORT': '8080', ...}
 /Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver.py in Dispatch(self=, request= force_admin: False>, outfile=, base_env_dict={'APPENGINE_RUNTIME': 'go', 'APPLICATION_ID': 'dev~helloworld', 'CURRENT_VERSION_ID': '1.1', 'DEFAULT_VERSION_HOSTNAME': 'localhost:8080', 'REMOTE_ADDR': '127.0.0.1', 'REQUEST_ID_HASH': 'C1DFD96E', 'REQUEST_METHOD': 'GET', 'SDK_VERSION': '1.7.2', 'SERVER_NAME': 'localhost', 'SERVER_PORT': '8080', ...})
   1770                      memory_file,
   1771                      outfile,
=> 1772                      self._module_dict)
   1773     finally:
   1774       logging.root.level = before_level
self = , self._module_dict = {'codecs': , 'email': , 'email.Charset': , 'email.Encoders': , 'email.Errors': , 'email.FeedParser': , 'email.Generator': , 'email.Header': , 'email.Iterators': , 'email.MIMEAudio': , ...}
 /Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver.py in ExecuteCGI(config=, root_path='/Users/dereketnyre/myapp', handler_path='_go_app', cgi_path='/Users/dereketnyre/myapp/_go_app', env={'APPENGINE_RUNTIME': 'go', 'APPLICATION_ID': 'dev~helloworld', 'AUTH_DOMAIN': 'gmail.com', 'CONTENT_LENGTH': '', 'CONTENT_TYPE': 'application/x-www-form-urlencoded', 'CURRENT_VERSION_ID': '1.1', 'DEFAULT_VERSION_HOSTNAME': 'localhost:8080', 'GATEWAY_INTERFACE': 'CGI/1.1', 'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'HTTP_ACCEPT_LANGUAGE': 'en-us', ...}, infile=, outfile=, module_dict={'codecs': , 'email': , 'email.Charset': , 'email.Encoders': , 'email.Errors': , 'email.FeedParser': , 'email.Generator': , 'email.Header': , 'email.Iterators': , 'email.MIMEAudio': , ...}, exec_script=, exec_py27_handler=)
   1588     from google.appengine.ext.go import execute_go_cgi
   1589     return execute_go_cgi(root_path, config, handler_path, cgi_path,
=> 1590         env, infile, outfile)
   1591 
   1592 
env = {'APPENGINE_RUNTIME': 'go', 'APPLICATION_ID': 'dev~helloworld', 'AUTH_DOMAIN': 'gmail.com', 'CONTENT_LENGTH': '', 'CONTENT_TYPE': 'application/x-www-form-urlencoded', 'CURRENT_VERSION_ID': '1.1', 'DEFAULT_VERSION_HOSTNAME': 'localhost:8080', 'GATEWAY_INTERFACE': 'CGI/1.1', 'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'HTTP_ACCEPT_LANGUAGE': 'en-us', ...}, infile = , outfile = 
 /Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/ext/go/__init__.py in execute_go_cgi(root_path='/Users/dereketnyre/myapp', config=, handler_path='_go_app', cgi_path='/Users/dereketnyre/myapp/_go_app', env={'APPENGINE_RUNTIME': 'go', 'APPLICATION_ID': 'dev~helloworld', 'AUTH_DOMAIN': 'gmail.com', 'CONTENT_LENGTH': '', 'CONTENT_TYPE': 'application/x-www-form-urlencoded', 'CURRENT_VERSION_ID': '1.1', 'DEFAULT_VERSION_HOSTNAME': 'localhost:8080', 'GATEWAY_INTERFACE': 'CGI/1.1', 'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'HTTP_ACCEPT_LANGUAGE': 'en-us', ...}, infile=, outfile=)
    519     RAPI_HANDLER = handler.ApiCallHandler()
    520     GO_APP = GoApp(root_path)
=>  521   GO_APP.make_and_run(env)
    522 
    523 
global GO_APP = None, GO_APP.make_and_run undefined, env = {'APPENGINE_RUNTIME': 'go', 'APPLICATION_ID': 'dev~helloworld', 'AUTH_DOMAIN': 'gmail.com', 'CONTENT_LENGTH': '', 'CONTENT_TYPE': 'application/x-www-form-urlencoded', 'CURRENT_VERSION_ID': '1.1', 'DEFAULT_VERSION_HOSTNAME': 'localhost:8080', 'GATEWAY_INTERFACE': 'CGI/1.1', 'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'HTTP_ACCEPT_LANGUAGE': 'en-us', ...}
: 'NoneType' object has no attribute 'make_and_run' 
      args = (""'NoneType' object has no attribute 'make_and_run'"",) 
      message = ""'NoneType' object has no attribute 'make_and_run'""
",7310
16,13699612,"$ go tool pprof -h
",19
17,13699612,"(10:16) jnml@fsc-r550:~$ go tool pprof -h
Option h is ambiguous (heapcheck, help)
Invalid option(s)

Usage:
pprof [options]  
    is a space separated list of profile names.
pprof [options] 
    is a list of profile files where each file contains
   the necessary symbol mappings  as well as profile data (likely generated
   with --raw).
pprof [options] 
    is a remote form.  Symbols are obtained from host:port/pprof/symbol

   Each name can be:
   /path/to/profile        - a path to a profile file
   host:port[/]   - a location of a service to get profile from

   The / can be /pprof/heap, /pprof/profile, /pprof/pmuprofile,
                         /pprof/growth, /pprof/contention, /pprof/wall,
                         /pprof/thread, or /pprof/filteredprofile.
   For instance:
     pprof http://myserver.com:80/pprof/heap
   If / is omitted, the service defaults to /pprof/profile (cpu profiling).
pprof --symbols 
   Maps addresses to symbol names.  In this mode, stdin should be a
   list of library mappings, in the same format as is found in the heap-
   and cpu-profile files (this loosely matches that of /proc/self/maps
   on linux), followed by a list of hex addresses to map, one per line.

   For more help with querying remote servers, including how to add the
   necessary server-side support code, see this filename (or one like it):

   /usr/doc/google-perftools-1.5/pprof_remote_servers.html

Options:
   --cum               Sort by cumulative data
   --base=       Subtract  from  before display
   --interactive       Run in interactive mode (interactive ""help"" gives help) [default]
   --seconds=       Length of time for dynamic profiles [default=30 secs]
   --add_lib=    Read additional symbols and line info from the given library
   --lib_prefix=  Comma separated list of library path prefixes

Reporting Granularity:
   --addresses         Report at address level
   --lines             Report at source line level
   --functions         Report at function level [default]
   --files             Report at source file level

Output type:
   --text              Generate text report
   --callgrind         Generate callgrind format to stdout
   --gv                Generate Postscript and display
   --web               Generate SVG and display
   --list=     Generate source listing of matching routines
   --disasm=   Generate disassembly of matching routines
   --symbols           Print demangled symbol names found at given addresses
   --dot               Generate DOT file to stdout
   --ps                Generate Postcript to stdout
   --pdf               Generate PDF to stdout
   --svg               Generate SVG to stdout
   --gif               Generate GIF to stdout
   --raw               Generate symbolized pprof data (useful with remote fetch)

Heap-Profile Options:
   --inuse_space       Display in-use (mega)bytes [default]
   --inuse_objects     Display in-use objects
   --alloc_space       Display allocated (mega)bytes
   --alloc_objects     Display allocated objects
   --show_bytes        Display space in bytes
   --drop_negative     Ignore negative differences

Contention-profile options:
   --total_delay       Display total delay at each region [default]
   --contentions       Display number of delays at each region
   --mean_delay        Display mean delay at each region

Call-graph Options:
   --nodecount=     Show at most so many nodes [default=80]
   --nodefraction=  Hide nodes below *total [default=.005]
   --edgefraction=  Hide edges below *total [default=.001]
   --focus=    Focus on nodes matching 
   --ignore=   Ignore nodes matching 
   --scale=         Set GV scaling [default=0]
   --heapcheck         Make nodes with non-0 object counts
                       (i.e. direct leak generators) more visible

Miscellaneous:
   --tools=    Prefix for object tool pathnames
   --test              Run unit tests
   --help              This message
   --version           Version information

Environment Variables:
   PPROF_TMPDIR        Profiles directory. Defaults to $HOME/pprof
   PPROF_TOOLS         Prefix for object tools pathnames

Examples:

pprof /bin/ls ls.prof
                       Enters ""interactive"" mode
pprof --text /bin/ls ls.prof
                       Outputs one line per procedure
pprof --web /bin/ls ls.prof
                       Displays annotated call-graph in web browser
pprof --gv /bin/ls ls.prof
                       Displays annotated call-graph via 'gv'
pprof --gv --focus=Mutex /bin/ls ls.prof
                       Restricts to code paths including a .*Mutex.* entry
pprof --gv --focus=Mutex --ignore=string /bin/ls ls.prof
                       Code paths including Mutex but not string
pprof --list=getdir /bin/ls ls.prof
                       (Per-line) annotated source listing for getdir()
pprof --disasm=getdir /bin/ls ls.prof
                       (Per-PC) annotated disassembly for getdir()

pprof http://localhost:1234/
                       Enters ""interactive"" mode
pprof --text localhost:1234
                       Outputs one line per procedure for localhost:1234
pprof --raw localhost:1234 > ./local.raw
pprof --text ./local.raw
                       Fetches a remote profile for later analysis and then
                       analyzes it in text mode.

FATAL ERROR: Invalid option(s)
go tool pprof: exit status 1
(10:16) jnml@fsc-r550:~$ 
",5379
18,13777298,"// Copyright 2012 Stefan Nilsson
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package prio provides a priority queue.
// The queue can hold elements that implement the two methods of prio.Interface.
package prio

/*
A type that implements prio.Interface can be inserted into a priority queue.

The simplest use case looks like this:

        type myInt int

        func (x myInt) Less(y prio.Interface) bool { return x < y.(myInt) }
        func (x myInt) Index(i int)                {}

To use the Remove method you need to keep track of the index of elements
in the heap, e.g. like this:

        type myType struct {
                value int
                index int // index in heap
        }

        func (x *myType) Less(y prio.Interface) bool { return x.value < y.(*myType).value }
        func (x *myType) Index(i int)                { x.index = i }
*/
type Interface interface {
        // Less returns whether this element should sort before element x.
        Less(x Interface) bool
        // Index is called by the priority queue when this element is moved to index i.
        Index(i int)
}

// Queue represents a priority queue.
// The zero value for Queue is an empty queue ready to use.
type Queue struct {
        h []Interface
}

// New returns an initialized priority queue with the given elements.
// A call of the form New(x...) uses the underlying array of x to implement
// the queue and hence might change the elements of x.
// The complexity is O(n), where n = len(x).
func New(x ...Interface) Queue {
        q := Queue{x}
        heapify(q.h)
        return q
}

// Push pushes the element x onto the queue.
// The complexity is O(log(n)) where n = q.Len().
func (q *Queue) Push(x Interface) {
        n := len(q.h)
        q.h = append(q.h, x)
        up(q.h, n) // x.Index(n) is done by up.
}

// Pop removes a minimum element (according to Less) from the queue and returns it.
// The complexity is O(log(n)), where n = q.Len().
func (q *Queue) Pop() Interface {
        h := q.h
        n := len(h) - 1
        x := h[0]
        h[0], h[n] = h[n], nil
        h = h[:n]
        if n > 0 {
                down(h, 0) // h[0].Index(0) is done by down.
        }
        q.h = h
        x.Index(-1) // for safety
        return x
}

// Peek returns, but does not remove, a minimum element (according to Less) of the queue.
func (q *Queue) Peek() Interface {
        return q.h[0]
}

// Remove removes the element at index i from the queue and returns it.
// The complexity is O(log(n)), where n = q.Len().
func (q *Queue) Remove(i int) Interface {
        h := q.h
        n := len(h) - 1
        x := h[i]
        h[i], h[n] = h[n], nil
        h = h[:n]
        if i < n {
                down(h, i) // h[i].Index(i) is done by down.
                up(h, i)
        }
        q.h = h
        x.Index(-1) // for safety
        return x
}

// Len returns the number of elements in the queue.
func (q *Queue) Len() int {
        return len(q.h)
}

// Establishes the heap invariant in O(n) time.
func heapify(h []Interface) {
        n := len(h)
        for i := n - 1; i >= n/2; i-- {
                h[i].Index(i)
        }
        for i := n/2 - 1; i >= 0; i-- { // h[i].Index(i) is done by down.
                down(h, i)
        }
}

// Moves element at position i towards top of heap to restore invariant.
func up(h []Interface, i int) {
        for {
                parent := (i - 1) / 2
                if i == 0 || h[parent].Less(h[i]) {
                        h[i].Index(i)
                        break
                }
                h[parent], h[i] = h[i], h[parent]
                h[i].Index(i)
                i = parent
        }
}

// Moves element at position i towards bottom of heap to restore invariant.
func down(h []Interface, i int) {
        for {
                n := len(h)
                left := 2*i + 1
                if left >= n {
                        h[i].Index(i)
                        break
                }
                j := left
                if right := left + 1; right < n && h[right].Less(h[left]) {
                        j = right
                }
                if h[i].Less(h[j]) {
                        h[i].Index(i)
                        break
                }
                h[i], h[j] = h[j], h[i]
                h[i].Index(i)
                i = j
        }
}
",4886
19,14080024,"  // Handle the reads
  var tbuf [81920]byte

  for {

    n, err := c.rwc.Read(tbuf[0:])

    // Was there an error in reading ?
    if err != nil {
        log.Printf(""Could not read packet : %s"", err.Error())
        break
    }

    log.Println(n)

}

return
",263
20,14080024,"2012/12/29 13:45:12 16384
2012/12/29 13:45:12 16018
2012/12/29 13:45:12 16384
2012/12/29 13:45:12 16016
2012/12/29 13:45:13 16384
2012/12/29 13:45:13 16016
2012/12/29 13:45:13 16384
2012/12/29 13:45:13 16016
2012/12/29 13:45:13 16384
2012/12/29 13:45:13 16016
2012/12/29 13:45:13 16384
2012/12/29 13:45:13 16016
2012/12/29 13:45:13 16384
2012/12/29 13:45:13 16016
2012/12/29 13:45:13 16384
2012/12/29 13:45:13 16016
2012/12/29 13:45:13 16384
2012/12/29 13:45:14 16016
2012/12/29 13:45:14 16384
2012/12/29 13:45:14 16016
2012/12/29 13:45:14 16384
2012/12/29 13:45:14 16016
2012/12/29 13:45:14 16384
2012/12/29 13:45:14 16016
2012/12/29 13:45:14 16384
2012/12/29 13:45:14 16016
2012/12/29 13:45:14 16384
2012/12/29 13:45:14 16016
2012/12/29 13:45:14 16384
2012/12/29 13:45:14 16016
2012/12/29 13:45:15 16384
2012/12/29 13:45:15 16016
2012/12/29 13:45:15 16384
2012/12/29 13:45:15 16016
2012/12/29 13:45:15 16384
2012/12/29 13:45:15 16016
2012/12/29 13:45:15 16384
2012/12/29 13:45:15 16016
2012/12/29 13:45:15 16384
2012/12/29 13:45:15 16016
2012/12/29 13:45:15 16384
2012/12/29 13:45:15 16016
2012/12/29 13:45:15 16384
2012/12/29 13:45:16 16016
2012/12/29 13:45:16 16384
2012/12/29 13:45:16 16016
2012/12/29 13:45:16 16384
2012/12/29 13:45:16 16016
2012/12/29 13:45:16 16384
2012/12/29 13:45:16 16016
2012/12/29 13:45:16 16384
2012/12/29 13:45:16 16016
2012/12/29 13:45:18 16384
2012/12/29 13:45:18 16016
2012/12/29 13:45:19 16384
2012/12/29 13:45:19 16016
2012/12/29 13:45:19 16384
2012/12/29 13:45:19 16016
2012/12/29 13:45:19 16384
2012/12/29 13:45:19 16016
2012/12/29 13:45:19 16384
2012/12/29 13:45:19 16016
2012/12/29 13:45:19 16384
2012/12/29 13:45:19 16016
2012/12/29 13:45:19 16384
2012/12/29 13:45:19 16016
2012/12/29 13:45:19 16384
2012/12/29 13:45:20 16016
2012/12/29 13:45:20 16384
2012/12/29 13:45:20 16016
2012/12/29 13:45:20 16384
2012/12/29 13:45:20 16016
2012/12/29 13:45:20 16384
2012/12/29 13:45:20 16016
2012/12/29 13:45:20 16384
2012/12/29 13:45:20 16016
2012/12/29 13:45:20 16384
2012/12/29 13:45:20 16016
2012/12/29 13:45:20 16384
2012/12/29 13:45:20 16016
2012/12/29 13:45:21 16384
2012/12/29 13:45:21 16016
2012/12/29 13:45:21 16384
2012/12/29 13:45:21 16016
2012/12/29 13:45:21 16384
2012/12/29 13:45:21 16016
2012/12/29 13:45:21 16384
2012/12/29 13:45:21 16016
2012/12/29 13:45:21 16384
2012/12/29 13:45:21 16016
2012/12/29 13:45:21 16384
2012/12/29 13:45:21 16016
2012/12/29 13:45:21 16384
2012/12/29 13:45:22 16016
2012/12/29 13:45:22 16384
2012/12/29 13:45:22 16016
2012/12/29 13:45:22 16384
2012/12/29 13:45:22 16016
2012/12/29 13:45:22 16384
2012/12/29 13:45:22 16016
2012/12/29 13:45:22 16384
2012/12/29 13:45:22 16016
2012/12/29 13:45:22 16384
2012/12/29 13:45:22 16016
2012/12/29 13:45:22 16384
2012/12/29 13:45:22 16016
2012/12/29 13:45:23 16384
2012/12/29 13:45:23 16016
2012/12/29 13:45:23 16384
2012/12/29 13:45:23 16016
2012/12/29 13:45:23 16384
2012/12/29 13:45:23 16016
2012/12/29 13:45:23 16384
2012/12/29 13:45:23 16016
2012/12/29 13:45:23 16384
2012/12/29 13:45:23 16016
2012/12/29 13:45:23 16384
2012/12/29 13:45:23 16016
2012/12/29 13:45:24 16384
2012/12/29 13:45:24 16016
2012/12/29 13:45:24 16384
2012/12/29 13:45:24 16016
2012/12/29 13:45:24 16384
2012/12/29 13:45:24 16016
2012/12/29 13:45:24 16384
2012/12/29 13:45:24 16016
2012/12/29 13:45:24 16384
2012/12/29 13:45:24 16016
2012/12/29 13:45:24 16384
2012/12/29 13:45:24 16016
2012/12/29 13:45:24 16384
2012/12/29 13:45:25 16016
2012/12/29 13:45:25 16384
2012/12/29 13:45:25 16016
2012/12/29 13:45:25 16384
2012/12/29 13:45:25 16016
2012/12/29 13:45:25 16384
2012/12/29 13:45:25 16016
2012/12/29 13:45:25 16384
2012/12/29 13:45:25 16016
2012/12/29 13:45:25 16384
2012/12/29 13:45:25 16016
2012/12/29 13:45:25 16384
2012/12/29 13:45:26 16016
2012/12/29 13:45:26 16384
2012/12/29 13:45:26 16016
2012/12/29 13:45:26 16384
2012/12/29 13:45:26 16016
2012/12/29 13:45:26 16384
2012/12/29 13:45:26 16016
2012/12/29 13:45:26 16384
2012/12/29 13:45:26 16016
2012/12/29 13:45:26 16384
2012/12/29 13:45:26 16016
2012/12/29 13:45:26 16384
2012/12/29 13:45:26 16016
2012/12/29 13:45:27 16384
2012/12/29 13:45:27 16016
2012/12/29 13:45:27 16384
2012/12/29 13:45:27 16016
2012/12/29 13:45:27 16384
2012/12/29 13:45:27 16016
2012/12/29 13:45:27 16384
2012/12/29 13:45:27 16016
2012/12/29 13:45:27 16384
2012/12/29 13:45:28 16016
2012/12/29 13:45:28 16384
2012/12/29 13:45:29 16016
2012/12/29 13:45:29 16384
2012/12/29 13:45:29 16016
2012/12/29 13:45:29 16384
2012/12/29 13:45:29 16016
2012/12/29 13:45:29 16384
2012/12/29 13:45:29 16016
2012/12/29 13:45:29 16384
2012/12/29 13:45:29 16016
2012/12/29 13:45:29 16384
2012/12/29 13:45:29 16016
2012/12/29 13:45:29 16384
2012/12/29 13:45:30 16016
2012/12/29 13:45:30 16384
2012/12/29 13:45:30 16016
2012/12/29 13:45:30 16384
2012/12/29 13:45:30 16016
2012/12/29 13:45:30 16384
2012/12/29 13:45:30 16016
2012/12/29 13:45:30 16384
2012/12/29 13:45:30 16016
2012/12/29 13:45:31 16384
2012/12/29 13:45:31 16016
2012/12/29 13:45:31 16384
2012/12/29 13:45:31 16016
2012/12/29 13:45:32 16384
2012/12/29 13:45:32 16016
2012/12/29 13:45:32 16384
2012/12/29 13:45:32 16016
2012/12/29 13:45:32 16384
2012/12/29 13:45:32 16016
2012/12/29 13:45:32 16384
2012/12/29 13:45:32 16016
2012/12/29 13:45:32 16384
2012/12/29 13:45:32 16016
2012/12/29 13:45:32 16384
2012/12/29 13:45:32 16016
2012/12/29 13:45:32 16384
2012/12/29 13:45:33 16016
2012/12/29 13:45:33 16384
2012/12/29 13:45:33 16016
2012/12/29 13:45:33 16384
2012/12/29 13:45:33 16016
2012/12/29 13:45:33 16384
2012/12/29 13:45:33 16016
2012/12/29 13:45:33 16384
2012/12/29 13:45:33 16016
2012/12/29 13:45:33 16384
2012/12/29 13:45:33 16016
2012/12/29 13:45:33 16384
2012/12/29 13:45:34 16016
2012/12/29 13:45:34 16384
2012/12/29 13:45:34 16016
2012/12/29 13:45:34 16384
2012/12/29 13:45:34 16016
2012/12/29 13:45:34 16384
2012/12/29 13:45:34 16016
2012/12/29 13:45:34 16384
2012/12/29 13:45:34 16016
2012/12/29 13:45:34 16384
2012/12/29 13:45:34 16016
2012/12/29 13:45:34 16384
2012/12/29 13:45:35 16016
2012/12/29 13:45:35 16384
2012/12/29 13:45:35 16016
2012/12/29 13:45:35 16384
2012/12/29 13:45:35 16016
2012/12/29 13:45:35 16384
2012/12/29 13:45:35 16016
2012/12/29 13:45:36 16384
2012/12/29 13:45:36 16016
2012/12/29 13:45:36 16384
2012/12/29 13:45:36 16016
2012/12/29 13:45:37 16384
2012/12/29 13:45:37 16016
2012/12/29 13:45:37 16384
2012/12/29 13:45:37 16016
2012/12/29 13:45:37 16384
2012/12/29 13:45:37 16016
2012/12/29 13:45:37 16384
2012/12/29 13:45:37 16016
2012/12/29 13:45:37 16384
2012/12/29 13:45:37 16016
2012/12/29 13:45:37 4048
",6525
21,14298523,"package main

import (
    ""fmt""
    ""math/rand""
    ""time""
)

const (
    NUMBER_OF_SIMULATIONS = 1000
    NUMBER_OF_INTERACTIONS = 1000000
    DROP_RATE = 0.0003
)

/**
 * Simulates a single interaction with a monster
 *
 * Returns 1 if the monster dropped an item and 0 otherwise
 */
func interaction() int {
    if rand.Float64() <= DROP_RATE {
        return 1
    }
    return 0
}

/**
 * Runs several interactions and retuns a slice representing the results
 */
func simulation(n int) []int {
    interactions := make([]int, n)
    for i := range interactions {
        interactions[i] = interaction()
    }
    return interactions
}

/**
 * Runs several simulations and returns the results
 */
func test(n int) []int {
    simulations := make([]int, n)
    for i := range simulations {
        successes := 0
        for _, v := range simulation(NUMBER_OF_INTERACTIONS) {
            successes += v
        }
        simulations[i] = successes
    }
    return simulations
}

func main() {
    rand.Seed(time.Now().UnixNano())
    fmt.Println(""Successful interactions: "", test(NUMBER_OF_SIMULATIONS))
}
",1111
22,14298523,"package main

import (
    ""fmt""
    ""math/rand""
    ""time""
    ""runtime""
)

const (
    NUMBER_OF_SIMULATIONS = 1000
    NUMBER_OF_INTERACTIONS = 1000000
    DROP_RATE = 0.0003
)

/**
 * Simulates a single interaction with a monster
 *
 * Returns 1 if the monster dropped an item and 0 otherwise
 */
func interaction() int {
    if rand.Float64() <= DROP_RATE {
        return 1
    }
    return 0
}

/**
 * Runs several interactions and retuns a slice representing the results
 */
func simulation(n int) []int {
    interactions := make([]int, n)
    for i := range interactions {
        interactions[i] = interaction()
    }
    return interactions
}

/**
 * Runs several simulations and returns the results
 */
func test(n int, c chan []int) {
    simulations := make([]int, n)
    for i := range simulations {
        for _, v := range simulation(NUMBER_OF_INTERACTIONS) {
            simulations[i] += v
        }
    }
    c <- simulations
}

func main() {
    rand.Seed(time.Now().UnixNano())

    nCPU := runtime.NumCPU()
    runtime.GOMAXPROCS(nCPU)
    fmt.Println(""Number of CPUs: "", nCPU)

    tests := make([]chan []int, nCPU)
    for i := range tests {
        c := make(chan []int)
        go test(NUMBER_OF_SIMULATIONS/nCPU, c)
        tests[i] = c
    }

    // Concatentate the test results
    results := make([]int, NUMBER_OF_SIMULATIONS)
    for i, c := range tests {
        start := (NUMBER_OF_SIMULATIONS/nCPU) * i
        stop := (NUMBER_OF_SIMULATIONS/nCPU) * (i+1)
        copy(results[start:stop], <-c)
    }

    fmt.Println(""Successful interactions: "", results)
}
",1596
23,14298523,"package main

import (
    ""fmt""
    ""math/rand""
    ""time""
    ""runtime""
)

const (
    NUMBER_OF_SIMULATIONS = 1000
    NUMBER_OF_INTERACTIONS = 1000000
    DROP_RATE = 0.0003
)

/**
 * Simulates a single interaction with a monster
 *
 * Returns 1 if the monster dropped an item and 0 otherwise
 */
func interaction(generator *rand.Rand) int {
    if generator.Float64() <= DROP_RATE {
        return 1
    }
    return 0
}

/**
 * Runs several interactions and retuns a slice representing the results
 */
func simulation(n int, generator *rand.Rand) []int {
    interactions := make([]int, n)
    for i := range interactions {
        interactions[i] = interaction(generator)
    }
    return interactions
}

/**
 * Runs several simulations and returns the results
 */
func test(n int, c chan []int) {
    source := rand.NewSource(time.Now().UnixNano())
    generator := rand.New(source)
    simulations := make([]int, n)
    for i := range simulations {
        for _, v := range simulation(NUMBER_OF_INTERACTIONS, generator) {
            simulations[i] += v
        }
    }
    c <- simulations
}

func main() {
    rand.Seed(time.Now().UnixNano())

    nCPU := runtime.NumCPU()
    runtime.GOMAXPROCS(nCPU)
    fmt.Println(""Number of CPUs: "", nCPU)

    tests := make([]chan []int, nCPU)
    for i := range tests {
        c := make(chan []int)
        go test(NUMBER_OF_SIMULATIONS/nCPU, c)
        tests[i] = c
    }

    // Concatentate the test results
    results := make([]int, NUMBER_OF_SIMULATIONS)
    for i, c := range tests {
        start := (NUMBER_OF_SIMULATIONS/nCPU) * i
        stop := (NUMBER_OF_SIMULATIONS/nCPU) * (i+1)
        copy(results[start:stop], <-c)
    }

    fmt.Println(""Successful interactions: "", results)
}
",1749
24,14298523,rand.Float64,12
25,14298523,rand,4
26,14298523,Rand,4
27,14298523,Rand,4
28,14298523,Rand,4
29,14298523,Rand,4
30,14298523,Rand,4
31,14298523,rand.Float64,12
32,14298523,Rand,4
33,14298523,Rand,4
34,14732354,glFinish(),10
35,14732354,glGetUniformLocation,20
36,14732354,glGetUniformLocation,20
37,14732354,"""dummy""",7
38,14732354,func main,9
39,14732354,"package main

import (
    ""fmt""
    ""github.com/0xe2-0x9a-0x9b/Go-SDL/sdl""
    gl ""github.com/chsc/gogl/gl33""
    ""math""
    ""time""
    ""unsafe""
)

const DEG_TO_RAD = math.Pi / 180

type GoMatrix [16]float64
type GlMatrix [16]gl.Float

var good_frames, bad_frames, sdl_events int

func main() {

    //=================================================================
    // Just opening a window, skip to the next part.

    if status := sdl.Init(sdl.INIT_VIDEO); status != 0 {
        panic(""Could not initialize SDL: "" + sdl.GetError())
    }
    defer sdl.Quit()

    sdl.GL_SetAttribute(sdl.GL_DOUBLEBUFFER, 1)
    const FLAGS = sdl.OPENGL
    if screen := sdl.SetVideoMode(640, 480, 32, FLAGS); screen == nil {
        panic(""Could not open SDL window: "" + sdl.GetError())
    }

    if err := gl.Init(); err != nil {
        panic(err)
    }

    gl.Viewport(0, 0, 640, 480)
    gl.ClearColor(.5, .5, .5, 1)

    //=================================================================
    // Simplest shaders ever.

    // A matrix to move the model, nothing else.
    vertex_code := gl.GLString(`
    #version 330 core
    in vec3 vpos;
    uniform mat4 MVP;
    void main() { 
        gl_Position = MVP * vec4(vpos, 1);
    }   
    `)
    // Everything is red.
    fragment_code := gl.GLString(`
    #version 330 core
    void main(){
        gl_FragColor = vec4(1,0,0,1);
    }
    `)
    vs := gl.CreateShader(gl.VERTEX_SHADER)
    fs := gl.CreateShader(gl.FRAGMENT_SHADER)
    gl.ShaderSource(vs, 1, &vertex_code, nil)
    gl.ShaderSource(fs, 1, &fragment_code, nil)
    gl.CompileShader(vs)
    gl.CompileShader(fs)
    prog := gl.CreateProgram()
    gl.AttachShader(prog, vs)
    gl.AttachShader(prog, fs)
    gl.LinkProgram(prog)
    // Did it compile?
    var link_status gl.Int
    gl.GetProgramiv(prog, gl.LINK_STATUS, &link_status)
    if link_status == gl.FALSE {
        var info_log_length gl.Int
        gl.GetProgramiv(prog, gl.INFO_LOG_LENGTH, &info_log_length)
        if info_log_length == 0 {
            panic(""Program linking failed but OpenGL has no log about it."")
        } else {
            info_log_gl := gl.GLStringAlloc(gl.Sizei(info_log_length))
            defer gl.GLStringFree(info_log_gl)
            gl.GetProgramInfoLog(prog, gl.Sizei(info_log_length), nil, info_log_gl)
            info_log := gl.GoString(info_log_gl)
            panic(info_log)
        }
    }
    gl.UseProgram(prog)
    attrib_vpos := gl.Uint(gl.GetAttribLocation(prog, gl.GLString(""vpos"")))

    //=================================================================
    // One triangle.

    positions := [...]gl.Float{-.5, -.5, 0, .5, -.5, 0, 0, .5, 0}

    var vao gl.Uint
    gl.GenVertexArrays(1, &vao)
    gl.BindVertexArray(vao)

    var vbo gl.Uint
    gl.GenBuffers(1, &vbo)
    gl.BindBuffer(gl.ARRAY_BUFFER, vbo)
    gl.BufferData(gl.ARRAY_BUFFER,
        gl.Sizeiptr(unsafe.Sizeof(positions)),
        gl.Pointer(&positions[0]),
        gl.STATIC_DRAW)

    gl.EnableVertexAttribArray(attrib_vpos)
    gl.VertexAttribPointer(attrib_vpos, 3, gl.FLOAT, gl.FALSE, 0, gl.Pointer(nil))

    //=================================================================

    Loop(prog)
    fmt.Println(""Good frames"", good_frames)
    fmt.Println(""Bad frames "", bad_frames)
    fmt.Println(""SDL events "", sdl_events)
}

func Loop(program gl.Uint) {
    start_time := time.Now()
    ticker := time.NewTicker(100 * time.Millisecond)
    defer ticker.Stop()
    running := true
    for running {
        select {
        case tick_time := <-ticker.C:
            OnTick(start_time, tick_time, program)
        case event := <-sdl.Events:
            running = OnSdlEvent(event)
        }
    }
}

func OnSdlEvent(event interface{}) bool {
    sdl_events++
    switch event.(type) {
    case sdl.QuitEvent:
        return false // Stop the main loop.
    }
    return true // Do not stop the main loop.
}

func OnTick(start_time, tick_time time.Time, program gl.Uint) {
    duration := tick_time.Sub(start_time).Seconds()
    speed := 10.
    angle := math.Mod(duration*speed, 360)
    gom := RotZ(angle)
    MVP := ToGlMatrix(gom)

    /* HERE, SOMETHING FISHY HAPPENS.

    Problem: sometimes, actually often, OpenGl returns 0 instead of -1 for
    the dummy parameter.  This is entirely correlated to the stuttering.

    With my implementation of OpenGl, swap buffer does a real swap.
    That means I get to see the last two pictures rendered.
    Thing is, I can see the swap, that means the pictures are different.
    That means that the call to DrawArrays is ignored.

    OpenGl is just crapping its pants.
    */
    matrix_loc := gl.GetUniformLocation(program, gl.GLString(""MVP""))
    dummy_matrix_loc := gl.GetUniformLocation(program, gl.GLString(""dummy""))
    if gl.GetError() != gl.NO_ERROR {
        fmt.Println(""Error get location"") // Never happens.
    }
    if dummy_matrix_loc == -1 {
        good_frames++ // Because is SHOULD fail.
    } else {
        bad_frames++ // That's not normal.
    }
    gl.UniformMatrix4fv(matrix_loc, 16, gl.TRUE, &MVP[0])
    if gl.GetError() != gl.NO_ERROR {
        fmt.Println(""Error send matrix"") // Never happens.
    }
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
    if gl.GetError() != gl.NO_ERROR {
        fmt.Println(""Error clearing"") // Never happens.
    }
    gl.DrawArrays(gl.TRIANGLES, 0, 3)
    if gl.GetError() != gl.NO_ERROR {
        fmt.Println(""Error drawing"") // Never happens.
    }
    gl.Finish() // Does not seem to make anything work better.
    sdl.GL_SwapBuffers()
}

func RotZ(angle float64) GoMatrix {
    var gom GoMatrix
    a := angle * DEG_TO_RAD
    c := math.Cos(a)
    s := math.Sin(a)
    gom[0] = c
    gom[1] = s
    gom[4] = -s
    gom[5] = c
    gom[10] = 1
    gom[15] = 1
    return gom
}

func ToGlMatrix(gom GoMatrix) GlMatrix {
    var glm GlMatrix
    glm[0] = gl.Float(gom[0])
    glm[1] = gl.Float(gom[1])
    glm[2] = gl.Float(gom[2])
    glm[3] = gl.Float(gom[3])
    glm[4] = gl.Float(gom[4])
    glm[5] = gl.Float(gom[5])
    glm[6] = gl.Float(gom[6])
    glm[7] = gl.Float(gom[7])
    glm[8] = gl.Float(gom[8])
    glm[9] = gl.Float(gom[9])
    glm[10] = gl.Float(gom[10])
    glm[11] = gl.Float(gom[11])
    glm[12] = gl.Float(gom[12])
    glm[13] = gl.Float(gom[13])
    glm[14] = gl.Float(gom[14])
    glm[15] = gl.Float(gom[15])
    return glm
}
",6375
40,14732354,glxinfo,7
41,14732354,"> glxinfo
name of display: :0
display: :0  screen: 0
direct rendering: Yes
server glx vendor string: ATI
server glx version string: 1.4
server glx extensions:
    GLX_ARB_multisample, GLX_EXT_import_context, GLX_EXT_texture_from_pixmap, 
    GLX_EXT_visual_info, GLX_EXT_visual_rating, GLX_OML_swap_method, 
    GLX_SGI_make_current_read, GLX_SGI_swap_control, GLX_SGIS_multisample, 
    GLX_SGIX_fbconfig, GLX_SGIX_pbuffer, GLX_SGIX_visual_select_group
client glx vendor string: ATI
client glx version string: 1.4
client glx extensions:
    GLX_ARB_create_context, GLX_ARB_create_context_profile, 
    GLX_ARB_get_proc_address, GLX_ARB_multisample, GLX_EXT_import_context, 
    GLX_EXT_visual_info, GLX_EXT_visual_rating, GLX_MESA_allocate_memory, 
    GLX_MESA_copy_sub_buffer, GLX_MESA_swap_control, 
    GLX_MESA_swap_frame_usage, GLX_NV_swap_group, GLX_OML_swap_method, 
    GLX_SGI_make_current_read, GLX_SGI_swap_control, GLX_SGI_video_sync, 
    GLX_SGIS_multisample, GLX_SGIX_fbconfig, GLX_SGIX_pbuffer, 
    GLX_SGIX_swap_barrier, GLX_SGIX_swap_group, GLX_SGIX_visual_select_group, 
    GLX_EXT_texture_from_pixmap, GLX_EXT_framebuffer_sRGB, 
    GLX_ARB_fbconfig_float, GLX_AMD_gpu_association
GLX version: 1.4
GLX extensions:
    GLX_ARB_create_context, GLX_ARB_create_context_profile, 
    GLX_ARB_get_proc_address, GLX_ARB_multisample, GLX_EXT_import_context, 
    GLX_EXT_visual_info, GLX_EXT_visual_rating, GLX_MESA_swap_control, 
    GLX_NV_swap_group, GLX_OML_swap_method, GLX_SGI_make_current_read, 
    GLX_SGI_swap_control, GLX_SGI_video_sync, GLX_SGIS_multisample, 
    GLX_SGIX_fbconfig, GLX_SGIX_pbuffer, GLX_SGIX_swap_barrier, 
    GLX_SGIX_swap_group, GLX_SGIX_visual_select_group, 
    GLX_EXT_texture_from_pixmap
OpenGL vendor string: ATI Technologies Inc.
OpenGL renderer string: ATI Mobility Radeon HD 4500 Series
OpenGL version string: 3.3.11005 Compatibility Profile Context
OpenGL shading language version string: 3.30
OpenGL extensions:
    GL_AMDX_debug_output, GL_AMDX_vertex_shader_tessellator, 
    GL_AMD_conservative_depth, GL_AMD_debug_output, 
    GL_AMD_depth_clamp_separate, GL_AMD_draw_buffers_blend, 
    GL_AMD_name_gen_delete, GL_AMD_performance_monitor, GL_AMD_pinned_memory, 
    GL_AMD_sample_positions, GL_AMD_seamless_cubemap_per_texture, 
    GL_AMD_shader_stencil_export, GL_AMD_texture_cube_map_array, 
    GL_AMD_texture_texture4, GL_AMD_vertex_shader_tessellator, 
    GL_ARB_ES2_compatibility, GL_ARB_blend_func_extended, 
    GL_ARB_color_buffer_float, GL_ARB_copy_buffer, GL_ARB_depth_buffer_float, 
    GL_ARB_depth_clamp, GL_ARB_depth_texture, GL_ARB_draw_buffers, 
    GL_ARB_draw_buffers_blend, GL_ARB_draw_elements_base_vertex, 
    GL_ARB_draw_instanced, GL_ARB_explicit_attrib_location, 
    GL_ARB_fragment_coord_conventions, GL_ARB_fragment_program, 
    GL_ARB_fragment_program_shadow, GL_ARB_fragment_shader, 
    GL_ARB_framebuffer_object, GL_ARB_framebuffer_sRGB, 
    GL_ARB_geometry_shader4, GL_ARB_get_program_binary, 
    GL_ARB_half_float_pixel, GL_ARB_half_float_vertex, GL_ARB_imaging, 
    GL_ARB_instanced_arrays, GL_ARB_map_buffer_range, GL_ARB_multisample, 
    GL_ARB_multitexture, GL_ARB_occlusion_query, GL_ARB_occlusion_query2, 
    GL_ARB_pixel_buffer_object, GL_ARB_point_parameters, GL_ARB_point_sprite, 
    GL_ARB_provoking_vertex, GL_ARB_sample_shading, GL_ARB_sampler_objects, 
    GL_ARB_seamless_cube_map, GL_ARB_separate_shader_objects, 
    GL_ARB_shader_bit_encoding, GL_ARB_shader_objects, 
    GL_ARB_shader_precision, GL_ARB_shader_stencil_export, 
    GL_ARB_shader_texture_lod, GL_ARB_shading_language_100, GL_ARB_shadow, 
    GL_ARB_shadow_ambient, GL_ARB_sync, GL_ARB_texture_border_clamp, 
    GL_ARB_texture_buffer_object, GL_ARB_texture_buffer_object_rgb32, 
    GL_ARB_texture_compression, GL_ARB_texture_compression_rgtc, 
    GL_ARB_texture_cube_map, GL_ARB_texture_cube_map_array, 
    GL_ARB_texture_env_add, GL_ARB_texture_env_combine, 
    GL_ARB_texture_env_crossbar, GL_ARB_texture_env_dot3, 
    GL_ARB_texture_float, GL_ARB_texture_gather, 
    GL_ARB_texture_mirrored_repeat, GL_ARB_texture_multisample, 
    GL_ARB_texture_non_power_of_two, GL_ARB_texture_query_lod, 
    GL_ARB_texture_rectangle, GL_ARB_texture_rg, GL_ARB_texture_rgb10_a2ui, 
    GL_ARB_texture_snorm, GL_ARB_timer_query, GL_ARB_transform_feedback2, 
    GL_ARB_transform_feedback3, GL_ARB_transpose_matrix, 
    GL_ARB_uniform_buffer_object, GL_ARB_vertex_array_bgra, 
    GL_ARB_vertex_array_object, GL_ARB_vertex_buffer_object, 
    GL_ARB_vertex_program, GL_ARB_vertex_shader, 
    GL_ARB_vertex_type_2_10_10_10_rev, GL_ARB_viewport_array, 
    GL_ARB_window_pos, GL_ATI_draw_buffers, GL_ATI_envmap_bumpmap, 
    GL_ATI_fragment_shader, GL_ATI_meminfo, GL_ATI_separate_stencil, 
    GL_ATI_texture_compression_3dc, GL_ATI_texture_env_combine3, 
    GL_ATI_texture_float, GL_ATI_texture_mirror_once, GL_EXT_abgr, 
    GL_EXT_bgra, GL_EXT_bindable_uniform, GL_EXT_blend_color, 
    GL_EXT_blend_equation_separate, GL_EXT_blend_func_separate, 
    GL_EXT_blend_minmax, GL_EXT_blend_subtract, GL_EXT_compiled_vertex_array, 
    GL_EXT_copy_buffer, GL_EXT_copy_texture, GL_EXT_direct_state_access, 
    GL_EXT_draw_buffers2, GL_EXT_draw_instanced, GL_EXT_draw_range_elements, 
    GL_EXT_fog_coord, GL_EXT_framebuffer_blit, GL_EXT_framebuffer_multisample, 
    GL_EXT_framebuffer_object, GL_EXT_framebuffer_sRGB, 
    GL_EXT_geometry_shader4, GL_EXT_gpu_program_parameters, 
    GL_EXT_gpu_shader4, GL_EXT_histogram, GL_EXT_multi_draw_arrays, 
    GL_EXT_packed_depth_stencil, GL_EXT_packed_float, GL_EXT_packed_pixels, 
    GL_EXT_pixel_buffer_object, GL_EXT_point_parameters, 
    GL_EXT_provoking_vertex, GL_EXT_rescale_normal, GL_EXT_secondary_color, 
    GL_EXT_separate_specular_color, GL_EXT_shadow_funcs, GL_EXT_stencil_wrap, 
    GL_EXT_subtexture, GL_EXT_texgen_reflection, GL_EXT_texture3D, 
    GL_EXT_texture_array, GL_EXT_texture_buffer_object, 
    GL_EXT_texture_compression_latc, GL_EXT_texture_compression_rgtc, 
    GL_EXT_texture_compression_s3tc, GL_EXT_texture_cube_map, 
    GL_EXT_texture_edge_clamp, GL_EXT_texture_env_add, 
    GL_EXT_texture_env_combine, GL_EXT_texture_env_dot3, 
    GL_EXT_texture_filter_anisotropic, GL_EXT_texture_integer, 
    GL_EXT_texture_lod, GL_EXT_texture_lod_bias, GL_EXT_texture_mirror_clamp, 
    GL_EXT_texture_object, GL_EXT_texture_rectangle, GL_EXT_texture_sRGB, 
    GL_EXT_texture_shared_exponent, GL_EXT_texture_snorm, 
    GL_EXT_texture_swizzle, GL_EXT_timer_query, GL_EXT_transform_feedback, 
    GL_EXT_vertex_array, GL_EXT_vertex_array_bgra, 
    GL_IBM_texture_mirrored_repeat, GL_KTX_buffer_region, GL_NV_blend_square, 
    GL_NV_conditional_render, GL_NV_copy_depth_to_color, 
    GL_NV_explicit_multisample, GL_NV_float_buffer, GL_NV_half_float, 
    GL_NV_primitive_restart, GL_NV_texgen_reflection, GL_NV_texture_barrier, 
    GL_SGIS_generate_mipmap, GL_SGIS_texture_edge_clamp, GL_SGIS_texture_lod, 
    GL_SUN_multi_draw_arrays, GL_WIN_swap_hint, WGL_EXT_swap_control
",7039
42,14732354,"func Loop(program gl.Uint) {
    start_time := time.Now()
    stop_time := start_time.Add(time.Duration(30 * time.Second))
    running := true
    for running {
        tick_time := time.Now()
        OnTick(start_time, tick_time, program)
        time.Sleep(10 * time.Millisecond)
        if tick_time.After(stop_time) {
            running = false
        }
    }
}
",368
43,15067286,"package main

import (
    ""net""
    ""os""
    ""bufio""
    ""fmt""
    ""time""
)

func AcceptConnections(listener net.Listener, console <- chan string) {

    msg := """"

    for {

        conn, err := listener.Accept()

        if err != nil {
            panic(err)
        }

        fmt.Printf(""client connected\n"")

        for {

            if msg == """" {
                msg = <- console
                fmt.Printf(""read from console: %s"", msg)
            }

            err = conn.SetWriteDeadline(time.Now().Add(time.Second))

            if err != nil {
                fmt.Printf(""SetWriteDeadline failed: %v\n"", err)
            }

            _, err = conn.Write([]byte(msg))

            if err != nil {
                // expecting an error after sending a message
                // to a non-existing client endpoint
                fmt.Printf(""failed sending a message to network: %v\n"", err)
                break
            } else {
                fmt.Printf(""msg sent: %s"", msg)
                msg = """"
            }
        }
    }
}

func ReadConsole(network chan <- string) {

    console := bufio.NewReader(os.Stdin)

    for {

        line, err := console.ReadString('\n')

        if err != nil {

            panic(err)

        } else {

            network <- line
        }
    }
}

func main() {

    listener, err := net.Listen(""tcp"", ""localhost:6666"")

    if err != nil {
        panic(err)
    }

    println(""listening on "" + listener.Addr().String())

    consoleToNetwork := make(chan string)

    go AcceptConnections(listener, consoleToNetwork)

    ReadConsole(consoleToNetwork)
}
",1624
44,15067286,"listening on 127.0.0.1:6666
client connected
hi there!
read from console: hi there!
msg sent: hi there!
this one should fail
read from console: this one should fail
msg sent: this one should fail
this one actually fails
read from console: this one actually fails
failed sending a message to network: write tcp 127.0.0.1:51194: broken pipe
",339
45,15067286,"package main

import (
    ""net""
    ""os""
    ""io""
    //""bufio""
    //""fmt""
)

func cp(dst io.Writer, src io.Reader, errc chan<- error) {

    // -reads from src and writes to dst
    // -blocks until EOF
    // -EOF is not an error
    _, err :=  io.Copy(dst, src)

    // push err to the channel when io.Copy returns
    errc <- err
}

func StartCommunication(conn net.Conn) {

    //create a channel for errors
    errc := make(chan error)

    //read connection and print to console
    go cp(os.Stdout, conn, errc)

    //read user input and write to connection
    go cp(conn, os.Stdin, errc)

    //wait until nil or an error arrives
    err := <- errc

    if err != nil {
        println(""cp error: "", err.Error())
    }
}

func main() {

    servAddr := ""localhost:6666""

    tcpAddr, err := net.ResolveTCPAddr(""tcp"", servAddr)

    if err != nil {
        println(""ResolveTCPAddr failed:"", err.Error())
        os.Exit(1)
    }

    conn, err := net.DialTCP(""tcp"", nil, tcpAddr)

    if err != nil {
        println(""net.DialTCP failed:"", err.Error())
        os.Exit(1)
    }

    defer conn.Close()

    StartCommunication(conn)

}
",1146
46,15067286,"package main

import (
    ""net""
    ""os""
    ""bufio""
    ""fmt""
)

type Connection struct {
    IsFaulted bool
    Conn net.Conn
}

func StartWritingToNetwork(connWrap * Connection, errChannel chan <- error, msgStack chan string) {

    for {

        msg := <- msgStack

        if connWrap.IsFaulted {

            //put it back for another connection
            msgStack <- msg

            return
        }

        _, err := connWrap.Conn.Write([]byte(msg))

        if err != nil {

            fmt.Printf(""failed sending a message to network: %v\n"", err)

            connWrap.IsFaulted = true

            msgStack <- msg

            errChannel <- err

            return

        } else {

            fmt.Printf(""msg sent: %s"", msg)
        }
    }
}

func StartReadingFromNetwork(connWrap * Connection, errChannel chan <- error){

    network := bufio.NewReader(connWrap.Conn)

    for (!connWrap.IsFaulted) {

        line, err := network.ReadString('\n')

        if err != nil {

            fmt.Printf(""failed reading from network: %v\n"", err)

            connWrap.IsFaulted = true

            errChannel <- err

        } else {

            fmt.Printf(""%s"", line)
        }
    }
}

func AcceptConnections(listener net.Listener, console chan string) {

    errChannel := make(chan error)

    for {

        conn, err := listener.Accept()

        if err != nil {
            panic(err)
        }

        fmt.Printf(""client connected\n"")

        connWrap := Connection{false, conn}

        go StartReadingFromNetwork(&connWrap, errChannel)

        go StartWritingToNetwork(&connWrap, errChannel, console)

        //block until an error occurs
        <- errChannel
    }
}

func ReadConsole(network chan <- string) {

    console := bufio.NewReader(os.Stdin)

    for {

        line, err := console.ReadString('\n')

        if err != nil {

            panic(err)

        } else {

            network <- line
        }
    }
}

func main() {

    listener, err := net.Listen(""tcp"", ""localhost:6666"")

    if err != nil {
        panic(err)
    }

    println(""listening on "" + listener.Addr().String())

    consoleToNetwork := make(chan string)

    go AcceptConnections(listener, consoleToNetwork)

    ReadConsole(consoleToNetwork)
}
",2267
47,15314845,map[int16]byte,14
48,15314845,"package main

import (
        ""fmt""
        ""runtime""
        ""unsafe""
)

func Alloc() uint64 {
        var stats runtime.MemStats
        runtime.GC()
        runtime.ReadMemStats(&stats)
        return stats.Alloc - uint64(unsafe.Sizeof(hs[0]))*uint64(cap(hs))
}

var hs = []*map[int16]byte{}

func main() {
        hs := []*map[int16]byte{}
        n := 1000
        before := Alloc()
        for i := 0; i < n; i++ {
                h := map[int16]byte{}
                hs = append(hs, &h)
        }
        after := Alloc()
        emptyPerMap := float64(after-before) / float64(n)
        fmt.Printf(""Bytes used for %d empty maps: %d, bytes/map %.1f\n"", n, after-before, emptyPerMap)
        hs = nil

        k := 1
        for p := 1; p < 16; p++ {
                before = Alloc()
                for i := 0; i < n; i++ {
                        h := map[int16]byte{}
                        for j := 0; j < k; j++ {
                                h[int16(j)] = byte(j)
                        }
                        hs = append(hs, &h)
                }
                after = Alloc()
                fullPerMap := float64(after-before) / float64(n)
                fmt.Printf(""Bytes used for %d maps with %d entries: %d, bytes/map %.1f\n"", n, k, after-before, fullPerMap)
                fmt.Printf(""Bytes per entry %.1f\n"", (fullPerMap-emptyPerMap)/float64(k))
                k *= 2
        }

}
",1416
49,15314845,"jnml@fsc-r630:~/src/tmp$ go build && ./tmp && go version && uname -a
Bytes used for 1000 empty maps: 146816, bytes/map 146.8
Bytes used for 1000 maps with 1 entries: 147040, bytes/map 147.0
Bytes per entry 0.2
Bytes used for 1000 maps with 2 entries: 147040, bytes/map 147.0
Bytes per entry 0.1
Bytes used for 1000 maps with 4 entries: 247136, bytes/map 247.1
Bytes per entry 25.1
Bytes used for 1000 maps with 8 entries: 439056, bytes/map 439.1
Bytes per entry 36.5
Bytes used for 1000 maps with 16 entries: 818688, bytes/map 818.7
Bytes per entry 42.0
Bytes used for 1000 maps with 32 entries: 1194688, bytes/map 1194.7
Bytes per entry 32.7
Bytes used for 1000 maps with 64 entries: 2102976, bytes/map 2103.0
Bytes per entry 30.6
Bytes used for 1000 maps with 128 entries: 4155072, bytes/map 4155.1
Bytes per entry 31.3
Bytes used for 1000 maps with 256 entries: 6698688, bytes/map 6698.7
Bytes per entry 25.6
Bytes used for 1000 maps with 512 entries: 14142976, bytes/map 14143.0
Bytes per entry 27.3
Bytes used for 1000 maps with 1024 entries: 51349184, bytes/map 51349.2
Bytes per entry 50.0
Bytes used for 1000 maps with 2048 entries: 102467264, bytes/map 102467.3
Bytes per entry 50.0
Bytes used for 1000 maps with 4096 entries: 157214816, bytes/map 157214.8
Bytes per entry 38.3
Bytes used for 1000 maps with 8192 entries: 407031200, bytes/map 407031.2
Bytes per entry 49.7
Bytes used for 1000 maps with 16384 entries: 782616864, bytes/map 782616.9
Bytes per entry 47.8
go version devel +83b0b94af636 Sat Mar 09 16:25:30 2013 +1100 linux/amd64
Linux fsc-r630 3.2.0-38-generic #61-Ubuntu SMP Tue Feb 19 12:18:21 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
jnml@fsc-r630:~/src/tmp$ 
",1685
50,15314845,"jnml@fsc-r630:~/src/tmp$ go build && ./tmp
Bytes used for 1000 empty maps: 144192, bytes/map 144.2
Bytes used for 1000 maps with 1 entries: 144192, bytes/map 144.2
Bytes per entry 0.0
Bytes used for 1000 maps with 2 entries: 144192, bytes/map 144.2
Bytes per entry 0.0
Bytes used for 1000 maps with 4 entries: 315648, bytes/map 315.6
Bytes per entry 42.9
Bytes used for 1000 maps with 8 entries: 436288, bytes/map 436.3
Bytes per entry 36.5
Bytes used for 1000 maps with 16 entries: 885824, bytes/map 885.8
Bytes per entry 46.4
Bytes used for 1000 maps with 32 entries: 1331264, bytes/map 1331.3
Bytes per entry 37.1
Bytes used for 1000 maps with 64 entries: 2292800, bytes/map 2292.8
Bytes per entry 33.6
Bytes used for 1000 maps with 128 entries: 4935920, bytes/map 4935.9
Bytes per entry 37.4
Bytes used for 1000 maps with 256 entries: 12164160, bytes/map 12164.2
Bytes per entry 47.0
Bytes used for 1000 maps with 512 entries: 29887808, bytes/map 29887.8
Bytes per entry 58.1
Bytes used for 1000 maps with 1024 entries: 56840768, bytes/map 56840.8
Bytes per entry 55.4
Bytes used for 1000 maps with 2048 entries: 108736064, bytes/map 108736.1
Bytes per entry 53.0
Bytes used for 1000 maps with 4096 entries: 184368752, bytes/map 184368.8
Bytes per entry 45.0
Bytes used for 1000 maps with 8192 entries: 431340576, bytes/map 431340.6
Bytes per entry 52.6
Bytes used for 1000 maps with 16384 entries: 815378816, bytes/map 815378.8
Bytes per entry 49.8
jnml@fsc-r630:~/src/tmp$
",1479
51,15674709,"$ go version
go version go1.0.3

$ go env
GOARCH=""amd64""
GOBIN=""""
GOCHAR=""6""
GOEXE=""""
GOGCCFLAGS=""-g -O2 -fPIC -m64 -pthread""
GOHOSTARCH=""amd64""
GOHOSTOS=""linux""
GOOS=""linux""
GOPATH=""/data/apps/go""
GOROOT=""/usr/local/go""
GOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""
CGO_ENABLED=""1""
",284
52,15674709,"package main

import (
    ""bytes""
    ""database/sql""
    ""flag""
    ""fmt""
    _ ""github.com/Go-SQL-Driver/MySQL""
    ""ijinshan.com/cfg""
    ""log""
    ""net""
    ""net/http""
    ""net/smtp""
    ""os""
    ""strconv""
    ""strings""
    ""sync""
    ""time""
)

var (
    Log           *log.Logger
    Conf          cfg.KVConfig
    Debug         bool
    CpuCore       int
    HttpTransport = &http.Transport{
        Dial: func(netw, addr string) (net.Conn, error) {
            deadline := time.Now().Add(30 * time.Second)
            c, err := net.DialTimeout(netw, addr, 20*time.Second)
            if err != nil {
                return nil, err
            }

            c.SetDeadline(deadline)
            return c, nil
        },
        DisableKeepAlives: true,
    }
    HttpClient = &http.Client{
        Transport: HttpTransport,
    }
    WG            sync.WaitGroup
)

const (
    LogFileFlag   = os.O_WRONLY | os.O_CREATE | os.O_APPEND
    LogFileMode   = 0644
    LogFlag       = log.LstdFlags | log.Lshortfile
    GET_VIDEO_SQL = `SELECT B.Name, A.TSID, A.Chapter, A.ChapterNum, 
    IFNULL(A.Website, ''), IFNULL(A.Descr, ''), 
    IFNULL(A.VideoId, ''), IFNULL(AndroidWebURL, ''), IFNULL(IOSWebURL, ''), 
    IFNULL(AndroidURL, ''), IFNULL(AndroidURL2, ''), IFNULL(IOSURL, '')
    FROM Video A INNER JOIN TVS B ON A.TSID = B.ID LIMIT 200`

    HtmlHead = `节目名
    tsid章节章节号描述
    videoid网站地址`
    HtmlTail = """"
)

type videoInfo struct {
    name          string
    tsid          uint
    chapter       string
    chapterNum    uint
    descr         string
    videoId       string
    website       string
    androidWebUrl string
    iosWebUrl     string
    androidUrl    string
    androidUrl2   string
    iosUrl        string
}

func init() {
    var (
        confFile string
        err      error
    )

    // parse command argument:w
    flag.StringVar(&confFile, ""c"", ""./vsmonitor.conf"", "" set config file path"")
    flag.Parse()
    // read config
    if Conf, err = cfg.Read(confFile); err != nil {
        panic(fmt.Sprintf(""Read config file \""%s\"" failed (%s)"",
            confFile, err.Error()))
    }
    // open log file
    file, err := os.OpenFile(Conf[""log.file""], LogFileFlag, LogFileMode)
    if err != nil {
        panic(fmt.Sprintf(""OpenFile \""%s\"" failed (%s)"", Conf[""log.file""],
            err.Error()))
    }
    // init LOG
    Log = log.New(file, """", LogFlag)
    Debug = false
    i, err := strconv.ParseInt(Conf[""cpucore.num""], 10, 32)
    if err != nil {
        panic(fmt.Sprintf(""ParseInt \""%s\"" failed (%s)"", Conf[""cpucore.num""],
            err.Error()))
    }

    CpuCore = int(i)
}

func getHttpStatusCode(url string) int {
    if url == """" {
        return 200
    }

    req, err := http.NewRequest(""GET"", url, nil)
    if err != nil {
        return 0
    }

    req.Header.Add(""User-Agent"", ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17"")
    req.Header.Add(""Connection"", ""close"")
    resp, err := HttpClient.Do(req)
    if err != nil {
        return 0
    }

    defer resp.Body.Close()
    return resp.StatusCode
}

func sendMail(host, user, pwd, from, to, subject, body, mailType string) error {
    auth := smtp.PlainAuth("""", user, pwd, strings.Split(host, "":"")[0])
    cntType := fmt.Sprintf(""Content-Type: text/%s;charset=UTF-8"", mailType)
    msg := fmt.Sprintf(""To: %s\r\nFrom: %s\r\nSubject: %s\r\n%s\r\n\r\n%s"",
        to, from, user, subject, cntType, body)

    return smtp.SendMail(host, auth, user, strings.Split(to, "",""), []byte(msg))
}

func getVideos(videoChan chan *videoInfo, htmlBuf *bytes.Buffer) error {
    defer HttpTransport.CloseIdleConnections()
    db, err := sql.Open(""mysql"", Conf[""weikan.mysql""])
    if err != nil {
        return err
    }

    rows, err := db.Query(GET_VIDEO_SQL)
    if err != nil {
        db.Close()
        return err
    }

    for rows.Next() {
        video := &videoInfo{}
        err = rows.Scan(&video.name, &video.tsid, &video.chapter,
            &video.chapterNum,
            &video.website, &video.descr, &video.videoId, &video.androidWebUrl,
            &video.iosWebUrl, &video.androidUrl, &video.androidUrl2,
            &video.iosUrl)
        if err != nil {
            db.Close()
            return err
        }

        videoChan <- video
        WG.Add(1)
    }

    db.Close()
    // wait check url finish
    WG.Wait()
    // send mail
    for {
        if htmlBuf.Len() == 0 {
            Log.Print(""no error found!!!!!!!!"")
            break
        }

        Log.Print(""found error !!!!!!!!"")
        /*
        err := sendMail(""smtp.gmail.com:587"", ""xxxx"",
            ""xxx"", ""xxx "",
            Conf[""mail.to""], ""xxxxx"",
            HtmlHead+htmlBuf.String()+HtmlTail, ""html"")
        if err != nil {
            Log.Printf(""sendMail failed (%s)"", err.Error())
            time.Sleep(10 * time.Second)
            continue
        }
        */

        Log.Print(""send mail"")
        break
    }

    Log.Print(""reset buf"")
    htmlBuf.Reset()
    return nil
}

func checkUrl(videoChan chan *videoInfo, errChan chan string) {
    defer func() {
        if err := recover(); err != nil {
            Log.Print(""rouintes failed : "", err)
        }
    }()

    for {
        video := <-videoChan
        ok := true
        errUrl := """"

        if code := getHttpStatusCode(video.androidWebUrl); code >= 400 {
            errUrl += fmt.Sprintf(""%s (%d)"",
                video.androidWebUrl, code)
            ok = false
        }

        if code := getHttpStatusCode(video.iosWebUrl); code >= 400 {
            errUrl += fmt.Sprintf(""%s (%d)"",
                video.iosWebUrl, code)
            ok = false
        }

        if code := getHttpStatusCode(video.androidUrl); code >= 400 {
            errUrl += fmt.Sprintf(""%s (%d)"",
                video.androidUrl, code)
            ok = false
        }

        if code := getHttpStatusCode(video.androidUrl2); code >= 400 {
            errUrl += fmt.Sprintf(""%s (%d)"",
                video.androidUrl2, code)
            ok = false
        }

        if code := getHttpStatusCode(video.iosUrl); code >= 400 {
            errUrl += fmt.Sprintf(""%s (%d)"",
                video.iosUrl, code)
            ok = false
        }

        if !ok {
            errChan %s%d%s
            %d%s%s%s%s`,
                video.name, video.tsid, video.chapter, video.chapterNum,
                video.descr, video.videoId,
                video.website, errUrl)
            Log.Printf(""\""%s\"" (%s) —— \""%s\"" checkurl err"", video.name,
                video.chapter, video.descr)
        } else {
            Log.Printf(""\""%s\"" (%s) —— \""%s\"" checkurl ok"", video.name,
                video.chapter, video.descr)
            WG.Done()
        }
    }
}

func mergeErr(errChan chan string, htmlBuf *bytes.Buffer) {
    defer func() {
        if err := recover(); err != nil {
            Log.Print(""rouintes failed : "", err)
        }
    }()

    for {
        html := <-errChan
        _, err := htmlBuf.WriteString(html)
        if err != nil {
            Log.Printf(""htmlBuf WriteString \""%s\"" failed (%s)"", html,
                err.Error())
            panic(err)
        }

        WG.Done()
    }
}

func main() {
    videoChan := make(chan *videoInfo, 100000)
    errChan := make(chan string, 100000)
    htmlBuf := &bytes.Buffer{}
    defer func() {
        if err := recover(); err != nil {
            Log.Print(""rouintes failed : "", err)
        }
    }()

    // check url
    for i := 0; i < CpuCore; i++ {
        go checkUrl(videoChan, errChan)
    }
    // merge error string then send mail
    go mergeErr(errChan, htmlBuf)

    for {
        // get Video and LiveSrc video source
        if err := getVideos(videoChan, htmlBuf); err != nil {
            Log.Printf(""getVideos failed (%s)"", err.Error())
            time.Sleep(10 * time.Second)
            continue
        }

        // time.Sleep(1 * time.Hour)
    }

    Log.Print(""exit..."")
}
",8062
53,15674709,funcs,5
54,15674709,"PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                      
6451 root      20   0 3946m 115m 2808 S  0.7  0.2   6:11.20 vsmonitor
",255
55,15674709,"(pprof) top
Total: 10.8 MB
2.3  21.2%  21.2%      2.3  21.2% main.main
2.0  18.5%  39.8%      2.0  18.5% bufio.NewWriterSize
1.5  13.9%  53.7%      1.5  13.9% bufio.NewReaderSize
1.5  13.9%  67.6%      1.5  13.9% compress/flate.NewReader
0.5   4.6%  72.2%      0.5   4.6% net.newFD
0.5   4.6%  76.8%      0.5   4.6% net.sockaddrToTCP
0.5   4.6%  81.5%      4.5  41.7% net/http.(*Transport).getConn
0.5   4.6%  86.1%      2.5  23.2% net/http.(*persistConn).readLoop
0.5   4.6%  90.7%      0.5   4.6% net/textproto.(*Reader).ReadMIMEHeader
0.5   4.6%  95.4%      0.5   4.6% net/url.(*URL).ResolveReference
",604
56,15794113,bufio.Scanner,13
57,15794113,"package main

import (
    ""bufio""
    ""bytes""
    ""encoding/binary""
    ""fmt""
    ""os""
    ""runtime""
    ""unicode/utf16""
    ""unicode/utf8""
)

// UTF16BytesToString converts UTF-16 encoded bytes, in big or little endian byte order,
// to a UTF-8 encoded string.
func UTF16BytesToString(b []byte, o binary.ByteOrder) string {
    utf := make([]uint16, (len(b)+(2-1))/2)
    for i := 0; i+(2-1) < len(b); i += 2 {
        utf[i/2] = o.Uint16(b[i:])
    }
    if len(b)/2 < len(utf) {
        utf[len(utf)-1] = utf8.RuneError
    }
    return string(utf16.Decode(utf))
}

// UTF-16 endian byte order
const (
    unknownEndian = iota
    bigEndian
    littleEndian
)

// dropCREndian drops a terminal \r from the endian data.
func dropCREndian(data []byte, t1, t2 byte) []byte {
    if len(data) > 1 {
        if data[len(data)-2] == t1 && data[len(data)-1] == t2 {
            return data[0 : len(data)-2]
        }
    }
    return data
}

// dropCRBE drops a terminal \r from the big endian data.
func dropCRBE(data []byte) []byte {
    return dropCREndian(data, '\x00', '\r')
}

// dropCRLE drops a terminal \r from the little endian data.
func dropCRLE(data []byte) []byte {
    return dropCREndian(data, '\r', '\x00')
}

// dropCR drops a terminal \r from the data.
func dropCR(data []byte) ([]byte, int) {
    var endian = unknownEndian
    switch ld := len(data); {
    case ld != len(dropCRLE(data)):
        endian = littleEndian
    case ld != len(dropCRBE(data)):
        endian = bigEndian
    }
    return data, endian
}

// SplitFunc is a split function for a Scanner that returns each line of
// text, stripped of any trailing end-of-line marker. The returned line may
// be empty. The end-of-line marker is one optional carriage return followed
// by one mandatory newline. In regular expression notation, it is `\r?\n`.
// The last non-empty line of input will be returned even if it has no
// newline.
func ScanUTF16LinesFunc(byteOrder binary.ByteOrder) (bufio.SplitFunc, func() binary.ByteOrder) {

    // Function closure variables
    var endian = unknownEndian
    switch byteOrder {
    case binary.BigEndian:
        endian = bigEndian
    case binary.LittleEndian:
        endian = littleEndian
    }
    const bom = 0xFEFF
    var checkBOM bool = endian == unknownEndian

    // Scanner split function
    splitFunc := func(data []byte, atEOF bool) (advance int, token []byte, err error) {

        if atEOF && len(data) == 0 {
            return 0, nil, nil
        }

        if checkBOM {
            checkBOM = false
            if len(data) > 1 {
                switch uint16(bom) {
                case uint16(data[0])<<8 | uint16(data[1]):
                    endian = bigEndian
                    return 2, nil, nil
                case uint16(data[1])<<8 | uint16(data[0]):
                    endian = littleEndian
                    return 2, nil, nil
                }
            }
        }

        // Scan for newline-terminated lines.
        i := 0
        for {
            j := bytes.IndexByte(data[i:], '\n')
            if j < 0 {
                break
            }
            i += j
            switch e := i % 2; e {
            case 1: // UTF-16BE
                if endian != littleEndian {
                    if i > 1 {
                        if data[i-1] == '\x00' {
                            endian = bigEndian
                            // We have a full newline-terminated line.
                            return i + 1, dropCRBE(data[0 : i-1]), nil
                        }
                    }
                }
            case 0: // UTF-16LE
                if endian != bigEndian {
                    if i+1 < len(data) {
                        i++
                        if data[i] == '\x00' {
                            endian = littleEndian
                            // We have a full newline-terminated line.
                            return i + 1, dropCRLE(data[0 : i-1]), nil
                        }
                    }
                }
            }
            i++
        }

        // If we're at EOF, we have a final, non-terminated line. Return it.
        if atEOF {
            // drop CR.
            advance = len(data)
            switch endian {
            case bigEndian:
                data = dropCRBE(data)
            case littleEndian:
                data = dropCRLE(data)
            default:
                data, endian = dropCR(data)
            }
            if endian == unknownEndian {
                if runtime.GOOS == ""windows"" {
                    endian = littleEndian
                } else {
                    endian = bigEndian
                }
            }
            return advance, data, nil
        }

        // Request more data.
        return 0, nil, nil
    }

    // Endian byte order function
    orderFunc := func() (byteOrder binary.ByteOrder) {
        switch endian {
        case bigEndian:
            byteOrder = binary.BigEndian
        case littleEndian:
            byteOrder = binary.LittleEndian
        }
        return byteOrder
    }

    return splitFunc, orderFunc
}

func main() {
    file, err := os.Open(""utf16.le.txt"")
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }
    defer file.Close()
    fmt.Println(file.Name())

    rdr := bufio.NewReader(file)
    scanner := bufio.NewScanner(rdr)
    var bo binary.ByteOrder // unknown, infer from data
    // bo = binary.LittleEndian // windows
    splitFunc, orderFunc := ScanUTF16LinesFunc(bo)
    scanner.Split(splitFunc)

    for scanner.Scan() {
        b := scanner.Bytes()
        s := UTF16BytesToString(b, orderFunc())
        fmt.Println(len(s), s)
        fmt.Println(len(b), b)
    }
    fmt.Println(orderFunc())

    if err := scanner.Err(); err != nil {
        fmt.Println(err)
    }
}
",5831
58,15794113,"utf16.le.txt
15 ""Hello, 世界""
22 [34 0 72 0 101 0 108 0 108 0 111 0 44 0 32 0 22 78 76 117 34 0]
0 
0 []
15 ""Hello, 世界""
22 [34 0 72 0 101 0 108 0 108 0 111 0 44 0 32 0 22 78 76 117 34 0]
LittleEndian

utf16.be.txt
15 ""Hello, 世界""
22 [0 34 0 72 0 101 0 108 0 108 0 111 0 44 0 32 78 22 117 76 0 34]
0 
0 []
15 ""Hello, 世界""
22 [0 34 0 72 0 101 0 108 0 108 0 111 0 44 0 32 78 22 117 76 0 34]
BigEndian
",410
59,16280176,"panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x1 addr=0x38 pc=0x26df]

goroutine 1 [running]:
main.getBody(0x1cdcd4, 0xf800000004, 0x1f2b44, 0x23, 0xf84005c800, ...)
        /Users/matt/Dropbox/code/go/scripts/cron/fido.go:65 +0x2bb
main.getToken(0xf84005c7e0, 0x10)
        /Users/matt/Dropbox/code/go/scripts/cron/fido.go:140 +0x156
main.main()
        /Users/matt/Dropbox/code/go/scripts/cron/fido.go:178 +0x61

goroutine 2 [syscall]:
created by runtime.main
        /usr/local/Cellar/go/1.0.3/src/pkg/runtime/proc.c:221

goroutine 3 [syscall]:
syscall.Syscall6()
        /usr/local/Cellar/go/1.0.3/src/pkg/syscall/asm_darwin_amd64.s:38 +0x5
syscall.kevent(0x6, 0x0, 0x0, 0xf840085188, 0xa, ...)
        /usr/local/Cellar/go/1.0.3/src/pkg/syscall/zsyscall_darwin_amd64.go:199 +0x88
syscall.Kevent(0xf800000006, 0x0, 0x0, 0xf840085188, 0xa0000000a, ...)
        /usr/local/Cellar/go/1.0.3/src/pkg/syscall/syscall_bsd.go:546 +0xa4
net.(*pollster).WaitFD(0xf840085180, 0xf840059040, 0x0, 0x0, 0x0, ...)
        /usr/local/Cellar/go/1.0.3/src/pkg/net/fd_darwin.go:96 +0x185
net.(*pollServer).Run(0xf840059040, 0x0)
        /usr/local/Cellar/go/1.0.3/src/pkg/net/fd.go:236 +0xe4
created by net.newPollServer
        /usr/local/Cellar/go/1.0.3/src/pkg/net/newpollserver.go:35 +0x382
",1324
60,16280176,"package main

/*
Fido fetches the list of public images from the Glance server, captures the IDs of images with 'status': 'active' and then queues the images for pre-fetching with the Glance CLI utility `glance-cache-manage`. Once the images are added to the queue, `glance-cache-prefetcher` is called to actively fetch the queued images into the local compute nodes' image cache.

See http://docs.openstack.org/developer/glance/cache.html for further details on the Glance image cache.
*/

import (
    ""bytes""
    ""encoding/json""
    ""fmt""
    ""io/ioutil""
    /*
        ""log""
        ""log/syslog""
    */
    ""net/http""
    ""os""
    ""os/exec""
)

func prefetchImages() error {

    cmd := exec.Command(""glance-cache-prefetcher"")
    err := cmd.Run()

    if err != nil {
        return fmt.Errorf(""glance-cache-prefetcher failed to execute properly: %v"", err)
    }

    return nil
}

func queueImages(hostname string, imageList []string) error {

    for _, image := range imageList {
        cmd := exec.Command(""glance-cache-manage"", ""--host="", hostname, ""queue-image"", image)
        err := cmd.Run()

        if err != nil {
            return fmt.Errorf(""glance-cache-manage failed to execute properly: %v"", err)
        } else {
            fmt.Printf(""Image %s queued"", image)
        }
    }

    return nil
}

func getBody(method string, url string, headers map[string]string, body []byte) ([]byte, error) {

    client := &http.Client{}
    req, err := http.NewRequest(method, url, bytes.NewReader(body))

    if err != nil {
        return nil, err
    }

    for key, value := range headers {
        req.Header.Add(key, value)
    }

    res, err := client.Do(req)
    defer res.Body.Close()

    if err != nil {
        return nil, err
    }

    var bodyBytes []byte

    if res.StatusCode == 200 {
        bodyBytes, err = ioutil.ReadAll(res.Body)
    } else if err != nil {
        return nil, err
    } else {
        return nil, fmt.Errorf(""The remote end did not return a HTTP 200 (OK) response."")
    }

    return bodyBytes, nil

}

func getImages(authToken string) ([]string, error) {

    type GlanceDetailResponse struct {
        Images []struct {
            Name   string `json:""name""`
            Status string `json:""status""`
            ID     string `json:""id""`
        }
    }

    method := ""GET""
    url := ""http://192.168.1.2:9292/v1.1/images/detail""
    headers := map[string]string{""X-Auth-Token"": authToken}

    bodyBytes, err := getBody(method, url, headers, nil)

    if err != nil {
        return nil, fmt.Errorf(""unable to retrieve the response body from the Glance API server: %v"", err)
    }

    var glance GlanceDetailResponse
    err = json.Unmarshal(bodyBytes, &glance)

    if err != nil {
        return nil, fmt.Errorf(""unable to parse the JSON response:"", err)
    }

    imageList := make([]string, 10)

    for _, image := range glance.Images {
        if image.Status == ""active"" {
            imageList = append(imageList, image.ID)
        }
    }

    return imageList, nil

}

func getToken() (string, error) {

    type TokenResponse struct {
        Auth []struct {
            Token struct {
                Expires string `json:""expires""`
                ID      string `json:""id""`
            }
        }
    }

    method := ""POST""
    url := ""http://192.168.1.2:5000/v2.0/tokens""
    headers := map[string]string{""Content-type"": ""application/json""}
    creds := []byte(`{""auth"":{""passwordCredentials"":{""username"": ""glance"", ""password"":""""}, ""tenantId"":""""}}`)

    bodyBytes, err := getBody(method, url, headers, creds)

    if err != nil {
        return """", err
    }

    var keystone TokenResponse
    err = json.Unmarshal(bodyBytes, &keystone)

    if err != nil {
        return """", err
    }

    authToken := string((keystone.Auth[0].Token.ID))

    return authToken, nil
}

func main() {

    /*
        slog, err := syslog.New(syslog.LOG_ERR, ""[fido]"")

        if err != nil {
            log.Fatalf(""unable to connect to syslog: %v"", err)
            os.Exit(1)
        } else {
            defer slog.Close()
        }
    */

    hostname, err := os.Hostname()

    if err != nil {
        // slog.Err(""Hostname not captured"")
        os.Exit(1)
    }

    authToken, err := getToken()

    if err != nil {
        // slog.Err(""The authentication token from the Glance API server was not retrieved"")
        os.Exit(1)
    }

    imageList, err := getImages(authToken)

    err = queueImages(hostname, imageList)

    if err != nil {
        // slog.Err(""Could not queue the images for pre-fetching"")
        os.Exit(1)
    }

    err = prefetchImages()

    if err != nil {
        // slog.Err(""Could not queue the images for pre-fetching"")
        os.Exit(1)
    }

    return
}
",4764
61,16998427,"/hobby?action=admin&operation=edit&id=/Hobby,5222955109842944
",62
62,16998427,"{{define ""content""}}
{{.PageSetting.Title}}

Add Hobby


    
        Title
        Created
        Updated
        Operations
    


{{range .PageData.Hobby}}
    
        {{.Title}}
        {{.CreatedDate.Format ""2006.01.02 @ 3:04pm""}}
        {{.UpdatedDate.Format ""2006.01.02 @ 3:04pm""}}
        
             Edit
             Delete
        
    
{{end}}



    
    {{if .PageSetting.ShowPrev}}
        
            ← Older
        
    {{end}}
    {{if .PageSetting.ShowNext}}
        
            Newer →
        
    {{end}}
    

{{end}}
",553
63,16998427,"/*
 * New Page
 *
 * @param layout      (string)
 * @param showSidebar (bool)
 * @param pageData    (*PageData)
 *
 * @return (*Page)
 */
func NewPage(pageSetting *PageSetting, pageData *PageData) *Page {
    if pageSetting.Layout == """" {
        pageSetting.Layout = DEFAULT_LAYOUT
    }

    if pageSetting.Title == """" {
        pageSetting.Title = config.Title
    }

    if pageSetting.Description == """" {
        pageSetting.Description = config.Description
    }

    return &Page{ PageSetting: pageSetting, PageData: pageData }
}

/*
 * Render page
 *
 * @param pageFilePath (string)
 * @param w            (http.ResponseWriter)
 *
 * @return (error)
 */
func (page *Page) Render(pageFilePath string, w http.ResponseWriter) (err error) {
    columnFilePath  := page.PageSetting.Layout + "".html""
    mainFilePath    := ""main.html""
    contentFilePath := pageFilePath + "".html""
    sidebarFilePath := ""sidebar.html""

    var tmpl *template.Template

    switch page.PageSetting.ShowSidebar {
        case true:
            tmpl, err = template.ParseFiles(
                            LAYOUT_FOLDER + mainFilePath,
                            LAYOUT_FOLDER + columnFilePath,
                            LAYOUT_FOLDER + sidebarFilePath,
                            STATIC_FOLDER + contentFilePath)
        case false:
            tmpl, err = template.ParseFiles(
                            LAYOUT_FOLDER + mainFilePath,
                            LAYOUT_FOLDER + columnFilePath,
                            STATIC_FOLDER + contentFilePath)

    }

    if err != nil {
        return
    }

    tmpl.Execute(w, page)
    return
}
",1634
64,16998427,"type HobbyDB struct {
    Key *datastore.Key `datastore:""-""`
    Title string
    Description []byte
    CreatedDate time.Time
    UpdatedDate time.Time
}

type HobbyData struct {
    Key *datastore.Key `datastore:""-""`
    Title string
    Description string
    CreatedDate time.Time
    UpdatedDate time.Time
}

func getHobbyData(dbQuery *datastore.Query, MDOutput bool, c appengine.Context) (hobbyData []HobbyData , err error) {
    var h []*HobbyDB
    k, err := dbQuery.GetAll(c, &h)
    if err != nil {
        return
    }

    hobbyData = make([]HobbyData, len(h))
    for i := range h {
        hobbyData[i].Key = k[i]
        hobbyData[i].Title = h[i].Title
        if MDOutput {
            hobbyData[i].Description = string(blackfriday.MarkdownCommon(h[i].Description))
        } else {
            hobbyData[i].Description = string(h[i].Description)
        }
        hobbyData[i].CreatedDate = h[i].CreatedDate
        hobbyData[i].UpdatedDate = h[i].UpdatedDate
    }
    return
}

func hobbyList(w http.ResponseWriter, r *http.Request) {
    c := appengine.NewContext(r)

    // Get hobby data

    // Get page id
    pageId, _ := strconv.Atoi(getUrlQuery(r.URL, ""pid""))
    pageSize  := 10

    // Get offset and page numbers
    offset, pageNums := getOffset(""Hobby"", pageId, pageSize, c)

    // New PageSetting
    pageSetting := new(PageSetting)

    // Setting PageSetting
    pageSetting.Title  = ""Hobby Manager - "" + config.Title
    pageSetting.Layout = ""column1""

    // showNext and showPrev button
    if pageId  pageNums {
        pageId = 1
    }
    if pageId < pageNums {
        pageSetting.ShowPrev = true
    }
    if pageId != 1 {
        pageSetting.ShowNext = true
    }
    pageSetting.PrevPageID = pageId + 1
    pageSetting.NextPageID = pageId - 1

    // Get hobby data
    dbQuery := datastore.NewQuery(""Hobby"").Order(""-UpdatedDate"").Offset(offset).Limit(pageSize)
    hobbyData, err := getHobbyData(dbQuery, false, c)
    if err != nil {
        serveError(c, w, err)
        return
    }

    // New PageData
    pageData := &PageData{ Hobby: hobbyData }

    // New Page
    page := NewPage(pageSetting, pageData)

    // Render page
    page.Render(""hobby/admin"", w)
}
",2216
65,17328798,"cc1: warnings being treated as errors
mgodbc.go: In function 'mSQLColAttribute':
mgodbc.go:31: warning: 'SQLColAttributeW' is deprecated (declared at /usr/include/sqlucode.h:128)
mgodbc.go: At top level:
mgodbc.go:44: warning: 'SQLDisconnect' is deprecated (declared at /usr/include/sql.h:896)
mgodbc.go:51: warning: 'SQLGetDiagRecW' is deprecated (declared at /usr/include/sqlucode.h:233)
mgodbc.go:62: warning: 'SQLGetInfoW' is deprecated (declared at /usr/include/sqlucode.h:273)
mgodbc.go:67: warning: 'SQLBindParameter' is deprecated (declared at /usr/include/sqlext.h:2519)
mgodbc.go:70: warning: 'SQLDriverConnectW' is deprecated (declared at /usr/include/sqlucode.h:336)
mgodbc.go:73: warning: 'SQLSetEnvAttr' is deprecated (declared at /usr/include/sql.h:1120)
mgodbc.go:74: warning: 'SQLFreeHandle' is deprecated (declared at /usr/include/sql.h:942)
mgodbc.go:75: warning: 'SQLSetConnectAttrW' is deprecated (declared at /usr/include/sqlucode.h:245)
mgodbc.go:78: warning: 'SQLGetDiagFieldW' is deprecated (declared at /usr/include/sqlucode.h:223)
mgodbc.go:82: warning: 'SQLRowCount' is deprecated (declared at /usr/include/sql.h:1076)
mgodbc.go:98: warning: 'SQLGetData' is deprecated (declared at /usr/include/sql.h:975)
mgodbc.go:99: warning: 'SQLEndTran' is deprecated (declared at /usr/include/sql.h:902)
mgodbc.go:102: warning: 'SQLCloseCursor' is deprecated (declared at /usr/include/sql.h:831)
mgodbc.go:103: warning: 'SQLPrepareW' is deprecated (declared at /usr/include/sqlucode.h:239)
mgodbc.go:107: warning: 'SQLNumResultCols' is deprecated (declared at /usr/include/sql.h:1058)
mgodbc.go:113: warning: 'SQLAllocHandle' is deprecated (declared at /usr/include/sql.h:799)
mgodbc.go:114: warning: 'SQLExecute' is deprecated (declared at /usr/include/sql.h:921)
mgodbc.go:115: warning: 'SQLFetch' is deprecated (declared at /usr/include/sql.h:924)
mgodbc.go:119: warning: 'SQLNumParams' is deprecated (declared at /usr/include/sqlext.h:2448)
",1962
66,17328798,"#pragma GCC diagnostic ignored ""-Wdeprecated-declarations""  
",61
67,17328798,"#cgo darwin CFLAGS: -I/opt/local/include 
",42
68,17328798,"# code.google.com/p/odbc/api
api/api.go:13: undefined: SQLSMALLINT  
api/api.go:14: undefined: SQLUSMALLINT  
api/api.go:15: undefined: SQLUSMALLINT  
api/api.go:19: undefined: SQLSMALLINT  
api/api.go:20: undefined: SQLUSMALLINT  
api/api.go:21: undefined: SQLUSMALLINT  
api/api.go:22: undefined: SQLUSMALLINT  
api/api.go:23: undefined: SQLUSMALLINT  
api/api.go:24: undefined: SQLUSMALLINT  
api/api.go:25: undefined: SQLUINTEGER  
api/api.go:25: too many errors  
",469
69,17328798,cgo,3
70,17328798,api_unix.go,11
71,17328798,"// Copyright 2012 The Go Authors. All rights reserved.  
// Use of this source code is governed by a BSD-style  
// license that can be found in the LICENSE file.  

// +build linux darwin  
// +build cgo  

package api  

// #cgo linux LDFLAGS: -lodbc  
// #cgo darwin LDFLAGS: -lodbc  
// #cgo darwin CFLAGS: -I /opt/local/include  
// #include   
// #include   
import ""C""  
",378
72,17328798,-I /opt/local/include,21
73,17328798,# go build -x,13
74,17328798,"WORK=/var/folders/z2/k9vxn7gn6395vb3y2qc7_1040000gn/T/go-build784364461  
mkdir -p $WORK/code.google.com/p/odbc/api/_obj/  
mkdir -p $WORK/code.google.com/p/odbc/  
cd /Users/jr/Development/go/src/code.google.com/p/odbc/api  
/usr/local/go/pkg/tool/darwin_amd64/cgo -objdir $WORK/code.google.com/p/odbc/api/_obj/ -- -I /opt/local/include -I $WORK/code.google.com/p/odbc/api/_obj/ api_unix.go  
/usr/local/go/pkg/tool/darwin_amd64/6c -F -V -w -I $WORK/code.google.com/p/odbc/api/_obj/ -I /usr/local/go/pkg/darwin_amd64 -o $WORK/code.google.com/p/odbc/api/_obj/_cgo_defun.6 -D GOOS_darwin -D GOARCH_amd64 $WORK/code.google.com/p/odbc/api/_obj/_cgo_defun.c  
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -print-libgcc-file-name
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -I /opt/local/include -I $WORK/code.google.com/p/odbc/api/_obj/ -o $WORK/code.google.com/p/odbc/api/_obj/_cgo_main.o -c $WORK/code.google.com/p/odbc/api/_obj/_cgo_main.c  
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -I /opt/local/include -I $WORK/code.google.com/p/odbc/api/_obj/ -o $WORK/code.google.com/p/odbc/api/_obj/_cgo_export.o -c $WORK/code.google.com/p/odbc/api/_obj/_cgo_export.c  
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -I /opt/local/include -I $WORK/code.google.com/p/odbc/api/_obj/ -o $WORK/code.google.com/p/odbc/api/_obj/api_unix.cgo2.o -c $WORK/code.google.com/p/odbc/api/_obj/api_unix.cgo2.c  
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -o $WORK/code.google.com/p/odbc/api/_obj/_cgo_.o $WORK/code.google.com/p/odbc/api/_obj/_cgo_main.o $WORK/code.google.com/p/odbc/api/_obj/_cgo_export.o $WORK/code.google.com/p/odbc/api/_obj/api_unix.cgo2.o -lodbc
/usr/local/go/pkg/tool/darwin_amd64/cgo -objdir $WORK/code.google.com/p/odbc/api/_obj/ -dynimport $WORK/code.google.com/p/odbc/api/_obj/_cgo_.o -dynout $WORK/code.google.com/p/odbc/api/_obj/_cgo_import.c  
/usr/local/go/pkg/tool/darwin_amd64/6c -F -V -w -I $WORK/code.google.com/p/odbc/api/_obj/ -I /usr/local/go/pkg/darwin_amd64 -o $WORK/code.google.com/p/odbc/api/_obj/_cgo_import.6 -D GOOS_darwin -D GOARCH_amd64 $WORK/code.google.com/p/odbc/api/_obj/_cgo_import.c  
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -o $WORK/code.google.com/p/odbc/api/_obj/_all.o $WORK/code.google.com/p/odbc/api/_obj/_cgo_export.o $WORK/code.google.com/p/odbc/api/_obj/api_unix.cgo2.o -Wl,-r -nostdlib /usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/x86_64/libgcc.a  
/usr/local/go/pkg/tool/darwin_amd64/6g -o $WORK/code.google.com/p/odbc/api/_obj/_go_.6 -p code.google.com/p/odbc/api -D _/Users/jr/Development/go/src/code.google.com/p/odbc/api -I $WORK ./api.go $WORK/code.google.com/p/odbc/api/_obj/_cgo_gotypes.go $WORK/code.google.com/p/odbc/api/_obj/api_unix.cgo1.go  
/usr/local/go/pkg/tool/darwin_amd64/pack grcP $WORK $WORK/code.google.com/p/odbc/api.a $WORK/code.google.com/p/odbc/api/_obj/_go_.6 $WORK/code.google.com/p/odbc/api/_obj/_cgo_import.6 $WORK/code.google.com/p/odbc/api/_obj/_cgo_defun.6 $WORK/code.google.com/p/odbc/api/_obj/_all.o  
mkdir -p $WORK/code.google.com/p/odbc/_obj/  
mkdir -p $WORK/code.google.com/p/  
cd /Users/jr/Development/go/src/code.google.com/p/odbc  
/usr/local/go/pkg/tool/darwin_amd64/6g -o $WORK/code.google.com/p/odbc/_obj/_go_.6 -p code.google.com/p/odbc -complete -D _/Users/jr/Development/go/src/code.google.com/p/odbc -I $WORK -I /Users/jr/Development/go/pkg/darwin_amd64 ./column.go ./conn.go ./driver.go ./error.go ./handle.go ./odbcstmt.go ./param.go ./result.go ./rows.go ./stats.go ./stmt.go ./tx.go  
# code.google.com/p/odbc  
./column.go:22: undefined: api.SQLGetData  
./column.go:28: undefined: api.SQLBindCol  
./column.go:47: undefined: api.SQLDescribeCol  
./conn.go:20: undefined: api.SQLAllocHandle  
./conn.go:28: undefined: api.SQLDriverConnect  
./conn.go:39: undefined: api.SQLDisconnect  
./driver.go:26: undefined: api.SQLAllocHandle  
./driver.go:34: undefined: api.SQLSetEnvAttr  
./driver.go:43: undefined: api.SQLSetEnvAttr  
./driver.go:50: undefined: api.SQLSetEnvAttr  
./driver.go:50: too many errors  
",4042
75,17328798,SQLGetData,10
76,17328798,//sys  SQLGetData...,20
77,17328798,api.go,6
78,17328798,/opt/local/include/sql.h,24
79,17477311,main(__DATA/__const): unexpected reloc for dynamic symbol _NSConcreteGlobalBlock,80
80,17477311,main(__DATA/__const): unhandled relocation for _NSConcreteGlobalBlock (type 28 rtype 120),89
81,17477311,go build,8
82,17477311,"package main

/*
#include 
#include ""wrapper.h""
*/
import ""C""

import (
    ""fmt""
)

//export HandleXPCEvent
func HandleXPCEvent(event C.xpc_object_t) {
    fmt.Println(""Event was handled"")
}

func main() {
    name := C.CString(""com.example.xpc"")
    queue := C.dispatch_queue_create(name, nil)
    conn := C.xpc_connection_create(name, queue)
    C.set_event_handler(conn)

    //C.xpc_connection_resume(conn)
}
",414
83,17477311,"#ifndef _WRAPPER_H_
#define _WRAPPER_H_

#include 
#include 
#include 

xpc_connection_t connect( char* name);
void set_event_handler(xpc_connection_t connection);

#endif
",172
84,17477311,"#include ""wrapper.h""
#include 

extern void HandleXPCEvent(xpc_object_t);

xpc_connection_t connect( char* name) {
    dispatch_queue_t queue = dispatch_queue_create(name,0);
    return xpc_connection_create(name,queue);
}

void set_event_handler(xpc_connection_t connection) {
    xpc_connection_set_event_handler(connection, ^(xpc_object_t event) {
        xpc_retain(event);
        // Call Go function
        HandleXPCEvent(event);
    });
}
",447
85,17477311,go build -x -work,17
86,17477311,"➣ go build -x -work
WORK=/var/folders/fb/bgfqk8wx5x16w7yh2cg50vrw0000gn/T/go-build524335717
mkdir -p $WORK/github.com/gabrielayuso/go-xpc/_obj/
mkdir -p $WORK/github.com/gabrielayuso/go-xpc/_obj/exe/
cd /Users/gabrielayuso/Documents/Workspace/Projects/go/src/github.com/gabrielayuso/go-xpc
/usr/local/go/pkg/tool/darwin_amd64/cgo -objdir $WORK/github.com/gabrielayuso/go-xpc/_obj/ -- -I $WORK/github.com/gabrielayuso/go-xpc/_obj/ main.go
/usr/local/go/pkg/tool/darwin_amd64/6c -F -V -w -I $WORK/github.com/gabrielayuso/go-xpc/_obj/ -I /usr/local/go/pkg/darwin_amd64 -o $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_defun.6 -D GOOS_darwin -D GOARCH_amd64 $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_defun.c
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -print-libgcc-file-name
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -I $WORK/github.com/gabrielayuso/go-xpc/_obj/ -o $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_main.o -c $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_main.c
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -I $WORK/github.com/gabrielayuso/go-xpc/_obj/ -o $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_export.o -c $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_export.c
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -I $WORK/github.com/gabrielayuso/go-xpc/_obj/ -o $WORK/github.com/gabrielayuso/go-xpc/_obj/main.cgo2.o -c $WORK/github.com/gabrielayuso/go-xpc/_obj/main.cgo2.c
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -I $WORK/github.com/gabrielayuso/go-xpc/_obj/ -o $WORK/github.com/gabrielayuso/go-xpc/_obj/wrapper.o -c ./wrapper.c
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -o $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_.o $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_main.o $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_export.o $WORK/github.com/gabrielayuso/go-xpc/_obj/main.cgo2.o $WORK/github.com/gabrielayuso/go-xpc/_obj/wrapper.o
/usr/local/go/pkg/tool/darwin_amd64/cgo -objdir $WORK/github.com/gabrielayuso/go-xpc/_obj/ -dynimport $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_.o -dynout $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_import.c
/usr/local/go/pkg/tool/darwin_amd64/6c -F -V -w -I $WORK/github.com/gabrielayuso/go-xpc/_obj/ -I /usr/local/go/pkg/darwin_amd64 -o $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_import.6 -D GOOS_darwin -D GOARCH_amd64 $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_import.c
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -o $WORK/github.com/gabrielayuso/go-xpc/_obj/_all.o $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_export.o $WORK/github.com/gabrielayuso/go-xpc/_obj/main.cgo2.o $WORK/github.com/gabrielayuso/go-xpc/_obj/wrapper.o -Wl,-r -nostdlib /usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/x86_64/libgcc.a
/usr/local/go/pkg/tool/darwin_amd64/6g -o $WORK/github.com/gabrielayuso/go-xpc/_obj/_go_.6 -p github.com/gabrielayuso/go-xpc -D _/Users/gabrielayuso/Documents/Workspace/Projects/go/src/github.com/gabrielayuso/go-xpc -I $WORK $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_gotypes.go $WORK/github.com/gabrielayuso/go-xpc/_obj/main.cgo1.go
/usr/local/go/pkg/tool/darwin_amd64/pack grcP $WORK $WORK/github.com/gabrielayuso/go-xpc.a $WORK/github.com/gabrielayuso/go-xpc/_obj/_go_.6 $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_import.6 $WORK/github.com/gabrielayuso/go-xpc/_obj/_cgo_defun.6 $WORK/github.com/gabrielayuso/go-xpc/_obj/_all.o
cd .
/usr/local/go/pkg/tool/darwin_amd64/6l -o $WORK/github.com/gabrielayuso/go-xpc/_obj/exe/a.out -L $WORK $WORK/github.com/gabrielayuso/go-xpc.a
# github.com/gabrielayuso/go-xpc
main(__DATA/__const): unexpected reloc for dynamic symbol _NSConcreteGlobalBlock
main(__DATA/__const): unhandled relocation for _NSConcreteGlobalBlock (type 28 rtype 120)
",3726
87,17477311,go build -x -work,17
88,17477311,_cgo_import.c,13
89,17477311,-dynimport,10
90,17477311,-dynout,7
91,17477311,"#pragma cgo_import_dynamic _NSConcreteGlobalBlock _NSConcreteGlobalBlock """"",75
92,18817336,"package client                                                                                                                                                                                              
import (                                                                                                                                                                                                    
    ""encoding/base64""                                                                                                                                                                                       
    ""crypto/aes""                                                                                                                                                                                            
    ""crypto/cipher""                                                                                                                                                                                         
    ""fmt""                                                                                                                                                                                                   
) 

var iv = []byte{34, 35, 35, 57, 68, 4, 35, 36, 7, 8, 35, 23, 35, 86, 35, 23}

func encodeBase64(b []byte) string {                                                                                                                                                                        
    return base64.StdEncoding.EncodeToString(b)                                                                                                                                                             
}                                                                                                                                                                                                           

func decodeBase64(s string) []byte {                                                                                                                                                                        
    data, err := base64.StdEncoding.DecodeString(s)                                                                                                                                                         
    if err != nil { panic(err) }                                                                                                                                                                            
    return data                                                                                                                                                                                             
}                                                                                                                                                                                                           

func Encrypt(key, text string) string {                                                                                                                                                                     
    block, err := aes.NewCipher([]byte(key))                                                                                                                                                                
    if err != nil { panic(err) }                                                                                                                                                                            
    plaintext := []byte(text)                                                                                                                                                                               
    cfb := cipher.NewCFBEncrypter(block, iv)                                                                                                                                                                
    ciphertext := make([]byte, len(plaintext))                                                                                                                                                              
    cfb.XORKeyStream(ciphertext, plaintext)                                                                                                                                                                 
    return encodeBase64(ciphertext)                                                                                                                                                                         
}                                                                                                                                                                                                           

func Decrypt(key, text string) string {                                                                                                                                                                     
    block, err := aes.NewCipher([]byte(key))                                                                                                                                                                
    if err != nil { panic(err) }                                                                                                                                                                            
    ciphertext := decodeBase64(text)                                                                                                                                                                        
    cfb := cipher.NewCFBEncrypter(block, iv)                                                                                                                                                                
    plaintext := make([]byte, len(ciphertext))                                                                                                                                                              
    cfb.XORKeyStream(plaintext, ciphertext)                                                                                                                                                                 
}                          
",6263
93,19745549,"~/g/s/g/g/e/g/fsaa > ggdb main
GNU gdb (GDB) 7.6
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later 
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type ""show copying""
and ""show warranty"" for details.
This GDB was configured as ""x86_64-apple-darwin13.0.0"".
For bug reporting instructions, please see:
...
Reading symbols from /Users/nils/gocode/src/github.com/go-gl/examples/glfw/fsaa/main...
warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/attriblocation.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/buffer.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/color.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/framebuffer.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/gl.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/matrix.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/object.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/program.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/renderbuffer.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/shader.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/texture.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/transformfeedback.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/uniformlocation.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/vertex.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/gl/_obj/vertexarray.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/glu/_obj/_cgo_export.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/glu/_obj/callback.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/glu/_obj/callback.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/glu/_obj/glu.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build184019101/github.com/go-gl/glu/_obj/tesselator.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build432883021/runtime/cgo/_obj/gcc_amd64.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build432883021/runtime/cgo/_obj/gcc_darwin_amd64.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build432883021/runtime/cgo/_obj/gcc_setenv.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build432883021/runtime/cgo/_obj/gcc_util.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build883630526/github.com/go-gl/glfw/_obj/_cgo_export.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build883630526/github.com/go-gl/glfw/_obj/callback.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build883630526/github.com/go-gl/glfw/_obj/callback.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build883630526/github.com/go-gl/glfw/_obj/glfw.cgo2.o': can't open to read symbols: No such file or directory.

warning: `/var/folders/rp/jyw8rd7j4hn10vyk5yjyfvw80000gn/T/go-build883630526/github.com/go-gl/glfw/_obj/image.cgo2.o': can't open to read symbols: No such file or directory.
(no debugging symbols found)...done.
(gdb) list
No symbol table is loaded.  Use the ""file"" command.
(gdb) 
",5681
94,19745549,go version,10
95,19745549,"go version devel +f9af8b83c78c Fri Oct 25 23:00:22 2013 +0300 darwin/amd64
",75
96,19802242,"package main

import (
    ""bytes""
    ""errors""
    ""flag""
    ""fmt""
    ""log""
    ""net""
    ""net/http""
    ""net/url""
    ""runtime""
    ""strconv""
    ""time""
)

const DEFAULT_IDLE_TIMEOUT = 5 * time.Second

var (
    listen       string
    logOn        bool
    localhost, _ = url.Parse(""http://localhost:8080/"")
    client       = &http.Client{
        Transport: &http.Transport{
            Proxy: NoProxyAllowed,
            Dial: func(network, addr string) (net.Conn, error) {
                return NewTimeoutConnDial(network, addr, DEFAULT_IDLE_TIMEOUT)
            },
        },
    }
)

func main() {
    runtime.GOMAXPROCS(runtime.NumCPU())
    flag.StringVar(&listen, ""listen"", ""0.0.0.0:9000"", ""listen on address"")
    flag.BoolVar(&logOn, ""log"", true, ""enable logging"")
    flag.Parse()
    server := getTimeoutServer(listen, http.HandlerFunc(proxyHandlerFunc))
    log.Printf(""Starting router-server on %s\n"", listen)
    log.Fatal(server.ListenAndServe())
}

func proxyHandlerFunc(w http.ResponseWriter, req *http.Request) {
    if logOn {
        log.Printf(""%+v\n"", req)
    }
    // Setup request URL
    origURL := req.URL
    req.URL = new(url.URL)
    *req.URL = *localhost
    req.URL.Path, req.URL.RawQuery, req.URL.Fragment = origURL.Path, origURL.RawQuery, origURL.Fragment
    req.RequestURI, req.Host = """", req.URL.Host
    // Perform request
    resp, err := client.Do(req)
    if err != nil {
        w.WriteHeader(http.StatusBadGateway)
        w.Write([]byte(fmt.Sprintf(""%d - StatusBadGateway: %s"", http.StatusBadGateway, err)))
        return
    }
    defer resp.Body.Close()
    var respBuffer *bytes.Buffer
    if resp.ContentLength != -1 {
        respBuffer = bytes.NewBuffer(make([]byte, 0, resp.ContentLength))
    } else {
        respBuffer = new(bytes.Buffer)
    }
    if _, err = respBuffer.ReadFrom(resp.Body); err != nil {
        w.WriteHeader(http.StatusBadGateway)
        w.Write([]byte(fmt.Sprintf(""%d - StatusBadGateway: %s"", http.StatusBadGateway, err)))
        return
    }
    // Write result of request
    headers := w.Header()
    var key string
    var val []string
    for key, val = range resp.Header {
        headers[key] = val
    }
    headers.Set(""Content-Length"", strconv.Itoa(respBuffer.Len()))
    w.WriteHeader(resp.StatusCode)
    w.Write(respBuffer.Bytes())
}

func getTimeoutServer(addr string, handler http.Handler) *http.Server {
    //keeps people who are slow or are sending keep-alives from eating all our sockets
    const (
        HTTP_READ_TO  = DEFAULT_IDLE_TIMEOUT
        HTTP_WRITE_TO = DEFAULT_IDLE_TIMEOUT
    )
    return &http.Server{
        Addr:         addr,
        Handler:      handler,
        ReadTimeout:  HTTP_READ_TO,
        WriteTimeout: HTTP_WRITE_TO,
    }
}

func NoProxyAllowed(request *http.Request) (*url.URL, error) {
    return nil, nil
}

//TimeoutConn-------------------------
//Put me in my own TimeoutConn.go ?

type TimeoutConn struct {
    net.Conn
    readTimeout, writeTimeout time.Duration
}

var invalidOperationError = errors.New(""TimeoutConn does not support or allow .SetDeadline operations"")

func NewTimeoutConn(conn net.Conn, ioTimeout time.Duration) (*TimeoutConn, error) {
    return NewTimeoutConnReadWriteTO(conn, ioTimeout, ioTimeout)
}

func NewTimeoutConnReadWriteTO(conn net.Conn, readTimeout, writeTimeout time.Duration) (*TimeoutConn, error) {
    this := &TimeoutConn{
        Conn:         conn,
        readTimeout:  readTimeout,
        writeTimeout: writeTimeout,
    }
    now := time.Now()
    err := this.Conn.SetReadDeadline(now.Add(this.readTimeout))
    if err != nil {
        return nil, err
    }
    err = this.Conn.SetWriteDeadline(now.Add(this.writeTimeout))
    if err != nil {
        return nil, err
    }
    return this, nil
}

func NewTimeoutConnDial(network, addr string, ioTimeout time.Duration) (net.Conn, error) {
    conn, err := net.DialTimeout(network, addr, ioTimeout)
    if err != nil {
        return nil, err
    }
    if conn, err = NewTimeoutConn(conn, ioTimeout); err != nil {
        return nil, err
    }
    return conn, nil
}

func (this *TimeoutConn) Read(data []byte) (int, error) {
    this.Conn.SetReadDeadline(time.Now().Add(this.readTimeout))
    return this.Conn.Read(data)
}

func (this *TimeoutConn) Write(data []byte) (int, error) {
    this.Conn.SetWriteDeadline(time.Now().Add(this.writeTimeout))
    return this.Conn.Write(data)
}

func (this *TimeoutConn) SetDeadline(time time.Time) error {
    return invalidOperationError
}

func (this *TimeoutConn) SetReadDeadline(time time.Time) error {
    return invalidOperationError
}

func (this *TimeoutConn) SetWriteDeadline(time time.Time) error {
    return invalidOperationError
}
",4725
97,20156775,"{
""RelatedTopics"" : [
      {
         ""Result"" : ""Criticism of Google - Criticism of Google includes possible misuse and manipulation of search results, its use of others' intellectual property, concerns that its compilation of data may violate people's privacy, cen..."",
         ""Icon"" : {
            ""URL"" : """",
            ""Height"" : """",
            ""Width"" : """"
         },
         ""FirstURL"" : ""http://duckduckgo.com/Criticism_of_Google"",
         ""Text"" : ""Criticism of Google - Criticism of Google includes possible misuse and manipulation of search results, its use of others' intellectual property, concerns that its compilation of data may violate people's privacy, cen...""
      },
      {
         ""Result"" : ""PRISM - PRISM is a clandestine mass electronic surveillance data mining program known to have been operated by the United States National Security Agency (NSA) since 2007."",
         ""Icon"" : {
            ""URL"" : """",
            ""Height"" : """",
            ""Width"" : """"
         },
         ""FirstURL"" : ""http://duckduckgo.com/PRISM_(surveillance_program)"",
         ""Text"" : ""PRISM - PRISM is a clandestine mass electronic surveillance data mining program known to have been operated by the United States National Security Agency (NSA) since 2007.""
      },
      {
         ""Result"" : ""Google Panda - Google Panda is a change to Google's search results ranking algorithm that was first released in February 2011."",
         ""Icon"" : {
            ""URL"" : """",
            ""Height"" : """",
            ""Width"" : """"
         },
         ""FirstURL"" : ""http://duckduckgo.com/Google_Panda"",
         ""Text"" : ""Google Panda - Google Panda is a change to Google's search results ranking algorithm that was first released in February 2011.""
      },
      {
         ""Result"" : ""Google Penguin - Google Penguin is a code name for a Google algorithm update that was first announced on April 24, 2012."",
         ""Icon"" : {
            ""URL"" : """",
            ""Height"" : """",
            ""Width"" : """"
         },
         ""FirstURL"" : ""http://duckduckgo.com/Google_Penguin"",
         ""Text"" : ""Google Penguin - Google Penguin is a code name for a Google algorithm update that was first announced on April 24, 2012.""
      },
      {
         ""Result"" : ""Google search features - The Google search features include more than 40 options or keywords to modify the type of search."",
         ""Icon"" : {
            ""URL"" : """",
            ""Height"" : """",
            ""Width"" : """"
         },
         ""FirstURL"" : ""http://duckduckgo.com/Google_search_features"",
         ""Text"" : ""Google search features - The Google search features include more than 40 options or keywords to modify the type of search.""
      },
      {
         ""Result"" : ""Google Searchology - Google Searchology 2009 witnessed several novel changes in the Google search options."",
         ""Icon"" : {
            ""URL"" : """",
            ""Height"" : """",
            ""Width"" : """"
         },
         ""FirstURL"" : ""http://duckduckgo.com/Google_Searchology"",
         ""Text"" : ""Google Searchology - Google Searchology 2009 witnessed several novel changes in the Google search options.""
      },
      {
         ""Result"" : ""Multilingual websites"",
         ""Icon"" : {
            ""URL"" : """",
            ""Height"" : """",
            ""Width"" : """"
         },
         ""FirstURL"" : ""http://duckduckgo.com/c/Multilingual_websites"",
         ""Text"" : ""Multilingual websites""
      },
      {
         ""Result"" : ""Google services"",
         ""Icon"" : {
            ""URL"" : """",
            ""Height"" : """",
            ""Width"" : """"
         },
         ""FirstURL"" : ""http://duckduckgo.com/c/Google_services"",
         ""Text"" : ""Google services""
      },
      {
         ""Result"" : ""Internet search engines"",
         ""Icon"" : {
            ""URL"" : """",
            ""Height"" : """",
            ""Width"" : """"
         },
         ""FirstURL"" : ""http://duckduckgo.com/c/Internet_search_engines"",
         ""Text"" : ""Internet search engines""
      },
      {
         ""Result"" : ""American websites"",
         ""Icon"" : {
            ""URL"" : """",
            ""Height"" : """",
            ""Width"" : """"
         },
         ""FirstURL"" : ""http://duckduckgo.com/c/American_websites"",
         ""Text"" : ""American websites""
      }
   ]
}
",4285
98,20156775,"{
""RelatedTopics"" : [
      {
         ""Result"" : ""Doctor Who is the title of a long-running British science fiction series."",
         ""Icon"" : {
            ""URL"" : ""https://i.duckduckgo.com/i/www.bbc.co.uk.ico"",
            ""Height"" : 16,
            ""Width"" : 16
         },
         ""FirstURL"" : ""http://duckduckgo.com/Doctor_Who"",
         ""Text"" : ""Doctor Who is the title of a long-running British science fiction series.""
      },
      {
         ""Result"" : ""Doctor (Doctor Who), the main character in the British television series"",
         ""Icon"" : {
            ""URL"" : ""https://i.duckduckgo.com/i/e32c2703.jpg"",
            ""Height"" : """",
            ""Width"" : """"
         },
         ""FirstURL"" : ""http://duckduckgo.com/Doctor_(Doctor_Who)"",
         ""Text"" : ""Doctor (Doctor Who), the main character in the British television series""
      },
      {
         ""Result"" : ""Doctor Who theme music, the theme music created for the television series, and has changed many times over the 50 years it has been running."",
         ""Icon"" : {
            ""URL"" : """",
            ""Height"" : """",
            ""Width"" : """"
         },
         ""FirstURL"" : ""http://duckduckgo.com/Doctor_Who_theme_music"",
         ""Text"" : ""Doctor Who theme music, the theme music created for the television series, and has changed many times over the 50 years it has been running.""
      },
      {
         ""Topics"" : [
            {
               ""Result"" : ""Doctor Who (film), the television movie starring Paul McGann, based on the television series"",
               ""Icon"" : {
                  ""URL"" : """",
                  ""Height"" : """",
                  ""Width"" : """"
               },
               ""FirstURL"" : ""http://duckduckgo.com/Doctor_Who_(film)"",
               ""Text"" : ""Doctor Who (film), the television movie starring Paul McGann, based on the television series""
            },
            {
               ""Result"" : ""Dr. Who (Dalek films), the human character played by Peter Cushing in two films based on the television series"",
               ""Icon"" : {
                  ""URL"" : ""https://i.duckduckgo.com/i/9f10647e.jpg"",
                  ""Height"" : """",
                  ""Width"" : """"
               },
               ""FirstURL"" : ""http://duckduckgo.com/Dr._Who_(Dalek_films)"",
               ""Text"" : ""Dr. Who (Dalek films), the human character played by Peter Cushing in two films based on the television series""
            },
            {
               ""Result"" : ""Doctor Who (pinball), pinball machine based on the television series"",
               ""Icon"" : {
                  ""URL"" : ""https://i.duckduckgo.com/i/eee6de34.jpg"",
                  ""Height"" : """",
                  ""Width"" : """"
               },
               ""FirstURL"" : ""http://duckduckgo.com/Doctor_Who_(pinball)"",
               ""Text"" : ""Doctor Who (pinball), pinball machine based on the television series""
            },
            {
               ""Result"" : ""Doctor Who theme music, the theme music created for the television series, and has changed many times over the 50 years it has been running."",
               ""Icon"" : {
                  ""URL"" : """",
                  ""Height"" : """",
                  ""Width"" : """"
               },
               ""FirstURL"" : ""http://duckduckgo.com/Doctor_Who_theme_music"",
               ""Text"" : ""Doctor Who theme music, the theme music created for the television series, and has changed many times over the 50 years it has been running.""
            },
            {
               ""Result"" : ""\""Doctor Who\"" (CSI), the 22nd episode of the 10th season of CSI: Crime Scene Investigation"",
               ""Icon"" : {
                  ""URL"" : """",
                  ""Height"" : """",
                  ""Width"" : """"
               },
               ""FirstURL"" : ""http://duckduckgo.com/Doctor_Who_(CSI)"",
               ""Text"" : ""\""Doctor Who\"" (CSI), the 22nd episode of the 10th season of CSI: Crime Scene Investigation""
            }
         ],
         ""Name"" : ""In media and entertainment""
      },
      {
         ""Topics"" : [
            {
               ""Result"" : ""Neoregelia 'Dr. Who', a hybrid cultivar of the genus Neoregelia in the Bromeliad family"",
               ""Icon"" : {
                  ""URL"" : """",
                  ""Height"" : """",
                  ""Width"" : """"
               },
               ""FirstURL"" : ""http://duckduckgo.com/Neoregelia_'Dr._Who'"",
               ""Text"" : ""Neoregelia 'Dr. Who', a hybrid cultivar of the genus Neoregelia in the Bromeliad family""
            }
         ],
         ""Name"" : ""In other uses""
      }
   ]
}
",4605
99,20156775,json.Unmarshal,14
100,20247599,dev_appserver.py app.yaml,25
101,20247599,"$ dev_appserver.py app.yaml                                                                                                   
INFO     2013-11-27 17:14:13,250 sdk_update_checker.py:245] Checking for updates to the SDK.
INFO     2013-11-27 17:14:13,446 sdk_update_checker.py:273] The SDK is up to date.
WARNING  2013-11-27 17:14:13,455 api_server.py:331] Could not initialize images API; you are likely missing the Python ""PIL"" module.
INFO     2013-11-27 17:14:13,460 api_server.py:138] Starting API server at: http://localhost:42131
INFO     2013-11-27 17:14:13,532 dispatcher.py:171] Starting module ""default"" running at: http://localhost:8080
INFO     2013-11-27 17:14:13,535 admin_server.py:117] Starting admin server at: http://localhost:8000
ERROR    2013-11-27 17:14:16,293 go_runtime.py:166] Failed to build Go application: 
2013/11/27 17:14:16 go-app-builder: build timing: 10×6g (2.35416362s total), 18×gopack (104.629743ms total), 0×6l (0 total)
2013/11/27 17:14:16 go-app-builder: failed running 6g: signal: killed


(Executed command: /home/ubuntu/bin/go_appengine/goroot/bin/go-app-builder -app_base /home/ubuntu/mygo/src/github.com/mjibson/goread -arch 6 -binary_name _go_app -dynamic -extra_import$
 appengine_internal/init -goroot /home/ubuntu/bin/go_appengine/goroot -nobuild_files ^^$ -unsafe -work_dir /tmp/tmpJex0GQappengine-go-bin -gcflags -I,/home/ubuntu/bin/go_appengine/goroo
t/pkg/linux_amd64_appengine -ldflags -L,/home/ubuntu/bin/go_appengine/goroot/pkg/linux_amd64_appengine -gopath /home/ubuntu/mygo sanitizer/sanitize.go rdf/rdf.go rss/rss.go types.go fun
cs.go utils.go settings.go atom/atom.go sanitizer/strip.go main.go admin.go charge.go user.go autodiscover.go sanitizer/snip.go tasks.go)
^CINFO     2013-11-27 17:14:18,348 shutdown.py:44] Shutting down.
INFO     2013-11-27 17:14:18,375 api_server.py:524] Applying all pending transactions and saving the datastore
INFO     2013-11-27 17:14:18,375 api_server.py:527] Saving search indexes
",1980
102,20247599," 17 package sanitizer
 18 
 19 import (
 20         ""bytes""
 21         ""code.google.com/p/go.net/html""
 22         ""io""
 23         ""net/url""
 24         ""strings""
 25 )
",171
103,20247599,"$ goapp env
GOARCH=""amd64""
GOBIN=""""
GOCHAR=""6""
GOEXE=""""
GOHOSTARCH=""amd64""
GOHOSTOS=""linux""
GOOS=""linux""
GOPATH=""/home/ubuntu/mygo""
GORACE=""""
GOROOT=""/home/ubuntu/bin/go_appengine/goroot""
GOTOOLDIR=""/home/ubuntu/bin/go_appengine/goroot/pkg/tool/linux_amd64""
CC=""gcc""
GOGCCFLAGS=""-g -O2 -fPIC -m64 -pthread""
CGO_ENABLED=""1""

$ ll ~/bin/
Nov 27 14:34 appcfg.py -> go_appengine/appcfg.py*
Nov 27 14:34 dev_appserver.py -> go_appengine/dev_appserver.py*
Nov 18 01:36 go_appengine/
Nov 27 14:35 goapp -> go_appengine/goapp*

/home/ubuntu/mygo/pkg/
└── linux_amd64_appengine
    └── code.google.com
        └── p
            └── go.net
                ├── html
                │   └── atom.a
                └── html.a
/home/ubuntu/mygo/src/
├── code.google.com
│   └── p
│       ├── go-charset
│       │   ├── charset
│       │   ├── cmd
│       │   ├── data
│       │   ├── datafiles
│       │   └── lib
│       └── go.net
│           ├── dict
│           ├── html
│           ├── idna
│           ├── ipv4
│           ├── ipv6
│           ├── netutil
│           ├── proxy
│           ├── publicsuffix
│           ├── spdy
│           └── websocket
└── github.com
    ├── gorilla
    │   ├── context
    │   └── mux
    ├── MiniProfiler
    │   └── go
    │       ├── example
    │       ├── miniprofiler
    │       ├── miniprofiler_gae
    │       ├── miniprofiler_revel
    │       ├── redis
    │       ├── sql
    │       └── ui
    └── mjibson
        ├── appstats
        │   └── static
        ├── goon
        └── goread
            ├── atom
            ├── rdf
            ├── rss
            ├── sanitizer
            ├── static
            └── templates
",2103
104,20247599,linux_amd64-1.8.8,17
105,20247599,"Now I am getting 
ERROR    2013-11-28 02:11:38,201 go_runtime.py:166] Failed to build Go application: /home/ubuntu/mygo/src/github.com/MiniProfiler/go/miniprofiler/static.go:19263: out of memory
",195
106,20247599,htop,4
107,20247599," VIRT   RES   SHR S CPU% MEM%   TIME+  Command
1492M 88588  5804 S  0.0  1.5  0:14.72 python /home/XXXX/bin/dev_appserver.py app.yaml
",134
108,20655702,"    package main

import (
    ""crypto""
    ""crypto/rand""
    ""crypto/rsa""
    ""crypto/sha256""
    ""crypto/x509""
    ""encoding/base64""
    ""encoding/pem""
    ""errors""
    ""fmt""
    ""io/ioutil""
)

func main() {
    signer, err := loadPrivateKey(""private.pem"");
    if err != nil {
        fmt.Errorf(""signer is damaged: %v"", err)
    }

    toSign := ""date: Thu, 05 Jan 2012 21:31:40 GMT"";

    signed, err := signer.Sign([]byte(toSign))
    if err != nil {
        fmt.Errorf(""could not sign request: %v"", err)
    }
    sig := base64.StdEncoding.EncodeToString(signed)
    fmt.Printf(""Encoded: %v\n"", sig)


    parser, perr := loadPublicKey(""public.pem"");
    if perr != nil {
        fmt.Errorf(""could not sign request: %v"", err)
    }
    unsigned, err := parser.Unsign(signed);
     if err != nil {
        fmt.Errorf(""could not sign request: %v"", err)
    }

    fmt.Printf(""Decrypted: %v\n"", base64.StdEncoding.EncodeToString(unsigned))    
}


// loadPrivateKey loads an parses a PEM encoded private key file.
func loadPublicKey(path string) (Unsigner, error) {
        data, err := ioutil.ReadFile(path)

        if err != nil {
                return nil, err
        }
        return parsePublicKey(data)
}

// parsePublicKey parses a PEM encoded private key.
func parsePublicKey(pemBytes []byte) (Unsigner, error) {
        block, _ := pem.Decode(pemBytes)
        if block == nil {
                return nil, errors.New(""ssh: no key found"")
        }

        var rawkey interface{}
        switch block.Type {
        case ""PUBLIC KEY"":
                rsa, err := x509.ParsePKIXPublicKey(block.Bytes)
                if err != nil {
                        return nil, err
                }
                rawkey = rsa
        default:
                return nil, fmt.Errorf(""ssh: unsupported key type %q"", block.Type)
        }

        return newUnsignerFromKey(rawkey)
}


// loadPrivateKey loads an parses a PEM encoded private key file.
func loadPrivateKey(path string) (Signer, error) {
        data, err := ioutil.ReadFile(path)
        if err != nil {
                return nil, err
        }
        return parsePrivateKey(data)
}

// parsePublicKey parses a PEM encoded private key.
func parsePrivateKey(pemBytes []byte) (Signer, error) {
        block, _ := pem.Decode(pemBytes)
        if block == nil {
                return nil, errors.New(""ssh: no key found"")
        }

        var rawkey interface{}
        switch block.Type {
        case ""RSA PRIVATE KEY"":
                rsa, err := x509.ParsePKCS1PrivateKey(block.Bytes)
                if err != nil {
                        return nil, err
                }
                rawkey = rsa
        default:
                return nil, fmt.Errorf(""ssh: unsupported key type %q"", block.Type)
        }
        return newSignerFromKey(rawkey)
}

// A Signer is can create signatures that verify against a public key.
type Signer interface {
        // Sign returns raw signature for the given data. This method
        // will apply the hash specified for the keytype to the data.
        Sign(data []byte) ([]byte, error)
}

// A Signer is can create signatures that verify against a public key.
type Unsigner interface {
        // Sign returns raw signature for the given data. This method
        // will apply the hash specified for the keytype to the data.
        Unsign(data []byte) ([]byte, error)
}

func newSignerFromKey(k interface{}) (Signer, error) {
        var sshKey Signer
        switch t := k.(type) {
        case *rsa.PrivateKey:
                sshKey = &rsaPrivateKey{t}
        default: 
                return nil, fmt.Errorf(""ssh: unsupported key type %T"", k)
        }
        return sshKey, nil
}

func newUnsignerFromKey(k interface{}) (Unsigner, error) {
        var sshKey Unsigner
        switch t := k.(type) {
        case *rsa.PublicKey:
                sshKey = &rsaPublicKey{t}
        default:
                return nil, fmt.Errorf(""ssh: unsupported key type %T"", k)
        }
        return sshKey, nil
}

type rsaPublicKey struct {
    *rsa.PublicKey
}

type rsaPrivateKey struct {
        *rsa.PrivateKey
}

// Sign signs data with rsa-sha256
func (r *rsaPrivateKey) Sign(data []byte) ([]byte, error) {
        h := sha256.New()
        h.Write(data)
        d := h.Sum(nil)
        return rsa.SignPKCS1v15(rand.Reader, r.PrivateKey, crypto.SHA256, d)
}

// Unsign encrypts data with rsa-sha256
func (r *rsaPublicKey) Unsign(message []byte) ([]byte, error) {  
        return rsa.EncryptPKCS1v15(rand.Reader, r.PublicKey, message)        
}
",4573
109,20655702,"-----BEGIN RSA PRIVATE KEY-----
MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF
NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F
UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB
AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA
QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK
kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg
f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u
412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc
mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7
kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA
gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW
G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI
7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==
-----END RSA PRIVATE KEY-----
",891
110,20655702,"-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCFENGw33yGihy92pDjZQhl0C3
6rPJj+CvfSC8+q28hxA161QFNUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6
Z4UMR7EOcpfdUE9Hf3m/hs+FUR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJw
oYi+1hqp1fIekaxsyQIDAQAB
-----END PUBLIC KEY-----
",272
111,20768452,keep_keys=True,14
112,20768452,"class ModelB(ndb.Model):
    msg_id = ndb.StringProperty(indexed=False)
    cat_ids = ndb.StringProperty(repeated=True, indexed=False)
    list_ids = ndb.StringProperty(repeated=True, indexed=False)
    default_list_id_index = ndb.IntegerProperty(indexed=False)

class ModelA(ndb.Model):
    date_join = ndb.DateTimeProperty(auto_now_add=True)
    name = ndb.StringProperty()
    owner_salutation = ndb.StringProperty(indexed=False)
    owner_email_address = ndb.StringProperty()
    logo_url = ndb.StringProperty(indexed=False)
    ...
    messages = ndb.LocalStructuredProperty(ModelB, name='bm', repeated=True, keep_keys=True)
",630
113,20768452,put(),5
114,20768452,"type ModelB struct {
    MessageID          string   `datastore:""msg_id,noindex""`
    CategoryIDs        []string `datastore:""cat_ids,noindex""`
    ListIDs            []string `datastore:""list_ids,noindex""`
    DefaultListIDIndex int      `datastore:""default_list_id_index,noindex""`
}

type ModelA struct {
    DateJoin          time.Time `datastore:""date_join,""`
    Name              string    `datastore:""name,""`
    OwnerSalutation   string    `datastore:""owner_salutation,noindex""`
    OwnerEmailAddress string    `datastore:""owner_email_address,""`
    LogoURL           string    `datastore:""logo_url,noindex""`
    Messages          []ModelB  `datastore:""-""`
}

// Load is implemented for the PropertyLoaderSaver interface.
func (s *ModelA) Load(c <-chan datastore.Property) (err error) {
    f := make(chan datastore.Property, 32)
    errc := make(chan error, 1)
    defer func() {
        if err == nil {
            err = <-errc
        }
    }()
    go func() {
        defer close(f)
        for p := range c {
            if p.Name == ""bm"" {
                var b ModelB
                err := loadLocalStructuredProperty(&b, []byte(p.Value.(string)))
                if err != nil {
                    errc <- err
                    return
                }
                s.Messages = append(s.Messages, b)
            } else {
                f <- p
            }
        }
        errc <- nil
    }()
    return datastore.LoadStruct(s, f)
}
",1460
115,20768452,appengine/datastore,19
116,20768452,Reference,9
117,20768452,loadEntity,10
118,20768452,"import (    
    ""errors""    
    ""time""    

    ""appengine""    
    ""appengine/datastore""        

    pb ""appengine_internal/datastore""    
    proto ""code.google.com/p/goprotobuf/proto""    
)    

func loadLocalStructuredProperty(dst interface{}, raw_proto []byte) error {    
    var val pb.EntityProto    
    err := proto.Unmarshal(raw_proto, &val)    
    if err != nil {    
        return err    
    }    
    return loadEntity(dst, &val)    
}

//Copied from appengine/datastore since its not exported

// loadEntity loads an EntityProto into PropertyLoadSaver or struct pointer.
func loadEntity(dst interface{}, src *pb.EntityProto) (err error) {
c := make(chan datastore.Property, 32)
 errc := make(chan error, 1)
 defer func() {
    if err == nil {
            err = <-errc
        }
    }()
    go protoToProperties(c, errc, src)
    if e, ok := dst.(datastore.PropertyLoadSaver); ok {
        return e.Load(c)
    }
    return datastore.LoadStruct(dst, c)
}

func protoToProperties(dst chan<- datastore.Property, errc chan<- error, src *pb.EntityProto) {
    defer close(dst)
    props, rawProps := src.Property, src.RawProperty
    for {
        var (
            x       *pb.Property
            noIndex bool
        )
        if len(props) > 0 {
            x, props = props[0], props[1:]
        } else if len(rawProps) > 0 {
            x, rawProps = rawProps[0], rawProps[1:]
            noIndex = true
        } else {
            break
        }

        var value interface{}
        if x.Meaning != nil && *x.Meaning == pb.Property_INDEX_VALUE {
            value = indexValue{x.Value}
        } else {
            var err error
            value, err = propValue(x.Value, x.GetMeaning())
            if err != nil {
                errc <- err
                return
            }
        }
        dst <- datastore.Property{
            Name:     x.GetName(),
            Value:    value,
            NoIndex:  noIndex,
            Multiple: x.GetMultiple(),
        }
    }
    errc <- nil
}

func fromUnixMicro(t int64) time.Time {
    return time.Unix(t/1e6, (t%1e6)*1e3)
}

// propValue returns a Go value that combines the raw PropertyValue with a
// meaning. For example, an Int64Value with GD_WHEN becomes a time.Time.
func propValue(v *pb.PropertyValue, m pb.Property_Meaning) (interface{}, error) {
    switch {
    case v.Int64Value != nil:
        if m == pb.Property_GD_WHEN {
            return fromUnixMicro(*v.Int64Value), nil
        } else {
            return *v.Int64Value, nil
        }
    case v.BooleanValue != nil:
        return *v.BooleanValue, nil
    case v.StringValue != nil:
        if m == pb.Property_BLOB {
            return []byte(*v.StringValue), nil
        } else if m == pb.Property_BLOBKEY {
            return appengine.BlobKey(*v.StringValue), nil
        } else {
            return *v.StringValue, nil
        }
    case v.DoubleValue != nil:
        return *v.DoubleValue, nil
    case v.Referencevalue != nil:
        return nil, errors.New(""Not Implemented!"")
    }
    return nil, nil
}

// indexValue is a Property value that is created when entities are loaded from
// an index, such as from a projection query.
//
// Such Property values do not contain all of the metadata required to be
// faithfully represented as a Go value, and are instead represented as an
// opaque indexValue. Load the properties into a concrete struct type (e.g. by
// passing a struct pointer to Iterator.Next) to reconstruct actual Go values
// of type int, string, time.Time, etc.
type indexValue struct {
    value *pb.PropertyValue
}
",3596
119,21010854,"rendering for the  0  time
rendering for the  1  time
rendering for the  2  time
rendering for the  3  time
rendering for the  4  time
rendering for the  5  time
rendering for the  6  time
SIGSEGV: segmentation violation
PC=0x7fdab95a0e29
signal arrived during cgo execution

runtime.cgocall(0x414f90, 0x7fdab9887e88)
    /usr/lib/go/src/pkg/runtime/cgocall.c:149 +0x11b fp=0x7fdab9887e70
github.com/go-gl/gl._Cfunc_glClear(0xc200004100)
    github.com/go-gl/gl/_obj/_cgo_defun.c:340 +0x31 fp=0x7fdab9887e88
github.com/go-gl/gl.Clear(0x4100)
    /mnt/data/Dropbox/Coding/Go/src/github.com/go-gl/gl/gl.go:161 +0x25 fp=0x7fdab9887e98
main.draw()
    /home/josh/Coding/Go/src/github.com/JoshWillik/Wander/wander.go:120 +0x25 fp=0x7fdab9887eb8
main.main()
    /home/josh/Coding/Go/src/github.com/JoshWillik/Wander/wander.go:52 +0x300 fp=0x7fdab9887f48
runtime.main()
    /usr/lib/go/src/pkg/runtime/proc.c:220 +0x11f fp=0x7fdab9887fa0
runtime.goexit()
    /usr/lib/go/src/pkg/runtime/proc.c:1394 fp=0x7fdab9887fa8

goroutine 3 [syscall]:
runtime.goexit()
    /usr/lib/go/src/pkg/runtime/proc.c:1394

rax     0x0
rbx     0x7fdab9887e88
rcx     0x7fdab9887e88
rdx     0x7fdab9887e20
rdi     0x4100
rsi     0xc210001900
rbp     0xc21002a000
rsp     0x7fdab2a4ddd8
r8      0xc210001120
r9      0x7fdab9887e20
r10     0x0
r11     0x286
r12     0x0
r13     0x7fdab9a74000
r14     0x0
r15     0x7fdab2a4e700
rip     0x7fdab95a0e29
rflags  0x10202
cs      0x33
fs      0x0
gs      0x0
",1473
120,21010854,shouldRender,12
121,21010854,gl.Clear(),10
122,21010854,draw,4
123,21010854,fmt.Println(),13
124,21010854,shouldRender,12
125,21010854,fmt.Println(),13
126,21010854,Println(),9
127,21010854,"package main

import (
    f ""fmt""
    ""github.com/go-gl/gl""
    glfw ""github.com/go-gl/glfw3""
    ""math""
    ""time""
)

var (
    numRendered = 0
    lastDraw = time.Now()
    fps = 60
    seconds = time.Now()
    attr gl.AttribLocation
)

func main(){
    if !glfw.Init(){
        f.Println(""Failed to init glfw"")
        panic(""Cannot initialize glfw library"")
    }
    defer glfw.Terminate()

    //glfw.WindowHint(glfw.DepthBits, 16)
    window, err := glfw.CreateWindow(300, 300, ""Wander"", nil, nil)
    if err != nil{
        panic(err)
    }

    window.SetFramebufferSizeCallback(reshape)
    window.SetKeyCallback(key)
    window.MakeContextCurrent()
    glfw.SwapInterval(1)
    width, height := window.GetFramebufferSize()
    reshape(window, width, height)

    if gl.Init() != 0 {
        panic(""Failed to init GL"")
    }

    prog := setupProgram()
    defer prog.Delete()
    prog.Use()

    attr = prog.GetAttribLocation(""offset"")

    setup()
    for !window.ShouldClose() {
        if shouldRender(){
            draw()
        }
        animate()
        window.SwapBuffers()
        glfw.PollEvents()
    }
}
func setupProgram()(prog gl.Program){
    vertexSource := `
        #version 430 core

        layout (location = 0) in vec4 offset;

        const vec4 vertecies[3] = vec4[3](
            vec4(0.25, 0.5, 0.5, 1.0),
            vec4(-0.25, 0.5, 0.5, 1.0),
            vec4(-0.25, -0.5, 0.5, 1.0)
        );

        void main(){
            gl_Position = vertecies[gl_VertexID] + offset;
        }`
    fragmentSource := `
        #version 430 core

        out vec4 color;

        void main(){
            color = vec4(1.0, 0.0, 0.0, 0.0); // red, blue, green, ??
        }`
    vert, frag := gl.CreateShader(gl.VERTEX_SHADER), gl.CreateShader(gl.FRAGMENT_SHADER)
    defer vert.Delete()
    defer frag.Delete()
    vert.Source(vertexSource)
    frag.Source(fragmentSource)
    vert.Compile()
    frag.Compile()

    prog = gl.CreateProgram()
    prog.AttachShader(vert)
    prog.AttachShader(frag)
    prog.Link()
    prog.Use()
    f.Println(prog.GetInfoLog())

    return
}

func key(window *glfw.Window, k glfw.Key, s int, action glfw.Action, mods glfw.ModifierKey) {
    if action != glfw.Press {
        return
    }

    switch glfw.Key(k){
        case glfw.KeyEscape:
            window.SetShouldClose(true);
        default:
            return
    }
}

func reshape(window *glfw.Window, width, height int){
    gl.Viewport(0, 0, width, height)
}
func draw(){
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
    gl.DrawArrays(gl.TRIANGLES, 0, 3)
}
func shouldRender() bool{
    if int(time.Since(lastDraw) * time.Second) >= 1000/fps{
        //f.Println(""rendering for the "", numRendered, "" time"")
        numRendered++
        lastDraw = time.Now()
        return true
    }

    return false;
}

func animate(){
    now := float64(time.Since(seconds))

    offset := [4]float32{
        float32(math.Sin(now)),
        float32(math.Cos(now)),
        0.0,0.0}
    attr.Attrib4fv(&offset)

    red := gl.GLclampf(math.Sin(now) * 0.25 + 0.75)
    blue := gl.GLclampf(math.Cos(now) * 0.25 + 0.75)
    green := gl.GLclampf(time.Since(seconds))
    _ = green;

    gl.ClearColor(red, blue, 0.2, 0.0)
}
",3248
128,21154561,a,1
129,21154561,a,1
130,21154561,[1 2 3 3],9
131,21154561,a[2],4
132,21154561,3,1
133,21154561,a,1
134,21154561,[1 3 3 3],9
135,21154561,a[3],4
136,21154561,3,1
137,21154561,for,3
138,21154561,i,1
139,21154561,"package main

import ""fmt""

func main() {
    a := []int{0, 1, 2, 3}
    for i := 0; i < len(a); {
        v := a[i]
        fmt.Printf(""i: %d v: %d\n"", i, v)
        fmt.Println(""before"", a)
        if v%2 == 0 {
            // delete a[i]
            a = append(a[:i], a[i+1:]...)
        } else {
            i++
        }
        fmt.Println(""after"", a, ""\n"")
    }
    fmt.Println(""final"", a)

}
",401
140,21154561,"i: 0 v: 0
before [0 1 2 3]
after [1 2 3]

i: 0 v: 1
before [1 2 3]
after [1 2 3]

i: 1 v: 2
before [1 2 3]
after

i: 1 v
before [1 3]                                                                                                                                                                                                                                                                   
after [1 3]                                                                                                                                                                                                                                                                    

final [1 3]
",1743
141,21154561,"package main

import ""fmt""

func main() {
    a := []int{0, 1, 2, 3}
    for i := len(a) - 1; i >= 0; i-- {
        v := a[i]
        fmt.Printf(""i: %d v: %d\n"", i, v)
        fmt.Println(""before"", a)
        if v%2 == 0 {
            // delete a[i]
            a = append(a[:i], a[i+1:]...)
        }
        fmt.Println(""after"", a, ""\n"")
    }
    fmt.Println(""final"", a)

}
",377
142,21154561,"i: 3 v: 3                                                                                                                                                                                                                                                                   
before [0 1 2 3]                                                                                                                                                                                                                                                               
after [0 1 2 3]                                                                                                                                                                                                                                                                 

i: 2 v: 2                                                                                                                                                                                                                                                                       
before [0 1 2 3]                                                                                                                                                                                                                                                               
after [0 1 3]                                                                                                                                                                                                                                                                   

i: 1 v: 1                                                                                                                                                                                                                                                                      
before [0 1 3]                                                                                                                                                                                                                                                                 
after [0 1 3]                                                                                                                                                                                                                                                                  

i: 0 v: 0                                                                                                                                                                                                                                                                      
before [0 1 3]                                                                                                                                                                                                                                                                 
after [1 3]                                                                                                                                                                                                                                                                    

final [1 3]
",3280
143,21696845,goyaml,6
144,21696845,subtitle.yaml,13
145,21696845,"line: 你好
",13
146,21696845,_,1
147,21696845,"package main                                                                                                                                                                                      

import (                                                                                                                                                                                          
    ""io/ioutil""                                                                                                                                                                                   
    //""unicode/utf8""                                                                                                                                                                              
    //""fmt""                                                                                                                                                                                       

    ""gopkg.in/yaml.v1""                                                                                                                                                                        
)                                                                                                                                                                                                 

type Subtitle struct {                                                                                                                                                                            
    Line string                                                                                                                                                                                   
}                                                                                                                                                                                                 

func main() {                                                                                                                                                                                     
    filename := ""subtitle.yaml""                                                                                                                                                                   
    in, _ := ioutil.ReadFile(filename)                                                                                                                                                            
    var subtitle Subtitle                                                                                                                                                                         
    _ = goyaml.Unmarshal(in, &subtitle)                                                                                                                                                           
    out, _ := goyaml.Marshal(&subtitle)                                                                                                                                                           

    //for len(out) > 0 { // For debugging, see what the runes are                                                                                                                                                                         
    //  r, size := utf8.DecodeRune(out)                                                                                                                                                             
    //  fmt.Printf(""%c "", r)                                                                                                                                                              
    //  out = out[size:]                                                                                                                                                                            
    //}                                                                                                                                                                                           

    _ = ioutil.WriteFile(filename, out, 0644)                                                                                                                                                     
}
",4330
148,21696845,subtitle.yaml,13
149,21696845,"line: ""\u4F60\u597D""
",21
150,21696845,goyaml,6
151,21696845,out,3
152,21696845,你,3
153,21696845,"l i n e :   "" \ u 4 F 6 0 \ u 5 9 7 D ""
",40
154,21696845,out,3
155,21696845,subtitle.yaml,13
156,21696845,"line: ""你好""
",15
157,21696845,yaml_emitter_set_unicode,24
158,21696845,encode.go,9
159,21696845,"yaml_emitter_set_unicode(&e.emitter, true)",42
160,21730796,"package main

import (
    ""flag""
    ""fmt""
    ""github.com/fitstar/falcore""
    ""github.com/fitstar/falcore/filter""
    ""net/http""
    ""os""
    ""os/signal""
    ""syscall""
)

// Command line options
var (
    port = flag.Int(""port"", 8000, ""the port to listen on"")
    path = flag.String(""base"", ""./www"", ""the path to serve files from"")
)

// very simple request filter
func Filter(req *falcore.Request) *http.Response {
    pid := syscall.Getpid()
    fmt.Println(pid, ""GET"", req.HttpRequest.URL.Path)

    // return falcore.StringResponse(request.HttpRequest, 200, nil, ""OK\n"")
    if req.HttpRequest.URL.Path == ""/"" {
        req.HttpRequest.URL.Path = ""AppNexus-Interesting.txt"" //""/summary.xml""
    }
    return nil
}

// flag to accept a socket file descriptor
var socketFd = flag.Int(""socket"", -1, ""Socket file descriptor"")

func main() {
    pid := syscall.Getpid()
    flag.Parse()
    fmt.Println(""Falcore hot restart running with pid:"", pid, ""to hot restart, issue the kill -1"", pid, ""command"")

    // create the pipeline
    pipeline := falcore.NewPipeline()

    // upstream filters
    pipeline.Upstream.PushBack(falcore.NewRequestFilter(Filter))

    // Serve files
    pipeline.Upstream.PushBack(&filter.FileFilter{
        BasePath: *path,
    })

    // downstream filters
    pipeline.Downstream.PushBack(filter.NewCompressionFilter(nil))

    // create the server with the pipeline
    srv := falcore.NewServer(*port, pipeline)

    // if passed the socket file descriptor, setup the listener that way
    // if you don't have it, the default is to create the socket listener
    // with the data passed to falcore.NewServer above (happens in ListenAndServer())
    if *socketFd != -1 {
        // I know I'm a child process if I get here so I can signal the parent when I'm ready to take over
        go childReady(srv)
        fmt.Printf(""%v Got socket FD: %v\n"", pid, *socketFd)
        srv.FdListen(*socketFd)
    }

    // using signals to manage the restart lifecycle
    go handleSignals(srv)

    // start the server
    // this is normally blocking forever unless you send lifecycle commands
    if err := srv.ListenAndServe(); err != nil {
        fmt.Printf(""%v Could not start server: %v"", pid, err)
    }
    fmt.Printf(""%v Exiting now\n"", pid)
}

// blocks on the server ready and when ready, it sends
// a signal to the parent so that it knows it cna now exit
func childReady(srv *falcore.Server) {
    pid := syscall.Getpid()
    // wait for the ready signal
    <-srv.AcceptReady
    // grab the parent and send a signal that the child is ready
    parent := syscall.Getppid()
    fmt.Printf(""%v Kill parent %v with SIGUSR1\n"", pid, parent)
    syscall.Kill(parent, syscall.SIGUSR1)
}

// setup and fork/exec myself. Make sure to keep open important FD's that won't get re-created by the child
// specifically, std* and your listen socket
func forker(srv *falcore.Server) (pid int, err error) {
    fmt.Printf(""Forking now with socket: %v\n"", srv.SocketFd())
    mypath := os.Args[0]
    args := []string{mypath, ""-socket"", fmt.Sprintf(""%v"", srv.SocketFd())}
    attr := new(syscall.ProcAttr)
    attr.Files = append([]uintptr(nil), 0, 1, 2, uintptr(srv.SocketFd()))
    pid, err = syscall.ForkExec(mypath, args, attr)
    return
}

// Handle lifecycle events
func handleSignals(srv *falcore.Server) {
    var sig os.Signal
    var sigChan = make(chan os.Signal)
    signal.Notify(sigChan, syscall.SIGHUP, syscall.SIGUSR1, syscall.SIGINT, syscall.SIGTERM, syscall.SIGTSTP)
    pid := syscall.Getpid()
    for {
        sig = <-sigChan
        switch sig {
        case syscall.SIGHUP:
            // send this to the paraent process to initiate the restart
            fmt.Println(pid, ""Received SIGHUP.  forking."")
            cpid, err := forker(srv)
            fmt.Println(pid, ""Forked pid:"", cpid, ""errno:"", err)
        case syscall.SIGUSR1:
            // child sends this back to the parent when it's ready to Accept
            fmt.Println(pid, ""Received SIGUSR1.  Stopping accept."")
            srv.StopAccepting()
        case syscall.SIGINT:
            fmt.Println(pid, ""Received SIGINT.  Shutting down."")
            os.Exit(0)
        case syscall.SIGTERM:
            fmt.Println(pid, ""Received SIGTERM.  Terminating."")
            os.Exit(0)
        case syscall.SIGTSTP:
            fmt.Println(pid, ""Received SIGTSTP.  Stopping."")
            syscall.Kill(pid, syscall.SIGSTOP)
        default:
            fmt.Println(pid, ""Received"", sig, "": ignoring"")
        }
    }
}
",4528
161,21830447,"    package main

    import (
        ""encoding/json""

    )

    type LocationReadable struct {
        District string
        City     string
        State    string
    }

    type Locale struct {
        Location         string
        CountryCode      string
        CurrencyId       string
        CurrencySymbol   string
        LocationReadable LocationReadable
    }

    type Media struct {
        Image string
        Video string
    }

    type Variations struct {
        FixedPrice float64
        Media      Media
        Quantity   int
    }

    type PaymentData struct {
        PaymentName    string
        PaymentService string
    }

    type Payment struct {
        Online  PaymentData
        Offline PaymentData
    }

    type Shipping struct {
        ShippingService        string
        ShippingName           string
        ShippingCost           float64
        HandlingTimeMax        int
        DispatchTimeMin        int
        DispatchTimeMax        int
        ShippingAdditionalCost int
    }
    type Item []struct {
        _version    string
        CategoryId  string
        Title       string
        Media       Media
        SellerId    string
        Locale      Locale
        ListingType string
        Payment     Payment
        StartTime   string
        EndTime     string
        Shipping    Shipping
        TitleSlug   string
        Variations  Variations
        _fpaiStatus string
    }
    func main(){
     itemInfoR := `{""locale"":{""location"":""51.51121389999999,-0.11982439999997041"",""countryCode"":""GB"",""currencyId"":""GBP"",""currencySymbol"":""Â£"",""locationReadable"":{""district"":""City of Westminster"",""city"":""London"",""state"":""Greater London""}},""_version"":""serving"",""categoryId"":[""Root"",""Cameras \u0026 Photo"",""Digital Cameras""],""title"":""many pictures"",""media"":{""image"":[""//lh5.ggpht.com/O_o_N6CFkClY5AV0-LqntpyFjor7Of4u23ZcK7lYwc2uY1ea7GWi61VDJZCB7UCb79svkjKPHIenqwEUhjHi0jdIQnnl6z_p03yktPUB1FBHezIQ"",""//lh6.ggpht.com/ih3q2d7CenGLPyupH9FpfsoJQWQpw1i8wWA2Kd26bFnSF2fbnKyGU9WePIhCgEeqw5p6YMVmFi1c9oS0Ag93aF_oZ3ZiwK7fQuSYIrZ9VhgXbrTHkw"",""//lh6.ggpht.com/7RJRsapsnwWL3_KiLIjMz4QojDzUvsztXtvKTFvIfde_AHccDnOibAvXRN73tTB4SeHzlj8S1LWxbYwwWFGn9elfCKdSb8BUIU5QJY1LO791HutQ"",""//lh6.ggpht.com/qAtjgyHAB734Ox_4NC_fa-ZRqrCjCmJu0Tp8bo-HMO88duv8l4hhuv2REBkB--yneFzOL7annecVlGty-YsKouondiOFVnAZWzjpdrfsGfbL6wh2"",""//lh3.ggpht.com/dWUbASepwHF4lHaXIPnpv4BNm2pCml9MlJt7s86s1cpu-PsYNmS0yQmKFKTM38q_oMLW_YJMJ19civ2gVViKAGYcZylRW7jN3w77AJvhzS6JE2g"",""//lh6.ggpht.com/9aXLmPRVeZnxkwvNb3mWTF8kvfEY_lho_lOVVc9AbNqLb8GQmiS_XXVZ3OKqMv2pxgYSayMYPPRh6ACYyh0H8KtS8mPD6MKUkEajwxkTtp5Q4Lo"",""//lh3.ggpht.com/FG_QXZPHJ2tTYwI_t5Fg1KqivglVg9RlJn0JRsu9Ox8vJ7IcBirb2IV_I1LL_WVOMxfTuBBSDLMlrw9v0MCAdmnPCR29sCbRGjhm6zEfIH-3q2QSdw"",""//lh4.ggpht.com/Y23DqORrVkM2m55f-rq5_BBrlkvQg4uX7AsAt-ixhMobjK_SFgFaDfktgLhkNsyKwSr9HcF8iiGY3Nw0xOKXG1sn6wyAWg_qsolmKjVOrM5V5mIR"",""//lh6.ggpht.com/mQ62Ly-DjMKPMzU1OcSPJ7SLBqym0uBjawlkTHfmb-HOKaD56dnitk1duwPFJVdbi0GUpd63RQvr2VMpHp6S1OQ3di-hq4-JPeRoS5FJzksXSvW_"",""//lh3.ggpht.com/dqWjWPcNsvlR1tMC_agizX19f9MDiNGWFYTYVn4kjJxzIIkEe0mLzNcvS62zVJxAOaitT-IgaUfZ-Ze23BgzbqYY-l600i_LbVe35Uinz6sXIyoB"",""//lh6.ggpht.com/xhSdFc9uHgghs_6gf3seUWYM-PG2oLmjTrpF7ptEEMqaIrQIa8VPfC6tXE7f3M13eZvDXYqMW_k0AHO5vwCEPNp-iObixskd_lBaKNfz3MH3SNQ"",""//lh5.ggpht.com/kYeoKPoZGJCow-G1FhnD8kzVjNjbQA8-Kyj8eAh0HL-fMZX9tTeFPQikTZdSU0kks4-5Ui54cZF2CjGut9vfMJAVDKIq3T-bAQewCxvfl2120tH5zQ"",""//lh5.ggpht.com/4qUl3d-G9EPBzcYKrimNsWhQw7CmONV0jgfVhxFgB9mEU_QLRCyNJTWs2A3xf6wc7AUF2DXrKEkoX-SNLMZ6s-O4aXXV9WOjOPcWdAYreMRBld0E"",""//lh5.ggpht.com/z-0C4G6EWYkelAF1LjPfl_UQcsp92H4joIPt8NfsOl0nPJ2VpzZYahWadKqTLfl6kq3C6aDBcwfGQyMWSozYoZIAOAW0yRvZrwxia321PlsKTxbZ"",""//lh4.ggpht.com/U7I12JrDYmMC_pUXpw8DVBjBilU67BvbM8qT8gJE0bQfkhHo7FOdMttiz3syP5IR-LyO4J1WBlfmZjvMjRr4GIBt4o3Vqp-hKz7q2_OGwGtsN5s"",""//lh3.ggpht.com/fF2XWEtqG23ybhzClhC_p8gvKJalf1vg7k3H7UkuAaIVubil7EgOvJUCwAZk2KiCtlPYp1E5Ep2xaxZjJRmg5EFSEAjqlMHJS_Wd1Bcje6xre4s"",""//lh3.ggpht.com/jgOebMihBoIZvHE4EOklJvZ_k-9egjNIlUKfKFcLkvXJs8g2FXjPvdFUbwqGrkHrMtyis8uOvgt-E51Vm11hq4bieh7h0cegca0VI4vFtFaAemU"",""//lh3.ggpht.com/MOrI-zKNMNrQE_aHj5hzbojP3T0hEMJKK6K8UO3e1NBC-nkcQeIM1QnvtJdT_G-W4e7-qv4BiqwdWcNHBpZXOmmX3tcuYEV8u_ANEoa9_aUIfeyg"",""//lh6.ggpht.com/SyIS5sGOkTG7k_jFF14wzH9Evrblv6o4pHBI6z6X070-xhAeyut_kRO6xHtDID4KLcWFvItjQy-plPcJ6K1T9tlFOrtaryEPvuAYdMVx8e0TTw"",""//lh6.ggpht.com/2Pp9kLYFhDT3USwHinU5OxnzcWWOLI0nOWe29gOD5KMzyEcXoHkTN-AutJV9M8F_9eqAP379XB9O1d0BWPanhr-MguzKxfHeUvYTs6yHzDkxyfe0NA"",""//lh4.ggpht.com/7aofqklSkF3AMDfF19yqsA9J3EfEiKy1NdOelEGKNnW0Cv5tGEpq2PF_jZO1MVoBbrrmVVRv0Tdq7I8KyZbIlyHdbTs1jMl7dEFqVMvsPcyaORyHlQ"",""//lh4.ggpht.com/anYJHqkMCkuhmIHQTBspLtWcDTyx1ZRe84_q5pAgVEOVmsKkaKhS725N4YFoj2zpJrBP7iTC2vf1GUtrp6H7kkm8c1k6zkW6I_Gf5f9A3re_I8Ex"",""//lh3.ggpht.com/OtSw0rU-DvfoXgoWrQdkln6Kz7O14TF9qrPNJSGJnZLeDqUEctOn1DT09pdwwVpNQV-cXmVYQL-PX4XPhpZLWH1ciSkVT6WHNmTz1D9pHphBwJUv"",""//lh3.ggpht.com/cTCZnXPIjI-EO2bvQdLgeoSLOSlMFcv805n347Zyci9XDYUdcVDC_5H7SFVYDr4pC5HtQDYnrOHL6AinLW7hWtfSCLlvVhVUNQ-DlDn0NwZ-1iCO-g"",""//lh4.ggpht.com/i-mL_JcF9rwjQq6HnuKzuAHU41_UGxQ62IOPZvaDrATXaPFbhe-EbT7ZIpboyNA5PXRCsxNsZ9hu58edRvNs5ScgKN8Lg-00J2LhlwMAbdEsv7b0nw"",""//lh6.ggpht.com/D_YV2BG1WWwl67xNloP3sxzRkqhcVTgJi58L-A8nLrOcMR_tBqLz4fHEGQ-qiNcG_-32MNy3dlSPWrTBKzBcweJxgMnRVet5yuGfelUlwehDtXX_3w""],""video"":[]},""sellerId"":""mihai"",""listingType"":""fixedPrice"",""payment"":{""online"":[{""paymentName"":""PayPal"",""paymentService"":""paypal""}],""offline"":[{""paymentName"":""Pay on Pick-up"",""paymentService"":""payOnPickup""}]},""startTime"":""2014-01-04T10:02:18+00:00"",""endTime"":""2014-04-04T10:02:18+00:00"",""shipping"":[{""shippingService"":""economy"",""shippingName"":""Economy"",""shippingCost"":1.0,""handlingTimeMax"":4,""dispatchTimeMin"":1,""dispatchTimeMax"":10,""shippingAdditionalCost"":""2""},{""shippingService"":""localPickup"",""shippingName"":""Local Pick-Up"",""shippingCost"":0.0,""handlingTimeMax"":2,""dispatchTimeMin"":0,""dispatchTimeMax"":0,""shippingAdditionalCost"":""0""}],""titleSlug"":""many-pictures"",""variations"":[{""fixedPrice"":222999.0,""media"":{""image"":[""//lh6.ggpht.com/ih3q2d7CenGLPyupH9FpfsoJQWQpw1i8wWA2Kd26bFnSF2fbnKyGU9WePIhCgEeqw5p6YMVmFi1c9oS0Ag93aF_oZ3ZiwK7fQuSYIrZ9VhgXbrTHkw"",""//lh6.ggpht.com/9aXLmPRVeZnxkwvNb3mWTF8kvfEY_lho_lOVVc9AbNqLb8GQmiS_XXVZ3OKqMv2pxgYSayMYPPRh6ACYyh0H8KtS8mPD6MKUkEajwxkTtp5Q4Lo"",""//lh3.ggpht.com/FG_QXZPHJ2tTYwI_t5Fg1KqivglVg9RlJn0JRsu9Ox8vJ7IcBirb2IV_I1LL_WVOMxfTuBBSDLMlrw9v0MCAdmnPCR29sCbRGjhm6zEfIH-3q2QSdw""],""video"":[]},""quantity"":1121,""Brand"":""Bell \u0026 Howell""},{""fixedPrice"":211.0,""media"":{""image"":[""//lh6.ggpht.com/qAtjgyHAB734Ox_4NC_fa-ZRqrCjCmJu0Tp8bo-HMO88duv8l4hhuv2REBkB--yneFzOL7annecVlGty-YsKouondiOFVnAZWzjpdrfsGfbL6wh2"",""//lh3.ggpht.com/FG_QXZPHJ2tTYwI_t5Fg1KqivglVg9RlJn0JRsu9Ox8vJ7IcBirb2IV_I1LL_WVOMxfTuBBSDLMlrw9v0MCAdmnPCR29sCbRGjhm6zEfIH-3q2QSdw"",""//lh6.ggpht.com/9aXLmPRVeZnxkwvNb3mWTF8kvfEY_lho_lOVVc9AbNqLb8GQmiS_XXVZ3OKqMv2pxgYSayMYPPRh6ACYyh0H8KtS8mPD6MKUkEajwxkTtp5Q4Lo"",""//lh3.ggpht.com/MOrI-zKNMNrQE_aHj5hzbojP3T0hEMJKK6K8UO3e1NBC-nkcQeIM1QnvtJdT_G-W4e7-qv4BiqwdWcNHBpZXOmmX3tcuYEV8u_ANEoa9_aUIfeyg""],""video"":[]},""quantity"":2,""Brand"":""Fujifilm""},{""fixedPrice"":22.0,""media"":{""image"":[""//lh3.ggpht.com/jgOebMihBoIZvHE4EOklJvZ_k-9egjNIlUKfKFcLkvXJs8g2FXjPvdFUbwqGrkHrMtyis8uOvgt-E51Vm11hq4bieh7h0cegca0VI4vFtFaAemU"",""//lh3.ggpht.com/MOrI-zKNMNrQE_aHj5hzbojP3T0hEMJKK6K8UO3e1NBC-nkcQeIM1QnvtJdT_G-W4e7-qv4BiqwdWcNHBpZXOmmX3tcuYEV8u_ANEoa9_aUIfeyg"",""//lh4.ggpht.com/anYJHqkMCkuhmIHQTBspLtWcDTyx1ZRe84_q5pAgVEOVmsKkaKhS725N4YFoj2zpJrBP7iTC2vf1GUtrp6H7kkm8c1k6zkW6I_Gf5f9A3re_I8Ex""],""video"":[]},""quantity"":12,""Brand"":""Gateway""}],""_fpaiStatus"":""published""}`
    itemInfoBytes := []byte(itemInfoR)
var ItemInfo Item
        er := json.Unmarshal(itemInfoBytes, &ItemInfo)
            if er != nil {
                panic(er)
            }

        }
",7727
162,21865681,"    package main

import (
    ""crypto/md5""
    ""encoding/hex""
    ""fmt""
    ""github.com/gocql/gocql""
    ""github.com/gorilla/mux""
    ""github.com/gorilla/sessions""
    ""net/http""
    ""time""
)

var store = sessions.NewCookieStore([]byte(""something-very-secret""))

var router = mux.NewRouter()

func init() {

    store.Options = &sessions.Options{
        Domain:   ""localhost"",
        Path:     ""/"",
        MaxAge:   3600 * 1, // 1 hour
        HttpOnly: true,
    }
}
func main() {
    //session handling
    router.HandleFunc(""/"", SessionHandler)
    router.HandleFunc(""/signIn"", SignInHandler)
    router.HandleFunc(""/signUp"", SignUpHandler)
    router.HandleFunc(""/logOut"", LogOutHandler)
    http.Handle(""/"", router)
    http.ListenAndServe("":8100"", nil)
}

//handler for signIn
func SignInHandler(res http.ResponseWriter, req *http.Request) {

    email := req.FormValue(""email"")
    password := req.FormValue(""password"")

    //Generate hash of password
    hasher := md5.New()
    hasher.Write([]byte(password))
    encrypted_password := hex.EncodeToString(hasher.Sum(nil))

    //cassandra connection
    cluster := gocql.NewCluster(""localhost"")
    cluster.Keyspace = ""gbuy""
    cluster.DefaultPort = 9042
    cluster.Consistency = gocql.Quorum
    session, _ := cluster.CreateSession()
    defer session.Close()

    //select query
    var firstname string
    stmt := ""SELECT firstname FROM USER WHERE email= '"" + email + ""' and password ='"" + encrypted_password + ""';""
    err := session.Query(stmt).Scan(&firstname)
    if err != nil {
        fmt.Fprintf(res, ""failed"")
    } else {
        if firstname == """" {
            fmt.Fprintf(res, ""failed"")
        } else {
            fmt.Fprintf(res, firstname)
        }
    }

    //store in session variable
    sessionNew, _ := store.Get(req, ""loginSession"")

    // Set some session values.
    sessionNew.Values[""email""] = email
    sessionNew.Values[""name""] = firstname

    // Save it.
    sessionNew.Save(req, res)
    //store.Save(req,res,sessionNew)

    fmt.Println(""Session after logging:"")
    fmt.Println(sessionNew)

}

//handler for signUp
func SignUpHandler(res http.ResponseWriter, req *http.Request) {

    fName := req.FormValue(""fName"")
    lName := req.FormValue(""lName"")
    email := req.FormValue(""email"")
    password := req.FormValue(""passwd"")
    birthdate := req.FormValue(""date"")
    city := req.FormValue(""city"")
    gender := req.FormValue(""gender"")

    //Get current timestamp and format it.
    sysdate := time.Now().Format(""2006-01-02 15:04:05-0700"")

    //Generate hash of password
    hasher := md5.New()
    hasher.Write([]byte(password))
    encrypted_password := hex.EncodeToString(hasher.Sum(nil))

    //cassandra connection
    cluster := gocql.NewCluster(""localhost"")
    cluster.Keyspace = ""gbuy""
    cluster.DefaultPort = 9042
    cluster.Consistency = gocql.Quorum
    session, _ := cluster.CreateSession()
    defer session.Close()

    //Insert the data into the Table
    stmt := ""INSERT INTO USER (email,firstname,lastname,birthdate,city,gender,password,creation_date) VALUES ('"" + email + ""','"" + fName + ""','"" + lName + ""','"" + birthdate + ""','"" + city + ""','"" + gender + ""','"" + encrypted_password + ""','"" + sysdate + ""');""
    fmt.Println(stmt)
    err := session.Query(stmt).Exec()
    if err != nil {
        fmt.Fprintf(res, ""failed"")
    } else {
        fmt.Fprintf(res, fName)
    }
}

//handler for logOut
func LogOutHandler(res http.ResponseWriter, req *http.Request) {
    sessionOld, err := store.Get(req, ""loginSession"")

    fmt.Println(""Session in logout"")
    fmt.Println(sessionOld)
    if err = sessionOld.Save(req, res); err != nil {
        fmt.Println(""Error saving session: %v"", err)
    }
}

//handler for Session
func SessionHandler(res http.ResponseWriter, req *http.Request) {

    router.PathPrefix(""/"").Handler(http.FileServer(http.Dir(""../static/"")))
    session, _ := store.Get(req, ""loginSession"")

    fmt.Println(""Session in SessionHandler"")
    fmt.Println(session)


    if val, ok := session.Values[""email""].(string); ok {
        // if val is a string
        switch val {
        case """": {
            http.Redirect(res, req, ""html/login.html"", http.StatusFound) }
        default:
            http.Redirect(res, req, ""html/home.html"", http.StatusFound)
        }
    } else {
        // if val is not a string type
        http.Redirect(res, req, ""html/login.html"", http.StatusFound)
    }
}
",4451
163,21895743,"{
    ""Ability1"": ""Noxious Fumes"",
    ""AbilityId1"": 7812,
    ""AttackSpeed"": 0.86,
    ""Cons"": """",
    ""HP5PerLevel"": 0.47,
    ""Health"": 360,
    ""Speed"": 350,
    ""abilityDescription1"": {
      ""itemDescription"": {
        ""cooldown"": ""12s"",
        ""cost"": ""60/70/80/90/100"",
        ""description"": ""Agni summons a cloud of noxious fumes at his ground target location, doing damage every second. Firing any of Agni's abilities into the fumes detonates the gas, stunning all enemies in the radius."",
        ""menuitems"": [
          {
            ""description"": ""Ability:"",
            ""value"": ""Ground Target""
          },
          {
            ""description"": ""Affects:"",
            ""value"": ""Enemy""
          },
          {
            ""description"": ""Damage:"",
            ""value"": ""Magical""
          },
          {
            ""description"": ""Radius:"",
            ""value"": ""20""
          }
        ],
        ""rankitems"": [
          {
            ""description"": ""Damage per Tick:"",
            ""value"": ""10/20/30/40/50 (+5% of your magical power)""
          },
          {
            ""description"": ""Fumes Duration:"",
            ""value"": ""10s""
          },
          {
            ""description"": ""Stun Duration:"",
            ""value"": ""1s""
          }
        ],
        ""secondaryDescription"": """"
      }
    },
    ""abilityDescription5"": {
      ""itemDescription"": {
        ""cooldown"": """",
        ""cost"": """",
        ""description"": ""After hitting with 4 basic attacks, Agni will gain a buff. On the next cast of Flame Wave or Rain Fire, all enemies hit by those abilities will be additionally set ablaze, taking damage every .5s for 3s."",
        ""menuitems"": [
          {
            ""description"": ""Affects:"",
            ""value"": ""Enemy""
          },
          {
            ""description"": ""Damage:"",
            ""value"": ""Magical""
          }
        ],
        ""rankitems"": [
          {
            ""description"": ""Damage per Tick:"",
            ""value"": ""5 (+10% of your magical power)""
          }
        ],
        ""secondaryDescription"": """"
      }
    },
    ""basicAttack"": {
      ""itemDescription"": {
        ""cooldown"": """",
        ""cost"": """",
        ""description"": """",
        ""menuitems"": [
          {
            ""description"": ""Damage:"",
            ""value"": ""34 + 1.5/Lvl (+20% of Magical Power)""
          },
          {
            ""description"": ""Progression:"",
            ""value"": ""None""
          }
        ],
        ""rankitems"": [],
        ""secondaryDescription"": """"
      }
    },
    ""id"": 1737,
    ""ret_msg"": null
  }
",2573
164,21895743,"type God struct {
    Ability1                      string
    Ability2                      string
    Ability3                      string
    Ability4                      string
    Ability5                      string
    AbilityId1                    int
    AbilityId2                    int
    AbilityId3                    int
    AbilityId4                    int
    AbilityId5                    int
    Attack_speed                  float64
    Attack_speed_per_level        float64
    Cons                          string
    Hp5_per_level                 float64
    Health                        int
    Health_per_five               int
    Health_per_level              int
    Item1                         string
    Item2                         string
    Item3                         string
    Item4                         string
    Item5                         string
    Item6                         string
    Item7                         string
    Item8                         string
    Item9                         string
    ItemId1                       int
    ItemId2                       int
    ItemId3                       int
    ItemId4                       int
    ItemId5                       int
    ItemId6                       int
    ItemId7                       int
    ItemId8                       int
    ItemId9                       int
    Lore                          string
    Mp5_per_level                 float64
    Magic_protection              int
    Magic_protection_per_level    int
    Mana                          int
    Mana_per_five                 float64
    Mana_per_level                int
    Name                          string
    On_free_rotation              string
    Pantheon                      string
    Physical_power                int
    Physical_power_per_level      int
    Physical_protection           int
    Physical_protection_per_level float64
    Pros                          string
    Roles                         string
    Speed                         int
    Title                         string
    Type                          string
    Abilitydescription1           struct {
        Item_description struct {
            Cooldown    string
            Cost        string
            Description string
            Menu_items  struct {
                Description string
                Value       string
            }
            Rank_items struct {
                Description string
                Value       string
            }
            Secondary_description string
        }
    }
    Ability_description2 struct {
        Item_description struct {
            Cooldown    string
            Cost        string
            Description string
            Menu_items  struct {
                Description string
                Value       string
            }
            Rank_items struct {
                Description string
                Value       string
            }
            Secondary_description string
        }
    }
    Ability_description3 struct {
        Item_description struct {
            Cooldown    string
            Cost        string
            Description string
            Menu_items  struct {
                Description string
                Value       string
            }
            Rank_items struct {
                Description string
                Value       string
            }
            Secondary_description string
        }
    }
    Ability_description4 struct {
        Item_description struct {
            Cooldown    string
            Cost        string
            Description string
            Menu_items  struct {
                Description string
                Value       string
            }
            Rank_items struct {
                Description string
                Value       string
            }
            Secondary_description string
        }
    }
    Ability_description5 struct {
        Item_description struct {
            Cooldown    string
            Cost        string
            Description string
            Menu_items  struct {
                Description string
                Value       string
            }
            Rank_items struct {
                Description string
                Value       string
            }
            Secondary_description string
        }
    }
    Basic_attack struct {
        Item_description struct {
            cooldown    string
            cost        string
            description string
            Menu_items  struct {
                Description string
                Value       string
            }
            Rank_items struct {
                Description string
                Value       string
            }
            Secondary_description string
        }
    }
    Id      int
    Ret_msg string
}
",4907
165,21895743,"var gods []God
json.Unmarshal(jsonResponse, &gods)
return gods
",63
166,21895743,"abilityDescription1(2,3,4,5)",28
167,22124192,net.Conn,8
168,22124192,tls.Config,10
169,22124192,tls.Config,10
170,22124192,"package main

import (
    ""crypto/rsa""
    ""crypto/tls""
    ""encoding/hex""
    ""fmt""
    ""log""
    ""math/big""
    ""net""
    ""net/smtp""
)

func main() {

    var (
        host     = ""smtp.myexchange.com""
        port     = 587
        from     = ""sender@example.org""
        password = ""password""
        to       = []string{""recipient@example.org""}
        msg      = []byte(""This is my message"")
        auth     = smtp.PlainAuth("""", from, password, ""smtp.myexchange.com"")
    )

    conf := new(tls.Config)
    conf.Certificates = make([]tls.Certificate, 1)
    conf.Certificates[0].Certificate = [][]byte{testRSACertificate}
    conf.Certificates[0].PrivateKey = testRSAPrivateKey
    conf.CipherSuites = []uint16{tls.TLS_RSA_WITH_RC4_128_SHA}
    conf.InsecureSkipVerify = true
    conf.MinVersion = tls.VersionSSL30
    conf.MaxVersion = tls.VersionTLS10
    serverAddr := fmt.Sprintf(""%s:%d"", host, port)

    conn, err := net.Dial(""tcp"", serverAddr)
    if err != nil {
        log.Printf(""Error Dialing %s\n"", err)
        return
    }

    client, err := smtp.NewClient(conn, host)
    if err != nil {
        log.Printf(""Error SMTP connection: %s\n"", err)
        return
    }

    if err = client.StartTLS(conf); err != nil {
        log.Printf(""Error performing StartTLS: %s\n"", err)
        return
    }

    if ok, _ := client.Extension(""AUTH""); ok {
        if err := client.Auth(auth); err != nil {
            log.Printf(""Error during AUTH %s\n"", err)
            return
        }
    }

    if err := client.Mail(from); err != nil {
        log.Printf(""Error: %s\n"", err)
        return
    }

    for _, addr := range to {
        if err := client.Rcpt(addr); err != nil {
            log.Printf(""Error: %s\n"", err)
            return
        }
    }

    w, err := client.Data()
    if err != nil {
        log.Printf(""Error: %s\n"", err)
        return
    }

    _, err = w.Write(msg)
    if err != nil {
        log.Printf(""Error: %s\n"", err)
        return

    }

    err = w.Close()
    if err != nil {
        log.Printf(""Error: %s\n"", err)
        return

    }

    client.Quit()
}

// Code below from http://golang.org/src/pkg/crypto/tls/handshake_server_test.go

func bigFromString(s string) *big.Int {
    ret := new(big.Int)
    ret.SetString(s, 10)
    return ret
}

func fromHex(s string) []byte {
    b, _ := hex.DecodeString(s)
    return b
}

var testRSACertificate = fromHex(""308202b030820219a00302010202090085b0bba48a7fb8ca300d06092a864886f70d01010505003045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c7464301e170d3130303432343039303933385a170d3131303432343039303933385a3045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746430819f300d06092a864886f70d010101050003818d0030818902818100bb79d6f517b5e5bf4610d0dc69bee62b07435ad0032d8a7a4385b71452e7a5654c2c78b8238cb5b482e5de1f953b7e62a52ca533d6fe125c7a56fcf506bffa587b263fb5cd04d3d0c921964ac7f4549f5abfef427100fe1899077f7e887d7df10439c4a22edb51c97ce3c04c3b326601cfafb11db8719a1ddbdb896baeda2d790203010001a381a73081a4301d0603551d0e04160414b1ade2855acfcb28db69ce2369ded3268e18883930750603551d23046e306c8014b1ade2855acfcb28db69ce2369ded3268e188839a149a4473045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746482090085b0bba48a7fb8ca300c0603551d13040530030101ff300d06092a864886f70d010105050003818100086c4524c76bb159ab0c52ccf2b014d7879d7a6475b55a9566e4c52b8eae12661feb4f38b36e60d392fdf74108b52513b1187a24fb301dbaed98b917ece7d73159db95d31d78ea50565cd5825a2d5a5f33c4b6d8c97590968c0f5298b5cd981f89205ff2a01ca31b9694dda9fd57e970e8266d71999b266e3850296c90a7bdd9"")

var testRSAPrivateKey = &rsa.PrivateKey{
    PublicKey: rsa.PublicKey{
        N: bigFromString(""131650079503776001033793877885499001334664249354723305978524647182322416328664556247316495448366990052837680518067798333412266673813370895702118944398081598789828837447552603077848001020611640547221687072142537202428102790818451901395596882588063427854225330436740647715202971973145151161964464812406232198521""),
        E: 65537,
    },
    D: bigFromString(""29354450337804273969007277378287027274721892607543397931919078829901848876371746653677097639302788129485893852488285045793268732234230875671682624082413996177431586734171663258657462237320300610850244186316880055243099640544518318093544057213190320837094958164973959123058337475052510833916491060913053867729""),
    Primes: []*big.Int{
        bigFromString(""11969277782311800166562047708379380720136961987713178380670422671426759650127150688426177829077494755200794297055316163155755835813760102405344560929062149""),
        bigFromString(""10998999429884441391899182616418192492905073053684657075974935218461686523870125521822756579792315215543092255516093840728890783887287417039645833477273829""),
    },
}
",4970
171,22430354,index out of range,18
172,22430354,Services,8
173,22430354,file_content,12
174,22430354,JSON,4
175,22430354,"type service_config struct {
    Services []struct {
        Name    string
        Command string
        Request map[string]interface{}
    }
}

var ServiceConf = service_config{}

err_json := json.Unmarshal(file_content, &ServiceConf)

for _, s := range ServiceConf.Services {
  log.Println(s)
}
",299
176,22430354,2014/03/14 18:19:53 http: panic serving [::1]:65448: runtime error: index out of range,86
177,22430354,"{
  ""services"" : [
    {
      ""name"": ""translation"",
      ""command"": ""to german"",
      ""request"": {
        ""key"": ""XXX"",
        ""url"": ""https://www.googleapis.com/language/translate/v2?""
      }
    }
  ]
}
",212
178,22430354,"    package main

import (
    ""encoding/json""
    ""fmt""
    ""io/ioutil""
    ""log""
    ""net/http""
    ""net/url""
    ""os""
)

type SlackResponse struct {
    token        string
    team_id      string
    channel_id   string
    channel_name string
    timestamp    string
    user_id      string
    user_name    string
    text         string
}

type service_config struct {
    Services []struct {
        Name    string
        Command string
        Request map[string]interface{}
    }
}

var ServiceConf = service_config{}

func main() {

    content, err_read := ioutil.ReadFile(""config.ini"")

    if err_read != nil {
        log.Println(""Could not read config"")
        return
    }

    log.Println(string(content))

    err_json := json.Unmarshal(content, &ServiceConf)

    if err_json != nil {
        log.Println(err_json)
    }

    http.HandleFunc(""/"", handler)
    http.ListenAndServe("":""+os.Getenv(""PORT""), nil)
}

func handler(w http.ResponseWriter, r *http.Request) {
    slack_response := SlackResponse{
        r.FormValue(""token""),
        r.FormValue(""team_id""),
        r.FormValue(""channel_id""),
        r.FormValue(""channel_name""),
        r.FormValue(""timestamp""),
        r.FormValue(""user_id""),
        r.FormValue(""user_name""),
        r.FormValue(""text""),
    }

    // log.Println(ServiceConf.Services[0].Request[""key""])

    // loop through services to find command phrases
    for _, s := range ServiceConf.Services {
        log.Println(s)
    }

    if slack_response.user_name == ""slackbot"" {
        return
    }

    // fmt.Fprintf(w, ""{ \""text\"": \""Master %s!  You said: '%s'\"" }"", slack_response.user_name, slack_response.text)

    content, err := getContent(""https://www.googleapis.com/language/translate/v2?key=&source=en&target=de&q="" + url.QueryEscape(slack_response.text))
    if err != nil {
        fmt.Fprintf(w, ""{ \""text\"": \""Huh?!\"" }"")
    } else {

        type trans struct {
            Data struct {
                Translations []struct {
                    TranslatedText string `json:""translatedText""`
                } `json:""translations""`
            } `json:""data""`
        }

        f := trans{}
        err := json.Unmarshal(content, &f)

        if err != nil {
            log.Println(err)
        }

        fmt.Fprintf(w, ""{ \""text\"": \""Translated to German you said: '%s'\"" }"", f.Data.Translations[0].TranslatedText)
    }
}

// array of bytes if retrieved successfully.
func getContent(url string) ([]byte, error) {
    // Build the request
    req, err := http.NewRequest(""GET"", url, nil)
    if err != nil {
        return nil, err
    }
    // Send the request via a client
    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        return nil, err
    }
    // Defer the closing of the body
    defer resp.Body.Close()
    // Read the content into a byte array
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }
    // At this point we're done - simply return the bytes
    return body, nil
}
",3045
179,22430354,"2014/03/21 23:21:29 http: panic serving [::1]:59508: runtime error: index out of range
goroutine 3 [running]:
net/http.func·009()
    /usr/local/Cellar/go/1.2/libexec/src/pkg/net/http/server.go:1093 +0xae
runtime.panic(0x215f80, 0x4b6537)
    /usr/local/Cellar/go/1.2/libexec/src/pkg/runtime/panic.c:248 +0x106
main.handler(0x5a85e8, 0xc21000f6e0, 0xc210037dd0)
    /Users/et/src/go/src/github.com/etdebruin/gojacques/main.go:100 +0x81b
net/http.HandlerFunc.ServeHTTP(0x2cbc60, 0x5a85e8, 0xc21000f6e0, 0xc210037dd0)
    /usr/local/Cellar/go/1.2/libexec/src/pkg/net/http/server.go:1220 +0x40
net/http.(*ServeMux).ServeHTTP(0xc21001e5d0, 0x5a85e8, 0xc21000f6e0, 0xc210037dd0)
    /usr/local/Cellar/go/1.2/libexec/src/pkg/net/http/server.go:1496 +0x163
net/http.serverHandler.ServeHTTP(0xc21001f500, 0x5a85e8, 0xc21000f6e0, 0xc210037dd0)
    /usr/local/Cellar/go/1.2/libexec/src/pkg/net/http/server.go:1597 +0x16e
net/http.(*conn).serve(0xc210058300)
    /usr/local/Cellar/go/1.2/libexec/src/pkg/net/http/server.go:1167 +0x7b7
created by net/http.(*Server).Serve
    /usr/local/Cellar/go/1.2/libexec/src/pkg/net/http/server.go:1644 +0x28b
",1137
180,23268356,http.HandleFunc,15
181,23268356,http.HandleFunc,15
182,23268356,"package main
import ""fmt""
import ""time""
import ""code.google.com/p/go-sqlite/go1/sqlite3""
import ""crypto/rand""
import ""encoding/base64"" 

func getrandomtext() (string) {
    b := make([]byte, 12)
    rand.Read(b)
    en := base64.StdEncoding // or URLEncoding
    enclen := en.EncodedLen(len(b))
    d := make([]byte, enclen)
    en.Encode(d, b)
    returntext := string(d[:enclen])
    //fmt.Printf(""getrandomtext() : '""+returntext+""'\n"")
    return returntext
}

func main() {
    dbname := ""multitasking.db""
    tablename := ""multiwrite""
    defer time.Sleep(5000 * time.Millisecond)
    db, err := sqlite3.Open(""file:""+dbname+""?file:locked.sqlite?cache=shared&mode=rwc"")
    defer db.Close()
    if err != nil {
        fmt.Printf(""failed to open database, error: "" + err.Error() + ""\n"") 
        return
    } 
    err = db.Exec(""DROP TABLE IF EXISTS ""+tablename+"";"")
    if err != nil {
        fmt.Printf(""error dropping table ""+tablename+"": ""+err.Error()+""\n"")
    }
    err = db.Exec(""CREATE TABLE ""+tablename+"" (id INTEGER PRIMARY KEY AUTOINCREMENT, text VARCHAR(200));"")
    if err != nil {
        fmt.Printf(""error creating table ""+tablename+"": ""+err.Error()+""\n"") 
        return
    } else {
        fmt.Printf(""successfully created table ""+tablename+""!\n"") 
    }
    var insertcount int = 128
    fmt.Printf(""inserting %d random text rows ...\n"", insertcount) 
    var counter int = 0
    insertloop:
    if counter < insertcount {
        counter++
        go func(count int) {
            if db.Exec(""INSERT INTO ""+tablename+""(text) VALUES(\""""+getrandomtext()+""\"");"") !=nil {
                fmt.Printf("" -%d"", count)
            } else {
                fmt.Printf("" +%d"", count)
            }
        }(counter)
        goto insertloop
    }
    fmt.Printf(""\nExecuted! Waiting some seconds...\n"")
    time.Sleep(3000 * time.Millisecond)         
    fmt.Printf(""\nRequesting...\n"")
    ReadTable, err := db.Prepare(""SELECT id, text FROM ""+tablename+"";"")
    err = ReadTable.Query()
    if err != nil {
        fmt.Printf(""failed to read '""+tablename+""' table, error: "" + err.Error() + ""\n"")
        return
    } 
    Readloop:
    var RowId int
    var RowText string
    err = ReadTable.Scan(&RowId, &RowText)
    if err == nil {
        fmt.Printf(""> %d | %s\n"", RowId, RowText)
        ReadTable.Next() 
        goto Readloop
    }
    fmt.Printf(""Sqlite3 test done! :)\n"")
}
",2399
183,23268356,multitasking.db,15
184,23268356,"C:\Documents and Settings\JekabsR>multitaskingdb
successfully created table multiwrite!
inserting 128 random text rows ...

Executed! Waiting some seconds...
 +2 +3 +4 +5 +6 +7 +8 +9 +10 +11 +57 +58 +59 +60 +61 +62 +63 +64 +65 +66 +67 +68
 +69 +70 +71 +72 +73 +74 +75 +76 +77 +78 +79 +80 +81 +82 +83 +84 +85 +86 +87 +88
 +89 +90 +91 +92 +93 +94 +95 +96 +97 +98 +117 +118 +119 +120 +121 +122 +123 +124
 +125 +126 +127 +128 +12 +13 +14 +15 +16 +17 +18 +19 +20 +21 +22 +23 +24 +25 +26
 +27 +28 +29 +30 +31 +32 +33 +34 +35 +36 +37 +38 +39 +40 +41 +42 +43 +44 +45 +46
 +47 +48 +49 +50 +51 +52 +53 +54 +55 +56 +99 +100 +101 +102 +103 +104 +105 +106
+107 +108 +109 +110 +111 +112 +113 +114 +115 +116 +1
Requesting...
> 1 | ScnK0DScszFPtNgY
> 2 | 8ALa+Dyk48PpJ4em
> 3 | hmEF4yINhg9SxlNy
...
> 127 | AAAAwNCvV/wd0/MR
> 128 | SEbPfK/XuVfgnxPj
Sqlite3 test done! :)
",855
185,23268356,multitaskingdb,14
186,23268356,"C:\Documents and Settings\JekabsR>multitaskingdb
successfully created table multiwrite!
inserting 128 random text rows ...

Executed! Waiting some seconds...
 +2 +3 +4 +5 +6 +7 +8 +9 +10panic: invalid memory address or nil pointer derefer
ence
fatal error: panic during malloc
[signal 0xc0000005 code=0x0 addr=0x20 pc=0x41b60a]

runtime stack:
runtime.panic(panic: invalid memory address or nil pointer dereference
 +11 -57 -58 -59 -60 -61 -62 -63 -64 -65 -66 -67 -68 -69 -700x520a80, 0x673aaf)
        C:/Program Files/Go/src/pkg/runtime/panic.c:233 +0x2b
invalid spdelta 363589 -1
runtime: unexpected return pc for  -71 -72 -73 -74 -75 -76 -77 -78 -79 -80 -81 -
82 -83 -84 -85 -86 -87 -88balance called from 0x200

goroutine 48 [syscall]:
runtime.cgocall(0x492817, 0x314476e8)
        C:/Program Files/Go/src/pkg/runtime/cgocall.c -89 -90 -91 -92 -93 -94 -9
5 -96 -97 -98 -99 -100 -101 -102 -103 -104 -105 -106:149 +0x10c fp=0x314476dc
code.google.com/p/go-sqlite/go1/sqlite3._Cfunc_sqlite3_exec(0x3d4258, 0x10f47480
, 0x0, 0x0, 0x0, ...)
        C:/DOCUME~1/JekabsR/LOCALS~1/Temp/go-build368528647/code.google.com/p/go
-sqlite/go1/sqlite3/_obj/_cgo_defun.c:456 +0x33 fp=0x314476e8
code.google.com/p/go-sqlite/go1/sqlite3.(*Conn).exec(0x10f2d6c0, 0x10f47480, 0x3
8 +13 +14 +15 +16 +17 +18 +19 +20 +21 +22 +23 +24 +25 +26 +27 +28 +29, 0x52f578)

        C:/ProgramFiles/Go/src/pkg/code.google.com/p/go-sqlite/go1/sqlite3/sqlit
e3.go:545 +0x4c fp=0x31447704
code.google.com/p/go-sqlite/go1/sqlite3.(*Conn).Exec(0x10f2d6c0, 0x10f47480,  +3
0 +31 +32 +33 +34 +35 +36 +37 +38 +39 +40 +41 +42 +43 +44 +47 -48 -490x39, 0x0,
0x0, ...)
        C:/ProgramFiles/Go/src/pkg/code.google.com/p/go-sqlite/go1/sqlite3/sqlit
e3.go:231 +0xd2 fp=0x31447764
main.func┬Ę001( -50 -51 -52 -53 -54 -55 -56 +1 -107 -108 -109 -110 -111 -112 -11
3 -114 -115 -1160x2d)
        C:/Program Files/Go/src/pkg/development/multitaskingdb/multitaskingdb.go
:52 +0xa2 fp=0x314477c4
runtime.goexit()
        C:/Program Files/Go/src/pkg/runtime/proc.c:1394 -117 -118 -119 -120 -121
 -122 -123 -124 -125 -126 -127 -128 +12 fp=0x314477c8
created by main.main
        C:/Program Files/Go/src/pkg/development/multitaskingdb/multitaskingdb.go
:57 +0x417

goroutine 1 [sleep]:
time.Sleep(0xb2d05e00, 0x0)
        C:/Program Files/Go/src/pkg/runtime/time.goc:31 +0x3b
main.main()
        C:/Program Files/Go/src/pkg/development/multitaskingdb/multitaskingdb.go
:61 +0x453

goroutine 3 [syscall]:
runtime.goexit()
        C:/Program Files/Go/src/pkg/runtime/proc.c:1394

goroutine 49 [syscall]:
code.google.com/p/go-sqlite/go1/sqlite3._Cfunc_sqlite3_exec(0x3d4258, 0x10f47500
, 0x0, 0x0, 0x0, ...)
        C:/DOCUME~1/JekabsR/LOCALS~1/Temp/go-build368528647/code.google.com/p/go
-sqlite/go1/sqlite3/_obj/_cgo_defun.c:456 +0x33
code.google.com/p/go-sqlite/go1/sqlite3.(*Conn).exec(0x10f2d6c0, 0x10f47500, 0x3
8, 0x52f578)
        C:/ProgramFiles/Go/src/pkg/code.google.com/p/go-sqlite/go1/sqlite3/sqlit
e3.go:545 +0x4c
code.google.com/p/go-sqlite/go1/sqlite3.(*Conn).Exec(0x10f2d6c0, 0x10f47500, 0x3
9, 0x0, 0x0, ...)
        C:/ProgramFiles/Go/src/pkg/code.google.com/p/go-sqlite/go1/sqlite3/sqlit
e3.go:231 +0xd2
main.func┬Ę001(0x2e)
        C:/Program Files/Go/src/pkg/development/multitaskingdb/multitaskingdb.go
:52 +0xa2
created by main.main
        C:/Program Files/Go/src/pkg/development/multitaskingdb/multitaskingdb.go
:57 +0x417
fatal error: panic during malloc
[signal 0xc0000005 code=0x0 addr=0x20 pc=0x41b60a]

runtime stack:
runtime.panic(0x520a80, 0x673aaf)
        C:/Program Files/Go/src/pkg/runtime/panic.c:233 +0x2b
invalid spdelta 364736 -1
runtime: unexpected return pc for sqlite3BtreeInsert called from 0x1500
",3695
187,23317191,"package main

import (
    ""encoding/json""
    ""fmt""
    ""io/ioutil""
    ""net/http""
    ""os""
)

const api_endpoint = ""http://www.reddit.com/r/%s/top.json?t=all&limit=100""

func main() {
    // Get console argument 'subreddit' and format the API endpoint URL.
    subreddit := os.Args[1]
    top_by_subreddit_endpoint := fmt.Sprintf(api_endpoint, subreddit)

    // Hit the API service.
    response, err := http.Get(top_by_subreddit_endpoint)
    if err != nil {
        //Perror(err)
    } else {
        defer response.Body.Close()
        content, err := ioutil.ReadAll(response.Body)
        if err != nil {
            //Perror(err)
        } else {
            var top_submissions Submission
            json.Unmarshal(content, &top_submissions)
        }
    }
}

type ByCreated []Submission

func (a ByCreated) Len() int           { return len(a) }
func (a ByCreated) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a ByCreated) Less(i, j int) bool { return a[i].Created < a[j].Created }

type Submission struct {
    Domain              string `json:""domain""`
    BannedBy            string `json:""banned_by""`
    MediaEmbed          string `json:""media_embed""`
    Subreddit           string `json:""subreddit""`
    SelftextHtml        string `json:""selftext_html""`
    Selftext            string `json:""selftext""`
    Likes               bool   `json:""likes""`
    SecureMedia         string `json:""secure_media""`
    LinkFlairText       string `json:""link_flair_text""`
    Id                  string `json:""id""`
    Gilded              int    `json:""gilded""`
    SecureMediaEmbed    string `json:""secure_media_embed""`
    Clicked             bool   `json:""clicked""`
    Stickied            bool   `json:""stickied""`
    Author              string `json:""author""`
    Media               string `json:""media""`
    Score               int    `json:""score""`
    ApprovedBy          string `json:""approved_by""`
    Over18              bool   `json:""over_18""`
    Hidden              bool   `json:""hidden""`
    Thumbnail           string `json:""thumbnail""`
    SubredditId         string `json:""subreddit_id""`
    Edited              int    `json:""edited""`
    LinkFlairCssClass   string `json:""link_flair_css_class""`
    AuthorFlairCssClass string `json:""author_flair_css_class""`
    Downs               int    `json:""downs""`
    Saved               bool   `json:""saved""`
    IsSelf              bool   `json:""is_self""`
    Permalink           string `json:""permalink""`
    Name                string `json:""name""`
    Created             int    `json:""created""`
    Url                 string `json:""url""`
    AuthorFlairText     string `json:""author_flair_text""`
    Title               string `json:""title""`
    CreatedUtc          int    `json:""created_utc""`
    Ups                 int    `json:""ups""`
    NumComments         int    `json:""num_comments""`
    Visited             bool   `json:""visited""`
    NumReports          string `json:""num_reports""`
    Distinguished       string `json:""distinguished""`
}
",3027
188,23317191,children,8
189,23317191,Submission,10
190,23317191,"{
    ""kind"": ""Listing"",
    ""data"": {
        ""modhash"": ""1wcy5kngm9408522707f8e319ca825af342a5b3c460ca7c928"",
        ""children"": [
            {
                ""kind"": ""t3"",
                ""data"": {
                    ""domain"": ""self.Smite"",
                    ""banned_by"": null,
                    ""media_embed"": {},
                    ""subreddit"": ""Smite"",
                    ""selftext_html"": ""Hello Smite community - how&#39;s it going? My name is Steve, but you can just call me Proto. I&#39;m a forum moderator and content creator for Beyond Entertainment - a site which specializes in gaming news surrounding competitive console gaming and all around video games news. I&#39;ve been around competitive gaming since 2007 back in the Halo 2 MLG days and have been hooked ever since. I&#39;m not here to talk about myself though - and although I&#39;m not a Smite player - I&#39;m here to talk about a company who is becoming involved with the Smite community that goes by the name Bonafide Boarding https://twitter.com/LiveBNFD  \n\nNow you might be asking yourself why am I writing this? First, these 2 tweets drew my attention in regards to Bonafide Boarding https://twitter.com/BonafideBCC - as well as Billy and Brad - working with people in the competitive Smite community  \n\nhttps://twitter.com/LiveBNFD/status/441044741699149825  \n\nhttps://twitter.com/HiRezNabil (pictures with Brad under this Twitter user&#39;s photos - Brad confirmed in the AGL Facebook cover photo as well just for verification)  \n\nWell - I&#39;m writing this because the owners of the Bonafide Boarding Clothing company, Brad Weir and Billy Lutz https://twitter.com/MrBillyLutz have past experience in competitive gaming. including running their own league of Halo tournaments in 2012 and 2013. However, it&#39;s not a good past - and to put it as blunt as possible - the two together are frauds who stole money from the Halo community and owe professional Halo players thousands of dollars from their Halo events - at the time known as AGL (Arena Gaming League) https://www.facebook.com/ArenaGamingLeague (Brad Weir is in the cover photo, on the right, in the red t shirt interviewing the person on the left)  \n\nBrad and Billy had their first AGL Halo event in August of 2012 - and in 2013 is when the problems began. While there is a lot more to talk about then what can be posted here, I will basically go into how AGL ended and how Halo players were scammed out of thousands of dollars in owed prize money - and to this day, no one has received any money from AGL, Brad or Billy for most of the 2013 AGL Halo tournaments.  \n\nAGL had announced an event to held in Indianapolis, Indiana on November 1-3, 2013 called the &quot;AGL 10K&quot;. It was made out to be their biggest event yet - held at a brand new LAN center and promising the most prize money at any AGL event thus far at the time. However, just days before the event was scheduled to take place, it was cancelled as noted here with a direct quote from AGL/Brad in the article below  \n\nhttp://teambeyond.net/agl-10k-cancelled/  \n\nThis also led to players not being able to get refunds for their team passes which many had already purchased for the event (note the dates on the tweets shown below)  \n\nhttps://twitter.com/jCreelz/status/394116351402737664  \n\nhttps://twitter.com/Ninja_Invictus/status/393922514247643136  \n\nNot long after this event was cancelled, AGL completely shut down, seemingly out of nowhere - confirmed in this forum post by Brad himself on the Beyond Entertainment forums  \n\nhttp://teambeyond.net/forum/index.php?/topic/2238-agl-closes-down-statement/page-50?p=108159#entry108159  \n\nSince AGL has shut down, there has been little to absolutely no contact from Brad, Billy, or anyone associated with AGL in terms of paying not only the professional players who are owed prize money, but commentators and staff from the event as well who were not paid and had no travel costs covered.  \n\nThe following are all tweets from professional Halo players who have still NEVER been paid by Brad Weir, Billy Lutz, or AGL as a whole.  \n\nhttps://twitter.com/MLGACE/statuses/408356773037232128  \n\nhttps://twitter.com/FormaL_tK/statuses/408400562372108288  \n\nhttps://twitter.com/Naded_MLG/statuses/426908120879607808  \n\nhttps://twitter.com/xPROVERBx/statuses/426975901583425536  \n\nhttps://twitter.com/enable_/status/426952260317220864  \n\nhttps://twitter.com/BRIZZ_Legit/status/426959849729974272  \n\nThis recent tweet is also from someone who bought t shirts from Bonafide Boarding, Brad and Billy&#39;s clothing company, and it appears they were screwed as well.  \n\nhttps://twitter.com/shellyteachesk2/status/447432597288017920  \n\nThe reason I am writing all this is just to warn you guys as a community to not fall into the trap the Halo community fell into in 2013. Do not support these guys - and most importantly - do not give them your money. I have loved competitive gaming for a long time, and I want nothing more than to see it continue to grow. The last thing I want to see happen is what happened to the Halo community in 2013 at the hands of Brad Weir, Billy Lutz, and the AGL company as a whole. Brad, Billy, and Bonafide Boarding as a whole is nothing but a scam and these 2 owe a lot of people a lot of money. Hopefully you guys can take this to heart and not support these two scumbags who have still yet to pay thousands of dollars to people who rightfully won money in their tournaments. Thank you for reading.  \n\n\nProto\n\n"",
                    ""selftext"": ""Hello Smite community - how's it going? My name is Steve, but you can just call me Proto. I'm a forum moderator and content creator for Beyond Entertainment - a site which specializes in gaming news surrounding competitive console gaming and all around video games news. I've been around competitive gaming since 2007 back in the Halo 2 MLG days and have been hooked ever since. I'm not here to talk about myself though - and although I'm not a Smite player - I'm here to talk about a company who is becoming involved with the Smite community that goes by the name Bonafide Boarding https://twitter.com/LiveBNFD  \n\nNow you might be asking yourself why am I writing this? First, these 2 tweets drew my attention in regards to Bonafide Boarding https://twitter.com/BonafideBCC - as well as Billy and Brad - working with people in the competitive Smite community  \n\nhttps://twitter.com/LiveBNFD/status/441044741699149825  \n\nhttps://twitter.com/HiRezNabil (pictures with Brad under this Twitter user's photos - Brad confirmed in the AGL Facebook cover photo as well just for verification)  \n\nWell - I'm writing this because the owners of the Bonafide Boarding Clothing company, Brad Weir and Billy Lutz https://twitter.com/MrBillyLutz have past experience in competitive gaming. including running their own league of Halo tournaments in 2012 and 2013. However, it's not a good past - and to put it as blunt as possible - the two together are frauds who stole money from the Halo community and owe professional Halo players thousands of dollars from their Halo events - at the time known as AGL (Arena Gaming League) https://www.facebook.com/ArenaGamingLeague (Brad Weir is in the cover photo, on the right, in the red t shirt interviewing the person on the left)  \n\nBrad and Billy had their first AGL Halo event in August of 2012 - and in 2013 is when the problems began. While there is a lot more to talk about then what can be posted here, I will basically go into how AGL ended and how Halo players were scammed out of thousands of dollars in owed prize money - and to this day, no one has received any money from AGL, Brad or Billy for most of the 2013 AGL Halo tournaments.  \n\nAGL had announced an event to held in Indianapolis, Indiana on November 1-3, 2013 called the \""AGL 10K\"". It was made out to be their biggest event yet - held at a brand new LAN center and promising the most prize money at any AGL event thus far at the time. However, just days before the event was scheduled to take place, it was cancelled as noted here with a direct quote from AGL/Brad in the article below  \n\nhttp://teambeyond.net/agl-10k-cancelled/  \n\nThis also led to players not being able to get refunds for their team passes which many had already purchased for the event (note the dates on the tweets shown below)  \n\nhttps://twitter.com/jCreelz/status/394116351402737664  \n\nhttps://twitter.com/Ninja_Invictus/status/393922514247643136  \n\nNot long after this event was cancelled, AGL completely shut down, seemingly out of nowhere - confirmed in this forum post by Brad himself on the Beyond Entertainment forums  \n\nhttp://teambeyond.net/forum/index.php?/topic/2238-agl-closes-down-statement/page-50?p=108159#entry108159  \n\nSince AGL has shut down, there has been little to absolutely no contact from Brad, Billy, or anyone associated with AGL in terms of paying not only the professional players who are owed prize money, but commentators and staff from the event as well who were not paid and had no travel costs covered.  \n\nThe following are all tweets from professional Halo players who have still NEVER been paid by Brad Weir, Billy Lutz, or AGL as a whole.  \n\nhttps://twitter.com/MLGACE/statuses/408356773037232128  \n\nhttps://twitter.com/FormaL_tK/statuses/408400562372108288  \n\nhttps://twitter.com/Naded_MLG/statuses/426908120879607808  \n\nhttps://twitter.com/xPROVERBx/statuses/426975901583425536  \n\nhttps://twitter.com/enable_/status/426952260317220864  \n\nhttps://twitter.com/BRIZZ_Legit/status/426959849729974272  \n\nThis recent tweet is also from someone who bought t shirts from Bonafide Boarding, Brad and Billy's clothing company, and it appears they were screwed as well.  \n\nhttps://twitter.com/shellyteachesk2/status/447432597288017920  \n\nThe reason I am writing all this is just to warn you guys as a community to not fall into the trap the Halo community fell into in 2013. Do not support these guys - and most importantly - do not give them your money. I have loved competitive gaming for a long time, and I want nothing more than to see it continue to grow. The last thing I want to see happen is what happened to the Halo community in 2013 at the hands of Brad Weir, Billy Lutz, and the AGL company as a whole. Brad, Billy, and Bonafide Boarding as a whole is nothing but a scam and these 2 owe a lot of people a lot of money. Hopefully you guys can take this to heart and not support these two scumbags who have still yet to pay thousands of dollars to people who rightfully won money in their tournaments. Thank you for reading.  \n\n- Proto"",
                    ""likes"": true,
                    ""secure_media"": null,
                    ""link_flair_text"": null,
                    ""id"": ""21dp8c"",
                    ""gilded"": 0,
                    ""secure_media_embed"": {},
                    ""clicked"": false,
                    ""stickied"": false,
                    ""author"": ""Proto__"",
                    ""media"": null,
                    ""score"": 1038,
                    ""approved_by"": null,
                    ""over_18"": false,
                    ""hidden"": false,
                    ""thumbnail"": """",
                    ""subreddit_id"": ""t5_2stl8"",
                    ""edited"": 1395865323,
                    ""link_flair_css_class"": null,
                    ""author_flair_css_class"": null,
                    ""downs"": 274,
                    ""saved"": false,
                    ""is_self"": true,
                    ""permalink"": ""/r/Smite/comments/21dp8c/a_warning_to_the_smite_community_bonafide/"",
                    ""name"": ""t3_21dp8c"",
                    ""created"": 1395828838,
                    ""url"": ""http://www.reddit.com/r/Smite/comments/21dp8c/a_warning_to_the_smite_community_bonafide/"",
                    ""author_flair_text"": null,
                    ""title"": ""A warning to the Smite community (Bonafide Boarding Clothing company)"",
                    ""created_utc"": 1395800038,
                    ""ups"": 1312,
                    ""num_comments"": 200,
                    ""visited"": false,
                    ""num_reports"": null,
                    ""distinguished"": null
                }
            }],
        }
    }
}
",12314
191,23461346,"c:/go/bin/go.exe build  [C:/GoProjects/src/gtk_test]
# github.com/mattn/go-gtk/pango
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libpango-1.0.dll.a when searching for -lpango-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/pango-1.0.lib when searching for -lpango-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libpango-1.0.dll.a when searching for -lpango-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/pango-1.0.lib when searching for -lpango-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\pango-1.0.lib when searching for -lpango-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lpango-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgobject-2.0.dll.a when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gobject-2.0.lib when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgobject-2.0.dll.a when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gobject-2.0.lib when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\gobject-2.0.lib when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgmodule-2.0.dll.a when searching for -lgmodule-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gmodule-2.0.lib when searching for -lgmodule-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgmodule-2.0.dll.a when searching for -lgmodule-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gmodule-2.0.lib when searching for -lgmodule-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\gmodule-2.0.lib when searching for -lgmodule-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lgmodule-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgthread-2.0.dll.a when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gthread-2.0.lib when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgthread-2.0.dll.a when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gthread-2.0.lib when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\gthread-2.0.lib when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libglib-2.0.dll.a when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/glib-2.0.lib when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libglib-2.0.dll.a when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/glib-2.0.lib when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\glib-2.0.lib when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libintl.dll.a when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/intl.lib when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libintl.dll.a when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/intl.lib when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\intl.lib when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lintl
collect2.exe: error: ld returned 1 exit status
# github.com/mattn/go-gtk/glib
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgobject-2.0.dll.a when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gobject-2.0.lib when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgobject-2.0.dll.a when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gobject-2.0.lib when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\gobject-2.0.lib when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgthread-2.0.dll.a when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gthread-2.0.lib when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgthread-2.0.dll.a when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gthread-2.0.lib when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\gthread-2.0.lib when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libglib-2.0.dll.a when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/glib-2.0.lib when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libglib-2.0.dll.a when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/glib-2.0.lib when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\glib-2.0.lib when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libintl.dll.a when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/intl.lib when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libintl.dll.a when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/intl.lib when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\intl.lib when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lintl
collect2.exe: error: ld returned 1 exit status
# github.com/mattn/go-gtk/gdk
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgdk-win32-2.0.dll.a when searching for -lgdk-win32-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gdk-win32-2.0.lib when searching for -lgdk-win32-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgdk-win32-2.0.dll.a when searching for -lgdk-win32-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gdk-win32-2.0.lib when searching for -lgdk-win32-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\gdk-win32-2.0.lib when searching for -lgdk-win32-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lgdk-win32-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libpangowin32-1.0.dll.a when searching for -lpangowin32-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/pangowin32-1.0.lib when searching for -lpangowin32-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libpangowin32-1.0.dll.a when searching for -lpangowin32-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/pangowin32-1.0.lib when searching for -lpangowin32-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\pangowin32-1.0.lib when searching for -lpangowin32-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lpangowin32-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libpangocairo-1.0.dll.a when searching for -lpangocairo-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/pangocairo-1.0.lib when searching for -lpangocairo-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libpangocairo-1.0.dll.a when searching for -lpangocairo-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/pangocairo-1.0.lib when searching for -lpangocairo-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\pangocairo-1.0.lib when searching for -lpangocairo-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lpangocairo-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgdk_pixbuf-2.0.dll.a when searching for -lgdk_pixbuf-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gdk_pixbuf-2.0.lib when searching for -lgdk_pixbuf-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgdk_pixbuf-2.0.dll.a when searching for -lgdk_pixbuf-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gdk_pixbuf-2.0.lib when searching for -lgdk_pixbuf-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\gdk_pixbuf-2.0.lib when searching for -lgdk_pixbuf-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lgdk_pixbuf-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libpango-1.0.dll.a when searching for -lpango-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/pango-1.0.lib when searching for -lpango-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libpango-1.0.dll.a when searching for -lpango-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/pango-1.0.lib when searching for -lpango-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\pango-1.0.lib when searching for -lpango-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lpango-1.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libcairo.dll.a when searching for -lcairo
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/cairo.lib when searching for -lcairo
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libcairo.dll.a when searching for -lcairo
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/cairo.lib when searching for -lcairo
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\cairo.lib when searching for -lcairo
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lcairo
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgmodule-2.0.dll.a when searching for -lgmodule-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gmodule-2.0.lib when searching for -lgmodule-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgmodule-2.0.dll.a when searching for -lgmodule-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gmodule-2.0.lib when searching for -lgmodule-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\gmodule-2.0.lib when searching for -lgmodule-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lgmodule-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgobject-2.0.dll.a when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gobject-2.0.lib when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgobject-2.0.dll.a when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gobject-2.0.lib when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\gobject-2.0.lib when searching for -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lgobject-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgthread-2.0.dll.a when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gthread-2.0.lib when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libgthread-2.0.dll.a when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/gthread-2.0.lib when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\gthread-2.0.lib when searching for -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lgthread-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libglib-2.0.dll.a when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/glib-2.0.lib when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libglib-2.0.dll.a when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/glib-2.0.lib when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\glib-2.0.lib when searching for -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lglib-2.0
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libintl.dll.a when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/intl.lib when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/libintl.dll.a when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib/intl.lib when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:/GTK/lib\intl.lib when searching for -lintl
c:/tdm-gcc-64/bin/../lib/gcc/x86_64-w64-mingw32/4.8.1/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lintl
collect2.exe: error: ld returned 1 exit status
Error: process exited with code 2.
",21591
192,24004951,Qhyper(),8
193,24004951,stirlerr(),10
194,24004951,lgammacor(),11
195,24004951,lbeta(),7
196,24004951,lbeta(),7
197,24004951,Qhyper(),8
198,24004951,"// Direct port of R code from nmath/{phyper,dbinom,stirlerr}.c and {dpq,nmath}.h.
// Code licensed under GPL for that reason (c) Dan Kortschak.
package main

import (
    ""errors""
    ""fmt""
    ""math""
)

func main() {
    // Example values come from:
    // http://stackoverflow.com/questions/8382806/r-hypergeometric-test-phyper
    fmt.Println(Phyper(62, 1998, 5260-1998, 131, true, false))

    for x := 0.; x < 10; x++ {
        fmt.Println(Phyper(x, 10, 7, 8, true, false))
    }
    fmt.Println()
    for x := 0.; x < 10; x++ {
        fmt.Println(Dhyper(x, 10, 7, 8, false))
    }
    fmt.Println()
    for x := 0.; x < 10; x++ {
        fmt.Println(Qhyper(x, 10, 7, 8, true, false))
    }
}

var ErrDomain = errors.New(""hyper: argument out of domain"")

const (
    epsilon = 2.2204460492503131e-16
    min     = 2.2250738585072014e-308
)

// Sample of n balls from r red and b black ones; x are red
func Phyper(x, r, b, n float64, lowerTail, logP bool) (float64, error) {
    x = math.Floor(x + 1e-7)
    r = round(r)
    b = round(b)
    n = round(n)

    if r  r+b {
        return math.NaN(), ErrDomain
    }

    if x*(r+b) > n*r {
        b, r = r, b
        x = n - x - 1
        lowerTail = !lowerTail
    }

    if x < 0 {
        return dt0(lowerTail, logP), nil
    }
    if x >= r || x >= n {
        return dt1(lowerTail, logP), nil
    }

    d, err := Dhyper(x, r, b, n, logP)
    if err != nil {
        return d, err
    }
    pd := pdhyper(x, r, b, n, logP)

    if logP {
        return log(d+pd, lowerTail), nil
    }
    res := d * pd
    if lowerTail {
        return res, nil
    }
    // Use 0.5 - p + 0.5 to perhaps gain 1 bit of accuracy
    res = 0.5 - res
    return res + 0.5, nil
}

func Dhyper(x, r, b, n float64, giveLog bool) (float64, error) {
    if negativeOrNotInteger(r) || negativeOrNotInteger(b) || negativeOrNotInteger(n) || n > r+b {
        return math.NaN(), ErrDomain
    }
    if x < 0 {
        return 0, nil
    }
    if x != math.Floor(x) {
        return 0, fmt.Errorf(""non-integer x = %f"", x)
    }

    x = round(x)
    r = round(r)
    b = round(b)
    n = round(n)

    if n  b {
        return 0, nil
    }
    if n == 0 {
        if x == 0 {
            return 1, nil
        }
        return 0, nil
    }

    p := n / (r + b)
    q := (r + b - n) / (r + b)

    p1, err := dbinom(x, r, p, q, giveLog)
    if err != nil {
        return math.NaN(), err
    }
    p2, err := dbinom(n-x, b, p, q, giveLog)
    if err != nil {
        return math.NaN(), err
    }
    p3, err := dbinom(n, r+b, p, q, giveLog)
    if err != nil {
        return math.NaN(), err
    }

    if giveLog {
        return p1 + p2 - p3, nil
    }
    return p1 * p2 / p3, nil
}

func Qhyper(p, NR, NB, n float64, lowerTail, logP bool) (float64, error) {
    if notFinite(p) || notFinite(NR) || notFinite(NB) || notFinite(n) {
        return math.NaN(), ErrDomain
    }

    NR = round(NR)
    NB = round(NB)
    N := NR + NB
    n = round(n)
    if NR  N {
        return math.NaN(), ErrDomain
    }

    /* Goal: Find xr (= #{red balls in sample}) such that
    * phyper(xr, NR,NB, n) >= p > phyper(xr - 1, NR,NB, n)
     */

    xstart := math.Max(0, n-NB)
    xend := math.Min(n, NR)

    if logP {
        if p > 0 {
            return math.NaN(), ErrDomain
        }
        if p == 0 { /* upper bound*/
            if lowerTail {
                return xend, nil
            }
            return xstart, nil
        }
        if math.IsInf(p, -1) {
            if lowerTail {
                return xstart, nil
            }
            return xend, nil
        }
    } else { /* !logP */
        if p  1 {
            return math.NaN(), ErrDomain
        }
        if p == 0 {
            if lowerTail {
                return xstart, nil
            }
            return xend, nil
        }
        if p == 1 {
            if lowerTail {
                return xend, nil
            }
            return xstart, nil
        }
    }

    xr := xstart
    xb := n - xr /* always ( = #{black balls in sample} ) */

    smallN := N < 1000 /* won't have underflow in product below */
    /* if N is small, term := product.ratio( bin.coef );
    otherwise work with its logarithm to protect against underflow */
    t1, err := lfastchoose(NR, xr)
    if err != nil {
        return 0, err
    }
    t2, err := lfastchoose(NB, xb)
    if err != nil {
        return 0, err
    }
    t3, err := lfastchoose(N, n)
    if err != nil {
        return 0, err
    }
    term := t1 + t2 - t3
    if smallN {
        term = math.Exp(term)
    }
    NR -= xr
    NB -= xb

    if !lowerTail || logP {
        p = qIv(p, lowerTail, logP)
    }
    p *= 1 - 1000*epsilon /* was 64, but failed on FreeBSD sometimes */
    var sum float64
    if smallN {
        sum = term
    } else {
        sum = math.Exp(term)
    }

    for sum < p && xr < xend {
        xr++
        NB++
        if smallN {
            term *= (NR / xr) * (xb / NB)
        } else {
            term += math.Log((NR / xr) * (xb / NB))
        }
        if smallN {
            sum += term
        } else {
            sum += math.Exp(term)
        }
        xb--
        NR--
    }
    return xr, nil
}

func lfastchoose(n, k float64) (float64, error) {
    lb, err := lbeta(n-k+1, k+1)
    if err != nil {
        return math.NaN(), err
    }
    return -math.Log(n+1) - lb, nil
}

func lbeta(a, b float64) (float64, error) {
    p := a
    q := a
    if b < p {
        p = b
    } /* := min(a,b) */
    if b > q {
        q = b
    } /* := max(a,b) */

    /* both arguments must be >= 0 */
    if p < 0 {
        return math.NaN(), ErrDomain
    } else if p == 0 {
        return math.Inf(1), nil
    } else if notFinite(q) { /* q == +Inf */
        return math.Inf(1), nil
    }

    if p >= 10 {
        /* p and q are big. */
        corr := stirlerr(p) + stirlerr(q) - stirlerr(p+q)
        return math.Log(q)*-0.5 + logSqrt2Pi + corr + (p-0.5)*math.Log(p/(p+q)) + q*math.Log1p(-p/(p+q)), nil
    } else if q >= 10 {
        /* p is small, but q is big. */
        corr := stirlerr(q) - stirlerr(p+q)
        return math.Gamma(p) + corr + p - p*math.Log(p+q) + (q-0.5)*math.Log1p(-p/(p+q)), nil
    } else {
        /* p and q are small: p <= q < 10. */
        /* R change for very small args */
        if p < min {
            return lgamma(p) + (lgamma(q) - lgamma(p+q)), nil
        }
    }
    return math.Log(math.Gamma(p) * (math.Gamma(q) / math.Gamma(p+q))), nil
}

func lgamma(p float64) float64 {
    r, _ := math.Lgamma(p)
    return r
}

func qIv(p float64, lowerTail, logP bool) float64 {
    if logP {
        if lowerTail {
            return math.Exp(p)
        }
        return -math.Expm1(p)
    }
    if lowerTail {
        return p
    }
    p = 0.5 - p
    return p + 0.5
}

// Calculate
//
// phyper (x, r, b, n, TRUE, FALSE)
// [log] ----------------------------------
// dhyper (x, r, b, n, FALSE)
//
// without actually calling phyper. This assumes that
//
// x * (r + b) <= n * r
func pdhyper(x, r, b, n float64, logP bool) float64 {

    sum := 0.
    term := 1.

    for x > 0 && term >= epsilon*sum {
        term *= x * (b - n + x) / (n + 1 - x) / (r + 1 - x)
        sum += term
        x--
    }

    if logP {
        return math.Log1p(sum)
    }
    return 1 + sum
}

var (
    ln2   = math.Log(2)
    ln2Pi = math.Log(2 * math.Pi)
)

func log(x float64, lowerTail bool) float64 {
    if lowerTail {
        return math.Log(x)
    }
    if x > -ln2 {
        return math.Log(-math.Expm1(x))
    }
    return math.Log1p(-math.Exp(x))
}

func dbinom(x, n, p, q float64, giveLog bool) (float64, error) {
    if p == 0 {
        if x == 0 {
            return 1, nil
        }
        return 0, nil
    }
    if q == 0 {
        if x == n {
            return 1, nil
        }
        return 0, nil
    }

    if x == 0 {
        if n == 0 {
            return 1, nil
        }
        if p < 0.1 {
            t, err := bd0(n, n*q)
            if err != nil {
                return math.NaN(), err
            }
            return exp(-t-n*p, giveLog), nil
        }
        return exp(n*math.Log(q), giveLog), nil
    }
    if x == n {
        if q < 0.1 {
            t, err := bd0(n, n*p)
            if err != nil {
                return math.NaN(), err
            }
            return exp(-t-n*q, giveLog), nil
        }
        return exp(n*math.Log(p), giveLog), nil
    }
    if x  n {
        return 0, nil
    }

    // n*p or n*q can underflow to zero if n and p or q are small. This
    // used to occur in dbeta, and gives NaN as from R 2.3.0.
    t1, err := bd0(x, n*p)
    if err != nil {
        return math.NaN(), err
    }
    t2, err := bd0(n-x, n*q)
    if err != nil {
        return math.NaN(), err
    }
    lc := stirlerr(n) - stirlerr(x) - stirlerr(n-x) - t1 - t2

    // f = (M_2PI*x*(n-x))/n; could overflow or underflow
    // Upto R 2.7.1:
    // lf = log(M_2PI) + log(x) + log(n-x) - log(n);
    // -- following is much better for x << n :
    lf := ln2Pi + math.Log(x) + math.Log1p(-x/n)

    return exp(lc-0.5*lf, giveLog), nil
}

func negativeOrNotInteger(x float64) bool {
    return x < 0 || x != math.Floor(x)
}

func notFinite(x float64) bool {
    return math.IsNaN(x) || math.IsInf(x, 0)
}

func round(x float64) float64 {
    if _, frac := math.Modf(x); frac >= 0.5 {
        return math.Ceil(x)
    }
    return math.Floor(x)
}

func exp(x float64, giveLog bool) float64 {
    if giveLog {
        return x
    }
    return math.Exp(x)
}

func dt0(lowerTail, logP bool) float64 {
    if lowerTail {
        return d0(logP)
    }
    return d1(logP)
}

func dt1(lowerTail, logP bool) float64 {
    if lowerTail {
        return d1(logP)
    }
    return d0(logP)
}

func d0(logP bool) float64 {
    if logP {
        return math.Inf(-1)
    }
    return 0
}

func d1(logP bool) float64 {
    if logP {
        return 0
    }
    return 1
}

// bd0(x,M) :=  M * D0(x/M) = M*[ x/M * log(x/M) + 1 - (x/M) ] =
//       =  x * log(x/M) + M - x
// where M = E[X] = n*p (or = lambda), for   x, M > 0
//
// in a manner that should be stable (with small relative error)
// for all x and M=np. In particular for x/np close to 1, direct
// evaluation fails, and evaluation is based on the Taylor series
// of log((1+v)/(1-v)) with v = (x-M)/(x+M) = (x-np)/(x+np).
//
func bd0(x, np float64) (float64, error) {
    if notFinite(x) || notFinite(np) || np == 0 {
        return math.NaN(), ErrDomain
    }

    if math.Abs(x-np) < 0.1*(x+np) {
        v := (x - np) / (x + np) // might underflow to 0
        s := (x - np) * v        // s using v -- change by MM
        if math.Abs(s) < min {
            return s, nil
        }
        ej := 2 * x * v
        v = v * v
        for j := 1; j < 1000; j++ {
            // Taylor series; 1000: no infinite loop
            // as |v| < .1,  v^2000 is ""zero""
            ej *= v // = v^(2j+1)
            s1 := s + ej/float64((j<<1)+1)
            if s1 == s { // last term was effectively 0
                return s1, nil
            }
            s = s1
        }
    }
    /* else:  | x - np |  is not too small */
    return x*math.Log(x/np) + np - x, nil
}

var (
    // error for 0, 0.5, 1.0, 1.5, ..., 14.5, 15.0.
    sfErrHalves = [31]float64{
        0.0, // n=0 - wrong, place holder only
        0.1534264097200273452913848,   // 0.5
        0.0810614667953272582196702,   // 1.0
        0.0548141210519176538961390,   // 1.5
        0.0413406959554092940938221,   // 2.0
        0.03316287351993628748511048,  // 2.5
        0.02767792568499833914878929,  // 3.0
        0.02374616365629749597132920,  // 3.5
        0.02079067210376509311152277,  // 4.0
        0.01848845053267318523077934,  // 4.5
        0.01664469118982119216319487,  // 5.0
        0.01513497322191737887351255,  // 5.5
        0.01387612882307074799874573,  // 6.0
        0.01281046524292022692424986,  // 6.5
        0.01189670994589177009505572,  // 7.0
        0.01110455975820691732662991,  // 7.5
        0.010411265261972096497478567, // 8.0
        0.009799416126158803298389475, // 8.5
        0.009255462182712732917728637, // 9.0
        0.008768700134139385462952823, // 9.5
        0.008330563433362871256469318, // 10.0
        0.007934114564314020547248100, // 10.5
        0.007573675487951840794972024, // 11.0
        0.007244554301320383179543912, // 11.5
        0.006942840107209529865664152, // 12.0
        0.006665247032707682442354394, // 12.5
        0.006408994188004207068439631, // 13.0
        0.006171712263039457647532867, // 13.5
        0.005951370112758847735624416, // 14.0
        0.005746216513010115682023589, // 14.5
        0.005554733551962801371038690, // 15.0
    }

    logSqrt2Pi = math.Log(math.Sqrt(2 * math.Pi))
)

// stirlerr(n) = log(n!) - log( sqrt(2*pi*n)*(n/e)^n )
//             = log Gamma(n+1) - 1/2 * [log(2*pi) + log(n)] - n*[log(n) - 1]
//             = log Gamma(n+1) - (n + 1/2) * log(n) + n - log(2*pi)/2
func stirlerr(n float64) float64 {
    const (
        S0 = 1. / 12.
        S1 = 1. / 360.
        S2 = 1. / 1260.
        S3 = 1. / 1680.
        S4 = 1. / 1188.
    )

    var nn float64

    if n <= 15.0 {
        nn = n + n
        if nn == math.Floor(nn) {
            return sfErrHalves[int(nn)]
        }
        lg, _ := math.Lgamma(n + 1)
        return lg - (n+0.5)*math.Log(n) + n - logSqrt2Pi
    }

    nn = n * n
    switch {
    case n > 500:
        return ((S0 - S1/nn) / n)
    case n > 80:
        return ((S0 - (S1-S2/nn)/nn) / n)
    case n > 35:
        return ((S0 - (S1-(S2-S3/nn)/nn)/nn) / n)
    default: // 15 < n <= 35
        return (S0 - (S1-(S2-(S3-S4/nn)/nn)/nn)/nn) / n
    }
}
",13684
199,24316030,"// web1 project main.go
package main

import (
    ""errors""
    ""fmt""
    ""github.com/jmcvetta/neoism""
    ""html/template""
    ""io/ioutil""
    ""net/http""
    ""regexp""
)

type Page struct {
    Title string
    Body  string
}

func (p *Page) save() error {
    db, err := neoism.Connect(""http://localhost:7474/db/data"")
    if err != nil {
        return err
    }
    res := []struct {
        N neoism.Node
    }{}
    cq := neoism.CypherQuery{
        Statement:  ""MERGE (n:Page {title: {title}}) ON MATCH SET n.body = {body} RETURN n"",
        Parameters: neoism.Props{""title"": p.Title, ""body"": p.Body},
        Result:     &res,
    }
    db.Cypher(&cq)
    return nil
}

func loadPage(title string) (*Page, error) {
    db, err := neoism.Connect(""http://localhost:7474/db/data"")
    if err != nil {
        return nil, err
    }
    res := []struct {
        Title string `json:""a.title""` // `json` tag matches column name in query
        Body  string `json:""a.body""`
    }{}
    cq := neoism.CypherQuery{
        Statement: `
            MATCH (a:Page)
            WHERE a.title = {name}
            RETURN a.title, a.body
        `,
        Parameters: neoism.Props{""name"": title},
        Result:     &res,
    }
    db.Cypher(&cq)
    r := res[0]
    if r.Title == """" || r.Body == """" {
        return nil, errors.New(""Page doesn't exist"")
    }
    return &Page{Title: r.Title, Body: r.Body}, nil
}

func viewHandler(w http.ResponseWriter, r *http.Request, title string) {
    p, err := loadPage(title)
    if err != nil {
        http.Redirect(w, r, ""/edit/""+title, http.StatusFound)
        return
    }
    renderTemplate(w, ""view"", p)
}

func editHandler(w http.ResponseWriter, r *http.Request, title string) {
    p, err := loadPage(title)
    if err != nil {
        p = &Page{Title: title}
    }
    renderTemplate(w, ""edit"", p)
}

func saveHandler(w http.ResponseWriter, r *http.Request, title string) {
    body := r.FormValue(""body"")
    p := &Page{Title: title, Body: body}
    err := p.save()
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    http.Redirect(w, r, ""/view/""+title, http.StatusFound)
}

func homeHandler(w http.ResponseWriter, r *http.Request) {
    body, err := ioutil.ReadFile(""home.html"")
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    fmt.Fprintf(w, ""%s"", body)
}

func rootHandler(w http.ResponseWriter, r *http.Request) {
    http.Redirect(w, r, ""/home"", http.StatusFound)
}

var templates = template.Must(template.ParseFiles(""edit.html"", ""view.html""))

func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
    err := templates.ExecuteTemplate(w, tmpl+"".html"", p)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
    }
}

var validPath = regexp.MustCompile(""^/(edit|save|view)/([a-zA-Z0-9]+)$"")

func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        m := validPath.FindStringSubmatch(r.URL.Path)
        if m == nil {
            http.NotFound(w, r)
            return
        }
        fn(w, r, m[2])
    }
}

func main() {
    http.HandleFunc(""/view/"", makeHandler(viewHandler))
    http.HandleFunc(""/edit/"", makeHandler(editHandler))
    http.HandleFunc(""/save/"", makeHandler(saveHandler))
    http.HandleFunc(""/home"", homeHandler)
    http.HandleFunc(""/"", rootHandler)
    http.ListenAndServe("":8082"", nil)
}
",3534
200,24316030,"2014/06/19 23:13:35 http: panic serving 127.0.0.1:60326: runtime error: index out of range
goroutine 5 [running]:
net/http.func·009()
    C:/Users/ADMINI~1/AppData/Local/Temp/2/makerelease250988475/go/src/pkg/net/http/server.go:1093 +0xb1
runtime.panic(0x6d1f20, 0xa977d7)
    C:/Users/ADMINI~1/AppData/Local/Temp/2/makerelease250988475/go/src/pkg/runtime/panic.c:248 +0x11b
main.loadPage(0xc08407a12a, 0x6, 0x332978, 0xaa7560, 0x3)
    C:/Users/Nicolas/Go/src/web1/main.go:55 +0x369
main.editHandler(0x332940, 0xc08400b140, 0xc084019750, 0xc08407a12a, 0x6)
    C:/Users/Nicolas/Go/src/web1/main.go:72 +0x34
main.func·001(0x332940, 0xc08400b140, 0xc084019750)
    C:/Users/Nicolas/Go/src/web1/main.go:121 +0xc9
net/http.HandlerFunc.ServeHTTP(0xc084024ae0, 0x332940, 0xc08400b140, 0xc084019750)
    C:/Users/ADMINI~1/AppData/Local/Temp/2/makerelease250988475/go/src/pkg/net/http/server.go:1220 +0x43
net/http.(*ServeMux).ServeHTTP(0xc0840381b0, 0x332940, 0xc08400b140, 0xc084019750)
    C:/Users/ADMINI~1/AppData/Local/Temp/2/makerelease250988475/go/src/pkg/net/http/server.go:1496 +0x166
net/http.serverHandler.ServeHTTP(0xc084005e10, 0x332940, 0xc08400b140, 0xc084019750)
    C:/Users/ADMINI~1/AppData/Local/Temp/2/makerelease250988475/go/src/pkg/net/http/server.go:1597 +0x171
net/http.(*conn).serve(0xc08403f580)
    C:/Users/ADMINI~1/AppData/Local/Temp/2/makerelease250988475/go/src/pkg/net/http/server.go:1167 +0x7ba
created by net/http.(*Server).Serve
    C:/Users/ADMINI~1/AppData/Local/Temp/2/makerelease250988475/go/src/pkg/net/http/server.go:1644 +0x28e
",1566
201,24361859,"parts:[map[content:Phillip,

This section pertains to terminated employees who are paid out in the year following the termination event.  The way the tax law works, the tax basis for your share distribution will be based on the closing stock price the day preceding notification to the transfer agent.  As such, we will distribute net shares calculating the proper withholding at fair market value the day prior to notifying the transfer agent.  We will be distributing the shares reflected on your 9/30/01 statement (6,606 shares plus cash for fractional shares).  If you would prefer to settle the taxes with a personal check, we can distribute gross shares.  Please let me know you preference.

As you know, we are in the process of transferring recordkeeping services from NTRC to Hewitt.  As such, we have a CPA, Larry Lewis, working with us to audit and set up transition files.  He has become our department expert on the PSA account (much more knowledgeable than myself)  and the various plan provision amendments.  If you would like, we can set up a conference call with you, myself, and Larry to go over the payment methodology.  Please let me know a date and time that is convenient for you.

Thanks,

Renee

 -----Original Message-----
From:   Allen, Phillip K.
Sent:   Thursday, November 01, 2001 8:26 AM
To: Ratcliff, Renee
Subject:

Renee,

Thank you for digging in to the issue of Deferred Phantom Stock Units.  It is clear that the payment will be made in shares.  However, I still don't understand which date will be used to determine the value and calculate how many shares.  The plan document under VII.  Amount of Benefit Payments reads ""The value of the shares, and resulting payment amount will be based on the closing price of Enron Corp. common stock on the January 1 before the date of payment, and such payment shall be made in shares of Enron Corp. common stock.""  Can you help me interpret this statement and work through the numbers on my account.

Thank you,

 Phillip Allen

 contentType:text/plain]]
",2033
202,24361859,"t := v[""parts""][0].(map[string]interface{})
",44
203,24361859,"panic: interface conversion: interface is []interface {}, not map[string]interface {}
",86
204,24361859,"{
    ""X-cc"": """", 
    ""From"": ""renee.ratcliff@enron.com"", 
    ""X-Folder"": ""\\PALLEN (Non-   Privileged)\\Allen, Phillip K.\\Inbox"", 
    ""Content-Transfer-Encoding"": ""7bit"", 
    ""X-bcc"": """", ""X-Origin"": ""Allen-P"", 
    ""To"": [""k..allen@enron.com""], 
    ""parts"": [{
      ""content"": ""Phillip,\r\n\r\nThis section pertains to terminated employees who are paid out in the year following the termination event.  The way the tax law works, the tax basis for your share distribution will be based on the closing stock price the day preceding notification to the transfer agent.  As such, we will distribute net shares calculating the proper withholding at fair market value the day prior to notifying the transfer agent.  We will be distributing the shares reflected on your 9/30/01 statement (6,606 shares plus cash for fractional shares).  If you would prefer to settle the taxes with a personal check, we can distribute gross shares.  Please let me know you preference.\r\n\r\nAs you know, we are in the process of transferring recordkeeping services from NTRC to Hewitt.  As such, we have a CPA, Larry Lewis, working with us to audit and set up transition files.  He has become our department expert on the PSA account (much more knowledgeable than myself)  and the various plan provision amendments.  If you would like, we can set up a conference call with you, myself, and Larry to go over the payment methodology.  Please let me know a date and time that is convenient for you.\r\n\r\nThanks,\r\n\r\nRenee\r\n\r\n -----Original Message-----\r\nFrom: \tAllen, Phillip K.  \r\nSent:\tThursday, November 01, 2001 8:26 AM\r\nTo:\tRatcliff, Renee\r\nSubject:\t\r\n\r\nRenee,\r\n\r\nThank you for digging in to the issue of Deferred Phantom Stock Units.  It is clear that the payment will be made in shares.  However, I still don't understand which date will be used to determine the value and calculate how many shares.  The plan document under VII.  Amount of Benefit Payments reads \""The value of the shares, and resulting payment amount will be based on the closing price of Enron Corp. common stock on the January 1 before the date of payment, and such payment shall be made in shares of Enron Corp. common stock.\""  Can you help me interpret this statement and work through the numbers on my account.\r\n\r\nThank you,\r\n\r\nPhillip Allen\r\n\r\n"", 

    ""contentType"": ""text/plain""}], 
    ""X-FileName"": ""PALLEN (Non-Privileged).pst"", 
    ""Mime-Version"": ""1.0"", 
    ""X-From"": ""Ratcliff, Renee "", 
    ""Date"": {""$date"": 1004725111000}, 
    ""X-To"": ""Allen, Phillip K. "", 
    ""Message-ID"": """", 
    ""Content-Type"": ""text/plain; charset=us-ascii"", ""Subject"": ""RE:""
}
",2674
205,24456511,"C:/Go/bin/go.exe build  [C:/Users/admins/Desktop/desktp/worm_scraper-master]
worm_scraper.go:11:2: cannot find package ""github.com/codegangsta/cli"" in any of:
    C:\Go\src\pkg\github.com\codegangsta\cli (from $GOROOT)
    C:\users\admins\gostuff\src\github.com\codegangsta\cli (from $GOPATH)
worm_scraper.go:12:2: cannot find package ""github.com/puerkitobio/goquery"" in any of:
    C:\Go\src\pkg\github.com\puerkitobio\goquery (from $GOROOT)
    C:\users\admins\gostuff\src\github.com\puerkitobio\goquery (from $GOPATH)
Error: process exited with code 1.
",556
206,24456511,"package main

import (
    ""errors""
    ""fmt""
    ""os""
    ""os/exec""
    ""regexp""
    ""strings""

    ""github.com/codegangsta/cli""
    ""github.com/puerkitobio/goquery""
)

const (
    MainSite        = ""https://parahumans.wordpress.com/""
    TableOfContents = ""https://parahumans.wordpress.com/table-of-contents/""
)

type Arc struct {
    Identifier string
    Title      string
    Chapters   []Chapter
}

type Chapter struct {
    Title      string
    Url        string
    Tags       []string
    Paragraphs []Paragraph
    Retries    int
    DatePosted string
}

type Paragraph string

// Format the paragraph
func (p *Paragraph) Format() {
    s := string(*p)

    // Handle emphasis
    s = strings.Replace(s, """", ""*"", -1)
    s = strings.Replace(s, """", ""*"", -1)
    s = strings.Replace(s, """", ""*"", -1)
    s = strings.Replace(s, """", ""*"", -1)

    // Handle bold
    s = strings.Replace(s, """", ""**"", -1)
    s = strings.Replace(s, """", ""**"", -1)
    s = strings.Replace(s, """", ""**"", -1)
    s = strings.Replace(s, """", ""**"", -1)

    // Remove new lines
    s = strings.Replace(s, ""\n"", """", -1)

    // And random double spaces
    s = strings.Replace(s, "".  "", "". "", -1)

    *p = Paragraph(s)
}

// Return the Arc that the given chapter belongs to
func (ch *Chapter) WhichArc(arcList []*Arc) (*Arc, error) {
    for _, arc := range arcList {
        if strings.Replace(ch.Title[:2], ""."", """", -1) == arc.Identifier {
            return arc, nil
        }
    }
    return &Arc{}, errors.New(""chapter '"" + ch.Title + ""' did not match any Arcs"")
}

// Parse a chapter and return it
func (ch *Chapter) Parse(done chan bool) {
    if ch.Retries > 3 {
        panic(""Chapter url '"" + ch.Url + ""' has timed out too many times"")
    }
    // Get the chapter
    if strings.HasPrefix(ch.Url, ""http"") == false {
        // Make sure it begins with http so goquery can use it
        ch.Url = ""https://"" + ch.Url
    }
    doc, err := goquery.NewDocument(ch.Url)
    if err != nil {
        // Try again
        ch.Retries++
        go ch.Parse(done)
        return
    }

    // Set the new chapter title
    ch.Title = doc.Find(""h1.entry-title"").Text()

    // Set the tags
    doc.Find("".entry-meta a[rel=tag]"").Each(func(_ int, s *goquery.Selection) {
        ch.Tags = append(ch.Tags, s.Text())
        if len(ch.Tags) == 0 {
            ch.Tags = append(ch.Tags, ""NONE"")
        }
    })

    // Get the date it was posted
    ch.DatePosted = doc.Find(""time.entry-date"").Text()

    // Now we'll get all the paragraphs
    doc.Find("".entry-content > p"").Each(func(_ int, s *goquery.Selection) {
        // Check for the previous/next links
        if len(s.Find(""a"").Nodes) > 0 {
            return
        }

        // Get the paragraph HTML
        st, _ := s.Html()
        para := Paragraph("""")

        // Get the actual paragraph
        if val, exists := s.Attr(""padding-left""); exists && val == ""30px"" {
            // Check to see if the paragraph is special (indented) block
            para = Paragraph(""    "" + st)
        } else if val, exists := s.Attr(""text-align""); exists && val == ""center"" {
            // Otherwise check to see if it's a separator paragraph
            para = Paragraph(""----------"")
        } else {
            // It's just a normal paragraph in this case
            para = Paragraph(st)
        }

        // And add the paragraph to the chapter
        para.Format()
        ch.Paragraphs = append(ch.Paragraphs, para)
    })

    // Finally, let's signal a success
    done <- true
}

// Return a slice of Arcs extracted from the table of contents
func ParseArcs(s string) []*Arc {
    arcs := []*Arc{}
    r, _ := regexp.Compile(`[0-9]+`)
    for _, line := range strings.Split(s, ""\n"") {
        line = strings.TrimSpace(line)
        if strings.HasPrefix(line, ""Arc"") {
            arcs = append(arcs, &Arc{
                Identifier: r.FindString(line),
                Title:      line,
            })
        } else if strings.HasPrefix(line, ""Epilogue"") {
            arcs = append(arcs, &Arc{
                Identifier: ""E"",
                Title:      line,
            })
        }
    }
    return arcs
}

func main() {
    // Define the app
    app := cli.NewApp()
    app.Name = ""Worm Scraper""
    app.Usage = ""A tool to let you get an updated EPUB copy of the serial web novel Worm, by Wildbow""
    app.Version = ""1.0""
    app.Author = ""Benjamin Harris""

    // Define the application flags
    app.Flags = []cli.Flag{
        cli.BoolFlag{""pdf"", ""Save the book as a PDF instead of an EPUB, if possible""},
        cli.BoolFlag{""with-link"", ""Include a link to the chapter online""},
        cli.BoolFlag{""with-tags"", ""Include the tags each chapter was posted under""},
        cli.BoolFlag{""with-date"", ""Include the date each chapter was posted""},
    }

    // The heart of the application
    app.Action = func(context *cli.Context) {
        // Starting the program
        fmt.Println(""Starting to scrape Worm"")

        // Get the list of arcs from the table of contents
        fmt.Println(""Gathering links from table of contents..."")
        contents, err := goquery.NewDocument(TableOfContents)
        if err != nil {
            panic(""Failed to get the table of contents! "" + err.Error())
        }

        // Parse the arcs
        arcs := ParseArcs(contents.Find("".entry-content"").Text())

        // Now get the links for the arc chapters
        contents.Find("".entry-content a:not([class*=share-icon])"").Each(func(_ int, s *goquery.Selection) {
            ch := Chapter{}
            ch.Title = strings.Replace(strings.TrimSpace(s.Text()), ""\n"", """", -1)
            ch.Url, _ = s.Attr(""href"")

            if ch.Title == """" {
                return
            }

            arc, _ := ch.WhichArc(arcs)
            arc.Chapters = append(arc.Chapters, ch)
        })

        // Manually add missing chapter in Epilogue
        c := Chapter{
            Title: ""E.2"",
            Url:   ""https://parahumans.wordpress.com/2013/11/05/teneral-e-2/"",
        }
        a, _ := c.WhichArc(arcs)
        a.Chapters = append(a.Chapters, c)
        copy(a.Chapters[1+1:], a.Chapters[1:])
        a.Chapters[1] = c

        // Now start getting the chapters
        chapters := 0
        done := make(chan bool)
        for _, arc := range arcs {
            for i, _ := range arc.Chapters {
                chapters++
                go arc.Chapters[i].Parse(done)
            }
        }

        fmt.Println(""Starting to parse"", chapters, ""chapters"")
        fmt.Print(""Finished: "")

        totalChapters := chapters
        for {
            select {
            case <-done:
                chapters--
                fmt.Print(totalChapters-chapters, "","")
            }
            if chapters == 0 {
                // We're done with all the chapters
                close(done)
                fmt.Println()
                break
            }
        }

        // And let's write all this stuff to a file now
        fmt.Println(""Saving results to file..."")
        f, err := os.OpenFile(""Worm.md"", os.O_RDWR|os.O_CREATE|os.O_EXCL, 0666)
        if err != nil {
            panic(err)
        }
        defer f.Close()

        // Define pagebreak
        PageBreak := ""\n\n""

        // Write the cover
        f.WriteString(""# Worm\n\n"")
        f.WriteString(""By Wildbow\n\n"")
        f.WriteString(""Website: "" + MainSite)

        // Now loop through the Arcs
        for _, arc := range arcs {
            f.WriteString(PageBreak + ""# "" + arc.Title)
            for _, chapter := range arc.Chapters {
                f.WriteString(""\n\n"")
                f.WriteString(""## "" + chapter.Title + ""\n\n"")
                if context.Bool(""with-tags"") {
                    f.WriteString(""**Tags:** "" + strings.Join(chapter.Tags, "", "") + ""  "")
                }
                if context.Bool(""with-date"") {
                    f.WriteString(""**Date:** "" + chapter.DatePosted + ""  "")
                }
                if context.Bool(""with-link"") {
                    f.WriteString(""**Link:** "" + chapter.Url + ""  "")
                }
                f.WriteString(""\n\n"")

                // Now save the chapter's paragraphs
                for _, p := range chapter.Paragraphs {
                    f.WriteString(string(p) + ""\n\n"")
                }
            }
        }

        // Now let's try to convert the markdown file into an ebook format (epub, pdf)
        fmt.Print(""Attempting to convert Markdown file... "")
        cmdText := []string{""-S"", ""Worm.md"", ""--epub-chapter-level"", ""2"", ""-o"", ""Worm.epub""}
        if context.Bool(""pdf"") {
            cmdText = []string{""Worm.md"", ""-o"", ""Worm.pdf""}
            PageBreak = ``
        }
        cmd := exec.Command(""pandoc"", cmdText...)
        err = cmd.Run()
        if err != nil {
            fmt.Println(""Conversion failed! Make sure you've installed Pandoc (http://johnmacfarlane.net/pandoc/installing.html) if you want to convert the generated Markdown file to an ebook compatible format. In the meantime, we've left you the Markdown file."")
        } else {
            _ = os.Remove(""Worm.md"")
            fmt.Println(""Completed!"")
        }
    }

    // Run the application
    app.Run(os.Args)
}
",9250
207,24640352,"main.go, models.go and middleware.go",36
208,24640352,"go get github.com/zenazn/goji
",30
209,24640352,"src/github.com/zenazn/goji/example
",35
210,24640352,go run main.go,14
211,24640352,middleware.go,13
212,24640352,models.go,9
213,24640352,"./main.go:39: undefined: PlainText
./main.go:47: undefined: SuperSecure
./main.go:73: undefined: Greets
./main.go:74: undefined: Greets
./main.go:85: undefined: Greet
./main.go:98: undefined: Greets
./main.go:99: undefined: Greets
./main.go:107: undefined: Users
./main.go:116: undefined: Greets
./main.go:116: too many errors
",327
214,24640352,main.go,7
215,24640352,middleware.go,13
216,24640352,models.go,9
217,24640352,"package main

import (
    ""fmt""
    ""io""
    ""net/http""
    ""regexp""
    ""strconv""

    ""github.com/zenazn/goji""
    ""github.com/zenazn/goji/param""
    ""github.com/zenazn/goji/web""
)

// Note: the code below cuts a lot of corners to make the example app simple.

func main() {
    // Add routes to the global handler
    goji.Get(""/"", Root)
    // Fully backwards compatible with net/http's Handlers
    goji.Get(""/greets"", http.RedirectHandler(""/"", 301))
    // Use your favorite HTTP verbs
    goji.Post(""/greets"", NewGreet)
    // Use Sinatra-style patterns in your URLs
    goji.Get(""/users/:name"", GetUser)
    // Goji also supports regular expressions with named capture groups.
    goji.Get(regexp.MustCompile(`^/greets/(?P\d+)$`), GetGreet)

    // Middleware can be used to inject behavior into your app. The
    // middleware for this application are defined in middleware.go, but you
    // can put them wherever you like.
    goji.Use(PlainText)

    admin := web.New()
    goji.Handle(""/admin/*"", admin)
    admin.Use(SuperSecure)

    // Goji's routing, like Sinatra's, is exact: no effort is made to
    // normalize trailing slashes.
    goji.Get(""/admin"", http.RedirectHandler(""/admin/"", 301))


    admin.Get(""/admin/"", AdminRoot)
    admin.Get(""/admin/finances"", AdminFinances)

    // Use a custom 404 handler
    goji.NotFound(NotFound)

    goji.Serve()
}
",1379
218,24640352,"package main

import (
    ""encoding/base64""
    ""net/http""
    ""strings""

    ""github.com/zenazn/goji/web""
)

// PlainText sets the content-type of responses to text/plain.
func PlainText(h http.Handler) http.Handler {
    fn := func(w http.ResponseWriter, r *http.Request) {
        w.Header().Set(""Content-Type"", ""text/plain"")
        h.ServeHTTP(w, r)
    }
    return http.HandlerFunc(fn)
}

// Nobody will ever guess this!
const Password = ""admin:admin""

// SuperSecure is HTTP Basic Auth middleware for super-secret admin page. Shhhh!
func SuperSecure(c *web.C, h http.Handler) http.Handler {
    fn := func(w http.ResponseWriter, r *http.Request) {
        auth := r.Header.Get(""Authorization"")
        if !strings.HasPrefix(auth, ""Basic "") {
            pleaseAuth(w)
            return
        }

        password, err := base64.StdEncoding.DecodeString(auth[6:])
        if err != nil || string(password) != Password {
            pleaseAuth(w)
            return
        }

        h.ServeHTTP(w, r)
    }
    return http.HandlerFunc(fn)
}

func pleaseAuth(w http.ResponseWriter) {
    w.Header().Set(""WWW-Authenticate"", `Basic realm=""Gritter""`)
    w.WriteHeader(http.StatusUnauthorized)
    w.Write([]byte(""Go away!\n""))
}
",1237
219,24640352,"package main

import (
    ""fmt""
    ""io""
    ""time""
)

// A Greet is a 140-character micro-blogpost that has no resemblance whatsoever
// to the noise a bird makes.
type Greet struct {
    User    string    `param:""user""`
    Message string    `param:""message""`
    Time    time.Time `param:""time""`
}

// Store all our greets in a big list in memory, because, let's be honest, who's
// actually going to use a service that only allows you to post 140-character
// messages?
var Greets = []Greet{
    {""carl"", ""Welcome to Gritter!"", time.Now()},
    {""alice"", ""Wanna know a secret?"", time.Now()},
    {""bob"", ""Okay!"", time.Now()},
    {""eve"", ""I'm listening..."", time.Now()},
}

// Write out a representation of the greet
func (g Greet) Write(w io.Writer) {
    fmt.Fprintf(w, ""%s\n@%s at %s\n---\n"", g.Message, g.User,
        g.Time.Format(time.UnixDate))
}

// A User is a person. It may even be someone you know. Or a rabbit. Hard to say
// from here.
type User struct {
    Name, Bio string
}

// All the users we know about! There aren't very many...
var Users = map[string]User{
    ""alice"": {""Alice in Wonderland"", ""Eating mushrooms""},
    ""bob"":   {""Bob the Builder"", ""Making children dumber""},
    ""carl"":  {""Carl Jackson"", ""Duct tape aficionado""},
}

// Write out the user
func (u User) Write(w io.Writer, handle string) {
    fmt.Fprintf(w, ""%s (@%s)\n%s\n"", u.Name, handle, u.Bio)
}
",1396
220,24708372,go-sql-driver/mysql,19
221,24708372,"2014/07/13 15:29:54 INFO template rendering: index
2014/07/13 15:29:54 METRIC, URL: /, HANDLER TIME: 7.2339ms, CTX TIME: 5.0894ms, TOTAL TIME: 12.3258ms
",153
222,24708372,"[MySQL] 2014/07/13 16:00:09 packets.go:32: read tcp remote-mysql-server-address:3306: connection timed out
[MySQL] 2014/07/13 16:00:09 packets.go:118: write tcp remote-mysql-server-address:3306: broken pipe
2014/07/13 16:00:10 INFO template rendering: index
2014/07/13 16:00:10 METRIC, URL: /, HANDLER TIME: 8.8574ms, CTX TIME: 31m19.2606723s, TOTAL TIME: 31m19.2695329s
",371
223,24708372,"user@govm1:~$ wget http://localhost
--2014-07-13 17:11:18--  http://localhost/
Resolving localhost (localhost)... 127.0.0.1
Connecting to localhost (localhost)|127.0.0.1|:80... connected.
HTTP request sent, awaiting response... Read error (Connection timed out) in headers.
Retrying.

--2014-07-13 17:26:19--  (try: 2)  http://localhost/
Connecting to localhost (localhost)|127.0.0.1|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: `index.html.4'

    [                                                                                   ] 6,310       --.-K/s   in 0.001s

2014-07-13 17:26:20 (9.61 MB/s) - `index.html.4' saved [6310]
",693
224,24708372,"[MySQL] 2014/07/13 17:26:57 packets.go:32: read tcp remote-mysql-server-address:3306: connection timed out
[MySQL] 2014/07/13 17:26:57 packets.go:118: write tcp remote-mysql-server-address:3306: broken pipe
2014/07/13 17:26:57 INFO template rendering: index
2014/07/13 17:26:57 METRIC, URL: /, HANDLER TIME: 6.8938ms, CTX TIME: 15m39.1718434s, TOTAL TIME: 15m39.1787398s
",371
225,24708372,wget http://localhost,21
226,24708372,"// global handler for our DB
var db *sql.DB

// CLI parameter
var dbdsn string

func init() {

    flag.StringVar(&dbdsn, ""dbdsn"", ""root:root@tcp(localhost:3306)/prod?timeout=5s&tls=false&autocommit=true"", ""Specifies the MySql DSN connection."")
    flag.Parse()

    var err error
    db, err = sql.Open(""mysql"", dbdsn)
    if err != nil {
        log.Printf(""ERROR in sql.Open(): %v"", err)
    }

    //db.SetMaxIdleConns(5)

    // verify the DSN is setup properly1
    err = db.Ping()
    if err != nil {
        panic(""PANIC when pinging db: "" + err.Error()) // proper error handling instead of panic in your app
    }
}

// **********
// * omitted is the Gorilla MUX router and http handler registrations
// **********

func ArticleHandler(w http.ResponseWriter, r *http.Request, c *Context) (err error) {

    m := NewArticle(c)
    id := c.Vars[""id""]

    var pid int
    var title, body, excerpt, date, slug, fi, fv, region, region_slug string
    err = db.QueryRow(
        ""SELECT p.ID, p.post_title, p.post_content, p.post_excerpt, p.post_date, p.post_name, ""+
            ""(SELECT fpim.meta_value FROM wp_postmeta fpim WHERE fpim.meta_key = '_wp_attached_file' AND fpim.post_id = (SELECT fpim2.meta_value FROM wp_postmeta fpim2 WHERE fpim2.post_id = p.ID AND fpim2.meta_key = '_thumbnail_id' LIMIT 1) LIMIT 1) AS featured_image, ""+
            ""(SELECT fpim3.meta_value FROM wp_postmeta fpim3 WHERE fpim3.meta_key = 'fv_video' AND fpim3.post_id = p.ID LIMIT 1) AS featured_video, ""+
            ""t.name as region, t.slug as region_slug ""+
            ""FROM wp_posts p ""+
            ""JOIN wp_term_relationships tr ON tr.object_id=p.ID ""+
            ""JOIN wp_term_taxonomy tt ON tt.term_taxonomy_id=tr.term_taxonomy_id ""+
            ""JOIN wp_terms t ON t.term_id=tt.term_id ""+
            ""WHERE p.post_name=? AND p.post_type='post' AND p.post_status='publish' AND p.post_date <= UTC_TIMESTAMP()""+
            ""AND tr.object_id=p.ID AND tt.parent = (SELECT t3.term_id FROM wp_terms t3 WHERE t3.name=? LIMIT 1) LIMIT 1"",
        id, RegionsParentCategory).
        Scan(&pid, &title, &body, &excerpt, &date, &slug, &fi, &fv, ®ion, ®ion_slug)

    if err != nil {
        if err == sql.ErrNoRows {

            // snipped code for redirects

            // article was not found
            return handleNotFound(w, r, c)

        } else {
            log.Printf(""ERROR in .Scan(): %v"", err)
        }
    } else {
        m.Region = Region{
            Name: region,
            Slug: region_slug,
        }
        m.Id = pid
        m.Title = title
        m.Body = template.HTML(body) // render the raw html
        m.Excerpt = excerpt
        m.Datetime = date
        m.Slug = slug
        m.FeaturedImageUrl = fi
        m.FeaturedVideoUrl = fv
    }

    web.RenderTemplate(w, ""article"", m)
    return
}
",2825
227,24708372,*db,3
228,24708372,"rows2, err := db.Query(
    ""SELECT p.post_title, p.post_name ""+
        ""FROM wp_posts p ""+
        ""WHERE p.post_type='page' AND p.post_status='publish' AND p.post_date <= UTC_TIMESTAMP() ""+
        ""AND p.post_parent = (SELECT p2.ID FROM wp_posts p2 WHERE p2.post_name=? LIMIT 1) ""+
        ""ORDER BY p.menu_order"",
    FooterPagesParentNameSlug)
if err != nil {
    log.Printf(""ERROR in AllPages .Query() : %v"", err)
} else {
    defer rows2.Close()
    c.AllFooterPages = make([]FooterPage, 0)
    for rows2.Next() {
        var name, slug string
        err := rows2.Scan(&name, &slug)
        if err != nil {
            log.Printf(""ERROR in AllPages row.Scan() : %v"", err)
        } else {
            p := FooterPage{
                Page: Page{
                    Title: name,
                    Slug:  slug,
                },
            }
            c.AllFooterPages = append(c.AllFooterPages, p)
        }
    }
}
",931
229,24708372,defer rows2.Close(),19
230,24708372,no response,11
231,24937062,"tcpSock, err := net.Listen(""tcp"", ""0.0.0.0:8080"")
",50
232,24937062,"unixSock, err := net.Listen(""unix"", ""/var/app/server.sock"")
",60
233,24937062,net.Listen(),12
234,24937062,net.ListenTCP,13
235,24937062,net.ListenUnix,14
236,24937062,"func Listen(net, laddr string) (Listener, error) {
   la, err := resolveAddr(""listen"", net, laddr, noDeadline)
   if err != nil {
      return nil, &OpError{Op: ""listen"", Net: net, Addr: nil, Err: err}
   }
   var l Listener
   switch la := la.toAddr().(type) {
   case *TCPAddr:
      l, err = ListenTCP(net, la)
   case *UnixAddr:
      l, err = ListenUnix(net, la)
   default:
      return nil, &OpError{Op: ""listen"", Net: net, Addr: la, Err: &AddrError{Err: ""unexpected address type"", Addr: laddr}}
   }
   if err != nil {
      return nil, err // l is non-nil interface containing nil pointer
   }
   return l, nil
}
",622
237,24937062,net.ListenUDP,13
238,24937062,net.ListenPacket(),18
239,24937062,"pListener, err := net.ListenPacket(""ip4"", ""0.0.0.0:9090"")
",58
240,24937062,net.Listen(),12
241,24937062,"func ListenPacket(net, laddr string) (PacketConn, error) {
    la, err := resolveAddr(""listen"", net, laddr, noDeadline)
    if err != nil {
        return nil, &OpError{Op: ""listen"", Net: net, Addr: nil, Err: err}
    }
    var l PacketConn
    switch la := la.toAddr().(type) {
    case *UDPAddr:
        l, err = ListenUDP(net, la)
    case *IPAddr:
        l, err = ListenIP(net, la)
    case *UnixAddr:
        l, err = ListenUnixgram(net, la)
    default:
        return nil, &OpError{Op: ""listen"", Net: net, Addr: la, Err: &AddrError{Err: ""unexpected address type"", Addr: laddr}}
    }
    if err != nil {
        return nil, err // l is non-nil interface containing nil pointer
    }
    return l, nil
}
",711
242,24937062,net,3
243,24937062,Read(),6
244,24937062,Conn,4
245,24937062,net.Conn,8
246,24937062,"type Conn interface {
    // Read reads data from the connection.
    // Read can be made to time out and return a Error with Timeout() == true
    // after a fixed time limit; see SetDeadline and SetReadDeadline.
    Read(b []byte) (n int, err error)

    // Write writes data to the connection.
    // Write can be made to time out and return a Error with Timeout() == true
    // after a fixed time limit; see SetDeadline and SetWriteDeadline.
    Write(b []byte) (n int, err error)

    // Close closes the connection.
    // Any blocked Read or Write operations will be unblocked and return errors.
    Close() error

    // LocalAddr returns the local network address.
    LocalAddr() Addr

    // RemoteAddr returns the remote network address.
    RemoteAddr() Addr

    // SetDeadline sets the read and write deadlines associated
    // with the connection. It is equivalent to calling both
    // SetReadDeadline and SetWriteDeadline.
    //
    // A deadline is an absolute time after which I/O operations
    // fail with a timeout (see type Error) instead of
    // blocking. The deadline applies to all future I/O, not just
    // the immediately following call to Read or Write.
    //
    // An idle timeout can be implemented by repeatedly extending
    // the deadline after successful Read or Write calls.
    //
    // A zero value for t means I/O operations will not time out.
    SetDeadline(t time.Time) error

    // SetReadDeadline sets the deadline for future Read calls.
    // A zero value for t means Read will not time out.
    SetReadDeadline(t time.Time) error

    // SetWriteDeadline sets the deadline for future Write calls.
    // Even if write times out, it may return n > 0, indicating that
    // some of the data was successfully written.
    // A zero value for t means Write will not time out.
    SetWriteDeadline(t time.Time) error
}
",1877
247,24937062,net.Read(),10
248,24937062,Read(),6
249,24937062,net.Conn,8
250,24937062,net.PacketConn,14
251,24937062,"type PacketConn interface {
    // ReadFrom reads a packet from the connection,
    // copying the payload into b.  It returns the number of
    // bytes copied into b and the return address that
    // was on the packet.
    // ReadFrom can be made to time out and return
    // an error with Timeout() == true after a fixed time limit;
    // see SetDeadline and SetReadDeadline.
    ReadFrom(b []byte) (n int, addr Addr, err error)

    // WriteTo writes a packet with payload b to addr.
    // WriteTo can be made to time out and return
    // an error with Timeout() == true after a fixed time limit;
    // see SetDeadline and SetWriteDeadline.
    // On packet-oriented connections, write timeouts are rare.
    WriteTo(b []byte, addr Addr) (n int, err error)

    // Close closes the connection.
    // Any blocked ReadFrom or WriteTo operations will be unblocked and return errors.
    Close() error

    // LocalAddr returns the local network address.
    LocalAddr() Addr

    // SetDeadline sets the read and write deadlines associated
    // with the connection.
    SetDeadline(t time.Time) error

    // SetReadDeadline sets the deadline for future Read calls.
    // If the deadline is reached, Read will fail with a timeout
    // (see type Error) instead of blocking.
    // A zero value for t means Read will not time out.
    SetReadDeadline(t time.Time) error

    // SetWriteDeadline sets the deadline for future Write calls.
    // If the deadline is reached, Write will fail with a timeout
    // (see type Error) instead of blocking.
    // A zero value for t means Write will not time out.
    // Even if write times out, it may return n > 0, indicating that
    // some of the data was successfully written.
    SetWriteDeadline(t time.Time) error
}
",1777
252,24937062,net,3
253,25107540,"func main() {
    inFile, err := os.Open(*srcFile)
    if err != nil {
        log.LogErrorf(""Error opening dump: %v"", err)
        return
    }
    defer inFile.Close()

    var wg sync.WaitGroup
    input := make(chan []byte, 51)


    go func() {
        wg.Add(1)
        for line := range input {
            log.Printf(""Bytes: %s"", line)
            // process the line
        }
        wg.Done()
    }()

    scanner := bufio.NewScanner(inFile)
    count := 0
    for scanner.Scan() {
        count++
        log.Printf(""Scanned: %d"", count)
        if err := scanner.Err(); err != nil {
            log.LogErrorf(""Error scanning: %v"", err)
        }
        newestBytes := scanner.Bytes()
        log.Printf(""Bytes: %s"", newestBytes)
        input <- newestBytes
    }
    close(input)
    wg.Wait()
}
",811
254,25107540,"2014/08/03 17:49:25 Scanned: 42
2014/08/03 17:49:25 Bytes:       Citations talk
2014/08/03 17:49:25 Scanned: 43
2014/08/03 17:49:25 Bytes:       Sign gloss
2014/08/03 17:49:25 Scanned: 44
2014/08/03 17:49:25 Bytes:       Sign gloss talk
2014/08/03 17:49:25 Scanned: 45
2014/08/03 17:49:25 Bytes:       Module
2014/08/03 17:49:25 Scanned: 46
2014/08/03 17:49:25 Bytes:       Module talk
2014/08/03 17:49:25 Scanned: 47
2014/08/03 17:49:25 Bytes:     
2014/08/03 17:49:25 Scanned: 48
2014/08/03 17:49:25 Bytes:   
2014/08/03 17:49:25 Scanned: 49
2014/08/03 17:49:25 Bytes:   
2014/08/03 17:49:25 Scanned: 50
2014/08/03 17:49:25 Bytes:     Wiktionary:Welcome, newcomers
2014/08/03 17:49:25 Scanned: 51
2014/08/03 17:49:25 Bytes:     4
2014/08/03 17:49:25 Scanned: 52
2014/08/03 17:49:25 Bytes:     6
2014/08/03 17:49:25 Scanned: 53
2014/08/03 17:49:25 Bytes:     edit=autoconfirmed:move=sysop
2014/08/03 17:49:25 Scanned: 54
2014/08/03 17:49:25 Bytes:     
2014/08/03 17:49:25 Scanned: 55
2014/08/03 17:49:25 Bytes:       24557508
2014/08/03 17:49:25 Scanned: 56
2014/08/03 17:49:25 Bytes:       19020708
2014/08/03 17:49:25 Scanned: 57
2014/08/03 17:49:25 Bytes:       2013-12-30T13:50:49Z
2014/08/03 17:49:25 Scanned: 58
2014/08/03 17:49:25 Bytes:       
2014/08/03 17:49:25 Scanned: 59
",1286
255,25107540,"Bytes:       Module
2014/08/03 17:40:52 Bytes:       Module talk
2014/08/03 17:40:52 Bytes:     
2014/08/03 17:40:52 Bytes:   
2014/08/03 17:40:52 Bytes:   
2014/08/03 17:40:52 Bytes:     Wiktionary:Welcome, newcomers
2014/08/03 17:40:52 Scanned: 52
2014/08/03 17:40:52 Scanned: 53
2014/08/03 17:40:52 Scanned: 54
2014/08/03 17:40:52 Scanned: 55
2014/08/03 17:40:52 Scanned: 56
2014/08/03 17:40:52 Scanned: 57
2014/08/03 17:40:52 Scanned: 58
2014/08/03 17:40:52 Scanned: 59
2014/08/03 17:40:52 Scanned: 60
2014/08/03 17:40:52 Scanned: 61
2014/08/03 17:40:52 Scanned: 62
2014/08/03 17:40:52 Scanned: 63
2014/08/03 17:40:52 Scanned: 64
2014/08/03 17:40:52 Scanned: 65
2014/08/03 17:40:52 Scanned: 66
2014/08/03 17:40:52 Scanned: 67
2014/08/03 17:40:52 Scanned: 68
2014/08/03 17:40:52 Scanned: 69
2014/08/03 17:40:52 Scanned: 70
2014/08/03 17:40:52 Scanned: 71
2014/08/03 17:40:52 Scanned: 72
2014/08/03 17:40:52 Scanned: 73
2014/08/03 17:40:52 Scanned: 74
2014/08/03 17:40:52 Scanned: 75
2014/08/03 17:40:52 Scanned: 76
2014/08/03 17:40:52 Scanned: 77
2014/08/03 17:40:52 Scanned: 78
2014/08/03 17:40:52 Scanned: 79
2014/08/03 17:40:52 Scanned: 80
2014/08/03 17:40:52 Scanned: 81
2014/08/03 17:40:52 Scanned: 82
2014/08/03 17:40:52 Scanned: 83
2014/08/03 17:40:52 Scanned: 84
2014/08/03 17:40:52 Scanned: 85
2014/08/03 17:40:52 Scanned: 86
2014/08/03 17:40:52 Scanned: 87
2014/08/03 17:40:52 Scanned: 88
2014/08/03 17:40:52 Scanned: 89
2014/08/03 17:40:52 Scanned: 90
2014/08/03 17:40:52 Scanned: 91
2014/08/03 17:40:52 Scanned: 92
2014/08/03 17:40:52 Scanned: 93
2014/08/03 17:40:52 Scanned: 94
2014/08/03 17:40:52 Scanned: 95
2014/08/03 17:40:52 Scanned: 96
2014/08/03 17:40:52 Scanned: 97
2014/08/03 17:40:52 Scanned: 98
2014/08/03 17:40:52 Scanned: 99
2014/08/03 17:40:52 Scanned: 100
2014/08/03 17:40:52 Scanned: 101
2014/08/03 17:40:52 Scanned: 102
2014/08/03 17:40:52 Bytes: nd other refer
2014/08/03 17:40:52 Bytes: nce and instru
2014/08/03 17:40:52 Bytes: tional materials. It stipulates that any copy of the material,
2014/08/03 17:40:52 Bytes: even if modifi
2014/08/03 17:40:52 Bytes: d, carry the same licen
2014/08/03 17:40:52 Bytes: e. Those copies may be sold but, if
2014/08/03 17:40:52 Bytes: produced in quantity, have to be made available i
2014/08/03 17:40:52 Bytes:  a format which fac
2014/08/03 17:40:52 Bytes: litates further editing. 
",2360
256,25175111,TokensStruct,12
257,25175111,TokensCount,11
258,25175111,Trainer,7
259,25175111,TokensCount,11
260,25175111,TokensStruct,12
261,25175111,TokensStruct,12
262,25175111,dictionary,10
263,25175111,dictionary,10
264,25175111,dictionary,10
265,25175111,runtime.GC(),12
266,25175111,GetTokens(),11
267,25175111,LoadZip(),9
268,25175111,tokens,6
269,25175111,Start(),7
270,25175111,"package main

import (
    ""bytes""
    ""code.google.com/p/go.text/transform""
    ""code.google.com/p/go.text/unicode/norm""
    ""compress/zlib""
    ""encoding/gob""
    ""fmt""
    ""github.com/AlasdairF/BinSearch""
    ""io/ioutil""
    ""os""
    ""regexp""
    ""runtime""
    ""strings""
    ""unicode""
    ""unicode/utf8""
)

type TokensStruct struct {
    binsearch.Key_string
    Value [][5]uint32
}

type Trainer struct {
    Tokens      TokensStruct
    TokensCount uint
}

func checkErr(err error) {
    if err == nil {
        return
    }
    fmt.Println(`Some Error:`, err)
    panic(err)
}

// Local helper function for normalization of UTF8 strings.
func isMn(r rune) bool {
    return unicode.Is(unicode.Mn, r) // Mn: nonspacing marks
}

// This map is used by RemoveAccents function to convert non-accented characters.
var transliterations = map[rune]string{'Æ': ""E"", 'Ð': ""D"", 'Ł': ""L"", 'Ø': ""OE"", 'Þ': ""Th"", 'ß': ""ss"", 'æ': ""e"", 'ð': ""d"", 'ł': ""l"", 'ø': ""oe"", 'þ': ""th"", 'Œ': ""OE"", 'œ': ""oe""}

//  removeAccentsBytes converts accented UTF8 characters into their non-accented equivalents, from a []byte.
func removeAccentsBytesDashes(b []byte) ([]byte, error) {
    mnBuf := make([]byte, len(b))
    t := transform.Chain(norm.NFD, transform.RemoveFunc(isMn), norm.NFC)
    n, _, err := t.Transform(mnBuf, b, true)
    if err != nil {
        return nil, err
    }
    mnBuf = mnBuf[:n]
    tlBuf := bytes.NewBuffer(make([]byte, 0, len(mnBuf)*2))
    for i, w := 0, 0; i < len(mnBuf); i += w {
        r, width := utf8.DecodeRune(mnBuf[i:])
        if r == '-' {
            tlBuf.WriteByte(' ')
        } else {
            if d, ok := transliterations[r]; ok {
                tlBuf.WriteString(d)
            } else {
                tlBuf.WriteRune(r)
            }
        }
        w = width
    }
    return tlBuf.Bytes(), nil
}

func LoadZip(filename string) ([]byte, error) {
    // Open file for reading
    fi, err := os.Open(filename)
    if err != nil {
        return nil, err
    }
    defer fi.Close()
    // Attach ZIP reader
    fz, err := zlib.NewReader(fi)
    if err != nil {
        return nil, err
    }
    defer fz.Close()
    // Pull
    data, err := ioutil.ReadAll(fz)
    if err != nil {
        return nil, err
    }
    return norm.NFC.Bytes(data), nil // return normalized
}

func getTokens(pibn string) []string {
    var data []byte
    var err error
    data, err = LoadZip(`/storedir/` + pibn + `/text.zip`)
    checkErr(err)
    data, err = removeAccentsBytesDashes(data)
    checkErr(err)
    data = bytes.ToLower(data)
    data = reg2.ReplaceAll(data, []byte(""$2"")) // remove contractions
    data = reg.ReplaceAllLiteral(data, nil)
    tokens := strings.Fields(string(data))
    return tokens
}

func (t *Trainer) Start() {
    data, err := ioutil.ReadFile(`list.txt`)
    checkErr(err)
    pibns := bytes.Fields(data)
    for i, pibn := range pibns {
        tokens := getTokens(string(pibn))
        t.addTokens(tokens)
        if i%100 == 0 {
            runtime.GC() // I added this just to try to stop the memory craziness, but it makes no difference
        }
    }
}

func (t *Trainer) addTokens(tokens []string) {
    for _, tok := range tokens {
        if _, ok := dictionary[tok]; ok {
            if indx, ok2 := t.Tokens.Find(tok); ok2 {
                ar := t.Tokens.Value[indx]
                ar[0]++
                t.Tokens.Value[indx] = ar
                t.TokensCount++
            } else {
                t.Tokens.AddKeyAt(tok, indx)
                t.Tokens.Value = append(t.Tokens.Value, [5]uint32{0, 0, 0, 0, 0})
                copy(t.Tokens.Value[indx+1:], t.Tokens.Value[indx:])
                t.Tokens.Value[indx] = [5]uint32{1, 0, 0, 0, 0}
                t.TokensCount++
            }
        }
    }
    return
}

func LoadDictionary() {
    dictionary = make(map[string]bool)
    data, err := ioutil.ReadFile(`dictionary`)
    checkErr(err)
    words := bytes.Fields(data)
    for _, word := range words {
        strword := string(word)
        dictionary[strword] = false
    }
}

var reg = regexp.MustCompile(`[^a-z0-9\s]`)
var reg2 = regexp.MustCompile(`\b(c|l|all|dall|dell|nell|sull|coll|pell|gl|agl|dagl|degl|negl|sugl|un|m|t|s|v|d|qu|n|j)'([a-z])`) //contractions
var dictionary map[string]bool

func main() {
    trainer := new(Trainer)
    LoadDictionary()
    trainer.Start()
}
",4373
271,25268071,openssl_public_decrypt,22
272,25268071,openssl_sign,12
273,25268071,"<?php

$data = ""TEST DATA TO COMPUTE"";

$privKeyPEM = ""-----BEGIN RSA PRIVATE KEY-----
MIIBOgIBAAJBAK3ADijXKw72+YbC5QKK2y7IosCp7rWOhTf8Ph07ZA0KjdbKtfL/
7dmNKjSP6EkC/DJUWfZJNLIlGOtDLLA/AnsCAwEAAQJAQj9kJrZDuKT6ZyOQZfPD
tobRZ1xjo93/dWU72bF3aHDo4ILMy2Kigy5yhZU0ZGjOuPv5eUOLRe/yxYQf6B5J
AQIhANbhfZ4QJC8dLXAqcsxOXuLgztzbKixUre0gnhiVSd1hAiEAzv+sHJ4PMjKs
Iuf6/nUI9XFgQQRd+NGRovyHRZC18VsCIAX7AKQFjvxAs6MLi2ZkR//IgfljoCjb
snuHDN9iSEwBAiEAmAc1XCtGE+Mdg+GG+T3xn3pubDIN5oHcia0YmKIIzsMCIEy1
fWM5cIJ9bAUExKB6MV8PF+9EjDvXzbSk1/Ycta8z
-----END RSA PRIVATE KEY-----"";

// Parse private key
$privkey = openssl_pkey_get_private($privKeyPEM);
if (!$privkey) {
    exit(""Could not parse private key"");
}

// Compute the signature
$signature = '';
$ok = openssl_sign($data, $signature, $privkey, OPENSSL_ALGO_SHA1); //SHA1 of $data is computed automatically by this function
if (!$ok) {
    exit(""Could not compute signature"");
}

// Print the output
print base64_encode($signature);
",961
274,25268071,"package main

import (
    ""crypto""
    ""crypto/rand""
    ""crypto/rsa""
    ""crypto/sha1""
    ""crypto/x509""
    ""encoding/base64""
    ""encoding/pem""
    ""fmt""
    ""log""
)

const (
    data = ""TEST DATA TO COMPUTE""

    privKeyPEM = `-----BEGIN RSA PRIVATE KEY-----
MIIBOgIBAAJBAK3ADijXKw72+YbC5QKK2y7IosCp7rWOhTf8Ph07ZA0KjdbKtfL/
7dmNKjSP6EkC/DJUWfZJNLIlGOtDLLA/AnsCAwEAAQJAQj9kJrZDuKT6ZyOQZfPD
tobRZ1xjo93/dWU72bF3aHDo4ILMy2Kigy5yhZU0ZGjOuPv5eUOLRe/yxYQf6B5J
AQIhANbhfZ4QJC8dLXAqcsxOXuLgztzbKixUre0gnhiVSd1hAiEAzv+sHJ4PMjKs
Iuf6/nUI9XFgQQRd+NGRovyHRZC18VsCIAX7AKQFjvxAs6MLi2ZkR//IgfljoCjb
snuHDN9iSEwBAiEAmAc1XCtGE+Mdg+GG+T3xn3pubDIN5oHcia0YmKIIzsMCIEy1
fWM5cIJ9bAUExKB6MV8PF+9EjDvXzbSk1/Ycta8z
-----END RSA PRIVATE KEY-----`
)

func main() {

    // Parse private key into rsa.PrivateKey
    PEMBlock, _ := pem.Decode([]byte(privKeyPEM))
    if PEMBlock == nil {
        log.Fatal(""Could not parse Private Key PEM"")
    }
    if PEMBlock.Type != ""RSA PRIVATE KEY"" {
        log.Fatal(""Found wrong key type"")
    }
    privkey, err := x509.ParsePKCS1PrivateKey(PEMBlock.Bytes)
    if err != nil {
        log.Fatal(err)
    }

    // Compute the sha1
    h := sha1.New()
    h.Write([]byte(data))

    // Sign the data
    signature, err := rsa.SignPKCS1v15(rand.Reader, privkey, crypto.SHA1, h.Sum(nil))
    if err != nil {
        log.Fatal(err)
    }

    // Print the results
    fmt.Print(base64.StdEncoding.EncodeToString(signature))
}
",1442
275,25268071,"<?php  

$data = ""TEST DATA TO COMPUTE"";

$pubKeyPEM = ""-----BEGIN PUBLIC KEY-----
MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAK3ADijXKw72+YbC5QKK2y7IosCp7rWO
hTf8Ph07ZA0KjdbKtfL/7dmNKjSP6EkC/DJUWfZJNLIlGOtDLLA/AnsCAwEAAQ==
-----END PUBLIC KEY-----"";

// Parse public key
$pubkey = openssl_pkey_get_public($pubKeyPEM);
if (!$pubkey) {
    exit(""Could not parse public key"");
}

// Read the signature from stdin
$stdin = file_get_contents(""php://stdin"");
$signature = base64_decode($stdin);

// Verify the signature
$ok = openssl_verify($data, $signature, $pubkey, OPENSSL_ALGO_SHA1); //SHA1 of $data is computed automatically by this function
if ($ok == 1) {
    print ""OK\n""; // it worked!
  exit(0);
}
else if ($ok == 0) {
  exit(""Signature verification failed"");
}
else {
  exit(""Error verifying signature"");
}
",803
276,25268071,"package main

import (
    ""crypto""
    ""crypto/rsa""
    ""crypto/sha1""
    ""crypto/x509""
    ""encoding/base64""
    ""encoding/pem""
    ""fmt""
    ""io/ioutil""
    ""log""
    ""os""
)

const (
    data = ""TEST DATA TO COMPUTE""

    pubKeyPEM = `-----BEGIN PUBLIC KEY-----
MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAK3ADijXKw72+YbC5QKK2y7IosCp7rWO
hTf8Ph07ZA0KjdbKtfL/7dmNKjSP6EkC/DJUWfZJNLIlGOtDLLA/AnsCAwEAAQ==
-----END PUBLIC KEY-----`
)

func main() {

    // Parse public key into rsa.PublicKey
    PEMBlock, _ := pem.Decode([]byte(pubKeyPEM))
    if PEMBlock == nil {
        log.Fatal(""Could not parse Public Key PEM"")
    }
    if PEMBlock.Type != ""PUBLIC KEY"" {
        log.Fatal(""Found wrong key type"")
    }
    pubkey, err := x509.ParsePKIXPublicKey(PEMBlock.Bytes)
    if err != nil {
        log.Fatal(err)
    }

    // compute the sha1
    h := sha1.New()
    h.Write([]byte(data))

    // Read the signature from stdin
    b64 := base64.NewDecoder(base64.StdEncoding, os.Stdin)
    signature, err := ioutil.ReadAll(b64)
    if err != nil {
        log.Fatal(err)
    }

    // Verify
    err = rsa.VerifyPKCS1v15(pubkey.(*rsa.PublicKey), crypto.SHA1, h.Sum(nil), signature)
    if err != nil {
        log.Fatal(err)
    }

    // It verified!
    fmt.Println(""OK"")
}
",1267
277,25268071,"$ go run go-sign.go | go run go-verify.go
OK
$ go run go-sign.go | php php-verify.php
OK
$ php php-sign.php | php php-verify.php
OK
$ php php-sign.php | go run go-verify.go
OK
",176
278,25312824,"{
  'd': {
    'results': [
      {
        '__metadata': {
          'id': 'https://api.datamarket.azure.com/Data.ashx/opendata.rdw/StatischParkeren.Open.Data/v1/AREAGEOMETRY(1)',
          'uri': 'https://api.datamarket.azure.com/Data.ashx/opendata.rdw/StatischParkeren.Open.Data/v1/AREAGEOMETRY(1)',
          'type': 'opendata.rdw.StatischParkeren.Open.Data.AREAGEOMETRY'
        },
        'AREAGEOMETRY_ID': 1,
        'AreaManagerId': '34',
        'AreaId': 'ALMBUITEN',
        'EndDateArea': null,
        'StartDateArea': '/Date(1330560000000)/',
        'AreaGeometryTxt': 'POLYGON ((5.2736760005354881 52.391216600313783, 5.2752534225583076 52.392331821843982, 5.2771425843238831 52.391448376700282, 5.2795117920336709 52.392518069183787, 5.2794937640428543 52.392529543489218, 5.2795250192284584 52.392524041235447, 5.2795117920336709 52.392518069183787, 5.27959094196558 52.392467692494392, 5.28429589420557 52.394528595730662, 5.2830820381641388 52.3958012573421, 5.2826158106327057 52.396464187651873, 5.28216527402401 52.396755328401923, 5.2811877280473709 52.396325327456, 5.27938649058342 52.395481485873461, 5.2793451324105263 52.395514352247119, 5.2788525596261024 52.395813956856728, 5.278492659330368 52.39611235447228, 5.2776647135615349 52.396820867434144, 5.2777034044265747 52.396853528916836, 5.2768759876489639 52.397581102326512, 5.274177111685276 52.396415254101157, 5.2741994857788086 52.396424867212772, 5.2686141580343246 52.394008679315448, 5.26860549300909 52.394005045294762, 5.2691666409373283 52.39350445382297, 5.2705547362565994 52.392721636220813, 5.2723518460904533 52.392156438032842, 5.2723518460989 52.39215643890202, 5.272359311580658 52.392154090106487, 5.2723518460904533 52.392156438032842, 5.2723498195409775 52.391947904601693, 5.273051455616951 52.391403153538704, 5.2736760005354881 52.391216600313783))',
        'AreaGeometryGml': '5.2736760005354881 52.391216600313783 5.2752534225583076 52.392331821843982 5.2771425843238831 52.391448376700282 5.2795117920336709 52.392518069183787 5.2794937640428543 52.392529543489218 5.2795250192284584 52.392524041235447 5.2795117920336709 52.392518069183787 5.27959094196558 52.392467692494392 5.28429589420557 52.394528595730662 5.2830820381641388 52.3958012573421 5.2826158106327057 52.396464187651873 5.28216527402401 52.396755328401923 5.2811877280473709 52.396325327456 5.27938649058342 52.395481485873461 5.2793451324105263 52.395514352247119 5.2788525596261024 52.395813956856728 5.278492659330368 52.39611235447228 5.2776647135615349 52.396820867434144 5.2777034044265747 52.396853528916836 5.2768759876489639 52.397581102326512 5.274177111685276 52.396415254101157 5.2741994857788086 52.396424867212772 5.2686141580343246 52.394008679315448 5.26860549300909 52.394005045294762 5.2691666409373283 52.39350445382297 5.2705547362565994 52.392721636220813 5.2723518460904533 52.392156438032842 5.2723518460989 52.39215643890202 5.272359311580658 52.392154090106487 5.2723518460904533 52.392156438032842 5.2723498195409775 52.391947904601693 5.273051455616951 52.391403153538704 5.2736760005354881 52.391216600313783'
      },
      {
        '__metadata': {
          'id': 'https://api.datamarket.azure.com/Data.ashx/opendata.rdw/StatischParkeren.Open.Data/v1/AREAGEOMETRY(2)',
          'uri': 'https://api.datamarket.azure.com/Data.ashx/opendata.rdw/StatischParkeren.Open.Data/v1/AREAGEOMETRY(2)',
          'type': 'opendata.rdw.StatischParkeren.Open.Data.AREAGEOMETRY'
        },
        'AREAGEOMETRY_ID': 2,
        'AreaManagerId': '34',
        'AreaId': 'ALMTEGELZ',
        'EndDateArea': null,
        'StartDateArea': '/Date(1330560000000)/',
        'AreaGeometryTxt': 'POLYGON ((5.216308925 52.370733155, 5.216800447 52.370804276, 5.216837124 52.370755791, 5.217178542 52.370807152, 5.217373999 52.370322534, 5.217353484 52.370319431, 5.217371539 52.370274734, 5.216664547 52.370167441, 5.216571837 52.370396589, 5.216451509 52.370380301, 5.216308925 52.370733155))',
        'AreaGeometryGml': '5.216308925 52.370733155 5.216800447 52.370804276 5.216837124 52.370755791 5.217178542 52.370807152 5.217373999 52.370322534 5.217353484 52.370319431 5.217371539 52.370274734 5.216664547 52.370167441 5.216571837 52.370396589 5.216451509 52.370380301 5.216308925 52.370733155'
      },
 ],
    '__next': 'https://api.datamarket.azure.com/Data.ashx/opendata.rdw/StatischParkeren.Open.Data/v1/AREAGEOMETRY?$skiptoken=100'
  }
}
",4438
279,25312824,"type Data struct {
    Next string
    Results Result
}

type Result struct {
    Results []AreaGeometry
}

type AreaGeometry struct {
    AREAGEOMETRY_ID int32
    AreaManagerId int64
    AreaId string
    EndDateArea string
    StartDateArea string
    AreaGeometryTxt string
}

// Synchronizes the AreaGeometry in our MySQL database with the AreaGeometry in the database from the RDW
func retrieveData() {
    resp, err := http.Get(""https://api.datamarket.azure.com/opendata.rdw/StatischParkeren.Open.Data/v1/AREAGEOMETRY?$format=json"")
    if err != nil {
        panic(err.Error()) // TODO: proper error handling
    }
    body, err := ioutil.ReadAll(resp.Body)
    var d Data
    json.Unmarshal(body, &d)
    fmt.Println(""Next: "" + d.Next)
}
",748
280,25333683,"package main

import (
    ""bytes""
    ""compress/zlib""
    ""encoding/json""
    ""flag""
    ""fmt""
    ""gotwcc/mylib""
    ""io""
    ""net/http""
    ""os""
)

type Block struct {
    data []byte
}

type Row struct {
    offset, len uint32
    block       *Block
}

type Cache struct {
    blocks          []Block
    indexes         map[string]*Row
    enable_compress bool
    maxRowGroup     uint
}

func (this *Cache) dump() {
    for key, value := range this.indexes {
        fmt.Printf(""[%s] = \""%s\""\n"", key, value.block)
    }
}

func (this *Cache) search(item_id string) string {
    row := this.indexes[item_id]
    if row == nil {
        return ""(Not found)""
    }
    block := this.uncompress(row.block.data)
    slice := block[row.offset : row.offset+row.len]
    return string(slice)
}

func (this *Cache) compress(data []byte) []byte {
    if !this.enable_compress {
        return data
    }

    var b bytes.Buffer
    w := zlib.NewWriter(&b)
    w.Write(data)
    w.Close()
    return b.Bytes()
}

func (this *Cache) uncompress(data []byte) []byte {
    if !this.enable_compress {
        return data
    }

    var res bytes.Buffer
    b := bytes.NewReader(data)
    r, err := zlib.NewReader(b)
    if err != nil {
        panic(err)
    }
    io.Copy(&res, r)

    r.Close()
    return res.Bytes()

}

func (this *Cache) loadFile(s string) {
    type TempRowBuf struct {
        item_id     []byte
        offset, len uint32
    }

    file, err := os.Open(s)
    if err != nil {
        panic(err.Error())
    }
    defer file.Close()

    scanner := mybufio.NewScanner(file)
    scanner.Split(mybufio.ScanLines)

    var tmp_buf bytes.Buffer
    var buffer bytes.Buffer
    var tmp_list []TempRowBuf
    this.indexes = make(map[string]*Row)

    var offset uint32 = 0
    nb := this.maxRowGroup
    for scanner.Scan() {
        nb--
        tmp_buf.Reset()
        tmp_buf.Write(scanner.Bytes())
        line := tmp_buf.Bytes()
        item_id, _ := tmp_buf.ReadBytes('\t')
        item_id = item_id[0 : len(item_id)-1]
        size := uint32(len(line))
        buffer.Write(line)
        tmp_list = append(tmp_list, TempRowBuf{item_id, offset, size})
        offset += size
        if nb <= 0 {
            compressed := this.compress(buffer.Bytes())
            buff := make([]byte, len(compressed))
            copy(buff, compressed)
            var block *Block = &Block{buff}
            for _, tmp := range tmp_list {
                this.indexes[string(tmp.item_id)] = &Row{tmp.offset, tmp.len, block}
            }
            nb = this.maxRowGroup
            offset = 0
            tmp_list = nil
            buffer.Reset()
        }
    }
    if nb > 0 {
        compressed := this.compress(buffer.Bytes())
        buff := make([]byte, len(compressed))
        copy(buff, compressed)
        var block *Block = &Block{buff}
        for _, tmp := range tmp_list {
            this.indexes[string(tmp.item_id)] = &Row{tmp.offset, tmp.len, block}
        }
    }
}

func wsCacheHandler(cache *Cache, writer http.ResponseWriter, request *http.Request) {
    var value map[string]string = make(map[string]string)

    item_id := request.FormValue(""item_id"")
    value[""item_id""] = item_id
    value[""raw""] = cache.search(item_id)
    jsonResp, err := json.Marshal(value)
    if err != nil {
        fmt.Println(""error:"", err)
    } else {
        fmt.Fprintf(writer, ""%s"", string(jsonResp))
    }
}

func main() {
    filename := flag.String(""data"", ""default.txt"", ""The data filename"")
    no_http := flag.Bool(""no-http"", false, ""Do not start an http server"")
    dumpMap := flag.Bool(""dump"", false, ""If we should dump the map to stdout"")
    noCompression := flag.Bool(""no-compress"", false, ""Disable compression"")
    maxRowGroup := flag.Uint(""max-row-group"", 100, ""How much line to group when doing compression"")

    flag.Parse()
    var cache Cache
    cache.enable_compress = !*noCompression
    cache.maxRowGroup = *maxRowGroup

    cache.loadFile(*filename)

    if *dumpMap {
        cache.dump()
        fmt.Println(cache.search(""100001""))
        fmt.Println(cache.search(""100002""))
        fmt.Println(cache.search(""100003""))
        fmt.Println(cache.search(""100004""))
        fmt.Println(cache.search(""100005""))
        fmt.Println(cache.search(""100006""))
        fmt.Println(cache.search(""100007""))
        fmt.Println(cache.search(""100008""))
        fmt.Println(cache.search(""100009""))
        fmt.Println(cache.search(""100010""))

    }

    if !*no_http {
        http.HandleFunc(""/"", func(writer http.ResponseWriter, request *http.Request) {
            wsCacheHandler(&cache, writer, request)
        })
        fmt.Println(""Cache loaded, now listening on port 8585..."")
        http.ListenAndServe("":8585"", nil)
    }
}
",4760
281,25333683,"100001  bar
100002  foo
100003  bob
100004  nuts
100005  gogopowran
100006  green
100007  test
100008  alongwordwithlotofletters
100009  
100010  space space space
",164
282,25333683,"time ./mybin -data=data.txt -no-http -no-compress => ok (0.6 sec to load)
time ./mybin -data=data.txt -no-http --max_row_group=100 => slow (12.1 sec to load)
time ./mybin -data=data.txt -no-http --max_row_group=1000 => still slow (10.9 sec to load)
time ./mybin -data=data.txt -no-http --max_row_group=10000 => still slow (10.6 sec to load)
",341
283,25600521,"package main

import (
        ""net/http""
        ""fmt""
        //""encoding/json""
        //""html""
        ""github.com/kr/pretty""
);

func main(){
        http.HandleFunc(""/"", foo)
        http.ListenAndServe("":80"", nil)
}

func foo(w http.ResponseWriter, r * http.Request){
        w.Header().Set(""Server"",""A Go WebServer"")

        w.Header().Set(""Content-Type"", ""text/html"")

        hostname := r.URL.Query()[""hostname""]
        //w.Write([]byte(hostname[0]))
        fmt.Printf(""%# v"", pretty.Formatter(hostname[0]))


        w.Write([]byte(hostname))
}
",560
284,25600521,"""example.com""2014/09/01 02:57:22 http: panic serving 172.17.92.14:49411: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42dc41)
    _func_003: buf.Write(debug.Stack())
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:1443 (0x40f8b5)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:128 (0x410381)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:85 (0x410228)
/root/go/src/api/main.go:34 (0x400d77)
    foo: fmt.Printf(""%# v"", pretty.Formatter(hostname[0]))
/usr/lib/go/src/pkg/net/http/server.go:690 (0x421bed)
    HandlerFunc.ServeHTTP: f(w, r)
/usr/lib/go/src/pkg/net/http/server.go:926 (0x422a6f)
    (*ServeMux).ServeHTTP: mux.handler(r).ServeHTTP(w, r)
/usr/lib/go/src/pkg/net/http/server.go:656 (0x421a00)
    (*conn).serve: handler.ServeHTTP(w, w.req)
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:271 (0x40d9bb)
2014/09/01 02:57:22 http: panic serving 172.17.92.14:49412: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42dc41)
    _func_003: buf.Write(debug.Stack())
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:1443 (0x40f8b5)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:128 (0x410381)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:85 (0x410228)
/root/go/src/api/main.go:34 (0x400d77)
    foo: fmt.Printf(""%# v"", pretty.Formatter(hostname[0]))
/usr/lib/go/src/pkg/net/http/server.go:690 (0x421bed)
    HandlerFunc.ServeHTTP: f(w, r)
/usr/lib/go/src/pkg/net/http/server.go:926 (0x422a6f)
    (*ServeMux).ServeHTTP: mux.handler(r).ServeHTTP(w, r)
/usr/lib/go/src/pkg/net/http/server.go:656 (0x421a00)
    (*conn).serve: handler.ServeHTTP(w, w.req)
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:271 (0x40d9bb)
2014/09/01 02:57:22 http: panic serving 172.17.92.14:49413: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42dc41)
    _func_003: buf.Write(debug.Stack())
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:1443 (0x40f8b5)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:128 (0x410381)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:85 (0x410228)
/root/go/src/api/main.go:34 (0x400d77)
    foo: fmt.Printf(""%# v"", pretty.Formatter(hostname[0]))
/usr/lib/go/src/pkg/net/http/server.go:690 (0x421bed)
    HandlerFunc.ServeHTTP: f(w, r)
/usr/lib/go/src/pkg/net/http/server.go:926 (0x422a6f)
    (*ServeMux).ServeHTTP: mux.handler(r).ServeHTTP(w, r)
/usr/lib/go/src/pkg/net/http/server.go:656 (0x421a00)
    (*conn).serve: handler.ServeHTTP(w, w.req)
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:271 (0x40d9bb)
",2563
285,25600521,"w.Write([]byte(hostname))
",26
286,25600521,"go/src/api/main.go:38: cannot convert hostname (type []string) to type []byte
",78
287,25600521,"        newhost := hostname[0];
        w.Write([]byte(newhost))
",65
288,25600521,"    2014/09/01 04:42:40 http: panic serving 172.17.92.14:50404: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42db27)
    _func_003: buf.Write(debug.Stack())
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:1443 (0x40f79b)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:128 (0x410267)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:85 (0x41010e)
/root/go/src/api/main.go:38 (0x400d63)
    foo: newhost := hostname[0];
/usr/lib/go/src/pkg/net/http/server.go:690 (0x421ad3)
    HandlerFunc.ServeHTTP: f(w, r)
/usr/lib/go/src/pkg/net/http/server.go:926 (0x422955)
    (*ServeMux).ServeHTTP: mux.handler(r).ServeHTTP(w, r)
/usr/lib/go/src/pkg/net/http/server.go:656 (0x4218e6)
    (*conn).serve: handler.ServeHTTP(w, w.req)
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:271 (0x40d8a1)
2014/09/01 04:42:40 http: panic serving 172.17.92.14:50405: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42db27)
    _func_003: buf.Write(debug.Stack())
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:1443 (0x40f79b)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:128 (0x410267)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:85 (0x41010e)
/root/go/src/api/main.go:38 (0x400d63)
    foo: newhost := hostname[0];
/usr/lib/go/src/pkg/net/http/server.go:690 (0x421ad3)
    HandlerFunc.ServeHTTP: f(w, r)
/usr/lib/go/src/pkg/net/http/server.go:926 (0x422955)
    (*ServeMux).ServeHTTP: mux.handler(r).ServeHTTP(w, r)
/usr/lib/go/src/pkg/net/http/server.go:656 (0x4218e6)
    (*conn).serve: handler.ServeHTTP(w, w.req)
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:271 (0x40d8a1)
2014/09/01 04:42:40 http: panic serving 172.17.92.14:50406: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42db27)
    _func_003: buf.Write(debug.Stack())
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:1443 (0x40f79b)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:128 (0x410267)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:85 (0x41010e)
/root/go/src/api/main.go:38 (0x400d63)
    foo: newhost := hostname[0];
/usr/lib/go/src/pkg/net/http/server.go:690 (0x421ad3)
    HandlerFunc.ServeHTTP: f(w, r)
/usr/lib/go/src/pkg/net/http/server.go:926 (0x422955)
    (*ServeMux).ServeHTTP: mux.handler(r).ServeHTTP(w, r)
/usr/lib/go/src/pkg/net/http/server.go:656 (0x4218e6)
    (*conn).serve: handler.ServeHTTP(w, w.req)
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:271 (0x40d8a1)
",2476
289,25600521,"        fmt.Print(""\n"")
        fmt.Println((len(newhost)))
",60
290,25600521,"""example.com""
11
2014/09/01 05:05:15 http: panic serving 172.17.92.14:50779: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42dd33)
",165
291,26030627,"// CLIENT ///
    package main

import (
    ""bufio""
    ""bytes""
    ""fmt""
    ""io""
    ""log""
    ""net""
    ""os""
    ""strings""
)

const BUFFER_SIZE = 1024

func main() {

    //get port and ip address to dial

    if len(os.Args) != 3 {
        fmt.Println(""useage example: tcpClient 127.0.0.1 7005"")
        return
    }

    var ip string = os.Args[1]
    var port string = os.Args[2]

    connection, err := net.Dial(""tcp"", ip+"":""+port)
    if err != nil {
        fmt.Println(""There was an error making a connection"")
    }

    //read from
    reader := bufio.NewReader(os.Stdin)
    fmt.Print(""Please enter 'get ' or 'send ' to transfer files to the server\n\n"")
    inputFromUser, _ := reader.ReadString('\n')
    arrayOfCommands := strings.Split(inputFromUser, "" "")

    if arrayOfCommands[0] == ""get"" {
        getFileFromServer(arrayOfCommands[1], connection)

    } else if arrayOfCommands[0] == ""send"" {
        sendFileToServer(arrayOfCommands[1], connection)
    } else {
        fmt.Println(""Bad Command"")
    }

}

func sendFileToServer(fileName string, connection net.Conn) {

    var currentByte int64 = 0
    fmt.Println(""send to client"")
    fileBuffer := make([]byte, BUFFER_SIZE)

    var err error

    //file to read
    file, err := os.Open(strings.TrimSpace(fileName)) // For read access.
    if err != nil {
        connection.Write([]byte(""-1""))
        log.Fatal(err)
    }
    connection.Write([]byte(""send "" + fileName))
    //read file until there is an error
    for err == nil || err != io.EOF {

        _, err = file.ReadAt(fileBuffer, currentByte)
        currentByte += BUFFER_SIZE
        fmt.Println(fileBuffer)
        connection.Write(fileBuffer)
    }

    file.Close()
    connection.Close()

}

func getFileFromServer(fileName string, connection net.Conn) {

    var currentByte int64 = 0

    fileBuffer := make([]byte, BUFFER_SIZE)

    var err error
    file, err := os.Create(strings.TrimSpace(fileName))
    if err != nil {
        log.Fatal(err)
    }
    connection.Write([]byte(""get "" + fileName))
    for {

        connection.Read(fileBuffer)
        cleanedFileBuffer := bytes.Trim(fileBuffer, ""\x00"")

        _, err = file.WriteAt(cleanedFileBuffer, currentByte)

        currentByte += BUFFER_SIZE

        if err == io.EOF {
            break
        }

    }

    file.Close()
    return

}

// END CLIENT //
// SERVER //
    package main

import (
    ""bytes""
    ""fmt""
    ""io""
    ""log""
    ""net""
    ""os""
    ""strings""
)

const BUFFER_SIZE = 1024
const PORT = ""7005""

func main() {

    fmt.Println(""start listening"")

    server, error := net.Listen(""tcp"", ""localhost:""+PORT)
    if error != nil {
        fmt.Println(""There was an error starting the server"" + error.Error())
        return
    }

    //infinate loop
    for {

        connection, error := server.Accept()
        if error != nil {
            fmt.Println(""There was am error with the connection"" + error.Error())
            return
        }
        fmt.Println(""connected"")
        //handle the connection, on it's own thread, per connection
        go connectionHandler(connection)
    }
}

func connectionHandler(connection net.Conn) {
    buffer := make([]byte, BUFFER_SIZE)

    _, error := connection.Read(buffer)
    if error != nil {
        fmt.Println(""There is an error reading from connection"", error.Error())
        return
    }
    fmt.Println(""command recieved: "" + string(buffer))

    //loop until disconntect

    cleanedBuffer := bytes.Trim(buffer, ""\x00"")
    cleanedInputCommandString := strings.TrimSpace(string(cleanedBuffer))
    arrayOfCommands := strings.Split(cleanedInputCommandString, "" "")

    fmt.Println(arrayOfCommands[0])
    if arrayOfCommands[0] == ""get"" {
        sendFileToClient(arrayOfCommands[1], connection)
    } else if arrayOfCommands[0] == ""send"" {
        fmt.Println(""getting a file"")

        getFileFromClient(arrayOfCommands[1], connection)

    } else {
        _, error = connection.Write([]byte(""bad command""))
    }

}

func sendFileToClient(fileName string, connection net.Conn) {
    var currentByte int64 = 0
    fmt.Println(""send to client"")
    fileBuffer := make([]byte, BUFFER_SIZE)

    //file to read
    file, err := os.Open(strings.TrimSpace(fileName)) // For read access.
    if err != nil {

        log.Fatal(err)
    }
    var err2 error

    //read file until there is an error
    for {

        _, err2 = file.ReadAt(fileBuffer, currentByte)
        currentByte += BUFFER_SIZE
        fmt.Println(fileBuffer)
        connection.Write(fileBuffer)

        if err2 == io.EOF {
            break
        }
    }

    file.Close()
    return

}

func getFileFromClient(fileName string, connection net.Conn) {

    var currentByte int64 = 0

    fileBuffer := make([]byte, BUFFER_SIZE)

    var err error
    file, err := os.Create(strings.TrimSpace(fileName))
    if err != nil {
        log.Fatal(err)
    }
    connection.Write([]byte(""get "" + fileName))
    for err == nil || err != io.EOF {

        connection.Read(fileBuffer)

        cleanedFileBuffer := bytes.Trim(fileBuffer, ""\x00"")

        _, err = file.WriteAt(cleanedFileBuffer, currentByte)
        if len(string(fileBuffer)) != len(string(cleanedFileBuffer)) {
            break
        }
        currentByte += BUFFER_SIZE

    }

    connection.Close()
    file.Close()
    return

}

// END SERVER //
",5375
292,26159658,header.payload,14
293,26159658,rsa.VerifyPKCS1v15,18
294,26159658,crypto/rsa: verification error,30
295,26159658,// validation here fails,24
296,26159658,"func ValidateIDToken(auth_token string) (err error){    
    res, err := http.Get(""https://www.googleapis.com/oauth2/v2/certs"")
    if err != nil {
        log.Fatal(err)
        return err
    }

    certs, err := ioutil.ReadAll(res.Body)
    res.Body.Close()
    if err != nil {
        log.Fatal(err)
        return err
    }

    //get modulus and exponent from the cert
    var goCertificate interface{}

    err = json.Unmarshal(certs, &goCertificate)    
    k := goCertificate.(map[string]interface{})[""keys""]
    j := k.([]interface{})
    x := j[1]
    h := x.(map[string]interface{})[""n""]
    g := x.(map[string]interface{})[""e""]
    e64 := base64.StdEncoding
    //build the google pub key
    nStr := h.(string)
    decN, err := base64.StdEncoding.DecodeString(nStr)
    if err != nil {
        log.Println(err)
        return
    }

    n := big.NewInt(0)
    n.SetBytes(decN)
    eStr := g.(string)
    decE, err := base64.StdEncoding.DecodeString(eStr)
    if err != nil {
        log.Println(err)
        return
    }

    var eBytes []byte
    if len(decE) < 8 {
        eBytes = make([]byte, 8-len(decE), 8)
        eBytes = append(eBytes, decE...)
    } else {
        eBytes = decE
    }

    eReader := bytes.NewReader(eBytes)
    var e uint64
    err = binary.Read(eReader, binary.BigEndian, &e)
    if err != nil {
        log.Println(err)
        return
    }

    pKey := rsa.PublicKey{N: n, E: int(e)}
    w := strings.SplitAfter(auth_token, ""."")    
    for i, val := range w {
        w[i] = strings.Trim(val, ""."")
    }
    y := w[0:2]

    //Join just the first two parts, the header and the payload without the signature
    o := strings.Join(y, ""."")   
    headerOauth := DecodeB64(nil,[]byte(w[0]),e64)
    inblockOauth := DecodeB64(nil,[]byte(w[1]),e64)
    toHash := string(headerOauth) + ""}."" + string(inblockOauth)
    digestOauth := DecodeB64(nil, []byte(w[2]),e64)

    hasherOauth := sha256.New()
    hasherOauth.Write([]byte(toHash))

    // validation here fails
    err = rsa.VerifyPKCS1v15(&pKey,crypto.SHA256,hasherOauth.Sum(nil),digestOauth)

    if err != nil {
        log.Printf(""Error verifying key %s"",err.Error())
        return err
    }
    return err
}
",2209
297,26159658,"{""alg"":""RS256"",""kid"":""d91c503452d0f8849200a321ffbf7dea76f9371d""}.{""iss"":""accounts.google.com"",""sub"":""104869993929250743503"",""azp"":""client_email_till_@.apps.googleusercontent.com"",""email"":""test@test.hr"",""at_hash"":""KAm1M0g-ssMkdjds7jkbVQ"",""email_verified"":true,""aud"":client_email_till_@.apps.googleusercontent.com"",""hd"":""test.hr"",""iat"":1412246551,""exp"":1412250451}
",363
298,26159658,"package main
import(
    ""strings""
    ""encoding/binary""
    ""errors""
    ""fmt""
    ""log""
    ""encoding/base64""
    ""io/ioutil""
    ""crypto""    
    ""crypto/sha256""
    ""crypto/rsa""
    ""bytes""
    ""encoding/json""
    ""net/http""
    ""math/big""  

)

func main() {
    auth_token := """"
    w := strings.SplitAfter(auth_token, ""."")    
    for i, val := range w {
        w[i] = strings.Trim(val, ""."")
    }
    headerOauth, err := base64.URLEncoding.DecodeString(w[0])

    res, err := http.Get(""https://www.googleapis.com/oauth2/v2/certs"")
    if err != nil {
        fmt.Println(err)
    }

    certs, err := ioutil.ReadAll(res.Body)
    res.Body.Close()
    if err != nil {
        fmt.Println(err)
    }

    //extract kid from token header
    var header interface{}

    err = json.Unmarshal([]byte(string(headerOauth)+""}""), &header)

    token_kid := header.(map[string]interface{})[""kid""]
    fmt.Println(""By 1"")
    //get modulus and exponent from the cert

    var goCertificate interface{}

    err = json.Unmarshal(certs, &goCertificate)    

    //k := goCertificate.(map[string]interface{})[token_kid.(string)]
    k := goCertificate.(map[string]interface{})[""keys""]

    ///*mod & exp part
    j := k.([]interface{})
    x := j[0]

    if j[0].(map[string]interface{})[""kid""] == token_kid {
        x = j[0]
    }else{
        if j[1].(map[string]interface{})[""kid""] == token_kid {
            x = j[1]
        }else{
            errors.New(""Token is not valid, kid from token and certificate don't match"")

        }
    }
    h := x.(map[string]interface{})[""n""]
    g := x.(map[string]interface{})[""e""]

    //build the google pub key
    nStr := h.(string)
    decN, err := base64.URLEncoding.DecodeString(nStr)
    if err != nil {
        fmt.Println(err)
        return
    }

    n := big.NewInt(0)
    n.SetBytes(decN)
    eStr := g.(string)
    decE, err := base64.URLEncoding.DecodeString(eStr)
    if err != nil {
        fmt.Println(err)
        return
    }

    var eBytes []byte
    if len(decE) < 8 {
        eBytes = make([]byte, 8-len(decE), 8)
        eBytes = append(eBytes, decE...)
    } else {
        eBytes = decE
    }

    eReader := bytes.NewReader(eBytes)
    var e uint64
    err = binary.Read(eReader, binary.BigEndian, &e)
    if err != nil {
        log.Println(err)
        return
    }

    pKey := rsa.PublicKey{N: n, E: int(e)}
        //inblockOauth := base64.URLEncoding.DecodeString(w[1])
    toHash := w[0] + ""."" + w[1]
    digestOauth, err := base64.URLEncoding.DecodeString(w[2])

    hasherOauth := sha256.New()
    hasherOauth.Write([]byte(toHash))

    // verification here fails
    err = rsa.VerifyPKCS1v15(&pKey,crypto.SHA256,hasherOauth.Sum(nil),digestOauth)

    if err != nil {
        fmt.Printf(""Error verifying key %s"",err.Error())

    }

}
",2811
299,26353365,a.txt,5
300,26353365,"# 3072441,117185083
1,2
1,3
1,4
1,5
",36
301,26353365,"# Undirected graph: ../../data/output/orkut.txt
# Orkut
# Nodes: 3072441 Edges: 117185083
# FromNodeId    ToNodeId
1   2
1   3
1   4
1   5
",139
302,26353365,"1   2
1   3
1   4
1   5
",24
303,26353365,Edge,4
304,26353365,"type Edge struct {
    u, v int
}
",34
305,26353365,"type Edge struct {
    U, V uint32
}
",37
306,26353365,append,6
307,26353365,append,6
308,26353365,"make(T, n)",10
309,26353365,string,6
310,26353365,string,6
311,26353365,scanner.Text(),14
312,26353365,byte,4
313,26353365,strconv,7
314,26353365,scanner.Bytes(),15
315,26353365,strconv.ParseUint,17
316,26353365,bytconv,7
317,26353365,orkut.go,8
318,26353365,"package main

import (
    ""bufio""
    ""bytes""
    ""errors""
    ""fmt""
    ""os""
    ""runtime""
    ""sort""
    ""strconv""
)

type Edge struct {
    U, V uint32
}

func (e Edge) String() string {
    return fmt.Sprintf(""%d,%d"", e.U, e.V)
}

type ByKey []Edge

func (a ByKey) Len() int      { return len(a) }
func (a ByKey) Swap(i, j int) { a[i], a[j] = a[j], a[i] }
func (a ByKey) Less(i, j int) bool {
    if a[i].U < a[j].U {
        return true
    }
    if a[i].U == a[j].U && a[i].V < a[j].V {
        return true
    }
    return false
}

func countEdges(scanner *bufio.Scanner) int {
    var nNodes, nEdges int
    for scanner.Scan() {
        line := scanner.Bytes()
        if !(len(line) > 0 && line[0] == '#') {
            nEdges++
            continue
        }
        n, err := fmt.Sscanf(string(line), ""# Nodes: %d Edges: %d"", &nNodes, &nEdges)
        if err != nil || n != 2 {
            n, err = fmt.Sscanf(string(line), ""# %d,%d"", &nNodes, &nEdges)
            if err != nil || n != 2 {
                continue
            }
        }
        fmt.Println(string(line))
        break
    }
    if err := scanner.Err(); err != nil {
        panic(err.Error())
    }
    fmt.Println(nEdges)
    return nEdges
}

func loadEdges(filename string) []Edge {
    file, err := os.Open(filename)
    if err != nil {
        panic(err.Error())
    }
    defer file.Close()

    scanner := bufio.NewScanner(file)
    nEdges := countEdges(scanner)
    edges := make([]Edge, 0, nEdges)
    offset, err := file.Seek(0, os.SEEK_SET)
    if err != nil || offset != 0 {
        panic(err.Error())
    }

    var sep byte = '\t'
    scanner = bufio.NewScanner(file)
    for scanner.Scan() {
        line := scanner.Bytes()
        if len(line) > 0 && line[0] == '#' {
            continue
        }
        i := bytes.IndexByte(line, sep)
        if i = len(line) {
            sep = ','
            i = bytes.IndexByte(line, sep)
            if i = len(line) {
                err := errors.New(""Invalid line format: "" + string(line))
                panic(err.Error())
            }
        }
        u, err := ParseUint(line[:i], 10, 32)
        if err != nil {
            panic(err.Error())
        }
        v, err := ParseUint(line[i+1:], 10, 32)
        if err != nil {
            panic(err.Error())
        }
        if u > v {
            u, v = v, u
        }
        edges = append(edges, Edge{uint32(u), uint32(v)})
    }
    if err := scanner.Err(); err != nil {
        panic(err.Error())
    }

    if len(edges) <= 1 {
        return edges
    }
    sort.Sort(ByKey(edges))
    j := 0
    i := j + 1
    for ; i < len(edges); i, j = i+1, j+1 {
        if edges[i] == edges[j] {
            break
        }
    }
    for ; i < len(edges); i++ {
        if edges[i] != edges[j] {
            j++
            edges[j] = edges[i]
        }
    }
    edges = edges[:j+1]
    return edges
}

func main() {
    if len(os.Args) <= 1 {
        err := errors.New(""Missing file name"")
        panic(err.Error())
    }
    filename := os.Args[1]
    fmt.Println(filename)
    edges := loadEdges(filename)

    var ms runtime.MemStats
    runtime.ReadMemStats(&ms)
    fmt.Println(ms.Alloc, ms.TotalAlloc, ms.Sys, ms.Mallocs, ms.Frees)
    fmt.Println(len(edges), cap(edges))
    for i, e := range edges {
        fmt.Println(e)
        if i >= 10 {
            break
        }
    }
}

// bytconv from strconv

// Return the first number n such that n*base >= 1<<64.
func cutoff64(base int) uint64 {
    if base < 2 {
        return 0
    }
    return (1<<64-1)/uint64(base) + 1
}

// ParseUint is like ParseInt but for unsigned numbers.
func ParseUint(s []byte, base int, bitSize int) (n uint64, err error) {
    var cutoff, maxVal uint64

    if bitSize == 0 {
        bitSize = int(strconv.IntSize)
    }

    s0 := s
    switch {
    case len(s) < 1:
        err = strconv.ErrSyntax
        goto Error

    case 2 <= base && base <= 36:
        // valid base; nothing to do

    case base == 0:
        // Look for octal, hex prefix.
        switch {
        case s[0] == '0' && len(s) > 1 && (s[1] == 'x' || s[1] == 'X'):
            base = 16
            s = s[2:]
            if len(s) < 1 {
                err = strconv.ErrSyntax
                goto Error
            }
        case s[0] == '0':
            base = 8
        default:
            base = 10
        }

    default:
        err = errors.New(""invalid base "" + strconv.Itoa(base))
        goto Error
    }

    n = 0
    cutoff = cutoff64(base)
    maxVal = 1<<uint(bitSize) - 1

    for i := 0; i < len(s); i++ {
        var v byte
        d := s[i]
        switch {
        case '0' <= d && d <= '9':
            v = d - '0'
        case 'a' <= d && d <= 'z':
            v = d - 'a' + 10
        case 'A' <= d && d <= 'Z':
            v = d - 'A' + 10
        default:
            n = 0
            err = strconv.ErrSyntax
            goto Error
        }
        if int(v) >= base {
            n = 0
            err = strconv.ErrSyntax
            goto Error
        }

        if n >= cutoff {
            // n*base overflows
            n = 1<<64 - 1
            err = strconv.ErrRange
            goto Error
        }
        n *= uint64(base)

        n1 := n + uint64(v)
        if n1  maxVal {
            // n+v overflows
            n = 1<<64 - 1
            err = strconv.ErrRange
            goto Error
        }
        n = n1
    }

    return n, nil

Error:
    return n, &strconv.NumError{""ParseUint"", string(s0), err}
}
",5515
319,26353365,"$ go build orkut.go
$ time ./orkut ~/release-orkut-links.txt
/home/peter/release-orkut-links.txt
223534301
1788305680 1788327856 1904683256 135 50
117185083 223534301
1,2
1,3
1,4
1,5
1,6
1,7
1,8
1,9
1,10
1,11
1,12
real    2m53.203s
user    2m51.584s
sys 0m1.628s
$
",265
320,26353365,orkut.go,8
321,26353365,release-orkut-links.txt,23
322,26353365,com-orkut.ungraph.txt,21
323,26754076,"type appHandler func(http.ResponseWriter, *http.Request, context.Context) *appError

func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        if e := fn(w, r, nil); e != nil { // e is *appError, not os.Error.
                http.Error(w, e.Message, e.Code)
        }
}
",294
324,26754076,"type authHandler func(http.ResponseWriter, *http.Request, context.Context) *appError

func (fn authHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {           
    // setup authentication here                                                    
    uid := 1                                                                        

    // setup the context the way you want                                           
    parent := context.TODO()                                                        
    ctx := context.WithValue(parent, userIdKey, uid)                                
    if e := fn(w, r, ctx); e != nil { // e is *appError, not os.Error.              
        http.Error(w, e.Message, e.Code)                                            
    }                                                                               
}
",854
325,26754076,"func init() {                                                                         
    http.Handle(""/view"", appHandler(viewRecord))      // don't require authentication 
    http.Handle(""/viewAuth"", authHandler(viewRecord)) // require authentication       
}                                                                                     
",348
326,26754076,"package main

import (
        ""fmt""
        ""net/http""

        ""code.google.com/p/go.net/context""
)

type appError struct {
        Error   error
        Message string
        Code    int
}

type key int

const userIdKey key = 0

type appHandler func(http.ResponseWriter, *http.Request, context.Context) *appError

func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        if e := fn(w, r, nil); e != nil { // e is *appError, not os.Error.
                http.Error(w, e.Message, e.Code)
        }
}

type authHandler func(http.ResponseWriter, *http.Request, context.Context) *appError

func (fn authHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        // setup authentication here
        uid := 1

        // setup the context the way you want
        parent := context.TODO()
        ctx := context.WithValue(parent, userIdKey, uid)
        if e := fn(w, r, ctx); e != nil { // e is *appError, not os.Error.
                http.Error(w, e.Message, e.Code)
        }
}

func viewRecord(w http.ResponseWriter, r *http.Request, c context.Context) *appError {

        if c == nil {
                fmt.Fprintf(w, ""User are not logged in"")
        } else {
                uid := c.Value(userIdKey)
                fmt.Fprintf(w, ""User logged in with uid: %d"", uid)
        }

        return nil
}

func init() {
        http.Handle(""/view"", appHandler(viewRecord))      // viewRecord is an appHandler function
        http.Handle(""/viewAuth"", authHandler(viewRecord)) // viewRecord is an authHandler function
}

func main() {
        http.ListenAndServe("":8080"", nil)
}
",1614
327,26754076,"var contexts map[*http.Request]context.Context
",47
328,26754076,view,4
329,26754076,contexts[r],11
330,26754076,"package main

import (
        ""fmt""
        ""net/http""

        ""github.com/gorilla/context""
)

type appError struct {
        Error   error
        Message string
        Code    int
}

type key int

const userIdKey key = 0

type appHandler func(http.ResponseWriter, *http.Request) *appError

func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        if e := fn(w, r); e != nil { // e is *appError, not os.Error.
                http.Error(w, e.Message, e.Code)
        }
}

type authHandler func(http.ResponseWriter, *http.Request) *appError

func (fn authHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        // setup authentication here
        uid := 1

        context.Set(r, userIdKey, uid)
        if e := fn(w, r); e != nil { // e is *appError, not os.Error.
                http.Error(w, e.Message, e.Code)
        }
}

func viewRecord(w http.ResponseWriter, r *http.Request) *appError {

        if uid, ok := context.GetOk(r, userIdKey); !ok {
                fmt.Fprintf(w, ""User are not logged in"")
        } else {
                fmt.Fprintf(w, ""User logged in with uid: %d"", uid)
        }

        return nil
}

func init() {
        http.Handle(""/view"", appHandler(viewRecord))      // don't require authentication
        http.Handle(""/viewAuth"", authHandler(viewRecord)) // require authentication
}

func main() {
        http.ListenAndServe("":8080"", nil)
}
",1418
331,26754076,"func AuthHandler(h appHandler) appHandler {                                   
    return func(w http.ResponseWriter, r *http.Request) *appError {
        // setup authentication here                                          
        uid := 1                                                              

        context.Set(r, userIdKey, uid)                                        
        return h(w, r)                                                        
    }                                                                        
}  

func init() {                                                                                    
    http.Handle(""/view"", appHandler(viewRecord))                  // don't require authentication
    http.Handle(""/viewAuth"", appHandler(AuthHandler(viewRecord))) // require authentication      
}                                                                                               
",938
332,27162521,"&{Status:403 Forbidden StatusCode:403 Proto:HTTP/1.1 ProtoMajor:1 ProtoMinor:1 Header:map[Content-Type:[text/html] Content-Length:[345] Date:[Wed, 26 Nov 2014 07:46:36 GMT] Server:[lighttpd]] Body:0xc2155b4860 ContentLength:345 TransferEncoding:[] Close:true Trailer:map[] Request:0xc2160829c0 TLS:0xc21604eb00}",311
333,27162521,"resp, err := client.Do(req)
if resp.StatusCode > 400 {
",55
334,27162521,httpclient,10
335,27162521,"goroutine 780 [IO wait, 479 minutes]:
net.(*pollDesc).Wait(0xc2082b6a00, 0x72, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:84 +0x47
net.(*pollDesc).WaitRead(0xc2082b6a00, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:89 +0x43
net.(*netFD).Read(0xc2082b69a0, 0xc2080e5000, 0x1000, 0x1000, 0x0, 0x7fd302e42fd8, 0xc20c8359a0)
    /usr/local/go/src/net/fd_unix.go:242 +0x40f
net.(*conn).Read(0xc2080c20d8, 0xc2080e5000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/net.go:121 +0xdc
crypto/tls.(*block).readFromUntil(0xc2081c0f60, 0x7fd302e44538, 0xc2080c20d8, 0x5, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:454 +0xe6
crypto/tls.(*Conn).readRecord(0xc2082a6840, 0x17, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:539 +0x2da
crypto/tls.(*Conn).Read(0xc2082a6840, 0xc2082e3000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:904 +0x166
net/http.noteEOFReader.Read(0x7fd302e48ee8, 0xc2082a6840, 0xc20805d238, 0xc2082e3000, 0x1000, 0x1000, 0x7612c0, 0x0, 0x0)
    /usr/local/go/src/net/http/transport.go:1270 +0x6e
net/http.(*noteEOFReader).Read(0xc2081701e0, 0xc2082e3000, 0x1000, 0x1000, 0xc208014400, 0x0, 0x0)
    :125 +0xd4
bufio.(*Reader).fill(0xc2082cf620)
    /usr/local/go/src/bufio/bufio.go:97 +0x1ce
bufio.(*Reader).Peek(0xc2082cf620, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0)
    /usr/local/go/src/bufio/bufio.go:132 +0xf0
net/http.(*persistConn).readLoop(0xc20805d1e0)
    /usr/local/go/src/net/http/transport.go:842 +0xa4
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:660 +0xc9f

goroutine 17 [syscall, 489 minutes, locked to thread]:
runtime.goexit()
    /usr/local/go/src/runtime/asm_amd64.s:2232 +0x1

goroutine 798 [IO wait, 479 minutes]:
net.(*pollDesc).Wait(0xc2082b6a70, 0x72, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:84 +0x47
net.(*pollDesc).WaitRead(0xc2082b6a70, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:89 +0x43
net.(*netFD).Read(0xc2082b6a10, 0xc2080e4000, 0x1000, 0x1000, 0x0, 0x7fd302e42fd8, 0xc20c8359b0)
    /usr/local/go/src/net/fd_unix.go:242 +0x40f
net.(*conn).Read(0xc2080c20b8, 0xc2080e4000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/net.go:121 +0xdc
crypto/tls.(*block).readFromUntil(0xc2081ef5f0, 0x7fd302e44538, 0xc2080c20b8, 0x5, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:454 +0xe6
crypto/tls.(*Conn).readRecord(0xc2082a6580, 0x17, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:539 +0x2da
crypto/tls.(*Conn).Read(0xc2082a6580, 0xc20828d000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:904 +0x166
net/http.noteEOFReader.Read(0x7fd302e48ee8, 0xc2082a6580, 0xc208248cb8, 0xc20828d000, 0x1000, 0x1000, 0x7612c0, 0x0, 0x0)
    /usr/local/go/src/net/http/transport.go:1270 +0x6e
net/http.(*noteEOFReader).Read(0xc208167300, 0xc20828d000, 0x1000, 0x1000, 0xc208014400, 0x0, 0x0)
    :125 +0xd4
bufio.(*Reader).fill(0xc208132c60)
    /usr/local/go/src/bufio/bufio.go:97 +0x1ce
bufio.(*Reader).Peek(0xc208132c60, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0)
    /usr/local/go/src/bufio/bufio.go:132 +0xf0
net/http.(*persistConn).readLoop(0xc208248c60)
    /usr/local/go/src/net/http/transport.go:842 +0xa4
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:660 +0xc9f

goroutine 9904 [select, 57 minutes]:
net/http.(*persistConn).readLoop(0xc21629a8f0)
    /usr/local/go/src/net/http/transport.go:928 +0x9ce
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:660 +0xc9f

goroutine 799 [select, 479 minutes]:
net/http.(*persistConn).writeLoop(0xc208248c60)
    /usr/local/go/src/net/http/transport.go:945 +0x41d
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:661 +0xcbc

goroutine 781 [select, 479 minutes]:
net/http.(*persistConn).writeLoop(0xc20805d1e0)
    /usr/local/go/src/net/http/transport.go:945 +0x41d
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:661 +0xcbc

goroutine 9905 [select, 57 minutes]:
net/http.(*persistConn).writeLoop(0xc21629a8f0)
    /usr/local/go/src/net/http/transport.go:945 +0x41d
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:661 +0xcbc

goroutine 10958 [runnable]:
net/http.(*persistConn).writeLoop(0xc217483810)
    /usr/local/go/src/net/http/transport.go:945 +0x41d
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:661 +0xcbc

goroutine 10957 [runnable]:
net/http.(*persistConn).readLoop(0xc217483810)
    /usr/local/go/src/net/http/transport.go:928 +0x9ce
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:660 +0xc9f
",4702
336,27449673," if n == 0 {
        lrNewCh <- 1
    }
",40
337,27449673,"// Make a bridge between dstNet which is
// usually behind NAT and srcNet which is usually a client
// which wants to route the traffic though the NAT machine.
package main

import (
    log ""github.com/golang/glog""
    ""io""
    ""net""
)

// listen on the dstNet so that we can
// create a connection with the NAT client
var dstNet *net.TCPAddr = &net.TCPAddr{IP: net.ParseIP(""0.0.0.0""), Port: 9000}

// listen on srcNet so that we can get traffic
// to forward to dstNet
var srcNet *net.TCPAddr = &net.TCPAddr{IP: net.ParseIP(""0.0.0.0""), Port: 9001}

var errCh = make(chan error, 1)

// make a channel to send the reverse connections
var lrCh = make(chan *net.TCPConn, 1)
var lrNewCh = make(chan int, 1)

func listenDst() {
    // Listen on the dstNet
    lr, err := net.ListenTCP(""tcp"", dstNet)
    if err != nil {
        log.Error(err)
        errCh <- err
        return
    }
    // accept the connection
    for {
        lrConn, err := lr.AcceptTCP()
        if err != nil {
                log.Error(err)
                //errCh <- err
                //return
        }
        status := <-lrNewCh
            log.Errorf(""status request is %v"", status)
            if status == 1{
                log.Errorf(""we close and restart the listener and the connection"")
                if err =  lrConn.Close(); err !=nil{
                    log.Error(err)
                }
                if err =  lr.Close(); err !=nil{
                    log.Error(err)
                }
                    lr, err = net.ListenTCP(""tcp"", dstNet)
                    if err != nil {
                        log.Error(err)
                        errCh <- err
                        return
                    }
                lrConn, err = lr.AcceptTCP()
                if err !=nil{
                    log.Error(err)
                    errCh <- err
                }
            }else{
                log.Errorf(""new connection on its way"")
                lrCh <- lrConn
            }
    //  default:
            // log.Errorf(""accepting new connections"")


    }

}

func main() {

    go func() {
        for err := range errCh {
            if err != nil {
                panic(err)
            }
        }
    }()
    // listen for the nat server
    go listenDst()

    // listen for clients to connect
    l, err := net.ListenTCP(""tcp"", srcNet)
    if err != nil {
        log.Error(err)
        panic(err)
    }
    // accept the connection
    for {
        conn, err := l.AcceptTCP()
        if err != nil {
            log.Error(err)
            panic(err)
        }
        // serve the connection
        go func(conn *net.TCPConn) {
            defer conn.Close()
            lrNewCh <- 0
            dst := <-lrCh
            defer dst.Close()
            proxy(dst, conn)
        }(conn)

    }
}

func proxy(srvConn, cliConn *net.TCPConn) {
    // channels to wait on the close event for each connection
    serverClosed := make(chan struct{}, 1)
    clientClosed := make(chan struct{}, 1)

    go broker(srvConn, cliConn, clientClosed)
    go broker(cliConn, srvConn, serverClosed)

    // wait for one half of the proxy to exit, then trigger a shutdown of the
    // other half by calling CloseRead(). This will break the read loop in the
    // broker and allow us to fully close the connection cleanly without a
    // ""use of closed network connection"" error.
    var waitFor chan struct{}
    select {
    case <-clientClosed:
        // the client closed first and any more packets from the server aren't
        // useful, so we can optionally SetLinger(0) here to recycle the port
        // faster.
        srvConn.SetLinger(0)
        srvConn.CloseRead()
        waitFor = serverClosed
    case <-serverClosed:
        cliConn.CloseRead()
        waitFor = clientClosed
    }

    // Wait for the other connection to close.
    // This ""waitFor"" pattern isn't required, but gives us a way to track the
    // connection and ensure all copies terminate correctly; we can trigger
    // stats on entry and deferred exit of this function.
    <-waitFor
}

// This does the actual data transfer.
// The broker only closes the Read side.
func broker(dst, src net.Conn, srcClosed chan struct{}) {
    // We can handle errors in a finer-grained manner by inlining io.Copy (it's
    // simple, and we drop the ReaderFrom or WriterTo checks for
    // net.Conn->net.Conn transfers, which aren't needed). This would also let
    // us adjust buffersize.
    n, err := io.Copy(dst, src)
    log.Errorf("" %v bytes copied"", n)
    if err != nil {
        log.Errorf(""Copy error: %s"", err)
        // errCh <- err
    }
    if err := src.Close(); err != nil {
        log.Errorf(""Close error: %s"", err)
        errCh <- err
    }
    if n == 0 {
        lrNewCh <- 1
    }
    srcClosed <- struct{}{}

}
",4820
338,27491738,"func IndexVehicle(client *elastic.Client, vehicle Vehicle) (bool, error) {
    // See if it exists already
    fetch, err := client.Get().
        Index(vehicleIndex).
        Type(""vehicle"").
        Id(vehicle.Id).
        Do()
    if err != nil || fetch.Found {
        return false, err
    }

    vehicleName := fmt.Sprintf(""%s %s (%s) %s"", vehicle.Make, vehicle.Model, vehicle.Model_year, vehicle.Primary_fuel)

    suggest := elastic.NewSuggestField()
    suggest.Input(vehicle.Make, vehicle.Model, vehicle.Primary_fuel, vehicle.Model_year).
        Output(vehicleName).
        Payload(vehicle)

    // Go forth and save
    put, err := client.Index().
        Index(vehicleIndex).
        Type(""vehicle"").
        Id(vehicle.Id).
        Debug(true).Pretty(true).
        BodyJson(indexBody{Name: vehicleName, Suggest: suggest}).
        Do()
    if err != nil {
        return false, err
    }
    return put.Created, nil
}
",934
339,27491738,"2014/12/15 14:11:37 PUT /vehicle/vehicle/369f96459b340507c4688740da3bfe1a?pretty=true HTTP/1.1
Host: localhost:9200
User-Agent: elastic/1.3.1 (darwin-amd64)
Transfer-Encoding: chunked
Accept: application/json
Content-Type: application/json
Accept-Encoding: gzip

{""name"":""American Motors Corporation Eagle 4WD (1986) regular"",""suggest"":{""input"":[""American Motors Corporation"",""Eagle 4WD"",""regular"",""1986""],""output"":""American Motors Corporation Eagle 4WD (1986) regular"",""payload"":{""make"":""American Motors Corporation"",""model_year"":""1986"",""model"":""Eagle 4WD"",""primary_fuel"":""regular"",""vehicle_class"":""Special Purpose Vehicle 4WD"",""transmission"":""Automatic 3-spd"",""displacement"":""4.2"",""drive"":""4-Wheel or All-Wheel Drive"",""city_mpg"":""15.0"",""highway_mpg"":""19.0"",""comb_mpg"":""17.0""}}}

2014/12/15 14:11:37 HTTP/1.1 201 Created
Content-Length: 134
Content-Type: application/json; charset=UTF-8

{
  ""_index"" : ""vehicle"",
  ""_type"" : ""vehicle"",
  ""_id"" : ""369f96459b340507c4688740da3bfe1a"",
  ""_version"" : 1,
  ""created"" : true
}
",1023
340,27491738,err,3
341,27491738,IndexVehicle(),14
342,27491738,"E
Errors:

  * /Users/phil/go/src/github.com/ride/autocomplete/vehicle_test.go 
  Line 79: - elastic: Error 400: ElasticsearchIllegalArgumentException[No feature for name [vehicle]] 
  goroutine 245 [running]:
  github.com/ride/autocomplete.func·033()
    /Users/phil/go/src/github.com/ride/autocomplete/vehicle_test.go:79 +0x249
  github.com/ride/autocomplete.useIndex(0x499e98)
    /Users/phil/go/src/github.com/ride/autocomplete/test_helper.go:18 +0x55
  github.com/ride/autocomplete.func·034()
    /Users/phil/go/src/github.com/ride/autocomplete/vehicle_test.go:96 +0x2a
  github.com/jtolds/gls._m(0x0, 0xc2080ae9e0)
    /Users/phil/go/src/github.com/jtolds/gls/stack_tags.go:70 +0x32
  github.com/jtolds/gls.markS(0x0, 0xc2080ae9e0)
    /Users/phil/go/src/github.com/jtolds/gls/stack_tags.go:21 +0x32
  github.com/jtolds/gls.addStackTag(0x0, 0xc2080ae9e0)
    /Users/phil/go/src/github.com/jtolds/gls/stack_tags.go:18 +0x3e
  github.com/jtolds/gls.(*ContextManager).SetValues(0xc20801e080, 0xc2080b31d0, 0xc2080ae9e0)
    /Users/phil/go/src/github.com/jtolds/gls/context.go:98 +0x503
  github.com/ride/autocomplete.TestSearchForVehicles(0xc20806a480)
    /Users/phil/go/src/github.com/ride/autocomplete/vehicle_test.go:97 +0x243
  testing.tRunner(0xc20806a480, 0x5be890)
    /opt/boxen/homebrew/Cellar/go/1.4/libexec/src/testing/testing.go:447 +0xbf
  created by testing.RunTests
    /opt/boxen/homebrew/Cellar/go/1.4/libexec/src/testing/testing.go:555 +0xa8b

  goroutine 1 [chan receive]:
  testing.RunTests(0x49a078, 0x5be800, 0x7, 0x7, 0x67c001)
    /opt/boxen/homebrew/Cellar/go/1.4/libexec/src/testing/testing.go:556 +0xad6
  testing.(*M).Run(0xc2080463c0, 0x5c9b20)
    /opt/boxen/homebrew/Cellar/go/1.4/libexec/src/testing/testing.go:485 +0x6c
  main.main()
    github.com/ride/autocomplete/_test/_testmain.go:64 +0x1d5

  goroutine 208 [chan receive]:
  github.com/olivere/elastic.(*Client).pinger(0xc208106d40)
    /Users/phil/go/src/github.com/olivere/elastic/client.go:79 +0x6b
  created by github.com/olivere/elastic.NewClient
    /Users/phil/go/src/github.com/olivere/elastic/client.go:60 +0x26e

  goroutine 248 [runnable]:
  net/http.(*persistConn).readLoop(0xc20802e4d0)
    /opt/boxen/homebrew/Cellar/go/1.4/libexec/src/net/http/transport.go:928 +0x9ce
  created by net/http.(*Transport).dialConn
    /opt/boxen/homebrew/Cellar/go/1.4/libexec/src/net/http/transport.go:660 +0xc9f

  goroutine 98 [chan receive]:
  github.com/olivere/elastic.(*Client).pinger(0xc208033e00)
    /Users/phil/go/src/github.com/olivere/elastic/client.go:79 +0x6b
  created by github.com/olivere/elastic.NewClient
    /Users/phil/go/src/github.com/olivere/elastic/client.go:60 +0x26e

  goroutine 17 [syscall, locked to thread]:
  runtime.goexit()
    /opt/boxen/homebrew/Cellar/go/1.4/libexec/src/runtime/asm_amd64.s:2232 +0x1

  goroutine 44 [chan receive]:
  github.com/olivere/elastic.(*Client).pinger(0xc2080332c0)
    /Users/phil/go/src/github.com/olivere/elastic/client.go:79 +0x6b
  created by github.com/olivere/elastic.NewClient
    /Users/phil/go/src/github.com/olivere/elastic/client.go:60 +0x26e

  goroutine 249 [select]:
  net/http.(*persistConn).writeLoop(0xc20802e4d0)
    /opt/boxen/homebrew/Cellar/go/1.4/libexec/src/net/http/transport.go:945 +0x41d
  created by net/http.(*Transport).dialConn
    /opt/boxen/homebrew/Cellar/go/1.4/libexec/src/net/http/transport.go:661 +0xcbc

  goroutine 54 [chan receive]:
  github.com/olivere/elastic.(*Client).pinger(0xc208032f80)
    /Users/phil/go/src/github.com/olivere/elastic/client.go:79 +0x6b
  created by github.com/olivere/elastic.NewClient
    /Users/phil/go/src/github.com/olivere/elastic/client.go:60 +0x26e

  goroutine 76 [chan receive]:
  github.com/olivere/elastic.(*Client).pinger(0xc208032e00)
    /Users/phil/go/src/github.com/olivere/elastic/client.go:79 +0x6b
  created by github.com/olivere/elastic.NewClient
    /Users/phil/go/src/github.com/olivere/elastic/client.go:60 +0x26e

  goroutine 250 [chan receive]:
  github.com/olivere/elastic.(*Client).pinger(0xc208106c40)
    /Users/phil/go/src/github.com/olivere/elastic/client.go:79 +0x6b
  created by github.com/olivere/elastic.NewClient
    /Users/phil/go/src/github.com/olivere/elastic/client.go:60 +0x26e

  goroutine 120 [chan receive]:
  github.com/olivere/elastic.(*Client).pinger(0xc208106b00)
    /Users/phil/go/src/github.com/olivere/elastic/client.go:79 +0x6b
  created by github.com/olivere/elastic.NewClient
    /Users/phil/go/src/github.com/olivere/elastic/client.go:60 +0x26e

  goroutine 142 [chan receive]:
  github.com/olivere/elastic.(*Client).pinger(0xc208106e00)
    /Users/phil/go/src/github.com/olivere/elastic/client.go:79 +0x6b
  created by github.com/olivere/elastic.NewClient
    /Users/phil/go/src/github.com/olivere/elastic/client.go:60 +0x26e

  goroutine 164 [chan receive]:
  github.com/olivere/elastic.(*Client).pinger(0xc208106b80)
    /Users/phil/go/src/github.com/olivere/elastic/client.go:79 +0x6b
  created by github.com/olivere/elastic.NewClient
    /Users/phil/go/src/github.com/olivere/elastic/client.go:60 +0x26e

  goroutine 186 [chan receive]:
  github.com/olivere/elastic.(*Client).pinger(0xc208106d00)
    /Users/phil/go/src/github.com/olivere/elastic/client.go:79 +0x6b
  created by github.com/olivere/elastic.NewClient
    /Users/phil/go/src/github.com/olivere/elastic/client.go:60 +0x26e

  goroutine 230 [chan receive]:
  github.com/olivere/elastic.(*Client).pinger(0xc208106dc0)
    /Users/phil/go/src/github.com/olivere/elastic/client.go:79 +0x6b
  created by github.com/olivere/elastic.NewClient
    /Users/phil/go/src/github.com/olivere/elastic/client.go:60 +0x26e
",5652
343,27491738,"func ResetVehicleIndex(client *elastic.Client) (err error) {

    if _, err = client.DeleteIndex(vehicleIndex).Do(); err != nil {
        return
    }
    if _, err = EnsureVehicleIndex(client); err != nil {
        return
    }

    // TODO: This is awful. Switch to ""wait for green"" when elastic client supports it
    time.Sleep(time.Second * 1)

    return nil
}
",367
344,27575665,"    +-----+                                                              
    | ptr |                                                              
    |*Elem|                                                              
    +-----+                                                              
    | len |                                                              
    |int  |                                                              
    +-----+                                                              
    | cap |                                                              
    |int  |                                                              
    +-----+ 
",679
345,27575665,"func main() {                                                           
                      +                                                 
                      |                                                 
  s := []int{5}       |  s -> +-----+                                   
                      | []int | ptr +-----> +---+                       
                      |       |*int | [1]int| 5 |                       
                      |       +-----+       +---+                       
                      |       |len=1|                                   
                      |       |int  |                                   
                      |       +-----+                                   
                      |       |cap=1|                                   
                      |       |int  |                                   
                      |       +-----+                                   
                      |                                                 
  s = append(s,7)     |  s -> +-----+                                   
                      | []int | ptr +-----> +---+---+                   
                      |       |*int | [2]int| 5 | 7 |                   
                      |       +-----+       +---+---+                   
                      |       |len=2|                                   
                      |       |int  |                                   
                      |       +-----+                                   
                      |       |cap=2|                                   
                      |       |int  |                                   
                      |       +-----+                                   
                      |                                                 
  s = append(s,9)     |  s -> +-----+                                   
                      | []int | ptr +-----> +---+---+---+---+           
                      |       |*int | [4]int| 5 | 7 | 9 |   |           
                      |       +-----+       +---+---+---+---+           
                      |       |len=3|                                   
                      |       |int  |                                   
                      |       +-----+                                   
                      |       |cap=4|                                   
                      |       |int  |                                   
                      |       +-----+                                   
                      |                                                 
  x := append(s,11)   |          +-------------+-----> +---+---+---+---+
                      |          |             | [4]int| 5 | 7 | 9 |11 |
                      |          |             |       +---+---+---+---+
                      |  s -> +--+--+  x -> +--+--+                     
                      | []int | ptr | []int | ptr |                     
                      |       |*int |       |*int |                     
                      |       +-----+       +-----+                     
                      |       |len=3|       |len=4|                     
                      |       |int  |       |int  |                     
                      |       +-----+       +-----+                     
                      |       |cap=4|       |cap=4|                     
                      |       |int  |       |int  |                     
                      |       +-----+       +-----+                     
                      |                                                 
  y := append(s,12)   |                        +-----> +---+---+---+---+
                      |                        | [4]int| 5 | 7 | 9 |12 |
                      |                        |       +---+---+---+---+
                      |                        |                        
                      |          +-------------+-------------+          
                      |          |             |             |          
                      |  s -> +--+--+  x -> +--+--+  y -> +--+--+       
                      | []int | ptr | []int | ptr | []int | ptr |       
                      |       |*int |       |*int |       |*int |       
                      |       +-----+       +-----+       +-----+       
                      |       |len=3|       |len=4|       |len=4|       
                      |       |int  |       |int  |       |int  |       
                      |       +-----+       +-----+       +-----+       
                      |       |cap=4|       |cap=4|       |cap=4|       
                      |       |int  |       |int  |       |int  |       
                      +       +-----+       +-----+       +-----+       
  fmt.Println(s,x,y)                                                    
} 
",4894
346,27600587,memstats,8
347,27600587,cat /proc/11686/status  | grep -i threads,41
348,27600587,Threads:  177,13
349,27600587,go,2
350,27600587,go func(),9
351,27600587,go,2
352,27600587,"package main

import (
    ""sanguo/base/log""
    ""fmt""
    ""runtime""
    ""math/rand""
    ""time""
    ""net""
    ""os""
)

type GameServer struct {
    Host   string
}


func (server *GameServer) Start() {
    // load system data
    log.Debug(""/*************************SREVER START********************************/"")

    tcpAddr, err := net.ResolveTCPAddr(""tcp4"", server.Host)
    if err != nil {
        log.Error(err.Error())
        os.Exit(-1)
    }
    go func(){
        for{
            select {
            case <-time.After(30*time.Second):
                LookUp(""read memstats"")
            }
        }
    }()
    listener, err := net.ListenTCP(""tcp"", tcpAddr)
    if err != nil {
        log.Error(err.Error())
        os.Exit(-1)
    }
    log.Debug(""/*************************SERVER SUCC********************************/"")
    for {
        conn, err := listener.AcceptTCP()
        if err != nil {
            continue
        }
        log.Debug(""Accept a new connection "", conn.RemoteAddr())
        go handleClient(conn)
    }
}

func handleClient(conn *net.TCPConn) {
    sess := NewSession(conn)
    sess.Start()
}

func main() {
    rand.Seed(time.Now().Unix())

    runtime.GOMAXPROCS(runtime.NumCPU())

    log.SetLevel(0)

    filew := log.NewFileWriter(""log"", true)
    err := filew.StartLogger()
    if err != nil {
        fmt.Println(""Failed start log"",err)
        return
    }

    var server GameServer
    server.Host = ""127.0.0.1:9999""
    server.Start()
}
",1489
353,27600587,"package main

import (
    ""io""
    ""encoding/binary""
    ""encoding/json""
    ""github.com/felixge/tcpkeepalive""
    ""net""
    ""sanguo/base/log""
    ""strings""
    ""sync""
    ""time""
)


type Session struct {

    conn *net.TCPConn //the tcp connection from client

    recvChan      chan *bufferedManager.Token //data from client
    closeNotiChan chan bool   //

    ok   bool
    lock sync.Mutex

}


func NewSession(connection *net.TCPConn) (sess *Session) {
    var client Session

    client.conn = connection

    client.recvChan = make(chan []byte, 1024)
    client.closeNotiChan = make(chan bool)
    client.ok = true

    log.Debug(""New Connection"", &client)

    kaConn, err := tcpkeepalive.EnableKeepAlive(connection)
    if err != nil {
        log.Debug(""EnableKeepAlive err "", err)
    } else {
        kaConn.SetKeepAliveIdle(120 * time.Second)
        kaConn.SetKeepAliveCount(4)
        kaConn.SetKeepAliveInterval(5 * time.Second)
    }
    return &client
}


func (sess *Session) Close() {
    sess.lock.Lock()
    if sess.ok {
        sess.ok = false
        close(sess.closeNotiChan)
        sess.conn.Close()
        log.Trace(""Sess Close Succ"", sess, sess.uid)
    }
    sess.lock.Unlock()
}

func (sess *Session) handleRecv() {
    defer func(){
        if err := recover(); err != nil {
            log.Critical(""Panic"", err)
        }
        log.Trace(""Session Recv Exit"", sess, sess.uid)
        sess.Close()
    }()
    ch := sess.recvChan
    header := make([]byte, 2)
    for {
        /**block until recieve len(header)**/
        n, err := io.ReadFull(sess.conn, header)
        if n == 0 && err == io.EOF {
            //Opposite socket is closed
            log.Warn(""Socket Read EOF And Close"", sess)
            break
        } else if err != nil {
            //Sth wrong with this socket
            log.Warn(""Socket Wrong:"", err)
            break
        }
        size := binary.LittleEndian.Uint16(header) + 4
        data := make([]byte, size)
        n, err = io.ReadFull(sess.conn, t.Data)
        if n == 0 && err == io.EOF {
            log.Warn(""Socket Read EOF And Close"", sess)
            break
        } else if err != nil {
            log.Warn(""Socket Wrong:"", err)
            break
        }
        ch <- data //send data to Client to process
    }
}

func (sess *Session) handleDispatch() {
    defer func(){
        log.Trace(""Session Dispatch Exit"",  sess, sess.uid)
        sess.Close()
    }()
    for {
        select {
        case msg, _ := <-sess.recvChan:
            log.Debug(""msg"", msg)
            sess.SendDirectly(""helloworldhellowor"", 1)

        case <-sess.closeNotiChan:
                return
        }
    }
}

func (sess *Session) Start() {
    defer func() {
        if err := recover(); err != nil {
            log.Critical(""Panic"", err)
        }
    }()
    go sess.handleRecv()

    sess.handleDispatch()

    close(sess.recvChan)
    log.Warn(""Session Start Exit"", sess, sess.uid)
}


func (sess *Session) SendDirectly(back interface{}, op int) bool {
    back_json, err := json.Marshal(back)
    if err != nil {
        log.Error(""Can't encode json message "", err, back)
        return false
    }
    log.Debug(sess.uid, ""OUT cmd:"", op, string(back_json))
    _, err = sess.conn.Write(back_json)
    if err != nil {
        log.Error(""send fail"", err)
        return false
    }
    return true
}
",3385
354,27643234,"gcloud config set project 
gcloud components update app
gcloud components update gae-go
goapp get google.golang.org/appengine
# remove existing containers & images just to be sure
docker rm $(docker ps -a -q)
docker rmi $(docker images -q)
gcloud preview app setup-managed-vms
cd $GOPATH/src/google.golang.org/appengine/demos/helloworld
gcloud --verbosity debug preview app run --enable-mvm-logs .
",398
355,27643234,"DEBUG: Running gcloud.preview.app.run with _Args({'admin_host': None,
 'allow_skipped_files': False,
 'api_host': None,
 'appidentity_email_address': None,
 'appidentity_private_key_path': None,
 'auth_domain': 'gmail.com',
 'blobstore_path': None,
 'clear_datastore': False,
 'dart_dev_mode': None,
 'dart_pub_serve_host': None,
 'dart_sdk': None,
 'datastore_consistency_policy': 'time',
 'datastore_path': None,
 'default_gcs_bucket_name': None,
 'docker_host': None,
 'enable_cloud_datastore': False,
 'enable_mvm_logs': True,
 'enable_sendmail': False,
 'format': None,
 'h': None,
 'help': None,
 'host': None,
 'jvm_flag': None,
 'log_level': None,
 'logs_path': None,
 'markdown': None,
 'max_module_instances': None,
 'modules': ['.'],
 'php_executable_path': None,
 'project': None,
 'python_startup_script': None,
 'quiet': None,
 'require_indexes': False,
 'shell': None,
 'show_mail_body': False,
 'smtp_allow_tls': False,
 'smtp_host': None,
 'smtp_password': None,
 'smtp_user': None,
 'storage_path': None,
 'use_mtime_file_watcher': False,
 'user_output_enabled': None,
 'verbosity': 'debug'}).
WARNING: The [application] field is specified in file [/home/dallan/test/testvm3/src/google.golang.org/appengine/demos/helloworld/app.yaml].  This field is not used by gcloud and should be removed.
DEBUG: Found Cloud SDK root: /home/dallan/tools/google-cloud-sdk
DEBUG: Found App Engine SDK root: /home/dallan/tools/google-cloud-sdk/platform/google_appengine
DEBUG: Command sys.path: ['/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/antlr3', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/fancy_urllib', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/ipaddr', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/yaml-3.10', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/rsa', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/pyasn1', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/pyasn1_modules', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/concurrent', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/cherrypy', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/distutils', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/requests', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/six', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/websocket', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/docker', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/jinja2-2.6', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/webob-1.2.3', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/lib/webapp2-2.5.1', '/home/dallan/tools/google-cloud-sdk/./lib', '/home/dallan/tools/google-cloud-sdk/lib/googlecloudsdk/gcloud', '/home/dallan/tools/google-cloud-sdk/lib', '/usr/lib/python2.7/', '/usr/lib/python2.7/plat-x86_64-linux-gnu', '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old', '/usr/lib/python2.7/lib-dynload']
Module [default] found in file [/home/dallan/test/testvm3/src/google.golang.org/appengine/demos/helloworld/app.yaml]
DEBUG: Detected docker environment variables: DOCKER_HOST=tcp:// localhost:2376, DOCKER_CERT_PATH=/home/dallan/.docker, DOCKER_TLS_VERIFY=1
DEBUG: Sent event: Event(category='Executions', action='gcloud', label=u'2014.12.19', value=0)
INFO: Looking for the Dockerfile in /home/dallan/test/testvm3/src/google.golang.org/appengine/demos/helloworld
INFO: Using Dockerfile found in /home/dallan/test/testvm3/src/google.golang.org/appengine/demos/helloworld
DEBUG: Found Cloud SDK root: /home/dallan/tools/google-cloud-sdk
DEBUG: Found images: [u'gcloud-credentials-image:latest', u'google/appengine-log-server:latest', u'google/appengine-log-processor:latest', u'google/appengine-go:latest', u'google/appengine-java:latest', u'google/appengine-python27:latest', u'busybox:latest', u'google/docker-registry:latest']
DEBUG: Found image: google/appengine-go
DEBUG: Running [dev_appserver.py] with: --allow_skipped_files=False --application=metal-shift-360 --auth_domain=gmail.com --clear_datastore=False --datastore_consistency_policy=time --dev_appserver_log_level=debug --enable_cloud_datastore=False --enable_mvm_logs=True --enable_sendmail=False --log_level=debug --require_indexes=False --show_mail_body=False --skip_sdk_update_check=True --smtp_allow_tls=False --use_mtime_file_watcher=False /home/dallan/test/testvm3/src/google.golang.org/appengine/demos/helloworld/app.yaml
INFO: Skipping SDK update check.
INFO: Starting API server at: http:// localhost:49580
DEBUG: Detected docker environment variables: DOCKER_HOST=tcp:// localhost:2376, DOCKER_CERT_PATH=/home/dallan/.docker, DOCKER_TLS_VERIFY=1
DEBUG: Sent event: Event(category='Commands', action='gcloud.preview.app.run', label='unknown', value=0)
DEBUG: _add_watch_for_path('/home/dallan/test/testvm3/src/google.golang.org/appengine/demos/helloworld')
INFO: Looking for image_id for image with tag google/appengine-log-server
INFO: Creating container...
INFO: Container f243742e897d9c38c7c075bf7a6eedd3c054d68c356018c0268ba421dcab477f created.
INFO: Health checks starting for instance 0.
DEBUG: Performing health check for instance 0.
INFO: Starting Go VM Deployment process
INFO: Starting module ""default"" running at: http:// localhost:8080
DEBUG: Dispatching request to  after 0.0000s pending
INFO: Starting admin server at: http:// localhost:8000
DEBUG: Starting process ['/home/dallan/tools/google-cloud-sdk/platform/google_appengine/goroot/bin/go-app-builder', '-app_base', '/home/dallan/test/testvm3/src/google.golang.org/appengine/demos/helloworld', '-arch', '6', '-dynamic', '-goroot', '/home/dallan/tools/google-cloud-sdk/platform/google_appengine/goroot', '-nobuild_files', '^^$', '-unsafe', '-gopath', '/home/dallan/test/testvm3', '-print_extras', '-vm', 'helloworld.go'] with input='', env={'GOARCH': 'amd64', 'GOOS': 'linux'}, cwd=None
INFO: Go VM Deployment process failed: [Errno 104] Connection reset by peer
ERROR: Internal error while starting instance.
Traceback (most recent call last):
  File ""/home/dallan/tools/google-cloud-sdk/platform/google_appengine/google/appengine/tools/devappserver2/module.py"", line 1823, in _start_instance
    if not inst.start():
  File ""/home/dallan/tools/google-cloud-sdk/platform/google_appengine/google/appengine/tools/devappserver2/instance.py"", line 274, in start
    self._runtime_proxy.start()
  File ""/home/dallan/tools/google-cloud-sdk/platform/google_appengine/google/appengine/tools/devappserver2/vm_runtime_proxy_go.py"", line 130, in start
    self._vm_runtime_proxy.start(dockerfile_dir=dst_deployment_dir)
  File ""/home/dallan/tools/google-cloud-sdk/platform/google_appengine/google/appengine/tools/devappserver2/vm_runtime_proxy.py"", line 196, in start
    self._module_configuration.major_version, runtime_config.instance_id)
  File ""/home/dallan/tools/google-cloud-sdk/platform/google_appengine/google/appengine/tools/devappserver2/log_manager.py"", line 172, in add
    _create_table(l)
  File ""/home/dallan/tools/google-cloud-sdk/platform/google_appengine/google/appengine/tools/devappserver2/log_manager.py"", line 138, in _create_table
    response = conn.getresponse()
  File ""/usr/lib/python2.7/httplib.py"", line 1045, in getresponse
    response.begin()
  File ""/usr/lib/python2.7/httplib.py"", line 409, in begin
    version, status, reason = self._read_status()
  File ""/usr/lib/python2.7/httplib.py"", line 365, in _read_status
    line = self.fp.readline(_MAXLINE + 1)
  File ""/usr/lib/python2.7/socket.py"", line 476, in readline
    data = self._sock.recv(self._rbufsize)
error: [Errno 104] Connection reset by peer
",7879
356,27643234,docker version,14
357,27643234,"Client version: 1.3.2
Client API version: 1.15
Go version (client): go1.3.3
Git commit (client): 39fa2fa
OS/Arch (client): linux/amd64
Server version: 1.3.2
Server API version: 1.15
Go version (server): go1.3.3
Git commit (server): 39fa2fa
",240
358,27643234,go version,10
359,27643234,"go version go1.4 linux/amd64
",29
360,27643234,gcloud preview app run,22
361,27643234,"FROM google/appengine-go
..snip..
ADD . /app
RUN /bin/bash /app/_ah/build.sh
",77
362,27643234,"docker run --rm -it --entrypoint /bin/bash google/appengine-go
",63
363,28030045,"package main                                                                                                                                                                                                                                                                                                                                                          import (                                                                                                                                                                               ""encoding/json""                                                                                                                                                                    ""fmt""                                                                                                                                                                              ""os""                                                                                                                                                                                                                                                                                                                                                                  ""github.com/guelfey/go.dbus""                                                                                                                                                       ""github.com/guelfey/go.dbus/introspect""                                                                                                                                        
)                                                                                                                                                                                  

func main() {                                                                                                                                                                      
    os.Setenv(""OMXPLAYER_DBUS_ADDR"", ""/tmp/omxplayerdbus.pi"")                                                                                                                      
    os.Setenv(""OMXPLAYER_DBUS_PID"", ""/tmp/omxplayerdbus.pi.pid"")                                                                                                                   
    conn, err := dbus.SessionBus()                                                                                                                                                 
    if err != nil {                                                                                                                                                                
        panic(err)                                                                                                                                                                 
    }                                                                                                                                                                              
    node, err := introspect.Call(conn.Object(""org.mpris.MediaPlayer2.omxplayer"", ""/org/mpris/MediaPlayer2""))                                                                       
    if err != nil {                                                                                                                                                                
        fmt.Println(err)                                                                                                                                                           
    }                                                                                                                                                                              
    data, _ := json.MarshalIndent(node, """", ""    "")                                                                                                                                

    var s []string                                                                                                                                                                 
    err = conn.BusObject().Call(""org.freedesktop.DBus.ListNames"", 0).Store(&s)                                                                                                     
    if err != nil {                                                                                                                                                                
        fmt.Fprintln(os.Stderr, ""Failed to get list of owned names:"", err)                                                                                                         
        os.Exit(1)                                                                                                                                                                 
    }                                                                                                                                                                              

    fmt.Println(""Currently owned names on the session bus:"")                                                                                                                       
    for _, v := range s {                                                                                                                                                          
        fmt.Println(v)                                                                                                                                                             
    }                                                                                                                                                                              

    os.Stdout.Write(data)                                                                                                                                                          
}
",5938
364,28301402,"WARNING: DATA RACE
Write by goroutine 18:
  runtime.mapassign1()
      c:/go/src/runtime/hashmap.go:383 +0x0
  net/textproto.MIMEHeader.Set()
      c:/go/src/net/textproto/header.go:22 +0xf4
  net/http.Header.Set()
      c:/go/src/net/http/header.go:31 +0x64
  project/middlewares/session.(*ctrl).setHttpHeader()
      D:/gocode/src/project/middlewares/session/ctrl.go:76 +0x9d
  project/middlewares/session.(*ctrl).evaluateJwt()
      D:/gocode/src/project/middlewares/session/ctrl.go:56 +0x31a
  project/middlewares/session.(*ctrl).serveHttp()
      D:/gocode/src/project/middlewares/session/ctrl.go:94 +0x8a
  project/middlewares/session.func┬À006()
      D:/gocode/src/project/middlewares/session/serve_http.go:23 +0x

Previous write by goroutine 17:
  runtime.mapassign1()
      c:/go/src/runtime/hashmap.go:383 +0x0
  net/textproto.MIMEHeader.Add()
      c:/go/src/net/textproto/header.go:15 +0x212
  net/http.Header.Add()
      c:/go/src/net/http/header.go:24 +0x64
  github.com/unrolled/secure.(*Secure).Process()
      D:/gocode/src/github.com/unrolled/secure/secure.go:177 +0xe5b
  project/middlewares/security.func┬À001()
      D:/gocode/src/project/middlewares/security/serve_http.go:33 +0

Goroutine 18 (running) created at:
  project/middlewares/session.ServeHttp()
      D:/gocode/src/project/middlewares/session/serve_http.go:29 +0x
  project/middlewares.New()
      D:/gocode/src/project/middlewares/ctrl.go:12 +0x99
  github.com/codegangsta/negroni.HandlerFunc.ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:24 +0x5f
  github.com/codegangsta/negroni.middleware.ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x114
  github.com/codegangsta/negroni.middleware.ServeHTTP┬Àfm()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x84
  github.com/codegangsta/negroni.(*Static).ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/static.go:30 +0xb71
  github.com/codegangsta/negroni.middleware.ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x114
  github.com/codegangsta/negroni.middleware.ServeHTTP┬Àfm()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x84
  github.com/codegangsta/negroni.(*Logger).ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/logger.go:25 +0x249
  github.com/codegangsta/negroni.middleware.ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x114
  github.com/codegangsta/negroni.middleware.ServeHTTP┬Àfm()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x84
  github.com/codegangsta/negroni.(*Recovery).ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/recovery.go:45 +0xd9
  github.com/codegangsta/negroni.middleware.ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x114
  github.com/codegangsta/negroni.(*Negroni).ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:73 +0x1c7
  net/http/httptest.(*waitGroupHandler).ServeHTTP()
      c:/go/src/net/http/httptest/server.go:200 +0xfe
  net/http.serverHandler.ServeHTTP()
      c:/go/src/net/http/server.go:1703 +0x1fd
  net/http.(*conn).serve()
      c:/go/src/net/http/server.go:1204 +0x108e

Goroutine 17 (finished) created at:
  project/middlewares/security.ServeHttp()
      D:/gocode/src/project/middlewares/security/serve_http.go:37 +0
  project/middlewares.New()
      D:/gocode/src/project/middlewares/ctrl.go:12 +0x64
  github.com/codegangsta/negroni.HandlerFunc.ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:24 +0x5f
  github.com/codegangsta/negroni.middleware.ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x114
  github.com/codegangsta/negroni.middleware.ServeHTTP┬Àfm()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x84
  github.com/codegangsta/negroni.(*Static).ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/static.go:30 +0xb71
  github.com/codegangsta/negroni.middleware.ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x114
  github.com/codegangsta/negroni.middleware.ServeHTTP┬Àfm()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x84
  github.com/codegangsta/negroni.(*Logger).ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/logger.go:25 +0x249
  github.com/codegangsta/negroni.middleware.ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x114
  github.com/codegangsta/negroni.middleware.ServeHTTP┬Àfm()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x84
  github.com/codegangsta/negroni.(*Recovery).ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/recovery.go:45 +0xd9
  github.com/codegangsta/negroni.middleware.ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:33 +0x114
  github.com/codegangsta/negroni.(*Negroni).ServeHTTP()
      D:/gocode/src/github.com/codegangsta/negroni/negroni.go:73 +0x1c7
  net/http/httptest.(*waitGroupHandler).ServeHTTP()
      c:/go/src/net/http/httptest/server.go:200 +0xfe
  net/http.serverHandler.ServeHTTP()
      c:/go/src/net/http/server.go:1703 +0x1fd
  net/http.(*conn).serve()
      c:/go/src/net/http/server.go:1204 +0x108e
==================
2015/02/03 15:05:31 ctrl.go:17: End of process middlewares
2015/02/03 15:05:31 funcs.go:10: Create new user
2015/02/03 15:05:31 validate.go:14: Validate email thompson@example.com
2015/02/03 15:05:31 validate.go:100: Validate password Test!1234
2015/02/03 15:05:31 validate.go:52: Validate name:  ValidName
2015/02/03 15:05:31 create.go:120: Done
[negroni] Completed 0  in 197ms
PASS
ok      project/testing/account_test 0.664s
PS D:\gocode\src\project\testing\account_test> go test -race
2015/02/03 15:08:10 vs.go:50: Connect to neo4j db.
[negroni] Started POST /user
==================
WARNING: DATA RACE
Write by goroutine 18:
  net/http.(*response).Header()
      c:/go/src/net/http/server.go:615 +0x11a
  github.com/codegangsta/negroni.(*responseWriter).Header()
      :42 +0x78
  project/middlewares/session.(*ctrl).setHttpHeader()
      D:/gocode/src/project/middlewares/session/ctrl.go:76 +0x68
  project/middlewares/session.(*ctrl).evaluateJwt()
      D:/gocode/src/project/middlewares/session/ctrl.go:56 +0x31a
  project/middlewares/session.(*ctrl).serveHttp()
      D:/gocode/src/project/middlewares/session/ctrl.go:94 +0x8a
  project/middlewares/session.func┬À006()
      D:/gocode/src/project/middlewares/session/serve_http.go:23 +0x

Previous write by goroutine 17:
  net/http.(*response).Header()
      c:/go/src/net/http/server.go:615 +0x11a
  github.com/codegangsta/negroni.(*responseWriter).Header()
      :42 +0x78
  github.com/unrolled/secure.(*Secure).Process()
      D:/gocode/src/github.com/unrolled/secure/secure.go:177 +0xe24
  project/middlewares/security.func┬À001()
      D:/gocode/src/project/middlewares/security/serve_http.go:33 +0
",6994
365,28301402,"func New(res http.ResponseWriter, req *http.Request, next http.HandlerFunc) {

    if err := process(security.ServeHttp(res, req), session.ServeHttp(res, req)); err != nil {
        res.WriteHeader(http.StatusInternalServerError)
        return
    }

    log.Println(""End of process middlewares"")
    next(res, req)

}

// Process all middlewares
func process(chErrs ...<-chan error) error {

    for _, chErr := range chErrs {

        // Will abort the loop, when error occurs
        if err := <-chErr; err != nil {
            return err
        }

    }
    return nil
}
",577
366,28301402,"func Config() *negroni.Negroni {
    n := negroni.Classic()
    n.Use(negroni.HandlerFunc(middlewares.New))
    n.UseHandler(routes.Set())
    return n

}
",155
367,28353607,"// +build windows

/*
Package wmi provides a WQL interface for WMI on Windows.

Example code to print names of running processes:

    type Win32_Process struct {
        Name string
    }

    func main() {
        var dst []Win32_Process
        q := wmi.CreateQuery(&dst, """")
        err := wmi.Query(q, &dst)
        if err != nil {
            log.Fatal(err)
        }
        for i, v := range dst {
            println(i, v.Name)
        }
    }

*/
package wmi

import (
    ""bytes""
    ""errors""
    ""fmt""
    ""log""
    ""os""
    ""reflect""
    ""runtime""
    ""strconv""
    ""strings""
    ""sync""
    ""time""

    ""github.com/mattn/go-ole""
    ""github.com/mattn/go-ole/oleutil""
)

var l = log.New(os.Stdout, """", log.LstdFlags)

var (
    ErrInvalidEntityType = errors.New(""wmi: invalid entity type"")
    lock                 sync.Mutex
)

// QueryNamespace invokes Query with the given namespace on the local machine.
func QueryNamespace(query string, dst interface{}, namespace string) error {
    return Query(query, dst, nil, namespace)
}

// Query runs the WQL query and appends the values to dst.
//
// dst must have type *[]S or *[]*S, for some struct type S. Fields selected in
// the query must have the same name in dst. Supported types are all signed and
// unsigned integers, time.Time, string, bool, or a pointer to one of those.
// Array types are not supported.
//
// By default, the local machine and default namespace are used. These can be
// changed using connectServerArgs. See
// http://msdn.microsoft.com/en-us/library/aa393720.aspx for details.
func Query(query string, dst interface{}, connectServerArgs ...interface{}) error {
    dv := reflect.ValueOf(dst)
    if dv.Kind() != reflect.Ptr || dv.IsNil() {
        return ErrInvalidEntityType
    }
    dv = dv.Elem()
    mat, elemType := checkMultiArg(dv)
    if mat == multiArgTypeInvalid {
        return ErrInvalidEntityType
    }

    lock.Lock()
    defer lock.Unlock()
    runtime.LockOSThread()
    defer runtime.UnlockOSThread()

    err := ole.CoInitializeEx(0, ole.COINIT_MULTITHREADED)
    if err != nil {
        oleerr := err.(*ole.OleError)
        // S_FALSE           = 0x00000001 // CoInitializeEx was already called on this thread
        if oleerr.Code() != ole.S_OK && oleerr.Code() != 0x00000001 {
            return err
        }
    } else {
        // Only invoke CoUninitialize if the thread was not initizlied before.
        // This will allow other go packages based on go-ole play along
        // with this library.
        defer ole.CoUninitialize()
    }

    unknown, err := oleutil.CreateObject(""WbemScripting.SWbemLocator"")
    if err != nil {
        return err
    }
    defer unknown.Release()

    wmi, err := unknown.QueryInterface(ole.IID_IDispatch)
    if err != nil {
        return err
    }
    defer wmi.Release()

    // service is a SWbemServices
    serviceRaw, err := oleutil.CallMethod(wmi, ""ConnectServer"", connectServerArgs...)
    if err != nil {
        return err
    }
    service := serviceRaw.ToIDispatch()
    defer serviceRaw.Clear()

    // result is a SWBemObjectSet
    resultRaw, err := oleutil.CallMethod(service, ""ExecQuery"", query)
    if err != nil {
        return err
    }
    result := resultRaw.ToIDispatch()
    defer resultRaw.Clear()

    count, err := oleInt64(result, ""Count"")
    if err != nil {
        return err
    }

    // Initialize a slice with Count capacity
    dv.Set(reflect.MakeSlice(dv.Type(), 0, int(count)))

    var errFieldMismatch error
    for i := int64(0); i < count; i++ {
        err := func() error {
            // item is a SWbemObject, but really a Win32_Process
            itemRaw, err := oleutil.CallMethod(result, ""ItemIndex"", i)
            if err != nil {
                return err
            }
            item := itemRaw.ToIDispatch()
            defer itemRaw.Clear()

            ev := reflect.New(elemType)
            if err = loadEntity(ev.Interface(), item); err != nil {
                if _, ok := err.(*ErrFieldMismatch); ok {
                    // We continue loading entities even in the face of field mismatch errors.
                    // If we encounter any other error, that other error is returned. Otherwise,
                    // an ErrFieldMismatch is returned.
                    errFieldMismatch = err
                } else {
                    return err
                }
            }
            if mat != multiArgTypeStructPtr {
                ev = ev.Elem()
            }
            dv.Set(reflect.Append(dv, ev))
            return nil
        }()
        if err != nil {
            return err
        }
    }
    return errFieldMismatch
}

// ErrFieldMismatch is returned when a field is to be loaded into a different
// type than the one it was stored from, or when a field is missing or
// unexported in the destination struct.
// StructType is the type of the struct pointed to by the destination argument.
type ErrFieldMismatch struct {
    StructType reflect.Type
    FieldName  string
    Reason     string
}

func (e *ErrFieldMismatch) Error() string {
    return fmt.Sprintf(""wmi: cannot load field %q into a %q: %s"",
        e.FieldName, e.StructType, e.Reason)
}

var timeType = reflect.TypeOf(time.Time{})

// loadEntity loads a SWbemObject into a struct pointer.
func loadEntity(dst interface{}, src *ole.IDispatch) (errFieldMismatch error) {
    v := reflect.ValueOf(dst).Elem()
    for i := 0; i < v.NumField(); i++ {
        f := v.Field(i)
        isPtr := f.Kind() == reflect.Ptr
        if isPtr {
            ptr := reflect.New(f.Type().Elem())
            f.Set(ptr)
            f = f.Elem()
        }
        n := v.Type().Field(i).Name
        if !f.CanSet() {
            return &ErrFieldMismatch{
                StructType: f.Type(),
                FieldName:  n,
                Reason:     ""CanSet() is false"",
            }
        }
        prop, err := oleutil.GetProperty(src, n)
        if err != nil {
            errFieldMismatch = &ErrFieldMismatch{
                StructType: f.Type(),
                FieldName:  n,
                Reason:     ""no such struct field"",
            }
            continue
        }
        defer prop.Clear()

        switch val := prop.Value().(type) {
        case int, int64:
            var v int64
            switch val := val.(type) {
            case int:
                v = int64(val)
            case int64:
                v = val
            default:
                panic(""unexpected type"")
            }
            switch f.Kind() {
            case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
                f.SetInt(v)
            case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
                f.SetUint(uint64(v))
            default:
                return &ErrFieldMismatch{
                    StructType: f.Type(),
                    FieldName:  n,
                    Reason:     ""not an integer class"",
                }
            }
        case string:
            iv, err := strconv.ParseInt(val, 10, 64)
            switch f.Kind() {
            case reflect.String:
                f.SetString(val)
            case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
                if err != nil {
                    return err
                }
                f.SetInt(iv)
            case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
                if err != nil {
                    return err
                }
                f.SetUint(uint64(iv))
            case reflect.Struct:
                switch f.Type() {
                case timeType:
                    if len(val) == 25 {
                        mins, err := strconv.Atoi(val[22:])
                        if err != nil {
                            return err
                        }
                        val = val[:22] + fmt.Sprintf(""%02d%02d"", mins/60, mins%60)
                    }
                    t, err := time.Parse(""20060102150405.000000-0700"", val)
                    if err != nil {
                        return err
                    }
                    f.Set(reflect.ValueOf(t))
                }
            }
        case bool:
            switch f.Kind() {
            case reflect.Bool:
                f.SetBool(val)
            default:
                return &ErrFieldMismatch{
                    StructType: f.Type(),
                    FieldName:  n,
                    Reason:     ""not a bool"",
                }
            }
        default:
            typeof := reflect.TypeOf(val)
            if isPtr && typeof == nil {
                break
            }
            return &ErrFieldMismatch{
                StructType: f.Type(),
                FieldName:  n,
                Reason:     fmt.Sprintf(""unsupported type (%T)"", val),
            }
        }
    }
    return errFieldMismatch
}

type multiArgType int

const (
    multiArgTypeInvalid multiArgType = iota
    multiArgTypeStruct
    multiArgTypeStructPtr
)

// checkMultiArg checks that v has type []S, []*S for some struct type S.
//
// It returns what category the slice's elements are, and the reflect.Type
// that represents S.
func checkMultiArg(v reflect.Value) (m multiArgType, elemType reflect.Type) {
    if v.Kind() != reflect.Slice {
        return multiArgTypeInvalid, nil
    }
    elemType = v.Type().Elem()
    switch elemType.Kind() {
    case reflect.Struct:
        return multiArgTypeStruct, elemType
    case reflect.Ptr:
        elemType = elemType.Elem()
        if elemType.Kind() == reflect.Struct {
            return multiArgTypeStructPtr, elemType
        }
    }
    return multiArgTypeInvalid, nil
}

func oleInt64(item *ole.IDispatch, prop string) (int64, error) {
    v, err := oleutil.GetProperty(item, prop)
    if err != nil {
        return 0, err
    }
    defer v.Clear()

    i := int64(v.Val)
    return i, nil
}

// CreateQuery returns a WQL query string that queries all columns of src. where
// is an optional string that is appended to the query, to be used with WHERE
// clauses. In such a case, the ""WHERE"" string should appear at the beginning.
func CreateQuery(src interface{}, where string) string {
    var b bytes.Buffer
    b.WriteString(""SELECT "")
    s := reflect.Indirect(reflect.ValueOf(src))
    t := s.Type()
    if s.Kind() == reflect.Slice {
        t = t.Elem()
    }
    if t.Kind() != reflect.Struct {
        return """"
    }
    var fields []string
    for i := 0; i < t.NumField(); i++ {
        fields = append(fields, t.Field(i).Name)
    }
    b.WriteString(strings.Join(fields, "", ""))
    b.WriteString("" FROM "")
    b.WriteString(t.Name())
    b.WriteString("" "" + where)
    return b.String()
}
",10800
368,28416900,"package main

/*
#cgo LDFLAGS: -lbluetooth

#include 
#include 
#include 
*/
import ""C""

func main() {
        C.hci_get_route(nil)
}
",134
369,28416900,"CC=arm-linux-gnueabihf-gcc
CGO_ENABLED=1
GOARCH=arm
GOARM=6
",60
370,28416900,Segmentation fault,18
371,28416900,"LD_PRELOAD=/lib/arm-linux-gnueabihf/libSegFault.so
SEGFAULT_USE_ALTSTACK=1
",75
372,28416900,"*** Segmentation fault
Register dump:
 R0: 00000000   R1: 00000001   R2: bebf37f4   R3: bebf37fc
 R4: 00000000   R5: 00000000   R6: 00010c59   R7: 00000000
 R8: 00000000   R9: 00000000   SL: b6f33000   FP: 00000000
 IP: 0000004f   SP: bebf37ec   LR: 00010c6b   PC: 0005d7f4
 CPSR: 40000030
 Trap: 0000000e   Error: 00000817   OldMask: 00000000
 Addr: 00000001
Backtrace:
Memory map:
00010000-00125000 r-xp 00000000 b3:02 16193      /home/pi/test
00135000-0013b000 rw-p 00115000 b3:02 16193      /home/pi/test
0013b000-0014a000 rw-p 00000000 00:00 0 
0026b000-00290000 rw-p 00000000 00:00 0          [heap]
b6d53000-b6d73000 r-xp 00000000 b3:02 16080      /lib/arm-linux-gnueabihf/libgcc_s.so.1
b6d73000-b6d7a000 ---p 00020000 b3:02 16080      /lib/arm-linux-gnueabihf/libgcc_s.so.1
b6d7a000-b6d7b000 rw-p 0001f000 b3:02 16080      /lib/arm-linux-gnueabihf/libgcc_s.so.1
b6d7b000-b6e9f000 r-xp 00000000 b3:02 4254       /lib/arm-linux-gnueabihf/libc-2.13.so
b6e9f000-b6ea6000 ---p 00124000 b3:02 4254       /lib/arm-linux-gnueabihf/libc-2.13.so
b6ea6000-b6ea8000 r--p 00123000 b3:02 4254       /lib/arm-linux-gnueabihf/libc-2.13.so
b6ea8000-b6ea9000 rw-p 00125000 b3:02 4254       /lib/arm-linux-gnueabihf/libc-2.13.so
b6ea9000-b6eac000 rw-p 00000000 00:00 0 
b6eac000-b6ec0000 r-xp 00000000 b3:02 4247       /lib/arm-linux-gnueabihf/libpthread-2.13.so
b6ec0000-b6ec7000 ---p 00014000 b3:02 4247       /lib/arm-linux-gnueabihf/libpthread-2.13.so
b6ec7000-b6ec8000 r--p 00013000 b3:02 4247       /lib/arm-linux-gnueabihf/libpthread-2.13.so
b6ec8000-b6ec9000 rw-p 00014000 b3:02 4247       /lib/arm-linux-gnueabihf/libpthread-2.13.so
b6ec9000-b6ecb000 rw-p 00000000 00:00 0 
b6ecb000-b6ee0000 r-xp 00000000 b3:02 44311      /usr/lib/arm-linux-gnueabihf/libbluetooth.so.3.12.0
b6ee0000-b6ee7000 ---p 00015000 b3:02 44311      /usr/lib/arm-linux-gnueabihf/libbluetooth.so.3.12.0
b6ee7000-b6ee8000 r--p 00014000 b3:02 44311      /usr/lib/arm-linux-gnueabihf/libbluetooth.so.3.12.0
b6ee8000-b6eea000 rw-p 00015000 b3:02 44311      /usr/lib/arm-linux-gnueabihf/libbluetooth.so.3.12.0
b6ef8000-b6efa000 r-xp 00000000 b3:02 25761      /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so
b6efa000-b6f01000 ---p 00002000 b3:02 25761      /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so
b6f01000-b6f02000 rw-p 00001000 b3:02 25761      /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so
b6f02000-b6f04000 r-xp 00000000 b3:02 4246       /lib/arm-linux-gnueabihf/libSegFault.so
b6f04000-b6f0b000 ---p 00002000 b3:02 4246       /lib/arm-linux-gnueabihf/libSegFault.so
b6f0b000-b6f0c000 r--p 00001000 b3:02 4246       /lib/arm-linux-gnueabihf/libSegFault.so
b6f0c000-b6f0d000 rw-p 00002000 b3:02 4246       /lib/arm-linux-gnueabihf/libSegFault.so
b6f0d000-b6f2a000 r-xp 00000000 b3:02 4248       /lib/arm-linux-gnueabihf/ld-2.13.so
b6f2e000-b6f32000 rw-p 00000000 00:00 0 
b6f32000-b6f33000 r--p 0001d000 b3:02 4248       /lib/arm-linux-gnueabihf/ld-2.13.so
b6f33000-b6f34000 rw-p 0001e000 b3:02 4248       /lib/arm-linux-gnueabihf/ld-2.13.so
bebd3000-bebf4000 rw-p 00000000 00:00 0 
bee7f000-bee80000 r-xp 00000000 00:00 0          [sigpage]
ffff0000-ffff1000 r-xp 00000000 00:00 0          [vectors]
Segmentation fault
",3185
373,28416900,/usr/lib/arm-linux-gnueabihf/libcofi_rpi.so,43
374,28416900,/etc/ld.so.preload,18
375,28416900,libcofi_rpi.so,14
376,28416900,"-tags netgo -a -ldflags ""-linkmode external -extldflags -static""",64
377,28416900,Illegal instruction,19
378,28416900,Segmentation fault,18
379,28416900,"$ docker run -it golang:1.4.1-cross bash
",41
380,28416900,"echo ""deb http://emdebian.org/tools/debian/ jessie main"" >/etc/apt/sources.list.d/crosstools.list
curl -s http://emdebian.org/tools/debian/emdebian-toolchain-archive.key | apt-key add -
dpkg --add-architecture armhf
apt-get update
apt-get install -y crossbuild-essential-armhf libbluetooth-dev:armhf
export CC=arm-linux-gnueabihf-gcc
export CGO_ENABLED=1
export GOARCH=arm
export GOARM=6
go build -o test test.go
",413
381,28416900,"$ uname -a
Linux raspberrypi 3.18.5+ #744 PREEMPT Fri Jan 30 18:19:07 GMT 2015 armv6l GNU/Linux

$ cat /proc/cpuinfo
processor       : 0
model name      : ARMv6-compatible processor rev 7 (v6l)
BogoMIPS        : 2.00
Features        : half thumb fastmult vfp edsp java tls 
CPU implementer : 0x41
CPU architecture: 7
CPU variant     : 0x0
CPU part        : 0xb76
CPU revision    : 7
Hardware        : BCM2708
Revision        : 0010
Serial          : 000000002a69d702

$ ldd test
        /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so (0xb6f01000)
        libbluetooth.so.3 => /usr/lib/arm-linux-gnueabihf/libbluetooth.so.3 (0xb6ed4000)
        libpthread.so.0 => /lib/arm-linux-gnueabihf/libpthread.so.0 (0xb6eb5000)
        libc.so.6 => /lib/arm-linux-gnueabihf/libc.so.6 (0xb6d84000)
        /lib/ld-linux-armhf.so.3 (0xb6f0e000) 
",830
382,28416900,"$ dpkg -s libbluetooth3

Package: libbluetooth3
Status: install ok installed
Priority: optional
Section: libs
Installed-Size: 172
Maintainer: Debian Bluetooth Maintainers 
Architecture: armhf
Multi-Arch: same
Source: bluez
Version: 4.99-2
Replaces: libsdp2 (<= 1.5-2)
Depends: libc6 (>= 2.13-28)
Pre-Depends: multiarch-support
Conflicts: libsdp2 (<= 1.5-2)
Description: Library to use the BlueZ Linux Bluetooth stack
 BlueZ is the official Linux Bluetooth protocol stack. It is an Open Source
 project distributed under GNU General Public License (GPL).
Homepage: http://www.bluez.org
",585
383,28416900,"$ uname -a
Linux alarm 3.10.66-1-ARCH #1 SMP PREEMPT Wed Jan 28 18:12:35 MST 2015 armv7l GNU/Linux

$ cat /proc/cpuinfo
Processor       : ARMv7 Processor rev 1 (v7l)
processor       : 0
BogoMIPS        : 3.27

processor       : 1
BogoMIPS        : 3.27

processor       : 2
BogoMIPS        : 3.27

processor       : 3
BogoMIPS        : 3.27

Features        : swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 
CPU implementer : 0x41
CPU architecture: 7
CPU variant     : 0x0
CPU part        : 0xc05
CPU revision    : 1

Hardware        : ODROIDC
Revision        : 000a
Serial          : 1b00000000000000

$ ldd test
       libbluetooth.so.3 => /usr/lib/libbluetooth.so.3 (0xb6eaf000)
       libpthread.so.0 => /usr/lib/libpthread.so.0 (0xb6e87000)
       libc.so.6 => /usr/lib/libc.so.6 (0xb6d48000)
       /lib/ld-linux-armhf.so.3 (0xb6ed1000)
",850
384,28416900,"$ pacman -Qe bluez
bluez 5.27-1
",32
385,28416900,"$ uname -a
Linux 094aa2ed34a5 3.18.5-gentoo-tp #1 SMP Fri Feb 6 20:14:55 CET 2015 x86_64 GNU/Linux
",99
386,28416900,"$ dpkg -s libbluetooth-dev:armhf
Package: libbluetooth-dev
Status: install ok installed
Priority: extra
Section: libdevel
Installed-Size: 429
Maintainer: Debian Bluetooth Maintainers 
Architecture: armhf
Source: bluez (5.23-2)
Version: 5.23-2+b1
Replaces: libsdp2-dev (<= 1.5.2)
Provides: libbluetooth3-dev
Depends: libbluetooth3 (= 5.23-2+b1), libc6-dev | libc-dev
Suggests: pkg-config
Conflicts: bluez-pan, libbluetooth-dev, libsdp2-dev (<= 1.5.2)
Description: Development files for using the BlueZ Linux Bluetooth library
 BlueZ is the official Linux Bluetooth protocol stack. It is an Open Source
 project distributed under GNU General Public License (GPL).
Homepage: http://www.bluez.org
",693
387,28416900,libbluetooth-dev,16
388,28416900,libbluetooth.so,15
389,28416900,"./test: /lib/arm-linux-gnueabihf/libc.so.6: version `GLIBC_2.15' not found (required by /home/pi/libbluetooth.so.3.17.11)
",122
390,28416900,Illegal instruction (core dumped),33
391,28416900,GOARM=5,7
392,28416900,6,1
393,28416900,7,1
394,28416900,libbluetooth,12
395,28527673,"package main
import ""fmt""
func main() {
    fmt.Println(""hello world"")
}
",73
396,28527673,"root@OpenWrt:/mnt/sda3# gccgo -v -c hello.go
Using built-in specs.
COLLECT_GCC=gccgo
Target: mipsel-openwrt-linux-gnu
Configured with: /home/michal/Data/openwrt/mt7621/mtk-openwrt-master-eglibc/build_dir/target-mipsel_1004kc+dsp_eglibc-2.19/gcc-4.9.2/configure --target=mipsel-openwrt-linux --host=mipsel-openwrt-linux --build=x86_64-linux-gnu --program-prefix= --program-suffix= --prefix=/usr --exec-prefix=/usr --bindir=/usr/bin --sbindir=/usr/sbin --libexecdir=/usr/lib --sysconfdir=/etc --datadir=/usr/share --localstatedir=/var --mandir=/usr/man --infodir=/usr/info --disable-nls --build=x86_64-linux-gnu --host=mipsel-openwrt-linux-gnu --target=mipsel-openwrt-linux-gnu --enable-languages=c,c++,go --with-bugurl=https://dev.openwrt.org/ --with-pkgversion='OpenWrt GCC 4.9.2' --enable-shared --disable-__cxa_atexit --enable-target-optspace --with-gnu-ld --disable-nls --disable-libmudflap --disable-multilib --disable-libgomp --disable-libquadmath --disable-libssp --disable-decimal-float --disable-libstdcxx-pch --with-host-libstdcxx=-lstdc++ --prefix=/usr --libexecdir=/usr/lib --with-float=soft
Thread model: posix
gcc version 4.9.2 (OpenWrt GCC 4.9.2) 
COLLECT_GCC_OPTIONS='-v' '-c' '-o' 'hello.o' '-shared-libgcc' '-msoft-float' '-mllsc' '-mno-shared'
 /usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/go1 hello.go -quiet -dumpbase hello.go -msoft-float -mllsc -mno-shared -auxbase-strip hello.o -version -L/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2 -L/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/../../.. -o /tmp/ccWiioSJ.s
GNU Go (OpenWrt GCC 4.9.2) version 4.9.2 (mipsel-openwrt-linux-gnu)
        compiled by GNU C version 4.8.3, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
GGC heuristics: --param ggc-min-expand=47 --param ggc-min-heapsize=31962
GNU Go (OpenWrt GCC 4.9.2) version 4.9.2 (mipsel-openwrt-linux-gnu)
        compiled by GNU C version 4.8.3, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
GGC heuristics: --param ggc-min-expand=47 --param ggc-min-heapsize=31962
COLLECT_GCC_OPTIONS='-v' '-c' '-o' 'hello.o' '-shared-libgcc' '-msoft-float' '-mllsc' '-mno-shared'
 as -v -EL -O1 -no-mdebug -mabi=32 -mno-shared -KPIC -o hello.o /tmp/ccWiioSJ.s
GNU assembler version 2.24 (mipsel-openwrt-linux-gnu) using BFD version (GNU Binutils) 2.24
COMPILER_PATH=/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/:/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/:/usr/lib/gcc/mipsel-openwrt-linux-gnu/:/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/:/usr/lib/gcc/mipsel-openwrt-linux-gnu/
LIBRARY_PATH=/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/:/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/../../../:/lib/:/usr/lib/
COLLECT_GCC_OPTIONS='-v' '-c' '-o' 'hello.o' '-shared-libgcc' '-msoft-float' '-mllsc' '-mno-shared'
",2735
397,28527673,undefined reference to `sync..import',37
398,28527673,"root@OpenWrt:/mnt/sda2# gccgo -v -o hello hello.o
Using built-in specs.
COLLECT_GCC=gccgo
COLLECT_LTO_WRAPPER=/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/lto-wrapper
Target: mipsel-openwrt-linux-gnu
Configured with: /home/michal/Data/openwrt/mt7621/mtk-openwrt-master-eglibc/build_dir/target-mipsel_1004kc+dsp_eglibc-2.19/gcc-4.9.2/configure --target=mipsel-openwrt-linux --host=mipsel-openwrt-linux --build=x86_64-linux-gnu --program-prefix= --program-suffix= --prefix=/usr --exec-prefix=/usr --bindir=/usr/bin --sbindir=/usr/sbin --libexecdir=/usr/lib --sysconfdir=/etc --datadir=/usr/share --localstatedir=/var --mandir=/usr/man --infodir=/usr/info --disable-nls --build=x86_64-linux-gnu --host=mipsel-openwrt-linux-gnu --target=mipsel-openwrt-linux-gnu --enable-languages=c,c++,go --with-bugurl=https://dev.openwrt.org/ --with-pkgversion='OpenWrt GCC 4.9.2' --enable-shared --disable-__cxa_atexit --enable-target-optspace --with-gnu-ld --disable-nls --disable-libmudflap --disable-multilib --disable-libgomp --disable-libquadmath --disable-libssp --disable-decimal-float --disable-libstdcxx-pch --with-host-libstdcxx=-lstdc++ --prefix=/usr --libexecdir=/usr/lib --with-float=soft
Thread model: posix
gcc version 4.9.2 (OpenWrt GCC 4.9.2) 
COMPILER_PATH=/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/:/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/:/usr/lib/gcc/mipsel-openwrt-linux-gnu/:/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/:/usr/lib/gcc/mipsel-openwrt-linux-gnu/
LIBRARY_PATH=/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/:/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/../../../:/lib/:/usr/lib/
COLLECT_GCC_OPTIONS='-v' '-o' 'hello' '-shared-libgcc' '-msoft-float' '-mllsc' '-mno-shared'
 /usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/collect2 --eh-frame-hdr -EL -dynamic-linker /lib/ld.so.1 -o hello /usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/crt1.o /usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/crti.o /usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/crtbegin.o -L/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2 -L/usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/../../.. hello.o -lgobegin -lgo -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/crtend.o /usr/lib/gcc/mipsel-openwrt-linux-gnu/4.9.2/crtn.o
hello.o: In function `__go_init_main':
hello.go:(.text+0x16c): undefined reference to `sync..import'
collect2: error: ld returned 1 exit status
",2367
399,28527673,-static-libgo,13
400,28767067,varbinary(2000),15
401,28767067,"var charData CharacterData
db.Where(CharacterData{CharId: charId, Segment: 0}).FirstOrInit(&charData)
charData.Data = data[16:]
db.Save(&charData)
",147
402,28767067,len(data[16:]),14
403,28767067," type CharacterData struct {
  CharId    uint32
  Data      []byte
  Segment   uint8
  SegmentId uint16

  CreatedAt time.Time
  UpdatedAt time.Time
  DeletedAt time.Time
 }
",174
404,28767067,"fmt.Println(string(charData0))
fmt.Println(len(charData0))
fmt.Println(len(string(charData0)))

0uyuyuyyuyuyuyy���������������������������� // only this gets inserted to the db which is short of the actual 1587
1587
1587
",277
405,28767067,"INSERT INTO character_data (char_id, data, segment) VALUES ('2', '0tututututt����������������������������', '0')
",169
406,28767067,data[16:],9
407,28767067,"[0 0 48 6 1 0 1 0 104 101 104 101 104 101 104 101 104 101 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
",3253
408,28767067,"0tututututtÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
",68
409,28767067,"pdukelÐÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ2ÿÿÿÿÿÿÿÿÿÿ1ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿHHllbÍfÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿúúúúúúúÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿþ  ú
úúþ
þþþþÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ'ÿÿ
",2068
410,28767067,"var charData0 []byte = data[16:]
hexData := fmt.Sprintf(""%x"", charData0)
fmt.Println(hexData)
db.Exec(""INSERT INTO character_data (char_id, data, segment) VALUES (?, UNHEX(?), ?)"", charId, hexData, 0)

=> 000030060100010079697969796979697979697900000000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff
",3380
411,28767067,"0yiyiyiyiyyiyÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
",70
412,28767067,"INSERT INTO character_data (char_id, data, segment) VALUES ('4', UNHEX('000030060100010074757475747574757475740000000000050000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff0000000000000000000000000000ffff
",3255
413,29057228,"package main

import (
    ""fmt""
    ""log""
)

type Stmt struct {
    Name  string
    After []string
}

func main() {
    stmts := []Stmt{
        {Name: ""app"", After: []string{""app_user""}},
        {Name: ""billingplan"", After: []string{}},
        {Name: ""campaign"", After: []string{""app_user""}},
        {Name: ""campaign_app"", After: []string{""campaign"", ""app""}},
        {Name: ""campaign_ip"", After: []string{""campaign"", ""ip""}},
        {Name: ""campaign_operator"", After: []string{""campaign"", ""operator""}},
        {Name: ""campaign_sponsor"", After: []string{""campaign"", ""sponsor""}},
        {Name: ""campaign_subscriberfilter"", After: []string{""campaign"", ""subscriber_filters""}},
        {Name: ""campaign_url"", After: []string{""campaign"", ""url""}},
        {Name: ""contentpartner"", After: []string{""app_user""}},
        {Name: ""filter_criteria"", After: []string{""campaign"", ""subscriber_filters""}},
        {Name: ""ip"", After: []string{""app_user""}},
        {Name: ""mobile_registered"", After: []string{""campaign"", ""app""}},
        {Name: ""operator"", After: []string{}},
        {Name: ""passwords"", After: []string{""app_user""}},
        {Name: ""publish_package"", After: []string{}},
        {Name: ""role"", After: []string{}},
        {Name: ""passwords"", After: []string{""app_user""}},
        {Name: ""sponsor"", After: []string{""app_user""}},
        {Name: ""subscriber_dbs"", After: []string{}},
        {Name: ""subscriber_filters"", After: []string{""subscriber_dbs""}},
        {Name: ""timezone"", After: []string{}},
        {Name: ""url"", After: []string{""app_user""}},
        {Name: ""app_user"", After: []string{}},
        {Name: ""user_role"", After: []string{""app_user"", ""role""}},
    }

    g := make(graph)
    for _, s := range stmts {
        g[s.Name] = after(s.After)
    }

    sorted, err := topoSort(g)
    if err != nil {
        log.Fatalf(""could not sort: %v"", err)
    }
    for _, s := range sorted {
        fmt.Println(s)
    }
}

func topoSort(g graph) ([]string, error) {
    sccs := tarjanSCC(g)
    sorted := make([]string, len(sccs))
    for i, s := range sccs {
        if len(s) != 1 {
            return nil, fmt.Errorf(""found directed cycle: %q"", s)
        }
        sorted[i] = s[0]
    }
    return sorted, nil
}

// graph is an edge list representation of a directed graph.
type graph map[string]set

// set is an string set.
type set map[string]struct{}

func after(i []string) set {
    if len(i) == 0 {
        return nil
    }
    s := make(set)
    for _, v := range i {
        s[v] = struct{}{}
    }
    return s
}

// tarjanSCC returns a the strongly connected components of the
// directed graph g.
func tarjanSCC(g graph) [][]string {
    t := tarjan{
        g: g,

        indexTable: make(map[string]int, len(g)),
        lowLink:    make(map[string]int, len(g)),
        onStack:    make(map[string]bool, len(g)),
    }
    for v := range t.g {
        if t.indexTable[v] == 0 {
            t.strongconnect(v)
        }
    }
    return t.sccs
}

// tarjan implements Tarjan's strongly connected component finding
// algorithm. The implementation is from the pseudocode at
//
// http://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm
//
type tarjan struct {
    g graph

    index      int
    indexTable map[string]int
    lowLink    map[string]int
    onStack    map[string]bool

    stack []string

    sccs [][]string
}

// strongconnect is the strongconnect function described in the
// wikipedia article.
func (t *tarjan) strongconnect(v string) {
    // Set the depth index for v to the smallest unused index.
    t.index++
    t.indexTable[v] = t.index
    t.lowLink[v] = t.index
    t.stack = append(t.stack, v)
    t.onStack[v] = true

    // Consider successors of v.
    for w := range t.g[v] {
        if t.indexTable[w] == 0 {
            // Successor w has not yet been visited; recur on it.
            t.strongconnect(w)
            t.lowLink[v] = min(t.lowLink[v], t.lowLink[w])
        } else if t.onStack[w] {
            // Successor w is in stack s and hence in the current SCC.
            t.lowLink[v] = min(t.lowLink[v], t.indexTable[w])
        }
    }

    // If v is a root node, pop the stack and generate an SCC.
    if t.lowLink[v] == t.indexTable[v] {
        // Start a new strongly connected component.
        var (
            scc []string
            w   string
        )
        for {
            w, t.stack = t.stack[len(t.stack)-1], t.stack[:len(t.stack)-1]
            t.onStack[w] = false
            // Add w to current strongly connected component.
            scc = append(scc, w)
            if w == v {
                break
            }
        }
        // Output the current strongly connected component.
        t.sccs = append(t.sccs, scc)
    }
}

func min(a, b int) int {
    if a < b {
        return a
    }
    return b
}
",4845
414,29262947,"application: party-serverside version: alpha-1 runtime: go
api_version: go1

handlers:

#handlers for api
- url: /api/.*   
  script: api/api.go

#handlers for console and webpage routing
- url: /redirect   
  script: redirecter/redirecter.go

- url: /admin_console/choose   
  script: admin_console/choose.go

- url: /post-request   
  script: webpage/post-request.go

- url: /console   
  script: console/console.go

 #handlers for static files
 - url: /css/console.css   
   static_files: console/page/css/console.css   upload: console/page/css/console.css

- url: /console/page   
  static_dir: console/page

- url: /   
  static_files: webpage/index.html   
  upload: webpage/index.html

- url: /   
  static_dir: webpage

- url: /css   
  static_dir: webpage/css

- url: /js   
  static_dir: webpage/js

- url: /img   
  static_dir: webpage/img

- url: /fonts   
  static_dir: webpage/fonts
",897
415,29262947,"package console

import (
    ""appengine""
    ""appengine/user""
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
    ""html/template""
    ""io/ioutil""
    ""net/http""
    ""strconv""
    ""time""
)

//for deployment
var dbConnectString string = ""****************************""

//for local testing
//var dbConnectString string = ""root@/party""

func init() {
    http.HandleFunc(""/console"", consoleHandler)
}

func consoleHandler(w http.ResponseWriter, r *http.Request) {
    redirectIfNeeded(w, r)
    c := appengine.NewContext(r)
    u := user.Current(c)

    logoutUrl, e := user.LogoutURL(c, ""/redirect"")

    if e != nil {
        panic(e)
    }

    email := u.Email
    data := WebpageData{LogoutUrl: logoutUrl, UserName: email, NewPartyUrl: ""/console/newparty""}

    template := template.Must(template.New(""template"").Parse(generateUnsignedHtml(u)))

    err := template.Execute(w, data)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
    }

}

func generateUnsignedHtml(u *user.User) string {
    firstPart := fileValue(""./console/page/firstPart.html"")
    table := generateTable(u)
    secondPart := fileValue(""./console/page/secondPart.html"")

    html := firstPart + table + secondPart
    return html
}

func generateTable(u *user.User) string {
    con, e := sql.Open(""mysql"", dbConnectString)
    if e != nil {
        panic(e)
    }
    defer con.Close()

    var parties []Party
    partyRows, err := con.Query(""select id, name, datetime, host, location from parties where author='"" + u.Email + ""';"")
    if err != nil {
        panic(err)
    }

    var id int
    var name string
    var datetime string
    var host string
    var location string

    for partyRows.Next() {
        partyRows.Scan(&id, &name, &datetime, &host, &location)
        parties = append(parties, Party{Id: id, Name: name, DatetimeString: datetime, Host: host, Location: location})
    }

    html := """"
    for i, party := range parties {
        actionsHtml := ""Edit Delete""
        html += """" + makeTd(strconv.Itoa(i+1)) + makeTd(party.Name) + makeTd(party.DatetimeString) + makeTd(party.Host) + makeTd(party.Location) + makeTd(actionsHtml) + """"
    }

    html += """"
    return html
}

func makeTd(content string) string {
    return """" + content + """"
}

func redirectIfNeeded(w http.ResponseWriter, r *http.Request) {
    expire := time.Date(2000, 1, 1, 1, 1, 1, 0, time.UTC)
    cookie := &http.Cookie{Name: ""ACSID"", Value: """", Expires: expire, HttpOnly: true}
    http.SetCookie(w, cookie)
    cookie2 := &http.Cookie{Name: ""SACSID"", Value: """", Expires: expire, HttpOnly: true}
    http.SetCookie(w, cookie2)

    c := appengine.NewContext(r)
    u := user.Current(c)
    if u == nil {
        url, err := user.LoginURL(c, r.URL.String())
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
            return
        }
        w.Header().Set(""Location"", url)
        w.WriteHeader(http.StatusFound)
        return
    }

    con, e := sql.Open(""mysql"", dbConnectString)
    if e != nil {
        panic(e)
    }
    defer con.Close()

    //check whether user is admin
    admRows, error := con.Query(""select email from admin_users;"")
    if error != nil {
        panic(error)
    }
    var email string
    isAdmin := false
    for admRows.Next() {
        admRows.Scan(&email)
        if email == u.Email {
            isAdmin = true
        }
    }

    //check if he is validated user
    validRows, error2 := con.Query(""select email from party_validated_users;"")
    if error2 != nil {
        panic(error2)
    }
    email = """"
    isValidated := false
    for validRows.Next() {
        validRows.Scan(&email)
        if email == u.Email {
            isValidated = true
        }
    }

    var url string

    if user.IsAdmin(c) || isAdmin {
        //user is declared as admin in db or is admin of gae app
        //we are allready here
        url = ""/console""
    } else if isValidated {
        //user is validated
        //we are allready here
        url = ""/console""
    } else {
        //user is not validated yet
        url = ""/redirect""
        w.Header().Set(""Location"", url)
        w.WriteHeader(http.StatusFound)
    }
}

func fileValue(path string) string {
    content, err := ioutil.ReadFile(path)
    if err != nil {
        panic(err)
    }
    return string(content)
}

type WebpageData struct {
    LogoutUrl   string
    UserName    string
    NewPartyUrl string
}

type Party struct {
    Id             int
    Name           string
    DatetimeString string
    Host           string
    Location       string
}
",4635
416,29454288,"package main

import ""fmt""

func calc_ols_params(y []float64, x[][]float64, n_iterations int, alpha float64) []float64 {

    thetas := make([]float64, len(x))

    for i := 0; i < n_iterations; i++ {

        my_diffs := calc_diff(thetas, y, x)

        my_grad := calc_gradient(my_diffs, x)

        for j := 0; j < len(my_grad); j++ {
            thetas[j] += alpha * my_grad[j]
        }
    }
    return thetas
}

func calc_diff (thetas []float64, y []float64, x[][]float64) []float64 {
    diffs := make([]float64, len(y))
    for i := 0; i < len(y); i++ {
        prediction := 0.0
        for j := 0; j < len(thetas); j++ {
            prediction += thetas[j] * x[j][i]
        }
        diffs[i] = y[i] - prediction
    }
    return diffs
}

func calc_gradient(diffs[] float64, x[][]float64) []float64 {
    gradient := make([]float64, len(x))
    for i := 0; i < len(diffs); i++ {
        for j := 0; j < len(x); j++ {
            gradient[j] += diffs[i] * x[j][i]
        }
    }
    for i := 0; i < len(x); i++ {
        gradient[i] = gradient[i] / float64(len(diffs))
    }

    return gradient
}

func main(){
    y := []float64 {3,4,5,6,7}
    x := [][]float64 {{1,1,1,1,1}, {4,3,2,1,3}}

    thetas := calc_ols_params(y, x, 100000, 0.001)

    fmt.Println(""Thetas : "", thetas)

    y_2 := []float64 {1,2,3,4,3,4,5,4,5,5,4,5,4,5,4,5,6,5,4,5,4,3,4}

    x_2 := [][]float64 {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {4,2,3,4,5,4,5,6,7,4,8,9,8,8,6,6,5,5,5,5,5,5,5},
                    {4,1,2,3,4,5,6,7,5,8,7,8,7,8,7,8,7,7,7,7,7,6,5},
                    {4,1,2,5,6,7,8,9,7,8,7,8,7,7,7,7,7,7,6,6,4,4,4},}

    thetas_2 := calc_ols_params(y_2, x_2, 100000, 0.001)

    fmt.Println(""Thetas_2 : "", thetas_2)

}
",1756
417,29454288,"Thetas :  [6.999959251448524 -0.769216974483968]
Thetas_2 :  [1.5694174539341945 -0.06169183063112409 0.2359981255871977 0.2424327101610395]
",141
418,29454288,python.pandas,13
419,29454288,"In [24]: from pandas.stats.api import ols

In [25]: df = pd.DataFrame(np.array(x).T, columns=['x1','x2','x3','y'])

In [26]: from pandas.stats.api import ols

In [27]: x = [
     [4,2,3,4,5,4,5,6,7,4,8,9,8,8,6,6,5,5,5,5,5,5,5],
     [4,1,2,3,4,5,6,7,5,8,7,8,7,8,7,8,7,7,7,7,7,6,5],
     [4,1,2,5,6,7,8,9,7,8,7,8,7,7,7,7,7,7,6,6,4,4,4]
     ]

In [28]: y = [1,2,3,4,3,4,5,4,5,5,4,5,4,5,4,5,6,5,4,5,4,3,4]

In [29]: x.append(y)

In [30]: df = pd.DataFrame(np.array(x).T, columns=['x1','x2','x3','y'])

In [31]: ols(y=df['y'], x=df[['x1', 'x2', 'x3']])
Out[31]: 

-------------------------Summary of Regression Analysis-------------------------

Formula: Y ~  +  +  + 

Number of Observations:         23
Number of Degrees of Freedom:   4

R-squared:         0.5348
Adj R-squared:     0.4614

Rmse:              0.8254

F-stat (3, 19):     7.2813, p-value:     0.0019

Degrees of Freedom: model 3, resid 19

-----------------------Summary of Estimated Coefficients------------------------
      Variable       Coef    Std Err     t-stat    p-value    CI 2.5%   CI 97.5%
--------------------------------------------------------------------------------
            x1    -0.0618     0.1446      -0.43     0.6741    -0.3453     0.2217
            x2     0.2360     0.1487       1.59     0.1290    -0.0554     0.5274
            x3     0.2424     0.1394       1.74     0.0983    -0.0309     0.5156
     intercept     1.5704     0.6331       2.48     0.0226     0.3296     2.8113
---------------------------------End of Summary---------------------------------
",1553
420,29454288,"In [34]: df_1 = pd.DataFrame(np.array([[3,4,5,6,7], [4,3,2,1,3]]).T, columns=['y', 'x'])

In [35]: df_1
Out[35]: 
   y  x
0  3  4
1  4  3
2  5  2
3  6  1
4  7  3

[5 rows x 2 columns]

In [36]: ols(y=df_1['y'], x=df_1['x'])
Out[36]: 

-------------------------Summary of Regression Analysis-------------------------

Formula: Y ~  + 

Number of Observations:         5
Number of Degrees of Freedom:   2

R-squared:         0.3077
Adj R-squared:     0.0769

Rmse:              1.5191

F-stat (1, 3):     1.3333, p-value:     0.3318

Degrees of Freedom: model 1, resid 3

-----------------------Summary of Estimated Coefficients------------------------
      Variable       Coef    Std Err     t-stat    p-value    CI 2.5%   CI 97.5%
--------------------------------------------------------------------------------
             x    -0.7692     0.6662      -1.15     0.3318    -2.0749     0.5365
     intercept     7.0000     1.8605       3.76     0.0328     3.3534    10.6466
---------------------------------End of Summary---------------------------------


In [37]: df_1 = pd.DataFrame(np.array([[3,4,5,6,7], [4,3,2,1,3]]).T, columns=['y', 'x'])

In [38]: ols(y=df_1['y'], x=df_1['x'])
Out[38]: 

-------------------------Summary of Regression Analysis-------------------------

Formula: Y ~  + 

Number of Observations:         5
Number of Degrees of Freedom:   2

R-squared:         0.3077
Adj R-squared:     0.0769

Rmse:              1.5191

F-stat (1, 3):     1.3333, p-value:     0.3318

Degrees of Freedom: model 1, resid 3

-----------------------Summary of Estimated Coefficients------------------------
      Variable       Coef    Std Err     t-stat    p-value    CI 2.5%   CI 97.5%
--------------------------------------------------------------------------------
             x    -0.7692     0.6662      -1.15     0.3318    -2.0749     0.5365
     intercept     7.0000     1.8605       3.76     0.0328     3.3534    10.6466
---------------------------------End of Summary---------------------------------
",2019
421,29525363,"            address, err := net.ResolveTCPAddr(""tcp"", ""192.168.9.144:8080"")                                                                                                                                     
            if err != nil {                                                                                                                                                                                     
                    fmt.Println(err)                                                                                                                                                                            
            }                                                                                                                                                                                                   
            conn, err := net.DialTCP(""tcp"", nil, address)                                                                                                                                                       
            fmt.Println(""Connected"")                                                                                                                                                                            
            // conn, err := net.DialTCP(""tcp"", nil, address)                                                                                                                                                    
            if err != nil {                                                                                                                                                                                     
                    fmt.Println(""Can't conenct"")                                                                                                                                                                
                    log.Fatal(err)                                                                                                                                                                              
     }
     conn.File() 
     conn.Fd()
",2130
422,29525363,"var (
        procGetOSfHandle = msvcrt.NewProc(""_get_osfhandle"")                                                                                                                                                                                                                                                                                                         
)                                                                                                                                                                                                           

func GetOSfHandle(fd uintptr) (uintptr, error) {                                                                                                                                                            
        value, _, err := procGetOSfHandle.Call(fd)                                                                                                                                                          
        return value, err                                                                                                                                                                                   
} 
hand, _ := GetOSfHandle(uintptr(unsafe.Pointer(conn)))
",1242
423,29525363,"       var d syscall.WSAData                                                                                                                                                                           
       syscall.WSAStartup(uint32(0x202), &d)                                                                                                                                                           
       fd, _ := syscall.Socket(syscall.AF_INET, syscall.SOCK_STREAM, 0)                                                                                                                                
       addr := syscall.SockaddrInet4{Port: 8080, Addr: [4]byte{192, 168, 9, 144}}                                                                                                                      
       var buf [4]byte                                                                                                                                                                                 
       syscall.Connect(fd, &addr)                                                                                                                                                                      
       dataBuf := syscall.WSABuf{Len: uint32(4), Buf: &buf[0]}                                                                                                                                         
       o := syscall.Overlapped{}                                                                                                                                                                       
       flags := uint32(0)                                                                                                                                                                              
       qty := uint32(0)                                                                                                                                                                                
       syscall.WSARecv(fd, &dataBuf, 1, &qty, &flags, &o, nil)                                                                                                                                         
       fmt.Println(buf)    
",2228
424,29573148,"package main

import (
    ""fmt""
    ""math/rand""
)

type PersonID int

func contains(s []int, e int) bool {
    for _, a := range s {
        if a == e {
            return true
        }
    }
    return false
}

func Person(called_number chan int, claim_prize chan PersonID, received chan bool, coupon []int, person_id PersonID) {
    numFound := 0
    for i := 0; i < len(coupon); i++ {
        current_number := <-called_number
        found := contains(coupon, current_number)
        if found {
            numFound++
        }
        if numFound == len(coupon) {
            claim_prize <- person_id
        } else {
            received <- true
        }
    }
}

func main() {
    var called_number chan int
    var claim_prize chan PersonID
    var received chan bool

    tokens := make([][]int, 3)
    for i := 0; i < 3; i++ {
        tokens[i] = make([]int, 12)
        for j := 0; j < 12; j++ {
            num := rand.Intn(100) + 1
            found := contains(tokens[i], num)
            for found {
                num = rand.Intn(100) + 1
                found = contains(tokens[i], num)
            }
            tokens[i][j] = num
        }
    }

    go Person(called_number, claim_prize, received, tokens[0], 0)
    go Person(called_number, claim_prize, received, tokens[1], 1)
    go Person(called_number, claim_prize, received, tokens[2], 2)

    claimants := make([]PersonID, 0)
    prev_called := make(map[int]bool)
    for i := 0; i < 100; i++ {
        if len(claimants) == 3 {
            break
        }
        num := rand.Intn(100) + 1
        _, ok := prev_called[num]
        for ok {
            num = rand.Intn(100) + 1
            _, ok = prev_called[num]
        }
        prev_called[num] = true
        called_number <- num
        for j := 0; j < 3; j++ {
            select {
            case _ = <-received:
                continue
            case pid := <-claim_prize:
                claimants = append(claimants, pid)
            }
        }
    }

    fmt.Println(claimants)
}
",2028
425,29573148,"package main

import (
    ""fmt""
    ""math/rand""
)

func contains(s []int, e int) bool {
    for _, a := range s {
        if a == e {
            return true
        }
    }
    return false
}

func Person(called_number chan int, claim_prize chan int, received chan bool, coupon []int, person_id int) {
    numFound := 0
    for current_number := range called_number {
        if contains(coupon, current_number) {
            numFound++
        }
        if numFound == len(coupon) {
            fmt.Println(person_id)
            claim_prize <- person_id
        } else {
            received <- true
        }
    }
}

func main() {
    var (
        called_number1 = make(chan int, 1)
        called_number2 = make(chan int, 1)
        called_number3 = make(chan int, 1)
        claim_prize    = make(chan int, 1)
        received       = make(chan bool, 1)
    )

    tokens := make([][]int, 3)
    for i := 0; i < 3; i++ {
        tokens[i] = make([]int, 12)
        for j := 0; j < 12; j++ {
            num := rand.Intn(100) + 1
            found := contains(tokens[i], num)
            for found {
                num = rand.Intn(100) + 1
                found = contains(tokens[i], num)
            }
            tokens[i][j] = num
        }
    }

    go Person(called_number1, claim_prize, received, tokens[0], 0)
    go Person(called_number2, claim_prize, received, tokens[1], 1)
    go Person(called_number3, claim_prize, received, tokens[2], 2)

    claimants := make([]int, 0)
    prev_called := make(map[int]bool)
    for i := 0; i < 100; i++ {
        if len(claimants) == 3 {
            break
        }
        num := rand.Intn(100) + 1
        _, ok := prev_called[num]
        for ok {
            num = rand.Intn(100) + 1
            _, ok = prev_called[num]
        }
        prev_called[num] = true
        if !contains(claimants, 0) {
            called_number1 <- num
        }
        if !contains(claimants, 1) {
            called_number2 <- num
        }
        if !contains(claimants, 2) {
            called_number3 <- num
        }
        for j := 0; j < 3; j++ {
            select {
            case _ = <-received:
                continue
            case pid := <-claim_prize:
                if pid == 0 { close(called_number1) }
                if pid == 1 { close(called_number2) }
                if pid == 2 { close(called_number3) }
                claimants = append(claimants, pid)
            }
        }
    }
    fmt.Println(claimants)
}
",2491
426,29690419,"package main

import (
    ""fmt""
    ""reflect""
    ""strings""
)
import (
    ""encoding/json""
    ""encoding/xml""
    ""errors""
)

type Query struct {
    XMLName xml.Name `xml:""http://marklogic.com/appservices/search query"" json:""-""`
    Field1  string
    Field2  int64
}

type TermQuery struct {
    XMLName xml.Name `xml:""http://marklogic.com/appservices/search term-query"" json:""-""`
    Field3  string
    Field4  int64
}

func getXmlName(d interface{}, label string) (string, bool) {
    switch reflect.TypeOf(d).Kind() {
    case reflect.Struct:
        v, _ := reflect.TypeOf(d).FieldByName(label)
        parts := strings.Split(v.Tag.Get(""xml""), "" "")
        return parts[1], true
    }
    return """", false
}

func wrapJson(item interface{}) ([]byte, error) {
    if n, ok := getXmlName(item, ""XMLName""); ok {
        b, err := json.Marshal(map[string]interface{}{n: item})
        if err != nil {
            return nil, err
        }
        return b, nil
    }
    return nil, errors.New(""You failed"")
}

func main() {
    // create a Query and encode it as {""query"": {struct}}
    q := Query{Field1: ""hello"", Field2: 42}
    wrappedQ, err := wrapJson(q)
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(string(wrappedQ))

    // create a TermQuery and encode it as {""term-query"": {struct}}
    tq := TermQuery{Field3: ""world"", Field4: 99}
    wrappedTQ, err := wrapJson(tq)
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(string(wrappedTQ))

}
",1521
427,29690419,"{""query"":{""Field1"":""hello"",""Field2"":42}}
{""term-query"":{""Field3"":""world"",""Field4"":99}}
",87
428,29690419,"package main

import (
    ""fmt""
    ""reflect""
    ""strings""
)
import (
    //""encoding/json""
    ""encoding/json""
    ""encoding/xml""
    ""errors""
)

type Query struct {
    XMLName xml.Name `xml:""http://marklogic.com/appservices/search query"" json:""-""`
    Field1  string
    Field2  int64
    Queries []interface{} `xml:"",any"" json:""queries""`
}

type TermQuery struct {
    XMLName xml.Name `xml:""http://marklogic.com/appservices/search term-query"" json:""-""`
    Field3  string
    Field4  int64
}

func getXmlName(d interface{}, label string) (string, bool) {
    switch reflect.TypeOf(d).Kind() {
    case reflect.Struct:
        v, _ := reflect.TypeOf(d).FieldByName(label)
        parts := strings.Split(v.Tag.Get(""xml""), "" "")
        return parts[1], true
    default:
        fmt.Println(reflect.TypeOf(d).Kind())
    }
    return """", false
}

func wrapJson(item interface{}) (map[string]interface{}, error) {
    if n, ok := getXmlName(item, ""XMLName""); ok {

        if k := reflect.ValueOf(item).FieldByName(""Queries""); k.IsValid() {
            for i := 0; i < k.Len(); i++ {
                b, err1 := wrapJson(k.Index(i).Interface())
                if err1 != nil {

                    continue
                }
                k.Index(i).Set(reflect.ValueOf(b))

            }

        }
        return map[string]interface{}{n: item}, nil
    }
    return nil, errors.New(""You failed"")
}

func asJson(i interface{}) []byte {
    b, err := json.Marshal(i)
    if err != nil {
        return []byte(`{""error"": ""too bad""}`)
    }
    return b
}

func main() {

    // create a TermQuery and encode it as {""term-query"": {struct}}
    tq := TermQuery{Field3: ""world"", Field4: 99}
    wrappedTQ, err := wrapJson(tq)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(string(asJson(wrappedTQ)))

    // create a Query and encode it as {""query"": {struct}}
    q := Query{
        Field1: ""hello"", 
        Field2: 42, 
        Queries: []interface{}{
            TermQuery{Field3: ""world"", Field4: 99},
            TermQuery{Field3: ""yay, it works!"", Field4: 666},
            Query{
                Field1: ""Hi"",
                Field2: 21,
                Queries: []interface{}{
                    TermQuery{
                        Field3: ""omg"",
                        Field4: 1,
                    },
                },
            },
        },
    }
    wrappedQ, err := wrapJson(q)
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(string(asJson(wrappedQ)))

}
",2547
429,29690419,"{
    ""query"": {
        ""Field1"": ""hello"",
        ""Field2"": 42,
        ""queries"": [
            {
                ""term-query"": {
                    ""Field3"": ""world"",
                    ""Field4"": 99
                }
            },
            {
                ""term-query"": {
                    ""Field3"": ""yay, it works!"",
                    ""Field4"": 666
                }
            },
            {
                ""query"": {
                    ""Field1"": ""Hi"",
                    ""Field2"": 21,
                    ""queries"": [
                        {
                            ""term-query"": {
                                ""Field3"": ""omg"",
                                ""Field4"": 1
                            }
                        }
                    ]
                }
            }
        ]
    }
}
",834
430,29786675,k,1
431,29786675,k,1
432,29786675,n,1
433,29786675,m,1
434,29786675,n,1
435,29786675,m,1
436,29786675,"5 3
1 2 3 4
4 3 5
2 1 3
",24
437,29786675,"Number of edges between pairs of vertices:
    2 edges: (1, 2) (1, 3) (2, 3) (3, 4)
    1 edge:  (1, 4) (2, 4) (3, 5) (4, 5)

Number of cliques in which a vertex appears:
    3 cliques: 3
    2 cliques: 1 2 4
    1 clique:  5
",226
438,29786675,"package main

import (
        ""bufio""
        ""fmt""
        ""os""
        ""strconv""
        ""strings""
)

func main() {
        // Set up input and output.
        reader := bufio.NewReader(os.Stdin)
        writer := bufio.NewWriter(os.Stdout)
        defer writer.Flush()

        // Get the number of vertices and number of cliques from the first line.
        line, err := reader.ReadString('\n')
        if err != nil {
                fmt.Fprintf(os.Stderr, ""Error reading first line: %s\n"", err)
                return
        }
        var numVertices, numCliques int
        numScanned, err := fmt.Sscanf(line, ""%d %d"", &numVertices, &numCliques)
        if numScanned != 2 || err != nil {
                fmt.Fprintf(os.Stderr, ""Error parsing input parameters: %s\n"", err)   
                return
        }

        // Initialize the edge counts and vertex counts.
        edgeCounts := make([][]int, numVertices+1)
        for u := 1; u <= numVertices; u++ {
                edgeCounts[u] = make([]int, numVertices+1)
        }
        vertexCounts := make([]int, numVertices+1)

        // Read each clique and update the edge counts.
        for c := 0; c < numCliques; c++ {
                line, err = reader.ReadString('\n')
                if err != nil {
                        fmt.Fprintf(os.Stderr, ""Error reading clique: %s\n"", err)
                        return
                }
                tokens := strings.Split(strings.TrimSpace(line), "" "")
                clique := make([]int, len(tokens))
                for i, token := range tokens {
                        u, err := strconv.Atoi(token)
                        if err != nil {
                                fmt.Fprintf(os.Stderr, ""Atoi error: %s\n"", err)
                                return
                        }
                        vertexCounts[u]++
                        clique[i] = u
                        for j := 0; j < i; j++ {
                                v := clique[j]
                                edgeCounts[u][v]++
                                edgeCounts[v][u]++
                        }
                }
        }

        // Compute the number of edges between each pair of vertices.
        count2edges := make([][][]int, numCliques+1)
        for u := 1; u < numVertices; u++ {
                for v := u + 1; v <= numVertices; v++ {
                        count := edgeCounts[u][v]
                        count2edges[count] = append(count2edges[count],
                                []int{u, v})
                }
        }
        writer.WriteString(""Number of edges between pairs of vertices:\n"")
        for count := numCliques; count >= 1; count-- {
                edges := count2edges[count]
                if len(edges) == 0 {
                        continue
                }
                label := ""edge""
                if count > 1 {
                        label += ""s:""
                } else {
                        label += "": ""
                }
                writer.WriteString(fmt.Sprintf(""%5d %s"", count, label))
                for _, edge := range edges {
                        writer.WriteString(fmt.Sprintf("" (%d, %d)"",
                                edge[0], edge[1]))
                }
                writer.WriteString(""\n"")
        }

        // Group vertices according to the number of clique memberships.
        count2vertices := make([][]int, numCliques+1)
        for u := 1; u <= numVertices; u++ {
                count := vertexCounts[u]
                count2vertices[count] = append(count2vertices[count], u)
        }
        writer.WriteString(""\nNumber of cliques in which a vertex appears:\n"")
        for count := numCliques; count >= 1; count-- {
                vertices := count2vertices[count]
                if len(vertices) == 0 {
                        continue
                }
                label := ""clique""
                if count > 1 {
                        label += ""s:""
                } else {
                        label += "": ""
                }
                writer.WriteString(fmt.Sprintf(""%5d %s"", count, label))
                for _, u := range vertices {
                        writer.WriteString(fmt.Sprintf("" %d"", u))
                }
                writer.WriteString(""\n"")
        }
}
",4320
439,29831469,fmt,3
440,29831469,net/textproto,13
441,29831469,regexp,6
442,29831469,strings,7
443,29831469,os,2
444,29831469,database/sql,12
445,29831469,_ github.com/mattn/go-sqlite3,29
446,29831469,"func getLineup() {
    // Open Database
    db, err := sql.Open(""sqlite3"", ""./database.db"")
    if err != nil {
            fmt.Println(err)
            os.Exit(1)
    }
    defer db.Close()

    // Prepare Query
    statement, err := db.Prepare(""SELECT team, player FROM lineup ORDER BY team DESC;"")
    if err != nil {
            fmt.Println(err)
            os.Exit(1)
    }

    // Execute Statement
    rows, err := statement.Query()
    defer rows.Close()


    fmt.Println(""Lineup:"")

    for rows.Next() {
            var team string
            var player string
            rows.Scan(&team, &player)
            fmt.Printf(""%v %v\n"", team, player)
    }

}
",668
447,29831469,================================UPDATE====================================,74
448,29831469,"
bot.go:70: cannot use p (type Player) as type *Player in append
",65
449,29831469,"package main

import (
    ""fmt""
    ""net/textproto""
    ""regexp""
    ""log""
    ""strings""
    ""database/sql""
    // SQLite3
    _ ""github.com/mattn/go-sqlite3""
)


type PrivMsg struct {
    nick, channel, text string
}

var (
    conn *textproto.Conn
    err  error

    ping    = regexp.MustCompile(""^PING :([a-zA-Z0-9\\.]+)$"")
    motd    = regexp.MustCompile("":End of /MOTD command\\.$"")
    privmsg = regexp.MustCompile(""^:([a-zA-Z0-9`_\\-]+)![a-zA-Z0-9/\\\\\\.\\-]+@[a-zA-Z0-9/\\\\\\.\\-]+ PRIVMSG (#[a-zA-Z0-9]+) :(.*)$"")
)


func talk(channel, msg string) {
    conn.Cmd(""PRIVMSG "" + channel + "" :"" + msg)
}


func handlePing(auth string) {
    conn.Cmd(""PONG :"" + auth)
    fmt.Printf(""PONG :%s\n"", auth)
}

type Player struct {
    TeamName string
    PlayerName string
}

func getLineup() {
    // Open Database
    db, err := sql.Open(""sqlite3"", ""./database.db"")
    if err != nil {
        log.Fatal(err)
    }

    // Prepare Query
    statement, err := db.Prepare(""SELECT team, player FROM lineup ORDER BY team DESC;"")
    if err != nil {
        log.Fatal(err)
    }

    // Execute Statement
    rows, err := statement.Query()
    defer rows.Close()


// Output Code
    var Players []*Player
    for rows.Next() {
        p := &Player{}
        if err := rows.Scan(p.TeamName, p.PlayerName); err != nil{
            log.Fatal(err)
        }
        //Players = append(Players, p)
        return p.TeamName, p.PlayerName
    }
    // pass Players to next function/return it whatever

    fmt.Println(Players)
}




func handlePrivmsg(pm *PrivMsg) {
    if strings.Contains(pm.text, ""!add t"") {
        talk(pm.channel, pm.nick + "" added to Terrorists"")
        saveLineup(""T"", pm.nick)
    }
    if strings.Contains(pm.text, ""!add ct"") {
        talk(pm.channel, pm.nick + "" added to Counter-Terrorists"")
        saveLineup(""CT"", pm.nick)
    }
    if strings.Contains(pm.text, ""!rem"") {
        talk(pm.channel, pm.nick + "" has been removed from the current lineup"")
    }
    if strings.Contains(pm.text, ""!votemap"") {
        talk(pm.channel, pm.nick + "" map vote code"")
    }
    if strings.Contains(pm.text, ""!moveme"") {
        talk(pm.channel, pm.nick + "" has been moved to Counter-Terrorists"")
    }
    if strings.Contains(pm.text, ""!teams"") {
        getLineup()
        //fmt.Println(*tpList)
        talk(pm.channel, pm.nick + "" will show the current teams"")
    }
    if strings.Contains(pm.text, ""!add ct"") {
        talk(pm.channel, pm.nick + "" added to Counter-Terrorists"")
    }
    if strings.Contains(pm.text, ""pug-bot"") {
        talk(pm.channel, ""Hello, "" + pm.nick + ""!"")
    }
}


func saveLineup(Team, Player string) {

    // Open Database
    db, err := sql.Open(""sqlite3"", ""./database.db"")
    if err != nil {
        //log.Fatal(err)
        fmt.Printf(""%s"", err)
    }

    // Get Current Lineup
    rows, err := db.Query(""SELECT team, player FROM lineup WHERE player = ?;"", Player)
    if err != nil {
        log.Fatal(err)
    }
    defer rows.Close()

    if Player == Player {
        fmt.Println(""You have already added yourself"")
    } else {
        // Insert new Player
        db.Exec(
            ""INSERT INTO lineup (team, player) VALUES (?, ?);"",
            Team,
            Player,
        )
    }

}


func handleMotd() {
    conn.Cmd(""JOIN #ircchannel"")
    fmt.Println(""JOIN #ircchannel"")
}


func parseLine(line string) {
    // Channel activity
    if match := privmsg.FindStringSubmatch(line); match != nil {
        pm := new(PrivMsg)
        pm.nick, pm.channel, pm.text = match[1], match[2], match[3]
        handlePrivmsg(pm)
        return
    }

    // Server PING
    if match := ping.FindStringSubmatch(line); match != nil {
        handlePing(match[1])
        return
    }

    // End of MOTD (successful login to IRC server)
    if match := motd.FindString(line); match != """" {
        handleMotd()
        return
    }
}

func main() {
    conn, err = textproto.Dial(""tcp"", ""irc.server.org:6667"")
    if err != nil {
        fmt.Printf(""%s"", err)
        return
    }

    conn.Cmd(""NICK pug-bot\n\rUSER pug-bot 8 * :pAsSwOrD"")

    for {
        text, err := conn.ReadLine()
        if err != nil {
            fmt.Printf(""%s"", err)
            return
        }

        go parseLine(text)

        fmt.Println(text)
    }


}
",4307
450,29831469,"talk(pm.channel, pm.nick + "" SQL QUERY RESULT"")",47
451,30478485,app.go,6
452,30478485,"""github.com/go-martini/martini""
""github.com/martini-contrib/binding""
""github.com/martini-contrib/render""
""github.com/moovweb/gokogiri""
""github.com/moovweb/gokogiri/xml""
",169
453,30478485,app.yaml,8
454,30478485,"application: app
version: 1
runtime: go
api_version: go1

handlers:
- url: /.*
  script: _go_app
",97
455,30478485,godep save,10
456,30478485,goapp serve,11
457,30478485,"SRSLY-2:app bezigon$ goapp serve
INFO     2015-05-27 09:11:22,645 devappserver2.py:745] Skipping SDK update check.
INFO     2015-05-27 09:11:23,048 api_server.py:190] Starting API server at: http://localhost:57449
INFO     2015-05-27 09:11:23,071 dispatcher.py:192] Starting module ""default"" running at: http://localhost:8080
INFO     2015-05-27 09:11:23,073 admin_server.py:118] Starting admin server at: http://localhost:8000
ERROR    2015-05-27 09:11:24,772 go_runtime.py:180] Failed to build Go application: (Executed command: /Users/bezigon/google-cloud-sdk/platform/google_appengine/goroot/bin/go-app-builder -app_base /Users/bezigon/go/src/github.com/bezigon/app -arch 6 -dynamic -goroot /Users/bezigon/google-cloud-sdk/platform/google_appengine/goroot -nobuild_files ^^$ -unsafe -gopath /Users/bezigon/go -print_extras_hash Godeps/_workspace/src/github.com/moovweb/gokogiri/html/xpath_test.go Godeps/_workspace/src/github.com/martini-contrib/binding/validate_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/attribute.go Godeps/_workspace/src/github.com/martini-contrib/binding/file_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/document_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xpath/util.go Godeps/_workspace/src/github.com/go-martini/martini/logger.go Godeps/_workspace/src/github.com/martini-contrib/binding/misc_test.go Godeps/_workspace/src/github.com/go-martini/martini/response_writer_test.go Godeps/_workspace/src/github.com/codegangsta/inject/inject_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/text.go Godeps/_workspace/src/github.com/go-martini/martini/go_version.go Godeps/_workspace/src/github.com/go-martini/martini/router_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/nodeset.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xpath/xpath_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xpath/xpath.go Godeps/_workspace/src/github.com/martini-contrib/binding/errors.go Godeps/_workspace/src/github.com/moovweb/gokogiri/mem/mem_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/help/help_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/html/fragment_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/html/node_test.go Godeps/_workspace/src/github.com/martini-contrib/render/render.go Godeps/_workspace/src/github.com/moovweb/gokogiri/help/help.go Godeps/_workspace/src/github.com/moovweb/gokogiri/mem/mem.go Godeps/_workspace/src/github.com/go-martini/martini/recovery.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/document.go Godeps/_workspace/src/github.com/moovweb/gokogiri/html/document.go Godeps/_workspace/src/github.com/moovweb/gokogiri/gokogiri.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/element.go Godeps/_workspace/src/github.com/martini-contrib/binding/errors_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/util/util_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/fragment.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/attribute_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/css/css_test.go Godeps/_workspace/src/github.com/oxtoacart/bpool/bytepool.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/fragment_test.go Godeps/_workspace/src/github.com/martini-contrib/binding/errorhandler_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/utils_test.go Godeps/_workspace/src/github.com/oxtoacart/bpool/bpool.go Godeps/_workspace/src/github.com/moovweb/gokogiri/util/util.go Godeps/_workspace/src/github.com/moovweb/gokogiri/html/utils_test.go Godeps/_workspace/src/github.com/go-martini/martini/response_writer.go Godeps/_workspace/src/github.com/moovweb/gokogiri/css/css.go Godeps/_workspace/src/github.com/go-martini/martini/env.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/search_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/gokogiri_test.go Godeps/_workspace/src/github.com/go-martini/martini/static_test.go Godeps/_workspace/src/github.com/codegangsta/inject/inject.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xpath/expression.go Godeps/_workspace/src/github.com/martini-contrib/binding/form_test.go Godeps/_workspace/src/github.com/go-martini/martini/static.go Godeps/_workspace/src/github.com/go-martini/martini/martini.go Godeps/_workspace/src/github.com/moovweb/gokogiri/html/fragment.go Godeps/_workspace/src/github.com/martini-contrib/binding/bind_test.go app.go Godeps/_workspace/src/github.com/martini-contrib/render/render_test.go Godeps/_workspace/src/github.com/martini-contrib/binding/binding.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/cdata.go Godeps/_workspace/src/github.com/go-martini/martini/martini_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/node_test.go Godeps/_workspace/src/github.com/oxtoacart/bpool/bufferpool.go Godeps/_workspace/src/github.com/martini-contrib/binding/json_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xpath/util_test.go Godeps/_workspace/src/github.com/go-martini/martini/router.go Godeps/_workspace/src/github.com/martini-contrib/binding/common_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/pi.go Godeps/_workspace/src/github.com/go-martini/martini/logger_test.go Godeps/_workspace/src/github.com/go-martini/martini/recovery_test.go Godeps/_workspace/src/github.com/go-martini/martini/return_handler.go Godeps/_workspace/src/github.com/moovweb/gokogiri/help/util_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/html/document_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/html/crash_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/comment.go Godeps/_workspace/src/github.com/martini-contrib/binding/multipart_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/xml/node.go Godeps/_workspace/src/github.com/go-martini/martini/env_test.go Godeps/_workspace/src/github.com/moovweb/gokogiri/html/encoding_test.go)

2015/05/27 12:11:24 go-app-builder: Failed parsing input: package github.com/moovweb/gokogiri/html required, but all its files were excluded by nobuild_files
",6095
458,30495284,">>> from tuf import pycrypto_keys as k
>>> pub, priv = k.generate_rsa_public_and_private()
>>> sig, method = k.create_rsa_signature(priv, ""The quick brown fox jumps over the lazy dog."")
>>> sig.encode(""hex"")
'4e05ee9e435653549ac4eddbc43e1a6868636e8ea6dbec2564435afcb0de47e0824cddbd88776ddb20728c53ecc90b5d543d5c37575fda8bd0317025fc07de62ee8084b1a75203b1a23d1ef4ac285da3d1fc63317d5b2cf1aafa3e522acedd366ccd5fe4a7f02a42922237426ca3dc154c57408638b9bfaf0d0213855d4e9ee621db204151bcb13d4dbb18f930ec601469c992c84b14e9e0b6f91ac9517bb3b749dd117e1cbac2e4acb0e549f44558a2005898a226d5b6c8b9291d7abae0d9e0a16858b89662a085f74a202deb867acab792bdbd2c36731217caea8b17bd210c29b890472f11e5afdd1dd7b69004db070e04201778f2c49f5758643881403d45a58d08f51b5c63910c6185892f0b590f191d760b669eff2464456f130239bba94acf54a0cb98f6939ff84ae26a37f9b890be259d9b5d636f6eb367b53e895227d7d79a3a88afd6d28c198ee80f6527437c5fbf63accb81709925c4e03d1c9eaee86f58e4bd1c669d6af042dbd412de0d13b98b1111e2fadbe34b45de52125e9a'
",979
459,30495284,generate_rsa_public_and_private,31
460,30495284,create_rsa_signature,20
461,30495284,"package example

import (
    ""crypto""
    ""crypto/rsa""
    ""crypto/sha256""
    ""crypto/x509""
    ""fmt""
)

func Verify(key []byte, sig []byte, msg []byte) error {
    digest := sha256.Sum256(msg)

    pub, err := x509.ParsePKIXPublicKey(key)
    if err != nil {
        return fmt.Errorf(""Failed to parse key"")
    }

    rsaPub, ok := pub.(*rsa.PublicKey)
    if !ok {
        return fmt.Errorf(""Invalid value returned from ParsePKIXPublicKey"")
    }

    opts := rsa.PSSOptions{SaltLength: 16, Hash: crypto.SHA256}
    if err = rsa.VerifyPSS(rsaPub, crypto.SHA256, digest[:], sig, &opts); err != nil {
        return fmt.Errorf(""Failed Verification"")
    }
    return nil
}
",676
462,30495284,"package example

import (
    ""encoding/hex""
    ""encoding/pem""
    ""testing""
)

func TestPyCryptoRSACompatVerify(t *testing.T) {
    pubPem := ""-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAnKuXZeefa2LmgxaL5NsM\nzKOHNe+x/nL6ik+lDBCTV6OdcwAhHQS+PONGhrChIUVR6Vth3hUCrreLzPO73Oo5\nVSCuRJ53UronENl6lsa5mFKP8StYLvIDITNvkoT3j52BJIjyNUK9UKY9As2TNqDf\nBEPIRp28ev/NViwGOEkBu2UAbwCIdnDXm8JQErCZA0Ydm7PKGgjLbFsFGrVzqXHK\n6pdzJXlhr9yap3UpgQ/iO9JtoEYB2EXsnSrPc9JRjR30bNHHtnVql3fvinXrAEwq\n3xmN4p+R4VGzfdQN+8Kl/IPjqWB535twhFYEG/B7Ze8IwbygBjK3co/KnOPqMUrM\nBI8ztvPiogz+MvXb8WvarZ6TMTh8ifZI96r7zzqyzjR1hJulEy3IsMGvz8XS2J0X\n7sXoaqszEtXdq5ef5zKVxkiyIQZcbPgmpHLq4MgfdryuVVc/RPASoRIXG4lKaTJj\n1ANMFPxDQpHudCLxwCzjCb+sVa20HBRPTnzo8LSZkI6jAgMBAAE=\n-----END PUBLIC KEY-----""
    //privPem := ""-----BEGIN RSA PRIVATE KEY-----\nMIIG4wIBAAKCAYEAnKuXZeefa2LmgxaL5NsMzKOHNe+x/nL6ik+lDBCTV6OdcwAh\nHQS+PONGhrChIUVR6Vth3hUCrreLzPO73Oo5VSCuRJ53UronENl6lsa5mFKP8StY\nLvIDITNvkoT3j52BJIjyNUK9UKY9As2TNqDfBEPIRp28ev/NViwGOEkBu2UAbwCI\ndnDXm8JQErCZA0Ydm7PKGgjLbFsFGrVzqXHK6pdzJXlhr9yap3UpgQ/iO9JtoEYB\n2EXsnSrPc9JRjR30bNHHtnVql3fvinXrAEwq3xmN4p+R4VGzfdQN+8Kl/IPjqWB5\n35twhFYEG/B7Ze8IwbygBjK3co/KnOPqMUrMBI8ztvPiogz+MvXb8WvarZ6TMTh8\nifZI96r7zzqyzjR1hJulEy3IsMGvz8XS2J0X7sXoaqszEtXdq5ef5zKVxkiyIQZc\nbPgmpHLq4MgfdryuVVc/RPASoRIXG4lKaTJj1ANMFPxDQpHudCLxwCzjCb+sVa20\nHBRPTnzo8LSZkI6jAgMBAAECggGAdzyI7z/HLt2IfoAsXDLynNRgVYZluzgawiU3\ngeUjnnGhpSKWERXJC2IWDPBk0YOGgcnQxErNTdfXiFZ/xfRlSgqjVwob2lRe4w4B\npLr+CZXcgznv1VrPUvdolOSp3R2Mahfn7u0qVDUQ/g8jWVI6KW7FACmQhzQkPM8o\ntLGrpcmK+PA465uaHKtYccEB02ILqrK8v++tknv7eIZczrsSKlS1h/HHjSaidYxP\n2DAUiF7wnChrwwQEvuEUHhwVgQcoDMBoow0zwHdbFiFO2ZT54H2oiJWLhpR/x6RK\ngM1seqoPH2sYErPJACMcYsMtF4Tx7b5c4WSj3vDCGb+jeqnNS6nFC3aMnv75mUS2\nYDPU1heJFd8pNHVf0RDejLZZUiJSnXf3vpOxt9Xv2+4He0jeMfLV7zX0mO2Ni3MJ\nx6PiVy4xerHImOuuHzSla5crOq2ECiAxd1wEOFDRD2LRHzfhpk1ghiA5xA1qwc7Z\neRnkVfoy6PPZ4lZakZTm0p8YCQURAoHBAMUIC/7vnayLae7POmgy+np/ty7iMfyd\nV1eO6LTO21KAaGGlhaY26WD/5LcG2FUgc5jKKahprGrmiNLzLUeQPckJmuijSEVM\nl/4DlRvCo867l7fLaVqYzsQBBdeGIFNiT+FBOd8atff87ZBEfH/rXbDi7METD/VR\n4TdblnCsKYAXEJUdkw3IK7SUGERiQZIwKXrH/Map4ibDrljJ71iCgEureU0DBwcg\nwLftmjGMISoLscdRxeubX5uf/yxtHBJeRwKBwQDLjzHhb4gNGdBHUl4hZPAGCq1V\nLX/GpfoOVObW64Lud+tI6N9GNua5/vWduL7MWWOzDTMZysganhKwsJCY5SqAA9p0\nb6ohusf9i1nUnOa2F2j+weuYPXrTYm+ZrESBBdaEJPuj3R5YHVujrBA9Xe0kVOe3\nne151A+0xJOI3tX9CttIaQAsXR7cMDinkDITw6i7X4olRMPCSixHLW97cDsVDRGt\necO1d4dP3OGscN+vKCoL6tDKDotzWHYPwjH47sUCgcEAoVI8WCiipbKkMnaTsNsE\ngKXvO0DSgq3k5HjLCbdQldUzIbgfnH7bSKNcBYtiNxjR7OihgRW8qO5GWsnmafCs\n1dy6a/2835id3cnbHRaZflvUFhVDFn2E1bCsstFLyFn3Y0w/cO9yzC/X5sZcVXRF\nit3R0Selakv3JZckru4XMJwx5JWJYMBjIIAc+miknWg3niL+UT6pPun65xG3mXWI\nS+yC7c4rw+dKQ44UMLs2MDHRBoxqi8T0W/x9NkfDszpjAoHAclH7S4ZdvC3RIR0L\nLGoJuvroGbwx1JiGdOINuooNwGuswge2zTIsJi0gN/H3hcB2E6rIFiYid4BrMrwW\nmSeq1LZVS6siu0qw4p4OVy+/CmjfWKQD8j4k6u6PipiK6IMk1JYIlSCr2AS04JjT\njgNgGVVtxVt2cUM9huIXkXjEaRZdzK7boA60NCkIyGJdHWh3LLQdW4zg/A64C0lj\nIMoJBGuQkAKgfRuh7KI6Q6Qom7BM3OCFXdUJUEBQHc2MTyeZAoHAJdBQGBn1RFZ+\nn75AnbTMZJ6Twp2fVjzWUz/+rnXFlo87ynA18MR2BzaDST4Bvda29UBFGb32Mux9\nOHukqLgIE5jDuqWjy4B5eCoxZf/OvwlgXkX9+gprGR3axn/PZBFPbFB4ZmjbWLzn\nbocn7FJCXf+Cm0cMmv1jIIxej19MUU/duq9iq4RkHY2LG+KrSEQIUVmImCftXdN3\n/qNP5JetY0eH6C+KRc8JqDB0nvbqZNOgYXOfYXo/5Gk8XIHTFihm\n-----END RSA PRIVATE KEY-----""
    testStr := ""The quick brown fox jumps over the lazy dog.""
    sigHex := ""4e05ee9e435653549ac4eddbc43e1a6868636e8ea6dbec2564435afcb0de47e0824cddbd88776ddb20728c53ecc90b5d543d5c37575fda8bd0317025fc07de62ee8084b1a75203b1a23d1ef4ac285da3d1fc63317d5b2cf1aafa3e522acedd366ccd5fe4a7f02a42922237426ca3dc154c57408638b9bfaf0d0213855d4e9ee621db204151bcb13d4dbb18f930ec601469c992c84b14e9e0b6f91ac9517bb3b749dd117e1cbac2e4acb0e549f44558a2005898a226d5b6c8b9291d7abae0d9e0a16858b89662a085f74a202deb867acab792bdbd2c36731217caea8b17bd210c29b890472f11e5afdd1dd7b69004db070e04201778f2c49f5758643881403d45a58d08f51b5c63910c6185892f0b590f191d760b669eff2464456f130239bba94acf54a0cb98f6939ff84ae26a37f9b890be259d9b5d636f6eb367b53e895227d7d79a3a88afd6d28c198ee80f6527437c5fbf63accb81709925c4e03d1c9eaee86f58e4bd1c669d6af042dbd412de0d13b98b1111e2fadbe34b45de52125e9a""
    testKey, _ := pem.Decode([]byte(pubPem))

    sigBytes, err := hex.DecodeString(sigHex)
    if err != nil {
        t.Fatal(err)
    }
    err = Verify(testKey.Bytes, sigBytes, []byte(testStr))
    if err != nil {
        t.Fatal(err)
    }
}
",4387
463,30495284,Failed verification,19
464,30580746,"package galileo

import (
    ""encoding/json""
    ""golang.org/x/net/context""
    ""golang.org/x/oauth2""
    ""golang.org/x/oauth2/google""
    ""google.golang.org/appengine""
    ""google.golang.org/appengine/file""
    ""google.golang.org/appengine/urlfetch""
    ""google.golang.org/cloud""
    ""google.golang.org/cloud/storage""
    ""io""
    ""io/ioutil""
    ""log""
    ""net/http""
)

var bucket = ""prod_agl_expt""

// saveData struct holds information needed to run the various saving functions.
type saveData struct {
    c       context.Context
    r       *http.Request       //http response
    w       http.ResponseWriter //http writer
    ctx     context.Context
    cleanUp []string // cleanUp is a list of filenames that need cleaning up at the end of the saving.
    failed  bool     // failed indicates that one or more of the saving steps failed.
}

// saveData struct holds information needed to run the various saving functions.
type loadData struct {
    c       context.Context
    r       *http.Request       //http response
    w       http.ResponseWriter //http writer
    ctx     context.Context
    cleanUp []string // cleanUp is a list of filenames that need cleaning up at the end of the saving.
    failed  bool     // failed indicates that one or more of the saving steps failed.
}

type jsonStruct struct {
    User struct {
        Gender string `json:""gender""`
        Age    string `json:""age""`
        ID     string `json:""id""`
    } `json:""user""`
    Stim map[string]struct {
        Index           int    `json:""index""`
        Word            string `json:""word""`
        WordDisplayTime int    `json:""wordDisplayTime""`
        AnswerMaxTime   int    `json:""answerMaxTime""`
        FixationTime    int    `json:""fixationTime""`
        Train           bool   `json:""train""`
        Test            bool   `json:""test""`
        Grammatical     bool   `json:""grammatical""`
        Grammar         string `json:""grammar""`
        Keyboard        bool   `json:""keyboard""`
        TestSeq         int    `json:""testSeq""`
    } `json:""viewedTrials""`
    Answers struct {
        Training []struct {
            Answer   string  `json:""ans""`
            RT       float32 `json:""RT""`
            GtAnswer string  `json:""gtAns""`
            Correct  int     `json:""correct""`
        } `json:""training""`
        Test []struct {
            Answer   string  `json:""ans""`
            RT       float32 `json:""RT""`
            GtAnswer bool    `json:""gtAns""`
            Correct  int     `json:""correct""`
        } `json:""test""`
    } `json:""answers""`
    Trials []struct {
        Trial struct {
            Index           int    `json:""index""`
            Word            string `json:""word""`
            WordDisplayTime int    `json:""wordDisplayTime""`
            AnswerMaxTime   int    `json:""answerMaxTime""`
            FixationTime    int    `json:""fixationTime""`
            Train           bool   `json:""train""`
            Test            bool   `json:""test""`
            Grammatical     bool   `json:""grammatical""`
            Grammar         string `json:""grammar""`
            Keyboard        bool   `json:""keyboard""`
            TestSeq         int    `json:""testSeq""`
        } `json:""trial""`
        Metadata struct {
            Instructions string `json:""instructions""`
            SubmitUrl    string `json:""submitUrl""`
        } `json:""metadata""`
    } `json:""shuffledTrials""`
    Debriefing []struct {
        Type             string `json:""type""`
        RadioWithTextAns string `json:""radioWithTextAns""`
        TextAns          string `json:""textAns""`
        Rating           int    `json:""rating""`
        RadioOnlyAns     string `json:""radioOnlyAns""`
    } `json:""debriefingAns""`
}

type trialStruct []struct {
    Trial struct {
        Index           int    `json:""index""`
        Word            string `json:""word""`
        WordDisplayTime int    `json:""wordDisplayTime""`
        AnswerMaxTime   int    `json:""answerMaxTime""`
        FixationTime    int    `json:""fixationTime""`
        Train           bool   `json:""train""`
        Test            bool   `json:""test""`
        Grammatical     bool   `json:""grammatical""`
        Grammar         string `json:""grammar""`
        Keyboard        bool   `json:""keyboard""`
        TestSeq         int    `json:""testSeq""`
    } `json:""trial""`
    Metadata struct {
        Instructions string `json:""instructions""`
        SubmitUrl    string `json:""submitUrl""`
    } `json:""metadata""`
}

func fromJSON(r io.Reader) (jsonStruct, error) {
    var x jsonStruct
    dec := json.NewDecoder(r)
    err := dec.Decode(&x)
    return x, err
}

func toJSON(b io.Writer, trial trialStruct) (io.Writer, error) {
    enc := json.NewEncoder(b)
    err := enc.Encode(&trial)
    return b, err
}

func init() {
    http.HandleFunc(""/"", handleStatic)
    http.HandleFunc(""/saveUserData"", handleSaveUser)
    http.HandleFunc(""/loadTrials"", handleloadTrials)
}

func handleStatic(w http.ResponseWriter, r *http.Request) {
    w.Header().Set(""Cache-Control"", ""no-cache"")
    http.ServeFile(w, r, ""static/""+r.URL.Path)
}

// testSave is the main saving entry point that calls the GCS operations.
func handleSaveUser(w http.ResponseWriter, r *http.Request) {

    c := appengine.NewContext(r)
    if bucket == """" {
        var err error
        if bucket, err = file.DefaultBucketName(c); err != nil {
            // log.Errorf(c, ""failed to get default GCS bucket name: %v"", err)
            return
        }
    }
    hc := &http.Client{
        Transport: &oauth2.Transport{
            Source: google.AppEngineTokenSource(c, storage.ScopeFullControl),
            Base:   &urlfetch.Transport{Context: c},
        },
    }
    ctx := cloud.NewContext(appengine.AppID(c), hc)

    // structure to holds information needed to run the various saving functions
    d := &saveData{
        c:   c,
        r:   r,
        w:   w,
        ctx: ctx,
    }

    // retrieve data
    processedJson, trials, trainAns, testAns, stimSeq, userDetails, debriefingAns, rawJson := getJsonUserData(d.r, d.w)
    //
    d.createUserFolder(processedJson.User.ID)
    // d.saveJson(k.User.ID, ""raw"", z)
    d.saveJson(processedJson.User.ID, ""trials"", trials)
    d.saveJson(processedJson.User.ID, ""train"", trainAns)
    d.saveJson(processedJson.User.ID, ""test"", testAns)
    d.saveJson(processedJson.User.ID, ""stim"", stimSeq)
    d.saveJson(processedJson.User.ID, ""user"", userDetails)
    d.saveJson(processedJson.User.ID, ""debriefing"", debriefingAns)
    d.saveJson(processedJson.User.ID, ""raw"", rawJson)
}

// Deal with error
func (d *saveData) errorf(format string, args ...interface{}) {
    d.failed = true
}

func getJsonUserData(r *http.Request, w http.ResponseWriter) (jsonStruct, []byte, []byte, []byte, []byte, []byte, []byte, []byte) {
    defer r.Body.Close()

    procJson, err := fromJSON(r.Body)
    if err != nil {
        log.Fatal(err)
    }
    log.Printf(""initial structure: "", procJson)
    log.Printf(""%+v\n"", procJson)
    trials, err := json.Marshal(procJson.Trials)
    if err != nil {
        log.Fatal(err)
    }
    trainAns, err := json.Marshal(procJson.Answers.Training)
    if err != nil {
        log.Fatal(err)
    }
    testAns, err := json.Marshal(procJson.Answers.Test)
    if err != nil {
        log.Fatal(err)
    }
    stimSeq, err := json.Marshal(procJson.Stim)
    if err != nil {
        log.Fatal(err)
    }
    userDetail, err := json.Marshal(procJson.User)
    if err != nil {
        log.Fatal(err)
    }
    debriefingAns, err := json.Marshal(procJson.Debriefing)
    if err != nil {
        log.Fatal(err)
    }
    rawJson, err := json.Marshal(procJson)
    if err != nil {
        log.Fatal(err)
    }
    return procJson, trials, trainAns, testAns, stimSeq, userDetail, debriefingAns, rawJson
}

func (d *saveData) createUserFolder(folderName string) {
    fName := folderName + ""/""
    wc := storage.NewWriter(d.ctx, bucket, fName)
    wc.ContentType = ""text/plain""
    d.cleanUp = append(d.cleanUp, fName)

    if err := wc.Close(); err != nil {
        d.errorf(""createFile: unable to close bucket %q, file %q: %v"", bucket, fName, err)
        return
    }

}

func (d *saveData) saveJson(folderName string, fileName string, fileContent []byte) {
    fullName := folderName + ""/"" + fileName
    wc := storage.NewWriter(d.ctx, bucket, fullName)
    wc.ContentType = ""text/plain""
    d.cleanUp = append(d.cleanUp, fullName)
    d.createFile(fullName, fileContent)

}

func (d *saveData) createFile(fileName string, content []byte) {

    wc := storage.NewWriter(d.ctx, bucket, fileName)
    wc.ContentType = ""text/plain""
    d.cleanUp = append(d.cleanUp, fileName)

    if _, err := wc.Write([]byte(content)); err != nil {
        d.errorf(""createFile: unable to write data to bucket %q, file %q: %v"", bucket, fileName, err)
        return
    }
    if err := wc.Close(); err != nil {
        d.errorf(""createFile: unable to close bucket %q, file %q: %v"", bucket, fileName, err)
        return
    }
}

func handleloadTrials(w http.ResponseWriter, r *http.Request) {
    c := appengine.NewContext(r)
    if bucket == """" {
        var err error
        if bucket, err = file.DefaultBucketName(c); err != nil {
            // log.Errorf(c, ""failed to get default GCS bucket name: %v"", err)
            return
        }
    }
    hc := &http.Client{
        Transport: &oauth2.Transport{
            Source: google.AppEngineTokenSource(c, storage.ScopeFullControl),
            Base:   &urlfetch.Transport{Context: c},
        },
    }
    ctx := cloud.NewContext(appengine.AppID(c), hc)

    // structure to holds information needed to run the various saving functions
    d := &saveData{
        c:   c,
        r:   r,
        w:   w,
        ctx: ctx,
    }

    userID := r.URL.Query().Get(""id"")
    log.Println(userID)
    trialJson := d.readFile(userID)
    w.Write(trialJson)
}

// readFile reads the named file in Google Cloud Storage.
func (d *saveData) readFile(fileName string) []byte {
    trialName := fileName + ""/trials""
    rc, err := storage.NewReader(d.ctx, bucket, trialName)
    if err != nil {
        d.errorf(""readFile: unable to open file from bucket %q, file %q: %v"", bucket, trialName, err)

    }
    defer rc.Close()
    slurp, err := ioutil.ReadAll(rc)
    if err != nil {
        d.errorf(""readFile: unable to read data from bucket %q, file %q: %v"", bucket, fileName, err)
    }
    return slurp
}
",10424
465,30580746,"saveUserData : function saveUserData(data) {
  var _this = this,
      save = this.shadowRoot.querySelector('#save-data');

  save.url=""http://galileoexp.appspot.com/saveUserData"";
  save.body = JSON.stringify(data);
  save.go();
}
",232
466,30702948,golang,6
467,30702948,Go,2
468,30702948,"INSERT INTO V SET name = 'jack', boss = #11:19",46
469,30702948,"package main

import (
    ""bytes""
    ""encoding/json""
    ""fmt""
    ""log""
    ""net/http""
)

func main() {
    client := &http.Client{}
    // Why this stringData is lost and was not send with POST request?
    stringData := `INSERT INTO V SET name = 'jack', boss = #11:19`
    req, err := http.NewRequest(""POST"", ""http://localhost:2480/command/GratefulDeadConcerts/sql"", bytes.NewBufferString(stringData))
    req.SetBasicAuth(""root"", ""1"")
    resp, err := client.Do(req)
    if err != nil {
        fmt.Printf(""Error : %s"", err)
    }
    fmt.Println(""resp"")
    fmt.Println(ToJson(resp))

    var b bytes.Buffer
    _, err = b.ReadFrom(resp.Body)
    if err != nil {
        log.Fatal(""Error : %s"", err)
    }
    fmt.Println(b.String())
}

func ToJson(obj interface{}) string {
    b, err := json.MarshalIndent(&obj, """", ""   "")
    if err != nil {
        fmt.Printf(""Error : %s"", err)
    }
    strJson := string(b)

    return strJson
}
",943
470,30702948,"resp
{
   ""Status"": ""500 Internal Server Error"",
   ""StatusCode"": 500,
   ""Proto"": ""HTTP/1.1"",
   ""ProtoMajor"": 1,
   ""ProtoMinor"": 1,
   ""Header"": {
      ""Cache-Control"": [
         ""no-cache, no-store, max-age=0, must-revalidate""
      ],
      ""Connection"": [
         ""Keep-Alive""
      ],
      ""Content-Length"": [
         ""55""
      ],
      ""Content-Type"": [
         ""text/plain; charset=utf-8""
      ],
      ""Date"": [
         ""Mon Jun 08 10:47:46 MSK 2015""
      ],
      ""Pragma"": [
         ""no-cache""
      ],
      ""Server"": [
         ""OrientDB Server v.2.0.10 (build UNKNOWN@r; 2015-05-25 16:48:43+0000)""
      ]
   },
   ""Body"": {},
   ""ContentLength"": 55,
   ""TransferEncoding"": null,
   ""Close"": false,
   ""Trailer"": null,
   ""Request"": {
      ""Method"": ""POST"",
      ""URL"": {
         ""Scheme"": ""http"",
         ""Opaque"": """",
         ""User"": null,
         ""Host"": ""localhost:2480"",
         ""Path"": ""/command/GratefulDeadConcerts/sql"",
         ""RawQuery"": """",
         ""Fragment"": """"
      },
      ""Proto"": ""HTTP/1.1"",
      ""ProtoMajor"": 1,
      ""ProtoMinor"": 1,
      ""Header"": {
         ""Authorization"": [
            ""Basic cm9vdDox""
         ]
      },
      ""Body"": {
         ""Reader"": {}
      },
      ""ContentLength"": 46,
      ""TransferEncoding"": null,
      ""Close"": false,
      ""Host"": ""localhost:2480"",
      ""Form"": null,
      ""PostForm"": null,
      ""MultipartForm"": null,
      ""Trailer"": null,
      ""RemoteAddr"": """",
      ""RequestURI"": """",
      ""TLS"": null
   },
   ""TLS"": null
}
java.lang.IllegalArgumentException: text cannot be null
",1589
471,30702948,"curl -X POST -u root:1 -H ""Content-Type: application/json"" --data-urlencode ""INSERT INTO V SET name = 'jack', boss = #11:19""  http://localhost:2480/command/GratefulDeadConcerts/sql 
",182
472,30702948,"{""result"":[{""@type"":""d"",""@rid"":""#9:822"",""@version"":1,""@class"":""V"",""name"":null}]}
",81
473,30702948,--data-urlencode,16
474,30702948,curl,4
475,30702948,"curl -X POST -u root:1 -H ""Content-Type: application/json"" -d ""INSERT INTO V SET name = 'jack', boss = #11:19""  http://localhost:2480/command/GratefulDeadConcerts/sql
{""result"":[{""@type"":""d"",""@rid"":""#9:848"",""@version"":1,""@class"":""V"",""name"":""jack"",""boss"":""#11:19"",""@fieldTypes"":""boss=x""}]}
",289
476,30702948,url.QueryEscape,15
477,30702948,"package main

import (
    ""bytes""
    ""encoding/json""
    ""fmt""
    ""log""
    ""net/http""
    ""net/url""
)

func main() {
    client := &http.Client{}
    // Why this stringData is lost and do not pass thgouht POST request?
    stringData := `INSERT INTO V SET name = 'jack', boss = #11:19`
    stringData = url.QueryEscape(stringData)
    req, err := http.NewRequest(""POST"", ""http://localhost:2480/command/GratefulDeadConcerts/sql"", bytes.NewBufferString(stringData))
    req.SetBasicAuth(""root"", ""1"")
    req.Header.Set(""Content-Type"", ""Content-Type: text/plain"")
    resp, err := client.Do(req)
    if err != nil {
        fmt.Printf(""Error : %s"", err)
    }
    fmt.Println(""resp"")
    fmt.Println(ToJson(resp))

    var b bytes.Buffer
    _, err = b.ReadFrom(resp.Body)
    if err != nil {
        log.Fatal(""Error : %s"", err)
    }
    fmt.Println(b.String())
}

func ToJson(obj interface{}) string {
    b, err := json.MarshalIndent(&obj, """", ""   "")
    if err != nil {
        fmt.Printf(""Error : %s"", err)
    }
    strJson := string(b)

    return strJson
}
",1067
478,30702948,"resp
{
   ""Status"": ""500 Internal Server Error"",
   ""StatusCode"": 500,
   ""Proto"": ""HTTP/1.1"",
   ""ProtoMajor"": 1,
   ""ProtoMinor"": 1,
   ""Header"": {
      ""Cache-Control"": [
         ""no-cache, no-store, max-age=0, must-revalidate""
      ],
      ""Connection"": [
         ""Keep-Alive""
      ],
      ""Content-Length"": [
         ""55""
      ],
      ""Content-Type"": [
         ""text/plain; charset=utf-8""
      ],
      ""Date"": [
         ""Mon Jun 08 19:39:12 MSK 2015""
      ],
      ""Pragma"": [
         ""no-cache""
      ],
      ""Server"": [
         ""OrientDB Server v.2.0.10 (build UNKNOWN@r; 2015-05-25 16:48:43+0000)""
      ]
   },
   ""Body"": {},
   ""ContentLength"": 55,
   ""TransferEncoding"": null,
   ""Close"": false,
   ""Trailer"": null,
   ""Request"": {
      ""Method"": ""POST"",
      ""URL"": {
         ""Scheme"": ""http"",
         ""Opaque"": """",
         ""User"": null,
         ""Host"": ""localhost:2480"",
         ""Path"": ""/command/GratefulDeadConcerts/sql"",
         ""RawQuery"": """",
         ""Fragment"": """"
      },
      ""Proto"": ""HTTP/1.1"",
      ""ProtoMajor"": 1,
      ""ProtoMinor"": 1,
      ""Header"": {
         ""Authorization"": [
            ""Basic cm9vdDox""
         ],
         ""Content-Type"": [
            ""Content-Type: text/plain""
         ]
      },
      ""Body"": {
         ""Reader"": {}
      },
      ""ContentLength"": 60,
      ""TransferEncoding"": null,
      ""Close"": false,
      ""Host"": ""localhost:2480"",
      ""Form"": null,
      ""PostForm"": null,
      ""MultipartForm"": null,
      ""Trailer"": null,
      ""RemoteAddr"": """",
      ""RequestURI"": """",
      ""TLS"": null
   },
   ""TLS"": null
}
java.lang.IllegalArgumentException: text cannot be null
",1667
479,30702948,text/plain,10
480,30702948,curl,4
481,30702948,"curl -X POST -u root:1 -H ""Content-Type: text/plain"" -d ""INSERT INTO V SET name = 'jack', boss = #11:19""  http://localhost:2480/command/GratefulDeadConcerts/sql
{""result"":[{""@type"":""d"",""@rid"":""#9:858"",""@version"":1,""@class"":""V"",""name"":""jack"",""boss"":""#11:19"",""@fieldTypes"":""boss=x""}]}
",283
482,30702948,curl,4
483,30702948,golang,6
484,30702948,GO,2
485,30919986,"    $ go run main.go
    [GIN-debug] [WARNING] Running in ""debug"" mode. Switch to ""release"" mode in production.
    - using env:   export GIN_MODE=release
    - using code:  gin.SetMode(gin.ReleaseMode)

    [GIN-debug] GET   /                         --> main.index (3 handlers)
    [GIN-debug] GET   /articles                 --> main.ArticlesList (3 handlers)
    [GIN-debug] POST  /articles                 --> main.ArticlePost (3 handlers)
    [GIN-debug] GET   /articles/:article_id     --> main.ArticlesDetail (3 handlers)
    [GIN-debug] Listening and serving HTTP on :8000
    2015/06/18 10:31:49 Panic recovery -> interface conversion: error is *errors.errorString, not *errors.Error
    c:/go/src/runtime/panic.go:387 (0x4114b6)
            gopanic: reflectcall(unsafe.Pointer(d.fn), deferArgs(d), uint32(d.siz), uint32(d.siz))
    c:/go/src/runtime/iface.go:181 (0x40ae1a)
            assertI2T: panic(&TypeAssertionError{*tab.inter.typ._string, *tab._type._string, *t._string, """"})
    c:/Users/Fresh/go/src/github.com/jisaw/portfolio-server/main.go:37 (0x401261)
            checkErr: log.Fatalln(msg, err.(*errors.Error).ErrorStack())
    c:/Users/Fresh/go/src/github.com/jisaw/portfolio-server/main.go:97 (0x401e2c)
            getArticle: checkErr(err, ""selectOne failed"")
    c:/Users/Fresh/go/src/github.com/jisaw/portfolio-server/main.go:60 (0x4016a7)
            ArticlesDetail: article := getArticle(a_id)
    c:/Users/Fresh/go/src/github.com/gin-gonic/gin/context.go:86 (0x43694a)
            (*Context).Next: c.handlers[c.index](c)
    c:/Users/Fresh/go/src/github.com/gin-gonic/gin/logger.go:56 (0x442ff0)
            func.007: c.Next()
    c:/Users/Fresh/go/src/github.com/gin-gonic/gin/context.go:86 (0x43694a)
            (*Context).Next: c.handlers[c.index](c)
    c:/Users/Fresh/go/src/github.com/gin-gonic/gin/recovery.go:43 (0x4437e0)
            func.009: c.Next()
    c:/Users/Fresh/go/src/github.com/gin-gonic/gin/context.go:86 (0x43694a)
            (*Context).Next: c.handlers[c.index](c)
    c:/Users/Fresh/go/src/github.com/gin-gonic/gin/gin.go:249 (0x43b275)
            (*Engine).handleHTTPRequest: context.Next()
    c:/Users/Fresh/go/src/github.com/gin-gonic/gin/gin.go:230 (0x43aff9)
            (*Engine).ServeHTTP: engine.handleHTTPRequest(c)
    c:/go/src/net/http/server.go:1703 (0x4ad385)
            serverHandler.ServeHTTP: handler.ServeHTTP(rw, req)
    c:/go/src/net/http/server.go:1204 (0x4ab378)
            (*conn).serve: serverHandler{c.server}.ServeHTTP(w, w.req)
    c:/go/src/runtime/asm_386.s:2287 (0x435c01)
            goexit:
",2590
486,30919986,"package main

import (
    ""github.com/gin-gonic/gin""
    ""database/sql""
    ""github.com/coopernurse/gorp""
    _ ""github.com/mattn/go-sqlite3""
    ""log""
    ""time""
    ""strconv""
    ""github.com/go-errors/errors""
)

type Article struct {
    Id int64 `db:""article_id""`
    Created int64
    Title string
    Content string
}

var dbmap = initDb()

func initDb() gorp.DbMap {
    db, err := sql.Open(""sqlite3"", ""db.sqlite3"")
    checkErr(err, ""sql.Open faild"")
    dbmap := gorp.DbMap{Db: db, Dialect: gorp.SqliteDialect{}}
    dbmap.AddTableWithName(Article{}, ""articles"").SetKeys(true, ""Id"")
    err = dbmap.CreateTablesIfNotExists()
    checkErr(err, ""Create tables failed"")
    return dbmap
}

func checkErr(err error, msg string) {
    if err != nil {
        log.Fatalln(msg, err.(*errors.Error).ErrorStack())
    }
}

func index (c *gin.Context) {
    content := gin.H{""Hello"": ""World""}
    c.JSON(200, content)
}

func ArticlesList(c *gin.Context) {
    var articles []Article
    _, err := dbmap.Select(&articles, ""select * from articles order by article_id"")
    checkErr(err, ""Select failed"")
    content := gin.H{}
    for k, v := range articles {
        content[strconv.Itoa(k)] =v
    }
    c.JSON(200, content)
}

func ArticlesDetail(c *gin.Context) {
    article_id := c.Params.ByName(""id"")
    a_id, _ := strconv.Atoi(article_id)
    article := getArticle(a_id)
    content := gin.H{""title"": article.Title, ""content"": article.Content}
    c.JSON(200, content)
}

func ArticlePost(c *gin.Context) {
    var json Article

    c.Bind(&json)
    article := createArticle(json.Title, json.Content)
    if article.Title == json.Title {
        content := gin.H{
            ""result"": ""Success"",
            ""title"": article.Title,
            ""content"": article.Content,
        }
        c.JSON(201, content)
    } else {
        c.JSON(500, gin.H{""result"": ""An error occured""})
    }
}

func createArticle(title, body string) Article {
    article := Article{
        Created: time.Now().UnixNano(),
        Title: title,
        Content: body,
    }

    err := dbmap.Insert(&article)
    checkErr(err, ""Insert failed"")
    return article
}

func getArticle(article_id int) Article {
    article := Article{}
    err := dbmap.SelectOne(&article, ""select * from articles where article_id=?"", article_id)
    checkErr(err, ""selectOne failed"")
    return article
}

func main() {
    app := gin.Default()
    app.GET(""/"", index)
    app.GET(""/articles"", ArticlesList)
    app.POST(""/articles"", ArticlePost)
    app.GET(""/articles/:article_id"", ArticlesDetail)
    app.Run("":8000"")
}
",2593
487,31086315,"package main

import (
    ""RESTMONGOMVC/controllers""
    ""log""
    ""net/http""

    ""github.com/gorilla/mux""

    ""gopkg.in/mgo.v2""
)

var (
    session    *mgo.Session
    collection *mgo.Collection
    err        error
)

func getSession() *mgo.Session {
    // Connect to our local mongo
    s, err := mgo.Dial(""mongodb://localhost"")

    // Check if connection error, is mongo running?
    if err != nil {
        panic(err)
    }

    // Deliver session
    return s
}
func main() {
    var err error
    r := mux.NewRouter()
    uc := controllers.NewNoteController(getSession())
    r.HandleFunc(""/api/notes"", uc.GetNotes).Methods(""GET"")
    r.HandleFunc(""/api/notes"", uc.CreateNote).Methods(""POST"")
    r.HandleFunc(""/api/notes/{id}"", uc.UpdateNote).Methods(""PUT"")
    r.HandleFunc(""/api/notes/{id}"", uc.DeleteNote).Methods(""DELETE"")
    http.Handle(""/api/"", r)
    http.Handle(""/"", http.FileServer(http.Dir(""."")))
    log.Println(""Starting Mongodb Session"")
    session, err = mgo.Dial(""localhost"")
    if err != nil {
        panic(err)
    }
    defer session.Close()
    session.SetMode(mgo.Monotonic, true)
    collection = session.DB(""notesdb"").C(""notes"")
    log.Println(""Listening on 8080"")
    http.ListenAndServe("":8080"", nil)
}
",1246
488,31086315,"package controllers

import (
    ""RESTMONGOMVC/models""
    ""encoding/json""
    ""log""
    ""net/http""
    ""time""

    ""github.com/gorilla/mux""

    ""gopkg.in/mgo.v2""
    ""gopkg.in/mgo.v2/bson""
)

var (
    session    *mgo.Session
    collection *mgo.Collection
    err        error
)

type (
    // UserController represents the controller for operating on the User resource
    NoteController struct {
        session *mgo.Session
    }
)

// NewUserController provides a reference to a UserController with provided mongo session
func NewNoteController(s *mgo.Session) *NoteController {
    return &NoteController{s}
}
func (uc NoteController) GetNotes(w http.ResponseWriter, r *http.Request) {
    var notes []models.Note
    iter := collection.Find(nil).Iter()
    result := models.Note{}
    for iter.Next(&result) {
        notes = append(notes, result)
    }
    w.Header().Set(""Content-Type"", ""application/json"")
    j, err := json.Marshal(models.NotesResource{Notes: notes})
    if err != nil {
        panic(err)
    }
    w.Write(j)
}

func (uc NoteController) CreateNote(w http.ResponseWriter, r *http.Request) {
    var noteResource models.NoteResource

    err := json.NewDecoder(r.Body).Decode(¬eResource)
    if err != nil {
        panic(err)
    }
    note := noteResource.Note
    //get a new Id
    obj_id := bson.NewObjectId()
    note.Id = obj_id
    note.CreatedOn = time.Now()
    //Insert into document collection
    err = collection.Insert(¬e)
    if err != nil {
        panic(err)
    } else {
        log.Printf(""Inserted New Record with Title :%s"", note.Title)
    }
    j, err := json.Marshal(models.NoteResource{Note: note})
    if err != nil {
        panic(err)
    }
    w.Header().Set(""Content-Type"", ""application/json"")
    w.Write(j)
}

func (uc NoteController) UpdateNote(w http.ResponseWriter, r *http.Request) {
    var err error
    //get id from incoming url
    vars := mux.Vars(r)
    id := bson.ObjectIdHex(vars[""id""])
    //decode the incoming Note into json
    var noteResource models.NoteResource
    err = json.NewDecoder(r.Body).Decode(¬eResource)
    if err != nil {
        panic(err)
    }
    //partial update on mongodb
    err = collection.Update(bson.M{""_id"": id},
        bson.M{""$set"": bson.M{
            ""title"":      noteResource.Note.Title,
            ""decription"": noteResource.Note.Description,
        }})
    if err == nil {
        log.Printf(""Updated Note : %s"", id, noteResource.Note.Title)
    } else {
        panic(err)
    }
    w.WriteHeader(http.StatusNoContent)
}
func (uc NoteController) DeleteNote(w http.ResponseWriter, r *http.Request) {
    var err error
    vars := mux.Vars(r)
    id := vars[""id""]
    //Remove from database
    err = collection.Remove(bson.M{""_id"": bson.ObjectIdHex(id)})
    if err != nil {
        log.Printf(""Could not find the Note %s to delete"", id)
    }
    w.WriteHeader(http.StatusNoContent)
}
",2910
489,31086315,"package models 
 import ( 
    ""time"" 
    ""gopkg.in/mgo.v2/bson"" 
  ) 
 type Note struct { 
    Id          bson.ObjectId `bson:""_id"" json:""id""` 
    Title       string        `json:""title""` 
    Description string        `json:""description""` 
    CreatedOn   time.Time     `json:""craetedOn""` 
 } 
 type NoteResource struct { 
    Note Note `json:""note""` 
 } 
 type NotesResource struct { 
    Notes []Note `json:""notes""` 
 } 
",428
490,31088111,"2015-06-27T10:43:06.839094+00:00 heroku[web.1]: Starting process with command `FlickrImage`
2015-06-27T10:43:08.998400+00:00 heroku[web.1]: State changed from starting to crashed
2015-06-27T10:43:08.998400+00:00 heroku[web.1]: State changed from crashed to starting
2015-06-27T10:43:08.985737+00:00 heroku[web.1]: Process exited with status 0
2015-06-27T10:43:10.795684+00:00 heroku[web.1]: Starting process with command `FlickrImage`
2015-06-27T10:43:13.837301+00:00 heroku[web.1]: Process exited with status 0
2015-06-27T10:43:13.850141+00:00 heroku[web.1]: State changed from starting to crashed
2015-06-27T10:44:41.914412+00:00 heroku[router]: at=error code=H10 desc=""App crashed"" method=GET path=""/Index"" host=morning-ridge-1365.herokuapp.com request_id=89d2e794-a725-4ddf-b437-dbcbd988428c fwd=""202.12.83.44"" dyno= connect= service= status=503 bytes=
",857
491,31088111,"package main

import (
    ""encoding/json""
    ""fmt""
    ""io/ioutil""
    ""log""
    ""net/http""
    ""os""
    ""reflect""
    ""strconv""
    ""strings""

    ""github.com/gorilla/mux""
    ""gopkg.in/mgo.v2""
    ""gopkg.in/mgo.v2/bson""
)

type imageLinks struct {
    Link     string `bson:""link""`
    Upvote   int    `bson:""upvote""`
    Downvote int    `bson:""downvote""`
}

type Result struct {
    Photos struct {
        Page    int    `json: ""page""`
        Pages   int    `json: ""pages""`
        PerPage int    `json: ""perpage""`
        Total   string `json: ""total""`
        Photo   []struct {
            Id       string `json: ""id""`
            Owner    string `json: ""owner""`
            Secret   string `json: ""secret""`
            Server   string `json: ""server""`
            Farm     int    `json: ""farm""`
            Title    string `json: ""title""`
            IsPublic int    `json: ""ispublic""`
            IsFriend int    `json: ""isfriend""`
            IsFamily int    `json: ""isfamily`
        } `json: ""photo""`
    } `json: ""photos""`
    Stat string `json: ""stat""`
}

func main() {

    router := mux.NewRouter().StrictSlash(true)
    router.HandleFunc(""/Index"", Index)
    router.HandleFunc(""/UpVote"", UpVoteRoute)
    router.HandleFunc(""/DownVote"", DownVoteRoute)
    log.Fatal(http.ListenAndServe("":8080"", router))
}

func UpVoteRoute(w http.ResponseWriter, r *http.Request) {

    link := r.URL.Query().Get(""imagelink"")
    w.Header().Set(""Content-Type"", ""application/json"")
    session, err := mgo.Dial(""mongodb://:@ds061631.mongolab.com:61631/flickrimagedb"")
    if err != nil {
        fmt.Printf(""%s"", err)
        os.Exit(1)
    }
    defer session.Close()

    session.SetMode(mgo.Monotonic, true)
    c := session.DB(""flickrimagedb"").C(""image_links_votes"")

    err = c.Update(bson.M{""link"": link}, bson.M{""$inc"": bson.M{""upvote"": 1}})
    if err != nil {
        fmt.Printf(""Can't update document %v\n"", err)
        os.Exit(1)
    }
}

func DownVoteRoute(w http.ResponseWriter, r *http.Request) {

    link := r.URL.Query().Get(""imagelink"")
    w.Header().Set(""Content-Type"", ""application/json"")
    session, err := mgo.Dial(""mongodb://*********:*******@ds061631.mongolab.com:61631/flickrimagedb"")
    if err != nil {
        fmt.Printf(""%s"", err)
        os.Exit(1)
    }
    defer session.Close()

    session.SetMode(mgo.Monotonic, true)
    c := session.DB(""flickrimagedb"").C(""image_links_votes"")

    err = c.Update(bson.M{""link"": link}, bson.M{""$inc"": bson.M{""downvote"": 1}})
    if err != nil {
        fmt.Printf(""Can't update document %v\n"", err)
        os.Exit(1)
    }
}

func Index(w http.ResponseWriter, r *http.Request) {

    w.Header().Set(""Content-Type"", ""application/json"")
    session, err := mgo.Dial(""mongodb://*********:*********@ds061631.mongolab.com:61631/flickrimagedb"")
    if err != nil {
        fmt.Printf(""%s"", err)
        os.Exit(1)
    }

    defer session.Close()

    session.SetMode(mgo.Monotonic, true)
    c := session.DB(""flickrimagedb"").C(""image_links_votes"")

    checkResult := &imageLinks{}
    // Create a slice to begin with
    myType := reflect.TypeOf(checkResult)
    slice := reflect.MakeSlice(reflect.SliceOf(myType), 10, 10)
    // Create a pointer to a slice value and set it to the slice
    x := reflect.New(slice.Type())
    x.Elem().Set(slice)
    err = c.Find(bson.M{}).All(x.Interface())
    if err != nil {
        response, err := json.Marshal(x.Interface())
        if err != nil {
            fmt.Printf(""%s"", err)
            os.Exit(2)
        }
        fmt.Fprintf(w, string(response))
    } else {
        url := ""https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=*****************************&text=cute+puppies&per_page=12&format=json&nojsoncallback=1""
        res, err := http.Get(url)
        if err != nil {
            fmt.Printf(""%s"", err)
            os.Exit(3)
        }
        body, err := ioutil.ReadAll(res.Body)
        if err != nil {
            fmt.Printf(""%s"", err)
            os.Exit(4)
        }

        jsonData := &Result{}
        err = json.Unmarshal(body, jsonData)

        for value := range jsonData.Photos.Photo {
            s1 := []string{""https://farm"", "".staticflickr.com/""}
            s2 := []string{strings.Join(s1, strconv.Itoa(jsonData.Photos.Photo[value].Farm)), ""/""}
            s3 := []string{strings.Join(s2, jsonData.Photos.Photo[value].Server), ""_""}
            s4 := []string{strings.Join(s3, jsonData.Photos.Photo[value].Id), "".jpg""}
            s := strings.Join(s4, jsonData.Photos.Photo[value].Secret)
            singleReuslt := imageLinks{}
            err = c.Find(bson.M{""link"": s}).One(&singleReuslt)
            if err != nil {
                err = c.Insert(&imageLinks{Link: s, Upvote: 0, Downvote: 0})
                if err != nil {
                    fmt.Printf(""%s"", err)
                    os.Exit(5)
                }
            }
        }

        allResult := &imageLinks{}
        // Create a slice to begin with
        myType := reflect.TypeOf(allResult)
        slice := reflect.MakeSlice(reflect.SliceOf(myType), 10, 10)
        // Create a pointer to a slice value and set it to the slice
        x := reflect.New(slice.Type())
        x.Elem().Set(slice)
        err = c.Find(bson.M{}).All(x.Interface())
        response, err := json.Marshal(x.Interface())
        if err != nil {
            fmt.Printf(""%s"", err)
            os.Exit(6)
        }
        fmt.Fprintf(w, string(response))
    }
}
",5484
492,31160815,"package main

import (
    ""net/http""
    ""text/template""
)

func main() {
    http.HandleFunc(""/"", func(w http.ResponseWriter, req *http.Request) {
        w.Header().Add(""Content Type"", ""text/html"")
        templates := template.New(""template"")
        templates.New(""test"").Parse(doc)
        templates.New(""header"").Parse(header)
        templates.New(""footer"").Parse(footer)
        context := Context{
            [3]string{""Lemon"", ""Orange"", ""Apple""},
            ""the title"",
        }
        templates.Lookup(""test"").Execute(w, context)

    })

    http.ListenAndServe("":80"", nil)
}

const doc = `
{{template ""header"" . Title}}
    
        List of Fruit
        
            {{range .Fruit}}
                {{.}}
            {{end}}
        
    
`

const header = `


    {{.}}
`

const footer = `

`

type Context struct {
    Fruit [3]string
    Title string
}
",877
493,31160815,"2015/07/01 13:53:14 http: panic serving 127.0.0.1:56994: runtime error: invalid memory address or nil pointer dereference
goroutine 5 [running]:
net/http.func·011()
        c:/go/src/net/http/server.go:1130 +0xc2
text/template.errRecover(0xc082097b48)
        c:/go/src/text/template/exec.go:100 +0xc3
text/template.(*Template).Execute(0x0, 0x353378, 0xc082070280, 0x6a5000, 0xc082008840, 0x0, 0x0)
        c:/go/src/text/template/exec.go:137 +0x249
main.func·001(0x353210, 0xc082070280, 0xc082020000)
        D:/Go/src/main/main.go:19 +0x325
net/http.HandlerFunc.ServeHTTP(0x786560, 0x353210, 0xc082070280, 0xc082020000)
        c:/go/src/net/http/server.go:1265 +0x48
net/http.(*ServeMux).ServeHTTP(0xc08205c360, 0x353210, 0xc082070280, 0xc082020000)
        c:/go/src/net/http/server.go:1541 +0x184
net/http.serverHandler.ServeHTTP(0xc082044180, 0x353210, 0xc082070280, 0xc082020000)
        c:/go/src/net/http/server.go:1703 +0x1a1
net/http.(*conn).serve(0xc082070000)
        c:/go/src/net/http/server.go:1204 +0xb5e
created by net/http.(*Server).Serve
        c:/go/src/net/http/server.go:1751 +0x365
2015/07/01 13:53:14 http: panic serving 127.0.0.1:56995: runtime error: invalid memory address or nil pointer dereference
goroutine 6 [running]:
net/http.func·011()
        c:/go/src/net/http/server.go:1130 +0xc2
text/template.errRecover(0xc082067b48)
        c:/go/src/text/template/exec.go:100 +0xc3
text/template.(*Template).Execute(0x0, 0x353378, 0xc082070320, 0x6a5000, 0xc082008a40, 0x0, 0x0)
        c:/go/src/text/template/exec.go:137 +0x249
main.func·001(0x353210, 0xc082070320, 0xc0820200d0)
        D:/Go/src/main/main.go:19 +0x325
net/http.HandlerFunc.ServeHTTP(0x786560, 0x353210, 0xc082070320, 0xc0820200d0)
        c:/go/src/net/http/server.go:1265 +0x48
net/http.(*ServeMux).ServeHTTP(0xc08205c360, 0x353210, 0xc082070320, 0xc0820200d0)
        c:/go/src/net/http/server.go:1541 +0x184
net/http.serverHandler.ServeHTTP(0xc082044180, 0x353210, 0xc082070320, 0xc0820200d0)
        c:/go/src/net/http/server.go:1703 +0x1a1
net/http.(*conn).serve(0xc0820701e0)
        c:/go/src/net/http/server.go:1204 +0xb5e
created by net/http.(*Server).Serve
        c:/go/src/net/http/server.go:1751 +0x365
2015/07/01 13:53:14 http: panic serving 127.0.0.1:56997: runtime error: invalid memory address or nil pointer dereference
goroutine 13 [running]:
net/http.func·011()
        c:/go/src/net/http/server.go:1130 +0xc2
text/template.errRecover(0xc08201fb48)
        c:/go/src/text/template/exec.go:100 +0xc3
text/template.(*Template).Execute(0x0, 0x353378, 0xc082070460, 0x6a5000, 0xc082008dc0, 0x0, 0x0)
        c:/go/src/text/template/exec.go:137 +0x249
main.func·001(0x353210, 0xc082070460, 0xc0820209c0)
        D:/Go/src/main/main.go:19 +0x325
net/http.HandlerFunc.ServeHTTP(0x786560, 0x353210, 0xc082070460, 0xc0820209c0)
        c:/go/src/net/http/server.go:1265 +0x48
net/http.(*ServeMux).ServeHTTP(0xc08205c360, 0x353210, 0xc082070460, 0xc0820209c0)
        c:/go/src/net/http/server.go:1541 +0x184
net/http.serverHandler.ServeHTTP(0xc082044180, 0x353210, 0xc082070460, 0xc0820209c0)
        c:/go/src/net/http/server.go:1703 +0x1a1
net/http.(*conn).serve(0xc0820703c0)
        c:/go/src/net/http/server.go:1204 +0xb5e
created by net/http.(*Server).Serve
        c:/go/src/net/http/server.go:1751 +0x365
2015/07/01 13:53:15 http: panic serving 127.0.0.1:56998: runtime error: invalid memory address or nil pointer dereference
goroutine 17 [running]:
net/http.func·011()
        c:/go/src/net/http/server.go:1130 +0xc2
text/template.errRecover(0xc082067b48)
        c:/go/src/text/template/exec.go:100 +0xc3
text/template.(*Template).Execute(0x0, 0x353378, 0xc0820701e0, 0x6a5000, 0xc082008840, 0x0, 0x0)
        c:/go/src/text/template/exec.go:137 +0x249
main.func·001(0x353210, 0xc0820701e0, 0xc0820200d0)
        D:/Go/src/main/main.go:19 +0x325
net/http.HandlerFunc.ServeHTTP(0x786560, 0x353210, 0xc0820701e0, 0xc0820200d0)
        c:/go/src/net/http/server.go:1265 +0x48
net/http.(*ServeMux).ServeHTTP(0xc08205c360, 0x353210, 0xc0820701e0, 0xc0820200d0)
        c:/go/src/net/http/server.go:1541 +0x184
net/http.serverHandler.ServeHTTP(0xc082044180, 0x353210, 0xc0820701e0, 0xc0820200d0)
        c:/go/src/net/http/server.go:1703 +0x1a1
net/http.(*conn).serve(0xc082070000)
        c:/go/src/net/http/server.go:1204 +0xb5e
created by net/http.(*Server).Serve
        c:/go/src/net/http/server.go:1751 +0x365
",4438
494,31279557,"e := expression.(type) // Line 73
",34
495,31279557,.(type),7
496,31279557,"switch p := procedure.(type) {
case func(...scmer) scmer:
    value = p(args...)
case proc:
    en := &env{make(vars), p.en}
    switch params := p.params.(type) {
    case []scmer:
        for i, param := range params {
            en.vars[param.(symbol)] = args[i]
        }
    default:
        en.vars[params.(symbol)] = args
    }
    value = eval(p.body, en)
",365
497,31279557,"*tokens = (*tokens)[1:] // Line 208
",36
498,31279557,"token := (*tokens)[0]
*tokens = (*tokens)[1:]
switch token {
case ""("": //a list begins
    L := make([]scmer, 0)
    for (*tokens)[0] != "")"" {
        if i := readFrom(tokens); i != symbol("""") {
            L = append(L, i)
        }
    }
    *tokens = (*tokens)[1:]
    return L
",281
499,31279557,"/*
 * A minimal Scheme interpreter, as seen in lis.py and SICP
 * http://norvig.com/lispy.html
 * http://mitpress.mit.edu/sicp/full-text/sicp/book/node77.html
 *
 * Pieter Kelchtermans 2013
 * LICENSE: WTFPL 2.0
 */
package main

import (
    ""bufio""
    ""fmt""
    ""log""
    ""os""
    ""reflect""
    ""strconv""
    ""strings""
)

func main() {
    Repl()
}

/*
 Eval / Apply
*/

func eval(expression scmer, en *env) (value scmer) {
    switch e := expression.(type) {
    case number:
        value = e
    case symbol:
        value = en.Find(e).vars[e]
    case []scmer:
        switch car, _ := e[0].(symbol); car {
        case ""quote"":
            value = e[1]
        case ""if"":
            if eval(e[1], en).(bool) {
                value = eval(e[2], en)
            } else {
                value = eval(e[3], en)
            }
        case ""set!"":
            v := e[1].(symbol)
            en.Find(v).vars[v] = eval(e[2], en)
            value = ""ok""
        case ""define"":
            en.vars[e[1].(symbol)] = eval(e[2], en)
            value = ""ok""
        case ""lambda"":
            value = proc{e[1], e[2], en}
        case ""begin"":
            for _, i := range e[1:] {
                value = eval(i, en)
            }
        default:
            operands := e[1:]
            values := make([]scmer, len(operands))
            for i, x := range operands {
                values[i] = eval(x, en)
            }
            value = apply(eval(e[0], en), values)
        }
    default:
        log.Println(""Unknown expression type - EVAL"", e)
    }
    return
}

func apply(procedure scmer, args []scmer) (value scmer) {
    switch p := procedure.(type) {
    case func(...scmer) scmer:
        value = p(args...)
    case proc:
        en := &env{make(vars), p.en}
        switch params := p.params.(type) {
        case []scmer:
            for i, param := range params {
                en.vars[param.(symbol)] = args[i]
            }
        default:
            en.vars[params.(symbol)] = args
        }
        value = eval(p.body, en)
    default:
        log.Println(""Unknown procedure type - APPLY"", p)
    }
    return
}

type proc struct {
    params, body scmer
    en           *env
}

/*
 Environments
*/

type vars map[symbol]scmer
type env struct {
    vars
    outer *env
}

func (e *env) Find(s symbol) *env {
    if _, ok := e.vars[s]; ok {
        return e
    } else {
        return e.outer.Find(s)
    }
}

/*
 Primitives
*/

var globalenv env

func init() {
    globalenv = env{
        vars{ //aka an incomplete set of compiled-in functions
            ""+"": func(a ...scmer) scmer {
                v := a[0].(number)
                for _, i := range a[1:] {
                    v += i.(number)
                }
                return v
            },
            ""-"": func(a ...scmer) scmer {
                v := a[0].(number)
                for _, i := range a[1:] {
                    v -= i.(number)
                }
                return v
            },
            ""*"": func(a ...scmer) scmer {
                v := a[0].(number)
                for _, i := range a[1:] {
                    v *= i.(number)
                }
                return v
            },
            ""/"": func(a ...scmer) scmer {
                v := a[0].(number)
                for _, i := range a[1:] {
                    v /= i.(number)
                }
                return v
            },
            ""<="": func(a ...scmer) scmer {
                return a[0].(number) <= a[1].(number)
            },
            ""equal?"": func(a ...scmer) scmer {
                return reflect.DeepEqual(a[0], a[1])
            },
            ""cons"": func(a ...scmer) scmer {
                switch car := a[0]; cdr := a[1].(type) {
                case []scmer:
                    return append([]scmer{car}, cdr...)
                default:
                    return []scmer{car, cdr}
                }
            },
            ""car"": func(a ...scmer) scmer {
                return a[0].([]scmer)[0]
            },
            ""cdr"": func(a ...scmer) scmer {
                return a[0].([]scmer)[1:]
            },
            ""list"": eval(read(
                ""(lambda z z)""),
                &globalenv),
        },
        nil}
}

/*
 Parsing
*/

//symbols, numbers, expressions, procedures, lists, ... all implement this interface, which enables passing them along in the interpreter
type scmer interface{}

type symbol string  //symbols are represented by strings
type number float64 //numbers by float64

func read(s string) (expression scmer) {
    tokens := tokenize(s)
    return readFrom(&tokens)
}

//Syntactic Analysis
func readFrom(tokens *[]string) (expression scmer) {
    //pop first element from tokens
    token := (*tokens)[0]
    *tokens = (*tokens)[1:]
    switch token {
    case ""("": //a list begins
        L := make([]scmer, 0)
        for (*tokens)[0] != "")"" {
            if i := readFrom(tokens); i != symbol("""") {
                L = append(L, i)
            }
        }
        *tokens = (*tokens)[1:]
        return L
    default: //an atom occurs
        if f, err := strconv.ParseFloat(token, 64); err == nil {
            return number(f)
        } else {
            return symbol(token)
        }
    }
}

//Lexical Analysis
func tokenize(s string) []string {
    return strings.Split(
        strings.Replace(strings.Replace(s, ""("", ""( "",
            -1), "")"", "" )"",
            -1), "" "")
}

/*
 Interactivity
*/

func String(v scmer) string {
    switch v := v.(type) {
    case []scmer:
        l := make([]string, len(v))
        for i, x := range v {
            l[i] = String(x)
        }
        return ""("" + strings.Join(l, "" "") + "")""
    default:
        return fmt.Sprint(v)
    }
}

func Repl() {
    scanner := bufio.NewScanner(os.Stdin)
    for fmt.Print(""> ""); scanner.Scan(); fmt.Print(""> "") {
        fmt.Println(""==>"", String(eval(read(scanner.Text()), &globalenv)))
    }
}
",5962
500,31286087,"package main

import (
    ""reflect""
    ""fmt""
    ""log""
    ""os""
    ""encoding/json""
    ""sort""

    ""github.com/lxn/walk""
    . ""github.com/lxn/walk/declarative""
    //""strings""
)

type Task struct {
    TaskId string
    TaskNo string
    TaskName string
    ManDay string
    Term string
    ManDayDay string
    StartDate string
    EndDate string
    Progress string
}

type TaskModel struct {
    walk.TableModelBase
    walk.SorterBase
    sortColumn int
    sortOrder walk.SortOrder
    items []Task
}

func NewTaskModel() *TaskModel {
    t := new(TaskModel)

    t.items = make([]Task, 3)

    var tasks []Task
    tasks = read("""")

    for i := 0; i < len(tasks); i++ {
        var task Task
        task = tasks[i]
        t.items[i] = task
    }

    t.PublishRowsReset()

    return t
}

func (m *TaskModel) RowCount() int {
    return len(m.items)
}

func (m *TaskModel) Len() int {
    return len(m.items)
}

func (m *TaskModel) Value(row, col int) interface{} {
    item := m.items[row]

    switch col {
        case 0:
            return item.TaskId
        case 1:
            return item.TaskNo
        case 2:
            return item.TaskName
        case 3:
            return item.ManDay
        case 4:
            return item.Term
        case 5:
            return item.ManDayDay
        case 6:
            return item.StartDate
        case 7:
            return item.EndDate
        case 8:
            return item.Progress
    }

    panic(""unexpected col"")
}

func (m *TaskModel) Sort(col int, order walk.SortOrder) error {
    m.sortColumn, m.sortOrder = col, order

    sort.Sort(m)

    return m.SorterBase.Sort(col, order)
}

func (m *TaskModel) Less(i, j int) bool {
    a, b := m.items[i], m.items[j]

    c := func(ls bool) bool {
        if m.sortOrder == walk.SortAscending {
            return ls
        }

        return !ls
    }

    switch m.sortColumn {
        case 0:
            return c(a.TaskId < b.TaskId)
        case 1:
            return c(a.TaskNo < b.TaskNo)
        case 2:
            return c(a.TaskName < b.TaskName)
        case 3:
            return c(a.ManDay < b.ManDay)
        case 4:
            return c(a.Term < b.Term)
        case 5:
            return c(a.ManDayDay < b.ManDayDay)
        case 6:
            return c(a.StartDate < b.StartDate)
        case 7:
            return c(a.EndDate < b.EndDate)
        case 8:
            return c(a.Progress < b.Progress)
    }

    panic(""error"")
}

func (m *TaskModel) Swap(i, j int) {
    m.items[i], m.items[j] = m.items[j], m.items[i]
}

func read(filePath string) []Task{

    file, err := os.Open(""C:/Dev/xampp/htdocs/workspace/SampleGoProject/src/main/task.json"")
    //file, err := os.Open(filePath)

    if err != nil {
        log.Fatal(err)
    }

    defer file.Close()

    var tasks []Task

    decoder := json.NewDecoder(file)
    //json.NewDecoder(file)

    //fmt.Print(tasks)

    //err = decoder.Decode(&tasks)
    decoder.Decode(&tasks)
    if err != nil {
        log.Fatal(err)
    }

    //fmt.Print(tasks)

    return tasks;
}

func write(filePath string, mw *MyMainWindow) {

    var children *walk.WidgetList
    children = mw.MainWindow.Children()

    var child walk.Widget
    child = children.At(0)

    to := reflect.TypeOf(child)
    fv := reflect.ValueOf(child).Convert(to).Interface()

    //tableview := fv.Type().In(0)
    //var tableview TableView
    //tableview := child.Cursor()

    //fmt.Print(child)

    //fmt.Println(tableview)

    fmt.Println(to)
    fmt.Println(fv)



    //r := fv.InterfaceData()
    //fmt.Println(r)
    //fmt.Println(reflect.ValueOf(child).Convert(fv))

    file, err := os.Create(""C:/Dev/xampp/htdocs/workspace/SampleGoProject/src/main/task2.json"")
    if err != nil {
        log.Fatal(err)
    }

    defer file.Close()

    //var tasks []Task

    encoder := json.NewEncoder(file)

    err = encoder.Encode(fv)
    if err != nil {
        log.Fatal(err)
    }

}

type MyMainWindow struct {
    *walk.MainWindow
    prevFilePath string
}

func main() {

    model := NewTaskModel()

    mw := new (MyMainWindow)

    var openAction, saveAction *walk.Action

    if err:= (MainWindow{
        AssignTo: &mw.MainWindow,
        Title: ""WBS"",
        MenuItems: []MenuItem{
            Menu {
                Text: ""&File"",
                Items: []MenuItem{
                    Action{
                        AssignTo: &openAction,
                        Text: ""&Open"",
                        OnTriggered: mw.openAction_Triggered,
                    },
                    Action{
                        AssignTo: &saveAction,
                        Text: ""&Save"",
                        OnTriggered: mw.saveAction_Triggered,
                    },
                    Separator{},
                    Action{
                        Text: ""&Exit"",
                        OnTriggered: func() {
                            mw.Close()  
                        },
                    },
                },
            },
        },
        MinSize: Size{800, 400},
        Layout: VBox{},
        Children: []Widget{
            TableView {
                Columns: []TableViewColumn{
                    {Title: ""Task Id""},
                    {Title: ""Task No""},
                    {Title: ""Task Name""},
                    {Title: ""Man Day""},
                    {Title: ""Term""},
                    {Title: ""Man Day Day""},
                    {Title: ""Start Date""},
                    {Title: ""End Date""},
                    {Title: ""Progress""},
                },
                Model: model,
            },
        },
    }.Create()); err != nil {
        //fmt.Print(err)
        //log.Fatal(err)

    }

    mw.Run()
}

func (mw *MyMainWindow) openAction_Triggered() {
    if err := mw.openFile(); err != nil {
        log.Print(err)
    }
}

func (mw *MyMainWindow) openFile() error {
    dlg := new(walk.FileDialog)

    dlg.FilePath = mw.prevFilePath
    dlg.Filter = ""JSON Files|*.json""
    dlg.Title = ""Select a json file""

    if ok, err := dlg.ShowOpen(mw); err != nil {
        return err
    } else if !ok {
        return nil
    }

    mw.prevFilePath = dlg.FilePath

    read(mw.prevFilePath)

    return nil
}

func (mw *MyMainWindow) saveAction_Triggered() {
    if err := mw.saveFile(); err != nil {
        log.Print(err)
    }
}

func (mw *MyMainWindow) saveFile() error {
    dlg := new(walk.FileDialog)

    dlg.FilePath = mw.prevFilePath
    dlg.Filter = ""JSON Files|*.json""
    dlg.Title = ""Input a json file name""

    if ok, err := dlg.ShowSave(mw); err != nil {
        return err
    } else if !ok {
        return nil
    }

    mw.prevFilePath = dlg.FilePath

    write(mw.prevFilePath, mw)

    return nil
}
",6747
501,31386044,"package main

import (
    ""net/http""
)

func main() {
    http.HandleFunc(""/"", func(w http.ResponseWriter, req *http.Request) {
        w.Write([]byte(""Hello World""))
    })
    http.ListenAndServe("":80"", nil)
}
",213
502,31386044,"$ nproc
1
",10
503,31386044,"$ ab -n 10000 -c 1000 http://127.0.0.1/
",40
504,31386044,"Concurrency Level:      1000
Time taken for tests:   1.467 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      1280000 bytes
HTML transferred:       110000 bytes
Requests per second:    6815.42 [#/sec] (mean)
Time per request:       146.726 [ms] (mean)
Time per request:       0.147 [ms] (mean, across all concurrent requests)
Transfer rate:          851.93 [Kbytes/sec] received    
",446
505,31386044,"$ wrk -t1 -c1000 -d5s http://127.0.0.1:80/
",43
506,31386044,"Running 5s test @ http://127.0.0.1:80/
  1 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    32.32ms   15.79ms 279.10ms   77.01%
    Req/Sec    24.61k     1.89k   27.77k    64.58%
  121709 requests in 5.01s, 14.86MB read
Requests/sec:  24313.72
Transfer/sec:      2.97MB
",317
507,31386044,"$ nproc
2
",10
508,31386044,"$ ab -n 10000 -c 1000 http://127.0.0.1/
",40
509,31386044,"Concurrency Level:      1000
Time taken for tests:   1.247 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      1280000 bytes
HTML transferred:       110000 bytes
Requests per second:    8021.12 [#/sec] (mean)
Time per request:       124.671 [ms] (mean)
Time per request:       0.125 [ms] (mean, across all concurrent requests)
Transfer rate:          1002.64 [Kbytes/sec] received   
",446
510,31386044,"$ wrk -t1 -c1000 -d5s http://127.0.0.1:80/
",43
511,31386044,"Running 5s test @ http://127.0.0.1:80/
  1 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    37.04ms    5.67ms  64.92ms   79.73%
    Req/Sec    26.98k     1.97k   29.71k    66.00%
  134040 requests in 5.06s, 16.36MB read
Requests/sec:  26481.38
Transfer/sec:      3.23MB   
",320
512,31386044,"$ wrk -t2 -c1000 -d5s http://127.0.0.1:80/
",43
513,31386044,"Running 5s test @ http://127.0.0.1:80/
  2 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    29.32ms   29.21ms 505.22ms   98.47%
    Req/Sec    13.48k     2.11k   18.16k    63.00%
  134121 requests in 5.03s, 16.37MB read
Requests/sec:  26680.46
Transfer/sec:      3.26MB       
",324
514,31386044,"$ nproc
4
",10
515,31386044,"$ ab -n 10000 -c 1000 http://127.0.0.1/
",40
516,31386044,"Concurrency Level:      1000
Time taken for tests:   1.301 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      1280000 bytes
HTML transferred:       110000 bytes
Requests per second:    7683.90 [#/sec] (mean)
Time per request:       130.142 [ms] (mean)
Time per request:       0.130 [ms] (mean, across all concurrent requests)
Transfer rate:          960.49 [Kbytes/sec] received
",442
517,31386044,"$ wrk -t1 -c1000 -d5s http://127.0.0.1:80/
",43
518,31386044,"Running 5s test @ http://127.0.0.1:80/
  1 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    36.84ms    5.78ms  58.23ms   77.43%
    Req/Sec    26.69k     2.06k   30.19k    64.00%
  132604 requests in 5.06s, 16.19MB read
Requests/sec:  26207.42
Transfer/sec:      3.20MB   
",320
519,31386044,"$ wrk -t4 -c1000 -d5s http://127.0.0.1:80/
",43
520,31386044,"Running 5s test @ http://127.0.0.1:80/
  4 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    35.58ms   26.65ms 508.77ms   98.44%
    Req/Sec     5.82k     2.21k   10.44k    64.85%
  117089 requests in 5.10s, 14.29MB read
Requests/sec:  22972.33
Transfer/sec:      2.80MB   
",320
521,31386044,"package main

import (
    ""net/http""
    ""runtime""
)

func main() {

    runtime.GOMAXPROCS(4)

    http.HandleFunc(""/"", func(w http.ResponseWriter, req *http.Request) {
        w.Write([]byte(""Hello World""))
    })
    http.ListenAndServe("":80"", nil)
}
",255
522,31386044,"$ wrk -t1 -c1000 -d5s http://127.0.0.1:80/
",43
523,31386044,"Running 5s test @ http://127.0.0.1:80/
  1 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    11.00ms    4.33ms  53.58ms   83.83%
    Req/Sec    48.65k     3.30k   55.18k    81.25%
  242131 requests in 5.08s, 29.56MB read
Requests/sec:  47658.92
Transfer/sec:      5.82MB
",317
524,31386044,"$ wrk -t4 -c1000 -d5s http://127.0.0.1:80/
",43
525,31386044,"Running 5s test @ http://127.0.0.1:80/
  4 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    15.47ms    8.49ms  99.35ms   80.88%
    Req/Sec    14.98k     2.98k   27.42k    78.65%
  298885 requests in 5.10s, 36.48MB read
Requests/sec:  58639.84
Transfer/sec:      7.16MB
",317
526,31386044,"$ ab -n 10000 -c 1000 http://127.0.0.1/
",40
527,31386044,"Concurrency Level:      1000
Time taken for tests:   1.410 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      1280000 bytes
HTML transferred:       110000 bytes
Requests per second:    7094.18 [#/sec] (mean)
Time per request:       140.961 [ms] (mean)
Time per request:       0.141 [ms] (mean, across all concurrent requests)
Transfer rate:          886.77 [Kbytes/sec] received
",442
528,31452129,"GET     /public/*filepath                             StaticVersionbasedCacheInvalidator.Serve(""public"")
",105
529,31452129,"package controllers

import (
    ""github.com/revel/revel""
    ""os""
    fpath ""path/filepath""
    ""strings""
    ""syscall""
)

type StaticVersionbasedCacheInvalidator struct {
    *revel.Controller
}

// This method handles requests for files. The supplied prefix may be absolute
// or relative. If the prefix is relative it is assumed to be relative to the
// application directory. The filepath may either be just a file or an
// additional filepath to search for the given file. This response may return
// the following responses in the event of an error or invalid request;
//   403(Forbidden): If the prefix filepath combination results in a directory.
//   404(Not found): If the prefix and filepath combination results in a non-existent file.
//   500(Internal Server Error): There are a few edge cases that would likely indicate some configuration error outside of revel.
//
// Note that when defining routes in routes/conf the parameters must not have
// spaces around the comma.
//   Bad:  StaticVersionbasedCacheInvalidator.Serve(""public/img"", ""favicon.png"")
//   Good: StaticVersionbasedCacheInvalidator.Serve(""public/img"",""favicon.png"")
//
// Examples:
// Serving a directory
//   Route (conf/routes):
//     GET /public/{filepath} StaticVersionbasedCacheInvalidator.Serve(""public"")
//   Request:
//     public/js/sessvars.js
//   Calls
//     StaticVersionbasedCacheInvalidator.Serve(""public"",""js/sessvars.js"")
//
// Serving a file
//   Route (conf/routes):
//     GET /favicon.ico StaticVersionbasedCacheInvalidator.Serve(""public/img"",""favicon.png"")
//   Request:
//     favicon.ico
//   Calls:
//     StaticVersionbasedCacheInvalidator.Serve(""public/img"", ""favicon.png"")
func (c StaticVersionbasedCacheInvalidator) Serve(prefix, filepath string) revel.Result {

    firstSplice := strings.Index(filepath,""/"")
    if(firstSplice != -1) {
            filepath = filepath[firstSplice:len(filepath)];
    }

    // Fix for #503.
    prefix = c.Params.Fixed.Get(""prefix"")
    if prefix == """" {
        return c.NotFound("""")
    }

    return serve(c, prefix, filepath)
}

// This method allows modules to serve binary files. The parameters are the same
// as StaticVersionbasedCacheInvalidator.Serve with the additional module name pre-pended to the list of
// arguments.
func (c StaticVersionbasedCacheInvalidator) ServeModule(moduleName, prefix, filepath string) revel.Result {
    // Fix for #503.
    prefix = c.Params.Fixed.Get(""prefix"")
    if prefix == """" {
        return c.NotFound("""")
    }

    var basePath string
    for _, module := range revel.Modules {
        if module.Name == moduleName {
            basePath = module.Path
        }
    }

    absPath := fpath.Join(basePath, fpath.FromSlash(prefix))

    return serve(c, absPath, filepath)
}


// This method allows StaticVersionbasedCacheInvalidator serving of application files in a verified manner.
func serve(c StaticVersionbasedCacheInvalidator, prefix, filepath string) revel.Result {
    var basePath string
    if !fpath.IsAbs(prefix) {
        basePath = revel.BasePath
    }

    basePathPrefix := fpath.Join(basePath, fpath.FromSlash(prefix))
    fname := fpath.Join(basePathPrefix, fpath.FromSlash(filepath))
    // Verify the request file path is within the application's scope of access
    if !strings.HasPrefix(fname, basePathPrefix) {
        revel.WARN.Printf(""Attempted to read file outside of base path: %s"", fname)
        return c.NotFound("""")
    }

    // Verify file path is accessible
    finfo, err := os.Stat(fname)
    if err != nil {
        if os.IsNotExist(err) || err.(*os.PathError).Err == syscall.ENOTDIR {
            revel.WARN.Printf(""File not found (%s): %s "", fname, err)
            return c.NotFound(""File not found"")
        }
        revel.ERROR.Printf(""Error trying to get fileinfo for '%s': %s"", fname, err)
        return c.RenderError(err)
    }

    // Disallow directory listing
    if finfo.Mode().IsDir() {
        revel.WARN.Printf(""Attempted directory listing of %s"", fname)
        return c.Forbidden(""Directory listing not allowed"")
    }

    // Open request file path
    file, err := os.Open(fname)
    if err != nil {
        if os.IsNotExist(err) {
            revel.WARN.Printf(""File not found (%s): %s "", fname, err)
            return c.NotFound(""File not found"")
        }
        revel.ERROR.Printf(""Error opening '%s': %s"", fname, err)
        return c.RenderError(err)
    }
    return c.RenderFile(file, revel.Inline)
}
",4470
530,31516808,ctrl+shift+p,12
531,31516808,cmd+shift+p,11
532,31516808,Package Control: Install Package,32
533,31516808,GoSublime,9
534,31516808,"MarGo: Missing required environment variables: GOPATH
See the `Quirks` section of USAGE.md for info 
",101
535,31516808,usage.md,8
536,31516808,"Usage
=====

Note
----

* Unless otherwise mentioned, `super` replaces `ctrl` in key bindings on OS X.
* A mention of a (GO)PATH variable uses a colon(`:`) as the separator.
This is the PATH separator on Linux and OS X, Windows uses a semi-colon(`;`)

Settings
--------

You may customize GoSublime's behaviour by (creating and) customizing the file `Packages/User/GoSublime.sublime-settings`. Default settings are documented in `Packages/GoSublime/GoSublime.sublime-settings`. **WARNING** Do not edit any package file outside of `Packages/User/`, including files inside `Packages/GoSublime/` unless you have a reason to. These files are subject to being overwritten on update of the respective package and/or Sublime Text itself. You may also inadvertently prevent the respective package from being able to update via git etc.

Quirks
------

This section assumes you know what `GOPATH` is and how to set it. If you don't, please see http://golang.org/doc/code.html

In some systems, environment variables are not passed around as expected.
The result of which is that some commands e.g `go build` don't work
as the command cannot be found or `GOPATH` is not set. To get around this
the simplest thing to do is to set these variables in the settings file.
See the documentation for the `env` and/or `shell` setting, both documented in the default
settings file `Packages/User/GoSublime.sublime-settings`

Code Completion
---------------

Completion can be accessed by typing the (default) key combination `CTRL+[SPACE]` inside a Golang file.

Key Bindings
------------

By default, a number of key bindings are provided. They can be viewed by opening the command palette
and typing `GoSublime:` or via the key binding `ctrl+dot`,`ctrl+dot` (or `super+dot`,`super+dot` on OS X).
Wherever I refer to a key binding with `ctrl+` it is by default defined as `super+` on OS X unless stated otherwise.

Useful Key Bindings
-------------------

Often when commenting out a line, the immediate action following this is to move the cursor to the next line either to continue working or comment out the following line.

With this key binding, you can have the line commented out and the cursor automatically moved to the next line.

{ ""keys"": [""ctrl+/""], ""command"": ""gs_comment_forward"", ""context"": [{ ""key"": ""selector"", ""operator"": ""equal"", ""operand"": ""source.go"" }] },

Package Imports
---------------

Pressing `ctrl+dot`,`ctrl+p` will open the package list from which you can quickly import or delete a package import.
The usage is the same for both operations. If the package is already imported then it will appear near the top
and be marked as a *delete* operation, so in effect it is a toggle. If you want to edit the alias of a package e.g
a database driver: first import the package as normal and then press `ctrl+dot`,`ctrl+i` to quickly jump
the last imported package. Once edited you can return to where you were by pressing `ctrl+dot`,`ctrl+[`

Building, Testing and the Go command
------------------------------------

GoSublime comes with partial command/shell integration `9o`. For more information about 9o, see Packages/GoSublime/9o.md
or from within Sublime Text press `ctrl+9` or `super+9` and type `help`.

To run package tests you have 3 options.

* press `ctrl+dot`,`ctrl+t` to open the testing quick panel. This offers basic/common options such
as running all benchmark functions or running a single test function.

* inside a `_test.go` file, press `ctrl+shift` and left-click on the name of a Test, Benchmark or Example
function e.g. `TestAbc` to execute that function only.

* if the above options are too minimalistic or you would otherwise like to call `go test` with your own options,
open 9o by pressing `ctrl+9` where you have access to the `go` command.

In the case of building a package, 9o provides a replay command (see 9o.md for details) that will execute
the command if the pkg is a command pkg (package main) or run all tests if it's a normal pkg.
The replay command is bound to `ctrl+dot`,`ctrl+r` for easy access.

GoSublime provides an override for the Sublime Text build-system via `ctrl+b`. In the menu `Tools > Build System` it's named `GoSublime`.
`ctrl+b` is automatically handled by Sublime Text, so if you have another `Go` build system chosen, `ctrl+b`
will execute that instead. To access the `GoSublime` build system directly press `ctrl+dot`,`ctrl+b`.
This build system simply opens 9o and expand the last command. i.e. executes the 9o command `^1`.

Per-project Settings & Project-based GOPATH
-------------------------------------------

If you have a settings object called `GoSublime` in your project settings its values will override those
inside the `GoSublime.sublime-settings` file. As a side-effect you may set a specific GOPATH for a single
project.

`my-project.sublime-project`

    {
        ""settings"": {
            ""GoSublime"": {
                ""env"": {
                    ""GOPATH"": ""$HOME/my-project""
                }
            }
        },
        ""folders"": []
    }

If the only setting you use this functionality to change is the GOPATH, then you may be able to find
success by adding the string `$GS_GOPATH` to your global `GOPATH` setting e.g.

    {
        ""env"": { ""GOPATH"": ""$HOME/go:$GS_GOPATH"" }
    }


`GS_GOPATH` is a pseudo-environment-variable. It's changed to match a possible GOPATH based on:

* the current working directory, e.g. `~/go/src/pkg` then `$GS_GOPATH` will be `~/go/`

* or the path the current `.go` file (or last activated `.go` file if the current file is not `.go`) e.g. if your file path is `/tmp/go/src/hello/main.go` then it will be `/tmp/go`

If you would like to use `GS_GOPATH` exclusively, you may set the option `use_gs_gopath` to true.
This automatically changes `GOPATH` to the value of `$GS_GOPATH` if `$GS_GOPATH` is not empty.
This allows you to e.g. automatically adapt `GOPATH` to your current project rather than
reverting to your normal `GOPATH`.

Lint/Syntax Check
-----------------

The source is continuously scanned for syntax errors. GoSublime will try to catch some common errors, like
forgetting to call flag.Parse (if this causes false positives, please file a bug report).

Apart from the highlighting in the view using a dot icon in the gutter and usually underlining the
first character of an error region. You are given an entry in the status bar in the form: `GsLint (N)`
where `N` is the number of errors found in that file. You can show the list of errors and navigate to
them by pressing `ctrl+dot`,`ctrl+e`. Errors for the current line are shown in the status bar.

Fmt
---

By default `ctrl+s` and `ctrl+shift+s` are overridden to fmt the the file before saving it. You may also
fmt a file without saving it by pressing `ctrl+dot`,`ctrl+f`

Godoc/Goto Definition
---------------------

To show the source and associated comments(documentation) of a variable press `ctrl+dot`,`ctrl+h` or
using the mouse `ctrl+shift+right-click`. This will show an output panel that presents the full
definition of the variable or function under the (first) cursor along with its comments.
To goto the definition instead, press `ctrl+dot`,`ctrl+g` or alternatively using the mouse `ctrl+shift+left-click`.

Declarations/Code Outline?
--------------------------

A very minimal form of code outline is provided. You can press `ctrl+dot`,`ctrl+d` to list all the declarations
in the current file.

New File
--------

Pressing `ctrl+dot`,`ctrl+n` will create a new Go file with the package declaration filled out.
It will try to be intelligent about it, so if the current directory contains package `mypkg` it will use that as the package name.

Misc. Helper Commands
---------------------

The following commands can be assigned key bindings to further improve your editing experience.

* gs_fmt - this command runs `gofmt` on the current buffer. Also available via the key binding `ctrl+dot`,`ctrl+f`.

* gs_fmt_save, gs_fmt_prompt_save_as - these commands will run the `go_fmt` followed by `save` or `prompt_save_as` - these are bound to `ctrl+s` and `ctrl+shift+s` respectively, by default.

* gs_comment_forward - this command will activate the `ctrl+/` commenting and move the cursor to the next line, allowing you to comment/uncomment multiple lines in sequence without breaking to move the cursor. You can replace the default behaviour by overriding it in your user key bindings (Preferences > Key Bindings - User) with `{ ""keys"": [""ctrl+/""], ""command"": ""gs_comment_forward"", ""context"": [{ ""key"": ""selector"", ""operator"": ""equal"", ""operand"": ""source.go"" }] }`
",8584
537,31516808,export GOPATH=$HOME/code/go,27
538,31592548,"Following is what I could come up with from whatever I read across the net.
Working on local secondary indexes, range index and timestamps presently.
Thanks again!    


    package main

    import (
        ""github.com/aws/aws-sdk-go/aws""
        // ""github.com/aws/aws-sdk-go/aws/awserr""
        ""github.com/aws/aws-sdk-go/aws/awsutil""
        ""github.com/aws/aws-sdk-go/service/dynamodb""

        ""log""
        ""strconv""
        ""time""
    )

    type dynamo struct {
        db            *dynamodb.DynamoDB
        tableName     string
        readCapacity  int64
        writeCapacity int64
    }

    type metadata struct {
        dynamoDb  *dynamo
        batchID   string
        field1    string
        field2    string
        batchSize int //In Bytes
    }

    func newDynamo(name string, readCapacity, writeCapacity int64) *dynamo {
        cfg := aws.DefaultConfig
        return &dynamo{
            db:            dynamodb.New(cfg),
            tableName:     name,
            readCapacity:  readCapacity,
            writeCapacity: writeCapacity,
        }
    }

    func newMetadata(batchID, field1Val, field2Val string, batchSizeVal int) *metadata {
        return &metadata{
            batchID:   batchID,
            field1:    field1Val,
            field2:    field2Val,
            batchSize: batchSizeVal,
        }
    }

    var dynDB *dynamo
    var m *metadata

    func main() { //create the *metadata struct object, and it can then call writeToDynamo fn
        log.Println(""Entry"")

        dynDB = newDynamo(""tableName"", 1, 1) //make a new dynamo struct object
        dynDB.createTable()

        m = newMetadata(""field1Value"", ""field2Value"", 232)
        m.setDynamoDB()

        m.writeToDynamo()

        log.Println(""Exit"")
    }

    func (d *dynamo) createTable() (err error) {
        log.Println(""createTable Entry"")
        tableDefinition := &dynamodb.CreateTableInput{
            TableName: aws.String(d.tableName),
            AttributeDefinitions: []*dynamodb.AttributeDefinition{ // Required
                { // Required
                    AttributeName: aws.String(""batchID""),
                    AttributeType: aws.String(""S""), // Required
                },
            },
            KeySchema: []*dynamodb.KeySchemaElement{ // Required
                { // Required
                    AttributeName: aws.String(""batchID""),
                    KeyType:       aws.String(""HASH""), // Required
                },
            },
            ProvisionedThroughput: &dynamodb.ProvisionedThroughput{
                ReadCapacityUnits:  aws.Long(d.readCapacity),
                WriteCapacityUnits: aws.Long(d.writeCapacity),
            },
        }

        resp, err := dynDB.db.CreateTable(tableDefinition)
        log.Println(""After CreateTable---"")

        if err != nil {
            log.Println(""create table failed"", err.Error())
            return err
        }
        if resp != nil && resp.TableDescription != nil {
            log.Println(""TableStatus:"", resp.TableDescription.TableStatus)
        }

        log.Println(""CreateTable Exit"")

        //Sleep for 15 seconds, this is better when put in a function that validates the table that was created,
        //But for testing, the program is put to sleep for 15 seconds. Program may fail if writeToDynamo is exedcuted
        //without the table being in ACTIVE state.
        time.Sleep(15 * time.Second)
        return
    }

    func (m *metadata) writeToDynamo() {
        log.Println(""writeToDynamo"")

        //Not exactly able to figure out what was wrong with the prev code snippet
        params := &dynamodb.PutItemInput{
            TableName: aws.String(m.dynamoDb.tableName),
            Item: map[string]*dynamodb.AttributeValue{
                ""batchID"": &dynamodb.AttributeValue{
                    S: aws.String(m.batchID),
                },
                ""field2"": &dynamodb.AttributeValue{
                    S: aws.String(m.field2),
                },
                ""field3"": &dynamodb.AttributeValue{
                    S: aws.String(m.field3),
                },
                ""batchSize"": &dynamodb.AttributeValue{
                    N: aws.String(strconv.Itoa(m.batchSize_Compressed)),
                },
            },
        }

        resp2, err2 := dynDB.db.PutItem(params)

        if err2 != nil {
            // if awsErr, ok := err2.(awserr.Error); ok { // Generic AWS error with Code, Message, and original error (if any)
            //  log.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
            //  if reqErr, ok := err.(awserr.RequestFailure); ok {
            //      // A service error occurred
            //      log.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
            //  }
            // } else { // This case should never be hit, the SDK should always return an //
            //  //error which satisfies the awserr.Error interface.
            //  log.Println(err2.Error())
            // }
            log.Println(""Error while Writing:"", err2.Error())
        }
        log.Println(""Response:"", awsutil.StringValue(resp2))
    }

    func (m *metadata) setDynamoDB() {
        m.dynamoDb = dynDB
    }
",5243
539,31611616,"// Pack a folder into zip file
func (cloud *Cloud) Pack(srcFolder string, fileName string, contentType string, metaData *map[string]string) {

    log.Infof(cloud.c, ""Packing bucket %v folder %v to file %v"", cloud.bucket, srcFolder, fileName) 

    srcFolder = fmt.Sprintf(""%v/"", srcFolder)
    query := &storage.Query{Prefix: srcFolder, Delimiter: ""/""}

    objs, err := storage.ListObjects(cloud.ctx, cloud.bucket, query)
    if err != nil {
        log.Errorf(cloud.c, ""Packing failed to list bucket %q: %v"", cloud.bucket, err)
        return
    }

    totalFiles := len(objs.Results)
    if totalFiles == 0 {
        log.Errorf(cloud.c, ""Packing failed to find objects found in folder %q: %v"", cloud.bucket, srcFolder)
        return
    }

    // create storage file for writing
    log.Infof(cloud.c, ""Writing new zip file to %v/%v for %v files"", cloud.bucket, fileName, totalFiles)
    storageWriter := storage.NewWriter(cloud.ctx, cloud.bucket, fileName)

    // add optional content type and meta data  
    if len(contentType) > 0 { storageWriter.ContentType = contentType }
    if metaData != nil { storageWriter.Metadata = *metaData }

    // Create a buffer to write our archive to.
    buf := new(bytes.Buffer)

    // Create a new zip archive to memory buffer
    zipWriter := zip.NewWriter(buf)

    // go through each file in the folder
    for _, obj := range objs.Results {

        log.Infof(cloud.c, ""Packing file %v of size %v to zip file"", obj.Name, obj.Size)
        //d.dumpStats(obj)

        // read file in our source folder from storage - io.ReadCloser returned from storage
        storageReader, err := storage.NewReader(cloud.ctx, cloud.bucket, obj.Name)
        if err != nil {
            log.Errorf(cloud.c, ""Packing failed to read from bucket %q file %q: %v"", cloud.bucket, obj.Name, err)
            return  
        }
        defer storageReader.Close()

        // PERFORMANCE ISSUE: have to load the entire file into memory to get random access from the cloud
        slurp, err := ioutil.ReadAll(storageReader)
        if err != nil {
            log.Errorf(cloud.c, ""Packing failed to read data from bucket %q file %q: %v"", cloud.bucket, obj.Name, err)
            return
        }

        // grab just the filename from directory listing (don't want to store paths in zip)
        _, zipFileName := filepath.Split(obj.Name)

        newFileName := strings.ToLower(zipFileName)

        // add filename to zip
        zipFile, err := zipWriter.Create(newFileName)
        if err != nil {
            log.Errorf(cloud.c, ""Packing failed to create zip file from bucket %q file %q: %v"", cloud.bucket, zipFileName, err)
            return
        }

        // write entire file into zip archive
        _, err = zipFile.Write(slurp)
        if err != nil {
            log.Errorf(cloud.c, ""Packing failed to write zip file from bucket %q file %q: %v"", cloud.bucket, zipFileName, err)
            return
        }

        // flush that to buffer so we can write it off now
        //err = zipFile.Flush()
        //if err != nil {
        //  d.errorf(""pack: unable to flush write of zip file from bucket %q, file %q: %v"", cloud.bucket, zipFileName, err)
        //  //return
        //}

        // now drain all that buffered zip data to the cloud storage file   
        log.Infof(cloud.c, ""Writing zip buffer of size %v to cloud storage file %v"", buf.Len(), fileName)   
        _, err = buf.WriteTo(storageWriter)
        if err != nil {
            log.Errorf(cloud.c, ""Packing failed to write data to bucket %q file %q: %v"", cloud.bucket, fileName, err)   
            return          
        }
    }

    // Make sure to check the error on Close.
    log.Infof(cloud.c, ""Closing zip writer"")    
    err = zipWriter.Close()
    if err != nil {
        log.Errorf(cloud.c, ""Packing failed to close zip file writer from bucket %q file %q : %v"", cloud.bucket, fileName, err)
    }

    // write any leftover data
    if buf.Len() > 0 {
        // now drain all that buffered zip data to the cloud storage file   
        // log.Infof(cloud.c, ""Packing zip buffer of size %v to cloud storage file %v"", buf.Len(), fileName)    
        _, err := buf.WriteTo(storageWriter)
        if err != nil {
            log.Errorf(cloud.c, ""Packing failed to write data to bucket %q file %q: %v"", cloud.bucket, fileName, err)               
        }
    }

    // close up final write file
    //log.Infof(cloud.c, ""Closing cloud storage file %v"", fileName) 
    if err := storageWriter.Close(); err != nil {
        log.Errorf(cloud.c, ""Packing failed to close bucket %q file %q: %v"", cloud.bucket, fileName, err)
        return
    }

    // success!
    log.Infof(cloud.c, ""Packed files to new cloud storage file %v successful!"", fileName)   
}
",4783
540,31708934,Accept(),8
541,31708934,"package main

import (
    ""crypto/tls""
    ""fmt""
    ""net""
    ""time""
)

type Service struct {
    listener net.Listener
}

func (serv *Service)Listen(port int64) (err error) {
    rsaCertPEM := `-----BEGIN CERTIFICATE-----
MIIGKjCCBBKgAwIBAgIJAOaBs5/Gdk7RMA0GCSqGSIb3DQEBBQUAMGsxHzAdBgNV
BAMTFlhhdmllcnMtTUJQIGhlbGxvd29ybGQxEjAQBgNVBAoTCVNDQU1QIEluYzEL
MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExEjAQBgNVBAcTCVNhbiBE
aWVnbzAeFw0xNTA3MjcxNzMyNDNaFw0yNTA3MjQxNzMyNDNaMGsxHzAdBgNVBAMT
FlhhdmllcnMtTUJQIGhlbGxvd29ybGQxEjAQBgNVBAoTCVNDQU1QIEluYzELMAkG
A1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExEjAQBgNVBAcTCVNhbiBEaWVn
bzCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAOMiK19vGbRH7Y40jC3E
B+r2NNeEO9BIB8umzAs0uh1hRxEWYgdYwOvmEeuUQgimHbJ7Neh8IKjUiD529Ir0
rxNwhmu3AxFJf5hBC9Ix5nO2oVjIPdCVX+1CL9BJvmYyRlV5cq5WukTeYuSLG/tB
h9fARwIhcR9HrjYYb6LtMUX0oIlHQytDRn9pM27TfoR6ad3dwZdRpf9kQH4x467d
rBiRvRnBx5JBCE/cpFg7fQtrsrurn6tmMR/WMpv8GU0dLGEMCs/Te1bwH3XHDwNZ
mLVukfIhyWU/hXNzbggar0wk3ZqJrEeDm8zQJ73ywhs4D8AY+UX3V+1SBah45U+f
S9fZi7yi8XoCuEHTZoYU3hVcSP3Yqx1aZS5D7rx2X+T5XrJxy8FHiRX1LEPWKzz+
3x3+s9UcCIFz9xlAm0tM6ZjzeOcXhadSd+zTNngfQcwOPbPbyTM4Z9RD2VDPtfvV
eqJ82ZOGVWWkBFElZV6I5idRDph4/eEvO1Ij02C6oJJbyfbXzuMAgGVch8oMd65S
mVLppAT2uiNYebWp2Q2TleShNiv7AhvnV0saEfuCtX6fsryzogOMsEXiK+EqAZ3c
QUT+9hdIrwGWEOcx4Dpm2Tzh2QDIzmPVKIJ/PHPZgVq/zkc03ThuSRGYiNgz0YY4
AWsPtAVVZafh3ZcnPjP8OocxAgMBAAGjgdAwgc0wHQYDVR0OBBYEFOePjJeN13Rm
AzPVb/Tcp8x1gGh6MIGdBgNVHSMEgZUwgZKAFOePjJeN13RmAzPVb/Tcp8x1gGh6
oW+kbTBrMR8wHQYDVQQDExZYYXZpZXJzLU1CUCBoZWxsb3dvcmxkMRIwEAYDVQQK
EwlTQ0FNUCBJbmMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRIw
EAYDVQQHEwlTYW4gRGllZ2+CCQDmgbOfxnZO0TAMBgNVHRMEBTADAQH/MA0GCSqG
SIb3DQEBBQUAA4ICAQDTlOdkKl1VT+VleeORUU3vVfeNGmiWrd88v6JlUxdYBU2o
YfQgVzPijxy9EGdgdaw/BPI0ypMn/DQ5hOcAHtHWCn7hHnRGTM4GMqZ6TOwexUyh
W02QFdwnB5jKQ3HNokp43NnoxAxEFnd6m27O39unwbq49Tt16HfEeUXMbXQabV6I
fZy7YsulamH0M5eZ2qtX25BkuYV1d4PpnahKWGRRvdg9jEszMfksI/tmv8CDmCi4
3cOS2c6i86XF3Cx+SlNPhJ7YpQK8IVxE3xzRMCf2kiA2vdb7DhVz4N5ZBzZYX5qD
HkYdjTdj4I6jtdeeNKqrEMV2Q3/X2Mdp0jp8dcK8WO7jXSIBvo4GO5797ok5mbQT
om0xvBljFkkyTuWJLUJslg9N7IyXCYZXLXpUvm40J+fXMNnd6lGbygNSrKFyjdDX
x5r9XCAKmtRteZSVpknN1eE5Gl5naY6iZrxXeeNlCG8x6a2XaQM6/0/XhSEZnGog
XiiirE3s5xZnWVRqOwx7iihs9I4mdHNj9kFdsB3vPjlMfbiQl+GbLIaF16H+LFP2
ArBiqwKM5kOcA3kT0XMm1rvxHZrpEACGf2zRhuBlZRyP96KPp49A4FpVHjsYweI8
DkIeTJpAsCXxgqDCw0P8xfhM5gP/ILmWgOIGj0+E/8OTgL3J85Jg8rmIo86mSg==
-----END CERTIFICATE-----`

 var rsaKeyPEM = `-----BEGIN RSA PRIVATE KEY-----
MIIJKQIBAAKCAgEA4yIrX28ZtEftjjSMLcQH6vY014Q70EgHy6bMCzS6HWFHERZi
B1jA6+YR65RCCKYdsns16HwgqNSIPnb0ivSvE3CGa7cDEUl/mEEL0jHmc7ahWMg9
0JVf7UIv0Em+ZjJGVXlyrla6RN5i5Isb+0GH18BHAiFxH0euNhhvou0xRfSgiUdD
K0NGf2kzbtN+hHpp3d3Bl1Gl/2RAfjHjrt2sGJG9GcHHkkEIT9ykWDt9C2uyu6uf
q2YxH9Yym/wZTR0sYQwKz9N7VvAfdccPA1mYtW6R8iHJZT+Fc3NuCBqvTCTdmoms
R4ObzNAnvfLCGzgPwBj5RfdX7VIFqHjlT59L19mLvKLxegK4QdNmhhTeFVxI/dir
HVplLkPuvHZf5PlesnHLwUeJFfUsQ9YrPP7fHf6z1RwIgXP3GUCbS0zpmPN45xeF
p1J37NM2eB9BzA49s9vJMzhn1EPZUM+1+9V6onzZk4ZVZaQEUSVlXojmJ1EOmHj9
4S87UiPTYLqgklvJ9tfO4wCAZVyHygx3rlKZUumkBPa6I1h5tanZDZOV5KE2K/sC
G+dXSxoR+4K1fp+yvLOiA4ywReIr4SoBndxBRP72F0ivAZYQ5zHgOmbZPOHZAMjO
Y9Uogn88c9mBWr/ORzTdOG5JEZiI2DPRhjgBaw+0BVVlp+Hdlyc+M/w6hzECAwEA
AQKCAgEAvOnVo1m3yl+s8QM5uHL8luvSxZJBYZoXicYgng1r4zXesxKn1C54v3wr
WYKFbcYkmyepjcV4MJQdAb9U5CJhX8zOsNaWIZG9I3iuiVRhtcqn5j0eVNd44tCT
Di3XxA56u2r4/JI7+T3yiN4/FrrJbqSJKvd/rCGlf27Ro3Se7+1ofOWds2UQRLbO
RZZ4+10JorRn6SDK7WGH1q5ODkpnckP9QWgQQs/+RtZghtZrycz46ujzM88aer1g
eKa0sJPcLpeignsGcifkMsSu8v1Za0Yc84QwixrLN1xBn1H6jV14R6nMdeq78h0L
gQxhb9wwFXlwE0aHhmcbN6XeLFx06fCSskpu8AoBRC1acOEY1uiF3NVAdw3bILX+
jxUh0Qhsb3JoAAIPwqV3SDnqiQi40k8hv6MfCw3Xn6UhyYNHGQBn7cX7llSvo0wF
DvQd0dJHmfBXXldVnhruH2275aqu1qVbPlNmoA6+2gChfOPgSUO9xNQXYc0dvgbl
7UBX/MR8SJlawptb3pwfTv+fBioSodWwfhkbZ0TMVGwSFUHXDN/+VeHoZsafZIog
knyKeE587y4aDcaYsHYYgz/WLjGMfROeUoplZQoBLfis+nTVBA6gCUGOFKynB5/b
ZpoqXxfkroYClVpiDrbJlCzwjnb1CBC49m+fTC4meX4EhqL7ZLECggEBAPvFxenW
GRC6fe05fWJwNi47Qf49Ll2BXipeq9NZlL3Z1j4V/DTcB9xw9HvuilsY4Hy+jQZM
mNOw8xPcPQLZxuG5HKAkuy/YOzWfgQCthAM+9ewQfcg8yEGv4qUx+iMxbR67SW0n
oOK5xGEOyIhnyywhcuicJecoK/8m4mZXryJTZced9oAiGXziEVcPVYqe+JLAea8G
3fqvHQj5EF5IC7q9sohSqSvnILukFmhgdG5xDvNGcVwczw8EO/hzDGT7ZAT1EheA
r29bnn6rxDYWsatOUeXx7qLjPJcH1ZEoQF8YdWvUu4v0wHwIZRB+Ul0soMS1KvP8
RlT5VuspRkby8a0CggEBAObyfKlBWiZWMu4iLxySHoAvxuAVI/7UJI5SCwMLZOtZ
FvNumPfVAS9YdJNnV44en368b8Lk+oBahlrgssTTIHN6eFlS/b7okHlkb6O2ED0v
LingYZ8iELAxeBEhM0sLthjXV2GzshqGTLDSc/SbInKtIZKY9mwAEQn75WH1sGbX
GPixZpS64f3fzV5lXZSb39gx/YAKn6LlrM6pxrOKA947ZIYpCCx+2vVeYS2tWl23
iJaKCdy5GMKb/BOhBA08zWMYVmejB+hRtaFz1wcloDQJvyu3SL2mMV/mU3ERDG2R
+o6K9EEmMnB8xci40EOCMETDXxmeMGnsXQf5bEVeBBUCggEAHtw6CxR8FAnX35j5
XnSEn5wR1bjoEvwFb8oU454KVk76LLgDJvOFXybVQM+XU90zvvaYUJpY7TG2Scvo
Co5pC0fmU1bNPusRLtxzMoMSOFeiSyImWMHihfKqJDeBAolPZ8HrGR8PYFsG0CLA
v7+BLtKWxB5HoxLQecDpZUQAKoPwaMxa54/GcgE/wN0XTht4OnyvLZ343X5TX8Mv
l27bSTNxS7ZeGAyHfZh6Sqbv/o2LGJSc1n6Nfri1JRns/f+2XckwQ4M5fbvMLJif
P0X+1xGNhlLmPj7+MUD7k4RMh5t24RW9O0VvxoQ85w2kyNjsh8/xCOD2OfoqBj8T
5yRmLQKCAQBZA6Wg5xuEIz1GI87cyEURS1jwDbXuBn6AjIbKCZ5AR/pcoYg8HdFz
Gjj0h6RrlsoK4z6AdBlJV5rpdCnzSxz65X11kFNVPfZRk7Cj/QyNSJ4WbfGykEK2
ZprMn2tRxZXORVHcypIfPxxYGwWuhgzk/m4uPt7cCbqHipuDAluXh9iMInRTZySr
4ZMaix9ipCHHBp2auH2HH9dXYIDBurR695FrVG1eGRbz9AiovmRSMudmfpYGiSFO
ASlLt4gEQic3xq2nDGOD29qR/EAo9Qumgws4IlDbKC9nszL+JYAQy28zecNjSQGv
8aeaEgHTw14vYs5I5Xvrl7rT1AMzSWVxAoIBAQCaDhdF/OyysP5WuQYd3v0J1yBM
bYc3y+RxdzCHtdxor5fQvTAN0gtp1KhrCmfoYdW4yUnOQZ6YoRzllERcQyoD2tGm
nEWm5YXQU8WZBGvCNfcL2qAVKZ3g498NJ3NqFMW9u2O1OlCSTRzLYp5Hdsx/7kl/
rzuo3vqtgYQqUkWDps6gjGkr55ztZHMoV6wGH9nf8tD0kqk+U6zIzaxiDj0U8+nr
xtEY4RYeEg1LV1I+kKvhEXx2mlyw7EbHTBXsfr7NdW3i7jFGN+mYywEhAqTlxJds
/IIDg+agTUeg+vYYbPA9nAwlTU1nzkhE3x3Aix/YRrtM70xFEF1v/sg4Oot/
-----END RSA PRIVATE KEY-----`

    cert, err := tls.X509KeyPair([]byte(rsaCertPEM), []byte(rsaKeyPEM))

    config := &tls.Config{
        Certificates: []tls.Certificate{ cert },
    }

    serv.listener,err = tls.Listen(""tcp"", ""127.0.0.1:30101"", config)
    if err != nil {
        return err
    }

    return
}

func (serv *Service)AcceptRequests() {
    for {
        netConn,_ := serv.listener.Accept()
        var tlsConn (*tls.Conn) = netConn.(*tls.Conn)

        certs := tlsConn.ConnectionState().PeerCertificates

        fmt.Printf(""got certs: `%s`\n"", certs)
    }
}

func main() {
    serv := new(Service)
    err := serv.Listen(30100)
    if err != nil {
        fmt.Printf(""go err: `%s`"", err)
        return
    }
    go serv.AcceptRequests()

    time.Sleep(1)

    tlsConn, _ := tls.Dial(""tcp"",""127.0.0.1:30101"", &tls.Config{
        InsecureSkipVerify: true,
    })
    tlsConn.Write([]byte(""hey""))
}
",6551
542,31744832,"package main

import (
    ""code.google.com/p/gcfg""
    ""database/sql""
    ""flag""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
    ""github.com/parnurzeal/gorequest""
    ""log""
    ""strconv""
    ""time""
)

func main() {
    t := time.Now()
    initConfig()
    initRoundRobin()

    for i := vStart; i <= vStop; i++ {
        cache(""https://site.ru/url/""+strconv.Itoa(i), ""url"", i)
    }

    fmt.Println(""Time: "", time.Since(t))
}

var (
    db                  *sql.DB
    config              ConfigStruct
    configFile          = ""config.gcfg""
    roundRobin          map[int]string
    roundRobinNextId    int
    roundRobinMaxId     int
    vStart              int
    vStop               int
    vPart               int
    vScriptCount        int
    roundRobinShift     int
    failedRequestCount  int
    successRequestCount int
)

type ConfigStruct struct {
    Database struct {
        ConnectionString string
        TableNameCache   string
    }
    Part struct {
        CurrentPart             int
        CurrentProxyCheckerPart int
    }
}

type ProxyAddress struct {
    Id int
    Ip string
}

func check(e error) {
    if e != nil {
        panic(e)
        log.Fatal(e)
    }
}
",1202
543,31744832,"func initConfig() {
    if err := gcfg.ReadFileInto(&config, configFile); err != nil {
        check(err)
    }

    connect, err := sql.Open(""mysql"", config.Database.ConnectionString)
    check(err)
    db = connect
    vScriptCount = 100000
    flag.IntVar(&roundRobinShift, ""shift"", 0, """")
    flag.IntVar(&vPart, ""part"", 0, ""select part"")
    flag.IntVar(&vStart, ""start"", (vPart*vScriptCount)+1, ""select start id"")
    flag.IntVar(&vStop, ""stop"", (vPart+1)*vScriptCount, ""select stop id"")

    flag.Parse()
    vStart = vStart + (vPart * vScriptCount)
    vStop = vStop + (vPart * vScriptCount)
    successRequestCount = 0
}
",630
544,31744832,"func initRoundRobin() {
    roundRobin = make(map[int]string)
    rows, err := db.Query(""SELECT id, ip FROM proxies WHERE status = 1 order by id asc"")
    check(err)
    defer rows.Close()
    for rows.Next() {
        pa := new(ProxyAddress)
        if err := rows.Scan(&pa.Id, &pa.Ip); err != nil {
            check(err)
        }
        roundRobin[pa.Id] = pa.Ip
        roundRobinMaxId = pa.Id
    }
    roundRobinNextId = roundRobinShift + successRequestCount
    if roundRobinNextId > roundRobinMaxId {
        roundRobinNextId = 0
    }
    failedRequestCount = 0

}
",576
545,31744832,"func cache(url string, tag string, url_id int) ([]byte, error) {
    var data string
    err := db.QueryRow(""SELECT data FROM cache WHERE url_id=? AND tag=?"", url_id, tag).Scan(&data)
    if err == sql.ErrNoRows {
        data, err := proxyRequest(url)
        check(err)
        insert, err := db.Prepare(""INSERT cache SET url_id=?, url=?, tag=?, data=?, datetime=?"")
        datetime, err := strconv.ParseInt(time.Now().Format(""20060102150405""), 10, 64)
        check(err)
        insert.Exec(url_id, url, tag, data, datetime)
        return []byte(data), nil
    }
    return []byte(data), nil
}
",599
546,31744832,"func proxyRequest(url string) ([]byte, error) {
    for {
        roundRobinCurrentId := getNextRoundRobinId()
        proxy := roundRobin[roundRobinCurrentId]
        request := gorequest.New().Timeout(10000 * time.Millisecond).Proxy(""http://"" + proxy)
        _, body, err := request.Get(url).End()
        if err != nil {
            deleteRoundRobinId(roundRobinCurrentId, err[0].Error())
            continue
        } else {
            successRequestCount++
        }
        return []byte(body), nil
        break
    }
    return []byte(""""), nil
}
",557
547,31744832,"func getNextRoundRobinId() int {
    for {
        if len(roundRobin) == 0 {
            initRoundRobin()
            if len(roundRobin) == 0 {
                fmt.Println(""proxy is ended"")
                time.Sleep(30 * time.Second)
                initRoundRobin()
            }
        }
        if roundRobinNextId == roundRobinMaxId {
            roundRobinNextId = 0
        }
        roundRobinNextId++
        _, ok := roundRobin[roundRobinNextId]
        if ok {
            break
        }
    }
    return roundRobinNextId
}
",537
548,31744832,"func deleteRoundRobinId(roundRobinId int, result string) {
    db.Exec(""update proxies set status = 0, response =? where id=?"", result, roundRobinId)
    delete(roundRobin, roundRobinId)
    failedRequestCount++
    if failedRequestCount == 5 {
        initRoundRobin()
    }
}
",278
549,31744832,"database/sql.(*Stmt).Exec(0x0, 0xc20842be38, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0)
    /usr/local/go/src/database/sql/sql.go:1302 +0x3e1
main.cache(0xc2082f0690, 0x23, 0x355910, 0x9, 0x12775b, 0x0, 0x0, 0x0, 0x0, 0x0)
    /var/go/src/parser/index.go:148 +0x702
main.main()
    /var/go/src/parser/index.go:31 +0x26c

goroutine 5 [chan receive, 213 minutes]:
database/sql.(*DB).connectionOpener(0xc2080446e0)
    /usr/local/go/src/database/sql/sql.go:589 +0x4c
created by database/sql.Open
    /usr/local/go/src/database/sql/sql.go:452 +0x31c

goroutine 17 [syscall, 213 minutes, locked to thread]:
runtime.goexit()
    /usr/local/go/src/runtime/asm_amd64.s:2232 +0x1

goroutine 10854 [IO wait]:
net.(*pollDesc).Wait(0xc2081f2990, 0x72, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:84 +0x47
net.(*pollDesc).WaitRead(0xc2081f2990, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:89 +0x43
net.(*netFD).Read(0xc2081f2930, 0xc20844e800, 0x400, 0x400, 0x0, 0x584b70, 0xc2081f7ae8)
    /usr/local/go/src/net/fd_unix.go:242 +0x40f
net.(*conn).Read(0xc208038390, 0xc20844e800, 0x400, 0x400, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/net.go:121 +0xdc
crypto/tls.(*block).readFromUntil(0xc20857dfb0, 0x5860a8, 0xc208038390, 0x5, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:454 +0xe6
crypto/tls.(*Conn).readRecord(0xc208484b00, 0x17, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:539 +0x2da
crypto/tls.(*Conn).Read(0xc208484b00, 0xc20834e000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:904 +0x166
net/http.noteEOFReader.Read(0x58c488, 0xc208484b00, 0xc208263398, 0xc20834e000, 0x1000, 0x1000, 0x2a0300, 0x0, 0x0)
    /usr/local/go/src/net/http/transport.go:1270 +0x6e
net/http.(*noteEOFReader).Read(0xc2082a4460, 0xc20834e000, 0x1000, 0x1000, 0xc208012000, 0x0, 0x0)
    :125 +0xd4
bufio.(*Reader).fill(0xc2080fc060)
    /usr/local/go/src/bufio/bufio.go:97 +0x1ce
bufio.(*Reader).Peek(0xc2080fc060, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0)
    /usr/local/go/src/bufio/bufio.go:132 +0xf0
net/http.(*persistConn).readLoop(0xc208263340)
    /usr/local/go/src/net/http/transport.go:842 +0xa4
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:660 +0xc9f

goroutine 10863 [select]:
net/http.(*persistConn).writeLoop(0xc208263ad0)
    /usr/local/go/src/net/http/transport.go:945 +0x41d
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:661 +0xcbc

goroutine 10855 [select]:
net/http.(*persistConn).writeLoop(0xc208263340)
    /usr/local/go/src/net/http/transport.go:945 +0x41d
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:661 +0xcbc

goroutine 10862 [IO wait]:
net.(*pollDesc).Wait(0xc208010b50, 0x72, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:84 +0x47
net.(*pollDesc).WaitRead(0xc208010b50, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:89 +0x43
net.(*netFD).Read(0xc208010af0, 0xc20852c800, 0x400, 0x400, 0x0, 0x584b70, 0xc2081af168)
    /usr/local/go/src/net/fd_unix.go:242 +0x40f
net.(*conn).Read(0xc208038488, 0xc20852c800, 0x400, 0x400, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/net.go:121 +0xdc
crypto/tls.(*block).readFromUntil(0xc2085597a0, 0x5860a8, 0xc208038488, 0x5, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:454 +0xe6
crypto/tls.(*Conn).readRecord(0xc2084858c0, 0x17, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:539 +0x2da
crypto/tls.(*Conn).Read(0xc2084858c0, 0xc208415000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:904 +0x166
net/http.noteEOFReader.Read(0x58c488, 0xc2084858c0, 0xc208263b28, 0xc208415000, 0x1000, 0x1000, 0x2a0300, 0x0, 0x0)
    /usr/local/go/src/net/http/transport.go:1270 +0x6e
net/http.(*noteEOFReader).Read(0xc20825bce0, 0xc208415000, 0x1000, 0x1000, 0xc208012000, 0x0, 0x0)
    :125 +0xd4
bufio.(*Reader).fill(0xc2080fd740)
    /usr/local/go/src/bufio/bufio.go:97 +0x1ce
bufio.(*Reader).Peek(0xc2080fd740, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0)
    /usr/local/go/src/bufio/bufio.go:132 +0xf0
net/http.(*persistConn).readLoop(0xc208263ad0)
    /usr/local/go/src/net/http/transport.go:842 +0xa4
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:660 +0xc9f

goroutine 10867 [select]:
net/http.(*persistConn).writeLoop(0xc208263ef0)
    /usr/local/go/src/net/http/transport.go:945 +0x41d
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:661 +0xcbc

goroutine 10866 [IO wait]:
net.(*pollDesc).Wait(0xc2084be1b0, 0x72, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:84 +0x47
net.(*pollDesc).WaitRead(0xc2084be1b0, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:89 +0x43
net.(*netFD).Read(0xc2084be150, 0xc208465000, 0x1000, 0x1000, 0x0, 0x584b70, 0xc2081602f0)
    /usr/local/go/src/net/fd_unix.go:242 +0x40f
net.(*conn).Read(0xc208038540, 0xc208465000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/net.go:121 +0xdc
crypto/tls.(*block).readFromUntil(0xc2080cc180, 0x5860a8, 0xc208038540, 0x5, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:454 +0xe6
crypto/tls.(*Conn).readRecord(0xc2082cc000, 0x17, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:539 +0x2da
crypto/tls.(*Conn).Read(0xc2082cc000, 0xc2082cf000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:904 +0x166
net/http.noteEOFReader.Read(0x58c488, 0xc2082cc000, 0xc208263f48, 0xc2082cf000, 0x1000, 0x1000, 0x2a0300, 0x0, 0x0)
    /usr/local/go/src/net/http/transport.go:1270 +0x6e
net/http.(*noteEOFReader).Read(0xc20820ed60, 0xc2082cf000, 0x1000, 0x1000, 0xc208012000, 0x0, 0x0)
    :125 +0xd4
bufio.(*Reader).fill(0xc208326240)
    /usr/local/go/src/bufio/bufio.go:97 +0x1ce
bufio.(*Reader).Peek(0xc208326240, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0)
    /usr/local/go/src/bufio/bufio.go:132 +0xf0
net/http.(*persistConn).readLoop(0xc208263ef0)
    /usr/local/go/src/net/http/transport.go:842 +0xa4
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:660 +0xc9f

goroutine 10859 [select]:
net/http.(*persistConn).writeLoop(0xc208263760)
    /usr/local/go/src/net/http/transport.go:945 +0x41d
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:661 +0xcbc

goroutine 10858 [IO wait]:
net.(*pollDesc).Wait(0xc2081f3790, 0x72, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:84 +0x47
net.(*pollDesc).WaitRead(0xc2081f3790, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:89 +0x43
net.(*netFD).Read(0xc2081f3730, 0xc208418000, 0x1000, 0x1000, 0x0, 0x584b70, 0xc2081c53e8)
    /usr/local/go/src/net/fd_unix.go:242 +0x40f
net.(*conn).Read(0xc208038400, 0xc208418000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/net.go:121 +0xdc
crypto/tls.(*block).readFromUntil(0xc208458510, 0x5860a8, 0xc208038400, 0x5, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:454 +0xe6
crypto/tls.(*Conn).readRecord(0xc208485340, 0x17, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:539 +0x2da
crypto/tls.(*Conn).Read(0xc208485340, 0xc2082f6000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/local/go/src/crypto/tls/conn.go:904 +0x166
net/http.noteEOFReader.Read(0x58c488, 0xc208485340, 0xc2082637b8, 0xc2082f6000, 0x1000, 0x1000, 0x2a0300, 0x0, 0x0)
    /usr/local/go/src/net/http/transport.go:1270 +0x6e
net/http.(*noteEOFReader).Read(0xc20827a1a0, 0xc2082f6000, 0x1000, 0x1000, 0xc208012000, 0x0, 0x0)
    :125 +0xd4
bufio.(*Reader).fill(0xc2080fcc00)
    /usr/local/go/src/bufio/bufio.go:97 +0x1ce
bufio.(*Reader).Peek(0xc2080fcc00, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0)
    /usr/local/go/src/bufio/bufio.go:132 +0xf0
net/http.(*persistConn).readLoop(0xc208263760)
    /usr/local/go/src/net/http/transport.go:842 +0xa4
created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:660 +0xc9f
exit status 2
",7796
550,32078061,ps aux,6
551,32078061,pprof top,9
552,32078061,"ps aux |grep android
root      4584  3.4  0.1 500244 29536 pts/1    Sl+  17:21   0:38 ./android -logtostderr
",109
553,32078061,"/pprof.localhost:6060.inuse_objects.inuse_space.008.pb.gz
Entering interactive mode (type ""help"" for commands)
(pprof) top
512.19kB of 512.19kB total (  100%)
Dropped 19 nodes (cum <= 2.56kB)
      flat  flat%   sum%        cum   cum%
  512.19kB   100%   100%   512.19kB   100%  runtime.malg
         0     0%   100%   512.19kB   100%  runtime.mcommoninit
         0     0%   100%   512.19kB   100%  runtime.mpreinit
         0     0%   100%   512.19kB   100%  runtime.rt0_go
         0     0%   100%   512.19kB   100%  runtime.schedinit
(pprof) 
",547
554,32078061,"heap profile: 3: 49632 [3: 49632] @ heap/1048576
1: 49152 [1: 49152] @ 0x412c62 0x411bc9 0x6fd8c8 0x649c40 0x5497e6 0x409ad2 0x43615f 0x4669c1
#   0x6fd8c8    html.init+0xe8          /usr/local/gosrc/src/html/entity.go:2154
#   0x649c40    html/template.init+0x70     /usr/local/gosrc/src/html/template/url.go:105
#   0x5497e6    net/http/pprof.init+0x56    /usr/local/gosrc/src/net/http/pprof/pprof.go:239
#   0x409ad2    main.init+0x92          /root/go/src/github.com/ginkoob/devmg/local/android/local.go:236
#   0x43615f    runtime.main+0x27f      /usr/local/gosrc/src/runtime/proc.go:100

1: 384 [1: 384] @ 0x43d0e7 0x4317ef 0x437700 0x4372a9 0x464182
#   0x43d0e7    runtime.malg+0x27       /usr/local/gosrc/src/runtime/proc1.go:2172
#   0x4317ef    runtime.mpreinit+0x1f       /usr/local/gosrc/src/runtime/os1_linux.go:197
#   0x437700    runtime.mcommoninit+0x100   /usr/local/gosrc/src/runtime/proc1.go:114
#   0x4372a9    runtime.schedinit+0x79      /usr/local/gosrc/src/runtime/proc1.go:57
#   0x464182    runtime.rt0_go+0x132        /usr/local/gosrc/src/runtime/asm_amd64.s:109

1: 96 [1: 96] @ 0x449005 0x46a114 0x468625 0x467e71 0x4069d5 0x436190 0x4669c1
#   0x46a114    golang.org/x/mobile/gl.DoWork+0x54  /root/go/src/golang.org/x/mobile/gl/work.go:82
#   0x468625    golang.org/x/mobile/app.main+0x1d5  /root/go/src/golang.org/x/mobile/app/x11.go:65
#   0x467e71    golang.org/x/mobile/app.Main+0x21   /root/go/src/golang.org/x/mobile/app/app.go:22
#   0x4069d5    main.main+0x75              /root/go/src/github.com/ginkoob/devmg/local/android/local.go:65
#   0x436190    runtime.main+0x2b0          /usr/local/gosrc/src/runtime/proc.go:111

0: 0 [0: 0] @ 0x449005 0x6529f5 0x652936 0x64e2c4 0x54932e 0x549540 0x5222aa 0x523b0d 0x52457e 0x521d6e 0x4669c1
#   0x6529f5    runtime/pprof.writeGoroutineStacks+0x45 /usr/local/gosrc/src/runtime/pprof/pprof.go:514
#   0x652936    runtime/pprof.writeGoroutine+0x46   /usr/local/gosrc/src/runtime/pprof/pprof.go:505
#   0x64e2c4    runtime/pprof.(*Profile).WriteTo+0xd4   /usr/local/gosrc/src/runtime/pprof/pprof.go:236
#   0x54932e    net/http/pprof.handler.ServeHTTP+0x37e  /usr/local/gosrc/src/net/http/pprof/pprof.go:199
#   0x549540    net/http/pprof.Index+0x200      /usr/local/gosrc/src/net/http/pprof/pprof.go:211
#   0x5222aa    net/http.HandlerFunc.ServeHTTP+0x3a /usr/local/gosrc/src/net/http/server.go:1422
#   0x523b0d    net/http.(*ServeMux).ServeHTTP+0x17d    /usr/local/gosrc/src/net/http/server.go:1699
#   0x52457e    net/http.serverHandler.ServeHTTP+0x19e  /usr/local/gosrc/src/net/http/server.go:1862
#   0x521d6e    net/http.(*conn).serve+0xbee        /usr/local/gosrc/src/net/http/server.go:1361


# runtime.MemStats
# Alloc = 2701264
# TotalAlloc = 2701264
# Sys = 7145720
# Lookups = 18
# Mallocs = 19841
# Frees = 0
# HeapAlloc = 2701264
# HeapSys = 3637248
# HeapIdle = 262144
# HeapInuse = 3375104
# HeapReleased = 0
# HeapObjects = 19841
# Stack = 557056 / 557056
# MSpan = 28896 / 32768
# MCache = 4832 / 16384
# BuckHashSys = 1443979
# NextGC = 4194304
# PauseNs = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
# NumGC = 0
# EnableGC = true
# DebugGC = false
",3619
555,32078061,"goroutine profile: total 31
1 @ 0x652ba8 0x652983 0x64e2c4 0x54932e 0x549540 0x5222aa 0x523b0d 0x52457e 0x521d6e 0x4669c1
#   0x652ba8    runtime/pprof.writeRuntimeProfile+0xb8  /usr/local/gosrc/src/runtime/pprof/pprof.go:545
#   0x652983    runtime/pprof.writeGoroutine+0x93   /usr/local/gosrc/src/runtime/pprof/pprof.go:507
#   0x64e2c4    runtime/pprof.(*Profile).WriteTo+0xd4   /usr/local/gosrc/src/runtime/pprof/pprof.go:236
#   0x54932e    net/http/pprof.handler.ServeHTTP+0x37e  /usr/local/gosrc/src/net/http/pprof/pprof.go:199
#   0x549540    net/http/pprof.Index+0x200      /usr/local/gosrc/src/net/http/pprof/pprof.go:211
#   0x5222aa    net/http.HandlerFunc.ServeHTTP+0x3a /usr/local/gosrc/src/net/http/server.go:1422
#   0x523b0d    net/http.(*ServeMux).ServeHTTP+0x17d    /usr/local/gosrc/src/net/http/server.go:1699
#   0x52457e    net/http.serverHandler.ServeHTTP+0x19e  /usr/local/gosrc/src/net/http/server.go:1862
#   0x521d6e    net/http.(*conn).serve+0xbee        /usr/local/gosrc/src/net/http/server.go:1361

1 @ 0x436573 0x444ce4 0x444242 0x46871a 0x467e71 0x4069d5 0x436190 0x4669c1
#   0x46871a    golang.org/x/mobile/app.main+0x2ca  /root/go/src/golang.org/x/mobile/app/x11.go:61
#   0x467e71    golang.org/x/mobile/app.Main+0x21   /root/go/src/golang.org/x/mobile/app/app.go:22
#   0x4069d5    main.main+0x75              /root/go/src/github.com/nme/devmg/local/android/local.go:65
#   0x436190    runtime.main+0x2b0          /usr/local/gosrc/src/runtime/proc.go:111

1 @ 0x4669c1

1 @ 0x436573 0x436634 0x436378 0x4669c1
#   0x436573    runtime.gopark+0x163        /usr/local/gosrc/src/runtime/proc.go:186
#   0x436634    runtime.goparkunlock+0x54   /usr/local/gosrc/src/runtime/proc.go:191
#   0x436378    runtime.forcegchelper+0xb8  /usr/local/gosrc/src/runtime/proc.go:152

1 @ 0x436573 0x436634 0x42630d 0x4669c1
#   0x436573    runtime.gopark+0x163        /usr/local/gosrc/src/runtime/proc.go:186
#   0x436634    runtime.goparkunlock+0x54   /usr/local/gosrc/src/runtime/proc.go:191
#   0x42630d    runtime.bgsweep+0x14d       /usr/local/gosrc/src/runtime/mgcsweep.go:67

1 @ 0x436573 0x436634 0x41e04a 0x4669c1
#   0x436573    runtime.gopark+0x163        /usr/local/gosrc/src/runtime/proc.go:186
#   0x436634    runtime.goparkunlock+0x54   /usr/local/gosrc/src/runtime/proc.go:191
#   0x41e04a    runtime.runfinq+0xaa        /usr/local/gosrc/src/runtime/mfinal.go:154

1 @ 0x436573 0x444ce4 0x444242 0x4691e7 0x4669c1
#   0x4691e7    golang.org/x/mobile/app.pump.func1+0x527    /root/go/src/golang.org/x/mobile/app/app.go:138

1 @ 0x436573 0x436634 0x40d611 0x40ccfb 0x4acb57 0x4669c1
#   0x4acb57    github.com/golang/glog.(*loggingT).flushDaemon+0x67 /root/go/src/github.com/golang/glog/glog.go:882

1 @ 0x4173be 0x45142e 0x4669c1
#   0x4173be    runtime.notetsleepg+0x4e    /usr/local/gosrc/src/runtime/lock_futex.go:203
#   0x45142e    runtime.timerproc+0xde      /usr/local/gosrc/src/runtime/time.go:209

1 @ 0x436573 0x444ce4 0x444242 0x533327 0x4669c1
#   0x533327    net/http.(*persistConn).readLoop+0xac7  /usr/local/gosrc/src/net/http/transport.go:983

1 @ 0x436573 0x43069e 0x42fb60 0x4cd99a 0x4cda06 0x4d158c 0x4ef94d 0x5254d1 0x524853 0x524716 0x524daf 0x408e1c 0x4669c1
#   0x42fb60    net.runtime_pollWait+0x60           /usr/local/gosrc/src/runtime/netpoll.go:157
#   0x4cd99a    net.(*pollDesc).Wait+0x3a           /usr/local/gosrc/src/net/fd_poll_runtime.go:73
#   0x4cda06    net.(*pollDesc).WaitRead+0x36           /usr/local/gosrc/src/net/fd_poll_runtime.go:78
#   0x4d158c    net.(*netFD).accept+0x27c           /usr/local/gosrc/src/net/fd_unix.go:408
#   0x4ef94d    net.(*TCPListener).AcceptTCP+0x4d       /usr/local/gosrc/src/net/tcpsock_posix.go:254
#   0x5254d1    net/http.tcpKeepAliveListener.Accept+0x41   /usr/local/gosrc/src/net/http/server.go:2138
#   0x524853    net/http.(*Server).Serve+0xb3           /usr/local/gosrc/src/net/http/server.go:1887
#   0x524716    net/http.(*Server).ListenAndServe+0x136     /usr/local/gosrc/src/net/http/server.go:1877
#   0x524daf    net/http.ListenAndServe+0x8f            /usr/local/gosrc/src/net/http/server.go:1967
#   0x408e1c    main.main.func1+0x3c                /root/go/src/github.com/nme/devmg/local/android/local.go:40

1 @ 0x436573 0x43069e 0x42fb60 0x4cd99a 0x4cda06 0x4cf74a 0x4e3c34 0x5c0c39 0x5c14aa 0x4b0cee 0x4b5b43 0x49e028 0x49a8d0 0x49b173 0x49cf47 0x4669c1
#   0x42fb60    net.runtime_pollWait+0x60                       /usr/local/gosrc/src/runtime/netpoll.go:157
#   0x4cd99a    net.(*pollDesc).Wait+0x3a                       /usr/local/gosrc/src/net/fd_poll_runtime.go:73
#   0x4cda06    net.(*pollDesc).WaitRead+0x36                       /usr/local/gosrc/src/net/fd_poll_runtime.go:78
#   0x4cf74a    net.(*netFD).Read+0x23a                         /usr/local/gosrc/src/net/fd_unix.go:232
#   0x4e3c34    net.(*conn).Read+0xe4                           /usr/local/gosrc/src/net/net.go:132
#   0x5c0c39    bufio.(*Reader).fill+0x1e9                      /usr/local/gosrc/src/bufio/bufio.go:97
#   0x5c14aa    bufio.(*Reader).ReadByte+0x7a                       /usr/local/gosrc/src/bufio/bufio.go:229
#   0x4b0cee    golang.org/x/net/websocket.hybiFrameReaderFactory.NewFrameReader+0xbe   /root/go/src/golang.org/x/net/websocket/hybi.go:126
#   0x4b5b43    golang.org/x/net/websocket.Codec.Receive+0x183              /root/go/src/golang.org/x/net/websocket/websocket.go:315
#   0x49e028    golang.org/x/net/websocket.(Codec).Receive-fm+0x58          /root/go/src/github.com/nme/socks/ws.go:420
#   0x49a8d0    github.com/nme/socks.(*WSConn).execute+0x210            /root/go/src/github.com/nme/socks/ws.go:389
#   0x49b173    github.com/nme/socks.(*WSConn).receiveMessage+0x203         /root/go/src/github.com/nme/socks/ws.go:420
#   0x49cf47    github.com/nme/socks.(*WSConn).Setup.func3+0x117            /root/go/src/github.com/nme/socks/ws.go:221

1 @ 0x436573 0x436634 0x40d611 0x40ccfb 0x4080af 0x406fd8 0x4092e7 0x46937f 0x4669c1
#   0x4080af    main.startSocks+0x3bf           /root/go/src/github.com/nme/devmg/local/android/local.go:151
#   0x406fd8    main.startClient+0x5d8          /root/go/src/github.com/nme/devmg/local/android/local.go:82
#   0x4092e7    main.main.func2+0x227           /root/go/src/github.com/nme/devmg/local/android/local.go:64
#   0x46937f    golang.org/x/mobile/app.main.func1+0x6f /root/go/src/golang.org/x/mobile/app/x11.go:51

1 @ 0x436573 0x444ce4 0x444242 0x533c4c 0x4669c1
#   0x533c4c    net/http.(*persistConn).writeLoop+0x40c /usr/local/gosrc/src/net/http/transport.go:1016

1 @ 0x436573 0x436634 0x40d182 0x40ccfb 0x408f63 0x4669c1
#   0x408f63    main.main.func2.1+0x73  /root/go/src/github.com/nme/devmg/local/android/local.go:47

1 @ 0x436573 0x444ce4 0x444242 0x49dcee 0x4669c1
#   0x49dcee    github.com/nme/socks.(*WSConn).Setup.func4+0x86e    /root/go/src/github.com/nme/socks/ws.go:256

1 @ 0x436573 0x444ce4 0x444242 0x49c7a5 0x4669c1
#   0x49c7a5    github.com/nme/socks.SetKeepAlive.func1+0x215   /root/go/src/github.com/nme/socks/ws.go:32

1 @ 0x436573 0x436634 0x40d611 0x40ccfb 0x4072c6 0x4669c1
#   0x4072c6    main.WaitCmd+0xc6   /root/go/src/github.com/nme/devmg/local/android/local.go:95

1 @ 0x436573 0x444ce4 0x444242 0x4998aa 0x4669c1
#   0x4998aa    github.com/nme/socks.(*Router).ListenAndServe+0x91a /root/go/src/github.com/nme/socks/ws.go:124

1 @ 0x436573 0x444ce4 0x444242 0x49a173 0x4669c1
#   0x49a173    github.com/nme/socks.(*WSConn).Setup+0x753  /root/go/src/github.com/nme/socks/ws.go:186

1 @ 0x436573 0x436634 0x40d611 0x40ccfb 0x49b3ea 0x4669c1
#   0x49b3ea    github.com/nme/socks.(*Nic).Dial.func1+0x9a /root/go/src/github.com/nme/socks/conn.go:34

3 @ 0x436573 0x444ce4 0x444242 0x49cd50 0x4669c1
#   0x49cd50    github.com/nme/socks.(*Router).ListenAndServe.func1+0x590   /root/go/src/github.com/nme/socks/ws.go:96

1 @ 0x436573 0x43069e 0x42fb60 0x4cd99a 0x4cda06 0x4cf74a 0x4e3c34 0x51a734 0x581f7d 0x5c0c39 0x5c1aaa 0x5c1b23 0x6285f1 0x628360 0x515496 0x51d83f 0x5218a7 0x4669c1
#   0x42fb60    net.runtime_pollWait+0x60           /usr/local/gosrc/src/runtime/netpoll.go:157
#   0x4cd99a    net.(*pollDesc).Wait+0x3a           /usr/local/gosrc/src/net/fd_poll_runtime.go:73
#   0x4cda06    net.(*pollDesc).WaitRead+0x36           /usr/local/gosrc/src/net/fd_poll_runtime.go:78
#   0x4cf74a    net.(*netFD).Read+0x23a             /usr/local/gosrc/src/net/fd_unix.go:232
#   0x4e3c34    net.(*conn).Read+0xe4               /usr/local/gosrc/src/net/net.go:132
#   0x51a734    net/http.(*liveSwitchReader).Read+0xa4      /usr/local/gosrc/src/net/http/server.go:219
#   0x581f7d    io.(*LimitedReader).Read+0xbd           /usr/local/gosrc/src/io/io.go:427
#   0x5c0c39    bufio.(*Reader).fill+0x1e9          /usr/local/gosrc/src/bufio/bufio.go:97
#   0x5c1aaa    bufio.(*Reader).ReadSlice+0x21a         /usr/local/gosrc/src/bufio/bufio.go:328
#   0x5c1b23    bufio.(*Reader).ReadLine+0x53           /usr/local/gosrc/src/bufio/bufio.go:357
#   0x6285f1    net/textproto.(*Reader).readLineSlice+0x81  /usr/local/gosrc/src/net/textproto/reader.go:55
#   0x628360    net/textproto.(*Reader).ReadLine+0x40       /usr/local/gosrc/src/net/textproto/reader.go:36
#   0x515496    net/http.ReadRequest+0xb6           /usr/local/gosrc/src/net/http/request.go:653
#   0x51d83f    net/http.(*conn).readRequest+0x32f      /usr/local/gosrc/src/net/http/server.go:633
#   0x5218a7    net/http.(*conn).serve+0x727            /usr/local/gosrc/src/net/http/server.go:1319

1 @ 0x436573 0x43069e 0x42fb60 0x4cd99a 0x4cda06 0x4cf74a 0x4e3c34 0x51a734 0x581f7d 0x5c0c39 0x5c0e5c 0x51d7cb 0x5218a7 0x4669c1
#   0x42fb60    net.runtime_pollWait+0x60       /usr/local/gosrc/src/runtime/netpoll.go:157
#   0x4cd99a    net.(*pollDesc).Wait+0x3a       /usr/local/gosrc/src/net/fd_poll_runtime.go:73
#   0x4cda06    net.(*pollDesc).WaitRead+0x36       /usr/local/gosrc/src/net/fd_poll_runtime.go:78
#   0x4cf74a    net.(*netFD).Read+0x23a         /usr/local/gosrc/src/net/fd_unix.go:232
#   0x4e3c34    net.(*conn).Read+0xe4           /usr/local/gosrc/src/net/net.go:132
#   0x51a734    net/http.(*liveSwitchReader).Read+0xa4  /usr/local/gosrc/src/net/http/server.go:219
#   0x581f7d    io.(*LimitedReader).Read+0xbd       /usr/local/gosrc/src/io/io.go:427
#   0x5c0c39    bufio.(*Reader).fill+0x1e9      /usr/local/gosrc/src/bufio/bufio.go:97
#   0x5c0e5c    bufio.(*Reader).Peek+0xcc       /usr/local/gosrc/src/bufio/bufio.go:132
#   0x51d7cb    net/http.(*conn).readRequest+0x2bb  /usr/local/gosrc/src/net/http/server.go:629
#   0x5218a7    net/http.(*conn).serve+0x727        /usr/local/gosrc/src/net/http/server.go:1319

1 @ 0x436573 0x436634 0x42051b 0x4669c1
#   0x436573    runtime.gopark+0x163        /usr/local/gosrc/src/runtime/proc.go:186
#   0x436634    runtime.goparkunlock+0x54   /usr/local/gosrc/src/runtime/proc.go:191
#   0x42051b    runtime.backgroundgc+0x8b   /usr/local/gosrc/src/runtime/mgc.go:894

4 @ 0x436573 0x421717 0x4669c1
#   0x436573    runtime.gopark+0x163        /usr/local/gosrc/src/runtime/proc.go:186
#   0x421717    runtime.gcBgMarkWorker+0xf7 /usr/local/gosrc/src/runtime/mgc.go:1283
",11104
556,32078061,"Name:   android
State:  S (sleeping)
Tgid:   4584
Ngid:   0
Pid:    4584
PPid:   2776
TracerPid:  0
Uid:    0   0   0   0
Gid:    0   0   0   0
FDSize: 256
Groups: 0 
NStgid: 4584
NSpid:  4584
NSpgid: 4584
NSsid:  2776
VmPeak:   631316 kB
VmSize:   573976 kB
VmLck:         0 kB
VmPin:         0 kB
VmHWM:     30060 kB
VmRSS:     29344 kB
VmData:   487492 kB
VmStk:       136 kB
VmExe:      6704 kB
VmLib:     13404 kB
VmPTE:       288 kB
VmPMD:        20 kB
VmSwap:        0 kB
Threads:    10
SigQ:   3/62942
SigPnd: 0000000000000000
ShdPnd: 0000000000000000
SigBlk: 0000000000000000
SigIgn: 0000000000000000
SigCgt: ffffffffffc1feff
CapInh: 0000000000000000
CapPrm: 0000003fffffffff
CapEff: 0000003fffffffff
CapBnd: 0000003fffffffff
Seccomp:    0
Cpus_allowed:   f
Cpus_allowed_list:  0-3
Mems_allowed:   00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000001
Mems_allowed_list:  0
voluntary_ctxt_switches:    531158
nonvoluntary_ctxt_switches: 13254
",1042
557,32176276,"dev_appserver.py goapprtc --host 0.0.0.0
",41
558,32176276,"""appengine""
""appengine/channel""
""appengine/datastore""
""appengine/urlfetch""
",75
559,32176276,"C:\>dev_appserver.py goapprtc.appspot.com-master --host 0.0.0.0
INFO     2015-08-24 16:14:08,477 sdk_update_checker.py:229] Checking for updates
 to the SDK.
INFO     2015-08-24 16:14:10,634 sdk_update_checker.py:257] The SDK is up to dat
e.
INFO     2015-08-24 16:14:10,711 api_server.py:205] Starting API server at: http
://localhost:49641
INFO     2015-08-24 16:14:10,727 dispatcher.py:197] Starting module ""default"" ru
nning at: http://0.0.0.0:8080
INFO     2015-08-24 16:14:10,727 admin_server.py:118] Starting admin server at:
http://localhost:8000
2015/08/24 16:15:02 INFO: Applying media constraints: &{true true}
2015/08/24 16:15:02 INFO: User 66666666 added to room 1234
2015/08/24 16:15:02 INFO: Room 1234 has state &{66666666  false false}
INFO     2015-08-24 16:15:02,305 module.py:808] default: ""GET /?r=1234 HTTP/1.1""
 200 1681
INFO     2015-08-24 16:15:02,384 module.py:808] default: ""GET /css/main.css HTTP
/1.1"" 304 -
INFO     2015-08-24 16:15:02,390 module.py:808] default: ""GET /js/main.js HTTP/1
.1"" 304 -
INFO     2015-08-24 16:15:02,391 module.py:808] default: ""GET /js/adapter.js HTT
P/1.1"" 304 -
INFO     2015-08-24 16:15:02,394 module.py:808] default: ""GET /images/goapprtc.g
if HTTP/1.1"" 304 -
2015/08/24 16:15:03 INFO: User 66666666 connected to room 1234
2015/08/24 16:15:03 INFO: Room 1234 has state &{66666666  true false}
INFO     2015-08-24 16:15:03,486 module.py:808] default: ""POST /_ah/channel/conn
ected/ HTTP/1.1"" 200 -
2015/08/24 16:15:26 INFO: Applying media constraints: &{true true}
2015/08/24 16:15:26 INFO: User 44444444 added to room 1234
2015/08/24 16:15:26 INFO: Room 1234 has state &{66666666 44444444 true false}
INFO     2015-08-24 16:15:26,638 module.py:808] default: ""GET /?r=1234 HTTP/1.1""
 200 1691
INFO     2015-08-24 16:15:26,796 module.py:808] default: ""GET /css/main.css HTTP
/1.1"" 304 -
INFO     2015-08-24 16:15:26,801 module.py:808] default: ""GET /js/main.js HTTP/1
.1"" 304 -
INFO     2015-08-24 16:15:26,802 module.py:808] default: ""GET /js/adapter.js HTT
P/1.1"" 304 -
INFO     2015-08-24 16:15:26,805 module.py:808] default: ""GET /images/goapprtc.g
if HTTP/1.1"" 304 -
2015/08/24 16:15:28 INFO: User 44444444 connected to room 1234
2015/08/24 16:15:28 INFO: Room 1234 has state &{66666666 44444444 true true}
INFO     2015-08-24 16:15:28,387 module.py:808] default: ""POST /_ah/channel/conn
ected/ HTTP/1.1"" 200 -
2015/08/24 16:15:29 INFO: Delivered message to user 66666666
INFO     2015-08-24 16:15:29,716 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:29 INFO: Delivered message to user 66666666
INFO     2015-08-24 16:15:29,806 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:30 INFO: Delivered message to user 66666666
INFO     2015-08-24 16:15:30,772 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:30 INFO: Delivered message to user 66666666
INFO     2015-08-24 16:15:30,871 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:30 INFO: Delivered message to user 66666666
INFO     2015-08-24 16:15:30,938 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:30 INFO: Delivered message to user 66666666
2015/08/24 16:15:30 INFO: Delivered message to user 66666666
2015/08/24 16:15:30 INFO: Delivered message to user 66666666
INFO     2015-08-24 16:15:30,967 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:30,970 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:30,970 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:31 INFO: Delivered message to user 66666666
INFO     2015-08-24 16:15:31,825 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:31 INFO: Delivered message to user 66666666
INFO     2015-08-24 16:15:31,927 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:31 INFO: Delivered message to user 66666666
INFO     2015-08-24 16:15:31,996 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:32 INFO: Delivered message to user 66666666
2015/08/24 16:15:32 INFO: Delivered message to user 66666666
INFO     2015-08-24 16:15:32,065 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:32 INFO: Delivered message to user 66666666
INFO     2015-08-24 16:15:32,069 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:32,075 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:32 INFO: Delivered message to user 44444444
INFO     2015-08-24 16:15:32,104 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
2015/08/24 16:15:32 INFO: Delivered message to user 44444444
INFO     2015-08-24 16:15:32,121 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
2015/08/24 16:15:32 INFO: Delivered message to user 44444444
INFO     2015-08-24 16:15:32,147 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
2015/08/24 16:15:32 INFO: Delivered message to user 44444444
2015/08/24 16:15:32 INFO: Delivered message to user 44444444
2015/08/24 16:15:32 INFO: Delivered message to user 44444444
INFO     2015-08-24 16:15:32,188 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:32,190 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:32,191 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
2015/08/24 16:15:32 INFO: User 44444444 removed from room 1234
2015/08/24 16:15:32 INFO: Room 1234 has state &{66666666  true false}
2015/08/24 16:15:32 INFO: Sent BYE to 66666666
2015/08/24 16:15:32 WARNING: User 44444444 disconnected from room 1234
INFO     2015-08-24 16:15:32,848 module.py:808] default: ""POST /_ah/channel/disc
onnected/ HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:32,904 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:32 INFO: User 66666666 removed from room 1234
2015/08/24 16:15:32 INFO: Room 1234 has state &{  false false}
2015/08/24 16:15:32 WARNING: User 66666666 disconnected from room 1234
INFO     2015-08-24 16:15:32,969 module.py:808] default: ""POST /_ah/channel/disc
onnected/ HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:33,022 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:33,082 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:33,131 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:33,151 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:33,183 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:33,191 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:33,206 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:33,213 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:33,220 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:33,223 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:33,957 module.py:808] default: ""POST /message?r=1234&u
=44444444 HTTP/1.1"" 200 -
2015/08/24 16:15:34 ERROR: datastore: datastore: no such entity
2015/08/24 16:15:34 WARNING: Unexpected Connect Message to room 1234
INFO     2015-08-24 16:15:34,072 module.py:808] default: ""POST /_ah/channel/conn
ected/ HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:34,148 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:34,170 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:34,239 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:34,243 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:34,243 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:34,346 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:35,153 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
INFO     2015-08-24 16:15:35,183 module.py:808] default: ""POST /message?r=1234&u
=66666666 HTTP/1.1"" 200 -
2015/08/24 16:15:35 ERROR: datastore: datastore: no such entity
2015/08/24 16:15:35 WARNING: Unexpected Connect Message to room 1234
INFO     2015-08-24 16:15:35,255 module.py:808] default: ""POST /_ah/channel/conn
ected/ HTTP/1.1"" 200 -
",9011
560,32248489,"#ifndef IRUNNABLE_H
#define IRUNNABLE_H

#include 
#include 
#include 

class IRunnable
{
public:
    IRunnable(): mThread(nullptr) {
        mRunning.store(false);
    }

    virtual ~IRunnable() {
        if (mRunning.load())
            Stop();
        delete mThread;
    }


    virtual void Start() {
        mRunning.store(true);
        mThread = new std::thread(&IRunnable::Run, this);
    }

    virtual void Stop() {
        mRunning.store(false);
        if (mThread && mThread->joinable())
            mThread->join();
    }

    virtual bool IsRunning() {return mRunning.load();}

protected:
    virtual void Run() = 0;

    std::atomic mRunning;

private:
    std::thread *mThread;
};

#endif // IRUNNABLE_H
",723
561,32248489,"#ifndef MYTCPCONNECTION_H
#define MYTCPCONNECTION_H

#include 
#include 
#include ""irunnable.h""


class MyTCPConnection : public IRunnable
{
public:
    MyTCPConnection(const std::string &ip, const std::string &port);

    ~MyTCPConnection();

    void Stop();

    void Write(const std::string &msg);

    void Connect();
protected:
    void Run();

private:
    void readHeader();

private:
    std::string mIP;
    std::string mPort;
    asio::io_service mIOService;
    asio::ip::tcp::socket mSocket;
};

#endif // MYTCPCONNECTION_H
",537
562,32248489,"#include ""mytcpconnection.h""
#include 
#include 
#include 
#include 

MyTCPConnection::MyTCPConnection(const std::string &ip, const std::string &port):
    mIP(ip),
    mPort(port),
    mSocket(mIOService)
{
    Connect();
}

MyTCPConnection::~MyTCPConnection()
{
    Stop();
}

void MyTCPConnection::Stop()
{
    mIOService.stop();
    mSocket.close();
    IRunnable::Stop();
}

void MyTCPConnection::Write(const std::string &msg)
{
    asio::async_write(mSocket,
                    asio::buffer(msg.c_str(),
                                msg.length()),
                    [this, msg](std::error_code ec, std::size_t /*length*/)
    {
        if (!ec)
        {
            std::cout <<  msg << std::endl;
        }
        else
        {
            mSocket.close();
        }
    });
}



void MyTCPConnection::Run()
{

    while (mRunning.load()) {
        sleep(1);
//        Connect();
        std::cout << ""before run\n"";
        mIOService.run();
        std::cout << ""after run\n"";
    }

}

void MyTCPConnection::Connect()
{
    asio::ip::tcp::resolver resolver(mIOService);
    asio::async_connect(mSocket, resolver.resolve({mIP, mPort}),
                        [this](std::error_code ec, asio::ip::tcp::resolver::iterator)
    {
        if (!ec)
        {
            std::cout << ""readHeader called\n"";
            readHeader();
        }
        else {
            std::cout << ""can not connect\n"";
            mSocket.close();
            mIOService.reset();
            std::cout << ""after stopping io_service\n"";
        }
    });
}

void MyTCPConnection::readHeader()
{
    const int header_length = 16;
    std::shared_ptr msg(new char[header_length]{0},
        [](char *c) {
            delete[] c;
    });
    asio::async_read(mSocket,
                    asio::buffer(msg.get(), header_length),
                    [this, msg](std::error_code ec, std::size_t s/*length*/)
    {
        if (!ec)
        {
            std::cout << ""Message read "" << s << std::endl;
            readHeader();
        }
        else
        {
            std::cout << ""closing socket\n"";
            mSocket.close();
            mIOService.stop();
        }
    });
}
",2177
563,32248489,"#include 
#include ""mytcpconnection.h""

using namespace std;

int main()
{
    MyTCPConnection conn(""127.0.0.1"", ""12345"");
    conn.Start();

    while (true)
    {
        conn.Write(""Hello server"");

        sleep(1);
    }

    return 0;
}
",243
564,32248489,"package main

import (
        ""time""
        ""fmt""
        ""net""
)

func handle_conn(conn net.Conn) {
    b := make([]byte, 1028)
    for {
        n, err:= conn.Read(b)
        if err != nil {
            fmt.Println(err.Error())
            break
        }
        fmt.Println(string(b[:n]))
        _, _ = conn.Write([]byte(""hellohellohello1""))
        time.Sleep(time.Second*1)
    }
}

func main() {
        ln, err := net.Listen(""tcp"", "":12345"")
        if err != nil {
                fmt.Println(err.Error())
        }
        fmt.Println(""server started"")
        for {
                conn, err := ln.Accept()
        fmt.Println(""connection from"", conn.RemoteAddr())
                if err != nil {
                        fmt.Println(err.Error())
                        continue
                }
                go handle_conn(conn)
        }
}
",860
565,32281591,"package main
import (
    ""bytes""
    ""log""
    ""net/http""
    ""strconv""
    ""time""
)

func main() {

    http.HandleFunc(""/"", Method)
    log.Printf(""Server Started"")
    log.Fatal(http.ListenAndServe("":8080"", nil))

}

func Method(pResponse http.ResponseWriter, pRequest *http.Request) {
    timeInitial := time.Now()
    log.Printf(strconv.Itoa(timeInitial.Nanosecond()),     strconv.FormatFloat(time.Now().Sub(timeInitial).Seconds()*1000, 'f', 2, 64))
    buf := new(bytes.Buffer)
    buf.ReadFrom(pRequest.Body)
    buf.Bytes() 
    log.Printf(strconv.Itoa(timeInitial.Nanosecond()), strconv.FormatFloat(time.Now().Sub(timeInitial).Seconds()*1000, 'f', 2, 64))

}
",669
566,32281591,"2015/08/28 23:09:59 444255510%!(EXTRA string=0.00)
2015/08/28 23:09:59 444255510%!(EXTRA string=0.06)
2015/08/28 23:09:59 472140004%!(EXTRA string=0.00)
2015/08/28 23:09:59 472140004%!(EXTRA string=1.06)
2015/08/28 23:09:59 473322028%!(EXTRA string=0.00)
2015/08/28 23:09:59 473322028%!(EXTRA string=0.01)
2015/08/28 23:09:59 473377991%!(EXTRA string=0.00)
2015/08/28 23:09:59 473377991%!(EXTRA string=0.02)
2015/08/28 23:09:59 483981504%!(EXTRA string=0.00)
2015/08/28 23:09:59 483981504%!(EXTRA string=0.06)
2015/08/28 23:09:59 487652426%!(EXTRA string=0.00)
2015/08/28 23:09:59 487652426%!(EXTRA string=0.07)
2015/08/28 23:09:59 488064359%!(EXTRA string=0.00)
2015/08/28 23:09:59 488064359%!(EXTRA string=0.07)
2015/08/28 23:09:59 493007447%!(EXTRA string=0.00)
2015/08/28 23:09:59 493007447%!(EXTRA string=0.36)
2015/08/28 23:09:59 506383690%!(EXTRA string=0.00)
2015/08/28 23:09:59 506383690%!(EXTRA string=0.02)
2015/08/28 23:09:59 516324968%!(EXTRA string=0.00)
2015/08/28 23:09:59 516324968%!(EXTRA string=0.02)
2015/08/28 23:09:59 516484292%!(EXTRA string=0.00)
2015/08/28 23:09:59 516484292%!(EXTRA string=0.02)
2015/08/28 23:09:59 526459027%!(EXTRA string=0.00)
2015/08/28 23:09:59 526459027%!(EXTRA string=0.03)
2015/08/28 23:09:59 526568984%!(EXTRA string=0.00)
2015/08/28 23:09:59 526568984%!(EXTRA string=0.02)
2015/08/28 23:09:59 526645341%!(EXTRA string=0.00)
2015/08/28 23:09:59 526645341%!(EXTRA string=0.01)
2015/08/28 23:09:59 533764558%!(EXTRA string=0.00)
2015/08/28 23:09:59 533764558%!(EXTRA string=0.02)
2015/08/28 23:09:59 533872219%!(EXTRA string=0.00)
2015/08/28 23:09:59 533872219%!(EXTRA string=0.02)
2015/08/28 23:09:59 542355931%!(EXTRA string=0.00)
2015/08/28 23:09:59 542355931%!(EXTRA string=0.04)
2015/08/28 23:09:59 549176497%!(EXTRA string=0.00)
2015/08/28 23:09:59 549176497%!(EXTRA string=0.03)
2015/08/28 23:09:59 559803436%!(EXTRA string=0.00)
2015/08/28 23:09:59 559803436%!(EXTRA string=0.05)
2015/08/28 23:09:59 559913211%!(EXTRA string=0.00)
2015/08/28 23:09:59 559913211%!(EXTRA string=0.01)
2015/08/28 23:09:59 579428530%!(EXTRA string=0.00)
2015/08/28 23:09:59 579428530%!(EXTRA string=0.05)
2015/08/28 23:09:59 585453710%!(EXTRA string=0.00)
2015/08/28 23:09:59 585453710%!(EXTRA string=0.03)
2015/08/28 23:09:59 587231793%!(EXTRA string=0.00)
2015/08/28 23:09:59 587231793%!(EXTRA string=0.02)
2015/08/28 23:09:59 601407050%!(EXTRA string=0.00)
2015/08/28 23:09:59 601407050%!(EXTRA string=0.02)
2015/08/28 23:09:59 609160787%!(EXTRA string=0.00)
2015/08/28 23:09:59 609160787%!(EXTRA string=0.02)
2015/08/28 23:09:59 617953845%!(EXTRA string=0.00)
2015/08/28 23:09:59 617953845%!(EXTRA string=0.03)
2015/08/28 23:09:59 618042591%!(EXTRA string=0.00)
2015/08/28 23:09:59 618042591%!(EXTRA string=0.02)
2015/08/28 23:09:59 629055567%!(EXTRA string=0.00)
2015/08/28 23:09:59 629055567%!(EXTRA string=0.03)
2015/08/28 23:09:59 642409323%!(EXTRA string=0.00)
2015/08/28 23:09:59 642409323%!(EXTRA string=0.02)
2015/08/28 23:09:59 668017861%!(EXTRA string=0.00)
2015/08/28 23:09:59 668017861%!(EXTRA string=0.12)
2015/08/28 23:09:59 677003700%!(EXTRA string=0.00)
2015/08/28 23:09:59 677003700%!(EXTRA string=0.06)
2015/08/28 23:09:59 692284984%!(EXTRA string=0.00)
2015/08/28 23:09:59 692284984%!(EXTRA string=0.03)
2015/08/28 23:09:59 705532147%!(EXTRA string=0.00)
2015/08/28 23:09:59 705532147%!(EXTRA string=0.06)
2015/08/28 23:09:59 712790204%!(EXTRA string=0.00)
2015/08/28 23:09:59 712790204%!(EXTRA string=0.12)
2015/08/28 23:09:59 737197885%!(EXTRA string=0.00)
2015/08/28 23:09:59 737197885%!(EXTRA string=0.07)
2015/08/28 23:09:59 743503323%!(EXTRA string=0.00)
2015/08/28 23:09:59 743503323%!(EXTRA string=0.14)
2015/08/28 23:09:59 745206360%!(EXTRA string=0.00)
2015/08/28 23:09:59 745206360%!(EXTRA string=0.06)
2015/08/28 23:09:59 763185757%!(EXTRA string=0.00)
2015/08/28 23:09:59 763185757%!(EXTRA string=0.55)
2015/08/28 23:09:59 769112727%!(EXTRA string=0.00)
2015/08/28 23:09:59 769112727%!(EXTRA string=0.08)
2015/08/28 23:09:59 805816057%!(EXTRA string=0.00)
2015/08/28 23:09:59 805816057%!(EXTRA string=0.12)
2015/08/28 23:09:59 809677378%!(EXTRA string=0.00)
2015/08/28 23:09:59 809677378%!(EXTRA string=0.08)
2015/08/28 23:09:59 828063305%!(EXTRA string=0.00)
2015/08/28 23:09:59 828063305%!(EXTRA string=0.12)
2015/08/28 23:09:59 828338407%!(EXTRA string=0.00)
2015/08/28 23:09:59 828338407%!(EXTRA string=0.03)
2015/08/28 23:09:59 835510888%!(EXTRA string=0.00)
2015/08/28 23:09:59 835510888%!(EXTRA string=0.07)
2015/08/28 23:09:59 882626159%!(EXTRA string=0.00)
2015/08/28 23:09:59 882626159%!(EXTRA string=0.03)
2015/08/28 23:09:59 897746270%!(EXTRA string=0.00)
2015/08/28 23:09:59 897746270%!(EXTRA string=0.03)
2015/08/28 23:09:59 931674931%!(EXTRA string=0.00)
2015/08/28 23:09:59 931674931%!(EXTRA string=0.03)
2015/08/28 23:09:59 936024259%!(EXTRA string=0.00)
2015/08/28 23:09:59 936024259%!(EXTRA string=0.05)
",4896
567,32281591,"2015/08/29 01:16:54 471552059%!(EXTRA string=15.81)
2015/08/29 01:16:54 480068871%!(EXTRA string=15.67)
2015/08/29 01:16:54 507398302%!(EXTRA string=0.00)
2015/08/29 01:16:54 521398742%!(EXTRA string=0.00)
2015/08/29 01:16:54 202533461%!(EXTRA string=2327.37)
2015/08/29 01:16:54 338831795%!(EXTRA string=1191.18)
2015/08/29 01:16:54 531039526%!(EXTRA string=1037.30)
2015/08/29 01:16:54 593472114%!(EXTRA string=0.00)
2015/08/29 01:16:54 609973091%!(EXTRA string=0.00)
2015/08/29 01:16:54 593472114%!(EXTRA string=16.54)
2015/08/29 01:16:54 609973091%!(EXTRA string=15.73)
2015/08/29 01:16:54 394071392%!(EXTRA string=1238.16)
2015/08/29 01:16:54 638164663%!(EXTRA string=0.00)
2015/08/29 01:16:54 638164663%!(EXTRA string=15.53)
2015/08/29 01:16:54 667631670%!(EXTRA string=0.00)
2015/08/29 01:16:54 675844627%!(EXTRA string=0.00)
2015/08/29 01:16:54 675844627%!(EXTRA string=14.16)
2015/08/29 01:16:54 711898262%!(EXTRA string=0.00)
2015/08/29 01:16:54 300566416%!(EXTRA string=424.26)
2015/08/29 01:16:54 711898262%!(EXTRA string=13.02)
2015/08/29 01:16:54 632385443%!(EXTRA string=1115.35)
2015/08/29 01:16:54 753118239%!(EXTRA string=0.00)
2015/08/29 01:16:54 753118239%!(EXTRA string=14.15)
2015/08/29 01:16:54 767381818%!(EXTRA string=0.00)
2015/08/29 01:16:54 801314950%!(EXTRA string=0.00)
2015/08/29 01:16:54 767381818%!(EXTRA string=33.99)
2015/08/29 01:16:54 816438476%!(EXTRA string=0.00)
2015/08/29 01:16:54 372179187%!(EXTRA string=2457.93)
2015/08/29 01:16:54 836926824%!(EXTRA string=0.00)
2015/08/29 01:16:54 836926824%!(EXTRA string=51.60)
2015/08/29 01:16:54 889729894%!(EXTRA string=0.00)
2015/08/29 01:16:54 890430388%!(EXTRA string=0.00)
2015/08/29 01:16:54 891713727%!(EXTRA string=0.00)
2015/08/29 01:16:54 732229063%!(EXTRA string=1163.04)
2015/08/29 01:16:54 332690466%!(EXTRA string=1571.52)
2015/08/29 01:16:54 904336456%!(EXTRA string=0.00)
2015/08/29 01:16:54 926288167%!(EXTRA string=0.00)
2015/08/29 01:16:54 384796519%!(EXTRA string=1549.14)
2015/08/29 01:16:54 941601994%!(EXTRA string=0.00)
2015/08/29 01:16:54 431987970%!(EXTRA string=1516.20)
2015/08/29 01:16:54 888973901%!(EXTRA string=1082.22)
2015/08/29 01:16:54 977186277%!(EXTRA string=0.00)
2015/08/29 01:16:54 977186277%!(EXTRA string=0.06)
2015/08/29 01:16:54 977367193%!(EXTRA string=0.00)
2015/08/29 01:16:55 977367193%!(EXTRA string=56.33)
2015/08/29 01:16:55 46374447%!(EXTRA string=0.00)
2015/08/29 01:16:55 46374447%!(EXTRA string=0.28)
2015/08/29 01:16:55 869929721%!(EXTRA string=1176.83)
2015/08/29 01:16:55 46916778%!(EXTRA string=0.00)
2015/08/29 01:16:55 66407207%!(EXTRA string=0.00)
2015/08/29 01:16:55 80231754%!(EXTRA string=0.00)
2015/08/29 01:16:55 66407207%!(EXTRA string=13.88)
2015/08/29 01:16:55 80231754%!(EXTRA string=12.10)
2015/08/29 01:16:55 99556642%!(EXTRA string=0.00)
2015/08/29 01:16:55 105395202%!(EXTRA string=0.00)
2015/08/29 01:16:55 121157010%!(EXTRA string=0.00)
2015/08/29 01:16:55 105395202%!(EXTRA string=15.83)
2015/08/29 01:16:55 121157010%!(EXTRA string=12.82)
2015/08/29 01:16:55 134107839%!(EXTRA string=0.00)
2015/08/29 01:16:55 134107839%!(EXTRA string=15.98)
2015/08/29 01:16:55 162712352%!(EXTRA string=0.00)
2015/08/29 01:16:55 162712352%!(EXTRA string=16.46)
2015/08/29 01:16:55 179288920%!(EXTRA string=0.00)
2015/08/29 01:16:55 194490367%!(EXTRA string=0.00)
2015/08/29 01:16:55 202206415%!(EXTRA string=0.00)
2015/08/29 01:16:55 49113060%!(EXTRA string=1165.79)
2015/08/29 01:16:55 473214551%!(EXTRA string=1760.64)
2015/08/29 01:16:55 239858481%!(EXTRA string=0.00)
2015/08/29 01:16:55 32855481%!(EXTRA string=1213.72)
2015/08/29 01:16:55 56811869%!(EXTRA string=1231.75)
2015/08/29 01:16:55 295414269%!(EXTRA string=0.00)
2015/08/29 01:16:55 295491576%!(EXTRA string=0.00)
2015/08/29 01:16:55 889729894%!(EXTRA string=423.76)
2015/08/29 01:16:55 891713727%!(EXTRA string=427.99)
2015/08/29 01:16:55 121465765%!(EXTRA string=1204.92)
2015/08/29 01:16:55 904336456%!(EXTRA string=428.21)
2015/08/29 01:16:55 121526643%!(EXTRA string=1233.79)
2015/08/29 01:16:55 310004280%!(EXTRA string=1051.71)
2015/08/29 01:16:55 858909173%!(EXTRA string=2502.90)
2015/08/29 01:16:55 367541741%!(EXTRA string=0.00)
2015/08/29 01:16:55 367541741%!(EXTRA string=18.04)
2015/08/29 01:16:55 393589632%!(EXTRA string=0.00)
2015/08/29 01:16:55 407450080%!(EXTRA string=0.00)
2015/08/29 01:16:55 46916778%!(EXTRA string=378.70)
2015/08/29 01:16:55 896338456%!(EXTRA string=1529.38)
2015/08/29 01:16:55 431101598%!(EXTRA string=0.00)
2015/08/29 01:16:55 431101598%!(EXTRA string=8.42)
2015/08/29 01:16:55 462833623%!(EXTRA string=0.00)
2015/08/29 01:16:55 462833623%!(EXTRA string=13.67)
2015/08/29 01:16:55 484103852%!(EXTRA string=0.00)
2015/08/29 01:16:55 492334586%!(EXTRA string=0.00)
2015/08/29 01:16:55 492410130%!(EXTRA string=0.00)
2015/08/29 01:16:55 492334586%!(EXTRA string=13.06)
2015/08/29 01:16:55 511300492%!(EXTRA string=0.00)
2015/08/29 01:16:55 511300492%!(EXTRA string=19.36)
2015/08/29 01:16:55 537223305%!(EXTRA string=0.00)
2015/08/29 01:16:55 544019226%!(EXTRA string=0.00)
2015/08/29 01:16:55 544019226%!(EXTRA string=16.19)
2015/08/29 01:16:55 560322064%!(EXTRA string=0.00)
2015/08/29 01:16:55 993395050%!(EXTRA string=1566.96)
2015/08/29 01:16:55 560322064%!(EXTRA string=39.26)
2015/08/29 01:16:55 599688803%!(EXTRA string=0.00)
2015/08/29 01:16:55 179288920%!(EXTRA string=421.14)
2015/08/29 01:16:55 157717567%!(EXTRA string=1443.31)
2015/08/29 01:16:55 507398302%!(EXTRA string=1093.78)
2015/08/29 01:16:55 609900746%!(EXTRA string=0.00)
2015/08/29 01:16:55 239858481%!(EXTRA string=370.10)
2015/08/29 01:16:55 609900746%!(EXTRA string=14.23)
2015/08/29 01:16:55 993465302%!(EXTRA string=1644.50)
2015/08/29 01:16:55 655129719%!(EXTRA string=0.00)
2015/08/29 01:16:55 66651321%!(EXTRA string=1601.79)
2015/08/29 01:16:55 521398742%!(EXTRA string=1156.10)
2015/08/29 01:16:55 295491576%!(EXTRA string=382.10)
2015/08/29 01:16:55 295414269%!(EXTRA string=389.39)
2015/08/29 01:16:55 702701065%!(EXTRA string=0.00)
2015/08/29 01:16:55 137363675%!(EXTRA string=1574.04)
2015/08/29 01:16:55 393589632%!(EXTRA string=339.33)
2015/08/29 01:16:55 667631670%!(EXTRA string=1071.18)
2015/08/29 01:16:55 407450080%!(EXTRA string=338.06)
2015/08/29 01:16:55 484103852%!(EXTRA string=293.32)
2015/08/29 01:16:55 786006965%!(EXTRA string=0.00)
2015/08/29 01:16:55 801314950%!(EXTRA string=998.25)
2015/08/29 01:16:55 816438476%!(EXTRA string=1008.98)
2015/08/29 01:16:55 848323630%!(EXTRA string=0.00)
2015/08/29 01:16:55 655129719%!(EXTRA string=225.32)
2015/08/29 01:16:55 900971628%!(EXTRA string=0.00)
2015/08/29 01:16:55 702701065%!(EXTRA string=212.15)
2015/08/29 01:16:55 953092419%!(EXTRA string=0.00)
2015/08/29 01:16:56 786006965%!(EXTRA string=225.37)
2015/08/29 01:16:56 848323630%!(EXTRA string=263.25)
2015/08/29 01:16:56 890430388%!(EXTRA string=1221.25)
2015/08/29 01:16:56 99556642%!(EXTRA string=1013.02)
2015/08/29 01:16:56 599688803%!(EXTRA string=513.94)
2015/08/29 01:16:56 900971628%!(EXTRA string=213.58)
2015/08/29 01:16:56 114683782%!(EXTRA string=0.00)
2015/08/29 01:16:56 194490367%!(EXTRA string=926.51)
2015/08/29 01:16:56 941601994%!(EXTRA string=1179.50)
2015/08/29 01:16:56 202206415%!(EXTRA string=944.82)
2015/08/29 01:16:56 953092419%!(EXTRA string=201.68)
2015/08/29 01:16:56 280223380%!(EXTRA string=0.00)
2015/08/29 01:16:56 926288167%!(EXTRA string=1373.12)
2015/08/29 01:16:56 114683782%!(EXTRA string=213.67)
2015/08/29 01:16:56 365730070%!(EXTRA string=0.00)
2015/08/29 01:16:56 537223305%!(EXTRA string=882.31)
2015/08/29 01:16:56 272782462%!(EXTRA string=4147.48)
2015/08/29 01:16:56 632615696%!(EXTRA string=0.00)
2015/08/29 01:16:56 634781232%!(EXTRA string=0.00)
2015/08/29 01:16:56 280223380%!(EXTRA string=360.50)
2015/08/29 01:16:56 365730070%!(EXTRA string=275.11)
2015/08/29 01:16:56 492410130%!(EXTRA string=1354.29)
2015/08/29 01:16:56 632615696%!(EXTRA string=214.78)
2015/08/29 01:16:56 634781232%!(EXTRA string=219.21)
2015/08/29 01:16:57 65374683%!(EXTRA string=0.00)
2015/08/29 01:16:57 65573396%!(EXTRA string=0.00)
2015/08/29 01:16:57 65374683%!(EXTRA string=300.96)
2015/08/29 01:16:57 53842402%!(EXTRA string=5317.02)
2015/08/29 01:16:57 65573396%!(EXTRA string=305.82)
2015/08/29 01:16:58 26171685%!(EXTRA string=10149.46)
",8237
568,32281591,"{
   ""Field1"":{
      ""Key1"":""HHHHHH"",
      ""Key2"":""[branch code]"",
      ""Key3"":""HHHHHHtest""
   },
   ""Field2"":{
      ""Key1"":""HHH""
   },
   ""Field3"":{
      ""Key1"":[
         {
            ""Value1"":0,
            ""Value2"":""HHHHHHH"",
            ""Value3"":""HHH""
         },
         {
            ""Value1"":0,
            ""Value2"":""HHHH"",
            ""Value3"":""HH""
         },
         {
            ""Value1"":1,
            ""Value2"":""HHHHHHHHHHHHH"",
            ""Value3"":""""
         },
         {
            ""Value1"":1,
            ""Value2"":""HHHHHHHHHHHHHHHHHHH"",
            ""Value3"":""1""
         },
         {
            ""Value1"":2,
            ""Value2"":""HHHHHHHHHHHHHHHHHHHH"",
            ""Value3"":""3""
         },
         {
            ""Value1"":2,
            ""Value2"":""HHHHHHHH"",
            ""Value3"":""1""
         },
         {
            ""Value1"":1,
            ""Value2"":""HHHHHHHHHHHHH"",
            ""Value3"":""4""
         },
         {
            ""Value1"":2,
            ""Value2"":""HHHHHHHHHHHH"",
            ""Value3"":""BB""
         }
      ]
   },
   ""Field4"":{
      ""key1"":11111111,
      ""key2"":11111111
   },
   ""Field5"":{
      ""key1"":[
         {
            ""Value1"":1,
            ""Value2"":2
         },
         {
            ""Value1"":1,
            ""Value2"":2
         },
         {
            ""Value1"":[
               {
                  ""Value2"":5
               }
            ],
            ""Value1"":1,
            ""Value2"":2,
            ""children3"":1
         }
      ]
   },
   ""Field6"":""HHH_HHHH_HHHHHHHH_HHHH"",
   ""Field7"":""HHHHHHHHHHHHHH_HHHHH"",
   ""Field8"":""4.1"",
   ""Field9"":""12312312""
}
",1620
569,32281711,"{
    ""result"": {
        ""720268538"": {
            ""icon_url"": ""-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXU5A1PIYQNqhpOSV-fRPasw8rsUFJ5KBFZv668FFEuh_KQJTtEuI63xIXbxqOtauyClTMEsJV1jruS89T3iQKx_BBqa2j3JpjVLFH1xpp0EQ"",
            ""icon_url_large"": """",
            ""icon_drag_url"": """",
            ""name"": ""Chroma Case"",
            ""market_hash_name"": ""Chroma Case"",
            ""market_name"": ""Chroma Case"",
            ""name_color"": ""D2D2D2"",
            ""background_color"": """",
            ""type"": ""Base Grade Container"",
            ""tradable"": ""1"",
            ""marketable"": ""1"",
            ""commodity"": ""1"",
            ""market_tradable_restriction"": ""7"",
            ""fraudwarnings"": """",
            ""descriptions"": {
                ""0"": {
                    ""type"": ""html"",
                    ""value"": "" "",
                    ""app_data"": """"
                },
                ""1"": {
                    ""type"": ""html"",
                    ""value"": ""Container Series #38"",
                    ""color"": ""99ccff"",
                    ""app_data"": """"
                },
                ""2"": {
                    ""type"": ""html"",
                    ""value"": "" "",
                    ""app_data"": """"
                },
                ""3"": {
                    ""type"": ""html"",
                    ""value"": ""Contains one of the following:"",
                    ""app_data"": """"
                },
                ""4"": {
                    ""type"": ""html"",
                    ""value"": ""Glock-18 | Catacombs"",
                    ""color"": ""4b69ff"",
                    ""app_data"": """"
                },
                ""5"": {
                    ""type"": ""html"",
                    ""value"": ""M249 | System Lock"",
                    ""color"": ""4b69ff"",
                    ""app_data"": """"
                },
                ""6"": {
                    ""type"": ""html"",
                    ""value"": ""MP9 | Deadly Poison"",
                    ""color"": ""4b69ff"",
                    ""app_data"": """"
                },
                ""7"": {
                    ""type"": ""html"",
                    ""value"": ""SCAR-20 | Grotto"",
                    ""color"": ""4b69ff"",
                    ""app_data"": """"
                },
                ""8"": {
                    ""type"": ""html"",
                    ""value"": ""XM1014 | Quicksilver"",
                    ""color"": ""4b69ff"",
                    ""app_data"": """"
                },
                ""9"": {
                    ""type"": ""html"",
                    ""value"": ""Dual Berettas | Urban Shock"",
                    ""color"": ""8847ff"",
                    ""app_data"": """"
                },
                ""10"": {
                    ""type"": ""html"",
                    ""value"": ""Desert Eagle | Naga"",
                    ""color"": ""8847ff"",
                    ""app_data"": """"
                },
                ""11"": {
                    ""type"": ""html"",
                    ""value"": ""MAC-10 | Malachite"",
                    ""color"": ""8847ff"",
                    ""app_data"": """"
                },
                ""12"": {
                    ""type"": ""html"",
                    ""value"": ""Sawed-Off | Serenity"",
                    ""color"": ""8847ff"",
                    ""app_data"": """"
                },
                ""13"": {
                    ""type"": ""html"",
                    ""value"": ""AK-47 | Cartel"",
                    ""color"": ""d32ce6"",
                    ""app_data"": """"
                },
                ""14"": {
                    ""type"": ""html"",
                    ""value"": ""M4A4 | 龍王 (Dragon King)"",
                    ""color"": ""d32ce6"",
                    ""app_data"": """"
                },
                ""15"": {
                    ""type"": ""html"",
                    ""value"": ""P250 | Muertos"",
                    ""color"": ""d32ce6"",
                    ""app_data"": """"
                },
                ""16"": {
                    ""type"": ""html"",
                    ""value"": ""AWP | Man-o'-war"",
                    ""color"": ""eb4b4b"",
                    ""app_data"": """"
                },
                ""17"": {
                    ""type"": ""html"",
                    ""value"": ""Galil AR | Chatterbox"",
                    ""color"": ""eb4b4b"",
                    ""app_data"": """"
                },
                ""18"": {
                    ""type"": ""html"",
                    ""value"": ""or an Exceedingly Rare Special Item!"",
                    ""color"": ""ffd700"",
                    ""app_data"": """"
                },
                ""19"": {
                    ""type"": ""html"",
                    ""value"": "" "",
                    ""app_data"": """"
                },
                ""20"": {
                    ""type"": ""html"",
                    ""value"": """",
                    ""color"": ""00a000"",
                    ""app_data"": {
                        ""limited"": ""1""
                    }
                }
            },
            ""owner_descriptions"": """",
            ""tags"": {
                ""0"": {
                    ""internal_name"": ""CSGO_Type_WeaponCase"",
                    ""name"": ""Container"",
                    ""category"": ""Type"",
                    ""category_name"": ""Type""
                },
                ""1"": {
                    ""internal_name"": ""set_community_6"",
                    ""name"": ""The Chroma Collection"",
                    ""category"": ""ItemSet"",
                    ""category_name"": ""Collection""
                },
                ""2"": {
                    ""internal_name"": ""normal"",
                    ""name"": ""Normal"",
                    ""category"": ""Quality"",
                    ""category_name"": ""Category""
                },
                ""3"": {
                    ""internal_name"": ""Rarity_Common"",
                    ""name"": ""Base Grade"",
                    ""category"": ""Rarity"",
                    ""color"": ""b0c3d9"",
                    ""category_name"": ""Quality""
                }
            },
            ""classid"": ""720268538""
        },
        ""success"": true
    }
}
",6031
570,32281711,"type AssetInfo struct {
    Result `json:""result""`
}

type Result struct {
    Asset   map[string]Asset `json:""asset""`
    Success bool             `json:""success,omitempty""`
}

type Asset struct {
    IconUrl           string                   `json:""icon_url,omitempty""`
    IconUrlLarge      string                   `json:""icon_url_large,omitempty""`
    IconDragUrl       string                   `json:""icon_drag_url,omitempty""`
    Name              string                   `json:""name,omitempty""`
    MarketHashName    string                   `json:""market_hash_name,omitempty""`
    MarketName        string                   `json:""market_name,omitempty""`
    NameColor         string                   `json:""name_color,omitempty""`
    BGColor           string                   `json:""background_color,omitempty""`
    Type              string                   `json:""type,omitempty""`
    Tradable          string                   `json:""tradable,omitempty""`
    Marketable        string                   `json:""marketable,omitempty""`
    Commodity         string                   `json:""commodity,omitempty""`
    TradeRestrict     string                   `json:""market_tradeable_restriction,omitempty""`
    FraudWarnings     string                   `json:""fraudwarnings,omitempty""`
    Descriptions      map[string]*Descriptions `json:""descriptions,omitempty""`
    OwnerDescriptions string                   `json:""owner_descriptions,omitempty""`
    Tags              map[string]*Tags         `json:""tags,omitempty""`
    ClassId           string                   `json:""classid,omitempty""`
}

type Descriptions struct {
    Type    string `json:""type""`
    Value   string `json:""value""`
    Color   string `json:""color,omitempty""`
    AppData string `json:""appdata""`
}

type Tags struct {
    InternalName string `json:""internal_name""`
    Name         string `json:""name""`
    Category     string `json:""category""`
    Color        string `json:""color,omitempty""`
    CategoryName string `json:""category_name""`
}
",2033
571,32281711,result,6
572,32281711,"""720616831""",11
573,32370700,"package main

import (
    //  ""bytes""
    ""encoding/binary""
    ""fmt""
    ""io""
    ""net""
    ""os""
    ""os/exec""
    ""runtime/trace""
    ""time""
    ""unsafe""
)

type TheMessageType struct {
    X             int32
    RestOfMessage [1000]byte
}

func listener(theCounter int, active bool, f *os.File) {
    var message TheMessageType
    var err error
    var conn net.Conn

    count := theCounter

    for {
        // Dial the server
        fmt.Printf(""LISTENER %d: connecting to socket\n"", count)
        conn, err = net.Dial(""tcp"", ""192.168.1.113:49152"")
        if err != nil {
            fmt.Printf(""LISTENER %d: not connected, retrying in 3 seconds\n"", count)
            time.Sleep(3 * time.Second)
        } else {
            fmt.Printf(""LISTENER %d: connected\n"", count)
            break
        }
    }
    defer conn.Close()

    // Loop writing to socket
    for {
        // Set deadline
        // conn.SetDeadline(time.Now().Add(2 * time.Second))

        // Print some info
        fmt.Printf(""LISTENER %d: writing from %v to %v\n"", count, conn.LocalAddr(), conn.RemoteAddr())

        // Prepare message to write to socket
        message.X = int32(count)
        theString := fmt.Sprintf(""%d"", count)
        copy(message.RestOfMessage[:], theString)

        // binary write directly to socket
        fmt.Printf(""LISTENER %d: binary.Write this: %d, %s\n"", count, message.X, message.RestOfMessage)

        f.Sync()
        err = binary.Write(conn, binary.LittleEndian, message)

        f.Sync()
        fmt.Printf(""LISTENER %d: written\n"", count)
        // time.Sleep(50 * time.Millisecond)
        checkError(err, ""LISTENER"")

        count = count + 1
    }
}

func main() {
    var myMessage TheMessageType
    var ln net.Listener
    var conn net.Conn
    var err error
    var theCount int
    var avgspeed, speed float64
    var speedlist [10]float64

    curspeed := 0

    const listenerActive = true
    const mainActive = false

    f, err := os.Create(""theFile.out"")
    trace.Start(f)

    t0 := time.Now()
    t1 := time.Now()

    transferSize := unsafe.Sizeof(myMessage)

    fmt.Printf(""MAIN: timestamp %s ; size of transfers is %d\n"", t0.String(), transferSize)

    if mainActive {
        fmt.Println(""MAIN: listen"")
        ln, err = net.Listen(""tcp"", "":49152"")
        fmt.Println(""MAIN: defer"")
        defer ln.Close()
        fmt.Println(""MAIN: checkError"")
        checkError(err, ""MAIN"")
    }

    // launch listener
    if listenerActive {
        go listener(theCount, listenerActive, f)
    }

    for theCount = 1; ; theCount++ {

        if mainActive {
            fmt.Println(""MAIN: accept"")
            conn, err = ln.Accept()
            checkError(err, ""MAIN"")

            exit := false

            for !exit {
                // Set deadline
                // conn.SetDeadline(time.Now().Add(2 * time.Second))

                // Print some info
                fmt.Printf(""MAIN: reading on %v from %v\n"", conn.LocalAddr(), conn.RemoteAddr())

                // move time
                t0 = t1

                // read from socket
                fmt.Println(""MAIN: reader"")

                f.Sync()
                err = binary.Read(conn, binary.LittleEndian, &myMessage)

                f.Sync()
                if err == io.EOF {
                    fmt.Println(""EOF!"")
                    exit = true
                    conn.Close()
                } else {
                    checkError(err, ""MAIN"")
                }

                // clear screen
                c := exec.Command(""clear"")
                c.Stdout = os.Stdout
                c.Run()

                // print received data
                fmt.Printf(""MAIN: socket message received: %d, %s\n"", myMessage.X, myMessage.RestOfMessage)

                // calculate speed & average
                t1 = time.Now()
                tdif := t1.Sub(t0)
                speed = float64(transferSize) / tdif.Seconds() / 1000000.0 * 8.0
                speedlist[curspeed] = speed
                curspeed = curspeed + 1
                if curspeed == 10 {
                    curspeed = 0
                }
                totalspeed := 0.0
                for i := 0; i < 10; i++ {
                    totalspeed += speedlist[i]
                }
                avgspeed = totalspeed / 10

                // print speed
                fmt.Printf(""MAIN: avg mbit/s %9.2f ; actual mbit/s: %9.2f\n"", avgspeed, speed)
                // time.Sleep(1 * time.Second)
            }
        }
    }
}

func checkError(err error, name string) {
    if err != nil {
        fmt.Fprintf(os.Stderr, ""%s: Fatal error: %s\n"", name, err.Error())
        //      panic(fmt.Sprintf(""%v"", err.Error()))
        os.Exit(1)
    }
}
",4757
574,32370700,"goroutine 1 [running]:
runtime.throw(0x1927b8, 0x5)
    /usr/local/go/src/runtime/panic.go:527 +0x90 fp=0xc82004bd78 sp=0xc82004bd60
runtime.sigpanic()
    /usr/local/go/src/runtime/sigpanic_unix.go:27 +0x2ba fp=0xc82004bdc8 sp=0xc82004bd78
main.main()
    /Users/ple/dev/go/src/Peter-test/main.go:108 +0x33c fp=0xc82004bf50 sp=0xc82004bdc8
runtime.main()
    /usr/local/go/src/runtime/proc.go:111 +0x2b0 fp=0xc82004bfa0 sp=0xc82004bf50
runtime.goexit()
    /usr/local/go/src/runtime/asm_amd64.s:1696 +0x1 fp=0xc82004bfa8 sp=0xc82004bfa0

goroutine 17 [syscall, locked to thread]:
runtime.goexit()
    /usr/local/go/src/runtime/asm_amd64.s:1696 +0x1

goroutine 5 [trace reader (blocked)]:
runtime.ReadTrace(0x0, 0x0, 0x0)
    /usr/local/go/src/runtime/trace.go:339 +0x207
runtime/trace.Start.func1(0x5a42e0, 0xc82002a020)
    /usr/local/go/src/runtime/trace/trace.go:28 +0x18
created by runtime/trace.Start
    /usr/local/go/src/runtime/trace/trace.go:34 +0x78

goroutine 6 [runnable]:
reflect.Value.Index(0x1234c0, 0xc8204ac004, 0x51, 0x75, 0x12ac00, 0xc8204ac078, 0x48)
    /usr/local/go/src/reflect/value.go:823
encoding/binary.(*encoder).value(0xc8200475a0, 0x1234c0, 0xc8204ac004, 0x51)
    /usr/local/go/src/encoding/binary/binary.go:509 +0x808
encoding/binary.(*encoder).value(0xc8200475a0, 0x162ba0, 0xc8204ac000, 0x59)
    /usr/local/go/src/encoding/binary/binary.go:518 +0xb4f
encoding/binary.Write(0x621138, 0xc8200a2000, 0x621160, 0x289ef0, 0x162ba0, 0xc8204ac000, 0x0, 0x0)
    /usr/local/go/src/encoding/binary/binary.go:316 +0x1792
main.listener(0x0, 0x1, 0xc82002a020)
    /Users/ple/dev/go/src/Peter-test/main.go:59 +0xac8
created by main.main
    /Users/ple/dev/go/src/Peter-test/main.go:105 +0x332
",1717
575,32426216,"   TRACE 2015/09/06 17:37:47 harness.go:126: Rebuild                                                                                                  
   INFO  2015/09/06 17:37:47 build.go:172: Cleaning dir tmp                                                                                           
   INFO  2015/09/06 17:37:47 build.go:172: Cleaning dir routes                                                                                        
   INFO  2015/09/06 17:37:47 build.go:172: Cleaning dir tmp                                                                                           
   INFO  2015/09/06 17:37:47 build.go:172: Cleaning dir routes                                                                                        
   TRACE 2015/09/06 17:37:47 build.go:151: Exec: [/usr/bin/git --git-   dir=/home/fusspawn/go/src/github.com/fusspawn/tserver/.git describe --always --   dirty]                                                                                                                                               
   TRACE 2015/09/06 17:37:47 build.go:94: Exec: [/usr/bin/go build -ldflags    -X github.com/fusspawn/tserver/app.APP_VERSION ""git-2588ef1"" -tags  -o /ho
  me/fusspawn/go/bin/revel.d/github.com/fusspawn/tserver/tserver   github.com/fusspawn/tserver/app/tmp]                                                
   TRACE 2015/09/06 17:39:14 app.go:56: Exec app:   /home/fusspawn/go/bin/revel.d/github.com/fusspawn/tserver/tserver    [/home/fusspawn/go/bin/revel.d/git
   hub.com/fusspawn/tserver/tserver -port=46276 -  importPath=github.com/fusspawn/tserver -runMode=dev]                                                 
   INFO  2015/09/06 17:39:14 revel.go:329: Loaded module static                                                                                       
   INFO  2015/09/06 17:39:14 revel.go:329: Loaded module testrunner                                                                                   
   INFO  2015/09/06 17:39:14 revel.go:206: Initialized Revel v0.12.0 (2015-03-25) for >= go1.3                                                        
   INFO  2015/09/06 17:39:14 main.go:30: Running revel server                                                                                         
   TRACE 2015/09/06 17:39:14 controller.go:402: Registered controller: App                                                                            
   panic: reflect: call of reflect.Value.Type on zero Value                                                                                           

   goroutine 1 [running]:                                                                                                                             
   runtime.panic(0x88cec0, 0xc21011b7a0)                                                                                                              
    /usr/lib/go/src/pkg/runtime/panic.c:266 +0xb6                                                                                              
   reflect.Value.Type(0x0, 0x0, 0x0, 0x0, 0x0)                                                                                                        
    /usr/lib/go/src/pkg/reflect/value.go:1698 +0x79                                                                                            
    github.com/revel/revel.findControllers(0x7f365698bea8, 0x9186e0, 0x0, 0x0, 0x0)                                                                    
    /home/fusspawn/go/src/github.com/revel/revel/controller.go:321 +0x25a                                                                      
    github.com/revel/revel.RegisterController(0x9172a0, 0x0, 0xc2100c4bf0,    0x2, 0x2)                                                                   
     /home/fusspawn/go/src/github.com/revel/revel/controller.go:400 +0x1f3                                                                      
    main.main()                                                                                                                                        
     /home/fusspawn/go/src/github.com/fusspawn/tserver/app/tmp/main.go:150  +0x141b                                                              
     TRACE 2015/09/06 17:39:14 controller.go:402: Registered controller:     GormController                                                                 
     TRACE 2015/09/06 17:39:14 controller.go:402: Registered controller: Static                                                                         
     TRACE 2015/09/06 17:39:14 controller.go:402: Registered controller:  TestRunner             
",4624
576,32501784,"func cities(w http.ResponseWriter, r *http.Request, _ httprouter.Params) error {
    var main string
    var secondary string
    var limit string
    queryParams := make(map[string]interface{})

    if k := r.PostFormValue(""keyword""); k != """" {
        main = ""city.name LIKE :keyword""
        queryParams[""keyword""] = k + ""%""
    }

    if sk := r.PostFormValue(""secondaryKeyword""); sk != """" && sk != ""null"" {
        secondary = ""OR city.name = :secondaryKeyword""
        queryParams[""secondaryKeyword""] = sk
    }

    if mr := r.PostFormValue(""maxResults""); mr != """" {
        limit = ""LIMIT :maxResults""
        queryParams[""maxResults""] = mr
    }

    if lr := r.PostFormValue(""lastRequest""); lr != """" && lr == ""1"" {
        limit = """"
    }

    query := fmt.Sprintf(`
        SELECT
            city.geonameid AS cityId,
            city.name AS cityName,
            COALESCE(admin1.name_local, '') AS admin1Name,
            country.name AS countryName,
            CONCAT_WS(' ', city.name, city.asciiname, country.name) AS searchString
        FROM geonames_cities1000 AS city
            INNER JOIN geonames_countryinfo AS country
                ON city.iso_alpha2 = country.iso_alpha2
            LEFT OUTER JOIN geonames_admin1_codes_ascii as admin1
                ON admin1.code = CONCAT(city.iso_alpha2, '.', city.admin1_code)
        WHERE %s %s
        ORDER BY city.name ASC %s;
    `, main, secondary, limit)

    nstmt, err := sql.DB.PrepareNamed(query)
    if err != nil {
        return err
    }

    rows, err := nstmt.Queryx(queryParams)
    if err != nil {
        return err
    }

    results := []interface{}{}

    for rows.Next() {
        row := make(map[string]interface{})
        err := rows.MapScan(row)
        if err != nil {
            return err
        }
        results = append(results, row)
    }

    b, err := json.Marshal(results)
    if err != nil {
        return err
    }
    w.Write(b)
    return nil
}
",1962
577,32501784,"keyword: ""tron""
maxResults: 7
lastRequest: 0
",45
578,32501784,"[
    {
        ""admin1Name"": ""VXR0YXJhZGl0"",
        ""cityId"": 1605268,
        ""cityName"": ""VHJvbg=="",
        ""countryName"": ""VGhhaWxhbmQ="",
        ""searchString"": ""VHJvbiBUcm9uIFRoYWlsYW5k""
    },
    {
        ""admin1Name"": ""Q2FsYWJyaWE="",
        ""cityId"": 8949073,
        ""cityName"": ""VHJvbmNh"",
        ""countryName"": ""SXRhbHk="",
        ""searchString"": ""VHJvbmNhIFRyb25jYSBJdGFseQ==""
    },
    {
        ""admin1Name"": ""QXJhZ29u"",
        ""cityId"": 3107444,
        ""cityName"": ""VHJvbmNow7Nu"",
        ""countryName"": ""U3BhaW4="",
        ""searchString"": ""VHJvbmNow7NuIFRyb25jaG9uIFNwYWlu""
    },
    {
        ""admin1Name"": ""UHVlYmxh"",
        ""cityId"": 8859151,
        ""cityName"": ""VHJvbmNvbmFs"",
        ""countryName"": ""TWV4aWNv"",
        ""searchString"": ""VHJvbmNvbmFsIFRyb25jb25hbCBNZXhpY28=""
    },
    {
        ""admin1Name"": ""U2NobGVzd2lnLUhvbHN0ZWlu"",
        ""cityId"": 2821000,
        ""cityName"": ""VHLDtm5kZWw="",
        ""countryName"": ""R2VybWFueQ=="",
        ""searchString"": ""VHLDtm5kZWwgVHJvbmRlbCBHZXJtYW55""
    },
    {
        ""admin1Name"": ""U8O4ci1UcsO4bmRlbGFn"",
        ""cityId"": 3133880,
        ""cityName"": ""VHJvbmRoZWlt"",
        ""countryName"": ""Tm9yd2F5"",
        ""searchString"": ""VHJvbmRoZWltIFRyb25kaGVpbSBOb3J3YXk=""
    },
    {
        ""admin1Name"": ""VG9uZ3Nh"",
        ""cityId"": 1252408,
        ""cityName"": ""VHJvbmdzYQ=="",
        ""countryName"": ""Qmh1dGFu"",
        ""searchString"": ""VHJvbmdzYSBUcm9uZ3NhIEJodXRhbg==""
    }
]
",1463
579,32501784,"(map[string]interface {}) (len=5) {
  (string) (len=11) ""countryName"": ([]uint8) (len=6 cap=6) {
   00000000  4e 6f 72 77 61 79                                 |Norway|
  },
  (string) (len=12) ""searchString"": ([]uint8) (len=26 cap=26) {
   00000000  54 72 6f 6e 64 68 65 69  6d 20 54 72 6f 6e 64 68  |Trondheim Trondh|
   00000010  65 69 6d 20 4e 6f 72 77  61 79                    |eim Norway|
  },
  (string) (len=6) ""cityId"": (int64) 3133880,
  (string) (len=8) ""cityName"": ([]uint8) (len=9 cap=9) {
   00000000  54 72 6f 6e 64 68 65 69  6d                       |Trondheim|
  },
  (string) (len=10) ""admin1Name"": ([]uint8) (len=15 cap=15) {
   00000000  53 c3 b8 72 2d 54 72 c3  b8 6e 64 65 6c 61 67     |S..r-Tr..ndelag|
  }
",731
580,32501784,"type City struct {
    AdminName    string `json:""admin1Name""   db:""admin1Name""`
    CityID       int64  `json:""cityId""       db:""cityId""`
    CityName     string `json:""cityName""     db:""cityName""`
    CountryName  string `json:""countryName""  db:""countryName""`
    SearchString string `json:""searchString"" db:""searchString""`
}
",328
581,32501784,"type City struct {
    CityId       int64  `json:""cityId""       db:""cityId""`
    CityName     string `json:""cityName""     db:""cityName""`
    Admin1Name   string `json:""admin1Name""   db:""admin1Name""`
    CountryName  string `json:""countryName""  db:""countryName""`
    SearchString string `json:""searchString"" db:""searchString""`
}
",328
582,32518539,"curl --interface 111.222.333.444 https://www.iplocation.net/find-ip-address | grep ""Your IP address""
",101
583,32518539,111.222.333.444,15
584,32518539,golang,6
585,32518539,"package main

import (
    ""bytes""
    ""fmt""
    ""github.com/PuerkitoBio/goquery""
    ""io/ioutil""
    ""net""
    ""net/http""
    ""os""
    ""time""
)

func main() {
    var localAddr = ""111.222.333.444""
    localAddress, _ := net.ResolveTCPAddr(""tcp"", localAddr)

    // Create a transport like http.DefaultTransport, but with a specified localAddr
    transport := &http.Transport{
        Proxy: http.ProxyFromEnvironment,
        Dial: (&net.Dialer{
            Timeout:   30 * time.Second,
            KeepAlive: 30 * time.Second,
            LocalAddr: localAddress,
        }).Dial,
        TLSHandshakeTimeout: 10 * time.Second,
    }

    client := &http.Client{
        Transport: transport,
    }

    response, err := client.Get(""https://www.whatismyip.com/"")

    if err != nil {
        fmt.Printf(""%s"", err)
        os.Exit(1)
    } else {
        defer response.Body.Close()
        contents, err := ioutil.ReadAll(response.Body)
        if err != nil {
            fmt.Printf(""%s"", err)
            os.Exit(1)
        }
        var contentsStr = string(contents)
        fmt.Printf(""%s\n"", contentsStr)
        var doc = DocByHtmlString(contentsStr)

        doc.Find(""div"").Each(func(i int, s *goquery.Selection) {
            attr, exists := s.Attr(""class"")
            if exists {
                if attr == ""ip"" {
                    fmt.Println(s.Text())
                    fmt.Println(""expected ip is "" + localAddr)
                }
            }
        })
    }
}

func DocByHtmlString(html string) *goquery.Document {
    doc, err := goquery.NewDocumentFromReader(bytes.NewBufferString(html))
    if err != nil {
        panic(err)
    }
    return doc
}
",1677
586,32518539,"Your IP Address Is: 555.666.777.888 // main IP address on my machine
expected ip is 111.222.333.444
",100
587,32518539,"package main

import (
    ""fmt""
    ""io/ioutil""
    ""log""
    ""net""
)

func main() {
    ief, err := net.InterfaceByName(""eth0"")
    if err != nil {
        log.Fatal(err)
    }
    addrs, err := ief.Addrs()
    if err != nil {
        log.Fatal(err)
    }
    tcpAddr := &net.TCPAddr{
        IP: addrs[3].(*net.IPNet).IP,
        // Port: 8080,
    }
    d := net.Dialer{LocalAddr: tcpAddr}
    conn, err2 := d.Dial(""tcp"", ""www.whatismyip.com:80"")
    if err2 != nil {
        log.Fatal(err2)
    }
    fmt.Println(`conn.LocalAddr()`)
    fmt.Println(conn.LocalAddr())
    fmt.Println(`conn.RemoteAddr()`)
    fmt.Println(conn.RemoteAddr())
    defer conn.Close()
    bytesResult, err3 := ioutil.ReadAll(conn)
    if err3 != nil {
        log.Fatal(err3)
    }
    fmt.Println(`string(bytesResult)`)
    fmt.Println(string(bytesResult))
}
",842
588,32518539,"conn.LocalAddr()
111.222.333.213:37036 
conn.RemoteAddr()
141.101.120.15:80
                     // 15 seconds pause
string(bytesResult)
                     // empty string
",174
589,32518539,"$ ifconfig
eth0      Link encap:Ethernet  HWaddr 00:18:3c:96:69:8c  
          inet addr:111.222.333.208  Bcast:111.222.333.255  Mask:255.255.255.0
          inet6 addr: de90::216:3cff:fe56:698c/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:942000 errors:0 dropped:0 overruns:0 frame:0
          TX packets:336708 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:133860794 (133.8 MB)  TX bytes:84577381 (84.5 MB)

eth0:0    Link encap:Ethernet  HWaddr 00:18:3c:96:69:8c  
          inet addr:111.222.333.209  Bcast:111.222.333.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth0:1    Link encap:Ethernet  HWaddr 00:18:3c:96:69:8c  
          inet addr:111.222.333.212  Bcast:111.222.333.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth0:2    Link encap:Ethernet  HWaddr 00:18:3c:96:69:8c  
          inet addr:111.222.333.213  Bcast:111.222.333.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth0:3    Link encap:Ethernet  HWaddr 00:18:3c:96:69:8c  
          inet addr:111.222.333.216  Bcast:111.222.333.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth0:4    Link encap:Ethernet  HWaddr 00:18:3c:96:69:8c  
          inet addr:111.222.333.217  Bcast:111.222.333.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth0:5    Link encap:Ethernet  HWaddr 00:18:3c:96:69:8c  
          inet addr:111.222.333.220  Bcast:111.222.333.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth0:6    Link encap:Ethernet  HWaddr 00:18:3c:96:69:8c  
          inet addr:111.222.333.221  Bcast:111.222.333.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth0:7    Link encap:Ethernet  HWaddr 00:18:3c:96:69:8c  
          inet addr:111.222.333.224  Bcast:111.222.333.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth0:8    Link encap:Ethernet  HWaddr 00:18:3c:96:69:8c  
          inet addr:111.222.333.225  Bcast:111.222.333.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
",2691
590,32676227,"package main

import (
    ""bytes""
    ""database/sql""
    ""encoding/json""
    ""fmt""
    ""log""
    ""strconv""
    ""strings""
    ""time""

    _ ""github.com/go-sql-driver/mysql""
)

const dbformat = ""2006-01-02 15:04:05""

type MysqlReceipt struct {
    Id               int
    Amount           sql.NullFloat64
    Cc_last4         sql.NullString
    Employee_id      sql.NullString
    Employee_name    sql.NullString
    Is_test          byte
    Menu_items       sql.NullString
    Payable          sql.NullFloat64
    Pos_type         sql.NullString
    Pos_version      sql.NullString
    Punchh_key       string
    Receipt_datetime sql.NullString
    Subtotal_amount  sql.NullFloat64
    Transaction_no   sql.NullString
    Business_id      int
    Location_id      int
    Created_at       string
    Updated_at       sql.NullString
    Revenue_code     sql.NullString
    Revenue_id       sql.NullString
    Status           sql.NullString
    Ipv4_addr        sql.NullString
}

type Menu_item struct {
    id, name, family, major_group, item_type string
    qty                                      int
    amount                                   float64
}

type BigReceipt struct {
    Id                       int
    Amount                   float64
    Cc_last4                 string
    Employee_id              string `json:"",omitempty""`
    Employee_name            string `json:"",omitempty""`
    Is_test                  byte
    Menu_item_name           string
    Menu_item_id             string
    Menu_item_amount         float64
    Menu_item_family         string
    Menu_item_major_group    string
    Menu_item_type           string
    Menu_item_qty            int
    Payable                  float64
    Pos_type                 string `json:"",omitempty""`
    Pos_version              string `json:"",omitempty""`
    Punchh_key               string
    Receipt_datetime         string
    Subtotal_amount          float64
    Transaction_no           string `json:"",omitempty""`
    Business_id, Location_id int
    Created_at               time.Time
    Updated_at               time.Time `json:"",omitempty""`
    Revenue_code             string    `json:"",omitempty""`
    Revenue_id               string    `json:"",omitempty""`
    Status                   string    `json:"",omitempty""`
    Ipv4_addr                string    `json:"",omitempty""`
    Stored_at                int64
}

func (m Menu_item) ValidItem() bool {
    if m.item_type == ""M"" || m.item_type == ""D"" {
        return true
    } else {
        return false
    }
}

func main() {
    db, err := sql.Open(""mysql"", ""root:password@tcp(xxxxxxx.us-east-1.rds.amazonaws.com:3306)/db_name_goes_here"")
    if err != nil {
        log.Fatal(err)
    }
    err = db.Ping()
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()
    rows, err := db.Query(`select id,amount,cc_last4,employee_id,employee_name,is_test,menu_items,payable,pos_type,
    pos_version,punchh_key,receipt_datetime,subtotal_amount,transaction_no,business_id,location_id,created_at,
    updated_at,revenue_code,revenue_id,status,ipv4_addr from receipts`)
    if err != nil {
        log.Fatal(err)
    }
    defer rows.Close()
    for rows.Next() {
        var mr MysqlReceipt
        err = rows.Scan(&mr.Id, &mr.Amount, &mr.Cc_last4, &mr.Employee_id, &mr.Employee_name, &mr.Is_test, &mr.Menu_items,
            &mr.Payable, &mr.Pos_type, &mr.Pos_version, &mr.Punchh_key, &mr.Receipt_datetime, &mr.Subtotal_amount, &mr.Transaction_no,
            &mr.Business_id, &mr.Location_id, &mr.Created_at, &mr.Updated_at, &mr.Revenue_code, &mr.Revenue_id, &mr.Status, &mr.Ipv4_addr)
        if err != nil {
            log.Fatal(err)
        }
        if !mr.Menu_items.Valid {
            continue
        }
        r := BigReceipt{Id: mr.Id,
            Amount:           mr.Amount.Float64,
            Cc_last4:         mr.Cc_last4.String,
            Employee_id:      mr.Employee_id.String,
            Employee_name:    mr.Employee_name.String,
            Is_test:          mr.Is_test,
            Payable:          mr.Payable.Float64,
            Pos_type:         mr.Pos_type.String,
            Pos_version:      mr.Pos_version.String,
            Punchh_key:       mr.Punchh_key,
            Receipt_datetime: mr.Receipt_datetime.String,
            Subtotal_amount:  mr.Subtotal_amount.Float64,
            Transaction_no:   mr.Transaction_no.String,
            Business_id:      mr.Business_id,
            Location_id:      mr.Location_id,
            Revenue_code:     mr.Revenue_code.String,
            Revenue_id:       mr.Revenue_id.String,
            Status:           mr.Status.String,
            Ipv4_addr:        mr.Ipv4_addr.String,
            Stored_at:        time.Now().Unix(),
        }
        r.Created_at = datetimeParse(mr.Created_at)
        if mr.Updated_at.Valid {
            r.Updated_at = datetimeParse(mr.Updated_at.String)
        }
        menuItems := strings.Split(mr.Menu_items.String, ""^"")
        items := parseMenuItems(menuItems)
        for _, v := range items {
            r.Menu_item_name = v.name
            r.Menu_item_id = v.id
            r.Menu_item_amount = v.amount
            r.Menu_item_family = v.family
            r.Menu_item_major_group = v.major_group
            r.Menu_item_type = v.item_type
            r.Menu_item_qty = v.qty
            b, err := json.Marshal(r)
            if err != nil {
                log.Fatal(err)
            }
            fmt.Println(r.Id)
            var out bytes.Buffer
            json.Compact(&out, b)
            fmt.Println(string(b))
        }
    }
    err = rows.Err()
    if err != nil {
        log.Fatal(err)
    }
}

func datetimeParse(dateStr string) time.Time {
    datetime, err := time.Parse(dbformat, dateStr)
    if err != nil {
        log.Fatal(err)
    }
    return datetime
}

func parseMenuItems(menuItems []string) []Menu_item {
    var items []Menu_item
    var item Menu_item
    for _, v := range menuItems {
        itemParts := strings.Split(v, ""|"")

        item.name = itemParts[0]
        item.qty, _ = strconv.Atoi(itemParts[1])
        item.amount, _ = strconv.ParseFloat(itemParts[2], 64)
        item.item_type = strings.ToUpper(itemParts[3])
        item.id = itemParts[4]
        item.family = itemParts[5]
        item.major_group = itemParts[6]
        if item.ValidItem() {
            items = append(items, item)
        } else {
            continue
        }
    }
    return items
}
",6496
591,32676227,QUIT,4
592,32676227,"SIGQUIT: quit
PC=0x5fecb m=0

goroutine 0 [idle]:
runtime.mach_semaphore_wait(0xe03, 0x0, 0x0, 0x0, 0x0, 0x407520, 0x52db9, 0xffffffffffffffff, 0x0, 0x7fff5fbff0fc, ...)
    /usr/local/Cellar/go/1.5/libexec/src/runtime/sys_darwin_amd64.s:407 +0xb
runtime.semasleep1(0xffffffffffffffff, 0x0)
    /usr/local/Cellar/go/1.5/libexec/src/runtime/os1_darwin.go:385 +0xe5
runtime.semasleep.func1()
    /usr/local/Cellar/go/1.5/libexec/src/runtime/os1_darwin.go:401 +0x29
runtime.systemstack(0x7fff5fbff100)
    /usr/local/Cellar/go/1.5/libexec/src/runtime/asm_amd64.s:278 +0xab
runtime.semasleep(0xffffffffffffffff, 0x0)
    /usr/local/Cellar/go/1.5/libexec/src/runtime/os1_darwin.go:402 +0x36
runtime.notesleep(0x407970)
    /usr/local/Cellar/go/1.5/libexec/src/runtime/lock_sema.go:169 +0x100
runtime.stopm()
    /usr/local/Cellar/go/1.5/libexec/src/runtime/proc1.go:1128 +0x112
runtime.findrunnable(0xc82001d500, 0x0)
    /usr/local/Cellar/go/1.5/libexec/src/runtime/proc1.go:1530 +0x69e
runtime.schedule()
    /usr/local/Cellar/go/1.5/libexec/src/runtime/proc1.go:1639 +0x267
runtime.park_m(0xc820000180)
    /usr/local/Cellar/go/1.5/libexec/src/runtime/proc1.go:1698 +0x18b
runtime.mcall(0x7fff5fbff280)
    /usr/local/Cellar/go/1.5/libexec/src/runtime/asm_amd64.s:204 +0x5b

goroutine 1 [IO wait]:
net.runtime_pollWait(0x7a1000, 0x72, 0xc82000a2d0)
    /usr/local/Cellar/go/1.5/libexec/src/runtime/netpoll.go:157 +0x60
net.(*pollDesc).Wait(0xc8200a4060, 0x72, 0x0, 0x0)
    /usr/local/Cellar/go/1.5/libexec/src/net/fd_poll_runtime.go:73 +0x3a
net.(*pollDesc).WaitRead(0xc8200a4060, 0x0, 0x0)
    /usr/local/Cellar/go/1.5/libexec/src/net/fd_poll_runtime.go:78 +0x36
net.(*netFD).Read(0xc8200a4000, 0xc820372077, 0x3f89, 0x3f89, 0x0, 0x760050, 0xc82000a2d0)
    /usr/local/Cellar/go/1.5/libexec/src/net/fd_unix.go:232 +0x23a
net.(*conn).Read(0xc8200a6000, 0xc820372077, 0x3f89, 0x3f89, 0x0, 0x0, 0x0)
    /usr/local/Cellar/go/1.5/libexec/src/net/net.go:172 +0xe4
github.com/go-sql-driver/mysql.(*buffer).fill(0xc820080080, 0x102, 0x0, 0x0)
    /Users/gaurish/golang/src/github.com/go-sql-driver/mysql/buffer.go:57 +0x2b5
github.com/go-sql-driver/mysql.(*buffer).readNext(0xc820080080, 0x102, 0x0, 0x0, 0x0, 0x0, 0x0)
    /Users/gaurish/golang/src/github.com/go-sql-driver/mysql/buffer.go:86 +0x55
github.com/go-sql-driver/mysql.(*mysqlConn).readPacket(0xc820080080, 0x0, 0x0, 0x0, 0x0, 0x0)
    /Users/gaurish/golang/src/github.com/go-sql-driver/mysql/packets.go:57 +0x47a
github.com/go-sql-driver/mysql.(*mysqlConn).readUntilEOF(0xc820080080, 0x0, 0x0)
    /Users/gaurish/golang/src/github.com/go-sql-driver/mysql/packets.go:698 +0x2d
github.com/go-sql-driver/mysql.(*mysqlRows).Close(0xc8200a0120, 0x0, 0x0)
    /Users/gaurish/golang/src/github.com/go-sql-driver/mysql/rows.go:67 +0x73
database/sql.(*Rows).Close(0xc8200aa060, 0x0, 0x0)
    /usr/local/Cellar/go/1.5/libexec/src/database/sql/sql.go:1710 +0x92
main.parseMenuItems(0xc82036e480, 0x44, 0x44, 0x0, 0x0, 0x0)
    /Users/gaurish/code/practice/mysql2json/mysql2json.go:186 +0x468
main.main()
    /Users/gaurish/code/practice/mysql2json/mysql2json.go:142 +0xf2e

goroutine 17 [syscall, locked to thread]:
runtime.goexit()
    /usr/local/Cellar/go/1.5/libexec/src/runtime/asm_amd64.s:1696 +0x1

goroutine 5 [chan receive]:
database/sql.(*DB).connectionOpener(0xc820088960)
    /usr/local/Cellar/go/1.5/libexec/src/database/sql/sql.go:634 +0x45
created by database/sql.Open
    /usr/local/Cellar/go/1.5/libexec/src/database/sql/sql.go:481 +0x336

rax    0xe
rbx    0xe03
rcx    0x7fff5fbff088
rdx    0x7fff5fbff100
rdi    0xe03
rsi    0x407520
rbp    0x407860
rsp    0x7fff5fbff088
r8     0x407860
r9     0x0
r10    0x0
r11    0x286
r12    0x2c
r13    0x4fc3ed4b8b0
r14    0x14059837c8b46200
r15    0x38
rip    0x5fecb
rflags 0x286
cs     0x7
fs     0x0
gs     0x0
exit status 2
",3833
593,32676227,defer rows.Close(),18
594,32676227,"panic: runtime error: index out of range

goroutine 1 [running]:
main.parseMenuItems(0xc820366900, 0x44, 0x44, 0x0, 0x0, 0x0)
    /Users/gaurish/code/practice/mysql2json/mysql2json.go:186 +0x468
main.main()
    /Users/gaurish/code/practice/mysql2json/mysql2json.go:142 +0xf03

goroutine 17 [syscall, locked to thread]:
runtime.goexit()
    /usr/local/Cellar/go/1.5/libexec/src/runtime/asm_amd64.s:1696 +0x1

goroutine 5 [runnable]:
database/sql.(*DB).connectionOpener(0xc820088780)
    /usr/local/Cellar/go/1.5/libexec/src/database/sql/sql.go:634 +0x45
created by database/sql.Open
    /usr/local/Cellar/go/1.5/libexec/src/database/sql/sql.go:481 +0x336
exit status 2
",668
595,32676227,defer rows.Close(),18
596,33326587,8,1
597,33326587,make,4
598,33326587,7 + length,10
599,33326587,make,4
600,33326587,make,4
601,33326587,(64*1024),9
602,33326587,(64*1024-1)+length,18
603,33326587,"$ go tool compile -m a_test.go
a_test.go:5: Benchmark1 b does not escape
a_test.go:7: Benchmark1 make([]byte, 8) does not escape
a_test.go:14: make([]byte, 7 + length) escapes to heap
a_test.go:11: Benchmark2 b does not escape
$ 
",230
604,33326587,a_test.go,9
605,33326587,"package a

import ""testing""

func Benchmark1(b *testing.B) {
    for n := 0; n < b.N; n++ {
        _ = make([]byte, 8)
    }
}

func Benchmark2(b *testing.B) {
    length := 1
    for n := 0; n < b.N; n++ {
        _ = make([]byte, 7+length)
    }
}
",251
606,33326587,"$ go tool compile -S a_test.go
",31
607,33326587,""""".Benchmark1 t=1 size=112 value=0 args=0x8 locals=0x20
    0x0000 00000 (a_test.go:5)  TEXT    """".Benchmark1(SB), $32-8
    0x0000 00000 (a_test.go:5)  SUBQ    $32, SP
    0x0004 00004 (a_test.go:5)  MOVQ    """".b+40(FP), CX
    0x0009 00009 (a_test.go:5)  FUNCDATA    $0, gclocals·87d20ce1b58390b294df80b886db78bf(SB)
    0x0009 00009 (a_test.go:5)  FUNCDATA    $1, gclocals·790e5cc5051fc0affc980ade09e929ec(SB)
    0x0009 00009 (a_test.go:6)  MOVQ    $0, AX
    0x000b 00011 (a_test.go:6)  NOP
    0x000b 00011 (a_test.go:6)  MOVQ    112(CX), BX
    0x000f 00015 (a_test.go:6)  CMPQ    BX, AX
    0x0012 00018 (a_test.go:6)  JLE $0, 98
    0x0014 00020 (a_test.go:7)  MOVQ    $0, BX
    0x0016 00022 (a_test.go:7)  MOVB    BL, """".autotmp_0001(SP)
    0x0019 00025 (a_test.go:7)  MOVB    BL, """".autotmp_0001+1(SP)
    0x001d 00029 (a_test.go:7)  MOVB    BL, """".autotmp_0001+2(SP)
    0x0021 00033 (a_test.go:7)  MOVB    BL, """".autotmp_0001+3(SP)
    0x0025 00037 (a_test.go:7)  MOVB    BL, """".autotmp_0001+4(SP)
    0x0029 00041 (a_test.go:7)  MOVB    BL, """".autotmp_0001+5(SP)
    0x002d 00045 (a_test.go:7)  MOVB    BL, """".autotmp_0001+6(SP)
    0x0031 00049 (a_test.go:7)  MOVB    BL, """".autotmp_0001+7(SP)
    0x0035 00053 (a_test.go:7)  LEAQ    """".autotmp_0001(SP), BX
    0x0039 00057 (a_test.go:7)  CMPQ    BX, $0
    0x003d 00061 (a_test.go:7)  JEQ $1, 103
    0x003f 00063 (a_test.go:7)  MOVQ    $8, """".autotmp_0002+16(SP)
    0x0048 00072 (a_test.go:7)  MOVQ    $8, """".autotmp_0002+24(SP)
    0x0051 00081 (a_test.go:7)  MOVQ    BX, """".autotmp_0002+8(SP)
    0x0056 00086 (a_test.go:6)  INCQ    AX
    0x0059 00089 (a_test.go:6)  NOP
    0x0059 00089 (a_test.go:6)  MOVQ    112(CX), BX
    0x005d 00093 (a_test.go:6)  CMPQ    BX, AX
    0x0060 00096 (a_test.go:6)  JGT $0, 20
    0x0062 00098 (a_test.go:9)  ADDQ    $32, SP
    0x0066 00102 (a_test.go:9)  RET
    0x0067 00103 (a_test.go:7)  MOVL    AX, (BX)
    0x0069 00105 (a_test.go:7)  JMP 63
",1961
608,33326587,Benchmark2,10
609,33326587,""""".Benchmark2 t=1 size=144 value=0 args=0x8 locals=0x58
    0x0000 00000 (a_test.go:11) TEXT    """".Benchmark2(SB), $88-8
    0x0000 00000 (a_test.go:11) MOVQ    (TLS), CX
    0x0009 00009 (a_test.go:11) CMPQ    SP, 16(CX)
    0x000d 00013 (a_test.go:11) JLS 129
    0x000f 00015 (a_test.go:11) SUBQ    $88, SP
    0x0013 00019 (a_test.go:11) FUNCDATA    $0, gclocals·87d20ce1b58390b294df80b886db78bf(SB)
    0x0013 00019 (a_test.go:11) FUNCDATA    $1, gclocals·790e5cc5051fc0affc980ade09e929ec(SB)
    0x0013 00019 (a_test.go:12) MOVQ    $1, """".length+56(SP)
    0x001c 00028 (a_test.go:13) MOVQ    $0, AX
    0x001e 00030 (a_test.go:13) MOVQ    """".b+96(FP), BP
    0x0023 00035 (a_test.go:13) NOP
    0x0023 00035 (a_test.go:13) MOVQ    112(BP), BX
    0x0027 00039 (a_test.go:13) MOVQ    AX, """".n+48(SP)
    0x002c 00044 (a_test.go:13) CMPQ    BX, AX
    0x002f 00047 (a_test.go:13) JLE $0, 124
    0x0031 00049 (a_test.go:14) MOVQ    """".length+56(SP), AX
    0x0036 00054 (a_test.go:14) ADDQ    $7, AX
    0x003a 00058 (a_test.go:14) LEAQ    type.[]uint8(SB), BX
    0x0041 00065 (a_test.go:14) MOVQ    BX, (SP)
    0x0045 00069 (a_test.go:14) MOVQ    AX, 8(SP)
    0x004a 00074 (a_test.go:14) MOVQ    AX, 16(SP)
    0x004f 00079 (a_test.go:14) PCDATA  $0, $0
    0x004f 00079 (a_test.go:14) CALL    runtime.makeslice(SB)
    0x0054 00084 (a_test.go:14) MOVQ    24(SP), BX
    0x0059 00089 (a_test.go:14) MOVQ    BX, """".autotmp_0005+64(SP)
    0x005e 00094 (a_test.go:14) MOVQ    32(SP), BX
    0x0063 00099 (a_test.go:14) MOVQ    BX, """".autotmp_0005+72(SP)
    0x0068 00104 (a_test.go:14) MOVQ    40(SP), BX
    0x006d 00109 (a_test.go:14) MOVQ    BX, """".autotmp_0005+80(SP)
    0x0072 00114 (a_test.go:13) MOVQ    """".n+48(SP), AX
    0x0077 00119 (a_test.go:13) INCQ    AX
    0x007a 00122 (a_test.go:13) NOP
    0x007a 00122 (a_test.go:13) JMP 30
    0x007c 00124 (a_test.go:16) ADDQ    $88, SP
    0x0080 00128 (a_test.go:16) RET
    0x0081 00129 (a_test.go:11) CALL    runtime.morestack_noctxt(SB)
    0x0086 00134 (a_test.go:11) JMP 0
",2046
610,33339986,github.com/gorilla/securecookie,31
611,33339986,"package main

import (
    ""database/sql""
    ""log""
    ""net/http""
    ""shambhavi/packages/loginPkg""   
    _ ""github.com/go-sql-driver/mysql""
    ""github.com/gorilla/mux""
)

var router = mux.NewRouter()
var db *sql.DB

func connectDb() *sql.DB {
    db, dberr := sql.Open(""mysql"", ""root:root@tcp(127.0.0.1:8889)/shambhavi_db"")
    if dberr != nil {
        log.Println(dberr)
    }
    return db
}
func login(w http.ResponseWriter, r *http.Request) {
    var db *sql.DB = connectDb()
    loginPkg.LoginOperation(w, r, db)

}

func main() {
    http.HandleFunc(""/demo"", login)
    http.Handle(""/"", router)
    err := http.ListenAndServe(port, nil) // setting listening port
if err != nil {
    log.Fatal(""ListenAndServe: "", err)
}
}  
",735
612,33339986,"package loginPkg

import (
    ""database/sql""
    ""encoding/json""
    ""fmt""
    ""net/http""
    ""shambhavi/packages/sessionPkg""

    _ ""github.com/go-sql-driver/mysql""
)

var retMap = make(map[string]string)

func ErrorHandler(err error) {
    if err != nil {
        panic(err)
    }
}

func LoginOperation(w http.ResponseWriter, r *http.Request, db *sql.DB) {
    fmt.Println(""In LoginOperation "")
    r.ParseForm()
    if len(r.Form[""username""][0]) == 0 && len(r.Form[""password""][0]) == 0 {
        fmt.Fprintf(w, ""Something is blank !!!"")
    } else {
        var lvl string
        var uFullName string
        err := db.QueryRow(""SELECT lvl_flag FROM admin_instance WHERE user_name = ? AND passwd = ?"", r.FormValue(""username""), r.FormValue(""password"")).Scan(&lvl)

        er := db.QueryRow(""SELECT emp_name FROM emp_detail WHERE emp_uname = ?"", r.FormValue(""username"")).Scan(&uFullName)
        ErrorHandler(er)
        retMap[""msg""] = ""Login successfully""
        retMap[""err""] = ""Not Login""
        retMap[""lvl""] = lvl
        retMap[""fullName""] = uFullName
        b, _ := json.Marshal(retMap)
        if err != nil {
            fmt.Println(err)
            fmt.Fprintf(w, ""%s"", b)

        } else {
            if lvl == ""1"" || lvl == ""2"" || lvl == ""3"" {
                sessionPkg.SetSession(w, r, r.FormValue(""username""), retMap) // Passing map to the fun, retMap
                fmt.Fprintf(w, ""%s"", b)
                usrnm := sessionPkg.GetUserName(r)
                fmt.Println(""From session variable"", usrnm)
            } else {
                fmt.Println(""Chukala ...."")
                fmt.Fprintf(w, ""%s"", b)
            }   
        }
    }
    defer db.Close()
}
",1689
613,33339986,"package sessionPkg

import (
    ""fmt""
    ""net/http""
    ""time""

    ""github.com/gorilla/securecookie""
)

var cookieHandler = securecookie.New(
    securecookie.GenerateRandomKey(64),
    securecookie.GenerateRandomKey(32))


func SetSession(w http.ResponseWriter, r *http.Request, username string, retMap map[string]string) {

    sessionData := map[string]string{
        ""userName"": username,
        ""lvl"":      retMap[""lvl""],
        ""fullName"": retMap[""fullName""],
    }

    expiration := time.Now().Add(365 * 24 * time.Hour)

    //if encoded, err := cookieHandler.Encode(""session"", sessionData); err == nil {
    cookie := http.Cookie{
        Name:    ""session"",
        Value:   sessionData[""userName""], //Here i want map or something else that can accept multiple values
        Expires: expiration,
        //MaxAge: 3600,
    }

    http.SetCookie(w, &cookie)
    //}
}

func GetUserName(request *http.Request) (userName string) {
    //fmt.Println(request.Cookie(""session""))
    cookieValue := make(map[string]string)
    if cookie, err := request.Cookie(""session""); err == nil {

        fmt.Println(""cookieValue = "", cookie.Value)
        //if err = cookieHandler.Decode(""session"", cookie.Value, &cookieValue); err == nil {
        //fmt.Println(cookie)
        cookieValue[""userName""] = cookie.Value
        //fmt.Println(cookieValue[""userName""])
        //}
        /*else {
            fmt.Println(""Error "", err)
        }*/
    }
    return cookieValue[""userName""]
}

/*func GetFullName(request *http.Request) (fullName string) {
    fmt.Println(""In GetFullName"")
    cookieValue := make(map[string]string)
    if cookie2, err := request.Cookie(""session""); err == nil {

        fmt.Println(""cookieValue = "", cookie2.Value)
        //if err = cookieHandler.Decode(""session"", cookie.Value, &cookieValue); err == nil {
        fmt.Println(cookie2)
        cookieValue[""fullName""] = cookie2.Value
        fmt.Println(cookieValue[""fullName""])
        //}
    }
    return cookieValue[""fullName""]
}*/

func ClearSession(response http.ResponseWriter) {
    cookie := &http.Cookie{
        Name:   ""session"",
        Value:  """",
        Path:   ""/"",
        MaxAge: -1,
    }
    http.SetCookie(response, cookie)
}
",2230
614,33339986,cookieHandler.Encode(),22
615,33339986,cookieHandler.Decode(),22
616,33371270,"package main


import (  
    ""fmt""
    ""strconv""
)


const (
    encodePath encoding = 1 + iota
    encodeHost
    encodeUserPassword
    encodeQueryComponent
    encodeFragment
)

type encoding int
type EscapeError string

func (e EscapeError) Error() string {
    return ""invalid URL escape "" + strconv.Quote(string(e))
}


func ishex(c byte) bool {
    switch {
    case '0' <= c && c <= '9':
        return true
    case 'a' <= c && c <= 'f':
        return true
    case 'A' <= c && c <= 'F':
        return true
    }
    return false
}

func unhex(c byte) byte {
    switch {
    case '0' <= c && c <= '9':
        return c - '0'
    case 'a' <= c && c <= 'f':
        return c - 'a' + 10
    case 'A' <= c && c <= 'F':
        return c - 'A' + 10
    }
    return 0
}



// Return true if the specified character should be escaped when
// appearing in a URL string, according to RFC 3986.
//
// Please be informed that for now shouldEscape does not check all
// reserved characters correctly. See golang.org/issue/5684.
func shouldEscape(c byte, mode encoding) bool {
    // §2.3 Unreserved characters (alphanum)
    if 'A' <= c && c <= 'Z' || 'a' <= c && c <= 'z' || '0' <= c && c <= '9' {
        return false
    }

    if mode == encodeHost {
        // §3.2.2 Host allows
        //  sub-delims = ""!"" / ""$"" / ""&"" / ""'"" / ""("" / "")"" / ""*"" / ""+"" / "","" / "";"" / ""=""
        // as part of reg-name.
        // We add : because we include :port as part of host.
        // We add [ ] because we include [ipv6]:port as part of host
        switch c {
        case '!', '$', '&', '\'', '(', ')', '*', '+', ',', ';', '=', ':', '[', ']':
            return false
        }
    }

    switch c {
    case '-', '_', '.', '~': // §2.3 Unreserved characters (mark)
        return false

    case '$', '&', '+', ',', '/', ':', ';', '=', '?', '@': // §2.2 Reserved characters (reserved)
        // Different sections of the URL allow a few of
        // the reserved characters to appear unescaped.
        switch mode {
        case encodePath: // §3.3
            // The RFC allows : @ & = + $ but saves / ; , for assigning
            // meaning to individual path segments. This package
            // only manipulates the path as a whole, so we allow those
            // last two as well. That leaves only ? to escape.
            return c == '?'

        case encodeUserPassword: // §3.2.1
            // The RFC allows ';', ':', '&', '=', '+', '$', and ',' in
            // userinfo, so we must escape only '@', '/', and '?'.
            // The parsing of userinfo treats ':' as special so we must escape
            // that too.
            return c == '@' || c == '/' || c == '?' || c == ':'

        case encodeQueryComponent: // §3.4
            // The RFC reserves (so we must escape) everything.
            return true

        case encodeFragment: // §4.1
            // The RFC text is silent but the grammar allows
            // everything, so escape nothing.
            return false
        }
    }

    // Everything else must be escaped.
    return true
}




func escape(s string, mode encoding) string {
    spaceCount, hexCount := 0, 0
    for i := 0; i < len(s); i++ {
        c := s[i]
        if shouldEscape(c, mode) {
            if c == ' ' && mode == encodeQueryComponent {
                spaceCount++
            } else {
                hexCount++
            }
        }
    }

    if spaceCount == 0 && hexCount == 0 {
        return s
    }

    t := make([]byte, len(s)+2*hexCount)
    j := 0
    for i := 0; i < len(s); i++ {
        switch c := s[i]; {
        case c == ' ' && mode == encodeQueryComponent:
            t[j] = '+'
            j++
        case shouldEscape(c, mode):
            t[j] = '%'
            t[j+1] = ""0123456789ABCDEF""[c>>4]
            t[j+2] = ""0123456789ABCDEF""[c&15]
            j += 3
        default:
            t[j] = s[i]
            j++
        }
    }
    return string(t)
}


// unescape unescapes a string; the mode specifies
// which section of the URL string is being unescaped.
func unescape(s string, mode encoding) (string, error) {
    // Count %, check that they're well-formed.
    n := 0
    hasPlus := false
    for i := 0; i < len(s); {
        switch s[i] {
        case '%':
            n++
            if i+2 >= len(s) || !ishex(s[i+1]) || !ishex(s[i+2]) {
                s = s[i:]
                if len(s) > 3 {
                    s = s[:3]
                }
                return """", EscapeError(s)
            }
            i += 3
        case '+':
            hasPlus = mode == encodeQueryComponent
            i++
        default:
            i++
        }
    }

    if n == 0 && !hasPlus {
        return s, nil
    }

    t := make([]byte, len(s)-2*n)
    j := 0
    for i := 0; i < len(s); {
        switch s[i] {
        case '%':
            t[j] = unhex(s[i+1])<<4 | unhex(s[i+2])
            j++
            i += 3
        case '+':
            if mode == encodeQueryComponent {
                t[j] = ' '
            } else {
                t[j] = '+'
            }
            j++
            i++
        default:
            t[j] = s[i]
            j++
            i++
        }
    }
    return string(t), nil
}


func EncodeUriComponent(rawString string) string{
    return escape(rawString, encodeFragment)
}

func DecodeUriCompontent(encoded string) (string, error){
    return unescape(encoded, encodeQueryComponent)
}


// https://golang.org/src/net/url/url.go
// http://remove-line-numbers.ruurtjan.com/
func main() {
    // http://www.url-encode-decode.com/
    origin := ""äöüHel/lo world""
    encoded := EncodeUriComponent(origin)
    fmt.Println(encoded)

    s, _ := DecodeUriCompontent(encoded)
    fmt.Println(s)
}
",5754
617,33371270,"// -------------------------------------------------------

/*
func UrlEncoded(str string) (string, error) {
    u, err := url.Parse(str)
    if err != nil {
        return """", err
    }
    return u.String(), nil
}


// http://stackoverflow.com/questions/13820280/encode-decode-urls
// import ""net/url""
func old_main() {
    a,err := UrlEncoded(""hello world"")
    if err != nil {
           fmt.Println(err)
    }
    fmt.Println(a)

    // https://gobyexample.com/url-parsing
    //s := ""postgres://user:pass@host.com:5432/path?k=v#f""
    s := ""postgres://user:pass@host.com:5432/path?k=vbla%23fooa#f""
    u, err := url.Parse(s)
    if err != nil {
        panic(err)
    }


    fmt.Println(u.RawQuery)
    fmt.Println(u.Fragment)
    fmt.Println(u.String())
    m, _ := url.ParseQuery(u.RawQuery)
    fmt.Println(m)
    fmt.Println(m[""k""][0])

}
*/

// -------------------------------------------------------
",913
618,33445908,"package main

import (""fmt""
    ""net/http""
    ""time""
    ""net"")

func main() {


    for i:=0; i<2000; i++ {
        start := time.Now()

         client := &http.Client{} // this enough for the program to crash
        /*client := &http.Client{
            Transport: &http.Transport{
                Dial: (&net.Dialer{
                    Timeout:   1 * time.Second,
                    KeepAlive: 0,
                }).Dial,
                DisableKeepAlives: true,
                DisableCompression: true,
                MaxIdleConnsPerHost: 1,
                ResponseHeaderTimeout: 1*time.Second,
            },
        }*/

        req, _ := http.NewRequest(""GET"", ""http://mickle.com.au/wp-content/uploads/2015/03/11222.jpg"", nil)
        req.Header.Add(""Connection"", ""close"")
        req.Header.Add(""Accept-Encoding"", ""none"")

        response, _ := client.Do(req)
        fmt.Printf(""httpreq took %s. resp status: %s\n"", time.Since(start), response.Status)
        response.Body.Close()
    }
}
",1008
619,33445908,"httpreq took 817.750359ms. resp status: 200 OK
httpreq took 798.177493ms. resp status: 200 OK
[[... left out 33 lines...]]
httpreq took 795.433486ms. resp status: 200 OK
httpreq took 805.610082ms. resp status: 200 OK
panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x1 addr=0x0 pc=0x4014a6]

goroutine 1 [running]:
main.main()
    /home/bongo/Downloads/a.go:32 +0x4a6

goroutine 17 [syscall, locked to thread]:
runtime.goexit()
    /usr/lib/golang/src/runtime/asm_amd64.s:1696 +0x1

goroutine 8 [select]:
net/http.(*persistConn).readLoop(0xc8200ac000)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 9 [select]:
net/http.(*persistConn).writeLoop(0xc8200ac000)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 40 [select]:
net/http.(*persistConn).readLoop(0xc8200ac2c0)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 76 [select]:
net/http.(*persistConn).readLoop(0xc8200e22c0)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 34 [select]:
net/http.(*persistConn).readLoop(0xc8200e2000)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 35 [select]:
net/http.(*persistConn).writeLoop(0xc8200e2000)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 12 [select]:
net/http.(*persistConn).readLoop(0xc8200ac0b0)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 13 [select]:
net/http.(*persistConn).writeLoop(0xc8200ac0b0)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 16 [select]:
net/http.(*persistConn).readLoop(0xc8200ac160)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 50 [select]:
net/http.(*persistConn).writeLoop(0xc8200ac160)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 38 [select]:
net/http.(*persistConn).readLoop(0xc82010e000)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 39 [select]:
net/http.(*persistConn).writeLoop(0xc82010e000)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 53 [select]:
net/http.(*persistConn).readLoop(0xc8200ac210)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 54 [select]:
net/http.(*persistConn).writeLoop(0xc8200ac210)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 61 [select]:
net/http.(*persistConn).readLoop(0xc8200e2160)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 41 [select]:
net/http.(*persistConn).writeLoop(0xc8200ac2c0)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 44 [select]:
net/http.(*persistConn).readLoop(0xc82010e0b0)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 45 [select]:
net/http.(*persistConn).writeLoop(0xc82010e0b0)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 59 [select]:
net/http.(*persistConn).readLoop(0xc8200ac370)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 60 [select]:
net/http.(*persistConn).writeLoop(0xc8200ac370)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 22 [select]:
net/http.(*persistConn).readLoop(0xc8200e20b0)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 23 [select]:
net/http.(*persistConn).writeLoop(0xc8200e20b0)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 78 [select]:
net/http.(*persistConn).readLoop(0xc8200e2370)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 62 [select]:
net/http.(*persistConn).writeLoop(0xc8200e2160)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 48 [select]:
net/http.(*persistConn).readLoop(0xc82010e160)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 49 [select]:
net/http.(*persistConn).writeLoop(0xc82010e160)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 28 [select]:
net/http.(*persistConn).readLoop(0xc8200e2210)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 29 [select]:
net/http.(*persistConn).writeLoop(0xc8200e2210)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 70 [select]:
net/http.(*persistConn).readLoop(0xc8200ac420)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 68 [select]:
net/http.(*persistConn).readLoop(0xc820170000)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 69 [select]:
net/http.(*persistConn).writeLoop(0xc820170000)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 101 [select]:
net/http.(*persistConn).readLoop(0xc8201702c0)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 71 [select]:
net/http.(*persistConn).writeLoop(0xc8200ac420)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 74 [select]:
net/http.(*persistConn).readLoop(0xc8201700b0)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 75 [select]:
net/http.(*persistConn).writeLoop(0xc8201700b0)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 84 [select]:
net/http.(*persistConn).readLoop(0xc82010e210)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 85 [select]:
net/http.(*persistConn).writeLoop(0xc82010e210)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 99 [select]:
net/http.(*persistConn).readLoop(0xc8200ac4d0)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 100 [select]:
net/http.(*persistConn).writeLoop(0xc8200ac4d0)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 88 [select]:
net/http.(*persistConn).readLoop(0xc82010e2c0)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 89 [select]:
net/http.(*persistConn).writeLoop(0xc82010e2c0)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 80 [select]:
net/http.(*persistConn).readLoop(0xc82010e370)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 77 [select]:
net/http.(*persistConn).writeLoop(0xc8200e22c0)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 122 [select]:
net/http.(*persistConn).readLoop(0xc820170160)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 79 [select]:
net/http.(*persistConn).writeLoop(0xc8200e2370)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 116 [select]:
net/http.(*persistConn).readLoop(0xc8200e2420)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 117 [select]:
net/http.(*persistConn).writeLoop(0xc8200e2420)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 120 [select]:
net/http.(*persistConn).readLoop(0xc8200e24d0)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 121 [select]:
net/http.(*persistConn).writeLoop(0xc8200e24d0)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 81 [select]:
net/http.(*persistConn).writeLoop(0xc82010e370)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 147 [select]:
net/http.(*persistConn).readLoop(0xc8200e2580)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 123 [select]:
net/http.(*persistConn).writeLoop(0xc820170160)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 134 [select]:
net/http.(*persistConn).readLoop(0xc820170210)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 135 [select]:
net/http.(*persistConn).writeLoop(0xc820170210)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 178 [select]:
net/http.(*persistConn).readLoop(0xc82010e580)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 102 [select]:
net/http.(*persistConn).writeLoop(0xc8201702c0)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 105 [select]:
net/http.(*persistConn).readLoop(0xc8200ac580)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 106 [select]:
net/http.(*persistConn).writeLoop(0xc8200ac580)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 109 [select]:
net/http.(*persistConn).readLoop(0xc8200ac630)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 110 [select]:
net/http.(*persistConn).writeLoop(0xc8200ac630)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 113 [select]:
net/http.(*persistConn).readLoop(0xc8200ac6e0)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 146 [select]:
net/http.(*persistConn).writeLoop(0xc8200ac6e0)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 140 [select]:
net/http.(*persistConn).readLoop(0xc820170370)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 141 [select]:
net/http.(*persistConn).writeLoop(0xc820170370)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 144 [select]:
net/http.(*persistConn).readLoop(0xc820170420)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 145 [select]:
net/http.(*persistConn).writeLoop(0xc820170420)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 94 [select]:
net/http.(*persistConn).readLoop(0xc82010e420)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 95 [select]:
net/http.(*persistConn).writeLoop(0xc82010e420)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 162 [select]:
net/http.(*persistConn).readLoop(0xc82010e4d0)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 163 [select]:
net/http.(*persistConn).writeLoop(0xc82010e4d0)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 179 [select]:
net/http.(*persistConn).writeLoop(0xc82010e580)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 126 [select]:
net/http.(*persistConn).readLoop(0xc82010e630)
    /usr/lib/golang/src/net/http/transport.go:976 +0xac7
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:685 +0xc78

goroutine 148 [select]:
net/http.(*persistConn).writeLoop(0xc8200e2580)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d

goroutine 127 [select]:
net/http.(*persistConn).writeLoop(0xc82010e630)
    /usr/lib/golang/src/net/http/transport.go:1009 +0x40c
created by net/http.(*Transport).dialConn
    /usr/lib/golang/src/net/http/transport.go:686 +0xc9d
exit status 2
",17436
620,33506221,"# basicwebapp/proto
proto/CatalogService.pb.go:126: cannot use _CatalogService_GetProductCatalog_Handler (type func(interface {},   context.Context, []byte) (proto.Message, error)) as type grpc.methodHandler in field value
proto/RecommendationService.pb.go:99: cannot use _RecommendationService_GetRecommendations_Handler (type func(interface {}, context.Context, []byte) (proto.Message, error)) as type grpc.methodHandler in field value
",438
621,33506221,"// Code generated by protoc-gen-go.
// source: CatalogService.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
    CatalogService.proto
    Product.proto
    RecommendationService.proto

It has these top-level messages:
    Category
    CatalogResponse
    CatalogRequest
*/
package protos

import proto ""github.com/golang/protobuf/proto""

import (
    context ""golang.org/x/net/context""
    grpc ""google.golang.org/grpc""
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Category struct {
    CategoryName string `protobuf:""bytes,1,opt,name=categoryName"" json:""categoryName,omitempty""`
}

func (m *Category) Reset()         { *m = Category{} }
func (m *Category) String() string { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()    {}

type CatalogResponse struct {
    Products []*Product `protobuf:""bytes,1,rep,name=products"" json:""products,omitempty""`
}

func (m *CatalogResponse) Reset()         { *m = CatalogResponse{} }
func (m *CatalogResponse) String() string { return proto.CompactTextString(m) }
func (*CatalogResponse) ProtoMessage()    {}

func (m *CatalogResponse) GetProducts() []*Product {
    if m != nil {
        return m.Products
    }
    return nil
}

type CatalogRequest struct {
    Category *Category `protobuf:""bytes,1,opt,name=category"" json:""category,omitempty""`
}

func (m *CatalogRequest) Reset()         { *m = CatalogRequest{} }
func (m *CatalogRequest) String() string { return proto.CompactTextString(m) }
func (*CatalogRequest) ProtoMessage()    {}

func (m *CatalogRequest) GetCategory() *Category {
    if m != nil {
        return m.Category
    }
    return nil
}

func init() {
}

// Client API for CatalogService service

type CatalogServiceClient interface {
    GetProductCatalog(ctx context.Context, in *CatalogRequest, opts ...grpc.CallOption) (*CatalogResponse, error)
}

type catalogServiceClient struct {
    cc *grpc.ClientConn
}

func NewCatalogServiceClient(cc *grpc.ClientConn) CatalogServiceClient {
    return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) GetProductCatalog(ctx context.Context, in *CatalogRequest, opts ...grpc.CallOption) (*CatalogResponse, error) {
    out := new(CatalogResponse)
    err := grpc.Invoke(ctx, ""/protos.CatalogService/GetProductCatalog"", in, out, c.cc, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

// Server API for CatalogService service

type CatalogServiceServer interface {
    GetProductCatalog(context.Context, *CatalogRequest) (*CatalogResponse, error)
}

func RegisterCatalogServiceServer(s *grpc.Server, srv CatalogServiceServer) {
    s.RegisterService(&_CatalogService_serviceDesc, srv)
}

func _CatalogService_GetProductCatalog_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
    in := new(CatalogRequest)
    if err := proto.Unmarshal(buf, in); err != nil {
        return nil, err
    }
    out, err := srv.(CatalogServiceServer).GetProductCatalog(ctx, in)
    if err != nil {
        return nil, err
    }
    return out, nil
}

var _CatalogService_serviceDesc = grpc.ServiceDesc{
    ServiceName: ""protos.CatalogService"",
    HandlerType: (*CatalogServiceServer)(nil),
    Methods: []grpc.MethodDesc{
        {
            MethodName: ""GetProductCatalog"",
            Handler:    _CatalogService_GetProductCatalog_Handler,
        },
    },
    Streams: []grpc.StreamDesc{},
}
",3625
622,33506221,"// Code generated by protoc-gen-go.
// source: RecommendationService.proto
// DO NOT EDIT!

package protos

import proto ""github.com/golang/protobuf/proto""

import (
    context ""golang.org/x/net/context""
    grpc ""google.golang.org/grpc""
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type RecommendationResponse struct {
    Result []*RecommendationResponse_Recommendation `protobuf:""bytes,1,rep,name=result"" json:""result,omitempty""`
}

func (m *RecommendationResponse) Reset()         { *m = RecommendationResponse{} }
func (m *RecommendationResponse) String() string { return proto.CompactTextString(m) }
func (*RecommendationResponse) ProtoMessage()    {}

func (m *RecommendationResponse) GetResult() []*RecommendationResponse_Recommendation {
    if m != nil {
        return m.Result
    }
    return nil
}

type RecommendationResponse_Recommendation struct {
    Rating    int32 `protobuf:""varint,1,opt,name=rating"" json:""rating,omitempty""`
    Productid int32 `protobuf:""varint,2,opt,name=productid"" json:""productid,omitempty""`
}

func (m *RecommendationResponse_Recommendation) Reset()         { *m = RecommendationResponse_Recommendation{} }
func (m *RecommendationResponse_Recommendation) String() string { return proto.CompactTextString(m) }
func (*RecommendationResponse_Recommendation) ProtoMessage()    {}

func init() {
}

// Client API for RecommendationService service

type RecommendationServiceClient interface {
    GetRecommendations(ctx context.Context, in *Product, opts ...grpc.CallOption) (*RecommendationResponse, error)
}

type recommendationServiceClient struct {
    cc *grpc.ClientConn
}

func NewRecommendationServiceClient(cc *grpc.ClientConn) RecommendationServiceClient {
    return &recommendationServiceClient{cc}
}

func (c *recommendationServiceClient) GetRecommendations(ctx context.Context, in *Product, opts ...grpc.CallOption) (*RecommendationResponse, error) {
    out := new(RecommendationResponse)
    err := grpc.Invoke(ctx, ""/protos.RecommendationService/GetRecommendations"", in, out, c.cc, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

// Server API for RecommendationService service

type RecommendationServiceServer interface {
    GetRecommendations(context.Context, *Product) (*RecommendationResponse, error)
}

func RegisterRecommendationServiceServer(s *grpc.Server, srv RecommendationServiceServer) {
    s.RegisterService(&_RecommendationService_serviceDesc, srv)
}

func _RecommendationService_GetRecommendations_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
    in := new(Product)
    if err := proto.Unmarshal(buf, in); err != nil {
        return nil, err
    }
    out, err := srv.(RecommendationServiceServer).GetRecommendations(ctx, in)
    if err != nil {
        return nil, err
    }
    return out, nil
}

var _RecommendationService_serviceDesc = grpc.ServiceDesc{
    ServiceName: ""protos.RecommendationService"",
    HandlerType: (*RecommendationServiceServer)(nil),
    Methods: []grpc.MethodDesc{
        {
            MethodName: ""GetRecommendations"",
            Handler:    _RecommendationService_GetRecommendations_Handler,
        },
    },
    Streams: []grpc.StreamDesc{},
}
",3396
623,33850935,"import (
    ""errors""    
    ""strings""
    ""strconv""
    ""log""
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
    //""strconv""
    ""encoding/base64""
    ""encoding/json""
    ""bytes""
    //""strings""
)

var privateKey = []byte(`
-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQDZsfv1qscqYdy4vY+P4e3cAtmvppXQcRvrF1cB4drkv0haU24Y
7m5qYtT52Kr539RdbKKdLAM6s20lWy7+5C0DgacdwYWd/7PeCELyEipZJL07Vro7
Ate8Bfjya+wltGK9+XNUIHiumUKULW4KDx21+1NLAUeJ6PeW+DAkmJWF6QIDAQAB
AoGBAJlNxenTQj6OfCl9FMR2jlMJjtMrtQT9InQEE7m3m7bLHeC+MCJOhmNVBjaM
ZpthDORdxIZ6oCuOf6Z2+Dl35lntGFh5J7S34UP2BWzF1IyyQfySCNexGNHKT1G1
XKQtHmtc2gWWthEg+S6ciIyw2IGrrP2Rke81vYHExPrexf0hAkEA9Izb0MiYsMCB
/jemLJB0Lb3Y/B8xjGjQFFBQT7bmwBVjvZWZVpnMnXi9sWGdgUpxsCuAIROXjZ40
IRZ2C9EouwJBAOPjPvV8Sgw4vaseOqlJvSq/C/pIFx6RVznDGlc8bRg7SgTPpjHG
4G+M3mVgpCX1a/EU1mB+fhiJ2LAZ/pTtY6sCQGaW9NwIWu3DRIVGCSMm0mYh/3X9
DAcwLSJoctiODQ1Fq9rreDE5QfpJnaJdJfsIJNtX1F+L3YceeBXtW0Ynz2MCQBI8
9KP274Is5FkWkUFNKnuKUK4WKOuEXEO+LpR+vIhs7k6WQ8nGDd4/mujoJBr5mkrw
DPwqA3N5TMNDQVGv8gMCQQCaKGJgWYgvo3/milFfImbp+m7/Y3vCptarldXrYQWO
AQjxwc71ZGBFDITYvdgJM1MTqc8xQek1FXn1vfpy2c6O
-----END RSA PRIVATE KEY-----
`)
var publicKey = []byte(`
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDZsfv1qscqYdy4vY+P4e3cAtmv
ppXQcRvrF1cB4drkv0haU24Y7m5qYtT52Kr539RdbKKdLAM6s20lWy7+5C0Dgacd
wYWd/7PeCELyEipZJL07Vro7Ate8Bfjya+wltGK9+XNUIHiumUKULW4KDx21+1NL
AUeJ6PeW+DAkmJWF6QIDAQAB
-----END PUBLIC KEY-----
`)
type DebugKeysRPC_Args struct {

}
type DebugKeysRPC_Reply struct {
    PubN        string
    PubE        uint64
    PrvN        string
    PrvD        string
    PrvP        string
    PrvQ        string
    Dp          string
    Dq          string
    Qinv        string
    CRTValues   string
    ID      uint64
    Key     string
    Dest    string  
}

func (t *AccessDB) DebugKeysRPC(args *DebugKeysRPC_Args, reply *DebugKeysRPC_Reply) error { 
    log.Println(""DebugKeysRPC"")

    if pubN,pubE,PrvN,PrvD,PrvP,PrvQ,Dp,Dq,Qinv,CRTValues,err:=ReadKeyFields(publicKey,privateKey);err==nil{
        log.Println(""ok read"")
        reply.PubN=base64.StdEncoding.EncodeToString(pubN)
        reply.PubE=uint64(pubE)
        reply.PrvN=base64.StdEncoding.EncodeToString(PrvN)
        reply.PrvD=base64.StdEncoding.EncodeToString(PrvD)
        reply.PrvP=base64.StdEncoding.EncodeToString(PrvP)
        reply.PrvQ=base64.StdEncoding.EncodeToString(PrvQ)
        reply.Dp=base64.StdEncoding.EncodeToString(Dp)
        reply.Dq=base64.StdEncoding.EncodeToString(Dq)
        reply.Qinv=base64.StdEncoding.EncodeToString(Qinv)
        reply.CRTValues=base64.StdEncoding.EncodeToString(CRTValues)
        reply.ID=1
        //origData:=[]byte(""abcdefghijklmnopqrstuvwxyz"")
        origData:=[]byte(""1234567890123456"")
        if resultRsa,err:=DbgRasEncryptOAEP(origData,publicKey);err==nil{
        //if resultRsa,err:=RsaEncrypt(origData,publicKey);err==nil{
            log.Printf(""resultRsa(%d): % x"", len(resultRsa),resultRsa)
            reply.Dest=base64.StdEncoding.EncodeToString(resultRsa)
            if resultRsaP,err:=DbgRsaDecryptOAEP(resultRsa,privateKey);err==nil{
                //log.Printf(""RsaDecrypt ok % x"", resultRsaP)   
                log.Println(""RsaDecrypt ok"")
                log.Printf(""resultRsaP(%d): %s"", len(string(resultRsaP)),string(resultRsaP))
            }else{
                log.Println(""RsaDecrypt"",err)
            }
        }else{
            log.Println(""RsaEncrypt"",err)
        }                   
    }else{
        WatchPublicKey(publicKey)
        WatchPrivateKey(privateKey)
        log.Println(err)
    }

    return nil
}
",3600
624,33850935,"procedure RsaEncrypt( const PublicKey: TStream; const srcStream : TStream;tgtStream:TStream);
var
  Codec : TCodec;
  wasAborted: boolean;
  KeyPair: TAsymetricKeyPair;
  Key: TSymetricKey;
  lib : TCryptographicLibrary;
begin
  Codec := TCodec.Create(Nil);
  lib := TCryptographicLibrary.Create(Nil);
  try
    //0. Reset
    Codec.Reset;
    Codec.CryptoLibrary := lib;
    Codec.ChainModeId := ECB_ProgId;
    Codec.StreamCipherId := 'native.RSA';

    //1. Set the cipher to RSA encryption.
    Codec.StreamCipherId := RSA_ProgId;

    //2. Load our pre-fabricated public key.
    PublicKey.Position := 0;
    Codec.AsymetricKeySizeInBits := 1024;
    Key := Codec.Asymetric_Engine.CreateFromStream(PublicKey, [partPublic]);

    //3. Now set the key.
    Codec.InitFromKey(Key);
    Codec.EncryptStream(srcStream,tgtStream);
  finally
    lib.Free;
    Codec.Free;
  end;
end;

procedure RsaDecrypt( const PrivateKey: TStream; const srcStream : TStream;tgtStream:TStream);
var
  Codec : TCodec;
  wasAborted: boolean;
  KeyPair: TAsymetricKeyPair;
  //Key: TSymetricKey;
  lib : TCryptographicLibrary;
begin
  Codec := TCodec.Create(Nil);
  lib := TCryptographicLibrary.Create(Nil);
  try
   //0. Reset
   Codec.Reset;
   Codec.CryptoLibrary := lib;
   Codec.ChainModeId := ECB_ProgId;
   Codec.StreamCipherId := 'native.RSA';

    //1. Set the cipher to RSA encryption.
    Codec.StreamCipherId := RSA_ProgId;

    //2. Load our pre-fabricated private key.
    PrivateKey.Position := 0;
    Codec.AsymetricKeySizeInBits := 1024;
    KeyPair := Codec.Asymetric_Engine.CreateFromStream(PrivateKey, [partPrivate]);

    //3. Now set the key.
    Codec.InitFromKey(KeyPair);

    Codec.DecryptStream(tgtStream,srcStream);
  finally
    lib.Free;
    Codec.Free;
  end;
end;

procedure Sign(privateKey,srcStream,tgtStream:TMemoryStream);
var
  sign:TSignature;
begin
  try
    sign:=TSignature.Create;
    privateKey.Seek(0,soBeginning);
    sign.m_Signatory.LoadKeysFromStream(privateKey,[partPrivate]);

    sign.m_Signatory.Sign(srcStream,tgtStream);
  finally
    sign.Free;
  end;
end;

function Verify(publicKey,srcStream,tgtStream:TMemoryStream):Boolean;
var
  sign:TSignature;
  vResult:TVerifyResult;
  nDbg:Integer;
begin
  try
    result:=False;
    publicKey.Seek(0,soBeginning);
    srcStream.Seek(0,soBeginning);
    tgtStream.Seek(0,soBeginning);
    sign:=TSignature.Create;
    sign.m_Signatory.LoadKeysFromStream(publicKey,[partPublic]);

    vResult:=sign.m_Signatory.Verify(srcStream,tgtStream);
    if vResult=vPass then
    begin
      nDbg:=0;
      result:=True;
    end
    else if vResult=vFail then
    begin
      nDbg:=1;
    end
    else if vResult=vUserAbort then
      nDbg:=3
    else nDbg:=4;
  finally
    sign.Free;
  end;
end;

procedure readPubKey(pubN:TStream;pubE:TStream);
var
  publicKey:TMemoryStream;
  Codec : TCodec;
  Key: TAsymetricKeyPair;
  lib : TCryptographicLibrary;
begin
  try
    publicKey:=TMemoryStream.Create;

    publicKey.LoadFromFile('e:\public.key');

    Codec := TCodec.Create(Nil);
    lib := TCryptographicLibrary.Create(Nil);
    try
      //0. Reset
      Codec.Reset;
      Codec.CryptoLibrary := lib;
      Codec.ChainModeId := ECB_ProgId;

      //1. Set the cipher to RSA encryption.
      Codec.StreamCipherId := RSA_ProgId;

      //2. Load our pre-fabricated public key.
      PublicKey.Position := 0;
      Codec.AsymetricKeySizeInBits := 1024;
      Key := Codec.Asymetric_Engine.CreateFromStream(publicKey, [partPublic]);
      //pubN.Write(Key.F_RSA_n.Value,sizeof(Key.F_RSA_n.Value));
      //pubE.Write(Key.F_RSA_n.Value,sizeof(Key.F_RSA_e.Value));
      pubN.CopyFrom((TRSAKeyPair(Key)).F_RSA_n.Value.FValue,0);
      pubE.CopyFrom((TRSAKeyPair(Key)).F_RSA_e.Value.FValue,0);
    finally
      lib.Free;
      Codec.Free;
    end;

  finally
    publicKey.Free;
  end;
end;

procedure dbgRsaKeys();
var
  publicKey:TMemoryStream;
  privateKey:TMemoryStream;
  tgtStream:TMemoryStream;
  srcStream:TStringStream;
  src:string;
  rstStream:TStringStream;
  sResult:string;
begin
  publicKey:=TMemoryStream.Create;
  privateKey:=TMemoryStream.Create;
  rstStream:=TStringStream.Create;
  srcStream:=TStringStream.Create;
  tgtStream:=TMemoryStream.Create;
  try
    src:='tell me why,tell me how,tell me where';
    srcStream.WriteString(src);
    srcStream.Seek(0,soBeginning);
    publicKey.LoadFromFile('e:\public.key');
    privateKey.LoadFromFile('e:\private.key');

    RsaEncrypt( PublicKey,srcStream ,tgtStream);

    RsaDecrypt( PrivateKey,tgtStream,rstStream);
    sResult:=rstStream.DataString;
  finally
    publicKey.Free;
    privateKey.Free;
    srcStream.Free;
    tgtStream.Free;
    rstStream.Free;
  end;
end;
procedure TestEncrypt();
var
  publicKey:TMemoryStream;
  srcStream,tgtStream:TMemoryStream;
begin
  try
    publicKey:=TMemoryStream.Create;

    srcStream:=TMemoryStream.Create;
    srcStream.LoadFromFile('e:\scanconfig.txt');
    tgtStream:=TMemoryStream.Create;
    publicKey.LoadFromFile('e:\public.key');

    RsaEncrypt( PublicKey,srcStream ,tgtStream);

    tgtStream.SaveToFile('e:\scanconfig.enc');
  finally
    publicKey.Free;
    srcStream.Free;
    tgtStream.Free;
  end;
end;

procedure TestDecrypt(srcStream:TMemoryStream);
var
  privateKey:TMemoryStream;
  tgtStream:TStringStream;
  sResult:String;
begin
  //dbgRsaKeys();
  privateKey:=TMemoryStream.Create;
  tgtStream:=TStringStream.Create;
  try
    srcStream.Seek(0,soBeginning);
    privateKey.LoadFromFile('e:\private.key');
    RsaDecrypt( privateKey,srcStream,tgtStream);
    sResult:=tgtStream.DataString;
  finally
    privateKey.Free;
    tgtStream.Free;
  end;
end;
",5658
625,33872157,len(),5
626,33872157,main(),6
627,33872157,map,3
628,33872157,len(),5
629,33872157,len(),5
630,33872157,len(),5
631,33872157,len(m),6
632,33872157,"package main

import (
    ""log""
    ""os""
    ""time""
)

const (
    chBuffSize        = 100             // How large the thing's channel buffer should be
    thingIdleLifetime = time.Second * 5 // How long things can live for when idle
    thingsToMake      = 1000            // How many things and associated goroutines to make
    thingMessageCount = 10              // How many messages to send to the thing
)

// The thing that we'll be passing into a goroutine to process -----------------
type thing struct {
    id string
    ch chan bool
}

// Go go gadget map test -------------------------------------------------------
func main() {
    // Make all of the things!
    things := make(map[string]thing)
    for i := 0; i < thingsToMake; i++ {
        t := thing{
            id: string(i),
            ch: make(chan bool, chBuffSize),
        }
        things[t.id] = t

        // Pass the thing into it's own goroutine
        go doSomething(t, &things)

        // Send (thingMessageCount) messages to the thing
        go func(t thing) {
            for x := 0; x < thingMessageCount; x++ {
                t.ch <- true
            }
        }(t)
    }

    // Check the map of things to see whether we're empty or not
    size := 0
    for {
        if size == len(things) && size != thingsToMake {
            log.Println(""Same number of items in map as last time"")
            log.Println(things)
            os.Exit(1)
        }
        size = len(things)
        log.Printf(""Map size: %d\n"", size)
        time.Sleep(time.Second)
    }
}

// Func for each goroutine to run ----------------------------------------------
//
// Takes two arguments:
// 1) the thing that it is working with
// 2) a pointer to the map of things
//
// When this goroutine is ready to terminate, it should remove the associated
// thing from the map of things to clean up after itself
func doSomething(t thing, things *map[string]thing) {
    lastAccessed := time.Now()
    for {
        select {
        case <-t.ch:
            // We received a message, so extend the lastAccessed time
            lastAccessed = time.Now()
        default:
            // We haven't received a message, so check if we're allowed to continue
            n := time.Now()
            d := n.Sub(lastAccessed)
            if d > thingIdleLifetime {
                // We've run for >thingIdleLifetime, so close the channel, delete the
                // associated thing from the map and return, terminating the goroutine
                close(t.ch)
                delete(*things, string(t.id))
                return
            }
        }

        // Just sleep for a second in each loop to prevent the CPU being eaten up
        time.Sleep(time.Second)
    }
}
",2743
633,33872157,len(),5
634,33872157,main(),6
635,33872157,thingsToMake,12
636,33872157,"goroutine 199734 [select]:
main.doSomething(0xc0d62e7680, 0x4, 0xc0d64efba0, 0xc082016240)
        C:/Users/anttheknee/go/src/maptest/maptest.go:83 +0x144
created by main.main
        C:/Users/anttheknee/go/src/maptest/maptest.go:46 +0x463
",240
637,33872157,"package main

import (
    ""log""
    ""os""
    ""time""
)

const (
    chBuffSize        = 100             // How large the thing's channel buffer should be
    thingIdleLifetime = time.Second * 5 // How long things can live for when idle
    thingsToMake      = 10000           // How many things and associated goroutines to make
    thingMessageCount = 10              // How many messages to send to the thing
)

// The thing that we'll be passing into a goroutine to process -----------------
type thing struct {
    id   string
    ch   chan bool
    done chan string
}

// Go go gadget map test -------------------------------------------------------
func main() {
    // Make all of the things!
    things := make(map[string]thing)

    // Make a channel to receive completion notification on
    doneCh := make(chan string, chBuffSize)

    log.Printf(""Making %d things\n"", thingsToMake)
    for i := 0; i < thingsToMake; i++ {
        t := thing{
            id:   string(i),
            ch:   make(chan bool, chBuffSize),
            done: doneCh,
        }
        things[t.id] = t

        // Pass the thing into it's own goroutine
        go doSomething(t)

        // Send (thingMessageCount) messages to the thing
        go func(t thing) {
            for x := 0; x < thingMessageCount; x++ {
                t.ch <- true
                time.Sleep(time.Millisecond * 10)
            }
        }(t)
    }
    log.Printf(""All %d things made\n"", thingsToMake)

    // Receive on doneCh when the goroutine is complete and clean the map up
    for {
        id := <-doneCh
        close(things[id].ch)
        delete(things, id)
        if len(things) == 0 {
            log.Printf(""Map: %v"", things)
            log.Println(""All done. Exiting"")
            os.Exit(0)
        }
    }
}

// Func for each goroutine to run ----------------------------------------------
//
// Takes two arguments:
// 1) the thing that it is working with
// 2) the channel to report that we're done through
//
// When this goroutine is ready to terminate, it should remove the associated
// thing from the map of things to clean up after itself
func doSomething(t thing) {
    timer := time.NewTimer(thingIdleLifetime)
    for {
        select {
        case <-t.ch:
            // We received a message, so extend the timer
            timer.Reset(thingIdleLifetime)
        case <-timer.C:
            // Timer returned so we need to exit now
            t.done <- t.id
            return
        }
    }
}
",2500
638,33872157,"package main

import (
    ""log""
    ""os""
    ""strconv""
    ""time""
)

const (
    chBuffSize        = 100             // How large the thing's channel buffer should be
    thingIdleLifetime = time.Second * 5 // How long things can live for when idle
    thingsToMake      = 100000          // How many things and associated goroutines to make
    thingMessageCount = 10              // How many messages to send to the thing
)

// The thing that we'll be passing into a goroutine to process -----------------
type thing struct {
    id       string
    receiver chan bool
    done     chan string
}

// Go go gadget map test -------------------------------------------------------
func main() {
    // Make all of the things!
    things := make(map[string]thing)

    // Make a channel to receive completion notification on
    doneCh := make(chan string, chBuffSize)

    log.Printf(""Making %d things\n"", thingsToMake)

    for i := 0; i < thingsToMake; i++ {
        t := thing{
            id:       strconv.Itoa(i),
            receiver: make(chan bool, chBuffSize),
            done:     doneCh,
        }
        things[t.id] = t

        // Pass the thing into it's own goroutine
        go doSomething(t)

        // Send (thingMessageCount) messages to the thing
        go func(t thing) {
            for x := 0; x < thingMessageCount; x++ {
                t.receiver <- true
                time.Sleep(time.Millisecond * 100)
            }
        }(t)
    }
    log.Printf(""All %d things made\n"", thingsToMake)

    // Check the `len()` of things every second and exit when empty
    go func() {
        for {
            time.Sleep(time.Second)
            m := things
            log.Printf(""Map length: %v"", len(m))
            if len(m) == 0 {
                log.Printf(""Confirming empty map: %v"", things)
                log.Println(""All done. Exiting"")
                os.Exit(0)
            }
        }
    }()

    // Receive on doneCh when the goroutine is complete and clean the map up
    for {
        id := <-doneCh
        close(things[id].receiver)
        delete(things, id)
    }
}

// Func for each goroutine to run ----------------------------------------------
//
// When this goroutine is ready to terminate it should respond through t.done to
// notify the caller that it has finished and can be cleaned up. It will wait
// for `thingIdleLifetime` until it times out and terminates on it's own
func doSomething(t thing) {
    timer := time.NewTimer(thingIdleLifetime)
    for {
        select {
        case <-t.receiver:
            // We received a message, so extend the timer
            timer.Reset(thingIdleLifetime)
        case <-timer.C:
            // Timer expired so we need to exit now
            t.done <- t.id
            return
        }
    }
}
",2799
639,33950565,"use Time::HiRes qw( usleep ualarm gettimeofday tv_interval nanosleep
                      clock_gettime clock_getres clock_nanosleep clock
                      stat );
sub getTS {
    my ($seconds, $microseconds) = gettimeofday;
    return $seconds + (0.0+ $microseconds)/1000000.0;
}
my %mymap;
$mymap{""U.S.""} = ""Washington"";
$mymap{""U.K.""} = ""London"";
$mymap{""France""} = ""Paris"";
$mymap{""Russia""} = ""Moscow"";
$mymap{""China""} = ""Beijing"";
$mymap{""Germany""} = ""Berlin"";
$mymap{""Japan""} = ""Tokyo"";
$mymap{""China""} = ""Beijing"";
$mymap{""Italy""} = ""Rome"";
$mymap{""Spain""} = ""Madrad"";
$x = """";
$start = getTS();
for ($i=0; $i<1000000; $i++) {
    $x = $mymap{""China""};
}
printf ""took %f sec\n"", getTS() - $start;
",710
640,33950565,"#include 
#include 
#include 
#include 

double getTS() {
    struct timeval tv;
    gettimeofday(&tv, NULL);
    return tv.tv_sec + tv.tv_usec/1000000.0;
}
using namespace std;
int main () {
  std::unordered_map mymap;

  // populating container:
    mymap[""U.S.""] = ""Washington"";
    mymap[""U.K.""] = ""London"";
    mymap[""France""] = ""Paris"";
    mymap[""Russia""] = ""Moscow"";
    mymap[""China""] = ""Beijing"";
    mymap[""Germany""] = ""Berlin"";
    mymap[""Japan""] = ""Tokyo"";
    mymap[""China""] = ""Beijing"";
    mymap[""Italy""] = ""Rome"";
    mymap[""Spain""] = ""Madrad"";  

  double start = getTS();
  string x;
  for (int i=0; i<1000000; i++) {
      mymap[""China""];
  }
  printf(""took %f sec\n"", getTS() - start);
  return 0;
}
",721
641,33950565,"package main

import ""fmt""
import ""time""

func main() {
    var x string
    mymap := make(map[string]string)
    mymap[""U.S.""] = ""Washington"";
    mymap[""U.K.""] = ""London"";
    mymap[""France""] = ""Paris"";
    mymap[""Russia""] = ""Moscow"";
    mymap[""China""] = ""Beijing"";
    mymap[""Germany""] = ""Berlin"";
    mymap[""Japan""] = ""Tokyo"";
    mymap[""China""] = ""Beijing"";
    mymap[""Italy""] = ""Rome"";
    mymap[""Spain""] = ""Madrad"";
    t0 := time.Now()
    sum := 1
    for sum < 1000000 {
        x = mymap[""China""]
        sum += 1
    }
    t1 := time.Now()
    fmt.Printf(""The call took %v to run.\n"", t1.Sub(t0))
    fmt.Println(x)
}
",631
642,33950565,"x = mymap[""China""];",19
643,33950565,"mymap[""China""];",15
644,33950565,g++ -std=c++11 unorderedMap.cc,30
645,33950565,char*,5
646,33950565,string,6
647,33950565,"  double start = getTS();
  string x = ""China"";
  for (int i=0; i<1000000; i++) {
      mymap[x];
  }
",102
648,33950565,valgrind --tool=cachegrind ,27
649,33950565,"$ valgrind --tool=cachegrind  ./te1
==2103== Cachegrind, a cache and branch-prediction profiler
==2103== Copyright (C) 2002-2013, and GNU GPL'd, by Nicholas Nethercote et al.
==2103== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==2103== Command: ./te1
==2103== 
--2103-- warning: L3 cache found, using its data for the LL simulation.
The call took 1.647099s to run.
Beijing
==2103== 
==2103== I   refs:      255,763,381
==2103== I1  misses:          3,709
==2103== LLi misses:          2,743
==2103== I1  miss rate:        0.00%
==2103== LLi miss rate:        0.00%
==2103== 
==2103== D   refs:      109,437,132  (77,838,331 rd   + 31,598,801 wr)
==2103== D1  misses:        352,474  (   254,714 rd   +     97,760 wr)
==2103== LLd misses:        149,260  (    96,250 rd   +     53,010 wr)
==2103== D1  miss rate:         0.3% (       0.3%     +        0.3%  )
==2103== LLd miss rate:         0.1% (       0.1%     +        0.1%  )
==2103== 
==2103== LL refs:           356,183  (   258,423 rd   +     97,760 wr)
==2103== LL misses:         152,003  (    98,993 rd   +     53,010 wr)
==2103== LL miss rate:          0.0% (       0.0%     +        0.1%  )
",1181
650,33950565,"$ valgrind --tool=cachegrind ./a.out
==2180== Cachegrind, a cache and branch-prediction profiler
==2180== Copyright (C) 2002-2013, and GNU GPL'd, by Nicholas Nethercote et al.
==2180== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==2180== Command: ./a.out
==2180== 
--2180-- warning: L3 cache found, using its data for the LL simulation.
took 64.657681 sec
==2180== 
==2180== I   refs:      5,281,474,482
==2180== I1  misses:            1,710
==2180== LLi misses:            1,651
==2180== I1  miss rate:          0.00%
==2180== LLi miss rate:          0.00%
==2180== 
==2180== D   refs:      3,170,495,683  (1,840,363,429 rd   + 1,330,132,254 wr)
==2180== D1  misses:           12,055  (       10,374 rd   +         1,681 wr)
==2180== LLd misses:            7,383  (        6,132 rd   +         1,251 wr)
==2180== D1  miss rate:           0.0% (          0.0%     +           0.0%  )
==2180== LLd miss rate:           0.0% (          0.0%     +           0.0%  )
==2180== 
==2180== LL refs:              13,765  (       12,084 rd   +         1,681 wr)
==2180== LL misses:             9,034  (        7,783 rd   +         1,251 wr)
==2180== LL miss rate:            0.0% (          0.0%     +           0.0%  )
",1237
651,33950565,"$ valgrind --tool=cachegrind ./a.out
==2157== Cachegrind, a cache and branch-prediction profiler
==2157== Copyright (C) 2002-2013, and GNU GPL'd, by Nicholas Nethercote et al.
==2157== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==2157== Command: ./a.out
==2157== 
--2157-- warning: L3 cache found, using its data for the LL simulation.
took 9.419447 sec
==2157== 
==2157== I   refs:      1,451,459,660
==2157== I1  misses:            1,599
==2157== LLi misses:            1,549
==2157== I1  miss rate:          0.00%
==2157== LLi miss rate:          0.00%
==2157== 
==2157== D   refs:        430,486,197  (340,358,108 rd   + 90,128,089 wr)
==2157== D1  misses:           12,008  (     10,337 rd   +      1,671 wr)
==2157== LLd misses:            7,372  (      6,120 rd   +      1,252 wr)
==2157== D1  miss rate:           0.0% (        0.0%     +        0.0%  )
==2157== LLd miss rate:           0.0% (        0.0%     +        0.0%  )
==2157== 
==2157== LL refs:              13,607  (     11,936 rd   +      1,671 wr)
==2157== LL misses:             8,921  (      7,669 rd   +      1,252 wr)
==2157== LL miss rate:            0.0% (        0.0%     +        0.0%  )
",1196
652,33988192,"// mysqlSSHtunnel project main.go
// Establish an ssh tunnel and connect to a remote mysql server using
// go-sql-driver for database queries. Encrypted private key pem files
// are supported.
//
// This is an example to give an idea. It's far from a performant solution. It 
// lacks of proper error handling and I'm sure it could really be much better 
// implemented. Please forgive me, as I just started with Go about 2 weeks ago.
//
// The database used in this example is from a real Opensimulator installation.
// It queries the migrations table in the opensim database.
//
package main

import (
    ""database/sql""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
    ""os""
)

// Declare your connection data and user credentials here
const (
    // ssh connection related data
    sshServerHost     = ""test.example.com""
    sshServerPort     = 22
    sshUserName       = ""tester""
    sshPrivateKeyFile = ""testkey.pem"" // exported as OpenSSH key from .ppk
    sshKeyPassphrase  = ""testoster0n"" // key file encrytion password

    // ssh tunneling related data
    sshLocalHost  = ""localhost"" // local localhost ip (client side)
    sshLocalPort  = 9000        // local port used to forward the connection
    sshRemoteHost = ""127.0.0.1"" // remote local ip (server side)
    sshRemotePort = 3306        // remote MySQL port

    // MySQL access data
    mySqlUsername = ""opensim""
    mySqlPassword = ""h0tgrits""
    mySqlDatabase = ""opensimdb""
)

// The main entry point of the application
func main() {
    fmt.Println(""-> mysqlSSHtunnel"")

    tunnel := sshTunnel() // Initialize sshTunnel
    go tunnel.Start()     // Start the sshTunnel

    // Declare the dsn (aka database connection string)
    // dsn := ""opensim:h0tgrits@tcp(localhost:9000)/opensimdb""
    dsn := fmt.Sprintf(""%s:%s@tcp(%s:%d)/%s"",
        mySqlUsername, mySqlPassword, sshLocalHost, sshLocalPort, mySqlDatabase)

    // Open the database
    db, err := sql.Open(""mysql"", dsn)
    if err != nil {
        dbErrorHandler(err)
    }
    defer db.Close() // keep it open until we are finished

    // Simple select query to check migrations (provided here as an example)
    rows, err := db.Query(""SELECT * FROM migrations"")
    if err != nil {
        dbErrorHandler(err)
    }
    defer rows.Close()

    // Iterate though the rows returned and print them
    for rows.Next() {
        var version int
        var name string
        if err := rows.Scan(&name, &version); err != nil {
            dbErrorHandler(err)
        }
        fmt.Printf(""%s, %d\n"", name, version)
    }
    if err := rows.Err(); err != nil {
        dbErrorHandler(err)
    }

    // Done for now
    fmt.Println(""<- mysqlSSHtunnel"")
}

// Simple mySql error handling (yet to implement)
func dbErrorHandler(err error) {
    switch err := err.(type) {
    default:
        fmt.Printf(""Error %s\n"", err)
        os.Exit(-1)
    }
}
",2885
653,33988192,"// mysqlSSHtunnel project sshTunnel.go
//
// Everything regarding the ssh tunnel goes here. Credits go to Svett Ralchev.
// Look at http://blog.ralch.com/tutorial/golang-ssh-tunneling for an excellent
// explanation and most ssh-tunneling related details used in this code.
//
// PEM key decryption is valid for password proected SSH-2 RSA Keys generated as
// .ppk files for putty and exported as OpenSSH .pem keyfile using PuTTYgen.
//
package main

import (
    ""bytes""
    ""crypto/x509""
    ""encoding/base64""
    ""encoding/pem""
    ""fmt""
    ""golang.org/x/crypto/ssh""
    ""io""
    ""io/ioutil""
    ""net""
)

// Define an endpoint with ip and port
type Endpoint struct {
    Host string
    Port int
}

// Returns an endpoint as ip:port formatted string
func (endpoint *Endpoint) String() string {
    return fmt.Sprintf(""%s:%d"", endpoint.Host, endpoint.Port)
}

// Define the endpoints along the tunnel
type SSHtunnel struct {
    Local  *Endpoint
    Server *Endpoint
    Remote *Endpoint
    Config *ssh.ClientConfig
}

// Start the tunnel
func (tunnel *SSHtunnel) Start() error {
    listener, err := net.Listen(""tcp"", tunnel.Local.String())
    if err != nil {
        return err
    }
    defer listener.Close()

    for {
        conn, err := listener.Accept()
        if err != nil {
            return err
        }
        go tunnel.forward(conn)
    }
}

// Port forwarding
func (tunnel *SSHtunnel) forward(localConn net.Conn) {
    // Establish connection to the intermediate server
    serverConn, err := ssh.Dial(""tcp"", tunnel.Server.String(), tunnel.Config)
    if err != nil {
        fmt.Printf(""Server dial error: %s\n"", err)
        return
    }

    // access the target server
    remoteConn, err := serverConn.Dial(""tcp"", tunnel.Remote.String())
    if err != nil {
        fmt.Printf(""Remote dial error: %s\n"", err)
        return
    }

    // Transfer the data between  and the remote server
    copyConn := func(writer, reader net.Conn) {
        _, err := io.Copy(writer, reader)
        if err != nil {
            fmt.Printf(""io.Copy error: %s"", err)
        }
    }

    go copyConn(localConn, remoteConn)
    go copyConn(remoteConn, localConn)
}

// Decrypt encrypted PEM key data with a passphrase and embed it to key prefix
// and postfix header data to make it valid for further private key parsing.
func DecryptPEMkey(buffer []byte, passphrase string) []byte {
    block, _ := pem.Decode(buffer)
    der, err := x509.DecryptPEMBlock(block, []byte(passphrase))
    if err != nil {
        fmt.Println(""decrypt failed: "", err)
    }
    encoded := base64.StdEncoding.EncodeToString(der)
    encoded = ""-----BEGIN RSA PRIVATE KEY-----\n"" + encoded +
        ""\n-----END RSA PRIVATE KEY-----\n""
    return []byte(encoded)
}

// Get the signers from the OpenSSH key file (.pem) and return them for use in
// the Authentication method. Decrypt encrypted key data with the passphrase.
func PublicKeyFile(file string, passphrase string) ssh.AuthMethod {
    buffer, err := ioutil.ReadFile(file)
    if err != nil {
        return nil
    }

    if bytes.Contains(buffer, []byte(""ENCRYPTED"")) {
        // Decrypt the key with the passphrase if it has been encrypted
        buffer = DecryptPEMkey(buffer, passphrase)
    }

    // Get the signers from the key
    signers, err := ssh.ParsePrivateKey(buffer)
    if err != nil {
        return nil
    }
    return ssh.PublicKeys(signers)
}

// Define the ssh tunnel using its endpoint and config data
func sshTunnel() *SSHtunnel {
    localEndpoint := &Endpoint{
        Host: sshLocalHost,
        Port: sshLocalPort,
    }

    serverEndpoint := &Endpoint{
        Host: sshServerHost,
        Port: sshServerPort,
    }

    remoteEndpoint := &Endpoint{
        Host: sshRemoteHost,
        Port: sshRemotePort,
    }

    sshConfig := &ssh.ClientConfig{
        User: sshUserName,
        Auth: []ssh.AuthMethod{
            PublicKeyFile(sshPrivateKeyFile, sshKeyPassphrase)},
    }

    return &SSHtunnel{
        Config: sshConfig,
        Local:  localEndpoint,
        Server: serverEndpoint,
        Remote: remoteEndpoint,
    }
}
",4120
654,34061783,"func (p *PartialParty) SendReadyCheck(party PartialParty) {
    msg, err := json.Marshal(&ReadyCheckMsg{""ReadyCheck"", """"})
    if err != nil {
        log.Println(err)
    }

    for _, member := range party.Members {
        member.Conn.send <- msg
    }

    counter := 0
    loopBreaker := true
    for {
        select {
        case <-p.Accept:
            counter++
            resp, err := json.Marshal(&ReadyCheckMsg{""ReadyAccepted"", """"})
            if err != nil {
                log.Println(err)
            }
            for _, member := range party.Members {
                member.Conn.send <- resp
            }
            if counter == 2 {
                // Create a new party with all members
                partyid := PartyID(feeds.NewUUID().String())
                db := common.Db()
                newParty := &Party{
                    Active:    true,
                    Members:   p.Members,
                    Broadcast: make(chan []byte),
                    PartyID:   partyid,
                }

                // Insert the new party into the database
                _, err := db.Exec(""INSERT INTO party SET party_id = ?, active = ?"", partyid.String(), true)
                if err != nil {
                    log.Println(err)
                }

                // Go through the members and update the database
                var wg sync.WaitGroup

                for _, member := range party.Members {
                    wg.Add(1)
                    m := member
                    go func() {
                        _, err := db.Exec(""UPDATE party_members SET active = ? WHERE steamid = ?"", false, m.SteamID)
                        if err != nil {
                            log.Println(err)
                        }
                        _, err = db.Exec(""INSERT INTO party_members SET belongs_to =?, active = ?, steamid = ?"", partyid.String(), true, m.SteamID)
                        if err != nil {
                            log.Println(err)
                        }
                        wg.Done()
                    }()
                }

                // Wait for all the database stuff to finish
                wg.Wait()
                PHub.AddNewParty(newParty)
                loopBreaker = false
                break
            }
        case conn := <-p.Decline:
            if conn.Ready {
                break
            }
            conn.Ready = false
            conn.InQueue = false
            conn.CurrentParty = """"
            resp, err := json.Marshal(&ReadyCheckMsg{""ReadyCheckDeclined"", """"})
            if err != nil {
                log.Println(err)
            }
            p.Accepting = true
            identifier := conn.Identifier
            if _, ok := party.Members[identifier]; ok {
                delete(p.Members, identifier)
            }
            for _, m := range party.Members {
                member := m
                member.Conn.send <- resp
            }
            log.Println(""Here"")
            loopBreaker = false
            break
        case <-time.After(30 * time.Second):
            if counter == 2 {
                return
            }
            p.Accepting = true
            failedMsg, err := json.Marshal(&ReadyCheckMsg{""FailedToReady"", """"})
            if err != nil {
                log.Println(err)
            }
            somebodyDeclinedMsg, err := json.Marshal(&ReadyCheckMsg{""ReadyCheckDeclined"", """"})
            if err != nil {
                log.Println(err)
            }


    >>>>     for _, member := range party.Members { ***<<<< This Line***
                m := member
                if !m.Conn.Ready {
                    m.Conn.Ready = false
                    m.Conn.InQueue = false
                    m.Conn.CurrentParty = """"
                    m.Conn.send <- failedMsg
                } else {
                    m.Conn.Ready = false
                    m.Conn.send <- somebodyDeclinedMsg
                }
            }
            loopBreaker = false
            break
        }
        if !loopBreaker {
            break
        }
    }
}
",4113
655,34061783,"// AddNewMember will add a new user to the party
func (p *PartyHub) AddNewMember(member *Member, partyid PartyID) {
    p.Lock()
    defer p.Unlock()
>>> p.PartialPartys[partyid].Members[member.Conn.Identifier] = member
}

type PartialParty struct {
    Accepting bool
    Members   map[Identifier]*Member
    Accept    chan *Connection
    Decline   chan *Connection
    PartyID   PartyID
    sync.Mutex
}
",407
656,34061783,AddNewMember,12
657,34061783,SendReadyCheck,14
658,34080574,ubuntu 14.04.3,14
659,34080574,kubernetes,10
660,34080574,apt-get,7
661,34080574,Golang,6
662,34080574,1.2.1,5
663,34080574,apt-get --purge autoremove,26
664,34080574,1.5.1,5
665,34080574,make,4
666,34080574,kubernetes,10
667,34080574,golang,6
668,34080574,1.2.1,5
669,34080574,"$ make
hack/build-go.sh
+++ [1203 06:20:30] Building go targets for linux/amd64:
    cmd/kube-proxy
    cmd/kube-apiserver
    cmd/kube-controller-manager
    cmd/kubelet
    cmd/kubemark
    cmd/hyperkube
    cmd/linkcheck
    plugin/cmd/kube-scheduler
    cmd/kubectl
    cmd/integration
    cmd/gendocs
    cmd/genkubedocs
    cmd/genman
    cmd/mungedocs
    cmd/genbashcomp
    cmd/genconversion
    cmd/gendeepcopy
    cmd/genswaggertypedocs
    examples/k8petstore/web-server/src
    github.com/onsi/ginkgo/ginkgo
    test/e2e/e2e.test
+++ [1203 06:20:30] +++ Warning: stdlib pkg with cgo flag not found.
+++ [1203 06:20:30] +++ Warning: stdlib pkg cannot be rebuilt since /usr/local/go/pkg is not writable by nan
+++ [1203 06:20:30] +++ Warning: Make /usr/local/go/pkg writable for nan for a one-time stdlib install, Or
+++ [1203 06:20:30] +++ Warning: Rebuild stdlib using the command 'CGO_ENABLED=0 go install -a -installsuffix cgo std'
+++ [1203 06:20:30] +++ Falling back to go build, which is slower
    # k8s.io/kubernetes/pkg/util/yaml
_output/local/go/src/k8s.io/kubernetes/pkg/util/yaml/decoder.go:26: import /home/nan/kubernetes/Godeps/_workspace/pkg/linux_amd64/github.com/ghodss/yaml.a: object is [linux amd64 go1.2.1 X:none] expected [linux amd64 go1.5.1 X:none]
# k8s.io/kubernetes/pkg/util/validation
_output/local/go/src/k8s.io/kubernetes/pkg/util/validation/errors.go:23: import /home/nan/kubernetes/_output/local/go/pkg/linux_amd64/k8s.io/kubernetes/pkg/util/errors.a: object is [linux amd64 go1.2.1 X:none] expected [linux amd64 go1.5.1 X:none]
# k8s.io/kubernetes/pkg/api/resource
_output/local/go/src/k8s.io/kubernetes/pkg/api/resource/quantity.go:27: import /home/nan/kubernetes/Godeps/_workspace/pkg/linux_amd64/speter.net/go/exp/math/dec/inf.a: object is [linux amd64 go1.2.1 X:none] expected [linux amd64 go1.5.1 X:none]
# github.com/spf13/cobra
Godeps/_workspace/src/github.com/spf13/cobra/command.go:27: import /home/nan/kubernetes/Godeps/_workspace/pkg/linux_amd64/github.com/inconshreveable/mousetrap.a: object is [linux amd64 go1.2.1 X:none] expected [linux amd64 go1.5.1 X:none]
# k8s.io/kubernetes/pkg/util/iptables
_output/local/go/src/k8s.io/kubernetes/pkg/util/iptables/iptables.go:27: import /home/nan/kubernetes/Godeps/_workspace/pkg/linux_amd64/github.com/coreos/go-semver/semver.a: object is [linux amd64 go1.2.1 X:none] expected [linux amd64 go1.5.1 X:none]
# github.com/prometheus/common/expfmt
Godeps/_workspace/src/github.com/prometheus/common/expfmt/decode.go:23: import /home/nan/kubernetes/Godeps/_workspace/pkg/linux_amd64/github.com/prometheus/client_model/go.a: object is [linux amd64 go1.2.1 X:none] expected [linux amd64 go1.5.1 X:none]
# github.com/emicklei/go-restful
Godeps/_workspace/src/github.com/emicklei/go-restful/container.go:16: import /home/nan/kubernetes/Godeps/_workspace/pkg/linux_amd64/github.com/emicklei/go-restful/log.a: object is [linux amd64 go1.2.1 X:none] expected [linux amd64 go1.5.1 X:none]
!!! Error in /home/nan/kubernetes/hack/lib/golang.sh:376
  'CGO_ENABLED=0 go build -o ""${outfile}"" ""${goflags[@]:+${goflags[@]}}"" -ldflags ""${goldflags}"" ""${binary}""' exited with status 2
Call stack:
  1: /home/nan/kubernetes/hack/lib/golang.sh:376 kube::golang::build_binaries_for_platform(...)
  2: /home/nan/kubernetes/hack/lib/golang.sh:535 kube::golang::build_binaries(...)
  3: hack/build-go.sh:26 main(...)
Exiting with status 1
!!! Error in /home/nan/kubernetes/hack/lib/golang.sh:456
  '( kube::golang::setup_env; local host_platform; host_platform=$(kube::golang::host_platform); local goflags goldflags; eval ""goflags=(${KUBE_GOFLAGS:-})""; goldflags=""${KUBE_GOLDFLAGS:-} $(kube::version::ldflags)""; local use_go_build; local -a targets=(); local arg; for arg in ""$@"";
do
    if [[ ""${arg}"" == ""--use_go_build"" ]]; then
        use_go_build=true;
    else
        if [[ ""${arg}"" == -* ]]; then
            goflags+=(""${arg}"");
        else
            targets+=(""${arg}"");
        fi;
    fi;
done; if [[ ${#targets[@]} -eq 0 ]]; then
    targets=(""${KUBE_ALL_TARGETS[@]}"");
fi; local -a platforms=(""${KUBE_BUILD_PLATFORMS[@]:+${KUBE_BUILD_PLATFORMS[@]}}""); if [[ ${#platforms[@]} -eq 0 ]]; then
    platforms=(""${host_platform}"");
fi; local binaries; binaries=($(kube::golang::binaries_from_targets ""${targets[@]}"")); local parallel=false; if [[ ${#platforms[@]} -gt 1 ]]; then
    local gigs; gigs=$(kube::golang::get_physmem); if [[ ${gigs} -ge ${KUBE_PARALLEL_BUILD_MEMORY} ]]; then
        kube::log::status ""Multiple platforms requested and available ${gigs}G >= threshold ${KUBE_PARALLEL_BUILD_MEMORY}G, building platforms in parallel""; parallel=true;
    else
        kube::log::status ""Multiple platforms requested, but available ${gigs}G < threshold ${KUBE_PARALLEL_BUILD_MEMORY}G, building platforms in serial""; parallel=false;
    fi;
fi; if [[ ""${parallel}"" == ""true"" ]]; then
    kube::log::status ""Building go targets for ${platforms[@]} in parallel (output will appear in a burst when complete):"" ""${targets[@]}""; local platform; for platform in ""${platforms[@]}"";
    do
        ( kube::golang::set_platform_envs ""${platform}""; kube::log::status ""${platform}: go build started""; kube::golang::build_binaries_for_platform ${platform} ${use_go_build:-}; kube::log::status ""${platform}: go build finished"" ) &> ""/tmp//${platform//\//_}.build"" &
    done; local fails=0; for job in $(jobs -p);
    do
        wait ${job} || let ""fails+=1"";
    done; for platform in ""${platforms[@]}"";
    do
        cat ""/tmp//${platform//\//_}.build"";
    done; exit ${fails};
else
    for platform in ""${platforms[@]}"";
    do
        kube::log::status ""Building go targets for ${platform}:"" ""${targets[@]}""; kube::golang::set_platform_envs ""${platform}""; kube::golang::build_binaries_for_platform ${platform} ${use_go_build:-};
    done;
fi )' exited with status 1
Call stack:
  1: /home/nan/kubernetes/hack/lib/golang.sh:456 kube::golang::build_binaries(...)
  2: hack/build-go.sh:26 main(...)
Exiting with status 1
make: *** [all] Error 1
",6027
670,34080574,go,2
671,34080574,PATH,4
672,34080574,1.5.1,5
673,34080574,"$ echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/usr/local/go/bin
$ which go
/usr/local/go/bin/go
$ go version
go version go1.5.1 linux/amd64
",164
674,34119757,/usr/sbin/lsof -p,17
675,34119757,"monitor_ 13105 root  101u  sock      0,6      0t0 16960100 can't identify protocol
monitor_ 13105 root  102u  sock      0,6      0t0 21552427 can't identify protocol
monitor_ 13105 root  103u  sock      0,6      0t0 17565091 can't identify protocol
monitor_ 13105 root  104u  sock      0,6      0t0 18476870 can't identify protocol
",332
676,34119757,"[root@Monitor_q ~]# cat /proc/13105/status 
Name:   monitor_client
State:  S (sleeping)
Tgid:   13105
Pid:    13105
PPid:   13104
TracerPid:  0
Uid:    0   0   0   0
Gid:    0   0   0   0
Utrace: 0
FDSize: 16384
Groups: 
...


[root@Monitor_q ~]# cat /proc/13105/limits 
Limit                     Soft Limit           Hard Limit           Units     
Max cpu time              unlimited            unlimited            seconds   
Max file size             unlimited            unlimited            bytes     
Max data size             unlimited            unlimited            bytes     
Max stack size            10485760             unlimited            bytes     
Max core file size        0                    unlimited            bytes     
Max resident set          unlimited            unlimited            bytes     
Max processes             3870                 3870                 processes 
Max open files            9999                 9999                 files     
Max locked memory         65536                65536                bytes     
Max address space         unlimited            unlimited            bytes     
Max file locks            unlimited            unlimited            locks     
Max pending signals       3870                 3870                 signals   
Max msgqueue size         819200               819200               bytes     
Max nice priority         0                    0                    
Max realtime priority     0                    0                    
Max realtime timeout      unlimited            unlimited            us

[root@Monitor_q ~]# ll /proc/13105/fd/
lrwx------ 1 root root 64 Dec  7 00:15 8382 -> socket:[52023221]
lrwx------ 1 root root 64 Dec  7 00:15 8383 -> socket:[51186627]
lrwx------ 1 root root 64 Dec  7 00:15 8384 -> socket:[51864232]
lrwx------ 1 root root 64 Dec  7 00:15 8385 -> socket:[52435453]
lrwx------ 1 root root 64 Dec  7 00:15 8386 -> socket:[51596071]
lrwx------ 1 root root 64 Dec  7 00:15 8387 -> socket:[52767667]
lrwx------ 1 root root 64 Dec  7 00:15 8388 -> socket:[52090632]
lrwx------ 1 root root 64 Dec  7 00:15 8389 -> socket:[51739068]
lrwx------ 1 root root 64 Dec  7 00:15 839 -> socket:[22963529]
lrwx------ 1 root root 64 Dec  7 00:15 8390 -> socket:[52023223]
lrwx------ 1 root root 64 Dec  7 00:15 8391 -> socket:[52560389]
lrwx------ 1 root root 64 Dec  7 00:15 8392 -> socket:[52402565]
...
",2409
677,34119757,netstat -a,10
678,34119757,"package main

import (
    ""crypto/tls""
    ""encoding/json""
    ""fmt""
    ""log""
    ""net""
    ""net/http""
    nurl ""net/url""
    ""strconv""
    ""strings""
    ""syscall""
    ""time""
)

type Result struct {
    Error      string        `json:""error""`
    HttpStatus int           `json:""http_status""`
    Stime      time.Duration `json:""http_time""`
}

//http://stackoverflow.com/questions/20990332/golang-http-timeout-and-goroutines-accumulation
//http://3.3.3.3/http?host=3.2.4.2&servername=a.test&path=/&port=33&timeout=5&scheme=http
func MonitorHttp(w http.ResponseWriter, r *http.Request) {
    var host, servername, path, port, scheme string
    var timeout int
    u, err := nurl.Parse(r.RequestURI)
    if err != nil {
        log.Fatal(err)
        return
    }
    if host = u.Query().Get(""host""); host == """" {
        host = ""127.0.0.0""
    }
    if servername = u.Query().Get(""servername""); servername == """" {
        servername = ""localhost""
    }
    if path = u.Query().Get(""path""); path == """" {
        path = ""/""
    }
    if port = u.Query().Get(""port""); port == """" {
        port = ""80""
    }
    if scheme = u.Query().Get(""scheme""); scheme == """" {
        scheme = ""http""
    }

    if timeout, _ = strconv.Atoi(u.Query().Get(""timeout"")); timeout == 0 {
        timeout = 5
    }

    //log.Printf(""(host)=%s (servername)=%s (path)=%s (port)=%s (timeout)=%d"", host, servername, path, port, timeout)

    w.Header().Set(""Content-Type"", ""application/json"")

    res := httptool(host, port, servername, scheme, path, timeout)
    result, _ := json.Marshal(res)
    fmt.Fprintf(w, ""%s"", result)
}

func httptool(ip, port, servername, scheme, path string, timeout int) Result {

    var result Result
    startTime := time.Now()
    host := ip + "":"" + port

    transport := &http.Transport{
        TLSClientConfig:   &tls.Config{InsecureSkipVerify: true},
        DisableKeepAlives: true,
    }

    dialer := net.Dialer{
        Timeout:   time.Duration(timeout) * time.Second,
        KeepAlive: 0 * time.Second,
    }
    transport.Dial = func(network, address string) (net.Conn, error) {
        return dialer.Dial(network, address)
    }

    client := &http.Client{
        Transport: transport,
    }
    rawquery := """"
    url := fmt.Sprintf(""%s://%s%s%s"", scheme, host, path, rawquery)
    req, err := http.NewRequest(""GET"", url, nil)
    if err != nil {
        result.HttpStatus = -1
        errs := strings.Split(err.Error(), "": "")
        result.Error = errs[len(errs)-1]
        result.Stime = time.Now().Sub(startTime) / time.Millisecond
        return result
    }
    req.Header.Set(""User-Agent"", ""monitor worker"")
    req.Header.Set(""Connection"", ""close"")
    req.Host = servername
    resp, err := client.Do(req)
    //https://github.com/Basiclytics/neverdown/blob/master/check.go
    if err != nil {
        nerr, ok := err.(*nurl.Error)
        if ok {
            switch cerr := nerr.Err.(type) {
            case *net.OpError:
                switch cerr.Err.(type) {
                case *net.DNSError:
                    errs := strings.Split(cerr.Error(), "": "")
                    result.Error = ""dns: "" + errs[len(errs)-1]
                default:
                    errs := strings.Split(cerr.Error(), "": "")
                    result.Error = ""server: "" + errs[len(errs)-1]
                }
            default:
                switch nerr.Err.Error() {
                case ""net/http: request canceled while waiting for connection"":
                    errs := strings.Split(cerr.Error(), "": "")
                    result.Error = ""timeout: "" + errs[len(errs)-1]

                default:
                    errs := strings.Split(cerr.Error(), "": "")
                    result.Error = ""unknown: "" + errs[len(errs)-1]
                }
            }

        } else {
            result.Error = ""unknown: "" + err.Error()
        }
        result.HttpStatus = -2
        result.Stime = time.Now().Sub(startTime) / time.Millisecond
        return result
    }
    resp.Body.Close()
    result.HttpStatus = resp.StatusCode
    result.Error = ""noerror""
    result.Stime = time.Now().Sub(startTime) / time.Millisecond //spend time (ms)
    return result
}

func setRlimit() {
    var rLimit syscall.Rlimit
    err := syscall.Getrlimit(syscall.RLIMIT_NOFILE, &rLimit)
    if err != nil {
        log.Printf(""Unable to obtain rLimit"", err)
    }
    if rLimit.Cur < rLimit.Max {
        rLimit.Max = 9999
        rLimit.Cur = 9999
        err = syscall.Setrlimit(syscall.RLIMIT_NOFILE, &rLimit)
        if err != nil {
            log.Printf(""Unable to increase number of open files limit"", err)
        }
    }
}

func main() {
    setRlimit()
    s := &http.Server{
        Addr:         "":59059"",
        ReadTimeout:  7 * time.Second,
        WriteTimeout: 7 * time.Second,
    }
    http.HandleFunc(""/http"", MonitorHttp)

    log.Fatal(s.ListenAndServe())
}
",4898
679,34206809,"package main

import (
    ""fmt""
    ""io""
    ""net""
    ""time""
)

func main() {
    ln, err := net.Listen(""tcp"", "":9000"")
    if err != nil {
        panic(err)
    }
    defer ln.Close()

    for {
        conn, err := ln.Accept()
        if err != nil {
            panic(err)
        }

        io.WriteString(conn, fmt.Sprint(""Hello World\n"", time.Now(), ""\n""))

        conn.Close()
    }
}
",396
680,34206809,"package main

import (
    ""fmt""
    ""io/ioutil""
    ""net""
)

func main() {
    conn, err := net.Dial(""tcp"", ""localhost:9000"")
    if err != nil {
        panic(err)
    }
    defer conn.Close()

    bs, _ := ioutil.ReadAll(conn)
    fmt.Println(string(bs))

}
",261
681,34206809,"package main

import (
    ""io""
    ""net""
)

func main() {
    ln, err := net.Listen(""tcp"", "":9000"")
    if err != nil {
        panic(err)
    }
    defer ln.Close()

    for {
        conn, err := ln.Accept()
        if err != nil {
            panic(err)
        }

        // handles unlimited connections
        go func() {
            io.Copy(conn, conn)
            conn.Close()
        }()
    }
}
",407
682,34206809,"package main

import (
    ""bufio""
    ""fmt""
    ""io""
    ""log""
    ""net""
    ""strings""
)

var data = make(map[string]string)

func handle(conn net.Conn) {
    defer conn.Close()

    scanner := bufio.NewScanner(conn)
    for scanner.Scan() {
        ln := scanner.Text()
        fs := strings.Fields(ln)

        if len(fs) < 2 {
            io.WriteString(conn, ""This is an in-memory database \n"" +
            ""Use SET, GET, DEL like this: \n"" +
            ""SET key value \n"" +
            ""GET key \n"" +
            ""DEL key \n\n"" +
            ""For example - try these commands: \n"" +
            ""SET fav chocolate \n"" +
            ""GET fav \n\n\n"")
            continue
        }

        switch fs[0] {
        case ""GET"":
            key := fs[1]
            value := data[key]
            fmt.Fprintf(conn, ""%s\n"", value)
        case ""SET"":
            if len(fs) != 3 {
                io.WriteString(conn, ""EXPECTED VALUE\n"")
                continue
            }
            key := fs[1]
            value := fs[2]
            data[key] = value
        case ""DEL"":
            key := fs[1]
            delete(data, key)
        default:
            io.WriteString(conn, ""INVALID COMMAND ""+fs[0]+""\n"")
        }
    }
}

func main() {
    li, err := net.Listen(""tcp"", "":9000"")
    if err != nil {
        log.Fatalln(err)
    }
    defer li.Close()

    for {
        conn, err := li.Accept()
        if err != nil {
            log.Fatalln(err)
        }
        handle(conn)
    }
}
",1501
683,34206809,"package main

import (
    ""bufio""
    ""fmt""
    ""io""
    ""log""
    ""net""
    ""strings""
)

type Command struct {
    Fields []string
    Result chan string
}

func redisServer(commands chan Command) {
    var data = make(map[string]string)
    for cmd := range commands {
        if len(cmd.Fields) < 2 {
            cmd.Result <- ""Expected at least 2 arguments""
            continue
        }

        fmt.Println(""GOT COMMAND"", cmd)

        switch cmd.Fields[0] {
        // GET 
        case ""GET"":
            key := cmd.Fields[1]
            value := data[key]

            cmd.Result <- value

        // SET  
        case ""SET"":
            if len(cmd.Fields) != 3 {
                cmd.Result <- ""EXPECTED VALUE""
                continue
            }
            key := cmd.Fields[1]
            value := cmd.Fields[2]
            data[key] = value
            cmd.Result <- """"
        // DEL 
        case ""DEL"":
            key := cmd.Fields[1]
            delete(data, key)
            cmd.Result <- """"
        default:
            cmd.Result <- ""INVALID COMMAND "" + cmd.Fields[0] + ""\n""
        }
    }
}

func handle(commands chan Command, conn net.Conn) {
    defer conn.Close()

    scanner := bufio.NewScanner(conn)
    for scanner.Scan() {
        ln := scanner.Text()
        fs := strings.Fields(ln)

        result := make(chan string)
        commands <- Command{
            Fields: fs,
            Result: result,
        }

        io.WriteString(conn, <-result+""\n"")
    }

}

func main() {
    li, err := net.Listen(""tcp"", "":9000"")
    if err != nil {
        log.Fatalln(err)
    }
    defer li.Close()

    commands := make(chan Command)
    go redisServer(commands)

    for {
        conn, err := li.Accept()
        if err != nil {
            log.Fatalln(err)
        }

        go handle(commands, conn)
    }
}
",1848
684,34277857,"package euler

import ""testing""

func TestEulers(t *testing.T) {

    tests := map[string][]int{
        ""Euler1"": {Euler1(), 233168},
        ""Euler2"": {Euler2(), 4613732},
        ""Euler3"": {Euler3(), 6857},
        ""Euler4"": {Euler4(), 906609},
        ""Euler5"": {Euler5(), 232792560},
        ""Euler6"": {Euler6(), 25164150},
    }

    for key, value := range tests {
        if value[0] != value[1] {
            t.Errorf(""%s\nExpected: %d\nGot:%d"",
                key, value[0], value[1])
        }
    }
}
",514
685,34277857,"tests := map[string][]int{
    ""Euler1"": {Euler1(), 233168},
    // ""Euler2"": {Euler2(), 4613732},
    ""Euler3"": {Euler3(), 6857},
    ""Euler4"": {Euler4(), 906609},
    // ""Euler5"": {Euler5(), 232792560},
    // ""Euler6"": {Euler6(), 25164150},
} 
",247
686,34277857,"tests := map[string][]int{
        //""Euler1"": {Euler1(), 233168},
        ""Euler2"": {Euler2(), 4613732},
        ""Euler3"": {Euler3(), 6857},
        ""Euler4"": {Euler4(), 906609},
        //""Euler5"": {Euler5(), 232792560},
        // ""Euler6"": {Euler6(), 25164150},
    }
",272
687,34277857,"    WARNING: DATA RACE
Write by goroutine 6:
  runtime.closechan()
      /private/var/folders/q8/bf_4b1ts2zj0l7b0p1dv36lr0000gp/T/workdir/go/src/runtime/chan.go:295 +0x0
  github.com/alesr/project-euler.Euler2()
      /Users/Alessandro/GO/src/github.com/alesr/project-euler/euler.go:40 +0xd7
  github.com/alesr/project-euler.TestEulers()
      /Users/Alessandro/GO/src/github.com/alesr/project-euler/euler_test.go:9 +0x46
  testing.tRunner()
      /private/var/folders/q8/bf_4b1ts2zj0l7b0p1dv36lr0000gp/T/workdir/go/src/testing/testing.go:456 +0xdc

Previous read by goroutine 7:
  runtime.chansend()
      /private/var/folders/q8/bf_4b1ts2zj0l7b0p1dv36lr0000gp/T/workdir/go/src/runtime/chan.go:107 +0x0
  github.com/alesr/numbers.FibonacciGen.func1()
      /Users/Alessandro/GO/src/github.com/alesr/numbers/numbers.go:103 +0x59

Goroutine 6 (running) created at:
  testing.RunTests()
      /private/var/folders/q8/bf_4b1ts2zj0l7b0p1dv36lr0000gp/T/workdir/go/src/testing/testing.go:561 +0xaa3
  testing.(*M).Run()
      /private/var/folders/q8/bf_4b1ts2zj0l7b0p1dv36lr0000gp/T/workdir/go/src/testing/testing.go:494 +0xe4
  main.main()
      github.com/alesr/project-euler/_test/_testmain.go:54 +0x20f

Goroutine 7 (running) created at:
  github.com/alesr/numbers.FibonacciGen()
      /Users/Alessandro/GO/src/github.com/alesr/numbers/numbers.go:105 +0x60
  github.com/alesr/project-euler.Euler2()
      /Users/Alessandro/GO/src/github.com/alesr/project-euler/euler.go:27 +0x32
  github.com/alesr/project-euler.TestEulers()
      /Users/Alessandro/GO/src/github.com/alesr/project-euler/euler_test.go:9 +0x46
  testing.tRunner()
      /private/var/folders/q8/bf_4b1ts2zj0l7b0p1dv36lr0000gp/T/workdir/go/src/testing/testing.go:456 +0xdc
==================
panic: send on closed channel

goroutine 36 [running]:
github.com/alesr/numbers.FibonacciGen.func1(0xc8200a01e0)
    /Users/Alessandro/GO/src/github.com/alesr/numbers/numbers.go:103 +0x5a
created by github.com/alesr/numbers.FibonacciGen
    /Users/Alessandro/GO/src/github.com/alesr/numbers/numbers.go:105 +0x61

goroutine 1 [chan receive]:
testing.RunTests(0x24d038, 0x2f7340, 0x1, 0x1, 0xf78401)
    /private/var/folders/q8/bf_4b1ts2zj0l7b0p1dv36lr0000gp/T/workdir/go/src/testing/testing.go:562 +0xafa
testing.(*M).Run(0xc82004df00, 0x1ff0e8)
    /private/var/folders/q8/bf_4b1ts2zj0l7b0p1dv36lr0000gp/T/workdir/go/src/testing/testing.go:494 +0xe5
main.main()
    github.com/alesr/project-euler/_test/_testmain.go:54 +0x210

goroutine 17 [syscall, locked to thread]:
runtime.goexit()
    /private/var/folders/q8/bf_4b1ts2zj0l7b0p1dv36lr0000gp/T/workdir/go/src/runtime/asm_amd64.s:1696 +0x1

goroutine 35 [runnable]:
github.com/alesr/strings.Flip(0xc8200727a0, 0x6, 0x0, 0x0)
    /Users/Alessandro/GO/src/github.com/alesr/strings/strings.go:33 +0x17e
github.com/alesr/project-euler.Euler4(0x1ac9)
    /Users/Alessandro/GO/src/github.com/alesr/project-euler/euler.go:73 +0x95
github.com/alesr/project-euler.TestEulers(0xc8200b6000)
    /Users/Alessandro/GO/src/github.com/alesr/project-euler/euler_test.go:11 +0x63
testing.tRunner(0xc8200b6000, 0x2f7340)
    /private/var/folders/q8/bf_4b1ts2zj0l7b0p1dv36lr0000gp/T/workdir/go/src/testing/testing.go:456 +0xdd
created by testing.RunTests
    /private/var/folders/q8/bf_4b1ts2zj0l7b0p1dv36lr0000gp/T/workdir/go/src/testing/testing.go:561 +0xaa4
exit status 2
FAIL    github.com/alesr/project-euler  0.022s
",3408
688,34498981,"const userName = ""xxxxxxxxxxxx""

func TestSynchroninze(t *testing.T) {
    c, err := channel.New(github.ChannelName, authToken)
    if err != nil {
        t.Fatalf(""Could not create channel: %s"", err)
        return
    }

    state := channel.NewState(nil)
    ctx := context.Background()
    ctx = context.WithValue(ctx, ""userId"", userName)
    user := api.User{}

    output, errs := c.Synchronize(state, ctx)

    if err = <-errs; err != nil {
        t.Fatalf(""Error performing synchronize: %s"", err)
        return
    }

    for o := range output {
        switch oo := o.Data.(type) {
        case api.User:
            user = oo
            glog.Infof(""we have a USER %s\n"", user)
        default:
            t.Errorf(""Encountered unexpected data type: %T"", oo)
        }
    }
}
",791
689,34498981,"type github struct {
    client *api.Client
}

func newImplementation(t auth.UserToken) implementation.Implementation {
    return &github{client: api.NewClient(t)}
}

// -------------------------------------------------------------------------------------

const (
    kLastUserFetch = ""lastUserFetch""
)

type synchronizeFunc func(implementation.MutableState, chan *implementation.Output, context.Context) error

// -------------------------------------------------------------------------------------

    func (g *github) Synchronize(state implementation.MutableState, ctx context.Context) (<-chan *implementation.Output, <-chan error) {
        output := make(chan *implementation.Output)
        errors := make(chan error, 1) // buffer allows preflight errors

        // Close output channels once we're done
        defer func() {
            go func() {
                // wg.Wait()

                close(errors)
                close(output)
            }()
        }()

        err := g.fetchUser(state, output, ctx)
        if err != nil {
            errors <- err
        }

        return output, errors
    }

func (g *github) fetchUser(state implementation.MutableState, output chan *implementation.Output, ctx context.Context) error {
    var err error

    var user = api.User{}
    userId, _ := ctx.Value(""userId"").(string)
    user, err = g.client.GetUser(userId, ctx.Done())

    if err == nil {
        glog.Info(""No error in fetchUser"")
        output <- &implementation.Output{Data: user}
        state.SetTime(kLastUserFetch, time.Now())
    }

    return err
}

func (c *Client) GetUser(id string, quit <-chan struct{}) (user User, err error) {
    // Execute request
    var data []byte
    data, err = c.get(""users/""+id, nil, quit)
    glog.Infof(""USER DATA %s"", data)

    // Parse response
    if err == nil && len(data) > 0 {
        err = json.Unmarshal(data, &user)

        data, _ = json.Marshal(user)
    }

    return
}
",1958
690,34498981,"I1228 13:25:05.291010   21313 client.go:177] GET https://api.github.com/users/xxxxxxxx
I1228 13:25:06.010085   21313 client.go:36] USER DATA {""login"":""xxxxxxxx"",""id"":00000000,""avatar_url"":""https://avatars.githubusercontent.com/u/0000000?v=3"",...}
I1228 13:25:06.010357   21313 github.go:90] No error in fetchUser
",313
691,34498981,api,3
692,34498981,"package api

type Client struct {
    authToken auth.UserToken
    http      *http.Client
}

func NewClient(authToken auth.UserToken) *Client {
    return &Client{
        authToken: authToken,
        http:      auth.NewClient(authToken),
    }
}




// -------------------------------------------------------------------------------------
type User struct {
    Id             int    `json:""id,omitempty""`
    Username       string `json:""login,omitempty""`
    Email          string `json:""email,omitempty""`
    FullName       string `json:""name,omitempty""`
    ProfilePicture string `json:""avatar_url,omitempty""`
    Bio            string `json:""bio,omitempty""`
    Website        string `json:""blog,omitempty""`
    Company        string `json:""company,omitempty""`
}
",770
693,34498981,channel,7
694,34498981,"package channel

type Channel struct {
    implementation.Descriptor
    imp implementation.Implementation
}

// New returns a channel implementation with a given name and auth token.
func New(name string, token auth.UserToken) (*Channel, error) {
    if desc, ok := implementation.Lookup(name); ok {
        if imp := implementation.New(name, token); imp != nil {
            return &Channel{Descriptor: desc, imp: imp}, nil
        }
    }

    return nil, ErrInvalidChannel
}
",479
695,34498981,implementation,14
696,34498981,"package implementation

import ""golang.org/x/net/context""

// -------------------------------------------------------------------------------------

// Implementation is the interface implemented by subpackages.
type Implementation interface {
    // Synchronize performs a synchronization using the given state. A context parameters
    // is provided to provide cancellation as well as implementation-specific behaviors.
    //
    // If a fatal error occurs (see package error definitions), the state can be discarded
    // to prevent the persistence of an invalid state.
    Synchronize(state MutableState, ctx context.Context) (<-chan *Output, <-chan error)

    // FetchDetails gets details for a given timeline item. Any changes to the TimelineItem
    // (including the Meta value) will be persisted.
    FetchDetails(item *TimelineItem, ctx context.Context) (interface{}, error)
}
",891
697,34498981,Synchronize,11
698,34498981,go func,7
699,34498981,Wait Groups,11
700,34498981,"func (g *github) Synchronize(state implementation.MutableState, ctx context.Context) (<-chan *implementation.Output, <-chan error) {
    wg := sync.WaitGroup{}
    output := make(chan *implementation.Output)
    errors := make(chan error, 1) // buffer allows preflight errors

    // Close output channels once we're done
    defer func() {
        go func() {
            wg.Wait()

            close(errors)
            close(output)
        }()
    }()

    // Perform fetch functions in separate routines
    funcs := []synchronizeFunc{
        g.fetchUser,
    }

    for _, f := range funcs {
        wg.Add(1)

        go func(f synchronizeFunc) {
            defer wg.Done()

            if err := f(state, output, ctx); err != nil {
                errors <- err
            }
        }(f)
    }

    glog.Info(""after go sync..."")

    return output, errors
}
",869
701,34500527,"package main

import (
    ""bufio""
    _ ""bytes""
    ""fmt""
    _ ""io""
    ""log""
    ""os""
    ""os/user""
    ""path/filepath""
    _ ""reflect""
    ""regexp""
    ""runtime""
    ""strconv""
    ""strings""
    ""sync""
    ""time""

    ""github.com/aws/aws-sdk-go/aws""
    ""github.com/aws/aws-sdk-go/aws/session""
    ""github.com/aws/aws-sdk-go/service/s3""
    ""github.com/aws/aws-sdk-go/service/s3/s3manager""
)

var (
    LocalDirectory   = ""s3logs"" // Into this directory
    Lock             sync.Mutex
    totalImpressions int
)

var data = make(map[string]map[string]int)

func main() {
    start := time.Now()
    // by adding this line i'm telling the program to run the threads on 4 different cores at the same time, Parallelism!!
    //REMEMBER TO ADD BLOCKS TO STOP RACE CONDITIONS
    runtime.GOMAXPROCS(4)
    var wg sync.WaitGroup

    var year, month, day = time.Now().Date()
    str_year := strconv.Itoa(year)
    str_month := strconv.Itoa(int(month))
    str_day := strconv.Itoa(day)

    if int(month) < 10 {
        str_month = ""0"" + strconv.Itoa(int(month))
    }
    if day < 10 {
        str_day = ""0"" + strconv.Itoa(day)
    }

    regBuckets := map[string]string{
        ""us-west-1"": ""pubgears-ca"",
        ""test"":      ""test"",
    }

    for region, bucket := range regBuckets {
        prefix := fmt.Sprintf(""tagserver/logs/AWSLogs/978380792767/elasticloadbalancing/%s/%s/%s/%s/"", region, str_year, str_month, str_day)
        wg.Add(1)
        go getLogs(region, bucket, LocalDirectory+bucket, &prefix, &wg)
    }
    wg.Wait()

    //salon/t1/728x90/index
    //totalImpressions := 0
    // var provider = make(map[string]int)
    // for key, value := range data {
    //   key = strings.TrimSpace(key)
    //   pro := strings.Split(key, ""_"")[3]
    //
    //   if strings.Contains(pro, ""pp"") == true || (pro == ""pulsepoint"") || (pro == ""cweb"") {
    //     provider[""pulsepoint""] += value
    //   } else if (pro == ""openx"") || (pro == ""openx3"") {
    //     provider[""openx""] += value
    //   } else if key == "" "" {
    //     continue
    //   } else {
    //     provider[pro] += value
    //   }
    //   totalImpressions += value
    // }

    for tag, value := range data {
        for hour, imp := range value {
            fmt.Printf(""tag: %s  \n hour: %s impression %s\n"", tag, hour, imp)
        }
    }

    //sl = sl[:len(sl)-1]

    elapsed := time.Since(start)
    fmt.Printf(""\nTime took %s\n"", elapsed)

}

func getLogs(region string, bucket string, directory string, prefix *string, wg *sync.WaitGroup) {
    sess := session.New()
    client := s3.New(sess, &aws.Config{Region: aws.String(region)})

    params := &s3.ListObjectsInput{Bucket: &bucket, Prefix: prefix}
    manager := s3manager.NewDownloaderWithClient(client, func(d *s3manager.Downloader) {
        d.PartSize = 5 * 1024 * 1024 // 6MB per part
        d.Concurrency = 4
    })
    d := downloader{bucket: bucket, dir: directory, Downloader: manager}
    client.ListObjectsPages(params, d.eachPage)
    wg.Done()
}

// downloader object and methods
type downloader struct {
    *s3manager.Downloader
    bucket, dir string
}

func (d *downloader) eachPage(page *s3.ListObjectsOutput, more bool) bool {
    for _, obj := range page.Contents {
        // fmt.Println(obj)
        //     return true
        d.downloadToFile(*obj.Key)
    }
    return true
}

func (d *downloader) downloadToFile(key string) {
    // Create the directories in the path
    // desktop path
    user, errs := user.Current()
    if errs != nil {
        panic(errs)
    }
    homedir := user.HomeDir
    desktop := homedir + ""/Desktop/"" + d.dir
    file := filepath.Join(desktop, key)
    if err := os.MkdirAll(filepath.Dir(file), 0775); err != nil {
        panic(err)
    }

    // Setup the local file
    fd, err := os.Create(file)
    if err != nil {
        panic(err)
    }
    defer fd.Close()

    // Download the file using the AWS SDK
    //fmt.Printf(""Downloading s3://%s/%s to %s...\n"", d.bucket, key, file)
    params := &s3.GetObjectInput{Bucket: &d.bucket, Key: &key}
    d.Download(fd, params)
    _, e := d.Download(fd, params)
    if e != nil {
        panic(e)
    }

    f, err := os.Open(file)
    if err != nil {
        log.Fatal(err)
    }
    defer f.Close()

    tag := regexp.MustCompile(""/([a-zA-Z0-9_]+/{1}[a-zA-Z0-9_]+/{1}[a-zA-Z0-9_]+/{1}[a-zA-Z0-9_]+)"")
    date := regexp.MustCompile(""T([^:]+)"")
    scanner := bufio.NewScanner(f)

    // HAVING TROUBLE HERE
    for scanner.Scan() {
        //dateCollection := make(map[string]int)
        m := tag.FindString(scanner.Text())
        if m != """" {
            // stop races
            Lock.Lock()
            arr := strings.Split(m, ""/"")
            taghash := strings.Join(arr, ""_"")
            taghash = strings.TrimLeft(taghash, ""_"")
            //data[taghash]++
            m = date.FindString(scanner.Text())
            if m != """" {
                hour := m
                data[taghash] = make(map[string]int)
                data[taghash][hour]++
            }
            Lock.Unlock()
        }
    }
    fmt.Println(file)
    os.Remove(file)
    if err := scanner.Err(); err != nil {
        log.Fatal(err)
    }
}
",5185
702,34500527,"for scanner.Scan() {
        //dateCollection := make(map[string]int)
        m := tag.FindString(scanner.Text())
        if m != """" {
            // stop races
            Lock.Lock()
            arr := strings.Split(m, ""/"")
            taghash := strings.Join(arr, ""_"")
            taghash = strings.TrimLeft(taghash, ""_"")
            //data[taghash]++
            m = date.FindString(scanner.Text())
            if m != """" {
                hour := m
                data[taghash] = make(map[string]int)
                data[taghash][hour]++
            }
            Lock.Unlock()
        }
    }
    fmt.Println(file)
    os.Remove(file)
    if err := scanner.Err(); err != nil {
        log.Fatal(err)
    }
",714
703,34500527,"fstvt1_ros_300x600_pp8_1 T07 1
",31
704,34500527,"fstvt1_ros_300x600_pp8_1
T00 213434
T01 23432
T02 3324
T03 324
T04 324
T05 0 ...
(this isn't real data)
",104
705,34500527,var data = make(map[string]map[string]int),42
706,34500527,fstvt1_ros_300x600_pp8_1,24
707,34500527,"data[taghash][hour]++
",22
708,34663699,"// ResponseWriterTo can proxy requests to an underlying http.ResponseWriter.
// It is used with CustomResponseWriter to wrap an http.ResponseWriter with
// custom behavior.
type ResponseWriterTo interface {
    HeaderTo(w http.ResponseWriter) http.Header
    WriteHeaderTo(w http.ResponseWriter, s int)
    WriteTo(w http.ResponseWriter, b []byte) (n int, err error)

    // Additional methods that http.ResponseWriter sometimes implements.
    CloseNotifyTo(w http.CloseNotifier) <-chan bool
    FlushTo(w http.Flusher)
    HijackTo(w http.Hijacker) (net.Conn, *bufio.ReadWriter, error)

    // ReaderFrom is used by the http package to optimize reads from TCP
    // connections or from files.
    ReadFromTo(w io.ReaderFrom, r io.Reader) (n int64, err error)
}
",764
709,34663699,"// CustomResponseWriter creates a http.ResponseWriter that implements as many
// hidden interfaces from the base http.ResponseWriter as are available.
func CustomResponseWriter(base http.ResponseWriter, custom ResponseWriterTo) http.ResponseWriter {
    rw := &customResponseWriter{base: base, custom: custom}

    // the base http.ResponseWriter can implement many hidden interfaces,
    // so check all permutations

    type HCFR interface {
        http.ResponseWriter
        http.Hijacker
        http.CloseNotifier
        http.Flusher
        io.ReaderFrom
    }
    if _, ok := base.(HCFR); ok {
        return struct {
            HCFR
        }{rw}
    }

    type HCF interface {
        http.ResponseWriter
        http.Hijacker
        http.CloseNotifier
        http.Flusher
    }
    if _, ok := base.(HCF); ok {
        return struct {
            HCF
        }{rw}
    }

    type HCR interface {
        http.ResponseWriter
        http.Hijacker
        http.CloseNotifier
        io.ReaderFrom
    }
    if _, ok := base.(HCR); ok {
        return struct {
            HCR
        }{rw}
    }

    type HFR interface {
        http.ResponseWriter
        http.Hijacker
        http.Flusher
        io.ReaderFrom
    }
    if _, ok := base.(HFR); ok {
        return struct {
            HFR
        }{rw}
    }

    type CFR interface {
        http.ResponseWriter
        http.CloseNotifier
        http.Flusher
        io.ReaderFrom
    }
    if _, ok := base.(CFR); ok {
        return struct {
            CFR
        }{rw}
    }

    type HC interface {
        http.ResponseWriter
        http.Hijacker
        http.CloseNotifier
    }
    if _, ok := base.(HC); ok {
        return struct {
            HC
        }{rw}
    }

    type HF interface {
        http.ResponseWriter
        http.Hijacker
        http.Flusher
    }
    if _, ok := base.(HF); ok {
        return struct {
            HF
        }{rw}
    }

    type CF interface {
        http.ResponseWriter
        http.CloseNotifier
        http.Flusher
    }
    if _, ok := base.(CF); ok {
        return struct {
            CF
        }{rw}
    }

    type HR interface {
        http.ResponseWriter
        http.Hijacker
        io.ReaderFrom
    }
    if _, ok := base.(HR); ok {
        return struct {
            HR
        }{rw}
    }

    type CR interface {
        http.ResponseWriter
        http.CloseNotifier
        io.ReaderFrom
    }
    if _, ok := base.(CR); ok {
        return struct {
            CR
        }{rw}
    }

    type FR interface {
        http.ResponseWriter
        http.Flusher
        io.ReaderFrom
    }
    if _, ok := base.(FR); ok {
        return struct {
            FR
        }{rw}
    }

    type H interface {
        http.ResponseWriter
        http.Hijacker
    }
    if _, ok := base.(H); ok {
        return struct {
            H
        }{rw}
    }

    type C interface {
        http.ResponseWriter
        http.CloseNotifier
    }
    if _, ok := base.(C); ok {
        return struct {
            C
        }{rw}
    }

    type F interface {
        http.ResponseWriter
        http.Flusher
    }
    if _, ok := base.(F); ok {
        return struct {
            F
        }{rw}
    }

    type R interface {
        http.ResponseWriter
        io.ReaderFrom
    }
    if _, ok := base.(R); ok {
        return struct {
            R
        }{rw}
    }

    return struct {
        http.ResponseWriter
    }{rw}
}

// customResponseWriter allows us to adapt a ResponseWriterTo to a ResponseWriter.
type customResponseWriter struct {
    base   http.ResponseWriter
    custom ResponseWriterTo
}

func (w *customResponseWriter) Header() http.Header         { return w.custom.HeaderTo(w.base) }
func (w *customResponseWriter) Write(b []byte) (int, error) { return w.custom.WriteTo(w.base, b) }
func (w *customResponseWriter) WriteHeader(s int)           { w.custom.WriteHeaderTo(w.base, s) }
func (w *customResponseWriter) CloseNotify() <-chan bool {
    return w.custom.CloseNotifyTo(w.base.(http.CloseNotifier))
}
func (w *customResponseWriter) Flush() { w.custom.FlushTo(w.base.(http.Flusher)) }
func (w *customResponseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {
    return w.custom.HijackTo(w.base.(http.Hijacker))
}
func (w *customResponseWriter) ReadFrom(r io.Reader) (n int64, err error) {
    return w.custom.ReadFromTo(w.base.(io.ReaderFrom), r)
}
",4423
710,34787709,"package main

 import (
   ""os""
   ""flag""
   ""fmt""
   ""io""
   ""path/filepath""
   ""os/exec""
   ""archive/zip""
   ""time""
 )

func RemoveContents(dir string) error {
    d, err := os.Open(dir)
    if err != nil {
        return err
    }
    names, err := d.Readdirnames(-1)
    if err != nil {
        return err
    }
    for _, name := range names { 
            err = os.RemoveAll(filepath.Join(dir, name))
            if err != nil {
                return err
            }
    }
    d.Close()
    return nil
}


func CopyFile(source string, dest string) (err error) {
     sourcefile, err := os.Open(source)
     if err != nil {
         return err
     }

     defer sourcefile.Close()

     destfile, err := os.Create(dest)
     if err != nil {
         return err
     }

     defer destfile.Close()

     _, err = io.Copy(destfile, sourcefile)
     if err == nil {
         sourceinfo, err := os.Stat(source)
         if err != nil {
             err = os.Chmod(dest, sourceinfo.Mode())
         }

     }

     return
 }

 func CopyDir(source string, dest string) (err error) {

     // get properties of source dir
     sourceinfo, err := os.Stat(source)
     if err != nil {
         return err
     }

     // create dest dir

     err = os.MkdirAll(dest, sourceinfo.Mode())
     if err != nil {
         return err
     }

     directory, _ := os.Open(source)

     objects, err := directory.Readdir(-1)

     for _, obj := range objects {

         sourcefilepointer := source + ""/"" + obj.Name()

         destinationfilepointer := dest + ""/"" + obj.Name()


         if obj.IsDir() {
             // create sub-directories - recursively
             err = CopyDir(sourcefilepointer, destinationfilepointer)
             if err != nil {
                 fmt.Println(err)
             }
         } else {
             // perform copy
             err = CopyFile(sourcefilepointer, destinationfilepointer)
             if err != nil {
                 fmt.Println(err)
             }
         }

     }
     return
 }




 func main() {
    flag.Parse() // get the source and destination directory

    source_dir := flag.Arg(0) // get the source directory from 1st argument

    dest_dir := flag.Arg(1) // get the destination directory from the 2nd argument

        os.MkdirAll(""E:\\go\\copyDirectory\\myFile.zip"",0777)
    zipFilePath := ""E:\\go\\copyDirectory\\myFile.zip""
    tempWrkDir := ""E:\\go\\copyDirectory\\""

    //Read zip file and get path handle.
    fileHandleReader, err := zip.OpenReader(zipFilePath)
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }
    //open zip file and read all the folder and files inside
    for _, fileReadHandler := range fileHandleReader.Reader.File {
        //read the file or folder handle inside zip
        fileOpenHandle, err := fileReadHandler.Open()
        if err != nil {
            fmt.Println(err)
            os.Exit(1)
        }
        defer fileOpenHandle.Close()
    targetUnZipPath := filepath.Join(tempWrkDir, fileReadHandler.Name)
    if fileReadHandler.FileInfo().IsDir() {
            os.MkdirAll(targetUnZipPath, fileReadHandler.Mode())
            //fmt.Println(""Creating directory"", path)
        }else {
            // create new dummy file to copy original file.
            newTempFileHandle, err := os.OpenFile(targetUnZipPath, os.O_WRONLY|os.O_CREATE, fileReadHandler.Mode())

            if err != nil {
                fmt.Println(err)
                os.Exit(1)
            }

            defer newTempFileHandle.Close()
            //copying original file to dummy file.
            if _, err = io.Copy(newTempFileHandle, fileOpenHandle); err != nil {
                fmt.Println(err)
                os.Exit(1)
            }
        }
    }
      time.Sleep(1000*time.Millisecond)

      fmt.Println(""Source :"" + source_dir)

      // check if the source dir exist
      src, err := os.Stat(source_dir)
     if err != nil {
       panic(err)
    }

     if !src.IsDir() {
       fmt.Println(""Source is not a directory"")
       os.Exit(1)
    }

   // create the destination directory
   fmt.Println(""Destination :""+ dest_dir)

   /*_, err = os.Open(dest_dir)
   if !os.IsNotExist(err) {
     fmt.Println(""Destination directory already exists. Abort!"")
     os.Exit(1)
   }*/

   err = CopyDir(source_dir, dest_dir)
   if err != nil {
      fmt.Println(err)
   } else {
      fmt.Println(""Directory copied"")
   }
    err = RemoveContents(""./myFiles"")
       if err != nil {
        fmt.Println(""ERRR:::"",err)
       }
    //time.Sleep(10000*time.Millisecond)
 }
",4573
711,34787709,"E:\go\copyDirectory\myfile\mytextfile.txt
",42
712,34787709," E:\go\copyDirectory\myfile.zip
",32
713,34787709,"E:\go\copyDirectory\myfile.zip\myfile\mytextfile.txt
",53
714,34787709,"ERRR::: remove myfile\mytextfile.txt: The process cannot
access the file because it is being used by another process.
",118
715,35163475,"package main

import (
    ""fmt""
    ""math""
    ""runtime""
    ""testing""
    ""time""
)

var (
    f  float64
    e  float64 = math.E
    pi float64 = math.Pi
)

const nFlop = 20 // benchmarkFloatOps

func benchmarkFloatOps(n int) {
    for i := 0; i < n; i++ {
        f = pi + e
        f = pi - e
        f = pi * e
        f = pi / e
        f = pi + e
        f = pi - e
        f = pi * e
        f = pi / e
        f = pi + e
        f = pi - e
        f = pi * e
        f = pi / e
        f = pi + e
        f = pi - e
        f = pi * e
        f = pi / e
        f = pi + e
        f = pi - e
        f = pi * e
        f = pi / e
    }
}

func BenchmarkFloatOps(b *testing.B) {
    benchmarkFloatOps(b.N)
}

func Results(t time.Duration, n int, nFlop int) {
    fmt.Println(
        t, nFlop*n, ""ops"",
        float64(t)/float64(time.Duration((nFlop*n))), ""ns/op"",
    )
}

func main() {
    runtime.GOMAXPROCS(1)

    // testing benchmark
    br := testing.Benchmark(BenchmarkFloatOps)
    Results(br.T, br.N, nFlop)

    // manual benchmark
    n := br.N
    start := time.Now()
    benchmarkFloatOps(n)
    end := time.Now()
    elapsed := end.Sub(start)
    Results(elapsed, n, nFlop)
}
",1200
716,35163475,"1.296967371s 4000000000 ops 0.32424184275 ns/op
1.299078813s 4000000000 ops 0.32476970325 ns/op
",96
717,35163475,benchmarkFloatOps,17
718,35163475,"$ go tool compile -S flops.go

"""".benchmarkFloatOps t=1 size=592 value=0 args=0x8 locals=0x0
    0x0000 00000 (flops.go:19)  TEXT    """".benchmarkFloatOps(SB), $0-8
    0x0000 00000 (flops.go:19)  NOP
    0x0000 00000 (flops.go:19)  NOP
    0x0000 00000 (flops.go:19)  MOVQ    """".n+8(FP), CX
    0x0005 00005 (flops.go:19)  FUNCDATA    $0, gclocals·5184031d3a32a42d85027f073f873668(SB)
    0x0005 00005 (flops.go:19)  FUNCDATA    $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
    0x0005 00005 (flops.go:20)  MOVQ    $0, AX
    0x0007 00007 (flops.go:20)  CMPQ    AX, CX
    0x000a 00010 (flops.go:20)  JGE $0, 588
    0x0010 00016 (flops.go:21)  MOVSD   """".pi(SB), X0
    0x0018 00024 (flops.go:21)  MOVSD   """".e(SB), X1
    0x0020 00032 (flops.go:21)  ADDSD   X1, X0
    0x0024 00036 (flops.go:21)  MOVSD   X0, """".f(SB)
    0x002c 00044 (flops.go:22)  MOVSD   """".pi(SB), X0
    0x0034 00052 (flops.go:22)  MOVSD   """".e(SB), X1
    0x003c 00060 (flops.go:22)  SUBSD   X1, X0
    0x0040 00064 (flops.go:22)  MOVSD   X0, """".f(SB)
    0x0048 00072 (flops.go:23)  MOVSD   """".pi(SB), X0
    0x0050 00080 (flops.go:23)  MOVSD   """".e(SB), X1
    0x0058 00088 (flops.go:23)  MULSD   X1, X0
    0x005c 00092 (flops.go:23)  MOVSD   X0, """".f(SB)
    0x0064 00100 (flops.go:24)  MOVSD   """".pi(SB), X0
    0x006c 00108 (flops.go:24)  MOVSD   """".e(SB), X1
    0x0074 00116 (flops.go:24)  DIVSD   X1, X0
    0x0078 00120 (flops.go:24)  MOVSD   X0, """".f(SB)
    0x0080 00128 (flops.go:25)  MOVSD   """".pi(SB), X0
    0x0088 00136 (flops.go:25)  MOVSD   """".e(SB), X1
    0x0090 00144 (flops.go:25)  ADDSD   X1, X0
    0x0094 00148 (flops.go:25)  MOVSD   X0, """".f(SB)
    0x009c 00156 (flops.go:26)  MOVSD   """".pi(SB), X0
    0x00a4 00164 (flops.go:26)  MOVSD   """".e(SB), X1
    0x00ac 00172 (flops.go:26)  SUBSD   X1, X0
    0x00b0 00176 (flops.go:26)  MOVSD   X0, """".f(SB)
    0x00b8 00184 (flops.go:27)  MOVSD   """".pi(SB), X0
    0x00c0 00192 (flops.go:27)  MOVSD   """".e(SB), X1
    0x00c8 00200 (flops.go:27)  MULSD   X1, X0
    0x00cc 00204 (flops.go:27)  MOVSD   X0, """".f(SB)
    0x00d4 00212 (flops.go:28)  MOVSD   """".pi(SB), X0
    0x00dc 00220 (flops.go:28)  MOVSD   """".e(SB), X1
    0x00e4 00228 (flops.go:28)  DIVSD   X1, X0
    0x00e8 00232 (flops.go:28)  MOVSD   X0, """".f(SB)
    0x00f0 00240 (flops.go:29)  MOVSD   """".pi(SB), X0
    0x00f8 00248 (flops.go:29)  MOVSD   """".e(SB), X1
    0x0100 00256 (flops.go:29)  ADDSD   X1, X0
    0x0104 00260 (flops.go:29)  MOVSD   X0, """".f(SB)
    0x010c 00268 (flops.go:30)  MOVSD   """".pi(SB), X0
    0x0114 00276 (flops.go:30)  MOVSD   """".e(SB), X1
    0x011c 00284 (flops.go:30)  SUBSD   X1, X0
    0x0120 00288 (flops.go:30)  MOVSD   X0, """".f(SB)
    0x0128 00296 (flops.go:31)  MOVSD   """".pi(SB), X0
    0x0130 00304 (flops.go:31)  MOVSD   """".e(SB), X1
    0x0138 00312 (flops.go:31)  MULSD   X1, X0
    0x013c 00316 (flops.go:31)  MOVSD   X0, """".f(SB)
    0x0144 00324 (flops.go:32)  MOVSD   """".pi(SB), X0
    0x014c 00332 (flops.go:32)  MOVSD   """".e(SB), X1
    0x0154 00340 (flops.go:32)  DIVSD   X1, X0
    0x0158 00344 (flops.go:32)  MOVSD   X0, """".f(SB)
    0x0160 00352 (flops.go:33)  MOVSD   """".pi(SB), X0
    0x0168 00360 (flops.go:33)  MOVSD   """".e(SB), X1
    0x0170 00368 (flops.go:33)  ADDSD   X1, X0
    0x0174 00372 (flops.go:33)  MOVSD   X0, """".f(SB)
    0x017c 00380 (flops.go:34)  MOVSD   """".pi(SB), X0
    0x0184 00388 (flops.go:34)  MOVSD   """".e(SB), X1
    0x018c 00396 (flops.go:34)  SUBSD   X1, X0
    0x0190 00400 (flops.go:34)  MOVSD   X0, """".f(SB)
    0x0198 00408 (flops.go:35)  MOVSD   """".pi(SB), X0
    0x01a0 00416 (flops.go:35)  MOVSD   """".e(SB), X1
    0x01a8 00424 (flops.go:35)  MULSD   X1, X0
    0x01ac 00428 (flops.go:35)  MOVSD   X0, """".f(SB)
    0x01b4 00436 (flops.go:36)  MOVSD   """".pi(SB), X0
    0x01bc 00444 (flops.go:36)  MOVSD   """".e(SB), X1
    0x01c4 00452 (flops.go:36)  DIVSD   X1, X0
    0x01c8 00456 (flops.go:36)  MOVSD   X0, """".f(SB)
    0x01d0 00464 (flops.go:37)  MOVSD   """".pi(SB), X0
    0x01d8 00472 (flops.go:37)  MOVSD   """".e(SB), X1
    0x01e0 00480 (flops.go:37)  ADDSD   X1, X0
    0x01e4 00484 (flops.go:37)  MOVSD   X0, """".f(SB)
    0x01ec 00492 (flops.go:38)  MOVSD   """".pi(SB), X0
    0x01f4 00500 (flops.go:38)  MOVSD   """".e(SB), X1
    0x01fc 00508 (flops.go:38)  SUBSD   X1, X0
    0x0200 00512 (flops.go:38)  MOVSD   X0, """".f(SB)
    0x0208 00520 (flops.go:39)  MOVSD   """".pi(SB), X0
    0x0210 00528 (flops.go:39)  MOVSD   """".e(SB), X1
    0x0218 00536 (flops.go:39)  MULSD   X1, X0
    0x021c 00540 (flops.go:39)  MOVSD   X0, """".f(SB)
    0x0224 00548 (flops.go:40)  MOVSD   """".pi(SB), X0
    0x022c 00556 (flops.go:40)  MOVSD   """".e(SB), X1
    0x0234 00564 (flops.go:40)  DIVSD   X1, X0
    0x0238 00568 (flops.go:40)  MOVSD   X0, """".f(SB)
    0x0240 00576 (flops.go:20)  INCQ    AX
    0x0243 00579 (flops.go:20)  NOP
    0x0243 00579 (flops.go:20)  CMPQ    AX, CX
    0x0246 00582 (flops.go:20)  JLT $0, 16
    0x024c 00588 (flops.go:42)  RET
",4964
719,35163475,benchmarkFloatOps,17
720,35163475,"$ go build flops.go && go tool objdump -s benchmarkFloatOps ./flops

TEXT main.benchmarkFloatOps(SB) /home/peter/Dropbox/gopath/src/so/benchmark/flops.go
    flops.go:19 0x401000    488b4c2408      MOVQ 0x8(SP), CX
    flops.go:20 0x401005    31c0            XORL AX, AX
    flops.go:20 0x401007    4839c8          CMPQ CX, AX
    flops.go:20 0x40100a    0f8d3c020000        JGE 0x40124c
    flops.go:21 0x401010    f20f1005e8801b00    REPNE MOVSD_XMM 0x1b80e8(IP), X0
    flops.go:21 0x401018    f20f100dd8801b00    REPNE MOVSD_XMM 0x1b80d8(IP), X1
    flops.go:21 0x401020    f20f58c1        REPNE ADDSD X1, X0
    flops.go:21 0x401024    f20f110544451e00    REPNE MOVSD_XMM X0, 0x1e4544(IP)
    flops.go:22 0x40102c    f20f1005cc801b00    REPNE MOVSD_XMM 0x1b80cc(IP), X0
    flops.go:22 0x401034    f20f100dbc801b00    REPNE MOVSD_XMM 0x1b80bc(IP), X1
    flops.go:22 0x40103c    f20f5cc1        REPNE SUBSD X1, X0
    flops.go:22 0x401040    f20f110528451e00    REPNE MOVSD_XMM X0, 0x1e4528(IP)
    flops.go:23 0x401048    f20f1005b0801b00    REPNE MOVSD_XMM 0x1b80b0(IP), X0
    flops.go:23 0x401050    f20f100da0801b00    REPNE MOVSD_XMM 0x1b80a0(IP), X1
    flops.go:23 0x401058    f20f59c1        REPNE MULSD X1, X0
    flops.go:23 0x40105c    f20f11050c451e00    REPNE MOVSD_XMM X0, 0x1e450c(IP)
    flops.go:24 0x401064    f20f100594801b00    REPNE MOVSD_XMM 0x1b8094(IP), X0
    flops.go:24 0x40106c    f20f100d84801b00    REPNE MOVSD_XMM 0x1b8084(IP), X1
    flops.go:24 0x401074    f20f5ec1        REPNE DIVSD X1, X0
    flops.go:24 0x401078    f20f1105f0441e00    REPNE MOVSD_XMM X0, 0x1e44f0(IP)
    flops.go:25 0x401080    f20f100578801b00    REPNE MOVSD_XMM 0x1b8078(IP), X0
    flops.go:25 0x401088    f20f100d68801b00    REPNE MOVSD_XMM 0x1b8068(IP), X1
    flops.go:25 0x401090    f20f58c1        REPNE ADDSD X1, X0
    flops.go:25 0x401094    f20f1105d4441e00    REPNE MOVSD_XMM X0, 0x1e44d4(IP)
    flops.go:26 0x40109c    f20f10055c801b00    REPNE MOVSD_XMM 0x1b805c(IP), X0
    flops.go:26 0x4010a4    f20f100d4c801b00    REPNE MOVSD_XMM 0x1b804c(IP), X1
    flops.go:26 0x4010ac    f20f5cc1        REPNE SUBSD X1, X0
    flops.go:26 0x4010b0    f20f1105b8441e00    REPNE MOVSD_XMM X0, 0x1e44b8(IP)
    flops.go:27 0x4010b8    f20f100540801b00    REPNE MOVSD_XMM 0x1b8040(IP), X0
    flops.go:27 0x4010c0    f20f100d30801b00    REPNE MOVSD_XMM 0x1b8030(IP), X1
    flops.go:27 0x4010c8    f20f59c1        REPNE MULSD X1, X0
    flops.go:27 0x4010cc    f20f11059c441e00    REPNE MOVSD_XMM X0, 0x1e449c(IP)
    flops.go:28 0x4010d4    f20f100524801b00    REPNE MOVSD_XMM 0x1b8024(IP), X0
    flops.go:28 0x4010dc    f20f100d14801b00    REPNE MOVSD_XMM 0x1b8014(IP), X1
    flops.go:28 0x4010e4    f20f5ec1        REPNE DIVSD X1, X0
    flops.go:28 0x4010e8    f20f110580441e00    REPNE MOVSD_XMM X0, 0x1e4480(IP)
    flops.go:29 0x4010f0    f20f100508801b00    REPNE MOVSD_XMM 0x1b8008(IP), X0
    flops.go:29 0x4010f8    f20f100df87f1b00    REPNE MOVSD_XMM 0x1b7ff8(IP), X1
    flops.go:29 0x401100    f20f58c1        REPNE ADDSD X1, X0
    flops.go:29 0x401104    f20f110564441e00    REPNE MOVSD_XMM X0, 0x1e4464(IP)
    flops.go:30 0x40110c    f20f1005ec7f1b00    REPNE MOVSD_XMM 0x1b7fec(IP), X0
    flops.go:30 0x401114    f20f100ddc7f1b00    REPNE MOVSD_XMM 0x1b7fdc(IP), X1
    flops.go:30 0x40111c    f20f5cc1        REPNE SUBSD X1, X0
    flops.go:30 0x401120    f20f110548441e00    REPNE MOVSD_XMM X0, 0x1e4448(IP)
    flops.go:31 0x401128    f20f1005d07f1b00    REPNE MOVSD_XMM 0x1b7fd0(IP), X0
    flops.go:31 0x401130    f20f100dc07f1b00    REPNE MOVSD_XMM 0x1b7fc0(IP), X1
    flops.go:31 0x401138    f20f59c1        REPNE MULSD X1, X0
    flops.go:31 0x40113c    f20f11052c441e00    REPNE MOVSD_XMM X0, 0x1e442c(IP)
    flops.go:32 0x401144    f20f1005b47f1b00    REPNE MOVSD_XMM 0x1b7fb4(IP), X0
    flops.go:32 0x40114c    f20f100da47f1b00    REPNE MOVSD_XMM 0x1b7fa4(IP), X1
    flops.go:32 0x401154    f20f5ec1        REPNE DIVSD X1, X0
    flops.go:32 0x401158    f20f110510441e00    REPNE MOVSD_XMM X0, 0x1e4410(IP)
    flops.go:33 0x401160    f20f1005987f1b00    REPNE MOVSD_XMM 0x1b7f98(IP), X0
    flops.go:33 0x401168    f20f100d887f1b00    REPNE MOVSD_XMM 0x1b7f88(IP), X1
    flops.go:33 0x401170    f20f58c1        REPNE ADDSD X1, X0
    flops.go:33 0x401174    f20f1105f4431e00    REPNE MOVSD_XMM X0, 0x1e43f4(IP)
    flops.go:34 0x40117c    f20f10057c7f1b00    REPNE MOVSD_XMM 0x1b7f7c(IP), X0
    flops.go:34 0x401184    f20f100d6c7f1b00    REPNE MOVSD_XMM 0x1b7f6c(IP), X1
    flops.go:34 0x40118c    f20f5cc1        REPNE SUBSD X1, X0
    flops.go:34 0x401190    f20f1105d8431e00    REPNE MOVSD_XMM X0, 0x1e43d8(IP)
    flops.go:35 0x401198    f20f1005607f1b00    REPNE MOVSD_XMM 0x1b7f60(IP), X0
    flops.go:35 0x4011a0    f20f100d507f1b00    REPNE MOVSD_XMM 0x1b7f50(IP), X1
    flops.go:35 0x4011a8    f20f59c1        REPNE MULSD X1, X0
    flops.go:35 0x4011ac    f20f1105bc431e00    REPNE MOVSD_XMM X0, 0x1e43bc(IP)
    flops.go:36 0x4011b4    f20f1005447f1b00    REPNE MOVSD_XMM 0x1b7f44(IP), X0
    flops.go:36 0x4011bc    f20f100d347f1b00    REPNE MOVSD_XMM 0x1b7f34(IP), X1
    flops.go:36 0x4011c4    f20f5ec1        REPNE DIVSD X1, X0
    flops.go:36 0x4011c8    f20f1105a0431e00    REPNE MOVSD_XMM X0, 0x1e43a0(IP)
    flops.go:37 0x4011d0    f20f1005287f1b00    REPNE MOVSD_XMM 0x1b7f28(IP), X0
    flops.go:37 0x4011d8    f20f100d187f1b00    REPNE MOVSD_XMM 0x1b7f18(IP), X1
    flops.go:37 0x4011e0    f20f58c1        REPNE ADDSD X1, X0
    flops.go:37 0x4011e4    f20f110584431e00    REPNE MOVSD_XMM X0, 0x1e4384(IP)
    flops.go:38 0x4011ec    f20f10050c7f1b00    REPNE MOVSD_XMM 0x1b7f0c(IP), X0
    flops.go:38 0x4011f4    f20f100dfc7e1b00    REPNE MOVSD_XMM 0x1b7efc(IP), X1
    flops.go:38 0x4011fc    f20f5cc1        REPNE SUBSD X1, X0
    flops.go:38 0x401200    f20f110568431e00    REPNE MOVSD_XMM X0, 0x1e4368(IP)
    flops.go:39 0x401208    f20f1005f07e1b00    REPNE MOVSD_XMM 0x1b7ef0(IP), X0
    flops.go:39 0x401210    f20f100de07e1b00    REPNE MOVSD_XMM 0x1b7ee0(IP), X1
    flops.go:39 0x401218    f20f59c1        REPNE MULSD X1, X0
    flops.go:39 0x40121c    f20f11054c431e00    REPNE MOVSD_XMM X0, 0x1e434c(IP)
    flops.go:40 0x401224    f20f1005d47e1b00    REPNE MOVSD_XMM 0x1b7ed4(IP), X0
    flops.go:40 0x40122c    f20f100dc47e1b00    REPNE MOVSD_XMM 0x1b7ec4(IP), X1
    flops.go:40 0x401234    f20f5ec1        REPNE DIVSD X1, X0
    flops.go:40 0x401238    f20f110530431e00    REPNE MOVSD_XMM X0, 0x1e4330(IP)
    flops.go:20 0x401240    48ffc0          INCQ AX
    flops.go:20 0x401243    4839c8          CMPQ CX, AX
    flops.go:20 0x401246    0f8cc4fdffff        JL 0x401010
    flops.go:42 0x40124c    c3          RET
",6720
721,35202961,"package main

import (
    ""encoding/json""
    ""fmt""
)

type PublicKey struct {
    name string
    price string
}

type KeysResponse struct {
    Collection []PublicKey
}

func main() {
    s := `[{""name"":""Galaxy Nexus"", ""price"":""3460.00""},{""name"":""Galaxy Nexus"", ""price"":""3460.00""}]`

    keys := make([]PublicKey,0)
    err := json.Unmarshal([]byte(s), &keys)
    if err == nil {
        fmt.Printf(""%+v\n"", keys)
    } else {
        fmt.Println(err)
        fmt.Printf(""%+v\n"", keys)
    }
}
",497
722,35202961,[{name: price:}],16
723,35202961,"[{""id"":694476444991229955,""id_str"":""694476444991229955"",""text"":""Got it"",""sender"":{""id"":1690262984,""id_str"":""1690262984"",""name"":""Ashok Kumar T"",""screen_name"":""Ashok_kumar_T"",""location"":""Trivandrum"",""description"":"""",""url"":null,""entities"":{""description"":{""urls"":[]}},""protected"":false,""followers_count"":68,""friends_count"":32,""listed_count"":0,""created_at"":""Thu Aug 22 06:52:53 +0000 2013"",""favourites_count"":5,""utc_offset"":19800,""time_zone"":""Chennai"",""geo_enabled"":true,""verified"":false,""statuses_count"":124,""lang"":""en"",""contributors_enabled"":false,""is_translator"":false,""is_translation_enabled"":false,""profile_background_color"":""131516"",""profile_background_image_url"":""http:\/\/abs.twimg.com\/images\/themes\/theme14\/bg.gif"",""profile_background_image_url_https"":""https:\/\/abs.twimg.com\/images\/themes\/theme14\/bg.gif"",""profile_background_tile"":true,""profile_image_url"":""http:\/\/pbs.twimg.com\/profile_images\/378800000337984382\/5eded5a0c6fda4a85511aff15e5befd9_normal.jpeg"",""profile_image_url_https"":""https:\/\/pbs.twimg.com\/profile_images\/378800000337984382\/5eded5a0c6fda4a85511aff15e5befd9_normal.jpeg"",""profile_banner_url"":""https:\/\/pbs.twimg.com\/profile_banners\/1690262984\/1429709252"",""profile_link_color"":""009999"",""profile_sidebar_border_color"":""EEEEEE"",""profile_sidebar_fill_color"":""EFEFEF"",""profile_text_color"":""333333"",""profile_use_background_image"":true,""has_extended_profile"":false,""default_profile"":false,""default_profile_image"":false,""following"":true,""follow_request_sent"":false,""notifications"":false},""sender_id"":1690262984,""sender_id_str"":""1690262984"",""sender_screen_name"":""Ashok_kumar_T"",""recipient"":{""id"":4848598394,""id_str"":""4848598394"",""name"":""Prabhu"",""screen_name"":""prabhu_cfml"",""location"":"""",""description"":"""",""url"":null,""entities"":{""description"":{""urls"":[]}},""protected"":false,""followers_count"":1,""friends_count"":1,""listed_count"":0,""created_at"":""Tue Feb 02 09:25:17 +0000 2016"",""favourites_count"":0,""utc_offset"":null,""time_zone"":null,""geo_enabled"":false,""verified"":false,""statuses_count"":0,""lang"":""en-gb"",""contributors_enabled"":false,""is_translator"":false,""is_translation_enabled"":false,""profile_background_color"":""F5F8FA"",""profile_background_image_url"":null,""profile_background_image_url_https"":null,""profile_background_tile"":false,""profile_image_url"":""http:\/\/abs.twimg.com\/sticky\/default_profile_images\/default_profile_3_normal.png"",""profile_image_url_https"":""https:\/\/abs.twimg.com\/sticky\/default_profile_images\/default_profile_3_normal.png"",""profile_link_color"":""2B7BB9"",""profile_sidebar_border_color"":""C0DEED"",""profile_sidebar_fill_color"":""DDEEF6"",""profile_text_color"":""333333"",""profile_use_background_image"":true,""has_extended_profile"":false,""default_profile"":true,""default_profile_image"":true,""following"":false,""follow_request_sent"":false,""notifications"":false},""recipient_id"":4848598394,""recipient_id_str"":""4848598394"",""recipient_screen_name"":""prabhu_cfml"",""created_at"":""Tue Feb 02 11:04:21 +0000 2016"",""entities"":{""hashtags"":[],""symbols"":[],""user_mentions"":[],""urls"":[]}},{""id"":694476425793916931,""id_str"":""694476425793916931"",""text"":""Hi"",""sender"":{""id"":1690262984,""id_str"":""1690262984"",""name"":""Ashok Kumar T"",""screen_name"":""Ashok_kumar_T"",""location"":""Trivandrum"",""description"":"""",""url"":null,""entities"":{""description"":{""urls"":[]}},""protected"":false,""followers_count"":68,""friends_count"":32,""listed_count"":0,""created_at"":""Thu Aug 22 06:52:53 +0000 2013"",""favourites_count"":5,""utc_offset"":19800,""time_zone"":""Chennai"",""geo_enabled"":true,""verified"":false,""statuses_count"":124,""lang"":""en"",""contributors_enabled"":false,""is_translator"":false,""is_translation_enabled"":false,""profile_background_color"":""131516"",""profile_background_image_url"":""http:\/\/abs.twimg.com\/images\/themes\/theme14\/bg.gif"",""profile_background_image_url_https"":""https:\/\/abs.twimg.com\/images\/themes\/theme14\/bg.gif"",""profile_background_tile"":true,""profile_image_url"":""http:\/\/pbs.twimg.com\/profile_images\/378800000337984382\/5eded5a0c6fda4a85511aff15e5befd9_normal.jpeg"",""profile_image_url_https"":""https:\/\/pbs.twimg.com\/profile_images\/378800000337984382\/5eded5a0c6fda4a85511aff15e5befd9_normal.jpeg"",""profile_banner_url"":""https:\/\/pbs.twimg.com\/profile_banners\/1690262984\/1429709252"",""profile_link_color"":""009999"",""profile_sidebar_border_color"":""EEEEEE"",""profile_sidebar_fill_color"":""EFEFEF"",""profile_text_color"":""333333"",""profile_use_background_image"":true,""has_extended_profile"":false,""default_profile"":false,""default_profile_image"":false,""following"":true,""follow_request_sent"":false,""notifications"":false},""sender_id"":1690262984,""sender_id_str"":""1690262984"",""sender_screen_name"":""Ashok_kumar_T"",""recipient"":{""id"":4848598394,""id_str"":""4848598394"",""name"":""Prabhu"",""screen_name"":""prabhu_cfml"",""location"":"""",""description"":"""",""url"":null,""entities"":{""description"":{""urls"":[]}},""protected"":false,""followers_count"":1,""friends_count"":1,""listed_count"":0,""created_at"":""Tue Feb 02 09:25:17 +0000 2016"",""favourites_count"":0,""utc_offset"":null,""time_zone"":null,""geo_enabled"":false,""verified"":false,""statuses_count"":0,""lang"":""en-gb"",""contributors_enabled"":false,""is_translator"":false,""is_translation_enabled"":false,""profile_background_color"":""F5F8FA"",""profile_background_image_url"":null,""profile_background_image_url_https"":null,""profile_background_tile"":false,""profile_image_url"":""http:\/\/abs.twimg.com\/sticky\/default_profile_images\/default_profile_3_normal.png"",""profile_image_url_https"":""https:\/\/abs.twimg.com\/sticky\/default_profile_images\/default_profile_3_normal.png"",""profile_link_color"":""2B7BB9"",""profile_sidebar_border_color"":""C0DEED"",""profile_sidebar_fill_color"":""DDEEF6"",""profile_text_color"":""333333"",""profile_use_background_image"":true,""has_extended_profile"":false,""default_profile"":true,""default_profile_image"":true,""following"":false,""follow_request_sent"":false,""notifications"":false},""recipient_id"":4848598394,""recipient_id_str"":""4848598394"",""recipient_screen_name"":""prabhu_cfml"",""created_at"":""Tue Feb 02 11:04:17 +0000 2016"",""entities"":{""hashtags"":[],""symbols"":[],""user_mentions"":[],""urls"":[]}}]
",6036
724,35216612,"[{
	""id"": 694476444991229955,
	""id_str"": ""694476444991229955"",
	""text"": ""Got it"",
	""sender"": {
		""id"": 1690262984,
		""id_str"": ""1690262984"",
		""name"": ""Ashok Kumar T"",
		""screen_name"": ""Ashok_kumar_T"",
		""location"": ""Trivandrum"",
		""description"": """",
		""url"": null
		},
		""protected"": false,
		""followers_count"": 68,
		""friends_count"": 32,
		""listed_count"": 0,
		""created_at"": ""Thu Aug 22 06:52:53 +0000 2013"",
		""favourites_count"": 5,
		""utc_offset"": 19800,
		""time_zone"": ""Chennai"",
		""geo_enabled"": true,
		""verified"": false,
		""statuses_count"": 124,
		""lang"": ""en"",
		""contributors_enabled"": false,
		""is_translator"": false,
		""is_translation_enabled"": false,
		""profile_background_color"": ""131516"",
		""profile_background_image_url"": ""http:\/\/abs.twimg.com\/images\/themes\/theme14\/bg.gif"",
		""profile_background_image_url_https"": ""https:\/\/abs.twimg.com\/images\/themes\/theme14\/bg.gif"",
		""profile_background_tile"": true,
		""profile_image_url"": ""http:\/\/pbs.twimg.com\/profile_images\/378800000337984382\/5eded5a0c6fda4a85511aff15e5befd9_normal.jpeg"",
		""profile_image_url_https"": ""https:\/\/pbs.twimg.com\/profile_images\/378800000337984382\/5eded5a0c6fda4a85511aff15e5befd9_normal.jpeg"",
		""profile_banner_url"": ""https:\/\/pbs.twimg.com\/profile_banners\/1690262984\/1429709252"",
		""profile_link_color"": ""009999"",
		""profile_sidebar_border_color"": ""EEEEEE"",
		""profile_sidebar_fill_color"": ""EFEFEF"",
		""profile_text_color"": ""333333"",
		""profile_use_background_image"": true,
		""has_extended_profile"": false,
		""default_profile"": false,
		""default_profile_image"": false,
		""following"": true,
		""follow_request_sent"": false,
		""notifications"": false
	}]",1709
725,35216612,"package main

import (
	""encoding/json""
	""fmt""
	
	
)

type PublicKey struct {
	ID int64
	ID_STR string
	Text string
	SENDER struct {
         ID int64
         ID_STR string
	 NAME string
   	}
	PROTECTED bool
	FOLLOWERS_COUNT int
	FRIENDS_COUNT int
	LISTED_COUNT int
	
}

type KeysResponse struct {
	Collection []PublicKey
}

func main() {
	s := `[{
	""id"": 694476444991229955,
	""id_str"": ""694476444991229955"",
	""text"": ""Got it"",
	""sender"": {
		""id"": 1690262984,
		""id_str"": ""1690262984"",
		""name"": ""Ashok Kumar T"",
		""screen_name"": ""Ashok_kumar_T"",
		""location"": ""Trivandrum"",
		""description"": """",
		""url"": null
		},
		""protected"": false,
		""followers_count"": 68,
		""friends_count"": 32,
		""listed_count"": 0,
		""created_at"": ""Thu Aug 22 06:52:53 +0000 2013"",
		""favourites_count"": 5,
		""utc_offset"": 19800,
		""time_zone"": ""Chennai"",
		""geo_enabled"": true,
		""verified"": false,
		""statuses_count"": 124,
		""lang"": ""en"",
		""contributors_enabled"": false,
		""is_translator"": false,
		""is_translation_enabled"": false,
		""profile_background_color"": ""131516"",
		""profile_background_image_url"": ""http:\/\/abs.twimg.com\/images\/themes\/theme14\/bg.gif"",
		""profile_background_image_url_https"": ""https:\/\/abs.twimg.com\/images\/themes\/theme14\/bg.gif"",
		""profile_background_tile"": true,
		""profile_image_url"": ""http:\/\/pbs.twimg.com\/profile_images\/378800000337984382\/5eded5a0c6fda4a85511aff15e5befd9_normal.jpeg"",
		""profile_image_url_https"": ""https:\/\/pbs.twimg.com\/profile_images\/378800000337984382\/5eded5a0c6fda4a85511aff15e5befd9_normal.jpeg"",
		""profile_banner_url"": ""https:\/\/pbs.twimg.com\/profile_banners\/1690262984\/1429709252"",
		""profile_link_color"": ""009999"",
		""profile_sidebar_border_color"": ""EEEEEE"",
		""profile_sidebar_fill_color"": ""EFEFEF"",
		""profile_text_color"": ""333333"",
		""profile_use_background_image"": true,
		""has_extended_profile"": false,
		""default_profile"": false,
		""default_profile_image"": false,
		""following"": true,
		""follow_request_sent"": false,
		""notifications"": false
	},{
	""id"": 694476444991229955,
	""id_str"": ""694476444991229955"",
	""text"": ""Got it"",
	""sender"": {
		""id"": 1690262984,
		""id_str"": ""1690262984"",
		""name"": ""Ashok Kumar T"",
		""screen_name"": ""Ashok_kumar_T"",
		""location"": ""Trivandrum"",
		""description"": """",
		""url"": null
		},
		""protected"": false,
		""followers_count"": 68,
		""friends_count"": 32,
		""listed_count"": 0,
		""created_at"": ""Thu Aug 22 06:52:53 +0000 2013"",
		""favourites_count"": 5,
		""utc_offset"": 19800,
		""time_zone"": ""Chennai"",
		""geo_enabled"": true,
		""verified"": false,
		""statuses_count"": 124,
		""lang"": ""en"",
		""contributors_enabled"": false,
		""is_translator"": false,
		""is_translation_enabled"": false,
		""profile_background_color"": ""131516"",
		""profile_background_image_url"": ""http:\/\/abs.twimg.com\/images\/themes\/theme14\/bg.gif"",
		""profile_background_image_url_https"": ""https:\/\/abs.twimg.com\/images\/themes\/theme14\/bg.gif"",
		""profile_background_tile"": true,
		""profile_image_url"": ""http:\/\/pbs.twimg.com\/profile_images\/378800000337984382\/5eded5a0c6fda4a85511aff15e5befd9_normal.jpeg"",
		""profile_image_url_https"": ""https:\/\/pbs.twimg.com\/profile_images\/378800000337984382\/5eded5a0c6fda4a85511aff15e5befd9_normal.jpeg"",
		""profile_banner_url"": ""https:\/\/pbs.twimg.com\/profile_banners\/1690262984\/1429709252"",
		""profile_link_color"": ""009999"",
		""profile_sidebar_border_color"": ""EEEEEE"",
		""profile_sidebar_fill_color"": ""EFEFEF"",
		""profile_text_color"": ""333333"",
		""profile_use_background_image"": true,
		""has_extended_profile"": false,
		""default_profile"": false,
		""default_profile_image"": false,
		""following"": true,
		""follow_request_sent"": false,
		""notifications"": false
	}]`

	keys := make([]PublicKey,0)
	err := json.Unmarshal([]byte(s), &keys)
	if err == nil {
		fmt.Printf(""%+v\n"", keys)
	} else {
		fmt.Println(err)
		fmt.Printf(""%+v\n"", keys)
	}
	myId := keys[l].Id
	fmt.Printf(myId)
}",4024
726,35254401,"func (controller CarController) GetIndex(c *gin.Context) {
   carList:=controller.carService.Find(&bson.M{})
   c.JSON(http.StatusOK, &carList)
   //fmt.Println(carList)
}
",172
727,35254401,"func (r CarService) Find(query *bson.M) (cars []models.Car) {
   session, _ := mgo.Dial(r.uri)
   defer session.Close()
   session.SetSafe(&mgo.Safe{})
   collection := session.DB(r.dbName).C(r.collectionName)

    collection.Find(query).All(&cars)

    fmt.Println(cars)
    return cars

}
",291
728,35254401,"router.GET(""/car"",carBaseController.GetIndex)
",46
729,35254401," [
   {
      ""Id"":""56b636688a47a60aa8601f57"",
      ""model"":""ayman"",
      ""brand"":""islamic"",
      ""CreatedAt"":6248241353327640577
   },
   {
      ""Id"":""56b63b658a47a605dc9e8e38"",
      ""model"":""ayman"",
      ""brand"":""islamic"",
      ""CreatedAt"":6248246838000877569
   },
   {
      ""Id"":""56b642728a47a62364f3e0e0"",
      ""model"":""ayman 0"",
      ""brand"":""islamic 0"",
      ""CreatedAt"":6248254590416846849
   },
   {
      ""Id"":""56b642728a47a62364f3e0e1"",
      ""model"":""ayman 1"",
      ""brand"":""islamic 1"",
      ""CreatedAt"":6248254590416846850
   },
   {
      ""Id"":""56b642728a47a62364f3e0e2"",
      ""model"":""ayman 2"",
      ""brand"":""islamic 2"",
      ""CreatedAt"":6248254590416846851
   },
   {
      ""Id"":""56b642728a47a62364f3e0e3"",
      ""model"":""ayman 3"",
      ""brand"":""islamic 3"",
      ""CreatedAt"":6248254590416846852
   },
   {
      ""Id"":""56b642728a47a62364f3e0e4"",
      ""model"":""ayman 4"",
      ""brand"":""islamic 4"",
      ""CreatedAt"":6248254590416846853
   },
   {
      ""Id"":""56b642728a47a62364f3e0e5"",
      ""model"":""ayman 5"",
      ""brand"":""islamic 5"",
      ""CreatedAt"":6248254590416846854
   },
   {
      ""Id"":""56b642728a47a62364f3e0e6"",
      ""model"":""ayman 6"",
      ""brand"":""islamic 6"",
      ""CreatedAt"":6248254590416846855
   },
   {
      ""Id"":""56b642728a47a62364f3e0e7"",
      ""model"":""ayman 7"",
      ""brand"":""islamic 7"",
      ""CreatedAt"":6248254590416846856
   },
   {
      ""Id"":""56b642728a47a62364f3e0e8"",
      ""model"":""ayman 8"",
      ""brand"":""islamic 8"",
      ""CreatedAt"":6248254590416846857
   },
   {
      ""Id"":""56b642728a47a62364f3e0e9"",
      ""model"":""ayman 9"",
      ""brand"":""islamic 9"",
      ""CreatedAt"":6248254590416846858
   },
   {
      ""Id"":""56b642728a47a62364f3e0ea"",
      ""model"":""ayman 10"",
      ""brand"":""islamic 10"",
      ""CreatedAt"":6248254590416846859
   },
   {
      ""Id"":""56b642728a47a62364f3e0eb"",
      ""model"":""ayman 11"",
      ""brand"":""islamic 11"",
      ""CreatedAt"":6248254590416846860
   },
   {
      ""Id"":""56b642728a47a62364f3e0ec"",
      ""model"":""ayman 12"",
      ""brand"":""islamic 12"",
      ""CreatedAt"":6248254590416846861
   },
   {
      ""Id"":""56b642728a47a62364f3e0ed"",
      ""model"":""ayman 13"",
      ""brand"":""islamic 13"",
      ""CreatedAt"":6248254590416846862
   },
   {
      ""Id"":""56b642728a47a62364f3e0ee"",
      ""model"":""ayman 14"",
      ""brand"":""islamic 14"",
      ""CreatedAt"":6248254590416846863
   },
   {
      ""Id"":""56b642728a47a62364f3e0ef"",
      ""model"":""ayman 15"",
      ""brand"":""islamic 15"",
      ""CreatedAt"":6248254590416846864
   },
   {
      ""Id"":""56b642728a47a62364f3e0f0"",
      ""model"":""ayman 16"",
      ""brand"":""islamic 16"",
      ""CreatedAt"":6248254590416846865
   },
   {
      ""Id"":""56b642728a47a62364f3e0f1"",
      ""model"":""ayman 17"",
      ""brand"":""islamic 17"",
      ""CreatedAt"":6248254590416846866
   },
   {
      ""Id"":""56b642728a47a62364f3e0f2"",
      ""model"":""ayman 18"",
      ""brand"":""islamic 18"",
      ""CreatedAt"":6248254590416846867
   },
   {
      ""Id"":""56b642728a47a62364f3e0f3"",
      ""model"":""ayman 19"",
      ""brand"":""islamic 19"",
      ""CreatedAt"":6248254590416846868
   },
   {
      ""Id"":""56b642728a47a62364f3e0f4"",
      ""model"":""ayman 20"",
      ""brand"":""islamic 20"",
      ""CreatedAt"":6248254590416846869
   },
   {
      ""Id"":""56b642728a47a62364f3e0f5"",
      ""model"":""ayman 21"",
      ""brand"":""islamic 21"",
      ""CreatedAt"":6248254590416846870
   },
   {
      ""Id"":""56b642728a47a62364f3e0f6"",
      ""model"":""ayman 22"",
      ""brand"":""islamic 22"",
      ""CreatedAt"":6248254590416846871
   },
   {
      ""Id"":""56b642728a47a62364f3e0f7"",
      ""model"":""ayman 23"",
      ""brand"":""islamic 23"",
      ""CreatedAt"":6248254590416846872
   },
   {
      ""Id"":""56b642728a47a62364f3e0f8"",
      ""model"":""ayman 24"",
      ""brand"":""islamic 24"",
      ""CreatedAt"":6248254590416846873
   },
   {
      ""Id"":""56b642728a47a62364f3e0f9"",
      ""model"":""ayman 25"",
      ""brand"":""islamic 25"",
      ""CreatedAt"":6248254590416846874
   },
   {
      ""Id"":""56b642728a47a62364f3e0fa"",
      ""model"":""ayman 26"",
      ""brand"":""islamic 26"",
      ""CreatedAt"":6248254590416846875
   },
   {
      ""Id"":""56b642728a47a62364f3e0fb"",
      ""model"":""ayman 27"",
      ""brand"":""islamic 27"",
      ""CreatedAt"":6248254590416846876
   },
   {
      ""Id"":""56b642728a47a62364f3e0fc"",
      ""model"":""ayman 28"",
      ""brand"":""islamic 28"",
      ""CreatedAt"":6248254590416846877
   },
   {
      ""Id"":""56b642728a47a62364f3e0fd"",
      ""model"":""ayman 29"",
      ""brand"":""islamic 29"",
      ""CreatedAt"":6248254590416846878
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13ef9"",
      ""model"":""ayman 0"",
      ""brand"":""islamic 0"",
      ""CreatedAt"":6248431092097875969
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13efa"",
      ""model"":""ayman 1"",
      ""brand"":""islamic 1"",
      ""CreatedAt"":6248431092097875970
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13efb"",
      ""model"":""ayman 2"",
      ""brand"":""islamic 2"",
      ""CreatedAt"":6248431092097875971
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13efc"",
      ""model"":""ayman 3"",
      ""brand"":""islamic 3"",
      ""CreatedAt"":6248431092097875972
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13efd"",
      ""model"":""ayman 4"",
      ""brand"":""islamic 4"",
      ""CreatedAt"":6248431092097875973
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13efe"",
      ""model"":""ayman 5"",
      ""brand"":""islamic 5"",
      ""CreatedAt"":6248431092097875974
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13eff"",
      ""model"":""ayman 6"",
      ""brand"":""islamic 6"",
      ""CreatedAt"":6248431092097875975
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f00"",
      ""model"":""ayman 7"",
      ""brand"":""islamic 7"",
      ""CreatedAt"":6248431092097875976
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f01"",
      ""model"":""ayman 8"",
      ""brand"":""islamic 8"",
      ""CreatedAt"":6248431092097875977
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f02"",
      ""model"":""ayman 9"",
      ""brand"":""islamic 9"",
      ""CreatedAt"":6248431092097875978
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f03"",
      ""model"":""ayman 10"",
      ""brand"":""islamic 10"",
      ""CreatedAt"":6248431092097875979
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f04"",
      ""model"":""ayman 11"",
      ""brand"":""islamic 11"",
      ""CreatedAt"":6248431092097875980
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f05"",
      ""model"":""ayman 12"",
      ""brand"":""islamic 12"",
      ""CreatedAt"":6248431092097875981
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f06"",
      ""model"":""ayman 13"",
      ""brand"":""islamic 13"",
      ""CreatedAt"":6248431092097875982
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f07"",
      ""model"":""ayman 14"",
      ""brand"":""islamic 14"",
      ""CreatedAt"":6248431092097875983
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f08"",
      ""model"":""ayman 15"",
      ""brand"":""islamic 15"",
      ""CreatedAt"":6248431092097875984
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f09"",
      ""model"":""ayman 16"",
      ""brand"":""islamic 16"",
      ""CreatedAt"":6248431092097875985
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f0a"",
      ""model"":""ayman 17"",
      ""brand"":""islamic 17"",
      ""CreatedAt"":6248431092097875986
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f0b"",
      ""model"":""ayman 18"",
      ""brand"":""islamic 18"",
      ""CreatedAt"":6248431092097875987
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f0c"",
      ""model"":""ayman 19"",
      ""brand"":""islamic 19"",
      ""CreatedAt"":6248431092097875988
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f0d"",
      ""model"":""ayman 20"",
      ""brand"":""islamic 20"",
      ""CreatedAt"":6248431092097875989
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f0e"",
      ""model"":""ayman 21"",
      ""brand"":""islamic 21"",
      ""CreatedAt"":6248431092097875990
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f0f"",
      ""model"":""ayman 22"",
      ""brand"":""islamic 22"",
      ""CreatedAt"":6248431092097875991
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f10"",
      ""model"":""ayman 23"",
      ""brand"":""islamic 23"",
      ""CreatedAt"":6248431092097875992
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f11"",
      ""model"":""ayman 24"",
      ""brand"":""islamic 24"",
      ""CreatedAt"":6248431092097875993
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f12"",
      ""model"":""ayman 25"",
      ""brand"":""islamic 25"",
      ""CreatedAt"":6248431092097875994
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f13"",
      ""model"":""ayman 26"",
      ""brand"":""islamic 26"",
      ""CreatedAt"":6248431092097875995
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f14"",
      ""model"":""ayman 27"",
      ""brand"":""islamic 27"",
      ""CreatedAt"":6248431092097875996
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f15"",
      ""model"":""ayman 28"",
      ""brand"":""islamic 28"",
      ""CreatedAt"":6248431092097875997
   },
   {
      ""Id"":""56b6e2f98a47a60d50c13f16"",
      ""model"":""ayman 29"",
      ""brand"":""islamic 29"",
      ""CreatedAt"":6248431092097875998
   }
]
",8756
730,35328272,"        if monday == 0 {
            fmt.Println(0)
            printRecipeOfTheDay(recipe1)
        } else if monday == 1 {
            fmt.Println(1)
",152
731,35328272,"package main

import (
    ""fmt""
    ""math/rand""
    ""time""
)

//Struct for Recipe below
type Recipe struct { //Struct for recipe information
    name        string
    prepTime    int
    cookTime    int
    Ingredients []string //this is now a slice that will accept multiple elements
    ID          int
    Yield       int
}

//function to print Recipe
func printRecipe(recipe Recipe) {
    fmt.Printf(""Recipe Name : %s\n"", recipe.name)
    fmt.Printf(""Prep Time : %d\n"", recipe.prepTime)
    fmt.Printf(""Cook Time : %d\n"", recipe.cookTime)
    fmt.Printf(""Ingredients : %s\n"", recipe.Ingredients)
    fmt.Printf(""Recipe ID : %d\n"", recipe.ID)
}

//Returns total time by addings cookTime and prepTime
func totalTime(recipe Recipe) {
    fmt.Printf(""The total time for this recipe is %d\n"", recipe.cookTime+recipe.prepTime)
}

func main() {
    var recipe1 Recipe //Declare recipe1 of Type Recipe
    var recipe2 Recipe
    var recipe3 Recipe

    //choose random number for recipe
    r := rand.New(rand.NewSource(time.Now().UnixNano()))
    i := r.Perm(5)
    fmt.Printf(""%v\n"", i)
    fmt.Printf(""%d\n"", i[0])

    //assign slices of int from Perm to variables assigned days of the week
    var monday = i[0]
    var tuesday = i[1]
    var wednesday = i[2]
    var thursday = i[3]
    var friday = i[4]

    //testing printing of variables assigned to days
    fmt.Printf(""This is for the day Monday %d\n"", monday)
    fmt.Printf(""%d\n"", tuesday)
    fmt.Printf(""%d\n"", wednesday)
    fmt.Printf(""%d\n"", thursday)
    fmt.Printf(""%d\n"", friday)

    //logic for Mondays Recipe
    if monday == 0 {
        fmt.Println(0)
        printRecipeOfTheDay(recipe1)
    } else if monday == 1 {
        fmt.Println(1)
        printRecipeOfTheDay(recipe2)
    } else if monday == 2 {
        fmt.Println(2)
        printRecipeOfTheDay(recipe3)
    } else if monday == 3 {
        fmt.Println(3)
    }
    /* recipe1 specifications */
    recipe1.name = ""BBQ Pulled Chicken""
    recipe1.prepTime = 25
    recipe1.cookTime = 5
    recipe1.Ingredients = append(
        recipe1.Ingredients,
        ""1 8-ounce can reduced-sodium tomato sauce"",
    )
    recipe1.Ingredients = append(
        recipe1.Ingredients,
        ""1/2 medium onion (grated),"",
    )
    recipe1.ID = 1
    recipe1.Yield = 8

    /* Recipe 2 specifications */

    recipe2.name = ""Steak Tacos with Pineapple""
    recipe2.prepTime = 45
    recipe2.cookTime = 45
    recipe2.Ingredients = append(
        recipe2.Ingredients,
        ""3 tablespoons soy sauce,"",
    )
    recipe2.Ingredients = append(
        recipe2.Ingredients,
        ""1 tablespoon finely grated garlic,"",
    )
    recipe2.Ingredients = append(
        recipe2.Ingredients,
        ""1 tablespoon finely grated peeled fresh ginger,"",
    )
    recipe2.Ingredients = append(
        recipe2.Ingredients,
        ""1 1/2 pounds skirt steak, cut into 5-inch lengths,"",
    )
    recipe2.Ingredients = append(
        recipe2.Ingredients,
        ""Salt"",
    )
    recipe2.Ingredients = append(
        recipe2.Ingredients,
        ""Pepper"",
    )
    recipe2.ID = 2
    recipe2.Yield = 4

    recipe3.name = ""Simple Lemon Herb Chicken""
    recipe3.prepTime = 10
    recipe3.cookTime = 15
    recipe3.Ingredients = append(
        recipe3.Ingredients,
        ""2 skinless boneless chicken breast halves,"",
    )
    recipe3.Ingredients = append(
        recipe3.Ingredients,
        ""1 Lemon,"",
    )
    recipe3.Ingredients = append(
        recipe3.Ingredients,
        ""Salt and Pepper to taste,"",
    )
    recipe3.Ingredients = append(
        recipe3.Ingredients,
        ""1 tablespoon olive oil,"",
    )
    recipe3.Ingredients = append(
        recipe3.Ingredients,
        ""2 sprigs fresh parsley (for garnish),"",
    )
    recipe3.Ingredients = append(
        recipe3.Ingredients,
        ""1 pinch dried oregano,"",
    )
    recipe3.ID = 3
    recipe3.Yield = 2

    //call to printRecipe function below
    printRecipe(recipe1)
    totalTime(recipe1)
    printRecipe(recipe2)
    totalTime(recipe2)
    printRecipe(recipe3)
    totalTime(recipe3)
}

//function to print the winner for recipe of the day to use
//for either lunch or dinner
func printRecipeOfTheDay(recipe Recipe) {
    fmt.Printf(""The recipe of the day is : %s\n"", recipe.name)
}
",4288
732,35329276,"package main

import (
    ""log""
    ""strconv""
    ""time""
)

// RowInfo holds the job info
type RowInfo struct {
    id int
}

// WorkerCount holds how many workers are currently running
var WorkerCount int

// WorkerLocked specifies whether a row ID is currently processing by a worker
var WorkerLocked map[string]bool

// Process the RowInfo
func worker(row RowInfo) {
    rowID := strconv.Itoa(row.id)

    WorkerCount++
    WorkerLocked[rowID] = true

    time.Sleep(1 * time.Second)
    log.Printf(""ID rcvd: %d"", row.id)

    WorkerLocked[rowID] = false
    WorkerCount--
}

// waiter will check if the row is already processing in a worker
// Block until it finishes completion, then dispatch
func waiter(row RowInfo) {
    rowID := strconv.Itoa(row.id)
    for WorkerLocked[rowID] == true {
        time.Sleep(1 * time.Second)
    }

    go worker(row)
}

func main() {
    jobsQueue := make(chan RowInfo, 10)
    WorkerLocked = make(map[string]bool)

    // Dispatcher waits for jobs on the channel and dispatches to waiter
    go func() {
        // Wait for a job
        for {
            // Only have a max of 3 workers running asynch at a time
            for WorkerCount > 3 {
                time.Sleep(1 * time.Second)
            }

            job := <-jobsQueue
            go waiter(job)
        }
    }()

    // Test the queue, send some data
    for i := 0; i < 12; i++ {
        r := RowInfo{
            id: i,
        }
        jobsQueue <- r
    }

    // Prevent exit!
    for {
        time.Sleep(1 * time.Second)
    }
}
",1551
733,35329276,"go run main.go
panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x1 addr=0x8 pc=0x4565e7]

goroutine 37 [running]:
main.worker(0x5)
    /home/piiz/go/src/github.com/zzz/asynch/main.go:25 +0x94
created by main.waiter
    /home/piiz/go/src/github.com/zzz/asynch/main.go:42 +0xbb

goroutine 1 [sleep]:
time.Sleep(0x3b9aca00)
    /usr/local/go/src/runtime/time.go:59 +0xf9
main.main()
    /home/piiz/go/src/github.com/zzz/asynch/main.go:73 +0xf8

goroutine 5 [sleep]:
time.Sleep(0x3b9aca00)
    /usr/local/go/src/runtime/time.go:59 +0xf9
main.main.func1(0xc82008c000)
    /home/piiz/go/src/github.com/zzz/asynch/main.go:55 +0x2d
created by main.main
    /home/piiz/go/src/github.com/zzz/asynch/main.go:61 +0xa0

goroutine 35 [sleep]:
time.Sleep(0x3b9aca00)
    /usr/local/go/src/runtime/time.go:59 +0xf9
main.worker(0x2)
    /home/piiz/go/src/github.com/zzz/asynch/main.go:27 +0xa1
created by main.waiter
    /home/piiz/go/src/github.com/zzz/asynch/main.go:42 +0xbb

goroutine 36 [sleep]:
time.Sleep(0x3b9aca00)
    /usr/local/go/src/runtime/time.go:59 +0xf9
main.worker(0x4)
    /home/piiz/go/src/github.com/zzz/asynch/main.go:27 +0xa1
created by main.waiter
    /home/piiz/go/src/github.com/zzz/asynch/main.go:42 +0xbb

goroutine 34 [sleep]:
time.Sleep(0x3b9aca00)
    /usr/local/go/src/runtime/time.go:59 +0xf9
main.worker(0x1)
    /home/piiz/go/src/github.com/zzz/asynch/main.go:27 +0xa1
created by main.waiter
    /home/piiz/go/src/github.com/zzz/asynch/main.go:42 +0xbb

goroutine 12 [runnable]:
runtime.goexit1()
    /usr/local/go/src/runtime/proc1.go:1732
runtime.goexit()
    /usr/local/go/src/runtime/asm_amd64.s:1697 +0x6
created by main.main.func1
    /home/piiz/go/src/github.com/zzz/asynch/main.go:59 +0x8c

goroutine 19 [sleep]:
time.Sleep(0x3b9aca00)
    /usr/local/go/src/runtime/time.go:59 +0xf9
main.worker(0x8)
    /home/piiz/go/src/github.com/zzz/asynch/main.go:27 +0xa1
created by main.waiter
    /home/piiz/go/src/github.com/zzz/asynch/main.go:42 +0xbb

goroutine 20 [sleep]:
time.Sleep(0x3b9aca00)
    /usr/local/go/src/runtime/time.go:59 +0xf9
main.worker(0x0)
    /home/piiz/go/src/github.com/zzz/asynch/main.go:27 +0xa1
created by main.waiter
    /home/piiz/go/src/github.com/zzz/asynch/main.go:42 +0xbb

goroutine 16 [sleep]:
time.Sleep(0x3b9aca00)
    /usr/local/go/src/runtime/time.go:59 +0xf9
main.worker(0x9)
    /home/piiz/go/src/github.com/zzz/asynch/main.go:27 +0xa1
created by main.waiter
    /home/piiz/go/src/github.com/zzz/asynch/main.go:42 +0xbb

goroutine 33 [sleep]:
time.Sleep(0x3b9aca00)
    /usr/local/go/src/runtime/time.go:59 +0xf9
main.worker(0x3)
    /home/piiz/go/src/github.com/zzz/asynch/main.go:27 +0xa1
created by main.waiter
    /home/piiz/go/src/github.com/zzz/asynch/main.go:42 +0xbb

goroutine 18 [sleep]:
time.Sleep(0x3b9aca00)
    /usr/local/go/src/runtime/time.go:59 +0xf9
main.worker(0x7)
    /home/piiz/go/src/github.com/zzz/asynch/main.go:27 +0xa1
created by main.waiter
    /home/piiz/go/src/github.com/zzz/asynch/main.go:42 +0xbb

goroutine 22 [sleep]:
time.Sleep(0x3b9aca00)
    /usr/local/go/src/runtime/time.go:59 +0xf9
main.worker(0xa)
    /home/piiz/go/src/github.com/zzz/asynch/main.go:27 +0xa1
created by main.waiter
    /home/piiz/go/src/github.com/zzz/asynch/main.go:42 +0xbb

goroutine 49 [runnable]:
main.worker(0x6)
    /home/piiz/go/src/github.com/zzz/asynch/main.go:21
created by main.waiter
    /home/piiz/go/src/github.com/zzz/asynch/main.go:42 +0xbb
exit status 2
",3483
734,35332794,"package main

import (
    ""fmt""
    ""math/rand""
    ""time""
)

//Struct for Recipe below
type Recipe struct { //Struct for recipe information
    name        string
    prepTime    int
    cookTime    int
    Ingredients []string //this is now a slice that will accept multiple elements
    ID          int
    Yield       int
}

//main method
func main() {
    //5 variables below for 5 recipes for Monday-Friday
    var recipe1 Recipe //Declare recipe1 of Type Recipe
    var recipe2 Recipe
    var recipe3 Recipe
    var recipe4 Recipe
    var recipe5 Recipe

    //choose random number for recipe
    r := rand.New(rand.NewSource(time.Now().UnixNano()))
    i := r.Perm(5)
    fmt.Printf(""%v\n"", i)
    fmt.Printf(""%d\n"", i[0])
    fmt.Printf(""%d\n"", i[1])

    //assign slices of int from Perm to variables assigned days of the week
    var monday = i[0]
    var tuesday = i[1]
    var wednesday = i[2]
    var thursday = i[3]
    var friday = i[4]

    //testing printing of variables assigned to days
    fmt.Printf(""This is for the day Monday %d\n"", monday)
    fmt.Printf(""This is for the day Tuesday %d\n"", tuesday)
    fmt.Printf(""This is for the day Wednesday %d\n"", wednesday)
    fmt.Printf(""This is for the day Thursday %d\n"", thursday)
    fmt.Printf(""This is for the day Friday %d\n"", friday)

    /* recipe1 specifications */
    recipe1.name = ""BBQ Pulled Chicken""
    recipe1.prepTime = 25
    recipe1.cookTime = 5
    recipe1.Ingredients = append(
        recipe1.Ingredients,
        ""1 8-ounce can reduced-sodium tomato sauce"",
    )
    recipe1.Ingredients = append(
        recipe1.Ingredients,
        ""1/2 medium onion (grated),"",
    )
    recipe1.ID = 1
    recipe1.Yield = 8

    /* Recipe 2 specifications */

    recipe2.name = ""Steak Tacos with Pineapple""
    recipe2.prepTime = 45
    recipe2.cookTime = 45
    recipe2.Ingredients = append(
        recipe2.Ingredients,
        ""3 tablespoons soy sauce,"",
    )
    recipe2.Ingredients = append(
        recipe2.Ingredients,
        ""1 tablespoon finely grated garlic,"",
    )
    recipe2.Ingredients = append(
        recipe2.Ingredients,
        ""1 tablespoon finely grated peeled fresh ginger,"",
    )
    recipe2.Ingredients = append(
        recipe2.Ingredients,
        ""1 1/2 pounds skirt steak, cut into 5-inch lengths,"",
    )
    recipe2.Ingredients = append(
        recipe2.Ingredients,
        ""Salt"",
    )
    recipe2.Ingredients = append(
        recipe2.Ingredients,
        ""Pepper"",
    )
    recipe2.ID = 2
    recipe2.Yield = 4

    recipe3.name = ""Simple Lemon Herb Chicken""
    recipe3.prepTime = 10
    recipe3.cookTime = 15
    recipe3.Ingredients = append(
        recipe3.Ingredients,
        ""2 skinless boneless chicken breast halves,"",
    )
    recipe3.Ingredients = append(
        recipe3.Ingredients,
        ""1 Lemon,"",
    )
    recipe3.Ingredients = append(
        recipe3.Ingredients,
        ""Salt and Pepper to taste,"",
    )
    recipe3.Ingredients = append(
        recipe3.Ingredients,
        ""1 tablespoon olive oil,"",
    )
    recipe3.Ingredients = append(
        recipe3.Ingredients,
        ""2 sprigs fresh parsley (for garnish),"",
    )
    recipe3.Ingredients = append(
        recipe3.Ingredients,
        ""1 pinch dried oregano,"",
    )
    recipe3.ID = 3
    recipe3.Yield = 2

    //recipe4 specifications
    recipe4.name = ""Easy Meatloaf""
    recipe4.prepTime = 10
    recipe4.cookTime = 60
    recipe4.Ingredients = append(
        recipe4.Ingredients,
        ""1 onion (chopped),"",
    )
    recipe4.Ingredients = append(
        recipe4.Ingredients,
        ""1 cup milk,"",
    )
    recipe4.Ingredients = append(
        recipe4.Ingredients,
        ""1 cup dried bread crumbs,"",
    )
    recipe4.ID = 4
    recipe4.Yield = 8

    //recipe 5 specifications
    recipe5.name = ""Fast Salmon with a Ginger Glaze""
    recipe5.prepTime = 5
    recipe5.cookTime = 20
    recipe5.Ingredients = append(
        recipe5.Ingredients,
        ""salt to taste,"",
    )
    recipe5.Ingredients = append(
        recipe5.Ingredients,
        ""1/3 cup cold water,"",
    )
    recipe5.Ingredients = append(
        recipe5.Ingredients,
        ""1/4 cup seasoned rice vinegar,"",
    )
    recipe5.ID = 5
    recipe5.Yield = 4

    //call to printRecipe function below
    printRecipe(recipe1)
    totalTime(recipe1)
    printRecipe(recipe2)
    totalTime(recipe2)
    printRecipe(recipe3)
    totalTime(recipe3)
    printRecipe(recipe4)
    totalTime(recipe4)
    printRecipe(recipe5)
    totalTime(recipe5)

    //logic for Mondays Recipe
    if monday == 0 {
        fmt.Println(0)
        printRecipeOfTheDay(recipe1)
    } else if monday == 1 {
        fmt.Println(1)
        printRecipeOfTheDay(recipe2)
    } else if monday == 2 {
        fmt.Println(2)
        printRecipeOfTheDay(recipe3)
    } else if monday == 3 {
        fmt.Println(3)
        printRecipeOfTheDay(recipe4)
    } else if monday == 4 {
        fmt.Println(4)
        printRecipeOfTheDay(recipe5)
    }

    //logic for Tuesdays Recipe
    if tuesday == 0 {
        fmt.Println(0)
        printRecipeOfTheDay(recipe1)
    } else if tuesday == 1 {
        fmt.Println(1)
        printRecipeOfTheDay(recipe2)
    } else if tuesday == 2 {
        fmt.Println(2)
        printRecipeOfTheDay(recipe3)
    } else if tuesday == 3 {
        fmt.Println(3)
        printRecipeOfTheDay(recipe4)
    } else if tuesday == 4 {
        fmt.Println(4)
        printRecipeOfTheDay(recipe5)
    }
}

//function to print Recipe
func printRecipe(recipe Recipe) {
    fmt.Printf(""Recipe Name : %s\n"", recipe.name)
    fmt.Printf(""Prep Time : %d\n"", recipe.prepTime)
    fmt.Printf(""Cook Time : %d\n"", recipe.cookTime)
    fmt.Printf(""Ingredients : %s\n"", recipe.Ingredients)
    fmt.Printf(""Recipe ID : %d\n"", recipe.ID)
}

//Returns total time by addings cookTime and prepTime
func totalTime(recipe Recipe) {
    fmt.Printf(""The total time for this recipe is %d\n"", recipe.cookTime+recipe.prepTime)
}

//function to print the winner for recipe of the day to use
//for either lunch or dinner
func printRecipeOfTheDay(recipe Recipe) {
    fmt.Printf(""The recipe of the day is : %s\n"", recipe.name)
}
",6183
735,35452424,"package main

import (
    ""flag""
    ""fmt""
    ""github.com/goraft/raft""
    ""github.com/goraft/raftd/command""
    ""github.com/goraft/raftd/server""
    ""log""
    ""math/rand""
    ""os""
    ""time""
    ""strconv""
)

var verbose bool
var trace bool
var debug bool
var host string
var port int
var join string

func init() {
    flag.Parse()
    flag.BoolVar(&verbose, ""v"", false, ""verbose logging"")
    flag.BoolVar(&trace, ""trace"", false, ""Raft trace debugging"")
    flag.BoolVar(&debug, ""debug"", false, ""Raft debugging"")
    flag.StringVar(&host, ""h"", ""localhost"", ""hostname"")
    p,_:=strconv.Atoi(flag.Arg(1))
    flag.IntVar(&port, ""p"", p, ""port"")
    flag.StringVar(&join, ""join"", """", ""host:port of leader to join"")
    flag.Usage = func() {
        fmt.Fprintf(os.Stderr, ""Usage: %s [arguments]  \n"", os.Args[0])
        flag.PrintDefaults()
    }
}

func main() {
    log.SetFlags(0)
    flag.Parse()
    if verbose {
        log.Print(""Verbose logging enabled."")
    }
    if trace {
        raft.SetLogLevel(raft.Trace)
        log.Print(""Raft trace debugging enabled."")
    } else if debug {
        raft.SetLogLevel(raft.Debug)
        log.Print(""Raft debugging enabled."")
    }

    rand.Seed(time.Now().UnixNano())

    // Setup commands.
    raft.RegisterCommand(&command.WriteCommand{})

    // Set the data directory.
    if flag.NArg() == 0 {
        flag.Usage()
        log.Fatal(""Data path argument required"")
    }
    path := flag.Arg(0)
    if err := os.MkdirAll(path, 0744); err != nil {
        log.Fatalf(""Unable to create path: %v"", err)
    }

    log.SetFlags(log.LstdFlags)
    s := server.New(path, host, port)
    log.Fatal(s.ListenAndServe(""localhost:2001""))
    fmt.Println(""I am changing my status"");
}
",1733
736,35452424,"package main

import (
    ""flag""
    ""fmt""
    ""github.com/goraft/raft""
    ""github.com/goraft/raftd/command""
    ""github.com/goraft/raftd/server""
    ""log""
    ""math/rand""
    ""os""
    ""time""
    ""strconv""
)

var verbose bool
var trace bool
var debug bool
var host string
var port int
var join string

func init() {
    flag.Parse()
    flag.BoolVar(&verbose, ""v"", false, ""verbose logging"")
    flag.BoolVar(&trace, ""trace"", false, ""Raft trace debugging"")
    flag.BoolVar(&debug, ""debug"", false, ""Raft debugging"")
    flag.StringVar(&host, ""h"", ""localhost"", ""hostname"")
    p,_:=strconv.Atoi(flag.Arg(1))
    flag.IntVar(&port, ""p"", p, ""port"")
    flag.StringVar(&join, ""join"", """", ""host:port of leader to join"")
    flag.Usage = func() {
        fmt.Fprintf(os.Stderr, ""Usage: %s [arguments]  \n"", os.Args[0])
        flag.PrintDefaults()
    }
}

func main() {
    log.SetFlags(0)
    flag.Parse()
    if verbose {
        log.Print(""Verbose logging enabled."")
    }
    if trace {
        raft.SetLogLevel(raft.Trace)
        log.Print(""Raft trace debugging enabled."")
    } else if debug {
        raft.SetLogLevel(raft.Debug)
        log.Print(""Raft debugging enabled."")
    }

    rand.Seed(time.Now().UnixNano())

    // Setup commands.
    raft.RegisterCommand(&command.WriteCommand{})

    // Set the data directory.
    if flag.NArg() == 0 {
        flag.Usage()
        log.Fatal(""Data path argument required"")
    }
    path := flag.Arg(0)
    if err := os.MkdirAll(path, 0744); err != nil {
        log.Fatalf(""Unable to create path: %v"", err)
    }

    log.SetFlags(log.LstdFlags)
    s := server.New(path, host, port)
    log.Fatal(s.ListenAndServe(join))
}
",1677
737,35452424,"package server

import (
    ""bytes""
    ""encoding/json""
    ""fmt""
    ""github.com/goraft/raft""
    ""github.com/goraft/raftd/command""
    ""github.com/goraft/raftd/db""
    ""github.com/gorilla/mux""
    ""io/ioutil""
    ""log""
    ""math/rand""
    ""net/http""
    ""path/filepath""
    ""sync""
    ""time""
)

// The raftd server is a combination of the Raft server and an HTTP
// server which acts as the transport.
type Server struct {
    name       string
    host       string
    port       int
    path       string
    router     *mux.Router
    raftServer raft.Server
    httpServer *http.Server
    db         *db.DB
    mutex      sync.RWMutex
}

// Creates a new server.
func New(path string, host string, port int) *Server {
    s := &Server{
        host:   host,
        port:   port,
        path:   path,
        db:     db.New(),
        router: mux.NewRouter(),
    }

    // Read existing name or generate a new one.
    if b, err := ioutil.ReadFile(filepath.Join(path, ""name"")); err == nil {
        s.name = string(b)
    } else {
        s.name = fmt.Sprintf(""%07x"", rand.Int())[0:7]
        if err = ioutil.WriteFile(filepath.Join(path, ""name""), []byte(s.name), 0644); err != nil {
            panic(err)
        }
    }

    return s
}

// Returns the connection string.
func (s *Server) connectionString() string {
    return fmt.Sprintf(""http://%s:%d"", s.host, s.port)
}

// Starts the server.
func (s *Server) ListenAndServe(leader string) error {
    var err error

    log.Printf(""Initializing Raft Server: %s"", s.path)

    // Initialize and start Raft server.
    transporter := raft.NewHTTPTransporter(""/raft"", 200*time.Millisecond)
    s.raftServer, err = raft.NewServer(s.name, s.path, transporter, nil, s.db, """")
    if err != nil {
        log.Fatal(err)
    }
    transporter.Install(s.raftServer, s)
    s.raftServer.Start()

    if leader != """" {
        // Join to leader if specified.

        log.Println(""Attempting to join leader:"", leader)

        if !s.raftServer.IsLogEmpty() {
            log.Fatal(""Cannot join with an existing log"")
        }
        if err := s.Join(leader); err != nil {
            log.Fatal(err)
        }

    } else if s.raftServer.IsLogEmpty() {
        // Initialize the server by joining itself.

        log.Println(""Initializing new cluster"")

        _, err := s.raftServer.Do(&raft.DefaultJoinCommand{
            Name:             s.raftServer.Name(),
            ConnectionString: s.connectionString(),
        })
        if err != nil {
            log.Fatal(err)
        }

    } else {
        log.Println(""Recovered from log"")
    }

    log.Println(""Initializing HTTP server"")

    // Initialize and start HTTP server.
    s.httpServer = &http.Server{
        Addr:    fmt.Sprintf("":%d"", s.port),
        Handler: s.router,
    }

    s.router.HandleFunc(""/db/{key}"", s.readHandler).Methods(""GET"")
    s.router.HandleFunc(""/db/{key}"", s.writeHandler).Methods(""POST"")
    s.router.HandleFunc(""/join"", s.joinHandler).Methods(""POST"")

    log.Println(""Listening at:"", s.connectionString())

    return s.httpServer.ListenAndServe()
}

// This is a hack around Gorilla mux not providing the correct net/http
// HandleFunc() interface.
func (s *Server) HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request)) {
    s.router.HandleFunc(pattern, handler)
}

// Joins to the leader of an existing cluster.
func (s *Server) Join(leader string) error {
    command := &raft.DefaultJoinCommand{
        Name:     s.raftServer.Name(),
        ConnectionString: s.connectionString(),
    }

    var b bytes.Buffer
    json.NewEncoder(&b).Encode(command)
    resp, err := http.Post(fmt.Sprintf(""http://%s/join"", leader), ""application/json"", &b)
    if err != nil {
        return err
    }
    resp.Body.Close()

    return nil
}

func (s *Server) joinHandler(w http.ResponseWriter, req *http.Request) {
    command := &raft.DefaultJoinCommand{}

    if err := json.NewDecoder(req.Body).Decode(&command); err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    if _, err := s.raftServer.Do(command); err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
}

func (s *Server) readHandler(w http.ResponseWriter, req *http.Request) {
    vars := mux.Vars(req)
    value := s.db.Get(vars[""key""])
    w.Write([]byte(value))
}

func (s *Server) writeHandler(w http.ResponseWriter, req *http.Request) {
    vars := mux.Vars(req)

    // Read the value from the POST body.
    b, err := ioutil.ReadAll(req.Body)
    if err != nil {
        w.WriteHeader(http.StatusBadRequest)
        return
    }
    value := string(b)

    // Execute the command against the Raft server.
    _, err = s.raftServer.Do(command.NewWriteCommand(vars[""key""], value))
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
    }
}
",4905
738,35481090,"curl -s localhost:6060/debug/pprof/heap > ~/debug/heavyHeap/6mb.heap
",69
739,35481090,"curl -s localhost:6060/debug/pprof/heap > ~/debug/heavyHeap/28mb.heap
",70
740,35481090,"go tool pprof -alloc_objects -base ~/debug/heavyHeap/6mb.heap $GOPATH/myBin ~/debug/heavyHeap/28mb.heap
",104
741,35481090,"Entering interactive mode (type ""help"" for commands)
(pprof) top
73949086 of 83397023 total (88.67%)
Dropped 299 nodes (cum <= 416985)
Showing top 10 nodes out of 117 (cum >= 1802254)
      flat  flat%   sum%        cum   cum%
  62308988 74.71% 74.71%   62521981 74.97%  reflect.Value.call
   2413961  2.89% 77.61%    2424884  2.91%  calldb.fromToDiff
   1769493  2.12% 79.73%    3796564  4.55%  gopkg.in/mgo.v2/bson.(*decoder).readElemTo
   1622034  1.94% 81.67%    1622034  1.94%  gopkg.in/mgo.v2/bson.(*decoder).readCStr
   1270739  1.52% 83.20%    1401813  1.68%  reflect.(*structType).FieldByNameFunc
   1130028  1.35% 84.55%    1130028  1.35%  reflect.Value.MapKeys
    933704  1.12% 85.67%     933704  1.12%  gopkg.in/mgo.v2/bson.(*decoder).readStr
    927261  1.11% 86.79%     946166  1.13%  fmt.Sprintf
    819209  0.98% 87.77%    1119590  1.34%  my.AnchorWithClassAndDisabledAndStyle
",894
742,35481090,reflect.Value.call,18
743,35481090,"(pprof) list reflect.Value.call
Total: 83397023
ROUTINE ======================== reflect.Value.call in /usr/local/go/src/reflect/value.go
  62308988   62521981 (flat, cum) 74.97% of Total
         .          .    366:   }
         .          .    367: }
         .          .    368: if !isSlice && t.IsVariadic() {
         .          .    369:   // prepare slice for remaining values
         .          .    370:   m := len(in) - n
         .      81921    371:   slice := MakeSlice(t.In(n), m, m)
         .          .    372:   elem := t.In(n).Elem()
         .          .    373:   for i := 0; i < m; i++ {
         .          .    374:     x := in[n+i]
         .          .    375:     if xt := x.Type(); !xt.AssignableTo(elem) {
         .          .    376:       panic(""reflect: cannot use "" + xt.String() + "" as type "" + elem.String() + "" in "" + op)
         .          .    377:     }
         .     131072    378:     slice.Index(i).Set(x)
         .          .    379:   }
         .          .    380:   origIn := in
         .          .    381:   in = make([]Value, n+1)
         .          .    382:   copy(in[:n], origIn)
         .          .    383:   in[n] = slice
         .          .    384: }
         .          .    385:
         .          .    386: nin := len(in)
         .          .    387: if nin != t.NumIn() {
         .          .    388:   panic(""reflect.Value.Call: wrong argument count"")
         .          .    389: }
         .          .    390: nout := t.NumOut()
         .          .    391:
         .          .    392: // Compute frame type, allocate a chunk of memory for frame
         .          .    393: frametype, _, retOffset, _ := funcLayout(t, rcvrtype)
     32769      32769    394: args := unsafe_New(frametype)
         .          .    395: off := uintptr(0)
         .          .    396:
         .          .    397: // Copy inputs into args.
         .          .    398: if rcvrtype != nil {
         .          .    399:   storeRcvr(rcvr, args)
         .          .    400:   off = ptrSize
         .          .    401: }
         .          .    402: for i, v := range in {
         .          .    403:   v.mustBeExported()
         .          .    404:   targ := t.In(i).(*rtype)
         .          .    405:   a := uintptr(targ.align)
         .          .    406:   off = (off + a - 1) &^ (a - 1)
         .          .    407:   n := targ.size
         .          .    408:   addr := unsafe.Pointer(uintptr(args) + off)
         .          .    409:   v = v.assignTo(""reflect.Value.Call"", targ, addr)
         .          .    410:   if v.flag&flagIndir != 0 {
         .          .    411:     memmove(addr, v.ptr, n)
         .          .    412:   } else {
         .          .    413:     *(*unsafe.Pointer)(addr) = v.ptr
         .          .    414:   }
         .          .    415:   off += n
         .          .    416: }
         .          .    417:
         .          .    418: // Call.
  62243451   62243451    419: call(fn, args, uint32(frametype.size), uint32(retOffset))
         .          .    420:
         .          .    421: // For testing; see TestCallMethodJump.
         .          .    422: if callGC {
         .          .    423:   runtime.GC()
         .          .    424: }
         .          .    425:
         .          .    426: // Copy return values out of args.
     32768      32768    427: ret := make([]Value, nout)
         .          .    428: off = retOffset
         .          .    429: for i := 0; i < nout; i++ {
         .          .    430:   tv := t.Out(i)
         .          .    431:   a := uintptr(tv.Align())
         .          .    432:   off = (off + a - 1) &^ (a - 1)
",3707
744,35481090,reflect.Value.call,18
745,35481090,reflect.Value.call,18
746,35565945,"                                                     ;(invert-face 'default)   ;;weird with nw mode
                                                     ;(blink-cursor-mode 0)
(load-file ""/home/sudeep/.emacs.d/shortcuts.el"")
;; (defadvice ido-find-file (after find-file-sudo activate)
;;   ""Find file as root if necessary.""
;;   (unless (and buffer-file-name
;;                (file-writable-p buffer-file-name))
;;     (find-alternate-file (concat ""/sudo:root@localhost:"" buffer-file-name))))
                                                     ;(setq debug-on-error t)

(setq custom-file ""/home/sudeep/.emacs.d/custom.el"")
(load custom-file 'noerror)

(iswitchb-mode 1)
                                                     ;disables scroll bar
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(menu-bar-mode -1)
(tool-bar-mode -1)


(add-to-list 'auto-mode-alist '(""\\.h\\'"" . c++-mode))    ;.h files are treated as c files instaed of c++ in emacs. Remove it!

;; -- laoding images in org mode
;; enable image mode first
(setq-default iimage-mode t)


;Splitted window switching with C-ESC

(global-set-key (kbd """") 'other-window)
;     

;hiding code(hiding the contents of a function)C-c @ C-h and C-c @ C-s


(add-hook 'c++-mode-common-hook #'hs-minor-mode)
(add-hook 'c-mode-common-hook #'hs-minor-mode)
(add-hook 'python-mode-common-hook #'hs-minor-mode)
(add-hook 'elisp-mode-common-hook #'hs-minor-mode)
(add-hook 'java-mode-common-hook #'hs-minor-mode)


(blink-cursor-mode -1)

;miscellaneous
(setq max-mini-window-height .70)
(which-function-mode)




(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8-unix)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)




;; (load-file ""~/.emacs.d/tabbar.el"")
;; (require 'cl)
;; (when (require 'tabbar nil t)
;;   (setq tabbar-buffer-groups-function
;;        (lambda (b) (list ""All Buffers"")))
;;   (setq tabbar-buffer-list-function
;;        (lambda ()
;;           (remove-if
;;            (lambda(buffer)
;;               (find (aref (buffer-name buffer) 0) "" *""))
;;            (buffer-list))))
;;   (tabbar-mode))

;; (setq tabbar-buffer-groups-function
;;      (lambda ()
;;        (list ""All"")))
;; (require 'tabbar)
;; (tabbar-mode 1)
;; (global-set-key [(C-S-iso-lefttab)] 'tabbar-backward)
;; (global-set-key (kbd ""C-"") 'tabbar-forward)



                                                     ;bookmarks
(global-set-key (kbd ""C-c C-z"") 'bookmark-set)
(global-set-key (kbd ""C-c C-j"") 'bookmark-jump)
(global-set-key (kbd ""C-c C-q"") 'bookmark-delete)
;(global-set-key (kbd ""C-!"") 'gtags-pop-stack)

(defadvice bookmark-jump (after bookmark-jump activate)
  (let ((latest (bookmark-get-bookmark bookmark)))
    (setq bookmark-alist (delq latest bookmark-alist))
    (add-to-list 'bookmark-alist latest)))

(display-time-mode 1)

;highlighting  todo,fixme, bug

(add-hook 'prog-mode-common-hook
             (lambda ()
                (font-lock-add-keywords nil
                                                '((""\\<\\(FIXME\\|TODO\\|BUG\\):"" 1 font-lock-warning-face t)))))


;; (load-file ""/home/sudeep/.emacs.d/sr-speedbar.el"")
;; (require 'sr-speedbar)
;; (make-face 'speedbar-face)
;; ;(set-face-font 'speedbar-face ""8"")
;; (setq speedbar-mode-hook '(lambda () (buffer-face-set 'speedbar-face)))


;; (speedbar-add-supported-extension "".c"")
;; (speedbar-add-supported-extension "".c++"")
;; (speedbar-add-supported-extension "".s"")
;; (speedbar-add-supported-extension "".asm"")
;; (speedbar-add-supported-extension "".java"")
;; (speedbar-add-supported-extension "".py"")

(setq c-default-style ""linux""
        c-basic-offset 3)

                                                     ;indentation customization(replacing tabs by 4 spaces)
(setq-default c-basic-offset 3
                  tab-width 3
                  indent-tabs-mode t)


(defun dos2unix ()
  ""Replace DOS eolns CR LF with Unix eolns CR""
  (interactive)
    (goto-char (point-min))
      (while (search-forward ""\r"" nil t) (replace-match """")))


;(set-face-attribute 'default nil :height 105)

(setq url-proxy-services
   '((""no_proxy"" . ""^\\(localhost\\|10.*\\)"")
     (""http"" . ""10.3.100.207:8080"")
     (""https"" . ""10.3.100.207:8080"")
      (""ftp"" . ""10.3.100.207:8080"")
      (""socks"" . ""10.3.100.207:8080"")))



(require 'package)
(setq package-archives '((""gnu"" . ""http://elpa.gnu.org/packages/"")
                         (""marmalade"" . ""http://marmalade-repo.org/packages/"")
                         (""melpa"" . ""http://melpa.milkbox.net/packages/"")
                                 (""elpa"" . ""http://tromey.com/elpa/"")))
(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents))
(add-to-list 'load-path ""/home/sudeep/.emacs.d/"")



(defun djcb-opacity-modify (&optional dec)
  ""modify the transparency of the emacs frame; if DEC is t,
    decrease the transparency, otherwise increase it in 10%-steps""
  (let* ((alpha-or-nil (frame-parameter nil 'alpha)) ; nil before setting
          (oldalpha (if alpha-or-nil alpha-or-nil 100))
          (newalpha (if dec (- oldalpha 10) (+ oldalpha 10))))
    (when (and (>= newalpha frame-alpha-lower-limit) (<= newalpha 100))
      (modify-frame-parameters nil (list (cons 'alpha newalpha))))))

 ;; C-8 will increase opacity (== decrease transparency)
 ;; C-9 will decrease opacity (== increase transparency
 ;; C-0 will returns the state to normal
(global-set-key (kbd ""C-8"") '(lambda()(interactive)(djcb-opacity-modify)))
(global-set-key (kbd ""C-9"") '(lambda()(interactive)(djcb-opacity-modify t)))
(global-set-key (kbd ""C-0"") '(lambda()(interactive)
                               (modify-frame-parameters nil `((alpha . 10)))))



(setq large-file-warning-threshold 100000000)


;(add-to-list 'custom-theme-load-path ""~/.emacs.d/themes"")
;(load-theme 'junio t)
;(load-theme 'zenburn t)

;(load-file ""~/.emacs.d/arjen-theme.el"")

                                                     ;(load-file ""~/.emacs.d/sanityinc-tomorrow-night-theme.el"")
                                                     ;(set-background-color ""black"")
                                                     ;(require 'color-theme-sanityinc-tomorrow)
                                                     ;(load-theme 'color-theme-sanityinc-tomorrow-black t)
                                                     ;(load-theme 'sanityinc-solarized-dark)


(defun electric-pair ()
  ""If at end of line, insert character pair without surrounding spaces.
   Otherwise, just insert the typed character.""
  (interactive)
  (if (eolp) (let (parens-require-spaces) (insert-pair)) 
    (self-insert-command 1)))

(add-hook 'js-mode-hook
             (lambda ()
                (define-key js-mode-map ""("" 'electric-pair)
                (define-key js-mode-map ""["" 'electric-pair)
                (define-key js-mode-map ""{"" 'electric-pair)))



;;js2-mode setup
                                                     ;(semantic-mode)
                                                     ;(require 'icicles)
                                                     ;(icy-mode t)


;; (add-to-list 'load-path ""/home/sudeep/.emacs.d/elpa/auto-complete-20160107.8/"")  ; Load the default configuration
;; (require 'auto-complete-config)   ; Make sure we can find the dictionaries
;; (add-to-list 'ac-dictionary-directories ""/home/sudeep/.emacs.d/elpa/auto-complete-20160107.8/dict"")          ; Usedictionaries by default
;; (setq-default ac-sources (add-to-list 'ac-sources 'ac-source-dictionary))
;; (global-auto-complete-mode t)
;;                                                   ; Start auto-completion after 2 characters of a word
;; (setq ac-auto-start 2)
;;                                                   ; case sensitivity is important when finding matches
;; (setq ac-ignore-case nil)

;;                                                   ;(autoload 'js2-mode ""js2"" nil t) 

;; (ac-config-default)

;; (set-default 'ac-sources
;;               '(ac-source-abbrev
;;                  ac-source-dictionary
;;                  ac-source-yasnippet
;;                  ac-source-words-in-buffer
;;                  ac-source-words-in-same-mode-buffers
;;                  ac-source-semantic))

;; (dolist (m '(c-mode c++-mode java-mode go-mode))
;;   (add-to-list 'ac-modes m))

;; (global-auto-complete-mode t)
;; ;;yasnippet
;; (add-to-list 'load-path
;;               ""~/.emacs.d/plugins/yasnippet"")
;; (require 'yasnippet)
;;                                                   ;(yas-global-mode 1)

(add-to-list 'auto-mode-alist '(""\\.js$"" . js2-mode))

(js2-imenu-extras-mode)


;; yes or no becomes y or n
(defalias 'yes-or-no-p 'y-or-n-p)

;; ;;yasnippet
;; (yas-global-mode 1)

;; ;; auto-complete
;; (require 'auto-complete-config)
;; (add-to-list 'ac-dictionary-directories ""~/.emacs.d/elpa/auto-complete/dict"")

;; (set-default 'ac-sources
;;              '(ac-source-abbrev
;;                ac-source-dictionary
;;                ac-source-yasnippet
;;                ac-source-words-in-buffer
;;                ac-source-words-in-same-mode-buffers
;;                ac-source-semantic))

;; (ac-config-default)

;; (dolist (m '(c-mode c++-mode java-mode emacs-lisp-mode))
;;   (add-to-list 'ac-modes m))

;; (global-auto-complete-mode t)





(global-aggressive-indent-mode 1)
(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
(ido-mode 1)


;;go-mode
                                                     ;(require 'go-autocomplete)


(require 'company)                                   ; load company mode
                                                     ;(require 'company-go)                                                  ; load company mode go backend
(add-hook 'go-mode-hook (lambda ()
                                  (set (make-local-variable 'company-backends) '(company-go))
                                  (company-mode)))
(setq company-tooltip-limit 20)                      ; bigger popup window
(setq company-idle-delay .1)                         ; decrease delay before autocompletion popup shows
(setq company-echo-delay 0)                          ; remove annoying blinking
(setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing

(global-company-mode)

;; (eval-after-load ""go-mode""
;;   '(progn
;;      (flycheck-declare-checker go-gofmt
;;                                       ""A Go syntax and style checker using the gofmt utility.""
;;                                       :command '(""gofmt"" source-inplace)
;;                                       :error-patterns '((""^\\(?1:.*\\):\\(?2:[0-9]+\\):\\(?3:[0-9]+\\): \\(?4:.*\\)$"" error))
;;                                       :modes 'go-mode)
;;      (add-to-list 'flycheck-checkers 'go-gofmt)))
                                                     ;(ac-go-expand-arguments-into-snippets)
                                                     ;(add-hook 'go-mode-hook 'flycheck-mode)
",10976
747,35565945,company-complete,16
748,35565945,"Debugger entered--Lisp error: (error ""GOCODE PANIC: Please check your code by \""go build\"""")
  signal(error (""GOCODE PANIC: Please check your code by \""go build\""""))
  error(""GOCODE PANIC: Please check your code by \""go build\"""")
  company-go--candidates()
  company-go(candidates #(""Clien"" 0 5 (fontified t)))
  apply(company-go (candidates #(""Clien"" 0 5 (fontified t))))
  #[0 ""\302 !\203\303   \300\""\207\303\304  \300#\207"" [(candidates #(""Clien"" 0 5 (fontified t))) company-backend functionp apply company--multi-backend-adapter] 4 ""\n\n(fn)""]()
  company-call-backend-raw(candidates #(""Clien"" 0 5 (fontified t)))
  apply(company-call-backend-raw (candidates #(""Clien"" 0 5 (fontified t))))
  company--force-sync(company-call-backend-raw (candidates #(""Clien"" 0 5 (fontified t))) company-go)
  company-call-backend(candidates #(""Clien"" 0 5 (fontified t)))
  company--fetch-candidates(#(""Clien"" 0 5 (fontified t)))
  company-calculate-candidates(#(""Clien"" 0 5 (fontified t)))
  #[0 ""\n\203   \nC\202\n\211\205\233\211@\3009\204\306!\203<9\2036\307N\310=\2046\307N?\205@\311!\205@\312!\202@\313\312\""\240\210\300@\203\224\314\300@!\203\216\315\300@!\211\301\316\f!\240\210\301@:\204w
\203i\317\320!\210\301@\310=\203\216\321\322!\210\202\216
\203\300@\323\301@!\210\324\325\326 \""\210\327\330!\210\331\332\301@\""\210A\266\202\202\n\207"" [((#(""Clien"" 0 5 (fontified t)) . t)) (nil) company-backend company-backends company-prefix company--manual-action functionp company-init t company-init-backend prefix company--multi-backend-adapter company--good-prefix-p company--prefix-str company-calculate-candidates message ""No completion found"" company-cancel unique company-update-candidates run-hook-with-args company-completion-started-hook company-explicit-action-p company-call-frontends show throw --cl-block-nil-- company--manual-prefix] 6 ""\n\n(fn)""]()
  funcall(#[0 ""\n\203   \nC\202\n\211\205\233\211@\3009\204\306!\203<9\2036\307N\310=\2046\307N?\205@\311!\205@\312!\202@\313\312\""\240\210\300@\203\224\314\300@!\203\216\315\300@!\211\301\316\f!\240\210\301@:\204w
\203i\317\320!\210\301@\310=\203\216\321\322!\210\202\216
\203\300@\323\301@!\210\324\325\326 \""\210\327\330!\210\331\332\301@\""\210A\266\202\202\n\207"" [((#(""Clien"" 0 5 (fontified t)) . t)) (nil) company-backend company-backends company-prefix company--manual-action functionp company-init t company-init-backend prefix company--multi-backend-adapter company--good-prefix-p company--prefix-str company-calculate-candidates message ""No completion found"" company-cancel unique company-update-candidates run-hook-with-args company-completion-started-hook company-explicit-action-p company-call-frontends show throw --cl-block-nil-- company--manual-prefix] 6 ""\n\n(fn)""])
  company--begin-new()
  company--perform()
  #[0 ""\301 \210\207"" [company-candidates company--perform] 1 ""\n\n(fn)""]()
  company-auto-begin()
  company-manual-begin()
  company-complete()
  call-interactively(company-complete record nil)
  command-execute(company-complete record)
  execute-extended-command(nil ""company-complete"")
  call-interactively(execute-extended-command nil nil)
",3128
749,35565945,(require 'cl),13
750,35655966,"// Package classification User API.
//
// the purpose of this application is to provide an application
// that is using plain go code to define an API
//
// This should demonstrate all the possible comment annotations
// that are available to turn go code into a fully compliant swagger 2.0 spec
//
// Terms Of Service:
//
// there are no TOS at this moment, use at your own risk we take no responsibility
//
//     Schemes: http, https
//     Host: localhost
//     BasePath: /v2
//     Version: 0.0.1
//     License: MIT http://opensource.org/licenses/MIT
//     Contact: John Doe http://john.doe.com
//
//     Consumes:
//     - application/json
//     - application/xml
//
//     Produces:
//     - application/json
//     - application/xml
//
//
// swagger:meta
package main
import (
 ""github.com/gin-gonic/gin""
 ""strconv""
 ""database/sql""
 _ ""github.com/go-sql-driver/mysql""
 ""gopkg.in/gorp.v1""
 ""log""
)

// swagger:model
// User represents the user for this application
//
// A user is the security principal for this application.
// It's also used as one of main axis for reporting.
//
// A user can have friends with whom they can share what they like.
//
type User struct {
    // the id for this user
    //
    // required: true
    // min: 1
    Id int64 `db:""id"" json:""id""`
    // the first name for this user
    // required: true
    // min length: 3
    Firstname string `db:""firstname"" json:""firstname""`
    // the last name for this user
    // required: true
    // min length: 3
    Lastname string `db:""lastname"" json:""lastname""`
}

func main() {
 r := gin.Default()
 r.Use(Cors())
 v1 := r.Group(""api/v1"")
 {
 v1.GET(""/users"", GetUsers)
 v1.GET(""/users/:id"", GetUser)
 v1.POST(""/users"", PostUser)
 v1.PUT(""/users/:id"", UpdateUser)
 v1.DELETE(""/users/:id"", DeleteUser)
 v1.OPTIONS(""/users"", OptionsUser)     // POST
 v1.OPTIONS(""/users/:id"", OptionsUser) // PUT, DELETE
 }
r.Run("":8696"")
}


func GetUsers(c *gin.Context) {
    // swagger:route GET /user listPets pets users
    //
    // Lists pets filtered by some parameters.
    //
    // This will show all available pets by default.
    // You can get the pets that are out of stock
    //
    //     Consumes:
    //     - application/json
    //     - application/x-protobuf
    //
    //     Produces:
    //     - application/json
    //     - application/x-protobuf
    //
    //     Schemes: http, https, ws, wss
    //
    //     Security:
    //       api_key:
    //       oauth: read, write
    //
    //     Responses:
    //       default: genericError
    //       200: someResponse
    //       422: validationError
     var users []User
     _, err := dbmap.Select(&users, ""SELECT * FROM user"")
    if err == nil {
     c.JSON(200, users)
     } else {
     c.JSON(404, gin.H{""error"": ""no user(s) into the table""})
 }
// curl -i http://localhost:8080/api/v1/users
}

func GetUser(c *gin.Context) {
 id := c.Params.ByName(""id"")
 var user User
 err := dbmap.SelectOne(&user, ""SELECT * FROM user WHERE id=?"", id)
if err == nil {
 user_id, _ := strconv.ParseInt(id, 0, 64)
content := &User{
 Id: user_id,
 Firstname: user.Firstname,
 Lastname: user.Lastname,
 }
 c.JSON(200, content)
 } else {
 c.JSON(404, gin.H{""error"": ""user not found""})
 }
// curl -i http://localhost:8080/api/v1/users/1
}

func PostUser(c *gin.Context) {
 var user User
 c.Bind(&user)
if user.Firstname != """" && user.Lastname != """" {
if insert, _ := dbmap.Exec(`INSERT INTO user (firstname, lastname) VALUES (?, ?)`, user.Firstname, user.Lastname); insert != nil {
 user_id, err := insert.LastInsertId()
 if err == nil {
 content := &User{
 Id: user_id,
 Firstname: user.Firstname,
 Lastname: user.Lastname,
 }
 c.JSON(201, content)
 } else {
 checkErr(err, ""Insert failed"")
 }
 }
} else {
 c.JSON(422, gin.H{""error"": ""fields are empty""})
 }
// curl -i -X POST -H ""Content-Type: application/json"" -d ""{ \""firstname\"": \""Thea\"", \""lastname\"": \""Queen\"" }"" http://localhost:8080/api/v1/users
}

func UpdateUser(c *gin.Context) {
 id := c.Params.ByName(""id"")
 var user User
 err := dbmap.SelectOne(&user, ""SELECT * FROM user WHERE id=?"", id)
if err == nil {
 var json User
 c.Bind(&json)
user_id, _ := strconv.ParseInt(id, 0, 64)
user := User{
 Id: user_id,
 Firstname: json.Firstname,
 Lastname: json.Lastname,
 }
if user.Firstname != """" && user.Lastname != """"{
 _, err = dbmap.Update(&user)
if err == nil {
 c.JSON(200, user)
 } else {
 checkErr(err, ""Updated failed"")
 }
} else {
 c.JSON(422, gin.H{""error"": ""fields are empty""})
 }
} else {
 c.JSON(404, gin.H{""error"": ""user not found""})
 }
// curl -i -X PUT -H ""Content-Type: application/json"" -d ""{ \""firstname\"": \""Thea\"", \""lastname\"": \""Merlyn\"" }"" http://localhost:8080/api/v1/users/1
}

func DeleteUser(c *gin.Context) {
 id := c.Params.ByName(""id"")
var user User
 err := dbmap.SelectOne(&user, ""SELECT id FROM user WHERE id=?"", id)
if err == nil {
 _, err = dbmap.Delete(&user)
if err == nil {
 c.JSON(200, gin.H{""id #"" + id: "" deleted""})
 } else {
 checkErr(err, ""Delete failed"")
 }
} else {
 c.JSON(404, gin.H{""error"": ""user not found""})
 }
// curl -i -X DELETE http://localhost:8080/api/v1/users/1
}

var dbmap = initDb()
func initDb() *gorp.DbMap {
 db, err := sql.Open(""mysql"",
        ""root:max_123@tcp(127.0.0.1:3306)/gotest"")
 checkErr(err, ""sql.Open failed"")
 dbmap := &gorp.DbMap{Db: db, Dialect:           gorp.MySQLDialect{""InnoDB"", ""UTF8""}}
 dbmap.AddTableWithName(User{}, ""User"").SetKeys(true, ""Id"")
 err = dbmap.CreateTablesIfNotExists()
 checkErr(err, ""Create table failed"")
return dbmap
}

func checkErr(err error, msg string) {
 if err != nil {
 log.Fatalln(msg, err)
 }
}


func Cors() gin.HandlerFunc {
 return func(c *gin.Context) {
 c.Writer.Header().Add(""Access-Control-Allow-Origin"", ""*"")
 c.Next()
 }
}

func OptionsUser(c *gin.Context) {
 c.Writer.Header().Add(""Access-Control-Allow-Origin"", ""*"")
 c.Writer.Header().Set(""Access-Control-Allow-Methods"", ""DELETE,POST, PUT"")
 c.Writer.Header().Set(""Access-Control-Allow-Headers"", ""Content-Type"")
 c.Next()
}
",5999
751,35655966,"{
    ""consumes"": [""application/json"", ""application/xml""],
    ""produces"": [""application/json"", ""application/xml""],
    ""schemes"": [""http"", ""https""],
    ""swagger"": ""2.0"",
    ""info"": {
        ""description"": ""the purpose of this application is to provide an application\nthat is using plain go code to define an API\n\nThis should demonstrate all the possible comment annotations\nthat are available to turn go code into a fully compliant swagger 2.0 spec"",
        ""title"": ""User API."",
        ""termsOfService"": ""there are no TOS at this moment, use at your own risk we take no responsibility"",
        ""contact"": {
            ""name"": ""John Doe"",
            ""url"": ""http://john.doe.com"",
            ""email"": ""john.doe@example.com""
        },
        ""license"": {
            ""name"": ""MIT"",
            ""url"": ""http://opensource.org/licenses/MIT""
        },
        ""version"": ""0.0.1""
    },
    ""host"": ""localhost"",
    ""basePath"": ""/v2"",
    ""paths"": {
        ""/user"": {
            ""get"": {
                ""description"": ""This will show all available pets by default.\nYou can get the pets that are out of stock"",
                ""consumes"": [""application/json"", ""application/x-protobuf""],
                ""produces"": [""application/json"", ""application/x-protobuf""],
                ""schemes"": [""http"", ""https"", ""ws"", ""wss""],
                ""tags"": [""listPets"", ""pets""],
                ""summary"": ""Lists pets filtered by some parameters."",
                ""operationId"": ""users"",
                ""security"": [{
                    ""api_key"": null
                }, {
                    ""oauth"": [""read"", ""write""]
                }],
                ""responses"": {
                    ""200"": {
                        ""$ref"": ""#/responses/someResponse""
                    },
                    ""422"": {
                        ""$ref"": ""#/responses/validationError""
                    },
                    ""default"": {
                        ""$ref"": ""#/responses/genericError""
                    }
                }
            }
        }
    },
    ""definitions"": {}
}
",2089
752,35655966,"Error
 Object
message:  ""options.definition is required""
code:  ""UNCAUGHT_SWAY_WORKER_ERROR""
",93
753,35678560,src/syscall,11
754,35678560,go generate,11
755,35678560,go generate,11
756,35678560,*uint16,7
757,35678560,syscall.UTF16PtrFromString,26
758,35678560,mksyscall_windows.go,20
759,35678560,syscall_windows.go,18
760,35678560,"//sys   GetLastError() (lasterr error)
//...
//sys   CreateHardLink(filename *uint16, existingfilename *uint16, reserved uintptr) (err error) [failretval&0xff==0] = CreateHardLinkW
",181
761,35678560,mksyscall_windows.go,20
762,35678560,go generate,11
763,35678560,"go generate
",12
764,35678560,win32_windows.go,16
765,35678560,"package win32

//go generate go run mksyscall_windows.go -output zwin32_windows.go win32_windows.go

type (
    LPVOID         uintptr
    LMSTR          *uint16
    DWORD          uint32
    LPBYTE         *byte
    LPDWORD        *uint32
    LPWSTR         *uint16
    NET_API_STATUS DWORD

    USER_INFO_1 struct {
        Usri1_name         LPWSTR
        Usri1_password     LPWSTR
        Usri1_password_age DWORD
        Usri1_priv         DWORD
        Usri1_home_dir     LPWSTR
        Usri1_comment      LPWSTR
        Usri1_flags        DWORD
        Usri1_script_path  LPWSTR
    }

    GROUP_USERS_INFO_0 struct {
        Grui0_name LPWSTR
    }

    USER_INFO_1003 struct {
        Usri1003_password LPWSTR
    }
)

const (
    // from LMaccess.h

    USER_PRIV_GUEST = 0
    USER_PRIV_USER  = 1
    USER_PRIV_ADMIN = 2

    UF_SCRIPT                          = 0x0001
    UF_ACCOUNTDISABLE                  = 0x0002
    UF_HOMEDIR_REQUIRED                = 0x0008
    UF_LOCKOUT                         = 0x0010
    UF_PASSWD_NOTREQD                  = 0x0020
    UF_PASSWD_CANT_CHANGE              = 0x0040
    UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = 0x0080

    UF_TEMP_DUPLICATE_ACCOUNT    = 0x0100
    UF_NORMAL_ACCOUNT            = 0x0200
    UF_INTERDOMAIN_TRUST_ACCOUNT = 0x0800
    UF_WORKSTATION_TRUST_ACCOUNT = 0x1000
    UF_SERVER_TRUST_ACCOUNT      = 0x2000

    UF_ACCOUNT_TYPE_MASK = UF_TEMP_DUPLICATE_ACCOUNT |
        UF_NORMAL_ACCOUNT |
        UF_INTERDOMAIN_TRUST_ACCOUNT |
        UF_WORKSTATION_TRUST_ACCOUNT |
        UF_SERVER_TRUST_ACCOUNT

    UF_DONT_EXPIRE_PASSWD                     = 0x10000
    UF_MNS_LOGON_ACCOUNT                      = 0x20000
    UF_SMARTCARD_REQUIRED                     = 0x40000
    UF_TRUSTED_FOR_DELEGATION                 = 0x80000
    UF_NOT_DELEGATED                          = 0x100000
    UF_USE_DES_KEY_ONLY                       = 0x200000
    UF_DONT_REQUIRE_PREAUTH                   = 0x400000
    UF_PASSWORD_EXPIRED                       = 0x800000
    UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 0x1000000
    UF_NO_AUTH_DATA_REQUIRED                  = 0x2000000
    UF_PARTIAL_SECRETS_ACCOUNT                = 0x4000000
    UF_USE_AES_KEYS                           = 0x8000000

    UF_SETTABLE_BITS = UF_SCRIPT |
        UF_ACCOUNTDISABLE |
        UF_LOCKOUT |
        UF_HOMEDIR_REQUIRED |
        UF_PASSWD_NOTREQD |
        UF_PASSWD_CANT_CHANGE |
        UF_ACCOUNT_TYPE_MASK |
        UF_DONT_EXPIRE_PASSWD |
        UF_MNS_LOGON_ACCOUNT |
        UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED |
        UF_SMARTCARD_REQUIRED |
        UF_TRUSTED_FOR_DELEGATION |
        UF_NOT_DELEGATED |
        UF_USE_DES_KEY_ONLY |
        UF_DONT_REQUIRE_PREAUTH |
        UF_PASSWORD_EXPIRED |
        UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION |
        UF_NO_AUTH_DATA_REQUIRED |
        UF_USE_AES_KEYS |
        UF_PARTIAL_SECRETS_ACCOUNT

    FILTER_TEMP_DUPLICATE_ACCOUNT    = (0x0001)
    FILTER_NORMAL_ACCOUNT            = (0x0002)
    FILTER_INTERDOMAIN_TRUST_ACCOUNT = (0x0008)
    FILTER_WORKSTATION_TRUST_ACCOUNT = (0x0010)
    FILTER_SERVER_TRUST_ACCOUNT      = (0x0020)

    LG_INCLUDE_INDIRECT = (0x0001)

    // etc...
)

//sys NetApiBufferFree(Buffer LPVOID) (status NET_API_STATUS) = netapi32.NetApiBufferFree
//sys NetUserAdd(servername LMSTR, level DWORD, buf LPBYTE, parm_err LPDWORD) (status NET_API_STATUS) = netapi32.NetUserAdd
//sys NetUserChangePassword(domainname LPCWSTR, username LPCWSTR, oldpassword LPCWSTR, newpassword LPCWSTR) (status NET_API_STATUS) = netapi32.NetUserChangePassword
//sys NetUserDel(servername LPCWSTR, username LPCWSTR) (status NET_API_STATUS) = netapi32.NetUserDel
//sys NetUserEnum(servername LPCWSTR, level DWORD, filter DWORD, bufptr *LPBYTE, prefmaxlen DWORD, entriesread LPDWORD, totalentries LPDWORD, resume_handle LPDWORD) (status NET_API_STATUS) = netapi32.NetUserEnum
//sys NetUserGetGroups(servername LPCWSTR, username LPCWSTR, level DWORD, bufptr *LPBYTE, prefmaxlen DWORD, entriesread LPDWORD, totalentries LPDWORD) (status NET_API_STATUS) = netapi32.NetUserGetGroups
//sys NetUserSetGroups(servername LPCWSTR, username LPCWSTR, level DWORD, buf LPBYTE, num_entries DWORD) (status NET_API_STATUS) = netapi32.NetUserSetGroups
//sys NetUserSetInfo(servername LPCWSTR, username LPCWSTR, level DWORD, buf LPBYTE, parm_err LPDWORD) (status NET_API_STATUS) = netapi32.NetUserSetInfo
",4410
766,35678560,go generate,11
767,35678560,mksyscall_windows.go,20
768,35678560,"// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package win32

import ""unsafe""
import ""syscall""

var _ unsafe.Pointer

var (
    modnetapi32 = syscall.NewLazyDLL(""netapi32.dll"")

    procNetApiBufferFree      = modnetapi32.NewProc(""NetApiBufferFree"")
    procNetUserAdd            = modnetapi32.NewProc(""NetUserAdd"")
    procNetUserChangePassword = modnetapi32.NewProc(""NetUserChangePassword"")
    procNetUserDel            = modnetapi32.NewProc(""NetUserDel"")
    procNetUserEnum           = modnetapi32.NewProc(""NetUserEnum"")
    procNetUserGetGroups      = modnetapi32.NewProc(""NetUserGetGroups"")
    procNetUserSetGroups      = modnetapi32.NewProc(""NetUserSetGroups"")
    procNetUserSetInfo        = modnetapi32.NewProc(""NetUserSetInfo"")
)

func NetApiBufferFree(Buffer LPVOID) (status NET_API_STATUS) {
    r0, _, _ := syscall.Syscall(procNetApiBufferFree.Addr(), 1, uintptr(Buffer), 0, 0)
    status = NET_API_STATUS(r0)
    return
}

func NetUserAdd(servername LMSTR, level DWORD, buf LPBYTE, parm_err LPDWORD) (status NET_API_STATUS) {
    r0, _, _ := syscall.Syscall6(procNetUserAdd.Addr(), 4, uintptr(servername), uintptr(level), uintptr(buf), uintptr(parm_err), 0, 0)
    status = NET_API_STATUS(r0)
    return
}

func NetUserChangePassword(domainname LPCWSTR, username LPCWSTR, oldpassword LPCWSTR, newpassword LPCWSTR) (status NET_API_STATUS) {
    r0, _, _ := syscall.Syscall6(procNetUserChangePassword.Addr(), 4, uintptr(domainname), uintptr(username), uintptr(oldpassword), uintptr(newpassword), 0, 0)
    status = NET_API_STATUS(r0)
    return
}

func NetUserDel(servername LPCWSTR, username LPCWSTR) (status NET_API_STATUS) {
    r0, _, _ := syscall.Syscall(procNetUserDel.Addr(), 2, uintptr(servername), uintptr(username), 0)
    status = NET_API_STATUS(r0)
    return
}

func NetUserEnum(servername LPCWSTR, level DWORD, filter DWORD, bufptr *LPBYTE, prefmaxlen DWORD, entriesread LPDWORD, totalentries LPDWORD, resume_handle LPDWORD) (status NET_API_STATUS) {
    r0, _, _ := syscall.Syscall9(procNetUserEnum.Addr(), 8, uintptr(servername), uintptr(level), uintptr(filter), uintptr(unsafe.Pointer(bufptr)), uintptr(prefmaxlen), uintptr(entriesread), uintptr(totalentries), uintptr(resume_handle), 0)
    status = NET_API_STATUS(r0)
    return
}

func NetUserGetGroups(servername LPCWSTR, username LPCWSTR, level DWORD, bufptr *LPBYTE, prefmaxlen DWORD, entriesread LPDWORD, totalentries LPDWORD) (status NET_API_STATUS) {
    r0, _, _ := syscall.Syscall9(procNetUserGetGroups.Addr(), 7, uintptr(servername), uintptr(username), uintptr(level), uintptr(unsafe.Pointer(bufptr)), uintptr(prefmaxlen), uintptr(entriesread), uintptr(totalentries), 0, 0)
    status = NET_API_STATUS(r0)
    return
}

func NetUserSetGroups(servername LPCWSTR, username LPCWSTR, level DWORD, buf LPBYTE, num_entries DWORD) (status NET_API_STATUS) {
    r0, _, _ := syscall.Syscall6(procNetUserSetGroups.Addr(), 5, uintptr(servername), uintptr(username), uintptr(level), uintptr(buf), uintptr(num_entries), 0)
    status = NET_API_STATUS(r0)
    return
}

func NetUserSetInfo(servername LPCWSTR, username LPCWSTR, level DWORD, buf LPBYTE, parm_err LPDWORD) (status NET_API_STATUS) {
    r0, _, _ := syscall.Syscall6(procNetUserSetInfo.Addr(), 5, uintptr(servername), uintptr(username), uintptr(level), uintptr(buf), uintptr(parm_err), 0)
    status = NET_API_STATUS(r0)
    return
}
",3389
769,35678560,syscall,7
770,35752532,content.Body,12
771,35752532,ls -l /proc/PID/fd | wc -l,26
772,35752532,"package http

import ""downloader/request""
import ""downloader/response""
import ""downloader/proxy""
import ""downloader/ssdb""
import ""net/http""
import ""net/url""
import ""time""
import ""fmt""
import ""strings""
import ""io/ioutil""
import ""errors""

func getProxy(ssdbClients []*ssdb.SSDBClient, proxyName string, reqUrl string) (string, error){
    var err error
    p := """"
    url := """"
    if proxyName != """" {
        p, err = proxy.GetOne(ssdbClients,proxyName)
        if err != nil {
            return url, err
        }
        if strings.HasPrefix(reqUrl, ""https"") {
            url = fmt.Sprintf(""https://%s"", p)
        } else if strings.HasPrefix(reqUrl, ""http"") {
            url = fmt.Sprintf(""http://%s"", p)
        } else {
            return url,errors.New(fmt.Sprintf(""reqUrl %s not valid"", reqUrl))
        }
        return url, err
    }
    return url, err
}

func customProxy(req *http.Request) (*url.URL, error) {
    httpProxy := req.Header.Get(""HttpProxy"")
    if httpProxy == """" {
        return nil, nil
    } else {
        return url.Parse(httpProxy)
    }
}

func GetClient() *http.Client {
    var client http.Client
    client = http.Client{
        Timeout: 15 * time.Second,
    }
    transport :=  http.Transport{
        Proxy: customProxy,
        DisableCompression: false,
        MaxIdleConnsPerHost: 10000,
    }
    client.Transport = &transport
    return &client
}

func structResponse(req *request.HttpRequest, content *http.Response, proxy string) (response.HttpResponse, error) {
    var resp response.HttpResponse
    data, err := ioutil.ReadAll(content.Body)
    if err != nil {
        return resp, err
    }
    header := make(map[string]interface{})
    for k, v := range content.Header {
        if len(v) > 0 {
            header[k] = v[0]
        }
    }
    var encoding string
    encoding = content.Header.Get(""Content-Encoding"")
    resp = response.HttpResponse {
        Request: *req,
        ErrorCode: 0,
        ErrorMsg: """",
        StatusCode: content.StatusCode,
        Reason: content.Status,
        Html: string(data),
        Headers: header,
        Encoding: encoding,
        Url: req.Url,
        CrawlerName: req.CrawlerName,
        ProxyName: req.ProxyName,
        HttpProxy: proxy,
    }
    return resp, err
}

func Send(ssdbClients []*ssdb.SSDBClient, r *request.HttpRequest, httpClient *http.Client) (response.HttpResponse, error) {
    var resp response.HttpResponse
    var err error
    var httpProxy string

    httpProxy, err = getProxy(ssdbClients, r.ProxyName, r.Url)
    if err != nil {
        return resp, err
    }

    req, err := http.NewRequest(r.Method, r.Url, strings.NewReader(r.Data))
    if err != nil {
        return resp, err
    }

    u, err := url.Parse(r.Url)
    if err != nil {
        return resp, err
    }

    defaultHeaders := map[string] string {
        ""User-Agent"": `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) 
        AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36`,
        ""Upgrade-Insecure-Requests"": ""1"",
        ""Connection"": ""keep-alive"",
        ""Accept"": ""text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"",
        ""Accept-Language"": ""zh-CN,zh;q=0.8,en;q=0.6"",
        ""Cache-Control"": ""max-age=0"",
        ""Host"": u.Host,
        ""HttpProxy"": httpProxy,
    }

    for k, v := range defaultHeaders {
        req.Header.Set(k, v)
    }

    for k, v := range r.Headers {
        req.Header.Set(k, fmt.Sprintf(""%v"", v))
    }

    for k, v := range r.Cookies {
        req.Header.Set(""Cookie"", fmt.Sprintf(""%s=%v"", k, v))
    }


    values := req.URL.Query()
    for k, v := range r.Params {
        values.Add(k, fmt.Sprintf(""%v"", v))
    }
    req.URL.RawQuery = values.Encode()

    content, err := httpClient.Do(req)
    if err != nil {
        return resp, err
    }
    defer content.Body.Close()
    resp, err = structResponse(r, content, httpProxy)
    if err != nil {
        return resp, err
    }
    respCookies := make(map[string] interface{})
    if httpClient.Jar != nil {
        cookies := httpClient.Jar.Cookies(req.URL)
        for _, cookie := range cookies {
            respCookies[cookie.Name] = cookie.Value
        }
        resp.Cookies = respCookies
    }
    return resp, err
}
",4283
773,35752532,"func sendRequest(clients []*ssdb.SSDBClient, r *request.HttpRequest, httpClient *http.Client) {
    for {
        resp, err := http.Send(clients, *r, httpClient)
        if err != nil {
            utils.Error.Println(""http send fail "", err.Error())
        } else {
            if resp.StatusCode == 200 {
                utils.Info.Println(""status 200, success"")
            } else {
                utils.Warning.Println(""status "", resp.StatusCode, resp.Reason)
            }
        }
    }
}
func main() {
    httpClient := http.GetClient()
    var wg sync.WaitGroup
    wg.Add(1)
    for i:=0;i<crawlerConsumers;i++ {
        go sendRequest(clients, r, httpClient)
    }
    wg.Wait()
}
",693
774,35752532,"/debug/pprof/

profiles:
0   block
99490   goroutine(This number is growing constantly, very strange)
1640    heap
14  threadcreate

# runtime.MemStats
# Alloc = 210967776
# TotalAlloc = 3673382376
# Sys = 646805032
# Lookups = 29226
# Mallocs = 15590422
# Frees = 14236863
# HeapAlloc = 210967776
# HeapSys = 331415552
# HeapIdle = 72081408
# HeapInuse = 259334144
# HeapReleased = 0
# HeapObjects = 1353559
# Stack = 283049984 / 283049984
# MSpan = 4007136 / 4112384
# MCache = 9664 / 16384
# BuckHashSys = 1575958
# NextGC = 306292818
# PauseNs = [2096153 2554867 2962532 4711468 3373778 3548443 1764893 1961992 2434108 2658626 2627832 2564733 2610212 3278169 2954882 2847604 4443650 3582780 3557718 4201288 4762243 8349689 3812924 5098353 5196422 4494087 5209715 5978150 5060982 4825367 6529020 5738726 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
# NumGC = 32
# EnableGC = true
# DebugGC = false


# runtime.MemStats
# Alloc = 334390488
# TotalAlloc = 7408124464
# Sys = 963748912
# Lookups = 64289
# Mallocs = 31759565
# Frees = 29798637
# HeapAlloc = 334390488
# HeapSys = 536903680
# HeapIdle = 171114496
# HeapInuse = 365789184
# HeapReleased = 0
# HeapObjects = 1960928
# Stack = 381648896 / 381648896
# MSpan = 4958240 / 5160960
# MCache = 9664 / 16384
# BuckHashSys = 1625694
# NextGC = 337299393
# PauseNs = [2096153 2554867 2962532 4711468 3373778 3548443 1764893 1961992 2434108 2658626 2627832 2564733 2610212 3278169 2954882 2847604 4443650 3582780 3557718 4201288 4762243 8349689 3812924 5098353 5196422 4494087 5209715 5978150 5060982 4825367 6529020 5738726 5563959 6997601 6906020 6778559 7592484 7193865 7198439 7815078 7217336 6923856 7127406 7491410 7029097 7757883 6861948 7295746 7245947 9037505 7656431 7322897 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
# NumGC = 52
# EnableGC = true
# DebugGC = false

# runtime.MemStats
# Alloc = 468642296
# TotalAlloc = 25479911160
# Sys = 1185490448
# Lookups = 278984
# Mallocs = 119997794
# Frees = 117189156
# HeapAlloc = 468642296
# HeapSys = 680919040
# HeapIdle = 174424064
# HeapInuse = 506494976
# HeapReleased = 0
# HeapObjects = 2808638
# Stack = 448397312 / 448397312
# MSpan = 6943104 / 7061504
# MCache = 9664 / 16384
# BuckHashSys = 1757422
# NextGC = 485127068
# PauseNs = [2096153 2554867 2962532 4711468 3373778 3548443 1764893 1961992 2434108 2658626 2627832 2564733 2610212 3278169 2954882 2847604 4443650 3582780 3557718 4201288 4762243 8349689 3812924 5098353 5196422 4494087 5209715 5978150 5060982 4825367 6529020 5738726 5563959 6997601 6906020 6778559 7592484 7193865 7198439 7815078 7217336 6923856 7127406 7491410 7029097 7757883 6861948 7295746 7245947 9037505 7656431 7322897 7155298 7288230 8027051 7442561 7528532 8418744 7847097 8791562 7242055 8418159 7677703 8662475 8408315 8562446 8110168 7308570 8593523 7820707 8734530 8981041 8721316 8152324 8390552 8603397 9059668 8153933 7986519 7744819 8491656 8562181 7816543 9145512 7902742 7780778 7636659 13573779 12684501 94808535 9443609 8257986 9072718 9634563 9229626 9449536 8644605 8898286 8499036 13101964 8743251 9119720 9267487 8178551 8444107 8362330 8447271 8558115 8788773 9977627 9058283 8743149 8508649 9099904 9382220 9684119 9789404 9730475 8506223 10363233 9979499 9033233 9634088 9739395 9129433 9122154 8615491 9632523 9314836 9845890 9888849 10034358 10207887 10073912 9892683 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
# NumGC = 135
# EnableGC = true
# DebugGC = false
",4406
775,35752532,"transport :=  http.Transport{
    Proxy: customProxy,
    DisableCompression: false,
    MaxIdleConnsPerHost: 10000,
    Dial: (&net.Dialer{
                Timeout:   15 * time.Second,
                KeepAlive: 15 * time.Second,
            }).Dial,
    TLSHandshakeTimeout: 5 * time.Second,
}
",296
776,35768266,go version go1.5.3 linux/amd64,30
777,35768266,"3259.27kB of 3302.42kB total (98.69%)
Dropped 258 nodes (cum <= 16.51kB)
Showing top 30 nodes out of 91 (cum >= 27.76kB)
      flat  flat%   sum%        cum   cum%
 1552.59kB 47.01% 47.01%  1552.59kB 47.01%  bytes.makeSlice
     584kB 17.68% 64.70%      584kB 17.68%  imagick._Cfunc_GoBytes
  257.38kB  7.79% 72.49%   257.38kB  7.79%  encoding/pem.Decode
  168.11kB  5.09% 77.58%   168.11kB  5.09%  crypto/tls.(*block).reserve
  165.09kB  5.00% 82.58%   389.49kB 11.79%  crypto/x509.parseCertificate
  105.32kB  3.19% 85.77%   105.32kB  3.19%  reflect.unsafe_NewArray
   83.64kB  2.53% 88.30%    83.64kB  2.53%  math/big.nat.make
   75.55kB  2.29% 90.59%    75.55kB  2.29%  net/http.(*Transport).dialConn
   64.02kB  1.94% 92.53%    64.02kB  1.94%  regexp.(*bitState).reset
   43.77kB  1.33% 93.85%    43.77kB  1.33%  crypto/x509.(*CertPool).AddCert
   40.44kB  1.22% 95.08%    40.44kB  1.22%  crypto/x509/pkix.(*Name).FillFromRDNSequence
   40.16kB  1.22% 96.29%    40.16kB  1.22%  encoding/asn1.parsePrintableString
   24.07kB  0.73% 97.02%    24.07kB  0.73%  net/http.newBufioWriterSize
   18.98kB  0.57% 97.60%    18.98kB  0.57%  net/http.newBufioReader
   16.14kB  0.49% 98.09%    64.77kB  1.96%  crypto/tls.(*Conn).readHandshake
   12.01kB  0.36% 98.45%   237.09kB  7.18%  encoding/asn1.parseField
    8.01kB  0.24% 98.69%    91.65kB  2.78%  crypto/x509.parsePublicKey
         0     0% 98.69%   112.33kB  3.40%  bufio.(*Reader).Read
         0     0% 98.69%    80.32kB  2.43%  bufio.(*Reader).fill
         0     0% 98.69%    27.76kB  0.84%  bufio.(*Writer).ReadFrom
         0     0% 98.69%    27.76kB  0.84%  bufio.(*Writer).flush
         0     0% 98.69%  1648.33kB 49.91%  bytes.(*Buffer).ReadFrom
         0     0% 98.69%    16.59kB   0.5%  bytes.(*Buffer).Write
         0     0% 98.69%    16.59kB   0.5%  bytes.(*Buffer).grow
         0     0% 98.69%   843.06kB 25.53%  crypto/tls.(*Conn).Handshake
         0     0% 98.69%   112.33kB  3.40%  crypto/tls.(*Conn).Read
         0     0% 98.69%    27.76kB  0.84%  crypto/tls.(*Conn).Write
         0     0% 98.69%   843.06kB 25.53%  crypto/tls.(*Conn).clientHandshake
         0     0% 98.69%   160.96kB  4.87%  crypto/tls.(*Conn).readRecord
         0     0% 98.69%    27.76kB  0.84%  crypto/tls.(*Conn).writeRecord
",2278
778,35768266,"func main() {       

    imagick.Initialize() 
    defer imagick.Terminate()   

        myMux := http.NewServeMux()
        myMux.HandleFunc(""/"", serveHTTP)       

      if err := http.ListenAndServe("":8082"", myMux); err != nil {
        logFatal(""Error when starting or running http server: %v"", err)
    }      

}

func serveHTTP(w http.ResponseWriter, r *http.Request) {

        var isMaster bool = true        
    var desiredAspectRatio float64 = 1.77   

    if r.RequestURI == ""/favicon.ico"" {
        w.WriteHeader(http.StatusNotFound)
        return
    }

    if len(strings.TrimSpace(r.URL.Query().Get(""ar""))) != 0 {
        desiredAspectRatio, _ = strconv.ParseFloat(r.URL.Query().Get(""ar""), 64)
    }

    if len(strings.TrimSpace(r.URL.Query().Get(""ism""))) != 0 {      
        isMaster, _ = strconv.ParseBool(r.URL.Query().Get(""ism""))
    }   

    imageUrl := strings.ToLower(r.URL.Path[1:])     

    isProcessed := CreateMaster(imageUrl, desiredAspectRatio, isMaster)     

    if isProcessed == false {
        w.WriteHeader(http.StatusNotFound) 
        return
    }

    if !sendResponse(w, r, imageUrl) {
        // w.WriteHeader() is skipped intentionally here, since the response may be already partially created.
        return
    }


    logRequestMessage(r, ""SUCCESS"")     
}


func sendResponse(w http.ResponseWriter, r *http.Request, imageUrl string) bool {

    w.Header().Set(""Content-Type"", ""text/plain"")        

    if _, err := w.Write([]byte(""master created"")); err != nil {
        logRequestError(r, ""Cannot send image from imageUrl=%v to client: %v"", imageUrl, err)
        return false
    }
    return true
}


func CreateMaster(keyName string, desiredAspectRatio float64, isMaster bool) bool {             

    s3Client := s3.New(session.New(), &aws.Config{Region: aws.String(region)})
        params := &s3.GetObjectInput{
        Bucket: aws.String(bucketName),
        Key: aws.String(keyName),
        }

    fmt.Println("" Master creation request for key : "" + keyName)
    out, err := s3Client.GetObject(params)

    if err != nil { 
        return false                                       
    }

    defer out.Body.Close()  
    img, err := ioutil.ReadAll(out.Body)

    if err != nil { 
            return false      
    }                   

    mw := imagick.NewMagickWand()
    defer mw.Destroy()

    err = mw.ReadImageBlob(img)
    if err != nil {  
        return false                   
    }


    if isMaster == false {
        paramsPut := &s3.PutObjectInput{
                    Bucket:         aws.String(masterBucketName),
                    Key:            aws.String(keyName),
                    Body:         bytes.NewReader(mw.GetImageBlob()),
            }

        _, err = s3Client.PutObject(paramsPut)
        if err != nil {
            log.Printf(""Couldn't put the image on s3 : "" + keyName + ""%s\n"", err)       
        }

        return true
    }


        originalWidth := float64(mw.GetImageWidth())
        originalHeight := float64(mw.GetImageHeight())

    imageAspectRatio  := originalWidth / originalHeight
        masterWidth := cwMasterWidth
        masterHeight := cwMasterHeight
        masterAspectRatio := math.Trunc((cwMasterWidth / cwMasterHeight) * 100)/100

    if masterAspectRatio != desiredAspectRatio {           
                    masterAspectRatio = desiredAspectRatio
                }


    pwm := imagick.NewPixelWand()
    defer pwm.Destroy()

    tx := imagick.NewMagickWand()
    defer tx.Destroy()  

    if isMaster == true {               

            var w, h uint = 0, 0
            size := fmt.Sprintf(""%dx%d^+0+0"", w, h) 
                    if imageAspectRatio <= masterAspectRatio {                
                        // trim the height
            w = uint(originalWidth)
            h = (uint(originalWidth / masterAspectRatio))
               size = fmt.Sprintf(""%dx%d^+0+0"", w, h)
                     } else { 
                        // trim the width
            w = uint(originalHeight * masterAspectRatio)
            h = uint(originalHeight)
            size = fmt.Sprintf(""%dx%d^+0+0"", w, h)
                     }

            tx = mw.TransformImage("""", size)        
            tx.SetImageGravity(imagick.GRAVITY_CENTER)
            offsetX := -(int(w) - int(tx.GetImageWidth())) / 2
            offsetY := -(int(h) - int(tx.GetImageHeight())) / 2
            err := tx.ExtentImage(w, h, offsetX, offsetY)

                    if float64(tx.GetImageWidth()) > masterWidth && float64(tx.GetImageHeight()) > masterHeight  {                                        
                        err = tx.ResizeImage(uint(masterWidth), uint(masterHeight), imagick.FILTER_BOX, 1)
            if err != nil {
                log.Printf(""Inside CreateMaster function Couldn't resize the image : "" + keyName + ""%s\n"", err) 
                return false                 
            }                                                           
                    }                                       
                }       

     paramsPut := &s3.PutObjectInput{
                    Bucket:         aws.String(masterBucketName),
                    Key:            aws.String(keyName),
                    Body:         bytes.NewReader(tx.GetImageBlob()),
            }

    _, err = s3Client.PutObject(paramsPut)
    if err != nil {
        log.Printf(""Inside CreateMaster function Couldn't put the image on s3 : "" + keyName + ""%s\n"", err)  
        return false        
    }

    return true
}
",5538
779,35811215,Users struct,12
780,35811215,"controllers/user.go:87: user.create_date undefined (cannot refer to unexported field or method create_date)
controllers/user.go:88: user.update_date undefined (cannot refer to unexported field or method update_date)
controllers/user.go:104: user.user_id undefined (cannot refer to unexported field or method user_id)
controllers/user.go:119: user.update_date undefined (cannot refer to unexported field or method update_date)
controllers/user.go:136: user.user_id undefined (cannot refer to unexported field or method user_id)
controllers/user.go:151: user.update_date undefined (cannot refer to unexported field or method update_date)
controllers/user.go:166: user.user_id undefined (cannot refer to unexported field or method user_id)
",737
781,35811215,"package models


import(

    ""time""
)

    type Users struct {

            user_id                                      int      `json:""user_id"" form:""user_id"" gorm:""column:user_id""`
            user_login                                   string   `json:""user_login"" form:""user_login"" gorm:""column:user_login""` 
            user_email                                   string   `json:""user_email"" form:""user_email"" gorm:""column:user_email""` 
            user_password                                string   `json:""user_password"" form:""user_password"" gorm:""column:user_password""` 
            user_password_salt                           string   `json:""user_password_salt"" form:""user_password_salt"" gorm:""column:user_password_salt""` 
            user_2factor_secret                          string   `json:""user_2factor_secret"" form:""user_2factor_secret"" gorm:""column:user_2factor_secret""`
            user_fullname                                string   `json:""user_fullname"" form:""user_fullname"" gorm:""column:user_fullname""`
            user_description                             string   `json:""user_description"" form:""user_description"" gorm:""column:user_description""`
            user_enabled                                 string   `json:""user_enabled"" form:""user_enabled"" gorm:""column:user_enabled""`
            user_verified                                string   `json:""user_verified"" form:""user_verified"" gorm:""column:user_verified""`
            PublisherInfoID                              int      `json:""PublisherInfoID"" form:""PublisherInfoID"" gorm:""column:PublisherInfoID""`
            DemandCustomerInfoID                         int      `json:""DemandCustomerInfoID"" form:""DemandCustomerInfoID"" gorm:""column:DemandCustomerInfoID""`
            create_date                                  time.Time `json:""create_date"" gorm:""column:create_date""`
            update_date                                  time.Time  `json:""update_date"" gorm:""column:update_date""` 
            user_permission_cache                        string   `json:""user_permission_cache"" form:""user_permission_cache"" gorm:""column:user_permission_cache""`
            user_role                                    int      `json:""user_role"" form:""user_role"" gorm:""column:user_role""`

        }
",2284
782,35811215,"   package controllers

    import (
        ""time""

      ""github.com/op/go-logging""
        ""github.com/gin-gonic/gin""
        ""github.com/jinzhu/gorm""
      _ ""github.com/go-sql-driver/mysql""

        ""../models""
    )

    var loguser = logging.MustGetLogger(""AdsAPI"")

    type AdsControllerUser struct {
        DB gorm.DB
    }

    func (ac *AdsControllerUser) SetDB(d gorm.DB) {
        ac.DB = d
        ac.DB.LogMode(true)
    }
    func (ac *AdsControllerUser) CreateUsers(c *gin.Context) {

      var user models.Users

      // This will infer what binder to use depending on the content-type header.
      c.Bind(&user)

        // Update Timestamps
        user.create_date = time.Now()
        user.update_date = time.Now()

        err := ac.DB.Save(&user)
        if err != nil {
            loguser.Debugf(""Error while creating a user, the error is '%v'"", err)
            res := gin.H{
                    ""status"": ""403"",
                    ""error"": ""Unable to create user"",
            }
            c.JSON(404, res)
            return
        }

        content := gin.H{
                ""status"": ""201"",
                ""result"": ""Success"",
                ""UserID"": user.user_id,
            }

      c.Writer.Header().Set(""Content-Type"", ""application/json"")
      c.JSON(201, content)
    }

func (ac *AdsControllerUser) UpdateUsers(c *gin.Context) {
    // Grab id
    id := c.Params.ByName(""id"")
  var user models.Users

  c.Bind(&user)

    // Update Timestamps
    user.update_date = time.Now()

    //err := ac.DB.Model(&models.auth_User).Where(""user_id = ?"", id).Updates(&cm)
    err := ac.DB.Where(""user_id = ?"", id).Updates(&user)
    if err != nil {
        loguser.Debugf(""Error while updating a user, the error is '%v'"", err)
        res := gin.H{
                ""status"": ""403"",
                ""error"": ""Unable to update user"",
        }
        c.JSON(403, res)
        return
    }

    content := gin.H{
            ""status"": ""201"",
            ""result"": ""Success"",
            ""UserID"": user.user_id,
        }

    c.Writer.Header().Set(""Content-Type"", ""application/json"")
    c.JSON(201, content)
}

func (ac *AdsControllerUser) DeleteUsers(c *gin.Context) {
    // Grab id
    id := c.Params.ByName(""id"")
  var user models.Users

  c.Bind(&user)

    // Update Timestamps
    user.update_date = time.Now()

    err := ac.DB.Where(""user_id = ?"", id).Delete(&user)
    if err != nil {
        loguser.Debugf(""Error while deleting a user, the error is '%v'"", err)
        res := gin.H{
                ""status"": ""403"",
                ""error"": ""Unable to delete user"",
        }
        c.JSON(403, res)
        return
    }

    content := gin.H {
            ""result"": ""Success"",
            ""UserID"": user.user_id,
        }

  c.Writer.Header().Set(""Content-Type"", ""application/json"")
  c.JSON(201, content)
}
",2860
783,36062509,gorethink,9
784,36062509,"func GetQuotesByUser(idUser string) []Quote{
    ids:=GetQuoteIdsByUser(idUser)
    if (len(ids)>0){
        result,err:=r.Table(""quote"").GetAll(ids...).Run(config.Connection())
        defer result.Close()

        if err!=nil{
            fmt.Println(err)
            return []Quote{}
        }
        var quotes []Quote
        err=result.All(""es)
        if err!=nil{
            fmt.Println(err)
            return []Quote{}
        }
        fmt.Println(quotes)
        return quotes
    } else{
        return []Quote{}
    }
}
",536
785,36062509,"import (
    ""corate/util""
    ""corate/model""
    ""github.com/fatih/structs""
    ""net/http""
)

func DashboardHandler(w http.ResponseWriter,r *http.Request){
    files:=[]string{""base"",""dashboard""}
    session,_:=util.GlobalSessions.SessionStart(w,r)
    defer session.SessionRelease(w)
    quotes:=model.GetQuotesByUser(""ca8a2e14-f65b-43b1-b655-97d7c29190ec"")
    q:=structs.Map(quotes)
    util.RenderTemplate(w,q,files...)
}
",427
786,36062509,main,4
787,36062509,"func main(){

    // Setup database

    config.Setupdb()

    // Initialize session manager

    util.InitSessionManager()

    // Serve static folder

    http.Handle(""/public/"",http.StripPrefix(""/public/"",http.FileServer(http.Dir(""public""))))

    // Setup routers and middlewares

    http.HandleFunc(""/"",route.IndexHandler)
    http.HandleFunc(""/login"",route.GoogleLoginHandler)
    http.HandleFunc(""/auth/google"",route.GoogleCallbackHandler)

    http.Handle(""/dashboard"",negroni.New(
        negroni.HandlerFunc(route.IsAuthenticated),
        negroni.Wrap(http.HandlerFunc(route.DashboardHandler)),
    ))

    // Start listening

    http.ListenAndServe("":3000"",nil)
}
",678
788,36062509,astaxie/beego/session,21
789,36062509,"import (
    ""github.com/astaxie/beego/session""
)

var (
    GlobalSessions *session.Manager
)

func InitSessionManager() {
    GlobalSessions, _ = session.NewManager(""memory"", `{""cookieName"":""gosessionid"",""gclifetime"":3600}`)
    go GlobalSessions.GC()
}
",256
790,36062509,dashboard,9
791,36062509,DashboardHandler,16
792,36062509,GetQuotesByUser,15
793,36062509,"http: panic serving 127.0.0.1:51229: not struct
goroutine 84 [running]:
net/http.(*conn).serve.func1(0xc82015fc00)
    /home/kuro/.gvm/gos/go1.6/src/net/http/server.go:1389 +0xc1
panic(0x7f58e0, 0xc8204489f0)
    /home/kuro/.gvm/gos/go1.6/src/runtime/panic.go:426 +0x4e9
github.com/fatih/structs.strctVal(0x7de700, 0xc82045a340, 0x0, 0x0, 0x0)
    /home/kuro/Workspace/Go/src/github.com/fatih/structs/structs.go:426 +0x136
github.com/fatih/structs.New(0x7de700, 0xc82045a340, 0x0)
    /home/kuro/Workspace/Go/src/github.com/fatih/structs/structs.go:30 +0x2f
github.com/fatih/structs.Map(0x7de700, 0xc82045a340, 0xc82045a340)
    /home/kuro/Workspace/Go/src/github.com/fatih/structs/structs.go:435 +0x2b
corate/route.DashboardHandler(0x7fe2c2e6dfc8, 0xc8202d49c0, 0xc820372460)
    /home/kuro/Workspace/Go/src/corate/route/user.go:19 +0x190
net/http.HandlerFunc.ServeHTTP(0xa47820, 0x7fe2c2e6dfc8, 0xc8202d49c0, 0xc820372460)
    /home/kuro/.gvm/gos/go1.6/src/net/http/server.go:1618 +0x3a
github.com/codegangsta/negroni.Wrap.func1(0x7fe2c2e6dfc8, 0xc8202d49c0, 0xc820372460, 0xc8203f0a60)
    /home/kuro/Workspace/Go/src/github.com/codegangsta/negroni/negroni.go:41 +0x50
github.com/codegangsta/negroni.HandlerFunc.ServeHTTP(0xc82012ace0, 0x7fe2c2e6dfc8, 0xc8202d49c0, 0xc820372460, 0xc8203f0a60)
    /home/kuro/Workspace/Go/src/github.com/codegangsta/negroni/negroni.go:24 +0x44
github.com/codegangsta/negroni.middleware.ServeHTTP(0x7fe2c2e6ade0, 0xc82012ace0, 0xc82012ad40, 0x7fe2c2e6dfc8, 0xc8202d49c0, 0xc820372460)
    /home/kuro/Workspace/Go/src/github.com/codegangsta/negroni/negroni.go:33 +0xaa
github.com/codegangsta/negroni.(middleware).ServeHTTP-fm(0x7fe2c2e6dfc8, 0xc8202d49c0, 0xc820372460)
    /home/kuro/Workspace/Go/src/github.com/codegangsta/negroni/negroni.go:33 +0x53
corate/route.IsAuthenticated(0x7fe2c2e6dfc8, 0xc8202d49c0, 0xc820372460, 0xc8203f0a00)
    /home/kuro/Workspace/Go/src/corate/route/isAuthenticated.go:14 +0x174
github.com/codegangsta/negroni.HandlerFunc.ServeHTTP(0xa47840, 0x7fe2c2e6dfc8, 0xc8202d49c0, 0xc820372460, 0xc8203f0a00)
    /home/kuro/Workspace/Go/src/github.com/codegangsta/negroni/negroni.go:24 +0x44
github.com/codegangsta/negroni.middleware.ServeHTTP(0x7fe2c2e6ade0, 0xa47840, 0xc82012ad20, 0x7fe2c2e6dfc8, 0xc8202d49c0, 0xc820372460)
    /home/kuro/Workspace/Go/src/github.com/codegangsta/negroni/negroni.go:33 +0xaa
github.com/codegangsta/negroni.(*Negroni).ServeHTTP(0xc8200cfe90, 0x7fe2c2e6af70, 0xc820154680, 0xc820372460)
    /home/kuro/Workspace/Go/src/github.com/codegangsta/negroni/negroni.go:73 +0x122
net/http.(*ServeMux).ServeHTTP(0xc820013740, 0x7fe2c2e6af70, 0xc820154680, 0xc820372460)
    /home/kuro/.gvm/gos/go1.6/src/net/http/server.go:1910 +0x17d
net/http.serverHandler.ServeHTTP(0xc82000e380, 0x7fe2c2e6af70, 0xc820154680, 0xc820372460)
    /home/kuro/.gvm/gos/go1.6/src/net/http/server.go:2081 +0x19e
net/http.(*conn).serve(0xc82015fc00)
    /home/kuro/.gvm/gos/go1.6/src/net/http/server.go:1472 +0xf2e
created by net/http.(*Server).Serve
    /home/kuro/.gvm/gos/go1.6/src/net/http/server.go:2137 +0x44e
",3078
794,36062509,fatih/structs,13
795,36062509,fatih/structs,13
796,36062878,"

    package main

    import (
            ""fmt""
            ""golang.org/x/net/websocket""
            ""log""
    )

    var url = ""ws://10.0.1.19:5000/data/websocket""

    func main() {
            ws, err := websocket.Dial(url, """", origin)
            if err != nil {
                    log.Fatal(err)
            }

            var msg = make([]byte, 512)
            _, err = ws.Read(msg)
            if err != nil {
                    log.Fatal(err)
            }
            fmt.Printf(""Receive: %s\n"", msg)
    }

",523
797,36062878,"package main

import (
    ""fmt""
    ""golang.org/x/net/websocket""
    // ""log""
    ""time""
)

var origin = ""http://localhost""

type url struct {
    host string
}

func processUrl(host string, messages chan []byte) {
    client, err := websocket.Dial(host, """", origin)
    if err != nil {
        // log.Printf(""dial:"", err)
    }
    // Clean up on exit from this goroutine
    defer client.Close()
    // Loop reading messages. Send each message to the channel.
    for {
        var msg = make([]byte, 512)
        _, err = client.Read(msg)
        if err != nil {
            // log.Fatal(""read:"", err)
            return
        }
        messages <- msg
    }
}

func main() {

    // Create an arry of hosts to read websockets from
    urls := []string{
        ""ws://10.0.1.90:3000/data/websocket"",
        ""ws://10.0.2.90:3000/data/websocket"",
        ""ws://10.0.3.90:3000/data/websocket"",
    }

    // Create channel to receive messages from all connections
    messages := make(chan []byte)

    // Run a goroutine for each URL that you want to dial.
    for _, host := range urls {
        go processUrl(host, messages)
    }

    // Print all messages received from the goroutines.
    for msg := range messages {
        fmt.Printf(""%d %s\n"", time.Now().Unix(), msg)
    }

}
",1290
798,36062878,"
    {
        ""src_city"":""Wayne"",
        ""dest_city"":""Amsterdam"",
        ""src_country"":""US"",
        ""dest_country"":""NL"",
        ""type"":""view""
    }
",153
799,36062878,"

    goroutine 72 [IO wait]:
    net.runtime_pollWait(0x7f356149b208, 0x72, 0x0)
        /usr/lib/go/src/pkg/runtime/netpoll.goc:146 +0x66
    net.(*pollDesc).Wait(0xc20804e610, 0x72, 0x0, 0x0)
        /usr/lib/go/src/pkg/net/fd_poll_runtime.go:84 +0x46
    net.(*pollDesc).WaitRead(0xc20804e610, 0x0, 0x0)
        /usr/lib/go/src/pkg/net/fd_poll_runtime.go:89 +0x42
    net.(*netFD).Read(0xc20804e5b0, 0xc2080d1000, 0x1000, 0x1000, 0x0, 0x7f3561498418, 0xb)
        /usr/lib/go/src/pkg/net/fd_unix.go:242 +0x34c
    net.(*conn).Read(0xc20803a150, 0xc2080d1000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
        /usr/lib/go/src/pkg/net/net.go:122 +0xe7
    bufio.(*Reader).fill(0xc208005140)
        /usr/lib/go/src/pkg/bufio/bufio.go:97 +0x1b3
    bufio.(*Reader).ReadByte(0xc208005140, 0xc2080f22d0, 0x0, 0x0)
        /usr/lib/go/src/pkg/bufio/bufio.go:199 +0x7e
    golang.org/x/net/websocket.hybiFrameReaderFactory.NewFrameReader(0xc208005140, 0x7f356149b908, 0xc2080f22d0, 0x0, 0x0)
        /home/shat/go/src/golang.org/x/net/websocket/hybi.go:126 +0xd7
    golang.org/x/net/websocket.(*Conn).Read(0xc2080d7050, 0xc2080f4c00, 0x200, 0x200, 0x0, 0x0, 0x0)
        /home/shat/go/src/golang.org/x/net/websocket/websocket.go:178 +0xfb
    main.processUrl(0x705010, 0x26, 0xc208004180)
        /home/shat/go/src/github.com/sh4t/scansock/main.go:26 +0x107
    created by main.main
        /home/shat/go/src/github.com/sh4t/scansock/main.go:101 +0x126

    goroutine 73 [IO wait, 2 minutes]:
    net.runtime_pollWait(0x7f356149b158, 0x72, 0x0)
        /usr/lib/go/src/pkg/runtime/netpoll.goc:146 +0x66
    net.(*pollDesc).Wait(0xc20804e760, 0x72, 0x0, 0x0)
        /usr/lib/go/src/pkg/net/fd_poll_runtime.go:84 +0x46
    net.(*pollDesc).WaitRead(0xc20804e760, 0x0, 0x0)
        /usr/lib/go/src/pkg/net/fd_poll_runtime.go:89 +0x42
    net.(*netFD).Read(0xc20804e700, 0xc208015000, 0x1000, 0x1000, 0x0, 0x7f3561498418, 0xb)
        /usr/lib/go/src/pkg/net/fd_unix.go:242 +0x34c
    net.(*conn).Read(0xc20803a018, 0xc208015000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
        /usr/lib/go/src/pkg/net/net.go:122 +0xe7
    bufio.(*Reader).fill(0xc2080042a0)
        /usr/lib/go/src/pkg/bufio/bufio.go:97 +0x1b3
    bufio.(*Reader).ReadByte(0xc2080042a0, 0x67d6e0, 0x0, 0x0)
        /usr/lib/go/src/pkg/bufio/bufio.go:199 +0x7e
    golang.org/x/net/websocket.hybiFrameReaderFactory.NewFrameReader(0xc2080042a0, 0x7f356149b908, 0xc2080196d0, 0x0, 0x0)
        /home/shat/go/src/golang.org/x/net/websocket/hybi.go:126 +0xd7
    golang.org/x/net/websocket.(*Conn).Read(0xc208024240, 0xc208080000, 0x200, 0x200, 0x0, 0x0, 0x0)
        /home/shat/go/src/golang.org/x/net/websocket/websocket.go:178 +0xfb
    main.processUrl(0x705190, 0x25, 0xc208004180)
        /home/shat/go/src/github.com/sh4t/scansock/main.go:26 +0x107
    created by main.main
        /home/shat/go/src/github.com/sh4t/scansock/main.go:101 +0x126

    goroutine 74 [IO wait]:
    net.runtime_pollWait(0x7f356149b0a8, 0x72, 0x0)
        /usr/lib/go/src/pkg/runtime/netpoll.goc:146 +0x66
    net.(*pollDesc).Wait(0xc20804e8b0, 0x72, 0x0, 0x0)
        /usr/lib/go/src/pkg/net/fd_poll_runtime.go:84 +0x46
    net.(*pollDesc).WaitRead(0xc20804e8b0, 0x0, 0x0)
        /usr/lib/go/src/pkg/net/fd_poll_runtime.go:89 +0x42
    net.(*netFD).Read(0xc20804e850, 0xc2080d9000, 0x1000, 0x1000, 0x0, 0x7f3561498418, 0xb)
        /usr/lib/go/src/pkg/net/fd_unix.go:242 +0x34c
    net.(*conn).Read(0xc20803a160, 0xc2080d9000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
        /usr/lib/go/src/pkg/net/net.go:122 +0xe7
    bufio.(*Reader).fill(0xc208005200)
        /usr/lib/go/src/pkg/bufio/bufio.go:97 +0x1b3
    bufio.(*Reader).ReadByte(0xc208005200, 0xc2080f2320, 0x0, 0x0)
        /usr/lib/go/src/pkg/bufio/bufio.go:199 +0x7e
    golang.org/x/net/websocket.hybiFrameReaderFactory.NewFrameReader(0xc208005200, 0x7f356149b908, 0xc2080f2320, 0x0, 0x0)
        /home/shat/go/src/golang.org/x/net/websocket/hybi.go:126 +0xd7
    golang.org/x/net/websocket.(*Conn).Read(0xc2080d70e0, 0xc2080f4e00, 0x200, 0x200, 0x0, 0x0, 0x0)
        /home/shat/go/src/golang.org/x/net/websocket/websocket.go:178 +0xfb
    main.processUrl(0x7052d0, 0x27, 0xc208004180)
        /home/shat/go/src/github.com/sh4t/scansock/main.go:26 +0x107
    created by main.main
        /home/shat/go/src/github.com/sh4t/scansock/main.go:101 +0x126

",4326
800,36299902,"{ 
    ""animationStates"": {
        ""idle"": {
            ""numFrames"": 4,
            ""frames"": [
                {
                    ""frame"": {""x"":43,""y"":106,""w"":12,""h"":15},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":1,""y"":143,""w"":12,""h"":14},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":71,""y"":132,""w"":12,""h"":14},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":15,""y"":126,""w"":12,""h"":15},
                    ""rotated"": true 
                }
            ]
        },
        ""run"": {
            ""numFrames"": 10,
            ""frames"": [
                {
                    ""frame"": {""x"":73,""y"":82,""w"":12,""h"":15},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":29,""y"":125,""w"":12,""h"":15},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":33,""y"":36,""w"":12,""h"":16},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":1,""y"":107,""w"":12,""h"":16},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":1,""y"":89,""w"":12,""h"":16},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":17,""y"":54,""w"":12,""h"":16},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":1,""y"":125,""w"":12,""h"":16},
                    ""rotated"": false
                }
                {
                    ""frame"": {""x"":15,""y"":143,""w"":12,""h"":14},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":29,""y"":142,""w"":12,""h"":14},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":72,""y"":99,""w"":12,""h"":15},
                    ""rotated"": false
                }
            ]
        },
        ""roll"": {
            ""numFrames"": 5,
            ""frames"": [
                {
                    ""frame"": {""x"":71,""y"":116,""w"":12,""h"":14},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":71,""y"":148,""w"":12,""h"":10},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":73,""y"":47,""w"":12,""h"":15},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":57,""y"":147,""w"":12,""h"":11},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":29,""y"":108,""w"":12,""h"":15},
                    ""rotated"": false
                }
            ]
        },
        ""jump"": {
            ""numFrames"": 1,
            ""frames"": [
                {
                    ""frame"": {""x"":45,""y"":54,""w"":12,""h"":16},
                    ""rotated"": false
                }
            ]
        },
        ""fall"": {
            ""numFrames"": 1,
            ""frames"": [
                {
                    ""frame"": {""x"":29,""y"":90,""w"":12,""h"":16},
                    ""rotated"": false
                }
            ]
        },
        ""shoot"": {
            ""numFrames"": 5,
            ""frames"": [
                {
                    ""frame"": {""x"":37,""y"":1,""w"":14,""h"":15},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":17,""y"":37,""w"":14,""h"":15},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":1,""y"":37,""w"":14,""h"":16},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":19,""y"":19,""w"":14,""h"":15},
                    ""rotated"": false
                },
                {
                    ""frame"": {""x"":1,""y"":55,""w"":14,""h"":15},
                    ""rotated"": false
                }
            ]
        }
    }
}
",4089
801,36299902,"package main

import (
    ""encoding/json""
    ""io/ioutil""
)

type AnimationFrame struct {
    Frame struct {
        X int `json:""x""`
        Y int `json:""y""`
        W int `json:""w""`
        H int `json:""h""`
    } `json:""frame""`
    Rotated bool `json:""rotated""`
}

type Animation struct {
    NumFrames int `json:""numFrames""`
    Frames []AnimationFrame `json:""frames""` 
} 

type StateList struct {
    Actions map[string]Animation `json:""animationStates""`
}

func NewAnimation (file string) *StateList {
    list := make(map[string]Animation)
    s := &StateList{list}
    buff, err := ioutil.ReadFile(file)
    check(err)
    json.Unmarshal([]byte(buff), &s)
    return s 
}

func check (e error) {
    if e != nil {
        panic(e)
    }
}
",747
802,36410397,google.maps.DirectionsRenderer();,33
803,36410397,"package main

import (
    ""log""

    ""googlemaps.github.io/maps""
    ""github.com/kr/pretty""
    ""golang.org/x/net/context""
)

func checkForError(err error) {
    if err != nil{
        log.Fatal(err)
    }
}

func main() {
    c, err := maps.NewClient(maps.WithAPIKey(""myapikey""))
    checkForError(err)

    r := &maps.DirectionsRequest{
        Origin:      ""Hollywood, FL"",
        Destination: ""Davie, FL"",
    }

    resp, _, err := c.Directions(context.Background(), r)
    checkForError(err)

    // render := 

    pretty.Println(resp)
}
",547
804,36410397,"[]maps.Route{
    {
        Summary: ""I-95 N and I-595 W"",
        Legs:    {
            &maps.Leg{
                Steps: {
                    &maps.Step{
                        HTMLInstructions: ""Head east on Hollywood Blvd toward S Dixie Hwy"",
                        Distance:         maps.Distance{HumanReadable:""217 ft"", Meters:66},
                        Duration:         23000000000,
                        StartLocation:    maps.LatLng{Lat:26.0112983, Lng:-80.1494921},
                        EndLocation:      maps.LatLng{Lat:26.0113264, Lng:-80.14883689999999},
                        Polyline:         maps.Polyline{Points:""siw}CheehN?e@Cq@Ai@""},
                        Steps:            nil,
                        TransitDetails:   (*maps.TransitDetails)(nil),
                        TravelMode:       ""DRIVING"",
                    },
                    &maps.Step{
                        HTMLInstructions: ""Make a U-turn at S 21st Ave"",
                        Distance:         maps.Distance{HumanReadable:""0.6 mi"", Meters:886},
                        Duration:         90000000000,
                        StartLocation:    maps.LatLng{Lat:26.0113264, Lng:-80.14883689999999},
                        EndLocation:      maps.LatLng{Lat:26.0111533, Lng:-80.1575536},
                        Polyline:         maps.Polyline{Points:""yiw}CfaehNU??h@?r@BpAJVDfFHlOBfDDlCB|C@z@H~F""},
                        Steps:            nil,
                        TransitDetails:   (*maps.TransitDetails)(nil),
                        TravelMode:       ""DRIVING"",
                    },
                    &maps.Step{
                        HTMLInstructions: ""At the traffic circle, take the 3rd exit and stay on Hollywood Blvd"",
                        Distance:         maps.Distance{HumanReadable:""0.6 mi"", Meters:937},
                        Duration:         148000000000,
                        StartLocation:    maps.LatLng{Lat:26.0111533, Lng:-80.1575536},
                        EndLocation:      maps.LatLng{Lat:26.011037, Lng:-80.16587369999999},
                        Polyline:         maps.Polyline{Points:""uhw}CtwfhNGJAB?H?D?J?FAD?DCDCDCDSNUD]N_@XY\\Ub@GRGPIh@Ch@Bd@BJDXN`@DFLVVZ\\T\\P`@JNJHFFHBFBN@F?JBpB?d@@`ABpD@zB?nAB`C@bB@fAAt@AlA""},
                        Steps:            nil,
                        TransitDetails:   (*maps.TransitDetails)(nil),
                        TravelMode:       ""DRIVING"",
                    },
                    &maps.Step{
                        HTMLInstructions: ""Turn right to merge onto I-95 N toward W Palm Beach"",
                        Distance:         maps.Distance{HumanReadable:""4.4 mi"", Meters:7063},
                        Duration:         277000000000,
                        StartLocation:    maps.LatLng{Lat:26.011037, Lng:-80.16587369999999},
                        EndLocation:      maps.LatLng{Lat:26.0732058, Lng:-80.1671851},
                        Polyline:         maps.Polyline{Points:""_hw}CtkhhNKVCHEJGJCBEBEBIBQDkBB_BJq@DkBR_Ff@_CT[DM@IBGFKJy@FyAFuAB_CD_B@U@cCBE?A?}BByQLqBA{BGuBQeBQyAQo@KoBc@aBa@sA]iHyBa@MoA[wBm@g@K_Ds@cB]aB[eB[qAScBU{BWMCWCsBWg@G}Ks@cHe@aQkA{CUeCOyCSsE[wDW{CSsKu@qAIEA_@COAA?gBM_@Co@E[Ck@CUAs@E]AWA]A]?q@AU?a@?O?Y?kA?s@Bk@@o@Bm@@wEPcKZc@@w@BiAFi@Bq@Dw@Hk@FoBRw@JSD[DmAR}@P}Dt@oCh@yFdAgB\\A@g@HIBA?eCd@cDn@y@Ns@NiB\\_ARu@LaBZyDt@qCh@}Bf@oDx@sBf@}A`@qAZcBb@aBb@qEpA""},
                        Steps:            nil,
                        TransitDetails:   (*maps.TransitDetails)(nil),
                        TravelMode:       ""DRIVING"",
                    },
                    &maps.Step{
                        HTMLInstructions: ""Take exit 24 for Interstate 595 toward Port Everglades/Ft Laud-Hlwd/International Airport"",
                        Distance:         maps.Distance{HumanReadable:""0.3 mi"", Meters:416},
                        Duration:         17000000000,
                        StartLocation:    maps.LatLng{Lat:26.0732058, Lng:-80.1671851},
                        EndLocation:      maps.LatLng{Lat:26.0768262, Lng:-80.1680758},
                        Polyline:         maps.Polyline{Points:""qlc~C|shhNKIAAAAA?C?E?E?A?MBc@H_@FqB^uAVoAT{@Na@F[Hi@HYFyAXm@L""},
                        Steps:            nil,
                        TransitDetails:   (*maps.TransitDetails)(nil),
                        TravelMode:       ""DRIVING"",
                    },
                    &maps.Step{
                        HTMLInstructions: ""Keep left at the fork, follow signs for I-595 W/I-75/Florida's Turnpike and merge onto I-595 W"",
                        Distance:         maps.Distance{HumanReadable:""4.4 mi"", Meters:7161},
                        Duration:         255000000000,
                        StartLocation:    maps.LatLng{Lat:26.0768262, Lng:-80.1680758},
                        EndLocation:      maps.LatLng{Lat:26.0947648, Lng:-80.2317655},
                        Polyline:         maps.Polyline{Points:""ecd~CnyhhN[H[D_@Dm@FWBMBU@u@D_@@]@q@@W?]?MAU?[AYAQAe@C_@CWAk@CWAUAUAM?e@?W@Q@WBSBQBI@KBMBUHOFSFWNMHC@A@MHa@ZIFGF]`@IN[f@_@|@IVGT?BEREPCRALAHAF?BAB?FAJ?RAL?F?\\?F?D?N?RDlABn@Bx@@r@@t@@t@AV?h@A`@Ap@Cb@AZ?N?LATCh@CZ?@?@?@@@?@?@@BDFMhBIlAKdBGt@[rEe@zHAFk@vIE`@C`@UlDSbD?FMbECh@A|@C|A?`ACtEDxLD~PBvFDbE@vB?tF?xB@z@ClA?X?@?DG|BGx@IjAGx@Er@MtAMlAMdA[rBQhAUjA[zAWfA[vAYbAc@zAkAtCKXSj@wAhDiC`GiBdE_@|@]x@s@jBs@lBsAnDoAhEw@vCe@xB{@rD[nAsDjS]hBOn@e@~Bc@zBo@rCUpASfAu@fFUjBIj@MhAKp@S|ASzAS`BIv@]nCMbA_@bCQhAAF?FO~@y@zFeAbHyAtJ""},
                        Steps:            nil,
                        TransitDetails:   (*maps.TransitDetails)(nil),
                        TravelMode:       ""DRIVING"",
                    },
                    &maps.Step{
                        HTMLInstructions: ""Take exit 6 toward FL-817/University Dr"",
                        Distance:         maps.Distance{HumanReadable:""0.4 mi"", Meters:566},
                        Duration:         20000000000,
                        StartLocation:    maps.LatLng{Lat:26.0947648, Lng:-80.2317655},
                        EndLocation:      maps.LatLng{Lat:26.0963976, Lng:-80.2371076},
                        Polyline:         maps.Polyline{Points:""gsg~CpguhNM\\Ot@qBfKs@tD{@nEKd@S|@Id@Kj@?@ABABMH""},
                        Steps:            nil,
                        TransitDetails:   (*maps.TransitDetails)(nil),
                        TravelMode:       ""DRIVING"",
                    },
                    &maps.Step{
                        HTMLInstructions: ""Merge onto FL-84 W"",
                        Distance:         maps.Distance{HumanReadable:""0.8 mi"", Meters:1365},
                        Duration:         96000000000,
                        StartLocation:    maps.LatLng{Lat:26.0963976, Lng:-80.2371076},
                        EndLocation:      maps.LatLng{Lat:26.0994367, Lng:-80.25034819999999},
                        Polyline:         maps.Polyline{Points:""o}g~C|hvhNq@~EG`@_@`C_@jCWrBc@dDi@zDyAnJUvAM|@WnBMz@I|@OlAQ|AWrBQ|AKv@SxAWzASpAUnAYpAI`@""},
                        Steps:            nil,
                        TransitDetails:   (*maps.TransitDetails)(nil),
                        TravelMode:       ""DRIVING"",
                    },
                    &maps.Step{
                        HTMLInstructions: ""Turn left onto S University Dr"",
                        Distance:         maps.Distance{HumanReadable:""1.7 mi"", Meters:2808},
                        Duration:         279000000000,
                        StartLocation:    maps.LatLng{Lat:26.0994367, Lng:-80.25034819999999},
                        EndLocation:      maps.LatLng{Lat:26.07466, Lng:-80.25254079999999},
                        Polyline:         maps.Polyline{Points:""oph~Ct{xhNKf@t@ND@h@Hd@JRBD@bBZfANl@Jx@JtALr@HjBLd@@pBJR@~BDT?z@AhBAt@A`CCfAArAC~@AfAAfBETA~GIlBCvHK|EGbFIr@AvDGR?jB?dC?N?pCDpCLl@FlBRPBl@Fh@HxCf@hGpAn@NzB`@VBx@LtAN~@Ht@FrAJ""},
                        Steps:            nil,
                        TransitDetails:   (*maps.TransitDetails)(nil),
                        TravelMode:       ""DRIVING"",
                    },
                    &maps.Step{
                        HTMLInstructions: ""Make a U-turnDestination will be on the left"",
                        Distance:         maps.Distance{HumanReadable:""0.2 mi"", Meters:242},
                        Duration:         38000000000,
                        StartLocation:    maps.LatLng{Lat:26.07466, Lng:-80.25254079999999},
                        EndLocation:      maps.LatLng{Lat:26.0765145, Lng:-80.25211829999999},
                        Polyline:         maps.Polyline{Points:""suc~CjiyhN@i@g@EwAIC?sAMYCm@Iy@M[E@T""},
                        Steps:            nil,
                        TransitDetails:   (*maps.TransitDetails)(nil),
                        TravelMode:       ""DRIVING"",
                    },
                },
                Distance:          maps.Distance{HumanReadable:""13.4 mi"", Meters:21510},
                Duration:          1243000000000,
                DurationInTraffic: 0,
                ArrivalTime:       time.Time{},
                DepartureTime:     time.Time{},
                StartLocation:     maps.LatLng{Lat:26.0112983, Lng:-80.1494921},
                EndLocation:       maps.LatLng{Lat:26.0765145, Lng:-80.25211829999999},
                StartAddress:      ""Hollywood, FL, USA"",
                EndAddress:        ""Davie, FL, USA"",
            },
        },
        WaypointOrder:    {},
        OverviewPolyline: maps.Polyline{Points:""siw}CheehNCwAAi@U??|ABpAJVNtVHtHDxEH~FGJAL?PEXGJSNUD]N_@XY\\Ub@Od@Ih@Ch@Fp@Tz@R^t@p@\\P`@JXRJPDVDdFH~NBjDCbC]x@YNQDkBBqCPgNvAWDSRsCNuEH_GF_CByQLqBA{BGuBQ_Ec@_Do@uD_AkIgCgEiAgE_AeEy@wDo@_Fm@yC_@eM{@eZqBoSuAqZsBsE[sCMeCEaB?{EHmTp@}ETkGp@{Dp@oTbEmMdCaIzAkI~AmH`BgKhCsHtBMKMAy@L{M`C}Dx@aCVyBLeCByAEoBKoBI}ABgAL_AX}@b@{@n@e@h@e@v@i@tAGXQfACTEfBDvBJrEAxCG`CInBBHDFMhBUrDkAlQkAhQSjDQlFIrLJx^HzLBbPChBGbCQdCMlB[bDi@xDg@tCs@bDu@zCc@zAkAtC_@dAkJnTyEbMgC`JaBlH[nAsDjSm@xCoC`NiAnH_@vCaAtHiAlJs@|EiAzH_DxS]rAeD|PeBxIOt@MHq@~Eg@bDeC`RuCtRy@dHiAbJk@lDo@`DUhAz@PhBZjDj@fBVhCVpCNdCLtCD|IIbHIjOUlX_@jEGpF?`DDpCLl@F~BVvAPxCf@hGpAjDp@pAPtCXhCR@i@g@E{AImBQgBW[E@T""},
        Bounds:           maps.LatLngBounds{
            NorthEast: maps.LatLng{Lat:26.0994988, Lng:-80.14883689999999},
            SouthWest: maps.LatLng{Lat:26.0110222, Lng:-80.25254079999999},
        },
        Copyrights: ""Map data ©2016 Google"",
        Warnings:   {},
    },
}
",10456
805,36474438,"package main

import (
    ""fmt""
    ""io/ioutil""
    ""net/http""
    ""os""
)

// http://www.whoscored.com/Matches/614052/Live is the match for
// Eveton vs Manchester
const match_address = ""http://www.whoscored.com/Matches/""

// the max id we get
const max_id = 300
const num_workers = 10

// function that get the bytes of the match id from the website
func match_fetch(matchid int) {
    url := fmt.Sprintf(""%s%d/Live"", match_address, matchid)

    resp, err := http.Get(url)
    if err != nil {
        fmt.Println(err)
        return
    }

    // if we sucessfully got a response, store the
    // body in memory
    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    // write the body to memory
    pwd, _ := os.Getwd()
    filepath := fmt.Sprintf(""%s/match_data/%d"", pwd, matchid)
    err = ioutil.WriteFile(filepath, body, 0644)
    if err != nil {
        fmt.Println(err)
        return
    }
}

// data type to send to the workers,
// last means this job is the last one
// matchid is the match id to be fetched
// a matchid of -1 means don't fetch a match
type job struct {
    last    bool
    matchid int
}

func create_worker(jobs chan job) {
    for {
        next_job := <-jobs
        if next_job.matchid != -1 {
            match_fetch(next_job.matchid)
        }
        if next_job.last {
            return
        }
    }
}

func main() {
    // do the eveton match as a reference
    match_fetch(614052)

    var joblist [num_workers]chan job
    var v int

    for i := 0; i < num_workers; i++ {
        job_chan := make(chan job)
        joblist[i] = job_chan
        go create_worker(job_chan)
    }
    for i := 0; i < max_id; i = i + num_workers {
        for index, c := range joblist {
            if i+index < max_id {
                v = i + index
            } else {
                v = -1
            }
            c <- job{false, v}
        }
    }
    for _, c := range joblist {
        c <- job{true, -1}
    }
}
",2038
806,36474438,"(function() { 

var z="""";var bfor (var i=0;i<b.length;i+=2){z=z+parseInt(b.substring(i, i+2), 16)+"","";}z = z.substring(0,z.length-1); eval(eval('String.fromCharCode('+z+')'));})();
",2565
807,36479646,"package main

import (
    ""fmt""
    ""sync""
    ""strconv""
    ""time""
)

/*
 * Data and Types
 * ===================================================================================
 */
var fetched map[string]bool    // Map of fetched URLs -> true: fetched
var lock sync.Mutex            // locks write access to fetched-map
var urlChan chan string        // Channel to Write fetched URL

type Fetcher interface {
    // Fetch returns the body of URL and
    // a slice of URLs found on that page.
    Fetch(url string) (body string, urls []string, err error)
}

// fakeFetcher is Fetcher that returns canned results.
type fakeFetcher map[string]*fakeResult

type fakeResult struct {
    body string
    urls []string
}

// fetcher is a populated fakeFetcher.
var fetcher = fakeFetcher{
    ""http://golang.org/"": &fakeResult{
        ""The Go Programming Language"",
        []string{
            ""http://golang.org/pkg/"",
            ""http://golang.org/cmd/"",
        },
    },
    ""http://golang.org/pkg/"": &fakeResult{
        ""Packages"",
        []string{
            ""http://golang.org/"",
            ""http://golang.org/cmd/"",
            ""http://golang.org/pkg/fmt/"",
            ""http://golang.org/pkg/os/"",
        },
    },
    ""http://golang.org/pkg/fmt/"": &fakeResult{
        ""Package fmt"",
        []string{
            ""http://golang.org/"",
            ""http://golang.org/pkg/"",
        },
    },
    ""http://golang.org/pkg/os/"": &fakeResult{
        ""Package os"",
        []string{
            ""http://golang.org/"",
            ""http://golang.org/pkg/"",
        },
    },
}
/*
 * End Data and Types
 * ===================================================================================
 */

/*
 * Webcrawler implementation
 * ===================================================================================
 */
func waitUntilDone(d int) {

    fMap := make(map[string]string)

    for i := 0; i < d; i++ {
        fMap[<-urlChan] = strconv.Itoa(time.Now().Nanosecond())
    }

    time.Sleep(time.Millisecond * 100)

    fmt.Println()
    fmt.Println(""Fetch stats"")
    fmt.Println(""=================================================================="")
    for k, v := range fMap {
        fmt.Println(""Fetched: "" + k + "" after: "" + v + "" ns"")
    }
    fmt.Println(""=================================================================="")
    fmt.Println()

}

func (f fakeFetcher) Fetch(url string) (string, []string, error) {
    var str string
    var strArr [] string
    var err error

    if fetched[url] {
        // already fetched?
        str, strArr, err = """", nil, fmt.Errorf(""already fetched: %s this will be ignored"", url)

    }else if res, ok := f[url]; ok {
        str, strArr, err = res.body, res.urls, nil
        urlChan <- url

    }else {
        str, strArr, err = """", nil, fmt.Errorf(""not found: %s"", url)
    }

    return str, strArr, err
}

// Crawl uses fetcher to recursively crawl
// pages starting with url, to a maximum of depth.
func Crawl(url string, depth int, fetcher Fetcher, goRoutNum int) {

    if depth <= 0 {
        return
    }

    // Start fetching url concurrently
    fmt.Println(""Goroutine "" + strconv.Itoa(goRoutNum) + "" is fetching: "" + url)
    body, urls, err := fetcher.Fetch(url)

    if err != nil {
        fmt.Println(err)
        return
    }

    // Lock map
    lock.Lock()
    fetched[url] = true

    // Unlock
    lock.Unlock()

    fmt.Printf(""found: %s %q\n"", url, body)

    for i, u := range urls {
        go func(url string, goRoutNumber int) {
            Crawl(url, depth - 1, fetcher, goRoutNumber)
        }(u, i + 1)
    }
    return
}

func StartCrawling(url string, depth int, fetcher Fetcher) {

    fmt.Println()
    fmt.Println(""Start crawling ..."")
    fmt.Println(""=================================================================="")

    go func(u string, i int, f Fetcher) {
        Crawl(u, i, f, 0)

    }(url, depth, fetcher)
}
/*
 * End Webcrawler implementation
 * ===================================================================================
 */


/*
 * Main
 * ====================================================================
 */
func main() {

    depth := len(fetcher)
    fetched = make(map[string]bool)
    url := ""http://golang.org/""
    urlChan = make(chan string, len(fetcher))
    go StartCrawling(url, depth, fetcher)
    waitUntilDone(depth)

}

/*
 * End Main
 * =====================================================================
 */
",4460
808,36492006,"go version
heroku login
go get github.com/heroku/go-getting-started/cmd/...
cd %GOPATH%/src/github.com/heroku/go-getting-started
git remote -v
heroku create
git push heroku master
heroku open
heroku ps:scale web=1

go get -u github.com/tools/godep
godep restore
go get -u github.com/russross/blackfriday

notepad Godeps/Godeps.json
notepad cmd\go-getting-started\main.go
godep save ./...


go install ./...
heroku local

git add -A .
git commit -m ""Markdown demo dependency""
git push heroku master
heroku open mark
",515
809,36492006,"Microsoft Windows [Version 10.0.10240]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Windows\system32>go version
go version go1.6 windows/amd64

C:\Windows\system32>heroku login
Enter your Heroku credentials.
Email: 01.mandar@gmail.com
Password (typing will be hidden):
Logged in as 01.mandar@gmail.com

C:\Windows\system32>go get github.com/heroku/go-getting-started/cmd/...

C:\Windows\system32>cd %GOPATH%/src/github.com/heroku/go-getting-started

c:\Go\src\github.com\heroku\go-getting-started>git remote -v
origin  https://github.com/heroku/go-getting-started (fetch)
origin  https://github.com/heroku/go-getting-started (push)

c:\Go\src\github.com\heroku\go-getting-started>heroku create
Creating app... done, stack is cedar-14
https://lit-lake-35772.herokuapp.com/ | https://git.heroku.com/lit-lake-35772.git

c:\Go\src\github.com\heroku\go-getting-started>git push heroku master
Counting objects: 353, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (225/225), done.
Writing objects: 100% (353/353), 203.07 KiB | 0 bytes/s, done.
Total 353 (delta 70), reused 353 (delta 70)
remote: Compressing source files... done.
remote: Building source:
remote:
remote: -----> Go app detected
remote: -----> Checking Godeps/Godeps.json file.
remote: -----> Installing go1.6... done
remote: -----> Running: go install -v -tags heroku ./...
remote: github.com/heroku/go-getting-started/vendor/gopkg.in/bluesuncorp/validator.v5
remote: github.com/heroku/go-getting-started/vendor/github.com/gin-gonic/gin/render
remote: github.com/heroku/go-getting-started/vendor/github.com/manucorporat/sse
remote: github.com/heroku/go-getting-started/vendor/github.com/mattn/go-colorable
remote: github.com/heroku/go-getting-started/vendor/golang.org/x/net/context
remote: github.com/heroku/go-getting-started/vendor/github.com/gin-gonic/gin/binding
remote: github.com/heroku/go-getting-started/vendor/github.com/mattn/go-isatty
remote: github.com/heroku/go-getting-started/vendor/github.com/gin-gonic/gin
remote: github.com/heroku/go-getting-started/cmd/go-getting-started
remote: -----> Discovering process types
remote:        Procfile declares types -> web
remote:
remote: -----> Compressing...
remote:        Done: 3.1M
remote: -----> Launching...
remote:        Released v3
remote:        https://lit-lake-35772.herokuapp.com/ deployed to Heroku
remote:
remote: Verifying deploy... done.
To https://git.heroku.com/lit-lake-35772.git
 * [new branch]      master -> master

c:\Go\src\github.com\heroku\go-getting-started>heroku open

c:\Go\src\github.com\heroku\go-getting-started>go get -u github.com/tools/godep

c:\Go\src\github.com\heroku\go-getting-started> godep restore

c:\Go\src\github.com\heroku\go-getting-started>
c:\Go\src\github.com\heroku\go-getting-started>go get -u github.com/russross/blackfriday

c:\Go\src\github.com\heroku\go-getting-started>notepad Godeps/Godeps.json

c:\Go\src\github.com\heroku\go-getting-started>notepad cmd\go-getting-started\main.go

c:\Go\src\github.com\heroku\go-getting-started>godep save ./...

c:\Go\src\github.com\heroku\go-getting-started>notepad Godeps/Godeps.json

c:\Go\src\github.com\heroku\go-getting-started>
c:\Go\src\github.com\heroku\go-getting-started>go install ./...

c:\Go\src\github.com\heroku\go-getting-started>heroku local
[OKAY] Loaded ENV .env File as KEY=VALUE Format
[OKAY] Trimming display Output to 98 Columns
10:01:41 AM web.1 |  [GIN-debug] [WARNING] Running in ""debug"" mode. Switch to ""release"" mode in production.
10:01:41 AM web.1 |   - using env:      export GIN_MODE=release
10:01:41 AM web.1 |   - using code:     gin.SetMode(gin.ReleaseMode)
10:01:41 AM web.1 |  [GIN-debug] GET   /static/*filepath         --> github.com/heroku/go-getting-started/vendor/github…
10:01:41 AM web.1 |  [GIN-debug] HEAD  /static/*filepath         --> github.com/heroku/go-getting-started/vendor/github…
10:01:41 AM web.1 |  [GIN-debug] GET   /mark                     --> main.main.func1 (2 handlers)
10:01:41 AM web.1 |  [GIN-debug] Listening and serving HTTP on :5000
10:01:56 AM web.1 |  [GIN] 2016/04/08 - 10:01:56 | 404 |             0 | [::1]:50713 |   GET     /
10:02:15 AM web.1 |  [GIN] 2016/04/08 - 10:02:15 | 200 |             0 | [::1]:50714 |   GET     /mark
[WARN] Interrupted by User
[DONE] Killing all processes with signal  SIGINT
10:02:32 AM web.1 Exited Abnormally
Terminate batch job (Y/N)? y

c:\Go\src\github.com\heroku\go-getting-started>git add -A .
warning: LF will be replaced by CRLF in Godeps/Godeps.json.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in Godeps/Readme.
The file will have its original line endings in your working directory.

c:\Go\src\github.com\heroku\go-getting-started>git commit -m ""Markdown demo dependency""
[master warning: LF will be replaced by CRLF in Godeps/Godeps.json.
The file will have its original line endings in your working directory.
44f22d6] Markdown demo dependency
warning: LF will be replaced by CRLF in Godeps/Godeps.json.
The file will have its original line endings in your working directory.
 12 files changed, 5500 insertions(+), 7 deletions(-)
 create mode 100644 vendor/github.com/russross/blackfriday/.gitignore
 create mode 100644 vendor/github.com/russross/blackfriday/.travis.yml
 create mode 100644 vendor/github.com/russross/blackfriday/LICENSE.txt
 create mode 100644 vendor/github.com/russross/blackfriday/README.md
 create mode 100644 vendor/github.com/russross/blackfriday/block.go
 create mode 100644 vendor/github.com/russross/blackfriday/html.go
 create mode 100644 vendor/github.com/russross/blackfriday/inline.go
 create mode 100644 vendor/github.com/russross/blackfriday/latex.go
 create mode 100644 vendor/github.com/russross/blackfriday/markdown.go
 create mode 100644 vendor/github.com/russross/blackfriday/smartypants.go

c:\Go\src\github.com\heroku\go-getting-started>git push heroku master
Counting objects: 21, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (17/17), done.
Writing objects: 100% (21/21), 39.28 KiB | 0 bytes/s, done.
Total 21 (delta 3), reused 9 (delta 0)
remote: Compressing source files... done.
remote: Building source:
remote:
remote: -----> Using set buildpack heroku/go
remote: -----> Go app detected
remote: -----> Checking Godeps/Godeps.json file.
remote: -----> Using go1.6
remote: -----> Running: go install -v -tags heroku ./...
remote: vendor/github.com/russross/blackfriday/block.go:19:2: cannot find package ""github.com/shurcooL/sanitized_anchor_name"" in any of:
remote:         /tmp/build_36053c1b0568bf24dcdcf90c103b1104/.heroku/go/src/github.com/heroku/go-getting-started/vendor/github.com/shurcooL/sanitized_anchor_name (vendor tree)
remote:         /app/tmp/cache/go1.6/go/src/github.com/shurcooL/sanitized_anchor_name (from $GOROOT)
remote:         /tmp/build_36053c1b0568bf24dcdcf90c103b1104/.heroku/go/src/github.com/shurcooL/sanitized_anchor_name (from $GOPATH)
remote:
remote:  !     Push rejected, failed to compile Go app
remote:
remote: Verifying deploy....
remote:
remote: !       Push rejected to lit-lake-35772.
remote:
To https://git.heroku.com/lit-lake-35772.git
 ! [remote rejected] master -> master (pre-receive hook declined)
error: failed to push some refs to 'https://git.heroku.com/lit-lake-35772.git'

c:\Go\src\github.com\heroku\go-getting-started>heroku open mark

c:\Go\src\github.com\heroku\go-getting-started>
",7445
810,36540246,"package serviceclient

import (
    ""bytes""
    ""io/ioutil""
    ""net""
    ""net/http""
    ""time""
    ""log""
)

const(
    HTTP_DIAL_TIME_OUT          = 5    //seconds
    HTTP_TLS_HANDSHAKE_TIME_OUT = 5
    HTTP_CLIENT_TIME_OUT        = 10
)

// RequestService requests the api through the service URL
func RequestService(methodType string, serviceURL string, data string, contentType string) string {
    log.Printf(""Request string %s"", data)
    dataBytes := bytes.NewBufferString(data)
    req, err := http.NewRequest(methodType, serviceURL, dataBytes)
    if err != nil {
        log.Printf(""Client request creation issue"")
    }
    req.Header.Set(""Content-Type"", contentType)

    client := getHTTPClient()
    res, err := client.Do(req)
    log.Printf(""Response Object original : %s"", res)
    if err != nil {
        log.Printf(""Could not make the client request"")
    }
    defer res.Body.Close()
    responseBytes, err := ioutil.ReadAll(res.Body)
    if err != nil {
        log.Printf(""Response string conversion issue"")
    }
    responseString := string(responseBytes[:])
    return responseString
}

func getHTTPClient() *http.Client {
    var netTransport = &http.Transport{
          Dial: (&net.Dialer{
            Timeout: HTTP_DIAL_TIME_OUT * time.Second,
          }).Dial,
          TLSHandshakeTimeout: HTTP_TLS_HANDSHAKE_TIME_OUT * time.Second,
        }
    var client = &http.Client{
          Timeout: time.Second * HTTP_CLIENT_TIME_OUT,
          Transport: netTransport,
        }
    return client
}
",1527
811,36540246,request,7
812,36540246,undefined,9
813,36540246,"Got in appserver ops api  &{GET /api/services/appserverops/ HTTP/1.1 1 1 map[Content-Type:[application/json] Accept-Encoding:[gzip] User-Agent:[Go-http-client/1.1] Content-Length:[160]] 0xc820398180 160 [] false localhost:8081 map[] map[]  map[] [::1]:57455 /api/services/appserverops/  }
appserveropslogic :: Getappserver() :: request Wg
appserveropslogic :: Getappserver() :: response &{{127 https://www.youtube.com/watch?v=0SMoqP9eCwM https://www.youtube.com/embed/0SMoqP9eCwM 1} {44 www.github.com/docker 1} 2016-04-09 05:38:32 {} 2016-04-09 05:38:32 [0xc82000c4c0 0xc8200d4da0 0xc82000c600] {1005   0 0    0    []} false}

Got in appserver ops api  &{GET /api/services/appserverops/ HTTP/1.1 1 1 map[User-Agent:[Go-http-client/1.1] Content-Length:[167] Content-Type:[application/json] Accept-Encoding:[gzip]] 0xc8203f4800 167 [] false localhost:8081 map[] map[]  map[] [::1]:57455 /api/services/appserverops/  }
appserveropslogic :: Getappserver() :: request undefined
appserveropslogic :: Getappserver() :: response 

Got in appserver ops api  &{GET /api/services/appserverops/ HTTP/1.1 1 1 map[User-Agent:[Go-http-client/1.1] Content-Length:[167] Content-Type:[application/json] Accept-Encoding:[gzip]] 0xc8203f4880 167 [] false localhost:8081 map[] map[]  map[] [::1]:57455 /api/services/appserverops/  }
appserveropslogic :: Getappserver() :: request undefined
appserveropslogic :: Getappserver() :: response 

Got in appserver ops api  &{GET /api/services/appserverops/ HTTP/1.1 1 1 map[User-Agent:[Go-http-client/1.1] Content-Length:[167] Content-Type:[application/json] Accept-Encoding:[gzip]] 0xc8203f49c0 167 [] false localhost:8081 map[] map[]  map[] [::1]:57455 /api/services/appserverops/  }
appserveropslogic :: Getappserver() :: request undefined
appserveropslogic :: Getappserver() :: response 

Got in appserver ops api  &{GET /api/services/appserverops/ HTTP/1.1 1 1 map[User-Agent:[Go-http-client/1.1] Content-Length:[167] Content-Type:[application/json] Accept-Encoding:[gzip]] 0xc8203f4a40 167 [] false localhost:8081 map[] map[]  map[] [::1]:57455 /api/services/appserverops/  }
appserveropslogic :: Getappserver() :: request undefined
appserveropslogic :: Getappserver() :: response 

Got in appserver ops api  &{GET /api/services/appserverops/ HTTP/1.1 1 1 map[User-Agent:[Go-http-client/1.1] Content-Length:[167] Content-Type:[application/json] Accept-Encoding:[gzip]] 0xc8203f4b00 167 [] false localhost:8081 map[] map[]  map[] [::1]:57455 /api/services/appserverops/  }
appserveropslogic :: Getappserver() :: request undefined
appserveropslogic :: Getappserver() :: response 

Got in appserver ops api  &{GET /api/services/appserverops/ HTTP/1.1 1 1 map[User-Agent:[Go-http-client/1.1] Content-Length:[167] Content-Type:[application/json] Accept-Encoding:[gzip]] 0xc8203f4c00 167 [] false localhost:8081 map[] map[]  map[] [::1]:57455 /api/services/appserverops/  }
appserveropslogic :: Getappserver() :: request undefined
appserveropslogic :: Getappserver() :: response 

Got in appserver ops api  &{GET /api/services/appserverops/ HTTP/1.1 1 1 map[User-Agent:[Go-http-client/1.1] Content-Length:[167] Content-Type:[application/json] Accept-Encoding:[gzip]] 0xc8203f4c80 167 [] false localhost:8081 map[] map[]  map[] [::1]:57455 /api/services/appserverops/  }
appserveropslogic :: Getappserver() :: request undefined
appserveropslogic :: Getappserver() :: response 
",3399
814,36591069,"437
new map 0   -603977536
address&{[ 0x7fafdc0009f0 0x7fafdc000b00]}  0x7fafdc0008c0 0x7fafdc0008c8 0x7fafdc0008d0
     &{1 0 0x7fafdc000900} &{1 0 0x7fafdc000a10} &{1 0 0x7fafdc000b20}
rgc map finish
438
new map 0   -603977536
address&{[ 0x7fafdc0009f0 0x7fafdc000b00]}  0x7fafdc0008c0 0x7fafdc0008c8 0x7fafdc0008d0
     &{1 0 0x7fafdc000900} &{1 0 0x7fafdc000a10} &{1 0 0x7fafdc000b20}
rgc map finish
439
new map 0   -603977536
address&{[ 0x7fafdc0009f0 0x7fafdc000b00]}  0x7fafdc0008c0 0x7fafdc0008c8 0x7fafdc0008d0

     &{1 0 0x7fafdc000900} &{1 0 0x7fafdc000a10} &{1 0 0x7fafdc000b20}
rgc map finish
440
new map 0   -603977536
address&{[ 0x7fafdc0009f0 0x7fafdc000b00]}  0x7fafdc0008c0 0x7fafdc0008c8 0x7fafdc0008d0

     &{1 0 0x7fafdc000900} &{1 0 0x7fafdc000a10} &{1 0 0x7fafdc000b20}
rgc map finish
441
new map 0   -536868672

fatal error: bad pointer in write barrier

runtime stack:
runtime.throw(0x53d200, 0x1c)
    /home/map/.jumbo/lib/go/src/runtime/panic.go:530 +0x90
runtime.writebarrierptr_nostore.func1()
    /home/map/.jumbo/lib/go/src/runtime/mbarrier.go:157 +0x2c
runtime.systemstack(0xc820024a00)
    /home/map/.jumbo/lib/go/src/runtime/asm_amd64.s:291 +0x79
runtime.mstart()
    /home/map/.jumbo/lib/go/src/runtime/proc.go:1048

goroutine 1 [running]:
runtime.systemstack_switch()
    /home/map/.jumbo/lib/go/src/runtime/asm_amd64.s:245 fp=0xc82009ebd8 sp=0xc82009ebd0
runtime.writebarrierptr_nostore(0xc82030e010, 0x20)
    /home/map/.jumbo/lib/go/src/runtime/mbarrier.go:157 +0x83 fp=0xc82009ebf0 sp=0xc82009ebd8
runtime.heapBitsBulkBarrier(0xc82030e000, 0x18)
    /home/map/.jumbo/lib/go/src/runtime/mbitmap.go:437 +0x201 fp=0xc82009ec88 sp=0xc82009ebf0
runtime.typedmemmove(0x4fa700, 0xc82030e000, 0x7fafe00008c0)
    /home/map/.jumbo/lib/go/src/runtime/mbarrier.go:197 +0x98 fp=0xc82009ecb8 sp=0xc82009ec88
reflect.typedmemmove(0x4fa700, 0xc82030e000, 0x7fafe00008c0)
    /home/map/.jumbo/lib/go/src/runtime/mbarrier.go:202 +0x35 fp=0xc82009ecd8 sp=0xc82009ecb8
reflect.packEface(0x4fa700, 0x7fafe00008c0, 0x199, 0x0, 0x0)
    /home/map/.jumbo/lib/go/src/reflect/value.go:113 +0x120 fp=0xc82009ed48 sp=0xc82009ecd8
reflect.valueInterface(0x4fa700, 0x7fafe00008c0, 0x199, 0x1, 0x0, 0x0)
    /home/map/.jumbo/lib/go/src/reflect/value.go:938 +0x1ec fp=0xc82009eda0 sp=0xc82009ed48
reflect.Value.Interface(0x4fa700, 0x7fafe00008c0, 0x199, 0x0, 0x0)
    /home/map/.jumbo/lib/go/src/reflect/value.go:908 +0x48 fp=0xc82009edd8 sp=0xc82009eda0
fmt.(*pp).printValue(0xc82040b380, 0x4fa700, 0x7fafe00008c0, 0x199, 0x7faf00000076, 0x1, 0x0)
    /home/map/.jumbo/lib/go/src/fmt/print.go:842 +0x372 fp=0xc82009eec8 sp=0xc82009edd8
fmt.(*pp).printReflectValue(0xc82040b380, 0x4cc980, 0x7fafe00008c0, 0x16, 0x76, 0x0, 0xc82001cd00)
    /home/map/.jumbo/lib/go/src/fmt/print.go:1009 +0x351e fp=0xc82009f680 sp=0xc82009eec8
fmt.(*pp).printArg(0xc82040b380, 0x4cc980, 0x7fafe00008c0, 0x76, 0x0, 0xc82009f800)
    /home/map/.jumbo/lib/go/src/fmt/print.go:810 +0x540 fp=0xc82009f808 sp=0xc82009f680
fmt.(*pp).doPrint(0xc82040b380, 0xc82009fdf8, 0x2, 0x2, 0x400000)
    /home/map/.jumbo/lib/go/src/fmt/print.go:1273 +0x24d fp=0xc82009f908 sp=0xc82009f808
fmt.Fprint(0x7faff5a401c0, 0xc820036010, 0xc82009fdf8, 0x2, 0x2, 0x40d75e, 0x0, 0x0)
    /home/map/.jumbo/lib/go/src/fmt/print.go:222 +0x67 fp=0xc82009f950 sp=0xc82009f908
fmt.Print(0xc82009fdf8, 0x2, 0x2, 0x4d6ac0, 0x0, 0x0)
    /home/map/.jumbo/lib/go/src/fmt/print.go:232 +0x73 fp=0xc82009f9a8 sp=0xc82009f950
services/newrgc.GetRgcService(0x54cb60, 0x49, 0xc8200aa330, 0x0, 0x0)
    /home/map/zhanghuaizhi/tmpwork/2/nbserver/src/services/newrgc/mrgc.go:78 +0x390 fp=0xc82009fea0 sp=0xc82009f9a8
main.main()
    /home/map/zhanghuaizhi/tmpwork/2/nbserver/src/services/newrgc/test/ttt.go:219 +0x163 fp=0xc82009ff40 sp=0xc82009fea0
runtime.main()
    /home/map/.jumbo/lib/go/src/runtime/proc.go:188 +0x2b0 fp=0xc82009ff90 sp=0xc82009ff40
runtime.goexit()
    /home/map/.jumbo/lib/go/src/runtime/asm_amd64.s:1998 +0x1 fp=0xc82009ff98 sp=0xc82009ff90

goroutine 17 [syscall, locked to thread]:
runtime.goexit()
    /home/map/.jumbo/lib/go/src/runtime/asm_amd64.s:1998 +0x1
",4135
815,36591069,437,3
816,36591069,new map 0 -603977536,20
817,36591069,NewRgcMap,9
818,36591069,"address&{[ 0x7fafdc0009f0 0x7fafdc000b00]}     0x7fafdc0008c0 0x7fafdc0008c8 0x7fafdc0008d0
         &{1 0 0x7fafdc000900} &{1 0 0x7fafdc000a10} &{1 0 0x7fafdc000b20}",166
819,36591069,"30 type RgcService struct {
31     maps *C.struct_CRgcMap
32 }    

74 func GetRgcService(cfgFile string) (svc *RgcService, err error) {
75     svc = new(RgcService)
76     // Init the skip list
77     C.NewRgcMap(&svc.maps)
78     fmt.Print(""address"", svc.maps)
79     //fmt.Println(""\t"", svc.maps.sl[0], svc.maps.sl[1], svc.maps.sl[2])
80     fmt.Println(""\t"", &svc.maps.sl[0], &svc.maps.sl[1], &svc.maps.sl[2])
81     C.skiplist_init(unsafe.Pointer(&svc.maps.sl[0]))
82     C.skiplist_init(unsafe.Pointer(&svc.maps.sl[1]))
83     C.skiplist_init(unsafe.Pointer(&svc.maps.sl[2]))
84     fmt.Println(""\t"", svc.maps.sl[0], svc.maps.sl[1], svc.maps.sl[2])
",655
820,36591069,C.NewRgcMap(&svc.maps),22
821,36591069,NewRgcMap,9
822,36591069,"39 void NewRgcMap(CRgcMap** rgcmap) {
40     *rgcmap = NULL;
41     printf(""new map %d\t"", *rgcmap);
42     *rgcmap = (CRgcMap*)malloc(sizeof(CRgcMap));
43     printf(""%d\n"", *rgcmap);
44     while(*rgcmap == NULL) {
45         *rgcmap = (CRgcMap*)malloc(sizeof(CRgcMap));
46     }
",282
823,36591069,rgcmap,6
824,36591069,new map 0 -603977536,20
825,36591069,new map -536868672,18
826,36591069,new map 0 xxxxx1,16
827,36591069,new map 0 xxxxx2,16
828,36591069,valgrind,8
829,36591069,"int main() {
    CRgcMap map;
    int num = 0;
    for(num = 0; num < 10000; num++) {
        skiplist_init(&map.sl[0]);
        skiplist_init(&map.sl[1]);
        skiplist_init(&map.sl[2]);
        int i = 0;
        for(i = 0; i < 100; i++) {
            skiplist_insert(map.sl[0], i, i); 
            skiplist_insert(map.sl[1], i, i); 
            //skiplist_insert(map.sl[2], i, i);
        }   

        skiplist_test(map.sl[0]);
        skiplist_test(map.sl[1]);
        skiplist_test(map.sl[2]);
    }
}
",511
830,36591069,valgrind,8
831,36732212,"package main

import (
    ""log""
    ""regexp""
)

func main() {
    st := `{{redirect|Einstein|other uses|Albert Einstein (disambiguation)|and|Einstein (disambiguation)}}
        {{pp-semi-indef}}
        {{pp-move-indef}}
        {{Good article}}
        {{Infobox scientist
        | name       = Albert Einstein
        | image       = Einstein 1921 by F Schmutzer - restoration.jpg
        | caption     = Albert Einstein in 1921
        | birth_date  = {{Birth date|df=yes|1879|3|14}}
        | birth_place = [[Ulm]], [[Kingdom of Württemberg]], [[German Empire]]
        | death_date  = {{Death date and age|df=yes|1955|4|18|1879|3|14}}
        | death_place = {{nowrap|[[Princeton, New Jersey]], U.S.}}
        | children    = [[Lieserl Einstein|""Lieserl""]] (1902–1903?)[[Hans Albert Einstein|Hans Albert]] (1904–1973)[[Eduard Einstein|Eduard ""Tete""]] (1910–1965)
        | spouse      = [[Mileva Marić]] (1903–1919){{nowrap|[[Elsa Löwenthal]] (1919–1936)}}
        | residence   = Germany, Italy, Switzerland, Austria (today: [[Czech Republic]]), Belgium, United States
        | citizenship = {{Plainlist|
        * [[Kingdom of Württemberg]] (1879–1896)
        * [[Statelessness|Stateless]] (1896–1901)
        * [[Switzerland]] (1901–1955)
        * Austria of the [[Austro-Hungarian Empire]] (1911–1912)
        * Germany (1914–1933)
        * United States (1940–1955)
        }}
        | ethnicity  = Jewish
        | fields    = [[Physics]], [[philosophy]]
        | workplaces = {{Plainlist|
        * [[Swiss Patent Office]] ([[Bern]]) (1902–1909)
        * [[University of Bern]] (1908–1909)
        * [[University of Zurich]] (1909–1911)
        * [[Karl-Ferdinands-Universität|Charles University in Prague]] (1911–1912)
        * [[ETH Zurich]] (1912–1914)
        * [[Prussian Academy of Sciences]] (1914–1933)
        * [[Humboldt University of Berlin]] (1914–1917)
        * [[Kaiser Wilhelm Institute]] (director, 1917–1933)
        * [[German Physical Society]] (president, 1916–1918)
        * [[Leiden University]] (visits, 1920–)
        * [[Institute for Advanced Study]] (1933–1955)
        * [[Caltech]] (visits, 1931–1933)
        }}
        | alma_mater = {{Plainlist|
        * [[ETH Zurich|Swiss Federal Polytechnic]] (1896–1900; B.A., 1900)
        * [[University of Zurich]] (Ph.D., 1905)
        }}
        | doctoral_advisor  = [[Alfred Kleiner]]
        | thesis_title      = Eine neue Bestimmung der Moleküldimensionen (A New Determination of Molecular Dimensions)
        | thesis_url        = http://e-collection.library.ethz.ch/eserv/eth:30378/eth-30378-01.pdf
        | thesis_year       = 1905
        | academic_advisors = [[Heinrich Friedrich Weber]]
        | influenced  = {{Plainlist|
        * [[Ernst G. Straus]]
        * [[Nathan Rosen]]
        * [[Leó Szilárd]]
        }}
        | known_for = {{Plainlist|
        * [[General relativity]] and [[special relativity]]
        * [[Photoelectric effect]]
        * ''[[Mass–energy equivalence|E=mc2]]''
        * Theory of [[Brownian motion]]
        * [[Einstein field equations]]
        * [[Bose–Einstein statistics]]
        * [[Bose–Einstein condensate]]
        * [[Gravitational wave]]
        * [[Cosmological constant]]
        * [[Classical unified field theories|Unified field theory]]
        * [[EPR paradox]]
        }}
        | awards = {{Plainlist|
        * [[Barnard Medal for Meritorious Service to Science|Barnard Medal]] (1920)
        * [[Nobel Prize in Physics]] (1921)
        * [[Matteucci Medal]] (1921)
        * [[ForMemRS]] (1921)
        * [[Copley Medal]] (1925)
        * [[Max Planck Medal]] (1929)
        * [[Time 100: The Most Important People of the Century|''Time'' Person of the Century]] (1999)
        }}
        | signature = Albert Einstein signature 1934.svg
    }}
    '''Albert Einstein''' ({{IPAc-en|ˈ|aɪ|n|s|t|aɪ|n}};{{cite book|last=Wells|first=John|authorlink=John C. Wells|title=Longman Pronunciation Dictionary|publisher=Pearson Longman|edition=3rd|date=April 3, 2008|isbn=1-4058-8118-6}} {{IPA-de|ˈalbɛɐ̯t ˈaɪnʃtaɪn|lang|Albert Einstein german.ogg}}; 14 March 1879 – 18 April 1955) was a German-born
     [[theoretical physicist]]. He developed the [[general theory of relativity]], one of the two pillars of [[modern physics]] (alongside [[quantum mechanics]]).{{cite journal | last1 = Whittaker | first1 = E. | authorlink = E. T. Whittaker| doi = 10.1098/rsbm.1955.0005 | title = Albert Einstein. 1879–1955 | journal = [[Biographical Memoirs of Fellows of the Royal Society]] | volume = 1 | pages = 37–67 | date = 1 November 1955| jstor = 769242}}{{cite book|author1=Fujia Yang|author2=Joseph H. Hamilton|title=Modern Atomic and Nuclear Physics|date=2010|publisher=World Scientific|isbn=978-981-4277-16-7}}{{rp|274}} Einstein's work is also known for its influence on the [[philosophy of science]].{{Citation |title=Einstein's Philosophy of Science |url=http://plato.stanford.edu/entries/einstein-philscience/#IntWasEinEpiOpp |we......
    `

    re := regexp.MustCompile(`{{Infobox(?s:.*?)}}`)
    log.Println(re.FindAllStringSubmatch(st, -1))

}
",5192
832,36732212,"m[""name""] = ""Albert Einstein""
m[""image""] = ""Einstein....""
...
...
m[""death_date""] = ""{{Death date and age|df=yes|1955|4|18|1879|3|14}}""
...
...
",144
833,36732212,"[[{{Infobox scientist
        | name       = Albert Einstein
        | image       = Einstein 1921 by F Schmutzer - restoration.jpg
        | caption     = Albert Einstein in 1921
        | birth_date  = {{Birth date|df=yes|1879|3|14}}]]
",238
834,36732212,"https://en.wikipedia.org/w/api.php?action=query&titles=Albert%20Einstein&prop=revisions&rvprop=content&format=json
",115
835,36732212,"(?=\{Infobox)(\{([^{}]|(?1))*\})
",33
836,36732212,"panic: regexp: Compile(`(?=\{Infobox)(\{([^{}]|(?1))*\})`): error parsing regexp: invalid or unsupported Perl syntax: `(?=`
",124
837,36746256,"package main

import (
    ""flag""
    ""github.com/Shopify/sarama""
    ""log""
    ""os""
    ""fmt""
    ""strings""
    ""github.com/hpcloud/tail""
    ""github.com/spf13/viper""
    //""io/ioutil""
    ""reflect""
)



func produce(producer sarama.SyncProducer, cfg *sarama.Config, brokers *string, topic string, logger *log.Logger, log string, t *tail.Tail){
    logger.Printf(""Entering produce"")
    logger.Println(strings.Split(*brokers, "",""))
    logger.Println(reflect.TypeOf(strings.Split(*brokers, "","")))
    logger.Println(log)
    /*t, err := tail.TailFile(log, tail.Config{Follow: true, ReOpen: true})
    if err != nil {
        fmt.Println(fmt.Errorf(""Error with tail: %v\n"", err.Error()))
    }*/
    for line := range t.Lines {
        //logger.Println(line)
        //logger.Println(line.Text)
        msg := &sarama.ProducerMessage{Topic: topic, Value: sarama.StringEncoder(line.Text)}
        _, _, err := producer.SendMessage(msg)
        if err != nil {
            logger.Printf(""FAILED to send message: %s\n"", err)
        }
    }

}


func main() {
    //Getting config file params
    viper.SetConfigName(""config"") 
    viper.AddConfigPath(""/root/work/src/linux2kafka/"")
    err := viper.ReadInConfig()
    if err != nil {
        panic(err)
    }
    viper.WatchConfig()
    logList := viper.Get(""log_list"")
    //logListString, err := ioutil.ReadFile(logList.(string))
    //fmt.Println(logList)
    //fmt.Println(reflect.TypeOf(logList))
    logsConfig := strings.Split(logList.(string),"","")
    // print logs to watch
    /*for i := range logsConfig {
        fmt.Println(logsConfig[i])
    }*/
    brokerList := viper.Get(""brokerList"")
    brokers := flag.String(""brokers"", brokerList.(string), ""Comma separated kafka brokers list"") //must be set in config.toml
    topic := flag.String(""topic"", ""test0"", ""Kafka topic to send messages to"")
    flag.Parse()
    logger := log.New(os.Stdout, ""producer "", log.Lmicroseconds)
    cfg := sarama.NewConfig()
    //Wait for replication
    cfg.Producer.RequiredAcks = -1
    cfg.Producer.Flush.Frequency = 333
    cfg.Producer.Flush.Messages = 1000
    cfg.Producer.Flush.MaxMessages = 3000
    producer, err := sarama.NewSyncProducer(strings.Split(*brokers, "",""), cfg)
    if err != nil {
        logger.Fatalln(err)
    }

    defer func() {
        if err := producer.Close(); err != nil {
            logger.Fatalln(err)
        }
    }()
    for i := range logsConfig {
        fmt.Println(""go"")
        t, err := tail.TailFile(logsConfig[i], tail.Config{Follow: true, ReOpen: true})
        if err != nil {
            fmt.Println(fmt.Errorf(""Error with tail: %v\n"", err.Error()))
        }
        go produce(producer, cfg, brokers, *topic, logger, logsConfig[i], t)
        }
}
",2743
838,36746256,"root@home:~/work/src/linux2kafka# go run main.go
go
producer 15:54:44.297745 Entering produce
root@home:~/work/src/linux2kafka# go run main.go
go
root@home:~/work/src/linux2kafka# go run main.go
go
root@home:~/work/src/linux2kafka# go run main.go
go
producer 15:55:01.951155 Entering produce
producer 15:55:01.951193 [localhost:9092 localhost:9092]
producer 15:55:01.951205 []string
producer 15:55:01.951214 /root/work/src/linux2kafka/test/log
panic: send on closed channel

goroutine 56 [running]:
panic(0x756440, 0xc820164290)
    /usr/local/go/src/runtime/panic.go:464 +0x3e6
github.com/Shopify/sarama.(*syncProducer).SendMessage(0xc8201742a0, 0xc820176300, 0x0, 0x0, 0x0, 0x0)
    /root/work/src/github.com/Shopify/sarama/sync_producer.go:66 +0x156
main.produce(0x7f65528661b8, 0xc8201742a0, 0xc82008ea20, 0xc82000b230, 0x8855c0, 0x5, 0xc8200789b0, 0xc820011320, 0x23, 0xc82017e000)
    /root/work/src/linux2kafka/main.go:31 +0x5d2
created by main.main
    /root/work/src/linux2kafka/main.go:85 +0x9f7
exit status 2
",1020
839,36746256,"package main

import (
    ""flag""
    ""github.com/Shopify/sarama""
    ""log""
    ""os""
    ""fmt""
    ""strings""
    ""github.com/hpcloud/tail""
    ""github.com/spf13/viper""
    //""io/ioutil""
    //""reflect""
)



//func produce(producer sarama.SyncProducer, cfg *sarama.Config, brokers *string, topic string, logger *log.Logger, log string, t *tail.Tail){
func produce(cfg *sarama.Config, brokers *string, topic string, logger *log.Logger, log string, t *tail.Tail){
    logger.Println(""Entering produce"")
    /*logger.Println(strings.Split(*brokers, "",""))
    logger.Println(reflect.TypeOf(strings.Split(*brokers, "","")))
    logger.Println(log)*/
    logger.Printf(""sarama.NewSyncProducer"")
    producer, err := sarama.NewSyncProducer(strings.Split(*brokers, "",""), cfg)
    if err != nil {
        logger.Fatalln(err)
    }
    defer func() {
        if err := producer.Close(); err != nil {
            logger.Fatalln(err)
        }
    }()

    /*t, err := tail.TailFile(log, tail.Config{Follow: true, ReOpen: true})
    if err != nil {
        fmt.Println(fmt.Errorf(""Error with tail: %v\n"", err.Error()))
    }*/
    for line := range t.Lines {
        //logger.Println(line)
        //logger.Println(line.Text)
        logger.Printf(""ProduceMessage"")
        msg := &sarama.ProducerMessage{Topic: topic, Value: sarama.StringEncoder(line.Text)}
        _, _, err := producer.SendMessage(msg)
        if err != nil {
            logger.Printf(""FAILED to send message: %s\n"", err)
        }
    }

}


func main() {
    //Getting config file params
    viper.SetConfigName(""config"") 
    viper.AddConfigPath(""/root/work/src/linux2kafka/"")
    err := viper.ReadInConfig()
    if err != nil {
        panic(err)
    }
    viper.WatchConfig()
    logList := viper.Get(""log_list"")
    //logListString, err := ioutil.ReadFile(logList.(string))
    //fmt.Println(logList)
    //fmt.Println(reflect.TypeOf(logList))
    logsConfig := strings.Split(logList.(string),"","")
    // print logs to watch
    /*for i := range logsConfig {
        fmt.Println(logsConfig[i])
    }*/
    brokerList := viper.Get(""brokerList"")
    brokers := flag.String(""brokers"", brokerList.(string), ""Comma separated kafka brokers list"") //must be set in config.toml
    topic := flag.String(""topic"", ""test0"", ""Kafka topic to send messages to"")
    flag.Parse()
    logger := log.New(os.Stdout, ""producer "", log.Lmicroseconds)
    cfg := sarama.NewConfig()
    //Wait for replication
    cfg.Producer.RequiredAcks = -1
    cfg.Producer.Flush.Frequency = 333
    cfg.Producer.Flush.Messages = 1000
    cfg.Producer.Flush.MaxMessages = 3000
    for i := range logsConfig {
        fmt.Println(""go"")
        t, err := tail.TailFile(logsConfig[i], tail.Config{Follow: true, ReOpen: true})
        if err != nil {
            fmt.Println(fmt.Errorf(""Error with tail: %v\n"", err.Error()))
        }
        go produce(cfg, brokers, *topic, logger, logsConfig[i], t)
        }
}
",2937
840,36746256,"root@home:~/work/src/linux2kafka# go run main.go
go
root@home:~/work/src/linux2kafka# go run main.go
go
root@home:~/work/src/linux2kafka# go run main.go
go
",156
841,36804325,"     # https://play.golang.org/p/yKtPk5QCQV
     # fmt.Println(reg.ReplaceAllString(txt, ""$1""))
     # (?:/\*[^*]*\*+(?:[^/*][^*]*\*+)*/|//[^\n]*(?:\n|$))|(""[^""\\]*(?:\\[\S\s][^""\\]*)*""|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|[\S\s][^/""'\\]*)

     (?:                              # Comments 
          /\*                              # Start /* .. */ comment
          [^*]* \*+
          (?: [^/*] [^*]* \*+ )*
          /                                # End /* .. */ comment
       |  
          //  [^\n]*                       # Start // comment
          (?: \n | $ )                     # End // comment
     )
  |  
     (                                # (1 start), Non - comments 
          ""
          [^""\\]*                          # Double quoted text
          (?: \\ [\S\s] [^""\\]* )*
          ""
       |  
          '
          [^'\\]*                          # Single quoted text
          (?: \\ [\S\s] [^'\\]* )*
          ' 
       |  [\S\s]                           # Any other char
          [^/""'\\]*                        # Chars which doesn't start a comment, string, escape, or line continuation (escape + newline)
     )                                # (1 end)
",1188
842,36804325," # https://play.golang.org/p/7FDGZSmMtP
 # fmt.Println(reg.ReplaceAllString(txt, ""$1""))
 # (?:/\*[^*]*\*+(?:[^/*][^*]*\*+)*/|//[^\n]*(?:\n|$))?((?:""[^""\\]*(?:\\[\S\s][^""\\]*)*""|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|[\S\s][^/""'\\]*)?)     

 (?:                              # Comments 
      /\*                              # Start /* .. */ comment
      [^*]* \*+
      (?: [^/*] [^*]* \*+ )*
      /                                # End /* .. */ comment
   |  
      //  [^\n]*                       # Start // comment
      (?: \n | $ )                     # End // comment
 )?
 (                                # (1 start), Non - comments 
      (?:
           ""
           [^""\\]*                          # Double quoted text
           (?: \\ [\S\s] [^""\\]* )*
           ""
        |  
           '
           [^'\\]*                          # Single quoted text
           (?: \\ [\S\s] [^'\\]* )*
           ' 
        |  [\S\s]                           # Any other char
           [^/""'\\]*                        # Chars which doesn't start a comment, string, escape, or line continuation (escape + newline)
      )?
 )                                # (1 end)
",1167
843,36804325,"     # raw:   ((?:(?:^[ \t]*)?(?:/\*[^*]*\*+(?:[^/*][^*]*\*+)*/(?:[ \t]*\r?\n(?=[ \t]*(?:\r?\n|/\*|//)))?|//(?:[^\\]|\\(?:\r?\n)?)*?(?:\r?\n(?=[ \t]*(?:\r?\n|/\*|//))|(?=\r?\n))))+)|(""[^""\\]*(?:\\[\S\s][^""\\]*)*""|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|(?:\r?\n|[\S\s])[^/""'\\\s]*)
     # delimited:  /((?:(?:^[ \t]*)?(?:\/\*[^*]*\*+(?:[^\/*][^*]*\*+)*\/(?:[ \t]*\r?\n(?=[ \t]*(?:\r?\n|\/\*|\/\/)))?|\/\/(?:[^\\]|\\(?:\r?\n)?)*?(?:\r?\n(?=[ \t]*(?:\r?\n|\/\*|\/\/))|(?=\r?\n))))+)|(""[^""\\]*(?:\\[\S\s][^""\\]*)*""|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|(?:\r?\n|[\S\s])[^\/""'\\\s]*)/

     (                                # (1 start), Comments 
          (?:
               (?: ^ [ \t]* )?                  # <- To preserve formatting
               (?:
                    /\*                              # Start /* .. */ comment
                    [^*]* \*+
                    (?: [^/*] [^*]* \*+ )*
                    /                                # End /* .. */ comment
                    (?:                              # <- To preserve formatting 
                         [ \t]* \r? \n                                      
                         (?=
                              [ \t]*                  
                              (?: \r? \n | /\* | // )
                         )
                    )?
                 |  
                    //                               # Start // comment
                    (?:                              # Possible line-continuation
                         [^\\] 
                      |  \\ 
                         (?: \r? \n )?
                    )*?
                    (?:                              # End // comment
                         \r? \n                               
                         (?=                              # <- To preserve formatting
                              [ \t]*                          
                              (?: \r? \n | /\* | // )
                         )
                      |  (?= \r? \n )
                    )
               )
          )+                               # Grab multiple comment blocks if need be
     )                                # (1 end)

  |                                 ## OR

     (                                # (2 start), Non - comments 
          ""
          [^""\\]*                          # Double quoted text
          (?: \\ [\S\s] [^""\\]* )*
          ""
       |  
          '
          [^'\\]*                          # Single quoted text
          (?: \\ [\S\s] [^'\\]* )*
          ' 
       |  
          (?: \r? \n | [\S\s] )            # Linebreak or Any other char
          [^/""'\\\s]*                      # Chars which doesn't start a comment, string, escape,
                                           # or line continuation (escape + newline)
     )                                # (2 end)
",2864
844,36990707,"ab -r -k -n 100000 -c 100 http://localhost:9000/
",49
845,36990707,"Intel(R) Xeon(R) W3670 @ 3.20GHz 3.19GHz, 12.0 GM RAM, running windows 7 64-bit
",80
846,36990707,"package controllers

import play.api.mvc._


class Application extends Controller {


  def index = Action {
    Ok(""Hello, world!"")
  }

}
",140
847,36990707,"ab -r -k -n 100000 -c 100 http://localhost:9000/
This is ApacheBench, Version 2.3 
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 10000 requests
Completed 20000 requests
Completed 30000 requests
Completed 40000 requests
Completed 50000 requests
Completed 60000 requests
Completed 70000 requests
Completed 80000 requests
Completed 90000 requests
Completed 100000 requests
Finished 100000 requests


Server Software:
Server Hostname:        localhost
Server Port:            9000

Document Path:          /
Document Length:        13 bytes

Concurrency Level:      100
Time taken for tests:   1.537 seconds
Complete requests:      100000
Failed requests:        0
Keep-Alive requests:    100000
Total transferred:      15400000 bytes
HTML transferred:       1300000 bytes
Requests per second:    65061.81 [#/sec] (mean)
Time per request:       1.537 [ms] (mean)
Time per request:       0.015 [ms] (mean, across all concurrent requests)
Transfer rate:          9784.69 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       1
Processing:     0    2   1.9      1      72
Waiting:        0    2   1.9      1      72
Total:          0    2   1.9      1      72

Percentage of the requests served within a certain time (ms)
  50%      1
  66%      2
  75%      2
  80%      2
  90%      3
  95%      3
  98%      5
  99%      8
 100%     72 (longest request)
",1568
848,36990707,"package main

import (
    ""fmt""
    ""net/http""
)

func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, ""Hello, world!"")
}

func main() {
    http.HandleFunc(""/"", handler)
    http.ListenAndServe("":8080"", nil)
}
",233
849,36990707,"ab -r -k -n 100000 -c 100 http://localhost:8080/
This is ApacheBench, Version 2.3 
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 10000 requests
Completed 20000 requests
Completed 30000 requests
Completed 40000 requests
Completed 50000 requests
Completed 60000 requests
Completed 70000 requests
Completed 80000 requests
Completed 90000 requests
Completed 100000 requests
Finished 100000 requests


Server Software:
Server Hostname:        localhost
Server Port:            8080

Document Path:          /
Document Length:        13 bytes

Concurrency Level:      100
Time taken for tests:   0.914 seconds
Complete requests:      100000
Failed requests:        0
Keep-Alive requests:    100000
Total transferred:      15400000 bytes
HTML transferred:       1300000 bytes
Requests per second:    109398.30 [#/sec] (mean)
Time per request:       0.914 [ms] (mean)
Time per request:       0.009 [ms] (mean, across all concurrent requests)
Transfer rate:          16452.48 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       1
Processing:     0    1   1.5      1      52
Waiting:        0    1   1.5      1      52
Total:          0    1   1.5      1      52

Percentage of the requests served within a certain time (ms)
  50%      1
  66%      1
  75%      1
  80%      1
  90%      1
  95%      2
  98%      5
  99%      7
 100%     52 (longest request) 
",1571
850,36990707,"package controllers

import play.api.mvc._
import scala.concurrent.Future
import play.api.libs.concurrent.Execution.Implicits.defaultContext


class Application extends Controller {


  def index = Action.async {
    Future.successful(Ok(""Hello, world!""))
  }

}
",263
851,36990707,"ab -r -k -n 100000 -c 100 http://localhost:9000/
This is ApacheBench, Version 2.3 
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 10000 requests
Completed 20000 requests
Completed 30000 requests
Completed 40000 requests
Completed 50000 requests
Completed 60000 requests
Completed 70000 requests
Completed 80000 requests
Completed 90000 requests
Completed 100000 requests
Finished 100000 requests


Server Software:
Server Hostname:        localhost
Server Port:            9000

Document Path:          /
Document Length:        13 bytes

Concurrency Level:      100
Time taken for tests:   1.230 seconds
Complete requests:      100000
Failed requests:        0
Keep-Alive requests:    100000
Total transferred:      15400000 bytes
HTML transferred:       1300000 bytes
Requests per second:    81292.68 [#/sec] (mean)
Time per request:       1.230 [ms] (mean)
Time per request:       0.012 [ms] (mean, across all concurrent requests)
Transfer rate:          12225.66 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       1
Processing:     0    1   2.2      1     131
Waiting:        0    1   2.2      1     131
Total:          0    1   2.2      1     131

Percentage of the requests served within a certain time (ms)
  50%      1
  66%      1
  75%      1
  80%      2
  90%      2
  95%      3
  98%      5
  99%      7
 100%    131 (longest request)
",1569
852,37084385,"CREATE TABLE `salesOrder` (
  `idOrder` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `uid` int(10) unsigned NOT NULL,
  `changed` datetime NOT NULL,
  PRIMARY KEY (`idOrder`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
",229
853,37084385,"package main

import (
        ""database/sql""
        ""encoding/json""
        ""fmt""
        _ ""github.com/go-sql-driver/mysql""
        ""log""
        ""reflect""
        ""strings""
)

var (
        db *sql.DB
)

func initDB() {
        var err error

        // The database/sql package manages the connection pooling automatically for you.
        // sql.Open(..) returns a handle which represents a connection pool, not a single connection.
        // The database/sql package automatically opens a new connection if all connections in the pool are busy.
        // Reference: http://stackoverflow.com/questions/17376207/how-to-share-mysql-connection-between-http-goroutines
        db, err = sql.Open(""mysql"", ""MyUser:MyPassword@tcp(localhost:3306)/MyDB"")
        //db, err = sql.Open(""mysql"", ""MyUser:MyPassword@tcp(localhost:3306)/MyDB?tx_isolation='READ-COMMITTED'"") // optional

        if err != nil {
                log.Fatalf(""Error on initializing database connection: %v"", err.Error())
        }

        // Open doesn't open a connection. Validate DSN data:
        err = db.Ping()

        if err != nil {
                log.Fatalf(""Error on opening database connection: %v"", err.Error())
        }
}

func StrutToSliceOfFieldAddress(s interface{}) []interface{} {
        fieldArr := reflect.ValueOf(s).Elem()

        fieldAddrArr := make([]interface{}, fieldArr.NumField())

        for i := 0; i < fieldArr.NumField(); i++ {
                f := fieldArr.Field(i)
                fieldAddrArr[i] = f.Addr().Interface()
        }

        return fieldAddrArr
}

func testSelectMultipleRowsV3(optArr map[string]interface{}) {
        // queries
        query := []string{}
        param := []interface{}{}

        if val, ok := optArr[""idOrder""]; ok {
                query = append(query, ""salesOrder.idOrder >= ?"")
                param = append(param, val)
        }

        // The first character of the field name must be in upper case. Otherwise, you would get:
        // panic: reflect.Value.Interface: cannot return value obtained from unexported field or method
        var sqlField = struct {
                IdOrder int
                Uid     int
                Changed string
        }{}

        var rowArr []interface{}

        sqlFieldArrPtr := StrutToSliceOfFieldAddress(&sqlField)

        sql := ""SELECT ""
        sql += ""  salesOrder.idOrder ""
        sql += "", salesOrder.uid ""
        sql += "", salesOrder.changed ""
        sql += ""FROM salesOrder ""
        sql += ""WHERE "" + strings.Join(query, "" AND "") + "" ""
        sql += ""ORDER BY salesOrder.idOrder ""

        stmt, err := db.Prepare(sql)
        if err != nil {
                log.Printf(""Error: %v"", err)
        }
        defer stmt.Close()

        rows, err := stmt.Query(param...)

        if err != nil {
                log.Printf(""Error: %v"", err)
        }

        defer rows.Close()

        if err != nil {
                log.Printf(""Error: %v"", err)
        }

        //sqlFields, err := rows.Columns()

        for rows.Next() {
                err := rows.Scan(sqlFieldArrPtr...)

                if err != nil {
                        log.Printf(""Error: %v"", err)
                }

                // Show the type of each struct field
                f1 := reflect.TypeOf(sqlField.IdOrder)
                f2 := reflect.TypeOf(sqlField.Uid)
                f3 := reflect.TypeOf(sqlField.Changed)
                fmt.Printf(""Type: %v\t%v\t%v\n"", f1, f2, f3)

                // Show the value of each field
                fmt.Printf(""Row: %v\t%v\t%v\n\n"", sqlField.IdOrder, sqlField.Uid, sqlField.Changed)

                rowArr = append(rowArr, sqlField)
        }

        if err := rows.Err(); err != nil {
                log.Printf(""Error: %v"", err)
        }

        // produces neatly indented output
        if data, err := json.MarshalIndent(rowArr, """", "" ""); err != nil {
                log.Fatalf(""JSON marshaling failed: %s"", err)
        } else {
                fmt.Printf(""json.MarshalIndent:\n%s\n\n"", data)
        }
}

func main() {
        initDB()
        defer db.Close()

        // this example shows how to dynamically assign a list of field name to the rows.Scan() function.
        optArr := map[string]interface{}{}
        optArr[""idOrder""] = 1
        testSelectMultipleRowsV3(optArr)
}
",4339
854,37084385,"Type: int       int     string
Row: 1  1       2016-05-06 20:41:06

Type: int       int     string
Row: 2  2       2016-05-06 20:41:35

json.MarshalIndent:
[
 {
  ""IdOrder"": 1,
  ""Uid"": 1,
  ""Changed"": ""2016-05-06 20:41:06""
 },
 {
  ""IdOrder"": 2,
  ""Uid"": 2,
  ""Changed"": ""2016-05-06 20:41:35""
 }
]
",299
855,37130254,"//////////////////////////////////////////////////////////
// GitAddCommitPush
func GitAddCommitPush(userName string, dir string, message string, firstCommit bool) error {

    ///////////////////////////////////////////////////////////////////////
    // Add
    //
    // 1 Open repository
    repo, err := git.OpenRepository(dir)
    if err != nil {
        beego.Error(""OpenRepository - "", err)
    }

    // 2 Retrieve index
    index, err := repo.Index()
    if err != nil {
        beego.Error(""Index - "", err)
    }

    // 3 Remember if we had conflicts before we added everything to the index
    indexHadConflicts := index.HasConflicts()

    // 4 Add everything to the index
    err = index.AddAll([]string{}, git.IndexAddDefault, nil)
    if err != nil {
        beego.Error(""AddAll - "", err)
    }

    // 5 Write the index (so git knows about it)
    err = index.Write()
    if err != nil {
        beego.Error(""Write - "", err)
    }

    // 6 Write the current index tree to the repo
    treeId, err := index.WriteTreeTo(repo)
    if err != nil {
        beego.Error(""WriteTreeTo - "", err)
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    // Commit
    //
    // 1 Retrieve the tree we just wrote (git's reference of it that it made in the last step)
    tree, err := repo.LookupTree(treeId)
    if err != nil {
        beego.Error(""LookupTree - "", err)
    }

    // 2 Create a signature
    sig := &git.Signature{
        Name:  userName,
        Email: userName + ""@"" + beego.AppConfig.String(""userdata::emailserver""),
        When:  time.Now(),
    }

    // 3 Get remote now (as we need it for both, fetch and later push )
    remote, err := repo.LookupRemote(""origin"")
    if err != nil {
        remote, err = repo.CreateRemote(""origin"", repo.Path())
        if err != nil {
            beego.Error(""CreateRemote - "", err)
        }
    }

    // 4 Read the remote branch
    remoteBranch, err := repo.LookupReference(""refs/remotes/origin/master"")
    if err != nil {
        beego.Error(""Fetch 2 - "", err)
    }

    // 5 Determine if this is a first commit ...
    if firstCommit == true {

        // 5a ... then create a new one
        _, err = repo.CreateCommit(""HEAD"", sig, sig, message, tree)

    } else {

        // 5b ... or retrieve current head
        currentBranch, err := repo.Head()
        if err != nil {
            beego.Error(""Head - "", err)
        }

        // 6 Retrieve current commit
        currentTip, err := repo.LookupCommit(currentBranch.Target())
        if err != nil {
            beego.Error(""LookupCommit - "", err)
        }

        // 7 Create a new one on top
        currentCommit, err := repo.CreateCommit(""HEAD"", sig, sig, message, tree, currentTip)
        if err != nil {
            beego.Error(""CreateCommit - "", err)
        }

        ////////////////////////////////////////////////////////////////////////////////////
        // Merge commit (in case of -- now hopefully resolved -- conflicts)
        //
        // 1 If there were conflicts, do the merge commit
        if indexHadConflicts == true {

            // 2 Retrieve the local commit
            localCommit, err := repo.LookupCommit(currentCommit)
            if err != nil {
                beego.Error(""Fetch 11 - "", err)
            }

            // 3 Retrieve the remote commit
            remoteCommit, err := repo.LookupCommit(remoteBranch.Target())
            if err != nil {
                beego.Error(""Fetch 12 - "", err)
            }

            // 4 Create a new one
            repo.CreateCommit(""HEAD"", sig, sig, ""Merge commit"", tree, localCommit, remoteCommit)

            // 5 Clean up
            repo.StateCleanup()
        }

        ///////////////////////////////////////////////////////////////////////////////////
        // Pull (Fetch and Commit)
        //
        // 1 Fetch it (pull without commit)
        err = remote.Fetch([]string{}, nil, """")
        if err != nil {
            beego.Error(""Fetch 1 - "", err)
        }

        // 2 Perform an annotated commit
        annotatedCommit, err := repo.AnnotatedCommitFromRef(remoteBranch)
        if err != nil {
            beego.Error(""Fetch 3 - "", err)
        }

        // 3 Do the merge analysis
        mergeHeads := make([]*git.AnnotatedCommit, 1)
        mergeHeads[0] = annotatedCommit
        analysis, _, err := repo.MergeAnalysis(mergeHeads)
        if err != nil {
            beego.Error(""Fetch 4 - "", err)
        }

        // 4 Check if something happend
        if analysis&git.MergeAnalysisUpToDate == 0 && analysis&git.MergeAnalysisNormal != 0 {

            // 5 Yes! First just merge changes
            if err := repo.Merge([]*git.AnnotatedCommit{annotatedCommit}, nil, nil); err != nil {
                beego.Error(""Fetch 5 - "", err)
            }

            // 6 Retrieve the index after that treatment
            index, err := repo.Index()
            if err != nil {
                beego.Error(""Fetch 6 - "", err)
            }

            // 7 Check for conflicts
            if index.HasConflicts() {

                // 7a There are not automaticly solvable conflicts ... give them back to the user
                beego.Trace(""Conflicts! Write new index and return."", index)
                err = index.Write()
                if err != nil {
                    beego.Error(""Write - "", err)
                }

                return errors.New(""Conflicts"")
            }

            // 8 Write the new tree
            treeId, err := index.WriteTree()
            if err != nil {
                beego.Error(""Fetch 9 - "", err)
            }

            // 9 Retrieve the new tree
            tree, err := repo.LookupTree(treeId)
            if err != nil {
                beego.Error(""Fetch 10 - "", err)
            }

            // 10 Retrieve the local commit
            localCommit, err := repo.LookupCommit(currentCommit)
            if err != nil {
                beego.Error(""Fetch 11 - "", err)
            }

            // 11 Retrieve the remote commit
            remoteCommit, err := repo.LookupCommit(remoteBranch.Target())
            if err != nil {
                beego.Error(""Fetch 12 - "", err)
            }

            // 12 Create a new one
            repo.CreateCommit(""HEAD"", sig, sig, ""Merge commit"", tree, localCommit, remoteCommit)

            // 13 Clean up
            repo.StateCleanup()
        }
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////
    // Push
    err = remote.Push([]string{""refs/heads/master""}, nil, sig, message)
    if err != nil {
        beego.Error(""Push - "", err)
    }

    return err
}
",6732
856,37313730,"""golang.org/x/tools/cmd/oracle""",31
857,37313730,"""golang.org/x/tools/oracle""",27
858,37313730,"package main

import (
    ""fmt""
    ""strings""
    ""os""
    ""os/exec""
    ""golang.org/x/tools/oracle""
    ""golang.org/x/tools/cmd/oracle""
)
",140
859,37313730,"====================  Starting Go build  ====================
Cleared problem markers for ProjektGO.
************  Building Go project: ProjektGO  ************
  with GOPATH: /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO
>> Running: /usr/lib/go/bin/go install -v -gcflags ""-N -l"" ./...
file/main.go:13:2: cannot find package ""golang.org/x/tools/cmd/oracle"" in any of:
    /usr/lib/go/src/golang.org/x/tools/cmd/oracle (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/cmd/oracle (from $GOPATH)
file/main.go:12:2: cannot find package ""golang.org/x/tools/oracle"" in any of:
    /usr/lib/go/src/golang.org/x/tools/oracle (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/oracle (from $GOPATH)
   ^^^ Terminated, exit code: 1 ^^^
************  Build terminated.  ************
",881
860,37313730,"package main

import (
    ""fmt""
    ""strings""
    ""os""
    ""os/exec""
    ""../../../../../golang.org/x/tools/cmd/oracle""
    ""../../../../../golang.org/x/tools/oracle""
)
",170
861,37313730,"====================  Starting Go build  ====================
************  Building Go project: ProjektGO  ************
  with GOPATH: /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO
>> Running: /usr/lib/go/bin/go install -v -gcflags ""-N -l"" ./...
can't load package: /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/file/main.go:11:2: import ""../../../../../golang.org/x/tools/cmd/oracle"" is a program, not an importable package
../../../../golang.org/x/tools/oracle/describe.go:20:2: cannot find package ""golang.org/x/tools/go/ast/astutil"" in any of:
    /usr/lib/go/src/golang.org/x/tools/go/ast/astutil (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/go/ast/astutil (from $GOPATH)
../../../../golang.org/x/tools/cmd/oracle/main.go:26:2: cannot find package ""golang.org/x/tools/go/buildutil"" in any of:
    /usr/lib/go/src/golang.org/x/tools/go/buildutil (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/go/buildutil (from $GOPATH)
../../../../golang.org/x/tools/oracle/callers.go:11:2: cannot find package ""golang.org/x/tools/go/callgraph"" in any of:
    /usr/lib/go/src/golang.org/x/tools/go/callgraph (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/go/callgraph (from $GOPATH)
../../../../golang.org/x/tools/cmd/oracle/main.go:27:2: cannot find package ""golang.org/x/tools/go/loader"" in any of:
    /usr/lib/go/src/golang.org/x/tools/go/loader (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/go/loader (from $GOPATH)
../../../../golang.org/x/tools/oracle/callees.go:17:2: cannot find package ""golang.org/x/tools/go/pointer"" in any of:
    /usr/lib/go/src/golang.org/x/tools/go/pointer (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/go/pointer (from $GOPATH)
../../../../golang.org/x/tools/oracle/callees.go:18:2: cannot find package ""golang.org/x/tools/go/ssa"" in any of:
    /usr/lib/go/src/golang.org/x/tools/go/ssa (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/go/ssa (from $GOPATH)
../../../../golang.org/x/tools/oracle/callees.go:19:2: cannot find package ""golang.org/x/tools/go/ssa/ssautil"" in any of:
    /usr/lib/go/src/golang.org/x/tools/go/ssa/ssautil (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/go/ssa/ssautil (from $GOPATH)
../../../../golang.org/x/tools/oracle/describe.go:22:2: cannot find package ""golang.org/x/tools/go/types/typeutil"" in any of:
    /usr/lib/go/src/golang.org/x/tools/go/types/typeutil (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/go/types/typeutil (from $GOPATH)
../../../../golang.org/x/tools/cmd/oracle/main.go:28:2: cannot find package ""golang.org/x/tools/oracle"" in any of:
    /usr/lib/go/src/golang.org/x/tools/oracle (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/oracle (from $GOPATH)
../../../../golang.org/x/tools/oracle/callees.go:20:2: cannot find package ""golang.org/x/tools/oracle/serial"" in any of:
    /usr/lib/go/src/golang.org/x/tools/oracle/serial (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/oracle/serial (from $GOPATH)
../../../../golang.org/x/tools/oracle/implements.go:21:2: cannot find package ""golang.org/x/tools/refactor/importgraph"" in any of:
    /usr/lib/go/src/golang.org/x/tools/refactor/importgraph (from $GOROOT)
    /home/haapoo/go/src/github.com/ProjektarbeitGo/ProjektGO/src/golang.org/x/tools/refactor/importgraph (from $GOPATH)
   ^^^ Terminated, exit code: 1 ^^^
************  Build terminated.  ************
",3834
862,37313730,/usr/lib/go,11
863,37313730,/home/haapoo/go,15
864,37318224,"I tried to do as much i could please suggest and help . 
I use this method please comment and suggest.  
https://play.golang.org/p/kb0HF8ykHW

  package main;
    import (
        ""fmt""
        ""encoding/xml""  
    )

    func main(){
    dxml := `
    
    
        X0306
        4
        2015-11-18
        
            0000820081
            CAMBREX CORP
            CBM
        
        
            
                0001227832
                KORB WILLIAM B
            
            
                1 MEADOWLANDS PLAZA
                
                EAST RUTHERFORD
                NJ
                07073
                
            
            
                1
                0
                0
                0
            
        
        
            
                
                    Common Stock
                
                
                    2015-11-18
                
                
                    4
                    S
                    0
                
                
                    
                        10000
                    
                    
                        50.18
                        
                    
                    
                        D
                    
                
                
                    
                        36562
                    
                
                
                    
                        D
                    
                    
                        
                    
                
            
        
        
            The price reported in Column 4 is a weighted average price. These shares were sold in multiple transactions at prices ranging from $50.00 to $50.58 inclusive. The reporting person undertakes to provide to Cambrex Corporation, any security holder of Cambrex Corporation, or the staff of the Securities and Exchange Commission, upon request, full information regarding the number of shares sold at each separate price within the range set forth in this Footnote 1 to this Form 4.
        
        
        
            Samantha Hanley for William B. Korb by POA
            2015-11-20
        
    

    `

        defer func() {
            if errD := recover(); errD != nil {
                    fmt.Println(""!!!!!!!!!!!!!!!!Panic Occured and Recovered in func main(), Error Info: "", errD)
                }
        }()

        var Owner Ownershipdocs 

        err := xml.Unmarshal([]byte(dxml), &Owner)
            fmt.Println(""xml.unmarshal error info :"",err)
                fmt.Println(""SchemaVersion : "",Owner.SchemaVersion)
                fmt.Println(""DocumentType : "",Owner.DocumentType)
                fmt.Println(""PeriodOfReport : "",Owner.PeriodOfReport)
                fmt.Println(""IssuerCik : "",Owner.IssuerCik)
                fmt.Println(""IssuerName : "",Owner.IssuerName)
                fmt.Println(""IssuerTradingSymbol : "",Owner.IssuerTradingSymbol)
                fmt.Println(""RptOwnerCik : "",Owner.RptOwnerCik)
                fmt.Println(""RptOwnerName : "",Owner.RptOwnerName)
                fmt.Println(""RptOwnerStreet1 : "",Owner.RptOwnerStreet1)
                fmt.Println(""RptOwnerCity :  "",Owner.RptOwnerCity)
                fmt.Println(""RptOwnerState : "",Owner.RptOwnerState)
                fmt.Println(""RptOwnerZipCode : "",Owner.RptOwnerZipCode)
                fmt.Println(""IsDirector : "",Owner.IsDirector)   
                fmt.Println(""IsOfficer :  "",Owner.IsOfficer)

                fmt.Println(""IsTenPercentOwner : "",Owner.IsTenPercentOwner)
                fmt.Println(""IsOther : "",Owner.IsOther)
                fmt.Println(""SecurityTitleValue : "",Owner.SecurityTitleValue)
                fmt.Println(""TransactionDatevalue : "",Owner.TransactionDatevalue)
                fmt.Println(""TransactionFormType : "",Owner.TransactionFormType)
                fmt.Println(""TransactionCode : "",Owner.TransactionCode)
                fmt.Println(""EquitySwapInvolved : "",Owner.EquitySwapInvolved)
                fmt.Println(""TransactionSharesValue : "",Owner.TransactionSharesValue)
                fmt.Println(""TransactionPricePerShareValue : "",Owner.TransactionPricePerShareValue)
                fmt.Println(""TransactionPricePerSharefootnoteId :  "",Owner.TransactionPricePerSharefootnoteId)
                fmt.Println(""TransactionAcquiredDisposedCodeValue : "",Owner.TransactionAcquiredDisposedCodeValue)

                fmt.Println(""Footnote.Footnote : "",Owner.Footnote.Footnote)
                fmt.Println(""OwnerSignaturesignatureName : "",Owner.OwnerSignaturesignatureName)
                fmt.Println(""OwnerSignaturesignatureDate    : "",Owner.OwnerSignaturesignatureDate)  

    }

    type Ownershipdocs struct{
        SchemaVersion           string `xml:""schemaVersion""`
        DocumentType            string `xml:""documentType""`
        PeriodOfReport          string `xml:""periodOfReport""`
        IssuerCik               string `xml:""issuer>issuerCik""`
        IssuerName              string `xml:""issuer>issuerName""`
        IssuerTradingSymbol     string `xml:""issuer>issuerTradingSymbol""`
        RptOwnerCik             string `xml:""reportingOwner>reportingOwnerId>rptOwnerCik""`
        RptOwnerName            string `xml:""reportingOwner>reportingOwnerId>rptOwnerName""`

        RptOwnerStreet1         string `xml:""reportingOwner>reportingOwnerAddress>rptOwnerStreet1""`
        RptOwnerCity            string `xml:""reportingOwner>reportingOwnerAddress>rptOwnerCity""`
        RptOwnerState           string `xml:""reportingOwner>reportingOwnerAddress>rptOwnerState""`
        RptOwnerZipCode         string `xml:""reportingOwner>reportingOwnerAddress>rptOwnerZipCode""`

        IsDirector              string `xml:""reportingOwner>reportingOwnerRelationship>isDirector""`
        IsOfficer               string `xml:""reportingOwner>reportingOwnerRelationship>isOfficer""`  
        IsTenPercentOwner       string `xml:""reportingOwner>reportingOwnerRelationship>isTenPercentOwner""`
        IsOther                 string `xml:""reportingOwner>reportingOwnerRelationship>isOther""`        

        SecurityTitleValue      string `xml:""nonDerivativeTable>nonDerivativeTransaction>securityTitle>value""`
        TransactionDatevalue    string `xml:""nonDerivativeTable>nonDerivativeTransaction>transactionDate>value""`    
        TransactionFormType     string `xml:""nonDerivativeTable>nonDerivativeTransaction>transactionCoding>transactionFormType""`
        TransactionCode         string `xml:""nonDerivativeTable>nonDerivativeTransaction>transactionCoding>transactionCode""`
        EquitySwapInvolved      string `xml:""nonDerivativeTable>nonDerivativeTransaction>transactionCoding>equitySwapInvolved""`


        TransactionSharesValue                  string `xml:""nonDerivativeTable>nonDerivativeTransaction>transactionAmounts>transactionShares>value""`
        TransactionPricePerShareValue           string `xml:""nonDerivativeTable>nonDerivativeTransaction>transactionAmounts>transactionPricePerShare>value""`
        TransactionPricePerSharefootnoteId      string `xml:""nonDerivativeTable>nonDerivativeTransaction>transactionAmounts>transactionPricePerShare>footnoteId""`
        TransactionAcquiredDisposedCodeValue    string `xml:""nonDerivativeTable>nonDerivativeTransaction>transactionAmounts>transactionAcquiredDisposedCode>value""`

        SharesOwnedFollowingTransactionValue    string `xml:""nonDerivativeTable>nonDerivativeTransaction>ownershipNature>directOrIndirectOwnership>value""`

        Footnote                                Footnotes   `xml:""footnotes""`
        OwnerSignaturesignatureName             string       `xml:""ownerSignature>signatureName""`
        OwnerSignaturesignatureDate             string       `xml:""ownerSignature>signatureDate""`

    }

    type Footnotes struct{
        ID          string `xml:""id,attr""`
        Footnote    string `xml:""footnote""`

    }
",7933
865,37405162,"docker@dockhost:~/go/projects/wiki$ go run encoding.go 
2016/05/24 00:52:16 Serialization by JSON elapsed: 2152195 us
2016/05/24 00:52:16 students.json 19177782
2016/05/24 00:52:17 Serialization by GOB elapsed: 748867 us
2016/05/24 00:52:17 students.gob 9305166
2016/05/24 00:52:18 Serialization by XML elapsed: 1507397 us
2016/05/24 00:52:18 students.xml 26177780

docker@dockhost:~/go/projects/wiki$ go run encoding.go 
2016/05/24 00:52:32 Serialization by JSON elapsed: 1388153 us
2016/05/24 00:52:32 students.json 19177782
2016/05/24 00:52:33 Serialization by GOB elapsed: 502814 us
2016/05/24 00:52:33 students.gob 9305166
2016/05/24 00:52:34 Serialization by XML elapsed: 897859 us
2016/05/24 00:52:34 students.xml 26177780

docker@dockhost:~/go/projects/wiki$ go run encoding.go 
2016/05/24 00:52:41 Serialization by JSON elapsed: 1290359 us
2016/05/24 00:52:41 students.json 19177782
2016/05/24 00:52:42 Serialization by GOB elapsed: 434203 us
2016/05/24 00:52:42 students.gob 9305166
2016/05/24 00:52:42 Serialization by XML elapsed: 862379 us
2016/05/24 00:52:42 students.xml 26177780
",1095
866,37405162,"package main


import (
        ""log""
        ""encoding/json""
        ""encoding/gob""
        ""encoding/xml""
        ""math/rand""
        ""strconv""
        ""os""
        ""time""
)



const (
        Male=iota
        Female
        Unknown

        ALL=100000
)

type Person struct {
        Name string
        Id      string
        Age     int
        Gender  int
}
type Student struct {
        Person Person
        Grade int
        Class   string
        Teacher Person
}

func (s  Student) String() string{
        v,err:=json.Marshal(s)
        if err!=nil {
                log.Fatal(""Marshal failed"",s)
        }
        return string(v)

}

var students []Student
func init(){
        students=make([]Student,ALL)
        for i:=0;i<ALL;i++ {
                students[i].Grade=rand.Intn(5)
                students[i].Class=strconv.Itoa(students[i].Grade)+"",class""+strconv.Itoa(rand.Intn(10))
                students[i].Person.Name=""Student ""+strconv.Itoa(i)
                students[i].Person.Id=""11001234512345551""+strconv.Itoa(rand.Intn(10))
                students[i].Person.Age=10+rand.Intn(10)
                students[i].Person.Gender=rand.Intn(3)
                students[i].Teacher.Id=""22001154365151344""+strconv.Itoa(rand.Intn(10))
                students[i].Teacher.Name=""Teacher ""+strconv.Itoa(i)
                students[i].Teacher.Age=40+rand.Intn(10)
                students[i].Teacher.Gender=rand.Intn(3)
        }

}

func toJsonFile(){
        f,err:=os.OpenFile(""students.json"",os.O_RDWR ,0600)
        if err!=nil {
                log.Fatal(""Can't open students.json ""+ err.Error())
        }
        defer f.Close()
        en:=json.NewEncoder(f)
        err=en.Encode(students)
        if err!=nil {

                log.Fatal(err)
        }

}

func loadJsonFile(){
        f,err:=os.Open(""students.json"")
        if err!=nil {
                log.Fatal(err)
        }
        defer f.Close()
        dec:=json.NewDecoder(f)
        ss:=make([]Student,ALL)
        err=dec.Decode(&ss)
        if err!=nil {

                log.Fatal(err)
        }
//      log.Println(ss)
}



func toGobFile(){
        f,err:=os.OpenFile(""students.gob"",os.O_RDWR ,0600)
        if err!=nil {
                log.Fatal(""Can't open students.gob ""+ err.Error())
        }
        defer f.Close()
        en:=gob.NewEncoder(f)
        err=en.Encode(students)
        if err!=nil {

                log.Fatal(err)
        }

}

func loadGobFile(){
        f,err:=os.Open(""students.gob"")
        if err!=nil {
                log.Fatal(err)
        }
        defer f.Close()
        dec:=gob.NewDecoder(f)
        ss:=make([]Student,ALL)
        err=dec.Decode(&ss)
        if err!=nil {

                log.Fatal(err)
        }
//      log.Println(ss)
}



func toXmlFile(){
        f,err:=os.OpenFile(""students.xml"",os.O_RDWR ,0600)
        if err!=nil {
                log.Fatal( err.Error())
        }
        defer f.Close()
        en:=xml.NewEncoder(f)
        err=en.Encode(students)
        if err!=nil {

                log.Fatal(err)
        }

}
func loadXmlFile(){
        f,err:=os.Open(""students.xml"")
        if err!=nil {
                log.Fatal(err)
        }
        defer f.Close()
        dec:=xml.NewDecoder(f)
        ss:=make([]Student,ALL)
        err=dec.Decode(&ss)
        if err!=nil {

                log.Fatal(err)
        }
//      log.Println(ss)
}




func main(){
        start:=time.Now()
        toJsonFile()
        loadJsonFile()
        end:=time.Now()

        log.Printf(""Serialization by JSON elapsed: %d us"",end.Sub(start)/1000)

        fi,err:=os.Stat(""students.json"")
        if err!=nil {
                log.Fatal(err)
        }
        log.Println(fi.Name(), fi.Size())



        start=time.Now()
        toGobFile()
        loadGobFile()
        end=time.Now()


        log.Printf(""Serialization by GOB elapsed: %d us"",end.Sub(start)/1000)

        fi,err=os.Stat(""students.gob"")
        if err!=nil {
                log.Fatal(err)
        }
        log.Println(fi.Name(), fi.Size())

        start=time.Now()
        toXmlFile()
        loadXmlFile()
        end=time.Now()


        log.Printf(""Serialization by XML elapsed: %d us"",end.Sub(start)/1000)

        fi,err=os.Stat(""students.xml"")
        if err!=nil {
                log.Fatal(err)
        }
        log.Println(fi.Name(), fi.Size())

}
",4378
867,37425805," package hello

import (
    ""encoding/json""
    ""fmt""
    ""golang.org/x/net/context""
    ""golang.org/x/oauth2""
    ""golang.org/x/oauth2/google""
    ""google.golang.org/api/drive/v3""
    _ ""google.golang.org/appengine/urlfetch""
    ""io/ioutil""
    ""log""
    ""net/http""
    ""net/url""
    ""os""
    ""os/user""
    ""path/filepath""
)

const (
    assetfolder = ""0B-zdryEj60U_MXVkajFweXBQWHM""
)

var (
    dir *drive.FileList
)

func init() {
    http.HandleFunc(""/"", handler)

    ctx := context.Background()

    b, err := ioutil.ReadFile(""client_secret.json"")
    if err != nil {
        log.Fatalf(""Unable to read client secret file: %v"", err)
    }

    // If modifying these scopes, delete your previously saved credentials
    // at ~/.credentials/drive-go-quickstart.json
    config, err := google.ConfigFromJSON(b, drive.DriveMetadataReadonlyScope)
    if err != nil {
        log.Fatalf(""Unable to parse client secret file to config: %v"", err)
    }
    client := getClient(ctx, config)

    srv, err := drive.New(client)
    if err != nil {
        log.Fatalf(""Unable to retrieve drive Client %v"", err)
    }

    dir, err = srv.Files.List().PageSize(10).
        Fields(""nextPageToken, files(id, name)"").Do()
    if err != nil {
        log.Fatalf(""Unable to retrieve files."", err)
    }

}

func handler(w http.ResponseWriter, r *http.Request) {

    //fmt.Fprint(w, r.RequestURI)

    fmt.Fprint(w, ""Files:"")
    if len(dir.Files) > 0 {
        for _, i := range dir.Files {
            fmt.Fprint(w, ""%s (%s)\n"", i.Name, i.Id)
        }
    } else {
        fmt.Fprint(w, ""No files found."")
    }
}

// getClient uses a Context and Config to retrieve a Token
// then generate a Client. It returns the generated Client.
func getClient(ctx context.Context, config *oauth2.Config) *http.Client {
    cacheFile, err := tokenCacheFile()
    if err != nil {
        log.Fatalf(""Unable to get path to cached credential file. %v"", err)
    }
    tok, err := tokenFromFile(cacheFile)
    if err != nil {
        tok = getTokenFromWeb(config)
        saveToken(cacheFile, tok)
    }
    return config.Client(ctx, tok)
}

// getTokenFromWeb uses Config to request a Token.
// It returns the retrieved Token.
func getTokenFromWeb(config *oauth2.Config) *oauth2.Token {
    authURL := config.AuthCodeURL(""state-token"", oauth2.AccessTypeOffline)
    fmt.Printf(""Go to the following link in your browser then type the ""+
        ""authorization code: \n%v\n"", authURL)

    var code string
    if _, err := fmt.Scan(&code); err != nil {
        log.Fatalf(""Unable to read authorization code %v"", err)
    }

    tok, err := config.Exchange(oauth2.NoContext, code)
    if err != nil {
        log.Fatalf(""Unable to retrieve token from web %v"", err)
    }
    return tok
}

// tokenCacheFile generates credential file path/filename.
// It returns the generated credential path/filename.
func tokenCacheFile() (string, error) {
    usr, err := user.Current()
    if err != nil {
        return """", err
    }
    tokenCacheDir := filepath.Join(usr.HomeDir, "".credentials"")
    os.MkdirAll(tokenCacheDir, 0700)
    return filepath.Join(tokenCacheDir,
        url.QueryEscape(""drive-go-quickstart.json"")), err
}

// tokenFromFile retrieves a Token from a given file path.
// It returns the retrieved Token and any read error encountered.
func tokenFromFile(file string) (*oauth2.Token, error) {
    f, err := os.Open(file)
    if err != nil {
        return nil, err
    }
    t := &oauth2.Token{}
    err = json.NewDecoder(f).Decode(t)
    defer f.Close()
    return t, err
}

// saveToken uses a file path to create a file and store the
// token in it.
func saveToken(file string, token *oauth2.Token) {
    fmt.Printf(""Saving credential file to: %s\n"", file)
    f, err := os.Create(file)
    if err != nil {
        log.Fatalf(""Unable to cache oauth token: %v"", err)
    }
    defer f.Close()
    json.NewEncoder(f).Encode(token)
}

func main() {
    ctx := context.Background()

    b, err := ioutil.ReadFile(""client_secret.json"")
    if err != nil {
        log.Fatalf(""Unable to read client secret file: %v"", err)
    }

    // If modifying these scopes, delete your previously saved credentials
    // at ~/.credentials/drive-go-quickstart.json
    config, err := google.ConfigFromJSON(b, drive.DriveMetadataReadonlyScope)
    if err != nil {
        log.Fatalf(""Unable to parse client secret file to config: %v"", err)
    }
    client := getClient(ctx, config)

    srv, err := drive.New(client)
    if err != nil {
        log.Fatalf(""Unable to retrieve drive Client %v"", err)
    }

    r, err := srv.Files.List().PageSize(10).
        Fields(""nextPageToken, files(id, name)"").Do()
    if err != nil {
        log.Fatalf(""Unable to retrieve files."", err)
    }

    fmt.Println(""Files:"")
    if len(r.Files) > 0 {
        for _, i := range r.Files {
            fmt.Printf(""%s (%s)\n"", i.Name, i.Id)
        }
    } else {
        fmt.Print(""No files found."")
    }

}
",4965
868,37495815,"2016/05/28 06:00:26 handleOneDoc
2016/05/28 06:00:26 
2016/05/28 06:00:26 &{0xc82007a500 0xc8201121c0 0x84de40 false false 0xc82016a180 {0xc82016c820 map[] false false} map[] false 0 -1 0 false false [] 0 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0 0] }
2016/05/28 06:00:29 Unable to get download link %vgoogleapi: got HTTP response code 400 with body: {""error"":{""errors"":[{""domain"":""global"",""reason"":""unsupportedOutputFormat"",""message"":""Unsupported Output Format"",""locationType"":""parameter"",""location"":""alt""}],""code"":400,""message"":""Unsupported Output Format""}}
",597
869,37495815,"package gwebdrive

import (
    ""fmt""
    ""golang.org/x/net/context""
    _ ""golang.org/x/oauth2""
    ""golang.org/x/oauth2/google""
    ""golang.org/x/oauth2/jwt""
    ""google.golang.org/api/drive/v3""
    ""google.golang.org/appengine""
    _ ""html/template""
    _ ""io/ioutil""
    ""log""
    ""net/http""
    ""net/url""

    ""strings""
)

const (
    assetFolder = ""0B-zdryEj60U_N0NtSFJuQUdaWTA""
)

var (
    //tpl  *template
    dir  *drive.FileList
    conf *jwt.Config
)

func init() {
    ... key config content here. 
    http.Handle(""/list"", appengineHandler(handleList))
    http.Handle(""/0B-zdryEj60U_OXZBVklsdG13Wlk"", appengineHandler(handleOneDoc))

    //http.Handle(""/.+"", appengineHandler(handleContent))
}

// appengineHandler wraps http.Handler to pass it a new `appengine.Context` and handle errors.
type appengineHandler func(c context.Context, w http.ResponseWriter, r *http.Request) error

func (h appengineHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {

    c := appengine.NewContext(r)
    if err := h(c, w, r); err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
    }
}

func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprint(w, ""Hello Darian Go Serve some Assets"")

}

func handleOneDoc(c context.Context, w http.ResponseWriter, r *http.Request) error {
    log.Print(""handleOneDoc"")
    u, err := url.Parse(r.RequestURI)
    if err != nil {
        log.Fatalf(""Unable to parse Request URL %v"", err)
    }
    log.Printf(u.RawPath)
    s := strings.Split(u.RawPath, ""/"")
    // looking for regex for Google File ID's.

    // I don't actually know the point of this call but it's needed.
    client := conf.Client(appengine.NewContext(r))
    // use url to decide what asset to return as data.
    // for now assume url contains id.
    srv, err := drive.New(client)
    fileid := s[len(s)-1]
    log.Print(w, fileid)
    if err != nil {
        log.Fatalf(""Unable to retrieve drive Client %v"", err)
    }

    dwn, err := srv.Files.Get(fileid).Download()
    fmt.Fprint(w, ""mimeType:image/png"")

    if err != nil {
        log.Fatal(""Unable to get download link %v"", err)
    }

    fmt.Fprint(w, dwn.Body)

    return nil

}

func handleContent(c context.Context, w http.ResponseWriter, r *http.Request) error {
    log.Print(""handleContent"")
    u, err := url.Parse(r.RequestURI)
    if err != nil {
        log.Fatalf(""Unable to parse Request URL %v"", err)
    }
    fmt.Fprintf(w, u.RawPath)
    s := strings.Split(u.RawPath, ""/"")
    // looking for regex for Google File ID's.

    // I don't actually know the point of this call but it's needed.
    client := conf.Client(appengine.NewContext(r))
    // use url to decide what asset to return as data.
    // for now assume url contains id.
    srv, err := drive.New(client)
    fileid := s[len(s)-1]
    if err != nil {
        log.Fatalf(""Unable to retrieve drive Client %v"", err)
    }

    dwn, err := srv.Files.Get(fileid).Download()
    //service.files().get(fileId).executeMediaAndDownloadTo(w)
    fmt.Fprint(w, dwn)
    if err != nil {
        log.Fatal(""Unable to get download link %v"", err)
    }

    //fmt.Fprint(w, dwn)

    return nil

}

func handleList(c context.Context, w http.ResponseWriter, r *http.Request) error {
    log.Print(""just handle"")

    // Initiate an http.Client, the following GET request will be
    // authorized and authenticated on the behalf of user@example.com.
    client := conf.Client(appengine.NewContext(r))

    srv, err := drive.New(client)
    if err != nil {
        log.Fatalf(""Unable to retrieve drive Client %v"", err)
    }

    dir, err = srv.Files.List().PageSize(10).Q(""'0B-zdryEj60U_MXVkajFweXBQWHM' in parents"").
        Fields(""files(id, kind, name, size, webViewLink)"").Do()
    //resp, err := srv.Files.Export(dir.Files[1].Id, dir.Files[1].MimeType).Download()
    //fmt.Fprint(w, resp.Body)

    if err != nil {
        log.Fatalf(""Unable to retrieve files."", err)
    }

    fmt.Fprint(w, ""Files:"")
    if len(dir.Files) > 0 {
        for _, i := range dir.Files {
            fmt.Fprint(w, ""%s (%s)\n"", i.Name, i.WebViewLink)
        }
    } else {
        fmt.Fprint(w, ""No files found."")
    }
    return err
}
",4206
870,37500878,"package main

import (
    ""database/sql""
    ""fmt""
    ""runtime""
    ""strconv""
    ""time""

    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    runtime.GOMAXPROCS(runtime.NumCPU())
    // defer profile.Start(profile.CPUProfile, profile.ProfilePath(""."")).Stop()
    dbRead, err := connectDB(""test:test@tcp(127.0.0.1:3306)/test_oltp?charset=utf8&readTimeout=600s&writeTimeout=600s"")
    if err != nil {
        fmt.Printf(""Error happend when connecting to DB. %s\n"", err.Error())
        return
    }
    defer dbRead.Close()
    dbRead.SetMaxIdleConns(0)
    dbRead.SetMaxOpenConns(100)

    query := fmt.Sprintf(""WHERE company_id in (11,22,33,44,55,66,77,88,99,00,111,222,333,4444,555,666,777,888,999)"")

    relations := getRelations(dbRead, query)
}
func connectDB(addr string) (*sql.DB, error) {
    db, err := sql.Open(""mysql"", addr)
    if err != nil {
        return nil, err
    }
    if err = db.Ping(); err != nil {
        return nil, err
    }
    return db, nil
}

type Relation struct {
    childId  int64 
    parentId int64 
}

func getRelations(db *sql.DB, where string)[]Relation {
    begin := time.Now()

    var err error
    var rows *sql.Rows
    query := fmt.Sprintf(""SELECT `child_id`, `parent_id` FROM `test_relations` %s"", where)
    rows, err = db.Query(query)
    if err != nil {
        fmt.Println(""query error:"", err.Error())
        return nil
    }
    defer rows.Close()

    columns, err := rows.Columns()
    buffer := make([]sql.RawBytes, len(columns))
    scanArgs := make([]interface{}, len(buffer))
    for i := range scanArgs {
        scanArgs[i] = &buffer[i]
    }

    relations := []Relation{}
    relation := Relation{}
    for rows.Next() {
        if err = rows.Scan(scanArgs...); err != nil {
            fmt.Println(""scan:"", err.Error())
            return nil
        }
        relation.parentId, _ = strconv.ParseInt(string(buffer[1]), 10, 64)
        relation.childId, _ = strconv.ParseInt(string(buffer[0]), 10, 64)

        relations = append(relations, relation)
    }

    if err = rows.Err(); err != nil {
        fmt.Println(""next error:"", err.Error())
        return nil
    }
    fmt.Printf("">>> getRelations cost: %s\n"", time.Since(begin).String())
    // output :>>> getRelations cost:1m45.791047s
    return relations
    // len(relations): 131123541
}
",2325
871,37500878,"    75.67s of 96.82s total (78.16%)
Dropped 109 nodes (cum <= 0.48s)
Showing top 20 nodes out of 82 (cum >= 12.04s)
      flat  flat%   sum%        cum   cum%
    11.85s 12.24% 12.24%     11.85s 12.24%  runtime.memmove
    10.28s 10.62% 22.86%     20.01s 20.67%  runtime.mallocgc
     5.82s  6.01% 28.87%      5.82s  6.01%  strconv.ParseUint
     5.79s  5.98% 34.85%      5.79s  5.98%  runtime.futex
     3.42s  3.53% 38.38%     10.28s 10.62%  github.com/go-sql-driver/mysql.(*buffer).readNext
     3.42s  3.53% 41.91%      6.38s  6.59%  runtime.scang
     3.37s  3.48% 45.39%     36.97s 38.18%  github.com/go-sql-driver/mysql.(*textRows).readRow
     3.37s  3.48% 48.87%      3.37s  3.48%  runtime.memclr
     3.20s  3.31% 52.18%      3.20s  3.31%  runtime.heapBitsSetType
     3.02s  3.12% 55.30%      7.36s  7.60%  database/sql.convertAssign
     2.96s  3.06% 58.36%      3.02s  3.12%  runtime.(*mspan).sweep.func1
     2.53s  2.61% 60.97%      2.53s  2.61%  runtime._ExternalCode
     2.39s  2.47% 63.44%      2.96s  3.06%  runtime.readgstatus
     2.24s  2.31% 65.75%      8.06s  8.32%  strconv.ParseInt
     2.21s  2.28% 68.03%      5.24s  5.41%  runtime.heapBitsSweepSpan
     2.15s  2.22% 70.25%      7.68s  7.93%  runtime.rawstring
     2.06s  2.13% 72.38%      3.18s  3.28%  github.com/go-sql-driver/mysql.readLengthEncodedString
     1.95s  2.01% 74.40%     12.23s 12.63%  github.com/go-sql-driver/mysql.(*mysqlConn).readPacket
     1.83s  1.89% 76.29%     79.42s 82.03%  main.Relations
     1.81s  1.87% 78.16%     12.04s 12.44%  runtime.slicebytetostring
",1568
872,37500878,"     (pprof) top20
38.71mins of 42.82mins total (90.40%)
Dropped 334 nodes (cum <= 0.21mins)
Showing top 20 nodes out of 76 (cum >= 1.35mins)
      flat  flat%   sum%        cum   cum%
 12.02mins 28.07% 28.07%  12.48mins 29.15%  runtime.addspecial
  5.95mins 13.89% 41.96%  15.08mins 35.21%  runtime.pcvalue
  5.26mins 12.29% 54.25%   5.26mins 12.29%  runtime.readvarint
  2.60mins  6.08% 60.32%   7.87mins 18.37%  runtime.step
  1.98mins  4.62% 64.94%  19.45mins 45.43%  runtime.gentraceback
  1.65mins  3.86% 68.80%   1.65mins  3.86%  runtime/internal/atomic.Xchg
  1.57mins  3.66% 72.46%   2.93mins  6.84%  runtime.(*mspan).sweep
  1.52mins  3.54% 76.01%   1.78mins  4.15%  runtime.findfunc
  1.41mins  3.30% 79.31%   1.42mins  3.31%  runtime.markrootSpans
  1.13mins  2.64% 81.95%   1.13mins  2.64%  runtime.(*fixalloc).alloc
  0.64mins  1.50% 83.45%   0.64mins  1.50%  runtime.duffcopy
  0.46mins  1.08% 84.53%   0.46mins  1.08%  runtime.findmoduledatap
  0.44mins  1.02% 85.55%   0.44mins  1.02%  runtime.fastrand1
  0.42mins  0.97% 86.52%  15.49mins 36.18%  runtime.funcspdelta
  0.38mins  0.89% 87.41%  36.02mins 84.13%  runtime.mallocgc
  0.30mins   0.7% 88.12%   0.78mins  1.83%  runtime.scanobject
  0.26mins   0.6% 88.72%   0.32mins  0.74%  runtime.stkbucket
  0.26mins   0.6% 89.32%   0.26mins   0.6%  runtime.memmove
  0.23mins  0.55% 89.86%   0.23mins  0.55%  runtime.heapBitsForObject
  0.23mins  0.53% 90.40%   1.35mins  3.15%  runtime.lock
",1458
873,37529203,"{
  ""error"": ""SearchPhaseExecutionException[Failed to execute phase [query], all shards failed; shardFailures {[9m4uVcf3TLmQ9Kr7z_fSpQ][text][0]: QueryPhaseExecutionException[[text][0]: query[filtered(function score (blended(terms: [url_words:test, domain_words:test, title:test, body:test]), functions: [{filter(*:*), function [org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction@56319fc9]}{filter(*:*), function [org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction@60b46f02]}]))->cache(_type:page)],from[0],size[25]: Query Failed [Failed to execute main query]]; nested: ElasticsearchException[Missing value for field [lang_en]]; }{[9m4uVcf3TLmQ9Kr7z_fSpQ][text][1]: QueryPhaseExecutionException[[text][1]: query[filtered(function score (blended(terms: [url_words:test, domain_words:test, title:test, body:test]), functions: [{filter(*:*), function [org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction@3ca7d41e]}{filter(*:*), function [org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction@63daf999]}]))->cache(_type:page)],from[0],size[25]: Query Failed [Failed to execute main query]]; nested: ElasticsearchException[Missing value for field [lang_en]]; }{[9m4uVcf3TLmQ9Kr7z_fSpQ][text][2]: QueryPhaseExecutionException[[text][2]: query[filtered(function score (blended(terms: [url_words:test, domain_words:test, title:test, body:test]), functions: [{filter(*:*), function [org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction@27521539]}{filter(*:*), function [org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction@66dbac2b]}]))->cache(_type:page)],from[0],size[25]: Query Failed [Failed to execute main query]]; nested: ElasticsearchException[Missing value for field [lang_en]]; }{[9m4uVcf3TLmQ9Kr7z_fSpQ][text][3]: QueryPhaseExecutionException[[text][3]: query[filtered(function score (blended(terms: [url_words:test, domain_words:test, title:test, body:test]), functions: [{filter(*:*), function [org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction@73bb4f5e]}{filter(*:*), function [org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction@112dcf1c]}]))->cache(_type:page)],from[0],size[25]: Query Failed [Failed to execute main query]]; nested: ElasticsearchException[Missing value for field [lang_en]]; }{[9m4uVcf3TLmQ9Kr7z_fSpQ][text][4]: QueryPhaseExecutionException[[text][4]: query[filtered(function score (blended(terms: [url_words:test, domain_words:test, title:test, body:test]), functions: [{filter(*:*), function [org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction@b650549]}{filter(*:*), function [org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction@7fbe90f4]}]))->cache(_type:page)],from[0],size[25]: Query Failed [Failed to execute main query]]; nested: ElasticsearchException[Missing value for field [lang_en]]; }]"",
  ""status"": 500
}
",2956
874,37529203,"{
      ""query"": {
        ""function_score"": {
          ""query"": {
            ""multi_match"": {
              ""query"": ""test"",
              ""minimum_should_match"": ""-25%"",
              ""type"": ""cross_fields"",
                  ""tie_breaker"": 0.5,
                  ""fields"": [""title^3"", ""body"", ""url_words^2"", ""domain_words^8""]
            }

          },
          ""functions"": [{
                ""field_value_factor"": {
              ""field"": ""rank"",
              ""factor"": 1
            }
        },{
                        ""field_value_factor"": {
                ""field"": ""lang_en""
            }
                }]
        }
      },
      ""from"": 0,
      ""size"": 25
    }
",683
875,37529203,field_value_factor,18
876,37529203,"{
  ""error"": ""SearchPhaseExecutionException[Failed to execute phase [query], all shards failed; shardFailures {[9m4uVcf3TLmQ9Kr7z_fSpQ][text][0]: SearchParseException[[text][0]: from[-1],size[-1]: Parse Failure [Failed to parse source [{\n      \""query\"": {\n        \""function_score\"": {\n          \""query\"": {\n            \""multi_match\"": {\n              \""query\"": \""test\"",\n              \""minimum_should_match\"": \""-25%\"",\n              \""type\"": \""cross_fields\"",\n                  \""tie_breaker\"": 0.5,\n                  \""fields\"": [\""title^3\"", \""body\"", \""url_words^2\"", \""domain_words^8\""]\n            }\n\n          },\n          \""functions\"": [{\n                \""field_value_factor\"": {\n              \""field\"": \""rank\"",\n              \""factor\"": 1\n            }\n        },{\n                        \""field_value_factor\"": {\n                \""field\"": \""lang_en\"",\n                \""missing\"": 0\n            }\n                }]\n        }\n      },\n      \""from\"": 0,\n      \""size\"": 25\n    }\n]]]; nested: QueryParsingException[[text] field_value_factor query does not support [missing]]; }{[9m4uVcf3TLmQ9Kr7z_fSpQ][text][1]: SearchParseException[[text][1]: from[-1],size[-1]: Parse Failure [Failed to parse source [{\n      \""query\"": {\n        \""function_score\"": {\n          \""query\"": {\n            \""multi_match\"": {\n              \""query\"": \""test\"",\n              \""minimum_should_match\"": \""-25%\"",\n              \""type\"": \""cross_fields\"",\n                  \""tie_breaker\"": 0.5,\n                  \""fields\"": [\""title^3\"", \""body\"", \""url_words^2\"", \""domain_words^8\""]\n            }\n\n          },\n          \""functions\"": [{\n                \""field_value_factor\"": {\n              \""field\"": \""rank\"",\n              \""factor\"": 1\n            }\n        },{\n                        \""field_value_factor\"": {\n                \""field\"": \""lang_en\"",\n                \""missing\"": 0\n            }\n                }]\n        }\n      },\n      \""from\"": 0,\n      \""size\"": 25\n    }\n]]]; nested: QueryParsingException[[text] field_value_factor query does not support [missing]]; }{[9m4uVcf3TLmQ9Kr7z_fSpQ][text][2]: SearchParseException[[text][2]: from[-1],size[-1]: Parse Failure [Failed to parse source [{\n      \""query\"": {\n        \""function_score\"": {\n          \""query\"": {\n            \""multi_match\"": {\n              \""query\"": \""test\"",\n              \""minimum_should_match\"": \""-25%\"",\n              \""type\"": \""cross_fields\"",\n                  \""tie_breaker\"": 0.5,\n                  \""fields\"": [\""title^3\"", \""body\"", \""url_words^2\"", \""domain_words^8\""]\n            }\n\n          },\n          \""functions\"": [{\n                \""field_value_factor\"": {\n              \""field\"": \""rank\"",\n              \""factor\"": 1\n            }\n        },{\n                        \""field_value_factor\"": {\n                \""field\"": \""lang_en\"",\n                \""missing\"": 0\n            }\n                }]\n        }\n      },\n      \""from\"": 0,\n      \""size\"": 25\n    }\n]]]; nested: QueryParsingException[[text] field_value_factor query does not support [missing]]; }{[9m4uVcf3TLmQ9Kr7z_fSpQ][text][3]: SearchParseException[[text][3]: from[-1],size[-1]: Parse Failure [Failed to parse source [{\n      \""query\"": {\n        \""function_score\"": {\n          \""query\"": {\n            \""multi_match\"": {\n              \""query\"": \""test\"",\n              \""minimum_should_match\"": \""-25%\"",\n              \""type\"": \""cross_fields\"",\n                  \""tie_breaker\"": 0.5,\n                  \""fields\"": [\""title^3\"", \""body\"", \""url_words^2\"", \""domain_words^8\""]\n            }\n\n          },\n          \""functions\"": [{\n                \""field_value_factor\"": {\n              \""field\"": \""rank\"",\n              \""factor\"": 1\n            }\n        },{\n                        \""field_value_factor\"": {\n                \""field\"": \""lang_en\"",\n                \""missing\"": 0\n            }\n                }]\n        }\n      },\n      \""from\"": 0,\n      \""size\"": 25\n    }\n]]]; nested: QueryParsingException[[text] field_value_factor query does not support [missing]]; }{[9m4uVcf3TLmQ9Kr7z_fSpQ][text][4]: SearchParseException[[text][4]: from[-1],size[-1]: Parse Failure [Failed to parse source [{\n      \""query\"": {\n        \""function_score\"": {\n          \""query\"": {\n            \""multi_match\"": {\n              \""query\"": \""test\"",\n              \""minimum_should_match\"": \""-25%\"",\n              \""type\"": \""cross_fields\"",\n                  \""tie_breaker\"": 0.5,\n                  \""fields\"": [\""title^3\"", \""body\"", \""url_words^2\"", \""domain_words^8\""]\n            }\n\n          },\n          \""functions\"": [{\n                \""field_value_factor\"": {\n              \""field\"": \""rank\"",\n              \""factor\"": 1\n            }\n        },{\n                        \""field_value_factor\"": {\n                \""field\"": \""lang_en\"",\n                \""missing\"": 0\n            }\n                }]\n        }\n      },\n      \""from\"": 0,\n      \""size\"": 25\n    }\n]]]; nested: QueryParsingException[[text] field_value_factor query does not support [missing]]; }]"",
  ""status"": 400
}
",5227
877,37573985,"net.runtime_pollWait(0xf75c12d8, 0x72, 0x18690000)
    /usr/local/go/src/runtime/netpoll.go:157 +0x55 net.(*pollDesc).Wait(0x18a6bb38, 0x72, 0x0, 0x0)/usr/local/go/src/net/fd_poll_runtime.go:73 +0x35
    net.(*pollDesc).WaitRead(0x18a6bb38, 0x0, 0x0) _poll_runtime.go:78 +0x33
    net.(*netFD).Read(0x18a6bb00, 0x18cd6000, 0x1000, 0x1000, 0x0, 0xf75bc018, 0x18690000)/usr/local/go/src/net/fd_unix.go:232 +0x19anet.(*conn).Read(0x18cd4d78, 0x18cd6000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/net.go:172 +0xb9
    net/http.noteEOFReader.Read(0xf75fc018, 0x18cd4d78, 0x1889770c, 0x18cd6000, 0x1000, 0x1000, 0x2c3620, 0x0, 0x0)
    /usr/local/go/src/net/http/transport.go:1370 +0x55
    net/http.(*noteEOFReader).Read(0x18cd29e0, 0x18cd6000, 0x1000, 0x1000, 0x8056f0c, 0x0, 0x0)
    :126 +0xae
    bufio.(*Reader).fill(0x1881b7d0)
    /usr/local/go/src/bufio/bufio.go:97 +0x172
    bufio.(*Reader).Peek(0x1881b7d0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0)
    /usr/local/go/src/bufio/bufio.go:132 +0xad
    net/http.(*persistConn).readLoop(0x188976e0)
    /usr/local/go/src/net/http/transport.go:876 +0xe3
    created by net/http.(*Transport).dialConn
    /usr/local/go/src/net/http/transport.go:685 +0xabc
",1209
878,37573985,"  package main

 import (
  ""bufio""
  ""bytes""
  ""encoding/json""
  ""flag""
  ""fmt""
  ""net""
  ""net/http""
  ""time""
  )

  var (
    server             = flag.String(""deamon"", ""127.0.0.1:7070"", ""AMQP URI"")
    msgRoutingKey      = flag.String(""routingKey"", ""routingKey"", "" routing key"")
    msgexchange        = flag.String(""exchange"", ""exchange"", "" excahnge "")
    mywebserviceServer = flag.String(""mywebservice-server"", ""127.0.0.1:8080"",      ""mywebserviceServer:port "")
  )

   func init() {

     flag.Parse()
   }

   type TcpConnector struct {
    Outbound      chan string
    Inbound       chan string
    Addr          string
    ReconnectTime time.Duration
   }

type Message struct {
  RoutingKey string `json:""routingKey""`
  Exchange   string `json:""exchange""`
  Data       string `json:""data""`
}

func main() {
  start := time.Now()
  tcpClient := NewTcpConnector(*server)
  elapsed := time.Since(start)
  fmt.Println(""the connecting params are  %s"", *server, *msgexchange, *msgRoutingKey, *mywebserviceServer)
  fmt.Println(""connecting to daemon took %s"", elapsed)
   go func() {
    for msg := range tcpClient.Inbound {
        fmt.Println(msg)
        rabbitMessage := Message{
            RoutingKey: *msgRoutingKey,
            Exchange:   *msgexchange,
            Data:       msg,
        }
        mywebserviceMessageEndpoint :=    fmt.Sprintf(""http://%s/v1/messages/publish"", *mywebserviceServer)
        doPut(mywebserviceMessageEndpoint, &rabbitMessage)

      }
    }()

   select {}
 }

func doPut(url string, rabbitMessage *Message) {
 start := time.Now()
 b, err := json.Marshal(rabbitMessage)
 client := &http.Client{}
 request, err := http.NewRequest(""PUT"", url, bytes.NewBuffer(b))
 request.Header.Add(""Content-Type"", ""application/json"")
 request.Header.Add(""accept"", ""application/json"")
 response, err := client.Do(request)
 if err != nil {
    fmt.Println(err)
 } else {
    defer response.Body.Close()
    fmt.Println(""   "", response.StatusCode)
    hdr := response.Header
    for key, value := range hdr {
        fmt.Println(""   "", key, "":"", value)
    }

 }

 elapsed := time.Since(start)
 fmt.Println(""posting to mywebservice took %s"", elapsed)

}

func NewTcpConnector(addr string) *TcpConnector {
 tcpConnector := &TcpConnector{
    Addr:          addr,
    Outbound:      make(chan string, 100),
    Inbound:       make(chan string, 100),
    ReconnectTime: 30 * time.Second,
 }
 tcpConnector.connect()
 return tcpConnector
}

//keep connect private, will be in trouble if got called twice
func (tcpConnector *TcpConnector) connect() {
 conn, err := net.Dial(""tcp"", tcpConnector.Addr)
 if err != nil {
    fmt.Println(""Failed to make a connection"", err)
    time.Sleep(tcpConnector.ReconnectTime)
    tcpConnector.connect()
    return
 }

go func() {
    for msg := range tcpConnector.Outbound {

        _, err = fmt.Fprintf(conn, msg+""\n"")
        if err != nil {
            fmt.Println(""Failed sending event"", err)
            time.Sleep(tcpConnector.ReconnectTime)
            tcpConnector.connect()
            break
        }

    }
}()
go func() {
    reader := bufio.NewReaderSize(conn, 1024*1024)
    for {
        message, err := reader.ReadBytes('\n')
        if err != nil {
            break
        }
        fmt.Println(""Message Received: %s"", message)
        tcpConnector.Inbound <- string(message)
        fmt.Println(""Message sent to chan"")
    }

    fmt.Println(""reconnecting..."")
    tcpConnector.connect()
}()
fmt.Println(""Connected tcp"")
}
",3501
879,37738975,"    func Listen(h *pcap.Handle, c *Config, logger chan<- *dnslog) {
        qType := decodeQuery()
        OpCode := decodeOpCode()
        parser := gopacket.NewDecodingLayerParser(
            layers.LayerTypeEthernet,
            ð,
            &ip4,
            &ip6,
            &tcp,
            &udp,
            &dns,
            )

            decoded := make([]gopacket.LayerType, 0, 10)

        for {
            data, _, err := h.ZeroCopyReadPacketData()
            if err != nil {
                log.Println(""Error reading packet data "", err)
                continue
            }

            dnslog := &dnslog{}

            err = parser.DecodeLayers(data, &decoded)
            for _, layer := range decoded {
                switch layer {
                case layers.LayerTypeIPv4:
                    dnslog.Dst = ip4.DstIP.String()
                    dnslog.Src = ip4.SrcIP.String()
                case layers.LayerTypeIPv6:
                    dnslog.Dst = ip6.DstIP.String()
                    dnslog.Src = ip6.SrcIP.String()
                case layers.LayerTypeTCP:
                    dnslog.Srcport = fmt.Sprintf(""%d"", tcp.SrcPort)
                    dnslog.Dstport = fmt.Sprintf(""%d"", tcp.DstPort)
                case layers.LayerTypeUDP:
                    dnslog.Srcport = fmt.Sprintf(""%d"", udp.SrcPort)
                    dnslog.Dstport = fmt.Sprintf(""%d"", udp.DstPort)
                case layers.LayerTypeDNS:
                    dnslog.Truncated = dns.TC
                    for _, q := range dns.Questions {
                        dnslog.OpCode = OpCode[uint8(dns.OpCode)]
                        dnslog.QueryCount = dns.QDCount
                        dnslog.AnswerCount = dns.ANCount
                        }
                    }
            }
        logger <- dnslog
    }
",1826
880,37738975,"
[{
    ""src"": ""172.10.56.23"",
    ""src_port"": ""52464"",
    ""dst"": ""172.10.16.120"",
    ""dst_port"": ""53"",
    ""bytes"": 63,
    ""transport"": ""UDP"",
    ""reply_code"": ""Query"",
    ""query_count"": 1,
    ""answer_count"": 0,
    ""question"": [""helposx.apple.com""],
    ""query_type"": ""A"",
    ""answer"": null,
    ""truncated"": false
}, {
    ""src"": ""172.10.16.120"",
    ""src_port"": ""53"",
    ""dst"": ""172.10.56.23"",
    ""dst_port"": ""52464"",
    ""bytes"": 156,
    ""transport"": ""UDP"",
    ""reply_code"": ""Query"",
    ""query_count"": 1,
    ""answer_count"": 3,
    ""question"": [""helposx.apple.com""],
    ""query_type"": ""A"",
    ""answer"": [{
        ""response-name"": ""helposx.apple.com"",
        ""response-query_type"": ""CNAME"",
        ""response-ttl"": 4607,
        ""response-bytes"": 31,
        ""response-cname"": ""helposx.apple.com.edgekey.net"",
        ""response-soa"": {},
        ""response-srv"": {},
        ""response-mx"": {}
    }, {
        ""response-name"": ""helposx.apple.com.edgekey.net"",
        ""response-query_type"": ""CNAME"",
        ""response-ttl"": 33,
        ""response-bytes"": 22,
        ""response-cname"": ""e3167.e9.akamaiedge.net"",
        ""response-soa"": {},
        ""response-srv"": {},
        ""response-mx"": {}
    }, {
        ""response-name"": ""e3167.e9.akamaiedge.net"",
        ""response-query_type"": ""A"",
        ""response-ttl"": 13,
        ""response-bytes"": 4,
        ""response-ip"": ""104.98.20.77"",
        ""response-soa"": {},
        ""response-srv"": {},
        ""response-mx"": {}
    }],
    ""truncated"": false
}]
",1520
881,37738975,"[{
    ""src"": ""172.10.56.23"",
    ""src_port"": ""57188"",
    ""dst"": ""172.10.16.120"",
    ""dst_port"": ""53"",
    ""bytes"": 64,
    ""transport"": ""TCP"",
    ""reply_code"": """",
    ""query_count"": 0,
    ""answer_count"": 0,
    ""question"": null,
    ""query_type"": """",
    ""answer"": null,
    ""truncated"": false
}, {
    ""src"": ""172.10.16.120"",
    ""src_port"": ""53"",
    ""dst"": ""172.10.56.23"",
    ""dst_port"": ""57188"",
    ""bytes"": 60,
    ""transport"": ""TCP"",
    ""reply_code"": """",
    ""query_count"": 0,
    ""answer_count"": 0,
    ""question"": null,
    ""query_type"": """",
    ""answer"": null,
    ""truncated"": false
}, {
    ""src"": ""172.10.56.23"",
    ""src_port"": ""57188"",
    ""dst"": ""172.10.16.120"",
    ""dst_port"": ""53"",
    ""bytes"": 52,
    ""transport"": ""TCP"",
    ""reply_code"": """",
    ""query_count"": 0,
    ""answer_count"": 0,
    ""question"": null,
    ""query_type"": """",
    ""answer"": null,
    ""truncated"": false
}, {
    ""src"": ""172.10.56.23"",
    ""src_port"": ""57188"",
    ""dst"": ""172.10.16.120"",
    ""dst_port"": ""53"",
    ""bytes"": 86,
    ""transport"": ""TCP"",
    ""reply_code"": """",
    ""query_count"": 0,
    ""answer_count"": 0,
    ""question"": null,
    ""query_type"": """",
    ""answer"": null,
    ""truncated"": false
}, {
    ""src"": ""172.10.16.120"",
    ""src_port"": ""53"",
    ""dst"": ""172.10.56.23"",
    ""dst_port"": ""57188"",
    ""bytes"": 102,
    ""transport"": ""TCP"",
    ""reply_code"": """",
    ""query_count"": 0,
    ""answer_count"": 0,
    ""question"": null,
    ""query_type"": """",
    ""answer"": null,
    ""truncated"": false
}, {
    ""src"": ""172.10.56.23"",
    ""src_port"": ""57188"",
    ""dst"": ""172.10.16.120"",
    ""dst_port"": ""53"",
    ""bytes"": 52,
    ""transport"": ""TCP"",
    ""reply_code"": """",
    ""query_count"": 0,
    ""answer_count"": 0,
    ""question"": null,
    ""query_type"": """",
    ""answer"": null,
    ""truncated"": false
}]
",1814
882,37769882,.vim/,5
883,37769882,.vimrc,6
884,37769882,:GoErrCheck,11
885,37769882,GoBuild,7
886,37769882,"execute pathogen#infect()                                                                                                                                                                                                                     
syntax on                                                                                                                                                                                                                                     
filetype plugin indent on                                                                                                                                                                                                                     

set nu                                                                                                                                                                                                                                        
set completeopt-=preview                                                                                                                                                                                                                      
set encoding=utf-8              "" Set default encoding to UTF-8                                                                                                                                                                               
set autoread                                                                                                                                                                                                                                  
set laststatus=2                                                                                                                                                                                                                              
set noswapfile               "" Don't use swapfile                                                                                                                                                                                             
set nobackup "" Don't create annoying backup files                                                                                                                                                                                             
""                                                                                                                                                                                                                                             
nmap t :TagbarToggle                                                                                                                                                                                                              

autocmd FileType qf wincmd J                                                                                                                                                                                                                  
""CtrlP Settings                                                                                                                                                                                                                               
let g:ctrlp_show_hidden = 1                                                                                                                                                                                                                   
let g:neocomplete#enable_at_startup = 1                                                                                                                                                                                                       

let g:go_highlight_functions = 1                                                                                                                                                                                                              
let g:go_highlight_methods = 1                                                                                                                                                                                                                
let g:go_highlight_fields = 1                                                                                                                                                                                                                 
let g:go_highlight_structs = 1                                                                                                                                                                                                                
let g:go_highlight_interfaces = 1                                                                                                                                                                                                             
let g:go_highlight_operators = 1                                                                                                                                                                                                              
let g:go_highlight_build_constraints = 1                                                                                                                                                                                                      
let g:molokai_original = 1                                                                                                                                                                                                                    


let mapleader="",""                                                                                                                                                                                                              
colorscheme molokai    
",5977
887,37796977,"./configure -static -release -opensource -confirm-license -prefix /home/simon/projects/qt-5.6.1/ -nomake examples -nomake tests -no-cups -no-alsa -no-pulseaudio -no-egl -no-audio-backend -no-gstreamer -no-sql-mysql -no-sql-sqlite -skip qtwebengine -skip multimedia -skip qtwebsockets -skip qtwebchannel  -qt-zlib -qt-libpng -qt-libjpeg -qt-freetype -qt-harfbuzz -no-libproxy -qt-pcre -qt-xcb -qt-xkbcommon-x11 -dbus-runtime -no-mtdev -no-openssl -no-glib -no-xcursor -no-xfixes -no-xrandr -no-xinerama -no-xinput -no-iconv -no-largefile -skip qtwayland -skip qtwinextras -skip qtsvg -skip qtsensors -skip qtcanvas3d -skip qtconnectivity -no-icu
make -j2
make install
",667
888,37796977,"go build --ldflags '-extldflags ""-L/home/simon/projects/qt-5.6.1/lib -l qtpcre -l poly2tri -lqxcb -l qtharfbuzzng -l GL -l icuuc -l icuio -l icui18n -Wl,--no-as-needed -ldl""'
",175
889,37796977,"ldd frontend 

linux-vdso.so.1 (0x00007fffa295d000)

libstdc++.so.6 => /usr/lib/libstdc++.so.6 (0x00007f7006012000)

libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007f7005df5000)

libdl.so.2 => /usr/lib/libdl.so.2 (0x00007f7005bf1000)

libGL.so.1 => /usr/lib/libGL.so.1 (0x00007f7005980000)

libicuuc.so.57 => /usr/lib/libicuuc.so.57 (0x00007f70055d8000)

libicuio.so.57 => /usr/lib/libicuio.so.57 (0x00007f70053ca000)

libicui18n.so.57 => /usr/lib/libicui18n.so.57 (0x00007f7004f50000)

libm.so.6 => /usr/lib/libm.so.6 (0x00007f7004c4c000)

libgcc_s.so.1 => /usr/lib/libgcc_s.so.1 (0x00007f7004a36000)

libc.so.6 => /usr/lib/libc.so.6 (0x00007f7004695000)

/lib64/ld-linux-x86-64.so.2 (0x00007f7006399000)

libexpat.so.1 => /usr/lib/libexpat.so.1 (0x00007f7004469000)

libxcb-dri3.so.0 => /usr/lib/libxcb-dri3.so.0 (0x00007f7004266000)

libxcb-present.so.0 => /usr/lib/libxcb-present.so.0 (0x00007f7004063000)

libxcb-randr.so.0 => /usr/lib/libxcb-randr.so.0 (0x00007f7003e53000)

libxcb-xfixes.so.0 => /usr/lib/libxcb-xfixes.so.0 (0x00007f7003c4b000)

libxcb-render.so.0 => /usr/lib/libxcb-render.so.0 (0x00007f7003a3d000)

libxcb-shape.so.0 => /usr/lib/libxcb-shape.so.0 (0x00007f7003839000)

libxcb-sync.so.1 => /usr/lib/libxcb-sync.so.1 (0x00007f7003632000)

libxshmfence.so.1 => /usr/lib/libxshmfence.so.1 (0x00007f700342f000)

libglapi.so.0 => /usr/lib/libglapi.so.0 (0x00007f7003201000)

libXext.so.6 => /usr/lib/libXext.so.6 (0x00007f7002fef000)

libXdamage.so.1 => /usr/lib/libXdamage.so.1 (0x00007f7002dec000)

libXfixes.so.3 => /usr/lib/libXfixes.so.3 (0x00007f7002be6000)

libX11-xcb.so.1 => /usr/lib/libX11-xcb.so.1 (0x00007f70029e4000)

libX11.so.6 => /usr/lib/libX11.so.6 (0x00007f70026a2000)

libxcb-glx.so.0 => /usr/lib/libxcb-glx.so.0 (0x00007f7002486000)

libxcb-dri2.so.0 => /usr/lib/libxcb-dri2.so.0 (0x00007f7002281000)

libxcb.so.1 => /usr/lib/libxcb.so.1 (0x00007f7002058000)

libXxf86vm.so.1 => /usr/lib/libXxf86vm.so.1 (0x00007f7001e52000)

libdrm.so.2 => /usr/lib/libdrm.so.2 (0x00007f7001c43000)

libicudata.so.57 => /usr/lib/libicudata.so.57 (0x00007f70001c7000)

libXau.so.6 => /usr/lib/libXau.so.6 (0x00007f6ffffc3000)

libXdmcp.so.6 => /usr/lib/libXdmcp.so.6 (0x00007f6fffdbd000)
",2216
890,37796977,"./frontend 

2016/06/13 19:49:18 .:0: QFactoryLoader::QFactoryLoader() ignoring ""org.qt-project.Qt.QPA.QPlatformIntegrationFactoryInterface.5.3"" since plugins are disabled in static builds

2016/06/13 19:49:18 .:0: This application failed to start because it could not find or load the Qt platform plugin ""xcb""

in """".

Reinstalling the application may fix this problem.

SIGABRT: abort

PC=0x7f85aa7fc295 m=0

signal arrived during cgo execution

goroutine 1 [syscall, locked to thread]:

runtime.cgocall(0x7d9df0, 0xc82004be10, 0x0)

    /usr/lib/go/src/runtime/cgocall.go:123 +0x11b fp=0xc82004bde8 sp=0xc82004bdb8

gopkg.in/qml%2ev1._Cfunc_newGuiApplication()

    ??:0 +0x36 fp=0xc82004be10 sp=0xc82004bde8

gopkg.in/qml%2ev1.Run(0xc82000b240, 0x0, 0x0)

    /home/simon/go/src/gopkg.in/qml.v1/bridge.go:55 +0x10f fp=0xc82004be68 sp=0xc82004be10

main.main()

    /home/simon/go/src/github.com/ProtonMail/Desktop-Import/frontend/main.go:52 +0x2d3 fp=0xc82004bf50 sp=0xc82004be68

runtime.main()

    /usr/lib/go/src/runtime/proc.go:188 +0x2b0 fp=0xc82004bfa0 sp=0xc82004bf50

runtime.goexit()

    /usr/lib/go/src/runtime/asm_amd64.s:1998 +0x1 fp=0xc82004bfa8 sp=0xc82004bfa0

goroutine 17 [syscall, locked to thread]:

runtime.goexit()

    /usr/lib/go/src/runtime/asm_amd64.s:1998 +0x1

rax    0x0

rbx    0x7ffc69a64030

rcx    0x7f85aa7fc295

rdx    0x6

rdi    0x359b

rsi    0x359b

rbp    0x407b270

rsp    0x7ffc69a63cd8

r8     0x211f1e0

r9     0x8

r10    0x8

r11    0x202

r12    0x7ffc69a63ff0

r13    0x18

r14    0x7ffc69a64040

r15    0x7ffc69a64000

rip    0x7f85aa7fc295

rflags 0x202

cs     0x33

fs     0x0

gs     0x0
",1646
891,37816740,"
    
        <wsse:Security xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""
                       xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd""
                       soap:mustUnderstand=""1"">
            <wsse:BinarySecurityToken
                    EncodingType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary""
                    ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""
                    wsu:Id=""X509-16FE2A6FC1AFE42BE9146412186273511"">
                MIID7DCCAtSgAwIBAgIEAQAABDANBgkqhkiG9w0BAQsFADBYMQswCQYDVQQGEwJDWjEaMBgGA1UEAwwRR0ZSIEVFVCB0ZXN0IENBIDExLTArBgNVBAoMJEdlbmVyw6FsbsOtIGZpbmFuxI1uw60gxZllZGl0ZWxzdHbDrTAeFw0xNjA1MTkxMjQ4MjVaFw0xODA1MTkxMjQ4MjVaMFQxCzAJBgNVBAYTAkNaMRMwEQYDVQQDDApDWjAwMDAwMDE5MRowGAYDVQQKDBFQcsOhdm5pY2vDoSBvc29iYTEUMBIGA1UEBRMLVDAwMDAwMDAwMDQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDFCIfnLl3YjNyxM3y2FAVovKQMetfyyj/lfLY3DoN1z/8gaVRfcqTZbwh9Btg0HafSmrWBvfgjEC/pG9HNawYZ9nPE+WIP9bXkoOfDTmmVtX4n6OLi2Di+U7+FmPJzykV0ujsOsfcGnQ0f63xZYoGJIwLJuz3gmAF//DfnOeTT7OUZeOKobBSYkQOKv1j05QqQZ7HP+5oq7+hNylFrjuEi5OAeVgJAYScE4COvcpqPKpb7OeR9f78knYFffg5zp/6bi6qkP5uGYEuuQvbW1mATjoqbAWz8c7HNA56uNFlz8V+z9bL0f/xwQjgy4d+5qelTX46tq0vJ2XM9dJaF8ytJAgMBAAGjgcEwgb4wHgYDVR0RBBcwFYETZXBvZHBvcmFAZnMubWZjci5jejAfBgNVHSMEGDAWgBR6WvwNy+w2pg3aaRlmjJvvgsOpNDAdBgNVHQ4EFgQU8oKPLNlNY0/h8jWEmz3EZ1O3bBMwTAYDVR0gBEUwQzBBBgpghkgBZQMCATACMDMwMQYIKwYBBQUHAgIwJRojVGVudG8gY2VydGlmaWthdCBKRSBQT1VaRSBURVNUT1ZBQ0kwDgYDVR0PAQH/BAQDAgbAMA0GCSqGSIb3DQEBCwUAA4IBAQBVulEYg6noEHqAW3DfNWLvW9XdHFZQj3L5EE3Nwdd0CtMZm4/RZ/CvSENkk+GWv0YCUqHPJzhcKs0NETMKW7L6CI+hY17rD5SHhuoCYzSMlcuMA6gZJr8wIxSWerQrvuZ4uAUMistWG9cgwETZjkGU9JK+H98wdAm2co7WaRweDsNx04aSXagUMDAmRY/jNe7c8/HvwIdnXftbIl56wbYlYiCIG2qS+6lVO+09EIEP40kz1PXlqFZbPLCSlT2YsYiqizfkCX/Ka+AebJykAQ3pOqD6PQ+Y2AMAIRX8AypcN6Yj9p+oof9rda8boA8rA7wwzlJs/+ipWt2ceqPPuL9x
            
            
                
                    
                        
                    
                    
                    
                        
                            
                                <ec:InclusiveNamespaces xmlns:ec=""http://www.w3.org/2001/10/xml-exc-c14n#""
                                                        PrefixList=""""/>
                            
                        
                        
                        /CJj9686ARgbV/YmDrr+1yhcaJuXu022cADK/M8efQs=
                    
                
                
                    Ii+W0EB2V6GJo4jMGwK1HCRdt6+r9TkgfhXyAuY8FNCXhPOtfoUi/Bw31U4Hm7SLscM/8klrQI3Z2vSfdNe3oDi1cm2Qouv1sOBK17VSg/IgKN92BC8kUaoF5W5ZBEcZr0WHjDWasSYEerZQ3Q+ZIJzt6cbS+cLZfQkLFg1UDOi5qLUkWE1pQ9AVYCvwrOFj/hFQx5koQTpigyG/DPlyoh2xOh/DAh6U/P5p+IiQwwCMdo1Rh2czUVpRCr3Cnz97AlQ8G6IGAtWNykXorVYZ1tGnXEaRngzjsn5RE/zCcRkqRpFaiEQuYly1I6YtFOEYIPXskE5oMZkCLINebu1Law==
                
                
                    <wsse:SecurityTokenReference
                            xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""
                            xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd""
                            wsu:Id=""STR-16FE2A6FC1AFE42BE9146412186273513"">
                        <wsse:Reference URI=""#X509-16FE2A6FC1AFE42BE9146412186273511""
                                        ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""/>
                    
                
            
        
    
    <soap:Body xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd""
               wsu:Id=""id-16FE2A6FC1AFE42BE9146412186273614"">
        
            <Hlavicka dat_odesl=""2016-09-19T19:06:37+01:00"" prvni_zaslani=""false""
                      uuid_zpravy=""9edeb22b-4234-4047-869c-3a76f86c20d3""/>
            <Data celk_trzba=""34113.00"" cerp_zuct=""679.00"" cest_sluz=""5460.00"" dan1=""-172.39"" dan2=""-530.73""
                  dan3=""975.65"" dat_trzby=""2016-01-05T00:30:12+01:00"" dic_popl=""CZ00000019"" id_pokl=""/5546/RO24""
                  id_provoz=""273"" porad_cis=""0/6460/ZQ42"" pouzit_zboz1=""784.00"" pouzit_zboz2=""967.00""
                  pouzit_zboz3=""189.00"" rezim=""0"" urceno_cerp_zuct=""324.00"" zakl_dan1=""-820.92"" zakl_dan2=""-3538.20""
                  zakl_dan3=""9756.46"" zakl_nepodl_dph=""3036.00""/>
            
                
                    W7UlA4hXNsDLvCj/eeRAYeOAsNsgMSdltcJNIW98KQRsfspTMW0Lr/OGQgRHZfO5KjolZgzN3k9mgzrVoX2+N90fCNEnOri2kjrW5vzTgMK6OZ9IryAEg0xFZjjjCQ0qKsQsVi8OLQOn3ZnN/BUGG2SIduER+iIOrhfOmes7OXaa5/2jQSfPTHZHZ/Bxhqld3gL4PHvd7sevZYUupHpE1fM7Uw1+lu8i1YOdghZoMyOfKw7FcqvRJpHrW/JZL5Dr5iCgu5ClmhZrb3hZavsxlDG7P2cUhSQgmEVTxJ2n38q/Cf91KE8e52SODN4Q8BfncXpmtkQ7Go3KsRsY3xN7xg==
                
                1F1A2D90-4EAD34A8-411CFB0B-EB17616E-B2CE8114
            
        
    

",5001
892,37942285,go get,6
893,37942285,"jabongs-MacBook-Pro-4:florest debraj$ go get ./...
go install github.com/jabong/florest/src/common/config: open /var/folders/lp/3q9_2mn51hd9s4yj_jcf3jxm0000gp/T/go-build823644730/github.com/jabong/florest/src/common/config.a: no such file or directory
go install github.com/jabong/florest/src/common/utils/responseheaders: open /var/folders/lp/3q9_2mn51hd9s4yj_jcf3jxm0000gp/T/go-build823644730/github.com/jabong/florest/src/common/utils/responseheaders.a: no such file or directory
go install github.com/jabong/florest/src/service: open /var/folders/lp/3q9_2mn51hd9s4yj_jcf3jxm0000gp/T/go-build823644730/github.com/jabong/florest/src/service.a: no such file or directory
",672
894,37942285,-x,2
895,37942285,"jabongs-MacBook-Pro-4:florest debraj$ go get -x ./...
WORK=/var/folders/lp/3q9_2mn51hd9s4yj_jcf3jxm0000gp/T/go-build665863426
mkdir -p $WORK/github.com/jabong/floRest/src/examples/_obj/
mkdir -p $WORK/github.com/jabong/floRest/src/
cd /Users/debraj/golang/src/github.com/jabong/floRest/src/examples
/usr/local/go/pkg/tool/darwin_amd64/compile -o $WORK/github.com/jabong/floRest/src/examples.a -trimpath $WORK -p github.com/jabong/floRest/src/examples -complete -buildid febe48d3c570d8539844891977fbdc206dc458b4 -D _/Users/debraj/golang/src/github.com/jabong/floRest/src/examples -I $WORK -I /Users/debraj/golang/pkg/darwin_amd64 -pack ./api_definition.go ./data_structures.go ./hello_world.go ./hello_world_health_checker.go ./hello_world_multipe_errors.go ./swagger.go
mkdir -p $WORK/github.com/jabong/floRest/src/service/_obj/
mkdir -p $WORK/github.com/jabong/florest/src/examples/_obj/
mkdir -p $WORK/github.com/jabong/florest/src/
cd /Users/debraj/golang/src/github.com/jabong/floRest/src/service
/usr/local/go/pkg/tool/darwin_amd64/compile -o $WORK/github.com/jabong/floRest/src/service.a -trimpath $WORK -p github.com/jabong/floRest/src/service -complete -buildid f55b565340e2d0d690f5de8bd424fffb8895a331 -D _/Users/debraj/golang/src/github.com/jabong/floRest/src/service -I $WORK -I /Users/debraj/golang/pkg/darwin_amd64 -pack ./api_interface.go ./business_logic_executor.go ./config_manager.go ./constants.go ./dynamic_config_manager.go ./health_checker.go ./http_response_creator.go ./init_manager.go ./monitor_helper.go ./service_register.go ./service_version_helper.go ./service_workflow_data.go ./uri_interpreter.go ./web_server.go
cd /Users/debraj/golang/src/github.com/jabong/florest/src/examples
/usr/local/go/pkg/tool/darwin_amd64/compile -o $WORK/github.com/jabong/florest/src/examples.a -trimpath $WORK -p github.com/jabong/florest/src/examples -complete -buildid febe48d3c570d8539844891977fbdc206dc458b4 -D _/Users/debraj/golang/src/github.com/jabong/florest/src/examples -I $WORK -I /Users/debraj/golang/pkg/darwin_amd64 -pack ./api_definition.go ./data_structures.go ./hello_world.go ./hello_world_health_checker.go ./hello_world_multipe_errors.go ./swagger.go
mkdir -p $WORK/github.com/jabong/florest/src/examples/cachestrategy/_obj/
mkdir -p $WORK/github.com/jabong/florest/src/examples/
cd /Users/debraj/golang/src/github.com/jabong/florest/src/examples/cachestrategy
/usr/local/go/pkg/tool/darwin_amd64/compile -o $WORK/github.com/jabong/florest/src/examples/cachestrategy.a -trimpath $WORK -p github.com/jabong/florest/src/examples/cachestrategy -complete -buildid c16efba4536c81f8b5b9f0090f909c0b3c71383c -D _/Users/debraj/golang/src/github.com/jabong/florest/src/examples/cachestrategy -I $WORK -I /Users/debraj/golang/pkg/darwin_amd64 -pack ./api_definition.go ./cache_strategy_user.go ./sample_db_adapter.go
mkdir -p $WORK/github.com/jabong/florest/src/service/_obj/
cd /Users/debraj/golang/src/github.com/jabong/florest/src/service
/usr/local/go/pkg/tool/darwin_amd64/compile -o $WORK/github.com/jabong/florest/src/service.a -trimpath $WORK -p github.com/jabong/florest/src/service -complete -buildid f55b565340e2d0d690f5de8bd424fffb8895a331 -D _/Users/debraj/golang/src/github.com/jabong/florest/src/service -I $WORK -I /Users/debraj/golang/pkg/darwin_amd64 -pack ./api_interface.go ./business_logic_executor.go ./config_manager.go ./constants.go ./dynamic_config_manager.go ./health_checker.go ./http_response_creator.go ./init_manager.go ./monitor_helper.go ./service_register.go ./service_version_helper.go ./service_workflow_data.go ./uri_interpreter.go ./web_server.go
mkdir -p /Users/debraj/golang/pkg/darwin_amd64/github.com/jabong/floRest/src/
mv $WORK/github.com/jabong/floRest/src/examples.a /Users/debraj/golang/pkg/darwin_amd64/github.com/jabong/floRest/src/examples.a
mkdir -p /Users/debraj/golang/pkg/darwin_amd64/github.com/jabong/florest/src/
cp $WORK/github.com/jabong/florest/src/examples.a /Users/debraj/golang/pkg/darwin_amd64/github.com/jabong/florest/src/examples.a
go install github.com/jabong/florest/src/examples: open /var/folders/lp/3q9_2mn51hd9s4yj_jcf3jxm0000gp/T/go-build665863426/github.com/jabong/florest/src/examples.a: no such file or directory
mkdir -p /Users/debraj/golang/pkg/darwin_amd64/github.com/jabong/florest/src/examples/
mv $WORK/github.com/jabong/florest/src/examples/cachestrategy.a /Users/debraj/golang/pkg/darwin_amd64/github.com/jabong/florest/src/examples/cachestrategy.a
mv $WORK/github.com/jabong/floRest/src/service.a /Users/debraj/golang/pkg/darwin_amd64/github.com/jabong/floRest/src/service.a
mkdir -p $WORK/github.com/jabong/florest/_obj/
mkdir -p $WORK/github.com/jabong/florest/_obj/exe/
cd /Users/debraj/golang/src/github.com/jabong/florest
/usr/local/go/pkg/tool/darwin_amd64/compile -o $WORK/github.com/jabong/florest.a -trimpath $WORK -p main -complete -buildid fb73c44c8d0536fc3134f24ae052fdb67036f537 -D _/Users/debraj/golang/src/github.com/jabong/florest -I $WORK -I /Users/debraj/golang/pkg/darwin_amd64 -pack ./main.go
mkdir -p $WORK/github.com/jabong/florest/src/test/servicetest/_obj/
mkdir -p $WORK/github.com/jabong/florest/src/test/
cd /Users/debraj/golang/src/github.com/jabong/florest/src/test/servicetest
/usr/local/go/pkg/tool/darwin_amd64/compile -o $WORK/github.com/jabong/florest/src/test/servicetest.a -trimpath $WORK -p github.com/jabong/florest/src/test/servicetest -complete -buildid 9936e7e44a8331913a166a228aa8e088d0b05adf -D _/Users/debraj/golang/src/github.com/jabong/florest/src/test/servicetest -I $WORK -I /Users/debraj/golang/pkg/darwin_amd64 -pack ./config_initialize.go ./logger_initialize.go ./service_initialize.go ./service_test_helper.go ./test_web_server.go
cp $WORK/github.com/jabong/florest/src/service.a /Users/debraj/golang/pkg/darwin_amd64/github.com/jabong/florest/src/service.a
go install github.com/jabong/florest/src/service: open /var/folders/lp/3q9_2mn51hd9s4yj_jcf3jxm0000gp/T/go-build665863426/github.com/jabong/florest/src/service.a: no such file or directory
cd .
/usr/local/go/pkg/tool/darwin_amd64/link -o $WORK/github.com/jabong/florest/_obj/exe/a.out -L $WORK -L /Users/debraj/golang/pkg/darwin_amd64 -extld=clang -buildmode=exe -buildid=fb73c44c8d0536fc3134f24ae052fdb67036f537 $WORK/github.com/jabong/florest.a
mkdir -p /Users/debraj/golang/pkg/darwin_amd64/github.com/jabong/florest/src/test/
mv $WORK/github.com/jabong/florest/src/test/servicetest.a /Users/debraj/golang/pkg/darwin_amd64/github.com/jabong/florest/src/test/servicetest.a
mkdir -p /Users/debraj/golang/bin/
mv $WORK/github.com/jabong/florest/_obj/exe/a.out /Users/debraj/golang/bin/florest
",6610
896,37948574,"package controllers

import (
    ""errors""
    ""mobilebid/billable""
    db ""mobilebid/database""
    ""mobilebid/stripe""
    ""net/http""
    ""os""
    ""strconv""
    ""sync""
    ""time""

    log ""github.com/Sirupsen/logrus""
    ""github.com/gorilla/mux""
)

var (
    errBillableID     = errors.New(""It looks like there was an error while getting your billable ID. Do you have a credit card set up?"")
    errWinningItems   = errors.New(""It looks like there was an error while gathering your winning items. Please contact an event rep."")
    errAcctInfo       = errors.New(""We had some trouble getting the account information for the event. Please contact an event rep."")
    errLoggingTrans   = errors.New(""It looks like we had some sort of issue while logging your transaction. Please contact an event rep."")
    errParsingURL     = errors.New(""We had some issue looking at the URL."")
    errStripeIssue    = errors.New(""It looks like there was some kind of issue while talking with Stripe. If you were in the middle of a transaction, this doesn't mean the transaction was cancelled. Take a look at your transactions and/or contact an event rep."")
    errItemsPurchased = errors.New(""One or more of the items you're trying to purchase have already been purchased. If this doesn't sound right, please contact an event rep."")
)

func createLogCtx(bidderID, eventID int) *log.Entry {
    return log.WithFields(log.Fields{
        ""bidderID"": bidderID,
        ""eventID"":  eventID,
    })
}

var wg sync.WaitGroup

const gorutineCt = 6

//PurchaseItems purchases items from the event for the bidder and sends the funds to the customer
//  In order for PurchaseItems to work:
//      1. Bidder must have a customer account set up in Stripe
//      2. Event owner needs to have their Stripe registered with the apps Stripe account
//      3. Item must not have been purchased before (ever)
func PurchaseItems(dB db.AppDB) http.HandlerFunc {
    return http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {

        ps := mux.Vars(req)

        eventID, err := strconv.Atoi(ps[""eventID""])
        if err != nil {
            log.Error(err.Error())
            res.Write(ResErr(errParsingURL.Error()))
            return
        }

        bidderID, err := strconv.Atoi(ps[""bidderID""])
        if err != nil {
            log.Error(err.Error())
            res.Write(ResErr(errParsingURL.Error()))
            return
        }

        itemsChan := make(chan []db.ItemWon)
        billableBidderIDChan := make(chan string)
        creditableAcctChan := make(chan string)
        errsChan := make(chan error, gorutineCt)
        wg.Add(gorutineCt)

        logCtx := createLogCtx(bidderID, eventID)

        acct := stripe.New(os.Getenv(""SECRET_KEY""), os.Getenv(""PUBLISHABLE_KEY""))

        go func() {
            id, e := dB.GetBidderBillableID(bidderID)
            if e != nil {
                logCtx.Error(e.Error())
                errsChan <- errBillableID
                billableBidderIDChan <- id
            } else {
                errsChan <- nil
                billableBidderIDChan <- id
            }
            wg.Done()
        }()

        go func() {
            i, e := dB.GetWinningItemsForBidder(bidderID, eventID)
            if e != nil {
                logCtx.Error(e.Error())
                errsChan <- errWinningItems
                itemsChan <- i
            } else {
                errsChan <- nil
                itemsChan <- i
            }
            wg.Done()
        }()

        go func() {
            a, e := dB.GetCreditableAccountFromEvent(eventID)
            if e != nil {
                logCtx.Error(e.Error())
                errsChan <- errAcctInfo
                creditableAcctChan <- a
            } else {
                errsChan <- nil
                creditableAcctChan <- a
            }
            wg.Done()
        }()

        go func() {
            items := <-itemsChan
            for _, val := range items {
                e := dB.CheckIfItemPurchased(val.ItemID)
                if e != nil {
                    logCtx.WithFields(log.Fields{
                        ""itemID"":     val.ItemID,
                        ""_timestamp"": time.Now(),
                    }).Error(e.Error())
                    errsChan <- errItemsPurchased
                    itemsChan <- items
                    wg.Done()
                    return
                }
            }
            errsChan <- nil
            itemsChan <- items
            wg.Done() //SKIPPED
        }()

        go func() {
            billableBidderID := <-billableBidderIDChan
            e := acct.BuyerIsBillable(billableBidderID)
            if e != nil {
                logCtx.Error(e.Error())
                errsChan <- errStripeIssue
                billableBidderIDChan <- billableBidderID
            } else {
                errsChan <- nil
                billableBidderIDChan <- billableBidderID
            }
            wg.Done()
        }()

        go func() {
            creditableAcct := <-creditableAcctChan
            e := acct.CanReceiveFunds(creditableAcct)
            if e != nil {
                logCtx.Error(e.Error())
                errsChan <- errStripeIssue
                creditableAcctChan <- creditableAcct
            } else {
                errsChan <- nil
                creditableAcctChan <- creditableAcct
            }
            wg.Done()
        }()

        wg.Wait()
        close(errsChan)

        if err = checkConcurrentErrs(errsChan); err != nil {
            logCtx.Error(err.Error())
            res.Write(ResErr(err.Error()))
            return
        }

        items := <-itemsChan
        amount := addItems(items)
        appFee := calculateFee(amount, .03) //TODO: Store this somewhere where it can be edited without having to restart the app.

        invoice := billable.BillObject{
            Desc:     ""Test Charge"", //TODO: Generate this description from the event, items and bidder somehow.
            Amount:   amount,
            Currency: ""usd"",
            Dest:     <-creditableAcctChan,
            Fee:      appFee,
            Meta:     createItemsList(items),
            Customer: <-billableBidderIDChan,
        }

        trans, err := acct.ChargeBidder(invoice)
        if err != nil {
            logCtx.Error(err.Error())
            res.Write(ResErr(errStripeIssue.Error()))
            return
        }

        logCtx.WithFields(log.Fields{
            ""stripeTransID"": trans.TransID,
            ""itemcCount"":    len(items),
        }).Info(""Transferred funds from bidder to client"")

        dbTrans := db.Transaction{
            TransID:  trans.TransID,
            UserID:   5,
            BidderID: bidderID,
            EventID:  eventID,
            Amount:   int64(amount),
            AppFee:   int64(appFee),
            Desc:     ""Some test order"",
            Status:   ""completed"",
        }

        orderID, err := dB.InsertTransaction(dbTrans)
        if err != nil {
            logCtx.WithFields(log.Fields{
                ""stripeTransID"": dbTrans.TransID,
                ""_timestamp"":    time.Now(),
            }).Error(err.Error())
            res.Write(ResErr(errLoggingTrans.Error()))
            return
        }

        for it, val := range items {
            i := db.TransactionLine{
                OrderID: orderID,
                ItemID:  val.ItemID,
                Amount:  uint64(val.Bid * 100), //Must do this since the bid is in dollars but the amount is pennies
                Line:    it,
            }

            err := dB.InsertTransactionLine(i)
            if err != nil {
                logCtx.WithFields(log.Fields{
                    ""stripeTransID"": dbTrans.TransID,
                    ""lineNumber"":    i,
                    ""_timestamp"":    time.Now(),
                }).Error(err.Error())
                res.Write(ResErr(errLoggingTrans.Error()))
                return
            }
        }

        logCtx.WithField(""orderID"", orderID).Info(""Order created"")

        //TODO: Send receipt to buyer.
        res.Write(ResOK(trans.TransID))

    })
}
",8135
897,37970501,"
goroutine 1495590 [running]:
runtime/pprof.writeGoroutineStacks(0x324e0100, 0x11ad6060, 0x0, 0x0)
    c:/go/src/runtime/pprof/pprof.go:516 +0x84
runtime/pprof.writeGoroutine(0x324e0100, 0x11ad6060, 0x2, 0x0, 0x0)
    c:/go/src/runtime/pprof/pprof.go:505 +0x3c
runtime/pprof.(*Profile).WriteTo(0xc71770, 0x324e0100, 0x11ad6060, 0x2, 0x0, 0x0)
    c:/go/src/runtime/pprof/pprof.go:236 +0xb4
github.com/astaxie/beego/toolbox.ProcessInput(0x11b3a110, 0x10, 0x324e0100, 0x11ad6060)
    D:/goproject/src/github.com/astaxie/beego/toolbox/profile.go:42 +0x2fd
github.com/astaxie/beego.profIndex(0x324e0068, 0x11838080, 0x117de000)
    D:/goproject/src/github.com/astaxie/beego/admin.go:275 +0x147
net/http.HandlerFunc.ServeHTTP(0xa3e7f4, 0x324e0068, 0x11838080, 0x117de000)
    c:/go/src/net/http/server.go:1422 +0x34
net/http.(*ServeMux).ServeHTTP(0x11683cc0, 0x324e0068, 0x11838080, 0x117de000)
    c:/go/src/net/http/server.go:1699 +0x133
net/http.serverHandler.ServeHTTP(0x1189c080, 0x324e0068, 0x11838080, 0x117de000)
    c:/go/src/net/http/server.go:1862 +0x156
net/http.(*conn).serve(0x11ad6000)
    c:/go/src/net/http/server.go:1361 +0xc05
created by net/http.(*Server).Serve
    c:/go/src/net/http/server.go:1910 +0x343

goroutine 1 [chan receive, 127 minutes]:
github.com/astaxie/beego.(*App).Run(0x1169e550)
    D:/goproject/src/github.com/astaxie/beego/app.go:182 +0x85a
github.com/astaxie/beego.Run(0x0, 0x0, 0x0)
    D:/goproject/src/github.com/astaxie/beego/beego.go:66 +0x130
main.main()
    D:/goproject/src/github.com/rayingtech/restaurant/main.go:53 +0x27

goroutine 17 [syscall, 127 minutes, locked to thread]:
runtime.goexit()
    c:/go/src/runtime/asm_386.s:1662 +0x1

goroutine 5 [syscall, 127 minutes]:
os/signal.loop()
    c:/go/src/os/signal/signal_unix.go:22 +0x1a
created by os/signal.init.1
    c:/go/src/os/signal/signal_unix.go:28 +0x36

goroutine 6 [chan receive, 127 minutes]:
database/sql.(*DB).connectionOpener(0x116deb40)
    c:/go/src/database/sql/sql.go:634 +0x3c
created by database/sql.Open
    c:/go/src/database/sql/sql.go:481 +0x276

goroutine 7 [IO wait]:
net.runtime_pollWait(0x31995d40, 0x72, 0x11b3a070)
    c:/go/src/runtime/netpoll.go:157 +0x55
net.(*pollDesc).Wait(0x118aa0d0, 0x72, 0x0, 0x0)
    c:/go/src/net/fd_poll_runtime.go:73 +0x35
net.(*ioSrv).ExecIO(0x11862998, 0x118aa038, 0x962b48, 0x8, 0x11b3a060, 0x11b822a0, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:182 +0x122
net.(*netFD).acceptOne(0x118aa000, 0x11b82000, 0x2, 0x2, 0x118aa038, 0x31690000, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:564 +0x1d4
net.(*netFD).accept(0x118aa000, 0x0, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:594 +0x11f
net.(*TCPListener).AcceptTCP(0x11890018, 0x118c2e3c, 0x0, 0x0)
    c:/go/src/net/tcpsock_posix.go:254 +0x47
net/http.tcpKeepAliveListener.Accept(0x11890018, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:2135 +0x3d
net/http.(*Server).Serve(0x1189c080, 0x31995e30, 0x11890018, 0x0, 0x0)
    c:/go/src/net/http/server.go:1887 +0x98
net/http.(*Server).ListenAndServe(0x1189c080, 0x0, 0x0)
    c:/go/src/net/http/server.go:1877 +0xe4
net/http.ListenAndServe(0x11892020, 0x5, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:1967 +0x7a
github.com/astaxie/beego.(*adminApp).Run(0x1169e548)
    D:/goproject/src/github.com/astaxie/beego/admin.go:419 +0x581
created by github.com/astaxie/beego.registerAdmin
    D:/goproject/src/github.com/astaxie/beego/hooks.go:90 +0x4d

goroutine 8 [IO wait, 3 minutes]:
net.runtime_pollWait(0x31995db8, 0x72, 0x1184d840)
    c:/go/src/runtime/netpoll.go:157 +0x55
net.(*pollDesc).Wait(0x11833870, 0x72, 0x0, 0x0)
    c:/go/src/net/fd_poll_runtime.go:73 +0x35
net.(*ioSrv).ExecIO(0x11862998, 0x118337d8, 0x962b48, 0x8, 0x1184d830, 0x119e8540, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:182 +0x122
net.(*netFD).acceptOne(0x118337a0, 0x119e8460, 0x2, 0x2, 0x118337d8, 0x316904a8, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:564 +0x1d4
net.(*netFD).accept(0x118337a0, 0x0, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:594 +0x11f
net.(*TCPListener).AcceptTCP(0x118629a8, 0x118c5ea8, 0x0, 0x0)
    c:/go/src/net/tcpsock_posix.go:254 +0x47
net/http.tcpKeepAliveListener.Accept(0x118629a8, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:2135 +0x3d
net/http.(*Server).Serve(0x11688f80, 0x31995e30, 0x118629a8, 0x0, 0x0)
    c:/go/src/net/http/server.go:1887 +0x98
net/http.(*Server).ListenAndServe(0x11688f80, 0x0, 0x0)
    c:/go/src/net/http/server.go:1877 +0xe4
github.com/astaxie/beego.(*App).Run.func4(0x1169e550, 0x11854c00, 0x5, 0x118841c0)
    D:/goproject/src/github.com/astaxie/beego/app.go:174 +0x35c
created by github.com/astaxie/beego.(*App).Run
    D:/goproject/src/github.com/astaxie/beego/app.go:180 +0x83e

goroutine 9 [chan receive, locked to thread]:
net.(*ioSrv).ProcessRemoteIO(0x11862998)
    c:/go/src/net/fd_windows.go:138 +0xcc
created by net.startServer
    c:/go/src/net/fd_windows.go:238 +0xc9

goroutine 10 [chan receive, 3 minutes, locked to thread]:
net.(*ioSrv).ProcessRemoteIO(0x118629a0)
    c:/go/src/net/fd_windows.go:138 +0xcc
created by net.startServer
    c:/go/src/net/fd_windows.go:240 +0x11e

goroutine 353800 [IO wait, 114 minutes]:
net.runtime_pollWait(0x31995ae8, 0x72, 0x11b480e0)
    c:/go/src/runtime/netpoll.go:157 +0x55
net.(*pollDesc).Wait(0x1190b170, 0x72, 0x0, 0x0)
    c:/go/src/net/fd_poll_runtime.go:73 +0x35
net.(*ioSrv).ExecIO(0x11862998, 0x1190b0d8, 0x93ce80, 0x7, 0xa3ea10, 0x0, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:182 +0x122
net.(*netFD).Read(0x1190b0a0, 0x1196e000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:463 +0x129
net.(*conn).Read(0x117c3648, 0x1196e000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/net/net.go:172 +0xb9
net/http.(*liveSwitchReader).Read(0x11ad6684, 0x1196e000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:219 +0x84
io.(*LimitedReader).Read(0x11b480b0, 0x1196e000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/io/io.go:427 +0xcb
bufio.(*Reader).fill(0x11685b90)
    c:/go/src/bufio/bufio.go:97 +0x172
bufio.(*Reader).ReadSlice(0x11685b90, 0x1163380a, 0x0, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/bufio/bufio.go:328 +0x1b4
bufio.(*Reader).ReadLine(0x11685b90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/bufio/bufio.go:357 +0x4b
net/textproto.(*Reader).readLineSlice(0x11951a40, 0x0, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/net/textproto/reader.go:55 +0x59
net/textproto.(*Reader).ReadLine(0x11951a40, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/net/textproto/reader.go:36 +0x39
net/http.ReadRequest(0x11685b90, 0x11b47340, 0x0, 0x0)
    c:/go/src/net/http/request.go:653 +0x9a
net/http.(*conn).readRequest(0x11ad6660, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:633 +0x368
net/http.(*conn).serve(0x11ad6660)
    c:/go/src/net/http/server.go:1319 +0x7a9
created by net/http.(*Server).Serve
    c:/go/src/net/http/server.go:1910 +0x343

goroutine 1421744 [IO wait, 7 minutes]:
net.runtime_pollWait(0x31995b60, 0x72, 0x11841650)
    c:/go/src/runtime/netpoll.go:157 +0x55
net.(*pollDesc).Wait(0x119f0fb0, 0x72, 0x0, 0x0)
    c:/go/src/net/fd_poll_runtime.go:73 +0x35
net.(*ioSrv).ExecIO(0x11862998, 0x119f0f18, 0x93ce80, 0x7, 0xa3ea10, 0x4c201b, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:182 +0x122
net.(*netFD).Read(0x119f0ee0, 0x11aac000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:463 +0x129
net.(*conn).Read(0x11863570, 0x11aac000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/net/net.go:172 +0xb9
net/http.(*liveSwitchReader).Read(0x1193d764, 0x11aac000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:219 +0x84
io.(*LimitedReader).Read(0x11893310, 0x11aac000, 0x1000, 0x1000, 0x27, 0x0, 0x0)
    c:/go/src/io/io.go:427 +0xcb
bufio.(*Reader).fill(0x11b0a060)
    c:/go/src/bufio/bufio.go:97 +0x172
bufio.(*Reader).Peek(0x11b0a060, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/bufio/bufio.go:132 +0xad
net/http.(*conn).readRequest(0x1193d740, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:629 +0x30e
net/http.(*conn).serve(0x1193d740)
    c:/go/src/net/http/server.go:1319 +0x7a9
created by net/http.(*Server).Serve
    c:/go/src/net/http/server.go:1910 +0x343

goroutine 1495604 [IO wait, 3 minutes]:
net.runtime_pollWait(0x31995908, 0x72, 0x11855690)
    c:/go/src/runtime/netpoll.go:157 +0x55
net.(*pollDesc).Wait(0x119fda30, 0x72, 0x0, 0x0)
    c:/go/src/net/fd_poll_runtime.go:73 +0x35
net.(*ioSrv).ExecIO(0x11862998, 0x119fd998, 0x93ce80, 0x7, 0xa3ea10, 0x4027a5, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:182 +0x122
net.(*netFD).Read(0x119fd960, 0x11968000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:463 +0x129
net.(*conn).Read(0x117c2fd0, 0x11968000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/net/net.go:172 +0xb9
net/http.(*liveSwitchReader).Read(0x117077c4, 0x11968000, 0x1000, 0x1000, 0x449a00, 0x0, 0x0)
    c:/go/src/net/http/server.go:219 +0x84
io.(*LimitedReader).Read(0x1184d220, 0x11968000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/io/io.go:427 +0xcb
bufio.(*Reader).fill(0x11b6a120)
    c:/go/src/bufio/bufio.go:97 +0x172
bufio.(*Reader).Read(0x11b6a120, 0x11b68400, 0x21, 0x200, 0x1000, 0x0, 0x0)
    c:/go/src/bufio/bufio.go:207 +0x1b9
io.(*LimitedReader).Read(0x11840ee0, 0x11b68400, 0x21, 0x200, 0x11b17994, 0x0, 0x0)
    c:/go/src/io/io.go:427 +0xcb
net/http.(*body).readLocked(0x11a212f0, 0x11b68400, 0x200, 0x200, 0x1000, 0x0, 0x0)
    c:/go/src/net/http/transfer.go:632 +0x7f
net/http.(*body).Read(0x11a212f0, 0x11b68400, 0x200, 0x200, 0x0, 0x0, 0x0)
    c:/go/src/net/http/transfer.go:624 +0xe8
net/http.(*expectContinueReader).Read(0x11840ef0, 0x11b68400, 0x200, 0x200, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:569 +0x100
io.(*LimitedReader).Read(0x1184d510, 0x11b68400, 0x200, 0x200, 0x200, 0x0, 0x0)
    c:/go/src/io/io.go:427 +0xcb
bytes.(*Buffer).ReadFrom(0x11b17ab4, 0x32520080, 0x1184d510, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/bytes/buffer.go:173 +0x1c3
io/ioutil.readAll(0x32520080, 0x1184d510, 0x200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/io/ioutil/ioutil.go:33 +0x136
io/ioutil.ReadAll(0x32520080, 0x1184d510, 0x0, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/io/ioutil/ioutil.go:42 +0x51
github.com/astaxie/beego/context.(*BeegoInput).CopyBody(0x11b38340, 0x4000000, 0x0, 0x0, 0x0, 0x0)
    D:/goproject/src/github.com/astaxie/beego/context/input.go:337 +0xd4
github.com/astaxie/beego.(*ControllerRegister).ServeHTTP(0x116edd60, 0x324e0068, 0x11ab1980, 0x11ae7b20)
    D:/goproject/src/github.com/astaxie/beego/router.go:652 +0x2cc0
net/http.serverHandler.ServeHTTP(0x11688f80, 0x324e0068, 0x11ab1980, 0x11ae7b20)
    c:/go/src/net/http/server.go:1862 +0x156
net/http.(*conn).serve(0x117077a0)
    c:/go/src/net/http/server.go:1361 +0xc05
created by net/http.(*Server).Serve
    c:/go/src/net/http/server.go:1910 +0x343
",10708
898,37970501,"goroutine 1359760 [running]:
runtime/pprof.writeGoroutineStacks(0x324e0100, 0x117a3f80, 0x0, 0x0)
    c:/go/src/runtime/pprof/pprof.go:516 +0x84
runtime/pprof.writeGoroutine(0x324e0100, 0x117a3f80, 0x2, 0x0, 0x0)
    c:/go/src/runtime/pprof/pprof.go:505 +0x3c
runtime/pprof.(*Profile).WriteTo(0xc71770, 0x324e0100, 0x117a3f80, 0x2, 0x0, 0x0)
    c:/go/src/runtime/pprof/pprof.go:236 +0xb4
github.com/astaxie/beego/toolbox.ProcessInput(0x1194bc80, 0x10, 0x324e0100, 0x117a3f80)
    D:/goproject/src/github.com/astaxie/beego/toolbox/profile.go:42 +0x2fd
github.com/astaxie/beego.profIndex(0x324e0068, 0x117e4080, 0x11a19340)
    D:/goproject/src/github.com/astaxie/beego/admin.go:275 +0x147
net/http.HandlerFunc.ServeHTTP(0xa3e7f4, 0x324e0068, 0x117e4080, 0x11a19340)
    c:/go/src/net/http/server.go:1422 +0x34
net/http.(*ServeMux).ServeHTTP(0x11683cc0, 0x324e0068, 0x117e4080, 0x11a19340)
    c:/go/src/net/http/server.go:1699 +0x133
net/http.serverHandler.ServeHTTP(0x1189c080, 0x324e0068, 0x117e4080, 0x11a19340)
    c:/go/src/net/http/server.go:1862 +0x156
net/http.(*conn).serve(0x1197eea0)
    c:/go/src/net/http/server.go:1361 +0xc05
created by net/http.(*Server).Serve
    c:/go/src/net/http/server.go:1910 +0x343

goroutine 1 [chan receive, 98 minutes]:
github.com/astaxie/beego.(*App).Run(0x1169e550)
    D:/goproject/src/github.com/astaxie/beego/app.go:182 +0x85a
github.com/astaxie/beego.Run(0x0, 0x0, 0x0)
    D:/goproject/src/github.com/astaxie/beego/beego.go:66 +0x130
main.main()
    D:/goproject/src/github.com/rayingtech/restaurant/main.go:53 +0x27

goroutine 17 [syscall, 98 minutes, locked to thread]:
runtime.goexit()
    c:/go/src/runtime/asm_386.s:1662 +0x1

goroutine 5 [syscall, 98 minutes]:
os/signal.loop()
    c:/go/src/os/signal/signal_unix.go:22 +0x1a
created by os/signal.init.1
    c:/go/src/os/signal/signal_unix.go:28 +0x36

goroutine 6 [chan receive, 98 minutes]:
database/sql.(*DB).connectionOpener(0x116deb40)
    c:/go/src/database/sql/sql.go:634 +0x3c
created by database/sql.Open
    c:/go/src/database/sql/sql.go:481 +0x276

goroutine 7 [IO wait]:
net.runtime_pollWait(0x31995d40, 0x72, 0x11b3b510)
    c:/go/src/runtime/netpoll.go:157 +0x55
net.(*pollDesc).Wait(0x118aa0d0, 0x72, 0x0, 0x0)
    c:/go/src/net/fd_poll_runtime.go:73 +0x35
net.(*ioSrv).ExecIO(0x11862998, 0x118aa038, 0x962b48, 0x8, 0x11b3b500, 0x11abee00, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:182 +0x122
net.(*netFD).acceptOne(0x118aa000, 0x11abed20, 0x2, 0x2, 0x118aa038, 0x31690254, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:564 +0x1d4
net.(*netFD).accept(0x118aa000, 0x0, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:594 +0x11f
net.(*TCPListener).AcceptTCP(0x11890018, 0x118c2e3c, 0x0, 0x0)
    c:/go/src/net/tcpsock_posix.go:254 +0x47
net/http.tcpKeepAliveListener.Accept(0x11890018, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:2135 +0x3d
net/http.(*Server).Serve(0x1189c080, 0x31995e30, 0x11890018, 0x0, 0x0)
    c:/go/src/net/http/server.go:1887 +0x98
net/http.(*Server).ListenAndServe(0x1189c080, 0x0, 0x0)
    c:/go/src/net/http/server.go:1877 +0xe4
net/http.ListenAndServe(0x11892020, 0x5, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:1967 +0x7a
github.com/astaxie/beego.(*adminApp).Run(0x1169e548)
    D:/goproject/src/github.com/astaxie/beego/admin.go:419 +0x581
created by github.com/astaxie/beego.registerAdmin
    D:/goproject/src/github.com/astaxie/beego/hooks.go:90 +0x4d

goroutine 8 [IO wait]:
net.runtime_pollWait(0x31995db8, 0x72, 0x118e7640)
    c:/go/src/runtime/netpoll.go:157 +0x55
net.(*pollDesc).Wait(0x11833870, 0x72, 0x0, 0x0)
    c:/go/src/net/fd_poll_runtime.go:73 +0x35
net.(*ioSrv).ExecIO(0x11862998, 0x118337d8, 0x962b48, 0x8, 0x118e7630, 0x118afce0, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:182 +0x122
net.(*netFD).acceptOne(0x118337a0, 0x118afc00, 0x2, 0x2, 0x118337d8, 0x31690000, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:564 +0x1d4
net.(*netFD).accept(0x118337a0, 0x0, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:594 +0x11f
net.(*TCPListener).AcceptTCP(0x118629a8, 0x11960ea8, 0x0, 0x0)
    c:/go/src/net/tcpsock_posix.go:254 +0x47
net/http.tcpKeepAliveListener.Accept(0x118629a8, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:2135 +0x3d
net/http.(*Server).Serve(0x11688f80, 0x31995e30, 0x118629a8, 0x0, 0x0)
    c:/go/src/net/http/server.go:1887 +0x98
net/http.(*Server).ListenAndServe(0x11688f80, 0x0, 0x0)
    c:/go/src/net/http/server.go:1877 +0xe4
github.com/astaxie/beego.(*App).Run.func4(0x1169e550, 0x11854c00, 0x5, 0x118841c0)
    D:/goproject/src/github.com/astaxie/beego/app.go:174 +0x35c
created by github.com/astaxie/beego.(*App).Run
    D:/goproject/src/github.com/astaxie/beego/app.go:180 +0x83e

goroutine 9 [chan receive, locked to thread]:
net.(*ioSrv).ProcessRemoteIO(0x11862998)
    c:/go/src/net/fd_windows.go:138 +0xcc
created by net.startServer
    c:/go/src/net/fd_windows.go:238 +0xc9

goroutine 10 [chan receive, locked to thread]:
net.(*ioSrv).ProcessRemoteIO(0x118629a0)
    c:/go/src/net/fd_windows.go:138 +0xcc
created by net.startServer
    c:/go/src/net/fd_windows.go:240 +0x11e

goroutine 353800 [IO wait, 85 minutes]:
net.runtime_pollWait(0x31995ae8, 0x72, 0x11b480e0)
    c:/go/src/runtime/netpoll.go:157 +0x55
net.(*pollDesc).Wait(0x1190b170, 0x72, 0x0, 0x0)
    c:/go/src/net/fd_poll_runtime.go:73 +0x35
net.(*ioSrv).ExecIO(0x11862998, 0x1190b0d8, 0x93ce80, 0x7, 0xa3ea10, 0x0, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:182 +0x122
net.(*netFD).Read(0x1190b0a0, 0x1196e000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/net/fd_windows.go:463 +0x129
net.(*conn).Read(0x117c3648, 0x1196e000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/net/net.go:172 +0xb9
net/http.(*liveSwitchReader).Read(0x11ad6684, 0x1196e000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:219 +0x84
io.(*LimitedReader).Read(0x11b480b0, 0x1196e000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    c:/go/src/io/io.go:427 +0xcb
bufio.(*Reader).fill(0x11685b90)
    c:/go/src/bufio/bufio.go:97 +0x172
bufio.(*Reader).ReadSlice(0x11685b90, 0x1163380a, 0x0, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/bufio/bufio.go:328 +0x1b4
bufio.(*Reader).ReadLine(0x11685b90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/bufio/bufio.go:357 +0x4b
net/textproto.(*Reader).readLineSlice(0x11951a40, 0x0, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/net/textproto/reader.go:55 +0x59
net/textproto.(*Reader).ReadLine(0x11951a40, 0x0, 0x0, 0x0, 0x0)
    c:/go/src/net/textproto/reader.go:36 +0x39
net/http.ReadRequest(0x11685b90, 0x11b47340, 0x0, 0x0)
    c:/go/src/net/http/request.go:653 +0x9a
net/http.(*conn).readRequest(0x11ad6660, 0x0, 0x0, 0x0)
    c:/go/src/net/http/server.go:633 +0x368
net/http.(*conn).serve(0x11ad6660)
    c:/go/src/net/http/server.go:1319 +0x7a9
created by net/http.(*Server).Serve
    c:/go/src/net/http/server.go:1910 +0x343
",6790
899,38020943,godep,5
900,38020943,godep save,10
901,38020943,"~/.../github.com/pnovotnak/minikube (feat/parallels) $ git status
On branch feat/parallels
nothing to commit, working directory clean
",134
902,38020943,"~/.../github.com/pnovotnak/minikube (feat/parallels) $ godep save ./...
godep: no buildable Go source files in /Users/pnovotnak/go/src/github.com/pnovotnak/minikube/vendor/github.com/vishvananda/netlink/nl
godep: no buildable Go source files in /Users/pnovotnak/go/src/github.com/pnovotnak/minikube/vendor/golang.org/x/exp/inotify
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/cmd/localkube/cmd
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/cmd/minikube/cmd
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/pkg/localkube
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/pkg/minikube/cluster
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/pkg/minikube/config
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/pkg/minikube/constants
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/pkg/minikube/kubeconfig
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/pkg/minikube/machine
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/pkg/minikube/notify
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/pkg/minikube/sshutil
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/pkg/minikube/tests
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/pkg/util
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/pkg/version
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/bitbucket.org/ww/goautoneg
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/BurntSushi/toml
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/ClusterHQ/flocker-go
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/Sirupsen/logrus
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/appc/cni/libcni
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/appc/cni/pkg/invoke
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/appc/cni/pkg/types
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/appc/spec/schema
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/armon/go-metrics
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/aws/aws-sdk-go/aws
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/aws/aws-sdk-go/service/elb
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/beorn7/perks/quantile
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/blang/semver
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/boltdb/bolt
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/coreos/etcd/alarm
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/coreos/etcd/wal
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/coreos/go-etcd/etcd
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/coreos/go-oidc/oidc
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/coreos/go-semver/semver
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/coreos/go-systemd/activation
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/coreos/go-systemd/unit
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/coreos/pkg/capnslog
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/coreos/pkg/health
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/coreos/pkg/httputil
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/coreos/pkg/timeutil
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/coreos/rkt/api/v1alpha
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/davecgh/go-spew/spew
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/dgrijalva/jwt-go
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/distribution/digest
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/distribution/reference
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/docker/pkg/jsonmessage
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/docker/pkg/units
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/engine-api/client
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/engine-api/types
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/go-connections/nat
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/go-connections/sockets
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/go-connections/tlsconfig
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/go-units
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/machine/commands/mcndirs
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/machine/drivers/errdriver
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/machine/drivers/none
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/machine/drivers/virtualbox
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/machine/drivers/vmwarefusion
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/machine/libmachine
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/machine/version
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/docker/spdystream
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/elazarl/go-bindata-assetfs
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/emicklei/go-restful
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/evanphx/json-patch
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/fsnotify/fsnotify
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/ghodss/yaml
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/go-ini/ini
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/godbus/dbus
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/gogo/protobuf/proto
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/golang/glog
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/golang/groupcache/lru
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/golang/protobuf/proto
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/google/btree
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/google/cadvisor/events
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/google/cadvisor/utils
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/google/gofuzz
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/hashicorp/go-msgpack/codec
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/hashicorp/golang-lru
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/hashicorp/hcl
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/hashicorp/raft
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/hashicorp/raft-boltdb
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/hawkular/hawkular-client-go/metrics
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/imdario/mergo
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/influxdb/influxdb/client
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/influxdb/influxdb/influxql
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/influxdb/influxdb/meta
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/influxdb/influxdb/snapshot
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/influxdb/influxdb/toml
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/influxdb/influxdb/tsdb
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/jmespath/go-jmespath
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/jonboulle/clockwork
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/juju/ratelimit
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/magiconair/properties
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/matttproud/golang_protobuf_extensions/pbutil
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/mesos/mesos-go/detector
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/mesos/mesos-go/upid
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/miekg/dns
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/mitchellh/mapstructure
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/mxk/go-flowrate/flowrate
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/pborman/uuid
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/pkg/browser
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/prometheus/client_golang/prometheus
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/prometheus/client_model/go
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/prometheus/common/expfmt
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/prometheus/common/internal/bitbucket.org/ww/goautoneg
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/prometheus/common/model
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/prometheus/procfs
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/rackspace/gophercloud
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/robfig/cron
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/samalba/dockerclient
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/samuel/go-zookeeper/zk
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/skynetservices/skydns/backends/etcd
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/skynetservices/skydns/singleflight
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/spf13/cast
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/spf13/cobra
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/spf13/jwalterweatherman
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/spf13/pflag
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/spf13/viper
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/ugorji/go/codec
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/vmware/govmomi
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/github.com/xiang90/probing
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/go4.org/errorutil
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/golang.org/x/crypto/bcrypt
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/golang.org/x/sys/unix
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/google.golang.org/api/cloudmonitoring/v2beta2
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/google.golang.org/api/compute/v1
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/google.golang.org/api/container/v1
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/google.golang.org/api/gensupport
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/google.golang.org/api/googleapi
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/google.golang.org/cloud/compute/metadata
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/google.golang.org/cloud/internal
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/google.golang.org/grpc
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/gopkg.in/gcfg.v1
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/gopkg.in/inf.v0
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/gopkg.in/yaml.v2
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/heapster/metrics/api/v1/types
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/heapster/metrics/apis/metrics/v1alpha1
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/cmd/kube-apiserver/app
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/cmd/kube-controller-manager/app
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/cmd/kube-proxy/app
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/cmd/kubelet/app
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/admission
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/api
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/apimachinery
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/apis/abac
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/apis/rbac
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/apiserver
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/auth/authenticator
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/auth/authorizer
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/auth/handlers
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/auth/user
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/capabilities
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/client/cache
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/client/unversioned
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/cloudprovider
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/controller
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/conversion
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/credentialprovider
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/fieldpath
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/fields
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/genericapiserver
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/healthz
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/httplog
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/kubelet
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/labels
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/master
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/probe
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/proxy
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/quota
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/registry/cachesize
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/registry/thirdpartyresourcedata
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/runtime
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/security/podsecuritypolicy
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/securitycontext
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/serviceaccount
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/ssh
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/storage
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/types
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/ui
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/util
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/version
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/volume
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/pkg/watch
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/plugin/cmd/kube-scheduler/app
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/plugin/pkg/admission/admit
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/plugin/pkg/admission/serviceaccount
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/plugin/pkg/auth/authenticator/password/keystone
...
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/plugin/pkg/auth/authorizer/rbac
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/plugin/pkg/auth/authorizer/webhook
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/plugin/pkg/client/auth
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/plugin/pkg/scheduler
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/plugin/pkg/webhook
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/third_party/forked/json
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/third_party/forked/reflect
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/third_party/golang/expansion
godep: dirty working tree (please commit changes): /Users/pnovotnak/go/src/k8s.io/minikube/vendor/k8s.io/kubernetes/third_party/golang/netutil
godep: error loading dependencies
",25690
903,38065565,"package query

import(
    ""net/url""
    ""strings""
)


//ParseQueryOp parses the URL-encoded query string and returns a map 
// listing the values specified for each key. ParseQueryOp always returns 
// a non-nil map containing all the valid query parameters found;
// err describes the first decoding error encountered, if any.
// If the query has operators (e.g. &amount>300) it is Add-ed in the map
// with a prefixed key ( {{prefix}}key ).
/*
 e.g. for a query &Amount>300 the operator("">"") is returnd
    s := ""query &Amount>300""
    q, _ := ParseQueryOp(s, ""_op_"")
    print(q.Get(""_op_Amount"")) // prints `>`
    print(q.Get(""Amount"")) // prints 300
*/
func ParseQueryOp(query, prefix string) (m url.Values, err error){
    m = make(url.Values)

    for query != """" {
        var opKey string
        key := query
        if i := strings.IndexAny(key, ""&;""); i >= 0 {
            key, query = key[:i], key[i+1:]
        } else {
            query = """"
        }
        if key == """" {
            continue
        }
        value := """"
        var err1 error
        if i := strings.Index(key, "">=""); i >= 0{
            key, value = key[:i], key[i+2:]
            opKey = prefix + key 
            opKey, err1 = url.QueryUnescape(opKey)
            if err1 != nil {
                if err == nil {
                    err = err1
                }
                continue
            }
            m[opKey] = append(m[opKey], "">="")
        }else if i = strings.Index(key, ""= 0{
            key, value = key[:i], key[i+2:]
            opKey = prefix + key 
            opKey, err1 = url.QueryUnescape(opKey)
            if err1 != nil {
                if err == nil {
                    err = err1
                }
                continue
            }
            m[opKey] = append(m[opKey], ""<="")
        }else if i = strings.Index(key, ""="");  i >= 0{
            key, value = key[:i], key[i+1:]
        }else if i = strings.Index(key, "">"");  i >= 0{
            key, value = key[:i], key[i+1:]
            opKey = prefix + key 
            opKey, err1 = url.QueryUnescape(opKey)
            if err1 != nil {
                if err == nil {
                    err = err1
                }
                continue
            }
            m[opKey] = append(m[opKey], "">"")
        }else if i = strings.Index(key, ""= 0{
            key, value = key[:i], key[i+1:]
            opKey = prefix + key 
            opKey, err1 = url.QueryUnescape(opKey)
            if err1 != nil {
                if err == nil {
                    err = err1
                }
                continue
            }
            m[opKey] = append(m[opKey], ""<"")
        }

        key, err1 = url.QueryUnescape(key)
        if err1 != nil {
            if err == nil {
                err = err1
            }
            continue
        }
        value, err1 = url.QueryUnescape(value)
        if err1 != nil {
            if err == nil {
                err = err1
            }
            continue
        }
        m[key] = append(m[key], value)
    }
    return m, err
}
",3072
904,38065565,"package query


import(
    ""testing""
    ""net/url""
)


type parseTest struct {
    query string
    out   url.Values
}


var parseTests = []parseTest{
    {
        query: ""a=1&b=2"",
        out:   url.Values{""a"": []string{""1""}, ""b"": []string{""2""}},
    },
    {
        query: ""a=1&a=2&a=banana"",
        out:   url.Values{""a"": []string{""1"", ""2"", ""banana""}},
    },
    {
        query: ""ascii=%3Ckey%3A+0x90%3E"",
        out:   url.Values{""ascii"": []string{""""}},
    },
    {
        query: ""a=1;b=2"",
        out:   url.Values{""a"": []string{""1""}, ""b"": []string{""2""}},
    },
    {
        query: ""a=1&a=2;a=banana"",
        out:   url.Values{""a"": []string{""1"", ""2"", ""banana""}},
    },
    {
        query: ""a=1&b>2"",
        out:   url.Values{""a"": []string{""1""}, ""_op_b"": []string{"">""}, ""b"": []string{""2""}},
    },
    {
        query: ""a=1&b<2"",
        out:   url.Values{""a"": []string{""1""}, ""_op_b"": []string{""<""}, ""b"": []string{""2""}},
    },
    {
        query: ""a=1&b>=2"",
        out:   url.Values{""a"": []string{""1""}, ""_op_b"": []string{"">=""}, ""b"": []string{""2""}},
    },
    {
        query: ""a=1&b<=2"",
        out:   url.Values{""a"": []string{""1""}, ""_op_b"": []string{""<=""}, ""b"": []string{""2""}},
    },
}

func TestParseQueryOut(t *testing.T) {
    for i, test := range parseTests {
        form, err := ParseQueryOp(test.query, ""_op_"")
        if err != nil {
            t.Errorf(""test %d: Unexpected error: %v"", i, err)
            continue
        }
        if len(form) != len(test.out) {
            t.Errorf(""test %d: len(form) = %d, want %d"", i, len(form), len(test.out))
        }
        for k, evs := range test.out {
            vs, ok := form[k]
            if !ok {
                t.Errorf(""test %d: Missing key %q"", i, k)
                continue
            }
            if len(vs) != len(evs) {
                t.Errorf(""test %d: len(form[%q]) = %d, want %d"", i, k, len(vs), len(evs))
                continue
            }
            for j, ev := range evs {
                if v := vs[j]; v != ev {
                    t.Errorf(""test %d: form[%q][%d] = %q, want %q"", i, k, j, v, ev)
                }
            }
        }
    }
}
",2165
905,38079036,"//------------------------------------------------------------------
//  user
//----------------------------------------------------------------------
func (d *Database) UserCreate(email, password, username string, role int) *Answer {
    //variables
    answer := d.initCall(""UserCreate"")
    user := new(User)
    //check exist user
    if userExist := d.DB.Find(&User{}, &User{Email:email}).Error; userExist == nil {
        answer.AnswerJSON.ErrorAnswer.Message = ""[usercreate] user already exist""
        answer.AnswerJSON.Result = nil
        answer.AnswerJSON.Status = false
    } else {

        userinfo := UserInfo{Data:time.Now()}
        session := Session{Data:time.Now()}
        cook := Cook{}

        //make support  tables object
        //userinfo object
        userinfo.Password = password
        userinfo.Username = username
        //cook object
        cook.SessionID = session.ID
        cook.Cookie = d.cookgeneratenew(""somesaltforcooksgenerate"")
        cook.Status = true
        cook.Lastconnect = time.Now()
        cook.CountConnect += 1

        //user object
        user.Email = email
        user.Session = session
        user.UserInfo = userinfo
        user.Cook = cook
        user.Role = int64(role)

        //make request + //serizlizations to json answer
        if err := d.DB.Create(user).Error; err != nil {
            answer.AnswerJSON.ErrorAnswer.Message = err.Error()
            answer.AnswerJSON.Status = false
        } else {
            answer.AnswerJSON.Result = user
            answer.AnswerJSON.Status = true
        }
    }
    d.serilize(answer)
    return answer
}
func (d *Database) UserDelete(userid int64) *Answer {
    answer := d.initCall(""UserDelete"")
    user := new(User)
    //check exists
    if userExists := d.DB.Find(user, ""ID = ?"", userid).Error; userExists == nil {
        if userDelete := d.DB.Delete(user).Error; userDelete != nil {
            answer.AnswerJSON.ErrorAnswer.Message = userExists.Error()
            answer.AnswerJSON.Status = false
        } else {
            answer.AnswerJSON.Status = true
            answer.AnswerJSON.ErrorAnswer = nil
        }
    } else {
        answer.AnswerJSON.ErrorAnswer.Message = userExists.Error()
        answer.AnswerJSON.Status = false
    }
    d.serilize(answer)
    return answer
}
func (d *Database) UserRead(userid int64) *Answer {
    answer := d.initCall(""UserRead"")
    user := new(User)
    if userExists := d.DB.Find(user, ""ID = ?"", userid).Error; userExists != nil {
        answer.AnswerJSON.ErrorAnswer.Message = userExists.Error()
        answer.AnswerJSON.Status = false
    } else {
        if rel := d.DB.Model(user).Related(&user.Session).Error; rel != nil {
            answer.AnswerJSON.Result = nil
            answer.AnswerJSON.ErrorAnswer.Message = rel.Error()
            answer.AnswerJSON.Status = false
        } else if rel = d.DB.Model(user).Related(&user.UserInfo).Error; rel != nil {
            answer.AnswerJSON.Result = nil
            answer.AnswerJSON.ErrorAnswer.Message = rel.Error()
            answer.AnswerJSON.Status = false
        } else if rel = d.DB.Model(user).Related(&user.Cook).Error; rel != nil {
            answer.AnswerJSON.Result = nil
            answer.AnswerJSON.ErrorAnswer.Message = rel.Error()
            answer.AnswerJSON.Status = false
        } else {
            answer.AnswerJSON.Result = user
            answer.AnswerJSON.ErrorAnswer = nil
            answer.AnswerJSON.Status = true
        }
    }
    d.serilize(answer)
    return answer
}
func (d *Database) UserReadAll() *Answer {
    answer := d.initCall(""UserReadAll"")
    users := []User{}

    if usersGet := d.DB.Find(&users).Error; usersGet != nil {
        answer.AnswerJSON.ErrorAnswer.Message = usersGet.Error()
        answer.AnswerJSON.Status = false
    } else {
        for _, user := range users {
            d.DB.Model(user).Related(&user.Session)
            d.DB.Model(user).Related(&user.UserInfo)
            d.DB.Model(user).Related(&user.Cook)
        }
        answer.AnswerJSON.Result = users
        answer.AnswerJSON.ErrorAnswer = nil
        answer.AnswerJSON.Status = true
    }
    d.serilize(answer)
    return answer
}
func (d *Database) UserUpdate(userid int64, uu *UserUpdateStruct) *Answer {
    answer := d.initCall(""UserUpdate"")
    user := new(User)

    if userExists := d.DB.Find(user, ""ID = ?"", userid).Error; userExists != nil {
        answer.AnswerJSON.ErrorAnswer.Message = userExists.Error()
        answer.AnswerJSON.Status = false
    } else {
        //get relevating struct info
        d.DB.Model(user).Related(&user.Session)
        d.DB.Model(user).Related(&user.UserInfo)
        d.DB.Model(user).Related(&user.Cook)

        //update columns
        if uu.Email != """" {
            user.Email = uu.Email
        }
        if uu.Avatar > 0 {
            user.UserInfo.Avatar = uu.Avatar
        }
        if uu.Birthday != """" {
            user.UserInfo.Birthday = uu.Birthday
        }
        if uu.Location != """" {
            user.UserInfo.Location = uu.Location
        }
        if uu.Male != """" {
            user.UserInfo.Male = uu.Male
        }
        if uu.Password != """" {
            user.UserInfo.Password = uu.Password
        }
        if uu.Role > 0 {
            if roleErr := d.DB.Find(&Role{}).Error; roleErr != nil {
                //role not found
                fmt.Printf(""[userupdate] role not found `%d`\n"", uu.Role)
            } else {
                user.Role = uu.Role
            }
        }

        //update
        if errUpdate := d.DB.Save(user).Error; errUpdate != nil {
            answer.AnswerJSON.ErrorAnswer.Message = errUpdate.Error()
            answer.AnswerJSON.Status = false
        } else {
            answer.AnswerJSON.Result = user
            answer.AnswerJSON.ErrorAnswer = nil
            answer.AnswerJSON.Status = true
        }
    }
    d.serilize(answer)
    return answer
}
func (d *Database) UserPaginate(page, countPage int) *Answer {
    answer := d.initCall(""UserPaginate"")
    result := []*User{}
    if errPag := d.DB.Limit(countPage).Offset((page * countPage) - countPage).Find(&result).Error; errPag != nil {
        answer.AnswerJSON.ErrorAnswer.Message = errPag.Error()
        answer.AnswerJSON.Status = false
    } else {
        for _, user := range result {
            d.DB.Model(&user).Related(&user.Session)
            d.DB.Model(&user).Related(&user.UserInfo)
            d.DB.Model(&user).Related(&user.Cook)
        }
        answer.AnswerJSON.Result = result
        answer.AnswerJSON.ErrorAnswer = nil
        answer.AnswerJSON.Status = true
    }
    d.serilize(answer)
    return answer
}
//-------------------------------------------------------------------
//  category
//--------------------------------------------------------------------
func (d *Database) CategoryCreate(name string) *Answer {
    //variables
    answer := d.initCall(""CategoryCreate"")
    cat := new(Category)
    //check exist user
    if catExist := d.DB.Find(&Category{}, &Category{Name:name}).Error; catExist == nil {
        answer.AnswerJSON.ErrorAnswer.Message = ""[categorycreate] category already exist""
        answer.AnswerJSON.Result = nil
        answer.AnswerJSON.Status = false
    } else {
        cat.Name = name
        //make request + //serizlizations to json answer
        if err := d.DB.Create(cat).Error; err != nil {
            answer.AnswerJSON.ErrorAnswer.Message = err.Error()
            answer.AnswerJSON.Status = false
        } else {
            answer.AnswerJSON.Result = cat
            answer.AnswerJSON.Status = true
        }
    }
    d.serilize(answer)
    return answer
}
func (d *Database) CategoryDelete(catid int64) *Answer {
    answer := d.initCall(""CategoryDelete"")
    cat := new(Category)
    //check exists
    if catExists := d.DB.Find(cat, ""ID = ?"", catid).Error; catExists == nil {
        if catDelete := d.DB.Delete(cat).Error; catDelete != nil {
            answer.AnswerJSON.ErrorAnswer.Message = catExists.Error()
            answer.AnswerJSON.Status = false
        } else {
            answer.AnswerJSON.Status = true
            answer.AnswerJSON.ErrorAnswer = nil
        }
    } else {
        answer.AnswerJSON.ErrorAnswer.Message = catExists.Error()
        answer.AnswerJSON.Status = false
    }
    d.serilize(answer)
    return answer
}
func (d *Database) CategoryRead(catid int64) *Answer {
    answer := d.initCall(""CategoryRead"")
    cat := new(Category)
    if catExists := d.DB.Find(cat, ""ID = ?"", catid).Error; catExists != nil {
        answer.AnswerJSON.ErrorAnswer.Message = catExists.Error()
        answer.AnswerJSON.Status = false
    } else {
        if rel := d.DB.Model(cat).Related(&cat.Post).Error; rel != nil {
            answer.AnswerJSON.Result = nil
            answer.AnswerJSON.ErrorAnswer.Message = rel.Error()
            answer.AnswerJSON.Status = false
        } else {
            for x, p := range cat.Post {
                d.DB.Model(&p).Related(&p.Comment)
                d.DB.Model(&p).Related(&p.PostSeo)
                cat.Post[x] = p
            }
            answer.AnswerJSON.Result = cat
            answer.AnswerJSON.ErrorAnswer = nil
            answer.AnswerJSON.Status = true
        }
    }
    d.serilize(answer)
    return answer
}
func (d *Database) CategoryReadAll() *Answer {
    answer := d.initCall(""CategoryReadAll"")
    cats := []Category{}

    if catsGet := d.DB.Find(&cats).Error; catsGet != nil {
        answer.AnswerJSON.ErrorAnswer.Message = catsGet.Error()
        answer.AnswerJSON.Status = false
    } else {
        //categorys
        for _, cat := range cats {
            d.DB.Model(cat).Related(&cat.Post)
            //get relete POST
            for x, p := range cat.Post {
                d.DB.Model(&p).Related(&p.Comment)
                d.DB.Model(&p).Related(&p.PostSeo)
                cat.Post[x] = p
            }
        }
        answer.AnswerJSON.Result = cats
        answer.AnswerJSON.ErrorAnswer = nil
        answer.AnswerJSON.Status = true
    }
    d.serilize(answer)
    return answer
}
func (d *Database) CategoryUpdate(catid int64, name string) *Answer {
    answer := d.initCall(""CategoryUpdate"")
    cat := new(Category)

    if catExists := d.DB.Find(cat, ""ID = ?"", catid).Error; catExists != nil {
        answer.AnswerJSON.ErrorAnswer.Message = catExists.Error()
        answer.AnswerJSON.Status = false
    } else {
        //get relevating struct info
        d.DB.Model(cat).Related(&cat.Post)

        //update columns
        if name != """" {
            cat.Name = name
        }
        //update
        if errUpdate := d.DB.Save(cat).Error; errUpdate != nil {
            answer.AnswerJSON.ErrorAnswer.Message = errUpdate.Error()
            answer.AnswerJSON.Status = false
        } else {
            answer.AnswerJSON.Result = cat
            answer.AnswerJSON.ErrorAnswer = nil
            answer.AnswerJSON.Status = true
        }
    }
    d.serilize(answer)
    return answer
}
func (d *Database) CategoryPaginate(page, countPage int) *Answer {
    answer := d.initCall(""CategoryPaginate"")
    result := []*Category{}
    if errPag := d.DB.Limit(countPage).Offset((page * countPage) - countPage).Find(&result).Error; errPag != nil {
        answer.AnswerJSON.ErrorAnswer.Message = errPag.Error()
        answer.AnswerJSON.Status = false
    } else {
        for _, cat := range result {
            d.DB.Model(&cat).Related(&cat.Post)
            //get relete POST
            for x, p := range cat.Post {
                d.DB.Model(&p).Related(&p.Comment)
                d.DB.Model(&p).Related(&p.PostSeo)
                cat.Post[x] = p
            }
        }
        answer.AnswerJSON.Result = result
        answer.AnswerJSON.ErrorAnswer = nil
        answer.AnswerJSON.Status = true
    }
    d.serilize(answer)
    return answer
}
",11894
906,38140146,"Go version: go version go1.6.2 linux/amd64
+++ [0701 13:27:22] Building the toolchain targets:
    k8s.io/kubernetes/hack/cmd/teststale
+++ [0701 13:27:22] Building go targets for linux/arm64:
    cmd/kube-dns
    cmd/kube-proxy
    cmd/kube-apiserver
    cmd/kube-controller-manager
    cmd/kubelet
    cmd/kubemark
    cmd/hyperkube
    federation/cmd/federation-apiserver
    federation/cmd/federation-controller-manager
    plugin/cmd/kube-scheduler
# runtime/cgo
/usr/local/go/src/runtime/cgo/cgo.go:54:19: fatal error: errno.h: No such file or directory
compilation terminated.
!!! Error in /home/peeyush/work/kubernetes/hack/lib/golang.sh:500
  'go install ""${goflags[@]:+${goflags[@]}}"" -ldflags ""${goldflags}"" ""${nonstatics[@]:+${nonstatics[@]}}""' exited with status 2
Call stack:
  1: /home/peeyush/work/kubernetes/hack/lib/golang.sh:500 kube::golang::build_binaries_for_platform(...)
  2: /home/peeyush/work/kubernetes/hack/lib/golang.sh:669 kube::golang::build_binaries(...)
  3: ./hack/build-cross.sh:28 main(...)
Exiting with status 1
!!! Error in /home/peeyush/work/kubernetes/hack/lib/golang.sh:586
  '( kube::golang::setup_env; echo ""Go version: $(go version)""; local host_platform; host_platform=$(kube::golang::host_platform); local goflags goldflags; eval ""goflags=(${KUBE_GOFLAGS:-})""; goldflags=""${KUBE_GOLDFLAGS:-} $(kube::version::ldflags)""; local use_go_build; local -a targets=(); local arg; for arg in ""$@"";
do
    if [[ ""${arg}"" == ""--use_go_build"" ]]; then
        use_go_build=true;
    else
        if [[ ""${arg}"" == -* ]]; then
            goflags+=(""${arg}"");
        else
            targets+=(""${arg}"");
        fi;
    fi;
done; if [[ ${#targets[@]} -eq 0 ]]; then
    targets=(""${KUBE_ALL_TARGETS[@]}"");
fi; local -a platforms=(""${KUBE_BUILD_PLATFORMS[@]:+${KUBE_BUILD_PLATFORMS[@]}}""); if [[ ${#platforms[@]} -eq 0 ]]; then
    platforms=(""${host_platform}"");
fi; local binaries; binaries=($(kube::golang::binaries_from_targets ""${targets[@]}"")); local parallel=false; if [[ ${#platforms[@]} -gt 1 ]]; then
    local gigs; gigs=$(kube::golang::get_physmem); if [[ ${gigs} -ge ${KUBE_PARALLEL_BUILD_MEMORY} ]]; then
        kube::log::status ""Multiple platforms requested and available ${gigs}G >= threshold ${KUBE_PARALLEL_BUILD_MEMORY}G, building platforms in parallel""; parallel=true;
    else
        kube::log::status ""Multiple platforms requested, but available ${gigs}G < threshold ${KUBE_PARALLEL_BUILD_MEMORY}G, building platforms in serial""; parallel=false;
    fi;
fi; kube::golang::build_kube_toolchain; if [[ ""${parallel}"" == ""true"" ]]; then
    kube::log::status ""Building go targets for ${platforms[@]} in parallel (output will appear in a burst when complete):"" ""${targets[@]}""; local platform; for platform in ""${platforms[@]}"";
    do
        ( kube::golang::set_platform_envs ""${platform}""; kube::log::status ""${platform}: go build started""; kube::golang::build_binaries_for_platform ${platform} ${use_go_build:-}; kube::log::status ""${platform}: go build finished"" ) &> ""/tmp//${platform//\//_}.build"" &
    done; local fails=0; for job in $(jobs -p);
    do
        wait ${job} || let ""fails+=1"";
    done; for platform in ""${platforms[@]}"";
    do
        cat ""/tmp//${platform//\//_}.build"";
    done; exit ${fails};
else
    for platform in ""${platforms[@]}"";
    do
        kube::log::status ""Building go targets for ${platform}:"" ""${targets[@]}""; kube::golang::set_platform_envs ""${platform}""; kube::golang::build_binaries_for_platform ${platform} ${use_go_build:-};
    done;
fi )' exited with status 1
Call stack:
  1: /home/peeyush/work/kubernetes/hack/lib/golang.sh:586 kube::golang::build_binaries(...)
  2: ./hack/build-cross.sh:28 main(...)
Exiting with status 1
",3733
907,38140146,"find / -name ""errno.h""
/usr/arm-none-eabi/include/sys/errno.h
/usr/arm-none-eabi/include/errno.h
/usr/src/kernels/4.1.13-100.fc21.x86_64+debug/include/uapi/asm-generic/errno.h
/usr/src/kernels/4.1.13-100.fc21.x86_64+debug/include/uapi/linux/errno.h
/usr/src/kernels/4.1.13-100.fc21.x86_64+debug/include/linux/errno.h
/usr/src/kernels/4.1.13-100.fc21.x86_64+debug/arch/x86/include/uapi/asm/errno.h
/usr/include/asm/errno.h
/usr/include/sys/errno.h
/usr/include/bits/errno.h
/usr/include/errno.h
/usr/include/asm-generic/errno.h
/usr/include/linux/errno.h
",554
908,38140146,"rpm -aq | grep arm
arm-none-eabi-gcc-cs-c++-5.2.0-2.fc21.x86_64
gcc-arm-linux-gnu-4.9.2-5.fc21.x86_64
arm-none-eabi-newlib-2.2.0_1-6.fc21.noarch
binutils-arm-linux-gnu-2.25-4.fc21.x86_64
arm-none-eabi-binutils-cs-2014.05.28-3.fc21.x86_64
gucharmap-3.14.2-1.fc21.x86_64
arm-none-eabi-gcc-cs-5.2.0-2.fc21.x86_64
hdparm-9.48-1.fc21.x86_64
",336
909,38191972,"package main

import (
    ""fmt""
    ""syscall""
    ""unsafe""
)

var (
    shell32 = syscall.MustLoadDLL(""shell32.dll"")

    // https://msdn.microsoft.com/en-us/library/windows/desktop/bb762179(v=vs.85).aspx
    procSHGetFileInfo = shell32.MustFindProc(""SHGetFileInfoW"")

    //https://msdn.microsoft.com/en-us/library/windows/desktop/bb762185(v=vs.85).aspx
    procSHGetImageList = shell32.MustFindProc(""SHGetImageList"")
)

func main() {
    someExeFile := `c:\windows\explorer.exe`

    iconIndex := GetIconIndex(someExeFile)

    // The problem:
    HRESULT, _, _ := procSHGetImageList.Call(
        uintptr(SHIL_JUMBO),
        uintptr(unsafe.Pointer(&IID_IImageList2)),

        // I don't know how pass/create an ""IImageList interface"" in Go,
        // or if it's even possible without relying on CGO.
        // IImageList interface:
        // https://msdn.microsoft.com/en-us/library/windows/desktop/bb761419(v=vs.85).aspx

        // Currently there's just a pointer to an empty []byte so that the code will compile.
        // HRESULT naturally contains the error code E_NOINTERFACE (2147500034),
        // which makes sense seeing as I'm not passing a valid interface.
        uintptr(unsafe.Pointer(&[]byte{})),
    )

    fmt.Println(iconIndex, HRESULT)
}


const SHIL_JUMBO = 0x4

const shGetFileInfoLen = 3
const shGetFileInfoFlags = 16400 //(SysIconIndex|LargeIcon|UseFileAttributes)
// use SHGetFileInfo to get the icon index (only value we care about)
func GetIconIndex(fileName string) int {
    buf := make([]uint16, shGetFileInfoLen)
    ret, _, _ := procSHGetFileInfo.Call(
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(fileName))),
        0,
        uintptr(unsafe.Pointer(&buf[0])),
        shGetFileInfoLen,
        shGetFileInfoFlags,
    )

    if ret != 0 && buf[2] > 0 {
        return int(buf[2])
    }

    return 0
}

// From: ""192B9D83-50FC-457B-90A0-2B82A8B5DAE1""
var IID_IImageList2 = &GUID{0x192b9d83, 0x50fc, 0x457b, [8]byte{0x90, 0xa0, 0x2b, 0x82, 0xa8, 0xb5, 0xda, 0xe1}}

// http://msdn.microsoft.com/en-us/library/windows/desktop/aa373931.aspx
type GUID struct {
    Data1 uint32
    Data2 uint16
    Data3 uint16
    Data4 [8]byte
}
",2187
910,38191972,"package main

import (
    ""fmt""
    ""syscall""
    ""unsafe""
)

var (
    shell32 = syscall.MustLoadDLL(""shell32.dll"")

    // https://msdn.microsoft.com/en-us/library/windows/desktop/bb762179(v=vs.85).aspx
    procSHGetFileInfo = shell32.MustFindProc(""SHGetFileInfoW"")

    //https://msdn.microsoft.com/en-us/library/windows/desktop/bb762185(v=vs.85).aspx
    procSHGetImageList = shell32.MustFindProc(""SHGetImageList"")

    ole32 = syscall.MustLoadDLL(""ole32.dll"")
    procCoInitialize = ole32.MustFindProc(""CoInitialize"")
)

func main() {
    someExeFile := `c:\windows\explorer.exe`

    procCoInitialize.Call()

    iconIndex := GetIconIndex(someExeFile)

    var imglist *IImageList
    hr, _, _ := procSHGetImageList.Call(
        uintptr(SHIL_JUMBO),
        uintptr(unsafe.Pointer(&IID_IImageList)),
        uintptr(unsafe.Pointer(&imglist)),
    )

    // These look OK
    fmt.Println(iconIndex, hr, imglist.Vtbl.GetIcon)

    var hIcon uintptr
    // GetIcon: https://msdn.microsoft.com/en-us/library/windows/desktop/bb761463(v=vs.85).aspx
    hr, _, _ = syscall.Syscall(imglist.Vtbl.GetIcon,
        uintptr(unsafe.Pointer(imglist)),
        uintptr(iconIndex),
        getIconFlags,
        uintptr(unsafe.Pointer(&hIcon)),
    )

    // Errors: ""Process finished with exit code -1073741819 (0xC0000005)""

    fmt.Println(""hIcon:"", hIcon) // Never reaches this
}

// ILD_TRANSPARENT | ILD_IMAGE
const getIconFlags = 0x00000001 | 0x00000020

const SHIL_JUMBO = 0x4

const shGetFileInfoLen = 3
const shGetFileInfoFlags = 16400 //(SysIconIndex|LargeIcon|UseFileAttributes)
// use SHGetFileInfo to get the icon index (only value we care about)
func GetIconIndex(fileName string) int {
    buf := make([]uint16, shGetFileInfoLen)
    ret, _, _ := procSHGetFileInfo.Call(
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(fileName))),
        0,
        uintptr(unsafe.Pointer(&buf[0])),
        shGetFileInfoLen,
        shGetFileInfoFlags,
    )

    if ret != 0 && buf[2] > 0 {
        return int(buf[2])
    }

    return 0
}


// From: ""46EB5926-582E-4017-9FDF-E8998DAA0950""
var IID_IImageList = GUID{0x46eb5926, 0x582e, 0x4017, [8]byte{0x9f, 0xdf, 0xe8, 0x99, 0x8d, 0xaa, 0x09, 0x50}}

// http://msdn.microsoft.com/en-us/library/windows/desktop/aa373931.aspx
type GUID struct {
    Data1 uint32
    Data2 uint16
    Data3 uint16
    Data4 [8]byte
}

type IImageList struct {
    Vtbl *IImageListVtbl
}

type IImageListVtbl struct {
    Add                uintptr
    ReplaceIcon        uintptr
    SetOverlayImage    uintptr
    Replace            uintptr
    AddMasked          uintptr
    Draw               uintptr
    Remove             uintptr
    GetIcon            uintptr
    GetImageInfo       uintptr
    Copy               uintptr
    Merge              uintptr
    Clone              uintptr
    GetImageRect       uintptr
    GetIconSize        uintptr
    SetIconSize        uintptr
    GetImageCount      uintptr
    SetImageCount      uintptr
    SetBkColor         uintptr
    GetBkColor         uintptr
    BeginDrag          uintptr
    EndDrag            uintptr
    DragEnter          uintptr
    DragLeave          uintptr
    DragMove           uintptr
    SetDragCursorImage uintptr
    DragShowNolock     uintptr
    GetDragImage       uintptr
    GetItemFlags       uintptr
    GetOverlayImage    uintptr
}
",3352
911,38357694,Using net/http to serve wiki pages,34
912,38357694,"Killing current process...
Error: process crashed or was terminated while running.
F:/Go/bin/go.exe build -i [E:/Users/User/Desktop/New folder (36)/codespace_v2.6/codespace/dev/server_side/golang/go_codespace_v2.0/server]
Success: process exited with code 0.
E:/Users/User/Desktop/New folder (36)/codespace_v2.6/codespace/dev/server_side/golang/go_codespace_v2.0/server/server.exe  [E:/Users/User/Desktop/New folder (36)/codespace_v2.6/codespace/dev/server_side/golang/go_codespace_v2.0/server]
2016/07/14 00:49:14 http: panic serving [::1]:65281: runtime error: invalid memory address or nil pointer dereference
goroutine 5 [running]:
net/http.(*conn).serve.func1(0xc08200a300)
    F:/Go/src/net/http/server.go:1389 +0xc8
panic(0x711700, 0xc0820060f0)
    F:/Go/src/runtime/panic.go:443 +0x4f7
main.viewHandler(0xea0058, 0xc0820be000, 0xc0820a81c0)
    E:/Users/User/Desktop/New folder (36)/codespace_v2.6/codespace/dev/server_side/golang/go_codespace_v2.0/server/main.go:35 +0x241
net/http.HandlerFunc.ServeHTTP(0x80b890, 0xea0058, 0xc0820be000, 0xc0820a81c0)
    F:/Go/src/net/http/server.go:1618 +0x41
net/http.(*ServeMux).ServeHTTP(0xc082050870, 0xea0058, 0xc0820be000, 0xc0820a81c0)
    F:/Go/src/net/http/server.go:1910 +0x184
net/http.serverHandler.ServeHTTP(0xc08200a280, 0xea0058, 0xc0820be000, 0xc0820a81c0)
    F:/Go/src/net/http/server.go:2081 +0x1a5
net/http.(*conn).serve(0xc08200a300)
    F:/Go/src/net/http/server.go:1472 +0xf35
created by net/http.(*Server).Serve
    F:/Go/src/net/http/server.go:2137 +0x455
2016/07/14 00:49:14 http: panic serving [::1]:65282: runtime error: invalid memory address or nil pointer dereference
goroutine 17 [running]:
net/http.(*conn).serve.func1(0xc0820ae100)
    F:/Go/src/net/http/server.go:1389 +0xc8
panic(0x711700, 0xc0820060f0)
    F:/Go/src/runtime/panic.go:443 +0x4f7
main.viewHandler(0xea0058, 0xc0820be1a0, 0xc0820e20e0)
    E:/Users/User/Desktop/New folder (36)/codespace_v2.6/codespace/dev/server_side/golang/go_codespace_v2.0/server/main.go:35 +0x241
net/http.HandlerFunc.ServeHTTP(0x80b890, 0xea0058, 0xc0820be1a0, 0xc0820e20e0)
    F:/Go/src/net/http/server.go:1618 +0x41
net/http.(*ServeMux).ServeHTTP(0xc082050870, 0xea0058, 0xc0820be1a0, 0xc0820e20e0)
    F:/Go/src/net/http/server.go:1910 +0x184
net/http.serverHandler.ServeHTTP(0xc08200a280, 0xea0058, 0xc0820be1a0, 0xc0820e20e0)
    F:/Go/src/net/http/server.go:2081 +0x1a5
net/http.(*conn).serve(0xc0820ae100)
    F:/Go/src/net/http/server.go:1472 +0xf35
created by net/http.(*Server).Serve
    F:/Go/src/net/http/server.go:2137 +0x455
2016/07/14 00:50:30 http: panic serving [::1]:65288: runtime error: invalid memory address or nil pointer dereference
goroutine 6 [running]:
net/http.(*conn).serve.func1(0xc08200a380)
    F:/Go/src/net/http/server.go:1389 +0xc8
panic(0x711700, 0xc0820060f0)
    F:/Go/src/runtime/panic.go:443 +0x4f7
main.viewHandler(0xea0058, 0xc0820be270, 0xc0820a8380)
    E:/Users/User/Desktop/New folder (36)/codespace_v2.6/codespace/dev/server_side/golang/go_codespace_v2.0/server/main.go:35 +0x241
net/http.HandlerFunc.ServeHTTP(0x80b890, 0xea0058, 0xc0820be270, 0xc0820a8380)
    F:/Go/src/net/http/server.go:1618 +0x41
net/http.(*ServeMux).ServeHTTP(0xc082050870, 0xea0058, 0xc0820be270, 0xc0820a8380)
    F:/Go/src/net/http/server.go:1910 +0x184
net/http.serverHandler.ServeHTTP(0xc08200a280, 0xea0058, 0xc0820be270, 0xc0820a8380)
    F:/Go/src/net/http/server.go:2081 +0x1a5
net/http.(*conn).serve(0xc08200a380)
    F:/Go/src/net/http/server.go:1472 +0xf35
created by net/http.(*Server).Serve
    F:/Go/src/net/http/server.go:2137 +0x455
2016/07/14 00:50:30 http: panic serving [::1]:65289: runtime error: invalid memory address or nil pointer dereference
goroutine 18 [running]:
net/http.(*conn).serve.func1(0xc0820ae280)
    F:/Go/src/net/http/server.go:1389 +0xc8
panic(0x711700, 0xc0820060f0)
    F:/Go/src/runtime/panic.go:443 +0x4f7
main.viewHandler(0xea0058, 0xc0820be340, 0xc0820e22a0)
    E:/Users/User/Desktop/New folder (36)/codespace_v2.6/codespace/dev/server_side/golang/go_codespace_v2.0/server/main.go:35 +0x241
net/http.HandlerFunc.ServeHTTP(0x80b890, 0xea0058, 0xc0820be340, 0xc0820e22a0)
    F:/Go/src/net/http/server.go:1618 +0x41
net/http.(*ServeMux).ServeHTTP(0xc082050870, 0xea0058, 0xc0820be340, 0xc0820e22a0)
    F:/Go/src/net/http/server.go:1910 +0x184
net/http.serverHandler.ServeHTTP(0xc08200a280, 0xea0058, 0xc0820be340, 0xc0820e22a0)
    F:/Go/src/net/http/server.go:2081 +0x1a5
net/http.(*conn).serve(0xc0820ae280)
    F:/Go/src/net/http/server.go:1472 +0xf35
created by net/http.(*Server).Serve
    F:/Go/src/net/http/server.go:2137 +0x455
",4625
913,38357694,invalid memory address or nil pointer dereference,49
914,38434629,Remove,6
915,38434629,Append,6
916,38434629,"package main

import (
    ""io""
    ""os""
)

func main() {
    w1, e := os.Create(""file1.txt"")
    if e != nil {
        panic(e)
    }
    w2, e := os.Create(""file2.txt"")
    if e != nil {
        panic(e)
    }
    mw := MultiWriter(w1, w2)
    data := []byte(""Hello "")
    _, e = mw.Write(data)
    if e != nil {
        panic(e)
    }

    var m *multiWriter = mw.(*multiWriter)
    m.Remove(w2)
    w2.Close()
    w3, e := os.Create(""file3.txt"")
    if e != nil {
        panic(e)
    }
    m.Append(w3)
    data = []byte(""World "")
    _, e = mw.Write(data)
    if e != nil {
        panic(e)
    }
    w3.Close()
    w1.Close()
}
func (t *multiWriter) Remove(writers ...io.Writer) {
    for i := len(t.writers) - 1; i > 0; i-- {
        for _, v := range writers {
            if t.writers[i] == v {
                t.writers = append(t.writers[:i], t.writers[i+1:]...)
                break
            }
        }
    }
}
func (t *multiWriter) Append(writers ...io.Writer) {
    t.writers = append(t.writers, writers...)
}

type multiWriter struct {
    writers []io.Writer
}

func (t *multiWriter) Write(p []byte) (n int, err error) {
    for _, w := range t.writers {
        n, err = w.Write(p)
        if err != nil {
            return
        }
        if n != len(p) {
            err = io.ErrShortWrite
            return
        }
    }
    return len(p), nil
}

var _ stringWriter = (*multiWriter)(nil)

func (t *multiWriter) WriteString(s string) (n int, err error) {
    var p []byte // lazily initialized if/when needed
    for _, w := range t.writers {
        if sw, ok := w.(stringWriter); ok {
            n, err = sw.WriteString(s)
        } else {
            if p == nil {
                p = []byte(s)
            }
            n, err = w.Write(p)
        }
        if err != nil {
            return
        }
        if n != len(s) {
            err = io.ErrShortWrite
            return
        }
    }
    return len(s), nil
}

// MultiWriter creates a writer that duplicates its writes to all the
// provided writers, similar to the Unix tee(1) command.
func MultiWriter(writers ...io.Writer) io.Writer {
    w := make([]io.Writer, len(writers))
    copy(w, writers)
    return &multiWriter{w}
}

// stringWriter is the interface that wraps the WriteString method.
type stringWriter interface {
    WriteString(s string) (n int, err error)
}
",2375
917,38434629,"package main

import (
    ""io""
    ""os""
    ""sync""
)

func main() {
    w1, e := os.Create(""file1.txt"")
    if e != nil {
        panic(e)
    }
    w2, e := os.Create(""file2.txt"")
    if e != nil {
        panic(e)
    }
    mw := MultiWriter(w1, w2)
    data := []byte(""Hello "")
    _, e = mw.Write(data)
    if e != nil {
        panic(e)
    }

    var m *multiWriter = mw.(*multiWriter)
    m.Remove(w2)
    w2.Close()
    w3, e := os.Create(""file3.txt"")
    if e != nil {
        panic(e)
    }
    m.Append(w3)
    data = []byte(""World "")
    _, e = mw.Write(data)
    if e != nil {
        panic(e)
    }
    w3.Close()
    w1.Close()
}
func (t *multiWriter) Remove(writers ...io.Writer) {
    t.mu.Lock()
    defer t.mu.Unlock()
    for i := len(t.writers) - 1; i > 0; i-- {
        for _, v := range writers {
            if t.writers[i] == v {
                t.writers = append(t.writers[:i], t.writers[i+1:]...)
                break
            }
        }
    }
}
func (t *multiWriter) Append(writers ...io.Writer) {
    t.mu.Lock()
    defer t.mu.Unlock()
    t.writers = append(t.writers, writers...)
}

type multiWriter struct {
    writers []io.Writer
    mu      sync.Mutex
}

func (t *multiWriter) Write(p []byte) (n int, err error) {
    t.mu.Lock()
    defer t.mu.Unlock()
    for _, w := range t.writers {
        n, err = w.Write(p)
        if err != nil {
            return
        }
        if n != len(p) {
            err = io.ErrShortWrite
            return
        }
    }
    return len(p), nil
}

var _ stringWriter = (*multiWriter)(nil)

func (t *multiWriter) WriteString(s string) (n int, err error) {
    t.mu.Lock()
    defer t.mu.Unlock()
    var p []byte // lazily initialized if/when needed
    for _, w := range t.writers {
        if sw, ok := w.(stringWriter); ok {
            n, err = sw.WriteString(s)
        } else {
            if p == nil {
                p = []byte(s)
            }
            n, err = w.Write(p)
        }
        if err != nil {
            return
        }
        if n != len(s) {
            err = io.ErrShortWrite
            return
        }
    }
    return len(s), nil
}

// MultiWriter creates a writer that duplicates its writes to all the
// provided writers, similar to the Unix tee(1) command.
func MultiWriter(writers ...io.Writer) io.Writer {
    w := make([]io.Writer, len(writers))
    copy(w, writers)
    return &multiWriter{writers: w}
}

// stringWriter is the interface that wraps the WriteString method.
type stringWriter interface {
    WriteString(s string) (n int, err error)
}
",2578
918,38465544,"IDOrder: 0
IsClose: 1
IsConfirm: 2
IDUser: 3
",45
919,38465544,"  // create a fieldbinding object.
  var fArr []string
  fb := fieldbinding.NewFieldBinding()

  if fArr, err = rs.Columns(); err != nil {
    return nil, err
  }

  fb.PutFields(fArr)

  //
  outArr := []interface{}{}

  for rs.Next() {
    if err := rs.Scan(fb.GetFieldPtrArr()...); err != nil {
      return nil, err
    }

    fmt.Printf(""Row: %v, %v, %v, %s\n"", fb.Get(""IDOrder""), fb.Get(""IsConfirm""), fb.Get(""IDUser""), fb.Get(""Created""))
    outArr = append(outArr, fb.GetFieldArr())
  }
",494
920,38465544,"Row: 1, 1, 1, 2016-07-15 10:39:37 +0000 UTC
Row: 2, 1, 11, 2016-07-15 10:42:04 +0000 UTC
Row: 3, 1, 10, 2016-07-15 10:46:20 +0000 UTC
SampleQuery: [{""Created"":""2016-07-15T10:39:37Z"",""IDOrder"":1,""IDUser"":1,""IsClose"":0,""IsConfirm"":1},{""Created"":""2016-07-15T10:42:04Z"",""IDOrder"":2,""IDUser"":11,""IsClose"":0,""IsConfirm"":1},{""Created"":""2016-07-15T10:46:20Z"",""IDOrder"":3,""IDUser"":10,""IsClose"":0,""IsConfirm"":1}]
",403
921,38465544,"package main

import (
    ""bytes""
    ""database/sql""
    ""encoding/json""
    ""fmt""
)

import (
    _ ""github.com/go-sql-driver/mysql""
    ""github.com/junhsieh/goexamples/fieldbinding/fieldbinding""
)

var (
    db *sql.DB
)

// Table definition
// CREATE TABLE `salorder` (
//   `IDOrder` int(10) unsigned NOT NULL AUTO_INCREMENT,
//   `IsClose` tinyint(4) NOT NULL,
//   `IsConfirm` tinyint(4) NOT NULL,
//   `IDUser` int(11) NOT NULL,
//   `Created` datetime NOT NULL,
//   `Changed` datetime NOT NULL,
//   PRIMARY KEY (`IDOrder`),
//   KEY `IsClose` (`IsClose`)
// ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

func main() {
    var err error

    // starting database server
    db, err = sql.Open(""mysql"", ""Username:Password@tcp(Host:Port)/DBName?parseTime=true"")

    if err != nil {
        panic(err.Error()) // Just for example purpose. You should use proper error handling instead of panic
    }

    defer db.Close()

    // SampleQuery
    if v, err := SampleQuery(); err != nil {
        fmt.Printf(""%s\n"", err.Error())
    } else {
        var b bytes.Buffer

        if err := json.NewEncoder(&b).Encode(v); err != nil {
            fmt.Printf(""SampleQuery: %v\n"", err.Error())
        }

        fmt.Printf(""SampleQuery: %v\n"", b.String())
    }
}

func SampleQuery() ([]interface{}, error) {
    param := []interface{}{}

    param = append(param, 1)

    sql := ""SELECT ""
    sql += ""  SalOrder.IDOrder ""
    sql += "", SalOrder.IsClose ""
    sql += "", SalOrder.IsConfirm ""
    sql += "", SalOrder.IDUser ""
    sql += "", SalOrder.Created ""
    sql += ""FROM SalOrder ""
    sql += ""WHERE ""
    sql += ""IsConfirm = ? ""
    sql += ""ORDER BY SalOrder.IDOrder ASC ""

    rs, err := db.Query(sql, param...)

    if err != nil {
        return nil, err
    }

    defer rs.Close()

    // create a fieldbinding object.
    var fArr []string
    fb := fieldbinding.NewFieldBinding()

    if fArr, err = rs.Columns(); err != nil {
        return nil, err
    }

    fb.PutFields(fArr)

    //
    outArr := []interface{}{}

    for rs.Next() {
        if err := rs.Scan(fb.GetFieldPtrArr()...); err != nil {
            return nil, err
        }

        fmt.Printf(""Row: %v, %v, %v, %s\n"", fb.Get(""IDOrder""), fb.Get(""IsConfirm""), fb.Get(""IDUser""), fb.Get(""Created""))
        outArr = append(outArr, fb.GetFieldArr())
    }

    if err := rs.Err(); err != nil {
        return nil, err
    }

    return outArr, nil
}
",2418
922,38465544,"package fieldbinding

import (
    ""sync""
)

// NewFieldBinding ...
func NewFieldBinding() *FieldBinding {
    return &FieldBinding{}
}

// FieldBinding is deisgned for SQL rows.Scan() query.
type FieldBinding struct {
    sync.RWMutex // embedded.  see http://golang.org/ref/spec#Struct_types
    FieldArr     []interface{}
    FieldPtrArr  []interface{}
    FieldCount   int64
    MapFieldToID map[string]int64
}

func (fb *FieldBinding) put(k string, v int64) {
    fb.Lock()
    defer fb.Unlock()
    fb.MapFieldToID[k] = v
}

// Get ...
func (fb *FieldBinding) Get(k string) interface{} {
    fb.RLock()
    defer fb.RUnlock()
    // TODO: check map key exist and fb.FieldArr boundary.
    return fb.FieldArr[fb.MapFieldToID[k]]
}

// PutFields ...
func (fb *FieldBinding) PutFields(fArr []string) {
    fCount := len(fArr)
    fb.FieldArr = make([]interface{}, fCount)
    fb.FieldPtrArr = make([]interface{}, fCount)
    fb.MapFieldToID = make(map[string]int64, fCount)

    for k, v := range fArr {
        fb.FieldPtrArr[k] = &fb.FieldArr[k]
        fb.put(v, int64(k))
    }
}

// GetFieldPtrArr ...
func (fb *FieldBinding) GetFieldPtrArr() []interface{} {
    return fb.FieldPtrArr
}

// GetFieldArr ...
func (fb *FieldBinding) GetFieldArr() map[string]interface{} {
    m := make(map[string]interface{}, fb.FieldCount)

    for k, v := range fb.MapFieldToID {
        m[k] = fb.FieldArr[v]
    }

    return m
}
",1424
923,38572046,"himanshus-mbp:BCApplication himanshutyagi$ node app.js 
loading hardcoded peers
loading hardcoded users
[ibc-js] Peer:  vp0-dev_vp0...:5000
[ibc-js] No membership users found after filtering, assuming this is a network w/o membership
[ibc-js] Found chaincode in local file system
[ibc-js] Scanning files [ '.DS_Store', 'chaincode_finished.go', 'finished' ]
[ibc-js] Parsing file for shim version
[ibc-js] Found shim version: github.com/hyperledger/fabric/core/chaincode/shim
[ibc-js] Parsing file for invoke functions - chaincode_finished.go
[ibc-js] Found cc invoke function:  init
[ibc-js] Found cc invoke function:  delete_product
[ibc-js] Found cc invoke function:  delete_offering
[ibc-js] Found cc invoke function:  delete_contract
[ibc-js] Found cc invoke function:  delete_client
[ibc-js] Found cc invoke function:  write
[ibc-js] Found cc invoke function:  init_product
[ibc-js] Found cc invoke function:  init_offering
[ibc-js] Found cc invoke function:  init_contract
[ibc-js] Found cc invoke function:  init_client
[ibc-js] Found cc invoke function:  set_user_type
[ibc-js] Parsing file for query functions - chaincode_finished.go
[ibc-js] Found cc query function:  read
[ibc-js] Found cc query function:  read_product_index
[ibc-js] Found cc query function:  read_offering_index
[ibc-js] Found cc query function:  read_contract_index
[ibc-js] Found cc query function:  read_client_index
[ibc-js] load_chaincode() finished
chaincode summary file indicates chaincode has been previously deployed
------------------------------------------ Chain is up and running ------------------------------------------
Getting Offering List: 
[ibc-js] read  - success: { jsonrpc: '2.0',
  error: 
   { code: -32602,
     message: 'Invalid params',
     data: 'Must supply username for chaincode when security is enabled.' },
  id: 1469460324754 }
read _offeringindex: null { name: 'query() resp error',
  code: 400,
  details: 
   { code: -32602,
     message: 'Invalid params',
     data: 'Must supply username for chaincode when security is enabled.' } }
/Users/himanshutyagi/Desktop/workspace/node_modules/async/lib/async.js:106
        if (!arr.length) {
                ^

TypeError: Cannot read property 'length' of null
    at Object.async.each (/Users/himanshutyagi/Desktop/workspace/node_modules/async/lib/async.js:106:17)
    at /Users/himanshutyagi/Desktop/workspace/BCApplication/BCApplication/app.js:379:10
    at Object.options.success (/Users/himanshutyagi/Desktop/workspace/BCApplication/BCApplication/node_modules/ibm-blockchain-js/index.js:1020:22)
    at success (/Users/himanshutyagi/Desktop/workspace/BCApplication/BCApplication/node_modules/ibm-blockchain-js/lib/rest.js:109:30)
    at IncomingMessage. (/Users/himanshutyagi/Desktop/workspace/BCApplication/BCApplication/node_modules/ibm-blockchain-js/lib/rest.js:192:7)
    at emitNone (events.js:72:20)
    at IncomingMessage.emit (events.js:166:7)
    at endReadableNT (_stream_readable.js:921:12)
    at nextTickCallbackWith2Args (node.js:442:9)
    at process._tickCallback (node.js:356:17)
",3066
924,38572046,No membership users found after filtering,41
925,38572046,enrollID and enrollPW,21
926,38572046,app.js,6
927,38572046,"var options =   {
                    network:{
                        /*
                        peers: peers,
                        users: users,
                        options: {quiet: true, tls:false, maxRetry: 1}*/
                        'peers': [
                            {
                                        'discovery_host': 'localhost',
                                        'discovery_port': 30303,
                                        'api_host': 'localhost',
                                        'api_port_tls': 443,
                                        'api_port': 5000,
                                        'type': 'peer',
                                        'network_id': 'dev',
                                        'id': 'dev_vp0',
                                        'api_url': 'http://localhost:5000'
                                    }
                            ],
                            ""users"": [
                          {
                            ""username"": ""tyagi_user_type1"",
                            ""secret"": ""1ccf8703ac"",
                            ""enrollId"": ""tyagi_type1"",
                            ""enrollSecret"": ""1ccf8703ac""
                          }
                        ],
                    options: {quiet: true, tls:false, maxRetry: 1}
                    },
                    ...
};
",1390
928,38572046,user_type1_xxx,14
929,38572046,"himanshus-mbp:BCApplication himanshutyagi$ node app.js
loading hardcoded peers
loading hardcoded users
[ibc-js] Peer:  vp0-dev_vp0...:443
[ibc-js] Registering  vp0-dev_vp0...:443  w/enrollID - user_type1_tyagi
[ibc-js] Register - failure x1 : user_type1_tyagi 500
[ibc-js]    going to try to register again in 30 secs
Query for the product table executed
Query for the offering table executed
Query for the contract table executed
Query for the product table executed
[ibc-js] Registering  vp0-dev_vp0...:443  w/enrollID - user_type1_tyagi
[ibc-js] Register - failure x2 : user_type1_tyagi 500
[ibc-js]    going to try to register again in 30 secs
Query for the product table executed
Query for the offering table executed
Query for the contract table executed
Query for the product table executed
[ibc-js] Registering  vp0-dev_vp0...:443  w/enrollID - user_type1_tyagi
[ibc-js] Register - failure x3 : user_type1_tyagi 500
[ibc-js]    going to try to register again in 30 secs
Query for the product table executed
Query for the offering table executed
Query for the contract table executed
Query for the product table executed
Query for the product table executed
Query for the offering table executed
Query for the contract table executed
Query for the product table executed
[ibc-js] Registering  vp0-dev_vp0...:443  w/enrollID - user_type1_tyagi
[ibc-js] Register - failure x4 : user_type1_tyagi 500
! looks like an error loading the chaincode or network, app will fail
 { name: 'register() error',
  code: 500,
  details: 
   { [Error: connect ECONNREFUSED 127.0.0.1:443]
     code: 'ECONNREFUSED',
     errno: 'ECONNREFUSED',
     syscall: 'connect',
     address: '127.0.0.1',
     port: 443 } }
",1703
930,38698066,"func static(w http.ResponseWriter, r *http.Request) {
    //check backend
    if user, err := aaa.CurrentUser(w, r); err == nil {
        //user is logged in
        log.Println(user)
        vars := mux.Vars(r)
        page := vars[""page""]
        data, _ := ioutil.ReadFile(""downloads/"" + page)
        w.Write(data)
        return
    }else {
        //user is not logged in
        http.Redirect(w,r,""/login"",http.StatusUnauthorized)
        w.Write([]byte(""alert('Please login')""))
        return
    }
} 
",511
931,38698066,Unauthorized.,13
932,38698066,"package main

import (
    ""flag""
    ""fmt""
    ""html/template""
    ""io/ioutil""
    ""log""
    ""net/http""
    ""os""
    ""strings""
    ""strconv""
    ""time""
    ""github.com/apexskier/httpauth""
    ""github.com/gorilla/mux""
    ""runtime""
)

var (
    backend     httpauth.LeveldbAuthBackend
    aaa         httpauth.Authorizer
    roles       map[string]httpauth.Role
    port        = 80
    backendfile = ""auth.leveldb""
)

func static(w http.ResponseWriter, r *http.Request) {
    if user, err := aaa.CurrentUser(w, r); err == nil {
        log.Println(user)
        vars := mux.Vars(r)
        page := vars[""page""]
        data, _ := ioutil.ReadFile(""downloads/"" + page)
        w.Write(data)
        return
    }else {
        w.Write([]byte(""alert('Please login')""))
        http.Redirect(w,r,""/login"",http.StatusUnauthorized)
        return
    }
}
func main() {
    runtime.GOMAXPROCS(runtime.NumCPU())
    var err error
    os.Mkdir(backendfile, 0755)
    defer os.Remove(backendfile)

    // create the backend
    backend, err = httpauth.NewLeveldbAuthBackend(backendfile)
    if err != nil {
        panic(err)
    }

    // create some default roles
    roles = make(map[string]httpauth.Role)
    roles[""user""] = 30
    roles[""admin""] = 80
    aaa, err = httpauth.NewAuthorizer(backend, []byte(""cookie-encryption-key""), ""user"", roles)

    // create a default user
    username := ""admin""
    defaultUser := httpauth.UserData{Username: username, Role: ""admin""}
    err = backend.SaveUser(defaultUser)
    if err != nil {
        panic(err)
    }
    // Update user with a password and email address
    err = aaa.Update(nil, nil, username, ""adminadmin"", ""admin@localhost.com"")
    if err != nil {
        panic(err)
    }

    // set up routers and route handlers
    flag.Parse()
    hub := newHub()
    go hub.run()
    r := mux.NewRouter()
    r.HandleFunc(""/chat"", serveChat)
    r.HandleFunc(""/ws"", func(w http.ResponseWriter, r *http.Request) {
        serveWs(hub, w, r)
    })
    r.HandleFunc(""/downloads/{page}"", static)
    http.Handle(""/www/"", http.StripPrefix(""/www/"", http.FileServer(http.Dir(""./www""))))
    r.HandleFunc(""/login"", getLogin).Methods(""GET"")
    r.HandleFunc(""/register"", postRegister).Methods(""POST"")
    r.HandleFunc(""/register"", getRegister).Methods(""GET"")
    r.HandleFunc(""/login"", postLogin).Methods(""POST"")
    r.HandleFunc(""/admin"", handleAdmin).Methods(""GET"")
    r.HandleFunc(""/add_user"", postAddUser).Methods(""POST"")
    r.HandleFunc(""/change"", postChange).Methods(""POST"")
    r.HandleFunc(""/"", handlePage).Methods(""GET"") // authorized page
    r.HandleFunc(""/logout"", handleLogout)
    r.HandleFunc(""/home"", homeHandle).Methods(""GET"")

    http.Handle(""/"", r)
    fmt.Printf(""Server running on port %d\n"", port)
    srv:=&http.Server {
        Addr: "":""+strconv.Itoa(port),
        ReadTimeout: 10* time.Second,
        WriteTimeout: 10*time.Second,
        MaxHeaderBytes: 1<<20,
    }
    srv.ListenAndServe()
}
func serveChat(w http.ResponseWriter, r *http.Request) {
    if user, err := aaa.CurrentUser(w, r); err == nil {
        log.Println(r.URL)
        log.Println(user)
        w.Header().Set(""Content-Type"", ""text/html; charset=utf-8"")
        chatt, _ := template.New(""member"").Parse(chat)
        chatt.Execute(w, r.Host)
        return
    } else {
        http.Redirect(w, r, ""/login"", http.StatusUnauthorized)
        return
    }
}

type Page struct {
    USER httpauth.UserData
}

func homeHandle(w http.ResponseWriter, r *http.Request) {
    if user, err := aaa.CurrentUser(w, r); err == nil {
        type data struct {
            User  httpauth.UserData
            Roles map[string]httpauth.Role
            Users []httpauth.UserData
            Msg   []string
        }
        messages := aaa.Messages(w, r)
        users, err := backend.Users()
        if err != nil {
            panic(err)
        }
        d := data{User: user, Roles: roles, Users: users, Msg: messages}
        homet, _ := template.New(""member"").Parse(member)
        homet.Execute(w, d)
        return
    } else {
        http.Redirect(w, r, ""/login"", http.StatusUnauthorized)
        return
    }
}
func getRegister(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, register)
    return
}
func getLogin(rw http.ResponseWriter, req *http.Request) {
    fmt.Fprintf(rw, login)
    return
}

func postLogin(rw http.ResponseWriter, req *http.Request) {
    username := req.PostFormValue(""username"")
    password := req.PostFormValue(""password"")
    if err := aaa.Login(rw, req, username, password, ""/home""); err == nil || (err != nil && strings.Contains(err.Error(), ""already authenticated"")) {
        http.Redirect(rw, req, ""/home"", http.StatusSeeOther)
        return
    } else if err != nil {
        fmt.Println(err)
        http.Redirect(rw, req, ""/login"", http.StatusSeeOther)
        return
    }
}

func postRegister(rw http.ResponseWriter, req *http.Request) {
    var user httpauth.UserData
    user.Username = req.PostFormValue(""username"")
    user.Email = req.PostFormValue(""email"")
    password := req.PostFormValue(""password"")
    if err := aaa.Register(rw, req, user, password); err == nil {
        postLogin(rw, req)
        return
    } else {
        http.Redirect(rw, req, ""/login"", http.StatusSeeOther)
        return
    }
}

func postAddUser(rw http.ResponseWriter, req *http.Request) {
    var user httpauth.UserData
    user.Username = req.PostFormValue(""username"")
    user.Email = req.PostFormValue(""email"")
    password := req.PostFormValue(""password"")
    user.Role = req.PostFormValue(""role"")
    if err := aaa.Register(rw, req, user, password); err != nil {
        // maybe something
    }
    http.Redirect(rw, req, ""/admin"", http.StatusSeeOther)
    return
}

func postChange(rw http.ResponseWriter, req *http.Request) {
    email := req.PostFormValue(""new_email"")
    aaa.Update(rw, req, """", """", email)
    http.Redirect(rw, req, ""/"", http.StatusSeeOther)
    return
}

func handlePage(rw http.ResponseWriter, req *http.Request) {
    rw.Write([]byte(index))
    return
}

func handleAdmin(rw http.ResponseWriter, req *http.Request) {
    if err := aaa.AuthorizeRole(rw, req, ""admin"", true); err != nil {
        fmt.Println(err)
        http.Redirect(rw, req, ""/login"", http.StatusSeeOther)
        return
    }
    if user, err := aaa.CurrentUser(rw, req); err == nil {
        type data struct {
            User  httpauth.UserData
            Roles map[string]httpauth.Role
            Users []httpauth.UserData
            Msg   []string
        }
        messages := aaa.Messages(rw, req)
        users, err := backend.Users()
        if err != nil {
            panic(err)
        }
        d := data{User: user, Roles: roles, Users: users, Msg: messages}
        t, err := template.New(""admin"").Parse(admin)
        if err != nil {
            panic(err)
        }
        t.Execute(rw, d)
        return
    }
}

func handleLogout(rw http.ResponseWriter, req *http.Request) {
    if err := aaa.Logout(rw, req); err != nil {
        fmt.Println(err)
        // this shouldn't happen
        return
    }
    http.Redirect(rw, req, ""/"", http.StatusSeeOther)
    return
}
",7170
933,38747259,"$ go get -d github.com/ipfs/go-ipfs

$ cd $GOPATH/src/github.com/ipfs/go-ipfs
Then install go-ipfs and its dependencies, including gx and gx-go:

$ make install
",161
934,38747259,make install,12
935,38747259,"ERROR: [1 / 32 ] parallel fetch: failed to fetch package: QmVCe3SNMjkcPgnpFhZs719dheq6xE7gJwjzV7aWcUM4Ms: Post http://v04x.ipfs.io/api/v0/get?arg=QmVCe3SNMjkcPgnpFhZs719dheq6xE7gJwjzV7aWcUM4Ms&encodinERROR: from shell.Get(): &url.Error{Op:""Post"", URL:""http://v04x.ipfs.io/api/v0/get?arg=QmeWQMDa5dSdP4n8WDeoY5z8L2EKVqF4ZvK4VEHsLqXsGu&encoding=json&stream-channels=true"", Err:(*net.OpError)(0xc820142e60)}
",405
936,38747259,"# Minimum version numbers for software required to build IPFS
IPFS_MIN_GO_VERSION = 1.5.2
IPFS_MIN_GX_VERSION = 0.6
IPFS_MIN_GX_GO_VERSION = 1.1

ifeq ($(TEST_NO_FUSE),1)
  go_test=IPFS_REUSEPORT=false go test -tags nofuse
else
  go_test=IPFS_REUSEPORT=false go test
endif

ifeq ($(OS),Windows_NT)
  GOPATH_DELIMITER = ;
else
  GOPATH_DELIMITER = :
endif

dist_root=/ipfs/QmUnvqDuRyfe7HJuiMMHv77AMUFnjGyAU28LFPeTYwGmFF
gx_bin=bin/gx-v0.8.0
gx-go_bin=bin/gx-go-v1.2.1

# use things in our bin before any other system binaries
export PATH := bin:$(PATH)
export IPFS_API ?= v04x.ipfs.io

all: help

godep:
    go get github.com/tools/godep

go_check:
    @bin/check_go_version $(IPFS_MIN_GO_VERSION)

bin/gx-v%:
    @echo ""installing gx $(@:bin/gx-%=%)""
    @bin/dist_get ${dist_root} gx $@ $(@:bin/gx-%=%)
    rm -f bin/gx
    ln -s $(@:bin/%=%) bin/gx

bin/gx-go-v%:
    @echo ""installing gx-go $(@:bin/gx-go-%=%)""
    @bin/dist_get ${dist_root} gx-go $@ $(@:bin/gx-go-%=%)
    rm -f bin/gx-go
    ln -s $(@:bin/%=%) bin/gx-go

gx_check: ${gx_bin} ${gx-go_bin}

path_check:
    @bin/check_go_path $(realpath $(shell pwd)) $(realpath $(addsuffix /src/github.com/ipfs/go-ipfs,$(subst $(GOPATH_DELIMITER), ,$(GOPATH))))

deps: go_check gx_check path_check
    ${gx_bin} --verbose install --global

# saves/vendors third-party dependencies to Godeps/_workspace
# -r flag rewrites import paths to use the vendored path
# ./... performs operation on all packages in tree
vendor: godep
    godep save -r ./...

install: deps
    make -C cmd/ipfs install

build: deps
    make -C cmd/ipfs build

nofuse: deps
    make -C cmd/ipfs nofuse

clean:
    make -C cmd/ipfs clean

uninstall:
    make -C cmd/ipfs uninstall

PHONY += all help godep gx_check
PHONY += go_check deps vendor install build nofuse clean uninstall

##############################################################
# tests targets

test: test_expensive

test_short: build test_go_short test_sharness_short

test_expensive: build test_go_expensive test_sharness_expensive windows_build_check

test_3node:
    cd test/3nodetest && make

test_go_short:
    $(go_test) -test.short ./...

test_go_expensive:
    $(go_test) ./...

test_go_race:
    $(go_test) ./... -race

test_sharness_short:
    make -C test/sharness/

test_sharness_expensive:
    TEST_EXPENSIVE=1 make -C test/sharness/

test_all_commits:
    @echo ""testing all commits between origin/master..HEAD""
    @echo ""WARNING: this will 'git rebase --exec'.""
    @test/bin/continueyn
    GIT_EDITOR=true git rebase -i --exec ""make test"" origin/master

test_all_commits_travis:
    # these are needed because travis.
    # we don't use this yet because it takes way too long.
    git config --global user.email ""nemo@ipfs.io""
    git config --global user.name ""IPFS BOT""
    git fetch origin master:master
    GIT_EDITOR=true git rebase -i --exec ""make test"" master

# since we have CI for osx and linux but not windows, this should help
windows_build_check:
    GOOS=windows GOARCH=amd64 go build -o .test.ipfs.exe ./cmd/ipfs
    rm .test.ipfs.exe

PHONY += test test_short test_expensive

##############################################################
# A semi-helpful help message

help:
    @echo 'DEPENDENCY TARGETS:'
    @echo ''
    @echo '  gx_check        - Installs or upgrades gx and gx-go'
    @echo '  deps            - Download dependencies using gx'
    @echo '  vendor          - Create a Godep workspace of 3rd party dependencies'
    @echo ''
    @echo 'BUILD TARGETS:'
    @echo ''
    @echo '  all          - print this help message'
    @echo '  build        - Build binary at ./cmd/ipfs/ipfs'
    @echo '  nofuse       - Build binary with no fuse support'
    @echo '  install      - Build binary and install into $$GOPATH/bin'
#   @echo '  dist_install - TODO: c.f. ./cmd/ipfs/dist/README.md'
    @echo ''
    @echo 'CLEANING TARGETS:'
    @echo ''
    @echo '  clean        - Remove binary from build directory'
    @echo '  uninstall    - Remove binary from $$GOPATH/bin'
    @echo ''
    @echo 'TESTING TARGETS:'
    @echo ''
    @echo '  test                    - Run expensive tests and Window$$ check'
    @echo '  test_short              - Run short tests and sharness tests'
    @echo '  test_expensive          - Run a few extras'
    @echo '  test_3node'
    @echo '  test_go_short'
    @echo '  test_go_expensive'
    @echo '  test_go_race'
    @echo '  test_sharness_short'
    @echo '  test_sharness_expensive'
    @echo '  test_all_commits'
    @echo ""  test_all_commits_travis - DON'T USE: takes way too long""
    @echo '  windows_build_check'
    @echo ''

PHONY += help

.PHONY: $(PHONY)
",4640
937,38747259,go,2
938,38747259,git,3
939,38747259,go get -d github.com/ipfs/go-ipfs,33
940,38747259,shell.Get(),11
941,38748361,GODEBUG=cgocheck=0,18
942,38748361,"libtesting:
  gcc -fPIC -c library/testing.c -o library/testing.o
  gcc -dynamiclib library/testing.o -o library/libtesting.dylib
",130
943,38748361,"/* library/testing.h */

#ifndef __TESTING_H__
#define __TESTING_H__

#include 

struct worker_node {
  pthread_t worker;
  struct worker_node *next;
};

// Structs for publisher
struct publisher {
  void (* callback)(void *, char *, int);
  void *context;
  struct worker_node *workers;
};

struct publisher * publisher_new(void *, void (*)(void *, char *, int));
void publisher_cleanup(struct publisher *);
void publisher_finish(struct publisher *);
void publisher_publish(struct publisher *, char *, int);

#endif // __TESTING_H__
",534
944,38748361,"/* library/testing.c */

#include 
#include 
#include 

#include ""testing.h""

struct message_wrapper {
  void * context;
  char * message;
  int message_len;
  void (* callback)(void *, char *, int);
};

struct publisher * publisher_new(void *context, void (*callback)(void *, char *, int)) {
  struct publisher * self = (struct publisher *)malloc(sizeof(struct publisher));
  assert(self);
  assert(self->callback = callback);
  self->context = context;
  self->workers = NULL;

  return self;
}

void publisher_cleanup(struct publisher * self) {
  struct worker_node * next_node;
  struct worker_node * node = self->workers;
  while (node != NULL) {
    next_node = node->next;
    free(node);
    node = next_node;
  }
  free(self);
  self = NULL;
}

static void * publisher_worker_thread(void * args) {
  struct message_wrapper * wrapper = (struct message_wrapper *)args;

  wrapper->callback(wrapper->context, wrapper->message, wrapper->message_len);

  free(wrapper->message);
  free(wrapper);

  pthread_exit(NULL);
}

void publisher_publish(struct publisher *self, char * message, int message_len) {
  pthread_attr_t attr;

  pthread_attr_init(&attr);
  pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);

  struct worker_node * new_node = (struct worker_node *)malloc(sizeof(struct worker_node));
  new_node->next = self->workers;
  self->workers = new_node;

  struct message_wrapper *wrapper = (struct message_wrapper *)malloc(sizeof(struct message_wrapper));
  wrapper->message = malloc(message_len);
  memcpy(wrapper->message, message, message_len);
  wrapper->message_len = message_len;
  wrapper->context = self->context;
  wrapper->callback = self->callback;

  assert(!pthread_create(&self->workers->worker, &attr, publisher_worker_thread, (void *)wrapper));
}

void publisher_finish(struct publisher *self) {
  struct worker_node * node = self->workers;
  while (node != NULL) {
    assert(!pthread_join(node->worker, NULL));
    node = node->next;
  }
}
",1983
945,38748361,"/* testing_c.c */

#include ""_cgo_export.h""

void cgo_callback_wrapper(void * context, char *message, int message_len) {
    callbackWrapper(context, message, message_len);
}
",175
946,38748361,"package main

/*
#cgo LDFLAGS: -lpthread -Llibrary -ltesting
#include ""library/testing.h""

extern void cgo_callback_wrapper(void * context, char *message, int message_len);
*/
import ""C""

import (
    ""fmt""
    ""unsafe""
)

type Handler interface {
    HandleMessage([]byte)
}

type Publisher struct {
    base *C.struct_publisher
}

//export callbackWrapper
func callbackWrapper(cContext unsafe.Pointer, cMessage *C.char, cMessageSize C.int) {
    handler := *(*Handler)(cContext)
    message := C.GoBytes(unsafe.Pointer(cMessage), cMessageSize)
    handler.HandleMessage(message)
}

func (p *Publisher) Publish(message []byte) {
    cMessage := (*C.char)(unsafe.Pointer(&message[0]))
    cMessageLen := C.int(len(message))
    C.publisher_publish(p.base, cMessage, cMessageLen)
}

func CreatePublisher(handler Handler) *Publisher {
    return &Publisher{
        base: C.publisher_new(unsafe.Pointer(&handler), (*[0]byte)(C.cgo_callback_wrapper)),
    }
}

func (p *Publisher) Finish() {
    C.publisher_finish(p.base)
}

//////// EXAMPLE ////////

type TestHandler struct {
    name string
}

func (h TestHandler) HandleMessage(message []byte) {
    fmt.Printf(""%s received %v"", h.name, message)
}

func main() {
    handler := TestHandler{name: ""Test""}

    publisher := CreatePublisher(handler)
    publisher.Publish([]byte(""test""))
    publisher.Finish()
}
",1362
947,38748361,make && go build,16
948,38748361,GODEBUG=cgocheck=0,18
949,38748361,Test received [116 101 115 116],31
950,38748361,cgocheck,8
951,38748361,"package main

/*
#cgo LDFLAGS: -lpthread -Llibrary -ltesting
#include ""library/testing.h""

extern void cgo_callback_wrapper(void * context, char *message, int message_len);
*/
import ""C""

import (
    ""fmt""
    ""sync""
    ""unsafe""
)

var registry map[int]Handler
var handlers int
var mutex = sync.Mutex{}

type Handler interface {
    HandleMessage([]byte)
}

type Publisher struct {
    base *C.struct_publisher
}

//export callbackWrapper
func callbackWrapper(cContext unsafe.Pointer, cMessage *C.char, cMessageSize C.int) {
    mutex.Lock()
    handler := registry[*(*int)(cContext)]
    mutex.Unlock()
    message := C.GoBytes(unsafe.Pointer(cMessage), cMessageSize)
    handler.HandleMessage(message)
}

func (p *Publisher) Publish(message []byte) {
    cMessage := (*C.char)(unsafe.Pointer(&message[0]))
    cMessageLen := C.int(len(message))
    C.publisher_publish(p.base, cMessage, cMessageLen)
}

func CreatePublisher(handler Handler) *Publisher {
    mutex.Lock()
    index := handlers
    handlers++
    if registry == nil {
        registry = make(map[int]Handler)
    }
    registry[index] = handler
    mutex.Unlock()
    return &Publisher{
        base: C.publisher_new(unsafe.Pointer(&index), (*[0]byte)(C.cgo_callback_wrapper)),
    }
}

func (p *Publisher) Finish() {
    C.publisher_finish(p.base)
}

//////// EXAMPLE ////////

type TestHandler struct {
    name string
}

func (h TestHandler) HandleMessage(message []byte) {
    fmt.Printf(""%s received %v"", h.name, message)
}

func main() {
    handler := TestHandler{name: ""Test""}

    publisher := CreatePublisher(handler)
    publisher.Publish([]byte(""test""))
    publisher.Finish()
}
",1660
952,38748361,CreatePublisher,15
953,38748361,callbackWrapper,15
954,38818437,x.(T),5
955,38818437,x,1
956,38818437,x,1
957,38818437,T,1
958,38818437,x,1
959,38818437,t := x.(T),10
960,38818437,T,1
961,38818437,x,1
962,38818437,"t,ok := x.(T)",13
963,38818437,x,1
964,38818437,T,1
965,38818437,ok,2
966,38818437,false,5
967,38818437,ok,2
968,38818437,true,4
969,38818437,t,1
970,38818437,T,1
971,38818437,Area(),6
972,38818437,"type Circle struct {
    Radius float64
}
func (t Circle) Area() float64 {
    return math.Pi * t.Radius * t.Radius
}
",118
973,38818437,Triangle,8
974,38818437,"type Triangle struct {
    A, B, C float64 // lengths of the sides of a triangle.
}
func (t Triangle) Area() float64 {
    p := (t.A + t.B + t.C) / 2.0 // perimeter half
    return math.Sqrt(p * (p - t.A) * (p - t.B) * (p - t.C))
}
",232
975,38818437,Rectangle,9
976,38818437,"type Rectangle struct {
    A, B float64
}

func (t Rectangle) Area() float64 {
    return t.A * t.B
}
",103
977,38818437,Square,6
978,38818437,"type Square struct {
    A float64
}
func (t Square) Area() float64 {
    return t.A * t.A
}
",93
979,38818437,Circle,6
980,38818437,"shapes := []Shape{
    Circle{1.0},
    Square{1.772453},
    Rectangle{5, 10},
    Triangle{10, 4, 7},
}
",106
981,38818437,Shape interface,15
982,38818437,[]Shape,7
983,38818437,"type Shape interface {
    Area() float64
}
",44
984,38818437,"shapes := []Shape{
    Circle{1.0},
    Square{1.772453},
    Rectangle{5, 10},
    Triangle{10, 4, 7},
}
",106
985,38818437,Circle,6
986,38818437,Shape,5
987,38818437,Triangle,8
988,38818437,Shape,5
989,38818437,v.Area(),8
990,38818437,"for _, v := range shapes {
    fmt.Println(v, ""\tArea:"", v.Area())
}
",69
991,38818437,Area(),6
992,38818437,shapes,6
993,38818437,"func (t Triangle) Angles() []float64 {
    return []float64{angle(t.B, t.C, t.A), angle(t.A, t.C, t.B), angle(t.A, t.B, t.C)}
}
func angle(a, b, c float64) float64 {
    return math.Acos((a*a+b*b-c*c)/(2*a*b)) * 180.0 / math.Pi
}
",230
994,38818437,Triangle,8
995,38818437,shapes,6
996,38818437,"for _, v := range shapes {
    fmt.Println(v, ""\tArea:"", v.Area())
    if t, ok := v.(Triangle); ok {
        fmt.Println(""Angles:"", t.Angles())
    }
}
",153
997,38818437,"t, ok := v.(Triangle)",21
998,38818437,v,1
999,38818437,Shape,5
1000,38818437,Triangle,8
1001,38818437,ok,2
1002,38818437,true,4
1003,38818437,false,5
1004,38818437,t.Angles(),10
1005,38818437,"Circle (Radius: 1)  Area: 3.141592653589793
Square (Sides: 1.772453)    Area: 3.1415896372090004
Rectangle (Sides: 5, 10)    Area: 50
Triangle (Sides: 10, 4, 7)  Area: 10.928746497197197
Angles: [128.68218745348943 18.194872338766785 33.12294020774379]
",253
1006,38818437,"package main

import ""fmt""
import ""math""

func main() {
    shapes := []Shape{
        Circle{1.0},
        Square{1.772453},
        Rectangle{5, 10},
        Triangle{10, 4, 7},
    }
    for _, v := range shapes {
        fmt.Println(v, ""\tArea:"", v.Area())
        if t, ok := v.(Triangle); ok {
            fmt.Println(""Angles:"", t.Angles())
        }
    }
}

type Shape interface {
    Area() float64
}
type Circle struct {
    Radius float64
}
type Triangle struct {
    A, B, C float64 // lengths of the sides of a triangle.
}
type Rectangle struct {
    A, B float64
}
type Square struct {
    A float64
}

func (t Circle) Area() float64 {
    return math.Pi * t.Radius * t.Radius
}

// Heron's Formula for the area of a triangle
func (t Triangle) Area() float64 {
    p := (t.A + t.B + t.C) / 2.0 // perimeter half
    return math.Sqrt(p * (p - t.A) * (p - t.B) * (p - t.C))
}
func (t Rectangle) Area() float64 {
    return t.A * t.B
}

func (t Square) Area() float64 {
    return t.A * t.A
}

func (t Circle) String() string {
    return fmt.Sprint(""Circle (Radius: "", t.Radius, "")"")
}
func (t Triangle) String() string {
    return fmt.Sprint(""Triangle (Sides: "", t.A, "", "", t.B, "", "", t.C, "")"")
}
func (t Rectangle) String() string {
    return fmt.Sprint(""Rectangle (Sides: "", t.A, "", "", t.B, "")"")
}
func (t Square) String() string {
    return fmt.Sprint(""Square (Sides: "", t.A, "")"")
}

func (t Triangle) Angles() []float64 {
    return []float64{angle(t.B, t.C, t.A), angle(t.A, t.C, t.B), angle(t.A, t.B, t.C)}
}
func angle(a, b, c float64) float64 {
    return math.Acos((a*a+b*b-c*c)/(2*a*b)) * 180.0 / math.Pi
}
",1633
1007,38818437,"x.(T)  
",8
1008,38818437,"var x interface{} = 7  // x has dynamic type int and value 7
i := x.(int)           // i has type int and value 7

type I interface { m() }
var y I
s := y.(string)        // illegal: string does not implement I (missing method m)
r := y.(io.Reader)     // r has type io.Reader and y must implement both I and io.Reader
",319
1009,38818437,"v, ok = x.(T)
v, ok := x.(T)
var v, ok = x.(T)
",47
1010,38818437,x.(T),5
1011,38818437,interface{},11
1012,38818437,"panic: interface conversion: interface is nil, not interface {}",63
1013,38818437,"package main

func main() {
    var i interface{} // nil
    var _ = i.(interface{})
}
",87
1014,38818437,"package main

import ""fmt""

func main() {
    var i interface{} // nil
    b, ok := i.(interface{})
    fmt.Println(b, ok) //  false

    i = 2
    c, ok := i.(interface{})
    fmt.Println(c, ok) // 2 true

    //var j int = c // cannot use c (type interface {}) as type int in assignment: need type assertion
    //fmt.Println(j)
}
",333
1015,38818437," false
2 true
",14
1016,38818437,c,1
1017,38818437,interface {},12
1018,38818437,int,3
1019,38818437,"package main

import ""fmt""

func main() {
    const fm = ""'%T'\t'%#[1]v'\t'%[1]v'\t%v\n""
    var i interface{}
    b, ok := i.(interface{})
    fmt.Printf(fm, b, ok) // ''    '' '' false

    i = 2
    b, ok = i.(interface{})
    fmt.Printf(fm, b, ok) // 'int'  '2' '2' true

    i = ""Hi""
    b, ok = i.(interface{})
    fmt.Printf(fm, b, ok) // 'string'   '""Hi""'  'Hi'    true

    i = new(interface{})
    b, ok = i.(interface{})
    fmt.Printf(fm, b, ok) // '*interface {}'    '(*interface {})(0xc042004330)' '0xc042004330'  true

    i = struct{}{}
    b, ok = i.(interface{})
    fmt.Printf(fm, b, ok) // 'struct {}'    'struct {}{}'   '{}'    true

    i = fmt.Println
    b, ok = i.(interface{})
    fmt.Printf(fm, b, ok) // 'func(...interface {}) (int, error)'   '(func(...interface {}) (int, error))(0x456740)'    '0x456740'  true

    i = Shape.Area
    b, ok = i.(interface{})
    fmt.Printf(fm, b, ok) // 'func(main.Shape) float64' '(func(main.Shape) float64)(0x401910)'  '0x401910'  true
}

type Shape interface {
    Area() float64
}
",1048
1020,38874816,"package main

import (
    ""html/template""
    ""log""
    ""net/http""
    ""path/filepath""
    ""sync""
)

type templateHandler struct {
    //once is an object that will perform exactly one action
    once     sync.Once
    filename string
    templ    *template.Template
}

func (t *templateHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    //this function call will be executed only once
    t.once.Do(func() {
        t.templ = template.Must(template.ParseFiles(filepath.Join(""templates"", t.filename)))
        log.Println(""one time"")
    })
    t.templ.Execute(w, nil)
}

func main() {
    http.Handle(""/"", &templateHandler{filename: ""chat.html""})
    if err := http.ListenAndServe("":5000"", nil); err != nil {
        log.Fatal(""ListenAndServe"", err)
    }
}
",774
1021,38874816,"package main

//Notes on channels
//read from channel x to a
//a := <- x
//write 5 to channel x
//x <- 5

import (
    ""github.com/gorilla/websocket""
)

//client represents a single chatting user.

type client struct {
    //client represents a single chatting user
    socket *websocket.Conn
    //sent is a channel on which messages are sent
    send chan []byte
    //room is the room this client is chatting in
    room *room
}

func (c *client) read() {
    for {
        //if err is nil after the execution of ReadMessage()
        //execute the line between the braces
        if _, msg, err := c.socket.ReadMessage(); err == nil {
            c.room.forward <- msg
        } else {
            break
        }
    }
    c.socket.Close()
}

func (c *client) write() {
    for msg := range c.send {
        if err := c.socket.WriteMessage(websocket.TextMessage, msg); err != nil {
            break
        }
    }
    c.socket.Close()
}
",944
1022,38874816,"package main

import (
    ""log""
    ""net/http""

    ""github.com/gorilla/websocket""
)

type room struct {
    //forward is a channel that holds incoming messages
    //that should be forwarded to other clients
    forward chan []byte
    //join is a channel for clients wishing to join the room
    join chan *client
    //leave is a channel for clients wishing to leave the room.
    leave chan *client
    //clients holds al the current clients in this room.
    clients map[*client]bool
}

func (r *room) run() {
    for {
        select {
        case client := <-r.join:
            //joining
            r.clients[client] = true
        case client := <-r.leave:
            //leaving
            delete(r.clients, client)
            close(client.send)
        case msg := <-r.forward:
            //forward message to all clients
            for client := range r.clients {
                select {
                case client.send <- msg:
                default:
                    //failed to send
                    delete(r.clients, client)
                    close(client.send)
                }
            }
        }
    }
}

const (
    socketBufferSize  = 1024
    messageBufferSize = 256
)

//in order for the browser to switch to the websocket
//protocol a header with an upgrade request from http
//to websocket must be sent
var upgrader = &websocket.Upgrader{
    ReadBufferSize:  socketBufferSize,
    WriteBufferSize: socketBufferSize,
}

func (r *room) ServeHTTP(w http.ResponseWriter, req *http.Request) {
    socket, err := upgrader.Upgrade(w, req, nil)
    if err != nil {
        log.Fatal(""ServeHTTP:"", err)
        return
    }
    client := &client{
        socket: socket,
        send:   make(chan []byte, messageBufferSize),
        room:   r,
    }

    r.join <- client
    defer func() { r.leave <- client }()
    go client.write()
    client.read()
}
",1894
1023,38874816,"


  Chat

input {display:block;}
ul{list-style:none;}




    
    
        
        
    
    
    

    
$(function(){
    var socket = null;
    var msgBox = $(""#chatbox textarea"");
    var messages = $(""#messages"");
    $(""#chatbox"").submit(function(){
        if (!msgBox.val()) return false;
        if (!socket) {
            alert(""Error: There is no socket connection."");
            return false;
        }
        socket.send(msgBox.val());
        msgBox.val("""");
        return false;
    });
    if (!window[""WebSocket""]) {
        alert(""Error: Your browser does not support web sockets."")
    }else {
        socket = new WebSocket(""ws://localhost:5000/room"");
        socket.onclose = function() {
            alert(""Connection has been closed."");
        }
        socket.onmessage = function(e) {
            messages.append($("""").text(e.data));
        }
    }
});
    


",893
1024,38879356,"// ReceiveData - used to handle incoming data
func ReceiveData(w http.ResponseWriter, r *http.Request) {
    if r.Method != ""POST"" {
        http.NotFound(w, r)
        return
    }

    body, err := ioutil.ReadAll(r.Body)
    if err != nil {
        panic(err)
    }

    // database
    session, err := mgo.Dial(""localhost"")
    if err != nil {
        panic(err)
    } else {
        fmt.Println(""session created"")
        database := session.DB(""schedule_calculator"")
        collection := database.C(""schedule_save"")
        num, err := collection.Count()
        if err == nil {
            fmt.Println(""schedule_save collection count = "", num)
            mongodbData := SavedData{ID: bson.NewObjectId(), Data: string(body), Date: time.Now()}
            collection.Insert(mongodbData)
            num, _ := collection.Count()
            fmt.Println(""new count: "", num)
        } else {
            fmt.Println(""schedule_save error - "", err)
        }
    }

    if err := json.NewEncoder(w).Encode(""todos""); err != nil {
        panic(err)
    }
}

type SavedData struct {
    ID   bson.ObjectId `bson:""_id""`
    Data string
    Date time.Time
}

// SendData - Called by UI to get saved data
func SendData(w http.ResponseWriter, r *http.Request) {
    fmt.Println(""SendData function"")
    session, err := mgo.Dial(""localhost"")
    defer closeSession(session)
    if err != nil {
        panic(err)
    } else {
        fmt.Println(""session created"")
        database := session.DB(""schedule_calculator"")
        collection := database.C(""schedule_save"")
        num, err := collection.Count()
        if err == nil {
            fmt.Println(""schedule_save collection count = "", num)

            var myData SavedData
            dbSize, err2 := collection.Count()
            if err2 != nil {
                panic(err2)
            }

            if dbSize > 0 {
                // db not empty
                err2 = collection.Find(nil).Skip(dbSize - 1).One(&myData)
                if err2 != nil {
          // TODO: handle error
                    panic(err2)
                }

                // fmt.Println(myData.Data)

                w.Header().Set(""Content-Type"", ""application/json; charset=UTF-8"")
                w.WriteHeader(http.StatusOK)

                if err := json.NewEncoder(w).Encode(myData.Data); err != nil {
          // TODO: handle error
                    panic(err)
                }
            } else {
                // db empty
        fmt.Println(""DB is empty"")
            }

        } else {
            fmt.Println(""schedule_save error - "", err)
        }
    }
}

// closes the mongodb session
// TODO: make it use only 1 session
func closeSession(session *mgo.Session) {
    session.Close()
    fmt.Println(""session closed"")
}
",2782
1025,38879356,"2016-08-10T19:22:59.734+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55401 #60 (6 connections now open)
2016-08-10T19:22:59.740+0300 I NETWORK  [conn60] end connection 127.0.0.1:55401 (5 connections now open)
2016-08-10T19:23:58.794+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55405 #61 (6 connections now open)
2016-08-10T19:23:58.800+0300 I NETWORK  [conn61] end connection 127.0.0.1:55405 (5 connections now open)
2016-08-10T19:24:24.219+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55411 #62 (6 connections now open)
2016-08-10T19:24:24.225+0300 I NETWORK  [conn62] end connection 127.0.0.1:55411 (5 connections now open)
2016-08-10T19:25:56.149+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55434 #63 (6 connections now open)
2016-08-10T19:25:56.155+0300 I NETWORK  [conn63] end connection 127.0.0.1:55434 (5 connections now open)
2016-08-10T19:33:54.127+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55460 #64 (6 connections now open)
2016-08-10T19:33:54.133+0300 I NETWORK  [conn64] end connection 127.0.0.1:55460 (5 connections now open)
2016-08-10T19:35:12.060+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55476 #65 (6 connections now open)
2016-08-10T19:35:12.066+0300 I NETWORK  [conn65] end connection 127.0.0.1:55476 (5 connections now open)
2016-08-10T19:35:22.827+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55477 #66 (6 connections now open)
2016-08-10T19:35:22.833+0300 I NETWORK  [conn66] end connection 127.0.0.1:55477 (5 connections now open)
2016-08-10T19:35:37.720+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55478 #67 (6 connections now open)
2016-08-10T19:35:52.725+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55487 #68 (7 connections now open)
2016-08-10T19:36:20.498+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55488 #69 (8 connections now open)
2016-08-10T19:36:20.508+0300 I NETWORK  [conn69] end connection 127.0.0.1:55488 (7 connections now open)
2016-08-10T19:36:33.100+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55490 #70 (8 connections now open)
2016-08-10T19:36:37.155+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55492 #71 (9 connections now open)
2016-08-10T19:36:48.105+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55493 #72 (10 connections now open)
2016-08-10T19:36:50.284+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55494 #73 (11 connections now open)
2016-08-10T19:36:52.157+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55495 #74 (12 connections now open)
2016-08-10T19:36:53.328+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55496 #75 (13 connections now open)
2016-08-10T19:37:01.375+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55497 #76 (14 connections now open)
2016-08-10T19:37:05.287+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55498 #77 (15 connections now open)
2016-08-10T19:37:05.827+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55499 #78 (16 connections now open)
2016-08-10T19:37:05.836+0300 I NETWORK  [conn78] end connection 127.0.0.1:55499 (15 connections now open)
2016-08-10T19:37:08.333+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55500 #79 (16 connections now open)
2016-08-10T19:37:16.376+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55521 #80 (17 connections now open)
2016-08-10T19:37:23.323+0300 W NETWORK  [HostnameCanonicalizationWorker] Failed to obtain name info for: [ (192.168.0.102, ""nodename nor servname provided, or not known""), (192.168.0.102, ""nodename nor servname provided, or not known"") ]
2016-08-10T19:40:41.079+0300 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:55546 #81 (18 connections now open)
2016-08-10T19:40:41.087+0300 I NETWORK  [conn81] end connection 127.0.0.1:55546 (17 connections now open)
",4072
1026,38898766,"a8 := [8]int{1, 2, 3, 4, 5, 6, 7, 8}
fmt.Println(a8) // [1 2 3 4 5 6 7 8]
",74
1027,38898766,"a8 := [8]int{}
fmt.Println(a8) // [0 0 0 0 0 0 0 0]
",52
1028,38898766,"b := [64][8]int{}
for i, v := range b {
    for j, _ := range v {
        b[i][j] = i*100 + j
    }
    fmt.Println(b[i])
}
",124
1029,38898766,"package main

import ""fmt""

func main() {
    aa := [64][8]int{}
    fmt.Println(aa)

    for i, v := range a {
        for j, w := range v {
            fmt.Println(""a["", i, ""]"", ""["", j, ""]="", a[i][j], ""="", w)
        }
    }

    fmt.Println()

    for _, v := range a {
        fmt.Println(v)
    }
}

var a = [64][8]int{[8]int{11, 0, 0, 0, 18, 0, 0, 0},
    [8]int{12, 0, 0, 0, 19, 17, 0, 0},
    [8]int{13, 9, 0, 0, 20, 18, 0, 0},
    [8]int{14, 10, 0, 0, 21, 19, 0, 0},
    [8]int{15, 11, 0, 0, 22, 20, 0, 0},
    [8]int{16, 12, 0, 0, 23, 21, 0, 0},
    [8]int{0, 13, 0, 0, 24, 22, 0, 0},
    [8]int{0, 14, 0, 0, 0, 23, 0, 0},
    [8]int{19, 0, 3, 0, 26, 0, 0, 0},
    [8]int{20, 0, 4, 0, 27, 25, 0, 0},
    [8]int{21, 17, 5, 1, 28, 26, 0, 0},
    [8]int{22, 18, 6, 2, 29, 27, 0, 0},
    [8]int{23, 19, 7, 3, 30, 28, 0, 0},
    [8]int{24, 20, 8, 4, 31, 29, 0, 0},
    [8]int{0, 21, 0, 5, 32, 30, 0, 0},
    [8]int{0, 22, 0, 6, 0, 31, 0, 0},
    [8]int{27, 0, 11, 0, 34, 0, 2, 0},
    [8]int{28, 0, 12, 0, 35, 33, 3, 1},
    [8]int{29, 25, 13, 9, 36, 34, 4, 2},
    [8]int{30, 26, 14, 10, 37, 35, 5, 3},
    [8]int{31, 27, 15, 11, 38, 36, 6, 4},
    [8]int{32, 28, 16, 12, 39, 37, 7, 5},
    [8]int{0, 29, 0, 13, 40, 38, 8, 6},
    [8]int{0, 30, 0, 14, 0, 39, 0, 7},
    [8]int{35, 0, 19, 0, 42, 0, 10, 0},
    [8]int{36, 0, 20, 0, 43, 41, 11, 9},
    [8]int{37, 33, 21, 17, 44, 42, 12, 10},
    [8]int{38, 34, 22, 18, 45, 43, 13, 11},
    [8]int{39, 35, 23, 19, 46, 44, 14, 12},
    [8]int{40, 36, 24, 20, 47, 45, 15, 13},
    [8]int{0, 37, 0, 21, 48, 46, 16, 14},
    [8]int{0, 38, 0, 22, 0, 47, 0, 15},
    [8]int{43, 0, 27, 0, 50, 0, 18, 0},
    [8]int{44, 0, 28, 0, 51, 49, 19, 17},
    [8]int{45, 41, 29, 25, 52, 50, 20, 18},
    [8]int{46, 42, 30, 26, 53, 51, 21, 19},
    [8]int{47, 43, 31, 27, 54, 52, 22, 20},
    [8]int{48, 44, 32, 28, 55, 53, 23, 21},
    [8]int{0, 45, 0, 29, 56, 54, 24, 22},
    [8]int{0, 46, 0, 30, 0, 55, 0, 23},
    [8]int{51, 0, 35, 0, 58, 0, 26, 0},
    [8]int{52, 0, 36, 0, 59, 57, 27, 25},
    [8]int{53, 49, 37, 33, 60, 58, 28, 26},
    [8]int{54, 50, 38, 34, 61, 59, 29, 27},
    [8]int{55, 51, 39, 35, 62, 60, 30, 28},
    [8]int{56, 52, 40, 36, 63, 61, 31, 29},
    [8]int{0, 53, 0, 37, 64, 62, 32, 30},
    [8]int{0, 54, 0, 38, 0, 63, 0, 31},
    [8]int{59, 0, 43, 0, 0, 0, 34, 0},
    [8]int{60, 0, 44, 0, 0, 0, 35, 33},
    [8]int{61, 57, 45, 41, 0, 0, 36, 34},
    [8]int{62, 58, 46, 42, 0, 0, 37, 35},
    [8]int{63, 59, 47, 43, 0, 0, 38, 36},
    [8]int{64, 60, 48, 44, 0, 0, 39, 37},
    [8]int{0, 61, 0, 45, 0, 0, 40, 38},
    [8]int{0, 62, 0, 46, 0, 0, 0, 39},
    [8]int{0, 0, 51, 0, 0, 0, 42, 0},
    [8]int{0, 0, 52, 0, 0, 0, 43, 41},
    [8]int{0, 0, 53, 49, 0, 0, 44, 42},
    [8]int{0, 0, 54, 50, 0, 0, 45, 43},
    [8]int{0, 0, 55, 51, 0, 0, 46, 44},
    [8]int{0, 0, 56, 52, 0, 0, 47, 45},
    [8]int{0, 0, 0, 53, 0, 0, 48, 46},
    [8]int{0, 0, 0, 54, 0, 0, 0, 47},
}
",2933
1030,38898766,"[[0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0]]
a[ 0 ] [ 0 ]= 11 = 11
a[ 0 ] [ 1 ]= 0 = 0
a[ 0 ] [ 2 ]= 0 = 0
a[ 0 ] [ 3 ]= 0 = 0
a[ 0 ] [ 4 ]= 18 = 18
a[ 0 ] [ 5 ]= 0 = 0
a[ 0 ] [ 6 ]= 0 = 0
a[ 0 ] [ 7 ]= 0 = 0
a[ 1 ] [ 0 ]= 12 = 12
a[ 1 ] [ 1 ]= 0 = 0
a[ 1 ] [ 2 ]= 0 = 0
a[ 1 ] [ 3 ]= 0 = 0
a[ 1 ] [ 4 ]= 19 = 19
a[ 1 ] [ 5 ]= 17 = 17
a[ 1 ] [ 6 ]= 0 = 0
a[ 1 ] [ 7 ]= 0 = 0
a[ 2 ] [ 0 ]= 13 = 13
a[ 2 ] [ 1 ]= 9 = 9
a[ 2 ] [ 2 ]= 0 = 0
a[ 2 ] [ 3 ]= 0 = 0
a[ 2 ] [ 4 ]= 20 = 20
a[ 2 ] [ 5 ]= 18 = 18
a[ 2 ] [ 6 ]= 0 = 0
a[ 2 ] [ 7 ]= 0 = 0
a[ 3 ] [ 0 ]= 14 = 14
a[ 3 ] [ 1 ]= 10 = 10
a[ 3 ] [ 2 ]= 0 = 0
a[ 3 ] [ 3 ]= 0 = 0
a[ 3 ] [ 4 ]= 21 = 21
a[ 3 ] [ 5 ]= 19 = 19
a[ 3 ] [ 6 ]= 0 = 0
a[ 3 ] [ 7 ]= 0 = 0
a[ 4 ] [ 0 ]= 15 = 15
a[ 4 ] [ 1 ]= 11 = 11
a[ 4 ] [ 2 ]= 0 = 0
a[ 4 ] [ 3 ]= 0 = 0
a[ 4 ] [ 4 ]= 22 = 22
a[ 4 ] [ 5 ]= 20 = 20
a[ 4 ] [ 6 ]= 0 = 0
a[ 4 ] [ 7 ]= 0 = 0
a[ 5 ] [ 0 ]= 16 = 16
a[ 5 ] [ 1 ]= 12 = 12
a[ 5 ] [ 2 ]= 0 = 0
a[ 5 ] [ 3 ]= 0 = 0
a[ 5 ] [ 4 ]= 23 = 23
a[ 5 ] [ 5 ]= 21 = 21
a[ 5 ] [ 6 ]= 0 = 0
a[ 5 ] [ 7 ]= 0 = 0
a[ 6 ] [ 0 ]= 0 = 0
a[ 6 ] [ 1 ]= 13 = 13
a[ 6 ] [ 2 ]= 0 = 0
a[ 6 ] [ 3 ]= 0 = 0
a[ 6 ] [ 4 ]= 24 = 24
a[ 6 ] [ 5 ]= 22 = 22
a[ 6 ] [ 6 ]= 0 = 0
a[ 6 ] [ 7 ]= 0 = 0
a[ 7 ] [ 0 ]= 0 = 0
a[ 7 ] [ 1 ]= 14 = 14
a[ 7 ] [ 2 ]= 0 = 0
a[ 7 ] [ 3 ]= 0 = 0
a[ 7 ] [ 4 ]= 0 = 0
a[ 7 ] [ 5 ]= 23 = 23
a[ 7 ] [ 6 ]= 0 = 0
a[ 7 ] [ 7 ]= 0 = 0
a[ 8 ] [ 0 ]= 19 = 19
a[ 8 ] [ 1 ]= 0 = 0
a[ 8 ] [ 2 ]= 3 = 3
a[ 8 ] [ 3 ]= 0 = 0
a[ 8 ] [ 4 ]= 26 = 26
a[ 8 ] [ 5 ]= 0 = 0
a[ 8 ] [ 6 ]= 0 = 0
a[ 8 ] [ 7 ]= 0 = 0
a[ 9 ] [ 0 ]= 20 = 20
a[ 9 ] [ 1 ]= 0 = 0
a[ 9 ] [ 2 ]= 4 = 4
a[ 9 ] [ 3 ]= 0 = 0
a[ 9 ] [ 4 ]= 27 = 27
a[ 9 ] [ 5 ]= 25 = 25
a[ 9 ] [ 6 ]= 0 = 0
a[ 9 ] [ 7 ]= 0 = 0
a[ 10 ] [ 0 ]= 21 = 21
a[ 10 ] [ 1 ]= 17 = 17
a[ 10 ] [ 2 ]= 5 = 5
a[ 10 ] [ 3 ]= 1 = 1
a[ 10 ] [ 4 ]= 28 = 28
a[ 10 ] [ 5 ]= 26 = 26
a[ 10 ] [ 6 ]= 0 = 0
a[ 10 ] [ 7 ]= 0 = 0
a[ 11 ] [ 0 ]= 22 = 22
a[ 11 ] [ 1 ]= 18 = 18
a[ 11 ] [ 2 ]= 6 = 6
a[ 11 ] [ 3 ]= 2 = 2
a[ 11 ] [ 4 ]= 29 = 29
a[ 11 ] [ 5 ]= 27 = 27
a[ 11 ] [ 6 ]= 0 = 0
a[ 11 ] [ 7 ]= 0 = 0
a[ 12 ] [ 0 ]= 23 = 23
a[ 12 ] [ 1 ]= 19 = 19
a[ 12 ] [ 2 ]= 7 = 7
a[ 12 ] [ 3 ]= 3 = 3
a[ 12 ] [ 4 ]= 30 = 30
a[ 12 ] [ 5 ]= 28 = 28
a[ 12 ] [ 6 ]= 0 = 0
a[ 12 ] [ 7 ]= 0 = 0
a[ 13 ] [ 0 ]= 24 = 24
a[ 13 ] [ 1 ]= 20 = 20
a[ 13 ] [ 2 ]= 8 = 8
a[ 13 ] [ 3 ]= 4 = 4
a[ 13 ] [ 4 ]= 31 = 31
a[ 13 ] [ 5 ]= 29 = 29
a[ 13 ] [ 6 ]= 0 = 0
a[ 13 ] [ 7 ]= 0 = 0
a[ 14 ] [ 0 ]= 0 = 0
a[ 14 ] [ 1 ]= 21 = 21
a[ 14 ] [ 2 ]= 0 = 0
a[ 14 ] [ 3 ]= 5 = 5
a[ 14 ] [ 4 ]= 32 = 32
a[ 14 ] [ 5 ]= 30 = 30
a[ 14 ] [ 6 ]= 0 = 0
a[ 14 ] [ 7 ]= 0 = 0
a[ 15 ] [ 0 ]= 0 = 0
a[ 15 ] [ 1 ]= 22 = 22
a[ 15 ] [ 2 ]= 0 = 0
a[ 15 ] [ 3 ]= 6 = 6
a[ 15 ] [ 4 ]= 0 = 0
a[ 15 ] [ 5 ]= 31 = 31
a[ 15 ] [ 6 ]= 0 = 0
a[ 15 ] [ 7 ]= 0 = 0
a[ 16 ] [ 0 ]= 27 = 27
a[ 16 ] [ 1 ]= 0 = 0
a[ 16 ] [ 2 ]= 11 = 11
a[ 16 ] [ 3 ]= 0 = 0
a[ 16 ] [ 4 ]= 34 = 34
a[ 16 ] [ 5 ]= 0 = 0
a[ 16 ] [ 6 ]= 2 = 2
a[ 16 ] [ 7 ]= 0 = 0
a[ 17 ] [ 0 ]= 28 = 28
a[ 17 ] [ 1 ]= 0 = 0
a[ 17 ] [ 2 ]= 12 = 12
a[ 17 ] [ 3 ]= 0 = 0
a[ 17 ] [ 4 ]= 35 = 35
a[ 17 ] [ 5 ]= 33 = 33
a[ 17 ] [ 6 ]= 3 = 3
a[ 17 ] [ 7 ]= 1 = 1
a[ 18 ] [ 0 ]= 29 = 29
a[ 18 ] [ 1 ]= 25 = 25
a[ 18 ] [ 2 ]= 13 = 13
a[ 18 ] [ 3 ]= 9 = 9
a[ 18 ] [ 4 ]= 36 = 36
a[ 18 ] [ 5 ]= 34 = 34
a[ 18 ] [ 6 ]= 4 = 4
a[ 18 ] [ 7 ]= 2 = 2
a[ 19 ] [ 0 ]= 30 = 30
a[ 19 ] [ 1 ]= 26 = 26
a[ 19 ] [ 2 ]= 14 = 14
a[ 19 ] [ 3 ]= 10 = 10
a[ 19 ] [ 4 ]= 37 = 37
a[ 19 ] [ 5 ]= 35 = 35
a[ 19 ] [ 6 ]= 5 = 5
a[ 19 ] [ 7 ]= 3 = 3
a[ 20 ] [ 0 ]= 31 = 31
a[ 20 ] [ 1 ]= 27 = 27
a[ 20 ] [ 2 ]= 15 = 15
a[ 20 ] [ 3 ]= 11 = 11
a[ 20 ] [ 4 ]= 38 = 38
a[ 20 ] [ 5 ]= 36 = 36
a[ 20 ] [ 6 ]= 6 = 6
a[ 20 ] [ 7 ]= 4 = 4
a[ 21 ] [ 0 ]= 32 = 32
a[ 21 ] [ 1 ]= 28 = 28
a[ 21 ] [ 2 ]= 16 = 16
a[ 21 ] [ 3 ]= 12 = 12
a[ 21 ] [ 4 ]= 39 = 39
a[ 21 ] [ 5 ]= 37 = 37
a[ 21 ] [ 6 ]= 7 = 7
a[ 21 ] [ 7 ]= 5 = 5
a[ 22 ] [ 0 ]= 0 = 0
a[ 22 ] [ 1 ]= 29 = 29
a[ 22 ] [ 2 ]= 0 = 0
a[ 22 ] [ 3 ]= 13 = 13
a[ 22 ] [ 4 ]= 40 = 40
a[ 22 ] [ 5 ]= 38 = 38
a[ 22 ] [ 6 ]= 8 = 8
a[ 22 ] [ 7 ]= 6 = 6
a[ 23 ] [ 0 ]= 0 = 0
a[ 23 ] [ 1 ]= 30 = 30
a[ 23 ] [ 2 ]= 0 = 0
a[ 23 ] [ 3 ]= 14 = 14
a[ 23 ] [ 4 ]= 0 = 0
a[ 23 ] [ 5 ]= 39 = 39
a[ 23 ] [ 6 ]= 0 = 0
a[ 23 ] [ 7 ]= 7 = 7
a[ 24 ] [ 0 ]= 35 = 35
a[ 24 ] [ 1 ]= 0 = 0
a[ 24 ] [ 2 ]= 19 = 19
a[ 24 ] [ 3 ]= 0 = 0
a[ 24 ] [ 4 ]= 42 = 42
a[ 24 ] [ 5 ]= 0 = 0
a[ 24 ] [ 6 ]= 10 = 10
a[ 24 ] [ 7 ]= 0 = 0
a[ 25 ] [ 0 ]= 36 = 36
a[ 25 ] [ 1 ]= 0 = 0
a[ 25 ] [ 2 ]= 20 = 20
a[ 25 ] [ 3 ]= 0 = 0
a[ 25 ] [ 4 ]= 43 = 43
a[ 25 ] [ 5 ]= 41 = 41
a[ 25 ] [ 6 ]= 11 = 11
a[ 25 ] [ 7 ]= 9 = 9
a[ 26 ] [ 0 ]= 37 = 37
a[ 26 ] [ 1 ]= 33 = 33
a[ 26 ] [ 2 ]= 21 = 21
a[ 26 ] [ 3 ]= 17 = 17
a[ 26 ] [ 4 ]= 44 = 44
a[ 26 ] [ 5 ]= 42 = 42
a[ 26 ] [ 6 ]= 12 = 12
a[ 26 ] [ 7 ]= 10 = 10
a[ 27 ] [ 0 ]= 38 = 38
a[ 27 ] [ 1 ]= 34 = 34
a[ 27 ] [ 2 ]= 22 = 22
a[ 27 ] [ 3 ]= 18 = 18
a[ 27 ] [ 4 ]= 45 = 45
a[ 27 ] [ 5 ]= 43 = 43
a[ 27 ] [ 6 ]= 13 = 13
a[ 27 ] [ 7 ]= 11 = 11
a[ 28 ] [ 0 ]= 39 = 39
a[ 28 ] [ 1 ]= 35 = 35
a[ 28 ] [ 2 ]= 23 = 23
a[ 28 ] [ 3 ]= 19 = 19
a[ 28 ] [ 4 ]= 46 = 46
a[ 28 ] [ 5 ]= 44 = 44
a[ 28 ] [ 6 ]= 14 = 14
a[ 28 ] [ 7 ]= 12 = 12
a[ 29 ] [ 0 ]= 40 = 40
a[ 29 ] [ 1 ]= 36 = 36
a[ 29 ] [ 2 ]= 24 = 24
a[ 29 ] [ 3 ]= 20 = 20
a[ 29 ] [ 4 ]= 47 = 47
a[ 29 ] [ 5 ]= 45 = 45
a[ 29 ] [ 6 ]= 15 = 15
a[ 29 ] [ 7 ]= 13 = 13
a[ 30 ] [ 0 ]= 0 = 0
a[ 30 ] [ 1 ]= 37 = 37
a[ 30 ] [ 2 ]= 0 = 0
a[ 30 ] [ 3 ]= 21 = 21
a[ 30 ] [ 4 ]= 48 = 48
a[ 30 ] [ 5 ]= 46 = 46
a[ 30 ] [ 6 ]= 16 = 16
a[ 30 ] [ 7 ]= 14 = 14
a[ 31 ] [ 0 ]= 0 = 0
a[ 31 ] [ 1 ]= 38 = 38
a[ 31 ] [ 2 ]= 0 = 0
a[ 31 ] [ 3 ]= 22 = 22
a[ 31 ] [ 4 ]= 0 = 0
a[ 31 ] [ 5 ]= 47 = 47
a[ 31 ] [ 6 ]= 0 = 0
a[ 31 ] [ 7 ]= 15 = 15
a[ 32 ] [ 0 ]= 43 = 43
a[ 32 ] [ 1 ]= 0 = 0
a[ 32 ] [ 2 ]= 27 = 27
a[ 32 ] [ 3 ]= 0 = 0
a[ 32 ] [ 4 ]= 50 = 50
a[ 32 ] [ 5 ]= 0 = 0
a[ 32 ] [ 6 ]= 18 = 18
a[ 32 ] [ 7 ]= 0 = 0
a[ 33 ] [ 0 ]= 44 = 44
a[ 33 ] [ 1 ]= 0 = 0
a[ 33 ] [ 2 ]= 28 = 28
a[ 33 ] [ 3 ]= 0 = 0
a[ 33 ] [ 4 ]= 51 = 51
a[ 33 ] [ 5 ]= 49 = 49
a[ 33 ] [ 6 ]= 19 = 19
a[ 33 ] [ 7 ]= 17 = 17
a[ 34 ] [ 0 ]= 45 = 45
a[ 34 ] [ 1 ]= 41 = 41
a[ 34 ] [ 2 ]= 29 = 29
a[ 34 ] [ 3 ]= 25 = 25
a[ 34 ] [ 4 ]= 52 = 52
a[ 34 ] [ 5 ]= 50 = 50
a[ 34 ] [ 6 ]= 20 = 20
a[ 34 ] [ 7 ]= 18 = 18
a[ 35 ] [ 0 ]= 46 = 46
a[ 35 ] [ 1 ]= 42 = 42
a[ 35 ] [ 2 ]= 30 = 30
a[ 35 ] [ 3 ]= 26 = 26
a[ 35 ] [ 4 ]= 53 = 53
a[ 35 ] [ 5 ]= 51 = 51
a[ 35 ] [ 6 ]= 21 = 21
a[ 35 ] [ 7 ]= 19 = 19
a[ 36 ] [ 0 ]= 47 = 47
a[ 36 ] [ 1 ]= 43 = 43
a[ 36 ] [ 2 ]= 31 = 31
a[ 36 ] [ 3 ]= 27 = 27
a[ 36 ] [ 4 ]= 54 = 54
a[ 36 ] [ 5 ]= 52 = 52
a[ 36 ] [ 6 ]= 22 = 22
a[ 36 ] [ 7 ]= 20 = 20
a[ 37 ] [ 0 ]= 48 = 48
a[ 37 ] [ 1 ]= 44 = 44
a[ 37 ] [ 2 ]= 32 = 32
a[ 37 ] [ 3 ]= 28 = 28
a[ 37 ] [ 4 ]= 55 = 55
a[ 37 ] [ 5 ]= 53 = 53
a[ 37 ] [ 6 ]= 23 = 23
a[ 37 ] [ 7 ]= 21 = 21
a[ 38 ] [ 0 ]= 0 = 0
a[ 38 ] [ 1 ]= 45 = 45
a[ 38 ] [ 2 ]= 0 = 0
a[ 38 ] [ 3 ]= 29 = 29
a[ 38 ] [ 4 ]= 56 = 56
a[ 38 ] [ 5 ]= 54 = 54
a[ 38 ] [ 6 ]= 24 = 24
a[ 38 ] [ 7 ]= 22 = 22
a[ 39 ] [ 0 ]= 0 = 0
a[ 39 ] [ 1 ]= 46 = 46
a[ 39 ] [ 2 ]= 0 = 0
a[ 39 ] [ 3 ]= 30 = 30
a[ 39 ] [ 4 ]= 0 = 0
a[ 39 ] [ 5 ]= 55 = 55
a[ 39 ] [ 6 ]= 0 = 0
a[ 39 ] [ 7 ]= 23 = 23
a[ 40 ] [ 0 ]= 51 = 51
a[ 40 ] [ 1 ]= 0 = 0
a[ 40 ] [ 2 ]= 35 = 35
a[ 40 ] [ 3 ]= 0 = 0
a[ 40 ] [ 4 ]= 58 = 58
a[ 40 ] [ 5 ]= 0 = 0
a[ 40 ] [ 6 ]= 26 = 26
a[ 40 ] [ 7 ]= 0 = 0
a[ 41 ] [ 0 ]= 52 = 52
a[ 41 ] [ 1 ]= 0 = 0
a[ 41 ] [ 2 ]= 36 = 36
a[ 41 ] [ 3 ]= 0 = 0
a[ 41 ] [ 4 ]= 59 = 59
a[ 41 ] [ 5 ]= 57 = 57
a[ 41 ] [ 6 ]= 27 = 27
a[ 41 ] [ 7 ]= 25 = 25
a[ 42 ] [ 0 ]= 53 = 53
a[ 42 ] [ 1 ]= 49 = 49
a[ 42 ] [ 2 ]= 37 = 37
a[ 42 ] [ 3 ]= 33 = 33
a[ 42 ] [ 4 ]= 60 = 60
a[ 42 ] [ 5 ]= 58 = 58
a[ 42 ] [ 6 ]= 28 = 28
a[ 42 ] [ 7 ]= 26 = 26
a[ 43 ] [ 0 ]= 54 = 54
a[ 43 ] [ 1 ]= 50 = 50
a[ 43 ] [ 2 ]= 38 = 38
a[ 43 ] [ 3 ]= 34 = 34
a[ 43 ] [ 4 ]= 61 = 61
a[ 43 ] [ 5 ]= 59 = 59
a[ 43 ] [ 6 ]= 29 = 29
a[ 43 ] [ 7 ]= 27 = 27
a[ 44 ] [ 0 ]= 55 = 55
a[ 44 ] [ 1 ]= 51 = 51
a[ 44 ] [ 2 ]= 39 = 39
a[ 44 ] [ 3 ]= 35 = 35
a[ 44 ] [ 4 ]= 62 = 62
a[ 44 ] [ 5 ]= 60 = 60
a[ 44 ] [ 6 ]= 30 = 30
a[ 44 ] [ 7 ]= 28 = 28
a[ 45 ] [ 0 ]= 56 = 56
a[ 45 ] [ 1 ]= 52 = 52
a[ 45 ] [ 2 ]= 40 = 40
a[ 45 ] [ 3 ]= 36 = 36
a[ 45 ] [ 4 ]= 63 = 63
a[ 45 ] [ 5 ]= 61 = 61
a[ 45 ] [ 6 ]= 31 = 31
a[ 45 ] [ 7 ]= 29 = 29
a[ 46 ] [ 0 ]= 0 = 0
a[ 46 ] [ 1 ]= 53 = 53
a[ 46 ] [ 2 ]= 0 = 0
a[ 46 ] [ 3 ]= 37 = 37
a[ 46 ] [ 4 ]= 64 = 64
a[ 46 ] [ 5 ]= 62 = 62
a[ 46 ] [ 6 ]= 32 = 32
a[ 46 ] [ 7 ]= 30 = 30
a[ 47 ] [ 0 ]= 0 = 0
a[ 47 ] [ 1 ]= 54 = 54
a[ 47 ] [ 2 ]= 0 = 0
a[ 47 ] [ 3 ]= 38 = 38
a[ 47 ] [ 4 ]= 0 = 0
a[ 47 ] [ 5 ]= 63 = 63
a[ 47 ] [ 6 ]= 0 = 0
a[ 47 ] [ 7 ]= 31 = 31
a[ 48 ] [ 0 ]= 59 = 59
a[ 48 ] [ 1 ]= 0 = 0
a[ 48 ] [ 2 ]= 43 = 43
a[ 48 ] [ 3 ]= 0 = 0
a[ 48 ] [ 4 ]= 0 = 0
a[ 48 ] [ 5 ]= 0 = 0
a[ 48 ] [ 6 ]= 34 = 34
a[ 48 ] [ 7 ]= 0 = 0
a[ 49 ] [ 0 ]= 60 = 60
a[ 49 ] [ 1 ]= 0 = 0
a[ 49 ] [ 2 ]= 44 = 44
a[ 49 ] [ 3 ]= 0 = 0
a[ 49 ] [ 4 ]= 0 = 0
a[ 49 ] [ 5 ]= 0 = 0
a[ 49 ] [ 6 ]= 35 = 35
a[ 49 ] [ 7 ]= 33 = 33
a[ 50 ] [ 0 ]= 61 = 61
a[ 50 ] [ 1 ]= 57 = 57
a[ 50 ] [ 2 ]= 45 = 45
a[ 50 ] [ 3 ]= 41 = 41
a[ 50 ] [ 4 ]= 0 = 0
a[ 50 ] [ 5 ]= 0 = 0
a[ 50 ] [ 6 ]= 36 = 36
a[ 50 ] [ 7 ]= 34 = 34
a[ 51 ] [ 0 ]= 62 = 62
a[ 51 ] [ 1 ]= 58 = 58
a[ 51 ] [ 2 ]= 46 = 46
a[ 51 ] [ 3 ]= 42 = 42
a[ 51 ] [ 4 ]= 0 = 0
a[ 51 ] [ 5 ]= 0 = 0
a[ 51 ] [ 6 ]= 37 = 37
a[ 51 ] [ 7 ]= 35 = 35
a[ 52 ] [ 0 ]= 63 = 63
a[ 52 ] [ 1 ]= 59 = 59
a[ 52 ] [ 2 ]= 47 = 47
a[ 52 ] [ 3 ]= 43 = 43
a[ 52 ] [ 4 ]= 0 = 0
a[ 52 ] [ 5 ]= 0 = 0
a[ 52 ] [ 6 ]= 38 = 38
a[ 52 ] [ 7 ]= 36 = 36
a[ 53 ] [ 0 ]= 64 = 64
a[ 53 ] [ 1 ]= 60 = 60
a[ 53 ] [ 2 ]= 48 = 48
a[ 53 ] [ 3 ]= 44 = 44
a[ 53 ] [ 4 ]= 0 = 0
a[ 53 ] [ 5 ]= 0 = 0
a[ 53 ] [ 6 ]= 39 = 39
a[ 53 ] [ 7 ]= 37 = 37
a[ 54 ] [ 0 ]= 0 = 0
a[ 54 ] [ 1 ]= 61 = 61
a[ 54 ] [ 2 ]= 0 = 0
a[ 54 ] [ 3 ]= 45 = 45
a[ 54 ] [ 4 ]= 0 = 0
a[ 54 ] [ 5 ]= 0 = 0
a[ 54 ] [ 6 ]= 40 = 40
a[ 54 ] [ 7 ]= 38 = 38
a[ 55 ] [ 0 ]= 0 = 0
a[ 55 ] [ 1 ]= 62 = 62
a[ 55 ] [ 2 ]= 0 = 0
a[ 55 ] [ 3 ]= 46 = 46
a[ 55 ] [ 4 ]= 0 = 0
a[ 55 ] [ 5 ]= 0 = 0
a[ 55 ] [ 6 ]= 0 = 0
a[ 55 ] [ 7 ]= 39 = 39
a[ 56 ] [ 0 ]= 0 = 0
a[ 56 ] [ 1 ]= 0 = 0
a[ 56 ] [ 2 ]= 51 = 51
a[ 56 ] [ 3 ]= 0 = 0
a[ 56 ] [ 4 ]= 0 = 0
a[ 56 ] [ 5 ]= 0 = 0
a[ 56 ] [ 6 ]= 42 = 42
a[ 56 ] [ 7 ]= 0 = 0
a[ 57 ] [ 0 ]= 0 = 0
a[ 57 ] [ 1 ]= 0 = 0
a[ 57 ] [ 2 ]= 52 = 52
a[ 57 ] [ 3 ]= 0 = 0
a[ 57 ] [ 4 ]= 0 = 0
a[ 57 ] [ 5 ]= 0 = 0
a[ 57 ] [ 6 ]= 43 = 43
a[ 57 ] [ 7 ]= 41 = 41
a[ 58 ] [ 0 ]= 0 = 0
a[ 58 ] [ 1 ]= 0 = 0
a[ 58 ] [ 2 ]= 53 = 53
a[ 58 ] [ 3 ]= 49 = 49
a[ 58 ] [ 4 ]= 0 = 0
a[ 58 ] [ 5 ]= 0 = 0
a[ 58 ] [ 6 ]= 44 = 44
a[ 58 ] [ 7 ]= 42 = 42
a[ 59 ] [ 0 ]= 0 = 0
a[ 59 ] [ 1 ]= 0 = 0
a[ 59 ] [ 2 ]= 54 = 54
a[ 59 ] [ 3 ]= 50 = 50
a[ 59 ] [ 4 ]= 0 = 0
a[ 59 ] [ 5 ]= 0 = 0
a[ 59 ] [ 6 ]= 45 = 45
a[ 59 ] [ 7 ]= 43 = 43
a[ 60 ] [ 0 ]= 0 = 0
a[ 60 ] [ 1 ]= 0 = 0
a[ 60 ] [ 2 ]= 55 = 55
a[ 60 ] [ 3 ]= 51 = 51
a[ 60 ] [ 4 ]= 0 = 0
a[ 60 ] [ 5 ]= 0 = 0
a[ 60 ] [ 6 ]= 46 = 46
a[ 60 ] [ 7 ]= 44 = 44
a[ 61 ] [ 0 ]= 0 = 0
a[ 61 ] [ 1 ]= 0 = 0
a[ 61 ] [ 2 ]= 56 = 56
a[ 61 ] [ 3 ]= 52 = 52
a[ 61 ] [ 4 ]= 0 = 0
a[ 61 ] [ 5 ]= 0 = 0
a[ 61 ] [ 6 ]= 47 = 47
a[ 61 ] [ 7 ]= 45 = 45
a[ 62 ] [ 0 ]= 0 = 0
a[ 62 ] [ 1 ]= 0 = 0
a[ 62 ] [ 2 ]= 0 = 0
a[ 62 ] [ 3 ]= 53 = 53
a[ 62 ] [ 4 ]= 0 = 0
a[ 62 ] [ 5 ]= 0 = 0
a[ 62 ] [ 6 ]= 48 = 48
a[ 62 ] [ 7 ]= 46 = 46
a[ 63 ] [ 0 ]= 0 = 0
a[ 63 ] [ 1 ]= 0 = 0
a[ 63 ] [ 2 ]= 0 = 0
a[ 63 ] [ 3 ]= 54 = 54
a[ 63 ] [ 4 ]= 0 = 0
a[ 63 ] [ 5 ]= 0 = 0
a[ 63 ] [ 6 ]= 0 = 0
a[ 63 ] [ 7 ]= 47 = 47

[11 0 0 0 18 0 0 0]
[12 0 0 0 19 17 0 0]
[13 9 0 0 20 18 0 0]
[14 10 0 0 21 19 0 0]
[15 11 0 0 22 20 0 0]
[16 12 0 0 23 21 0 0]
[0 13 0 0 24 22 0 0]
[0 14 0 0 0 23 0 0]
[19 0 3 0 26 0 0 0]
[20 0 4 0 27 25 0 0]
[21 17 5 1 28 26 0 0]
[22 18 6 2 29 27 0 0]
[23 19 7 3 30 28 0 0]
[24 20 8 4 31 29 0 0]
[0 21 0 5 32 30 0 0]
[0 22 0 6 0 31 0 0]
[27 0 11 0 34 0 2 0]
[28 0 12 0 35 33 3 1]
[29 25 13 9 36 34 4 2]
[30 26 14 10 37 35 5 3]
[31 27 15 11 38 36 6 4]
[32 28 16 12 39 37 7 5]
[0 29 0 13 40 38 8 6]
[0 30 0 14 0 39 0 7]
[35 0 19 0 42 0 10 0]
[36 0 20 0 43 41 11 9]
[37 33 21 17 44 42 12 10]
[38 34 22 18 45 43 13 11]
[39 35 23 19 46 44 14 12]
[40 36 24 20 47 45 15 13]
[0 37 0 21 48 46 16 14]
[0 38 0 22 0 47 0 15]
[43 0 27 0 50 0 18 0]
[44 0 28 0 51 49 19 17]
[45 41 29 25 52 50 20 18]
[46 42 30 26 53 51 21 19]
[47 43 31 27 54 52 22 20]
[48 44 32 28 55 53 23 21]
[0 45 0 29 56 54 24 22]
[0 46 0 30 0 55 0 23]
[51 0 35 0 58 0 26 0]
[52 0 36 0 59 57 27 25]
[53 49 37 33 60 58 28 26]
[54 50 38 34 61 59 29 27]
[55 51 39 35 62 60 30 28]
[56 52 40 36 63 61 31 29]
[0 53 0 37 64 62 32 30]
[0 54 0 38 0 63 0 31]
[59 0 43 0 0 0 34 0]
[60 0 44 0 0 0 35 33]
[61 57 45 41 0 0 36 34]
[62 58 46 42 0 0 37 35]
[63 59 47 43 0 0 38 36]
[64 60 48 44 0 0 39 37]
[0 61 0 45 0 0 40 38]
[0 62 0 46 0 0 0 39]
[0 0 51 0 0 0 42 0]
[0 0 52 0 0 0 43 41]
[0 0 53 49 0 0 44 42]
[0 0 54 50 0 0 45 43]
[0 0 55 51 0 0 46 44]
[0 0 56 52 0 0 47 45]
[0 0 0 53 0 0 48 46]
[0 0 0 54 0 0 0 47]
",13900
1031,38927101,"genes = readGenes(""lists/genes.csv"") // read the gene list
n := runtime.NumCPU()                // the number of goroutines
wg.Add(n + 1)
go scan() // read the ""fasta/sequences.tsv""
for i := 0; i < n; i++ {
    go search()
}
go WaitClose()
slice := []string{}
for t := range queue {
    slice = append(slice, t)
}
fmt.Println(slice)
",333
1032,38927101,scan(),6
1033,38927101,"var ch = make(chan string, 100)",31
1034,38927101,search(),8
1035,38927101,NumCPU,6
1036,38927101,"package main

import (
    ""bufio""
    ""fmt""
    //""os""
    ""runtime""
    ""strings""
    ""sync""
    //""github.com/mathpl/golang-pkg-pcre/src/pkg/pcre""
)

func main() {
    genes = readGenes(""lists/genes.csv"") // read the gene list
    n := runtime.NumCPU()                // the number of goroutines
    wg.Add(n + 1)
    go scan() // read the ""fasta/sequences.tsv""
    for i := 0; i < n; i++ {
        go search()
    }
    go WaitClose()
    slice := []string{}
    for t := range queue {
        slice = append(slice, t)
    }
    fmt.Println(slice)
}

var wg sync.WaitGroup
var genes []string
var ch = make(chan string, 100)
var queue = make(chan string, 100)

func scan() {
    defer wg.Done()
    defer close(ch)
    scanner := bufio.NewScanner(strings.NewReader(strings.Join([]string{""A2"", ""B2"", ""C2"", ""D2"", ""E2"", ""F2"", ""G2"", ""H2"", ""I2""}, ""\n"")))
    /*f, err := os.Open(""fasta/sequences.tsv"")
    if err != nil {
        panic(err)
    }
    defer f.Close()
     scanner := bufio.NewScanner(f)*/
    for scanner.Scan() {
        ch <- scanner.Text()
    }
}

func match(pattern, seq string) bool {
    //return pcre.MustCompile(pattern, 0).MatcherString(seq, 0).Matches()
    return pattern[0] == seq[0]
}

func search() {
    defer wg.Done()
    for seq := range ch {
        for _, gene := range genes {
            if match(gene, seq) {
                queue <- seq
                break
            }
        }
    }
}

func WaitClose() {
    wg.Wait()
    close(queue)
}

// function read a list of genes and return a slice of gene names.
func readGenes(filename string) []string {
    return []string{""A1"", ""B1"", ""C1"", ""D1"", ""E1"", ""F1"", ""G1"", ""H1"", ""I1""}
    /*var genes []string // slice of genes names
    f, err := os.Open(filename)
    if err != nil {
        panic(err)
    }
    defer f.Close()
    scanner := bufio.NewScanner(f)
    for scanner.Scan() {
        line := scanner.Text()
        genes = append(genes, line)
    }
    return genes*/
}
",1968
1037,38927101,"[A2 B2 C2 D2 E2 F2 G2 H2 I2]
",29
1038,38927101,"package main

import (
    ""bufio""
    ""fmt""
    ""os""
    ""runtime""
    //""strings""
    ""sync""

    ""github.com/mathpl/golang-pkg-pcre/src/pkg/pcre""
    //pcre ""regexp""
)

func main() {
    genes = readGenes(""lists/genes.csv"") // read the gene list
    n := runtime.NumCPU()                // the number of goroutines
    wg.Add(n + 1)
    go scan() // read the ""fasta/sequences.tsv""
    for i := 0; i < n; i++ {
        go search()
    }
    go WaitClose()
    slice := []string{}
    for t := range queue {
        slice = append(slice, t)
    }
    fmt.Println(slice)
}

var wg sync.WaitGroup
var genes []string
var ch = make(chan string, 100)
var queue = make(chan string, 100)

func scan() {
    defer wg.Done()
    defer close(ch)
    //scanner := bufio.NewScanner(strings.NewReader(strings.Join([]string{""A2"", ""B2"", ""C2"", ""D2"", ""E2"", ""F2"", ""G2"", ""H2"", ""I2""}, ""\n"")))
    f, err := os.Open(""fasta/sequences.tsv"")
    if err != nil {
        panic(err)
    }
    defer f.Close()
    scanner := bufio.NewScanner(f)
    for scanner.Scan() {
        ch <- scanner.Text()
    }
}

func match(pattern, seq string) bool {
    return pcre.MustCompile(pattern, 0).MatcherString(seq, 0).Matches()
    //return pattern[0] == seq[0]
    //return pcre.MustCompile(pattern).Match([]byte(seq))
}

func search() {
    defer wg.Done()
    for seq := range ch {
        for _, gene := range genes {
            if match(gene, seq) {
                queue <- seq
                break
            }
        }
    }
}

func WaitClose() {
    wg.Wait()
    close(queue)
}

// function read a list of genes and return a slice of gene names.
func readGenes(filename string) []string {
    //return []string{""A1"", ""B1"", ""C1"", ""D1"", ""E1"", ""F1"", ""G1"", ""H1"", ""I1""}
    var genes []string // slice of genes names
    f, err := os.Open(filename)
    if err != nil {
        panic(err)
    }
    defer f.Close()
    scanner := bufio.NewScanner(f)
    for scanner.Scan() {
        line := scanner.Text()
        genes = append(genes, line)
    }
    return genes
}
",2040
1039,38927101,read_genes(filename string) []string,36
1040,38927101,"f, err := os.Open(filename)
if err!=nil{
    panic(err)
}
",58
1041,38927101,read_genes(filename string) []string,36
1042,38927101,"defer f.Close()
",16
1043,38927101,"filename := ""fasta/sequences.tsv""",33
1044,38927101,"f, err := os.Open(filename)
if err!=nil{
    panic(err)
}
",58
1045,38927101,"filename := ""fasta/sequences.tsv""",33
1046,38927101,"defer f.Close()
",16
1047,38927101,for scanner.Scan() {,20
1048,38927101,fasta/sequences.tsv,19
1049,38927101,if n == read_buff {,19
1050,38927101,"package main

import (
    ""bufio""
    ""fmt""
    ""strings""
    ""sync""
)

func match(pattern, str string) bool {
    return pattern[0] == str[0]
}
func search_gene2(genes, seqs []string) (res []string) {
    for _, r := range seqs {
        for _, i := range genes {
            if match(i, r) {
                res = append(res, r) // is the gene matches the gene name is append to res
                break
            }
        }
    }
    return
}

func main() {
    read_buff := 2 // the number of sequences analysed by one goroutine
    var wg sync.WaitGroup
    queue := make(chan []string, read_buff)
    genes := []string{""A1"", ""B1"", ""C1"", ""D1"", ""E1"", ""F1"", ""G1"", ""H1"", ""I1""}
    sequences := strings.Join([]string{""A2"", ""B2"", ""C2"", ""D2"", ""E2"", ""F2"", ""G2"", ""H2"", ""I2""}, ""\n"")
    scanner := bufio.NewScanner(strings.NewReader(sequences))
    buf_Seq := make([]string, 0, read_buff)
    for n := 1; scanner.Scan(); n++ {
        line := scanner.Text()
        buf_Seq = append(buf_Seq, line) // store the sequences into buf_Seq
        if n == read_buff {             // when the read buffer contains 100 sequences one goroutine analyses them
            wg.Add(1)
            temp := make([]string, n)
            copy(temp, buf_Seq)
            buf_Seq = buf_Seq[:0] // reset buf_Seq
            n = 0                 // reset the sequences counter
            go func(genes, Seq []string) {
                defer wg.Done()
                fmt.Println(Seq)
                queue <- search_gene2(genes, Seq)
            }(genes, temp)
        }
    }
    go func() {
        wg.Wait()
        close(queue)
    }()
    slice := []string{}
    for t := range queue {
        slice = append(slice, t...)
    }
    fmt.Println(slice)
}
",1740
1051,38927101,I2,2
1052,38927101,"[A2 B2]
[C2 D2]
[E2 F2]
[G2 H2]
[A2 B2 C2 D2 E2 F2 G2 H2]
",58
1053,38927101,"temp := make([]string, n)
copy(temp, buf_Seq)
buf_Seq = buf_Seq[:0] // reset buf_Seq
n = 0                 // reset the sequences counter
go func(genes, Seq []string) {
    defer wg.Done()
    fmt.Println(Seq)
    queue <- search_gene2(genes, Seq)
}(genes, temp)
",263
1054,38927101,"    line 71 is : copy(bufCopy, buf_Seq)
    line 63 is : buf_Seq = append(buf_Seq, line)
    line 73 is :}(genes, buf_Seq)
",123
1055,38960704,Marshal,7
1056,38960704,Unmarshal,9
1057,38960704,"package main

import (
    ""encoding/json""
    ""fmt""
    ""log""
    ""strconv""
    ""time""
)

type UCSUserAccess struct {
    Groups                 map[string]string `json:""groups""`
    Access                 map[string]string `json:""access""`
    IsExpert               string            `json:""isExpert""`
    SubscriptionGroupDates map[string]struct {
        StartDate Time `json:""START_DATE""`
        EndDate   Time `json:""END_DATE""`
    } `json:""subscription_group_dates""`
}

type Time time.Time

func (t Time) MarshalJSON() ([]byte, error) {
    data := []byte(fmt.Sprint(time.Time(t).UTC().Unix()))
    return data, nil
}
func (t *Time) UnmarshalJSON(data []byte) error {
    i, e := strconv.ParseInt(string(data), 10, 64)
    *t = Time(time.Unix(i, 0).UTC())
    return e
}
func (t Time) String() string {
    return time.Time(t).UTC().String()
}

func main() {
    str := `{ 
""access"": {
      ""STOCK"": ""1"",
      ""FOREX"": ""1"",
      ""WEBFOREX"": ""1"",
      ""WEBSTOCK"": ""1""
    },
""subscription_group_dates"": {
      ""32"": {
            ""START_DATE"": 1464753600,
            ""END_DATE"": 1472616000
            },
      ""42"": {
            ""START_DATE"": 1470024000,
            ""END_DATE"": 1472616000
          }
    } 
    }`
    var d UCSUserAccess
    err := json.Unmarshal([]byte(str), &d)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(d)

    fmt.Println()
    body, err := json.Marshal(d)
    if err != nil {
        panic(err)
    }
    fmt.Println(string(body))
}
",1495
1058,38960704,Marshal,7
1059,38960704,Unmarshal,9
1060,38960704,"package main

import (
    ""encoding/json""
    ""fmt""
    ""log""
    ""strconv""
    ""time""
)

type UCSUserAccess struct {
    StartDate Time `json:""START_DATE""`
}

type Time time.Time

func (t Time) MarshalJSON() ([]byte, error) {
    data := []byte(fmt.Sprint(time.Time(t).UTC().Unix()))
    return data, nil
}
func (t *Time) UnmarshalJSON(data []byte) error {
    i, e := strconv.ParseInt(string(data), 10, 64)
    *t = Time(time.Unix(i, 0).UTC())
    return e
}
func (t Time) String() string {
    return time.Time(t).UTC().String()
}

func main() {
    str := `{ 
            ""START_DATE"": 1464753600  
    }`
    var d UCSUserAccess
    err := json.Unmarshal([]byte(str), &d)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(d)

    fmt.Println()
    body, err := json.Marshal(d)
    if err != nil {
        panic(err)
    }
    fmt.Println(string(body))
}
",875
1061,38960704,int64,5
1062,38960704,"package main

import (
    ""encoding/json""
    ""fmt""
    ""log""
    ""time""
)

type GroupID struct {
    StartDate int64 `json:""START_DATE""`
    EndDate   int64 `json:""END_DATE""`
}

func (t *GroupID) Start() time.Time {
    return time.Unix(t.StartDate, 0)
}
func (t *GroupID) End() time.Time {
    return time.Unix(t.EndDate, 0)
}

type UCSUserAccess struct {
    Access                 map[string]string  `json:""access""`
    SubscriptionGroupDates map[string]GroupID `json:""subscription_group_dates""`
}

func main() {
    str := `{
""access"": {
      ""STOCK"": ""1"",
      ""FOREX"": ""1"",
      ""WEBFOREX"": ""1"",
      ""WEBSTOCK"": ""1""
    },
""subscription_group_dates"": {
      ""32"": {
            ""START_DATE"": 1464753600,
            ""END_DATE"": 1472616000
            },
      ""42"": {
            ""START_DATE"": 1470024000,
            ""END_DATE"": 1472616000
          }
    }
    }`
    var d UCSUserAccess
    err := json.Unmarshal([]byte(str), &d)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(d)
    gID := d.SubscriptionGroupDates[""32""]
    fmt.Println(gID.Start())

    fmt.Println()
    body, err := json.Marshal(d)
    if err != nil {
        panic(err)
    }
    fmt.Println(string(body))
}
",1215
1063,38960704,Int64,5
1064,38960704,"package main

import (
    ""encoding/json""
    ""fmt""
    ""log""
    ""time""
)

type Int64 int64
type GroupID struct {
    StartDate Int64 `json:""START_DATE""`
    EndDate   Int64 `json:""END_DATE""`
}

func (t *Int64) Time() time.Time {
    return time.Unix(int64(*t), 0).UTC()
}

type UCSUserAccess struct {
    Access                 map[string]string  `json:""access""`
    SubscriptionGroupDates map[string]GroupID `json:""subscription_group_dates""`
}

func main() {
    str := `{
""access"": {
      ""STOCK"": ""1"",
      ""FOREX"": ""1"",
      ""WEBFOREX"": ""1"",
      ""WEBSTOCK"": ""1""
    },
""subscription_group_dates"": {
      ""32"": {
            ""START_DATE"": 1464753600,
            ""END_DATE"": 1472616000
            },
      ""42"": {
            ""START_DATE"": 1470024000,
            ""END_DATE"": 1472616000
          }
    }
    }`
    var d UCSUserAccess
    err := json.Unmarshal([]byte(str), &d)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(d)
    gID := d.SubscriptionGroupDates[""32""]
    fmt.Println(gID.StartDate.Time())

    fmt.Println()
    body, err := json.Marshal(d)
    if err != nil {
        panic(err)
    }
    fmt.Println(string(body))
}
",1169
1065,39008249,default,7
1066,39008249,named,5
1067,39008249,"package main

import (
    ""fmt""
    ""log""
    ""database/sql""
     _ ""github.com/denisenkom/go-mssqldb""     // the underscore indicates the package is used
)    

func main() {
    fmt.Println(""starting app"")

    // the user needs to be setup in SQL Server as an SQL Server user.
    // see create login and the create user SQL commands as well as the
    // SQL Server Management Studio documentation to turn on Hybrid Authentication
    // which allows both Windows Authentication and SQL Server Authentication.
    // also need to grant to the user the proper access permissions.
    // also need to enable TCP protocol in SQL Server Configuration Manager.
    //
    // you could also use Windows Authentication if you specify the fully qualified
    // user id which would specify the domain as well as the user id.
    // for instance you could specify ""user id=domain\\user;password=userpw;"".

    condb, errdb := sql.Open(""mssql"", ""server=localhost;user id=gouser;password=g0us3r;"")
    if errdb  != nil {
        fmt.Println(""  Error open db:"", errdb.Error())
    }

    defer condb.Close()

    errdb = condb.Ping()
    if errdb != nil {
        log.Fatal(errdb)
    }

    // drop the database if it is there so we can recreate it
    // next we will recreate the database, put a table into it,
    // and add a few rows.
    _, errdb = condb.Exec(""drop database mydbthing"")
    if errdb != nil {
        fmt.Println(""  Error Exec db: drop db - "", errdb.Error())
    }

    _, errdb = condb.Exec(""create database mydbthing"")
    if errdb  != nil {
        fmt.Println(""  Error Exec db: create db - "", errdb.Error())
    }

    _, errdb = condb.Exec(""use  mydbthing"")
    if errdb  != nil {
        fmt.Println(""  Error Exec db: using db - "", errdb.Error())
    }

    _, errdb = condb.Exec(""create table junky (one int, two int)"")
    if errdb  != nil {
        fmt.Println(""  Error Exec db: create table - "", errdb.Error())
    }

    _, errdb = condb.Exec(""insert into junky (one, two) values (101, 201)"")
    if errdb  != nil {
        fmt.Println(""  Error Exec db: insert table 1 - "", errdb.Error())
    }
    _, errdb = condb.Exec(""insert into junky (one, two) values (102, 202)"")
    if errdb  != nil {
        fmt.Println(""  Error Exec db: insert table 2 - "", errdb.Error())
    }
    _, errdb = condb.Exec(""insert into junky (one, two) values (103, 203)"")
    if errdb  != nil {
        fmt.Println(""  Error Exec db: insert table 3 - "", errdb.Error())
    }

    // Now that we have our database lets read some records and print them.
    var (
        one  int
        two  int
    )

    // documentation about a simple query and results loop is at URL
    // http://go-database-sql.org/retrieving.html
    // we use Query() and not Exec() as we expect zero or more rows to
    // be returned. only use Query() if rows may be returned.
    fmt.Println (""  Query our table for the three rows we inserted."")
    rows, errdb := condb.Query (""select one, two from junky"")
    defer rows.Close()
    for rows.Next() {
        err:= rows.Scan (&one, &two)
        if err != nil {
            fmt.Println(""  Error Query db: select - "", err.Error())
        } else {
            fmt.Printf(""    - one %d and two %d\n"", one, two)
        }
    }
    rows.Close()

    errdb = rows.Err()
    if errdb != nil {
        fmt.Println(""  Error Query db: processing rows - "", errdb.Error())
    }

    fmt.Println(""ending app"")
}
",3436
1068,39008249,"starting app
  Error Exec db: drop db -  mssql: Cannot drop the database 'mydbthing', because it does not exist or you do not have permission.
  Query our table for the three rows we inserted.
    - one 101 and two 201
    - one 102 and two 202
    - one 103 and two 203
ending app
",282
1069,39008249,github.com/denisenkom/go-mssqldb,32
1070,39008249,github.com/denisenkom/go-mssqldb,32
1071,39008249,go get github.com/denisenkom/go-mssqldb,39
1072,39008249,Git Shell,9
1073,39008249,Git Shell,9
1074,39008249,go get,6
1075,39008249,Git Shell,9
1076,39008249,go,2
1077,39008249,git,3
1078,39008249,go get,6
1079,39008249,git,3
1080,39008249,go-mssqldb,10
1081,39008249,Open(),6
1082,39008249,"starting app

Error Exec db: create db -  Unable to open tcp connection with host 'localhost:1433': dial tcp 127.0.0.1:1433: connectex: No connection could be made because the target machine actively refused it.

ending app
",224
1083,39008249,Sql Server Configuration Manager,32
1084,39008249,Client Protocols,16
1085,39008249,Protocols for MSSQLSERVER,25
1086,39008249,Protocols for MSSQLSERVER,25
1087,39008249,sql.Open(),10
1088,39008249,sql.Open(),10
1089,39008249,"starting app
  Error Exec db: create db -  driver: bad connection
  Error Exec db: create table -  driver: bad connection
ending app
",133
1090,39008249,Log,3
1091,39008249,ERRORLOG,8
1092,39008249,ERRORLOG.1,10
1093,39008249,ERRORLOG,8
1094,39008249,"2016-08-15 22:56:22.41 Server      SQL Server is now ready for client connections. This is an informational message; no user action is required.
2016-08-15 23:55:47.51 Logon       Error: 18456, Severity: 14, State: 58.
2016-08-15 23:55:47.51 Logon       Login failed for user 'rchamber'. Reason: An attempt to login using SQL authentication failed. Server is configured for Windows authentication only. [CLIENT: 127.0.0.1]
2016-08-15 23:55:47.61 Logon       Error: 18456, Severity: 14, State: 58.
2016-08-15 23:55:47.61 Logon       Login failed for user 'rchamber'. Reason: An attempt to login using SQL authentication failed. Server is configured for Windows authentication only. [CLIENT: ::1]
2016-08-15 23:55:47.62 Logon       Error: 18456, Severity: 14, State: 58.
2016-08-15 23:55:47.62 Logon       Login failed for user 'rchamber'. Reason: An attempt to login using SQL authentication failed. Server is configured for Windows authentication only. [CLIENT: 127.0.0.1]
",973
1095,39008249,user id=,8
1096,39008249,sqlcmd,6
1097,39008249,"1> create login gouser with password='g0us3r';
2> go
1> create user gouser for login gouser;
2> go
",99
1098,39008249,gouser,6
1099,39008249,sql.Open(),10
1100,39008249,setspn,6
1101,39008249,sqlcmd,6
1102,39008249,ODBC,4
1103,39008249,go-mssqldb,10
1104,39008249,go-mssqldb,10
1105,39008249,"condb, errdb := sql.Open(""mssql"", ""server=MyServer;user id=;password=DONTCARE;"")
condb, errdb := sql.Open(""mssql"", ""server=MyServer;user id=;password=;"")
",154
1106,39044210,structs,7
1107,39044210,implements,10
1108,39044210,interface,9
1109,39044210,model,5
1110,39044210,"type StatModel interface {
    FilterData(Filter)
    ClusterData(Filter)
    CountDataForChart(string)[]ChartElement
    GroupByTreeGroups(Filter)[]OrgPack
}

type StatRow interface {
    Count( name string) float64
}
",219
1111,39044210," type NoaggModel []NoaggRow

 type NoaggRow struct {
    Date             string
    Hour             int
    Id_user          int
    Id_line          float64
    Id_region        int
    Id_tree_devision int
    N_inb            float64
    N_out            float64
    N_hold           float64
    N_abandon        float64
    N_transfer       float64
    T_inb            float64
    T_out           float64
    T_hold           float64
    T_ring           float64
    T_acw            float64
    T_wait           float64
}

type FcrModel  []FcrRow

type FcrRow struct {
    Date             string
    Hour             int
    Id_user          int
    Id_line          float64
    Id_region        int
    Id_tree_devision int
    N_irr            float64
    N_inb            float64
}
",794
1112,39044210,"func receiveLightWork(org <-chan models.OrgPack, request ChartOptions) interface{} {

    modelClusters := make(map[string][]models.OrgPack)

    // here  I fill data into modelClusters

    output := make(map[string][]OrgStat)


    // here I begin loop over clusters of different model types

    for modelName, slice := range modelClusters {

        //here I can't choose what to write
        // model must be convertable to NoaggModel, that is []NoaggRow{}
        // as others AcsiModel, FcrModel ...etc. 
        // Also model.ClusterData(customFilter) must be callable as it is in interface of common model

        var model []interface{} 

        var rowModel interface{}

        switch modelName {

        case ""noagg"":
            model = model.(models.NoaggModel)
            rowModel = rowModel.(models.NoaggRow{})
        case ""acsi"":
            model = model.(models.AcsiModel)
            rowModel = rowModel.(models.AcsiRow)
        case ""fcr24"":
            model = model.(models.FcrModel)
            rowModel = rowModel.(models.FcrRow)
        case ""aic"":
            model = model.(models.AicModel)
            rowModel = rowModel.(models.AicRow)
        }

        for _, el := range slice {


            modelFields := reflect.ValueOf(&rowModel).Elem()
            sliceFields := reflect.ValueOf(&el.SummorisedData).Elem()

            fieldsTypes := modelFields.Type()

            for i := 6; i < modelFields.NumField(); i++ {
                fmt.Println("" model_field "", fieldsTypes.Field(i).Name )
                modelField := modelFields.Field(i);
                sliceField := sliceFields.Index(i-6) ;

                modelField.Set(reflect.Value(sliceField));
            }

            id_line := sliceFields.Index(len(el.SummorisedData) - 1) ;
            date := sliceFields.FieldByName(""PackName"");

            modelFields.FieldByName(""Id_line"").Set(id_line)
            modelFields.FieldByName(""Date"").Set(date)

     // here append not works, because model is []interface{} and not []NoaggRow or others.
     // Writes [non-interface type []interface {} on left]
            model = append(model, rowModel)
        }


 // here I need to call interface method for model     
        model.ClusterData(customFilter) // now here is unresolved Reference 'ClusterData'

        for _, mod := range model {
          // here some common logick for creating data for chart output
         }    
    }

    return output
}
",2462
1113,39044210,"func typeSwitch(model string) (interface{}, interface{}){

    switch model{
        case ""noagg"":
            fmt.Println(""Model type:"", model)
            return &models.NoaggModel{}, &models.NoaggRow{}
        case ""acsi"":
            fmt.Println(""Model type:"", model)
            return &models.AcsiModel{}, &models.AcsiRow{}
        case ""fcr24"":
            fmt.Println(""Model type:"", model)
            return &models.FcrModel{}, &models.FcrRow{}
        case ""aic"":
            fmt.Println(""Model type:"", model)
            return &models.AicModel{}, &models.AicRow{}
        default:
            fmt.Println(""Unknown"")
            return false,false
    }
}


func receiveLightWork(org <-chan models.OrgPack, request ChartOptions) interface{} {

    modelClusters := make(map[string][]models.OrgPack)

    for orgPack := range org {
        // here I fill data into clusters
    }

    output := make(map[string][]OrgStat)

   // here I need common code to put data from clusters in correct structures and call interface methods

    for modelName, slice := range modelClusters {

        model, rowModel := typeSwitch(modelName)

        var data_slice []interface{}

        for _, el := range slice {

            modelFields := reflect.ValueOf(rowModel).Elem()
            fieldsCounter := modelFields.NumField()

            sliceFields := reflect.ValueOf(&el.SummorisedData).Elem()
            sliceObjFields := reflect.ValueOf(&el).Elem()

            fieldsTypes := modelFields.Type()

            for i := 6; i < fieldsCounter; i++ {
                fmt.Println("" model_field "", fieldsTypes.Field(i).Name )
                modelField := modelFields.Field(i);
                sliceField := sliceFields.Index(i-6) ;

                modelField.Set(reflect.Value(sliceField));
            }

            id_line := sliceFields.Index(len(el.SummorisedData) - 1) ;
            date := sliceObjFields.FieldByName(""PackName"");


            modelFields.FieldByName(""Id_line"").Set(id_line)
            modelFields.FieldByName(""Date"").Set(date)

            fmt.Println(""row_data : "", rowModel)
            data_slice = append(data_slice, rowModel)
        }

    // here comes : invalid type assertion: data_slice.(model) (non-interface type []interface {} on left           
        dataModel := data_slice.(model)
    // here I need correctly created instance of model 
    // (NoaggModel or FcrModel) with data inside its struct 
    // to work with it and call interface methods that are shown in interface above

    }

    return output
}
",2555
1114,39045889,"version: '2'
services:
    postgres:
        image: postgres
        ports:
            - ""5432""
        environment:
            - POSTGRES_PASSWORD=postgres
    server:
        build: ./server
        command: gin
        volumes:
            - ./server:/go/src/app
        ports:
            - ""8080:3000""
",309
1115,39045889,"func main() {

    dbinfo := fmt.Sprintf(""user=%s password=%s host=%s dbname=%s sslmode=disable"",
        ""postgres"",
        os.Getenv(""DB_ENV_POSTGRES_PASSWORD""),
        ""http://postgres"",
        DB_NAME,
    )

    db, err := sql.Open(""postgres"", dbinfo)

    checkErr(err, ""sql.Open failed"")


    // construct a gorp DbMap
    dbmap := &gorp.DbMap{Db: db, Dialect: gorp.PostgresDialect{}}

    // add a table, setting the table name to 'posts' and
    // specifying that the Id property is an auto incrementing PK
    dbmap.AddTableWithName(Todo{}, ""todos"").SetKeys(true, ""Id"")

    // create the table. in a production system you'd generally
    // use a migration tool, or create the tables via scripts
    err = dbmap.CreateTablesIfNotExists()
    checkErr(err, ""Create tables failed"")

    http.HandleFunc(""/"", handler)
    http.ListenAndServe("":3001"", nil)
}
",871
1116,39045889,"←[36mserver_1    |←[0m [gin] listening on port 3000
←[33mpostgres_1  |←[0m The files belonging to this database system will be owned by user ""postgres"".
←[33mpostgres_1  |←[0m This user must also own the server process.
←[33mpostgres_1  |←[0m
←[33mpostgres_1  |←[0m The database cluster will be initialized with locale ""en_US.utf8"".
←[33mpostgres_1  |←[0m The default database encoding has accordingly been set to ""UTF8"".
←[33mpostgres_1  |←[0m The default text search configuration will be set to ""english"".
←[33mpostgres_1  |←[0m
←[33mpostgres_1  |←[0m Data page checksums are disabled.
←[33mpostgres_1  |←[0m
←[33mpostgres_1  |←[0m fixing permissions on existing directory /var/lib/postgresql/data ... ok
←[33mpostgres_1  |←[0m creating subdirectories ... ok
←[33mpostgres_1  |←[0m selecting default max_connections ... 100
←[33mpostgres_1  |←[0m selecting default shared_buffers ... 128MB
←[33mpostgres_1  |←[0m selecting dynamic shared memory implementation ... posix
←[33mpostgres_1  |←[0m creating configuration files ... ok
←[33mpostgres_1  |←[0m creating template1 database in /var/lib/postgresql/data/base/1 ... ok
←[33mpostgres_1  |←[0m initializing pg_authid ... ok
←[33mpostgres_1  |←[0m initializing dependencies ... ok
←[33mpostgres_1  |←[0m creating system views ... ok
←[33mpostgres_1  |←[0m loading system objects' descriptions ... ok
←[33mpostgres_1  |←[0m creating collations ... ok
←[33mpostgres_1  |←[0m creating conversions ... ok
←[33mpostgres_1  |←[0m creating dictionaries ... ok
←[33mpostgres_1  |←[0m setting privileges on built-in objects ... ok
←[33mpostgres_1  |←[0m creating information schema ... ok
←[33mpostgres_1  |←[0m loading PL/pgSQL server-side language ... ok
←[33mpostgres_1  |←[0m vacuuming database template1 ... ok
←[33mpostgres_1  |←[0m copying template1 to template0 ... ok
←[33mpostgres_1  |←[0m copying template1 to postgres ... ok
←[33mpostgres_1  |←[0m syncing data to disk ... ok
←[33mpostgres_1  |←[0m
←[33mpostgres_1  |←[0m WARNING: enabling ""trust"" authentication for local connections
←[33mpostgres_1  |←[0m You can change this by editing pg_hba.conf or using the option -A, or
←[33mpostgres_1  |←[0m --auth-local and --auth-host, the next time you run initdb.
←[33mpostgres_1  |←[0m
←[33mpostgres_1  |←[0m Success. You can now start the database server using:
←[33mpostgres_1  |←[0m
←[33mpostgres_1  |←[0m     pg_ctl -D /var/lib/postgresql/data -l logfile start
←[33mpostgres_1  |←[0m
←[33mpostgres_1  |←[0m waiting for server to start....LOG:  database system was shut down at 2016-08-19 18:31:55 UTC
←[33mpostgres_1  |←[0m LOG:  MultiXact member wraparound protections are now enabled
←[33mpostgres_1  |←[0m LOG:  database system is ready to accept connections
←[33mpostgres_1  |←[0m LOG:  autovacuum launcher started
←[33mpostgres_1  |←[0m  done
←[33mpostgres_1  |←[0m server started
←[33mpostgres_1  |←[0m ALTER ROLE
←[33mpostgres_1  |←[0m
←[33mpostgres_1  |←[0m
←[33mpostgres_1  |←[0m /docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*
←[33mpostgres_1  |←[0m
←[33mpostgres_1  |←[0m LOG:  received fast shutdown request
←[33mpostgres_1  |←[0m LOG:  aborting any active transactions
←[33mpostgres_1  |←[0m LOG:  autovacuum launcher shutting down
←[33mpostgres_1  |←[0m LOG:  shutting down
←[33mpostgres_1  |←[0m waiting for server to shut down....LOG:  database system is shut down
←[33mpostgres_1  |←[0m  done
←[33mpostgres_1  |←[0m server stopped
←[33mpostgres_1  |←[0m
←[33mpostgres_1  |←[0m PostgreSQL init process complete; ready for start up.
←[33mpostgres_1  |←[0m
←[33mpostgres_1  |←[0m LOG:  database system was shut down at 2016-08-19 18:31:57 UTC
←[33mpostgres_1  |←[0m LOG:  MultiXact member wraparound protections are now enabled
←[33mpostgres_1  |←[0m LOG:  database system is ready to accept connections
←[33mpostgres_1  |←[0m LOG:  autovacuum launcher started
←[36mserver_1    |←[0m 2016/08/19 18:32:05 Create tables failed dial tcp [::1]:5432: getsockopt: connection refused
←[36mserver_1    |←[0m 2016/08/19 18:32:05 http: proxy error: dial tcp [::1]:3001: getsockopt: connection refused
←[36mserver_1    |←[0m 2016/08/19 18:32:05 Create tables failed dial tcp [::1]:5432: getsockopt: connection refused
←[36mserver_1    |←[0m 2016/08/19 18:32:05 http: proxy error: dial tcp [::1]:3001: getsockopt: connection refused
",4583
1117,39061896,"package main

import (
    ""io""
    ""net/http""
    ""os""
)

//Display the named template
func display(w http.ResponseWriter, tmpl string, data interface{}) {
    templates.ExecuteTemplate(w, tmpl+"".html"", data)
}

//This is where the action happens.
func uploadHandler(w http.ResponseWriter, r *http.Request) {
    switch r.Method {
    //POST takes the uploaded file(s) and saves it to disk.
    case ""POST"":
        //parse the multipart form in the request
        err := r.ParseMultipartForm(100000)
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
            return
        }

        //get a ref to the parsed multipart form
        m := r.MultipartForm

        //get the *fileheaders
        files := m.File[""myfiles""]
        for i, _ := range files {
            //for each fileheader, get a handle to the actual file
            file, err := files[i].Open()
            defer file.Close()
            if err != nil {
                http.Error(w, err.Error(), http.StatusInternalServerError)
                return
            }
            //create destination file making sure the path is writeable.
            dst, err := os.Create(""/home/sanat/"" + files[i].Filename)
            defer dst.Close()
            if err != nil {
                http.Error(w, err.Error(), http.StatusInternalServerError)
                return
            }
            //copy the uploaded file to the destination file
            if _, err := io.Copy(dst, file); err != nil {
                http.Error(w, err.Error(), http.StatusInternalServerError)
                return
            }

        }
        //display success message.
        display(w, ""upload"", ""Upload successful."")
    default:
        w.WriteHeader(http.StatusMethodNotAllowed)
    }
}

func main() {
    http.HandleFunc(""/upload"", uploadHandler)

    //static file handler.
    http.Handle(""/assets/"", http.StripPrefix(""/assets/"", http.FileServer(http.Dir(""assets""))))

    //Listen on port 8080
    http.ListenAndServe("":8080"", nil)
}
",2050
1118,39061896,"package com.isummation.fileupload;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.InputStreamReader;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.ByteArrayBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.util.Log;

public class FileUpload extends Activity {
    Bitmap bm;

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        try {
            // bm = BitmapFactory.decodeResource(getResources(),
            // R.drawable.forest);
            bm = BitmapFactory.decodeFile(""/sdcard/DCIM/forest.png"");
            executeMultipartPost();
        } catch (Exception e) {
            Log.e(e.getClass().getName(), e.getMessage());
        }
    }

    public void executeMultipartPost() throws Exception {
        try {
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            bm.compress(CompressFormat.JPEG, 75, bos);
            byte[] data = bos.toByteArray();
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost postRequest = new HttpPost(
                    ""http://10.0.2.2/cfc/iphoneWebservice.cfc?returnformat=json&method=testUpload"");
            ByteArrayBody bab = new ByteArrayBody(data, ""forest.jpg"");
            // File file= new File(""/mnt/sdcard/forest.png"");
            // FileBody bin = new FileBody(file);
            MultipartEntity reqEntity = new MultipartEntity(
                    HttpMultipartMode.BROWSER_COMPATIBLE);
            reqEntity.addPart(""uploaded"", bab);
            reqEntity.addPart(""photoCaption"", new StringBody(""sfsdfsdf""));
            postRequest.setEntity(reqEntity);
            HttpResponse response = httpClient.execute(postRequest);
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    response.getEntity().getContent(), ""UTF-8""));
            String sResponse;
            StringBuilder s = new StringBuilder();

            while ((sResponse = reader.readLine()) != null) {
                s = s.append(sResponse);
            }
            System.out.println(""Response: "" + s);
        } catch (Exception e) {
            // handle exception here
            Log.e(e.getClass().getName(), e.getMessage());
        }
    }
}
",2864
1119,39063494,"INFO     2016-08-20 22:48:03,786 devappserver2.py:769] Skipping SDK update check. 
INFO     2016-08-20 22:48:03,960 api_server.py:205] Starting API server at: http://localhost:64053 
INFO     2016-08-20 22:48:03,969 dispatcher.py:197] Starting module ""default"" running at: http://localhost:8080 
INFO     2016-08-20 22:48:03,974 admin_server.py:116] Starting admin server at:http://localhost:8000

Exception in thread Instance Adjustment: Traceback (most recent call last):   
    File ""C:\Python27\lib\threading.py"", line 801, in __bootstrap_inner 
      self.run()   
    File ""C:\Python27\lib\threading.py"", line 754, in run 
      self.__target(*self.__args, **self.__kwargs)   
    File ""C:\work\go_appengine\google\appengine\tools\devappserver2\module.py"",line 1485, in _loop_adjusting_instances 
      self._adjust_instances()  
    File ""C:\work\go_appengine\google\appengine\tools\devappserver2\module.py"",line 1460, in _adjust_instances 
      self._add_instance(permit_warmup=True)
    File ""C:\work\go_appengine\google\appengine\tools\devappserver2\module.py"",line 1338, in _add_instance 
      expect_ready_request=perform_warmup)  
    File ""C:\work\go_appengine\google\appengine\tools\devappserver2\go_runtime.py"",line 174, in new_instance 
      if self._go_application.maybe_build(self._modified_since_last_build):  
    File ""C:\work\go_appengine\google\appengine\tools\devappserver2\go_application.py"",line 304, in maybe_build 
      self._extras_hash, old_extras_hash = (self._get_extras_hash(),   
    File ""C:\work\go_appengine\google\appengine\tools\devappserver2\go_application.py"",line 247, in _get_extras_hash gab_stdout, 
      _ = self._run_gab(gab_args, env={})   
    File ""C:\work\go_appengine\google\appengine\tools\devappserver2\go_application.py"",line 175, in _run_gab
      gab_extra_args, env)   
    File ""C:\work\go_appengine\google\appengine\tools\devappserver2\go_application.py"",line 111, in _run_gab 
      env=env)   
    File ""C:\work\go_appengine\google\appengine\tools\devappserver2\safe_subprocess.py"",line 74, in start_process 
      stdin=subprocess.PIPE, startupinfo=startupinfo)   
    File ""C:\Python27\lib\subprocess.py"", line710, in __init__  
      errread, errwrite)   
    File ""C:\Python27\lib\subprocess.py"", line 958, in _execute_child 
      startupinfo) 
    WindowsError: [Error 206] The filename or extension is too long
",2385
1120,39063494,GOPATH,6
1121,39063494,go-app-builder.exe,18
1122,39063494,C:\Users\me\project\,20
1123,39063494,"goapp.bat serve .
",18
1124,39063494,"GOPATH
  $GOPATH
       app.yaml
       cron.yaml
       pkg
       src
            testapp
                 app.go
        golang.org
            x
                  oauth2
",174
1125,39063494,"Exception in thread Instance Adjustment: Traceback (most recent call last):   File ""C:\Python27\lib\threading.py"", line 810, in
__bootstrap_inner
    self.run()   File ""C:\Python27\lib\threading.py"", line 763, in run
    self.__target(*self.__args, **self.__kwargs)   File ""C:\Users\Indra\development\tools\go_appengine\google\appengine\tools\devappserver2\module.py"", line 1486, in _loop_adjusting_instances
    self._adjust_instances()   File ""C:\Users\Indra\development\tools\go_appengine\google\appengine\tools\devappserver2\module.py"", line 1461, in _adjust_instances
    self._add_instance(permit_warmup=True)   File ""C:\Users\Indra\development\tools\go_appengine\google\appengine\tools\devappserver2\module.py"", line 1339, in _add_instance
    expect_ready_request=perform_warmup)   File ""C:\Users\Indra\development\tools\go_appengine\google\appengine\tools\devappserver2\go_runtime.py"", line 176, in new_instance
    if self._go_application.maybe_build(self._modified_since_last_build):   File ""C:\Users\Indra\development\tools\go_appengine\google\appengine\tools\devappserver2\go_application.py"", line 304, in maybe_build
    self._extras_hash, old_extras_hash = (self._get_extras_hash(),   File ""C:\Users\Indra\development\tools\go_appengine\google\appengine\tools\devappserver2\go_application.py"", line 247, in _get_extras_hash
    gab_stdout, _ = self._run_gab(gab_args, env={})   File ""C:\Users\Indra\development\tools\go_appengine\google\appengine\tools\devappserver2\go_application.py"", line 175, in _run_gab
    gab_extra_args, env)   File ""C:\Users\Indra\development\tools\go_appengine\google\appengine\tools\devappserver2\go_application.py"", line 111, in _run_gab
    env=env)   File ""C:\Users\Indra\development\tools\go_appengine\google\appengine\tools\devappserver2\safe_subprocess.py"", line 74, in start_process
    stdin=subprocess.PIPE, startupinfo=startupinfo)   File ""C:\Python27\lib\subprocess.py"", line 710, in __init__
    errread, errwrite)   File ""C:\Python27\lib\subprocess.py"", line 958, in _execute_child
    startupinfo) WindowsError: [Error 87] Falscher Parameter
",2099
1126,39064558,io.Reader,9
1127,39064558,"buf := &bytes.Buffer{}
nRead, err := io.Copy(buf, dec) 
if err != nil {
    fmt.Println(err)
}
w.Header().Set(""Content-Length"", strconv.FormatInt(nRead, 10)) //len(dec)
",169
1128,39064558,"package main

import (
    ""bytes""
    base64 ""encoding/base64""
    ""fmt""
    ""io""
    ""net/http""
    ""strconv""
    ""time""
)

func pix(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, ""Hi there, I love %s!"", r.URL.Path[1:])
    cookie, _ := r.Cookie(""csrftoken"")
    fmt.Printf(cookie.Value)
}

func img(w http.ResponseWriter, r *http.Request) {
    expiration := time.Now().Add(365 * 24 * time.Hour)
    cookie := http.Cookie{Name: ""csrftoken"", Value: ""abcd"", Expires: expiration, HttpOnly: false}
    http.SetCookie(w, &cookie)
    img := bytes.NewBufferString(""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAIAAACRXR/mAAADMUlEQVRYw+2YTUgUYRjHZzOJIoNA+rrUyYNIRQgRHaLo4qFDBEGeunSxS9TFU0QEnhIh6IvokrUzO2uamRmbG6XmR/mVaKZpZVbYvvO143zszsxOz+yahNm+785sITEP72F3Z+adH8/zf5+PpagwtxKXj+Vj+Vg+lo/lY+W+WI4KpddKwWIQFUSF97nNLcLGZt75SiOHchEXfskDVmYjlowpiEoei3UT2ljcFJOpOd169C1Z2SuvgsdpB7cgzB16EV/byGM2xDIVPxQujKmBDF/2m2l0vFvmEin7N2v8kiiPiOeGlGHRvP1RdxA9eYtGR7pk2Pf6lI7RCoP2RaWkZWe3fsFc18hvesAHPGEFUc24ltnx3kyiCJwfRMs6dTXLdSIjO9Osal18qzKfE5V9coDxhlU7qS3uOyiaB55JDtkS2TKoLCLaOLPS4b02pQdCHiUfRKf653/d2kjZN6f10jYxI2EnrGk5H+2WsVi6ZZ8fVSmGQKaYyyFuR6ugmUtVrJo2C7HokeGq8447sYpOPBbo3XFzKC95626sZlz905sUM9XLGbXvtKtTOhZrQDApkhNNkiAOPo/viojh2YSZsj1aF2eQ5n2stuomNQjiiGQanrFufdCXP8gu8tbhjridJ6saVPKExXJrwlwfb3pnAg2Ut0tEBZFI8gza81Tik15DCDIoINQ7aQdBo90RMfrdwNaWLFY9opJGkBQrhCA/HXspQ8W1XHkN6vfWFiGH9ouwhdpJUFuy2JX3eg6uyqENpNHZYcUd02jcLMI2WO67UwZVv1G1HLMq3L83KuEbLPdY7IL2L42p0MMQiuzkq/ncwucOi6qPbWkWoPfCUsENpweUnP1EmE4XGhgagT72RyXolkSCHBbTU3By3fgJj8VyJW3CmSHl8oTWMJuYUUizVvtcsuyJ6J4J663CMLevXar/lJgnKNSgbphzKjriTn5i0F8eX9ODXnEzf6JHvjGtv+aNGdWCOEKnJRmpr5oFVQV8WTWglIKHMlPhv5uqQ1xGYfB5fRMPo+n2VmFbi7ChiS9oWBhZvXrI01TNLg7yPxt51v9rxMfysXwsH8vH+g+wfgDUr+5LcyNV4AAAAABJRU5ErkJggg=="")
    dec := base64.NewDecoder(base64.StdEncoding, img)
    w.Header().Set(""Content-Type"", ""image/jpeg"")

    buf := &bytes.Buffer{}
    nRead, err := io.Copy(buf, dec) 
    if err != nil {
        fmt.Println(err)
    }
    w.Header().Set(""Content-Length"", strconv.FormatInt(nRead, 10)) //len(dec)

    io.Copy(w, buf)
}

func main() {
    http.HandleFunc(""/pix/"", pix)
    http.HandleFunc(""/img/"", img)
    http.HandleFunc(""/red/"", img)
    http.HandleFunc(""/"", img)
    http.ListenAndServe("":8080"", nil)

}
",2255
1129,39064558,"package main

import (
    ""bytes""
    base64 ""encoding/base64""
    ""fmt""
    ""io""
    ""net/http""
    ""time""
)

func pix(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, ""Hi there, I love %s!"", r.URL.Path[1:])
    cookie, _ := r.Cookie(""csrftoken"")
    fmt.Printf(cookie.Value)
}

func img(w http.ResponseWriter, r *http.Request) {
    expiration := time.Now().Add(365 * 24 * time.Hour)
    cookie := http.Cookie{Name: ""csrftoken"", Value: ""abcd"", Expires: expiration, HttpOnly: false}
    http.SetCookie(w, &cookie)
    img := bytes.NewBufferString(""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAIAAACRXR/mAAADMUlEQVRYw+2YTUgUYRjHZzOJIoNA+rrUyYNIRQgRHaLo4qFDBEGeunSxS9TFU0QEnhIh6IvokrUzO2uamRmbG6XmR/mVaKZpZVbYvvO143zszsxOz+yahNm+785sITEP72F3Z+adH8/zf5+PpagwtxKXj+Vj+Vg+lo/lY+W+WI4KpddKwWIQFUSF97nNLcLGZt75SiOHchEXfskDVmYjlowpiEoei3UT2ljcFJOpOd169C1Z2SuvgsdpB7cgzB16EV/byGM2xDIVPxQujKmBDF/2m2l0vFvmEin7N2v8kiiPiOeGlGHRvP1RdxA9eYtGR7pk2Pf6lI7RCoP2RaWkZWe3fsFc18hvesAHPGEFUc24ltnx3kyiCJwfRMs6dTXLdSIjO9Osal18qzKfE5V9coDxhlU7qS3uOyiaB55JDtkS2TKoLCLaOLPS4b02pQdCHiUfRKf653/d2kjZN6f10jYxI2EnrGk5H+2WsVi6ZZ8fVSmGQKaYyyFuR6ugmUtVrJo2C7HokeGq8447sYpOPBbo3XFzKC95626sZlz905sUM9XLGbXvtKtTOhZrQDApkhNNkiAOPo/viojh2YSZsj1aF2eQ5n2stuomNQjiiGQanrFufdCXP8gu8tbhjridJ6saVPKExXJrwlwfb3pnAg2Ut0tEBZFI8gza81Tik15DCDIoINQ7aQdBo90RMfrdwNaWLFY9opJGkBQrhCA/HXspQ8W1XHkN6vfWFiGH9ouwhdpJUFuy2JX3eg6uyqENpNHZYcUd02jcLMI2WO67UwZVv1G1HLMq3L83KuEbLPdY7IL2L42p0MMQiuzkq/ncwucOi6qPbWkWoPfCUsENpweUnP1EmE4XGhgagT72RyXolkSCHBbTU3By3fgJj8VyJW3CmSHl8oTWMJuYUUizVvtcsuyJ6J4J663CMLevXar/lJgnKNSgbphzKjriTn5i0F8eX9ODXnEzf6JHvjGtv+aNGdWCOEKnJRmpr5oFVQV8WTWglIKHMlPhv5uqQ1xGYfB5fRMPo+n2VmFbi7ChiS9oWBhZvXrI01TNLg7yPxt51v9rxMfysXwsH8vH+g+wfgDUr+5LcyNV4AAAAABJRU5ErkJggg=="")
    dec := base64.NewDecoder(base64.StdEncoding, img)
    w.Header().Set(""Content-Type"", ""image/jpeg"")

    io.Copy(w, dec)
}

func main() {
    http.HandleFunc(""/pix/"", pix)
    http.HandleFunc(""/img/"", img)
    http.HandleFunc(""/red/"", img)
    http.HandleFunc(""/"", img)
    http.ListenAndServe("":8080"", nil)

}
",2047
1130,39124035,atomic.Value,12
1131,39124035,sync.RWMutex,12
1132,39124035,sync/atomic,11
1133,39124035,atomic.Value,12
1134,39124035,"// to test the panic use go build -race
package main

import (
    ""fmt""
    ""sync/atomic""
)

type test struct {
    ch chan string
    atomic.Value
}

func (t *test) run() {
    for {
        select {
        case v := <-t.ch:
            fmt.Printf(""%+v, foo=%+v\n"", v, t.Load())
            t.Store(false)
        default:
        }
    }
}

func (self *test) Ping() {
    self.ch <- ""ping""
}

func New() *test {
    t := &test{
        ch: make(chan string),
    }
    t.Store(false)
    go t.run()
    return t
}

func main() {
    t := New()
    for i := 0; i <= 10; i++ {
        if x, _ := t.Load().(bool); x {
            t.Ping()
        }
        //  time.Sleep(time.Second)
        if i%3 == 0 {
            t.Store(true)
        }
    }
}
",752
1135,39124035,go build -race,14
1136,39124035,"ping, foo=true
ping, foo=false
ping, foo=false
ping, foo=false
ping, foo=false
",79
1137,39124035,func (t *test) run(),20
1138,39124035,"func (t *test) run() {
    for v := range t.ch {
        fmt.Printf(""%+v, foo=%+v\n"", v, t.Load())
        t.Store(false)
    }
}
",130
1139,39124035,sync.RWMutex,12
1140,39124035,sync.WaitGroup,14
1141,39124035,"// to test the panic use go build -race
package main

import (
    ""fmt""
    ""sync""
)

type test struct {
    ch  chan string
    foo bool
    sync.RWMutex
    sync.WaitGroup
}

func (t *test) run() {
    for v := range t.ch {
        t.Lock()
        r := t.foo
        t.foo = false
        t.Unlock()
        fmt.Printf(""%+v, foo=%+v\n"", v, r)

    }
    t.Done()
}

func (self *test) Ping() {
    self.ch <- ""ping""
}

func New() *test {
    t := &test{ch: make(chan string)}
    t.Add(1)
    go t.run()
    return t
}

func main() {
    t := New()
    for i := 0; i <= 10; i++ {
        t.RLock()
        r := t.foo
        t.RUnlock()
        if r {
            t.Ping()
        }
        //  time.Sleep(time.Second)
        if i%3 == 0 {
            t.Lock()
            t.foo = true
            t.Unlock()
        }
    }
    close(t.ch)
    t.Wait()
}
",860
1142,39124035,go build -race,14
1143,39124035,"ping, foo=true
ping, foo=true
ping, foo=false
ping, foo=true
ping, foo=false
ping, foo=true
",92
1144,39124035,"package main

import (
    ""fmt""
    ""time""
)

type Server struct{ quit chan bool }

func NewServer() *Server {
    s := &Server{make(chan bool)}
    go s.run()
    return s
}

func (s *Server) run() {
    for {
        select {
        case <-s.quit:
            fmt.Println(""finishing task"")
            time.Sleep(time.Second)
            fmt.Println(""task done"")
            s.quit <- true
            return
        case <-time.After(time.Second):
            fmt.Println(""running task"")
        }
    }
}
func (s *Server) Stop() {
    fmt.Println(""server stopping"")
    s.quit <- true
    <-s.quit
    fmt.Println(""server stopped"")
}

func main() {
    s := NewServer()
    time.Sleep(2 * time.Second)
    s.Stop()
}
",723
1145,39124035,"package main

import (
    ""fmt""
    ""time""
)

var quit = make(chan bool)

func main() {
    go run()
    time.Sleep(2 * time.Second)
    fmt.Println(""server stopping"")

    quit <- true // signal to quit

    <-quit // wait for quit signal

    fmt.Println(""server stopped"")
}

func run() {
    for {
        select {
        case <-quit:
            fmt.Println(""finishing task"")
            time.Sleep(time.Second)
            fmt.Println(""task done"")
            quit <- true
            return
        case <-time.After(time.Second):
            fmt.Println(""running task"")
        }
    }
}
",597
1146,39124035,"running task
running task
server stopping
finishing task
task done
server stopped
",82
1147,39124035,"// to test the panic use go build -race
package main

import ""fmt""
import ""sync/atomic""

var ch = make(chan string)
var state int32

func main() {
    go run()
    for i := 0; i <= 10; i++ {
        if atomic.LoadInt32(&state) == 1 {
            ch <- ""ping""
        }
        if i%3 == 0 {
            atomic.StoreInt32(&state, 1)
        }
    }
}

func run() {
    for v := range ch {
        fmt.Printf(""%+v, state=%+v\n"", v, atomic.LoadInt32(&state))
        atomic.StoreInt32(&state, 0)
    }
}
",501
1148,39124035,"ping, state=1
ping, state=0
ping, state=1
ping, state=0
ping, state=1
ping, state=0
",84
1149,39124035,Lock(),6
1150,39124035,"// to test the panic use go build -race
package main

import ""fmt""

func main() {
    go run()
    for i := 0; i <= 10; i++ {
        signal <- struct{}{}
        if <-read {
            ping <- ""ping""
        }
        if i%3 == 0 {
            write <- true
        }
    }
}

func run() {
    foo := false
    for {
        select {
        case <-signal:
            fmt.Println(""signal"", foo)
            read <- foo
        case foo = <-write:
            fmt.Println(""write"", foo)
        case v := <-ping:
            fmt.Println(v, foo)
            foo = false
        }
    }
}

var (
    ping   = make(chan string)
    signal = make(chan struct{})
    read   = make(chan bool)
    write  = make(chan bool)
)
",719
1151,39124035,"signal false
write true
signal true
ping true
signal false
signal false
write true
signal true
ping true
signal false
signal false
write true
signal true
ping true
signal false
signal false
write true
signal true
ping true
",223
1152,39144961,Stackoverflow,13
1153,39144961,Slack,5
1154,39144961,reflection,10
1155,39144961,struct type,11
1156,39144961,"func newItem(modelName string, el models.OrgPack) interface{} {

    var item models.StatRow

    switch modelName {
    case ""noagg"":
        item = &models.NoaggRow{}
    case ""fcr24"":
        item = &models.FcrRow{}
    case ""acsi"":
        item = &models.AcsiRow{}
    case ""aic"":
        item = &models.AicRow{}
    case ""aux"":
        item = &models.AuxRow{}
    case ""cti"":
        item = &models.CtiRow{}
    case ""srv"":
        item = &models.SrvRow{}
    case ""sale"":
        item = &models.SaleRow{}
    case ""pds"":
        item = &models.PdsRow{}
    case ""wfm"":
        item = &models.WfmRow{}
    }

    modelFields := reflect.ValueOf(item).Elem()

    fieldsCounter := modelFields.NumField()

    sliceFields := reflect.ValueOf(&el.SummorisedData).Elem()
    sliceObjFields := reflect.ValueOf(&el).Elem()

    fieldsTypes := modelFields.Type()

    for i := 6; i < fieldsCounter; i++ {
        fmt.Println("" model_field "", fieldsTypes.Field(i).Name)
        modelField := modelFields.Field(i);
        sliceField := sliceFields.Index(i - 6);

        modelField.Set(reflect.Value(sliceField));
    }

    id_line := sliceFields.Index(len(el.SummorisedData) - 1);
    date := sliceObjFields.FieldByName(""PackName"");

    modelFields.FieldByName(""Id_line"").Set(id_line)
    modelFields.FieldByName(""Date"").Set(date)

    return item

}

func formatOutput(output map[string][]OrgStat, sourceName string, modelName string, charts []Chart, mod models.StatRow, cluster string) map[string][]OrgStat {

    if sourceName == modelName {
        var stats []OrgStat
        for _, chart := range charts {
            stats = append(stats, OrgStat{Name:chart.Name, Value: mod.Count(chart.Name)})
        }
        _, group_exist := output[cluster]
        if group_exist {
            inserted_stat := output[cluster]
            output[cluster] = append(stats, inserted_stat...)
        }else {
            output[cluster] = stats
        }

    }
    return output
}

func receiveLightWork(org <-chan models.OrgPack, request ChartOptions) interface{} {

    modelClusters := make(map[string][]models.OrgPack)

    for orgPack := range org {
        _, ok := modelClusters[orgPack.ModelName]
        if ok {
            model := modelClusters[orgPack.ModelName]
            model = append(model, orgPack)
            modelClusters[orgPack.ModelName] = model

        }else {
            var modelSlice []models.OrgPack
            modelSlice = append(modelSlice, orgPack)
            modelClusters[orgPack.ModelName] = modelSlice
        }
    }

    output := make(map[string][]OrgStat)

    for modelName, slice := range modelClusters {

        switch modelName {
        case ""noagg"":
            model := models.NoaggModel{}

            for _, el := range slice {
                newElement := newItem(modelName, el)
                model = append(model, *(newElement.(*models.NoaggRow)))
            }
            customFilter := request.Filters
            customFilter.Cluster = ""clusterDay""

            model.ClusterData(customFilter)


            for _, mod := range model {
                for sourceName, charts := range request.Charts {
                    output = formatOutput(output, sourceName, modelName, charts, mod, mod.Date)
                }
            }
        case ""acsi"":
            model := models.AcsiModel{}

            for _, el := range slice {
                newElement := newItem(modelName, el)
                model = append(model, *(newElement.(*models.AcsiRow)))
            }
            customFilter := request.Filters
            customFilter.Cluster = ""clusterDay""

            model.ClusterData(customFilter)

            for _, mod := range model {
                for sourceName, charts := range request.Charts {
                    output = formatOutput(output, sourceName, modelName, charts, mod, mod.Date)
                }
            }
        case ""fcr24"":
            model := models.FcrModel{}

            for _, el := range slice {
                newElement := newItem(modelName, el)
                model = append(model, *(newElement.(*models.FcrRow)))
            }
            customFilter := request.Filters
            customFilter.Cluster = ""clusterDay""

            model.ClusterData(customFilter)

            for _, mod := range model {
                for sourceName, charts := range request.Charts {
                    output = formatOutput(output, sourceName, modelName, charts, mod, mod.Date)
                }
            }
        case ""aic"":
            model := models.AicModel{}

            for _, el := range slice {
                newElement := newItem(modelName, el)
                model = append(model, *(newElement.(*models.AicRow)))
            }
            customFilter := request.Filters
            customFilter.Cluster = ""clusterDay""

            model.ClusterData(customFilter)

            for _, mod := range model {
                for sourceName, charts := range request.Charts {
                    output = formatOutput(output, sourceName, modelName, charts, mod, mod.Date)
                }
            }
        case ""aux"":
            model := models.AuxModel{}

            for _, el := range slice {
                newElement := newItem(modelName, el)
                model = append(model, *(newElement.(*models.AuxRow)))
            }
            customFilter := request.Filters
            customFilter.Cluster = ""clusterDay""

            model.ClusterData(customFilter)

            for _, mod := range model {
                for sourceName, charts := range request.Charts {
                    output = formatOutput(output, sourceName, modelName, charts, mod, mod.Date)
                }
            }
        case ""cti"":
            model := models.CtiModel{}

            for _, el := range slice {
                newElement := newItem(modelName, el)
                model = append(model, *(newElement.(*models.CtiRow)))
            }
            customFilter := request.Filters
            customFilter.Cluster = ""clusterDay""

            model.ClusterData(customFilter)

            for _, mod := range model {
                for sourceName, charts := range request.Charts {
                    output = formatOutput(output, sourceName, modelName, charts, mod, mod.Date)
                }
            }
        case ""srv"":
            model := models.SrvModel{}

            for _, el := range slice {
                newElement := newItem(modelName, el)
                model = append(model, *(newElement.(*models.SrvRow)))
            }
            customFilter := request.Filters
            customFilter.Cluster = ""clusterDay""

            model.ClusterData(customFilter)

            for _, mod := range model {
                for sourceName, charts := range request.Charts {
                    output = formatOutput(output, sourceName, modelName, charts, mod, mod.Date)
                }
            }
        case ""sale"":
            model := models.SaleModel{}

            for _, el := range slice {
                newElement := newItem(modelName, el)
                model = append(model, *(newElement.(*models.SaleRow)))
            }
            customFilter := request.Filters
            customFilter.Cluster = ""clusterDay""

            model.ClusterData(customFilter)

            for _, mod := range model {
                for sourceName, charts := range request.Charts {
                    output = formatOutput(output, sourceName, modelName, charts, mod, mod.Date)
                }
            }
        case ""pds"":
            model := models.PdsModel{}

            for _, el := range slice {
                newElement := newItem(modelName, el)
                model = append(model, *(newElement.(*models.PdsRow)))
            }
            customFilter := request.Filters
            customFilter.Cluster = ""clusterDay""

            model.ClusterData(customFilter)

            for _, mod := range model {
                for sourceName, charts := range request.Charts {
                    output = formatOutput(output, sourceName, modelName, charts, mod, mod.Date)
                }
            }
        case ""wfm"":
            model := models.WfmModel{}

            for _, el := range slice {
                newElement := newItem(modelName, el)
                model = append(model, *(newElement.(*models.WfmRow)))
            }
            customFilter := request.Filters
            customFilter.Cluster = ""clusterDay""

            model.ClusterData(customFilter)

            for _, mod := range model {
                for sourceName, charts := range request.Charts {
                    output = formatOutput(output, sourceName, modelName, charts, mod, mod.Date)
                }
            }
        }
    }

    return output
}
",8794
1157,39144961,receiveLightWork,16
1158,39311049,"E:\Desktop\ManBear\golang\src>go run main.go
# command-line-arguments
.\main.go:71: cannot use cmdHandler (type HelloWorldCommandHandler) as type CommandHandler in array or slice literal:
        HelloWorldCommandHandler does not implement CommandHandler (wrong type for Handle method)
                have Handle(HelloWorldCommand)
                want Handle(Command)
",370
1159,39311049,"func (ch HelloWorldCommandHandler) Handle(cmd Command) {
    fmt.Println(""HelloWorldCommandHandler handled the basic command with name --> "" + cmd.GetName())
}
",160
1160,39311049,"package main 

import (
    ""fmt""
    ""strconv""
)


type Command interface {
    GetName() string
}


type CommandHandler interface {
    Command
    Handle(cmd Command)
}


type HelloWorldCommand struct {
    Command
    Name string
    Age int
}

func (cmd HelloWorldCommand) GetName() string {
    return ""HelloWorldCommand""
}


type HelloWorldCommandHandler struct {
    CommandHandler
}

func (cmd HelloWorldCommandHandler) GetName() string {
    return ""HelloWorldCommand""
}

func (ch HelloWorldCommandHandler) Handle(cmd HelloWorldCommand) {
    fmt.Println(""Hello World! My name is "" + cmd.Name + "" and I'm "" + strconv.Itoa(cmd.Age) + "" years old!"")
}

type CommandHandlerManager struct {
    CommandHandlers []CommandHandler
}

func (chm CommandHandlerManager) Publish(cmd Command) {

    for _, cmdHandler := range chm.CommandHandlers {
        if cmd.GetName() == cmdHandler.GetName() {
            cmdHandler.Handle(cmd)
        }
    }
}


func main() {

    fmt.Println(""Hey my friend!"")

    cmd := HelloWorldCommand {Name: ""ManBear"", Age: 357}
    cmdHandler := HelloWorldCommandHandler {}

    fmt.Println(cmd.GetName())
    fmt.Println(cmdHandler.GetName())

    cmdHandler.Handle(cmd)

    cmdHandlerManager := CommandHandlerManager { 
        CommandHandlers: []CommandHandler { 
            cmdHandler, // <-- the error is here 
        },
    };
}
",1370
1161,39311049,"package main

import (
    ""fmt""
    ""strconv""
    ""time""
)


type Command interface {
    GetName() string
}


type CommandHandler interface {
    Command
    Handle(cmd Command)
}

const HelloWorldCommandName string = ""HelloWorldCommand""

type HelloWorldCommand struct {
    Command
    Name string
    Age int
}

func (cmd HelloWorldCommand) GetName() string {
    return HelloWorldCommandName
}

// Basic Hello World
type HelloWorldCommandHandler struct {
    CommandHandler
}

func (cmd HelloWorldCommandHandler) GetName() string {
    return HelloWorldCommandName
}

func (ch HelloWorldCommandHandler) Handle(cmd Command) {
    fmt.Println(""Hello World!\n----------------------------------------\n"")
}

// Hello World with Name and Age
type HelloWorldWithNameAndAgeCommandHandler struct {
    CommandHandler
}

func (cmd HelloWorldWithNameAndAgeCommandHandler) GetName() string {
    return HelloWorldCommandName
}

func (ch HelloWorldWithNameAndAgeCommandHandler) Handle(cmd Command) {
    var helloWorldCommand HelloWorldCommand = cmd.(HelloWorldCommand)
    fmt.Println(""Hello World! My name is "" + helloWorldCommand.Name + "" and I'm "" + strconv.Itoa(helloWorldCommand.Age) + "" years old!\n----------------------------------------\n"")
}


const TodayDateTimeCommandName string = ""TodayDateTimeCommand""

// Today's DateTime Command
type TodayDateTimeCommand struct {
    Command
    TimeZone string
}

func (cmd TodayDateTimeCommand) GetName() string {
    return TodayDateTimeCommandName
}


type TodayDateTimeCommandHandler struct {

}

func (ch TodayDateTimeCommandHandler) GetName() string {
    return TodayDateTimeCommandName
}

func (ch TodayDateTimeCommandHandler) Handle(cmd Command) {
    var todayCommand TodayDateTimeCommand = cmd.(TodayDateTimeCommand)
    location, err := time.LoadLocation(todayCommand.TimeZone)
    if err != nil {
        fmt.Errorf(""Could not load the Location of the TimeZone. %f"", err.Error())
        return
    }
    current_time := time.Now().In(location)
    fmt.Println(""Today's date and time is "" + current_time.String() + "" for the time zone: "" + todayCommand.TimeZone)
}


// The CommandHandler Manager
type CommandHandlerManager struct {
    CommandHandlers []CommandHandler
}

func (chm CommandHandlerManager) Publish(cmd Command) {

    for _, cmdHandler := range chm.CommandHandlers {
        if cmd.GetName() == cmdHandler.GetName() {
            cmdHandler.Handle(cmd)
        }
    }
}


func main() {

    fmt.Println(""Hey my friend!\n\n\n"")

    cmdHandlerManager := CommandHandlerManager {
        CommandHandlers: []CommandHandler {
            HelloWorldCommandHandler {},
            HelloWorldWithNameAndAgeCommandHandler {},
            TodayDateTimeCommandHandler {},
        },
    };

    cmd := HelloWorldCommand {Name: ""ManBear"", Age: 357}
    cmdHandlerManager.Publish(cmd)

    fmt.Println(""~~~~~~~~ other command published ~~~~~~~~~~~~~~~~~~~~~"")
    cmd2 := TodayDateTimeCommand{ TimeZone: ""America/Montreal"" }
    cmdHandlerManager.Publish(cmd2)
}
",3026
1162,39319481,"import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import org.json.JSONObject;

public class mid
{

    static String payload  ="""";
    public static void main (String[] args) throws Exception
  {
    try {
        @SuppressWarnings(""resource"")
        Scanner scanner = new Scanner(System.in);


         payload = scanner.nextLine();


        JSONObject obj = new JSONObject(payload);


        JSONObject response = obj.getJSONObject(""response"");

        response.remove(""status"");

        response.put(""status"", ""500"");



        String newjson = obj.toString();


         write (newjson);

        System.out.print(obj);


    } catch (Exception e) {
        e.printStackTrace();
    }



  }    
}
",791
1163,39319481,"./hoverfly -middleware ""java -jar mid.jar""
",43
1164,39319481,"{""response"":{""status"":200,""body"":""\u003c?xml version=\""1.0\""?\u003e\u003cpathList xmlns:xlink=\""http://www.w3.org/1999/xlink\""\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/0/\""\u003e0\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/1/\""\u003e1\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/3/\""\u003e3\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/4/\""\u003e4\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/5/\""\u003e5\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/6/\""\u003e6\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/7/\""\u003e7\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/8/\""\u003e8\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/9/\""\u003e9\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/10/\""\u003e10\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/11/\""\u003e11\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/12/\""\u003e12\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/13/\""\u003e13\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/14/\""\u003e14\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/15/\""\u003e15\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/16/\""\u003e16\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/17/\""\u003e17\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/18/\""\u003e18\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/19/\""\u003e19\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/20/\""\u003e20\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/21/\""\u003e21\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/22/\""\u003e22\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/23/\""\u003e23\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/25/\""\u003e25\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/26/\""\u003e26\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/27/\""\u003e27\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/28/\""\u003e28\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/29/\""\u003e29\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/30/\""\u003e30\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/31/\""\u003e31\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/32/\""\u003e32\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/33/\""\u003e33\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/34/\""\u003e34\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/35/\""\u003e35\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/36/\""\u003e36\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/37/\""\u003e37\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/38/\""\u003e38\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/39/\""\u003e39\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/40/\""\u003e40\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/41/\""\u003e41\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/42/\""\u003e42\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/43/\""\u003e43\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/44/\""\u003e44\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/45/\""\u003e45\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/46/\""\u003e46\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/47/\""\u003e47\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/48/\""\u003e48\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/49/\""\u003e49\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/50/\""\u003e50\u003c/path\u003e\n    \u003cpath xlink:href=\""http://www.testapi.com/endpoint/path/5555/\""\u003e5555\u003c/path\u003e\n\u003c/pathList\u003e"",""encodedBody"":false,""headers"":{""Content-Length"":[""4580""],""Content-Type"":[""application/xml""],""Date"":[""Fri, 02 Sep 2016 11:31:17 GMT""],""Hoverfly"":[""Was-Here""],""Server"":[""Apache-Coyote/1.1""]}},""request"":{""requestType"":""recording"",""path"":""/endpoint/path/"",""method"":""GET"",""destination"":""www.testapi.com"",""scheme"":""http"",""query"":"""",""body"":"""",""headers"":{""Accept"":[""text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8""],""Accept-Encoding"":[""gzip, deflate""],""Accept-Language"":[""en-US,sv-SE;q=0.8,sv;q=0.5,en;q=0.3""],""Connection"":[""keep-alive""],""User-Agent"":[""Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0""]}}}
",5642
1165,39319481,"{""response"":{""headers"":{""Hoverfly"":[""Was-Here""],""Date"":[""Fri, 02 Sep 2016 11:31:17 GMT""],""Content-Length"":[""4580""],""Content-Type"":[""application/xml""],""Server"":[""Apache-Coyote/1.1""]},""body"":""\n    0\n    1\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    18\n    19\n    20\n    21\n    22\n    23\n    25\n    26\n    27\n    28\n    29\n    30\n    31\n    32\n    33\n    34\n    35\n    36\n    37\n    38\n    39\n    40\n    41\n    42\n    43\n    44\n    45\n    46\n    47\n    48\n    49\n    50\n    5555\n"",""status"":""500"",""encodedBody"":false},""request"":{""headers"":{""Accept-Language"":[""en-US,sv-SE;q=0.8,sv;q=0.5,en;q=0.3""],""Accept-Encoding"":[""gzip, deflate""],""User-Agent"":[""Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0""],""Connection"":[""keep-alive""],""Accept"":[""text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8""]},""body"":"""",""scheme"":""http"",""query"":"""",""path"":""/path/endpoint/"",""method"":""GET"",""requestType"":""recording"",""destination"":""testapi""}}
",1074
1166,39319481,"""error"":""json: cannot unmarshal string into Go value of type int"",""level"":""error"",""msg"":""Failed to unmarshal JSON 
",115
1167,39333942,vendor/vendor.json,18
1168,39333942,"{
    ""comment"": """",
    ""heroku"": {
        ""goVersion"": ""go1.6"",
        ""install"": [
            "".""
        ]
    },
    ""ignore"": ""test"",
    ""package"": [
        {
            ""path"": ""context"",
            ""revision"": """"
        },
        {
            ""checksumSHA1"": ""eJQuyvuWx82bVvH0+b7a1AOQGqs="",
            ""path"": ""github.com/ChimeraCoder/anaconda"",
            ""revision"": ""00ecb7b4510497dc28cd46a598007ab8fe01f889"",
            ""revisionTime"": ""2016-06-04T23:38:44Z""
        },
        {
            ""checksumSHA1"": ""xE9Zo5ubzdEVBeRf+yD/ZjLALHk="",
            ""path"": ""github.com/ChimeraCoder/tokenbucket"",
            ""revision"": ""c5a927568de7aad8a58127d80bcd36ca4e71e454"",
            ""revisionTime"": ""2013-12-01T22:36:12Z""
        },
        {
            ""checksumSHA1"": ""3RgReu+42CU1EQ6afDsVSvBuPyk="",
            ""path"": ""github.com/azr/backoff"",
            ""revision"": ""53511d3c733003985b0b76f733df1f4d0095ee6a"",
            ""revisionTime"": ""2016-01-15T11:51:03Z""
        },
        {
            ""checksumSHA1"": ""bO0ErJXuVJ7s7DS4AJlN55op8cM="",
            ""path"": ""github.com/dghubble/oauth1"",
            ""revision"": ""d9f485600d309576dfa9764424f537e1f254d9a1"",
            ""revisionTime"": ""2016-08-21T06:27:25Z""
        },
        {
            ""checksumSHA1"": ""ycg56E+pTPAHToKMIj8C5SZ+WYQ="",
            ""path"": ""github.com/dustin/go-jsonpointer"",
            ""revision"": ""ba0abeacc3dcca5b9b20f31509c46794edbc9965"",
            ""revisionTime"": ""2016-08-14T07:29:49Z""
        },
        {
            ""checksumSHA1"": ""2138MttIW/b+UkA4YMYcTc6yzOU="",
            ""path"": ""github.com/dustin/gojson"",
            ""revision"": ""2e71ec9dd5adce3b168cd0dbde03b5cc04951c30"",
            ""revisionTime"": ""2016-03-07T16:12:27Z""
        },
        {
            ""checksumSHA1"": ""PYBCaIzh3RFkxtkkP8x4XCEYLCg="",
            ""path"": ""github.com/garyburd/go-oauth/oauth"",
            ""revision"": ""719b069913e1151a73ea30d2ea4f90deda3ce234"",
            ""revisionTime"": ""2016-04-12T16:13:20Z""
        },
        {
            ""checksumSHA1"": ""mOUDsWfYLlh8f6ekwyIUo3+4xJI="",
            ""path"": ""goji.io"",
            ""revision"": ""e355964ac565b94cf0fc7f218346626529125086"",
            ""revisionTime"": ""2016-05-07T21:13:57Z""
        },
        {
            ""checksumSHA1"": ""Jf3C/refSMB2wVYGp1pssKXVNcI="",
            ""path"": ""goji.io/internal"",
            ""revision"": ""e355964ac565b94cf0fc7f218346626529125086"",
            ""revisionTime"": ""2016-05-07T21:13:57Z""
        },
        {
            ""checksumSHA1"": ""gHp/Mv7vgZWs7iq/F0YHnWgEotQ="",
            ""path"": ""goji.io/pat"",
            ""revision"": ""e355964ac565b94cf0fc7f218346626529125086"",
            ""revisionTime"": ""2016-05-07T21:13:57Z""
        },
        {
            ""checksumSHA1"": ""z2zVlHamw4ufyuSaf49reuusrmg="",
            ""path"": ""goji.io/pattern"",
            ""revision"": ""e355964ac565b94cf0fc7f218346626529125086"",
            ""revisionTime"": ""2016-05-07T21:13:57Z""
        },
        {
            ""checksumSHA1"": ""9jjO5GjLa0XF/nfWihF02RoH4qc="",
            ""path"": ""golang.org/x/net/context"",
            ""revision"": ""6c89f9617983ee917132513a791d8b5850fe90c5"",
            ""revisionTime"": ""2016-08-24T21:03:21Z""
        }
    ],
    ""rootPath"": ""thinkwire.com/thw1""
}
",3250
1169,39333942,"$ govendor fetch lib/pq
panic: Empty package path

goroutine 1 [running]:
panic(0x4b9c20, 0xc8200123e0)
    /usr/local/Cellar/go/1.6.2/libexec/src/runtime/panic.go:481 +0x3e6
github.com/kardianos/govendor/context.(*Context).setPackage(0xc820122000, 0xc820326420, 0x26, 0xc82029d5a0, 0x0, 0xc82029d5a0, 0x0, 0xc820112060, 0x26, 0x10201, ...)
    $GOPATH/src/github.com/kardianos/govendor/context/resolve.go:335 +0x8ba
github.com/kardianos/govendor/context.(*Context).addSingleImport(0xc820122000, 0xc8203189c0, 0x2b, 0xc82029d5a0, 0x0, 0x0, 0x0, 0x0, 0x0)
    $GOPATH/src/github.com/kardianos/govendor/context/resolve.go:383 +0x457
github.com/kardianos/govendor/context.(*Context).addFileImports(0xc820122000, 0xc8203189c0, 0x30, 0xc820118080, 0x15, 0x27, 0x0, 0x0)
    $GOPATH/src/github.com/kardianos/govendor/context/resolve.go:251 +0x13e8
github.com/kardianos/govendor/context.(*Context).loadPackage.func1(0xc8203189c0, 0x30, 0xda5950, 0xc820312820, 0x0, 0x0, 0x0, 0x0)
    $GOPATH/src/github.com/kardianos/govendor/context/resolve.go:55 +0x150
github.com/kardianos/govendor/internal/vfilepath.walk(0xc8203189c0, 0x30, 0xda5950, 0xc820312820, 0xc820118780, 0x0, 0x0)
    $GOPATH/src/github.com/kardianos/govendor/internal/vfilepath/walk.go:19 +0x80
github.com/kardianos/govendor/internal/vfilepath.walk(0xc8203188a0, 0x2a, 0xda5950, 0xc820312680, 0xc820118780, 0x0, 0x0)
    $GOPATH/src/github.com/kardianos/govendor/internal/vfilepath/walk.go:44 +0x4f5
github.com/kardianos/govendor/internal/vfilepath.walk(0xc820112990, 0x27, 0xda5950, 0xc820134680, 0xc820118780, 0x0, 0x0)
    $GOPATH/src/github.com/kardianos/govendor/internal/vfilepath/walk.go:44 +0x4f5
github.com/kardianos/govendor/internal/vfilepath.Walk(0xc820112990, 0x27, 0xc820118780, 0x0, 0x0)
    $GOPATH/src/github.com/kardianos/govendor/internal/vfilepath/walk.go:82 +0xe1
github.com/kardianos/govendor/context.(*Context).loadPackage(0xc820122000, 0x0, 0x0)
    $GOPATH/src/github.com/kardianos/govendor/context/resolve.go:72 +0x19a
github.com/kardianos/govendor/context.(*Context).modify(0xc820122000, 0xc820120140, 0x7fff5fbff804, 0xc8200f77e5, 0x0, 0x3, 0x0, 0x0)
    $GOPATH/src/github.com/kardianos/govendor/context/modify.go:232 +0xfcf
github.com/kardianos/govendor/context.(*Context).ModifyImport(0xc820122000, 0xc820120140, 0xc82000a204, 0xc8200f77e5, 0x0, 0x3, 0x0, 0x0)
    $GOPATH/src/github.com/kardianos/govendor/context/modify.go:183 +0x23b
github.com/kardianos/govendor/run.(*runner).Modify(0xc8200f7d50, 0xda51c0, 0xc82002a010, 0xc82000a260, 0x1, 0x1, 0x81de04, 0xda5808, 0xc8200f7db7, 0x12ec8, ...)
    $GOPATH/src/github.com/kardianos/govendor/run/modify.go:105 +0x9e7
github.com/kardianos/govendor/run.(*runner).run(0xc8200f7d50, 0xda51c0, 0xc82002a010, 0xc82000a240, 0x3, 0x3, 0xda5808, 0xc8200f7db7, 0xda5808, 0x0, ...)
    $GOPATH/src/github.com/kardianos/govendor/run/run.go:83 +0x662
github.com/kardianos/govendor/run.Run(0xda51c0, 0xc82002a010, 0xc82000a240, 0x3, 0x3, 0xda5808, 0xc8200f7db7, 0x0, 0x0, 0x0)
    $GOPATH/src/github.com/kardianos/govendor/run/run.go:41 +0x95
main.main()
    $GOPATH/src/github.com/kardianos/govendor/main.go:35 +0x453
",3144
1170,39341513,go vet ./...,12
1171,39341513,"% go version 
go version go1.6.2 darwin/amd64 
% go vet ./... 
% go version 
go version go1.7beta1 darwin/amd64 
% go vet ./... panic: inconsistent import:
    var crypto/rand.Reader io.Reader previously imported as:
    var Reader io.Reader  [recovered]
    panic: inconsistent import:
    var crypto/rand.Reader io.Reader previously imported as:
    var Reader io.Reader


goroutine 1 [running]: panic(0x25f720, 0xc4203fc1f0)
    /usr/local/go/src/runtime/panic.go:500 +0x1a1 go/types.(*Checker).handleBailout(0xc4200b61c0, 0xc4200c78e8)
    /usr/local/go/src/go/types/check.go:213 +0xae panic(0x25f720, 0xc4203fc1f0)
    /usr/local/go/src/runtime/panic.go:458 +0x243 go/internal/gcimporter.(*importer).declare(0xc42008e000, 0x3d81c0, 0xc4203ea5f0)
    /usr/local/go/src/go/internal/gcimporter/bimport.go:173 +0x17c go/internal/gcimporter.(*importer).obj(0xc42008e000, 0xfffffffffffffffc)
    /usr/local/go/src/go/internal/gcimporter/bimport.go:193 +0x1af go/internal/gcimporter.BImportData(0xc42000af00, 0xc420334000, 0x703e, 0x7e00, 0xc420166a51, 0xb, 0x0, 0xb, 0xc4203f4ff0, 0xc4200c70c8)
    /usr/local/go/src/go/internal/gcimporter/bimport.go:86 +0x34c go/internal/gcimporter.Import(0xc42000af00, 0xc420166a51, 0xb, 0x7fff5fbff610, 0x8, 0xc420320190, 0x0, 0x0)
    /usr/local/go/src/go/internal/gcimporter/gcimporter.go:166 +0x551 go/importer.gcimports.ImportFrom(0xc42000af00, 0xc420166a51, 0xb, 0x7fff5fbff610, 0x8, 0x0, 0xc4202d55e0, 0x0, 0x0)
    /usr/local/go/src/go/importer/importer.go:70 +0x67 go/types.(*Checker).collectObjects(0xc4200b61c0)
    /usr/local/go/src/go/types/resolver.go:191 +0x81d go/types.(*Checker).checkFiles(0xc4200b61c0, 0xc42018b600, 0x2, 0x2, 0x0, 0x0)
    /usr/local/go/src/go/types/check.go:225 +0xaa go/types.(*Checker).Files(0xc4200b61c0, 0xc42018b600, 0x2, 0x2, 0xc420192a80, 0xc4200cb960)
    /usr/local/go/src/go/types/check.go:218 +0x49 go/types.(*Config).Check(0xc42018d9c0, 0xc420015817, 0x5, 0xc420013f00, 0xc42018b600, 0x2, 0x2, 0xc420187400, 0x45e000, 0x0, ...)
    /usr/local/go/src/go/types/api.go:344 +0x19f main.(*Package).check(0xc42001a8a0, 0xc420013f00, 0xc42018b600, 0x2, 0x2, 0xc42018b610, 0x1)
    /usr/local/go/src/cmd/vet/types.go:76 +0x36c main.doPackage(0x2b769c, 0x1, 0xc42000a220, 0x2, 0x2, 0x0)
    /usr/local/go/src/cmd/vet/main.go:333 +0x992 main.main()
    /usr/local/go/src/cmd/vet/main.go:241 +0x335 exit status 2 panic: inconsistent import:
    var time.UTC *time.Location previously imported as:
    var UTC *time.Location  [recovered]
    panic: inconsistent import:
    var time.UTC *time.Location previously imported as:
    var UTC *time.Location


goroutine 1 [running]: panic(0x25f720, 0xc420141b10)
    /usr/local/go/src/runtime/panic.go:500 +0x1a1 go/types.(*Checker).handleBailout(0xc4200ce1c0, 0xc42004b8d8)
    /usr/local/go/src/go/types/check.go:213 +0xae panic(0x25f720, 0xc420141b10)
    /usr/local/go/src/runtime/panic.go:458 +0x243 go/internal/gcimporter.(*importer).declare(0xc4200a2cc0, 0x3d81c0, 0xc4205f6d70)
    /usr/local/go/src/go/internal/gcimporter/bimport.go:173 +0x17c go/internal/gcimporter.(*importer).obj(0xc4200a2cc0, 0xfffffffffffffffc)
    /usr/local/go/src/go/internal/gcimporter/bimport.go:193 +0x1af go/internal/gcimporter.BImportData(0xc42007ae40, 0xc42035a000, 0x3a210, 0x3fe00, 0xc42007995b, 0x4, 0x0, 0x4, 0xc4201392f0, 0xc42004b0b8)
    /usr/local/go/src/go/internal/gcimporter/bimport.go:86 +0x34c go/internal/gcimporter.Import(0xc42007ae40, 0xc42007995b, 0x4, 0x7fff5fbff598, 0x7, 0xc4205b7040, 0x0, 0x0)
    /usr/local/go/src/go/internal/gcimporter/gcimporter.go:166 +0x551 go/importer.gcimports.ImportFrom(0xc42007ae40, 0xc42007995b, 0x4, 0x7fff5fbff598, 0x7, 0x0, 0xc42017ec80, 0x0, 0x0)
    /usr/local/go/src/go/importer/importer.go:70 +0x67 go/types.(*Checker).collectObjects(0xc4200ce1c0)
    /usr/local/go/src/go/types/resolver.go:191 +0x81d go/types.(*Checker).checkFiles(0xc4200ce1c0, 0xc42018b600, 0x8, 0x8, 0x0, 0x0)
    /usr/local/go/src/go/types/check.go:225 +0xaa go/types.(*Checker).Files(0xc4200ce1c0, 0xc42018b600, 0x8, 0x8, 0xc420199800, 0xc4200e3960)
    /usr/local/go/src/go/types/check.go:218 +0x49 go/types.(*Config).Check(0xc420193cc0, 0xc420079667, 0x7, 0xc420095c00, 0xc42018b600, 0x8, 0x8, 0xc420194b40, 0x45e4b0, 0x0, ...)
    /usr/local/go/src/go/types/api.go:344 +0x19f main.(*Package).check(0xc420076a80, 0xc420095c00, 0xc42018b600, 0x8, 0x8, 0x0, 0xc4200b9980)
    /usr/local/go/src/cmd/vet/types.go:76 +0x36c main.doPackage(0x2b769c, 0x1, 0xc420098010, 0x8, 0x8, 0x0)
    /usr/local/go/src/cmd/vet/main.go:333 +0x992 main.main()
    /usr/local/go/src/cmd/vet/main.go:241 +0x335 exit status 2 panic: inconsistent import:
    func errors.New(text string) error previously imported as:
    func errors.New(text string) error  [recovered]
    panic: inconsistent import:
    func errors.New(text string) error previously imported as:
    func errors.New(text string) error


goroutine 1 [running]: panic(0x25f720, 0xc4203f73c0)
    /usr/local/go/src/runtime/panic.go:500 +0x1a1 go/types.(*Checker).handleBailout(0xc4200b61c0, 0xc4200c98e8)
    /usr/local/go/src/go/types/check.go:213 +0xae panic(0x25f720, 0xc4203f73c0)
    /usr/local/go/src/runtime/panic.go:458 +0x243 go/internal/gcimporter.(*importer).declare(0xc4204b60c0, 0x3d7ea0, 0xc4203fe460)
    /usr/local/go/src/go/internal/gcimporter/bimport.go:173 +0x17c go/internal/gcimporter.(*importer).obj(0xc4204b60c0, 0xfffffffffffffffb)
    /usr/local/go/src/go/internal/gcimporter/bimport.go:201 +0x49d go/internal/gcimporter.BImportData(0xc420014ea0, 0xc420406000, 0xb62, 0xe00, 0xc420169771, 0x6, 0x0, 0x6, 0x10, 0x10)
    /usr/local/go/src/go/internal/gcimporter/bimport.go:86 +0x34c go/internal/gcimporter.Import(0xc420014ea0, 0xc420169771, 0x6, 0x7fff5fbff5f0, 0x5, 0xc420430f00, 0x0, 0x0)
    /usr/local/go/src/go/internal/gcimporter/gcimporter.go:166 +0x551 go/importer.gcimports.ImportFrom(0xc420014ea0, 0xc420169771, 0x6, 0x7fff5fbff5f0, 0x5, 0x0, 0x1, 0x2, 0x0)
    /usr/local/go/src/go/importer/importer.go:70 +0x67 go/types.(*Checker).collectObjects(0xc4200b61c0)
    /usr/local/go/src/go/types/resolver.go:191 +0x81d go/types.(*Checker).checkFiles(0xc4200b61c0, 0xc42017df00, 0x4, 0x4, 0x0, 0x0)
    /usr/local/go/src/go/types/check.go:225 +0xaa go/types.(*Checker).Files(0xc4200b61c0, 0xc42017df00, 0x4, 0x4, 0xc420192360, 0xc4200c9960)
    /usr/local/go/src/go/types/check.go:218 +0x49 go/types.(*Config).Check(0xc42018b700, 0xc420017837, 0x5, 0xc420013e80, 0xc42017df00, 0x4, 0x4, 0xc42017fdb0, 0x45e000, 0x0, ...)
    /usr/local/go/src/go/types/api.go:344 +0x19f main.(*Package).check(0xc42001a960, 0xc420013e80, 0xc42017df00, 0x4, 0x4, 0x0, 0xc420011880)
    /usr/local/go/src/cmd/vet/types.go:76 +0x36c main.doPackage(0x2b769c, 0x1, 0xc42000a1a0, 0x4, 0x4, 0x0)
    /usr/local/go/src/cmd/vet/main.go:333 +0x992 main.main()
    /usr/local/go/src/cmd/vet/main.go:241 +0x335 exit status 2
",6906
1172,39404625,"

gc 440 @51045.897s 0%: 0.034+4182+0.96 ms clock, 0.13+0/4182/12246+3.8 ms cpu, 4304->4309->4143 MB, 8266 MB goal, 4 P
scvg340: inuse: 4404, idle: 15, sys: 4419, released: 0, consumed: 4419 (MB)
GC forced
gc 441 @51170.096s 0%: 3.7+4355+1.4 ms clock, 14+2.9/4357/12795+5.8 ms cpu, 4317->4323->4158 MB, 8287 MB goal, 4 P
GC forced
gc 442 @51294.460s 0%: 0.034+3987+1.2 ms clock, 0.13+1.5/3987/11701+4.9 ms cpu, 4336->4341->4169 MB, 8316 MB goal, 4 P
scvg341: inuse: 4318, idle: 133, sys: 4451, released: 0, consumed: 4451 (MB)
GC forced
gc 443 @51418.451s 0%: 0.36+3925+0.99 ms clock, 1.4+4.0/3925/11554+3.9 ms cpu, 4350->4356->4182 MB, 8338 MB goal, 4 P
scvg342: inuse: 4363, idle: 103, sys: 4466, released: 0, consumed: 4466 (MB)
GC forced
gc 444 @51542.394s 0%: 0.042+3986+1.6 ms clock, 0.16+0/3981/11757+6.5 ms cpu, 4361->4367->4194 MB, 8365 MB goal, 4 P
scvg343: inuse: 4404, idle: 74, sys: 4478, released: 0, consumed: 4478 (MB)
GC forced
gc 445 @51666.384s 0%: 3.4+3987+1.4 ms clock, 13+2.5/3986/11747+5.7 ms cpu, 4375->4382->4208 MB, 8388 MB goal, 4 P
scvg344: inuse: 4454, idle: 39, sys: 4493, released: 0, consumed: 4493 (MB)
GC forced
gc 446 @51790.379s 0%: 0.055+4147+1.5 ms clock, 0.22+0/4139/12125+6.2 ms cpu, 4396->4402->4220 MB, 8416 MB goal, 4 P
scvg345: inuse: 4509, idle: 5, sys: 4514, released: 0, consumed: 4514 (MB)
GC forced
gc 447 @51914.542s 0%: 0.052+4205+2.1 ms clock, 0.21+1.5/4199/12348+8.5 ms cpu, 4413->4420->4234 MB, 8441 MB goal, 4 P
GC forced
gc 448 @52038.752s 0%: 2.7+4517+1.8 ms clock, 11+2.3/4517/13245+7.2 ms cpu, 4428->4436->4247 MB, 8469 MB goal, 4 P
scvg346: inuse: 4406, idle: 142, sys: 4548, released: 0, consumed: 4548 (MB)
GC forced
gc 449 @52163.276s 0%: 0.033+4206+1.3 ms clock, 0.13+0/4206/12306+5.3 ms cpu, 4442->4449->4259 MB, 8495 MB goal, 4 P
scvg347: inuse: 4452, idle: 109, sys: 4561, released: 0, consumed: 4561 (MB)
GC forced
gc 450 @52287.491s 0%: 0.044+4262+2.0 ms clock, 0.17+0/4261/12565+8.2 ms cpu, 4452->4459->4272 MB, 8519 MB goal, 4 P
scvg348: inuse: 4498, idle: 74, sys: 4572, released: 0, consumed: 4572 (MB)
GC forced
gc 451 @52411.769s 0%: 0.028+4012+2.0 ms clock, 0.11+0.066/3992/11762+8.0 ms cpu, 4471->4477->4285 MB, 8544 MB goal, 4 P
scvg349: inuse: 4550, idle: 40, sys: 4590, released: 0, consumed: 4590 (MB)

",2284
1173,39404625,"func (c *CometServer) initHTTPServer() {

jwtMiddleware := jwtmiddleware.New(jwtmiddleware.Options{
        SigningMethod: jwt.SigningMethodHS256,
        ValidationKeyGetter: func(token *jwt.Token) (interface{}, error) {
                return []byte(setting.JwtSecret), nil
        },

        // get token from header, querystring, and cookie
        Extractor: jwtmiddleware.FromFirst(
                jwtmiddleware.FromParameter(setting.JwtTokenQueryStringField),
                TokenFromCookie(setting.JwtTokenCookieField),
                jwtmiddleware.FromAuthHeader,
        ),
        ErrorHandler: jwtErrorHandler,
})

r := mux.NewRouter()
// Must call cotext.Clear after every request follow
r.KeepContext = true

socketHandler := jwtMiddleware.Handler(c.socketio)

r.Handle(""/socket.io/"", socketHandler)

if setting.DEBUG {
        r.PathPrefix(""/debug/"").Handler(http.DefaultServeMux)
        r.PathPrefix(""/"").Handler(http.FileServer(http.Dir(""./asset/"")))
}

// n.UseHandler(r)

c.httpServer = &http.Server{
        Addr:    setting.HTTPListenAddr,
        Handler: r,
}
",1088
1174,39404625,"// ....

server.On(""error"", func(so socketio.Socket, err error) {
        logger := SocketLogger(so)
        logger.Error(""socket connect error"")
})
",149
1175,39404625,"        var (
                uid   string
                exist bool
        )

        logger := SocketLogger(so)

        claim := (context.Get(so.Request(), ""user"")).(*jwt.Token).Claims
        // after get the claims, should clear the request context
        context.Clear(so.Request())

        var rawUID interface{}
        if user, ok := claim.(jwt.MapClaims); ok {
                if rawUID, ok = user[setting.JwtUserClaimField]; !ok {
                        logger.Error(""invalid user claim"")
                        so.Emit(""disconnect"", ""invalid user claim"")
                }
        } else {
                logger.Errorf(""invalid jwt claim %s"", claim)
                so.Emit(""disconnect"", ""invalid user claim"")
        }

        if uid, exist = rawUID.(string); exist {
                // Multi connection for same user will be join to the same room
                so.Join(uid)

                // root for broadcast all user
                so.Join(Hourse)

                c.users.Add(uid, 1)

                logger.Debug(""socket connected"")

                if setting.DEBUG {
                        so.Emit(""debug"", fmt.Sprintf(""Your uid is %s, sid is %s"", uid, so.Id()))
                }
        } else {
                so.Emit(""disconnect"", ""invalid user claim"")
        }

        so.On(""debug"", func(data string) {
                log.Debugf(""debug data from client %s"", data)
        })

        so.On(""disconnection"", func(data string) {
                logger.Debugf(""socket disconnected"")
                c.users.Add(uid, -1)
        })
})
c.socketio = server

return nil
",1608
1176,39422084,"curl -XPOST 'http://supersecreturl/mypost' -d '[{""i sware to ritchie"":""this json is 100 percent valid""},{""i can even"":""copy and paste it into a curl POST request and receive it flawlessly on the remote side""}]'",210
1177,39422084,"/// Here is approximately my code - had to remove the valid url and the JSON content



func PutArticlesJSON(c appengine.Context, articles []*Articlez) (*http.Response){                                                                      

url := ""http://mysecreturl/mypost""                                                                                                            
client := urlfetch.Client(c)                                                                                                                       
jsonarts, _ := json.Marshal(articles)                                                                                                              
c.Debugf("" --- What do we have - %v"", string(jsonarts)) /// the appengine log shows exactly valid json at this point, such as:                                   
/*                                                                                                                                                 
 [{""i sware to ritchie"":""this json is 100 percent valid""},{""i can even"":""copy and paste it into a curl POST request and receive it flawless on the remote side""}]      
*/                                                                                                                                                 

// tried this way too....                                                                                                                          
//req, err := http.NewRequest(""POST"", url,     strings.NewReader(string(jsonarts)))                                                                    
//                                                                                                                                                 
req, err := http.NewRequest(""POST"", url, bytes.NewBuffer(string(jsonStr)))       /// on the receiving side, the payload is completely empty no matter what I try                                                                  
req.Header.Set(""Content-Type"", ""application/json"")                                                                                                 

resp, err := client.Do(req)                                                                                                                        
if err != nil {                                                                                                                                    
    panic(err)                                                                                                                                     
}                                                                                                                                                  
defer resp.Body.Close()                                                                                                                            


body, _ := ioutil.ReadAll(resp.Body)                                                                                                               

return resp                                                                                                                                        
}
",3172
1178,39422084,"#!/usr/bin/env python                                                                                                                              
#                                                                                                                                                  
from flask import Flask                                                                                                                            
from flask import request                                                                                                                          
import urllib                                                                                                                                                                                                                                                         
import json                                                                                                                                        


app = Flask(__name__)                                                                                                                              

@app.route('/mypost', methods = ['GET','POST'])                                                                                                     
def esput():                                                                                                                                       
    datapack = request.form                                                                                                                        
    datastream = request.stream                                                                                                                    
    with open(""/tmp/log"", ""a"") as myf:                                                                                                             
        myf.write(str(datastream))                                                                                                                 
        myf.write(str(datapack))                                                                                                                   
        myf.write(""\n"")                                                                                                                                                                                                                              
    return ""all good""                                                                                                                              


if __name__ == '__main__':                                                                                                                         
    app.run(threaded=True,host='0.0.0.0',port='333',debug=False)         
",2809
1179,39437216,"package main

import (
    ""database/sql""
    ""encoding/json""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
    ""net/http""
    ""reflect""
    ""strings""
)

func main() {
    db, err := sql.Open(""mysql"", ""***:****@tcp(****:3306)/****"")
    fmt.Println(reflect.TypeOf(db))
    checkErr(err)
    fmt.Println(""Handle Request setup... OK"")
    http.HandleFunc(""/"", func(w http.ResponseWriter, req *http.Request) {

        jsonData, err := getListings(db)
        checkErr(err)

        w.Write([]byte(jsonData))

    })
    fmt.Println(""Starting Server...."")
    fmt.Println(""Listening on port 8081"")
    http.ListenAndServe("":8081"", nil)

}

func getListings(db *sql.DB) ([]byte, error) {
    var userId string = ""142""

    normalListings := sqlToArray(db, `******`)

    manualListings := sqlToArray(db, ""******"")

    var groupIds []string
    for key := range manualListings {

        groupId := ""142,"" + manualListings[key][""group_id""]
        if !stringInSlice(groupId, groupIds) {
            groupIds = append(groupIds, groupId)
        }
    }

    var groupIdsString string
    groupIdsString = strings.Join(groupIds, "", "")

    manualGroups := sqlToArray(db, ""*****"")

    for key := range manualListings {

        for key2 := range manualGroups {
            groupId := ""142,"" + manualListings[key][""group_id""]

            if groupId == manualGroups[key][""ticket_id""] {
                entry := make(map[string]string)
                entry[""ticket_id""] = manualListings[key][""listing_id""]
                entry[""date_created""] = manualGroups[key2][""date_created""]
                normalListings = append(normalListings, entry)

            }
        }
    }

    return json.Marshal(normalListings)

}

func stringInSlice(a string, list []string) bool {
    for _, b := range list {
        if b == a {
            return true
        }
    }
    return false
}

func sqlToArray(db *sql.DB, sqlString string) []map[string]string {

    rows, err := db.Query(sqlString)
    checkErr(err)
    columns, err := rows.Columns()
    count := len(columns)
    values := make([]interface{}, count)
    valuePtrs := make([]interface{}, count)
    tableData := make([]map[string]string, 0)

    for rows.Next() {

        for i := 0; i < count; i++ {
            valuePtrs[i] = &values[i]
        }
        rows.Scan(valuePtrs...)
        entry := make(map[string]string)
        for i, col := range columns {

            val := values[i]
            b, ok := val.([]byte)
            if ok {
                entry[col] = string(b)
            } else {
                entry[col] = string(b)
            }

        }
        tableData = append(tableData, entry)

    }

    return tableData

}

func checkErr(err error) {
    if err != nil {
        panic(err)
    }
}
",2772
1180,39437216,"package main

import (
    ""database/sql""
    ""encoding/json""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
    ""net/http""
    ""strings""
)

type listingsType struct {
    TicketId    string
    DateCreated string
}

func main() {
    db, err := sql.Open(""mysql"", ""******"")

    checkErr(err)
    fmt.Println(""Handle Request setup... OK"")
    http.HandleFunc(""/"", func(w http.ResponseWriter, req *http.Request) {

        jsonData, err := getListings(db)
        checkErr(err)

        w.Write([]byte(jsonData))

    })
    fmt.Println(""Starting Server...."")
    fmt.Println(""Listening on port 8081"")
    http.ListenAndServe("":8081"", nil)

}

func getListings(db *sql.DB) ([]byte, error) {
    var userId string = ""142""

    normalListings := sqlToArray(db, `*****`)

    manualListings := sqlToArray(db, ""*****"")

    var groupIds []string

    for _, elem := range manualListings {
        groupId := ""142,"" + elem.DateCreated
        if !stringInSlice(groupId, groupIds) {
            groupIds = append(groupIds, groupId)
        }

    }

    var groupIdsString string
    groupIdsString = strings.Join(groupIds, "", "")
    fmt.Println(groupIdsString)
    manualGroups := sqlToArray(db, ""******"")

    for _, manualList := range manualListings {

        for _, manualGroup := range manualGroups {
            groupId := ""142,"" + manualList.DateCreated

            if groupId == manualGroup.TicketId {
                var entry listingsType
                entry.TicketId = manualList.TicketId
                entry.DateCreated = manualGroup.DateCreated
                normalListings = append(normalListings, entry)

            }
        }
    }

    return json.Marshal(normalListings)

}

func stringInSlice(a string, list []string) bool {
    for _, b := range list {
        if b == a {
            return true
        }
    }
    return false
}

func sqlToArray(db *sql.DB, sqlString string) []listingsType {

    rows, err := db.Query(sqlString)
    checkErr(err)

    tableData := []listingsType{}

    for rows.Next() {

        var entry listingsType
        rows.Scan(&entry.TicketId, &entry.DateCreated)

        tableData = append(tableData, entry)

    }

    return tableData

}

func checkErr(err error) {
    if err != nil {
        panic(err)
    }
}
",2276
1181,39437216,"for _, manualList := range manualListings {

        for _, manualGroup := range manualGroups {
            groupId := ""142,"" + manualList.DateCreated

            if groupId == manualGroup.TicketId {
                var entry listingsType
                entry.TicketId = manualList.TicketId
                entry.DateCreated = manualGroup.DateCreated
                normalListings = append(normalListings, entry)

            }
        }
    }
",447
1182,39502310,"TEXT ·CountBitsUint64PopCnt(SB),NOSPLIT,$0
    POPCNTQ    x+0(FP), AX
    MOVQ       AX, ret+8(FP)
    RET
",108
1183,39502310,"const (
    m1q uint64 = 0x5555555555555555
    m2q        = 0x3333333333333333
    m4q        = 0x0f0f0f0f0f0f0f0f
    hq         = 0x0101010101010101
)

func CountBitsUint64(x uint64) int {
    x -= (x >> 1) & m1q              // put count of each 2 bits into those 2 bits
    x = (x & m2q) + ((x >> 2) & m2q) // put count of each 4 bits into those 4 bits
    x = (x + (x >> 4)) & m4q         // put count of each 8 bits into those 8 bits
    return int((x * hq) >> 56)       // returns left 8 bits of x + (x<<8) + (x<<16) + (x<<24) + ...
}
",543
1184,39502310,go tool compile -S popcount.go,30
1185,39502310,""""".CountBitsUint64 t=1 size=101 args=0x10 locals=0x0
    0x0000 00000 (popcount.go:81)   TEXT    """".CountBitsUint64(SB), $0-16
    0x0000 00000 (popcount.go:81)   NOP
    0x0000 00000 (popcount.go:81)   NOP
    0x0000 00000 (popcount.go:81)   FUNCDATA    $0, gclocals·23e8278e2b69a3a75fa59b23c49ed6ad(SB)
    0x0000 00000 (popcount.go:81)   FUNCDATA    $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
    0x0000 00000 (popcount.go:82)   MOVQ    """".x+8(FP), AX
    0x0005 00005 (popcount.go:82)   MOVQ    AX, CX
    0x0008 00008 (popcount.go:82)   SHRQ    $1, AX
    0x000b 00011 (popcount.go:82)   MOVQ    $6148914691236517205, DX
    0x0015 00021 (popcount.go:82)   ANDQ    DX, AX
    0x0018 00024 (popcount.go:82)   SUBQ    AX, CX
    0x001b 00027 (popcount.go:83)   MOVQ    $3689348814741910323, AX
    0x0025 00037 (popcount.go:83)   MOVQ    CX, DX
    0x0028 00040 (popcount.go:83)   ANDQ    AX, CX
    0x002b 00043 (popcount.go:83)   SHRQ    $2, DX
    0x002f 00047 (popcount.go:83)   ANDQ    AX, DX
    0x0032 00050 (popcount.go:83)   LEAQ    (CX)(DX*1), AX
    0x0036 00054 (popcount.go:84)   MOVQ    AX, CX
    0x0039 00057 (popcount.go:84)   SHRQ    $4, AX
    0x003d 00061 (popcount.go:84)   ADDQ    CX, AX
    0x0040 00064 (popcount.go:84)   MOVQ    $1085102592571150095, CX
    0x004a 00074 (popcount.go:84)   ANDQ    CX, AX
    0x004d 00077 (popcount.go:85)   MOVQ    $72340172838076673, CX
    0x0057 00087 (popcount.go:85)   IMULQ   AX, CX
    0x005b 00091 (popcount.go:85)   SHRQ    $56, CX
    0x005f 00095 (popcount.go:85)   MOVQ    CX, """".~r1+16(FP)
    0x0064 00100 (popcount.go:85)   RET
    0x0000 48 8b 44 24 08 48 89 c1 48 d1 e8 48 ba 55 55 55  H.D$.H..H..H.UUU
    0x0010 55 55 55 55 55 48 21 d0 48 29 c1 48 b8 33 33 33  UUUUUH!.H).H.333
    0x0020 33 33 33 33 33 48 89 ca 48 21 c1 48 c1 ea 02 48  33333H..H!.H...H
    0x0030 21 c2 48 8d 04 11 48 89 c1 48 c1 e8 04 48 01 c8  !.H...H..H...H..
    0x0040 48 b9 0f 0f 0f 0f 0f 0f 0f 0f 48 21 c8 48 b9 01  H.........H!.H..
    0x0050 01 01 01 01 01 01 01 48 0f af c8 48 c1 e9 38 48  .......H...H..8H
    0x0060 89 4c 24 10 c3
"""".CountBitsUint64Alt t=1 size=142 args=0x10 locals=0x0
    0x0000 00000 (popcount.go:88)   TEXT    """".CountBitsUint64Alt(SB), $0-16
    0x0000 00000 (popcount.go:88)   NOP
    0x0000 00000 (popcount.go:88)   NOP
    0x0000 00000 (popcount.go:88)   FUNCDATA    $0, gclocals·23e8278e2b69a3a75fa59b23c49ed6ad(SB)
    0x0000 00000 (popcount.go:88)   FUNCDATA    $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
    0x0000 00000 (popcount.go:89)   MOVQ    """".x+8(FP), AX
    0x0005 00005 (popcount.go:89)   MOVQ    AX, CX
    0x0008 00008 (popcount.go:89)   SHRQ    $32, AX
    0x000c 00012 (popcount.go:89)   MOVQ    AX, DX
    0x000f 00015 (popcount.go:89)   SHRL    $1, AX
    0x0011 00017 (popcount.go:89)   ANDL    $1431655765, AX
    0x0016 00022 (popcount.go:89)   SUBL    AX, DX
    0x0018 00024 (popcount.go:89)   MOVL    DX, AX
    0x001a 00026 (popcount.go:89)   ANDL    $858993459, DX
    0x0020 00032 (popcount.go:89)   SHRL    $2, AX
    0x0023 00035 (popcount.go:89)   ANDL    $858993459, AX
    0x0028 00040 (popcount.go:89)   ADDL    DX, AX
    0x002a 00042 (popcount.go:89)   MOVL    AX, DX
    0x002c 00044 (popcount.go:89)   SHRL    $4, AX
    0x002f 00047 (popcount.go:89)   ADDL    DX, AX
    0x0031 00049 (popcount.go:89)   ANDL    $252645135, AX
    0x0036 00054 (popcount.go:89)   MOVL    AX, DX
    0x0038 00056 (popcount.go:89)   SHRL    $8, AX
    0x003b 00059 (popcount.go:89)   ADDL    DX, AX
    0x003d 00061 (popcount.go:89)   MOVL    AX, DX
    0x003f 00063 (popcount.go:89)   SHRL    $16, AX
    0x0042 00066 (popcount.go:89)   ADDL    DX, AX
    0x0044 00068 (popcount.go:89)   MOVQ    CX, DX
    0x0047 00071 (popcount.go:89)   SHRL    $1, CX
    0x0049 00073 (popcount.go:89)   ANDL    $1431655765, CX
    0x004f 00079 (popcount.go:89)   SUBL    CX, DX
    0x0051 00081 (popcount.go:89)   MOVL    DX, CX
    0x0053 00083 (popcount.go:89)   ANDL    $858993459, DX
    0x0059 00089 (popcount.go:89)   SHRL    $2, CX
    0x005c 00092 (popcount.go:89)   ANDL    $858993459, CX
    0x0062 00098 (popcount.go:89)   ADDL    DX, CX
    0x0064 00100 (popcount.go:89)   MOVL    CX, DX
    0x0066 00102 (popcount.go:89)   SHRL    $4, CX
    0x0069 00105 (popcount.go:89)   ADDL    DX, CX
    0x006b 00107 (popcount.go:89)   ANDL    $252645135, CX
    0x0071 00113 (popcount.go:89)   MOVL    CX, DX
    0x0073 00115 (popcount.go:89)   SHRL    $8, CX
    0x0076 00118 (popcount.go:89)   ADDL    DX, CX
    0x0078 00120 (popcount.go:89)   MOVL    CX, DX
    0x007a 00122 (popcount.go:89)   SHRL    $16, CX
    0x007d 00125 (popcount.go:89)   ADDL    DX, CX
    0x007f 00127 (popcount.go:89)   ANDL    $63, AX
    0x0082 00130 (popcount.go:89)   ANDL    $63, CX
    0x0085 00133 (popcount.go:89)   ADDQ    CX, AX
    0x0088 00136 (popcount.go:89)   MOVQ    AX, """".~r1+16(FP)
    0x008d 00141 (popcount.go:89)   RET
    0x0000 48 8b 44 24 08 48 89 c1 48 c1 e8 20 48 89 c2 d1  H.D$.H..H.. H...
    0x0010 e8 25 55 55 55 55 29 c2 89 d0 81 e2 33 33 33 33  .%UUUU).....3333
    0x0020 c1 e8 02 25 33 33 33 33 01 d0 89 c2 c1 e8 04 01  ...%3333........
    0x0030 d0 25 0f 0f 0f 0f 89 c2 c1 e8 08 01 d0 89 c2 c1  .%..............
    0x0040 e8 10 01 d0 48 89 ca d1 e9 81 e1 55 55 55 55 29  ....H......UUUU)
    0x0050 ca 89 d1 81 e2 33 33 33 33 c1 e9 02 81 e1 33 33  .....3333.....33
    0x0060 33 33 01 d1 89 ca c1 e9 04 01 d1 81 e1 0f 0f 0f  33..............
    0x0070 0f 89 ca c1 e9 08 01 d1 89 ca c1 e9 10 01 d1 83  ................
    0x0080 e0 3f 83 e1 3f 48 01 c8 48 89 44 24 10 c3        .?..?H..H.D$..
",5629
1186,39502310,"$ go test -bench=.
BenchmarkCountBitsInt8PopCnt-4          500000000            3.96 ns/op
BenchmarkCountBitsInt16PopCnt-4         500000000            3.24 ns/op
BenchmarkCountBitsInt32PopCnt-4         500000000            3.36 ns/op
BenchmarkCountBitsInt64PopCnt-4         500000000            3.44 ns/op
BenchmarkCountBitsIntPopCnt-4           300000000            5.42 ns/op
BenchmarkCountBitsUint8PopCnt-4         1000000000           2.60 ns/op
BenchmarkCountBitsUint16PopCnt-4        1000000000           2.59 ns/op
BenchmarkCountBitsUint32PopCnt-4        1000000000           2.55 ns/op
> BenchmarkCountBitsUint64PopCnt-4        1000000000           2.51 ns/op
BenchmarkCountBitsUintPopCnt-4          300000000            4.38 ns/op
BenchmarkCountBitsBytePopCnt-4          500000000            3.21 ns/op
BenchmarkCountBitsRunePopCnt-4          500000000            3.29 ns/op
BenchmarkCountBitsInt8-4                2000000000           0.38 ns/op
BenchmarkCountBitsInt16-4               2000000000           0.41 ns/op
BenchmarkCountBitsInt32-4               2000000000           0.36 ns/op
BenchmarkCountBitsInt64-4               2000000000           0.37 ns/op
BenchmarkCountBitsInt-4                 200000000            6.36 ns/op
BenchmarkCountBitsUint16-4              2000000000           0.36 ns/op
BenchmarkCountBitsUint32-4              2000000000           0.35 ns/op
> BenchmarkCountBitsUint64-4              2000000000           0.37 ns/op
> BenchmarkCountBitsUint64Alt-4           200000000            7.06 ns/op
BenchmarkCountBitsUint-4                300000000            4.16 ns/op
BenchmarkCountBitsUintReference-4       100000000           16.9 ns/op
BenchmarkCountBitsByte-4                2000000000           0.36 ns/op
BenchmarkCountBitsByteAlt-4             2000000000           0.36 ns/op
BenchmarkCountBitsRune-4                2000000000           0.37 ns/op
PASS
ok      github.com/steakknife/hamming   42.730s
$
",1951
1187,39502310,"   0x0177 00375 (popcnt_amd64_test.go:189) CALL    """".CountBitsUint64PopCnt(SB)
",80
1188,39523885,math/big,8
1189,39523885,"package main

import (
    ""bytes""
    ""fmt""
    ""math/big""
    ""strings""
)

func main() {
    a := strings.Split(strings.Replace(Str, ""\n"", """", -1), """")
    r := findTenOfSum(a)
    fmt.Println(r)
}

func findTenOfSum(sl []string) *big.Int {
    res := big.NewInt(0)

    for i := 0; i < 100; i++ {
        var buffer bytes.Buffer
        bi := big.NewInt(0)
        for j := 0; j < 50; j++ {
            buffer.WriteString(sl[j+50*i])
        }
        n, _ := bi.SetString(buffer.String(), 10)

        // fmt.Println(n)
        res.Add(res, n)
    }

    return res
}

// Str data for task
var Str = `37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690`
",5706
1190,39524224,strings.Fields(s),17
1191,39524224,unicode.IsSpace,15
1192,39524224,"package main

import (
    ""fmt""
    ""math/big""
    ""strings""
)

func main() {
    a := strings.Fields(Str)
    sum := big.NewInt(0)
    for i := 0; i < 100; i++ {
        z := &big.Int{}
        z, success := z.SetString(a[i], 10)
        if !success {
            panic(""Error converting ... "")
        }
        sum = sum.Add(sum, z)
    }
    fmt.Println(sum)
}

// Str data for task
var Str = `37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690`
",5500
1193,39539884,"panic:  not an Int

goroutine 68 [running]:
go/constant.Int64Val(0x0, 0x0, 0x2, 0xc8200d5180)
    /usr/local/go/src/go/constant/value.go:236 +0x338
github.com/derekparker/delve/proc.(*Variable).parseG(0xc8200a6700, 0xc8200a6700, 0x0, 0x0)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/proc/variables.go:387 +0x734
github.com/derekparker/delve/proc.(*Thread).GetG(0xc8200e4690, 0xc8200e4690, 0x0, 0x0)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/proc/threads.go:295 +0x69
github.com/derekparker/delve/proc.(*Thread).SetCurrentBreakpoint(0xc8200e4690, 0x0, 0x0)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/proc/threads.go:352 +0x18e
github.com/derekparker/delve/proc.(*Process).setCurrentBreakpoints(0xc820116100, 0xc8200e4690, 0x0, 0x0)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/proc/proc_linux.go:413 +0x9b
github.com/derekparker/delve/proc.(*Process).Continue(0xc820116100, 0x0, 0x0)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/proc/proc.go:311 +0x214
github.com/derekparker/delve/service/debugger.(*Debugger).Command(0xc82010a720, 0xc82010a8a0, 0x0, 0x0, 0x0)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/service/debugger/debugger.go:394 +0x847
github.com/derekparker/delve/service/rpc1.(*RPCServer).Command(0xc82081c140, 0xc82010a8a0, 0x7f86a9daaa38, 0xc820114300)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/service/rpc1/server.go:52 +0x2f
reflect.Value.call(0x945540, 0xa69c40, 0x13, 0xa84850, 0x4, 0xc820080280, 0x3, 0x3, 0x0, 0x0, ...)
    /usr/local/go/src/reflect/value.go:432 +0x120a
reflect.Value.Call(0x945540, 0xa69c40, 0x13, 0xc820080280, 0x3, 0x3, 0x0, 0x0, 0x0)
    /usr/local/go/src/reflect/value.go:300 +0xb1
created by github.com/derekparker/delve/service/rpccommon.(*ServerImpl).serveJSONCodec
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/service/rpccommon/server.go:298 +0xf70

goroutine 1 [chan receive]:
github.com/derekparker/delve/cmd/dlv/cmds.execute(0x0, 0xc8201143c0, 0x1, 0x4, 0xc82010e038, 0x0, 0x0)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/cmd/dlv/cmds/commands.go:428 +0xad5
github.com/derekparker/delve/cmd/dlv/cmds.New.func4(0xc820120c00, 0xc8201143c0, 0x1, 0x4)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/cmd/dlv/cmds/commands.go:154 +0x53
github.com/derekparker/delve/vendor/github.com/spf13/cobra.(*Command).execute(0xc820120c00, 0xc8201142c0, 0x4, 0x4, 0x0, 0x0)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/vendor/github.com/spf13/cobra/command.go:569 +0x869
github.com/derekparker/delve/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0xc820120400, 0xc820120c00, 0x0, 0x0)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/vendor/github.com/spf13/cobra/command.go:656 +0x56b
github.com/derekparker/delve/vendor/github.com/spf13/cobra.(*Command).Execute(0xc820120400, 0x0, 0x0)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/vendor/github.com/spf13/cobra/command.go:615 +0x2d
main.main()
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/cmd/dlv/main.go:13 +0x4a

goroutine 17 [syscall, locked to thread]:
runtime.goexit()
    /usr/local/go/src/runtime/asm_amd64.s:1696 +0x1

goroutine 5 [syscall]:
os/signal.loop()
    /usr/local/go/src/os/signal/signal_unix.go:22 +0x18
created by os/signal.init.1
    /usr/local/go/src/os/signal/signal_unix.go:28 +0x37

goroutine 18 [chan receive, locked to thread]:
github.com/derekparker/delve/proc.(*Process).handlePtraceFuncs(0xc820116100)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/proc/proc.go:774 +0xc3
created by github.com/derekparker/delve/proc.New
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/proc/proc.go:82 +0x1d0

goroutine 67 [IO wait]:
net.runtime_pollWait(0x7f86b0656290, 0x72, 0xc8200181c0)
    /usr/local/go/src/runtime/netpoll.go:157 +0x60
net.(*pollDesc).Wait(0xc82012a290, 0x72, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:73 +0x3a
net.(*pollDesc).WaitRead(0xc82012a290, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:78 +0x36
net.(*netFD).Read(0xc82012a230, 0xc82032c000, 0x200, 0x200, 0x0, 0x7f86b1e98050, 0xc8200181c0)
    /usr/local/go/src/net/fd_unix.go:232 +0x23a
net.(*conn).Read(0xc82055a000, 0xc82032c000, 0x200, 0x200, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/net.go:172 +0xe4
encoding/json.(*Decoder).refill(0xc820132000, 0x0, 0x0)
    /usr/local/go/src/encoding/json/stream.go:152 +0x287
encoding/json.(*Decoder).readValue(0xc820132000, 0x1, 0x0, 0x0)
    /usr/local/go/src/encoding/json/stream.go:128 +0x41b
encoding/json.(*Decoder).Decode(0xc820132000, 0x99b9a0, 0xc82012e080, 0x0, 0x0)
    /usr/local/go/src/encoding/json/stream.go:57 +0x159
net/rpc/jsonrpc.(*serverCodec).ReadRequestHeader(0xc82012e060, 0xc82010a100, 0x0, 0x0)
    /usr/local/go/src/net/rpc/jsonrpc/server.go:66 +0x7c
github.com/derekparker/delve/service/rpccommon.(*ServerImpl).serveJSONCodec(0xc8201124b0, 0x7f86a9daa698, 0xc82055a000)
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/service/rpccommon/server.go:252 +0x3ec
created by github.com/derekparker/delve/service/rpccommon.(*ServerImpl).Run.func1
    /opt/buildAgent/work/b97f8195591f35ac/gopath/src/github.com/derekparker/delve/service/rpccommon/server.go:145 +0x185

goroutine 15 [select, locked to thread]:
runtime.gopark(0xb97eb0, 0xc82051af28, 0xa8d4a0, 0x6, 0x42bf18, 0x2)
    /usr/local/go/src/runtime/proc.go:185 +0x163
runtime.selectgoImpl(0xc82051af28, 0x0, 0x18)
    /usr/local/go/src/runtime/select.go:392 +0xa64
runtime.selectgo(0xc82051af28)
    /usr/local/go/src/runtime/select.go:212 +0x12
runtime.ensureSigM.func1()
    /usr/local/go/src/runtime/signal1_unix.go:227 +0x353
runtime.goexit()
    /usr/local/go/src/runtime/asm_amd64.s:1696 +0x1
",6149
1194,39572848,"package search

import ""reflect""

// Search an arbitrary tree / map like data structure.
func concurrentSearch(output chan interface{}, data interface{}, key string) {
    // search() is your search algorithm.
    result := search(data, key)
    if result != nil {
        // Found something, so put it on the chan.
        // This is the point of the function.
        output <- result
        return // Success.
    }

    // Since we didn't find a match we will get a slice of the next level of values.
    iterableType := listValues(data)
    if len(iterableType) == 0 {
        return
    }

    var wg sync.WaitGroup
    for _, value := range iterableType {
        wg.Add(1)

        go func(next interface{}) {
            defer wg.Done()
            concurrentSearch(output, next, key)
        }(value)

    }
    wg.Wait()
    // Wait never finishes, so the function never returns
} 

// Returns a slice of values based on Type.
func listValues(data interface{}) []interface{} {
    value := reflect.ValueOf(data)
    values := []interface{}{}

    switch value.Kind() {
    case reflect.Map:
        for _, key := range value.MapKeys() {
            values = append(values, value.MapIndex(key).Interface())
        }

    case reflect.Slice:
        for ii := 0; ii < value.Len(); ii++ {
            values = append(values, value.Index(ii).Interface())
        }

    case reflect.Struct:
        for ii := 0; ii < value.NumField(); ii++ {
            if value.Field(ii).CanSet() {
                values = append(values, value.Field(ii).Interface())
            }
        }

    case reflect.Ptr:
        rawValue := value.Elem()
        if !rawValue.IsValid() {
            return nil
        }
        values = listValues(rawValue)

    case reflect.Interface:
        rawValue := value.Elem()
        values = listValues(rawValue)
    }

    return values
}

// search just checks the value for an index of key, otherwise returns nil.
func search(data interface{}, key string) interface{} {
    value := reflect.ValueOf(data)
    switch value.Kind() {

    // If the type is indexable, check the index.
    // Default to returning nil
    case reflect.Struct:
        for ii := 0; ii < value.NumField(); ii++ {
            field := value.Field(ii)
            // Without CanSet() reflect panics about Unexported fields.
            if field.CanSet() {
                if field.Type().Name() == key {
                    return field.Elem().Interface()
                }
            }
        }
        return nil

    case reflect.Map:
        for _, mapkey := range value.MapKeys() {
            if key == mapkey.String() {
                return value.MapIndex(mapkey).Elem().Interface()
            }
        }
        return nil

    case reflect.Slice:
        return nil

        // For pointer types we just unwrap and call again.
    case reflect.Ptr:
        rawValue := value.Elem()
        if !rawValue.IsValid() {
            return nil
        }
        return search(rawValue, key)

    case reflect.Interface:
        rawValue := value.Elem()
        return search(rawValue, key)

    case reflect.String:
        return nil

    default:
        return nil
    }

}
",3197
1195,39572848,"package state

import (
    ""encoding/json""
    ""io/ioutil""
    ""reflect""
    ""testing""
)

const (
    dataPath = ""path/to/your/data.json""
)

var tests = []struct {
    Input  string
    Result interface{}
}{
    // your test fixtures here for table driven tests.
}

type mydata struct {
    One   map[string]interface{} `json:""1""`
    Two   map[string]interface{} `json:""2""`
    Three map[string]interface{} `json:""3""`
}

func TestConcurrentSearch(t *testing.T) {
    data := &mydata{
        map[string]interface{}{},
        map[string]interface{}{},
        map[string]interface{}{},
    }
    bytes, err := ioutil.ReadFile(dataPath)
    if err != nil {
        t.Errorf(""ioutil: problem loading test data, %v"", err)
    }
    jerr := json.Unmarshal(bytes, data)
    if jerr != nil {
        t.Errorf(""json: problem unmarshalling test data, %s"", jerr)
    }

    // Setup finished

    output := make(chan interface{})
    for _, fixture := range tests {
        go concurrentSearch(output, data, fixture.Input)
        select {
        case result := <-output:
            if !reflect.DeepEqual(fixture.Result, result) {
                t.Errorf(""Expected: %v, Actual %v"", fixture.Result, result)
            }
        }
    }
}
",1234
1196,39597109,"var V1URLBase string = ""/api/v1""

func Load() http.Handler {

    r := mux.NewRouter().StrictSlash(true)

    // Status endpoints
    s := r.PathPrefix(fmt.Sprintf(""%s%s"", V1URLBase, ""/statuses"")).Subrouter()

    s.HandleFunc(""/"", handlers.GetStatuses).
        Methods(""GET"")
    s.HandleFunc(""/{status_id}/"", handlers.GetStatus).
        Methods(""GET"")
    s.HandleFunc(""/"", handlers.PostStatus).
        Methods(""POST"")
    s.HandleFunc(""/{status_id}/"", handlers.PutStatus).
        Methods(""PUT"")
    s.HandleFunc(""/{status_id}/"", handlers.DeleteStatus).
        Methods(""DELETE"")

    // Visit endpoints
    v := r.PathPrefix(fmt.Sprintf(""%s%s"", V1URLBase, ""/visits"")).Subrouter()

    v.HandleFunc(""/"", handlers.GetVisits).
        Methods(""GET"")
    v.HandleFunc(""/{visit_id}/"", handlers.GetVisit).
        Methods(""GET"")
    v.HandleFunc(""/"", handlers.PostVisit).
        Methods(""POST"")
    v.HandleFunc(""/{visit_id}/"", handlers.PutVisit).
        Methods(""PUT"")
    v.HandleFunc(""/{visit_id}/"", handlers.DeleteVisit).
        Methods(""DELETE"")

    // Member endpoints
    m := r.PathPrefix(fmt.Sprintf(""%s%s"", V1URLBase, ""/members"")).Subrouter()

    m.HandleFunc(""/"", handlers.GetMembers).
        Methods(""GET"")
    m.HandleFunc(""/{member_id}/"", handlers.GetMember).
        Methods(""GET"")
    m.HandleFunc(""/"", handlers.PostMember).
        Methods(""POST"")
    m.HandleFunc(""/{member_id}/"", handlers.PutMember).
        Methods(""PUT"")
    m.HandleFunc(""/{member_id}/"", handlers.DeleteMember).
        Methods(""DELETE"")

    // GymLocation endpoints
    gl := r.PathPrefix(fmt.Sprintf(""%s%s"", V1URLBase, ""/gym_locations"")).Subrouter()

    gl.HandleFunc(""/"", handlers.GetGymLocations).
        Methods(""GET"")
    gl.HandleFunc(""/{gym_location_id}/"", handlers.GetGymLocation).
        Methods(""GET"")
    gl.HandleFunc(""/"", handlers.PostGymLocation).
        Methods(""POST"")
    gl.HandleFunc(""/{gym_location_id}/"", handlers.PutGymLocation).
        Methods(""PUT"")
    gl.HandleFunc(""/{gym_location_id}/"", handlers.DeleteGymLocation).
        Methods(""DELETE"")

    router := ghandlers.LoggingHandler(os.Stdout, r)
    router = handlers.WriteCORSHeaders(r)

    return router
}
",2190
1197,39597109,"func WriteCORSHeaders(h http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        fmt.Println(""HIT"")
        w.Header().Set(""Access-Control-Allow-Origin"", r.Header.Get(""Origin""))
        w.Header().Set(""Access-Control-Allow-Methods"", ""POST, GET, OPTIONS, PUT, DELETE"")
        w.Header().Set(
            ""Access-Control-Allow-Headers"",
            ""Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization"",
        )
        //w.Header().Set(""Access-Control-Allow-Credentials"", ""true"")

        if r.Method == ""OPTIONS"" {
            return
        }

        h.ServeHTTP(w, r)
    })
}
",669
1198,39597109,"func PutVisit(w http.ResponseWriter, r *http.Request) {
    body, _ := ioutil.ReadAll(r.Body)
    r.Body.Close()

    visitId, err := strconv.ParseInt(mux.Vars(r)[VisitId], 10, 64)
    if err != nil {
        WriteJSON(w, http.StatusBadRequest, APIErrorMessage{Message: InvalidVisitId})
        return
    }

    visit := &models.Visit{}
    err = json.Unmarshal(body, visit)
    if err != nil {
        WriteJSON(w, http.StatusBadRequest, APIErrorMessage{Message: err.Error()})
        return
    }

    updated, err := datastore.UpdateVisit(visitId, *visit)
    if err != nil {
        WriteJSON(w, http.StatusInternalServerError, APIErrorMessage{Message: err.Error()})
        return
    }

    WriteJSON(w, http.StatusOK, updated)
}

func WriteJSON(w http.ResponseWriter, statusCode int, response interface{}) {
    encoder := json.NewEncoder(w)
    w.Header().Set(""Content-Type"", ""application/json; charset=UTF-8"")
    w.WriteHeader(statusCode)
    encoder.Encode(response)
}
",981
1199,39597109,"func main() {
    r := router.Load()

    http.ListenAndServe("":8080"", r)
}
",76
1200,39597109,"export function putVisit(visit) {
  return function(dispatch) {
    return fetch(`http://localhost:8080/api/v1/visits/${visit.visit_id}/`, {
      method: 'PUT',
      headers: {
        'Accept': 'application/json; charset=UTF-8',
        'Content-Type': 'application/json; charset=UTF-8'
      },
      body: JSON.stringify(visit)
    })
      .then(response => response.json())
      .then(json =>
        dispatch(updateVisit(json))
      )
      .catch(err =>
        console.log(err)
      )
  }
}
",504
1201,39634610,"type (
    SessionStore struct {
        c      *mgo.Session
        sid    string
        lock   sync.RWMutex
        values map[interface{}]interface{}
    }
)

var mgopder = &Provider{}

func (st *SessionStore) Set(key, value interface{}) error {
    st.lock.Lock()
    defer st.lock.Unlock()
    st.values[key] = value
    return nil
}

// Get value from mongodb session
func (st *SessionStore) Get(key interface{}) interface{} {
    st.lock.RLock()
    defer st.lock.RUnlock()
    if v, ok := st.values[key]; ok {
        return v
    }
    return nil
}

// Delete value in mongodb session
func (st *SessionStore) Delete(key interface{}) error {
    st.lock.Lock()
    defer st.lock.Unlock()
    delete(st.values, key)
    return nil
}

// Flush clear all values in mongodb session
func (st *SessionStore) Flush() error {
    st.lock.Lock()
    defer st.lock.Unlock()
    st.values = make(map[interface{}]interface{})
    return nil
}

// SessionID get session id of this mongodb session store
func (st *SessionStore) SessionID() string {
    return st.sid
}

// SessionRelease save mongodb session values to database.
// must call this method to save values to database.
func (st *SessionStore) SessionRelease(w http.ResponseWriter) {
    defer st.c.Close()
    b, err := session.EncodeGob(st.values)
    if err != nil {
        return
    }
    st.c.DB(""Employee"").C(""Sessions"").Update(nil, bson.M{""$set"": bson.M{
        ""session_data"":   b,
        ""session_expiry"": time.Now().Unix(),
        ""session_key"":    st.sid,
    },
    },
    )

    /*st.c.Exec(""UPDATE ""+TableName+"" set `session_data`=?, `session_expiry`=? where session_key=?"",
    b, time.Now().Unix(), st.sid)*/
}

type Provider struct {
    maxlifetime int64
    savePath    string
    Database    string
}

// connect to mongodb
func (mp *Provider) connectInit() *mgo.Session {
    ds, err := mgo.Dial(""Employee"")
    if err != nil {
        return nil
    }
    return ds
}

// SessionInit init mongodb session.
// savepath is the connection string of mongodb
func (mp *Provider) SessionInit(maxlifetime int64, savePath string) error {
    mp.maxlifetime = maxlifetime
    mp.savePath = savePath
    mp.Database = ""Employee""
    return nil
}

// SessionRead get mysql session by sid
func (mp *Provider) SessionRead(sid string) (session.Store, error) {
    var sessiondata []byte
    ds := mp.connectInit()
    defer ds.Close()
    c := ds.DB(mp.Database).C(""Session"")
    err := c.Find(bson.M{
        ""session_key"": sid,
    }).Select(bson.M{""session_data"": 1}).All(&sessiondata)
    if err != nil {
        if err.Error() == ""not found"" {
            c.Insert(bson.M{
                ""session_key"":    sid,
                ""session_data"":   "" "",
                ""session_expiry"": time.Now().Unix(),
            })
        }
    }

    var kv map[interface{}]interface{}
    if len(sessiondata) == 0 {
        kv = make(map[interface{}]interface{})
    } else {
        kv, err = session.DecodeGob(sessiondata)
        if err != nil {
            return nil, err
        }
    }
    rs := &SessionStore{c: ds, sid: sid, values: kv}
    return rs, nil
}

// SessionExist check mongodb session exist
func (mp *Provider) SessionExist(sid string) bool {
    var sessiondata []byte
    ds := mp.connectInit()
    defer ds.Close()
    c := ds.DB(""Employee"").C(""Sessions"")
    err := c.Find(bson.M{
        ""session_key"": sid,
    }).Select(bson.M{
        ""session_data"": 1,
    }).One(&sessiondata)
    if err != nil {
        if err.Error() == ""not found"" {
            return false
        }
    }
    return true

}

// SessionRegenerate generate new sid for mysql session
func (mp *Provider) SessionRegenerate(oldsid, sid string) (session.Store, error) {
    var sessiondata []byte
    ds := mp.connectInit()
    defer ds.Close()
    c := ds.DB(""Employee"").C(""Sessions"")
    err := c.Find(bson.M{
        ""session_key"": oldsid,
    }).Select(bson.M{
        ""session_data"": 1,
    }).One(&sessiondata)
    if err != nil {
        if err.Error() == ""not found"" {
            c.Insert(bson.M{
                ""sessoin_key"":    oldsid,
                ""session_data"":   "" "",
                ""session_expiry"": time.Now().Unix(),
            })
        }
    }
    /*  row := c.QueryRow(""select session_data from ""+TableName+"" where session_key=?"", oldsid)

        err := row.Scan(&sessiondata)

    c.Update(bson.M{""sessoin_key"": oldsid}, bson.M{
        ""$set"": bson.M{
            ""session_key"": sid,
        },
    })
    /*c.Exec(""update ""+TableName+"" set `session_key`=? where session_key=?"", sid, oldsid)
     */
    var kv map[interface{}]interface{}
    if len(sessiondata) == 0 {
        kv = make(map[interface{}]interface{})
    } else {
        kv, err = session.DecodeGob(sessiondata)
        if err != nil {
            return nil, err
        }
    }
    rs := &SessionStore{c: ds, sid: sid, values: kv}
    return rs, nil
}

// SessionDestroy delete mysql session by sid
func (mp *Provider) SessionDestroy(sid string) error {
    ds := mp.connectInit()
    defer ds.Close()
    c := ds.DB(""Employee"").C(""Sessions"")
    c.Remove(bson.M{
        ""session_key"": sid,
    }) 
    return nil
}

// SessionGC delete expired values in mysql session
func (mp *Provider) SessionGC() {
    ds := mp.connectInit()
    defer ds.Close()
    c := ds.DB(""Employee"").C(""Sessions"")
    c.Remove(bson.M{
        ""session_expiry"": bson.M{
            ""$lt"": time.Now().Unix() - mp.maxlifetime,
        },
    })
return
}

// SessionAll count values in mysql session
func (mp *Provider) SessionAll() int {
    var total int
    ds := mp.connectInit()
    defer ds.Close()
    c := ds.DB(""Employee"").C(""Sessions"")
    total, err := c.Count()

    if err != nil {
        return 0
    }
    return total
}

func init() {
    session.Register(""mongodb"", mgopder)
}
",5833
1202,39634610,"panic: runtime error: invalid memory address or nil pointer dereference
        panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xc0000005 code=0x1 addr=0x0 pc=0x6db254]

goroutine 6 [running]:
panic(0xa2f560, 0xc0820080b0)
        C:/Go/src/runtime/panic.go:481 +0x3f4
gopkg.in/mgo%2ev2.(*Session).Close(0x0)
        C:/Projects/Go/src/gopkg.in/mgo.v2/session.go:1612 +0x144
panic(0xa2f560, 0xc0820080b0)
        C:/Go/src/runtime/panic.go:443 +0x4f7
gopkg.in/mgo%2ev2.(*Session).acquireSocket(0x0, 0xc082290000, 0x0, 0x0, 0x0)
        C:/Projects/Go/src/gopkg.in/mgo.v2/session.go:4409 +0x4ba
gopkg.in/mgo%2ev2.(*Collection).writeOp(0xc082279f30, 0x8feb80, 0xc082326060, 0xc082326001, 0x0, 0x0, 0x0)
        C:/Projects/Go/src/gopkg.in/mgo.v2/session.go:4604 +0xe7
gopkg.in/mgo%2ev2.(*Collection).Remove(0xc082279f30, 0x9d4700, 0xc082326030, 0x0, 0x0)
        C:/Projects/Go/src/gopkg.in/mgo.v2/session.go:2586 +0x15c
sample/models.(*Provider).SessionGC(0xe2f5a0)
        C:/Projects/Go/src/sample/models/model.go:234 +0x3dc
github.com/astaxie/beego/session.(*Manager).GC(0xc082258b20)
        C:/Projects/Go/src/github.com/astaxie/beego/session/session.go:271 +0x48
created by github.com/astaxie/beego.registerSession
        C:/Projects/Go/src/github.com/astaxie/beego/hooks.go:68 +0x31d
",1324
1203,39662001,unit_type_name,14
1204,39662001,"//StandardType ...
type StandardType struct {
    UnitID                int    `json:""unit_id""`
    IsFormal              int    `json:""is_formal""`
    AssignmentName        string `json:""assignment_name""`
    AssignmentDescription string `json:""assignment_description""`
    StandardID            int    `json:""standard_id""`
    StandardName          string `json:""standard_name""`
    StandardDescription   string `json:""standard_description""`
}

//AutoGenerated ...
type AutoGenerated struct {
    UnitID                int            `json:""unit_id""`
    AssignmentName        string         `json:""assignment_name""`
    AssignmentDescription string         `json:""assignment_description""`
    AssignmentTotalScore  int            `json:""assignment_total_score""`
    UnitTypeName          string         `json:""unit_type_name""`
    IsGraded              int            `json:""is_graded""`
    StandardID            int            `json:""standard_id""`
    ScoringType           string         `json:""scoring_type""`
    AttemptScore          int            `json:""attempt_score""`
    UnitDuedate           string         `json:""unit_duedate""`
    Standard              []StandardType `json:""standard""`
}
var jsonData = ``
func main() { 
    m := []AutoGenerated{}
    err := json.Unmarshal([]byte(jsonData), &m)
    if err != nil {
        panic(err)
    }
",1356
1205,39662001,unit_type_name,14
1206,39662001,"    sliceKeys := make(map[string]string)
",41
1207,39662001,unit_type_name,14
1208,39662001,"    groupedSlices := make(map[string][]AutoGenerated)
",54
1209,39662001,"    for i := range m {
",23
1210,39662001,"      if _, ok := sliceKeys[m[i].UnitTypeName]; ok {
        autogenerated := groupedSlices[m[i].UnitTypeName]
        autogenerated = append(autogenerated, m[i])
        groupedSlices[m[i].UnitTypeName] = autogenerated
      } else {
",235
1211,39662001,"        sliceKeys[m[i].UnitTypeName] = m[i].UnitTypeName
        autogenerated := []AutoGenerated{}
        autogenerated = append(autogenerated, m[i])
        groupedSlices[m[i].UnitTypeName] = autogenerated
     }
  }
  fmt.Println(sliceKeys)
  fmt.Println(groupedSlices)
}
",276
1212,39662001,"[{""unit_id"": 6504,""assignment_name"": ""Grade assignment"",""assignment_description"": """",""assignment_total_score"": 10,""unit_type_name"": ""Homework"",""is_graded"": 1,""standard_id"": 1219,
""scoring_type"": ""score"",""attempt_score"": 8,""unit_duedate"": ""2016-02-10 09:00:00"",
""standard"": [{""unit_id"": 6504,""is_formal"": 1,""assignment_name"": ""Grade assignment"",""assignment_description"": """",
""standard_id"": 1220,""standard_name"": ""9-10.RL.3"",""standard_description"": ""Analyze how complex characters (e.g., those with multiple or conflicting motivations) develop over the course of a ""
}]},{""unit_id"": 6504,""assignment_name"": ""Grade assignment"",""assignment_description"": """",""assignment_total_score"": 10,
""unit_type_name"": ""Paper"",""is_graded"": 1,""standard_id"": 1219,""scoring_type"": ""score"",""attempt_score"": 8,""unit_duedate"": ""2016-02-10 09:00:00"",""standard"": [{""unit_id"": 6504,""is_formal"": 1,""assignment_name"": ""Grade assignment"",""assignment_description"": """",""standard_id"": 1220,""standard_name"": ""9-10.RL.3"",""standard_description"": ""Analyze how complex characters (e.g., those with multiple or conflicting motivations) develop over the course of a ""}]},{
""unit_id"": 6504,""assignment_name"": ""Grade assignment"",""assignment_description"": """",
""assignment_total_score"": 10,""unit_type_name"": ""Aything else"",""is_graded"": 1,""standard_id"": 1219,
""scoring_type"": ""score"",""attempt_score"": 8,""unit_duedate"": ""2016-02-10 09:00:00"",""standard"": [{
""unit_id"": 6504,""is_formal"": 1,""assignment_name"": ""Grade assignment"",""assignment_description"": """",""standard_id"": 1220,
""standard_name"": ""9-10.RL.3"",""standard_description"": ""Analyze how complex characters (e.g., those with multiple or conflicting motivations) develop over the course of a ""}]}]
",1705
1213,39662001,"map[Homework:Homework Paper:Paper Aything else:Aything else]

map[
Homework:[
{6504 Grade assignment  10 Homework 1 1219 score 8 2016-02-10 09:00:00 [{6504 1 Grade assignment  1220 9-10.RL.3 Analyze how complex characters (e.g., those with multiple or conflicting motivations) develop over the course of a }]}
] 

Paper:[
{6504 Grade assignment  10 Paper 1 1219 score 8 2016-02-10 09:00:00 [{6504 1 Grade assignment  1220 9-10.RL.3 Analyze how complex characters (e.g., those with multiple or conflicting motivations) develop over the course of a }]}
] 

Aything else:[
{6504 Grade assignment  10 Aything else 1 1219 score 8 2016-02-10 09:00:00 [{6504 1 Grade assignment  1220 9-10.RL.3 Analyze how complex characters (e.g., those with multiple or conflicting motivations) develop over the course of a }]}]
",807
1214,39911980,"func removeRuneAt(s string, runePosition int) string {
    if runePosition < 0 {
        return s
    }
    r := []rune(s)
    if runePosition >= len(r) {
        return s
    }
    copy(r[runePosition:], r[runePosition+1:])
    return string(r[:len(r)-1])
}
",259
1215,39911980,"func removeRuneAt(s string, runePosition int) string {
    if runePosition < 0 {
        return s // avoid allocation
    }
    r := []rune(s)
    if runePosition >= len(r) {
        return s // avoid allocation
    }
    t := make([]rune, len(r)-1) // Apply replacements to buffer.
    w := copy(t, r[:runePosition])
    w += copy(t[w:], r[runePosition+1:])
    return string(t[:w])
}
",386
1216,39911980,"package main

import (
    ""bytes""
    ""fmt""
)

func main() {
    str := ""hello""
    fmt.Println(str)
    fmt.Println(removeRuneAt(str, 1))

    buf := bytes.NewBuffer([]byte(str))
    fmt.Println(buf.Bytes())

    buf = bytes.NewBuffer([]byte(removeRuneAt(buf.String(), 1)))
    fmt.Println(buf.Bytes())
}
func removeRuneAt(s string, runePosition int) string {
    if runePosition < 0 {
        return s // avoid allocation
    }
    r := []rune(s)
    if runePosition >= len(r) {
        return s // avoid allocation
    }

    t := make([]rune, len(r)-1) // Apply replacements to buffer.
    w := copy(t, r[0:runePosition])
    w += copy(t[w:], r[runePosition+1:])
    return string(t[0:w])
}
",696
1217,39911980,n,1
1218,39911980,string,6
1219,39911980,"n := -1
newR := """"
old := ""µ""
buf = bytes.NewBuffer([]byte(strings.Replace(buf.String(), old, newR, n)))
",106
1220,39911980,string,6
1221,39911980,ith,3
1222,39911980,"buf = bytes.NewBuffer([]byte(Replace(buf.String(), oldString, newOrEmptyString, ith)))
",87
1223,39911980,"// Replace returns a copy of the string s with the ith
// non-overlapping instance of old replaced by new.
func Replace(s, old, new string, ith int) string {
    if len(old) == 0 || old == new || ith < 0 {
        return s // avoid allocation
    }
    i, j := 0, 0
    for ; ith >= 0; ith-- {
        j = strings.Index(s[i:], old)
        if j < 0 {
            return s // avoid allocation
        }
        j += i
        i = j + len(old)
    }
    t := make([]byte, len(s)+(len(new)-len(old))) // Apply replacements to buffer.
    w := copy(t, s[0:j])
    w += copy(t[w:], new)
    w += copy(t[w:], s[j+len(old):])
    return string(t[0:w])
}
",647
1224,39911980,"package main

import (
    ""bytes""
    ""fmt""
    ""strings""
)

func main() {
    str := `How are you?µ`
    fmt.Println(str)
    fmt.Println(Replace(str, ""µ"", """", 0))

    buf := bytes.NewBuffer([]byte(str))
    fmt.Println(buf.Bytes())

    buf = bytes.NewBuffer([]byte(Replace(buf.String(), ""µ"", """", 0)))

    fmt.Println(buf.Bytes())
}
func Replace(s, old, new string, ith int) string {
    if len(old) == 0 || old == new || ith < 0 {
        return s // avoid allocation
    }
    i, j := 0, 0
    for ; ith >= 0; ith-- {
        j = strings.Index(s[i:], old)
        if j < 0 {
            return s // avoid allocation
        }
        j += i
        i = j + len(old)
    }
    t := make([]byte, len(s)+(len(new)-len(old))) // Apply replacements to buffer.
    w := copy(t, s[0:j])
    w += copy(t[w:], new)
    w += copy(t[w:], s[j+len(old):])
    return string(t[0:w])
}
",881
1225,39911980,old,3
1226,39911980,"strings.Replace(str, old, """", -1)
",34
1227,39911980,bytes.buffer,12
1228,39911980,"strings.Replace(buf.String(), old, newR, -1)
",45
1229,39911980,"buf = bytes.NewBuffer([]byte(strings.Replace(buf.String(), old, newR, -1)))
",76
1230,39911980,"package main

import (
    ""bytes""
    ""fmt""
    ""strings""
)

func main() {
    str := `کیا حال ھے؟` //How are you?
    old := `ک`
    newR := """"
    fmt.Println(strings.Replace(str, old, newR, -1))

    buf := bytes.NewBuffer([]byte(str))
    //  for _, r := range str {
    //      buf.WriteRune(r)
    //  }
    fmt.Println(buf.Bytes())

    bs := []byte(strings.Replace(buf.String(), old, newR, -1))
    buf = bytes.NewBuffer(bs)

    fmt.Println(""       "", buf.Bytes())
}
",487
1231,39911980,"یا حال ھے؟
[218 169 219 140 216 167 32 216 173 216 167 217 132 32 218 190 219 146 216 159]
        [219 140 216 167 32 216 173 216 167 217 132 32 218 190 219 146 216 159]
",179
1232,39911980,strings.Replace,15
1233,39911980,"// Replace returns a copy of the string s with the first n
// non-overlapping instances of old replaced by new.
// If old is empty, it matches at the beginning of the string
// and after each UTF-8 sequence, yielding up to k+1 replacements
// for a k-rune string.
// If n < 0, there is no limit on the number of replacements.
func Replace(s, old, new string, n int) string {
  if old == new || n == 0 {
      return s // avoid allocation
  }

  // Compute number of replacements.
  if m := Count(s, old); m == 0 {
      return s // avoid allocation
  } else if n < 0 || m < n {
      n = m
  }

  // Apply replacements to buffer.
  t := make([]byte, len(s)+n*(len(new)-len(old)))
  w := 0
  start := 0
  for i := 0; i < n; i++ {
      j := start
      if len(old) == 0 {
          if i > 0 {
              _, wid := utf8.DecodeRuneInString(s[start:])
              j += wid
          }
      } else {
          j += Index(s[start:], old)
      }
      w += copy(t[w:], s[start:j])
      w += copy(t[w:], new)
      start = j + len(old)
  }
  w += copy(t[w:], s[start:])
  return string(t[0:w])
}
",1096
1234,39982804,"FROM golang:1.7-alpine
RUN echo http://dl-4.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories
RUN apk update && apk upgrade && apk add --no-cache bash git openssh alpine-sdk libgit2

RUN pkg-config --print-errors --exists libgit2
",241
1235,39982804,"Sending build context to Docker daemon   513 kB
Step 1 : FROM golang:1.7-alpine
 ---> 161e259af05d
Step 2 : RUN echo http://dl-4.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories
 ---> Running in 428c62a1fc94
 ---> 80a4e0dca9d7
Removing intermediate container 428c62a1fc94
Step 3 : RUN apk update && apk upgrade && apk add --no-cache bash git openssh alpine-sdk libgit2
 ---> Running in 7876608fa4e7
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz
fetch http://dl-4.alpinelinux.org/alpine/edge/testing/x86_64/APKINDEX.tar.gz
v3.4.4-9-g07aa589 [http://dl-cdn.alpinelinux.org/alpine/v3.4/main]
v3.4.4-1-g77d84e1 [http://dl-cdn.alpinelinux.org/alpine/v3.4/community]
v3.4.0-4072-g7fdcbdd [http://dl-4.alpinelinux.org/alpine/edge/testing]
OK: 7381 distinct packages available
(1/2) Upgrading libcrypto1.0 (1.0.2i-r0 -> 1.0.2j-r0)
(2/2) Upgrading libssl1.0 (1.0.2i-r0 -> 1.0.2j-r0)
Executing busybox-1.24.2-r11.trigger
OK: 5 MiB in 12 packages
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz
fetch http://dl-4.alpinelinux.org/alpine/edge/testing/x86_64/APKINDEX.tar.gz
(1/63) Installing fakeroot (1.20.2-r3)
(2/63) Installing sudo (1.8.16-r0)
(3/63) Installing libcap (2.25-r0)
(4/63) Installing pax-utils (1.1.6-r0)
(5/63) Installing openssl (1.0.2j-r0)
(6/63) Installing libattr (2.4.47-r4)
(7/63) Installing attr (2.4.47-r4)
(8/63) Installing tar (1.29-r0)
(9/63) Installing pkgconf (0.9.12-r0)
(10/63) Installing patch (2.7.5-r1)
(11/63) Installing libssh2 (1.7.0-r0)
(12/63) Installing libcurl (7.50.3-r0)
(13/63) Installing curl (7.50.3-r0)
(14/63) Installing abuild (2.27.1-r1)
Executing abuild-2.27.1-r1.pre-install
(15/63) Installing binutils-libs (2.26-r0)
(16/63) Installing binutils (2.26-r0)
(17/63) Installing gmp (6.1.0-r0)
(18/63) Installing isl (0.14.1-r0)
(19/63) Installing libgomp (5.3.0-r0)
(20/63) Installing libatomic (5.3.0-r0)
(21/63) Installing libgcc (5.3.0-r0)
(22/63) Installing pkgconfig (0.25-r1)
(23/63) Installing mpfr3 (3.1.2-r0)
(24/63) Installing mpc1 (1.0.3-r0)
(25/63) Installing libstdc++ (5.3.0-r0)
(26/63) Installing gcc (5.3.0-r0)
(27/63) Installing make (4.1-r1)
(28/63) Installing musl-dev (1.1.14-r12)
(29/63) Installing libc-dev (0.7-r0)
(30/63) Installing fortify-headers (0.8-r0)
(31/63) Installing g++ (5.3.0-r0)
(32/63) Installing build-base (0.4-r1)
(33/63) Installing expat (2.1.1-r1)
(34/63) Installing pcre (8.38-r1)
(35/63) Installing git (2.8.3-r0)
(36/63) Installing xz-libs (5.2.2-r1)
(37/63) Installing lzo (2.09-r1)
(38/63) Installing squashfs-tools (4.3-r2)
(39/63) Installing libmagic (5.27-r0)
(40/63) Installing file (5.27-r0)
(41/63) Installing bzip2 (1.0.6-r5)
(42/63) Installing libbz2 (1.0.6-r5)
(43/63) Installing cdrkit (1.1.11-r2)
(44/63) Installing acct (6.6.2-r0)
(45/63) Installing lddtree (1.25-r2)
(46/63) Installing libuuid (2.28-r3)
(47/63) Installing libblkid (2.28-r3)
(48/63) Installing device-mapper (2.02.154-r0)
(49/63) Installing cryptsetup-libs (1.7.1-r0)
(50/63) Installing kmod (22-r0)
(51/63) Installing mkinitfs (3.0.5-r1)
Executing mkinitfs-3.0.5-r1.post-install
(52/63) Installing mtools (4.0.18-r1)
(53/63) Installing alpine-sdk (0.4-r3)
(54/63) Installing ncurses-terminfo-base (6.0-r7)
(55/63) Installing ncurses-terminfo (6.0-r7)
(56/63) Installing ncurses-libs (6.0-r7)
(57/63) Installing readline (6.3.008-r4)
(58/63) Installing bash (4.3.42-r3)
Executing bash-4.3.42-r3.post-install
(59/63) Installing libgit2-libs (0.24.1-r0)
(60/63) Installing libgit2 (0.24.1-r0)
(61/63) Installing openssh-client (7.2_p2-r3)
(62/63) Installing openssh-sftp-server (7.2_p2-r3)
(63/63) Installing openssh (7.2_p2-r3)
Executing busybox-1.24.2-r11.trigger
Executing ca-certificates-20160104-r4.trigger
OK: 198 MiB in 75 packages
 ---> f73132c8c72e
Removing intermediate container 7876608fa4e7
Step 4 : RUN pkg-config --print-errors --exists libgit2
 ---> Running in f69f97142e81
Package libgit2 was not found in the pkg-config search path.
Perhaps you should add the directory containing `libgit2.pc'
to the PKG_CONFIG_PATH environment variable
Package 'libgit2', required by 'world', not found
The command '/bin/sh -c pkg-config --print-errors --exists libgit2' returned a non-zero code: 1
",4397
1236,39982804,"FROM golang:1.7-alpine
ENV TARGET venv
RUN echo http://dl-4.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories
RUN apk update && apk upgrade && apk add --no-cache bash git openssh alpine-sdk libcurl
RUN apk update && apk add cmake
RUN git clone git://github.com/libgit2/libgit2.git
WORKDIR $GOPATH/libgit2
RUN git checkout v0.24.0 && rm -rf build && mkdir build && cd build \
    && cmake .. -DCMAKE_INSTALL_PREFIX=$TARGET -DBUILD_CLAR=OFF && cmake --build . --target install
ENV PKG_CONFIG_PATH /go/libgit2/build/venv/lib/pkgconfig:$PKG_CONFIG_PATH
",560
1237,39982804,-DBUILD_CLAR=OFF,16
1238,39990618," // popcount_test.go:226
 func BenchmarkCountBitsUint64(b *testing.B) {
+       stopDeadCodeElimination := 0
        for i := 0; i < b.N; i++ {
-               CountBitsUint64(uint64(i))
+               stopDeadCodeElimination |= CountBitsUint64(uint64(i))
        }
+       b.Logf(""stopDeadCodeElimination: %d"", stopDeadCodeElimination)
 }

 func BenchmarkCountBitsUint64Alt(b *testing.B) {
",392
1239,39990618,"// popcount_test.go:226
func BenchmarkCountBitsUint64(b *testing.B) {
        for i := 0; i < b.N; i++ {
                CountBitsUint64(uint64(i))
        }
}
",160
1240,39990618,""""".BenchmarkCountBitsInt64(SB), $
0-8
        0x0000 00000 (popcount_test.go:202)     NOP
        0x0000 00000 (popcount_test.go:202)     NOP
        0x0000 00000 (popcount_test.go:202)     FUNCDATA        $0, gclocals·87d20ce1b583
90b294df80b886db78bf(SB)
        0x0000 00000 (popcount_test.go:202)     FUNCDATA        $1, gclocals·33cdeccccebe
80329f1fdbee7f5874cb(SB)
        0x0000 00000 (popcount_test.go:203)     MOVQ    """".b+8(FP), AX
        0x0005 00005 (popcount_test.go:203)     MOVQ    $0, CX
        0x0007 00007 (popcount_test.go:203)     MOVQ    184(AX), DX
        0x000e 00014 (popcount_test.go:203)     CMPQ    CX, DX
        0x0011 00017 (popcount_test.go:203)     JGE     $0, 34
        0x0013 00019 (popcount_test.go:203)     INCQ    CX
        0x0016 00022 (popcount_test.go:203)     MOVQ    184(AX), DX
        0x001d 00029 (popcount_test.go:203)     CMPQ    CX, DX
        0x0020 00032 (popcount_test.go:203)     JLT     $0, 19
        0x0022 00034 (popcount_test.go:206)     RET
        0x0000 48 8b 44 24 08 31 c9 48 8b 90 b8 00 00 00 48 39  H.D$.1.H......H9
        0x0010 d1 7d 0f 48 ff c1 48 8b 90 b8 00 00 00 48 39 d1  .}.H..H......H9.
        0x0020 7c f1 c3
",1193
1241,39990618,stopDeadCodeElimination,23
1242,39990618,"// popcount_test.go:226
func BenchmarkCountBitsUint64(b *testing.B) {
    stopDeadCodeElimination := 0
    for i := 0; i < b.N; i++ {
            stopDeadCodeElimination |= CountBitsUint64(uint64(i))
    }
    b.Logf(""stopDeadCodeElimination: %d"", stopDeadCodeElimination)
}
",275
1243,39990618,stopDeadCodeElimination,23
1244,39990618,""""".BenchmarkCountBitsUint64 t=1 size=327 args=0x8 locals=0x50
    0x0000 00000 (popcount_test.go:226) TEXT    """".BenchmarkCountBitsUint64(SB), $80-8
    0x0000 00000 (popcount_test.go:226) MOVQ    (TLS), CX
    0x0009 00009 (popcount_test.go:226) CMPQ    SP, 16(CX)
    0x000d 00013 (popcount_test.go:226) JLS 317
    0x0013 00019 (popcount_test.go:226) SUBQ    $80, SP
    0x0017 00023 (popcount_test.go:226) MOVQ    BP, 72(SP)
    0x001c 00028 (popcount_test.go:226) LEAQ    72(SP), BP
    0x0021 00033 (popcount_test.go:226) FUNCDATA    $0, gclocals·51fa0e13d53d6bad7f86670d3edaeac6(SB)
    0x0021 00033 (popcount_test.go:226) FUNCDATA    $1, gclocals·21a8f585a14d020f181242c5256583dc(SB)
    0x0021 00033 (popcount_test.go:228) MOVQ    """".b+88(FP), AX
    0x0026 00038 (popcount_test.go:227) MOVQ    $0, CX
    0x0028 00040 (popcount_test.go:227) MOVQ    CX, DX
    0x002b 00043 (popcount_test.go:228) MOVQ    184(AX), BX
    0x0032 00050 (popcount_test.go:228) CMPQ    CX, BX
    0x0035 00053 (popcount_test.go:228) JGE $0, 166
    0x0037 00055 (popcount_test.go:228) LEAQ    1(CX), BX
    0x003b 00059 (popcount_test.go:229) MOVQ    CX, SI
    0x003e 00062 (popcount_test.go:229) SHRQ    $1, CX
    0x0041 00065 (popcount_test.go:229) MOVQ    $6148914691236517205, DI
    0x004b 00075 (popcount_test.go:229) ANDQ    CX, DI
    0x004e 00078 (popcount_test.go:229) SUBQ    DI, SI
    0x0051 00081 (popcount_test.go:229) MOVQ    $3689348814741910323, DI
    0x005b 00091 (popcount_test.go:229) MOVQ    SI, R8
    0x005e 00094 (popcount_test.go:229) ANDQ    DI, SI
    0x0061 00097 (popcount_test.go:229) SHRQ    $2, R8
    0x0065 00101 (popcount_test.go:229) ANDQ    R8, DI
    0x0068 00104 (popcount_test.go:229) ADDQ    DI, SI
    0x006b 00107 (popcount_test.go:229) MOVQ    SI, DI
    0x006e 00110 (popcount_test.go:229) SHRQ    $4, SI
    0x0072 00114 (popcount_test.go:229) ADDQ    DI, SI
    0x0075 00117 (popcount_test.go:229) MOVQ    $1085102592571150095, DI
    0x007f 00127 (popcount_test.go:229) ANDQ    DI, SI
    0x0082 00130 (popcount_test.go:229) MOVQ    $72340172838076673, DI
    0x008c 00140 (popcount_test.go:229) IMULQ   DI, SI
    0x0090 00144 (popcount_test.go:229) SHRQ    $56, SI
    0x0094 00148 (popcount_test.go:229) ORQ SI, DX
    0x0097 00151 (popcount_test.go:228) MOVQ    BX, CX
    0x009a 00154 (popcount_test.go:228) MOVQ    184(AX), BX
    0x00a1 00161 (popcount_test.go:228) CMPQ    CX, BX
    0x00a4 00164 (popcount_test.go:228) JLT $0, 55
    0x00a6 00166 (popcount_test.go:231) MOVQ    DX, """".autotmp_1657+48(SP)
    0x00ab 00171 (popcount_test.go:231) MOVQ    $0, """".autotmp_1663+56(SP)
    0x00b4 00180 (popcount_test.go:231) MOVQ    $0, """".autotmp_1663+64(SP)
    0x00bd 00189 (popcount_test.go:231) LEAQ    type.int(SB), CX
    0x00c4 00196 (popcount_test.go:231) MOVQ    CX, (SP)
    0x00c8 00200 (popcount_test.go:231) LEAQ    """".autotmp_1657+48(SP), CX
    0x00cd 00205 (popcount_test.go:231) MOVQ    CX, 8(SP)
    0x00d2 00210 (popcount_test.go:231) MOVQ    $0, 16(SP)
    0x00db 00219 (popcount_test.go:231) PCDATA  $0, $1
    0x00db 00219 (popcount_test.go:231) CALL    runtime.convT2E(SB)
    0x00e0 00224 (popcount_test.go:231) MOVQ    24(SP), AX
    0x00e5 00229 (popcount_test.go:231) MOVQ    32(SP), CX
    0x00ea 00234 (popcount_test.go:231) MOVQ    AX, """".autotmp_1663+56(SP)
    0x00ef 00239 (popcount_test.go:231) MOVQ    CX, """".autotmp_1663+64(SP)
    0x00f4 00244 (popcount_test.go:231) MOVQ    """".b+88(FP), AX
    0x00f9 00249 (popcount_test.go:231) MOVQ    AX, (SP)
    0x00fd 00253 (popcount_test.go:231) LEAQ    go.string.""stopDeadCodeElimination: %d""(SB), CX
    0x0104 00260 (popcount_test.go:231) MOVQ    CX, 8(SP)
    0x0109 00265 (popcount_test.go:231) MOVQ    $27, 16(SP)
    0x0112 00274 (popcount_test.go:231) LEAQ    """".autotmp_1663+56(SP), CX
    0x0117 00279 (popcount_test.go:231) MOVQ    CX, 24(SP)
    0x011c 00284 (popcount_test.go:231) MOVQ    $1, 32(SP)
    0x0125 00293 (popcount_test.go:231) MOVQ    $1, 40(SP)
    0x012e 00302 (popcount_test.go:231) PCDATA  $0, $1
    0x012e 00302 (popcount_test.go:231) CALL    testing.(*common).Logf(SB)
    0x0133 00307 (popcount_test.go:232) MOVQ    72(SP), BP
    0x0138 00312 (popcount_test.go:232) ADDQ    $80, SP
    0x013c 00316 (popcount_test.go:232) RET
    0x013d 00317 (popcount_test.go:232) NOP
    0x013d 00317 (popcount_test.go:226) CALL    runtime.morestack_noctxt(SB)
    0x0142 00322 (popcount_test.go:226) JMP 0
    0x0000 65 48 8b 0c 25 00 00 00 00 48 3b 61 10 0f 86 2a  eH..%....H;a...*
    0x0010 01 00 00 48 83 ec 50 48 89 6c 24 48 48 8d 6c 24  ...H..PH.l$HH.l$
    0x0020 48 48 8b 44 24 58 31 c9 48 89 ca 48 8b 98 b8 00  HH.D$X1.H..H....
    0x0030 00 00 48 39 d9 7d 6f 48 8d 59 01 48 89 ce 48 d1  ..H9.}oH.Y.H..H.
    0x0040 e9 48 bf 55 55 55 55 55 55 55 55 48 21 cf 48 29  .H.UUUUUUUUH!.H)
    0x0050 fe 48 bf 33 33 33 33 33 33 33 33 49 89 f0 48 21  .H.33333333I..H!
    0x0060 fe 49 c1 e8 02 4c 21 c7 48 01 fe 48 89 f7 48 c1  .I...L!.H..H..H.
    0x0070 ee 04 48 01 fe 48 bf 0f 0f 0f 0f 0f 0f 0f 0f 48  ..H..H.........H
    0x0080 21 fe 48 bf 01 01 01 01 01 01 01 01 48 0f af f7  !.H.........H...
    0x0090 48 c1 ee 38 48 09 f2 48 89 d9 48 8b 98 b8 00 00  H..8H..H..H.....
    0x00a0 00 48 39 d9 7c 91 48 89 54 24 30 48 c7 44 24 38  .H9.|.H.T$0H.D$8
    0x00b0 00 00 00 00 48 c7 44 24 40 00 00 00 00 48 8d 0d  ....H.D$@....H..
    0x00c0 00 00 00 00 48 89 0c 24 48 8d 4c 24 30 48 89 4c  ....H..$H.L$0H.L
    0x00d0 24 08 48 c7 44 24 10 00 00 00 00 e8 00 00 00 00  $.H.D$..........
    0x00e0 48 8b 44 24 18 48 8b 4c 24 20 48 89 44 24 38 48  H.D$.H.L$ H.D$8H
    0x00f0 89 4c 24 40 48 8b 44 24 58 48 89 04 24 48 8d 0d  .L$@H.D$XH..$H..
    0x0100 00 00 00 00 48 89 4c 24 08 48 c7 44 24 10 1b 00  ....H.L$.H.D$...
    0x0110 00 00 48 8d 4c 24 38 48 89 4c 24 18 48 c7 44 24  ..H.L$8H.L$.H.D$
    0x0120 20 01 00 00 00 48 c7 44 24 28 01 00 00 00 e8 00   ....H.D$(......
    0x0130 00 00 00 48 8b 6c 24 48 48 83 c4 50 c3 e8 00 00  ...H.l$HH..P....
    0x0140 00 00 e9 b9 fe ff ff                             .......
    rel 5+4 t=15 TLS+0
    rel 192+4 t=14 type.int+0
    rel 220+4 t=7 runtime.convT2E+0
    rel 256+4 t=14 go.string.""stopDeadCodeElimination: %d""+0
    rel 303+4 t=7 testing.(*common).Logf+0
    rel 318+4 t=7 runtime.morestack_noctxt+0
",6300
1245,39990793,"{
    ""_id"" : ObjectId(""57f940c4932a00aba387b0b0""),
    ""tenantID"" : 1,
    ""date"" : ""2016-10-09 00:23:56"",
    ""venueList"" : [
        {
            ""id"" : “VID1212”,
            ""sum"" : [
                {
                      ""name"" : ""linux"",
                      ""value"" : 12
                },
                {
                    ""name"" : ""ubuntu"",
                    ""value"" : 4
                }
            ],
            “ssidList” : [    // this is list of ssid’s in venue
                {
                    ""id"" : “SSID1212”,
                    ""sum"" : [
                        {
                            ""name"" : ""linux"",
                            ""value"" : 8
                        },
                        {
                            ""name"" : ""ubuntu"",
                            ""value"" : 6
                        }
                    ],
                    “macList” : [  // this is mac list inside particular ssid  ex: this is mac list inside the SSID1212
                        {
                            ""id"" : “12:12:12:12:12:12”,
                            ""sum"" : [
                                {
                                    ""name"" : ""linux"",
                                    ""value"" : 12
                                },
                                {
                                    ""name"" : ""ubuntu"",
                                    ""value"" : 1
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            ""id"" : “VID4343”,
            ""sum"" : [
                {
                     ""name"" : ""linux"",
                     ""value"" : 2
                }
            ],
            ""ssidList"" : [
                {
                    ""id"" : “SSID4343”,
                    ""sum"" : [
                        {
                            ""name"" : ""linux"",
                            ""value"" : 2
                        }
                    ],
                    ""macList"" : [
                        {
                            ""id"" : “43:43:43:43:43:34”,
                            ""sum"" : [
                                {
                                    ""name"" : ""linux"",
                                    ""value"" : 2
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}
",2527
1246,39990793,"db.useragents.aggregate([
    { ""$match"": { ""venueList.id"": { ""$in"": [""VID1212"", ""VID4343""] } } },
    { ""$unwind"": ""$venueList"" },
    { ""$match"": { ""venueList.id"": { ""$in"": [""VID1212"", ""VID4343""] } } },
    { ""$unwind"": ""$venueList.sum"" },    
    { 
        ""$group"": {
            ""_id"": ""$venueList.sum.name"",
            ""count"": { ""$sum"": ""$venueList.sum.value"" }
        }
    },
    { 
        ""$group"": {
            ""_id"": null,
            ""counts"": {
                ""$push"": {
                    ""name"": ""$_id"",
                    ""value"": ""$count""
                }
            }
        }
    }
])
",616
1247,39990793,"func GetBrowserStats(constrains models.Constrains) ([]bson.M, error) {

    session := commons.GetMongoSession()
    defer session.Close()
    var col = session.DB(""analytics"").C(""useragents"")

    pipeline1 := bson.M{
        ""$match"": bson.M{
            ""venueList.id"": bson.M{
                ""$in"": []string{""VID1212"", ""VID4343""},
            },
        },
    }
    pipeline2 := bson.M{
        ""$unwind"": ""$venueList"",
    }
    pipeline3 := bson.M{
        ""$match"": bson.M{
            ""venueList.id"": bson.M{
                ""$in"": []string{""VID1212"", ""VID4343""},
            },
        },
    }
    pipeline4 := bson.M{
        ""$unwind"": ""$venueList.sum"",
    }

    pipeline5 := bson.M{
        ""$group"": bson.M{
            ""_id"": ""$venueList.sum.name"",
            ""count"": bson.M{
                ""$sum"": ""$venueList.sum.value"",
            },
        },
    }
    pipeline6 := bson.M{
        ""$group"": bson.M{
            ""_id"": bson.NewObjectId(),
            ""counts"": bson.M{
                ""$push"": bson.M{
                    ""name"":  ""$_id"",
                    ""value"": ""$count"",
                },
            },
        },
    }

    all := []bson.M{pipeline1, pipeline2, pipeline3, pipeline4, pipeline5, pipeline6}
    pipe := col.Pipe(all)

    result := []bson.M{}
    err := pipe.All(&result)
    println(result[0])
    if err != nil {
        println(err.Error())
        errMsg := ""Error occourred while getting dashboard configs from mongo stack:"" + err.Error()
        log.Error()
        return result, errors.New(errMsg)
    }
    return result, nil
}
",1590
1248,39990793,result,6
1249,39990793,result,6
1250,39990793,"{ ""_id"" : ObjectId(""57f73573d6e0ac1a9f2ab346"") , ""counts"" : [ { ""name"" : ""ubuntu"", ""value"" : 1 }, { ""name"" : ""linux"", ""value"" : 14 } ] }
",137
1251,40077813,"package main
//This file is generated automatically. Do not try to edit it manually.

var resourceListingJson = `{
    ""apiVersion"": ""1.0.0"",
    ""swaggerVersion"": ""1.2"",
    ""basePath"": ""http://127.0.0.1:3000/"",
    ""apis"": [
        {
            ""path"": ""/testapi"",
            ""description"": ""Test API""
        }
    ],
    ""info"": {
        ""title"": ""Swagger Example API"",
        ""description"": ""Swagger Example API"",
        ""contact"": ""varyous@gmail.com"",
        ""termsOfServiceUrl"": ""http://yvasiyarov.com/"",
        ""license"": ""BSD"",
        ""licenseUrl"": ""http://yvasiyarov.com/""
    }
}`
var apiDescriptionsJson = map[string]string{""testapi"":`{
    ""apiVersion"": ""1.0.0"",
    ""swaggerVersion"": ""1.2"",
    ""basePath"": ""http://127.0.0.1:3000/"",
    ""resourcePath"": ""/testapi"",
    ""produces"": [
        ""application/json""
    ],
    ""apis"": [
        {
            ""path"": ""/testapi/get-string-by-int/{some_id}"",
            ""description"": ""get string by ID"",
            ""operations"": [
                {
                    ""httpMethod"": ""GET"",
                    ""nickname"": ""GetStringByInt"",
                    ""type"": ""string"",
                    ""items"": {},
                    ""summary"": ""get string by ID"",
                    ""parameters"": [
                        {
                            ""paramType"": ""path"",
                            ""name"": ""some_id"",
                            ""description"": ""Some ID"",
                            ""dataType"": ""int"",
                            ""type"": ""int"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        }
                    ],
                    ""responseMessages"": [
                        {
                            ""code"": 200,
                            ""message"": """",
                            ""responseType"": ""object"",
                            ""responseModel"": ""string""
                        },
                        {
                            ""code"": 400,
                            ""message"": ""We need ID!!"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        },
                        {
                            ""code"": 404,
                            ""message"": ""Can not find ID"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        }
                    ],
                    ""produces"": [
                        ""application/json""
                    ]
                }
            ]
        },
        {
            ""path"": ""/testapi/get-struct-by-int/{some_id}"",
            ""description"": ""get struct by ID"",
            ""operations"": [
                {
                    ""httpMethod"": ""GET"",
                    ""nickname"": ""GetStructByInt"",
                    ""type"": ""git.corp.adobe.com.personal.test1.StructureWithEmbededStructure"",
                    ""items"": {},
                    ""summary"": ""get struct by ID"",
                    ""parameters"": [
                        {
                            ""paramType"": ""path"",
                            ""name"": ""some_id"",
                            ""description"": ""Some ID"",
                            ""dataType"": ""int"",
                            ""type"": ""int"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        },
                        {
                            ""paramType"": ""query"",
                            ""name"": ""offset"",
                            ""description"": ""Offset"",
                            ""dataType"": ""int"",
                            ""type"": ""int"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        },
                        {
                            ""paramType"": ""query"",
                            ""name"": ""limit"",
                            ""description"": ""Offset"",
                            ""dataType"": ""int"",
                            ""type"": ""int"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        }
                    ],
                    ""responseMessages"": [
                        {
                            ""code"": 200,
                            ""message"": """",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.StructureWithEmbededStructure""
                        },
                        {
                            ""code"": 400,
                            ""message"": ""We need ID!!"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        },
                        {
                            ""code"": 404,
                            ""message"": ""Can not find ID"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        }
                    ],
                    ""produces"": [
                        ""application/json""
                    ]
                }
            ]
        },
        {
            ""path"": ""/testapi/get-struct2-by-int/{some_id}"",
            ""description"": ""get struct2 by ID"",
            ""operations"": [
                {
                    ""httpMethod"": ""GET"",
                    ""nickname"": ""GetStruct2ByInt"",
                    ""type"": ""git.corp.adobe.com.personal.test1.StructureWithEmbededPointer"",
                    ""items"": {},
                    ""summary"": ""get struct2 by ID"",
                    ""parameters"": [
                        {
                            ""paramType"": ""path"",
                            ""name"": ""some_id"",
                            ""description"": ""Some ID"",
                            ""dataType"": ""int"",
                            ""type"": ""int"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        },
                        {
                            ""paramType"": ""query"",
                            ""name"": ""offset"",
                            ""description"": ""Offset"",
                            ""dataType"": ""int"",
                            ""type"": ""int"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        },
                        {
                            ""paramType"": ""query"",
                            ""name"": ""limit"",
                            ""description"": ""Offset"",
                            ""dataType"": ""int"",
                            ""type"": ""int"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        }
                    ],
                    ""responseMessages"": [
                        {
                            ""code"": 200,
                            ""message"": """",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.StructureWithEmbededPointer""
                        },
                        {
                            ""code"": 400,
                            ""message"": ""We need ID!!"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        },
                        {
                            ""code"": 404,
                            ""message"": ""Can not find ID"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        }
                    ],
                    ""produces"": [
                        ""application/json""
                    ]
                }
            ]
        },
        {
            ""path"": ""/testapi/get-simple-array-by-string/{some_id}"",
            ""description"": ""get simple array by ID"",
            ""operations"": [
                {
                    ""httpMethod"": ""GET"",
                    ""nickname"": ""GetSimpleArrayByString"",
                    ""type"": ""array"",
                    ""items"": {
                        ""type"": ""string""
                    },
                    ""summary"": ""get simple array by ID"",
                    ""parameters"": [
                        {
                            ""paramType"": ""path"",
                            ""name"": ""some_id"",
                            ""description"": ""Some ID"",
                            ""dataType"": ""string"",
                            ""type"": ""string"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        },
                        {
                            ""paramType"": ""query"",
                            ""name"": ""offset"",
                            ""description"": ""Offset"",
                            ""dataType"": ""int"",
                            ""type"": ""int"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        },
                        {
                            ""paramType"": ""query"",
                            ""name"": ""limit"",
                            ""description"": ""Offset"",
                            ""dataType"": ""int"",
                            ""type"": ""int"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        }
                    ],
                    ""responseMessages"": [
                        {
                            ""code"": 200,
                            ""message"": """",
                            ""responseType"": ""array"",
                            ""responseModel"": ""string""
                        },
                        {
                            ""code"": 400,
                            ""message"": ""We need ID!!"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        },
                        {
                            ""code"": 404,
                            ""message"": ""Can not find ID"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        }
                    ],
                    ""produces"": [
                        ""application/json""
                    ]
                }
            ]
        },
        {
            ""path"": ""/testapi/get-struct-array-by-string/{some_id}"",
            ""description"": ""get struct array by ID"",
            ""operations"": [
                {
                    ""httpMethod"": ""GET"",
                    ""nickname"": ""GetStructArrayByString"",
                    ""type"": ""array"",
                    ""items"": {
                        ""$ref"": ""git.corp.adobe.com.personal.test1.SimpleStructureWithAnnotations""
                    },
                    ""summary"": ""get struct array by ID"",
                    ""parameters"": [
                        {
                            ""paramType"": ""path"",
                            ""name"": ""some_id"",
                            ""description"": ""Some ID"",
                            ""dataType"": ""string"",
                            ""type"": ""string"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        },
                        {
                            ""paramType"": ""query"",
                            ""name"": ""offset"",
                            ""description"": ""Offset"",
                            ""dataType"": ""int"",
                            ""type"": ""int"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        },
                        {
                            ""paramType"": ""query"",
                            ""name"": ""limit"",
                            ""description"": ""Offset"",
                            ""dataType"": ""int"",
                            ""type"": ""int"",
                            ""format"": """",
                            ""allowMultiple"": false,
                            ""required"": true,
                            ""minimum"": 0,
                            ""maximum"": 0
                        }
                    ],
                    ""responseMessages"": [
                        {
                            ""code"": 200,
                            ""message"": """",
                            ""responseType"": ""array"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.SimpleStructureWithAnnotations""
                        },
                        {
                            ""code"": 400,
                            ""message"": ""We need ID!!"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        },
                        {
                            ""code"": 404,
                            ""message"": ""Can not find ID"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        }
                    ],
                    ""produces"": [
                        ""application/json""
                    ]
                }
            ]
        },
        {
            ""path"": ""/testapi/get-interface"",
            ""description"": ""get interface"",
            ""operations"": [
                {
                    ""httpMethod"": ""GET"",
                    ""nickname"": ""GetInterface"",
                    ""type"": ""git.corp.adobe.com.personal.test1.InterfaceType"",
                    ""items"": {},
                    ""summary"": ""get interface"",
                    ""responseMessages"": [
                        {
                            ""code"": 200,
                            ""message"": """",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.InterfaceType""
                        },
                        {
                            ""code"": 400,
                            ""message"": ""We need ID!!"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        },
                        {
                            ""code"": 404,
                            ""message"": ""Can not find ID"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        }
                    ],
                    ""produces"": [
                        ""application/json""
                    ]
                }
            ]
        },
        {
            ""path"": ""/testapi/get-simple-aliased"",
            ""description"": ""get simple aliases"",
            ""operations"": [
                {
                    ""httpMethod"": ""GET"",
                    ""nickname"": ""GetSimpleAliased"",
                    ""type"": ""string"",
                    ""items"": {},
                    ""summary"": ""get simple aliases"",
                    ""responseMessages"": [
                        {
                            ""code"": 200,
                            ""message"": """",
                            ""responseType"": ""object"",
                            ""responseModel"": ""string""
                        },
                        {
                            ""code"": 400,
                            ""message"": ""We need ID!!"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        },
                        {
                            ""code"": 404,
                            ""message"": ""Can not find ID"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        }
                    ],
                    ""produces"": [
                        ""application/json""
                    ]
                }
            ]
        },
        {
            ""path"": ""/testapi/get-array-of-interfaces"",
            ""description"": ""get array of interfaces"",
            ""operations"": [
                {
                    ""httpMethod"": ""GET"",
                    ""nickname"": ""GetArrayOfInterfaces"",
                    ""type"": ""array"",
                    ""items"": {
                        ""$ref"": ""git.corp.adobe.com.personal.test1.InterfaceType""
                    },
                    ""summary"": ""get array of interfaces"",
                    ""responseMessages"": [
                        {
                            ""code"": 200,
                            ""message"": """",
                            ""responseType"": ""array"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.InterfaceType""
                        },
                        {
                            ""code"": 400,
                            ""message"": ""We need ID!!"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        },
                        {
                            ""code"": 404,
                            ""message"": ""Can not find ID"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        }
                    ],
                    ""produces"": [
                        ""application/json""
                    ]
                }
            ]
        },
        {
            ""path"": ""/testapi/get-struct3"",
            ""description"": ""get struct3"",
            ""operations"": [
                {
                    ""httpMethod"": ""GET"",
                    ""nickname"": ""GetStruct3"",
                    ""type"": ""git.corp.adobe.com.personal.test1.StructureWithSlice"",
                    ""items"": {},
                    ""summary"": ""get struct3"",
                    ""responseMessages"": [
                        {
                            ""code"": 200,
                            ""message"": """",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.StructureWithSlice""
                        },
                        {
                            ""code"": 400,
                            ""message"": ""We need ID!!"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        },
                        {
                            ""code"": 404,
                            ""message"": ""Can not find ID"",
                            ""responseType"": ""object"",
                            ""responseModel"": ""git.corp.adobe.com.personal.test1.APIError""
                        }
                    ],
                    ""produces"": [
                        ""application/json""
                    ]
                }
            ]
        }
    ],
    ""models"": {
        ""git.corp.adobe.com.personal.test1.APIError"": {
            ""id"": ""git.corp.adobe.com.personal.test1.APIError"",
            ""properties"": {
                ""ErrorCode"": {
                    ""type"": ""int"",
                    ""description"": """",
                    ""items"": {},
                    ""format"": """"
                },
                ""ErrorMessage"": {
                    ""type"": ""string"",
                    ""description"": """",
                    ""items"": {},
                    ""format"": """"
                }
            }
        },
        ""git.corp.adobe.com.personal.test1.InterfaceType"": {
            ""id"": ""git.corp.adobe.com.personal.test1.InterfaceType"",
            ""properties"": null
        },
        ""git.corp.adobe.com.personal.test1.SimpleStructureWithAnnotations"": {
            ""id"": ""git.corp.adobe.com.personal.test1.SimpleStructureWithAnnotations"",
            ""required"": [
                ""Name""
            ],
            ""properties"": {
                ""Name"": {
                    ""type"": ""string"",
                    ""description"": """",
                    ""items"": {},
                    ""format"": """"
                },
                ""id"": {
                    ""type"": ""int"",
                    ""description"": """",
                    ""items"": {},
                    ""format"": """"
                }
            }
        },
        ""git.corp.adobe.com.personal.test1.StructureWithEmbededPointer"": {
            ""id"": ""git.corp.adobe.com.personal.test1.StructureWithEmbededPointer"",
            ""properties"": {
                ""Id"": {
                    ""type"": ""int"",
                    ""description"": """",
                    ""items"": {},
                    ""format"": """"
                },
                ""Name"": {
                    ""type"": ""array"",
                    ""description"": """",
                    ""items"": {
                        ""type"": ""byte""
                    },
                    ""format"": """"
                }
            }
        },
        ""git.corp.adobe.com.personal.test1.StructureWithEmbededStructure"": {
            ""id"": ""git.corp.adobe.com.personal.test1.StructureWithEmbededStructure"",
            ""properties"": {
                ""Id"": {
                    ""type"": ""int"",
                    ""description"": """",
                    ""items"": {},
                    ""format"": """"
                },
                ""Name"": {
                    ""type"": ""array"",
                    ""description"": """",
                    ""items"": {
                        ""type"": ""byte""
                    },
                    ""format"": """"
                }
            }
        },
        ""git.corp.adobe.com.personal.test1.StructureWithSlice"": {
            ""id"": ""git.corp.adobe.com.personal.test1.StructureWithSlice"",
            ""properties"": {
                ""Id"": {
                    ""type"": ""int"",
                    ""description"": """",
                    ""items"": {},
                    ""format"": """"
                },
                ""Name"": {
                    ""type"": ""array"",
                    ""description"": """",
                    ""items"": {
                        ""type"": ""byte""
                    },
                    ""format"": """"
                }
            }
        }
    }
}`,}
",24714
1252,40185912,"package main

import (
    ""fmt""
    term ""github.com/nsf/termbox-go""
)

func reset() {
    term.Sync() // cosmestic purpose
}

func main() {
    err := term.Init()
    if err != nil {
        panic(err)
    }

    defer term.Close()

    fmt.Println(""Enter any key to see their ASCII code or press ESC button to quit"")

keyPressListenerLoop:
    for {
        switch ev := term.PollEvent(); ev.Type {
        case term.EventKey:
            switch ev.Key {
            case term.KeyEsc:
                break keyPressListenerLoop
            case term.KeyF1:
                reset()
                fmt.Println(""F1 pressed"")
            case term.KeyF2:
                reset()
                fmt.Println(""F2 pressed"")
            case term.KeyF3:
                reset()
                fmt.Println(""F3 pressed"")
            case term.KeyF4:
                reset()
                fmt.Println(""F4 pressed"")
            case term.KeyF5:
                reset()
                fmt.Println(""F5 pressed"")
            case term.KeyF6:
                reset()
                fmt.Println(""F6 pressed"")
            case term.KeyF7:
                reset()
                fmt.Println(""F7 pressed"")
            case term.KeyF8:
                reset()
                fmt.Println(""F8 pressed"")
            case term.KeyF9:
                reset()
                fmt.Println(""F9 pressed"")
            case term.KeyF10:
                reset()
                fmt.Println(""F10 pressed"")
            case term.KeyF11:
                reset()
                fmt.Println(""F11 pressed"")
            case term.KeyF12:
                reset()
                fmt.Println(""F12 pressed"")
            case term.KeyInsert:
                reset()
                fmt.Println(""Insert pressed"")
            case term.KeyDelete:
                reset()
                fmt.Println(""Delete pressed"")
            case term.KeyHome:
                reset()
                fmt.Println(""Home pressed"")
            case term.KeyEnd:
                reset()
                fmt.Println(""End pressed"")
            case term.KeyPgup:
                reset()
                fmt.Println(""Page Up pressed"")
            case term.KeyPgdn:
                reset()
                fmt.Println(""Page Down pressed"")
            case term.KeyArrowUp:
                reset()
                fmt.Println(""Arrow Up pressed"")
            case term.KeyArrowDown:
                reset()
                fmt.Println(""Arrow Down pressed"")
            case term.KeyArrowLeft:
                reset()
                fmt.Println(""Arrow Left pressed"")
            case term.KeyArrowRight:
                reset()
                fmt.Println(""Arrow Right pressed"")
            case term.KeySpace:
                reset()
                fmt.Println(""Space pressed"")
            case term.KeyBackspace:
                reset()
                fmt.Println(""Backspace pressed"")
            case term.KeyEnter:
                reset()
                fmt.Println(""Enter pressed"")
            case term.KeyTab:
                reset()
                fmt.Println(""Tab pressed"")

            default:
                // we only want to read a single character or one key pressed event
                reset()
                fmt.Println(""ASCII : "", ev.Ch)

            }
        case term.EventError:
            panic(ev.Err)
        }
    }
}
",3397
1253,40185912,"Enter any key to see their ASCII code or press ESC button to quit
Tab pressed
ASCII : 49
ASCII : 50
ASCII : 51
ASCII : 52
ASCII : 53
F1 pressed
Arrow Up pressed
Arrow Left pressed
Arrow Down pressed
Arrow Right pressed
Arrow Up pressed
",236
1254,40185912,"package main

 import (
         ""fmt""
         ""os""
         ""bufio""
 )



 func main() {

         fmt.Println(""Press ESC button or Ctrl-C to exit this program"")
         fmt.Println(""Press any key to see their ASCII code follow by Enter"")

         for {
                 // only read single characters, the rest will be ignored!!
                 consoleReader := bufio.NewReaderSize(os.Stdin, 1)
                 fmt.Print("">"")
                 input, _ := consoleReader.ReadByte()

                 ascii := input

                 // ESC = 27 and Ctrl-C = 3
                 if ascii == 27 || ascii == 3 {
                         fmt.Println(""Exiting..."")
                         os.Exit(0)
                 }

                 fmt.Println(""ASCII : "", ascii)
         }

 }
",783
1255,40187186,"func (p *parser) shuntingyard(input token.TQueue) *ast.Node {
    var operands ast.NStack
    var operators *token.TStack

    operands = make(ast.NStack, 0)
    operators = token.TokenStack()

    for tok := input.Dequeue(); tok.Sym != ""EOF""; tok = input.Dequeue() {
        switch tok.Kind {
        case ""LParen"":
            operators.Push(tok)
        case ""RParen"":
            for {
                // pop item (""("" or operator) from stack
                if operators.Empty() {
                    p.errorf(""Unmatched parenthesis on line %d, expected '(' to match closing parenthesis in expression"", p.lno)
                }

                op := operators.Pop()
                if op.Sym == ""("" {
                    break // discard ""(""
                }

                if isUnary(op.Sym) {
                    node := ast.MakeNode(*op)
                    node.AddChild(operands.Pop())
                    operands.Push(node)
                    break
                }

                RHS := operands.Pop()
                LHS := operands.Pop()
                operands.Push(ast.MakeParentNode(*op, RHS, LHS))
            }
        default:
            if o1, isOp := prOps[tok.Sym]; isOp {
                // token is an operator
                for !operators.Empty() {
                    // consider top item on stack
                    op := operators.PeekTop()
                    if o2, isOp := prOps[op.Sym]; !isOp || o1.prec > o2.prec || o1.prec == o2.prec && o1.rAssoc {
                        break
                    }

                    // top item is an operator that needs to come off
                    op = operators.Pop()
                    if isUnary(op.Sym) {
                        node := ast.MakeNode(*op)
                        node.AddChild(operands.Pop())
                        operands.Push(node)
                        break
                    }
                    RHS := operands.Pop()
                    LHS := operands.Pop()
                    operands.Push(ast.MakeParentNode(*op, RHS, LHS))
                }
                // push operator (the new one) to stack
                operators.Push(tok)
            } else {
                operands.Push(ast.MakeNode(*tok))
            }
        }
    }

    // drain stack to result
    for !operators.Empty() {
        if operators.PeekTop().Sym == ""("" {
            p.errorf(""Unmatched parenthesis on line %d, expected ')' to match previous parenthesis in expression"", p.lno)
        }

        RHS := operands.Pop()
        LHS := operands.Pop()
        operands.Push(ast.MakeParentNode(*operators.Pop(), RHS, LHS))
    }

    result := operands.Pop()
    for !operands.Empty() {
        result.AddSibling(operands.Pop())
    }

    return result
}
",2766
1256,40187186,"c = 0;
a = 1 << 3 + 2;
",23
1257,40187186,"┣━ Assign           =
┃   ┣━ Identifier       'a'
┃   ┗━ Lshift           <<
┃       ┣━ Number           1
┃       ┗━ Plus             +
┃           ┣━ Number           3
┃           ┗━ Number           2
┗━ Assign           =
    ┣━ Identifier       'c'
    ┗━ Number           0
",333
1258,40187186," foo(bar(0))
",13
1259,40187186,"┣━ Number           0
┣━ Function         bar
┗━ Function         foo
",82
1260,40187186,"┗━ Function         foo
    ┗━ Function         bar
        ┗━ Number        0
",91
1261,40187186,"-i++;
",6
1262,40187186,"┗━ UnaryMinus       -u
    ┗━ PlusPlus         ++
        ┗━ Identifier       'i'
",94
1263,40187186,(-i++);,7
1264,40187186,map,3
1265,40187186,"var prOps = map[string]struct {
    prec   int
    rAssoc bool
}{
    ""++"" : {50, false}, ""--"" : {50, false},

    "".""  : {40, false}, ""[""  : {40, false},

    ""!""  : {30, true}, ""~""   : {30, true},
    ""-u"" : {29, true}, ""--u"" : {29, true}, ""++u"": {29, true},
    ""**"" : {28, true},

    ""*""  : {27, false}, ""/""  : {27, false}, ""%"" : {27, false},
    ""+""  : {26, false}, ""-""  : {26, false},
    "">>"" : {25, false}, ""<<"" : {25, false},
    "">""  : {24, false}, "">="" : {24, false}, ""<"" : {24, false}, ""<="" : {24, false},
    ""=="" : {23, false}, ""!="" : {23, false},
    ""&""  : {22, false},
    ""^""  : {21, false},
    ""|""  : {20, false},
    ""&&"" : {19, false},
    ""||"" : {18, false},

    ""=""  : {10, true}, ""+=""  : {10, true}, ""-="" : {10, true}, ""*=""  : {10, true},
    ""/="" : {10, true}, ""**="" : {10, true}, ""^="" : {10, true}, ""~=""  : {10, true},
    ""|="" : {10, true}, ""&=""  : {10, true}, ""%="" : {10, true}, ""<<="" : {10, true},
    "">>="": {10, true},
    "",""  : {9, false},
}
",978
1266,40187186,-u,2
1267,40187186,++u,3
1268,40187186,--u,3
1269,40331761,2>&1,4
1270,40331761,"$ ./gentestdata -i 5 -d -l -n 12 -w 32 -a 'Lorem ipsum dolor sit amet'
     1 Lorem ipsum dolor sit am
     2 Lorem ipsum dolor sit am
     3 Lorem ipsum dolor sit am
     4 Lorem ipsum dolor sit am
     5 Lorem ipsum dolor sit am
     6 Lorem ipsum dolor sit am
     7 Lorem ipsum dolor sit am
     8 Lorem ipsum dolor sit am
     9 Lorem ipsum dolor sit am
    10 Lorem ipsum dolor sit am
    11 Lorem ipsum dolor sit am
    12 Lorem ipsum dolor sit am

$ # note that two of the lines were output to stderr
$ ./gentestdata -i 5 -d -l -n 12 -w 32 -a 'Lorem ipsum dolor sit amet' 1>/dev/null
     5 Lorem ipsum dolor sit am
    10 Lorem ipsum dolor sit am
",656
1271,40331761,"$ ./sshx $(pwd)/gentestdata -i 5 -d -l -n 12 -w 32 -a 'Lorem ipsum dolor sit amet'
     1 Lorem ipsum dolor sit am
     2 Lorem ipsum dolor sit am
     3 Lorem ipsum dolor sit am
     4 Lorem ipsum dolor sit am
     6 Lorem ipsum dolor sit am
     7 Lorem ipsum dolor sit am
     8 Lorem ipsum dolor sit am
     9 Lorem ipsum dolor sit am
    11 Lorem ipsum dolor sit am
    12 Lorem ipsum dolor sit am
     5 Lorem ipsum dolor sit am
    10 Lorem ipsum dolor sit am
",467
1272,40331761,"// Simple demonstration of how I thought that I could capture interleaved
// stdout and stderr output generated during go ssh.Session to model the
// bash 2>&1 redirection behavior.
package main

import (
    ""bufio""
    ""fmt""
    ""io""
    ""log""
    ""os""
    ""os/signal""
    ""runtime""
    ""strings""
    ""syscall""

    ""golang.org/x/crypto/ssh""
    ""golang.org/x/crypto/ssh/terminal""
)

func main() {
    user := strings.TrimSpace(os.Getenv(""LOGNAME""))
    auth := getPassword(fmt.Sprintf(""%v's password: "", user))
    addr := ""localhost:22""
    if len(os.Args) > 1 {
        cmd := getCmd(os.Args[1:])
        config := &ssh.ClientConfig{
            User: user,
            Auth: []ssh.AuthMethod{
                ssh.Password(auth),
            },
        }
        exec(cmd, addr, config)
    }
}

// Execute the command.
func exec(cmd string, addr string, config *ssh.ClientConfig) {
    // Create the connection.
    conn, err := ssh.Dial(""tcp"", addr, config)
    check(err)
    session, err := conn.NewSession()
    check(err)
    defer session.Close()

    // Collect the output from stdout and stderr.
    // The idea is to duplicate the shell IO redirection
    // 2>&1 where both streams are interleaved.
    stdoutPipe, err := session.StdoutPipe()
    check(err)
    stderrPipe, err := session.StderrPipe()
    check(err)
    outputReader := io.MultiReader(stdoutPipe, stderrPipe)
    outputScanner := bufio.NewScanner(outputReader)

    // Start the session.
    err = session.Start(cmd)
    check(err)

    // Capture the output asynchronously.
    outputLine := make(chan string)
    outputDone := make(chan bool)
    go func(scan *bufio.Scanner, line chan string, done chan bool) {
        defer close(line)
        defer close(done)
        for scan.Scan() {
            line <- scan.Text()
        }
        done <- true
    }(outputScanner, outputLine, outputDone)

    // Use a custom wait.
    outputBuf := """"
    running := true
    for running {
        select {
        case <-outputDone:
            running = false
        case line := <-outputLine:
            outputBuf += line + ""\n""
        }
    }
    session.Close()

    // Output the data.
    fmt.Print(outputBuf)
}

func check(e error) {
    if e != nil {
        _, _, lineno, _ := runtime.Caller(1)
        log.Fatalf(""ERROR:%v %v"", lineno, e)
    }
}

// Convert a slice of tokens to a command string.
// It inserts quotes where necessary.
func getCmd(args []string) (cmd string) {
    cmd = """"
    for i, token := range args {
        if i > 0 {
            cmd += "" ""
        }
        cmd += quote(token)
    }
    return
}

// Quote an individual token.
// Very simple, not suitable for production.
func quote(token string) string {
    q := false
    r := """"
    for _, c := range token {
        switch c {
        case '""':
            q = true
            r += ""\""""
        case ' ', '\t':
            q = true
        }
        r += string(c)
    }
    if q {
        r = ""\"""" + r + ""\""""
    }
    return r
}

func getPassword(prompt string) string {
    // Get the initial state of the terminal.
    initialTermState, e1 := terminal.GetState(syscall.Stdin)
    if e1 != nil {
        panic(e1)
    }

    // Restore it in the event of an interrupt.
    // CITATION: Konstantin Shaposhnikov - https://groups.google.com/forum/#!topic/golang-nuts/kTVAbtee9UA
    c := make(chan os.Signal)
    signal.Notify(c, os.Interrupt, os.Kill)
    go func() {
        <-c
        _ = terminal.Restore(syscall.Stdin, initialTermState)
        os.Exit(1)
    }()

    // Now get the password.
    fmt.Print(prompt)
    p, err := terminal.ReadPassword(syscall.Stdin)
    fmt.Println("""")
    if err != nil {
        panic(err)
    }

    // Stop looking for ^C on the channel.
    signal.Stop(c)

    // Return the password as a string.
    return string(p)
}
",3840
1273,40331761,"// Execute the command.
func exec(cmd string, addr string, config *ssh.ClientConfig) {
    // Create the connection.
    conn, err := ssh.Dial(""tcp"", addr, config)
    check(err)
    session, err := conn.NewSession()
    check(err)
    defer session.Close()

    // Run the command.
    b, err := session.CombinedOutput(cmd)
    check(err)

    // Output the data.
    outputBuf := string(b)
    fmt.Print(outputBuf)
}
",419
1274,40331761,"     5 9FqBZonjaaWDcXMm8biABker
    10 zMd1JTT3ZGR5mEuJOaJCo9AZ
     1 bPlNFGdSC2wd8f2QnFhk5A84
     2 H9H2FHFuvUs9Jz8UvBHv3Vc5
     3 wsp2nChCIwVQztA2n95rXrtz
     4 eDZ0tHBxFq6Pysq3N267L1vq
     6 DF2EsjYyTQWCfIuilZxV2FCn
     7 fGOILa0u1wXnEw1GDGuvdSew
     8 fj84Qyu6uRn8CTECWzT5s4ZJ
     9 KykqOn91fMwNqsk2Wrc5uhk2
    11 0p7opMMsnA87D6TSTAXY5NAC
    12 HYixe6pj0dHuKlxQyyNenUNQ
",384
1275,40331761,"$ # Interleaved on the terminal.
$ /user/jlinoff/bin/gentestdata -l -i 5 -w 32 -n 12
     1 bPlNFGdSC2wd8f2QnFhk5A84
     2 H9H2FHFuvUs9Jz8UvBHv3Vc5
     3 wsp2nChCIwVQztA2n95rXrtz
     4 eDZ0tHBxFq6Pysq3N267L1vq
     5 9FqBZonjaaWDcXMm8biABker
     6 DF2EsjYyTQWCfIuilZxV2FCn
     7 fGOILa0u1wXnEw1GDGuvdSew
     8 fj84Qyu6uRn8CTECWzT5s4ZJ
     9 KykqOn91fMwNqsk2Wrc5uhk2
    10 zMd1JTT3ZGR5mEuJOaJCo9AZ
    11 0p7opMMsnA87D6TSTAXY5NAC
    12 HYixe6pj0dHuKlxQyyNenUNQ
",469
1276,40331761,"$ ssh hqxsv-cmdev3-jlinoff /user/jlinoff/bin/gentestdata -l -i 5 -w 32 -n 12
     1 bPlNFGdSC2wd8f2QnFhk5A84
     2 H9H2FHFuvUs9Jz8UvBHv3Vc5
     3 wsp2nChCIwVQztA2n95rXrtz
     4 eDZ0tHBxFq6Pysq3N267L1vq
     6 DF2EsjYyTQWCfIuilZxV2FCn
     7 fGOILa0u1wXnEw1GDGuvdSew
     8 fj84Qyu6uRn8CTECWzT5s4ZJ
     9 KykqOn91fMwNqsk2Wrc5uhk2
    11 0p7opMMsnA87D6TSTAXY5NAC
    12 HYixe6pj0dHuKlxQyyNenUNQ
     5 9FqBZonjaaWDcXMm8biABker
    10 zMd1JTT3ZGR5mEuJOaJCo9AZ
",461
1277,40478523," type (
        Employee struct {
            Name               string
            Password           string
           EmailAddress       string
           Position           string
           Gender             string
           Nationality        string
           Department         string
           MaritalStatus      string
           Approvedby         string
           JoinDate           time.Time
           ConfirmationDate   time.Time
           EndDate            time.Time
            Leave             []*LeaveInfo  
        }
        LeaveInfo struct {
            Total        float64
            Id           int
            Days         float64
            From        time.Time
             To          time.Time  
            Status       string
            Certificate  []*CertificateInfo
        }
        CertificateInfo struct {
            FileName string
            FileType string
            FileSize int

        }
",948
1278,40478523,"{
    ""_id"" : ObjectId(""58213e14927a62f3cf04e05b""),
    ""name"" : ""string"",
    ""password"" : ""string"",
    ""emailaddress"" : ""string"",
    ""position"" : ""string"",
    ""gender"" : ""string"",
    ""maritalstatus"" : ""string"",
    ""approvedby"" : ""string"",
    ""nationality"" : ""german"",
    ""department"" : ""account"",
    ""joindate"" : ISODate(""2016-09-19T00:00:00.000Z""),
    ""confirmationdate"" : Date(-62135596800000),
    ""enddate"" : Date(-62135596800000),
    ""Leave"" : [ 
        {
            ""total"" : 20.0,
            ""id"" : 0,
            ""days"" : 0.0,
            ""type"" : """",
            ""from"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""to"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""status"" : """",
            ""certificate"" : [
                    {
                    ""filename"" : ""malaysia"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }, 
                {
                    ""filename"" : ""singapore"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }
             ]
        }, 
        {
            ""total"" : 19.0,
            ""id"" : 1,
            ""days"" : 1.0,

            ""from"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""to"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""applieddate"" : ISODate(""2016-11-08T02:53:38.902Z""),
            ""status"" : ""Processing"",
            ""approveddate"" : Date(-62135596800000),
            ""certificate"" : [ 
                {
                    ""filename"" : ""germany"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }, 
                {
                    ""filename"" : ""england"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }
            ]
        }, 
        {
            ""total"" : 18.0,
            ""id"" : 2,
            ""days"" : 1.0,
            ""mdays"" : 0.0,
            ""type"" : ""annualleave"",
            ""daytype"" : ""FullDay"",
            ""from"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""to"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""applieddate"" : ISODate(""2016-11-08T05:36:21.579Z""),
            ""status"" : ""Processing"",
            ""approveddate"" : Date(-62135596800000),
            ""certificate"" : [
                   {
                    ""filename"" : ""india"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                   }, 
                   {
                    ""filename"" : ""france"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                   }
                 ]
             }
         ]
     }
",2695
1279,40478523,"pipe3 := c.Pipe([]bson.M{
            {
                ""$match"": bson.M{

                   ""name"":name
                 },
            },
            {
                ""$unwind"": ""$leave"",
            },

            {
                ""$project"": bson.M{
                    ""_id"":          false,

                    ""name"":         1,
                    ""Id"":           ""$leave.id"",
                    ""Total"":        ""$leave.total"",
                    ""Days"":         ""$leave.days"",
                    ""Status"":       ""$leave.status"",
                },
            },
       })
",590
1280,40478523,"I need an output similar to this. 
                    ""name"":        ""John"",
                    ""Id"":           ""1"",
                    ""Total"":        ""10.0"",
                    ""Days"":         ""2.0"",
                    ""Status"":       ""Process"",
                    ""Certificate"" : [
                      {
                     ""filename"":""certificate1"",
                     ""filesize"":""size1""
                     },
                    {
                        ""filename"":""certificate2"",
                        ""filesize"":""size2""
                     }
                      ]


                 ""name"":        ""John"",
                ""Id"":           ""2"",
                ""Total"":        ""8.0"",
                ""Days"":         ""2.0"",
                ""Status"":       ""Process"",
                ""Certificate"" : [
                  {
                 ""filename"":""certificate1"",
                 ""filesize"":""size1""
                 },
                {
                    ""filename"":""certificate2"",
                    ""filesize"":""size2""
                 }
                  ]
",1087
1281,40511495,"2016-11-09T03:06:41.240-0500 I JOURNAL  [journal writer] warning couldn't write to / rename file /data/data/db/journal/prealloc.2: Couldn't open directory '/data/data/db/journal' for flushing: errno:24 Too many open files
2016-11-09T03:06:41.240-0500 I JOURNAL  [journal writer] warning exception opening journal file couldn't open file /data/data/db/journal/j._213 for writing errno:9 Bad file descriptor
2016-11-09T03:06:41.240-0500 I JOURNAL  [journal writer] error exception in dur::journal couldn't open file /data/data/db/journal/j._213 for writing errno:9 Bad file descriptor
2016-11-09T03:06:41.242-0500 F JOURNAL  [journal writer] dbexception in journalWriterThread causing immediate shutdown: 13516 couldn't open file /data/data/db/journal/j._213 for writing errno:9 Bad file descriptor
2016-11-09T03:06:41.242-0500 I -        [journal writer] Invariant failure false src/mongo/db/storage/mmap_v1/dur_journal_writer.cpp 258
2016-11-09T03:06:41.246-0500 I JOURNAL  [durability] warning couldn't write to / rename file /data/data/db/journal/prealloc.2: couldn't open file /data/data/db/journal/prealloc.2 for writing errno:9 Bad file descriptor
2016-11-09T03:06:41.246-0500 F JOURNAL  [durability] dbexception in durThread causing immediate shutdown: 13516 couldn't open file /data/data/db/journal/j._213 for writing errno:9 Bad file descriptor
2016-11-09T03:06:41.246-0500 I -        [durability] Invariant failure false src/mongo/db/storage/mmap_v1/dur.cpp 862
2016-11-09T03:06:41.246-0500 I CONTROL  [journal writer]
 0xf51949 0xef1671 0xed6192 0xd17613 0xf9f9b4 0x7fd09697d184 0x7fd09544337d
----- BEGIN BACKTRACE -----
{""backtrace"":[{""b"":""400000"",""o"":""B51949""},{""b"":""400000"",""o"":""AF1671""},{""b"":""400000"",""o"":""AD6192""},{""b"":""400000"",""o"":""917613""},{""b"":""400000"",""o"":""B9F9B4""},{""b"":""7FD096975000"",""o"":""8184""},{""b"":""7FD095349000"",""o"":""FA37D""}],""processInfo"":{ ""mongodbVersion"" : ""3.0.3"", ""gitVersion"" : ""b40106b36eecd1b4407eb1ad1af6bc60593c6105"", ""uname"" : { ""sysname"" : ""Linux"", ""release"" : ""3.13.0-54-generic"", ""version"" : ""#91-Ubuntu SMP Tue May 26 19:15:08 UTC 2015"", ""machine"" : ""x86_64"" }, ""somap"" : [ { ""elfType"" : 2, ""b"" : ""400000"", ""buildId"" : ""F56F80CB96B4DBFC070BEB0ADAC7D6B274BFC6B1"" }, { ""b"" : ""7FFF14FD0000"", ""elfType"" : 3, ""buildId"" : ""1C0D0A18FF043EED9EE11DB5E5E90A3F74729341"" }, { ""b"" : ""7FD096975000"", ""path"" : ""/lib/x86_64-linux-gnu/libpthread.so.0"", ""elfType"" : 3, ""buildId"" : ""31E9F21AE8C10396171F1E13DA15780986FA696C"" }, { ""b"" : ""7FD096716000"", ""path"" : ""/lib/x86_64-linux-gnu/libssl.so.1.0.0"", ""elfType"" : 3, ""buildId"" : ""74864DB9D5F69D39A67E4755012FB6573C469B3D"" }, { ""b"" : ""7FD09633A000"", ""path"" : ""/lib/x86_64-linux-gnu/libcrypto.so.1.0.0"", ""elfType"" : 3, ""buildId"" : ""AAE7CFF8351B730830BDBCE0DCABBE06574B7144"" }, { ""b"" : ""7FD096132000"", ""path"" : ""/lib/x86_64-linux-gnu/librt.so.1"", ""elfType"" : 3, ""buildId"" : ""E2A6DD5048A0A051FD61043BDB69D8CC68192AB7"" }, { ""b"" : ""7FD095F2E000"", ""path"" : ""/lib/x86_64-linux-gnu/libdl.so.2"", ""elfType"" : 3, ""buildId"" : ""DA9B8C234D0FE9FD8CAAC8970A7EC1B6C8F6623F"" }, { ""b"" : ""7FD095C2A000"", ""path"" : ""/usr/lib/x86_64-linux-gnu/libstdc++.so.6"", ""elfType"" : 3, ""buildId"" : ""76190E922AF7457D078F75C9B15FA184E83EB506"" }, { ""b"" : ""7FD095924000"", ""path"" : ""/lib/x86_64-linux-gnu/libm.so.6"", ""elfType"" : 3, ""buildId"" : ""D144258E614900B255A31F3FD2283A878670D5BC"" }, { ""b"" : ""7FD09570E000"", ""path"" : ""/lib/x86_64-linux-gnu/libgcc_s.so.1"", ""elfType"" : 3, ""buildId"" : ""36311B4457710AE5578C4BF00791DED7359DBB92"" }, { ""b"" : ""7FD095349000"", ""path"" : ""/lib/x86_64-linux-gnu/libc.so.6"", ""elfType"" : 3, ""buildId"" : ""CF699A15CAAE64F50311FC4655B86DC39A479789"" }, { ""b"" : ""7FD096B93000"", ""path"" : ""/lib64/ld-linux-x86-64.so.2"", ""elfType"" : 3, ""buildId"" : ""D0F537904076D73F29E4A37341F8A449E2EF6CD0"" } ] }}
 mongod(_ZN5mongo15printStackTraceERSo+0x29) [0xf51949]
 mongod(_ZN5mongo10logContextEPKc+0xE1) [0xef1671]
 mongod(_ZN5mongo15invariantFailedEPKcS1_j+0xB2) [0xed6192]
 mongod(_ZN5mongo3dur13JournalWriter20_journalWriterThreadEv+0x953) [0xd17613]
 mongod(+0xB9F9B4) [0xf9f9b4]
 libpthread.so.0(+0x8184) [0x7fd09697d184]
 libc.so.6(clone+0x6D) [0x7fd09544337d]
",4109
1282,40511495,"package mongo

import (
    ""time""

    ""gopkg.in/mgo.v2""
)

var (
    // TagDB ...
    TagDB DataStore
    // LogDB ...
    LogDB DataStore
)

func init() {
    TagDB.ConnectToTagserver()
    LogDB.ConnectToLogServer()
}

// DataStore containing a pointer to a mgo session
type DataStore struct {
    Session *mgo.Session
}

// ConnectToTagserver is a helper method that connections to pubgears' tagserver
// database
func (ds *DataStore) ConnectToTagserver() {
    mongoDBDialInfo := &mgo.DialInfo{
        Addrs:    []string{""some_IP""},
        Timeout:  60 * time.Second,
        Database: ""tagserver"",
    }
    sess, err := mgo.DialWithInfo(mongoDBDialInfo)
    if err != nil {
        panic(err)
    }
    sess.SetMode(mgo.Monotonic, true)
    TagDB.Session = sess
}


// database SERVER IN QUESTION
func (ds *DataStore) ConnectToLogServer() {
    mongoDBDialInfo := &mgo.DialInfo{
        Addrs:    []string{""some_IP""}, 
        Timeout:  60 * time.Second,
        Database: ""nginx_logs"",
    }
    sess, err := mgo.DialWithInfo(mongoDBDialInfo)
    if err != nil {
        println(1)
        panic(err)
    }
    sess.SetMode(mgo.Monotonic, true)
    LogDB.Session = sess
}

// Close is a helper method that ensures the session is properly terminated
func (ds *DataStore) Close() {
    ds.Session.Close()
}
",1316
1283,40511495,"package models

import (
    ""errors""
    ""fmt""
    ""strconv""
    ""time""

    ""gopkg.in/mgo.v2/bson""

    ""./mongo""
)

// RawRequests ...
type RawRequests struct {
    TagServer   string            `json:""tag_server""`
    Server      string            `json:""server""`
    Slug        string            `json:""slug""`
    Zone        string            `json:""zone""`
    Size        string            `json:""size""`
    Network     string            `json:""network""`
    TagHash     string            `json:""tag_hash""`
    Extra       string            `json:""extra""`
    Logged      time.Time         `json:""logged""`
    Date        string            `json:""date""`
    Hour        int               `json:""hour""`
    QueryParams map[string]string `json:""query_params""`
}

// RawTagRequests ...
type RawTagRequests struct {
    TagServer   string            `json:""tag_server""`
    Server      string            `json:""server""`
    Slug        string            `json:""slug""`
    Zone        string            `json:""zone""`
    Size        string            `json:""size""`
    Network     string            `json:""network""`
    TagHash     string            `json:""tag_hash""`
    Extra       string            `json:""extra""`
    Logged      time.Time         `json:""logged""`
    Date        string            `json:""date""`
    Hour        int               `json:""hour""`
    QueryParams map[string]string `json:""query_params""`
    ChainNext   string            `json:""chain_next""`
}

// LogRequest ...
func LogRequest(tagServer string, server string, slug string, zone string, size string, network string, extra string, tagHash string, queryParams map[string]string) error {
    dbsession := mongo.LogDB.Session.Copy()
    defer dbsession.Close()
    logCollection := dbsession.DB(""nginx_logs"").C(""raw_requests"")
    d := time.Now()
    hour, _, _ := d.Clock()
    year, month, day, _ := formatDate(d.Year(), int(d.Month()), d.Day())
    date := fmt.Sprintf(""%s-%s-%s"", year, month, day)
    return logCollection.Insert(bson.M{""tag_server"": tagServer, ""server"": server, ""slug"": slug, ""zone"": zone, ""size"": size, ""network"": network, ""tag_hash"": tagHash, ""extra"": extra, ""logged"": time.Now(), ""date"": date, ""hour"": hour, ""query_params"": queryParams})
}

// LogTagRequests ...
func LogTagRequests(tagServer string, server string, slug string, zone string, size string, network string, extra string, tagHash string, queryParams map[string]string, chainHash string) error {
    dbsession := mongo.LogDB.Session.Copy()
    defer dbsession.Close()
    logCollection := dbsession.DB(""nginx_logs"").C(""raw_tag_requests"")
    d := time.Now()
    hour, _, _ := d.Clock()
    year, month, day, _ := formatDate(d.Year(), int(d.Month()), d.Day())
    date := fmt.Sprintf(""%s-%s-%s"", year, month, day)
    return logCollection.Insert(bson.M{""tag_server"": tagServer, ""server"": server, ""slug"": slug, ""zone"": zone, ""size"": size, ""network"": network, ""tag_hash"": tagHash, ""extra"": extra, ""logged"": time.Now(), ""date"": date, ""hour"": hour, ""query_params"": queryParams, ""chain_hash"": chainHash})
}

func formatDate(year int, month int, day int) (y string, m string, d string, err error) {
    var tmonth, tday, tyear string
    tyear = strconv.Itoa(year)
    // convert the month and year and replace with the correct number of digits
    if month < 10 {
        tmonth = ""0"" + strconv.Itoa(int(month))
    } else {
        tmonth = strconv.Itoa(int(month))
    }
    if day < 10 {
        tday = ""0"" + strconv.Itoa(int(day))
    } else {
        tday = strconv.Itoa(int(day))
    }
    if len(tmonth) == 2 && len(tday) == 2 && len(tyear) == 4 {
        return tyear, tmonth, tday, nil
    }
    return tyear, tmonth, tday, errors.New(""One of the values passed in does not meet the time format requirement month-day-year --> 1991-01-15"")
}
",3811
1284,40511495,"go LogRequest(tagServer, host, site, channel, adSize, network, tagExtra, tagHash, queryParams)",94
1285,40770786,go get github.com/go-vgo/robotgo,32
1286,40770786,"> G:\ProgramFiles\Go32>go get github.com/go-vgo/robotgo \#
> github.com/go-vgo/robotgo In file included from
> ./mouse/goMouse.h:12:0,
>                  from src\github.com\go-vgo\robotgo\robotgo.go:24: ./mouse/mouse_c.h: In function 'moveMouse': ./mouse/mouse_c.h:116:2:
> error: unknown type name 'INPUT' ./mouse/mouse_c.h:117:12: error:
> request for member 'type' in something not a structure or union
> ./mouse/mouse_c.h:117:20: error: 'INPUT_MOUSE' undeclared (first use
> in this function) ./mouse/mouse_c.h:117:20: note: each undeclared
> identifier is reported only once for each function it appears in
> ./mouse/mouse_c.h:118:12: error: request for member 'mi' in something
> not a structure or union ./mouse/mouse_c.h:119:12: error: request for
> member 'mi' in something not a structure or union
> ./mouse/mouse_c.h:120:12: error: request for member 'mi' in something
> not a structure or union ./mouse/mouse_c.h:121:12: error: request for
> member 'mi' in something not a structure or union
> ./mouse/mouse_c.h:122:12: error: request for member 'mi' in something
> not a structure or union ./mouse/mouse_c.h:123:12: error: request for
> member 'mi' in something not a structure or union ./mouse/mouse_c.h:
> In function 'scrollMouse': ./mouse/mouse_c.h:249:3: error: unknown
> type name 'INPUT' ./mouse/mouse_c.h:293:19: error: request for member
> 'type' in something not a structure or union ./mouse/mouse_c.h:293:27:
> error: 'INPUT_MOUSE' undeclared (first use in this function)
> ./mouse/mouse_c.h:294:19: error: request for member 'mi' in something
> not a structure or union ./mouse/mouse_c.h:295:19: error: request for
> member 'mi' in something not a structure or union
> ./mouse/mouse_c.h:296:19: error: request for member 'mi' in something
> not a structure or union ./mouse/mouse_c.h:297:19: error: request for
> member 'mi' in something not a structure or union
> ./mouse/mouse_c.h:298:19: error: request for member 'mi' in something
> not a structure or union ./mouse/mouse_c.h:299:19: error: request for
> member 'mi' in something not a structure or union In file included
> from ./key/keypress.h:6:0,
>                  from ./key/keypress_c.h:1,
>                  from ./key/goKey.h:14,
>                  from src\github.com\go-vgo\robotgo\robotgo.go:25: ./key/keycode.h: At top level: ./key/keycode.h:249:24: error:
> 'VK_VOLUME_MUTE' undeclared here (not in a function)
> ./key/keycode.h:250:24: error: 'VK_VOLUME_DOWN' undeclared here (not
> in a function) ./key/keycode.h:251:22: error: 'VK_VOLUME_UP'
> undeclared here (not in a function) ./key/keycode.h:252:17: error:
> 'VK_MEDIA_PLAY_PAUSE' undeclared here (not in a function)
> ./key/keycode.h:253:17: error: 'VK_MEDIA_STOP' undeclared here (not in
> a function) ./key/keycode.h:255:17: error: 'VK_MEDIA_PREV_TRACK'
> undeclared here (not in a function) ./key/keycode.h:256:17: error:
> 'VK_MEDIA_NEXT_TRACK' undeclared here (not in a function) In file
> included from ./key/goKey.h:14:0,
>                  from src\github.com\go-vgo\robotgo\robotgo.go:25: ./key/keypress_c.h: In function 'win32KeyEvent':
> ./key/keypress_c.h:57:39: error: 'MAPVK_VK_TO_VSC' undeclared (first
> use in this function) ./key/keypress_c.h:86:8: error:
> 'VK_BROWSER_BACK' undeclared (first use in this function)
> ./key/keypress_c.h:87:8: error: 'VK_BROWSER_FORWARD' undeclared (first
> use in this function) ./key/keypress_c.h:88:8: error:
> 'VK_BROWSER_REFRESH' undeclared (first use in this function)
> ./key/keypress_c.h:89:8: error: 'VK_BROWSER_STOP' undeclared (first
> use in this function) ./key/keypress_c.h:90:8: error:
> 'VK_BROWSER_SEARCH' undeclared (first use in this function)
> ./key/keypress_c.h:91:8: error: 'VK_BROWSER_FAVORITES' undeclared
> (first use in this function) ./key/keypress_c.h:92:8: error:
> 'VK_BROWSER_HOME' undeclared (first use in this function)
> ./key/keypress_c.h:93:8: error: 'VK_LAUNCH_MAIL' undeclared (first use
> in this function) In file included from ./event/goEvent.h:29:0,
>                  from src\github.com\go-vgo\robotgo\robotgo.go:27: ./event/hook/windows/input_c.h: At top level:
> ./event/hook/windows/input_c.h:31:27: error: 'VK_OEM_MINUS' undeclared
> here (not in a function) ./event/hook/windows/input_c.h:32:27: error:
> 'VK_OEM_PLUS' undeclared here (not in a function)
> ./event/hook/windows/input_c.h:70:24: error: 'VK_OEM_COMMA' undeclared
> here (not in a function) ./event/hook/windows/input_c.h:71:24: error:
> 'VK_OEM_PERIOD' undeclared here (not in a function)
> ./event/hook/windows/input_c.h:183:28: error: 'VK_LAUNCH_APP2'
> undeclared here (not in a function)
> ./event/hook/windows/input_c.h:200:30: error: 'VK_BROWSER_HOME'
> undeclared here (not in a function) In file included from
> ./event/goEvent.h:29:0,
>                  from src\github.com\go-vgo\robotgo\robotgo.go:27: ./event/hook/windows/input_c.h:251:32: error: 'VK_BROWSER_SEARCH'
> undeclared here (not in a function)
> ./event/hook/windows/input_c.h:252:30: error: 'VK_BROWSER_FAVORITES'
> undeclared here (not in a function)
> ./event/hook/windows/input_c.h:253:30: error: 'VK_BROWSER_REFRESH'
> undeclared here (not in a function)
> ./event/hook/windows/input_c.h:254:30: error: 'VK_BROWSER_STOP'
> undeclared here (not in a function)
> ./event/hook/windows/input_c.h:255:30: error: 'VK_BROWSER_FORWARD'
> undeclared here (not in a function)
> ./event/hook/windows/input_c.h:256:30: error: 'VK_BROWSER_BACK'
> undeclared here (not in a function)
> ./event/hook/windows/input_c.h:258:30: error: 'VK_LAUNCH_APP1'
> undeclared here (not in a function)
> ./event/hook/windows/input_c.h:259:30: error: 'VK_LAUNCH_MEDIA_SELECT'
> undeclared here (not in a function) In file included from
> ./event/goEvent.h:30:0,
>                  from src\github.com\go-vgo\robotgo\robotgo.go:27: ./event/hook/windows/hook_c.h: In function 'initialize_modifiers':
> ./event/hook/windows/hook_c.h:90:18: error: 'VK_XBUTTON1' undeclared
> (first use in this function) ./event/hook/windows/hook_c.h:91:18:
> error: 'VK_XBUTTON2' undeclared (first use in this function)
> ./event/hook/windows/hook_c.h: In function 'mouse_hook_event_proc':
> ./event/hook/windows/hook_c.h:509:8: error: 'WM_XBUTTONDOWN'
> undeclared (first use in this function)
> ./event/hook/windows/hook_c.h:510:8: error: 'WM_NCXBUTTONDOWN'
> undeclared (first use in this function)
> ./event/hook/windows/hook_c.h:511:37: error: 'XBUTTON1' undeclared
> (first use in this function) ./event/hook/windows/hook_c.h:515:42:
> error: 'XBUTTON2' undeclared (first use in this function)
> ./event/hook/windows/hook_c.h:551:8: error: 'WM_XBUTTONUP' undeclared
> (first use in this function) ./event/hook/windows/hook_c.h:552:8:
> error: 'WM_NCXBUTTONUP' undeclared (first use in this function) In
> file included from ./event/goEvent.h:30:0,
>                  from src\github.com\go-vgo\robotgo\robotgo.go:27: ./event/hook/windows/hook_c.h: In function 'win_hook_event_proc':
> ./event/hook/windows/hook_c.h:616:8: error: 'EVENT_OBJECT_NAMECHANGE'
> undeclared (first use in this function) ./event/hook/windows/hook_c.h:
> In function 'hook_run': ./event/hook/windows/hook_c.h:684:4: error:
> 'EVENT_OBJECT_NAMECHANGE' undeclared (first use in this function)
> ./event/hook/windows/hook_c.h:688:4: error: 'WINEVENT_OUTOFCONTEXT'
> undeclared (first use in this function)
> ./event/hook/windows/hook_c.h:688:28: error: 'WINEVENT_SKIPOWNPROCESS'
> undeclared (first use in this function)
> ./event/hook/windows/hook_c.h:688:26: error: invalid operands to
> binary | (have 'const uint16_t (*)[2]' and 'const uint16_t (*)[2]') In
> file included from ./event/goEvent.h:31:0,
>                  from src\github.com\go-vgo\robotgo\robotgo.go:27: ./event/hook/windows/event_c.h: In function 'hook_post_event':
> ./event/hook/windows/event_c.h:57:2: error: unknown type name 'INPUT'
> ./event/hook/windows/event_c.h:57:32: error: 'INPUT' undeclared (first
> use in this function) ./event/hook/windows/event_c.h:57:39: error:
> invalid operands to binary * (have 'const uint16_t (*)[2]' and 'int')
> ./event/hook/windows/event_c.h:63:24: error: request for member 'type'
> in something not a structure or union
> ./event/hook/windows/event_c.h:63:32: error: 'INPUT_KEYBOARD'
> undeclared (first use in this function)
> ./event/hook/windows/event_c.h:64:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:64:27: error: request for member 'wVk'
> in something not a structure or union
> ./event/hook/windows/event_c.h:65:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:65:27: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:66:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:66:27: error: request for member 'time'
> in something not a structure or union
> ./event/hook/windows/event_c.h:73:22: error: request for member 'type'
> in something not a structure or union
> ./event/hook/windows/event_c.h:73:30: error: 'INPUT_MOUSE' undeclared
> (first use in this function) ./event/hook/windows/event_c.h:74:22:
> error: request for member 'mi' in something not a structure or union
> ./event/hook/windows/event_c.h:74:25: error: request for member 'dx'
> in something not a structure or union
> ./event/hook/windows/event_c.h:75:22: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:75:25: error: request for member 'dy'
> in something not a structure or union
> ./event/hook/windows/event_c.h:76:22: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:76:25: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:77:22: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:77:25: error: request for member 'time'
> in something not a structure or union
> ./event/hook/windows/event_c.h:80:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:80:26: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:84:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:84:26: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:88:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:88:26: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:92:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:92:26: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:92:39: error: 'XBUTTON1' undeclared
> (first use in this function) ./event/hook/windows/event_c.h:93:23:
> error: request for member 'mi' in something not a structure or union
> ./event/hook/windows/event_c.h:93:26: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:93:40: error: 'MOUSEEVENTF_XDOWN'
> undeclared (first use in this function)
> ./event/hook/windows/event_c.h:97:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:97:26: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:97:39: error: 'XBUTTON2' undeclared
> (first use in this function) ./event/hook/windows/event_c.h:98:23:
> error: request for member 'mi' in something not a structure or union
> ./event/hook/windows/event_c.h:98:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:107:23: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:107:26: error: request for member 'wVk'
> in something not a structure or union
> ./event/hook/windows/event_c.h:108:27: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:108:30: error: request for member 'wVk'
> in something not a structure or union
> ./event/hook/windows/event_c.h:109:24: error: request for member
> 'type' in something not a structure or union
> ./event/hook/windows/event_c.h:110:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:110:27: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:111:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:111:27: error: request for member
> 'wScan' in something not a structure or union
> ./event/hook/windows/event_c.h:112:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:112:27: error: request for member
> 'time' in something not a structure or union
> ./event/hook/windows/event_c.h:123:23: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:123:26: error: request for member 'wVk'
> in something not a structure or union
> ./event/hook/windows/event_c.h:124:27: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:124:30: error: request for member 'wVk'
> in something not a structure or union
> ./event/hook/windows/event_c.h:125:24: error: request for member
> 'type' in something not a structure or union
> ./event/hook/windows/event_c.h:126:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:126:27: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:127:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:127:27: error: request for member 'wVk'
> in something not a structure or union
> ./event/hook/windows/event_c.h:128:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:128:27: error: request for member
> 'wScan' in something not a structure or union
> ./event/hook/windows/event_c.h:129:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:129:27: error: request for member
> 'time' in something not a structure or union
> ./event/hook/windows/event_c.h:141:23: error: request for member
> 'type' in something not a structure or union
> ./event/hook/windows/event_c.h:142:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:142:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:146:25: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:146:28: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:150:25: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:150:28: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:154:25: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:154:28: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:158:25: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:158:28: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:162:25: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:162:28: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:168:26: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:168:29: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:172:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:172:26: error: request for member 'dx'
> in something not a structure or union
> ./event/hook/windows/event_c.h:173:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:173:26: error: request for member 'dy'
> in something not a structure or union
> ./event/hook/windows/event_c.h:175:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:175:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:176:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:176:26: error: request for member
> 'time' in something not a structure or union
> ./event/hook/windows/event_c.h:182:23: error: request for member
> 'type' in something not a structure or union
> ./event/hook/windows/event_c.h:183:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:183:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:183:37: error: 'MOUSEEVENTF_XUP'
> undeclared (first use in this function)
> ./event/hook/windows/event_c.h:187:25: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:187:28: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:191:25: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:191:28: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:195:25: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:195:28: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:199:25: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:199:28: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:203:25: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:203:28: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:209:26: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:209:29: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:213:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:213:26: error: request for member 'dx'
> in something not a structure or union
> ./event/hook/windows/event_c.h:214:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:214:26: error: request for member 'dy'
> in something not a structure or union
> ./event/hook/windows/event_c.h:216:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:216:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:217:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:217:26: error: request for member
> 'time' in something not a structure or union
> ./event/hook/windows/event_c.h:223:23: error: request for member
> 'type' in something not a structure or union
> ./event/hook/windows/event_c.h:224:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:224:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:227:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:227:26: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:229:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:229:26: error: request for member 'dx'
> in something not a structure or union
> ./event/hook/windows/event_c.h:230:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:230:26: error: request for member 'dy'
> in something not a structure or union
> ./event/hook/windows/event_c.h:232:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:232:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:233:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:233:26: error: request for member
> 'time' in something not a structure or union
> ./event/hook/windows/event_c.h:242:23: error: request for member
> 'type' in something not a structure or union
> ./event/hook/windows/event_c.h:243:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:243:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:245:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:245:26: error: request for member 'dx'
> in something not a structure or union
> ./event/hook/windows/event_c.h:246:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:246:26: error: request for member 'dy'
> in something not a structure or union
> ./event/hook/windows/event_c.h:248:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:248:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:249:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:249:26: error: request for member
> 'time' in something not a structure or union
> ./event/hook/windows/event_c.h:274:24: error: request for member
> 'type' in something not a structure or union
> ./event/hook/windows/event_c.h:275:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:275:27: error: request for member 'wVk'
> in something not a structure or union
> ./event/hook/windows/event_c.h:276:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:276:27: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:277:24: error: request for member 'ki'
> in something not a structure or union
> ./event/hook/windows/event_c.h:277:27: error: request for member
> 'time' in something not a structure or union
> ./event/hook/windows/event_c.h:284:22: error: request for member
> 'type' in something not a structure or union
> ./event/hook/windows/event_c.h:285:22: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:285:25: error: request for member 'dx'
> in something not a structure or union
> ./event/hook/windows/event_c.h:286:22: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:286:25: error: request for member 'dy'
> in something not a structure or union
> ./event/hook/windows/event_c.h:287:22: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:287:25: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:288:22: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:288:25: error: request for member
> 'time' in something not a structure or union
> ./event/hook/windows/event_c.h:294:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:294:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:298:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:298:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:302:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:302:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:306:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:306:26: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:307:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:307:26: error: request for member
> 'dwFlags' in something not a structure or union
> ./event/hook/windows/event_c.h:311:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:311:26: error: request for member
> 'mouseData' in something not a structure or union
> ./event/hook/windows/event_c.h:312:23: error: request for member 'mi'
> in something not a structure or union
> ./event/hook/windows/event_c.h:312:26: error: request for member
> 'dwFlags' in something not a structure or union
> 
> G:\ProgramFiles\Go32>go get github.com/go-vgo/robotgo
",26237
1287,40785588,defer profile.Start(profile.CPUProfile).Stop(),46
1288,40785588,github.com/pkg/profile,22
1289,40785588,"2016/11/24 18:41:24 profile: caught interrupt, stopping profiles
2016/11/24 18:41:24 profile: cpu profiling disabled, /tmp/profile627033993/cpu.pprof
",150
1290,40785588,go tool pprof -text /tmp/profile627033993/cpu.pprof,51
1291,40785588,"$ go tool pprof -text /tmp/profile627033993/cpu.pprof
12.89s of 16.31s total (79.03%)
Dropped 386 nodes (cum <= 0.08s)
  flat  flat%   sum%        cum   cum%
 7.26s 44.51% 44.51%      7.40s 45.37%  syscall.Syscall
 0.42s  2.58% 47.09%      0.62s  3.80%  runtime.scanobject
 0.38s  2.33% 49.42%      1.09s  6.68%  runtime.mallocgc
 0.32s  1.96% 51.38%      0.32s  1.96%  runtime.memmove
 0.27s  1.66% 53.03%      0.27s  1.66%  runtime.futex
 0.25s  1.53% 54.57%      1.21s  7.42%  runtime.gentraceback
 0.21s  1.29% 55.86%      0.59s  3.62%  runtime.pcvalue
 0.19s  1.16% 57.02%      0.19s  1.16%  runtime.usleep
 0.18s  1.10% 58.12%      0.18s  1.10%  runtime.readvarint
 0.15s  0.92% 59.04%      0.15s  0.92%  runtime.heapBitsForObject
 0.15s  0.92% 59.96%      0.15s  0.92%  runtime.heapBitsSetType
 0.14s  0.86% 60.82%      0.14s  0.86%  runtime._ExternalCode
 0.14s  0.86% 61.68%      0.14s  0.86%  runtime.epollctl
 0.13s   0.8% 62.48%      0.13s   0.8%  runtime.rtsigprocmask
 0.12s  0.74% 63.21%      0.16s  0.98%  runtime.deferreturn
 0.12s  0.74% 63.95%      0.17s  1.04%  runtime.greyobject
 0.12s  0.74% 64.68%      0.16s  0.98%  syscall.Syscall6
 0.11s  0.67% 65.36%      0.40s  2.45%  runtime.adjustframe
 0.11s  0.67% 66.03%      0.11s  0.67%  runtime.adjustpointers
 0.11s  0.67% 66.71%      0.11s  0.67%  runtime.memclr
 0.11s  0.67% 67.38%      0.29s  1.78%  runtime.step
 0.10s  0.61% 68.00%      1.53s  9.38%  runtime.systemstack
 0.07s  0.43% 68.42%      0.21s  1.29%  runtime.mapassign1
 0.07s  0.43% 68.85%      0.25s  1.53%  runtime.rawstring
 0.06s  0.37% 69.22%      0.17s  1.04%  runtime.scanblock
 0.06s  0.37% 69.59%      0.17s  1.04%  time.Time.AppendFormat
 0.05s  0.31% 69.90%      0.12s  0.74%  runtime.casgstatus
 0.05s  0.31% 70.20%      0.10s  0.61%  runtime.lock
 0.05s  0.31% 70.51%      0.56s  3.43%  runtime.newobject
 0.05s  0.31% 70.82%      0.18s  1.10%  runtime.tracebackdefers
 0.04s  0.25% 71.06%      0.75s  4.60%  bufio.(*Reader).ReadSlice
 0.04s  0.25% 71.31%      0.32s  1.96%  fmt.(*pp).doPrintf
 0.04s  0.25% 71.55%      7.22s 44.27%  gitlab.com/kokizzu/gokil/W.LoadSession
 0.04s  0.25% 71.80%      0.32s  1.96%  runtime.scanframeworker
 0.04s  0.25% 72.04%      0.12s  0.74%  runtime.typedmemmove
 0.03s  0.18% 72.23%      0.25s  1.53%  fmt.(*pp).printArg
 0.03s  0.18% 72.41%      0.47s  2.88%  github.com/op/go-logging.(*stringFormatter).Format
 0.03s  0.18% 72.59%      0.67s  4.11%  net.(*netFD).Read
 0.03s  0.18% 72.78%     12.43s 76.21%  net/http.(*conn).serve
 0.03s  0.18% 72.96%      0.11s  0.67%  runtime.(*mcentral).cacheSpan
 0.03s  0.18% 73.15%      0.10s  0.61%  runtime.deferproc.func1
 0.03s  0.18% 73.33%      0.10s  0.61%  runtime.exitsyscall
 0.03s  0.18% 73.51%      0.09s  0.55%  runtime.makemap
 0.03s  0.18% 73.70%      0.72s  4.41%  runtime.markroot
 0.03s  0.18% 73.88%      0.09s  0.55%  runtime.runqgrab
 0.02s  0.12% 74.00%      0.65s  3.99%  github.com/garyburd/redigo/redis.(*conn).readLine
 0.02s  0.12% 74.13%      0.78s  4.78%  github.com/garyburd/redigo/redis.(*conn).readReply
 0.02s  0.12% 74.25%      0.09s  0.55%  github.com/garyburd/redigo/redis.(*conn).writeCommand
 0.02s  0.12% 74.37%      0.39s  2.39%  gitlab.com/kokizzu/gokil/Z.(*TemplateChain).Render
 0.02s  0.12% 74.49%      1.28s  7.85%  main.AuthFilter
 0.02s  0.12% 74.62%      0.32s  1.96%  net.(*netFD).accept
 0.02s  0.12% 74.74%      4.74s 29.06%  net.dialSingle
 0.02s  0.12% 74.86%      0.11s  0.67%  net/http.(*connReader).Read
 0.02s  0.12% 74.98%      0.66s  4.05%  net/http.(*response).finishRequest
 0.02s  0.12% 75.11%      0.49s  3.00%  net/http.readRequest
 0.02s  0.12% 75.23%      0.10s  0.61%  runtime.SetFinalizer
 0.02s  0.12% 75.35%      0.10s  0.61%  runtime.concatstrings
 0.02s  0.12% 75.48%      0.68s  4.17%  runtime.findrunnable
 0.02s  0.12% 75.60%      0.27s  1.66%  runtime.makeslice
 0.02s  0.12% 75.72%      0.90s  5.52%  runtime.morestack
 0.02s  0.12% 75.84%      0.12s  0.74%  runtime.newarray
 0.02s  0.12% 75.97%      0.32s  1.96%  runtime.pcdatavalue
 0.02s  0.12% 76.09%      0.27s  1.66%  runtime.rawstringtmp
 0.02s  0.12% 76.21%      0.78s  4.78%  runtime.schedule
 0.02s  0.12% 76.33%      0.57s  3.49%  syscall.read
 0.01s 0.061% 76.39%      0.71s  4.35%  bufio.(*Reader).fill
 0.01s 0.061% 76.46%      1.82s 11.16%  bufio.(*Writer).flush
 0.01s 0.061% 76.52%      0.34s  2.08%  fmt.Sprintf
 0.01s 0.061% 76.58%      5.19s 31.82%  github.com/garyburd/redigo/redis.(*Pool).get
 0.01s 0.061% 76.64%      0.25s  1.53%  github.com/garyburd/redigo/redis.(*Pool).put
 0.01s 0.061% 76.70%      2.14s 13.12%  github.com/garyburd/redigo/redis.(*conn).Do
 0.01s 0.061% 76.76%      0.31s  1.90%  github.com/garyburd/redigo/redis.(*pooledConnection).Close
 0.01s 0.061% 76.82%      1.96s 12.02%  github.com/garyburd/redigo/redis.(*pooledConnection).Do
 0.01s 0.061% 76.89%      0.75s  4.60%  github.com/op/go-logging.(*Logger).Notice
 0.01s 0.061% 76.95%      0.74s  4.54%  github.com/op/go-logging.(*backendFormatter).Log
 0.01s 0.061% 77.01%      0.42s  2.58%  gitlab.com/kokizzu/gokil/W.(*Context).Finish
 0.01s 0.061% 77.07%      0.42s  2.58%  gitlab.com/kokizzu/gokil/W.(*Context).Render
 0.01s 0.061% 77.13%     10.37s 63.58%  gitlab.com/kokizzu/gokil/W.(*Engine).ServeHTTP
 0.01s 0.061% 77.19%      0.10s  0.61%  gitlab.com/kokizzu/gokil/W.(*Session).parseIpAddr
 0.01s 0.061% 77.25%      2.57s 15.76%  gitlab.com/kokizzu/gokil/W.Logger
 0.01s 0.061% 77.31%      0.37s  2.27%  net.(*TCPListener).AcceptTCP
 0.01s 0.061% 77.38%      0.68s  4.17%  net.(*conn).Read
 0.01s 0.061% 77.44%      1.62s  9.93%  net.(*conn).Write
 0.01s 0.061% 77.50%      4.62s 28.33%  net.(*netFD).connect
 0.01s 0.061% 77.56%      0.10s  0.61%  net.(*pollDesc).init
 0.01s 0.061% 77.62%      4.71s 28.88%  net.doDialTCP
 0.01s 0.061% 77.68%      0.09s  0.55%  net.runtime_pollClose
 0.01s 0.061% 77.74%      0.18s  1.10%  net/http.(*chunkWriter).writeHeader
 0.01s 0.061% 77.81%     10.38s 63.64%  net/http.serverHandler.ServeHTTP
 0.01s 0.061% 77.87%      0.43s  2.64%  net/http.tcpKeepAliveListener.Accept
 0.01s 0.061% 77.93%      0.14s  0.86%  runtime.adjustdefers
 0.01s 0.061% 77.99%      0.11s  0.67%  runtime.callers.func1
 0.01s 0.061% 78.05%      0.23s  1.41%  runtime.convT2E
 0.01s 0.061% 78.11%      0.12s  0.74%  runtime.deferproc
 0.01s 0.061% 78.17%      0.29s  1.78%  runtime.funcspdelta
 0.01s 0.061% 78.23%      0.14s  0.86%  runtime.futexsleep
 0.01s 0.061% 78.30%      0.24s  1.47%  runtime.gcAssistAlloc
 0.01s 0.061% 78.36%      1.18s  7.23%  runtime.gcDrain
 0.01s 0.061% 78.42%      0.20s  1.23%  runtime.gcDrainN
 0.01s 0.061% 78.48%      0.09s  0.55%  runtime.gcMarkTermination
 0.01s 0.061% 78.54%      0.10s  0.61%  runtime.netpoll
 0.01s 0.061% 78.60%      0.88s  5.40%  runtime.newstack
 0.01s 0.061% 78.66%      0.14s  0.86%  runtime.notesleep
 0.01s 0.061% 78.72%      0.64s  3.92%  runtime.park_m
 0.01s 0.061% 78.79%      0.10s  0.61%  runtime.runqsteal
 0.01s 0.061% 78.85%      0.59s  3.62%  runtime.scang
 0.01s 0.061% 78.91%      0.53s  3.25%  runtime.scanstack
 0.01s 0.061% 78.97%      0.14s  0.86%  runtime.startm
 0.01s 0.061% 79.03%      1.67s 10.24%  syscall.Write
     0     0% 79.03%      0.12s  0.74%  bufio.(*Reader).ReadLine
     0     0% 79.03%      1.82s 11.16%  bufio.(*Writer).Flush
     0     0% 79.03%      0.09s  0.55%  bytes.(*Buffer).Write
     0     0% 79.03%      0.14s  0.86%  fmt.Fprintf
     0     0% 79.03%      0.17s  1.04%  github.com/fatih/color.(*Color).SprintfFunc.func1
     0     0% 79.03%      0.17s  1.04%  github.com/fatih/color.BlueString
     0     0% 79.03%      0.17s  1.04%  github.com/fatih/color.printString
     0     0% 79.03%      5.21s 31.94%  github.com/garyburd/redigo/redis.(*Pool).Get
     0     0% 79.03%      0.17s  1.04%  github.com/garyburd/redigo/redis.(*conn).Close
     0     0% 79.03%      4.91s 30.10%  github.com/garyburd/redigo/redis.(*xDialer).Dial
     0     0% 79.03%      4.93s 30.23%  github.com/garyburd/redigo/redis.Dial
     0     0% 79.03%      0.73s  4.48%  github.com/op/go-logging.(*LogBackend).Log
     0     0% 79.03%      0.74s  4.54%  github.com/op/go-logging.(*Logger).log
     0     0% 79.03%      0.49s  3.00%  github.com/op/go-logging.(*Record).Formatted
     0     0% 79.03%      0.74s  4.54%  github.com/op/go-logging.(*moduleLeveled).Log
     0     0% 79.03%      0.46s  2.82%  gitlab.com/kokizzu/gokil/W.(*Engine).StartServer
     0     0% 79.03%      0.30s  1.84%  gitlab.com/kokizzu/gokil/W.(*Session).Save
     0     0% 79.03%      0.73s  4.48%  gitlab.com/kokizzu/gokil/W.(*Session).Touch
     0     0% 79.03%      5.16s 31.64%  gitlab.com/kokizzu/gokil/W.InitSession.func1
     0     0% 79.03%      1.32s  8.09%  gitlab.com/kokizzu/gokil/W.Recover
     0     0% 79.03%      0.73s  4.48%  gitlab.com/kokizzu/gokil/W.Session.ShouldRenew
     0     0% 79.03%      0.09s  0.55%  gitlab.com/kokizzu/gokil/W.hashCookie
     0     0% 79.03%      0.24s  1.47%  gitlab.com/kokizzu/gokil/W.newSession
     0     0% 79.03%      0.27s  1.66%  gitlab.com/kokizzu/gokil/Z.(*TemplateChain).Reload
     0     0% 79.03%      0.24s  1.47%  log.(*Logger).Output
     0     0% 79.03%      0.52s  3.19%  main.Test
     0     0% 79.03%      0.46s  2.82%  main.main
     0     0% 79.03%      4.81s 29.49%  net.(*Dialer).Dial
     0     0% 79.03%      4.81s 29.49%  net.(*Dialer).DialContext
     0     0% 79.03%      0.36s  2.21%  net.(*TCPListener).accept
     0     0% 79.03%      0.58s  3.56%  net.(*conn).Close
     0     0% 79.03%      0.58s  3.56%  net.(*netFD).Close
     0     0% 79.03%      1.61s  9.87%  net.(*netFD).Write
     0     0% 79.03%      0.57s  3.49%  net.(*netFD).decref
     0     0% 79.03%      0.57s  3.49%  net.(*netFD).destroy
     0     0% 79.03%      4.65s 28.51%  net.(*netFD).dial
     0     0% 79.03%      0.10s  0.61%  net.(*netFD).init
     0     0% 79.03%      0.09s  0.55%  net.(*pollDesc).close
     0     0% 79.03%      4.81s 29.49%  net.Dial
     0     0% 79.03%      0.11s  0.67%  net.accept
     0     0% 79.03%      4.74s 29.06%  net.dialSerial
     0     0% 79.03%      4.71s 28.88%  net.dialTCP
     0     0% 79.03%      4.69s 28.76%  net.internetSocket
     0     0% 79.03%      4.69s 28.76%  net.socket
     0     0% 79.03%      0.26s  1.59%  net/http.(*Cookie).String
     0     0% 79.03%      0.46s  2.82%  net/http.(*Server).ListenAndServe
     0     0% 79.03%      0.46s  2.82%  net/http.(*Server).Serve
     0     0% 79.03%      0.18s  1.10%  net/http.(*chunkWriter).Write
     0     0% 79.03%      0.47s  2.88%  net/http.(*conn).close
     0     0% 79.03%      0.61s  3.74%  net/http.(*conn).readRequest
     0     0% 79.03%      0.47s  2.88%  net/http.(*conn).serve.func1
     0     0% 79.03%      0.10s  0.61%  net/http.(*response).WriteHeader
     0     0% 79.03%      0.46s  2.82%  net/http.ListenAndServe
     0     0% 79.03%      0.26s  1.59%  net/http.SetCookie
     0     0% 79.03%      0.40s  2.45%  net/http.checkConnErrorWriter.Write
     0     0% 79.03%      0.16s  0.98%  net/textproto.(*Reader).ReadLine
     0     0% 79.03%      0.16s  0.98%  net/textproto.(*Reader).ReadMIMEHeader
     0     0% 79.03%      0.12s  0.74%  net/textproto.(*Reader).readLineSlice
     0     0% 79.03%      0.20s  1.23%  os.(*File).Write
     0     0% 79.03%      0.20s  1.23%  os.(*File).write
     0     0% 79.03%      0.22s  1.35%  os.Stat
     0     0% 79.03%      0.17s  1.04%  runtime.(*mcache).nextFree
     0     0% 79.03%      0.11s  0.67%  runtime.(*mcache).nextFree.func1
     0     0% 79.03%      0.11s  0.67%  runtime.(*mcache).refill
     0     0% 79.03%      0.13s   0.8%  runtime.Caller
     0     0% 79.03%      0.30s  1.84%  runtime._System
     0     0% 79.03%      0.11s  0.67%  runtime.callers
     0     0% 79.03%      0.86s  5.27%  runtime.copystack
     0     0% 79.03%      0.14s  0.86%  runtime.futexwakeup
     0     0% 79.03%      0.20s  1.23%  runtime.gcAssistAlloc.func1
     0     0% 79.03%      1.07s  6.56%  runtime.gcBgMarkWorker
     0     0% 79.03%      0.09s  0.55%  runtime.gcMarkDone
     0     0% 79.03%      0.19s  1.16%  runtime.gchelper
     0     0% 79.03%        14s 85.84%  runtime.goexit
     0     0% 79.03%      0.16s  0.98%  runtime.goexit0
     0     0% 79.03%      0.46s  2.82%  runtime.main
     0     0% 79.03%      0.59s  3.62%  runtime.markroot.func1
     0     0% 79.03%      0.87s  5.33%  runtime.mcall
     0     0% 79.03%      0.13s   0.8%  runtime.minit
     0     0% 79.03%      0.26s  1.59%  runtime.mstart
     0     0% 79.03%      0.26s  1.59%  runtime.mstart1
     0     0% 79.03%      0.12s  0.74%  runtime.notewakeup
     0     0% 79.03%      0.32s  1.96%  runtime.scanstack.func1
     0     0% 79.03%      0.24s  1.47%  runtime.slicebytetostring
     0     0% 79.03%      0.35s  2.15%  runtime.stopm
     0     0% 79.03%      0.13s   0.8%  runtime.sysmon
     0     0% 79.03%      0.10s  0.61%  syscall.Accept4
     0     0% 79.03%      0.43s  2.64%  syscall.Close
     0     0% 79.03%      4.56s 27.96%  syscall.Connect
     0     0% 79.03%      0.57s  3.49%  syscall.Read
     0     0% 79.03%      0.21s  1.29%  syscall.Stat
     0     0% 79.03%      0.10s  0.61%  syscall.accept4
     0     0% 79.03%      4.56s 27.96%  syscall.connect
     0     0% 79.03%      1.66s 10.18%  syscall.write
     0     0% 79.03%      0.18s  1.10%  time.Time.Format
",13342
1292,40796666,"type Employee struct {
        Name               string
        EmpId              string
        Password           string
        PhoneNumber        int32
        EmailAddress       string
        Position           string
        AccessLevel        string
        Gender             string
        MaritalStatus      string
        Nationality        string
        Department         string
        ICNumber           string
        JoinDate           time.Time
        ConfirmationDate   time.Time
        EndDate            time.Time
        AnnualLeave        []*AnnualLeaveInfo
        MedicalLeave       []*MedicalLeaveInfo
        NopayLeave         []*NopayLeaveInfo
        ChildcareLeave     []*ChildcareLeaveInfo
    }

type AnnualLeaveInfo struct {
        Id           int
        Days         float64
        Type         string
        From         time.Time
        To           time.Time
        AppliedDate  time.Time
        Status       string
        Certificate  []*CertificateInfo
    }
",1014
1293,40796666,"  ""0"": {
    ""LeaveEmpId"": ""rajeshk"",
    ""Name"": ""rahul"",
    ""LeaveId"": 8,
    ""LeaveType"": ""annualleave"",
    ""LeaveTotal"": 2,
    ""LeaveDays"": 1,
    ""LeaveFrom"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveTo"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveAppliedDate"": ""2016-11-21T10:29:33.713+08:00"",
    ""LeaveStatus"": ""Processing"",
    ""CertificateName"": [
      ""1.pdf"",
      ""2.pdf""
    ]
  },
  ""1"": {
    ""LeaveEmpId"": ""rajeshk"",
    ""LeaveName"": ""Rajesh"",
    ""LeaveId"": 7,
    ""LeaveType"": ""medicalleave"",
    ""LeaveTotal"": 3,
    ""LeaveDays"": 1,
    ""LeaveFrom"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveTo"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveAppliedDate"": ""2016-11-21T10:27:06.12+08:00"",
    ""LeaveStatus"": ""Processing"",
    ""CertificateName"": [
      ""1.pdf"",
      ""2.pdf""
    ]
  },
  ""2"": {
    ""LeaveEmpId"": ""kumar"",
    ""LeaveName"": ""madia"",
    ""LeaveId"": 6,
    ""LeaveType"": ""nopayleave"",
    ""LeaveTotal"": 4,
    ""LeaveDays"": 1,
    ""LeaveFrom"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveTo"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveAppliedDate"": ""2016-11-21T10:11:58.283+08:00"",
    ""LeaveStatus"": ""Processing"",
    ""CertificateName"": [
      ""1.pdf"",
      ""2.pdf""
    ]
  },
  ""3"": {
    ""LeaveEmpId"": ""master"",
    ""LeaveName"": ""kumar"",
    ""LeaveId"": 5,
    ""LeaveType"": ""nopayleave"",
    ""LeaveTotal"": 5,
    ""LeaveDays"": 1,
    ""LeaveFrom"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveTo"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveAppliedDate"": ""2016-11-21T10:02:17.565+08:00"",
    ""LeaveStatus"": ""Processing"",
    ""CertificateName"": [
      ""1.pdf"",
      ""2.pdf""
    ]
  },
  ""4"": {
    ""LeaveEmpId"": ""rajeshk"",
    ""LeaveName"": ""Rajesh"",
    ""LeaveId"": 4,
    ""LeaveType"": ""medicalleave"",
    ""LeaveTotal"": 6,
    ""LeaveDays"": 1,
    ""LeaveFrom"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveTo"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveAppliedDate"": ""2016-11-21T09:52:20.185+08:00"",
    ""LeaveStatus"": ""Processing"",
    ""CertificateName"": [
      ""1.pdf"",
      ""2.pdf""
    ]
  },
  ""5"": {
    ""LeaveEmpId"": ""rajeshk"",
    ""LeaveName"": ""Rajesh"",
    ""LeaveId"": 3,
    ""LeaveType"": ""annualleave"",
    ""LeaveTotal"": 7,
    ""LeaveDays"": 1,
    ""LeaveFrom"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveTo"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveAppliedDate"": ""2016-11-21T09:49:18.702+08:00"",
    ""LeaveStatus"": ""Processing"",
    ""CertificateName"": [
      ""1.pdf"",
      ""2.pdf""
    ]
  },
  ""6"": {
    ""LeaveEmpId"": ""india"",
    ""LeaveName"": ""rahul"",
    ""LeaveId"": 2,
    ""LeaveType"": ""nopayleave"",
    ""LeaveTotal"": 8,
    ""LeaveDays"": 1,
    ""LeaveFrom"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveTo"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveAppliedDate"": ""2016-11-21T09:30:14.99+08:00"",
    ""LeaveStatus"": ""Processing"",
    ""CertificateName"": [
      ""1.pdf"",
      ""2.pdf""
    ]
  },
  ""7"": {
    ""LeaveEmpId"": ""rajeshk"",
    ""LeaveName"": ""Rajesh"",
    ""LeaveId"": 1,
    ""LeaveType"": ""medicalleave"",
    ""LeaveTotal"": 9,
    ""LeaveDays"": 1,
    ""LeaveFrom"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveTo"": ""2016-12-12T08:00:00+08:00"",
    ""LeaveAppliedDate"": ""2016-11-21T09:28:02.785+08:00"",
    ""LeaveStatus"": ""Processing"",
    ""CertificateName"": [
      ""1.pdf"",
      ""2.pdf""
    ]
 }
",3190
1294,40796666,"{
    ""_id"" : ObjectId(""58320cec720fed31a3243683""),
    ""name"" : ""Rajesh"",
    ""empid"" : ""rajeshk"",
    ""password"" : ""c1e1a43a3d65ff4d669f2831b9908acb9e2f755c48280e99f0d7a3e92592fa29"",
    ""phonenumber"" : 0,
    ""emailaddress"" : ""example@example.com.sg"",
    ""position"" : ""string"",
    ""accesslevel"" : ""string"",
    ""gender"" : ""string"",
    ""maritalstatus"" : ""string"",
    ""nationality"" : ""india"",
    ""department"" : ""it"",
    ""icnumber"" : ""string"",
    ""childcitizenship"" : ""string"",
    ""joindate"" : ISODate(""2015-11-21T00:00:00.000Z""),
    ""confirmationdate"" : Date(-62135596800000),
    ""enddate"" : Date(-62135596800000),
    ""totalchild"" : 0,
    ""annualleave"" : [ 
        {

            ""id"" : 0,
            ""days"" : 0.0,
            ""type"" : """",
            ""from"" : Date(-62135596800000),
            ""to"" : Date(-62135596800000),
            ""applieddate"" : Date(-62135596800000),
            ""status"" : """",
            ""approveddate"" : Date(-62135596800000),
            ""certificate"" : []
        }
    ],
    ""medicalleave"" : [ 
        {

            ""id"" : 0,
            ""days"" : 0.0,
            ""type"" : """",
            ""from"" : Date(-62135596800000),
            ""to"" : Date(-62135596800000),
            ""applieddate"" : Date(-62135596800000),
            ""status"" : """",
            ""approveddate"" : Date(-62135596800000),
            ""certificate"" : []
        }
    ],
    ""nopayleave"" : [ 
        {
            ""total"" : 10.0,
            ""id"" : 0,
            ""days"" : 0.0,
            ""type"" : """",
            ""from"" : Date(-62135596800000),
            ""to"" : Date(-62135596800000),
            ""applieddate"" : Date(-62135596800000),
            ""status"" : """",
            ""approveddate"" : Date(-62135596800000),
            ""certificate"" : []
        }, 
        {
            ""total"" : 9.0,
            ""id"" : 1,
            ""days"" : 1.0,
            ""mdays"" : 0.0,
            ""type"" : ""nopayleave"",
            ""daytype"" : ""FullDay"",
            ""from"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""to"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""applieddate"" : ISODate(""2016-11-21T01:28:02.785Z""),
            ""status"" : ""Processing"",
            ""approveddate"" : Date(-62135596800000),
            ""certificatename"" : """",
            ""certificate"" : [ 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }, 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }
            ]
        }, 
        {
            ""total"" : 8.0,
            ""id"" : 2,
            ""days"" : 1.0,
            ""mdays"" : 0.0,
            ""type"" : ""nopayleave"",
            ""daytype"" : ""FullDay"",
            ""from"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""to"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""applieddate"" : ISODate(""2016-11-21T01:30:14.990Z""),
            ""status"" : ""Processing"",
            ""approveddate"" : Date(-62135596800000),
            ""certificatename"" : """",
            ""certificate"" : [ 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }, 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }
            ]
        }, 
        {
            ""total"" : 7.0,
            ""id"" : 3,
            ""days"" : 1.0,
            ""mdays"" : 0.0,
            ""type"" : ""nopayleave"",
            ""daytype"" : ""FullDay"",
            ""from"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""to"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""applieddate"" : ISODate(""2016-11-21T01:49:18.702Z""),
            ""status"" : ""Processing"",
            ""approveddate"" : Date(-62135596800000),
            ""certificatename"" : """",
            ""certificate"" : [ 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }, 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }
            ]
        }, 
        {
            ""total"" : 6.0,
            ""id"" : 4,
            ""days"" : 1.0,
            ""mdays"" : 0.0,
            ""type"" : ""nopayleave"",
            ""daytype"" : ""FullDay"",
            ""from"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""to"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""applieddate"" : ISODate(""2016-11-21T01:52:20.185Z""),
            ""status"" : ""Processing"",
            ""approveddate"" : Date(-62135596800000),
            ""certificatename"" : """",
            ""certificate"" : [ 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }, 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }
            ]
        }, 
        {
            ""total"" : 5.0,
            ""id"" : 5,
            ""days"" : 1.0,
            ""mdays"" : 0.0,
            ""type"" : ""nopayleave"",
            ""daytype"" : ""FullDay"",
            ""from"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""to"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""applieddate"" : ISODate(""2016-11-21T02:02:17.565Z""),
            ""status"" : ""Processing"",
            ""approveddate"" : Date(-62135596800000),
            ""certificatename"" : """",
            ""certificate"" : [ 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }, 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }
            ]
        }, 
        {
            ""total"" : 4.0,
            ""id"" : 6,
            ""days"" : 1.0,
            ""mdays"" : 0.0,
            ""type"" : ""nopayleave"",
            ""daytype"" : ""FullDay"",
            ""from"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""to"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""applieddate"" : ISODate(""2016-11-21T02:11:58.283Z""),
            ""status"" : ""Processing"",
            ""approveddate"" : Date(-62135596800000),
            ""certificatename"" : """",
            ""certificate"" : [ 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }, 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }
            ]
        }, 
        {
            ""total"" : 3.0,
            ""id"" : 7,
            ""days"" : 1.0,
            ""mdays"" : 0.0,
            ""type"" : ""nopayleave"",
            ""daytype"" : ""FullDay"",
            ""from"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""to"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""applieddate"" : ISODate(""2016-11-21T02:27:06.120Z""),
            ""status"" : ""Processing"",
            ""approveddate"" : Date(-62135596800000),
            ""certificatename"" : """",
            ""certificate"" : [ 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }, 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }
            ]
        }, 
        {
            ""total"" : 2.0,
            ""id"" : 8,
            ""days"" : 1.0,
            ""mdays"" : 0.0,
            ""type"" : ""nopayleave"",
            ""daytype"" : ""FullDay"",
            ""from"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""to"" : ISODate(""2016-12-12T00:00:00.000Z""),
            ""applieddate"" : ISODate(""2016-11-21T02:29:33.713Z""),
            ""status"" : ""Processing"",
            ""approveddate"" : Date(-62135596800000),
            ""certificatename"" : """",
            ""certificate"" : [ 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }, 
                {
                    ""filename"" : ""Rajesh"",
                    ""filetype"" : "".zip"",
                    ""filesize"" : 1234
                }
            ]
        }
    ],
    ""childcareleave"" : [ 
        {
            ""total"" : 10.0,
            ""id"" : 0,
            ""days"" : 0.0,
            ""type"" : """",
            ""from"" : Date(-62135596800000),
            ""to"" : Date(-62135596800000),
            ""applieddate"" : Date(-62135596800000),
            ""status"" : """",
            ""approveddate"" : Date(-62135596800000),
            ""certificate"" : []
        }
    ],
    ""hospitalleave"" : [ 
        {
            ""total"" : 10.0,
            ""id"" : 0,
            ""days"" : 0.0,
            ""mdays"" : 0.0,
            ""type"" : """",
            ""daytype"" : """",
            ""from"" : Date(-62135596800000),
            ""to"" : Date(-62135596800000),
            ""applieddate"" : Date(-62135596800000),
            ""status"" : """",
            ""approveddate"" : Date(-62135596800000),
            ""certificatename"" : ""string"",
            ""certificate"" : []
        }
    ],
    ""maternityleave"" : [ 
        {
            ""total"" : 10.0,
            ""id"" : 0,
            ""days"" : 0.0,
            ""mdays"" : 0.0,
            ""type"" : """",
            ""daytype"" : """",
            ""from"" : Date(-62135596800000),
            ""to"" : Date(-62135596800000),
            ""applieddate"" : Date(-62135596800000),
            ""status"" : """",
            ""approveddate"" : Date(-62135596800000),
            ""certificate"" : []
        }
    ],
    ""paternityleave"" : [ 
        {
            ""total"" : 0.0,
            ""id"" : 0,
            ""days"" : 0.0,
            ""mdays"" : 0.0,
            ""type"" : """",
            ""daytype"" : """",
            ""from"" : Date(-62135596800000),
            ""to"" : Date(-62135596800000),
            ""applieddate"" : Date(-62135596800000),
            ""status"" : """",
            ""approveddate"" : Date(-62135596800000),
            ""certificate"" : []
        }
    ],
    ""compassionateleave"" : [ 
        {
            ""total"" : 0.0,
            ""id"" : 0,
            ""days"" : 0.0,
            ""type"" : """",
            ""from"" : Date(-62135596800000),
            ""to"" : Date(-62135596800000),
            ""applieddate"" : Date(-62135596800000),
            ""status"" : """",
            ""approveddate"" : Date(-62135596800000),
            ""certificate"" : []
        }
    ],
    ""marriageleave"" : [ 
        {
            ""total"" : 0.0,
            ""id"" : 0,
            ""days"" : 0.0,
            ""type"" : """",
            ""from"" : Date(-62135596800000),
            ""to"" : Date(-62135596800000),
            ""applieddate"" : Date(-62135596800000),
            ""status"" : """",
            ""approveddate"" : Date(-62135596800000),
            ""certificate"" : []
        }
    ],
    ""otherleave"" : []
}
",11312
1295,40866471,"package ipvs

import (
    ""net""
    ""syscall""
    ""fmt""
    ""os/exec""
    ""strings""
    ""github.com/vishvananda/netlink/nl""
    ""bytes""
    ""encoding/binary""
)

// Service defines an IPVS service in its entirety.
type Service struct {
    // Virtual service address.
    Address  net.IP
    Protocol uint16
    Port     uint16
    FWMark   uint32 // Firewall mark of the service.

    // Virtual service options.
    SchedName     string
    Flags         uint32
    Timeout       uint32
    Netmask       uint32
    AddressFamily uint16
    PEName        string
}

// Destination defines an IPVS destination (real server) in its
// entirety.
type Destination struct {
    Address         net.IP
    Port            uint16
    Weight          int
    ConnectionFlags uint32
    AddressFamily   uint16
    UpperThreshold  uint32
    LowerThreshold  uint32
}


type ServiceDestination struct {
    Service *Service
    Destinations []*Destination
}

// Handle provides an ipvs handle to program ipvs rules.
type IPVSHandle struct {
    ipvsFamily int
}

// NewIPVSHandler provides a new ipvs handler
func NewIPVSHandle() (*IPVSHandle, error) {
    if out, err := exec.Command(""modprobe"", ""-va"", ""ip_vs"").CombinedOutput(); err != nil {
        return nil, fmt.Errorf(""Running modprobe ip_vs failed with message: `%s`, error: %v"", strings.TrimSpace(string(out)), err)
    }

    ipvsFamily, err := getIPVSFamily()
    if err != nil {
        return nil, fmt.Errorf(""Could not get ipvs family information from the kernel. It is possible that ipvs is not enabled in your kernel."")
    }

    return &IPVSHandle{ipvsFamily: ipvsFamily}, nil
}

func ( i *IPVSHandle) Restore(items []ServiceDestination)([][]byte, error) {
    req := nl.NewNetlinkRequest(i.ipvsFamily, syscall.NLM_F_REPLACE)
    req.AddData(&genlMsgHdr{cmd: ipvsCmdSetConfig, version: 1})


    listAttr := nl.NewRtAttr(ipvsCmdAttrUnspec, nl.Uint16Attr(uint16(i.ipvsFamily)))

    for _, item := range  items {
        itemAttr := nl.NewRtAttr(ipvsCmdAttrUnspec, nl.Uint16Attr(uint16(i.ipvsFamily)))

        srvAttr := toServiceAttr(item.Service)
        nl.NewRtAttrChild(itemAttr, ipvsCmdAttrService, srvAttr.Serialize())

        for _, d := range item.Destinations {
            nl.NewRtAttrChild(itemAttr, ipvsCmdAttrDest, fillDestinaton(d).Serialize())
        }

        nl.NewRtAttrChild(listAttr, ipvsCmdAttrUnspec, itemAttr.Serialize())
    }

    req.AddData(listAttr)
    return req.Execute(syscall.NETLINK_GENERIC, 0)
}

func toServiceAttr(s *Service) *nl.RtAttr {
    cmdAttr := nl.NewRtAttr(ipvsCmdAttrService, nil)
    nl.NewRtAttrChild(cmdAttr, ipvsSvcAttrAddressFamily, nl.Uint16Attr(s.AddressFamily))
    if s.FWMark != 0 {
        nl.NewRtAttrChild(cmdAttr, ipvsSvcAttrFWMark, nl.Uint32Attr(s.FWMark))
    } else {
        nl.NewRtAttrChild(cmdAttr, ipvsSvcAttrProtocol, nl.Uint16Attr(s.Protocol))
        nl.NewRtAttrChild(cmdAttr, ipvsSvcAttrAddress, rawIPData(s.Address))

        // Port needs to be in network byte order.
        portBuf := new(bytes.Buffer)
        binary.Write(portBuf, binary.BigEndian, s.Port)
        nl.NewRtAttrChild(cmdAttr, ipvsSvcAttrPort, portBuf.Bytes())
    }

    nl.NewRtAttrChild(cmdAttr, ipvsSvcAttrSchedName, nl.ZeroTerminated(s.SchedName))
    if s.PEName != """" {
        nl.NewRtAttrChild(cmdAttr, ipvsSvcAttrPEName, nl.ZeroTerminated(s.PEName))
    }

    f := &ipvsFlags{
        flags: s.Flags,
        mask:  0xFFFFFFFF,
    }
    nl.NewRtAttrChild(cmdAttr, ipvsSvcAttrFlags, f.Serialize())
    nl.NewRtAttrChild(cmdAttr, ipvsSvcAttrTimeout, nl.Uint32Attr(s.Timeout))
    nl.NewRtAttrChild(cmdAttr, ipvsSvcAttrNetmask, nl.Uint32Attr(s.Netmask))
    return cmdAttr
}

func fillDestinaton(d *Destination) nl.NetlinkRequestData {
    cmdAttr := nl.NewRtAttr(ipvsCmdAttrDest, nil)

    nl.NewRtAttrChild(cmdAttr, ipvsDestAttrAddress, rawIPData(d.Address))
    // Port needs to be in network byte order.
    portBuf := new(bytes.Buffer)
    binary.Write(portBuf, binary.BigEndian, d.Port)
    nl.NewRtAttrChild(cmdAttr, ipvsDestAttrPort, portBuf.Bytes())

    nl.NewRtAttrChild(cmdAttr, ipvsDestAttrForwardingMethod, nl.Uint32Attr(d.ConnectionFlags&ConnectionFlagFwdMask))
    nl.NewRtAttrChild(cmdAttr, ipvsDestAttrWeight, nl.Uint32Attr(uint32(d.Weight)))
    nl.NewRtAttrChild(cmdAttr, ipvsDestAttrUpperThreshold, nl.Uint32Attr(d.UpperThreshold))
    nl.NewRtAttrChild(cmdAttr, ipvsDestAttrLowerThreshold, nl.Uint32Attr(d.LowerThreshold))

    return cmdAttr
}
",4484
1296,41146449,"var SAMLRESPONSE=""""
",9052
1297,41146449,"-----BEGIN CERTIFICATE-----
MIIDoDCCAoigAwIBAgIGAUtCThIbMA0GCSqGSIb3DQEBBQUAMIGQMQswCQYDVQQGEwJVUzETMBEG
A1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEU
MBIGA1UECwwLU1NPUHJvdmlkZXIxETAPBgNVBAMMCGNvbXBhbnl4MRwwGgYJKoZIhvcNAQkBFg1p
bmZvQG9rdGEuY29tMB4XDTE1MDEzMTIzMjIwN1oXDTQ1MDEzMTIzMjMwN1owgZAxCzAJBgNVBAYT
AlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1TYW4gRnJhbmNpc2NvMQ0wCwYDVQQK
DARPa3RhMRQwEgYDVQQLDAtTU09Qcm92aWRlcjERMA8GA1UEAwwIY29tcGFueXgxHDAaBgkqhkiG
9w0BCQEWDWluZm9Ab2t0YS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDw/YNy
0wRswQ3mvFL7EWSpYIVukBsoi0LYpXr7Jg/IuYFbVjv9qFRj/eGlrmvnk9hbSLxse2ta+jEyaQpu
I+E/Ll+FiKT/Ck5wRVQO7wfUsVLGEyM7kWr+ExahLL3KHKyr934RYvU160tqWv0uBWHdA9dz+jxy
gVUc03XKdKgwJKHXW6gNlQZAS0ZRal05T0DkUIzEc/LAEyLSfAvTs/DyDY141maIHnivKHUrhEg3
Y4QcE/eCYd77Qqhcf4hAsGpXV/pzfXZZJNjOHKlLIDQ6wuLPyPpkkbIDGF6fXejNEkcZcyj2qiic
yvkM/sTgcZlR0Agzxv7PsuezvbhnyGmfAgMBAAEwDQYJKoZIhvcNAQEFBQADggEBAI/lXoYz4wfF
cMdSO9pH5BSCCXL3tcFk2r7Ut68HrYKKd5xMhRzUX7Pn9ae72ZGgb/GX+tUvGessvaEsexlH7H2l
xq2tneMMwwxP6H2FtDJXhWp4LwLWBhnJuCdY1X9oCVXuXBXh21KiKpWGaCy+EJmJcAHFJLzl/zJ+
xZC713QpbvmIlsXQhSmig6UBw4xFH0+PyrQNskV79/0RzLa9P4wYSH9g6ART2apnVTOS/Zo2lS3c
qGxoBt2jJJIWszIvydk52/ZuuWWAOo7k72n3o7M97qnPdsEEh0KinuF6f6RQwzDy9r+bSEXG8CyI
2wwcKRXlunnmgvBs5oQDbhTGxDY=
-----END CERTIFICATE-----
",1315
1298,41209838,"columns := make([]series.Series, df.ncols)
for i, column := range df.columns {
    s := column.Subset(indexes)
    columns[i] = s
}
",132
1299,41209838,"columns := make([]series.Series, df.ncols)
var wg sync.WaitGroup
wg.Add(df.ncols)
for i := range df.columns {
    go func(i int) {
        columns[i] = df.columns[i].Subset(indexes)
        wg.Done()
    }(i)
}
wg.Wait()
",221
1300,41209838,"benchmark                                          old ns/op      new ns/op      delta
BenchmarkDataFrame_Subset/1000000x20_100           55230          109349         +97.99%
BenchmarkDataFrame_Subset/1000000x20_100-2         51457          67714          +31.59%
BenchmarkDataFrame_Subset/1000000x20_100-4         49845          70141          +40.72%
BenchmarkDataFrame_Subset/1000000x20_1000          518506         518085         -0.08%
BenchmarkDataFrame_Subset/1000000x20_1000-2        476661         311379         -34.67%
BenchmarkDataFrame_Subset/1000000x20_1000-4        505023         316583         -37.31%
BenchmarkDataFrame_Subset/1000000x20_10000         6621116        6314112        -4.64%
BenchmarkDataFrame_Subset/1000000x20_10000-2       7316062        4509601        -38.36%
BenchmarkDataFrame_Subset/1000000x20_10000-4       6483812        8394113        +29.46%
BenchmarkDataFrame_Subset/1000000x20_100000        105341711      106427967      +1.03%
BenchmarkDataFrame_Subset/1000000x20_100000-2      94567729       56778647       -39.96%
BenchmarkDataFrame_Subset/1000000x20_100000-4      91896690       60971444       -33.65%
BenchmarkDataFrame_Subset/1000000x20_1000000       1538680081     1632044752     +6.07%
BenchmarkDataFrame_Subset/1000000x20_1000000-2     1292113119     1100075806     -14.86%
BenchmarkDataFrame_Subset/1000000x20_1000000-4     1282367864     949615298      -25.95%
BenchmarkDataFrame_Subset/100000x20_100            50286          106850         +112.48%
BenchmarkDataFrame_Subset/100000x20_100-2          54537          70492          +29.26%
BenchmarkDataFrame_Subset/100000x20_100-4          58024          76617          +32.04%
BenchmarkDataFrame_Subset/100000x20_1000           541600         625967         +15.58%
BenchmarkDataFrame_Subset/100000x20_1000-2         493894         362894         -26.52%
BenchmarkDataFrame_Subset/100000x20_1000-4         535373         349211         -34.77%
BenchmarkDataFrame_Subset/100000x20_10000          6298063        7678499        +21.92%
BenchmarkDataFrame_Subset/100000x20_10000-2        5827185        4832560        -17.07%
BenchmarkDataFrame_Subset/100000x20_10000-4        8195048        3660077        -55.34%
BenchmarkDataFrame_Subset/100000x20_100000         105108807      82976477       -21.06%
BenchmarkDataFrame_Subset/100000x20_100000-2       92112736       58317114       -36.69%
BenchmarkDataFrame_Subset/100000x20_100000-4       92044966       63469935       -31.04%
BenchmarkDataFrame_Subset/1000x20_10               9741           53365          +447.84%
BenchmarkDataFrame_Subset/1000x20_10-2             9366           36457          +289.25%
BenchmarkDataFrame_Subset/1000x20_10-4             9463           46682          +393.31%
BenchmarkDataFrame_Subset/1000x20_100              50841          103523         +103.62%
BenchmarkDataFrame_Subset/1000x20_100-2            49972          62344          +24.76%
BenchmarkDataFrame_Subset/1000x20_100-4            72014          81808          +13.60%
BenchmarkDataFrame_Subset/1000x20_1000             457799         571292         +24.79%
BenchmarkDataFrame_Subset/1000x20_1000-2           460551         405116         -12.04%
BenchmarkDataFrame_Subset/1000x20_1000-4           462928         416522         -10.02%
BenchmarkDataFrame_Subset/1000x200_10              90125          688443         +663.88%
BenchmarkDataFrame_Subset/1000x200_10-2            85259          392705         +360.60%
BenchmarkDataFrame_Subset/1000x200_10-4            87412          387509         +343.31%
BenchmarkDataFrame_Subset/1000x200_100             486600         1082901        +122.54%
BenchmarkDataFrame_Subset/1000x200_100-2           471154         732304         +55.43%
BenchmarkDataFrame_Subset/1000x200_100-4           542846         659571         +21.50%
BenchmarkDataFrame_Subset/1000x200_1000            5926086        6686480        +12.83%
BenchmarkDataFrame_Subset/1000x200_1000-2          5364091        3986970        -25.67%
BenchmarkDataFrame_Subset/1000x200_1000-4          5904977        4504084        -23.72%
BenchmarkDataFrame_Subset/1000x2000_10             1187297        7800052        +556.96%
BenchmarkDataFrame_Subset/1000x2000_10-2           1217022        3930742        +222.98%
BenchmarkDataFrame_Subset/1000x2000_10-4           1301666        3617871        +177.94%
BenchmarkDataFrame_Subset/1000x2000_100            6942015        10790196       +55.43%
BenchmarkDataFrame_Subset/1000x2000_100-2          6588351        7592847        +15.25%
BenchmarkDataFrame_Subset/1000x2000_100-4          7067226        14391327       +103.63%
BenchmarkDataFrame_Subset/1000x2000_1000           62392457       69560711       +11.49%
BenchmarkDataFrame_Subset/1000x2000_1000-2         57793006       37416703       -35.26%
BenchmarkDataFrame_Subset/1000x2000_1000-4         59572261       58398203       -1.97%

benchmark                                          old allocs     new allocs     delta
BenchmarkDataFrame_Subset/1000000x20_100           41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_100-2         41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_100-4         41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_1000          41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_1000-2        41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_1000-4        41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_10000         41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_10000-2       41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_10000-4       41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_100000        41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_100000-2      41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_100000-4      41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_1000000       41             42             +2.44%
BenchmarkDataFrame_Subset/1000000x20_1000000-2     41             43             +4.88%
BenchmarkDataFrame_Subset/1000000x20_1000000-4     41             46             +12.20%
BenchmarkDataFrame_Subset/100000x20_100            41             42             +2.44%
BenchmarkDataFrame_Subset/100000x20_100-2          41             42             +2.44%
BenchmarkDataFrame_Subset/100000x20_100-4          41             42             +2.44%
BenchmarkDataFrame_Subset/100000x20_1000           41             42             +2.44%
BenchmarkDataFrame_Subset/100000x20_1000-2         41             42             +2.44%
BenchmarkDataFrame_Subset/100000x20_1000-4         41             42             +2.44%
BenchmarkDataFrame_Subset/100000x20_10000          41             42             +2.44%
BenchmarkDataFrame_Subset/100000x20_10000-2        41             42             +2.44%
BenchmarkDataFrame_Subset/100000x20_10000-4        41             42             +2.44%
BenchmarkDataFrame_Subset/100000x20_100000         41             42             +2.44%
BenchmarkDataFrame_Subset/100000x20_100000-2       41             42             +2.44%
BenchmarkDataFrame_Subset/100000x20_100000-4       41             42             +2.44%
BenchmarkDataFrame_Subset/1000x20_10               41             42             +2.44%
BenchmarkDataFrame_Subset/1000x20_10-2             41             42             +2.44%
BenchmarkDataFrame_Subset/1000x20_10-4             41             42             +2.44%
BenchmarkDataFrame_Subset/1000x20_100              41             42             +2.44%
BenchmarkDataFrame_Subset/1000x20_100-2            41             42             +2.44%
BenchmarkDataFrame_Subset/1000x20_100-4            41             42             +2.44%
BenchmarkDataFrame_Subset/1000x20_1000             41             42             +2.44%
BenchmarkDataFrame_Subset/1000x20_1000-2           41             42             +2.44%
BenchmarkDataFrame_Subset/1000x20_1000-4           41             42             +2.44%
BenchmarkDataFrame_Subset/1000x200_10              401            402            +0.25%
BenchmarkDataFrame_Subset/1000x200_10-2            401            402            +0.25%
BenchmarkDataFrame_Subset/1000x200_10-4            401            402            +0.25%
BenchmarkDataFrame_Subset/1000x200_100             401            402            +0.25%
BenchmarkDataFrame_Subset/1000x200_100-2           401            402            +0.25%
BenchmarkDataFrame_Subset/1000x200_100-4           401            402            +0.25%
BenchmarkDataFrame_Subset/1000x200_1000            401            402            +0.25%
BenchmarkDataFrame_Subset/1000x200_1000-2          401            402            +0.25%
BenchmarkDataFrame_Subset/1000x200_1000-4          401            402            +0.25%
BenchmarkDataFrame_Subset/1000x2000_10             4001           4002           +0.02%
BenchmarkDataFrame_Subset/1000x2000_10-2           4001           4002           +0.02%
BenchmarkDataFrame_Subset/1000x2000_10-4           4001           4002           +0.02%
BenchmarkDataFrame_Subset/1000x2000_100            4001           4002           +0.02%
BenchmarkDataFrame_Subset/1000x2000_100-2          4001           4002           +0.02%
BenchmarkDataFrame_Subset/1000x2000_100-4          4001           4002           +0.02%
BenchmarkDataFrame_Subset/1000x2000_1000           4001           4002           +0.02%
BenchmarkDataFrame_Subset/1000x2000_1000-2         4001           4010           +0.22%
BenchmarkDataFrame_Subset/1000x2000_1000-4         4001           4003           +0.05%

benchmark                                          old bytes     new bytes     delta
BenchmarkDataFrame_Subset/1000000x20_100           32400         32416         +0.05%
BenchmarkDataFrame_Subset/1000000x20_100-2         32400         32416         +0.05%
BenchmarkDataFrame_Subset/1000000x20_100-4         32400         32416         +0.05%
BenchmarkDataFrame_Subset/1000000x20_1000          298880        298896        +0.01%
BenchmarkDataFrame_Subset/1000000x20_1000-2        298880        298896        +0.01%
BenchmarkDataFrame_Subset/1000000x20_1000-4        298880        298896        +0.01%
BenchmarkDataFrame_Subset/1000000x20_10000         2971520       2971536       +0.00%
BenchmarkDataFrame_Subset/1000000x20_10000-2       2971520       2971536       +0.00%
BenchmarkDataFrame_Subset/1000000x20_10000-4       2971520       2971536       +0.00%
BenchmarkDataFrame_Subset/1000000x20_100000        29083520      29083536      +0.00%
BenchmarkDataFrame_Subset/1000000x20_100000-2      29083520      29083547      +0.00%
BenchmarkDataFrame_Subset/1000000x20_100000-4      29083542      29083563      +0.00%
BenchmarkDataFrame_Subset/1000000x20_1000000       290121600     290121616     +0.00%
BenchmarkDataFrame_Subset/1000000x20_1000000-2     290121600     290121696     +0.00%
BenchmarkDataFrame_Subset/1000000x20_1000000-4     290121600     290121840     +0.00%
BenchmarkDataFrame_Subset/100000x20_100            32400         32416         +0.05%
BenchmarkDataFrame_Subset/100000x20_100-2          32400         32416         +0.05%
BenchmarkDataFrame_Subset/100000x20_100-4          32400         32416         +0.05%
BenchmarkDataFrame_Subset/100000x20_1000           298880        298896        +0.01%
BenchmarkDataFrame_Subset/100000x20_1000-2         298880        298896        +0.01%
BenchmarkDataFrame_Subset/100000x20_1000-4         298880        298896        +0.01%
BenchmarkDataFrame_Subset/100000x20_10000          2971520       2971536       +0.00%
BenchmarkDataFrame_Subset/100000x20_10000-2        2971520       2971536       +0.00%
BenchmarkDataFrame_Subset/100000x20_10000-4        2971520       2971536       +0.00%
BenchmarkDataFrame_Subset/100000x20_100000         29083520      29083536      +0.00%
BenchmarkDataFrame_Subset/100000x20_100000-2       29083520      29083536      +0.00%
BenchmarkDataFrame_Subset/100000x20_100000-4       29083542      29083553      +0.00%
BenchmarkDataFrame_Subset/1000x20_10               4880          4896          +0.33%
BenchmarkDataFrame_Subset/1000x20_10-2             4880          4896          +0.33%
BenchmarkDataFrame_Subset/1000x20_10-4             4880          4896          +0.33%
BenchmarkDataFrame_Subset/1000x20_100              32400         32416         +0.05%
BenchmarkDataFrame_Subset/1000x20_100-2            32400         32416         +0.05%
BenchmarkDataFrame_Subset/1000x20_100-4            32400         32416         +0.05%
BenchmarkDataFrame_Subset/1000x20_1000             298880        298896        +0.01%
BenchmarkDataFrame_Subset/1000x20_1000-2           298880        298896        +0.01%
BenchmarkDataFrame_Subset/1000x20_1000-4           298880        298896        +0.01%
BenchmarkDataFrame_Subset/1000x200_10              49568         49584         +0.03%
BenchmarkDataFrame_Subset/1000x200_10-2            49568         49584         +0.03%
BenchmarkDataFrame_Subset/1000x200_10-4            49568         49585         +0.03%
BenchmarkDataFrame_Subset/1000x200_100             324768        324784        +0.00%
BenchmarkDataFrame_Subset/1000x200_100-2           324768        324784        +0.00%
BenchmarkDataFrame_Subset/1000x200_100-4           324768        324784        +0.00%
BenchmarkDataFrame_Subset/1000x200_1000            2989568       2989584       +0.00%
BenchmarkDataFrame_Subset/1000x200_1000-2          2989568       2989584       +0.00%
BenchmarkDataFrame_Subset/1000x200_1000-4          2989569       2989588       +0.00%
BenchmarkDataFrame_Subset/1000x2000_10             491072        491088        +0.00%
BenchmarkDataFrame_Subset/1000x2000_10-2           491072        491133        +0.01%
BenchmarkDataFrame_Subset/1000x2000_10-4           491072        491088        +0.00%
BenchmarkDataFrame_Subset/1000x2000_100            3243072       3243088       +0.00%
BenchmarkDataFrame_Subset/1000x2000_100-2          3243074       3243102       +0.00%
BenchmarkDataFrame_Subset/1000x2000_100-4          3243076       3243100       +0.00%
BenchmarkDataFrame_Subset/1000x2000_1000           29891072      29891088      +0.00%
BenchmarkDataFrame_Subset/1000x2000_1000-2         29891086      29891797      +0.00%
BenchmarkDataFrame_Subset/1000x2000_1000-4         29891115      29891167      +0.00%
",14472
1301,41209838,rumtime.match_semaphore_signal,30
1302,41209838,runtime.GOMAXPROCS(0),21
1303,41433528,$.getJSON(),11
1304,41433528,$.getJSON,9
1305,41433528,"type Office struct {
    Austin struct {
        Balance string
        RM struct {
            Matt struct {
                Balance string
            }
            John struct {
                Balance string
            }
            Blake struct {
                Balance string
            }
            Jamie struct {
                Balance string
            }
        }
    }
    ElPaso struct {
        Balance string
        RM struct {
            Brenda struct {
                Balance string
            }
            Ericka struct {
                Balance string
            }
            Nicole struct {
                Balance string
            }
            Stephanie struct {
                Balance string
            }
            Tricia struct {
                Balance string
            }
            Viri struct {
                Balance string
            }
        }
    }
    ABL struct {
        Balance string
        RM struct {
            BrianABL struct {
                Balance string
            }
            JamieABL struct {
                Balance string
            }
            JohnABL struct {
                Balance string
            }
            MattABL struct {
                Balance string
            }
            TimABL struct {
                Balance string
            }
        }
    }
}

func getData(res http.ResponseWriter, req *http.Request) {
    office := Office{}
    conn, err := sql.Open(""mssql"", ""my db credentials"")
    if err != nil {
        log.Fatal(""Open connection failed:"", err.Error())
    }
    defer conn.Close()

    rows, err := conn.Query(""my select query"")
    if err != nil {
        panic(err.Error())
    }
    for rows.Next() {
        var Austin, ElPaso, ABL, Matt, John, Blake, Jamie, Brenda, Ericka, Nicole, Stephanie, Tricia, Viri, BrianABL, JamieABL, JohnABL, MattABL, TimABL string
        rows.Scan(&Austin, &ElPaso, &ABL, &Matt, &John, &Blake, &Jamie, &Brenda, &Ericka, &Nicole, &Stephanie, &Tricia, &Viri, &BrianABL, &JamieABL, &JohnABL, &MattABL, &TimABL)
        office.Austin.Balance = Austin
            office.Austin.RM.Matt.Balance = Matt
            office.Austin.RM.John.Balance = John
            office.Austin.RM.Blake.Balance = Blake
            office.Austin.RM.Jamie.Balance = Jamie
        office.ElPaso.Balance = ElPaso
            office.ElPaso.RM.Brenda.Balance = Brenda
            office.ElPaso.RM.Ericka.Balance = Ericka
            office.ElPaso.RM.Nicole.Balance = Nicole
            office.ElPaso.RM.Stephanie.Balance = Stephanie
            office.ElPaso.RM.Tricia.Balance = Tricia
            office.ElPaso.RM.Viri.Balance = Viri
        office.ABL.Balance = ABL
            office.ABL.RM.BrianABL.Balance = BrianABL
            office.ABL.RM.JamieABL.Balance = JamieABL
            office.ABL.RM.JohnABL.Balance = JohnABL
            office.ABL.RM.MattABL.Balance = MattABL
            office.ABL.RM.TimABL.Balance = TimABL
    }
    js, err := json.Marshal(office)
    if err != nil {
        http.Error(res, err.Error(), http.StatusInternalServerError)
        return
    }
    res.Header().Set(""Content-Type"", ""text/json"")
    res.Header().Set(""Access-Control-Allow-Origin"", ""*"")
    res.Write(js)
}
",3232
1306,41433528,"$.getJSON('/getdata',  function(data) {
    for (office in data) {
        if (data.hasOwnProperty(office)) {
            officeVal = 0;
            officeP = {
                id: 'id_' + officeI,
                name: office,
                color: Highcharts.getOptions().colors[officeI]
            };
            officeBalI = 0;
            for (officeBalance in data[office]) {
                if (data[office].hasOwnProperty(officeBalance)) {
                    officeBalanceP = {
                        id: officeP.id + '_' + officeBalI,
                        name: officeBalance,
                        parent: officeP.id
                    };
                    points.push(officeBalanceP);
                    causeI = 0;
                    for (cause in data[office][country]) {
                        if (data[office][country].hasOwnProperty(cause)) {
                            causeP = {
                                id: countryP.id + '_' + causeI,
                                name: causeName[cause],
                                parent: countryP.id,
                                value: Math.round(+data[office][country][cause])
                            };
                            officeVal += causeP.value;
                            points.push(causeP);
                            causeI = causeI + 1;
                        }
                    }
                    countryI = countryI + 1;
                }
            }
            for (RM in data[office]) {
                if (data[office].hasOwnProperty(RM)) {
                    RMP = {
                        id: officeP.id + '_' + RMI,
                        name: RM,
                        parent: officeP.id
                    };
                    points.push(RMP);
              }
            }
            officeP.value = Math.round(officeVal / countryI);
            points.push(officeP);
            officeI = officeI + 1;
        }
    }
    Highcharts.chart('container', {
        series: [{
            type: 'treemap',
            layoutAlgorithm: 'squarified',
            allowDrillToNode: true,
            animationLimit: 1000,
            dataLabels: {
                enabled: false
            },
            levelIsConstant: false,
            levels: [{
                level: 1,
                dataLabels: {
                    enabled: true
                },
                borderWidth: 3
            }],
            data: points
        }],
        subtitle: {
            text: 'Subtitle test'
        },
        title: {
            text: 'Title test'
        }
    });
});
",2621
1307,41433528,"{
    ""Austin"" : {
        ""Balance"" : ""12345.12"",
        ""RM"" : {
            ""Matt"" : {""Balance"" : ""12345.12""},
            ""John"" : {""Balance"" : ""12345.12""},
            ""Blake"" : {""Balance"" : ""12345.12""},
            ""Jamie"" : {""Balance"" : ""12345.12""}
        }
    },
    ""ElPaso"" : {
        ""Balance"" : ""12345.12"",
        ""RM"" : {
            ""Brenda"" : {""Balance"" : ""12345.12""},
            ""Ericka"" : {""Balance"" : ""12345.12""},
            ""Nicole"" : {""Balance"" : ""12345.12""},
            ""Stephanie"" : {""Balance"" : ""12345.12""},
            ""Tricia"" : {""Balance"" : ""12345.12""},
            ""Viri"" : {""Balance"" : ""12345.12""}
        }
    },
    ""ABL"" : {
        ""Balance"" : ""12345.12"",
        ""RM"" : {
            ""BrianABL"" : {""Balance"" : ""12345.12""},
            ""JamieABL"" : {""Balance"" : ""12345.12""},
            ""JohnABL"" : {""Balance"" : ""12345.12""},
            ""MattABL"" : {""Balance"" : ""12345.12""},
            ""TimABL"" : {""Balance"" : ""12345.12""}
        }
    }
}
",982
1308,41673576,filesize >= FileSizeThreshold(50000bytes),41
1309,41673576,file duration >= FileDurationThreshold(1 minute),48
1310,41673576,"package main

import (
    ""os""
    ""path/filepath""
    ""time""
    ""log""
    ""strings""
    ""flag""
    ""os/exec""
)
type FileStruct struct{
    Filename string
    CreatedAt time.Time
}
type FileRotate struct {
    Dir string
    File chan FileStruct
}

const(
    MAX_FILE_SIZE  = 50000
    MAX_FILE_DURATION = time.Minute * 1
    filename_time_format = ""20060102150405000""
    MAX_TRY = 5
)
var blockingChan chan int
func main(){
    path := flag.String(""dir"", """", ""absolute path of dir "")
    flag.Parse()
    if strings.Contains(*path, ""./"") {
        log.Fatalln(""ERROR: please give absolute path"")
    }
    if info, err := os.Stat(*path); err == nil{
        if ! info.IsDir(){
            log.Fatalln(*path,"" is not a directory"")
        }
        log.Println(""directory found.."")
    } else {
        if os.IsNotExist(err){
            log.Println(""directory not found.."")
            log.Println(""creating the directory.."",*path)
            if err := exec.Command(""mkdir"",""-p"",*path).Run(); err != nil{
                log.Fatalln(""failed to create the directory ERROR:"",err)
            }
            log.Println(""directory created successfully"")
        }
    }
    filerotate := &FileRotate{*path,make(chan FileStruct,1)}
    go filerotate.FileOperationsRoutine()

    log.Println(""generating file name struct.."")
    filerotate.File <- GetFileStruct()
    <- blockingChan
}

func (rotate *FileRotate) FileOperationsRoutine(){
    try := 0
    var f *os.File
    for{
        if file, ok := <- rotate.File; ok{
            if f == nil {
                log.Println(""WARN: file ptr is nil"")
            }
            filePath := filepath.Join(rotate.Dir, file.Filename)
            fileInfo, err := os.Stat(filePath)
            if err != nil && os.IsNotExist(err) {
                log.Println(""file:"", filePath, "" does not exist...creating file"")
                _, err = os.Create(filePath)
                if err != nil {
                    log.Println(""failed to create the file ERROR:"",err)
                    try++
                    if try == MAX_TRY {
                        log.Println(""tried creating the file "",MAX_TRY,"" times. No luck"")
                        time.Sleep(time.Second * 3)
                        continue
                    }
                    rotate.File <- file
                    continue
                }
                log.Println(""file:"", filePath, "" created successfully"")
                fileInfo,err = os.Stat(filePath)
            }
            sizeCheck := fileInfo.Size() >= MAX_FILE_SIZE
            durationCheck := time.Now().After(file.CreatedAt.Add(MAX_FILE_DURATION))
            if sizeCheck || durationCheck {
                log.Println(""filesize of "",filePath,"" is "",fileInfo.Size(),""..filesizeCheck="",sizeCheck)
                log.Println(""fileDurationCheck="",durationCheck)
                log.Println(""rotating the file.."")
                f.Close()
                f = nil
                go ZipAndSendRoutine(filePath)
                rotate.File <- GetFileStruct()
            }else{
                if f == nil {
                    f, err = os.OpenFile(filePath, os.O_RDWR | os.O_APPEND, 0644)
                    if err != nil {
                        log.Println(""failed to open the file ERROR:"", err)
                        try++
                        if try == MAX_TRY {
                            log.Println(""tried opening the file "", MAX_TRY, "" times. No luck"")
                            time.Sleep(time.Second * 3)
                            continue
                        }
                        rotate.File <- file
                        continue
                    }
                    log.Println(""file opened in append mode"")
                }
                rotate.File <- file
            }
        }
    }
}

func GetFileStruct() FileStruct{
    current_time := time.Now()
    log.Println(""returning the filestruct.."")
    return FileStruct{""example_"" + current_time.Format(filename_time_format),current_time}
}

func ZipAndSendRoutine(file string){
    log.Println(""zipping and sending the file:"",file,""to remote server"")
}
",4139
1311,41673576,"root@workstation:/media/sf_golang# ./bin/file_rotation -dir ""/tmp/file_rotaion""
2017/01/16 15:05:03 directory found..
2017/01/16 15:05:03 starting file operations routine...
2017/01/16 15:05:03 generating file name struct..
2017/01/16 15:05:03 returning the filestruct..
2017/01/16 15:05:03 WARN: file ptr is nil
2017/01/16 15:05:03 file: /tmp/file_rotaion/example_20170116150503000  does not exist...creating file
2017/01/16 15:05:03 file: /tmp/file_rotaion/example_20170116150503000  created successfully
2017/01/16 15:05:03 file opened in append mode
2017/01/16 15:06:03 filesize of  /tmp/file_rotaion/example_20170116150503000  is  0 ..filesizeCheck= false ...fileDurationCheck= true
2017/01/16 15:06:03 rotating the file..
2017/01/16 15:06:03 returning the filestruct..
2017/01/16 15:06:03 WARN: file ptr is nil
2017/01/16 15:06:03 file: /tmp/file_rotaion/example_20170116150603000  does not exist...creating file
2017/01/16 15:06:03 file: /tmp/file_rotaion/example_20170116150603000  created successfully
2017/01/16 15:06:03 file opened in append mode
2017/01/16 15:06:03 zipping and sending the file: /tmp/file_rotaion/example_20170116150503000 to remote server
2017/01/16 15:07:03 filesize of  /tmp/file_rotaion/example_20170116150603000  is  0 ..filesizeCheck= false ...fileDurationCheck= true
2017/01/16 15:07:03 rotating the file..
2017/01/16 15:07:03 returning the filestruct..
2017/01/16 15:07:03 WARN: file ptr is nil
2017/01/16 15:07:03 file: /tmp/file_rotaion/example_20170116150703000  does not exist...creating file
2017/01/16 15:07:03 file: /tmp/file_rotaion/example_20170116150703000  created successfully
2017/01/16 15:07:03 file opened in append mode
2017/01/16 15:07:03 zipping and sending the file: /tmp/file_rotaion/example_20170116150603000 to remote server
",1784
1312,41673576,FileOperations,14
1313,41673576,rotate.File,11
1314,41741702,reader.ReadString('\n'),23
1315,41741702,\n,2
1316,41741702,reader.ReadLine(),17
1317,41741702,Scanner,7
1318,41741702,ReadLine,8
1319,41741702,ReadString,10
1320,41741702,go run main.go,14
1321,41741702,"package main

import (
    ""bufio""
    ""bytes""
    ""fmt""
    ""io""
    ""os""
)

func readFileWithReadString(fn string) (err error) {
    fmt.Println(""readFileWithReadString"")

    file, err := os.Open(fn)
    defer file.Close()

    if err != nil {
        return err
    }

    // Start reading from the file with a reader.
    reader := bufio.NewReader(file)

    var line string
    for {
        line, err = reader.ReadString('\n')

        fmt.Printf("" > Read %d characters\n"", len(line))

        // Process the line here.
        fmt.Println("" > > "" + limitLength(line, 50))

        if err != nil {
            break
        }
    }

    if err != io.EOF {
        fmt.Printf("" > Failed!: %v\n"", err)
    }

    return
}

func readFileWithScanner(fn string) (err error) {
    fmt.Println(""readFileWithScanner - this will fail!"")

    // Don't use this, it doesn't work with long lines...

    file, err := os.Open(fn)
    defer file.Close()

    if err != nil {
        return err
    }

    // Start reading from the file using a scanner.
    scanner := bufio.NewScanner(file)

    for scanner.Scan() {
        line := scanner.Text()

        fmt.Printf("" > Read %d characters\n"", len(line))

        // Process the line here.
        fmt.Println("" > > "" + limitLength(line, 50))
    }

    if scanner.Err() != nil {
        fmt.Printf("" > Failed!: %v\n"", scanner.Err())
    }

    return
}

func readFileWithReadLine(fn string) (err error) {
    fmt.Println(""readFileWithReadLine"")

    file, err := os.Open(fn)
    defer file.Close()

    if err != nil {
        return err
    }

    // Start reading from the file with a reader.
    reader := bufio.NewReader(file)

    for {
        var buffer bytes.Buffer

        var l []byte
        var isPrefix bool
        for {
            l, isPrefix, err = reader.ReadLine()
            buffer.Write(l)

            // If we've reached the end of the line, stop reading.
            if !isPrefix {
                break
            }

            // If we're just at the EOF, break
            if err != nil {
                break
            }
        }

        if err == io.EOF {
            break
        }

        line := buffer.String()

        fmt.Printf("" > Read %d characters\n"", len(line))

        // Process the line here.
        fmt.Println("" > > "" + limitLength(line, 50))
    }

    if err != io.EOF {
        fmt.Printf("" > Failed!: %v\n"", err)
    }

    return
}

func main() {
    testLongLines()
    testLinesThatDoNotFinishWithALinebreak()
}

func testLongLines() {
    fmt.Println(""Long lines"")
    fmt.Println()

    createFileWithLongLine(""longline.txt"")
    readFileWithReadString(""longline.txt"")
    fmt.Println()
    readFileWithScanner(""longline.txt"")
    fmt.Println()
    readFileWithReadLine(""longline.txt"")
    fmt.Println()
}

func testLinesThatDoNotFinishWithALinebreak() {
    fmt.Println(""No linebreak"")
    fmt.Println()

    createFileThatDoesNotEndWithALineBreak(""nolinebreak.txt"")
    readFileWithReadString(""nolinebreak.txt"")
    fmt.Println()
    readFileWithScanner(""nolinebreak.txt"")
    fmt.Println()
    readFileWithReadLine(""nolinebreak.txt"")
    fmt.Println()
}

func createFileThatDoesNotEndWithALineBreak(fn string) (err error) {
    file, err := os.Create(fn)
    defer file.Close()

    if err != nil {
        return err
    }

    w := bufio.NewWriter(file)
    w.WriteString(""Does not end with linebreak."")
    w.Flush()

    return
}

func createFileWithLongLine(fn string) (err error) {
    file, err := os.Create(fn)
    defer file.Close()

    if err != nil {
        return err
    }

    w := bufio.NewWriter(file)

    fs := 1024 * 1024 * 4 // 4MB

    // Create a 4MB long line consisting of the letter a.
    for i := 0; i < fs; i++ {
        w.WriteRune('a')
    }

    // Terminate the line with a break.
    w.WriteRune('\n')

    // Put in a second line, which doesn't have a linebreak.
    w.WriteString(""Second line."")

    w.Flush()

    return
}

func limitLength(s string, length int) string {
    if len(s) < length {
        return s
    }

    return s[:length]
}
",4099
1322,41741702,"Long lines

readFileWithReadString
 > Read 4194305 characters
 > > aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 > Read 12 characters
 > > Second line.

readFileWithScanner - this will fail!
 > Failed!: bufio.Scanner: token too long

readFileWithReadLine
 > Read 4194304 characters
 > > aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 > Read 12 characters
 > > Second line.

No linebreak

readFileWithReadString
 > Read 28 characters
 > > Does not end with linebreak.

readFileWithScanner - this will fail!
 > Read 28 characters
 > > Does not end with linebreak.

readFileWithReadLine
 > Read 28 characters
 > > Does not end with linebreak.
",651
1323,41789384,"game.Projection = mgl32.Perspective(mgl32.DegToRad(45), game.Screen.X / game.Screen.Y, 0.1, 10)
game.Cam = mgl32.LookAtV(mgl32.Vec3{0, 0.1, 10}, mgl32.Vec3{game.Camera.X, game.Camera.Y, 0}, mgl32.Vec3{0, 1, 0})
game.Model = mgl32.Ident4()
",239
1324,41789384,"type Map struct {
    game   *Game
    XmlMap *XMLMap

    vao   uint32
    vbo   uint32
    vData []float32

    program        uint32

    texture uint32

    Bounds lib.Rect
}

func NewMap(g *Game) *Map {
    m := &Map{}

    m.game = g

    xmlMap, err := LoadMapFile(""assets/map1.tmx"")
    if err != nil {
        return nil
    }

    m.XmlMap = &xmlMap

    m.Bounds = lib.Rect{
        lib.Vector2{0, 0},
        lib.Vector2{float32(m.Width() - m.XmlMap.TileWidth), float32(m.Height() - m.XmlMap.TileHeight)},
    }

    // program
    program, err := m.newProgram(vsrc, fsrc)
    if err != nil {
        panic(err)
    }

    gl.UseProgram(program)

    // uniforms
    projectionUniform := gl.GetUniformLocation(program, gl.Str(""projection\x00""))
    gl.UniformMatrix4fv(projectionUniform, 1, false, &g.Projection[0])

    cameraUniform := gl.GetUniformLocation(program, gl.Str(""camera\x00""))
    gl.UniformMatrix4fv(cameraUniform, 1, false, &g.Cam[0])

    modelUniform := gl.GetUniformLocation(program, gl.Str(""model\x00""))
    gl.UniformMatrix4fv(modelUniform, 1, false, &g.Model[0])

    textureUniform := gl.GetUniformLocation(program, gl.Str(""tex\x00""))
    gl.Uniform1i(textureUniform, 0)

    gl.BindFragDataLocation(program, 0, gl.Str(""outputColor\x00""))

    // Load the texture
    texture, err := newTexture(""assets/terrain.png"")
    if err != nil {
        log.Fatalln(err)
    }

    m.texture = texture

    // vao
    gl.GenVertexArrays(1, &m.vao)
    gl.BindVertexArray(m.vao)

    // vbo
    gl.GenBuffers(1, &m.vbo)
    gl.BindBuffer(gl.ARRAY_BUFFER, m.vbo)

    // bind program to map
    m.program = program

    return m
}

func (m *Map) Width() int {
    return m.XmlMap.TileWidth * m.XmlMap.Width
}

func (m *Map) Height() int {
    return m.XmlMap.TileHeight * m.XmlMap.Height
}

func vboExtend(vbo []float32, ext []float32) []float32 {
    newVbo := vbo
    for _, value := range ext {
        newVbo = append(newVbo, value)
    }
    return newVbo
}

func (m *Map) GenerateVbo() {
    // reset vbo
    m.vData = make([]float32, 0)

    // loop through each layer
    for _, layer := range m.XmlMap.Layers {

        // convert tiles from long string on csv to array
        tiles := strings.Replace(layer.Data.Contents, ""\n"", """", -1)
        tilesArr := strings.Split(tiles, "","")

        // loop through each tile in layer
        for i, tile := range tilesArr {

            // convert tile to int
            tileNum, err := strconv.Atoi(tile)
            if err != nil {
                fmt.Printf(""[ERROR] Map: Error getting tile id: "", err)
                return
            }

            // skip blank tiles
            if tileNum == 0 {
                continue
            }

            // determine tileset based on tile number
            tileset, err := m.XmlMap.TileSheetByTileId(tileNum)
            if err != nil {
                fmt.Printf(""[ERROR] Map: %s\n"", err)
                return
            }

            // determine position of tile on tilesheet
            tileX := ((tileNum - 1) % tileset.Columns)
            tileY := (tileNum - tileX) / tileset.Columns
            position := lib.Vector2{
                X: float32(tileX),
                Y: float32(tileY),
            }

            // set position of tile
            posX := i % m.XmlMap.Width * m.XmlMap.TileWidth
            posY := (i - (i % m.XmlMap.Width)) / m.XmlMap.Width * m.XmlMap.TileHeight

            // check if tile is visible
            viewport := m.game.Viewport()
            tileRect := lib.Rect{
                lib.Vector2{
                    X: float32(posX),
                    Y: float32(posY),
                },
                lib.Vector2{
                    X: float32(posX + m.XmlMap.TileWidth),
                    Y: float32(posY + m.XmlMap.TileHeight),
                },
            }

            // if tile is not visible, skip it
            if viewport.Overlaps(tileRect) == false {
                continue
            }

            // determine number of tiles for width / height
            tileNumWidth := float32(tileset.Image.Width) / float32(m.XmlMap.TileWidth)
            tileNumHeight := float32(tileset.Image.Height) / float32(m.XmlMap.TileHeight)

            // determine ratio for individual tiles width / height
            tileWidthRatio := 1/tileNumWidth
            tileHeightRatio := 1/tileNumHeight

            // build vbo
            dst := lib.Rect{
                lib.Vector2{0, 0},
                lib.Vector2{float32(m.XmlMap.TileWidth), float32(m.XmlMap.TileHeight)},
            }
            src := lib.Rect{
                lib.Vector2{position.X * tileWidthRatio, position.Y * tileHeightRatio},
                lib.Vector2{position.X * tileWidthRatio + tileWidthRatio, position.Y * tileHeightRatio + tileHeightRatio},
            }

            // build vbo
            coords := []float32{
                // tri 1
                dst.Min.X + float32(posX), dst.Min.Y + float32(posY),
                dst.Max.X + float32(posX), dst.Max.Y + float32(posY),
                dst.Min.X + float32(posX), dst.Max.Y + float32(posY),
                // tex 1
                src.Min.X, src.Min.Y,
                src.Max.X, src.Min.Y,
                src.Max.X, src.Max.Y,
                src.Min.X, src.Max.Y,
                // tri 2
                dst.Min.X + float32(posX), dst.Min.Y + float32(posY),
                dst.Max.X + float32(posX), dst.Min.Y + float32(posY),
                dst.Max.X + float32(posX), dst.Max.Y + float32(posY),
                // tex 2
                src.Min.X, src.Min.Y,
                src.Max.X, src.Min.Y,
                src.Max.X, src.Max.Y,
                src.Min.X, src.Max.Y,
            }

            // add to vbo
            m.vData = vboExtend(m.vData, coords)
        }
    }
}

func (m *Map) newProgram(vsrc string, fsrc string) (uint32, error) {
    // compile vert shader
    vertexShader, err := m.compileShader(vsrc, gl.VERTEX_SHADER)
    if err != nil {
        return 0, err
    }

    // compile frag shader
    fragmentShader, err := m.compileShader(fsrc, gl.FRAGMENT_SHADER)
    if err != nil {
        return 0, err
    }

    // create program
    program := gl.CreateProgram()

    // attach shaders
    gl.AttachShader(program, vertexShader)
    gl.AttachShader(program, fragmentShader)
    defer gl.DetachShader(program, vertexShader)
    defer gl.DetachShader(program, fragmentShader)

    // link program
    gl.LinkProgram(program)

    // check program status
    var status int32
    gl.GetProgramiv(program, gl.LINK_STATUS, &status)
    if status == gl.FALSE {
        var logLength int32
        gl.GetProgramiv(program, gl.INFO_LOG_LENGTH, &logLength)

        log := strings.Repeat(""\x00"", int(logLength+1))
        gl.GetProgramInfoLog(program, logLength, nil, gl.Str(log))

        return 0, fmt.Errorf(""failed to link program: %v"", log)
    }

    // delete shaders
    gl.DeleteShader(vertexShader)
    gl.DeleteShader(fragmentShader)

    // return program
    return program, nil
}

func (m *Map) compileShader(source string, shaderType uint32) (uint32, error) {
    shader := gl.CreateShader(shaderType)

    glsrc, free := gl.Strs(source)
    gl.ShaderSource(shader, 1, glsrc, nil)
    defer free()

    gl.CompileShader(shader)

    var status int32
    gl.GetShaderiv(shader, gl.COMPILE_STATUS, &status)
    if status == gl.FALSE {
        var logLength int32
        gl.GetShaderiv(shader, gl.INFO_LOG_LENGTH, &logLength)

        log := strings.Repeat(""\x00"", int(logLength+1))
        gl.GetShaderInfoLog(shader, logLength, nil, gl.Str(log))

        return 0, fmt.Errorf(""failed to compile %v: %v"", source, log)
    }

    return shader, nil
}

func (m *Map) Render() {
    m.GenerateVbo()
    gl.BufferData(gl.ARRAY_BUFFER, len(m.vData)*4, gl.Ptr(m.vData), gl.STATIC_DRAW)

    gl.UseProgram(m.program)

    projectionUniform := gl.GetUniformLocation(m.program, gl.Str(""projection\x00""))
    gl.UniformMatrix4fv(projectionUniform, 1, false, &m.game.Projection[0])

    cameraUniform := gl.GetUniformLocation(m.program, gl.Str(""camera\x00""))
    gl.UniformMatrix4fv(cameraUniform, 1, false, &m.game.Cam[0])

    modelUniform := gl.GetUniformLocation(m.program, gl.Str(""model\x00""))
    gl.UniformMatrix4fv(modelUniform, 1, false, &m.game.Model[0])

    gl.BindVertexArray(m.vao)

    gl.ActiveTexture(gl.TEXTURE0)
    gl.BindTexture(gl.TEXTURE_2D, m.texture)

    gl.DrawArrays(gl.TRIANGLES, 0, int32(len(m.vData)))
}

func newTexture(file string) (uint32, error) {
    imgFile, err := os.Open(file)
    if err != nil {
        return 0, fmt.Errorf(""texture %q not found on disk: %v"", file, err)
    }
    img, _, err := image.Decode(imgFile)
    if err != nil {
        return 0, err
    }

    rgba := image.NewRGBA(img.Bounds())
    if rgba.Stride != rgba.Rect.Size().X*4 {
        return 0, fmt.Errorf(""unsupported stride"")
    }
    draw.Draw(rgba, rgba.Bounds(), img, image.Point{0, 0}, draw.Src)

    var texture uint32
    gl.GenTextures(1, &texture)
    gl.ActiveTexture(gl.TEXTURE0)
    gl.BindTexture(gl.TEXTURE_2D, texture)
    gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)
    gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)
    gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)
    gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)
    gl.TexImage2D(
        gl.TEXTURE_2D,
        0,
        gl.RGBA,
        int32(rgba.Rect.Size().X),
        int32(rgba.Rect.Size().Y),
        0,
        gl.RGBA,
        gl.UNSIGNED_BYTE,
        gl.Ptr(rgba.Pix))

    return texture, nil
}
",9659
1325,41789384,"const vsrc = `
#version 410 core

uniform mat4 projection;
uniform mat4 camera;
uniform mat4 model;

in vec2 in_Position;
in vec2 in_TexCoords;
out vec2 ex_TexCoords;

void main(void)
{
    ex_TexCoords = in_TexCoords;
    gl_Position = projection * camera * model * vec4(in_Position, 0, 1);
}
` + ""\x00""
",305
1326,41789384,"const fsrc = `
#version 410 core

uniform sampler2D tex;

in vec2 ex_TexCoords;
out vec4 outputColor;

void main()
{
    outputColor = texture(tex, ex_TexCoords);
}
` + ""\x00""
",176
1327,41921158,"func VideosStoreHandler(w http.ResponseWriter, r *http.Request) {
    r.ParseMultipartForm(32 << 20)

    clientFile, header, err := r.FormFile(""file"")
    if err != nil {
        logs.Create(logs.LevelError, ""[VideosStoreHandler] Unable to parse uploaded file: ""+err.Error())
        return
    }
    defer clientFile.Close()

    tfn := fmt.Sprintf(""%s%d%s"", config.TmpDir, time.Now().UnixNano(), filepath.Ext(header.Filename))
    tmpFile, err := os.OpenFile(tfn, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666)
    if err != nil {
        logs.Create(logs.LevelError, ""[VideosStoreHandler] Unable to create temporary file: ""+err.Error())
        return
    }
    defer tmpFile.Close()

    io.Copy(tmpFile, clientFile)

    msg := fmt.Sprintf(""[VideosStoreHandler] Video %q uploaded with filename: %q."", r.FormValue(""name""), header.Filename)
    logs.Create(logs.LevelInfo, msg)

    vid := videos.CreateVideo(r.FormValue(""name""), filepath.Ext(header.Filename))

    go util.ParseVideo(vid, r.FormValue(""name""), tmpFile.Name())

    http.Redirect(w, r, ""/admin/logs"", http.StatusTemporaryRedirect)
}
",1098
1328,41921158,ParseVideo,10
1329,41921158,"func ParseVideo(vid int64, vname, fname string) {
    defer os.Remove(fname)

    file, err := os.Open(fname)
    if err != nil {
        logs.Create(logs.LevelError, ""[ParseVideo] Unable to open temporary file: ""+err.Error())
        return
    }
    defer file.Close()

    fstat, err := file.Stat()
    if err != nil {
        logs.Create(logs.LevelError, ""[ParseVideo] Unable to get file info: ""+err.Error())
        return
    }

    fileSize := fstat.Size()
    totalPartsNum := uint64(math.Ceil(float64(fileSize) / float64(config.ChunkSize)))

    prefix := fmt.Sprintf(""%d"", time.Now().UnixNano())

    time.Sleep(5 * time.Second) // NOTE: This is intentional, for testing.

    for i := uint64(0); i < totalPartsNum; i++ {
        time.Sleep(5 * time.Second) // NOTE: This is intentional, for testing.

        partSize := int(math.Min(config.ChunkSize, float64(fileSize-int64(i*config.ChunkSize))))
        partBuffer := make([]byte, partSize)

        file.Read(partBuffer)
        encrypted, err := crypt.EncryptChunk(partBuffer)
        if err != nil {
            logs.Create(logs.LevelError, ""[ParseVideo] Failed to encrypt chunk file: ""+err.Error())
            return
        }

        fileName := fmt.Sprintf(""%s%s%d"", config.ChunksDir, prefix, i)
        chunkFile, err := os.Create(fileName)
        if err != nil {
            logs.Create(logs.LevelError, ""[ParseVideo] Unable to create chunk file: ""+err.Error())
            return
        }
        chunkFile.Close()

        err = ioutil.WriteFile(fileName, encrypted, os.ModeAppend)
        if err != nil {
            logs.Create(logs.LevelError, ""[ParseVideo] Writing to chunk file failed: ""+err.Error())
            return
        }

        videos.CreateChunk(vid, fileName)

        msg := fmt.Sprintf(""[ParseVideo] Chunk %d of %q stored in %q."",
            i, vname, fileName)
        logs.Create(logs.LevelInfo, msg)
    }

    msg := fmt.Sprintf(""[ParseVideo] %q processing finished without errors."", vname)
    logs.Create(logs.LevelSuccess, msg)
}
",2035
1330,41921158,LogsHandler,11
1331,41921158,/admin/logs,11
1332,41921158,"func LogsHandler(w http.ResponseWriter, r *http.Request) {
    data := struct {
        Items []logs.Log
    }{}

    rows, err := logs.FetchAll()
    if err != nil {
        logs.Create(logs.LevelError, ""[LogsHandler] Failed to fetch logs: ""+err.Error())
        return
    }

    for rows.Next() {
        var item logs.Log

        if err := rows.Scan(&item.Level, &item.Message, &item.Timestamp); err != nil {
            logs.Create(logs.LevelError, ""[LogsHandler] Failed to scan log items: ""+err.Error())
            return
        }

        data.Items = append(data.Items, item)
    }

    if err := rows.Err(); err != nil {
        logs.Create(logs.LevelError, ""[LogsHandler] SQL Error: ""+err.Error())
        return
    }

    template.Render(""admin/logs.html"", data, w)
}
",783
1333,41921158,Render,6
1334,41921158,"func Render(filePath string, data interface{}, w http.ResponseWriter) {
    fp := path.Join(""templates"", filePath)
    tmpl, err := template.ParseFiles(fp, ""templates/layouts/master.html"")
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    if err := tmpl.Execute(w, data); err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
}
",438
1335,41921158,/admin/logs,11
1336,41968616,"package main                                                                                                                                                                                                

import (                                                                                                                                                                                                    
    ""fmt""                                                                                                                                                                                                   
    ""reflect""                                                                                                                                                                                               
    ""syscall""                                                                                                                                                                                               
    ""unsafe""                                                                                                                                                                                                
)                                                                                                                                                                                                           

// We should do this because by default strings in Go are read-only.                                                                                                                                                                                                                                                                                                                                                                                                                  
func mprotect(ptr uintptr, w bool) {                                                                                                                                                                        
    // Need to avoid ""EINVAL addr is not a valid pointer,
    // or not a multiple of PAGESIZE.""                                                                                                                   
    start := ptr & ^(uintptr(syscall.Getpagesize() - 1))                                                                                                                                                    

    prot := syscall.PROT_READ                                                                                                                                                                               
    if w {                                                                                                                                                                                                  
        prot |= syscall.PROT_WRITE                                                                                                                                                                          
    }                                                                                                                                                                                                       

    _, _, err := syscall.Syscall(                                                                                                                                                                           
        syscall.SYS_MPROTECT,                                                                                                                                                                               
        start, uintptr(syscall.Getpagesize()),                                                                                                                                                              
        uintptr(prot),                                                                                                                                                                                      
    )                                                                                                                                                                                                       
    if err != 0 {                                                                                                                                                                                           
        panic(err.Error())                                                                                                                                                                                  
    }                                                                                                                                                                                                       
}                                                                                                                                                                                                           

// This function is very, very very very unsafe.                                                                                                                                                            
// Nowhere and never use it!                                                                                                                                                                                
func replaceAtIndex(s string, b byte, i int) {                                                                                                                                                              
    h := *(*reflect.StringHeader)(unsafe.Pointer(&s))                                                                                                                                                       

    mprotect(h.Data, true)                                                                                                                                                                                  
    defer mprotect(h.Data, false)                                                                                                                                                                           

    *(*byte)(unsafe.Pointer(h.Data + uintptr(i))) = b                                                                                                                                                       
}                                                                                                                                                                                                           

func main() {                                                                                                                                                                                               
    h := ""Hello, playground""                                                                                                                                                                                
    replaceAtIndex(h, 'x', 0)                                                                                                                                                                               
    fmt.Println(h)                                                                                                                                                                                          
}
",7663
1337,41968616,syscall,7
1338,42010937,gopkg.in/olivere/elastic.v5,27
1339,42010937,"package main

import(
    ""gopkg.in/olivere/elastic.v5""
    ""golang.org/x/net/context""
    ""log""
    ""os""
    ""encoding/json""
)

type people struct{
    Firstname string `json:""firstname""`
    Lastname string `json:""lastname""`
    Institution string `json:""institution""`
    Email string `json:""email""`
}

type item struct{
    Id string `json:""id""`
    Title string `json:""title""`
    Journal  string `json:""journal""`
    Volume int `json:""volume""`
    Number int `json:""number""`
    Pages string `json:""pages""`
    Year int `json:""year""`
    Authors []people `json:""authors""`
    Abstract string `json:""abstract""`
    Link string `json:""link""`
    Keywords []string `json:""keywords""`
    Body string `json:""body""`
}

var client *elastic.Client
var err error
func init(){
    client,err = elastic.NewClient()
    if err!=nil{
        log.Fatal(err)
    }
}

func main() {
    var data []item

    file,err := os.Open(""data.json"")
    if err!=nil{
        log.Fatal(err)
    }
    defer file.Close()

    jsonDeocder :=  json.NewDecoder(file)
    if err := jsonDeocder.Decode(&data); err!=nil{
        log.Fatal(""Decode: "",err)
    }

    bulkIndex(""library"",""article"",data)
}

func bulkIndex(index string,typ string ,data []item){
    ctx := context.Background()
    for _,item := range data{
        _,err := client.Index().Index(index).Type(typ).BodyJson(item).Do(ctx)   
        if err !=nil{
            log.Fatal(err)
        }
    }   
}
",1445
1340,42010937,GET /library/article/575084573a2404eec25acdcd?pretty,52
1341,42010937,575084573a2404eec25acdcd,24
1342,42010937,"{
  ""_index"": ""library"",
  ""_type"": ""article"",
  ""_id"": ""575084573a2404eec25acdcd"",
  ""found"": false
}
",103
1343,42010937,GET /library?pretty,19
1344,42010937,"{
  ""library"": {
    ""aliases"": {},
    ""mappings"": {
      ""article"": {
        ""properties"": {
          ""abstract"": {
            ""type"": ""text"",
            ""fields"": {
              ""keyword"": {
                ""type"": ""keyword"",
                ""ignore_above"": 256
              }
            }
          },
          ""authors"": {
            ""properties"": {
              ""email"": {
                ""type"": ""text"",
                ""fields"": {
                  ""keyword"": {
                    ""type"": ""keyword"",
                    ""ignore_above"": 256
                  }
                }
              },
              ""firstname"": {
                ""type"": ""text"",
                ""fields"": {
                  ""keyword"": {
                    ""type"": ""keyword"",
                    ""ignore_above"": 256
                  }
                }
              },
              ""institution"": {
                ""type"": ""text"",
                ""fields"": {
                  ""keyword"": {
                    ""type"": ""keyword"",
                    ""ignore_above"": 256
                  }
                }
              },
              ""lastname"": {
                ""type"": ""text"",
                ""fields"": {
                  ""keyword"": {
                    ""type"": ""keyword"",
                    ""ignore_above"": 256
                  }
                }
              }
            }
          },
          ""body"": {
            ""type"": ""text"",
            ""fields"": {
              ""keyword"": {
                ""type"": ""keyword"",
                ""ignore_above"": 256
              }
            }
          },
          ""id"": {
            ""type"": ""text"",
            ""fields"": {
              ""keyword"": {
                ""type"": ""keyword"",
                ""ignore_above"": 256
              }
            }
          },
          ""journal"": {
            ""type"": ""text"",
            ""fields"": {
              ""keyword"": {
                ""type"": ""keyword"",
                ""ignore_above"": 256
              }
            }
          },
          ""keywords"": {
            ""type"": ""text"",
            ""fields"": {
              ""keyword"": {
                ""type"": ""keyword"",
                ""ignore_above"": 256
              }
            }
          },
          ""link"": {
            ""type"": ""text"",
            ""fields"": {
              ""keyword"": {
                ""type"": ""keyword"",
                ""ignore_above"": 256
              }
            }
          },
          ""number"": {
            ""type"": ""long""
          },
          ""pages"": {
            ""type"": ""text"",
            ""fields"": {
              ""keyword"": {
                ""type"": ""keyword"",
                ""ignore_above"": 256
              }
            }
          },
          ""title"": {
            ""type"": ""text"",
            ""fields"": {
              ""keyword"": {
                ""type"": ""keyword"",
                ""ignore_above"": 256
              }
            }
          },
          ""volume"": {
            ""type"": ""long""
          },
          ""year"": {
            ""type"": ""long""
          }
        }
      }
    },
    ""settings"": {
      ""index"": {
        ""creation_date"": ""1486063182258"",
        ""number_of_shards"": ""5"",
        ""number_of_replicas"": ""1"",
        ""uuid"": ""_SLeDWb4QPinFcSwOCUtCw"",
        ""version"": {
          ""created"": ""5020099""
        },
        ""provided_name"": ""library""
      }
    }
  }
}
",3415
1345,42057466,"    static void Main(string[] args)
    {
        byte[] hashBytes = new byte[32] { 152, 154, 255, 19, 168, 20, 167, 43, 232, 133, 146, 13, 183, 80, 186, 85, 180, 249, 95, 142, 234, 71, 93, 188, 29, 147, 220, 164, 248, 83, 196, 80 };
        String privateKeyPemStr = @""-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCIw68jARnmvTh+xvMcv5iugtoHXt60NWEebfbghLTFuTlQvK0e
xY5hxnN/uD2UVc/S3QGnBQn0AfynhxlEZkedpYBb5RWoVChGZMHu7hbZukMjByjx
ec0LjtuEQhY4m18XaVNmAQWD/EiROMGTghMwykkQ+SBtx4Gl/O/BB6F4SQIDAQAB
AoGAJLarODFee6OGG/paXvhMC2TTFLFyBVxjAuEwKdtWD9IGQdc0fhM4gqTccofJ
+B0FGiz7+ZMPtfImme5ZaRQv2wx7KOPbOdAyYxC7nLFCHYqDWZJ8/cCoS+hPJFd5
9OeGLGz3QKfEEPtYEAw4+E/UjilYAtRNREkISkYoB9Va8PUCQQDDHMPRSCfXbfZV
ufmlRZj2bH8sjVaSBbJIw+y9HKJ3ORRnKGjtIZ/+z70EwMwtbbQKnl71SruO5HB9
AUTtRka/AkEAs3GWQhplPbuH/fAlaEPy5GQilUNRt76NMsgtIFWPMXnt82cxTUUR
RIKwX7M96WBppPZ2Dy7uLrX8O+3fr6BK9wJATZ0lsBy57JKLiTJ/wmTbIjuqozhe
FZw6fYOiqt+3KSIFobuLcbkMgjp1AG0JS5D2K7swHvdpgMASl0dn+dMY1QJBAIPw
9QbN2bs2dJvnQ9oSfDoq1rLhuOheF/xK68Nmpc8/VBMwwTOLoVK6tWzoopFC7ur4
vX4Uh9WYwkpecab1OakCQD0SCs4zIggA/2NkUx8J5H07/drbm9uH+98EQUvzjTdz
qSW2jJPCA4GYYmtnnDRduukjmkJlbaaTdEH5YLCilF0=
-----END RSA PRIVATE KEY-----"";

        StringReader strReader = new StringReader(privateKeyPemStr);
        PemReader pemReader = new PemReader(strReader);
        AsymmetricCipherKeyPair keyPair = (AsymmetricCipherKeyPair)pemReader.ReadObject();
        RsaKeyParameters privateKey = (RsaKeyParameters)keyPair.Private;


        ISigner sig = SignerUtilities.GetSigner(""SHA256withRSA"");
        sig.Init(true, privateKey);
        sig.BlockUpdate(hashBytes, 0, hashBytes.Length);
        byte[] signedBytes = sig.GenerateSignature();

        var signedStr = Convert.ToBase64String(signedBytes);

        Console.WriteLine(signedStr);
        Console.ReadLine();            
    }
",1811
1346,42057466,"func main() {
pubKeyStr := `-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCIw68jARnmvTh+xvMcv5iugtoH
Xt60NWEebfbghLTFuTlQvK0exY5hxnN/uD2UVc/S3QGnBQn0AfynhxlEZkedpYBb
5RWoVChGZMHu7hbZukMjByjxec0LjtuEQhY4m18XaVNmAQWD/EiROMGTghMwykkQ
+SBtx4Gl/O/BB6F4SQIDAQAB
-----END PUBLIC KEY-----`
pemBlockPub, _ := pem.Decode([]byte(pubKeyStr))
pub, _ := x509.ParsePKIXPublicKey(pemBlockPub.Bytes)
publicKey, _ := pub.(*rsa.PublicKey)

signatureStr := ""YJxDTSMnFb4uh/orsUjHTHEsW1dkxuStsGP0PmjmObJhog/7OQfWgBcBZ58w0qWoknLGMVBBgZTgJtKq1ZSSTsx9uXhNKEhNEI3a+7ZhmPiHp6JRLbftsEoGKe7FKU8vXkp6Bo90qMOoJz54YI2xue8EA9b5PTgjkGbDbKdimF8=""
signatureBytes, err := base64.StdEncoding.DecodeString(signatureStr)
hashBytes := [32]byte{152, 154, 255, 19, 168, 20, 167, 43, 232, 133, 146, 13, 183, 80, 186, 85, 180, 249, 95, 142, 234, 71, 93, 188, 29, 147, 220, 164, 248, 83, 196, 80}

err := rsa.VerifyPKCS1v15(publicKey, crypto.SHA256, hashBytes[:], signatureBytes)

if err != nil {
    fmt.Printf(""err: %v\n"", err)
} else {
    fmt.Printf(""ok"")
}
",1035
1347,42057466,"        String publicKeyPemStr = @""-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCIw68jARnmvTh+xvMcv5iugtoH
Xt60NWEebfbghLTFuTlQvK0exY5hxnN/uD2UVc/S3QGnBQn0AfynhxlEZkedpYBb
5RWoVChGZMHu7hbZukMjByjxec0LjtuEQhY4m18XaVNmAQWD/EiROMGTghMwykkQ
+SBtx4Gl/O/BB6F4SQIDAQAB
-----END PUBLIC KEY-----"";

        strReader = new StringReader(publicKeyPemStr);
        pemReader = new PemReader(strReader);
        RsaKeyParameters publicKey = (RsaKeyParameters)((AsymmetricKeyParameter)pemReader.ReadObject());

        sig = SignerUtilities.GetSigner(""SHA256withRSA"");
        sig.Init(false, publicKey);
        sig.BlockUpdate(hashBytes, 0, hashBytes.Length);

        if (sig.VerifySignature(signedBytes))
        {
            Console.WriteLine(""Ok"");
        }
        else
        {
            Console.WriteLine(""NOK"");
        }

        Console.ReadLine();
",872
1348,42057466,"func main() {
privKeyStr := `-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCIw68jARnmvTh+xvMcv5iugtoHXt60NWEebfbghLTFuTlQvK0e
xY5hxnN/uD2UVc/S3QGnBQn0AfynhxlEZkedpYBb5RWoVChGZMHu7hbZukMjByjx
ec0LjtuEQhY4m18XaVNmAQWD/EiROMGTghMwykkQ+SBtx4Gl/O/BB6F4SQIDAQAB
AoGAJLarODFee6OGG/paXvhMC2TTFLFyBVxjAuEwKdtWD9IGQdc0fhM4gqTccofJ
+B0FGiz7+ZMPtfImme5ZaRQv2wx7KOPbOdAyYxC7nLFCHYqDWZJ8/cCoS+hPJFd5
9OeGLGz3QKfEEPtYEAw4+E/UjilYAtRNREkISkYoB9Va8PUCQQDDHMPRSCfXbfZV
ufmlRZj2bH8sjVaSBbJIw+y9HKJ3ORRnKGjtIZ/+z70EwMwtbbQKnl71SruO5HB9
AUTtRka/AkEAs3GWQhplPbuH/fAlaEPy5GQilUNRt76NMsgtIFWPMXnt82cxTUUR
RIKwX7M96WBppPZ2Dy7uLrX8O+3fr6BK9wJATZ0lsBy57JKLiTJ/wmTbIjuqozhe
FZw6fYOiqt+3KSIFobuLcbkMgjp1AG0JS5D2K7swHvdpgMASl0dn+dMY1QJBAIPw
9QbN2bs2dJvnQ9oSfDoq1rLhuOheF/xK68Nmpc8/VBMwwTOLoVK6tWzoopFC7ur4
vX4Uh9WYwkpecab1OakCQD0SCs4zIggA/2NkUx8J5H07/drbm9uH+98EQUvzjTdz
qSW2jJPCA4GYYmtnnDRduukjmkJlbaaTdEH5YLCilF0=
-----END RSA PRIVATE KEY-----`

pemBlockPriv, _ := pem.Decode([]byte(privKeyStr))
privateKey, _ := x509.ParsePKCS1PrivateKey(pemBlockPriv.Bytes)

hashBytes := [32]byte{152, 154, 255, 19, 168, 20, 167, 43, 232, 133, 146, 13, 183, 80, 186, 85, 180, 249, 95, 142, 234, 71, 93, 188, 29, 147, 220, 164, 248, 83, 196, 80}

signatureByte, _ := rsa.SignPKCS1v15(rand.Reader, privateKey, crypto.SHA256, hashBytes[:])
signatureStr := base64.StdEncoding.EncodeToString(signatureByte)

fmt.Printf(""%v\n"", signatureStr)
}
",1395
1349,42113153,allpages.com,12
1350,42113153,http://www.allpages.com/travel-tourism/political-ideological-organizations/,75
1351,42113153,political-ideological-organizations/,36
1352,42113153,travel-tourism/,15
1353,42113153,parent,6
1354,42113153,"package main

import (
        ""fmt""
        ""github.com/PuerkitoBio/goquery""
        ""log""
        ""strconv""
        ""strings""
        ""regexp""
)

const domain = ""http://www.allpages.com/""
const categoryPage = ""category.html""

type Category struct {
        url string
        level uint
        name string
        entries int
        parent *Category
}

type DownloadResult struct {
        doc *goquery.Document
        category *Category
}

const WORKERS = 2
const SEPARATOR = ""§§§""

func main() {

        allCategories := make([]Category, 0)

        downloadChannel := make(chan *Category)
        resultsChannel := make(chan *DownloadResult, 100)

        for w := 1; w <= WORKERS; w++ {
                go worker(downloadChannel, resultsChannel)
        }

        numRequests := 1
        downloadChannel <- &Category{ domain + categoryPage, 0, ""root"", 0, nil }

        for result := range resultsChannel {
                var extractor func(doc *goquery.Document) []string

                if result.category.level == 0 {
                        extractor = topLevelExtractor
                } else if result.category.level == 1 {
                        extractor = secondLevelExtractor
                } else {
                        extractor = thirdLevelExtractor
                }

                categories := extractCategories(result.doc, result.category, extractor)
                allCategories = append(allCategories, *categories...)

                //fmt.Printf(""Appending categories: %v"", *categories)

                fmt.Printf(""total categories = %d, total requests = %d\n"", len(allCategories), numRequests)

                for _, category := range *categories {
                        numRequests += 1
                        downloadChannel <- &category
                }

                // close the channels when there are no more jobs
                if len(allCategories) > numRequests {
                        close(downloadChannel)
                        close(resultsChannel)
                }
        }

        fmt.Println(""Done"")
}

func worker(downloadChannel <-chan *Category, results chan<- *DownloadResult) {
        for target := range downloadChannel {
                fmt.Printf(""Downloading %v (addr %p) ..."", target, &target)

                doc, err := goquery.NewDocument(target.url)
                if err != nil {
                        log.Fatal(err)
                        panic(err)
                }

                fmt.Print(""done \n"")

                results <- &DownloadResult{doc, target}
        }
}

func extractCategories(doc *goquery.Document, parent *Category, extractor func(doc *goquery.Document) []string) *[]Category {

        numberRegex, _ := regexp.Compile(""[0-9,]+"")

        log.Printf(""Extracting subcategories for page %s\n"", parent)

        subCategories := extractor(doc)

        categories := make([]Category, 0)

        for _, subCategory := range subCategories {
                log.Printf(""Got subcategory=%s from parent=%s"", subCategory, parent)
                extracted := strings.Split(subCategory, SEPARATOR)

                numberWithComma := numberRegex.FindString(extracted[2])
                number := strings.Replace(numberWithComma, "","", """", -1)

                numRecords, err := strconv.Atoi(number)
                if err != nil {
                        log.Fatal(err)
                        panic(err)
                }

                var category Category

                level := parent.level + 1

                if parent.level == 0 {
                        category = Category{ domain + extracted[1], level, extracted[0], numRecords, parent }
                } else {
                        log.Printf(""category URL=%s, parent=%s, parent=%v"", extracted[1], parent.url, parent)
                        category = Category{ parent.url + extracted[1], level, extracted[0], numRecords, parent }
                }

                log.Printf(""Appending category=%v (pointer=%p)"", category, &category)

                categories = append(categories, category)
        }

        return &categories
}

func topLevelExtractor(doc *goquery.Document) []string {
        return doc.Find("".cat-listings-td .c-1s-2m-1-td1"").Map(func(i int, s *goquery.Selection) string {
                title := s.Find(""a"").Text()
                url := s.Find(""a"").Map(func(x int, a *goquery.Selection) string {
                        v, _ := a.Attr(""href"")
                        return v
                })
                records := s.Clone().Children().Remove().End().Text()

                //log.Printf(""Item %d: %s, %s - %s\n"", i, title, records, url)

                res := []string{title, url[0], records}
                return strings.Join(res, SEPARATOR)
        })
}

func secondLevelExtractor(doc *goquery.Document) []string {
        return doc.Find("".c-2m-3c-1-table .c-2m-3c-1-td1"").Map(func(i int, s *goquery.Selection) string {
                title := s.Find(""a"").Text()
                url := s.Find(""a"").Map(func(x int, a *goquery.Selection) string {
                        v, _ := a.Attr(""href"")
                        return v
                })
                records := s.Clone().Children().Remove().End().Text()

                //log.Printf(""Item %d: %s, %s - %s\n"", i, title, records, url)

                res := []string{title, url[0], records}
                return strings.Join(res, SEPARATOR)
        })
}

func thirdLevelExtractor(doc *goquery.Document) []string {
        return doc.Find("".c-2m-3c-1-table .c-2m-3c-1-td1"").Map(func(i int, s *goquery.Selection) string {
                title := s.Find(""a"").Text()
                url := s.Find(""a"").Map(func(x int, a *goquery.Selection) string {
                        v, _ := a.Attr(""href"")
                        return v
                })
                records := s.Clone().Children().Remove().End().Text()

                //log.Printf(""Item %d: %s, %s - %s\n"", i, title, records, url)

                res := []string{title, url[0], records}
                return strings.Join(res, SEPARATOR)
        })
}
",6116
1355,42209040,"Router := gin.New()
Router.Use(gin.Logger())
Router.Use(gin.Recovery())
",72
1356,42209040,"v1 := Router.Group(""/api/v1/todos"")
v1.Use(AuthRequired())
{
    v1.POST(""/"", CreateTodo)
    v1.GET(""/"", FetchAllTodo)
    v1.GET(""/:id"", FetchSingleTodo)
    v1.PUT(""/:id"", UpdateTodo)
    v1.DELETE(""/:id"", DeleteTodo)
}
",223
1357,42209040,"packagename.Router.Group
",25
1358,42209040,"package main

import (
    ""fmt""
    ""./apirest""
    ""github.com/braintree/manners""
)

func main(){
    fmt.Printf(""hello world.\n"")
    //router.Run()
    manners.ListenAndServe("":8080"", apirest.Router)
}
",206
1359,42209040,"package apirest

import (
    ""fmt""
    ""github.com/gin-gonic/gin""
    ""github.com/braintree/manners""
    ""os""
    ""os/signal""
)

//Router pour gérer l'api
var Router *gin.Engine

/*
    MAIN FUNCTION
*/
func init() {

    Router := gin.New()
    Router.Use(gin.Logger())
    Router.Use(gin.Recovery())

    c := make(chan os.Signal, 1)
    signal.Notify(c, os.Interrupt)
    go func(){
        for sig := range c {
            // sig is a ^C, handle it
            fmt.Printf(""ctl+c catched ""+sig.String())
            manners.Close()
        }
    }()

    LoadMonitor()

}
",577
1360,42209040,"package apirest

import (
    ""fmt""
    ""github.com/gin-gonic/gin""
    ""gopkg.in/validator.v2""
    ""github.com/jinzhu/gorm""
    ""strconv""
    ""net/http""
    ""time""
)

//Todo definition d'un element todo
type Todo struct {
    gorm.Model
    CreatedAt   time.Time
    UpdatedAt   time.Time
    OwnerID     int    `json:""ownerid""  validate:""nonzero""`
    URL         string `json:""url""`
}

//TransformedTodo version pour le retour d'api sans certaines infos
type TransformedTodo struct {
    ID          uint   `json:""id""`
    CreatedAt   time.Time
    UpdatedAt   time.Time
    OwnerID     uint   `json:""ownerid""`
    URL         string `json:""url""`   
}

//LoadTodo permet de lancer le mappage todos
func LoadTodo(){
    v1 := Router.Group(""/api/v1/todos"")
    {
        v1.POST(""/"", CreateTodo)
        v1.GET(""/"", FetchAllTodo)
        v1.GET(""/:id"", FetchSingleTodo)
        v1.PUT(""/:id"", UpdateTodo)
        v1.DELETE(""/:id"", DeleteTodo)
    }
}

//CreateTodo génération d'un todo
func CreateTodo(c *gin.Context) {

    owner, _ := strconv.Atoi(c.PostForm(""ownerid""))
    todo := Todo{
        OwnerID: owner,
        URL: c.PostForm(""url""),
    };
    v := validator.NewValidator()
    if errs := v.Validate(todo); errs!=nil {
        errors := errs.(validator.ErrorMap)
        var errOuts []string
        for f, e := range errors {
            errOuts = append(errOuts, fmt.Sprintf(""\t - %s (%v)\n"", f, e))
        }
        //c.JSON(500, gin.H{""Error"": errs.Error()})
        c.JSON(500, gin.H{""Erreur sur le(s) champ(s) : "": errOuts})
    } else {

        db, _ := Database()
        defer db.Close()
        db.Save(&todo)

        c.JSON(http.StatusCreated, gin.H{""status"" : http.StatusCreated, ""message"" : ""Todo item created successfully!"", ""resourceId"": todo.ID})
    }
}

//FetchAllTodo récupération de tous les todos
func FetchAllTodo(c *gin.Context) {
    var todos []Todo
    var _todos []TransformedTodo

    db, _ := Database()
    defer db.Close()
    db.Find(&todos)

    if (len(todos) <= 0) {
        c.JSON(http.StatusNotFound, gin.H{""status"" : http.StatusNotFound, ""message"" : ""No todo found!""})
        return
    }

    //transforms the todos for building a good response,
    //je peux choisir des champs a ne pas display
    for _, item := range todos {
        status := false
        if (item.Status == 1) {
            status = true
        } else {
            status = false
        }
        _todos = append(_todos, TransformedTodo{ID: item.ID, URL:item.URL})
    }
    c.JSON(http.StatusOK, gin.H{""status"" : http.StatusOK, ""data"" : _todos})
}

//FetchSingleTodo Récupération d'un seul todo en fonction de son id
func FetchSingleTodo(c *gin.Context) {
    var todo Todo
    todoID := c.Param(""id"")

    db, _ := Database()
    defer db.Close()
    db.First(&todo, todoID)

    if (todo.ID == 0) {
        c.JSON(http.StatusNotFound, gin.H{""status"" : http.StatusNotFound, ""message"" : ""No todo found!""})
        return
    }

    _todo := TransformedTodo{ID: todo.ID, URL:todo.URL}
    c.JSON(http.StatusOK, gin.H{""status"" : http.StatusOK, ""data"" : _todo})
}

//UpdateTodo Mise à jour d'un todo
func UpdateTodo(c *gin.Context) {
    var todo Todo
    todoID := c.Param(""id"")
    db, _ := Database()
    defer db.Close()
    db.First(&todo, todoID)

    if (todo.ID == 0) {
        c.JSON(http.StatusNotFound, gin.H{""status"" : http.StatusNotFound, ""message"" : ""No todo found!""})
        return
    }

    db.Model(&todo).Update(""title"", c.PostForm(""title""))
    db.Model(&todo).Update(""completed"", c.PostForm(""completed""))
    c.JSON(http.StatusOK, gin.H{""status"" : http.StatusOK, ""message"" : ""Todo updated successfully!""})
}


//DeleteTodo Suppression d'un todo
func DeleteTodo(c *gin.Context) {
    var todo Todo
    todoID := c.Param(""id"")
    db, _ := Database()
    defer db.Close()
    db.First(&todo, todoID)

    if (todo.ID == 0) {
        c.JSON(http.StatusNotFound, gin.H{""status"" : http.StatusNotFound, ""message"" : ""No todo found!""})
        return
    }

    db.Delete(&todo)
    c.JSON(http.StatusOK, gin.H{""status"" : http.StatusOK, ""message"" : ""Todo deleted successfully!""})
}
",4134
1361,42259364,TCP,3
1362,42259364,go,2
1363,42259364,JSON,4
1364,42259364,"package main

import (
    ""bufio""
    ""encoding/json""
    ""fmt""
    _""io""
    ""net""
    ""os""
)

const (
    COMMAND_RECEIVE_FILE    = ""TRANSFER_FILE""
    COMMAND_EXIT            = ""EXIT""

    CONNECTION_TYPE = ""tcp""
    CONNECTION_PORT = ""3645""
    CONNECTION_HOST = """"
    BUFFER_SIZE     = 1024
)

type Command struct {
    Identifier string `json:""identifier""`
    Name       string `json:""name""`
    Size       int64  `json:""size""`
}

type Result struct {
    Message     string        `json:""message""`
}

func receiveFile(connection net.Conn, fileName string, fileSize int64) Result {
    fmt.Println(""Receiving file"")
    result := Result{Message: """"}

    file, err := os.Create(fileName)
    if err != nil {
        fmt.Println(err)
        result.Message = ""Error opening file: "" + fileName
        return result
    }

    defer file.Close()

    fileBuffer := make([]byte, BUFFER_SIZE)
    bytesRead := int64(0)
    count := 0
    for {
        if fileSize-bytesRead < int64(BUFFER_SIZE) {
            fileBuffer = make([]byte, fileSize-bytesRead)
        }

        fmt.Println(""Reading "", BUFFER_SIZE, "" bytes of data"")
        n, err := connection.Read(fileBuffer)
        count++
        fmt.Println(""Completed reading"", n, "" bytes of data, count="", count)
        file.Write(fileBuffer[0:n])
        bytesRead += int64(n)

        if err != nil {
            result.Message = ""File transfer incomplete""
            break
        }

        if bytesRead >= fileSize {
            result.Message = ""File transfer complete""
            break
        }
    }

    file.Chmod(0777)

    return result
}

func main() {
    ln, err := net.Listen(CONNECTION_TYPE, CONNECTION_HOST + "":""+CONNECTION_PORT)
    if err != nil {
        fmt.Println(""error opening a tcp connection"")
    }

    for {
        fmt.Println(""waiting for new connection"")
        conn, err := ln.Accept()
        if err != nil {

        } else {
            var commandStr string
            reader := bufio.NewReader(conn)

            var exitStatus = 1
            for exitStatus == 1 {
                fmt.Println(""Waiting for new command: "")
                line,_,err := reader.ReadLine()
                if err != nil {
                    conn.Close()
                    exitStatus = 0
                    break
                } else {
                    fmt.Println(""Size read :"", len(line))
                }
                commandStr = string(line)
                fmt.Println(""CommandStr: "", commandStr)


                var msg Command
                err = json.Unmarshal([]byte(commandStr), &msg)
                if err != nil {
                    fmt.Println(""Error"")
                    conn.Close()
                    break
                }

                result := Result{}
                fmt.Println(""Received new command: "", msg.Identifier)
                switch msg.Identifier {

                case COMMAND_RECEIVE_FILE:
                    result = receiveFile(conn, msg.Name, msg.Size)

                case COMMAND_EXIT:
                    exitStatus = 0
                    conn.Close()
                default:
                    result = Result{Message: ""Unrecognized command""}
                }

                out, _ := json.Marshal(result)
                fmt.Fprint(conn, string(out)+""\n"")
            }
        }
    }
}
",3353
1365,42259364,"package main

import (
    ""bufio""
    ""encoding/json""
    ""fmt""
    ""io""
    ""log""
    ""net""
    ""os""
    ""strings""
    _""time""
)

const (
    COMMAND_TRANSFER_FILE   = ""TRANSFER_FILE""
    COMMAND_EXIT            = ""EXIT""

    CONNECTION_TYPE = ""tcp""
    CONNECTION_PORT = ""3645""
    CONNECTION_HOST = """"
)

type Command struct {
    Identifier string `json:""identifier""`
    Name       string `json:""name""`
    Size       int64  `json:""size""`
}

type Result struct {
    Message     string        `json:""message""`
}

func main() {
    conn, _ := net.Dial(CONNECTION_TYPE, CONNECTION_HOST + "":"" + CONNECTION_PORT)
    decoder := json.NewDecoder(conn)
    com := Command{}

    sourceFileName := """"
    destinationFileName := """"
    for {
        com = Command{}
        reader := bufio.NewReader(os.Stdin)
        identifier, _ := reader.ReadString('\n')
        com.Identifier = strings.TrimSpace(identifier)

        switch com.Identifier {
        case COMMAND_TRANSFER_FILE:
            fmt.Print(""Source file name:"")
            sourceFileName, _ = reader.ReadString('\n')
            sourceFileName = strings.TrimSpace(sourceFileName)

            fmt.Print(""Destination file name:"")
            destinationFileName, _ = reader.ReadString('\n')
            com.Name = strings.TrimSpace(destinationFileName)

            file, err := os.Open(sourceFileName)
            if err != nil {
                log.Fatal(err)
            }
            defer file.Close()

            fileInfo, err := file.Stat()
            fileSize := fileInfo.Size()
            com.Size = fileSize

        case COMMAND_EXIT:
            conn.Close()
            os.Exit(0)
        }

        out, _ := json.Marshal(com)
        conn.Write([]byte(string(out) + ""\n""))

        if strings.Compare(com.Identifier, COMMAND_TRANSFER_FILE) == 0 {
            file, err := os.Open(sourceFileName)
            if err != nil {
                log.Fatal(err)
            }
            defer file.Close()

            n, err := io.Copy(conn, file)
            if err != nil {
                log.Fatal(err)
            }
            fmt.Println(n, ""bytes sent"")
        }

        var msg Result
        err := decoder.Decode(&msg)
        if err != nil {
            fmt.Println(err)
        }
        fmt.Println(msg)
    }
}
",2302
1366,42281210,"package main

import (
    ""./models""
    ""github.com/gin-gonic/gin""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    router := gin.Default()

    opt := router.Group(""opt/v2"")
    {
        opt.GET(""/ping"", func(c *gin.Context) {
            c.String(200, ""pong"")
        })
        opt.GET(""/last-completed-test/:serial"", LastTest)
    }

    // Add API handlers here
    router.Run("":3000"")
}

func LastTest(c *gin.Context) {
    // Connection to the database
    db := models.InitDB()
    defer db.Close()

    var result models.TestResultDetail

    type Response struct {
        Status   string
        Id   int64
        Serial   string
        Product  string
        Stage    string

    }

    // get param and query
    serial := c.Params.ByName(""serial"")
    db.Model(&models.TestResultDetail{}).
        Select(""test_result.id, test_result.serial, test_result.product, test_result_detail.stage_id, seq_test_stage.description"").
        Joins(""join test_result on test_result.ID = test_result_detail.result_id"").
        Joins(""join seq_test_stage on seq_test_stage.ID = test_result_detail.stage_id"").
        Where(""test_result.serial = ?"", serial).
        Order(""test_result_detail.id desc"").
        Limit(1).
        Scan(&result)

    if result.ID != 0 {
        res1 := &Response{
            Status: ""OK"",
            Id: result.ResultId.ID,
            Serial: result.ResultId.Serial,
            Product: result.ResultId.Product,
            Stage: result.StageId.Description,
        }

        c.JSON(200, res1)
    } else {
        // Display JSON error
        c.JSON(404, gin.H{""error"": ""No Records"", ""code"": 404})
    }
}
",1662
1367,42281210,"package models

import (
    ""time""
)

type TestResultDetail struct {
    ID            int64 `gorm:""primary_key"" db:""id"" json:""id""`
    ResultId      TestResult
    StatusId      ResultStatus
    StationId     Station
    StageId       SeqTestStage
    OperatorId    AuthUser
    Failstep      string `db:""fail_step"" json:""fail_step""`
    Shift         string `db:""shift"" json:""shift""`
    SequenceRev   int `db:""sequence_rev"" json:""sequence_rev""`
    DateAdded     time.Time `db:""date_added"" json:""date_added""`
    DateTimestamp time.Time `db:""date_timestamp"" json:""date_timestamp""`
    DateTime      time.Time `db:""date_time"" json:""date_time""`
    StageOrder    int `db:""stage_order"" json:""stage_order""`
    SerialNumber  string `db:""serial_number"" json:""serial_number""`
    IsRetest      int `db:""is_retest"" json:""is_retest""`
    RetestReason  string `db:""retest_reason"" json:""retest_reason""`
}
",899
1368,42281210,"package models

import (
    ""time""
)

type TestResult struct {
    ID                    int64       `gorm:""primary_key"" db:""id"" json:""id""`
    DateAdded             time.Time `db:""date_added"" json:""date_added""`
    Serial                string    `db:""serial"" json:""serial""`
    SequenceId            int       `db:""sequence_id"" json:""sequence_id""`
    LastCompletedStage    int       `db:""last_completed_stage"" json:""last_completed_stage""`
    LastCompletedSequence int       `db:""last_completed_sequence"" json:""last_completed_sequence""`
    Workorder             string    `db:""workorder"" json:""workorder""`
    Product               string    `db:""product"" json:""product""`
    IsComplete            string    `db:""is_complete"" json:""is_complete""`
    IsScrapped            string    `db:""is_scrapped"" json:""is_scrapped""`
    ValueStream           string    `db:""value_stream"" json:""value_stream""`
    PromiseDate           string    `db:""promise_date"" json:""promise_date""`
    FailLock              int       `db:""fail_lock"" json:""fail_lock""`
    SequenceRev           int       `db:""sequence_rev"" json:""sequence_rev""`
    DateUpdated           time.Time `db:""date_updated"" json:""date_updated""`
    Date                  time.Time `db:""date"" json:""date""`
    Time                  time.Time `db:""time"" json:""time""`
    Ptyp2                 string    `db:""ptyp2"" json:""ptyp2""`
    WoQty                 int       `db:""wo_qty"" json:""wo_qty""`
    IsActive              int       `db:""is_active"" json:""is_active""`
    IsTimeLock            int       `db:""is_time_lock"" json:""is_time_lock""`
    TimeLockTimestamp     time.Time `db:""time_lock_timestamp"" json:""time_lock_timestamp""`
    ScrapReason           string    `db:""scrap_reason"" json:""scrap_reason""`
    ScrappedBy            int       `db:""scrapped_by"" json:""scrapped_by""`
}
",1833
1369,42281210,"package models

import (
    ""time""
)

type SeqTestStage struct {
    ID              int64 `gorm:""primary_key"" db:""id"" json:""id""`
    PdcptypeId      int `db:""pdcptype_id"" json:""pdcptype""`
    Description     string `db:""description"" json:""description""`
    LongDescription string `db:""long_description"" json:""long_description""`
    IsActive        int `db:""is_active"" json:""is_active""`
    DateAdded       time.Time `db:""date_added"" json:""date_added""`
    DateUpdated     time.Time `db:""date_updated"" json:""date_updated""`
    TimeLock        int `db:""time_lock"" json:""time_lock""`
    LockMinutes     int `db:""lock_minutes"" json:""lock_minutes""`
    LockHours       int `db:""lock_hours"" json:""lock_hours""`
}
",708
1370,42326753,Config.Database,15
1371,42326753,"2017/02/19 14:05:44 http: panic serving 127.0.0.1:53554: runtime error: invalid memory address or nil pointer dereference
    goroutine 50 [running]:
    net/http.(*conn).serve.func1(0xc42027c000)
        /usr/local/go/src/net/http/server.go:1491 +0x12a
    panic(0x9f45c0, 0xc42000c100)
        /usr/local/go/src/runtime/panic.go:458 +0x243
    main.SignUp(0xc4202780e0)
        /home/attila/dev/gopath/src/github.com/attilasatan/helloiris/handlers.go:31 +0x258
    github.com/kataras/iris.HandlerFunc.Serve(0xafaf00, 0xc4202780e0)
        /home/attila/dev/gopath/src/github.com/kataras/iris/http.go:211 +0x30
    github.com/kataras/iris.(*Context).Do(0xc4202780e0)
        /home/attila/dev/gopath/src/github.com/kataras/iris/context.go:152 +0x4d
    github.com/kataras/iris.(*serveMux).BuildHandler.func1(0xc4202780e0)
        /home/attila/dev/gopath/src/github.com/kataras/iris/http.go:1059 +0x6ea
    github.com/kataras/iris.(*Framework).Build.func1.1(0xd87e20, 0xc4202701a0, 0xc420284000)
        /home/attila/dev/gopath/src/github.com/kataras/iris/iris.go:411 +0x72
    net/http.HandlerFunc.ServeHTTP(0xc420235080, 0xd87e20, 0xc4202701a0, 0xc420284000)
        /usr/local/go/src/net/http/server.go:1726 +0x44
    net/http.serverHandler.ServeHTTP(0xc420089f80, 0xd87e20, 0xc4202701a0, 0xc420284000)
        /usr/local/go/src/net/http/server.go:2202 +0x7d
    net/http.(*conn).serve(0xc42027c000, 0xd88820, 0xc42015c200)
        /usr/local/go/src/net/http/server.go:1579 +0x4b7
    created by net/http.(*Server).Serve
        /usr/local/go/src/net/http/server.go:2293 +0x44d
    2017/02/19 14:05:44 http: panic serving 127.0.0.1:53560: runtime error: invalid memory address or nil pointer dereference
    goroutine 51 [running]:
    net/http.(*conn).serve.func1(0xc42027c180)
        /usr/local/go/src/net/http/server.go:1491 +0x12a
    panic(0x9f45c0, 0xc42000c100)
        /usr/local/go/src/runtime/panic.go:458 +0x243
    main.SignUp(0xc4202ac070)
        /home/attila/dev/gopath/src/github.com/attilasatan/helloiris/handlers.go:31 +0x258
    github.com/kataras/iris.HandlerFunc.Serve(0xafaf00, 0xc4202ac070)
        /home/attila/dev/gopath/src/github.com/kataras/iris/http.go:211 +0x30
    github.com/kataras/iris.(*Context).Do(0xc4202ac070)
        /home/attila/dev/gopath/src/github.com/kataras/iris/context.go:152 +0x4d
    github.com/kataras/iris.(*serveMux).BuildHandler.func1(0xc4202ac070)
        /home/attila/dev/gopath/src/github.com/kataras/iris/http.go:1059 +0x6ea
    github.com/kataras/iris.(*Framework).Build.func1.1(0xd87e20, 0xc4202a60d0, 0xc4202840f0)
        /home/attila/dev/gopath/src/github.com/kataras/iris/iris.go:411 +0x72
    net/http.HandlerFunc.ServeHTTP(0xc420235080, 0xd87e20, 0xc4202a60d0, 0xc4202840f0)
        /usr/local/go/src/net/http/server.go:1726 +0x44
    net/http.serverHandler.ServeHTTP(0xc420089f80, 0xd87e20, 0xc4202a60d0, 0xc4202840f0)
        /usr/local/go/src/net/http/server.go:2202 +0x7d
    net/http.(*conn).serve(0xc42027c180, 0xd88820, 0xc42015c480)
        /usr/local/go/src/net/http/server.go:1579 +0x4b7
    created by net/http.(*Server).Serve
",3105
1372,42326753,tideland/golib/redis,20
1373,42326753,"package main

import (
    ""fmt""
    ""strconv""
    ""time""

    ""github.com/tideland/golib/redis""
)

/*Configuration is the main type of app configuration */
type Configuration struct {
    Database *redis.Connection
}

/*Config is app configuration holder */
var Config *Configuration

/*Configure handles database connection */
func Configure() (*Configuration, error) {

    db, err := redis.Open(redis.TcpConnection(""127.0.0.1:6379"", 30*time.Second))

    if err != nil {
        fmt.Printf(""Database connection error"")
        return nil, err
    }
    conn, err := db.Connection()

    n, _ := conn.DoInt(""INCR"", ""IDIDID"")

    fmt.Printf(strconv.Itoa(n))

    if err != nil {
        fmt.Printf(""Database connection error"")
        return nil, err
    }

    /*Config is the main configuration object*/

    Config := &Configuration{conn}

    return Config, err
}
",871
1374,42326753,Config.Database,15
1375,42326753,"func SignUp(ctx *iris.Context) {
    mail := ctx.FormValue(""email"")
    password := ctx.FormValue(""password"")
    passwordConfirm := ctx.FormValue(""password-confirm"")

    if password != passwordConfirm {
        ctx.RenderWithStatus(iris.StatusBadRequest, ""400.html"", ErrorPageData{""passwords dont match""})
    } else {

        user := User{mail, password, 0}
        db := Config.Database

        userID, err := db.DoInt(""INCR"", ""HELLOIRIS:ID"")

        if err != nil {
            ctx.RenderWithStatus(iris.StatusBadRequest, ""400.html"", ErrorPageData{""passwords dont match""})
        } else {

            user.ID = userID

            fmt.Printf(""SAVED"")

            ctx.Render(""signup-success.html"", nil)
        }
        ctx.JSON(200, user)
    }
}
",759
1376,42326753,Configure,9
1377,42326753,"func Configure() (Config *Configuration, err error) {

    if Config != nil {
    return
    }
}
",97
1378,42326753,"config, err := Configure()

if err != nil {
    ctx.RenderWithStatus(iris.StatusBadRequest, ""400.html"", ErrorPageData{""try again later""})
    return
}

user := User{mail, password, 0}
db := config.Database
",206
1379,42388090,"package filter

import (
    ""net/http""

    ""github.com/valyala/fasthttp""
)

// Context filter context
type Context interface {
    SetStartAt(startAt int64)
    SetEndAt(endAt int64)
    GetStartAt() int64
    GetEndAt() int64

    GetProxyServerAddr() string
    GetProxyOuterRequest() *fasthttp.Request
    GetProxyResponse() *fasthttp.Response
    NeedMerge() bool

    GetOriginRequestCtx() *fasthttp.RequestCtx

    GetMaxQPS() int

    ValidateProxyOuterRequest() bool

    InBlacklist(ip string) bool
    InWhitelist(ip string) bool

    IsCircuitOpen() bool
    IsCircuitHalf() bool

    GetOpenToCloseFailureRate() int
    GetHalfTrafficRate() int
    GetHalfToOpenSucceedRate() int
    GetOpenToCloseCollectSeconds() int

    ChangeCircuitStatusToClose()
    ChangeCircuitStatusToOpen()

    RecordMetricsForRequest()
    RecordMetricsForResponse()
    RecordMetricsForFailure()
    RecordMetricsForReject()

    GetRecentlyRequestSuccessedCount(sec int) int
    GetRecentlyRequestCount(sec int) int
    GetRecentlyRequestFailureCount(sec int) int
}

// Filter filter interface
type Filter interface {
    Name() string

    Pre(c Context) (statusCode int, err error)
    Post(c Context) (statusCode int, err error)
    PostErr(c Context)
}

// BaseFilter base filter support default implemention
type BaseFilter struct{}

// Pre execute before proxy
func (f BaseFilter) Pre(c Context) (statusCode int, err error) {
    return http.StatusOK, nil
}

// Post execute after proxy
func (f BaseFilter) Post(c Context) (statusCode int, err error) {
    return http.StatusOK, nil
}

// PostErr execute proxy has errors
func (f BaseFilter) PostErr(c Context) {

}
",1668
1380,42388090,"package proxy

import (
    ""errors""
    ""plugin""
    ""strings""

    ""github.com/fagongzi/gateway/pkg/conf""
    ""github.com/fagongzi/gateway/pkg/filter""
)

var (
    // ErrKnownFilter known filter error
    ErrKnownFilter = errors.New(""unknow filter"")
)

const (
    // FilterHTTPAccess access log filter
    FilterHTTPAccess = ""HTTP-ACCESS""
    // FilterHeader header filter
    FilterHeader = ""HEAD"" // process header fiter
    // FilterXForward xforward fiter
    FilterXForward = ""XFORWARD""
    // FilterBlackList blacklist filter
    FilterBlackList = ""BLACKLIST""
    // FilterWhiteList whitelist filter
    FilterWhiteList = ""WHITELIST""
    // FilterAnalysis analysis filter
    FilterAnalysis = ""ANALYSIS""
    // FilterRateLimiting limit filter
    FilterRateLimiting = ""RATE-LIMITING""
    // FilterCircuitBreake circuit breake filter
    FilterCircuitBreake = ""CIRCUIT-BREAKE""
    // FilterValidation validation request filter
    FilterValidation = ""VALIDATION""
)

func newFilter(filterSpec *conf.FilterSpec) (filter.Filter, error) {
    if filterSpec.External {
        return newExternalFilter(filterSpec)
    }

    input := strings.ToUpper(filterSpec.Name)

    switch input {
    case FilterHTTPAccess:
        return newAccessFilter(), nil
    case FilterHeader:
        return newHeadersFilter(), nil
    case FilterXForward:
        return newXForwardForFilter(), nil
    case FilterAnalysis:
        return newAnalysisFilter(), nil
    case FilterBlackList:
        return newBlackListFilter(), nil
    case FilterWhiteList:
        return newWhiteListFilter(), nil
    case FilterRateLimiting:
        return newRateLimitingFilter(), nil
    case FilterCircuitBreake:
        return newCircuitBreakeFilter(), nil
    case FilterValidation:
        return newValidationFilter(), nil
    default:
        return nil, ErrKnownFilter
    }
}

func newExternalFilter(filterSpec *conf.FilterSpec) (filter.Filter, error) {
    p, err := plugin.Open(filterSpec.ExternalPluginFile)
    if err != nil {
        return nil, err
    }

    s, err := p.Lookup(""NewExternalFilter"")
    if err != nil {
        return nil, err
    }

    sf := s.(func() (filter.Filter, error))
    return sf()
}
",2200
1381,42388090,"package main

import (
    ""C""
    ""strings""
    ""time""

    ""github.com/CodisLabs/codis/pkg/utils/log""
    ""github.com/fagongzi/gateway/pkg/filter""
    ""github.com/valyala/fasthttp""
)

// AccessFilter record the http access log
// log format: $remoteip ""$method $path"" $code ""$agent"" $svr $cost
type AccessFilter struct {
}

// NewExternalFilter create a External filter
func NewExternalFilter() (filter.Filter, error) {
    return &AccessFilter{}, nil
}

// Name return name of this filter
func (f *AccessFilter) Name() string {
    return ""HTTP-ACCESS""
}

// Pre pre process
func (f *AccessFilter) Pre(c filter.Context) (statusCode int, err error) {
    return 200, nil
}

// Post execute after proxy
func (f *AccessFilter) Post(c filter.Context) (statusCode int, err error) {
    cost := (c.GetStartAt() - c.GetEndAt())

    log.Infof(""%s %s \""%s\"" %d \""%s\"" %s %s"",
        GetRealClientIP(c.GetOriginRequestCtx()),
        c.GetOriginRequestCtx().Method(),
        c.GetProxyOuterRequest().RequestURI(),
        c.GetProxyResponse().StatusCode(),
        c.GetOriginRequestCtx().UserAgent(),
        c.GetProxyServerAddr(),
        time.Duration(cost))

    return 200, nil
}

// PostErr post error process
func (f *AccessFilter) PostErr(c filter.Context) {

}

// GetRealClientIP get read client ip
func GetRealClientIP(ctx *fasthttp.RequestCtx) string {
    xforward := ctx.Request.Header.Peek(""X-Forwarded-For"")
    if nil == xforward {
        return strings.SplitN(ctx.RemoteAddr().String(), "":"", 2)[0]
    }

    return strings.SplitN(string(xforward), "","", 2)[0]
}
",1578
1382,42388090,"panic: interface conversion: plugin.Symbol is func() (filter.Filter, error), not func() (filter.Filter, error)
",111
1383,42388090,filter.Filter,13
1384,42388090,load plugin file,16
1385,42388090,plugin go file,14
1386,42475093,socket.Recvfrom,15
1387,42475093,"package main

import (
    ""golang.org/x/sys/windows""
    ""github.com/google/gopacket""
    ""github.com/google/gopacket/layers""
    ""log""
    ""net""
    ""sync""
    ""os""
    //~ ""syscall""
    ""time""
    ""fmt""
    ""errors""
    ""unsafe""
)

const SIO_RCVALL = windows.IOC_IN | windows.IOC_VENDOR | 1

type Handle struct {
    blockForever bool
    device       string
    deviceIndex  int
    mu           sync.Mutex
    socket       windows.Handle
    timeout      time.Duration
    snaplen      int32
}

const BlockForever = -time.Millisecond * 10

func main() {
    var (
        device    string        = ""eth0""
        Snaplen int32         = 65536
        Timeout     time.Duration = 30 * time.Second
    )

    var (
       ip4 layers.IPv4
       tcp layers.TCP
    )

    parser := gopacket.NewDecodingLayerParser(layers.LayerTypeIPv4, &ip4, &tcp)
    decoded := []gopacket.LayerType{}

    hnd, err := OpenLive(device, Snaplen, Timeout)
    if err != nil {
        log.Fatal(err)
    }
    defer hnd.Close()

    packetSource := gopacket.NewPacketSource(hnd, hnd.LinkType())

    for packetData := range packetSource.Packets() {
        err := parser.DecodeLayers(packetData.Data(), &decoded)

        if packetData == nil || err != nil {
            continue
        }

        for _, layerType := range decoded {
          switch layerType {
            case layers.LayerTypeIPv4:
                log.Println(""    IP4 "", ip4.SrcIP, ip4.DstIP)
            case layers.LayerTypeTCP:
                log.Println(tcp.TransportFlow().Src().String())
          }
        }
  }

}

func OpenLive(device string, snaplen int32, timeout time.Duration) (handle *Handle, err error) {
    p := &Handle{}
    p.blockForever = timeout < 0
    p.timeout = timeout
    p.snaplen = snaplen

    var d windows.WSAData

    log.Println(""Initialising Winsock..."")
    err = windows.WSAStartup(uint32(0x202), &d)
    if err != nil {
        return nil, fmt.Errorf(""Error: WSAStartup - %v"", err)
    }
    log.Println(""Initialised"")

    //Create a RAW Socket
    log.Println(""Creating RAW Socket..."");
    fd, err := windows.Socket(windows.AF_INET, windows.SOCK_RAW, windows.IPPROTO_IP)
    if err != nil {
        return nil, fmt.Errorf(""Error: socket - %v"", err)
    }
    p.socket = fd
    log.Println(""Created."")

    // Retrieve the local hostname
    hostname, err := os.Hostname()

    if err != nil {
        return nil, fmt.Errorf(""Error: Hostname() - %v"", err)
    }
    log.Printf(""\nHost name : %s \n"",hostname)

    //Retrieve the available IPs of the local host
    log.Println(""Available Network Interfaces : \n"")
    _ , err = windows.GetHostByName(hostname)

    if err != nil {
        return nil, fmt.Errorf(""Error: GetHostByName() - %v"", err)
    }

    ip4 , iFcindex, err := externalIP()
    if err != nil {
        return nil, fmt.Errorf(""Error: getIpv4() - %v"", err)
    } 
    p.deviceIndex = iFcindex

    la := new(windows.SockaddrInet4)
    la.Port = int(0)

    for i := 0; i < net.IPv4len; i++ {
        la.Addr[i] = ip4[i]
    }

    if err := windows.Bind(fd, la); err != nil {
        return nil, fmt.Errorf (""Error:Bind - %v"", err)
    }

    inbuf := uint32(1)
    sizebuf := uint32(unsafe.Sizeof(inbuf))
    ret := uint32(0)

    err = windows.WSAIoctl(fd, SIO_RCVALL , (*byte)(unsafe.Pointer(&inbuf)) ,sizebuf, nil ,0 ,&ret , nil, 0); 

    if err != nil {
        return nil, fmt.Errorf (""Error:WSAIoctl() failed - %v"", err)
    }

    return p, nil

}

// Close closes the underlying socket handle.
func (p *Handle) Close() {
    p.mu.Lock()
    defer p.mu.Unlock()

    windows.Close(p.socket)
}

func (p *Handle) ReadPacketData() (data []byte, ci gopacket.CaptureInfo, err error) {
    p.mu.Lock()
    data = make([]byte, 65536)
    n, _, err := windows.Recvfrom(p.socket, data, 0)
    log.Println(n)
    if err != nil {
        log.Printf(""Error:Recvfrom() - %v"", err)
    }
    ci = gopacket.CaptureInfo{Timestamp: time.Now(), CaptureLength: len(data), Length: n, InterfaceIndex: p.deviceIndex}

    p.mu.Unlock()

    return
}

func htons(n int) int {
    return int(int16(byte(n))>8)))
}

func externalIP() (IPBYTE []byte, ifaceIndex int ,err error) {

    ifaces, err := net.Interfaces()
    if err != nil {
        return 
    }

    IPBYTE = make([]byte, 4)
    ifaceIndex =  0

    for _, iface := range ifaces {
        if iface.Flags&net.FlagUp == 0 {
            continue // interface down
        }
        if iface.Flags&net.FlagLoopback != 0 {
            continue // loopback interface
        }
        addrs, err := iface.Addrs()
        if err != nil {
            continue 
        }

        for _, addr := range addrs {
            var ip net.IP
            switch v := addr.(type) {
            case *net.IPNet:
                ip = v.IP
            case *net.IPAddr:
                ip = v.IP
            }
            if ip == nil || ip.IsLoopback() {
                continue
            }
            IPBYTE = ip.To4()
            ifaceIndex = iface.Index
            if IPBYTE == nil {
                continue // not an ipv4 address
            }
            //~ err = nil

            log.Printf(""Active Network Interfaces %v : %v "" ,iface.Index , ip.String())
            return IPBYTE ,ifaceIndex ,  nil 
        }
    }

    err = errors.New(""are you connected to the network?"")
    return 
}

// LinkType returns pcap_datalink, as a layers.LinkType.
func (p *Handle) LinkType() layers.LinkType {
    return layers.LinkTypeIPv4
}
",5486
1388,42487166,"$ wrk -t1 -c200 -d1s http://127.0.0.1:8080    
// this passes
...
21efef3
21efef3
21efef3
21efef3
21efef3
21efef3
21efef3
...

$ wrk -t1 -c400 -d1s http://127.0.0.1:8080
// this test fails with this error returned in go terminal
...
21efef3
21efef3
21efef3
21efef3
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x6ada46]

goroutine 2325 [running]:
github.com/gocql/gocql.(*Session).Close(0x0)
/home/mda/.local/go/src/github.com/gocql/gocql/session.go:336 +0x26
panic(0x707f40, 0x8ed650)
/usr/lib/go-1.8/src/runtime/panic.go:489 +0x2cf
github.com/gocql/gocql.(*Session).Query(0x0, 0x777d4c, 0x34, 0xc428cfd190, 0x1, 0x1, 0x0)
/home/mda/.local/go/src/github.com/gocql/gocql/session.go:294 +0x26
main.getData()
/home/mda/code/api-go/main2.go:45 +0x1f6
created by main.main.func1
/home/mda/code/api-go/main2.go:18 +0x39
exit status 2

Process finished with exit code 1
",952
1389,42487166,"$ cassandra-stress read n=200000 -pop seq=1..200000 -rate threads=200 -node 127.0.0.1

Results:
Op rate                   :   14,090 op/s  [READ: 14,090 op/s]
Partition rate            :   14,090 pk/s  [READ: 14,090 pk/s]
Row rate                  :   14,090 row/s [READ: 14,090 row/s]
Latency mean              :   14.1 ms [READ: 14.1 ms]
Latency median            :    9.7 ms [READ: 9.7 ms]
Latency 95th percentile   :   39.4 ms [READ: 39.4 ms]
Latency 99th percentile   :   72.1 ms [READ: 72.1 ms]
Latency 99.9th percentile :  218.1 ms [READ: 218.1 ms]
Latency max               :  346.8 ms [READ: 346.8 ms]
Total partitions          :    200,000 [READ: 200,000]
Total errors              :          0 [READ: 0]
Total GC count            : 14
Total GC memory           : 4.346 GiB
Total GC time             :    0.4 seconds
Avg GC time               :   31.9 ms
StdDev GC time            :    9.4 ms
Total operation time      : 00:00:14
",940
1390,42487166,"package main

import (
    ""fmt""
    ""log""
    ""github.com/buaazp/fasthttprouter""
    ""github.com/valyala/fasthttp""
    ""github.com/valyala/fasthttp/reuseport""
    ""github.com/gocql/gocql""
)

var cluster *gocql.ClusterConfig

func main() {
    router := fasthttprouter.New()

    router.GET(""/"", func(ctx *fasthttp.RequestCtx) {

        // We need this goroutine
        go getData()
        fmt.Fprint(ctx, ""Welcome to home!"")
        ctx.Response.Header.ConnectionClose()
    })

    ln, err := reuseport.Listen(""tcp4"", "":8080"")
    if err != nil {
        log.Fatalf(""error in reuseport listener: %s"", err)
    }

    if err = fasthttp.Serve(ln, router.Handler); err != nil {
        log.Fatalf(""error in fasthttp Server: %s"", err)
    }
}

func setup_cluster() {
    cluster = gocql.NewCluster(""127.0.0.1:9042"")

    cluster.Keyspace = ""myKeySpace""
    cluster.Consistency = gocql.One
}

func getData() {
    if cluster == nil {
        setup_cluster()
    }
    session, _ := cluster.CreateSession()
    defer session.Close()

    var id string
    var value string

    if err := session.Query(`SELECT id, ads FROM product_ads 
        WHERE id = ? LIMIT 1`,
        ""213"").Consistency(gocql.One).Scan(&id, &value); err != nil {
        log.Fatal(err)
    }

    // ... do some stuff with id & value
    fmt.Println(value)

}
",1333
1391,42487166,"Limit                     Soft Limit           Hard Limit           Units
Max cpu time              unlimited            unlimited            seconds
Max file size             unlimited            unlimited            bytes
Max data size             unlimited            unlimited            bytes
Max stack size            8388608              unlimited            bytes
Max core file size        unlimited            unlimited            bytes
Max resident set          unlimited            unlimited            bytes
Max processes             32768                32768                processes
Max open files            1000000              1000000              files
Max locked memory         unlimited            unlimited            bytes
Max address space         unlimited            unlimited            bytes
Max file locks            unlimited            unlimited            locks
Max pending signals       31265                31265                signals
Max msgqueue size         819200               819200               bytes
Max nice priority         0                    0
Max realtime priority     0                    0
Max realtime timeout      unlimited            unlimited            us
",1213
1392,42680728,"package main

import (
    ""fmt""
    ""os""
    ""encoding/csv""
)




func main() {

    if len(os.Args) < 2 {
        fmt.Printf(""Error: Source file name is required\n"")
        fmt.Println(""Usage:"", os.Args[0], "" \n"")
        return
    }

    file, err := os.Open(os.Args[1])
    if err != nil {
        fmt.Println(""Error:"", err)
        return
    }
    // deferred call to Close() at the end of current method
    defer file.Close()
    //get a new cvsReader for reading file
    reader := csv.NewReader(file)
    //Configure reader options Ref http://golang.org/src/pkg/encoding/csv/reader.go?s=#L81
    reader.Comma = '|'
    reader.Comment = '#'        //Comment character
    reader.FieldsPerRecord = -1 //Number of records per record. Set to Negative value for variable
    reader.TrimLeadingSpace = true

    record, err := reader.Read()
    fmt.Println(record)
    result, _ := reader.ReadAll()
    fmt.Println(result)
    for i := range result {
        // Element count.
        fmt.Printf(""Elements: %v"", len(result[i]))
        fmt.Println()
        // Elements.
        fmt.Println(result[i])
    }

}
",1117
1393,42680728,"|http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)14.jpg|http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)1.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)2.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)3.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)4.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)5.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)6.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)7.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)8.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)9.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)10.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)11.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)12.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)13.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)14.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)15.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)16.jpg| it's done|allhomedata;hardware;wf;couple;ITwjob;dsshot;small-tera;forceager;wf;tamed-cat;bg-wf-chicken;cowanimal;tracy-rod;tamed;ds-on-table|wf;dsshots;Hardware;force||976|51703|122|40
|http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)14.jpg|http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)1.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)2.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)3.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)4.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)5.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)6.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)7.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)8.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)9.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)10.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)11.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)12.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)13.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)14.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)15.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)16.jpg| it's done|allhomedata;hardware;wf;couple;ITwjob;dsshot;small-tera;forceager;wf;tamed-cat;bg-wf-chicken;cowanimal;tracy-rod;tamed;ds-on-table|wf;dsshots;Hardware;force||976|51703|122|40
|http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)14.jpg|http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)1.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)2.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)3.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)4.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)5.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)6.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)7.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)8.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)9.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)10.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)11.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)12.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)13.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)14.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)15.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)16.jpg| it's done|allhomedata;hardware;wf;couple;ITwjob;dsshot;small-tera;forceager;wf;tamed-cat;bg-wf-chicken;cowanimal;tracy-rod;tamed;ds-on-table|wf;dsshots;Hardware;force||976|51703|122|40
|http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)14.jpg|http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)1.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)2.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)3.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)4.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)5.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)6.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)7.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)8.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)9.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)10.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)11.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)12.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)13.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)14.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)15.jpg;http://i0.cdn2b.image.testdata.zhncdn.com/videos/201604/28/75158391/original/(m=eaf88daaaa)16.jpg| it's done|allhomedata;hardware;wf;couple;ITwjob;dsshot;small-tera;forceager;wf;tamed-cat;bg-wf-chicken;cowanimal;tracy-rod;tamed;ds-on-table|wf;dsshots;Hardware;force||976|51703|122|40
",7376
1394,42755310,"func GetAllHourly(dbsession *mgo.Session, year, month, day, site, size, network, region string, code int) (items []MassAggregation, err error) {
    defer dbsession.Close()
    var match bson.M
    if network == ""openx3"" {
        network = ""openx""
    }

    group := bson.M{""$group"": bson.M{""_id"": bson.M{""aws_region"": ""$aws_region"", ""http_request_status"": ""$http_request_status"", ""hour"": ""$hour"", ""network"": ""$network"", ""site"": ""$site"", ""size"": ""$size"", ""zone"": ""$zone"", ""extra"": ""$extra""}, ""total"": bson.M{""$sum"": ""$count""}}}
    if site == """" && size == """" && network == """" && region == """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day}}
    } else if site != """" && size == """" && network == """" && region == """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""site"": site}}
    } else if site != """" && size != """" && network == """" && region == """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""site"": site, ""size"": size}}
    } else if site != """" && size != """" && network != """" && region == """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""site"": site, ""size"": size, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}}}
    } else if site != """" && size != """" && network != """" && region != """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""site"": site, ""size"": size, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}, ""aws_region"": region}}
    } else if site != """" && size != """" && network != """" && region != """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""site"": site, ""size"": size, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}, ""aws_region"": region, ""http_request_status"": code}}
    } else if site == """" && size != """" && network == """" && region == """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""site"": site, ""size"": size}}
    } else if site == """" && size != """" && network != """" && region == """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""size"": size, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}}}
    } else if site == """" && size != """" && network != """" && region != """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""site"": site, ""size"": size, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}, ""aws_region"": region}}
    } else if site == """" && size == """" && network != """" && region == """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}}}
    } else if site == """" && size == """" && network != """" && region != """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}, ""aws_region"": region}}
    } else if site == """" && size == """" && network != """" && region != """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}, ""aws_region"": region, ""http_request_status"": code}}
    } else if site == """" && size == """" && network == """" && region != """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""aws_region"": region}}
    } else if site == """" && size == """" && network == """" && region != """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""aws_region"": region, ""http_request_status"": code}}
    } else if site == """" && size == """" && network == """" && region == """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""http_request_status"": code}}
    } else if site != """" && size == """" && network == """" && region == """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""site"": site, ""http_request_status"": code}}
    } else if site != """" && size == """" && network == """" && region != """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""site"": site, ""aws_region"": region}}
    } else if site != """" && size == """" && network != """" && region == """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""site"": site, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}}}
    } else if site == """" && size != """" && network == """" && region == """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""size"": size, ""http_request_status"": code}}
    } else if site == """" && size != """" && network == """" && region != """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""size"": size, ""aws_region"": region}}
    } else if site == """" && size != """" && network != """" && region == """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""size"": size, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}}}
    } else if site == """" && size == """" && network != """" && region == """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}, ""http_request_status"": code}}
    } else if site == """" && size == """" && network != """" && region != """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}, ""aws_region"": region}}
    } else if site != """" && size != """" && network != """" && region == """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}, ""size"": size, ""http_request_status"": code}}
    } else if site != """" && size != """" && network == """" && region == """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""site"": site, ""size"": size, ""http_request_status"": code}}
    } else if site == """" && size != """" && network != """" && region == """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}, ""size"": size, ""http_request_status"": code}}
    } else if site != """" && size == """" && network != """" && region != """" && code == -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}, ""aws_region"": region, ""site"": site}}
    } else if site != """" && size == """" && network != """" && region != """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}, ""aws_region"": region, ""site"": site, ""http_request_status"": code}}
    } else if site != """" && size == """" && network == """" && region != """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""aws_region"": region, ""site"": site, ""http_request_status"": code}}
    } else if site == """" && size != """" && network != """" && region != """" && code != -1 {
        match = bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day, ""network"": &bson.RegEx{Pattern: network, Options: ""i""}, ""aws_region"": region, ""size"": size, ""http_request_status"": code}}
    }

    operations := []bson.M{match, group}
    err = dbsession.DB(""logs"").C(""prod"").Pipe(operations).All(&items)
    return
}
",7813
1395,42755310,"func GetAllHourly(dbsession *mgo.Session, year, month, day, site, size, network, region string, code int) (items []MassAggregation, err error) {
    defer dbsession.Close()
    matches := []bson.M{bson.M{""$match"": bson.M{""year"": year, ""month"": month, ""day"": day}}}
    if network == ""openx3"" {
        network = ""openx""
    }

    if site != """" {
        matches = append(matches, bson.M{""$match"": bson.M{""site"": site}})
    }
    if size != """" {
        matches = append(matches, bson.M{""$match"": bson.M{""size"": size}})
    }
    if region != """" {
        matches = append(matches, bson.M{""$match"": bson.M{""aws_region"": region}})
    }
    if code != -1 {
        matches = append(matches, bson.M{""$match"": bson.M{""http_request_status"": code}})
    }
    if network != """" {
        matches = append(matches, bson.M{""$match"": bson.M{""network"": &bson.RegEx{Pattern: network, Options: ""i""}}})
    }
    group := bson.M{""$group"": bson.M{""_id"": bson.M{""aws_region"": ""$aws_region"", ""http_request_status"": ""$http_request_status"", ""hour"": ""$hour"", ""network"": ""$network"", ""site"": ""$site"", ""size"": ""$size"", ""zone"": ""$zone"", ""extra"": ""$extra""}, ""total"": bson.M{""$sum"": ""$count""}}}
    var operations []bson.M
    for _, match := range matches {
        operations = append(operations, match)
    }
    operations = append(operations, group)
    err = dbsession.DB(""logs"").C(""prod"").Pipe(operations).All(&items)
    return
}
",1414
1396,42761866,"listener 8883
cafile /etc/mosquitto/ca_certificates/ca.crt
certfile /etc/mosquitto/certs/server.crt
keyfile /etc/mosquitto/certs/server.key

require_certificate true
",166
1397,42761866,"mosquitto_pub -t ""/test"" -m ""test"" --cafile ca/ca.crt --cert certs/client.crt --key certs/client.key -p 8883 -h server.com

mosquitto_sub -t ""/test"" --cafile ca/ca.crt --cert certs/client.crt --key certs/client.key -p 8883 -h server.com
",237
1398,42761866,"openssl s_client -connect server.com:8883 -CAfile ca/ca.crt -cert certs/client.crt -key certs/client.key
",105
1399,42761866,configureMqttConnection(),25
1400,42761866,"tls.LoadX509KeyPair(c.config.CertFile, c.config.KeyFile)",56
1401,42761866,connect(backOff int),20
1402,42761866,GO start(),10
1403,42761866,"package main

import (
    ""crypto/tls""
    ""crypto/x509""
    ""fmt""
    ""io/ioutil""
    ""strings""
    ""time""

    MQTT ""git.eclipse.org/gitroot/paho/org.eclipse.paho.mqtt.golang.git""
    ""linksmart.eu/lc/core/catalog""
    ""linksmart.eu/lc/core/catalog/service""
)

// MQTTConnector provides MQTT protocol connectivity
type MQTTConnector struct {
    config        *MqttProtocol
    clientID      string
    client        *MQTT.Client
    pubCh         chan AgentResponse
    subCh         chan<- DataRequest
    pubTopics     map[string]string
    subTopicsRvsd map[string]string // store SUB topics ""reversed"" to optimize lookup in messageHandler
}

const defaultQoS = 1

func (c *MQTTConnector) start() {
    logger.Println(""MQTTConnector.start()"")

    if c.config.Discover && c.config.URL == """" {
        err := c.discoverBrokerEndpoint()
        if err != nil {
            logger.Println(""MQTTConnector.start() failed to start publisher:"", err.Error())
            return
        }
    }

    // configure the mqtt client
    c.configureMqttConnection()

    // start the connection routine
    logger.Printf(""MQTTConnector.start() Will connect to the broker %v\n"", c.config.URL)
    go c.connect(0)

    // start the publisher routine
    go c.publisher()
}

// reads outgoing messages from the pubCh und publishes them to the broker
func (c *MQTTConnector) publisher() {
    for resp := range c.pubCh {
        if !c.client.IsConnected() {
            logger.Println(""MQTTConnector.publisher() got data while not connected to the broker. **discarded**"")
            continue
        }
        if resp.IsError {
            logger.Println(""MQTTConnector.publisher() data ERROR from agent manager:"", string(resp.Payload))
            continue
        }
        topic := c.pubTopics[resp.ResourceId]
        c.client.Publish(topic, byte(defaultQoS), false, resp.Payload)
        // We dont' wait for confirmation from broker (avoid blocking here!)
        //<-r
        logger.Println(""MQTTConnector.publisher() published to"", topic)
    }
}


func (c *MQTTConnector) stop() {
    logger.Println(""MQTTConnector.stop()"")
    if c.client != nil && c.client.IsConnected() {
        c.client.Disconnect(500)
    }
}

func (c *MQTTConnector) connect(backOff int) {
    if c.client == nil {
        logger.Printf(""MQTTConnector.connect() client is not configured"")
        return
    }
    for {
        logger.Printf(""MQTTConnector.connect() connecting to the broker %v, backOff: %v sec\n"", c.config.URL, backOff)
        time.Sleep(time.Duration(backOff) * time.Second)
        if c.client.IsConnected() {
            break
        }
        token := c.client.Connect()
        token.Wait()
        if token.Error() == nil {
            break
        }
        logger.Printf(""MQTTConnector.connect() failed to connect: %v\n"", token.Error().Error())
        if backOff == 0 {
            backOff = 10
        } else if backOff <= 600 {
            backOff *= 2
        }
    }

    logger.Printf(""MQTTConnector.connect() connected to the broker %v"", c.config.URL)
    return
}

func (c *MQTTConnector) onConnected(client *MQTT.Client) {
    // subscribe if there is at least one resource with SUB in MQTT protocol is configured
    if len(c.subTopicsRvsd) > 0 {
        logger.Println(""MQTTPulbisher.onConnected() will (re-)subscribe to all configured SUB topics"")

        topicFilters := make(map[string]byte)
        for topic, _ := range c.subTopicsRvsd {
            logger.Printf(""MQTTPulbisher.onConnected() will subscribe to topic %s"", topic)
            topicFilters[topic] = defaultQoS
        }
        client.SubscribeMultiple(topicFilters, c.messageHandler)
    } else {
        logger.Println(""MQTTPulbisher.onConnected() no resources with SUB configured"")
    }
}

func (c *MQTTConnector) onConnectionLost(client *MQTT.Client, reason error) {
    logger.Println(""MQTTPulbisher.onConnectionLost() lost connection to the broker: "", reason.Error())

    // Initialize a new client and reconnect
    c.configureMqttConnection()
    go c.connect(0)
}

func (c *MQTTConnector) configureMqttConnection() {
    connOpts := MQTT.NewClientOptions().
        AddBroker(c.config.URL).
        SetClientID(c.clientID).
        SetCleanSession(true).
        SetConnectionLostHandler(c.onConnectionLost).
        SetOnConnectHandler(c.onConnected).
        SetAutoReconnect(false) // we take care of re-connect ourselves

    // Username/password authentication
    if c.config.Username != """" && c.config.Password != """" {
        connOpts.SetUsername(c.config.Username)
        connOpts.SetPassword(c.config.Password)
    }

    // SSL/TLS
    if strings.HasPrefix(c.config.URL, ""ssl"") {
        tlsConfig := &tls.Config{}
        // Custom CA to auth broker with a self-signed certificate
        if c.config.CaFile != """" {
            caFile, err := ioutil.ReadFile(c.config.CaFile)
            if err != nil {
                logger.Printf(""MQTTConnector.configureMqttConnection() ERROR: failed to read CA file %s:%s\n"", c.config.CaFile, err.Error())
            } else {
                tlsConfig.RootCAs = x509.NewCertPool()
                ok := tlsConfig.RootCAs.AppendCertsFromPEM(caFile)
                if !ok {
                    logger.Printf(""MQTTConnector.configureMqttConnection() ERROR: failed to parse CA certificate %s\n"", c.config.CaFile)
                }
            }
        }
        // Certificate-based client authentication
        if c.config.CertFile != """" && c.config.KeyFile != """" {
            cert, err := tls.LoadX509KeyPair(c.config.CertFile, c.config.KeyFile)
            if err != nil {
                logger.Printf(""MQTTConnector.configureMqttConnection() ERROR: failed to load client TLS credentials: %s\n"",
                    err.Error())
            } else {
                tlsConfig.Certificates = []tls.Certificate{cert}
            }
        }

        connOpts.SetTLSConfig(tlsConfig)
    }

    c.client = MQTT.NewClient(connOpts)
}
",5983
1404,42774958,"rabbitmqctl list_queues name messages_ready messages_unacknowledged
Listing queues ...
from    13796   16357
",109
1405,42774958,"=ERROR REPORT==== 13-Mar-2017::15:15:52 ===
** Generic server  terminating
** Last message in was {inet_reply,#Port,{error,timeout}}
** When Server state == {reader_state,#Port,
                         ""127.0.0.1:52033 -> 127.0.0.1:61613"",
                         {resume,#Fun},
                         {proc_state,""session-giKiPAbTFy86J1XdZsh1zg"",
                          ,,
                          {dict,1,16,16,8,80,48,
                           {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
                           {{[],[],[],[],[],[],[],[],[],[],[],[],[],
                             [[>|
                               {subscription,""/queue/from"",client,true,
                                ""id='1'""}]],
                             [],[]}}},
                          ""1.2"",undefined,undefined,
                          {stomp_configuration,>,>,false,
                           false,false},
                          {set,1,16,16,8,80,48,
                           {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
                           {{[],[],[],[],[],[],[],[],[],[],
                             [>],
                             [],[],[],[],[]}}},
                          {dict,0,16,16,8,80,48,
                           {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
                           {{[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],
                             []}}},
                          #Fun,
                          {amqp_adapter_info,
                           {127,0,0,1},
                           61613,
                           {127,0,0,1},
                           52033, 127.0.0.1:61613"">>,
                           {'STOMP',0},
                           [{channels,1},
                            {channel_max,1},
                            {frame_max,0},
                            {client_properties,
                             [{>,longstr,>}]},
                            {ssl,false}]},
                          #Fun,none,
                          {127,0,0,1},
                          true},
                         running,false,true,
                         {state,fine,5000,#Ref},
                         undefined,,,
                         {,}}
** Reason for termination == 
** {error,timeout}

=WARNING REPORT==== 13-Mar-2017::15:18:57 ===
STOMP connection 127.0.0.1:52052 -> 127.0.0.1:61613 terminated with reason {error,
                                                                            timeout}, closing it
",2526
1406,42774958,"""github.com/go-stomp/stomp""
_ ""github.com/go-sql-driver/mysql""

func deQueue(conf util.Conf) {
  defer wg.Done()

  var err error

  st, err = stomp.Dial(""tcp"", conf.Stomp.S_HOST,
                       stomp.ConnOpt.Login(conf.Stomp.S_USER, conf.Stomp.S_PASS),
                       stomp.ConnOpt.AcceptVersion(stomp.V12),
                       stomp.ConnOpt.Host(""/""),
                       stomp.ConnOpt.UseStomp)

  checkErr(""Problem connecting to stomp server"", err)

  sub, err := st.Subscribe(stompq, stomp.AckClient)
  checkErr(""Problem subscribing to channel"", err)

  errcnt  := 0
  count   := 0
  dbinc   := 0
  connchk := time.NewTicker(5 * time.Second).C
  statwrt := time.NewTicker(10 * time.Minute).C

  L:
  for {
    select {
      case <- stop:
        break L
      case msg := <-sub.C:
        err = dbit(string(msg.Body))

        if err != nil {
          checkWarn(""Problem inserting into DB"", err)
          errcnt++
          if errcnt >= 20 { checkErr(""To many errors. Exiting"", err) }
          time.Sleep(5 * time.Second)
        } else {
          dbinc++
          count++
          errcnt = 0
        }

        if dbinc >= 100 {
          err = st.Ack(msg)
          if err != nil { 
            checkWarn(""Problem acking the msg"", err)
          } else { 
            dbinc = 0
          }
        }
      case <- statwrt:
        if(*stats ) {
          t  := time.Now()
          d  := fmt.Sprintf(""%d-%02d-%02d %02d:%02d:%02d"", t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute(), t.Second())
          s  := fmt.Sprintf(""%s: to_log has processed %v records since last log\n"", d, count)
          err = st.Send(statq, ""text/plain"", []byte(s))
          checkWarn(""Stats failed to send to server"", err)
        }
        count = 0
       case <- connchk:
        if(sub.Active() == false) {
          checkErr(""Rabbit subscription went away"", errors.New(""active check failed""))
        }
    }
  }

  err = sub.Unsubscribe()
  checkWarn(""Problem unsusbcribing from Rabbit queue"", err)

  err = st.Disconnect()
  checkWarn(""Problem disconnecting from RabbitMQ server"", err)
}
",2112
1407,42784515,"package main

import (
    ""encoding/json""
    ""log""
    ""net""
    ""net/http""
    ""net/http/fcgi""
    ""os""
)

func main() {
    //setup the config
    configFile := ""config.json""
    fd, err := os.Open(configFile)
    if err != nil {
        log.Fatalf(""Can't open config file: %v"", configFile)
    }
    CFG := config{}
    err = json.NewDecoder(fd).Decode(&CFG)
    if err != nil {
        log.Fatalf(""parse config error: %v"", err)
    }

    //init DB connection
    db.InitConnectionInfo(CFG.Database.Host, CFG.Database.Port, CFG.Database.Database, CFG.Database.Username, CFG.Database.Password)

    //register HTTP handler
    sessionHandler := &handlers.SessionHandler{}
    http.Handle(""/sessions"", sessionHandler)
    http.Handle(""/sessions/"", sessionHandler)

    userHandler := &handlers.UserHandler{
        Facebook:      &oa.OAuth{AppId: CFG.Facebook.Key, Secret: CFG.Facebook.Secret},
        Sina:          &oa.OAuth{AppId: CFG.Sina.Key, Secret: CFG.Sina.Secret},
        Google:        &oa.OAuth{AppId: CFG.Google.Key, Secret: CFG.Google.Secret},
        Tencent:       &oa.OAuth{AppId: CFG.Tencent.Key, Secret: CFG.Tencent.Secret},
        Mixpanel:      &hu.Share{Token: CFG.Mixpanel.Token},
        FacebookShare: &hu.Share{Token: CFG.Facebook.Token},
        SinaShare:     &hu.Share{Token: CFG.Sina.Token},
        GoogleShare:   &hu.Share{Token: CFG.Google.Token},
        TencentShare:  &hu.Share{Token: CFG.Tencent.Token},
    }
    http.Handle(""/users"", userHandler)
    http.Handle(""/users/"", userHandler)

    //and so on ...

    //run server
    log.Println(""start listen: "", CFG.FcgiAddr)
    l, _ := net.Listen(""tcp"", CFG.FcgiAddr)
    log.Fatalf(""server error is %v"", fcgi.Serve(l, nil))
    //@@select {}
    log.Println(""end listen"")
}
",1770
1408,42784515,/users/1234567/places,21
1409,42784515,/users/1234567,14
1410,42784515,{blank data},12
1411,42784515,{normal user(1234567) data},27
1412,42784515,{normal user(1234567) data},27
1413,42784515,{normal user(1234567) data},27
1414,42784515,"
{
    ""meta"": {
        ""code"": 200,
        ""text"": ""OK""
    },
    ""data"": {
        ""count"": 21,
        ""place-tag-maps"": [{
            ""id"": ""95842310160384"",
            ""place-id"": ""95551731663150"",
            ""tag-id"": ""95551579750669"",
            ""ct"": ""2014-07-01T09:07:28Z""
        }, {
            ""id"": ""95842310160385"",
            ""place-id"": ""95551731663150"",
            ""tag-id"": ""95551579750694"",
            ""ct"": ""2015-01-15T17:41:23Z""
        }, {
            ""id"": ""96262389694470"",
            ""place-id"": ""95551731663150"",
            ""tag-id"": ""95910120456455"",
            ""ct"": ""2016-07-18T13:11:39Z""
        }, ...],
        ""places"": [{
            ""id"": ""95551731663150"",
            ""name"": ""Kam Fung Restaurant"",
            ""address"": ""G/F, 41 Spring Garden Ln"",
            ""coordinate"": {
                ""latitude"": 22.275576,
                ""longitude"": 114.172582
            },
            ""telephone"": ""+852 2572 0526"",
            ""city-id"": ""95530516807703"",
            ""city"": ""Hong Kong"",
            ""country"": ""Hong Kong"",
            ""type"": ""4sq"",
            ""ref-id"": ""4b1613f8f964a520cdb623e3"",
            ""ct"": ""2016-02-23T07:42:43.565489Z"",
            ""mt"": ""2017-02-22T09:35:48.302929Z"",
            ""rating"": 7.5,
            ""stats"": {
                ""foursquare"": {
                    ""count"": 111,
                    ""value"": 7.5
                },
                ""spottly"": {
                    ""save-count"": 12
                }
            },
            ""permanent-close"": false,
            ""price"": """"
        }, ...],
        ""posts"": [{
            ""collection-id"": ""95551746474003"",
            ""coordinate"": {
                ""latitude"": 22.275576,
                ""longitude"": 114.172582
            },
            ""ct"": ""2017-02-22T09:35:47Z"",
            ""facebook-tag-users"": [],
            ""id"": ""97501586849795"",
            ""medias"": [],
            ""message"": """",
            ""mt"": ""2017-02-22T09:35:47Z"",
            ""owner-id"": ""96527264645120"",
            ""place-id"": ""95551731663150"",
            ""share-to"": [],
            ""star"": 5,
            ""status"": ""Done"",
            ""tags"": []
        }, ...],
        ""users"": [{
            ""id"": ""95551581323446"",
            ""uid"": ""hk_epicurus"",
            ""uid-ignore-case"": ""hk_epicurus"",
            ""name"": ""Hk Epicurus"",
            ""head"": ""https://d278wa0j9nq2mp.cloudfront.net/uploader/54aa335ddf4e63450002919a.jpeg"",
            ""site"": ""www.hkepicurus.com"",
            ""location"": ""Hong Kong"",
            ""description"": ""Hong Kong Food \u0026 Travel Bear.\nGrew up in Aust, Malaysia, Tokyo \u0026 HK. \nInstagram: EpicurusHongKong\nFacebook, Spottly \u0026 Twitter: HK Epicurus \n微博: 香港美食-伊比\nFacebook Fans Page:  http://on.fb.me/1qDyiIk"",
            ""ct"": ""2013-10-13T19:12:41Z"",
            ""mt"": ""2015-11-08T15:22:45Z""
        }, ...]
    }
}
",2922
1415,42784515,"
{
    ""meta"": {
        ""code"": 200,
        ""text"": ""OK""
    },
    ""data"": {
        ""friends"": [{
            ""id"": ""97331335725056"",
            ""from-id"": ""97273770803200"",
            ""to-id"": ""96527264645120"",
            ""ct"": ""2017-01-23T07:58:41Z""
        }],
        ""user"": {
            ""ct"": ""2013-04-30T23:30:05Z"",
            ""description"": ""Founder and Chief Everything Officer of Spottly. Loves to eat. Have a really bad memory. Wants to remember the best places and make travel research better"",
            ""followers"": {
                ""count"": 41291
            },
            ""followings"": {
                ""count"": 322
            },
            ""head"": ""https://d278wa0j9nq2mp.cloudfront.net/uploader/525ffac8df4e6347870145ef.jpeg"",
            ""id"": ""96527264645120"",
            ""location"": ""Vancouver | Hong Kong | Beijing "",
            ""mt"": ""2015-10-27T09:47:12Z"",
            ""name"": ""Edwyn Chan"",
            ""site"": ""http://spottly.com/edwyn"",
            ""uid"": ""edwyn"",
            ""uid-ignore-case"": ""edwyn""
        }
    }
}
",1066
1416,42784515,"
{
    ""meta"": {
        ""code"": 200,
        ""text"": ""OK""
    }
}
",67
1417,42784515,"
{
    ""meta"": {
        ""code"": 200,
        ""text"": ""OK""
    },
    ""data"": {
        ""friends"": [{
            ""id"": ""97331335725056"",
            ""from-id"": ""97273770803200"",
            ""to-id"": ""96527264645120"",
            ""ct"": ""2017-01-23T07:58:41Z""
        }],
        ""user"": {
            ""ct"": ""2013-04-30T23:30:05Z"",
            ""description"": ""Founder and Chief Everything Officer of Spottly. Loves to eat. Have a really bad memory. Wants to remember the best places and make travel research better"",
            ""followers"": {
                ""count"": 41291
            },
            ""followings"": {
                ""count"": 322
            },
            ""head"": ""https://d278wa0j9nq2mp.cloudfront.net/uploader/525ffac8df4e6347870145ef.jpeg"",
            ""id"": ""96527264645120"",
            ""location"": ""Vancouver | Hong Kong | Beijing "",
            ""mt"": ""2015-10-27T09:47:12Z"",
            ""name"": ""Edwyn Chan"",
            ""site"": ""http://spottly.com/edwyn"",
            ""uid"": ""edwyn"",
            ""uid-ignore-case"": ""edwyn""
        }
    }
}
",1066
1418,42796310,CGO_ENABLED=1,13
1419,42796310,libusb,6
1420,42796310,"arm-linux-gnueabihf/bin/ld: warning: libudev.so.1, needed by /usr/lib/arm-linux-gnueabihf/libusb-1.0.so, not found (try using -rpath or -rpath-link)
",149
1421,42796310,"CGO_ENABLED=1 GOARCH=arm GOARM=7 PKG_CONFIG_LIBDIR=/usr/lib/arm-linux-gnueabihf/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ go build -x -ldflags '-extld=arm-linux-gnueabihf-gcc -rpath=/usr/lib/arm-linux-gnueabihf -L/usr/lib/arm-linux-gnueabihf -ludev'
",313
1422,42796310,-x,2
1423,42796310,src/net,7
1424,42796310,"cd /usr/local/go/src/net
/usr/local/go/pkg/tool/linux_amd64/cgo -dynpackage net -dynimport $WORK/net/_obj/_cgo_.o -dynout $WORK/net/_obj/_cgo_import.go
arm-linux-gnueabihf-gcc -I . -fPIC -marm -pthread -fmessage-length=0 -fdebug-prefix-map=$WORK=/tmp/go-build -gno-record-gcc-switches -o $WORK/net/_obj/_all.o $WORK/net/_obj/_cgo_export.o $WORK/net/_obj/cgo_linux.cgo2.o $WORK/net/_obj/cgo_resnew.cgo2.o $WORK/net/_obj/cgo_socknew.cgo2.o $WORK/net/_obj/cgo_unix.cgo2.o -g -O2 -Wl,-r -nostdlib -Wl,--build-id=none
/usr/local/go/pkg/tool/linux_amd64/compile -o $WORK/net.a -trimpath $WORK -p net -buildid 9e58c94d1ddeba63666a35ecee9409056baf5d3c -D _/usr/local/go/src/net -I $WORK -pack ./addrselect.go ./conf.go ./dial.go ./dnsclient.go ./dnsclient_unix.go ./dnsconfig_unix.go ./dnsmsg.go ./fd_mutex.go ./fd_poll_runtime.go ./fd_posix.go ./fd_unix.go ./file.go ./file_unix.go ./hook.go ./hook_cloexec.go ./hook_unix.go ./hosts.go ./interface.go ./interface_linux.go ./ip.go ./iprawsock.go ./iprawsock_posix.go ./ipsock.go ./ipsock_posix.go ./lookup.go ./lookup_unix.go ./mac.go ./net.go ./nss.go ./parse.go ./pipe.go ./port.go ./port_unix.go ./sendfile_linux.go ./sock_cloexec.go ./sock_linux.go ./sock_posix.go ./sockopt_linux.go ./sockopt_posix.go ./sockoptip_linux.go ./sockoptip_posix.go ./tcpsock.go ./tcpsock_posix.go ./tcpsockopt_posix.go ./tcpsockopt_unix.go ./udpsock.go ./udpsock_posix.go ./unixsock.go ./unixsock_posix.go ./writev_unix.go $WORK/net/_obj/_cgo_gotypes.go $WORK/net/_obj/cgo_linux.cgo1.go $WORK/net/_obj/cgo_resnew.cgo1.go $WORK/net/_obj/cgo_socknew.cgo1.go $WORK/net/_obj/cgo_unix.cgo1.go $WORK/net/_obj/_cgo_import.go
# github.com/resin-io/edge-node-manager/vendor/github.com/kylelemons/gousb/usb
/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/../lib/gcc/arm-linux-gnueabihf/4.8.3/../../../../arm-linux-gnueabihf/bin/ld: warning: libudev.so.1, needed by /usr/lib/arm-linux-gnueabihf/libusb-1.0.so, not found (try using -rpath or -rpath-link)
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_monitor_filter_add_match_subsystem_devtype@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_monitor_enable_receiving@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_enumerate_scan_devices@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_new@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_device_get_devnode@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_enumerate_new@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_list_entry_get_name@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_enumerate_add_match_subsystem@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_device_get_sysname@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_enumerate_get_list_entry@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_device_new_from_syspath@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_monitor_new_from_netlink@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_monitor_receive_device@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_device_unref@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_enumerate_unref@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_monitor_get_fd@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_list_entry_get_next@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_monitor_unref@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `clock_gettime@GLIBC_2.17'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_unref@LIBUDEV_183'
/usr/lib/arm-linux-gnueabihf/libusb-1.0.so: undefined reference to `udev_device_get_action@LIBUDEV_183'
collect2: error: ld returned 1 exit status
",4241
1425,42796310,/usr/lib/arm-linux-gnueabihf/libusb-1.0.so,42
1426,42796310,ls -al,6
1427,42796310,libudev.so,10
1428,42796310,/lib/arm-linux-gnueabihf/,25
1429,42796310,"lrwxrwxrwx 1 root root     41 Jan  7 04:14 libudev.so -> /lib/arm-linux-gnueabihf/libudev.so.1.5.0
-rw-r--r-- 1 root root 105464 Jun 16  2014 libusb-1.0.a
lrwxrwxrwx 1 root root     44 Jun 16  2014 libusb-1.0.so -> /lib/arm-linux-gnueabihf/libusb-1.0.so.0.1.0
drwxr-xr-x 2 root root   4096 Mar 15 14:48 pkgconfig
",313
1430,42796310,/usr/lib/arm-linux-gnueabihf/pkgconfig,38
1431,42796310,"-rw-r--r-- 1 root root  513 Jan  7 04:13 libudev.pc
-rw-r--r-- 1 root root  332 Jun 16  2014 libusb-1.0.pc
",107
1432,42796310,file,4
1433,42796310,libusb,6
1434,42796310,libudev,7
1435,42796310,"/lib/arm-linux-gnueabihf/libusb-1.0.so.0.1.0: ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, BuildID[sha1]=7d7b487c91042c1f254b39516b4aeabedfb828fc, stripped
/lib/arm-linux-gnueabihf/libudev.so.1.5.0: ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, BuildID[sha1]=334f4f0d8b1222a324ccd0827c1613fdd1e2ec15, stripped
",377
1436,42828602,"#!/usr/bin/env python

MYPORT = 5353
MYGROUP_6 = 'ff02::fb'
MYTTL = 1 # Increase to reach other networks

import time
import struct
import socket
import sys

def main():
    sender(MYGROUP_6)


def sender(group):
    addrinfo = socket.getaddrinfo(group, None)[0]

    s = socket.socket(addrinfo[0], socket.SOCK_DGRAM)

    # Set Time-to-live (optional)
    ttl_bin = struct.pack('@i', MYTTL)
    s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, ttl_bin)

    while True:
        data = repr(time.time())
        s.sendto(data + '\0', (addrinfo[4][0], MYPORT))
        time.sleep(1)

if __name__ == '__main__':
    main()
",634
1437,42828602,"package main

import (
    ""fmt""
    ""net""
)

func main() {
    addr, err := net.ResolveUDPAddr(""udp6"", ""[ff02::fb]:5353"")
    if err != nil {
        fmt.Printf(""ResolveUDPAddr err: %v\n"", err)
        return
    }

    if conn, err := net.DialUDP(""udp6"", nil, addr); err == nil {
        if _, err = conn.Write([]byte(""hello"")); err != nil {
            fmt.Printf(""Write failed, %v\n"", err)
        }
    } else {
        fmt.Printf(""DialUDP err: %v\n"", err)
    }
    return
}
",481
1438,42828602,"    /* 
 * Examples:
 *     >sender 224.0.22.1 9210 6000 1000
 *     >sender ff15::1 2001 65000 1
 */

#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include  /* for usleep() */

#define SOCKET int

int mcast_send_socket(char* multicastIP, char* multicastPort,  int multicastTTL, struct addrinfo **multicastAddr) {

    SOCKET sock;
    struct addrinfo hints = { 0 };    /* Hints for name lookup */

    /*
      Resolve destination address for multicast datagrams 
    */
    hints.ai_family   = PF_UNSPEC;
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags    = AI_NUMERICHOST;
    int status;
    if ((status = getaddrinfo(multicastIP, multicastPort, &hints, multicastAddr)) != 0 )
    {
        fprintf(stderr, ""getaddrinfo: %s\n"", gai_strerror(status));
        return -1;
    }

    /* 
       Create socket for sending multicast datagrams 
    */
    if ( (sock = socket((*multicastAddr)->ai_family, (*multicastAddr)->ai_socktype, 0)) < 0 ) {
        perror(""socket() failed"");
        freeaddrinfo(*multicastAddr);
        return -1;
    }

    /* 
       Set TTL of multicast packet 
    */
    if ( setsockopt(sock,
            (*multicastAddr)->ai_family == PF_INET6 ? IPPROTO_IPV6        : IPPROTO_IP,
            (*multicastAddr)->ai_family == PF_INET6 ? IPV6_MULTICAST_HOPS : IP_MULTICAST_TTL,
            (char*) &multicastTTL, sizeof(multicastTTL)) != 0 ) {
        perror(""setsockopt() failed"");
        freeaddrinfo(*multicastAddr);
        return -1;
    }


    /* 
       set the sending interface 
    */
    if((*multicastAddr)->ai_family == PF_INET) {
        in_addr_t iface = INADDR_ANY; /* well, yeah, any */
        if(setsockopt (sock, 
                   IPPROTO_IP,
                   IP_MULTICAST_IF,
                   (char*)&iface, sizeof(iface)) != 0) { 
            perror(""interface setsockopt() sending interface"");
            freeaddrinfo(*multicastAddr);
            return -1;
        }

    }

    if((*multicastAddr)->ai_family == PF_INET6) {
        unsigned int ifindex = 0; /* 0 means 'default interface'*/
        if(setsockopt (sock, 
                   IPPROTO_IPV6,
                   IPV6_MULTICAST_IF,
                   (char*)&ifindex, sizeof(ifindex)) != 0) { 
            perror(""interface setsockopt() sending interface"");
            freeaddrinfo(*multicastAddr);
            return -1;
        }   
    }

    return sock;
}

static void DieWithError(char* errorMessage)
{
  fprintf(stderr, ""%s\n"", errorMessage);
  exit(EXIT_FAILURE);
}


int main(int argc, char *argv[])
{
  SOCKET sock;
  struct addrinfo *multicastAddr;
  char*     multicastIP;            /* Arg: IP Multicast address */
  char*     multicastPort;          /* Arg: Server port */
  char*     sendString;             /* Arg: String to multicast */
  int       sendStringLen;          /* Length of string to multicast */
  int       multicastTTL;           /* Arg: TTL of multicast packets */
  int       defer_ms;               /* miliseconds to defer in between sending */

  int i;

  if ( argc  6 )
    {
      fprintf(stderr, ""Usage: %s     []\n"", argv[0]);
      exit(EXIT_FAILURE);
    }


  multicastIP   = argv[1];             /* First arg:   multicast IP address */
  multicastPort = argv[2];             /* Second arg:  multicast port */
  sendStringLen = atoi(argv[3]);   
  defer_ms = atoi(argv[4]);

  /* just fill this with some byte */
  sendString = calloc(sendStringLen, sizeof(char));
  for(i = 0; i<sendStringLen; ++i)
    sendString[i]= 's';



  multicastTTL  = (argc == 6 ?         /* Fourth arg:  If supplied, use command-line */
           atoi(argv[5]) : 1); /* specified TTL, else use default TTL of 1 */



  sock = mcast_send_socket(multicastIP, multicastPort, multicastTTL, &multicastAddr);
  if(sock == -1 )
      DieWithError(""mcast_send_socket() failed"");


  int nr=0;
  for (;;) /* Run forever */
    {
      int*  p_nr = (int*)sendString;
      *p_nr = htonl(nr);

      if ( sendto(sock, sendString, sendStringLen, 0,
          multicastAddr->ai_addr, multicastAddr->ai_addrlen) != sendStringLen )
        DieWithError(""sendto() sent a different number of bytes than expected"");

      fprintf(stderr, ""packet %d sent\n"", nr);
      nr++;
      usleep(defer_ms*1000); 
    }

  /* NOT REACHED */
  return 0;
}
",4315
1439,42828602,"setsockopt(sock, IPPROTO_IPV6, IPV6_MULTICAST_IF, (char*)&ifindex, sizeof(ifindex))",83
1440,42861589,"package main

import (
    ""fmt""
    ""io/ioutil""
    ""log""
    ""os""
    ""os/exec""
    ""runtime""
    ""runtime/debug""
    ""strconv""
    ""time""
)

func main() {
    source := ""/tmp/1G.source""
    repeats, _ := strconv.Atoi(os.Args[1])
    m := &runtime.MemStats{}

    err := exec.Command(""dd"", ""if=/dev/zero"", ""of=""+source, ""bs=1073741824"", ""count=1"").Run()
    if err != nil {
        log.Fatalf(""failed to create 1GB file: %s\n"", err)
    }
    fmt.Printf(""created 1GB source file, %s\n"", memory_usage(m))

    // read it multiple times
    switch os.Args[2] {
    case ""1"":
        fmt.Println(""re-using a byte slice and emptying it each time"")
        // var data []byte
        for i := 1; i <= repeats; i++ {
            data, _ := ioutil.ReadFile(source)
            if len(data) > 0 { // just so we use data
                data = nil
            }
            fmt.Printf(""did read %d, %s\n"", i, memory_usage(m))
        }
    case ""2"":
        fmt.Println(""ignoring the return value entirely"")
        for i := 1; i <= repeats; i++ {
            ioutil.ReadFile(source)
            fmt.Printf(""did read %d, %s\n"", i, memory_usage(m))
        }
    case ""3"":
        fmt.Println(""ignoring the return value entirely, forcing memory freeing"")
        for i := 1; i <= repeats; i++ {
            ioutil.ReadFile(source)
            debug.FreeOSMemory()
            fmt.Printf(""did read %d, %s\n"", i, memory_usage(m))
        }
    }

    // wait incase garbage collection needs time to do something
    <-time.After(5 * time.Second)

    fmt.Printf(""all done, %s\n"", memory_usage(m))

    os.Exit(0)
}

func memory_usage(m *runtime.MemStats) string {
    runtime.ReadMemStats(m)
    return fmt.Sprintf(""system memory: %dMB; heap alloc: %dMB; heap idle-released: %dMB"", int((m.Sys/1024)/1024), int((m.HeapAlloc/1024)/1024), int(((m.HeapIdle-m.HeapReleased)/1024)/1024))
}
",1874
1441,42861589,main 7 2,8
1442,42861589,"created 1GB source file, system memory: 2MB; heap alloc: 0MB; heap idle-released: 1MB
ignoring the return value entirely
did read 1, system memory: 4233MB; heap alloc: 3072MB; heap idle-released: 1024MB
did read 2, system memory: 4233MB; heap alloc: 3072MB; heap idle-released: 1024MB
did read 3, system memory: 4233MB; heap alloc: 3072MB; heap idle-released: 1024MB
did read 4, system memory: 4233MB; heap alloc: 3072MB; heap idle-released: 1023MB
did read 5, system memory: 6347MB; heap alloc: 3584MB; heap idle-released: 2559MB
did read 6, system memory: 6347MB; heap alloc: 3072MB; heap idle-released: 3071MB
did read 7, system memory: 6347MB; heap alloc: 3072MB; heap idle-released: 3071MB
all done, system memory: 6347MB; heap alloc: 3072MB; heap idle-released: 3071MB
",775
1443,42861589,main 7 3,8
1444,42861589,"created 1GB source file, system memory: 1MB; heap alloc: 0MB; heap idle-released: 0MB
ignoring the return value entirely, forcing memory freeing
did read 1, system memory: 4237MB; heap alloc: 0MB; heap idle-released: 0MB
did read 2, system memory: 4237MB; heap alloc: 0MB; heap idle-released: 0MB
did read 3, system memory: 6351MB; heap alloc: 0MB; heap idle-released: 0MB
did read 4, system memory: 6351MB; heap alloc: 0MB; heap idle-released: 0MB
did read 5, system memory: 6351MB; heap alloc: 0MB; heap idle-released: 0MB
did read 6, system memory: 6351MB; heap alloc: 0MB; heap idle-released: 0MB
did read 7, system memory: 6351MB; heap alloc: 0MB; heap idle-released: 0MB
all done, system memory: 6351MB; heap alloc: 0MB; heap idle-released: 0MB
",751
1445,42861589,"case ""4"":
    fmt.Println(""doing a streaming read"")
    b := make([]byte, 10000, 10000)
    for i := 1; i <= repeats; i++ {
        f, _ := os.Open(source)
        r := bufio.NewReader(f)
        for {
            _, err := r.Read(b)
            if err != nil {
                break
            }
        }
        fmt.Printf(""did read %d, %s\n"", i, memory_usage(m))
    }
}
",376
1446,42861589,"created 1GB source file, system memory: 1MB; heap alloc: 0MB; heap idle-released: 0MB
doing a streaming read
did read 1, system memory: 1MB; heap alloc: 0MB; heap idle-released: 0MB
did read 2, system memory: 1MB; heap alloc: 0MB; heap idle-released: 0MB
did read 3, system memory: 1MB; heap alloc: 0MB; heap idle-released: 0MB
did read 4, system memory: 1MB; heap alloc: 0MB; heap idle-released: 0MB
did read 5, system memory: 2MB; heap alloc: 0MB; heap idle-released: 0MB
did read 6, system memory: 2MB; heap alloc: 0MB; heap idle-released: 0MB
did read 7, system memory: 2MB; heap alloc: 0MB; heap idle-released: 0MB
all done, system memory: 2MB; heap alloc: 0MB; heap idle-released: 0MB
",691
1447,43003683,"package main

import (
  ""fmt""
  ""bitbucket.org/tradedefender/cryptocurrency/exchange-connector/cexio""
  ""github.com/shopspring/decimal""
  ""encoding/json""
  ""time""
)

type OrderBook struct {
  Asks []Ask
  Bids []Bid
}

type Ask struct {
  Rate    decimal.Decimal
  Amount  decimal.Decimal
}

type Bid struct {
  Rate    decimal.Decimal
  Amount  decimal.Decimal
}

func main() {
  cexioConn := new(cexio.Connection)

  err := cexioConn.Connect()
  if err != nil {
    fmt.Errorf(""error: %s"", err.Error())
  }

  err = cexioConn.Authenticate(""TLwYkktLf7Im6nqSKt6UO1IrU"", ""9ImOJcR7Qj3LMIyPCzky0D7WE"")
  if err != nil {
    fmt.Errorf(""error: %s"", err.Error())
  }

  readChannel := make(chan cexio.IntraAppMessage, 25)

  go cexioConn.ReadLoop(readChannel)

  processor := Processor{
    WatchPairs: [][2]string{
      [2]string{
        ""BTC"", ""USD"",
      },
    },
    conn: cexioConn,
  }

  go processor.Process(readChannel)

  // LOL
  for {
    continue
  }

}

type Processor struct {
  WatchPairs [][2]string
  conn *cexio.Connection
}

func (p *Processor) Process(ch <-chan cexio.IntraAppMessage) {

  p.conn.SubscribeToOrderBook(p.WatchPairs[0])

  pingTimer := time.Now().Unix()
  for {

    fmt.Printf(""(%v)\n"", time.Now().Unix())

    if (time.Now().Unix() - pingTimer) >= 10 {
      fmt.Println(""sending ping"")
      p.conn.SendPing()
      pingTimer = time.Now().Unix()
    }

    readMsg := <- ch
    output, _ := json.Marshal(readMsg.SocketMessage)
    fmt.Println(string(output))

    if readMsg.SocketMessage.Event == ""ping"" {
      fmt.Println(""sending pong"")
      p.conn.SendPong()
      pingTimer = time.Now().Unix()
    }

  }
}
",1653
1448,43003683,"package cexio

import (
  ""github.com/gorilla/websocket""
  //""github.com/shopspring/decimal""
  ""github.com/satori/go.uuid""
  ""encoding/hex""
  ""encoding/json""
  ""crypto/hmac""
  ""crypto/sha256""
  ""bytes""
  ""strconv""
  ""time""
  ""fmt""
)

const Url = ""wss://ws.cex.io/ws/""

type Connection struct {
  conn *websocket.Conn
}

type IntraAppMessage struct {
  SocketMessage   GenericMessage
  ProgramMessage  ProgramMessage
}

type GenericMessage struct {
  Event   string      `json:""e""`
  Data    interface{} `json:""data""`
  Auth    AuthData    `json:""auth,omitempty""`
  Ok      string      `json:""ok,omitempty""`
  Oid     string      `json:""oid,omitempty""`
  Time    int64       `json:""time,omitempty""`
}

type ProgramMessage struct {
  Error   string
}

type AuthData struct {
  Key       string  `json:""key""`
  Signature string  `json:""signature""`
  Timestamp int64   `json:""timestamp""`
}

type OrderBookSubscribeData struct {
  Pair      [2]string   `json:""pair""`
  Subscribe bool        `json:""subscribe""`
  Depth     int         `json:""depth""`
}

func (c *Connection) SendPong() error {

  pongMsg := GenericMessage{
    Event: ""pong"",
  }

  err := c.conn.WriteJSON(pongMsg)
  if err != nil {
    return nil
  }

  deadline := time.Now().Add(15*time.Second)

  err = c.conn.WriteControl(websocket.PongMessage, nil, deadline)
  if err != nil {
    return err
  }

  return nil

}

func (c *Connection) SendPing() error {

  pingMsg := GenericMessage{
    Event: ""get-balance"",
    Oid: uuid.NewV4().String(),
  }

  err := c.conn.WriteJSON(pingMsg)
  if err != nil {
    return err
  }

  deadline := time.Now().Add(15*time.Second)

  err = c.conn.WriteControl(websocket.PingMessage, nil, deadline)
  if err != nil {
    return err
  }

  return nil

}

func (c *Connection) Connect() error {
  dialer := *websocket.DefaultDialer
  wsConn, _, err := dialer.Dial(Url, nil)
  if err != nil {
    return err
  }

  c.conn = wsConn
  //c.conn.SetPingHandler(c.HandlePing)

  for {

    _, msgBytes, err := c.conn.ReadMessage()
    if err != nil {
      c.Disconnect()
      return err
    }

    fmt.Println(string(msgBytes))

    var m GenericMessage
    err = json.Unmarshal(msgBytes, &m)
    if err != nil {
      c.Disconnect()
      return err
    }

    if m.Event != ""connected"" {
      c.Disconnect()
      return err
    } else {
      break
    }

  }

  return nil
}

func (c *Connection) Disconnect() error {
  return c.conn.Close()
}

func (c *Connection) ReadLoop(ch chan<- IntraAppMessage) {
  for {

    fmt.Println(""starting new read"")

    _, msgBytes, err := c.conn.ReadMessage()
    if err != nil {
      ch <- IntraAppMessage{
        ProgramMessage: ProgramMessage{
          Error: err.Error(),
        },
      }
      continue
    }

    var m GenericMessage
    err = json.Unmarshal(msgBytes, &m)
    if err != nil {
      ch <- IntraAppMessage{
        ProgramMessage: ProgramMessage{
          Error: err.Error(),
        },
      }
      continue
    }

    ch <- IntraAppMessage{
      SocketMessage: m,
    }

  }
}

func CreateSignature(timestamp int64, key, secret string) string {
  secretBytes := []byte(secret)
  h := hmac.New(sha256.New, secretBytes)

  var buffer bytes.Buffer
  buffer.WriteString(strconv.FormatInt(timestamp, 10))
  buffer.WriteString(key)

  h.Write(buffer.Bytes())

  return hex.EncodeToString(h.Sum(nil))
}

func (c *Connection) Authenticate(key, secret string) error {

  timestamp := time.Now().Unix()
  signature := CreateSignature(timestamp, key, secret)

  var authMsg GenericMessage
  authMsg.Event = ""auth""
  authMsg.Auth = AuthData{
    Key: key,
    Signature: signature,
    Timestamp: timestamp,
  }

  err := c.conn.WriteJSON(authMsg)
  if err != nil {
    return err
  }

  for {
    _, msgBytes, err := c.conn.ReadMessage()
    if err != nil {
      c.Disconnect()
      return err
    }

    fmt.Println(string(msgBytes))

    var m GenericMessage
    err = json.Unmarshal(msgBytes, &m)
    if err != nil {
      c.Disconnect()
      return err
    }

    if m.Event != ""auth"" && m.Ok != ""ok"" {
      c.Disconnect()
      return err
    } else {
      break
    }
  }

  return nil

}

func (c *Connection) SubscribeToOrderBook(pair [2]string) error {

  sendMsg := GenericMessage{
    Event: ""order-book-subscribe"",
    Data: OrderBookSubscribeData{
      Pair: pair,
      Subscribe: true,
      Depth: 0,
    },
    Oid: uuid.NewV4().String(),
  }

  err := c.conn.WriteJSON(sendMsg)
  if err != nil {
    return err
  }

  return nil

}

func (c *Connection) GetBalance() error {

  sendMsg := GenericMessage{
    Event: ""get-balance"",
    Oid: uuid.NewV4().String(),
  }

  err := c.conn.WriteJSON(sendMsg)
  if err != nil {
    return err
  }

  return nil

}
",4736
1449,43018667,.go,3
1450,43018667,golint,6
1451,43018667,"Installing 10 tools
  gocode
  gopkgs
  go-outline
  go-symbols
  guru
  gorename
  godef
  goreturns
  golint
  gotests

Installing gocode SUCCEEDED
Installing gopkgs SUCCEEDED
Installing go-outline SUCCEEDED
Installing go-symbols FAILED
Installing guru FAILED
Installing gorename FAILED
Installing godef SUCCEEDED
Installing goreturns FAILED
Installing golint FAILED
Installing gotests FAILED

6 tools failed to install.

go-symbols:
Error: Command failed: C:\Go\bin\go.exe get -u -v github.com/newhook/go-symbols
github.com/newhook/go-symbols (download)
Fetching https://golang.org/x/tools/go/buildutil?go-get=1
Parsing meta tags from https://golang.org/x/tools/go/buildutil?go-get=1 (status code 200)
get ""golang.org/x/tools/go/buildutil"": found meta tag main.metaImport{Prefix:""golang.org/x/tools"", VCS:""git"", RepoRoot:""https://go.googlesource.com/tools""} at https://golang.org/x/tools/go/buildutil?go-get=1
get ""golang.org/x/tools/go/buildutil"": verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
# cd C:\Users\user\go\src\golang.org\x\tools; git pull --ff-only
fatal: Not a git repository (or any of the parent directories): .git
package golang.org/x/tools/go/buildutil: exit status 128
github.com/newhook/go-symbols (download)
Fetching https://golang.org/x/tools/go/buildutil?go-get=1
Parsing meta tags from https://golang.org/x/tools/go/buildutil?go-get=1 (status code 200)
get ""golang.org/x/tools/go/buildutil"": found meta tag main.metaImport{Prefix:""golang.org/x/tools"", VCS:""git"", RepoRoot:""https://go.googlesource.com/tools""} at https://golang.org/x/tools/go/buildutil?go-get=1
get ""golang.org/x/tools/go/buildutil"": verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
# cd C:\Users\user\go\src\golang.org\x\tools; git pull --ff-only
fatal: Not a git repository (or any of the parent directories): .git
package golang.org/x/tools/go/buildutil: exit status 128

guru:
Error: Command failed: C:\Go\bin\go.exe get -u -v golang.org/x/tools/cmd/guru
Fetching https://golang.org/x/tools/cmd/guru?go-get=1
Parsing meta tags from https://golang.org/x/tools/cmd/guru?go-get=1 (status code 200)
get ""golang.org/x/tools/cmd/guru"": found meta tag main.metaImport{Prefix:""golang.org/x/tools"", VCS:""git"", RepoRoot:""https://go.googlesource.com/tools""} at https://golang.org/x/tools/cmd/guru?go-get=1
get ""golang.org/x/tools/cmd/guru"": verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
# cd C:\Users\user\go\src\golang.org\x\tools; git pull --ff-only
fatal: Not a git repository (or any of the parent directories): .git
package golang.org/x/tools/cmd/guru: exit status 128
Fetching https://golang.org/x/tools/cmd/guru?go-get=1
Parsing meta tags from https://golang.org/x/tools/cmd/guru?go-get=1 (status code 200)
get ""golang.org/x/tools/cmd/guru"": found meta tag main.metaImport{Prefix:""golang.org/x/tools"", VCS:""git"", RepoRoot:""https://go.googlesource.com/tools""} at https://golang.org/x/tools/cmd/guru?go-get=1
get ""golang.org/x/tools/cmd/guru"": verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
# cd C:\Users\user\go\src\golang.org\x\tools; git pull --ff-only
fatal: Not a git repository (or any of the parent directories): .git
package golang.org/x/tools/cmd/guru: exit status 128

gorename:
Error: Command failed: C:\Go\bin\go.exe get -u -v golang.org/x/tools/cmd/gorename
Fetching https://golang.org/x/tools/cmd/gorename?go-get=1
Parsing meta tags from https://golang.org/x/tools/cmd/gorename?go-get=1 (status code 200)
get ""golang.org/x/tools/cmd/gorename"": found meta tag main.metaImport{Prefix:""golang.org/x/tools"", VCS:""git"", RepoRoot:""https://go.googlesource.com/tools""} at https://golang.org/x/tools/cmd/gorename?go-get=1
get ""golang.org/x/tools/cmd/gorename"": verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
# cd C:\Users\user\go\src\golang.org\x\tools; git pull --ff-only
fatal: Not a git repository (or any of the parent directories): .git
package golang.org/x/tools/cmd/gorename: exit status 128
Fetching https://golang.org/x/tools/cmd/gorename?go-get=1
Parsing meta tags from https://golang.org/x/tools/cmd/gorename?go-get=1 (status code 200)
get ""golang.org/x/tools/cmd/gorename"": found meta tag main.metaImport{Prefix:""golang.org/x/tools"", VCS:""git"", RepoRoot:""https://go.googlesource.com/tools""} at https://golang.org/x/tools/cmd/gorename?go-get=1
get ""golang.org/x/tools/cmd/gorename"": verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
# cd C:\Users\user\go\src\golang.org\x\tools; git pull --ff-only
fatal: Not a git repository (or any of the parent directories): .git
package golang.org/x/tools/cmd/gorename: exit status 128

goreturns:
Error: Command failed: C:\Go\bin\go.exe get -u -v sourcegraph.com/sqs/goreturns
Fetching https://sourcegraph.com/sqs/goreturns?go-get=1
Parsing meta tags from https://sourcegraph.com/sqs/goreturns?go-get=1 (status code 200)
get ""sourcegraph.com/sqs/goreturns"": found meta tag main.metaImport{Prefix:""sourcegraph.com/sqs/goreturns"", VCS:""git"", RepoRoot:""https://github.com/sqs/goreturns""} at https://sourcegraph.com/sqs/goreturns?go-get=1
sourcegraph.com/sqs/goreturns (download)
github.com/sqs/goreturns (download)
Fetching https://golang.org/x/tools/imports?go-get=1
Parsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)
get ""golang.org/x/tools/imports"": found meta tag main.metaImport{Prefix:""golang.org/x/tools"", VCS:""git"", RepoRoot:""https://go.googlesource.com/tools""} at https://golang.org/x/tools/imports?go-get=1
get ""golang.org/x/tools/imports"": verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
# cd C:\Users\user\go\src\golang.org\x\tools; git pull --ff-only
fatal: Not a git repository (or any of the parent directories): .git
package golang.org/x/tools/imports: exit status 128
Fetching https://sourcegraph.com/sqs/goreturns?go-get=1
Parsing meta tags from https://sourcegraph.com/sqs/goreturns?go-get=1 (status code 200)
get ""sourcegraph.com/sqs/goreturns"": found meta tag main.metaImport{Prefix:""sourcegraph.com/sqs/goreturns"", VCS:""git"", RepoRoot:""https://github.com/sqs/goreturns""} at https://sourcegraph.com/sqs/goreturns?go-get=1
sourcegraph.com/sqs/goreturns (download)
github.com/sqs/goreturns (download)
Fetching https://golang.org/x/tools/imports?go-get=1
Parsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)
get ""golang.org/x/tools/imports"": found meta tag main.metaImport{Prefix:""golang.org/x/tools"", VCS:""git"", RepoRoot:""https://go.googlesource.com/tools""} at https://golang.org/x/tools/imports?go-get=1
get ""golang.org/x/tools/imports"": verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
# cd C:\Users\user\go\src\golang.org\x\tools; git pull --ff-only
fatal: Not a git repository (or any of the parent directories): .git
package golang.org/x/tools/imports: exit status 128

golint:
Error: Command failed: C:\Go\bin\go.exe get -u -v github.com/golang/lint/golint
github.com/golang/lint (download)
Fetching https://golang.org/x/tools/go/gcexportdata?go-get=1
Parsing meta tags from https://golang.org/x/tools/go/gcexportdata?go-get=1 (status code 200)
get ""golang.org/x/tools/go/gcexportdata"": found meta tag main.metaImport{Prefix:""golang.org/x/tools"", VCS:""git"", RepoRoot:""https://go.googlesource.com/tools""} at https://golang.org/x/tools/go/gcexportdata?go-get=1
get ""golang.org/x/tools/go/gcexportdata"": verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
# cd C:\Users\user\go\src\golang.org\x\tools; git pull --ff-only
fatal: Not a git repository (or any of the parent directories): .git
package golang.org/x/tools/go/gcexportdata: exit status 128
github.com/golang/lint (download)
Fetching https://golang.org/x/tools/go/gcexportdata?go-get=1
Parsing meta tags from https://golang.org/x/tools/go/gcexportdata?go-get=1 (status code 200)
get ""golang.org/x/tools/go/gcexportdata"": found meta tag main.metaImport{Prefix:""golang.org/x/tools"", VCS:""git"", RepoRoot:""https://go.googlesource.com/tools""} at https://golang.org/x/tools/go/gcexportdata?go-get=1
get ""golang.org/x/tools/go/gcexportdata"": verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
# cd C:\Users\user\go\src\golang.org\x\tools; git pull --ff-only
fatal: Not a git repository (or any of the parent directories): .git
package golang.org/x/tools/go/gcexportdata: exit status 128

gotests:
Error: Command failed: C:\Go\bin\go.exe get -u -v github.com/cweill/gotests/...
github.com/cweill/gotests (download)
Fetching https://golang.org/x/tools/imports?go-get=1
Parsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)
get ""golang.org/x/tools/imports"": found meta tag main.metaImport{Prefix:""golang.org/x/tools"", VCS:""git"", RepoRoot:""https://go.googlesource.com/tools""} at https://golang.org/x/tools/imports?go-get=1
get ""golang.org/x/tools/imports"": verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
# cd C:\Users\user\go\src\golang.org\x\tools; git pull --ff-only
fatal: Not a git repository (or any of the parent directories): .git
package golang.org/x/tools/imports: exit status 128
github.com/cweill/gotests (download)
Fetching https://golang.org/x/tools/imports?go-get=1
Parsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)
get ""golang.org/x/tools/imports"": found meta tag main.metaImport{Prefix:""golang.org/x/tools"", VCS:""git"", RepoRoot:""https://go.googlesource.com/tools""} at https://golang.org/x/tools/imports?go-get=1
get ""golang.org/x/tools/imports"": verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
# cd C:\Users\user\go\src\golang.org\x\tools; git pull --ff-only
fatal: Not a git repository (or any of the parent directories): .git
package golang.org/x/tools/imports: exit status 128
",11227
1452,43018667,Not a git repository,20
1453,43018667,%USERPROFILE%\go,16
1454,43018667,GOPATH,6
1455,43184477,"$ go get -d github.com/cockroachdb/cockroach
$ cd $GOPATH/src/github.com/cockroachdb/cockroach
$ git checkout beta-20170330
$ make install
",139
1456,43184477,/src/github.com/cockroachdb/cockroach,37
1457,43184477,git checkout v0.1-alpha,23
1458,43184477,"warning: unable to rmdir vendor: Directory not empty
Previous HEAD position was f0f5783... Merge pull request #14448 from BramGruneir/vendorsnappy
HEAD is now at 26088f8... Merge pull request #3475 from mrtracy/mtracy/code_review_feedback
",239
1459,43184477,make install,12
1460,43184477,"github.com/agtorre/gocolorize                      99fea4bc9517 [checkout f42b554bf7f0]
github.com/biogo/store                             913427a1d5e8 [checkout 3b4c041f52c2]
github.com/cockroachdb/c-lz4                       834d3303c9e8 [checkout c40aaae2fc50]
github.com/cockroachdb/c-protobuf                  323984796a7b [checkout 6a18bfcdd516]
github.com/cockroachdb/c-rocksdb                   0dd42399d1f0 [checkout bf15ead80bdc]
github.com/cockroachdb/c-snappy                    c0cd3c9ce92f [checkout 5c6d0932e0ad]
github.com/cockroachdb/yacc                        7c99dfd2164a [get checkout 443154b1852a]
github.com/coreos/etcd                             38a914973544 [checkout 0eb46eb1457b]
github.com/cpuguy83/go-md2man                      a65d4d2de4d5 [get checkout 71acacd42f85]
github.com/docker/docker                           6311e9fc9d34 [get checkout 5e0283effa73]
github.com/elazarl/go-bindata-assetfs              30f82fa23fd8 [checkout d5cac425555c]
github.com/go-sql-driver/mysql                     9dee4ca50b83 [get checkout d512f204a577]
github.com/gogo/protobuf                           c0656edd0d9e [checkout 8658879224bd]
github.com/golang/lint                             cb00e5669539 [get checkout 32a87160691b]
github.com/google/btree                            316fb6d3f031 [checkout cc6329d4279e]
github.com/gordonklaus/ineffassign                 f0c5cfc1817d [get checkout 507e48671a07]
github.com/inconshreveable/mousetrap               76626ae9c91c [get OK]
github.com/jteeuwen/go-bindata                     a0ff2567cfb7 [get OK]
github.com/julienschmidt/httprouter                6f3f3919c878 [checkout f30ab90cccbd]
github.com/kisielk/errcheck                        23699b7e2cbf [get checkout 12fd1ab9811e]
github.com/kisielk/gotool                          0de1eaf82fa3 [get checkout 58a7a198f2ec]
github.com/kr/pretty                               cfb55aafdaf3 [get checkout e6ac2fc51e89]
github.com/kr/text                                 7cafcd837844 [get checkout bb797dc4fb83]
github.com/lib/pq                                  2704adc878c2 [checkout 11fc39a580a0]
github.com/mattn/go-runewidth                      14207d285c6c [checkout d96d1bd051f2]
github.com/mibk/dupl                               3447d9b0cb5a [get checkout 47b66d6a523f]
github.com/montanaflynn/stats                      f8cd06f93c6c [checkout 4dd27fe9ac79]
github.com/olekukonko/tablewriter                  febf2d34b54a [checkout 333c0610de34]
github.com/opennota/check                          11e2eec79ec4 [get checkout 591428223a6a]
github.com/peterh/liner                            88609521dc4b [checkout 4d47685ab2fd]
github.com/rcrowley/go-metrics                     1f30fe9094a5 [checkout 7839c01b09d2]
github.com/robfig/glock                            39b969c32281 [checkout cb3c3ec56de9]
github.com/russross/blackfriday                    5f33e7b78783 [get checkout d18b67ae0afd]
github.com/samalba/dockerclient                    a30362618471 [get checkout 4656b1bc6cbc]
github.com/shurcooL/sanitized_anchor_name          1dba4b3954bc [get checkout 10ef21a441db]
github.com/spf13/cobra                             7aeaa2cce6ae [checkout ee6224d01f6a]
github.com/spf13/pflag                             d16db1e50e33 [checkout 08b1a584251b]
github.com/tebeka/go2xunit                         13c29c7515e6 [get checkout 0519fcc9b45b]
github.com/termie/go-shutil                        bcacb06fecae [get OK]
golang.org/x/crypto                                88915ccf7aeb [checkout 7b85b097bf75]
golang.org/x/net                                   ffcf1bedda3b [checkout 21af302bb527]
golang.org/x/text                                  f4b4367115ec [checkout 00e205363f74]
golang.org/x/tools                                 620ecdb8d794 [checkout 1cdaff4a02c5]
gopkg.in/yaml.v1                                   9f9df34309c0 [OK]
cmd github.com/cockroachdb/c-protobuf/cmd/protoc                [built]
cmd github.com/cockroachdb/cockroach/protoc-gen-gogoroach       [error exit status 2]
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/protoc-gen-gogo/descriptor
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/gogoproto
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/protoc-gen-gogo/plugin
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/vanity
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/protoc-gen-gogo/generator
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/testgen
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/defaultcheck
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/embedcheck
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/enumstringer
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/marshalto
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/oneofcheck
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/populate
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/unmarshal
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/compare
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/description
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/equal
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/face
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/gostring
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/size
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/stringer
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/plugin/union
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/protoc-gen-gogo/grpc
github.com/cockroachdb/cockroach/vendor/github.com/gogo/protobuf/vanity/command
github.com/cockroachdb/cockroach/protoc-gen-gogoroach
# github.com/cockroachdb/cockroach/protoc-gen-gogoroach
protoc-gen-gogoroach/main.go:12: undefined: vanity.NotInPackageGoogleProtobuf
go install -tags ''  -ldflags '-X ""github.com/cockroachdb/cockroach/util.buildTag=alpha-6447-g26088f8"" -X ""github.com/cockroachdb/cockroach/util.buildTime=2017/04/03 11:46:56"" -X ""github.com/cockroachdb/cockroach/util.buildDeps=github.com/cockroachdb/c-lz4:c40aaae2fc50293eb8750b34632bc3efe813e23f github.com/cockroachdb/cockroach:26088f81e5ecfb2fd63f8f15f524102c9a0c1c05 github.com/cockroachdb/cockroach/vendor:17711805119083543d94edac10e423260a597426 github.com/julienschmidt/httprouter:f30ab90cccbd5171771d26b6557d3c2f49e047a6 github.com/peterh/liner:4d47685ab2fd2dbb46c66b831344d558bc4be5b9 gopkg.in/yaml.v1:9f9df34309c04878acc86042b16630b0f696e1de""'
# github.com/cockroachdb/cockroach/cli
cli/sql_util.go:148: table.Append(row) used as value
Makefile:71: recipe for target 'install' failed
make: *** [install] Error 2
",6922
1461,43184477,.go-version,11
1462,43184477,.bootstrap,10
1463,43184477,fatal: Not a git repository (or any of the parent directories): .git,68
1464,43184477,go get,6
1465,43184477,make install,12
1466,43218484,"package main


//ConfigurationParameters provides the struct to hold configuration parameters from config file
type ConfigurationParameters struct {
    Title string
    //serviceDiscovery captures configuration parameters needed for service discovery registration with Consul
    ServiceDiscovery ConsulConf `toml:""ServiceDiscovery""`
    //metadataReporting captures which metadata to be registered with service into consul for use during discovery
    MetadataReporting MetaDataConf `toml:""MetadataReporting""`
    //awsTagsToLabels captures the aws tags that should be added to reported metrics as Labels
    AwsTagsToLabels LabelConf `toml:""AwsTagsToLabels""`
    //collectors captures the list of collectors to use
    Collectors CollectorConf `toml:""Collectors""`
    //service captures agent related configurations
    Service ServiceConf `toml:""Service""`
}

//ConsulConf captures configuration parameters needed for service discovery registration with Consul
type ConsulConf struct {
    enabled    bool
    endpoint   string
    port       int
    datacenter string
    serviceID  string
}
//MetaDataConf captures which metadata to be registered with service into consul for use during discovery
    type MetaDataConf struct {
        enabled   bool
        awsregion string
    }
//LabelConf captures the aws tags that should be added to reported metrics as Labels
type LabelConf struct {
    enabled       bool
    refreshPeriod int
}

//CollectorConf captures the list of collectors to use
type CollectorConf struct {
    goCollectionEnabled       bool
    exporterCollectionEnabled bool
    wmiCollectionEnabled      bool
    agentCollectionEnabled    bool
    enabledCollectors         string
    metricMap                 []MetricMap
}

//MetricMap captures a mapping between one or more WMI metrics and the name it should be reported with
type MetricMap struct {
    wmiMetricName  []string
    exportName     string
    dropMetric     bool
    computedMetric bool
    computeLogic   string
}

//ServiceConf captures agent related configurations
type ServiceConf struct {
    listenIP           string
    listenPort         int
    metricPath         string
    collectionInterval int
    serviceName        string
}
",2231
1467,43218484,"Title = ""WMI Exporter Configuration""

[ServiceDiscovery]
    enabled = true
    endpoint = ""my.consul.server""
    port = 5500
    datacenter = ""ucm-west""
    serviceID = ""ucm.agent.wmiExporter""

[MetadataReporting]
    enabled = true
    awsregion = ""us-west-2""

[AwsTagsToLabels]
    enabled = true
    refreshPeriod = 3600

[Collectors]
    goCollectionEnabled = true
    exporterCollectionEnabled = true
    wmiCollectionEnabled = true
    agentCollectionEnabled = false
    enabledCollectors   = ""cpu,os""
    [Collectors.MetricMap.0]
        wmiMetricName = [""test""]
        exportName = ""export_test""

[Service]
    listenPort =  9103
    metricPath = ""/metrics""
    collectionInterval = 60
    serviceName = ""wmi_exporter""
",729
1468,43218484,"// InitializeFromConfig reads configuration parameters from configuration file and initializes this service
func InitializeFromConfig(configfile string) ConfigurationParameters {
    conf := ConfigurationParameters{}

    if configfile == """" {
        return conf
    }

    _, err := toml.DecodeFile(configfile, &conf)
    if err != nil {
        log.Fatalf(""Cannot parse configuration file at %s. Error=%s"", configfile, err)
    }
    //at this point, conf is a fully loaded configuration now; now initialize everything from conf
    return conf
}
",550
1469,43218484,"Title                                             String
ServiceDiscovery                                  Hash
    ServiceDiscovery.enabled                      Bool
    ServiceDiscovery.endpoint                     String
    ServiceDiscovery.port                         Integer
    ServiceDiscovery.datacenter                   String
    ServiceDiscovery.serviceID                    String
MetadataReporting                                 Hash
    MetadataReporting.enabled                     Bool
    MetadataReporting.awsregion                   String
AwsTagsToLabels                                   Hash
    AwsTagsToLabels.enabled                       Bool
    AwsTagsToLabels.refreshPeriod                 Integer
Collectors                                        Hash
    Collectors.goCollectionEnabled                Bool
    Collectors.exporterCollectionEnabled          Bool
    Collectors.wmiCollectionEnabled               Bool
    Collectors.agentCollectionEnabled             Bool
    Collectors.enabledCollectors                  String
        Collectors.MetricMap.0                    Hash
            Collectors.MetricMap.0.wmiMetricName  Array
            Collectors.MetricMap.0.exportName     String
Service                                           Hash
    Service.listenPort                            Integer
    Service.metricPath                            String
    Service.collectionInterval                    Integer
    Service.serviceName                           String
",1516
1470,43293493,go build,8
1471,43293493,goapp serve,11
1472,43293493,"fatal error: unexpected signal during runtime execution
[signal 0xb code=0x1 addr=0xb01dfacedebac1e pc=0xf47b]
",111
1473,43293493,goapp serve,11
1474,43293493,goapp serve,11
1475,43293493,"ERROR   go_runtime.py:181] Failed to build Go application: (Executed command: /usr/local/go_appengine/goroot/bin/go-app-builder -app_base /Users/kieran/Go/src/hello/main -arch 6 -dynamic -goroot /usr/local/go_appengine/goroot -nobuild_files ^^$ -unsafe -gopath /Users/kieran/Go -binary_name _go_app -extra_imports appengine_internal/init -work_dir /var/folders/w3/wrcy8wfn3gzbnphs0cq6yw9r0000gn/T/tmpf_Nrsvappengine-go-bin -gcflags -I,/usr/local/go_appengine/goroot/pkg/darwin_amd64_appengine -ldflags -L,/usr/local/go_appengine/goroot/pkg/darwin_amd64_appengine main.go)

fatal error: unexpected signal during runtime execution
[signal 0xb code=0x1 addr=0xb01dfacedebac1e pc=0xf47b]

runtime stack:
runtime.throw(0x2c4ac0, 0x2a)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/panic.go:547 +0x90
runtime.sigpanic()
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/sigpanic_unix.go:12 +0x5a
runtime.unlock(0x3aa0c0)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/lock_sema.go:107 +0x14b
runtime.(*mheap).alloc_m(0x3aa0c0, 0x1, 0x20000000020, 0x8a5178)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/mheap.go:492 +0x314
runtime.(*mheap).alloc.func1()
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/mheap.go:502 +0x41
runtime.systemstack(0xc820039e58)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/asm_amd64.s:307 +0xab
runtime.(*mheap).alloc(0x3aa0c0, 0x1, 0x10000000020, 0xf11f)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/mheap.go:503 +0x63
runtime.(*mcentral).grow(0x3ac190, 0x0)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/mcentral.go:209 +0x93
runtime.(*mcentral).cacheSpan(0x3ac190, 0x8a5178)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/mcentral.go:89 +0x47d
runtime.(*mcache).refill(0x406c20, 0x20, 0x8a5178)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/mcache.go:119 +0xcc
runtime.mallocgc.func2()
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/malloc.go:642 +0x2b
runtime.systemstack(0xc820012000)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/asm_amd64.s:291 +0x79
runtime.mstart()
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/proc.go:1051

goroutine 1 [running]:
runtime.systemstack_switch()
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/asm_amd64.s:245 fp=0xc8200329d0 sp=0xc8200329c8
runtime.mallocgc(0x480, 0x25c640, 0xc800000000, 0xc820074240)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/malloc.go:643 +0x869 fp=0xc820032aa8 sp=0xc8200329d0
runtime.newarray(0x25c640, 0x18, 0x152be8)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/malloc.go:798 +0xc9 fp=0xc820032ae8 sp=0xc820032aa8
runtime.makeslice(0x1e6920, 0x18, 0x18, 0x0, 0x0, 0x0)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/slice.go:32 +0x165 fp=0xc820032b38 sp=0xc820032ae8
cmd/link/internal/ld.readsym(0xc820074240, 0xc825a9e1a0, 0xc821107850, 0x8, 0xc821ecb360, 0x4c)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/cmd/link/internal/ld/objfile.go:239 +0xba6 fp=0xc820032f80 sp=0xc820032b38
cmd/link/internal/ld.ldobjfile(0xc820074240, 0xc825a9e1a0, 0xc821107850, 0x8, 0xbf902, 0xc821ecb360, 0x4c)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/cmd/link/internal/ld/objfile.go:147 +0xa62 fp=0xc820033190 sp=0xc820032f80
cmd/link/internal/ld.ldobj(0xc825a9e1a0, 0xc821107850, 0x8, 0xbf93e, 0xc821ecb360, 0x4c, 0xc82326a050, 0x44, 0x1, 0x0)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/cmd/link/internal/ld/lib.go:1351 +0x1569 fp=0xc820033400 sp=0xc820033190
cmd/link/internal/ld.objfile(0xc82409ce70)
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/cmd/link/internal/ld/lib.go:847 +0x10d9 fp=0xc820033710 sp=0xc820033400
cmd/link/internal/ld.loadlib()
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/cmd/link/internal/ld/lib.go:513 +0x5ce fp=0xc8200339f0 sp=0xc820033710
cmd/link/internal/ld.Ldmain()
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/cmd/link/internal/ld/pobj.go:214 +0x1cd3 fp=0xc820033e70 sp=0xc8200339f0
cmd/link/internal/amd64.Main()
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/cmd/link/internal/amd64/obj.go:44 +0x19 fp=0xc820033e78 sp=0xc820033e70
main.main()
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/cmd/link/main.go:27 +0x36f fp=0xc820033f50 sp=0xc820033e78
runtime.main()
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/proc.go:188 +0x2b0 fp=0xc820033fa0 sp=0xc820033f50
runtime.goexit()
    /private/var/folders/9y/ppk2fnqj5lscwqw_l6lhdrx8005bt1/T/appengine/go_appengine/goroot/src/runtime/asm_amd64.s:1998 +0x1 fp=0xc820033fa8 sp=0xc820033fa0
",5760
1476,43327252,"web: todo
",10
1477,43327252,"2017-04-10T15:24:07.128780+00:00 app[web.1]: panic: could not locate box ""./static""
",84
1478,43327252,"package main

import (
    ""net/http""
    ""github.com/kitensei/go-todoist/server""
    ""github.com/GeertJohan/go.rice""
    ""os""
    ""log""
    ""fmt""
    ""path""
    ""strconv""
)

var boxPrefix = getenv(""BOXPATH"", """")

func main() {
    dir, err := os.Getwd()
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(""DIRECTORY CWD: "" + dir)
    ex, err := os.Executable()
    if err != nil {
        panic(err)
    }
    exPath := path.Dir(ex)
    fmt.Println(""EXECUTABLE PATH: "" + exPath)
    exists, err := exists(boxPrefix + ""static"")
    if err != nil {
        panic(err)
    }
    fmt.Println(""CHECK IF ("" +boxPrefix + ""static) EXISTS: "" + strconv.FormatBool(exists))
    server.RegisterHandlers()
    http.Handle(""/"", http.FileServer(rice.MustFindBox(boxPrefix + ""static"").HTTPBox()))
    http.ListenAndServe("":8080"", nil)
}

func getenv(key, fallback string) string {
    value := os.Getenv(key)
    if len(value) == 0 {
        return fallback
    }
    return value
}

func exists(path string) (bool, error) {
    _, err := os.Stat(path)
    if err == nil {
        return true, nil
    }
    if os.IsNotExist(err) {
        return false, nil
    }
    return true, err
}
",1186
1479,43327252,"2017-04-10T17:23:57.000000+00:00 app[api]: Build succeeded
2017-04-10T17:24:06.341977+00:00 heroku[web.1]: Starting process with command `go-todoist`
2017-04-10T17:24:08.592486+00:00 app[web.1]: DIRECTORY CWD: /app
2017-04-10T17:24:08.595689+00:00 app[web.1]: panic: could not locate box ""static""
2017-04-10T17:24:08.595691+00:00 app[web.1]:
2017-04-10T17:24:08.595692+00:00 app[web.1]: goroutine 1 [running]:
2017-04-10T17:24:08.595718+00:00 app[web.1]: github.com/kitensei/go-todoist/vendor/github.com/GeertJohan/go%2erice.MustFindBox(0x71e08d, 0x6, 0x0)
2017-04-10T17:24:08.595721+00:00 app[web.1]:    /tmp/tmp.Pa1igbANNl/.go/src/github.com/kitensei/go-todoist/vendor/github.com/GeertJohan/go.rice/box.go:110 +0x94
2017-04-10T17:24:08.595724+00:00 app[web.1]: main.main()
2017-04-10T17:24:08.595741+00:00 app[web.1]:    /tmp/tmp.Pa1igbANNl/.go/src/github.com/kitensei/go-todoist/main.go:21 +0x1a8
2017-04-10T17:24:08.660495+00:00 heroku[web.1]: Process exited with status 2
2017-04-10T17:24:08.685016+00:00 heroku[web.1]: State changed from starting to crashed
2017-04-10T17:24:08.686277+00:00 heroku[web.1]: State changed from crashed to starting
2017-04-10T17:24:09.023202+00:00 heroku[web.1]: Starting process with command `go-todoist`
2017-04-10T17:24:10.743837+00:00 app[web.1]: DIRECTORY CWD: /app
2017-04-10T17:24:10.746355+00:00 app[web.1]: panic: could not locate box ""static""
2017-04-10T17:24:10.746357+00:00 app[web.1]:
2017-04-10T17:24:10.746360+00:00 app[web.1]: goroutine 1 [running]:
2017-04-10T17:24:10.746361+00:00 app[web.1]: github.com/kitensei/go-todoist/vendor/github.com/GeertJohan/go%2erice.MustFindBox(0x71e08d, 0x6, 0x0)
2017-04-10T17:24:10.746361+00:00 app[web.1]:    /tmp/tmp.Pa1igbANNl/.go/src/github.com/kitensei/go-todoist/vendor/github.com/GeertJohan/go.rice/box.go:110 +0x94
2017-04-10T17:24:10.746363+00:00 app[web.1]: main.main()
2017-04-10T17:24:10.746367+00:00 app[web.1]:    /tmp/tmp.Pa1igbANNl/.go/src/github.com/kitensei/go-todoist/main.go:21 +0x1a8
2017-04-10T17:24:10.791994+00:00 heroku[web.1]: Process exited with status 2
2017-04-10T17:24:10.817345+00:00 heroku[web.1]: State changed from starting to crashed
vagrant@precise64:/code/src/github.com/kitensei/go-todoist$ heroku run bash -a go-todoist-gpr
/usr/local/heroku/lib/heroku/jsplugin.rb:119: warning: Insecure world writable dir /code/bin in PATH, mode 040777
Running bash on ⬢ go-todoist-gpr... up, run.9334 (Free)
~ $ cd /app
~ $ pwd
/app
~ $ ls -lA
total 48
-rw------- 1 u52460 dyno  289 Apr 10 17:23 .gitignore
drwx------ 3 u52460 dyno 4096 Apr 10 17:24 .heroku
drwx------ 2 u52460 dyno 4096 Apr 10 17:24 .profile.d
-rw------- 1 u52460 dyno   15 Apr 10 17:24 Procfile
-rw------- 1 u52460 dyno   26 Apr 10 17:23 README.md
-rw------- 1 u52460 dyno  326 Apr 10 17:23 app.json
drwx------ 2 u52460 dyno 4096 Apr 10 17:24 bin
-rw------- 1 u52460 dyno  592 Apr 10 17:23 main.go
drwx------ 2 u52460 dyno 4096 Apr 10 17:23 server
drwx------ 3 u52460 dyno 4096 Apr 10 17:23 static
drwx------ 2 u52460 dyno 4096 Apr 10 17:23 task
drwx------ 3 u52460 dyno 4096 Apr 10 17:23 vendor
~ $
",3083
1480,43327252,"~ $ go-todoist
DIRECTORY CWD: /app
EXECUTABLE PATH: /app/bin
CHECK IF (static) EXISTS: true
panic: could not locate box ""static""

goroutine 1 [running]:
github.com/kitensei/go-todoist/vendor/github.com/GeertJohan/go%2erice.MustFindBox(0xc4200f0cf0, 0xb, 0x5)
        /tmp/tmp.FmcU3dgw8Y/.go/src/github.com/kitensei/go-todoist/vendor/github.com/GeertJohan/go.rice/box.go:110 +0x94
main.main()
        /tmp/tmp.FmcU3dgw8Y/.go/src/github.com/kitensei/go-todoist/main.go:34 +0x42c
",477
1481,43327252,"~ $ go-todoist
DIRECTORY CWD: /app
EXECUTABLE PATH: /app/bin
CHECK IF (/app/static) EXISTS: true
panic: given name/path is absolute

goroutine 1 [running]:
github.com/kitensei/go-todoist/vendor/github.com/GeertJohan/go%2erice.MustFindBox(0xc4200f0cf0, 0xb, 0x5)
        /tmp/tmp.FmcU3dgw8Y/.go/src/github.com/kitensei/go-todoist/vendor/github.com/GeertJohan/go.rice/box.go:110 +0x94
main.main()
        /tmp/tmp.FmcU3dgw8Y/.go/src/github.com/kitensei/go-todoist/main.go:34 +0x42c
",480
1482,43345705,main function,13
1483,43345705,init,4
1484,43345705,main func,9
1485,43345705,init,4
1486,43345705,main func,9
1487,43345705,init,4
1488,43345705,init,4
1489,43345705,init,4
1490,43345705,main func,9
1491,43345705,var = [...] or cost = [...],27
1492,43345705,mime,4
1493,43345705,mime,4
1494,43345705,init,4
1495,43345705,"package mime

import (
    ""mime""
    ""path/filepath""
)

var types = map[string]string{
    "".3dm"":       ""x-world/x-3dmf"",
    "".3dmf"":      ""x-world/x-3dmf"",
    "".7z"":        ""application/x-7z-compressed"",
    "".a"":         ""application/octet-stream"",
    "".aab"":       ""application/x-authorware-bin"",
    "".aam"":       ""application/x-authorware-map"",
    "".aas"":       ""application/x-authorware-seg"",
    "".abc"":       ""text/vndabc"",
    "".ace"":       ""application/x-ace-compressed"",
    "".acgi"":      ""text/html"",
    "".afl"":       ""video/animaflex"",
    "".ai"":        ""application/postscript"",
    "".aif"":       ""audio/aiff"",
    "".aifc"":      ""audio/aiff"",
    "".aiff"":      ""audio/aiff"",
    "".aim"":       ""application/x-aim"",
    "".aip"":       ""text/x-audiosoft-intra"",
    "".alz"":       ""application/x-alz-compressed"",
    "".ani"":       ""application/x-navi-animation"",
    "".aos"":       ""application/x-nokia-9000-communicator-add-on-software"",
    "".aps"":       ""application/mime"",
    "".apk"":       ""application/vnd.android.package-archive"",
    "".arc"":       ""application/x-arc-compressed"",
    "".arj"":       ""application/arj"",
    "".art"":       ""image/x-jg"",
    "".asf"":       ""video/x-ms-asf"",
    "".asm"":       ""text/x-asm"",
    "".asp"":       ""text/asp"",
    "".asx"":       ""application/x-mplayer2"",
    "".au"":        ""audio/basic"",
    "".avi"":       ""video/x-msvideo"",
    "".avs"":       ""video/avs-video"",
    "".bcpio"":     ""application/x-bcpio"",
    "".bin"":       ""application/mac-binary"",
    "".bmp"":       ""image/bmp"",
    "".boo"":       ""application/book"",
    "".book"":      ""application/book"",
    "".boz"":       ""application/x-bzip2"",
    "".bsh"":       ""application/x-bsh"",
    "".bz2"":       ""application/x-bzip2"",
    "".bz"":        ""application/x-bzip"",
    "".c++"":       ""text/plain"",
    "".c"":         ""text/x-c"",
    "".cab"":       ""application/vnd.ms-cab-compressed"",
    "".cat"":       ""application/vndms-pkiseccat"",
    "".cc"":        ""text/x-c"",
    "".ccad"":      ""application/clariscad"",
    "".cco"":       ""application/x-cocoa"",
    "".cdf"":       ""application/cdf"",
    "".cer"":       ""application/pkix-cert"",
    "".cha"":       ""application/x-chat"",
    "".chat"":      ""application/x-chat"",
    "".chrt"":      ""application/vnd.kde.kchart"",
    "".class"":     ""application/java"",
    "".com"":       ""text/plain"",
    "".conf"":      ""text/plain"",
    "".cpio"":      ""application/x-cpio"",
    "".cpp"":       ""text/x-c"",
    "".cpt"":       ""application/mac-compactpro"",
    "".crl"":       ""application/pkcs-crl"",
    "".crt"":       ""application/pkix-cert"",
    "".crx"":       ""application/x-chrome-extension"",
    "".csh"":       ""text/x-scriptcsh"",
    "".css"":       ""text/css"",
    "".csv"":       ""text/csv"",
    "".cxx"":       ""text/plain"",
    "".dar"":       ""application/x-dar"",
    "".dcr"":       ""application/x-director"",
    "".deb"":       ""application/x-debian-package"",
    "".deepv"":     ""application/x-deepv"",
    "".def"":       ""text/plain"",
    "".der"":       ""application/x-x509-ca-cert"",
    "".dif"":       ""video/x-dv"",
    "".dir"":       ""application/x-director"",
    "".divx"":      ""video/divx"",
    "".dl"":        ""video/dl"",
    "".dmg"":       ""application/x-apple-diskimage"",
    "".doc"":       ""application/msword"",
    "".dot"":       ""application/msword"",
    "".dp"":        ""application/commonground"",
    "".drw"":       ""application/drafting"",
    "".dump"":      ""application/octet-stream"",
    "".dv"":        ""video/x-dv"",
    "".dvi"":       ""application/x-dvi"",
    "".dwf"":       ""drawing/x-dwf=(old)"",
    "".dwg"":       ""application/acad"",
    "".dxf"":       ""application/dxf"",
    "".dxr"":       ""application/x-director"",
    "".el"":        ""text/x-scriptelisp"",
    "".elc"":       ""application/x-bytecodeelisp=(compiled=elisp)"",
    "".eml"":       ""message/rfc822"",
    "".env"":       ""application/x-envoy"",
    "".eps"":       ""application/postscript"",
    "".es"":        ""application/x-esrehber"",
    "".etx"":       ""text/x-setext"",
    "".evy"":       ""application/envoy"",
    "".exe"":       ""application/octet-stream"",
    "".f77"":       ""text/x-fortran"",
    "".f90"":       ""text/x-fortran"",
    "".f"":         ""text/x-fortran"",
    "".fdf"":       ""application/vndfdf"",
    "".fif"":       ""application/fractals"",
    "".fli"":       ""video/fli"",
    "".flo"":       ""image/florian"",
    "".flv"":       ""video/x-flv"",
    "".flx"":       ""text/vndfmiflexstor"",
    "".fmf"":       ""video/x-atomic3d-feature"",
    "".for"":       ""text/x-fortran"",
    "".fpx"":       ""image/vndfpx"",
    "".frl"":       ""application/freeloader"",
    "".funk"":      ""audio/make"",
    "".g3"":        ""image/g3fax"",
    "".g"":         ""text/plain"",
    "".gif"":       ""image/gif"",
    "".gl"":        ""video/gl"",
    "".gsd"":       ""audio/x-gsm"",
    "".gsm"":       ""audio/x-gsm"",
    "".gsp"":       ""application/x-gsp"",
    "".gss"":       ""application/x-gss"",
    "".gtar"":      ""application/x-gtar"",
    "".gz"":        ""application/x-compressed"",
    "".gzip"":      ""application/x-gzip"",
    "".h"":         ""text/x-h"",
    "".hdf"":       ""application/x-hdf"",
    "".help"":      ""application/x-helpfile"",
    "".hgl"":       ""application/vndhp-hpgl"",
    "".hh"":        ""text/x-h"",
    "".hlb"":       ""text/x-script"",
    "".hlp"":       ""application/hlp"",
    "".hpg"":       ""application/vndhp-hpgl"",
    "".hpgl"":      ""application/vndhp-hpgl"",
    "".hqx"":       ""application/binhex"",
    "".hta"":       ""application/hta"",
    "".htc"":       ""text/x-component"",
    "".htm"":       ""text/html"",
    "".html"":      ""text/html"",
    "".htmls"":     ""text/html"",
    "".htt"":       ""text/webviewhtml"",
    "".htx"":       ""text/html"",
    "".ice"":       ""x-conference/x-cooltalk"",
    "".ico"":       ""image/x-icon"",
    "".ics"":       ""text/calendar"",
    "".icz"":       ""text/calendar"",
    "".idc"":       ""text/plain"",
    "".ief"":       ""image/ief"",
    "".iefs"":      ""image/ief"",
    "".iges"":      ""application/iges"",
    "".igs"":       ""application/iges"",
    "".ima"":       ""application/x-ima"",
    "".imap"":      ""application/x-httpd-imap"",
    "".inf"":       ""application/inf"",
    "".ins"":       ""application/x-internett-signup"",
    "".ip"":        ""application/x-ip2"",
    "".isu"":       ""video/x-isvideo"",
    "".it"":        ""audio/it"",
    "".iv"":        ""application/x-inventor"",
    "".ivr"":       ""i-world/i-vrml"",
    "".ivy"":       ""application/x-livescreen"",
    "".jam"":       ""audio/x-jam"",
    "".jav"":       ""text/x-java-source"",
    "".java"":      ""text/x-java-source"",
    "".jcm"":       ""application/x-java-commerce"",
    "".jfif-tbnl"": ""image/jpeg"",
    "".jfif"":      ""image/jpeg"",
    "".jnlp"":      ""application/x-java-jnlp-file"",
    "".jpe"":       ""image/jpeg"",
    "".jpeg"":      ""image/jpeg"",
    "".jpg"":       ""image/jpeg"",
    "".jps"":       ""image/x-jps"",
    "".js"":        ""application/javascript"",
    "".json"":      ""application/json"",
    "".jut"":       ""image/jutvision"",
    "".kar"":       ""audio/midi"",
    "".karbon"":    ""application/vnd.kde.karbon"",
    "".kfo"":       ""application/vnd.kde.kformula"",
    "".flw"":       ""application/vnd.kde.kivio"",
    "".kml"":       ""application/vnd.google-earth.kml+xml"",
    "".kmz"":       ""application/vnd.google-earth.kmz"",
    "".kon"":       ""application/vnd.kde.kontour"",
    "".kpr"":       ""application/vnd.kde.kpresenter"",
    "".kpt"":       ""application/vnd.kde.kpresenter"",
    "".ksp"":       ""application/vnd.kde.kspread"",
    "".kwd"":       ""application/vnd.kde.kword"",
    "".kwt"":       ""application/vnd.kde.kword"",
    "".ksh"":       ""text/x-scriptksh"",
    "".la"":        ""audio/nspaudio"",
    "".lam"":       ""audio/x-liveaudio"",
    "".latex"":     ""application/x-latex"",
    "".lha"":       ""application/lha"",
    "".lhx"":       ""application/octet-stream"",
    "".list"":      ""text/plain"",
    "".lma"":       ""audio/nspaudio"",
    "".log"":       ""text/plain"",
    "".lsp"":       ""text/x-scriptlisp"",
    "".lst"":       ""text/plain"",
    "".lsx"":       ""text/x-la-asf"",
    "".ltx"":       ""application/x-latex"",
    "".lzh"":       ""application/octet-stream"",
    "".lzx"":       ""application/lzx"",
    "".m1v"":       ""video/mpeg"",
    "".m2a"":       ""audio/mpeg"",
    "".m2v"":       ""video/mpeg"",
    "".m3u"":       ""audio/x-mpegurl"",
    "".m"":         ""text/x-m"",
    "".man"":       ""application/x-troff-man"",
    "".manifest"":  ""text/cache-manifest"",
    "".map"":       ""application/x-navimap"",
    "".mar"":       ""text/plain"",
    "".mbd"":       ""application/mbedlet"",
    "".mc$"":       ""application/x-magic-cap-package-10"",
    "".mcd"":       ""application/mcad"",
    "".mcf"":       ""text/mcf"",
    "".mcp"":       ""application/netmc"",
    "".me"":        ""application/x-troff-me"",
    "".mht"":       ""message/rfc822"",
    "".mhtml"":     ""message/rfc822"",
    "".mid"":       ""application/x-midi"",
    "".midi"":      ""application/x-midi"",
    "".mif"":       ""application/x-frame"",
    "".mime"":      ""message/rfc822"",
    "".mjf"":       ""audio/x-vndaudioexplosionmjuicemediafile"",
    "".mjpg"":      ""video/x-motion-jpeg"",
    "".mm"":        ""application/base64"",
    "".mme"":       ""application/base64"",
    "".mod"":       ""audio/mod"",
    "".moov"":      ""video/quicktime"",
    "".mov"":       ""video/quicktime"",
    "".movie"":     ""video/x-sgi-movie"",
    "".mp2"":       ""audio/mpeg"",
    "".mp3"":       ""audio/mpeg3"",
    "".mp4"":       ""video/mp4"",
    "".mpa"":       ""audio/mpeg"",
    "".mpc"":       ""application/x-project"",
    "".mpe"":       ""video/mpeg"",
    "".mpeg"":      ""video/mpeg"",
    "".mpg"":       ""video/mpeg"",
    "".mpga"":      ""audio/mpeg"",
    "".mpp"":       ""application/vndms-project"",
    "".mpt"":       ""application/x-project"",
    "".mpv"":       ""application/x-project"",
    "".mpx"":       ""application/x-project"",
    "".mrc"":       ""application/marc"",
    "".ms"":        ""application/x-troff-ms"",
    "".mv"":        ""video/x-sgi-movie"",
    "".my"":        ""audio/make"",
    "".mzz"":       ""application/x-vndaudioexplosionmzz"",
    "".nap"":       ""image/naplps"",
    "".naplps"":    ""image/naplps"",
    "".nc"":        ""application/x-netcdf"",
    "".ncm"":       ""application/vndnokiaconfiguration-message"",
    "".nif"":       ""image/x-niff"",
    "".niff"":      ""image/x-niff"",
    "".nix"":       ""application/x-mix-transfer"",
    "".nsc"":       ""application/x-conference"",
    "".nvd"":       ""application/x-navidoc"",
    "".o"":         ""application/octet-stream"",
    "".oda"":       ""application/oda"",
    "".odb"":       ""application/vnd.oasis.opendocument.database"",
    "".odc"":       ""application/vnd.oasis.opendocument.chart"",
    "".odf"":       ""application/vnd.oasis.opendocument.formula"",
    "".odg"":       ""application/vnd.oasis.opendocument.graphics"",
    "".odi"":       ""application/vnd.oasis.opendocument.image"",
    "".odm"":       ""application/vnd.oasis.opendocument.text-master"",
    "".odp"":       ""application/vnd.oasis.opendocument.presentation"",
    "".ods"":       ""application/vnd.oasis.opendocument.spreadsheet"",
    "".odt"":       ""application/vnd.oasis.opendocument.text"",
    "".oga"":       ""audio/ogg"",
    "".ogg"":       ""audio/ogg"",
    "".ogv"":       ""video/ogg"",
    "".omc"":       ""application/x-omc"",
    "".omcd"":      ""application/x-omcdatamaker"",
    "".omcr"":      ""application/x-omcregerator"",
    "".otc"":       ""application/vnd.oasis.opendocument.chart-template"",
    "".otf"":       ""application/vnd.oasis.opendocument.formula-template"",
    "".otg"":       ""application/vnd.oasis.opendocument.graphics-template"",
    "".oth"":       ""application/vnd.oasis.opendocument.text-web"",
    "".oti"":       ""application/vnd.oasis.opendocument.image-template"",
    "".otm"":       ""application/vnd.oasis.opendocument.text-master"",
    "".otp"":       ""application/vnd.oasis.opendocument.presentation-template"",
    "".ots"":       ""application/vnd.oasis.opendocument.spreadsheet-template"",
    "".ott"":       ""application/vnd.oasis.opendocument.text-template"",
    "".p10"":       ""application/pkcs10"",
    "".p12"":       ""application/pkcs-12"",
    "".p7a"":       ""application/x-pkcs7-signature"",
    "".p7c"":       ""application/pkcs7-mime"",
    "".p7m"":       ""application/pkcs7-mime"",
    "".p7r"":       ""application/x-pkcs7-certreqresp"",
    "".p7s"":       ""application/pkcs7-signature"",
    "".p"":         ""text/x-pascal"",
    "".part"":      ""application/pro_eng"",
    "".pas"":       ""text/pascal"",
    "".pbm"":       ""image/x-portable-bitmap"",
    "".pcl"":       ""application/vndhp-pcl"",
    "".pct"":       ""image/x-pict"",
    "".pcx"":       ""image/x-pcx"",
    "".pdb"":       ""chemical/x-pdb"",
    "".pdf"":       ""application/pdf"",
    "".pfunk"":     ""audio/make"",
    "".pgm"":       ""image/x-portable-graymap"",
    "".pic"":       ""image/pict"",
    "".pict"":      ""image/pict"",
    "".pkg"":       ""application/x-newton-compatible-pkg"",
    "".pko"":       ""application/vndms-pkipko"",
    "".pl"":        ""text/x-scriptperl"",
    "".plx"":       ""application/x-pixclscript"",
    "".pm4"":       ""application/x-pagemaker"",
    "".pm5"":       ""application/x-pagemaker"",
    "".pm"":        ""text/x-scriptperl-module"",
    "".png"":       ""image/png"",
    "".pnm"":       ""application/x-portable-anymap"",
    "".pot"":       ""application/mspowerpoint"",
    "".pov"":       ""model/x-pov"",
    "".ppa"":       ""application/vndms-powerpoint"",
    "".ppm"":       ""image/x-portable-pixmap"",
    "".pps"":       ""application/mspowerpoint"",
    "".ppt"":       ""application/mspowerpoint"",
    "".ppz"":       ""application/mspowerpoint"",
    "".pre"":       ""application/x-freelance"",
    "".prt"":       ""application/pro_eng"",
    "".ps"":        ""application/postscript"",
    "".psd"":       ""application/octet-stream"",
    "".pvu"":       ""paleovu/x-pv"",
    "".pwz"":       ""application/vndms-powerpoint"",
    "".py"":        ""text/x-scriptphyton"",
    "".pyc"":       ""application/x-bytecodepython"",
    "".qcp"":       ""audio/vndqcelp"",
    "".qd3"":       ""x-world/x-3dmf"",
    "".qd3d"":      ""x-world/x-3dmf"",
    "".qif"":       ""image/x-quicktime"",
    "".qt"":        ""video/quicktime"",
    "".qtc"":       ""video/x-qtc"",
    "".qti"":       ""image/x-quicktime"",
    "".qtif"":      ""image/x-quicktime"",
    "".ra"":        ""audio/x-pn-realaudio"",
    "".ram"":       ""audio/x-pn-realaudio"",
    "".rar"":       ""application/x-rar-compressed"",
    "".ras"":       ""application/x-cmu-raster"",
    "".rast"":      ""image/cmu-raster"",
    "".rexx"":      ""text/x-scriptrexx"",
    "".rf"":        ""image/vndrn-realflash"",
    "".rgb"":       ""image/x-rgb"",
    "".rm"":        ""application/vndrn-realmedia"",
    "".rmi"":       ""audio/mid"",
    "".rmm"":       ""audio/x-pn-realaudio"",
    "".rmp"":       ""audio/x-pn-realaudio"",
    "".rng"":       ""application/ringing-tones"",
    "".rnx"":       ""application/vndrn-realplayer"",
    "".roff"":      ""application/x-troff"",
    "".rp"":        ""image/vndrn-realpix"",
    "".rpm"":       ""audio/x-pn-realaudio-plugin"",
    "".rt"":        ""text/vndrn-realtext"",
    "".rtf"":       ""text/richtext"",
    "".rtx"":       ""text/richtext"",
    "".rv"":        ""video/vndrn-realvideo"",
    "".s"":         ""text/x-asm"",
    "".s3m"":       ""audio/s3m"",
    "".s7z"":       ""application/x-7z-compressed"",
    "".saveme"":    ""application/octet-stream"",
    "".sbk"":       ""application/x-tbook"",
    "".scm"":       ""text/x-scriptscheme"",
    "".sdml"":      ""text/plain"",
    "".sdp"":       ""application/sdp"",
    "".sdr"":       ""application/sounder"",
    "".sea"":       ""application/sea"",
    "".set"":       ""application/set"",
    "".sgm"":       ""text/x-sgml"",
    "".sgml"":      ""text/x-sgml"",
    "".sh"":        ""text/x-scriptsh"",
    "".shar"":      ""application/x-bsh"",
    "".shtml"":     ""text/x-server-parsed-html"",
    "".sid"":       ""audio/x-psid"",
    "".skd"":       ""application/x-koan"",
    "".skm"":       ""application/x-koan"",
    "".skp"":       ""application/x-koan"",
    "".skt"":       ""application/x-koan"",
    "".sit"":       ""application/x-stuffit"",
    "".sitx"":      ""application/x-stuffitx"",
    "".sl"":        ""application/x-seelogo"",
    "".smi"":       ""application/smil"",
    "".smil"":      ""application/smil"",
    "".snd"":       ""audio/basic"",
    "".sol"":       ""application/solids"",
    "".spc"":       ""text/x-speech"",
    "".spl"":       ""application/futuresplash"",
    "".spr"":       ""application/x-sprite"",
    "".sprite"":    ""application/x-sprite"",
    "".spx"":       ""audio/ogg"",
    "".src"":       ""application/x-wais-source"",
    "".ssi"":       ""text/x-server-parsed-html"",
    "".ssm"":       ""application/streamingmedia"",
    "".sst"":       ""application/vndms-pkicertstore"",
    "".step"":      ""application/step"",
    "".stl"":       ""application/sla"",
    "".stp"":       ""application/step"",
    "".sv4cpio"":   ""application/x-sv4cpio"",
    "".sv4crc"":    ""application/x-sv4crc"",
    "".svf"":       ""image/vnddwg"",
    "".svg"":       ""image/svg+xml"",
    "".svr"":       ""application/x-world"",
    "".swf"":       ""application/x-shockwave-flash"",
    "".t"":         ""application/x-troff"",
    "".talk"":      ""text/x-speech"",
    "".tar"":       ""application/x-tar"",
    "".tbk"":       ""application/toolbook"",
    "".tcl"":       ""text/x-scripttcl"",
    "".tcsh"":      ""text/x-scripttcsh"",
    "".tex"":       ""application/x-tex"",
    "".texi"":      ""application/x-texinfo"",
    "".texinfo"":   ""application/x-texinfo"",
    "".text"":      ""text/plain"",
    "".tgz"":       ""application/gnutar"",
    "".tif"":       ""image/tiff"",
    "".tiff"":      ""image/tiff"",
    "".tr"":        ""application/x-troff"",
    "".tsi"":       ""audio/tsp-audio"",
    "".tsp"":       ""application/dsptype"",
    "".tsv"":       ""text/tab-separated-values"",
    "".turbot"":    ""image/florian"",
    "".txt"":       ""text/plain"",
    "".uil"":       ""text/x-uil"",
    "".uni"":       ""text/uri-list"",
    "".unis"":      ""text/uri-list"",
    "".unv"":       ""application/i-deas"",
    "".uri"":       ""text/uri-list"",
    "".uris"":      ""text/uri-list"",
    "".ustar"":     ""application/x-ustar"",
    "".uu"":        ""text/x-uuencode"",
    "".uue"":       ""text/x-uuencode"",
    "".vcd"":       ""application/x-cdlink"",
    "".vcf"":       ""text/x-vcard"",
    "".vcard"":     ""text/x-vcard"",
    "".vcs"":       ""text/x-vcalendar"",
    "".vda"":       ""application/vda"",
    "".vdo"":       ""video/vdo"",
    "".vew"":       ""application/groupwise"",
    "".viv"":       ""video/vivo"",
    "".vivo"":      ""video/vivo"",
    "".vmd"":       ""application/vocaltec-media-desc"",
    "".vmf"":       ""application/vocaltec-media-file"",
    "".voc"":       ""audio/voc"",
    "".vos"":       ""video/vosaic"",
    "".vox"":       ""audio/voxware"",
    "".vqe"":       ""audio/x-twinvq-plugin"",
    "".vqf"":       ""audio/x-twinvq"",
    "".vql"":       ""audio/x-twinvq-plugin"",
    "".vrml"":      ""application/x-vrml"",
    "".vrt"":       ""x-world/x-vrt"",
    "".vsd"":       ""application/x-visio"",
    "".vst"":       ""application/x-visio"",
    "".vsw"":       ""application/x-visio"",
    "".w60"":       ""application/wordperfect60"",
    "".w61"":       ""application/wordperfect61"",
    "".w6w"":       ""application/msword"",
    "".wav"":       ""audio/wav"",
    "".wb1"":       ""application/x-qpro"",
    "".wbmp"":      ""image/vnd.wap.wbmp"",
    "".web"":       ""application/vndxara"",
    "".wiz"":       ""application/msword"",
    "".wk1"":       ""application/x-123"",
    "".wmf"":       ""windows/metafile"",
    "".wml"":       ""text/vnd.wap.wml"",
    "".wmlc"":      ""application/vnd.wap.wmlc"",
    "".wmls"":      ""text/vnd.wap.wmlscript"",
    "".wmlsc"":     ""application/vnd.wap.wmlscriptc"",
    "".word"":      ""application/msword"",
    "".wp5"":       ""application/wordperfect"",
    "".wp6"":       ""application/wordperfect"",
    "".wp"":        ""application/wordperfect"",
    "".wpd"":       ""application/wordperfect"",
    "".wq1"":       ""application/x-lotus"",
    "".wri"":       ""application/mswrite"",
    "".wrl"":       ""application/x-world"",
    "".wrz"":       ""model/vrml"",
    "".wsc"":       ""text/scriplet"",
    "".wsrc"":      ""application/x-wais-source"",
    "".wtk"":       ""application/x-wintalk"",
    "".x-png"":     ""image/png"",
    "".xbm"":       ""image/x-xbitmap"",
    "".xdr"":       ""video/x-amt-demorun"",
    "".xgz"":       ""xgl/drawing"",
    "".xif"":       ""image/vndxiff"",
    "".xl"":        ""application/excel"",
    "".xla"":       ""application/excel"",
    "".xlb"":       ""application/excel"",
    "".xlc"":       ""application/excel"",
    "".xld"":       ""application/excel"",
    "".xlk"":       ""application/excel"",
    "".xll"":       ""application/excel"",
    "".xlm"":       ""application/excel"",
    "".xls"":       ""application/excel"",
    "".xlt"":       ""application/excel"",
    "".xlv"":       ""application/excel"",
    "".xlw"":       ""application/excel"",
    "".xm"":        ""audio/xm"",
    "".xml"":       ""text/xml"",
    "".xmz"":       ""xgl/movie"",
    "".xpix"":      ""application/x-vndls-xpix"",
    "".xpm"":       ""image/x-xpixmap"",
    "".xsr"":       ""video/x-amt-showrun"",
    "".xwd"":       ""image/x-xwd"",
    "".xyz"":       ""chemical/x-pdb"",
    "".z"":         ""application/x-compress"",
    "".zip"":       ""application/zip"",
    "".zoo"":       ""application/octet-stream"",
    "".zsh"":       ""text/x-scriptzsh"",
    "".docx"":      ""application/vnd.openxmlformats-officedocument.wordprocessingml.document"",
    "".docm"":      ""application/vnd.ms-word.document.macroEnabled.12"",
    "".dotx"":      ""application/vnd.openxmlformats-officedocument.wordprocessingml.template"",
    "".dotm"":      ""application/vnd.ms-word.template.macroEnabled.12"",
    "".xlsx"":      ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"",
    "".xlsm"":      ""application/vnd.ms-excel.sheet.macroEnabled.12"",
    "".xltx"":      ""application/vnd.openxmlformats-officedocument.spreadsheetml.template"",
    "".xltm"":      ""application/vnd.ms-excel.template.macroEnabled.12"",
    "".xlsb"":      ""application/vnd.ms-excel.sheet.binary.macroEnabled.12"",
    "".xlam"":      ""application/vnd.ms-excel.addin.macroEnabled.12"",
    "".pptx"":      ""application/vnd.openxmlformats-officedocument.presentationml.presentation"",
    "".pptm"":      ""application/vnd.ms-powerpoint.presentation.macroEnabled.12"",
    "".ppsx"":      ""application/vnd.openxmlformats-officedocument.presentationml.slideshow"",
    "".ppsm"":      ""application/vnd.ms-powerpoint.slideshow.macroEnabled.12"",
    "".potx"":      ""application/vnd.openxmlformats-officedocument.presentationml.template"",
    "".potm"":      ""application/vnd.ms-powerpoint.template.macroEnabled.12"",
    "".ppam"":      ""application/vnd.ms-powerpoint.addin.macroEnabled.12"",
    "".sldx"":      ""application/vnd.openxmlformats-officedocument.presentationml.slide"",
    "".sldm"":      ""application/vnd.ms-powerpoint.slide.macroEnabled.12"",
    "".thmx"":      ""application/vnd.ms-officetheme"",
    "".onetoc"":    ""application/onenote"",
    "".onetoc2"":   ""application/onenote"",
    "".onetmp"":    ""application/onenote"",
    "".onepkg"":    ""application/onenote"",
    "".xpi"":       ""application/x-xpinstall"",
}

func init() {
    for ext, typ := range types {
        // skip errors
        mime.AddExtensionType(ext, typ)
    }
}

// typeByExtension returns the MIME type associated with the file extension ext.
// The extension ext should begin with a leading dot, as in "".html"".
// When ext has no associated type, typeByExtension returns """".
//
// Extensions are looked up first case-sensitively, then case-insensitively.
//
// The built-in table is small but on unix it is augmented by the local
// system's mime.types file(s) if available under one or more of these
// names:
//
//   /etc/mime.types
//   /etc/apache2/mime.types
//   /etc/apache/mime.types
//
// On Windows, MIME types are extracted from the registry.
//
// Text types have the charset parameter set to ""utf-8"" by default.
func TypeByExtension(fullfilename string) string {
    ext := filepath.Ext(fullfilename)
    typ := mime.TypeByExtension(ext)

    // mime.TypeByExtension returns as text/plain; | charset=utf-8 the static .js (not always)
    if ext == "".js"" && (typ == ""text/plain"" || typ == ""text/plain; charset=utf-8"") {

        if ext == "".js"" {
            typ = ""application/javascript""
        }
    }
    return typ
}
",23652
1496,43351857,"map[struct]func

map[
    {contact %!s(int=1)}:%!s(main.Controller=0x4c7b50) 
    {services/basket %!s(int=2)}:%!s(main.Controller=0x4c7ad0) 
    {categories %!s(int=1)}:%!s(main.Controller=0x4c7ae0) 
    {categories/{category} %!s(int=2)}:%!s(main.Controller=0x4c7af0)
    {categories/{category}/{product} %!s(int=3)}:%!s(main.Controller=0x4c7b00) 
    {basket %!s(int=1)}:%!s(main.Controller=0x4c7b10) 
    {checkout %!s(int=1)}:%!s(main.Controller=0x4c7b40) 
    {sitemap %!s(int=1)}:%!s(main.Controller=0x4c7b30) 
    {services/order %!s(int=2)}:%!s(main.Controller=0x4c7ac0) 
    {services/image %!s(int=2)}:%!s(main.Controller=0x4c7b20) 
    {/ %!s(int=1)}:%!s(main.Controller=0x4c7a00)
]

c := RouteMap[struct]
",718
1497,43351857,"fmt.Printf(""%s"", c)",19
1498,43351857,"%s
0x4c7b10%s
panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xc0000005 code=0x0 addr=0x0 pc=0x4c76f4]

goroutine 5 [running]:
main.RequestHandler(0x577ce0, 0xc042004018)
        C:/Users/mon/Desktop/server.go:91 +0x684
created by main.main
        C:/Users/mon/Desktop/server.go:41 +0x2a0
",323
1499,43351857,"package main

import (
    ""bufio""
    ""bytes""
    ""fmt""
    ""net""
    ""strings""
    ""time""
)

var RouteMap = make(map[PathIdentifier]Controller)

func main() {
    ln, err := net.Listen(""tcp"", "":8080"")
    if err != nil {
        // handle error
    }

    MapRoute(""/"", HomeController)
    MapRoute(""categories"", CategoriesController)
    MapRoute(""categories/{category}"", CategoryController)
    MapRoute(""categories/{category}/{product}"", CategoryProductController)
    MapRoute(""basket"", BasketController)

    MapRoute(""checkout"", CheckoutController)
    MapRoute(""sitemap"", SitemapController)
    MapRoute(""contact"", ContactController)

    MapRoute(""services/order"", OrderServiceController)
    MapRoute(""services/basket"", BasketServiceController)
    MapRoute(""services/image"", ImageServiceController)

    fmt.Printf(""%s\n"", RouteMap)

    for {
        conn, err := ln.Accept()
        if err != nil {
            // handle error
        }
        go RequestHandler(conn)
    }
}

// ----------------------- Request & Response ---------------------------

func ParseQueryString() {}

func ParsePostData() {}

func ResponseHeaders() {}

func ParseRequestHeaders() {}

func RequestHandler(conn net.Conn) {
CrLf := ""\r\n""
Terminator := CrLf + CrLf

defer func() {
    //fmt.Println(""Closing connection..."")
    conn.Close()
}()

timeoutDuration := 10 * time.Second
bufReader := bufio.NewReader(conn)

conn.SetReadDeadline(time.Now().Add(timeoutDuration))

requestBytes, err := bufReader.ReadBytes('\n')
if err != nil {
    fmt.Println(err)
    return
}

requestTokens := bytes.Split(requestBytes, []byte("" ""))

requestMethod := string(requestTokens[0])
requestPath := string(requestTokens[1])
//requestHTTPVersion := string(requestTokens[2])

if requestMethod == ""GET"" {
    // Parse path
    pathTokens := strings.Split(requestPath, ""/"")
    segments := len(pathTokens)

    key := PathIdentifier{path: ""categories/{category}/{product}"", segments: (segments - 1)}
    c := RouteMap[key]

    fmt.Print(""%s\n"", c)

}

    document := []byte(""HTTP/1.1 200 OK"" + CrLf + ""Date: Mon, 27 Jul 2009 12:28:53 GMT"" + CrLf + ""Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT"" + CrLf + ""Content-Length: 49"" + CrLf + ""Content-Type: text/html"" + CrLf + ""Connection: Closed"" + Terminator + ""Hello, World!"" + Terminator)

    conn.Write(document)
}

// ----------------------------- Controller -----------------------------

type Controller func()

type PathIdentifier struct {
    path     string
    segments int
}

func MapRoute(view string, controller Controller) {
    if controller != nil {

        if view != ""/"" {
            pathTokens := strings.Split(view, ""/"")

            key := PathIdentifier{path: view, segments: len(pathTokens)}
            RouteMap[key] = controller
            return
        }

        key := PathIdentifier{path: view, segments: 1}
        RouteMap[key] = controller
    }
}

func HomeController() {
    fmt.Print(""Invoking the HomeController.\n"")
}

func OrderServiceController() {

}

func BasketServiceController() {

}

func CategoriesController() {

}

func CategoryController() {

}

func CategoryProductsController() {

}

func CategoryProductController() {

}

func BasketController() {

}

func ImageServiceController() {

}

func SitemapController() {

}

func CheckoutController() {

}

func ContactController() {

}
",3357
1500,43438219,"package llvm.org/llvm/bindings/go/llvm: unrecognized import path ""llvm.org/llvm/bindings/go/llvm"" (parse https://llvm.org/llvm/bindings/go/llvm?go-get=1: no go-import meta tags ())
",181
1501,43438219,"package llvm.org/llvm/bindings: unrecognized import path ""llvm.org/llvm/bindings"" (parse https://llvm.org/llvm/bindings?go-get=1: no go-import meta tags ())
",157
1502,43438219,go get,6
1503,43438219,https://llvm.org/,17
1504,43438219,"Not Found
The requested URL / was not found on this server.
Apache/2.2.22 (Ubuntu) Server at llvm.org Port 443
",111
1505,43438219,http://llvm.org,15
1506,43438219,github.com/go-llvm/llgo,23
1507,43438219,"guest@system:~/go/src/github.com/go-llvm/llgo$ ./llgo-go.sh build
can't load package: package github.com/go-llvm/llgo: no buildable Go source files in /home/guest/go/src/github.com/go-llvm/llgo
guest@system:~/go/src/github.com/go-llvm/llgo$ ./llgo-go.sh install
can't load package: package github.com/go-llvm/llgo: no buildable Go source files in /home/guest/go/src/github.com/go-llvm/llgo
guest@system:~/go/src/github.com/go-llvm/llgo$ ./llgo-go.sh install
can't load package: package github.com/go-llvm/llgo: no buildable Go source files in /home/guest/go/src/github.com/go-llvm/llgo
guest@system:~/go/src/github.com/go-llvm/llgo$ make
./update_clang.sh
can't load package: package llvm.org/llvm/bindings/go/llvm: cannot find package ""llvm.org/llvm/bindings/go/llvm"" in any of:
    /usr/lib/go-1.8/src/llvm.org/llvm/bindings/go/llvm (from $GOROOT)
    /home/guest/go/src/llvm.org/llvm/bindings/go/llvm (from $GOPATH)
Makefile:25: recipe for target 'workdir/.update-clang-stamp' failed
make: *** [workdir/.update-clang-stamp] Error 1
guest@system:~/go/src/github.com/go-llvm/llgo$ export PATH=/path/to/gcc-inst/bin:$PATH
guest@system:~/go/src/github.com/go-llvm/llgo$ export LD_LIBRARY_PATH=/path/to/gcc-inst/lib64:$LD_LIBRARY_PATH
guest@system:~/go/src/github.com/go-llvm/llgo$ export CC=`which gcc`
guest@system:~/go/src/github.com/go-llvm/llgo$ export CXX=`which g++`
guest@system:~/go/src/github.com/go-llvm/llgo$ export LIBGO_CFLAGS=--gcc-toolchain=/path/to/gcc-inst
guest@system:~/go/src/github.com/go-llvm/llgo$ go get -d github.com/go-llvm/llgo/cmd/gllgo
package llvm.org/llvm/bindings/go/llvm: unrecognized import path ""llvm.org/llvm/bindings/go/llvm"" (parse https://llvm.org/llvm/bindings/go/llvm?go-get=1: no go-import meta tags ())
package golang.org/x/tools/go/exact: cannot find package ""golang.org/x/tools/go/exact"" in any of:
    /usr/lib/go-1.8/src/golang.org/x/tools/go/exact (from $GOROOT)
    /home/guest/go/src/golang.org/x/tools/go/exact (from $GOPATH)
package golang.org/x/tools/go/gccgoimporter: cannot find package ""golang.org/x/tools/go/gccgoimporter"" in any of:
    /usr/lib/go-1.8/src/golang.org/x/tools/go/gccgoimporter (from $GOROOT)
    /home/guest/go/src/golang.org/x/tools/go/gccgoimporter (from $GOPATH)
package golang.org/x/tools/go/importer: cannot find package ""golang.org/x/tools/go/importer"" in any of:
    /usr/lib/go-1.8/src/golang.org/x/tools/go/importer (from $GOROOT)
    /home/guest/go/src/golang.org/x/tools/go/importer (from $GOPATH)
guest@system:~/go/src/github.com/go-llvm/llgo$ $GOPATH/src/llvm.org/llvm/bindings/go/build.sh -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=host
bash: /home/guest/go/src/llvm.org/llvm/bindings/go/build.sh: No such file or directory
guest@system:~/go/src/github.com/go-llvm/llgo$ 
",2767
1508,43438219,"$ go version
go version go1.8 linux/amd64
$ cmake -version
cmake version 3.8.20170216-gb9229

CMake suite maintained and supported by Kitware (kitware.com/cmake).
",163
1509,43438219,"+ llvm_components=all-targets analysis asmparser asmprinter bitreader bitwriter codegen core debuginfo executionengine instrumentation interpreter ipo irreader linker mc mcjit objcarcopts option profiledata scalaropts support target 
+ dirname ./update_llvm.sh
+ gollvmdir=.
+ grep run_update_llvm_sh_to_get_revision_ ./llvm_dep.go
+ sed -E -e s/.*run_update_llvm_sh_to_get_revision_([0-9]+.*)/\1/g
+ llvmrev=218171
+ workdir=./workdir
+ llvmdir=./workdir/llvm
+ llvm_builddir=./workdir/llvm_build
+ mkdir -p ./workdir
+ svn co -r 218171 https://llvm.org/svn/llvm-project/llvm/trunk ./workdir/llvm
Checked out revision 218171.
+ mkdir -p ./workdir/llvm_build
+ cmake_flags=../llvm 
+ llvm_config=./workdir/llvm_build/bin/llvm-config
+ which ninja
+ test -n /usr/bin/ninja
+ cd ./workdir/llvm_build
+ cmake -G Ninja ../llvm
-- Target triple: x86_64-unknown-linux-gnu
-- Native target architecture is X86
-- Threads enabled.
-- Doxygen disabled.
-- Sphinx disabled.
CMake Warning (dev) at cmake/modules/HandleLLVMOptions.cmake:131 (if):
  Policy CMP0054 is not set: Only interpret if() arguments as variables or
  keywords when unquoted.  Run ""cmake --help-policy CMP0054"" for policy
  details.  Use the cmake_policy command to set the policy and suppress this
  warning.

  Quoted variables like ""C_SUPPORTS_FPIC"" will no longer be dereferenced when
  the policy is set to NEW.  Since the policy is not set the OLD behavior
  will be used.
Call Stack (most recent call first):
  cmake/modules/HandleLLVMOptions.cmake:148 (add_flag_or_print_warning)
  CMakeLists.txt:315 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Building with -fPIC
-- Constructing LLVMBuild project information
-- Targeting AArch64
-- Targeting ARM
-- Targeting CppBackend
-- Targeting Hexagon
-- Targeting Mips
-- Targeting MSP430
-- Targeting NVPTX
-- Targeting PowerPC
-- Targeting R600
-- Targeting Sparc
-- Targeting SystemZ
-- Targeting X86
-- Targeting XCore
-- Configuring done
-- Generating done
-- Build files have been written to: /home/guest/go/src/github.com/go-llvm/llvm/workdir/llvm_build
+ ninja -C ./workdir/llvm_build llvm-config
ninja: Entering directory `./workdir/llvm_build'
[2/2] Linking CXX executable bin/llvm-config
+ ./workdir/llvm_build/bin/llvm-config --libs all-targets analysis asmparser asmprinter bitreader bitwriter codegen core debuginfo executionengine instrumentation interpreter ipo irreader linker mc mcjit objcarcopts option profiledata scalaropts support target
+ sed -e s/-l//g
+ llvm_buildtargets=LLVMOption LLVMObjCARCOpts LLVMMCJIT LLVMRuntimeDyld LLVMLinker LLVMIRReader LLVMipo LLVMVectorize LLVMInterpreter LLVMInstrumentation LLVMExecutionEngine LLVMDebugInfo LLVMBitWriter LLVMAsmParser LLVMXCoreDisassembler LLVMXCoreCodeGen LLVMXCoreDesc LLVMXCoreInfo LLVMXCoreAsmPrinter LLVMX86Disassembler LLVMX86AsmParser LLVMX86CodeGen LLVMX86Desc LLVMX86Info LLVMX86AsmPrinter LLVMX86Utils LLVMSystemZDisassembler LLVMSystemZCodeGen LLVMSystemZAsmParser LLVMSystemZDesc LLVMSystemZInfo LLVMSystemZAsmPrinter LLVMSparcDisassembler LLVMSparcCodeGen LLVMSparcAsmParser LLVMSparcDesc LLVMSparcInfo LLVMSparcAsmPrinter LLVMR600CodeGen LLVMR600Desc LLVMR600Info LLVMR600AsmPrinter LLVMPowerPCDisassembler LLVMPowerPCCodeGen LLVMPowerPCAsmParser LLVMPowerPCDesc LLVMPowerPCInfo LLVMPowerPCAsmPrinter LLVMNVPTXCodeGen LLVMNVPTXDesc LLVMNVPTXInfo LLVMNVPTXAsmPrinter LLVMMSP430CodeGen LLVMMSP430Desc LLVMMSP430Info LLVMMSP430AsmPrinter LLVMMipsDisassembler LLVMMipsCodeGen LLVMMipsAsmParser LLVMMipsDesc LLVMMipsInfo LLVMMipsAsmPrinter LLVMHexagonCodeGen LLVMHexagonAsmPrinter LLVMHexagonDesc LLVMHexagonInfo LLVMCppBackendCodeGen LLVMCppBackendInfo LLVMARMDisassembler LLVMARMCodeGen LLVMARMAsmParser LLVMARMDesc LLVMARMInfo LLVMARMAsmPrinter LLVMAArch64Disassembler LLVMMCDisassembler LLVMAArch64CodeGen LLVMSelectionDAG LLVMAsmPrinter LLVMCodeGen LLVMScalarOpts LLVMProfileData LLVMObject LLVMBitReader LLVMInstCombine LLVMTransformUtils LLVMipa LLVMAnalysis LLVMTarget LLVMCore LLVMAArch64AsmParser LLVMMCParser LLVMAArch64Desc LLVMAArch64Info LLVMAArch64AsmPrinter LLVMMC LLVMAArch64Utils LLVMSupport
+ ninja -C ./workdir/llvm_build LLVMOption LLVMObjCARCOpts LLVMMCJIT LLVMRuntimeDyld LLVMLinker LLVMIRReader LLVMipo LLVMVectorize LLVMInterpreter LLVMInstrumentation LLVMExecutionEngine LLVMDebugInfo LLVMBitWriter LLVMAsmParser LLVMXCoreDisassembler LLVMXCoreCodeGen LLVMXCoreDesc LLVMXCoreInfo LLVMXCoreAsmPrinter LLVMX86Disassembler LLVMX86AsmParser LLVMX86CodeGen LLVMX86Desc LLVMX86Info LLVMX86AsmPrinter LLVMX86Utils LLVMSystemZDisassembler LLVMSystemZCodeGen LLVMSystemZAsmParser LLVMSystemZDesc LLVMSystemZInfo LLVMSystemZAsmPrinter LLVMSparcDisassembler LLVMSparcCodeGen LLVMSparcAsmParser LLVMSparcDesc LLVMSparcInfo LLVMSparcAsmPrinter LLVMR600CodeGen LLVMR600Desc LLVMR600Info LLVMR600AsmPrinter LLVMPowerPCDisassembler LLVMPowerPCCodeGen LLVMPowerPCAsmParser LLVMPowerPCDesc LLVMPowerPCInfo LLVMPowerPCAsmPrinter LLVMNVPTXCodeGen LLVMNVPTXDesc LLVMNVPTXInfo LLVMNVPTXAsmPrinter LLVMMSP430CodeGen LLVMMSP430Desc LLVMMSP430Info LLVMMSP430AsmPrinter LLVMMipsDisassembler LLVMMipsCodeGen LLVMMipsAsmParser LLVMMipsDesc LLVMMipsInfo LLVMMipsAsmPrinter LLVMHexagonCodeGen LLVMHexagonAsmPrinter LLVMHexagonDesc LLVMHexagonInfo LLVMCppBackendCodeGen LLVMCppBackendInfo LLVMARMDisassembler LLVMARMCodeGen LLVMARMAsmParser LLVMARMDesc LLVMARMInfo LLVMARMAsmPrinter LLVMAArch64Disassembler LLVMMCDisassembler LLVMAArch64CodeGen LLVMSelectionDAG LLVMAsmPrinter LLVMCodeGen LLVMScalarOpts LLVMProfileData LLVMObject LLVMBitReader LLVMInstCombine LLVMTransformUtils LLVMipa LLVMAnalysis LLVMTarget LLVMCore LLVMAArch64AsmParser LLVMMCParser LLVMAArch64Desc LLVMAArch64Info LLVMAArch64AsmPrinter LLVMMC LLVMAArch64Utils LLVMSupport FileCheck
ninja: Entering directory `./workdir/llvm_build'
ninja: no work to do.
+ ./workdir/llvm_build/bin/llvm-config --version
+ llvm_version=3.6.0svn
+ ./workdir/llvm_build/bin/llvm-config --cppflags
+ llvm_cflags=-I/home/guest/go/src/github.com/go-llvm/llvm/workdir/llvm/include -I/home/guest/go/src/github.com/go-llvm/llvm/workdir/llvm_build/include    -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS
+ uname
+ [ Linux == Darwin ]
./update_llvm.sh: 59: [: Linux: unexpected operator
+ ./workdir/llvm_build/bin/llvm-config --ldflags
+ ./workdir/llvm_build/bin/llvm-config --libdir
+ ./workdir/llvm_build/bin/llvm-config --libs all-targets analysis asmparser asmprinter bitreader bitwriter codegen core debuginfo executionengine instrumentation interpreter ipo irreader linker mc mcjit objcarcopts option profiledata scalaropts support target
+ ./workdir/llvm_build/bin/llvm-config --system-libs
+ llvm_ldflags=-L/home/guest/go/src/github.com/go-llvm/llvm/workdir/llvm_build//lib  -Wl,-rpath,/home/guest/go/src/github.com/go-llvm/llvm/workdir/llvm_build//lib -lLLVMOption -lLLVMObjCARCOpts -lLLVMMCJIT -lLLVMRuntimeDyld -lLLVMLinker -lLLVMIRReader -lLLVMipo -lLLVMVectorize -lLLVMInterpreter -lLLVMInstrumentation -lLLVMExecutionEngine -lLLVMDebugInfo -lLLVMBitWriter -lLLVMAsmParser -lLLVMXCoreDisassembler -lLLVMXCoreCodeGen -lLLVMXCoreDesc -lLLVMXCoreInfo -lLLVMXCoreAsmPrinter -lLLVMX86Disassembler -lLLVMX86AsmParser -lLLVMX86CodeGen -lLLVMX86Desc -lLLVMX86Info -lLLVMX86AsmPrinter -lLLVMX86Utils -lLLVMSystemZDisassembler -lLLVMSystemZCodeGen -lLLVMSystemZAsmParser -lLLVMSystemZDesc -lLLVMSystemZInfo -lLLVMSystemZAsmPrinter -lLLVMSparcDisassembler -lLLVMSparcCodeGen -lLLVMSparcAsmParser -lLLVMSparcDesc -lLLVMSparcInfo -lLLVMSparcAsmPrinter -lLLVMR600CodeGen -lLLVMR600Desc -lLLVMR600Info -lLLVMR600AsmPrinter -lLLVMPowerPCDisassembler -lLLVMPowerPCCodeGen -lLLVMPowerPCAsmParser -lLLVMPowerPCDesc -lLLVMPowerPCInfo -lLLVMPowerPCAsmPrinter -lLLVMNVPTXCodeGen -lLLVMNVPTXDesc -lLLVMNVPTXInfo -lLLVMNVPTXAsmPrinter -lLLVMMSP430CodeGen -lLLVMMSP430Desc -lLLVMMSP430Info -lLLVMMSP430AsmPrinter -lLLVMMipsDisassembler -lLLVMMipsCodeGen -lLLVMMipsAsmParser -lLLVMMipsDesc -lLLVMMipsInfo -lLLVMMipsAsmPrinter -lLLVMHexagonCodeGen -lLLVMHexagonAsmPrinter -lLLVMHexagonDesc -lLLVMHexagonInfo -lLLVMCppBackendCodeGen -lLLVMCppBackendInfo -lLLVMARMDisassembler -lLLVMARMCodeGen -lLLVMARMAsmParser -lLLVMARMDesc -lLLVMARMInfo -lLLVMARMAsmPrinter -lLLVMAArch64Disassembler -lLLVMMCDisassembler -lLLVMAArch64CodeGen -lLLVMSelectionDAG -lLLVMAsmPrinter -lLLVMCodeGen -lLLVMScalarOpts -lLLVMProfileData -lLLVMObject -lLLVMBitReader -lLLVMInstCombine -lLLVMTransformUtils -lLLVMipa -lLLVMAnalysis -lLLVMTarget -lLLVMCore -lLLVMAArch64AsmParser -lLLVMMCParser -lLLVMAArch64Desc -lLLVMAArch64Info -lLLVMAArch64AsmPrinter -lLLVMMC -lLLVMAArch64Utils -lLLVMSupport -lrt -ldl -ltinfo -latomic -lpthread -lz
+ sed -e s#@LLVM_REVISION@#218171#g; s#@LLVM_CFLAGS@#-I/home/guest/go/src/github.com/go-llvm/llvm/workdir/llvm/include -I/home/guest/go/src/github.com/go-llvm/llvm/workdir/llvm_build/include    -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS#g;         s#@LLVM_LDFLAGS@#-L/home/guest/go/src/github.com/go-llvm/llvm/workdir/llvm_build//lib  -Wl,-rpath,/home/guest/go/src/github.com/go-llvm/llvm/workdir/llvm_build//lib -lLLVMOption -lLLVMObjCARCOpts -lLLVMMCJIT -lLLVMRuntimeDyld -lLLVMLinker -lLLVMIRReader -lLLVMipo -lLLVMVectorize -lLLVMInterpreter -lLLVMInstrumentation -lLLVMExecutionEngine -lLLVMDebugInfo -lLLVMBitWriter -lLLVMAsmParser -lLLVMXCoreDisassembler -lLLVMXCoreCodeGen -lLLVMXCoreDesc -lLLVMXCoreInfo -lLLVMXCoreAsmPrinter -lLLVMX86Disassembler -lLLVMX86AsmParser -lLLVMX86CodeGen -lLLVMX86Desc -lLLVMX86Info -lLLVMX86AsmPrinter -lLLVMX86Utils -lLLVMSystemZDisassembler -lLLVMSystemZCodeGen -lLLVMSystemZAsmParser -lLLVMSystemZDesc -lLLVMSystemZInfo -lLLVMSystemZAsmPrinter -lLLVMSparcDisassembler -lLLVMSparcCodeGen -lLLVMSparcAsmParser -lLLVMSparcDesc -lLLVMSparcInfo -lLLVMSparcAsmPrinter -lLLVMR600CodeGen -lLLVMR600Desc -lLLVMR600Info -lLLVMR600AsmPrinter -lLLVMPowerPCDisassembler -lLLVMPowerPCCodeGen -lLLVMPowerPCAsmParser -lLLVMPowerPCDesc -lLLVMPowerPCInfo -lLLVMPowerPCAsmPrinter -lLLVMNVPTXCodeGen -lLLVMNVPTXDesc -lLLVMNVPTXInfo -lLLVMNVPTXAsmPrinter -lLLVMMSP430CodeGen -lLLVMMSP430Desc -lLLVMMSP430Info -lLLVMMSP430AsmPrinter -lLLVMMipsDisassembler -lLLVMMipsCodeGen -lLLVMMipsAsmParser -lLLVMMipsDesc -lLLVMMipsInfo -lLLVMMipsAsmPrinter -lLLVMHexagonCodeGen -lLLVMHexagonAsmPrinter -lLLVMHexagonDesc -lLLVMHexagonInfo -lLLVMCppBackendCodeGen -lLLVMCppBackendInfo -lLLVMARMDisassembler -lLLVMARMCodeGen -lLLVMARMAsmParser -lLLVMARMDesc -lLLVMARMInfo -lLLVMARMAsmPrinter -lLLVMAArch64Disassembler -lLLVMMCDisassembler -lLLVMAArch64CodeGen -lLLVMSelectionDAG -lLLVMAsmPrinter -lLLVMCodeGen -lLLVMScalarOpts -lLLVMProfileData -lLLVMObject -lLLVMBitReader -lLLVMInstCombine -lLLVMTransformUtils -lLLVMipa -lLLVMAnalysis -lLLVMTarget -lLLVMCore -lLLVMAArch64AsmParser -lLLVMMCParser -lLLVMAArch64Desc -lLLVMAArch64Info -lLLVMAArch64AsmPrinter -lLLVMMC -lLLVMAArch64Utils -lLLVMSupport -lrt -ldl -ltinfo -latomic -lpthread -lz#g ./llvm_config.go.in
+ printf package llvm\n\nconst Version = ""%s""\n 3.6.0svn
",11078
1510,43438219,"; ModuleID = 'fac_module'

define i32 @fac(i32) {
entry:
  %cmptmp = icmp eq i32 %0, 0
  br i1 %cmptmp, label %end, label %iffalse

iffalse:                                          ; preds = %entry
  %subtmp = add i32 %0, -1
  %calltmp = call i32 @fac(i32 %subtmp)
  %multmp = mul i32 %calltmp, %0
  br label %end

end:                                              ; preds = %entry, %iffalse
  %result = phi i32 [ %multmp, %iffalse ], [ 1, %entry ]
  ret i32 %result
}
-----------------------------------------
Running fac(10) with JIT...
Result: 3628800
DONE
",561
1511,43438219,"guest@system:~$ go get llvm.org/llvm.v36/bindings/go/llvm
package llvm.org/llvm.v36/bindings/go/llvm: unrecognized import path ""llvm.org/llvm.v36/bindings/go/llvm"" (parse https://llvm.org/llvm.v36/bindings/go/llvm?go-get=1: no go-import meta tags ())
guest@system:~$ go get -d llvm.org/llvm.v36/bindings/go/llvm
package llvm.org/llvm.v36/bindings/go/llvm: unrecognized import path ""llvm.org/llvm.v36/bindings/go/llvm"" (parse https://llvm.org/llvm.v36/bindings/go/llvm?go-get=1: no go-import meta tags ())
",505
1512,43438219,"$ which llvm-config
/usr/bin/llvm-config

guest@system:~/go/src/github.com/go-llvm/llvm/workdir/llvm_build/bin$ ls
FileCheck  llvm-config  llvm-lit  llvm-tblgen
",161
1513,43438219,"Cloning into '/tmp/update_third_party.auPNC9/gofrontend'...
remote: Sending approximately 92.68 MiB ...
remote: Counting objects: 3087, done
remote: Finding sources: 100% (69/69)
remote: Total 33940 (delta 26755), reused 33933 (delta 26755)
Receiving objects: 100% (33940/33940), 92.79 MiB | 60.00 KiB/s, done.
Resolving deltas: 100% (26755/26755), done.
Checking connectivity... done.
Note: checking out '81eb6a3f425b2158c67ee32c0cc973a72ce9d6be'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b 

HEAD is now at 81eb6a3... runtime: don't overallocate in select code
patching file libgo/runtime/chan.goc
patching file libgo/runtime/chan.h
patching file libgo/runtime/heapdump.c
patching file libgo/runtime/malloc.goc
patching file libgo/runtime/malloc.h
Hunk #1 succeeded at 392 (offset 2 lines).
Hunk #2 succeeded at 403 (offset 2 lines).
Hunk #3 succeeded at 460 (offset 2 lines).
Hunk #4 succeeded at 478 (offset 2 lines).
Hunk #5 succeeded at 507 (offset 2 lines).
patching file libgo/runtime/mcache.c
patching file libgo/runtime/mcentral.c
patching file libgo/runtime/mgc0.c
Hunk #3 succeeded at 1380 (offset 2 lines).
Hunk #4 succeeded at 1390 (offset 2 lines).
Hunk #5 succeeded at 1804 (offset 2 lines).
Hunk #6 succeeded at 2151 (offset 4 lines).
Hunk #7 succeeded at 2428 (offset 5 lines).
Hunk #8 succeeded at 2443 (offset 5 lines).
Hunk #9 succeeded at 2451 (offset 5 lines).
patching file libgo/runtime/mheap.c
patching file libgo/runtime/netpoll.goc
patching file libgo/runtime/proc.c
Hunk #1 succeeded at 326 (offset 24 lines).
Hunk #2 succeeded at 809 (offset 100 lines).
Hunk #3 succeeded at 820 (offset 100 lines).
Hunk #4 succeeded at 847 (offset 100 lines).
Hunk #5 succeeded at 855 (offset 100 lines).
Hunk #6 succeeded at 864 (offset 100 lines).
Hunk #7 succeeded at 881 (offset 100 lines).
Hunk #8 succeeded at 894 (offset 100 lines).
Hunk #9 succeeded at 933 (offset 100 lines).
Hunk #10 succeeded at 953 (offset 100 lines).
Hunk #11 succeeded at 987 (offset 100 lines).
Hunk #12 succeeded at 1011 (offset 100 lines).
Hunk #13 succeeded at 1452 (offset 106 lines).
Hunk #14 succeeded at 1481 (offset 106 lines).
Hunk #15 succeeded at 1525 (offset 106 lines).
Hunk #16 succeeded at 1618 (offset 106 lines).
Hunk #17 succeeded at 1673 (offset 106 lines).
Hunk #18 succeeded at 1709 (offset 106 lines).
Hunk #19 succeeded at 1730 (offset 106 lines).
Hunk #20 succeeded at 1749 (offset 106 lines).
Hunk #21 succeeded at 1794 (offset 106 lines).
Hunk #22 succeeded at 1832 (offset 106 lines).
Hunk #23 succeeded at 1928 (offset 106 lines).
Hunk #24 succeeded at 2031 (offset 106 lines).
Hunk #25 succeeded at 2159 (offset 106 lines).
Hunk #26 succeeded at 2184 (offset 106 lines).
Hunk #27 succeeded at 2192 (offset 106 lines).
Hunk #28 succeeded at 2484 (offset 119 lines).
Hunk #29 succeeded at 2595 (offset 119 lines).
Hunk #30 succeeded at 2627 (offset 119 lines).
Hunk #31 succeeded at 2657 (offset 119 lines).
Hunk #32 succeeded at 2682 (offset 119 lines).
Hunk #33 succeeded at 2826 (offset 119 lines).
Hunk #34 succeeded at 2906 (offset 126 lines).
Hunk #35 succeeded at 3044 (offset 126 lines).
Hunk #36 succeeded at 3080 (offset 126 lines).
Hunk #37 succeeded at 3112 (offset 126 lines).
Hunk #38 succeeded at 3268 (offset 126 lines).
Hunk #39 succeeded at 3422 (offset 126 lines).
patching file libgo/runtime/runtime.h
patching file libgo/runtime/sema.goc
patching file libgo/runtime/sigqueue.goc
patching file libgo/runtime/time.goc
patching file libgo/Makefile.am
Hunk #1 succeeded at 4139 (offset 401 lines).
Hunk #2 succeeded at 4246 (offset 409 lines).
patching file libgo/Makefile.in
Hunk #1 succeeded at 2433 (offset 221 lines).
Hunk #2 succeeded at 2540 (offset 229 lines).
patching file libgo/go/runtime/mfinal_test.go
Hunk #1 succeeded at 65 (offset 3 lines).
cp: cannot stat '../../cmake/config.guess': No such file or directory
",4208
1514,43460604,"package main

import (
    ""bytes""
    ""fmt""
    ""runtime/debug""
    ""time""
)

const variations = 30

var time1, time2 time.Time
var delta, catcher string
var x, deltaSize, k, dataSize, operations uint64
var i, j, x_min uint64
var l int
var delta_byte []byte
var method1Speed, method2Speed, method3Speed, method3ASpeed, method2ASpeed [variations]uint64
var dataTotal [variations]uint64
var tmp []byte

func main() {

    x_min = 2
    operations = 1

    for x = variations; x >= x_min; x = x - 2 {
        deltaSize = 1 << x // 2^x
        dataSize = operations * deltaSize
        dataTotal[x-1] = dataSize

        fmt.Println(""Step #"", x, ""delta="", deltaSize, ""op.="", operations, ""data="", dataSize)
        fmt.Println(""Preparing Data..."")
        delta_byte = make([]byte, deltaSize)
        for i = 0; i < deltaSize; i++ {
            delta_byte[i] = 255
        }
        delta = string(delta_byte)

        delta_byte = nil
        catcher = """"
        debug.FreeOSMemory()

        fmt.Println(""Testing Method #1..."")
        time1 = time.Now()
        for j = 1; j <= operations; j++ {
            //----------------------------
            catcher += delta
            //----------------------------
        }
        time2 = time.Now()
        method1Speed[x-1] = uint64((1000000 * float64(dataSize)) / float64(time2.Sub(time1).Nanoseconds())) // KiB/sec.

        catcher = """"
        debug.FreeOSMemory()

        fmt.Println(""Testing Method #2..."")
        time1 = time.Now()
        for j = 1; j <= operations; j++ {
            //----------------------------
            stringsJoinViaCopy(&catcher, &catcher, &delta)
            //----------------------------
        }
        time2 = time.Now()
        method2Speed[x-1] = uint64((1000000 * float64(dataSize)) / float64(time2.Sub(time1).Nanoseconds())) // KiB/sec.

        catcher = """"
        debug.FreeOSMemory()

        fmt.Println(""Testing Method #3..."")
        time1 = time.Now()
        for j = 1; j <= operations; j++ {
            //----------------------------
            stringsJoinViaBuffer(&catcher, &catcher, &delta)
            //----------------------------
        }
        time2 = time.Now()
        method3Speed[x-1] = uint64((1000000 * float64(dataSize)) / float64(time2.Sub(time1).Nanoseconds())) // KiB/sec.

        catcher = """"
        debug.FreeOSMemory()

        fmt.Println(""Testing Method #3A..."")
        time1 = time.Now()
        buffer := bytes.NewBuffer(nil)
        for j = 1; j <= operations; j++ {
            //----------------------------
            buffer.WriteString(delta)
            //----------------------------
        }
        catcher = buffer.String()
        time2 = time.Now()
        method3ASpeed[x-1] = uint64((1000000 * float64(dataSize)) / float64(time2.Sub(time1).Nanoseconds())) // KiB/sec.

        catcher = """"
        debug.FreeOSMemory()

        fmt.Println(""Testing Method #2A..."")
        time1 = time.Now()
        tmp = make([]byte, int(operations)*len(delta)) // Cheating (guessing) with size
        l = 0
        for j = 1; j <= operations; j++ {
            //----------------------------
            l += copy(tmp[l:], delta)
            //----------------------------
        }
        catcher = string(tmp)
        time2 = time.Now()
        method2ASpeed[x-1] = uint64((1000000 * float64(dataSize)) / float64(time2.Sub(time1).Nanoseconds())) // KiB/sec.

        catcher = """"
        delta = """"
        debug.FreeOSMemory()

        ///
        operations *= 2
    }

    // Show Results
    fmt.Println(""#. ops. Total Data, B. Speed (KiB/sec) M1 M2 M3 M3A M2A"")
    for x = x_min; x <= variations; x = x + 2 {
        dataSize = 1 << x // 2^x
        operations = 1 << (variations - x)
        fmt.Println(x, operations, dataTotal[x-1], method1Speed[x-1], method2Speed[x-1], method3Speed[x-1],
            method3ASpeed[x-1], method2ASpeed[x-1])
    }
}

//------------------------------------------------------------------------------

func stringsJoinViaBuffer(dest, a, b *string) {

    // Joins two strings (a & b) using Buffer and puts them into dest.

    buffer := bytes.NewBuffer(nil)
    buffer.WriteString(*a)
    buffer.WriteString(*b)

    *dest = buffer.String()
}

//------------------------------------------------------------------------------

func stringsJoinViaCopy(dest, a, b *string) {
    x := make([]byte, len(*a)+len(*b))
    i := 0
    i += copy(x[i:], *a)
    i += copy(x[i:], *b)

    *dest = string(x)
}
",4484
1515,43460604,"#. ops. Total Data, B. Speed (KiB/sec) M1 M2 M3 M3A M2A
2 268435456 65536 236 109 57 108413 301653
4 67108864 131072 464 227 113 251519 576660
6 16777216 262144 895 410 202 225300 626165
8 4194304 524288 1514 672 351 205068 552088
10 1048576 1048576 3187 1412 756 207588 532239
12 262144 2097152 7980 3238 1727 209447 592230
14 65536 4194304 16361 6553 3641 230521 536320
16 16384 8388608 29568 12170 6835 241752 604050
18 4096 16777216 55158 23950 13549 238039 563997
20 1024 33554432 98348 43400 25958 216947 521189
22 256 67108864 168906 80442 48725 231806 534722
24 64 134217728 299127 129035 89686 254403 519534
26 16 268435456 529730 207405 153894 284578 506730
28 4 536870912 1167316 353510 268546 359990 523471
30 1 1073741824 909950698305 503703 581848 572763 579852
",776
1516,43515002,"go version go1.7.4 linux/amd64
",31
1517,43515002,"package main

import (
    ""context""
    ""encoding/json""
    ""fmt""
    ""html/template""
    ""io/ioutil""
    ""log""
    ""net/http""
    ""net/url""

    ""golang.org/x/oauth2""
    ""gopkg.in/oauth2.v3/errors""
    ""gopkg.in/oauth2.v3/manage""
    ""gopkg.in/oauth2.v3/models""
    ""gopkg.in/oauth2.v3/server""
    ""gopkg.in/oauth2.v3/store""
    ""gopkg.in/session.v1""
)

var (
    config = oauth2.Config{
        ClientID:     ""222222"",
        ClientSecret: ""22222222"",
        Scopes:       []string{""all""},
        RedirectURL:  ""https://pitangui.amazon.com/spa/skill/account-linking-status.html?vendorId=xxxxxxxxxxxx"",
        Endpoint: oauth2.Endpoint{
            AuthURL:  ""/authorize"",
            TokenURL: ""/token"",
        },
    }
    globalSessions *session.Manager
)

func init() {
    globalSessions, _ = session.NewManager(""memory"", `{""cookieName"":""gosessionid"",""gclifetime"":3600}`)
    go globalSessions.GC()
}

func mainHandler(w http.ResponseWriter, r *http.Request) {

    w.Write([]byte(""hello world""))
    fmt.Println(""loginHandler"")
}

/*
Function Name : main()

Function Description :    This function is capable of running this application and listen for requests comming in

*/
func main() {
    http.HandleFunc(""/home"", mainHandler)

    // Listen to port 8080 and handle requests

    //------------------------------client.go--------------------------------------------//
    http.HandleFunc(""/client"", func(w http.ResponseWriter, r *http.Request) {
        log.Println(""client"")
        u := config.AuthCodeURL(""xyz"")
        http.Redirect(w, r, u, http.StatusFound)
    })
    http.HandleFunc(""/oauth2"", func(w http.ResponseWriter, r *http.Request) {
        log.Println(""oauth2"")
        log.Println(""request url is"", r.RequestURI)
        log.Println(""request method"", r.Method)
        requestbody, _ := ioutil.ReadAll(r.Body)
        log.Println(""request body is"", string(requestbody))
        log.Println(""request body is"", requestbody)
        r.ParseForm()
        state := r.Form.Get(""state"")
        if state != ""xyz"" {
            http.Error(w, ""State invalid"", http.StatusBadRequest)
            return
        }
        code := r.Form.Get(""code"")
        log.Println(""code is"", code)
        if code == """" {
            http.Error(w, ""Code not found"", http.StatusBadRequest)
            return
        }
        token, err := config.Exchange(context.Background(), code)
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
            return
        }
        log.Println(""w is:"", *token)
        e := json.NewEncoder(w)
        e.SetIndent("""", ""  "")
        e.Encode(*token)
    })
    //------------------------------client.go--------------------------------------------//
    //------------------------------server.go--------------------------------------------//
    manager := manage.NewDefaultManager()
    // token store
    manager.MustTokenStorage(store.NewMemoryTokenStore())

    clientStore := store.NewClientStore()
    clientStore.Set(""222222"", &models.Client{
        ID:     ""222222"",
        Secret: ""22222222"",
        Domain: """",
    })
    manager.MapClientStorage(clientStore)

    srv := server.NewServer(server.NewConfig(), manager)
    srv.SetUserAuthorizationHandler(userAuthorizeHandler)

    srv.SetInternalErrorHandler(func(err error) (re *errors.Response) {
        log.Println(""Internal Error:"", err.Error())
        return
    })

    srv.SetResponseErrorHandler(func(re *errors.Response) {
        log.Println(""Response Error:"", re.Error.Error())
    })

    http.HandleFunc(""/login"", loginHandler)
    http.HandleFunc(""/auth"", authHandler)

    http.HandleFunc(""/authorize"", func(w http.ResponseWriter, r *http.Request) {
        log.Println(""/authorize"")
        requestbody, _ := ioutil.ReadAll(r.Body)
        log.Println(""request body is"", requestbody)
        log.Println(""request url is"", r.RequestURI)
        err := srv.HandleAuthorizeRequest(w, r)
        if err != nil {
            http.Error(w, err.Error(), http.StatusBadRequest)
        }
    })

    http.HandleFunc(""/token"", func(w http.ResponseWriter, r *http.Request) {
        log.Println(""/token"")

        err := srv.HandleTokenRequest(w, r)
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
        }
    })
    //------------------------------server.go--------------------------------------------//
    http.ListenAndServe("":8080"", nil)

}

func userAuthorizeHandler(w http.ResponseWriter, r *http.Request) (userID string, err error) {
    log.Println(""userAuthorizeHandler"")
    us, err := globalSessions.SessionStart(w, r)
    uid := us.Get(""UserID"")
    if uid == nil {
        if r.Form == nil {
            r.ParseForm()
        }
        us.Set(""Form"", r.Form)
        w.Header().Set(""Location"", ""/login"")
        w.WriteHeader(http.StatusFound)
        return
    }
    userID = uid.(string)
    us.Delete(""UserID"")
    return
}
func loginHandler(w http.ResponseWriter, r *http.Request) {

    // do whatever you need to do
    if r.Method == ""POST"" {
        fmt.Println(""login post method"")
        us, err := globalSessions.SessionStart(w, r)
        if err != nil {
            fmt.Println(""err:"", err)
            http.Error(w, err.Error(), http.StatusInternalServerError)
            return
        }
        us.Set(""LoggedInUserID"", ""000000"")
        w.Header().Set(""Location"", ""/auth"")
        w.WriteHeader(http.StatusFound)
        return
    }
    myvar := map[string]interface{}{""MyVar"": ""hiiiiiiiiiiii""}
    outputHTML(w, ""static/login.html"", myvar)
}

func authHandler(w http.ResponseWriter, r *http.Request) {
    log.Println(""authHandler"")
    log.Println(""request url is"", r.RequestURI)
    log.Println(""request method"", r.Method)
    requestbody, _ := ioutil.ReadAll(r.Body)
    log.Println(""request body is"", string(requestbody))
    log.Println(""request body is"", requestbody)
    us, err := globalSessions.SessionStart(w, r)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    log.Println(""LoggedInUserID:"", us.Get(""LoggedInUserID""))
    if us.Get(""LoggedInUserID"") == nil {
        w.Header().Set(""Location"", ""/login"")
        w.WriteHeader(http.StatusFound)
        return
    }
    if r.Method == ""POST"" {
        form := us.Get(""Form"").(url.Values)
        log.Println(""form values entered are"", form)
        u := new(url.URL)
        u.Path = ""/authorize""
        u.RawQuery = form.Encode()
        w.Header().Set(""Location"", u.String())
        w.WriteHeader(http.StatusFound)
        us.Delete(""Form"")
        us.Set(""UserID"", us.Get(""LoggedInUserID""))
        return
    }
    myvar := map[string]interface{}{""MyVar"": ""redirect url:"" + ""https://pitangui.amazon.com/spa/skill/account-linking-status.html?vendorId=M256OAZNG882Y2""}
    outputHTML(w, ""static/auth.html"", myvar)
}

func outputHTML(w http.ResponseWriter, filename string, data interface{}) {
    t, err := template.ParseFiles(filename)
    if err != nil {
        http.Error(w, err.Error(), 500)
        return
    }
    if err := t.Execute(w, data); err != nil {
        http.Error(w, err.Error(), 500)
        return
    }
}
",7207
1518,43675122,b.N,3
1519,43675122,b.N,3
1520,43675122,"package main

import (
    ""bytes""
    ""strings""
    ""testing""
)

const (
    sss = ""xfoasneobfasieongasbg""
    cnt = 10000
)

var (
    bbb      = []byte(sss)
    expected = strings.Repeat(sss, cnt)
)

func BenchmarkCopyPreAllocate(b *testing.B) {
    var result string
    for n := 0; n < b.N; n++ {
        bs := make([]byte, cnt*len(sss))
        bl := 0
        for i := 0; i < cnt; i++ {
            bl += copy(bs[bl:], sss)
        }
        result = string(bs)
    }
    b.StopTimer()
    if result != expected {
        b.Errorf(""unexpected result; got=%s, want=%s"", string(result), expected)
    }
}

func BenchmarkAppendPreAllocate(b *testing.B) {
    var result string
    for n := 0; n < b.N; n++ {
        data := make([]byte, 0, cnt*len(sss))
        for i := 0; i < cnt; i++ {
            data = append(data, sss...)
        }
        result = string(data)
    }
    b.StopTimer()
    if result != expected {
        b.Errorf(""unexpected result; got=%s, want=%s"", string(result), expected)
    }
}

func BenchmarkBufferPreAllocate(b *testing.B) {
    var result string
    for n := 0; n < b.N; n++ {
        buf := bytes.NewBuffer(make([]byte, 0, cnt*len(sss)))
        for i := 0; i < cnt; i++ {
            buf.WriteString(sss)
        }
        result = buf.String()
    }
    b.StopTimer()
    if result != expected {
        b.Errorf(""unexpected result; got=%s, want=%s"", string(result), expected)
    }
}

func BenchmarkCopy(b *testing.B) {
    var result string
    for n := 0; n < b.N; n++ {
        data := make([]byte, 0, 64) // same size as bootstrap array of bytes.Buffer
        for i := 0; i < cnt; i++ {
            off := len(data)
            if off+len(sss) > cap(data) {
                temp := make([]byte, 2*cap(data)+len(sss))
                copy(temp, data)
                data = temp
            }
            data = data[0 : off+len(sss)]
            copy(data[off:], sss)
        }
        result = string(data)
    }
    b.StopTimer()
    if result != expected {
        b.Errorf(""unexpected result; got=%s, want=%s"", string(result), expected)
    }
}

func BenchmarkAppend(b *testing.B) {
    var result string
    for n := 0; n < b.N; n++ {
        data := make([]byte, 0, 64)
        for i := 0; i < cnt; i++ {
            data = append(data, sss...)
        }
        result = string(data)
    }
    b.StopTimer()
    if result != expected {
        b.Errorf(""unexpected result; got=%s, want=%s"", string(result), expected)
    }
}

func BenchmarkBufferWrite(b *testing.B) {
    var result string
    for n := 0; n < b.N; n++ {
        var buf bytes.Buffer
        for i := 0; i < cnt; i++ {
            buf.Write(bbb)
        }
        result = buf.String()
    }
    b.StopTimer()
    if result != expected {
        b.Errorf(""unexpected result; got=%s, want=%s"", string(result), expected)
    }
}

func BenchmarkBufferWriteString(b *testing.B) {
    var result string
    for n := 0; n < b.N; n++ {
        var buf bytes.Buffer
        for i := 0; i < cnt; i++ {
            buf.WriteString(sss)
        }
        result = buf.String()
    }
    b.StopTimer()
    if result != expected {
        b.Errorf(""unexpected result; got=%s, want=%s"", string(result), expected)
    }
}

func BenchmarkConcat(b *testing.B) {
    var result string
    for n := 0; n < b.N; n++ {
        var str string
        for i := 0; i < cnt; i++ {
            str += sss
        }
        result = str
    }
    b.StopTimer()
    if result != expected {
        b.Errorf(""unexpected result; got=%s, want=%s"", string(result), expected)
    }
}
",3572
1521,43675122,"BenchmarkCopyPreAllocate-8         20000             84208 ns/op          425984 B/op          2 allocs/op
BenchmarkAppendPreAllocate-8       10000            102859 ns/op          425984 B/op          2 allocs/op
BenchmarkBufferPreAllocate-8       10000            166407 ns/op          426096 B/op          3 allocs/op
BenchmarkCopy-8                    10000            160923 ns/op          933152 B/op         13 allocs/op
BenchmarkAppend-8                  10000            175508 ns/op         1332096 B/op         24 allocs/op
BenchmarkBufferWrite-8             10000            239886 ns/op          933266 B/op         14 allocs/op
BenchmarkBufferWriteString-8       10000            236432 ns/op          933266 B/op         14 allocs/op
BenchmarkConcat-8                     10         105603419 ns/op        1086685168 B/op    10000 allocs/op
",856
1522,43675122,CopyPreAllocate,15
1523,43675122,AppendPreAllocate,17
1524,43675122,Concat,6
1525,43675122,Buffer#Write,12
1526,43675122,Buffer#WriteString,18
1527,43675122,string,6
1528,43675122,[]byte,6
1529,43675122,Copy,4
1530,43675122,Copy,4
1531,43675122,Append,6
1532,43675122,Append,6
1533,43675122,Append,6
1534,43675122,AppendPreAllocate,17
1535,43675122,bytes.Buffer,12
1536,43682714,interval.go,11
1537,43682714,interval_test.go,16
1538,43682714,"package minfys

import (
    ""fmt""
    ""testing""
)

// Example
var (
    xA = Intervals{{10, 15}, {30, 35}, {20, 25}}
    xB = Interval{5, 32}
    xD = Intervals{{5, 9}, {16, 19}, {26, 29}}
    xR = Intervals{}
)

func BenchmarkExample(b *testing.B) {
    b.ReportAllocs()
    a := make(Intervals, len(xA))
    b.ResetTimer()
    for i := 0; i < b.N; i++ {
        copy(a, xA)
        xR = a.Difference(xB)
    }
    b.StopTimer()
    if fmt.Sprint(xD) != fmt.Sprint(xR) {
        b.Fatal(xD, xR)
    }
}
",505
1539,43682714,"package minfys

func (a Intervals) Difference(b Interval) Intervals {
    // If A and B are sets, then the relative complement of A in B
    // is the set of elements in B but not in A.
    // The relative complement of A in B is denoted B ∖  A:
    //     B \ A = {x ∈ A | x ∉ B}
    //     B \ A = B ∩ A'
    //
    // For example. d = a\b,
    //     a: [{10, 15}, {30, 35}, {20, 25}]
    //     b: {5,32}
    //     d: [{5,9}, {16,19}, {26,29}]
    // The elements of set a are non-overlapping, non-adjacent,
    // and unsorted intervals.

    if len(a) <= 0 {
        return Intervals{b}
    }

    d := make(Intervals, 0, 3)
    for ; len(a) > 0; a = a[1:] {
        for i := 1; i < len(a); i++ {
            if a[i].Start < a[0].Start {
                a[i], a[0] = a[0], a[i]
            }
        }

        if b.Start < a[0].Start {
            if b.End < a[0].Start {
                d = append(d, b)
                break
            }
            d = append(d, Interval{b.Start, a[0].Start - 1})
            b.Start = a[0].Start
        }
        if b.End <= a[0].End {
            break
        }
        if b.Start <= a[0].End {
            b.Start = a[0].End + 1
        }
        if len(a) == 1 {
            if b.Start <= a[0].End {
                b.Start = a[0].End + 1
            }
            d = append(d, b)
            break
        }
    }
    return d
}
",1391
1540,43682714,"BenchmarkExample-4     20000000     62.4 ns/op    48 B/op      1 allocs/op
",75
1541,43682714,"// Interval struct is used to describe something with a start and end. End must
// be greater than start.
type Interval struct {
    Start int64
    End   int64
}

// Overlaps returns true if this interval overlaps with the supplied one.
func (i *Interval) Overlaps(j Interval) bool {
    // https://nedbatchelder.com/blog/201310/range_overlap_in_two_compares.html
    return i.End >= j.Start && j.End >= i.Start
}

// Intervals type is a slice of Interval.
type Intervals []Interval

// Difference returns any portions of iv that do not overlap with any of our
// intervals. Assumes that all of our intervals have been Merge()d in.
func (ivs Intervals) Difference(iv Interval) (diffs Intervals) {
    diffs = append(diffs, iv)
    for _, prior := range ivs {
        for i := 0; i < len(diffs); {
            if left, right, overlapped := prior.Difference(diffs[i]); overlapped {
                if len(diffs) == 1 {
                    diffs = nil
                } else {
                    diffs = append(diffs[:i], diffs[i+1:]...)
                }

                if left != nil {
                    diffs = append(diffs, *left)
                }
                if right != nil {
                    diffs = append(diffs, *right)
                }
            } else {
                i++
            }
        }
        if len(diffs) == 0 {
            break
        }
    }

    return
}
",1400
1542,43682714,"BenchmarkExample-4      5000000    365 ns/op     128 B/op      4 allocs/op
",75
1543,43682714,"old.txt (sbs) versus new.txt (peterSO):

benchmark              old ns/op     new ns/op     delta
BenchmarkExample-4     365           62.4          -82.90%

benchmark              old allocs     new allocs   delta
BenchmarkExample-4     4              1            -75.00%

benchmark              old bytes     new bytes     delta
BenchmarkExample-4     128           48            -62.50%
",391
1544,43682714,interval_test.go,16
1545,43682714,ShouldBeNil,11
1546,43682714,ShouldBeEmpty,13
1547,43682714,ShouldResemble,14
1548,43682714,ShouldResemble,14
1549,43682714,"$ go test
..........................................................................................................................x......................................................x................x
Failures:

  * interval_test.go 
  Line 247:
  Expected: nil
  Actual:   '[]'

  * interval_test.go 
  Line 375:
  Expected: 'minfys.Intervals{minfys.Interval{Start:5, End:6}, minfys.Interval{Start:31, End:32}, minfys.Interval{Start:11, End:14}, minfys.Interval{Start:19, End:19}}'
  Actual:   'minfys.Intervals{minfys.Interval{Start:5, End:6}, minfys.Interval{Start:11, End:14}, minfys.Interval{Start:19, End:19}, minfys.Interval{Start:31, End:32}}'
  (Should resemble)!

  * interval_test.go 
  Line 413:
  Expected: 'minfys.Intervals{minfys.Interval{Start:7, End:10}, minfys.Interval{Start:1, End:3}, minfys.Interval{Start:15, End:17}}'
  Actual:   'minfys.Intervals{minfys.Interval{Start:1, End:3}, minfys.Interval{Start:7, End:10}, minfys.Interval{Start:15, End:17}}'
  (Should resemble)!


195 total assertions

...
198 total assertions

--- FAIL: TestIntervals (0.04s)
FAIL
",1087
1550,43682714,"$ diff -a -u ../interval_test.go interval_test.go
--- ../interval_test.go 2017-04-29 20:23:29.365344008 -0400
+++ interval_test.go    2017-04-29 20:54:14.349344903 -0400
@@ -244,19 +244,19 @@
            So(len(ivs), ShouldEqual, 1)

            newIvs = ivs.Difference(twoSix)
-           So(newIvs, ShouldBeNil)
+           So(newIvs, ShouldBeEmpty)
            ivs = ivs.Merge(twoSix)
            So(len(ivs), ShouldEqual, 1)

            newIvs = ivs.Difference(oneThree)
-           So(newIvs, ShouldBeNil)
+           So(newIvs, ShouldBeEmpty)
            ivs = ivs.Merge(oneThree)
            So(len(ivs), ShouldEqual, 1)

            oneSeven := Interval{1, 7}

            newIvs = ivs.Difference(oneSix)
-           So(newIvs, ShouldBeNil)
+           So(newIvs, ShouldBeEmpty)
            ivs = ivs.Merge(oneSix)
            So(len(ivs), ShouldEqual, 1)

@@ -372,7 +372,7 @@

            fiveThirtyTwo := Interval{5, 32}
            newIvs = ivs.Difference(fiveThirtyTwo)
-           So(newIvs, ShouldResemble, Intervals{Interval{5, 6}, Interval{31, 32}, Interval{11, 14}, Interval{19, 19}})
+           So(newIvs, ShouldResemble, Intervals{Interval{5, 6}, Interval{11, 14}, Interval{19, 19}, Interval{31, 32}})
            ivs = ivs.Merge(fiveThirtyTwo)
            So(len(ivs), ShouldEqual, 3)

@@ -409,7 +409,7 @@

            ivs = ivs.Truncate(17)

-           expected := Intervals{sevenTen, oneThree, Interval{15, 17}}
+           expected := Intervals{oneThree, sevenTen, Interval{15, 17}}
            So(ivs, ShouldResemble, expected)
        })
    })
",1573
1551,43682714,"$ go test
.............................................................................................................................................................................................................
205 total assertions

...
208 total assertions

PASS
$ 
",272
1552,43682714,interval_test.go,16
1553,43682714,"$ diff -a -u ../interval_test.go walltime_test.go
--- ../interval_test.go 2017-04-29 20:23:29.365344008 -0400
+++ walltime_test.go    2017-04-30 13:39:29.000000000 -0400
@@ -24,6 +24,7 @@
    ""math/rand""
    ""testing""
    ""time""
+   ""fmt""
 )

 func TestIntervals(t *testing.T) {
@@ -459,16 +460,20 @@

        var ivs Intervals
        errors := 0
+       var diffTime time.Duration
        t := time.Now()
        for i, input := range inputs {
            iv := NewInterval(int64(input), int64(readSize))
+           before := time.Now()
            newIvs := ivs.Difference(iv)
+           diffTime += time.Since(before)
            if (len(newIvs) == 1) != exepectedNew[i] {
                errors++
            }
            ivs = ivs.Merge(iv)
        }
-       // fmt.Printf(""\ntook %s\n"", time.Since(t))
+       fmt.Printf(""took %s\n"", time.Since(t))
+       fmt.Printf(""\n  Difference took %s\n"", diffTime)
        So(errors, ShouldEqual, 0)
        So(len(ivs), ShouldEqual, 1)
        So(time.Since(t).Seconds(), ShouldBeLessThan, 1) // 42ms on my machine
$ 
",1070
1554,43682714,interval_test.go,16
1555,43682714,"size    frequency
0       1
1       94929
2       50072
3       4998
",69
1556,43682714,"size    frequency
0       50000
1       100000
",47
1557,43682714,"package minfys

func (a Intervals) Difference(b Interval) Intervals {
    // If A and B are sets, then the relative complement of A in B
    // is the set of elements in B but not in A.
    // The relative complement of A in B is denoted B ∖  A:
    //     B \ A = {x ∈ A | x ∉ B}
    //     B \ A = B ∩ A'
    //
    // For example. d = a\b,
    //     a: [{10, 15}, {30, 35}, {20, 25}]
    //     b: {5,32}
    //     d: [{5,9}, {16,19}, {26,29}]
    // The elements of set a are non-overlapping, non-adjacent,
    // and unsorted intervals.

    if len(a) <= 0 {
        return Intervals{b}
    }

    var d Intervals
    for ; len(a) > 0; a = a[1:] {
        for i := 1; i < len(a); i++ {
            if a[i].Start < a[0].Start {
                a[i], a[0] = a[0], a[i]
            }
        }

        if b.Start < a[0].Start {
            if b.End < a[0].Start {
                d = append(d, b)
                break
            }
            d = append(d, Interval{b.Start, a[0].Start - 1})
            b.Start = a[0].Start
        }
        if b.End <= a[0].End {
            break
        }
        if b.Start <= a[0].End {
            b.Start = a[0].End + 1
        }
        if len(a) == 1 {
            if b.Start <= a[0].End {
                b.Start = a[0].End + 1
            }
            d = append(d, b)
            break
        }
    }
    return d
}
",1380
1558,43682714,interval_test.go,16
1559,43682714,"$ go test -v

  Merging many intervals is fast took 26.208614ms

  Difference took 10.706858ms
",95
1560,43682714,"$ go test -v

  Merging many intervals is fast took 30.799216ms

  Difference took 14.414488ms
",95
1561,43682714,"old.txt (sbs) versus new.txt (peterSO):

benchmark              old ns/op     new ns/op     delta
BenchmarkExample-4     365           221           -39.45%

benchmark              old allocs     new allocs   delta
BenchmarkExample-4     4              3            -25.00%

benchmark              old bytes     new bytes     delta
BenchmarkExample-4     128           112           -12.50%
",391
1562,43978018,"output, err := exec.Command(""ffmpeg"", ""-i"", source, ""-vcodec"", ""h264"", ""-acodec"", ""aac"", ""-strict"", ""-2"", destination).CombinedOutput()
",136
1563,43978018,"ffmpeg -i /tmp/pitchVideo-1494844705-102.mp4 -vcodec h264 -acodec aac -strict -2 /tmp/1494844705.mp4
",101
1564,43978018,"ffmpeg version 2.4.3-1ubuntu1~trusty6 Copyright (c) 2000-2014 the FFmpeg developers
  built on Nov 22 2014 17:07:19 with gcc 4.8 (Ubuntu 4.8.2-19ubuntu1)
  configuration: --prefix=/usr --extra-version='1ubuntu1~trusty6' --build-suffix=-ffmpeg --toolchain=hardened --extra-cflags= --extra-cxxflags= --libdir=/usr/lib/x86_64-linux-gnu --shlibdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --enable-gpl --enable-shared --disable-stripping --enable-avresample --enable-avisynth --enable-fontconfig --enable-gnutls --enable-ladspa --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libflite --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libmodplug --enable-libmp3lame --enable-libopenjpeg --enable-libopus --enable-libpulse --enable-librtmp --enable-libschroedinger --enable-libshine --enable-libspeex --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-opengl --enable-x11grab --enable-libxvid --enable-libx265 --enable-libdc1394 --enable-libiec61883 --enable-libzvbi --enable-libzmq --enable-frei0r --enable-libx264 --enable-libsoxr --enable-openal --enable-libopencv
  libavutil      54.  7.100 / 54.  7.100
  libavcodec     56.  1.100 / 56.  1.100
  libavformat    56.  4.101 / 56.  4.101
  libavdevice    56.  0.100 / 56.  0.100
  libavfilter     5.  1.100 /  5.  1.100
  libavresample   2.  1.  0 /  2.  1.  0
  libswscale      3.  0.100 /  3.  0.100
  libswresample   1.  1.100 /  1.  1.100
  libpostproc    53.  0.100 / 53.  0.100
Input #0, mov,mp4,m4a,3gp,3g2,mj2, from '/tmp/pitchVideo-1494844705-102.mp4':
  Metadata:
    major_brand     : isom
    minor_version   : 512
    compatible_brands: isomiso2avc1mp41
    encoder         : Lavf56.40.101
  Duration: 00:00:39.28, start: 0.000000, bitrate: 2300 kb/s
    Stream #0:0(und): Video: h264 (Constrained Baseline) (avc1 / 0x31637661), yuv420p, 640x480, 2231 kb/s, 25 fps, 25 tbr, 90k tbn, 50 tbc (default)
    Metadata:
      handler_name    : VideoHandler
    Stream #0:1(und): Audio: aac (mp4a / 0x6134706D), 48000 Hz, mono, fltp, 64 kb/s (default)
    Metadata:
      handler_name    : SoundHandler
[libx264 @ 0x1e12640] using cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2 AVX LZCNT
[libx264 @ 0x1e12640] profile High, level 3.0
[libx264 @ 0x1e12640] 264 - core 142 r2389 956c8d8 - H.264/MPEG-4 AVC codec - Copyleft 2003-2014 - http://www.videolan.org/x264.html - options: cabac=1 ref=3 deblock=1:0:0 analyse=0x3:0x113 me=hex subme=7 psy=1 psy_rd=1.00:0.00 mixed_ref=1 me_range=16 chroma_me=1 trellis=1 8x8dct=1 cqm=0 deadzone=21,11 fast_pskip=1 chroma_qp_offset=-2 threads=1 lookahead_threads=1 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 constrained_intra=0 bframes=3 b_pyramid=2 b_adapt=1 b_bias=0 direct=1 weightb=1 open_gop=0 weightp=2 keyint=250 keyint_min=25 scenecut=40 intra_refresh=0 rc_lookahead=40 rc=crf mbtree=1 crf=23.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 ip_ratio=1.40 aq=1:1.00
Output #0, mp4, to '/tmp/new.mp4':
  Metadata:
    major_brand     : isom
    minor_version   : 512
    compatible_brands: isomiso2avc1mp41
    encoder         : Lavf56.4.101
    Stream #0:0(und): Video: h264 (libx264) ([33][0][0][0] / 0x0021), yuv420p, 640x480, q=-1--1, 25 fps, 12800 tbn, 25 tbc (default)
    Metadata:
      handler_name    : VideoHandler
      encoder         : Lavc56.1.100 libx264
    Stream #0:1(und): Audio: aac ([64][0][0][0] / 0x0040), 48000 Hz, mono, fltp, 128 kb/s (default)
    Metadata:
      handler_name    : SoundHandler
      encoder         : Lavc56.1.100 aac
Stream mapping:
  Stream #0:0 -> #0:0 (h264 (native) -> h264 (libx264))
  Stream #0:1 -> #0:1 (aac (native) -> aac (native))
Press [q] to stop, [?] for help
frame=  983 fps= 27 q=28.0 Lsize=    4134kB time=00:00:39.24 bitrate= 863.0kbits/s dup=1 drop=0    
video:3542kB audio:565kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.646525%
[libx264 @ 0x1e12640] frame I:9     Avg QP:19.44  size:  9936
[libx264 @ 0x1e12640] frame P:664   Avg QP:23.58  size:  4839
[libx264 @ 0x1e12640] frame B:310   Avg QP:25.50  size:  1045
[libx264 @ 0x1e12640] consecutive B-frames: 56.0%  4.3%  5.2% 34.6%
[libx264 @ 0x1e12640] mb I  I16..4: 33.9% 53.6% 12.5%
[libx264 @ 0x1e12640] mb P  I16..4:  6.7% 10.2%  0.9%  P16..4: 50.7%  8.3%  3.0%  0.0%  0.0%    skip:20.2%
[libx264 @ 0x1e12640] mb B  I16..4:  0.4%  0.4%  0.0%  B16..8: 41.7%  1.4%  0.1%  direct: 1.3%  skip:54.7%  L0:46.9% L1:50.4% BI: 2.8%
[libx264 @ 0x1e12640] 8x8 transform intra:56.8% inter:76.1%
[libx264 @ 0x1e12640] coded y,uvDC,uvAC intra: 37.0% 60.5% 13.9% inter: 17.8% 26.0% 0.3%
[libx264 @ 0x1e12640] i16 v,h,dc,p: 23% 35% 15% 27%
[libx264 @ 0x1e12640] i8 v,h,dc,ddl,ddr,vr,hd,vl,hu: 25% 27% 21%  4%  4%  4%  4%  5%  5%
[libx264 @ 0x1e12640] i4 v,h,dc,ddl,ddr,vr,hd,vl,hu: 32% 26% 14%  4%  5%  5%  5%  5%  4%
[libx264 @ 0x1e12640] i8c dc,h,v,p: 53% 22% 19%  6%
[libx264 @ 0x1e12640] Weighted P-Frames: Y:8.7% UV:3.5%
[libx264 @ 0x1e12640] ref P L0: 73.8% 15.7%  8.4%  2.0%  0.1%
[libx264 @ 0x1e12640] ref B L0: 92.9%  6.2%  0.9%
[libx264 @ 0x1e12640] ref B L1: 96.1%  3.9%
[libx264 @ 0x1e12640] kb/s:737.84
",5241
1565,44091098,"/****** MIT License **********
Copyright (c) 2017 Zonkiie
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
***************************/

package main

/// http://stackoverflow.com/questions/23030884/is-there-a-way-to-create-an-instance-of-a-struct-from-a-string
/// http://stackoverflow.com/questions/7850140/how-do-you-create-a-new-instance-of-a-struct-from-its-type-at-runtime-in-go
/// http://stackoverflow.com/questions/29435783/gorm-golang-orm-associations

import (
    ""github.com/jinzhu/gorm""
    _ ""github.com/jinzhu/gorm/dialects/sqlite""
    ""fmt""
    ""reflect""
    ""regexp""
    ""encoding/json""
    ""encoding/xml""
    //""strconv""
    ""os""
    ""flag""
    ""strings""
)

type rs struct {
    //Parent    *rs `gorm:""ForeignKey:ID;AssociationForeignKey:ParentID""`
    Childs  []*rs   `gorm:""ForeignKey:ID;AssociationForeignKey:ParentID"" walkrec:""true""`
    ID  int64
    ParentID    int64   `gorm:""column:ParentID""`
    Value   string
    Sub []rs_sub    `gorm:""ForeignKey:ID;AssociationForeignKey:Rs_ID"" walkrec:""true""`
}

type rs_sub struct {
    ID  int64
    Rs_ID   int64   `gorm:""column:rs_id""`
    Value   string
}

var db *gorm.DB

func populateDb(db *gorm.DB) {

    rs1 := rs{ID: 1, ParentID: 0, Value: ""root""}
    db.Save(&rs1)
    rs2 := rs{ID: 2, ParentID: 1, Value: ""Child1""}
    db.Save(&rs2)
    rs3 := rs{ID: 3, ParentID: 2, Value: ""Child2""}
    db.Save(&rs3)
    rs4 := rs{ID: 4, ParentID: 3, Value: ""Child3""}
    db.Save(&rs4)
    rs5 := rs{ID: 5, ParentID: 3, Value: ""Child4""}
    db.Save(&rs5)
    rs_s := rs_sub{ID:1, Rs_ID:4, Value: ""SubChild1""}
    db.Save(&rs_s)
}

func PStdErr(format string, args ...interface{}) {
    fmt.Fprintf(os.Stderr, format, args...)
}

func JsonMarshal(data interface{}) string {
    b, err := json.Marshal(data)
    if err != nil {
        return ""Error""
    }
    return string(b[:])
}

func XmlMarshal(data interface{}) string {
    b, err := xml.Marshal(data)
    if err != nil {
        return ""Error""
    }
    return string(b[:])
}

func InitDB() *gorm.DB {
db, err := gorm.Open(""sqlite3"", "":memory:"")
if err != nil {
    panic(""failed to connect database"")
}
db.Exec(""DROP TABLE IF EXISTS rs;"")

    db.SingularTable(true)

// Migrate the schema
db.AutoMigrate(&rs{})
db.AutoMigrate(&rs_sub{})

populateDb(db)
//db.LogMode(true)
return db

}

// This function fetches all related objects from a given object in the data parameter.
// The struct must be fully tagged, we don't recognize automatically related IDs and so on.
// The function works only with not combined keys.
// Every field which should be fetched must be tagged with:
// walkrec:""true"" gorm:""ForeignKey:ID;AssociationForeignKey:ForeignKey""
// See: http://stackoverflow.com/questions/24537525/reflect-value-fieldbyname-causing-panic
// See: http://stackoverflow.com/questions/34493062/how-to-reflect-struct-recursive-in-golang
func fetchRec(db *gorm.DB, data interface{}) {
    // With data *rs: Type: *main.rs
    // With data interface{}: *main.rs
    var ref reflect.Value
    if reflect.TypeOf(data).Kind() == reflect.Struct {
        ref = reflect.ValueOf(data)
    } else if reflect.TypeOf(data).Kind() == reflect.Ptr {
        ref = reflect.Indirect(reflect.ValueOf(data))
    }
    if ref.Type().Kind() == reflect.Slice {
        for i := 0; i < ref.Len(); i++ {
            if ref.Index(i).Type().Kind() == reflect.Ptr {
                fetchRec(db, ref.Index(i).Elem().Addr().Interface())
            } else if ref.Index(i).Type().Kind() == reflect.Struct {
                // What should we do here?
            }
        }

    } else if ref.Type().Kind() == reflect.Struct {
        for i := 0; i < ref.NumField(); i++ {
            var IDFieldRaw string
            var IDFields []string
            var RefFieldRaw string
            var RefFields []string
            var re *regexp.Regexp
            var matches []string

            if ref.Field(i).CanAddr() && strings.EqualFold(ref.Type().Field(i).Tag.Get(""walkrec""), ""true"") {
                gormflags := ref.Type().Field(i).Tag.Get(""gorm"")
                if gormflags == """" {
                    panic(""No gorm flags found!"")
                } else {
                    re = regexp.MustCompile(`\bForeignKey:([a-zA-Z0-9_,]+)\b`)
                    matches = re.FindStringSubmatch(gormflags)
                    if len(matches) == 2 {
                        IDFieldRaw = matches[1]
                        IDFields = strings.Split(IDFieldRaw, "","")
                    }
                    re = regexp.MustCompile(`\bAssociationForeignKey:([a-zA-Z0-9_,]+)\b`)
                    matches = re.FindStringSubmatch(gormflags)
                    if len(matches) == 2 {
                        RefFieldRaw = matches[1]
                        RefFields = strings.Split(RefFieldRaw, "","")
                    }
                }
                if len(IDFields) == 0 { continue }
                if len(RefFields) != 0 {
                    WhereMap := make(map[string]interface{})
                    for fk := 0; fk < len(RefFields); fk++ {
                        WhereMap[RefFields[fk]] = fmt.Sprint(ref.FieldByName(IDFields[fk]))
                    }
                    db.Where(WhereMap).Find(ref.Field(i).Addr().Interface())
                    if ref.Field(i).Addr().Interface() != nil {
                        fetchRec(db, ref.Field(i).Addr().Interface())
                    }
                } else {
                    panic(""AssociationForeignKey empty!"")
                }
            }
        }
    }
}

func getParams() (id int) {
    flag.IntVar(&id, ""id"", 1, ""the id to fetch"")
    flag.Parse()
    return
}

func fetch(db *gorm.DB, id interface{}) (d rs, found bool) {

    //db.First(&d, id)
    found = false
    found = !db.Find(&d, id).RecordNotFound()
    if found {
        fetchRec(db, &d)
    }
    return
}

// Execute this program. For example:
// go run main.go --id=2
func main() {
    db = InitDB()
    defer db.Close()
    id := getParams()
    PStdErr(""Loading data with ID %d\n"", id)
    rs, found := fetch(db, id)
    if found {
        fmt.Print(XmlMarshal(rs) + ""\n"")
    }
}
",7092
1566,44213267,"/**
    {
        ""created_on"": ""26 may 2017"",
        ""todos"": [
            ""go get github.com/go-sql-driver/mysql"",
            ""postman(optional)"",
            ""browser(optional)"",    
        ],
        ""aim"": ""Reading fname column into []string(slice of strings)""
    }
*/


/* 
    mysql> select * from users;
    +----+-----------+----------+----------+-------------------------------+--------------+-------------------------------------------------------------------------------------------------+
    | id | fname     | lname    | uname    | email                         | contact      | profile_pic                                                                                     |
    +----+-----------+----------+----------+-------------------------------+--------------+-------------------------------------------------------------------------------------------------+
    |  1 | Rishikesh | Agrawani | hygull   | rishikesh0014051992@gmail.com | 917353787704 | https://cdn4.iconfinder.com/data/icons/rcons-user/32/user_group_users_accounts_contacts-512.png |
    |  2 | Sandeep   | E        | sandeep  | sandeepeswar8@gmail.com       | 919739040038 | https://cdn4.iconfinder.com/data/icons/eldorado-user/40/user-512.png                            |
    |  3 | Darshan   | Sidar    | darshan  | sidardarshan@gmail.com        | 917996917565 | https://cdn4.iconfinder.com/data/icons/rcons-user/32/child_boy-512.png                          |
    |  4 | Surendra  | Prajapat | surendra | surendrakgadwal@gmail.com     | 918385894407 | https://cdn4.iconfinder.com/data/icons/rcons-user/32/account_male-512.png                       |
    |  5 | Mukesh    | Jakhar   | mukesh   | mjakhar.kjakhar@gmail.com     | 919772254140 | https://cdn2.iconfinder.com/data/icons/rcons-user/32/male-circle-512.png                        |
    +----+-----------+----------+----------+-------------------------------+--------------+-------------------------------------------------------------------------------------------------+
    5 rows in set (0.00 sec)

    mysql> 
*/

package main

import ""log""
import ""net/http""
import ""encoding/json""

import (
    _""github.com/go-sql-driver/mysql""   
    ""database/sql""
)

func users(w http.ResponseWriter, r *http.Request) {
    // db, err := sql.Open(""mysql"", "":@tcp(127.0.0.1:)/?charset=utf8"" )
    db, err := sql.Open(""mysql"", ""hygull:admin@67@tcp(127.0.0.1:3306)/practice_db?charset=utf8"")

    w.Header().Set(""Content-Type"", ""application/json"")

    if err != nil {
        log.Fatal(err)
    }

    rows, err := db.Query(""select id, fname, lname, uname, email, contact, profile_pic from users"")

    if err != nil {
        log.Fatal(err)
    }

    type User struct {
        Id int       `json:""id""`
        Fname string `json:""firstname""`
        Lname string `json:""lastname""`
        Uname string `json:""username""`
        Email string `json:""email""`
        Contact int `json:""contact""`
        ProfilePic string `json:""profile_pic""`
    }

    var users []User

    for rows.Next() {
        var id, contact int
        var fname string
        var lname string
        var uname, email, profile_pic string

        rows.Scan(&id ,&fname, &lname, &uname, &email, &contact, &profile_pic)
        users = append(users, User{id, fname, lname, uname, email, contact, &profile_pic })
    }

    usersBytes, _ := json.Marshal(&users)

    w.Write(usersBytes)
    db.Close()
}

func main() {
    http.HandleFunc(""/users/"", users)
    http.ListenAndServe("":8080"", nil)
}

/* REQUSET

   http://127.0.0.1:8080/users/
*/

/* RESPONSE
[
  {
    ""id"": 1,
    ""firstname"": ""Rishikesh"",
    ""lastname"": ""Agrawani"",
    ""username"": ""hygull"",
    ""email"": ""rishikesh0014051992@gmail.com"",
    ""contact"": 917353787704,
    ""profile_pic"": ""https://cdn4.iconfinder.com/data/icons/rcons-user/32/user_group_users_accounts_contacts-512.png""
  },
  {
    ""id"": 2,
    ""firstname"": ""Sandeep"",
    ""lastname"": ""E"",
    ""username"": ""sandeep"",
    ""email"": ""sandeepeswar8@gmail.com"",
    ""contact"": 919739040038,
    ""profile_pic"": ""https://cdn4.iconfinder.com/data/icons/eldorado-user/40/user-512.png""
  },
  {
    ""id"": 3,
    ""firstname"": ""Darshan"",
    ""lastname"": ""Sidar"",
    ""username"": ""darshan"",
    ""email"": ""sidardarshan@gmail.com"",
    ""contact"": 917996917565,
    ""profile_pic"": ""https://cdn4.iconfinder.com/data/icons/rcons-user/32/child_boy-512.png""
  },
  {
    ""id"": 4,
    ""firstname"": ""Surendra"",
    ""lastname"": ""Prajapat"",
    ""username"": ""surendra"",
    ""email"": ""surendrakgadwal@gmail.com"",
    ""contact"": 918385894407,
    ""profile_pic"": ""https://cdn4.iconfinder.com/data/icons/rcons-user/32/account_male-512.png""
  },
  {
    ""id"": 5,
    ""firstname"": ""Mukesh"",
    ""lastname"": ""Jakhar"",
    ""username"": ""mukesh"",
    ""email"": ""mjakhar.kjakhar@gmail.com"",
    ""contact"": 919772254140,
    ""profile_pic"": ""https://cdn2.iconfinder.com/data/icons/rcons-user/32/male-circle-512.png""
  }
]
*/
",4941
1567,44579470,"package main

import (
    ""fmt""
    ""html/template""
    ""io""
    ""net/http""
    ""os""
    ""path/filepath""
    ""strings""

    ""google.golang.org/appengine""

    ""github.com/gorilla/sessions""
)

type IndexPage struct {
    Photos  []string
    LogedIn bool
}

type LoginPage struct {
    Body      string
    FirstName string
    LastName  string
    Email     string
    Error     string
}
type UploadPage struct {
    Error string
    Msg   string
}

func getPhotos() []string {
    photos := make([]string, 0)
    filepath.Walk(""assets/img"", func(path string, fi os.FileInfo, err error) error {
        if fi.IsDir() {
            return nil
        }
        path = strings.Replace(path, ""\\"", ""/"", -1)
        photos = append(photos, path)
        return nil
    })
    return photos
}

var store = sessions.NewCookieStore([]byte(""HelloWorld""))

func loginPage(res http.ResponseWriter, req *http.Request) {
    loginError := """"
    session, _ := store.Get(req, ""session"")
    str, _ := session.Values[""logged-in""].(string)
    if str == ""YES"" {
        http.Redirect(res, req, ""/admin"", 302)
        return
    }
    if req.Method == ""POST"" {
        email := req.FormValue(""email"")
        password := req.FormValue(""password"")
        if email == ""test@example.com"" && password == ""test"" {
            session.Values[""logged-in""] = ""YES""
            session.Save(req, res)
            http.Redirect(res, req, ""/admin"", 302)
            return
        } else {
            loginError = ""Invalid Credential. Please Resubmit""
        }
    }
    tpl, err := template.ParseFiles(""assets/tpl/login.gohtml"", ""assets/tpl/header.gohtml"")
    if err != nil {
        http.Error(res, err.Error(), 500)
        return
    }
    err = tpl.Execute(res, LoginPage{
        Error: loginError,
    })
}

func admin(res http.ResponseWriter, req *http.Request) {
    uploadError := """"
    successMsg := """"
    session, _ := store.Get(req, ""session"")
    str, _ := session.Values[""logged-in""].(string)
    if str != ""YES"" {
        http.Redirect(res, req, ""/login"", 302)
        return
    }
    if req.Method == ""POST"" {
        // 
        src, hdr, err := req.FormFile(""file"")
        if err != nil {
            http.Error(res, ""Invalid File."", 500)
            return
        }

        defer src.Close()
        // create a new file
        // make sure you have a ""tmp"" directory in your web root
        dst, err := os.Create(""assets/img/"" + hdr.Filename)
        if err != nil {
            http.Error(res, err.Error(), 500)
            return
        }

        defer dst.Close()

        // copy the uploaded file into the new file
        io.Copy(dst, src)
    }
    tpl, err := template.ParseFiles(""assets/tpl/admin.gohtml"", ""assets/tpl/header.gohtml"")
    if err != nil {
        http.Error(res, err.Error(), 500)
        return
    }
    err = tpl.Execute(res, UploadPage{
        Error: uploadError,
        Msg:   successMsg,
    })
    if err != nil {
        http.Error(res, err.Error(), 500)
    }
}

func index(res http.ResponseWriter, req *http.Request) {
    session, _ := store.Get(req, ""session"")
    str, _ := session.Values[""logged-in""].(string)
    logged := false
    if str == ""YES"" {
        logged = true
    }

    tpl, err := template.ParseFiles(""assets/tpl/index.gohtml"", ""assets/tpl/header.gohtml"")
    if err != nil {
        fmt.Println(err)
        http.Error(res, err.Error(), 500)
        return
    }
    err = tpl.Execute(res, IndexPage{
        Photos:  getPhotos(),
        LogedIn: logged,
    })
    if err != nil {
        fmt.Println(err)
        http.Error(res, err.Error(), 500)
    }
}

func logout(res http.ResponseWriter, req *http.Request) {
    session, _ := store.Get(req, ""session"")
    str, _ := session.Values[""logged-in""].(string)
    if str == ""YES"" {
        delete(session.Values, ""logged-in"")
        session.Save(req, res)
        http.Redirect(res, req, ""/"", 302)
    } else {
        http.Redirect(res, req, ""/login"", 302)
    }
}

func deletePic(res http.ResponseWriter, req *http.Request) {
    session, _ := store.Get(req, ""session"")
    str, _ := session.Values[""logged-in""].(string)
    if str != ""YES"" {
        http.Redirect(res, req, ""/"", 302)
        return
    }

    if req.Method == ""POST"" {
        imgName := req.FormValue(""imgName"")
        err := os.Remove(imgName)
        if err != nil {
            http.Error(res, err.Error(), 500)
        }
    }

    tpl, err := template.ParseFiles(""assets/tpl/delete.gohtml"", ""assets/tpl/header.gohtml"")
    if err != nil {
        http.Error(res, err.Error(), 500)
    }
    err = tpl.Execute(res, IndexPage{
        Photos: getPhotos(),
    })
    if err != nil {
        http.Error(res, err.Error(), 500)
    }
}

func main() {
    http.HandleFunc(""/delete"", deletePic)
    http.Handle(""/assets/"", http.StripPrefix(""/assets"", http.FileServer(http.Dir(""./assets""))))
    http.HandleFunc(""/"", index)
    http.HandleFunc(""/admin"", admin)
    http.HandleFunc(""/login"", loginPage)
    http.HandleFunc(""/logout"", logout)
    appengine.Main()
}
",5052
1568,44579470,"runtime: go
env: flex
",22
1569,44580389,"package main

import (
    ""encoding/xml""
    ""fmt""
    ""io/ioutil""
    ""os""
)

type Query struct {
    rpc Rpc_reply `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 rpc-reply,omitempty"" json:""rpc-reply,omitempty""`
}

type Addr_tag_list struct {
    Addr_tag Addr_tag `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 addr,omitempty"" json:""addr,omitempty""`
    Pref_tag Pref_tag `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 pref,omitempty"" json:""pref,omitempty""`
    Tag Tag `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 tag,omitempty"" json:""tag,omitempty""`
    Type_tag Type_tag `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 type,omitempty"" json:""type,omitempty""`
    VpcPeer_tag VpcPeer_tag `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 vpcPeer,omitempty"" json:""vpcPeer,omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 Addr-list,omitempty"" json:""Addr-list,omitempty""`
}

type Dom_list struct {
    If_items If_items `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 if-items,omitempty"" json:""if-items,omitempty""`
    Name_tag Name_tag `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 name,omitempty"" json:""name,omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 Dom-list,omitempty"" json:""Dom-list,omitempty""`
}

type If_list struct {
    Addr_items_tag Addr_items_tag `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 addr-items,omitempty"" json:""addr-items,omitempty""`
    Id_tag Id_tag `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 id,omitempty"" json:""id,omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 If-list,omitempty"" json:""If-list,omitempty""`
}

type Systemtag struct {
    Ipv4_items Ipv4_items `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 ipv4-items,omitempty"" json:""ipv4-items,omitempty""`
    Test_name Test_name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 test-name,omitempty"" json:""test-name,omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 System,omitempty"" json:""System,omitempty""`
}

type Addr_tag struct {
    Text string `xml:"",chardata"" json:"",omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 addr,omitempty"" json:""addr,omitempty""`
}

type Addr_items_tag struct {
    Addr_tag_list Addr_tag_list `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 Addr-list,omitempty"" json:""Addr-list,omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 addr-items,omitempty"" json:""addr-items,omitempty""`
}

type Data_tag struct {
    Systemtag Systemtag `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 System,omitempty"" json:""System,omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 data,omitempty"" json:""data,omitempty""`
}

type Dom_items struct {
    Dom_list []Dom_list `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 Dom-list,omitempty"" json:""Dom-list,omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 dom-items,omitempty"" json:""dom-items,omitempty""`
}

type Id_tag struct {
    Text string `xml:"",chardata"" json:"",omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 id,omitempty"" json:""id,omitempty""`
}

type If_items struct {
    If_list []If_list `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 If-list,omitempty"" json:""If-list,omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 if-items,omitempty"" json:""if-items,omitempty""`
}

type Inst_items struct {
    Dom_items Dom_items `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 dom-items,omitempty"" json:""dom-items,omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 inst-items,omitempty"" json:""inst-items,omitempty""`
}

type Ipv4_items struct {
    Inst_items Inst_items `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 inst-items,omitempty"" json:""inst-items,omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 ipv4-items,omitempty"" json:""ipv4-items,omitempty""`
}

type Name_tag struct {
    Text string `xml:"",chardata"" json:"",omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 name,omitempty"" json:""name,omitempty""`
}

type Pref_tag struct {
    Text bool `xml:"",chardata"" json:"",omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 pref,omitempty"" json:""pref,omitempty""`
}

type Rpc_reply struct {
    Attr_message_id string `xml:"" message-id,attr""  json:"",omitempty""`
    Attr_xmlns string `xml:"" xmlns,attr""  json:"",omitempty""`
    Data_tag Data_tag `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 data,omitempty"" json:""data,omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 rpc-reply,omitempty"" json:""rpc-reply,omitempty""`
}

type Tag struct {
    Text bool `xml:"",chardata"" json:"",omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 tag,omitempty"" json:""tag,omitempty""`
}

type Type_tag struct {
    Text string `xml:"",chardata"" json:"",omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 type,omitempty"" json:""type,omitempty""`
}

type VpcPeer_tag struct {
    Text string `xml:"",chardata"" json:"",omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 vpcPeer,omitempty"" json:""vpcPeer,omitempty""`
}

type Test_name struct {
    Text string `xml:"",chardata"" json:"",omitempty""`
    XMLName  xml.Name `xml:""urn:ietf:params:xml:ns:netconf:base:1.0 test-name,omitempty"" json:""test-name,omitempty""`
}


func main() {
    xmlFile, err := os.Open(""interface.xml"")
    if err != nil {
        fmt.Println(""Error opening file:"", err)
        return
    }
    defer xmlFile.Close()

    b, _ := ioutil.ReadAll(xmlFile)

    var q Query
    err2 := xml.Unmarshal(b, &q)
    if err2 != nil {
        fmt.Printf(""error: %v"", err2)
        return
    }
    fmt.Println(q)
    //fmt.Printf(""%#v"",q)
     fmt.Printf(""%s"",q.rpc.Attr_message_id);

}
",5886
1570,44580389,"

  
    
     ##WORK##
      
        
          
            
              default
              
                
                  eth5/8
                  
                    
                      1.1.1.1
                      1
                      0
                      primary
                      0.0.0.0
                    
                  
                
                
              
               
              management
              
                
                  eth5/8
                  
                    
                      11.11.11.11
                      1
                      0
                      primary
                      0.0.0.0
                    
                  
                
                
              
              
        
      
    
  
",865
1571,44605108,"C:\Go\pkg\tool\windows_amd64\link.exe: running gcc failed: exit status 1
/usr/lib/w32api/libntdll.a(dmsqs01966.o):(.text+0x0): multiple definition of `pow'
/usr/lib/gcc/x86_64-pc-cygwin/5.4.0/../../../../lib/libm.a(t-d000990.o):fake:(.text+0x0): first defined here
/usr/lib/w32api/libntdll.a(dmsqs01956.o):(.text+0x0): multiple definition of `log'
/usr/lib/gcc/x86_64-pc-cygwin/5.4.0/../../../../lib/libm.a(t-d000824.o):fake:(.text+0x0): first defined here
/usr/lib/w32api/libntdll.a(dmsqs01934.o):(.text+0x0): multiple definition of `ceil'
/usr/lib/gcc/x86_64-pc-cygwin/5.4.0/../../../../lib/libm.a(t-d000253.o):fake:(.text+0x0): first defined here
C:\cygwin64\tmp\go-link-845985599/000001.o: In function `x_cgo_sys_thread_create':
C:/workdir/go/src/runtime/cgo/gcc_libinit_windows.c:12: undefined reference to `__imp___iob_func'
C:/workdir/go/src/runtime/cgo/gcc_libinit_windows.c:12:(.text+0x6): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `__imp___iob_func'
C:\cygwin64\tmp\go-link-845985599/000001.o: In function `x_cgo_thread_start':
C:/workdir/go/src/runtime/cgo/gcc_util.c:43: undefined reference to `__imp___iob_func'
C:/workdir/go/src/runtime/cgo/gcc_util.c:43:(.text+0xdc): relocation truncated 
",1231
1572,44605108,"C:\Go\pkg\tool\windows_amd64\link.exe: running gcc failed: exit status 1
C:\cygwin64\tmp\go-link-485496143\000001.o: In function `_cgo_preinit_init':
C:/workdir/go/src/runtime/cgo/gcc_libinit_windows.c:28: undefined reference to `__imp___iob_func'
C:/workdir/go/src/runtime/cgo/gcc_libinit_windows.c:28:(.text+0x6a): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `__imp___iob_func'
C:\cygwin64\tmp\go-link-485496143\000001.o: In function `x_cgo_sys_thread_create':
C:/workdir/go/src/runtime/cgo/gcc_libinit_windows.c:56: undefined reference to `__imp__beginthread'
C:/workdir/go/src/runtime/cgo/gcc_libinit_windows.c:56:(.text+0x10c): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `__imp__beginthread'
C:/workdir/go/src/runtime/cgo/gcc_libinit_windows.c:58: undefined reference to `__imp__errno'
C:/workdir/go/src/runtime/cgo/gcc_libinit_windows.c:58:(.text+0x11e): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `__imp__errno'
C:/workdir/go/src/runtime/cgo/gcc_libinit_windows.c:58: undefined reference to `__imp___iob_func'
C:/workdir/go/src/runtime/cgo/gcc_libinit_windows.c:58:(.text+0x126): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `__imp___iob_func'
C:\cygwin64\tmp\go-link-485496143\000001.o: In function `x_cgo_notify_runtime_init_done':
C:/workdir/go/src/runtime/cgo/gcc_libinit_windows.c:99: undefined reference to `__imp___iob_func'
C:/workdir/go/src/runtime/cgo/gcc_libinit_windows.c:99:(.text+0x255): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `__imp___iob_func'
C:\cygwin64\tmp\go-link-485496143\000001.o: In function `x_cgo_thread_start':
C:/workdir/go/src/runtime/cgo/gcc_util.c:18: undefined reference to `__imp___iob_func'
C:/workdir/go/src/runtime/cgo/gcc_util.c:18:(.text+0x32c): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `__imp___iob_func'
C:\cygwin64\tmp\go-link-485496143\000001.o: In function `_cgo_sys_thread_start':
C:/workdir/go/src/runtime/cgo/gcc_windows_amd64.c:32: undefined reference to `__imp__beginthread'
C:/workdir/go/src/runtime/cgo/gcc_windows_amd64.c:32:(.text+0x403): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `__imp__beginthread'
C:/workdir/go/src/runtime/cgo/gcc_windows_amd64.c:34: undefined reference to `__imp__errno'
C:/workdir/go/src/runtime/cgo/gcc_windows_amd64.c:34:(.text+0x415): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `__imp__errno'
C:/workdir/go/src/runtime/cgo/gcc_windows_amd64.c:34: undefined reference to `__imp___iob_func'
C:/workdir/go/src/runtime/cgo/gcc_windows_amd64.c:34:(.text+0x41d): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `__imp___iob_func'
/usr/lib/gcc/x86_64-pc-cygwin/5.4.0/../../../../lib/libmingwex.a(lib64_libmingwex_a-ftruncate.o):ftruncate.c:(.text+0x1): undefined reference to `_chsize'
/usr/lib/gcc/x86_64-pc-cygwin/5.4.0/../../../../lib/libmingwex.a(lib64_libmingwex_a-ftruncate.o):ftruncate.c:(.text+0x1): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `_chsize'
/usr/lib/gcc/x86_64-pc-cygwin/5.4.0/../../../../lib/libmingwex.a(lib64_libmingwex_a-_fstat.o):_fstat.c:(.text+0xf): undefined reference to `_fstat64'
/usr/lib/gcc/x86_64-pc-cygwin/5.4.0/../../../../lib/libmingwex.a(lib64_libmingwex_a-_fstat.o):_fstat.c:(.text+0xf): additional relocation overflows omitted from the output
/usr/lib/gcc/x86_64-pc-cygwin/5.4.0/../../../../lib/libmingwex.a(lib64_libmingwex_a-log.o):log.c:(.text+0x83): undefined reference to `_errno'
/usr/lib/gcc/x86_64-pc-
",3578
1573,44614413,"var NodeRSA = require('node-rsa');

var ClientSide = new NodeRSA({ b: 512 });
var privateKey = `-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAj1IEeouqDYiMX0rMiPAI64UntzNxE01+tB+k+aKesHzVXE5A
GnyWHIFdrByfjR93CMh3y56xsL78VP1/Xp8iVmAnbiFN5kpmawJ1owhDvNIl8A+Q
UiDzMg0z/yepzjp61Dg4CUFzGrmTfYO1aMWyWhR0ZKfy+HvVaGjpod2ioScU7Fkz
eO+fDR85quLFta7OXDwqD4NCPYeZTS5fgK1Nn72nrItoj5e36fzWvZntfvi4NHt7
nqOj4VH5e5YJHvmLWHh5Swh+OVyIAwhxYSK5PSupicGG8ixVy75hkjzZ2vW5JdVW
MPYbVUMpqjtE+i1zQTYNJ36hM/zznZR/drU7UwIDAQABAoIBAHvs02qTMWuaUqZj
KxCNXWkpLfo/RNsH+zMM2b3xW34HswWps8wzRilHwxN7fIquVmMF1HAAvGyz98QV
nfjXaP1/DxkvOwiR9JU6/zUFhGzU2XEGRCh/zUnOGNPcG/vynRq7sdhu+3R0WpAB
Pu9lYp55aVtPzcwGZ7VsYfhQiLsGnJ5GkBS7z4P3aG29By6fGnTwR83iQHtR5SvQ
Rb/xJxZjTM00OZ2ssAtw24Hu8QXTuOAHdy2B5E1tsF+hVHs4iB0OiLzW7m4GBkb/
/og76ouB4G+j6IjG2E5TO0eAdslKn2w3dZRgqnVDF5CPtRdbAc83xOwSouuuqN26
FPsLkwECgYEA4Jyf3j9UzW0znnOcul4MDvfKuMCzD/5wnc24aYBbie4Joi/jqDbc
9J5jqyfgzdqwjxiwkEFJi7gBcclO1i1SoIfA6ooVoJeQlzdMpSytZVhzgE2aJO1E
ORP7kLimAHysjMJ27Fix1VRZltcZe0E9DErkw/hoPemAMvDvW2myyaECgYEAo1k7
iS4O9GSHUKvbEJWR5r+9Qvv4aObOaRFRDfq4/E9fZwujzKAvxwkGFXjxwpzxKJqN
paVEL2cWY+S46f4B501xgnNknuf6po8ZEaXD5vy281xoU4YX1KFySbV8eXGmkyiO
M2+vPGrsTGOIsKnQW8jmaxWTClbSdPoLWfwzqHMCgYAS/Kp2+xuMEgMfDd7d0j1q
tn+ohoGchIG4lT9Vi8gxLLIbx7iS67BZ7Vm3ijNys13hetDSIPK6oN9eYwoLCOHH
ODKSoQGbBbTvU3ljLRerTYLWAblaDcSKnqnRXgqKV/+uFnI/IHBH/E1mduBsjuM+
OsaD2mfVc/umUr+pFpJKgQKBgCeaTb3fhc6oxMnBMLZfnOT13Zvs3PgJ5UdB5IXg
IJNDZxzjjI3i1FKMFIaGMQ7+39T5S5g6bkKT2rDTViWc6Lc8ZmW7Nkz0byeMkAZg
SxOod26fG8gMPaDWl4/ZSVlkPX92GKvNyw152tpWU2CJezOVjI+vxlt+Wz3zFWd2
psuTAoGAbdlzYFK+7e2ru8fdbVk9SBLn9cnPdDCx+wgJV7dB0zzSh1oqIrE766Mx
c9wBIKWNqNEsFsFI4ejuMRdC4Hyc6ecCNea3nj3BHCS70V0p1MtFII6SpADDqBTW
3ZnLfcN2MiFDBXVqNkCsMcqd8KVdzEqEy1JDplmW84OpfQu88ms=
-----END RSA PRIVATE KEY-----`
var publicKey = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAj1IEeouqDYiMX0rMiPAI
64UntzNxE01+tB+k+aKesHzVXE5AGnyWHIFdrByfjR93CMh3y56xsL78VP1/Xp8i
VmAnbiFN5kpmawJ1owhDvNIl8A+QUiDzMg0z/yepzjp61Dg4CUFzGrmTfYO1aMWy
WhR0ZKfy+HvVaGjpod2ioScU7FkzeO+fDR85quLFta7OXDwqD4NCPYeZTS5fgK1N
n72nrItoj5e36fzWvZntfvi4NHt7nqOj4VH5e5YJHvmLWHh5Swh+OVyIAwhxYSK5
PSupicGG8ixVy75hkjzZ2vW5JdVWMPYbVUMpqjtE+i1zQTYNJ36hM/zznZR/drU7
UwIDAQAB
-----END PUBLIC KEY-----`

ClientSide.importKey(privateKey, 'pkcs1');
let result = ClientSide.sign('test_message', 'base64')

console.log(result)

var serverSide = new NodeRSA({ b: 512 });
serverSide.importKey(publicKey, 'pkcs8-public');
console.log(serverSide.verify('test_message', new Buffer(result, 'base64')))
",2530
1574,44614413,"baU/46UJYUp6Xt6sYs306t1vQdUOBRg10YuJPKspwLYj3aJHMgeQXMSfvBKvS+PJ3CMSVMVVjvoweNRu7A6ZzCSyVub9+qv0u5/2vSdUqiLDSHP5Gj9CRxsWPTLnapS27CJh3ywhqfgkuOSt6RZYTXqqoraHMP2jmGjfdLQmJbPiWamOc20u7xeTHK8oRmpXV0Pi5w4+7E6CkyfF9EfpLmmGGYiKqOWriWhYFbqkp+OV7FY4WRN1KwtmcZcnlWZ/4wAzg9uDL+8ZGyWKq62JY6Ee8LO5u6FCG7lU3KqBdq4eFKYI3CM9wdrxoZ7kNUlq0tQGZQ++MihdZQOfwj1vSA==

true
",351
1575,44614413,"package main

import (
  ""crypto""
  ""crypto/rsa""
  ""crypto/x509""
  ""encoding/base64""
  ""encoding/pem""
  ""errors""
  ""fmt""
  ""os""
)

func main() {

  toSign := ""test_message""

  signed, err := base64.StdEncoding.DecodeString(""baU/46UJYUp6Xt6sYs306t1vQdUOBRg10YuJPKspwLYj3aJHMgeQXMSfvBKvS+PJ3CMSVMVVjvoweNRu7A6ZzCSyVub9+qv0u5/2vSdUqiLDSHP5Gj9CRxsWPTLnapS27CJh3ywhqfgkuOSt6RZYTXqqoraHMP2jmGjfdLQmJbPiWamOc20u7xeTHK8oRmpXV0Pi5w4+7E6CkyfF9EfpLmmGGYiKqOWriWhYFbqkp+OV7FY4WRN1KwtmcZcnlWZ/4wAzg9uDL+8ZGyWKq62JY6Ee8LO5u6FCG7lU3KqBdq4eFKYI3CM9wdrxoZ7kNUlq0tQGZQ++MihdZQOfwj1vSA=="")
  if err != nil {
    println(""unable do decode"")
    os.Exit(1)
  }

  parser, err := loadPublicKey()
  if err != nil {
    println(""unable to load public key"")
    os.Exit(1)
  }

  err = parser.Unsign([]byte(toSign), signed)
  if err != nil {
    println(""unable to verify"")
    os.Exit(1)
  }

}

func loadPublicKey() (Unsigner, error) {

  return parsePublicKey([]byte(`-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAj1IEeouqDYiMX0rMiPAI
64UntzNxE01+tB+k+aKesHzVXE5AGnyWHIFdrByfjR93CMh3y56xsL78VP1/Xp8i
VmAnbiFN5kpmawJ1owhDvNIl8A+QUiDzMg0z/yepzjp61Dg4CUFzGrmTfYO1aMWy
WhR0ZKfy+HvVaGjpod2ioScU7FkzeO+fDR85quLFta7OXDwqD4NCPYeZTS5fgK1N
n72nrItoj5e36fzWvZntfvi4NHt7nqOj4VH5e5YJHvmLWHh5Swh+OVyIAwhxYSK5
PSupicGG8ixVy75hkjzZ2vW5JdVWMPYbVUMpqjtE+i1zQTYNJ36hM/zznZR/drU7
UwIDAQAB
-----END PUBLIC KEY-----`))
}

func parsePublicKey(pemBytes []byte) (Unsigner, error) {
  block, _ := pem.Decode(pemBytes)
  if block == nil {
    return nil, errors.New(""ssh: no key found"")
  }

  var rawkey interface{}
  switch block.Type {
  case ""PUBLIC KEY"":
    rsa, err := x509.ParsePKIXPublicKey(block.Bytes)
    if err != nil {
      return nil, err
    }
    rawkey = rsa
  default:
    return nil, fmt.Errorf(""ssh: unsupported key type %q"", block.Type)
  }

  return newUnsignerFromKey(rawkey)
}

type Unsigner interface {
  // Sign returns raw signature for the given data. This method
  // will apply the hash specified for the keytype to the data.
  Unsign(data []byte, sig []byte) error
}

func newUnsignerFromKey(k interface{}) (Unsigner, error) {
  var sshKey Unsigner
  switch t := k.(type) {
  case *rsa.PublicKey:
    sshKey = &rsaPublicKey{t}
  default:
    return nil, fmt.Errorf(""ssh: unsupported key type %T"", k)
  }
  return sshKey, nil
}

type rsaPublicKey struct {
  *rsa.PublicKey
}

func (r *rsaPublicKey) Unsign(message []byte, sig []byte) error {
  var opts rsa.PSSOptions
  opts.SaltLength = rsa.PSSSaltLengthAuto
  PSSmessage := message
  newhash := crypto.SHA256
  pssh := newhash.New()
  pssh.Write(PSSmessage)
  hashed := pssh.Sum(nil)
  return rsa.VerifyPSS(r.PublicKey, newhash, hashed, sig, &opts)
}
",2711
1576,44625610,"goroutine profile: total 32685

1 @ 0x42fd33 0x42a7ee 0x429cb0 0x629fba 0x62a086 0x62d084 0x640964 0x5e6306 0x73b75b 0x73b0b2 0x744660 0x5f13ea 0x5fbc12 0x5f8dd0 0x5ffd9f 0x48dcea 0x5f729f 0x460ae1
#   0x429cb0    net.runtime_pollWait+0x60                       /usr/local/go/src/runtime/netpoll.go:160
#   0x629fba    net.(*pollDesc).Wait+0x3a                       /usr/local/go/src/net/fd_poll_runtime.go:73
#   0x62a086    net.(*pollDesc).WaitWrite+0x36                      /usr/local/go/src/net/fd_poll_runtime.go:82
#   0x62d084    net.(*netFD).Write+0x414                        /usr/local/go/src/net/fd_unix.go:336
#   0x640964    net.(*conn).Write+0xe4                          /usr/local/go/src/net/net.go:184
#   0x5e6306    github.com/moonfrog/heimdall/network.(*Messenger).WriteMessage+0x86 /home/rts/gopath/src/github.com/moonfrog/heimdall/network/messenger.go:40
#   0x73b75b    github.com/moonfrog/heimdall/service.(*Service).sendPacket+0x55b    /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:91
#   0x73b0b2    github.com/moonfrog/heimdall/service.(*Service).Send+0x442      /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:79
#   0x744660    github.com/moonfrog/heimdall/service/manager.(*Sticky).Send+0x5e0   /home/rts/gopath/src/github.com/moonfrog/heimdall/service/manager/sticky.go:91
#   0x5f13ea    github.com/moonfrog/heimdall/serviceController.(*Controller).Send+0x22a /home/rts/gopath/src/github.com/moonfrog/heimdall/serviceController/controller.go:169
#   0x5fbc12    github.com/moonfrog/heimdall/client.(*Client).sendToService+0x482   /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:452
#   0x5f8dd0    github.com/moonfrog/heimdall/client.(*Client).process+0xfd0     /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:256
#   0x5ffd9f    github.com/moonfrog/heimdall/client.(*Client).stateMachine.func1+0x3f   /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:136
#   0x48dcea    github.com/moonfrog/heimdall/common.Safe+0x3a               /home/rts/gopath/src/github.com/moonfrog/heimdall/common/utils.go:49
#   0x5f729f    github.com/moonfrog/heimdall/client.(*Client).stateMachine+0x1df    /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:137

1 @ 0x460ae1

1148 @ 0x42fd33 0x42fdf4 0x43f877 0x43f506 0x6299cc 0x62b7d9 0x62ccdc 0x640964 0x5e6306 0x73b75b 0x73cb72 0x74475e 0x5f1ea3 0x491dac 0x491c99 0x5fa486 0x5f7467 0x460ae1
#   0x43f506    net.runtime_Semacquire+0x26                         /usr/local/go/src/runtime/sema.go:52
#   0x6299cc    net.(*fdMutex).RWLock+0x16c                         /usr/local/go/src/net/fd_mutex.go:143
#   0x62b7d9    net.(*netFD).writeLock+0x39                         /usr/local/go/src/net/fd_unix.go:194
#   0x62ccdc    net.(*netFD).Write+0x6c                             /usr/local/go/src/net/fd_unix.go:319
#   0x640964    net.(*conn).Write+0xe4                              /usr/local/go/src/net/net.go:184
#   0x5e6306    github.com/moonfrog/heimdall/network.(*Messenger).WriteMessage+0x86     /home/rts/gopath/src/github.com/moonfrog/heimdall/network/messenger.go:40
#   0x73b75b    github.com/moonfrog/heimdall/service.(*Service).sendPacket+0x55b        /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:91
#   0x73cb72    github.com/moonfrog/heimdall/service.(*Service).OnDisconnect+0xb2       /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:179
#   0x74475e    github.com/moonfrog/heimdall/service/manager.(*Sticky).Disconnect+0x5e      /home/rts/gopath/src/github.com/moonfrog/heimdall/service/manager/sticky.go:97
#   0x5f1ea3    github.com/moonfrog/heimdall/serviceController.(*Controller).OnDisconnect+0x393 /home/rts/gopath/src/github.com/moonfrog/heimdall/serviceController/controller.go:210
#   0x491dac    github.com/moonfrog/heimdall/router.(*Router).onDisconnect+0x8c         /home/rts/gopath/src/github.com/moonfrog/heimdall/router/router.go:151
#   0x491c99    github.com/moonfrog/heimdall/router.(*Router).UnregisterClient+0x309        /home/rts/gopath/src/github.com/moonfrog/heimdall/router/router.go:146
#   0x5fa486    github.com/moonfrog/heimdall/client.(*Client).disconnect+0x206          /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:329
#   0x5f7467    github.com/moonfrog/heimdall/client.(*Client).stateMachine+0x3a7        /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:150

11385 @ 0x42fd33 0x43e9f7 0x43df52 0x5fc6df 0x49181f 0x5faae9 0x5f94bf 0x5f8cdb 0x5ffd9f 0x48dcea 0x5f729f 0x460ae1
#   0x5fc6df    github.com/moonfrog/heimdall/client.(*Client).ForceDisconnect+0xdf  /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:502
#   0x49181f    github.com/moonfrog/heimdall/router.(*Router).RegisterClient+0x7af  /home/rts/gopath/src/github.com/moonfrog/heimdall/router/router.go:114
#   0x5faae9    github.com/moonfrog/heimdall/client.(*Client).join+0x5e9        /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:379
#   0x5f94bf    github.com/moonfrog/heimdall/client.(*Client).handleRouterMsg+0x61f /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:265
#   0x5f8cdb    github.com/moonfrog/heimdall/client.(*Client).process+0xedb     /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:254
#   0x5ffd9f    github.com/moonfrog/heimdall/client.(*Client).stateMachine.func1+0x3f   /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:136
#   0x48dcea    github.com/moonfrog/heimdall/common.Safe+0x3a               /home/rts/gopath/src/github.com/moonfrog/heimdall/common/utils.go:49
#   0x5f729f    github.com/moonfrog/heimdall/client.(*Client).stateMachine+0x1df    /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:137

1 @ 0x42fd33 0x42fdf4 0x43f877 0x43f4c6 0x4c6d64 0x6f9081 0x704b71 0x460ae1
#   0x43f4c6    sync.runtime_Semacquire+0x26                /usr/local/go/src/runtime/sema.go:47
#   0x4c6d64    sync.(*WaitGroup).Wait+0xb4             /usr/local/go/src/sync/waitgroup.go:127
#   0x6f9081    github.com/samuel/go-zookeeper/zk.(*Conn).loop+0x8c1    /home/rts/gopath/src/github.com/samuel/go-zookeeper/zk/conn.go:436
#   0x704b71    github.com/samuel/go-zookeeper/zk.Connect.func1+0x21    /home/rts/gopath/src/github.com/samuel/go-zookeeper/zk/conn.go:218

11343 @ 0x42fd33 0x43e9f7 0x43df52 0x5f70ab 0x460ae1
#   0x5f70ab    github.com/moonfrog/heimdall/client.(*Client).readPump+0x70b    /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:111

4332 @ 0x42fd33 0x43e9f7 0x43df52 0x5f6d54 0x460ae1
#   0x5f6d54    github.com/moonfrog/heimdall/client.(*Client).readPump+0x3b4    /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:104

1438 @ 0x42fd33 0x42fdf4 0x43f877 0x43f506 0x6299cc 0x62b7d9 0x62ccdc 0x640964 0x5e6306 0x73b75b 0x73ca92 0x7447ee 0x5f1fd4 0x491897 0x5faae9 0x5f94bf 0x5f8cdb 0x5ffd9f 0x48dcea 0x5f729f 0x460ae1
#   0x43f506    net.runtime_Semacquire+0x26                         /usr/local/go/src/runtime/sema.go:52
#   0x6299cc    net.(*fdMutex).RWLock+0x16c                         /usr/local/go/src/net/fd_mutex.go:143
#   0x62b7d9    net.(*netFD).writeLock+0x39                         /usr/local/go/src/net/fd_unix.go:194
#   0x62ccdc    net.(*netFD).Write+0x6c                             /usr/local/go/src/net/fd_unix.go:319
#   0x640964    net.(*conn).Write+0xe4                              /usr/local/go/src/net/net.go:184
#   0x5e6306    github.com/moonfrog/heimdall/network.(*Messenger).WriteMessage+0x86     /home/rts/gopath/src/github.com/moonfrog/heimdall/network/messenger.go:40
#   0x73b75b    github.com/moonfrog/heimdall/service.(*Service).sendPacket+0x55b        /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:91
#   0x73ca92    github.com/moonfrog/heimdall/service.(*Service).OnReconnect+0xb2        /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:171
#   0x7447ee    github.com/moonfrog/heimdall/service/manager.(*Sticky).Reconnect+0x5e       /home/rts/gopath/src/github.com/moonfrog/heimdall/service/manager/sticky.go:105
#   0x5f1fd4    github.com/moonfrog/heimdall/serviceController.(*Controller).OnReconnect+0xd4   /home/rts/gopath/src/github.com/moonfrog/heimdall/serviceController/controller.go:218
#   0x491897    github.com/moonfrog/heimdall/router.(*Router).RegisterClient+0x827      /home/rts/gopath/src/github.com/moonfrog/heimdall/router/router.go:116
#   0x5faae9    github.com/moonfrog/heimdall/client.(*Client).join+0x5e9            /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:379
#   0x5f94bf    github.com/moonfrog/heimdall/client.(*Client).handleRouterMsg+0x61f     /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:265
#   0x5f8cdb    github.com/moonfrog/heimdall/client.(*Client).process+0xedb         /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:254
#   0x5ffd9f    github.com/moonfrog/heimdall/client.(*Client).stateMachine.func1+0x3f       /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:136
#   0x48dcea    github.com/moonfrog/heimdall/common.Safe+0x3a                   /home/rts/gopath/src/github.com/moonfrog/heimdall/common/utils.go:49
#   0x5f729f    github.com/moonfrog/heimdall/client.(*Client).stateMachine+0x1df        /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:137

18 @ 0x42fd33 0x43e9f7 0x43df52 0x73fbab 0x460ae1
#   0x73fbab    github.com/moonfrog/heimdall/service.(*Service).startHB.func1+0x23b /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:241

1 @ 0x42fd33 0x42fdf4 0x4061ef 0x405d0b 0x587454 0x460ae1
#   0x587454    github.com/moonfrog/badger/lib/stats/serverside/golang.(*Client).startScheduler+0x94    /home/rts/gopath/src/github.com/moonfrog/badger/lib/stats/serverside/golang/client.go:182

1 @ 0x42fd33 0x42a7ee 0x429cb0 0x629fba 0x62a026 0x62dcbc 0x64bbfd 0x54d121 0x54c2b9 0x54c106 0x54c808 0x5807ac 0x460ae1
#   0x429cb0    net.runtime_pollWait+0x60                   /usr/local/go/src/runtime/netpoll.go:160
#   0x629fba    net.(*pollDesc).Wait+0x3a                   /usr/local/go/src/net/fd_poll_runtime.go:73
#   0x62a026    net.(*pollDesc).WaitRead+0x36                   /usr/local/go/src/net/fd_poll_runtime.go:78
#   0x62dcbc    net.(*netFD).accept+0x27c                   /usr/local/go/src/net/fd_unix.go:426
#   0x64bbfd    net.(*TCPListener).AcceptTCP+0x4d               /usr/local/go/src/net/tcpsock_posix.go:254
#   0x54d121    net/http.tcpKeepAliveListener.Accept+0x41           /usr/local/go/src/net/http/server.go:2427
#   0x54c2b9    net/http.(*Server).Serve+0x129                  /usr/local/go/src/net/http/server.go:2117
#   0x54c106    net/http.(*Server).ListenAndServe+0x136             /usr/local/go/src/net/http/server.go:2098
#   0x54c808    net/http.ListenAndServe+0x98                    /usr/local/go/src/net/http/server.go:2195
#   0x5807ac    github.com/moonfrog/heimdall/debugger.(*Debugger).Start+0x55c   /home/rts/gopath/src/github.com/moonfrog/heimdall/debugger/debugger.go:89

2361 @ 0x42fd33 0x42fdf4 0x43f877 0x43f4c6 0x4c65b8 0x5f2066 0x5f9d26 0x5f8cdb 0x5ffd9f 0x48dcea 0x5f729f 0x460ae1
#   0x43f4c6    sync.runtime_Semacquire+0x26                            /usr/local/go/src/runtime/sema.go:47
#   0x4c65b8    sync.(*RWMutex).RLock+0x58                          /usr/local/go/src/sync/rwmutex.go:37
#   0x5f2066    github.com/moonfrog/heimdall/serviceController.(*Controller).OnConnect+0x46 /home/rts/gopath/src/github.com/moonfrog/heimdall/serviceController/controller.go:224
#   0x5f9d26    github.com/moonfrog/heimdall/client.(*Client).handleRouterMsg+0xe86     /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:284
#   0x5f8cdb    github.com/moonfrog/heimdall/client.(*Client).process+0xedb         /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:254
#   0x5ffd9f    github.com/moonfrog/heimdall/client.(*Client).stateMachine.func1+0x3f       /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:136
#   0x48dcea    github.com/moonfrog/heimdall/common.Safe+0x3a                   /home/rts/gopath/src/github.com/moonfrog/heimdall/common/utils.go:49
#   0x5f729f    github.com/moonfrog/heimdall/client.(*Client).stateMachine+0x1df        /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:137

387 @ 0x42fd33 0x42fdf4 0x43f877 0x43f506 0x6299cc 0x62b7d9 0x62ccdc 0x640964 0x5e6306 0x73b75b 0x73b0b2 0x744660 0x5f13ea 0x5fbc12 0x5f8dd0 0x5ffd9f 0x48dcea 0x5f729f 0x460ae1
#   0x43f506    net.runtime_Semacquire+0x26                     /usr/local/go/src/runtime/sema.go:52
#   0x6299cc    net.(*fdMutex).RWLock+0x16c                     /usr/local/go/src/net/fd_mutex.go:143
#   0x62b7d9    net.(*netFD).writeLock+0x39                     /usr/local/go/src/net/fd_unix.go:194
#   0x62ccdc    net.(*netFD).Write+0x6c                         /usr/local/go/src/net/fd_unix.go:319
#   0x640964    net.(*conn).Write+0xe4                          /usr/local/go/src/net/net.go:184
#   0x5e6306    github.com/moonfrog/heimdall/network.(*Messenger).WriteMessage+0x86 /home/rts/gopath/src/github.com/moonfrog/heimdall/network/messenger.go:40
#   0x73b75b    github.com/moonfrog/heimdall/service.(*Service).sendPacket+0x55b    /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:91
#   0x73b0b2    github.com/moonfrog/heimdall/service.(*Service).Send+0x442      /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:79
#   0x744660    github.com/moonfrog/heimdall/service/manager.(*Sticky).Send+0x5e0   /home/rts/gopath/src/github.com/moonfrog/heimdall/service/manager/sticky.go:91
#   0x5f13ea    github.com/moonfrog/heimdall/serviceController.(*Controller).Send+0x22a /home/rts/gopath/src/github.com/moonfrog/heimdall/serviceController/controller.go:169
#   0x5fbc12    github.com/moonfrog/heimdall/client.(*Client).sendToService+0x482   /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:452
#   0x5f8dd0    github.com/moonfrog/heimdall/client.(*Client).process+0xfd0     /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:256
#   0x5ffd9f    github.com/moonfrog/heimdall/client.(*Client).stateMachine.func1+0x3f   /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:136
#   0x48dcea    github.com/moonfrog/heimdall/common.Safe+0x3a               /home/rts/gopath/src/github.com/moonfrog/heimdall/common/utils.go:49
#   0x5f729f    github.com/moonfrog/heimdall/client.(*Client).stateMachine+0x1df    /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:137

1 @ 0x42fd33 0x42fdf4 0x43f877 0x43f4c6 0x4c67b1 0x5f3391 0x460ae1
#   0x43f4c6    sync.runtime_Semacquire+0x26                            /usr/local/go/src/runtime/sema.go:47
#   0x4c67b1    sync.(*RWMutex).Lock+0xa1                           /usr/local/go/src/sync/rwmutex.go:88
#   0x5f3391    github.com/moonfrog/heimdall/serviceController.(*Controller).monitor+0xc1   /home/rts/gopath/src/github.com/moonfrog/heimdall/serviceController/controller.go:286

1 @ 0x42fd33 0x42fdf4 0x43f877 0x43f506 0x6299cc 0x62b7d9 0x62ccdc 0x640964 0x5e6306 0x73b75b 0x73fb4c 0x460ae1
#   0x43f506    net.runtime_Semacquire+0x26                     /usr/local/go/src/runtime/sema.go:52
#   0x6299cc    net.(*fdMutex).RWLock+0x16c                     /usr/local/go/src/net/fd_mutex.go:143
#   0x62b7d9    net.(*netFD).writeLock+0x39                     /usr/local/go/src/net/fd_unix.go:194
#   0x62ccdc    net.(*netFD).Write+0x6c                         /usr/local/go/src/net/fd_unix.go:319
#   0x640964    net.(*conn).Write+0xe4                          /usr/local/go/src/net/net.go:184
#   0x5e6306    github.com/moonfrog/heimdall/network.(*Messenger).WriteMessage+0x86 /home/rts/gopath/src/github.com/moonfrog/heimdall/network/messenger.go:40
#   0x73b75b    github.com/moonfrog/heimdall/service.(*Service).sendPacket+0x55b    /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:91
#   0x73fb4c    github.com/moonfrog/heimdall/service.(*Service).startHB.func1+0x1dc /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:252

1 @ 0x42fd33 0x43e9f7 0x43df52 0x4558a8 0x460ae1
#   0x42fd33    runtime.gopark+0x163        /usr/local/go/src/runtime/proc.go:263
#   0x43e9f7    runtime.selectgoImpl+0xa67  /usr/local/go/src/runtime/select.go:392
#   0x43df52    runtime.selectgo+0x12       /usr/local/go/src/runtime/select.go:215
#   0x4558a8    runtime.ensureSigM.func1+0x358  /usr/local/go/src/runtime/signal1_unix.go:279

2 @ 0x42fd33 0x42a7ee 0x429cb0 0x629fba 0x62a026 0x62dcbc 0x64bbfd 0x5e6f16 0x460ae1
#   0x429cb0    net.runtime_pollWait+0x60                       /usr/local/go/src/runtime/netpoll.go:160
#   0x629fba    net.(*pollDesc).Wait+0x3a                       /usr/local/go/src/net/fd_poll_runtime.go:73
#   0x62a026    net.(*pollDesc).WaitRead+0x36                       /usr/local/go/src/net/fd_poll_runtime.go:78
#   0x62dcbc    net.(*netFD).accept+0x27c                       /usr/local/go/src/net/fd_unix.go:426
#   0x64bbfd    net.(*TCPListener).AcceptTCP+0x4d                   /usr/local/go/src/net/tcpsock_posix.go:254
#   0x5e6f16    github.com/moonfrog/heimdall/network.(*TCPServer).Start.func1+0x46  /home/rts/gopath/src/github.com/moonfrog/heimdall/network/tcpServer.go:22

12 @ 0x42fd33 0x42fdf4 0x43f877 0x43f506 0x6299cc 0x62b7d9 0x62ccdc 0x640964 0x5e6306 0x73b75b 0x73b0b2 0x744660 0x5f13ea 0x73c308 0x73f5cf 0x48dcea 0x73f89c 0x460ae1
#   0x43f506    net.runtime_Semacquire+0x26                     /usr/local/go/src/runtime/sema.go:52
#   0x6299cc    net.(*fdMutex).RWLock+0x16c                     /usr/local/go/src/net/fd_mutex.go:143
#   0x62b7d9    net.(*netFD).writeLock+0x39                     /usr/local/go/src/net/fd_unix.go:194
#   0x62ccdc    net.(*netFD).Write+0x6c                         /usr/local/go/src/net/fd_unix.go:319
#   0x640964    net.(*conn).Write+0xe4                          /usr/local/go/src/net/net.go:184
#   0x5e6306    github.com/moonfrog/heimdall/network.(*Messenger).WriteMessage+0x86 /home/rts/gopath/src/github.com/moonfrog/heimdall/network/messenger.go:40
#   0x73b75b    github.com/moonfrog/heimdall/service.(*Service).sendPacket+0x55b    /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:91
#   0x73b0b2    github.com/moonfrog/heimdall/service.(*Service).Send+0x442      /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:79
#   0x744660    github.com/moonfrog/heimdall/service/manager.(*Sticky).Send+0x5e0   /home/rts/gopath/src/github.com/moonfrog/heimdall/service/manager/sticky.go:91
#   0x5f13ea    github.com/moonfrog/heimdall/serviceController.(*Controller).Send+0x22a /home/rts/gopath/src/github.com/moonfrog/heimdall/serviceController/controller.go:169
#   0x73c308    github.com/moonfrog/heimdall/service.(*Service).process+0x8a8       /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:142
#   0x73f5cf    github.com/moonfrog/heimdall/service.(*Service).readPump.func1.1+0x3f   /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:111
#   0x48dcea    github.com/moonfrog/heimdall/common.Safe+0x3a               /home/rts/gopath/src/github.com/moonfrog/heimdall/common/utils.go:49
#   0x73f89c    github.com/moonfrog/heimdall/service.(*Service).readPump.func1+0x2bc    /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:112

102 @ 0x42fd33 0x42fdf4 0x43f877 0x43f506 0x6299cc 0x62b7d9 0x62ccdc 0x640964 0x5e6306 0x73b75b 0x73cb72 0x74475e 0x7457a6 0x5f23d9 0x5f9d26 0x5f8cdb 0x5ffd9f 0x48dcea 0x5f729f 0x460ae1
#   0x43f506    net.runtime_Semacquire+0x26                         /usr/local/go/src/runtime/sema.go:52
#   0x6299cc    net.(*fdMutex).RWLock+0x16c                         /usr/local/go/src/net/fd_mutex.go:143
#   0x62b7d9    net.(*netFD).writeLock+0x39                         /usr/local/go/src/net/fd_unix.go:194
#   0x62ccdc    net.(*netFD).Write+0x6c                             /usr/local/go/src/net/fd_unix.go:319
#   0x640964    net.(*conn).Write+0xe4                              /usr/local/go/src/net/net.go:184
#   0x5e6306    github.com/moonfrog/heimdall/network.(*Messenger).WriteMessage+0x86     /home/rts/gopath/src/github.com/moonfrog/heimdall/network/messenger.go:40
#   0x73b75b    github.com/moonfrog/heimdall/service.(*Service).sendPacket+0x55b        /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:91
#   0x73cb72    github.com/moonfrog/heimdall/service.(*Service).OnDisconnect+0xb2       /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:179
#   0x74475e    github.com/moonfrog/heimdall/service/manager.(*Sticky).Disconnect+0x5e      /home/rts/gopath/src/github.com/moonfrog/heimdall/service/manager/sticky.go:97
#   0x7457a6    github.com/moonfrog/heimdall/service/manager.(*Sticky).Connect+0x856        /home/rts/gopath/src/github.com/moonfrog/heimdall/service/manager/sticky.go:147
#   0x5f23d9    github.com/moonfrog/heimdall/serviceController.(*Controller).OnConnect+0x3b9    /home/rts/gopath/src/github.com/moonfrog/heimdall/serviceController/controller.go:235
#   0x5f9d26    github.com/moonfrog/heimdall/client.(*Client).handleRouterMsg+0xe86     /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:284
#   0x5f8cdb    github.com/moonfrog/heimdall/client.(*Client).process+0xedb         /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:254
#   0x5ffd9f    github.com/moonfrog/heimdall/client.(*Client).stateMachine.func1+0x3f       /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:136
#   0x48dcea    github.com/moonfrog/heimdall/common.Safe+0x3a                   /home/rts/gopath/src/github.com/moonfrog/heimdall/common/utils.go:49
#   0x5f729f    github.com/moonfrog/heimdall/client.(*Client).stateMachine+0x1df        /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:137

13 @ 0x42fd33 0x42fdf4 0x43f877 0x43f506 0x6299cc 0x62b7d9 0x62ccdc 0x640964 0x5e6306 0x73b75b 0x73cb72 0x74475e 0x5f1ea3 0x491dac 0x491c99 0x5fa486 0x5fa25a 0x5f8cdb 0x5ffd9f 0x48dcea 0x5f729f 0x460ae1
#   0x43f506    net.runtime_Semacquire+0x26                         /usr/local/go/src/runtime/sema.go:52
#   0x6299cc    net.(*fdMutex).RWLock+0x16c                         /usr/local/go/src/net/fd_mutex.go:143
#   0x62b7d9    net.(*netFD).writeLock+0x39                         /usr/local/go/src/net/fd_unix.go:194
#   0x62ccdc    net.(*netFD).Write+0x6c                             /usr/local/go/src/net/fd_unix.go:319
#   0x640964    net.(*conn).Write+0xe4                              /usr/local/go/src/net/net.go:184
#   0x5e6306    github.com/moonfrog/heimdall/network.(*Messenger).WriteMessage+0x86     /home/rts/gopath/src/github.com/moonfrog/heimdall/network/messenger.go:40
#   0x73b75b    github.com/moonfrog/heimdall/service.(*Service).sendPacket+0x55b        /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:91
#   0x73cb72    github.com/moonfrog/heimdall/service.(*Service).OnDisconnect+0xb2       /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:179
#   0x74475e    github.com/moonfrog/heimdall/service/manager.(*Sticky).Disconnect+0x5e      /home/rts/gopath/src/github.com/moonfrog/heimdall/service/manager/sticky.go:97
#   0x5f1ea3    github.com/moonfrog/heimdall/serviceController.(*Controller).OnDisconnect+0x393 /home/rts/gopath/src/github.com/moonfrog/heimdall/serviceController/controller.go:210
#   0x491dac    github.com/moonfrog/heimdall/router.(*Router).onDisconnect+0x8c         /home/rts/gopath/src/github.com/moonfrog/heimdall/router/router.go:151
#   0x491c99    github.com/moonfrog/heimdall/router.(*Router).UnregisterClient+0x309        /home/rts/gopath/src/github.com/moonfrog/heimdall/router/router.go:146
#   0x5fa486    github.com/moonfrog/heimdall/client.(*Client).disconnect+0x206          /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:329
#   0x5fa25a    github.com/moonfrog/heimdall/client.(*Client).handleRouterMsg+0x13ba        /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:274
#   0x5f8cdb    github.com/moonfrog/heimdall/client.(*Client).process+0xedb         /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:254
#   0x5ffd9f    github.com/moonfrog/heimdall/client.(*Client).stateMachine.func1+0x3f       /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:136
#   0x48dcea    github.com/moonfrog/heimdall/common.Safe+0x3a                   /home/rts/gopath/src/github.com/moonfrog/heimdall/common/utils.go:49
#   0x5f729f    github.com/moonfrog/heimdall/client.(*Client).stateMachine+0x1df        /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:137

7 @ 0x42fd33 0x42a7ee 0x429cb0 0x629fba 0x62a026 0x62be7a 0x640644 0x611d09 0x612b7a 0x612eb9 0x5e60f4 0x73f614 0x460ae1
#   0x429cb0    net.runtime_pollWait+0x60                       /usr/local/go/src/runtime/netpoll.go:160
#   0x629fba    net.(*pollDesc).Wait+0x3a                       /usr/local/go/src/net/fd_poll_runtime.go:73
#   0x62a026    net.(*pollDesc).WaitRead+0x36                       /usr/local/go/src/net/fd_poll_runtime.go:78
#   0x62be7a    net.(*netFD).Read+0x23a                         /usr/local/go/src/net/fd_unix.go:250
#   0x640644    net.(*conn).Read+0xe4                           /usr/local/go/src/net/net.go:172
#   0x611d09    bufio.(*Reader).fill+0x1e9                      /usr/local/go/src/bufio/bufio.go:97
#   0x612b7a    bufio.(*Reader).ReadSlice+0x21a                     /usr/local/go/src/bufio/bufio.go:328
#   0x612eb9    bufio.(*Reader).ReadBytes+0xa9                      /usr/local/go/src/bufio/bufio.go:406
#   0x5e60f4    github.com/moonfrog/heimdall/network.(*Messenger).ReadMessage+0x54  /home/rts/gopath/src/github.com/moonfrog/heimdall/network/messenger.go:29
#   0x73f614    github.com/moonfrog/heimdall/service.(*Service).readPump.func1+0x34 /home/rts/gopath/src/github.com/moonfrog/heimdall/service/service.go:102

1 @ 0x42fd33 0x42fdf4 0x43f877 0x43f4c6 0x4c5704 0x4c6740 0x5f2d6a 0x5f5fcc 0x5f5dc4 0x5890f3 0x460ae1
#   0x43f4c6    sync.runtime_Semacquire+0x26                                /usr/local/go/src/runtime/sema.go:47
#   0x4c5704    sync.(*Mutex).Lock+0x1c4                                /usr/local/go/src/sync/mutex.go:83
#   0x4c6740    sync.(*RWMutex).Lock+0x30                               /usr/local/go/src/sync/rwmutex.go:83
#   0x5f2d6a    github.com/moonfrog/heimdall/serviceController.(*Controller).refreshServices+0x4a   /home/rts/gopath/src/github.com/moonfrog/heimdall/serviceController/controller.go:257
#   0x5f5fcc    github.com/moonfrog/heimdall/serviceController.(*Controller).init.func1+0x1ec       /home/rts/gopath/src/github.com/moonfrog/heimdall/serviceController/controller.go:333
#   0x5f5dc4    github.com/moonfrog/heimdall/serviceController.loadConfig.func2+0x84            /home/rts/gopath/src/github.com/moonfrog/heimdall/serviceController/configServices.go:84
#   0x5890f3    github.com/moonfrog/badger/zootils.(*ZooKeeper).watchFunc+0x53              /home/rts/gopath/src/github.com/moonfrog/badger/zootils/zootils.go:62

1 @ 0x42fd33 0x43e9f7 0x43df52 0x5fc579 0x491911 0x5faae9 0x5f94bf 0x5f8cdb 0x5ffd9f 0x48dcea 0x5f729f 0x460ae1
#   0x5fc579    github.com/moonfrog/heimdall/client.(*Client).RejectConnection+0x369    /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:495
#   0x491911    github.com/moonfrog/heimdall/router.(*Router).RegisterClient+0x8a1  /home/rts/gopath/src/github.com/moonfrog/heimdall/router/router.go:109
#   0x5faae9    github.com/moonfrog/heimdall/client.(*Client).join+0x5e9        /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:379
#   0x5f94bf    github.com/moonfrog/heimdall/client.(*Client).handleRouterMsg+0x61f /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:265
#   0x5f8cdb    github.com/moonfrog/heimdall/client.(*Client).process+0xedb     /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:254
#   0x5ffd9f    github.com/moonfrog/heimdall/client.(*Client).stateMachine.func1+0x3f   /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:136
#   0x48dcea    github.com/moonfrog/heimdall/common.Safe+0x3a               /home/rts/gopath/src/github.com/moonfrog/heimdall/common/utils.go:49
#   0x5f729f    github.com/moonfrog/heimdall/client.(*Client).stateMachine+0x1df    /home/rts/gopath/src/github.com/moonfrog/heimdall/client/client.go:137
",28570
1577,44643110,"package main

import (
    ""encoding/json""
    ""errors""
    ""fmt""
    ""math/rand""
    ""sync""
    ""time""
)

type node struct {
    Left  *node
    Right *node
    Data  int
}

// Tree ...
type Tree struct {
    Root  *node
    Total int
}

// FindNode ...
func (t *Tree) FindNode(data int) bool {
    newNode := node{
        Data: data,
    }
    if t.Root != nil {
        if t.findNode(t.Root, newNode) != nil {
            return true
        }
    }
    return false
}

func (t *Tree) findNode(search *node, target node) *node {
    var returnNode *node
    if search == nil {
        return returnNode
    }
    if search.Data == target.Data {
        return search
    }
    returnNode = t.findNode(search.Left, target)
    if returnNode == nil {
        returnNode = t.findNode(search.Right, target)
    }
    return returnNode
}

// Add ...
func (t *Tree) Add(data int) {
    t.Total += data
    if data < 0 {
        panic(errors.New(""Only submit positive integers""))
    }
    nodeToAdd := node{
        Data: data,
    }
    if t.Root == nil {
        t.Root = new(node)
    }
    if t.Root.Data == 0 {
        t.Root = &nodeToAdd
        return
    }

    t.add(t.Root, nodeToAdd)
    return
}

func (t *Tree) add(oldnode *node, newNode node) {
    if newNode.Data < oldnode.Data {
        if oldnode.Left == nil {
            // t.Total += newNode.Data
            oldnode.Left = &newNode
        } else {
            // t.Total += newNode.Data
            t.add(oldnode.Left, newNode)
        }
    } else if newNode.Data > oldnode.Data {
        if oldnode.Right == nil {
            // t.Total += newNode.Data
            oldnode.Right = &newNode
        } else {
            // t.Total += newNode.Data
            t.add(oldnode.Right, newNode)
        }
    }
    return
}

// InOrderTraversal ...
func (t *Tree) InOrderTraversal() {
    if t.Root != nil {
        currentNode := t.Root
        if currentNode.Left == nil && currentNode.Right == nil {
            fmt.Println(currentNode.Data)
        } else {
            t.inOrderTraversal(currentNode)
        }
    }
    return
}

func (t *Tree) inOrderTraversal(n *node) {
    if n.Left != nil {
        t.inOrderTraversal(n.Left)
    }
    fmt.Println(n.Data)
    if n.Right != nil {
        t.inOrderTraversal(n.Right)
    }
    return
}

// Traversal ...
func (t *Tree) Traversal() {
    if t.Root != nil {
        currentNode := t.Root
        if currentNode.Left == nil && currentNode.Right == nil {
            fmt.Println(currentNode.Data)
        } else {
            t.traversal(currentNode)
        }
    }
    return
}

func (t *Tree) traversal(n *node) {
    fmt.Println(n.Data)
    if n.Left != nil {
        t.traversal(n.Left)
    }

    if n.Right != nil {
        t.traversal(n.Right)
    }
    return
}

// Sum ...
func (t *Tree) Sum() (total int) {
    var wg sync.WaitGroup
    c := make(chan int, 100)
    if t.Root != nil {
        currentNode := t.Root
        if currentNode.Left == nil && currentNode.Right == nil {
            return 1
        }
        wg.Add(1)
        t.sum(currentNode, c, &wg)
    }
    go func() {
        wg.Wait()
        close(c)
    }()
    for n := range c {
        total += n
    }
    return total
}

func (t *Tree) sum(n *node, counter chan int, wg *sync.WaitGroup) {
    defer wg.Done()

    if n.Left != nil {
        wg.Add(1)
        go t.sum(n.Left, counter, wg)
    }

    counter <- n.Data

    if n.Right != nil {
        wg.Add(1)
        go t.sum(n.Right, counter, wg)
    }

    return
}

// CountEdges ...
func (t *Tree) CountEdges() (edges int) {
    c := make(chan int, 10)
    if t.Root != nil {
        currentNode := t.Root
        if currentNode.Left == nil && currentNode.Right == nil {
            return 1
        }
        t.countEdges(currentNode, c)
    }

    for {
        n := <-c
        if n == 0 {
            close(c)
            break
        }
        edges++
    }
    return edges
}

func (t *Tree) countEdges(n *node, counter chan int) {
    if n.Left != nil {
        go t.countEdges(n.Left, counter)
    }

    if n.Left == nil && n.Right == nil {
        counter <- 0
    } else {
        counter <- 1
    }

    if n.Right != nil {
        go t.countEdges(n.Right, counter)
    }
    return
}

// GenerateRandomTree ...
func (t *Tree) GenerateRandomTree() {
    u := time.Now()
    source := rand.NewSource(u.Unix())
    r := rand.New(source)
    arr := r.Perm(1000)
    for _, a := range arr {
        t.Add(a)
    }
    return
}

// GetRootData ...
func (t *Tree) GetRootData() int {
    return t.Root.Data
}

// GetTreeTotal ...
func (t *Tree) GetTreeTotal() int {
    return t.Total
}

// TreeToArray ...
func (t *Tree) TreeToArray() []int {
    ch := make(chan int, 10)
    arr := []int{}
    if t.Root != nil {
        currentNode := t.Root
        if currentNode.Left == nil && currentNode.Right == nil {
            return []int{currentNode.Data}
        }
        t.traversalGetVals(currentNode, ch)
    }

    for {
        n := <-ch
        if n == -1 {
            close(ch)
            break
        }
        arr = append(arr, n)
    }
    return arr
}

func (t *Tree) traversalGetVals(n *node, ch chan int) {
    if n.Left != nil {
        ch <- n.Left.Data
        go t.traversalGetVals(n.Left, ch)
    }

    if n.Right != nil {
        ch <- n.Right.Data
        go t.traversalGetVals(n.Right, ch)
    }
    if n.Left == nil && n.Right == nil {
        ch <- -1
    }
    return
}

// ShiftRoot ...
func (t *Tree) ShiftRoot(newRoot int) {
    arr := t.TreeToArray()
    n := Tree{}
    n.Add(newRoot)
    for _, i := range arr {
        n.Add(i)
    }
    *t = n
}

// PrintTree ...
func (t *Tree) PrintTree() {
    b, err := json.MarshalIndent(t, """", "" "")
    if err != nil {
        panic(err)
    }
    fmt.Println(string(b))
}

func main() {
    // t := Tree{}
    // t.GenerateRandomTree()
    // t.PrintTree()
    // fmt.Println(""total:"", t.Sum())

    t := Tree{}
    t.Add(10)
    t.Add(100)
    t.Add(2)
    t.Add(3)

    fmt.Println(t.Sum()) // should be 115
    fmt.Println(t.GetTreeTotal())

    // t := Tree{}
    // for i := 1; i <= 23; i++ {
    //  t.Add(i)
    // }
    // fmt.Println(""total:"", t.Sum())

}
",6212
1578,44842132,"req:=""https://domain.atlassian.net/wiki/rest/api/content?expand=body.view,version&type=page&start=0&limit=""
res, err := w.sendRequest(req)
    if err != nil {
        return nil, err
    }
    if strings.EqualFold(contentID, """") == false {
        if len(res.Results) != 0 {
            for i, _ := range res.Results {
                Log.Info(""files processed is:"", i)
                extension := filepath.Ext(res.Results[i].Title)
                isExtenstionExclude := isExcludedExtenstion(sbConfig, extension)
                ispathExclude := isExcludedFolder(sbConfig, res.Results[i].Links.Webui)
                if sbgoclient.ExtesionMap[extension] == 0 || isExtenstionExclude == true || ispathExclude == true {
                    binarycount++
                    Log.Info(""Excluded by extension"" + extension + "" for file"" + res.Results[i].Title)
                } else {
                    md5HashInBytes := md5.Sum([]byte(res.Results[i].Title))
                    md5HashInString := hex.EncodeToString(md5HashInBytes[:])
                    file_path := parameter[0] + ""/"" + md5HashInString + strings.Replace(res.Results[i].Title, "" "", """", -1)
                    file, err := os.Create(file_path)

                    if err != nil {
                        fmt.Println(err)
                        panic(err)
                    }
                    url_1 := sbConfig.ConfluenceUrl + res.Results[i].Links.Download
                    req, err := http.NewRequest(""GET"", url_1, nil)
                    resp, _ := w.client.Do(req) // add a filter to check redirect

                    if err != nil {
                        fmt.Println(err)
                        panic(err)
                    }
                    // Close body on function exit
                    defer resp.Body.Close()
                    fmt.Println(resp.Status)

                    size, err = io.Copy(file, resp.Body)

                    if err != nil {
                        panic(err)
                    }

                    defer file.Close()
                    fmt.Printf(""%s with %v bytes downloaded"", res.Results[i].Title, size)
                    meta := map[string]string{
                        ""size"": strconv.FormatInt(size, 10),
                    }
                }
            }
        }
    } else {

        if len(res.Results) != 0 {
            for i, _ := range res.Results {
                Log.Info(""page indexing is"", res.Results[i].Title, ""and i value is:"", i)
                fmt.Println(""hmtl content is"", res.Results[i].Body.View.Value)
                fmt.Println(""page name is:"", res.Results[i].Title)
                md5HashInBytes := md5.Sum([]byte(res.Results[i].Title))
                md5HashInString := hex.EncodeToString(md5HashInBytes[:])
                file_path := parameter[0] + ""/"" + md5HashInString + strings.Replace(res.Results[i].Title, "" "", """", -1) + "".html""
                file, err := os.Create(file_path)

                if err != nil {
                    fmt.Println(err)
                    panic(err)
                }
                defer file.Close()
                html_content := """" + res.Results[i].Body.View.Value + """"
                err = ioutil.WriteFile(file.Name(), []byte(html_content), 0777)
                if err != nil {
                    fmt.Println(""error writing into file"", err)
                    panic(err)
                }
                file.Close()                    
        }
",3471
1579,44842132,"func (w *Wiki) sendRequest(req *http.Request) (*vijay_content, error) {
    var testjson vijay_content
    req.Header.Add(""Accept"", ""application/json, */*"")
    w.authMethod.auth(req)

    resp, err := w.client.Do(req)
    if err != nil {
        return nil, err
    }
    bodyBytes, _ := ioutil.ReadAll(resp.Body)
    body := string(bodyBytes)

    fmt.Printf(""response is %s\n"", body)
    err = json.Unmarshal(bodyBytes, &testjson)
    if err != nil {
        fmt.Println(""error here is"", err)
        return nil, err
    }

    switch resp.StatusCode {
    case http.StatusOK, http.StatusCreated, http.StatusPartialContent:

        return &testjson, nil
    case http.StatusNoContent, http.StatusResetContent:
        return nil, nil
    case http.StatusUnauthorized:
        return nil, fmt.Errorf(""Authentication failed."")
    case http.StatusServiceUnavailable:
        return nil, fmt.Errorf(""Service is not available (%s)."", resp.Status)
    case http.StatusInternalServerError:
        return nil, fmt.Errorf(""Internal server error: %s"", resp.Status)
    }

    return nil, fmt.Errorf(""Unknown response status %s"", resp.Status)
}
",1140
1580,44842132,"type Links struct {
    Download string `json:""download,omitempty""`
    Self     string `json:""self,omitempty""`
    Webui    string `json:""webui,omitempty""`
}
type View_struct struct {
    Value string `json:"",innerxml""`
}
type Body_struct struct {
    View View_struct `json:""view,omitempty""`
}
type Vijay_Results struct {
    ID    string      `json:""id,omitempty""`
    Links Links       `json:""_links,omitempty""`
    Title string      `json:""title,omitempty""`
    Body  Body_struct `json:""body,omitempty""`
}
type vijay_content struct {
    Results []Vijay_Results `json:""results,omitempty""`
    Start   int             `json:""start,omitempty""`
    Limit   int             `json:""limit,omitempty""`
    Size    int             `json:""size,omitempty""`
}
",754
1581,44863386,"// SecureDevice holds a user's device's infos
type SecureDevice struct {
    Name     string // Defined by the user
    DeviceIP string
    Token    struct {
        Token        string
        StartingDate time.Time // The token is supposed to last only a week before becoming invalid
    }
}

// GlobalUser is a struct defining all user's infos registered inside the server
type GlobalUser struct {
    Username          string
    Password          string
    Salt              string
    Mail              string
    ValidationToken   string // Used to validate the user's mail adress
    Lang              string
    ConversationsID   []int // The private messages the user has part in
    SecureDevicesList []SecureDevice
}
",730
1582,44863386,"// IsLoggedIn checks if client's token is valid
func IsLoggedIn(r *http.Request) string {
    ips := strings.Split(r.Header.Get(""X-Forwarded-For""), "", "")
    ip := ips[0]
    cookie, err := r.Cookie(""auth"")
    if err != nil {
        return ""ERR$"" + ""not_connected""
    }
    cookieValue := strings.Split(cookie.Value, ""$"")
    println(cookie.Value)
    user := GetUser(cookieValue[0])
    userToken := cookieValue[1]
    if user.Username == """" {
        return ""ERR$"" + ""error""
    }
    for _, SecureDevice := range user.SecureDevicesList {
        if SecureDevice.DeviceIP == ip && SecureDevice.Token.Token == userToken { // We make sure that the token provided is actually the user's token
            if time.Since(SecureDevice.Token.StartingDate)*time.Hour >= 168 { // If token is older than 1 week, we throw it away
                return ""ERR$"" + ""error_token_expired""
            } else if time.Since(SecureDevice.Token.StartingDate)*time.Second >= 30 { // If it's age is between 1 hour and one week, we renew it
                db, err := scribble.New(""./brony/db"", nil)
                if err != nil {
                    return ""ERR$"" + ""error_internal""
                }
                tokenBytes, err := GenerateRandomBytes(64) // Generates a salt
                if err != nil {
                    return ""ERR$"" + ""error_internal""
                }
                token := base64.URLEncoding.EncodeToString(tokenBytes)
                SecureDevice.Token.Token = token
                SecureDevice.Token.StartingDate = time.Now()
                errr := db.Write(""users"", user.Username, user)
                if errr != nil {
                    return ""ERR$"" + ""error_internal""
                }
                return ""TOK$"" + user.Username + ""$"" + SecureDevice.Token.Token
            } else if time.Since(SecureDevice.Token.StartingDate)*time.Hour <= 1 {
                return ""NIL$""
            }
        } else if SecureDevice.DeviceIP == ip {
            return ""ERR$"" + ""error_bad_token""
        }
    }
    return ""ERR$"" + ""error_device_not_registered""
}
",2083
1583,44863386,"status := IsLoggedIn(r)
println(status)
",40
1584,44863386,"test$ppDXRggtztyA9OBbdZh1t1ESqRo2XvuOBt4xlDai9kVxwq-_3zlWyvgNgA7AZcSpasJ_YnXZvoG                                                                                                                                                             qlz1syF9X8g==
NIL$

test$ppDXRggtztyA9OBbdZh1t1ESqRo2XvuOBt4xlDai9kVxwq-_3zlWyvgNgA7AZcSpasJ_YnXZvoG                                                                                                                                                             qlz1syF9X8g==
ERR$error_token_expired

test$ppDXRggtztyA9OBbdZh1t1ESqRo2XvuOBt4xlDai9kVxwq-_3zlWyvgNgA7AZcSpasJ_YnXZvoG                                                                                                                                                             qlz1syF9X8g==
NIL$

test$ppDXRggtztyA9OBbdZh1t1ESqRo2XvuOBt4xlDai9kVxwq-_3zlWyvgNgA7AZcSpasJ_YnXZvoG                                                                                                                                                             qlz1syF9X8g==
ERR$error_token_expired
test$ppDXRggtztyA9OBbdZh1t1ESqRo2XvuOBt4xlDai9kVxwq-_3zlWyvgNgA7AZcSpasJ_YnXZvoG                                                                                                                                                             qlz1syF9X8g==
ERR$error_token_expired

test$ppDXRggtztyA9OBbdZh1t1ESqRo2XvuOBt4xlDai9kVxwq-_3zlWyvgNgA7AZcSpasJ_YnXZvoG                                                                                                                                                             qlz1syF9X8g==
ERR$error_token_expired

test$ppDXRggtztyA9OBbdZh1t1ESqRo2XvuOBt4xlDai9kVxwq-_3zlWyvgNgA7AZcSpasJ_YnXZvoG                                                                                                                                                             qlz1syF9X8g==
ERR$error_token_expired

test$ppDXRggtztyA9OBbdZh1t1ESqRo2XvuOBt4xlDai9kVxwq-_3zlWyvgNgA7AZcSpasJ_YnXZvoG                                                                                                                                                             qlz1syF9X8g==
ERR$error_token_expired

test$ppDXRggtztyA9OBbdZh1t1ESqRo2XvuOBt4xlDai9kVxwq-_3zlWyvgNgA7AZcSpasJ_YnXZvoG                                                                                                                                                             qlz1syF9X8g==
NIL$
",2425
1585,44874566,"id  title           latlng                  id  title           locationid  
1   Fox Thea...     43.6640673,-79.4213863  1   Bob's Event     1
1   Fox Thea...     43.6640673,-79.4213863  2   Jill's Event    1
2   Wrigley ...     43.6640673,-79.4213863  3   Mary's Event    2
3   Blues Bar       43.6640673,-79.4213863  4   John's Event    3
1   Fox Thea...     43.6640673,-79.4213863  5   Monthly G...    1
1   Fox Thea...     43.6640673,-79.4213863  6   A Special...    1
1   Fox Thea...     43.6640673,-79.4213863  7   The Final...    1
",539
1586,44874566,"   {
        ""Locations"": [
            {
                ""ID"": 1,
                ""Title"": ""Fox Theatre"",
                ""Latlng"": ""43.6640673,-79.4213863"",
            },
            {
                ""ID"": 1,
                ""Title"": ""Fox Theatre"",
                ""Latlng"": ""43.6640673,-79.4213863"",
            },
            {
                ""ID"": 2,
                ""Title"": ""Wrigley Field"",
                ""Latlng"": ""43.6640673,-79.4213863"",
            },
            {
                ""ID"": 3,
                ""Title"": ""Blues Bar"",
                ""Latlng"": ""43.6640673,-79.4213863"",
            },
            {
                ""ID"": 1,
                ""Title"": ""Fox Theatre"",
                ""Latlng"": ""43.6640673,-79.4213863"",
            },
            {
                ""ID"": 1,
                ""Title"": ""Fox Theatre"",
                ""Latlng"": ""43.6640673,-79.4213863"",
            },
            {
                ""ID"": 1,
                ""Title"": ""Fox Theatre"",
                ""Latlng"": ""43.6640673,-79.4213863"",
            }
        ],
        ""Events"": [
            {
                ""ID"": 1,
                ""Title"": ""Bob's Event"",
                ""Location"": 1
            },
            {
                ""ID"": 2,
                ""Title"": ""Jill's Event"",
                ""Location"": 1
            },
            {
                ""ID"": 3,
                ""Title"": ""Mary's Event"",
                ""Location"": 2
            },
            {
                ""ID"": 4,
                ""Title"": ""John's Event"",
                ""Location"": 3
            },
            {
                ""ID"": 5,
                ""Title"": ""Monthly Gathering"",
                ""Location"": 1
            },
            {
                ""ID"": 6,
                ""Title"": ""A Special Event"",
                ""Location"": 1
            },
            {
                ""ID"": 7,
                ""Title"": ""The Final Contest"",
                ""Location"": 1
            }
        ]

    }
",1983
1587,44874566,"// Event type
type Event struct {
    ID int `schema:""id""`
    Title string `schema:""title""`
    LocationID int `schema:""locationid""`
}

// Location type
type Location struct {
    ID int `schema:""id""`
    Title string `schema:""title""`
    Latlng string `schema:""latlng""`
}

// LocationsEvents type
type LocationsEvents struct {
    Locations []Location `schema:""locations""`
    Events []Event `schema:""events""`
}
",414
1588,44874566,"func getLocationsEvents(db *sql.DB, start, count int) ([]Location, []Event, error) {

    var locations = []Location{}
    var events = []Event{}

    rows, err := db.Query(""SELECT locations.id, locations.title, locations.latlng, events.id, events.title, events.locationid FROM locations LEFT JOIN events ON locations.id = events.locationid LIMIT ? OFFSET ?"", count, start)
    if err != nil {
        return locations, events, err
    }
    defer rows.Close()

    for rows.Next() {
        var location Location
        var event Event

        err := rows.Scan(&location.ID, &location.Title, &location.Latlng, &event.ID, &event.Title, &event.LocationID);
        if err != nil {
                return locations, events, err
        }

    // Here I can print locations and see it getting longer with each loop iteration
    fmt.Println(locations)

    // How can I check if an ID exists in locations?
    // Ideally, if location.ID already exists in locations, then only append event, otherwise, append both the location and event

        locations = append(locations, location)
        events = append(events, event)
    }

    return locations, events, nil
}
",1166
1589,44874566,"func (a *App) getLocationsEventsJSON(w http.ResponseWriter, r *http.Request) {

count := 99
start := 0

    if count > 10 || count < 1 {
        count = 10
    }
    if start < 0 {
        start = 0
    }

    locations, events, err := getLocationsEvents(a.DB, start, count)
    if err != nil {
        respondWithError(w, http.StatusInternalServerError, err.Error())
        return
    }

    var locationsEvents LocationsEvents

    locationsEvents.Locations = locations
    locationsEvents.Events = events

    respondWithJSON(w, http.StatusOK, locationsEvents)
}
",567
1590,44874566,"func respondWithJSON(w http.ResponseWriter, code int, payload interface{}) {
    response, _ := json.Marshal(payload)

    w.Header().Set(""Content-Type"", ""application/json"")
    w.WriteHeader(code)
    w.Write(response)
}
",222
1591,44892236,"    // rpc_json_server.go

    package main

    import (
        ""log""
        ""net""
        ""net/http""
        ""net/rpc""
        ""net/rpc/jsonrpc""
    )

    //------------------------------------------------------------------------------
    // Types
    //------------------------------------------------------------------------------

    type Arithmetic int // Used as RPC Service called 'Arithmetic'

    type Arguments struct {
        A int
        B int
    }

    type Result int

    //------------------------------------------------------------------------------
    // Methods
    //------------------------------------------------------------------------------

    func (t *Arithmetic) Multiply(args *Arguments, res *Result) error {

        *res = Result(args.A * args.B)

        return nil
    }

    //------------------------------------------------------------------------------

    func main() {

        var srv *rpc.Server
        var err error
        var arith *Arithmetic
        var listener net.Listener
        var codec rpc.ServerCodec
        var srv_conntype, srv_host, srv_port, srv_addr, srv_path string
        var srv_debugPath string
        var connection net.Conn

        srv_conntype = ""tcp""
        srv_host = ""0.0.0.0""
        srv_port = ""3000""
        srv_addr = srv_host + "":"" + srv_port
        srv_path = ""/""
        srv_debugPath = ""/debug""

        // Create Server, register Service
        srv = rpc.NewServer()
        arith = new(Arithmetic)
        err = srv.Register(arith)
        if err != nil {
            log.Fatalf(""Error. Service Format is not correct. %s\r\n"", err) //dbg
        }

        // Handle, listen
        srv.HandleHTTP(srv_path, srv_debugPath)
        listener, err = net.Listen(srv_conntype, srv_addr)
        if err != nil {
            log.Fatalf(""Error. Can not listen on %s. %s\r\n"", srv_addr, err) //dbg
        }
        log.Printf(""Started RPC Handler at %s.\r\n"", srv_addr) //dbg

        // Serve
        for {

            connection, err = listener.Accept()
            if err != nil {
                log.Fatal(err)
            }

            codec = jsonrpc.NewServerCodec(connection)

            go srv.ServeCodec(codec)
        }

        err = http.Serve(listener, nil)
        if err != nil {
            log.Fatalf(""Serve Error. %s\r\n"", err) //dbg
        }
    }

    //------------------------------------------------------------------------------
",2451
1592,44892236,"    // rpc_json_client.go

    package main

    import (
        ""fmt""
        ""log""
        ""net""
        ""net/rpc""
        ""net/rpc/jsonrpc""
    )

    //------------------------------------------------------------------------------
    // Types
    //------------------------------------------------------------------------------

    type Arithmetic int // Used as RPC Service called 'Arithmetic'

    type Arguments struct {
        A int
        B int
    }

    type Result int

    //------------------------------------------------------------------------------
    // Methods
    //------------------------------------------------------------------------------

    func main() {

        var err error
        var srv_conntype, srv_host, srv_port, srv_addr string
        //var srv_path string
        var client *rpc.Client
        var args Arguments
        var result Result
        var serviceName, methodName, funcName string
        var connection net.Conn

        srv_conntype = ""tcp""
        srv_host = ""0.0.0.0""
        srv_port = ""3000""
        srv_addr = srv_host + "":"" + srv_port
        //srv_path = ""/""

        // Connect to RPC Server
        connection, err = net.Dial(srv_conntype, srv_addr)
        if err != nil {
            log.Fatalf(""Error. Can not connect to %s. %s\r\n"", srv_addr, err) //dbg
        }
        defer connection.Close()

        // Client
        client = jsonrpc.NewClient(connection)

        // Prepare Call
        serviceName = ""Arithmetic""
        methodName = ""Multiply""
        funcName = serviceName + ""."" + methodName
        args.A = 7
        args.B = 8

        // Call remote Procedure
        err = client.Call(funcName, args, &result)
        if err != nil {
            log.Fatalf(""Error. %s\r\n"", err) //dbg
        }

        // Show Results
        fmt.Printf(""[%d; %d] -> [%d].\r\n"", args.A, args.B, result) //dbg
    }
",1895
1593,44892236,"    telnet localhost 3000
    Trying 127.0.0.1...
    Connected to localhost.
    Escape character is '^]'.
    {
    ""jsonrpc"":""2.0"", 
    ""method"":""Arithmetic.Multiply"", 
    ""params"": { ""A"": 5, ""B"": 6 },
    ""id"":1
    }
    {""id"":1,""result"":null,""error"":""json: cannot unmarshal object into Go value of type [1]interface {}""}
",329
1594,44907323,AES,3
1595,44907323,base64,6
1596,44907323,golang,6
1597,44907323,gzip.NewReader,14
1598,44907323,unexpected EOF error,20
1599,44907323,invalid gzip header error,25
1600,44907323,gzip Reader,11
1601,44907323,\x82L\x02\xcb\xa6N\xa0\x7fri\xae\xd5K\xe1$\xe83\xc3\x08\x86Z\x81\xa9g-y\x88\xf6\x9a,83
1602,44907323,"import time
import json
import requests
import random
import gzip
import base64

from Crypto.Cipher import AES

baseurl = 'http://0.0.0.0:80'
key = b'TfvY7I358yospfWKcoviZizOShpm5hyH'
iv = b'mb13KcoviZizvYhp'

MODE = AES.MODE_CFB
BLOCK_SIZE = 16
SEGMENT_SIZE = 128


def http_post(url, data):
    print('Going to make a request to {} with the following data: {}'.format(url, data))
    r = requests.post(url,
                      data=data,
                      headers={'Content-type': 'application/json; charset=utf-8',
                               'Connection': 'keep-alive'}, )
    if r.status_code != 200:
        print('Server returned unexpected response code {}, and content: {}'.format(r.status_code, r.content))
        return False
    else:
        data = r.json()
        return data


def post_sample_data(key, iv):
    fake_device_id = ""MB88""
    Load_VA_Total_Mean = random.randint(1000, 100000)
    print('Data that should come back: {}'.format(Load_VA_Total_Mean))
    data = {""i"": fake_device_id, ""p"": [
        {""d"": [54.3, 0, 99, 49.35, 3, 99, 51.533, 1, 98, 28964, 7348, 43590, Load_VA_Total_Mean, 10350, 55200, 49.7],
         ""t"": time.time(), ""dt"": ""p""}]}
    url = baseurl + '/realtimedata'
    encryption_key_reference = 1
    payload = '{}\n{}'.format(convert_pack(data, key, iv), encryption_key_reference)
    return http_post(url, payload)


def check_sample_request():
    fake_device_id = ""MB88""
    url = baseurl + '/datapoints/powerzones/status'
    data = [{""name"": ""P1"", ""field"": ""Load_VA_Total_Mean"", ""devices"": [{""id"": fake_device_id, ""multiplier"": 1}]}]
    return http_post(url, json.dumps(data))


def convert_pack(inputdict, key, iv):
    print('input: {}'.format(inputdict))
    print('key: {}'.format(key))

    jsonpayload = json.dumps(inputdict)  # encode dict to json string
    print('json: {}'.format(jsonpayload))

    gzippayload = gzip.compress(jsonpayload.encode('utf-8'))  # compress with gzip
    print('gzip: {}'.format(gzippayload))

    encryptedpayload = base64.b64encode(encrypt(key, iv, gzippayload))
    print('encrypted: {}'.format(encryptedpayload))
    return str(encryptedpayload, encoding='utf-8')    


def _pad_string(value):
    length = len(value)
    pad_size = BLOCK_SIZE - (length % BLOCK_SIZE)
    return value.ljust(length + pad_size, b'\x00')


def encrypt(key, iv, plaintext):
    aes = AES.new(key, MODE, iv, segment_size=SEGMENT_SIZE)
    plaintext = _pad_string(plaintext)
    encrypted_text = aes.encrypt(plaintext)
    return encrypted_text


post_sample_data(key, iv)
check_sample_request()
",2579
1603,44907323,"package main

import (
    ""crypto/aes""
    ""crypto/cipher""
    ""encoding/base64""
    ""fmt""
    ""compress/gzip""
    ""io/ioutil""
    ""bytes""
    ""strings""
)

func main() {
    //a sample input text generated by the client script
    originalText := ""xhhpLqMJs4g8+8Hb751bcalljkeHDJfbGdMqr9E9im1OkiJzmdLr7pWv/Grh0+uzdeMQBMzefqzTrzetf1fZcBm93IEF6wl8WYE5x2uAZ5XY39bxlRWDt4cTNk/wWisbAMSzNJqQUq2UmqBLaWcI0LU1NGPZd8EKHK36Iwlp8NuP+YsQIJSmQdN2cvNFOLGv""
    fmt.Println(""Original request: "", originalText)
    key := []byte(""TfvY7I358yospfWKcoviZizOShpm5hyH"")
    text := decrypt(key, originalText)

    gzReader, err1 := gzip.NewReader(bytes.NewReader(text))
    fmt.Println(""GzReader: "", gzReader) 
    if err1 != nil {
        fmt.Println(""error1: "", err1)
    }

    content, err2 := ioutil.ReadAll(gzReader)   
    if err2 != nil {
        fmt.Println(""error2: "",err2)
    }

    fmt.Printf(""\nReading: \n -> Content in bytes: %v \n -> Content in string: %s\n"", content, string(content)) 
}

func decrypt(key []byte, cryptoText string) []byte {
    ciphertext, _ := base64.StdEncoding.DecodeString(cryptoText)
    fmt.Printf(""\nDecoding: \n -> Original: %v \n -> Decoded in bytes: %v \n -> Decoded in string: %s\n"", cryptoText, ciphertext, ciphertext)
    block, err := aes.NewCipher(key)
    if err != nil {
        panic(err)
    }

    iv := []byte(""mb13KcoviZizvYhp"")    
    stream := cipher.NewCFBDecrypter(block, iv)
    stream.XORKeyStream(ciphertext, ciphertext)
    fmt.Printf(""\nDecrypting: \n -> Decrypted in bytes: %v \n -> Decrypted in string: %s\n"", ciphertext, ciphertext)

    ciphertext = bytes.Trim(ciphertext, ""\x00"")
    fmt.Printf(""\nTrimming the padding: \n -> Decrypted in bytes: %v \n -> Decrypted in string: %s\n\n"", ciphertext, ciphertext)    
    return ciphertext
}
",1789
1604,44958839,"github.com\mxplusb\bigcache\caches_bench> go test -v -bench ""."" -benchtime ""10s"" . -timeout 30m
 -benchmem
BenchmarkMapSet-8                       20000000               917 ns/op             296 B/op          3 allocs/op
BenchmarkFreeCacheSet-8                 30000000               861 ns/op             360 B/op          3 allocs/op
BenchmarkBigCacheSet-8                  30000000               615 ns/op             311 B/op          2 allocs/op
BenchmarkMapGet-8                       50000000               410 ns/op              24 B/op          2 allocs/op
BenchmarkFreeCacheGet-8                 30000000               770 ns/op             152 B/op          4 allocs/op
BenchmarkBigCacheGet-8                  30000000               548 ns/op             152 B/op          4 allocs/op
BenchmarkBigCacheSetParallel-8          runtime: VirtualAlloc of 7340032 bytes failed with errno=1455
fatal error: runtime: cannot map pages in arena address space

runtime stack:
runtime.throw(0x55ca82, 0x30)
        C:/Go/src/runtime/panic.go:596 +0x9c
runtime.sysMap(0xc4fc330000, 0x700000, 0x428e01, 0x6152f8)
        C:/Go/src/runtime/mem_windows.go:116 +0x129
runtime.(*mheap).sysAlloc(0x5fb5c0, 0x700000, 0x419fd70)
        C:/Go/src/runtime/malloc.go:440 +0x37b
runtime.(*mheap).grow(0x5fb5c0, 0x380, 0x0)
        C:/Go/src/runtime/mheap.go:774 +0x69
runtime.(*mheap).allocSpanLocked(0x5fb5c0, 0x380, 0x874ca20)
        C:/Go/src/runtime/mheap.go:678 +0x456
runtime.(*mheap).alloc_m(0x5fb5c0, 0x380, 0x100000000, 0x0)
        C:/Go/src/runtime/mheap.go:562 +0xf0
runtime.(*mheap).alloc.func1()
        C:/Go/src/runtime/mheap.go:627 +0x52
runtime.systemstack(0x419fe68)
        C:/Go/src/runtime/asm_amd64.s:343 +0xb5
runtime.(*mheap).alloc(0x5fb5c0, 0x380, 0x10100000000, 0x0)
        C:/Go/src/runtime/mheap.go:628 +0xa7
runtime.largeAlloc(0x700000, 0x44fd01, 0xc4f61be000)
        C:/Go/src/runtime/malloc.go:807 +0x9a
runtime.mallocgc.func1()
        C:/Go/src/runtime/malloc.go:702 +0x45
runtime.systemstack(0xc0420278a0)
        C:/Go/src/runtime/asm_amd64.s:327 +0x7e
runtime.mstart()
        C:/Go/src/runtime/proc.go:1132

goroutine 31 [running]:
runtime.systemstack_switch()
        C:/Go/src/runtime/asm_amd64.s:281 fp=0xc042555980 sp=0xc042555978
runtime.mallocgc(0x700000, 0x53c400, 0x1, 0xc042031800)
        C:/Go/src/runtime/malloc.go:703 +0x96f fp=0xc042555a20 sp=0xc042555980
runtime.newarray(0x53c400, 0x10000, 0x522b20)
        C:/Go/src/runtime/malloc.go:833 +0x6b fp=0xc042555a60 sp=0xc042555a20
runtime.makemap(0x52d8a0, 0x5f5e1, 0x0, 0x0, 0x112)
        C:/Go/src/runtime/hashmap.go:281 +0x30d fp=0xc042555ab8 sp=0xc042555a60
github.com/allegro/bigcache.initNewShard(0x100, 0x8bb2c97000, 0x5f5e100, 0x100, 0x1, 0x5e1820, 0x612938, 0x0, 0x0, 0xc0423fa000, ...)
        E:/Programming/Go/src/github.com/allegro/bigcache/shard.go:45 +0xc5 fp=0xc042555c80 sp=0xc042555ab8
github.com/allegro/bigcache.newBigCache(0x100, 0x8bb2c97000, 0x5f5e100, 0x100, 0x1, 0x5e1820, 0x612938, 0x0, 0x0, 0x5e1560, ...)
        E:/Programming/Go/src/github.com/allegro/bigcache/bigcache.go:58 +0x36e fp=0xc042555dc8 sp=0xc042555c80
github.com/allegro/bigcache.NewBigCache(0x100, 0x8bb2c97000, 0x5f5e100, 0x100, 0x1, 0x0, 0x0, 0x0, 0x0, 0xbc02a, ...)
        E:/Programming/Go/src/github.com/allegro/bigcache/bigcache.go:27 +0x7f fp=0xc042555e48 sp=0xc042555dc8
github.com/mxplusb/bigcache/caches_bench.initBigCache(0x5f5e100, 0x4b6af8)
        E:/Programming/Go/src/github.com/mxplusb/bigcache/caches_bench/caches_bench_test.go:159 +0x99 fp=0xc042555f00 sp=0xc042555e48
github.com/mxplusb/bigcache/caches_bench.BenchmarkBigCacheSetParallel(0xc042088420)
        E:/Programming/Go/src/github.com/mxplusb/bigcache/caches_bench/caches_bench_test.go:79 +0x3d fp=0xc042555f38 sp=0xc042555f00
testing.(*B).runN(0xc042088420, 0x5f5e100)
        C:/Go/src/testing/benchmark.go:140 +0xb9 fp=0xc042555f78 sp=0xc042555f38
testing.(*B).launch(0xc042088420)
        C:/Go/src/testing/benchmark.go:281 +0x129 fp=0xc042555fd8 sp=0xc042555f78
runtime.goexit()
        C:/Go/src/runtime/asm_amd64.s:2197 +0x1 fp=0xc042555fe0 sp=0xc042555fd8
created by testing.(*B).doBench
        C:/Go/src/testing/benchmark.go:250 +0x77

goroutine 1 [chan receive]:
testing.(*B).doBench(0xc042088420, 0x0, 0x0, 0x0, 0x0, 0x0)
        C:/Go/src/testing/benchmark.go:251 +0xa1
testing.(*benchContext).processBench(0xc0420030e0, 0xc042088420)
        C:/Go/src/testing/benchmark.go:433 +0x1fe
testing.(*B).run(0xc042088420, 0x0, 0x0, 0x0, 0x0, 0x0)
        C:/Go/src/testing/benchmark.go:241 +0x74
testing.(*B).Run(0xc0420882c0, 0x5593df, 0x1c, 0x55dc98, 0x4b6a00)
        C:/Go/src/testing/benchmark.go:494 +0x254
testing.runBenchmarks.func1(0xc0420882c0)
        C:/Go/src/testing/benchmark.go:403 +0x6e
testing.(*B).runN(0xc0420882c0, 0x1)
        C:/Go/src/testing/benchmark.go:140 +0xb9
testing.runBenchmarks(0xc0420030c0, 0x5f6240, 0xa, 0xa, 0xc042040100)
        C:/Go/src/testing/benchmark.go:409 +0x494
testing.(*M).Run(0xc042097f20, 0xc042039f20)
        C:/Go/src/testing/testing.go:828 +0x30c
main.main()
        github.com/mxplusb/bigcache/caches_bench/_test/_testmain.go:60 +0xfe
exit status 2
FAIL    github.com/mxplusb/bigcache/caches_bench        223.732s
",5244
1605,44958839,"func initNewShard(config Config, callback onRemoveCallback) *cacheShard {
    return &cacheShard{
        hashmap:     make(map[uint64]uint32, config.initialShardSize()),
        entries:     *queue.NewBytesQueue(config.initialShardSize()*config.MaxEntrySize, config.maximumShardSize(), config.Verbose),
        entryBuffer: make([]byte, config.MaxEntrySize+headersSizeInBytes),
        onRemove:    callback,
    }
}
",418
1606,44958839,config.initialShardSize(),25
1607,44958839,"func (c Config) initialShardSize() int {
    return max(c.MaxEntriesInWindow/c.Shards, minimumEntriesInShard)
}
",112
1608,44958839,"func initNewShard(config Config, callback onRemoveCallback) *cacheShard {
    return &cacheShard{
        hashmap:     make(map[uint64]uint32, config.initialShardSize()),
        entries:     *queue.NewBytesQueue(config.initialShardSize()*config.MaxEntrySize, config.maximumShardSize(), config.Verbose),
        entryBuffer: make([]byte, config.MaxEntrySize+headersSizeInBytes),
        onRemove:    callback,
    }
}
",418
1609,45086992,"package main

import (
       ""bytes""
       ""crypto/tls""
       ""encoding/xml""
       ""fmt""
       ""io/ioutil""
       ""log""
       ""net""
       ""net/http""
       ""time""
)

// against ""unused imports""
var _ time.Time
var _ xml.Name

type Char int32

const ()

type Duration *Duration

const ()

type Guid string

const ()

type ItemAvailabilitySearchParamters struct {
       XMLName xml.Name `xml:""http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application ItemAvailabilitySearchParamters""`

       *XppObjectBase

       ParamFromDate         string `xml:""paramFromDate,omitempty""`
       ParamNumberOfFrames   int32  `xml:""paramNumberOfFrames,omitempty""`
       ParamItemDefinitionId string `xml:""paramItemDefinitionId,omitempty""`
       ParamToDate           string `xml:""paramToDate,omitempty""`
}

type ItemAvailabilityServiceNewGetDataRequest struct {
       XMLName xml.Name `xml:""http://schemas.microsoft.com/netfx/2009/05/routing ItemAvailabilityServiceNewGetDataRequest""`

       ItemAvailabilitySearchParamters *ItemAvailabilitySearchParamters `xml:""mMSItemAvailabilitySearchParamters,omitempty""`
}

type ItemAvailabilityContract struct {
       XMLName xml.Name `xml:""http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application ItemAvailabilityContract""`

       *XppObjectBase

       Pct               float64 `xml:""pct,omitempty""`
       QuantityAvailable int32   `xml:""quantityAvailable,omitempty""`
       TargetQuantity    int32   `xml:""targetQuantity,omitempty""`
}

type ArrayOfItemAvailabilityContract struct {
       XMLName xml.Name `xml:""http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application ArrayOfItemAvailabilityContract""`

       ItemAvailabilityContract []*ItemAvailabilityContract `xml:""ItemAvailabilityContract,omitempty""`
}

type XppObjectBase struct {
       XMLName xml.Name `xml:""http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.Ax.Xpp XppObjectBase""`
}



type ItemAvailabilityServiceNewGetDataResponse struct {
       XMLName xml.Name `xml:""http://schemas.microsoft.com/netfx/2009/05/routing ItemAvailabilityServiceNewGetDataResponse""`

       Response *ArrayOfItemAvailabilityContract `xml:""response,omitempty""`
}

type CallContext struct {
       XMLName xml.Name `xml:""http://schemas.microsoft.com/dynamics/2010/01/datacontracts CallContext""`

       Company      string                         `xml:""Company,omitempty""`
       Language     string                         `xml:""Language,omitempty""`
       LogonAsUser  string                         `xml:""LogonAsUser,omitempty""`
       MessageId    string                         `xml:""MessageId,omitempty""`
       PartitionKey string                         `xml:""PartitionKey,omitempty""`
       PropertyBag  *ArrayOfKeyValueOfstringstring `xml:""PropertyBag,omitempty""`
}

type ArrayOfKeyValueOfstringstring struct {
       XMLName xml.Name `xml:""http://schemas.microsoft.com/2003/10/Serialization/Arrays ArrayOfKeyValueOfstringstring""`

       KeyValueOfstringstring struct {
                      Key   string `xml:""Key,omitempty""`
                      Value string `xml:""Value,omitempty""`
               } `xml:""KeyValueOfstringstring,omitempty""`
}

type AifFault struct {
       XMLName xml.Name `xml:""http://schemas.microsoft.com/dynamics/2008/01/documents/Fault AifFault""`

       CustomDetailXml       string                   `xml:""CustomDetailXml,omitempty""`
       FaultMessageListArray *ArrayOfFaultMessageList `xml:""FaultMessageListArray,omitempty""`
       InfologMessageList    *ArrayOfInfologMessage   `xml:""InfologMessageList,omitempty""`
       StackTrace            string                   `xml:""StackTrace,omitempty""`
       XppExceptionType      int32                    `xml:""XppExceptionType,omitempty""`
}

type ArrayOfFaultMessageList struct {
       XMLName xml.Name `xml:""http://schemas.microsoft.com/dynamics/2008/01/documents/Fault ArrayOfFaultMessageList""`

       FaultMessageList []*FaultMessageList `xml:""FaultMessageList,omitempty""`
}

type FaultMessageList struct {
       XMLName xml.Name `xml:""http://schemas.microsoft.com/dynamics/2008/01/documents/Fault FaultMessageList""`

       Document                  string               `xml:""Document,omitempty""`
       DocumentOperation         string               `xml:""DocumentOperation,omitempty""`
       FaultMessageArray         *ArrayOfFaultMessage `xml:""FaultMessageArray,omitempty""`
       Field                     string               `xml:""Field,omitempty""`
       Service                   string               `xml:""Service,omitempty""`
       ServiceOperation          string               `xml:""ServiceOperation,omitempty""`
       ServiceOperationParameter string               `xml:""ServiceOperationParameter,omitempty""`
       XPath                     string               `xml:""XPath,omitempty""`
       XmlLine                   string               `xml:""XmlLine,omitempty""`
       XmlPosition               string               `xml:""XmlPosition,omitempty""`
}

type ArrayOfFaultMessage struct {
       XMLName xml.Name `xml:""http://schemas.microsoft.com/dynamics/2008/01/documents/Fault ArrayOfFaultMessage""`

       FaultMessage []*FaultMessage `xml:""FaultMessage,omitempty""`
}

type FaultMessage struct {
       XMLName xml.Name `xml:""http://schemas.microsoft.com/dynamics/2008/01/documents/Fault FaultMessage""`

       Code    string `xml:""Code,omitempty""`
       Message string `xml:""Message,omitempty""`
}

type InfologMessageType string

const (
       InfologMessageTypeInfo InfologMessageType = ""Info""

       InfologMessageTypeWarning InfologMessageType = ""Warning""

       InfologMessageTypeError InfologMessageType = ""Error""
)

type ArrayOfInfologMessage struct {
       XMLName xml.Name `xml:""http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.AX.Framework.Services ArrayOfInfologMessage""`

       InfologMessage []*InfologMessage `xml:""InfologMessage,omitempty""`
}

type InfologMessage struct {
       XMLName xml.Name `xml:""http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.AX.Framework.Services InfologMessage""`

       InfologMessageType *InfologMessageType `xml:""InfologMessageType,omitempty""`
       Message            string              `xml:""Message,omitempty""`
}

type IRequestReplyRouter struct {
       client *SOAPClient
}

func NewIRequestReplyRouter(url string, tls bool, auth *BasicAuth) *IRequestReplyRouter {
       if url == """" {
              url = """"
       }
       client := NewSOAPClient(url, tls, auth)

       return &IRequestReplyRouter{
              client: client,
       }
}

type ItemAvailabilityServiceNew struct {
       client *SOAPClient
}

func NewItemAvailabilityServiceNew(url string, tls bool, auth *BasicAuth) *ItemAvailabilityServiceNew {
       if url == """" {
              url = """"
       }
       client := NewSOAPClient(url, tls, auth)

       return &ItemAvailabilityServiceNew{
              client: client,
       }
}

// Error can be either of the following types:
//
//   - AifFaultFault

func (service *ItemAvailabilityServiceNew) GetData(request *ItemAvailabilityServiceNewGetDataRequest) (*ItemAvailabilityServiceNewGetDataResponse, error) {
       response := new(ItemAvailabilityServiceNewGetDataResponse)
       err := service.client.Call(""http://schemas.microsoft.com/netfx/2009/05/routing/ItemAvailabilityServiceNew/getData"", request, response)
       if err != nil {
              return nil, err
       }

       return response, nil
}

var timeout = time.Duration(30 * time.Second)

func dialTimeout(network, addr string) (net.Conn, error) {
       return net.DialTimeout(network, addr, timeout)
}

type SOAPEnvelope struct {
       XMLName xml.Name `xml:""http://schemas.xmlsoap.org/soap/envelope/ Envelope""`

       Body SOAPBody
}

type SOAPHeader struct {
       XMLName xml.Name `xml:""http://schemas.xmlsoap.org/soap/envelope/ Header""`

       Header interface{}
}

type SOAPBody struct {
       XMLName xml.Name `xml:""http://schemas.xmlsoap.org/soap/envelope/ Body""`

       Fault   *SOAPFault  `xml:"",omitempty""`
       Content interface{} `xml:"",omitempty""`
}

type SOAPFault struct {
       XMLName xml.Name `xml:""http://schemas.xmlsoap.org/soap/envelope/ Fault""`

       Code   string `xml:""faultcode,omitempty""`
       String string `xml:""faultstring,omitempty""`
       Actor  string `xml:""faultactor,omitempty""`
       Detail string `xml:""detail,omitempty""`
}

type BasicAuth struct {
       Login    string
       Password string
}

type SOAPClient struct {
       url  string
       tls  bool
       auth *BasicAuth
}

func (b *SOAPBody) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
       if b.Content == nil {
              return xml.UnmarshalError(""Content must be a pointer to a struct"")
       }

       var (
              token    xml.Token
              err      error
              consumed bool
       )

       Loop:
       for {
              if token, err = d.Token(); err != nil {
                     return err
              }

              if token == nil {
                     break
              }

              switch se := token.(type) {
              case xml.StartElement:
                     if consumed {
                            return xml.UnmarshalError(""Found multiple elements inside SOAP body; not wrapped-document/literal WS-I compliant"")
                     } else if se.Name.Space == ""http://schemas.xmlsoap.org/soap/envelope/"" && se.Name.Local == ""Fault"" {
                            b.Fault = &SOAPFault{}
                            b.Content = nil

                            err = d.DecodeElement(b.Fault, &se)
                            if err != nil {
                                   return err
                            }

                            consumed = true
                     } else {
                            if err = d.DecodeElement(b.Content, &se); err != nil {
                                   return err
                            }

                            consumed = true
                     }
              case xml.EndElement:
                     break Loop
              }
       }

       return nil
}

func (f *SOAPFault) Error() string {
       return f.String
}

func NewSOAPClient(url string, tls bool, auth *BasicAuth) *SOAPClient {
       return &SOAPClient{
              url:  url,
              tls:  tls,
              auth: auth,
       }
}

func (s *SOAPClient) Call(soapAction string, request, response interface{}) error {
       envelope := SOAPEnvelope{
              //Header:        SoapHeader{},
       }

       envelope.Body.Content = request
       buffer := new(bytes.Buffer)

       encoder := xml.NewEncoder(buffer)
       //encoder.Indent(""  "", ""    "")

       if err := encoder.Encode(envelope); err != nil {
              return err
       }

       if err := encoder.Flush(); err != nil {
              return err
       }

       log.Println(buffer.String())

       req, err := http.NewRequest(""POST"", s.url, buffer)
       if err != nil {
              return err
       }
       if s.auth != nil {
              req.SetBasicAuth(s.auth.Login, s.auth.Password)
       }

       req.Header.Add(""Content-Type"", ""text/xml; charset=\""utf-8\"""")
       if soapAction != """" {
              req.Header.Add(""SOAPAction"", soapAction)
       }

       req.Header.Set(""User-Agent"", ""gowsdl/0.1"")
       req.Close = true

       tr := &http.Transport{
              TLSClientConfig: &tls.Config{
                     InsecureSkipVerify: s.tls,
              },
              Dial: dialTimeout,
       }

       client := &http.Client{Transport: tr}
       res, err := client.Do(req)
       if err != nil {
              return err
       }
       defer res.Body.Close()

       rawbody, err := ioutil.ReadAll(res.Body)
       if err != nil {
              return err
       }
       if len(rawbody) == 0 {
              log.Println(""empty response"")
              return nil
       }

       log.Println(string(rawbody))
       respEnvelope := new(SOAPEnvelope)
       respEnvelope.Body = SOAPBody{Content: response}
       err = xml.Unmarshal(rawbody, respEnvelope)
       if err != nil {
              return err
       }

       fault := respEnvelope.Body.Fault
       if fault != nil {
              return fault
       }

       return nil
}



func main() {
       basicAuth := BasicAuth{Login: ""user"", Password: ""pass""}
       mMSItemAvalabilityService := NewItemAvailabilityServiceNew(""http://localhost/xppservice.svc"", false, &basicAuth)
       fmt.Println(mMSItemAvalabilityService)
        mMSItemAvailabilitySearch := ItemAvailabilitySearchParamters{

              ParamItemDefinitionId: ""Itm000001849"",
              ParamNumberOfFrames:   125,
              ParamFromDate:         ""17/7/2017"",
              ParamToDate:           ""18/7/2017"",
       }
      // fmt.Println(mMSItemAvailabilitySearch)
       mMSItemAvalabilityServiceGetRequest := ItemAvailabilityServiceNewGetDataRequest{ItemAvailabilitySearchParamters: &mMSItemAvailabilitySearch}
       fmt.Println(mMSItemAvalabilityServiceGetRequest)
       response, error := mMSItemAvalabilityService.GetData(&mMSItemAvalabilityServiceGetRequest)
       fmt.Println(error)
       if error != nil {
              fmt.Println(response)
              return
       }
}
",13288
1610,45177958,"$ ./autogen.sh
$ ./configure
$ make
$ ./tests
$ sudo make install  # optional
",78
1611,45177958,"$ sudo make install
Password:
  CC       src/libsecp256k1_la-secp256k1.lo
  CCLD     libsecp256k1.la
  CC       src/tests-tests.o
  CCLD     tests
  CC       src/exhaustive_tests-tests_exhaustive.o
  CCLD     exhaustive_tests
 build-aux/install-sh -c -d '/usr/local/lib'
 /bin/sh ./libtool   --mode=install /usr/bin/install -c   libsecp256k1.la '/usr/local/lib'
libtool: install: /usr/bin/install -c .libs/libsecp256k1.0.dylib /usr/local/lib/libsecp256k1.0.dylib
libtool: install: (cd /usr/local/lib && { ln -s -f libsecp256k1.0.dylib libsecp256k1.dylib || { rm -f libsecp256k1.dylib && ln -s libsecp256k1.0.dylib libsecp256k1.dylib; }; })
libtool: install: /usr/bin/install -c .libs/libsecp256k1.lai /usr/local/lib/libsecp256k1.la
libtool: install: /usr/bin/install -c .libs/libsecp256k1.a /usr/local/lib/libsecp256k1.a
libtool: install: chmod 644 /usr/local/lib/libsecp256k1.a
libtool: install: /usr/bin/ranlib /usr/local/lib/libsecp256k1.a
 build-aux/install-sh -c -d '/usr/local/include'
 /usr/bin/install -c -m 644 include/secp256k1.h '/usr/local/include'
 build-aux/install-sh -c -d '/usr/local/lib/pkgconfig'
 /usr/bin/install -c -m 644 libsecp256k1.pc '/usr/local/lib/pkgconfig'
",1187
1612,45177958,"$ go run main.go 
# github.com/go-steem/rpc/transactions
../../transactions/signing.c:5:10: fatal error: 'secp256k1.h' file not found
",134
1613,45177958,"$ ls -la ../../transactions/
total 48
drwxr-xr-x   8 shaunmorrow  staff   272 May  8 18:09 .
drwxr-xr-x  15 shaunmorrow  staff   510 May  8 18:09 ..
-rw-r--r--   1 shaunmorrow  staff   256 Apr 27 17:53 chains.go
-rw-r--r--   1 shaunmorrow  staff  3731 May  8 18:09 signed_transaction.go
-rw-r--r--   1 shaunmorrow  staff  1849 May  8 18:09 signed_transaction_test.go
-rw-r--r--   1 shaunmorrow  staff  3075 Apr 27 17:53 signing.c
-rw-r--r--   1 shaunmorrow  staff   408 Apr 27 17:53 signing.h
-rw-r--r--   1 shaunmorrow  staff  1049 May  8 18:09 transactions.go
",562
1614,45177958,"$ ls -la ../../transactions/
total 128
drwxr-xr-x  11 shaunmorrow  staff    374 Jul 18 19:08 .
drwxr-xr-x  15 shaunmorrow  staff    510 May  8 18:09 ..
-rw-r--r--   1 shaunmorrow  staff    256 Apr 27 17:53 chains.go
-rw-r--r--   1 shaunmorrow  staff  27071 Jul 18 19:08 secp256k1.h
-rw-r--r--   1 shaunmorrow  staff   1014 Jul 18 19:08 secp256k1_ecdh.h
-rw-r--r--   1 shaunmorrow  staff   4700 Jul 18 19:08 secp256k1_recovery.h
-rw-r--r--   1 shaunmorrow  staff   3731 Jul 18 19:05 signed_transaction.go
-rw-r--r--   1 shaunmorrow  staff   1849 May  8 18:09 signed_transaction_test.go
-rw-r--r--   1 shaunmorrow  staff   3075 Apr 27 17:53 signing.c
-rw-r--r--   1 shaunmorrow  staff    408 Apr 27 17:53 signing.h
-rw-r--r--   1 shaunmorrow  staff   1049 May  8 18:09 transactions.go
",783
1615,45177958,"$ go run main.go 
# github.com/go-steem/rpc/transactions
ld: library not found for -lsecp256k1
clang: error: linker command failed with exit code 1 (use -v to see invocation)
",175
1616,45177958,"// #cgo LDFLAGS: -lsecp256k1
// #include 
// #include ""signing.h""
import ""C""
",77
1617,45177958,"// #cgo LDFLAGS: -L/usr/local/lib
// #include 
// #include ""signing.h""
import ""C""
",82
1618,45177958,"// #cgo LDFLAGS: -L/usr/local/lib -I/usr/local/include
// #include 
// #include ""signing.h""
import ""C""
",103
1619,45177958,"$ go run main.go 
# github.com/go-steem/rpc/transactions
ld: library not found for -lsecp256k1
clang: error: linker command failed with exit code 1 (use -v to see invocation)
ShaunsSePc-2:upvote shaunmorrow$ go run main.go 
# github.com/go-steem/rpc/transactions
Undefined symbols for architecture x86_64:
  ""_secp256k1_context_create"", referenced from:
      _sign_transaction in signing.o
      _verify_recoverable_signature in signing.o
  ""_secp256k1_context_destroy"", referenced from:
      _sign_transaction in signing.o
      _verify_recoverable_signature in signing.o
  ""_secp256k1_ec_pubkey_serialize"", referenced from:
      _verify_recoverable_signature in signing.o
  ""_secp256k1_ecdsa_recover"", referenced from:
      _verify_recoverable_signature in signing.o
  ""_secp256k1_ecdsa_recoverable_signature_convert"", referenced from:
      _verify_recoverable_signature in signing.o
  ""_secp256k1_ecdsa_recoverable_signature_parse_compact"", referenced from:
      _verify_recoverable_signature in signing.o
  ""_secp256k1_ecdsa_recoverable_signature_serialize_compact"", referenced from:
      _sign_transaction in signing.o
  ""_secp256k1_ecdsa_sign_recoverable"", referenced from:
      _sign_transaction in signing.o
  ""_secp256k1_ecdsa_verify"", referenced from:
      _verify_recoverable_signature in signing.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
",1447
1620,45177958,libsecp256k1,12
1621,45177958,"$ go env
GOARCH=""amd64""
GOBIN=""""
GOEXE=""""
GOHOSTARCH=""amd64""
GOHOSTOS=""darwin""
GOOS=""darwin""
GOPATH=""/Users/shaunmorrow/Work/go/""
GORACE=""""
GOROOT=""/usr/local/go""
GOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""
GCCGO=""gccgo""
CC=""clang""
GOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/86/hlqptn5101z5bcydjz05qy8m0000gn/T/go-build689438019=/tmp/go-build -gno-record-gcc-switches -fno-common""
CXX=""clang++""
CGO_ENABLED=""1""
PKG_CONFIG=""pkg-config""
CGO_CFLAGS=""-g -O2""
CGO_CPPFLAGS=""""
CGO_CXXFLAGS=""-g -O2""
CGO_FFLAGS=""-g -O2""
CGO_LDFLAGS=""-g -O2""
",620
1622,45238337,"package main

import ""fmt""

func main() {
    fmt.Println(""hello world"")
    for i:=uint(0); i< 10; i++{
        fmt.Println(i)
    }
}
",136
1623,45238337,"$ dlv debug --headless --listen=:2345 --log --api-version=2
API server listening at: [::]:2345
",95
1624,45238337,"2017/07/20 17:23:24 debugger.go:504: continuing
2017/07/20 17:23:24 debugger.go:493: halting
2017/07/20 17:23:24 debugger.go:347: created breakpoint: &api.Breakpoint{ID:1, Name:"""", Addr:0x47bb52, File:""/....../hello/hello.go"", Line:6, FunctionName:""main.main"", Cond:"""", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(nil), LoadLocals:(*api.LoadConfig)(nil), HitCount:map[string]uint64{}, TotalHitCount:0x0}
2017/07/20 17:23:24 debugger.go:504: continuing
2017/07/20 17:23:28 debugger.go:516: nexting
hello world
2017/07/20 17:23:28 debugger.go:516: nexting
2017/07/20 17:23:29 debugger.go:516: nexting
0
2017/07/20 17:23:29 debugger.go:516: nexting
02017/07/20 17:23:29 debugger.go:516: nexting
2017/07/20 17:23:29 debugger.go:516: nexting
1
2017/07/20 17:23:29 debugger.go:516: nexting
12017/07/20 17:23:30 debugger.go:516: nexting
2017/07/20 17:23:30 debugger.go:516: nexting
2
2017/07/20 17:23:30 debugger.go:516: nexting
42017/07/20 17:23:30 debugger.go:516: nexting
2017/07/20 17:23:30 debugger.go:516: nexting
3
2017/07/20 17:23:30 debugger.go:516: nexting
92017/07/20 17:23:31 debugger.go:516: nexting
2017/07/20 17:23:31 debugger.go:516: nexting
4
2017/07/20 17:23:31 debugger.go:516: nexting
162017/07/20 17:23:31 debugger.go:516: nexting
2017/07/20 17:23:31 debugger.go:516: nexting
5
2017/07/20 17:23:32 debugger.go:516: nexting
252017/07/20 17:23:32 debugger.go:516: nexting
2017/07/20 17:23:32 debugger.go:516: nexting
6
2017/07/20 17:23:32 debugger.go:516: nexting
362017/07/20 17:23:32 debugger.go:516: nexting
2017/07/20 17:23:32 debugger.go:516: nexting
7
2017/07/20 17:23:33 debugger.go:516: nexting
492017/07/20 17:23:33 debugger.go:516: nexting
2017/07/20 17:23:33 debugger.go:516: nexting
8
2017/07/20 17:23:34 debugger.go:516: nexting
642017/07/20 17:23:34 debugger.go:516: nexting
2017/07/20 17:23:34 debugger.go:516: nexting
9
2017/07/20 17:23:34 debugger.go:516: nexting
812017/07/20 17:23:34 debugger.go:516: nexting
2017/07/20 17:23:35 debugger.go:516: nexting
2017/07/20 17:23:35 debugger.go:516: nexting
",2087
1625,45238337,"dlv debug --headless --listen=:2345 --log --api-version=2 -- --v --console
2017/07/20 17:26:51 debugger.go:97: launching process with args: [/home/...../debug --v --console]
API server listening at: [::]:2345
",209
1626,45238337,"2017/07/20 17:26:55 debugger.go:493: halting
2017/07/20 17:26:55 debugger.go:347: created breakpoint: &api.Breakpoint{ID:1, Name:"""", Addr:0x687a73, File:""/home/..........go"", Line:136, FunctionName:""main.main"", Cond:"""", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(nil), LoadLocals:(*api.LoadConfig)(nil), HitCount:map[string]uint64{}, TotalHitCount:0x0}
2017/07/20 17:26:55 debugger.go:347: created breakpoint: &api.Breakpoint{ID:2, Name:"""", Addr:0x6869b2, File:""/home/..........go"", Line:66, FunctionName:""main.main"", Cond:"""", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(nil), LoadLocals:(*api.LoadConfig)(nil), HitCount:map[string]uint64{}, TotalHitCount:0x0}
2017/07/20 17:26:55 debugger.go:504: continuing
2017/07/20 17:26:55 debugger.go:347: created breakpoint: &api.Breakpoint{ID:3, Name:"""", Addr:0x687d33, File:""/home/........go"", Line:143, FunctionName:""main.main"", Cond:"""", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(nil), LoadLocals:(*api.LoadConfig)(nil), HitCount:map[string]uint64{}, TotalHitCount:0x0}
2017/07/20 17:26:55 debugger.go:504: continuing
2017/07/20 17:26:57 debugger.go:516: nexting
",1281
1627,45238337,"dlv connect HOSTNAME:2345
Type 'help' for list of commands.
(dlv) b ********.go:137
Breakpoint 1 set at 0x687a86 for main.main() /home/*************.go:137
(dlv) c
> main.main() /home/***************************.go:137 (hits goroutine(1):1 total:1) (PC: 0x687a86)
(dlv) n
",272
1628,45238337,"$ dlv debug --headless --listen=:2345 --log --api-version=2 -- --v --console
2017/07/20 17:37:37 debugger.go:97: launching process with args: [/home/*****************/debug --v --console]
API server listening at: [::]:2345
2017/07/20 17:38:27 debugger.go:347: created breakpoint: &api.Breakpoint{ID:1, Name:"""", Addr:0x687a86, File:""/home/*******************.go"", Line:137, FunctionName:""main.main"", Cond:"""", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(nil), LoadLocals:(*api.LoadConfig)(nil), HitCount:map[string]uint64{}, TotalHitCount:0x0}
2017/07/20 17:38:35 debugger.go:504: continuing
2017/07/20 17:38:39 debugger.go:516: nexting
",692
1629,45238337,"{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""REMOTE"",
            ""type"": ""go"",
            ""request"": ""launch"",
            ""mode"": ""remote"",
            ""remotePath"": ""{workspaceRoot}"",
            ""port"": 2345,
            ""host"": ""REMOTE_HOST_NAME"",
            ""program"":  ""${workspaceRoot}"", //""${fileDirname}"",
            ""env"": {},
            ""args"": [""--v"", ""--console""],
            ""showLog"": true
        }
    ]
}
",465
1630,45240642,"package main

import (
    ""bytes""
    ""database/sql""
    ""flag""
    // ""github.com/garyburd/redigo/redis""
    _ ""github.com/go-sql-driver/mysql""
    //""gopkg.in/redis.v4""
    ""github.com/chasex/redis-go-cluster""
    ""log""
    ""runtime""
    // ""strings""
    ""sync""
    ""time""

)

var client *redis.Cluster

type Task interface {
    Execute()
}

type Pool struct {
    mu sync.Mutex

    size  int
    tasks chan Task
    kill  chan struct{}
    wg    sync.WaitGroup
}

func NewPool(size int) *Pool {
    pool := &Pool{
        tasks: make(chan Task, 128),
        kill:  make(chan struct{}),
    }
    pool.Resize(size)
    return pool
}

func (p *Pool) worker() {
    defer p.wg.Done()
    for {
        select {
        case task, ok := <-p.tasks:
            if !ok {
                return
            }
            task.Execute()
        case <-p.kill:
            return
        }
    }
}

func (p *Pool) Resize(n int) {
    p.mu.Lock()
    defer p.mu.Unlock()
    for p.size < n {
        p.size++
        p.wg.Add(1)
        go p.worker()
    }
    for p.size > n {
        p.size--
        p.kill <- struct{}{}
    }
}

func (p *Pool) Close() {
    close(p.tasks)
}

func (p *Pool) Wait() {
    p.wg.Wait()
}

func (p *Pool) Exec(task Task) {
    p.tasks <- task
}

type RedisTask struct {
    Index   int
    Command string
    Key     string
    Value   string
    MapData map[string]string
}

func (e RedisTask) Execute() {
    log.Println(""executing:"", e.Key, "","", e.Index)

    if e.Command == ""SET"" {
        _,err := redis.String(client.Do(""SET"", e.Key, e.Value))
        checkErr(err, ""set error:"")
    } else if e.Command == ""SADD"" {
        _,err := redis.Strings(client.Do(""SADD"", e.Key, e.Value))
        checkErr(err, ""sadd error:"") 
    } else if e.Command == ""HMSET"" {
        _,err := redis.StringMap(client.Do(""HMSET"", e.Key, e.MapData))
        checkErr(err, ""hmset error:"")
    }
    // TODO: clean data
}

func main() {
    runtime.GOMAXPROCS(runtime.NumCPU())
    startTime := time.Now().UnixNano() / int64(time.Millisecond)
    host := flag.String(""s"", ""localhost:3306"", ""mysql server host and port ,eg localhost:3306"")
    username := flag.String(""u"", ""test"", ""username to login mysql"")
    password := flag.String(""p"", ""test"", ""password for mysql"")
    database := flag.String(""d"", ""test"", ""database you want to execute query"")
    query := flag.String(""q"", ""select 1;"", ""your query sql"")
    ds := flag.String(""ds"", ""key"", ""redis structure"")
    PK := flag.String(""pk"", ""Rkey"", ""the redis Key in the fields of mysql query result"")

    //redisHost := flag.String(""rs"", ""localhost:6379"", ""redis host and port ,eg localhost:6379"")
    //redisPassword := flag.String(""rp"", ""test"", ""redis password"")

    poolSize := flag.Int(""size"", 10000, ""redis pool size"")

    flag.Parse()
    var buf bytes.Buffer = bytes.Buffer{}
    buf.WriteString(*username)
    buf.WriteString("":"")
    buf.WriteString(*password)
    buf.WriteString(""@tcp("")
    buf.WriteString(*host)
    buf.WriteString("")/"")
    buf.WriteString(*database)

    db, err := sql.Open(""mysql"", buf.String())
    checkErr(err, ""connect to mysql error !"")
    defer db.Close()

    poolWorker := NewPool(*poolSize)

    // Execute the query
    rows, err := db.Query(*query)
    checkErr(err, ""execute sql error!"")

    // pool = newPool(*redisHost, *redisPassword, *poolSize)

    //client = redis.NewClient(&redis.Options{
    //  Addr:     *redisHost,
    //  Password: *redisPassword, // no password set
    //  DB:       0,              // use default DB
    //})

    client,_ = redis.NewCluster(&redis.Options{
            StartNodes: []string{""10.x.x.x:6000"", ""10.x.x.x:6001"", ""10.x.x.x:6002""},
            ConnTimeout: 50 * time.Millisecond,
            ReadTimeout: 50 * time.Millisecond,
            WriteTimeout: 50 * time.Millisecond,
            KeepAlive: 16,
            AliveTime: 60 * time.Second,
    })
    //checkErr(err, ""client error:"")

    //pong, err := client.Ping().Result()
    //checkErr(err, ""redis client error:"")
    //log.Println(pong)

    columns, err := rows.Columns()
    checkErr(err, ""get columns error!"")

    length := len(columns)
    values := make([]sql.RawBytes, length)

    scanArgs := make([]interface{}, len(values))
    for i := range values {
        scanArgs[i] = &values[i]
    }

    count := 0
    for rows.Next() {
        count += 1
        err = rows.Scan(scanArgs...)
        checkErr(err, ""scan error"")

        var value string
        var key string

        var task RedisTask

        if *ds == ""key"" {
            key = getStringData(values[0])
            value = getStringData(values[1])
            if value != """" {
                task = RedisTask{
                    Index:   count,
                    Command: ""SET"",
                    Key:     key,
                    Value:   value,
                }
            }
        } else if *ds == ""set"" {
            key = getStringData(values[0])
            value = getStringData(values[1])
            if value != """" {
                task = RedisTask{
                    Index:   count,
                    Command: ""SADD"",
                    Key:     key,
                    Value:   value,
                }
            }
        } else if *ds == ""hash"" {
            key = getStringData(values[0])
            // args := redis.Args{}.Add(key)

            m := make(map[string]string)

            for i, col := range values {
                if col != nil && columns[i] != *PK {
                    value = getStringData(col)
                    m[columns[i]] = value
                }
            }
            task = RedisTask{
                Index:   count,
                Command: ""HMSET"",
                Key:     key,
                MapData: m,
            }
        }
        poolWorker.Exec(task)
    }
    if err = rows.Err(); err != nil {
        panic(err.Error()) // proper error handling instead of panic in your app
    }

    poolWorker.Close()

    poolWorker.Wait()

    EndTime := time.Now().UnixNano() / int64(time.Millisecond)
    log.Println(""======================================== executing time:"", EndTime-startTime, "" ms, total:"", count)
}

func getStringData(data sql.RawBytes) string {
    if data == nil {
        return """"
    }
    value := string(data)
    return clearBad(value)
}

func clearBad(str string) string {
    // str = strings.Trim(str, ""`"")
    // str = strings.Trim(str, ""ï½€"")
    // str = strings.Trim(str, ""-"")
    // str = strings.Trim(str, ""."")
    // str = strings.Trim(str, "" "")
    // str = strings.Trim(str, "";"")
    // str = strings.Trim(str, "","")
    // str = strings.Trim(str, "":"")
    // str = strings.Trim(str, "";"")
    // str = strings.Trim(str, ""'"")
    // str = strings.Trim(str, ""!"")
    return str
}

func checkErr(err error, msg string) {
    if err != nil {
        log.Fatalln(msg, err)
    }
}
",6891
1631,45240642,"./rak -u user -p user -s 10.X.X.X:8080 -d test -q ""SELECT CONCAT( 'student:', c.sid ) Rkey, c.sname SNAME, c.saddress SADDRESS, c.sage SAGE FROM STUDENT c WHERE c.sid  > 0;"" -ds hash -size 1200
2017/07/21 10:29:09 rak.go:93: executing: student:2 , 2
2017/07/21 10:29:09 rak.go:93: executing: student:1 , 1
2017/07/21 10:29:09 rak.go:93: executing: student:3 , 3
2017/07/21 10:29:09 rak.go:268: hmset error: Do: unknown type map[string]string
$
",444
1632,45243027,"clusterCfg.ConnectTimeout undefined (type *gocql.ClusterConfig has no field 
or method ConnectTimeout)
",103
1633,45243027,"go env
GOARCH=""amd64""
GOBIN=""""
GOEXE=""""
GOHOSTARCH=""amd64""
GOHOSTOS=""linux""
GOOS=""linux""
GOPATH=""/home/developer/gocode""
GORACE=""""
GOROOT=""/usr/local/go""
GOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""
CC=""gcc""
GOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-
map=/tmp/go-build098468995=/tmp/go-build -gno-record-gcc-switches""
CXX=""g++""
CGO_ENABLED=""1""
",370
1634,45243027,"    {
        ""Dir"": ""/home/developer/gocode/src/github.com/gocql/gocql"",
        ""ImportPath"": ""github.com/gocql/gocql"",
        ""Name"": ""gocql"",
        ""Doc"": ""Package gocql implements a fast and robust Cassandra driver 
         for the Go programming language."",
        ""Target"": 
        ""/home/developer/gocode/pkg/linux_amd64/github.com/gocql/gocql.a"",
        ""Root"": ""/home/developer/gocode"",
        ""GoFiles"": [
            ""address_translators.go"",
            ""cluster.go"",
            ""compressor.go"",
            ""conn.go"",
            ""connectionpool.go"",
            ""control.go"",
            ""debug_off.go"",
            ""doc.go"",
            ""errors.go"",
            ""events.go"",
            ""filters.go"",
            ""frame.go"",
            ""helpers.go"",
            ""host_source.go"",
            ""marshal.go"",
            ""metadata.go"",
            ""policies.go"",
            ""prepared_cache.go"",
            ""query_executor.go"",
            ""ring.go"",
            ""session.go"",
            ""token.go"",
            ""topology.go"",
            ""uuid.go""
        ],
        ""IgnoredGoFiles"": [
            ""batch_test.go"",
            ""cass1batch_test.go"",
            ""cassandra_test.go"",
            ""compressor_test.go"",
            ""conn_test.go"",
            ""debug_on.go"",
            ""errors_test.go"",
            ""events_ccm_test.go"",
            ""fuzz.go"",
            ""marshal_test.go"",
            ""session_test.go"",
            ""stress_test.go"",
            ""topology_test.go"",
            ""tuple_test.go"",
            ""udt_test.go"",
            ""uuid_test.go"",
            ""wiki_test.go""
        ],
        ""Imports"": [
            ""bufio"",
            ""bytes"",
            ""crypto/md5"",
            ""crypto/rand"",
            ""crypto/tls"",
            ""crypto/x509"",
            ""encoding/binary"",
            ""encoding/hex"",
            ""encoding/json"",
            ""errors"",
            ""fmt"",
            ""github.com/gocql/gocql/internal/lru"",
            ""github.com/gocql/gocql/internal/murmur"",
            ""github.com/gocql/gocql/internal/streams"",
            ""github.com/golang/snappy"",
            ""github.com/hailocab/go-hostpool"",
            ""golang.org/x/net/context"",
            ""gopkg.in/inf.v0"",
            ""io"",
            ""io/ioutil"",
            ""log"",
            ""math"",
            ""math/big"",
            ""math/rand"",
            ""net"",
            ""reflect"",
            ""regexp"",
            ""runtime"",
            ""sort"",
            ""strconv"",
            ""strings"",
            ""sync"",
            ""sync/atomic"",
            ""time"",
            ""unicode""
        ],
        ""Deps"": [
            ""bufio"",
            ""bytes"",
            ""container/list"",
            ""context"",
            ""crypto"",
            ""crypto/aes"",
            ""crypto/cipher"",
            ""crypto/des"",
            ""crypto/dsa"",
            ""crypto/ecdsa"",
            ""crypto/elliptic"",
            ""crypto/hmac"",
            ""crypto/md5"",
            ""crypto/rand"",
            ""crypto/rc4"",
            ""crypto/rsa"",
            ""crypto/sha1"",
            ""crypto/sha256"",
            ""crypto/sha512"",
            ""crypto/subtle"",
            ""crypto/tls"",
            ""crypto/x509"",
            ""crypto/x509/pkix"",
            ""encoding"",
            ""encoding/asn1"",
            ""encoding/base64"",
            ""encoding/binary"",
            ""encoding/hex"",
            ""encoding/json"",
            ""encoding/pem"",
            ""errors"",
            ""fmt"",
            ""github.com/gocql/gocql/internal/lru"",
            ""github.com/gocql/gocql/internal/murmur"",
            ""github.com/gocql/gocql/internal/streams"",
            ""github.com/golang/snappy"",
            ""github.com/hailocab/go-hostpool"",
            ""golang.org/x/net/context"",
            ""gopkg.in/inf.v0"",
            ""hash"",
            ""hash/crc32"",
            ""internal/nettrace"",
            ""internal/race"",
            ""internal/singleflight"",
            ""internal/syscall/unix"",
            ""io"",
            ""io/ioutil"",
            ""log"",
            ""math"",
            ""math/big"",
            ""math/rand"",
            ""net"",
            ""os"",
            ""path/filepath"",
            ""reflect"",
            ""regexp"",
            ""regexp/syntax"",
            ""runtime"",
            ""runtime/cgo"",
            ""runtime/internal/atomic"",
            ""runtime/internal/sys"",
            ""sort"",
            ""strconv"",
            ""strings"",
            ""sync"",
            ""sync/atomic"",
            ""syscall"",
            ""time"",
            ""unicode"",
            ""unicode/utf16"",
            ""unicode/utf8"",
            ""unsafe""
        ],
        ""TestGoFiles"": [
            ""address_translators_test.go"",
            ""cluster_test.go"",
            ""common_test.go"",
            ""control_test.go"",
            ""events_test.go"",
            ""filters_test.go"",
            ""frame_test.go"",
            ""framer_bench_test.go"",
            ""host_source_test.go"",
            ""metadata_test.go"",
            ""policies_test.go"",
            ""ring_test.go"",
            ""session_connect_test.go"",
            ""token_test.go""
        ],
        ""TestImports"": [
            ""bytes"",
            ""compress/gzip"",
            ""flag"",
            ""fmt"",
            ""github.com/hailocab/go-hostpool"",
            ""golang.org/x/net/context"",
            ""io/ioutil"",
            ""log"",
            ""math/big"",
            ""net"",
            ""os"",
            ""sort"",
            ""strconv"",
            ""strings"",
            ""sync"",
            ""testing"",
            ""time""
        ]
    }
",5609
1635,45264265," package main

import (
    ""fmt""
    ""html/template""
    ""log""
    ""net/http""
    ""strings""
)

func sayhelloName(w http.ResponseWriter, r *http.Request) {
    r.ParseForm() //Parse url parameters passed, then parse the response packet for the POST body (request body)
    // attention: If you do not call ParseForm method, the following data can not be obtained form
    fmt.Println(r.Form) // print information on server side.
    fmt.Println(""path"", r.URL.Path)
    fmt.Println(""scheme"", r.URL.Scheme)
    fmt.Println(r.Form[""url_long""])
    for k, v := range r.Form {
        fmt.Println(""key:"", k)
        fmt.Println(""val:"", strings.Join(v, """"))
    }
    fmt.Fprintf(w, ""Hello astaxie!"") // write data to response
}

func login(w http.ResponseWriter, r *http.Request) {
    fmt.Println(""method:"", r.Method) //get request method
    if r.Method == ""GET"" {
        t, _ := template.ParseFiles(""login.gtpl"")
        t.Execute(w, nil)
    } else {
        r.ParseForm()
        // logic part of log in
        fmt.Println(""username:"", r.Form[""username""])
        fmt.Println(""password:"", r.Form[""password""])
    }
}

func main() {
    http.HandleFunc(""/"", sayhelloName) // setting router rule
    http.HandleFunc(""/login"", login)
    err := http.ListenAndServe("":9090"", nil) // setting listening port
    if err != nil {
        log.Fatal(""ListenAndServe: "", err)
    }
}
",1375
1636,45264265,"
    
    
    
    
        
            Username:
            Password:
            
        
    

",102
1637,45264265,"2017/07/23 18:41:29 http: panic serving 127.0.0.1:61254: runtime error: invalid
memory address or nil pointer dereference
goroutine 18 [running]:
net/http.(*conn).serve.func1(0xc04203adc0)
        C:/Go/src/net/http/server.go:1721 +0xd7
panic(0x717940, 0x901950)
        C:/Go/src/runtime/panic.go:489 +0x2dd
html/template.(*Template).escape(0x0, 0x0, 0x0)
        C:/Go/src/html/template/template.go:94 +0x3f
html/template.(*Template).Execute(0x0, 0x8da500, 0xc0420fa0e0, 0x0, 0x0, 0xc0420
08390, 0x90e480)
        C:/Go/src/html/template/template.go:117 +0x36
main.login(0x8de180, 0xc0420fa0e0, 0xc042030400)
        D:/sample/src/github.com/sunilrajramchandani/astaxie/web.go:29 +0x47e
net/http.HandlerFunc.ServeHTTP(0x786e68, 0x8de180, 0xc0420fa0e0, 0xc042030400)
        C:/Go/src/net/http/server.go:1942 +0x4b
net/http.(*ServeMux).ServeHTTP(0x90e480, 0x8de180, 0xc0420fa0e0, 0xc042030400)
        C:/Go/src/net/http/server.go:2238 +0x137
net/http.serverHandler.ServeHTTP(0xc04207ab00, 0x8de180, 0xc0420fa0e0, 0xc042030
400)
        C:/Go/src/net/http/server.go:2568 +0x99
net/http.(*conn).serve(0xc04203adc0, 0x8de740, 0xc04203e3c0)
        C:/Go/src/net/http/server.go:1825 +0x619
created by net/http.(*Server).Serve
        C:/Go/src/net/http/server.go:2668 +0x2d5
method: GET
2017/07/23 18:41:29 http: panic serving 127.0.0.1:61255: runtime error: invalid
memory address or nil pointer dereference
goroutine 4 [running]:
net/http.(*conn).serve.func1(0xc0420f0000)
        C:/Go/src/net/http/server.go:1721 +0xd7
panic(0x717940, 0x901950)
        C:/Go/src/runtime/panic.go:489 +0x2dd
html/template.(*Template).escape(0x0, 0x0, 0x0)
        C:/Go/src/html/template/template.go:94 +0x3f
html/template.(*Template).Execute(0x0, 0x8da500, 0xc04213e000, 0x0, 0x0, 0xc0421
36090, 0x90e480)
        C:/Go/src/html/template/template.go:117 +0x36
main.login(0x8de180, 0xc04213e000, 0xc042030500)
        D:/sample/src/github.com/sunilrajramchandani/astaxie/web.go:29 +0x47e
net/http.HandlerFunc.ServeHTTP(0x786e68, 0x8de180, 0xc04213e000, 0xc042030500)
        C:/Go/src/net/http/server.go:1942 +0x4b
net/http.(*ServeMux).ServeHTTP(0x90e480, 0x8de180, 0xc04213e000, 0xc042030500)
        C:/Go/src/net/http/server.go:2238 +0x137
net/http.serverHandler.ServeHTTP(0xc04207ab00, 0x8de180, 0xc04213e000, 0xc042030
500)
        C:/Go/src/net/http/server.go:2568 +0x99
net/http.(*conn).serve(0xc0420f0000, 0x8de740, 0xc04203e500)
        C:/Go/src/net/http/server.go:1825 +0x619
created by net/http.(*Server).Serve
        C:/Go/src/net/http/server.go:2668 +0x2d5
method: GET
2017/07/23 18:41:29 http: panic serving 127.0.0.1:61257: runtime error: invalid
memory address or nil pointer dereference
goroutine 6 [running]:
net/http.(*conn).serve.func1(0xc0420f00a0)
        C:/Go/src/net/http/server.go:1721 +0xd7
panic(0x717940, 0x901950)
        C:/Go/src/runtime/panic.go:489 +0x2dd
html/template.(*Template).escape(0x0, 0x0, 0x0)
        C:/Go/src/html/template/template.go:94 +0x3f
html/template.(*Template).Execute(0x0, 0x8da500, 0xc0420fa2a0, 0x0, 0x0, 0xc0420
084b0, 0x90e480)
        C:/Go/src/html/template/template.go:117 +0x36
main.login(0x8de180, 0xc0420fa2a0, 0xc042162000)
        D:/sample/src/github.com/sunilrajramchandani/astaxie/web.go:29 +0x47e
net/http.HandlerFunc.ServeHTTP(0x786e68, 0x8de180, 0xc0420fa2a0, 0xc042162000)
        C:/Go/src/net/http/server.go:1942 +0x4b
net/http.(*ServeMux).ServeHTTP(0x90e480, 0x8de180, 0xc0420fa2a0, 0xc042162000)
        C:/Go/src/net/http/server.go:2238 +0x137
net/http.serverHandler.ServeHTTP(0xc04207ab00, 0x8de180, 0xc0420fa2a0, 0xc042162
000)
        C:/Go/src/net/http/server.go:2568 +0x99
net/http.(*conn).serve(0xc0420f00a0, 0x8de740, 0xc04210c140)
        C:/Go/src/net/http/server.go:1825 +0x619
created by net/http.(*Server).Serve
        C:/Go/src/net/http/server.go:2668 +0x2d5
method: GET
2017/07/23 18:41:29 http: panic serving 127.0.0.1:61259: runtime error: invalid
memory address or nil pointer dereference
goroutine 8 [running]:
net/http.(*conn).serve.func1(0xc0420f0140)
        C:/Go/src/net/http/server.go:1721 +0xd7
panic(0x717940, 0x901950)
        C:/Go/src/runtime/panic.go:489 +0x2dd
html/template.(*Template).escape(0x0, 0x0, 0x0)
        C:/Go/src/html/template/template.go:94 +0x3f
html/template.(*Template).Execute(0x0, 0x8da500, 0xc0420ec1c0, 0x0, 0x0, 0xc0420
62f30, 0x90e480)
        C:/Go/src/html/template/template.go:117 +0x36
main.login(0x8de180, 0xc0420ec1c0, 0xc042000400)
        D:/sample/src/github.com/sunilrajramchandani/astaxie/web.go:29 +0x47e
net/http.HandlerFunc.ServeHTTP(0x786e68, 0x8de180, 0xc0420ec1c0, 0xc042000400)
        C:/Go/src/net/http/server.go:1942 +0x4b
net/http.(*ServeMux).ServeHTTP(0x90e480, 0x8de180, 0xc0420ec1c0, 0xc042000400)
        C:/Go/src/net/http/server.go:2238 +0x137
net/http.serverHandler.ServeHTTP(0xc04207ab00, 0x8de180, 0xc0420ec1c0, 0xc042000
400)
        C:/Go/src/net/http/server.go:2568 +0x99
net/http.(*conn).serve(0xc0420f0140, 0x8de740, 0xc04200a5c0)
        C:/Go/src/net/http/server.go:1825 +0x619
created by net/http.(*Server).Serve
        C:/Go/src/net/http/server.go:2668 +0x2d5
method: GET
2017/07/23 18:41:34 http: panic serving 127.0.0.1:61264: runtime error: invalid
memory address or nil pointer dereference
goroutine 34 [running]:
net/http.(*conn).serve.func1(0xc042198000)
        C:/Go/src/net/http/server.go:1721 +0xd7
panic(0x717940, 0x901950)
        C:/Go/src/runtime/panic.go:489 +0x2dd
html/template.(*Template).escape(0x0, 0x0, 0x0)
        C:/Go/src/html/template/template.go:94 +0x3f
html/template.(*Template).Execute(0x0, 0x8da500, 0xc04213e1c0, 0x0, 0x0, 0xc0421
361b0, 0x90e480)
        C:/Go/src/html/template/template.go:117 +0x36
main.login(0x8de180, 0xc04213e1c0, 0xc042030600)
        D:/sample/src/github.com/sunilrajramchandani/astaxie/web.go:29 +0x47e
net/http.HandlerFunc.ServeHTTP(0x786e68, 0x8de180, 0xc04213e1c0, 0xc042030600)
        C:/Go/src/net/http/server.go:1942 +0x4b
net/http.(*ServeMux).ServeHTTP(0x90e480, 0x8de180, 0xc04213e1c0, 0xc042030600)
        C:/Go/src/net/http/server.go:2238 +0x137
net/http.serverHandler.ServeHTTP(0xc04207ab00, 0x8de180, 0xc04213e1c0, 0xc042030
600)
        C:/Go/src/net/http/server.go:2568 +0x99
net/http.(*conn).serve(0xc042198000, 0x8de740, 0xc04203e780)
        C:/Go/src/net/http/server.go:1825 +0x619
created by net/http.(*Server).Serve
        C:/Go/src/net/http/server.go:2668 +0x2d5
method: GET
2017/07/23 18:42:04 http: panic serving 127.0.0.1:61279: runtime error: invalid
memory address or nil pointer dereference
goroutine 36 [running]:
net/http.(*conn).serve.func1(0xc0421980a0)
        C:/Go/src/net/http/server.go:1721 +0xd7
panic(0x717940, 0x901950)
        C:/Go/src/runtime/panic.go:489 +0x2dd
html/template.(*Template).escape(0x0, 0x0, 0x0)
        C:/Go/src/html/template/template.go:94 +0x3f
html/template.(*Template).Execute(0x0, 0x8da500, 0xc0420fa460, 0x0, 0x0, 0xc0420
085d0, 0x90e480)
        C:/Go/src/html/template/template.go:117 +0x36
main.login(0x8de180, 0xc0420fa460, 0xc042162100)
        D:/sample/src/github.com/sunilrajramchandani/astaxie/web.go:29 +0x47e
net/http.HandlerFunc.ServeHTTP(0x786e68, 0x8de180, 0xc0420fa460, 0xc042162100)
        C:/Go/src/net/http/server.go:1942 +0x4b
net/http.(*ServeMux).ServeHTTP(0x90e480, 0x8de180, 0xc0420fa460, 0xc042162100)
        C:/Go/src/net/http/server.go:2238 +0x137
net/http.serverHandler.ServeHTTP(0xc04207ab00, 0x8de180, 0xc0420fa460, 0xc042162
100)
        C:/Go/src/net/http/server.go:2568 +0x99
net/http.(*conn).serve(0xc0421980a0, 0x8de740, 0xc04210c3c0)
        C:/Go/src/net/http/server.go:1825 +0x619
created by net/http.(*Server).Serve
        C:/Go/src/net/http/server.go:2668 +0x2d5
method: GET
2017/07/23 18:43:04 http: panic serving 127.0.0.1:61329: runtime error: invalid
memory address or nil pointer dereference
goroutine 10 [running]:
net/http.(*conn).serve.func1(0xc0420f01e0)
        C:/Go/src/net/http/server.go:1721 +0xd7
panic(0x717940, 0x901950)
        C:/Go/src/runtime/panic.go:489 +0x2dd
html/template.(*Template).escape(0x0, 0x0, 0x0)
        C:/Go/src/html/template/template.go:94 +0x3f
html/template.(*Template).Execute(0x0, 0x8da500, 0xc04213e380, 0x0, 0x0, 0xc0421
362d0, 0x90e480)
        C:/Go/src/html/template/template.go:117 +0x36
main.login(0x8de180, 0xc04213e380, 0xc042030700)
        D:/sample/src/github.com/sunilrajramchandani/astaxie/web.go:29 +0x47e
net/http.HandlerFunc.ServeHTTP(0x786e68, 0x8de180, 0xc04213e380, 0xc042030700)
        C:/Go/src/net/http/server.go:1942 +0x4b
net/http.(*ServeMux).ServeHTTP(0x90e480, 0x8de180, 0xc04213e380, 0xc042030700)
        C:/Go/src/net/http/server.go:2238 +0x137
net/http.serverHandler.ServeHTTP(0xc04207ab00, 0x8de180, 0xc04213e380, 0xc042030
700)
        C:/Go/src/net/http/server.go:2568 +0x99
net/http.(*conn).serve(0xc0420f01e0, 0x8de740, 0xc04203e880)
        C:/Go/src/net/http/server.go:1825 +0x619
created by net/http.(*Server).Serve
        C:/Go/src/net/http/server.go:2668 +0x2d5
",8980
1638,45269528,INSERT INTO,11
1639,45269528,map,3
1640,45269528,chan,4
1641,45269528,"func producer(ops chan BatchOp, ...) {
    // Iterate over all tables that we want to fetch documents from
    for _, table := range schema.Schema[0].Tables {

        // Run some aggregation to fetch the documents and create an iterator
        pipe := mongoDb.C(table.Collection).Pipe(table.Pipeline)
        iter := pipe.Batch(200).AllowDiskUse().Iter()

        const RESULTS_BUFFER_SIZE = 200


        result := bson.M{}
        results := make([]bson.M, 0, RESULTS_BUFFER_SIZE)

        // The flush function sends a batch of data into the channel
        flush := func() {
            fmt.Printf(""Flushing %d items\n"", len(results))
            ops <- BatchOp{
                Insert,
                table.Collection,
                results,
            }
            results = make([]bson.M, 0, RESULTS_BUFFER_SIZE)
        }

        // Iterate over the results from MongoDB and append each document 
        // to the results slice
        for iter.Next(&result) {
            results = append(results, bson.M{
                ""_id"": result[""_id""],
                ""name"": result[""Name""],
                ""i"": result[""i""],
            })

            // ... flush the results slice as soon as its big enough
            if len(results) == RESULTS_BUFFER_SIZE {
                flush()
            }
        }

        // Flush the last contents of the results slice
        if len(results) > 0 {
            flush()
        }

        if err := iter.Close(); err != nil {
            panic(err)
        }
    }
}


type BatchOp struct {
    data       []bson.M // bson.M is defined as: type M map[string]interface{} 
}
ops := make(chan BatchOp)
",1658
1642,45269528,data,4
1643,45269528,"func writer(schema *db.SchemaSchema, ops chan BatchOp, psql *sql.DB) {
    // ...

    for {
        op := <-ops

        fmt.Printf(""Writing %d rows\n"", len(op.data))
        _, err := psql.Exec(db.GenerateInsert(table, op.data))
        // ...
        fmt.Printf(""Wrote %d rows\n"", len(op.data))
    }
}

// Generate the INSERT INTO statement for a slice of documents from MongoDB
func GenerateInsert(table Table, data []bson.M) (sql string) {
    sql = fmt.Sprintf(`INSERT INTO ""%s"" (`, table.Table)
    for i, column := range table.Columns {
        sql += `""` + column.SqlName + `""`
        if i < len(table.Columns)-1 {
            sql += "", ""
        }
    }

    sql += "") VALUES ""
    for i, row := range data {
        sql += ""(""
        for j, column := range table.Columns {

            // !!!!!! THIS !!!!!!! is the row that blocks and would just not get called sometimes
            switch v := row[column.Name].(type) {
            case nil:
                sql += ""NULL""
            case int:
                sql += fmt.Sprintf(`%v`, v)
            default:
                sql += fmt.Sprintf(`'%v'`, v)
            }

            if j < len(table.Columns)-1 {
                sql += "", ""
            }
        }
        sql += "")""

        if i < len(data)-1 {
            sql += "", ""
        }
    }

    return sql
}
",1337
1644,45269528,row[column.Name],16
1645,45269528,map,3
1646,45269528,go run insert.go,16
1647,45269528,foos,4
1648,45269528,go run main.go,14
1649,45269528,"Creating table foos
Creating table bars
Seeding table foos from collection foos
Flushing 200 items
Writing 200 rows
Flushing 200 items
Wrote 200 rows
Writing 200 rows
Flushing 200 items
Wrote 200 rows
Writing 200 rows
Flushing 200 items
Wrote 200 rows
Writing 200 rows
Flushing 200 items
Wrote 200 rows
Writing 200 rows
Flushing 111 items
Wrote 200 rows
Writing 111 rows
Seeding table bars from collection bars
Seeding done",423
1650,45269528,Writing 111 rows,16
1651,45269528,Wrote 111 rows,14
1652,45269528,Wrote 111 rows,14
1653,45269528,GenerateInsert,14
1654,45269528,"return ""SELECT 1""",17
1655,45269528,data,4
1656,45269528,"^\SIGQUIT: quit
PC=0x10566a3 m=0 sigcode=0

goroutine 0 [idle]:
runtime.mach_semaphore_timedwait(0xf03, 0x186a0, 0x7fff5fbff3ec, 0x0, 0x186a05fbff428, 0x1455b60, 0x7fff5fbff420, 0x1050d63, 0x186a0, 0xffffffff, ...)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/sys_darwin_amd64.s:425 +0x13
runtime.semasleep1(0x186a0, 0xffffffff)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/os_darwin.go:402 +0xe1
runtime.semasleep.func1()
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/os_darwin.go:432 +0x33
runtime.systemstack(0x7fff5fbff448)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/asm_amd64.s:343 +0xab
runtime.semasleep(0x186a0, 0xffffffff)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/os_darwin.go:433 +0x4d
runtime.notetsleep_internal(0x1455808, 0x186a0, 0x1455b60, 0x14d44e02e4b89c75, 0x1455b00)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/lock_sema.go:198 +0x79
runtime.notetsleep(0x1455808, 0x186a0, 0x0)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/lock_sema.go:246 +0x75
runtime.stopTheWorldWithSema()
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/proc.go:1029 +0x274
runtime.systemstack(0x1455b00)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/asm_amd64.s:327 +0x79
runtime.mstart()
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/proc.go:1132

goroutine 26 [running]:
runtime.systemstack_switch()
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/asm_amd64.s:281 fp=0xc42004d608 sp=0xc42004d600
runtime.gcStart(0x0, 0x12ec200)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/mgc.go:1010 +0x208 fp=0xc42004d640 sp=0xc42004d608
runtime.mallocgc(0x2000, 0x0, 0xc420114300, 0xc420248000)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/malloc.go:785 +0x491 fp=0xc42004d6e0 sp=0xc42004d640
runtime.rawstring(0x1f60, 0x0, 0x0, 0x0, 0x0, 0x0)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/string.go:237 +0x85 fp=0xc42004d710 sp=0xc42004d6e0
runtime.rawstringtmp(0x0, 0x1f60, 0x13, 0x1f5e, 0xc420248000, 0x1f5e, 0x1f5e)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/string.go:107 +0x78 fp=0xc42004d750 sp=0xc42004d710
runtime.concatstrings(0x0, 0xc42004d830, 0x2, 0x2, 0xc420248000, 0x1f5e)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/string.go:46 +0xf9 fp=0xc42004d7e8 sp=0xc42004d750
runtime.concatstring2(0x0, 0xc420248000, 0x1f5e, 0x130caaa, 0x2, 0xc420248000, 0x1f5e)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/string.go:55 +0x47 fp=0xc42004d828 sp=0xc42004d7e8
_/Users/erikmuttersbach/Projects/mongo2psql-go/db.GenerateInsert(0xc420103870, 0x4, 0xc420103790, 0x4, 0xc4201098c0, 0x1, 0x4, 0xc420124100, 0x3, 0x4, ...)
    /Users/erikmuttersbach/Projects/mongo2psql-go/db/sql.go:31 +0x46f fp=0xc42004da10 sp=0xc42004d828
main.writer(0xc420108200, 0xc4200728a0, 0xc4200c0280)
    /Users/erikmuttersbach/Projects/mongo2psql-go/main.go:111 +0x3b4 fp=0xc42004dfc8 sp=0xc42004da10
runtime.goexit()
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/asm_amd64.s:2197 +0x1 fp=0xc42004dfd0 sp=0xc42004dfc8
created by main.main
    /Users/erikmuttersbach/Projects/mongo2psql-go/main.go:181 +0x135

goroutine 1 [running]:
    goroutine running on other thread; stack unavailable

goroutine 17 [syscall, 10 minutes, locked to thread]:
runtime.goexit()
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/asm_amd64.s:2197 +0x1

goroutine 20 [chan receive, 10 minutes]:
database/sql.(*DB).connectionOpener(0xc4200c0280)
    /usr/local/Cellar/go/1.8.3/libexec/src/database/sql/sql.go:837 +0x4a
created by database/sql.Open
    /usr/local/Cellar/go/1.8.3/libexec/src/database/sql/sql.go:582 +0x212

goroutine 22 [sleep, 10 minutes]:
time.Sleep(0x1dcd6500)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/time.go:59 +0xf9
gopkg.in/mgo%2ev2.(*mongoCluster).syncServersLoop(0xc42006c500)
    /Users/erikmuttersbach/go/src/gopkg.in/mgo.v2/cluster.go:368 +0x471
created by gopkg.in/mgo%2ev2.newCluster
    /Users/erikmuttersbach/go/src/gopkg.in/mgo.v2/cluster.go:78 +0x188

goroutine 50 [sleep, 10 minutes]:
time.Sleep(0x37e11d600)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/time.go:59 +0xf9
gopkg.in/mgo%2ev2.(*mongoServer).pinger(0xc42010e000, 0x1)
    /Users/erikmuttersbach/go/src/gopkg.in/mgo.v2/server.go:301 +0x293
created by gopkg.in/mgo%2ev2.newServer
    /Users/erikmuttersbach/go/src/gopkg.in/mgo.v2/server.go:89 +0x166

goroutine 25 [select, 10 minutes]:
main.tailer(0xc4200728a0, 0xc4200fe0a0)
    /Users/erikmuttersbach/Projects/mongo2psql-go/main.go:67 +0x4d0
created by main.main
    /Users/erikmuttersbach/Projects/mongo2psql-go/main.go:180 +0xff

goroutine 38 [IO wait]:
net.runtime_pollWait(0x1664df0, 0x72, 0xa)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/netpoll.go:164 +0x59
net.(*pollDesc).wait(0xc42006f5d8, 0x72, 0x1438e40, 0x14363d0)
    /usr/local/Cellar/go/1.8.3/libexec/src/net/fd_poll_runtime.go:75 +0x38
net.(*pollDesc).waitRead(0xc42006f5d8, 0xc42007d6b0, 0x24)
    /usr/local/Cellar/go/1.8.3/libexec/src/net/fd_poll_runtime.go:80 +0x34
net.(*netFD).Read(0xc42006f570, 0xc42007d6b0, 0x24, 0x24, 0x0, 0x1438e40, 0x14363d0)
    /usr/local/Cellar/go/1.8.3/libexec/src/net/fd_unix.go:250 +0x1b7
net.(*conn).Read(0xc4200e0010, 0xc42007d6b0, 0x24, 0x24, 0x0, 0x0, 0x0)
    /usr/local/Cellar/go/1.8.3/libexec/src/net/net.go:181 +0x70
gopkg.in/mgo%2ev2.fill(0x143cce0, 0xc4200e0010, 0xc42007d6b0, 0x24, 0x24, 0x0, 0x53)
    /Users/erikmuttersbach/go/src/gopkg.in/mgo.v2/socket.go:535 +0x53
gopkg.in/mgo%2ev2.(*mongoSocket).readLoop(0xc420164000)
    /Users/erikmuttersbach/go/src/gopkg.in/mgo.v2/socket.go:551 +0x107
created by gopkg.in/mgo%2ev2.newSocket
    /Users/erikmuttersbach/go/src/gopkg.in/mgo.v2/socket.go:194 +0x259

goroutine 3 [runnable]:
net.runtime_pollWait(0x1664eb0, 0x72, 0x9)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/netpoll.go:164 +0x59
net.(*pollDesc).wait(0xc4201060d8, 0x72, 0x1438e40, 0x14363d0)
    /usr/local/Cellar/go/1.8.3/libexec/src/net/fd_poll_runtime.go:75 +0x38
net.(*pollDesc).waitRead(0xc4201060d8, 0xc4201000c0, 0x24)
    /usr/local/Cellar/go/1.8.3/libexec/src/net/fd_poll_runtime.go:80 +0x34
net.(*netFD).Read(0xc420106070, 0xc4201000c0, 0x24, 0x24, 0x0, 0x1438e40, 0x14363d0)
    /usr/local/Cellar/go/1.8.3/libexec/src/net/fd_unix.go:250 +0x1b7
net.(*conn).Read(0xc42000e010, 0xc4201000c0, 0x24, 0x24, 0x0, 0x0, 0x0)
    /usr/local/Cellar/go/1.8.3/libexec/src/net/net.go:181 +0x70
gopkg.in/mgo%2ev2.fill(0x143cce0, 0xc42000e010, 0xc4201000c0, 0x24, 0x24, 0x0, 0x0)
    /Users/erikmuttersbach/go/src/gopkg.in/mgo.v2/socket.go:535 +0x53
gopkg.in/mgo%2ev2.(*mongoSocket).readLoop(0xc420118000)
    /Users/erikmuttersbach/go/src/gopkg.in/mgo.v2/socket.go:551 +0x107
created by gopkg.in/mgo%2ev2.newSocket
    /Users/erikmuttersbach/go/src/gopkg.in/mgo.v2/socket.go:194 +0x259

goroutine 52 [select, 10 minutes]:
github.com/rwynn/gtm.FetchDocuments(0xc4200fe0a0, 0xc420063860, 0x131fa40, 0xc420100120, 0xc4201122a0, 0x0, 0x0)
    /Users/erikmuttersbach/go/src/github.com/rwynn/gtm/gtm.go:498 +0x3a7
created by github.com/rwynn/gtm.Start
    /Users/erikmuttersbach/go/src/github.com/rwynn/gtm/gtm.go:673 +0x5fc

goroutine 53 [semacquire, 10 minutes]:
sync.runtime_notifyListWait(0xc420150108, 0xc400000001)
    /usr/local/Cellar/go/1.8.3/libexec/src/runtime/sema.go:298 +0x10b
sync.(*Cond).Wait(0xc4201500f8)
    /usr/local/Cellar/go/1.8.3/libexec/src/sync/cond.go:57 +0x89
gopkg.in/mgo%2ev2.(*Iter).Next(0xc4201500f0, 0x12c45e0, 0xc42007d590, 0x0)
    /Users/erikmuttersbach/go/src/gopkg.in/mgo.v2/session.go:3704 +0x9f
github.com/rwynn/gtm.TailOps(0xc4200fe0a0, 0xc420063860, 0xc42010a008, 0x1, 0x1, 0xc420110090, 0x0, 0x0)
    /Users/erikmuttersbach/go/src/github.com/rwynn/gtm/gtm.go:365 +0x1ea
created by github.com/rwynn/gtm.Start
    /Users/erikmuttersbach/go/src/github.com/rwynn/gtm/gtm.go:685 +0x8ea

rax    0xe
rbx    0x0
rcx    0x7fff5fbff3c0
rdx    0x186a0
rdi    0xf03
rsi    0x0
rbp    0x7fff5fbff3f8
rsp    0x7fff5fbff3c0
r8     0x43a260
r9     0x11
r10    0x653ef1e26c7c
r11    0x202
r12    0x1ad50d58ee7b
r13    0x1cbe784ba3b8
r14    0x14d44e02db750c00
r15    0x1
rip    0x10566a3
rflags 0x202
cs     0x7
fs     0x0
gs     0x0
exit status 2
",8107
1657,45310580,"syntax = ""proto3"";
package tutorial;

message Person {
    string name = 1;
    int32 id = 2; 
    string email = 3;

    enum PhoneType {
        MOBILE = 0;
        HOME = 1;
        WORK = 2;
    }

    message PhoneNumber {
        string number = 1;
        PhoneType type = 2;
    }

    repeated PhoneNumber phones = 4;
}

message AddressBook {
    repeated Person people = 1;
}
",386
1658,45310580,"func TodoIndex(w http.ResponseWriter, r *http.Request) {

    w.Header().Set(""Content-Type"", ""application/x-protobuf"")
    w.WriteHeader(http.StatusOK)
    p := &Person{
        Id:    1234,
        Name:  ""John Doe"",
        Email: ""jdoe@example.com"",
        Phones: []*Person_PhoneNumber{
            {Number: ""555-4321"", Type: Person_HOME},
        },
    }
    out, err := proto.Marshal(p)
    if err != nil {
        panic(err)
    }
    w.Write(out)
}
",459
1659,45310580,"public class MainJavaAndGo {
public static void main(String[] args){
    try {
        long start = (new Date()).getTime();
        System.out.println(""begin get"");
        connect();

        System.out.println(""end get"");
        long time = (new Date()).getTime() - start;
    }catch(Exception e){
        e.printStackTrace();
    }
}

public static void connect(){
    DefaultBHttpClientConnection connection = new DefaultBHttpClientConnection(8 * 1024);
    HttpHost server = hostForString(""localhost:8080"");
    try {

        Socket socket = new Socket(server.getHostName(), server.getPort());
        connection.bind(socket);

        HttpCoreContext writeContext = HttpCoreContext.create();
        writeContext.setTargetHost(server);

        BasicHttpEntityEnclosingRequest httpRequest = new BasicHttpEntityEnclosingRequest(""GET"",
                ""/todos"");

        HttpProcessor httpproc = makeHttpProcessor();
        HttpRequestExecutor httpexecutor = new HttpRequestExecutor();
        httpexecutor.preProcess(httpRequest, httpproc, writeContext);
        HttpResponse response = httpexecutor.execute(httpRequest, connection, writeContext);
        httpexecutor.postProcess(response, httpproc, writeContext);
        InputStream inputStream = response.getEntity().getContent();
        byte[] data = IOUtils.toByteArray(inputStream);
        Addressbook.AddressBook addressBook = Addressbook.AddressBook.parseFrom(data);
        int foo = 0;
        foo++;


    }catch(Exception e){
        e.printStackTrace();
        try {
            connection.shutdown();
        }catch (Exception ioe){
            ioe.printStackTrace();
        }
    }
}
public static  HttpHost hostForString(String hostStr) {
    String[] host = hostStr.split("":"", 2);
    HttpHost httphost = new HttpHost(host[0], Integer.parseInt(host[1]));

    return httphost;
}

public static HttpProcessor makeHttpProcessor() {
    return HttpProcessorBuilder.create().add(new RequestContent()).add(new RequestTargetHost())
            .add(new RequestConnControl()).add(new RequestUserAgent(""Test Protobuf/1.1""))
            .add(new RequestExpectContinue(true)).build();
}
}
",2160
1660,45310580,"com.google.protobuf.InvalidProtocolBufferException: While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either that the input has been truncated or that an embedded message misreported its own length.
    at com.google.protobuf.InvalidProtocolBufferException.truncatedMessage(InvalidProtocolBufferException.java:82)
    at com.google.protobuf.CodedInputStream$ArrayDecoder.skipRawBytes(CodedInputStream.java:1200)
    at com.google.protobuf.CodedInputStream$ArrayDecoder.skipField(CodedInputStream.java:578)
    at com.auth0.protobuf.Addressbook$Person.(Addressbook.java:112)
    at com.auth0.protobuf.Addressbook$Person.(Addressbook.java:77)
    at com.auth0.protobuf.Addressbook$Person$1.parsePartialFrom(Addressbook.java:1817)
    at com.auth0.protobuf.Addressbook$Person$1.parsePartialFrom(Addressbook.java:1812)
    at com.google.protobuf.CodedInputStream$ArrayDecoder.readMessage(CodedInputStream.java:816)
    at com.auth0.protobuf.Addressbook$AddressBook.(Addressbook.java:1914)
    at com.auth0.protobuf.Addressbook$AddressBook.(Addressbook.java:1871)
    at com.auth0.protobuf.Addressbook$AddressBook$1.parsePartialFrom(Addressbook.java:2571)
    at com.auth0.protobuf.Addressbook$AddressBook$1.parsePartialFrom(Addressbook.java:2566)
    at com.google.protobuf.AbstractParser.parsePartialFrom(AbstractParser.java:163)
    at com.google.protobuf.AbstractParser.parseFrom(AbstractParser.java:197)
    at com.google.protobuf.AbstractParser.parseFrom(AbstractParser.java:209)
    at com.google.protobuf.AbstractParser.parseFrom(AbstractParser.java:214)
    at com.google.protobuf.AbstractParser.parseFrom(AbstractParser.java:49)
    at com.auth0.protobuf.Addressbook$AddressBook.parseFrom(Addressbook.java:2065)
    at com.auth0.MainJavaAndGo.connect(MainJavaAndGo.java:78)
    at com.auth0.MainJavaAndGo.main(MainJavaAndGo.java:35)
",1894
1661,45315801,square.png,10
1662,45315801,.exe,4
1663,45315801,runInMainThread(fn func()),26
1664,45315801,go func() {...,14
1665,45315801,"package main

import (
    ""github.com/go-gl/gl/v4.5-core/gl""
    ""github.com/go-gl/glfw/v3.2/glfw""
    ""github.com/go-gl/mathgl/mgl32""
    ""golang.org/x/image/draw""
    ""image""
    _ ""image/png""
    ""os""
    ""runtime""
)

func main() {
    runtime.LockOSThread()

    var transformUniform, textureUniform int32
    var program, vbo, texture, vertAttrib, texCoordAttrib uint32
    var transform = mgl32.Ident4()

    glfw.Init()
    shareContext, _ := glfw.CreateWindow(100, 100, """", nil, nil)
    shareContext.MakeContextCurrent()
    gl.Init()
    //texture = LoadTexture(""square.png"") // TEXTURE LOADS HERE WITHOUT AN ISSUE

    window, _ := glfw.CreateWindow(800, 600, """", nil, shareContext)

    go func() {
        runtime.LockOSThread()
        window.MakeContextCurrent()
        var vao uint32
        gl.GenVertexArrays(1, &vao)
        gl.BindVertexArray(vao)

        gl.GenBuffers(1, &vbo)
        gl.BindBuffer(gl.ARRAY_BUFFER, vbo)
        gl.BufferData(gl.ARRAY_BUFFER, len(cubeVertices)*4, gl.Ptr(cubeVertices), gl.STATIC_DRAW)

        for !window.ShouldClose() {
            gl.ClearColor(0, 0.1, 0, 0)
            gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
            gl.BindBuffer(gl.ARRAY_BUFFER, vbo)

            gl.UseProgram(program)
            gl.Enable(gl.DEPTH_TEST)
            gl.DepthFunc(gl.LESS)

            gl.Uniform1i(textureUniform, 0)

            gl.EnableVertexAttribArray(vertAttrib)
            gl.EnableVertexAttribArray(texCoordAttrib)

            gl.VertexAttribPointer(vertAttrib, 3, gl.FLOAT, false, 5*4, gl.PtrOffset(0))
            gl.VertexAttribPointer(texCoordAttrib, 2, gl.FLOAT, false, 5*4, gl.PtrOffset(3*4))
            gl.UniformMatrix4fv(transformUniform, 1, false, &transform[0])

            gl.BindTexture(gl.TEXTURE_2D, texture)

            gl.DrawArrays(gl.TRIANGLES, 0, 6*2*3)
            window.SwapBuffers()
        }
    }()

    texture = LoadTexture(""square.png"") // TEXTURE LOADED HERE CAUSES BLACK BORDER

    vertexShader, fragmentShader := compileShader(vertexShader, gl.VERTEX_SHADER), compileShader(fragmentShader, gl.FRAGMENT_SHADER)
    program = gl.CreateProgram()
    gl.AttachShader(program, vertexShader)
    gl.AttachShader(program, fragmentShader)
    gl.LinkProgram(program)
    transform = mgl32.Perspective(mgl32.DegToRad(45.0), float32(800)/600, 0.1, 10.0).Mul4(mgl32.LookAtV(mgl32.Vec3{3, 3, 3}, mgl32.Vec3{0, 0, 0}, mgl32.Vec3{0, 1, 0})).Mul4(mgl32.HomogRotate3D(float32(2.0), mgl32.Vec3{0, 1, 0}))
    transformUniform, textureUniform = gl.GetUniformLocation(program, gl.Str(""transform\x00"")), gl.GetUniformLocation(program, gl.Str(""tex\x00""))
    vertAttrib, texCoordAttrib = uint32(gl.GetAttribLocation(program, gl.Str(""vert\x00""))), uint32(gl.GetAttribLocation(program, gl.Str(""vertTexCoord\x00"")))

    for {
        glfw.WaitEvents()
    }
}

func compileShader(source string, shaderType uint32) uint32 {
    shader := gl.CreateShader(shaderType)
    csources, _ := gl.Strs(source)
    gl.ShaderSource(shader, 1, csources, nil)
    gl.CompileShader(shader)
    return shader
}

func LoadTexture(fileName string) uint32 {
    var id uint32
    file, err := os.Open(fileName)
    if err != nil {
        panic(err)
    }
    img, _, _ := image.Decode(file)
    rgba := image.NewRGBA(img.Bounds())
    draw.Draw(rgba, rgba.Bounds(), img, image.Point{0, 0}, draw.Src)
    gl.GenTextures(1, &id)
    gl.BindTexture(gl.TEXTURE_2D, id)
    gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)
    gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)
    gl.TexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, int32(rgba.Rect.Size().X), int32(rgba.Rect.Size().Y), 0, gl.RGBA, gl.UNSIGNED_BYTE, gl.Ptr(rgba.Pix))
    return id
}

var vertexShader = `
#version 330

uniform mat4 transform;
in vec3 vert;
in vec2 vertTexCoord;
out vec2 fragTexCoord;

void main() {
    fragTexCoord = vertTexCoord;
    gl_Position = transform * vec4(vert, 1);
}
` + ""\x00""

var fragmentShader = `
#version 330

uniform sampler2D tex;
in vec2 fragTexCoord;
out vec4 outputColor;

void main() {
    outputColor = texture(tex, fragTexCoord);
}
` + ""\x00""

var cubeVertices = []float32{-1.0, -1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -1.0, 1.0, 0.0, -1.0, -1.0, 1.0, 0.0, 1.0, 1.0, -1.0, -1.0, 1.0, 0.0, 1.0, -1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 0.0, 1.0, -1.0, 1.0, -1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, -1.0, 1.0, 0.0, 1.0, 1.0, -1.0, 1.0, 0.0, -1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 0.0, 1.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 1.0, 1.0, -1.0, -1.0, 1.0, 0.0, 1.0, -1.0, -1.0, 1.0, 0.0, -1.0, 1.0, -1.0, 0.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 0.0, 1.0, -1.0, 1.0, -1.0, 1.0, 0.0, -1.0, -1.0, -1.0, 0.0, 0.0, -1.0, -1.0, 1.0, 0.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 0.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0}
",5129
1666,45315801,glFinish(),10
1667,45374658,"[{""Name"":""QA1"",""Server"":""BOT1"",""Description"":""Tools"",""Apps"":""""},
{""Name"":""QA1"",""Server"":"""",""Description"":"""",""Apps"":""Duo""},
{""Name"":""QA1"",""Server"":"""",""Description"":"""",""Apps"":""Git""},
{""Name"":""QA1"",""Server"":"""",""Description"":"""",""Apps"":""php""}]
",239
1668,45374658,"[{""Name"":""QA1"",""Server"":""BOT1"",""Description"":""Tools"",""Apps"": ""Duo|Git|php""}]
",77
1669,45374658,"package main

import (
    ""database/sql""
    ""encoding/json""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
    ""io/ioutil""
    ""log""
    ""net/http""
)

// There can be zero or more apps on a volume
type Apps struct {
    Name string
}

// Volumes have a name, description, are on a server and have multiple services/apps
type Volume struct {
    Name        string
    Server      string
    Description string
    Services    Apps
}

//Handle all requests
func Handler(response http.ResponseWriter, request *http.Request) {
    response.Header().Set(""Content-type"", ""text/html"")
    webpage, err := ioutil.ReadFile(""index.html"")
    if err != nil {
        http.Error(response, fmt.Sprintf(""home.html file error %v"", err), 500)
    }
    fmt.Fprint(response, string(webpage))
}

// DB Connection
const (
    DB_HOST = ""mydbhost""
    DB_NAME = ""mydb""
    DB_USER = ""mydbuser""
    DB_PASS = ""mydbpass""
)

// Respond to URLs of the form /api
func APIHandler(response http.ResponseWriter, request *http.Request) {

    //Connect to database
    dsn := DB_USER + "":"" + DB_PASS + ""@"" + DB_HOST + ""/"" + DB_NAME + ""?charset=utf8""
    db, err := sql.Open(""mysql"", dsn)
    if err != nil {
        fmt.Println(err.Error())
    }
    defer db.Close()

    // Open doesn't open a connection. Validate DSN data:
    err = db.Ping()
    if err != nil {
        fmt.Println(err.Error())
    }

    //set mime type to JSON
    response.Header().Set(""Content-type"", ""application/json"")

    result := []*Volume{}

    switch request.Method {
    case ""GET"":
        srvrnm := request.URL.Query().Get(""srvrnm"")
        appnm := request.URL.Query().Get(""appnm"")
        srvrs, err := db.Prepare(""select VOLUMES.name as volnm, SERVERS.name as srvrnm, VOLUMES.description as descr From VOLUMES LEFT JOIN SERVERS ON VOLUMES.server_id = SERVERS.id where SERVERS.name = ?"")
        if err != nil {
            fmt.Print(err)
        }
        srvcs, err := db.Prepare(""select VOLUMES.name as volnm, SUPPRTSVCS.name as app_name From VOLUMES as VOLUMES JOIN HOSTSVCS ON VOLUMES.id = HOSTSVCS.volume_id JOIN SUPPRTSVCS ON SUPPRTSVCS.id = HOSTSVCS.supportsvcs_id where VOLUMES.name = ?"")
        if err != nil {
            fmt.Print(err)
        }

        // Run the SQL Query to Get Volum & Description From Hostname
        srvrrows, err := srvrs.Query(srvrnm)
        if err != nil {
            fmt.Print(err)
        }
        for srvrrows.Next() {
            var volnm string
            var srvrnm string
            var descr string
            // Scan the First Query
            err = srvrrows.Scan(&volnm, &srvrnm, &descr)
            if err != nil {
                fmt.Println(""Error scanning: "" + err.Error())
                return
            }
            // Append Slice with results from the scan
            result = append(result, &Volume{Name: volnm, Server: srvrnm, Description: descr})
        }

        // Run the SQL Query for Services/Apps
        srvcrows, err := srvcs.Query(appnm)
        if err != nil {
            fmt.Print(err)
        }

        for srvcrows.Next() {
            var volnm string
            var appnm string
            // Scan the Second Query
            err = srvcrows.Scan(&volnm, &appnm)
            if err != nil {
                fmt.Println(""Error scanning: "" + err.Error())
                return
            }
            // Append Slice with results from the scan
            result = append(result, &Volume{Name: volnm, Apps: appnm})
        }
    default:
    }

    json, err := json.Marshal(result)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Fprintf(response, string(json))
    db.Close()
}

func main() {
    port := ""1236""
    var err string

    mux := http.NewServeMux()
    mux.Handle(""/api"", http.HandlerFunc(APIHandler))
    mux.Handle(""/"", http.HandlerFunc(Handler))

    // Start listing on a given port with these routes on this server.
    log.Print(""Listening on port "" + port + "" ... "")
    errs := http.ListenAndServe("":""+port, mux)
    if errs != nil {
        log.Fatal(""ListenAndServe error: "", err)
    }
}
",4105
1670,45377224,"package main

import (
    ""net""
    ""fmt""
    ""net/rpc""
    ""log""
    ""sync""
)

type Server struct {
    name string
}

type SpeakArgs struct {
}

type SpeakReply struct {
    Success bool
}

type AddArgs struct {
    A, B int
}

type AddReply struct {
    Answer int
    Success bool
}

func (s *Server) Add(args *AddArgs, reply *AddReply) error {
    reply.Answer = args.A + args.B
    reply.Success = true
    return nil
}

func (s *Server) Speak(args *SpeakArgs, reply *SpeakReply) error {
    fmt.Printf(""My name is %v.\n"", s.name)
    reply.Success = true
    return nil
}

func main() {
    var wgMain, wgRegister, wgCall sync.WaitGroup
    wgMain.Add(3)
    wgRegister.Add(2)
    wgCall.Add(1)

    go func() {
        server := &Server{name: ""RICHARD""}
        rpc.Register(server)
        la, e := net.Listen(""unix"", ""/tmp/example1.sock"")
        if e != nil {
            log.Fatal(""listen error:"", e)
        }
        wgRegister.Done()
        go rpc.Accept(la)
        wgCall.Wait()
        la.Close()
        wgMain.Done()
        fmt.Println(""Server exited."")
    }()

    go func() {
        server := &Server{name: ""BENNY""}
        rpc.Register(server)
        lb, e := net.Listen(""unix"", ""/tmp/example2.sock"")
        if e != nil {
            log.Fatal(""listen error:"", e)
        }
        wgRegister.Done()
        go rpc.Accept(lb)
        wgCall.Wait()
        lb.Close()
        wgMain.Done()
        fmt.Println(""Server exited."")
    }()

    go func() {
        wgRegister.Wait()
        oneclient, err1 := rpc.Dial(""unix"", ""/tmp/example1.sock"")
        twoclient, err2 := rpc.Dial(""unix"", ""/tmp/example2.sock"")
        if err1 != nil {
            log.Fatal(""listen error:"", err1)
        }
        if err2 != nil {
            log.Fatal(""listen error:"", err2)
        }

        addArgs := &AddArgs{1, 2}
        addReply := &AddReply{}
        speakArgs := &SpeakArgs{}
        speakReply := SpeakReply{}
        oneclient.Call(""Server.Add"", addArgs, addReply)
        oneclient.Call(""Server.Speak"", speakArgs, speakReply)
        twoclient.Call(""Server.Speak"", speakArgs, speakReply)

        fmt.Printf(""Added numbers! %v + %v = %v.\n"", addArgs.A, addArgs.B, addReply.Answer)
        wgCall.Done()
        oneclient.Close()
        twoclient.Close()
        wgMain.Done()
        fmt.Println(""Client exited."")
    }()
    wgMain.Wait()
}
",2371
1671,45377224,"My name is RICHARD.
My name is RICHARD.
Added numbers! 1 + 2 = 3.
Client exited.
Server exited.
Server exited.
",111
1672,45377224,DefaultServer,13
1673,45377224,rpc.NewServer(),15
1674,45377224,"package main

import (
    ""net""
    ""fmt""
    ""net/rpc""
    ""log""
    ""sync""
)

type Server struct {
    name string
}

type SpeakArgs struct {
}

type SpeakReply struct {
    Success bool
}

type AddArgs struct {
    A, B int
}

type AddReply struct {
    Answer int
    Success bool
}

func (s *Server) Add(args *AddArgs, reply *AddReply) error {
    reply.Answer = args.A + args.B
    reply.Success = true
    return nil
}

func (s *Server) Speak(args *SpeakArgs, reply *SpeakReply) error {
    fmt.Printf(""My name is %v.\n"", s.name)
    reply.Success = true
    return nil
}

func main() {
    var wgMain, wgRegister, wgCall sync.WaitGroup
    wgMain.Add(3)
    wgRegister.Add(2)
    wgCall.Add(1)

    go func() {
        rpcServer := rpc.NewServer()
        server := &Server{name: ""RICHARD""}
        rpcServer.Register(server)
        la, e := net.Listen(""unix"", ""/tmp/example1.sock"")
        if e != nil {
            log.Fatal(""listen error:"", e)
        }
        wgRegister.Done()
        go rpcServer.Accept(la)
        wgCall.Wait()
        la.Close()
        wgMain.Done()
        fmt.Println(""Server exited."")
    }()

    go func() {
        rpcServer := rpc.NewServer()
        server := &Server{name: ""BENNY""}
        rpcServer.Register(server)
        lb, e := net.Listen(""unix"", ""/tmp/example2.sock"")
        if e != nil {
            log.Fatal(""listen error:"", e)
        }
        wgRegister.Done()
        go rpcServer.Accept(lb)
        wgCall.Wait()
        lb.Close()
        wgMain.Done()
        fmt.Println(""Server exited."")
    }()

    go func() {
        wgRegister.Wait()
        oneclient, err1 := rpc.Dial(""unix"", ""/tmp/example1.sock"")
        twoclient, err2 := rpc.Dial(""unix"", ""/tmp/example2.sock"")
        if err1 != nil {
            log.Fatal(""listen error:"", err1)
        }
        if err2 != nil {
            log.Fatal(""listen error:"", err2)
        }

        addArgs := &AddArgs{1, 2}
        addReply := &AddReply{}
        speakArgs := &SpeakArgs{}
        speakReply := &SpeakReply{}
        oneclient.Call(""Server.Add"", addArgs, addReply)
        oneclient.Call(""Server.Speak"", speakArgs, speakReply)
        twoclient.Call(""Server.Speak"", speakArgs, speakReply)

        fmt.Printf(""Added numbers! %v + %v = %v.\n"", addArgs.A, addArgs.B, addReply.Answer)
        wgCall.Done()
        oneclient.Close()
        twoclient.Close()
        wgMain.Done()
        fmt.Println(""Client exited."")
    }()
    wgMain.Wait()
}
",2470
1675,45377224,"My name is RICHARD.
My name is BENNY.
Added numbers! 1 + 2 = 3.
Client exited.
Server exited.
Server exited.
",109
1676,45378537,"Input:

{
 'reports_portal': 'select * from reports_portal',
 'billing_portal': 'select * from billing_portal',
}

output:

{
 'reports_portal': [23, 123, 5234, 632],
 'billing_portal': [23, 123, 5234, 632],
}
",210
1677,45378537,"package main

import (
    ""fmt""
)


func add_to_map(m map[string] string, word string) map[string]string {
    added_word := word + "" plus more letters""
    m[word] = added_word
    return m
}


func main() {
    words_map := make(map[string]string)
    words := []string{""giraffe"", ""cat"", ""dog"", ""turtle""}
    for _, this_word := range words {
        go add_to_map(words_map, this_word)
    }
    fmt.Println(words_map)
}
",425
1678,45378537,"$ go run try_asynchronous.go 
fatal error: concurrent map writes

goroutine 7 [running]:
runtime.throw(0x10b3b96, 0x15)
    /usr/local/Cellar/go/1.8.1/libexec/src/runtime/panic.go:596 +0x95 fp=0xc420032eb8 sp=0xc420032e98
runtime.mapassign(0x109ad20, 0xc420016270, 0xc420032fa0, 0x10b3268)
    /usr/local/Cellar/go/1.8.1/libexec/src/runtime/hashmap.go:499 +0x667 fp=0xc420032f58 sp=0xc420032eb8
main.add_to_map(0xc420016270, 0x10b1ba0, 0x3, 0x0)
    /tmp/golang-w-python/try_asynchronous.go:10 +0xa3 fp=0xc420032fc0 sp=0xc420032f58
runtime.goexit()
    /usr/local/Cellar/go/1.8.1/libexec/src/runtime/asm_amd64.s:2197 +0x1 fp=0xc420032fc8 sp=0xc420032fc0
created by main.main
    /tmp/golang-w-python/try_asynchronous.go:19 +0xc8

goroutine 1 [runnable]:
fmt.(*pp).fmtString(0xc42001e0c0, 0x10b1f52, 0x7, 0x76)
    /usr/local/Cellar/go/1.8.1/libexec/src/fmt/print.go:424 +0x1a2
fmt.(*pp).printValue(0xc42001e0c0, 0x10953c0, 0xc42000e260, 0x98, 0x76, 0x1)
    /usr/local/Cellar/go/1.8.1/libexec/src/fmt/print.go:729 +0x27aa
fmt.(*pp).printValue(0xc42001e0c0, 0x109ad20, 0xc420016270, 0x15, 0x76, 0x0)
    /usr/local/Cellar/go/1.8.1/libexec/src/fmt/print.go:750 +0x103d
fmt.(*pp).printArg(0xc42001e0c0, 0x109ad20, 0xc420016270, 0x76)
    /usr/local/Cellar/go/1.8.1/libexec/src/fmt/print.go:682 +0x217
fmt.(*pp).doPrintln(0xc42001e0c0, 0xc420045f28, 0x1, 0x1)
    /usr/local/Cellar/go/1.8.1/libexec/src/fmt/print.go:1138 +0xa1
fmt.Fprintln(0x1108140, 0xc42000c018, 0xc420045f28, 0x1, 0x1, 0xc420045ef0, 0xc420045ee0, 0x1087218)
    /usr/local/Cellar/go/1.8.1/libexec/src/fmt/print.go:247 +0x5c
fmt.Println(0xc420045f28, 0x1, 0x1, 0x10b1e6f, 0x6, 0x0)
    /usr/local/Cellar/go/1.8.1/libexec/src/fmt/print.go:257 +0x57
main.main()
    /tmp/golang-w-python/try_asynchronous.go:21 +0x132
exit status 2
",1794
1679,45378537,fatal error: concurrent map writes,34
1680,45378537,"package main

import (
    ""fmt""
    ""math/rand""
    ""sync""
    ""time""
)

var mutex sync.Mutex
var wg sync.WaitGroup

func random_sleep() {
    r := rand.Intn(3000)
    time.Sleep(time.Duration(r) * time.Millisecond)
}

func add_to_map(m map[string] string, word string) {
    defer wg.Done()
    added_word := word + "" plus more letters""
    mutex.Lock()
    defer mutex.Unlock()
    fmt.Println(""Before sleep"")
    random_sleep()
    m[word] = added_word
    fmt.Println(""Added word %v"", word)
}


func main() {
    words_map := make(map[string]string)
    words := []string{""giraffe"", ""cat"", ""dog"", ""turtle""}
    for _, this_word := range words {
        wg.Add(1)
        go add_to_map(words_map, this_word)
    }
    wg.Wait()
    fmt.Println(words_map)
}
",761
1681,45378537,"cchilders:~/work_projects/metricsportal/golang_integration (feature/golang-query) 
$ go run try_async.go 
Before sleep
Added word %v turtle
Before sleep
Added word %v cat
Before sleep
Added word %v giraffe
Before sleep
Added word %v dog
map[dog:dog plus more letters turtle:turtle plus more letters cat:cat plus more letters giraffe:giraffe plus more letters]

cchilders:~/work_projects/metricsportal/golang_integration (feature/golang-query) 
$ go run try_async.go 
Before sleep
Added word %v turtle
Before sleep
Added word %v cat
Before sleep
Added word %v giraffe
Before sleep
Added word %v dog
map[dog:dog plus more letters turtle:turtle plus more letters cat:cat plus more letters giraffe:giraffe plus more letters]
",721
1682,45378537,"Expectation - 

Before sleep
Before sleep
Before sleep
Before sleep
Added word %v cat
Added word %v giraffe
Added word %v turtle
Added word %v dog
",147
1683,45378537,"My usage of fake delay was wrong, the solutions both work. Thank you:

package main

import (
    ""fmt""
    ""math/rand""
    ""sync""
    ""time""
)

var mutex sync.Mutex
var wg sync.WaitGroup

func random_sleep() {
    r := rand.Intn(3000)
    time.Sleep(time.Duration(r) * time.Millisecond)
}


func add_to_map(m map[string] string, word string) {
    defer wg.Done()
    added_word := word + "" plus more letters""
    fmt.Println(""Before sleep"")
    random_sleep()
    mutex.Lock()
    defer mutex.Unlock()
    m[word] = added_word
    fmt.Println(""Added word %v"", word)
}


func main() {
    words_map := make(map[string]string)
    words := []string{""giraffe"", ""cat"", ""dog"", ""turtle""}
    for _, this_word := range words {
        wg.Add(1)
        go add_to_map(words_map, this_word)
    }
    wg.Wait()
    fmt.Println(words_map)
}
",833
1684,45378537,"$ go run try_async.go 
Before sleep
Before sleep
Before sleep
Before sleep
Added word %v dog
Added word %v giraffe
Added word %v cat
Added word %v turtle
map[turtle:turtle plus more letters dog:dog plus more letters giraffe:giraffe plus more letters cat:cat plus more letters]
",277
1685,45401800,"

    GoSago
    


    
        
            
                
            
            
                
                    
                        Kung asukal ka, ako naman ay sago. Wala akong kwenta kung wala ang tamis mo.
                        Miriam Santiago 
                    
                
            
            
                 Welcome Back, Sunil 
            
        


        
        
            
                
                    
                    
                        
                            6
                            All Categories
                        
                        
                            6
                            Dessert
                        
                        
                            0
                            Appetizer
                        
                        
                            0
                            Main Course
                        
                    
                
                
                    
                        
                            
                                
                                    
                                        Sago't Gulaman
                                        A local Filipino beverage made of brown sugar, water, gelatin, and tapioca pearls
                                        P75
                                        
                                        
                                             Add to Cart
                                        
                                    
                                

                            
                        
                        
                            
                                
                                    
                                        Taho with sago
                                         a Philippine snack food made of fresh soft/silken tofu, arnibal, and sago pearl
                                        P30
                                        
                                        
                                             Add to Cart
                                        
                                    
                                

                            
                        
                        
                            
                                
                                    
                                        Chilled Taho
                                        chilled taho is a refreshing twist and a great way to beat the summer heat
                                        P45
                                        
                                        
                                             Add to Cart
                                        
                                    
                                

                            
                        
                        
                            
                                
                                    
                                        Sago Cakes
                                        Simple and quick vegan dessert made from tapioca pearls
                                        P230
                                        
                                        
                                             Add to Cart
                                        
                                    
                                

                            
                        
                        
                            
                                
                                    
                                        Sago Pudding
                                        From the English repertoire of steamed fruit puddings comes this classic.
                                        P230
                                        
                                        
                                             Add to Cart
                                        
                                    
                                

                            
                        
                        
                            
                                
                                    
                                        Pearl Sago Fritters
                                        Sabudana Vada or Pearl Sago Fritters is a crispy & delicious snack of North India
                                        P230
                                        
                                        
                                             Add to Cart
                                        
                                    
                                

                            
                        
                    
                
            
        
    


",4964
1686,45401800,"type cart struct {
    Item  string
    Price string
    Pera  int16
}

func addtocart(w http.ResponseWriter, r *http.Request) {
    if button1.clicked{
    press := cart{
        ""Sago't Gulaman"",
        ""P75"",
         75 ,
    }
}
}
",237
1687,45415962,mongodb,7
1688,45415962,mgo.v2,6
1689,45415962,"func mainHandle(rw http.ResponseWriter, rq *http.Request) {

    fileToBeChunked := ""/Users/IT/Desktop/4k.jpg""

    file, err := os.Open(fileToBeChunked)

    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }

    defer file.Close()

    fileInfo, _ := file.Stat()

    var fileSize int64 = fileInfo.Size()

    const fileChunk = 0.25 * (1 << 20) // 1 MB, change this to your requirement

    // calculate total number of parts the file will be chunked into

    totalPartsNum := uint64(math.Ceil(float64(fileSize) / float64(fileChunk)))

    fmt.Printf(""Splitting to %d pieces.\n"", totalPartsNum)

    var sent int
    prev_part := 0

    for i := uint64(0); i < totalPartsNum; i++ {

        partSize := int(math.Min(fileChunk, float64(fileSize-int64(i*fileChunk))))

        sent = sent + partSize
        partBuffer := make([]byte, partSize)
        //fileBuffer := make([]byte, fileSize)

        //fmt.Printf(""File size is %d \n"",fileBuffer)
        fmt.Printf(""Part size is %d \n"",partSize)

        file.Read(partBuffer)


        client := &http.Client{}
        req, _ := http.NewRequest(""PUT"", ""http://localhost:8011/upload/23"", bytes.NewReader(partBuffer))
        req.Header.Set(""Content-Range"", ""bytes ""+strconv.Itoa(prev_part) + ""-""+strconv.Itoa(sent-1)+""/""+strconv.FormatInt(fileSize,10))
        req.Header.Set(""Content-Length"", strconv.Itoa(partSize))
        res, _ := client.Do(req)
        prev_part = sent
        fmt.Println(res)

    }


}
",1480
1690,45415962,"func UploadFileChunk(rw http.ResponseWriter,rq *http.Request) {

    fmt.Println(rq.Header[""Content-Range""])
    cnt_range:=rq.Header[""Content-Range""]
    file:=createFileByName(""asd"")
    if(checkFileChunkIndex(cnt_range[0])) {
        buf, err := ioutil.ReadAll(rq.Body)
        if err!=nil {log.Fatal(""request"",err)}

        file.Write(buf)
    } else {
        file.Close()
    }
}



func checkFileChunkIndex(cnt_r string ) bool {

    re := regexp.MustCompile(`([a-z]+) ([[:alnum:]]+)-([[:alnum:]]+)/([[:alnum:]]+)`)

    component:= re.FindStringSubmatch(cnt_r)

    filesize,_:= strconv.Atoi(component[4])
    last_chunk,_:= strconv.Atoi(component[3])
    return filesize - last_chunk - 1 > 0
}


func createFileByName(fname string ) *mgo.GridFile {
    if(!file_created) {
        _File,err:= db.GridFS(""fs"").Create(""112233"")
        File = *_File
        if err != nil {
            panic(err)
        }
        file_created = true
        return &File
    }
    return &File
}
",989
1691,45415962,"fatal error: sync: unlock of unlocked mutex

goroutine 7 [running]:
runtime.throw(0x144de3d, 0x1e)
    /usr/local/go/src/runtime/panic.go:596 +0x95 fp=0xc42004b8c0 sp=0xc42004b8a0
sync.throw(0x144de3d, 0x1e)
    /usr/local/go/src/runtime/panic.go:585 +0x35 fp=0xc42004b8e0 sp=0xc42004b8c0
sync.(*Mutex).Unlock(0xc4200ca8c0)
    /usr/local/go/src/sync/mutex.go:113 +0xa4 fp=0xc42004b908 sp=0xc42004b8e0
sync.(*Cond).Wait(0x162c4e8)
    /usr/local/go/src/sync/cond.go:56 +0x6c fp=0xc42004b938 sp=0xc42004b908
gopkg.in/mgo%2ev2.(*GridFile).insertChunk(0x162c4e0, 0xc42018a000, 0x3fc00, 0x40000)
    /Users/IT/go/src/gopkg.in/mgo.v2/gridfs.go:623 +0x1b3 fp=0xc42004ba48 sp=0xc42004b938
gopkg.in/mgo%2ev2.(*GridFile).Write(0x162c4e0, 0xc420678000, 0x40000, 0x7fe00, 0x40000, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/gridfs.go:595 +0x2d6 fp=0xc42004baf0 sp=0xc42004ba48
go_storage/files.UploadFileChunk(0x15faf80, 0xc4202e4380, 0xc42000b000)
    /Users/IT/go/src/go_storage/files/files.go:249 +0x23b fp=0xc42004bba8 sp=0xc42004baf0
net/http.HandlerFunc.ServeHTTP(0x1459710, 0x15faf80, 0xc4202e4380, 0xc42000b000)
    /usr/local/go/src/net/http/server.go:1942 +0x44 fp=0xc42004bbd0 sp=0xc42004bba8
github.com/gorilla/mux.(*Router).ServeHTTP(0xc42001a320, 0x15faf80, 0xc4202e4380, 0xc42000b000)
    /Users/IT/go/src/github.com/gorilla/mux/mux.go:114 +0x10c fp=0xc42004bcd0 sp=0xc42004bbd0
net/http.(*ServeMux).ServeHTTP(0x162bee0, 0x15faf80, 0xc4202e4380, 0xc42000ae00)
    /usr/local/go/src/net/http/server.go:2238 +0x130 fp=0xc42004bd10 sp=0xc42004bcd0
net/http.serverHandler.ServeHTTP(0xc420096dc0, 0x15faf80, 0xc4202e4380, 0xc42000ae00)
    /usr/local/go/src/net/http/server.go:2568 +0x92 fp=0xc42004bd58 sp=0xc42004bd10
net/http.(*conn).serve(0xc4200cd2c0, 0x15fb7c0, 0xc420016ac0)
    /usr/local/go/src/net/http/server.go:1825 +0x612 fp=0xc42004bfc8 sp=0xc42004bd58
runtime.goexit()
    /usr/local/go/src/runtime/asm_amd64.s:2197 +0x1 fp=0xc42004bfd0 sp=0xc42004bfc8
created by net/http.(*Server).Serve
    /usr/local/go/src/net/http/server.go:2668 +0x2ce

goroutine 1 [IO wait]:
net.runtime_pollWait(0x23a0e40, 0x72, 0x0)
    /usr/local/go/src/runtime/netpoll.go:164 +0x59
net.(*pollDesc).wait(0xc4200556b8, 0x72, 0x0, 0xc4200bcee0)
    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38
net.(*pollDesc).waitRead(0xc4200556b8, 0xffffffffffffffff, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34
net.(*netFD).accept(0xc420055650, 0x0, 0x15f6ec0, 0xc4200bcee0)
    /usr/local/go/src/net/fd_unix.go:430 +0x1e5
net.(*TCPListener).accept(0xc42000e0a0, 0xc4200cd340, 0x13c96c0, 0xffffffffffffffff)
    /usr/local/go/src/net/tcpsock_posix.go:136 +0x2e
net.(*TCPListener).AcceptTCP(0xc42000e0a0, 0xc420049df0, 0xc420049df8, 0xc420049de8)
    /usr/local/go/src/net/tcpsock.go:215 +0x49
net/http.tcpKeepAliveListener.Accept(0xc42000e0a0, 0x1459ca8, 0xc4200cd2c0, 0x15fb880, 0xc420019c80)
    /usr/local/go/src/net/http/server.go:3044 +0x2f
net/http.(*Server).Serve(0xc420096dc0, 0x15fb280, 0xc42000e0a0, 0x0, 0x0)
    /usr/local/go/src/net/http/server.go:2643 +0x228
net/http.(*Server).ListenAndServe(0xc420096dc0, 0xc420096dc0, 0x15f60c0)
    /usr/local/go/src/net/http/server.go:2585 +0xb0
net/http.ListenAndServe(0x143fbf7, 0x5, 0x0, 0x0, 0xc420110360, 0xc420019230)
    /usr/local/go/src/net/http/server.go:2787 +0x7f
main.main()
    /Users/IT/go/src/go_storage/main.go:24 +0x358

goroutine 17 [syscall, locked to thread]:
runtime.goexit()
    /usr/local/go/src/runtime/asm_amd64.s:2197 +0x1

goroutine 5 [select]:
gopkg.in/mgo%2ev2.(*mongoCluster).syncServersLoop(0xc42000a800)
    /Users/IT/go/src/gopkg.in/mgo.v2/cluster.go:394 +0x3a3
created by gopkg.in/mgo%2ev2.newCluster
    /Users/IT/go/src/gopkg.in/mgo.v2/cluster.go:78 +0x188

goroutine 22 [semacquire]:
sync.runtime_SemacquireMutex(0xc4200f20e4)
    /usr/local/go/src/runtime/sema.go:62 +0x34
sync.(*Mutex).Lock(0xc4200f20e0)
    /usr/local/go/src/sync/mutex.go:87 +0x9d
gopkg.in/mgo%2ev2.(*mongoSocket).Acquire(0xc4200f20e0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/socket.go:242 +0x31
gopkg.in/mgo%2ev2.(*Session).acquireSocket(0xc4200e04e0, 0x0, 0x0, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:4419 +0x475
gopkg.in/mgo%2ev2.(*Collection).writeOp(0xc420019f20, 0x139efa0, 0xc4200e8000, 0x100e501, 0x0, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:4603 +0xd6
gopkg.in/mgo%2ev2.(*Collection).Insert(0xc420019f20, 0xc420010070, 0x1, 0x1, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:2437 +0xac
gopkg.in/mgo%2ev2.(*GridFile).insertChunk.func1(0x162c4e0, 0xc42033c000, 0x3fc3e, 0x40000)
    /Users/IT/go/src/gopkg.in/mgo.v2/gridfs.go:642 +0xe8
created by gopkg.in/mgo%2ev2.(*GridFile).insertChunk
    /Users/IT/go/src/gopkg.in/mgo.v2/gridfs.go:650 +0x460

goroutine 19 [sleep]:
time.Sleep(0x37e11d600)
    /usr/local/go/src/runtime/time.go:59 +0xf9
gopkg.in/mgo%2ev2.(*mongoServer).pinger(0xc4200f2000, 0x1)
    /Users/IT/go/src/gopkg.in/mgo.v2/server.go:301 +0x293
created by gopkg.in/mgo%2ev2.newServer
    /Users/IT/go/src/gopkg.in/mgo.v2/server.go:89 +0x166

goroutine 21 [semacquire]:
sync.runtime_SemacquireMutex(0xc4200f20e4)
    /usr/local/go/src/runtime/sema.go:62 +0x34
sync.(*Mutex).Lock(0xc4200f20e0)
    /usr/local/go/src/sync/mutex.go:87 +0x9d
gopkg.in/mgo%2ev2.(*mongoSocket).readLoop(0xc4200f20e0)
    /Users/IT/go/src/gopkg.in/mgo.v2/socket.go:582 +0x40a
created by gopkg.in/mgo%2ev2.newSocket
    /Users/IT/go/src/gopkg.in/mgo.v2/socket.go:194 +0x259

goroutine 9 [semacquire]:
sync.runtime_SemacquireMutex(0xc4202d2044)
    /usr/local/go/src/runtime/sema.go:62 +0x34
sync.(*Mutex).Lock(0xc4202d2040)
    /usr/local/go/src/sync/mutex.go:87 +0x9d
gopkg.in/mgo%2ev2.(*mongoSocket).SimpleQuery(0xc4200f20e0, 0xc4202e4000, 0x6, 0x143fbe3, 0x5, 0xc4202d2031, 0xb)
    /Users/IT/go/src/gopkg.in/mgo.v2/socket.go:367 +0x28b
gopkg.in/mgo%2ev2.(*Database).run(0xc4200bc8e0, 0xc4200f20e0, 0x13d0f00, 0xc4202d4040, 0x13cbb00, 0xc4202e2000, 0xc4200f2000, 0xc4200f20e0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:3261 +0x1b3
gopkg.in/mgo%2ev2.(*Collection).writeOpCommand(0xc420019f20, 0xc4200f20e0, 0xc4200e2000, 0x139efa0, 0xc4202d6000, 0x1010001, 0x23685a8, 0x0, 0x100c420028638)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:4786 +0x1db
gopkg.in/mgo%2ev2.(*Collection).writeOp(0xc420019f20, 0x139efa0, 0xc4202d6000, 0x100e501, 0x0, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:4645 +0x6dc
gopkg.in/mgo%2ev2.(*Collection).Insert(0xc420019f20, 0xc4202d2000, 0x1, 0x1, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:2437 +0xac
gopkg.in/mgo%2ev2.(*GridFile).insertChunk.func1(0x162c4e0, 0xc420290000, 0x3fc3e, 0x40000)
    /Users/IT/go/src/gopkg.in/mgo.v2/gridfs.go:642 +0xe8
created by gopkg.in/mgo%2ev2.(*GridFile).insertChunk
    /Users/IT/go/src/gopkg.in/mgo.v2/gridfs.go:650 +0x460

goroutine 12 [semacquire]:
sync.runtime_SemacquireMutex(0xc4200e6074)
    /usr/local/go/src/runtime/sema.go:62 +0x34
sync.(*Mutex).Lock(0xc4200e6070)
    /usr/local/go/src/sync/mutex.go:87 +0x9d
gopkg.in/mgo%2ev2.(*mongoSocket).SimpleQuery(0xc4200f20e0, 0xc4202e40e0, 0x6, 0x143fbe3, 0x5, 0xc4200e6060, 0xb)
    /Users/IT/go/src/gopkg.in/mgo.v2/socket.go:367 +0x28b
gopkg.in/mgo%2ev2.(*Database).run(0xc4200bc8e0, 0xc4200f20e0, 0x13d0f00, 0xc4200ee080, 0x13cbb00, 0xc4202e2060, 0x2, 0xc42005e400)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:3261 +0x1b3
gopkg.in/mgo%2ev2.(*Collection).writeOpCommand(0xc420019f20, 0xc4200f20e0, 0xc4200e2000, 0x139efa0, 0xc420018d20, 0x1010001, 0x2304558, 0x46, 0x8700c420023638)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:4786 +0x1db
gopkg.in/mgo%2ev2.(*Collection).writeOp(0xc420019f20, 0x139efa0, 0xc420018d20, 0x100e501, 0x0, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:4645 +0x6dc
gopkg.in/mgo%2ev2.(*Collection).Insert(0xc420019f20, 0xc420010060, 0x1, 0x1, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:2437 +0xac
gopkg.in/mgo%2ev2.(*GridFile).insertChunk.func1(0x162c4e0, 0xc42013a000, 0x3fc3e, 0x40000)
    /Users/IT/go/src/gopkg.in/mgo.v2/gridfs.go:642 +0xe8
created by gopkg.in/mgo%2ev2.(*GridFile).insertChunk
    /Users/IT/go/src/gopkg.in/mgo.v2/gridfs.go:650 +0x460

goroutine 38 [IO wait]:
net.runtime_pollWait(0x23a0f00, 0x77, 0x4)
    /usr/local/go/src/runtime/netpoll.go:164 +0x59
net.(*pollDesc).wait(0xc4200fa068, 0x77, 0x15f84c0, 0x15f4540)
    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38
net.(*pollDesc).waitWrite(0xc4200fa068, 0xc420392ef2, 0x2edd1)
    /usr/local/go/src/net/fd_poll_runtime.go:84 +0x34
net.(*netFD).Write(0xc4200fa000, 0xc420382000, 0x3fcc3, 0x40000, 0x10ef2, 0x15f84c0, 0x15f4540)
    /usr/local/go/src/net/fd_unix.go:340 +0x34d
net.(*conn).Write(0xc4200ea008, 0xc420382000, 0x3fcc3, 0x40000, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/net.go:193 +0x70
gopkg.in/mgo%2ev2.(*mongoSocket).Query(0xc4200f20e0, 0xc420181878, 0x1, 0x1, 0x0, 0x2)
    /Users/IT/go/src/gopkg.in/mgo.v2/socket.go:525 +0x2ad1
gopkg.in/mgo%2ev2.(*mongoSocket).SimpleQuery(0xc4200f20e0, 0xc4200f21c0, 0x6, 0x143fbe3, 0x5, 0xc420010631, 0xb)
    /Users/IT/go/src/gopkg.in/mgo.v2/socket.go:363 +0x22a
gopkg.in/mgo%2ev2.(*Database).run(0xc4200bc8e0, 0xc4200f20e0, 0x13d0f00, 0xc4202d4140, 0x13cbb00, 0xc4200f6000, 0x1444391, 0xc42002a800)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:3261 +0x1b3
gopkg.in/mgo%2ev2.(*Collection).writeOpCommand(0xc420019f20, 0xc4200f20e0, 0xc4200e2000, 0x139efa0, 0xc4200e8000, 0x1010001, 0x2306a28, 0x0, 0x800c4204a3e38)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:4786 +0x1db
gopkg.in/mgo%2ev2.(*Collection).writeOp(0xc420019f20, 0x139efa0, 0xc4200e8000, 0xc4200e6001, 0x0, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:4645 +0x6dc
gopkg.in/mgo%2ev2.(*Collection).Insert(0xc420019f20, 0xc4200e6000, 0x1, 0x1, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:2437 +0xac
gopkg.in/mgo%2ev2.(*GridFile).insertChunk.func1(0x162c4e0, 0xc4204d8000, 0x3fc3e, 0x40000)
    /Users/IT/go/src/gopkg.in/mgo.v2/gridfs.go:642 +0xe8
created by gopkg.in/mgo%2ev2.(*GridFile).insertChunk
    /Users/IT/go/src/gopkg.in/mgo.v2/gridfs.go:650 +0x460

goroutine 24 [semacquire]:
sync.runtime_SemacquireMutex(0xc4200f20e4)
    /usr/local/go/src/runtime/sema.go:62 +0x34
sync.(*Mutex).Lock(0xc4200f20e0)
    /usr/local/go/src/sync/mutex.go:87 +0x9d
gopkg.in/mgo%2ev2.(*mongoSocket).Acquire(0xc4200f20e0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/socket.go:242 +0x31
gopkg.in/mgo%2ev2.(*Session).acquireSocket(0xc4200e04e0, 0x0, 0x0, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:4419 +0x475
gopkg.in/mgo%2ev2.(*Collection).writeOp(0xc420019f20, 0x139efa0, 0xc4202d6000, 0x100e501, 0x0, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:4603 +0xd6
gopkg.in/mgo%2ev2.(*Collection).Insert(0xc420019f20, 0xc4202d2010, 0x1, 0x1, 0x0, 0x0)
    /Users/IT/go/src/gopkg.in/mgo.v2/session.go:2437 +0xac
gopkg.in/mgo%2ev2.(*GridFile).insertChunk.func1(0x162c4e0, 0xc4205f8000, 0x3fc3e, 0x40000)
    /Users/IT/go/src/gopkg.in/mgo.v2/gridfs.go:642 +0xe8
created by gopkg.in/mgo%2ev2.(*GridFile).insertChunk
    /Users/IT/go/src/gopkg.in/mgo.v2/gridfs.go:650 +0x460

goroutine 14 [IO wait]:
net.runtime_pollWait(0x23a0d80, 0x72, 0x7)
    /usr/local/go/src/runtime/netpoll.go:164 +0x59
net.(*pollDesc).wait(0xc420055728, 0x72, 0x15f84c0, 0x15f4540)
    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38
net.(*pollDesc).waitRead(0xc420055728, 0xc420016b11, 0x1)
    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34
net.(*netFD).Read(0xc4200556c0, 0xc420016b11, 0x1, 0x1, 0x0, 0x15f84c0, 0x15f4540)
    /usr/local/go/src/net/fd_unix.go:250 +0x1b7
net.(*conn).Read(0xc42000e0a8, 0xc420016b11, 0x1, 0x1, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/net.go:181 +0x70
net/http.(*connReader).backgroundRead(0xc420016b00)
    /usr/local/go/src/net/http/server.go:656 +0x58
created by net/http.(*connReader).startBackgroundRead
    /usr/local/go/src/net/http/server.go:652 +0xdf

Process finished with exit code 2
",11958
1692,45415962,"file.assertMode(gfsWriting)
    file.m.Lock()
    debugf(""GridFile %p: writing %d bytes"", file, len(data))
    defer file.m.Unlock()

    if file.err != nil {
        return 0, file.err
    }
",192
1693,45470989,"import (
""bufio""
""fmt""
""os""
""strings""
""strconv""
""math/big""
""bytes""
""io/ioutil""
""github.com/Azure/azure-sdk-for-go/storage""
""compress/gzip""
""encoding/base64""
""crypto/md5""
)

func main() {
    var filter bool = true                                                  //check smart filter
    test := 0
    configfile, err := os.Open(""config.txt"")                                //open configfile
    check(err)                                                              //check file opened
    ConfigScanner := bufio.NewScanner(configfile)                           //open buffer
    ConfigScanner.Scan()                                                    //get serial number
    serialnum := ConfigScanner.Text()
    configfile.Close()                                                      //close the config file
    CanLUT := ParseDBC(""file.dbc"")                                          //parse the associated DBC file
    check(err)                                                              //check file opened
    m := make(map[int64]string)                                             //map of last seen message
    //Azure API
    client, err := storage.NewBasicClient(accountName, accountKey)          //get client from azure
    check(err)
    bsc := client.GetBlobService()                                          //access blob service
    cnt := bsc.GetContainerReference(""containerblob"")                           //get container of the blob
    LBP := storage.ListBlobsParameters{}                                    
    LBP.Prefix = ""dev4/dev4""                                                //only get blobs with dev4/dev4 prefix
    list, err := cnt.ListBlobs(LBP)                                         //get list of all matching blobs
    check(err)
    for _, b := range list.Blobs {                                          //read all blobs from azure with prefix dev4/dev4
        oa := make([]byte,0)
        fmt.Println(""getting blob: "",b.Name)
        readCloser, err := b.Get(nil)                                       //get blob data
        check(err)
        bytesRead, err := ioutil.ReadAll(readCloser)                        //read blob data to byte[]
        check(err)
        if len(bytesRead) < 1 {
            continue
        }
        br := bytes.NewReader(bytesRead)
        zr, err := gzip.NewReader(br)                                       //use gzip reader for zipped data
        check(err)
        uz, err := ioutil.ReadAll(zr)                                       //uz byte[] of unzipped file
        check(err)
        readCloser.Close()                                                  //close the reader
        zr.Close()                                                          //close gzip reader
        r := bytes.NewReader(uz)
        scanner := bufio.NewScanner(r)
        for scanner.Scan() {                                                //loop on each line in the input file
            temp := ParseToFrame(scanner.Text())                            //parse the line into a usable struct
            _, exists := m[temp.nodeid]                                     //check if the frame has alread been seen and is stored in the hashmap
            if exists {                                                     //if exists in the map
                if ChkDuplicate(m, temp) {                                  //is the msg a duplicate? if true the message isnt so add it
                    m[temp.nodeid] = temp.data                              //update the data to the hashmap
                    DecodeFrame(temp, &oa, CanLUT, filter, serialnum)       //decode the frame and output it to another file
                }
            } else {                                                        //DNE in map so add it
                m[temp.nodeid] = temp.data
                DecodeFrame(temp, &oa, CanLUT,filter, serialnum)            //decode the frame and output it to another file
            }
        }//end blob file
        filestr := strings.Split(b.Name, ""_"")[1]
        filestr = ""filtered/filtered_"" + filestr
        var buffout bytes.Buffer
        gz := gzip.NewWriter(&buffout)
        _, err = gz.Write(oa)
        check(err)
        gz.Flush()
        gz.Close()
        compressedData := buffout.Bytes()
        //push block blob to azure
        fmt.Println(""uploading: "",filestr)
        clientnew, err := storage.NewBasicClient(accountName, accountKey)           //get client from azure
        check(err)
        senderbsc := clientnew.GetBlobService()                                         //access blob service
        sendercnt := senderbsc.GetContainerReference(""storeblob"")                           //get container of store blob
        bblob := sendercnt.GetBlobReference(""filtered_"" + strings.Split(b.Name, ""/"")[1])
        err = bblob.CreateBlockBlob(nil)
        check(err)
        blockID := base64.StdEncoding.EncodeToString([]byte(""00000""))
        err = bblob.PutBlock(blockID, compressedData, nil)
        check(err)
        list, err := b.GetBlockList(storage.BlockListTypeUncommitted, nil)
        check(err)
        uncommittedBlocksList := make([]storage.Block, len(list.UncommittedBlocks))
        for i := range list.UncommittedBlocks {
            uncommittedBlocksList[i].ID = list.UncommittedBlocks[i].Name
            uncommittedBlocksList[i].Status = storage.BlockStatusUncommitted
        }
        err = b.PutBlockList(uncommittedBlocksList, nil)
        //check if upload was good.
        CheckHash(&compressedData,filestr,sendercnt)
        check(err)
        if(test == 0){
            break       //test only read one file
        }
        test++
    }//end for blobs     
}//end main
",5714
1694,45500420,"package beater

import (
    ""fmt""
    ""io/ioutil""
    ""math""
    ""time""
    //""log""
    ""strconv""
    ""strings""

    ""github.com/elastic/beats/libbeat/beat""
    ""github.com/elastic/beats/libbeat/common""
    ""github.com/elastic/beats/libbeat/logp""
    ""github.com/elastic/beats/libbeat/publisher""

    ""github.com/bob96/hc34/config""
)

type Hc34 struct {
    done   chan struct{}

    config config.Config

    client publisher.Client

    siteKey string

    fileKey string

    callEndDateTime string 

    callStartDateTime string

    callerPartyNumber string

    calledPartyNumber string

    incomingTrunkKey string

    outgoingTrunkKey string

    blockNumber string

    blockDateTime string

    headerFunction int

    headerUser int

    callerCategory int

    callerOrigineIdentity string

    complementaryIdentity string 

    calledDigits string 

    traficType int 

    serviceType int 

    supportService int 

    chargeDuration int 

    chargeMeters int 

    outgoingTrunk string

    reserved string 

    operatorIdentity string

    operatorServiceType string

    block string

    filekey string

    lastIndexTime time.Time
}
// Creates beater
func New(b *beat.Beat, cfg *common.Config) (beat.Beater, error) {
    config := config.DefaultConfig
    if err := cfg.Unpack(&config); err != nil {
        return nil, fmt.Errorf(""Error reading config file: %v"", err)
    }

    bt := &Hc34{
        done: make(chan struct{}),
        config: config,
    }
    return bt, nil
}

func (bt *Hc34) Run(b *beat.Beat) error {
    logp.Info(""hc34 is running! Hit CTRL-C to stop it."")

    bt.client = b.Publisher.Connect()
    ticker := time.NewTicker(bt.config.Period) 
    //counter := 1
    for {
        now := time.Now()
        bt.hc34DataHolderfunc(bt.config.Path) 
        bt.lastIndexTime = now             
        logp.Info(""Event sent"")
        select {
        case <-bt.done:
            return nil
        case <-ticker.C:
        }

        /*event := common.MapStr{
            ""@timestamp"": common.Time(time.Now()),
            ""type"":       b.Name,
            ""counter"":    counter,
        }
        bt.client.PublishEvent(event)
        logp.Info(""Event sent"")
        counter++*/
    }
}

func (bt *Hc34) Stop() {
    bt.client.Close()
    close(bt.done)
}
//checking error
func check(e error) {
    if e != nil {
        panic(e)
    }
}

func (bt *Hc34) hc34DataHolderfunc(dirfile string) {    
//reading the binary file
    data, err := ioutil.ReadFile(dirfile)
    check(err)
    //t := f.ModTime() 
    bt.hc34decoderfunc(string(data))

    event := common.MapStr{
            ""@timestamp"": common.Time(time.Now()),
            /*""siteKey"": siteKey,
            ""fileKey"": fileKey,*/
            //""callEndDateTime"":    bt.callEndDateTime,
            //""callStartDateTime"": bt.callStartDateTime,
            ""callerPartyNumber"": bt.callerPartyNumber,
            ""calledPartyNumber"": bt.calledPartyNumber,
            //""incomingTrunkKey"": bt.incomingTrunkKey,
            //""outgoingTrunkKey"": bt.outgoingTrunkKey,
            ""blockNumber"": bt.blockNumber,
            ""blockDateTime"": bt.blockDateTime,
            ""headerFunction"": bt.headerFunction,
            ""headerUser"": bt.headerUser,
            ""callerCategory"": bt.callerCategory,
            ""callerOrigineIdentity"": bt.callerOrigineIdentity,
            ""complementaryIdentity"": bt.complementaryIdentity,
            ""calledDigits"": bt.calledDigits,
            ""traficType"": bt.traficType,
            ""serviceType"": bt.serviceType,
            ""supportService"": bt.supportService,
            ""chargeDuration"": bt.chargeDuration,
            ""chargeMeters"": bt.chargeMeters,
            //""outgoingTrunk"": bt.outgoingTrunk,
            ""reserved"": bt.reserved,
            ""peratorIdentity"": bt.operatorIdentity,
            ""operatorServiceType"": bt.operatorServiceType,
        }
            bt.client.PublishEvent(event)


}
type hc34decoder struct{
    block string
    siteKey string
    filekey string
}
func (bt *Hc34) hc34decoderfunc(block string){
    // Get header (32 bytes) and content (1932 bytes) from block

    header :=block[0:64]
    content :=block[64:len(block)]
    // Get block key and date time from header
    blockKey :=header[4:10]
    yearBlock :=header[10:12]
    //BDTdecode, err := hex.DecodeString(header[10:12])

    bt.blockDateTime =bt.getDate(bt.getDateBlockHeader(header[10:22]))
    /*if err != nil {
        log.Fatal(err)
    }*/
    // process content to extract CDRs
    start := 0
    totalCdr := len(content) / 84
    for z := 0; z < totalCdr; z++ {
        record := content[start:start + 84]
        start = start + 84
        // Extract data from single record
        //CEDdecode, err :=hex.DecodeString(record[10:12])
        a:= hex2decimal(record[54:56])
        headerFunction:= hex2decimal(record[0:2])
        headerUser:= hex2decimal(record[2:4])
        callerCategory:= hex2decimal(record[4:6])
        callEndDateTime :=bt.getDate(bt.getDateCall(record[6:16], yearBlock))
        callerOrigineIdentity:= strings.Replace(string(record[16:26]),""F"","""",-1)
        complementaryIdentity := strings.Replace(string(record[26:36]),""F"","""",-1)
        calledDigits:= strings.Replace(string(record[36:54]),""F"","""",-1)
        traficType:= hex2decimal(strings.Replace(string(a),""F"","""",-1))
        serviceType := hex2decimal(record[56:58])
        supportService :=hex2decimal(record[58:60])
        duration :=hex2decimal(record[60:64])
        meters:= hex2decimal(record[64:70])
        //outgoingTrunk :=strings.Replace(string(record[70:74]),""F"", """",-1)
        bt.reserved = record[74:78]
        bt.operatorIdentity = strings.Replace(string(record[78:82]),""F"", """",-1)
        bt.operatorServiceType =record[82:84]
        bt.blockNumber=blockKey
        bt.callerPartyNumber = bt.getFormattedMsisdnHc34Caller(complementaryIdentity, callerOrigineIdentity)
        bt.calledPartyNumber = bt.getFormattedMsisdnHc34Called(calledDigits)

        bt.callStartDateTime  = bt.getStartDate(callEndDateTime, int(duration) )
        /*if err !=nil{
            log.Fatal(err)
        }*/
        bt.headerFunction=int(headerFunction)
        bt.headerUser=int(headerUser)
        bt.callerCategory=int(callerCategory)
        bt.traficType=int(traficType)
        bt.serviceType=int(serviceType)
        bt.supportService=int(supportService)
        bt.chargeMeters=int(meters)
        bt.chargeDuration=int(duration)

func (bt *Hc34) getStartDate(endTime string, duration int) string{
    layout := ""2006-01-02T15:04:05.000Z""
    t, err := time.Parse(layout, endTime)
    if err!=nil{
        panic(err)
    }
    return (t.Add(time.Duration(-duration) * time.Second)).String()

}
/**
     * Get the date of the call.
     * @param input the quanted date
     * @param year the year
     * @return the date of the call
     */
func (bt *Hc34) getDateCall(input string,year string) string{
        quant:= hex2decimal(input[1:4])
        hour := input[4:len(input)]

        return ""20"" + year + bt.getQuantDate(quant) + """" + hour
    }

    /**
     * Get date of block header.
     * @param input the quanted date
     * @return the date block header
     */
func(bt *Hc34) getDateBlockHeader(input string) string{
        year := input[0:2]
        quant:= hex2decimal(input[3:6])
        hour := input[6:len(input)];
        /*if err!=nil{
            panic(err)
        }*/
        return ""20"" + year + bt.getQuantDate(quant) + """" + hour
    }

    /**
     * format date.
     * @param date the date
     * @return the formatted date
     */

func(bt *Hc34) getDate(date string) string{
        year := date[0:4]
        month := date[4:6]
        day := date[6:8]
        hour := date[8:10]
        minute := date[10:12]
        second := date[12:14]
        return year + ""-"" + month + ""-"" + day + "" "" + hour + "":"" + minute + "":"" + second;
    }
     /**
     * Format quanted date.
     * @param quant the quanted date
     * @return the formatted date
     */
func(bt *Hc34) getQuantDate(quant int) string{
        nanoDayOfYear:=string(quant*24*60*60*1000*1000*1000) + ""ns""
        durt,err:=time.ParseDuration(nanoDayOfYear)
        t := time.Date(2009, time.January, 01, 00, 0, 0, 0, time.UTC)
        t=t.Add(durt)
        if err!=nil{

            panic(err)
        }
        return string(t.Month())+""""+string(t.Day())

    }
func bin(i int, prefix bool) string {
      i64 := int64(i)

      if prefix {
              return ""0b"" + strconv.FormatInt(i64, 2) // base 2 for binary
      } else {
              return strconv.FormatInt(i64, 2) // base 2 for binary
      }
}

func bin2int(binStr string) int {

// base 2 for binary
result, _ := strconv.ParseInt(binStr, 2, 64)
return int(result)
}


func hex(i int, prefix bool) string {
  i64 := int64(i)

  if prefix {
          return ""0x"" + strconv.FormatInt(i64, 16) // base 16 for hexadecimal
  } else {
          return strconv.FormatInt(i64, 16) // base 16 for hexadecimal
  }
}

func hex2int(hexStr string) int {
  // base 16 for hexadecimal
  result, _ := strconv.ParseInt(hexStr, 16, 64)
  return int(result)
}
func hex2decimal(hexStr string) int{

    base16 := 16;

    var val float64
    for i:=0; i>len(hexStr);i++{
        vala:=hex2int(string(base16))
        valo:=hex2int(string(hexStr[len(hexStr)-i]))
        val+=float64(valo)*math.Pow(float64(vala),float64(i))
    }
    return int(val)

}
",9437
1695,45500420,"panic: time: invalid duration ns

goroutine 1 [running]:
github.com/bob96/hc34/beater.(*Hc34).getQuantDate(0xc42012a8c0, 0x0, 0x0, 0x9)
    /home/hp/src/github.com/bob96/hc34/beater/hc34.go:354 +0x2cf
github.com/bob96/hc34/beater.(*Hc34).getDateBlockHeader(0xc42012a8c0, 0xc4202d000a, 0xc, 0x0, 0x0)
    /home/hp/src/github.com/bob96/hc34/beater/hc34.go:324 +0x73
github.com/bob96/hc34/beater.(*Hc34).hc34decoderfunc(0xc42012a8c0, 0xc4202d0000, 0x2d128)
    /home/hp/src/github.com/bob96/hc34/beater/hc34.go:190 +0x77
github.com/bob96/hc34/beater.(*Hc34).hc34DataHolderfunc(0xc42012a8c0, 0xc420103140, 0x5e)
    /home/hp/src/github.com/bob96/hc34/beater/hc34.go:141 +0xd3
github.com/bob96/hc34/beater.(*Hc34).Run(0xc42012a8c0, 0xc420142420, 0xc4201424c8, 0xb)
    /home/hp/src/github.com/bob96/hc34/beater/hc34.go:105 +0x109
github.com/bob96/hc34/vendor/github.com/elastic/beats/libbeat/beat.(*Beat).launch(0xc420142420, 0x9a84c8, 0x0, 0x0)
    /home/hp/src/github.com/bob96/hc34/vendor/github.com/elastic/beats/libbeat/beat/beat.go:211 +0x706
github.com/bob96/hc34/vendor/github.com/elastic/beats/libbeat/beat.Run(0x9855d5, 0x4, 0x0, 0x0, 0x9a84c8, 0xc4200001a0, 0xc4200001a0)
    /home/hp/src/github.com/bob96/hc34/vendor/github.com/elastic/beats/libbeat/beat/beat.go:136 +0x65
main.main()
    /home/hp/src/github.com/bob96/hc34/main.go:12 +0x54
",1348
1696,45515182,"> mkdir -p ""$HOME/Go/src/github.com/fabric8io""
> export GOPATH=""$HOME/Go""
> cd ""$HOME/Go/src/github.com/fabric8io""
> git clone https://github.com/fabric8io/kubernetes-model
> cd kubernetes-model
> brew install go
> brew install godep
> make
CGO_ENABLED=0 GO15VENDOREXPERIMENT=1 go build -a ./cmd/generate/generate.go
cmd/generate/generate.go:27:2: cannot find package ""github.com/openshift/origin/pkg/authorization/api/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/github.com/openshift/origin/pkg/authorization/api/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/github.com/openshift/origin/pkg/authorization/api/v1 (from $GOPATH)
cmd/generate/generate.go:28:2: cannot find package ""github.com/openshift/origin/pkg/build/api/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/github.com/openshift/origin/pkg/build/api/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/github.com/openshift/origin/pkg/build/api/v1 (from $GOPATH)
cmd/generate/generate.go:29:2: cannot find package ""github.com/openshift/origin/pkg/deploy/api/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/github.com/openshift/origin/pkg/deploy/api/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/github.com/openshift/origin/pkg/deploy/api/v1 (from $GOPATH)
cmd/generate/generate.go:30:2: cannot find package ""github.com/openshift/origin/pkg/image/api/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/github.com/openshift/origin/pkg/image/api/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/github.com/openshift/origin/pkg/image/api/v1 (from $GOPATH)
cmd/generate/generate.go:31:2: cannot find package ""github.com/openshift/origin/pkg/oauth/api/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/github.com/openshift/origin/pkg/oauth/api/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/github.com/openshift/origin/pkg/oauth/api/v1 (from $GOPATH)
cmd/generate/generate.go:32:2: cannot find package ""github.com/openshift/origin/pkg/project/api/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/github.com/openshift/origin/pkg/project/api/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/github.com/openshift/origin/pkg/project/api/v1 (from $GOPATH)
cmd/generate/generate.go:33:2: cannot find package ""github.com/openshift/origin/pkg/route/api/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/github.com/openshift/origin/pkg/route/api/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/github.com/openshift/origin/pkg/route/api/v1 (from $GOPATH)
cmd/generate/generate.go:34:2: cannot find package ""github.com/openshift/origin/pkg/template/api/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/github.com/openshift/origin/pkg/template/api/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/github.com/openshift/origin/pkg/template/api/v1 (from $GOPATH)
cmd/generate/generate.go:35:2: cannot find package ""github.com/openshift/origin/pkg/user/api/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/github.com/openshift/origin/pkg/user/api/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/github.com/openshift/origin/pkg/user/api/v1 (from $GOPATH)
cmd/generate/generate.go:36:2: cannot find package ""k8s.io/apiextensions-server/pkg/apis/apiextensions/v1beta1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/k8s.io/apiextensions-server/pkg/apis/apiextensions/v1beta1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/k8s.io/apiextensions-server/pkg/apis/apiextensions/v1beta1 (from $GOPATH)
cmd/generate/generate.go:37:2: cannot find package ""k8s.io/kubernetes/pkg/api/resource"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/k8s.io/kubernetes/pkg/api/resource (from $GOROOT)
    /Users/joangoyeau/Code/go/src/k8s.io/kubernetes/pkg/api/resource (from $GOPATH)
cmd/generate/generate.go:38:2: cannot find package ""k8s.io/kubernetes/pkg/api/unversioned"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/k8s.io/kubernetes/pkg/api/unversioned (from $GOROOT)
    /Users/joangoyeau/Code/go/src/k8s.io/kubernetes/pkg/api/unversioned (from $GOPATH)
cmd/generate/generate.go:39:2: cannot find package ""k8s.io/kubernetes/pkg/api/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/k8s.io/kubernetes/pkg/api/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/k8s.io/kubernetes/pkg/api/v1 (from $GOPATH)
cmd/generate/generate.go:40:2: cannot find package ""k8s.io/kubernetes/pkg/apis/apps/v1beta1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/k8s.io/kubernetes/pkg/apis/apps/v1beta1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/k8s.io/kubernetes/pkg/apis/apps/v1beta1 (from $GOPATH)
cmd/generate/generate.go:41:2: cannot find package ""k8s.io/kubernetes/pkg/apis/autoscaling/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/k8s.io/kubernetes/pkg/apis/autoscaling/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/k8s.io/kubernetes/pkg/apis/autoscaling/v1 (from $GOPATH)
cmd/generate/generate.go:43:2: cannot find package ""k8s.io/kubernetes/pkg/apis/batch/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/k8s.io/kubernetes/pkg/apis/batch/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/k8s.io/kubernetes/pkg/apis/batch/v1 (from $GOPATH)
cmd/generate/generate.go:42:2: cannot find package ""k8s.io/kubernetes/pkg/apis/batch/v2alpha1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/k8s.io/kubernetes/pkg/apis/batch/v2alpha1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/k8s.io/kubernetes/pkg/apis/batch/v2alpha1 (from $GOPATH)
cmd/generate/generate.go:44:2: cannot find package ""k8s.io/kubernetes/pkg/apis/extensions/v1beta1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/k8s.io/kubernetes/pkg/apis/extensions/v1beta1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/k8s.io/kubernetes/pkg/apis/extensions/v1beta1 (from $GOPATH)
cmd/generate/generate.go:45:2: cannot find package ""k8s.io/kubernetes/pkg/client/unversioned/clientcmd/api/v1"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/k8s.io/kubernetes/pkg/client/unversioned/clientcmd/api/v1 (from $GOROOT)
    /Users/joangoyeau/Code/go/src/k8s.io/kubernetes/pkg/client/unversioned/clientcmd/api/v1 (from $GOPATH)
cmd/generate/generate.go:46:2: cannot find package ""k8s.io/kubernetes/pkg/watch/json"" in any of:
    /usr/local/Cellar/go/1.8.3/libexec/src/k8s.io/kubernetes/pkg/watch/json (from $GOROOT)
    /Users/joangoyeau/Code/go/src/k8s.io/kubernetes/pkg/watch/json (from $GOPATH)
make: *** [build] Error 1
",6391
1697,45515182,"> make update-deps
make: *** No rule to make target `update-deps'.  Stop.
> make [tag=v0.5.2] update-deps
make: *** No rule to make target `update-deps'.  Stop.
> make tag=v0.5.2 update-deps
make: *** No rule to make target `update-deps'.  Stop.
",246
1698,45532809,"Location string `json:""location""`  
",36
1699,45532809,"Location string `json:""location""`
",34
1700,45532809,"Location string `json:""location"" protobuf:""bytes,2,opt,name=location""`
",71
1701,45532809,"out.Location = in.Location
",27
1702,45532809,"func autoConvert_v1_NodeSystemInfo_To_api_NodeSystemInfo(in *NodeSystemInfo, out *api.NodeSystemInfo, s conversion.Scope) error {
    out.MachineID = in.MachineID
    out.SystemUUID = in.SystemUUID
    out.Location = in.Location
    out.BootID = in.BootID
    out.KernelVersion = in.KernelVersion
    out.OSImage = in.OSImage
    out.ContainerRuntimeVersion = in.ContainerRuntimeVersion
    out.KubeletVersion = in.KubeletVersion
    out.KubeProxyVersion = in.KubeProxyVersion
    out.OperatingSystem = in.OperatingSystem
    out.Architecture = in.Architecture
    return nil
}
",578
1703,45532809,"fmt.Fprintf(out, "" Location:\t%s\n"", node.Status.NodeInfo.Location)
",68
1704,45532809,"func describeNode(node *api.Node, nodeNonTerminatedPodsList *api.PodList, events *api.EventList, canViewPods bool) (string, error) {
return tabbedString(func(out io.Writer) error {
    fmt.Fprintf(out, ""Name:\t%s\n"", node.Name)
    fmt.Fprintf(out, ""Role:\t%s\n"", findNodeRole(node))
    printLabelsMultiline(out, ""Labels"", node.Labels)
    printTaintsInAnnotationMultiline(out, ""Taints"", node.Annotations)
    fmt.Fprintf(out, ""CreationTimestamp:\t%s\n"", node.CreationTimestamp.Time.Format(time.RFC1123Z))
    fmt.Fprintf(out, ""Phase:\t%v\n"", node.Status.Phase)
    if len(node.Status.Conditions) > 0 {
        fmt.Fprint(out, ""Conditions:\n  Type\tStatus\tLastHeartbeatTime\tLastTransitionTime\tReason\tMessage\n"")
        fmt.Fprint(out, ""  ----\t------\t-----------------\t------------------\t------\t-------\n"")
        for _, c := range node.Status.Conditions {
            fmt.Fprintf(out, ""  %v \t%v \t%s \t%s \t%v \t%v\n"",
                c.Type,
                c.Status,
                c.LastHeartbeatTime.Time.Format(time.RFC1123Z),
                c.LastTransitionTime.Time.Format(time.RFC1123Z),
                c.Reason,
                c.Message)
        }
    }
    addresses := make([]string, 0, len(node.Status.Addresses))
    for _, address := range node.Status.Addresses {
        addresses = append(addresses, address.Address)
    }

    printResourceList := func(resourceList api.ResourceList) {
        resources := make([]api.ResourceName, 0, len(resourceList))
        for resource := range resourceList {
            resources = append(resources, resource)
        }
        sort.Sort(SortableResourceNames(resources))
        for _, resource := range resources {
            value := resourceList[resource]
            fmt.Fprintf(out, "" %s:\t%s\n"", resource, value.String())
        }
    }

    fmt.Fprintf(out, ""Addresses:\t%s\n"", strings.Join(addresses, "",""))
    if len(node.Status.Capacity) > 0 {
        fmt.Fprintf(out, ""Capacity:\n"")
        printResourceList(node.Status.Capacity)
    }
    if len(node.Status.Allocatable) > 0 {
        fmt.Fprintf(out, ""Allocatable:\n"")
        printResourceList(node.Status.Allocatable)
    }

    fmt.Fprintf(out, ""System Info:\n"")
    fmt.Fprintf(out, "" Machine ID:\t%s\n"", node.Status.NodeInfo.MachineID)
    fmt.Fprintf(out, "" System UUID:\t%s\n"", node.Status.NodeInfo.SystemUUID)
    fmt.Fprintf(out, "" Location:\t%s\n"", node.Status.NodeInfo.Location)
    fmt.Fprintf(out, "" Boot ID:\t%s\n"", node.Status.NodeInfo.BootID)
    fmt.Fprintf(out, "" Kernel Version:\t%s\n"", node.Status.NodeInfo.KernelVersion)
    fmt.Fprintf(out, "" OS Image:\t%s\n"", node.Status.NodeInfo.OSImage)
    fmt.Fprintf(out, "" Operating System:\t%s\n"", node.Status.NodeInfo.OperatingSystem)
    fmt.Fprintf(out, "" Architecture:\t%s\n"", node.Status.NodeInfo.Architecture)
    fmt.Fprintf(out, "" Container Runtime Version:\t%s\n"", node.Status.NodeInfo.ContainerRuntimeVersion)
    fmt.Fprintf(out, "" Kubelet Version:\t%s\n"", node.Status.NodeInfo.KubeletVersion)
    fmt.Fprintf(out, "" Kube-Proxy Version:\t%s\n"", node.Status.NodeInfo.KubeProxyVersion)

    if len(node.Spec.PodCIDR) > 0 {
        fmt.Fprintf(out, ""PodCIDR:\t%s\n"", node.Spec.PodCIDR)
    }
    if len(node.Spec.ExternalID) > 0 {
        fmt.Fprintf(out, ""ExternalID:\t%s\n"", node.Spec.ExternalID)
    }
    if canViewPods && nodeNonTerminatedPodsList != nil {
        if err := describeNodeResource(nodeNonTerminatedPodsList, node, out); err != nil {
            return err
        }
    } else {
        fmt.Fprintf(out, ""Pods:\tnot authorized\n"")
    }
    if events != nil {
        DescribeEvents(events, out)
    }
    return nil
})
}
",3656
1705,45547741,"package main

import (
    “bytes”
    “encoding/binary”
    “fmt”
    “os”
    “os/exec”
    “syscall”
)

// parses through the /proc/bus/input/devices file for keyboard devices.
// Copied from `github.com/gearmover/keylogger` with trivial modification.
func dumpDevices() ([]string, error) {
    cmd := exec.Command(“/bin/sh”, “-c”, “/bin/grep -E ‘Handlers|EV=’ /proc/bus/input/devices | /bin/grep -B1 ‘EV=120013’ | /bin/grep -Eo ‘event[0-9]+’”)

    output, err := cmd.Output()
    if err != nil {
        return nil, err
    }

    buf := bytes.NewBuffer(output)

    var devices []string

    for line, err := buf.ReadString(‘\n’); err == nil; {
        devices = append(devices, “/dev/input/”+line[:len(line)-1])

        line, err = buf.ReadString(‘\n’)
    }

    return devices, nil
}

// Using MS names, just because I don’t feel like looking up the Linux versions.
var keys = map[uint16]string{
    0xa3: “VK_MEDIA_NEXT_TRACK”,
    0xa5: “VK_MEDIA_PREV_TRACK”,
    0xa6: “VK_MEDIA_STOP”,
    0xa4: “VK_MEDIA_PLAY_PAUSE”,
}

// Most of the code here comes from `github.com/gearmover/keylogger`.
func main() {
    // drop privileges when executing other programs
    syscall.Setgid(65534)
    syscall.Setuid(65534)

    // dump our keyboard devices from /proc/bus/input/devices
    devices, err := dumpDevices()
    if err != nil {
        fmt.Println(err)
    }
    if len(devices) == 0 {
        fmt.Println(“No input devices found”)
        return
    }

    // bring back our root privs
    syscall.Setgid(0)
    syscall.Setuid(0)

    // Open the first keyboard device.
    input, err := os.OpenFile(devices[0], os.O_RDONLY, 0600)
    if err != nil {
        fmt.Println(err)
        return
    }
    defer input.Close()

    // Log media keys
    var buffer = make([]byte, 24)
    for {
        // read the input events as they come in
        n, err := input.Read(buffer)
        if err != nil {
            return
        }

        if n != 24 {
            fmt.Println(“Weird Input Event Size: “, n)
            continue
        }

        // parse the input event according to the  header struct
        binary.LittleEndian.Uint64(buffer[0:8]) // Time stamp stuff I could care less about
        binary.LittleEndian.Uint64(buffer[8:16])
        etype := binary.LittleEndian.Uint16(buffer[16:18])        // Event Type. Always 1 for keyboard events
        code := binary.LittleEndian.Uint16(buffer[18:20])         // Key scan code
        value := int32(binary.LittleEndian.Uint32(buffer[20:24])) // press(1), release(0), or repeat(2)

        if etype == 1 && value == 1 && keys[code] != “” {
            // In a real application I would send a message here.
            fmt.Println(keys[code])
        }
    }
}
",2822
1706,45547741,"package main

import (
    “fmt”
    “syscall”
    “time”
)

var user32 = syscall.NewLazyDLL(“user32.dll”)
var procGAKS = user32.NewProc(“GetAsyncKeyState”)

// Key codes from MSDN
var keys = [4]uint{
    0xb0, // VK_MEDIA_NEXT_TRACK
    0xb1, // VK_MEDIA_PREV_TRACK
    0xb2, // VK_MEDIA_STOP
    0xb3, // VK_MEDIA_PLAY_PAUSE
}

var names = [4]string{
    “VK_MEDIA_NEXT_TRACK”,
    “VK_MEDIA_PREV_TRACK”,
    “VK_MEDIA_STOP”,
    “VK_MEDIA_PLAY_PAUSE”,
}

func main() {
    fmt.Println(“Running…”)

    // Since I don’t want to trigger dozens of times for each key I need to track state.
    // I could check the bits of GAKS’ return value, but that is not reliable.
    down := [4]bool{false, false, false, false}

    for {
        time.Sleep(1 * time.Millisecond)
        for i, key := range keys {
            // val is not a simple boolean!
            // 0 means “not pressed” (also certain errors)
            // If LSB is set the key was just pressed (this may not be reliable)
            // If MSB is set the key is currently down.
            val, _, _ := procGAKS.Call(uintptr(key))

            // Turn a press into a transition and track key state.
            goingdown := false
            if int(val) != 0 && !down[i] {
                goingdown = true
                down[i] = true
            }
            if int(val) == 0 && down[i] {
                down[i] = false
            }
            if goingdown {
                // In a real application I would send a message here.
                fmt.Println(names[i])
            }
        }
    }
}
",1622
1707,45567283,"//main func runs perfectly fine
func main() {
    //ODBC connection to vertica via DSN
    db, err := sql.Open(""odbc"", ""DSN=HPVerticaDSN"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    if err := db.Ping(); err != nil {
        fmt.Printf(""ping err: %v"", err)
    }

    //start gin
    r := gin.Default()
    r.GET(""/ping"", func(c *gin.Context) {
        handler(c, db)
    })
    r.Run() // listen and serve on 0.0.0.0:8080
}
",452
1708,45567283,"//handler func is a http handler for '/ping' get request
func handler(c *gin.Context, db *sql.DB) {
    //start transaction
    tx, err := db.Begin()
    //it is here where the process gets stuck after a while
    if err != nil {
        log.Printf(""tx begin error: %v"", err)
        return
    }
    defer func() {
        if err != nil {
            log.Printf(""error sql: %v"", err)
            tx.Rollback()
            return
        }
        err = tx.Commit()
        if err != nil {
            log.Printf(""commit err: %v"", err)
        }
    }()
    fmt.Println(""start prepare statment"")
    stmt, err := tx.Prepare(""insert /*+direct*/ into events (id, game_id, created_at) values(?,?,?)"")
    if err != nil {
        log.Printf(""Insert prepare statement: %v"", err)
        c.JSON(500, gin.H{
            ""message"": err.Error(),
        })
        return
    }
    fmt.Println(""exec prepare statment start..."")
    res, err := stmt.Exec(uuid.NewV4().String(), uuid.NewV4().String(), time.Now().Format(time.RFC3339))
    if err != nil {
        fmt.Printf(""Insert record: %v"", err)
        return
    }
    defer stmt.Close()
    fmt.Println(""exec prepare statment end"")
    num, err := res.RowsAffected()
    if err != nil {
        fmt.Printf(""Rows affected err: %v"", err)
        return
    }
    if num != 1 {
        fmt.Printf(""Rows affected: %v, must be 1"", num)
        err = errors.New(""Rows affected must be 1"")
        return
    }
    c.JSON(200, gin.H{
        ""message"": ""pong"",
    })
}
",1509
1709,45567283,"[ODBC][61608][1502281990.419123][SQLSetConnectAttr.c][842]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.643292][SQLSetConnectAttr.c][396]
        Entry:
            Connection = 0x7f71840008c0
            Attribute = SQL_ATTR_AUTOCOMMIT
            Value = (nil)
            StrLen = -5
[ODBC][61608][1502282121.644409][SQLSetConnectAttr.c][842]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.644794][SQLAllocHandle.c][540]
        Entry:
            Handle Type = 3
            Input Handle = 0x7f71840008c0
[ODBC][61608][1502282121.644996][SQLAllocHandle.c][1085]
        Exit:[SQL_SUCCESS]
            Output Handle = 0x5564cb6408e0
[ODBC][61608][1502282121.645018][SQLPrepareW.c][165]
        Entry:
            Statement = 0x5564cb6408e0
            SQL = [insert /*+direct*/ into events (.....][length = 147 (SQL_NTS)]
[ODBC][61608][1502282121.649229][SQLPrepareW.c][346]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.649256][SQLNumParams.c][144]
        Entry:
            Statement = 0x5564cb6408e0
            Param Count = 0xc4201d0f0e
[ODBC][61608][1502282121.649266][SQLNumParams.c][231]
        Exit:[SQL_SUCCESS]
            Count = 0xc4201d0f0e -> 8
[ODBC][61608][1502282121.649274][SQLDescribeParam.c][185]
        Entry:
            Statement = 0x5564cb6408e0
            Parameter Number = 1
            SQL Type = 0xc4200ba600
            Param Def = 0xc4200ba608
            Scale = 0xc4200ba602
            Nullable = 0xc4201d0f40
[ODBC][61608][1502282121.649284][SQLDescribeParam.c][341]
        Exit:[SQL_SUCCESS]                
            SQL Type = 0x7ffd05d6ad80                
            Param Def = 0x7ffd05d6ae70                
            Scale = 0x7ffd05d6af60                
            Nullable = 0x7ffd05d6b050
[ODBC][61608][1502282121.649290][SQLDescribeParam.c][185]
        Entry:
            Statement = 0x5564cb6408e0
            Parameter Number = 2
            SQL Type = 0xc4200ba630
            Param Def = 0xc4200ba638
            Scale = 0xc4200ba632
            Nullable = 0xc4201d0f40
[ODBC][61608][1502282121.649296][SQLDescribeParam.c][341]
        Exit:[SQL_SUCCESS]                
            SQL Type = 0x7ffd05d6ad80                
            Param Def = 0x7ffd05d6ae70                
            Scale = 0x7ffd05d6af60                
            Nullable = 0x7ffd05d6b050
[ODBC][61608][1502282121.649302][SQLDescribeParam.c][185]
        Entry:
            Statement = 0x5564cb6408e0
            Parameter Number = 3
            SQL Type = 0xc4200ba660
            Param Def = 0xc4200ba668
            Scale = 0xc4200ba662
            Nullable = 0xc4201d0f40
[ODBC][61608][1502282121.649308][SQLDescribeParam.c][341]
        Exit:[SQL_SUCCESS]                
            SQL Type = 0x7ffd05d6ad80                
            Param Def = 0x7ffd05d6ae70                
            Scale = 0x7ffd05d6af60                
            Nullable = 0x7ffd05d6b050
[ODBC][61608][1502282121.649313][SQLDescribeParam.c][185]
        Entry:
            Statement = 0x5564cb6408e0
            Parameter Number = 4
            SQL Type = 0xc4200ba690
            Param Def = 0xc4200ba698
            Scale = 0xc4200ba692
            Nullable = 0xc4201d0f40
[ODBC][61608][1502282121.649319][SQLDescribeParam.c][341]
        Exit:[SQL_SUCCESS]                
            SQL Type = 0x7ffd05d6ad80                
            Param Def = 0x7ffd05d6ae70                
            Scale = 0x7ffd05d6af60                
            Nullable = 0x7ffd05d6b050
[ODBC][61608][1502282121.649324][SQLDescribeParam.c][185]
        Entry:
            Statement = 0x5564cb6408e0
            Parameter Number = 5
            SQL Type = 0xc4200ba6c0
            Param Def = 0xc4200ba6c8
            Scale = 0xc4200ba6c2
            Nullable = 0xc4201d0f40
[ODBC][61608][1502282121.649330][SQLDescribeParam.c][341]
        Exit:[SQL_SUCCESS]                
            SQL Type = 0x7ffd05d6ad80                
            Param Def = 0x7ffd05d6ae70                
            Scale = 0x7ffd05d6af60                
            Nullable = 0x7ffd05d6b050
[ODBC][61608][1502282121.649335][SQLDescribeParam.c][185]
        Entry:
            Statement = 0x5564cb6408e0
            Parameter Number = 6
            SQL Type = 0xc4200ba6f0
            Param Def = 0xc4200ba6f8
            Scale = 0xc4200ba6f2
            Nullable = 0xc4201d0f40
[ODBC][61608][1502282121.649341][SQLDescribeParam.c][341]
        Exit:[SQL_SUCCESS]                
            SQL Type = 0x7ffd05d6ad80                
            Param Def = 0x7ffd05d6ae70                
            Scale = 0x7ffd05d6af60                
            Nullable = 0x7ffd05d6b050
[ODBC][61608][1502282121.649347][SQLDescribeParam.c][185]
        Entry:
            Statement = 0x5564cb6408e0
            Parameter Number = 7
            SQL Type = 0xc4200ba720
            Param Def = 0xc4200ba728
            Scale = 0xc4200ba722
            Nullable = 0xc4201d0f40
[ODBC][61608][1502282121.649360][SQLDescribeParam.c][341]
        Exit:[SQL_SUCCESS]                
            SQL Type = 0x7ffd05d6ad80                
            Param Def = 0x7ffd05d6ae70                
            Scale = 0x7ffd05d6af60                
            Nullable = 0x7ffd05d6b050
[ODBC][61608][1502282121.649365][SQLDescribeParam.c][185]
        Entry:
            Statement = 0x5564cb6408e0
            Parameter Number = 8
            SQL Type = 0xc4200ba750
            Param Def = 0xc4200ba758
            Scale = 0xc4200ba752
            Nullable = 0xc4201d0f40
[ODBC][61608][1502282121.649371][SQLDescribeParam.c][341]
        Exit:[SQL_SUCCESS]                
            SQL Type = 0x7ffd05d6ad80                
            Param Def = 0x7ffd05d6ae70                
            Scale = 0x7ffd05d6af60                
            Nullable = 0x7ffd05d6b050
[ODBC][61608][1502282121.650523][SQLBindParameter.c][217]
        Entry:
            Statement = 0x5564cb6408e0
            Param Number = 1
            Param Type = 1
            C Type = -8 SQL_C_WCHAR
            SQL Type = -8 SQL_WCHAR
            Col Def = 36
            Scale = 0
            Rgb Value = 0xc42004df40
            Value Max = 72
            StrLen Or Ind = 0xc4200ba628
[ODBC][61608][1502282121.650546][SQLBindParameter.c][422]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.650557][SQLBindParameter.c][217]
        Entry:
            Statement = 0x5564cb6408e0
            Param Number = 2
            Param Type = 1
            C Type = -8 SQL_C_WCHAR
            SQL Type = -9 SQL_WVARCHAR
            Col Def = 24
            Scale = 0
            Rgb Value = 0xc4201df180
            Value Max = 48
            StrLen Or Ind = 0xc4200ba658
[ODBC][61608][1502282121.650569][SQLBindParameter.c][422]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.650585][SQLBindParameter.c][217]
        Entry:
            Statement = 0x5564cb6408e0
            Param Number = 3
            Param Type = 1
            C Type = -8 SQL_C_WCHAR
            SQL Type = -8 SQL_WCHAR
            Col Def = 36
            Scale = 0
            Rgb Value = 0xc42004df90
            Value Max = 72
            StrLen Or Ind = 0xc4200ba688
[ODBC][61608][1502282121.650593][SQLBindParameter.c][422]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.650600][SQLBindParameter.c][217]
        Entry:
            Statement = 0x5564cb6408e0
            Param Number = 4
            Param Type = 1
            C Type = -8 SQL_C_WCHAR
            SQL Type = -9 SQL_WVARCHAR
            Col Def = 10
            Scale = 0
            Rgb Value = 0xc4201d3200
            Value Max = 20
            StrLen Or Ind = 0xc4200ba6b8
[ODBC][61608][1502282121.650607][SQLBindParameter.c][422]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.650614][SQLBindParameter.c][217]
        Entry:
            Statement = 0x5564cb6408e0
            Param Number = 5
            Param Type = 1
            C Type = 4 SQL_C_LONG
            SQL Type = 4 SQL_INTEGER
            Col Def = 4
            Scale = 0
            Rgb Value = 0xc4201d1000
            Value Max = 0
            StrLen Or Ind = (nil)
[ODBC][61608][1502282121.650627][SQLBindParameter.c][422]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.650636][SQLBindParameter.c][217]
        Entry:
            Statement = 0x5564cb6408e0
            Param Number = 6
            Param Type = 1
            C Type = -8 SQL_C_WCHAR
            SQL Type = -9 SQL_WVARCHAR
            Col Def = 11
            Scale = 0
            Rgb Value = 0xc4201d3240
            Value Max = 22
            StrLen Or Ind = 0xc4200ba718
[ODBC][61608][1502282121.650642][SQLBindParameter.c][422]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.650650][SQLBindParameter.c][217]
        Entry:
            Statement = 0x5564cb6408e0
            Param Number = 7
            Param Type = 1
            C Type = -8 SQL_C_WCHAR
            SQL Type = 93 SQL_TYPE_TIMESTAMP
            Col Def = 20
            Scale = 0
            Rgb Value = 0xc4201f0180
            Value Max = 40
            StrLen Or Ind = 0xc4200ba748
[ODBC][61608][1502282121.650656][SQLBindParameter.c][422]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.650663][SQLBindParameter.c][217]
        Entry:
            Statement = 0x5564cb6408e0
            Param Number = 8
            Param Type = 1
            C Type = -8 SQL_C_WCHAR
            SQL Type = 93 SQL_TYPE_TIMESTAMP
            Col Def = 20
            Scale = 0
            Rgb Value = 0xc4201f01b0
            Value Max = 40
            StrLen Or Ind = 0xc4200ba778
[ODBC][61608][1502282121.650670][SQLBindParameter.c][422]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.650676][SQLExecute.c][187]
        Entry:
            Statement = 0x5564cb6408e0
[ODBC][61608][1502282121.678544][SQLExecute.c][357]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.678624][SQLRowCount.c][173]
        Entry:
            Statement = 0x5564cb6408e0
            Row Count = 0xc4201d1008
[ODBC][61608][1502282121.678643][SQLRowCount.c][247]
        Exit:[SQL_SUCCESS]
            Row Count = 0xc4201d1008 -> 1
[ODBC][61608][1502282121.678845][SQLFreeHandle.c][381]
        Entry:
            Handle Type = 3
            Input Handle = 0x5564cb6408e0
[ODBC][61608][1502282121.695732][SQLFreeHandle.c][494]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.695847][SQLEndTran.c][417]
        Entry:                
            Connection = 0x7f71840008c0                
            Completion Type = 0
[ODBC][61608][1502282121.702404][SQLEndTran.c][566]
        Exit:[SQL_SUCCESS]
[ODBC][61608][1502282121.702506][SQLSetConnectAttr.c][396]
        Entry:
            Connection = 0x7f71840008c0
            Attribute = SQL_ATTR_AUTOCOMMIT
            Value = 0x1
            StrLen = -5
[ODBC][61608][1502282121.702962][SQLSetConnectAttr.c][842]
        Exit:[SQL_SUCCESS]
",10919
1710,45567283,"[ODBC][61608][1502282408.929695][SQLSetConnectAttr.c][396]
        Entry:
            Connection = 0x7f71840008c0
            Attribute = SQL_ATTR_AUTOCOMMIT
            Value = (nil)
            StrLen = -5
",208
1711,45590483,"
170809/044343.745, [log,connection,client,error] message: write EPIPE, stack: Error: write EPIPE
    at exports._errnoException (util.js:1018:11)
    at WriteWrap.afterWrite (net.js:800:14)
",191
1712,45590483,"
170809/040643.248, [log,connection,client,error] message: read ECONNRESET, stack: Error: read ECONNRESET
    at exports._errnoException (util.js:1018:11)
    at TCP.onread (net.js:568:26)
",189
1713,45590483,"NODE_DEBUG=http, net",20
1714,45590483,write ret = true,16
1715,45590483,"NET 422: onconnection
NET 422: _read
NET 422: Socket._read readStart
HTTP 422: SERVER new http connection
HTTP 422: SERVER socketOnParserExecute 333
NET 422: onread 775
NET 422: got data
NET 422: _read
HTTP 422: call onSocket 0 0
HTTP 422: createConnection api.mixpanel.com:80: { servername: 'api.mixpanel.com',
  path: null,
  headers: {},
  port: 80,
  host: 'api.mixpanel.com',
  _agentKey: 'api.mixpanel.com:80:' }
NET 422: createConnection [ { servername: 'api.mixpanel.com',
    path: null,
    headers: {},
    port: 80,
    host: 'api.mixpanel.com',
    _agentKey: 'api.mixpanel.com:80:',
    encoding: null },
  [Function: oncreate] ]
NET 422: pipe false null
NET 422: connect: find host api.mixpanel.com
NET 422: connect: dns options { family: undefined, hints: 32 }
HTTP 422: sockets api.mixpanel.com:80: 1
HTTP 422: outgoing message end.
HTTP 422: call onSocket 1 0
HTTP 422: createConnection api.mixpanel.com:80: { servername: 'api.mixpanel.com',
  path: null,
  headers: {},
  port: 80,
  host: 'api.mixpanel.com',
  _agentKey: 'api.mixpanel.com:80:' }
NET 422: createConnection [ { servername: 'api.mixpanel.com',
    path: null,
    headers: {},
    port: 80,
    host: 'api.mixpanel.com',
    _agentKey: 'api.mixpanel.com:80:',
    encoding: null },
  [Function: oncreate] ]
NET 422: pipe false null
NET 422: connect: find host api.mixpanel.com
NET 422: connect: dns options { family: undefined, hints: 32 }
HTTP 422: sockets api.mixpanel.com:80: 2
HTTP 422: outgoing message end.
HTTP 422: call onSocket 2 0
HTTP 422: createConnection api.mixpanel.com:80: { servername: 'api.mixpanel.com',
  path: null,
  headers: {},
  port: 80,
  host: 'api.mixpanel.com',
  _agentKey: 'api.mixpanel.com:80:' }
NET 422: createConnection [ { servername: 'api.mixpanel.com',
    path: null,
    headers: {},
    port: 80,
    host: 'api.mixpanel.com',
    _agentKey: 'api.mixpanel.com:80:',
    encoding: null },
  [Function: oncreate] ]
NET 422: pipe false null
NET 422: connect: find host api.mixpanel.com
NET 422: connect: dns options { family: undefined, hints: 32 }
HTTP 422: sockets api.mixpanel.com:80: 3
HTTP 422: outgoing message end.
NET 422: _read
NET 422: _read wait for connection
NET 422: _read
NET 422: _read wait for connection
NET 422: _read
NET 422: _read wait for connection
NET 422: afterConnect
NET 422: _read
NET 422: Socket._read readStart
NET 422: afterConnect
NET 422: _read
NET 422: Socket._read readStart
NET 422: afterConnect
NET 422: _read
NET 422: Socket._read readStart
NET 422: onread 438
NET 422: got data
HTTP 422: AGENT incoming response!
HTTP 422: AGENT isHeadResponse false
NET 422: _read
HTTP 422: AGENT socket.destroySoon()
NET 422: onSocketFinish
NET 422: oSF: not ended, call shutdown()
NET 422: destroy undefined
NET 422: destroy
NET 422: close
NET 422: close handle
NET 422: afterShutdown destroyed=true ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0 },
  length: 0,
  pipes: null,
  pipesCount: 0,
  flowing: true,
  ended: false,
  endEmitted: false,
  reading: true,
  sync: false,
  needReadable: true,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  defaultEncoding: 'utf8',
  ranOut: false,
  awaitDrain: 0,
  readingMore: false,
  decoder: null,
  encoding: null }
NET 422: emit close
HTTP 422: CLIENT socket onClose
HTTP 422: removeSocket api.mixpanel.com:80: writable: false
HTTP 422: HTTP socket close
NET 422: onread 438
NET 422: got data
HTTP 422: AGENT incoming response!
HTTP 422: AGENT isHeadResponse false
NET 422: _read
HTTP 422: AGENT socket.destroySoon()
NET 422: onSocketFinish
NET 422: oSF: not ended, call shutdown()
NET 422: destroy undefined
NET 422: destroy
NET 422: close
NET 422: close handle
NET 422: onread 486
NET 422: got data
HTTP 422: AGENT incoming response!
HTTP 422: AGENT isHeadResponse false
NET 422: _read
HTTP 422: AGENT socket.destroySoon()
NET 422: onSocketFinish
NET 422: oSF: not ended, call shutdown()
NET 422: destroy undefined
NET 422: destroy
NET 422: close
NET 422: close handle
NET 422: afterShutdown destroyed=true ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0 },
  length: 0,
  pipes: null,
  pipesCount: 0,
  flowing: true,
  ended: false,
  endEmitted: false,
  reading: true,
  sync: false,
  needReadable: true,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  defaultEncoding: 'utf8',
  ranOut: false,
  awaitDrain: 0,
  readingMore: false,
  decoder: null,
  encoding: null }
NET 422: emit close
HTTP 422: CLIENT socket onClose
HTTP 422: removeSocket api.mixpanel.com:80: writable: false
HTTP 422: HTTP socket close
NET 422: afterShutdown destroyed=true ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0 },
  length: 0,
  pipes: null,
  pipesCount: 0,
  flowing: true,
  ended: false,
  endEmitted: false,
  reading: true,
  sync: false,
  needReadable: true,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  defaultEncoding: 'utf8',
  ranOut: false,
  awaitDrain: 0,
  readingMore: false,
  decoder: null,
  encoding: null }
NET 422: emit close
HTTP 422: CLIENT socket onClose
HTTP 422: removeSocket api.mixpanel.com:80: writable: false
HTTP 422: HTTP socket close
HTTP 422: write ret = true
HTTP 422: outgoing message end.
NET 422: onread -4095
NET 422: EOF
NET 422: onSocketEnd ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0 },
  length: 0,
  pipes: null,
  pipesCount: 0,
  flowing: true,
  ended: true,
  endEmitted: false,
  reading: false,
  sync: false,
  needReadable: false,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  defaultEncoding: 'utf8',
  ranOut: false,
  awaitDrain: 0,
  readingMore: false,
  decoder: null,
  encoding: null }
NET 422: onSocketFinish
NET 422: oSF: ended, destroy ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0 },
  length: 0,
  pipes: null,
  pipesCount: 0,
  flowing: true,
  ended: true,
  endEmitted: true,
  reading: false,
  sync: false,
  needReadable: false,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  defaultEncoding: 'utf8',
  ranOut: false,
  awaitDrain: 0,
  readingMore: false,
  decoder: null,
  encoding: null }
NET 422: destroy undefined
NET 422: destroy
NET 422: close
NET 422: close handle
NET 422: has server
NET 422: SERVER _emitCloseIfDrained
NET 422: SERVER handle? true   connections? 15
NET 422: emit close
HTTP 422: server socket close
",6729
1716,45590483,"NET 422: onread 405
NET 422: got data
NET 422: _read
NET 422: onconnection
NET 422: _read
NET 422: Socket._read readStart
HTTP 422: SERVER new http connection
HTTP 422: SERVER socketOnParserExecute 325
NET 422: onread 775
NET 422: got data
NET 422: _read
HTTP 422: call onSocket 0 0
HTTP 422: createConnection api.mixpanel.com:80: { servername: 'api.mixpanel.com',
  path: null,
  headers: {},
  port: 80,
  host: 'api.mixpanel.com',
  _agentKey: 'api.mixpanel.com:80:' }
NET 422: createConnection [ { servername: 'api.mixpanel.com',
    path: null,
    headers: {},
    port: 80,
    host: 'api.mixpanel.com',
    _agentKey: 'api.mixpanel.com:80:',
    encoding: null },
  [Function: oncreate] ]
NET 422: pipe false null
NET 422: connect: find host api.mixpanel.com
NET 422: connect: dns options { family: undefined, hints: 32 }
HTTP 422: sockets api.mixpanel.com:80: 1
HTTP 422: outgoing message end.
HTTP 422: call onSocket 1 0
HTTP 422: createConnection api.mixpanel.com:80: { servername: 'api.mixpanel.com',
  path: null,
  headers: {},
  port: 80,
  host: 'api.mixpanel.com',
  _agentKey: 'api.mixpanel.com:80:' }
NET 422: createConnection [ { servername: 'api.mixpanel.com',
    path: null,
    headers: {},
    port: 80,
    host: 'api.mixpanel.com',
    _agentKey: 'api.mixpanel.com:80:',
    encoding: null },
  [Function: oncreate] ]
NET 422: pipe false null
NET 422: connect: find host api.mixpanel.com
NET 422: connect: dns options { family: undefined, hints: 32 }
HTTP 422: sockets api.mixpanel.com:80: 2
HTTP 422: outgoing message end.
HTTP 422: call onSocket 2 0
HTTP 422: createConnection api.mixpanel.com:80: { servername: 'api.mixpanel.com',
  path: null,
  headers: {},
  port: 80,
  host: 'api.mixpanel.com',
  _agentKey: 'api.mixpanel.com:80:' }
NET 422: createConnection [ { servername: 'api.mixpanel.com',
    path: null,
    headers: {},
    port: 80,
    host: 'api.mixpanel.com',
    _agentKey: 'api.mixpanel.com:80:',
    encoding: null },
  [Function: oncreate] ]
NET 422: pipe false null
NET 422: connect: find host api.mixpanel.com
NET 422: connect: dns options { family: undefined, hints: 32 }
HTTP 422: sockets api.mixpanel.com:80: 3
HTTP 422: outgoing message end.
NET 422: _read
NET 422: _read wait for connection
NET 422: _read
NET 422: _read wait for connection
NET 422: _read
NET 422: _read wait for connection
NET 422: afterConnect
NET 422: _read
NET 422: Socket._read readStart
NET 422: afterConnect
NET 422: _read
NET 422: Socket._read readStart
NET 422: afterConnect
NET 422: _read
NET 422: Socket._read readStart
NET 422: onread 438
NET 422: got data
HTTP 422: AGENT incoming response!
HTTP 422: AGENT isHeadResponse false
NET 422: _read
HTTP 422: AGENT socket.destroySoon()
NET 422: onSocketFinish
NET 422: oSF: not ended, call shutdown()
NET 422: destroy undefined
NET 422: destroy
NET 422: close
NET 422: close handle
NET 422: afterShutdown destroyed=true ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0 },
  length: 0,
  pipes: null,
  pipesCount: 0,
  flowing: true,
  ended: false,
  endEmitted: false,
  reading: true,
  sync: false,
  needReadable: true,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  defaultEncoding: 'utf8',
  ranOut: false,
  awaitDrain: 0,
  readingMore: false,
  decoder: null,
  encoding: null }
NET 422: emit close
HTTP 422: CLIENT socket onClose
HTTP 422: removeSocket api.mixpanel.com:80: writable: false
HTTP 422: HTTP socket close
NET 422: onread 438
NET 422: got data
HTTP 422: AGENT incoming response!
HTTP 422: AGENT isHeadResponse false
NET 422: _read
HTTP 422: AGENT socket.destroySoon()
NET 422: onSocketFinish
NET 422: oSF: not ended, call shutdown()
NET 422: destroy undefined
NET 422: destroy
NET 422: close
NET 422: close handle
NET 422: onread 486
NET 422: got data
HTTP 422: AGENT incoming response!
HTTP 422: AGENT isHeadResponse false
NET 422: _read
HTTP 422: AGENT socket.destroySoon()
NET 422: onSocketFinish
NET 422: oSF: not ended, call shutdown()
NET 422: destroy undefined
NET 422: destroy
NET 422: close
NET 422: close handle
NET 422: afterShutdown destroyed=true ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0 },
  length: 0,
  pipes: null,
  pipesCount: 0,
  flowing: true,
  ended: false,
  endEmitted: false,
  reading: true,
  sync: false,
  needReadable: true,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  defaultEncoding: 'utf8',
  ranOut: false,
  awaitDrain: 0,
  readingMore: false,
  decoder: null,
  encoding: null }
NET 422: emit close
HTTP 422: CLIENT socket onClose
HTTP 422: removeSocket api.mixpanel.com:80: writable: false
HTTP 422: HTTP socket close
NET 422: afterShutdown destroyed=true ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0 },
  length: 0,
  pipes: null,
  pipesCount: 0,
  flowing: true,
  ended: false,
  endEmitted: false,
  reading: true,
  sync: false,
  needReadable: true,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  defaultEncoding: 'utf8',
  ranOut: false,
  awaitDrain: 0,
  readingMore: false,
  decoder: null,
  encoding: null }
NET 422: emit close
HTTP 422: CLIENT socket onClose
HTTP 422: removeSocket api.mixpanel.com:80: writable: false
HTTP 422: HTTP socket close
HTTP 422: write ret = true
NET 422: afterWrite 0
NET 422: afterWrite call cb
HTTP 422: write ret = true
HTTP 422: outgoing message end.
NET 422: onread -4095
NET 422: EOF
NET 422: onSocketEnd ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0 },
  length: 0,
  pipes: null,
  pipesCount: 0,
  flowing: true,
  ended: true,
  endEmitted: false,
  reading: false,
  sync: false,
  needReadable: false,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  defaultEncoding: 'utf8',
  ranOut: false,
  awaitDrain: 0,
  readingMore: false,
  decoder: null,
  encoding: null }
NET 422: afterWrite 0
NET 422: afterWrite call cb
NET 422: afterWrite -32
NET 422: write failure { Error: write EPIPE
    at exports._errnoException (util.js:1018:11)
    at WriteWrap.afterWrite (net.js:800:14) code: 'EPIPE', errno: 'EPIPE', syscall: 'write' }
NET 422: destroy
NET 422: close
NET 422: close handle
170809/101228.947, [log,connection,client,error] message: write EPIPE, stack: Error: write EPIPE
    at exports._errnoException (util.js:1018:11)
    at WriteWrap.afterWrite (net.js:800:14)
NET 422: has server
NET 422: SERVER _emitCloseIfDrained
NET 422: SERVER handle? true   connections? 15
NET 422: emit close
HTTP 422: server socket close
",6757
1717,45590483,"// Sends a POST request to consumption endpoint with the SQS message as body
func sendMessageToURL(msg string) bool {
    var resp *http.Response
    var err error

    endpoint := url

    if endpoint == """" {
        m := make(map[string]string)
        err := json.Unmarshal([]byte(msg), &m)
        if err != nil {
            log.Printf(""Unable to parse JSON message to get the URL: %s"", msg)
            return false
        }
        endpoint = m[""url""]
        if endpoint == """" {
            log.Printf(""No 'url' field found in JSON message: %s"", msg)
            return false
        }
    }

    for {
        resp, err = httpClient.Post(endpoint, ""application/json"", bytes.NewBuffer([]byte(msg)))
        if err == nil {
            break
        }
        log.Printf(""Error hitting endpoint, retrying after 1 second... Error: %s"", err.Error())
        time.Sleep(time.Second)
    }
    defer resp.Body.Close()

    // return true only if response is 200 OK
    if resp.StatusCode != 200 {
        bodyBytes, _ := ioutil.ReadAll(resp.Body)
        log.Printf(""Error: Non OK response: %s Status Code: '%s' for sent message: '%s'"", string(bodyBytes), resp.Status, msg)
        return false
    }

    return true
}
",1224
1718,45654383,"

...
",6
1719,45654383,"package main

import (
    ""crypto/rsa""
    ""crypto/tls""
    ""io/ioutil""
    ""log""

    ""github.com/beevik/etree""
    ""github.com/russellhaering/goxmldsig""
)

type X509KeyStore struct {
    PrivateKey *rsa.PrivateKey
    Cert       []byte
}

func (ks X509KeyStore) GetKeyPair() (*rsa.PrivateKey, []byte, error) {
    return ks.PrivateKey, ks.Cert, nil
}

func failOnError(err error, msg string) {
    if err != nil {
        log.Fatalf(""%s: %s"", msg, err)
    }
}

func main() {
    certBytes := []byte(`-----BEGIN CERTIFICATE-----
MIID3TCCAsWgAwIBAgIJAKMxnSbqmztEMA0GCSqGSIb3DQEBCwUAMIGEMQswCQYD
VQQGEwJHQjETMBEGA1UECAwKQmlybWluZ2hhbTETMBEGA1UEBwwKQmlybWluZ2hh
bTEOMAwGA1UECgwFVGFsaXMxDjAMBgNVBAsMBVRhbGlzMQ4wDAYDVQQDDAVUYWxp
czEbMBkGCSqGSIb3DQEJARYMbXdAdGFsaXMuY29tMB4XDTE3MDgwODIxNTA0NFoX
DTI3MDgwNjIxNTA0NFowgYQxCzAJBgNVBAYTAkdCMRMwEQYDVQQIDApCaXJtaW5n
aGFtMRMwEQYDVQQHDApCaXJtaW5naGFtMQ4wDAYDVQQKDAVUYWxpczEOMAwGA1UE
CwwFVGFsaXMxDjAMBgNVBAMMBVRhbGlzMRswGQYJKoZIhvcNAQkBFgxtd0B0YWxp
cy5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCfyQiwTxAbc6HJ
6aB6NrmDYoVUBqWZ4njZyQqnhf0ZvpqGh8ppMiXjiuJjn72pJYHnOqRQNgJDNhAZ
X5KtJ/YI4XbOruJU3TWX/KnGn7l8TJ5FFmnJWHohJ0f9/+uVv0hivRkSVUwh+q2e
TpKNypNu2Kf8iiGW3dMOY1CYWxWnksM1xoaWKV3mWgMqRqcj4kyLT1t8UctOhKhg
m04HPNTeFCkcmH3IuIiVAi3uVU+zDKec8+cxSHHmnm0iphm8jpT0OjNSGWt7F7+N
NhIa2FOI+Lz6t+VU0WToWnB16qJIhMGcIGPZR7fp/di/0h9Huc+GJBNfbgdVEYiv
7DuF28zzAgMBAAGjUDBOMB0GA1UdDgQWBBRjnMEGZsZR+cSX5/UJcwAZULsKijAf
BgNVHSMEGDAWgBRjnMEGZsZR+cSX5/UJcwAZULsKijAMBgNVHRMEBTADAQH/MA0G
CSqGSIb3DQEBCwUAA4IBAQBNrPOgLt1bZPO8283HddeASfzoVK40qqBP0HgLihja
VvABPRkE2046lka6MSDXJTpbg9rMT/JDplWea4gCroD+UX79W/r2WBEHgJ63piq+
wVFoxB4S8IgbQi2N5CEM/yLexWq9O2YDl7gemRc1EES01x64YBlBgHGpMvc6NyjD
ecMdTmUAXgNTTGKlpistVRtArQHaqw3FJE3LfoyEx9fP0joA7Q5U7Z6pvveYXEHl
fSoCeI4UUPOlAGBOR5VWnDYuS+FwB9RIcegycxB12Sd+RLxojpFg6VSk2SSiG9/4
u02uKxgXiZ7/41lHjoTHS9BOoPOT0ZD8C7Goeg8OAMgs
-----END CERTIFICATE-----`)

    keyBytes := []byte(`-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAn8kIsE8QG3Ohyemgeja5g2KFVAalmeJ42ckKp4X9Gb6ahofK
aTIl44riY5+9qSWB5zqkUDYCQzYQGV+SrSf2COF2zq7iVN01l/ypxp+5fEyeRRZp
yVh6ISdH/f/rlb9IYr0ZElVMIfqtnk6SjcqTbtin/Iohlt3TDmNQmFsVp5LDNcaG
lild5loDKkanI+JMi09bfFHLToSoYJtOBzzU3hQpHJh9yLiIlQIt7lVPswynnPPn
MUhx5p5tIqYZvI6U9DozUhlrexe/jTYSGthTiPi8+rflVNFk6FpwdeqiSITBnCBj
2Ue36f3Yv9IfR7nPhiQTX24HVRGIr+w7hdvM8wIDAQABAoIBADrEjdWKvrnaBZ9l
tgg9KG4SRkdpSm8WxKwVLT4AId7eI6dnOiMGtrjB1BIgJnmXufd5sgVuV9awg6tR
Y3kcQXlys2fBGq1rztJfs3HCPU5iP7PZUn8jc4fOEsRw5AznlY/7TMVZae71a/XV
oEFWSHN0bBSOGVyLqZyZGoNuvMAsvZ7ObmfAddLQerPV0nOvv9X332wgo2a+8rnb
NHqcZOLdmGjJRkBbAd0IHFciynb1YlhHIEObmZzD8LVFV0UxhhPDHbRwmrj1T2+j
u9U3rBduJKG+mQxelLOLUB6CNbvcyNtj3wAnyq6IVA9qb/CLXJbEhTgnvNTLnYA3
FJxZysECgYEAzw67MVhQY1VZnN49NiXhhl6ypVIlp3fKOUMMZVgiUeSDPSs4Un9q
ABoFBHT9x/Rs6repl/Yr6V3o8uWz/7V7yArom9/yhErunW8bORfiGVUqibYIKi51
qNJMpamQGI/Uw2AbKCjKhpnCcRjt0YTfuTWXxAxOPYNJZqXEvUaUoNUCgYEAxY3P
H07aR2zTDfjvddG2eieaMLoaTWSuGTUH1P7KplQHEsoE135PyLayzYy5I2HX+JDn
fUDDWXWeI4+NdGdUnRrXOedr/Rewu8RZFxxqBV0TJhmTJzGpoun08YXkj7CBCs60
faohJS5iSpi39XNf2k5/RJHGm2FePfPYQR7sWqcCgYEAx6LYcZdIyr18DXdpZU/Y
xgmADU3K6FDjNZqj1QLI9FRzBQMq5r/aoAZ2V/nExomwig5TAiVj6TmWZLt8dUux
8QozhDbESTFGJ5z8jmusn+gxf113OdRZtVAufnuiZ0wmQ8nh5TKPMoAFra3vfley
rYwyq9+BgGWY29NwgV4P55ECgYB5ThRqkw6xYP9PyxWu8PDtnTeux/eyoinNTKTc
gv+Ilnwpa2cBs4vmIVk1oj1knoXxGXkrjgLmAbTy/QjM+04Xkg2qfpHuvQdGpNBX
wpjPZlGFyZp0LKiPYr2HOMIaATWbn0VxDHCB1jOAvrnmu8uVzzGStziO3IDz5bFa
e1SCbQKBgGNUKKppH7BYDMrb+dqRsB6YI5mFlHZoDhVWkPgDba8klp/NvhTI8ACu
URVaPLlgTRdiG2Q5NVDYPpTrhsCbKwE6HeshNKqhL/VsrK77/oSpSQHeLf88oBV2
rDFpN/In31Wp6c+C4crPQNSWZ9jMohHQkCFOUAyBc6UzcqCa4vqd
-----END RSA PRIVATE KEY-----`)

    keyPair, err := tls.X509KeyPair(certBytes, keyBytes)
    if err != nil {
        failOnError(err, ""invalided to load keypair"")
    }
    keyStore := dsig.TLSCertKeyStore(keyPair)

    signingContext := dsig.NewDefaultSigningContext(keyStore)
    signingContext.Canonicalizer = dsig.MakeC14N10ExclusiveCanonicalizerWithPrefixList(""xml"")
    if err = signingContext.SetSignatureMethod(dsig.RSASHA256SignatureMethod); err != nil {
        failOnError(err, ""failed to set signature method"")
    }

    elementToSign := &etree.Element{
        Tag: ""ExampleElement"",
    }
    elementToSign.CreateAttr(""ID"", ""id1234"")

    signedAssertionEl, err := signingContext.SignEnveloped(elementToSign)
    if err != nil {
        failOnError(err, ""failed to sign envelop"")
    }

    var signedAssertionBuf []byte
    {
        doc := etree.NewDocument()
        doc.CreateProcInst(""xml"", `version=""1.0"" encoding=""UTF-8""`)
        doc.SetRoot(signedAssertionEl)
        signedAssertionBuf, err = doc.WriteToBytes()
        if err != nil {
            failOnError(err, ""failed to convert doc to bytes"")
        }
    }

    ioutil.WriteFile(""/tmp/test/example.xml"", signedAssertionBuf, 0775)
}
",4791
1720,45686269,"{
    ""3211"": {
        ""entity_id"": ""3211"",
        ""status"": ""complete"",
        ""coupon_code"": ""COUPON"",
        ""shipping_description"": ""Shipping - AU Courier"",
        ""customer_id"": ""2775"",
        ""base_discount_amount"": ""-50.0000"",
        ""base_grand_total"": ""149.0000"",
        ""base_shipping_amount"": ""0.0000"",
        ""base_shipping_tax_amount"": ""0.0000"",
        ""base_subtotal"": ""199.0000"",
        ""base_tax_amount"": ""0.0000"",
        ""base_total_paid"": ""149.0000"",
        ""base_total_refunded"": null,
        ""discount_amount"": ""-50.0000"",
        ""grand_total"": ""149.0000"",
        ""shipping_amount"": ""0.0000"",
        ""shipping_tax_amount"": ""0.0000"",
        ""store_to_order_rate"": ""1.0000"",
        ""subtotal"": ""199.0000"",
        ""tax_amount"": ""0.0000"",
        ""total_paid"": ""149.0000"",
        ""total_refunded"": null,
        ""base_shipping_discount_amount"": ""0.0000"",
        ""base_subtotal_incl_tax"": ""199.0000"",
        ""base_total_due"": ""0.0000"",
        ""shipping_discount_amount"": ""0.0000"",
        ""subtotal_incl_tax"": ""199.0000"",
        ""total_due"": ""0.0000"",
        ""increment_id"": ""200000423"",
        ""base_currency_code"": ""AUD"",
        ""discount_description"": ""COUPON"",
        ""remote_ip"": ""123.123.123.123"",
        ""store_currency_code"": ""AUD"",
        ""store_name"": ""Australia"",
        ""created_at"": ""2017-07-17 03:07:40"",
        ""shipping_incl_tax"": ""0.0000"",
        ""payment_method"": ""ewayrapid_ewayone"",
        ""gift_message_from"": null,
        ""gift_message_to"": null,
        ""gift_message_body"": null,
        ""tax_name"": null,
        ""tax_rate"": null,
        ""addresses"": [
            {
                ""region"": ""South Australia"",
                ""postcode"": ""5000"",
                ""lastname"": ""Doe"",
                ""street"": ""Level 6\n25 Example Street"",
                ""city"": ""Adelaide"",
                ""email"": ""example@email.com"",
                ""telephone"": ""+61 123 456 789"",
                ""country_id"": ""AU"",
                ""firstname"": ""John"",
                ""address_type"": ""billing"",
                ""prefix"": null,
                ""middlename"": null,
                ""suffix"": null,
                ""company"": null
            },
            {
                ""region"": ""South Australia"",
                ""postcode"": ""5000"",
                ""lastname"": ""Doe"",
                ""street"": ""Level 6\n25 Example Street"",
                ""city"": ""Adelaide"",
                ""email"": ""example@email.com"",
                ""telephone"": ""+61 123 456 789"",
                ""country_id"": ""AU"",
                ""firstname"": ""John"",
                ""address_type"": ""shipping"",
                ""prefix"": null,
                ""middlename"": null,
                ""suffix"": null,
                ""company"": null
            }
        ]
    }
}
",2806
1721,45686269,struct,6
1722,45686269,"type Orders map[string]Order
type Order struct {
    EntityID                   string                    `json:""entity_id""`
    Status                     string                    `json:""status""`
    CouponCode                 string                    `json:""coupon_code""`
    ShippingDescription        string                    `json:""shipping_description""`
    CustomerID                 string                    `json:""customer_id""`
    BaseDiscountAmount         string                    `json:""base_discount_amount""`
    BaseGrandTotal             string                    `json:""base_grand_total""`
    BaseShippingAmount         string                    `json:""base_shipping_amount""`
    BaseShippingTaxAmount      string                    `json:""base_shipping_tax_amount""`
    BaseSubtotal               string                    `json:""base_subtotal""`
    BaseTaxAmount              string                    `json:""base_tax_amount""`
    BaseTotalPaid              string                    `json:""base_total_paid""`
    BaseTotalRefunded          string                    `json:""base_total_refunded""`
    DiscountAmount             string                    `json:""discount_amount""`
    GrandTotal                 string                    `json:""grand_total""`
    ShippingAmount             string                    `json:""shipping_amount""`
    ShippingTaxAmount          string                    `json:""shipping_tax_amount""`
    StoreToOrderRate           string                    `json:""store_to_order_rate""`
    Subtotal                   string                    `json:""subtotal""`
    TaxAmount                  string                    `json:""tax_amount""`
    TotalPaid                  string                    `json:""total_paid""`
    TotalRefunded              string                    `json:""total_refunded""`
    BaseShippingDiscountAmount string                    `json:""base_shipping_discount_amount""`
    BaseSubtotalInclTax        string                    `json:""base_subtotal_incl_tax""`
    BaseTotalDue               string                    `json:""base_total_due""`
    ShippingDiscountAmount     string                    `json:""shipping_discount_amount""`
    SubtotalInclTax            string                    `json:""subtotal_incl_tax""`
    TotalDue                   string                    `json:""total_due""`
    IncrementID                string                    `json:""increment_id""`
    BaseCurrencyCode           string                    `json:""base_currency_code""`
    DiscountDescription        string                    `json:""discount_description""`
    RemoteIP                   string                    `json:""remote_ip""`
    StoreCurrencyCode          string                    `json:""store_currency_code""`
    StoreName                  string                    `json:""store_name""`
    CreatedAt                  string                    `json:""created_at""`
    ShippingInclTax            string                    `json:""shipping_incl_tax""`
    PaymentMethod              string                    `json:""payment_method""`
    TaxName                    string                    `json:""tax_name""`
    TaxRate                    string                    `json:""tax_rate""`
    Addresses                  map[string]OrderAddresses `json:""addresses""`
}

type OrderAddresses []struct {
    Region      string  `json:""region""`
    Postcode    string  `json:""postcode""`
    Lastname    string  `json:""lastname""`
    Street      string  `json:""street""`
    City        string  `json:""city""`
    Email       string  `json:""email""`
    Telephone   string  `json:""telephone""`
    CountryID   string  `json:""country_id""`
    Firstname   string  `json:""firstname""`
    AddressType string  `json:""address_type""`
    Prefix      *string `json:""prefix""`
    Middlename  *string `json:""middlename""`
    Suffix      *string `json:""suffix""`
    Company     *string `json:""company""`
}
",3936
1723,45686269,getFromOrdersAPI(page),22
1724,45686269,Orders,6
1725,45686269,"for page := 1; page < 3; page++ {
    orders := getFromOrdersAPI(page)
    for _, order := range orders {
        //Process all the order items except addresses
        fmt.Println(""Processing entity:"", orders.EntityID)

        for _, orderaddress := range order.Addresses {
            //Trying to access address values - example below
            fmt.Println(orderaddress.Region)
        }
    }
}
",401
1726,45756667,"package main

import (
     ""log""
     ""bufio""
     ""fmt""
     ""encoding/csv""
     ""encoding/json""
     ""io""
     ""os""
     ""sync""
)

type IMDBDataModel struct {
     Color                  string `json:""color""`
     DirectorName           string `json:""director_name""`
     NumCriticForReviews    string `json:""num_critic_for_reviews""`
     Duration               string `json:""duration""`
     DirectorFacebookLikes  string `json:""director_facebook_likes""`
     Actor3FacebookLikes    string `json:""actor_3_facebook_likes""`
     Actor2Name             string `json:""actor_2_name""`
     Actor1FacebookLikes    string `json:""actor_1_facebook_likes""`
     Gross                  string `json:""gross""`
     Genre                  string `json:""genres""`
     Actor1Name             string `json:""actor_1_name""`
     MovieTitle             string `json:""movie_title""`
     NumVotedUser           string `json:""num_voted_users""`
     CastTotalFacebookLikes string `json:""cast_total_facebook_likes""`
     Actor3Name             string `json:""actor_3_name""`
     FaceNumberInPoster     string `json:""facenumber_in_poster""`
     PlotKeywords           string `json:""plot_keywords""`
     MovieIMDBLink          string `json:""movie_imdb_link""`
     NumUserForReviews      string `json:""num_user_for_reviews""`
     Language               string `json:""language""`
     Country                string `json:""country""`
     ContentRating          string `json:""content_rating""`
     Budget                 string `json:""budget""`
     TitleYear              string `json:""title_year""`
     Actor2FacebookLikes    string `json:""actor_2_facebook_likes""`
     IMDBScore              string `json:""imdb_score""`
     AspectRatio            string `json:""aspect_ratio""`
     MovieFacebookLikes     string `json:""movie_facebook_likes""`
}

var iterated int64
var out []*IMDBDataModel

func populateString(input []IMDBDataModel, out []*IMDBDataModel, wg *sync.WaitGroup) {
     for _ , data := range input {          
          out = append(out, &data)
     }     
     wg.Done()
}

func consumeData(input <-chan *IMDBDataModel, wg *sync.WaitGroup){
     defer wg.Done()
     for data := range input {          
          iterated++          
          fmt.Printf(""%d : %s\n"", iterated, data.MovieTitle)
          out = append(out, data)
     }
     fmt.Println(""output size : "", len(out))

}

func processCSV(path string) (imdbList []IMDBDataModel){
     csvFile, _ := os.Open(path)
     reader := csv.NewReader(bufio.NewReader(csvFile))

     for {          
          line, error := reader.Read()
          if error == io.EOF {
               break
          } else if error != nil {
               log.Fatal(error)
          }
          imdbList = append(imdbList, 
               IMDBDataModel{
                    Color: line[0],
                    DirectorName: line[1],
                    NumCriticForReviews : line[2],
                    Duration: line[3],
                    DirectorFacebookLikes: line[4],
                    Actor3FacebookLikes: line[5],
                    Actor2Name: line[6],
                    Actor1FacebookLikes: line[7],
                    Gross: line[8],
                    Genre: line[9],
                    Actor1Name: line[10],
                    MovieTitle: line[11],
                    NumVotedUser: line[12],
                    CastTotalFacebookLikes: line[13],
                    Actor3Name: line[14],
                    FaceNumberInPoster: line[15],
                    PlotKeywords: line[16],
                    MovieIMDBLink: line[17],
                    NumUserForReviews: line[18],
                    Language: line[19],
                    Country: line[20],
                    ContentRating: line[21],
                    Budget: line[22],
                    TitleYear: line[23],
                    Actor2FacebookLikes: line[24],
                    IMDBScore: line[25],
                    AspectRatio: line[26],
                    MovieFacebookLikes: line[27],
               },
          )          
     }
     imdbJson, err := json.Marshal(imdbList)
     if err != nil {
          log.Println(imdbJson)
     }

     return 
}

func main() {     
     imdbList := processCSV(""movie_metadata.csv"")     
     imdbChannel  := make(chan *IMDBDataModel, 100) // buffer

     var wg sync.WaitGroup
     for i := 0; i < 5;i++ {
          wg.Add(1)
          go consumeData(imdbChannel,&wg)     
     }

     for _ ,task := range imdbList {          
          imdbChannel <- &task               
     }

     close(imdbChannel)     
     wg.Wait()

     // for _, item := range out {
     //      fmt.Println(item.MovieTitle)
     // }

     fmt.Println(""Total Channel :"", len(imdbChannel)) 
     fmt.Println(""Total IMDB :"", len(imdbList))
     fmt.Println(""Total Data: "", len(out))
     fmt.Println(""Iterated : "", iterated)
     fmt.Println(""Goroutines finished.."")


}
",4913
1727,45756667,"func consumeData(input <-chan *IMDBDataModel, output chan *IMDBDataModel, wg *sync.WaitGroup) {
    defer wg.Done()
    for data := range input {
        iterated++
        // outLock.Lock()
        // out = append(out, data)
        // outLock.Unlock()
        output <- data
    }
}
",285
1728,45756667,"....
My Date with Drew 
My Date with Drew 
My Date with Drew 
My Date with Drew 
My Date with Drew 
Total Channel : 0
Total IMDB : 5044
Total Data:  4944
Iterated :  5000
Goroutines finished..
",198
1729,45774425,"data := []byte(`{
    ""fantasy_content"": {
        ""copyright"": ""Data provided by Yahoo! and STATS, LLC"",
        ""league"": [
            {
                ""allow_add_to_dl_extra_pos"": 0,
                ""current_week"": ""1"",
                ""draft_status"": ""predraft"",
                ""edit_key"": ""1"",
                ""end_date"": ""2017-12-25"",
                ""end_week"": ""16"",
                ""game_code"": ""nfl"",
                ""is_cash_league"": ""0"",
                ""is_pro_league"": ""0"",
                ""league_id"": ""XXXXX"",
                ""league_key"": ""XXXX"",
                ""league_type"": ""private"",
                ""league_update_timestamp"": null,
                ""name"": ""XXXXXX"",
                ""num_teams"": 14,
                ""renew"": ""XXXX"",
                ""renewed"": """",
                ""scoring_type"": ""head"",
                ""season"": ""2017"",
                ""short_invitation_url"": ""XXXXX"",
                ""start_date"": ""2017-09-07"",
                ""start_week"": ""1"",
                ""url"": ""XXXXXX"",
                ""weekly_deadline"": """"
            },
            {
                ""teams"": {
                    ""0"": {
                        ""team"": [
                            [
                                {
                                    ""team_key"": ""XXXX""
                                },
                                {
                                    ""team_id"": ""1""
                                },
                                {
                                    ""name"": ""XXXXX""
                                },
                                [],
                                {
                                    ""url"": ""XXXXX""
                                },
                                {
                                    ""team_logos"": [
                                        {
                                            ""team_logo"": {
                                                ""size"": ""large"",
                                                ""XXX""
                                            }
                                        }
                                    ]
                                },
                                [],
                                {
                                    ""waiver_priority"": """"
                                },
                                {
                                    ""faab_balance"": ""100""
                                },
                                {
                                    ""number_of_moves"": 0
                                },
                                {
                                    ""number_of_trades"": 0
                                },
                                {
                                    ""roster_adds"": {
                                        ""coverage_type"": ""week"",
                                        ""coverage_value"": ""1"",
                                        ""value"": ""0""
                                    }
                                },
                                [],
                                {
                                    ""league_scoring_type"": ""head""
                                },
                                [],
                                [],
                                {
                                    ""has_draft_grade"": 0
                                },
                                [],
                                [],
                                {
                                    ""managers"": [
                                        {
                                            ""manager"": {
                                                ""email"": ""XXXXX"",
                                                ""guid"": ""XX"",
                                                ""image_url"": ""https://s.yimg.com/wm/modern/images/default_user_profile_pic_64.png"",
                                                ""is_commissioner"": ""1"",
                                                ""manager_id"": ""1"",
                                                ""nickname"": ""Andrew""
                                            }
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    ""1"": {
                        ""team"": [
                            [
                                {
                                    ""team_key"": ""XXXXX""
                                },
                                {
                                    ""team_id"": ""2""
                                },
                                {
                                    ""name"": ""XXXXX""
                                },
                                [],
                                {
                                    ""url"": ""XXXXX""
                                },
                                {
                                    ""team_logos"": [
                                        {
                                            ""team_logo"": {
                                                ""size"": ""large"",
                                                ""url"": ""XXXX""
                                            }
                                        }
                                    ]
                                },
                                [],
                                {
                                    ""waiver_priority"": """"
                                },
                                {
                                    ""faab_balance"": ""100""
                                },
                                {
                                    ""number_of_moves"": 0
                                },
                                {
                                    ""number_of_trades"": 0
                                },
                                {
                                    ""roster_adds"": {
                                        ""coverage_type"": ""week"",
                                        ""coverage_value"": ""1"",
                                        ""value"": ""0""
                                    }
                                },
                                [],
                                {
                                    ""league_scoring_type"": ""head""
                                },
                                [],
                                [],
                                {
                                    ""has_draft_grade"": 0
                                },
                                [],
                                [],
                                {
                                    ""managers"": [
                                        {
                                            ""manager"": {
                                                ""email"": ""XXXX@yahoo.com"",
                                                ""guid"": ""XXXX"",
                                                ""image_url"": ""https://s.yimg.com/wm/modern/images/default_user_profile_pic_64.png"",
                                                ""manager_id"": ""2"",
                                                ""nickname"": ""Andrew""
                                            }
                                        },
                                        {
                                            ""manager"": {
                                                ""email"": ""XXX@yahoo.com"",
                                                ""guid"": ""XX"",
                                                ""image_url"": ""https://s.yimg.com/wm/modern/images/default_user_profile_pic_64.png"",
                                                ""is_comanager"": ""1"",
                                                ""manager_id"": ""15"",
                                                ""nickname"": ""XX""
                                            }
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    ""10"": {
                        ""team"": [
                            [
                                {
                                    ""team_key"": ""XXX""
                                },
                                {
                                    ""team_id"": ""11""
                                },
                                {
                                    ""name"": ""XXX""
                                },
                                [],
                                {
                                    ""url"": ""https://football.fantasysports.yahoo.com/f1/XXX""
                                },
                                {
                                    ""team_logos"": [
                                        {
                                            ""team_logo"": {
                                                ""size"": ""large"",
                                                ""url"": ""https://s.yimg.com/dh/ap/fantasy/nfl/img/icon_01_100.png""
                                            }
                                        }
                                    ]
                                },
                                [],
                                {
                                    ""waiver_priority"": """"
                                },
                                {
                                    ""faab_balance"": ""100""
                                },
                                {
                                    ""number_of_moves"": 0
                                },
                                {
                                    ""number_of_trades"": 0
                                },
                                {
                                    ""roster_adds"": {
                                        ""coverage_type"": ""week"",
                                        ""coverage_value"": ""1"",
                                        ""value"": ""0""
                                    }
                                },
                                [],
                                {
                                    ""league_scoring_type"": ""head""
                                },
                                [],
                                [],
                                {
                                    ""has_draft_grade"": 0
                                },
                                [],
                                [],
                                {
                                    ""managers"": [
                                        {
                                            ""manager"": {
                                                ""email"": ""XXX@gmail.com"",
                                                ""guid"": ""XX"",
                                                ""image_url"": ""https://s.yimg.com/wm/modern/images/default_user_profile_pic_64.png"",
                                                ""manager_id"": ""11"",
                                                ""nickname"": ""XX""
                                            }
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    ""2"": {
                        ""team"": [
                            [
                                {
                                    ""team_key"": ""371.l.102542.t.3""
                                },
                                {
                                    ""team_id"": ""3""
                                },
                                {
                                    ""name"": ""XXX""
                                },
                                [],
                                {
                                    ""url"": ""https://football.fantasysports.yahoo.com/f1/XX/3""
                                },
                                {
                                    ""team_logos"": [
                                        {
                                            ""team_logo"": {
                                                ""size"": ""large"",
                                                ""url"": ""https://ct.yimg.com/cy/5603/30147468023_1c705edb29_192sq.jpg?ct=fantasy""
                                            }
                                        }
                                    ]
                                },
                                [],
                                {
                                    ""waiver_priority"": """"
                                },
                                {
                                    ""faab_balance"": ""100""
                                },
                                {
                                    ""number_of_moves"": 0
                                },
                                {
                                    ""number_of_trades"": 0
                                },
                                {
                                    ""roster_adds"": {
                                        ""coverage_type"": ""week"",
                                        ""coverage_value"": ""1"",
                                        ""value"": ""0""
                                    }
                                },
                                [],
                                {
                                    ""league_scoring_type"": ""head""
                                },
                                [],
                                [],
                                {
                                    ""has_draft_grade"": 0
                                },
                                [],
                                [],
                                {
                                    ""managers"": [
                                        {
                                            ""manager"": {
                                                ""email"": ""XXXgmail.com"",
                                                ""guid"": ""XXXX"",
                                                ""image_url"": ""https://s.yimg.com/wv/images/6c93ed606f742d4c075bc091633cc072_64.jpg"",
                                                ""manager_id"": ""3"",
                                                ""nickname"": ""XX""
                                            }
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    ""3"": {
                        ""team"": [
                            [
                                {
                                    ""team_key"": ""371.l.102542.t.4""
                                },
                                {
                                    ""team_id"": ""4""
                                },
                                {
                                    ""name"": ""XX""
                                },
                                [],
                                {
                                    ""url"": ""https://football.fantasysports.yahoo.com/f1/XX/4""
                                },
                                {
                                    ""team_logos"": [
                                        {
                                            ""team_logo"": {
                                                ""size"": ""large"",
                                                ""url"": ""https://s.yimg.com/dh/ap/fantasy/nfl/img/icon_10_100.png""
                                            }
                                        }
                                    ]
                                },
                                [],
                                {
                                    ""waiver_priority"": """"
                                },
                                {
                                    ""faab_balance"": ""100""
                                },
                                {
                                    ""number_of_moves"": 0
                                },
                                {
                                    ""number_of_trades"": 0
                                },
                                {
                                    ""roster_adds"": {
                                        ""coverage_type"": ""week"",
                                        ""coverage_value"": ""1"",
                                        ""value"": ""0""
                                    }
                                },
                                [],
                                {
                                    ""league_scoring_type"": ""head""
                                },
                                [],
                                [],
                                {
                                    ""has_draft_grade"": 0
                                },
                                [],
                                [],
                                {
                                    ""managers"": [
                                        {
                                            ""manager"": {
                                                ""email"": ""XXX@yahoo.com"",
                                                ""guid"": ""XX"",
                                                ""image_url"": ""https://s.yimg.com/wm/modern/images/default_user_profile_pic_64.png"",
                                                ""manager_id"": ""4"",
                                                ""nickname"": ""XX""
                                            }
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    ""8"": {
                        ""team"": [
                            [
                                {
                                    ""team_key"": ""XXX""
                                },
                                {
                                    ""team_id"": ""9""
                                },
                                {
                                    ""name"": ""XxX""
                                },
                                [],
                                {
                                    ""url"": ""https://football.fantasysports.yahoo.com/f1/XX/9""
                                },
                                {
                                    ""team_logos"": [
                                        {
                                            ""team_logo"": {
                                                ""size"": ""large"",
                                                ""url"": ""https://ct.yimg.com/cy/8393/28682944304_33bda49603_192sq.jpg?ct=fantasy""
                                            }
                                        }
                                    ]
                                },
                                [],
                                {
                                    ""waiver_priority"": """"
                                },
                                {
                                    ""faab_balance"": ""100""
                                },
                                {
                                    ""number_of_moves"": 0
                                },
                                {
                                    ""number_of_trades"": 0
                                },
                                {
                                    ""roster_adds"": {
                                        ""coverage_type"": ""week"",
                                        ""coverage_value"": ""1"",
                                        ""value"": ""0""
                                    }
                                },
                                [],
                                {
                                    ""league_scoring_type"": ""head""
                                },
                                [],
                                [],
                                {
                                    ""has_draft_grade"": 0
                                },
                                [],
                                [],
                                {
                                    ""managers"": [
                                        {
                                            ""manager"": {
                                                ""email"": ""XXX"",
                                                ""guid"": ""XXX"",
                                                ""image_url"": ""https://s.yimg.com/wm/modern/images/default_user_profile_pic_64.png"",
                                                ""manager_id"": ""9"",
                                                ""nickname"": ""XXX""
                                            }
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    ""count"": 14
                }
            }
        ],
        ""refresh_rate"": ""60"",
        ""time"": ""110.55207252502ms"",
        ""xml:lang"": ""en-US"",
        ""yahoo:uri"": ""/fantasy/v2/league/XXXX/teams""
    }
}`)
",21901
1730,45774425,"type TeamApi_ struct {
    TeamKey string `json:""team_key""`
    TeamId string `json:""team_id""`
    Name string `json:""name""`
}

type LeaguesApi struct {
    NumTeams int `json:""num_teams""`
    TeamsApi struct {
        Zero struct {
            TeamsApi_ [][]TeamApi_ `json:""team""`
        } `json:""0""`
        One struct {
            TeamsApi_ [][]TeamApi_ `json:""team""`
        } `json:""1""`
        Two struct {
            TeamsApi_ [][]TeamApi_ `json:""team""`
        } `json:""2""`
        Three struct {
            TeamsApi_ [][]TeamApi_ `json:""team""`
        } `json:""3""`
    } `json:""teams""`
} 

type LeagueApiResult struct {
FantasyContent struct {
            LeagueApi []LeaguesApi `json:""league""`

    } `json:""fantasy_content""`
}

var Result LeagueApiResult
err := json.Unmarshal(data, &Result)
if err != nil {
    fmt.Println(err)
}


fmt.Println(Result.FantasyContent.LeagueApi[1].TeamsApi.One.TeamsApi_[0][2].Name)
",930
1731,45839846,"package testing

import (
    ""encoding/xml""
    ""fmt""
    ""reflect""

    ""github.com/fiorix/wsdl2go/soap""
)

// Namespace was auto-generated from WSDL.
var Namespace = ""http://schemas.microsoft.com/sharepoint/soap/""

// NewAuthenticationSoap creates an initializes a AuthenticationSoap.
func NewAuthenticationSoap(cli *soap.Client) AuthenticationSoap {
    return &authenticationSoap{cli}
}

// AuthenticationSoap was auto-generated from WSDL
// and defines interface for the remote service. Useful for testing.
type AuthenticationSoap interface {
    // Login was auto-generated from WSDL.
    Login(α *Login) (β *LoginResponse, err error)

    // Mode was auto-generated from WSDL.
    Mode(α *Mode) (β *ModeResponse, err error)
}

// AuthenticationMode was auto-generated from WSDL.
type AuthenticationMode string

// Validate validates AuthenticationMode.
func (v AuthenticationMode) Validate() bool {
    for _, vv := range []string{
        ""None"",
        ""Windows"",
        ""Passport"",
        ""Forms"",
    } {
        if reflect.DeepEqual(v, vv) {
            return true
        }
    }
    return false
}

// LoginErrorCode was auto-generated from WSDL.
type LoginErrorCode string

// Validate validates LoginErrorCode.
func (v LoginErrorCode) Validate() bool {
    for _, vv := range []string{
        ""NoError"",
        ""NotInFormsAuthenticationMode"",
        ""PasswordNotMatch"",
    } {
        if reflect.DeepEqual(v, vv) {
            return true
        }
    }
    return false
}

// Login was auto-generated from WSDL.
type Login struct {
    XMLName  xml.Name `xml:""http://schemas.microsoft.com/sharepoint/soap/ Login"" json:""-"" yaml:""-""`
    Username string   `xml:""username,omitempty"" json:""username,omitempty"" yaml:""username,omitempty""`
    Password string   `xml:""password,omitempty"" json:""password,omitempty"" yaml:""password,omitempty""`
}

// LoginResponse was auto-generated from WSDL.
type LoginResponse struct {
    LoginResult *LoginResult `xml:""LoginResult"" json:""LoginResult"" yaml:""LoginResult""`
}

// LoginResult was auto-generated from WSDL.
type LoginResult struct {
    CookieName     string         `xml:""CookieName,omitempty"" json:""CookieName,omitempty"" yaml:""CookieName,omitempty""`
    ErrorCode      LoginErrorCode `xml:""ErrorCode"" json:""ErrorCode"" yaml:""ErrorCode""`
    TimeoutSeconds int            `xml:""TimeoutSeconds"" json:""TimeoutSeconds"" yaml:""TimeoutSeconds""`
    Sprequestguid  string
}

// Mode was auto-generated from WSDL.
type Mode struct{}

// ModeResponse was auto-generated from WSDL.
type ModeResponse struct {
    ModeResult AuthenticationMode `xml:""ModeResult"" json:""ModeResult"" yaml:""ModeResult""`
}

// authenticationSoap implements the AuthenticationSoap interface.
type authenticationSoap struct {
    cli *soap.Client
}

// Login was auto-generated from WSDL.
func (p *authenticationSoap) Login(α *Login) (β *LoginResponse, err error) {
    fmt.Println(""inside authenticationSoap"", α.Username, α.Password)
    γ := struct {
        XMLName xml.Name `xml:""Envelope""`
        Body    struct {
            M LoginResponse `xml:""LoginResponse""`
        }
    }{}
    if err = p.cli.RoundTripSoap12(""http://schemas.microsoft.com/sharepoint/soap/Login"", α, &γ); err != nil {
        return nil, err
    }
    return &γ.Body.M, nil
}

// Mode was auto-generated from WSDL.
func (p *authenticationSoap) Mode(α *Mode) (β *ModeResponse, err error) {
    γ := struct {
        XMLName xml.Name `xml:""Envelope""`
        Body    struct {
            M ModeResponse `xml:""ModeResponse""`
        }
    }{}
    if err = p.cli.RoundTripSoap12(""http://schemas.microsoft.com/sharepoint/soap/Mode"", α, &γ); err != nil {
        return nil, err
    }
    return &γ.Body.M, nil
}
func main() {

}
",3754
1732,45839846,"    package listfiles

import (
    ""encoding/xml""
    ""fmt""

    ""github.com/fiorix/wsdl2go/soap""
)

// Namespace was auto-generated from WSDL.
var Namespace = ""http://schemas.microsoft.com/sharepoint/soap/""

// NewListsSoap creates an initializes a ListsSoap.
func NewListsSoap(cli *soap.Client) ListsSoap {
    return &listsSoap{cli}
}
",339
1733,45839846,"    // GetList was auto-generated from WSDL.
    GetList(α *GetList) (β *GetListResponse, err error)

    // GetListAndView was auto-generated from WSDL.
    GetListAndView(α *GetListAndView) (β *GetListAndViewResponse, err error)

    // GetListCollection was auto-generated from WSDL.
    GetListCollection(α *GetListCollection) (β *GetListCollectionResponse, err error)

    // GetListContentType was auto-generated from WSDL.
    GetListContentType(α *GetListContentType) (β *GetListContentTypeResponse, err error)
",527
1734,45839846,"xml:""http://schemas.microsoft.com/sharepoint/soap/ GetList"" json:""-"" yaml:""-""",77
1735,45839846,"xml:""listName,omitempty"" json:""listName,omitempty"" yaml:""listName,omitempty""",76
1736,45839846,"// GetListAndView was auto-generated from WSDL.
type GetListAndView struct {
    XMLName  xml.Name `xml:""http://schemas.microsoft.com/sharepoint/soap/ GetListAndView"" json:""-"" yaml:""-""`
    ListName string   `xml:""listName,omitempty"" json:""listName,omitempty"" yaml:""listName,omitempty""`
    ViewName string   `xml:""viewName,omitempty"" json:""viewName,omitempty"" yaml:""viewName,omitempty""`
}

// GetListAndViewResponse was auto-generated from WSDL.
type GetListAndViewResponse struct {
    GetListAndViewResult string `xml:""GetListAndViewResult,omitempty"" json:""GetListAndViewResult,omitempty"" yaml:""GetListAndViewResult,omitempty""`
}

// GetListCollection was auto-generated from WSDL.
type GetListCollection struct{}

// GetListCollectionResponse was auto-generated from WSDL.
type GetListCollectionResponse struct {
    GetListCollectionResult string `xml:""GetListCollectionResult,omitempty"" json:""GetListCollectionResult,omitempty"" yaml:""GetListCollectionResult,omitempty""`
}

// GetListContentType was auto-generated from WSDL.
type GetListContentType struct {
    XMLName       xml.Name `xml:""http://schemas.microsoft.com/sharepoint/soap/ GetListContentType"" json:""-"" yaml:""-""`
    ListName      string   `xml:""listName,omitempty"" json:""listName,omitempty"" yaml:""listName,omitempty""`
    ContentTypeId string   `xml:""contentTypeId,omitempty"" json:""contentTypeId,omitempty"" yaml:""contentTypeId,omitempty""`
}

// GetListContentTypeResponse was auto-generated from WSDL.
type GetListContentTypeResponse struct {
    GetListContentTypeResult string `xml:""GetListContentTypeResult,omitempty"" json:""GetListContentTypeResult,omitempty"" yaml:""GetListContentTypeResult,omitempty""`
}
",1678
1737,45839846,"xml:""Envelope""",14
1738,45839846,"xml:""GetListResponse""",21
1739,45839846,"// GetListAndView was auto-generated from WSDL.
func (p *listsSoap) GetListAndView(α *GetListAndView) (β *GetListAndViewResponse, err error) {
    γ := struct {
        XMLName xml.Name `xml:""Envelope""`
        Body    struct {
            M GetListAndViewResponse `xml:""GetListAndViewResponse""`
        }
    }{}
    if err = p.cli.RoundTripSoap12(""http://schemas.microsoft.com/sharepoint/soap/GetListAndView"", α, &γ); err != nil {
        return nil, err
    }
    return &γ.Body.M, nil
}

// GetListCollection was auto-generated from WSDL.
func (p *listsSoap) GetListCollection(α *GetListCollection) (β *GetListCollectionResponse, err error) {
    γ := struct {
        XMLName xml.Name `xml:""Envelope""`
        Body    struct {
            M GetListCollectionResponse `xml:""GetListCollectionResponse""`
        }
    }{}
    if err = p.cli.RoundTripSoap12(""http://schemas.microsoft.com/sharepoint/soap/GetListCollection"", α, &γ); err != nil {
        return nil, err
    }
    return &γ.Body.M, nil
}

// GetListContentType was auto-generated from WSDL.
func (p *listsSoap) GetListContentType(α *GetListContentType) (β *GetListContentTypeResponse, err error) {
    γ := struct {
        XMLName xml.Name `xml:""Envelope""`
        Body    struct {
            M GetListContentTypeResponse `xml:""GetListContentTypeResponse""`
        }
    }{}
    fmt.Println(""α  value is "", α, ""and γ is "", γ)

    if err = p.cli.RoundTripSoap12(""http://schemas.microsoft.com/sharepoint/soap/GetListContentType"", α, &γ); err != nil {
        return nil, err
    }
    return &γ.Body.M, nil
}

// GetListContentTypes was auto-generated from WSDL.
func (p *listsSoap) GetListContentTypes(α *GetListContentTypes) (β *GetListContentTypesResponse, err error) {
    γ := struct {
        XMLName xml.Name `xml:""Envelope""`
        Body    struct {
            M GetListContentTypesResponse `xml:""GetListContentTypesResponse""`
        }
    }{}
    if err = p.cli.RoundTripSoap12(""http://schemas.microsoft.com/sharepoint/soap/GetListContentTypes"", α, &γ); err != nil {
        fmt.Println(""GetListContentTypes error is "", err)

        return nil, err
    }
    return &γ.Body.M, nil
}
",2190
1740,45839846,"package main

import (
    ""fmt""
    list ""examples/sharepoint_test/listfiles""
    site ""examples/sharepoint_test/sitedata""
    hello ""examples/testing""

    ""github.com/fiorix/wsdl2go/soap""
)

func main() {
    var logincr hello.Login
    var liststruct list.GetList
    var listitems list.GetListItems
    var listcontentype list.GetListContentTypes
    var sitedt site.GetAttachments
    logincr.Username = ""****""
    logincr.Password = ""****""
    liststruct.ListName = ""Documents""
    listitems.ListName = ""Documents""
    sitedt.StrListName = ""testvijay""
    sitedt.StrItemId = ""1""
    listcontentype.ListName = ""Documents""
    cli := soap.Client{
        URL:         ""http://example.com/_vti_bin/authentication.asmx"",
        Namespace:   hello.Namespace,
        ContentType: ""text/xml; charset=utf-8"",
    }
    conn := hello.NewAuthenticationSoap(&cli)
    fmt.Println(""conn is "", conn)
    reply, err := conn.Login(&logincr)
    if err != nil {
        fmt.Println(""error occured is"", err)
    }
    fmt.Println(""LOgin response is "", reply.LoginResult)
    clilist := soap.Client{
        URL:         ""http://example.com/_vti_bin/lists.asmx"",
        Namespace:   list.Namespace,
        ContentType: ""application/soap+xml; charset=utf-8"",
    }
    sitelist := soap.Client{
        URL:         ""http://example.com/_vti_bin/sitedata.asmx"",
        Namespace:   site.Namespace,
        ContentType: ""application/soap+xml; charset=utf-8"",
    }
    listsoap := list.NewListsSoap(&clilist)
    content, err := listsoap.GetListContentTypes(&listcontentype)
    if err != nil {
        fmt.Println(""error occured is"", err)
    }
    fmt.Println(""response for content item is  "", content.GetListContentTypesResult)
    sitecli := site.NewSiteDataSoap(&sitelist)
    data, _ := site.SiteDataSoap.GetAttachments(sitecli, &sitedt)
    fmt.Println(""response for data site is  "", data.VAttachments)

    //  listitem, err := list.ListsSoap.GetListItems()

    ascas, _ := list.ListsSoap.GetListItems(listsoap, &listitems)
    fmt.Println(""response for list item is  "", ascas.GetListItemsResult)

    testlist, _ := list.ListsSoap.GetList(listsoap, &liststruct)
    fmt.Println(""response for list is  "", testlist.GetListResult)

    //conn := hello.NewService(&cli)
    //reply, err := conn.Echo(cli, &hello.EchoRequest{Data: ""echo""})

}
",2338
1741,45846743,CreateHandler,13
1742,45846743,"func(*AppContext, http.ResponseWriter, http.Request) (int, error)",65
1743,45846743,Handler,7
1744,45846743,handlerType,11
1745,45846743,"""CREATE""",8
1746,45846743,"""GET""",5
1747,45846743,handlerActionName,17
1748,45846743,"""CREATE""",8
1749,45846743,"""GET""",5
1750,45846743,"""flow""",6
1751,45846743,"""process""",9
1752,45846743,elastible,9
1753,45846743,Elastible,9
1754,45846743,SetESID,7
1755,45846743,Flow,4
1756,45846743,Process,7
1757,45846743,Handler,7
1758,45846743,Flow,4
1759,45846743,Process,7
1760,45846743,handler.elastible.SetESID(),27
1761,45846743,sendResponse(response interface{}),34
1762,45846743,w http.ResponseWriter,21
1763,45846743,response,8
1764,45846743,"struct {
    Highest int `json:""id""`
}{highest} 
",49
1765,45846743,Flow,4
1766,45846743,Process,7
1767,45846743,"// This is the type that will be used to build our handlers.
type Handler struct {
    handlerType       string    // Can be ""CREATE"" or ""GET""
    handlerActionName string    // Can be ""flow"" or ""process""
    elastible         Elastible // Can be *Flow or *Process
}

// Your ESID Type.
type ESIDType string

// Solution proposed by https://stackoverflow.com/users/7426/adrian.
type Elastible interface {
    SetESID(id ESIDType)
}

// Make the Flow and Process pointers implement the Elastible interface.
func (flow *Flow) SetESID(id ESIDType) {
    flow.ESID = id
}

func (process *Process) SetESID(id ESIDType) {
    process.ESID = id
}

// Create a Higher Order Function which will return the actual handler.
func CreateHandler(handler Handler) func(*AppContext, http.ResponseWriter, http.Request) (int, error) {

    return func(a *AppContext, w http.ResponseWriter, r http.Request) (int, error) {

        // Define a sendResponse function so that we may not need to copy paste it later.
        // It captures w using closure and takes an interface argument that we use to call .Encode() with.

        sendResponse := func(response interface{}) (int, error) {
            b := new(bytes.Buffer)
            json.NewEncoder(b).Encode(response)
            w.Header().Set(""Content-Type"", ""application/json"")
            w.Write(b.Bytes())
            return 200, nil
        }

        // Define these variables beforehand since we'll be using them
        // in both the if and else block. Not necessary really.
        var code int
        var err error

        // Check the handlerType. Is it create or get?
        if handler.handlerType == ""CREATE"" {
            var highest int

            // Creates the thing using handler.handlerActionName which may be ""flow"" or ""process""
            highest, code, err = a.Create(handler.handlerActionName, r)
            if code != 200 || err != nil {
                return code, err
            }

            // Send the response using the above defined function and return.
            return sendResponse(struct {
                Highest int `json:""id""`
            }{highest})

        } else {

            // This is GET handlerType.
            var hit HitType

            // Get the hit using again the handler.handlerActionName which may be ""flow"" or ""process""
            hit, code, err = a.GetByID(handler.handlerActionName, mux.Vars(r)[""id""], r)
            if code != 200 || err != nil {
                return code, err
            }

            // Do the un-marshalling.
            err = json.Unmarshal(*hit.Source, ob)
            if err != nil {
                return 500, err
            }

            // We have set the handler.elastible to be an interface type
            // which will have the SetESID function that will set the ESID in the
            // underlying type that will be passed on runtime.
            // So the ESID will be set for both the Flow and the Process types.
            // This interface idea was given inside an earlier answer by
            // https://stackoverflow.com/users/7426/adrian

            handler.elastible.SetESID(hit.id)
            return sendResponse(handler.elastible)
        }
    }
}
",3214
1768,45846743,"    // This was your first function. ""CreateFlow""
    api.Handle(""/createFlow/{id:[0-9]+}"", handlers.AppHandler{
        context, CreateHandler(Handler{
            elastible:         &Flow{},
            handlerActionName: ""flow"",
            handlerType:       ""CREATE"",
        }),
    }).Methods(""GET"")

    // This was your second function. ""CreateProcess""
    api.Handle(""/createProcess/{id:[0-9]+}"", handlers.AppHandler{
        context, CreateHandler(Handler{
            elastible:         &Process{},
            handlerActionName: ""process"",
            handlerType:       ""CREATE"",
        }),
    }).Methods(""GET"")

    // This was your third function. ""GetFlow""
    api.Handle(""/getFlow/{id:[0-9]+}"", handlers.AppHandler{
        context, CreateHandler(Handler{
            elastible:         &Flow{},
            handlerActionName: ""flow"",
            handlerType:       ""GET"",
        }),
    }).Methods(""GET"")

    // This was your fourth function. ""GetProcess""
    api.Handle(""/getProcess/{id:[0-9]+}"", handlers.AppHandler{
        context, CreateHandler(Handler{
            elastible:         &Process{},
            handlerActionName: ""process"",
            handlerType:       ""GET"",
        }),
    }).Methods(""GET"")
",1239
