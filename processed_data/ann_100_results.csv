,text,tokens,annotations,post_id
0,"package main

import ""rand""

func Routine1(command12 chan int, response12 chan int, command13 chan int, response13 chan int) {

    // z12 is a variable which stores the value comming from channel 2 and z13 is a variable which stores the value comming from channel 3.

    z12 := 200
    z13 := 200
    m12 := false
    m13 := false
    y := 0

    for i := 0; i < 20; i++ {
        y = rand.Intn(100)

        // If y's value is not 0 then the value will be sent to routine 2 or 3 according to   prime or not.
        // If y's value is 0 then process state (the varibles used by it means z12, z13) and channel state will be saved.[routine 1 is initiator]

        if y == 0 {
            print(z12, ""    z12 STATE SAVED\n"")
            print(z13, ""    z13 STATE SAVED\n"")

            // Routine 1 is initiator,  it sends 0 to make other process to save the state.

            y = 0
            command12 <- y
            command13 <- y

            // Untill routine 2 and 3 does not send 0, process 1 is on channel saving state (it's process state is already saved).
            // When routine 1 recives 0 from both other processes, channel is saved and routine 1 retuns to it's common routine procedure.
            // When routine 1 recives 0 from any other processes, saving channel bettwen them is stopped.
            // m12, m13 is used to mark whether 0 recived or not.

            for m12 != true || m13 != true {
                select {
                case cmd1 := <-response12:
                    {
                        z12 = cmd1
                        if z12 != 0 {
                            print(z12, ""    z12  Channel Saving.... \n"")
                            y = rand.Intn(100)
                            command12 <- y
                        }
                        if z12 == 0 {
                            m12 = true
                            print("" z12  Channel Saving Stopped \n"")
                        }
                    }

                case cmd2 := <-response13:
                    {
                        z13 = cmd2
                        if z13 != 0 {
                            print(z13, ""    z13  Channel Saving.... \n"")
                            y = rand.Intn(100)
                            command13 <- y
                        }
                        if z13 == 0 {
                            m13 = true
                            print(""    z13  Channel Saving Stopped \n"")
                        }
                    }
                }

            }

            // After saving process state it retuns to it's normal behaviour.

            m12 = false
            m13 = false
        }

        if y != 0 {

            // If y value is not 0, routine 1 just sends int to other process according to prime or not and recives int accordingly.

            if y%2 == 0 {
                command12 <- y
            }

            if y%2 != 0 {
                command13 <- y
            }
            select {
            case cmd1 := <-response12:
                {
                    z12 = cmd1
                    print(z12, ""    z12\n"")
                }
            case cmd2 := <-response13:
                {
                    z13 = cmd2
                    print(z13, ""   z13\n"")
                }
            }
        }
    }
    close(command12)
    close(command13)
}


//Routine 2 (or 3) is not an initiator (means it can't send 0). When it recives 0 (from routine 1 or 3) it save the state of process and the state of the channel from which it recived).
// When it recives 0 from both other two routine, it saves all channel state and returns to it's common behaviour. [same in routine 3]

func Routine2(command12 chan int, response12 chan int, command23 chan int, response23 chan int) {
    z21 := 200
    z23 := 200
    m21 := false
    m23 := false

    for i := 0; i < 20; i++ {
        select {
        case x, open := <-command12:
            {
                if !open {
                    return
                }
                if x != 0 && m23 != true {
                    z21 = x
                    print(z21, ""   z21\n"")
                }
                if x != 0 && m23 == true {
                    z21 = x
                    print(z21, ""   z21 Channel Saving \n"")
                }
                if x == 0 {
                    m21 = true
                    if m21 == true && m23 == true {
                        print("" z21 and z23 Channel Saving Stopped \n"")
                        m23 = false
                        m21 = false
                    }
                    if m21 == true && m23 != true {
                        z21 = x
                        print(z21, ""   z21  Channel Saved \n"")

                    }

                }
            }

        case x, open := <-response23:
            {
                if !open {
                    return
                }
                if x != 0 && m21 != true {
                    z23 = x
                    print(z23, ""   z21\n"")
                }
                if x != 0 && m21 == true {
                    z23 = x
                    print(z23, ""   z23 Channel Saving \n"")
                }
                if x == 0 {
                    m23 = true
                    if m21 == true && m23 == true {
                        print("" z23 Channel Saving Stopped \n"")
                        m23 = false
                        m21 = false
                    }
                    if m23 == true && m21 != true {
                        z23 = x
                        print(z23, ""   z23  Channel Saved \n"")
                    }

                }
            }
        }

        if m23 == false && m21 == false {
            y := rand.Intn(100)
            if y%2 == 0 {
                if y == 0 {
                    y = 10
                    response12 <- y
                }
            }

            if y%2 != 0 {
                if y == 0 {
                    y = 10
                    response23 <- y
                }
            }
        }

        if m23 == true && m21 != true {
            y := rand.Intn(100)
            response12 <- y
        }

        if m23 != true && m21 == true {
            y := rand.Intn(100)
            command23 <- y
        }

    }
    close(response12)
    close(command23)
}

func Routine3(command13 chan int, response13 chan int, command23 chan int, response23 chan int) {
    z31 := 200
    z32 := 200
    m31 := false
    m32 := false

    for i := 0; i < 20; i++ {
        select {
        case x, open := <-command13:
            {
                if !open {
                    return
                }
                if x != 0 && m32 != true {
                    z31 = x
                    print(z31, ""   z21\n"")
                }
                if x != 0 && m32 == true {
                    z31 = x
                    print(z31, ""   z31 Channel Saving \n"")
                }
                if x == 0 {
                    m31 = true
                    if m31 == true && m32 == true {
                        print("" z21 Channel Saving Stopped \n"")
                        m31 = false
                        m32 = false
                    }
                    if m31 == true && m32 != true {
                        z31 = x
                        print(z31, ""   z31  Channel Saved \n"")

                    }

                }
            }

        case x, open := <-command23:
            {
                if !open {
                    return
                }
                if x != 0 && m31 != true {
                    z32 = x
                    print(z32, ""   z32\n"")
                }
                if x != 0 && m31 == true {
                    z32 = x
                    print(z32, ""   z32 Channel Saving \n"")
                }
                if x == 0 {
                    m32 = true
                    if m31 == true && m32 == true {
                        print("" z32 Channel Saving Stopped \n"")
                        m31 = false
                        m32 = false
                    }
                    if m32 == true && m31 != true {
                        z32 = x
                        print(z32, ""   z32  Channel Saved \n"")

                    }

                }
            }
        }
        if m31 == false && m32 == false {
            y := rand.Intn(100)
            if y%2 == 0 {
                response13 <- y
            }

            if y%2 != 0 {
                response23 <- y
            }
        }

        if m31 == true && m32 != true {
            y := rand.Intn(100)
            response13 <- y
        }

        if m31 != true && m32 == true {
            y := rand.Intn(100)
            response23 <- y
        }

    }
    close(response13)
    close(response23)
}


func main() {

    // Three concurrent channels are created to pass integers to each other.
    // command 12 used to send int and response12 is used to receive int from routine 1 to routine 2.
    // response 12 used to send int and command 12 is used to receive int from routine 2 to routine 1. {so as for others}

    command12 := make(chan int)
    response12 := make(chan int)
    command13 := make(chan int)
    response13 := make(chan int)
    command23 := make(chan int)
    response23 := make(chan int)

    go Routine1(command12, response12, command13, response13)
    go Routine2(command12, response12, command23, response23)
    Routine3(command13, response13, command23, response23)
}","['package', 'main', 'import', '""rand""', 'func', 'Routine1', '(', 'command12', 'chan', 'int', ',', 'response12', 'chan', 'int', ',', 'command13', 'chan', 'int', ',', 'response13', 'chan', 'int', ')', '{', '// z12 is a variable which stores the value comming from channel 2 and z13 is a variable which stores the value comming from channel 3.', 'z12', ':=', '200', 'z13', ':=', '200', 'm12', ':=', 'false', 'm13', ':=', 'false', 'y', ':=', '0', 'for', 'i', ':=', '0', ';', 'i', '<', '20', ';', 'i', '++', '{', 'y', '=', 'rand', '.', 'Intn', '(', '100', ')', ""// If y's value is not 0 then the value will be sent to routine 2 or 3 according to   prime or not."", ""// If y's value is 0 then process state (the varibles used by it means z12, z13) and channel state will be saved.[routine 1 is initiator]"", 'if', 'y', '==', '0', '{', 'print', '(', 'z12', ',', '""    z12 STATE SAVED\\n""', ')', 'print', '(', 'z13', ',', '""    z13 STATE SAVED\\n""', ')', '// Routine 1 is initiator,  it sends 0 to make other process to save the state.', 'y', '=', '0', 'command12', '<-', 'y', 'command13', '<-', 'y', ""// Untill routine 2 and 3 does not send 0, process 1 is on channel saving state (it's process state is already saved)."", ""// When routine 1 recives 0 from both other processes, channel is saved and routine 1 retuns to it's common routine procedure."", '// When routine 1 recives 0 from any other processes, saving channel bettwen them is stopped.', '// m12, m13 is used to mark whether 0 recived or not.', 'for', 'm12', '!=', 'true', '||', 'm13', '!=', 'true', '{', 'select', '{', 'case', 'cmd1', ':=', '<-', 'response12', ':', '{', 'z12', '=', 'cmd1', 'if', 'z12', '!=', '0', '{', 'print', '(', 'z12', ',', '""    z12  Channel Saving.... \\n""', ')', 'y', '=', 'rand', '.', 'Intn', '(', '100', ')', 'command12', '<-', 'y', '}', 'if', 'z12', '==', '0', '{', 'm12', '=', 'true', 'print', '(', '"" z12  Channel Saving Stopped \\n""', ')', '}', '}', 'case', 'cmd2', ':=', '<-', 'response13', ':', '{', 'z13', '=', 'cmd2', 'if', 'z13', '!=', '0', '{', 'print', '(', 'z13', ',', '""    z13  Channel Saving.... \\n""', ')', 'y', '=', 'rand', '.', 'Intn', '(', '100', ')', 'command13', '<-', 'y', '}', 'if', 'z13', '==', '0', '{', 'm13', '=', 'true', 'print', '(', '""    z13  Channel Saving Stopped \\n""', ')', '}', '}', '}', '}', ""// After saving process state it retuns to it's normal behaviour."", 'm12', '=', 'false', 'm13', '=', 'false', '}', 'if', 'y', '!=', '0', '{', '// If y value is not 0, routine 1 just sends int to other process according to prime or not and recives int accordingly.', 'if', 'y', '2', '==', '0', '{', 'command12', '<-', 'y', '}', 'if', 'y', '2', '!=', '0', '{', 'command13', '<-', 'y', '}', 'select', '{', 'case', 'cmd1', ':=', '<-', 'response12', ':', '{', 'z12', '=', 'cmd1', 'print', '(', 'z12', ',', '""    z12\\n""', ')', '}', 'case', 'cmd2', ':=', '<-', 'response13', ':', '{', 'z13', '=', 'cmd2', 'print', '(', 'z13', ',', '""   z13\\n""', ')', '}', '}', '}', '}', 'close', '(', 'command12', ')', 'close', '(', 'command13', ')', '}', ""//Routine 2 (or 3) is not an initiator (means it can't send 0). When it recives 0 (from routine 1 or 3) it save the state of process and the state of the channel from which it recived)."", ""// When it recives 0 from both other two routine, it saves all channel state and returns to it's common behaviour. [same in routine 3]"", 'func', 'Routine2', '(', 'command12', 'chan', 'int', ',', 'response12', 'chan', 'int', ',', 'command23', 'chan', 'int', ',', 'response23', 'chan', 'int', ')', '{', 'z21', ':=', '200', 'z23', ':=', '200', 'm21', ':=', 'false', 'm23', ':=', 'false', 'for', 'i', ':=', '0', ';', 'i', '<', '20', ';', 'i', '++', '{', 'select', '{', 'case', 'x', ',', 'open', ':=', '<-', 'command12', ':', '{', 'if', '!', 'open', '{', 'return', '}', 'if', 'x', '!=', '0', '&&', 'm23', '!=', 'true', '{', 'z21', '=', 'x', 'print', '(', 'z21', ',', '""   z21\\n""', ')', '}', 'if', 'x', '!=', '0', '&&', 'm23', '==', 'true', '{', 'z21', '=', 'x', 'print', '(', 'z21', ',', '""   z21 Channel Saving \\n""', ')', '}', 'if', 'x', '==', '0', '{', 'm21', '=', 'true', 'if', 'm21', '==', 'true', '&&', 'm23', '==', 'true', '{', 'print', '(', '"" z21 and z23 Channel Saving Stopped \\n""', ')', 'm23', '=', 'false', 'm21', '=', 'false', '}', 'if', 'm21', '==', 'true', '&&', 'm23', '!=', 'true', '{', 'z21', '=', 'x', 'print', '(', 'z21', ',', '""   z21  Channel Saved \\n""', ')', '}', '}', '}', 'case', 'x', ',', 'open', ':=', '<-', 'response23', ':', '{', 'if', '!', 'open', '{', 'return', '}', 'if', 'x', '!=', '0', '&&', 'm21', '!=', 'true', '{', 'z23', '=', 'x', 'print', '(', 'z23', ',', '""   z21\\n""', ')', '}', 'if', 'x', '!=', '0', '&&', 'm21', '==', 'true', '{', 'z23', '=', 'x', 'print', '(', 'z23', ',', '""   z23 Channel Saving \\n""', ')', '}', 'if', 'x', '==', '0', '{', 'm23', '=', 'true', 'if', 'm21', '==', 'true', '&&', 'm23', '==', 'true', '{', 'print', '(', '"" z23 Channel Saving Stopped \\n""', ')', 'm23', '=', 'false', 'm21', '=', 'false', '}', 'if', 'm23', '==', 'true', '&&', 'm21', '!=', 'true', '{', 'z23', '=', 'x', 'print', '(', 'z23', ',', '""   z23  Channel Saved \\n""', ')', '}', '}', '}', '}', 'if', 'm23', '==', 'false', '&&', 'm21', '==', 'false', '{', 'y', ':=', 'rand', '.', 'Intn', '(', '100', ')', 'if', 'y', '2', '==', '0', '{', 'if', 'y', '==', '0', '{', 'y', '=', '10', 'response12', '<-', 'y', '}', '}', 'if', 'y', '2', '!=', '0', '{', 'if', 'y', '==', '0', '{', 'y', '=', '10', 'response23', '<-', 'y', '}', '}', '}', 'if', 'm23', '==', 'true', '&&', 'm21', '!=', 'true', '{', 'y', ':=', 'rand', '.', 'Intn', '(', '100', ')', 'response12', '<-', 'y', '}', 'if', 'm23', '!=', 'true', '&&', 'm21', '==', 'true', '{', 'y', ':=', 'rand', '.', 'Intn', '(', '100', ')', 'command23', '<-', 'y', '}', '}', 'close', '(', 'response12', ')', 'close', '(', 'command23', ')', '}', 'func', 'Routine3', '(', 'command13', 'chan', 'int', ',', 'response13', 'chan', 'int', ',', 'command23', 'chan', 'int', ',', 'response23', 'chan', 'int', ')', '{', 'z31', ':=', '200', 'z32', ':=', '200', 'm31', ':=', 'false', 'm32', ':=', 'false', 'for', 'i', ':=', '0', ';', 'i', '<', '20', ';', 'i', '++', '{', 'select', '{', 'case', 'x', ',', 'open', ':=', '<-', 'command13', ':', '{', 'if', '!', 'open', '{', 'return', '}', 'if', 'x', '!=', '0', '&&', 'm32', '!=', 'true', '{', 'z31', '=', 'x', 'print', '(', 'z31', ',', '""   z21\\n""', ')', '}', 'if', 'x', '!=', '0', '&&', 'm32', '==', 'true', '{', 'z31', '=', 'x', 'print', '(', 'z31', ',', '""   z31 Channel Saving \\n""', ')', '}', 'if', 'x', '==', '0', '{', 'm31', '=', 'true', 'if', 'm31', '==', 'true', '&&', 'm32', '==', 'true', '{', 'print', '(', '"" z21 Channel Saving Stopped \\n""', ')', 'm31', '=', 'false', 'm32', '=', 'false', '}', 'if', 'm31', '==', 'true', '&&', 'm32', '!=', 'true', '{', 'z31', '=', 'x', 'print', '(', 'z31', ',', '""   z31  Channel Saved \\n""', ')', '}', '}', '}', 'case', 'x', ',', 'open', ':=', '<-', 'command23', ':', '{', 'if', '!', 'open', '{', 'return', '}', 'if', 'x', '!=', '0', '&&', 'm31', '!=', 'true', '{', 'z32', '=', 'x', 'print', '(', 'z32', ',', '""   z32\\n""', ')', '}', 'if', 'x', '!=', '0', '&&', 'm31', '==', 'true', '{', 'z32', '=', 'x', 'print', '(', 'z32', ',', '""   z32 Channel Saving \\n""', ')', '}', 'if', 'x', '==', '0', '{', 'm32', '=', 'true', 'if', 'm31', '==', 'true', '&&', 'm32', '==', 'true', '{', 'print', '(', '"" z32 Channel Saving Stopped \\n""', ')', 'm31', '=', 'false', 'm32', '=', 'false', '}', 'if', 'm32', '==', 'true', '&&', 'm31', '!=', 'true', '{', 'z32', '=', 'x', 'print', '(', 'z32', ',', '""   z32  Channel Saved \\n""', ')', '}', '}', '}', '}', 'if', 'm31', '==', 'false', '&&', 'm32', '==', 'false', '{', 'y', ':=', 'rand', '.', 'Intn', '(', '100', ')', 'if', 'y', '2', '==', '0', '{', 'response13', '<-', 'y', '}', 'if', 'y', '2', '!=', '0', '{', 'response23', '<-', 'y', '}', '}', 'if', 'm31', '==', 'true', '&&', 'm32', '!=', 'true', '{', 'y', ':=', 'rand', '.', 'Intn', '(', '100', ')', 'response13', '<-', 'y', '}', 'if', 'm31', '!=', 'true', '&&', 'm32', '==', 'true', '{', 'y', ':=', 'rand', '.', 'Intn', '(', '100', ')', 'response23', '<-', 'y', '}', '}', 'close', '(', 'response13', ')', 'close', '(', 'response23', ')', '}', 'func', 'main', '()', '{', '// Three concurrent channels are created to pass integers to each other.', '// command 12 used to send int and response12 is used to receive int from routine 1 to routine 2.', '// response 12 used to send int and command 12 is used to receive int from routine 2 to routine 1. {so as for others}', 'command12', ':=', 'make', '(', 'chan', 'int', ')', 'response12', ':=', 'make', '(', 'chan', 'int', ')', 'command13', ':=', 'make', '(', 'chan', 'int', ')', 'response13', ':=', 'make', '(', 'chan', 'int', ')', 'command23', ':=', 'make', '(', 'chan', 'int', ')', 'response23', ':=', 'make', '(', 'chan', 'int', ')', 'go', 'Routine1', '(', 'command12', ',', 'response12', ',', 'command13', ',', 'response13', ')', 'go', 'Routine2', '(', 'command12', ',', 'response12', ',', 'command23', ',', 'response23', ')', 'Routine3', '(', 'command13', ',', 'response13', ',', 'command23', ',', 'response23', ')', '}']","['keyword', 'identifier', 'keyword', 'string_literal', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'z12', 'is', 'a', 'variable', 'which', 'stores', 'the', 'value', 'comming', 'from', 'channel', '2', 'and', 'z13', 'is', 'a', 'variable', 'which', 'stores', 'the', 'value', 'comming', 'from', 'channel', '3', '.', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'If', 'y', ""'s"", 'value', 'is', 'not', '0', 'then', 'the', 'value', 'will', 'be', 'sent', 'to', 'routine', '2', 'or', '3', 'according', 'to', 'prime', 'or', 'not', '.', 'comment', 'If', 'y', ""'s"", 'value', 'is', '0', 'then', 'process', 'state', '(', 'the', 'varibles', 'used', 'by', 'it', 'means', 'z12', ',', 'z13', ')', 'and', 'channel', 'state', 'will', 'be', 'saved', '.', '[', 'routine', '1', 'is', 'initiator', ']', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Routine', '1', 'is', 'initiator', ',', 'it', 'sends', '0', 'to', 'make', 'other', 'process', 'to', 'save', 'the', 'state', '.', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'comment', 'Untill', 'routine', '2', 'and', '3', 'does', 'not', 'send', '0', ',', 'process', '1', 'is', 'on', 'channel', 'saving', 'state', '(', 'it', ""'s"", 'process', 'state', 'is', 'already', 'saved', ')', '.', 'comment', 'When', 'routine', '1', 'recives', '0', 'from', 'both', 'other', 'processes', ',', 'channel', 'is', 'saved', 'and', 'routine', '1', 'retuns', 'to', 'it', ""'s"", 'common', 'routine', 'procedure', '.', 'comment', 'When', 'routine', '1', 'recives', '0', 'from', 'any', 'other', 'processes', ',', 'saving', 'channel', 'bettwen', 'them', 'is', 'stopped', '.', 'comment', 'm12', ',', 'm13', 'is', 'used', 'to', 'mark', 'whether', '0', 'recived', 'or', 'not', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'operator', 'operator', 'comment', 'After', 'saving', 'process', 'state', 'it', 'retuns', 'to', 'it', ""'s"", 'normal', 'behaviour', '.', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'If', 'y', 'value', 'is', 'not', '0', ',', 'routine', '1', 'just', 'sends', 'int', 'to', 'other', 'process', 'according', 'to', 'prime', 'or', 'not', 'and', 'recives', 'int', 'accordingly', '.', 'keyword', 'identifier', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Routine', '2', '(', 'or', '3', ')', 'is', 'not', 'an', 'initiator', '(', 'means', 'it', 'ca', ""n't"", 'send', '0', ')', '.', 'When', 'it', 'recives', '0', '(', 'from', 'routine', '1', 'or', '3', ')', 'it', 'save', 'the', 'state', 'of', 'process', 'and', 'the', 'state', 'of', 'the', 'channel', 'from', 'which', 'it', 'recived', ')', '.', 'comment', 'When', 'it', 'recives', '0', 'from', 'both', 'other', 'two', 'routine', ',', 'it', 'saves', 'all', 'channel', 'state', 'and', 'returns', 'to', 'it', ""'s"", 'common', 'behaviour', '.', '[', 'same', 'in', 'routine', '3', ']', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'Three', 'concurrent', 'channels', 'are', 'created', 'to', 'pass', 'integers', 'to', 'each', 'other', '.', 'comment', 'command', '12', 'used', 'to', 'send', 'int', 'and', 'response12', 'is', 'used', 'to', 'receive', 'int', 'from', 'routine', '1', 'to', 'routine', '2', '.', 'comment', 'response', '12', 'used', 'to', 'send', 'int', 'and', 'command', '12', 'is', 'used', 'to', 'receive', 'int', 'from', 'routine', '2', 'to', 'routine', '1', '.', '{', 'so', 'as', 'for', 'others', '}', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",8272760
1,"package main

func parseFile(name string, finished chan int) {
    var Verts []*Vertex
    var Texs []*TexCoord
    var Faces []*Face

    var objFile, mtlFile, jsonFile *os.File
    var parseMaterial bool

    // Set up files and i/o
    inName := name
    outName := strings.Replace(inName, "".obj"", "".json3d"", -1)
    parseMaterial = false

    fmt.Printf(""--""+FgGreen+""Creating""+Reset+"" %s from %s\n"", outName, inName)

    var err error
    var part []byte
    var prefix bool

    if objFile, err = os.Open(inName); err != nil {
        fmt.Println(FgRed+""!!Failed to open input file!!""+Reset)
        return
    }

    if jsonFile, err = os.Create(outName); err != nil {
        fmt.Println(FgRed+""!!Failed to create output file!!""+Reset)
        return
    }

    reader := bufio.NewReader(objFile)
    writer := bufio.NewWriter(jsonFile)
    buffer := bytes.NewBuffer(make([]byte, 1024))

    // Read the file in and parse out what we need
    for {
        if part, prefix, err = reader.ReadLine(); err != nil {
            break
        }

        buffer.Write(part)
        if !prefix {
            line := buffer.String()
            if(strings.Contains(line, ""v "")) {
                Verts = append(Verts, parseVertex(line))
            } else if(strings.Contains(line, ""vt "")) {
                Texs = append(Texs, parseTexCoord(line))
            } else if(strings.Contains(line, ""f "")) {
                Faces = append(Faces, parseFace(line, Verts, Texs))
            } else if(strings.Contains(line, ""mtllib "")) {
                mtlName := strings.Split(line, "" "")[1]
                if mtlFile, err = os.Open(mtlName); err != nil {
                    fmt.Printf(""--""+FgRed+""Failed to find material file: %s\n""+Reset, mtlName)
                    parseMaterial = false
                } else {
                    parseMaterial = true
                }
            }
            buffer.Reset()
        }
    }

    if err == io.EOF {
        err = nil
    }

    objFile.Close()

    // Write out the data
    writer.WriteString(""{\""obj\"":[\n"");

    // Write out the verts
    writer.WriteString(""{\""vrt\"":[\n"");
    for i, vert := range Verts {
        writer.WriteString(vert.String())
        if i < len(Verts) - 1 { writer.WriteString("","") }
        writer.WriteString(""\n"")
    }

    // Write out the faces
    writer.WriteString(""],\""fac\"":[\n"")
    for i, face := range Faces {
        writer.WriteString(face.String(true))
        if i < len(Faces) - 1 { writer.WriteString("","") }
        writer.WriteString(""\n"")
    }

    // Write out the normals
    writer.WriteString(""],\""nrm\"":["")
    for i, face := range Faces {


        writer.WriteString(""["")
        for j, vert := range face.verts {
            length := math.Sqrt((vert.X * vert.X) + (vert.Y * vert.Y) + (vert.Z * vert.Z))
            x := vert.X / length
            y := vert.Y / length
            z := vert.Z / length
            normal := fmt.Sprintf(""[%f,%f,%f]"", x, y, z)
            writer.WriteString(normal)
            if(j < len(face.verts)-1) { writer.WriteString("","") }
        }
        writer.WriteString(""]"")




        //writer.WriteString(""[0, 1, 0]"")
        if i < len(Faces) - 1 { writer.WriteString("","") }
        writer.WriteString(""\n"")
    }

    // Write out the tex coords
    writer.WriteString(""],\""tex\"":["")
    for i, face := range Faces {
        writer.WriteString(""["")
        writer.WriteString(face.tex[0].String())
        writer.WriteString("","")
        writer.WriteString(face.tex[1].String())
        writer.WriteString("","")
        writer.WriteString(face.tex[2].String())
        writer.WriteString(""]"")
        if i < len(Faces) - 1 { writer.WriteString("","") }
        writer.WriteString(""\n"")
    }

    // Close obj block
    writer.WriteString(""]}]"");

    if parseMaterial {
        writer.WriteString("",mat:[{"");
        reader := bufio.NewReader(mtlFile)

        // Read the file in and parse out what we need
        for {
            if part, prefix, err = reader.ReadLine(); err != nil {
                break
            }

            buffer.Write(part)
            if !prefix {
                line := buffer.String()
                if(strings.Contains(line, ""map_Kd "")) {
                    parts := strings.Split(line, "" "")
                    entry := fmt.Sprintf(""\""t\"":\""%s\"","", parts[1])
                    writer.WriteString(entry)

                    width, height := 256, 256
                    var imageFile *os.File
                    if imageFile, err = os.Open(parts[1]); err != nil {
                        fmt.Printf(""--""+FgRed+""Failed to find %s, defaulting to 256x256""+Reset+""\n"", parts[1])
                        return
                    } else {
                        var config image.Config
                        imageReader := bufio.NewReader(imageFile)
                        config, err = jpeg.DecodeConfig(imageReader)
                        width, height = config.Width, config.Height
                        fmt.Printf(""--""+FgGreen+""Verifing""+Reset+"" that %s is %dpx x %dpx\n"", parts[1], width, height)
                    }

                    size := fmt.Sprintf(""\""w\"":%d,\""h\"":%d,"", width, height)
                    writer.WriteString(size)

                } else if(strings.Contains(line, ""Kd "")) {
                    parts := strings.Split(line, "" "")
                    entry := fmt.Sprintf(""\""r\"":%s, \""g\"":%s, \""b\"":%s,"", parts[1], parts[2], parts[3])
                    writer.WriteString(entry)
                }
                buffer.Reset()
            }
        }

        if err == io.EOF {
            err = nil
        }

        writer.WriteString(""\""res\"":100,\""uv\"":true}]"");
    }

    // Close json
    writer.WriteString(""}"");
    writer.Flush()
    jsonFile.Close()

    fmt.Printf(""--""+FgGreen+""Exported""+Reset+"" %d faces with %d verticies\n"", len(Faces), len(Verts))

    finished <- -1
}

func main(){
    // Verify we were called correctly
    if len(os.Args) < 2 {
        fmt.Println(""Usage: go run objParser.go "");
        return
    }

    files := len(os.Args)
    finished := make(chan int)

    now := time.Now()

    for i := 1; i < files; i++ {
        go parseFile(os.Args[i], finished)
    }

    for i := 1; i < files; i++ {
        <- finished
    }

    fmt.Printf(""Parsed %d files in %s\n"", files-1, time.Since(now))
}","['package', 'main', 'func', 'parseFile', '(', 'name', 'string', ',', 'finished', 'chan', 'int', ')', '{', 'var', 'Verts', '[]*', 'Vertex', 'var', 'Texs', '[]*', 'TexCoord', 'var', 'Faces', '[]*', 'Face', 'var', 'objFile', ',', 'mtlFile', ',', 'jsonFile', '*', 'os', '.', 'File', 'var', 'parseMaterial', 'bool', '// Set up files and i/o', 'inName', ':=', 'name', 'outName', ':=', 'strings', '.', 'Replace', '(', 'inName', ',', '"".obj"", "".json3d""', ',', '-', '1', ')', 'parseMaterial', '=', 'false', 'fmt', '.', 'Printf', '(', '""--""+FgGreen+""Creating""+Reset+"" %s from %s\\n""', ',', 'outName', ',', 'inName', ')', 'var', 'err', 'error', 'var', 'part', '[]', 'byte', 'var', 'prefix', 'bool', 'if', 'objFile', ',', 'err', '=', 'os', '.', 'Open', '(', 'inName', ');', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'FgRed', '+', '""!!Failed to open input file!!""', '+', 'Reset', ')', 'return', '}', 'if', 'jsonFile', ',', 'err', '=', 'os', '.', 'Create', '(', 'outName', ');', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'FgRed', '+', '""!!Failed to create output file!!""', '+', 'Reset', ')', 'return', '}', 'reader', ':=', 'bufio', '.', 'NewReader', '(', 'objFile', ')', 'writer', ':=', 'bufio', '.', 'NewWriter', '(', 'jsonFile', ')', 'buffer', ':=', 'bytes', '.', 'NewBuffer', '(', 'make', '([]', 'byte', ',', '1024', '))', '// Read the file in and parse out what we need', 'for', '{', 'if', 'part', ',', 'prefix', ',', 'err', '=', 'reader', '.', 'ReadLine', '();', 'err', '!=', 'nil', '{', 'break', '}', 'buffer', '.', 'Write', '(', 'part', ')', 'if', '!', 'prefix', '{', 'line', ':=', 'buffer', '.', 'String', '()', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""v ""', '))', '{', 'Verts', '=', 'append', '(', 'Verts', ',', 'parseVertex', '(', 'line', '))', '}', 'else', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""vt ""', '))', '{', 'Texs', '=', 'append', '(', 'Texs', ',', 'parseTexCoord', '(', 'line', '))', '}', 'else', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""f ""', '))', '{', 'Faces', '=', 'append', '(', 'Faces', ',', 'parseFace', '(', 'line', ',', 'Verts', ',', 'Texs', '))', '}', 'else', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""mtllib ""', '))', '{', 'mtlName', ':=', 'strings', '.', 'Split', '(', 'line', ',', '"" ""', ')[', '1', ']', 'if', 'mtlFile', ',', 'err', '=', 'os', '.', 'Open', '(', 'mtlName', ');', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""--""+FgRed+""Failed to find material file: %s\\n""', '+', 'Reset', ',', 'mtlName', ')', 'parseMaterial', '=', 'false', '}', 'else', '{', 'parseMaterial', '=', 'true', '}', '}', 'buffer', '.', 'Reset', '()', '}', '}', 'if', 'err', '==', 'io', '.', 'EOF', '{', 'err', '=', 'nil', '}', 'objFile', '.', 'Close', '()', '// Write out the data', 'writer', '.', 'WriteString', '(', '""{\\""obj\\"":[\\n""', ');', '// Write out the verts', 'writer', '.', 'WriteString', '(', '""{\\""vrt\\"":[\\n""', ');', 'for', 'i', ',', 'vert', ':=', 'range', 'Verts', '{', 'writer', '.', 'WriteString', '(', 'vert', '.', 'String', '())', 'if', 'i', '<', 'len', '(', 'Verts', ')', '-', '1', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}', 'writer', '.', 'WriteString', '(', '""\\n""', ')', '}', '// Write out the faces', 'writer', '.', 'WriteString', '(', '""],\\""fac\\"":[\\n""', ')', 'for', 'i', ',', 'face', ':=', 'range', 'Faces', '{', 'writer', '.', 'WriteString', '(', 'face', '.', 'String', '(', 'true', '))', 'if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}', 'writer', '.', 'WriteString', '(', '""\\n""', ')', '}', '// Write out the normals', 'writer', '.', 'WriteString', '(', '""],\\""nrm\\"":[""', ')', 'for', 'i', ',', 'face', ':=', 'range', 'Faces', '{', 'writer', '.', 'WriteString', '(', '""[""', ')', 'for', 'j', ',', 'vert', ':=', 'range', 'face', '.', 'verts', '{', 'length', ':=', 'math', '.', 'Sqrt', '((', 'vert', '.', 'X', '*', 'vert', '.', 'X', ')', '+', '(', 'vert', '.', 'Y', '*', 'vert', '.', 'Y', ')', '+', '(', 'vert', '.', 'Z', '*', 'vert', '.', 'Z', '))', 'x', ':=', 'vert', '.', 'X', 'length', 'y', ':=', 'vert', '.', 'Y', 'length', 'z', ':=', 'vert', '.', 'Z', 'length', 'normal', ':=', 'fmt', '.', 'Sprintf', '(', '""[%f,%f,%f]""', ',', 'x', ',', 'y', ',', 'z', ')', 'writer', '.', 'WriteString', '(', 'normal', ')', 'if', '(', 'j', '<', 'len', '(', 'face', '.', 'verts', ')-', '1', ')', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}', '}', 'writer', '.', 'WriteString', '(', '""]""', ')', '//writer.WriteString(""[0, 1, 0]"")', 'if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}', 'writer', '.', 'WriteString', '(', '""\\n""', ')', '}', '// Write out the tex coords', 'writer', '.', 'WriteString', '(', '""],\\""tex\\"":[""', ')', 'for', 'i', ',', 'face', ':=', 'range', 'Faces', '{', 'writer', '.', 'WriteString', '(', '""[""', ')', 'writer', '.', 'WriteString', '(', 'face', '.', 'tex', '[', '0', '].', 'String', '())', 'writer', '.', 'WriteString', '(', '"",""', ')', 'writer', '.', 'WriteString', '(', 'face', '.', 'tex', '[', '1', '].', 'String', '())', 'writer', '.', 'WriteString', '(', '"",""', ')', 'writer', '.', 'WriteString', '(', 'face', '.', 'tex', '[', '2', '].', 'String', '())', 'writer', '.', 'WriteString', '(', '""]""', ')', 'if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}', 'writer', '.', 'WriteString', '(', '""\\n""', ')', '}', '// Close obj block', 'writer', '.', 'WriteString', '(', '""]}]""', ');', 'if', 'parseMaterial', '{', 'writer', '.', 'WriteString', '(', '"",mat:[{""', ');', 'reader', ':=', 'bufio', '.', 'NewReader', '(', 'mtlFile', ')', '// Read the file in and parse out what we need', 'for', '{', 'if', 'part', ',', 'prefix', ',', 'err', '=', 'reader', '.', 'ReadLine', '();', 'err', '!=', 'nil', '{', 'break', '}', 'buffer', '.', 'Write', '(', 'part', ')', 'if', '!', 'prefix', '{', 'line', ':=', 'buffer', '.', 'String', '()', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""map_Kd ""', '))', '{', 'parts', ':=', 'strings', '.', 'Split', '(', 'line', ',', '"" ""', ')', 'entry', ':=', 'fmt', '.', 'Sprintf', '(', '""\\""t\\"":\\""%s\\"",""', ',', 'parts', '[', '1', '])', 'writer', '.', 'WriteString', '(', 'entry', ')', 'width', ',', 'height', ':=', '256', ',', '256', 'var', 'imageFile', '*', 'os', '.', 'File', 'if', 'imageFile', ',', 'err', '=', 'os', '.', 'Open', '(', 'parts', '[', '1', ']);', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""--""+FgRed+""Failed to find %s, defaulting to 256x256""+Reset+""\\n""', ',', 'parts', '[', '1', '])', 'return', '}', 'else', '{', 'var', 'config', 'image', '.', 'Config', 'imageReader', ':=', 'bufio', '.', 'NewReader', '(', 'imageFile', ')', 'config', ',', 'err', '=', 'jpeg', '.', 'DecodeConfig', '(', 'imageReader', ')', 'width', ',', 'height', '=', 'config', '.', 'Width', ',', 'config', '.', 'Height', 'fmt', '.', 'Printf', '(', '""--""+FgGreen+""Verifing""+Reset+"" that %s is %dpx x %dpx\\n""', ',', 'parts', '[', '1', '],', 'width', ',', 'height', ')', '}', 'size', ':=', 'fmt', '.', 'Sprintf', '(', '""\\""w\\"":%d,\\""h\\"":%d,""', ',', 'width', ',', 'height', ')', 'writer', '.', 'WriteString', '(', 'size', ')', '}', 'else', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""Kd ""', '))', '{', 'parts', ':=', 'strings', '.', 'Split', '(', 'line', ',', '"" ""', ')', 'entry', ':=', 'fmt', '.', 'Sprintf', '(', '""\\""r\\"":%s, \\""g\\"":%s, \\""b\\"":%s,""', ',', 'parts', '[', '1', '],', 'parts', '[', '2', '],', 'parts', '[', '3', '])', 'writer', '.', 'WriteString', '(', 'entry', ')', '}', 'buffer', '.', 'Reset', '()', '}', '}', 'if', 'err', '==', 'io', '.', 'EOF', '{', 'err', '=', 'nil', '}', 'writer', '.', 'WriteString', '(', '""\\""res\\"":100,\\""uv\\"":true}]""', ');', '}', '// Close json', 'writer', '.', 'WriteString', '(', '""}""', ');', 'writer', '.', 'Flush', '()', 'jsonFile', '.', 'Close', '()', 'fmt', '.', 'Printf', '(', '""--""+FgGreen+""Exported""+Reset+"" %d faces with %d verticies\\n""', ',', 'len', '(', 'Faces', '),', 'len', '(', 'Verts', '))', 'finished', '<-', '-', '1', '}', 'func', 'main', '(){', '// Verify we were called correctly', 'if', 'len', '(', 'os', '.', 'Args', ')', '<', '2', '{', 'fmt', '.', 'Println', '(', '""Usage: go run objParser.go ""', ');', 'return', '}', 'files', ':=', 'len', '(', 'os', '.', 'Args', ')', 'finished', ':=', 'make', '(', 'chan', 'int', ')', 'now', ':=', 'time', '.', 'Now', '()', 'for', 'i', ':=', '1', ';', 'i', '<', 'files', ';', 'i', '++', '{', 'go', 'parseFile', '(', 'os', '.', 'Args', '[', 'i', '],', 'finished', ')', '}', 'for', 'i', ':=', '1', ';', 'i', '<', 'files', ';', 'i', '++', '{', '<-', 'finished', '}', 'fmt', '.', 'Printf', '(', '""Parsed %d files in %s\\n""', ',', 'files', '-', '1', ',', 'time', '.', 'Since', '(', 'now', '))', '}']","['keyword', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'identifier', 'comment', 'Set', 'up', 'files', 'and', 'i/o', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'Read', 'the', 'file', 'in', 'and', 'parse', 'out', 'what', 'we', 'need', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Write', 'out', 'the', 'data', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Write', 'out', 'the', 'verts', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'Write', 'out', 'the', 'faces', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'Write', 'out', 'the', 'normals', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'writer.WriteString', '(', '``', '[', '0', ',', '1', ',', '0', ']', ""''"", ')', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'Write', 'out', 'the', 'tex', 'coords', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'Close', 'obj', 'block', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Read', 'the', 'file', 'in', 'and', 'parse', 'out', 'what', 'we', 'need', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'Close', 'json', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'comment', 'Verify', 'we', 'were', 'called', 'correctly', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",12482910
2,"package hello

import (
    ""fmt""
    ""net/http""
)

func init() {
    http.HandleFunc(""/"", handler)
}

func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprint(w, ""Hello, world!"")
}
","['package', 'hello', 'import', '(', '""fmt""', '""net/http""', ')', 'func', 'init', '()', '{', 'http', '.', 'HandleFunc', '(', '""/""', ',', 'handler', ')', '}', 'func', 'handler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'fmt', '.', 'Fprint', '(', 'w', ',', '""Hello, world!""', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']",12885235
3,"// Copyright 2012 Stefan Nilsson
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package prio provides a priority queue.
// The queue can hold elements that implement the two methods of prio.Interface.
package prio

/*
A type that implements prio.Interface can be inserted into a priority queue.

The simplest use case looks like this:

        type myInt int

        func (x myInt) Less(y prio.Interface) bool { return x < y.(myInt) }
        func (x myInt) Index(i int)                {}

To use the Remove method you need to keep track of the index of elements
in the heap, e.g. like this:

        type myType struct {
                value int
                index int // index in heap
        }

        func (x *myType) Less(y prio.Interface) bool { return x.value < y.(*myType).value }
        func (x *myType) Index(i int)                { x.index = i }
*/
type Interface interface {
        // Less returns whether this element should sort before element x.
        Less(x Interface) bool
        // Index is called by the priority queue when this element is moved to index i.
        Index(i int)
}

// Queue represents a priority queue.
// The zero value for Queue is an empty queue ready to use.
type Queue struct {
        h []Interface
}

// New returns an initialized priority queue with the given elements.
// A call of the form New(x...) uses the underlying array of x to implement
// the queue and hence might change the elements of x.
// The complexity is O(n), where n = len(x).
func New(x ...Interface) Queue {
        q := Queue{x}
        heapify(q.h)
        return q
}

// Push pushes the element x onto the queue.
// The complexity is O(log(n)) where n = q.Len().
func (q *Queue) Push(x Interface) {
        n := len(q.h)
        q.h = append(q.h, x)
        up(q.h, n) // x.Index(n) is done by up.
}

// Pop removes a minimum element (according to Less) from the queue and returns it.
// The complexity is O(log(n)), where n = q.Len().
func (q *Queue) Pop() Interface {
        h := q.h
        n := len(h) - 1
        x := h[0]
        h[0], h[n] = h[n], nil
        h = h[:n]
        if n > 0 {
                down(h, 0) // h[0].Index(0) is done by down.
        }
        q.h = h
        x.Index(-1) // for safety
        return x
}

// Peek returns, but does not remove, a minimum element (according to Less) of the queue.
func (q *Queue) Peek() Interface {
        return q.h[0]
}

// Remove removes the element at index i from the queue and returns it.
// The complexity is O(log(n)), where n = q.Len().
func (q *Queue) Remove(i int) Interface {
        h := q.h
        n := len(h) - 1
        x := h[i]
        h[i], h[n] = h[n], nil
        h = h[:n]
        if i < n {
                down(h, i) // h[i].Index(i) is done by down.
                up(h, i)
        }
        q.h = h
        x.Index(-1) // for safety
        return x
}

// Len returns the number of elements in the queue.
func (q *Queue) Len() int {
        return len(q.h)
}

// Establishes the heap invariant in O(n) time.
func heapify(h []Interface) {
        n := len(h)
        for i := n - 1; i >= n/2; i-- {
                h[i].Index(i)
        }
        for i := n/2 - 1; i >= 0; i-- { // h[i].Index(i) is done by down.
                down(h, i)
        }
}

// Moves element at position i towards top of heap to restore invariant.
func up(h []Interface, i int) {
        for {
                parent := (i - 1) / 2
                if i == 0 || h[parent].Less(h[i]) {
                        h[i].Index(i)
                        break
                }
                h[parent], h[i] = h[i], h[parent]
                h[i].Index(i)
                i = parent
        }
}

// Moves element at position i towards bottom of heap to restore invariant.
func down(h []Interface, i int) {
        for {
                n := len(h)
                left := 2*i + 1
                if left >= n {
                        h[i].Index(i)
                        break
                }
                j := left
                if right := left + 1; right < n && h[right].Less(h[left]) {
                        j = right
                }
                if h[i].Less(h[j]) {
                        h[i].Index(i)
                        break
                }
                h[i], h[j] = h[j], h[i]
                h[i].Index(i)
                i = j
        }
}","['// Copyright 2012 Stefan Nilsson', '//', '// Licensed under the Apache License, Version 2.0 (the ""License"");', '// you may not use this file except in compliance with the License.', '// You may obtain a copy of the License at', '//', '//     http://www.apache.org/licenses/LICENSE-2.0', '//', '// Unless required by applicable law or agreed to in writing, software', '// distributed under the License is distributed on an ""AS IS"" BASIS,', '// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.', '// See the License for the specific language governing permissions and', '// limitations under the License.', '// Package prio provides a priority queue.', '// The queue can hold elements that implement the two methods of prio.Interface.', 'package', 'prio', '*', 'A', 'type', 'that', 'implements', 'prio', '.', 'Interface', 'can', 'be', 'inserted', 'into', 'a', 'priority', 'queue', '.', 'The', 'simplest', 'use', 'case', 'looks', 'like', 'this', ':', 'type', 'myInt', 'int', 'func', '(', 'x', 'myInt', ')', 'Less', '(', 'y', 'prio', '.', 'Interface', ')', 'bool', '{', 'return', 'x', '<', 'y', '.(', 'myInt', ')', '}', 'func', '(', 'x', 'myInt', ')', 'Index', '(', 'i', 'int', ')', '{}', 'To', 'use', 'the', 'Remove', 'method', 'you', 'need', 'to', 'keep', 'track', 'of', 'the', 'index', 'of', 'elements', 'in', 'the', 'heap', ',', 'e', '.', 'g', '.', 'like', 'this', ':', 'type', 'myType', 'struct', '{', 'value', 'int', 'index', 'int', '// index in heap', '}', 'func', '(', 'x', '*', 'myType', ')', 'Less', '(', 'y', 'prio', '.', 'Interface', ')', 'bool', '{', 'return', 'x', '.', 'value', '<', 'y', '.(*', 'myType', ').', 'value', '}', 'func', '(', 'x', '*', 'myType', ')', 'Index', '(', 'i', 'int', ')', '{', 'x', '.', 'index', '=', 'i', '}', '*', 'type', 'Interface', 'interface', '{', '// Less returns whether this element should sort before element x.', 'Less', '(', 'x', 'Interface', ')', 'bool', '// Index is called by the priority queue when this element is moved to index i.', 'Index', '(', 'i', 'int', ')', '}', '// Queue represents a priority queue.', '// The zero value for Queue is an empty queue ready to use.', 'type', 'Queue', 'struct', '{', 'h', '[]', 'Interface', '}', '// New returns an initialized priority queue with the given elements.', '// A call of the form New(x...) uses the underlying array of x to implement', '// the queue and hence might change the elements of x.', '// The complexity is O(n), where n = len(x).', 'func', 'New', '(', 'x', '...', 'Interface', ')', 'Queue', '{', 'q', ':=', 'Queue', '{', 'x', '}', 'heapify', '(', 'q', '.', 'h', ')', 'return', 'q', '}', '// Push pushes the element x onto the queue.', '// The complexity is O(log(n)) where n = q.Len().', 'func', '(', 'q', '*', 'Queue', ')', 'Push', '(', 'x', 'Interface', ')', '{', 'n', ':=', 'len', '(', 'q', '.', 'h', ')', 'q', '.', 'h', '=', 'append', '(', 'q', '.', 'h', ',', 'x', ')', 'up', '(', 'q', '.', 'h', ',', 'n', ')', '// x.Index(n) is done by up.', '}', '// Pop removes a minimum element (according to Less) from the queue and returns it.', '// The complexity is O(log(n)), where n = q.Len().', 'func', '(', 'q', '*', 'Queue', ')', 'Pop', '()', 'Interface', '{', 'h', ':=', 'q', '.', 'h', 'n', ':=', 'len', '(', 'h', ')', '-', '1', 'x', ':=', 'h', '[', '0', ']', 'h', '[', '0', '],', 'h', '[', 'n', ']', '=', 'h', '[', 'n', '],', 'nil', 'h', '=', 'h', '[:', 'n', ']', 'if', 'n', '>', '0', '{', 'down', '(', 'h', ',', '0', ')', '// h[0].Index(0) is done by down.', '}', 'q', '.', 'h', '=', 'h', 'x', '.', 'Index', '(-', '1', ')', '// for safety', 'return', 'x', '}', '// Peek returns, but does not remove, a minimum element (according to Less) of the queue.', 'func', '(', 'q', '*', 'Queue', ')', 'Peek', '()', 'Interface', '{', 'return', 'q', '.', 'h', '[', '0', ']', '}', '// Remove removes the element at index i from the queue and returns it.', '// The complexity is O(log(n)), where n = q.Len().', 'func', '(', 'q', '*', 'Queue', ')', 'Remove', '(', 'i', 'int', ')', 'Interface', '{', 'h', ':=', 'q', '.', 'h', 'n', ':=', 'len', '(', 'h', ')', '-', '1', 'x', ':=', 'h', '[', 'i', ']', 'h', '[', 'i', '],', 'h', '[', 'n', ']', '=', 'h', '[', 'n', '],', 'nil', 'h', '=', 'h', '[:', 'n', ']', 'if', 'i', '<', 'n', '{', 'down', '(', 'h', ',', 'i', ')', '// h[i].Index(i) is done by down.', 'up', '(', 'h', ',', 'i', ')', '}', 'q', '.', 'h', '=', 'h', 'x', '.', 'Index', '(-', '1', ')', '// for safety', 'return', 'x', '}', '// Len returns the number of elements in the queue.', 'func', '(', 'q', '*', 'Queue', ')', 'Len', '()', 'int', '{', 'return', 'len', '(', 'q', '.', 'h', ')', '}', '// Establishes the heap invariant in O(n) time.', 'func', 'heapify', '(', 'h', '[]', 'Interface', ')', '{', 'n', ':=', 'len', '(', 'h', ')', 'for', 'i', ':=', 'n', '-', '1', ';', 'i', '>=', 'n', '2', ';', 'i', '--', '{', 'h', '[', 'i', '].', 'Index', '(', 'i', ')', '}', 'for', 'i', ':=', 'n', '2', '-', '1', ';', 'i', '>=', '0', ';', 'i', '--', '{', '// h[i].Index(i) is done by down.', 'down', '(', 'h', ',', 'i', ')', '}', '}', '// Moves element at position i towards top of heap to restore invariant.', 'func', 'up', '(', 'h', '[]', 'Interface', ',', 'i', 'int', ')', '{', 'for', '{', 'parent', ':=', '(', 'i', '-', '1', ')', '2', 'if', 'i', '==', '0', '||', 'h', '[', 'parent', '].', 'Less', '(', 'h', '[', 'i', '])', '{', 'h', '[', 'i', '].', 'Index', '(', 'i', ')', 'break', '}', 'h', '[', 'parent', '],', 'h', '[', 'i', ']', '=', 'h', '[', 'i', '],', 'h', '[', 'parent', ']', 'h', '[', 'i', '].', 'Index', '(', 'i', ')', 'i', '=', 'parent', '}', '}', '// Moves element at position i towards bottom of heap to restore invariant.', 'func', 'down', '(', 'h', '[]', 'Interface', ',', 'i', 'int', ')', '{', 'for', '{', 'n', ':=', 'len', '(', 'h', ')', 'left', ':=', '2', '*', 'i', '+', '1', 'if', 'left', '>=', 'n', '{', 'h', '[', 'i', '].', 'Index', '(', 'i', ')', 'break', '}', 'j', ':=', 'left', 'if', 'right', ':=', 'left', '+', '1', ';', 'right', '<', 'n', '&&', 'h', '[', 'right', '].', 'Less', '(', 'h', '[', 'left', '])', '{', 'j', '=', 'right', '}', 'if', 'h', '[', 'i', '].', 'Less', '(', 'h', '[', 'j', '])', '{', 'h', '[', 'i', '].', 'Index', '(', 'i', ')', 'break', '}', 'h', '[', 'i', '],', 'h', '[', 'j', ']', '=', 'h', '[', 'j', '],', 'h', '[', 'i', ']', 'h', '[', 'i', '].', 'Index', '(', 'i', ')', 'i', '=', 'j', '}', '}']","['comment', 'Copyright', '2012', 'Stefan', 'Nilsson', 'comment', 'comment', 'Licensed', 'under', 'the', 'Apache', 'License', ',', 'Version', '2.0', '(', 'the', '``', 'License', ""''"", ')', ';', 'comment', 'you', 'may', 'not', 'use', 'this', 'file', 'except', 'in', 'compliance', 'with', 'the', 'License', '.', 'comment', 'You', 'may', 'obtain', 'a', 'copy', 'of', 'the', 'License', 'at', 'comment', 'comment', 'http', ':', 'www.apache.org/licenses/LICENSE-2.0', 'comment', 'comment', 'Unless', 'required', 'by', 'applicable', 'law', 'or', 'agreed', 'to', 'in', 'writing', ',', 'software', 'comment', 'distributed', 'under', 'the', 'License', 'is', 'distributed', 'on', 'an', '``', 'AS', 'IS', ""''"", 'BASIS', ',', 'comment', 'WITHOUT', 'WARRANTIES', 'OR', 'CONDITIONS', 'OF', 'ANY', 'KIND', ',', 'either', 'express', 'or', 'implied', '.', 'comment', 'See', 'the', 'License', 'for', 'the', 'specific', 'language', 'governing', 'permissions', 'and', 'comment', 'limitations', 'under', 'the', 'License', '.', 'comment', 'Package', 'prio', 'provides', 'a', 'priority', 'queue', '.', 'comment', 'The', 'queue', 'can', 'hold', 'elements', 'that', 'implement', 'the', 'two', 'methods', 'of', 'prio.Interface', '.', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'comment', 'index', 'in', 'heap', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'comment', 'Less', 'returns', 'whether', 'this', 'element', 'should', 'sort', 'before', 'element', 'x', '.', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'comment', 'Index', 'is', 'called', 'by', 'the', 'priority', 'queue', 'when', 'this', 'element', 'is', 'moved', 'to', 'index', 'i', '.', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'comment', 'Queue', 'represents', 'a', 'priority', 'queue', '.', 'comment', 'The', 'zero', 'value', 'for', 'Queue', 'is', 'an', 'empty', 'queue', 'ready', 'to', 'use', '.', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'New', 'returns', 'an', 'initialized', 'priority', 'queue', 'with', 'the', 'given', 'elements', '.', 'comment', 'A', 'call', 'of', 'the', 'form', 'New', '(', 'x', '...', ')', 'uses', 'the', 'underlying', 'array', 'of', 'x', 'to', 'implement', 'comment', 'the', 'queue', 'and', 'hence', 'might', 'change', 'the', 'elements', 'of', 'x', '.', 'comment', 'The', 'complexity', 'is', 'O', '(', 'n', ')', ',', 'where', 'n', '=', 'len', '(', 'x', ')', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'comment', 'Push', 'pushes', 'the', 'element', 'x', 'onto', 'the', 'queue', '.', 'comment', 'The', 'complexity', 'is', 'O', '(', 'log', '(', 'n', ')', ')', 'where', 'n', '=', 'q.Len', '(', ')', '.', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'x.Index', '(', 'n', ')', 'is', 'done', 'by', 'up', '.', 'operator', 'comment', 'Pop', 'removes', 'a', 'minimum', 'element', '(', 'according', 'to', 'Less', ')', 'from', 'the', 'queue', 'and', 'returns', 'it', '.', 'comment', 'The', 'complexity', 'is', 'O', '(', 'log', '(', 'n', ')', ')', ',', 'where', 'n', '=', 'q.Len', '(', ')', '.', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'h', '[', '0', ']', '.Index', '(', '0', ')', 'is', 'done', 'by', 'down', '.', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'for', 'safety', 'keyword', 'identifier', 'operator', 'comment', 'Peek', 'returns', ',', 'but', 'does', 'not', 'remove', ',', 'a', 'minimum', 'element', '(', 'according', 'to', 'Less', ')', 'of', 'the', 'queue', '.', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'comment', 'Remove', 'removes', 'the', 'element', 'at', 'index', 'i', 'from', 'the', 'queue', 'and', 'returns', 'it', '.', 'comment', 'The', 'complexity', 'is', 'O', '(', 'log', '(', 'n', ')', ')', ',', 'where', 'n', '=', 'q.Len', '(', ')', '.', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'h', '[', 'i', ']', '.Index', '(', 'i', ')', 'is', 'done', 'by', 'down', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'for', 'safety', 'keyword', 'identifier', 'operator', 'comment', 'Len', 'returns', 'the', 'number', 'of', 'elements', 'in', 'the', 'queue', '.', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Establishes', 'the', 'heap', 'invariant', 'in', 'O', '(', 'n', ')', 'time', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'comment', 'h', '[', 'i', ']', '.Index', '(', 'i', ')', 'is', 'done', 'by', 'down', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'comment', 'Moves', 'element', 'at', 'position', 'i', 'towards', 'top', 'of', 'heap', 'to', 'restore', 'invariant', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Moves', 'element', 'at', 'position', 'i', 'towards', 'bottom', 'of', 'heap', 'to', 'restore', 'invariant', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",13777298
4,"// Handle the reads
  var tbuf [81920]byte

  for {

    n, err := c.rwc.Read(tbuf[0:])

    // Was there an error in reading ?
    if err != nil {
        log.Printf(""Could not read packet : %s"", err.Error())
        break
    }

    log.Println(n)

}

return","['// Handle the reads', 'var', 'tbuf', '[', '81920', ']', 'byte', 'for', '{', 'n', ',', 'err', ':=', 'c', '.', 'rwc', '.', 'Read', '(', 'tbuf', '[', '0', ':])', '// Was there an error in reading ?', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""Could not read packet : %s""', ',', 'err', '.', 'Error', '())', 'break', '}', 'log', '.', 'Println', '(', 'n', ')', '}', 'return']","['comment', 'Handle', 'the', 'reads', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'Was', 'there', 'an', 'error', 'in', 'reading', '?', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword']",14080024
5,"package main

import (
    ""fmt""
    ""math/rand""
    ""time""
)

const (
    NUMBER_OF_SIMULATIONS = 1000
    NUMBER_OF_INTERACTIONS = 1000000
    DROP_RATE = 0.0003
)

/**
 * Simulates a single interaction with a monster
 *
 * Returns 1 if the monster dropped an item and 0 otherwise
 */
func interaction() int {
    if rand.Float64() <= DROP_RATE {
        return 1
    }
    return 0
}

/**
 * Runs several interactions and retuns a slice representing the results
 */
func simulation(n int) []int {
    interactions := make([]int, n)
    for i := range interactions {
        interactions[i] = interaction()
    }
    return interactions
}

/**
 * Runs several simulations and returns the results
 */
func test(n int) []int {
    simulations := make([]int, n)
    for i := range simulations {
        successes := 0
        for _, v := range simulation(NUMBER_OF_INTERACTIONS) {
            successes += v
        }
        simulations[i] = successes
    }
    return simulations
}

func main() {
    rand.Seed(time.Now().UnixNano())
    fmt.Println(""Successful interactions: "", test(NUMBER_OF_SIMULATIONS))
}","['package', 'main', 'import', '(', '""fmt""', '""math/rand""', '""time""', ')', 'const', '(', 'NUMBER_OF_SIMULATIONS', '=', '1000', 'NUMBER_OF_INTERACTIONS', '=', '1000000', 'DROP_RATE', '=', '0', '.', '0003', ')', '**', '*', 'Simulates', 'a', 'single', 'interaction', 'with', 'a', 'monster', '*', '*', 'Returns', '1', 'if', 'the', 'monster', 'dropped', 'an', 'item', 'and', '0', 'otherwise', '*', 'func', 'interaction', '()', 'int', '{', 'if', 'rand', '.', 'Float64', '()', '<=', 'DROP_RATE', '{', 'return', '1', '}', 'return', '0', '}', '**', '*', 'Runs', 'several', 'interactions', 'and', 'retuns', 'a', 'slice', 'representing', 'the', 'results', '*', 'func', 'simulation', '(', 'n', 'int', ')', '[]', 'int', '{', 'interactions', ':=', 'make', '([]', 'int', ',', 'n', ')', 'for', 'i', ':=', 'range', 'interactions', '{', 'interactions', '[', 'i', ']', '=', 'interaction', '()', '}', 'return', 'interactions', '}', '**', '*', 'Runs', 'several', 'simulations', 'and', 'return', 's', 'the', 'results', '*', 'func', 'test', '(', 'n', 'int', ')', '[]', 'int', '{', 'simulations', ':=', 'make', '([]', 'int', ',', 'n', ')', 'for', 'i', ':=', 'range', 'simulations', '{', 'successes', ':=', '0', 'for', '_', ',', 'v', ':=', 'range', 'simulation', '(', 'NUMBER_OF_INTERACTIONS', ')', '{', 'successes', '+=', 'v', '}', 'simulations', '[', 'i', ']', '=', 'successes', '}', 'return', 'simulations', '}', 'func', 'main', '()', '{', 'rand', '.', 'Seed', '(', 'time', '.', 'Now', '().', 'UnixNano', '())', 'fmt', '.', 'Println', '(', '""Successful interactions: ""', ',', 'test', '(', 'NUMBER_OF_SIMULATIONS', '))', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'decimal_literal', 'keyword', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'decimal_literal', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'keyword', 'decimal_literal', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",14298523
6,"package main

import (
    ""fmt""
    ""math/rand""
    ""time""
    ""runtime""
)

const (
    NUMBER_OF_SIMULATIONS = 1000
    NUMBER_OF_INTERACTIONS = 1000000
    DROP_RATE = 0.0003
)

/**
 * Simulates a single interaction with a monster
 *
 * Returns 1 if the monster dropped an item and 0 otherwise
 */
func interaction() int {
    if rand.Float64() <= DROP_RATE {
        return 1
    }
    return 0
}

/**
 * Runs several interactions and retuns a slice representing the results
 */
func simulation(n int) []int {
    interactions := make([]int, n)
    for i := range interactions {
        interactions[i] = interaction()
    }
    return interactions
}

/**
 * Runs several simulations and returns the results
 */
func test(n int, c chan []int) {
    simulations := make([]int, n)
    for i := range simulations {
        for _, v := range simulation(NUMBER_OF_INTERACTIONS) {
            simulations[i] += v
        }
    }
    c <- simulations
}

func main() {
    rand.Seed(time.Now().UnixNano())

    nCPU := runtime.NumCPU()
    runtime.GOMAXPROCS(nCPU)
    fmt.Println(""Number of CPUs: "", nCPU)

    tests := make([]chan []int, nCPU)
    for i := range tests {
        c := make(chan []int)
        go test(NUMBER_OF_SIMULATIONS/nCPU, c)
        tests[i] = c
    }

    // Concatentate the test results
    results := make([]int, NUMBER_OF_SIMULATIONS)
    for i, c := range tests {
        start := (NUMBER_OF_SIMULATIONS/nCPU) * i
        stop := (NUMBER_OF_SIMULATIONS/nCPU) * (i+1)
        copy(results[start:stop], <-c)
    }

    fmt.Println(""Successful interactions: "", results)
}","['package', 'main', 'import', '(', '""fmt""', '""math/rand""', '""time""', '""runtime""', ')', 'const', '(', 'NUMBER_OF_SIMULATIONS', '=', '1000', 'NUMBER_OF_INTERACTIONS', '=', '1000000', 'DROP_RATE', '=', '0', '.', '0003', ')', '**', '*', 'Simulates', 'a', 'single', 'interaction', 'with', 'a', 'monster', '*', '*', 'Returns', '1', 'if', 'the', 'monster', 'dropped', 'an', 'item', 'and', '0', 'otherwise', '*', 'func', 'interaction', '()', 'int', '{', 'if', 'rand', '.', 'Float64', '()', '<=', 'DROP_RATE', '{', 'return', '1', '}', 'return', '0', '}', '**', '*', 'Runs', 'several', 'interactions', 'and', 'retuns', 'a', 'slice', 'representing', 'the', 'results', '*', 'func', 'simulation', '(', 'n', 'int', ')', '[]', 'int', '{', 'interactions', ':=', 'make', '([]', 'int', ',', 'n', ')', 'for', 'i', ':=', 'range', 'interactions', '{', 'interactions', '[', 'i', ']', '=', 'interaction', '()', '}', 'return', 'interactions', '}', '**', '*', 'Runs', 'several', 'simulations', 'and', 'return', 's', 'the', 'results', '*', 'func', 'test', '(', 'n', 'int', ',', 'c', 'chan', '[]', 'int', ')', '{', 'simulations', ':=', 'make', '([]', 'int', ',', 'n', ')', 'for', 'i', ':=', 'range', 'simulations', '{', 'for', '_', ',', 'v', ':=', 'range', 'simulation', '(', 'NUMBER_OF_INTERACTIONS', ')', '{', 'simulations', '[', 'i', ']', '+=', 'v', '}', '}', 'c', '<-', 'simulations', '}', 'func', 'main', '()', '{', 'rand', '.', 'Seed', '(', 'time', '.', 'Now', '().', 'UnixNano', '())', 'nCPU', ':=', 'runtime', '.', 'NumCPU', '()', 'runtime', '.', 'GOMAXPROCS', '(', 'nCPU', ')', 'fmt', '.', 'Println', '(', '""Number of CPUs: ""', ',', 'nCPU', ')', 'tests', ':=', 'make', '([]', 'chan', '[]', 'int', ',', 'nCPU', ')', 'for', 'i', ':=', 'range', 'tests', '{', 'c', ':=', 'make', '(', 'chan', '[]', 'int', ')', 'go', 'test', '(', 'NUMBER_OF_SIMULATIONS', 'nCPU', ',', 'c', ')', 'tests', '[', 'i', ']', '=', 'c', '}', '// Concatentate the test results', 'results', ':=', 'make', '([]', 'int', ',', 'NUMBER_OF_SIMULATIONS', ')', 'for', 'i', ',', 'c', ':=', 'range', 'tests', '{', 'start', ':=', '(', 'NUMBER_OF_SIMULATIONS', 'nCPU', ')', '*', 'i', 'stop', ':=', '(', 'NUMBER_OF_SIMULATIONS', 'nCPU', ')', '*', '(', 'i', '+', '1', ')', 'copy', '(', 'results', '[', 'start', ':', 'stop', '],', '<-', 'c', ')', '}', 'fmt', '.', 'Println', '(', '""Successful interactions: ""', ',', 'results', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'decimal_literal', 'keyword', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'decimal_literal', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'keyword', 'decimal_literal', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'comment', 'Concatentate', 'the', 'test', 'results', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator']",14298523
7,"package main

import (
    ""fmt""
    ""math/rand""
    ""time""
    ""runtime""
)

const (
    NUMBER_OF_SIMULATIONS = 1000
    NUMBER_OF_INTERACTIONS = 1000000
    DROP_RATE = 0.0003
)

/**
 * Simulates a single interaction with a monster
 *
 * Returns 1 if the monster dropped an item and 0 otherwise
 */
func interaction(generator *rand.Rand) int {
    if generator.Float64() <= DROP_RATE {
        return 1
    }
    return 0
}

/**
 * Runs several interactions and retuns a slice representing the results
 */
func simulation(n int, generator *rand.Rand) []int {
    interactions := make([]int, n)
    for i := range interactions {
        interactions[i] = interaction(generator)
    }
    return interactions
}

/**
 * Runs several simulations and returns the results
 */
func test(n int, c chan []int) {
    source := rand.NewSource(time.Now().UnixNano())
    generator := rand.New(source)
    simulations := make([]int, n)
    for i := range simulations {
        for _, v := range simulation(NUMBER_OF_INTERACTIONS, generator) {
            simulations[i] += v
        }
    }
    c <- simulations
}

func main() {
    rand.Seed(time.Now().UnixNano())

    nCPU := runtime.NumCPU()
    runtime.GOMAXPROCS(nCPU)
    fmt.Println(""Number of CPUs: "", nCPU)

    tests := make([]chan []int, nCPU)
    for i := range tests {
        c := make(chan []int)
        go test(NUMBER_OF_SIMULATIONS/nCPU, c)
        tests[i] = c
    }

    // Concatentate the test results
    results := make([]int, NUMBER_OF_SIMULATIONS)
    for i, c := range tests {
        start := (NUMBER_OF_SIMULATIONS/nCPU) * i
        stop := (NUMBER_OF_SIMULATIONS/nCPU) * (i+1)
        copy(results[start:stop], <-c)
    }

    fmt.Println(""Successful interactions: "", results)
}","['package', 'main', 'import', '(', '""fmt""', '""math/rand""', '""time""', '""runtime""', ')', 'const', '(', 'NUMBER_OF_SIMULATIONS', '=', '1000', 'NUMBER_OF_INTERACTIONS', '=', '1000000', 'DROP_RATE', '=', '0', '.', '0003', ')', '**', '*', 'Simulates', 'a', 'single', 'interaction', 'with', 'a', 'monster', '*', '*', 'Returns', '1', 'if', 'the', 'monster', 'dropped', 'an', 'item', 'and', '0', 'otherwise', '*', 'func', 'interaction', '(', 'generator', '*', 'rand', '.', 'Rand', ')', 'int', '{', 'if', 'generator', '.', 'Float64', '()', '<=', 'DROP_RATE', '{', 'return', '1', '}', 'return', '0', '}', '**', '*', 'Runs', 'several', 'interactions', 'and', 'retuns', 'a', 'slice', 'representing', 'the', 'results', '*', 'func', 'simulation', '(', 'n', 'int', ',', 'generator', '*', 'rand', '.', 'Rand', ')', '[]', 'int', '{', 'interactions', ':=', 'make', '([]', 'int', ',', 'n', ')', 'for', 'i', ':=', 'range', 'interactions', '{', 'interactions', '[', 'i', ']', '=', 'interaction', '(', 'generator', ')', '}', 'return', 'interactions', '}', '**', '*', 'Runs', 'several', 'simulations', 'and', 'return', 's', 'the', 'results', '*', 'func', 'test', '(', 'n', 'int', ',', 'c', 'chan', '[]', 'int', ')', '{', 'source', ':=', 'rand', '.', 'NewSource', '(', 'time', '.', 'Now', '().', 'UnixNano', '())', 'generator', ':=', 'rand', '.', 'New', '(', 'source', ')', 'simulations', ':=', 'make', '([]', 'int', ',', 'n', ')', 'for', 'i', ':=', 'range', 'simulations', '{', 'for', '_', ',', 'v', ':=', 'range', 'simulation', '(', 'NUMBER_OF_INTERACTIONS', ',', 'generator', ')', '{', 'simulations', '[', 'i', ']', '+=', 'v', '}', '}', 'c', '<-', 'simulations', '}', 'func', 'main', '()', '{', 'rand', '.', 'Seed', '(', 'time', '.', 'Now', '().', 'UnixNano', '())', 'nCPU', ':=', 'runtime', '.', 'NumCPU', '()', 'runtime', '.', 'GOMAXPROCS', '(', 'nCPU', ')', 'fmt', '.', 'Println', '(', '""Number of CPUs: ""', ',', 'nCPU', ')', 'tests', ':=', 'make', '([]', 'chan', '[]', 'int', ',', 'nCPU', ')', 'for', 'i', ':=', 'range', 'tests', '{', 'c', ':=', 'make', '(', 'chan', '[]', 'int', ')', 'go', 'test', '(', 'NUMBER_OF_SIMULATIONS', 'nCPU', ',', 'c', ')', 'tests', '[', 'i', ']', '=', 'c', '}', '// Concatentate the test results', 'results', ':=', 'make', '([]', 'int', ',', 'NUMBER_OF_SIMULATIONS', ')', 'for', 'i', ',', 'c', ':=', 'range', 'tests', '{', 'start', ':=', '(', 'NUMBER_OF_SIMULATIONS', 'nCPU', ')', '*', 'i', 'stop', ':=', '(', 'NUMBER_OF_SIMULATIONS', 'nCPU', ')', '*', '(', 'i', '+', '1', ')', 'copy', '(', 'results', '[', 'start', ':', 'stop', '],', '<-', 'c', ')', '}', 'fmt', '.', 'Println', '(', '""Successful interactions: ""', ',', 'results', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'decimal_literal', 'keyword', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'decimal_literal', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'keyword', 'decimal_literal', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'comment', 'Concatentate', 'the', 'test', 'results', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator']",14298523
8,"package main

import (
    ""fmt""
    ""github.com/0xe2-0x9a-0x9b/Go-SDL/sdl""
    gl ""github.com/chsc/gogl/gl33""
    ""math""
    ""time""
    ""unsafe""
)

const DEG_TO_RAD = math.Pi / 180

type GoMatrix [16]float64
type GlMatrix [16]gl.Float

var good_frames, bad_frames, sdl_events int

func main() {

    //=================================================================
    // Just opening a window, skip to the next part.

    if status := sdl.Init(sdl.INIT_VIDEO); status != 0 {
        panic(""Could not initialize SDL: "" + sdl.GetError())
    }
    defer sdl.Quit()

    sdl.GL_SetAttribute(sdl.GL_DOUBLEBUFFER, 1)
    const FLAGS = sdl.OPENGL
    if screen := sdl.SetVideoMode(640, 480, 32, FLAGS); screen == nil {
        panic(""Could not open SDL window: "" + sdl.GetError())
    }

    if err := gl.Init(); err != nil {
        panic(err)
    }

    gl.Viewport(0, 0, 640, 480)
    gl.ClearColor(.5, .5, .5, 1)

    //=================================================================
    // Simplest shaders ever.

    // A matrix to move the model, nothing else.
    vertex_code := gl.GLString(`
    #version 330 core
    in vec3 vpos;
    uniform mat4 MVP;
    void main() { 
        gl_Position = MVP * vec4(vpos, 1);
    }   
    `)
    // Everything is red.
    fragment_code := gl.GLString(`
    #version 330 core
    void main(){
        gl_FragColor = vec4(1,0,0,1);
    }
    `)
    vs := gl.CreateShader(gl.VERTEX_SHADER)
    fs := gl.CreateShader(gl.FRAGMENT_SHADER)
    gl.ShaderSource(vs, 1, &vertex_code, nil)
    gl.ShaderSource(fs, 1, &fragment_code, nil)
    gl.CompileShader(vs)
    gl.CompileShader(fs)
    prog := gl.CreateProgram()
    gl.AttachShader(prog, vs)
    gl.AttachShader(prog, fs)
    gl.LinkProgram(prog)
    // Did it compile?
    var link_status gl.Int
    gl.GetProgramiv(prog, gl.LINK_STATUS, &link_status)
    if link_status == gl.FALSE {
        var info_log_length gl.Int
        gl.GetProgramiv(prog, gl.INFO_LOG_LENGTH, &info_log_length)
        if info_log_length == 0 {
            panic(""Program linking failed but OpenGL has no log about it."")
        } else {
            info_log_gl := gl.GLStringAlloc(gl.Sizei(info_log_length))
            defer gl.GLStringFree(info_log_gl)
            gl.GetProgramInfoLog(prog, gl.Sizei(info_log_length), nil, info_log_gl)
            info_log := gl.GoString(info_log_gl)
            panic(info_log)
        }
    }
    gl.UseProgram(prog)
    attrib_vpos := gl.Uint(gl.GetAttribLocation(prog, gl.GLString(""vpos"")))

    //=================================================================
    // One triangle.

    positions := [...]gl.Float{-.5, -.5, 0, .5, -.5, 0, 0, .5, 0}

    var vao gl.Uint
    gl.GenVertexArrays(1, &vao)
    gl.BindVertexArray(vao)

    var vbo gl.Uint
    gl.GenBuffers(1, &vbo)
    gl.BindBuffer(gl.ARRAY_BUFFER, vbo)
    gl.BufferData(gl.ARRAY_BUFFER,
        gl.Sizeiptr(unsafe.Sizeof(positions)),
        gl.Pointer(&positions[0]),
        gl.STATIC_DRAW)

    gl.EnableVertexAttribArray(attrib_vpos)
    gl.VertexAttribPointer(attrib_vpos, 3, gl.FLOAT, gl.FALSE, 0, gl.Pointer(nil))

    //=================================================================

    Loop(prog)
    fmt.Println(""Good frames"", good_frames)
    fmt.Println(""Bad frames "", bad_frames)
    fmt.Println(""SDL events "", sdl_events)
}

func Loop(program gl.Uint) {
    start_time := time.Now()
    ticker := time.NewTicker(100 * time.Millisecond)
    defer ticker.Stop()
    running := true
    for running {
        select {
        case tick_time := <-ticker.C:
            OnTick(start_time, tick_time, program)
        case event := <-sdl.Events:
            running = OnSdlEvent(event)
        }
    }
}

func OnSdlEvent(event interface{}) bool {
    sdl_events++
    switch event.(type) {
    case sdl.QuitEvent:
        return false // Stop the main loop.
    }
    return true // Do not stop the main loop.
}

func OnTick(start_time, tick_time time.Time, program gl.Uint) {
    duration := tick_time.Sub(start_time).Seconds()
    speed := 10.
    angle := math.Mod(duration*speed, 360)
    gom := RotZ(angle)
    MVP := ToGlMatrix(gom)

    /* HERE, SOMETHING FISHY HAPPENS.

    Problem: sometimes, actually often, OpenGl returns 0 instead of -1 for
    the dummy parameter.  This is entirely correlated to the stuttering.

    With my implementation of OpenGl, swap buffer does a real swap.
    That means I get to see the last two pictures rendered.
    Thing is, I can see the swap, that means the pictures are different.
    That means that the call to DrawArrays is ignored.

    OpenGl is just crapping its pants.
    */
    matrix_loc := gl.GetUniformLocation(program, gl.GLString(""MVP""))
    dummy_matrix_loc := gl.GetUniformLocation(program, gl.GLString(""dummy""))
    if gl.GetError() != gl.NO_ERROR {
        fmt.Println(""Error get location"") // Never happens.
    }
    if dummy_matrix_loc == -1 {
        good_frames++ // Because is SHOULD fail.
    } else {
        bad_frames++ // That's not normal.
    }
    gl.UniformMatrix4fv(matrix_loc, 16, gl.TRUE, &MVP[0])
    if gl.GetError() != gl.NO_ERROR {
        fmt.Println(""Error send matrix"") // Never happens.
    }
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
    if gl.GetError() != gl.NO_ERROR {
        fmt.Println(""Error clearing"") // Never happens.
    }
    gl.DrawArrays(gl.TRIANGLES, 0, 3)
    if gl.GetError() != gl.NO_ERROR {
        fmt.Println(""Error drawing"") // Never happens.
    }
    gl.Finish() // Does not seem to make anything work better.
    sdl.GL_SwapBuffers()
}

func RotZ(angle float64) GoMatrix {
    var gom GoMatrix
    a := angle * DEG_TO_RAD
    c := math.Cos(a)
    s := math.Sin(a)
    gom[0] = c
    gom[1] = s
    gom[4] = -s
    gom[5] = c
    gom[10] = 1
    gom[15] = 1
    return gom
}

func ToGlMatrix(gom GoMatrix) GlMatrix {
    var glm GlMatrix
    glm[0] = gl.Float(gom[0])
    glm[1] = gl.Float(gom[1])
    glm[2] = gl.Float(gom[2])
    glm[3] = gl.Float(gom[3])
    glm[4] = gl.Float(gom[4])
    glm[5] = gl.Float(gom[5])
    glm[6] = gl.Float(gom[6])
    glm[7] = gl.Float(gom[7])
    glm[8] = gl.Float(gom[8])
    glm[9] = gl.Float(gom[9])
    glm[10] = gl.Float(gom[10])
    glm[11] = gl.Float(gom[11])
    glm[12] = gl.Float(gom[12])
    glm[13] = gl.Float(gom[13])
    glm[14] = gl.Float(gom[14])
    glm[15] = gl.Float(gom[15])
    return glm
}","['package', 'main', 'import', '(', '""fmt""', '""github.com/0xe2-0x9a-0x9b/Go-SDL/sdl""', 'gl', '""github.com/chsc/gogl/gl33""', '""math""', '""time""', '""unsafe""', ')', 'const', 'DEG_TO_RAD', '=', 'math', '.', 'Pi', '180', 'type', 'GoMatrix', '[', '16', ']', 'float64', 'type', 'GlMatrix', '[', '16', ']', 'gl', '.', 'Float', 'var', 'go', 'od_frames', ',', 'bad_frames', ',', 'sdl_events', 'int', 'func', 'main', '()', '{', '//=================================================================', '// Just opening a window, skip to the next part.', 'if', 'status', ':=', 'sdl', '.', 'Init', '(', 'sdl', '.', 'INIT_VIDEO', ');', 'status', '!=', '0', '{', 'panic', '(', '""Could not initialize SDL: ""', '+', 'sdl', '.', 'GetError', '())', '}', 'defer', 'sdl', '.', 'Quit', '()', 'sdl', '.', 'GL_SetAttribute', '(', 'sdl', '.', 'GL_DOUBLEBUFFER', ',', '1', ')', 'const', 'FLAGS', '=', 'sdl', '.', 'OPENGL', 'if', 'screen', ':=', 'sdl', '.', 'SetVideoMode', '(', '640', ',', '480', ',', '32', ',', 'FLAGS', ');', 'screen', '==', 'nil', '{', 'panic', '(', '""Could not open SDL window: ""', '+', 'sdl', '.', 'GetError', '())', '}', 'if', 'err', ':=', 'gl', '.', 'Init', '();', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'gl', '.', 'Viewport', '(', '0', ',', '0', ',', '640', ',', '480', ')', 'gl', '.', 'ClearColor', '(.', '5', ',', '.', '5', ',', '.', '5', ',', '1', ')', '//=================================================================', '// Simplest shaders ever.', '// A matrix to move the model, nothing else.', 'vertex_code', ':=', 'gl', '.', 'GLString', '(', 'version', '330', 'core', 'in', 'vec3', 'vpos', ';', 'uniform', 'mat4', 'MVP', ';', 'void', 'main', '()', '{', 'gl_Position', '=', 'MVP', '*', 'vec4', '(', 'vpos', ',', '1', ');', '}', ')', '// Everything is red.', 'fragment_code', ':=', 'gl', '.', 'GLString', '(', 'version', '330', 'core', 'void', 'main', '(){', 'gl_FragColor', '=', 'vec4', '(', '1', ',', '0', ',', '0', ',', '1', ');', '}', ')', 'vs', ':=', 'gl', '.', 'CreateShader', '(', 'gl', '.', 'VERTEX_SHADER', ')', 'fs', ':=', 'gl', '.', 'CreateShader', '(', 'gl', '.', 'FRAGMENT_SHADER', ')', 'gl', '.', 'ShaderSource', '(', 'vs', ',', '1', ',', '&', 'vertex_code', ',', 'nil', ')', 'gl', '.', 'ShaderSource', '(', 'fs', ',', '1', ',', '&', 'fragment_code', ',', 'nil', ')', 'gl', '.', 'CompileShader', '(', 'vs', ')', 'gl', '.', 'CompileShader', '(', 'fs', ')', 'prog', ':=', 'gl', '.', 'CreateProgram', '()', 'gl', '.', 'AttachShader', '(', 'prog', ',', 'vs', ')', 'gl', '.', 'AttachShader', '(', 'prog', ',', 'fs', ')', 'gl', '.', 'LinkProgram', '(', 'prog', ')', '// Did it compile?', 'var', 'link_status', 'gl', '.', 'Int', 'gl', '.', 'GetProgramiv', '(', 'prog', ',', 'gl', '.', 'LINK_STATUS', ',', '&', 'link_status', ')', 'if', 'link_status', '==', 'gl', '.', 'FALSE', '{', 'var', 'info_log_length', 'gl', '.', 'Int', 'gl', '.', 'GetProgramiv', '(', 'prog', ',', 'gl', '.', 'INFO_LOG_LENGTH', ',', '&', 'info_log_length', ')', 'if', 'info_log_length', '==', '0', '{', 'panic', '(', '""Program linking failed but OpenGL has no log about it.""', ')', '}', 'else', '{', 'info_log_gl', ':=', 'gl', '.', 'GLStringAlloc', '(', 'gl', '.', 'Sizei', '(', 'info_log_length', '))', 'defer', 'gl', '.', 'GLStringFree', '(', 'info_log_gl', ')', 'gl', '.', 'GetProgramInfoLog', '(', 'prog', ',', 'gl', '.', 'Sizei', '(', 'info_log_length', '),', 'nil', ',', 'info_log_gl', ')', 'info_log', ':=', 'gl', '.', 'GoString', '(', 'info_log_gl', ')', 'panic', '(', 'info_log', ')', '}', '}', 'gl', '.', 'UseProgram', '(', 'prog', ')', 'attrib_vpos', ':=', 'gl', '.', 'Uint', '(', 'gl', '.', 'GetAttribLocation', '(', 'prog', ',', 'gl', '.', 'GLString', '(', '""vpos""', ')))', '//=================================================================', '// One triangle.', 'positions', ':=', '[...]', 'gl', '.', 'Float', '{-.', '5', ',', '-.', '5', ',', '0', ',', '.', '5', ',', '-.', '5', ',', '0', ',', '0', ',', '.', '5', ',', '0', '}', 'var', 'vao', 'gl', '.', 'Uint', 'gl', '.', 'GenVertexArrays', '(', '1', ',', '&', 'vao', ')', 'gl', '.', 'BindVertexArray', '(', 'vao', ')', 'var', 'vbo', 'gl', '.', 'Uint', 'gl', '.', 'GenBuffers', '(', '1', ',', '&', 'vbo', ')', 'gl', '.', 'BindBuffer', '(', 'gl', '.', 'ARRAY_BUFFER', ',', 'vbo', ')', 'gl', '.', 'BufferData', '(', 'gl', '.', 'ARRAY_BUFFER', ',', 'gl', '.', 'Sizeiptr', '(', 'unsafe', '.', 'Sizeof', '(', 'positions', ')),', 'gl', '.', 'Pointer', '(&', 'positions', '[', '0', ']),', 'gl', '.', 'STATIC_DRAW', ')', 'gl', '.', 'EnableVertexAttribArray', '(', 'attrib_vpos', ')', 'gl', '.', 'VertexAttribPointer', '(', 'attrib_vpos', ',', '3', ',', 'gl', '.', 'FLOAT', ',', 'gl', '.', 'FALSE', ',', '0', ',', 'gl', '.', 'Pointer', '(', 'nil', '))', '//=================================================================', 'Loop', '(', 'prog', ')', 'fmt', '.', 'Println', '(', '""Good frames""', ',', 'go', 'od_frames', ')', 'fmt', '.', 'Println', '(', '""Bad frames ""', ',', 'bad_frames', ')', 'fmt', '.', 'Println', '(', '""SDL events ""', ',', 'sdl_events', ')', '}', 'func', 'Loop', '(', 'program', 'gl', '.', 'Uint', ')', '{', 'start_time', ':=', 'time', '.', 'Now', '()', 'ticker', ':=', 'time', '.', 'NewTicker', '(', '100', '*', 'time', '.', 'Millisecond', ')', 'defer', 'ticker', '.', 'Stop', '()', 'running', ':=', 'true', 'for', 'running', '{', 'select', '{', 'case', 'tick_time', ':=', '<-', 'ticker', '.', 'C', ':', 'OnTick', '(', 'start_time', ',', 'tick_time', ',', 'program', ')', 'case', 'event', ':=', '<-', 'sdl', '.', 'Events', ':', 'running', '=', 'OnSdlEvent', '(', 'event', ')', '}', '}', '}', 'func', 'OnSdlEvent', '(', 'event', 'interface', '{})', 'bool', '{', 'sdl_events', '++', 'switch', 'event', '.(', 'type', ')', '{', 'case', 'sdl', '.', 'QuitEvent', ':', 'return', 'false', '// Stop the main loop.', '}', 'return', 'true', '// Do not stop the main loop.', '}', 'func', 'OnTick', '(', 'start_time', ',', 'tick_time', 'time', '.', 'Time', ',', 'program', 'gl', '.', 'Uint', ')', '{', 'duration', ':=', 'tick_time', '.', 'Sub', '(', 'start_time', ').', 'Seconds', '()', 'speed', ':=', '10', '.', 'angle', ':=', 'math', '.', 'Mod', '(', 'duration', '*', 'speed', ',', '360', ')', 'go', 'm', ':=', 'RotZ', '(', 'angle', ')', 'MVP', ':=', 'ToGlMatrix', '(', 'go', 'm', ')', '*', 'HERE', ',', 'SOMETHING', 'FISHY', 'HAPPENS', '.', 'Problem', ':', 'sometimes', ',', 'actually', 'often', ',', 'OpenGl', 'return', 's', '0', 'instead', 'of', '-', '1', 'for', 'the', 'dummy', 'parameter', '.', 'This', 'is', 'entirely', 'correlated', 'to', 'the', 'stuttering', '.', 'With', 'my', 'implementation', 'of', 'OpenGl', ',', 'swap', 'buffer', 'does', 'a', 'real', 'swap', '.', 'That', 'means', 'I', 'get', 'to', 'see', 'the', 'last', 'two', 'pictures', 'rendered', '.', 'Thing', 'is', ',', 'I', 'can', 'see', 'the', 'swap', ',', 'that', 'means', 'the', 'pictures', 'are', 'different', '.', 'That', 'means', 'that', 'the', 'call', 'to', 'DrawArrays', 'is', 'ignored', '.', 'OpenGl', 'is', 'just', 'crapping', 'its', 'pants', '.', '*', 'matrix_loc', ':=', 'gl', '.', 'GetUniformLocation', '(', 'program', ',', 'gl', '.', 'GLString', '(', '""MVP""', '))', 'dummy_matrix_loc', ':=', 'gl', '.', 'GetUniformLocation', '(', 'program', ',', 'gl', '.', 'GLString', '(', '""dummy""', '))', 'if', 'gl', '.', 'GetError', '()', '!=', 'gl', '.', 'NO_ERROR', '{', 'fmt', '.', 'Println', '(', '""Error get location""', ')', '// Never happens.', '}', 'if', 'dummy_matrix_loc', '==', '-', '1', '{', 'go', 'od_frames', '++', '// Because is SHOULD fail.', '}', 'else', '{', 'bad_frames', '++', ""// That's not normal."", '}', 'gl', '.', 'UniformMatrix4fv', '(', 'matrix_loc', ',', '16', ',', 'gl', '.', 'TRUE', ',', '&', 'MVP', '[', '0', '])', 'if', 'gl', '.', 'GetError', '()', '!=', 'gl', '.', 'NO_ERROR', '{', 'fmt', '.', 'Println', '(', '""Error send matrix""', ')', '// Never happens.', '}', 'gl', '.', 'Clear', '(', 'gl', '.', 'COLOR_BUFFER_BIT', '|', 'gl', '.', 'DEPTH_BUFFER_BIT', ')', 'if', 'gl', '.', 'GetError', '()', '!=', 'gl', '.', 'NO_ERROR', '{', 'fmt', '.', 'Println', '(', '""Error clearing""', ')', '// Never happens.', '}', 'gl', '.', 'DrawArrays', '(', 'gl', '.', 'TRIANGLES', ',', '0', ',', '3', ')', 'if', 'gl', '.', 'GetError', '()', '!=', 'gl', '.', 'NO_ERROR', '{', 'fmt', '.', 'Println', '(', '""Error drawing""', ')', '// Never happens.', '}', 'gl', '.', 'Finish', '()', '// Does not seem to make anything work better.', 'sdl', '.', 'GL_SwapBuffers', '()', '}', 'func', 'RotZ', '(', 'angle', 'float64', ')', 'GoMatrix', '{', 'var', 'go', 'm', 'GoMatrix', 'a', ':=', 'angle', '*', 'DEG_TO_RAD', 'c', ':=', 'math', '.', 'Cos', '(', 'a', ')', 's', ':=', 'math', '.', 'Sin', '(', 'a', ')', 'go', 'm', '[', '0', ']', '=', 'c', 'go', 'm', '[', '1', ']', '=', 's', 'go', 'm', '[', '4', ']', '=', '-', 's', 'go', 'm', '[', '5', ']', '=', 'c', 'go', 'm', '[', '10', ']', '=', '1', 'go', 'm', '[', '15', ']', '=', '1', 'return', 'go', 'm', '}', 'func', 'ToGlMatrix', '(', 'go', 'm', 'GoMatrix', ')', 'GlMatrix', '{', 'var', 'glm', 'GlMatrix', 'glm', '[', '0', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '0', '])', 'glm', '[', '1', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '1', '])', 'glm', '[', '2', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '2', '])', 'glm', '[', '3', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '3', '])', 'glm', '[', '4', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '4', '])', 'glm', '[', '5', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '5', '])', 'glm', '[', '6', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '6', '])', 'glm', '[', '7', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '7', '])', 'glm', '[', '8', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '8', '])', 'glm', '[', '9', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '9', '])', 'glm', '[', '10', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '10', '])', 'glm', '[', '11', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '11', '])', 'glm', '[', '12', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '12', '])', 'glm', '[', '13', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '13', '])', 'glm', '[', '14', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '14', '])', 'glm', '[', '15', ']', '=', 'gl', '.', 'Float', '(', 'go', 'm', '[', '15', '])', 'return', 'glm', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'identifier', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'decimal_literal', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'operator', 'comment', '=================================================================', 'comment', 'Just', 'opening', 'a', 'window', ',', 'skip', 'to', 'the', 'next', 'part', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '=================================================================', 'comment', 'Simplest', 'shaders', 'ever', '.', 'comment', 'A', 'matrix', 'to', 'move', 'the', 'model', ',', 'nothing', 'else', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'decimal_literal', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'operator', 'comment', 'Everything', 'is', 'red', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'decimal_literal', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Did', 'it', 'compile', '?', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', '=================================================================', 'comment', 'One', 'triangle', '.', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', '=================================================================', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'comment', 'Stop', 'the', 'main', 'loop', '.', 'operator', 'keyword', 'identifier', 'comment', 'Do', 'not', 'stop', 'the', 'main', 'loop', '.', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'decimal_literal', 'identifier', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Never', 'happens', '.', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'comment', 'Because', 'is', 'SHOULD', 'fail', '.', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'comment', 'That', ""'s"", 'not', 'normal', '.', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Never', 'happens', '.', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Never', 'happens', '.', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Never', 'happens', '.', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Does', 'not', 'seem', 'to', 'make', 'anything', 'work', 'better', '.', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'keyword', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator']",14732354
9,"func Loop(program gl.Uint) {
    start_time := time.Now()
    stop_time := start_time.Add(time.Duration(30 * time.Second))
    running := true
    for running {
        tick_time := time.Now()
        OnTick(start_time, tick_time, program)
        time.Sleep(10 * time.Millisecond)
        if tick_time.After(stop_time) {
            running = false
        }
    }
}","['func', 'Loop', '(', 'program', 'gl', '.', 'Uint', ')', '{', 'start_time', ':=', 'time', '.', 'Now', '()', 'stop_time', ':=', 'start_time', '.', 'Add', '(', 'time', '.', 'Duration', '(', '30', '*', 'time', '.', 'Second', '))', 'running', ':=', 'true', 'for', 'running', '{', 'tick_time', ':=', 'time', '.', 'Now', '()', 'OnTick', '(', 'start_time', ',', 'tick_time', ',', 'program', ')', 'time', '.', 'Sleep', '(', '10', '*', 'time', '.', 'Millisecond', ')', 'if', 'tick_time', '.', 'After', '(', 'stop_time', ')', '{', 'running', '=', 'false', '}', '}', '}']","['keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator']",14732354
10,"package main

import (
    ""net""
    ""os""
    ""bufio""
    ""fmt""
    ""time""
)

func AcceptConnections(listener net.Listener, console <- chan string) {

    msg := """"

    for {

        conn, err := listener.Accept()

        if err != nil {
            panic(err)
        }

        fmt.Printf(""client connected\n"")

        for {

            if msg == """" {
                msg = <- console
                fmt.Printf(""read from console: %s"", msg)
            }

            err = conn.SetWriteDeadline(time.Now().Add(time.Second))

            if err != nil {
                fmt.Printf(""SetWriteDeadline failed: %v\n"", err)
            }

            _, err = conn.Write([]byte(msg))

            if err != nil {
                // expecting an error after sending a message
                // to a non-existing client endpoint
                fmt.Printf(""failed sending a message to network: %v\n"", err)
                break
            } else {
                fmt.Printf(""msg sent: %s"", msg)
                msg = """"
            }
        }
    }
}

func ReadConsole(network chan <- string) {

    console := bufio.NewReader(os.Stdin)

    for {

        line, err := console.ReadString('\n')

        if err != nil {

            panic(err)

        } else {

            network <- line
        }
    }
}

func main() {

    listener, err := net.Listen(""tcp"", ""localhost:6666"")

    if err != nil {
        panic(err)
    }

    println(""listening on "" + listener.Addr().String())

    consoleToNetwork := make(chan string)

    go AcceptConnections(listener, consoleToNetwork)

    ReadConsole(consoleToNetwork)
}","['package', 'main', 'import', '(', '""net""', '""os""', '""bufio""', '""fmt""', '""time""', ')', 'func', 'AcceptConnections', '(', 'listener', 'net', '.', 'Listener', ',', 'console', '<-', 'chan', 'string', ')', '{', 'msg', ':=', '""""', 'for', '{', 'conn', ',', 'err', ':=', 'listener', '.', 'Accept', '()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'fmt', '.', 'Printf', '(', '""client connected\\n""', ')', 'for', '{', 'if', 'msg', '==', '""""', '{', 'msg', '=', '<-', 'console', 'fmt', '.', 'Printf', '(', '""read from console: %s""', ',', 'msg', ')', '}', 'err', '=', 'conn', '.', 'SetWriteDeadline', '(', 'time', '.', 'Now', '().', 'Add', '(', 'time', '.', 'Second', '))', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""SetWriteDeadline failed: %v\\n""', ',', 'err', ')', '}', '_', ',', 'err', '=', 'conn', '.', 'Write', '([]', 'byte', '(', 'msg', '))', 'if', 'err', '!=', 'nil', '{', '// expecting an error after sending a message', '// to a non-existing client endpoint', 'fmt', '.', 'Printf', '(', '""failed sending a message to network: %v\\n""', ',', 'err', ')', 'break', '}', 'else', '{', 'fmt', '.', 'Printf', '(', '""msg sent: %s""', ',', 'msg', ')', 'msg', '=', '""""', '}', '}', '}', '}', 'func', 'ReadConsole', '(', 'network', 'chan', '<-', 'string', ')', '{', 'console', ':=', 'bufio', '.', 'NewReader', '(', 'os', '.', 'Stdin', ')', 'for', '{', 'line', ',', 'err', ':=', 'console', '.', 'ReadString', '(', 'n', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'else', '{', 'network', '<-', 'line', '}', '}', '}', 'func', 'main', '()', '{', 'listener', ',', 'err', ':=', 'net', '.', 'Listen', '(', '""tcp"", ""localhost:6666""', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'println', '(', '""listening on ""', '+', 'listener', '.', 'Addr', '().', 'String', '())', 'consoleToNetwork', ':=', 'make', '(', 'chan', 'string', ')', 'go', 'AcceptConnections', '(', 'listener', ',', 'consoleToNetwork', ')', 'ReadConsole', '(', 'consoleToNetwork', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'expecting', 'an', 'error', 'after', 'sending', 'a', 'message', 'comment', 'to', 'a', 'non-existing', 'client', 'endpoint', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",15067286
11,"package main

import (
    ""net""
    ""os""
    ""io""
    //""bufio""
    //""fmt""
)

func cp(dst io.Writer, src io.Reader, errc chan<- error) {

    // -reads from src and writes to dst
    // -blocks until EOF
    // -EOF is not an error
    _, err :=  io.Copy(dst, src)

    // push err to the channel when io.Copy returns
    errc <- err
}

func StartCommunication(conn net.Conn) {

    //create a channel for errors
    errc := make(chan error)

    //read connection and print to console
    go cp(os.Stdout, conn, errc)

    //read user input and write to connection
    go cp(conn, os.Stdin, errc)

    //wait until nil or an error arrives
    err := <- errc

    if err != nil {
        println(""cp error: "", err.Error())
    }
}

func main() {

    servAddr := ""localhost:6666""

    tcpAddr, err := net.ResolveTCPAddr(""tcp"", servAddr)

    if err != nil {
        println(""ResolveTCPAddr failed:"", err.Error())
        os.Exit(1)
    }

    conn, err := net.DialTCP(""tcp"", nil, tcpAddr)

    if err != nil {
        println(""net.DialTCP failed:"", err.Error())
        os.Exit(1)
    }

    defer conn.Close()

    StartCommunication(conn)

}","['package', 'main', 'import', '(', '""net""', '""os""', '""io""', '//""bufio""', '//""fmt""', ')', 'func', 'cp', '(', 'dst', 'io', '.', 'Writer', ',', 'src', 'io', '.', 'Reader', ',', 'errc', 'chan', '<-', 'error', ')', '{', '// -reads from src and writes to dst', '// -blocks until EOF', '// -EOF is not an error', '_', ',', 'err', ':=', 'io', '.', 'Copy', '(', 'dst', ',', 'src', ')', '// push err to the channel when io.Copy returns', 'errc', '<-', 'err', '}', 'func', 'StartCommunication', '(', 'conn', 'net', '.', 'Conn', ')', '{', '//create a channel for errors', 'errc', ':=', 'make', '(', 'chan', 'error', ')', '//read connection and print to console', 'go', 'cp', '(', 'os', '.', 'Stdout', ',', 'conn', ',', 'errc', ')', '//read user input and write to connection', 'go', 'cp', '(', 'conn', ',', 'os', '.', 'Stdin', ',', 'errc', ')', '//wait until nil or an error arrives', 'err', ':=', '<-', 'errc', 'if', 'err', '!=', 'nil', '{', 'println', '(', '""cp error: ""', ',', 'err', '.', 'Error', '())', '}', '}', 'func', 'main', '()', '{', 'servAddr', ':=', '""localhost:6666""', 'tcpAddr', ',', 'err', ':=', 'net', '.', 'ResolveTCPAddr', '(', '""tcp""', ',', 'servAddr', ')', 'if', 'err', '!=', 'nil', '{', 'println', '(', '""ResolveTCPAddr failed:""', ',', 'err', '.', 'Error', '())', 'os', '.', 'Exit', '(', '1', ')', '}', 'conn', ',', 'err', ':=', 'net', '.', 'DialTCP', '(', '""tcp""', ',', 'nil', ',', 'tcpAddr', ')', 'if', 'err', '!=', 'nil', '{', 'println', '(', '""net.DialTCP failed:""', ',', 'err', '.', 'Error', '())', 'os', '.', 'Exit', '(', '1', ')', '}', 'defer', 'conn', '.', 'Close', '()', 'StartCommunication', '(', 'conn', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'comment', '``', 'bufio', ""''"", 'comment', '``', 'fmt', ""''"", 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'comment', '-reads', 'from', 'src', 'and', 'writes', 'to', 'dst', 'comment', '-blocks', 'until', 'EOF', 'comment', '-EOF', 'is', 'not', 'an', 'error', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'push', 'err', 'to', 'the', 'channel', 'when', 'io.Copy', 'returns', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'create', 'a', 'channel', 'for', 'errors', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'comment', 'read', 'connection', 'and', 'print', 'to', 'console', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'read', 'user', 'input', 'and', 'write', 'to', 'connection', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'wait', 'until', 'nil', 'or', 'an', 'error', 'arrives', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",15067286
12,"package main

import (
    ""net""
    ""os""
    ""bufio""
    ""fmt""
)

type Connection struct {
    IsFaulted bool
    Conn net.Conn
}

func StartWritingToNetwork(connWrap * Connection, errChannel chan <- error, msgStack chan string) {

    for {

        msg := <- msgStack

        if connWrap.IsFaulted {

            //put it back for another connection
            msgStack <- msg

            return
        }

        _, err := connWrap.Conn.Write([]byte(msg))

        if err != nil {

            fmt.Printf(""failed sending a message to network: %v\n"", err)

            connWrap.IsFaulted = true

            msgStack <- msg

            errChannel <- err

            return

        } else {

            fmt.Printf(""msg sent: %s"", msg)
        }
    }
}

func StartReadingFromNetwork(connWrap * Connection, errChannel chan <- error){

    network := bufio.NewReader(connWrap.Conn)

    for (!connWrap.IsFaulted) {

        line, err := network.ReadString('\n')

        if err != nil {

            fmt.Printf(""failed reading from network: %v\n"", err)

            connWrap.IsFaulted = true

            errChannel <- err

        } else {

            fmt.Printf(""%s"", line)
        }
    }
}

func AcceptConnections(listener net.Listener, console chan string) {

    errChannel := make(chan error)

    for {

        conn, err := listener.Accept()

        if err != nil {
            panic(err)
        }

        fmt.Printf(""client connected\n"")

        connWrap := Connection{false, conn}

        go StartReadingFromNetwork(&connWrap, errChannel)

        go StartWritingToNetwork(&connWrap, errChannel, console)

        //block until an error occurs
        <- errChannel
    }
}

func ReadConsole(network chan <- string) {

    console := bufio.NewReader(os.Stdin)

    for {

        line, err := console.ReadString('\n')

        if err != nil {

            panic(err)

        } else {

            network <- line
        }
    }
}

func main() {

    listener, err := net.Listen(""tcp"", ""localhost:6666"")

    if err != nil {
        panic(err)
    }

    println(""listening on "" + listener.Addr().String())

    consoleToNetwork := make(chan string)

    go AcceptConnections(listener, consoleToNetwork)

    ReadConsole(consoleToNetwork)
}","['package', 'main', 'import', '(', '""net""', '""os""', '""bufio""', '""fmt""', ')', 'type', 'Connection', 'struct', '{', 'IsFaulted', 'bool', 'Conn', 'net', '.', 'Conn', '}', 'func', 'StartWritingToNetwork', '(', 'connWrap', '*', 'Connection', ',', 'errChannel', 'chan', '<-', 'error', ',', 'msgStack', 'chan', 'string', ')', '{', 'for', '{', 'msg', ':=', '<-', 'msgStack', 'if', 'connWrap', '.', 'IsFaulted', '{', '//put it back for another connection', 'msgStack', '<-', 'msg', 'return', '}', '_', ',', 'err', ':=', 'connWrap', '.', 'Conn', '.', 'Write', '([]', 'byte', '(', 'msg', '))', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""failed sending a message to network: %v\\n""', ',', 'err', ')', 'connWrap', '.', 'IsFaulted', '=', 'true', 'msgStack', '<-', 'msg', 'errChannel', '<-', 'err', 'return', '}', 'else', '{', 'fmt', '.', 'Printf', '(', '""msg sent: %s""', ',', 'msg', ')', '}', '}', '}', 'func', 'StartReadingFromNetwork', '(', 'connWrap', '*', 'Connection', ',', 'errChannel', 'chan', '<-', 'error', '){', 'network', ':=', 'bufio', '.', 'NewReader', '(', 'connWrap', '.', 'Conn', ')', 'for', '(!', 'connWrap', '.', 'IsFaulted', ')', '{', 'line', ',', 'err', ':=', 'network', '.', 'ReadString', '(', 'n', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""failed reading from network: %v\\n""', ',', 'err', ')', 'connWrap', '.', 'IsFaulted', '=', 'true', 'errChannel', '<-', 'err', '}', 'else', '{', 'fmt', '.', 'Printf', '(', '""%s""', ',', 'line', ')', '}', '}', '}', 'func', 'AcceptConnections', '(', 'listener', 'net', '.', 'Listener', ',', 'console', 'chan', 'string', ')', '{', 'errChannel', ':=', 'make', '(', 'chan', 'error', ')', 'for', '{', 'conn', ',', 'err', ':=', 'listener', '.', 'Accept', '()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'fmt', '.', 'Printf', '(', '""client connected\\n""', ')', 'connWrap', ':=', 'Connection', '{', 'false', ',', 'conn', '}', 'go', 'StartReadingFromNetwork', '(&', 'connWrap', ',', 'errChannel', ')', 'go', 'StartWritingToNetwork', '(&', 'connWrap', ',', 'errChannel', ',', 'console', ')', '//block until an error occurs', '<-', 'errChannel', '}', '}', 'func', 'ReadConsole', '(', 'network', 'chan', '<-', 'string', ')', '{', 'console', ':=', 'bufio', '.', 'NewReader', '(', 'os', '.', 'Stdin', ')', 'for', '{', 'line', ',', 'err', ':=', 'console', '.', 'ReadString', '(', 'n', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'else', '{', 'network', '<-', 'line', '}', '}', '}', 'func', 'main', '()', '{', 'listener', ',', 'err', ':=', 'net', '.', 'Listen', '(', '""tcp"", ""localhost:6666""', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'println', '(', '""listening on ""', '+', 'listener', '.', 'Addr', '().', 'String', '())', 'consoleToNetwork', ':=', 'make', '(', 'chan', 'string', ')', 'go', 'AcceptConnections', '(', 'listener', ',', 'consoleToNetwork', ')', 'ReadConsole', '(', 'consoleToNetwork', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'put', 'it', 'back', 'for', 'another', 'connection', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'block', 'until', 'an', 'error', 'occurs', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",15067286
13,"package main

import (
        ""fmt""
        ""runtime""
        ""unsafe""
)

func Alloc() uint64 {
        var stats runtime.MemStats
        runtime.GC()
        runtime.ReadMemStats(&stats)
        return stats.Alloc - uint64(unsafe.Sizeof(hs[0]))*uint64(cap(hs))
}

var hs = []*map[int16]byte{}

func main() {
        hs := []*map[int16]byte{}
        n := 1000
        before := Alloc()
        for i := 0; i < n; i++ {
                h := map[int16]byte{}
                hs = append(hs, &h)
        }
        after := Alloc()
        emptyPerMap := float64(after-before) / float64(n)
        fmt.Printf(""Bytes used for %d empty maps: %d, bytes/map %.1f\n"", n, after-before, emptyPerMap)
        hs = nil

        k := 1
        for p := 1; p < 16; p++ {
                before = Alloc()
                for i := 0; i < n; i++ {
                        h := map[int16]byte{}
                        for j := 0; j < k; j++ {
                                h[int16(j)] = byte(j)
                        }
                        hs = append(hs, &h)
                }
                after = Alloc()
                fullPerMap := float64(after-before) / float64(n)
                fmt.Printf(""Bytes used for %d maps with %d entries: %d, bytes/map %.1f\n"", n, k, after-before, fullPerMap)
                fmt.Printf(""Bytes per entry %.1f\n"", (fullPerMap-emptyPerMap)/float64(k))
                k *= 2
        }

}","['package', 'main', 'import', '(', '""fmt""', '""runtime""', '""unsafe""', ')', 'func', 'Alloc', '()', 'uint64', '{', 'var', 'stats', 'runtime', '.', 'MemStats', 'runtime', '.', 'GC', '()', 'runtime', '.', 'ReadMemStats', '(&', 'stats', ')', 'return', 'stats', '.', 'Alloc', '-', 'uint64', '(', 'unsafe', '.', 'Sizeof', '(', 'hs', '[', '0', ']))*', 'uint64', '(', 'cap', '(', 'hs', '))', '}', 'var', 'hs', '=', '[]*', 'map', '[', 'int16', ']', 'byte', '{}', 'func', 'main', '()', '{', 'hs', ':=', '[]*', 'map', '[', 'int16', ']', 'byte', '{}', 'n', ':=', '1000', 'before', ':=', 'Alloc', '()', 'for', 'i', ':=', '0', ';', 'i', '<', 'n', ';', 'i', '++', '{', 'h', ':=', 'map', '[', 'int16', ']', 'byte', '{}', 'hs', '=', 'append', '(', 'hs', ',', '&', 'h', ')', '}', 'after', ':=', 'Alloc', '()', 'emptyPerMap', ':=', 'float64', '(', 'after', '-', 'before', ')', 'float64', '(', 'n', ')', 'fmt', '.', 'Printf', '(', '""Bytes used for %d empty maps: %d, bytes/map %.1f\\n""', ',', 'n', ',', 'after', '-', 'before', ',', 'emptyPerMap', ')', 'hs', '=', 'nil', 'k', ':=', '1', 'for', 'p', ':=', '1', ';', 'p', '<', '16', ';', 'p', '++', '{', 'before', '=', 'Alloc', '()', 'for', 'i', ':=', '0', ';', 'i', '<', 'n', ';', 'i', '++', '{', 'h', ':=', 'map', '[', 'int16', ']', 'byte', '{}', 'for', 'j', ':=', '0', ';', 'j', '<', 'k', ';', 'j', '++', '{', 'h', '[', 'int16', '(', 'j', ')]', '=', 'byte', '(', 'j', ')', '}', 'hs', '=', 'append', '(', 'hs', ',', '&', 'h', ')', '}', 'after', '=', 'Alloc', '()', 'fullPerMap', ':=', 'float64', '(', 'after', '-', 'before', ')', 'float64', '(', 'n', ')', 'fmt', '.', 'Printf', '(', '""Bytes used for %d maps with %d entries: %d, bytes/map %.1f\\n""', ',', 'n', ',', 'k', ',', 'after', '-', 'before', ',', 'fullPerMap', ')', 'fmt', '.', 'Printf', '(', '""Bytes per entry %.1f\\n""', ',', '(', 'fullPerMap', '-', 'emptyPerMap', ')', 'float64', '(', 'k', '))', 'k', '*=', '2', '}', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator']",15314845
14,"package main

import (
    ""bytes""
    ""database/sql""
    ""flag""
    ""fmt""
    _ ""github.com/Go-SQL-Driver/MySQL""
    ""ijinshan.com/cfg""
    ""log""
    ""net""
    ""net/http""
    ""net/smtp""
    ""os""
    ""strconv""
    ""strings""
    ""sync""
    ""time""
)

var (
    Log           *log.Logger
    Conf          cfg.KVConfig
    Debug         bool
    CpuCore       int
    HttpTransport = &http.Transport{
        Dial: func(netw, addr string) (net.Conn, error) {
            deadline := time.Now().Add(30 * time.Second)
            c, err := net.DialTimeout(netw, addr, 20*time.Second)
            if err != nil {
                return nil, err
            }

            c.SetDeadline(deadline)
            return c, nil
        },
        DisableKeepAlives: true,
    }
    HttpClient = &http.Client{
        Transport: HttpTransport,
    }
    WG            sync.WaitGroup
)

const (
    LogFileFlag   = os.O_WRONLY | os.O_CREATE | os.O_APPEND
    LogFileMode   = 0644
    LogFlag       = log.LstdFlags | log.Lshortfile
    GET_VIDEO_SQL = `SELECT B.Name, A.TSID, A.Chapter, A.ChapterNum, 
    IFNULL(A.Website, ''), IFNULL(A.Descr, ''), 
    IFNULL(A.VideoId, ''), IFNULL(AndroidWebURL, ''), IFNULL(IOSWebURL, ''), 
    IFNULL(AndroidURL, ''), IFNULL(AndroidURL2, ''), IFNULL(IOSURL, '')
    FROM Video A INNER JOIN TVS B ON A.TSID = B.ID LIMIT 200`

    HtmlHead = `节目名
    tsid章节章节号描述
    videoid网站地址`
    HtmlTail = """"
)

type videoInfo struct {
    name          string
    tsid          uint
    chapter       string
    chapterNum    uint
    descr         string
    videoId       string
    website       string
    androidWebUrl string
    iosWebUrl     string
    androidUrl    string
    androidUrl2   string
    iosUrl        string
}

func init() {
    var (
        confFile string
        err      error
    )

    // parse command argument:w
    flag.StringVar(&confFile, ""c"", ""./vsmonitor.conf"", "" set config file path"")
    flag.Parse()
    // read config
    if Conf, err = cfg.Read(confFile); err != nil {
        panic(fmt.Sprintf(""Read config file \""%s\"" failed (%s)"",
            confFile, err.Error()))
    }
    // open log file
    file, err := os.OpenFile(Conf[""log.file""], LogFileFlag, LogFileMode)
    if err != nil {
        panic(fmt.Sprintf(""OpenFile \""%s\"" failed (%s)"", Conf[""log.file""],
            err.Error()))
    }
    // init LOG
    Log = log.New(file, """", LogFlag)
    Debug = false
    i, err := strconv.ParseInt(Conf[""cpucore.num""], 10, 32)
    if err != nil {
        panic(fmt.Sprintf(""ParseInt \""%s\"" failed (%s)"", Conf[""cpucore.num""],
            err.Error()))
    }

    CpuCore = int(i)
}

func getHttpStatusCode(url string) int {
    if url == """" {
        return 200
    }

    req, err := http.NewRequest(""GET"", url, nil)
    if err != nil {
        return 0
    }

    req.Header.Add(""User-Agent"", ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17"")
    req.Header.Add(""Connection"", ""close"")
    resp, err := HttpClient.Do(req)
    if err != nil {
        return 0
    }

    defer resp.Body.Close()
    return resp.StatusCode
}

func sendMail(host, user, pwd, from, to, subject, body, mailType string) error {
    auth := smtp.PlainAuth("""", user, pwd, strings.Split(host, "":"")[0])
    cntType := fmt.Sprintf(""Content-Type: text/%s;charset=UTF-8"", mailType)
    msg := fmt.Sprintf(""To: %s\r\nFrom: %s\r\nSubject: %s\r\n%s\r\n\r\n%s"",
        to, from, user, subject, cntType, body)

    return smtp.SendMail(host, auth, user, strings.Split(to, "",""), []byte(msg))
}

func getVideos(videoChan chan *videoInfo, htmlBuf *bytes.Buffer) error {
    defer HttpTransport.CloseIdleConnections()
    db, err := sql.Open(""mysql"", Conf[""weikan.mysql""])
    if err != nil {
        return err
    }

    rows, err := db.Query(GET_VIDEO_SQL)
    if err != nil {
        db.Close()
        return err
    }

    for rows.Next() {
        video := &videoInfo{}
        err = rows.Scan(&video.name, &video.tsid, &video.chapter,
            &video.chapterNum,
            &video.website, &video.descr, &video.videoId, &video.androidWebUrl,
            &video.iosWebUrl, &video.androidUrl, &video.androidUrl2,
            &video.iosUrl)
        if err != nil {
            db.Close()
            return err
        }

        videoChan <- video
        WG.Add(1)
    }

    db.Close()
    // wait check url finish
    WG.Wait()
    // send mail
    for {
        if htmlBuf.Len() == 0 {
            Log.Print(""no error found!!!!!!!!"")
            break
        }

        Log.Print(""found error !!!!!!!!"")
        /*
        err := sendMail(""smtp.gmail.com:587"", ""xxxx"",
            ""xxx"", ""xxx "",
            Conf[""mail.to""], ""xxxxx"",
            HtmlHead+htmlBuf.String()+HtmlTail, ""html"")
        if err != nil {
            Log.Printf(""sendMail failed (%s)"", err.Error())
            time.Sleep(10 * time.Second)
            continue
        }
        */

        Log.Print(""send mail"")
        break
    }

    Log.Print(""reset buf"")
    htmlBuf.Reset()
    return nil
}

func checkUrl(videoChan chan *videoInfo, errChan chan string) {
    defer func() {
        if err := recover(); err != nil {
            Log.Print(""rouintes failed : "", err)
        }
    }()

    for {
        video := <-videoChan
        ok := true
        errUrl := """"

        if code := getHttpStatusCode(video.androidWebUrl); code >= 400 {
            errUrl += fmt.Sprintf(""%s (%d)"",
                video.androidWebUrl, code)
            ok = false
        }

        if code := getHttpStatusCode(video.iosWebUrl); code >= 400 {
            errUrl += fmt.Sprintf(""%s (%d)"",
                video.iosWebUrl, code)
            ok = false
        }

        if code := getHttpStatusCode(video.androidUrl); code >= 400 {
            errUrl += fmt.Sprintf(""%s (%d)"",
                video.androidUrl, code)
            ok = false
        }

        if code := getHttpStatusCode(video.androidUrl2); code >= 400 {
            errUrl += fmt.Sprintf(""%s (%d)"",
                video.androidUrl2, code)
            ok = false
        }

        if code := getHttpStatusCode(video.iosUrl); code >= 400 {
            errUrl += fmt.Sprintf(""%s (%d)"",
                video.iosUrl, code)
            ok = false
        }

        if !ok {
            errChan %s%d%s
            %d%s%s%s%s`,
                video.name, video.tsid, video.chapter, video.chapterNum,
                video.descr, video.videoId,
                video.website, errUrl)
            Log.Printf(""\""%s\"" (%s) —— \""%s\"" checkurl err"", video.name,
                video.chapter, video.descr)
        } else {
            Log.Printf(""\""%s\"" (%s) —— \""%s\"" checkurl ok"", video.name,
                video.chapter, video.descr)
            WG.Done()
        }
    }
}

func mergeErr(errChan chan string, htmlBuf *bytes.Buffer) {
    defer func() {
        if err := recover(); err != nil {
            Log.Print(""rouintes failed : "", err)
        }
    }()

    for {
        html := <-errChan
        _, err := htmlBuf.WriteString(html)
        if err != nil {
            Log.Printf(""htmlBuf WriteString \""%s\"" failed (%s)"", html,
                err.Error())
            panic(err)
        }

        WG.Done()
    }
}

func main() {
    videoChan := make(chan *videoInfo, 100000)
    errChan := make(chan string, 100000)
    htmlBuf := &bytes.Buffer{}
    defer func() {
        if err := recover(); err != nil {
            Log.Print(""rouintes failed : "", err)
        }
    }()

    // check url
    for i := 0; i < CpuCore; i++ {
        go checkUrl(videoChan, errChan)
    }
    // merge error string then send mail
    go mergeErr(errChan, htmlBuf)

    for {
        // get Video and LiveSrc video source
        if err := getVideos(videoChan, htmlBuf); err != nil {
            Log.Printf(""getVideos failed (%s)"", err.Error())
            time.Sleep(10 * time.Second)
            continue
        }

        // time.Sleep(1 * time.Hour)
    }

    Log.Print(""exit..."")
}","['package', 'main', 'import', '(', '""bytes""', '""database/sql""', '""flag""', '""fmt""', '_', '""github.com/Go-SQL-Driver/MySQL""', '""ijinshan.com/cfg""', '""log""', '""net""', '""net/http""', '""net/smtp""', '""os""', '""strconv""', '""strings""', '""sync""', '""time""', ')', 'var', '(', 'Log', '*', 'log', '.', 'Logger', 'Conf', 'cfg', '.', 'KVConfig', 'Debug', 'bool', 'CpuCore', 'int', 'HttpTransport', '=', '&', 'http', '.', 'Transport', '{', 'Dial', ':', 'func', '(', 'netw', ',', 'addr', 'string', ')', '(', 'net', '.', 'Conn', ',', 'error', ')', '{', 'deadline', ':=', 'time', '.', 'Now', '().', 'Add', '(', '30', '*', 'time', '.', 'Second', ')', 'c', ',', 'err', ':=', 'net', '.', 'DialTimeout', '(', 'netw', ',', 'addr', ',', '20', '*', 'time', '.', 'Second', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'c', '.', 'SetDeadline', '(', 'deadline', ')', 'return', 'c', ',', 'nil', '},', 'DisableKeepAlives', ':', 'true', ',', '}', 'HttpClient', '=', '&', 'http', '.', 'Client', '{', 'Transport', ':', 'HttpTransport', ',', '}', 'WG', 'sync', '.', 'WaitGroup', ')', 'const', '(', 'LogFileFlag', '=', 'os', '.', 'O_WRONLY', '|', 'os', '.', 'O_CREATE', '|', 'os', '.', 'O_APPEND', 'LogFileMode', '=', '0644', 'LogFlag', '=', 'log', '.', 'LstdFlags', '|', 'log', '.', 'Lshortfile', 'GET_VIDEO_SQL', '=', 'SELECT', 'B', '.', 'Name', ',', 'A', '.', 'TSID', ',', 'A', '.', 'Chapter', ',', 'A', '.', 'ChapterNum', ',', 'IFNULL', '(', 'A', '.', 'Website', ',', '),', 'IFNULL', '(', 'A', '.', 'Descr', ',', '),', 'IFNULL', '(', 'A', '.', 'VideoId', ',', '),', 'IFNULL', '(', 'AndroidWebURL', ',', '),', 'IFNULL', '(', 'IOSWebURL', ',', '),', 'IFNULL', '(', 'AndroidURL', ',', '),', 'IFNULL', '(', 'AndroidURL2', ',', '),', 'IFNULL', '(', 'IOSURL', ',', ')', 'FROM', 'Video', 'A', 'INNER', 'JOIN', 'TVS', 'B', 'ON', 'A', '.', 'TSID', '=', 'B', '.', 'ID', 'LIMIT', '200', 'HtmlHead', '=', 'tsid章节章节号描述', 'videoid网站地址', 'HtmlTail', '=', '""""', ')', 'type', 'videoInfo', 'struct', '{', 'name', 'string', 'tsid', 'uint', 'chapter', 'string', 'chapterNum', 'uint', 'descr', 'string', 'videoId', 'string', 'website', 'string', 'androidWebUrl', 'string', 'iosWebUrl', 'string', 'androidUrl', 'string', 'androidUrl2', 'string', 'iosUrl', 'string', '}', 'func', 'init', '()', '{', 'var', '(', 'confFile', 'string', 'err', 'error', ')', '// parse command argument:w', 'flag', '.', 'StringVar', '(&', 'confFile', ',', '""c"", ""./vsmonitor.conf"", "" set config file path""', ')', 'flag', '.', 'Parse', '()', '// read config', 'if', 'Conf', ',', 'err', '=', 'cfg', '.', 'Read', '(', 'confFile', ');', 'err', '!=', 'nil', '{', 'panic', '(', 'fmt', '.', 'Sprintf', '(', '""Read config file \\""%s\\"" failed (%s)""', ',', 'confFile', ',', 'err', '.', 'Error', '()))', '}', '// open log file', 'file', ',', 'err', ':=', 'os', '.', 'OpenFile', '(', 'Conf', '[', '""log.file""', '],', 'LogFileFlag', ',', 'LogFileMode', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'fmt', '.', 'Sprintf', '(', '""OpenFile \\""%s\\"" failed (%s)"", Conf[""log.file""', '],', 'err', '.', 'Error', '()))', '}', '// init LOG', 'Log', '=', 'log', '.', 'New', '(', 'file', ',', '""""', ',', 'LogFlag', ')', 'Debug', '=', 'false', 'i', ',', 'err', ':=', 'strconv', '.', 'ParseInt', '(', 'Conf', '[', '""cpucore.num""', '],', '10', ',', '32', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'fmt', '.', 'Sprintf', '(', '""ParseInt \\""%s\\"" failed (%s)"", Conf[""cpucore.num""', '],', 'err', '.', 'Error', '()))', '}', 'CpuCore', '=', 'int', '(', 'i', ')', '}', 'func', 'getHttpStatusCode', '(', 'url', 'string', ')', 'int', '{', 'if', 'url', '==', '""""', '{', 'return', '200', '}', 'req', ',', 'err', ':=', 'http', '.', 'NewRequest', '(', '""GET""', ',', 'url', ',', 'nil', ')', 'if', 'err', '!=', 'nil', '{', 'return', '0', '}', 'req', '.', 'Header', '.', 'Add', '(', '""User-Agent"", ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17""', ')', 'req', '.', 'Header', '.', 'Add', '(', '""Connection"", ""close""', ')', 'resp', ',', 'err', ':=', 'HttpClient', '.', 'Do', '(', 'req', ')', 'if', 'err', '!=', 'nil', '{', 'return', '0', '}', 'defer', 'resp', '.', 'Body', '.', 'Close', '()', 'return', 'resp', '.', 'StatusCode', '}', 'func', 'sendMail', '(', 'host', ',', 'user', ',', 'pwd', ',', 'from', ',', 'to', ',', 'subject', ',', 'body', ',', 'mailType', 'string', ')', 'error', '{', 'auth', ':=', 'smtp', '.', 'PlainAuth', '(', '"""", user, pwd, strings.Split(host, "":""', ')[', '0', '])', 'cntType', ':=', 'fmt', '.', 'Sprintf', '(', '""Content-Type: text/%s;charset=UTF-8""', ',', 'mailType', ')', 'msg', ':=', 'fmt', '.', 'Sprintf', '(', '""To: %s\\r\\nFrom: %s\\r\\nSubject: %s\\r\\n%s\\r\\n\\r\\n%s""', ',', 'to', ',', 'from', ',', 'user', ',', 'subject', ',', 'cntType', ',', 'body', ')', 'return', 'smtp', '.', 'SendMail', '(', 'host', ',', 'auth', ',', 'user', ',', 'strings', '.', 'Split', '(', 'to', ',', '"",""', '),', '[]', 'byte', '(', 'msg', '))', '}', 'func', 'getVideos', '(', 'videoChan', 'chan', '*', 'videoInfo', ',', 'htmlBuf', '*', 'bytes', '.', 'Buffer', ')', 'error', '{', 'defer', 'HttpTransport', '.', 'CloseIdleConnections', '()', 'db', ',', 'err', ':=', 'sql', '.', 'Open', '(', '""mysql"", Conf[""weikan.mysql""', '])', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'rows', ',', 'err', ':=', 'db', '.', 'Query', '(', 'GET_VIDEO_SQL', ')', 'if', 'err', '!=', 'nil', '{', 'db', '.', 'Close', '()', 'return', 'err', '}', 'for', 'rows', '.', 'Next', '()', '{', 'video', ':=', '&', 'videoInfo', '{}', 'err', '=', 'rows', '.', 'Scan', '(&', 'video', '.', 'name', ',', '&', 'video', '.', 'tsid', ',', '&', 'video', '.', 'chapter', ',', '&', 'video', '.', 'chapterNum', ',', '&', 'video', '.', 'website', ',', '&', 'video', '.', 'descr', ',', '&', 'video', '.', 'videoId', ',', '&', 'video', '.', 'androidWebUrl', ',', '&', 'video', '.', 'iosWebUrl', ',', '&', 'video', '.', 'androidUrl', ',', '&', 'video', '.', 'androidUrl2', ',', '&', 'video', '.', 'iosUrl', ')', 'if', 'err', '!=', 'nil', '{', 'db', '.', 'Close', '()', 'return', 'err', '}', 'videoChan', '<-', 'video', 'WG', '.', 'Add', '(', '1', ')', '}', 'db', '.', 'Close', '()', '// wait check url finish', 'WG', '.', 'Wait', '()', '// send mail', 'for', '{', 'if', 'htmlBuf', '.', 'Len', '()', '==', '0', '{', 'Log', '.', 'Print', '(', '""no error found!!!!!!!!""', ')', 'break', '}', 'Log', '.', 'Print', '(', '""found error !!!!!!!!""', ')', '*', 'err', ':=', 'sendMail', '(', '""smtp.gmail.com:587"", ""xxxx""', ',', '""xxx"", ""xxx ""', ',', 'Conf', '[', '""mail.to""], ""xxxxx""', ',', 'HtmlHead', '+', 'htmlBuf', '.', 'String', '()+', 'HtmlTail', ',', '""html""', ')', 'if', 'err', '!=', 'nil', '{', 'Log', '.', 'Printf', '(', '""sendMail failed (%s)""', ',', 'err', '.', 'Error', '())', 'time', '.', 'Sleep', '(', '10', '*', 'time', '.', 'Second', ')', 'continue', '}', '*', 'Log', '.', 'Print', '(', '""send mail""', ')', 'break', '}', 'Log', '.', 'Print', '(', '""reset buf""', ')', 'htmlBuf', '.', 'Reset', '()', 'return', 'nil', '}', 'func', 'checkUrl', '(', 'videoChan', 'chan', '*', 'videoInfo', ',', 'errChan', 'chan', 'string', ')', '{', 'defer', 'func', '()', '{', 'if', 'err', ':=', 'recover', '();', 'err', '!=', 'nil', '{', 'Log', '.', 'Print', '(', '""rouintes failed : ""', ',', 'err', ')', '}', '}()', 'for', '{', 'video', ':=', '<-', 'videoChan', 'ok', ':=', 'true', 'errUrl', ':=', '""""', 'if', 'code', ':=', 'getHttpStatusCode', '(', 'video', '.', 'androidWebUrl', ');', 'code', '>=', '400', '{', 'errUrl', '+=', 'fmt', '.', 'Sprintf', '(', '""%s (%d)""', ',', 'video', '.', 'androidWebUrl', ',', 'code', ')', 'ok', '=', 'false', '}', 'if', 'code', ':=', 'getHttpStatusCode', '(', 'video', '.', 'iosWebUrl', ');', 'code', '>=', '400', '{', 'errUrl', '+=', 'fmt', '.', 'Sprintf', '(', '""%s (%d)""', ',', 'video', '.', 'iosWebUrl', ',', 'code', ')', 'ok', '=', 'false', '}', 'if', 'code', ':=', 'getHttpStatusCode', '(', 'video', '.', 'androidUrl', ');', 'code', '>=', '400', '{', 'errUrl', '+=', 'fmt', '.', 'Sprintf', '(', '""%s (%d)""', ',', 'video', '.', 'androidUrl', ',', 'code', ')', 'ok', '=', 'false', '}', 'if', 'code', ':=', 'getHttpStatusCode', '(', 'video', '.', 'androidUrl2', ');', 'code', '>=', '400', '{', 'errUrl', '+=', 'fmt', '.', 'Sprintf', '(', '""%s (%d)""', ',', 'video', '.', 'androidUrl2', ',', 'code', ')', 'ok', '=', 'false', '}', 'if', 'code', ':=', 'getHttpStatusCode', '(', 'video', '.', 'iosUrl', ');', 'code', '>=', '400', '{', 'errUrl', '+=', 'fmt', '.', 'Sprintf', '(', '""%s (%d)""', ',', 'video', '.', 'iosUrl', ',', 'code', ')', 'ok', '=', 'false', '}', 'if', '!', 'ok', '{', 'errChan', 's', 'd', 's', 'd', 's', 's', 's', 's', ',', 'video', '.', 'name', ',', 'video', '.', 'tsid', ',', 'video', '.', 'chapter', ',', 'video', '.', 'chapterNum', ',', 'video', '.', 'descr', ',', 'video', '.', 'videoId', ',', 'video', '.', 'website', ',', 'errUrl', ')', 'Log', '.', 'Printf', '(', '""\\""%s\\"" (%s) —— \\""%s\\"" checkurl err""', ',', 'video', '.', 'name', ',', 'video', '.', 'chapter', ',', 'video', '.', 'descr', ')', '}', 'else', '{', 'Log', '.', 'Printf', '(', '""\\""%s\\"" (%s) —— \\""%s\\"" checkurl ok""', ',', 'video', '.', 'name', ',', 'video', '.', 'chapter', ',', 'video', '.', 'descr', ')', 'WG', '.', 'Done', '()', '}', '}', '}', 'func', 'mergeErr', '(', 'errChan', 'chan', 'string', ',', 'htmlBuf', '*', 'bytes', '.', 'Buffer', ')', '{', 'defer', 'func', '()', '{', 'if', 'err', ':=', 'recover', '();', 'err', '!=', 'nil', '{', 'Log', '.', 'Print', '(', '""rouintes failed : ""', ',', 'err', ')', '}', '}()', 'for', '{', 'html', ':=', '<-', 'errChan', '_', ',', 'err', ':=', 'htmlBuf', '.', 'WriteString', '(', 'html', ')', 'if', 'err', '!=', 'nil', '{', 'Log', '.', 'Printf', '(', '""htmlBuf WriteString \\""%s\\"" failed (%s)""', ',', 'html', ',', 'err', '.', 'Error', '())', 'panic', '(', 'err', ')', '}', 'WG', '.', 'Done', '()', '}', '}', 'func', 'main', '()', '{', 'videoChan', ':=', 'make', '(', 'chan', '*', 'videoInfo', ',', '100000', ')', 'errChan', ':=', 'make', '(', 'chan', 'string', ',', '100000', ')', 'htmlBuf', ':=', '&', 'bytes', '.', 'Buffer', '{}', 'defer', 'func', '()', '{', 'if', 'err', ':=', 'recover', '();', 'err', '!=', 'nil', '{', 'Log', '.', 'Print', '(', '""rouintes failed : ""', ',', 'err', ')', '}', '}()', '// check url', 'for', 'i', ':=', '0', ';', 'i', '<', 'CpuCore', ';', 'i', '++', '{', 'go', 'checkUrl', '(', 'videoChan', ',', 'errChan', ')', '}', '// merge error string then send mail', 'go', 'mergeErr', '(', 'errChan', ',', 'htmlBuf', ')', 'for', '{', '// get Video and LiveSrc video source', 'if', 'err', ':=', 'getVideos', '(', 'videoChan', ',', 'htmlBuf', ');', 'err', '!=', 'nil', '{', 'Log', '.', 'Printf', '(', '""getVideos failed (%s)""', ',', 'err', '.', 'Error', '())', 'time', '.', 'Sleep', '(', '10', '*', 'time', '.', 'Second', ')', 'continue', '}', '// time.Sleep(1 * time.Hour)', '}', 'Log', '.', 'Print', '(', '""exit...""', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'identifier', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'decimal_literal', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'comment', 'parse', 'command', 'argument', ':', 'w', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'read', 'config', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'open', 'log', 'file', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'init', 'LOG', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'wait', 'check', 'url', 'finish', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'send', 'mail', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'comment', 'check', 'url', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'merge', 'error', 'string', 'then', 'send', 'mail', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'get', 'Video', 'and', 'LiveSrc', 'video', 'source', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'time.Sleep', '(', '1', '*', 'time.Hour', ')', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']",15674709
15,"package main

import (
    ""bufio""
    ""bytes""
    ""encoding/binary""
    ""fmt""
    ""os""
    ""runtime""
    ""unicode/utf16""
    ""unicode/utf8""
)

// UTF16BytesToString converts UTF-16 encoded bytes, in big or little endian byte order,
// to a UTF-8 encoded string.
func UTF16BytesToString(b []byte, o binary.ByteOrder) string {
    utf := make([]uint16, (len(b)+(2-1))/2)
    for i := 0; i+(2-1) < len(b); i += 2 {
        utf[i/2] = o.Uint16(b[i:])
    }
    if len(b)/2 < len(utf) {
        utf[len(utf)-1] = utf8.RuneError
    }
    return string(utf16.Decode(utf))
}

// UTF-16 endian byte order
const (
    unknownEndian = iota
    bigEndian
    littleEndian
)

// dropCREndian drops a terminal \r from the endian data.
func dropCREndian(data []byte, t1, t2 byte) []byte {
    if len(data) > 1 {
        if data[len(data)-2] == t1 && data[len(data)-1] == t2 {
            return data[0 : len(data)-2]
        }
    }
    return data
}

// dropCRBE drops a terminal \r from the big endian data.
func dropCRBE(data []byte) []byte {
    return dropCREndian(data, '\x00', '\r')
}

// dropCRLE drops a terminal \r from the little endian data.
func dropCRLE(data []byte) []byte {
    return dropCREndian(data, '\r', '\x00')
}

// dropCR drops a terminal \r from the data.
func dropCR(data []byte) ([]byte, int) {
    var endian = unknownEndian
    switch ld := len(data); {
    case ld != len(dropCRLE(data)):
        endian = littleEndian
    case ld != len(dropCRBE(data)):
        endian = bigEndian
    }
    return data, endian
}

// SplitFunc is a split function for a Scanner that returns each line of
// text, stripped of any trailing end-of-line marker. The returned line may
// be empty. The end-of-line marker is one optional carriage return followed
// by one mandatory newline. In regular expression notation, it is `\r?\n`.
// The last non-empty line of input will be returned even if it has no
// newline.
func ScanUTF16LinesFunc(byteOrder binary.ByteOrder) (bufio.SplitFunc, func() binary.ByteOrder) {

    // Function closure variables
    var endian = unknownEndian
    switch byteOrder {
    case binary.BigEndian:
        endian = bigEndian
    case binary.LittleEndian:
        endian = littleEndian
    }
    const bom = 0xFEFF
    var checkBOM bool = endian == unknownEndian

    // Scanner split function
    splitFunc := func(data []byte, atEOF bool) (advance int, token []byte, err error) {

        if atEOF && len(data) == 0 {
            return 0, nil, nil
        }

        if checkBOM {
            checkBOM = false
            if len(data) > 1 {
                switch uint16(bom) {
                case uint16(data[0])<<8 | uint16(data[1]):
                    endian = bigEndian
                    return 2, nil, nil
                case uint16(data[1])<<8 | uint16(data[0]):
                    endian = littleEndian
                    return 2, nil, nil
                }
            }
        }

        // Scan for newline-terminated lines.
        i := 0
        for {
            j := bytes.IndexByte(data[i:], '\n')
            if j < 0 {
                break
            }
            i += j
            switch e := i % 2; e {
            case 1: // UTF-16BE
                if endian != littleEndian {
                    if i > 1 {
                        if data[i-1] == '\x00' {
                            endian = bigEndian
                            // We have a full newline-terminated line.
                            return i + 1, dropCRBE(data[0 : i-1]), nil
                        }
                    }
                }
            case 0: // UTF-16LE
                if endian != bigEndian {
                    if i+1 < len(data) {
                        i++
                        if data[i] == '\x00' {
                            endian = littleEndian
                            // We have a full newline-terminated line.
                            return i + 1, dropCRLE(data[0 : i-1]), nil
                        }
                    }
                }
            }
            i++
        }

        // If we're at EOF, we have a final, non-terminated line. Return it.
        if atEOF {
            // drop CR.
            advance = len(data)
            switch endian {
            case bigEndian:
                data = dropCRBE(data)
            case littleEndian:
                data = dropCRLE(data)
            default:
                data, endian = dropCR(data)
            }
            if endian == unknownEndian {
                if runtime.GOOS == ""windows"" {
                    endian = littleEndian
                } else {
                    endian = bigEndian
                }
            }
            return advance, data, nil
        }

        // Request more data.
        return 0, nil, nil
    }

    // Endian byte order function
    orderFunc := func() (byteOrder binary.ByteOrder) {
        switch endian {
        case bigEndian:
            byteOrder = binary.BigEndian
        case littleEndian:
            byteOrder = binary.LittleEndian
        }
        return byteOrder
    }

    return splitFunc, orderFunc
}

func main() {
    file, err := os.Open(""utf16.le.txt"")
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }
    defer file.Close()
    fmt.Println(file.Name())

    rdr := bufio.NewReader(file)
    scanner := bufio.NewScanner(rdr)
    var bo binary.ByteOrder // unknown, infer from data
    // bo = binary.LittleEndian // windows
    splitFunc, orderFunc := ScanUTF16LinesFunc(bo)
    scanner.Split(splitFunc)

    for scanner.Scan() {
        b := scanner.Bytes()
        s := UTF16BytesToString(b, orderFunc())
        fmt.Println(len(s), s)
        fmt.Println(len(b), b)
    }
    fmt.Println(orderFunc())

    if err := scanner.Err(); err != nil {
        fmt.Println(err)
    }
}","['package', 'main', 'import', '(', '""bufio""', '""bytes""', '""encoding/binary""', '""fmt""', '""os""', '""runtime""', '""unicode/utf16""', '""unicode/utf8""', ')', '// UTF16BytesToString converts UTF-16 encoded bytes, in big or little endian byte order,', '// to a UTF-8 encoded string.', 'func', 'UTF16BytesToString', '(', 'b', '[]', 'byte', ',', 'o', 'binary', '.', 'ByteOrder', ')', 'string', '{', 'utf', ':=', 'make', '([]', 'uint16', ',', '(', 'len', '(', 'b', ')+(', '2', '-', '1', '))', '2', ')', 'for', 'i', ':=', '0', ';', 'i', '+(', '2', '-', '1', ')', '<', 'len', '(', 'b', ');', 'i', '+=', '2', '{', 'utf', '[', 'i', '2', ']', '=', 'o', '.', 'Uint16', '(', 'b', '[', 'i', ':])', '}', 'if', 'len', '(', 'b', ')', '2', '<', 'len', '(', 'utf', ')', '{', 'utf', '[', 'len', '(', 'utf', ')-', '1', ']', '=', 'utf8', '.', 'RuneError', '}', 'return', 'string', '(', 'utf16', '.', 'Decode', '(', 'utf', '))', '}', '// UTF-16 endian byte order', 'const', '(', 'unknownEndian', '=', 'iota', 'bigEndian', 'littleEndian', ')', '// dropCREndian drops a terminal \\r from the endian data.', 'func', 'dropCREndian', '(', 'data', '[]', 'byte', ',', 't1', ',', 't2', 'byte', ')', '[]', 'byte', '{', 'if', 'len', '(', 'data', ')', '>', '1', '{', 'if', 'data', '[', 'len', '(', 'data', ')-', '2', ']', '==', 't1', '&&', 'data', '[', 'len', '(', 'data', ')-', '1', ']', '==', 't2', '{', 'return', 'data', '[', '0', ':', 'len', '(', 'data', ')-', '2', ']', '}', '}', 'return', 'data', '}', '// dropCRBE drops a terminal \\r from the big endian data.', 'func', 'dropCRBE', '(', 'data', '[]', 'byte', ')', '[]', 'byte', '{', 'return', 'dropCREndian', '(', 'data', ',', 'x00', ',', 'r', ')', '}', '// dropCRLE drops a terminal \\r from the little endian data.', 'func', 'dropCRLE', '(', 'data', '[]', 'byte', ')', '[]', 'byte', '{', 'return', 'dropCREndian', '(', 'data', ',', 'r', ',', 'x00', ')', '}', '// dropCR drops a terminal \\r from the data.', 'func', 'dropCR', '(', 'data', '[]', 'byte', ')', '([]', 'byte', ',', 'int', ')', '{', 'var', 'endian', '=', 'unknownEndian', 'switch', 'ld', ':=', 'len', '(', 'data', ');', '{', 'case', 'ld', '!=', 'len', '(', 'dropCRLE', '(', 'data', ')):', 'endian', '=', 'littleEndian', 'case', 'ld', '!=', 'len', '(', 'dropCRBE', '(', 'data', ')):', 'endian', '=', 'bigEndian', '}', 'return', 'data', ',', 'endian', '}', '// SplitFunc is a split function for a Scanner that returns each line of', '// text, stripped of any trailing end-of-line marker. The returned line may', '// be empty. The end-of-line marker is one optional carriage return followed', '// by one mandatory newline. In regular expression notation, it is `\\r?\\n`.', '// The last non-empty line of input will be returned even if it has no', '// newline.', 'func', 'ScanUTF16LinesFunc', '(', 'byteOrder', 'binary', '.', 'ByteOrder', ')', '(', 'bufio', '.', 'SplitFunc', ',', 'func', '()', 'binary', '.', 'ByteOrder', ')', '{', '// Function closure variables', 'var', 'endian', '=', 'unknownEndian', 'switch', 'byteOrder', '{', 'case', 'binary', '.', 'BigEndian', ':', 'endian', '=', 'bigEndian', 'case', 'binary', '.', 'LittleEndian', ':', 'endian', '=', 'littleEndian', '}', 'const', 'bom', '=', '0', 'xFEFF', 'var', 'checkBOM', 'bool', '=', 'endian', '==', 'unknownEndian', '// Scanner split function', 'splitFunc', ':=', 'func', '(', 'data', '[]', 'byte', ',', 'atEOF', 'bool', ')', '(', 'advance', 'int', ',', 'token', '[]', 'byte', ',', 'err', 'error', ')', '{', 'if', 'atEOF', '&&', 'len', '(', 'data', ')', '==', '0', '{', 'return', '0', ',', 'nil', ',', 'nil', '}', 'if', 'checkBOM', '{', 'checkBOM', '=', 'false', 'if', 'len', '(', 'data', ')', '>', '1', '{', 'switch', 'uint16', '(', 'bom', ')', '{', 'case', 'uint16', '(', 'data', '[', '0', '])<<', '8', '|', 'uint16', '(', 'data', '[', '1', ']):', 'endian', '=', 'bigEndian', 'return', '2', ',', 'nil', ',', 'nil', 'case', 'uint16', '(', 'data', '[', '1', '])<<', '8', '|', 'uint16', '(', 'data', '[', '0', ']):', 'endian', '=', 'littleEndian', 'return', '2', ',', 'nil', ',', 'nil', '}', '}', '}', '// Scan for newline-terminated lines.', 'i', ':=', '0', 'for', '{', 'j', ':=', 'bytes', '.', 'IndexByte', '(', 'data', '[', 'i', ':],', 'n', ')', 'if', 'j', '<', '0', '{', 'break', '}', 'i', '+=', 'j', 'switch', 'e', ':=', 'i', '2', ';', 'e', '{', 'case', '1', ':', '// UTF-16BE', 'if', 'endian', '!=', 'littleEndian', '{', 'if', 'i', '>', '1', '{', 'if', 'data', '[', 'i', '-', '1', ']', '==', 'x00', '{', 'endian', '=', 'bigEndian', '// We have a full newline-terminated line.', 'return', 'i', '+', '1', ',', 'dropCRBE', '(', 'data', '[', '0', ':', 'i', '-', '1', ']),', 'nil', '}', '}', '}', 'case', '0', ':', '// UTF-16LE', 'if', 'endian', '!=', 'bigEndian', '{', 'if', 'i', '+', '1', '<', 'len', '(', 'data', ')', '{', 'i', '++', 'if', 'data', '[', 'i', ']', '==', 'x00', '{', 'endian', '=', 'littleEndian', '// We have a full newline-terminated line.', 'return', 'i', '+', '1', ',', 'dropCRLE', '(', 'data', '[', '0', ':', 'i', '-', '1', ']),', 'nil', '}', '}', '}', '}', 'i', '++', '}', ""// If we're at EOF, we have a final, non-terminated line. Return it."", 'if', 'atEOF', '{', '// drop CR.', 'advance', '=', 'len', '(', 'data', ')', 'switch', 'endian', '{', 'case', 'bigEndian', ':', 'data', '=', 'dropCRBE', '(', 'data', ')', 'case', 'littleEndian', ':', 'data', '=', 'dropCRLE', '(', 'data', ')', 'default', ':', 'data', ',', 'endian', '=', 'dropCR', '(', 'data', ')', '}', 'if', 'endian', '==', 'unknownEndian', '{', 'if', 'runtime', '.', 'GOOS', '==', '""windows""', '{', 'endian', '=', 'littleEndian', '}', 'else', '{', 'endian', '=', 'bigEndian', '}', '}', 'return', 'advance', ',', 'data', ',', 'nil', '}', '// Request more data.', 'return', '0', ',', 'nil', ',', 'nil', '}', '// Endian byte order function', 'orderFunc', ':=', 'func', '()', '(', 'byteOrder', 'binary', '.', 'ByteOrder', ')', '{', 'switch', 'endian', '{', 'case', 'bigEndian', ':', 'byteOrder', '=', 'binary', '.', 'BigEndian', 'case', 'littleEndian', ':', 'byteOrder', '=', 'binary', '.', 'LittleEndian', '}', 'return', 'byteOrder', '}', 'return', 'splitFunc', ',', 'orderFunc', '}', 'func', 'main', '()', '{', 'file', ',', 'err', ':=', 'os', '.', 'Open', '(', '""utf16.le.txt""', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', 'os', '.', 'Exit', '(', '1', ')', '}', 'defer', 'file', '.', 'Close', '()', 'fmt', '.', 'Println', '(', 'file', '.', 'Name', '())', 'rdr', ':=', 'bufio', '.', 'NewReader', '(', 'file', ')', 'scanner', ':=', 'bufio', '.', 'NewScanner', '(', 'rdr', ')', 'var', 'bo', 'binary', '.', 'ByteOrder', '// unknown, infer from data', '// bo = binary.LittleEndian // windows', 'splitFunc', ',', 'orderFunc', ':=', 'ScanUTF16LinesFunc', '(', 'bo', ')', 'scanner', '.', 'Split', '(', 'splitFunc', ')', 'for', 'scanner', '.', 'Scan', '()', '{', 'b', ':=', 'scanner', '.', 'Bytes', '()', 's', ':=', 'UTF16BytesToString', '(', 'b', ',', 'orderFunc', '())', 'fmt', '.', 'Println', '(', 'len', '(', 's', '),', 's', ')', 'fmt', '.', 'Println', '(', 'len', '(', 'b', '),', 'b', ')', '}', 'fmt', '.', 'Println', '(', 'orderFunc', '())', 'if', 'err', ':=', 'scanner', '.', 'Err', '();', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', '}', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'comment', 'UTF16BytesToString', 'converts', 'UTF-16', 'encoded', 'bytes', ',', 'in', 'big', 'or', 'little', 'endian', 'byte', 'order', ',', 'comment', 'to', 'a', 'UTF-8', 'encoded', 'string', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'UTF-16', 'endian', 'byte', 'order', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'comment', 'dropCREndian', 'drops', 'a', 'terminal', '\\r', 'from', 'the', 'endian', 'data', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'comment', 'dropCRBE', 'drops', 'a', 'terminal', '\\r', 'from', 'the', 'big', 'endian', 'data', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'dropCRLE', 'drops', 'a', 'terminal', '\\r', 'from', 'the', 'little', 'endian', 'data', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'dropCR', 'drops', 'a', 'terminal', '\\r', 'from', 'the', 'data', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'SplitFunc', 'is', 'a', 'split', 'function', 'for', 'a', 'Scanner', 'that', 'returns', 'each', 'line', 'of', 'comment', 'text', ',', 'stripped', 'of', 'any', 'trailing', 'end-of-line', 'marker', '.', 'The', 'returned', 'line', 'may', 'comment', 'be', 'empty', '.', 'The', 'end-of-line', 'marker', 'is', 'one', 'optional', 'carriage', 'return', 'followed', 'comment', 'by', 'one', 'mandatory', 'newline', '.', 'In', 'regular', 'expression', 'notation', ',', 'it', 'is', '`\\r', '?', '\\n`', '.', 'comment', 'The', 'last', 'non-empty', 'line', 'of', 'input', 'will', 'be', 'returned', 'even', 'if', 'it', 'has', 'no', 'comment', 'newline', '.', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Function', 'closure', 'variables', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'identifier', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'Scanner', 'split', 'function', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'comment', 'Scan', 'for', 'newline-terminated', 'lines', '.', 'identifier', 'operator', 'decimal_literal', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'comment', 'UTF-16BE', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'We', 'have', 'a', 'full', 'newline-terminated', 'line', '.', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'decimal_literal', 'operator', 'comment', 'UTF-16LE', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'We', 'have', 'a', 'full', 'newline-terminated', 'line', '.', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'identifier', 'operator', 'operator', 'comment', 'If', 'we', ""'re"", 'at', 'EOF', ',', 'we', 'have', 'a', 'final', ',', 'non-terminated', 'line', '.', 'Return', 'it', '.', 'keyword', 'identifier', 'operator', 'comment', 'drop', 'CR', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Request', 'more', 'data', '.', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Endian', 'byte', 'order', 'function', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'comment', 'unknown', ',', 'infer', 'from', 'data', 'comment', 'bo', '=', 'binary.LittleEndian', 'windows', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator']",15794113
16,"package main

/*
Fido fetches the list of public images from the Glance server, captures the IDs of images with 'status': 'active' and then queues the images for pre-fetching with the Glance CLI utility `glance-cache-manage`. Once the images are added to the queue, `glance-cache-prefetcher` is called to actively fetch the queued images into the local compute nodes' image cache.

See http://docs.openstack.org/developer/glance/cache.html for further details on the Glance image cache.
*/

import (
    ""bytes""
    ""encoding/json""
    ""fmt""
    ""io/ioutil""
    /*
        ""log""
        ""log/syslog""
    */
    ""net/http""
    ""os""
    ""os/exec""
)

func prefetchImages() error {

    cmd := exec.Command(""glance-cache-prefetcher"")
    err := cmd.Run()

    if err != nil {
        return fmt.Errorf(""glance-cache-prefetcher failed to execute properly: %v"", err)
    }

    return nil
}

func queueImages(hostname string, imageList []string) error {

    for _, image := range imageList {
        cmd := exec.Command(""glance-cache-manage"", ""--host="", hostname, ""queue-image"", image)
        err := cmd.Run()

        if err != nil {
            return fmt.Errorf(""glance-cache-manage failed to execute properly: %v"", err)
        } else {
            fmt.Printf(""Image %s queued"", image)
        }
    }

    return nil
}

func getBody(method string, url string, headers map[string]string, body []byte) ([]byte, error) {

    client := &http.Client{}
    req, err := http.NewRequest(method, url, bytes.NewReader(body))

    if err != nil {
        return nil, err
    }

    for key, value := range headers {
        req.Header.Add(key, value)
    }

    res, err := client.Do(req)
    defer res.Body.Close()

    if err != nil {
        return nil, err
    }

    var bodyBytes []byte

    if res.StatusCode == 200 {
        bodyBytes, err = ioutil.ReadAll(res.Body)
    } else if err != nil {
        return nil, err
    } else {
        return nil, fmt.Errorf(""The remote end did not return a HTTP 200 (OK) response."")
    }

    return bodyBytes, nil

}

func getImages(authToken string) ([]string, error) {

    type GlanceDetailResponse struct {
        Images []struct {
            Name   string `json:""name""`
            Status string `json:""status""`
            ID     string `json:""id""`
        }
    }

    method := ""GET""
    url := ""http://192.168.1.2:9292/v1.1/images/detail""
    headers := map[string]string{""X-Auth-Token"": authToken}

    bodyBytes, err := getBody(method, url, headers, nil)

    if err != nil {
        return nil, fmt.Errorf(""unable to retrieve the response body from the Glance API server: %v"", err)
    }

    var glance GlanceDetailResponse
    err = json.Unmarshal(bodyBytes, &glance)

    if err != nil {
        return nil, fmt.Errorf(""unable to parse the JSON response:"", err)
    }

    imageList := make([]string, 10)

    for _, image := range glance.Images {
        if image.Status == ""active"" {
            imageList = append(imageList, image.ID)
        }
    }

    return imageList, nil

}

func getToken() (string, error) {

    type TokenResponse struct {
        Auth []struct {
            Token struct {
                Expires string `json:""expires""`
                ID      string `json:""id""`
            }
        }
    }

    method := ""POST""
    url := ""http://192.168.1.2:5000/v2.0/tokens""
    headers := map[string]string{""Content-type"": ""application/json""}
    creds := []byte(`{""auth"":{""passwordCredentials"":{""username"": ""glance"", ""password"":""""}, ""tenantId"":""""}}`)

    bodyBytes, err := getBody(method, url, headers, creds)

    if err != nil {
        return """", err
    }

    var keystone TokenResponse
    err = json.Unmarshal(bodyBytes, &keystone)

    if err != nil {
        return """", err
    }

    authToken := string((keystone.Auth[0].Token.ID))

    return authToken, nil
}

func main() {

    /*
        slog, err := syslog.New(syslog.LOG_ERR, ""[fido]"")

        if err != nil {
            log.Fatalf(""unable to connect to syslog: %v"", err)
            os.Exit(1)
        } else {
            defer slog.Close()
        }
    */

    hostname, err := os.Hostname()

    if err != nil {
        // slog.Err(""Hostname not captured"")
        os.Exit(1)
    }

    authToken, err := getToken()

    if err != nil {
        // slog.Err(""The authentication token from the Glance API server was not retrieved"")
        os.Exit(1)
    }

    imageList, err := getImages(authToken)

    err = queueImages(hostname, imageList)

    if err != nil {
        // slog.Err(""Could not queue the images for pre-fetching"")
        os.Exit(1)
    }

    err = prefetchImages()

    if err != nil {
        // slog.Err(""Could not queue the images for pre-fetching"")
        os.Exit(1)
    }

    return
}","['package', 'main', '*', 'Fido', 'fetches', 'the', 'list', 'of', 'public', 'images', 'from', 'the', 'Glance', 'server', ',', 'captures', 'the', 'IDs', 'of', 'images', 'with', 'status', ':', 'active', 'and', 'then', 'queues', 'the', 'images', 'for', 'pre', '-', 'fetching', 'with', 'the', 'Glance', 'CLI', 'utility', 'glance', '-', 'cache', '-', 'manage', '.', 'Once', 'the', 'images', 'are', 'added', 'to', 'the', 'queue', ',', 'glance', '-', 'cache', '-', 'prefetcher', 'is', 'called', 'to', 'actively', 'fetch', 'the', 'queued', 'images', 'into', 'the', 'local', 'compute', 'nodes', 'image', 'cache', '.', 'See', 'http', ':', '//docs.openstack.org/developer/glance/cache.html for further details on the Glance image cache.', '*', 'import', '(', '""bytes""', '""encoding/json""', '""fmt""', '""io/ioutil""', '*', '""log""', '""log/syslog""', '*', '""net/http""', '""os""', '""os/exec""', ')', 'func', 'prefetchImages', '()', 'error', '{', 'cmd', ':=', 'exec', '.', 'Command', '(', '""glance-cache-prefetcher""', ')', 'err', ':=', 'cmd', '.', 'Run', '()', 'if', 'err', '!=', 'nil', '{', 'return', 'fmt', '.', 'Errorf', '(', '""glance-cache-prefetcher failed to execute properly: %v""', ',', 'err', ')', '}', 'return', 'nil', '}', 'func', 'queueImages', '(', 'hostname', 'string', ',', 'imageList', '[]', 'string', ')', 'error', '{', 'for', '_', ',', 'image', ':=', 'range', 'imageList', '{', 'cmd', ':=', 'exec', '.', 'Command', '(', '""glance-cache-manage"", ""--host="", hostname, ""queue-image""', ',', 'image', ')', 'err', ':=', 'cmd', '.', 'Run', '()', 'if', 'err', '!=', 'nil', '{', 'return', 'fmt', '.', 'Errorf', '(', '""glance-cache-manage failed to execute properly: %v""', ',', 'err', ')', '}', 'else', '{', 'fmt', '.', 'Printf', '(', '""Image %s queued""', ',', 'image', ')', '}', '}', 'return', 'nil', '}', 'func', 'getBody', '(', 'method', 'string', ',', 'url', 'string', ',', 'headers', 'map', '[', 'string', ']', 'string', ',', 'body', '[]', 'byte', ')', '([]', 'byte', ',', 'error', ')', '{', 'client', ':=', '&', 'http', '.', 'Client', '{}', 'req', ',', 'err', ':=', 'http', '.', 'NewRequest', '(', 'method', ',', 'url', ',', 'bytes', '.', 'NewReader', '(', 'body', '))', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'for', 'key', ',', 'value', ':=', 'range', 'headers', '{', 'req', '.', 'Header', '.', 'Add', '(', 'key', ',', 'value', ')', '}', 'res', ',', 'err', ':=', 'client', '.', 'Do', '(', 'req', ')', 'defer', 'res', '.', 'Body', '.', 'Close', '()', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'var', 'bodyBytes', '[]', 'byte', 'if', 'res', '.', 'StatusCode', '==', '200', '{', 'bodyBytes', ',', 'err', '=', 'ioutil', '.', 'ReadAll', '(', 'res', '.', 'Body', ')', '}', 'else', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'else', '{', 'return', 'nil', ',', 'fmt', '.', 'Errorf', '(', '""The remote end did not return a HTTP 200 (OK) response.""', ')', '}', 'return', 'bodyBytes', ',', 'nil', '}', 'func', 'getImages', '(', 'authToken', 'string', ')', '([]', 'string', ',', 'error', ')', '{', 'type', 'GlanceDetailResponse', 'struct', '{', 'Images', '[]', 'struct', '{', 'Name', 'string', 'json', ':', '""name""', 'Status', 'string', 'json', ':', '""status""', 'ID', 'string', 'json', ':', '""id""', '}', '}', 'method', ':=', '""GET""', 'url', ':=', '""http://192.168.1.2:9292/v1.1/images/detail""', 'headers', ':=', 'map', '[', 'string', ']', 'string', '{', '""X-Auth-Token""', ':', 'authToken', '}', 'bodyBytes', ',', 'err', ':=', 'getBody', '(', 'method', ',', 'url', ',', 'headers', ',', 'nil', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'fmt', '.', 'Errorf', '(', '""unable to retrieve the response body from the Glance API server: %v""', ',', 'err', ')', '}', 'var', 'glance', 'GlanceDetailResponse', 'err', '=', 'json', '.', 'Unmarshal', '(', 'bodyBytes', ',', '&', 'glance', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'fmt', '.', 'Errorf', '(', '""unable to parse the JSON response:""', ',', 'err', ')', '}', 'imageList', ':=', 'make', '([]', 'string', ',', '10', ')', 'for', '_', ',', 'image', ':=', 'range', 'glance', '.', 'Images', '{', 'if', 'image', '.', 'Status', '==', '""active""', '{', 'imageList', '=', 'append', '(', 'imageList', ',', 'image', '.', 'ID', ')', '}', '}', 'return', 'imageList', ',', 'nil', '}', 'func', 'getToken', '()', '(', 'string', ',', 'error', ')', '{', 'type', 'TokenResponse', 'struct', '{', 'Auth', '[]', 'struct', '{', 'Token', 'struct', '{', 'Expires', 'string', 'json', ':', '""expires""', 'ID', 'string', 'json', ':', '""id""', '}', '}', '}', 'method', ':=', '""POST""', 'url', ':=', '""http://192.168.1.2:5000/v2.0/tokens""', 'headers', ':=', 'map', '[', 'string', ']', 'string', '{', '""Content-type"": ""application/json""', '}', 'creds', ':=', '[]', 'byte', '(', '{', '""auth"":{""passwordCredentials"":{""username"": ""glance"", ""password"":""""}, ""tenantId"":""""', '}}', ')', 'bodyBytes', ',', 'err', ':=', 'getBody', '(', 'method', ',', 'url', ',', 'headers', ',', 'creds', ')', 'if', 'err', '!=', 'nil', '{', 'return', '""""', ',', 'err', '}', 'var', 'keystone', 'TokenResponse', 'err', '=', 'json', '.', 'Unmarshal', '(', 'bodyBytes', ',', '&', 'keystone', ')', 'if', 'err', '!=', 'nil', '{', 'return', '""""', ',', 'err', '}', 'authToken', ':=', 'string', '((', 'keystone', '.', 'Auth', '[', '0', '].', 'Token', '.', 'ID', '))', 'return', 'authToken', ',', 'nil', '}', 'func', 'main', '()', '{', '*', 'slog', ',', 'err', ':=', 'syslog', '.', 'New', '(', 'syslog', '.', 'LOG_ERR', ',', '""[fido]""', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatalf', '(', '""unable to connect to syslog: %v""', ',', 'err', ')', 'os', '.', 'Exit', '(', '1', ')', '}', 'else', '{', 'defer', 'slog', '.', 'Close', '()', '}', '*', 'hostname', ',', 'err', ':=', 'os', '.', 'Hostname', '()', 'if', 'err', '!=', 'nil', '{', '// slog.Err(""Hostname not captured"")', 'os', '.', 'Exit', '(', '1', ')', '}', 'authToken', ',', 'err', ':=', 'getToken', '()', 'if', 'err', '!=', 'nil', '{', '// slog.Err(""The authentication token from the Glance API server was not retrieved"")', 'os', '.', 'Exit', '(', '1', ')', '}', 'imageList', ',', 'err', ':=', 'getImages', '(', 'authToken', ')', 'err', '=', 'queueImages', '(', 'hostname', ',', 'imageList', ')', 'if', 'err', '!=', 'nil', '{', '// slog.Err(""Could not queue the images for pre-fetching"")', 'os', '.', 'Exit', '(', '1', ')', '}', 'err', '=', 'prefetchImages', '()', 'if', 'err', '!=', 'nil', '{', '// slog.Err(""Could not queue the images for pre-fetching"")', 'os', '.', 'Exit', '(', '1', ')', '}', 'return', '}']","['keyword', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'comment', 'docs.openstack.org/developer/glance/cache.html', 'for', 'further', 'details', 'on', 'the', 'Glance', 'image', 'cache', '.', 'operator', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'string_literal', 'string_literal', 'operator', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'slog.Err', '(', '``', 'Hostname', 'not', 'captured', ""''"", ')', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'slog.Err', '(', '``', 'The', 'authentication', 'token', 'from', 'the', 'Glance', 'API', 'server', 'was', 'not', 'retrieved', ""''"", ')', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'slog.Err', '(', '``', 'Could', 'not', 'queue', 'the', 'images', 'for', 'pre-fetching', ""''"", ')', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'slog.Err', '(', '``', 'Could', 'not', 'queue', 'the', 'images', 'for', 'pre-fetching', ""''"", ')', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'operator']",16280176
17,"/*
 * New Page
 *
 * @param layout      (string)
 * @param showSidebar (bool)
 * @param pageData    (*PageData)
 *
 * @return (*Page)
 */
func NewPage(pageSetting *PageSetting, pageData *PageData) *Page {
    if pageSetting.Layout == """" {
        pageSetting.Layout = DEFAULT_LAYOUT
    }

    if pageSetting.Title == """" {
        pageSetting.Title = config.Title
    }

    if pageSetting.Description == """" {
        pageSetting.Description = config.Description
    }

    return &Page{ PageSetting: pageSetting, PageData: pageData }
}

/*
 * Render page
 *
 * @param pageFilePath (string)
 * @param w            (http.ResponseWriter)
 *
 * @return (error)
 */
func (page *Page) Render(pageFilePath string, w http.ResponseWriter) (err error) {
    columnFilePath  := page.PageSetting.Layout + "".html""
    mainFilePath    := ""main.html""
    contentFilePath := pageFilePath + "".html""
    sidebarFilePath := ""sidebar.html""

    var tmpl *template.Template

    switch page.PageSetting.ShowSidebar {
        case true:
            tmpl, err = template.ParseFiles(
                            LAYOUT_FOLDER + mainFilePath,
                            LAYOUT_FOLDER + columnFilePath,
                            LAYOUT_FOLDER + sidebarFilePath,
                            STATIC_FOLDER + contentFilePath)
        case false:
            tmpl, err = template.ParseFiles(
                            LAYOUT_FOLDER + mainFilePath,
                            LAYOUT_FOLDER + columnFilePath,
                            STATIC_FOLDER + contentFilePath)

    }

    if err != nil {
        return
    }

    tmpl.Execute(w, page)
    return
}
","['*', '*', 'New', 'Page', '*', '*', 'param', 'layout', '(', 'string', ')', '*', 'param', 'showSidebar', '(', 'bool', ')', '*', 'param', 'pageData', '(*', 'PageData', ')', '*', '*', 'return', '(*', 'Page', ')', '*', 'func', 'NewPage', '(', 'pageSetting', '*', 'PageSetting', ',', 'pageData', '*', 'PageData', ')', '*', 'Page', '{', 'if', 'pageSetting', '.', 'Layout', '==', '""""', '{', 'pageSetting', '.', 'Layout', '=', 'DEFAULT_LAYOUT', '}', 'if', 'pageSetting', '.', 'Title', '==', '""""', '{', 'pageSetting', '.', 'Title', '=', 'config', '.', 'Title', '}', 'if', 'pageSetting', '.', 'Description', '==', '""""', '{', 'pageSetting', '.', 'Description', '=', 'config', '.', 'Description', '}', 'return', '&', 'Page', '{', 'PageSetting', ':', 'pageSetting', ',', 'PageData', ':', 'pageData', '}', '}', '*', '*', 'Render', 'page', '*', '*', 'param', 'pageFilePath', '(', 'string', ')', '*', 'param', 'w', '(', 'http', '.', 'ResponseWriter', ')', '*', '*', 'return', '(', 'error', ')', '*', 'func', '(', 'page', '*', 'Page', ')', 'Render', '(', 'pageFilePath', 'string', ',', 'w', 'http', '.', 'ResponseWriter', ')', '(', 'err', 'error', ')', '{', 'columnFilePath', ':=', 'page', '.', 'PageSetting', '.', 'Layout', '+', '"".html""', 'mainFilePath', ':=', '""main.html""', 'contentFilePath', ':=', 'pageFilePath', '+', '"".html""', 'sidebarFilePath', ':=', '""sidebar.html""', 'var', 'tmpl', '*', 'template', '.', 'Template', 'switch', 'page', '.', 'PageSetting', '.', 'ShowSidebar', '{', 'case', 'true', ':', 'tmpl', ',', 'err', '=', 'template', '.', 'ParseFiles', '(', 'LAYOUT_FOLDER', '+', 'mainFilePath', ',', 'LAYOUT_FOLDER', '+', 'columnFilePath', ',', 'LAYOUT_FOLDER', '+', 'sidebarFilePath', ',', 'STATIC_FOLDER', '+', 'contentFilePath', ')', 'case', 'false', ':', 'tmpl', ',', 'err', '=', 'template', '.', 'ParseFiles', '(', 'LAYOUT_FOLDER', '+', 'mainFilePath', ',', 'LAYOUT_FOLDER', '+', 'columnFilePath', ',', 'STATIC_FOLDER', '+', 'contentFilePath', ')', '}', 'if', 'err', '!=', 'nil', '{', 'return', '}', 'tmpl', '.', 'Execute', '(', 'w', ',', 'page', ')', 'return', '}']","['operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'string_literal', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator']",16998427
18,"type HobbyDB struct {
    Key *datastore.Key `datastore:""-""`
    Title string
    Description []byte
    CreatedDate time.Time
    UpdatedDate time.Time
}

type HobbyData struct {
    Key *datastore.Key `datastore:""-""`
    Title string
    Description string
    CreatedDate time.Time
    UpdatedDate time.Time
}

func getHobbyData(dbQuery *datastore.Query, MDOutput bool, c appengine.Context) (hobbyData []HobbyData , err error) {
    var h []*HobbyDB
    k, err := dbQuery.GetAll(c, &h)
    if err != nil {
        return
    }

    hobbyData = make([]HobbyData, len(h))
    for i := range h {
        hobbyData[i].Key = k[i]
        hobbyData[i].Title = h[i].Title
        if MDOutput {
            hobbyData[i].Description = string(blackfriday.MarkdownCommon(h[i].Description))
        } else {
            hobbyData[i].Description = string(h[i].Description)
        }
        hobbyData[i].CreatedDate = h[i].CreatedDate
        hobbyData[i].UpdatedDate = h[i].UpdatedDate
    }
    return
}

func hobbyList(w http.ResponseWriter, r *http.Request) {
    c := appengine.NewContext(r)

    // Get hobby data

    // Get page id
    pageId, _ := strconv.Atoi(getUrlQuery(r.URL, ""pid""))
    pageSize  := 10

    // Get offset and page numbers
    offset, pageNums := getOffset(""Hobby"", pageId, pageSize, c)

    // New PageSetting
    pageSetting := new(PageSetting)

    // Setting PageSetting
    pageSetting.Title  = ""Hobby Manager - "" + config.Title
    pageSetting.Layout = ""column1""

    // showNext and showPrev button
    if pageId  pageNums {
        pageId = 1
    }
    if pageId < pageNums {
        pageSetting.ShowPrev = true
    }
    if pageId != 1 {
        pageSetting.ShowNext = true
    }
    pageSetting.PrevPageID = pageId + 1
    pageSetting.NextPageID = pageId - 1

    // Get hobby data
    dbQuery := datastore.NewQuery(""Hobby"").Order(""-UpdatedDate"").Offset(offset).Limit(pageSize)
    hobbyData, err := getHobbyData(dbQuery, false, c)
    if err != nil {
        serveError(c, w, err)
        return
    }

    // New PageData
    pageData := &PageData{ Hobby: hobbyData }

    // New Page
    page := NewPage(pageSetting, pageData)

    // Render page
    page.Render(""hobby/admin"", w)
}","['type', 'HobbyDB', 'struct', '{', 'Key', '*', 'datastore', '.', 'Key', 'datastore', ':', '""-""', 'Title', 'string', 'Description', '[]', 'byte', 'CreatedDate', 'time', '.', 'Time', 'UpdatedDate', 'time', '.', 'Time', '}', 'type', 'HobbyData', 'struct', '{', 'Key', '*', 'datastore', '.', 'Key', 'datastore', ':', '""-""', 'Title', 'string', 'Description', 'string', 'CreatedDate', 'time', '.', 'Time', 'UpdatedDate', 'time', '.', 'Time', '}', 'func', 'getHobbyData', '(', 'dbQuery', '*', 'datastore', '.', 'Query', ',', 'MDOutput', 'bool', ',', 'c', 'appengine', '.', 'Context', ')', '(', 'hobbyData', '[]', 'HobbyData', ',', 'err', 'error', ')', '{', 'var', 'h', '[]*', 'HobbyDB', 'k', ',', 'err', ':=', 'dbQuery', '.', 'GetAll', '(', 'c', ',', '&', 'h', ')', 'if', 'err', '!=', 'nil', '{', 'return', '}', 'hobbyData', '=', 'make', '([]', 'HobbyData', ',', 'len', '(', 'h', '))', 'for', 'i', ':=', 'range', 'h', '{', 'hobbyData', '[', 'i', '].', 'Key', '=', 'k', '[', 'i', ']', 'hobbyData', '[', 'i', '].', 'Title', '=', 'h', '[', 'i', '].', 'Title', 'if', 'MDOutput', '{', 'hobbyData', '[', 'i', '].', 'Description', '=', 'string', '(', 'blackfriday', '.', 'MarkdownCommon', '(', 'h', '[', 'i', '].', 'Description', '))', '}', 'else', '{', 'hobbyData', '[', 'i', '].', 'Description', '=', 'string', '(', 'h', '[', 'i', '].', 'Description', ')', '}', 'hobbyData', '[', 'i', '].', 'CreatedDate', '=', 'h', '[', 'i', '].', 'CreatedDate', 'hobbyData', '[', 'i', '].', 'UpdatedDate', '=', 'h', '[', 'i', '].', 'UpdatedDate', '}', 'return', '}', 'func', 'hobbyList', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'c', ':=', 'appengine', '.', 'NewContext', '(', 'r', ')', '// Get hobby data', '// Get page id', 'pageId', ',', '_', ':=', 'strconv', '.', 'Atoi', '(', 'getUrlQuery', '(', 'r', '.', 'URL', ',', '""pid""', '))', 'pageSize', ':=', '10', '// Get offset and page numbers', 'offset', ',', 'pageNums', ':=', 'getOffset', '(', '""Hobby""', ',', 'pageId', ',', 'pageSize', ',', 'c', ')', '// New PageSetting', 'pageSetting', ':=', 'new', '(', 'PageSetting', ')', '// Setting PageSetting', 'pageSetting', '.', 'Title', '=', '""Hobby Manager - ""', '+', 'config', '.', 'Title', 'pageSetting', '.', 'Layout', '=', '""column1""', '// showNext and showPrev button', 'if', 'pageId', 'pageNums', '{', 'pageId', '=', '1', '}', 'if', 'pageId', '<', 'pageNums', '{', 'pageSetting', '.', 'ShowPrev', '=', 'true', '}', 'if', 'pageId', '!=', '1', '{', 'pageSetting', '.', 'ShowNext', '=', 'true', '}', 'pageSetting', '.', 'PrevPageID', '=', 'pageId', '+', '1', 'pageSetting', '.', 'NextPageID', '=', 'pageId', '-', '1', '// Get hobby data', 'dbQuery', ':=', 'datastore', '.', 'NewQuery', '(', '""Hobby"").Order(""-UpdatedDate""', ').', 'Offset', '(', 'offset', ').', 'Limit', '(', 'pageSize', ')', 'hobbyData', ',', 'err', ':=', 'getHobbyData', '(', 'dbQuery', ',', 'false', ',', 'c', ')', 'if', 'err', '!=', 'nil', '{', 'serveError', '(', 'c', ',', 'w', ',', 'err', ')', 'return', '}', '// New PageData', 'pageData', ':=', '&', 'PageData', '{', 'Hobby', ':', 'hobbyData', '}', '// New Page', 'page', ':=', 'NewPage', '(', 'pageSetting', ',', 'pageData', ')', '// Render page', 'page', '.', 'Render', '(', '""hobby/admin""', ',', 'w', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Get', 'hobby', 'data', 'comment', 'Get', 'page', 'id', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'comment', 'Get', 'offset', 'and', 'page', 'numbers', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'New', 'PageSetting', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Setting', 'PageSetting', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'comment', 'showNext', 'and', 'showPrev', 'button', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'comment', 'Get', 'hobby', 'data', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'New', 'PageData', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'New', 'Page', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Render', 'page', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator']",16998427
19,"package main

/*
#include 
#include ""wrapper.h""
*/
import ""C""

import (
    ""fmt""
)

//export HandleXPCEvent
func HandleXPCEvent(event C.xpc_object_t) {
    fmt.Println(""Event was handled"")
}

func main() {
    name := C.CString(""com.example.xpc"")
    queue := C.dispatch_queue_create(name, nil)
    conn := C.xpc_connection_create(name, queue)
    C.set_event_handler(conn)

    //C.xpc_connection_resume(conn)
}
","['package', 'main', '*', 'include', 'include', '""wrapper.h""', '*', 'import', '""C""', 'import', '(', '""fmt""', ')', '//export HandleXPCEvent', 'func', 'HandleXPCEvent', '(', 'event', 'C', '.', 'xpc_object_t', ')', '{', 'fmt', '.', 'Println', '(', '""Event was handled""', ')', '}', 'func', 'main', '()', '{', 'name', ':=', 'C', '.', 'CString', '(', '""com.example.xpc""', ')', 'queue', ':=', 'C', '.', 'dispatch_queue_create', '(', 'name', ',', 'nil', ')', 'conn', ':=', 'C', '.', 'xpc_connection_create', '(', 'name', ',', 'queue', ')', 'C', '.', 'set_event_handler', '(', 'conn', ')', '//C.xpc_connection_resume(conn)', '}']","['keyword', 'identifier', 'operator', 'identifier', 'identifier', 'string_literal', 'operator', 'keyword', 'string_literal', 'keyword', 'operator', 'string_literal', 'operator', 'comment', 'export', 'HandleXPCEvent', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'C.xpc_connection_resume', '(', 'conn', ')', 'operator']",17477311
20,"#ifndef _WRAPPER_H_
#define _WRAPPER_H_

#include 
#include 
#include 

xpc_connection_t connect( char* name);
void set_event_handler(xpc_connection_t connection);

#endif
","['if', 'ndef', '_WRAPPER_H_', 'define', '_WRAPPER_H_', 'include', 'include', 'include', 'xpc_connection_t', 'connect', '(', 'char', '*', 'name', ');', 'void', 'set_event_handler', '(', 'xpc_connection_t', 'connection', ');', 'endif']","['keyword', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier']",17477311
21,"#include ""wrapper.h""
#include 

extern void HandleXPCEvent(xpc_object_t);

xpc_connection_t connect( char* name) {
    dispatch_queue_t queue = dispatch_queue_create(name,0);
    return xpc_connection_create(name,queue);
}

void set_event_handler(xpc_connection_t connection) {
    xpc_connection_set_event_handler(connection, ^(xpc_object_t event) {
        xpc_retain(event);
        // Call Go function
        HandleXPCEvent(event);
    });
}","['include', '""wrapper.h""', 'include', 'extern', 'void', 'HandleXPCEvent', '(', 'xpc_object_t', ');', 'xpc_connection_t', 'connect', '(', 'char', '*', 'name', ')', '{', 'dispatch_queue_t', 'queue', '=', 'dispatch_queue_create', '(', 'name', ',', '0', ');', 'return', 'xpc_connection_create', '(', 'name', ',', 'queue', ');', '}', 'void', 'set_event_handler', '(', 'xpc_connection_t', 'connection', ')', '{', 'xpc_connection_set_event_handler', '(', 'connection', ',', '^(', 'xpc_object_t', 'event', ')', '{', 'xpc_retain', '(', 'event', ');', '// Call Go function', 'HandleXPCEvent', '(', 'event', ');', '});', '}']","['identifier', 'string_literal', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Call', 'Go', 'function', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator']",17477311
22,"package client                                                                                                                                                                                              
import (                                                                                                                                                                                                    
    ""encoding/base64""                                                                                                                                                                                       
    ""crypto/aes""                                                                                                                                                                                            
    ""crypto/cipher""                                                                                                                                                                                         
    ""fmt""                                                                                                                                                                                                   
) 

var iv = []byte{34, 35, 35, 57, 68, 4, 35, 36, 7, 8, 35, 23, 35, 86, 35, 23}

func encodeBase64(b []byte) string {                                                                                                                                                                        
    return base64.StdEncoding.EncodeToString(b)                                                                                                                                                             
}                                                                                                                                                                                                           

func decodeBase64(s string) []byte {                                                                                                                                                                        
    data, err := base64.StdEncoding.DecodeString(s)                                                                                                                                                         
    if err != nil { panic(err) }                                                                                                                                                                            
    return data                                                                                                                                                                                             
}                                                                                                                                                                                                           

func Encrypt(key, text string) string {                                                                                                                                                                     
    block, err := aes.NewCipher([]byte(key))                                                                                                                                                                
    if err != nil { panic(err) }                                                                                                                                                                            
    plaintext := []byte(text)                                                                                                                                                                               
    cfb := cipher.NewCFBEncrypter(block, iv)                                                                                                                                                                
    ciphertext := make([]byte, len(plaintext))                                                                                                                                                              
    cfb.XORKeyStream(ciphertext, plaintext)                                                                                                                                                                 
    return encodeBase64(ciphertext)                                                                                                                                                                         
}                                                                                                                                                                                                           

func Decrypt(key, text string) string {                                                                                                                                                                     
    block, err := aes.NewCipher([]byte(key))                                                                                                                                                                
    if err != nil { panic(err) }                                                                                                                                                                            
    ciphertext := decodeBase64(text)                                                                                                                                                                        
    cfb := cipher.NewCFBEncrypter(block, iv)                                                                                                                                                                
    plaintext := make([]byte, len(ciphertext))                                                                                                                                                              
    cfb.XORKeyStream(plaintext, ciphertext)                                                                                                                                                                 
}","['package', 'client', 'import', '(', '""encoding/base64""', '""crypto/aes""', '""crypto/cipher""', '""fmt""', ')', 'var', 'iv', '=', '[]', 'byte', '{', '34', ',', '35', ',', '35', ',', '57', ',', '68', ',', '4', ',', '35', ',', '36', ',', '7', ',', '8', ',', '35', ',', '23', ',', '35', ',', '86', ',', '35', ',', '23', '}', 'func', 'encodeBase64', '(', 'b', '[]', 'byte', ')', 'string', '{', 'return', 'base64', '.', 'StdEncoding', '.', 'EncodeToString', '(', 'b', ')', '}', 'func', 'decodeBase64', '(', 's', 'string', ')', '[]', 'byte', '{', 'data', ',', 'err', ':=', 'base64', '.', 'StdEncoding', '.', 'DecodeString', '(', 's', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'return', 'data', '}', 'func', 'Encrypt', '(', 'key', ',', 'text', 'string', ')', 'string', '{', 'block', ',', 'err', ':=', 'aes', '.', 'NewCipher', '([]', 'byte', '(', 'key', '))', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'plaintext', ':=', '[]', 'byte', '(', 'text', ')', 'cfb', ':=', 'cipher', '.', 'NewCFBEncrypter', '(', 'block', ',', 'iv', ')', 'ciphertext', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'plaintext', '))', 'cfb', '.', 'XORKeyStream', '(', 'ciphertext', ',', 'plaintext', ')', 'return', 'encodeBase64', '(', 'ciphertext', ')', '}', 'func', 'Decrypt', '(', 'key', ',', 'text', 'string', ')', 'string', '{', 'block', ',', 'err', ':=', 'aes', '.', 'NewCipher', '([]', 'byte', '(', 'key', '))', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'ciphertext', ':=', 'decodeBase64', '(', 'text', ')', 'cfb', ':=', 'cipher', '.', 'NewCFBEncrypter', '(', 'block', ',', 'iv', ')', 'plaintext', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'ciphertext', '))', 'cfb', '.', 'XORKeyStream', '(', 'plaintext', ',', 'ciphertext', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",18817336
23,"package main

import (
    ""bytes""
    ""errors""
    ""flag""
    ""fmt""
    ""log""
    ""net""
    ""net/http""
    ""net/url""
    ""runtime""
    ""strconv""
    ""time""
)

const DEFAULT_IDLE_TIMEOUT = 5 * time.Second

var (
    listen       string
    logOn        bool
    localhost, _ = url.Parse(""http://localhost:8080/"")
    client       = &http.Client{
        Transport: &http.Transport{
            Proxy: NoProxyAllowed,
            Dial: func(network, addr string) (net.Conn, error) {
                return NewTimeoutConnDial(network, addr, DEFAULT_IDLE_TIMEOUT)
            },
        },
    }
)

func main() {
    runtime.GOMAXPROCS(runtime.NumCPU())
    flag.StringVar(&listen, ""listen"", ""0.0.0.0:9000"", ""listen on address"")
    flag.BoolVar(&logOn, ""log"", true, ""enable logging"")
    flag.Parse()
    server := getTimeoutServer(listen, http.HandlerFunc(proxyHandlerFunc))
    log.Printf(""Starting router-server on %s\n"", listen)
    log.Fatal(server.ListenAndServe())
}

func proxyHandlerFunc(w http.ResponseWriter, req *http.Request) {
    if logOn {
        log.Printf(""%+v\n"", req)
    }
    // Setup request URL
    origURL := req.URL
    req.URL = new(url.URL)
    *req.URL = *localhost
    req.URL.Path, req.URL.RawQuery, req.URL.Fragment = origURL.Path, origURL.RawQuery, origURL.Fragment
    req.RequestURI, req.Host = """", req.URL.Host
    // Perform request
    resp, err := client.Do(req)
    if err != nil {
        w.WriteHeader(http.StatusBadGateway)
        w.Write([]byte(fmt.Sprintf(""%d - StatusBadGateway: %s"", http.StatusBadGateway, err)))
        return
    }
    defer resp.Body.Close()
    var respBuffer *bytes.Buffer
    if resp.ContentLength != -1 {
        respBuffer = bytes.NewBuffer(make([]byte, 0, resp.ContentLength))
    } else {
        respBuffer = new(bytes.Buffer)
    }
    if _, err = respBuffer.ReadFrom(resp.Body); err != nil {
        w.WriteHeader(http.StatusBadGateway)
        w.Write([]byte(fmt.Sprintf(""%d - StatusBadGateway: %s"", http.StatusBadGateway, err)))
        return
    }
    // Write result of request
    headers := w.Header()
    var key string
    var val []string
    for key, val = range resp.Header {
        headers[key] = val
    }
    headers.Set(""Content-Length"", strconv.Itoa(respBuffer.Len()))
    w.WriteHeader(resp.StatusCode)
    w.Write(respBuffer.Bytes())
}

func getTimeoutServer(addr string, handler http.Handler) *http.Server {
    //keeps people who are slow or are sending keep-alives from eating all our sockets
    const (
        HTTP_READ_TO  = DEFAULT_IDLE_TIMEOUT
        HTTP_WRITE_TO = DEFAULT_IDLE_TIMEOUT
    )
    return &http.Server{
        Addr:         addr,
        Handler:      handler,
        ReadTimeout:  HTTP_READ_TO,
        WriteTimeout: HTTP_WRITE_TO,
    }
}

func NoProxyAllowed(request *http.Request) (*url.URL, error) {
    return nil, nil
}

//TimeoutConn-------------------------
//Put me in my own TimeoutConn.go ?

type TimeoutConn struct {
    net.Conn
    readTimeout, writeTimeout time.Duration
}

var invalidOperationError = errors.New(""TimeoutConn does not support or allow .SetDeadline operations"")

func NewTimeoutConn(conn net.Conn, ioTimeout time.Duration) (*TimeoutConn, error) {
    return NewTimeoutConnReadWriteTO(conn, ioTimeout, ioTimeout)
}

func NewTimeoutConnReadWriteTO(conn net.Conn, readTimeout, writeTimeout time.Duration) (*TimeoutConn, error) {
    this := &TimeoutConn{
        Conn:         conn,
        readTimeout:  readTimeout,
        writeTimeout: writeTimeout,
    }
    now := time.Now()
    err := this.Conn.SetReadDeadline(now.Add(this.readTimeout))
    if err != nil {
        return nil, err
    }
    err = this.Conn.SetWriteDeadline(now.Add(this.writeTimeout))
    if err != nil {
        return nil, err
    }
    return this, nil
}

func NewTimeoutConnDial(network, addr string, ioTimeout time.Duration) (net.Conn, error) {
    conn, err := net.DialTimeout(network, addr, ioTimeout)
    if err != nil {
        return nil, err
    }
    if conn, err = NewTimeoutConn(conn, ioTimeout); err != nil {
        return nil, err
    }
    return conn, nil
}

func (this *TimeoutConn) Read(data []byte) (int, error) {
    this.Conn.SetReadDeadline(time.Now().Add(this.readTimeout))
    return this.Conn.Read(data)
}

func (this *TimeoutConn) Write(data []byte) (int, error) {
    this.Conn.SetWriteDeadline(time.Now().Add(this.writeTimeout))
    return this.Conn.Write(data)
}

func (this *TimeoutConn) SetDeadline(time time.Time) error {
    return invalidOperationError
}

func (this *TimeoutConn) SetReadDeadline(time time.Time) error {
    return invalidOperationError
}

func (this *TimeoutConn) SetWriteDeadline(time time.Time) error {
    return invalidOperationError
}","['package', 'main', 'import', '(', '""bytes""', '""errors""', '""flag""', '""fmt""', '""log""', '""net""', '""net/http""', '""net/url""', '""runtime""', '""strconv""', '""time""', ')', 'const', 'DEFAULT_IDLE_TIMEOUT', '=', '5', '*', 'time', '.', 'Second', 'var', '(', 'listen', 'string', 'logOn', 'bool', 'localhost', ',', '_', '=', 'url', '.', 'Parse', '(', '""http://localhost:8080/""', ')', 'client', '=', '&', 'http', '.', 'Client', '{', 'Transport', ':', '&', 'http', '.', 'Transport', '{', 'Proxy', ':', 'NoProxyAllowed', ',', 'Dial', ':', 'func', '(', 'network', ',', 'addr', 'string', ')', '(', 'net', '.', 'Conn', ',', 'error', ')', '{', 'return', 'NewTimeoutConnDial', '(', 'network', ',', 'addr', ',', 'DEFAULT_IDLE_TIMEOUT', ')', '},', '},', '}', ')', 'func', 'main', '()', '{', 'runtime', '.', 'GOMAXPROCS', '(', 'runtime', '.', 'NumCPU', '())', 'flag', '.', 'StringVar', '(&', 'listen', ',', '""listen"", ""0.0.0.0:9000"", ""listen on address""', ')', 'flag', '.', 'BoolVar', '(&', 'logOn', ',', '""log"", true, ""enable logging""', ')', 'flag', '.', 'Parse', '()', 'server', ':=', 'getTimeoutServer', '(', 'listen', ',', 'http', '.', 'HandlerFunc', '(', 'proxyHandlerFunc', '))', 'log', '.', 'Printf', '(', '""Starting router-server on %s\\n""', ',', 'listen', ')', 'log', '.', 'Fatal', '(', 'server', '.', 'ListenAndServe', '())', '}', 'func', 'proxyHandlerFunc', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{', 'if', 'logOn', '{', 'log', '.', 'Printf', '(', '""%+v\\n""', ',', 'req', ')', '}', '// Setup request URL', 'origURL', ':=', 'req', '.', 'URL', 'req', '.', 'URL', '=', 'new', '(', 'url', '.', 'URL', ')', '*', 'req', '.', 'URL', '=', '*', 'localhost', 'req', '.', 'URL', '.', 'Path', ',', 'req', '.', 'URL', '.', 'RawQuery', ',', 'req', '.', 'URL', '.', 'Fragment', '=', 'origURL', '.', 'Path', ',', 'origURL', '.', 'RawQuery', ',', 'origURL', '.', 'Fragment', 'req', '.', 'RequestURI', ',', 'req', '.', 'Host', '=', '""""', ',', 'req', '.', 'URL', '.', 'Host', '// Perform request', 'resp', ',', 'err', ':=', 'client', '.', 'Do', '(', 'req', ')', 'if', 'err', '!=', 'nil', '{', 'w', '.', 'WriteHeader', '(', 'http', '.', 'StatusBadGateway', ')', 'w', '.', 'Write', '([]', 'byte', '(', 'fmt', '.', 'Sprintf', '(', '""%d - StatusBadGateway: %s""', ',', 'http', '.', 'StatusBadGateway', ',', 'err', ')))', 'return', '}', 'defer', 'resp', '.', 'Body', '.', 'Close', '()', 'var', 'respBuffer', '*', 'bytes', '.', 'Buffer', 'if', 'resp', '.', 'ContentLength', '!=', '-', '1', '{', 'respBuffer', '=', 'bytes', '.', 'NewBuffer', '(', 'make', '([]', 'byte', ',', '0', ',', 'resp', '.', 'ContentLength', '))', '}', 'else', '{', 'respBuffer', '=', 'new', '(', 'bytes', '.', 'Buffer', ')', '}', 'if', '_', ',', 'err', '=', 'respBuffer', '.', 'ReadFrom', '(', 'resp', '.', 'Body', ');', 'err', '!=', 'nil', '{', 'w', '.', 'WriteHeader', '(', 'http', '.', 'StatusBadGateway', ')', 'w', '.', 'Write', '([]', 'byte', '(', 'fmt', '.', 'Sprintf', '(', '""%d - StatusBadGateway: %s""', ',', 'http', '.', 'StatusBadGateway', ',', 'err', ')))', 'return', '}', '// Write result of request', 'headers', ':=', 'w', '.', 'Header', '()', 'var', 'key', 'string', 'var', 'val', '[]', 'string', 'for', 'key', ',', 'val', '=', 'range', 'resp', '.', 'Header', '{', 'headers', '[', 'key', ']', '=', 'val', '}', 'headers', '.', 'Set', '(', '""Content-Length""', ',', 'strconv', '.', 'Itoa', '(', 'respBuffer', '.', 'Len', '()))', 'w', '.', 'WriteHeader', '(', 'resp', '.', 'StatusCode', ')', 'w', '.', 'Write', '(', 'respBuffer', '.', 'Bytes', '())', '}', 'func', 'getTimeoutServer', '(', 'addr', 'string', ',', 'handler', 'http', '.', 'Handler', ')', '*', 'http', '.', 'Server', '{', '//keeps people who are slow or are sending keep-alives from eating all our sockets', 'const', '(', 'HTTP_READ_TO', '=', 'DEFAULT_IDLE_TIMEOUT', 'HTTP_WRITE_TO', '=', 'DEFAULT_IDLE_TIMEOUT', ')', 'return', '&', 'http', '.', 'Server', '{', 'Addr', ':', 'addr', ',', 'Handler', ':', 'handler', ',', 'ReadTimeout', ':', 'HTTP_READ_TO', ',', 'WriteTimeout', ':', 'HTTP_WRITE_TO', ',', '}', '}', 'func', 'NoProxyAllowed', '(', 'request', '*', 'http', '.', 'Request', ')', '(*', 'url', '.', 'URL', ',', 'error', ')', '{', 'return', 'nil', ',', 'nil', '}', '//TimeoutConn-------------------------', '//Put me in my own TimeoutConn.go ?', 'type', 'TimeoutConn', 'struct', '{', 'net', '.', 'Conn', 'readTimeout', ',', 'writeTimeout', 'time', '.', 'Duration', '}', 'var', 'invalidOperationError', '=', 'errors', '.', 'New', '(', '""TimeoutConn does not support or allow .SetDeadline operations""', ')', 'func', 'NewTimeoutConn', '(', 'conn', 'net', '.', 'Conn', ',', 'ioTimeout', 'time', '.', 'Duration', ')', '(*', 'TimeoutConn', ',', 'error', ')', '{', 'return', 'NewTimeoutConnReadWriteTO', '(', 'conn', ',', 'ioTimeout', ',', 'ioTimeout', ')', '}', 'func', 'NewTimeoutConnReadWriteTO', '(', 'conn', 'net', '.', 'Conn', ',', 'readTimeout', ',', 'writeTimeout', 'time', '.', 'Duration', ')', '(*', 'TimeoutConn', ',', 'error', ')', '{', 'this', ':=', '&', 'TimeoutConn', '{', 'Conn', ':', 'conn', ',', 'readTimeout', ':', 'readTimeout', ',', 'writeTimeout', ':', 'writeTimeout', ',', '}', 'now', ':=', 'time', '.', 'Now', '()', 'err', ':=', 'this', '.', 'Conn', '.', 'SetReadDeadline', '(', 'now', '.', 'Add', '(', 'this', '.', 'readTimeout', '))', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'err', '=', 'this', '.', 'Conn', '.', 'SetWriteDeadline', '(', 'now', '.', 'Add', '(', 'this', '.', 'writeTimeout', '))', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'this', ',', 'nil', '}', 'func', 'NewTimeoutConnDial', '(', 'network', ',', 'addr', 'string', ',', 'ioTimeout', 'time', '.', 'Duration', ')', '(', 'net', '.', 'Conn', ',', 'error', ')', '{', 'conn', ',', 'err', ':=', 'net', '.', 'DialTimeout', '(', 'network', ',', 'addr', ',', 'ioTimeout', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'if', 'conn', ',', 'err', '=', 'NewTimeoutConn', '(', 'conn', ',', 'ioTimeout', ');', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'conn', ',', 'nil', '}', 'func', '(', 'this', '*', 'TimeoutConn', ')', 'Read', '(', 'data', '[]', 'byte', ')', '(', 'int', ',', 'error', ')', '{', 'this', '.', 'Conn', '.', 'SetReadDeadline', '(', 'time', '.', 'Now', '().', 'Add', '(', 'this', '.', 'readTimeout', '))', 'return', 'this', '.', 'Conn', '.', 'Read', '(', 'data', ')', '}', 'func', '(', 'this', '*', 'TimeoutConn', ')', 'Write', '(', 'data', '[]', 'byte', ')', '(', 'int', ',', 'error', ')', '{', 'this', '.', 'Conn', '.', 'SetWriteDeadline', '(', 'time', '.', 'Now', '().', 'Add', '(', 'this', '.', 'writeTimeout', '))', 'return', 'this', '.', 'Conn', '.', 'Write', '(', 'data', ')', '}', 'func', '(', 'this', '*', 'TimeoutConn', ')', 'SetDeadline', '(', 'time', 'time', '.', 'Time', ')', 'error', '{', 'return', 'invalidOperationError', '}', 'func', '(', 'this', '*', 'TimeoutConn', ')', 'SetReadDeadline', '(', 'time', 'time', '.', 'Time', ')', 'error', '{', 'return', 'invalidOperationError', '}', 'func', '(', 'this', '*', 'TimeoutConn', ')', 'SetWriteDeadline', '(', 'time', 'time', '.', 'Time', ')', 'error', '{', 'return', 'invalidOperationError', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Setup', 'request', 'URL', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'Perform', 'request', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'Write', 'result', 'of', 'request', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'keeps', 'people', 'who', 'are', 'slow', 'or', 'are', 'sending', 'keep-alives', 'from', 'eating', 'all', 'our', 'sockets', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'TimeoutConn', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '-', 'comment', 'Put', 'me', 'in', 'my', 'own', 'TimeoutConn.go', '?', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator']",19802242
24,"package main

import (
    ""crypto""
    ""crypto/rand""
    ""crypto/rsa""
    ""crypto/sha256""
    ""crypto/x509""
    ""encoding/base64""
    ""encoding/pem""
    ""errors""
    ""fmt""
    ""io/ioutil""
)

func main() {
    signer, err := loadPrivateKey(""private.pem"");
    if err != nil {
        fmt.Errorf(""signer is damaged: %v"", err)
    }

    toSign := ""date: Thu, 05 Jan 2012 21:31:40 GMT"";

    signed, err := signer.Sign([]byte(toSign))
    if err != nil {
        fmt.Errorf(""could not sign request: %v"", err)
    }
    sig := base64.StdEncoding.EncodeToString(signed)
    fmt.Printf(""Encoded: %v\n"", sig)


    parser, perr := loadPublicKey(""public.pem"");
    if perr != nil {
        fmt.Errorf(""could not sign request: %v"", err)
    }
    unsigned, err := parser.Unsign(signed);
     if err != nil {
        fmt.Errorf(""could not sign request: %v"", err)
    }

    fmt.Printf(""Decrypted: %v\n"", base64.StdEncoding.EncodeToString(unsigned))    
}


// loadPrivateKey loads an parses a PEM encoded private key file.
func loadPublicKey(path string) (Unsigner, error) {
        data, err := ioutil.ReadFile(path)

        if err != nil {
                return nil, err
        }
        return parsePublicKey(data)
}

// parsePublicKey parses a PEM encoded private key.
func parsePublicKey(pemBytes []byte) (Unsigner, error) {
        block, _ := pem.Decode(pemBytes)
        if block == nil {
                return nil, errors.New(""ssh: no key found"")
        }

        var rawkey interface{}
        switch block.Type {
        case ""PUBLIC KEY"":
                rsa, err := x509.ParsePKIXPublicKey(block.Bytes)
                if err != nil {
                        return nil, err
                }
                rawkey = rsa
        default:
                return nil, fmt.Errorf(""ssh: unsupported key type %q"", block.Type)
        }

        return newUnsignerFromKey(rawkey)
}


// loadPrivateKey loads an parses a PEM encoded private key file.
func loadPrivateKey(path string) (Signer, error) {
        data, err := ioutil.ReadFile(path)
        if err != nil {
                return nil, err
        }
        return parsePrivateKey(data)
}

// parsePublicKey parses a PEM encoded private key.
func parsePrivateKey(pemBytes []byte) (Signer, error) {
        block, _ := pem.Decode(pemBytes)
        if block == nil {
                return nil, errors.New(""ssh: no key found"")
        }

        var rawkey interface{}
        switch block.Type {
        case ""RSA PRIVATE KEY"":
                rsa, err := x509.ParsePKCS1PrivateKey(block.Bytes)
                if err != nil {
                        return nil, err
                }
                rawkey = rsa
        default:
                return nil, fmt.Errorf(""ssh: unsupported key type %q"", block.Type)
        }
        return newSignerFromKey(rawkey)
}

// A Signer is can create signatures that verify against a public key.
type Signer interface {
        // Sign returns raw signature for the given data. This method
        // will apply the hash specified for the keytype to the data.
        Sign(data []byte) ([]byte, error)
}

// A Signer is can create signatures that verify against a public key.
type Unsigner interface {
        // Sign returns raw signature for the given data. This method
        // will apply the hash specified for the keytype to the data.
        Unsign(data []byte) ([]byte, error)
}

func newSignerFromKey(k interface{}) (Signer, error) {
        var sshKey Signer
        switch t := k.(type) {
        case *rsa.PrivateKey:
                sshKey = &rsaPrivateKey{t}
        default: 
                return nil, fmt.Errorf(""ssh: unsupported key type %T"", k)
        }
        return sshKey, nil
}

func newUnsignerFromKey(k interface{}) (Unsigner, error) {
        var sshKey Unsigner
        switch t := k.(type) {
        case *rsa.PublicKey:
                sshKey = &rsaPublicKey{t}
        default:
                return nil, fmt.Errorf(""ssh: unsupported key type %T"", k)
        }
        return sshKey, nil
}

type rsaPublicKey struct {
    *rsa.PublicKey
}

type rsaPrivateKey struct {
        *rsa.PrivateKey
}

// Sign signs data with rsa-sha256
func (r *rsaPrivateKey) Sign(data []byte) ([]byte, error) {
        h := sha256.New()
        h.Write(data)
        d := h.Sum(nil)
        return rsa.SignPKCS1v15(rand.Reader, r.PrivateKey, crypto.SHA256, d)
}

// Unsign encrypts data with rsa-sha256
func (r *rsaPublicKey) Unsign(message []byte) ([]byte, error) {  
        return rsa.EncryptPKCS1v15(rand.Reader, r.PublicKey, message)        
}","['package', 'main', 'import', '(', '""crypto""', '""crypto/rand""', '""crypto/rsa""', '""crypto/sha256""', '""crypto/x509""', '""encoding/base64""', '""encoding/pem""', '""errors""', '""fmt""', '""io/ioutil""', ')', 'func', 'main', '()', '{', 'signer', ',', 'err', ':=', 'loadPrivateKey', '(', '""private.pem""', ');', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Errorf', '(', '""signer is damaged: %v""', ',', 'err', ')', '}', 'toSign', ':=', '""date: Thu, 05 Jan 2012 21:31:40 GMT""', ';', 'signed', ',', 'err', ':=', 'signer', '.', 'Sign', '([]', 'byte', '(', 'toSign', '))', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Errorf', '(', '""could not sign request: %v""', ',', 'err', ')', '}', 'sig', ':=', 'base64', '.', 'StdEncoding', '.', 'EncodeToString', '(', 'signed', ')', 'fmt', '.', 'Printf', '(', '""Encoded: %v\\n""', ',', 'sig', ')', 'parser', ',', 'perr', ':=', 'loadPublicKey', '(', '""public.pem""', ');', 'if', 'perr', '!=', 'nil', '{', 'fmt', '.', 'Errorf', '(', '""could not sign request: %v""', ',', 'err', ')', '}', 'unsigned', ',', 'err', ':=', 'parser', '.', 'Unsign', '(', 'signed', ');', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Errorf', '(', '""could not sign request: %v""', ',', 'err', ')', '}', 'fmt', '.', 'Printf', '(', '""Decrypted: %v\\n""', ',', 'base64', '.', 'StdEncoding', '.', 'EncodeToString', '(', 'unsigned', '))', '}', '// loadPrivateKey loads an parses a PEM encoded private key file.', 'func', 'loadPublicKey', '(', 'path', 'string', ')', '(', 'Unsigner', ',', 'error', ')', '{', 'data', ',', 'err', ':=', 'ioutil', '.', 'ReadFile', '(', 'path', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'parsePublicKey', '(', 'data', ')', '}', '// parsePublicKey parses a PEM encoded private key.', 'func', 'parsePublicKey', '(', 'pemBytes', '[]', 'byte', ')', '(', 'Unsigner', ',', 'error', ')', '{', 'block', ',', '_', ':=', 'pem', '.', 'Decode', '(', 'pemBytes', ')', 'if', 'block', '==', 'nil', '{', 'return', 'nil', ',', 'errors', '.', 'New', '(', '""ssh: no key found""', ')', '}', 'var', 'rawkey', 'interface', '{}', 'switch', 'block', '.', 'Type', '{', 'case', '""PUBLIC KEY""', ':', 'rsa', ',', 'err', ':=', 'x509', '.', 'ParsePKIXPublicKey', '(', 'block', '.', 'Bytes', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'rawkey', '=', 'rsa', 'default', ':', 'return', 'nil', ',', 'fmt', '.', 'Errorf', '(', '""ssh: unsupported key type %q""', ',', 'block', '.', 'Type', ')', '}', 'return', 'newUnsignerFromKey', '(', 'rawkey', ')', '}', '// loadPrivateKey loads an parses a PEM encoded private key file.', 'func', 'loadPrivateKey', '(', 'path', 'string', ')', '(', 'Signer', ',', 'error', ')', '{', 'data', ',', 'err', ':=', 'ioutil', '.', 'ReadFile', '(', 'path', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'parsePrivateKey', '(', 'data', ')', '}', '// parsePublicKey parses a PEM encoded private key.', 'func', 'parsePrivateKey', '(', 'pemBytes', '[]', 'byte', ')', '(', 'Signer', ',', 'error', ')', '{', 'block', ',', '_', ':=', 'pem', '.', 'Decode', '(', 'pemBytes', ')', 'if', 'block', '==', 'nil', '{', 'return', 'nil', ',', 'errors', '.', 'New', '(', '""ssh: no key found""', ')', '}', 'var', 'rawkey', 'interface', '{}', 'switch', 'block', '.', 'Type', '{', 'case', '""RSA PRIVATE KEY""', ':', 'rsa', ',', 'err', ':=', 'x509', '.', 'ParsePKCS1PrivateKey', '(', 'block', '.', 'Bytes', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'rawkey', '=', 'rsa', 'default', ':', 'return', 'nil', ',', 'fmt', '.', 'Errorf', '(', '""ssh: unsupported key type %q""', ',', 'block', '.', 'Type', ')', '}', 'return', 'newSignerFromKey', '(', 'rawkey', ')', '}', '// A Signer is can create signatures that verify against a public key.', 'type', 'Signer', 'interface', '{', '// Sign returns raw signature for the given data. This method', '// will apply the hash specified for the keytype to the data.', 'Sign', '(', 'data', '[]', 'byte', ')', '([]', 'byte', ',', 'error', ')', '}', '// A Signer is can create signatures that verify against a public key.', 'type', 'Unsigner', 'interface', '{', '// Sign returns raw signature for the given data. This method', '// will apply the hash specified for the keytype to the data.', 'Unsign', '(', 'data', '[]', 'byte', ')', '([]', 'byte', ',', 'error', ')', '}', 'func', 'newSignerFromKey', '(', 'k', 'interface', '{})', '(', 'Signer', ',', 'error', ')', '{', 'var', 'sshKey', 'Signer', 'switch', 't', ':=', 'k', '.(', 'type', ')', '{', 'case', '*', 'rsa', '.', 'PrivateKey', ':', 'sshKey', '=', '&', 'rsaPrivateKey', '{', 't', '}', 'default', ':', 'return', 'nil', ',', 'fmt', '.', 'Errorf', '(', '""ssh: unsupported key type %T""', ',', 'k', ')', '}', 'return', 'sshKey', ',', 'nil', '}', 'func', 'newUnsignerFromKey', '(', 'k', 'interface', '{})', '(', 'Unsigner', ',', 'error', ')', '{', 'var', 'sshKey', 'Unsigner', 'switch', 't', ':=', 'k', '.(', 'type', ')', '{', 'case', '*', 'rsa', '.', 'PublicKey', ':', 'sshKey', '=', '&', 'rsaPublicKey', '{', 't', '}', 'default', ':', 'return', 'nil', ',', 'fmt', '.', 'Errorf', '(', '""ssh: unsupported key type %T""', ',', 'k', ')', '}', 'return', 'sshKey', ',', 'nil', '}', 'type', 'rsaPublicKey', 'struct', '{', '*', 'rsa', '.', 'PublicKey', '}', 'type', 'rsaPrivateKey', 'struct', '{', '*', 'rsa', '.', 'PrivateKey', '}', '// Sign signs data with rsa-sha256', 'func', '(', 'r', '*', 'rsaPrivateKey', ')', 'Sign', '(', 'data', '[]', 'byte', ')', '([]', 'byte', ',', 'error', ')', '{', 'h', ':=', 'sha256', '.', 'New', '()', 'h', '.', 'Write', '(', 'data', ')', 'd', ':=', 'h', '.', 'Sum', '(', 'nil', ')', 'return', 'rsa', '.', 'SignPKCS1v15', '(', 'rand', '.', 'Reader', ',', 'r', '.', 'PrivateKey', ',', 'crypto', '.', 'SHA256', ',', 'd', ')', '}', '// Unsign encrypts data with rsa-sha256', 'func', '(', 'r', '*', 'rsaPublicKey', ')', 'Unsign', '(', 'message', '[]', 'byte', ')', '([]', 'byte', ',', 'error', ')', '{', 'return', 'rsa', '.', 'EncryptPKCS1v15', '(', 'rand', '.', 'Reader', ',', 'r', '.', 'PublicKey', ',', 'message', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'loadPrivateKey', 'loads', 'an', 'parses', 'a', 'PEM', 'encoded', 'private', 'key', 'file', '.', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'parsePublicKey', 'parses', 'a', 'PEM', 'encoded', 'private', 'key', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'loadPrivateKey', 'loads', 'an', 'parses', 'a', 'PEM', 'encoded', 'private', 'key', 'file', '.', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'parsePublicKey', 'parses', 'a', 'PEM', 'encoded', 'private', 'key', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'A', 'Signer', 'is', 'can', 'create', 'signatures', 'that', 'verify', 'against', 'a', 'public', 'key', '.', 'keyword', 'identifier', 'keyword', 'operator', 'comment', 'Sign', 'returns', 'raw', 'signature', 'for', 'the', 'given', 'data', '.', 'This', 'method', 'comment', 'will', 'apply', 'the', 'hash', 'specified', 'for', 'the', 'keytype', 'to', 'the', 'data', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'A', 'Signer', 'is', 'can', 'create', 'signatures', 'that', 'verify', 'against', 'a', 'public', 'key', '.', 'keyword', 'identifier', 'keyword', 'operator', 'comment', 'Sign', 'returns', 'raw', 'signature', 'for', 'the', 'given', 'data', '.', 'This', 'method', 'comment', 'will', 'apply', 'the', 'hash', 'specified', 'for', 'the', 'keytype', 'to', 'the', 'data', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Sign', 'signs', 'data', 'with', 'rsa-sha256', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Unsign', 'encrypts', 'data', 'with', 'rsa-sha256', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",20655702
25,"type ModelB struct {
    MessageID          string   `datastore:""msg_id,noindex""`
    CategoryIDs        []string `datastore:""cat_ids,noindex""`
    ListIDs            []string `datastore:""list_ids,noindex""`
    DefaultListIDIndex int      `datastore:""default_list_id_index,noindex""`
}

type ModelA struct {
    DateJoin          time.Time `datastore:""date_join,""`
    Name              string    `datastore:""name,""`
    OwnerSalutation   string    `datastore:""owner_salutation,noindex""`
    OwnerEmailAddress string    `datastore:""owner_email_address,""`
    LogoURL           string    `datastore:""logo_url,noindex""`
    Messages          []ModelB  `datastore:""-""`
}

// Load is implemented for the PropertyLoaderSaver interface.
func (s *ModelA) Load(c <-chan datastore.Property) (err error) {
    f := make(chan datastore.Property, 32)
    errc := make(chan error, 1)
    defer func() {
        if err == nil {
            err = <-errc
        }
    }()
    go func() {
        defer close(f)
        for p := range c {
            if p.Name == ""bm"" {
                var b ModelB
                err := loadLocalStructuredProperty(&b, []byte(p.Value.(string)))
                if err != nil {
                    errc <- err
                    return
                }
                s.Messages = append(s.Messages, b)
            } else {
                f <- p
            }
        }
        errc <- nil
    }()
    return datastore.LoadStruct(s, f)
}","['type', 'ModelB', 'struct', '{', 'MessageID', 'string', 'datastore', ':', '""msg_id,noindex""', 'CategoryIDs', '[]', 'string', 'datastore', ':', '""cat_ids,noindex""', 'ListIDs', '[]', 'string', 'datastore', ':', '""list_ids,noindex""', 'DefaultListIDIndex', 'int', 'datastore', ':', '""default_list_id_index,noindex""', '}', 'type', 'ModelA', 'struct', '{', 'DateJoin', 'time', '.', 'Time', 'datastore', ':', '""date_join,""', 'Name', 'string', 'datastore', ':', '""name,""', 'OwnerSalutation', 'string', 'datastore', ':', '""owner_salutation,noindex""', 'OwnerEmailAddress', 'string', 'datastore', ':', '""owner_email_address,""', 'LogoURL', 'string', 'datastore', ':', '""logo_url,noindex""', 'Messages', '[]', 'ModelB', 'datastore', ':', '""-""', '}', '// Load is implemented for the PropertyLoaderSaver interface.', 'func', '(', 's', '*', 'ModelA', ')', 'Load', '(', 'c', '<-', 'chan', 'datastore', '.', 'Property', ')', '(', 'err', 'error', ')', '{', 'f', ':=', 'make', '(', 'chan', 'datastore', '.', 'Property', ',', '32', ')', 'errc', ':=', 'make', '(', 'chan', 'error', ',', '1', ')', 'defer', 'func', '()', '{', 'if', 'err', '==', 'nil', '{', 'err', '=', '<-', 'errc', '}', '}()', 'go', 'func', '()', '{', 'defer', 'close', '(', 'f', ')', 'for', 'p', ':=', 'range', 'c', '{', 'if', 'p', '.', 'Name', '==', '""bm""', '{', 'var', 'b', 'ModelB', 'err', ':=', 'loadLocalStructuredProperty', '(&', 'b', ',', '[]', 'byte', '(', 'p', '.', 'Value', '.(', 'string', ')))', 'if', 'err', '!=', 'nil', '{', 'errc', '<-', 'err', 'return', '}', 's', '.', 'Messages', '=', 'append', '(', 's', '.', 'Messages', ',', 'b', ')', '}', 'else', '{', 'f', '<-', 'p', '}', '}', 'errc', '<-', 'nil', '}()', 'return', 'datastore', '.', 'LoadStruct', '(', 's', ',', 'f', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Load', 'is', 'implemented', 'for', 'the', 'PropertyLoaderSaver', 'interface', '.', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'keyword', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",20768452
26,"import (    
    ""errors""    
    ""time""    

    ""appengine""    
    ""appengine/datastore""        

    pb ""appengine_internal/datastore""    
    proto ""code.google.com/p/goprotobuf/proto""    
)    

func loadLocalStructuredProperty(dst interface{}, raw_proto []byte) error {    
    var val pb.EntityProto    
    err := proto.Unmarshal(raw_proto, &val)    
    if err != nil {    
        return err    
    }    
    return loadEntity(dst, &val)    
}

//Copied from appengine/datastore since its not exported

// loadEntity loads an EntityProto into PropertyLoadSaver or struct pointer.
func loadEntity(dst interface{}, src *pb.EntityProto) (err error) {
c := make(chan datastore.Property, 32)
 errc := make(chan error, 1)
 defer func() {
    if err == nil {
            err = <-errc
        }
    }()
    go protoToProperties(c, errc, src)
    if e, ok := dst.(datastore.PropertyLoadSaver); ok {
        return e.Load(c)
    }
    return datastore.LoadStruct(dst, c)
}

func protoToProperties(dst chan<- datastore.Property, errc chan<- error, src *pb.EntityProto) {
    defer close(dst)
    props, rawProps := src.Property, src.RawProperty
    for {
        var (
            x       *pb.Property
            noIndex bool
        )
        if len(props) > 0 {
            x, props = props[0], props[1:]
        } else if len(rawProps) > 0 {
            x, rawProps = rawProps[0], rawProps[1:]
            noIndex = true
        } else {
            break
        }

        var value interface{}
        if x.Meaning != nil && *x.Meaning == pb.Property_INDEX_VALUE {
            value = indexValue{x.Value}
        } else {
            var err error
            value, err = propValue(x.Value, x.GetMeaning())
            if err != nil {
                errc <- err
                return
            }
        }
        dst <- datastore.Property{
            Name:     x.GetName(),
            Value:    value,
            NoIndex:  noIndex,
            Multiple: x.GetMultiple(),
        }
    }
    errc <- nil
}

func fromUnixMicro(t int64) time.Time {
    return time.Unix(t/1e6, (t%1e6)*1e3)
}

// propValue returns a Go value that combines the raw PropertyValue with a
// meaning. For example, an Int64Value with GD_WHEN becomes a time.Time.
func propValue(v *pb.PropertyValue, m pb.Property_Meaning) (interface{}, error) {
    switch {
    case v.Int64Value != nil:
        if m == pb.Property_GD_WHEN {
            return fromUnixMicro(*v.Int64Value), nil
        } else {
            return *v.Int64Value, nil
        }
    case v.BooleanValue != nil:
        return *v.BooleanValue, nil
    case v.StringValue != nil:
        if m == pb.Property_BLOB {
            return []byte(*v.StringValue), nil
        } else if m == pb.Property_BLOBKEY {
            return appengine.BlobKey(*v.StringValue), nil
        } else {
            return *v.StringValue, nil
        }
    case v.DoubleValue != nil:
        return *v.DoubleValue, nil
    case v.Referencevalue != nil:
        return nil, errors.New(""Not Implemented!"")
    }
    return nil, nil
}

// indexValue is a Property value that is created when entities are loaded from
// an index, such as from a projection query.
//
// Such Property values do not contain all of the metadata required to be
// faithfully represented as a Go value, and are instead represented as an
// opaque indexValue. Load the properties into a concrete struct type (e.g. by
// passing a struct pointer to Iterator.Next) to reconstruct actual Go values
// of type int, string, time.Time, etc.
type indexValue struct {
    value *pb.PropertyValue
}","['import', '(', '""errors""', '""time""', '""appengine""', '""appengine/datastore""', 'pb', '""appengine_internal/datastore""', 'proto', '""code.google.com/p/goprotobuf/proto""', ')', 'func', 'loadLocalStructuredProperty', '(', 'dst', 'interface', '{},', 'raw_proto', '[]', 'byte', ')', 'error', '{', 'var', 'val', 'pb', '.', 'EntityProto', 'err', ':=', 'proto', '.', 'Unmarshal', '(', 'raw_proto', ',', '&', 'val', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'return', 'loadEntity', '(', 'dst', ',', '&', 'val', ')', '}', '//Copied from appengine/datastore since its not exported', '// loadEntity loads an EntityProto into PropertyLoadSaver or struct pointer.', 'func', 'loadEntity', '(', 'dst', 'interface', '{},', 'src', '*', 'pb', '.', 'EntityProto', ')', '(', 'err', 'error', ')', '{', 'c', ':=', 'make', '(', 'chan', 'datastore', '.', 'Property', ',', '32', ')', 'errc', ':=', 'make', '(', 'chan', 'error', ',', '1', ')', 'defer', 'func', '()', '{', 'if', 'err', '==', 'nil', '{', 'err', '=', '<-', 'errc', '}', '}()', 'go', 'protoToProperties', '(', 'c', ',', 'errc', ',', 'src', ')', 'if', 'e', ',', 'ok', ':=', 'dst', '.(', 'datastore', '.', 'PropertyLoadSaver', ');', 'ok', '{', 'return', 'e', '.', 'Load', '(', 'c', ')', '}', 'return', 'datastore', '.', 'LoadStruct', '(', 'dst', ',', 'c', ')', '}', 'func', 'protoToProperties', '(', 'dst', 'chan', '<-', 'datastore', '.', 'Property', ',', 'errc', 'chan', '<-', 'error', ',', 'src', '*', 'pb', '.', 'EntityProto', ')', '{', 'defer', 'close', '(', 'dst', ')', 'props', ',', 'rawProps', ':=', 'src', '.', 'Property', ',', 'src', '.', 'RawProperty', 'for', '{', 'var', '(', 'x', '*', 'pb', '.', 'Property', 'noIndex', 'bool', ')', 'if', 'len', '(', 'props', ')', '>', '0', '{', 'x', ',', 'props', '=', 'props', '[', '0', '],', 'props', '[', '1', ':]', '}', 'else', 'if', 'len', '(', 'rawProps', ')', '>', '0', '{', 'x', ',', 'rawProps', '=', 'rawProps', '[', '0', '],', 'rawProps', '[', '1', ':]', 'noIndex', '=', 'true', '}', 'else', '{', 'break', '}', 'var', 'value', 'interface', '{}', 'if', 'x', '.', 'Meaning', '!=', 'nil', '&&', '*', 'x', '.', 'Meaning', '==', 'pb', '.', 'Property_INDEX_VALUE', '{', 'value', '=', 'indexValue', '{', 'x', '.', 'Value', '}', '}', 'else', '{', 'var', 'err', 'error', 'value', ',', 'err', '=', 'propValue', '(', 'x', '.', 'Value', ',', 'x', '.', 'GetMeaning', '())', 'if', 'err', '!=', 'nil', '{', 'errc', '<-', 'err', 'return', '}', '}', 'dst', '<-', 'datastore', '.', 'Property', '{', 'Name', ':', 'x', '.', 'GetName', '(),', 'Value', ':', 'value', ',', 'NoIndex', ':', 'noIndex', ',', 'Multiple', ':', 'x', '.', 'GetMultiple', '(),', '}', '}', 'errc', '<-', 'nil', '}', 'func', 'fromUnixMicro', '(', 't', 'int64', ')', 'time', '.', 'Time', '{', 'return', 'time', '.', 'Unix', '(', 't', '1', 'e6', ',', '(', 't', '1', 'e6', ')*', '1', 'e3', ')', '}', '// propValue returns a Go value that combines the raw PropertyValue with a', '// meaning. For example, an Int64Value with GD_WHEN becomes a time.Time.', 'func', 'propValue', '(', 'v', '*', 'pb', '.', 'PropertyValue', ',', 'm', 'pb', '.', 'Property_Meaning', ')', '(', 'interface', '{},', 'error', ')', '{', 'switch', '{', 'case', 'v', '.', 'Int64Value', '!=', 'nil', ':', 'if', 'm', '==', 'pb', '.', 'Property_GD_WHEN', '{', 'return', 'fromUnixMicro', '(*', 'v', '.', 'Int64Value', '),', 'nil', '}', 'else', '{', 'return', '*', 'v', '.', 'Int64Value', ',', 'nil', '}', 'case', 'v', '.', 'BooleanValue', '!=', 'nil', ':', 'return', '*', 'v', '.', 'BooleanValue', ',', 'nil', 'case', 'v', '.', 'StringValue', '!=', 'nil', ':', 'if', 'm', '==', 'pb', '.', 'Property_BLOB', '{', 'return', '[]', 'byte', '(*', 'v', '.', 'StringValue', '),', 'nil', '}', 'else', 'if', 'm', '==', 'pb', '.', 'Property_BLOBKEY', '{', 'return', 'appengine', '.', 'BlobKey', '(*', 'v', '.', 'StringValue', '),', 'nil', '}', 'else', '{', 'return', '*', 'v', '.', 'StringValue', ',', 'nil', '}', 'case', 'v', '.', 'DoubleValue', '!=', 'nil', ':', 'return', '*', 'v', '.', 'DoubleValue', ',', 'nil', 'case', 'v', '.', 'Referencevalue', '!=', 'nil', ':', 'return', 'nil', ',', 'errors', '.', 'New', '(', '""Not Implemented!""', ')', '}', 'return', 'nil', ',', 'nil', '}', '// indexValue is a Property value that is created when entities are loaded from', '// an index, such as from a projection query.', '//', '// Such Property values do not contain all of the metadata required to be', '// faithfully represented as a Go value, and are instead represented as an', '// opaque indexValue. Load the properties into a concrete struct type (e.g. by', '// passing a struct pointer to Iterator.Next) to reconstruct actual Go values', '// of type int, string, time.Time, etc.', 'type', 'indexValue', 'struct', '{', 'value', '*', 'pb', '.', 'PropertyValue', '}']","['keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'identifier', 'string_literal', 'identifier', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Copied', 'from', 'appengine/datastore', 'since', 'its', 'not', 'exported', 'comment', 'loadEntity', 'loads', 'an', 'EntityProto', 'into', 'PropertyLoadSaver', 'or', 'struct', 'pointer', '.', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'decimal_literal', 'identifier', 'operator', 'operator', 'identifier', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'operator', 'comment', 'propValue', 'returns', 'a', 'Go', 'value', 'that', 'combines', 'the', 'raw', 'PropertyValue', 'with', 'a', 'comment', 'meaning', '.', 'For', 'example', ',', 'an', 'Int64Value', 'with', 'GD_WHEN', 'becomes', 'a', 'time.Time', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'indexValue', 'is', 'a', 'Property', 'value', 'that', 'is', 'created', 'when', 'entities', 'are', 'loaded', 'from', 'comment', 'an', 'index', ',', 'such', 'as', 'from', 'a', 'projection', 'query', '.', 'comment', 'comment', 'Such', 'Property', 'values', 'do', 'not', 'contain', 'all', 'of', 'the', 'metadata', 'required', 'to', 'be', 'comment', 'faithfully', 'represented', 'as', 'a', 'Go', 'value', ',', 'and', 'are', 'instead', 'represented', 'as', 'an', 'comment', 'opaque', 'indexValue', '.', 'Load', 'the', 'properties', 'into', 'a', 'concrete', 'struct', 'type', '(', 'e.g', '.', 'by', 'comment', 'passing', 'a', 'struct', 'pointer', 'to', 'Iterator.Next', ')', 'to', 'reconstruct', 'actual', 'Go', 'values', 'comment', 'of', 'type', 'int', ',', 'string', ',', 'time.Time', ',', 'etc', '.', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']",20768452
27,gl.Clear(),"['gl', '.', 'Clear', '()']","['identifier', 'operator', 'identifier', 'operator']",21010854
28,fmt.Println(),"['fmt', '.', 'Println', '()']","['identifier', 'operator', 'identifier', 'operator']",21010854
29,Println(),"['Println', '()']","['identifier', 'operator']",21010854
30,"package main

import (
    f ""fmt""
    ""github.com/go-gl/gl""
    glfw ""github.com/go-gl/glfw3""
    ""math""
    ""time""
)

var (
    numRendered = 0
    lastDraw = time.Now()
    fps = 60
    seconds = time.Now()
    attr gl.AttribLocation
)

func main(){
    if !glfw.Init(){
        f.Println(""Failed to init glfw"")
        panic(""Cannot initialize glfw library"")
    }
    defer glfw.Terminate()

    //glfw.WindowHint(glfw.DepthBits, 16)
    window, err := glfw.CreateWindow(300, 300, ""Wander"", nil, nil)
    if err != nil{
        panic(err)
    }

    window.SetFramebufferSizeCallback(reshape)
    window.SetKeyCallback(key)
    window.MakeContextCurrent()
    glfw.SwapInterval(1)
    width, height := window.GetFramebufferSize()
    reshape(window, width, height)

    if gl.Init() != 0 {
        panic(""Failed to init GL"")
    }

    prog := setupProgram()
    defer prog.Delete()
    prog.Use()

    attr = prog.GetAttribLocation(""offset"")

    setup()
    for !window.ShouldClose() {
        if shouldRender(){
            draw()
        }
        animate()
        window.SwapBuffers()
        glfw.PollEvents()
    }
}
func setupProgram()(prog gl.Program){
    vertexSource := `
        #version 430 core

        layout (location = 0) in vec4 offset;

        const vec4 vertecies[3] = vec4[3](
            vec4(0.25, 0.5, 0.5, 1.0),
            vec4(-0.25, 0.5, 0.5, 1.0),
            vec4(-0.25, -0.5, 0.5, 1.0)
        );

        void main(){
            gl_Position = vertecies[gl_VertexID] + offset;
        }`
    fragmentSource := `
        #version 430 core

        out vec4 color;

        void main(){
            color = vec4(1.0, 0.0, 0.0, 0.0); // red, blue, green, ??
        }`
    vert, frag := gl.CreateShader(gl.VERTEX_SHADER), gl.CreateShader(gl.FRAGMENT_SHADER)
    defer vert.Delete()
    defer frag.Delete()
    vert.Source(vertexSource)
    frag.Source(fragmentSource)
    vert.Compile()
    frag.Compile()

    prog = gl.CreateProgram()
    prog.AttachShader(vert)
    prog.AttachShader(frag)
    prog.Link()
    prog.Use()
    f.Println(prog.GetInfoLog())

    return
}

func key(window *glfw.Window, k glfw.Key, s int, action glfw.Action, mods glfw.ModifierKey) {
    if action != glfw.Press {
        return
    }

    switch glfw.Key(k){
        case glfw.KeyEscape:
            window.SetShouldClose(true);
        default:
            return
    }
}

func reshape(window *glfw.Window, width, height int){
    gl.Viewport(0, 0, width, height)
}
func draw(){
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
    gl.DrawArrays(gl.TRIANGLES, 0, 3)
}
func shouldRender() bool{
    if int(time.Since(lastDraw) * time.Second) >= 1000/fps{
        //f.Println(""rendering for the "", numRendered, "" time"")
        numRendered++
        lastDraw = time.Now()
        return true
    }

    return false;
}

func animate(){
    now := float64(time.Since(seconds))

    offset := [4]float32{
        float32(math.Sin(now)),
        float32(math.Cos(now)),
        0.0,0.0}
    attr.Attrib4fv(&offset)

    red := gl.GLclampf(math.Sin(now) * 0.25 + 0.75)
    blue := gl.GLclampf(math.Cos(now) * 0.25 + 0.75)
    green := gl.GLclampf(time.Since(seconds))
    _ = green;

    gl.ClearColor(red, blue, 0.2, 0.0)
}","['package', 'main', 'import', '(', 'f', '""fmt""', '""github.com/go-gl/gl""', 'glfw', '""github.com/go-gl/glfw3""', '""math""', '""time""', ')', 'var', '(', 'numRendered', '=', '0', 'lastDraw', '=', 'time', '.', 'Now', '()', 'fps', '=', '60', 'seconds', '=', 'time', '.', 'Now', '()', 'attr', 'gl', '.', 'AttribLocation', ')', 'func', 'main', '(){', 'if', '!', 'glfw', '.', 'Init', '(){', 'f', '.', 'Println', '(', '""Failed to init glfw""', ')', 'panic', '(', '""Cannot initialize glfw library""', ')', '}', 'defer', 'glfw', '.', 'Terminate', '()', '//glfw.WindowHint(glfw.DepthBits, 16)', 'window', ',', 'err', ':=', 'glfw', '.', 'CreateWindow', '(', '300', ',', '300', ',', '""Wander""', ',', 'nil', ',', 'nil', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'window', '.', 'SetFramebufferSizeCallback', '(', 'reshape', ')', 'window', '.', 'SetKeyCallback', '(', 'key', ')', 'window', '.', 'MakeContextCurrent', '()', 'glfw', '.', 'SwapInterval', '(', '1', ')', 'width', ',', 'height', ':=', 'window', '.', 'GetFramebufferSize', '()', 'reshape', '(', 'window', ',', 'width', ',', 'height', ')', 'if', 'gl', '.', 'Init', '()', '!=', '0', '{', 'panic', '(', '""Failed to init GL""', ')', '}', 'prog', ':=', 'setupProgram', '()', 'defer', 'prog', '.', 'Delete', '()', 'prog', '.', 'Use', '()', 'attr', '=', 'prog', '.', 'GetAttribLocation', '(', '""offset""', ')', 'setup', '()', 'for', '!', 'window', '.', 'ShouldClose', '()', '{', 'if', 'shouldRender', '(){', 'draw', '()', '}', 'animate', '()', 'window', '.', 'SwapBuffers', '()', 'glfw', '.', 'PollEvents', '()', '}', '}', 'func', 'setupProgram', '()(', 'prog', 'gl', '.', 'Program', '){', 'vertexSource', ':=', 'version', '430', 'core', 'layout', '(', 'location', '=', '0', ')', 'in', 'vec4', 'offset', ';', 'const', 'vec4', 'vertecies', '[', '3', ']', '=', 'vec4', '[', '3', '](', 'vec4', '(', '0', '.', '25', ',', '0', '.', '5', ',', '0', '.', '5', ',', '1', '.', '0', '),', 'vec4', '(-', '0', '.', '25', ',', '0', '.', '5', ',', '0', '.', '5', ',', '1', '.', '0', '),', 'vec4', '(-', '0', '.', '25', ',', '-', '0', '.', '5', ',', '0', '.', '5', ',', '1', '.', '0', ')', ');', 'void', 'main', '(){', 'gl_Position', '=', 'vertecies', '[', 'gl_VertexID', ']', '+', 'offset', ';', '}', 'fragmentSource', ':=', 'version', '430', 'core', 'out', 'vec4', 'color', ';', 'void', 'main', '(){', 'color', '=', 'vec4', '(', '1', '.', '0', ',', '0', '.', '0', ',', '0', '.', '0', ',', '0', '.', '0', ');', '// red, blue, green, ??', '}', 'vert', ',', 'frag', ':=', 'gl', '.', 'CreateShader', '(', 'gl', '.', 'VERTEX_SHADER', '),', 'gl', '.', 'CreateShader', '(', 'gl', '.', 'FRAGMENT_SHADER', ')', 'defer', 'vert', '.', 'Delete', '()', 'defer', 'frag', '.', 'Delete', '()', 'vert', '.', 'Source', '(', 'vertexSource', ')', 'frag', '.', 'Source', '(', 'fragmentSource', ')', 'vert', '.', 'Compile', '()', 'frag', '.', 'Compile', '()', 'prog', '=', 'gl', '.', 'CreateProgram', '()', 'prog', '.', 'AttachShader', '(', 'vert', ')', 'prog', '.', 'AttachShader', '(', 'frag', ')', 'prog', '.', 'Link', '()', 'prog', '.', 'Use', '()', 'f', '.', 'Println', '(', 'prog', '.', 'GetInfoLog', '())', 'return', '}', 'func', 'key', '(', 'window', '*', 'glfw', '.', 'Window', ',', 'k', 'glfw', '.', 'Key', ',', 's', 'int', ',', 'action', 'glfw', '.', 'Action', ',', 'mods', 'glfw', '.', 'ModifierKey', ')', '{', 'if', 'action', '!=', 'glfw', '.', 'Press', '{', 'return', '}', 'switch', 'glfw', '.', 'Key', '(', 'k', '){', 'case', 'glfw', '.', 'KeyEscape', ':', 'window', '.', 'SetShouldClose', '(', 'true', ');', 'default', ':', 'return', '}', '}', 'func', 'reshape', '(', 'window', '*', 'glfw', '.', 'Window', ',', 'width', ',', 'height', 'int', '){', 'gl', '.', 'Viewport', '(', '0', ',', '0', ',', 'width', ',', 'height', ')', '}', 'func', 'draw', '(){', 'gl', '.', 'Clear', '(', 'gl', '.', 'COLOR_BUFFER_BIT', '|', 'gl', '.', 'DEPTH_BUFFER_BIT', ')', 'gl', '.', 'DrawArrays', '(', 'gl', '.', 'TRIANGLES', ',', '0', ',', '3', ')', '}', 'func', 'shouldRender', '()', 'bool', '{', 'if', 'int', '(', 'time', '.', 'Since', '(', 'lastDraw', ')', '*', 'time', '.', 'Second', ')', '>=', '1000', 'fps', '{', '//f.Println(""rendering for the "", numRendered, "" time"")', 'numRendered', '++', 'lastDraw', '=', 'time', '.', 'Now', '()', 'return', 'true', '}', 'return', 'false', ';', '}', 'func', 'animate', '(){', 'now', ':=', 'float64', '(', 'time', '.', 'Since', '(', 'seconds', '))', 'offset', ':=', '[', '4', ']', 'float32', '{', 'float32', '(', 'math', '.', 'Sin', '(', 'now', ')),', 'float32', '(', 'math', '.', 'Cos', '(', 'now', ')),', '0', '.', '0', ',', '0', '.', '0', '}', 'attr', '.', 'Attrib4fv', '(&', 'offset', ')', 'red', ':=', 'gl', '.', 'GLclampf', '(', 'math', '.', 'Sin', '(', 'now', ')', '*', '0', '.', '25', '+', '0', '.', '75', ')', 'blue', ':=', 'gl', '.', 'GLclampf', '(', 'math', '.', 'Cos', '(', 'now', ')', '*', '0', '.', '25', '+', '0', '.', '75', ')', 'green', ':=', 'gl', '.', 'GLclampf', '(', 'time', '.', 'Since', '(', 'seconds', '))', '_', '=', 'green', ';', 'gl', '.', 'ClearColor', '(', 'red', ',', 'blue', ',', '0', '.', '2', ',', '0', '.', '0', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'identifier', 'string_literal', 'string_literal', 'identifier', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'glfw.WindowHint', '(', 'glfw.DepthBits', ',', '16', ')', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'decimal_literal', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'decimal_literal', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', 'red', ',', 'blue', ',', 'green', ',', '?', '?', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'comment', 'f.Println', '(', '``', 'rendering', 'for', 'the', '``', ',', 'numRendered', ',', '``', 'time', ""''"", ')', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator']",21010854
31,"package main

import ""fmt""

func main() {
    a := []int{0, 1, 2, 3}
    for i := 0; i < len(a); {
        v := a[i]
        fmt.Printf(""i: %d v: %d\n"", i, v)
        fmt.Println(""before"", a)
        if v%2 == 0 {
            // delete a[i]
            a = append(a[:i], a[i+1:]...)
        } else {
            i++
        }
        fmt.Println(""after"", a, ""\n"")
    }
    fmt.Println(""final"", a)

}","['package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'a', ':=', '[]', 'int', '{', '0', ',', '1', ',', '2', ',', '3', '}', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'a', ');', '{', 'v', ':=', 'a', '[', 'i', ']', 'fmt', '.', 'Printf', '(', '""i: %d v: %d\\n""', ',', 'i', ',', 'v', ')', 'fmt', '.', 'Println', '(', '""before""', ',', 'a', ')', 'if', 'v', '2', '==', '0', '{', '// delete a[i]', 'a', '=', 'append', '(', 'a', '[:', 'i', '],', 'a', '[', 'i', '+', '1', ':]...)', '}', 'else', '{', 'i', '++', '}', 'fmt', '.', 'Println', '(', '""after"", a, ""\\n""', ')', '}', 'fmt', '.', 'Println', '(', '""final""', ',', 'a', ')', '}']","['keyword', 'identifier', 'keyword', 'string_literal', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', 'delete', 'a', '[', 'i', ']', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator']",21154561
32,"package main

import ""fmt""

func main() {
    a := []int{0, 1, 2, 3}
    for i := len(a) - 1; i >= 0; i-- {
        v := a[i]
        fmt.Printf(""i: %d v: %d\n"", i, v)
        fmt.Println(""before"", a)
        if v%2 == 0 {
            // delete a[i]
            a = append(a[:i], a[i+1:]...)
        }
        fmt.Println(""after"", a, ""\n"")
    }
    fmt.Println(""final"", a)

}","['package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'a', ':=', '[]', 'int', '{', '0', ',', '1', ',', '2', ',', '3', '}', 'for', 'i', ':=', 'len', '(', 'a', ')', '-', '1', ';', 'i', '>=', '0', ';', 'i', '--', '{', 'v', ':=', 'a', '[', 'i', ']', 'fmt', '.', 'Printf', '(', '""i: %d v: %d\\n""', ',', 'i', ',', 'v', ')', 'fmt', '.', 'Println', '(', '""before""', ',', 'a', ')', 'if', 'v', '2', '==', '0', '{', '// delete a[i]', 'a', '=', 'append', '(', 'a', '[:', 'i', '],', 'a', '[', 'i', '+', '1', ':]...)', '}', 'fmt', '.', 'Println', '(', '""after"", a, ""\\n""', ')', '}', 'fmt', '.', 'Println', '(', '""final""', ',', 'a', ')', '}']","['keyword', 'identifier', 'keyword', 'string_literal', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', 'delete', 'a', '[', 'i', ']', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator']",21154561
33,"package main                                                                                                                                                                                      

import (                                                                                                                                                                                          
    ""io/ioutil""                                                                                                                                                                                   
    //""unicode/utf8""                                                                                                                                                                              
    //""fmt""                                                                                                                                                                                       

    ""gopkg.in/yaml.v1""                                                                                                                                                                        
)                                                                                                                                                                                                 

type Subtitle struct {                                                                                                                                                                            
    Line string                                                                                                                                                                                   
}                                                                                                                                                                                                 

func main() {                                                                                                                                                                                     
    filename := ""subtitle.yaml""                                                                                                                                                                   
    in, _ := ioutil.ReadFile(filename)                                                                                                                                                            
    var subtitle Subtitle                                                                                                                                                                         
    _ = goyaml.Unmarshal(in, &subtitle)                                                                                                                                                           
    out, _ := goyaml.Marshal(&subtitle)                                                                                                                                                           

    //for len(out) > 0 { // For debugging, see what the runes are                                                                                                                                                                         
    //  r, size := utf8.DecodeRune(out)                                                                                                                                                             
    //  fmt.Printf(""%c "", r)                                                                                                                                                              
    //  out = out[size:]                                                                                                                                                                            
    //}                                                                                                                                                                                           

    _ = ioutil.WriteFile(filename, out, 0644)                                                                                                                                                     
}","['package', 'main', 'import', '(', '""io/ioutil""', '//""unicode/utf8""                                                                                                                                                                              ', '//""fmt""                                                                                                                                                                                       ', '""gopkg.in/yaml.v1""', ')', 'type', 'Subtitle', 'struct', '{', 'Line', 'string', '}', 'func', 'main', '()', '{', 'filename', ':=', '""subtitle.yaml""', 'in', ',', '_', ':=', 'ioutil', '.', 'ReadFile', '(', 'filename', ')', 'var', 'subtitle', 'Subtitle', '_', '=', 'go', 'yaml', '.', 'Unmarshal', '(', 'in', ',', '&', 'subtitle', ')', 'out', ',', '_', ':=', 'go', 'yaml', '.', 'Marshal', '(&', 'subtitle', ')', '//for len(out) > 0 { // For debugging, see what the runes are                                                                                                                                                                         ', '//  r, size := utf8.DecodeRune(out)                                                                                                                                                             ', '//  fmt.Printf(""%c "", r)                                                                                                                                                              ', '//  out = out[size:]                                                                                                                                                                            ', '//}                                                                                                                                                                                           ', '_', '=', 'ioutil', '.', 'WriteFile', '(', 'filename', ',', 'out', ',', '0644', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'comment', '``', 'unicode/utf8', ""''"", 'comment', '``', 'fmt', ""''"", 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'for', 'len', '(', 'out', ')', '>', '0', '{', 'For', 'debugging', ',', 'see', 'what', 'the', 'runes', 'are', 'comment', 'r', ',', 'size', ':', '=', 'utf8.DecodeRune', '(', 'out', ')', 'comment', 'fmt.Printf', '(', '``', '%', 'c', '``', ',', 'r', ')', 'comment', 'out', '=', 'out', '[', 'size', ':', ']', 'comment', '}', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator']",21696845
34,"package main

import (
    ""flag""
    ""fmt""
    ""github.com/fitstar/falcore""
    ""github.com/fitstar/falcore/filter""
    ""net/http""
    ""os""
    ""os/signal""
    ""syscall""
)

// Command line options
var (
    port = flag.Int(""port"", 8000, ""the port to listen on"")
    path = flag.String(""base"", ""./www"", ""the path to serve files from"")
)

// very simple request filter
func Filter(req *falcore.Request) *http.Response {
    pid := syscall.Getpid()
    fmt.Println(pid, ""GET"", req.HttpRequest.URL.Path)

    // return falcore.StringResponse(request.HttpRequest, 200, nil, ""OK\n"")
    if req.HttpRequest.URL.Path == ""/"" {
        req.HttpRequest.URL.Path = ""AppNexus-Interesting.txt"" //""/summary.xml""
    }
    return nil
}

// flag to accept a socket file descriptor
var socketFd = flag.Int(""socket"", -1, ""Socket file descriptor"")

func main() {
    pid := syscall.Getpid()
    flag.Parse()
    fmt.Println(""Falcore hot restart running with pid:"", pid, ""to hot restart, issue the kill -1"", pid, ""command"")

    // create the pipeline
    pipeline := falcore.NewPipeline()

    // upstream filters
    pipeline.Upstream.PushBack(falcore.NewRequestFilter(Filter))

    // Serve files
    pipeline.Upstream.PushBack(&filter.FileFilter{
        BasePath: *path,
    })

    // downstream filters
    pipeline.Downstream.PushBack(filter.NewCompressionFilter(nil))

    // create the server with the pipeline
    srv := falcore.NewServer(*port, pipeline)

    // if passed the socket file descriptor, setup the listener that way
    // if you don't have it, the default is to create the socket listener
    // with the data passed to falcore.NewServer above (happens in ListenAndServer())
    if *socketFd != -1 {
        // I know I'm a child process if I get here so I can signal the parent when I'm ready to take over
        go childReady(srv)
        fmt.Printf(""%v Got socket FD: %v\n"", pid, *socketFd)
        srv.FdListen(*socketFd)
    }

    // using signals to manage the restart lifecycle
    go handleSignals(srv)

    // start the server
    // this is normally blocking forever unless you send lifecycle commands
    if err := srv.ListenAndServe(); err != nil {
        fmt.Printf(""%v Could not start server: %v"", pid, err)
    }
    fmt.Printf(""%v Exiting now\n"", pid)
}

// blocks on the server ready and when ready, it sends
// a signal to the parent so that it knows it cna now exit
func childReady(srv *falcore.Server) {
    pid := syscall.Getpid()
    // wait for the ready signal
    <-srv.AcceptReady
    // grab the parent and send a signal that the child is ready
    parent := syscall.Getppid()
    fmt.Printf(""%v Kill parent %v with SIGUSR1\n"", pid, parent)
    syscall.Kill(parent, syscall.SIGUSR1)
}

// setup and fork/exec myself. Make sure to keep open important FD's that won't get re-created by the child
// specifically, std* and your listen socket
func forker(srv *falcore.Server) (pid int, err error) {
    fmt.Printf(""Forking now with socket: %v\n"", srv.SocketFd())
    mypath := os.Args[0]
    args := []string{mypath, ""-socket"", fmt.Sprintf(""%v"", srv.SocketFd())}
    attr := new(syscall.ProcAttr)
    attr.Files = append([]uintptr(nil), 0, 1, 2, uintptr(srv.SocketFd()))
    pid, err = syscall.ForkExec(mypath, args, attr)
    return
}

// Handle lifecycle events
func handleSignals(srv *falcore.Server) {
    var sig os.Signal
    var sigChan = make(chan os.Signal)
    signal.Notify(sigChan, syscall.SIGHUP, syscall.SIGUSR1, syscall.SIGINT, syscall.SIGTERM, syscall.SIGTSTP)
    pid := syscall.Getpid()
    for {
        sig = <-sigChan
        switch sig {
        case syscall.SIGHUP:
            // send this to the paraent process to initiate the restart
            fmt.Println(pid, ""Received SIGHUP.  forking."")
            cpid, err := forker(srv)
            fmt.Println(pid, ""Forked pid:"", cpid, ""errno:"", err)
        case syscall.SIGUSR1:
            // child sends this back to the parent when it's ready to Accept
            fmt.Println(pid, ""Received SIGUSR1.  Stopping accept."")
            srv.StopAccepting()
        case syscall.SIGINT:
            fmt.Println(pid, ""Received SIGINT.  Shutting down."")
            os.Exit(0)
        case syscall.SIGTERM:
            fmt.Println(pid, ""Received SIGTERM.  Terminating."")
            os.Exit(0)
        case syscall.SIGTSTP:
            fmt.Println(pid, ""Received SIGTSTP.  Stopping."")
            syscall.Kill(pid, syscall.SIGSTOP)
        default:
            fmt.Println(pid, ""Received"", sig, "": ignoring"")
        }
    }
}","['package', 'main', 'import', '(', '""flag""', '""fmt""', '""github.com/fitstar/falcore""', '""github.com/fitstar/falcore/filter""', '""net/http""', '""os""', '""os/signal""', '""syscall""', ')', '// Command line options', 'var', '(', 'port', '=', 'flag', '.', 'Int', '(', '""port"", 8000, ""the port to listen on""', ')', 'path', '=', 'flag', '.', 'String', '(', '""base"", ""./www"", ""the path to serve files from""', ')', ')', '// very simple request filter', 'func', 'Filter', '(', 'req', '*', 'falcore', '.', 'Request', ')', '*', 'http', '.', 'Response', '{', 'pid', ':=', 'syscall', '.', 'Getpid', '()', 'fmt', '.', 'Println', '(', 'pid', ',', '""GET""', ',', 'req', '.', 'HttpRequest', '.', 'URL', '.', 'Path', ')', '// return falcore.StringResponse(request.HttpRequest, 200, nil, ""OK\\n"")', 'if', 'req', '.', 'HttpRequest', '.', 'URL', '.', 'Path', '==', '""/""', '{', 'req', '.', 'HttpRequest', '.', 'URL', '.', 'Path', '=', '""AppNexus-Interesting.txt"" //""/summary.xml""', '}', 'return', 'nil', '}', '// flag to accept a socket file descriptor', 'var', 'socketFd', '=', 'flag', '.', 'Int', '(', '""socket"", -1, ""Socket file descriptor""', ')', 'func', 'main', '()', '{', 'pid', ':=', 'syscall', '.', 'Getpid', '()', 'flag', '.', 'Parse', '()', 'fmt', '.', 'Println', '(', '""Falcore hot restart running with pid:"", pid, ""to hot restart, issue the kill -1"", pid, ""command""', ')', '// create the pipeline', 'pipeline', ':=', 'falcore', '.', 'NewPipeline', '()', '// upstream filters', 'pipeline', '.', 'Upstream', '.', 'PushBack', '(', 'falcore', '.', 'NewRequestFilter', '(', 'Filter', '))', '// Serve files', 'pipeline', '.', 'Upstream', '.', 'PushBack', '(&', 'filter', '.', 'FileFilter', '{', 'BasePath', ':', '*', 'path', ',', '})', '// downstream filters', 'pipeline', '.', 'Downstream', '.', 'PushBack', '(', 'filter', '.', 'NewCompressionFilter', '(', 'nil', '))', '// create the server with the pipeline', 'srv', ':=', 'falcore', '.', 'NewServer', '(*', 'port', ',', 'pipeline', ')', '// if passed the socket file descriptor, setup the listener that way', ""// if you don't have it, the default is to create the socket listener"", '// with the data passed to falcore.NewServer above (happens in ListenAndServer())', 'if', '*', 'socketFd', '!=', '-', '1', '{', ""// I know I'm a child process if I get here so I can signal the parent when I'm ready to take over"", 'go', 'childReady', '(', 'srv', ')', 'fmt', '.', 'Printf', '(', '""%v Got socket FD: %v\\n""', ',', 'pid', ',', '*', 'socketFd', ')', 'srv', '.', 'FdListen', '(*', 'socketFd', ')', '}', '// using signals to manage the restart lifecycle', 'go', 'handleSignals', '(', 'srv', ')', '// start the server', '// this is normally blocking forever unless you send lifecycle commands', 'if', 'err', ':=', 'srv', '.', 'ListenAndServe', '();', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""%v Could not start server: %v""', ',', 'pid', ',', 'err', ')', '}', 'fmt', '.', 'Printf', '(', '""%v Exiting now\\n""', ',', 'pid', ')', '}', '// blocks on the server ready and when ready, it sends', '// a signal to the parent so that it knows it cna now exit', 'func', 'childReady', '(', 'srv', '*', 'falcore', '.', 'Server', ')', '{', 'pid', ':=', 'syscall', '.', 'Getpid', '()', '// wait for the ready signal', '<-', 'srv', '.', 'AcceptReady', '// grab the parent and send a signal that the child is ready', 'parent', ':=', 'syscall', '.', 'Getppid', '()', 'fmt', '.', 'Printf', '(', '""%v Kill parent %v with SIGUSR1\\n""', ',', 'pid', ',', 'parent', ')', 'syscall', '.', 'Kill', '(', 'parent', ',', 'syscall', '.', 'SIGUSR1', ')', '}', ""// setup and fork/exec myself. Make sure to keep open important FD's that won't get re-created by the child"", '// specifically, std* and your listen socket', 'func', 'for', 'ker', '(', 'srv', '*', 'falcore', '.', 'Server', ')', '(', 'pid', 'int', ',', 'err', 'error', ')', '{', 'fmt', '.', 'Printf', '(', '""Forking now with socket: %v\\n""', ',', 'srv', '.', 'SocketFd', '())', 'mypath', ':=', 'os', '.', 'Args', '[', '0', ']', 'args', ':=', '[]', 'string', '{', 'mypath', ',', '""-socket"", fmt.Sprintf(""%v""', ',', 'srv', '.', 'SocketFd', '())}', 'attr', ':=', 'new', '(', 'syscall', '.', 'ProcAttr', ')', 'attr', '.', 'Files', '=', 'append', '([]', 'uintptr', '(', 'nil', '),', '0', ',', '1', ',', '2', ',', 'uintptr', '(', 'srv', '.', 'SocketFd', '()))', 'pid', ',', 'err', '=', 'syscall', '.', 'ForkExec', '(', 'mypath', ',', 'args', ',', 'attr', ')', 'return', '}', '// Handle lifecycle events', 'func', 'handleSignals', '(', 'srv', '*', 'falcore', '.', 'Server', ')', '{', 'var', 'sig', 'os', '.', 'Signal', 'var', 'sigChan', '=', 'make', '(', 'chan', 'os', '.', 'Signal', ')', 'signal', '.', 'Notify', '(', 'sigChan', ',', 'syscall', '.', 'SIGHUP', ',', 'syscall', '.', 'SIGUSR1', ',', 'syscall', '.', 'SIGINT', ',', 'syscall', '.', 'SIGTERM', ',', 'syscall', '.', 'SIGTSTP', ')', 'pid', ':=', 'syscall', '.', 'Getpid', '()', 'for', '{', 'sig', '=', '<-', 'sigChan', 'switch', 'sig', '{', 'case', 'syscall', '.', 'SIGHUP', ':', '// send this to the paraent process to initiate the restart', 'fmt', '.', 'Println', '(', 'pid', ',', '""Received SIGHUP.  forking.""', ')', 'cpid', ',', 'err', ':=', 'for', 'ker', '(', 'srv', ')', 'fmt', '.', 'Println', '(', 'pid', ',', '""Forked pid:"", cpid, ""errno:""', ',', 'err', ')', 'case', 'syscall', '.', 'SIGUSR1', ':', ""// child sends this back to the parent when it's ready to Accept"", 'fmt', '.', 'Println', '(', 'pid', ',', '""Received SIGUSR1.  Stopping accept.""', ')', 'srv', '.', 'StopAccepting', '()', 'case', 'syscall', '.', 'SIGINT', ':', 'fmt', '.', 'Println', '(', 'pid', ',', '""Received SIGINT.  Shutting down.""', ')', 'os', '.', 'Exit', '(', '0', ')', 'case', 'syscall', '.', 'SIGTERM', ':', 'fmt', '.', 'Println', '(', 'pid', ',', '""Received SIGTERM.  Terminating.""', ')', 'os', '.', 'Exit', '(', '0', ')', 'case', 'syscall', '.', 'SIGTSTP', ':', 'fmt', '.', 'Println', '(', 'pid', ',', '""Received SIGTSTP.  Stopping.""', ')', 'syscall', '.', 'Kill', '(', 'pid', ',', 'syscall', '.', 'SIGSTOP', ')', 'default', ':', 'fmt', '.', 'Println', '(', 'pid', ',', '""Received"", sig, "": ignoring""', ')', '}', '}', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'comment', 'Command', 'line', 'options', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'very', 'simple', 'request', 'filter', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'return', 'falcore.StringResponse', '(', 'request.HttpRequest', ',', '200', ',', 'nil', ',', '``', 'OK\\n', ""''"", ')', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'comment', 'flag', 'to', 'accept', 'a', 'socket', 'file', 'descriptor', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'create', 'the', 'pipeline', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'upstream', 'filters', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Serve', 'files', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'comment', 'downstream', 'filters', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'create', 'the', 'server', 'with', 'the', 'pipeline', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'if', 'passed', 'the', 'socket', 'file', 'descriptor', ',', 'setup', 'the', 'listener', 'that', 'way', 'comment', 'if', 'you', 'do', ""n't"", 'have', 'it', ',', 'the', 'default', 'is', 'to', 'create', 'the', 'socket', 'listener', 'comment', 'with', 'the', 'data', 'passed', 'to', 'falcore.NewServer', 'above', '(', 'happens', 'in', 'ListenAndServer', '(', ')', ')', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'comment', 'I', 'know', 'I', ""'m"", 'a', 'child', 'process', 'if', 'I', 'get', 'here', 'so', 'I', 'can', 'signal', 'the', 'parent', 'when', 'I', ""'m"", 'ready', 'to', 'take', 'over', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'using', 'signals', 'to', 'manage', 'the', 'restart', 'lifecycle', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'start', 'the', 'server', 'comment', 'this', 'is', 'normally', 'blocking', 'forever', 'unless', 'you', 'send', 'lifecycle', 'commands', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'comment', 'blocks', 'on', 'the', 'server', 'ready', 'and', 'when', 'ready', ',', 'it', 'sends', 'comment', 'a', 'signal', 'to', 'the', 'parent', 'so', 'that', 'it', 'knows', 'it', 'cna', 'now', 'exit', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'wait', 'for', 'the', 'ready', 'signal', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'grab', 'the', 'parent', 'and', 'send', 'a', 'signal', 'that', 'the', 'child', 'is', 'ready', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'setup', 'and', 'fork/exec', 'myself', '.', 'Make', 'sure', 'to', 'keep', 'open', 'important', 'FD', ""'s"", 'that', 'wo', ""n't"", 'get', 're-created', 'by', 'the', 'child', 'comment', 'specifically', ',', 'std*', 'and', 'your', 'listen', 'socket', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'Handle', 'lifecycle', 'events', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'send', 'this', 'to', 'the', 'paraent', 'process', 'to', 'initiate', 'the', 'restart', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'child', 'sends', 'this', 'back', 'to', 'the', 'parent', 'when', 'it', ""'s"", 'ready', 'to', 'Accept', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'operator']",21730796
35,"package main

    import (
        ""encoding/json""

    )

    type LocationReadable struct {
        District string
        City     string
        State    string
    }

    type Locale struct {
        Location         string
        CountryCode      string
        CurrencyId       string
        CurrencySymbol   string
        LocationReadable LocationReadable
    }

    type Media struct {
        Image string
        Video string
    }

    type Variations struct {
        FixedPrice float64
        Media      Media
        Quantity   int
    }

    type PaymentData struct {
        PaymentName    string
        PaymentService string
    }

    type Payment struct {
        Online  PaymentData
        Offline PaymentData
    }

    type Shipping struct {
        ShippingService        string
        ShippingName           string
        ShippingCost           float64
        HandlingTimeMax        int
        DispatchTimeMin        int
        DispatchTimeMax        int
        ShippingAdditionalCost int
    }
    type Item []struct {
        _version    string
        CategoryId  string
        Title       string
        Media       Media
        SellerId    string
        Locale      Locale
        ListingType string
        Payment     Payment
        StartTime   string
        EndTime     string
        Shipping    Shipping
        TitleSlug   string
        Variations  Variations
        _fpaiStatus string
    }
    func main(){
     itemInfoR := `{""locale"":{""location"":""51.51121389999999,-0.11982439999997041"",""countryCode"":""GB"",""currencyId"":""GBP"",""currencySymbol"":""Â£"",""locationReadable"":{""district"":""City of Westminster"",""city"":""London"",""state"":""Greater London""}},""_version"":""serving"",""categoryId"":[""Root"",""Cameras \u0026 Photo"",""Digital Cameras""],""title"":""many pictures"",""media"":{""image"":[""//lh5.ggpht.com/O_o_N6CFkClY5AV0-LqntpyFjor7Of4u23ZcK7lYwc2uY1ea7GWi61VDJZCB7UCb79svkjKPHIenqwEUhjHi0jdIQnnl6z_p03yktPUB1FBHezIQ"",""//lh6.ggpht.com/ih3q2d7CenGLPyupH9FpfsoJQWQpw1i8wWA2Kd26bFnSF2fbnKyGU9WePIhCgEeqw5p6YMVmFi1c9oS0Ag93aF_oZ3ZiwK7fQuSYIrZ9VhgXbrTHkw"",""//lh6.ggpht.com/7RJRsapsnwWL3_KiLIjMz4QojDzUvsztXtvKTFvIfde_AHccDnOibAvXRN73tTB4SeHzlj8S1LWxbYwwWFGn9elfCKdSb8BUIU5QJY1LO791HutQ"",""//lh6.ggpht.com/qAtjgyHAB734Ox_4NC_fa-ZRqrCjCmJu0Tp8bo-HMO88duv8l4hhuv2REBkB--yneFzOL7annecVlGty-YsKouondiOFVnAZWzjpdrfsGfbL6wh2"",""//lh3.ggpht.com/dWUbASepwHF4lHaXIPnpv4BNm2pCml9MlJt7s86s1cpu-PsYNmS0yQmKFKTM38q_oMLW_YJMJ19civ2gVViKAGYcZylRW7jN3w77AJvhzS6JE2g"",""//lh6.ggpht.com/9aXLmPRVeZnxkwvNb3mWTF8kvfEY_lho_lOVVc9AbNqLb8GQmiS_XXVZ3OKqMv2pxgYSayMYPPRh6ACYyh0H8KtS8mPD6MKUkEajwxkTtp5Q4Lo"",""//lh3.ggpht.com/FG_QXZPHJ2tTYwI_t5Fg1KqivglVg9RlJn0JRsu9Ox8vJ7IcBirb2IV_I1LL_WVOMxfTuBBSDLMlrw9v0MCAdmnPCR29sCbRGjhm6zEfIH-3q2QSdw"",""//lh4.ggpht.com/Y23DqORrVkM2m55f-rq5_BBrlkvQg4uX7AsAt-ixhMobjK_SFgFaDfktgLhkNsyKwSr9HcF8iiGY3Nw0xOKXG1sn6wyAWg_qsolmKjVOrM5V5mIR"",""//lh6.ggpht.com/mQ62Ly-DjMKPMzU1OcSPJ7SLBqym0uBjawlkTHfmb-HOKaD56dnitk1duwPFJVdbi0GUpd63RQvr2VMpHp6S1OQ3di-hq4-JPeRoS5FJzksXSvW_"",""//lh3.ggpht.com/dqWjWPcNsvlR1tMC_agizX19f9MDiNGWFYTYVn4kjJxzIIkEe0mLzNcvS62zVJxAOaitT-IgaUfZ-Ze23BgzbqYY-l600i_LbVe35Uinz6sXIyoB"",""//lh6.ggpht.com/xhSdFc9uHgghs_6gf3seUWYM-PG2oLmjTrpF7ptEEMqaIrQIa8VPfC6tXE7f3M13eZvDXYqMW_k0AHO5vwCEPNp-iObixskd_lBaKNfz3MH3SNQ"",""//lh5.ggpht.com/kYeoKPoZGJCow-G1FhnD8kzVjNjbQA8-Kyj8eAh0HL-fMZX9tTeFPQikTZdSU0kks4-5Ui54cZF2CjGut9vfMJAVDKIq3T-bAQewCxvfl2120tH5zQ"",""//lh5.ggpht.com/4qUl3d-G9EPBzcYKrimNsWhQw7CmONV0jgfVhxFgB9mEU_QLRCyNJTWs2A3xf6wc7AUF2DXrKEkoX-SNLMZ6s-O4aXXV9WOjOPcWdAYreMRBld0E"",""//lh5.ggpht.com/z-0C4G6EWYkelAF1LjPfl_UQcsp92H4joIPt8NfsOl0nPJ2VpzZYahWadKqTLfl6kq3C6aDBcwfGQyMWSozYoZIAOAW0yRvZrwxia321PlsKTxbZ"",""//lh4.ggpht.com/U7I12JrDYmMC_pUXpw8DVBjBilU67BvbM8qT8gJE0bQfkhHo7FOdMttiz3syP5IR-LyO4J1WBlfmZjvMjRr4GIBt4o3Vqp-hKz7q2_OGwGtsN5s"",""//lh3.ggpht.com/fF2XWEtqG23ybhzClhC_p8gvKJalf1vg7k3H7UkuAaIVubil7EgOvJUCwAZk2KiCtlPYp1E5Ep2xaxZjJRmg5EFSEAjqlMHJS_Wd1Bcje6xre4s"",""//lh3.ggpht.com/jgOebMihBoIZvHE4EOklJvZ_k-9egjNIlUKfKFcLkvXJs8g2FXjPvdFUbwqGrkHrMtyis8uOvgt-E51Vm11hq4bieh7h0cegca0VI4vFtFaAemU"",""//lh3.ggpht.com/MOrI-zKNMNrQE_aHj5hzbojP3T0hEMJKK6K8UO3e1NBC-nkcQeIM1QnvtJdT_G-W4e7-qv4BiqwdWcNHBpZXOmmX3tcuYEV8u_ANEoa9_aUIfeyg"",""//lh6.ggpht.com/SyIS5sGOkTG7k_jFF14wzH9Evrblv6o4pHBI6z6X070-xhAeyut_kRO6xHtDID4KLcWFvItjQy-plPcJ6K1T9tlFOrtaryEPvuAYdMVx8e0TTw"",""//lh6.ggpht.com/2Pp9kLYFhDT3USwHinU5OxnzcWWOLI0nOWe29gOD5KMzyEcXoHkTN-AutJV9M8F_9eqAP379XB9O1d0BWPanhr-MguzKxfHeUvYTs6yHzDkxyfe0NA"",""//lh4.ggpht.com/7aofqklSkF3AMDfF19yqsA9J3EfEiKy1NdOelEGKNnW0Cv5tGEpq2PF_jZO1MVoBbrrmVVRv0Tdq7I8KyZbIlyHdbTs1jMl7dEFqVMvsPcyaORyHlQ"",""//lh4.ggpht.com/anYJHqkMCkuhmIHQTBspLtWcDTyx1ZRe84_q5pAgVEOVmsKkaKhS725N4YFoj2zpJrBP7iTC2vf1GUtrp6H7kkm8c1k6zkW6I_Gf5f9A3re_I8Ex"",""//lh3.ggpht.com/OtSw0rU-DvfoXgoWrQdkln6Kz7O14TF9qrPNJSGJnZLeDqUEctOn1DT09pdwwVpNQV-cXmVYQL-PX4XPhpZLWH1ciSkVT6WHNmTz1D9pHphBwJUv"",""//lh3.ggpht.com/cTCZnXPIjI-EO2bvQdLgeoSLOSlMFcv805n347Zyci9XDYUdcVDC_5H7SFVYDr4pC5HtQDYnrOHL6AinLW7hWtfSCLlvVhVUNQ-DlDn0NwZ-1iCO-g"",""//lh4.ggpht.com/i-mL_JcF9rwjQq6HnuKzuAHU41_UGxQ62IOPZvaDrATXaPFbhe-EbT7ZIpboyNA5PXRCsxNsZ9hu58edRvNs5ScgKN8Lg-00J2LhlwMAbdEsv7b0nw"",""//lh6.ggpht.com/D_YV2BG1WWwl67xNloP3sxzRkqhcVTgJi58L-A8nLrOcMR_tBqLz4fHEGQ-qiNcG_-32MNy3dlSPWrTBKzBcweJxgMnRVet5yuGfelUlwehDtXX_3w""],""video"":[]},""sellerId"":""mihai"",""listingType"":""fixedPrice"",""payment"":{""online"":[{""paymentName"":""PayPal"",""paymentService"":""paypal""}],""offline"":[{""paymentName"":""Pay on Pick-up"",""paymentService"":""payOnPickup""}]},""startTime"":""2014-01-04T10:02:18+00:00"",""endTime"":""2014-04-04T10:02:18+00:00"",""shipping"":[{""shippingService"":""economy"",""shippingName"":""Economy"",""shippingCost"":1.0,""handlingTimeMax"":4,""dispatchTimeMin"":1,""dispatchTimeMax"":10,""shippingAdditionalCost"":""2""},{""shippingService"":""localPickup"",""shippingName"":""Local Pick-Up"",""shippingCost"":0.0,""handlingTimeMax"":2,""dispatchTimeMin"":0,""dispatchTimeMax"":0,""shippingAdditionalCost"":""0""}],""titleSlug"":""many-pictures"",""variations"":[{""fixedPrice"":222999.0,""media"":{""image"":[""//lh6.ggpht.com/ih3q2d7CenGLPyupH9FpfsoJQWQpw1i8wWA2Kd26bFnSF2fbnKyGU9WePIhCgEeqw5p6YMVmFi1c9oS0Ag93aF_oZ3ZiwK7fQuSYIrZ9VhgXbrTHkw"",""//lh6.ggpht.com/9aXLmPRVeZnxkwvNb3mWTF8kvfEY_lho_lOVVc9AbNqLb8GQmiS_XXVZ3OKqMv2pxgYSayMYPPRh6ACYyh0H8KtS8mPD6MKUkEajwxkTtp5Q4Lo"",""//lh3.ggpht.com/FG_QXZPHJ2tTYwI_t5Fg1KqivglVg9RlJn0JRsu9Ox8vJ7IcBirb2IV_I1LL_WVOMxfTuBBSDLMlrw9v0MCAdmnPCR29sCbRGjhm6zEfIH-3q2QSdw""],""video"":[]},""quantity"":1121,""Brand"":""Bell \u0026 Howell""},{""fixedPrice"":211.0,""media"":{""image"":[""//lh6.ggpht.com/qAtjgyHAB734Ox_4NC_fa-ZRqrCjCmJu0Tp8bo-HMO88duv8l4hhuv2REBkB--yneFzOL7annecVlGty-YsKouondiOFVnAZWzjpdrfsGfbL6wh2"",""//lh3.ggpht.com/FG_QXZPHJ2tTYwI_t5Fg1KqivglVg9RlJn0JRsu9Ox8vJ7IcBirb2IV_I1LL_WVOMxfTuBBSDLMlrw9v0MCAdmnPCR29sCbRGjhm6zEfIH-3q2QSdw"",""//lh6.ggpht.com/9aXLmPRVeZnxkwvNb3mWTF8kvfEY_lho_lOVVc9AbNqLb8GQmiS_XXVZ3OKqMv2pxgYSayMYPPRh6ACYyh0H8KtS8mPD6MKUkEajwxkTtp5Q4Lo"",""//lh3.ggpht.com/MOrI-zKNMNrQE_aHj5hzbojP3T0hEMJKK6K8UO3e1NBC-nkcQeIM1QnvtJdT_G-W4e7-qv4BiqwdWcNHBpZXOmmX3tcuYEV8u_ANEoa9_aUIfeyg""],""video"":[]},""quantity"":2,""Brand"":""Fujifilm""},{""fixedPrice"":22.0,""media"":{""image"":[""//lh3.ggpht.com/jgOebMihBoIZvHE4EOklJvZ_k-9egjNIlUKfKFcLkvXJs8g2FXjPvdFUbwqGrkHrMtyis8uOvgt-E51Vm11hq4bieh7h0cegca0VI4vFtFaAemU"",""//lh3.ggpht.com/MOrI-zKNMNrQE_aHj5hzbojP3T0hEMJKK6K8UO3e1NBC-nkcQeIM1QnvtJdT_G-W4e7-qv4BiqwdWcNHBpZXOmmX3tcuYEV8u_ANEoa9_aUIfeyg"",""//lh4.ggpht.com/anYJHqkMCkuhmIHQTBspLtWcDTyx1ZRe84_q5pAgVEOVmsKkaKhS725N4YFoj2zpJrBP7iTC2vf1GUtrp6H7kkm8c1k6zkW6I_Gf5f9A3re_I8Ex""],""video"":[]},""quantity"":12,""Brand"":""Gateway""}],""_fpaiStatus"":""published""}`
    itemInfoBytes := []byte(itemInfoR)
var ItemInfo Item
        er := json.Unmarshal(itemInfoBytes, &ItemInfo)
            if er != nil {
                panic(er)
            }

        }","['package', 'main', 'import', '(', '""encoding/json""', ')', 'type', 'LocationReadable', 'struct', '{', 'District', 'string', 'City', 'string', 'State', 'string', '}', 'type', 'Locale', 'struct', '{', 'Location', 'string', 'CountryCode', 'string', 'CurrencyId', 'string', 'CurrencySymbol', 'string', 'LocationReadable', 'LocationReadable', '}', 'type', 'Media', 'struct', '{', 'Image', 'string', 'Video', 'string', '}', 'type', 'Variations', 'struct', '{', 'FixedPrice', 'float64', 'Media', 'Media', 'Quantity', 'int', '}', 'type', 'PaymentData', 'struct', '{', 'PaymentName', 'string', 'PaymentService', 'string', '}', 'type', 'Payment', 'struct', '{', 'Online', 'PaymentData', 'Offline', 'PaymentData', '}', 'type', 'Shipping', 'struct', '{', 'ShippingService', 'string', 'ShippingName', 'string', 'ShippingCost', 'float64', 'HandlingTimeMax', 'int', 'DispatchTimeMin', 'int', 'DispatchTimeMax', 'int', 'ShippingAdditionalCost', 'int', '}', 'type', 'Item', '[]', 'struct', '{', '_version', 'string', 'CategoryId', 'string', 'Title', 'string', 'Media', 'Media', 'SellerId', 'string', 'Locale', 'Locale', 'ListingType', 'string', 'Payment', 'Payment', 'StartTime', 'string', 'EndTime', 'string', 'Shipping', 'Shipping', 'TitleSlug', 'string', 'Variations', 'Variations', '_fpaiStatus', 'string', '}', 'func', 'main', '(){', 'itemInfoR', ':=', '{', '""locale"":{""location"":""51.51121389999999,-0.11982439999997041"",""countryCode"":""GB"",""currencyId"":""GBP"",""currencySymbol"":""Â£"",""locationReadable"":{""district"":""City of Westminster"",""city"":""London"",""state"":""Greater London""}},""_version"":""serving"",""categoryId"":[""Root"",""Cameras \\u0026 Photo"",""Digital Cameras""],""title"":""many pictures"",""media"":{""image"":[""//lh5.ggpht.com/O_o_N6CFkClY5AV0-LqntpyFjor7Of4u23ZcK7lYwc2uY1ea7GWi61VDJZCB7UCb79svkjKPHIenqwEUhjHi0jdIQnnl6z_p03yktPUB1FBHezIQ"",""//lh6.ggpht.com/ih3q2d7CenGLPyupH9FpfsoJQWQpw1i8wWA2Kd26bFnSF2fbnKyGU9WePIhCgEeqw5p6YMVmFi1c9oS0Ag93aF_oZ3ZiwK7fQuSYIrZ9VhgXbrTHkw"",""//lh6.ggpht.com/7RJRsapsnwWL3_KiLIjMz4QojDzUvsztXtvKTFvIfde_AHccDnOibAvXRN73tTB4SeHzlj8S1LWxbYwwWFGn9elfCKdSb8BUIU5QJY1LO791HutQ"",""//lh6.ggpht.com/qAtjgyHAB734Ox_4NC_fa-ZRqrCjCmJu0Tp8bo-HMO88duv8l4hhuv2REBkB--yneFzOL7annecVlGty-YsKouondiOFVnAZWzjpdrfsGfbL6wh2"",""//lh3.ggpht.com/dWUbASepwHF4lHaXIPnpv4BNm2pCml9MlJt7s86s1cpu-PsYNmS0yQmKFKTM38q_oMLW_YJMJ19civ2gVViKAGYcZylRW7jN3w77AJvhzS6JE2g"",""//lh6.ggpht.com/9aXLmPRVeZnxkwvNb3mWTF8kvfEY_lho_lOVVc9AbNqLb8GQmiS_XXVZ3OKqMv2pxgYSayMYPPRh6ACYyh0H8KtS8mPD6MKUkEajwxkTtp5Q4Lo"",""//lh3.ggpht.com/FG_QXZPHJ2tTYwI_t5Fg1KqivglVg9RlJn0JRsu9Ox8vJ7IcBirb2IV_I1LL_WVOMxfTuBBSDLMlrw9v0MCAdmnPCR29sCbRGjhm6zEfIH-3q2QSdw"",""//lh4.ggpht.com/Y23DqORrVkM2m55f-rq5_BBrlkvQg4uX7AsAt-ixhMobjK_SFgFaDfktgLhkNsyKwSr9HcF8iiGY3Nw0xOKXG1sn6wyAWg_qsolmKjVOrM5V5mIR"",""//lh6.ggpht.com/mQ62Ly-DjMKPMzU1OcSPJ7SLBqym0uBjawlkTHfmb-HOKaD56dnitk1duwPFJVdbi0GUpd63RQvr2VMpHp6S1OQ3di-hq4-JPeRoS5FJzksXSvW_"",""//lh3.ggpht.com/dqWjWPcNsvlR1tMC_agizX19f9MDiNGWFYTYVn4kjJxzIIkEe0mLzNcvS62zVJxAOaitT-IgaUfZ-Ze23BgzbqYY-l600i_LbVe35Uinz6sXIyoB"",""//lh6.ggpht.com/xhSdFc9uHgghs_6gf3seUWYM-PG2oLmjTrpF7ptEEMqaIrQIa8VPfC6tXE7f3M13eZvDXYqMW_k0AHO5vwCEPNp-iObixskd_lBaKNfz3MH3SNQ"",""//lh5.ggpht.com/kYeoKPoZGJCow-G1FhnD8kzVjNjbQA8-Kyj8eAh0HL-fMZX9tTeFPQikTZdSU0kks4-5Ui54cZF2CjGut9vfMJAVDKIq3T-bAQewCxvfl2120tH5zQ"",""//lh5.ggpht.com/4qUl3d-G9EPBzcYKrimNsWhQw7CmONV0jgfVhxFgB9mEU_QLRCyNJTWs2A3xf6wc7AUF2DXrKEkoX-SNLMZ6s-O4aXXV9WOjOPcWdAYreMRBld0E"",""//lh5.ggpht.com/z-0C4G6EWYkelAF1LjPfl_UQcsp92H4joIPt8NfsOl0nPJ2VpzZYahWadKqTLfl6kq3C6aDBcwfGQyMWSozYoZIAOAW0yRvZrwxia321PlsKTxbZ"",""//lh4.ggpht.com/U7I12JrDYmMC_pUXpw8DVBjBilU67BvbM8qT8gJE0bQfkhHo7FOdMttiz3syP5IR-LyO4J1WBlfmZjvMjRr4GIBt4o3Vqp-hKz7q2_OGwGtsN5s"",""//lh3.ggpht.com/fF2XWEtqG23ybhzClhC_p8gvKJalf1vg7k3H7UkuAaIVubil7EgOvJUCwAZk2KiCtlPYp1E5Ep2xaxZjJRmg5EFSEAjqlMHJS_Wd1Bcje6xre4s"",""//lh3.ggpht.com/jgOebMihBoIZvHE4EOklJvZ_k-9egjNIlUKfKFcLkvXJs8g2FXjPvdFUbwqGrkHrMtyis8uOvgt-E51Vm11hq4bieh7h0cegca0VI4vFtFaAemU"",""//lh3.ggpht.com/MOrI-zKNMNrQE_aHj5hzbojP3T0hEMJKK6K8UO3e1NBC-nkcQeIM1QnvtJdT_G-W4e7-qv4BiqwdWcNHBpZXOmmX3tcuYEV8u_ANEoa9_aUIfeyg"",""//lh6.ggpht.com/SyIS5sGOkTG7k_jFF14wzH9Evrblv6o4pHBI6z6X070-xhAeyut_kRO6xHtDID4KLcWFvItjQy-plPcJ6K1T9tlFOrtaryEPvuAYdMVx8e0TTw"",""//lh6.ggpht.com/2Pp9kLYFhDT3USwHinU5OxnzcWWOLI0nOWe29gOD5KMzyEcXoHkTN-AutJV9M8F_9eqAP379XB9O1d0BWPanhr-MguzKxfHeUvYTs6yHzDkxyfe0NA"",""//lh4.ggpht.com/7aofqklSkF3AMDfF19yqsA9J3EfEiKy1NdOelEGKNnW0Cv5tGEpq2PF_jZO1MVoBbrrmVVRv0Tdq7I8KyZbIlyHdbTs1jMl7dEFqVMvsPcyaORyHlQ"",""//lh4.ggpht.com/anYJHqkMCkuhmIHQTBspLtWcDTyx1ZRe84_q5pAgVEOVmsKkaKhS725N4YFoj2zpJrBP7iTC2vf1GUtrp6H7kkm8c1k6zkW6I_Gf5f9A3re_I8Ex"",""//lh3.ggpht.com/OtSw0rU-DvfoXgoWrQdkln6Kz7O14TF9qrPNJSGJnZLeDqUEctOn1DT09pdwwVpNQV-cXmVYQL-PX4XPhpZLWH1ciSkVT6WHNmTz1D9pHphBwJUv"",""//lh3.ggpht.com/cTCZnXPIjI-EO2bvQdLgeoSLOSlMFcv805n347Zyci9XDYUdcVDC_5H7SFVYDr4pC5HtQDYnrOHL6AinLW7hWtfSCLlvVhVUNQ-DlDn0NwZ-1iCO-g"",""//lh4.ggpht.com/i-mL_JcF9rwjQq6HnuKzuAHU41_UGxQ62IOPZvaDrATXaPFbhe-EbT7ZIpboyNA5PXRCsxNsZ9hu58edRvNs5ScgKN8Lg-00J2LhlwMAbdEsv7b0nw"",""//lh6.ggpht.com/D_YV2BG1WWwl67xNloP3sxzRkqhcVTgJi58L-A8nLrOcMR_tBqLz4fHEGQ-qiNcG_-32MNy3dlSPWrTBKzBcweJxgMnRVet5yuGfelUlwehDtXX_3w""],""video"":[]},""sellerId"":""mihai"",""listingType"":""fixedPrice"",""payment"":{""online"":[{""paymentName"":""PayPal"",""paymentService"":""paypal""}],""offline"":[{""paymentName"":""Pay on Pick-up"",""paymentService"":""payOnPickup""}]},""startTime"":""2014-01-04T10:02:18+00:00"",""endTime"":""2014-04-04T10:02:18+00:00"",""shipping"":[{""shippingService"":""economy"",""shippingName"":""Economy"",""shippingCost"":1.0,""handlingTimeMax"":4,""dispatchTimeMin"":1,""dispatchTimeMax"":10,""shippingAdditionalCost"":""2""},{""shippingService"":""localPickup"",""shippingName"":""Local Pick-Up"",""shippingCost"":0.0,""handlingTimeMax"":2,""dispatchTimeMin"":0,""dispatchTimeMax"":0,""shippingAdditionalCost"":""0""}],""titleSlug"":""many-pictures"",""variations"":[{""fixedPrice"":222999.0,""media"":{""image"":[""//lh6.ggpht.com/ih3q2d7CenGLPyupH9FpfsoJQWQpw1i8wWA2Kd26bFnSF2fbnKyGU9WePIhCgEeqw5p6YMVmFi1c9oS0Ag93aF_oZ3ZiwK7fQuSYIrZ9VhgXbrTHkw"",""//lh6.ggpht.com/9aXLmPRVeZnxkwvNb3mWTF8kvfEY_lho_lOVVc9AbNqLb8GQmiS_XXVZ3OKqMv2pxgYSayMYPPRh6ACYyh0H8KtS8mPD6MKUkEajwxkTtp5Q4Lo"",""//lh3.ggpht.com/FG_QXZPHJ2tTYwI_t5Fg1KqivglVg9RlJn0JRsu9Ox8vJ7IcBirb2IV_I1LL_WVOMxfTuBBSDLMlrw9v0MCAdmnPCR29sCbRGjhm6zEfIH-3q2QSdw""],""video"":[]},""quantity"":1121,""Brand"":""Bell \\u0026 Howell""},{""fixedPrice"":211.0,""media"":{""image"":[""//lh6.ggpht.com/qAtjgyHAB734Ox_4NC_fa-ZRqrCjCmJu0Tp8bo-HMO88duv8l4hhuv2REBkB--yneFzOL7annecVlGty-YsKouondiOFVnAZWzjpdrfsGfbL6wh2"",""//lh3.ggpht.com/FG_QXZPHJ2tTYwI_t5Fg1KqivglVg9RlJn0JRsu9Ox8vJ7IcBirb2IV_I1LL_WVOMxfTuBBSDLMlrw9v0MCAdmnPCR29sCbRGjhm6zEfIH-3q2QSdw"",""//lh6.ggpht.com/9aXLmPRVeZnxkwvNb3mWTF8kvfEY_lho_lOVVc9AbNqLb8GQmiS_XXVZ3OKqMv2pxgYSayMYPPRh6ACYyh0H8KtS8mPD6MKUkEajwxkTtp5Q4Lo"",""//lh3.ggpht.com/MOrI-zKNMNrQE_aHj5hzbojP3T0hEMJKK6K8UO3e1NBC-nkcQeIM1QnvtJdT_G-W4e7-qv4BiqwdWcNHBpZXOmmX3tcuYEV8u_ANEoa9_aUIfeyg""],""video"":[]},""quantity"":2,""Brand"":""Fujifilm""},{""fixedPrice"":22.0,""media"":{""image"":[""//lh3.ggpht.com/jgOebMihBoIZvHE4EOklJvZ_k-9egjNIlUKfKFcLkvXJs8g2FXjPvdFUbwqGrkHrMtyis8uOvgt-E51Vm11hq4bieh7h0cegca0VI4vFtFaAemU"",""//lh3.ggpht.com/MOrI-zKNMNrQE_aHj5hzbojP3T0hEMJKK6K8UO3e1NBC-nkcQeIM1QnvtJdT_G-W4e7-qv4BiqwdWcNHBpZXOmmX3tcuYEV8u_ANEoa9_aUIfeyg"",""//lh4.ggpht.com/anYJHqkMCkuhmIHQTBspLtWcDTyx1ZRe84_q5pAgVEOVmsKkaKhS725N4YFoj2zpJrBP7iTC2vf1GUtrp6H7kkm8c1k6zkW6I_Gf5f9A3re_I8Ex""],""video"":[]},""quantity"":12,""Brand"":""Gateway""}],""_fpaiStatus"":""published""', '}', 'itemInfoBytes', ':=', '[]', 'byte', '(', 'itemInfoR', ')', 'var', 'ItemInfo', 'Item', 'er', ':=', 'json', '.', 'Unmarshal', '(', 'itemInfoBytes', ',', '&', 'ItemInfo', ')', 'if', 'er', '!=', 'nil', '{', 'panic', '(', 'er', ')', '}', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator']",21830447
36,"package main

import (
    ""crypto/md5""
    ""encoding/hex""
    ""fmt""
    ""github.com/gocql/gocql""
    ""github.com/gorilla/mux""
    ""github.com/gorilla/sessions""
    ""net/http""
    ""time""
)

var store = sessions.NewCookieStore([]byte(""something-very-secret""))

var router = mux.NewRouter()

func init() {

    store.Options = &sessions.Options{
        Domain:   ""localhost"",
        Path:     ""/"",
        MaxAge:   3600 * 1, // 1 hour
        HttpOnly: true,
    }
}
func main() {
    //session handling
    router.HandleFunc(""/"", SessionHandler)
    router.HandleFunc(""/signIn"", SignInHandler)
    router.HandleFunc(""/signUp"", SignUpHandler)
    router.HandleFunc(""/logOut"", LogOutHandler)
    http.Handle(""/"", router)
    http.ListenAndServe("":8100"", nil)
}

//handler for signIn
func SignInHandler(res http.ResponseWriter, req *http.Request) {

    email := req.FormValue(""email"")
    password := req.FormValue(""password"")

    //Generate hash of password
    hasher := md5.New()
    hasher.Write([]byte(password))
    encrypted_password := hex.EncodeToString(hasher.Sum(nil))

    //cassandra connection
    cluster := gocql.NewCluster(""localhost"")
    cluster.Keyspace = ""gbuy""
    cluster.DefaultPort = 9042
    cluster.Consistency = gocql.Quorum
    session, _ := cluster.CreateSession()
    defer session.Close()

    //select query
    var firstname string
    stmt := ""SELECT firstname FROM USER WHERE email= '"" + email + ""' and password ='"" + encrypted_password + ""';""
    err := session.Query(stmt).Scan(&firstname)
    if err != nil {
        fmt.Fprintf(res, ""failed"")
    } else {
        if firstname == """" {
            fmt.Fprintf(res, ""failed"")
        } else {
            fmt.Fprintf(res, firstname)
        }
    }

    //store in session variable
    sessionNew, _ := store.Get(req, ""loginSession"")

    // Set some session values.
    sessionNew.Values[""email""] = email
    sessionNew.Values[""name""] = firstname

    // Save it.
    sessionNew.Save(req, res)
    //store.Save(req,res,sessionNew)

    fmt.Println(""Session after logging:"")
    fmt.Println(sessionNew)

}

//handler for signUp
func SignUpHandler(res http.ResponseWriter, req *http.Request) {

    fName := req.FormValue(""fName"")
    lName := req.FormValue(""lName"")
    email := req.FormValue(""email"")
    password := req.FormValue(""passwd"")
    birthdate := req.FormValue(""date"")
    city := req.FormValue(""city"")
    gender := req.FormValue(""gender"")

    //Get current timestamp and format it.
    sysdate := time.Now().Format(""2006-01-02 15:04:05-0700"")

    //Generate hash of password
    hasher := md5.New()
    hasher.Write([]byte(password))
    encrypted_password := hex.EncodeToString(hasher.Sum(nil))

    //cassandra connection
    cluster := gocql.NewCluster(""localhost"")
    cluster.Keyspace = ""gbuy""
    cluster.DefaultPort = 9042
    cluster.Consistency = gocql.Quorum
    session, _ := cluster.CreateSession()
    defer session.Close()

    //Insert the data into the Table
    stmt := ""INSERT INTO USER (email,firstname,lastname,birthdate,city,gender,password,creation_date) VALUES ('"" + email + ""','"" + fName + ""','"" + lName + ""','"" + birthdate + ""','"" + city + ""','"" + gender + ""','"" + encrypted_password + ""','"" + sysdate + ""');""
    fmt.Println(stmt)
    err := session.Query(stmt).Exec()
    if err != nil {
        fmt.Fprintf(res, ""failed"")
    } else {
        fmt.Fprintf(res, fName)
    }
}

//handler for logOut
func LogOutHandler(res http.ResponseWriter, req *http.Request) {
    sessionOld, err := store.Get(req, ""loginSession"")

    fmt.Println(""Session in logout"")
    fmt.Println(sessionOld)
    if err = sessionOld.Save(req, res); err != nil {
        fmt.Println(""Error saving session: %v"", err)
    }
}

//handler for Session
func SessionHandler(res http.ResponseWriter, req *http.Request) {

    router.PathPrefix(""/"").Handler(http.FileServer(http.Dir(""../static/"")))
    session, _ := store.Get(req, ""loginSession"")

    fmt.Println(""Session in SessionHandler"")
    fmt.Println(session)


    if val, ok := session.Values[""email""].(string); ok {
        // if val is a string
        switch val {
        case """": {
            http.Redirect(res, req, ""html/login.html"", http.StatusFound) }
        default:
            http.Redirect(res, req, ""html/home.html"", http.StatusFound)
        }
    } else {
        // if val is not a string type
        http.Redirect(res, req, ""html/login.html"", http.StatusFound)
    }
}","['package', 'main', 'import', '(', '""crypto/md5""', '""encoding/hex""', '""fmt""', '""github.com/gocql/gocql""', '""github.com/gorilla/mux""', '""github.com/gorilla/sessions""', '""net/http""', '""time""', ')', 'var', 'store', '=', 'sessions', '.', 'NewCookieStore', '([]', 'byte', '(', '""something-very-secret""', '))', 'var', 'router', '=', 'mux', '.', 'NewRouter', '()', 'func', 'init', '()', '{', 'store', '.', 'Options', '=', '&', 'sessions', '.', 'Options', '{', 'Domain', ':', '""localhost""', ',', 'Path', ':', '""/""', ',', 'MaxAge', ':', '3600', '*', '1', ',', '// 1 hour', 'HttpOnly', ':', 'true', ',', '}', '}', 'func', 'main', '()', '{', '//session handling', 'router', '.', 'HandleFunc', '(', '""/""', ',', 'SessionHandler', ')', 'router', '.', 'HandleFunc', '(', '""/signIn""', ',', 'SignInHandler', ')', 'router', '.', 'HandleFunc', '(', '""/signUp""', ',', 'SignUpHandler', ')', 'router', '.', 'HandleFunc', '(', '""/logOut""', ',', 'LogOutHandler', ')', 'http', '.', 'Handle', '(', '""/""', ',', 'router', ')', 'http', '.', 'ListenAndServe', '(', '"":8100""', ',', 'nil', ')', '}', '//handler for signIn', 'func', 'SignInHandler', '(', 'res', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{', 'email', ':=', 'req', '.', 'FormValue', '(', '""email""', ')', 'password', ':=', 'req', '.', 'FormValue', '(', '""password""', ')', '//Generate hash of password', 'hasher', ':=', 'md5', '.', 'New', '()', 'hasher', '.', 'Write', '([]', 'byte', '(', 'password', '))', 'encrypted_password', ':=', 'hex', '.', 'EncodeToString', '(', 'hasher', '.', 'Sum', '(', 'nil', '))', '//cassandra connection', 'cluster', ':=', 'go', 'cql', '.', 'NewCluster', '(', '""localhost""', ')', 'cluster', '.', 'Keyspace', '=', '""gbuy""', 'cluster', '.', 'DefaultPort', '=', '9042', 'cluster', '.', 'Consistency', '=', 'go', 'cql', '.', 'Quorum', 'session', ',', '_', ':=', 'cluster', '.', 'CreateSession', '()', 'defer', 'session', '.', 'Close', '()', '//select query', 'var', 'firstname', 'string', 'stmt', ':=', '""SELECT firstname FROM USER WHERE email= \'"" + email + ""\' and password =\'"" + encrypted_password + ""\';""', 'err', ':=', 'session', '.', 'Query', '(', 'stmt', ').', 'Scan', '(&', 'firstname', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Fprintf', '(', 'res', ',', '""failed""', ')', '}', 'else', '{', 'if', 'firstname', '==', '""""', '{', 'fmt', '.', 'Fprintf', '(', 'res', ',', '""failed""', ')', '}', 'else', '{', 'fmt', '.', 'Fprintf', '(', 'res', ',', 'firstname', ')', '}', '}', '//store in session variable', 'sessionNew', ',', '_', ':=', 'store', '.', 'Get', '(', 'req', ',', '""loginSession""', ')', '// Set some session values.', 'sessionNew', '.', 'Values', '[', '""email""', ']', '=', 'email', 'sessionNew', '.', 'Values', '[', '""name""', ']', '=', 'firstname', '// Save it.', 'sessionNew', '.', 'Save', '(', 'req', ',', 'res', ')', '//store.Save(req,res,sessionNew)', 'fmt', '.', 'Println', '(', '""Session after logging:""', ')', 'fmt', '.', 'Println', '(', 'sessionNew', ')', '}', '//handler for signUp', 'func', 'SignUpHandler', '(', 'res', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{', 'fName', ':=', 'req', '.', 'FormValue', '(', '""fName""', ')', 'lName', ':=', 'req', '.', 'FormValue', '(', '""lName""', ')', 'email', ':=', 'req', '.', 'FormValue', '(', '""email""', ')', 'password', ':=', 'req', '.', 'FormValue', '(', '""passwd""', ')', 'birthdate', ':=', 'req', '.', 'FormValue', '(', '""date""', ')', 'city', ':=', 'req', '.', 'FormValue', '(', '""city""', ')', 'gender', ':=', 'req', '.', 'FormValue', '(', '""gender""', ')', '//Get current timestamp and format it.', 'sysdate', ':=', 'time', '.', 'Now', '().', 'Format', '(', '""2006-01-02 15:04:05-0700""', ')', '//Generate hash of password', 'hasher', ':=', 'md5', '.', 'New', '()', 'hasher', '.', 'Write', '([]', 'byte', '(', 'password', '))', 'encrypted_password', ':=', 'hex', '.', 'EncodeToString', '(', 'hasher', '.', 'Sum', '(', 'nil', '))', '//cassandra connection', 'cluster', ':=', 'go', 'cql', '.', 'NewCluster', '(', '""localhost""', ')', 'cluster', '.', 'Keyspace', '=', '""gbuy""', 'cluster', '.', 'DefaultPort', '=', '9042', 'cluster', '.', 'Consistency', '=', 'go', 'cql', '.', 'Quorum', 'session', ',', '_', ':=', 'cluster', '.', 'CreateSession', '()', 'defer', 'session', '.', 'Close', '()', '//Insert the data into the Table', 'stmt', ':=', '""INSERT INTO USER (email,firstname,lastname,birthdate,city,gender,password,creation_date) VALUES (\'"" + email + ""\',\'"" + fName + ""\',\'"" + lName + ""\',\'"" + birthdate + ""\',\'"" + city + ""\',\'"" + gender + ""\',\'"" + encrypted_password + ""\',\'"" + sysdate + ""\');""', 'fmt', '.', 'Println', '(', 'stmt', ')', 'err', ':=', 'session', '.', 'Query', '(', 'stmt', ').', 'Exec', '()', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Fprintf', '(', 'res', ',', '""failed""', ')', '}', 'else', '{', 'fmt', '.', 'Fprintf', '(', 'res', ',', 'fName', ')', '}', '}', '//handler for logOut', 'func', 'LogOutHandler', '(', 'res', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{', 'sessionOld', ',', 'err', ':=', 'store', '.', 'Get', '(', 'req', ',', '""loginSession""', ')', 'fmt', '.', 'Println', '(', '""Session in logout""', ')', 'fmt', '.', 'Println', '(', 'sessionOld', ')', 'if', 'err', '=', 'sessionOld', '.', 'Save', '(', 'req', ',', 'res', ');', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', '""Error saving session: %v""', ',', 'err', ')', '}', '}', '//handler for Session', 'func', 'SessionHandler', '(', 'res', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{', 'router', '.', 'PathPrefix', '(', '""/"").Handler(http.FileServer(http.Dir(""../static/""', ')))', 'session', ',', '_', ':=', 'store', '.', 'Get', '(', 'req', ',', '""loginSession""', ')', 'fmt', '.', 'Println', '(', '""Session in SessionHandler""', ')', 'fmt', '.', 'Println', '(', 'session', ')', 'if', 'val', ',', 'ok', ':=', 'session', '.', 'Values', '[', '""email""', '].(', 'string', ');', 'ok', '{', '// if val is a string', 'switch', 'val', '{', 'case', '""""', ':', '{', 'http', '.', 'Redirect', '(', 'res', ',', 'req', ',', '""html/login.html""', ',', 'http', '.', 'StatusFound', ')', '}', 'default', ':', 'http', '.', 'Redirect', '(', 'res', ',', 'req', ',', '""html/home.html""', ',', 'http', '.', 'StatusFound', ')', '}', '}', 'else', '{', '// if val is not a string type', 'http', '.', 'Redirect', '(', 'res', ',', 'req', ',', '""html/login.html""', ',', 'http', '.', 'StatusFound', ')', '}', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '1', 'hour', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'session', 'handling', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'comment', 'handler', 'for', 'signIn', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Generate', 'hash', 'of', 'password', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'cassandra', 'connection', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'select', 'query', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'comment', 'store', 'in', 'session', 'variable', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Set', 'some', 'session', 'values', '.', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'comment', 'Save', 'it', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'store.Save', '(', 'req', ',', 'res', ',', 'sessionNew', ')', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'handler', 'for', 'signUp', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Get', 'current', 'timestamp', 'and', 'format', 'it', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Generate', 'hash', 'of', 'password', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'cassandra', 'connection', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Insert', 'the', 'data', 'into', 'the', 'Table', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'comment', 'handler', 'for', 'logOut', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'comment', 'handler', 'for', 'Session', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'if', 'val', 'is', 'a', 'string', 'identifier', 'identifier', 'operator', 'keyword', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'operator', 'comment', 'if', 'val', 'is', 'not', 'a', 'string', 'type', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator']",21865681
37,"package main

import (
    ""crypto/rsa""
    ""crypto/tls""
    ""encoding/hex""
    ""fmt""
    ""log""
    ""math/big""
    ""net""
    ""net/smtp""
)

func main() {

    var (
        host     = ""smtp.myexchange.com""
        port     = 587
        from     = ""sender@example.org""
        password = ""password""
        to       = []string{""recipient@example.org""}
        msg      = []byte(""This is my message"")
        auth     = smtp.PlainAuth("""", from, password, ""smtp.myexchange.com"")
    )

    conf := new(tls.Config)
    conf.Certificates = make([]tls.Certificate, 1)
    conf.Certificates[0].Certificate = [][]byte{testRSACertificate}
    conf.Certificates[0].PrivateKey = testRSAPrivateKey
    conf.CipherSuites = []uint16{tls.TLS_RSA_WITH_RC4_128_SHA}
    conf.InsecureSkipVerify = true
    conf.MinVersion = tls.VersionSSL30
    conf.MaxVersion = tls.VersionTLS10
    serverAddr := fmt.Sprintf(""%s:%d"", host, port)

    conn, err := net.Dial(""tcp"", serverAddr)
    if err != nil {
        log.Printf(""Error Dialing %s\n"", err)
        return
    }

    client, err := smtp.NewClient(conn, host)
    if err != nil {
        log.Printf(""Error SMTP connection: %s\n"", err)
        return
    }

    if err = client.StartTLS(conf); err != nil {
        log.Printf(""Error performing StartTLS: %s\n"", err)
        return
    }

    if ok, _ := client.Extension(""AUTH""); ok {
        if err := client.Auth(auth); err != nil {
            log.Printf(""Error during AUTH %s\n"", err)
            return
        }
    }

    if err := client.Mail(from); err != nil {
        log.Printf(""Error: %s\n"", err)
        return
    }

    for _, addr := range to {
        if err := client.Rcpt(addr); err != nil {
            log.Printf(""Error: %s\n"", err)
            return
        }
    }

    w, err := client.Data()
    if err != nil {
        log.Printf(""Error: %s\n"", err)
        return
    }

    _, err = w.Write(msg)
    if err != nil {
        log.Printf(""Error: %s\n"", err)
        return

    }

    err = w.Close()
    if err != nil {
        log.Printf(""Error: %s\n"", err)
        return

    }

    client.Quit()
}

// Code below from http://golang.org/src/pkg/crypto/tls/handshake_server_test.go

func bigFromString(s string) *big.Int {
    ret := new(big.Int)
    ret.SetString(s, 10)
    return ret
}

func fromHex(s string) []byte {
    b, _ := hex.DecodeString(s)
    return b
}

var testRSACertificate = fromHex(""308202b030820219a00302010202090085b0bba48a7fb8ca300d06092a864886f70d01010505003045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c7464301e170d3130303432343039303933385a170d3131303432343039303933385a3045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746430819f300d06092a864886f70d010101050003818d0030818902818100bb79d6f517b5e5bf4610d0dc69bee62b07435ad0032d8a7a4385b71452e7a5654c2c78b8238cb5b482e5de1f953b7e62a52ca533d6fe125c7a56fcf506bffa587b263fb5cd04d3d0c921964ac7f4549f5abfef427100fe1899077f7e887d7df10439c4a22edb51c97ce3c04c3b326601cfafb11db8719a1ddbdb896baeda2d790203010001a381a73081a4301d0603551d0e04160414b1ade2855acfcb28db69ce2369ded3268e18883930750603551d23046e306c8014b1ade2855acfcb28db69ce2369ded3268e188839a149a4473045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746482090085b0bba48a7fb8ca300c0603551d13040530030101ff300d06092a864886f70d010105050003818100086c4524c76bb159ab0c52ccf2b014d7879d7a6475b55a9566e4c52b8eae12661feb4f38b36e60d392fdf74108b52513b1187a24fb301dbaed98b917ece7d73159db95d31d78ea50565cd5825a2d5a5f33c4b6d8c97590968c0f5298b5cd981f89205ff2a01ca31b9694dda9fd57e970e8266d71999b266e3850296c90a7bdd9"")

var testRSAPrivateKey = &rsa.PrivateKey{
    PublicKey: rsa.PublicKey{
        N: bigFromString(""131650079503776001033793877885499001334664249354723305978524647182322416328664556247316495448366990052837680518067798333412266673813370895702118944398081598789828837447552603077848001020611640547221687072142537202428102790818451901395596882588063427854225330436740647715202971973145151161964464812406232198521""),
        E: 65537,
    },
    D: bigFromString(""29354450337804273969007277378287027274721892607543397931919078829901848876371746653677097639302788129485893852488285045793268732234230875671682624082413996177431586734171663258657462237320300610850244186316880055243099640544518318093544057213190320837094958164973959123058337475052510833916491060913053867729""),
    Primes: []*big.Int{
        bigFromString(""11969277782311800166562047708379380720136961987713178380670422671426759650127150688426177829077494755200794297055316163155755835813760102405344560929062149""),
        bigFromString(""10998999429884441391899182616418192492905073053684657075974935218461686523870125521822756579792315215543092255516093840728890783887287417039645833477273829""),
    },
}","['package', 'main', 'import', '(', '""crypto/rsa""', '""crypto/tls""', '""encoding/hex""', '""fmt""', '""log""', '""math/big""', '""net""', '""net/smtp""', ')', 'func', 'main', '()', '{', 'var', '(', 'host', '=', '""smtp.myexchange.com""', 'port', '=', '587', 'from', '=', '""sender@example.org""', 'password', '=', '""password""', 'to', '=', '[]', 'string', '{', '""recipient@example.org""', '}', 'msg', '=', '[]', 'byte', '(', '""This is my message""', ')', 'auth', '=', 'smtp', '.', 'PlainAuth', '(', '"""", from, password, ""smtp.myexchange.com""', ')', ')', 'conf', ':=', 'new', '(', 'tls', '.', 'Config', ')', 'conf', '.', 'Certificates', '=', 'make', '([]', 'tls', '.', 'Certificate', ',', '1', ')', 'conf', '.', 'Certificates', '[', '0', '].', 'Certificate', '=', '[][]', 'byte', '{', 'testRSACertificate', '}', 'conf', '.', 'Certificates', '[', '0', '].', 'PrivateKey', '=', 'testRSAPrivateKey', 'conf', '.', 'CipherSuites', '=', '[]', 'uint16', '{', 'tls', '.', 'TLS_RSA_WITH_RC4_128_SHA', '}', 'conf', '.', 'InsecureSkipVerify', '=', 'true', 'conf', '.', 'MinVersion', '=', 'tls', '.', 'VersionSSL30', 'conf', '.', 'MaxVersion', '=', 'tls', '.', 'VersionTLS10', 'serverAddr', ':=', 'fmt', '.', 'Sprintf', '(', '""%s:%d""', ',', 'host', ',', 'port', ')', 'conn', ',', 'err', ':=', 'net', '.', 'Dial', '(', '""tcp""', ',', 'serverAddr', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""Error Dialing %s\\n""', ',', 'err', ')', 'return', '}', 'client', ',', 'err', ':=', 'smtp', '.', 'NewClient', '(', 'conn', ',', 'host', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""Error SMTP connection: %s\\n""', ',', 'err', ')', 'return', '}', 'if', 'err', '=', 'client', '.', 'StartTLS', '(', 'conf', ');', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""Error performing StartTLS: %s\\n""', ',', 'err', ')', 'return', '}', 'if', 'ok', ',', '_', ':=', 'client', '.', 'Extension', '(', '""AUTH""', ');', 'ok', '{', 'if', 'err', ':=', 'client', '.', 'Auth', '(', 'auth', ');', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""Error during AUTH %s\\n""', ',', 'err', ')', 'return', '}', '}', 'if', 'err', ':=', 'client', '.', 'Mail', '(', 'from', ');', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""Error: %s\\n""', ',', 'err', ')', 'return', '}', 'for', '_', ',', 'addr', ':=', 'range', 'to', '{', 'if', 'err', ':=', 'client', '.', 'Rcpt', '(', 'addr', ');', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""Error: %s\\n""', ',', 'err', ')', 'return', '}', '}', 'w', ',', 'err', ':=', 'client', '.', 'Data', '()', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""Error: %s\\n""', ',', 'err', ')', 'return', '}', '_', ',', 'err', '=', 'w', '.', 'Write', '(', 'msg', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""Error: %s\\n""', ',', 'err', ')', 'return', '}', 'err', '=', 'w', '.', 'Close', '()', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""Error: %s\\n""', ',', 'err', ')', 'return', '}', 'client', '.', 'Quit', '()', '}', '// Code below from http://golang.org/src/pkg/crypto/tls/handshake_server_test.go', 'func', 'bigFromString', '(', 's', 'string', ')', '*', 'big', '.', 'Int', '{', 'ret', ':=', 'new', '(', 'big', '.', 'Int', ')', 'ret', '.', 'SetString', '(', 's', ',', '10', ')', 'return', 'ret', '}', 'func', 'fromHex', '(', 's', 'string', ')', '[]', 'byte', '{', 'b', ',', '_', ':=', 'hex', '.', 'DecodeString', '(', 's', ')', 'return', 'b', '}', 'var', 'testRSACertificate', '=', 'fromHex', '(', '""308202b030820219a00302010202090085b0bba48a7fb8ca300d06092a864886f70d01010505003045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c7464301e170d3130303432343039303933385a170d3131303432343039303933385a3045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746430819f300d06092a864886f70d010101050003818d0030818902818100bb79d6f517b5e5bf4610d0dc69bee62b07435ad0032d8a7a4385b71452e7a5654c2c78b8238cb5b482e5de1f953b7e62a52ca533d6fe125c7a56fcf506bffa587b263fb5cd04d3d0c921964ac7f4549f5abfef427100fe1899077f7e887d7df10439c4a22edb51c97ce3c04c3b326601cfafb11db8719a1ddbdb896baeda2d790203010001a381a73081a4301d0603551d0e04160414b1ade2855acfcb28db69ce2369ded3268e18883930750603551d23046e306c8014b1ade2855acfcb28db69ce2369ded3268e188839a149a4473045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746482090085b0bba48a7fb8ca300c0603551d13040530030101ff300d06092a864886f70d010105050003818100086c4524c76bb159ab0c52ccf2b014d7879d7a6475b55a9566e4c52b8eae12661feb4f38b36e60d392fdf74108b52513b1187a24fb301dbaed98b917ece7d73159db95d31d78ea50565cd5825a2d5a5f33c4b6d8c97590968c0f5298b5cd981f89205ff2a01ca31b9694dda9fd57e970e8266d71999b266e3850296c90a7bdd9""', ')', 'var', 'testRSAPrivateKey', '=', '&', 'rsa', '.', 'PrivateKey', '{', 'PublicKey', ':', 'rsa', '.', 'PublicKey', '{', 'N', ':', 'bigFromString', '(', '""131650079503776001033793877885499001334664249354723305978524647182322416328664556247316495448366990052837680518067798333412266673813370895702118944398081598789828837447552603077848001020611640547221687072142537202428102790818451901395596882588063427854225330436740647715202971973145151161964464812406232198521""', '),', 'E', ':', '65537', ',', '},', 'D', ':', 'bigFromString', '(', '""29354450337804273969007277378287027274721892607543397931919078829901848876371746653677097639302788129485893852488285045793268732234230875671682624082413996177431586734171663258657462237320300610850244186316880055243099640544518318093544057213190320837094958164973959123058337475052510833916491060913053867729""', '),', 'Primes', ':', '[]*', 'big', '.', 'Int', '{', 'bigFromString', '(', '""11969277782311800166562047708379380720136961987713178380670422671426759650127150688426177829077494755200794297055316163155755835813760102405344560929062149""', '),', 'bigFromString', '(', '""10998999429884441391899182616418192492905073053684657075974935218461686523870125521822756579792315215543092255516093840728890783887287417039645833477273829""', '),', '},', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Code', 'below', 'from', 'http', ':', 'golang.org/src/pkg/crypto/tls/handshake_server_test.go', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator']",22124192
38,"type service_config struct {
    Services []struct {
        Name    string
        Command string
        Request map[string]interface{}
    }
}

var ServiceConf = service_config{}

err_json := json.Unmarshal(file_content, &ServiceConf)

for _, s := range ServiceConf.Services {
  log.Println(s)
}
","['type', 'service_config', 'struct', '{', 'Services', '[]', 'struct', '{', 'Name', 'string', 'Command', 'string', 'Request', 'map', '[', 'string', ']', 'interface', '{}', '}', '}', 'var', 'ServiceConf', '=', 'service_config', '{}', 'err_json', ':=', 'json', '.', 'Unmarshal', '(', 'file_content', ',', '&', 'ServiceConf', ')', 'for', '_', ',', 's', ':=', 'range', 'ServiceConf', '.', 'Services', '{', 'log', '.', 'Println', '(', 's', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",22430354
39,"package main

import (
    ""encoding/json""
    ""fmt""
    ""io/ioutil""
    ""log""
    ""net/http""
    ""net/url""
    ""os""
)

type SlackResponse struct {
    token        string
    team_id      string
    channel_id   string
    channel_name string
    timestamp    string
    user_id      string
    user_name    string
    text         string
}

type service_config struct {
    Services []struct {
        Name    string
        Command string
        Request map[string]interface{}
    }
}

var ServiceConf = service_config{}

func main() {

    content, err_read := ioutil.ReadFile(""config.ini"")

    if err_read != nil {
        log.Println(""Could not read config"")
        return
    }

    log.Println(string(content))

    err_json := json.Unmarshal(content, &ServiceConf)

    if err_json != nil {
        log.Println(err_json)
    }

    http.HandleFunc(""/"", handler)
    http.ListenAndServe("":""+os.Getenv(""PORT""), nil)
}

func handler(w http.ResponseWriter, r *http.Request) {
    slack_response := SlackResponse{
        r.FormValue(""token""),
        r.FormValue(""team_id""),
        r.FormValue(""channel_id""),
        r.FormValue(""channel_name""),
        r.FormValue(""timestamp""),
        r.FormValue(""user_id""),
        r.FormValue(""user_name""),
        r.FormValue(""text""),
    }

    // log.Println(ServiceConf.Services[0].Request[""key""])

    // loop through services to find command phrases
    for _, s := range ServiceConf.Services {
        log.Println(s)
    }

    if slack_response.user_name == ""slackbot"" {
        return
    }

    // fmt.Fprintf(w, ""{ \""text\"": \""Master %s!  You said: '%s'\"" }"", slack_response.user_name, slack_response.text)

    content, err := getContent(""https://www.googleapis.com/language/translate/v2?key=&source=en&target=de&q="" + url.QueryEscape(slack_response.text))
    if err != nil {
        fmt.Fprintf(w, ""{ \""text\"": \""Huh?!\"" }"")
    } else {

        type trans struct {
            Data struct {
                Translations []struct {
                    TranslatedText string `json:""translatedText""`
                } `json:""translations""`
            } `json:""data""`
        }

        f := trans{}
        err := json.Unmarshal(content, &f)

        if err != nil {
            log.Println(err)
        }

        fmt.Fprintf(w, ""{ \""text\"": \""Translated to German you said: '%s'\"" }"", f.Data.Translations[0].TranslatedText)
    }
}

// array of bytes if retrieved successfully.
func getContent(url string) ([]byte, error) {
    // Build the request
    req, err := http.NewRequest(""GET"", url, nil)
    if err != nil {
        return nil, err
    }
    // Send the request via a client
    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        return nil, err
    }
    // Defer the closing of the body
    defer resp.Body.Close()
    // Read the content into a byte array
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }
    // At this point we're done - simply return the bytes
    return body, nil
}","['package', 'main', 'import', '(', '""encoding/json""', '""fmt""', '""io/ioutil""', '""log""', '""net/http""', '""net/url""', '""os""', ')', 'type', 'SlackResponse', 'struct', '{', 'token', 'string', 'team_id', 'string', 'chan', 'nel_id', 'string', 'chan', 'nel_name', 'string', 'timestamp', 'string', 'user_id', 'string', 'user_name', 'string', 'text', 'string', '}', 'type', 'service_config', 'struct', '{', 'Services', '[]', 'struct', '{', 'Name', 'string', 'Command', 'string', 'Request', 'map', '[', 'string', ']', 'interface', '{}', '}', '}', 'var', 'ServiceConf', '=', 'service_config', '{}', 'func', 'main', '()', '{', 'content', ',', 'err_read', ':=', 'ioutil', '.', 'ReadFile', '(', '""config.ini""', ')', 'if', 'err_read', '!=', 'nil', '{', 'log', '.', 'Println', '(', '""Could not read config""', ')', 'return', '}', 'log', '.', 'Println', '(', 'string', '(', 'content', '))', 'err_json', ':=', 'json', '.', 'Unmarshal', '(', 'content', ',', '&', 'ServiceConf', ')', 'if', 'err_json', '!=', 'nil', '{', 'log', '.', 'Println', '(', 'err_json', ')', '}', 'http', '.', 'HandleFunc', '(', '""/""', ',', 'handler', ')', 'http', '.', 'ListenAndServe', '(', '"":""+os.Getenv(""PORT""', '),', 'nil', ')', '}', 'func', 'handler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'slack_response', ':=', 'SlackResponse', '{', 'r', '.', 'FormValue', '(', '""token""', '),', 'r', '.', 'FormValue', '(', '""team_id""', '),', 'r', '.', 'FormValue', '(', '""channel_id""', '),', 'r', '.', 'FormValue', '(', '""channel_name""', '),', 'r', '.', 'FormValue', '(', '""timestamp""', '),', 'r', '.', 'FormValue', '(', '""user_id""', '),', 'r', '.', 'FormValue', '(', '""user_name""', '),', 'r', '.', 'FormValue', '(', '""text""', '),', '}', '// log.Println(ServiceConf.Services[0].Request[""key""])', '// loop through services to find command phrases', 'for', '_', ',', 's', ':=', 'range', 'ServiceConf', '.', 'Services', '{', 'log', '.', 'Println', '(', 's', ')', '}', 'if', 'slack_response', '.', 'user_name', '==', '""slackbot""', '{', 'return', '}', '// fmt.Fprintf(w, ""{ \\""text\\"": \\""Master %s!  You said: \'%s\'\\"" }"", slack_response.user_name, slack_response.text)', 'content', ',', 'err', ':=', 'getContent', '(', '""https://www.googleapis.com/language/translate/v2?key=&source=en&target=de&q=""', '+', 'url', '.', 'QueryEscape', '(', 'slack_response', '.', 'text', '))', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Fprintf', '(', 'w', ',', '""{ \\""text\\"": \\""Huh?!\\"" }""', ')', '}', 'else', '{', 'type', 'trans', 'struct', '{', 'Data', 'struct', '{', 'Translations', '[]', 'struct', '{', 'TranslatedText', 'string', 'json', ':', '""translatedText""', '}', 'json', ':', '""translations""', '}', 'json', ':', '""data""', '}', 'f', ':=', 'trans', '{}', 'err', ':=', 'json', '.', 'Unmarshal', '(', 'content', ',', '&', 'f', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Println', '(', 'err', ')', '}', 'fmt', '.', 'Fprintf', '(', 'w', ',', '""{ \\""text\\"": \\""Translated to German you said: \'%s\'\\"" }""', ',', 'f', '.', 'Data', '.', 'Translations', '[', '0', '].', 'TranslatedText', ')', '}', '}', '// array of bytes if retrieved successfully.', 'func', 'getContent', '(', 'url', 'string', ')', '([]', 'byte', ',', 'error', ')', '{', '// Build the request', 'req', ',', 'err', ':=', 'http', '.', 'NewRequest', '(', '""GET""', ',', 'url', ',', 'nil', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', '// Send the request via a client', 'client', ':=', '&', 'http', '.', 'Client', '{}', 'resp', ',', 'err', ':=', 'client', '.', 'Do', '(', 'req', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', '// Defer the closing of the body', 'defer', 'resp', '.', 'Body', '.', 'Close', '()', '// Read the content into a byte array', 'body', ',', 'err', ':=', 'ioutil', '.', 'ReadAll', '(', 'resp', '.', 'Body', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', ""// At this point we're done - simply return the bytes"", 'return', 'body', ',', 'nil', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'log.Println', '(', 'ServiceConf.Services', '[', '0', ']', '.Request', '[', '``', 'key', ""''"", ']', ')', 'comment', 'loop', 'through', 'services', 'to', 'find', 'command', 'phrases', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'comment', 'fmt.Fprintf', '(', 'w', ',', '``', '{', '\\', ""''"", 'text\\', ""''"", ':', '\\', ""''"", 'Master', '%', 's', '!', 'You', 'said', ':', ""'"", '%', ""s'\\"", ""''"", '}', ""''"", ',', 'slack_response.user_name', ',', 'slack_response.text', ')', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'comment', 'array', 'of', 'bytes', 'if', 'retrieved', 'successfully', '.', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Build', 'the', 'request', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Send', 'the', 'request', 'via', 'a', 'client', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Defer', 'the', 'closing', 'of', 'the', 'body', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Read', 'the', 'content', 'into', 'a', 'byte', 'array', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'At', 'this', 'point', 'we', ""'re"", 'done', '-', 'simply', 'return', 'the', 'bytes', 'keyword', 'identifier', 'operator', 'identifier', 'operator']",22430354
40,"package main
import ""fmt""
import ""time""
import ""code.google.com/p/go-sqlite/go1/sqlite3""
import ""crypto/rand""
import ""encoding/base64"" 

func getrandomtext() (string) {
    b := make([]byte, 12)
    rand.Read(b)
    en := base64.StdEncoding // or URLEncoding
    enclen := en.EncodedLen(len(b))
    d := make([]byte, enclen)
    en.Encode(d, b)
    returntext := string(d[:enclen])
    //fmt.Printf(""getrandomtext() : '""+returntext+""'\n"")
    return returntext
}

func main() {
    dbname := ""multitasking.db""
    tablename := ""multiwrite""
    defer time.Sleep(5000 * time.Millisecond)
    db, err := sqlite3.Open(""file:""+dbname+""?file:locked.sqlite?cache=shared&mode=rwc"")
    defer db.Close()
    if err != nil {
        fmt.Printf(""failed to open database, error: "" + err.Error() + ""\n"") 
        return
    } 
    err = db.Exec(""DROP TABLE IF EXISTS ""+tablename+"";"")
    if err != nil {
        fmt.Printf(""error dropping table ""+tablename+"": ""+err.Error()+""\n"")
    }
    err = db.Exec(""CREATE TABLE ""+tablename+"" (id INTEGER PRIMARY KEY AUTOINCREMENT, text VARCHAR(200));"")
    if err != nil {
        fmt.Printf(""error creating table ""+tablename+"": ""+err.Error()+""\n"") 
        return
    } else {
        fmt.Printf(""successfully created table ""+tablename+""!\n"") 
    }
    var insertcount int = 128
    fmt.Printf(""inserting %d random text rows ...\n"", insertcount) 
    var counter int = 0
    insertloop:
    if counter < insertcount {
        counter++
        go func(count int) {
            if db.Exec(""INSERT INTO ""+tablename+""(text) VALUES(\""""+getrandomtext()+""\"");"") !=nil {
                fmt.Printf("" -%d"", count)
            } else {
                fmt.Printf("" +%d"", count)
            }
        }(counter)
        goto insertloop
    }
    fmt.Printf(""\nExecuted! Waiting some seconds...\n"")
    time.Sleep(3000 * time.Millisecond)         
    fmt.Printf(""\nRequesting...\n"")
    ReadTable, err := db.Prepare(""SELECT id, text FROM ""+tablename+"";"")
    err = ReadTable.Query()
    if err != nil {
        fmt.Printf(""failed to read '""+tablename+""' table, error: "" + err.Error() + ""\n"")
        return
    } 
    Readloop:
    var RowId int
    var RowText string
    err = ReadTable.Scan(&RowId, &RowText)
    if err == nil {
        fmt.Printf(""> %d | %s\n"", RowId, RowText)
        ReadTable.Next() 
        goto Readloop
    }
    fmt.Printf(""Sqlite3 test done! :)\n"")
}","['package', 'main', 'import', '""fmt""', 'import', '""time""', 'import', '""code.google.com/p/go-sqlite/go1/sqlite3""', 'import', '""crypto/rand""', 'import', '""encoding/base64""', 'func', 'getrandomtext', '()', '(', 'string', ')', '{', 'b', ':=', 'make', '([]', 'byte', ',', '12', ')', 'rand', '.', 'Read', '(', 'b', ')', 'en', ':=', 'base64', '.', 'StdEncoding', '// or URLEncoding', 'enclen', ':=', 'en', '.', 'EncodedLen', '(', 'len', '(', 'b', '))', 'd', ':=', 'make', '([]', 'byte', ',', 'enclen', ')', 'en', '.', 'Encode', '(', 'd', ',', 'b', ')', 'return', 'text', ':=', 'string', '(', 'd', '[:', 'enclen', '])', '//fmt.Printf(""getrandomtext() : \'""+returntext+""\'\\n"")', 'return', 'return', 'text', '}', 'func', 'main', '()', '{', 'dbname', ':=', '""multitasking.db""', 'tablename', ':=', '""multiwrite""', 'defer', 'time', '.', 'Sleep', '(', '5000', '*', 'time', '.', 'Millisecond', ')', 'db', ',', 'err', ':=', 'sqlite3', '.', 'Open', '(', '""file:""+dbname+""?file:locked.sqlite?cache=shared&mode=rwc""', ')', 'defer', 'db', '.', 'Close', '()', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""failed to open database, error: "" + err.Error() + ""\\n""', ')', 'return', '}', 'err', '=', 'db', '.', 'Exec', '(', '""DROP TABLE IF EXISTS ""+tablename+"";""', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""error dropping table ""+tablename+"": ""+err.Error()+""\\n""', ')', '}', 'err', '=', 'db', '.', 'Exec', '(', '""CREATE TABLE ""+tablename+"" (id INTEGER PRIMARY KEY AUTOINCREMENT, text VARCHAR(200));""', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""error creating table ""+tablename+"": ""+err.Error()+""\\n""', ')', 'return', '}', 'else', '{', 'fmt', '.', 'Printf', '(', '""successfully created table ""+tablename+""!\\n""', ')', '}', 'var', 'insertcount', 'int', '=', '128', 'fmt', '.', 'Printf', '(', '""inserting %d random text rows ...\\n""', ',', 'insertcount', ')', 'var', 'counter', 'int', '=', '0', 'insertloop', ':', 'if', 'counter', '<', 'insertcount', '{', 'counter', '++', 'go', 'func', '(', 'count', 'int', ')', '{', 'if', 'db', '.', 'Exec', '(', '""INSERT INTO ""+tablename+""(text) VALUES(\\""""+getrandomtext()+""\\"");""', ')', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '"" -%d""', ',', 'count', ')', '}', 'else', '{', 'fmt', '.', 'Printf', '(', '"" +%d""', ',', 'count', ')', '}', '}(', 'counter', ')', 'go', 'to', 'insertloop', '}', 'fmt', '.', 'Printf', '(', '""\\nExecuted! Waiting some seconds...\\n""', ')', 'time', '.', 'Sleep', '(', '3000', '*', 'time', '.', 'Millisecond', ')', 'fmt', '.', 'Printf', '(', '""\\nRequesting...\\n""', ')', 'ReadTable', ',', 'err', ':=', 'db', '.', 'Prepare', '(', '""SELECT id, text FROM ""+tablename+"";""', ')', 'err', '=', 'ReadTable', '.', 'Query', '()', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""failed to read \'""+tablename+""\' table, error: "" + err.Error() + ""\\n""', ')', 'return', '}', 'Readloop', ':', 'var', 'RowId', 'int', 'var', 'RowText', 'string', 'err', '=', 'ReadTable', '.', 'Scan', '(&', 'RowId', ',', '&', 'RowText', ')', 'if', 'err', '==', 'nil', '{', 'fmt', '.', 'Printf', '(', '""> %d | %s\\n""', ',', 'RowId', ',', 'RowText', ')', 'ReadTable', '.', 'Next', '()', 'go', 'to', 'Readloop', '}', 'fmt', '.', 'Printf', '(', '""Sqlite3 test done! :)\\n""', ')', '}']","['keyword', 'identifier', 'keyword', 'string_literal', 'keyword', 'string_literal', 'keyword', 'string_literal', 'keyword', 'string_literal', 'keyword', 'string_literal', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'or', 'URLEncoding', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'fmt.Printf', '(', '``', 'getrandomtext', '(', ')', ':', ""'"", ""''"", '+returntext+', ""''"", ""'\\n"", ""''"", ')', 'keyword', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']",23268356
41,"package main

import (
    ""encoding/json""
    ""fmt""
    ""io/ioutil""
    ""net/http""
    ""os""
)

const api_endpoint = ""http://www.reddit.com/r/%s/top.json?t=all&limit=100""

func main() {
    // Get console argument 'subreddit' and format the API endpoint URL.
    subreddit := os.Args[1]
    top_by_subreddit_endpoint := fmt.Sprintf(api_endpoint, subreddit)

    // Hit the API service.
    response, err := http.Get(top_by_subreddit_endpoint)
    if err != nil {
        //Perror(err)
    } else {
        defer response.Body.Close()
        content, err := ioutil.ReadAll(response.Body)
        if err != nil {
            //Perror(err)
        } else {
            var top_submissions Submission
            json.Unmarshal(content, &top_submissions)
        }
    }
}

type ByCreated []Submission

func (a ByCreated) Len() int           { return len(a) }
func (a ByCreated) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a ByCreated) Less(i, j int) bool { return a[i].Created < a[j].Created }

type Submission struct {
    Domain              string `json:""domain""`
    BannedBy            string `json:""banned_by""`
    MediaEmbed          string `json:""media_embed""`
    Subreddit           string `json:""subreddit""`
    SelftextHtml        string `json:""selftext_html""`
    Selftext            string `json:""selftext""`
    Likes               bool   `json:""likes""`
    SecureMedia         string `json:""secure_media""`
    LinkFlairText       string `json:""link_flair_text""`
    Id                  string `json:""id""`
    Gilded              int    `json:""gilded""`
    SecureMediaEmbed    string `json:""secure_media_embed""`
    Clicked             bool   `json:""clicked""`
    Stickied            bool   `json:""stickied""`
    Author              string `json:""author""`
    Media               string `json:""media""`
    Score               int    `json:""score""`
    ApprovedBy          string `json:""approved_by""`
    Over18              bool   `json:""over_18""`
    Hidden              bool   `json:""hidden""`
    Thumbnail           string `json:""thumbnail""`
    SubredditId         string `json:""subreddit_id""`
    Edited              int    `json:""edited""`
    LinkFlairCssClass   string `json:""link_flair_css_class""`
    AuthorFlairCssClass string `json:""author_flair_css_class""`
    Downs               int    `json:""downs""`
    Saved               bool   `json:""saved""`
    IsSelf              bool   `json:""is_self""`
    Permalink           string `json:""permalink""`
    Name                string `json:""name""`
    Created             int    `json:""created""`
    Url                 string `json:""url""`
    AuthorFlairText     string `json:""author_flair_text""`
    Title               string `json:""title""`
    CreatedUtc          int    `json:""created_utc""`
    Ups                 int    `json:""ups""`
    NumComments         int    `json:""num_comments""`
    Visited             bool   `json:""visited""`
    NumReports          string `json:""num_reports""`
    Distinguished       string `json:""distinguished""`
}","['package', 'main', 'import', '(', '""encoding/json""', '""fmt""', '""io/ioutil""', '""net/http""', '""os""', ')', 'const', 'api_endpoint', '=', '""http://www.reddit.com/r/%s/top.json?t=all&limit=100""', 'func', 'main', '()', '{', ""// Get console argument 'subreddit' and format the API endpoint URL."", 'subreddit', ':=', 'os', '.', 'Args', '[', '1', ']', 'top_by_subreddit_endpoint', ':=', 'fmt', '.', 'Sprintf', '(', 'api_endpoint', ',', 'subreddit', ')', '// Hit the API service.', 'response', ',', 'err', ':=', 'http', '.', 'Get', '(', 'top_by_subreddit_endpoint', ')', 'if', 'err', '!=', 'nil', '{', '//Perror(err)', '}', 'else', '{', 'defer', 'response', '.', 'Body', '.', 'Close', '()', 'content', ',', 'err', ':=', 'ioutil', '.', 'ReadAll', '(', 'response', '.', 'Body', ')', 'if', 'err', '!=', 'nil', '{', '//Perror(err)', '}', 'else', '{', 'var', 'top_submissions', 'Submission', 'json', '.', 'Unmarshal', '(', 'content', ',', '&', 'top_submissions', ')', '}', '}', '}', 'type', 'ByCreated', '[]', 'Submission', 'func', '(', 'a', 'ByCreated', ')', 'Len', '()', 'int', '{', 'return', 'len', '(', 'a', ')', '}', 'func', '(', 'a', 'ByCreated', ')', 'Swap', '(', 'i', ',', 'j', 'int', ')', '{', 'a', '[', 'i', '],', 'a', '[', 'j', ']', '=', 'a', '[', 'j', '],', 'a', '[', 'i', ']', '}', 'func', '(', 'a', 'ByCreated', ')', 'Less', '(', 'i', ',', 'j', 'int', ')', 'bool', '{', 'return', 'a', '[', 'i', '].', 'Created', '<', 'a', '[', 'j', '].', 'Created', '}', 'type', 'Submission', 'struct', '{', 'Domain', 'string', 'json', ':', '""domain""', 'BannedBy', 'string', 'json', ':', '""banned_by""', 'MediaEmbed', 'string', 'json', ':', '""media_embed""', 'Subreddit', 'string', 'json', ':', '""subreddit""', 'SelftextHtml', 'string', 'json', ':', '""selftext_html""', 'Selftext', 'string', 'json', ':', '""selftext""', 'Likes', 'bool', 'json', ':', '""likes""', 'SecureMedia', 'string', 'json', ':', '""secure_media""', 'LinkFlairText', 'string', 'json', ':', '""link_flair_text""', 'Id', 'string', 'json', ':', '""id""', 'Gilded', 'int', 'json', ':', '""gilded""', 'SecureMediaEmbed', 'string', 'json', ':', '""secure_media_embed""', 'Clicked', 'bool', 'json', ':', '""clicked""', 'Stickied', 'bool', 'json', ':', '""stickied""', 'Author', 'string', 'json', ':', '""author""', 'Media', 'string', 'json', ':', '""media""', 'Score', 'int', 'json', ':', '""score""', 'ApprovedBy', 'string', 'json', ':', '""approved_by""', 'Over18', 'bool', 'json', ':', '""over_18""', 'Hidden', 'bool', 'json', ':', '""hidden""', 'Thumbnail', 'string', 'json', ':', '""thumbnail""', 'SubredditId', 'string', 'json', ':', '""subreddit_id""', 'Edited', 'int', 'json', ':', '""edited""', 'LinkFlairCssClass', 'string', 'json', ':', '""link_flair_css_class""', 'AuthorFlairCssClass', 'string', 'json', ':', '""author_flair_css_class""', 'Downs', 'int', 'json', ':', '""downs""', 'Saved', 'bool', 'json', ':', '""saved""', 'IsSelf', 'bool', 'json', ':', '""is_self""', 'Permalink', 'string', 'json', ':', '""permalink""', 'Name', 'string', 'json', ':', '""name""', 'Created', 'int', 'json', ':', '""created""', 'Url', 'string', 'json', ':', '""url""', 'AuthorFlairText', 'string', 'json', ':', '""author_flair_text""', 'Title', 'string', 'json', ':', '""title""', 'CreatedUtc', 'int', 'json', ':', '""created_utc""', 'Ups', 'int', 'json', ':', '""ups""', 'NumComments', 'int', 'json', ':', '""num_comments""', 'Visited', 'bool', 'json', ':', '""visited""', 'NumReports', 'string', 'json', ':', '""num_reports""', 'Distinguished', 'string', 'json', ':', '""distinguished""', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'string_literal', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'Get', 'console', 'argument', ""'subreddit"", ""'"", 'and', 'format', 'the', 'API', 'endpoint', 'URL', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Hit', 'the', 'API', 'service', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Perror', '(', 'err', ')', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Perror', '(', 'err', ')', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator']",23317191
42,"// Direct port of R code from nmath/{phyper,dbinom,stirlerr}.c and {dpq,nmath}.h.
// Code licensed under GPL for that reason (c) Dan Kortschak.
package main

import (
    ""errors""
    ""fmt""
    ""math""
)

func main() {
    // Example values come from:
    // http://stackoverflow.com/questions/8382806/r-hypergeometric-test-phyper
    fmt.Println(Phyper(62, 1998, 5260-1998, 131, true, false))

    for x := 0.; x < 10; x++ {
        fmt.Println(Phyper(x, 10, 7, 8, true, false))
    }
    fmt.Println()
    for x := 0.; x < 10; x++ {
        fmt.Println(Dhyper(x, 10, 7, 8, false))
    }
    fmt.Println()
    for x := 0.; x < 10; x++ {
        fmt.Println(Qhyper(x, 10, 7, 8, true, false))
    }
}

var ErrDomain = errors.New(""hyper: argument out of domain"")

const (
    epsilon = 2.2204460492503131e-16
    min     = 2.2250738585072014e-308
)

// Sample of n balls from r red and b black ones; x are red
func Phyper(x, r, b, n float64, lowerTail, logP bool) (float64, error) {
    x = math.Floor(x + 1e-7)
    r = round(r)
    b = round(b)
    n = round(n)

    if r  r+b {
        return math.NaN(), ErrDomain
    }

    if x*(r+b) > n*r {
        b, r = r, b
        x = n - x - 1
        lowerTail = !lowerTail
    }

    if x < 0 {
        return dt0(lowerTail, logP), nil
    }
    if x >= r || x >= n {
        return dt1(lowerTail, logP), nil
    }

    d, err := Dhyper(x, r, b, n, logP)
    if err != nil {
        return d, err
    }
    pd := pdhyper(x, r, b, n, logP)

    if logP {
        return log(d+pd, lowerTail), nil
    }
    res := d * pd
    if lowerTail {
        return res, nil
    }
    // Use 0.5 - p + 0.5 to perhaps gain 1 bit of accuracy
    res = 0.5 - res
    return res + 0.5, nil
}

func Dhyper(x, r, b, n float64, giveLog bool) (float64, error) {
    if negativeOrNotInteger(r) || negativeOrNotInteger(b) || negativeOrNotInteger(n) || n > r+b {
        return math.NaN(), ErrDomain
    }
    if x < 0 {
        return 0, nil
    }
    if x != math.Floor(x) {
        return 0, fmt.Errorf(""non-integer x = %f"", x)
    }

    x = round(x)
    r = round(r)
    b = round(b)
    n = round(n)

    if n  b {
        return 0, nil
    }
    if n == 0 {
        if x == 0 {
            return 1, nil
        }
        return 0, nil
    }

    p := n / (r + b)
    q := (r + b - n) / (r + b)

    p1, err := dbinom(x, r, p, q, giveLog)
    if err != nil {
        return math.NaN(), err
    }
    p2, err := dbinom(n-x, b, p, q, giveLog)
    if err != nil {
        return math.NaN(), err
    }
    p3, err := dbinom(n, r+b, p, q, giveLog)
    if err != nil {
        return math.NaN(), err
    }

    if giveLog {
        return p1 + p2 - p3, nil
    }
    return p1 * p2 / p3, nil
}

func Qhyper(p, NR, NB, n float64, lowerTail, logP bool) (float64, error) {
    if notFinite(p) || notFinite(NR) || notFinite(NB) || notFinite(n) {
        return math.NaN(), ErrDomain
    }

    NR = round(NR)
    NB = round(NB)
    N := NR + NB
    n = round(n)
    if NR  N {
        return math.NaN(), ErrDomain
    }

    /* Goal: Find xr (= #{red balls in sample}) such that
    * phyper(xr, NR,NB, n) >= p > phyper(xr - 1, NR,NB, n)
     */

    xstart := math.Max(0, n-NB)
    xend := math.Min(n, NR)

    if logP {
        if p > 0 {
            return math.NaN(), ErrDomain
        }
        if p == 0 { /* upper bound*/
            if lowerTail {
                return xend, nil
            }
            return xstart, nil
        }
        if math.IsInf(p, -1) {
            if lowerTail {
                return xstart, nil
            }
            return xend, nil
        }
    } else { /* !logP */
        if p  1 {
            return math.NaN(), ErrDomain
        }
        if p == 0 {
            if lowerTail {
                return xstart, nil
            }
            return xend, nil
        }
        if p == 1 {
            if lowerTail {
                return xend, nil
            }
            return xstart, nil
        }
    }

    xr := xstart
    xb := n - xr /* always ( = #{black balls in sample} ) */

    smallN := N < 1000 /* won't have underflow in product below */
    /* if N is small, term := product.ratio( bin.coef );
    otherwise work with its logarithm to protect against underflow */
    t1, err := lfastchoose(NR, xr)
    if err != nil {
        return 0, err
    }
    t2, err := lfastchoose(NB, xb)
    if err != nil {
        return 0, err
    }
    t3, err := lfastchoose(N, n)
    if err != nil {
        return 0, err
    }
    term := t1 + t2 - t3
    if smallN {
        term = math.Exp(term)
    }
    NR -= xr
    NB -= xb

    if !lowerTail || logP {
        p = qIv(p, lowerTail, logP)
    }
    p *= 1 - 1000*epsilon /* was 64, but failed on FreeBSD sometimes */
    var sum float64
    if smallN {
        sum = term
    } else {
        sum = math.Exp(term)
    }

    for sum < p && xr < xend {
        xr++
        NB++
        if smallN {
            term *= (NR / xr) * (xb / NB)
        } else {
            term += math.Log((NR / xr) * (xb / NB))
        }
        if smallN {
            sum += term
        } else {
            sum += math.Exp(term)
        }
        xb--
        NR--
    }
    return xr, nil
}

func lfastchoose(n, k float64) (float64, error) {
    lb, err := lbeta(n-k+1, k+1)
    if err != nil {
        return math.NaN(), err
    }
    return -math.Log(n+1) - lb, nil
}

func lbeta(a, b float64) (float64, error) {
    p := a
    q := a
    if b < p {
        p = b
    } /* := min(a,b) */
    if b > q {
        q = b
    } /* := max(a,b) */

    /* both arguments must be >= 0 */
    if p < 0 {
        return math.NaN(), ErrDomain
    } else if p == 0 {
        return math.Inf(1), nil
    } else if notFinite(q) { /* q == +Inf */
        return math.Inf(1), nil
    }

    if p >= 10 {
        /* p and q are big. */
        corr := stirlerr(p) + stirlerr(q) - stirlerr(p+q)
        return math.Log(q)*-0.5 + logSqrt2Pi + corr + (p-0.5)*math.Log(p/(p+q)) + q*math.Log1p(-p/(p+q)), nil
    } else if q >= 10 {
        /* p is small, but q is big. */
        corr := stirlerr(q) - stirlerr(p+q)
        return math.Gamma(p) + corr + p - p*math.Log(p+q) + (q-0.5)*math.Log1p(-p/(p+q)), nil
    } else {
        /* p and q are small: p <= q < 10. */
        /* R change for very small args */
        if p < min {
            return lgamma(p) + (lgamma(q) - lgamma(p+q)), nil
        }
    }
    return math.Log(math.Gamma(p) * (math.Gamma(q) / math.Gamma(p+q))), nil
}

func lgamma(p float64) float64 {
    r, _ := math.Lgamma(p)
    return r
}

func qIv(p float64, lowerTail, logP bool) float64 {
    if logP {
        if lowerTail {
            return math.Exp(p)
        }
        return -math.Expm1(p)
    }
    if lowerTail {
        return p
    }
    p = 0.5 - p
    return p + 0.5
}

// Calculate
//
// phyper (x, r, b, n, TRUE, FALSE)
// [log] ----------------------------------
// dhyper (x, r, b, n, FALSE)
//
// without actually calling phyper. This assumes that
//
// x * (r + b) <= n * r
func pdhyper(x, r, b, n float64, logP bool) float64 {

    sum := 0.
    term := 1.

    for x > 0 && term >= epsilon*sum {
        term *= x * (b - n + x) / (n + 1 - x) / (r + 1 - x)
        sum += term
        x--
    }

    if logP {
        return math.Log1p(sum)
    }
    return 1 + sum
}

var (
    ln2   = math.Log(2)
    ln2Pi = math.Log(2 * math.Pi)
)

func log(x float64, lowerTail bool) float64 {
    if lowerTail {
        return math.Log(x)
    }
    if x > -ln2 {
        return math.Log(-math.Expm1(x))
    }
    return math.Log1p(-math.Exp(x))
}

func dbinom(x, n, p, q float64, giveLog bool) (float64, error) {
    if p == 0 {
        if x == 0 {
            return 1, nil
        }
        return 0, nil
    }
    if q == 0 {
        if x == n {
            return 1, nil
        }
        return 0, nil
    }

    if x == 0 {
        if n == 0 {
            return 1, nil
        }
        if p < 0.1 {
            t, err := bd0(n, n*q)
            if err != nil {
                return math.NaN(), err
            }
            return exp(-t-n*p, giveLog), nil
        }
        return exp(n*math.Log(q), giveLog), nil
    }
    if x == n {
        if q < 0.1 {
            t, err := bd0(n, n*p)
            if err != nil {
                return math.NaN(), err
            }
            return exp(-t-n*q, giveLog), nil
        }
        return exp(n*math.Log(p), giveLog), nil
    }
    if x  n {
        return 0, nil
    }

    // n*p or n*q can underflow to zero if n and p or q are small. This
    // used to occur in dbeta, and gives NaN as from R 2.3.0.
    t1, err := bd0(x, n*p)
    if err != nil {
        return math.NaN(), err
    }
    t2, err := bd0(n-x, n*q)
    if err != nil {
        return math.NaN(), err
    }
    lc := stirlerr(n) - stirlerr(x) - stirlerr(n-x) - t1 - t2

    // f = (M_2PI*x*(n-x))/n; could overflow or underflow
    // Upto R 2.7.1:
    // lf = log(M_2PI) + log(x) + log(n-x) - log(n);
    // -- following is much better for x << n :
    lf := ln2Pi + math.Log(x) + math.Log1p(-x/n)

    return exp(lc-0.5*lf, giveLog), nil
}

func negativeOrNotInteger(x float64) bool {
    return x < 0 || x != math.Floor(x)
}

func notFinite(x float64) bool {
    return math.IsNaN(x) || math.IsInf(x, 0)
}

func round(x float64) float64 {
    if _, frac := math.Modf(x); frac >= 0.5 {
        return math.Ceil(x)
    }
    return math.Floor(x)
}

func exp(x float64, giveLog bool) float64 {
    if giveLog {
        return x
    }
    return math.Exp(x)
}

func dt0(lowerTail, logP bool) float64 {
    if lowerTail {
        return d0(logP)
    }
    return d1(logP)
}

func dt1(lowerTail, logP bool) float64 {
    if lowerTail {
        return d1(logP)
    }
    return d0(logP)
}

func d0(logP bool) float64 {
    if logP {
        return math.Inf(-1)
    }
    return 0
}

func d1(logP bool) float64 {
    if logP {
        return 0
    }
    return 1
}

// bd0(x,M) :=  M * D0(x/M) = M*[ x/M * log(x/M) + 1 - (x/M) ] =
//       =  x * log(x/M) + M - x
// where M = E[X] = n*p (or = lambda), for   x, M > 0
//
// in a manner that should be stable (with small relative error)
// for all x and M=np. In particular for x/np close to 1, direct
// evaluation fails, and evaluation is based on the Taylor series
// of log((1+v)/(1-v)) with v = (x-M)/(x+M) = (x-np)/(x+np).
//
func bd0(x, np float64) (float64, error) {
    if notFinite(x) || notFinite(np) || np == 0 {
        return math.NaN(), ErrDomain
    }

    if math.Abs(x-np) < 0.1*(x+np) {
        v := (x - np) / (x + np) // might underflow to 0
        s := (x - np) * v        // s using v -- change by MM
        if math.Abs(s) < min {
            return s, nil
        }
        ej := 2 * x * v
        v = v * v
        for j := 1; j < 1000; j++ {
            // Taylor series; 1000: no infinite loop
            // as |v| < .1,  v^2000 is ""zero""
            ej *= v // = v^(2j+1)
            s1 := s + ej/float64((j<<1)+1)
            if s1 == s { // last term was effectively 0
                return s1, nil
            }
            s = s1
        }
    }
    /* else:  | x - np |  is not too small */
    return x*math.Log(x/np) + np - x, nil
}

var (
    // error for 0, 0.5, 1.0, 1.5, ..., 14.5, 15.0.
    sfErrHalves = [31]float64{
        0.0, // n=0 - wrong, place holder only
        0.1534264097200273452913848,   // 0.5
        0.0810614667953272582196702,   // 1.0
        0.0548141210519176538961390,   // 1.5
        0.0413406959554092940938221,   // 2.0
        0.03316287351993628748511048,  // 2.5
        0.02767792568499833914878929,  // 3.0
        0.02374616365629749597132920,  // 3.5
        0.02079067210376509311152277,  // 4.0
        0.01848845053267318523077934,  // 4.5
        0.01664469118982119216319487,  // 5.0
        0.01513497322191737887351255,  // 5.5
        0.01387612882307074799874573,  // 6.0
        0.01281046524292022692424986,  // 6.5
        0.01189670994589177009505572,  // 7.0
        0.01110455975820691732662991,  // 7.5
        0.010411265261972096497478567, // 8.0
        0.009799416126158803298389475, // 8.5
        0.009255462182712732917728637, // 9.0
        0.008768700134139385462952823, // 9.5
        0.008330563433362871256469318, // 10.0
        0.007934114564314020547248100, // 10.5
        0.007573675487951840794972024, // 11.0
        0.007244554301320383179543912, // 11.5
        0.006942840107209529865664152, // 12.0
        0.006665247032707682442354394, // 12.5
        0.006408994188004207068439631, // 13.0
        0.006171712263039457647532867, // 13.5
        0.005951370112758847735624416, // 14.0
        0.005746216513010115682023589, // 14.5
        0.005554733551962801371038690, // 15.0
    }

    logSqrt2Pi = math.Log(math.Sqrt(2 * math.Pi))
)

// stirlerr(n) = log(n!) - log( sqrt(2*pi*n)*(n/e)^n )
//             = log Gamma(n+1) - 1/2 * [log(2*pi) + log(n)] - n*[log(n) - 1]
//             = log Gamma(n+1) - (n + 1/2) * log(n) + n - log(2*pi)/2
func stirlerr(n float64) float64 {
    const (
        S0 = 1. / 12.
        S1 = 1. / 360.
        S2 = 1. / 1260.
        S3 = 1. / 1680.
        S4 = 1. / 1188.
    )

    var nn float64

    if n <= 15.0 {
        nn = n + n
        if nn == math.Floor(nn) {
            return sfErrHalves[int(nn)]
        }
        lg, _ := math.Lgamma(n + 1)
        return lg - (n+0.5)*math.Log(n) + n - logSqrt2Pi
    }

    nn = n * n
    switch {
    case n > 500:
        return ((S0 - S1/nn) / n)
    case n > 80:
        return ((S0 - (S1-S2/nn)/nn) / n)
    case n > 35:
        return ((S0 - (S1-(S2-S3/nn)/nn)/nn) / n)
    default: // 15 < n <= 35
        return (S0 - (S1-(S2-(S3-S4/nn)/nn)/nn)/nn) / n
    }
}","['// Direct port of R code from nmath/{phyper,dbinom,stirlerr}.c and {dpq,nmath}.h.', '// Code licensed under GPL for that reason (c) Dan Kortschak.', 'package', 'main', 'import', '(', '""errors""', '""fmt""', '""math""', ')', 'func', 'main', '()', '{', '// Example values come from:', '// http://stackoverflow.com/questions/8382806/r-hypergeometric-test-phyper', 'fmt', '.', 'Println', '(', 'Phyper', '(', '62', ',', '1998', ',', '5260', '-', '1998', ',', '131', ',', 'true', ',', 'false', '))', 'for', 'x', ':=', '0', '.;', 'x', '<', '10', ';', 'x', '++', '{', 'fmt', '.', 'Println', '(', 'Phyper', '(', 'x', ',', '10', ',', '7', ',', '8', ',', 'true', ',', 'false', '))', '}', 'fmt', '.', 'Println', '()', 'for', 'x', ':=', '0', '.;', 'x', '<', '10', ';', 'x', '++', '{', 'fmt', '.', 'Println', '(', 'Dhyper', '(', 'x', ',', '10', ',', '7', ',', '8', ',', 'false', '))', '}', 'fmt', '.', 'Println', '()', 'for', 'x', ':=', '0', '.;', 'x', '<', '10', ';', 'x', '++', '{', 'fmt', '.', 'Println', '(', 'Qhyper', '(', 'x', ',', '10', ',', '7', ',', '8', ',', 'true', ',', 'false', '))', '}', '}', 'var', 'ErrDomain', '=', 'errors', '.', 'New', '(', '""hyper: argument out of domain""', ')', 'const', '(', 'epsilon', '=', '2', '.', '2204460492503131', 'e', '-', '16', 'min', '=', '2', '.', '2250738585072014', 'e', '-', '308', ')', '// Sample of n balls from r red and b black ones; x are red', 'func', 'Phyper', '(', 'x', ',', 'r', ',', 'b', ',', 'n', 'float64', ',', 'lowerTail', ',', 'logP', 'bool', ')', '(', 'float64', ',', 'error', ')', '{', 'x', '=', 'math', '.', 'Floor', '(', 'x', '+', '1', 'e', '-', '7', ')', 'r', '=', 'round', '(', 'r', ')', 'b', '=', 'round', '(', 'b', ')', 'n', '=', 'round', '(', 'n', ')', 'if', 'r', 'r', '+', 'b', '{', 'return', 'math', '.', 'NaN', '(),', 'ErrDomain', '}', 'if', 'x', '*(', 'r', '+', 'b', ')', '>', 'n', '*', 'r', '{', 'b', ',', 'r', '=', 'r', ',', 'b', 'x', '=', 'n', '-', 'x', '-', '1', 'lowerTail', '=', '!', 'lowerTail', '}', 'if', 'x', '<', '0', '{', 'return', 'dt0', '(', 'lowerTail', ',', 'logP', '),', 'nil', '}', 'if', 'x', '>=', 'r', '||', 'x', '>=', 'n', '{', 'return', 'dt1', '(', 'lowerTail', ',', 'logP', '),', 'nil', '}', 'd', ',', 'err', ':=', 'Dhyper', '(', 'x', ',', 'r', ',', 'b', ',', 'n', ',', 'logP', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'd', ',', 'err', '}', 'pd', ':=', 'pdhyper', '(', 'x', ',', 'r', ',', 'b', ',', 'n', ',', 'logP', ')', 'if', 'logP', '{', 'return', 'log', '(', 'd', '+', 'pd', ',', 'lowerTail', '),', 'nil', '}', 'res', ':=', 'd', '*', 'pd', 'if', 'lowerTail', '{', 'return', 'res', ',', 'nil', '}', '// Use 0.5 - p + 0.5 to perhaps gain 1 bit of accuracy', 'res', '=', '0', '.', '5', '-', 'res', 'return', 'res', '+', '0', '.', '5', ',', 'nil', '}', 'func', 'Dhyper', '(', 'x', ',', 'r', ',', 'b', ',', 'n', 'float64', ',', 'giveLog', 'bool', ')', '(', 'float64', ',', 'error', ')', '{', 'if', 'negativeOrNotInteger', '(', 'r', ')', '||', 'negativeOrNotInteger', '(', 'b', ')', '||', 'negativeOrNotInteger', '(', 'n', ')', '||', 'n', '>', 'r', '+', 'b', '{', 'return', 'math', '.', 'NaN', '(),', 'ErrDomain', '}', 'if', 'x', '<', '0', '{', 'return', '0', ',', 'nil', '}', 'if', 'x', '!=', 'math', '.', 'Floor', '(', 'x', ')', '{', 'return', '0', ',', 'fmt', '.', 'Errorf', '(', '""non-integer x = %f""', ',', 'x', ')', '}', 'x', '=', 'round', '(', 'x', ')', 'r', '=', 'round', '(', 'r', ')', 'b', '=', 'round', '(', 'b', ')', 'n', '=', 'round', '(', 'n', ')', 'if', 'n', 'b', '{', 'return', '0', ',', 'nil', '}', 'if', 'n', '==', '0', '{', 'if', 'x', '==', '0', '{', 'return', '1', ',', 'nil', '}', 'return', '0', ',', 'nil', '}', 'p', ':=', 'n', '(', 'r', '+', 'b', ')', 'q', ':=', '(', 'r', '+', 'b', '-', 'n', ')', '(', 'r', '+', 'b', ')', 'p1', ',', 'err', ':=', 'dbinom', '(', 'x', ',', 'r', ',', 'p', ',', 'q', ',', 'giveLog', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'math', '.', 'NaN', '(),', 'err', '}', 'p2', ',', 'err', ':=', 'dbinom', '(', 'n', '-', 'x', ',', 'b', ',', 'p', ',', 'q', ',', 'giveLog', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'math', '.', 'NaN', '(),', 'err', '}', 'p3', ',', 'err', ':=', 'dbinom', '(', 'n', ',', 'r', '+', 'b', ',', 'p', ',', 'q', ',', 'giveLog', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'math', '.', 'NaN', '(),', 'err', '}', 'if', 'giveLog', '{', 'return', 'p1', '+', 'p2', '-', 'p3', ',', 'nil', '}', 'return', 'p1', '*', 'p2', 'p3', ',', 'nil', '}', 'func', 'Qhyper', '(', 'p', ',', 'NR', ',', 'NB', ',', 'n', 'float64', ',', 'lowerTail', ',', 'logP', 'bool', ')', '(', 'float64', ',', 'error', ')', '{', 'if', 'notFinite', '(', 'p', ')', '||', 'notFinite', '(', 'NR', ')', '||', 'notFinite', '(', 'NB', ')', '||', 'notFinite', '(', 'n', ')', '{', 'return', 'math', '.', 'NaN', '(),', 'ErrDomain', '}', 'NR', '=', 'round', '(', 'NR', ')', 'NB', '=', 'round', '(', 'NB', ')', 'N', ':=', 'NR', '+', 'NB', 'n', '=', 'round', '(', 'n', ')', 'if', 'NR', 'N', '{', 'return', 'math', '.', 'NaN', '(),', 'ErrDomain', '}', '*', 'Goal', ':', 'Find', 'xr', '(=', '{', 'red', 'balls', 'in', 'sample', '})', 'such', 'that', '*', 'phyper', '(', 'xr', ',', 'NR', ',', 'NB', ',', 'n', ')', '>=', 'p', '>', 'phyper', '(', 'xr', '-', '1', ',', 'NR', ',', 'NB', ',', 'n', ')', '*', 'xstart', ':=', 'math', '.', 'Max', '(', '0', ',', 'n', '-', 'NB', ')', 'xend', ':=', 'math', '.', 'Min', '(', 'n', ',', 'NR', ')', 'if', 'logP', '{', 'if', 'p', '>', '0', '{', 'return', 'math', '.', 'NaN', '(),', 'ErrDomain', '}', 'if', 'p', '==', '0', '{', '*', 'upper', 'bound', '*', 'if', 'lowerTail', '{', 'return', 'xend', ',', 'nil', '}', 'return', 'xstart', ',', 'nil', '}', 'if', 'math', '.', 'IsInf', '(', 'p', ',', '-', '1', ')', '{', 'if', 'lowerTail', '{', 'return', 'xstart', ',', 'nil', '}', 'return', 'xend', ',', 'nil', '}', '}', 'else', '{', '*', '!', 'logP', '*', 'if', 'p', '1', '{', 'return', 'math', '.', 'NaN', '(),', 'ErrDomain', '}', 'if', 'p', '==', '0', '{', 'if', 'lowerTail', '{', 'return', 'xstart', ',', 'nil', '}', 'return', 'xend', ',', 'nil', '}', 'if', 'p', '==', '1', '{', 'if', 'lowerTail', '{', 'return', 'xend', ',', 'nil', '}', 'return', 'xstart', ',', 'nil', '}', '}', 'xr', ':=', 'xstart', 'xb', ':=', 'n', '-', 'xr', '*', 'always', '(', '=', '{', 'black', 'balls', 'in', 'sample', '}', ')', '*', 'smallN', ':=', 'N', '<', '1000', '*', 'won', 't', 'have', 'underflow', 'in', 'product', 'below', '*', '*', 'if', 'N', 'is', 'small', ',', 'term', ':=', 'product', '.', 'ratio', '(', 'bin', '.', 'coef', ');', 'otherwise', 'work', 'with', 'its', 'logarithm', 'to', 'protect', 'against', 'underflow', '*', 't1', ',', 'err', ':=', 'lfastchoose', '(', 'NR', ',', 'xr', ')', 'if', 'err', '!=', 'nil', '{', 'return', '0', ',', 'err', '}', 't2', ',', 'err', ':=', 'lfastchoose', '(', 'NB', ',', 'xb', ')', 'if', 'err', '!=', 'nil', '{', 'return', '0', ',', 'err', '}', 't3', ',', 'err', ':=', 'lfastchoose', '(', 'N', ',', 'n', ')', 'if', 'err', '!=', 'nil', '{', 'return', '0', ',', 'err', '}', 'term', ':=', 't1', '+', 't2', '-', 't3', 'if', 'smallN', '{', 'term', '=', 'math', '.', 'Exp', '(', 'term', ')', '}', 'NR', '-=', 'xr', 'NB', '-=', 'xb', 'if', '!', 'lowerTail', '||', 'logP', '{', 'p', '=', 'qIv', '(', 'p', ',', 'lowerTail', ',', 'logP', ')', '}', 'p', '*=', '1', '-', '1000', '*', 'epsilon', '*', 'was', '64', ',', 'but', 'failed', 'on', 'FreeBSD', 'sometimes', '*', 'var', 'sum', 'float64', 'if', 'smallN', '{', 'sum', '=', 'term', '}', 'else', '{', 'sum', '=', 'math', '.', 'Exp', '(', 'term', ')', '}', 'for', 'sum', '<', 'p', '&&', 'xr', '<', 'xend', '{', 'xr', '++', 'NB', '++', 'if', 'smallN', '{', 'term', '*=', '(', 'NR', 'xr', ')', '*', '(', 'xb', 'NB', ')', '}', 'else', '{', 'term', '+=', 'math', '.', 'Log', '((', 'NR', 'xr', ')', '*', '(', 'xb', 'NB', '))', '}', 'if', 'smallN', '{', 'sum', '+=', 'term', '}', 'else', '{', 'sum', '+=', 'math', '.', 'Exp', '(', 'term', ')', '}', 'xb', '--', 'NR', '--', '}', 'return', 'xr', ',', 'nil', '}', 'func', 'lfastchoose', '(', 'n', ',', 'k', 'float64', ')', '(', 'float64', ',', 'error', ')', '{', 'lb', ',', 'err', ':=', 'lbeta', '(', 'n', '-', 'k', '+', '1', ',', 'k', '+', '1', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'math', '.', 'NaN', '(),', 'err', '}', 'return', '-', 'math', '.', 'Log', '(', 'n', '+', '1', ')', '-', 'lb', ',', 'nil', '}', 'func', 'lbeta', '(', 'a', ',', 'b', 'float64', ')', '(', 'float64', ',', 'error', ')', '{', 'p', ':=', 'a', 'q', ':=', 'a', 'if', 'b', '<', 'p', '{', 'p', '=', 'b', '}', '*', ':=', 'min', '(', 'a', ',', 'b', ')', '*', 'if', 'b', '>', 'q', '{', 'q', '=', 'b', '}', '*', ':=', 'max', '(', 'a', ',', 'b', ')', '*', '*', 'both', 'arguments', 'must', 'be', '>=', '0', '*', 'if', 'p', '<', '0', '{', 'return', 'math', '.', 'NaN', '(),', 'ErrDomain', '}', 'else', 'if', 'p', '==', '0', '{', 'return', 'math', '.', 'Inf', '(', '1', '),', 'nil', '}', 'else', 'if', 'notFinite', '(', 'q', ')', '{', '*', 'q', '==', '+', 'Inf', '*', 'return', 'math', '.', 'Inf', '(', '1', '),', 'nil', '}', 'if', 'p', '>=', '10', '{', '*', 'p', 'and', 'q', 'are', 'big', '.', '*', 'corr', ':=', 'stirlerr', '(', 'p', ')', '+', 'stirlerr', '(', 'q', ')', '-', 'stirlerr', '(', 'p', '+', 'q', ')', 'return', 'math', '.', 'Log', '(', 'q', ')*-', '0', '.', '5', '+', 'logSqrt2Pi', '+', 'corr', '+', '(', 'p', '-', '0', '.', '5', ')*', 'math', '.', 'Log', '(', 'p', '(', 'p', '+', 'q', '))', '+', 'q', '*', 'math', '.', 'Log1p', '(-', 'p', '(', 'p', '+', 'q', ')),', 'nil', '}', 'else', 'if', 'q', '>=', '10', '{', '*', 'p', 'is', 'small', ',', 'but', 'q', 'is', 'big', '.', '*', 'corr', ':=', 'stirlerr', '(', 'q', ')', '-', 'stirlerr', '(', 'p', '+', 'q', ')', 'return', 'math', '.', 'Gamma', '(', 'p', ')', '+', 'corr', '+', 'p', '-', 'p', '*', 'math', '.', 'Log', '(', 'p', '+', 'q', ')', '+', '(', 'q', '-', '0', '.', '5', ')*', 'math', '.', 'Log1p', '(-', 'p', '(', 'p', '+', 'q', ')),', 'nil', '}', 'else', '{', '*', 'p', 'and', 'q', 'are', 'small', ':', 'p', '<=', 'q', '<', '10', '.', '*', '*', 'R', 'chan', 'ge', 'for', 'very', 'small', 'args', '*', 'if', 'p', '<', 'min', '{', 'return', 'lgamma', '(', 'p', ')', '+', '(', 'lgamma', '(', 'q', ')', '-', 'lgamma', '(', 'p', '+', 'q', ')),', 'nil', '}', '}', 'return', 'math', '.', 'Log', '(', 'math', '.', 'Gamma', '(', 'p', ')', '*', '(', 'math', '.', 'Gamma', '(', 'q', ')', 'math', '.', 'Gamma', '(', 'p', '+', 'q', '))),', 'nil', '}', 'func', 'lgamma', '(', 'p', 'float64', ')', 'float64', '{', 'r', ',', '_', ':=', 'math', '.', 'Lgamma', '(', 'p', ')', 'return', 'r', '}', 'func', 'qIv', '(', 'p', 'float64', ',', 'lowerTail', ',', 'logP', 'bool', ')', 'float64', '{', 'if', 'logP', '{', 'if', 'lowerTail', '{', 'return', 'math', '.', 'Exp', '(', 'p', ')', '}', 'return', '-', 'math', '.', 'Expm1', '(', 'p', ')', '}', 'if', 'lowerTail', '{', 'return', 'p', '}', 'p', '=', '0', '.', '5', '-', 'p', 'return', 'p', '+', '0', '.', '5', '}', '// Calculate', '//', '// phyper (x, r, b, n, TRUE, FALSE)', '// [log] ----------------------------------', '// dhyper (x, r, b, n, FALSE)', '//', '// without actually calling phyper. This assumes that', '//', '// x * (r + b) <= n * r', 'func', 'pdhyper', '(', 'x', ',', 'r', ',', 'b', ',', 'n', 'float64', ',', 'logP', 'bool', ')', 'float64', '{', 'sum', ':=', '0', '.', 'term', ':=', '1', '.', 'for', 'x', '>', '0', '&&', 'term', '>=', 'epsilon', '*', 'sum', '{', 'term', '*=', 'x', '*', '(', 'b', '-', 'n', '+', 'x', ')', '(', 'n', '+', '1', '-', 'x', ')', '(', 'r', '+', '1', '-', 'x', ')', 'sum', '+=', 'term', 'x', '--', '}', 'if', 'logP', '{', 'return', 'math', '.', 'Log1p', '(', 'sum', ')', '}', 'return', '1', '+', 'sum', '}', 'var', '(', 'ln2', '=', 'math', '.', 'Log', '(', '2', ')', 'ln2Pi', '=', 'math', '.', 'Log', '(', '2', '*', 'math', '.', 'Pi', ')', ')', 'func', 'log', '(', 'x', 'float64', ',', 'lowerTail', 'bool', ')', 'float64', '{', 'if', 'lowerTail', '{', 'return', 'math', '.', 'Log', '(', 'x', ')', '}', 'if', 'x', '>', '-', 'ln2', '{', 'return', 'math', '.', 'Log', '(-', 'math', '.', 'Expm1', '(', 'x', '))', '}', 'return', 'math', '.', 'Log1p', '(-', 'math', '.', 'Exp', '(', 'x', '))', '}', 'func', 'dbinom', '(', 'x', ',', 'n', ',', 'p', ',', 'q', 'float64', ',', 'giveLog', 'bool', ')', '(', 'float64', ',', 'error', ')', '{', 'if', 'p', '==', '0', '{', 'if', 'x', '==', '0', '{', 'return', '1', ',', 'nil', '}', 'return', '0', ',', 'nil', '}', 'if', 'q', '==', '0', '{', 'if', 'x', '==', 'n', '{', 'return', '1', ',', 'nil', '}', 'return', '0', ',', 'nil', '}', 'if', 'x', '==', '0', '{', 'if', 'n', '==', '0', '{', 'return', '1', ',', 'nil', '}', 'if', 'p', '<', '0', '.', '1', '{', 't', ',', 'err', ':=', 'bd0', '(', 'n', ',', 'n', '*', 'q', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'math', '.', 'NaN', '(),', 'err', '}', 'return', 'exp', '(-', 't', '-', 'n', '*', 'p', ',', 'giveLog', '),', 'nil', '}', 'return', 'exp', '(', 'n', '*', 'math', '.', 'Log', '(', 'q', '),', 'giveLog', '),', 'nil', '}', 'if', 'x', '==', 'n', '{', 'if', 'q', '<', '0', '.', '1', '{', 't', ',', 'err', ':=', 'bd0', '(', 'n', ',', 'n', '*', 'p', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'math', '.', 'NaN', '(),', 'err', '}', 'return', 'exp', '(-', 't', '-', 'n', '*', 'q', ',', 'giveLog', '),', 'nil', '}', 'return', 'exp', '(', 'n', '*', 'math', '.', 'Log', '(', 'p', '),', 'giveLog', '),', 'nil', '}', 'if', 'x', 'n', '{', 'return', '0', ',', 'nil', '}', '// n*p or n*q can underflow to zero if n and p or q are small. This', '// used to occur in dbeta, and gives NaN as from R 2.3.0.', 't1', ',', 'err', ':=', 'bd0', '(', 'x', ',', 'n', '*', 'p', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'math', '.', 'NaN', '(),', 'err', '}', 't2', ',', 'err', ':=', 'bd0', '(', 'n', '-', 'x', ',', 'n', '*', 'q', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'math', '.', 'NaN', '(),', 'err', '}', 'lc', ':=', 'stirlerr', '(', 'n', ')', '-', 'stirlerr', '(', 'x', ')', '-', 'stirlerr', '(', 'n', '-', 'x', ')', '-', 't1', '-', 't2', '// f = (M_2PI*x*(n-x))/n; could overflow or underflow', '// Upto R 2.7.1:', '// lf = log(M_2PI) + log(x) + log(n-x) - log(n);', '// -- following is much better for x << n :', 'lf', ':=', 'ln2Pi', '+', 'math', '.', 'Log', '(', 'x', ')', '+', 'math', '.', 'Log1p', '(-', 'x', 'n', ')', 'return', 'exp', '(', 'lc', '-', '0', '.', '5', '*', 'lf', ',', 'giveLog', '),', 'nil', '}', 'func', 'negativeOrNotInteger', '(', 'x', 'float64', ')', 'bool', '{', 'return', 'x', '<', '0', '||', 'x', '!=', 'math', '.', 'Floor', '(', 'x', ')', '}', 'func', 'notFinite', '(', 'x', 'float64', ')', 'bool', '{', 'return', 'math', '.', 'IsNaN', '(', 'x', ')', '||', 'math', '.', 'IsInf', '(', 'x', ',', '0', ')', '}', 'func', 'round', '(', 'x', 'float64', ')', 'float64', '{', 'if', '_', ',', 'frac', ':=', 'math', '.', 'Modf', '(', 'x', ');', 'frac', '>=', '0', '.', '5', '{', 'return', 'math', '.', 'Ceil', '(', 'x', ')', '}', 'return', 'math', '.', 'Floor', '(', 'x', ')', '}', 'func', 'exp', '(', 'x', 'float64', ',', 'giveLog', 'bool', ')', 'float64', '{', 'if', 'giveLog', '{', 'return', 'x', '}', 'return', 'math', '.', 'Exp', '(', 'x', ')', '}', 'func', 'dt0', '(', 'lowerTail', ',', 'logP', 'bool', ')', 'float64', '{', 'if', 'lowerTail', '{', 'return', 'd0', '(', 'logP', ')', '}', 'return', 'd1', '(', 'logP', ')', '}', 'func', 'dt1', '(', 'lowerTail', ',', 'logP', 'bool', ')', 'float64', '{', 'if', 'lowerTail', '{', 'return', 'd1', '(', 'logP', ')', '}', 'return', 'd0', '(', 'logP', ')', '}', 'func', 'd0', '(', 'logP', 'bool', ')', 'float64', '{', 'if', 'logP', '{', 'return', 'math', '.', 'Inf', '(-', '1', ')', '}', 'return', '0', '}', 'func', 'd1', '(', 'logP', 'bool', ')', 'float64', '{', 'if', 'logP', '{', 'return', '0', '}', 'return', '1', '}', '// bd0(x,M) :=  M * D0(x/M) = M*[ x/M * log(x/M) + 1 - (x/M) ] =', '//       =  x * log(x/M) + M - x', '// where M = E[X] = n*p (or = lambda), for   x, M > 0', '//', '// in a manner that should be stable (with small relative error)', '// for all x and M=np. In particular for x/np close to 1, direct', '// evaluation fails, and evaluation is based on the Taylor series', '// of log((1+v)/(1-v)) with v = (x-M)/(x+M) = (x-np)/(x+np).', '//', 'func', 'bd0', '(', 'x', ',', 'np', 'float64', ')', '(', 'float64', ',', 'error', ')', '{', 'if', 'notFinite', '(', 'x', ')', '||', 'notFinite', '(', 'np', ')', '||', 'np', '==', '0', '{', 'return', 'math', '.', 'NaN', '(),', 'ErrDomain', '}', 'if', 'math', '.', 'Abs', '(', 'x', '-', 'np', ')', '<', '0', '.', '1', '*(', 'x', '+', 'np', ')', '{', 'v', ':=', '(', 'x', '-', 'np', ')', '(', 'x', '+', 'np', ')', '// might underflow to 0', 's', ':=', '(', 'x', '-', 'np', ')', '*', 'v', '// s using v -- change by MM', 'if', 'math', '.', 'Abs', '(', 's', ')', '<', 'min', '{', 'return', 's', ',', 'nil', '}', 'ej', ':=', '2', '*', 'x', '*', 'v', 'v', '=', 'v', '*', 'v', 'for', 'j', ':=', '1', ';', 'j', '<', '1000', ';', 'j', '++', '{', '// Taylor series; 1000: no infinite loop', '// as |v| < .1,  v^2000 is ""zero""', 'ej', '*=', 'v', '// = v^(2j+1)', 's1', ':=', 's', '+', 'ej', 'float64', '((', 'j', '<<', '1', ')+', '1', ')', 'if', 's1', '==', 's', '{', '// last term was effectively 0', 'return', 's1', ',', 'nil', '}', 's', '=', 's1', '}', '}', '*', 'else', ':', '|', 'x', '-', 'np', '|', 'is', 'not', 'too', 'small', '*', 'return', 'x', '*', 'math', '.', 'Log', '(', 'x', 'np', ')', '+', 'np', '-', 'x', ',', 'nil', '}', 'var', '(', '// error for 0, 0.5, 1.0, 1.5, ..., 14.5, 15.0.', 'sfErrHalves', '=', '[', '31', ']', 'float64', '{', '0', '.', '0', ',', '// n=0 - wrong, place holder only', '0', '.', '1534264097200273452913848', ',', '// 0.5', '0', '.', '0810614667953272582196702', ',', '// 1.0', '0', '.', '0548141210519176538961390', ',', '// 1.5', '0', '.', '0413406959554092940938221', ',', '// 2.0', '0', '.', '03316287351993628748511048', ',', '// 2.5', '0', '.', '02767792568499833914878929', ',', '// 3.0', '0', '.', '02374616365629749597132920', ',', '// 3.5', '0', '.', '02079067210376509311152277', ',', '// 4.0', '0', '.', '01848845053267318523077934', ',', '// 4.5', '0', '.', '01664469118982119216319487', ',', '// 5.0', '0', '.', '01513497322191737887351255', ',', '// 5.5', '0', '.', '01387612882307074799874573', ',', '// 6.0', '0', '.', '01281046524292022692424986', ',', '// 6.5', '0', '.', '01189670994589177009505572', ',', '// 7.0', '0', '.', '01110455975820691732662991', ',', '// 7.5', '0', '.', '010411265261972096497478567', ',', '// 8.0', '0', '.', '009799416126158803298389475', ',', '// 8.5', '0', '.', '009255462182712732917728637', ',', '// 9.0', '0', '.', '008768700134139385462952823', ',', '// 9.5', '0', '.', '008330563433362871256469318', ',', '// 10.0', '0', '.', '007934114564314020547248100', ',', '// 10.5', '0', '.', '007573675487951840794972024', ',', '// 11.0', '0', '.', '007244554301320383179543912', ',', '// 11.5', '0', '.', '006942840107209529865664152', ',', '// 12.0', '0', '.', '006665247032707682442354394', ',', '// 12.5', '0', '.', '006408994188004207068439631', ',', '// 13.0', '0', '.', '006171712263039457647532867', ',', '// 13.5', '0', '.', '005951370112758847735624416', ',', '// 14.0', '0', '.', '005746216513010115682023589', ',', '// 14.5', '0', '.', '005554733551962801371038690', ',', '// 15.0', '}', 'logSqrt2Pi', '=', 'math', '.', 'Log', '(', 'math', '.', 'Sqrt', '(', '2', '*', 'math', '.', 'Pi', '))', ')', '// stirlerr(n) = log(n!) - log( sqrt(2*pi*n)*(n/e)^n )', '//             = log Gamma(n+1) - 1/2 * [log(2*pi) + log(n)] - n*[log(n) - 1]', '//             = log Gamma(n+1) - (n + 1/2) * log(n) + n - log(2*pi)/2', 'func', 'stirlerr', '(', 'n', 'float64', ')', 'float64', '{', 'const', '(', 'S0', '=', '1', '.', '12', '.', 'S1', '=', '1', '.', '360', '.', 'S2', '=', '1', '.', '1260', '.', 'S3', '=', '1', '.', '1680', '.', 'S4', '=', '1', '.', '1188', '.', ')', 'var', 'nn', 'float64', 'if', 'n', '<=', '15', '.', '0', '{', 'nn', '=', 'n', '+', 'n', 'if', 'nn', '==', 'math', '.', 'Floor', '(', 'nn', ')', '{', 'return', 'sfErrHalves', '[', 'int', '(', 'nn', ')]', '}', 'lg', ',', '_', ':=', 'math', '.', 'Lgamma', '(', 'n', '+', '1', ')', 'return', 'lg', '-', '(', 'n', '+', '0', '.', '5', ')*', 'math', '.', 'Log', '(', 'n', ')', '+', 'n', '-', 'logSqrt2Pi', '}', 'nn', '=', 'n', '*', 'n', 'switch', '{', 'case', 'n', '>', '500', ':', 'return', '((', 'S0', '-', 'S1', 'nn', ')', 'n', ')', 'case', 'n', '>', '80', ':', 'return', '((', 'S0', '-', '(', 'S1', '-', 'S2', 'nn', ')', 'nn', ')', 'n', ')', 'case', 'n', '>', '35', ':', 'return', '((', 'S0', '-', '(', 'S1', '-(', 'S2', '-', 'S3', 'nn', ')', 'nn', ')', 'nn', ')', 'n', ')', 'default', ':', '// 15 < n <= 35', 'return', '(', 'S0', '-', '(', 'S1', '-(', 'S2', '-(', 'S3', '-', 'S4', 'nn', ')', 'nn', ')', 'nn', ')', 'nn', ')', 'n', '}', '}']","['comment', 'Direct', 'port', 'of', 'R', 'code', 'from', 'nmath/', '{', 'phyper', ',', 'dbinom', ',', 'stirlerr', '}', '.c', 'and', '{', 'dpq', ',', 'nmath', '}', '.h', '.', 'comment', 'Code', 'licensed', 'under', 'GPL', 'for', 'that', 'reason', '(', 'c', ')', 'Dan', 'Kortschak', '.', 'keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'Example', 'values', 'come', 'from', ':', 'comment', 'http', ':', 'stackoverflow.com/questions/8382806/r-hypergeometric-test-phyper', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'Sample', 'of', 'n', 'balls', 'from', 'r', 'red', 'and', 'b', 'black', 'ones', ';', 'x', 'are', 'red', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Use', '0.5', '-', 'p', '+', '0.5', 'to', 'perhaps', 'gain', '1', 'bit', 'of', 'accuracy', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'decimal_literal', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'operator', 'identifier', 'keyword', 'identifier', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', 'Calculate', 'comment', 'comment', 'phyper', '(', 'x', ',', 'r', ',', 'b', ',', 'n', ',', 'TRUE', ',', 'FALSE', ')', 'comment', '[', 'log', ']', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', 'comment', 'dhyper', '(', 'x', ',', 'r', ',', 'b', ',', 'n', ',', 'FALSE', ')', 'comment', 'comment', 'without', 'actually', 'calling', 'phyper', '.', 'This', 'assumes', 'that', 'comment', 'comment', 'x', '*', '(', 'r', '+', 'b', ')', '<', '=', 'n', '*', 'r', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'comment', 'n*p', 'or', 'n*q', 'can', 'underflow', 'to', 'zero', 'if', 'n', 'and', 'p', 'or', 'q', 'are', 'small', '.', 'This', 'comment', 'used', 'to', 'occur', 'in', 'dbeta', ',', 'and', 'gives', 'NaN', 'as', 'from', 'R', '2.3.0', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'f', '=', '(', 'M_2PI*x*', '(', 'n-x', ')', ')', '/n', ';', 'could', 'overflow', 'or', 'underflow', 'comment', 'Upto', 'R', '2.7.1', ':', 'comment', 'lf', '=', 'log', '(', 'M_2PI', ')', '+', 'log', '(', 'x', ')', '+', 'log', '(', 'n-x', ')', '-', 'log', '(', 'n', ')', ';', 'comment', '--', 'following', 'is', 'much', 'better', 'for', 'x', '<', '<', 'n', ':', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'keyword', 'decimal_literal', 'operator', 'comment', 'bd0', '(', 'x', ',', 'M', ')', ':', '=', 'M', '*', 'D0', '(', 'x/M', ')', '=', 'M*', '[', 'x/M', '*', 'log', '(', 'x/M', ')', '+', '1', '-', '(', 'x/M', ')', ']', '=', 'comment', '=', 'x', '*', 'log', '(', 'x/M', ')', '+', 'M', '-', 'x', 'comment', 'where', 'M', '=', 'E', '[', 'X', ']', '=', 'n*p', '(', 'or', '=', 'lambda', ')', ',', 'for', 'x', ',', 'M', '>', '0', 'comment', 'comment', 'in', 'a', 'manner', 'that', 'should', 'be', 'stable', '(', 'with', 'small', 'relative', 'error', ')', 'comment', 'for', 'all', 'x', 'and', 'M=np', '.', 'In', 'particular', 'for', 'x/np', 'close', 'to', '1', ',', 'direct', 'comment', 'evaluation', 'fails', ',', 'and', 'evaluation', 'is', 'based', 'on', 'the', 'Taylor', 'series', 'comment', 'of', 'log', '(', '(', '1+v', ')', '/', '(', '1-v', ')', ')', 'with', 'v', '=', '(', 'x-M', ')', '/', '(', 'x+M', ')', '=', '(', 'x-np', ')', '/', '(', 'x+np', ')', '.', 'comment', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'might', 'underflow', 'to', '0', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'comment', 's', 'using', 'v', '--', 'change', 'by', 'MM', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Taylor', 'series', ';', '1000', ':', 'no', 'infinite', 'loop', 'comment', 'as', '|v|', '<', '.1', ',', 'v^2000', 'is', '``', 'zero', ""''"", 'identifier', 'operator', 'identifier', 'comment', '=', 'v^', '(', '2j+1', ')', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'last', 'term', 'was', 'effectively', '0', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'error', 'for', '0', ',', '0.5', ',', '1.0', ',', '1.5', ',', '...', ',', '14.5', ',', '15.0', '.', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', 'n=0', '-', 'wrong', ',', 'place', 'holder', 'only', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '0.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '1.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '1.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '2.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '2.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '3.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '3.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '4.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '4.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '5.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '5.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '6.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '6.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '7.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '7.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '8.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '8.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '9.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '9.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '10.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '10.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '11.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '11.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '12.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '12.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '13.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '13.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '14.0', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '14.5', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', '15.0', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'stirlerr', '(', 'n', ')', '=', 'log', '(', 'n', '!', ')', '-', 'log', '(', 'sqrt', '(', '2*pi*n', ')', '*', '(', 'n/e', ')', '^n', ')', 'comment', '=', 'log', 'Gamma', '(', 'n+1', ')', '-', '1/2', '*', '[', 'log', '(', '2*pi', ')', '+', 'log', '(', 'n', ')', ']', '-', 'n*', '[', 'log', '(', 'n', ')', '-', '1', ']', 'comment', '=', 'log', 'Gamma', '(', 'n+1', ')', '-', '(', 'n', '+', '1/2', ')', '*', 'log', '(', 'n', ')', '+', 'n', '-', 'log', '(', '2*pi', ')', '/2', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', '15', '<', 'n', '<', '=', '35', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",24004951
43,"// web1 project main.go
package main

import (
    ""errors""
    ""fmt""
    ""github.com/jmcvetta/neoism""
    ""html/template""
    ""io/ioutil""
    ""net/http""
    ""regexp""
)

type Page struct {
    Title string
    Body  string
}

func (p *Page) save() error {
    db, err := neoism.Connect(""http://localhost:7474/db/data"")
    if err != nil {
        return err
    }
    res := []struct {
        N neoism.Node
    }{}
    cq := neoism.CypherQuery{
        Statement:  ""MERGE (n:Page {title: {title}}) ON MATCH SET n.body = {body} RETURN n"",
        Parameters: neoism.Props{""title"": p.Title, ""body"": p.Body},
        Result:     &res,
    }
    db.Cypher(&cq)
    return nil
}

func loadPage(title string) (*Page, error) {
    db, err := neoism.Connect(""http://localhost:7474/db/data"")
    if err != nil {
        return nil, err
    }
    res := []struct {
        Title string `json:""a.title""` // `json` tag matches column name in query
        Body  string `json:""a.body""`
    }{}
    cq := neoism.CypherQuery{
        Statement: `
            MATCH (a:Page)
            WHERE a.title = {name}
            RETURN a.title, a.body
        `,
        Parameters: neoism.Props{""name"": title},
        Result:     &res,
    }
    db.Cypher(&cq)
    r := res[0]
    if r.Title == """" || r.Body == """" {
        return nil, errors.New(""Page doesn't exist"")
    }
    return &Page{Title: r.Title, Body: r.Body}, nil
}

func viewHandler(w http.ResponseWriter, r *http.Request, title string) {
    p, err := loadPage(title)
    if err != nil {
        http.Redirect(w, r, ""/edit/""+title, http.StatusFound)
        return
    }
    renderTemplate(w, ""view"", p)
}

func editHandler(w http.ResponseWriter, r *http.Request, title string) {
    p, err := loadPage(title)
    if err != nil {
        p = &Page{Title: title}
    }
    renderTemplate(w, ""edit"", p)
}

func saveHandler(w http.ResponseWriter, r *http.Request, title string) {
    body := r.FormValue(""body"")
    p := &Page{Title: title, Body: body}
    err := p.save()
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    http.Redirect(w, r, ""/view/""+title, http.StatusFound)
}

func homeHandler(w http.ResponseWriter, r *http.Request) {
    body, err := ioutil.ReadFile(""home.html"")
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    fmt.Fprintf(w, ""%s"", body)
}

func rootHandler(w http.ResponseWriter, r *http.Request) {
    http.Redirect(w, r, ""/home"", http.StatusFound)
}

var templates = template.Must(template.ParseFiles(""edit.html"", ""view.html""))

func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
    err := templates.ExecuteTemplate(w, tmpl+"".html"", p)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
    }
}

var validPath = regexp.MustCompile(""^/(edit|save|view)/([a-zA-Z0-9]+)$"")

func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        m := validPath.FindStringSubmatch(r.URL.Path)
        if m == nil {
            http.NotFound(w, r)
            return
        }
        fn(w, r, m[2])
    }
}

func main() {
    http.HandleFunc(""/view/"", makeHandler(viewHandler))
    http.HandleFunc(""/edit/"", makeHandler(editHandler))
    http.HandleFunc(""/save/"", makeHandler(saveHandler))
    http.HandleFunc(""/home"", homeHandler)
    http.HandleFunc(""/"", rootHandler)
    http.ListenAndServe("":8082"", nil)
}","['// web1 project main.go', 'package', 'main', 'import', '(', '""errors""', '""fmt""', '""github.com/jmcvetta/neoism""', '""html/template""', '""io/ioutil""', '""net/http""', '""regexp""', ')', 'type', 'Page', 'struct', '{', 'Title', 'string', 'Body', 'string', '}', 'func', '(', 'p', '*', 'Page', ')', 'save', '()', 'error', '{', 'db', ',', 'err', ':=', 'neoism', '.', 'Connect', '(', '""http://localhost:7474/db/data""', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'res', ':=', '[]', 'struct', '{', 'N', 'neoism', '.', 'Node', '}{}', 'cq', ':=', 'neoism', '.', 'CypherQuery', '{', 'Statement', ':', '""MERGE (n:Page {title: {title}}) ON MATCH SET n.body = {body} RETURN n""', ',', 'Parameters', ':', 'neoism', '.', 'Props', '{', '""title"": p.Title, ""body""', ':', 'p', '.', 'Body', '},', 'Result', ':', '&', 'res', ',', '}', 'db', '.', 'Cypher', '(&', 'cq', ')', 'return', 'nil', '}', 'func', 'loadPage', '(', 'title', 'string', ')', '(*', 'Page', ',', 'error', ')', '{', 'db', ',', 'err', ':=', 'neoism', '.', 'Connect', '(', '""http://localhost:7474/db/data""', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'res', ':=', '[]', 'struct', '{', 'Title', 'string', 'json', ':', '""a.title""', '// `json` tag matches column name in query', 'Body', 'string', 'json', ':', '""a.body""', '}{}', 'cq', ':=', 'neoism', '.', 'CypherQuery', '{', 'Statement', ':', 'MATCH', '(', 'a', ':', 'Page', ')', 'WHERE', 'a', '.', 'title', '=', '{', 'name', '}', 'RETURN', 'a', '.', 'title', ',', 'a', '.', 'body', ',', 'Parameters', ':', 'neoism', '.', 'Props', '{', '""name""', ':', 'title', '},', 'Result', ':', '&', 'res', ',', '}', 'db', '.', 'Cypher', '(&', 'cq', ')', 'r', ':=', 'res', '[', '0', ']', 'if', 'r', '.', 'Title', '==', '"""" || r.Body == """"', '{', 'return', 'nil', ',', 'errors', '.', 'New', '(', '""Page doesn\'t exist""', ')', '}', 'return', '&', 'Page', '{', 'Title', ':', 'r', '.', 'Title', ',', 'Body', ':', 'r', '.', 'Body', '},', 'nil', '}', 'func', 'viewHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ',', 'title', 'string', ')', '{', 'p', ',', 'err', ':=', 'loadPage', '(', 'title', ')', 'if', 'err', '!=', 'nil', '{', 'http', '.', 'Redirect', '(', 'w', ',', 'r', ',', '""/edit/""', '+', 'title', ',', 'http', '.', 'StatusFound', ')', 'return', '}', 'renderTemplate', '(', 'w', ',', '""view""', ',', 'p', ')', '}', 'func', 'editHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ',', 'title', 'string', ')', '{', 'p', ',', 'err', ':=', 'loadPage', '(', 'title', ')', 'if', 'err', '!=', 'nil', '{', 'p', '=', '&', 'Page', '{', 'Title', ':', 'title', '}', '}', 'renderTemplate', '(', 'w', ',', '""edit""', ',', 'p', ')', '}', 'func', 'saveHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ',', 'title', 'string', ')', '{', 'body', ':=', 'r', '.', 'FormValue', '(', '""body""', ')', 'p', ':=', '&', 'Page', '{', 'Title', ':', 'title', ',', 'Body', ':', 'body', '}', 'err', ':=', 'p', '.', 'save', '()', 'if', 'err', '!=', 'nil', '{', 'http', '.', 'Error', '(', 'w', ',', 'err', '.', 'Error', '(),', 'http', '.', 'StatusInternalServerError', ')', 'return', '}', 'http', '.', 'Redirect', '(', 'w', ',', 'r', ',', '""/view/""', '+', 'title', ',', 'http', '.', 'StatusFound', ')', '}', 'func', 'homeHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'body', ',', 'err', ':=', 'ioutil', '.', 'ReadFile', '(', '""home.html""', ')', 'if', 'err', '!=', 'nil', '{', 'http', '.', 'Error', '(', 'w', ',', 'err', '.', 'Error', '(),', 'http', '.', 'StatusInternalServerError', ')', 'return', '}', 'fmt', '.', 'Fprintf', '(', 'w', ',', '""%s""', ',', 'body', ')', '}', 'func', 'rootHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'http', '.', 'Redirect', '(', 'w', ',', 'r', ',', '""/home""', ',', 'http', '.', 'StatusFound', ')', '}', 'var', 'templates', '=', 'template', '.', 'Must', '(', 'template', '.', 'ParseFiles', '(', '""edit.html"", ""view.html""', '))', 'func', 'renderTemplate', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'tmpl', 'string', ',', 'p', '*', 'Page', ')', '{', 'err', ':=', 'templates', '.', 'ExecuteTemplate', '(', 'w', ',', 'tmpl', '+', '"".html""', ',', 'p', ')', 'if', 'err', '!=', 'nil', '{', 'http', '.', 'Error', '(', 'w', ',', 'err', '.', 'Error', '(),', 'http', '.', 'StatusInternalServerError', ')', '}', '}', 'var', 'validPath', '=', 'regexp', '.', 'MustCompile', '(', '""^/(edit|save|view)/([a-zA-Z0-9]+)$""', ')', 'func', 'makeHandler', '(', 'fn', 'func', '(', 'http', '.', 'ResponseWriter', ',', '*', 'http', '.', 'Request', ',', 'string', '))', 'http', '.', 'HandlerFunc', '{', 'return', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'm', ':=', 'validPath', '.', 'FindStringSubmatch', '(', 'r', '.', 'URL', '.', 'Path', ')', 'if', 'm', '==', 'nil', '{', 'http', '.', 'NotFound', '(', 'w', ',', 'r', ')', 'return', '}', 'fn', '(', 'w', ',', 'r', ',', 'm', '[', '2', '])', '}', '}', 'func', 'main', '()', '{', 'http', '.', 'HandleFunc', '(', '""/view/""', ',', 'makeHandler', '(', 'viewHandler', '))', 'http', '.', 'HandleFunc', '(', '""/edit/""', ',', 'makeHandler', '(', 'editHandler', '))', 'http', '.', 'HandleFunc', '(', '""/save/""', ',', 'makeHandler', '(', 'saveHandler', '))', 'http', '.', 'HandleFunc', '(', '""/home""', ',', 'homeHandler', ')', 'http', '.', 'HandleFunc', '(', '""/""', ',', 'rootHandler', ')', 'http', '.', 'ListenAndServe', '(', '"":8082""', ',', 'nil', ')', '}']","['comment', 'web1', 'project', 'main.go', 'keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'comment', '`json`', 'tag', 'matches', 'column', 'name', 'in', 'query', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator']",24316030
44,"package main

import (
    ""errors""
    ""fmt""
    ""os""
    ""os/exec""
    ""regexp""
    ""strings""

    ""github.com/codegangsta/cli""
    ""github.com/puerkitobio/goquery""
)

const (
    MainSite        = ""https://parahumans.wordpress.com/""
    TableOfContents = ""https://parahumans.wordpress.com/table-of-contents/""
)

type Arc struct {
    Identifier string
    Title      string
    Chapters   []Chapter
}

type Chapter struct {
    Title      string
    Url        string
    Tags       []string
    Paragraphs []Paragraph
    Retries    int
    DatePosted string
}

type Paragraph string

// Format the paragraph
func (p *Paragraph) Format() {
    s := string(*p)

    // Handle emphasis
    s = strings.Replace(s, """", ""*"", -1)
    s = strings.Replace(s, """", ""*"", -1)
    s = strings.Replace(s, """", ""*"", -1)
    s = strings.Replace(s, """", ""*"", -1)

    // Handle bold
    s = strings.Replace(s, """", ""**"", -1)
    s = strings.Replace(s, """", ""**"", -1)
    s = strings.Replace(s, """", ""**"", -1)
    s = strings.Replace(s, """", ""**"", -1)

    // Remove new lines
    s = strings.Replace(s, ""\n"", """", -1)

    // And random double spaces
    s = strings.Replace(s, "".  "", "". "", -1)

    *p = Paragraph(s)
}

// Return the Arc that the given chapter belongs to
func (ch *Chapter) WhichArc(arcList []*Arc) (*Arc, error) {
    for _, arc := range arcList {
        if strings.Replace(ch.Title[:2], ""."", """", -1) == arc.Identifier {
            return arc, nil
        }
    }
    return &Arc{}, errors.New(""chapter '"" + ch.Title + ""' did not match any Arcs"")
}

// Parse a chapter and return it
func (ch *Chapter) Parse(done chan bool) {
    if ch.Retries > 3 {
        panic(""Chapter url '"" + ch.Url + ""' has timed out too many times"")
    }
    // Get the chapter
    if strings.HasPrefix(ch.Url, ""http"") == false {
        // Make sure it begins with http so goquery can use it
        ch.Url = ""https://"" + ch.Url
    }
    doc, err := goquery.NewDocument(ch.Url)
    if err != nil {
        // Try again
        ch.Retries++
        go ch.Parse(done)
        return
    }

    // Set the new chapter title
    ch.Title = doc.Find(""h1.entry-title"").Text()

    // Set the tags
    doc.Find("".entry-meta a[rel=tag]"").Each(func(_ int, s *goquery.Selection) {
        ch.Tags = append(ch.Tags, s.Text())
        if len(ch.Tags) == 0 {
            ch.Tags = append(ch.Tags, ""NONE"")
        }
    })

    // Get the date it was posted
    ch.DatePosted = doc.Find(""time.entry-date"").Text()

    // Now we'll get all the paragraphs
    doc.Find("".entry-content > p"").Each(func(_ int, s *goquery.Selection) {
        // Check for the previous/next links
        if len(s.Find(""a"").Nodes) > 0 {
            return
        }

        // Get the paragraph HTML
        st, _ := s.Html()
        para := Paragraph("""")

        // Get the actual paragraph
        if val, exists := s.Attr(""padding-left""); exists && val == ""30px"" {
            // Check to see if the paragraph is special (indented) block
            para = Paragraph(""    "" + st)
        } else if val, exists := s.Attr(""text-align""); exists && val == ""center"" {
            // Otherwise check to see if it's a separator paragraph
            para = Paragraph(""----------"")
        } else {
            // It's just a normal paragraph in this case
            para = Paragraph(st)
        }

        // And add the paragraph to the chapter
        para.Format()
        ch.Paragraphs = append(ch.Paragraphs, para)
    })

    // Finally, let's signal a success
    done <- true
}

// Return a slice of Arcs extracted from the table of contents
func ParseArcs(s string) []*Arc {
    arcs := []*Arc{}
    r, _ := regexp.Compile(`[0-9]+`)
    for _, line := range strings.Split(s, ""\n"") {
        line = strings.TrimSpace(line)
        if strings.HasPrefix(line, ""Arc"") {
            arcs = append(arcs, &Arc{
                Identifier: r.FindString(line),
                Title:      line,
            })
        } else if strings.HasPrefix(line, ""Epilogue"") {
            arcs = append(arcs, &Arc{
                Identifier: ""E"",
                Title:      line,
            })
        }
    }
    return arcs
}

func main() {
    // Define the app
    app := cli.NewApp()
    app.Name = ""Worm Scraper""
    app.Usage = ""A tool to let you get an updated EPUB copy of the serial web novel Worm, by Wildbow""
    app.Version = ""1.0""
    app.Author = ""Benjamin Harris""

    // Define the application flags
    app.Flags = []cli.Flag{
        cli.BoolFlag{""pdf"", ""Save the book as a PDF instead of an EPUB, if possible""},
        cli.BoolFlag{""with-link"", ""Include a link to the chapter online""},
        cli.BoolFlag{""with-tags"", ""Include the tags each chapter was posted under""},
        cli.BoolFlag{""with-date"", ""Include the date each chapter was posted""},
    }

    // The heart of the application
    app.Action = func(context *cli.Context) {
        // Starting the program
        fmt.Println(""Starting to scrape Worm"")

        // Get the list of arcs from the table of contents
        fmt.Println(""Gathering links from table of contents..."")
        contents, err := goquery.NewDocument(TableOfContents)
        if err != nil {
            panic(""Failed to get the table of contents! "" + err.Error())
        }

        // Parse the arcs
        arcs := ParseArcs(contents.Find("".entry-content"").Text())

        // Now get the links for the arc chapters
        contents.Find("".entry-content a:not([class*=share-icon])"").Each(func(_ int, s *goquery.Selection) {
            ch := Chapter{}
            ch.Title = strings.Replace(strings.TrimSpace(s.Text()), ""\n"", """", -1)
            ch.Url, _ = s.Attr(""href"")

            if ch.Title == """" {
                return
            }

            arc, _ := ch.WhichArc(arcs)
            arc.Chapters = append(arc.Chapters, ch)
        })

        // Manually add missing chapter in Epilogue
        c := Chapter{
            Title: ""E.2"",
            Url:   ""https://parahumans.wordpress.com/2013/11/05/teneral-e-2/"",
        }
        a, _ := c.WhichArc(arcs)
        a.Chapters = append(a.Chapters, c)
        copy(a.Chapters[1+1:], a.Chapters[1:])
        a.Chapters[1] = c

        // Now start getting the chapters
        chapters := 0
        done := make(chan bool)
        for _, arc := range arcs {
            for i, _ := range arc.Chapters {
                chapters++
                go arc.Chapters[i].Parse(done)
            }
        }

        fmt.Println(""Starting to parse"", chapters, ""chapters"")
        fmt.Print(""Finished: "")

        totalChapters := chapters
        for {
            select {
            case <-done:
                chapters--
                fmt.Print(totalChapters-chapters, "","")
            }
            if chapters == 0 {
                // We're done with all the chapters
                close(done)
                fmt.Println()
                break
            }
        }

        // And let's write all this stuff to a file now
        fmt.Println(""Saving results to file..."")
        f, err := os.OpenFile(""Worm.md"", os.O_RDWR|os.O_CREATE|os.O_EXCL, 0666)
        if err != nil {
            panic(err)
        }
        defer f.Close()

        // Define pagebreak
        PageBreak := ""\n\n""

        // Write the cover
        f.WriteString(""# Worm\n\n"")
        f.WriteString(""By Wildbow\n\n"")
        f.WriteString(""Website: "" + MainSite)

        // Now loop through the Arcs
        for _, arc := range arcs {
            f.WriteString(PageBreak + ""# "" + arc.Title)
            for _, chapter := range arc.Chapters {
                f.WriteString(""\n\n"")
                f.WriteString(""## "" + chapter.Title + ""\n\n"")
                if context.Bool(""with-tags"") {
                    f.WriteString(""**Tags:** "" + strings.Join(chapter.Tags, "", "") + ""  "")
                }
                if context.Bool(""with-date"") {
                    f.WriteString(""**Date:** "" + chapter.DatePosted + ""  "")
                }
                if context.Bool(""with-link"") {
                    f.WriteString(""**Link:** "" + chapter.Url + ""  "")
                }
                f.WriteString(""\n\n"")

                // Now save the chapter's paragraphs
                for _, p := range chapter.Paragraphs {
                    f.WriteString(string(p) + ""\n\n"")
                }
            }
        }

        // Now let's try to convert the markdown file into an ebook format (epub, pdf)
        fmt.Print(""Attempting to convert Markdown file... "")
        cmdText := []string{""-S"", ""Worm.md"", ""--epub-chapter-level"", ""2"", ""-o"", ""Worm.epub""}
        if context.Bool(""pdf"") {
            cmdText = []string{""Worm.md"", ""-o"", ""Worm.pdf""}
            PageBreak = ``
        }
        cmd := exec.Command(""pandoc"", cmdText...)
        err = cmd.Run()
        if err != nil {
            fmt.Println(""Conversion failed! Make sure you've installed Pandoc (http://johnmacfarlane.net/pandoc/installing.html) if you want to convert the generated Markdown file to an ebook compatible format. In the meantime, we've left you the Markdown file."")
        } else {
            _ = os.Remove(""Worm.md"")
            fmt.Println(""Completed!"")
        }
    }

    // Run the application
    app.Run(os.Args)
}","['package', 'main', 'import', '(', '""errors""', '""fmt""', '""os""', '""os/exec""', '""regexp""', '""strings""', '""github.com/codegangsta/cli""', '""github.com/puerkitobio/goquery""', ')', 'const', '(', 'MainSite', '=', '""https://parahumans.wordpress.com/""', 'TableOfContents', '=', '""https://parahumans.wordpress.com/table-of-contents/""', ')', 'type', 'Arc', 'struct', '{', 'Identifier', 'string', 'Title', 'string', 'Chapters', '[]', 'Chapter', '}', 'type', 'Chapter', 'struct', '{', 'Title', 'string', 'Url', 'string', 'Tags', '[]', 'string', 'Paragraphs', '[]', 'Paragraph', 'Retries', 'int', 'DatePosted', 'string', '}', 'type', 'Paragraph', 'string', '// Format the paragraph', 'func', '(', 'p', '*', 'Paragraph', ')', 'Format', '()', '{', 's', ':=', 'string', '(*', 'p', ')', '// Handle emphasis', 's', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""*""', ',', '-', '1', ')', 's', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""*""', ',', '-', '1', ')', 's', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""*""', ',', '-', '1', ')', 's', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""*""', ',', '-', '1', ')', '// Handle bold', 's', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""**""', ',', '-', '1', ')', 's', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""**""', ',', '-', '1', ')', 's', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""**""', ',', '-', '1', ')', 's', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""**""', ',', '-', '1', ')', '// Remove new lines', 's', '=', 'strings', '.', 'Replace', '(', 's', ',', '""\\n"", """"', ',', '-', '1', ')', '// And random double spaces', 's', '=', 'strings', '.', 'Replace', '(', 's', ',', '"".  "", "". ""', ',', '-', '1', ')', '*', 'p', '=', 'Paragraph', '(', 's', ')', '}', '// Return the Arc that the given chapter belongs to', 'func', '(', 'ch', '*', 'Chapter', ')', 'WhichArc', '(', 'arcList', '[]*', 'Arc', ')', '(*', 'Arc', ',', 'error', ')', '{', 'for', '_', ',', 'arc', ':=', 'range', 'arcList', '{', 'if', 'strings', '.', 'Replace', '(', 'ch', '.', 'Title', '[:', '2', '],', '""."", """"', ',', '-', '1', ')', '==', 'arc', '.', 'Identifier', '{', 'return', 'arc', ',', 'nil', '}', '}', 'return', '&', 'Arc', '{},', 'errors', '.', 'New', '(', '""chapter \'"" + ch.Title + ""\' did not match any Arcs""', ')', '}', '// Parse a chapter and return it', 'func', '(', 'ch', '*', 'Chapter', ')', 'Parse', '(', 'done', 'chan', 'bool', ')', '{', 'if', 'ch', '.', 'Retries', '>', '3', '{', 'panic', '(', '""Chapter url \'"" + ch.Url + ""\' has timed out too many times""', ')', '}', '// Get the chapter', 'if', 'strings', '.', 'HasPrefix', '(', 'ch', '.', 'Url', ',', '""http""', ')', '==', 'false', '{', '// Make sure it begins with http so goquery can use it', 'ch', '.', 'Url', '=', '""https://""', '+', 'ch', '.', 'Url', '}', 'doc', ',', 'err', ':=', 'go', 'query', '.', 'NewDocument', '(', 'ch', '.', 'Url', ')', 'if', 'err', '!=', 'nil', '{', '// Try again', 'ch', '.', 'Retries', '++', 'go', 'ch', '.', 'Parse', '(', 'done', ')', 'return', '}', '// Set the new chapter title', 'ch', '.', 'Title', '=', 'doc', '.', 'Find', '(', '""h1.entry-title""', ').', 'Text', '()', '// Set the tags', 'doc', '.', 'Find', '(', '"".entry-meta a[rel=tag]""', ').', 'Each', '(', 'func', '(', '_', 'int', ',', 's', '*', 'go', 'query', '.', 'Selection', ')', '{', 'ch', '.', 'Tags', '=', 'append', '(', 'ch', '.', 'Tags', ',', 's', '.', 'Text', '())', 'if', 'len', '(', 'ch', '.', 'Tags', ')', '==', '0', '{', 'ch', '.', 'Tags', '=', 'append', '(', 'ch', '.', 'Tags', ',', '""NONE""', ')', '}', '})', '// Get the date it was posted', 'ch', '.', 'DatePosted', '=', 'doc', '.', 'Find', '(', '""time.entry-date""', ').', 'Text', '()', ""// Now we'll get all the paragraphs"", 'doc', '.', 'Find', '(', '"".entry-content > p""', ').', 'Each', '(', 'func', '(', '_', 'int', ',', 's', '*', 'go', 'query', '.', 'Selection', ')', '{', '// Check for the previous/next links', 'if', 'len', '(', 's', '.', 'Find', '(', '""a""', ').', 'Nodes', ')', '>', '0', '{', 'return', '}', '// Get the paragraph HTML', 'st', ',', '_', ':=', 's', '.', 'Html', '()', 'para', ':=', 'Paragraph', '(', '""""', ')', '// Get the actual paragraph', 'if', 'val', ',', 'exists', ':=', 's', '.', 'Attr', '(', '""padding-left""); exists && val == ""30px""', '{', '// Check to see if the paragraph is special (indented) block', 'para', '=', 'Paragraph', '(', '""    ""', '+', 'st', ')', '}', 'else', 'if', 'val', ',', 'exists', ':=', 's', '.', 'Attr', '(', '""text-align""); exists && val == ""center""', '{', ""// Otherwise check to see if it's a separator paragraph"", 'para', '=', 'Paragraph', '(', '""----------""', ')', '}', 'else', '{', ""// It's just a normal paragraph in this case"", 'para', '=', 'Paragraph', '(', 'st', ')', '}', '// And add the paragraph to the chapter', 'para', '.', 'Format', '()', 'ch', '.', 'Paragraphs', '=', 'append', '(', 'ch', '.', 'Paragraphs', ',', 'para', ')', '})', ""// Finally, let's signal a success"", 'done', '<-', 'true', '}', '// Return a slice of Arcs extracted from the table of contents', 'func', 'ParseArcs', '(', 's', 'string', ')', '[]*', 'Arc', '{', 'arcs', ':=', '[]*', 'Arc', '{}', 'r', ',', '_', ':=', 'regexp', '.', 'Compile', '(', '[', '0', '-', '9', ']+', ')', 'for', '_', ',', 'line', ':=', 'range', 'strings', '.', 'Split', '(', 's', ',', '""\\n""', ')', '{', 'line', '=', 'strings', '.', 'TrimSpace', '(', 'line', ')', 'if', 'strings', '.', 'HasPrefix', '(', 'line', ',', '""Arc""', ')', '{', 'arcs', '=', 'append', '(', 'arcs', ',', '&', 'Arc', '{', 'Identifier', ':', 'r', '.', 'FindString', '(', 'line', '),', 'Title', ':', 'line', ',', '})', '}', 'else', 'if', 'strings', '.', 'HasPrefix', '(', 'line', ',', '""Epilogue""', ')', '{', 'arcs', '=', 'append', '(', 'arcs', ',', '&', 'Arc', '{', 'Identifier', ':', '""E""', ',', 'Title', ':', 'line', ',', '})', '}', '}', 'return', 'arcs', '}', 'func', 'main', '()', '{', '// Define the app', 'app', ':=', 'cli', '.', 'NewApp', '()', 'app', '.', 'Name', '=', '""Worm Scraper""', 'app', '.', 'Usage', '=', '""A tool to let you get an updated EPUB copy of the serial web novel Worm, by Wildbow""', 'app', '.', 'Version', '=', '""1.0""', 'app', '.', 'Author', '=', '""Benjamin Harris""', '// Define the application flags', 'app', '.', 'Flags', '=', '[]', 'cli', '.', 'Flag', '{', 'cli', '.', 'BoolFlag', '{', '""pdf"", ""Save the book as a PDF instead of an EPUB, if possible""', '},', 'cli', '.', 'BoolFlag', '{', '""with-link"", ""Include a link to the chapter online""', '},', 'cli', '.', 'BoolFlag', '{', '""with-tags"", ""Include the tags each chapter was posted under""', '},', 'cli', '.', 'BoolFlag', '{', '""with-date"", ""Include the date each chapter was posted""', '},', '}', '// The heart of the application', 'app', '.', 'Action', '=', 'func', '(', 'context', '*', 'cli', '.', 'Context', ')', '{', '// Starting the program', 'fmt', '.', 'Println', '(', '""Starting to scrape Worm""', ')', '// Get the list of arcs from the table of contents', 'fmt', '.', 'Println', '(', '""Gathering links from table of contents...""', ')', 'contents', ',', 'err', ':=', 'go', 'query', '.', 'NewDocument', '(', 'TableOfContents', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', '""Failed to get the table of contents! ""', '+', 'err', '.', 'Error', '())', '}', '// Parse the arcs', 'arcs', ':=', 'ParseArcs', '(', 'contents', '.', 'Find', '(', '"".entry-content""', ').', 'Text', '())', '// Now get the links for the arc chapters', 'contents', '.', 'Find', '(', '"".entry-content a:not([class*=share-icon])""', ').', 'Each', '(', 'func', '(', '_', 'int', ',', 's', '*', 'go', 'query', '.', 'Selection', ')', '{', 'ch', ':=', 'Chapter', '{}', 'ch', '.', 'Title', '=', 'strings', '.', 'Replace', '(', 'strings', '.', 'TrimSpace', '(', 's', '.', 'Text', '()),', '""\\n"", """"', ',', '-', '1', ')', 'ch', '.', 'Url', ',', '_', '=', 's', '.', 'Attr', '(', '""href""', ')', 'if', 'ch', '.', 'Title', '==', '""""', '{', 'return', '}', 'arc', ',', '_', ':=', 'ch', '.', 'WhichArc', '(', 'arcs', ')', 'arc', '.', 'Chapters', '=', 'append', '(', 'arc', '.', 'Chapters', ',', 'ch', ')', '})', '// Manually add missing chapter in Epilogue', 'c', ':=', 'Chapter', '{', 'Title', ':', '""E.2""', ',', 'Url', ':', '""https://parahumans.wordpress.com/2013/11/05/teneral-e-2/""', ',', '}', 'a', ',', '_', ':=', 'c', '.', 'WhichArc', '(', 'arcs', ')', 'a', '.', 'Chapters', '=', 'append', '(', 'a', '.', 'Chapters', ',', 'c', ')', 'copy', '(', 'a', '.', 'Chapters', '[', '1', '+', '1', ':],', 'a', '.', 'Chapters', '[', '1', ':])', 'a', '.', 'Chapters', '[', '1', ']', '=', 'c', '// Now start getting the chapters', 'chapters', ':=', '0', 'done', ':=', 'make', '(', 'chan', 'bool', ')', 'for', '_', ',', 'arc', ':=', 'range', 'arcs', '{', 'for', 'i', ',', '_', ':=', 'range', 'arc', '.', 'Chapters', '{', 'chapters', '++', 'go', 'arc', '.', 'Chapters', '[', 'i', '].', 'Parse', '(', 'done', ')', '}', '}', 'fmt', '.', 'Println', '(', '""Starting to parse"", chapters, ""chapters""', ')', 'fmt', '.', 'Print', '(', '""Finished: ""', ')', 'totalChapters', ':=', 'chapters', 'for', '{', 'select', '{', 'case', '<-', 'done', ':', 'chapters', '--', 'fmt', '.', 'Print', '(', 'totalChapters', '-', 'chapters', ',', '"",""', ')', '}', 'if', 'chapters', '==', '0', '{', ""// We're done with all the chapters"", 'close', '(', 'done', ')', 'fmt', '.', 'Println', '()', 'break', '}', '}', ""// And let's write all this stuff to a file now"", 'fmt', '.', 'Println', '(', '""Saving results to file...""', ')', 'f', ',', 'err', ':=', 'os', '.', 'OpenFile', '(', '""Worm.md""', ',', 'os', '.', 'O_RDWR', '|', 'os', '.', 'O_CREATE', '|', 'os', '.', 'O_EXCL', ',', '0666', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'defer', 'f', '.', 'Close', '()', '// Define pagebreak', 'PageBreak', ':=', '""\\n\\n""', '// Write the cover', 'f', '.', 'WriteString', '(', '""# Worm\\n\\n""', ')', 'f', '.', 'WriteString', '(', '""By Wildbow\\n\\n""', ')', 'f', '.', 'WriteString', '(', '""Website: ""', '+', 'MainSite', ')', '// Now loop through the Arcs', 'for', '_', ',', 'arc', ':=', 'range', 'arcs', '{', 'f', '.', 'WriteString', '(', 'PageBreak', '+', '""# ""', '+', 'arc', '.', 'Title', ')', 'for', '_', ',', 'chapter', ':=', 'range', 'arc', '.', 'Chapters', '{', 'f', '.', 'WriteString', '(', '""\\n\\n""', ')', 'f', '.', 'WriteString', '(', '""## "" + chapter.Title + ""\\n\\n""', ')', 'if', 'context', '.', 'Bool', '(', '""with-tags""', ')', '{', 'f', '.', 'WriteString', '(', '""**Tags:** "" + strings.Join(chapter.Tags, "", "") + ""  ""', ')', '}', 'if', 'context', '.', 'Bool', '(', '""with-date""', ')', '{', 'f', '.', 'WriteString', '(', '""**Date:** "" + chapter.DatePosted + ""  ""', ')', '}', 'if', 'context', '.', 'Bool', '(', '""with-link""', ')', '{', 'f', '.', 'WriteString', '(', '""**Link:** "" + chapter.Url + ""  ""', ')', '}', 'f', '.', 'WriteString', '(', '""\\n\\n""', ')', ""// Now save the chapter's paragraphs"", 'for', '_', ',', 'p', ':=', 'range', 'chapter', '.', 'Paragraphs', '{', 'f', '.', 'WriteString', '(', 'string', '(', 'p', ')', '+', '""\\n\\n""', ')', '}', '}', '}', ""// Now let's try to convert the markdown file into an ebook format (epub, pdf)"", 'fmt', '.', 'Print', '(', '""Attempting to convert Markdown file... ""', ')', 'cmdText', ':=', '[]', 'string', '{', '""-S"", ""Worm.md"", ""--epub-chapter-level"", ""2"", ""-o"", ""Worm.epub""', '}', 'if', 'context', '.', 'Bool', '(', '""pdf""', ')', '{', 'cmdText', '=', '[]', 'string', '{', '""Worm.md"", ""-o"", ""Worm.pdf""', '}', 'PageBreak', '=', '}', 'cmd', ':=', 'exec', '.', 'Command', '(', '""pandoc""', ',', 'cmdText', '...)', 'err', '=', 'cmd', '.', 'Run', '()', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', '""Conversion failed! Make sure you\'ve installed Pandoc (http://johnmacfarlane.net/pandoc/installing.html) if you want to convert the generated Markdown file to an ebook compatible format. In the meantime, we\'ve left you the Markdown file.""', ')', '}', 'else', '{', '_', '=', 'os', '.', 'Remove', '(', '""Worm.md""', ')', 'fmt', '.', 'Println', '(', '""Completed!""', ')', '}', '}', '// Run the application', 'app', '.', 'Run', '(', 'os', '.', 'Args', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'comment', 'Format', 'the', 'paragraph', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Handle', 'emphasis', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'comment', 'Handle', 'bold', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'comment', 'Remove', 'new', 'lines', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'comment', 'And', 'random', 'double', 'spaces', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Return', 'the', 'Arc', 'that', 'the', 'given', 'chapter', 'belongs', 'to', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'Parse', 'a', 'chapter', 'and', 'return', 'it', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'Get', 'the', 'chapter', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'comment', 'Make', 'sure', 'it', 'begins', 'with', 'http', 'so', 'goquery', 'can', 'use', 'it', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Try', 'again', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'Set', 'the', 'new', 'chapter', 'title', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'comment', 'Set', 'the', 'tags', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'comment', 'Get', 'the', 'date', 'it', 'was', 'posted', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'comment', 'Now', 'we', ""'ll"", 'get', 'all', 'the', 'paragraphs', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Check', 'for', 'the', 'previous/next', 'links', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'comment', 'Get', 'the', 'paragraph', 'HTML', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Get', 'the', 'actual', 'paragraph', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Check', 'to', 'see', 'if', 'the', 'paragraph', 'is', 'special', '(', 'indented', ')', 'block', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Otherwise', 'check', 'to', 'see', 'if', 'it', ""'s"", 'a', 'separator', 'paragraph', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'comment', 'It', ""'s"", 'just', 'a', 'normal', 'paragraph', 'in', 'this', 'case', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'And', 'add', 'the', 'paragraph', 'to', 'the', 'chapter', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Finally', ',', 'let', ""'s"", 'signal', 'a', 'success', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Return', 'a', 'slice', 'of', 'Arcs', 'extracted', 'from', 'the', 'table', 'of', 'contents', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'Define', 'the', 'app', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'comment', 'Define', 'the', 'application', 'flags', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'The', 'heart', 'of', 'the', 'application', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Starting', 'the', 'program', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Get', 'the', 'list', 'of', 'arcs', 'from', 'the', 'table', 'of', 'contents', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Parse', 'the', 'arcs', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'comment', 'Now', 'get', 'the', 'links', 'for', 'the', 'arc', 'chapters', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Manually', 'add', 'missing', 'chapter', 'in', 'Epilogue', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'comment', 'Now', 'start', 'getting', 'the', 'chapters', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'We', ""'re"", 'done', 'with', 'all', 'the', 'chapters', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'comment', 'And', 'let', ""'s"", 'write', 'all', 'this', 'stuff', 'to', 'a', 'file', 'now', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Define', 'pagebreak', 'identifier', 'operator', 'string_literal', 'comment', 'Write', 'the', 'cover', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'comment', 'Now', 'loop', 'through', 'the', 'Arcs', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Now', 'save', 'the', 'chapter', ""'s"", 'paragraphs', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'operator', 'comment', 'Now', 'let', ""'s"", 'try', 'to', 'convert', 'the', 'markdown', 'file', 'into', 'an', 'ebook', 'format', '(', 'epub', ',', 'pdf', ')', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'comment', 'Run', 'the', 'application', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",24456511
45,"package main

import (
    ""fmt""
    ""io""
    ""net/http""
    ""regexp""
    ""strconv""

    ""github.com/zenazn/goji""
    ""github.com/zenazn/goji/param""
    ""github.com/zenazn/goji/web""
)

// Note: the code below cuts a lot of corners to make the example app simple.

func main() {
    // Add routes to the global handler
    goji.Get(""/"", Root)
    // Fully backwards compatible with net/http's Handlers
    goji.Get(""/greets"", http.RedirectHandler(""/"", 301))
    // Use your favorite HTTP verbs
    goji.Post(""/greets"", NewGreet)
    // Use Sinatra-style patterns in your URLs
    goji.Get(""/users/:name"", GetUser)
    // Goji also supports regular expressions with named capture groups.
    goji.Get(regexp.MustCompile(`^/greets/(?P\d+)$`), GetGreet)

    // Middleware can be used to inject behavior into your app. The
    // middleware for this application are defined in middleware.go, but you
    // can put them wherever you like.
    goji.Use(PlainText)

    admin := web.New()
    goji.Handle(""/admin/*"", admin)
    admin.Use(SuperSecure)

    // Goji's routing, like Sinatra's, is exact: no effort is made to
    // normalize trailing slashes.
    goji.Get(""/admin"", http.RedirectHandler(""/admin/"", 301))


    admin.Get(""/admin/"", AdminRoot)
    admin.Get(""/admin/finances"", AdminFinances)

    // Use a custom 404 handler
    goji.NotFound(NotFound)

    goji.Serve()
}","['package', 'main', 'import', '(', '""fmt""', '""io""', '""net/http""', '""regexp""', '""strconv""', '""github.com/zenazn/goji""', '""github.com/zenazn/goji/param""', '""github.com/zenazn/goji/web""', ')', '// Note: the code below cuts a lot of corners to make the example app simple.', 'func', 'main', '()', '{', '// Add routes to the global handler', 'go', 'ji', '.', 'Get', '(', '""/""', ',', 'Root', ')', ""// Fully backwards compatible with net/http's Handlers"", 'go', 'ji', '.', 'Get', '(', '""/greets"", http.RedirectHandler(""/""', ',', '301', '))', '// Use your favorite HTTP verbs', 'go', 'ji', '.', 'Post', '(', '""/greets""', ',', 'NewGreet', ')', '// Use Sinatra-style patterns in your URLs', 'go', 'ji', '.', 'Get', '(', '""/users/:name""', ',', 'GetUser', ')', '// Goji also supports regular expressions with named capture groups.', 'go', 'ji', '.', 'Get', '(', 'regexp', '.', 'MustCompile', '(', '^', 'greets', '(', 'P', 'd', '+)$', '),', 'GetGreet', ')', '// Middleware can be used to inject behavior into your app. The', '// middleware for this application are defined in middleware.go, but you', '// can put them wherever you like.', 'go', 'ji', '.', 'Use', '(', 'PlainText', ')', 'admin', ':=', 'web', '.', 'New', '()', 'go', 'ji', '.', 'Handle', '(', '""/admin/*""', ',', 'admin', ')', 'admin', '.', 'Use', '(', 'SuperSecure', ')', ""// Goji's routing, like Sinatra's, is exact: no effort is made to"", '// normalize trailing slashes.', 'go', 'ji', '.', 'Get', '(', '""/admin"", http.RedirectHandler(""/admin/""', ',', '301', '))', 'admin', '.', 'Get', '(', '""/admin/""', ',', 'AdminRoot', ')', 'admin', '.', 'Get', '(', '""/admin/finances""', ',', 'AdminFinances', ')', '// Use a custom 404 handler', 'go', 'ji', '.', 'NotFound', '(', 'NotFound', ')', 'go', 'ji', '.', 'Serve', '()', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'comment', 'Note', ':', 'the', 'code', 'below', 'cuts', 'a', 'lot', 'of', 'corners', 'to', 'make', 'the', 'example', 'app', 'simple', '.', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'Add', 'routes', 'to', 'the', 'global', 'handler', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'comment', 'Fully', 'backwards', 'compatible', 'with', 'net/http', ""'s"", 'Handlers', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'decimal_literal', 'operator', 'comment', 'Use', 'your', 'favorite', 'HTTP', 'verbs', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'comment', 'Use', 'Sinatra-style', 'patterns', 'in', 'your', 'URLs', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'comment', 'Goji', 'also', 'supports', 'regular', 'expressions', 'with', 'named', 'capture', 'groups', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'comment', 'Middleware', 'can', 'be', 'used', 'to', 'inject', 'behavior', 'into', 'your', 'app', '.', 'The', 'comment', 'middleware', 'for', 'this', 'application', 'are', 'defined', 'in', 'middleware.go', ',', 'but', 'you', 'comment', 'can', 'put', 'them', 'wherever', 'you', 'like', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Goji', ""'s"", 'routing', ',', 'like', 'Sinatra', ""'s"", ',', 'is', 'exact', ':', 'no', 'effort', 'is', 'made', 'to', 'comment', 'normalize', 'trailing', 'slashes', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'comment', 'Use', 'a', 'custom', '404', 'handler', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator']",24640352
46,"package main

import (
    ""encoding/base64""
    ""net/http""
    ""strings""

    ""github.com/zenazn/goji/web""
)

// PlainText sets the content-type of responses to text/plain.
func PlainText(h http.Handler) http.Handler {
    fn := func(w http.ResponseWriter, r *http.Request) {
        w.Header().Set(""Content-Type"", ""text/plain"")
        h.ServeHTTP(w, r)
    }
    return http.HandlerFunc(fn)
}

// Nobody will ever guess this!
const Password = ""admin:admin""

// SuperSecure is HTTP Basic Auth middleware for super-secret admin page. Shhhh!
func SuperSecure(c *web.C, h http.Handler) http.Handler {
    fn := func(w http.ResponseWriter, r *http.Request) {
        auth := r.Header.Get(""Authorization"")
        if !strings.HasPrefix(auth, ""Basic "") {
            pleaseAuth(w)
            return
        }

        password, err := base64.StdEncoding.DecodeString(auth[6:])
        if err != nil || string(password) != Password {
            pleaseAuth(w)
            return
        }

        h.ServeHTTP(w, r)
    }
    return http.HandlerFunc(fn)
}

func pleaseAuth(w http.ResponseWriter) {
    w.Header().Set(""WWW-Authenticate"", `Basic realm=""Gritter""`)
    w.WriteHeader(http.StatusUnauthorized)
    w.Write([]byte(""Go away!\n""))
}","['package', 'main', 'import', '(', '""encoding/base64""', '""net/http""', '""strings""', '""github.com/zenazn/goji/web""', ')', '// PlainText sets the content-type of responses to text/plain.', 'func', 'PlainText', '(', 'h', 'http', '.', 'Handler', ')', 'http', '.', 'Handler', '{', 'fn', ':=', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'w', '.', 'Header', '().', 'Set', '(', '""Content-Type"", ""text/plain""', ')', 'h', '.', 'ServeHTTP', '(', 'w', ',', 'r', ')', '}', 'return', 'http', '.', 'HandlerFunc', '(', 'fn', ')', '}', '// Nobody will ever guess this!', 'const', 'Password', '=', '""admin:admin""', '// SuperSecure is HTTP Basic Auth middleware for super-secret admin page. Shhhh!', 'func', 'SuperSecure', '(', 'c', '*', 'web', '.', 'C', ',', 'h', 'http', '.', 'Handler', ')', 'http', '.', 'Handler', '{', 'fn', ':=', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'auth', ':=', 'r', '.', 'Header', '.', 'Get', '(', '""Authorization""', ')', 'if', '!', 'strings', '.', 'HasPrefix', '(', 'auth', ',', '""Basic ""', ')', '{', 'pleaseAuth', '(', 'w', ')', 'return', '}', 'password', ',', 'err', ':=', 'base64', '.', 'StdEncoding', '.', 'DecodeString', '(', 'auth', '[', '6', ':])', 'if', 'err', '!=', 'nil', '||', 'string', '(', 'password', ')', '!=', 'Password', '{', 'pleaseAuth', '(', 'w', ')', 'return', '}', 'h', '.', 'ServeHTTP', '(', 'w', ',', 'r', ')', '}', 'return', 'http', '.', 'HandlerFunc', '(', 'fn', ')', '}', 'func', 'pleaseAuth', '(', 'w', 'http', '.', 'ResponseWriter', ')', '{', 'w', '.', 'Header', '().', 'Set', '(', '""WWW-Authenticate"", `Basic realm=""Gritter""', ')', 'w', '.', 'WriteHeader', '(', 'http', '.', 'StatusUnauthorized', ')', 'w', '.', 'Write', '([]', 'byte', '(', '""Go away!\\n""', '))', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'comment', 'PlainText', 'sets', 'the', 'content-type', 'of', 'responses', 'to', 'text/plain', '.', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Nobody', 'will', 'ever', 'guess', 'this', '!', 'keyword', 'identifier', 'operator', 'string_literal', 'comment', 'SuperSecure', 'is', 'HTTP', 'Basic', 'Auth', 'middleware', 'for', 'super-secret', 'admin', 'page', '.', 'Shhhh', '!', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']",24640352
47,"package main

import (
    ""fmt""
    ""io""
    ""time""
)

// A Greet is a 140-character micro-blogpost that has no resemblance whatsoever
// to the noise a bird makes.
type Greet struct {
    User    string    `param:""user""`
    Message string    `param:""message""`
    Time    time.Time `param:""time""`
}

// Store all our greets in a big list in memory, because, let's be honest, who's
// actually going to use a service that only allows you to post 140-character
// messages?
var Greets = []Greet{
    {""carl"", ""Welcome to Gritter!"", time.Now()},
    {""alice"", ""Wanna know a secret?"", time.Now()},
    {""bob"", ""Okay!"", time.Now()},
    {""eve"", ""I'm listening..."", time.Now()},
}

// Write out a representation of the greet
func (g Greet) Write(w io.Writer) {
    fmt.Fprintf(w, ""%s\n@%s at %s\n---\n"", g.Message, g.User,
        g.Time.Format(time.UnixDate))
}

// A User is a person. It may even be someone you know. Or a rabbit. Hard to say
// from here.
type User struct {
    Name, Bio string
}

// All the users we know about! There aren't very many...
var Users = map[string]User{
    ""alice"": {""Alice in Wonderland"", ""Eating mushrooms""},
    ""bob"":   {""Bob the Builder"", ""Making children dumber""},
    ""carl"":  {""Carl Jackson"", ""Duct tape aficionado""},
}

// Write out the user
func (u User) Write(w io.Writer, handle string) {
    fmt.Fprintf(w, ""%s (@%s)\n%s\n"", u.Name, handle, u.Bio)
}","['package', 'main', 'import', '(', '""fmt""', '""io""', '""time""', ')', '// A Greet is a 140-character micro-blogpost that has no resemblance whatsoever', '// to the noise a bird makes.', 'type', 'Greet', 'struct', '{', 'User', 'string', 'param', ':', '""user""', 'Message', 'string', 'param', ':', '""message""', 'Time', 'time', '.', 'Time', 'param', ':', '""time""', '}', ""// Store all our greets in a big list in memory, because, let's be honest, who's"", '// actually going to use a service that only allows you to post 140-character', '// messages?', 'var', 'Greets', '=', '[]', 'Greet', '{', '{', '""carl"", ""Welcome to Gritter!""', ',', 'time', '.', 'Now', '()},', '{', '""alice"", ""Wanna know a secret?""', ',', 'time', '.', 'Now', '()},', '{', '""bob"", ""Okay!""', ',', 'time', '.', 'Now', '()},', '{', '""eve"", ""I\'m listening...""', ',', 'time', '.', 'Now', '()},', '}', '// Write out a representation of the greet', 'func', '(', 'g', 'Greet', ')', 'Write', '(', 'w', 'io', '.', 'Writer', ')', '{', 'fmt', '.', 'Fprintf', '(', 'w', ',', '""%s\\n@%s at %s\\n---\\n""', ',', 'g', '.', 'Message', ',', 'g', '.', 'User', ',', 'g', '.', 'Time', '.', 'Format', '(', 'time', '.', 'UnixDate', '))', '}', '// A User is a person. It may even be someone you know. Or a rabbit. Hard to say', '// from here.', 'type', 'User', 'struct', '{', 'Name', ',', 'Bio', 'string', '}', ""// All the users we know about! There aren't very many..."", 'var', 'Users', '=', 'map', '[', 'string', ']', 'User', '{', '""alice"": {""Alice in Wonderland"", ""Eating mushrooms""', '},', '""bob"":   {""Bob the Builder"", ""Making children dumber""', '},', '""carl"":  {""Carl Jackson"", ""Duct tape aficionado""', '},', '}', '// Write out the user', 'func', '(', 'u', 'User', ')', 'Write', '(', 'w', 'io', '.', 'Writer', ',', 'handle', 'string', ')', '{', 'fmt', '.', 'Fprintf', '(', 'w', ',', '""%s (@%s)\\n%s\\n""', ',', 'u', '.', 'Name', ',', 'handle', ',', 'u', '.', 'Bio', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'operator', 'comment', 'A', 'Greet', 'is', 'a', '140-character', 'micro-blogpost', 'that', 'has', 'no', 'resemblance', 'whatsoever', 'comment', 'to', 'the', 'noise', 'a', 'bird', 'makes', '.', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Store', 'all', 'our', 'greets', 'in', 'a', 'big', 'list', 'in', 'memory', ',', 'because', ',', 'let', ""'s"", 'be', 'honest', ',', 'who', ""'s"", 'comment', 'actually', 'going', 'to', 'use', 'a', 'service', 'that', 'only', 'allows', 'you', 'to', 'post', '140-character', 'comment', 'messages', '?', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Write', 'out', 'a', 'representation', 'of', 'the', 'greet', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'A', 'User', 'is', 'a', 'person', '.', 'It', 'may', 'even', 'be', 'someone', 'you', 'know', '.', 'Or', 'a', 'rabbit', '.', 'Hard', 'to', 'say', 'comment', 'from', 'here', '.', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'comment', 'All', 'the', 'users', 'we', 'know', 'about', '!', 'There', 'are', ""n't"", 'very', 'many', '...', 'keyword', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'Write', 'out', 'the', 'user', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",24640352
48,"// global handler for our DB
var db *sql.DB

// CLI parameter
var dbdsn string

func init() {

    flag.StringVar(&dbdsn, ""dbdsn"", ""root:root@tcp(localhost:3306)/prod?timeout=5s&tls=false&autocommit=true"", ""Specifies the MySql DSN connection."")
    flag.Parse()

    var err error
    db, err = sql.Open(""mysql"", dbdsn)
    if err != nil {
        log.Printf(""ERROR in sql.Open(): %v"", err)
    }

    //db.SetMaxIdleConns(5)

    // verify the DSN is setup properly1
    err = db.Ping()
    if err != nil {
        panic(""PANIC when pinging db: "" + err.Error()) // proper error handling instead of panic in your app
    }
}

// **********
// * omitted is the Gorilla MUX router and http handler registrations
// **********

func ArticleHandler(w http.ResponseWriter, r *http.Request, c *Context) (err error) {

    m := NewArticle(c)
    id := c.Vars[""id""]

    var pid int
    var title, body, excerpt, date, slug, fi, fv, region, region_slug string
    err = db.QueryRow(
        ""SELECT p.ID, p.post_title, p.post_content, p.post_excerpt, p.post_date, p.post_name, ""+
            ""(SELECT fpim.meta_value FROM wp_postmeta fpim WHERE fpim.meta_key = '_wp_attached_file' AND fpim.post_id = (SELECT fpim2.meta_value FROM wp_postmeta fpim2 WHERE fpim2.post_id = p.ID AND fpim2.meta_key = '_thumbnail_id' LIMIT 1) LIMIT 1) AS featured_image, ""+
            ""(SELECT fpim3.meta_value FROM wp_postmeta fpim3 WHERE fpim3.meta_key = 'fv_video' AND fpim3.post_id = p.ID LIMIT 1) AS featured_video, ""+
            ""t.name as region, t.slug as region_slug ""+
            ""FROM wp_posts p ""+
            ""JOIN wp_term_relationships tr ON tr.object_id=p.ID ""+
            ""JOIN wp_term_taxonomy tt ON tt.term_taxonomy_id=tr.term_taxonomy_id ""+
            ""JOIN wp_terms t ON t.term_id=tt.term_id ""+
            ""WHERE p.post_name=? AND p.post_type='post' AND p.post_status='publish' AND p.post_date <= UTC_TIMESTAMP()""+
            ""AND tr.object_id=p.ID AND tt.parent = (SELECT t3.term_id FROM wp_terms t3 WHERE t3.name=? LIMIT 1) LIMIT 1"",
        id, RegionsParentCategory).
        Scan(&pid, &title, &body, &excerpt, &date, &slug, &fi, &fv, ®ion, ®ion_slug)

    if err != nil {
        if err == sql.ErrNoRows {

            // snipped code for redirects

            // article was not found
            return handleNotFound(w, r, c)

        } else {
            log.Printf(""ERROR in .Scan(): %v"", err)
        }
    } else {
        m.Region = Region{
            Name: region,
            Slug: region_slug,
        }
        m.Id = pid
        m.Title = title
        m.Body = template.HTML(body) // render the raw html
        m.Excerpt = excerpt
        m.Datetime = date
        m.Slug = slug
        m.FeaturedImageUrl = fi
        m.FeaturedVideoUrl = fv
    }

    web.RenderTemplate(w, ""article"", m)
    return
}","['// global handler for our DB', 'var', 'db', '*', 'sql', '.', 'DB', '// CLI parameter', 'var', 'dbdsn', 'string', 'func', 'init', '()', '{', 'flag', '.', 'StringVar', '(&', 'dbdsn', ',', '""dbdsn"", ""root:root@tcp(localhost:3306)/prod?timeout=5s&tls=false&autocommit=true"", ""Specifies the MySql DSN connection.""', ')', 'flag', '.', 'Parse', '()', 'var', 'err', 'error', 'db', ',', 'err', '=', 'sql', '.', 'Open', '(', '""mysql""', ',', 'dbdsn', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""ERROR in sql.Open(): %v""', ',', 'err', ')', '}', '//db.SetMaxIdleConns(5)', '// verify the DSN is setup properly1', 'err', '=', 'db', '.', 'Ping', '()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', '""PANIC when pinging db: ""', '+', 'err', '.', 'Error', '())', '// proper error handling instead of panic in your app', '}', '}', '// **********', '// * omitted is the Gorilla MUX router and http handler registrations', '// **********', 'func', 'ArticleHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ',', 'c', '*', 'Context', ')', '(', 'err', 'error', ')', '{', 'm', ':=', 'NewArticle', '(', 'c', ')', 'id', ':=', 'c', '.', 'Vars', '[', '""id""', ']', 'var', 'pid', 'int', 'var', 'title', ',', 'body', ',', 'excerpt', ',', 'date', ',', 'slug', ',', 'fi', ',', 'fv', ',', 'region', ',', 'region_slug', 'string', 'err', '=', 'db', '.', 'QueryRow', '(', '""SELECT p.ID, p.post_title, p.post_content, p.post_excerpt, p.post_date, p.post_name, ""', '+', '""(SELECT fpim.meta_value FROM wp_postmeta fpim WHERE fpim.meta_key = \'_wp_attached_file\' AND fpim.post_id = (SELECT fpim2.meta_value FROM wp_postmeta fpim2 WHERE fpim2.post_id = p.ID AND fpim2.meta_key = \'_thumbnail_id\' LIMIT 1) LIMIT 1) AS featured_image, ""', '+', '""(SELECT fpim3.meta_value FROM wp_postmeta fpim3 WHERE fpim3.meta_key = \'fv_video\' AND fpim3.post_id = p.ID LIMIT 1) AS featured_video, ""', '+', '""t.name as region, t.slug as region_slug ""', '+', '""FROM wp_posts p ""', '+', '""JOIN wp_term_relationships tr ON tr.object_id=p.ID ""', '+', '""JOIN wp_term_taxonomy tt ON tt.term_taxonomy_id=tr.term_taxonomy_id ""', '+', '""JOIN wp_terms t ON t.term_id=tt.term_id ""', '+', '""WHERE p.post_name=? AND p.post_type=\'post\' AND p.post_status=\'publish\' AND p.post_date <= UTC_TIMESTAMP()""', '+', '""AND tr.object_id=p.ID AND tt.parent = (SELECT t3.term_id FROM wp_terms t3 WHERE t3.name=? LIMIT 1) LIMIT 1""', ',', 'id', ',', 'RegionsParentCategory', ').', 'Scan', '(&', 'pid', ',', '&', 'title', ',', '&', 'body', ',', '&', 'excerpt', ',', '&', 'date', ',', '&', 'slug', ',', '&', 'fi', ',', '&', 'fv', ',', 'ion', ',', 'ion_slug', ')', 'if', 'err', '!=', 'nil', '{', 'if', 'err', '==', 'sql', '.', 'ErrNoRows', '{', '// snipped code for redirects', '// article was not found', 'return', 'handleNotFound', '(', 'w', ',', 'r', ',', 'c', ')', '}', 'else', '{', 'log', '.', 'Printf', '(', '""ERROR in .Scan(): %v""', ',', 'err', ')', '}', '}', 'else', '{', 'm', '.', 'Region', '=', 'Region', '{', 'Name', ':', 'region', ',', 'Slug', ':', 'region_slug', ',', '}', 'm', '.', 'Id', '=', 'pid', 'm', '.', 'Title', '=', 'title', 'm', '.', 'Body', '=', 'template', '.', 'HTML', '(', 'body', ')', '// render the raw html', 'm', '.', 'Excerpt', '=', 'excerpt', 'm', '.', 'Datetime', '=', 'date', 'm', '.', 'Slug', '=', 'slug', 'm', '.', 'FeaturedImageUrl', '=', 'fi', 'm', '.', 'FeaturedVideoUrl', '=', 'fv', '}', 'web', '.', 'RenderTemplate', '(', 'w', ',', '""article""', ',', 'm', ')', 'return', '}']","['comment', 'global', 'handler', 'for', 'our', 'DB', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'CLI', 'parameter', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'comment', 'db.SetMaxIdleConns', '(', '5', ')', 'comment', 'verify', 'the', 'DSN', 'is', 'setup', 'properly1', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'proper', 'error', 'handling', 'instead', 'of', 'panic', 'in', 'your', 'app', 'operator', 'operator', 'comment', '**********', 'comment', '*', 'omitted', 'is', 'the', 'Gorilla', 'MUX', 'router', 'and', 'http', 'handler', 'registrations', 'comment', '**********', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'snipped', 'code', 'for', 'redirects', 'comment', 'article', 'was', 'not', 'found', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'render', 'the', 'raw', 'html', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator']",24708372
49,"rows2, err := db.Query(
    ""SELECT p.post_title, p.post_name ""+
        ""FROM wp_posts p ""+
        ""WHERE p.post_type='page' AND p.post_status='publish' AND p.post_date <= UTC_TIMESTAMP() ""+
        ""AND p.post_parent = (SELECT p2.ID FROM wp_posts p2 WHERE p2.post_name=? LIMIT 1) ""+
        ""ORDER BY p.menu_order"",
    FooterPagesParentNameSlug)
if err != nil {
    log.Printf(""ERROR in AllPages .Query() : %v"", err)
} else {
    defer rows2.Close()
    c.AllFooterPages = make([]FooterPage, 0)
    for rows2.Next() {
        var name, slug string
        err := rows2.Scan(&name, &slug)
        if err != nil {
            log.Printf(""ERROR in AllPages row.Scan() : %v"", err)
        } else {
            p := FooterPage{
                Page: Page{
                    Title: name,
                    Slug:  slug,
                },
            }
            c.AllFooterPages = append(c.AllFooterPages, p)
        }
    }
}","['rows2', ',', 'err', ':=', 'db', '.', 'Query', '(', '""SELECT p.post_title, p.post_name ""', '+', '""FROM wp_posts p ""', '+', '""WHERE p.post_type=\'page\' AND p.post_status=\'publish\' AND p.post_date <= UTC_TIMESTAMP() ""', '+', '""AND p.post_parent = (SELECT p2.ID FROM wp_posts p2 WHERE p2.post_name=? LIMIT 1) ""', '+', '""ORDER BY p.menu_order""', ',', 'FooterPagesParentNameSlug', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""ERROR in AllPages .Query() : %v""', ',', 'err', ')', '}', 'else', '{', 'defer', 'rows2', '.', 'Close', '()', 'c', '.', 'AllFooterPages', '=', 'make', '([]', 'FooterPage', ',', '0', ')', 'for', 'rows2', '.', 'Next', '()', '{', 'var', 'name', ',', 'slug', 'string', 'err', ':=', 'rows2', '.', 'Scan', '(&', 'name', ',', '&', 'slug', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""ERROR in AllPages row.Scan() : %v""', ',', 'err', ')', '}', 'else', '{', 'p', ':=', 'FooterPage', '{', 'Page', ':', 'Page', '{', 'Title', ':', 'name', ',', 'Slug', ':', 'slug', ',', '},', '}', 'c', '.', 'AllFooterPages', '=', 'append', '(', 'c', '.', 'AllFooterPages', ',', 'p', ')', '}', '}', '}']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator']",24708372
50,"func Listen(net, laddr string) (Listener, error) {
   la, err := resolveAddr(""listen"", net, laddr, noDeadline)
   if err != nil {
      return nil, &OpError{Op: ""listen"", Net: net, Addr: nil, Err: err}
   }
   var l Listener
   switch la := la.toAddr().(type) {
   case *TCPAddr:
      l, err = ListenTCP(net, la)
   case *UnixAddr:
      l, err = ListenUnix(net, la)
   default:
      return nil, &OpError{Op: ""listen"", Net: net, Addr: la, Err: &AddrError{Err: ""unexpected address type"", Addr: laddr}}
   }
   if err != nil {
      return nil, err // l is non-nil interface containing nil pointer
   }
   return l, nil
}
","['func', 'Listen', '(', 'net', ',', 'laddr', 'string', ')', '(', 'Listener', ',', 'error', ')', '{', 'la', ',', 'err', ':=', 'resolveAddr', '(', '""listen""', ',', 'net', ',', 'laddr', ',', 'noDeadline', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', '&', 'OpError', '{', 'Op', ':', '""listen""', ',', 'Net', ':', 'net', ',', 'Addr', ':', 'nil', ',', 'Err', ':', 'err', '}', '}', 'var', 'l', 'Listener', 'switch', 'la', ':=', 'la', '.', 'toAddr', '().(', 'type', ')', '{', 'case', '*', 'TCPAddr', ':', 'l', ',', 'err', '=', 'ListenTCP', '(', 'net', ',', 'la', ')', 'case', '*', 'UnixAddr', ':', 'l', ',', 'err', '=', 'ListenUnix', '(', 'net', ',', 'la', ')', 'default', ':', 'return', 'nil', ',', '&', 'OpError', '{', 'Op', ':', '""listen"", Net: net, Addr: la, Err: &AddrError{Err: ""unexpected address type""', ',', 'Addr', ':', 'laddr', '}}', '}', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '// l is non-nil interface containing nil pointer', '}', 'return', 'l', ',', 'nil', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'comment', 'l', 'is', 'non-nil', 'interface', 'containing', 'nil', 'pointer', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator']",24937062
51,"func ListenPacket(net, laddr string) (PacketConn, error) {
    la, err := resolveAddr(""listen"", net, laddr, noDeadline)
    if err != nil {
        return nil, &OpError{Op: ""listen"", Net: net, Addr: nil, Err: err}
    }
    var l PacketConn
    switch la := la.toAddr().(type) {
    case *UDPAddr:
        l, err = ListenUDP(net, la)
    case *IPAddr:
        l, err = ListenIP(net, la)
    case *UnixAddr:
        l, err = ListenUnixgram(net, la)
    default:
        return nil, &OpError{Op: ""listen"", Net: net, Addr: la, Err: &AddrError{Err: ""unexpected address type"", Addr: laddr}}
    }
    if err != nil {
        return nil, err // l is non-nil interface containing nil pointer
    }
    return l, nil
}
","['func', 'ListenPacket', '(', 'net', ',', 'laddr', 'string', ')', '(', 'PacketConn', ',', 'error', ')', '{', 'la', ',', 'err', ':=', 'resolveAddr', '(', '""listen""', ',', 'net', ',', 'laddr', ',', 'noDeadline', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', '&', 'OpError', '{', 'Op', ':', '""listen""', ',', 'Net', ':', 'net', ',', 'Addr', ':', 'nil', ',', 'Err', ':', 'err', '}', '}', 'var', 'l', 'PacketConn', 'switch', 'la', ':=', 'la', '.', 'toAddr', '().(', 'type', ')', '{', 'case', '*', 'UDPAddr', ':', 'l', ',', 'err', '=', 'ListenUDP', '(', 'net', ',', 'la', ')', 'case', '*', 'IPAddr', ':', 'l', ',', 'err', '=', 'ListenIP', '(', 'net', ',', 'la', ')', 'case', '*', 'UnixAddr', ':', 'l', ',', 'err', '=', 'ListenUnixgram', '(', 'net', ',', 'la', ')', 'default', ':', 'return', 'nil', ',', '&', 'OpError', '{', 'Op', ':', '""listen"", Net: net, Addr: la, Err: &AddrError{Err: ""unexpected address type""', ',', 'Addr', ':', 'laddr', '}}', '}', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '// l is non-nil interface containing nil pointer', '}', 'return', 'l', ',', 'nil', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'comment', 'l', 'is', 'non-nil', 'interface', 'containing', 'nil', 'pointer', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator']",24937062
52,"func main() {
    inFile, err := os.Open(*srcFile)
    if err != nil {
        log.LogErrorf(""Error opening dump: %v"", err)
        return
    }
    defer inFile.Close()

    var wg sync.WaitGroup
    input := make(chan []byte, 51)


    go func() {
        wg.Add(1)
        for line := range input {
            log.Printf(""Bytes: %s"", line)
            // process the line
        }
        wg.Done()
    }()

    scanner := bufio.NewScanner(inFile)
    count := 0
    for scanner.Scan() {
        count++
        log.Printf(""Scanned: %d"", count)
        if err := scanner.Err(); err != nil {
            log.LogErrorf(""Error scanning: %v"", err)
        }
        newestBytes := scanner.Bytes()
        log.Printf(""Bytes: %s"", newestBytes)
        input <- newestBytes
    }
    close(input)
    wg.Wait()
}","['func', 'main', '()', '{', 'inFile', ',', 'err', ':=', 'os', '.', 'Open', '(*', 'srcFile', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'LogErrorf', '(', '""Error opening dump: %v""', ',', 'err', ')', 'return', '}', 'defer', 'inFile', '.', 'Close', '()', 'var', 'wg', 'sync', '.', 'WaitGroup', 'input', ':=', 'make', '(', 'chan', '[]', 'byte', ',', '51', ')', 'go', 'func', '()', '{', 'wg', '.', 'Add', '(', '1', ')', 'for', 'line', ':=', 'range', 'input', '{', 'log', '.', 'Printf', '(', '""Bytes: %s""', ',', 'line', ')', '// process the line', '}', 'wg', '.', 'Done', '()', '}()', 'scanner', ':=', 'bufio', '.', 'NewScanner', '(', 'inFile', ')', 'count', ':=', '0', 'for', 'scanner', '.', 'Scan', '()', '{', 'count', '++', 'log', '.', 'Printf', '(', '""Scanned: %d""', ',', 'count', ')', 'if', 'err', ':=', 'scanner', '.', 'Err', '();', 'err', '!=', 'nil', '{', 'log', '.', 'LogErrorf', '(', '""Error scanning: %v""', ',', 'err', ')', '}', 'newestBytes', ':=', 'scanner', '.', 'Bytes', '()', 'log', '.', 'Printf', '(', '""Bytes: %s""', ',', 'newestBytes', ')', 'input', '<-', 'newestBytes', '}', 'close', '(', 'input', ')', 'wg', '.', 'Wait', '()', '}']","['keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'comment', 'process', 'the', 'line', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",25107540
53,"package main

import (
    ""bytes""
    ""code.google.com/p/go.text/transform""
    ""code.google.com/p/go.text/unicode/norm""
    ""compress/zlib""
    ""encoding/gob""
    ""fmt""
    ""github.com/AlasdairF/BinSearch""
    ""io/ioutil""
    ""os""
    ""regexp""
    ""runtime""
    ""strings""
    ""unicode""
    ""unicode/utf8""
)

type TokensStruct struct {
    binsearch.Key_string
    Value [][5]uint32
}

type Trainer struct {
    Tokens      TokensStruct
    TokensCount uint
}

func checkErr(err error) {
    if err == nil {
        return
    }
    fmt.Println(`Some Error:`, err)
    panic(err)
}

// Local helper function for normalization of UTF8 strings.
func isMn(r rune) bool {
    return unicode.Is(unicode.Mn, r) // Mn: nonspacing marks
}

// This map is used by RemoveAccents function to convert non-accented characters.
var transliterations = map[rune]string{'Æ': ""E"", 'Ð': ""D"", 'Ł': ""L"", 'Ø': ""OE"", 'Þ': ""Th"", 'ß': ""ss"", 'æ': ""e"", 'ð': ""d"", 'ł': ""l"", 'ø': ""oe"", 'þ': ""th"", 'Œ': ""OE"", 'œ': ""oe""}

//  removeAccentsBytes converts accented UTF8 characters into their non-accented equivalents, from a []byte.
func removeAccentsBytesDashes(b []byte) ([]byte, error) {
    mnBuf := make([]byte, len(b))
    t := transform.Chain(norm.NFD, transform.RemoveFunc(isMn), norm.NFC)
    n, _, err := t.Transform(mnBuf, b, true)
    if err != nil {
        return nil, err
    }
    mnBuf = mnBuf[:n]
    tlBuf := bytes.NewBuffer(make([]byte, 0, len(mnBuf)*2))
    for i, w := 0, 0; i < len(mnBuf); i += w {
        r, width := utf8.DecodeRune(mnBuf[i:])
        if r == '-' {
            tlBuf.WriteByte(' ')
        } else {
            if d, ok := transliterations[r]; ok {
                tlBuf.WriteString(d)
            } else {
                tlBuf.WriteRune(r)
            }
        }
        w = width
    }
    return tlBuf.Bytes(), nil
}

func LoadZip(filename string) ([]byte, error) {
    // Open file for reading
    fi, err := os.Open(filename)
    if err != nil {
        return nil, err
    }
    defer fi.Close()
    // Attach ZIP reader
    fz, err := zlib.NewReader(fi)
    if err != nil {
        return nil, err
    }
    defer fz.Close()
    // Pull
    data, err := ioutil.ReadAll(fz)
    if err != nil {
        return nil, err
    }
    return norm.NFC.Bytes(data), nil // return normalized
}

func getTokens(pibn string) []string {
    var data []byte
    var err error
    data, err = LoadZip(`/storedir/` + pibn + `/text.zip`)
    checkErr(err)
    data, err = removeAccentsBytesDashes(data)
    checkErr(err)
    data = bytes.ToLower(data)
    data = reg2.ReplaceAll(data, []byte(""$2"")) // remove contractions
    data = reg.ReplaceAllLiteral(data, nil)
    tokens := strings.Fields(string(data))
    return tokens
}

func (t *Trainer) Start() {
    data, err := ioutil.ReadFile(`list.txt`)
    checkErr(err)
    pibns := bytes.Fields(data)
    for i, pibn := range pibns {
        tokens := getTokens(string(pibn))
        t.addTokens(tokens)
        if i%100 == 0 {
            runtime.GC() // I added this just to try to stop the memory craziness, but it makes no difference
        }
    }
}

func (t *Trainer) addTokens(tokens []string) {
    for _, tok := range tokens {
        if _, ok := dictionary[tok]; ok {
            if indx, ok2 := t.Tokens.Find(tok); ok2 {
                ar := t.Tokens.Value[indx]
                ar[0]++
                t.Tokens.Value[indx] = ar
                t.TokensCount++
            } else {
                t.Tokens.AddKeyAt(tok, indx)
                t.Tokens.Value = append(t.Tokens.Value, [5]uint32{0, 0, 0, 0, 0})
                copy(t.Tokens.Value[indx+1:], t.Tokens.Value[indx:])
                t.Tokens.Value[indx] = [5]uint32{1, 0, 0, 0, 0}
                t.TokensCount++
            }
        }
    }
    return
}

func LoadDictionary() {
    dictionary = make(map[string]bool)
    data, err := ioutil.ReadFile(`dictionary`)
    checkErr(err)
    words := bytes.Fields(data)
    for _, word := range words {
        strword := string(word)
        dictionary[strword] = false
    }
}

var reg = regexp.MustCompile(`[^a-z0-9\s]`)
var reg2 = regexp.MustCompile(`\b(c|l|all|dall|dell|nell|sull|coll|pell|gl|agl|dagl|degl|negl|sugl|un|m|t|s|v|d|qu|n|j)'([a-z])`) //contractions
var dictionary map[string]bool

func main() {
    trainer := new(Trainer)
    LoadDictionary()
    trainer.Start()
}","['package', 'main', 'import', '(', '""bytes""', '""code.google.com/p/go.text/transform""', '""code.google.com/p/go.text/unicode/norm""', '""compress/zlib""', '""encoding/gob""', '""fmt""', '""github.com/AlasdairF/BinSearch""', '""io/ioutil""', '""os""', '""regexp""', '""runtime""', '""strings""', '""unicode""', '""unicode/utf8""', ')', 'type', 'TokensStruct', 'struct', '{', 'binsearch', '.', 'Key_string', 'Value', '[][', '5', ']', 'uint32', '}', 'type', 'Trainer', 'struct', '{', 'Tokens', 'TokensStruct', 'TokensCount', 'uint', '}', 'func', 'checkErr', '(', 'err', 'error', ')', '{', 'if', 'err', '==', 'nil', '{', 'return', '}', 'fmt', '.', 'Println', '(', 'Some', 'Error', ':', ',', 'err', ')', 'panic', '(', 'err', ')', '}', '// Local helper function for normalization of UTF8 strings.', 'func', 'isMn', '(', 'r', 'rune', ')', 'bool', '{', 'return', 'unicode', '.', 'Is', '(', 'unicode', '.', 'Mn', ',', 'r', ')', '// Mn: nonspacing marks', '}', '// This map is used by RemoveAccents function to convert non-accented characters.', 'var', 'transliterations', '=', 'map', '[', 'rune', ']', 'string', '{', ':', '""E"", \'Ð\': ""D"", \'Ł\': ""L"", \'Ø\': ""OE"", \'Þ\': ""Th"", \'ß\': ""ss"", \'æ\': ""e"", \'ð\': ""d"", \'ł\': ""l"", \'ø\': ""oe"", \'þ\': ""th"", \'Œ\': ""OE"", \'œ\': ""oe""', '}', '//  removeAccentsBytes converts accented UTF8 characters into their non-accented equivalents, from a []byte.', 'func', 'removeAccentsBytesDashes', '(', 'b', '[]', 'byte', ')', '([]', 'byte', ',', 'error', ')', '{', 'mnBuf', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'b', '))', 't', ':=', 'transform', '.', 'Chain', '(', 'norm', '.', 'NFD', ',', 'transform', '.', 'RemoveFunc', '(', 'isMn', '),', 'norm', '.', 'NFC', ')', 'n', ',', '_', ',', 'err', ':=', 't', '.', 'Transform', '(', 'mnBuf', ',', 'b', ',', 'true', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'mnBuf', '=', 'mnBuf', '[:', 'n', ']', 'tlBuf', ':=', 'bytes', '.', 'NewBuffer', '(', 'make', '([]', 'byte', ',', '0', ',', 'len', '(', 'mnBuf', ')*', '2', '))', 'for', 'i', ',', 'w', ':=', '0', ',', '0', ';', 'i', '<', 'len', '(', 'mnBuf', ');', 'i', '+=', 'w', '{', 'r', ',', 'width', ':=', 'utf8', '.', 'DecodeRune', '(', 'mnBuf', '[', 'i', ':])', 'if', 'r', '==', '-', '{', 'tlBuf', '.', 'WriteByte', '(', ')', '}', 'else', '{', 'if', 'd', ',', 'ok', ':=', 'transliterations', '[', 'r', '];', 'ok', '{', 'tlBuf', '.', 'WriteString', '(', 'd', ')', '}', 'else', '{', 'tlBuf', '.', 'WriteRune', '(', 'r', ')', '}', '}', 'w', '=', 'width', '}', 'return', 'tlBuf', '.', 'Bytes', '(),', 'nil', '}', 'func', 'LoadZip', '(', 'filename', 'string', ')', '([]', 'byte', ',', 'error', ')', '{', '// Open file for reading', 'fi', ',', 'err', ':=', 'os', '.', 'Open', '(', 'filename', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'defer', 'fi', '.', 'Close', '()', '// Attach ZIP reader', 'fz', ',', 'err', ':=', 'zlib', '.', 'NewReader', '(', 'fi', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'defer', 'fz', '.', 'Close', '()', '// Pull', 'data', ',', 'err', ':=', 'ioutil', '.', 'ReadAll', '(', 'fz', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'norm', '.', 'NFC', '.', 'Bytes', '(', 'data', '),', 'nil', '// return normalized', '}', 'func', 'getTokens', '(', 'pibn', 'string', ')', '[]', 'string', '{', 'var', 'data', '[]', 'byte', 'var', 'err', 'error', 'data', ',', 'err', '=', 'LoadZip', '(', 'storedir', '+', 'pibn', '+', 'text', '.', 'zip', ')', 'checkErr', '(', 'err', ')', 'data', ',', 'err', '=', 'removeAccentsBytesDashes', '(', 'data', ')', 'checkErr', '(', 'err', ')', 'data', '=', 'bytes', '.', 'ToLower', '(', 'data', ')', 'data', '=', 'reg2', '.', 'ReplaceAll', '(', 'data', ',', '[]', 'byte', '(', '""$2""', '))', '// remove contractions', 'data', '=', 'reg', '.', 'ReplaceAllLiteral', '(', 'data', ',', 'nil', ')', 'tokens', ':=', 'strings', '.', 'Fields', '(', 'string', '(', 'data', '))', 'return', 'tokens', '}', 'func', '(', 't', '*', 'Trainer', ')', 'Start', '()', '{', 'data', ',', 'err', ':=', 'ioutil', '.', 'ReadFile', '(', 'list', '.', 'txt', ')', 'checkErr', '(', 'err', ')', 'pibns', ':=', 'bytes', '.', 'Fields', '(', 'data', ')', 'for', 'i', ',', 'pibn', ':=', 'range', 'pibns', '{', 'tokens', ':=', 'getTokens', '(', 'string', '(', 'pibn', '))', 't', '.', 'addTokens', '(', 'tokens', ')', 'if', 'i', '100', '==', '0', '{', 'runtime', '.', 'GC', '()', '// I added this just to try to stop the memory craziness, but it makes no difference', '}', '}', '}', 'func', '(', 't', '*', 'Trainer', ')', 'addTokens', '(', 'tokens', '[]', 'string', ')', '{', 'for', '_', ',', 'tok', ':=', 'range', 'tokens', '{', 'if', '_', ',', 'ok', ':=', 'dictionary', '[', 'tok', '];', 'ok', '{', 'if', 'indx', ',', 'ok2', ':=', 't', '.', 'Tokens', '.', 'Find', '(', 'tok', ');', 'ok2', '{', 'ar', ':=', 't', '.', 'Tokens', '.', 'Value', '[', 'indx', ']', 'ar', '[', '0', ']++', 't', '.', 'Tokens', '.', 'Value', '[', 'indx', ']', '=', 'ar', 't', '.', 'TokensCount', '++', '}', 'else', '{', 't', '.', 'Tokens', '.', 'AddKeyAt', '(', 'tok', ',', 'indx', ')', 't', '.', 'Tokens', '.', 'Value', '=', 'append', '(', 't', '.', 'Tokens', '.', 'Value', ',', '[', '5', ']', 'uint32', '{', '0', ',', '0', ',', '0', ',', '0', ',', '0', '})', 'copy', '(', 't', '.', 'Tokens', '.', 'Value', '[', 'indx', '+', '1', ':],', 't', '.', 'Tokens', '.', 'Value', '[', 'indx', ':])', 't', '.', 'Tokens', '.', 'Value', '[', 'indx', ']', '=', '[', '5', ']', 'uint32', '{', '1', ',', '0', ',', '0', ',', '0', ',', '0', '}', 't', '.', 'TokensCount', '++', '}', '}', '}', 'return', '}', 'func', 'LoadDictionary', '()', '{', 'dictionary', '=', 'make', '(', 'map', '[', 'string', ']', 'bool', ')', 'data', ',', 'err', ':=', 'ioutil', '.', 'ReadFile', '(', 'dictionary', ')', 'checkErr', '(', 'err', ')', 'words', ':=', 'bytes', '.', 'Fields', '(', 'data', ')', 'for', '_', ',', 'word', ':=', 'range', 'words', '{', 'strword', ':=', 'string', '(', 'word', ')', 'dictionary', '[', 'strword', ']', '=', 'false', '}', '}', 'var', 'reg', '=', 'regexp', '.', 'MustCompile', '(', '[^', 'a', '-', 'z0', '-', '9', 's', ']', ')', 'var', 'reg2', '=', 'regexp', '.', 'MustCompile', '(', 'b', '(', 'c', '|', 'l', '|', 'all', '|', 'dall', '|', 'dell', '|', 'nell', '|', 'sull', '|', 'coll', '|', 'pell', '|', 'gl', '|', 'agl', '|', 'dagl', '|', 'degl', '|', 'negl', '|', 'sugl', '|', 'un', '|', 'm', '|', 't', '|', 's', '|', 'v', '|', 'd', '|', 'qu', '|', 'n', '|', 'j', ')', '([', 'a', '-', 'z', '])', ')', '//contractions', 'var', 'dictionary', 'map', '[', 'string', ']', 'bool', 'func', 'main', '()', '{', 'trainer', ':=', 'new', '(', 'Trainer', ')', 'LoadDictionary', '()', 'trainer', '.', 'Start', '()', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Local', 'helper', 'function', 'for', 'normalization', 'of', 'UTF8', 'strings', '.', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Mn', ':', 'nonspacing', 'marks', 'operator', 'comment', 'This', 'map', 'is', 'used', 'by', 'RemoveAccents', 'function', 'to', 'convert', 'non-accented', 'characters', '.', 'keyword', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'string_literal', 'operator', 'comment', 'removeAccentsBytes', 'converts', 'accented', 'UTF8', 'characters', 'into', 'their', 'non-accented', 'equivalents', ',', 'from', 'a', '[', ']', 'byte', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Open', 'file', 'for', 'reading', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Attach', 'ZIP', 'reader', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Pull', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'return', 'normalized', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'remove', 'contractions', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'I', 'added', 'this', 'just', 'to', 'try', 'to', 'stop', 'the', 'memory', 'craziness', ',', 'but', 'it', 'makes', 'no', 'difference', 'operator', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'contractions', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",25175111
54,"package main

import (
    ""crypto""
    ""crypto/rand""
    ""crypto/rsa""
    ""crypto/sha1""
    ""crypto/x509""
    ""encoding/base64""
    ""encoding/pem""
    ""fmt""
    ""log""
)

const (
    data = ""TEST DATA TO COMPUTE""

    privKeyPEM = `-----BEGIN RSA PRIVATE KEY-----
MIIBOgIBAAJBAK3ADijXKw72+YbC5QKK2y7IosCp7rWOhTf8Ph07ZA0KjdbKtfL/
7dmNKjSP6EkC/DJUWfZJNLIlGOtDLLA/AnsCAwEAAQJAQj9kJrZDuKT6ZyOQZfPD
tobRZ1xjo93/dWU72bF3aHDo4ILMy2Kigy5yhZU0ZGjOuPv5eUOLRe/yxYQf6B5J
AQIhANbhfZ4QJC8dLXAqcsxOXuLgztzbKixUre0gnhiVSd1hAiEAzv+sHJ4PMjKs
Iuf6/nUI9XFgQQRd+NGRovyHRZC18VsCIAX7AKQFjvxAs6MLi2ZkR//IgfljoCjb
snuHDN9iSEwBAiEAmAc1XCtGE+Mdg+GG+T3xn3pubDIN5oHcia0YmKIIzsMCIEy1
fWM5cIJ9bAUExKB6MV8PF+9EjDvXzbSk1/Ycta8z
-----END RSA PRIVATE KEY-----`
)

func main() {

    // Parse private key into rsa.PrivateKey
    PEMBlock, _ := pem.Decode([]byte(privKeyPEM))
    if PEMBlock == nil {
        log.Fatal(""Could not parse Private Key PEM"")
    }
    if PEMBlock.Type != ""RSA PRIVATE KEY"" {
        log.Fatal(""Found wrong key type"")
    }
    privkey, err := x509.ParsePKCS1PrivateKey(PEMBlock.Bytes)
    if err != nil {
        log.Fatal(err)
    }

    // Compute the sha1
    h := sha1.New()
    h.Write([]byte(data))

    // Sign the data
    signature, err := rsa.SignPKCS1v15(rand.Reader, privkey, crypto.SHA1, h.Sum(nil))
    if err != nil {
        log.Fatal(err)
    }

    // Print the results
    fmt.Print(base64.StdEncoding.EncodeToString(signature))
}","['package', 'main', 'import', '(', '""crypto""', '""crypto/rand""', '""crypto/rsa""', '""crypto/sha1""', '""crypto/x509""', '""encoding/base64""', '""encoding/pem""', '""fmt""', '""log""', ')', 'const', '(', 'data', '=', '""TEST DATA TO COMPUTE""', 'privKeyPEM', '=', '-----', 'BEGIN', 'RSA', 'PRIVATE', 'KEY', '-----', 'MIIBOgIBAAJBAK3ADijXKw72', '+', 'YbC5QKK2y7IosCp7rWOhTf8Ph07ZA0KjdbKtfL', '7', 'dmNKjSP6EkC', 'DJUWfZJNLIlGOtDLLA', 'AnsCAwEAAQJAQj9kJrZDuKT6ZyOQZfPD', 'tobRZ1xjo93', 'dWU72bF3aHDo4ILMy2Kigy5yhZU0ZGjOuPv5eUOLRe', 'yxYQf6B5J', 'AQIhANbhfZ4QJC8dLXAqcsxOXuLgztzbKixUre0gnhiVSd1hAiEAzv', '+', 'sHJ4PMjKs', 'Iuf6', 'nUI9XFgQQRd', '+', 'NGRovyHRZC18VsCIAX7AKQFjvxAs6MLi2ZkR', '//IgfljoCjb', 'snuHDN9iSEwBAiEAmAc1XCtGE', '+', 'Mdg', '+', 'GG', '+', 'T3xn3pubDIN5oHcia0YmKIIzsMCIEy1', 'fWM5cIJ9bAUExKB6MV8PF', '+', '9', 'EjDvXzbSk1', 'Ycta8z', '-----', 'END', 'RSA', 'PRIVATE', 'KEY', '-----', ')', 'func', 'main', '()', '{', '// Parse private key into rsa.PrivateKey', 'PEMBlock', ',', '_', ':=', 'pem', '.', 'Decode', '([]', 'byte', '(', 'privKeyPEM', '))', 'if', 'PEMBlock', '==', 'nil', '{', 'log', '.', 'Fatal', '(', '""Could not parse Private Key PEM""', ')', '}', 'if', 'PEMBlock', '.', 'Type', '!=', '""RSA PRIVATE KEY""', '{', 'log', '.', 'Fatal', '(', '""Found wrong key type""', ')', '}', 'privkey', ',', 'err', ':=', 'x509', '.', 'ParsePKCS1PrivateKey', '(', 'PEMBlock', '.', 'Bytes', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', '// Compute the sha1', 'h', ':=', 'sha1', '.', 'New', '()', 'h', '.', 'Write', '([]', 'byte', '(', 'data', '))', '// Sign the data', 'signature', ',', 'err', ':=', 'rsa', '.', 'SignPKCS1v15', '(', 'rand', '.', 'Reader', ',', 'privkey', ',', 'crypto', '.', 'SHA1', ',', 'h', '.', 'Sum', '(', 'nil', '))', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', '// Print the results', 'fmt', '.', 'Print', '(', 'base64', '.', 'StdEncoding', '.', 'EncodeToString', '(', 'signature', '))', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'decimal_literal', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'comment', 'IgfljoCjb', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'decimal_literal', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'Parse', 'private', 'key', 'into', 'rsa.PrivateKey', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Compute', 'the', 'sha1', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Sign', 'the', 'data', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Print', 'the', 'results', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",25268071
55,"type Data struct {
    Next string
    Results Result
}

type Result struct {
    Results []AreaGeometry
}

type AreaGeometry struct {
    AREAGEOMETRY_ID int32
    AreaManagerId int64
    AreaId string
    EndDateArea string
    StartDateArea string
    AreaGeometryTxt string
}

// Synchronizes the AreaGeometry in our MySQL database with the AreaGeometry in the database from the RDW
func retrieveData() {
    resp, err := http.Get(""https://api.datamarket.azure.com/opendata.rdw/StatischParkeren.Open.Data/v1/AREAGEOMETRY?$format=json"")
    if err != nil {
        panic(err.Error()) // TODO: proper error handling
    }
    body, err := ioutil.ReadAll(resp.Body)
    var d Data
    json.Unmarshal(body, &d)
    fmt.Println(""Next: "" + d.Next)
}","['type', 'Data', 'struct', '{', 'Next', 'string', 'Results', 'Result', '}', 'type', 'Result', 'struct', '{', 'Results', '[]', 'AreaGeometry', '}', 'type', 'AreaGeometry', 'struct', '{', 'AREAGEOMETRY_ID', 'int32', 'AreaManagerId', 'int64', 'AreaId', 'string', 'EndDateArea', 'string', 'StartDateArea', 'string', 'AreaGeometryTxt', 'string', '}', '// Synchronizes the AreaGeometry in our MySQL database with the AreaGeometry in the database from the RDW', 'func', 'retrieveData', '()', '{', 'resp', ',', 'err', ':=', 'http', '.', 'Get', '(', '""https://api.datamarket.azure.com/opendata.rdw/StatischParkeren.Open.Data/v1/AREAGEOMETRY?$format=json""', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', '.', 'Error', '())', '// TODO: proper error handling', '}', 'body', ',', 'err', ':=', 'ioutil', '.', 'ReadAll', '(', 'resp', '.', 'Body', ')', 'var', 'd', 'Data', 'json', '.', 'Unmarshal', '(', 'body', ',', '&', 'd', ')', 'fmt', '.', 'Println', '(', '""Next: ""', '+', 'd', '.', 'Next', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'comment', 'Synchronizes', 'the', 'AreaGeometry', 'in', 'our', 'MySQL', 'database', 'with', 'the', 'AreaGeometry', 'in', 'the', 'database', 'from', 'the', 'RDW', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'TODO', ':', 'proper', 'error', 'handling', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",25312824
56,"package main

import (
    ""bytes""
    ""compress/zlib""
    ""encoding/json""
    ""flag""
    ""fmt""
    ""gotwcc/mylib""
    ""io""
    ""net/http""
    ""os""
)

type Block struct {
    data []byte
}

type Row struct {
    offset, len uint32
    block       *Block
}

type Cache struct {
    blocks          []Block
    indexes         map[string]*Row
    enable_compress bool
    maxRowGroup     uint
}

func (this *Cache) dump() {
    for key, value := range this.indexes {
        fmt.Printf(""[%s] = \""%s\""\n"", key, value.block)
    }
}

func (this *Cache) search(item_id string) string {
    row := this.indexes[item_id]
    if row == nil {
        return ""(Not found)""
    }
    block := this.uncompress(row.block.data)
    slice := block[row.offset : row.offset+row.len]
    return string(slice)
}

func (this *Cache) compress(data []byte) []byte {
    if !this.enable_compress {
        return data
    }

    var b bytes.Buffer
    w := zlib.NewWriter(&b)
    w.Write(data)
    w.Close()
    return b.Bytes()
}

func (this *Cache) uncompress(data []byte) []byte {
    if !this.enable_compress {
        return data
    }

    var res bytes.Buffer
    b := bytes.NewReader(data)
    r, err := zlib.NewReader(b)
    if err != nil {
        panic(err)
    }
    io.Copy(&res, r)

    r.Close()
    return res.Bytes()

}

func (this *Cache) loadFile(s string) {
    type TempRowBuf struct {
        item_id     []byte
        offset, len uint32
    }

    file, err := os.Open(s)
    if err != nil {
        panic(err.Error())
    }
    defer file.Close()

    scanner := mybufio.NewScanner(file)
    scanner.Split(mybufio.ScanLines)

    var tmp_buf bytes.Buffer
    var buffer bytes.Buffer
    var tmp_list []TempRowBuf
    this.indexes = make(map[string]*Row)

    var offset uint32 = 0
    nb := this.maxRowGroup
    for scanner.Scan() {
        nb--
        tmp_buf.Reset()
        tmp_buf.Write(scanner.Bytes())
        line := tmp_buf.Bytes()
        item_id, _ := tmp_buf.ReadBytes('\t')
        item_id = item_id[0 : len(item_id)-1]
        size := uint32(len(line))
        buffer.Write(line)
        tmp_list = append(tmp_list, TempRowBuf{item_id, offset, size})
        offset += size
        if nb <= 0 {
            compressed := this.compress(buffer.Bytes())
            buff := make([]byte, len(compressed))
            copy(buff, compressed)
            var block *Block = &Block{buff}
            for _, tmp := range tmp_list {
                this.indexes[string(tmp.item_id)] = &Row{tmp.offset, tmp.len, block}
            }
            nb = this.maxRowGroup
            offset = 0
            tmp_list = nil
            buffer.Reset()
        }
    }
    if nb > 0 {
        compressed := this.compress(buffer.Bytes())
        buff := make([]byte, len(compressed))
        copy(buff, compressed)
        var block *Block = &Block{buff}
        for _, tmp := range tmp_list {
            this.indexes[string(tmp.item_id)] = &Row{tmp.offset, tmp.len, block}
        }
    }
}

func wsCacheHandler(cache *Cache, writer http.ResponseWriter, request *http.Request) {
    var value map[string]string = make(map[string]string)

    item_id := request.FormValue(""item_id"")
    value[""item_id""] = item_id
    value[""raw""] = cache.search(item_id)
    jsonResp, err := json.Marshal(value)
    if err != nil {
        fmt.Println(""error:"", err)
    } else {
        fmt.Fprintf(writer, ""%s"", string(jsonResp))
    }
}

func main() {
    filename := flag.String(""data"", ""default.txt"", ""The data filename"")
    no_http := flag.Bool(""no-http"", false, ""Do not start an http server"")
    dumpMap := flag.Bool(""dump"", false, ""If we should dump the map to stdout"")
    noCompression := flag.Bool(""no-compress"", false, ""Disable compression"")
    maxRowGroup := flag.Uint(""max-row-group"", 100, ""How much line to group when doing compression"")

    flag.Parse()
    var cache Cache
    cache.enable_compress = !*noCompression
    cache.maxRowGroup = *maxRowGroup

    cache.loadFile(*filename)

    if *dumpMap {
        cache.dump()
        fmt.Println(cache.search(""100001""))
        fmt.Println(cache.search(""100002""))
        fmt.Println(cache.search(""100003""))
        fmt.Println(cache.search(""100004""))
        fmt.Println(cache.search(""100005""))
        fmt.Println(cache.search(""100006""))
        fmt.Println(cache.search(""100007""))
        fmt.Println(cache.search(""100008""))
        fmt.Println(cache.search(""100009""))
        fmt.Println(cache.search(""100010""))

    }

    if !*no_http {
        http.HandleFunc(""/"", func(writer http.ResponseWriter, request *http.Request) {
            wsCacheHandler(&cache, writer, request)
        })
        fmt.Println(""Cache loaded, now listening on port 8585..."")
        http.ListenAndServe("":8585"", nil)
    }
}","['package', 'main', 'import', '(', '""bytes""', '""compress/zlib""', '""encoding/json""', '""flag""', '""fmt""', '""gotwcc/mylib""', '""io""', '""net/http""', '""os""', ')', 'type', 'Block', 'struct', '{', 'data', '[]', 'byte', '}', 'type', 'Row', 'struct', '{', 'offset', ',', 'len', 'uint32', 'block', '*', 'Block', '}', 'type', 'Cache', 'struct', '{', 'blocks', '[]', 'Block', 'indexes', 'map', '[', 'string', ']*', 'Row', 'enable_compress', 'bool', 'maxRowGroup', 'uint', '}', 'func', '(', 'this', '*', 'Cache', ')', 'dump', '()', '{', 'for', 'key', ',', 'value', ':=', 'range', 'this', '.', 'indexes', '{', 'fmt', '.', 'Printf', '(', '""[%s] = \\""%s\\""\\n""', ',', 'key', ',', 'value', '.', 'block', ')', '}', '}', 'func', '(', 'this', '*', 'Cache', ')', 'search', '(', 'item_id', 'string', ')', 'string', '{', 'row', ':=', 'this', '.', 'indexes', '[', 'item_id', ']', 'if', 'row', '==', 'nil', '{', 'return', '""(Not found)""', '}', 'block', ':=', 'this', '.', 'uncompress', '(', 'row', '.', 'block', '.', 'data', ')', 'slice', ':=', 'block', '[', 'row', '.', 'offset', ':', 'row', '.', 'offset', '+', 'row', '.', 'len', ']', 'return', 'string', '(', 'slice', ')', '}', 'func', '(', 'this', '*', 'Cache', ')', 'compress', '(', 'data', '[]', 'byte', ')', '[]', 'byte', '{', 'if', '!', 'this', '.', 'enable_compress', '{', 'return', 'data', '}', 'var', 'b', 'bytes', '.', 'Buffer', 'w', ':=', 'zlib', '.', 'NewWriter', '(&', 'b', ')', 'w', '.', 'Write', '(', 'data', ')', 'w', '.', 'Close', '()', 'return', 'b', '.', 'Bytes', '()', '}', 'func', '(', 'this', '*', 'Cache', ')', 'uncompress', '(', 'data', '[]', 'byte', ')', '[]', 'byte', '{', 'if', '!', 'this', '.', 'enable_compress', '{', 'return', 'data', '}', 'var', 'res', 'bytes', '.', 'Buffer', 'b', ':=', 'bytes', '.', 'NewReader', '(', 'data', ')', 'r', ',', 'err', ':=', 'zlib', '.', 'NewReader', '(', 'b', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'io', '.', 'Copy', '(&', 'res', ',', 'r', ')', 'r', '.', 'Close', '()', 'return', 'res', '.', 'Bytes', '()', '}', 'func', '(', 'this', '*', 'Cache', ')', 'loadFile', '(', 's', 'string', ')', '{', 'type', 'TempRowBuf', 'struct', '{', 'item_id', '[]', 'byte', 'offset', ',', 'len', 'uint32', '}', 'file', ',', 'err', ':=', 'os', '.', 'Open', '(', 's', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', '.', 'Error', '())', '}', 'defer', 'file', '.', 'Close', '()', 'scanner', ':=', 'mybufio', '.', 'NewScanner', '(', 'file', ')', 'scanner', '.', 'Split', '(', 'mybufio', '.', 'ScanLines', ')', 'var', 'tmp_buf', 'bytes', '.', 'Buffer', 'var', 'buffer', 'bytes', '.', 'Buffer', 'var', 'tmp_list', '[]', 'TempRowBuf', 'this', '.', 'indexes', '=', 'make', '(', 'map', '[', 'string', ']*', 'Row', ')', 'var', 'offset', 'uint32', '=', '0', 'nb', ':=', 'this', '.', 'maxRowGroup', 'for', 'scanner', '.', 'Scan', '()', '{', 'nb', '--', 'tmp_buf', '.', 'Reset', '()', 'tmp_buf', '.', 'Write', '(', 'scanner', '.', 'Bytes', '())', 'line', ':=', 'tmp_buf', '.', 'Bytes', '()', 'item_id', ',', '_', ':=', 'tmp_buf', '.', 'ReadBytes', '(', 't', ')', 'item_id', '=', 'item_id', '[', '0', ':', 'len', '(', 'item_id', ')-', '1', ']', 'size', ':=', 'uint32', '(', 'len', '(', 'line', '))', 'buffer', '.', 'Write', '(', 'line', ')', 'tmp_list', '=', 'append', '(', 'tmp_list', ',', 'TempRowBuf', '{', 'item_id', ',', 'offset', ',', 'size', '})', 'offset', '+=', 'size', 'if', 'nb', '<=', '0', '{', 'compressed', ':=', 'this', '.', 'compress', '(', 'buffer', '.', 'Bytes', '())', 'buff', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'compressed', '))', 'copy', '(', 'buff', ',', 'compressed', ')', 'var', 'block', '*', 'Block', '=', '&', 'Block', '{', 'buff', '}', 'for', '_', ',', 'tmp', ':=', 'range', 'tmp_list', '{', 'this', '.', 'indexes', '[', 'string', '(', 'tmp', '.', 'item_id', ')]', '=', '&', 'Row', '{', 'tmp', '.', 'offset', ',', 'tmp', '.', 'len', ',', 'block', '}', '}', 'nb', '=', 'this', '.', 'maxRowGroup', 'offset', '=', '0', 'tmp_list', '=', 'nil', 'buffer', '.', 'Reset', '()', '}', '}', 'if', 'nb', '>', '0', '{', 'compressed', ':=', 'this', '.', 'compress', '(', 'buffer', '.', 'Bytes', '())', 'buff', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'compressed', '))', 'copy', '(', 'buff', ',', 'compressed', ')', 'var', 'block', '*', 'Block', '=', '&', 'Block', '{', 'buff', '}', 'for', '_', ',', 'tmp', ':=', 'range', 'tmp_list', '{', 'this', '.', 'indexes', '[', 'string', '(', 'tmp', '.', 'item_id', ')]', '=', '&', 'Row', '{', 'tmp', '.', 'offset', ',', 'tmp', '.', 'len', ',', 'block', '}', '}', '}', '}', 'func', 'wsCacheHandler', '(', 'cache', '*', 'Cache', ',', 'writer', 'http', '.', 'ResponseWriter', ',', 'request', '*', 'http', '.', 'Request', ')', '{', 'var', 'value', 'map', '[', 'string', ']', 'string', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'item_id', ':=', 'request', '.', 'FormValue', '(', '""item_id""', ')', 'value', '[', '""item_id""', ']', '=', 'item_id', 'value', '[', '""raw""', ']', '=', 'cache', '.', 'search', '(', 'item_id', ')', 'jsonResp', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'value', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', '""error:""', ',', 'err', ')', '}', 'else', '{', 'fmt', '.', 'Fprintf', '(', 'writer', ',', '""%s""', ',', 'string', '(', 'jsonResp', '))', '}', '}', 'func', 'main', '()', '{', 'filename', ':=', 'flag', '.', 'String', '(', '""data"", ""default.txt"", ""The data filename""', ')', 'no_http', ':=', 'flag', '.', 'Bool', '(', '""no-http"", false, ""Do not start an http server""', ')', 'dumpMap', ':=', 'flag', '.', 'Bool', '(', '""dump"", false, ""If we should dump the map to stdout""', ')', 'noCompression', ':=', 'flag', '.', 'Bool', '(', '""no-compress"", false, ""Disable compression""', ')', 'maxRowGroup', ':=', 'flag', '.', 'Uint', '(', '""max-row-group"", 100, ""How much line to group when doing compression""', ')', 'flag', '.', 'Parse', '()', 'var', 'cache', 'Cache', 'cache', '.', 'enable_compress', '=', '!*', 'noCompression', 'cache', '.', 'maxRowGroup', '=', '*', 'maxRowGroup', 'cache', '.', 'loadFile', '(*', 'filename', ')', 'if', '*', 'dumpMap', '{', 'cache', '.', 'dump', '()', 'fmt', '.', 'Println', '(', 'cache', '.', 'search', '(', '""100001""', '))', 'fmt', '.', 'Println', '(', 'cache', '.', 'search', '(', '""100002""', '))', 'fmt', '.', 'Println', '(', 'cache', '.', 'search', '(', '""100003""', '))', 'fmt', '.', 'Println', '(', 'cache', '.', 'search', '(', '""100004""', '))', 'fmt', '.', 'Println', '(', 'cache', '.', 'search', '(', '""100005""', '))', 'fmt', '.', 'Println', '(', 'cache', '.', 'search', '(', '""100006""', '))', 'fmt', '.', 'Println', '(', 'cache', '.', 'search', '(', '""100007""', '))', 'fmt', '.', 'Println', '(', 'cache', '.', 'search', '(', '""100008""', '))', 'fmt', '.', 'Println', '(', 'cache', '.', 'search', '(', '""100009""', '))', 'fmt', '.', 'Println', '(', 'cache', '.', 'search', '(', '""100010""', '))', '}', 'if', '!*', 'no_http', '{', 'http', '.', 'HandleFunc', '(', '""/""', ',', 'func', '(', 'writer', 'http', '.', 'ResponseWriter', ',', 'request', '*', 'http', '.', 'Request', ')', '{', 'wsCacheHandler', '(&', 'cache', ',', 'writer', ',', 'request', ')', '})', 'fmt', '.', 'Println', '(', '""Cache loaded, now listening on port 8585...""', ')', 'http', '.', 'ListenAndServe', '(', '"":8585""', ',', 'nil', ')', '}', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'operator']",25333683
57,"package main

import (
        ""net/http""
        ""fmt""
        //""encoding/json""
        //""html""
        ""github.com/kr/pretty""
);

func main(){
        http.HandleFunc(""/"", foo)
        http.ListenAndServe("":80"", nil)
}

func foo(w http.ResponseWriter, r * http.Request){
        w.Header().Set(""Server"",""A Go WebServer"")

        w.Header().Set(""Content-Type"", ""text/html"")

        hostname := r.URL.Query()[""hostname""]
        //w.Write([]byte(hostname[0]))
        fmt.Printf(""%# v"", pretty.Formatter(hostname[0]))


        w.Write([]byte(hostname))
}","['package', 'main', 'import', '(', '""net/http""', '""fmt""', '//""encoding/json""', '//""html""', '""github.com/kr/pretty""', ');', 'func', 'main', '(){', 'http', '.', 'HandleFunc', '(', '""/""', ',', 'foo', ')', 'http', '.', 'ListenAndServe', '(', '"":80""', ',', 'nil', ')', '}', 'func', 'foo', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', '){', 'w', '.', 'Header', '().', 'Set', '(', '""Server"",""A Go WebServer""', ')', 'w', '.', 'Header', '().', 'Set', '(', '""Content-Type"", ""text/html""', ')', 'hostname', ':=', 'r', '.', 'URL', '.', 'Query', '()[', '""hostname""', ']', '//w.Write([]byte(hostname[0]))', 'fmt', '.', 'Printf', '(', '""%# v""', ',', 'pretty', '.', 'Formatter', '(', 'hostname', '[', '0', ']))', 'w', '.', 'Write', '([]', 'byte', '(', 'hostname', '))', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'comment', '``', 'encoding/json', ""''"", 'comment', '``', 'html', ""''"", 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'w.Write', '(', '[', ']', 'byte', '(', 'hostname', '[', '0', ']', ')', ')', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",25600521
58,"        fmt.Print(""\n"")
        fmt.Println((len(newhost)))
","['fmt', '.', 'Print', '(', '""\\n""', ')', 'fmt', '.', 'Println', '((', 'len', '(', 'newhost', ')))']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']",25600521
59,"// CLIENT ///
    package main

import (
    ""bufio""
    ""bytes""
    ""fmt""
    ""io""
    ""log""
    ""net""
    ""os""
    ""strings""
)

const BUFFER_SIZE = 1024

func main() {

    //get port and ip address to dial

    if len(os.Args) != 3 {
        fmt.Println(""useage example: tcpClient 127.0.0.1 7005"")
        return
    }

    var ip string = os.Args[1]
    var port string = os.Args[2]

    connection, err := net.Dial(""tcp"", ip+"":""+port)
    if err != nil {
        fmt.Println(""There was an error making a connection"")
    }

    //read from
    reader := bufio.NewReader(os.Stdin)
    fmt.Print(""Please enter 'get ' or 'send ' to transfer files to the server\n\n"")
    inputFromUser, _ := reader.ReadString('\n')
    arrayOfCommands := strings.Split(inputFromUser, "" "")

    if arrayOfCommands[0] == ""get"" {
        getFileFromServer(arrayOfCommands[1], connection)

    } else if arrayOfCommands[0] == ""send"" {
        sendFileToServer(arrayOfCommands[1], connection)
    } else {
        fmt.Println(""Bad Command"")
    }

}

func sendFileToServer(fileName string, connection net.Conn) {

    var currentByte int64 = 0
    fmt.Println(""send to client"")
    fileBuffer := make([]byte, BUFFER_SIZE)

    var err error

    //file to read
    file, err := os.Open(strings.TrimSpace(fileName)) // For read access.
    if err != nil {
        connection.Write([]byte(""-1""))
        log.Fatal(err)
    }
    connection.Write([]byte(""send "" + fileName))
    //read file until there is an error
    for err == nil || err != io.EOF {

        _, err = file.ReadAt(fileBuffer, currentByte)
        currentByte += BUFFER_SIZE
        fmt.Println(fileBuffer)
        connection.Write(fileBuffer)
    }

    file.Close()
    connection.Close()

}

func getFileFromServer(fileName string, connection net.Conn) {

    var currentByte int64 = 0

    fileBuffer := make([]byte, BUFFER_SIZE)

    var err error
    file, err := os.Create(strings.TrimSpace(fileName))
    if err != nil {
        log.Fatal(err)
    }
    connection.Write([]byte(""get "" + fileName))
    for {

        connection.Read(fileBuffer)
        cleanedFileBuffer := bytes.Trim(fileBuffer, ""\x00"")

        _, err = file.WriteAt(cleanedFileBuffer, currentByte)

        currentByte += BUFFER_SIZE

        if err == io.EOF {
            break
        }

    }

    file.Close()
    return

}

// END CLIENT //
// SERVER //
    package main

import (
    ""bytes""
    ""fmt""
    ""io""
    ""log""
    ""net""
    ""os""
    ""strings""
)

const BUFFER_SIZE = 1024
const PORT = ""7005""

func main() {

    fmt.Println(""start listening"")

    server, error := net.Listen(""tcp"", ""localhost:""+PORT)
    if error != nil {
        fmt.Println(""There was an error starting the server"" + error.Error())
        return
    }

    //infinate loop
    for {

        connection, error := server.Accept()
        if error != nil {
            fmt.Println(""There was am error with the connection"" + error.Error())
            return
        }
        fmt.Println(""connected"")
        //handle the connection, on it's own thread, per connection
        go connectionHandler(connection)
    }
}

func connectionHandler(connection net.Conn) {
    buffer := make([]byte, BUFFER_SIZE)

    _, error := connection.Read(buffer)
    if error != nil {
        fmt.Println(""There is an error reading from connection"", error.Error())
        return
    }
    fmt.Println(""command recieved: "" + string(buffer))

    //loop until disconntect

    cleanedBuffer := bytes.Trim(buffer, ""\x00"")
    cleanedInputCommandString := strings.TrimSpace(string(cleanedBuffer))
    arrayOfCommands := strings.Split(cleanedInputCommandString, "" "")

    fmt.Println(arrayOfCommands[0])
    if arrayOfCommands[0] == ""get"" {
        sendFileToClient(arrayOfCommands[1], connection)
    } else if arrayOfCommands[0] == ""send"" {
        fmt.Println(""getting a file"")

        getFileFromClient(arrayOfCommands[1], connection)

    } else {
        _, error = connection.Write([]byte(""bad command""))
    }

}

func sendFileToClient(fileName string, connection net.Conn) {
    var currentByte int64 = 0
    fmt.Println(""send to client"")
    fileBuffer := make([]byte, BUFFER_SIZE)

    //file to read
    file, err := os.Open(strings.TrimSpace(fileName)) // For read access.
    if err != nil {

        log.Fatal(err)
    }
    var err2 error

    //read file until there is an error
    for {

        _, err2 = file.ReadAt(fileBuffer, currentByte)
        currentByte += BUFFER_SIZE
        fmt.Println(fileBuffer)
        connection.Write(fileBuffer)

        if err2 == io.EOF {
            break
        }
    }

    file.Close()
    return

}

func getFileFromClient(fileName string, connection net.Conn) {

    var currentByte int64 = 0

    fileBuffer := make([]byte, BUFFER_SIZE)

    var err error
    file, err := os.Create(strings.TrimSpace(fileName))
    if err != nil {
        log.Fatal(err)
    }
    connection.Write([]byte(""get "" + fileName))
    for err == nil || err != io.EOF {

        connection.Read(fileBuffer)

        cleanedFileBuffer := bytes.Trim(fileBuffer, ""\x00"")

        _, err = file.WriteAt(cleanedFileBuffer, currentByte)
        if len(string(fileBuffer)) != len(string(cleanedFileBuffer)) {
            break
        }
        currentByte += BUFFER_SIZE

    }

    connection.Close()
    file.Close()
    return

}

// END SERVER //","['// CLIENT ///', 'package', 'main', 'import', '(', '""bufio""', '""bytes""', '""fmt""', '""io""', '""log""', '""net""', '""os""', '""strings""', ')', 'const', 'BUFFER_SIZE', '=', '1024', 'func', 'main', '()', '{', '//get port and ip address to dial', 'if', 'len', '(', 'os', '.', 'Args', ')', '!=', '3', '{', 'fmt', '.', 'Println', '(', '""useage example: tcpClient 127.0.0.1 7005""', ')', 'return', '}', 'var', 'ip', 'string', '=', 'os', '.', 'Args', '[', '1', ']', 'var', 'port', 'string', '=', 'os', '.', 'Args', '[', '2', ']', 'connection', ',', 'err', ':=', 'net', '.', 'Dial', '(', '""tcp"", ip+"":""', '+', 'port', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', '""There was an error making a connection""', ')', '}', '//read from', 'reader', ':=', 'bufio', '.', 'NewReader', '(', 'os', '.', 'Stdin', ')', 'fmt', '.', 'Print', '(', '""Please enter \'get \' or \'send \' to transfer files to the server\\n\\n""', ')', 'inputFromUser', ',', '_', ':=', 'reader', '.', 'ReadString', '(', 'n', ')', 'arrayOfCommands', ':=', 'strings', '.', 'Split', '(', 'inputFromUser', ',', '"" ""', ')', 'if', 'arrayOfCommands', '[', '0', ']', '==', '""get""', '{', 'getFileFromServer', '(', 'arrayOfCommands', '[', '1', '],', 'connection', ')', '}', 'else', 'if', 'arrayOfCommands', '[', '0', ']', '==', '""send""', '{', 'sendFileToServer', '(', 'arrayOfCommands', '[', '1', '],', 'connection', ')', '}', 'else', '{', 'fmt', '.', 'Println', '(', '""Bad Command""', ')', '}', '}', 'func', 'sendFileToServer', '(', 'fileName', 'string', ',', 'connection', 'net', '.', 'Conn', ')', '{', 'var', 'currentByte', 'int64', '=', '0', 'fmt', '.', 'Println', '(', '""send to client""', ')', 'fileBuffer', ':=', 'make', '([]', 'byte', ',', 'BUFFER_SIZE', ')', 'var', 'err', 'error', '//file to read', 'file', ',', 'err', ':=', 'os', '.', 'Open', '(', 'strings', '.', 'TrimSpace', '(', 'fileName', '))', '// For read access.', 'if', 'err', '!=', 'nil', '{', 'connection', '.', 'Write', '([]', 'byte', '(', '""-1""', '))', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'connection', '.', 'Write', '([]', 'byte', '(', '""send ""', '+', 'fileName', '))', '//read file until there is an error', 'for', 'err', '==', 'nil', '||', 'err', '!=', 'io', '.', 'EOF', '{', '_', ',', 'err', '=', 'file', '.', 'ReadAt', '(', 'fileBuffer', ',', 'currentByte', ')', 'currentByte', '+=', 'BUFFER_SIZE', 'fmt', '.', 'Println', '(', 'fileBuffer', ')', 'connection', '.', 'Write', '(', 'fileBuffer', ')', '}', 'file', '.', 'Close', '()', 'connection', '.', 'Close', '()', '}', 'func', 'getFileFromServer', '(', 'fileName', 'string', ',', 'connection', 'net', '.', 'Conn', ')', '{', 'var', 'currentByte', 'int64', '=', '0', 'fileBuffer', ':=', 'make', '([]', 'byte', ',', 'BUFFER_SIZE', ')', 'var', 'err', 'error', 'file', ',', 'err', ':=', 'os', '.', 'Create', '(', 'strings', '.', 'TrimSpace', '(', 'fileName', '))', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'connection', '.', 'Write', '([]', 'byte', '(', '""get ""', '+', 'fileName', '))', 'for', '{', 'connection', '.', 'Read', '(', 'fileBuffer', ')', 'cleanedFileBuffer', ':=', 'bytes', '.', 'Trim', '(', 'fileBuffer', ',', '""\\x00""', ')', '_', ',', 'err', '=', 'file', '.', 'WriteAt', '(', 'cleanedFileBuffer', ',', 'currentByte', ')', 'currentByte', '+=', 'BUFFER_SIZE', 'if', 'err', '==', 'io', '.', 'EOF', '{', 'break', '}', '}', 'file', '.', 'Close', '()', 'return', '}', '// END CLIENT //', '// SERVER //', 'package', 'main', 'import', '(', '""bytes""', '""fmt""', '""io""', '""log""', '""net""', '""os""', '""strings""', ')', 'const', 'BUFFER_SIZE', '=', '1024', 'const', 'PORT', '=', '""7005""', 'func', 'main', '()', '{', 'fmt', '.', 'Println', '(', '""start listening""', ')', 'server', ',', 'error', ':=', 'net', '.', 'Listen', '(', '""tcp"", ""localhost:""', '+', 'PORT', ')', 'if', 'error', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', '""There was an error starting the server""', '+', 'error', '.', 'Error', '())', 'return', '}', '//infinate loop', 'for', '{', 'connection', ',', 'error', ':=', 'server', '.', 'Accept', '()', 'if', 'error', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', '""There was am error with the connection""', '+', 'error', '.', 'Error', '())', 'return', '}', 'fmt', '.', 'Println', '(', '""connected""', ')', ""//handle the connection, on it's own thread, per connection"", 'go', 'connectionHandler', '(', 'connection', ')', '}', '}', 'func', 'connectionHandler', '(', 'connection', 'net', '.', 'Conn', ')', '{', 'buffer', ':=', 'make', '([]', 'byte', ',', 'BUFFER_SIZE', ')', '_', ',', 'error', ':=', 'connection', '.', 'Read', '(', 'buffer', ')', 'if', 'error', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', '""There is an error reading from connection""', ',', 'error', '.', 'Error', '())', 'return', '}', 'fmt', '.', 'Println', '(', '""command recieved: ""', '+', 'string', '(', 'buffer', '))', '//loop until disconntect', 'cleanedBuffer', ':=', 'bytes', '.', 'Trim', '(', 'buffer', ',', '""\\x00""', ')', 'cleanedInputCommandString', ':=', 'strings', '.', 'TrimSpace', '(', 'string', '(', 'cleanedBuffer', '))', 'arrayOfCommands', ':=', 'strings', '.', 'Split', '(', 'cleanedInputCommandString', ',', '"" ""', ')', 'fmt', '.', 'Println', '(', 'arrayOfCommands', '[', '0', '])', 'if', 'arrayOfCommands', '[', '0', ']', '==', '""get""', '{', 'sendFileToClient', '(', 'arrayOfCommands', '[', '1', '],', 'connection', ')', '}', 'else', 'if', 'arrayOfCommands', '[', '0', ']', '==', '""send""', '{', 'fmt', '.', 'Println', '(', '""getting a file""', ')', 'getFileFromClient', '(', 'arrayOfCommands', '[', '1', '],', 'connection', ')', '}', 'else', '{', '_', ',', 'error', '=', 'connection', '.', 'Write', '([]', 'byte', '(', '""bad command""', '))', '}', '}', 'func', 'sendFileToClient', '(', 'fileName', 'string', ',', 'connection', 'net', '.', 'Conn', ')', '{', 'var', 'currentByte', 'int64', '=', '0', 'fmt', '.', 'Println', '(', '""send to client""', ')', 'fileBuffer', ':=', 'make', '([]', 'byte', ',', 'BUFFER_SIZE', ')', '//file to read', 'file', ',', 'err', ':=', 'os', '.', 'Open', '(', 'strings', '.', 'TrimSpace', '(', 'fileName', '))', '// For read access.', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'var', 'err2', 'error', '//read file until there is an error', 'for', '{', '_', ',', 'err2', '=', 'file', '.', 'ReadAt', '(', 'fileBuffer', ',', 'currentByte', ')', 'currentByte', '+=', 'BUFFER_SIZE', 'fmt', '.', 'Println', '(', 'fileBuffer', ')', 'connection', '.', 'Write', '(', 'fileBuffer', ')', 'if', 'err2', '==', 'io', '.', 'EOF', '{', 'break', '}', '}', 'file', '.', 'Close', '()', 'return', '}', 'func', 'getFileFromClient', '(', 'fileName', 'string', ',', 'connection', 'net', '.', 'Conn', ')', '{', 'var', 'currentByte', 'int64', '=', '0', 'fileBuffer', ':=', 'make', '([]', 'byte', ',', 'BUFFER_SIZE', ')', 'var', 'err', 'error', 'file', ',', 'err', ':=', 'os', '.', 'Create', '(', 'strings', '.', 'TrimSpace', '(', 'fileName', '))', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'connection', '.', 'Write', '([]', 'byte', '(', '""get ""', '+', 'fileName', '))', 'for', 'err', '==', 'nil', '||', 'err', '!=', 'io', '.', 'EOF', '{', 'connection', '.', 'Read', '(', 'fileBuffer', ')', 'cleanedFileBuffer', ':=', 'bytes', '.', 'Trim', '(', 'fileBuffer', ',', '""\\x00""', ')', '_', ',', 'err', '=', 'file', '.', 'WriteAt', '(', 'cleanedFileBuffer', ',', 'currentByte', ')', 'if', 'len', '(', 'string', '(', 'fileBuffer', '))', '!=', 'len', '(', 'string', '(', 'cleanedFileBuffer', '))', '{', 'break', '}', 'currentByte', '+=', 'BUFFER_SIZE', '}', 'connection', '.', 'Close', '()', 'file', '.', 'Close', '()', 'return', '}', '// END SERVER //']","['comment', 'CLIENT', '/', 'keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'get', 'port', 'and', 'ip', 'address', 'to', 'dial', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'read', 'from', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'comment', 'file', 'to', 'read', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'For', 'read', 'access', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'comment', 'read', 'file', 'until', 'there', 'is', 'an', 'error', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'END', 'CLIENT', 'comment', 'SERVER', 'keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'string_literal', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'infinate', 'loop', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'handle', 'the', 'connection', ',', 'on', 'it', ""'s"", 'own', 'thread', ',', 'per', 'connection', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'loop', 'until', 'disconntect', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'file', 'to', 'read', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'For', 'read', 'access', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'comment', 'read', 'file', 'until', 'there', 'is', 'an', 'error', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'END', 'SERVER']",26030627
60,"func ValidateIDToken(auth_token string) (err error){    
    res, err := http.Get(""https://www.googleapis.com/oauth2/v2/certs"")
    if err != nil {
        log.Fatal(err)
        return err
    }

    certs, err := ioutil.ReadAll(res.Body)
    res.Body.Close()
    if err != nil {
        log.Fatal(err)
        return err
    }

    //get modulus and exponent from the cert
    var goCertificate interface{}

    err = json.Unmarshal(certs, &goCertificate)    
    k := goCertificate.(map[string]interface{})[""keys""]
    j := k.([]interface{})
    x := j[1]
    h := x.(map[string]interface{})[""n""]
    g := x.(map[string]interface{})[""e""]
    e64 := base64.StdEncoding
    //build the google pub key
    nStr := h.(string)
    decN, err := base64.StdEncoding.DecodeString(nStr)
    if err != nil {
        log.Println(err)
        return
    }

    n := big.NewInt(0)
    n.SetBytes(decN)
    eStr := g.(string)
    decE, err := base64.StdEncoding.DecodeString(eStr)
    if err != nil {
        log.Println(err)
        return
    }

    var eBytes []byte
    if len(decE) < 8 {
        eBytes = make([]byte, 8-len(decE), 8)
        eBytes = append(eBytes, decE...)
    } else {
        eBytes = decE
    }

    eReader := bytes.NewReader(eBytes)
    var e uint64
    err = binary.Read(eReader, binary.BigEndian, &e)
    if err != nil {
        log.Println(err)
        return
    }

    pKey := rsa.PublicKey{N: n, E: int(e)}
    w := strings.SplitAfter(auth_token, ""."")    
    for i, val := range w {
        w[i] = strings.Trim(val, ""."")
    }
    y := w[0:2]

    //Join just the first two parts, the header and the payload without the signature
    o := strings.Join(y, ""."")   
    headerOauth := DecodeB64(nil,[]byte(w[0]),e64)
    inblockOauth := DecodeB64(nil,[]byte(w[1]),e64)
    toHash := string(headerOauth) + ""}."" + string(inblockOauth)
    digestOauth := DecodeB64(nil, []byte(w[2]),e64)

    hasherOauth := sha256.New()
    hasherOauth.Write([]byte(toHash))

    // validation here fails
    err = rsa.VerifyPKCS1v15(&pKey,crypto.SHA256,hasherOauth.Sum(nil),digestOauth)

    if err != nil {
        log.Printf(""Error verifying key %s"",err.Error())
        return err
    }
    return err
}","['func', 'ValidateIDToken', '(', 'auth_token', 'string', ')', '(', 'err', 'error', '){', 'res', ',', 'err', ':=', 'http', '.', 'Get', '(', '""https://www.googleapis.com/oauth2/v2/certs""', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', 'return', 'err', '}', 'certs', ',', 'err', ':=', 'ioutil', '.', 'ReadAll', '(', 'res', '.', 'Body', ')', 'res', '.', 'Body', '.', 'Close', '()', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', 'return', 'err', '}', '//get modulus and exponent from the cert', 'var', 'go', 'Certificate', 'interface', '{}', 'err', '=', 'json', '.', 'Unmarshal', '(', 'certs', ',', '&', 'go', 'Certificate', ')', 'k', ':=', 'go', 'Certificate', '.(', 'map', '[', 'string', ']', 'interface', '{})[', '""keys""', ']', 'j', ':=', 'k', '.([]', 'interface', '{})', 'x', ':=', 'j', '[', '1', ']', 'h', ':=', 'x', '.(', 'map', '[', 'string', ']', 'interface', '{})[', '""n""', ']', 'g', ':=', 'x', '.(', 'map', '[', 'string', ']', 'interface', '{})[', '""e""', ']', 'e64', ':=', 'base64', '.', 'StdEncoding', '//build the google pub key', 'nStr', ':=', 'h', '.(', 'string', ')', 'decN', ',', 'err', ':=', 'base64', '.', 'StdEncoding', '.', 'DecodeString', '(', 'nStr', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Println', '(', 'err', ')', 'return', '}', 'n', ':=', 'big', '.', 'NewInt', '(', '0', ')', 'n', '.', 'SetBytes', '(', 'decN', ')', 'eStr', ':=', 'g', '.(', 'string', ')', 'decE', ',', 'err', ':=', 'base64', '.', 'StdEncoding', '.', 'DecodeString', '(', 'eStr', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Println', '(', 'err', ')', 'return', '}', 'var', 'eBytes', '[]', 'byte', 'if', 'len', '(', 'decE', ')', '<', '8', '{', 'eBytes', '=', 'make', '([]', 'byte', ',', '8', '-', 'len', '(', 'decE', '),', '8', ')', 'eBytes', '=', 'append', '(', 'eBytes', ',', 'decE', '...)', '}', 'else', '{', 'eBytes', '=', 'decE', '}', 'eReader', ':=', 'bytes', '.', 'NewReader', '(', 'eBytes', ')', 'var', 'e', 'uint64', 'err', '=', 'binary', '.', 'Read', '(', 'eReader', ',', 'binary', '.', 'BigEndian', ',', '&', 'e', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Println', '(', 'err', ')', 'return', '}', 'pKey', ':=', 'rsa', '.', 'PublicKey', '{', 'N', ':', 'n', ',', 'E', ':', 'int', '(', 'e', ')}', 'w', ':=', 'strings', '.', 'SplitAfter', '(', 'auth_token', ',', '"".""', ')', 'for', 'i', ',', 'val', ':=', 'range', 'w', '{', 'w', '[', 'i', ']', '=', 'strings', '.', 'Trim', '(', 'val', ',', '"".""', ')', '}', 'y', ':=', 'w', '[', '0', ':', '2', ']', '//Join just the first two parts, the header and the payload without the signature', 'o', ':=', 'strings', '.', 'Join', '(', 'y', ',', '"".""', ')', 'headerOauth', ':=', 'DecodeB64', '(', 'nil', ',[]', 'byte', '(', 'w', '[', '0', ']),', 'e64', ')', 'inblockOauth', ':=', 'DecodeB64', '(', 'nil', ',[]', 'byte', '(', 'w', '[', '1', ']),', 'e64', ')', 'toHash', ':=', 'string', '(', 'headerOauth', ')', '+', '""}.""', '+', 'string', '(', 'inblockOauth', ')', 'digestOauth', ':=', 'DecodeB64', '(', 'nil', ',', '[]', 'byte', '(', 'w', '[', '2', ']),', 'e64', ')', 'hasherOauth', ':=', 'sha256', '.', 'New', '()', 'hasherOauth', '.', 'Write', '([]', 'byte', '(', 'toHash', '))', '// validation here fails', 'err', '=', 'rsa', '.', 'VerifyPKCS1v15', '(&', 'pKey', ',', 'crypto', '.', 'SHA256', ',', 'hasherOauth', '.', 'Sum', '(', 'nil', '),', 'digestOauth', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""Error verifying key %s""', ',', 'err', '.', 'Error', '())', 'return', 'err', '}', 'return', 'err', '}']","['keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'comment', 'get', 'modulus', 'and', 'exponent', 'from', 'the', 'cert', 'keyword', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'build', 'the', 'google', 'pub', 'key', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'comment', 'Join', 'just', 'the', 'first', 'two', 'parts', ',', 'the', 'header', 'and', 'the', 'payload', 'without', 'the', 'signature', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'validation', 'here', 'fails', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator']",26159658
61,"package main
import(
    ""strings""
    ""encoding/binary""
    ""errors""
    ""fmt""
    ""log""
    ""encoding/base64""
    ""io/ioutil""
    ""crypto""    
    ""crypto/sha256""
    ""crypto/rsa""
    ""bytes""
    ""encoding/json""
    ""net/http""
    ""math/big""  

)

func main() {
    auth_token := """"
    w := strings.SplitAfter(auth_token, ""."")    
    for i, val := range w {
        w[i] = strings.Trim(val, ""."")
    }
    headerOauth, err := base64.URLEncoding.DecodeString(w[0])

    res, err := http.Get(""https://www.googleapis.com/oauth2/v2/certs"")
    if err != nil {
        fmt.Println(err)
    }

    certs, err := ioutil.ReadAll(res.Body)
    res.Body.Close()
    if err != nil {
        fmt.Println(err)
    }

    //extract kid from token header
    var header interface{}

    err = json.Unmarshal([]byte(string(headerOauth)+""}""), &header)

    token_kid := header.(map[string]interface{})[""kid""]
    fmt.Println(""By 1"")
    //get modulus and exponent from the cert

    var goCertificate interface{}

    err = json.Unmarshal(certs, &goCertificate)    

    //k := goCertificate.(map[string]interface{})[token_kid.(string)]
    k := goCertificate.(map[string]interface{})[""keys""]

    ///*mod & exp part
    j := k.([]interface{})
    x := j[0]

    if j[0].(map[string]interface{})[""kid""] == token_kid {
        x = j[0]
    }else{
        if j[1].(map[string]interface{})[""kid""] == token_kid {
            x = j[1]
        }else{
            errors.New(""Token is not valid, kid from token and certificate don't match"")

        }
    }
    h := x.(map[string]interface{})[""n""]
    g := x.(map[string]interface{})[""e""]

    //build the google pub key
    nStr := h.(string)
    decN, err := base64.URLEncoding.DecodeString(nStr)
    if err != nil {
        fmt.Println(err)
        return
    }

    n := big.NewInt(0)
    n.SetBytes(decN)
    eStr := g.(string)
    decE, err := base64.URLEncoding.DecodeString(eStr)
    if err != nil {
        fmt.Println(err)
        return
    }

    var eBytes []byte
    if len(decE) < 8 {
        eBytes = make([]byte, 8-len(decE), 8)
        eBytes = append(eBytes, decE...)
    } else {
        eBytes = decE
    }

    eReader := bytes.NewReader(eBytes)
    var e uint64
    err = binary.Read(eReader, binary.BigEndian, &e)
    if err != nil {
        log.Println(err)
        return
    }

    pKey := rsa.PublicKey{N: n, E: int(e)}
        //inblockOauth := base64.URLEncoding.DecodeString(w[1])
    toHash := w[0] + ""."" + w[1]
    digestOauth, err := base64.URLEncoding.DecodeString(w[2])

    hasherOauth := sha256.New()
    hasherOauth.Write([]byte(toHash))

    // verification here fails
    err = rsa.VerifyPKCS1v15(&pKey,crypto.SHA256,hasherOauth.Sum(nil),digestOauth)

    if err != nil {
        fmt.Printf(""Error verifying key %s"",err.Error())

    }

}","['package', 'main', 'import', '(', '""strings""', '""encoding/binary""', '""errors""', '""fmt""', '""log""', '""encoding/base64""', '""io/ioutil""', '""crypto""', '""crypto/sha256""', '""crypto/rsa""', '""bytes""', '""encoding/json""', '""net/http""', '""math/big""', ')', 'func', 'main', '()', '{', 'auth_token', ':=', '""""', 'w', ':=', 'strings', '.', 'SplitAfter', '(', 'auth_token', ',', '"".""', ')', 'for', 'i', ',', 'val', ':=', 'range', 'w', '{', 'w', '[', 'i', ']', '=', 'strings', '.', 'Trim', '(', 'val', ',', '"".""', ')', '}', 'headerOauth', ',', 'err', ':=', 'base64', '.', 'URLEncoding', '.', 'DecodeString', '(', 'w', '[', '0', '])', 'res', ',', 'err', ':=', 'http', '.', 'Get', '(', '""https://www.googleapis.com/oauth2/v2/certs""', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', '}', 'certs', ',', 'err', ':=', 'ioutil', '.', 'ReadAll', '(', 'res', '.', 'Body', ')', 'res', '.', 'Body', '.', 'Close', '()', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', '}', '//extract kid from token header', 'var', 'header', 'interface', '{}', 'err', '=', 'json', '.', 'Unmarshal', '([]', 'byte', '(', 'string', '(', 'headerOauth', ')+', '""}""', '),', '&', 'header', ')', 'token_kid', ':=', 'header', '.(', 'map', '[', 'string', ']', 'interface', '{})[', '""kid""', ']', 'fmt', '.', 'Println', '(', '""By 1""', ')', '//get modulus and exponent from the cert', 'var', 'go', 'Certificate', 'interface', '{}', 'err', '=', 'json', '.', 'Unmarshal', '(', 'certs', ',', '&', 'go', 'Certificate', ')', '//k := goCertificate.(map[string]interface{})[token_kid.(string)]', 'k', ':=', 'go', 'Certificate', '.(', 'map', '[', 'string', ']', 'interface', '{})[', '""keys""', ']', '///*mod & exp part', 'j', ':=', 'k', '.([]', 'interface', '{})', 'x', ':=', 'j', '[', '0', ']', 'if', 'j', '[', '0', '].(', 'map', '[', 'string', ']', 'interface', '{})[', '""kid""', ']', '==', 'token_kid', '{', 'x', '=', 'j', '[', '0', ']', '}', 'else', '{', 'if', 'j', '[', '1', '].(', 'map', '[', 'string', ']', 'interface', '{})[', '""kid""', ']', '==', 'token_kid', '{', 'x', '=', 'j', '[', '1', ']', '}', 'else', '{', 'errors', '.', 'New', '(', '""Token is not valid, kid from token and certificate don\'t match""', ')', '}', '}', 'h', ':=', 'x', '.(', 'map', '[', 'string', ']', 'interface', '{})[', '""n""', ']', 'g', ':=', 'x', '.(', 'map', '[', 'string', ']', 'interface', '{})[', '""e""', ']', '//build the google pub key', 'nStr', ':=', 'h', '.(', 'string', ')', 'decN', ',', 'err', ':=', 'base64', '.', 'URLEncoding', '.', 'DecodeString', '(', 'nStr', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', 'return', '}', 'n', ':=', 'big', '.', 'NewInt', '(', '0', ')', 'n', '.', 'SetBytes', '(', 'decN', ')', 'eStr', ':=', 'g', '.(', 'string', ')', 'decE', ',', 'err', ':=', 'base64', '.', 'URLEncoding', '.', 'DecodeString', '(', 'eStr', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', 'return', '}', 'var', 'eBytes', '[]', 'byte', 'if', 'len', '(', 'decE', ')', '<', '8', '{', 'eBytes', '=', 'make', '([]', 'byte', ',', '8', '-', 'len', '(', 'decE', '),', '8', ')', 'eBytes', '=', 'append', '(', 'eBytes', ',', 'decE', '...)', '}', 'else', '{', 'eBytes', '=', 'decE', '}', 'eReader', ':=', 'bytes', '.', 'NewReader', '(', 'eBytes', ')', 'var', 'e', 'uint64', 'err', '=', 'binary', '.', 'Read', '(', 'eReader', ',', 'binary', '.', 'BigEndian', ',', '&', 'e', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Println', '(', 'err', ')', 'return', '}', 'pKey', ':=', 'rsa', '.', 'PublicKey', '{', 'N', ':', 'n', ',', 'E', ':', 'int', '(', 'e', ')}', '//inblockOauth := base64.URLEncoding.DecodeString(w[1])', 'toHash', ':=', 'w', '[', '0', ']', '+', '"".""', '+', 'w', '[', '1', ']', 'digestOauth', ',', 'err', ':=', 'base64', '.', 'URLEncoding', '.', 'DecodeString', '(', 'w', '[', '2', '])', 'hasherOauth', ':=', 'sha256', '.', 'New', '()', 'hasherOauth', '.', 'Write', '([]', 'byte', '(', 'toHash', '))', '// verification here fails', 'err', '=', 'rsa', '.', 'VerifyPKCS1v15', '(&', 'pKey', ',', 'crypto', '.', 'SHA256', ',', 'hasherOauth', '.', 'Sum', '(', 'nil', '),', 'digestOauth', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""Error verifying key %s""', ',', 'err', '.', 'Error', '())', '}', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'extract', 'kid', 'from', 'token', 'header', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'get', 'modulus', 'and', 'exponent', 'from', 'the', 'cert', 'keyword', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'comment', 'k', ':', '=', 'goCertificate.', '(', 'map', '[', 'string', ']', 'interface', '{', '}', ')', '[', 'token_kid', '.', '(', 'string', ')', ']', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'string_literal', 'operator', 'comment', '/*mod', '&', 'exp', 'part', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'string_literal', 'operator', 'comment', 'build', 'the', 'google', 'pub', 'key', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'inblockOauth', ':', '=', 'base64.URLEncoding.DecodeString', '(', 'w', '[', '1', ']', ')', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'verification', 'here', 'fails', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator']",26159658
62,"package main

import (
    ""bufio""
    ""bytes""
    ""errors""
    ""fmt""
    ""os""
    ""runtime""
    ""sort""
    ""strconv""
)

type Edge struct {
    U, V uint32
}

func (e Edge) String() string {
    return fmt.Sprintf(""%d,%d"", e.U, e.V)
}

type ByKey []Edge

func (a ByKey) Len() int      { return len(a) }
func (a ByKey) Swap(i, j int) { a[i], a[j] = a[j], a[i] }
func (a ByKey) Less(i, j int) bool {
    if a[i].U < a[j].U {
        return true
    }
    if a[i].U == a[j].U && a[i].V < a[j].V {
        return true
    }
    return false
}

func countEdges(scanner *bufio.Scanner) int {
    var nNodes, nEdges int
    for scanner.Scan() {
        line := scanner.Bytes()
        if !(len(line) > 0 && line[0] == '#') {
            nEdges++
            continue
        }
        n, err := fmt.Sscanf(string(line), ""# Nodes: %d Edges: %d"", &nNodes, &nEdges)
        if err != nil || n != 2 {
            n, err = fmt.Sscanf(string(line), ""# %d,%d"", &nNodes, &nEdges)
            if err != nil || n != 2 {
                continue
            }
        }
        fmt.Println(string(line))
        break
    }
    if err := scanner.Err(); err != nil {
        panic(err.Error())
    }
    fmt.Println(nEdges)
    return nEdges
}

func loadEdges(filename string) []Edge {
    file, err := os.Open(filename)
    if err != nil {
        panic(err.Error())
    }
    defer file.Close()

    scanner := bufio.NewScanner(file)
    nEdges := countEdges(scanner)
    edges := make([]Edge, 0, nEdges)
    offset, err := file.Seek(0, os.SEEK_SET)
    if err != nil || offset != 0 {
        panic(err.Error())
    }

    var sep byte = '\t'
    scanner = bufio.NewScanner(file)
    for scanner.Scan() {
        line := scanner.Bytes()
        if len(line) > 0 && line[0] == '#' {
            continue
        }
        i := bytes.IndexByte(line, sep)
        if i = len(line) {
            sep = ','
            i = bytes.IndexByte(line, sep)
            if i = len(line) {
                err := errors.New(""Invalid line format: "" + string(line))
                panic(err.Error())
            }
        }
        u, err := ParseUint(line[:i], 10, 32)
        if err != nil {
            panic(err.Error())
        }
        v, err := ParseUint(line[i+1:], 10, 32)
        if err != nil {
            panic(err.Error())
        }
        if u > v {
            u, v = v, u
        }
        edges = append(edges, Edge{uint32(u), uint32(v)})
    }
    if err := scanner.Err(); err != nil {
        panic(err.Error())
    }

    if len(edges) <= 1 {
        return edges
    }
    sort.Sort(ByKey(edges))
    j := 0
    i := j + 1
    for ; i < len(edges); i, j = i+1, j+1 {
        if edges[i] == edges[j] {
            break
        }
    }
    for ; i < len(edges); i++ {
        if edges[i] != edges[j] {
            j++
            edges[j] = edges[i]
        }
    }
    edges = edges[:j+1]
    return edges
}

func main() {
    if len(os.Args) <= 1 {
        err := errors.New(""Missing file name"")
        panic(err.Error())
    }
    filename := os.Args[1]
    fmt.Println(filename)
    edges := loadEdges(filename)

    var ms runtime.MemStats
    runtime.ReadMemStats(&ms)
    fmt.Println(ms.Alloc, ms.TotalAlloc, ms.Sys, ms.Mallocs, ms.Frees)
    fmt.Println(len(edges), cap(edges))
    for i, e := range edges {
        fmt.Println(e)
        if i >= 10 {
            break
        }
    }
}

// bytconv from strconv

// Return the first number n such that n*base >= 1<<64.
func cutoff64(base int) uint64 {
    if base < 2 {
        return 0
    }
    return (1<<64-1)/uint64(base) + 1
}

// ParseUint is like ParseInt but for unsigned numbers.
func ParseUint(s []byte, base int, bitSize int) (n uint64, err error) {
    var cutoff, maxVal uint64

    if bitSize == 0 {
        bitSize = int(strconv.IntSize)
    }

    s0 := s
    switch {
    case len(s) < 1:
        err = strconv.ErrSyntax
        goto Error

    case 2 <= base && base <= 36:
        // valid base; nothing to do

    case base == 0:
        // Look for octal, hex prefix.
        switch {
        case s[0] == '0' && len(s) > 1 && (s[1] == 'x' || s[1] == 'X'):
            base = 16
            s = s[2:]
            if len(s) < 1 {
                err = strconv.ErrSyntax
                goto Error
            }
        case s[0] == '0':
            base = 8
        default:
            base = 10
        }

    default:
        err = errors.New(""invalid base "" + strconv.Itoa(base))
        goto Error
    }

    n = 0
    cutoff = cutoff64(base)
    maxVal = 1<<uint(bitSize) - 1

    for i := 0; i < len(s); i++ {
        var v byte
        d := s[i]
        switch {
        case '0' <= d && d <= '9':
            v = d - '0'
        case 'a' <= d && d <= 'z':
            v = d - 'a' + 10
        case 'A' <= d && d <= 'Z':
            v = d - 'A' + 10
        default:
            n = 0
            err = strconv.ErrSyntax
            goto Error
        }
        if int(v) >= base {
            n = 0
            err = strconv.ErrSyntax
            goto Error
        }

        if n >= cutoff {
            // n*base overflows
            n = 1<<64 - 1
            err = strconv.ErrRange
            goto Error
        }
        n *= uint64(base)

        n1 := n + uint64(v)
        if n1  maxVal {
            // n+v overflows
            n = 1<<64 - 1
            err = strconv.ErrRange
            goto Error
        }
        n = n1
    }

    return n, nil

Error:
    return n, &strconv.NumError{""ParseUint"", string(s0), err}
}","['package', 'main', 'import', '(', '""bufio""', '""bytes""', '""errors""', '""fmt""', '""os""', '""runtime""', '""sort""', '""strconv""', ')', 'type', 'Edge', 'struct', '{', 'U', ',', 'V', 'uint32', '}', 'func', '(', 'e', 'Edge', ')', 'String', '()', 'string', '{', 'return', 'fmt', '.', 'Sprintf', '(', '""%d,%d""', ',', 'e', '.', 'U', ',', 'e', '.', 'V', ')', '}', 'type', 'ByKey', '[]', 'Edge', 'func', '(', 'a', 'ByKey', ')', 'Len', '()', 'int', '{', 'return', 'len', '(', 'a', ')', '}', 'func', '(', 'a', 'ByKey', ')', 'Swap', '(', 'i', ',', 'j', 'int', ')', '{', 'a', '[', 'i', '],', 'a', '[', 'j', ']', '=', 'a', '[', 'j', '],', 'a', '[', 'i', ']', '}', 'func', '(', 'a', 'ByKey', ')', 'Less', '(', 'i', ',', 'j', 'int', ')', 'bool', '{', 'if', 'a', '[', 'i', '].', 'U', '<', 'a', '[', 'j', '].', 'U', '{', 'return', 'true', '}', 'if', 'a', '[', 'i', '].', 'U', '==', 'a', '[', 'j', '].', 'U', '&&', 'a', '[', 'i', '].', 'V', '<', 'a', '[', 'j', '].', 'V', '{', 'return', 'true', '}', 'return', 'false', '}', 'func', 'countEdges', '(', 'scanner', '*', 'bufio', '.', 'Scanner', ')', 'int', '{', 'var', 'nNodes', ',', 'nEdges', 'int', 'for', 'scanner', '.', 'Scan', '()', '{', 'line', ':=', 'scanner', '.', 'Bytes', '()', 'if', '!(', 'len', '(', 'line', ')', '>', '0', '&&', 'line', '[', '0', ']', '==', ')', '{', 'nEdges', '++', 'continue', '}', 'n', ',', 'err', ':=', 'fmt', '.', 'Sscanf', '(', 'string', '(', 'line', '),', '""# Nodes: %d Edges: %d""', ',', '&', 'nNodes', ',', '&', 'nEdges', ')', 'if', 'err', '!=', 'nil', '||', 'n', '!=', '2', '{', 'n', ',', 'err', '=', 'fmt', '.', 'Sscanf', '(', 'string', '(', 'line', '),', '""# %d,%d""', ',', '&', 'nNodes', ',', '&', 'nEdges', ')', 'if', 'err', '!=', 'nil', '||', 'n', '!=', '2', '{', 'continue', '}', '}', 'fmt', '.', 'Println', '(', 'string', '(', 'line', '))', 'break', '}', 'if', 'err', ':=', 'scanner', '.', 'Err', '();', 'err', '!=', 'nil', '{', 'panic', '(', 'err', '.', 'Error', '())', '}', 'fmt', '.', 'Println', '(', 'nEdges', ')', 'return', 'nEdges', '}', 'func', 'loadEdges', '(', 'filename', 'string', ')', '[]', 'Edge', '{', 'file', ',', 'err', ':=', 'os', '.', 'Open', '(', 'filename', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', '.', 'Error', '())', '}', 'defer', 'file', '.', 'Close', '()', 'scanner', ':=', 'bufio', '.', 'NewScanner', '(', 'file', ')', 'nEdges', ':=', 'countEdges', '(', 'scanner', ')', 'edges', ':=', 'make', '([]', 'Edge', ',', '0', ',', 'nEdges', ')', 'offset', ',', 'err', ':=', 'file', '.', 'Seek', '(', '0', ',', 'os', '.', 'SEEK_SET', ')', 'if', 'err', '!=', 'nil', '||', 'offset', '!=', '0', '{', 'panic', '(', 'err', '.', 'Error', '())', '}', 'var', 'sep', 'byte', '=', 't', 'scanner', '=', 'bufio', '.', 'NewScanner', '(', 'file', ')', 'for', 'scanner', '.', 'Scan', '()', '{', 'line', ':=', 'scanner', '.', 'Bytes', '()', 'if', 'len', '(', 'line', ')', '>', '0', '&&', 'line', '[', '0', ']', '==', '{', 'continue', '}', 'i', ':=', 'bytes', '.', 'IndexByte', '(', 'line', ',', 'sep', ')', 'if', 'i', '=', 'len', '(', 'line', ')', '{', 'sep', '=', ',', 'i', '=', 'bytes', '.', 'IndexByte', '(', 'line', ',', 'sep', ')', 'if', 'i', '=', 'len', '(', 'line', ')', '{', 'err', ':=', 'errors', '.', 'New', '(', '""Invalid line format: ""', '+', 'string', '(', 'line', '))', 'panic', '(', 'err', '.', 'Error', '())', '}', '}', 'u', ',', 'err', ':=', 'ParseUint', '(', 'line', '[:', 'i', '],', '10', ',', '32', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', '.', 'Error', '())', '}', 'v', ',', 'err', ':=', 'ParseUint', '(', 'line', '[', 'i', '+', '1', ':],', '10', ',', '32', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', '.', 'Error', '())', '}', 'if', 'u', '>', 'v', '{', 'u', ',', 'v', '=', 'v', ',', 'u', '}', 'edges', '=', 'append', '(', 'edges', ',', 'Edge', '{', 'uint32', '(', 'u', '),', 'uint32', '(', 'v', ')})', '}', 'if', 'err', ':=', 'scanner', '.', 'Err', '();', 'err', '!=', 'nil', '{', 'panic', '(', 'err', '.', 'Error', '())', '}', 'if', 'len', '(', 'edges', ')', '<=', '1', '{', 'return', 'edges', '}', 'sort', '.', 'Sort', '(', 'ByKey', '(', 'edges', '))', 'j', ':=', '0', 'i', ':=', 'j', '+', '1', 'for', ';', 'i', '<', 'len', '(', 'edges', ');', 'i', ',', 'j', '=', 'i', '+', '1', ',', 'j', '+', '1', '{', 'if', 'edges', '[', 'i', ']', '==', 'edges', '[', 'j', ']', '{', 'break', '}', '}', 'for', ';', 'i', '<', 'len', '(', 'edges', ');', 'i', '++', '{', 'if', 'edges', '[', 'i', ']', '!=', 'edges', '[', 'j', ']', '{', 'j', '++', 'edges', '[', 'j', ']', '=', 'edges', '[', 'i', ']', '}', '}', 'edges', '=', 'edges', '[:', 'j', '+', '1', ']', 'return', 'edges', '}', 'func', 'main', '()', '{', 'if', 'len', '(', 'os', '.', 'Args', ')', '<=', '1', '{', 'err', ':=', 'errors', '.', 'New', '(', '""Missing file name""', ')', 'panic', '(', 'err', '.', 'Error', '())', '}', 'filename', ':=', 'os', '.', 'Args', '[', '1', ']', 'fmt', '.', 'Println', '(', 'filename', ')', 'edges', ':=', 'loadEdges', '(', 'filename', ')', 'var', 'ms', 'runtime', '.', 'MemStats', 'runtime', '.', 'ReadMemStats', '(&', 'ms', ')', 'fmt', '.', 'Println', '(', 'ms', '.', 'Alloc', ',', 'ms', '.', 'TotalAlloc', ',', 'ms', '.', 'Sys', ',', 'ms', '.', 'Mallocs', ',', 'ms', '.', 'Frees', ')', 'fmt', '.', 'Println', '(', 'len', '(', 'edges', '),', 'cap', '(', 'edges', '))', 'for', 'i', ',', 'e', ':=', 'range', 'edges', '{', 'fmt', '.', 'Println', '(', 'e', ')', 'if', 'i', '>=', '10', '{', 'break', '}', '}', '}', '// bytconv from strconv', '// Return the first number n such that n*base >= 1<<64.', 'func', 'cutoff64', '(', 'base', 'int', ')', 'uint64', '{', 'if', 'base', '<', '2', '{', 'return', '0', '}', 'return', '(', '1', '<<', '64', '-', '1', ')', 'uint64', '(', 'base', ')', '+', '1', '}', '// ParseUint is like ParseInt but for unsigned numbers.', 'func', 'ParseUint', '(', 's', '[]', 'byte', ',', 'base', 'int', ',', 'bitSize', 'int', ')', '(', 'n', 'uint64', ',', 'err', 'error', ')', '{', 'var', 'cutoff', ',', 'maxVal', 'uint64', 'if', 'bitSize', '==', '0', '{', 'bitSize', '=', 'int', '(', 'strconv', '.', 'IntSize', ')', '}', 's0', ':=', 's', 'switch', '{', 'case', 'len', '(', 's', ')', '<', '1', ':', 'err', '=', 'strconv', '.', 'ErrSyntax', 'go', 'to', 'Error', 'case', '2', '<=', 'base', '&&', 'base', '<=', '36', ':', '// valid base; nothing to do', 'case', 'base', '==', '0', ':', '// Look for octal, hex prefix.', 'switch', '{', 'case', 's', '[', '0', ']', '==', '0', '&&', 'len', '(', 's', ')', '>', '1', '&&', '(', 's', '[', '1', ']', '==', 'x', '||', 's', '[', '1', ']', '==', 'X', '):', 'base', '=', '16', 's', '=', 's', '[', '2', ':]', 'if', 'len', '(', 's', ')', '<', '1', '{', 'err', '=', 'strconv', '.', 'ErrSyntax', 'go', 'to', 'Error', '}', 'case', 's', '[', '0', ']', '==', '0', ':', 'base', '=', '8', 'default', ':', 'base', '=', '10', '}', 'default', ':', 'err', '=', 'errors', '.', 'New', '(', '""invalid base ""', '+', 'strconv', '.', 'Itoa', '(', 'base', '))', 'go', 'to', 'Error', '}', 'n', '=', '0', 'cutoff', '=', 'cutoff64', '(', 'base', ')', 'maxVal', '=', '1', '<<', 'uint', '(', 'bitSize', ')', '-', '1', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 's', ');', 'i', '++', '{', 'var', 'v', 'byte', 'd', ':=', 's', '[', 'i', ']', 'switch', '{', 'case', '0', '<=', 'd', '&&', 'd', '<=', '9', ':', 'v', '=', 'd', '-', '0', 'case', 'a', '<=', 'd', '&&', 'd', '<=', 'z', ':', 'v', '=', 'd', '-', 'a', '+', '10', 'case', 'A', '<=', 'd', '&&', 'd', '<=', 'Z', ':', 'v', '=', 'd', '-', 'A', '+', '10', 'default', ':', 'n', '=', '0', 'err', '=', 'strconv', '.', 'ErrSyntax', 'go', 'to', 'Error', '}', 'if', 'int', '(', 'v', ')', '>=', 'base', '{', 'n', '=', '0', 'err', '=', 'strconv', '.', 'ErrSyntax', 'go', 'to', 'Error', '}', 'if', 'n', '>=', 'cutoff', '{', '// n*base overflows', 'n', '=', '1', '<<', '64', '-', '1', 'err', '=', 'strconv', '.', 'ErrRange', 'go', 'to', 'Error', '}', 'n', '*=', 'uint64', '(', 'base', ')', 'n1', ':=', 'n', '+', 'uint64', '(', 'v', ')', 'if', 'n1', 'maxVal', '{', '// n+v overflows', 'n', '=', '1', '<<', '64', '-', '1', 'err', '=', 'strconv', '.', 'ErrRange', 'go', 'to', 'Error', '}', 'n', '=', 'n1', '}', 'return', 'n', ',', 'nil', 'Error', ':', 'return', 'n', ',', '&', 'strconv', '.', 'NumError', '{', '""ParseUint""', ',', 'string', '(', 's0', '),', 'err', '}', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'operator', 'operator', 'comment', 'bytconv', 'from', 'strconv', 'comment', 'Return', 'the', 'first', 'number', 'n', 'such', 'that', 'n*base', '>', '=', '1', '<', '<', '64', '.', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'decimal_literal', 'operator', 'keyword', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'comment', 'ParseUint', 'is', 'like', 'ParseInt', 'but', 'for', 'unsigned', 'numbers', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'identifier', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'valid', 'base', ';', 'nothing', 'to', 'do', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'Look', 'for', 'octal', ',', 'hex', 'prefix', '.', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'keyword', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'keyword', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'n*base', 'overflows', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'comment', 'n+v', 'overflows', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",26353365
63,"type appHandler func(http.ResponseWriter, *http.Request, context.Context) *appError

func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        if e := fn(w, r, nil); e != nil { // e is *appError, not os.Error.
                http.Error(w, e.Message, e.Code)
        }
}
","['type', 'appHandler', 'func', '(', 'http', '.', 'ResponseWriter', ',', '*', 'http', '.', 'Request', ',', 'context', '.', 'Context', ')', '*', 'appError', 'func', '(', 'fn', 'appHandler', ')', 'ServeHTTP', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'if', 'e', ':=', 'fn', '(', 'w', ',', 'r', ',', 'nil', ');', 'e', '!=', 'nil', '{', '// e is *appError, not os.Error.', 'http', '.', 'Error', '(', 'w', ',', 'e', '.', 'Message', ',', 'e', '.', 'Code', ')', '}', '}']","['keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'e', 'is', '*appError', ',', 'not', 'os.Error', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator']",26754076
64,"type authHandler func(http.ResponseWriter, *http.Request, context.Context) *appError

func (fn authHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {           
    // setup authentication here                                                    
    uid := 1                                                                        

    // setup the context the way you want                                           
    parent := context.TODO()                                                        
    ctx := context.WithValue(parent, userIdKey, uid)                                
    if e := fn(w, r, ctx); e != nil { // e is *appError, not os.Error.              
        http.Error(w, e.Message, e.Code)                                            
    }                                                                               
}","['type', 'authHandler', 'func', '(', 'http', '.', 'ResponseWriter', ',', '*', 'http', '.', 'Request', ',', 'context', '.', 'Context', ')', '*', 'appError', 'func', '(', 'fn', 'authHandler', ')', 'ServeHTTP', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', '// setup authentication here                                                    ', 'uid', ':=', '1', '// setup the context the way you want                                           ', 'parent', ':=', 'context', '.', 'TODO', '()', 'ctx', ':=', 'context', '.', 'WithValue', '(', 'parent', ',', 'userIdKey', ',', 'uid', ')', 'if', 'e', ':=', 'fn', '(', 'w', ',', 'r', ',', 'ctx', ');', 'e', '!=', 'nil', '{', '// e is *appError, not os.Error.              ', 'http', '.', 'Error', '(', 'w', ',', 'e', '.', 'Message', ',', 'e', '.', 'Code', ')', '}', '}']","['keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'setup', 'authentication', 'here', 'identifier', 'operator', 'decimal_literal', 'comment', 'setup', 'the', 'context', 'the', 'way', 'you', 'want', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'e', 'is', '*appError', ',', 'not', 'os.Error', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator']",26754076
65,"func init() {                                                                         
    http.Handle(""/view"", appHandler(viewRecord))      // don't require authentication 
    http.Handle(""/viewAuth"", authHandler(viewRecord)) // require authentication       
}                                                                                     
","['func', 'init', '()', '{', 'http', '.', 'Handle', '(', '""/view""', ',', 'appHandler', '(', 'viewRecord', '))', ""// don't require authentication "", 'http', '.', 'Handle', '(', '""/viewAuth""', ',', 'authHandler', '(', 'viewRecord', '))', '// require authentication       ', '}']","['keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'do', ""n't"", 'require', 'authentication', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'require', 'authentication', 'operator']",26754076
66,"package main

import (
        ""fmt""
        ""net/http""

        ""code.google.com/p/go.net/context""
)

type appError struct {
        Error   error
        Message string
        Code    int
}

type key int

const userIdKey key = 0

type appHandler func(http.ResponseWriter, *http.Request, context.Context) *appError

func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        if e := fn(w, r, nil); e != nil { // e is *appError, not os.Error.
                http.Error(w, e.Message, e.Code)
        }
}

type authHandler func(http.ResponseWriter, *http.Request, context.Context) *appError

func (fn authHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        // setup authentication here
        uid := 1

        // setup the context the way you want
        parent := context.TODO()
        ctx := context.WithValue(parent, userIdKey, uid)
        if e := fn(w, r, ctx); e != nil { // e is *appError, not os.Error.
                http.Error(w, e.Message, e.Code)
        }
}

func viewRecord(w http.ResponseWriter, r *http.Request, c context.Context) *appError {

        if c == nil {
                fmt.Fprintf(w, ""User are not logged in"")
        } else {
                uid := c.Value(userIdKey)
                fmt.Fprintf(w, ""User logged in with uid: %d"", uid)
        }

        return nil
}

func init() {
        http.Handle(""/view"", appHandler(viewRecord))      // viewRecord is an appHandler function
        http.Handle(""/viewAuth"", authHandler(viewRecord)) // viewRecord is an authHandler function
}

func main() {
        http.ListenAndServe("":8080"", nil)
}","['package', 'main', 'import', '(', '""fmt""', '""net/http""', '""code.google.com/p/go.net/context""', ')', 'type', 'appError', 'struct', '{', 'Error', 'error', 'Message', 'string', 'Code', 'int', '}', 'type', 'key', 'int', 'const', 'userIdKey', 'key', '=', '0', 'type', 'appHandler', 'func', '(', 'http', '.', 'ResponseWriter', ',', '*', 'http', '.', 'Request', ',', 'context', '.', 'Context', ')', '*', 'appError', 'func', '(', 'fn', 'appHandler', ')', 'ServeHTTP', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'if', 'e', ':=', 'fn', '(', 'w', ',', 'r', ',', 'nil', ');', 'e', '!=', 'nil', '{', '// e is *appError, not os.Error.', 'http', '.', 'Error', '(', 'w', ',', 'e', '.', 'Message', ',', 'e', '.', 'Code', ')', '}', '}', 'type', 'authHandler', 'func', '(', 'http', '.', 'ResponseWriter', ',', '*', 'http', '.', 'Request', ',', 'context', '.', 'Context', ')', '*', 'appError', 'func', '(', 'fn', 'authHandler', ')', 'ServeHTTP', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', '// setup authentication here', 'uid', ':=', '1', '// setup the context the way you want', 'parent', ':=', 'context', '.', 'TODO', '()', 'ctx', ':=', 'context', '.', 'WithValue', '(', 'parent', ',', 'userIdKey', ',', 'uid', ')', 'if', 'e', ':=', 'fn', '(', 'w', ',', 'r', ',', 'ctx', ');', 'e', '!=', 'nil', '{', '// e is *appError, not os.Error.', 'http', '.', 'Error', '(', 'w', ',', 'e', '.', 'Message', ',', 'e', '.', 'Code', ')', '}', '}', 'func', 'viewRecord', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ',', 'c', 'context', '.', 'Context', ')', '*', 'appError', '{', 'if', 'c', '==', 'nil', '{', 'fmt', '.', 'Fprintf', '(', 'w', ',', '""User are not logged in""', ')', '}', 'else', '{', 'uid', ':=', 'c', '.', 'Value', '(', 'userIdKey', ')', 'fmt', '.', 'Fprintf', '(', 'w', ',', '""User logged in with uid: %d""', ',', 'uid', ')', '}', 'return', 'nil', '}', 'func', 'init', '()', '{', 'http', '.', 'Handle', '(', '""/view""', ',', 'appHandler', '(', 'viewRecord', '))', '// viewRecord is an appHandler function', 'http', '.', 'Handle', '(', '""/viewAuth""', ',', 'authHandler', '(', 'viewRecord', '))', '// viewRecord is an authHandler function', '}', 'func', 'main', '()', '{', 'http', '.', 'ListenAndServe', '(', '"":8080""', ',', 'nil', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'e', 'is', '*appError', ',', 'not', 'os.Error', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'setup', 'authentication', 'here', 'identifier', 'operator', 'decimal_literal', 'comment', 'setup', 'the', 'context', 'the', 'way', 'you', 'want', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'e', 'is', '*appError', ',', 'not', 'os.Error', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'viewRecord', 'is', 'an', 'appHandler', 'function', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'viewRecord', 'is', 'an', 'authHandler', 'function', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator']",26754076
67,"package main

import (
        ""fmt""
        ""net/http""

        ""github.com/gorilla/context""
)

type appError struct {
        Error   error
        Message string
        Code    int
}

type key int

const userIdKey key = 0

type appHandler func(http.ResponseWriter, *http.Request) *appError

func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        if e := fn(w, r); e != nil { // e is *appError, not os.Error.
                http.Error(w, e.Message, e.Code)
        }
}

type authHandler func(http.ResponseWriter, *http.Request) *appError

func (fn authHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        // setup authentication here
        uid := 1

        context.Set(r, userIdKey, uid)
        if e := fn(w, r); e != nil { // e is *appError, not os.Error.
                http.Error(w, e.Message, e.Code)
        }
}

func viewRecord(w http.ResponseWriter, r *http.Request) *appError {

        if uid, ok := context.GetOk(r, userIdKey); !ok {
                fmt.Fprintf(w, ""User are not logged in"")
        } else {
                fmt.Fprintf(w, ""User logged in with uid: %d"", uid)
        }

        return nil
}

func init() {
        http.Handle(""/view"", appHandler(viewRecord))      // don't require authentication
        http.Handle(""/viewAuth"", authHandler(viewRecord)) // require authentication
}

func main() {
        http.ListenAndServe("":8080"", nil)
}","['package', 'main', 'import', '(', '""fmt""', '""net/http""', '""github.com/gorilla/context""', ')', 'type', 'appError', 'struct', '{', 'Error', 'error', 'Message', 'string', 'Code', 'int', '}', 'type', 'key', 'int', 'const', 'userIdKey', 'key', '=', '0', 'type', 'appHandler', 'func', '(', 'http', '.', 'ResponseWriter', ',', '*', 'http', '.', 'Request', ')', '*', 'appError', 'func', '(', 'fn', 'appHandler', ')', 'ServeHTTP', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'if', 'e', ':=', 'fn', '(', 'w', ',', 'r', ');', 'e', '!=', 'nil', '{', '// e is *appError, not os.Error.', 'http', '.', 'Error', '(', 'w', ',', 'e', '.', 'Message', ',', 'e', '.', 'Code', ')', '}', '}', 'type', 'authHandler', 'func', '(', 'http', '.', 'ResponseWriter', ',', '*', 'http', '.', 'Request', ')', '*', 'appError', 'func', '(', 'fn', 'authHandler', ')', 'ServeHTTP', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', '// setup authentication here', 'uid', ':=', '1', 'context', '.', 'Set', '(', 'r', ',', 'userIdKey', ',', 'uid', ')', 'if', 'e', ':=', 'fn', '(', 'w', ',', 'r', ');', 'e', '!=', 'nil', '{', '// e is *appError, not os.Error.', 'http', '.', 'Error', '(', 'w', ',', 'e', '.', 'Message', ',', 'e', '.', 'Code', ')', '}', '}', 'func', 'viewRecord', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '*', 'appError', '{', 'if', 'uid', ',', 'ok', ':=', 'context', '.', 'GetOk', '(', 'r', ',', 'userIdKey', ');', '!', 'ok', '{', 'fmt', '.', 'Fprintf', '(', 'w', ',', '""User are not logged in""', ')', '}', 'else', '{', 'fmt', '.', 'Fprintf', '(', 'w', ',', '""User logged in with uid: %d""', ',', 'uid', ')', '}', 'return', 'nil', '}', 'func', 'init', '()', '{', 'http', '.', 'Handle', '(', '""/view""', ',', 'appHandler', '(', 'viewRecord', '))', ""// don't require authentication"", 'http', '.', 'Handle', '(', '""/viewAuth""', ',', 'authHandler', '(', 'viewRecord', '))', '// require authentication', '}', 'func', 'main', '()', '{', 'http', '.', 'ListenAndServe', '(', '"":8080""', ',', 'nil', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'e', 'is', '*appError', ',', 'not', 'os.Error', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'setup', 'authentication', 'here', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'e', 'is', '*appError', ',', 'not', 'os.Error', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'do', ""n't"", 'require', 'authentication', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'require', 'authentication', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator']",26754076
68,"func AuthHandler(h appHandler) appHandler {                                   
    return func(w http.ResponseWriter, r *http.Request) *appError {
        // setup authentication here                                          
        uid := 1                                                              

        context.Set(r, userIdKey, uid)                                        
        return h(w, r)                                                        
    }                                                                        
}  

func init() {                                                                                    
    http.Handle(""/view"", appHandler(viewRecord))                  // don't require authentication
    http.Handle(""/viewAuth"", appHandler(AuthHandler(viewRecord))) // require authentication      
}","['func', 'AuthHandler', '(', 'h', 'appHandler', ')', 'appHandler', '{', 'return', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '*', 'appError', '{', '// setup authentication here                                          ', 'uid', ':=', '1', 'context', '.', 'Set', '(', 'r', ',', 'userIdKey', ',', 'uid', ')', 'return', 'h', '(', 'w', ',', 'r', ')', '}', '}', 'func', 'init', '()', '{', 'http', '.', 'Handle', '(', '""/view""', ',', 'appHandler', '(', 'viewRecord', '))', ""// don't require authentication"", 'http', '.', 'Handle', '(', '""/viewAuth""', ',', 'appHandler', '(', 'AuthHandler', '(', 'viewRecord', ')))', '// require authentication      ', '}']","['keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'comment', 'setup', 'authentication', 'here', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'do', ""n't"", 'require', 'authentication', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'require', 'authentication', 'operator']",26754076
69,"// Make a bridge between dstNet which is
// usually behind NAT and srcNet which is usually a client
// which wants to route the traffic though the NAT machine.
package main

import (
    log ""github.com/golang/glog""
    ""io""
    ""net""
)

// listen on the dstNet so that we can
// create a connection with the NAT client
var dstNet *net.TCPAddr = &net.TCPAddr{IP: net.ParseIP(""0.0.0.0""), Port: 9000}

// listen on srcNet so that we can get traffic
// to forward to dstNet
var srcNet *net.TCPAddr = &net.TCPAddr{IP: net.ParseIP(""0.0.0.0""), Port: 9001}

var errCh = make(chan error, 1)

// make a channel to send the reverse connections
var lrCh = make(chan *net.TCPConn, 1)
var lrNewCh = make(chan int, 1)

func listenDst() {
    // Listen on the dstNet
    lr, err := net.ListenTCP(""tcp"", dstNet)
    if err != nil {
        log.Error(err)
        errCh <- err
        return
    }
    // accept the connection
    for {
        lrConn, err := lr.AcceptTCP()
        if err != nil {
                log.Error(err)
                //errCh <- err
                //return
        }
        status := <-lrNewCh
            log.Errorf(""status request is %v"", status)
            if status == 1{
                log.Errorf(""we close and restart the listener and the connection"")
                if err =  lrConn.Close(); err !=nil{
                    log.Error(err)
                }
                if err =  lr.Close(); err !=nil{
                    log.Error(err)
                }
                    lr, err = net.ListenTCP(""tcp"", dstNet)
                    if err != nil {
                        log.Error(err)
                        errCh <- err
                        return
                    }
                lrConn, err = lr.AcceptTCP()
                if err !=nil{
                    log.Error(err)
                    errCh <- err
                }
            }else{
                log.Errorf(""new connection on its way"")
                lrCh <- lrConn
            }
    //  default:
            // log.Errorf(""accepting new connections"")


    }

}

func main() {

    go func() {
        for err := range errCh {
            if err != nil {
                panic(err)
            }
        }
    }()
    // listen for the nat server
    go listenDst()

    // listen for clients to connect
    l, err := net.ListenTCP(""tcp"", srcNet)
    if err != nil {
        log.Error(err)
        panic(err)
    }
    // accept the connection
    for {
        conn, err := l.AcceptTCP()
        if err != nil {
            log.Error(err)
            panic(err)
        }
        // serve the connection
        go func(conn *net.TCPConn) {
            defer conn.Close()
            lrNewCh <- 0
            dst := <-lrCh
            defer dst.Close()
            proxy(dst, conn)
        }(conn)

    }
}

func proxy(srvConn, cliConn *net.TCPConn) {
    // channels to wait on the close event for each connection
    serverClosed := make(chan struct{}, 1)
    clientClosed := make(chan struct{}, 1)

    go broker(srvConn, cliConn, clientClosed)
    go broker(cliConn, srvConn, serverClosed)

    // wait for one half of the proxy to exit, then trigger a shutdown of the
    // other half by calling CloseRead(). This will break the read loop in the
    // broker and allow us to fully close the connection cleanly without a
    // ""use of closed network connection"" error.
    var waitFor chan struct{}
    select {
    case <-clientClosed:
        // the client closed first and any more packets from the server aren't
        // useful, so we can optionally SetLinger(0) here to recycle the port
        // faster.
        srvConn.SetLinger(0)
        srvConn.CloseRead()
        waitFor = serverClosed
    case <-serverClosed:
        cliConn.CloseRead()
        waitFor = clientClosed
    }

    // Wait for the other connection to close.
    // This ""waitFor"" pattern isn't required, but gives us a way to track the
    // connection and ensure all copies terminate correctly; we can trigger
    // stats on entry and deferred exit of this function.
    <-waitFor
}

// This does the actual data transfer.
// The broker only closes the Read side.
func broker(dst, src net.Conn, srcClosed chan struct{}) {
    // We can handle errors in a finer-grained manner by inlining io.Copy (it's
    // simple, and we drop the ReaderFrom or WriterTo checks for
    // net.Conn->net.Conn transfers, which aren't needed). This would also let
    // us adjust buffersize.
    n, err := io.Copy(dst, src)
    log.Errorf("" %v bytes copied"", n)
    if err != nil {
        log.Errorf(""Copy error: %s"", err)
        // errCh <- err
    }
    if err := src.Close(); err != nil {
        log.Errorf(""Close error: %s"", err)
        errCh <- err
    }
    if n == 0 {
        lrNewCh <- 1
    }
    srcClosed <- struct{}{}

}","['// Make a bridge between dstNet which is', '// usually behind NAT and srcNet which is usually a client', '// which wants to route the traffic though the NAT machine.', 'package', 'main', 'import', '(', 'log', '""github.com/golang/glog""', '""io""', '""net""', ')', '// listen on the dstNet so that we can', '// create a connection with the NAT client', 'var', 'dstNet', '*', 'net', '.', 'TCPAddr', '=', '&', 'net', '.', 'TCPAddr', '{', 'IP', ':', 'net', '.', 'ParseIP', '(', '""0.0.0.0""', '),', 'Port', ':', '9000', '}', '// listen on srcNet so that we can get traffic', '// to forward to dstNet', 'var', 'srcNet', '*', 'net', '.', 'TCPAddr', '=', '&', 'net', '.', 'TCPAddr', '{', 'IP', ':', 'net', '.', 'ParseIP', '(', '""0.0.0.0""', '),', 'Port', ':', '9001', '}', 'var', 'errCh', '=', 'make', '(', 'chan', 'error', ',', '1', ')', '// make a channel to send the reverse connections', 'var', 'lrCh', '=', 'make', '(', 'chan', '*', 'net', '.', 'TCPConn', ',', '1', ')', 'var', 'lrNewCh', '=', 'make', '(', 'chan', 'int', ',', '1', ')', 'func', 'listenDst', '()', '{', '// Listen on the dstNet', 'lr', ',', 'err', ':=', 'net', '.', 'ListenTCP', '(', '""tcp""', ',', 'dstNet', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Error', '(', 'err', ')', 'errCh', '<-', 'err', 'return', '}', '// accept the connection', 'for', '{', 'lrConn', ',', 'err', ':=', 'lr', '.', 'AcceptTCP', '()', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Error', '(', 'err', ')', '//errCh <- err', '//return', '}', 'status', ':=', '<-', 'lrNewCh', 'log', '.', 'Errorf', '(', '""status request is %v""', ',', 'status', ')', 'if', 'status', '==', '1', '{', 'log', '.', 'Errorf', '(', '""we close and restart the listener and the connection""', ')', 'if', 'err', '=', 'lrConn', '.', 'Close', '();', 'err', '!=', 'nil', '{', 'log', '.', 'Error', '(', 'err', ')', '}', 'if', 'err', '=', 'lr', '.', 'Close', '();', 'err', '!=', 'nil', '{', 'log', '.', 'Error', '(', 'err', ')', '}', 'lr', ',', 'err', '=', 'net', '.', 'ListenTCP', '(', '""tcp""', ',', 'dstNet', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Error', '(', 'err', ')', 'errCh', '<-', 'err', 'return', '}', 'lrConn', ',', 'err', '=', 'lr', '.', 'AcceptTCP', '()', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Error', '(', 'err', ')', 'errCh', '<-', 'err', '}', '}', 'else', '{', 'log', '.', 'Errorf', '(', '""new connection on its way""', ')', 'lrCh', '<-', 'lrConn', '}', '//  default:', '// log.Errorf(""accepting new connections"")', '}', '}', 'func', 'main', '()', '{', 'go', 'func', '()', '{', 'for', 'err', ':=', 'range', 'errCh', '{', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '}', '}()', '// listen for the nat server', 'go', 'listenDst', '()', '// listen for clients to connect', 'l', ',', 'err', ':=', 'net', '.', 'ListenTCP', '(', '""tcp""', ',', 'srcNet', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Error', '(', 'err', ')', 'panic', '(', 'err', ')', '}', '// accept the connection', 'for', '{', 'conn', ',', 'err', ':=', 'l', '.', 'AcceptTCP', '()', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Error', '(', 'err', ')', 'panic', '(', 'err', ')', '}', '// serve the connection', 'go', 'func', '(', 'conn', '*', 'net', '.', 'TCPConn', ')', '{', 'defer', 'conn', '.', 'Close', '()', 'lrNewCh', '<-', '0', 'dst', ':=', '<-', 'lrCh', 'defer', 'dst', '.', 'Close', '()', 'proxy', '(', 'dst', ',', 'conn', ')', '}(', 'conn', ')', '}', '}', 'func', 'proxy', '(', 'srvConn', ',', 'cliConn', '*', 'net', '.', 'TCPConn', ')', '{', '// channels to wait on the close event for each connection', 'serverClosed', ':=', 'make', '(', 'chan', 'struct', '{},', '1', ')', 'clientClosed', ':=', 'make', '(', 'chan', 'struct', '{},', '1', ')', 'go', 'broker', '(', 'srvConn', ',', 'cliConn', ',', 'clientClosed', ')', 'go', 'broker', '(', 'cliConn', ',', 'srvConn', ',', 'serverClosed', ')', '// wait for one half of the proxy to exit, then trigger a shutdown of the', '// other half by calling CloseRead(). This will break the read loop in the', '// broker and allow us to fully close the connection cleanly without a', '// ""use of closed network connection"" error.', 'var', 'waitFor', 'chan', 'struct', '{}', 'select', '{', 'case', '<-', 'clientClosed', ':', ""// the client closed first and any more packets from the server aren't"", '// useful, so we can optionally SetLinger(0) here to recycle the port', '// faster.', 'srvConn', '.', 'SetLinger', '(', '0', ')', 'srvConn', '.', 'CloseRead', '()', 'waitFor', '=', 'serverClosed', 'case', '<-', 'serverClosed', ':', 'cliConn', '.', 'CloseRead', '()', 'waitFor', '=', 'clientClosed', '}', '// Wait for the other connection to close.', '// This ""waitFor"" pattern isn\'t required, but gives us a way to track the', '// connection and ensure all copies terminate correctly; we can trigger', '// stats on entry and deferred exit of this function.', '<-', 'waitFor', '}', '// This does the actual data transfer.', '// The broker only closes the Read side.', 'func', 'broker', '(', 'dst', ',', 'src', 'net', '.', 'Conn', ',', 'srcClosed', 'chan', 'struct', '{})', '{', ""// We can handle errors in a finer-grained manner by inlining io.Copy (it's"", '// simple, and we drop the ReaderFrom or WriterTo checks for', ""// net.Conn->net.Conn transfers, which aren't needed). This would also let"", '// us adjust buffersize.', 'n', ',', 'err', ':=', 'io', '.', 'Copy', '(', 'dst', ',', 'src', ')', 'log', '.', 'Errorf', '(', '"" %v bytes copied""', ',', 'n', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Errorf', '(', '""Copy error: %s""', ',', 'err', ')', '// errCh <- err', '}', 'if', 'err', ':=', 'src', '.', 'Close', '();', 'err', '!=', 'nil', '{', 'log', '.', 'Errorf', '(', '""Close error: %s""', ',', 'err', ')', 'errCh', '<-', 'err', '}', 'if', 'n', '==', '0', '{', 'lrNewCh', '<-', '1', '}', 'srcClosed', '<-', 'struct', '{}{}', '}']","['comment', 'Make', 'a', 'bridge', 'between', 'dstNet', 'which', 'is', 'comment', 'usually', 'behind', 'NAT', 'and', 'srcNet', 'which', 'is', 'usually', 'a', 'client', 'comment', 'which', 'wants', 'to', 'route', 'the', 'traffic', 'though', 'the', 'NAT', 'machine', '.', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'string_literal', 'string_literal', 'string_literal', 'operator', 'comment', 'listen', 'on', 'the', 'dstNet', 'so', 'that', 'we', 'can', 'comment', 'create', 'a', 'connection', 'with', 'the', 'NAT', 'client', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'listen', 'on', 'srcNet', 'so', 'that', 'we', 'can', 'get', 'traffic', 'comment', 'to', 'forward', 'to', 'dstNet', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'make', 'a', 'channel', 'to', 'send', 'the', 'reverse', 'connections', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'Listen', 'on', 'the', 'dstNet', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'comment', 'accept', 'the', 'connection', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'errCh', '<', '-', 'err', 'comment', 'return', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'default', ':', 'comment', 'log.Errorf', '(', '``', 'accepting', 'new', 'connections', ""''"", ')', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'comment', 'listen', 'for', 'the', 'nat', 'server', 'keyword', 'identifier', 'operator', 'comment', 'listen', 'for', 'clients', 'to', 'connect', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'accept', 'the', 'connection', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'serve', 'the', 'connection', 'keyword', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'channels', 'to', 'wait', 'on', 'the', 'close', 'event', 'for', 'each', 'connection', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'wait', 'for', 'one', 'half', 'of', 'the', 'proxy', 'to', 'exit', ',', 'then', 'trigger', 'a', 'shutdown', 'of', 'the', 'comment', 'other', 'half', 'by', 'calling', 'CloseRead', '(', ')', '.', 'This', 'will', 'break', 'the', 'read', 'loop', 'in', 'the', 'comment', 'broker', 'and', 'allow', 'us', 'to', 'fully', 'close', 'the', 'connection', 'cleanly', 'without', 'a', 'comment', '``', 'use', 'of', 'closed', 'network', 'connection', ""''"", 'error', '.', 'keyword', 'identifier', 'keyword', 'keyword', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'comment', 'the', 'client', 'closed', 'first', 'and', 'any', 'more', 'packets', 'from', 'the', 'server', 'are', ""n't"", 'comment', 'useful', ',', 'so', 'we', 'can', 'optionally', 'SetLinger', '(', '0', ')', 'here', 'to', 'recycle', 'the', 'port', 'comment', 'faster', '.', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Wait', 'for', 'the', 'other', 'connection', 'to', 'close', '.', 'comment', 'This', '``', 'waitFor', ""''"", 'pattern', 'is', ""n't"", 'required', ',', 'but', 'gives', 'us', 'a', 'way', 'to', 'track', 'the', 'comment', 'connection', 'and', 'ensure', 'all', 'copies', 'terminate', 'correctly', ';', 'we', 'can', 'trigger', 'comment', 'stats', 'on', 'entry', 'and', 'deferred', 'exit', 'of', 'this', 'function', '.', 'operator', 'identifier', 'operator', 'comment', 'This', 'does', 'the', 'actual', 'data', 'transfer', '.', 'comment', 'The', 'broker', 'only', 'closes', 'the', 'Read', 'side', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'keyword', 'operator', 'operator', 'comment', 'We', 'can', 'handle', 'errors', 'in', 'a', 'finer-grained', 'manner', 'by', 'inlining', 'io.Copy', '(', 'it', ""'s"", 'comment', 'simple', ',', 'and', 'we', 'drop', 'the', 'ReaderFrom', 'or', 'WriterTo', 'checks', 'for', 'comment', 'net.Conn-', '>', 'net.Conn', 'transfers', ',', 'which', 'are', ""n't"", 'needed', ')', '.', 'This', 'would', 'also', 'let', 'comment', 'us', 'adjust', 'buffersize', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'comment', 'errCh', '<', '-', 'err', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator']",27449673
70,"func IndexVehicle(client *elastic.Client, vehicle Vehicle) (bool, error) {
    // See if it exists already
    fetch, err := client.Get().
        Index(vehicleIndex).
        Type(""vehicle"").
        Id(vehicle.Id).
        Do()
    if err != nil || fetch.Found {
        return false, err
    }

    vehicleName := fmt.Sprintf(""%s %s (%s) %s"", vehicle.Make, vehicle.Model, vehicle.Model_year, vehicle.Primary_fuel)

    suggest := elastic.NewSuggestField()
    suggest.Input(vehicle.Make, vehicle.Model, vehicle.Primary_fuel, vehicle.Model_year).
        Output(vehicleName).
        Payload(vehicle)

    // Go forth and save
    put, err := client.Index().
        Index(vehicleIndex).
        Type(""vehicle"").
        Id(vehicle.Id).
        Debug(true).Pretty(true).
        BodyJson(indexBody{Name: vehicleName, Suggest: suggest}).
        Do()
    if err != nil {
        return false, err
    }
    return put.Created, nil
}
","['func', 'IndexVehicle', '(', 'client', '*', 'elastic', '.', 'Client', ',', 'vehicle', 'Vehicle', ')', '(', 'bool', ',', 'error', ')', '{', '// See if it exists already', 'fetch', ',', 'err', ':=', 'client', '.', 'Get', '().', 'Index', '(', 'vehicleIndex', ').', 'Type', '(', '""vehicle""', ').', 'Id', '(', 'vehicle', '.', 'Id', ').', 'Do', '()', 'if', 'err', '!=', 'nil', '||', 'fetch', '.', 'Found', '{', 'return', 'false', ',', 'err', '}', 'vehicleName', ':=', 'fmt', '.', 'Sprintf', '(', '""%s %s (%s) %s""', ',', 'vehicle', '.', 'Make', ',', 'vehicle', '.', 'Model', ',', 'vehicle', '.', 'Model_year', ',', 'vehicle', '.', 'Primary_fuel', ')', 'suggest', ':=', 'elastic', '.', 'NewSuggestField', '()', 'suggest', '.', 'Input', '(', 'vehicle', '.', 'Make', ',', 'vehicle', '.', 'Model', ',', 'vehicle', '.', 'Primary_fuel', ',', 'vehicle', '.', 'Model_year', ').', 'Output', '(', 'vehicleName', ').', 'Payload', '(', 'vehicle', ')', '// Go forth and save', 'put', ',', 'err', ':=', 'client', '.', 'Index', '().', 'Index', '(', 'vehicleIndex', ').', 'Type', '(', '""vehicle""', ').', 'Id', '(', 'vehicle', '.', 'Id', ').', 'Debug', '(', 'true', ').', 'Pretty', '(', 'true', ').', 'BodyJson', '(', 'indexBody', '{', 'Name', ':', 'vehicleName', ',', 'Suggest', ':', 'suggest', '}).', 'Do', '()', 'if', 'err', '!=', 'nil', '{', 'return', 'false', ',', 'err', '}', 'return', 'put', '.', 'Created', ',', 'nil', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'See', 'if', 'it', 'exists', 'already', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Go', 'forth', 'and', 'save', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']",27491738
71,"func ResetVehicleIndex(client *elastic.Client) (err error) {

    if _, err = client.DeleteIndex(vehicleIndex).Do(); err != nil {
        return
    }
    if _, err = EnsureVehicleIndex(client); err != nil {
        return
    }

    // TODO: This is awful. Switch to ""wait for green"" when elastic client supports it
    time.Sleep(time.Second * 1)

    return nil
}","['func', 'ResetVehicleIndex', '(', 'client', '*', 'elastic', '.', 'Client', ')', '(', 'err', 'error', ')', '{', 'if', '_', ',', 'err', '=', 'client', '.', 'DeleteIndex', '(', 'vehicleIndex', ').', 'Do', '();', 'err', '!=', 'nil', '{', 'return', '}', 'if', '_', ',', 'err', '=', 'EnsureVehicleIndex', '(', 'client', ');', 'err', '!=', 'nil', '{', 'return', '}', '// TODO: This is awful. Switch to ""wait for green"" when elastic client supports it', 'time', '.', 'Sleep', '(', 'time', '.', 'Second', '*', '1', ')', 'return', 'nil', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'TODO', ':', 'This', 'is', 'awful', '.', 'Switch', 'to', '``', 'wait', 'for', 'green', ""''"", 'when', 'elastic', 'client', 'supports', 'it', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator']",27491738
72,"package main

import (
    ""sanguo/base/log""
    ""fmt""
    ""runtime""
    ""math/rand""
    ""time""
    ""net""
    ""os""
)

type GameServer struct {
    Host   string
}


func (server *GameServer) Start() {
    // load system data
    log.Debug(""/*************************SREVER START********************************/"")

    tcpAddr, err := net.ResolveTCPAddr(""tcp4"", server.Host)
    if err != nil {
        log.Error(err.Error())
        os.Exit(-1)
    }
    go func(){
        for{
            select {
            case <-time.After(30*time.Second):
                LookUp(""read memstats"")
            }
        }
    }()
    listener, err := net.ListenTCP(""tcp"", tcpAddr)
    if err != nil {
        log.Error(err.Error())
        os.Exit(-1)
    }
    log.Debug(""/*************************SERVER SUCC********************************/"")
    for {
        conn, err := listener.AcceptTCP()
        if err != nil {
            continue
        }
        log.Debug(""Accept a new connection "", conn.RemoteAddr())
        go handleClient(conn)
    }
}

func handleClient(conn *net.TCPConn) {
    sess := NewSession(conn)
    sess.Start()
}

func main() {
    rand.Seed(time.Now().Unix())

    runtime.GOMAXPROCS(runtime.NumCPU())

    log.SetLevel(0)

    filew := log.NewFileWriter(""log"", true)
    err := filew.StartLogger()
    if err != nil {
        fmt.Println(""Failed start log"",err)
        return
    }

    var server GameServer
    server.Host = ""127.0.0.1:9999""
    server.Start()
}","['package', 'main', 'import', '(', '""sanguo/base/log""', '""fmt""', '""runtime""', '""math/rand""', '""time""', '""net""', '""os""', ')', 'type', 'GameServer', 'struct', '{', 'Host', 'string', '}', 'func', '(', 'server', '*', 'GameServer', ')', 'Start', '()', '{', '// load system data', 'log', '.', 'Debug', '(', '""/*************************SREVER START********************************/""', ')', 'tcpAddr', ',', 'err', ':=', 'net', '.', 'ResolveTCPAddr', '(', '""tcp4""', ',', 'server', '.', 'Host', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Error', '(', 'err', '.', 'Error', '())', 'os', '.', 'Exit', '(-', '1', ')', '}', 'go', 'func', '(){', 'for', '{', 'select', '{', 'case', '<-', 'time', '.', 'After', '(', '30', '*', 'time', '.', 'Second', '):', 'LookUp', '(', '""read memstats""', ')', '}', '}', '}()', 'listener', ',', 'err', ':=', 'net', '.', 'ListenTCP', '(', '""tcp""', ',', 'tcpAddr', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Error', '(', 'err', '.', 'Error', '())', 'os', '.', 'Exit', '(-', '1', ')', '}', 'log', '.', 'Debug', '(', '""/*************************SERVER SUCC********************************/""', ')', 'for', '{', 'conn', ',', 'err', ':=', 'listener', '.', 'AcceptTCP', '()', 'if', 'err', '!=', 'nil', '{', 'continue', '}', 'log', '.', 'Debug', '(', '""Accept a new connection ""', ',', 'conn', '.', 'RemoteAddr', '())', 'go', 'handleClient', '(', 'conn', ')', '}', '}', 'func', 'handleClient', '(', 'conn', '*', 'net', '.', 'TCPConn', ')', '{', 'sess', ':=', 'NewSession', '(', 'conn', ')', 'sess', '.', 'Start', '()', '}', 'func', 'main', '()', '{', 'rand', '.', 'Seed', '(', 'time', '.', 'Now', '().', 'Unix', '())', 'runtime', '.', 'GOMAXPROCS', '(', 'runtime', '.', 'NumCPU', '())', 'log', '.', 'SetLevel', '(', '0', ')', 'filew', ':=', 'log', '.', 'NewFileWriter', '(', '""log""', ',', 'true', ')', 'err', ':=', 'filew', '.', 'StartLogger', '()', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', '""Failed start log""', ',', 'err', ')', 'return', '}', 'var', 'server', 'GameServer', 'server', '.', 'Host', '=', '""127.0.0.1:9999""', 'server', '.', 'Start', '()', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'load', 'system', 'data', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'keyword', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'operator']",27600587
73,"package main

import (
    ""io""
    ""encoding/binary""
    ""encoding/json""
    ""github.com/felixge/tcpkeepalive""
    ""net""
    ""sanguo/base/log""
    ""strings""
    ""sync""
    ""time""
)


type Session struct {

    conn *net.TCPConn //the tcp connection from client

    recvChan      chan *bufferedManager.Token //data from client
    closeNotiChan chan bool   //

    ok   bool
    lock sync.Mutex

}


func NewSession(connection *net.TCPConn) (sess *Session) {
    var client Session

    client.conn = connection

    client.recvChan = make(chan []byte, 1024)
    client.closeNotiChan = make(chan bool)
    client.ok = true

    log.Debug(""New Connection"", &client)

    kaConn, err := tcpkeepalive.EnableKeepAlive(connection)
    if err != nil {
        log.Debug(""EnableKeepAlive err "", err)
    } else {
        kaConn.SetKeepAliveIdle(120 * time.Second)
        kaConn.SetKeepAliveCount(4)
        kaConn.SetKeepAliveInterval(5 * time.Second)
    }
    return &client
}


func (sess *Session) Close() {
    sess.lock.Lock()
    if sess.ok {
        sess.ok = false
        close(sess.closeNotiChan)
        sess.conn.Close()
        log.Trace(""Sess Close Succ"", sess, sess.uid)
    }
    sess.lock.Unlock()
}

func (sess *Session) handleRecv() {
    defer func(){
        if err := recover(); err != nil {
            log.Critical(""Panic"", err)
        }
        log.Trace(""Session Recv Exit"", sess, sess.uid)
        sess.Close()
    }()
    ch := sess.recvChan
    header := make([]byte, 2)
    for {
        /**block until recieve len(header)**/
        n, err := io.ReadFull(sess.conn, header)
        if n == 0 && err == io.EOF {
            //Opposite socket is closed
            log.Warn(""Socket Read EOF And Close"", sess)
            break
        } else if err != nil {
            //Sth wrong with this socket
            log.Warn(""Socket Wrong:"", err)
            break
        }
        size := binary.LittleEndian.Uint16(header) + 4
        data := make([]byte, size)
        n, err = io.ReadFull(sess.conn, t.Data)
        if n == 0 && err == io.EOF {
            log.Warn(""Socket Read EOF And Close"", sess)
            break
        } else if err != nil {
            log.Warn(""Socket Wrong:"", err)
            break
        }
        ch <- data //send data to Client to process
    }
}

func (sess *Session) handleDispatch() {
    defer func(){
        log.Trace(""Session Dispatch Exit"",  sess, sess.uid)
        sess.Close()
    }()
    for {
        select {
        case msg, _ := <-sess.recvChan:
            log.Debug(""msg"", msg)
            sess.SendDirectly(""helloworldhellowor"", 1)

        case <-sess.closeNotiChan:
                return
        }
    }
}

func (sess *Session) Start() {
    defer func() {
        if err := recover(); err != nil {
            log.Critical(""Panic"", err)
        }
    }()
    go sess.handleRecv()

    sess.handleDispatch()

    close(sess.recvChan)
    log.Warn(""Session Start Exit"", sess, sess.uid)
}


func (sess *Session) SendDirectly(back interface{}, op int) bool {
    back_json, err := json.Marshal(back)
    if err != nil {
        log.Error(""Can't encode json message "", err, back)
        return false
    }
    log.Debug(sess.uid, ""OUT cmd:"", op, string(back_json))
    _, err = sess.conn.Write(back_json)
    if err != nil {
        log.Error(""send fail"", err)
        return false
    }
    return true
}","['package', 'main', 'import', '(', '""io""', '""encoding/binary""', '""encoding/json""', '""github.com/felixge/tcpkeepalive""', '""net""', '""sanguo/base/log""', '""strings""', '""sync""', '""time""', ')', 'type', 'Session', 'struct', '{', 'conn', '*', 'net', '.', 'TCPConn', '//the tcp connection from client', 'recvChan', 'chan', '*', 'bufferedManager', '.', 'Token', '//data from client', 'closeNotiChan', 'chan', 'bool', '//', 'ok', 'bool', 'lock', 'sync', '.', 'Mutex', '}', 'func', 'NewSession', '(', 'connection', '*', 'net', '.', 'TCPConn', ')', '(', 'sess', '*', 'Session', ')', '{', 'var', 'client', 'Session', 'client', '.', 'conn', '=', 'connection', 'client', '.', 'recvChan', '=', 'make', '(', 'chan', '[]', 'byte', ',', '1024', ')', 'client', '.', 'closeNotiChan', '=', 'make', '(', 'chan', 'bool', ')', 'client', '.', 'ok', '=', 'true', 'log', '.', 'Debug', '(', '""New Connection""', ',', '&', 'client', ')', 'kaConn', ',', 'err', ':=', 'tcpkeepalive', '.', 'EnableKeepAlive', '(', 'connection', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Debug', '(', '""EnableKeepAlive err ""', ',', 'err', ')', '}', 'else', '{', 'kaConn', '.', 'SetKeepAliveIdle', '(', '120', '*', 'time', '.', 'Second', ')', 'kaConn', '.', 'SetKeepAliveCount', '(', '4', ')', 'kaConn', '.', 'SetKeepAliveInterval', '(', '5', '*', 'time', '.', 'Second', ')', '}', 'return', '&', 'client', '}', 'func', '(', 'sess', '*', 'Session', ')', 'Close', '()', '{', 'sess', '.', 'lock', '.', 'Lock', '()', 'if', 'sess', '.', 'ok', '{', 'sess', '.', 'ok', '=', 'false', 'close', '(', 'sess', '.', 'closeNotiChan', ')', 'sess', '.', 'conn', '.', 'Close', '()', 'log', '.', 'Trace', '(', '""Sess Close Succ""', ',', 'sess', ',', 'sess', '.', 'uid', ')', '}', 'sess', '.', 'lock', '.', 'Unlock', '()', '}', 'func', '(', 'sess', '*', 'Session', ')', 'handleRecv', '()', '{', 'defer', 'func', '(){', 'if', 'err', ':=', 'recover', '();', 'err', '!=', 'nil', '{', 'log', '.', 'Critical', '(', '""Panic""', ',', 'err', ')', '}', 'log', '.', 'Trace', '(', '""Session Recv Exit""', ',', 'sess', ',', 'sess', '.', 'uid', ')', 'sess', '.', 'Close', '()', '}()', 'ch', ':=', 'sess', '.', 'recvChan', 'header', ':=', 'make', '([]', 'byte', ',', '2', ')', 'for', '{', '**', 'block', 'until', 'recieve', 'len', '(', 'header', ')**', 'n', ',', 'err', ':=', 'io', '.', 'ReadFull', '(', 'sess', '.', 'conn', ',', 'header', ')', 'if', 'n', '==', '0', '&&', 'err', '==', 'io', '.', 'EOF', '{', '//Opposite socket is closed', 'log', '.', 'Warn', '(', '""Socket Read EOF And Close""', ',', 'sess', ')', 'break', '}', 'else', 'if', 'err', '!=', 'nil', '{', '//Sth wrong with this socket', 'log', '.', 'Warn', '(', '""Socket Wrong:""', ',', 'err', ')', 'break', '}', 'size', ':=', 'binary', '.', 'LittleEndian', '.', 'Uint16', '(', 'header', ')', '+', '4', 'data', ':=', 'make', '([]', 'byte', ',', 'size', ')', 'n', ',', 'err', '=', 'io', '.', 'ReadFull', '(', 'sess', '.', 'conn', ',', 't', '.', 'Data', ')', 'if', 'n', '==', '0', '&&', 'err', '==', 'io', '.', 'EOF', '{', 'log', '.', 'Warn', '(', '""Socket Read EOF And Close""', ',', 'sess', ')', 'break', '}', 'else', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Warn', '(', '""Socket Wrong:""', ',', 'err', ')', 'break', '}', 'ch', '<-', 'data', '//send data to Client to process', '}', '}', 'func', '(', 'sess', '*', 'Session', ')', 'handleDispatch', '()', '{', 'defer', 'func', '(){', 'log', '.', 'Trace', '(', '""Session Dispatch Exit""', ',', 'sess', ',', 'sess', '.', 'uid', ')', 'sess', '.', 'Close', '()', '}()', 'for', '{', 'select', '{', 'case', 'msg', ',', '_', ':=', '<-', 'sess', '.', 'recvChan', ':', 'log', '.', 'Debug', '(', '""msg""', ',', 'msg', ')', 'sess', '.', 'SendDirectly', '(', '""helloworldhellowor""', ',', '1', ')', 'case', '<-', 'sess', '.', 'closeNotiChan', ':', 'return', '}', '}', '}', 'func', '(', 'sess', '*', 'Session', ')', 'Start', '()', '{', 'defer', 'func', '()', '{', 'if', 'err', ':=', 'recover', '();', 'err', '!=', 'nil', '{', 'log', '.', 'Critical', '(', '""Panic""', ',', 'err', ')', '}', '}()', 'go', 'sess', '.', 'handleRecv', '()', 'sess', '.', 'handleDispatch', '()', 'close', '(', 'sess', '.', 'recvChan', ')', 'log', '.', 'Warn', '(', '""Session Start Exit""', ',', 'sess', ',', 'sess', '.', 'uid', ')', '}', 'func', '(', 'sess', '*', 'Session', ')', 'SendDirectly', '(', 'back', 'interface', '{},', 'op', 'int', ')', 'bool', '{', 'back_json', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'back', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Error', '(', '""Can\'t encode json message ""', ',', 'err', ',', 'back', ')', 'return', 'false', '}', 'log', '.', 'Debug', '(', 'sess', '.', 'uid', ',', '""OUT cmd:""', ',', 'op', ',', 'string', '(', 'back_json', '))', '_', ',', 'err', '=', 'sess', '.', 'conn', '.', 'Write', '(', 'back_json', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Error', '(', '""send fail""', ',', 'err', ')', 'return', 'false', '}', 'return', 'true', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'the', 'tcp', 'connection', 'from', 'client', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'data', 'from', 'client', 'identifier', 'keyword', 'identifier', 'comment', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Opposite', 'socket', 'is', 'closed', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Sth', 'wrong', 'with', 'this', 'socket', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'send', 'data', 'to', 'Client', 'to', 'process', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator']",27600587
74,"package main                                                                                                                                                                                                                                                                                                                                                          import (                                                                                                                                                                               ""encoding/json""                                                                                                                                                                    ""fmt""                                                                                                                                                                              ""os""                                                                                                                                                                                                                                                                                                                                                                  ""github.com/guelfey/go.dbus""                                                                                                                                                       ""github.com/guelfey/go.dbus/introspect""                                                                                                                                        
)                                                                                                                                                                                  

func main() {                                                                                                                                                                      
    os.Setenv(""OMXPLAYER_DBUS_ADDR"", ""/tmp/omxplayerdbus.pi"")                                                                                                                      
    os.Setenv(""OMXPLAYER_DBUS_PID"", ""/tmp/omxplayerdbus.pi.pid"")                                                                                                                   
    conn, err := dbus.SessionBus()                                                                                                                                                 
    if err != nil {                                                                                                                                                                
        panic(err)                                                                                                                                                                 
    }                                                                                                                                                                              
    node, err := introspect.Call(conn.Object(""org.mpris.MediaPlayer2.omxplayer"", ""/org/mpris/MediaPlayer2""))                                                                       
    if err != nil {                                                                                                                                                                
        fmt.Println(err)                                                                                                                                                           
    }                                                                                                                                                                              
    data, _ := json.MarshalIndent(node, """", ""    "")                                                                                                                                

    var s []string                                                                                                                                                                 
    err = conn.BusObject().Call(""org.freedesktop.DBus.ListNames"", 0).Store(&s)                                                                                                     
    if err != nil {                                                                                                                                                                
        fmt.Fprintln(os.Stderr, ""Failed to get list of owned names:"", err)                                                                                                         
        os.Exit(1)                                                                                                                                                                 
    }                                                                                                                                                                              

    fmt.Println(""Currently owned names on the session bus:"")                                                                                                                       
    for _, v := range s {                                                                                                                                                          
        fmt.Println(v)                                                                                                                                                             
    }                                                                                                                                                                              

    os.Stdout.Write(data)                                                                                                                                                          
}","['package', 'main', 'import', '(', '""encoding/json""                                                                                                                                                                    ""fmt""                                                                                                                                                                              ""os""                                                                                                                                                                                                                                                                                                                                                                  ""github.com/guelfey/go.dbus""                                                                                                                                                       ""github.com/guelfey/go.dbus/introspect""', ')', 'func', 'main', '()', '{', 'os', '.', 'Setenv', '(', '""OMXPLAYER_DBUS_ADDR"", ""/tmp/omxplayerdbus.pi""', ')', 'os', '.', 'Setenv', '(', '""OMXPLAYER_DBUS_PID"", ""/tmp/omxplayerdbus.pi.pid""', ')', 'conn', ',', 'err', ':=', 'dbus', '.', 'SessionBus', '()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'node', ',', 'err', ':=', 'introspect', '.', 'Call', '(', 'conn', '.', 'Object', '(', '""org.mpris.MediaPlayer2.omxplayer"", ""/org/mpris/MediaPlayer2""', '))', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', '}', 'data', ',', '_', ':=', 'json', '.', 'MarshalIndent', '(', 'node', ',', '"""", ""    ""', ')', 'var', 's', '[]', 'string', 'err', '=', 'conn', '.', 'BusObject', '().', 'Call', '(', '""org.freedesktop.DBus.ListNames""', ',', '0', ').', 'Store', '(&', 's', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Fprintln', '(', 'os', '.', 'Stderr', ',', '""Failed to get list of owned names:""', ',', 'err', ')', 'os', '.', 'Exit', '(', '1', ')', '}', 'fmt', '.', 'Println', '(', '""Currently owned names on the session bus:""', ')', 'for', '_', ',', 'v', ':=', 'range', 's', '{', 'fmt', '.', 'Println', '(', 'v', ')', '}', 'os', '.', 'Stdout', '.', 'Write', '(', 'data', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",28030045
75,"func New(res http.ResponseWriter, req *http.Request, next http.HandlerFunc) {

    if err := process(security.ServeHttp(res, req), session.ServeHttp(res, req)); err != nil {
        res.WriteHeader(http.StatusInternalServerError)
        return
    }

    log.Println(""End of process middlewares"")
    next(res, req)

}

// Process all middlewares
func process(chErrs ...<-chan error) error {

    for _, chErr := range chErrs {

        // Will abort the loop, when error occurs
        if err := <-chErr; err != nil {
            return err
        }

    }
    return nil
}
","['func', 'New', '(', 'res', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ',', 'next', 'http', '.', 'HandlerFunc', ')', '{', 'if', 'err', ':=', 'process', '(', 'security', '.', 'ServeHttp', '(', 'res', ',', 'req', '),', 'session', '.', 'ServeHttp', '(', 'res', ',', 'req', '));', 'err', '!=', 'nil', '{', 'res', '.', 'WriteHeader', '(', 'http', '.', 'StatusInternalServerError', ')', 'return', '}', 'log', '.', 'Println', '(', '""End of process middlewares""', ')', 'next', '(', 'res', ',', 'req', ')', '}', '// Process all middlewares', 'func', 'process', '(', 'chErrs', '...<-', 'chan', 'error', ')', 'error', '{', 'for', '_', ',', 'chErr', ':=', 'range', 'chErrs', '{', '// Will abort the loop, when error occurs', 'if', 'err', ':=', '<-', 'chErr', ';', 'err', '!=', 'nil', '{', 'return', 'err', '}', '}', 'return', 'nil', '}']","['keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Process', 'all', 'middlewares', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'comment', 'Will', 'abort', 'the', 'loop', ',', 'when', 'error', 'occurs', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator']",28301402
76,"func Config() *negroni.Negroni {
    n := negroni.Classic()
    n.Use(negroni.HandlerFunc(middlewares.New))
    n.UseHandler(routes.Set())
    return n

}
","['func', 'Config', '()', '*', 'negroni', '.', 'Negroni', '{', 'n', ':=', 'negroni', '.', 'Classic', '()', 'n', '.', 'Use', '(', 'negroni', '.', 'HandlerFunc', '(', 'middlewares', '.', 'New', '))', 'n', '.', 'UseHandler', '(', 'routes', '.', 'Set', '())', 'return', 'n', '}']","['keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator']",28301402
77,"// +build windows

/*
Package wmi provides a WQL interface for WMI on Windows.

Example code to print names of running processes:

    type Win32_Process struct {
        Name string
    }

    func main() {
        var dst []Win32_Process
        q := wmi.CreateQuery(&dst, """")
        err := wmi.Query(q, &dst)
        if err != nil {
            log.Fatal(err)
        }
        for i, v := range dst {
            println(i, v.Name)
        }
    }

*/
package wmi

import (
    ""bytes""
    ""errors""
    ""fmt""
    ""log""
    ""os""
    ""reflect""
    ""runtime""
    ""strconv""
    ""strings""
    ""sync""
    ""time""

    ""github.com/mattn/go-ole""
    ""github.com/mattn/go-ole/oleutil""
)

var l = log.New(os.Stdout, """", log.LstdFlags)

var (
    ErrInvalidEntityType = errors.New(""wmi: invalid entity type"")
    lock                 sync.Mutex
)

// QueryNamespace invokes Query with the given namespace on the local machine.
func QueryNamespace(query string, dst interface{}, namespace string) error {
    return Query(query, dst, nil, namespace)
}

// Query runs the WQL query and appends the values to dst.
//
// dst must have type *[]S or *[]*S, for some struct type S. Fields selected in
// the query must have the same name in dst. Supported types are all signed and
// unsigned integers, time.Time, string, bool, or a pointer to one of those.
// Array types are not supported.
//
// By default, the local machine and default namespace are used. These can be
// changed using connectServerArgs. See
// http://msdn.microsoft.com/en-us/library/aa393720.aspx for details.
func Query(query string, dst interface{}, connectServerArgs ...interface{}) error {
    dv := reflect.ValueOf(dst)
    if dv.Kind() != reflect.Ptr || dv.IsNil() {
        return ErrInvalidEntityType
    }
    dv = dv.Elem()
    mat, elemType := checkMultiArg(dv)
    if mat == multiArgTypeInvalid {
        return ErrInvalidEntityType
    }

    lock.Lock()
    defer lock.Unlock()
    runtime.LockOSThread()
    defer runtime.UnlockOSThread()

    err := ole.CoInitializeEx(0, ole.COINIT_MULTITHREADED)
    if err != nil {
        oleerr := err.(*ole.OleError)
        // S_FALSE           = 0x00000001 // CoInitializeEx was already called on this thread
        if oleerr.Code() != ole.S_OK && oleerr.Code() != 0x00000001 {
            return err
        }
    } else {
        // Only invoke CoUninitialize if the thread was not initizlied before.
        // This will allow other go packages based on go-ole play along
        // with this library.
        defer ole.CoUninitialize()
    }

    unknown, err := oleutil.CreateObject(""WbemScripting.SWbemLocator"")
    if err != nil {
        return err
    }
    defer unknown.Release()

    wmi, err := unknown.QueryInterface(ole.IID_IDispatch)
    if err != nil {
        return err
    }
    defer wmi.Release()

    // service is a SWbemServices
    serviceRaw, err := oleutil.CallMethod(wmi, ""ConnectServer"", connectServerArgs...)
    if err != nil {
        return err
    }
    service := serviceRaw.ToIDispatch()
    defer serviceRaw.Clear()

    // result is a SWBemObjectSet
    resultRaw, err := oleutil.CallMethod(service, ""ExecQuery"", query)
    if err != nil {
        return err
    }
    result := resultRaw.ToIDispatch()
    defer resultRaw.Clear()

    count, err := oleInt64(result, ""Count"")
    if err != nil {
        return err
    }

    // Initialize a slice with Count capacity
    dv.Set(reflect.MakeSlice(dv.Type(), 0, int(count)))

    var errFieldMismatch error
    for i := int64(0); i < count; i++ {
        err := func() error {
            // item is a SWbemObject, but really a Win32_Process
            itemRaw, err := oleutil.CallMethod(result, ""ItemIndex"", i)
            if err != nil {
                return err
            }
            item := itemRaw.ToIDispatch()
            defer itemRaw.Clear()

            ev := reflect.New(elemType)
            if err = loadEntity(ev.Interface(), item); err != nil {
                if _, ok := err.(*ErrFieldMismatch); ok {
                    // We continue loading entities even in the face of field mismatch errors.
                    // If we encounter any other error, that other error is returned. Otherwise,
                    // an ErrFieldMismatch is returned.
                    errFieldMismatch = err
                } else {
                    return err
                }
            }
            if mat != multiArgTypeStructPtr {
                ev = ev.Elem()
            }
            dv.Set(reflect.Append(dv, ev))
            return nil
        }()
        if err != nil {
            return err
        }
    }
    return errFieldMismatch
}

// ErrFieldMismatch is returned when a field is to be loaded into a different
// type than the one it was stored from, or when a field is missing or
// unexported in the destination struct.
// StructType is the type of the struct pointed to by the destination argument.
type ErrFieldMismatch struct {
    StructType reflect.Type
    FieldName  string
    Reason     string
}

func (e *ErrFieldMismatch) Error() string {
    return fmt.Sprintf(""wmi: cannot load field %q into a %q: %s"",
        e.FieldName, e.StructType, e.Reason)
}

var timeType = reflect.TypeOf(time.Time{})

// loadEntity loads a SWbemObject into a struct pointer.
func loadEntity(dst interface{}, src *ole.IDispatch) (errFieldMismatch error) {
    v := reflect.ValueOf(dst).Elem()
    for i := 0; i < v.NumField(); i++ {
        f := v.Field(i)
        isPtr := f.Kind() == reflect.Ptr
        if isPtr {
            ptr := reflect.New(f.Type().Elem())
            f.Set(ptr)
            f = f.Elem()
        }
        n := v.Type().Field(i).Name
        if !f.CanSet() {
            return &ErrFieldMismatch{
                StructType: f.Type(),
                FieldName:  n,
                Reason:     ""CanSet() is false"",
            }
        }
        prop, err := oleutil.GetProperty(src, n)
        if err != nil {
            errFieldMismatch = &ErrFieldMismatch{
                StructType: f.Type(),
                FieldName:  n,
                Reason:     ""no such struct field"",
            }
            continue
        }
        defer prop.Clear()

        switch val := prop.Value().(type) {
        case int, int64:
            var v int64
            switch val := val.(type) {
            case int:
                v = int64(val)
            case int64:
                v = val
            default:
                panic(""unexpected type"")
            }
            switch f.Kind() {
            case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
                f.SetInt(v)
            case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
                f.SetUint(uint64(v))
            default:
                return &ErrFieldMismatch{
                    StructType: f.Type(),
                    FieldName:  n,
                    Reason:     ""not an integer class"",
                }
            }
        case string:
            iv, err := strconv.ParseInt(val, 10, 64)
            switch f.Kind() {
            case reflect.String:
                f.SetString(val)
            case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
                if err != nil {
                    return err
                }
                f.SetInt(iv)
            case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
                if err != nil {
                    return err
                }
                f.SetUint(uint64(iv))
            case reflect.Struct:
                switch f.Type() {
                case timeType:
                    if len(val) == 25 {
                        mins, err := strconv.Atoi(val[22:])
                        if err != nil {
                            return err
                        }
                        val = val[:22] + fmt.Sprintf(""%02d%02d"", mins/60, mins%60)
                    }
                    t, err := time.Parse(""20060102150405.000000-0700"", val)
                    if err != nil {
                        return err
                    }
                    f.Set(reflect.ValueOf(t))
                }
            }
        case bool:
            switch f.Kind() {
            case reflect.Bool:
                f.SetBool(val)
            default:
                return &ErrFieldMismatch{
                    StructType: f.Type(),
                    FieldName:  n,
                    Reason:     ""not a bool"",
                }
            }
        default:
            typeof := reflect.TypeOf(val)
            if isPtr && typeof == nil {
                break
            }
            return &ErrFieldMismatch{
                StructType: f.Type(),
                FieldName:  n,
                Reason:     fmt.Sprintf(""unsupported type (%T)"", val),
            }
        }
    }
    return errFieldMismatch
}

type multiArgType int

const (
    multiArgTypeInvalid multiArgType = iota
    multiArgTypeStruct
    multiArgTypeStructPtr
)

// checkMultiArg checks that v has type []S, []*S for some struct type S.
//
// It returns what category the slice's elements are, and the reflect.Type
// that represents S.
func checkMultiArg(v reflect.Value) (m multiArgType, elemType reflect.Type) {
    if v.Kind() != reflect.Slice {
        return multiArgTypeInvalid, nil
    }
    elemType = v.Type().Elem()
    switch elemType.Kind() {
    case reflect.Struct:
        return multiArgTypeStruct, elemType
    case reflect.Ptr:
        elemType = elemType.Elem()
        if elemType.Kind() == reflect.Struct {
            return multiArgTypeStructPtr, elemType
        }
    }
    return multiArgTypeInvalid, nil
}

func oleInt64(item *ole.IDispatch, prop string) (int64, error) {
    v, err := oleutil.GetProperty(item, prop)
    if err != nil {
        return 0, err
    }
    defer v.Clear()

    i := int64(v.Val)
    return i, nil
}

// CreateQuery returns a WQL query string that queries all columns of src. where
// is an optional string that is appended to the query, to be used with WHERE
// clauses. In such a case, the ""WHERE"" string should appear at the beginning.
func CreateQuery(src interface{}, where string) string {
    var b bytes.Buffer
    b.WriteString(""SELECT "")
    s := reflect.Indirect(reflect.ValueOf(src))
    t := s.Type()
    if s.Kind() == reflect.Slice {
        t = t.Elem()
    }
    if t.Kind() != reflect.Struct {
        return """"
    }
    var fields []string
    for i := 0; i < t.NumField(); i++ {
        fields = append(fields, t.Field(i).Name)
    }
    b.WriteString(strings.Join(fields, "", ""))
    b.WriteString("" FROM "")
    b.WriteString(t.Name())
    b.WriteString("" "" + where)
    return b.String()
}","['// +build windows', '*', 'Package', 'wmi', 'provides', 'a', 'WQL', 'interface', 'for', 'WMI', 'on', 'Windows', '.', 'Example', 'code', 'to', 'print', 'names', 'of', 'running', 'processes', ':', 'type', 'Win32_Process', 'struct', '{', 'Name', 'string', '}', 'func', 'main', '()', '{', 'var', 'dst', '[]', 'Win32_Process', 'q', ':=', 'wmi', '.', 'CreateQuery', '(&', 'dst', ',', '""""', ')', 'err', ':=', 'wmi', '.', 'Query', '(', 'q', ',', '&', 'dst', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'for', 'i', ',', 'v', ':=', 'range', 'dst', '{', 'println', '(', 'i', ',', 'v', '.', 'Name', ')', '}', '}', '*', 'package', 'wmi', 'import', '(', '""bytes""', '""errors""', '""fmt""', '""log""', '""os""', '""reflect""', '""runtime""', '""strconv""', '""strings""', '""sync""', '""time""', '""github.com/mattn/go-ole""', '""github.com/mattn/go-ole/oleutil""', ')', 'var', 'l', '=', 'log', '.', 'New', '(', 'os', '.', 'Stdout', ',', '""""', ',', 'log', '.', 'LstdFlags', ')', 'var', '(', 'ErrInvalidEntityType', '=', 'errors', '.', 'New', '(', '""wmi: invalid entity type""', ')', 'lock', 'sync', '.', 'Mutex', ')', '// QueryNamespace invokes Query with the given namespace on the local machine.', 'func', 'QueryNamespace', '(', 'query', 'string', ',', 'dst', 'interface', '{},', 'namespace', 'string', ')', 'error', '{', 'return', 'Query', '(', 'query', ',', 'dst', ',', 'nil', ',', 'namespace', ')', '}', '// Query runs the WQL query and appends the values to dst.', '//', '// dst must have type *[]S or *[]*S, for some struct type S. Fields selected in', '// the query must have the same name in dst. Supported types are all signed and', '// unsigned integers, time.Time, string, bool, or a pointer to one of those.', '// Array types are not supported.', '//', '// By default, the local machine and default namespace are used. These can be', '// changed using connectServerArgs. See', '// http://msdn.microsoft.com/en-us/library/aa393720.aspx for details.', 'func', 'Query', '(', 'query', 'string', ',', 'dst', 'interface', '{},', 'connectServerArgs', '...', 'interface', '{})', 'error', '{', 'dv', ':=', 'reflect', '.', 'ValueOf', '(', 'dst', ')', 'if', 'dv', '.', 'Kind', '()', '!=', 'reflect', '.', 'Ptr', '||', 'dv', '.', 'IsNil', '()', '{', 'return', 'ErrInvalidEntityType', '}', 'dv', '=', 'dv', '.', 'Elem', '()', 'mat', ',', 'elemType', ':=', 'checkMultiArg', '(', 'dv', ')', 'if', 'mat', '==', 'multiArgTypeInvalid', '{', 'return', 'ErrInvalidEntityType', '}', 'lock', '.', 'Lock', '()', 'defer', 'lock', '.', 'Unlock', '()', 'runtime', '.', 'LockOSThread', '()', 'defer', 'runtime', '.', 'UnlockOSThread', '()', 'err', ':=', 'ole', '.', 'CoInitializeEx', '(', '0', ',', 'ole', '.', 'COINIT_MULTITHREADED', ')', 'if', 'err', '!=', 'nil', '{', 'oleerr', ':=', 'err', '.(*', 'ole', '.', 'OleError', ')', '// S_FALSE           = 0x00000001 // CoInitializeEx was already called on this thread', 'if', 'oleerr', '.', 'Code', '()', '!=', 'ole', '.', 'S_OK', '&&', 'oleerr', '.', 'Code', '()', '!=', '0', 'x00000001', '{', 'return', 'err', '}', '}', 'else', '{', '// Only invoke CoUninitialize if the thread was not initizlied before.', '// This will allow other go packages based on go-ole play along', '// with this library.', 'defer', 'ole', '.', 'CoUninitialize', '()', '}', 'unknown', ',', 'err', ':=', 'oleutil', '.', 'CreateObject', '(', '""WbemScripting.SWbemLocator""', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'defer', 'unknown', '.', 'Release', '()', 'wmi', ',', 'err', ':=', 'unknown', '.', 'QueryInterface', '(', 'ole', '.', 'IID_IDispatch', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'defer', 'wmi', '.', 'Release', '()', '// service is a SWbemServices', 'serviceRaw', ',', 'err', ':=', 'oleutil', '.', 'CallMethod', '(', 'wmi', ',', '""ConnectServer""', ',', 'connectServerArgs', '...)', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'service', ':=', 'serviceRaw', '.', 'ToIDispatch', '()', 'defer', 'serviceRaw', '.', 'Clear', '()', '// result is a SWBemObjectSet', 'resultRaw', ',', 'err', ':=', 'oleutil', '.', 'CallMethod', '(', 'service', ',', '""ExecQuery""', ',', 'query', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'result', ':=', 'resultRaw', '.', 'ToIDispatch', '()', 'defer', 'resultRaw', '.', 'Clear', '()', 'count', ',', 'err', ':=', 'oleInt64', '(', 'result', ',', '""Count""', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', '// Initialize a slice with Count capacity', 'dv', '.', 'Set', '(', 'reflect', '.', 'MakeSlice', '(', 'dv', '.', 'Type', '(),', '0', ',', 'int', '(', 'count', ')))', 'var', 'errFieldMismatch', 'error', 'for', 'i', ':=', 'int64', '(', '0', ');', 'i', '<', 'count', ';', 'i', '++', '{', 'err', ':=', 'func', '()', 'error', '{', '// item is a SWbemObject, but really a Win32_Process', 'itemRaw', ',', 'err', ':=', 'oleutil', '.', 'CallMethod', '(', 'result', ',', '""ItemIndex""', ',', 'i', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'item', ':=', 'itemRaw', '.', 'ToIDispatch', '()', 'defer', 'itemRaw', '.', 'Clear', '()', 'ev', ':=', 'reflect', '.', 'New', '(', 'elemType', ')', 'if', 'err', '=', 'loadEntity', '(', 'ev', '.', 'Interface', '(),', 'item', ');', 'err', '!=', 'nil', '{', 'if', '_', ',', 'ok', ':=', 'err', '.(*', 'ErrFieldMismatch', ');', 'ok', '{', '// We continue loading entities even in the face of field mismatch errors.', '// If we encounter any other error, that other error is returned. Otherwise,', '// an ErrFieldMismatch is returned.', 'errFieldMismatch', '=', 'err', '}', 'else', '{', 'return', 'err', '}', '}', 'if', 'mat', '!=', 'multiArgTypeStructPtr', '{', 'ev', '=', 'ev', '.', 'Elem', '()', '}', 'dv', '.', 'Set', '(', 'reflect', '.', 'Append', '(', 'dv', ',', 'ev', '))', 'return', 'nil', '}()', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', '}', 'return', 'errFieldMismatch', '}', '// ErrFieldMismatch is returned when a field is to be loaded into a different', '// type than the one it was stored from, or when a field is missing or', '// unexported in the destination struct.', '// StructType is the type of the struct pointed to by the destination argument.', 'type', 'ErrFieldMismatch', 'struct', '{', 'StructType', 'reflect', '.', 'Type', 'FieldName', 'string', 'Reason', 'string', '}', 'func', '(', 'e', '*', 'ErrFieldMismatch', ')', 'Error', '()', 'string', '{', 'return', 'fmt', '.', 'Sprintf', '(', '""wmi: cannot load field %q into a %q: %s""', ',', 'e', '.', 'FieldName', ',', 'e', '.', 'StructType', ',', 'e', '.', 'Reason', ')', '}', 'var', 'timeType', '=', 'reflect', '.', 'TypeOf', '(', 'time', '.', 'Time', '{})', '// loadEntity loads a SWbemObject into a struct pointer.', 'func', 'loadEntity', '(', 'dst', 'interface', '{},', 'src', '*', 'ole', '.', 'IDispatch', ')', '(', 'errFieldMismatch', 'error', ')', '{', 'v', ':=', 'reflect', '.', 'ValueOf', '(', 'dst', ').', 'Elem', '()', 'for', 'i', ':=', '0', ';', 'i', '<', 'v', '.', 'NumField', '();', 'i', '++', '{', 'f', ':=', 'v', '.', 'Field', '(', 'i', ')', 'isPtr', ':=', 'f', '.', 'Kind', '()', '==', 'reflect', '.', 'Ptr', 'if', 'isPtr', '{', 'ptr', ':=', 'reflect', '.', 'New', '(', 'f', '.', 'Type', '().', 'Elem', '())', 'f', '.', 'Set', '(', 'ptr', ')', 'f', '=', 'f', '.', 'Elem', '()', '}', 'n', ':=', 'v', '.', 'Type', '().', 'Field', '(', 'i', ').', 'Name', 'if', '!', 'f', '.', 'CanSet', '()', '{', 'return', '&', 'ErrFieldMismatch', '{', 'StructType', ':', 'f', '.', 'Type', '(),', 'FieldName', ':', 'n', ',', 'Reason', ':', '""CanSet() is false""', ',', '}', '}', 'prop', ',', 'err', ':=', 'oleutil', '.', 'GetProperty', '(', 'src', ',', 'n', ')', 'if', 'err', '!=', 'nil', '{', 'errFieldMismatch', '=', '&', 'ErrFieldMismatch', '{', 'StructType', ':', 'f', '.', 'Type', '(),', 'FieldName', ':', 'n', ',', 'Reason', ':', '""no such struct field""', ',', '}', 'continue', '}', 'defer', 'prop', '.', 'Clear', '()', 'switch', 'val', ':=', 'prop', '.', 'Value', '().(', 'type', ')', '{', 'case', 'int', ',', 'int64', ':', 'var', 'v', 'int64', 'switch', 'val', ':=', 'val', '.(', 'type', ')', '{', 'case', 'int', ':', 'v', '=', 'int64', '(', 'val', ')', 'case', 'int64', ':', 'v', '=', 'val', 'default', ':', 'panic', '(', '""unexpected type""', ')', '}', 'switch', 'f', '.', 'Kind', '()', '{', 'case', 'reflect', '.', 'Int', ',', 'reflect', '.', 'Int8', ',', 'reflect', '.', 'Int16', ',', 'reflect', '.', 'Int32', ',', 'reflect', '.', 'Int64', ':', 'f', '.', 'SetInt', '(', 'v', ')', 'case', 'reflect', '.', 'Uint', ',', 'reflect', '.', 'Uint8', ',', 'reflect', '.', 'Uint16', ',', 'reflect', '.', 'Uint32', ',', 'reflect', '.', 'Uint64', ':', 'f', '.', 'SetUint', '(', 'uint64', '(', 'v', '))', 'default', ':', 'return', '&', 'ErrFieldMismatch', '{', 'StructType', ':', 'f', '.', 'Type', '(),', 'FieldName', ':', 'n', ',', 'Reason', ':', '""not an integer class""', ',', '}', '}', 'case', 'string', ':', 'iv', ',', 'err', ':=', 'strconv', '.', 'ParseInt', '(', 'val', ',', '10', ',', '64', ')', 'switch', 'f', '.', 'Kind', '()', '{', 'case', 'reflect', '.', 'String', ':', 'f', '.', 'SetString', '(', 'val', ')', 'case', 'reflect', '.', 'Int', ',', 'reflect', '.', 'Int8', ',', 'reflect', '.', 'Int16', ',', 'reflect', '.', 'Int32', ',', 'reflect', '.', 'Int64', ':', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'f', '.', 'SetInt', '(', 'iv', ')', 'case', 'reflect', '.', 'Uint', ',', 'reflect', '.', 'Uint8', ',', 'reflect', '.', 'Uint16', ',', 'reflect', '.', 'Uint32', ',', 'reflect', '.', 'Uint64', ':', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'f', '.', 'SetUint', '(', 'uint64', '(', 'iv', '))', 'case', 'reflect', '.', 'Struct', ':', 'switch', 'f', '.', 'Type', '()', '{', 'case', 'timeType', ':', 'if', 'len', '(', 'val', ')', '==', '25', '{', 'mins', ',', 'err', ':=', 'strconv', '.', 'Atoi', '(', 'val', '[', '22', ':])', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'val', '=', 'val', '[:', '22', ']', '+', 'fmt', '.', 'Sprintf', '(', '""%02d%02d""', ',', 'mins', '60', ',', 'mins', '60', ')', '}', 't', ',', 'err', ':=', 'time', '.', 'Parse', '(', '""20060102150405.000000-0700""', ',', 'val', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'f', '.', 'Set', '(', 'reflect', '.', 'ValueOf', '(', 't', '))', '}', '}', 'case', 'bool', ':', 'switch', 'f', '.', 'Kind', '()', '{', 'case', 'reflect', '.', 'Bool', ':', 'f', '.', 'SetBool', '(', 'val', ')', 'default', ':', 'return', '&', 'ErrFieldMismatch', '{', 'StructType', ':', 'f', '.', 'Type', '(),', 'FieldName', ':', 'n', ',', 'Reason', ':', '""not a bool""', ',', '}', '}', 'default', ':', 'type', 'of', ':=', 'reflect', '.', 'TypeOf', '(', 'val', ')', 'if', 'isPtr', '&&', 'type', 'of', '==', 'nil', '{', 'break', '}', 'return', '&', 'ErrFieldMismatch', '{', 'StructType', ':', 'f', '.', 'Type', '(),', 'FieldName', ':', 'n', ',', 'Reason', ':', 'fmt', '.', 'Sprintf', '(', '""unsupported type (%T)""', ',', 'val', '),', '}', '}', '}', 'return', 'errFieldMismatch', '}', 'type', 'multiArgType', 'int', 'const', '(', 'multiArgTypeInvalid', 'multiArgType', '=', 'iota', 'multiArgTypeStruct', 'multiArgTypeStructPtr', ')', '// checkMultiArg checks that v has type []S, []*S for some struct type S.', '//', ""// It returns what category the slice's elements are, and the reflect.Type"", '// that represents S.', 'func', 'checkMultiArg', '(', 'v', 'reflect', '.', 'Value', ')', '(', 'm', 'multiArgType', ',', 'elemType', 'reflect', '.', 'Type', ')', '{', 'if', 'v', '.', 'Kind', '()', '!=', 'reflect', '.', 'Slice', '{', 'return', 'multiArgTypeInvalid', ',', 'nil', '}', 'elemType', '=', 'v', '.', 'Type', '().', 'Elem', '()', 'switch', 'elemType', '.', 'Kind', '()', '{', 'case', 'reflect', '.', 'Struct', ':', 'return', 'multiArgTypeStruct', ',', 'elemType', 'case', 'reflect', '.', 'Ptr', ':', 'elemType', '=', 'elemType', '.', 'Elem', '()', 'if', 'elemType', '.', 'Kind', '()', '==', 'reflect', '.', 'Struct', '{', 'return', 'multiArgTypeStructPtr', ',', 'elemType', '}', '}', 'return', 'multiArgTypeInvalid', ',', 'nil', '}', 'func', 'oleInt64', '(', 'item', '*', 'ole', '.', 'IDispatch', ',', 'prop', 'string', ')', '(', 'int64', ',', 'error', ')', '{', 'v', ',', 'err', ':=', 'oleutil', '.', 'GetProperty', '(', 'item', ',', 'prop', ')', 'if', 'err', '!=', 'nil', '{', 'return', '0', ',', 'err', '}', 'defer', 'v', '.', 'Clear', '()', 'i', ':=', 'int64', '(', 'v', '.', 'Val', ')', 'return', 'i', ',', 'nil', '}', '// CreateQuery returns a WQL query string that queries all columns of src. where', '// is an optional string that is appended to the query, to be used with WHERE', '// clauses. In such a case, the ""WHERE"" string should appear at the beginning.', 'func', 'CreateQuery', '(', 'src', 'interface', '{},', 'where', 'string', ')', 'string', '{', 'var', 'b', 'bytes', '.', 'Buffer', 'b', '.', 'WriteString', '(', '""SELECT ""', ')', 's', ':=', 'reflect', '.', 'Indirect', '(', 'reflect', '.', 'ValueOf', '(', 'src', '))', 't', ':=', 's', '.', 'Type', '()', 'if', 's', '.', 'Kind', '()', '==', 'reflect', '.', 'Slice', '{', 't', '=', 't', '.', 'Elem', '()', '}', 'if', 't', '.', 'Kind', '()', '!=', 'reflect', '.', 'Struct', '{', 'return', '""""', '}', 'var', 'fields', '[]', 'string', 'for', 'i', ':=', '0', ';', 'i', '<', 't', '.', 'NumField', '();', 'i', '++', '{', 'fields', '=', 'append', '(', 'fields', ',', 't', '.', 'Field', '(', 'i', ').', 'Name', ')', '}', 'b', '.', 'WriteString', '(', 'strings', '.', 'Join', '(', 'fields', ',', '"", ""', '))', 'b', '.', 'WriteString', '(', '"" FROM ""', ')', 'b', '.', 'WriteString', '(', 't', '.', 'Name', '())', 'b', '.', 'WriteString', '(', '"" ""', '+', 'where', ')', 'return', 'b', '.', 'String', '()', '}']","['comment', '+build', 'windows', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'keyword', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'QueryNamespace', 'invokes', 'Query', 'with', 'the', 'given', 'namespace', 'on', 'the', 'local', 'machine', '.', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Query', 'runs', 'the', 'WQL', 'query', 'and', 'appends', 'the', 'values', 'to', 'dst', '.', 'comment', 'comment', 'dst', 'must', 'have', 'type', '*', '[', ']', 'S', 'or', '*', '[', ']', '*S', ',', 'for', 'some', 'struct', 'type', 'S.', 'Fields', 'selected', 'in', 'comment', 'the', 'query', 'must', 'have', 'the', 'same', 'name', 'in', 'dst', '.', 'Supported', 'types', 'are', 'all', 'signed', 'and', 'comment', 'unsigned', 'integers', ',', 'time.Time', ',', 'string', ',', 'bool', ',', 'or', 'a', 'pointer', 'to', 'one', 'of', 'those', '.', 'comment', 'Array', 'types', 'are', 'not', 'supported', '.', 'comment', 'comment', 'By', 'default', ',', 'the', 'local', 'machine', 'and', 'default', 'namespace', 'are', 'used', '.', 'These', 'can', 'be', 'comment', 'changed', 'using', 'connectServerArgs', '.', 'See', 'comment', 'http', ':', 'msdn.microsoft.com/en-us/library/aa393720.aspx', 'for', 'details', '.', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'S_FALSE', '=', '0x00000001', 'CoInitializeEx', 'was', 'already', 'called', 'on', 'this', 'thread', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'comment', 'Only', 'invoke', 'CoUninitialize', 'if', 'the', 'thread', 'was', 'not', 'initizlied', 'before', '.', 'comment', 'This', 'will', 'allow', 'other', 'go', 'packages', 'based', 'on', 'go-ole', 'play', 'along', 'comment', 'with', 'this', 'library', '.', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'service', 'is', 'a', 'SWbemServices', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'result', 'is', 'a', 'SWBemObjectSet', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'comment', 'Initialize', 'a', 'slice', 'with', 'Count', 'capacity', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'comment', 'item', 'is', 'a', 'SWbemObject', ',', 'but', 'really', 'a', 'Win32_Process', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'We', 'continue', 'loading', 'entities', 'even', 'in', 'the', 'face', 'of', 'field', 'mismatch', 'errors', '.', 'comment', 'If', 'we', 'encounter', 'any', 'other', 'error', ',', 'that', 'other', 'error', 'is', 'returned', '.', 'Otherwise', ',', 'comment', 'an', 'ErrFieldMismatch', 'is', 'returned', '.', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'comment', 'ErrFieldMismatch', 'is', 'returned', 'when', 'a', 'field', 'is', 'to', 'be', 'loaded', 'into', 'a', 'different', 'comment', 'type', 'than', 'the', 'one', 'it', 'was', 'stored', 'from', ',', 'or', 'when', 'a', 'field', 'is', 'missing', 'or', 'comment', 'unexported', 'in', 'the', 'destination', 'struct', '.', 'comment', 'StructType', 'is', 'the', 'type', 'of', 'the', 'struct', 'pointed', 'to', 'by', 'the', 'destination', 'argument', '.', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'loadEntity', 'loads', 'a', 'SWbemObject', 'into', 'a', 'struct', 'pointer', '.', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'decimal_literal', 'operator', 'identifier', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'comment', 'checkMultiArg', 'checks', 'that', 'v', 'has', 'type', '[', ']', 'S', ',', '[', ']', '*S', 'for', 'some', 'struct', 'type', 'S', '.', 'comment', 'comment', 'It', 'returns', 'what', 'category', 'the', 'slice', ""'s"", 'elements', 'are', ',', 'and', 'the', 'reflect.Type', 'comment', 'that', 'represents', 'S', '.', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'CreateQuery', 'returns', 'a', 'WQL', 'query', 'string', 'that', 'queries', 'all', 'columns', 'of', 'src', '.', 'where', 'comment', 'is', 'an', 'optional', 'string', 'that', 'is', 'appended', 'to', 'the', 'query', ',', 'to', 'be', 'used', 'with', 'WHERE', 'comment', 'clauses', '.', 'In', 'such', 'a', 'case', ',', 'the', '``', 'WHERE', ""''"", 'string', 'should', 'appear', 'at', 'the', 'beginning', '.', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator']",28353607
78,"package main
import ""fmt""
func main() {
    fmt.Println(""hello world"")
}
","['package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'fmt', '.', 'Println', '(', '""hello world""', ')', '}']","['keyword', 'identifier', 'keyword', 'string_literal', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']",28527673
79,"type CharacterData struct {
  CharId    uint32
  Data      []byte
  Segment   uint8
  SegmentId uint16

  CreatedAt time.Time
  UpdatedAt time.Time
  DeletedAt time.Time
 }","['type', 'CharacterData', 'struct', '{', 'CharId', 'uint32', 'Data', '[]', 'byte', 'Segment', 'uint8', 'SegmentId', 'uint16', 'CreatedAt', 'time', '.', 'Time', 'UpdatedAt', 'time', '.', 'Time', 'DeletedAt', 'time', '.', 'Time', '}']","['keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator']",28767067
80,"package main

import (
    ""fmt""
    ""log""
)

type Stmt struct {
    Name  string
    After []string
}

func main() {
    stmts := []Stmt{
        {Name: ""app"", After: []string{""app_user""}},
        {Name: ""billingplan"", After: []string{}},
        {Name: ""campaign"", After: []string{""app_user""}},
        {Name: ""campaign_app"", After: []string{""campaign"", ""app""}},
        {Name: ""campaign_ip"", After: []string{""campaign"", ""ip""}},
        {Name: ""campaign_operator"", After: []string{""campaign"", ""operator""}},
        {Name: ""campaign_sponsor"", After: []string{""campaign"", ""sponsor""}},
        {Name: ""campaign_subscriberfilter"", After: []string{""campaign"", ""subscriber_filters""}},
        {Name: ""campaign_url"", After: []string{""campaign"", ""url""}},
        {Name: ""contentpartner"", After: []string{""app_user""}},
        {Name: ""filter_criteria"", After: []string{""campaign"", ""subscriber_filters""}},
        {Name: ""ip"", After: []string{""app_user""}},
        {Name: ""mobile_registered"", After: []string{""campaign"", ""app""}},
        {Name: ""operator"", After: []string{}},
        {Name: ""passwords"", After: []string{""app_user""}},
        {Name: ""publish_package"", After: []string{}},
        {Name: ""role"", After: []string{}},
        {Name: ""passwords"", After: []string{""app_user""}},
        {Name: ""sponsor"", After: []string{""app_user""}},
        {Name: ""subscriber_dbs"", After: []string{}},
        {Name: ""subscriber_filters"", After: []string{""subscriber_dbs""}},
        {Name: ""timezone"", After: []string{}},
        {Name: ""url"", After: []string{""app_user""}},
        {Name: ""app_user"", After: []string{}},
        {Name: ""user_role"", After: []string{""app_user"", ""role""}},
    }

    g := make(graph)
    for _, s := range stmts {
        g[s.Name] = after(s.After)
    }

    sorted, err := topoSort(g)
    if err != nil {
        log.Fatalf(""could not sort: %v"", err)
    }
    for _, s := range sorted {
        fmt.Println(s)
    }
}

func topoSort(g graph) ([]string, error) {
    sccs := tarjanSCC(g)
    sorted := make([]string, len(sccs))
    for i, s := range sccs {
        if len(s) != 1 {
            return nil, fmt.Errorf(""found directed cycle: %q"", s)
        }
        sorted[i] = s[0]
    }
    return sorted, nil
}

// graph is an edge list representation of a directed graph.
type graph map[string]set

// set is an string set.
type set map[string]struct{}

func after(i []string) set {
    if len(i) == 0 {
        return nil
    }
    s := make(set)
    for _, v := range i {
        s[v] = struct{}{}
    }
    return s
}

// tarjanSCC returns a the strongly connected components of the
// directed graph g.
func tarjanSCC(g graph) [][]string {
    t := tarjan{
        g: g,

        indexTable: make(map[string]int, len(g)),
        lowLink:    make(map[string]int, len(g)),
        onStack:    make(map[string]bool, len(g)),
    }
    for v := range t.g {
        if t.indexTable[v] == 0 {
            t.strongconnect(v)
        }
    }
    return t.sccs
}

// tarjan implements Tarjan's strongly connected component finding
// algorithm. The implementation is from the pseudocode at
//
// http://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm
//
type tarjan struct {
    g graph

    index      int
    indexTable map[string]int
    lowLink    map[string]int
    onStack    map[string]bool

    stack []string

    sccs [][]string
}

// strongconnect is the strongconnect function described in the
// wikipedia article.
func (t *tarjan) strongconnect(v string) {
    // Set the depth index for v to the smallest unused index.
    t.index++
    t.indexTable[v] = t.index
    t.lowLink[v] = t.index
    t.stack = append(t.stack, v)
    t.onStack[v] = true

    // Consider successors of v.
    for w := range t.g[v] {
        if t.indexTable[w] == 0 {
            // Successor w has not yet been visited; recur on it.
            t.strongconnect(w)
            t.lowLink[v] = min(t.lowLink[v], t.lowLink[w])
        } else if t.onStack[w] {
            // Successor w is in stack s and hence in the current SCC.
            t.lowLink[v] = min(t.lowLink[v], t.indexTable[w])
        }
    }

    // If v is a root node, pop the stack and generate an SCC.
    if t.lowLink[v] == t.indexTable[v] {
        // Start a new strongly connected component.
        var (
            scc []string
            w   string
        )
        for {
            w, t.stack = t.stack[len(t.stack)-1], t.stack[:len(t.stack)-1]
            t.onStack[w] = false
            // Add w to current strongly connected component.
            scc = append(scc, w)
            if w == v {
                break
            }
        }
        // Output the current strongly connected component.
        t.sccs = append(t.sccs, scc)
    }
}

func min(a, b int) int {
    if a < b {
        return a
    }
    return b
}","['package', 'main', 'import', '(', '""fmt""', '""log""', ')', 'type', 'Stmt', 'struct', '{', 'Name', 'string', 'After', '[]', 'string', '}', 'func', 'main', '()', '{', 'stmts', ':=', '[]', 'Stmt', '{', '{', 'Name', ':', '""app"", After: []string{""app_user""', '}},', '{', 'Name', ':', '""billingplan""', ',', 'After', ':', '[]', 'string', '{}},', '{', 'Name', ':', '""campaign"", After: []string{""app_user""', '}},', '{', 'Name', ':', '""campaign_app"", After: []string{""campaign"", ""app""', '}},', '{', 'Name', ':', '""campaign_ip"", After: []string{""campaign"", ""ip""', '}},', '{', 'Name', ':', '""campaign_operator"", After: []string{""campaign"", ""operator""', '}},', '{', 'Name', ':', '""campaign_sponsor"", After: []string{""campaign"", ""sponsor""', '}},', '{', 'Name', ':', '""campaign_subscriberfilter"", After: []string{""campaign"", ""subscriber_filters""', '}},', '{', 'Name', ':', '""campaign_url"", After: []string{""campaign"", ""url""', '}},', '{', 'Name', ':', '""contentpartner"", After: []string{""app_user""', '}},', '{', 'Name', ':', '""filter_criteria"", After: []string{""campaign"", ""subscriber_filters""', '}},', '{', 'Name', ':', '""ip"", After: []string{""app_user""', '}},', '{', 'Name', ':', '""mobile_registered"", After: []string{""campaign"", ""app""', '}},', '{', 'Name', ':', '""operator""', ',', 'After', ':', '[]', 'string', '{}},', '{', 'Name', ':', '""passwords"", After: []string{""app_user""', '}},', '{', 'Name', ':', '""publish_package""', ',', 'After', ':', '[]', 'string', '{}},', '{', 'Name', ':', '""role""', ',', 'After', ':', '[]', 'string', '{}},', '{', 'Name', ':', '""passwords"", After: []string{""app_user""', '}},', '{', 'Name', ':', '""sponsor"", After: []string{""app_user""', '}},', '{', 'Name', ':', '""subscriber_dbs""', ',', 'After', ':', '[]', 'string', '{}},', '{', 'Name', ':', '""subscriber_filters"", After: []string{""subscriber_dbs""', '}},', '{', 'Name', ':', '""timezone""', ',', 'After', ':', '[]', 'string', '{}},', '{', 'Name', ':', '""url"", After: []string{""app_user""', '}},', '{', 'Name', ':', '""app_user""', ',', 'After', ':', '[]', 'string', '{}},', '{', 'Name', ':', '""user_role"", After: []string{""app_user"", ""role""', '}},', '}', 'g', ':=', 'make', '(', 'graph', ')', 'for', '_', ',', 's', ':=', 'range', 'stmts', '{', 'g', '[', 's', '.', 'Name', ']', '=', 'after', '(', 's', '.', 'After', ')', '}', 'sorted', ',', 'err', ':=', 'topoSort', '(', 'g', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatalf', '(', '""could not sort: %v""', ',', 'err', ')', '}', 'for', '_', ',', 's', ':=', 'range', 'sorted', '{', 'fmt', '.', 'Println', '(', 's', ')', '}', '}', 'func', 'topoSort', '(', 'g', 'graph', ')', '([]', 'string', ',', 'error', ')', '{', 'sccs', ':=', 'tarjanSCC', '(', 'g', ')', 'sorted', ':=', 'make', '([]', 'string', ',', 'len', '(', 'sccs', '))', 'for', 'i', ',', 's', ':=', 'range', 'sccs', '{', 'if', 'len', '(', 's', ')', '!=', '1', '{', 'return', 'nil', ',', 'fmt', '.', 'Errorf', '(', '""found directed cycle: %q""', ',', 's', ')', '}', 'sorted', '[', 'i', ']', '=', 's', '[', '0', ']', '}', 'return', 'sorted', ',', 'nil', '}', '// graph is an edge list representation of a directed graph.', 'type', 'graph', 'map', '[', 'string', ']', 'set', '// set is an string set.', 'type', 'set', 'map', '[', 'string', ']', 'struct', '{}', 'func', 'after', '(', 'i', '[]', 'string', ')', 'set', '{', 'if', 'len', '(', 'i', ')', '==', '0', '{', 'return', 'nil', '}', 's', ':=', 'make', '(', 'set', ')', 'for', '_', ',', 'v', ':=', 'range', 'i', '{', 's', '[', 'v', ']', '=', 'struct', '{}{}', '}', 'return', 's', '}', '// tarjanSCC returns a the strongly connected components of the', '// directed graph g.', 'func', 'tarjanSCC', '(', 'g', 'graph', ')', '[][]', 'string', '{', 't', ':=', 'tarjan', '{', 'g', ':', 'g', ',', 'indexTable', ':', 'make', '(', 'map', '[', 'string', ']', 'int', ',', 'len', '(', 'g', ')),', 'lowLink', ':', 'make', '(', 'map', '[', 'string', ']', 'int', ',', 'len', '(', 'g', ')),', 'onStack', ':', 'make', '(', 'map', '[', 'string', ']', 'bool', ',', 'len', '(', 'g', ')),', '}', 'for', 'v', ':=', 'range', 't', '.', 'g', '{', 'if', 't', '.', 'indexTable', '[', 'v', ']', '==', '0', '{', 't', '.', 'strongconnect', '(', 'v', ')', '}', '}', 'return', 't', '.', 'sccs', '}', ""// tarjan implements Tarjan's strongly connected component finding"", '// algorithm. The implementation is from the pseudocode at', '//', '// http://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm', '//', 'type', 'tarjan', 'struct', '{', 'g', 'graph', 'index', 'int', 'indexTable', 'map', '[', 'string', ']', 'int', 'lowLink', 'map', '[', 'string', ']', 'int', 'onStack', 'map', '[', 'string', ']', 'bool', 'stack', '[]', 'string', 'sccs', '[][]', 'string', '}', '// strongconnect is the strongconnect function described in the', '// wikipedia article.', 'func', '(', 't', '*', 'tarjan', ')', 'strongconnect', '(', 'v', 'string', ')', '{', '// Set the depth index for v to the smallest unused index.', 't', '.', 'index', '++', 't', '.', 'indexTable', '[', 'v', ']', '=', 't', '.', 'index', 't', '.', 'lowLink', '[', 'v', ']', '=', 't', '.', 'index', 't', '.', 'stack', '=', 'append', '(', 't', '.', 'stack', ',', 'v', ')', 't', '.', 'onStack', '[', 'v', ']', '=', 'true', '// Consider successors of v.', 'for', 'w', ':=', 'range', 't', '.', 'g', '[', 'v', ']', '{', 'if', 't', '.', 'indexTable', '[', 'w', ']', '==', '0', '{', '// Successor w has not yet been visited; recur on it.', 't', '.', 'strongconnect', '(', 'w', ')', 't', '.', 'lowLink', '[', 'v', ']', '=', 'min', '(', 't', '.', 'lowLink', '[', 'v', '],', 't', '.', 'lowLink', '[', 'w', '])', '}', 'else', 'if', 't', '.', 'onStack', '[', 'w', ']', '{', '// Successor w is in stack s and hence in the current SCC.', 't', '.', 'lowLink', '[', 'v', ']', '=', 'min', '(', 't', '.', 'lowLink', '[', 'v', '],', 't', '.', 'indexTable', '[', 'w', '])', '}', '}', '// If v is a root node, pop the stack and generate an SCC.', 'if', 't', '.', 'lowLink', '[', 'v', ']', '==', 't', '.', 'indexTable', '[', 'v', ']', '{', '// Start a new strongly connected component.', 'var', '(', 'scc', '[]', 'string', 'w', 'string', ')', 'for', '{', 'w', ',', 't', '.', 'stack', '=', 't', '.', 'stack', '[', 'len', '(', 't', '.', 'stack', ')-', '1', '],', 't', '.', 'stack', '[:', 'len', '(', 't', '.', 'stack', ')-', '1', ']', 't', '.', 'onStack', '[', 'w', ']', '=', 'false', '// Add w to current strongly connected component.', 'scc', '=', 'append', '(', 'scc', ',', 'w', ')', 'if', 'w', '==', 'v', '{', 'break', '}', '}', '// Output the current strongly connected component.', 't', '.', 'sccs', '=', 'append', '(', 't', '.', 'sccs', ',', 'scc', ')', '}', '}', 'func', 'min', '(', 'a', ',', 'b', 'int', ')', 'int', '{', 'if', 'a', '<', 'b', '{', 'return', 'a', '}', 'return', 'b', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'graph', 'is', 'an', 'edge', 'list', 'representation', 'of', 'a', 'directed', 'graph', '.', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'set', 'is', 'an', 'string', 'set', '.', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'comment', 'tarjanSCC', 'returns', 'a', 'the', 'strongly', 'connected', 'components', 'of', 'the', 'comment', 'directed', 'graph', 'g', '.', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'tarjan', 'implements', 'Tarjan', ""'s"", 'strongly', 'connected', 'component', 'finding', 'comment', 'algorithm', '.', 'The', 'implementation', 'is', 'from', 'the', 'pseudocode', 'at', 'comment', 'comment', 'http', ':', 'en.wikipedia.org/wiki/Tarjan', '%', '27s_strongly_connected_components_algorithm', 'comment', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'strongconnect', 'is', 'the', 'strongconnect', 'function', 'described', 'in', 'the', 'comment', 'wikipedia', 'article', '.', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'comment', 'Set', 'the', 'depth', 'index', 'for', 'v', 'to', 'the', 'smallest', 'unused', 'index', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'comment', 'Consider', 'successors', 'of', 'v', '.', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'comment', 'Successor', 'w', 'has', 'not', 'yet', 'been', 'visited', ';', 'recur', 'on', 'it', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Successor', 'w', 'is', 'in', 'stack', 's', 'and', 'hence', 'in', 'the', 'current', 'SCC', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'comment', 'If', 'v', 'is', 'a', 'root', 'node', ',', 'pop', 'the', 'stack', 'and', 'generate', 'an', 'SCC', '.', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Start', 'a', 'new', 'strongly', 'connected', 'component', '.', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'comment', 'Add', 'w', 'to', 'current', 'strongly', 'connected', 'component', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'comment', 'Output', 'the', 'current', 'strongly', 'connected', 'component', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator']",29057228
81,"package console

import (
    ""appengine""
    ""appengine/user""
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
    ""html/template""
    ""io/ioutil""
    ""net/http""
    ""strconv""
    ""time""
)

//for deployment
var dbConnectString string = ""****************************""

//for local testing
//var dbConnectString string = ""root@/party""

func init() {
    http.HandleFunc(""/console"", consoleHandler)
}

func consoleHandler(w http.ResponseWriter, r *http.Request) {
    redirectIfNeeded(w, r)
    c := appengine.NewContext(r)
    u := user.Current(c)

    logoutUrl, e := user.LogoutURL(c, ""/redirect"")

    if e != nil {
        panic(e)
    }

    email := u.Email
    data := WebpageData{LogoutUrl: logoutUrl, UserName: email, NewPartyUrl: ""/console/newparty""}

    template := template.Must(template.New(""template"").Parse(generateUnsignedHtml(u)))

    err := template.Execute(w, data)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
    }

}

func generateUnsignedHtml(u *user.User) string {
    firstPart := fileValue(""./console/page/firstPart.html"")
    table := generateTable(u)
    secondPart := fileValue(""./console/page/secondPart.html"")

    html := firstPart + table + secondPart
    return html
}

func generateTable(u *user.User) string {
    con, e := sql.Open(""mysql"", dbConnectString)
    if e != nil {
        panic(e)
    }
    defer con.Close()

    var parties []Party
    partyRows, err := con.Query(""select id, name, datetime, host, location from parties where author='"" + u.Email + ""';"")
    if err != nil {
        panic(err)
    }

    var id int
    var name string
    var datetime string
    var host string
    var location string

    for partyRows.Next() {
        partyRows.Scan(&id, &name, &datetime, &host, &location)
        parties = append(parties, Party{Id: id, Name: name, DatetimeString: datetime, Host: host, Location: location})
    }

    html := """"
    for i, party := range parties {
        actionsHtml := ""Edit Delete""
        html += """" + makeTd(strconv.Itoa(i+1)) + makeTd(party.Name) + makeTd(party.DatetimeString) + makeTd(party.Host) + makeTd(party.Location) + makeTd(actionsHtml) + """"
    }

    html += """"
    return html
}

func makeTd(content string) string {
    return """" + content + """"
}

func redirectIfNeeded(w http.ResponseWriter, r *http.Request) {
    expire := time.Date(2000, 1, 1, 1, 1, 1, 0, time.UTC)
    cookie := &http.Cookie{Name: ""ACSID"", Value: """", Expires: expire, HttpOnly: true}
    http.SetCookie(w, cookie)
    cookie2 := &http.Cookie{Name: ""SACSID"", Value: """", Expires: expire, HttpOnly: true}
    http.SetCookie(w, cookie2)

    c := appengine.NewContext(r)
    u := user.Current(c)
    if u == nil {
        url, err := user.LoginURL(c, r.URL.String())
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
            return
        }
        w.Header().Set(""Location"", url)
        w.WriteHeader(http.StatusFound)
        return
    }

    con, e := sql.Open(""mysql"", dbConnectString)
    if e != nil {
        panic(e)
    }
    defer con.Close()

    //check whether user is admin
    admRows, error := con.Query(""select email from admin_users;"")
    if error != nil {
        panic(error)
    }
    var email string
    isAdmin := false
    for admRows.Next() {
        admRows.Scan(&email)
        if email == u.Email {
            isAdmin = true
        }
    }

    //check if he is validated user
    validRows, error2 := con.Query(""select email from party_validated_users;"")
    if error2 != nil {
        panic(error2)
    }
    email = """"
    isValidated := false
    for validRows.Next() {
        validRows.Scan(&email)
        if email == u.Email {
            isValidated = true
        }
    }

    var url string

    if user.IsAdmin(c) || isAdmin {
        //user is declared as admin in db or is admin of gae app
        //we are allready here
        url = ""/console""
    } else if isValidated {
        //user is validated
        //we are allready here
        url = ""/console""
    } else {
        //user is not validated yet
        url = ""/redirect""
        w.Header().Set(""Location"", url)
        w.WriteHeader(http.StatusFound)
    }
}

func fileValue(path string) string {
    content, err := ioutil.ReadFile(path)
    if err != nil {
        panic(err)
    }
    return string(content)
}

type WebpageData struct {
    LogoutUrl   string
    UserName    string
    NewPartyUrl string
}

type Party struct {
    Id             int
    Name           string
    DatetimeString string
    Host           string
    Location       string
}","['package', 'console', 'import', '(', '""appengine""', '""appengine/user""', '""database/sql""', '_', '""github.com/go-sql-driver/mysql""', '""html/template""', '""io/ioutil""', '""net/http""', '""strconv""', '""time""', ')', '//for deployment', 'var', 'dbConnectString', 'string', '=', '""****************************""', '//for local testing', '//var dbConnectString string = ""root@/party""', 'func', 'init', '()', '{', 'http', '.', 'HandleFunc', '(', '""/console""', ',', 'consoleHandler', ')', '}', 'func', 'consoleHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'redirectIfNeeded', '(', 'w', ',', 'r', ')', 'c', ':=', 'appengine', '.', 'NewContext', '(', 'r', ')', 'u', ':=', 'user', '.', 'Current', '(', 'c', ')', 'logoutUrl', ',', 'e', ':=', 'user', '.', 'LogoutURL', '(', 'c', ',', '""/redirect""', ')', 'if', 'e', '!=', 'nil', '{', 'panic', '(', 'e', ')', '}', 'email', ':=', 'u', '.', 'Email', 'data', ':=', 'WebpageData', '{', 'LogoutUrl', ':', 'logoutUrl', ',', 'UserName', ':', 'email', ',', 'NewPartyUrl', ':', '""/console/newparty""', '}', 'template', ':=', 'template', '.', 'Must', '(', 'template', '.', 'New', '(', '""template""', ').', 'Parse', '(', 'generateUnsignedHtml', '(', 'u', ')))', 'err', ':=', 'template', '.', 'Execute', '(', 'w', ',', 'data', ')', 'if', 'err', '!=', 'nil', '{', 'http', '.', 'Error', '(', 'w', ',', 'err', '.', 'Error', '(),', 'http', '.', 'StatusInternalServerError', ')', '}', '}', 'func', 'generateUnsignedHtml', '(', 'u', '*', 'user', '.', 'User', ')', 'string', '{', 'firstPart', ':=', 'fileValue', '(', '""./console/page/firstPart.html""', ')', 'table', ':=', 'generateTable', '(', 'u', ')', 'secondPart', ':=', 'fileValue', '(', '""./console/page/secondPart.html""', ')', 'html', ':=', 'firstPart', '+', 'table', '+', 'secondPart', 'return', 'html', '}', 'func', 'generateTable', '(', 'u', '*', 'user', '.', 'User', ')', 'string', '{', 'con', ',', 'e', ':=', 'sql', '.', 'Open', '(', '""mysql""', ',', 'dbConnectString', ')', 'if', 'e', '!=', 'nil', '{', 'panic', '(', 'e', ')', '}', 'defer', 'con', '.', 'Close', '()', 'var', 'parties', '[]', 'Party', 'partyRows', ',', 'err', ':=', 'con', '.', 'Query', '(', '""select id, name, datetime, host, location from parties where author=\'"" + u.Email + ""\';""', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'var', 'id', 'int', 'var', 'name', 'string', 'var', 'datetime', 'string', 'var', 'host', 'string', 'var', 'location', 'string', 'for', 'partyRows', '.', 'Next', '()', '{', 'partyRows', '.', 'Scan', '(&', 'id', ',', '&', 'name', ',', '&', 'datetime', ',', '&', 'host', ',', '&', 'location', ')', 'parties', '=', 'append', '(', 'parties', ',', 'Party', '{', 'Id', ':', 'id', ',', 'Name', ':', 'name', ',', 'DatetimeString', ':', 'datetime', ',', 'Host', ':', 'host', ',', 'Location', ':', 'location', '})', '}', 'html', ':=', '""""', 'for', 'i', ',', 'party', ':=', 'range', 'parties', '{', 'actionsHtml', ':=', '""Edit Delete""', 'html', '+=', '"""" + makeTd(strconv.Itoa(i+1)) + makeTd(party.Name) + makeTd(party.DatetimeString) + makeTd(party.Host) + makeTd(party.Location) + makeTd(actionsHtml) + """"', '}', 'html', '+=', '""""', 'return', 'html', '}', 'func', 'makeTd', '(', 'content', 'string', ')', 'string', '{', 'return', '"""" + content + """"', '}', 'func', 'redirectIfNeeded', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'expire', ':=', 'time', '.', 'Date', '(', '2000', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '0', ',', 'time', '.', 'UTC', ')', 'cookie', ':=', '&', 'http', '.', 'Cookie', '{', 'Name', ':', '""ACSID"", Value: """"', ',', 'Expires', ':', 'expire', ',', 'HttpOnly', ':', 'true', '}', 'http', '.', 'SetCookie', '(', 'w', ',', 'cookie', ')', 'cookie2', ':=', '&', 'http', '.', 'Cookie', '{', 'Name', ':', '""SACSID"", Value: """"', ',', 'Expires', ':', 'expire', ',', 'HttpOnly', ':', 'true', '}', 'http', '.', 'SetCookie', '(', 'w', ',', 'cookie2', ')', 'c', ':=', 'appengine', '.', 'NewContext', '(', 'r', ')', 'u', ':=', 'user', '.', 'Current', '(', 'c', ')', 'if', 'u', '==', 'nil', '{', 'url', ',', 'err', ':=', 'user', '.', 'LoginURL', '(', 'c', ',', 'r', '.', 'URL', '.', 'String', '())', 'if', 'err', '!=', 'nil', '{', 'http', '.', 'Error', '(', 'w', ',', 'err', '.', 'Error', '(),', 'http', '.', 'StatusInternalServerError', ')', 'return', '}', 'w', '.', 'Header', '().', 'Set', '(', '""Location""', ',', 'url', ')', 'w', '.', 'WriteHeader', '(', 'http', '.', 'StatusFound', ')', 'return', '}', 'con', ',', 'e', ':=', 'sql', '.', 'Open', '(', '""mysql""', ',', 'dbConnectString', ')', 'if', 'e', '!=', 'nil', '{', 'panic', '(', 'e', ')', '}', 'defer', 'con', '.', 'Close', '()', '//check whether user is admin', 'admRows', ',', 'error', ':=', 'con', '.', 'Query', '(', '""select email from admin_users;""', ')', 'if', 'error', '!=', 'nil', '{', 'panic', '(', 'error', ')', '}', 'var', 'email', 'string', 'isAdmin', ':=', 'false', 'for', 'admRows', '.', 'Next', '()', '{', 'admRows', '.', 'Scan', '(&', 'email', ')', 'if', 'email', '==', 'u', '.', 'Email', '{', 'isAdmin', '=', 'true', '}', '}', '//check if he is validated user', 'validRows', ',', 'error2', ':=', 'con', '.', 'Query', '(', '""select email from party_validated_users;""', ')', 'if', 'error2', '!=', 'nil', '{', 'panic', '(', 'error2', ')', '}', 'email', '=', '""""', 'isValidated', ':=', 'false', 'for', 'validRows', '.', 'Next', '()', '{', 'validRows', '.', 'Scan', '(&', 'email', ')', 'if', 'email', '==', 'u', '.', 'Email', '{', 'isValidated', '=', 'true', '}', '}', 'var', 'url', 'string', 'if', 'user', '.', 'IsAdmin', '(', 'c', ')', '||', 'isAdmin', '{', '//user is declared as admin in db or is admin of gae app', '//we are allready here', 'url', '=', '""/console""', '}', 'else', 'if', 'isValidated', '{', '//user is validated', '//we are allready here', 'url', '=', '""/console""', '}', 'else', '{', '//user is not validated yet', 'url', '=', '""/redirect""', 'w', '.', 'Header', '().', 'Set', '(', '""Location""', ',', 'url', ')', 'w', '.', 'WriteHeader', '(', 'http', '.', 'StatusFound', ')', '}', '}', 'func', 'fileValue', '(', 'path', 'string', ')', 'string', '{', 'content', ',', 'err', ':=', 'ioutil', '.', 'ReadFile', '(', 'path', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'return', 'string', '(', 'content', ')', '}', 'type', 'WebpageData', 'struct', '{', 'LogoutUrl', 'string', 'UserName', 'string', 'NewPartyUrl', 'string', '}', 'type', 'Party', 'struct', '{', 'Id', 'int', 'Name', 'string', 'DatetimeString', 'string', 'Host', 'string', 'Location', 'string', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'identifier', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'comment', 'for', 'deployment', 'keyword', 'identifier', 'identifier', 'operator', 'string_literal', 'comment', 'for', 'local', 'testing', 'comment', 'var', 'dbConnectString', 'string', '=', '``', 'root', '@', '/party', ""''"", 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'check', 'whether', 'user', 'is', 'admin', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'check', 'if', 'he', 'is', 'validated', 'user', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'comment', 'user', 'is', 'declared', 'as', 'admin', 'in', 'db', 'or', 'is', 'admin', 'of', 'gae', 'app', 'comment', 'we', 'are', 'allready', 'here', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'comment', 'user', 'is', 'validated', 'comment', 'we', 'are', 'allready', 'here', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'comment', 'user', 'is', 'not', 'validated', 'yet', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator']",29262947
82,"package main

import ""fmt""

func calc_ols_params(y []float64, x[][]float64, n_iterations int, alpha float64) []float64 {

    thetas := make([]float64, len(x))

    for i := 0; i < n_iterations; i++ {

        my_diffs := calc_diff(thetas, y, x)

        my_grad := calc_gradient(my_diffs, x)

        for j := 0; j < len(my_grad); j++ {
            thetas[j] += alpha * my_grad[j]
        }
    }
    return thetas
}

func calc_diff (thetas []float64, y []float64, x[][]float64) []float64 {
    diffs := make([]float64, len(y))
    for i := 0; i < len(y); i++ {
        prediction := 0.0
        for j := 0; j < len(thetas); j++ {
            prediction += thetas[j] * x[j][i]
        }
        diffs[i] = y[i] - prediction
    }
    return diffs
}

func calc_gradient(diffs[] float64, x[][]float64) []float64 {
    gradient := make([]float64, len(x))
    for i := 0; i < len(diffs); i++ {
        for j := 0; j < len(x); j++ {
            gradient[j] += diffs[i] * x[j][i]
        }
    }
    for i := 0; i < len(x); i++ {
        gradient[i] = gradient[i] / float64(len(diffs))
    }

    return gradient
}

func main(){
    y := []float64 {3,4,5,6,7}
    x := [][]float64 {{1,1,1,1,1}, {4,3,2,1,3}}

    thetas := calc_ols_params(y, x, 100000, 0.001)

    fmt.Println(""Thetas : "", thetas)

    y_2 := []float64 {1,2,3,4,3,4,5,4,5,5,4,5,4,5,4,5,6,5,4,5,4,3,4}

    x_2 := [][]float64 {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {4,2,3,4,5,4,5,6,7,4,8,9,8,8,6,6,5,5,5,5,5,5,5},
                    {4,1,2,3,4,5,6,7,5,8,7,8,7,8,7,8,7,7,7,7,7,6,5},
                    {4,1,2,5,6,7,8,9,7,8,7,8,7,7,7,7,7,7,6,6,4,4,4},}

    thetas_2 := calc_ols_params(y_2, x_2, 100000, 0.001)

    fmt.Println(""Thetas_2 : "", thetas_2)

}","['package', 'main', 'import', '""fmt""', 'func', 'calc_ols_params', '(', 'y', '[]', 'float64', ',', 'x', '[][]', 'float64', ',', 'n_iterations', 'int', ',', 'alpha', 'float64', ')', '[]', 'float64', '{', 'thetas', ':=', 'make', '([]', 'float64', ',', 'len', '(', 'x', '))', 'for', 'i', ':=', '0', ';', 'i', '<', 'n_iterations', ';', 'i', '++', '{', 'my_diffs', ':=', 'calc_diff', '(', 'thetas', ',', 'y', ',', 'x', ')', 'my_grad', ':=', 'calc_gradient', '(', 'my_diffs', ',', 'x', ')', 'for', 'j', ':=', '0', ';', 'j', '<', 'len', '(', 'my_grad', ');', 'j', '++', '{', 'thetas', '[', 'j', ']', '+=', 'alpha', '*', 'my_grad', '[', 'j', ']', '}', '}', 'return', 'thetas', '}', 'func', 'calc_diff', '(', 'thetas', '[]', 'float64', ',', 'y', '[]', 'float64', ',', 'x', '[][]', 'float64', ')', '[]', 'float64', '{', 'diffs', ':=', 'make', '([]', 'float64', ',', 'len', '(', 'y', '))', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'y', ');', 'i', '++', '{', 'prediction', ':=', '0', '.', '0', 'for', 'j', ':=', '0', ';', 'j', '<', 'len', '(', 'thetas', ');', 'j', '++', '{', 'prediction', '+=', 'thetas', '[', 'j', ']', '*', 'x', '[', 'j', '][', 'i', ']', '}', 'diffs', '[', 'i', ']', '=', 'y', '[', 'i', ']', '-', 'prediction', '}', 'return', 'diffs', '}', 'func', 'calc_gradient', '(', 'diffs', '[]', 'float64', ',', 'x', '[][]', 'float64', ')', '[]', 'float64', '{', 'gradient', ':=', 'make', '([]', 'float64', ',', 'len', '(', 'x', '))', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'diffs', ');', 'i', '++', '{', 'for', 'j', ':=', '0', ';', 'j', '<', 'len', '(', 'x', ');', 'j', '++', '{', 'gradient', '[', 'j', ']', '+=', 'diffs', '[', 'i', ']', '*', 'x', '[', 'j', '][', 'i', ']', '}', '}', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'x', ');', 'i', '++', '{', 'gradient', '[', 'i', ']', '=', 'gradient', '[', 'i', ']', 'float64', '(', 'len', '(', 'diffs', '))', '}', 'return', 'gradient', '}', 'func', 'main', '(){', 'y', ':=', '[]', 'float64', '{', '3', ',', '4', ',', '5', ',', '6', ',', '7', '}', 'x', ':=', '[][]', 'float64', '{{', '1', ',', '1', ',', '1', ',', '1', ',', '1', '},', '{', '4', ',', '3', ',', '2', ',', '1', ',', '3', '}}', 'thetas', ':=', 'calc_ols_params', '(', 'y', ',', 'x', ',', '100000', ',', '0', '.', '001', ')', 'fmt', '.', 'Println', '(', '""Thetas : ""', ',', 'thetas', ')', 'y_2', ':=', '[]', 'float64', '{', '1', ',', '2', ',', '3', ',', '4', ',', '3', ',', '4', ',', '5', ',', '4', ',', '5', ',', '5', ',', '4', ',', '5', ',', '4', ',', '5', ',', '4', ',', '5', ',', '6', ',', '5', ',', '4', ',', '5', ',', '4', ',', '3', ',', '4', '}', 'x_2', ':=', '[][]', 'float64', '{{', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', ',', '1', '},', '{', '4', ',', '2', ',', '3', ',', '4', ',', '5', ',', '4', ',', '5', ',', '6', ',', '7', ',', '4', ',', '8', ',', '9', ',', '8', ',', '8', ',', '6', ',', '6', ',', '5', ',', '5', ',', '5', ',', '5', ',', '5', ',', '5', ',', '5', '},', '{', '4', ',', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '5', ',', '8', ',', '7', ',', '8', ',', '7', ',', '8', ',', '7', ',', '8', ',', '7', ',', '7', ',', '7', ',', '7', ',', '7', ',', '6', ',', '5', '},', '{', '4', ',', '1', ',', '2', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '7', ',', '8', ',', '7', ',', '8', ',', '7', ',', '7', ',', '7', ',', '7', ',', '7', ',', '7', ',', '6', ',', '6', ',', '4', ',', '4', ',', '4', '},}', 'thetas_2', ':=', 'calc_ols_params', '(', 'y_2', ',', 'x_2', ',', '100000', ',', '0', '.', '001', ')', 'fmt', '.', 'Println', '(', '""Thetas_2 : ""', ',', 'thetas_2', ')', '}']","['keyword', 'identifier', 'keyword', 'string_literal', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator']",29454288
83,"address, err := net.ResolveTCPAddr(""tcp"", ""192.168.9.144:8080"")                                                                                                                                     
            if err != nil {                                                                                                                                                                                     
                    fmt.Println(err)                                                                                                                                                                            
            }                                                                                                                                                                                                   
            conn, err := net.DialTCP(""tcp"", nil, address)                                                                                                                                                       
            fmt.Println(""Connected"")                                                                                                                                                                            
            // conn, err := net.DialTCP(""tcp"", nil, address)                                                                                                                                                    
            if err != nil {                                                                                                                                                                                     
                    fmt.Println(""Can't conenct"")                                                                                                                                                                
                    log.Fatal(err)                                                                                                                                                                              
     }
     conn.File() 
     conn.Fd()","['address', ',', 'err', ':=', 'net', '.', 'ResolveTCPAddr', '(', '""tcp"", ""192.168.9.144:8080""', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', '}', 'conn', ',', 'err', ':=', 'net', '.', 'DialTCP', '(', '""tcp""', ',', 'nil', ',', 'address', ')', 'fmt', '.', 'Println', '(', '""Connected""', ')', '// conn, err := net.DialTCP(""tcp"", nil, address)                                                                                                                                                    ', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', '""Can\'t conenct""', ')', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'conn', '.', 'File', '()', 'conn', '.', 'Fd', '()']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'conn', ',', 'err', ':', '=', 'net.DialTCP', '(', '``', 'tcp', ""''"", ',', 'nil', ',', 'address', ')', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']",29525363
84,"var (
        procGetOSfHandle = msvcrt.NewProc(""_get_osfhandle"")                                                                                                                                                                                                                                                                                                         
)                                                                                                                                                                                                           

func GetOSfHandle(fd uintptr) (uintptr, error) {                                                                                                                                                            
        value, _, err := procGetOSfHandle.Call(fd)                                                                                                                                                          
        return value, err                                                                                                                                                                                   
} 
hand, _ := GetOSfHandle(uintptr(unsafe.Pointer(conn)))
","['var', '(', 'procGetOSfHandle', '=', 'msvcrt', '.', 'NewProc', '(', '""_get_osfhandle""', ')', ')', 'func', 'GetOSfHandle', '(', 'fd', 'uintptr', ')', '(', 'uintptr', ',', 'error', ')', '{', 'value', ',', '_', ',', 'err', ':=', 'procGetOSfHandle', '.', 'Call', '(', 'fd', ')', 'return', 'value', ',', 'err', '}', 'hand', ',', '_', ':=', 'GetOSfHandle', '(', 'uintptr', '(', 'unsafe', '.', 'Pointer', '(', 'conn', ')))']","['keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']",29525363
85,"package main

import (
    ""fmt""
    ""math/rand""
)

type PersonID int

func contains(s []int, e int) bool {
    for _, a := range s {
        if a == e {
            return true
        }
    }
    return false
}

func Person(called_number chan int, claim_prize chan PersonID, received chan bool, coupon []int, person_id PersonID) {
    numFound := 0
    for i := 0; i < len(coupon); i++ {
        current_number := <-called_number
        found := contains(coupon, current_number)
        if found {
            numFound++
        }
        if numFound == len(coupon) {
            claim_prize <- person_id
        } else {
            received <- true
        }
    }
}

func main() {
    var called_number chan int
    var claim_prize chan PersonID
    var received chan bool

    tokens := make([][]int, 3)
    for i := 0; i < 3; i++ {
        tokens[i] = make([]int, 12)
        for j := 0; j < 12; j++ {
            num := rand.Intn(100) + 1
            found := contains(tokens[i], num)
            for found {
                num = rand.Intn(100) + 1
                found = contains(tokens[i], num)
            }
            tokens[i][j] = num
        }
    }

    go Person(called_number, claim_prize, received, tokens[0], 0)
    go Person(called_number, claim_prize, received, tokens[1], 1)
    go Person(called_number, claim_prize, received, tokens[2], 2)

    claimants := make([]PersonID, 0)
    prev_called := make(map[int]bool)
    for i := 0; i < 100; i++ {
        if len(claimants) == 3 {
            break
        }
        num := rand.Intn(100) + 1
        _, ok := prev_called[num]
        for ok {
            num = rand.Intn(100) + 1
            _, ok = prev_called[num]
        }
        prev_called[num] = true
        called_number <- num
        for j := 0; j < 3; j++ {
            select {
            case _ = <-received:
                continue
            case pid := <-claim_prize:
                claimants = append(claimants, pid)
            }
        }
    }

    fmt.Println(claimants)
}","['package', 'main', 'import', '(', '""fmt""', '""math/rand""', ')', 'type', 'PersonID', 'int', 'func', 'contains', '(', 's', '[]', 'int', ',', 'e', 'int', ')', 'bool', '{', 'for', '_', ',', 'a', ':=', 'range', 's', '{', 'if', 'a', '==', 'e', '{', 'return', 'true', '}', '}', 'return', 'false', '}', 'func', 'Person', '(', 'called_number', 'chan', 'int', ',', 'claim_prize', 'chan', 'PersonID', ',', 'received', 'chan', 'bool', ',', 'coupon', '[]', 'int', ',', 'person_id', 'PersonID', ')', '{', 'numFound', ':=', '0', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'coupon', ');', 'i', '++', '{', 'current_number', ':=', '<-', 'called_number', 'found', ':=', 'contains', '(', 'coupon', ',', 'current_number', ')', 'if', 'found', '{', 'numFound', '++', '}', 'if', 'numFound', '==', 'len', '(', 'coupon', ')', '{', 'claim_prize', '<-', 'person_id', '}', 'else', '{', 'received', '<-', 'true', '}', '}', '}', 'func', 'main', '()', '{', 'var', 'called_number', 'chan', 'int', 'var', 'claim_prize', 'chan', 'PersonID', 'var', 'received', 'chan', 'bool', 'tokens', ':=', 'make', '([][]', 'int', ',', '3', ')', 'for', 'i', ':=', '0', ';', 'i', '<', '3', ';', 'i', '++', '{', 'tokens', '[', 'i', ']', '=', 'make', '([]', 'int', ',', '12', ')', 'for', 'j', ':=', '0', ';', 'j', '<', '12', ';', 'j', '++', '{', 'num', ':=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1', 'found', ':=', 'contains', '(', 'tokens', '[', 'i', '],', 'num', ')', 'for', 'found', '{', 'num', '=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1', 'found', '=', 'contains', '(', 'tokens', '[', 'i', '],', 'num', ')', '}', 'tokens', '[', 'i', '][', 'j', ']', '=', 'num', '}', '}', 'go', 'Person', '(', 'called_number', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '0', '],', '0', ')', 'go', 'Person', '(', 'called_number', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '1', '],', '1', ')', 'go', 'Person', '(', 'called_number', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '2', '],', '2', ')', 'claimants', ':=', 'make', '([]', 'PersonID', ',', '0', ')', 'prev_called', ':=', 'make', '(', 'map', '[', 'int', ']', 'bool', ')', 'for', 'i', ':=', '0', ';', 'i', '<', '100', ';', 'i', '++', '{', 'if', 'len', '(', 'claimants', ')', '==', '3', '{', 'break', '}', 'num', ':=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1', '_', ',', 'ok', ':=', 'prev_called', '[', 'num', ']', 'for', 'ok', '{', 'num', '=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1', '_', ',', 'ok', '=', 'prev_called', '[', 'num', ']', '}', 'prev_called', '[', 'num', ']', '=', 'true', 'called_number', '<-', 'num', 'for', 'j', ':=', '0', ';', 'j', '<', '3', ';', 'j', '++', '{', 'select', '{', 'case', '_', '=', '<-', 'received', ':', 'continue', 'case', 'pid', ':=', '<-', 'claim_prize', ':', 'claimants', '=', 'append', '(', 'claimants', ',', 'pid', ')', '}', '}', '}', 'fmt', '.', 'Println', '(', 'claimants', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'identifier', 'keyword', 'identifier', 'keyword', 'identifier', 'keyword', 'identifier', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",29573148
86,"package main

import (
    ""fmt""
    ""math/rand""
)

func contains(s []int, e int) bool {
    for _, a := range s {
        if a == e {
            return true
        }
    }
    return false
}

func Person(called_number chan int, claim_prize chan int, received chan bool, coupon []int, person_id int) {
    numFound := 0
    for current_number := range called_number {
        if contains(coupon, current_number) {
            numFound++
        }
        if numFound == len(coupon) {
            fmt.Println(person_id)
            claim_prize <- person_id
        } else {
            received <- true
        }
    }
}

func main() {
    var (
        called_number1 = make(chan int, 1)
        called_number2 = make(chan int, 1)
        called_number3 = make(chan int, 1)
        claim_prize    = make(chan int, 1)
        received       = make(chan bool, 1)
    )

    tokens := make([][]int, 3)
    for i := 0; i < 3; i++ {
        tokens[i] = make([]int, 12)
        for j := 0; j < 12; j++ {
            num := rand.Intn(100) + 1
            found := contains(tokens[i], num)
            for found {
                num = rand.Intn(100) + 1
                found = contains(tokens[i], num)
            }
            tokens[i][j] = num
        }
    }

    go Person(called_number1, claim_prize, received, tokens[0], 0)
    go Person(called_number2, claim_prize, received, tokens[1], 1)
    go Person(called_number3, claim_prize, received, tokens[2], 2)

    claimants := make([]int, 0)
    prev_called := make(map[int]bool)
    for i := 0; i < 100; i++ {
        if len(claimants) == 3 {
            break
        }
        num := rand.Intn(100) + 1
        _, ok := prev_called[num]
        for ok {
            num = rand.Intn(100) + 1
            _, ok = prev_called[num]
        }
        prev_called[num] = true
        if !contains(claimants, 0) {
            called_number1 <- num
        }
        if !contains(claimants, 1) {
            called_number2 <- num
        }
        if !contains(claimants, 2) {
            called_number3 <- num
        }
        for j := 0; j < 3; j++ {
            select {
            case _ = <-received:
                continue
            case pid := <-claim_prize:
                if pid == 0 { close(called_number1) }
                if pid == 1 { close(called_number2) }
                if pid == 2 { close(called_number3) }
                claimants = append(claimants, pid)
            }
        }
    }
    fmt.Println(claimants)
}","['package', 'main', 'import', '(', '""fmt""', '""math/rand""', ')', 'func', 'contains', '(', 's', '[]', 'int', ',', 'e', 'int', ')', 'bool', '{', 'for', '_', ',', 'a', ':=', 'range', 's', '{', 'if', 'a', '==', 'e', '{', 'return', 'true', '}', '}', 'return', 'false', '}', 'func', 'Person', '(', 'called_number', 'chan', 'int', ',', 'claim_prize', 'chan', 'int', ',', 'received', 'chan', 'bool', ',', 'coupon', '[]', 'int', ',', 'person_id', 'int', ')', '{', 'numFound', ':=', '0', 'for', 'current_number', ':=', 'range', 'called_number', '{', 'if', 'contains', '(', 'coupon', ',', 'current_number', ')', '{', 'numFound', '++', '}', 'if', 'numFound', '==', 'len', '(', 'coupon', ')', '{', 'fmt', '.', 'Println', '(', 'person_id', ')', 'claim_prize', '<-', 'person_id', '}', 'else', '{', 'received', '<-', 'true', '}', '}', '}', 'func', 'main', '()', '{', 'var', '(', 'called_number1', '=', 'make', '(', 'chan', 'int', ',', '1', ')', 'called_number2', '=', 'make', '(', 'chan', 'int', ',', '1', ')', 'called_number3', '=', 'make', '(', 'chan', 'int', ',', '1', ')', 'claim_prize', '=', 'make', '(', 'chan', 'int', ',', '1', ')', 'received', '=', 'make', '(', 'chan', 'bool', ',', '1', ')', ')', 'tokens', ':=', 'make', '([][]', 'int', ',', '3', ')', 'for', 'i', ':=', '0', ';', 'i', '<', '3', ';', 'i', '++', '{', 'tokens', '[', 'i', ']', '=', 'make', '([]', 'int', ',', '12', ')', 'for', 'j', ':=', '0', ';', 'j', '<', '12', ';', 'j', '++', '{', 'num', ':=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1', 'found', ':=', 'contains', '(', 'tokens', '[', 'i', '],', 'num', ')', 'for', 'found', '{', 'num', '=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1', 'found', '=', 'contains', '(', 'tokens', '[', 'i', '],', 'num', ')', '}', 'tokens', '[', 'i', '][', 'j', ']', '=', 'num', '}', '}', 'go', 'Person', '(', 'called_number1', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '0', '],', '0', ')', 'go', 'Person', '(', 'called_number2', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '1', '],', '1', ')', 'go', 'Person', '(', 'called_number3', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '2', '],', '2', ')', 'claimants', ':=', 'make', '([]', 'int', ',', '0', ')', 'prev_called', ':=', 'make', '(', 'map', '[', 'int', ']', 'bool', ')', 'for', 'i', ':=', '0', ';', 'i', '<', '100', ';', 'i', '++', '{', 'if', 'len', '(', 'claimants', ')', '==', '3', '{', 'break', '}', 'num', ':=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1', '_', ',', 'ok', ':=', 'prev_called', '[', 'num', ']', 'for', 'ok', '{', 'num', '=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1', '_', ',', 'ok', '=', 'prev_called', '[', 'num', ']', '}', 'prev_called', '[', 'num', ']', '=', 'true', 'if', '!', 'contains', '(', 'claimants', ',', '0', ')', '{', 'called_number1', '<-', 'num', '}', 'if', '!', 'contains', '(', 'claimants', ',', '1', ')', '{', 'called_number2', '<-', 'num', '}', 'if', '!', 'contains', '(', 'claimants', ',', '2', ')', '{', 'called_number3', '<-', 'num', '}', 'for', 'j', ':=', '0', ';', 'j', '<', '3', ';', 'j', '++', '{', 'select', '{', 'case', '_', '=', '<-', 'received', ':', 'continue', 'case', 'pid', ':=', '<-', 'claim_prize', ':', 'if', 'pid', '==', '0', '{', 'close', '(', 'called_number1', ')', '}', 'if', 'pid', '==', '1', '{', 'close', '(', 'called_number2', ')', '}', 'if', 'pid', '==', '2', '{', 'close', '(', 'called_number3', ')', '}', 'claimants', '=', 'append', '(', 'claimants', ',', 'pid', ')', '}', '}', '}', 'fmt', '.', 'Println', '(', 'claimants', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",29573148
87,"package main

import (
    ""fmt""
    ""reflect""
    ""strings""
)
import (
    ""encoding/json""
    ""encoding/xml""
    ""errors""
)

type Query struct {
    XMLName xml.Name `xml:""http://marklogic.com/appservices/search query"" json:""-""`
    Field1  string
    Field2  int64
}

type TermQuery struct {
    XMLName xml.Name `xml:""http://marklogic.com/appservices/search term-query"" json:""-""`
    Field3  string
    Field4  int64
}

func getXmlName(d interface{}, label string) (string, bool) {
    switch reflect.TypeOf(d).Kind() {
    case reflect.Struct:
        v, _ := reflect.TypeOf(d).FieldByName(label)
        parts := strings.Split(v.Tag.Get(""xml""), "" "")
        return parts[1], true
    }
    return """", false
}

func wrapJson(item interface{}) ([]byte, error) {
    if n, ok := getXmlName(item, ""XMLName""); ok {
        b, err := json.Marshal(map[string]interface{}{n: item})
        if err != nil {
            return nil, err
        }
        return b, nil
    }
    return nil, errors.New(""You failed"")
}

func main() {
    // create a Query and encode it as {""query"": {struct}}
    q := Query{Field1: ""hello"", Field2: 42}
    wrappedQ, err := wrapJson(q)
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(string(wrappedQ))

    // create a TermQuery and encode it as {""term-query"": {struct}}
    tq := TermQuery{Field3: ""world"", Field4: 99}
    wrappedTQ, err := wrapJson(tq)
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(string(wrappedTQ))

}","['package', 'main', 'import', '(', '""fmt""', '""reflect""', '""strings""', ')', 'import', '(', '""encoding/json""', '""encoding/xml""', '""errors""', ')', 'type', 'Query', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'xml', ':', '""http://marklogic.com/appservices/search query"" json:""-""', 'Field1', 'string', 'Field2', 'int64', '}', 'type', 'TermQuery', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'xml', ':', '""http://marklogic.com/appservices/search term-query"" json:""-""', 'Field3', 'string', 'Field4', 'int64', '}', 'func', 'getXmlName', '(', 'd', 'interface', '{},', 'label', 'string', ')', '(', 'string', ',', 'bool', ')', '{', 'switch', 'reflect', '.', 'TypeOf', '(', 'd', ').', 'Kind', '()', '{', 'case', 'reflect', '.', 'Struct', ':', 'v', ',', '_', ':=', 'reflect', '.', 'TypeOf', '(', 'd', ').', 'FieldByName', '(', 'label', ')', 'parts', ':=', 'strings', '.', 'Split', '(', 'v', '.', 'Tag', '.', 'Get', '(', '""xml""), "" ""', ')', 'return', 'parts', '[', '1', '],', 'true', '}', 'return', '""""', ',', 'false', '}', 'func', 'wrapJson', '(', 'item', 'interface', '{})', '([]', 'byte', ',', 'error', ')', '{', 'if', 'n', ',', 'ok', ':=', 'getXmlName', '(', 'item', ',', '""XMLName""', ');', 'ok', '{', 'b', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'map', '[', 'string', ']', 'interface', '{}{', 'n', ':', 'item', '})', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'b', ',', 'nil', '}', 'return', 'nil', ',', 'errors', '.', 'New', '(', '""You failed""', ')', '}', 'func', 'main', '()', '{', '// create a Query and encode it as {""query"": {struct}}', 'q', ':=', 'Query', '{', 'Field1', ':', '""hello""', ',', 'Field2', ':', '42', '}', 'wrappedQ', ',', 'err', ':=', 'wrapJson', '(', 'q', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', 'return', '}', 'fmt', '.', 'Println', '(', 'string', '(', 'wrappedQ', '))', '// create a TermQuery and encode it as {""term-query"": {struct}}', 'tq', ':=', 'TermQuery', '{', 'Field3', ':', '""world""', ',', 'Field4', ':', '99', '}', 'wrappedTQ', ',', 'err', ':=', 'wrapJson', '(', 'tq', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', 'return', '}', 'fmt', '.', 'Println', '(', 'string', '(', 'wrappedTQ', '))', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'keyword', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'create', 'a', 'Query', 'and', 'encode', 'it', 'as', '{', '``', 'query', ""''"", ':', '{', 'struct', '}', '}', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'create', 'a', 'TermQuery', 'and', 'encode', 'it', 'as', '{', '``', 'term-query', ""''"", ':', '{', 'struct', '}', '}', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",29690419
88,"package main

import (
    ""fmt""
    ""reflect""
    ""strings""
)
import (
    //""encoding/json""
    ""encoding/json""
    ""encoding/xml""
    ""errors""
)

type Query struct {
    XMLName xml.Name `xml:""http://marklogic.com/appservices/search query"" json:""-""`
    Field1  string
    Field2  int64
    Queries []interface{} `xml:"",any"" json:""queries""`
}

type TermQuery struct {
    XMLName xml.Name `xml:""http://marklogic.com/appservices/search term-query"" json:""-""`
    Field3  string
    Field4  int64
}

func getXmlName(d interface{}, label string) (string, bool) {
    switch reflect.TypeOf(d).Kind() {
    case reflect.Struct:
        v, _ := reflect.TypeOf(d).FieldByName(label)
        parts := strings.Split(v.Tag.Get(""xml""), "" "")
        return parts[1], true
    default:
        fmt.Println(reflect.TypeOf(d).Kind())
    }
    return """", false
}

func wrapJson(item interface{}) (map[string]interface{}, error) {
    if n, ok := getXmlName(item, ""XMLName""); ok {

        if k := reflect.ValueOf(item).FieldByName(""Queries""); k.IsValid() {
            for i := 0; i < k.Len(); i++ {
                b, err1 := wrapJson(k.Index(i).Interface())
                if err1 != nil {

                    continue
                }
                k.Index(i).Set(reflect.ValueOf(b))

            }

        }
        return map[string]interface{}{n: item}, nil
    }
    return nil, errors.New(""You failed"")
}

func asJson(i interface{}) []byte {
    b, err := json.Marshal(i)
    if err != nil {
        return []byte(`{""error"": ""too bad""}`)
    }
    return b
}

func main() {

    // create a TermQuery and encode it as {""term-query"": {struct}}
    tq := TermQuery{Field3: ""world"", Field4: 99}
    wrappedTQ, err := wrapJson(tq)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(string(asJson(wrappedTQ)))

    // create a Query and encode it as {""query"": {struct}}
    q := Query{
        Field1: ""hello"", 
        Field2: 42, 
        Queries: []interface{}{
            TermQuery{Field3: ""world"", Field4: 99},
            TermQuery{Field3: ""yay, it works!"", Field4: 666},
            Query{
                Field1: ""Hi"",
                Field2: 21,
                Queries: []interface{}{
                    TermQuery{
                        Field3: ""omg"",
                        Field4: 1,
                    },
                },
            },
        },
    }
    wrappedQ, err := wrapJson(q)
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(string(asJson(wrappedQ)))

}","['package', 'main', 'import', '(', '""fmt""', '""reflect""', '""strings""', ')', 'import', '(', '//""encoding/json""', '""encoding/json""', '""encoding/xml""', '""errors""', ')', 'type', 'Query', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'xml', ':', '""http://marklogic.com/appservices/search query"" json:""-""', 'Field1', 'string', 'Field2', 'int64', 'Queries', '[]', 'interface', '{}', 'xml', ':', '"",any"" json:""queries""', '}', 'type', 'TermQuery', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'xml', ':', '""http://marklogic.com/appservices/search term-query"" json:""-""', 'Field3', 'string', 'Field4', 'int64', '}', 'func', 'getXmlName', '(', 'd', 'interface', '{},', 'label', 'string', ')', '(', 'string', ',', 'bool', ')', '{', 'switch', 'reflect', '.', 'TypeOf', '(', 'd', ').', 'Kind', '()', '{', 'case', 'reflect', '.', 'Struct', ':', 'v', ',', '_', ':=', 'reflect', '.', 'TypeOf', '(', 'd', ').', 'FieldByName', '(', 'label', ')', 'parts', ':=', 'strings', '.', 'Split', '(', 'v', '.', 'Tag', '.', 'Get', '(', '""xml""), "" ""', ')', 'return', 'parts', '[', '1', '],', 'true', 'default', ':', 'fmt', '.', 'Println', '(', 'reflect', '.', 'TypeOf', '(', 'd', ').', 'Kind', '())', '}', 'return', '""""', ',', 'false', '}', 'func', 'wrapJson', '(', 'item', 'interface', '{})', '(', 'map', '[', 'string', ']', 'interface', '{},', 'error', ')', '{', 'if', 'n', ',', 'ok', ':=', 'getXmlName', '(', 'item', ',', '""XMLName""', ');', 'ok', '{', 'if', 'k', ':=', 'reflect', '.', 'ValueOf', '(', 'item', ').', 'FieldByName', '(', '""Queries""', ');', 'k', '.', 'IsValid', '()', '{', 'for', 'i', ':=', '0', ';', 'i', '<', 'k', '.', 'Len', '();', 'i', '++', '{', 'b', ',', 'err1', ':=', 'wrapJson', '(', 'k', '.', 'Index', '(', 'i', ').', 'Interface', '())', 'if', 'err1', '!=', 'nil', '{', 'continue', '}', 'k', '.', 'Index', '(', 'i', ').', 'Set', '(', 'reflect', '.', 'ValueOf', '(', 'b', '))', '}', '}', 'return', 'map', '[', 'string', ']', 'interface', '{}{', 'n', ':', 'item', '},', 'nil', '}', 'return', 'nil', ',', 'errors', '.', 'New', '(', '""You failed""', ')', '}', 'func', 'asJson', '(', 'i', 'interface', '{})', '[]', 'byte', '{', 'b', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'i', ')', 'if', 'err', '!=', 'nil', '{', 'return', '[]', 'byte', '(', '{', '""error"": ""too bad""', '}', ')', '}', 'return', 'b', '}', 'func', 'main', '()', '{', '// create a TermQuery and encode it as {""term-query"": {struct}}', 'tq', ':=', 'TermQuery', '{', 'Field3', ':', '""world""', ',', 'Field4', ':', '99', '}', 'wrappedTQ', ',', 'err', ':=', 'wrapJson', '(', 'tq', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', 'return', '}', 'fmt', '.', 'Println', '(', 'string', '(', 'asJson', '(', 'wrappedTQ', ')))', '// create a Query and encode it as {""query"": {struct}}', 'q', ':=', 'Query', '{', 'Field1', ':', '""hello""', ',', 'Field2', ':', '42', ',', 'Queries', ':', '[]', 'interface', '{}{', 'TermQuery', '{', 'Field3', ':', '""world""', ',', 'Field4', ':', '99', '},', 'TermQuery', '{', 'Field3', ':', '""yay, it works!""', ',', 'Field4', ':', '666', '},', 'Query', '{', 'Field1', ':', '""Hi""', ',', 'Field2', ':', '21', ',', 'Queries', ':', '[]', 'interface', '{}{', 'TermQuery', '{', 'Field3', ':', '""omg""', ',', 'Field4', ':', '1', ',', '},', '},', '},', '},', '}', 'wrappedQ', ',', 'err', ':=', 'wrapJson', '(', 'q', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', 'return', '}', 'fmt', '.', 'Println', '(', 'string', '(', 'asJson', '(', 'wrappedQ', ')))', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'operator', 'comment', '``', 'encoding/json', ""''"", 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'create', 'a', 'TermQuery', 'and', 'encode', 'it', 'as', '{', '``', 'term-query', ""''"", ':', '{', 'struct', '}', '}', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'create', 'a', 'Query', 'and', 'encode', 'it', 'as', '{', '``', 'query', ""''"", ':', '{', 'struct', '}', '}', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'operator', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",29690419
89,"package main

import (
        ""bufio""
        ""fmt""
        ""os""
        ""strconv""
        ""strings""
)

func main() {
        // Set up input and output.
        reader := bufio.NewReader(os.Stdin)
        writer := bufio.NewWriter(os.Stdout)
        defer writer.Flush()

        // Get the number of vertices and number of cliques from the first line.
        line, err := reader.ReadString('\n')
        if err != nil {
                fmt.Fprintf(os.Stderr, ""Error reading first line: %s\n"", err)
                return
        }
        var numVertices, numCliques int
        numScanned, err := fmt.Sscanf(line, ""%d %d"", &numVertices, &numCliques)
        if numScanned != 2 || err != nil {
                fmt.Fprintf(os.Stderr, ""Error parsing input parameters: %s\n"", err)   
                return
        }

        // Initialize the edge counts and vertex counts.
        edgeCounts := make([][]int, numVertices+1)
        for u := 1; u <= numVertices; u++ {
                edgeCounts[u] = make([]int, numVertices+1)
        }
        vertexCounts := make([]int, numVertices+1)

        // Read each clique and update the edge counts.
        for c := 0; c < numCliques; c++ {
                line, err = reader.ReadString('\n')
                if err != nil {
                        fmt.Fprintf(os.Stderr, ""Error reading clique: %s\n"", err)
                        return
                }
                tokens := strings.Split(strings.TrimSpace(line), "" "")
                clique := make([]int, len(tokens))
                for i, token := range tokens {
                        u, err := strconv.Atoi(token)
                        if err != nil {
                                fmt.Fprintf(os.Stderr, ""Atoi error: %s\n"", err)
                                return
                        }
                        vertexCounts[u]++
                        clique[i] = u
                        for j := 0; j < i; j++ {
                                v := clique[j]
                                edgeCounts[u][v]++
                                edgeCounts[v][u]++
                        }
                }
        }

        // Compute the number of edges between each pair of vertices.
        count2edges := make([][][]int, numCliques+1)
        for u := 1; u < numVertices; u++ {
                for v := u + 1; v <= numVertices; v++ {
                        count := edgeCounts[u][v]
                        count2edges[count] = append(count2edges[count],
                                []int{u, v})
                }
        }
        writer.WriteString(""Number of edges between pairs of vertices:\n"")
        for count := numCliques; count >= 1; count-- {
                edges := count2edges[count]
                if len(edges) == 0 {
                        continue
                }
                label := ""edge""
                if count > 1 {
                        label += ""s:""
                } else {
                        label += "": ""
                }
                writer.WriteString(fmt.Sprintf(""%5d %s"", count, label))
                for _, edge := range edges {
                        writer.WriteString(fmt.Sprintf("" (%d, %d)"",
                                edge[0], edge[1]))
                }
                writer.WriteString(""\n"")
        }

        // Group vertices according to the number of clique memberships.
        count2vertices := make([][]int, numCliques+1)
        for u := 1; u <= numVertices; u++ {
                count := vertexCounts[u]
                count2vertices[count] = append(count2vertices[count], u)
        }
        writer.WriteString(""\nNumber of cliques in which a vertex appears:\n"")
        for count := numCliques; count >= 1; count-- {
                vertices := count2vertices[count]
                if len(vertices) == 0 {
                        continue
                }
                label := ""clique""
                if count > 1 {
                        label += ""s:""
                } else {
                        label += "": ""
                }
                writer.WriteString(fmt.Sprintf(""%5d %s"", count, label))
                for _, u := range vertices {
                        writer.WriteString(fmt.Sprintf("" %d"", u))
                }
                writer.WriteString(""\n"")
        }
}","['package', 'main', 'import', '(', '""bufio""', '""fmt""', '""os""', '""strconv""', '""strings""', ')', 'func', 'main', '()', '{', '// Set up input and output.', 'reader', ':=', 'bufio', '.', 'NewReader', '(', 'os', '.', 'Stdin', ')', 'writer', ':=', 'bufio', '.', 'NewWriter', '(', 'os', '.', 'Stdout', ')', 'defer', 'writer', '.', 'Flush', '()', '// Get the number of vertices and number of cliques from the first line.', 'line', ',', 'err', ':=', 'reader', '.', 'ReadString', '(', 'n', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Fprintf', '(', 'os', '.', 'Stderr', ',', '""Error reading first line: %s\\n""', ',', 'err', ')', 'return', '}', 'var', 'numVertices', ',', 'numCliques', 'int', 'numScanned', ',', 'err', ':=', 'fmt', '.', 'Sscanf', '(', 'line', ',', '""%d %d""', ',', '&', 'numVertices', ',', '&', 'numCliques', ')', 'if', 'numScanned', '!=', '2', '||', 'err', '!=', 'nil', '{', 'fmt', '.', 'Fprintf', '(', 'os', '.', 'Stderr', ',', '""Error parsing input parameters: %s\\n""', ',', 'err', ')', 'return', '}', '// Initialize the edge counts and vertex counts.', 'edgeCounts', ':=', 'make', '([][]', 'int', ',', 'numVertices', '+', '1', ')', 'for', 'u', ':=', '1', ';', 'u', '<=', 'numVertices', ';', 'u', '++', '{', 'edgeCounts', '[', 'u', ']', '=', 'make', '([]', 'int', ',', 'numVertices', '+', '1', ')', '}', 'vertexCounts', ':=', 'make', '([]', 'int', ',', 'numVertices', '+', '1', ')', '// Read each clique and update the edge counts.', 'for', 'c', ':=', '0', ';', 'c', '<', 'numCliques', ';', 'c', '++', '{', 'line', ',', 'err', '=', 'reader', '.', 'ReadString', '(', 'n', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Fprintf', '(', 'os', '.', 'Stderr', ',', '""Error reading clique: %s\\n""', ',', 'err', ')', 'return', '}', 'tokens', ':=', 'strings', '.', 'Split', '(', 'strings', '.', 'TrimSpace', '(', 'line', '),', '"" ""', ')', 'clique', ':=', 'make', '([]', 'int', ',', 'len', '(', 'tokens', '))', 'for', 'i', ',', 'token', ':=', 'range', 'tokens', '{', 'u', ',', 'err', ':=', 'strconv', '.', 'Atoi', '(', 'token', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Fprintf', '(', 'os', '.', 'Stderr', ',', '""Atoi error: %s\\n""', ',', 'err', ')', 'return', '}', 'vertexCounts', '[', 'u', ']++', 'clique', '[', 'i', ']', '=', 'u', 'for', 'j', ':=', '0', ';', 'j', '<', 'i', ';', 'j', '++', '{', 'v', ':=', 'clique', '[', 'j', ']', 'edgeCounts', '[', 'u', '][', 'v', ']++', 'edgeCounts', '[', 'v', '][', 'u', ']++', '}', '}', '}', '// Compute the number of edges between each pair of vertices.', 'count2edges', ':=', 'make', '([][][]', 'int', ',', 'numCliques', '+', '1', ')', 'for', 'u', ':=', '1', ';', 'u', '<', 'numVertices', ';', 'u', '++', '{', 'for', 'v', ':=', 'u', '+', '1', ';', 'v', '<=', 'numVertices', ';', 'v', '++', '{', 'count', ':=', 'edgeCounts', '[', 'u', '][', 'v', ']', 'count2edges', '[', 'count', ']', '=', 'append', '(', 'count2edges', '[', 'count', '],', '[]', 'int', '{', 'u', ',', 'v', '})', '}', '}', 'writer', '.', 'WriteString', '(', '""Number of edges between pairs of vertices:\\n""', ')', 'for', 'count', ':=', 'numCliques', ';', 'count', '>=', '1', ';', 'count', '--', '{', 'edges', ':=', 'count2edges', '[', 'count', ']', 'if', 'len', '(', 'edges', ')', '==', '0', '{', 'continue', '}', 'label', ':=', '""edge""', 'if', 'count', '>', '1', '{', 'label', '+=', '""s:""', '}', 'else', '{', 'label', '+=', '"": ""', '}', 'writer', '.', 'WriteString', '(', 'fmt', '.', 'Sprintf', '(', '""%5d %s""', ',', 'count', ',', 'label', '))', 'for', '_', ',', 'edge', ':=', 'range', 'edges', '{', 'writer', '.', 'WriteString', '(', 'fmt', '.', 'Sprintf', '(', '"" (%d, %d)""', ',', 'edge', '[', '0', '],', 'edge', '[', '1', ']))', '}', 'writer', '.', 'WriteString', '(', '""\\n""', ')', '}', '// Group vertices according to the number of clique memberships.', 'count2vertices', ':=', 'make', '([][]', 'int', ',', 'numCliques', '+', '1', ')', 'for', 'u', ':=', '1', ';', 'u', '<=', 'numVertices', ';', 'u', '++', '{', 'count', ':=', 'vertexCounts', '[', 'u', ']', 'count2vertices', '[', 'count', ']', '=', 'append', '(', 'count2vertices', '[', 'count', '],', 'u', ')', '}', 'writer', '.', 'WriteString', '(', '""\\nNumber of cliques in which a vertex appears:\\n""', ')', 'for', 'count', ':=', 'numCliques', ';', 'count', '>=', '1', ';', 'count', '--', '{', 'vertices', ':=', 'count2vertices', '[', 'count', ']', 'if', 'len', '(', 'vertices', ')', '==', '0', '{', 'continue', '}', 'label', ':=', '""clique""', 'if', 'count', '>', '1', '{', 'label', '+=', '""s:""', '}', 'else', '{', 'label', '+=', '"": ""', '}', 'writer', '.', 'WriteString', '(', 'fmt', '.', 'Sprintf', '(', '""%5d %s""', ',', 'count', ',', 'label', '))', 'for', '_', ',', 'u', ':=', 'range', 'vertices', '{', 'writer', '.', 'WriteString', '(', 'fmt', '.', 'Sprintf', '(', '"" %d""', ',', 'u', '))', '}', 'writer', '.', 'WriteString', '(', '""\\n""', ')', '}', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'Set', 'up', 'input', 'and', 'output', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Get', 'the', 'number', 'of', 'vertices', 'and', 'number', 'of', 'cliques', 'from', 'the', 'first', 'line', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'Initialize', 'the', 'edge', 'counts', 'and', 'vertex', 'counts', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'comment', 'Read', 'each', 'clique', 'and', 'update', 'the', 'edge', 'counts', '.', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'comment', 'Compute', 'the', 'number', 'of', 'edges', 'between', 'each', 'pair', 'of', 'vertices', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'string_literal', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'comment', 'Group', 'vertices', 'according', 'to', 'the', 'number', 'of', 'clique', 'memberships', '.', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'string_literal', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator']",29786675
90,"func getLineup() {
    // Open Database
    db, err := sql.Open(""sqlite3"", ""./database.db"")
    if err != nil {
            fmt.Println(err)
            os.Exit(1)
    }
    defer db.Close()

    // Prepare Query
    statement, err := db.Prepare(""SELECT team, player FROM lineup ORDER BY team DESC;"")
    if err != nil {
            fmt.Println(err)
            os.Exit(1)
    }

    // Execute Statement
    rows, err := statement.Query()
    defer rows.Close()


    fmt.Println(""Lineup:"")

    for rows.Next() {
            var team string
            var player string
            rows.Scan(&team, &player)
            fmt.Printf(""%v %v\n"", team, player)
    }

}","['func', 'getLineup', '()', '{', '// Open Database', 'db', ',', 'err', ':=', 'sql', '.', 'Open', '(', '""sqlite3"", ""./database.db""', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', 'os', '.', 'Exit', '(', '1', ')', '}', 'defer', 'db', '.', 'Close', '()', '// Prepare Query', 'statement', ',', 'err', ':=', 'db', '.', 'Prepare', '(', '""SELECT team, player FROM lineup ORDER BY team DESC;""', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Println', '(', 'err', ')', 'os', '.', 'Exit', '(', '1', ')', '}', '// Execute Statement', 'rows', ',', 'err', ':=', 'statement', '.', 'Query', '()', 'defer', 'rows', '.', 'Close', '()', 'fmt', '.', 'Println', '(', '""Lineup:""', ')', 'for', 'rows', '.', 'Next', '()', '{', 'var', 'team', 'string', 'var', 'player', 'string', 'rows', '.', 'Scan', '(&', 'team', ',', '&', 'player', ')', 'fmt', '.', 'Printf', '(', '""%v %v\\n""', ',', 'team', ',', 'player', ')', '}', '}']","['keyword', 'identifier', 'operator', 'operator', 'comment', 'Open', 'Database', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Prepare', 'Query', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'comment', 'Execute', 'Statement', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator']",29831469
91,"package main

import (
    ""fmt""
    ""net/textproto""
    ""regexp""
    ""log""
    ""strings""
    ""database/sql""
    // SQLite3
    _ ""github.com/mattn/go-sqlite3""
)


type PrivMsg struct {
    nick, channel, text string
}

var (
    conn *textproto.Conn
    err  error

    ping    = regexp.MustCompile(""^PING :([a-zA-Z0-9\\.]+)$"")
    motd    = regexp.MustCompile("":End of /MOTD command\\.$"")
    privmsg = regexp.MustCompile(""^:([a-zA-Z0-9`_\\-]+)![a-zA-Z0-9/\\\\\\.\\-]+@[a-zA-Z0-9/\\\\\\.\\-]+ PRIVMSG (#[a-zA-Z0-9]+) :(.*)$"")
)


func talk(channel, msg string) {
    conn.Cmd(""PRIVMSG "" + channel + "" :"" + msg)
}


func handlePing(auth string) {
    conn.Cmd(""PONG :"" + auth)
    fmt.Printf(""PONG :%s\n"", auth)
}

type Player struct {
    TeamName string
    PlayerName string
}

func getLineup() {
    // Open Database
    db, err := sql.Open(""sqlite3"", ""./database.db"")
    if err != nil {
        log.Fatal(err)
    }

    // Prepare Query
    statement, err := db.Prepare(""SELECT team, player FROM lineup ORDER BY team DESC;"")
    if err != nil {
        log.Fatal(err)
    }

    // Execute Statement
    rows, err := statement.Query()
    defer rows.Close()


// Output Code
    var Players []*Player
    for rows.Next() {
        p := &Player{}
        if err := rows.Scan(p.TeamName, p.PlayerName); err != nil{
            log.Fatal(err)
        }
        //Players = append(Players, p)
        return p.TeamName, p.PlayerName
    }
    // pass Players to next function/return it whatever

    fmt.Println(Players)
}




func handlePrivmsg(pm *PrivMsg) {
    if strings.Contains(pm.text, ""!add t"") {
        talk(pm.channel, pm.nick + "" added to Terrorists"")
        saveLineup(""T"", pm.nick)
    }
    if strings.Contains(pm.text, ""!add ct"") {
        talk(pm.channel, pm.nick + "" added to Counter-Terrorists"")
        saveLineup(""CT"", pm.nick)
    }
    if strings.Contains(pm.text, ""!rem"") {
        talk(pm.channel, pm.nick + "" has been removed from the current lineup"")
    }
    if strings.Contains(pm.text, ""!votemap"") {
        talk(pm.channel, pm.nick + "" map vote code"")
    }
    if strings.Contains(pm.text, ""!moveme"") {
        talk(pm.channel, pm.nick + "" has been moved to Counter-Terrorists"")
    }
    if strings.Contains(pm.text, ""!teams"") {
        getLineup()
        //fmt.Println(*tpList)
        talk(pm.channel, pm.nick + "" will show the current teams"")
    }
    if strings.Contains(pm.text, ""!add ct"") {
        talk(pm.channel, pm.nick + "" added to Counter-Terrorists"")
    }
    if strings.Contains(pm.text, ""pug-bot"") {
        talk(pm.channel, ""Hello, "" + pm.nick + ""!"")
    }
}


func saveLineup(Team, Player string) {

    // Open Database
    db, err := sql.Open(""sqlite3"", ""./database.db"")
    if err != nil {
        //log.Fatal(err)
        fmt.Printf(""%s"", err)
    }

    // Get Current Lineup
    rows, err := db.Query(""SELECT team, player FROM lineup WHERE player = ?;"", Player)
    if err != nil {
        log.Fatal(err)
    }
    defer rows.Close()

    if Player == Player {
        fmt.Println(""You have already added yourself"")
    } else {
        // Insert new Player
        db.Exec(
            ""INSERT INTO lineup (team, player) VALUES (?, ?);"",
            Team,
            Player,
        )
    }

}


func handleMotd() {
    conn.Cmd(""JOIN #ircchannel"")
    fmt.Println(""JOIN #ircchannel"")
}


func parseLine(line string) {
    // Channel activity
    if match := privmsg.FindStringSubmatch(line); match != nil {
        pm := new(PrivMsg)
        pm.nick, pm.channel, pm.text = match[1], match[2], match[3]
        handlePrivmsg(pm)
        return
    }

    // Server PING
    if match := ping.FindStringSubmatch(line); match != nil {
        handlePing(match[1])
        return
    }

    // End of MOTD (successful login to IRC server)
    if match := motd.FindString(line); match != """" {
        handleMotd()
        return
    }
}

func main() {
    conn, err = textproto.Dial(""tcp"", ""irc.server.org:6667"")
    if err != nil {
        fmt.Printf(""%s"", err)
        return
    }

    conn.Cmd(""NICK pug-bot\n\rUSER pug-bot 8 * :pAsSwOrD"")

    for {
        text, err := conn.ReadLine()
        if err != nil {
            fmt.Printf(""%s"", err)
            return
        }

        go parseLine(text)

        fmt.Println(text)
    }


}","['package', 'main', 'import', '(', '""fmt""', '""net/textproto""', '""regexp""', '""log""', '""strings""', '""database/sql""', '// SQLite3', '_', '""github.com/mattn/go-sqlite3""', ')', 'type', 'PrivMsg', 'struct', '{', 'nick', ',', 'chan', 'nel', ',', 'text', 'string', '}', 'var', '(', 'conn', '*', 'textproto', '.', 'Conn', 'err', 'error', 'ping', '=', 'regexp', '.', 'MustCompile', '(', '""^PING :([a-zA-Z0-9\\\\.]+)$""', ')', 'motd', '=', 'regexp', '.', 'MustCompile', '(', '"":End of /MOTD command\\\\.$""', ')', 'privmsg', '=', 'regexp', '.', 'MustCompile', '(', '""^:([a-zA-Z0-9`_\\\\-]+)![a-zA-Z0-9/\\\\\\\\\\\\.\\\\-]+@[a-zA-Z0-9/\\\\\\\\\\\\.\\\\-]+ PRIVMSG (#[a-zA-Z0-9]+) :(.*)$""', ')', ')', 'func', 'talk', '(', 'chan', 'nel', ',', 'msg', 'string', ')', '{', 'conn', '.', 'Cmd', '(', '""PRIVMSG "" + channel + "" :""', '+', 'msg', ')', '}', 'func', 'handlePing', '(', 'auth', 'string', ')', '{', 'conn', '.', 'Cmd', '(', '""PONG :""', '+', 'auth', ')', 'fmt', '.', 'Printf', '(', '""PONG :%s\\n""', ',', 'auth', ')', '}', 'type', 'Player', 'struct', '{', 'TeamName', 'string', 'PlayerName', 'string', '}', 'func', 'getLineup', '()', '{', '// Open Database', 'db', ',', 'err', ':=', 'sql', '.', 'Open', '(', '""sqlite3"", ""./database.db""', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', '// Prepare Query', 'statement', ',', 'err', ':=', 'db', '.', 'Prepare', '(', '""SELECT team, player FROM lineup ORDER BY team DESC;""', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', '// Execute Statement', 'rows', ',', 'err', ':=', 'statement', '.', 'Query', '()', 'defer', 'rows', '.', 'Close', '()', '// Output Code', 'var', 'Players', '[]*', 'Player', 'for', 'rows', '.', 'Next', '()', '{', 'p', ':=', '&', 'Player', '{}', 'if', 'err', ':=', 'rows', '.', 'Scan', '(', 'p', '.', 'TeamName', ',', 'p', '.', 'PlayerName', ');', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', '//Players = append(Players, p)', 'return', 'p', '.', 'TeamName', ',', 'p', '.', 'PlayerName', '}', '// pass Players to next function/return it whatever', 'fmt', '.', 'Println', '(', 'Players', ')', '}', 'func', 'handlePrivmsg', '(', 'pm', '*', 'PrivMsg', ')', '{', 'if', 'strings', '.', 'Contains', '(', 'pm', '.', 'text', ',', '""!add t""', ')', '{', 'talk', '(', 'pm', '.', 'chan', 'nel', ',', 'pm', '.', 'nick', '+', '"" added to Terrorists""', ')', 'saveLineup', '(', '""T""', ',', 'pm', '.', 'nick', ')', '}', 'if', 'strings', '.', 'Contains', '(', 'pm', '.', 'text', ',', '""!add ct""', ')', '{', 'talk', '(', 'pm', '.', 'chan', 'nel', ',', 'pm', '.', 'nick', '+', '"" added to Counter-Terrorists""', ')', 'saveLineup', '(', '""CT""', ',', 'pm', '.', 'nick', ')', '}', 'if', 'strings', '.', 'Contains', '(', 'pm', '.', 'text', ',', '""!rem""', ')', '{', 'talk', '(', 'pm', '.', 'chan', 'nel', ',', 'pm', '.', 'nick', '+', '"" has been removed from the current lineup""', ')', '}', 'if', 'strings', '.', 'Contains', '(', 'pm', '.', 'text', ',', '""!votemap""', ')', '{', 'talk', '(', 'pm', '.', 'chan', 'nel', ',', 'pm', '.', 'nick', '+', '"" map vote code""', ')', '}', 'if', 'strings', '.', 'Contains', '(', 'pm', '.', 'text', ',', '""!moveme""', ')', '{', 'talk', '(', 'pm', '.', 'chan', 'nel', ',', 'pm', '.', 'nick', '+', '"" has been moved to Counter-Terrorists""', ')', '}', 'if', 'strings', '.', 'Contains', '(', 'pm', '.', 'text', ',', '""!teams""', ')', '{', 'getLineup', '()', '//fmt.Println(*tpList)', 'talk', '(', 'pm', '.', 'chan', 'nel', ',', 'pm', '.', 'nick', '+', '"" will show the current teams""', ')', '}', 'if', 'strings', '.', 'Contains', '(', 'pm', '.', 'text', ',', '""!add ct""', ')', '{', 'talk', '(', 'pm', '.', 'chan', 'nel', ',', 'pm', '.', 'nick', '+', '"" added to Counter-Terrorists""', ')', '}', 'if', 'strings', '.', 'Contains', '(', 'pm', '.', 'text', ',', '""pug-bot""', ')', '{', 'talk', '(', 'pm', '.', 'chan', 'nel', ',', '""Hello, "" + pm.nick + ""!""', ')', '}', '}', 'func', 'saveLineup', '(', 'Team', ',', 'Player', 'string', ')', '{', '// Open Database', 'db', ',', 'err', ':=', 'sql', '.', 'Open', '(', '""sqlite3"", ""./database.db""', ')', 'if', 'err', '!=', 'nil', '{', '//log.Fatal(err)', 'fmt', '.', 'Printf', '(', '""%s""', ',', 'err', ')', '}', '// Get Current Lineup', 'rows', ',', 'err', ':=', 'db', '.', 'Query', '(', '""SELECT team, player FROM lineup WHERE player = ?;""', ',', 'Player', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'defer', 'rows', '.', 'Close', '()', 'if', 'Player', '==', 'Player', '{', 'fmt', '.', 'Println', '(', '""You have already added yourself""', ')', '}', 'else', '{', '// Insert new Player', 'db', '.', 'Exec', '(', '""INSERT INTO lineup (team, player) VALUES (?, ?);""', ',', 'Team', ',', 'Player', ',', ')', '}', '}', 'func', 'handleMotd', '()', '{', 'conn', '.', 'Cmd', '(', '""JOIN #ircchannel""', ')', 'fmt', '.', 'Println', '(', '""JOIN #ircchannel""', ')', '}', 'func', 'parseLine', '(', 'line', 'string', ')', '{', '// Channel activity', 'if', 'match', ':=', 'privmsg', '.', 'FindStringSubmatch', '(', 'line', ');', 'match', '!=', 'nil', '{', 'pm', ':=', 'new', '(', 'PrivMsg', ')', 'pm', '.', 'nick', ',', 'pm', '.', 'chan', 'nel', ',', 'pm', '.', 'text', '=', 'match', '[', '1', '],', 'match', '[', '2', '],', 'match', '[', '3', ']', 'handlePrivmsg', '(', 'pm', ')', 'return', '}', '// Server PING', 'if', 'match', ':=', 'ping', '.', 'FindStringSubmatch', '(', 'line', ');', 'match', '!=', 'nil', '{', 'handlePing', '(', 'match', '[', '1', '])', 'return', '}', '// End of MOTD (successful login to IRC server)', 'if', 'match', ':=', 'motd', '.', 'FindString', '(', 'line', ');', 'match', '!=', '""""', '{', 'handleMotd', '()', 'return', '}', '}', 'func', 'main', '()', '{', 'conn', ',', 'err', '=', 'textproto', '.', 'Dial', '(', '""tcp"", ""irc.server.org:6667""', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""%s""', ',', 'err', ')', 'return', '}', 'conn', '.', 'Cmd', '(', '""NICK pug-bot\\n\\rUSER pug-bot 8 * :pAsSwOrD""', ')', 'for', '{', 'text', ',', 'err', ':=', 'conn', '.', 'ReadLine', '()', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""%s""', ',', 'err', ')', 'return', '}', 'go', 'parseLine', '(', 'text', ')', 'fmt', '.', 'Println', '(', 'text', ')', '}', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'comment', 'SQLite3', 'identifier', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'comment', 'Open', 'Database', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Prepare', 'Query', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Execute', 'Statement', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Output', 'Code', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Players', '=', 'append', '(', 'Players', ',', 'p', ')', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'pass', 'Players', 'to', 'next', 'function/return', 'it', 'whatever', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'comment', 'fmt.Println', '(', '*tpList', ')', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'comment', 'Open', 'Database', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'log.Fatal', '(', 'err', ')', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Get', 'Current', 'Lineup', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'operator', 'comment', 'Insert', 'new', 'Player', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'comment', 'Channel', 'activity', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'Server', 'PING', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'keyword', 'operator', 'comment', 'End', 'of', 'MOTD', '(', 'successful', 'login', 'to', 'IRC', 'server', ')', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator']",29831469
92,"package example

import (
    ""crypto""
    ""crypto/rsa""
    ""crypto/sha256""
    ""crypto/x509""
    ""fmt""
)

func Verify(key []byte, sig []byte, msg []byte) error {
    digest := sha256.Sum256(msg)

    pub, err := x509.ParsePKIXPublicKey(key)
    if err != nil {
        return fmt.Errorf(""Failed to parse key"")
    }

    rsaPub, ok := pub.(*rsa.PublicKey)
    if !ok {
        return fmt.Errorf(""Invalid value returned from ParsePKIXPublicKey"")
    }

    opts := rsa.PSSOptions{SaltLength: 16, Hash: crypto.SHA256}
    if err = rsa.VerifyPSS(rsaPub, crypto.SHA256, digest[:], sig, &opts); err != nil {
        return fmt.Errorf(""Failed Verification"")
    }
    return nil
}","['package', 'example', 'import', '(', '""crypto""', '""crypto/rsa""', '""crypto/sha256""', '""crypto/x509""', '""fmt""', ')', 'func', 'Verify', '(', 'key', '[]', 'byte', ',', 'sig', '[]', 'byte', ',', 'msg', '[]', 'byte', ')', 'error', '{', 'digest', ':=', 'sha256', '.', 'Sum256', '(', 'msg', ')', 'pub', ',', 'err', ':=', 'x509', '.', 'ParsePKIXPublicKey', '(', 'key', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'fmt', '.', 'Errorf', '(', '""Failed to parse key""', ')', '}', 'rsaPub', ',', 'ok', ':=', 'pub', '.(*', 'rsa', '.', 'PublicKey', ')', 'if', '!', 'ok', '{', 'return', 'fmt', '.', 'Errorf', '(', '""Invalid value returned from ParsePKIXPublicKey""', ')', '}', 'opts', ':=', 'rsa', '.', 'PSSOptions', '{', 'SaltLength', ':', '16', ',', 'Hash', ':', 'crypto', '.', 'SHA256', '}', 'if', 'err', '=', 'rsa', '.', 'VerifyPSS', '(', 'rsaPub', ',', 'crypto', '.', 'SHA256', ',', 'digest', '[:],', 'sig', ',', '&', 'opts', ');', 'err', '!=', 'nil', '{', 'return', 'fmt', '.', 'Errorf', '(', '""Failed Verification""', ')', '}', 'return', 'nil', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'keyword', 'identifier', 'operator']",30495284
93,"package galileo

import (
    ""encoding/json""
    ""golang.org/x/net/context""
    ""golang.org/x/oauth2""
    ""golang.org/x/oauth2/google""
    ""google.golang.org/appengine""
    ""google.golang.org/appengine/file""
    ""google.golang.org/appengine/urlfetch""
    ""google.golang.org/cloud""
    ""google.golang.org/cloud/storage""
    ""io""
    ""io/ioutil""
    ""log""
    ""net/http""
)

var bucket = ""prod_agl_expt""

// saveData struct holds information needed to run the various saving functions.
type saveData struct {
    c       context.Context
    r       *http.Request       //http response
    w       http.ResponseWriter //http writer
    ctx     context.Context
    cleanUp []string // cleanUp is a list of filenames that need cleaning up at the end of the saving.
    failed  bool     // failed indicates that one or more of the saving steps failed.
}

// saveData struct holds information needed to run the various saving functions.
type loadData struct {
    c       context.Context
    r       *http.Request       //http response
    w       http.ResponseWriter //http writer
    ctx     context.Context
    cleanUp []string // cleanUp is a list of filenames that need cleaning up at the end of the saving.
    failed  bool     // failed indicates that one or more of the saving steps failed.
}

type jsonStruct struct {
    User struct {
        Gender string `json:""gender""`
        Age    string `json:""age""`
        ID     string `json:""id""`
    } `json:""user""`
    Stim map[string]struct {
        Index           int    `json:""index""`
        Word            string `json:""word""`
        WordDisplayTime int    `json:""wordDisplayTime""`
        AnswerMaxTime   int    `json:""answerMaxTime""`
        FixationTime    int    `json:""fixationTime""`
        Train           bool   `json:""train""`
        Test            bool   `json:""test""`
        Grammatical     bool   `json:""grammatical""`
        Grammar         string `json:""grammar""`
        Keyboard        bool   `json:""keyboard""`
        TestSeq         int    `json:""testSeq""`
    } `json:""viewedTrials""`
    Answers struct {
        Training []struct {
            Answer   string  `json:""ans""`
            RT       float32 `json:""RT""`
            GtAnswer string  `json:""gtAns""`
            Correct  int     `json:""correct""`
        } `json:""training""`
        Test []struct {
            Answer   string  `json:""ans""`
            RT       float32 `json:""RT""`
            GtAnswer bool    `json:""gtAns""`
            Correct  int     `json:""correct""`
        } `json:""test""`
    } `json:""answers""`
    Trials []struct {
        Trial struct {
            Index           int    `json:""index""`
            Word            string `json:""word""`
            WordDisplayTime int    `json:""wordDisplayTime""`
            AnswerMaxTime   int    `json:""answerMaxTime""`
            FixationTime    int    `json:""fixationTime""`
            Train           bool   `json:""train""`
            Test            bool   `json:""test""`
            Grammatical     bool   `json:""grammatical""`
            Grammar         string `json:""grammar""`
            Keyboard        bool   `json:""keyboard""`
            TestSeq         int    `json:""testSeq""`
        } `json:""trial""`
        Metadata struct {
            Instructions string `json:""instructions""`
            SubmitUrl    string `json:""submitUrl""`
        } `json:""metadata""`
    } `json:""shuffledTrials""`
    Debriefing []struct {
        Type             string `json:""type""`
        RadioWithTextAns string `json:""radioWithTextAns""`
        TextAns          string `json:""textAns""`
        Rating           int    `json:""rating""`
        RadioOnlyAns     string `json:""radioOnlyAns""`
    } `json:""debriefingAns""`
}

type trialStruct []struct {
    Trial struct {
        Index           int    `json:""index""`
        Word            string `json:""word""`
        WordDisplayTime int    `json:""wordDisplayTime""`
        AnswerMaxTime   int    `json:""answerMaxTime""`
        FixationTime    int    `json:""fixationTime""`
        Train           bool   `json:""train""`
        Test            bool   `json:""test""`
        Grammatical     bool   `json:""grammatical""`
        Grammar         string `json:""grammar""`
        Keyboard        bool   `json:""keyboard""`
        TestSeq         int    `json:""testSeq""`
    } `json:""trial""`
    Metadata struct {
        Instructions string `json:""instructions""`
        SubmitUrl    string `json:""submitUrl""`
    } `json:""metadata""`
}

func fromJSON(r io.Reader) (jsonStruct, error) {
    var x jsonStruct
    dec := json.NewDecoder(r)
    err := dec.Decode(&x)
    return x, err
}

func toJSON(b io.Writer, trial trialStruct) (io.Writer, error) {
    enc := json.NewEncoder(b)
    err := enc.Encode(&trial)
    return b, err
}

func init() {
    http.HandleFunc(""/"", handleStatic)
    http.HandleFunc(""/saveUserData"", handleSaveUser)
    http.HandleFunc(""/loadTrials"", handleloadTrials)
}

func handleStatic(w http.ResponseWriter, r *http.Request) {
    w.Header().Set(""Cache-Control"", ""no-cache"")
    http.ServeFile(w, r, ""static/""+r.URL.Path)
}

// testSave is the main saving entry point that calls the GCS operations.
func handleSaveUser(w http.ResponseWriter, r *http.Request) {

    c := appengine.NewContext(r)
    if bucket == """" {
        var err error
        if bucket, err = file.DefaultBucketName(c); err != nil {
            // log.Errorf(c, ""failed to get default GCS bucket name: %v"", err)
            return
        }
    }
    hc := &http.Client{
        Transport: &oauth2.Transport{
            Source: google.AppEngineTokenSource(c, storage.ScopeFullControl),
            Base:   &urlfetch.Transport{Context: c},
        },
    }
    ctx := cloud.NewContext(appengine.AppID(c), hc)

    // structure to holds information needed to run the various saving functions
    d := &saveData{
        c:   c,
        r:   r,
        w:   w,
        ctx: ctx,
    }

    // retrieve data
    processedJson, trials, trainAns, testAns, stimSeq, userDetails, debriefingAns, rawJson := getJsonUserData(d.r, d.w)
    //
    d.createUserFolder(processedJson.User.ID)
    // d.saveJson(k.User.ID, ""raw"", z)
    d.saveJson(processedJson.User.ID, ""trials"", trials)
    d.saveJson(processedJson.User.ID, ""train"", trainAns)
    d.saveJson(processedJson.User.ID, ""test"", testAns)
    d.saveJson(processedJson.User.ID, ""stim"", stimSeq)
    d.saveJson(processedJson.User.ID, ""user"", userDetails)
    d.saveJson(processedJson.User.ID, ""debriefing"", debriefingAns)
    d.saveJson(processedJson.User.ID, ""raw"", rawJson)
}

// Deal with error
func (d *saveData) errorf(format string, args ...interface{}) {
    d.failed = true
}

func getJsonUserData(r *http.Request, w http.ResponseWriter) (jsonStruct, []byte, []byte, []byte, []byte, []byte, []byte, []byte) {
    defer r.Body.Close()

    procJson, err := fromJSON(r.Body)
    if err != nil {
        log.Fatal(err)
    }
    log.Printf(""initial structure: "", procJson)
    log.Printf(""%+v\n"", procJson)
    trials, err := json.Marshal(procJson.Trials)
    if err != nil {
        log.Fatal(err)
    }
    trainAns, err := json.Marshal(procJson.Answers.Training)
    if err != nil {
        log.Fatal(err)
    }
    testAns, err := json.Marshal(procJson.Answers.Test)
    if err != nil {
        log.Fatal(err)
    }
    stimSeq, err := json.Marshal(procJson.Stim)
    if err != nil {
        log.Fatal(err)
    }
    userDetail, err := json.Marshal(procJson.User)
    if err != nil {
        log.Fatal(err)
    }
    debriefingAns, err := json.Marshal(procJson.Debriefing)
    if err != nil {
        log.Fatal(err)
    }
    rawJson, err := json.Marshal(procJson)
    if err != nil {
        log.Fatal(err)
    }
    return procJson, trials, trainAns, testAns, stimSeq, userDetail, debriefingAns, rawJson
}

func (d *saveData) createUserFolder(folderName string) {
    fName := folderName + ""/""
    wc := storage.NewWriter(d.ctx, bucket, fName)
    wc.ContentType = ""text/plain""
    d.cleanUp = append(d.cleanUp, fName)

    if err := wc.Close(); err != nil {
        d.errorf(""createFile: unable to close bucket %q, file %q: %v"", bucket, fName, err)
        return
    }

}

func (d *saveData) saveJson(folderName string, fileName string, fileContent []byte) {
    fullName := folderName + ""/"" + fileName
    wc := storage.NewWriter(d.ctx, bucket, fullName)
    wc.ContentType = ""text/plain""
    d.cleanUp = append(d.cleanUp, fullName)
    d.createFile(fullName, fileContent)

}

func (d *saveData) createFile(fileName string, content []byte) {

    wc := storage.NewWriter(d.ctx, bucket, fileName)
    wc.ContentType = ""text/plain""
    d.cleanUp = append(d.cleanUp, fileName)

    if _, err := wc.Write([]byte(content)); err != nil {
        d.errorf(""createFile: unable to write data to bucket %q, file %q: %v"", bucket, fileName, err)
        return
    }
    if err := wc.Close(); err != nil {
        d.errorf(""createFile: unable to close bucket %q, file %q: %v"", bucket, fileName, err)
        return
    }
}

func handleloadTrials(w http.ResponseWriter, r *http.Request) {
    c := appengine.NewContext(r)
    if bucket == """" {
        var err error
        if bucket, err = file.DefaultBucketName(c); err != nil {
            // log.Errorf(c, ""failed to get default GCS bucket name: %v"", err)
            return
        }
    }
    hc := &http.Client{
        Transport: &oauth2.Transport{
            Source: google.AppEngineTokenSource(c, storage.ScopeFullControl),
            Base:   &urlfetch.Transport{Context: c},
        },
    }
    ctx := cloud.NewContext(appengine.AppID(c), hc)

    // structure to holds information needed to run the various saving functions
    d := &saveData{
        c:   c,
        r:   r,
        w:   w,
        ctx: ctx,
    }

    userID := r.URL.Query().Get(""id"")
    log.Println(userID)
    trialJson := d.readFile(userID)
    w.Write(trialJson)
}

// readFile reads the named file in Google Cloud Storage.
func (d *saveData) readFile(fileName string) []byte {
    trialName := fileName + ""/trials""
    rc, err := storage.NewReader(d.ctx, bucket, trialName)
    if err != nil {
        d.errorf(""readFile: unable to open file from bucket %q, file %q: %v"", bucket, trialName, err)

    }
    defer rc.Close()
    slurp, err := ioutil.ReadAll(rc)
    if err != nil {
        d.errorf(""readFile: unable to read data from bucket %q, file %q: %v"", bucket, fileName, err)
    }
    return slurp
}","['package', 'galileo', 'import', '(', '""encoding/json""', '""golang.org/x/net/context""', '""golang.org/x/oauth2""', '""golang.org/x/oauth2/google""', '""google.golang.org/appengine""', '""google.golang.org/appengine/file""', '""google.golang.org/appengine/urlfetch""', '""google.golang.org/cloud""', '""google.golang.org/cloud/storage""', '""io""', '""io/ioutil""', '""log""', '""net/http""', ')', 'var', 'bucket', '=', '""prod_agl_expt""', '// saveData struct holds information needed to run the various saving functions.', 'type', 'saveData', 'struct', '{', 'c', 'context', '.', 'Context', 'r', '*', 'http', '.', 'Request', '//http response', 'w', 'http', '.', 'ResponseWriter', '//http writer', 'ctx', 'context', '.', 'Context', 'cleanUp', '[]', 'string', '// cleanUp is a list of filenames that need cleaning up at the end of the saving.', 'failed', 'bool', '// failed indicates that one or more of the saving steps failed.', '}', '// saveData struct holds information needed to run the various saving functions.', 'type', 'loadData', 'struct', '{', 'c', 'context', '.', 'Context', 'r', '*', 'http', '.', 'Request', '//http response', 'w', 'http', '.', 'ResponseWriter', '//http writer', 'ctx', 'context', '.', 'Context', 'cleanUp', '[]', 'string', '// cleanUp is a list of filenames that need cleaning up at the end of the saving.', 'failed', 'bool', '// failed indicates that one or more of the saving steps failed.', '}', 'type', 'jsonStruct', 'struct', '{', 'User', 'struct', '{', 'Gender', 'string', 'json', ':', '""gender""', 'Age', 'string', 'json', ':', '""age""', 'ID', 'string', 'json', ':', '""id""', '}', 'json', ':', '""user""', 'Stim', 'map', '[', 'string', ']', 'struct', '{', 'Index', 'int', 'json', ':', '""index""', 'Word', 'string', 'json', ':', '""word""', 'WordDisplayTime', 'int', 'json', ':', '""wordDisplayTime""', 'AnswerMaxTime', 'int', 'json', ':', '""answerMaxTime""', 'FixationTime', 'int', 'json', ':', '""fixationTime""', 'Train', 'bool', 'json', ':', '""train""', 'Test', 'bool', 'json', ':', '""test""', 'Grammatical', 'bool', 'json', ':', '""grammatical""', 'Grammar', 'string', 'json', ':', '""grammar""', 'Keyboard', 'bool', 'json', ':', '""keyboard""', 'TestSeq', 'int', 'json', ':', '""testSeq""', '}', 'json', ':', '""viewedTrials""', 'Answers', 'struct', '{', 'Training', '[]', 'struct', '{', 'Answer', 'string', 'json', ':', '""ans""', 'RT', 'float32', 'json', ':', '""RT""', 'GtAnswer', 'string', 'json', ':', '""gtAns""', 'Correct', 'int', 'json', ':', '""correct""', '}', 'json', ':', '""training""', 'Test', '[]', 'struct', '{', 'Answer', 'string', 'json', ':', '""ans""', 'RT', 'float32', 'json', ':', '""RT""', 'GtAnswer', 'bool', 'json', ':', '""gtAns""', 'Correct', 'int', 'json', ':', '""correct""', '}', 'json', ':', '""test""', '}', 'json', ':', '""answers""', 'Trials', '[]', 'struct', '{', 'Trial', 'struct', '{', 'Index', 'int', 'json', ':', '""index""', 'Word', 'string', 'json', ':', '""word""', 'WordDisplayTime', 'int', 'json', ':', '""wordDisplayTime""', 'AnswerMaxTime', 'int', 'json', ':', '""answerMaxTime""', 'FixationTime', 'int', 'json', ':', '""fixationTime""', 'Train', 'bool', 'json', ':', '""train""', 'Test', 'bool', 'json', ':', '""test""', 'Grammatical', 'bool', 'json', ':', '""grammatical""', 'Grammar', 'string', 'json', ':', '""grammar""', 'Keyboard', 'bool', 'json', ':', '""keyboard""', 'TestSeq', 'int', 'json', ':', '""testSeq""', '}', 'json', ':', '""trial""', 'Metadata', 'struct', '{', 'Instructions', 'string', 'json', ':', '""instructions""', 'SubmitUrl', 'string', 'json', ':', '""submitUrl""', '}', 'json', ':', '""metadata""', '}', 'json', ':', '""shuffledTrials""', 'Debriefing', '[]', 'struct', '{', 'Type', 'string', 'json', ':', '""type""', 'RadioWithTextAns', 'string', 'json', ':', '""radioWithTextAns""', 'TextAns', 'string', 'json', ':', '""textAns""', 'Rating', 'int', 'json', ':', '""rating""', 'RadioOnlyAns', 'string', 'json', ':', '""radioOnlyAns""', '}', 'json', ':', '""debriefingAns""', '}', 'type', 'trialStruct', '[]', 'struct', '{', 'Trial', 'struct', '{', 'Index', 'int', 'json', ':', '""index""', 'Word', 'string', 'json', ':', '""word""', 'WordDisplayTime', 'int', 'json', ':', '""wordDisplayTime""', 'AnswerMaxTime', 'int', 'json', ':', '""answerMaxTime""', 'FixationTime', 'int', 'json', ':', '""fixationTime""', 'Train', 'bool', 'json', ':', '""train""', 'Test', 'bool', 'json', ':', '""test""', 'Grammatical', 'bool', 'json', ':', '""grammatical""', 'Grammar', 'string', 'json', ':', '""grammar""', 'Keyboard', 'bool', 'json', ':', '""keyboard""', 'TestSeq', 'int', 'json', ':', '""testSeq""', '}', 'json', ':', '""trial""', 'Metadata', 'struct', '{', 'Instructions', 'string', 'json', ':', '""instructions""', 'SubmitUrl', 'string', 'json', ':', '""submitUrl""', '}', 'json', ':', '""metadata""', '}', 'func', 'fromJSON', '(', 'r', 'io', '.', 'Reader', ')', '(', 'jsonStruct', ',', 'error', ')', '{', 'var', 'x', 'jsonStruct', 'dec', ':=', 'json', '.', 'NewDecoder', '(', 'r', ')', 'err', ':=', 'dec', '.', 'Decode', '(&', 'x', ')', 'return', 'x', ',', 'err', '}', 'func', 'toJSON', '(', 'b', 'io', '.', 'Writer', ',', 'trial', 'trialStruct', ')', '(', 'io', '.', 'Writer', ',', 'error', ')', '{', 'enc', ':=', 'json', '.', 'NewEncoder', '(', 'b', ')', 'err', ':=', 'enc', '.', 'Encode', '(&', 'trial', ')', 'return', 'b', ',', 'err', '}', 'func', 'init', '()', '{', 'http', '.', 'HandleFunc', '(', '""/""', ',', 'handleStatic', ')', 'http', '.', 'HandleFunc', '(', '""/saveUserData""', ',', 'handleSaveUser', ')', 'http', '.', 'HandleFunc', '(', '""/loadTrials""', ',', 'handleloadTrials', ')', '}', 'func', 'handleStatic', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'w', '.', 'Header', '().', 'Set', '(', '""Cache-Control"", ""no-cache""', ')', 'http', '.', 'ServeFile', '(', 'w', ',', 'r', ',', '""static/""', '+', 'r', '.', 'URL', '.', 'Path', ')', '}', '// testSave is the main saving entry point that calls the GCS operations.', 'func', 'handleSaveUser', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'c', ':=', 'appengine', '.', 'NewContext', '(', 'r', ')', 'if', 'bucket', '==', '""""', '{', 'var', 'err', 'error', 'if', 'bucket', ',', 'err', '=', 'file', '.', 'DefaultBucketName', '(', 'c', ');', 'err', '!=', 'nil', '{', '// log.Errorf(c, ""failed to get default GCS bucket name: %v"", err)', 'return', '}', '}', 'hc', ':=', '&', 'http', '.', 'Client', '{', 'Transport', ':', '&', 'oauth2', '.', 'Transport', '{', 'Source', ':', 'go', 'ogle', '.', 'AppEngineTokenSource', '(', 'c', ',', 'storage', '.', 'ScopeFullControl', '),', 'Base', ':', '&', 'urlfetch', '.', 'Transport', '{', 'Context', ':', 'c', '},', '},', '}', 'ctx', ':=', 'cloud', '.', 'NewContext', '(', 'appengine', '.', 'AppID', '(', 'c', '),', 'hc', ')', '// structure to holds information needed to run the various saving functions', 'd', ':=', '&', 'saveData', '{', 'c', ':', 'c', ',', 'r', ':', 'r', ',', 'w', ':', 'w', ',', 'ctx', ':', 'ctx', ',', '}', '// retrieve data', 'processedJson', ',', 'trials', ',', 'trainAns', ',', 'testAns', ',', 'stimSeq', ',', 'userDetails', ',', 'debriefingAns', ',', 'rawJson', ':=', 'getJsonUserData', '(', 'd', '.', 'r', ',', 'd', '.', 'w', ')', '//', 'd', '.', 'createUserFolder', '(', 'processedJson', '.', 'User', '.', 'ID', ')', '// d.saveJson(k.User.ID, ""raw"", z)', 'd', '.', 'saveJson', '(', 'processedJson', '.', 'User', '.', 'ID', ',', '""trials""', ',', 'trials', ')', 'd', '.', 'saveJson', '(', 'processedJson', '.', 'User', '.', 'ID', ',', '""train""', ',', 'trainAns', ')', 'd', '.', 'saveJson', '(', 'processedJson', '.', 'User', '.', 'ID', ',', '""test""', ',', 'testAns', ')', 'd', '.', 'saveJson', '(', 'processedJson', '.', 'User', '.', 'ID', ',', '""stim""', ',', 'stimSeq', ')', 'd', '.', 'saveJson', '(', 'processedJson', '.', 'User', '.', 'ID', ',', '""user""', ',', 'userDetails', ')', 'd', '.', 'saveJson', '(', 'processedJson', '.', 'User', '.', 'ID', ',', '""debriefing""', ',', 'debriefingAns', ')', 'd', '.', 'saveJson', '(', 'processedJson', '.', 'User', '.', 'ID', ',', '""raw""', ',', 'rawJson', ')', '}', '// Deal with error', 'func', '(', 'd', '*', 'saveData', ')', 'errorf', '(', 'for', 'mat', 'string', ',', 'args', '...', 'interface', '{})', '{', 'd', '.', 'failed', '=', 'true', '}', 'func', 'getJsonUserData', '(', 'r', '*', 'http', '.', 'Request', ',', 'w', 'http', '.', 'ResponseWriter', ')', '(', 'jsonStruct', ',', '[]', 'byte', ',', '[]', 'byte', ',', '[]', 'byte', ',', '[]', 'byte', ',', '[]', 'byte', ',', '[]', 'byte', ',', '[]', 'byte', ')', '{', 'defer', 'r', '.', 'Body', '.', 'Close', '()', 'procJson', ',', 'err', ':=', 'fromJSON', '(', 'r', '.', 'Body', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'log', '.', 'Printf', '(', '""initial structure: ""', ',', 'procJson', ')', 'log', '.', 'Printf', '(', '""%+v\\n""', ',', 'procJson', ')', 'trials', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'procJson', '.', 'Trials', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'trainAns', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'procJson', '.', 'Answers', '.', 'Training', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'testAns', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'procJson', '.', 'Answers', '.', 'Test', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'stimSeq', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'procJson', '.', 'Stim', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'userDetail', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'procJson', '.', 'User', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'debriefingAns', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'procJson', '.', 'Debriefing', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'rawJson', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'procJson', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', 'err', ')', '}', 'return', 'procJson', ',', 'trials', ',', 'trainAns', ',', 'testAns', ',', 'stimSeq', ',', 'userDetail', ',', 'debriefingAns', ',', 'rawJson', '}', 'func', '(', 'd', '*', 'saveData', ')', 'createUserFolder', '(', 'folderName', 'string', ')', '{', 'fName', ':=', 'folderName', '+', '""/""', 'wc', ':=', 'storage', '.', 'NewWriter', '(', 'd', '.', 'ctx', ',', 'bucket', ',', 'fName', ')', 'wc', '.', 'ContentType', '=', '""text/plain""', 'd', '.', 'cleanUp', '=', 'append', '(', 'd', '.', 'cleanUp', ',', 'fName', ')', 'if', 'err', ':=', 'wc', '.', 'Close', '();', 'err', '!=', 'nil', '{', 'd', '.', 'errorf', '(', '""createFile: unable to close bucket %q, file %q: %v""', ',', 'bucket', ',', 'fName', ',', 'err', ')', 'return', '}', '}', 'func', '(', 'd', '*', 'saveData', ')', 'saveJson', '(', 'folderName', 'string', ',', 'fileName', 'string', ',', 'fileContent', '[]', 'byte', ')', '{', 'fullName', ':=', 'folderName', '+', '""/""', '+', 'fileName', 'wc', ':=', 'storage', '.', 'NewWriter', '(', 'd', '.', 'ctx', ',', 'bucket', ',', 'fullName', ')', 'wc', '.', 'ContentType', '=', '""text/plain""', 'd', '.', 'cleanUp', '=', 'append', '(', 'd', '.', 'cleanUp', ',', 'fullName', ')', 'd', '.', 'createFile', '(', 'fullName', ',', 'fileContent', ')', '}', 'func', '(', 'd', '*', 'saveData', ')', 'createFile', '(', 'fileName', 'string', ',', 'content', '[]', 'byte', ')', '{', 'wc', ':=', 'storage', '.', 'NewWriter', '(', 'd', '.', 'ctx', ',', 'bucket', ',', 'fileName', ')', 'wc', '.', 'ContentType', '=', '""text/plain""', 'd', '.', 'cleanUp', '=', 'append', '(', 'd', '.', 'cleanUp', ',', 'fileName', ')', 'if', '_', ',', 'err', ':=', 'wc', '.', 'Write', '([]', 'byte', '(', 'content', '));', 'err', '!=', 'nil', '{', 'd', '.', 'errorf', '(', '""createFile: unable to write data to bucket %q, file %q: %v""', ',', 'bucket', ',', 'fileName', ',', 'err', ')', 'return', '}', 'if', 'err', ':=', 'wc', '.', 'Close', '();', 'err', '!=', 'nil', '{', 'd', '.', 'errorf', '(', '""createFile: unable to close bucket %q, file %q: %v""', ',', 'bucket', ',', 'fileName', ',', 'err', ')', 'return', '}', '}', 'func', 'handleloadTrials', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'c', ':=', 'appengine', '.', 'NewContext', '(', 'r', ')', 'if', 'bucket', '==', '""""', '{', 'var', 'err', 'error', 'if', 'bucket', ',', 'err', '=', 'file', '.', 'DefaultBucketName', '(', 'c', ');', 'err', '!=', 'nil', '{', '// log.Errorf(c, ""failed to get default GCS bucket name: %v"", err)', 'return', '}', '}', 'hc', ':=', '&', 'http', '.', 'Client', '{', 'Transport', ':', '&', 'oauth2', '.', 'Transport', '{', 'Source', ':', 'go', 'ogle', '.', 'AppEngineTokenSource', '(', 'c', ',', 'storage', '.', 'ScopeFullControl', '),', 'Base', ':', '&', 'urlfetch', '.', 'Transport', '{', 'Context', ':', 'c', '},', '},', '}', 'ctx', ':=', 'cloud', '.', 'NewContext', '(', 'appengine', '.', 'AppID', '(', 'c', '),', 'hc', ')', '// structure to holds information needed to run the various saving functions', 'd', ':=', '&', 'saveData', '{', 'c', ':', 'c', ',', 'r', ':', 'r', ',', 'w', ':', 'w', ',', 'ctx', ':', 'ctx', ',', '}', 'userID', ':=', 'r', '.', 'URL', '.', 'Query', '().', 'Get', '(', '""id""', ')', 'log', '.', 'Println', '(', 'userID', ')', 'trialJson', ':=', 'd', '.', 'readFile', '(', 'userID', ')', 'w', '.', 'Write', '(', 'trialJson', ')', '}', '// readFile reads the named file in Google Cloud Storage.', 'func', '(', 'd', '*', 'saveData', ')', 'readFile', '(', 'fileName', 'string', ')', '[]', 'byte', '{', 'trialName', ':=', 'fileName', '+', '""/trials""', 'rc', ',', 'err', ':=', 'storage', '.', 'NewReader', '(', 'd', '.', 'ctx', ',', 'bucket', ',', 'trialName', ')', 'if', 'err', '!=', 'nil', '{', 'd', '.', 'errorf', '(', '""readFile: unable to open file from bucket %q, file %q: %v""', ',', 'bucket', ',', 'trialName', ',', 'err', ')', '}', 'defer', 'rc', '.', 'Close', '()', 'slurp', ',', 'err', ':=', 'ioutil', '.', 'ReadAll', '(', 'rc', ')', 'if', 'err', '!=', 'nil', '{', 'd', '.', 'errorf', '(', '""readFile: unable to read data from bucket %q, file %q: %v""', ',', 'bucket', ',', 'fileName', ',', 'err', ')', '}', 'return', 'slurp', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'string_literal', 'comment', 'saveData', 'struct', 'holds', 'information', 'needed', 'to', 'run', 'the', 'various', 'saving', 'functions', '.', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'http', 'response', 'identifier', 'identifier', 'operator', 'identifier', 'comment', 'http', 'writer', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'comment', 'cleanUp', 'is', 'a', 'list', 'of', 'filenames', 'that', 'need', 'cleaning', 'up', 'at', 'the', 'end', 'of', 'the', 'saving', '.', 'identifier', 'identifier', 'comment', 'failed', 'indicates', 'that', 'one', 'or', 'more', 'of', 'the', 'saving', 'steps', 'failed', '.', 'operator', 'comment', 'saveData', 'struct', 'holds', 'information', 'needed', 'to', 'run', 'the', 'various', 'saving', 'functions', '.', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'http', 'response', 'identifier', 'identifier', 'operator', 'identifier', 'comment', 'http', 'writer', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'comment', 'cleanUp', 'is', 'a', 'list', 'of', 'filenames', 'that', 'need', 'cleaning', 'up', 'at', 'the', 'end', 'of', 'the', 'saving', '.', 'identifier', 'identifier', 'comment', 'failed', 'indicates', 'that', 'one', 'or', 'more', 'of', 'the', 'saving', 'steps', 'failed', '.', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'testSave', 'is', 'the', 'main', 'saving', 'entry', 'point', 'that', 'calls', 'the', 'GCS', 'operations', '.', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'log.Errorf', '(', 'c', ',', '``', 'failed', 'to', 'get', 'default', 'GCS', 'bucket', 'name', ':', '%', 'v', ""''"", ',', 'err', ')', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'structure', 'to', 'holds', 'information', 'needed', 'to', 'run', 'the', 'various', 'saving', 'functions', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'retrieve', 'data', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'd.saveJson', '(', 'k.User.ID', ',', '``', 'raw', ""''"", ',', 'z', ')', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Deal', 'with', 'error', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'log.Errorf', '(', 'c', ',', '``', 'failed', 'to', 'get', 'default', 'GCS', 'bucket', 'name', ':', '%', 'v', ""''"", ',', 'err', ')', 'keyword', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'structure', 'to', 'holds', 'information', 'needed', 'to', 'run', 'the', 'various', 'saving', 'functions', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'readFile', 'reads', 'the', 'named', 'file', 'in', 'Google', 'Cloud', 'Storage', '.', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator']",30580746
94,"saveUserData : function saveUserData(data) {
  var _this = this,
      save = this.shadowRoot.querySelector('#save-data');

  save.url=""http://galileoexp.appspot.com/saveUserData"";
  save.body = JSON.stringify(data);
  save.go();
}
","['saveUserData', ':', 'func', 'tion', 'saveUserData', '(', 'data', ')', '{', 'var', '_this', '=', 'this', ',', 'save', '=', 'this', '.', 'shadowRoot', '.', 'querySelector', '(', 'save', '-', 'data', ');', 'save', '.', 'url', '=', '""http://galileoexp.appspot.com/saveUserData""', ';', 'save', '.', 'body', '=', 'JSON', '.', 'stringify', '(', 'data', ');', 'save', '.', 'go', '();', '}']","['identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'operator']",30580746
95,"package main

import (
    ""bytes""
    ""encoding/json""
    ""fmt""
    ""log""
    ""net/http""
)

func main() {
    client := &http.Client{}
    // Why this stringData is lost and was not send with POST request?
    stringData := `INSERT INTO V SET name = 'jack', boss = #11:19`
    req, err := http.NewRequest(""POST"", ""http://localhost:2480/command/GratefulDeadConcerts/sql"", bytes.NewBufferString(stringData))
    req.SetBasicAuth(""root"", ""1"")
    resp, err := client.Do(req)
    if err != nil {
        fmt.Printf(""Error : %s"", err)
    }
    fmt.Println(""resp"")
    fmt.Println(ToJson(resp))

    var b bytes.Buffer
    _, err = b.ReadFrom(resp.Body)
    if err != nil {
        log.Fatal(""Error : %s"", err)
    }
    fmt.Println(b.String())
}

func ToJson(obj interface{}) string {
    b, err := json.MarshalIndent(&obj, """", ""   "")
    if err != nil {
        fmt.Printf(""Error : %s"", err)
    }
    strJson := string(b)

    return strJson
}","['package', 'main', 'import', '(', '""bytes""', '""encoding/json""', '""fmt""', '""log""', '""net/http""', ')', 'func', 'main', '()', '{', 'client', ':=', '&', 'http', '.', 'Client', '{}', '// Why this stringData is lost and was not send with POST request?', 'stringData', ':=', 'INSERT', 'INTO', 'V', 'SET', 'name', '=', 'jack', ',', 'boss', '=', '11', ':', '19', 'req', ',', 'err', ':=', 'http', '.', 'NewRequest', '(', '""POST"", ""http://localhost:2480/command/GratefulDeadConcerts/sql""', ',', 'bytes', '.', 'NewBufferString', '(', 'stringData', '))', 'req', '.', 'SetBasicAuth', '(', '""root"", ""1""', ')', 'resp', ',', 'err', ':=', 'client', '.', 'Do', '(', 'req', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""Error : %s""', ',', 'err', ')', '}', 'fmt', '.', 'Println', '(', '""resp""', ')', 'fmt', '.', 'Println', '(', 'ToJson', '(', 'resp', '))', 'var', 'b', 'bytes', '.', 'Buffer', '_', ',', 'err', '=', 'b', '.', 'ReadFrom', '(', 'resp', '.', 'Body', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', '""Error : %s""', ',', 'err', ')', '}', 'fmt', '.', 'Println', '(', 'b', '.', 'String', '())', '}', 'func', 'ToJson', '(', 'obj', 'interface', '{})', 'string', '{', 'b', ',', 'err', ':=', 'json', '.', 'MarshalIndent', '(&', 'obj', ',', '"""", ""   ""', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""Error : %s""', ',', 'err', ')', '}', 'strJson', ':=', 'string', '(', 'b', ')', 'return', 'strJson', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Why', 'this', 'stringData', 'is', 'lost', 'and', 'was', 'not', 'send', 'with', 'POST', 'request', '?', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator']",30702948
96,"package main

import (
    ""bytes""
    ""encoding/json""
    ""fmt""
    ""log""
    ""net/http""
    ""net/url""
)

func main() {
    client := &http.Client{}
    // Why this stringData is lost and do not pass thgouht POST request?
    stringData := `INSERT INTO V SET name = 'jack', boss = #11:19`
    stringData = url.QueryEscape(stringData)
    req, err := http.NewRequest(""POST"", ""http://localhost:2480/command/GratefulDeadConcerts/sql"", bytes.NewBufferString(stringData))
    req.SetBasicAuth(""root"", ""1"")
    req.Header.Set(""Content-Type"", ""Content-Type: text/plain"")
    resp, err := client.Do(req)
    if err != nil {
        fmt.Printf(""Error : %s"", err)
    }
    fmt.Println(""resp"")
    fmt.Println(ToJson(resp))

    var b bytes.Buffer
    _, err = b.ReadFrom(resp.Body)
    if err != nil {
        log.Fatal(""Error : %s"", err)
    }
    fmt.Println(b.String())
}

func ToJson(obj interface{}) string {
    b, err := json.MarshalIndent(&obj, """", ""   "")
    if err != nil {
        fmt.Printf(""Error : %s"", err)
    }
    strJson := string(b)

    return strJson
}","['package', 'main', 'import', '(', '""bytes""', '""encoding/json""', '""fmt""', '""log""', '""net/http""', '""net/url""', ')', 'func', 'main', '()', '{', 'client', ':=', '&', 'http', '.', 'Client', '{}', '// Why this stringData is lost and do not pass thgouht POST request?', 'stringData', ':=', 'INSERT', 'INTO', 'V', 'SET', 'name', '=', 'jack', ',', 'boss', '=', '11', ':', '19', 'stringData', '=', 'url', '.', 'QueryEscape', '(', 'stringData', ')', 'req', ',', 'err', ':=', 'http', '.', 'NewRequest', '(', '""POST"", ""http://localhost:2480/command/GratefulDeadConcerts/sql""', ',', 'bytes', '.', 'NewBufferString', '(', 'stringData', '))', 'req', '.', 'SetBasicAuth', '(', '""root"", ""1""', ')', 'req', '.', 'Header', '.', 'Set', '(', '""Content-Type"", ""Content-Type: text/plain""', ')', 'resp', ',', 'err', ':=', 'client', '.', 'Do', '(', 'req', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""Error : %s""', ',', 'err', ')', '}', 'fmt', '.', 'Println', '(', '""resp""', ')', 'fmt', '.', 'Println', '(', 'ToJson', '(', 'resp', '))', 'var', 'b', 'bytes', '.', 'Buffer', '_', ',', 'err', '=', 'b', '.', 'ReadFrom', '(', 'resp', '.', 'Body', ')', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatal', '(', '""Error : %s""', ',', 'err', ')', '}', 'fmt', '.', 'Println', '(', 'b', '.', 'String', '())', '}', 'func', 'ToJson', '(', 'obj', 'interface', '{})', 'string', '{', 'b', ',', 'err', ':=', 'json', '.', 'MarshalIndent', '(&', 'obj', ',', '"""", ""   ""', ')', 'if', 'err', '!=', 'nil', '{', 'fmt', '.', 'Printf', '(', '""Error : %s""', ',', 'err', ')', '}', 'strJson', ':=', 'string', '(', 'b', ')', 'return', 'strJson', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Why', 'this', 'stringData', 'is', 'lost', 'and', 'do', 'not', 'pass', 'thgouht', 'POST', 'request', '?', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator']",30702948
97,"package main

import (
    ""github.com/gin-gonic/gin""
    ""database/sql""
    ""github.com/coopernurse/gorp""
    _ ""github.com/mattn/go-sqlite3""
    ""log""
    ""time""
    ""strconv""
    ""github.com/go-errors/errors""
)

type Article struct {
    Id int64 `db:""article_id""`
    Created int64
    Title string
    Content string
}

var dbmap = initDb()

func initDb() gorp.DbMap {
    db, err := sql.Open(""sqlite3"", ""db.sqlite3"")
    checkErr(err, ""sql.Open faild"")
    dbmap := gorp.DbMap{Db: db, Dialect: gorp.SqliteDialect{}}
    dbmap.AddTableWithName(Article{}, ""articles"").SetKeys(true, ""Id"")
    err = dbmap.CreateTablesIfNotExists()
    checkErr(err, ""Create tables failed"")
    return dbmap
}

func checkErr(err error, msg string) {
    if err != nil {
        log.Fatalln(msg, err.(*errors.Error).ErrorStack())
    }
}

func index (c *gin.Context) {
    content := gin.H{""Hello"": ""World""}
    c.JSON(200, content)
}

func ArticlesList(c *gin.Context) {
    var articles []Article
    _, err := dbmap.Select(&articles, ""select * from articles order by article_id"")
    checkErr(err, ""Select failed"")
    content := gin.H{}
    for k, v := range articles {
        content[strconv.Itoa(k)] =v
    }
    c.JSON(200, content)
}

func ArticlesDetail(c *gin.Context) {
    article_id := c.Params.ByName(""id"")
    a_id, _ := strconv.Atoi(article_id)
    article := getArticle(a_id)
    content := gin.H{""title"": article.Title, ""content"": article.Content}
    c.JSON(200, content)
}

func ArticlePost(c *gin.Context) {
    var json Article

    c.Bind(&json)
    article := createArticle(json.Title, json.Content)
    if article.Title == json.Title {
        content := gin.H{
            ""result"": ""Success"",
            ""title"": article.Title,
            ""content"": article.Content,
        }
        c.JSON(201, content)
    } else {
        c.JSON(500, gin.H{""result"": ""An error occured""})
    }
}

func createArticle(title, body string) Article {
    article := Article{
        Created: time.Now().UnixNano(),
        Title: title,
        Content: body,
    }

    err := dbmap.Insert(&article)
    checkErr(err, ""Insert failed"")
    return article
}

func getArticle(article_id int) Article {
    article := Article{}
    err := dbmap.SelectOne(&article, ""select * from articles where article_id=?"", article_id)
    checkErr(err, ""selectOne failed"")
    return article
}

func main() {
    app := gin.Default()
    app.GET(""/"", index)
    app.GET(""/articles"", ArticlesList)
    app.POST(""/articles"", ArticlePost)
    app.GET(""/articles/:article_id"", ArticlesDetail)
    app.Run("":8000"")
}","['package', 'main', 'import', '(', '""github.com/gin-gonic/gin""', '""database/sql""', '""github.com/coopernurse/gorp""', '_', '""github.com/mattn/go-sqlite3""', '""log""', '""time""', '""strconv""', '""github.com/go-errors/errors""', ')', 'type', 'Article', 'struct', '{', 'Id', 'int64', 'db', ':', '""article_id""', 'Created', 'int64', 'Title', 'string', 'Content', 'string', '}', 'var', 'dbmap', '=', 'initDb', '()', 'func', 'initDb', '()', 'go', 'rp', '.', 'DbMap', '{', 'db', ',', 'err', ':=', 'sql', '.', 'Open', '(', '""sqlite3"", ""db.sqlite3""', ')', 'checkErr', '(', 'err', ',', '""sql.Open faild""', ')', 'dbmap', ':=', 'go', 'rp', '.', 'DbMap', '{', 'Db', ':', 'db', ',', 'Dialect', ':', 'go', 'rp', '.', 'SqliteDialect', '{}}', 'dbmap', '.', 'AddTableWithName', '(', 'Article', '{},', '""articles"").SetKeys(true, ""Id""', ')', 'err', '=', 'dbmap', '.', 'CreateTablesIfNotExists', '()', 'checkErr', '(', 'err', ',', '""Create tables failed""', ')', 'return', 'dbmap', '}', 'func', 'checkErr', '(', 'err', 'error', ',', 'msg', 'string', ')', '{', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Fatalln', '(', 'msg', ',', 'err', '.(*', 'errors', '.', 'Error', ').', 'ErrorStack', '())', '}', '}', 'func', 'index', '(', 'c', '*', 'gin', '.', 'Context', ')', '{', 'content', ':=', 'gin', '.', 'H', '{', '""Hello"": ""World""', '}', 'c', '.', 'JSON', '(', '200', ',', 'content', ')', '}', 'func', 'ArticlesList', '(', 'c', '*', 'gin', '.', 'Context', ')', '{', 'var', 'articles', '[]', 'Article', '_', ',', 'err', ':=', 'dbmap', '.', 'Select', '(&', 'articles', ',', '""select * from articles order by article_id""', ')', 'checkErr', '(', 'err', ',', '""Select failed""', ')', 'content', ':=', 'gin', '.', 'H', '{}', 'for', 'k', ',', 'v', ':=', 'range', 'articles', '{', 'content', '[', 'strconv', '.', 'Itoa', '(', 'k', ')]', '=', 'v', '}', 'c', '.', 'JSON', '(', '200', ',', 'content', ')', '}', 'func', 'ArticlesDetail', '(', 'c', '*', 'gin', '.', 'Context', ')', '{', 'article_id', ':=', 'c', '.', 'Params', '.', 'ByName', '(', '""id""', ')', 'a_id', ',', '_', ':=', 'strconv', '.', 'Atoi', '(', 'article_id', ')', 'article', ':=', 'getArticle', '(', 'a_id', ')', 'content', ':=', 'gin', '.', 'H', '{', '""title"": article.Title, ""content""', ':', 'article', '.', 'Content', '}', 'c', '.', 'JSON', '(', '200', ',', 'content', ')', '}', 'func', 'ArticlePost', '(', 'c', '*', 'gin', '.', 'Context', ')', '{', 'var', 'json', 'Article', 'c', '.', 'Bind', '(&', 'json', ')', 'article', ':=', 'createArticle', '(', 'json', '.', 'Title', ',', 'json', '.', 'Content', ')', 'if', 'article', '.', 'Title', '==', 'json', '.', 'Title', '{', 'content', ':=', 'gin', '.', 'H', '{', '""result"": ""Success""', ',', '""title""', ':', 'article', '.', 'Title', ',', '""content""', ':', 'article', '.', 'Content', ',', '}', 'c', '.', 'JSON', '(', '201', ',', 'content', ')', '}', 'else', '{', 'c', '.', 'JSON', '(', '500', ',', 'gin', '.', 'H', '{', '""result"": ""An error occured""', '})', '}', '}', 'func', 'createArticle', '(', 'title', ',', 'body', 'string', ')', 'Article', '{', 'article', ':=', 'Article', '{', 'Created', ':', 'time', '.', 'Now', '().', 'UnixNano', '(),', 'Title', ':', 'title', ',', 'Content', ':', 'body', ',', '}', 'err', ':=', 'dbmap', '.', 'Insert', '(&', 'article', ')', 'checkErr', '(', 'err', ',', '""Insert failed""', ')', 'return', 'article', '}', 'func', 'getArticle', '(', 'article_id', 'int', ')', 'Article', '{', 'article', ':=', 'Article', '{}', 'err', ':=', 'dbmap', '.', 'SelectOne', '(&', 'article', ',', '""select * from articles where article_id=?""', ',', 'article_id', ')', 'checkErr', '(', 'err', ',', '""selectOne failed""', ')', 'return', 'article', '}', 'func', 'main', '()', '{', 'app', ':=', 'gin', '.', 'Default', '()', 'app', '.', 'GET', '(', '""/""', ',', 'index', ')', 'app', '.', 'GET', '(', '""/articles""', ',', 'ArticlesList', ')', 'app', '.', 'POST', '(', '""/articles""', ',', 'ArticlePost', ')', 'app', '.', 'GET', '(', '""/articles/:article_id""', ',', 'ArticlesDetail', ')', 'app', '.', 'Run', '(', '"":8000""', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'identifier', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'string_literal', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']",30919986
98,"package main

import (
    ""RESTMONGOMVC/controllers""
    ""log""
    ""net/http""

    ""github.com/gorilla/mux""

    ""gopkg.in/mgo.v2""
)

var (
    session    *mgo.Session
    collection *mgo.Collection
    err        error
)

func getSession() *mgo.Session {
    // Connect to our local mongo
    s, err := mgo.Dial(""mongodb://localhost"")

    // Check if connection error, is mongo running?
    if err != nil {
        panic(err)
    }

    // Deliver session
    return s
}
func main() {
    var err error
    r := mux.NewRouter()
    uc := controllers.NewNoteController(getSession())
    r.HandleFunc(""/api/notes"", uc.GetNotes).Methods(""GET"")
    r.HandleFunc(""/api/notes"", uc.CreateNote).Methods(""POST"")
    r.HandleFunc(""/api/notes/{id}"", uc.UpdateNote).Methods(""PUT"")
    r.HandleFunc(""/api/notes/{id}"", uc.DeleteNote).Methods(""DELETE"")
    http.Handle(""/api/"", r)
    http.Handle(""/"", http.FileServer(http.Dir(""."")))
    log.Println(""Starting Mongodb Session"")
    session, err = mgo.Dial(""localhost"")
    if err != nil {
        panic(err)
    }
    defer session.Close()
    session.SetMode(mgo.Monotonic, true)
    collection = session.DB(""notesdb"").C(""notes"")
    log.Println(""Listening on 8080"")
    http.ListenAndServe("":8080"", nil)
}","['package', 'main', 'import', '(', '""RESTMONGOMVC/controllers""', '""log""', '""net/http""', '""github.com/gorilla/mux""', '""gopkg.in/mgo.v2""', ')', 'var', '(', 'session', '*', 'mgo', '.', 'Session', 'collection', '*', 'mgo', '.', 'Collection', 'err', 'error', ')', 'func', 'getSession', '()', '*', 'mgo', '.', 'Session', '{', '// Connect to our local mongo', 's', ',', 'err', ':=', 'mgo', '.', 'Dial', '(', '""mongodb://localhost""', ')', '// Check if connection error, is mongo running?', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '// Deliver session', 'return', 's', '}', 'func', 'main', '()', '{', 'var', 'err', 'error', 'r', ':=', 'mux', '.', 'NewRouter', '()', 'uc', ':=', 'controllers', '.', 'NewNoteController', '(', 'getSession', '())', 'r', '.', 'HandleFunc', '(', '""/api/notes"", uc.GetNotes).Methods(""GET""', ')', 'r', '.', 'HandleFunc', '(', '""/api/notes"", uc.CreateNote).Methods(""POST""', ')', 'r', '.', 'HandleFunc', '(', '""/api/notes/{id}"", uc.UpdateNote).Methods(""PUT""', ')', 'r', '.', 'HandleFunc', '(', '""/api/notes/{id}"", uc.DeleteNote).Methods(""DELETE""', ')', 'http', '.', 'Handle', '(', '""/api/""', ',', 'r', ')', 'http', '.', 'Handle', '(', '""/"", http.FileServer(http.Dir("".""', ')))', 'log', '.', 'Println', '(', '""Starting Mongodb Session""', ')', 'session', ',', 'err', '=', 'mgo', '.', 'Dial', '(', '""localhost""', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'defer', 'session', '.', 'Close', '()', 'session', '.', 'SetMode', '(', 'mgo', '.', 'Monotonic', ',', 'true', ')', 'collection', '=', 'session', '.', 'DB', '(', '""notesdb"").C(""notes""', ')', 'log', '.', 'Println', '(', '""Listening on 8080""', ')', 'http', '.', 'ListenAndServe', '(', '"":8080""', ',', 'nil', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Connect', 'to', 'our', 'local', 'mongo', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Check', 'if', 'connection', 'error', ',', 'is', 'mongo', 'running', '?', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'Deliver', 'session', 'keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator']",31086315
99,"package controllers

import (
    ""RESTMONGOMVC/models""
    ""encoding/json""
    ""log""
    ""net/http""
    ""time""

    ""github.com/gorilla/mux""

    ""gopkg.in/mgo.v2""
    ""gopkg.in/mgo.v2/bson""
)

var (
    session    *mgo.Session
    collection *mgo.Collection
    err        error
)

type (
    // UserController represents the controller for operating on the User resource
    NoteController struct {
        session *mgo.Session
    }
)

// NewUserController provides a reference to a UserController with provided mongo session
func NewNoteController(s *mgo.Session) *NoteController {
    return &NoteController{s}
}
func (uc NoteController) GetNotes(w http.ResponseWriter, r *http.Request) {
    var notes []models.Note
    iter := collection.Find(nil).Iter()
    result := models.Note{}
    for iter.Next(&result) {
        notes = append(notes, result)
    }
    w.Header().Set(""Content-Type"", ""application/json"")
    j, err := json.Marshal(models.NotesResource{Notes: notes})
    if err != nil {
        panic(err)
    }
    w.Write(j)
}

func (uc NoteController) CreateNote(w http.ResponseWriter, r *http.Request) {
    var noteResource models.NoteResource

    err := json.NewDecoder(r.Body).Decode(¬eResource)
    if err != nil {
        panic(err)
    }
    note := noteResource.Note
    //get a new Id
    obj_id := bson.NewObjectId()
    note.Id = obj_id
    note.CreatedOn = time.Now()
    //Insert into document collection
    err = collection.Insert(¬e)
    if err != nil {
        panic(err)
    } else {
        log.Printf(""Inserted New Record with Title :%s"", note.Title)
    }
    j, err := json.Marshal(models.NoteResource{Note: note})
    if err != nil {
        panic(err)
    }
    w.Header().Set(""Content-Type"", ""application/json"")
    w.Write(j)
}

func (uc NoteController) UpdateNote(w http.ResponseWriter, r *http.Request) {
    var err error
    //get id from incoming url
    vars := mux.Vars(r)
    id := bson.ObjectIdHex(vars[""id""])
    //decode the incoming Note into json
    var noteResource models.NoteResource
    err = json.NewDecoder(r.Body).Decode(¬eResource)
    if err != nil {
        panic(err)
    }
    //partial update on mongodb
    err = collection.Update(bson.M{""_id"": id},
        bson.M{""$set"": bson.M{
            ""title"":      noteResource.Note.Title,
            ""decription"": noteResource.Note.Description,
        }})
    if err == nil {
        log.Printf(""Updated Note : %s"", id, noteResource.Note.Title)
    } else {
        panic(err)
    }
    w.WriteHeader(http.StatusNoContent)
}
func (uc NoteController) DeleteNote(w http.ResponseWriter, r *http.Request) {
    var err error
    vars := mux.Vars(r)
    id := vars[""id""]
    //Remove from database
    err = collection.Remove(bson.M{""_id"": bson.ObjectIdHex(id)})
    if err != nil {
        log.Printf(""Could not find the Note %s to delete"", id)
    }
    w.WriteHeader(http.StatusNoContent)
}","['package', 'controllers', 'import', '(', '""RESTMONGOMVC/models""', '""encoding/json""', '""log""', '""net/http""', '""time""', '""github.com/gorilla/mux""', '""gopkg.in/mgo.v2""', '""gopkg.in/mgo.v2/bson""', ')', 'var', '(', 'session', '*', 'mgo', '.', 'Session', 'collection', '*', 'mgo', '.', 'Collection', 'err', 'error', ')', 'type', '(', '// UserController represents the controller for operating on the User resource', 'NoteController', 'struct', '{', 'session', '*', 'mgo', '.', 'Session', '}', ')', '// NewUserController provides a reference to a UserController with provided mongo session', 'func', 'NewNoteController', '(', 's', '*', 'mgo', '.', 'Session', ')', '*', 'NoteController', '{', 'return', '&', 'NoteController', '{', 's', '}', '}', 'func', '(', 'uc', 'NoteController', ')', 'GetNotes', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'var', 'notes', '[]', 'models', '.', 'Note', 'iter', ':=', 'collection', '.', 'Find', '(', 'nil', ').', 'Iter', '()', 'result', ':=', 'models', '.', 'Note', '{}', 'for', 'iter', '.', 'Next', '(&', 'result', ')', '{', 'notes', '=', 'append', '(', 'notes', ',', 'result', ')', '}', 'w', '.', 'Header', '().', 'Set', '(', '""Content-Type"", ""application/json""', ')', 'j', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'models', '.', 'NotesResource', '{', 'Notes', ':', 'notes', '})', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'w', '.', 'Write', '(', 'j', ')', '}', 'func', '(', 'uc', 'NoteController', ')', 'CreateNote', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'var', 'noteResource', 'models', '.', 'NoteResource', 'err', ':=', 'json', '.', 'NewDecoder', '(', 'r', '.', 'Body', ').', 'Decode', '(', 'eResource', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'note', ':=', 'noteResource', '.', 'Note', '//get a new Id', 'obj_id', ':=', 'bson', '.', 'NewObjectId', '()', 'note', '.', 'Id', '=', 'obj_id', 'note', '.', 'CreatedOn', '=', 'time', '.', 'Now', '()', '//Insert into document collection', 'err', '=', 'collection', '.', 'Insert', '(', 'e', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'else', '{', 'log', '.', 'Printf', '(', '""Inserted New Record with Title :%s""', ',', 'note', '.', 'Title', ')', '}', 'j', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'models', '.', 'NoteResource', '{', 'Note', ':', 'note', '})', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'w', '.', 'Header', '().', 'Set', '(', '""Content-Type"", ""application/json""', ')', 'w', '.', 'Write', '(', 'j', ')', '}', 'func', '(', 'uc', 'NoteController', ')', 'UpdateNote', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'var', 'err', 'error', '//get id from incoming url', 'var', 's', ':=', 'mux', '.', 'Vars', '(', 'r', ')', 'id', ':=', 'bson', '.', 'ObjectIdHex', '(', 'var', 's', '[', '""id""', '])', '//decode the incoming Note into json', 'var', 'noteResource', 'models', '.', 'NoteResource', 'err', '=', 'json', '.', 'NewDecoder', '(', 'r', '.', 'Body', ').', 'Decode', '(', 'eResource', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '//partial update on mongodb', 'err', '=', 'collection', '.', 'Update', '(', 'bson', '.', 'M', '{', '""_id""', ':', 'id', '},', 'bson', '.', 'M', '{', '""$set""', ':', 'bson', '.', 'M', '{', '""title""', ':', 'noteResource', '.', 'Note', '.', 'Title', ',', '""decription""', ':', 'noteResource', '.', 'Note', '.', 'Description', ',', '}})', 'if', 'err', '==', 'nil', '{', 'log', '.', 'Printf', '(', '""Updated Note : %s""', ',', 'id', ',', 'noteResource', '.', 'Note', '.', 'Title', ')', '}', 'else', '{', 'panic', '(', 'err', ')', '}', 'w', '.', 'WriteHeader', '(', 'http', '.', 'StatusNoContent', ')', '}', 'func', '(', 'uc', 'NoteController', ')', 'DeleteNote', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'var', 'err', 'error', 'var', 's', ':=', 'mux', '.', 'Vars', '(', 'r', ')', 'id', ':=', 'var', 's', '[', '""id""', ']', '//Remove from database', 'err', '=', 'collection', '.', 'Remove', '(', 'bson', '.', 'M', '{', '""_id""', ':', 'bson', '.', 'ObjectIdHex', '(', 'id', ')})', 'if', 'err', '!=', 'nil', '{', 'log', '.', 'Printf', '(', '""Could not find the Note %s to delete""', ',', 'id', ')', '}', 'w', '.', 'WriteHeader', '(', 'http', '.', 'StatusNoContent', ')', '}']","['keyword', 'identifier', 'keyword', 'operator', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'string_literal', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'identifier', 'operator', 'keyword', 'operator', 'comment', 'UserController', 'represents', 'the', 'controller', 'for', 'operating', 'on', 'the', 'User', 'resource', 'identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'NewUserController', 'provides', 'a', 'reference', 'to', 'a', 'UserController', 'with', 'provided', 'mongo', 'session', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'get', 'a', 'new', 'Id', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'comment', 'Insert', 'into', 'document', 'collection', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'comment', 'get', 'id', 'from', 'incoming', 'url', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'decode', 'the', 'incoming', 'Note', 'into', 'json', 'keyword', 'identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'comment', 'partial', 'update', 'on', 'mongodb', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'keyword', 'identifier', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'string_literal', 'operator', 'comment', 'Remove', 'from', 'database', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']",31086315
