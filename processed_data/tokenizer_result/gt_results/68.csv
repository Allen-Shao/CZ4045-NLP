,text,token
0,"Say I have the following code:

","['Say', 'I', 'have', 'the', 'following', 'code:']"
1,var x interface{},"['var', 'x', 'interface', '{}']"
2,y := 4,"['y', ':=', '4']"
3,x = y,"['x', '=', 'y']"
4,fmt.Println(reflect.TypeOf(x)),['fmt.Println(reflect.TypeOf(x))']
5,"

This will print int as the type. My question is how can I test for the type? I know there is the type switch which does this, so I could do:

","['This', 'will', 'print', 'int', 'as', 'the', 'type.', 'My', 'question', 'is', 'how', 'can', 'I', 'test', 'for', 'the', 'type?', 'I', 'know', 'there', 'is', 'the', 'type', 'switch', 'which', 'does', 'this,', 'so', 'I', 'could', 'do:']"
6,switch x.(type) {,"['switch', 'x', '.(', 'type', ')', '{']"
7,case int:,"['case', 'int', ':']"
8,"    fmt.Println(""This is an int"")","['fmt.Println(""This is an int"")']"
9,},['}']
10,"

But if I only want to check for just one specific type the switch seems like the wrong tool. Is there a more direct method of doing this like

","['But', 'if', 'I', 'only', 'want', 'to', 'check', 'for', 'just', 'one', 'specific', 'type', 'the', 'switch', 'seems', 'like', 'the', 'wrong', 'tool.', 'Is', 'there', 'a', 'more', 'direct', 'method', 'of', 'doing', 'this', 'like']"
11,reflect.TypeOf(x) == int,"['reflect.TypeOf(x)', '==', 'int']"
12,"

or is the type switch the way to go?
","['or', 'is', 'the', 'type', 'switch', 'the', 'way', 'to', 'go?']"
