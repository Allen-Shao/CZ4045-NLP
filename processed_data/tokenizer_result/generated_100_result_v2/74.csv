,text,token
0,"I think you should create the Child outside of the Add method and pass it in. If you want to manipulate the Child, do that before you passed it in. You might use methods on the Child struct to do that:

","['I', 'think', 'you', 'should', 'create', 'the', 'Child', 'outside', 'of', 'the', 'Add', 'method', 'and', 'pass', 'it', 'in', '.', 'If', 'you', 'want', 'to', 'manipulate', 'the', 'Child', ',', 'do', 'that', 'before', 'you', 'passed', 'it', 'in', '.', 'You', 'might', 'use', 'methods', 'on', 'the', 'Child', 'struct', 'to', 'do', 'that', ':']"
1,"func (c *Child) Init(fn1 func(), fn2 func()) {","['func', '(', 'c', '*', 'Child', ')', 'Init', '(', 'fn1', 'func', '(),', 'fn2', 'func', '())', '{']"
2,"  c.Status = ""1""","['c', '.', 'Status', '=', '""1""']"
3,  ...,['...']
4,},['}']
5,func (p *Parent) Add(c *Child) *Child {,"['func', '(', 'p', '*', 'Parent', ')', 'Add', '(', 'c', '*', 'Child', ')', '*', 'Child', '{']"
6,"  p.Children = append(p.Children, c)","['p', '.', 'Children', '=', 'append(p.Children, c)']"
7,  return c,"['return', 'c']"
8,},['}']
9,func main() {,"['func', 'main', '()', '{']"
10,  var p Parent,"['var', 'p', 'Parent']"
11,  var child Child,"['var', 'child', 'Child']"
12,  child.Init(...)       // <- pass something in there...,"['child.Init(...)', '//', '<-', 'pass', 'something', 'in', 'there', '.', '.', '.']"
13,  p.Add(&child),['p.Add(&child)']
14,"  child.Status = ""2""","['child', '.', 'Status', '=', '""2""']"
15,  fmt.Println(p),['fmt.Println(p)']
16,  fmt.Println(child),['fmt.Println(child)']
17,},['}']
