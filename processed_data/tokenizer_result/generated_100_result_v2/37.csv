,text,token
0,"If I don't use a filter, I get results. If I use a filter (this record definitely exists), I don't get any results. It might be the lack of an index defined for that property, but, as I understand it, simple indices should automatically be created in the development server (and an index.yaml file created and populated with it). This is not happening.

","['If', 'I', 'do', ""n't"", 'use', 'a', 'filter', ',', 'I', 'get', 'results', '.', 'If', 'I', 'use', 'a', 'filter', '(', 'this', 'record', 'definitely', 'exists', ')', ',', 'I', 'do', ""n't"", 'get', 'any', 'results', '.', 'It', 'might', 'be', 'the', 'lack', 'of', 'an', 'index', 'defined', 'for', 'that', 'property', ',', 'but', ',', 'as', 'I', 'understand', 'it', ',', 'simple', 'indices', 'should', 'automatically', 'be', 'created', 'in', 'the', 'development', 'server', '(', 'and', 'an', 'index.yaml', 'file', 'created', 'and', 'populated', 'with', 'it', ')', '.', 'This', 'is', 'not', 'happening', '.']"
1,"query = datastore.NewQuery(""UserAccount"").Filter(""email ="", ""test@example.com"")","['query', '=', 'datastore.NewQuery(""UserAccount"").Filter(""email ="", ""test@example.com"")']"
2,ua := UserAccount{},"['ua', ':=', 'UserAccount', '{}']"
3,t := query.Run(ctx),"['t', ':=', 'query.Run(ctx)']"
4,for ; ; {,"['for', ';', ';', '{']"
5,"    if _, err = t.Next(&ua); err == nil {","['if', '_', ',', 'err', '=', 't.Next(&ua)', ';', 'err', '==', 'nil', '{']"
6,"        log.Debugf(ctx, ""Current: %s"", ua)","['log.Debugf(ctx, ""Current: %s"", ua)']"
7,    } else if err == datastore.Done {,"['}', 'else', 'if', 'err', '==', 'datastore', '.', 'Done', '{']"
8,        break,['break']
9,    } else {,"['}', 'else', '{']"
10,        panic(err),['panic(err)']
11,    },['}']
12,},['}']
13,"

When the development server terminates, it states that it's ""saving search indexes"":

","['When', 'the', 'development', 'server', 'terminates', ',', 'it', 'states', 'that', 'it', ""'s"", '""', 'saving', 'search', 'indexes', '""', ':']"
14,"INFO     2016-08-08 05:09:52,894 api_server.py:651] Saving search indexes","['INFO', '2016', '-', '0', '8', '-', '0', '8', '05', ':', '0', '9', ':', '52', ',', '894', 'api_server', '.', 'py', ':', '651', ']', 'Saving', 'search', 'indexes']"
15,"

However, since an ""index.yaml"" file doesn't appear, I'm assuming that no indices needed to be created, which means that my query must not've had the desired effect?

What am I missing?

Edit:

Note that the record was previously created and the application stopped and started many times since. I sincerely doubt this is a eventual-consistency thing.

Edit 2:

For the purpose of testing, I've created the following model with the following code. They both exhibit the same behavior as my original model and code.

Definition:

","['However', ',', 'since', 'an', '""index.yaml""', 'file', 'does', ""n't"", 'appear', ',', 'I', ""'m"", 'assuming', 'that', 'no', 'indices', 'needed', 'to', 'be', 'created', ',', 'which', 'means', 'that', 'my', 'query', 'must', 'not', ""'ve"", 'had', 'the', 'desired', 'effect', '?', 'What', 'am', 'I', 'missing', '?', 'Edit', ':', 'Note', 'that', 'the', 'record', 'was', 'previously', 'created', 'and', 'the', 'application', 'stopped', 'and', 'started', 'many', 'times', 'since', '.', 'I', 'sincerely', 'doubt', 'this', 'is', 'a', 'eventual-consistency', 'thing', '.', 'Edit', '2', ':', 'For', 'the', 'purpose', 'of', 'testing', ',', 'I', ""'ve"", 'created', 'the', 'following', 'model', 'with', 'the', 'following', 'code', '.', 'They', 'both', 'exhibit', 'the', 'same', 'behavior', 'as', 'my', 'original', 'model', 'and', 'code', '.', 'Definition', ':']"
16,type TestEntity struct {,"['type', 'TestEntity', 'struct', '{']"
17,    Email string,"['Email', 'string']"
18,},['}']
19,"

Code:

","['Code', ':']"
20,"log.Debugf(ctx, ""Putting."")","['log.Debugf(ctx, ""Putting."")']"
21,"email := ""anothertest@a.b""","['email', ':=', '""anothertest@a.b""']"
22,te := &TestEntity{,"['te', ':=', '&', 'TestEntity', '{']"
23,"        Email: email,","['Email', ':', 'email', ',']"
24,},['}']
25,"k := datastore.NewKey(ctx, ""TestEntity"", ""123"", 0, nil)","['k', ':=', 'datastore.NewKey(ctx, ""TestEntity"", ""123"", 0, nil)']"
26,"_, err = datastore.Put(ctx, k, te)","['_', ',', 'err', '=', 'datastore.Put(ctx, k, te)']"
27,if err != nil {,"['if', 'err', '!=', 'nil', '{']"
28,    panic(err),['panic(err)']
29,},['}']
30,"log.Debugf(ctx, ""Waiting."")","['log.Debugf(ctx, ""Waiting."")']"
31,time.Sleep(1 * time.Second),['time.Sleep(1 * time.Second)']
32,"query := datastore.NewQuery(""TestEntity"")","['query', ':=', 'datastore.NewQuery(""TestEntity"")']"
33,var results []TestEntity,"['var', 'results', '[]', 'TestEntity']"
34,"_, err = query.GetAll(ctx, &results)","['_', ',', 'err', '=', 'query.GetAll(ctx, &results)']"
35,"log.Debugf(ctx, ""GetAll: %s"", results)","['log.Debugf(ctx, ""GetAll: %s"", results)']"
36,"log.Debugf(ctx, ""Running query."")","['log.Debugf(ctx, ""Running query."")']"
37,"query = datastore.NewQuery(""TestEntity"").Filter(""email ="", email)","['query', '=', 'datastore.NewQuery(""TestEntity"").Filter(""email ="", email)']"
38,te = &TestEntity{},"['te', '=', '&', 'TestEntity', '{}']"
39,t := query.Run(ctx),"['t', ':=', 'query.Run(ctx)']"
40,for ; ; {,"['for', ';', ';', '{']"
41,"    if _, err = t.Next(te); err == nil {","['if', '_', ',', 'err', '=', 't.Next(te)', ';', 'err', '==', 'nil', '{']"
42,"        log.Debugf(ctx, ""Found: [%s]"", te.Email)","['log.Debugf(ctx, ""Found: [%s]"", te.Email)']"
43,    } else if err == datastore.Done {,"['}', 'else', 'if', 'err', '==', 'datastore', '.', 'Done', '{']"
44,"        log.Debugf(ctx, ""Done."")","['log.Debugf(ctx, ""Done."")']"
45,        break,['break']
46,    } else {,"['}', 'else', '{']"
47,        panic(err),['panic(err)']
48,    },['}']
49,},['}']
50,"

Results:

","['Results', ':']"
51,2016/08/09 02:11:36 DEBUG: Putting.,"['2016/08/09', '02', ':', '11', ':', '36', 'DEBUG', ':', 'Putting', '.']"
52,2016/08/09 02:11:36 DEBUG: Waiting.,"['2016/08/09', '02', ':', '11', ':', '36', 'DEBUG', ':', 'Waiting', '.']"
53,2016/08/09 02:11:37 DEBUG: GetAll: [{anothertest@a.b}],"['2016/08/09', '02', ':', '11', ':', '37', 'DEBUG', ':', 'GetAll', ':', '[{', 'anothertest', 'a', '.', 'b', '}]']"
54,2016/08/09 02:11:37 DEBUG: Running query.,"['2016/08/09', '02', ':', '11', ':', '37', 'DEBUG', ':', 'Running', 'query', '.']"
55,2016/08/09 02:11:37 DEBUG: Done.,"['2016/08/09', '02', ':', '11', ':', '37', 'DEBUG', ':', 'Done', '.']"
56,"

Screenshot of Viewer:


","['Screenshot', 'of', 'Viewer', ':']"
