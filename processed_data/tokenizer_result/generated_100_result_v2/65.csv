,text,token
0,"Using 2 different channels

You want to send values to 2 different channels. Sending a value to a channel is not an assignment, so you can't send on both channels in one step.

First store the values returned by boolInt(), then send the values to the 2 channels like this:

","['Using', '2', 'different', 'channels', 'You', 'want', 'to', 'send', 'values', 'to', '2', 'different', 'channels', '.', 'Sending', 'a', 'value', 'to', 'a', 'channel', 'is', 'not', 'an', 'assignment', ',', 'so', 'you', ""can't"", 'send', 'on', 'both', 'channels', 'in', 'one', 'step', '.', 'First', 'store', 'the', 'values', 'returned', 'by', 'boolInt', '(', ')', ',', 'then', 'send', 'the', 'values', 'to', 'the', '2', 'channels', 'like', 'this', ':']"
1,go func() {,"['go', 'func', '()', '{']"
2,"    b, i := boolInt()","['b', ',', 'i', ':=', 'boolInt()']"
3,    chanBool <- b,"['chan', 'Bool', '<-', 'b']"
4,    chanInt <- i,"['chan', 'Int', '<-', 'i']"
5,}(),['}()']
6,"

Testing it:

","['Testing', 'it', ':']"
7,go func() {,"['go', 'func', '()', '{']"
8,"    b, i := boolInt()","['b', ',', 'i', ':=', 'boolInt()']"
9,    chanBool <- b,"['chan', 'Bool', '<-', 'b']"
10,    chanInt <- i,"['chan', 'Int', '<-', 'i']"
11,}(),['}()']
12,"fmt.Println(""Received bool:"", <-chanBool)","['fmt.Println(""Received bool:"", <-chanBool)']"
13,"fmt.Println(""Received int:"", <-chanInt)","['fmt.Println(""Received int:"", <-chanInt)']"
14,"

Output:

","['Output', ':']"
15,Received bool: false,"['Received', 'bool', ':', 'false']"
16,Received int: 1,"['Received', 'int', ':', '1']"
17,"

Note: you first have to receive from chanBool because you created unbuffered channels, and because in the example we first send to chanBool, that blocks until the sent value is recevied and only then proceeds to send a value to the chanInt. Attempting to receive from chanInt first would cause a deadlock (","['Note', ':', 'you', 'first', 'have', 'to', 'receive', 'from', 'chanBool', 'because', 'you', 'created', 'unbuffered', 'channels', ',', 'and', 'because', 'in', 'the', 'example', 'we', 'first', 'send', 'to', 'chanBool', ',', 'that', 'blocks', 'until', 'the', 'sent', 'value', 'is', 'recevied', 'and', 'only', 'then', 'proceeds', 'to', 'send', 'a', 'value', 'to', 'the', 'chanInt', '.', 'Attempting', 'to', 'receive', 'from', 'chanInt', 'first', 'would', 'cause', 'a', 'deadlock', '(']"
18,"""fatal error: all goroutines are asleep - deadlock!""","['""fatal error: all goroutines are asleep - deadlock!""']"
19,").

Solution using only one channel

If you want to send multiple values on a channel, you can create a wrapper struct for the values:

","[').', 'Solution', 'using', 'only', 'one', 'channel', 'If', 'you', 'want', 'to', 'send', 'multiple', 'values', 'on', 'a', 'channel', ',', 'you', 'can', 'create', 'a', 'wrapper', 'struct', 'for', 'the', 'values', ':']"
20,type MyStruct struct {,"['type', 'MyStruct', 'struct', '{']"
21,    b bool,"['b', 'bool']"
22,    i int,"['i', 'int']"
23,},['}']
24,"

And using it:

","['And', 'using', 'it', ':']"
25,ch := make(chan MyStruct),"['ch', ':=', 'make(chan MyStruct)']"
26,go func() {,"['go', 'func', '()', '{']"
27,"    b, i := boolInt()","['b', ',', 'i', ':=', 'boolInt()']"
28,"    ch <- MyStruct{b, i}","['ch', '<-', 'MyStruct', '{', 'b', ',', 'i', '}']"
29,}(),['}()']
30,"fmt.Println(""Received value:"", <-ch)","['fmt.Println(""Received value:"", <-ch)']"
31,"

Output:

","['Output', ':']"
32,Received value: {false 1},"['Received', 'value', ':', '{', 'false', '1', '}']"
33,"

Note: You could also use a []interface{} slice as a wrapper, but a struct provides a clearer way and type safety to its fields.

Note #2: It would make things easier and clearer if the boolInt() function itself would return a MyStruct value:

","['Note', ':', 'You', 'could', 'also', 'use', 'a', '[]interface{}', 'slice', 'as', 'a', 'wrapper', ',', 'but', 'a', 'struct', 'provides', 'a', 'clearer', 'way', 'and', 'type', 'safety', 'to', 'its', 'fields', '.', 'Note', '#2:', 'It', 'would', 'make', 'things', 'easier', 'and', 'clearer', 'if', 'the', 'boolInt', '(', ')', 'function', 'itself', 'would', 'return', 'a', 'MyStruct', 'value', ':']"
34,func boolInt() MyStruct {,"['func', 'boolInt()', 'MyStruct', '{']"
35,"    return MyStruct{false, 1}","['return', 'MyStruct', '{', 'false', ',', '1', '}']"
36,},['}']
37,"

In which case code would be as simple as this:

","['In', 'which', 'case', 'code', 'would', 'be', 'as', 'simple', 'as', 'this', ':']"
38,ch := make(chan MyStruct),"['ch', ':=', 'make(chan MyStruct)']"
39,go func() {,"['go', 'func', '()', '{']"
40,    ch <- boolInt(),"['ch', '<-', 'boolInt()']"
41,}(),['}()']
42,"

Alternative 1 channel solution

Another option is to make the channel type interface{} so it can receive values of any type, and just send/receive multiple values on it:

","['Alternative', '1', 'channel', 'solution', 'Another', 'option', 'is', 'to', 'make', 'the', 'channel', 'type', 'interface', '{', '}', 'so', 'it', 'can', 'receive', 'values', 'of', 'any', 'type', ',', 'and', 'just', 'send/receive', 'multiple', 'values', 'on', 'it', ':']"
43,ch := make(chan interface{}),"['ch', ':=', 'make(chan interface{})']"
44,go func() {,"['go', 'func', '()', '{']"
45,"    b, i := boolInt()","['b', ',', 'i', ':=', 'boolInt()']"
46,    ch <- b,"['ch', '<-', 'b']"
47,    ch <- i,"['ch', '<-', 'i']"
48,}(),['}()']
49,"fmt.Println(""Received values:"", <-ch, <-ch)","['fmt.Println(""Received values:"", <-ch, <-ch)']"
50,"

Output:

","['Output', ':']"
51,Received values: false 1,"['Received', 'values', ':', 'false', '1']"
