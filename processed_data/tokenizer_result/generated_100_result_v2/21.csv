,text,token
0,"I have to deserialize some binary messages coming from another application. I would love to use restruct.io but some fields in the message structure use a ""non-standard"" number of bits ( 5 bits, 3 bits, ... 10 bits ... ).

Is there any way to handle this type of structs? I have been searching for some time without any success so any help will be very welcomed. 

thanks in advance

I wil try to give an example to clarify my question. Given the code: 

","['I', 'have', 'to', 'deserialize', 'some', 'binary', 'messages', 'coming', 'from', 'another', 'application', '.', 'I', 'would', 'love', 'to', 'use', 'restruct.io', 'but', 'some', 'fields', 'in', 'the', 'message', 'structure', 'use', 'a', '""non-standard""', 'number', 'of', 'bits', '(', '5', 'bits', ',', '3', 'bits', ',', '...', '10', 'bits', '...', ').', 'Is', 'there', 'any', 'way', 'to', 'handle', 'this', 'type', 'of', 'structs', '?', 'I', 'have', 'been', 'searching', 'for', 'some', 'time', 'without', 'any', 'success', 'so', 'any', 'help', 'will', 'be', 'very', 'welcomed', '.', 'thanks', 'in', 'advance', 'I', 'wil', 'try', 'to', 'give', 'an', 'example', 'to', 'clarify', 'my', 'question', '.', 'Given', 'the', 'code', ':']"
1,package main,"['package', 'main']"
2,import (,"['import', '(']"
3,"    ""encoding/binary""","['""encoding/binary""']"
4,"    ""fmt""","['""fmt""']"
5,"    restruct ""gopkg.in/restruct.v1""","['restruct', '""gopkg.in/restruct.v1""']"
6,),[')']
7,type MessageType uint8,"['type', 'MessageType', 'uint8']"
8,const (,"['const', '(']"
9,    MessageTypeOne MessageType = iota + 1,"['MessageTypeOne', 'MessageType', '=', 'iota', '+', '1']"
10,    MessageTypeTwo,['MessageTypeTwo']
11,    MessageTypeThree,['MessageTypeThree']
12,),[')']
13,// Message is the data to deserialize from the binary stream,"['//', 'Message', 'is', 'the', 'data', 'to', 'deserialize', 'from', 'the', 'binary', 'stream']"
14,type Message struct {,"['type', 'Message', 'struct', '{']"
15,"    Length     uint32      `struct:""uint32""` // message size in bytes (including length)","['Length', 'uint32', 'struct', ':', '""uint32""', '//', 'message', 'size', 'in', 'bytes', '(', 'including', 'length', ')']"
16,"    Type       MessageType `struct:""uint8""`","['Type', 'MessageType', 'struct', ':', '""uint8""']"
17,"    Version    uint8       `struct:""uint8:4""` // Just need 4 bits","['Version', 'uint8', 'struct', ':', '""uint8:4""', '//', 'Just', 'need', '4', 'bits']"
18,"    Subversion uint8       `struct:""uint8:2""` // just need 2 bits","['Subversion', 'uint8', 'struct', ':', '""uint8:2""', '//', 'just', 'need', '2', 'bits']"
19,"    Optional   uint8       `struct:""uint8:1""` // just one bit --> '1' means next field is NOT present","['Optional', 'uint8', 'struct', ':', '""uint8:1""', '//', 'just', 'one', 'bit', '-->', ""'1'"", 'means', 'next', 'field', 'is', 'NOT', 'present']"
20,    NodeName   string      ``,"['NodeName', 'string']"
21,"    ANumber    uint16      `struct:""uint16:10""` // just need 10 bits","['ANumber', 'uint16', 'struct', ':', '""uint16:10""', '//', 'just', 'need', '10', 'bits']"
22,},['}']
23,// (length(4)+type(1)+(version(4bits)+Subversion(2bits)+Optional(1bit))) = 6 bytes,"['//', '(length(4)+type(1)+(version(4bits)+Subversion(2bits)+Optional(1bit)))', '=', '6', 'bytes']"
24,// need 32bit alignment,"['//', 'need', '32bit', 'alignment']"
25,func main() {,"['func', 'main', '()', '{']"
26,"    var inStream = []byte{0x08, // just 8 bytes needed","['var', 'inStream', '=', '[]', 'byte', '{', '0x08', ',', '//', 'just', '8', 'bytes', 'needed']"
27,"        0x01,       // messge type = MessageTypeOne","['0x01', ',', '//', 'messge', 'type', '=', 'MessageTypeOne']"
28,"        0x4a,       // Version=0100 Subversion=10 Optional=1 ANumber = 0 (MSB bit)","['0x4a', ',', '//', 'Version=0100', 'Subversion=10', 'Optional=1', 'ANumber', '=', '0', '(', 'MSB', 'bit', ')']"
29,"        0x00, 0x60, // ANumber(000 0000 011) Padding = 0 0000 for 32 bits alignment","['0x00', ',', '0x60', ',', '//', 'ANumber(000', '0000', '011', ')', 'Padding', '=', '0', '0000', 'for', '32', 'bits', 'alignment']"
30,    },['}']
31,    var msg Message,"['var', 'msg', 'Message']"
32,"    err := restruct.Unpack(inStream, binary.BigEndian, &msg)","['err', ':=', 'restruct.Unpack(inStream, binary.BigEndian, &msg)']"
33,    if err != nil {,"['if', 'err', '!=', 'nil', '{']"
34,        panic(err),['panic(err)']
35,    },['}']
36,    fmt.Println(msg),['fmt.Println(msg)']
37,    // Expected:,"['//', 'Expected', ':']"
38,    // msg.Length = 8,"['//', 'msg.Length', '=', '8']"
39,    // msg.Type = 1,"['//', 'msg.Type', '=', '1']"
40,    // msg.Version = 4,"['//', 'msg.Version', '=', '4']"
41,    // msg.Subversion = 2,"['//', 'msg.Subversion', '=', '2']"
42,    // msg.Optional = 1,"['//', 'msg.Optional', '=', '1']"
43,"    // msg.NodeName = """"","['//', 'msg.NodeName', '=', '""""']"
44,    // msg.ANumber = 3,"['//', 'msg.ANumber', '=', '3']"
45,},['}']
46,"

I will receive inStream from a TCP connection and will want to deserialize the binary data and get a Message struct with the expected values ... 

Hope this will clarify my question.

Thanks again ;)
","['I', 'will', 'receive', 'inStream', 'from', 'a', 'TCP', 'connection', 'and', 'will', 'want', 'to', 'deserialize', 'the', 'binary', 'data', 'and', 'get', 'a', 'Message', 'struct', 'with', 'the', 'expected', 'values', '...', 'Hope', 'this', 'will', 'clarify', 'my', 'question', '.', 'Thanks', 'again', ';)']"
