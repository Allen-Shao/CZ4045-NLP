,text,token
0,"I want to sign a public key from ascii armor with a private key in go language.For that I developed following code but the problem is when I check the signature in gpg --check-sigs the signature created by code is shown as ""bad Signature"".Please Help as I cant figure out any way of solving it.I have already postd on golang-nuts.I am just learning golang for my college project and I am stuck here,Please help.

","['I', 'want', 'to', 'sign', 'a', 'public', 'key', 'from', 'ascii', 'armor', 'with', 'a', 'private', 'key', 'in', 'go', 'language.For', 'that', 'I', 'developed', 'following', 'code', 'but', 'the', 'problem', 'is', 'when', 'I', 'check', 'the', 'signature', 'in', 'gpg', '-', '-', 'check-sigs', 'the', 'signature', 'created', 'by', 'code', 'is', 'shown', 'as', '""', 'bad', 'Signature"".Please', 'Help', 'as', 'I', 'cant', 'figure', 'out', 'any', 'way', 'of', 'solving', 'it.I', 'have', 'already', 'postd', 'on', 'golang-nuts.I', 'am', 'just', 'learning', 'golang', 'for', 'my', 'college', 'project', 'and', 'I', 'am', 'stuck', 'here,Please', 'help', '.']"
1,    // signer,"['//', 'signer']"
2,package main,"['package', 'main']"
3,import (,"['import', '(']"
4,"    ""bytes""","['""bytes""']"
5,"    ""code.google.com/p/go.crypto/openpgp""","['""code.google.com/p/go.crypto/openpgp""']"
6,"    ""code.google.com/p/go.crypto/openpgp/armor""","['""code.google.com/p/go.crypto/openpgp/armor""']"
7,"    ""code.google.com/p/go.crypto/openpgp/packet""","['""code.google.com/p/go.crypto/openpgp/packet""']"
8,"    ""fmt""","['""fmt""']"
9,),[')']
10,// This function takes asciiarmored private key which will sign the public key,"['//', 'This', 'function', 'takes', 'asciiarmored', 'private', 'key', 'which', 'will', 'sign', 'the', 'public', 'key']"
11,"//Public key is also ascii armored,pripwd is password of private key in string","['//', 'Public', 'key', 'is', 'also', 'ascii', 'armored,pripwd', 'is', 'password', 'of', 'private', 'key', 'in', 'string']"
12,//This function will return ascii armored signed public key i.e. (pubkey+sign by prikey),"['//', 'This', 'function', 'will', 'return', 'ascii', 'armored', 'signed', 'public', 'key', 'i.e', '.', '(', 'pubkey+sign', 'by', 'prikey', ')']"
13,"func SignPubKeyPKS(asciiPub string, asciiPri string, pripwd string) (asciiSignedKey string) {","['func', 'SignPubKeyPKS(asciiPub string, asciiPri string, pripwd string) (asciiSignedKey string)', '{']"
14,    //get Private key from armor,"['//', 'get', 'Private', 'key', 'from', 'armor']"
15,"    _, priEnt := getPri(asciiPri, pripwd) //pripwd is the password todecrypt the private key","['_', ',', 'priEnt', ':=', 'getPri(asciiPri, pripwd)', '//', 'pripwd', 'is', 'the', 'password', 'todecrypt', 'the', 'private', 'key']"
16,"    _, pubEnt := getPub(asciiPub)         //This will generate signature and add it to pubEnt","['_', ',', 'pubEnt', ':=', 'getPub(asciiPub)', '//', 'This', 'will', 'generate', 'signature', 'and', 'add', 'it', 'to', 'pubEnt']"
17,"    usrIdstring := """"","['usrIdstring', ':=', '""""']"
18,"    for _, uIds := range pubEnt.Identities {","['for', '_', ',', 'uIds', ':=', 'range', 'pubEnt', '.', 'Identities', '{']"
19,        usrIdstring = uIds.Name,"['usrIdstring', '=', 'uIds', '.', 'Name']"
20,    },['}']
21,    fmt.Println(usrIdstring),['fmt.Println(usrIdstring)']
22,"    errSign := pubEnt.SignIdentity(usrIdstring, &priEnt, nil)","['errSign', ':=', 'pubEnt.SignIdentity(usrIdstring, &priEnt, nil)']"
23,    if errSign != nil {,"['if', 'errSign', '!=', 'nil', '{']"
24,"        fmt.Println(""Signing Key "", errSign.Error())","['fmt.Println(""Signing Key "", errSign.Error())']"
25,        return,['return']
26,    },['}']
27,    asciiSignedKey = PubEntToAsciiArmor(pubEnt),"['asciiSignedKey', '=', 'PubEntToAsciiArmor(pubEnt)']"
28,    return,['return']
29,},['}']
30,//get packet.PublicKey and openpgp.Entity of Public Key from ascii armor,"['//', 'get', 'packet.PublicKey', 'and', 'openpgp.Entity', 'of', 'Public', 'Key', 'from', 'ascii', 'armor']"
31,"func getPub(asciiPub string) (pubKey packet.PublicKey, retEntity openpgp.Entity) {","['func', 'getPub(asciiPub string) (pubKey packet.PublicKey, retEntity openpgp.Entity)', '{']"
32,    read1 := bytes.NewReader([]byte(asciiPub)),"['read1', ':=', 'bytes.NewReader([]byte(asciiPub))']"
33,"    entityList, errReadArm := openpgp.ReadArmoredKeyRing(read1)","['entityList', ',', 'errReadArm', ':=', 'openpgp.ReadArmoredKeyRing(read1)']"
34,    if errReadArm != nil {,"['if', 'errReadArm', '!=', 'nil', '{']"
35,"        fmt.Println(""Reading Pubkey "", errReadArm.Error())","['fmt.Println(""Reading Pubkey "", errReadArm.Error())']"
36,        return,['return']
37,    },['}']
38,"    for _, pubKeyEntity := range entityList {","['for', '_', ',', 'pubKeyEntity', ':=', 'range', 'entityList', '{']"
39,        if pubKeyEntity.PrimaryKey != nil {,"['if', 'pubKeyEntity', '.', 'PrimaryKey', '!=', 'nil', '{']"
40,            pubKey = *pubKeyEntity.PrimaryKey,"['pubKey', '=', '*', 'pubKeyEntity', '.', 'PrimaryKey']"
41,            retEntity = *pubKeyEntity,"['retEntity', '=', '*', 'pubKeyEntity']"
42,        },['}']
43,    },['}']
44,    return,['return']
45,},['}']
46,//get packet.PrivateKEy and openpgp.Entity of Private Key from ascii armor,"['//', 'get', 'packet.PrivateKEy', 'and', 'openpgp.Entity', 'of', 'Private', 'Key', 'from', 'ascii', 'armor']"
47,"func getPri(asciiPri string, pripwd string) (priKey packet.PrivateKey, priEnt openpgp.Entity) {","['func', 'getPri(asciiPri string, pripwd string) (priKey packet.PrivateKey, priEnt openpgp.Entity)', '{']"
48,    read1 := bytes.NewReader([]byte(asciiPri)),"['read1', ':=', 'bytes.NewReader([]byte(asciiPri))']"
49,"    entityList, errReadArm := openpgp.ReadArmoredKeyRing(read1)","['entityList', ',', 'errReadArm', ':=', 'openpgp.ReadArmoredKeyRing(read1)']"
50,    if errReadArm != nil {,"['if', 'errReadArm', '!=', 'nil', '{']"
51,"        fmt.Println(""Reading PriKey "", errReadArm.Error())","['fmt.Println(""Reading PriKey "", errReadArm.Error())']"
52,        return,['return']
53,    },['}']
54,"    for _, can_pri := range entityList {","['for', '_', ',', 'can_pri', ':=', 'range', 'entityList', '{']"
55,        smPr := can_pri.PrivateKey,"['smPr', ':=', 'can_pri', '.', 'PrivateKey']"
56,        retEntity := can_pri,"['retEntity', ':=', 'can_pri']"
57,        if smPr == nil {,"['if', 'smPr', '==', 'nil', '{']"
58,"            fmt.Println(""No Private Key"")","['fmt.Println(""No Private Key"")']"
59,            return,['return']
60,        },['}']
61,        priKey = *smPr,"['priKey', '=', '*', 'smPr']"
62,        errDecr := priKey.Decrypt([]byte(pripwd)),"['errDecr', ':=', 'priKey.Decrypt([]byte(pripwd))']"
63,        if errDecr != nil {,"['if', 'errDecr', '!=', 'nil', '{']"
64,"            fmt.Println(""Decrypting "", errDecr.Error())","['fmt.Println(""Decrypting "", errDecr.Error())']"
65,            return,['return']
66,        },['}']
67,        retEntity.PrivateKey = &priKey,"['retEntity', '.', 'PrivateKey', '=', '&', 'priKey']"
68,        priEnt = *retEntity,"['priEnt', '=', '*', 'retEntity']"
69,    },['}']
70,    return,['return']
71,},['}']
72,//Create ASscii Armor from openpgp.Entity,"['//', 'Create', 'ASscii', 'Armor', 'from', 'openpgp.Entity']"
73,func PubEntToAsciiArmor(pubEnt openpgp.Entity) (asciiEntity string) {,"['func', 'PubEntToAsciiArmor(pubEnt openpgp.Entity) (asciiEntity string)', '{']"
74,    gotWriter := bytes.NewBuffer(nil),"['go', 'tWriter', ':=', 'bytes.NewBuffer(nil)']"
75,"    wr, errEncode := armor.Encode(gotWriter, openpgp.PublicKeyType, nil)","['wr', ',', 'errEncode', ':=', 'armor.Encode(gotWriter, openpgp.PublicKeyType, nil)']"
76,    if errEncode != nil {,"['if', 'errEncode', '!=', 'nil', '{']"
77,"        fmt.Println(""Encoding Armor "", errEncode.Error())","['fmt.Println(""Encoding Armor "", errEncode.Error())']"
78,        return,['return']
79,    },['}']
80,    errSerial := pubEnt.Serialize(wr),"['errSerial', ':=', 'pubEnt.Serialize(wr)']"
81,    if errSerial != nil {,"['if', 'errSerial', '!=', 'nil', '{']"
82,"        fmt.Println(""Serializing PubKey "", errSerial.Error())","['fmt.Println(""Serializing PubKey "", errSerial.Error())']"
83,    },['}']
84,    errClosing := wr.Close(),"['errClosing', ':=', 'wr.Close()']"
85,    if errClosing != nil {,"['if', 'errClosing', '!=', 'nil', '{']"
86,"        fmt.Println(""Closing writer "", errClosing.Error())","['fmt.Println(""Closing writer "", errClosing.Error())']"
87,    },['}']
88,    asciiEntity = gotWriter.String(),"['asciiEntity', '=', 'go', 'tWriter.String()']"
89,    return,['return']
90,},['}']
