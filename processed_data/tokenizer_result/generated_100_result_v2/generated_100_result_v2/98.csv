,text,token
0,"I've just started learning go, and have been working through the tour. The last exercise is to edit a web crawler to crawl in parallel and without repeats.

Here is the link to the exercise: http://tour.golang.org/#70

Here is the code. I only changed the crawl and the main function. So I'll just post those to keep it neat.

","['I', ""'ve"", 'just', 'started', 'learning', 'go', ',', 'and', 'have', 'been', 'working', 'through', 'the', 'tour', '.', 'The', 'last', 'exercise', 'is', 'to', 'edit', 'a', 'web', 'crawler', 'to', 'crawl', 'in', 'parallel', 'and', 'without', 'repeats', '.', 'Here', 'is', 'the', 'link', 'to', 'the', 'exercise', ':', 'http://tour.golang.org/#70', 'Here', 'is', 'the', 'code', '.', 'I', 'only', 'changed', 'the', 'crawl', 'and', 'the', 'main', 'function', '.', 'So', ""I'll"", 'just', 'post', 'those', 'to', 'keep', 'it', 'neat', '.']"
1,    // Crawl uses fetcher to recursively crawl,"['//', 'Crawl', 'uses', 'fetcher', 'to', 'recursively', 'crawl']"
2,"    // pages starting with url, to a maximum of depth.","['//', 'pages', 'starting', 'with', 'url', ',', 'to', 'a', 'maximum', 'of', 'depth', '.']"
3,    var used = make(map[string]bool),"['var', 'used', '=', 'make(map[string]bool)']"
4,    var urlchan = make(chan string),"['var', 'urlchan', '=', 'make(chan string)']"
5,"    func Crawl(url string, depth int, fetcher Fetcher) {","['func', 'Crawl(url string, depth int, fetcher Fetcher)', '{']"
6,        // TODO: Fetch URLs in parallel.,"['//', 'TODO', ':', 'Fetch', 'URLs', 'in', 'parallel', '.']"
7,        // Done: Don't fetch the same URL twice.,"['//', 'Done', ':', 'Do', ""n't"", 'fetch', 'the', 'same', 'URL', 'twice', '.']"
8,        // This implementation doesn't do either:,"['//', 'This', 'implementation', 'does', ""n't"", 'do', 'either', ':']"
9,        done := make(chan bool),"['done', ':=', 'make(chan bool)']"
10,        if depth <= 0 {,"['if', 'depth', '<=', '0', '{']"
11,            return,['return']
12,        },['}']
13,"        body, urls, err := fetcher.Fetch(url)","['body', ',', 'urls', ',', 'err', ':=', 'fetcher.Fetch(url)']"
14,        if err != nil {,"['if', 'err', '!=', 'nil', '{']"
15,            fmt.Println(err),['fmt.Println(err)']
16,            return,['return']
17,        },['}']
18,"        fmt.Printf(""\nfound: %s %q\n\n"", url, body)","['fmt.Printf(""\\nfound: %s %q\\n\\n"", url, body)']"
19,        go func() {,"['go', 'func', '()', '{']"
20,"            for _, i := range urls {","['for', '_', ',', 'i', ':=', 'range', 'urls', '{']"
21,                urlchan <- i,"['urlchan', '<-', 'i']"
22,            },['}']
23,            done <- true,"['done', '<-', 'true']"
24,        }(),['}()']
25,        for u := range urlchan {,"['for', 'u', ':=', 'range', 'urlchan', '{']"
26,            if used[u] == false {,"['if', 'used', '[', 'u', ']', '==', 'false', '{']"
27,                used[u] = true,"['used', '[', 'u', ']', '=', 'true']"
28,"                go Crawl(u, depth-1, fetcher)","['go', 'Crawl(u, depth-1, fetcher)']"
29,            },['}']
30,            if <-done == true {,"['if', '<-', 'done', '==', 'true', '{']"
31,                break,['break']
32,            },['}']
33,        },['}']
34,        return,['return']
35,    },['}']
36,    func main() {,"['func', 'main()', '{']"
37,"        used[""http://golang.org/""] = true","['used', '[', '""http://golang.org/""', ']', '=', 'true']"
38,"        Crawl(""http://golang.org/"", 4, fetcher)","['Crawl(""http://golang.org/"", 4, fetcher)']"
39,    },['}']
40,"

The problem is that when I run the program the crawler stops after printing

","['The', 'problem', 'is', 'that', 'when', 'I', 'run', 'the', 'program', 'the', 'crawler', 'stops', 'after', 'printing']"
41,    not found: http://golang.org/cmd/,"['not', 'found', ':', 'http', '://', 'go', 'lang', '.', 'org/cmd/']"
42,"

This only happens when I try to make the program run in parallel. If I have it run linearly then all the urls are found correctly.

Note: If I am not doing this right (parallelism I mean) then I apologise.
","['This', 'only', 'happens', 'when', 'I', 'try', 'to', 'make', 'the', 'program', 'run', 'in', 'parallel', '.', 'If', 'I', 'have', 'it', 'run', 'linearly', 'then', 'all', 'the', 'urls', 'are', 'found', 'correctly', '.', 'Note', ':', 'If', 'I', 'am', 'not', 'doing', 'this', 'right', '(', 'parallelism', 'I', 'mean', ')', 'then', 'I', 'apologise', '.']"
