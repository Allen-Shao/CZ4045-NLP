,text,token
0,"I found a strange problem in golang.The program executed by exec.Start() will quit if the parent program is interrupt by the signal os.Interrupt,while the child program will NOT quit if the parent program exit normally.What's the difference between that two conditions?
   For examples:

","['I', 'found', 'a', 'strange', 'problem', 'in', 'golang.The', 'program', 'executed', 'by', 'exec.Start()', 'will', 'quit', 'if', 'the', 'parent', 'program', 'is', 'interrupt', 'by', 'the', 'signal', 'os.Interrupt,while', 'the', 'child', 'program', 'will', 'NOT', 'quit', 'if', 'the', 'parent', 'program', 'exit', 'normally.What', ""'s"", 'the', 'difference', 'between', 'that', 'two', 'conditions', '?', 'For', 'examples', ':']"
1,package main,"['package', 'main']"
2,"import ""fmt""","['import', '""fmt""']"
3,"import ""os""","['import', '""os""']"
4,"import ""time""","['import', '""time""']"
5,"import ""os/exec""","['import', '""os/exec""']"
6,func main(){,"['func', 'main()', '{']"
7,"    cmd := exec.Command(""sleep"", ""100000"")","['cmd', ':=', 'exec.Command(""sleep"", ""100000"")']"
8,    cmd.Env = os.Environ(),"['cmd', '.', 'Env', '=', 'os.Environ()']"
9,    fmt.Println(cmd.Env),['fmt.Println(cmd.Env)']
10,    cmd.Start(),['cmd.Start()']
11,    time.Sleep(1e9*20),['time.Sleep(1e9*20)']
12,    return,['return']
13,} ,['}']
14,"

In the later condition the parent of sleep 100000 will be the init process after 20s if we didn't interrupt the main program.
","['In', 'the', 'later', 'condition', 'the', 'parent', 'of', 'sleep', '100000', 'will', 'be', 'the', 'init', 'process', 'after', '20s', 'if', 'we', 'did', ""n't"", 'interrupt', 'the', 'main', 'program', '.']"
