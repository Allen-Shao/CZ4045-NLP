,text,token
0,"I fully understood my question, it was about RSA_public_decrypt method of openssl: https://www.openssl.org/docs/man1.1.0/crypto/RSA_public_decrypt.html

I did not found any pure-golang realization. Realization with cgo: https://github.com/dgkang/rsa/blob/master/rsa/rsa.go

UPD, work for me:

","['I', 'fully', 'understood', 'my', 'question', ',', 'it', 'was', 'about', 'RSA_public_decrypt', 'method', 'of', 'openssl', ':', 'https://www.openssl.org/docs/man1.1.0/crypto/RSA_public_decrypt.html', 'I', 'did', 'not', 'found', 'any', 'pure-golang', 'realization', '.', 'Realization', 'with', 'cgo', ':', 'https://github.com/dgkang/rsa/blob/master/rsa/rsa.go', 'UPD', ',', 'work', 'for', 'me', ':']"
1,"func RSA_public_decrypt(pubKey *rsa.PublicKey, data []byte) []byte {","['func', 'RSA_public_decrypt', '(', 'pubKey', '*', 'rsa', '.', 'PublicKey', ',', 'data', '[]', 'byte', ')', '[]', 'byte', '{']"
2,    c := new(big.Int),"['c', ':=', 'new(big.Int)']"
3,    m := new(big.Int),"['m', ':=', 'new(big.Int)']"
4,    m.SetBytes(data),['m.SetBytes(data)']
5,    e := big.NewInt(int64(pubKey.E)),"['e', ':=', 'big.NewInt(int64(pubKey.E))']"
6,"    c.Exp(m, e, pubKey.N)","['c.Exp(m, e, pubKey.N)']"
7,    out := c.Bytes(),"['out', ':=', 'c.Bytes()']"
8,    skip := 0,"['skip', ':=', '0']"
9,    for i := 2; i < len(out); i++ {,"['for', 'i', ':=', '2', ';', 'i', '<', 'len', '(', 'out', ');', 'i', '++', '{']"
10,        if i+1 >= len(out) {,"['if', 'i', '+', '1', '>=', 'len', '(', 'out', ')', '{']"
11,            break,['break']
12,        },['}']
13,        if out[i] == 0xff && out[i+1] == 0 {,"['if', 'out', '[', 'i', ']', '==', '0xff', '&&', 'out', '[', 'i', '+', '1', ']', '==', '0', '{']"
14,            skip = i + 2,"['skip', '=', 'i', '+', '2']"
15,            break,['break']
16,        },['}']
17,    },['}']
18,    return out[skip:],"['return', 'out', '[', 'skip', ':]']"
19,},['}']
