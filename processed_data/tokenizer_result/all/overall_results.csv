,post_id,text,tokens
0,1743546,"GO introduces goroutines and channels. See language FAQ
","['GO', 'introduces', 'goroutines', 'and', 'channels.', 'See', 'language', 'FAQ']"
1,1744135,"Differences? Pretty much everything!


Concurrency and channels.
Interfaces.
Static typechecking.
...

","['Differences?', 'Pretty', 'much', 'everything!', 'Concurrency', 'and', 'channels.', 'Interfaces.', 'Static', 'typechecking.', '...']"
2,1748038,"My main reason for trying out go is the supposed ease of introducing concurrency into programs.  I think that will be the 'next big thing', as processor speeds will tail off, and increasingly multiple cores are available.  If you want to make use of multicore processors, you need to write your program so that it can run things concurrently.

I earlier looked at Erlang, but despite being used to Prolog I find it a bit strange still; it is so different from your 'average' programming language (of the C or Pascal family).  But its concurrency features are easy to use, once you get the hang of it.  With very little effort I was able to write a parallel parser, which does not use a stack, but spawns a new 'thread/process' every time there were multiple options.

So far go looks quite alright, despite some slight inconsistencies.  And it's also fast, which is a bonus.

So unless Cython also makes concurrency easy, I'd favour go...
","['My', 'main', 'reason', 'for', 'trying', 'out', 'go', 'is', 'the', 'supposed', 'ease', 'of', 'introducing', 'concurrency', 'into', 'programs.', 'I', 'think', 'that', 'will', 'be', 'the', ""'next"", 'big', ""thing',"", 'as', 'processor', 'speeds', 'will', 'tail', 'off,', 'and', 'increasingly', 'multiple', 'cores', 'are', 'available.', 'If', 'you', 'want', 'to', 'make', 'use', 'of', 'multicore', 'processors,', 'you', 'need', 'to', 'write', 'your', 'program', 'so', 'that', 'it', 'can', 'run', 'things', 'concurrently.', 'I', 'earlier', 'looked', 'at', 'Erlang,', 'but', 'despite', 'being', 'used', 'to', 'Prolog', 'I', 'find', 'it', 'a', 'bit', 'strange', 'still;', 'it', 'is', 'so', 'different', 'from', 'your', ""'average'"", 'programming', 'language', '(of', 'the', 'C', 'or', 'Pascal', 'family).', 'But', 'its', 'concurrency', 'features', 'are', 'easy', 'to', 'use,', 'once', 'you', 'get', 'the', 'hang', 'of', 'it.', 'With', 'very', 'little', 'effort', 'I', 'was', 'able', 'to', 'write', 'a', 'parallel', 'parser,', 'which', 'does', 'not', 'use', 'a', 'stack,', 'but', 'spawns', 'a', 'new', ""'thread/process'"", 'every', 'time', 'there', 'were', 'multiple', 'options.', 'So', 'far', 'go', 'looks', 'quite', 'alright,', 'despite', 'some', 'slight', 'inconsistencies.', 'And', ""it's"", 'also', 'fast,', 'which', 'is', 'a', 'bonus.', 'So', 'unless', 'Cython', 'also', 'makes', 'concurrency', 'easy,', ""I'd"", 'favour', 'go...']"
3,1749058,"Cython isn't really a language in the conventional sense. It is a preprocessor for building Python extensions that takes Python-like syntax (actually they strive for full Python compatibility) and produces C code (using the Python C API). Doing this they are able to include some special case optimisations, but the real benefits come when you add Cython specific static type information which is incorporated into the C code, bypassing the Python runtime for those operations and resulting in a high speed up. 

Go is a compiled programming language. The first thing that can be done in Go is producing an executable that doesn't include the Python runtime/start a Python interpreter - this is impossible in Cython. (May not be technically impossible - but there is really no point to use Cython if you are not working with Python). Since Cython just produces C most of your questions in the comment don't really apply - you can use any C debugger (although the fact that's a Python extension makes things a bit more complicated).
","['Cython', ""isn't"", 'really', 'a', 'language', 'in', 'the', 'conventional', 'sense.', 'It', 'is', 'a', 'preprocessor', 'for', 'building', 'Python', 'extensions', 'that', 'takes', 'Python-like', 'syntax', '(actually', 'they', 'strive', 'for', 'full', 'Python', 'compatibility)', 'and', 'produces', 'C', 'code', '(using', 'the', 'Python', 'C', 'API).', 'Doing', 'this', 'they', 'are', 'able', 'to', 'include', 'some', 'special', 'case', 'optimisations,', 'but', 'the', 'real', 'benefits', 'come', 'when', 'you', 'add', 'Cython', 'specific', 'static', 'type', 'information', 'which', 'is', 'incorporated', 'into', 'the', 'C', 'code,', 'bypassing', 'the', 'Python', 'runtime', 'for', 'those', 'operations', 'and', 'resulting', 'in', 'a', 'high', 'speed', 'up.', 'Go', 'is', 'a', 'compiled', 'programming', 'language.', 'The', 'first', 'thing', 'that', 'can', 'be', 'done', 'in', 'Go', 'is', 'producing', 'an', 'executable', 'that', ""doesn't"", 'include', 'the', 'Python', 'runtime/start', 'a', 'Python', 'interpreter', '-', 'this', 'is', 'impossible', 'in', 'Cython.', '(May', 'not', 'be', 'technically', 'impossible', '-', 'but', 'there', 'is', 'really', 'no', 'point', 'to', 'use', 'Cython', 'if', 'you', 'are', 'not', 'working', 'with', 'Python).', 'Since', 'Cython', 'just', 'produces', 'C', 'most', 'of', 'your', 'questions', 'in', 'the', 'comment', ""don't"", 'really', 'apply', '-', 'you', 'can', 'use', 'any', 'C', 'debugger', '(although', 'the', 'fact', ""that's"", 'a', 'Python', 'extension', 'makes', 'things', 'a', 'bit', 'more', 'complicated).']"
4,1798578,"
Yes, shared state could be faster in this case.  But only if you can forgo the locks, and this is only doable if it's absolutely read-only.  if it's 'mostly read-only' then you need a lock (unless you manage to write lock-free structures, be warned that they're even trickier than locks), and then you'd be hard-pressed to make it perform as fast as a good message-passing architecture.
Yes, you could write a 'server process' to share it. With really lightweight processes, it's no more heavy than writing a small API to access the data.  Think like an object (in OOP sense) that 'owns' the data.  Splitting the data in chunks to enhance parallelism (called 'sharding' in DB circles) helps in big cases (or if the data is on slow storage).
Even if NUMA is getting mainstream, you still have more and more cores per NUMA cell.  And a big difference is that a message can be passed between just two cores, while a lock has to be flushed from cache on ALL cores, limiting it to the inter-cell bus latency (even slower than RAM access).  If anything, shared-state/locks is getting more and more unfeasible.


in short.... get used to message passing and server processes, it's all the rage.

Edit: revisiting this answer, I want to add about a phrase found on Go's documentation:


  share memory by communicating, don't communicate by sharing memory.


the idea is: when you have a block of memory shared between threads, the typical way to avoid concurrent access is to use a lock to arbitrate.  The Go style is to pass a message with the reference, a thread only accesses the memory when receiving the message.  It relies on some measure of programmer discipline; but results in very clean-looking code that can be easily proofread, so it's relatively easy to debug.

the advantage is that you don't have to copy big blocks of data on every message, and don't have to effectively flush down caches as on some lock implementations.  It's still somewhat early to say if the style leads to higher performance designs or not.  (specially since current Go runtime is somewhat naive on thread scheduling)
","['Yes,', 'shared', 'state', 'could', 'be', 'faster', 'in', 'this', 'case.', 'But', 'only', 'if', 'you', 'can', 'forgo', 'the', 'locks,', 'and', 'this', 'is', 'only', 'doable', 'if', ""it's"", 'absolutely', 'read-only.', 'if', ""it's"", ""'mostly"", ""read-only'"", 'then', 'you', 'need', 'a', 'lock', '(unless', 'you', 'manage', 'to', 'write', 'lock-free', 'structures,', 'be', 'warned', 'that', ""they're"", 'even', 'trickier', 'than', 'locks),', 'and', 'then', ""you'd"", 'be', 'hard-pressed', 'to', 'make', 'it', 'perform', 'as', 'fast', 'as', 'a', 'good', 'message-passing', 'architecture.', 'Yes,', 'you', 'could', 'write', 'a', ""'server"", ""process'"", 'to', 'share', 'it.', 'With', 'really', 'lightweight', 'processes,', ""it's"", 'no', 'more', 'heavy', 'than', 'writing', 'a', 'small', 'API', 'to', 'access', 'the', 'data.', 'Think', 'like', 'an', 'object', '(in', 'OOP', 'sense)', 'that', ""'owns'"", 'the', 'data.', 'Splitting', 'the', 'data', 'in', 'chunks', 'to', 'enhance', 'parallelism', '(called', ""'sharding'"", 'in', 'DB', 'circles)', 'helps', 'in', 'big', 'cases', '(or', 'if', 'the', 'data', 'is', 'on', 'slow', 'storage).', 'Even', 'if', 'NUMA', 'is', 'getting', 'mainstream,', 'you', 'still', 'have', 'more', 'and', 'more', 'cores', 'per', 'NUMA', 'cell.', 'And', 'a', 'big', 'difference', 'is', 'that', 'a', 'message', 'can', 'be', 'passed', 'between', 'just', 'two', 'cores,', 'while', 'a', 'lock', 'has', 'to', 'be', 'flushed', 'from', 'cache', 'on', 'ALL', 'cores,', 'limiting', 'it', 'to', 'the', 'inter-cell', 'bus', 'latency', '(even', 'slower', 'than', 'RAM', 'access).', 'If', 'anything,', 'shared-state/locks', 'is', 'getting', 'more', 'and', 'more', 'unfeasible.', 'in', 'short....', 'get', 'used', 'to', 'message', 'passing', 'and', 'server', 'processes,', ""it's"", 'all', 'the', 'rage.', 'Edit:', 'revisiting', 'this', 'answer,', 'I', 'want', 'to', 'add', 'about', 'a', 'phrase', 'found', 'on', ""Go's"", 'documentation:', 'share', 'memory', 'by', 'communicating,', ""don't"", 'communicate', 'by', 'sharing', 'memory.', 'the', 'idea', 'is:', 'when', 'you', 'have', 'a', 'block', 'of', 'memory', 'shared', 'between', 'threads,', 'the', 'typical', 'way', 'to', 'avoid', 'concurrent', 'access', 'is', 'to', 'use', 'a', 'lock', 'to', 'arbitrate.', 'The', 'Go', 'style', 'is', 'to', 'pass', 'a', 'message', 'with', 'the', 'reference,', 'a', 'thread', 'only', 'accesses', 'the', 'memory', 'when', 'receiving', 'the', 'message.', 'It', 'relies', 'on', 'some', 'measure', 'of', 'programmer', 'discipline;', 'but', 'results', 'in', 'very', 'clean-looking', 'code', 'that', 'can', 'be', 'easily', 'proofread,', 'so', ""it's"", 'relatively', 'easy', 'to', 'debug.', 'the', 'advantage', 'is', 'that', 'you', ""don't"", 'have', 'to', 'copy', 'big', 'blocks', 'of', 'data', 'on', 'every', 'message,', 'and', ""don't"", 'have', 'to', 'effectively', 'flush', 'down', 'caches', 'as', 'on', 'some', 'lock', 'implementations.', ""It's"", 'still', 'somewhat', 'early', 'to', 'say', 'if', 'the', 'style', 'leads', 'to', 'higher', 'performance', 'designs', 'or', 'not.', '(specially', 'since', 'current', 'Go', 'runtime', 'is', 'somewhat', 'naive', 'on', 'thread', 'scheduling)']"
5,1798930,"Most modern processors use variants of the MESI protocol. Because of the shared state, Passing read-only data between different threads is very cheap. Modified shared data is very expensive though, because all other caches that store this cache line must invalidate it.

So if you have read-only data, it is very cheap to share it between threads instead of copying with messages. If you have read-mostly data, it can be expensive to share between threads, partly because of the need to synchronize access, and partly because writes destroy the cache friendly behavior of the shared data.

Immutable data structures can be beneficial here. Instead of changing the actual data structure, you simply make a new one that shares most of the old data, but with the things changed that you need changed. Sharing a single version of it is cheap, since all the data is immutable, but you can still update to a new version efficiently.
","['Most', 'modern', 'processors', 'use', 'variants', 'of', 'the', 'MESI', 'protocol.', 'Because', 'of', 'the', 'shared', 'state,', 'Passing', 'read-only', 'data', 'between', 'different', 'threads', 'is', 'very', 'cheap.', 'Modified', 'shared', 'data', 'is', 'very', 'expensive', 'though,', 'because', 'all', 'other', 'caches', 'that', 'store', 'this', 'cache', 'line', 'must', 'invalidate', 'it.', 'So', 'if', 'you', 'have', 'read-only', 'data,', 'it', 'is', 'very', 'cheap', 'to', 'share', 'it', 'between', 'threads', 'instead', 'of', 'copying', 'with', 'messages.', 'If', 'you', 'have', 'read-mostly', 'data,', 'it', 'can', 'be', 'expensive', 'to', 'share', 'between', 'threads,', 'partly', 'because', 'of', 'the', 'need', 'to', 'synchronize', 'access,', 'and', 'partly', 'because', 'writes', 'destroy', 'the', 'cache', 'friendly', 'behavior', 'of', 'the', 'shared', 'data.', 'Immutable', 'data', 'structures', 'can', 'be', 'beneficial', 'here.', 'Instead', 'of', 'changing', 'the', 'actual', 'data', 'structure,', 'you', 'simply', 'make', 'a', 'new', 'one', 'that', 'shares', 'most', 'of', 'the', 'old', 'data,', 'but', 'with', 'the', 'things', 'changed', 'that', 'you', 'need', 'changed.', 'Sharing', 'a', 'single', 'version', 'of', 'it', 'is', 'cheap,', 'since', 'all', 'the', 'data', 'is', 'immutable,', 'but', 'you', 'can', 'still', 'update', 'to', 'a', 'new', 'version', 'efficiently.']"
6,1801214,"One thing to realise is that the Erlang concurrency model does NOT really specify that the data in messages must be copied between processes, it states that sending messages is the only way to communicate and that there is no shared state. As all data is immutable, which is fundamental, then an implementation may very well not copy the data but just send a reference to it. Or may use a combination of both methods. As always, there is no best solution and there are trade-offs to be made when choosing how to do it.

The BEAM uses copying, except for large binaries where it sends a reference.
","['One', 'thing', 'to', 'realise', 'is', 'that', 'the', 'Erlang', 'concurrency', 'model', 'does', 'NOT', 'really', 'specify', 'that', 'the', 'data', 'in', 'messages', 'must', 'be', 'copied', 'between', 'processes,', 'it', 'states', 'that', 'sending', 'messages', 'is', 'the', 'only', 'way', 'to', 'communicate', 'and', 'that', 'there', 'is', 'no', 'shared', 'state.', 'As', 'all', 'data', 'is', 'immutable,', 'which', 'is', 'fundamental,', 'then', 'an', 'implementation', 'may', 'very', 'well', 'not', 'copy', 'the', 'data', 'but', 'just', 'send', 'a', 'reference', 'to', 'it.', 'Or', 'may', 'use', 'a', 'combination', 'of', 'both', 'methods.', 'As', 'always,', 'there', 'is', 'no', 'best', 'solution', 'and', 'there', 'are', 'trade-offs', 'to', 'be', 'made', 'when', 'choosing', 'how', 'to', 'do', 'it.', 'The', 'BEAM', 'uses', 'copying,', 'except', 'for', 'large', 'binaries', 'where', 'it', 'sends', 'a', 'reference.']"
7,1803219,"One solution that has not been presented here is master-slave replication. If you have a large data-structure, you can replicate changes to it out to all slaves that perform the update on their copy.

This is especially interesting if one wants to scale to several machines that don't even have the possibility to share memory without very artificial setups (mmap of a block device that read/write from a remote computer's memory?)

A variant of it is to have a transaction manager that one ask nicely to update the replicated data structure, and it will make sure that it serves one and only update-request concurrently. This is more of the mnesia model for master-master replication of mnesia table-data, which qualify as ""large data structure"".
","['One', 'solution', 'that', 'has', 'not', 'been', 'presented', 'here', 'is', 'master-slave', 'replication.', 'If', 'you', 'have', 'a', 'large', 'data-structure,', 'you', 'can', 'replicate', 'changes', 'to', 'it', 'out', 'to', 'all', 'slaves', 'that', 'perform', 'the', 'update', 'on', 'their', 'copy.', 'This', 'is', 'especially', 'interesting', 'if', 'one', 'wants', 'to', 'scale', 'to', 'several', 'machines', 'that', ""don't"", 'even', 'have', 'the', 'possibility', 'to', 'share', 'memory', 'without', 'very', 'artificial', 'setups', '(mmap', 'of', 'a', 'block', 'device', 'that', 'read/write', 'from', 'a', 'remote', ""computer's"", 'memory?)', 'A', 'variant', 'of', 'it', 'is', 'to', 'have', 'a', 'transaction', 'manager', 'that', 'one', 'ask', 'nicely', 'to', 'update', 'the', 'replicated', 'data', 'structure,', 'and', 'it', 'will', 'make', 'sure', 'that', 'it', 'serves', 'one', 'and', 'only', 'update-request', 'concurrently.', 'This', 'is', 'more', 'of', 'the', 'mnesia', 'model', 'for', 'master-master', 'replication', 'of', 'mnesia', 'table-data,', 'which', 'qualify', 'as', '""large', 'data', 'structure"".']"
8,1804568,"In Erlang, all values are immutable - so there's no need to copy a message when it's sent between processes, as it cannot be modified anyway.

In Go, message passing is by convention - there's nothing to prevent you sending someone a pointer over a channel, then modifying the data pointed to, only convention, so once again there's no need to copy the message.
","['In', 'Erlang,', 'all', 'values', 'are', 'immutable', '-', 'so', ""there's"", 'no', 'need', 'to', 'copy', 'a', 'message', 'when', ""it's"", 'sent', 'between', 'processes,', 'as', 'it', 'cannot', 'be', 'modified', 'anyway.', 'In', 'Go,', 'message', 'passing', 'is', 'by', 'convention', '-', ""there's"", 'nothing', 'to', 'prevent', 'you', 'sending', 'someone', 'a', 'pointer', 'over', 'a', 'channel,', 'then', 'modifying', 'the', 'data', 'pointed', 'to,', 'only', 'convention,', 'so', 'once', 'again', ""there's"", 'no', 'need', 'to', 'copy', 'the', 'message.']"
9,1806674,"The problem at the moment is indeed that the locking and cache-line coherency might be as expensive as copying a simpler data structure (say a few hundert bytes). 

But most of the time a clever written new multithreaded algorithm that tries to eliminate  most of the locking will always be faster - and a lot faster with modern lock-free data structures. Especially when you have well designed cache systems like Sun's Niagara chip level multithreading.

If your system/problem is not easily broken down into few and simple data access then you have a problem. And not all problems can be solved by message passing. This is why there are still some Itanium based super computers sold because they have terabyte of shared RAM and upto 128 CPU's working on the same shared memory. They are a magnitude more expensive then a mainstream x86 cluster with the same cpu power but you don't need to break down your data.

But another reason not mentioned so far is that programs can became much easier to write and maintain when you use a multithreaded approch. And message passign and shared nothing makes it even more maintainable.

Erlang was for example never designed to make things faster but to use a large number of threads to structure complex data and event flows. 

I guess this was one of the main point in the design. In the web world of google you usually don't care about performance - as long as it can run in parallel in the cloud. And with message passing you ideally can just add more computers without changing the source code.
","['The', 'problem', 'at', 'the', 'moment', 'is', 'indeed', 'that', 'the', 'locking', 'and', 'cache-line', 'coherency', 'might', 'be', 'as', 'expensive', 'as', 'copying', 'a', 'simpler', 'data', 'structure', '(say', 'a', 'few', 'hundert', 'bytes).', 'But', 'most', 'of', 'the', 'time', 'a', 'clever', 'written', 'new', 'multithreaded', 'algorithm', 'that', 'tries', 'to', 'eliminate', 'most', 'of', 'the', 'locking', 'will', 'always', 'be', 'faster', '-', 'and', 'a', 'lot', 'faster', 'with', 'modern', 'lock-free', 'data', 'structures.', 'Especially', 'when', 'you', 'have', 'well', 'designed', 'cache', 'systems', 'like', ""Sun's"", 'Niagara', 'chip', 'level', 'multithreading.', 'If', 'your', 'system/problem', 'is', 'not', 'easily', 'broken', 'down', 'into', 'few', 'and', 'simple', 'data', 'access', 'then', 'you', 'have', 'a', 'problem.', 'And', 'not', 'all', 'problems', 'can', 'be', 'solved', 'by', 'message', 'passing.', 'This', 'is', 'why', 'there', 'are', 'still', 'some', 'Itanium', 'based', 'super', 'computers', 'sold', 'because', 'they', 'have', 'terabyte', 'of', 'shared', 'RAM', 'and', 'upto', '128', ""CPU's"", 'working', 'on', 'the', 'same', 'shared', 'memory.', 'They', 'are', 'a', 'magnitude', 'more', 'expensive', 'then', 'a', 'mainstream', 'x86', 'cluster', 'with', 'the', 'same', 'cpu', 'power', 'but', 'you', ""don't"", 'need', 'to', 'break', 'down', 'your', 'data.', 'But', 'another', 'reason', 'not', 'mentioned', 'so', 'far', 'is', 'that', 'programs', 'can', 'became', 'much', 'easier', 'to', 'write', 'and', 'maintain', 'when', 'you', 'use', 'a', 'multithreaded', 'approch.', 'And', 'message', 'passign', 'and', 'shared', 'nothing', 'makes', 'it', 'even', 'more', 'maintainable.', 'Erlang', 'was', 'for', 'example', 'never', 'designed', 'to', 'make', 'things', 'faster', 'but', 'to', 'use', 'a', 'large', 'number', 'of', 'threads', 'to', 'structure', 'complex', 'data', 'and', 'event', 'flows.', 'I', 'guess', 'this', 'was', 'one', 'of', 'the', 'main', 'point', 'in', 'the', 'design.', 'In', 'the', 'web', 'world', 'of', 'google', 'you', 'usually', ""don't"", 'care', 'about', 'performance', '-', 'as', 'long', 'as', 'it', 'can', 'run', 'in', 'parallel', 'in', 'the', 'cloud.', 'And', 'with', 'message', 'passing', 'you', 'ideally', 'can', 'just', 'add', 'more', 'computers', 'without', 'changing', 'the', 'source', 'code.']"
10,1817627,"Usually message passing languages (this is especially easy in erlang, since it has immutable variables) optimise away the actual data copying between the processes (of course local processes only: you'll want to think your network distribution pattern wisely), so this isn't much an issue.
","['Usually', 'message', 'passing', 'languages', '(this', 'is', 'especially', 'easy', 'in', 'erlang,', 'since', 'it', 'has', 'immutable', 'variables)', 'optimise', 'away', 'the', 'actual', 'data', 'copying', 'between', 'the', 'processes', '(of', 'course', 'local', 'processes', 'only:', ""you'll"", 'want', 'to', 'think', 'your', 'network', 'distribution', 'pattern', 'wisely),', 'so', 'this', ""isn't"", 'much', 'an', 'issue.']"
11,1820363,"What is a large data structure?

One persons large is another persons small.

Last week I talked to two people - one person was making embedded devices he used the word
""large"" - I asked him what it meant - he say over 256 KBytes - later in the same week a
guy was talking about media distribution - he used the word ""large"" I asked him what he
meant - he thought for a bit and said ""won't fit on one machine"" say 20-100 TBytes

In Erlang terms ""large"" could mean ""won't fit into RAM"" - so with 4 GBytes of RAM
data structures > 100 MBytes might be considered large - copying a 500 MBytes data structure
might be a problem. Copying small data structures (say 

Really large data structures (i.e. ones that won't fit on one machine) have to be
copied and ""striped"" over several machines.

So I guess you have the following:

Small data structures are no problem - since they are small data processing times are
fast, copying is fast and so on (just because they are small)

Big data structures are a problem - because they don't fit on one machine - so copying is essential.
","['What', 'is', 'a', 'large', 'data', 'structure?', 'One', 'persons', 'large', 'is', 'another', 'persons', 'small.', 'Last', 'week', 'I', 'talked', 'to', 'two', 'people', '-', 'one', 'person', 'was', 'making', 'embedded', 'devices', 'he', 'used', 'the', 'word', '""large""', '-', 'I', 'asked', 'him', 'what', 'it', 'meant', '-', 'he', 'say', 'over', '256', 'KBytes', '-', 'later', 'in', 'the', 'same', 'week', 'a', 'guy', 'was', 'talking', 'about', 'media', 'distribution', '-', 'he', 'used', 'the', 'word', '""large""', 'I', 'asked', 'him', 'what', 'he', 'meant', '-', 'he', 'thought', 'for', 'a', 'bit', 'and', 'said', '""won\'t', 'fit', 'on', 'one', 'machine""', 'say', '20-100', 'TBytes', 'In', 'Erlang', 'terms', '""large""', 'could', 'mean', '""won\'t', 'fit', 'into', 'RAM""', '-', 'so', 'with', '4', 'GBytes', 'of', 'RAM', 'data', 'structures', '>', '100', 'MBytes', 'might', 'be', 'considered', 'large', '-', 'copying', 'a', '500', 'MBytes', 'data', 'structure', 'might', 'be', 'a', 'problem.', 'Copying', 'small', 'data', 'structures', '(say', 'Really', 'large', 'data', 'structures', '(i.e.', 'ones', 'that', ""won't"", 'fit', 'on', 'one', 'machine)', 'have', 'to', 'be', 'copied', 'and', '""striped""', 'over', 'several', 'machines.', 'So', 'I', 'guess', 'you', 'have', 'the', 'following:', 'Small', 'data', 'structures', 'are', 'no', 'problem', '-', 'since', 'they', 'are', 'small', 'data', 'processing', 'times', 'are', 'fast,', 'copying', 'is', 'fast', 'and', 'so', 'on', '(just', 'because', 'they', 'are', 'small)', 'Big', 'data', 'structures', 'are', 'a', 'problem', '-', 'because', 'they', ""don't"", 'fit', 'on', 'one', 'machine', '-', 'so', 'copying', 'is', 'essential.']"
12,1980849,"The other concurrent paradigm is STM, software transactional memory. Clojure's ref's are getting a lot of attention.  Tim Bray has a good series exploring erlang and clojure's concurrent mechanisms

http://www.tbray.org/ongoing/When/200x/2009/09/27/Concur-dot-next

http://www.tbray.org/ongoing/When/200x/2009/12/01/Clojure-Theses
","['The', 'other', 'concurrent', 'paradigm', 'is', 'STM,', 'software', 'transactional', 'memory.', ""Clojure's"", ""ref's"", 'are', 'getting', 'a', 'lot', 'of', 'attention.', 'Tim', 'Bray', 'has', 'a', 'good', 'series', 'exploring', 'erlang', 'and', ""clojure's"", 'concurrent', 'mechanisms', 'http://www.tbray.org/ongoing/When/200x/2009/09/27/Concur-dot-next', 'http://www.tbray.org/ongoing/When/200x/2009/12/01/Clojure-Theses']"
13,2893994,"

Goinstall is still an experimental system. It would be nice if you didn't have to include the full path.
","['If', 'you', 'install', 'web.go', 'through', 'goinstall,', 'you', 'need', 'to', 'do:', 'import', '""github.com/hoisie/web.go""', 'Goinstall', 'is', 'still', 'an', 'experimental', 'system.', 'It', 'would', 'be', 'nice', 'if', 'you', ""didn't"", 'have', 'to', 'include', 'the', 'full', 'path.']"
14,3125521,"In most cases they're the same as C arrays, but the compiler/interpreter hides the pointer from you. This is mainly because then the array can be relocated in memory in a totally transparent way, and so such arrays appear to have an ability to be resized.
On the other hand it is safer, because without a possibility to move the pointers you cannot make a leak.
","['In', 'most', 'cases', ""they're"", 'the', 'same', 'as', 'C', 'arrays,', 'but', 'the', 'compiler/interpreter', 'hides', 'the', 'pointer', 'from', 'you.', 'This', 'is', 'mainly', 'because', 'then', 'the', 'array', 'can', 'be', 'relocated', 'in', 'memory', 'in', 'a', 'totally', 'transparent', 'way,', 'and', 'so', 'such', 'arrays', 'appear', 'to', 'have', 'an', 'ability', 'to', 'be', 'resized.', 'On', 'the', 'other', 'hand', 'it', 'is', 'safer,', 'because', 'without', 'a', 'possibility', 'to', 'move', 'the', 'pointers', 'you', 'cannot', 'make', 'a', 'leak.']"
15,3129417,"Read The Go Programming Language Specification. In particular, the section on Struct types. The Go term to describe what you are looking for is an anonymous field.


  Such a[n] [anonymous] field type must
  be specified as a type name T or as a
  pointer to a type name *T, and T
  itself may not be a pointer type.


int is a type name. []int is neither a type name nor a pointer to a type name.
","['Goinstall', 'is', 'still', 'an', 'experimental', 'system.', 'It', 'would', 'be', 'nice', 'if', 'you', ""didn't"", 'have', 'to', 'include', 'the', 'full', 'path.']"
16,3129440,"No, the type of an anonymous field must be a type name or a pointer to a type name. You could declare a new type name that is the same as an array type, and then it would work, but it wouldn't be exactly the same.
","['No,', 'the', 'type', 'of', 'an', 'anonymous', 'field', 'must', 'be', 'a', 'type', 'name', 'or', 'a', 'pointer', 'to', 'a', 'type', 'name.', 'You', 'could', 'declare', 'a', 'new', 'type', 'name', 'that', 'is', 'the', 'same', 'as', 'an', 'array', 'type,', 'and', 'then', 'it', 'would', 'work,', 'but', 'it', ""wouldn't"", 'be', 'exactly', 'the', 'same.']"
17,3516388,"You're probably looking for a map.
","[""You're"", 'probably', 'looking', 'for', 'a', 'map.']"
18,3516402,"
","['The', 'map', 'type.', 'http://golang.org/doc/effective_go.html#maps', 'There', 'is', 'some', 'difference', 'from', 'python', 'in', 'that', 'the', 'keys', 'have', 'to', 'be', 'typed,', 'so', 'you', ""can't"", 'mix', 'numeric', 'and', 'string', 'keys', '(for', 'some', 'reason', 'I', 'forgot', 'you', 'can),', 'but', ""they're"", 'pretty', 'easy', 'to', 'use.', 'dict', ':=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'dict', '[', '""user""', ']', '=', '""so_user""', 'dict', '[', '""pass""', ']', '=', '""l33t_pass1""']"
19,3536318,"

And that's maps in a nutshell.
","['To', 'expand', 'a', 'little', 'on', 'answers', 'already', 'given:', 'A', 'Go', 'map', 'is', 'a', 'typed', 'hash', 'map', 'data', 'structure.', 'A', ""map's"", 'type', 'signature', 'is', 'of', 'the', 'form', 'map', '[', 'keyType', ']', 'valueType', 'where', 'keyType', 'and', 'valueType', 'are', 'the', 'types', 'of', 'the', 'keys', 'and', 'values', 'respectively.', 'To', 'initialize', 'a', 'map,', 'you', 'must', 'use', 'the', 'make', 'function:', 'm', ':=', 'make', '(', 'map', '[', 'string', ']', 'int', ')', 'An', 'uninitialized', 'map', 'is', 'equal', 'to', 'nil,', 'and', 'if', 'read', 'from', 'or', 'written', 'a', 'panic', 'will', 'occur', 'at', 'runtime.', 'The', 'syntax', 'for', 'storing', 'values', 'is', 'much', 'the', 'same', 'as', 'doing', 'so', 'with', 'arrays', 'or', 'slices:', 'm', '[', '""Alice""', ']', '=', '21', 'm', '[', '""Bob""', ']', '=', '17', 'Similarly,', 'retrieving', 'values', 'from', 'a', 'map', 'is', 'done', 'like', 'so:', 'a', ':=', 'm', '[', '""Alice""', ']', 'b', ':=', 'm', '[', '""Bob""', ']', 'You', 'can', 'use', 'the', 'range', 'keyword', 'to', 'iterate', 'over', 'a', 'map', 'with', 'a', 'for', 'loop:', 'for', 'k', ',', 'v', ':=', 'range', 'm', '{', 'fmt.Println(k, v)', '}', 'This', 'code', 'will', 'print:', 'Alice', '21', 'Bob', '17', 'Retrieving', 'a', 'value', 'for', 'a', 'key', 'that', 'is', 'not', 'in', 'the', 'map', 'will', 'return', 'the', 'value', ""type's"", 'zero', 'value:', 'c', ':=', 'm', '[', '""Charlie""', ']', '//', 'c', '==', '0', 'By', 'reading', 'multiple', 'values', 'from', 'a', 'map,', 'you', 'can', 'test', 'for', 'a', ""key's"", 'presence.', 'The', 'second', 'value', 'will', 'be', 'a', 'boolean', 'indicating', 'the', ""key's"", 'presence:', 'a', ',', 'ok', ':=', 'm', '[', '""Alice""', ']', '//', 'a', '==', '21,', 'ok', '==', 'true', 'c', ',', 'ok', ':=', 'm', '[', '""Charlie""', ']', '//', 'c', '==', '0,', 'ok', '==', 'false', 'To', 'remove', 'a', 'key/value', 'entry', 'from', 'a', 'map,', 'you', 'flip', 'it', 'around', 'and', 'assign', 'false', 'as', 'the', 'second', 'value:', 'm', '[', '""Bob""', ']', '=', '0', ',', 'false', 'b', ',', 'ok', ':=', 'm', '[', '""Bob""', ']', '//', 'b', '==', '0,', 'ok', '==', 'false', 'You', 'can', 'store', 'arbitrary', 'types', 'in', 'a', 'map', 'by', 'using', 'the', 'empty', 'interface', 'type', 'interface{}:', 'n', ':=', 'make', '(', 'map', '[', 'string', ']', 'interface', '{})', 'n', '[', '""One""', ']', '=', '1', 'n', '[', '""Two""', ']', '=', '""Two""', 'The', 'only', 'proviso', 'is', 'that', 'when', 'retrieving', 'those', 'values', 'you', 'must', 'perform', 'a', 'type', 'assertion', 'to', 'use', 'them', 'in', 'their', 'original', 'form:', 'a', ':=', 'n', '[', '""One""', '].(', 'int', ')', 'b', ':=', 'n', '[', '""Two""', '].(', 'string', ')', 'You', 'can', 'use', 'a', 'type', 'switch', 'to', 'determine', 'the', 'types', 'of', 'the', 'values', ""you're"", 'pulling', 'out,', 'and', 'deal', 'with', 'them', 'appropriately:', 'for', 'k', ',', 'v', ':=', 'range', 'n', '{', 'switch', 'u', ':=', 'v', '.(', 'type', ')', '{', 'case', 'int', ':', 'fmt.Printf(""Key %q is an int with the value %v.\\n"", k, u)', 'case', 'string', ':', 'fmt.Printf(""Key %q is a string with the value %q.\\n"", k, u)', '}', '}', 'Inside', 'each', 'of', 'those', 'case', 'blocks,', 'u', 'will', 'be', 'of', 'the', 'type', 'specified', 'in', 'the', 'case', 'statement;', 'no', 'explicit', 'type', 'assertion', 'is', 'necessary.', 'This', 'code', 'will', 'print:', 'Key', '""One""', 'is', 'an', 'int', 'with', 'the', 'value', '1', '.', 'Key', '""Two""', 'is', 'a', 'string', 'with', 'the', 'value', '""Two""', '.', 'The', 'key', 'can', 'be', 'of', 'any', 'type', 'for', 'which', 'the', 'equality', 'operator', 'is', 'defined,', 'such', 'as', 'integers,', 'floats,', 'strings,', 'and', 'pointers.', 'Interface', 'types', 'can', 'also', 'be', 'used,', 'as', 'long', 'as', 'the', 'underlying', 'type', 'supports', 'equality.', '(Structs,', 'arrays', 'and', 'slices', 'cannot', 'be', 'used', 'as', 'map', 'keys,', 'because', 'equality', 'is', 'not', 'defined', 'on', 'those', 'types.)', 'For', 'example,', 'the', 'map', 'o', 'can', 'take', 'keys', 'of', 'any', 'of', 'the', 'above', 'types:', 'o', ':=', 'make', '(', 'map', '[', 'interface', '{}]', 'int', ')', 'o', '[', '1', ']', '=', '1', 'o', '[', '""Two""', ']', '=', '2', 'And', ""that's"", 'maps', 'in', 'a', 'nutshell.']"
20,3587284,"Arrays in Go are also values in that they are passed as values to functions(in the same way ints,strings,floats etc.)
Which requires copying the whole array for each function call.

This can be very slow for a large array, which is why in most cases it's usually better to use slices
","['Arrays', 'in', 'Go', 'are', 'also', 'values', 'in', 'that', 'they', 'are', 'passed', 'as', 'values', 'to', 'functions(in', 'the', 'same', 'way', 'ints,strings,floats', 'etc.)', 'Which', 'requires', 'copying', 'the', 'whole', 'array', 'for', 'each', 'function', 'call.', 'This', 'can', 'be', 'very', 'slow', 'for', 'a', 'large', 'array,', 'which', 'is', 'why', 'in', 'most', 'cases', ""it's"", 'usually', 'better', 'to', 'use', 'slices']"
21,3779421,"gevent is a concurrent library that uses Cython at its core. It seems to be pretty fast: http://nichol.as/asynchronous-servers-in-python
","['gevent', 'is', 'a', 'concurrent', 'library', 'that', 'uses', 'Cython', 'at', 'its', 'core.', 'It', 'seems', 'to', 'be', 'pretty', 'fast:', 'http://nichol.as/asynchronous-servers-in-python']"
22,3864079,"I use pprof package, and Google perftools.
","['I', 'use', 'pprof', 'package,', 'and', 'Google', 'perftools.']"
23,3866546,"If you use the gccgo compiler instead of the 6g compiler, you'd probably be able to use the normal GNU tools, i.e. gprof.

I haven't actually done it with gprof, but I at least know that it works for gdb.
","['And', ""that's"", 'maps', 'in', 'a', 'nutshell.']"
24,4279644,"
","['For', 'example,', 'package', 'main', 'import', '(', '""flag""', '""fmt""', '""os""', '""strconv""', ')', 'func', 'main', '()', '{', 'flag.Parse()', 's', ':=', 'flag.Arg(0)', '//', 'string', 'to', 'int', 'i', ',', 'err', ':=', 'strconv.Atoi(s)', 'if', 'err', '!=', 'nil', '{', '//', 'handle', 'error', 'fmt.Println(err)', 'os.Exit(2)', '}', 'fmt.Println(s, i)', '}']"
25,4437778,"What about support. You are relying on a single compiler, provided by Google. What if Go folds or goes commercial?

With Cython you could always go back to Python (or port the C code) if the Cython project folded.

UPDATE: I must say that I am now upset with Cython. The lack of thread support is a major blow. Cython is thread-safe BUT at a serious cost. The global interpreter lock is held the whole time a function executes. Thereby disabling concurrent execution over an entire codebase!

Cython's C-like features are poorly documented and confusing to novices. I admit.

Cython's purpose is to support the Sage mathematics software; Go's is to support Google's ambitious plans for cutting-edge expensive $$ hardware.

In short, I no longer like either one of these languages. Going back to C++ (again). My favorite is Cython.
","['What', 'about', 'support.', 'You', 'are', 'relying', 'on', 'a', 'single', 'compiler,', 'provided', 'by', 'Google.', 'What', 'if', 'Go', 'folds', 'or', 'goes', 'commercial?', 'With', 'Cython', 'you', 'could', 'always', 'go', 'back', 'to', 'Python', '(or', 'port', 'the', 'C', 'code)', 'if', 'the', 'Cython', 'project', 'folded.', 'UPDATE:', 'I', 'must', 'say', 'that', 'I', 'am', 'now', 'upset', 'with', 'Cython.', 'The', 'lack', 'of', 'thread', 'support', 'is', 'a', 'major', 'blow.', 'Cython', 'is', 'thread-safe', 'BUT', 'at', 'a', 'serious', 'cost.', 'The', 'global', 'interpreter', 'lock', 'is', 'held', 'the', 'whole', 'time', 'a', 'function', 'executes.', 'Thereby', 'disabling', 'concurrent', 'execution', 'over', 'an', 'entire', 'codebase!', ""Cython's"", 'C-like', 'features', 'are', 'poorly', 'documented', 'and', 'confusing', 'to', 'novices.', 'I', 'admit.', ""Cython's"", 'purpose', 'is', 'to', 'support', 'the', 'Sage', 'mathematics', 'software;', ""Go's"", 'is', 'to', 'support', ""Google's"", 'ambitious', 'plans', 'for', 'cutting-edge', 'expensive', '$$', 'hardware.', 'In', 'short,', 'I', 'no', 'longer', 'like', 'either', 'one', 'of', 'these', 'languages.', 'Going', 'back', 'to', 'C++', '(again).', 'My', 'favorite', 'is', 'Cython.']"
26,4962889,"Note that your questions are technically non-sensical because message passing can use shared state so I shall assume that you mean message passing with deep copying to avoid shared state (as Erlang currently does).


  Will using shared state be faster and use less memory than message passing, as locks will mostly be unnecessary because the data is read-only, and only needs to exist in a single location?


Using shared state will be a lot faster.


  How would this problem be approached in a message passing context? Would there be a single process with access to the data structure and clients would simply need to sequentially request data from it? Or, if possible, would the data be chunked to create several processes that hold chunks?


Either approach can be used.


  Given the architecture of modern CPUs & memory, is there much difference between the two solutions -- i.e., can shared memory be read in parallel by multiple cores -- meaning there is no hardware bottleneck that would otherwise make both implementations roughly perform the same?


Copying is cache unfriendly and, therefore, destroys scalability on multicores because it worsens contention for the shared resource that is main memory.

Ultimately, Erlang-style message passing is designed for concurrent programming whereas your questions about throughput performance are really aimed at parallel programming. These are two quite different subjects and the overlap between them is tiny in practice. Specifically, latency is typically just as important as throughput in the context of concurrent programming and Erlang-style message passing is a great way to achieve desirable latency profiles (i.e. consistently low latencies). The problem with shared memory then is not so much synchronization among readers and writers but low-latency memory management.
","['Note', 'that', 'your', 'questions', 'are', 'technically', 'non-sensical', 'because', 'message', 'passing', 'can', 'use', 'shared', 'state', 'so', 'I', 'shall', 'assume', 'that', 'you', 'mean', 'message', 'passing', 'with', 'deep', 'copying', 'to', 'avoid', 'shared', 'state', '(as', 'Erlang', 'currently', 'does).', 'Will', 'using', 'shared', 'state', 'be', 'faster', 'and', 'use', 'less', 'memory', 'than', 'message', 'passing,', 'as', 'locks', 'will', 'mostly', 'be', 'unnecessary', 'because', 'the', 'data', 'is', 'read-only,', 'and', 'only', 'needs', 'to', 'exist', 'in', 'a', 'single', 'location?', 'Using', 'shared', 'state', 'will', 'be', 'a', 'lot', 'faster.', 'How', 'would', 'this', 'problem', 'be', 'approached', 'in', 'a', 'message', 'passing', 'context?', 'Would', 'there', 'be', 'a', 'single', 'process', 'with', 'access', 'to', 'the', 'data', 'structure', 'and', 'clients', 'would', 'simply', 'need', 'to', 'sequentially', 'request', 'data', 'from', 'it?', 'Or,', 'if', 'possible,', 'would', 'the', 'data', 'be', 'chunked', 'to', 'create', 'several', 'processes', 'that', 'hold', 'chunks?', 'Either', 'approach', 'can', 'be', 'used.', 'Given', 'the', 'architecture', 'of', 'modern', 'CPUs', '&', 'memory,', 'is', 'there', 'much', 'difference', 'between', 'the', 'two', 'solutions', '--', 'i.e.,', 'can', 'shared', 'memory', 'be', 'read', 'in', 'parallel', 'by', 'multiple', 'cores', '--', 'meaning', 'there', 'is', 'no', 'hardware', 'bottleneck', 'that', 'would', 'otherwise', 'make', 'both', 'implementations', 'roughly', 'perform', 'the', 'same?', 'Copying', 'is', 'cache', 'unfriendly', 'and,', 'therefore,', 'destroys', 'scalability', 'on', 'multicores', 'because', 'it', 'worsens', 'contention', 'for', 'the', 'shared', 'resource', 'that', 'is', 'main', 'memory.', 'Ultimately,', 'Erlang-style', 'message', 'passing', 'is', 'designed', 'for', 'concurrent', 'programming', 'whereas', 'your', 'questions', 'about', 'throughput', 'performance', 'are', 'really', 'aimed', 'at', 'parallel', 'programming.', 'These', 'are', 'two', 'quite', 'different', 'subjects', 'and', 'the', 'overlap', 'between', 'them', 'is', 'tiny', 'in', 'practice.', 'Specifically,', 'latency', 'is', 'typically', 'just', 'as', 'important', 'as', 'throughput', 'in', 'the', 'context', 'of', 'concurrent', 'programming', 'and', 'Erlang-style', 'message', 'passing', 'is', 'a', 'great', 'way', 'to', 'achieve', 'desirable', 'latency', 'profiles', '(i.e.', 'consistently', 'low', 'latencies).', 'The', 'problem', 'with', 'shared', 'memory', 'then', 'is', 'not', 'so', 'much', 'synchronization', 'among', 'readers', 'and', 'writers', 'but', 'low-latency', 'memory', 'management.']"
27,5372575,"

The underlying type of int, T1, and T2 is int. The underlying type of *T1, T3, and T4 is *T1. 

References:

The Go Programming Language Specification

Conversions

Types

Properties of types and values

Type declarations

Predeclared identifiers

Pointer Type
","[""Here's"", 'my', 'analysis.', '(**myint)(&k)', '--', 'cannot', 'convert', '&k', '(type', '**int)', 'to', 'type', '**myint:', 'type', '**int', 'and', 'type', '**myint', 'are', 'unnamed', 'pointer', 'types', 'and', 'their', 'pointer', 'base', 'types,', 'type', '*int', 'and', 'type', '*myint,', ""don't"", 'have', 'identical', 'underlying', 'types.', 'If', 'T', '(*int', 'or', '*myint)', 'is', 'a', 'pointer', 'type', 'literal,', 'the', 'corresponding', 'underlying', 'type', 'is', 'T', 'itself.', '(*myint)(k)', '--', 'can', 'convert', 'k', '(type', '*int)', 'to', 'type', '*myint:', 'type', '*int', 'and', 'type', '*myint', 'are', 'unnamed', 'pointer', 'types', 'and', 'their', 'pointer', 'base', 'types,', 'type', 'int', 'and', 'type', 'myint', '(type', 'myint', 'int),', 'have', 'identical', 'underlying', 'types.', 'If', 'T', '(int)', 'is', 'a', 'predeclared', 'type,', 'the', 'corresponding', 'underlying', 'type', 'is', 'T', 'itself.', 'If', 'T', '(myint)', 'is', 'neither', 'a', 'predeclared', 'type', 'or', 'nor', 'a', 'type', 'literal,', ""T's"", 'underlying', 'type', 'is', 'the', 'underlying', 'type', 'of', 'the', 'type', 'to', 'which', 'T', 'refers', 'in', 'its', 'type', 'declaration', '(type', 'myint', 'int).', '(myint)(*k)', '--', 'can', 'convert', '*k', '(type', 'int)', 'to', 'type', 'myint:', 'type', 'int', 'and', 'type', 'myint', 'have', 'identical', 'underlying', 'types.', 'If', 'T', '(int)', 'is', 'a', 'predeclared', 'type,', 'the', 'corresponding', 'underlying', 'type', 'is', 'T', 'itself.', 'If', 'T', '(myint)', 'is', 'neither', 'a', 'predeclared', 'type', 'or', 'nor', 'a', 'type', 'literal,', ""T's"", 'underlying', 'type', 'is', 'the', 'underlying', 'type', 'of', 'the', 'type', 'to', 'which', 'T', 'refers', 'in', 'its', 'type', 'declaration', '(type', 'myint', 'int).', ""Here's"", 'the', 'underlying', 'type', 'example', 'from', 'the', 'Types', 'section', 'revised', 'to', 'use', 'integers', 'and', 'int', 'pointers.', 'type', 'T1', 'int', 'type', 'T2', 'T1', 'type', 'T3', '*', 'T1', 'type', 'T4', 'T3', 'The', 'underlying', 'type', 'of', 'int,', 'T1,', 'and', 'T2', 'is', 'int.', 'The', 'underlying', 'type', 'of', '*T1,', 'T3,', 'and', 'T4', 'is', '*T1.', 'References:', 'The', 'Go', 'Programming', 'Language', 'Specification', 'Conversions', 'Types', 'Properties', 'of', 'types', 'and', 'values', 'Type', 'declarations', 'Predeclared', 'identifiers', 'Pointer', 'Type']"
28,5372998,"

http://play.golang.org/p/hyaPFUNlp8
","['Here', 'are', 'two', 'functionally', 'equivalent', 'working', 'versions', 'of', 'your', 'program.', 'package', 'main', 'type', 'mypint', '*', 'int', 'func', 'set', '(', 'a', '*', 'mypint', ')', '{', 'i', ':=', 'int', '(', '5', ')', '*', 'a', '=', '&', 'i', '}', 'func', 'main', '()', '{', 'var', 'k', '*', 'int', 'set', '((*', 'mypint', ')(&', 'k', '))', 'print', '(*', 'k', ')', '}', 'http://play.golang.org/p/l_b9LBElie', 'package', 'main', 'type', 'myint', 'int', 'func', 'set', '(', 'a', '*', 'myint', ')', '*', 'myint', '{', 'i', ':=', 'myint', '(', '5', ')', 'a', '=', '&', 'i', 'return', 'a', '}', 'func', 'main', '()', '{', 'var', 'k', '*', 'int', 'k', '=', '(*', 'int', ')(', 'set', '((*', 'myint', ')(', 'k', ')))', 'print', '(*', 'k', ')', '}', 'http://play.golang.org/p/hyaPFUNlp8']"
29,5445231,"
","['import', 'web', '""github.com/hoisie/web.go""']"
30,6051028,"I know Caspar has already posted the link contained, but here is the list of community contributed packages:

http://godashboard.appspot.com/package

For completeness here are the official packages:

http://golang.org/pkg/

Also, since it is a VERY new language I don't feel too bad in saying, if it needs doing, I'm sure they would be happy for your contributions. (I try not to say ""submit a patch"" when we are talk about old languages/modules, however a new language is an exception)
","['I', 'know', 'Caspar', 'has', 'already', 'posted', 'the', 'link', 'contained,', 'but', 'here', 'is', 'the', 'list', 'of', 'community', 'contributed', 'packages:', 'http://godashboard.appspot.com/package', 'For', 'completeness', 'here', 'are', 'the', 'official', 'packages:', 'http://golang.org/pkg/', 'Also,', 'since', 'it', 'is', 'a', 'VERY', 'new', 'language', 'I', ""don't"", 'feel', 'too', 'bad', 'in', 'saying,', 'if', 'it', 'needs', 'doing,', ""I'm"", 'sure', 'they', 'would', 'be', 'happy', 'for', 'your', 'contributions.', '(I', 'try', 'not', 'to', 'say', '""submit', 'a', 'patch""', 'when', 'we', 'are', 'talk', 'about', 'old', 'languages/modules,', 'however', 'a', 'new', 'language', 'is', 'an', 'exception)']"
31,6051270,"

The built-in function make takes a type T, which must be a slice, map or channel type.
","['Initialize', 'the', 'type', 'as', 'you', 'would', 'initialize', 'the', 'underlying', 'type.', 'In', 'your', 'example,', 'the', 'underlying', 'type', 'is', 'an', 'int.', 'For', 'example,', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'Num', 'int', 'func', 'main', '()', '{', 'var', 'm', 'Num', '=', '7', 'n', ':=', 'Num', '(', '42', ')', 'fmt.Println(m, n)', '}', 'Output', ':', '7', '42', 'The', 'built-in', 'function', 'make', 'takes', 'a', 'type', 'T,', 'which', 'must', 'be', 'a', 'slice,', 'map', 'or', 'channel', 'type.']"
32,6119041,"I'm dumb, the file linked is 32 bit and I was using ""6g"" to compile because my system is 64 bit.  ""8g"" works to compile.
""8g myfile.go""
""8l myfile.8""
""myfile.out""
Works to get it running.
","[""I'm"", 'dumb,', 'the', 'file', 'linked', 'is', '32', 'bit', 'and', 'I', 'was', 'using', '""6g""', 'to', 'compile', 'because', 'my', 'system', 'is', '64', 'bit.', '""8g""', 'works', 'to', 'compile.', '""8g', 'myfile.go""', '""8l', 'myfile.8""', '""myfile.out""', 'Works', 'to', 'get', 'it', 'running.']"
33,6126684,"
","['I', ""haven't"", 'tried', 'this,', 'but', 'maybe', ""it's"", 'worth', 'trying:', 'type', 'Vote', 'struct', '{', 'User', 'string', 'Score', 'int', '}', 'type', 'Comment', 'struct', '{', 'Author', 'string', 'Content', 'string', 'Date', 'datastore', '.', 'Time', 'Votes', '*', '[]', 'Vote', '}']"
34,6192309,"
","['The', 'only', 'types', 'that', 'are', 'allowed', 'for', 'fields', 'in', 'the', 'current', 'version', 'of', 'the', 'Go', 'AppEngine', 'SDK', 'are', 'as', 'follows:', 'signed', 'integers', '(int,', 'int8,', 'int16,', 'int32', 'and', 'int64),', 'bool,', 'string,', 'float32', 'and', 'float64,', 'any', 'type', 'whose', 'underlying', 'type', 'is', 'one', 'of', 'the', 'above', 'predeclared', 'types,', '*Key,', 'appengine.BlobKey,', '[]byte', '(up', 'to', '1', 'megabyte', 'in', 'length),', 'slices', 'of', 'any', 'of', 'the', 'above', '(up', 'to', '100', 'elements', 'in', 'length).', 'Given', 'that,', 'there', 'appear', 'to', 'be', 'two', 'ways', 'to', 'do', 'this.', 'One', 'is', 'to', 'maintain', 'a', 'slice', 'of', 'keys', 'to', 'point', 'to', 'the', 'Votes', 'of', 'a', 'given', 'Comment.', 'However', 'this', 'is', 'likely', 'to', 'run', 'up', 'against', 'the', '100', 'element', 'limit', 'for', 'any', 'reasonably', 'popular', 'comment.', 'The', 'other', 'approach', 'is', 'to', 'store', 'a', '""pointer""', 'to', 'the', 'comment', 'in', 'each', 'vote', 'struct', 'like', 'this:', 'type', 'Vote', 'struct', '{', 'User', 'string', 'Score', 'int', 'CommentKey', '*', 'datastore', '.', 'Key', '}', 'type', 'Comment', 'struct', '{', 'Author', 'string', 'Content', 'string', 'Date', 'datastore', '.', 'Time', '}', 'Then', 'when', 'you', 'go', 'to', 'query', 'it', 'you', 'need', 'to', 'do', 'it', 'in', 'two', 'steps.', 'First', 'you', 'get', 'the', 'Comment', ""you're"", 'interested', 'in', '(in', 'this', 'case', 'just', 'the', 'first', 'one', 'that', 'happens', 'to', 'be', 'returned).', 'Second,', 'you', 'query', 'for', 'all', 'the', 'votes', 'that', '""point""', 'to', 'that', 'comment:', 'q', ':=', 'datastore.NewQuery(""Comment"").Limit(1)', 'comments', ':=', 'make', '([]', 'Comment', ',', '0', ',', '1', ')', 'var', 'err', 'os', '.', 'Error', 'var', 'keys', '[]*', 'datastore', '.', 'Key', 'if', 'keys', ',', 'err', '=', 'q.GetAll(c, &comments)', ';', 'err', '!=', 'nil', '{', '//', 'handle', 'the', 'error', '}', 'comment', ':=', 'comments', '[', '0', ']', 'vq', ':=', 'datastore.NewQuery(""Vote"").Filter(""CommentKey="", keys[0])', 'votes', ':=', 'make', '([]', 'Vote', ',', '0', ',', '10', ')', 'if', '_', ',', 'err', ':=', 'vq.GetAll(c, &votes)', ';', 'err', '!=', 'nil', '{', '//', 'handle', 'the', 'error', '}']"
35,6241975,"

The R_X86_64_64 is a type of a symbol in the library. For more information about relocation in the amd64 architecture consult page ~70 here.

Is it possible that you mix 386 compiled library with amd64 code?

The compiler should report the exact symbol which caused the problem. Can you try linking with a minimal library containing other symbols, and try to locate a minimal example where it fails?

Did you manage to use cgo with any library at all?
","['It', 'appears', 'in', 'the', 'assembly', 'generation', 'routines', 'in', 'the', '6g', 'compiler:', 'case', '256', '+', 'R_X86_64_64', ':', 'if', '(', 'targ', '->', 'dynimpname', '!=', 'nil', '&&', '!', 'targ', '->', 'dynexport', ')', 'diag', '(', '""unexpected R_X86_64_64 relocation for dynamic symbol %s""', ',', 'targ', '->', 'name', ');', 'r', '->', 'type', '=', 'D_ADDR', ';', 'return', ';', 'The', 'R_X86_64_64', 'is', 'a', 'type', 'of', 'a', 'symbol', 'in', 'the', 'library.', 'For', 'more', 'information', 'about', 'relocation', 'in', 'the', 'amd64', 'architecture', 'consult', 'page', '~70', 'here.', 'Is', 'it', 'possible', 'that', 'you', 'mix', '386', 'compiled', 'library', 'with', 'amd64', 'code?', 'The', 'compiler', 'should', 'report', 'the', 'exact', 'symbol', 'which', 'caused', 'the', 'problem.', 'Can', 'you', 'try', 'linking', 'with', 'a', 'minimal', 'library', 'containing', 'other', 'symbols,', 'and', 'try', 'to', 'locate', 'a', 'minimal', 'example', 'where', 'it', 'fails?', 'Did', 'you', 'manage', 'to', 'use', 'cgo', 'with', 'any', 'library', 'at', 'all?']"
36,6385066,"The Go reflect package was substantially revised for the weekly.2011-04-13 and subsequent releases. For details, see revision 843855f3c026.
","['The', 'Go', 'reflect', 'package', 'was', 'substantially', 'revised', 'for', 'the', 'weekly.2011-04-13', 'and', 'subsequent', 'releases.', 'For', 'details,', 'see', 'revision', '843855f3c026.']"
37,6545842,"I agree with Elazar that it seems plausible that mixing of 32-bit and 64-bit code is involved.

Have you tried gccgo?
","['I', 'agree', 'with', 'Elazar', 'that', 'it', 'seems', 'plausible', 'that', 'mixing', 'of', '32-bit', 'and', '64-bit', 'code', 'is', 'involved.', 'Have', 'you', 'tried', 'gccgo?']"
38,7311456,"The easiest solution seems to save the image to disk, and execute convert from Image Magic to transform it. You can use a ram disk if you want extra performance.
","['The', 'R_X86_64_64', 'is', 'a', 'type', 'of', 'a', 'symbol', 'in', 'the', 'library.', 'For', 'more', 'information', 'about', 'relocation', 'in', 'the', 'amd64', 'architecture', 'consult', 'page', '~70', 'here.', 'Is', 'it', 'possible', 'that', 'you', 'mix', '386', 'compiled', 'library', 'with', 'amd64', 'code?', 'The', 'compiler', 'should', 'report', 'the', 'exact', 'symbol', 'which', 'caused', 'the', 'problem.', 'Can', 'you', 'try', 'linking', 'with', 'a', 'minimal', 'library', 'containing', 'other', 'symbols,', 'and', 'try', 'to', 'locate', 'a', 'minimal', 'example', 'where', 'it', 'fails?', 'Did', 'you', 'manage', 'to', 'use', 'cgo', 'with', 'any', 'library', 'at', 'all?']"
39,7314110,"The Moustachio example application for GAE by Andrew Gerrand contains a resize.go file with a native Go implementation. There was also a similar question on the go-nuts mailing list some days ago and Nigel has posted an updated version of this file there. You might want to try it :)
","['The', 'Moustachio', 'example', 'application', 'for', 'GAE', 'by', 'Andrew', 'Gerrand', 'contains', 'a', 'resize.go', 'file', 'with', 'a', 'native', 'Go', 'implementation.', 'There', 'was', 'also', 'a', 'similar', 'question', 'on', 'the', 'go-nuts', 'mailing', 'list', 'some', 'days', 'ago', 'and', 'Nigel', 'has', 'posted', 'an', 'updated', 'version', 'of', 'this', 'file', 'there.', 'You', 'might', 'want', 'to', 'try', 'it', ':)']"
40,7552319,"To fix this I ended up including the source for the package in the directory tree for my app, as mentioned in this thread on the google-appengine-go group http://groups.google.com/group/google-appengine-go/browse_thread/thread/1fe745debc678afb

Here is the important part of the thread:


  You may include as many packages as necessary.  Packages are imported
  by path relative to the base directory (the one that has your app.yaml
  file), so if you have the following:
  
  helloworld/app.yaml
  helloworld/hello/hello.go // package hello
  helloworld/world/world.go // package world   
  
  you can import ""world"" in hello and import ""hello"" in world.
  
  If you are including a third-party library, it might look something like this:  
  
  helloworld/app.yaml
  helloworld/hello/hello.go // package hello
  helloworld/world/world.go // package world
  helloworld/goprotobuf.googlecode.com/proto/*.go // package proto
  
  Then you can, as normal, import ""goprotobuf.googlecode.com/proto"".

","['To', 'fix', 'this', 'I', 'ended', 'up', 'including', 'the', 'source', 'for', 'the', 'package', 'in', 'the', 'directory', 'tree', 'for', 'my', 'app,', 'as', 'mentioned', 'in', 'this', 'thread', 'on', 'the', 'google-appengine-go', 'group', 'http://groups.google.com/group/google-appengine-go/browse_thread/thread/1fe745debc678afb', 'Here', 'is', 'the', 'important', 'part', 'of', 'the', 'thread:', 'You', 'may', 'include', 'as', 'many', 'packages', 'as', 'necessary.', 'Packages', 'are', 'imported', 'by', 'path', 'relative', 'to', 'the', 'base', 'directory', '(the', 'one', 'that', 'has', 'your', 'app.yaml', 'file),', 'so', 'if', 'you', 'have', 'the', 'following:', 'helloworld/app.yaml', 'helloworld/hello/hello.go', '//', 'package', 'hello', 'helloworld/world/world.go', '//', 'package', 'world', 'you', 'can', 'import', '""world""', 'in', 'hello', 'and', 'import', '""hello""', 'in', 'world.', 'If', 'you', 'are', 'including', 'a', 'third-party', 'library,', 'it', 'might', 'look', 'something', 'like', 'this:', 'helloworld/app.yaml', 'helloworld/hello/hello.go', '//', 'package', 'hello', 'helloworld/world/world.go', '//', 'package', 'world', 'helloworld/goprotobuf.googlecode.com/proto/*.go', '//', 'package', 'proto', 'Then', 'you', 'can,', 'as', 'normal,', 'import', '""goprotobuf.googlecode.com/proto"".']"
41,7613998,"The short answer is that Go and the GAE SDK do not integrate in the way that (I think) you are looking for.  The GAE SDK includes its own version of the Go toolchain that differs in some important ways to the standard tools.  Those differences are deep enough that it is unlikely you will derive much utility from trying to unify the two.  Here are the big differences:


GAE does not support some packages from the standard lib e.g. ""unsafe""
GAE does not support CGO
GAE often lags the main distribution by one or more major versions
You cannot use any binary libraries (go or otherwise) in a GAE project (you need source for everything)
goinstall is not intended for use with GAE projects


Because of this I treat my GAE and non-GAE tools as completely separate.  If you're only doing GAE development, you could do without the standard tools altogether.
","['The', 'short', 'answer', 'is', 'that', 'Go', 'and', 'the', 'GAE', 'SDK', 'do', 'not', 'integrate', 'in', 'the', 'way', 'that', '(I', 'think)', 'you', 'are', 'looking', 'for.', 'The', 'GAE', 'SDK', 'includes', 'its', 'own', 'version', 'of', 'the', 'Go', 'toolchain', 'that', 'differs', 'in', 'some', 'important', 'ways', 'to', 'the', 'standard', 'tools.', 'Those', 'differences', 'are', 'deep', 'enough', 'that', 'it', 'is', 'unlikely', 'you', 'will', 'derive', 'much', 'utility', 'from', 'trying', 'to', 'unify', 'the', 'two.', 'Here', 'are', 'the', 'big', 'differences:', 'GAE', 'does', 'not', 'support', 'some', 'packages', 'from', 'the', 'standard', 'lib', 'e.g.', '""unsafe""', 'GAE', 'does', 'not', 'support', 'CGO', 'GAE', 'often', 'lags', 'the', 'main', 'distribution', 'by', 'one', 'or', 'more', 'major', 'versions', 'You', 'cannot', 'use', 'any', 'binary', 'libraries', '(go', 'or', 'otherwise)', 'in', 'a', 'GAE', 'project', '(you', 'need', 'source', 'for', 'everything)', 'goinstall', 'is', 'not', 'intended', 'for', 'use', 'with', 'GAE', 'projects', 'Because', 'of', 'this', 'I', 'treat', 'my', 'GAE', 'and', 'non-GAE', 'tools', 'as', 'completely', 'separate.', 'If', ""you're"", 'only', 'doing', 'GAE', 'development,', 'you', 'could', 'do', 'without', 'the', 'standard', 'tools', 'altogether.']"
42,7847142," or maybe {{.One}}.
","['In', 'the', 'new', 'template', 'package', 'the', 'template', 'tag', 'syntax', 'changed,', 'as', 'you', 'can', 'see', 'in', 'the', 'documentation.', 'E.g.', 'dot', '(.)', 'is', 'used', 'instead', 'of', '@', 'for', 'referencing', 'the', '""current""', 'item', 'and', 'the', 'template', 'tags', 'are', 'indicated', 'with', 'two', 'curly', 'braces', 'instead', 'of', 'one.', 'Edit:', 'Oh,', 'and', ""there's"", 'no', '.section', 'tag', 'any', 'more.', 'You', ""didn't"", 'provide', 'the', 'structure', 'you', 'pass', 'to', ""template's"", 'Execute()', 'method', 'so', 'I', ""can't"", 'provide', 'details', 'on', 'how', 'mitigate', 'that', 'exactly,', 'but', 'I', 'guess', 'you', 'can', 'use', '{{with}}', 'tag', 'like', '{{', 'with', 'One', '}}{.}{{', 'end', '}}', 'or', 'maybe', '{{.One}}.']"
43,8025349,"

Or, you could trace the code $GOROOT/src/pkg/net/dial.go
","['We', ""don't"", 'use', 'such', 'low', 'level', 'API,', 'we', 'use', 'net.Dial.', 'ex.', 'func', 'main', '()', '{', 'var', '(', 'host', '=', '""127.0.0.1""', 'port', '=', '""9998""', 'remote', '=', 'host', '+', '"":""', '+', 'port', 'msg', 'string', '=', '""test""', ')', 'con', ',', 'error', ':=', 'net.Dial(""tcp4"", remote)', 'if', 'error', '!=', 'nil', '{', 'fmt.Printf(""Host not found: %s\\n"", error)', 'os.Exit(1)', '}', 'else', '{', 'defer', 'con.Close()', '}', 'in', ',', 'error', ':=', 'con.Write([]byte(msg))', 'if', 'error', '!=', 'nil', '{', 'fmt.Printf(""Error sending data: %s, in: %d\\n"", error, in)', 'os.Exit(2)', '}', 'fmt.Println(""Connection OK"")', '}', 'Or,', 'you', 'could', 'trace', 'the', 'code', '$GOROOT/src/pkg/net/dial.go']"
44,8038951,"The cost of instances is only part of the cost of your app.  I only use the Java runtime right now, so I don't know how much more or less efficient things would be with Python or Go, but I don't imagine it will be orders of magnitude different.  I do know that instances are not the only cost you need to consider.  Depending on what your app does, you may find API or storage costs are more significant than any minor differences between runtimes.  All of the API costs will be the same with whatever runtime you use.

Language ""might"" affect these costs:


On-demand Frontend Instances
Reserved Frontend Instances
Backed Instances


Language Independent Costs:


High Replication Datastore (per gig stored)
Outgoing Bandwidth (per gig)
Datastore API (per ops)
Blobstore API storge (per gig)
Email API (per email)
XMPP API (per stanza)
Channel API (per channel)

","['The', 'cost', 'of', 'instances', 'is', 'only', 'part', 'of', 'the', 'cost', 'of', 'your', 'app.', 'I', 'only', 'use', 'the', 'Java', 'runtime', 'right', 'now,', 'so', 'I', ""don't"", 'know', 'how', 'much', 'more', 'or', 'less', 'efficient', 'things', 'would', 'be', 'with', 'Python', 'or', 'Go,', 'but', 'I', ""don't"", 'imagine', 'it', 'will', 'be', 'orders', 'of', 'magnitude', 'different.', 'I', 'do', 'know', 'that', 'instances', 'are', 'not', 'the', 'only', 'cost', 'you', 'need', 'to', 'consider.', 'Depending', 'on', 'what', 'your', 'app', 'does,', 'you', 'may', 'find', 'API', 'or', 'storage', 'costs', 'are', 'more', 'significant', 'than', 'any', 'minor', 'differences', 'between', 'runtimes.', 'All', 'of', 'the', 'API', 'costs', 'will', 'be', 'the', 'same', 'with', 'whatever', 'runtime', 'you', 'use.', 'Language', '""might""', 'affect', 'these', 'costs:', 'On-demand', 'Frontend', 'Instances', 'Reserved', 'Frontend', 'Instances', 'Backed', 'Instances', 'Language', 'Independent', 'Costs:', 'High', 'Replication', 'Datastore', '(per', 'gig', 'stored)', 'Outgoing', 'Bandwidth', '(per', 'gig)', 'Datastore', 'API', '(per', 'ops)', 'Blobstore', 'API', 'storge', '(per', 'gig)', 'Email', 'API', '(per', 'email)', 'XMPP', 'API', '(per', 'stanza)', 'Channel', 'API', '(per', 'channel)']"
45,8039987,"It's probably more about how you allocate the resources than your language choice. I read that GAE was built the be language-agnostic so there is probably no builtin advantage for any language, but you can get an advantage from choosing the language you are comfortable and motivated with. I use python and what made my deployment much more cost-effective was the upgrade to python 2.7 and you can only make that upgrade if you use the correct subset of 2.6, which is good. So if you choose a language you're comfortable with, it's likely that you will gain an advantage from your ability using the language rather than the combo language + environment itself. 

In short, I'd recommend python but that's the only app engine language I tried and that's my choice even though I know Java rather well the code for a project will be much more compact using my favorite language python. 

My apps are small to medium sized and they cost like nothing:


","[""It's"", 'probably', 'more', 'about', 'how', 'you', 'allocate', 'the', 'resources', 'than', 'your', 'language', 'choice.', 'I', 'read', 'that', 'GAE', 'was', 'built', 'the', 'be', 'language-agnostic', 'so', 'there', 'is', 'probably', 'no', 'builtin', 'advantage', 'for', 'any', 'language,', 'but', 'you', 'can', 'get', 'an', 'advantage', 'from', 'choosing', 'the', 'language', 'you', 'are', 'comfortable', 'and', 'motivated', 'with.', 'I', 'use', 'python', 'and', 'what', 'made', 'my', 'deployment', 'much', 'more', 'cost-effective', 'was', 'the', 'upgrade', 'to', 'python', '2.7', 'and', 'you', 'can', 'only', 'make', 'that', 'upgrade', 'if', 'you', 'use', 'the', 'correct', 'subset', 'of', '2.6,', 'which', 'is', 'good.', 'So', 'if', 'you', 'choose', 'a', 'language', ""you're"", 'comfortable', 'with,', ""it's"", 'likely', 'that', 'you', 'will', 'gain', 'an', 'advantage', 'from', 'your', 'ability', 'using', 'the', 'language', 'rather', 'than', 'the', 'combo', 'language', '+', 'environment', 'itself.', 'In', 'short,', ""I'd"", 'recommend', 'python', 'but', ""that's"", 'the', 'only', 'app', 'engine', 'language', 'I', 'tried', 'and', ""that's"", 'my', 'choice', 'even', 'though', 'I', 'know', 'Java', 'rather', 'well', 'the', 'code', 'for', 'a', 'project', 'will', 'be', 'much', 'more', 'compact', 'using', 'my', 'favorite', 'language', 'python.', 'My', 'apps', 'are', 'small', 'to', 'medium', 'sized', 'and', 'they', 'cost', 'like', 'nothing:']"
46,8044755,"I haven't used Go, but I would strongly suspect it would load and execute instances much faster, and use less memory purely because it is compiled. Anecdotally from the group, I believe that Python is more responsive than Java, at least in instance startup time. 

Instance load/startup times are important because when your instance is hit by more requests than it can handle, it spins up another instance. This makes that request take much longer, possibly giving the impression that the site is generally slow. Both Java and Python have to startup their virtual machine/interpreter, so I would expect Go to be an order of magnitude faster here.

There is one other issue - now Python2.7 is available, Go is the only option that is single-threaded (ironically, given that Go is designed as a modern multi-process language). So although Go requests should be handled faster, an instance can only handle requests serially. I'd be very surprised if this limitation last long, though.
","['I', ""haven't"", 'used', 'Go,', 'but', 'I', 'would', 'strongly', 'suspect', 'it', 'would', 'load', 'and', 'execute', 'instances', 'much', 'faster,', 'and', 'use', 'less', 'memory', 'purely', 'because', 'it', 'is', 'compiled.', 'Anecdotally', 'from', 'the', 'group,', 'I', 'believe', 'that', 'Python', 'is', 'more', 'responsive', 'than', 'Java,', 'at', 'least', 'in', 'instance', 'startup', 'time.', 'Instance', 'load/startup', 'times', 'are', 'important', 'because', 'when', 'your', 'instance', 'is', 'hit', 'by', 'more', 'requests', 'than', 'it', 'can', 'handle,', 'it', 'spins', 'up', 'another', 'instance.', 'This', 'makes', 'that', 'request', 'take', 'much', 'longer,', 'possibly', 'giving', 'the', 'impression', 'that', 'the', 'site', 'is', 'generally', 'slow.', 'Both', 'Java', 'and', 'Python', 'have', 'to', 'startup', 'their', 'virtual', 'machine/interpreter,', 'so', 'I', 'would', 'expect', 'Go', 'to', 'be', 'an', 'order', 'of', 'magnitude', 'faster', 'here.', 'There', 'is', 'one', 'other', 'issue', '-', 'now', 'Python2.7', 'is', 'available,', 'Go', 'is', 'the', 'only', 'option', 'that', 'is', 'single-threaded', '(ironically,', 'given', 'that', 'Go', 'is', 'designed', 'as', 'a', 'modern', 'multi-process', 'language).', 'So', 'although', 'Go', 'requests', 'should', 'be', 'handled', 'faster,', 'an', 'instance', 'can', 'only', 'handle', 'requests', 'serially.', ""I'd"", 'be', 'very', 'surprised', 'if', 'this', 'limitation', 'last', 'long,', 'though.']"
47,8341643,"Found this, although I'm not sure if it's what you want. Additionally it seems to lack an encoder + it may be outdated wrt current Go release/weekly versions.
","['Found', 'this,', 'although', ""I'm"", 'not', 'sure', 'if', ""it's"", 'what', 'you', 'want.', 'Additionally', 'it', 'seems', 'to', 'lack', 'an', 'encoder', '+', 'it', 'may', 'be', 'outdated', 'wrt', 'current', 'Go', 'release/weekly', 'versions.']"
48,8868451,"
","['hg', '-u', '(lower', 'case)', 'is', 'definitely', 'correct,', 'check', 'your', 'version', 'of', 'mercurial.', '$', 'hg', 'help', 'clone', '...', 'options', ':', '-', 'U', '--', 'noupdate', 'the', 'clone', 'will', 'include', 'an', 'empty', 'working', 'copy', '(', 'only', 'a', 'repository', ')', '-', 'u', '--', 'updaterev', 'REV', 'revision', ',', 'tag', 'or', 'branch', 'to', 'check', 'out', '...', '$']"
49,9393711,"After sometime in exp/ssh, the official ssh package now resides in the crypto/ssh subrepo: http://code.google.com/p/go/source/browse?repo=crypto#hg%2Fssh
","['After', 'sometime', 'in', 'exp/ssh,', 'the', 'official', 'ssh', 'package', 'now', 'resides', 'in', 'the', 'crypto/ssh', 'subrepo:', 'http://code.google.com/p/go/source/browse?repo=crypto#hg%2Fssh']"
50,9706515,"
","['This', 'seems', 'to', 'work', 'with', 'the', 'latest', 'weekly', 'package', 'main', 'import', '(', '""fmt""', '""log""', '""regexp""', '""strings""', ')', 'func', 'main', '()', '{', 'includeRegex', ',', 'err', ':=', 'regexp.Compile(`^\\s*include\\(""(\\\\\\""|[^""])+""\\);`)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'for', '_', ',', 'line', ':=', 'range', 'strings', '.', 'Split', '(', 'foo', 'include', '""abc.def""', 'include', '(', '""file.js""', ');', 'include', '""me\\""', 'to', '""""', 'include', '(', '""please\\""', '!', '""""', ');', 'nothing', 'here', ',', '""\\n""', ')', '{', 'if', 'includeRegex.Match([]byte(line))', '{', 'includeFile', ':=', 'includeRegex.FindString(line)', 'fmt.Println(""INCLUDE"", includeFile)', '}', 'else', '{', 'fmt.Printf(""no match for \\""%s\\""\\n"", line)', '}', '}', '}', 'Output:', '$', 'go', 'build', '&&', './', 'tmp', 'no', 'match', 'for', '""""', 'no', 'match', 'for', '""foo""', 'no', 'match', 'for', '""include ""', 'abc', '.', 'def', '""""', 'INCLUDE', 'include', '(', '""file.js""', ');', 'no', 'match', 'for', '""        include ""', 'me', '""to\\""', '""""', 'INCLUDE', 'include', '(', '""please\\""', '!', '""""', ');', 'no', 'match', 'for', '""  nothing here      ""', 'no', 'match', 'for', '""""', '$']"
51,9706827,"

It should print weekly.2012-03-13 or something close to that date.
","['Try', 'putting', 'the', 'following', 'line', 'at', 'the', 'start', 'of', 'your', 'program:', 'println', '(', 'runtime.Version())', 'It', 'should', 'print', 'weekly.2012-03-13', 'or', 'something', 'close', 'to', 'that', 'date.']"
52,9748995,"
","['I', 'think', 'you', 'should', 'use', 'v', ':=', 'p.Elem()', ""// Get the value that 'p' points to"", 'instead', 'of', 'v', ':=', 'reflect.ValueOf(p)']"
53,9754958,"

Appropriate alternative solutions would depend heavily on the real data you need to support.
","['Working', 'example', 'with', 'lots', 'of', 'assumptions', 'and', 'a', 'trivial', 'data', 'format:', 'package', 'main', 'import', '(', '""fmt""', '""reflect""', '""strconv""', ')', '//', 'example', 'marshalled', 'format.', 'lets', 'say', 'that', 'marshalled', 'data', 'will', 'have', '//', 'four', 'bytes', 'of', 'a', 'formatted', 'floating', 'point', 'number', 'followed', 'by', 'two', 'more', '//', 'printable', 'bytes.', 'type', 'm42', '[]', 'byte', '//', 'example', 'struct', ""we'd"", 'like', 'to', 'unmarshal', 'into.', 'type', 'packet', 'struct', '{', 'S', 'string', '// exported fields required for reflection', 'F', 'float64', '}', '//', 'example', 'usage', 'func', 'main', '()', '{', 'var', 'p', 'packet', 'if', 'err', ':=', 'Unmarshal', '(', 'm42', '(', '""3.14Pi""', '),', '&', 'p', ');', 'err', '==', 'nil', '{', 'fmt.Println(p)', '}', 'else', '{', 'fmt.Println(err)', '}', '}', 'func', 'Unmarshal', '(', 'data', 'm42', ',', 'struct', 'Ptr', 'interface', '{})', 'error', '{', 'vp', ':=', 'reflect.ValueOf(structPtr)', 've', ':=', 'vp.Elem()', '// settable struct Value', 'vt', ':=', 've.Type()', '// type info for struct', 'nStructFields', ':=', 've.NumField()', 'for', 'i', ':=', '0', ';', 'i', '<', 'nStructFields', ';', 'i', '++', '{', 'fv', ':=', 've.Field(i)', '// settable field Value', 'sf', ':=', 'vt.Field(i)', '// StructField type information', '//', 'struct', 'field', 'name', 'indicates', 'which', 'm42', 'field', 'to', 'unmarshal.', 'switch', 'sf', '.', 'Name', '{', 'case', '""S""', ':', 'fv.SetString(string(data[4:6]))', 'case', '""F""', ':', 's', ':=', 'string', '(', 'data', '[', '0', ':', '4', '])', 'if', 'n', ',', 'err', ':=', 'strconv.ParseFloat(s, 64)', ';', 'err', '==', 'nil', '{', 'fv.SetFloat(n)', '}', 'else', '{', 'return', 'err', '}', '}', '}', 'return', 'nil', '}', 'Appropriate', 'alternative', 'solutions', 'would', 'depend', 'heavily', 'on', 'the', 'real', 'data', 'you', 'need', 'to', 'support.']"
54,9764087,"I'm going to bet that the reason f.Addr() has the problem because it actually isn't addressable.

the reflect package Type object has a method that will tell you if the type is addressable called CanAddr(). Assuming the field is addressable if it's not a string is not always true. If the struct is not passed in as a pointer to a struct then it's fields won't be addressable. For more details about what is and isn't addressable see: http://weekly.golang.org/pkg/reflect/#Value.CanAddr which outlines the correct rules.

Essentially for your code to work I think you need to ensure you always call it with a pointer to a struct.
","[""I'm"", 'going', 'to', 'bet', 'that', 'the', 'reason', 'f.Addr()', 'has', 'the', 'problem', 'because', 'it', 'actually', ""isn't"", 'addressable.', 'the', 'reflect', 'package', 'Type', 'object', 'has', 'a', 'method', 'that', 'will', 'tell', 'you', 'if', 'the', 'type', 'is', 'addressable', 'called', 'CanAddr().', 'Assuming', 'the', 'field', 'is', 'addressable', 'if', ""it's"", 'not', 'a', 'string', 'is', 'not', 'always', 'true.', 'If', 'the', 'struct', 'is', 'not', 'passed', 'in', 'as', 'a', 'pointer', 'to', 'a', 'struct', 'then', ""it's"", 'fields', ""won't"", 'be', 'addressable.', 'For', 'more', 'details', 'about', 'what', 'is', 'and', ""isn't"", 'addressable', 'see:', 'http://weekly.golang.org/pkg/reflect/#Value.CanAddr', 'which', 'outlines', 'the', 'correct', 'rules.', 'Essentially', 'for', 'your', 'code', 'to', 'work', 'I', 'think', 'you', 'need', 'to', 'ensure', 'you', 'always', 'call', 'it', 'with', 'a', 'pointer', 'to', 'a', 'struct.']"
55,9863218,"
","['I', 'would', 'do', 'it', 'like', 'this:', 'package', 'main', 'import', '(', '""fmt""', '""io/ioutil""', '""strconv""', '""strings""', ')', '//', 'It', 'would', 'be', 'better', 'for', 'such', 'a', 'function', 'to', 'return', 'error,', 'instead', 'of', 'handling', '//', 'it', 'on', 'their', 'own.', 'func', 'readFile', '(', 'fname', 'string', ')', '(', 'nums', '[]', 'int', ',', 'err', 'error', ')', '{', 'b', ',', 'err', ':=', 'ioutil.ReadFile(fname)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'lines', ':=', 'strings.Split(string(b), ""\\n"")', '//', 'Assign', 'cap', 'to', 'avoid', 'resize', 'on', 'every', 'append.', 'nums', '=', 'make', '([]', 'int', ',', '0', ',', 'len', '(', 'lines', '))', 'for', 'i', ',', 'l', ':=', 'range', 'lines', '{', '//', 'Empty', 'line', 'occurs', 'at', 'the', 'end', 'of', 'the', 'file', 'when', 'we', 'use', 'Split.', 'if', 'len', '(', 'l', ')', '==', '0', '{', 'continue', '}', '//', 'Atoi', 'better', 'suits', 'the', 'job', 'when', 'we', 'know', 'exactly', 'what', ""we're"", 'dealing', '//', 'with.', 'Scanf', 'is', 'the', 'more', 'general', 'option.', 'n', ',', 'err', ':=', 'strconv.Atoi(l)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'nums', '=', 'append', '(', 'nums', ',', 'n', ')', '}', 'return', 'nums', ',', 'nil', '}', 'func', 'main', '()', '{', 'nums', ',', 'err', ':=', 'readFile', '(', '""numbers.txt""', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'fmt.Println(len(nums))', '}']"
56,9863449,"Your solution with fmt.Fscanf is fine.  There are certainly a number of other ways to do though, depending on your situation.  Mostafa's technique is one I use a lot (although I might allocate the result all at once with make.  oops! scratch that.  He did.) but for ultimate control you should learn bufio.ReadLine.  See go readline -> string for some example code.
","['Your', 'solution', 'with', 'fmt.Fscanf', 'is', 'fine.', 'There', 'are', 'certainly', 'a', 'number', 'of', 'other', 'ways', 'to', 'do', 'though,', 'depending', 'on', 'your', 'situation.', ""Mostafa's"", 'technique', 'is', 'one', 'I', 'use', 'a', 'lot', '(although', 'I', 'might', 'allocate', 'the', 'result', 'all', 'at', 'once', 'with', 'make.', 'oops!', 'scratch', 'that.', 'He', 'did.)', 'but', 'for', 'ultimate', 'control', 'you', 'should', 'learn', 'bufio.ReadLine.', 'See', 'go', 'readline', '->', 'string', 'for', 'some', 'example', 'code.']"
57,10022387,"

NOTE: This will go arbitrarily deep into the structure. If that's not what you want it will need some modifications.
","[""I'm"", 'not', 'really', 'sure', 'I', 'understand', 'what', 'it', 'is', 'you', 'want', 'to', 'do', 'since', 'your', 'recursion', 'code', 'looks', 'a', 'little', 'strange.', 'However', 'if', 'I', 'understand', 'the', 'structure', 'of', 'your', 'TMyTreeNode', 'then', 'this', 'is', 'what', 'I', 'would', 'do', 'for', 'a', 'non', 'recursive', 'version.', '//', 'root', 'is', 'our', 'root', 'node', 'q', ':=', '[]*', 'TMyTreeNode', '{', 'root', '}', 'processed', ':=', 'make', '(', 'map', '[*', 'TMyTreeNode', ']', 'bool', 'for', '{', 'l', ':=', 'len', '(', 'q', ')', 'if', 'l', '<', '1', '{', 'break', '// our queue is empty', '}', 'curr', ':=', 'q', '[', 'l', '-', '1', ']', 'if', '!', 'processed', '[', 'curr', ']', '&&', 'len', '(', 'curr', '.', 'childNodes', ')', '>', '0', '{', '//', 'do', 'something', 'with', 'curr', 'processed', '[', 'curr', ']', '=', 'true', 'q', '=', 'append', '(', 'q', ',', 'curr', '.', 'childNodes', '...)', 'continue', '// continue on down the tree.', '}', 'else', '{', '//', 'do', 'something', 'with', 'curr', 'processed', '[', 'curr', ']', '=', 'true', 'q', ':=', 'q', '[:', 'l', '-', '2', ']', '// pop current off the queue', '}', '}', 'NOTE:', 'This', 'will', 'go', 'arbitrarily', 'deep', 'into', 'the', 'structure.', 'If', ""that's"", 'not', 'what', 'you', 'want', 'it', 'will', 'need', 'some', 'modifications.']"
58,10045630,"Look here: https://github.com/nsf/gocode and there at 'Emacs setup'.
","['Look', 'here:', 'https://github.com/nsf/gocode', 'and', 'there', 'at', ""'Emacs"", ""setup'.""]"
59,10137141,"Use Nginx as the front-end and make sure that you are using the 64bit version of Go. The 32bit version has severe stability problems which are a show stopper for any long-running processes.
","['Use', 'Nginx', 'as', 'the', 'front-end', 'and', 'make', 'sure', 'that', 'you', 'are', 'using', 'the', '64bit', 'version', 'of', 'Go.', 'The', '32bit', 'version', 'has', 'severe', 'stability', 'problems', 'which', 'are', 'a', 'show', 'stopper', 'for', 'any', 'long-running', 'processes.']"
60,10137199,"Why not using the Build in Webserver and set up a Reverse Proxy like Varnish, or let Nginx act as Proxy?

http://wiki.nginx.org/ReverseProxyCachingExample
","['Why', 'not', 'using', 'the', 'Build', 'in', 'Webserver', 'and', 'set', 'up', 'a', 'Reverse', 'Proxy', 'like', 'Varnish,', 'or', 'let', 'Nginx', 'act', 'as', 'Proxy?', 'http://wiki.nginx.org/ReverseProxyCachingExample']"
61,10138446,"There are no stability problem.

I have a few webservers 100% in go that run for months, serving about a million queries per month without any problem (mostly json, through GET, POST, and websockets).

They're on 64 bits ubuntu servers but I guess you would have difficulties producing the so much gossiped about 32 bits bug, especially with a web server.

Don't use a front-end if you have no specific reason : It's easy to make a complete web application just using Go. 

You will be far from alone. In my opinion Go is especially well suited to build long running servers. Goroutines and channels makes it really easy to handle both user requests and long term tasks (or, for example, do the postreatment of user queries after you answered the http query, which isn't so easy in php and is too many LOC in java if you want to do it properly).
","['There', 'are', 'no', 'stability', 'problem.', 'I', 'have', 'a', 'few', 'webservers', '100%', 'in', 'go', 'that', 'run', 'for', 'months,', 'serving', 'about', 'a', 'million', 'queries', 'per', 'month', 'without', 'any', 'problem', '(mostly', 'json,', 'through', 'GET,', 'POST,', 'and', 'websockets).', ""They're"", 'on', '64', 'bits', 'ubuntu', 'servers', 'but', 'I', 'guess', 'you', 'would', 'have', 'difficulties', 'producing', 'the', 'so', 'much', 'gossiped', 'about', '32', 'bits', 'bug,', 'especially', 'with', 'a', 'web', 'server.', ""Don't"", 'use', 'a', 'front-end', 'if', 'you', 'have', 'no', 'specific', 'reason', ':', ""It's"", 'easy', 'to', 'make', 'a', 'complete', 'web', 'application', 'just', 'using', 'Go.', 'You', 'will', 'be', 'far', 'from', 'alone.', 'In', 'my', 'opinion', 'Go', 'is', 'especially', 'well', 'suited', 'to', 'build', 'long', 'running', 'servers.', 'Goroutines', 'and', 'channels', 'makes', 'it', 'really', 'easy', 'to', 'handle', 'both', 'user', 'requests', 'and', 'long', 'term', 'tasks', '(or,', 'for', 'example,', 'do', 'the', 'postreatment', 'of', 'user', 'queries', 'after', 'you', 'answered', 'the', 'http', 'query,', 'which', ""isn't"", 'so', 'easy', 'in', 'php', 'and', 'is', 'too', 'many', 'LOC', 'in', 'java', 'if', 'you', 'want', 'to', 'do', 'it', 'properly).']"
62,10152855,"

Edit: Added forgotten error handling of NewRequest.
","['This', 'seems', 'to', 'work:', 'package', 'main', 'import', '(', '""fmt""', '""io""', '""log""', '""net/http""', ')', 'func', 'main', '()', '{', 'request', ',', 'err', ':=', 'http.NewRequest(""GET"", ""http://www.example.com/"", nil)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'http_client', ':=', '&', 'http', '.', 'Client', '{}', 'response', ',', 'err', ':=', 'http_client.Do(request)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'buf', ':=', 'make', '([]', 'byte', ',', '4096', ')', ""// any non zero value will do, try '1'."", 'for', '{', 'n', ',', 'err', ':=', 'response', '.', 'Body.Read(buf)', 'if', 'n', '==', '0', '&&', 'err', '!=', 'nil', '{', '// simplified', 'break', '}', 'fmt.Printf(""%s"", buf[:n])', '// no need to convert to string here', '}', 'fmt.Println()', '}', 'Edit:', 'Added', 'forgotten', 'error', 'handling', 'of', 'NewRequest.']"
63,10187062,"
","['You', ""don't"", 'need', 'to', 'create', 'a', 'new', 'template', 'with', 'New', 'and', 'then', 'use', 'ParseFiles', 'on', 'it.', 'There', 'is', 'also', 'a', 'function', 'ParseFiles', 'which', 'takes', 'care', 'of', 'creating', 'a', 'new', 'template', 'behind', 'the', 'scenes.Here', 'is', 'an', 'example:', 'package', 'main', 'import', '(', '""fmt""', '""html/template""', '""os""', ')', 'func', 'main', '()', '{', 't', ',', 'err', ':=', 'template.ParseFiles(""test.html"")', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', ';', '}', 't.Execute(os.Stdout, nil)', '}']"
64,10283180,"
  Will google Go use less resources than Python and Java on Appengine?
  Are the instance startup times for go faster than Java's and Python's
  startup times?


Yes, Go instances have a lower memory than Python and Java (

Yes, Go instances start faster than Java and Python equivalent because the runtime only needs to read a single executable file for starting an application.

Also even if being atm single threaded, Go instances handle incoming request concurrently using goroutines, meaning that if  1 goroutine is waiting for I/O another one can process an incoming request.


  Is the go program uploaded as binaries or source code and if it is
  uploaded as source code is it then compiled once or at each instance
  startup?


Go program is uploaded as source code and compiled (once) to a binary when deploying a new version of your application using the SDK.


  In other words: Will I benefit from using Go in app engine from a cost
  perspective?


The Go runtime has definitely an edge when it comes to performance / price ratio, however it doesn't affect the pricing of other API quotas as described by Peter answer.
","['Will', 'google', 'Go', 'use', 'less', 'resources', 'than', 'Python', 'and', 'Java', 'on', 'Appengine?', 'Are', 'the', 'instance', 'startup', 'times', 'for', 'go', 'faster', 'than', ""Java's"", 'and', ""Python's"", 'startup', 'times?', 'Yes,', 'Go', 'instances', 'have', 'a', 'lower', 'memory', 'than', 'Python', 'and', 'Java', '(', 'Yes,', 'Go', 'instances', 'start', 'faster', 'than', 'Java', 'and', 'Python', 'equivalent', 'because', 'the', 'runtime', 'only', 'needs', 'to', 'read', 'a', 'single', 'executable', 'file', 'for', 'starting', 'an', 'application.', 'Also', 'even', 'if', 'being', 'atm', 'single', 'threaded,', 'Go', 'instances', 'handle', 'incoming', 'request', 'concurrently', 'using', 'goroutines,', 'meaning', 'that', 'if', '1', 'goroutine', 'is', 'waiting', 'for', 'I/O', 'another', 'one', 'can', 'process', 'an', 'incoming', 'request.', 'Is', 'the', 'go', 'program', 'uploaded', 'as', 'binaries', 'or', 'source', 'code', 'and', 'if', 'it', 'is', 'uploaded', 'as', 'source', 'code', 'is', 'it', 'then', 'compiled', 'once', 'or', 'at', 'each', 'instance', 'startup?', 'Go', 'program', 'is', 'uploaded', 'as', 'source', 'code', 'and', 'compiled', '(once)', 'to', 'a', 'binary', 'when', 'deploying', 'a', 'new', 'version', 'of', 'your', 'application', 'using', 'the', 'SDK.', 'In', 'other', 'words:', 'Will', 'I', 'benefit', 'from', 'using', 'Go', 'in', 'app', 'engine', 'from', 'a', 'cost', 'perspective?', 'The', 'Go', 'runtime', 'has', 'definitely', 'an', 'edge', 'when', 'it', 'comes', 'to', 'performance', '/', 'price', 'ratio,', 'however', 'it', ""doesn't"", 'affect', 'the', 'pricing', 'of', 'other', 'API', 'quotas', 'as', 'described', 'by', 'Peter', 'answer.']"
65,10351615,"OK.
After long searches, I can say that there still is no publicly available encoder even if a decoder was made ( https://github.com/golang/image/blob/master/webp/decode.go ).
","['OK.', 'After', 'long', 'searches,', 'I', 'can', 'say', 'that', 'there', 'still', 'is', 'no', 'publicly', 'available', 'encoder', 'even', 'if', 'a', 'decoder', 'was', 'made', '(', 'https://github.com/golang/image/blob/master/webp/decode.go', ').']"
66,10370469,"The question is mostly irrelevant.

The minimum memory footprint for a Go app is less than a Python app which is less than a Java app.  They all cost the same per-instance, so unless your application performs better with extra heap space, this issue is irrelevant.

Go startup time is less than Python startup time which is less than Java startup time.  Unless your application has a particular reason to churn through lots of instance startup/shutdown cycles, this is irrelevant from a cost perspective.  On the other hand, if you have an app that is exceptionally bursty in very short time periods, the startup time may be an advantage.

As mentioned by other answers, many costs are identical among all platforms - in particular, datastore operations.  To the extent that Go vs Python vs Java will have an effect on the instance-hours bill, it is related to:


Does your app generate a lot of garbage?  For many applications, the biggest computational cost is the garbage collector.  Java has by far the most mature GC and basic operations like serialization are dramatically faster than with Python.  Go's garbage collector seems to be an ongoing subject of development, but from cursory web searches, doesn't seem to be a matter of pride (yet).
Is your app computationally intensive?  Java (JIT-compiled) and Go are probably better than Python for mathematical operations.


All three languages have their virtues and curses.  For the most part, you're better off letting other issues dominate - which language do you enjoy working with most?
","['The', 'question', 'is', 'mostly', 'irrelevant.', 'The', 'minimum', 'memory', 'footprint', 'for', 'a', 'Go', 'app', 'is', 'less', 'than', 'a', 'Python', 'app', 'which', 'is', 'less', 'than', 'a', 'Java', 'app.', 'They', 'all', 'cost', 'the', 'same', 'per-instance,', 'so', 'unless', 'your', 'application', 'performs', 'better', 'with', 'extra', 'heap', 'space,', 'this', 'issue', 'is', 'irrelevant.', 'Go', 'startup', 'time', 'is', 'less', 'than', 'Python', 'startup', 'time', 'which', 'is', 'less', 'than', 'Java', 'startup', 'time.', 'Unless', 'your', 'application', 'has', 'a', 'particular', 'reason', 'to', 'churn', 'through', 'lots', 'of', 'instance', 'startup/shutdown', 'cycles,', 'this', 'is', 'irrelevant', 'from', 'a', 'cost', 'perspective.', 'On', 'the', 'other', 'hand,', 'if', 'you', 'have', 'an', 'app', 'that', 'is', 'exceptionally', 'bursty', 'in', 'very', 'short', 'time', 'periods,', 'the', 'startup', 'time', 'may', 'be', 'an', 'advantage.', 'As', 'mentioned', 'by', 'other', 'answers,', 'many', 'costs', 'are', 'identical', 'among', 'all', 'platforms', '-', 'in', 'particular,', 'datastore', 'operations.', 'To', 'the', 'extent', 'that', 'Go', 'vs', 'Python', 'vs', 'Java', 'will', 'have', 'an', 'effect', 'on', 'the', 'instance-hours', 'bill,', 'it', 'is', 'related', 'to:', 'Does', 'your', 'app', 'generate', 'a', 'lot', 'of', 'garbage?', 'For', 'many', 'applications,', 'the', 'biggest', 'computational', 'cost', 'is', 'the', 'garbage', 'collector.', 'Java', 'has', 'by', 'far', 'the', 'most', 'mature', 'GC', 'and', 'basic', 'operations', 'like', 'serialization', 'are', 'dramatically', 'faster', 'than', 'with', 'Python.', ""Go's"", 'garbage', 'collector', 'seems', 'to', 'be', 'an', 'ongoing', 'subject', 'of', 'development,', 'but', 'from', 'cursory', 'web', 'searches,', ""doesn't"", 'seem', 'to', 'be', 'a', 'matter', 'of', 'pride', '(yet).', 'Is', 'your', 'app', 'computationally', 'intensive?', 'Java', '(JIT-compiled)', 'and', 'Go', 'are', 'probably', 'better', 'than', 'Python', 'for', 'mathematical', 'operations.', 'All', 'three', 'languages', 'have', 'their', 'virtues', 'and', 'curses.', 'For', 'the', 'most', 'part,', ""you're"", 'better', 'off', 'letting', 'other', 'issues', 'dominate', '-', 'which', 'language', 'do', 'you', 'enjoy', 'working', 'with', 'most?']"
67,10534905,"I think it's a bit difficult to tell what you are asking about. Maybe you can elaborate on your question.

Goroutines are quite cheap, and are a perfect match for modern web applications which use XHR or Websockets heavily (and other I/O bound applications which have to wait for database responses and stuff like that). Additionally, the go runtime is also able to execute those goroutines in parallel, so that Go is also a good fit for CPU bound tasks, which should take advantage of multiple cores and the speed of a natively compiled language.

But you should also keep in mind, that goroutines and channels aren't for free. They still require some amount of memory and each synchronization point (e.g. a channel send or receive) comes with its cost. That's normally not a problem, since the synchronization is, in comparison to a database query for example, extremely cheap, but it might not be suited for building efficient Bayesian networks, especially if the actual work of each goroutine / node is negligible in comparison to the synchronization overhead.

Your primary goal for every concurrent program should be to avoid shared mutability as far as possible. So a Bayesian network modeled with goroutines and channels might be a good educational example and a great way to measure the performance of Go's channel implementation, but it's probably not the best fit for your problem.
","['I', 'think', ""it's"", 'a', 'bit', 'difficult', 'to', 'tell', 'what', 'you', 'are', 'asking', 'about.', 'Maybe', 'you', 'can', 'elaborate', 'on', 'your', 'question.', 'Goroutines', 'are', 'quite', 'cheap,', 'and', 'are', 'a', 'perfect', 'match', 'for', 'modern', 'web', 'applications', 'which', 'use', 'XHR', 'or', 'Websockets', 'heavily', '(and', 'other', 'I/O', 'bound', 'applications', 'which', 'have', 'to', 'wait', 'for', 'database', 'responses', 'and', 'stuff', 'like', 'that).', 'Additionally,', 'the', 'go', 'runtime', 'is', 'also', 'able', 'to', 'execute', 'those', 'goroutines', 'in', 'parallel,', 'so', 'that', 'Go', 'is', 'also', 'a', 'good', 'fit', 'for', 'CPU', 'bound', 'tasks,', 'which', 'should', 'take', 'advantage', 'of', 'multiple', 'cores', 'and', 'the', 'speed', 'of', 'a', 'natively', 'compiled', 'language.', 'But', 'you', 'should', 'also', 'keep', 'in', 'mind,', 'that', 'goroutines', 'and', 'channels', ""aren't"", 'for', 'free.', 'They', 'still', 'require', 'some', 'amount', 'of', 'memory', 'and', 'each', 'synchronization', 'point', '(e.g.', 'a', 'channel', 'send', 'or', 'receive)', 'comes', 'with', 'its', 'cost.', ""That's"", 'normally', 'not', 'a', 'problem,', 'since', 'the', 'synchronization', 'is,', 'in', 'comparison', 'to', 'a', 'database', 'query', 'for', 'example,', 'extremely', 'cheap,', 'but', 'it', 'might', 'not', 'be', 'suited', 'for', 'building', 'efficient', 'Bayesian', 'networks,', 'especially', 'if', 'the', 'actual', 'work', 'of', 'each', 'goroutine', '/', 'node', 'is', 'negligible', 'in', 'comparison', 'to', 'the', 'synchronization', 'overhead.', 'Your', 'primary', 'goal', 'for', 'every', 'concurrent', 'program', 'should', 'be', 'to', 'avoid', 'shared', 'mutability', 'as', 'far', 'as', 'possible.', 'So', 'a', 'Bayesian', 'network', 'modeled', 'with', 'goroutines', 'and', 'channels', 'might', 'be', 'a', 'good', 'educational', 'example', 'and', 'a', 'great', 'way', 'to', 'measure', 'the', 'performance', 'of', ""Go's"", 'channel', 'implementation,', 'but', ""it's"", 'probably', 'not', 'the', 'best', 'fit', 'for', 'your', 'problem.']"
68,10757939,"

If you're looking for more resources for web development...


Mango: http://paulbellamy.com/2011/05/introducing-mango/
Web.go: http://www.getwebgo.com/tutorial
Twister: https://github.com/garyburd/twister/blob/master/examples/hello/main.go

","['If', ""I'm"", 'understanding', 'you', 'correctly,', 'you', 'want', 'a', 'way', 'of', 'routing', 'the', 'same', 'URL', 'to', 'different', 'handlers', 'based', 'on', 'the', 'request', 'method', 'rather', 'than', 'just', 'the', 'path?', 'If', ""that's"", 'the', 'case...', 'For', 'comparison,', 'using', 'Python', '+', 'Django,', 'the', 'way', ""you're"", 'doing', 'this', 'is', 'pretty', 'standard:', 'def', 'my_django_view', '(', 'request', '):', 'if', 'request', '.', 'method', '==', '""POST""', ':', 'try_to_process_posted_data', '()', 'elif', 'request', '.', 'method', '==', '""GET""', ':', 'show_a_form_to_user', '()', 'If', 'you', 'are', 'trying', 'to', 'do', 'fancier', 'things', 'like', 'URL', 'routing', 'based', 'on', 'path', 'and', 'request', 'method', '(GET,', 'POST,', 'DELETE,', '...),', 'then', 'you', 'might', 'be', 'interested', 'in', 'something', 'like', 'Gorilla.mux', 'It', 'provides', 'some', 'friendly', 'URL', 'routing', 'methods:', 'func', 'main', '()', '{', 'router', ':=', 'mux.NewRouter()', 'router.HandleFunc(""/"", YourGETHandlerFunc).Methods(""GET"")', 'router.HandleFunc(""/"", YourPOSTHandlerFunc).Methods(""POST"")', 'http.Handle(""/"", router)', '}', 'If', ""you're"", 'looking', 'for', 'more', 'resources', 'for', 'web', 'development...', 'Mango:', 'http://paulbellamy.com/2011/05/introducing-mango/', 'Web.go:', 'http://www.getwebgo.com/tutorial', 'Twister:', 'https://github.com/garyburd/twister/blob/master/examples/hello/main.go']"
69,10839802,"

Output:




","['You', 'might', 'try', 'working', 'directly', 'with', 'templates.', 'Example:', 'package', 'main', 'import', '(', '""bytes""', '""encoding/xml""', '""fmt""', '""text/template""', ')', 'type', 'ele', 'struct', '{', 'Name', 'string', 'Attrs', '[]', 'attr', '}', 'type', 'attr', 'struct', '{', 'Name', ',', 'Value', 'string', '}', 'var', 'x', '=', 'func', 'main', '()', '{', '//', 'template', 'function', '""xml""', 'defined', 'here', 'does', 'basic', 'escaping,', '//', 'important', 'for', 'handling', 'special', 'characters', 'such', 'as', '"".', 't', ':=', 'template.New("""").Funcs(template.FuncMap{""xml"": func(s string)', 'string', '{', 'var', 'b', 'bytes', '.', 'Buffer', 'xml.Escape(&b, []byte(s))', 'return', 'b.String()', '}})', 'template.Must(t.Parse(x))', 'e', ':=', 'ele', '{', 'Name', ':', '""Meh""', ',', 'Attrs', ':', '[]', 'attr', '{', '{', '""hi""', ',', '""there""', '},', '{', '""um""', ',', 'I', 'said', '""hello?""', '},', '},', '}', 'b', ':=', 'new', '(', 'bytes', '.', 'Buffer', ')', 'err', ':=', 't.Execute(b, e)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'fmt.Println(b)', '}', 'Output:']"
70,10869872,"See: http://golang.org/pkg/testing/#T.Fatal (and Fatalf)

The docs say: ""Fatal is equivalent to Log() followed by FailNow().""
","['See:', 'http://golang.org/pkg/testing/#T.Fatal', '(and', 'Fatalf)', 'The', 'docs', 'say:', '""Fatal', 'is', 'equivalent', 'to', 'Log()', 'followed', 'by', 'FailNow().""']"
71,10870464,"I build a little helping package as part of my Tideland Common Go Library (see http://code.google.com/p/tcgl/). The API doc can found at http://go.pkgdoc.org/code.google.com/p/tcgl/asserts.
","['I', 'build', 'a', 'little', 'helping', 'package', 'as', 'part', 'of', 'my', 'Tideland', 'Common', 'Go', 'Library', '(see', 'http://code.google.com/p/tcgl/).', 'The', 'API', 'doc', 'can', 'found', 'at', 'http://go.pkgdoc.org/code.google.com/p/tcgl/asserts.']"
72,10990287,"

car := new(Car) can be implemented in relation to var car Car like this:

var x Car
car := &x

","['One', 'defines', 'a', 'Car', 'variable,', 'the', 'other', 'returns', 'a', 'pointer', 'to', 'a', 'Car.', 'var', 'car', 'Car', '// defines variable car is a Car', 'car2', ':=', 'new', '(', 'Car', ')', '// defines variable car2 is a *Car and assigns a Car to back it', 'car', ':=', 'new(Car)', 'can', 'be', 'implemented', 'in', 'relation', 'to', 'var', 'car', 'Car', 'like', 'this:', 'var', 'x', 'Car', 'car', ':=', '&x']"
73,10998318,"Just use a *int64. A pointer can either be nil or it can point to an int64 with an associated value and they work fine with Go's JSON package.
","['car', ':=', 'new(Car)', 'can', 'be', 'implemented', 'in', 'relation', 'to', 'var', 'car', 'Car', 'like', 'this:', 'var', 'x', 'Car', 'car', ':=', '&x']"
74,11611782,". In the later case there must be a file ""foo.txt"" in your working directory for this example code to work. After that the code seems to work for me locally.

Someone should probably fill an issue about the ignored error value.
","[""There's"", 'an', 'ignored', 'err', 'at', 'line', '36.', 'The', 'error', 'probably', 'says', 'open', '.', 'txt', ':', 'no', 'such', 'file', 'or', 'directory', 'if', 'you', 'tested', 'in', 'browser', 'using', 'URL', 'http', '://', 'localhost', ':', '8080/view/', 'or', 'open', 'foo', '.', 'txt', ':', 'no', 'such', 'file', 'or', 'directory', 'if', 'you', 'tested', 'in', 'browser', 'using', 'URL', 'http', '://', 'localhost', ':', '8080/view/foo', '.', 'In', 'the', 'later', 'case', 'there', 'must', 'be', 'a', 'file', '""foo.txt""', 'in', 'your', 'working', 'directory', 'for', 'this', 'example', 'code', 'to', 'work.', 'After', 'that', 'the', 'code', 'seems', 'to', 'work', 'for', 'me', 'locally.', 'Someone', 'should', 'probably', 'fill', 'an', 'issue', 'about', 'the', 'ignored', 'error', 'value.']"
75,11807674,"
","['sweaters', ':=', 'Inventory', '{', '""wool""', ',', '17', '}', 'tmpl', ',', 'err', ':=', 'template.ParseFiles(""file.txt"")', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'err', '=', 'tmpl.ExecuteTemplate(os.Stdout, ""file.txt"", sweaters)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'If', 'you', 'have', 'many', 'files,', 'you', 'can', 'use', 'ParseGlob:', 'tmpl', ',', 'err', ':=', 'template.ParseGlob(""*.txt"")', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'err', '=', 'tmpl.ExecuteTemplate(os.Stdout, ""file.txt"", sweaters)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'err', '=', 'tmpl.ExecuteTemplate(os.Stdout, ""file2.txt"", sweaters)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}']"
76,11902254,"Since then (2010), the article Slices: usage and internals is a bit more precise:


  The in-memory representation of [4]int is just four integer values laid out sequentially:





  Go's arrays are values.
  An array variable denotes the entire array; it is not a pointer to the first array element (as would be the case in C).
  This means that when you assign or pass around an array value you will make a copy of its contents. (To avoid the copy you could pass a pointer to the array, but then that's a pointer to an array, not an array.)
  One way to think about arrays is as a sort of struct but with indexed rather than named fields: a fixed-size composite value. 

",[]
77,12225044,"

","['Be', 'careful', 'with', 'goroutine.', 'Because', 'when', 'the', 'main', 'routine,', 'or', 'main()', 'func,', 'returns,', 'all', 'others', 'go', 'routine', 'would', 'be', 'killed', 'immediately.', 'Your', 'Crawl()', 'seems', 'like', 'recursive,', 'however', 'it', 'is', 'not,', 'which', 'means', 'it', 'would', 'return', 'immediately,', 'not', 'awaiting', 'for', 'other', 'Crawl()', 'routines.', 'And', 'you', 'know', 'that', 'if', 'the', 'first', 'Crawl(),', 'called', 'by', 'main(),', 'returns,', 'the', 'main()', 'func', 'regards', 'its', 'mission', 'fulfilled.', 'What', 'you', 'could', 'do', 'is', 'to', 'let', 'main()', 'func', 'wait', 'until', 'the', 'last', 'Crawl()', 'returns.', 'The', 'sync', 'package,', 'or', 'a', 'chan', 'would', 'help.', 'You', 'could', 'probably', 'take', 'a', 'look', 'at', 'the', 'last', 'solution', 'of', 'this,', 'which', 'I', 'did', 'months', 'ago:', 'var', 'store', 'map', '[', 'string', ']', 'bool', 'func', 'Krawl', '(', 'url', 'string', ',', 'fetcher', 'Fetcher', ',', 'Urls', 'chan', '[]', 'string', ')', '{', 'body', ',', 'urls', ',', 'err', ':=', 'fetcher.Fetch(url)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'else', '{', 'fmt.Printf(""found: %s %q\\n"", url, body)', '}', 'Urls', '<-', 'urls', '}', 'func', 'Crawl', '(', 'url', 'string', ',', 'depth', 'int', ',', 'fetcher', 'Fetcher', ')', '{', 'Urls', ':=', 'make', '(', 'chan', '[]', 'string', ')', 'go', 'Krawl', '(', 'url', ',', 'fetcher', ',', 'Urls', ')', 'band', ':=', '1', 'store', '[', 'url', ']', '=', 'true', '// init for level 0 done', 'for', 'i', ':=', '0', ';', 'i', '<', 'depth', ';', 'i', '++', '{', 'for', 'band', '>', '0', '{', 'band', '--', 'next', ':=', '<-', 'Urls', 'for', '_', ',', 'url', ':=', 'range', 'next', '{', 'if', '_', ',', 'done', ':=', 'store', '[', 'url', ']', ';', '!', 'done', '{', 'store', '[', 'url', ']', '=', 'true', 'band', '++', 'go', 'Krawl', '(', 'url', ',', 'fetcher', ',', 'Urls', ')', '}', '}', '}', '}', 'return', '}', 'func', 'main', '()', '{', 'store', '=', 'make', '(', 'map', '[', 'string', ']', 'bool', ')', 'Crawl', '(', '""http://golang.org/""', ',', '4', ',', 'fetcher', ')', '}']"
78,12374736,"

But that's not really the logic of Go and that's not nearly as simple as what you typed in your question.
","['Go', ""isn't"", 'a', 'scripting', 'language.', 'Like', 'in', 'C', 'you', 'have', 'to', 'compile', 'your', 'source', 'code', 'to', 'make', 'an', 'executable.', 'From', 'the', '""Getting', 'Started""', ':', 'Create', 'a', 'file', 'named', 'hello.go', 'and', 'put', 'the', 'following', 'program', 'in', 'it:', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'fmt.Printf(""hello, world\\n"")', '}', 'Then', 'run', 'it', 'with', 'the', 'go', 'tool:', '$', 'go', 'run', 'hello', '.', 'go', 'hello', ',', 'world', 'In', 'the', 'spirit', 'of', 'Python,', 'there', 'are', 'attempts', 'to', 'make', 'Go', 'scripts', 'kinda', 'possible.', ""Here's"", 'for', 'example', 'what', 'you', 'can', 'do', 'with', 'gorun', ':', '!/', 'usr/bin/gorun', 'package', 'main', 'func', 'main', '()', '{', 'println', '(', '""Hello world!""', ')', '}', 'But', ""that's"", 'not', 'really', 'the', 'logic', 'of', 'Go', 'and', ""that's"", 'not', 'nearly', 'as', 'simple', 'as', 'what', 'you', 'typed', 'in', 'your', 'question.']"
79,12425614,"
","[""It's"", 'a', 'logical', 'shift:', 'every', 'bit', 'in', 'the', 'operand', 'is', 'simply', 'moved', 'a', 'given', 'number', 'of', 'bit', 'positions,', 'and', 'the', 'vacant', 'bit-positions', 'are', 'filled', 'in,', 'usually', 'with', 'zeros', 'Go', 'Operators:', '<<', 'left', 'shift', 'integer', '<<', 'unsigned', 'integer', '>>', 'right', 'shift', 'integer', '>>', 'unsigned', 'integer']"
80,12425661,"The >> and 

http://en.wikipedia.org/wiki/Logical_shift

Also, you can check all the Go operators in their webpage
","['The', '>>', 'and', 'http://en.wikipedia.org/wiki/Logical_shift', 'Also,', 'you', 'can', 'check', 'all', 'the', 'Go', 'operators', 'in', 'their', 'webpage']"
81,12452721,"

Note that the structure your parsing has a fairly insane level of depth. Might help to run the XML through a pretty printer that formats it for you with indent to see.
","['Not', '100%', 'clear', 'on', 'what', ""you're"", 'trying', 'to', 'do,', 'but', 'this', 'seems', 'to', 'break', 'it', 'down', 'better?', 'type', 'Member', 'struct', '{', 'Name', 'string', 'xml', ':', '""name""', 'Value', 'string', 'xml', ':', '""value>string""', '}', 'type', 'Result', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'xml', ':', '""methodResponse""', 'FirstValue', 'string', 'xml', ':', '""params>param>value>array>data>value>string""', 'Members', '[]', 'Member', 'xml', ':', '""params>param>value>array>data>value>struct>member""', '}', 'Note', 'that', 'the', 'structure', 'your', 'parsing', 'has', 'a', 'fairly', 'insane', 'level', 'of', 'depth.', 'Might', 'help', 'to', 'run', 'the', 'XML', 'through', 'a', 'pretty', 'printer', 'that', 'formats', 'it', 'for', 'you', 'with', 'indent', 'to', 'see.']"
82,12540127," will print the data's type in go-syntax
form.
More fmt format string options are documented here: http://golang.org/pkg/fmt/

","['Hi', 'and', 'welcome', 'to', 'go', ""I'm"", 'former', 'perl', 'hacker', 'myself.', 'As', 'to', 'your', 'question', 'the', 'encoding/json', 'package', 'is', 'probably', 'the', 'closest', 'you', 'will', 'find', 'to', 'a', 'go', 'data', 'pretty', 'printer.', ""I'm"", 'not', 'sure', 'you', 'really', 'need', 'it', 'though.', 'One', 'of', 'the', 'reasons', 'Data::Dumper', 'was', 'awesome', 'in', 'perl', 'is', 'because', 'many', 'times', 'you', 'really', ""didn't"", 'know', 'the', 'structure', 'of', 'the', 'data', 'you', 'were', 'consuming', 'without', 'visually', 'inspecting', 'it.', 'With', 'go', 'though', 'everything', 'is', 'a', 'specific', 'type', 'and', 'every', 'specific', 'type', 'has', 'a', 'specific', 'structure.', 'If', 'you', 'want', 'to', 'know', 'what', 'the', 'data', 'will', 'look', 'like', 'then', 'you', 'probably', 'just', 'need', 'to', 'look', 'at', ""it's"", 'definition.', 'Some', 'other', 'tools', 'you', 'should', 'look', 'at', 'include:', 'fmt.Println(""%#v"", data)', 'will', 'print', 'the', 'data', 'in', 'go-syntax', 'form.', 'fmt.Println(""%T"", data)', 'will', 'print', 'the', ""data's"", 'type', 'in', 'go-syntax', 'form.', 'More', 'fmt', 'format', 'string', 'options', 'are', 'documented', 'here:', 'http://golang.org/pkg/fmt/']"
83,12540134," will output the values, while %+v will add field names (for a struct - no difference if its a map, %v will output both keys and values), and %#v will output type information too.
","[""I'm"", 'not', 'familiar', 'with', 'Perl', 'and', 'Dumper,', 'but', 'from', 'what', 'I', 'understand', 'of', 'your', 'post', 'and', 'the', 'related', 'C', 'post', '(and', 'the', 'very', 'name', 'of', 'the', 'function!),', 'it', 'outputs', 'the', 'content', 'of', 'the', 'data', 'structure.', 'You', 'can', 'do', 'this', 'using', 'the', '%v', 'verb', 'of', 'the', 'fmt', 'package.', 'I', 'assume', 'your', 'JSON', 'data', 'is', 'decoded', 'into', 'a', 'struct', 'or', 'a', 'map.', 'Using', 'fmt.Printf(""%v"", json_obj)', 'will', 'output', 'the', 'values,', 'while', '%+v', 'will', 'add', 'field', 'names', '(for', 'a', 'struct', '-', 'no', 'difference', 'if', 'its', 'a', 'map,', '%v', 'will', 'output', 'both', 'keys', 'and', 'values),', 'and', '%#v', 'will', 'output', 'type', 'information', 'too.']"
84,12562062,"iter.All() retrieves the whole result set at once into a slice.  If you just want one row, use iter.Next().  See https://groups.google.com/forum/#!msg/mgo-users/yUGZi70ik9Y/J8ktshJgF7QJ
","['iter.All()', 'retrieves', 'the', 'whole', 'result', 'set', 'at', 'once', 'into', 'a', 'slice.', 'If', 'you', 'just', 'want', 'one', 'row,', 'use', 'iter.Next().', 'See', 'https://groups.google.com/forum/#!msg/mgo-users/yUGZi70ik9Y/J8ktshJgF7QJ']"
85,12566045,"

or alternatively if you just want the first one:
notes[0].Title should work as well.

A slice of structs can't be indexed as if it were a struct itself because it isn't a struct.
","['It', 'looks', 'like', ""it's"", 'working', 'to', 'me.', 'notes', 'is', 'a', 'slice', 'of', 'structs', 'as', 'you', 'indicated.', 'for', '_', ',', 'n', ':=', 'range', 'notes', '{', 'n', '.', 'Title', '// do something with title', 'n', '.', 'Url', '// do something with url', '}', 'or', 'alternatively', 'if', 'you', 'just', 'want', 'the', 'first', 'one:', 'notes[0].Title', 'should', 'work', 'as', 'well.', 'A', 'slice', 'of', 'structs', ""can't"", 'be', 'indexed', 'as', 'if', 'it', 'were', 'a', 'struct', 'itself', 'because', 'it', ""isn't"", 'a', 'struct.']"
86,12568984,"

using a range statement on a slice returns pairs of the form i, v, where i is the index in the slice, and v is the item at the index in that slice.  Since you omitted the second value, you're looping on indexes, not on Note values.

It's in the RangeClause section of the spec: http://golang.org/ref/spec#RangeClause
","['your', 'problem', 'is', 'here:', 'for', 'note', ':=', 'range', 'notes', '{', 'fmt.Println(note.Title)', '}', 'it', 'should', 'read:', 'for', '_', ',', 'note', ':=', 'range', 'notes', '{', 'fmt.Println(note.Title)', '}', 'using', 'a', 'range', 'statement', 'on', 'a', 'slice', 'returns', 'pairs', 'of', 'the', 'form', 'i,', 'v,', 'where', 'i', 'is', 'the', 'index', 'in', 'the', 'slice,', 'and', 'v', 'is', 'the', 'item', 'at', 'the', 'index', 'in', 'that', 'slice.', 'Since', 'you', 'omitted', 'the', 'second', 'value,', ""you're"", 'looping', 'on', 'indexes,', 'not', 'on', 'Note', 'values.', ""It's"", 'in', 'the', 'RangeClause', 'section', 'of', 'the', 'spec:', 'http://golang.org/ref/spec#RangeClause']"
87,12574928,"I'm not familiar with go, but I'd guess that go version ignores the loop since the body of the loop does nothing.  On the other hand, in the python version, you are incrementing x in the body of the loop so it's probably actually executing the loop.
","['using', 'a', 'range', 'statement', 'on', 'a', 'slice', 'returns', 'pairs', 'of', 'the', 'form', 'i,', 'v,', 'where', 'i', 'is', 'the', 'index', 'in', 'the', 'slice,', 'and', 'v', 'is', 'the', 'item', 'at', 'the', 'index', 'in', 'that', 'slice.', 'Since', 'you', 'omitted', 'the', 'second', 'value,', ""you're"", 'looping', 'on', 'indexes,', 'not', 'on', 'Note', 'values.', ""It's"", 'in', 'the', 'RangeClause', 'section', 'of', 'the', 'spec:', 'http://golang.org/ref/spec#RangeClause']"
88,12575001,"This scenario will highly favor decent natively-compiled statically-typed languages. Natively compiled statically-typed languages are capable of emitting a very trivial loop of say, 4-6 CPU opcodes that utilizes simple check-condition for termination. This loop has effectively zero branch prediction misses and can be effectively thought of as performing an increment every CPU cycle (this isn't entirely true, but..)

Python implementations have to do significantly more work, primarily due to the dynamic typing. Python must make several different calls (internal and external) just to add two ints together. In Python it must call __add__ (it is effectively i = i.__add__(1), but this syntax will only work in Python 3.x), which in turn has to check the type of the value passed (to make sure it is an int), then it adds the integer values (extracting them from both of the objects), and then the new integer value is wrapped up again in a new object. Finally it re-assings the new object to the local variable. That's significantly more work than a single opcode to increment, and doesn't even address the loop itself - by comparison, the Go/native version is likely only incrementing a register by side-effect.

Java will fair much better in a trivial benchmark like this and will likely be fairly close to Go; the JIT and static-typing of the counter variable can ensure this (it uses a special integer add JVM instruction). Once again, Python has no such advantage. Now, there are some implementations like PyPy/RPython, which run a static-typing phase and should favor much better than CPython here ..
","['using', 'a', 'range', 'statement', 'on', 'a', 'slice', 'returns', 'pairs', 'of', 'the', 'form', 'i,', 'v,', 'where', 'i', 'is', 'the', 'index', 'in', 'the', 'slice,', 'and', 'v', 'is', 'the', 'item', 'at', 'the', 'index', 'in', 'that', 'slice.', 'Since', 'you', 'omitted', 'the', 'second', 'value,', ""you're"", 'looping', 'on', 'indexes,', 'not', 'on', 'Note', 'values.', ""It's"", 'in', 'the', 'RangeClause', 'section', 'of', 'the', 'spec:', 'http://golang.org/ref/spec#RangeClause']"
89,12575041,"It is possible that the compiler realized that you didn't use the ""i"" variable after the loop, so it optimized the final code by removing the loop.

Even if you used it afterwards, the compiler is probably smart enough to substitute the loop with

i = 1000000000;


Hope this helps =)
","['using', 'a', 'range', 'statement', 'on', 'a', 'slice', 'returns', 'pairs', 'of', 'the', 'form', 'i,', 'v,', 'where', 'i', 'is', 'the', 'index', 'in', 'the', 'slice,', 'and', 'v', 'is', 'the', 'item', 'at', 'the', 'index', 'in', 'that', 'slice.', 'Since', 'you', 'omitted', 'the', 'second', 'value,', ""you're"", 'looping', 'on', 'indexes,', 'not', 'on', 'Note', 'values.', ""It's"", 'in', 'the', 'RangeClause', 'section', 'of', 'the', 'spec:', 'http://golang.org/ref/spec#RangeClause']"
90,12575133,"

...you'll see it run about twice as fast.  If you find loop counters to actually be a major bottleneck in your program, it might be time to investigate a new way of solving the problem.
","[""You've"", 'got', 'two', 'things', 'at', 'work', 'here.', 'The', 'first', 'of', 'which', 'is', 'that', 'Go', 'is', 'compiled', 'to', 'machine', 'code', 'and', 'run', 'directly', 'on', 'the', 'CPU', 'while', 'Python', 'is', 'compiled', 'to', 'bytecode', 'run', 'against', 'a', '(particularly', 'slow)', 'VM.', 'The', 'second,', 'and', 'more', 'significant,', 'thing', 'impacting', 'performance', 'is', 'that', 'the', 'semantics', 'of', 'the', 'two', 'programs', 'are', 'actually', 'significantly', 'different.', 'The', 'Go', 'version', 'makes', 'a', '""box""', 'called', '""x""', 'that', 'holds', 'a', 'number', 'and', 'increments', 'that', 'by', '1', 'on', 'each', 'pass', 'through', 'the', 'program.', 'The', 'Python', 'version', 'actually', 'has', 'to', 'create', 'a', 'new', '""box""', '(int', 'object)', 'on', 'each', 'cycle', '(and,', 'eventually,', 'has', 'to', 'throw', 'them', 'away).', 'We', 'can', 'demonstrate', 'this', 'by', 'modifying', 'your', 'programs', 'slightly:', 'package', 'main', 'import', '(', '""fmt""', ')', 'func', 'main', '()', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '10', ';', 'i', '++', '{', 'fmt.Printf(""%d %p\\n"", i, &i)', '}', '}', '...and:', 'x', '=', '0', ';', 'while', 'x', '<', '10', ':', 'x', '+=', '1', 'print', 'x', ',', 'id', '(', 'x', ')', 'This', 'is', 'because', 'Go,', 'due', 'to', ""it's"", 'C', 'roots,', 'takes', 'a', 'variable', 'name', 'to', 'refer', 'to', 'a', 'place,', 'where', 'Python', 'takes', 'variable', 'names', 'to', 'refer', 'to', 'things.', 'Since', 'an', 'integer', 'is', 'considered', 'a', 'unique,', 'immutable', 'entity', 'in', 'python,', 'we', 'must', 'constantly', 'make', 'new', 'ones.', 'Python', 'should', 'be', 'slower', 'than', 'Go', 'but', ""you've"", 'picked', 'a', 'worst-case', 'scenario', '-', 'in', 'the', 'Benchmarks', 'Game,', 'we', 'see', 'go', 'being,', 'on', 'average,', 'about', '25x', 'times', 'faster', '(100x', 'in', 'the', 'worst', 'case).', ""You've"", 'probably', 'read', 'that,', 'if', 'your', 'Python', 'programs', 'are', 'too', 'slow,', 'you', 'can', 'speed', 'them', 'up', 'by', 'moving', 'things', 'into', 'C.', 'Fortunately,', 'in', 'this', 'case,', ""somebody's"", 'already', 'done', 'this', 'for', 'you.', 'If', 'you', 'rewrite', 'your', 'empty', 'loop', 'to', 'use', 'xrange()', 'like', 'so:', 'for', 'x', 'in', 'xrange', '(', '1000000000', '):', 'pass', 'print', '""Done.""', ""...you'll"", 'see', 'it', 'run', 'about', 'twice', 'as', 'fast.', 'If', 'you', 'find', 'loop', 'counters', 'to', 'actually', 'be', 'a', 'major', 'bottleneck', 'in', 'your', 'program,', 'it', 'might', 'be', 'time', 'to', 'investigate', 'a', 'new', 'way', 'of', 'solving', 'the', 'problem.']"
91,12575141,"One billion is not a very big number. Any reasonably modern machine should be able to do this in a few seconds at most, if it's able to do the work with native types. I verified this by writing an equivalent C program, reading the assembly to make sure that it actually was doing addition, and timing it (it completes in about 1.8 seconds on my machine).

Python, however, doesn't have a concept of natively typed variables (or meaningful type annotations at all), so it has to do hundreds of times as much work in this case. In short, the answer to your headline question is ""yes"". Go really can be that much faster than Python, even without any kind of compiler trickery like optimizing away a side-effect-free loop.
","['One', 'billion', 'is', 'not', 'a', 'very', 'big', 'number.', 'Any', 'reasonably', 'modern', 'machine', 'should', 'be', 'able', 'to', 'do', 'this', 'in', 'a', 'few', 'seconds', 'at', 'most,', 'if', ""it's"", 'able', 'to', 'do', 'the', 'work', 'with', 'native', 'types.', 'I', 'verified', 'this', 'by', 'writing', 'an', 'equivalent', 'C', 'program,', 'reading', 'the', 'assembly', 'to', 'make', 'sure', 'that', 'it', 'actually', 'was', 'doing', 'addition,', 'and', 'timing', 'it', '(it', 'completes', 'in', 'about', '1.8', 'seconds', 'on', 'my', 'machine).', 'Python,', 'however,', ""doesn't"", 'have', 'a', 'concept', 'of', 'natively', 'typed', 'variables', '(or', 'meaningful', 'type', 'annotations', 'at', 'all),', 'so', 'it', 'has', 'to', 'do', 'hundreds', 'of', 'times', 'as', 'much', 'work', 'in', 'this', 'case.', 'In', 'short,', 'the', 'answer', 'to', 'your', 'headline', 'question', 'is', '""yes"".', 'Go', 'really', 'can', 'be', 'that', 'much', 'faster', 'than', 'Python,', 'even', 'without', 'any', 'kind', 'of', 'compiler', 'trickery', 'like', 'optimizing', 'away', 'a', 'side-effect-free', 'loop.']"
92,12576824,"

~97% speedup!

Clarification for 3 people who didn't ""get it"". The Python language itself isn't slow. The CPython implementation is a relatively straight forward way of running the code. Pypy is another implementation of the language that does many tricky (especiallt the JIT) things that can make enormous differences. Directly answering the question in the title - Go isn't ""that much"" faster than Python, Go is that much faster than CPython.   

Having said that, the code samples aren't really doing the same thing. Python needs to instantiate 1000000000 of its int objects. Go is just incrementing one memory location.
","['pypy', 'actually', 'does', 'an', 'impressive', 'job', 'of', 'speeding', 'up', 'this', 'loop', 'def', 'main', '():', 'x', '=', '0', 'while', 'x', '<', '1000000000', ':', 'x', '+=', '1', 'if', '__name__', '==', '""__main__""', ':', 's', '=', 'time.time()', 'main', '()', 'print', 'time.time()', '-', 's', '$', 'python', 'count', '.', 'py', '44', '.', '221405983', '$', 'pypy', 'count', '.', 'py', '1', '.', '03511', '0', '95047', '~97%', 'speedup!', 'Clarification', 'for', '3', 'people', 'who', ""didn't"", '""get', 'it"".', 'The', 'Python', 'language', 'itself', ""isn't"", 'slow.', 'The', 'CPython', 'implementation', 'is', 'a', 'relatively', 'straight', 'forward', 'way', 'of', 'running', 'the', 'code.', 'Pypy', 'is', 'another', 'implementation', 'of', 'the', 'language', 'that', 'does', 'many', 'tricky', '(especiallt', 'the', 'JIT)', 'things', 'that', 'can', 'make', 'enormous', 'differences.', 'Directly', 'answering', 'the', 'question', 'in', 'the', 'title', '-', 'Go', ""isn't"", '""that', 'much""', 'faster', 'than', 'Python,', 'Go', 'is', 'that', 'much', 'faster', 'than', 'CPython.', 'Having', 'said', 'that,', 'the', 'code', 'samples', ""aren't"", 'really', 'doing', 'the', 'same', 'thing.', 'Python', 'needs', 'to', 'instantiate', '1000000000', 'of', 'its', 'int', 'objects.', 'Go', 'is', 'just', 'incrementing', 'one', 'memory', 'location.']"
93,12613709,"According to the documentation for html/template the second argument to Execute should be the data you want to put in the template.

Add a {{.}} somewhere in your template and then pass the string you want printed in as the second argument. It should get rendered as part of the template.
","['According', 'to', 'the', 'documentation', 'for', 'html/template', 'the', 'second', 'argument', 'to', 'Execute', 'should', 'be', 'the', 'data', 'you', 'want', 'to', 'put', 'in', 'the', 'template.', 'Add', 'a', '{{.}}', 'somewhere', 'in', 'your', 'template', 'and', 'then', 'pass', 'the', 'string', 'you', 'want', 'printed', 'in', 'as', 'the', 'second', 'argument.', 'It', 'should', 'get', 'rendered', 'as', 'part', 'of', 'the', 'template.']"
94,12615105,"

The after value will be blank.
","['Writing', 'to', 'the', 'ResponseWriter', '(by', 'calling', 'Execute)', 'before', 'reading', 'the', 'value', 'from', 'the', 'request', 'is', 'clearing', 'it', 'out.', 'You', 'can', 'see', 'this', 'in', 'action', 'if', 'you', 'use', 'this', 'request', 'handler:', 'func', 'GeneralHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'fmt.Println(r.Method)', 'fmt.Println(r.URL)', 'fmt.Println(""before"",r.FormValue(""username""))', 'index.Execute(w, nil)', 'if', 'r', '.', 'Method', '==', '""POST""', '{', 'fmt.Println(""after"",r.FormValue(""username""))', '}', '}', 'This', 'will', 'print', 'out', 'before', 'and', 'after.', 'However,', 'in', 'this', 'case:', 'func', 'GeneralHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'fmt.Println(r.Method)', 'fmt.Println(r.URL)', 'index.Execute(w, nil)', 'if', 'r', '.', 'Method', '==', '""POST""', '{', 'fmt.Println(""after"",r.FormValue(""username""))', '}', '}', 'The', 'after', 'value', 'will', 'be', 'blank.']"
95,12664785,"

Where c is your appengine.Context
","['I', 'never', 'tried', 'Go', 'but', ""I'll"", 'give', 'it', 'a', 'shot:', 'k', ':=', 'datastore.NewKey(c, ""Activity"", """", id, nil)', 'q', ':=', 'datastore.NewQuery(""Article"").Filter(""__key__ ="", k)', 'Where', 'c', 'is', 'your', 'appengine.Context']"
96,12888854,"Go uses a separate SDK from the python version you have installed. Please download it here:

Google App Engine SDK for Go

Be sure to execute it's dev_appserver.py script when you start the server.
","['Where', 'c', 'is', 'your', 'appengine.Context']"
97,12889086,"Extending the answer from Kyle, this is what I did to get it working:


Download the SDK
Extract it to /Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine
Close (if its open) GAE Launcher and re-run it
Start your app and open it in the browser

","['Extending', 'the', 'answer', 'from', 'Kyle,', 'this', 'is', 'what', 'I', 'did', 'to', 'get', 'it', 'working:', 'Download', 'the', 'SDK', 'Extract', 'it', 'to', '/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine', 'Close', '(if', 'its', 'open)', 'GAE', 'Launcher', 'and', 're-run', 'it', 'Start', 'your', 'app', 'and', 'open', 'it', 'in', 'the', 'browser']"
98,13020503,"None of the fmt print verbs support thousands separators.  
","['None', 'of', 'the', 'fmt', 'print', 'verbs', 'support', 'thousands', 'separators.']"
99,13021942,"
","['I', 'wrote', 'a', 'library', 'for', 'this', 'as', 'well', 'as', 'a', 'few', 'other', 'human-representation', 'concerns.', 'Example', 'results:', '0', '->', '0', '100', '->', '100', '1000', '->', '1', ',', '0', '0', '0', '1000000000', '->', '1', ',', '0', '0', '0', ',', '0', '0', '0', ',', '0', '0', '0', '-', '100000', '->', '-', '100', ',', '0', '0', '0', 'Example', 'Usage:', 'fmt.Printf(""You owe $%s.\\n"", humanize.Comma(6582491))']"
100,13292854,"

Try it here: http://play.golang.org/p/vKfri-h4Cp
","['You', 'cannot', 'make', 'partial', 'types.', 'But', 'you', 'can', 'define', 'an', 'interface', 'which', 'serves', 'your', 'purpose:', 'type', 'SortableKeysValue', 'interface', '{', '//', 'a', 'function', 'that', 'returns', 'the', 'strings', 'to', 'be', 'sorted', 'Keys', '()', '[]', 'string', '}', 'func', 'SortedKeys', '(', 's', 'SortableKeysValue', ')', '[]', 'string', '{', 'keys', ':=', 's.Keys()', 'sort.Strings(keys)', 'return', 'keys', '}', 'type', 'MyMap', 'map', '[', 'string', ']', 'string', 'func', '(', 's', 'MyMap', ')', 'Keys', '()', '[]', 'string', '{', 'keys', ':=', 'make', '([]', 'string', ',', '0', ',', 'len', '(', 's', '))', 'for', 'k', ',', '_', ':=', 'range', 's', '{', 'keys', '=', 'append', '(', 'keys', ',', 'k', ')', '}', 'return', 'keys', '}', 'Try', 'it', 'here:', 'http://play.golang.org/p/vKfri-h4Cp']"
101,13330293,"Matching arbitrarily nested parentheses correctly is not possible with regular expressions because arbitrary (recursive) nesting cannot be described by a regular language.

Some modern regex flavor do support recursion (Perl, PCRE) or balanced matching (.NET), but Go is not one of them (the docs explicitly say that Perl's (?R) construct is not supported by the RE2 library that Go's regex package appears to be based on). You need to build a recursive descent parser, not a regex.
","['Try', 'it', 'here:', 'http://play.golang.org/p/vKfri-h4Cp']"
102,13514395,"


  ReadFile reads the file named by filename and returns the contents. A successful call
  returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat
  an EOF from Read as an error to be reported.


You will get a []byte instead of a string. It can be converted if really necessary:

s := string(buf)

","['Use', 'ioutil.ReadFile:', 'func', 'ReadFile', '(', 'filename', 'string', ')', '([]', 'byte', ',', 'error', ')', 'ReadFile', 'reads', 'the', 'file', 'named', 'by', 'filename', 'and', 'returns', 'the', 'contents.', 'A', 'successful', 'call', 'returns', 'err', '==', 'nil,', 'not', 'err', '==', 'EOF.', 'Because', 'ReadFile', 'reads', 'the', 'whole', 'file,', 'it', 'does', 'not', 'treat', 'an', 'EOF', 'from', 'Read', 'as', 'an', 'error', 'to', 'be', 'reported.', 'You', 'will', 'get', 'a', '[]byte', 'instead', 'of', 'a', 'string.', 'It', 'can', 'be', 'converted', 'if', 'really', 'necessary:', 's', ':=', 'string(buf)']"
103,13515526,"

This opens each file, copies its contents into buf, then closes the file.  Depending on your situation you may not actually need to convert it, the last line is just to show that buf.Bytes() has the data you're looking for.
","['I', 'think', 'the', 'best', 'thing', 'to', 'do,', 'if', ""you're"", 'really', 'concerned', 'about', 'the', 'efficiency', 'of', 'concatenating', 'all', 'of', 'these', 'files,', 'is', 'to', 'copy', 'them', 'all', 'into', 'the', 'same', 'bytes', 'buffer.', 'buf', ':=', 'bytes.NewBuffer(nil)', 'for', '_', ',', 'filename', ':=', 'range', 'filenames', '{', 'f', ',', '_', ':=', 'os.Open(filename)', '// Error handling elided for brevity.', 'io.Copy(buf, f)', '// Error handling elided for brevity.', 'f.Close()', '}', 's', ':=', 'string', '(', 'buf.Bytes())', 'This', 'opens', 'each', 'file,', 'copies', 'its', 'contents', 'into', 'buf,', 'then', 'closes', 'the', 'file.', 'Depending', 'on', 'your', 'situation', 'you', 'may', 'not', 'actually', 'need', 'to', 'convert', 'it,', 'the', 'last', 'line', 'is', 'just', 'to', 'show', 'that', 'buf.Bytes()', 'has', 'the', 'data', ""you're"", 'looking', 'for.']"
104,13544815,"

Your idea of copying pkg.a does not work because pkg.a was not built with gccgo.
","['The', 'simplest', 'way', 'is', 'to', 'use', 'the', 'go', 'command', 'from', 'the', 'gc', 'distribution,', 'and', 'run', 'go', 'build', '-', 'compiler', 'gccgo', '.', 'Your', 'idea', 'of', 'copying', 'pkg.a', 'does', 'not', 'work', 'because', 'pkg.a', 'was', 'not', 'built', 'with', 'gccgo.']"
105,13815259,"My mistake i have to block the main function with e.g Scanln. Without it the program terminates before the goroutines can be executed.
","['My', 'mistake', 'i', 'have', 'to', 'block', 'the', 'main', 'function', 'with', 'e.g', 'Scanln.', 'Without', 'it', 'the', 'program', 'terminates', 'before', 'the', 'goroutines', 'can', 'be', 'executed.']"
106,13846899,"
","['Scanf', 'is', 'a', 'bit', 'finicky', 'in', 'that', 'it', 'uses', 'spaces', 'as', 'a', 'separator,', 'and', '(at', 'least', 'for', 'me)', 'is', 'rather', 'unintuitive.', 'Bufio', 'does', 'a', 'good', 'job', 'of', 'abstracting', 'some', 'of', 'that:', 'func', 'credentials', '()', '(', 'string', ',', 'string', ')', '{', 'reader', ':=', 'bufio.NewReader(os.Stdin)', 'fmt.Print(""Enter Username: "")', 'username', ',', '_', ':=', ""reader.ReadString('\\n')"", 'fmt.Print(""Enter Password: "")', 'password', ',', '_', ':=', ""reader.ReadString('\\n')"", 'return', 'strings.TrimSpace(username), strings.TrimSpace(password) // ReadString()', 'leaves', 'a', 'trailing', 'newline', 'character', '}']"
107,13870865,"
  
  FormatInt returns the string representation of i in the given base, for 2 = 10. 

","['The', 'strconv', 'package', 'has', 'FormatInt,', 'which', 'accepts', 'an', 'int64', 'and', 'lets', 'you', 'specify', 'the', 'base.', 'n', ':=', 'int64', '(', '123', ')', 'fmt.Println(strconv.FormatInt(n, 2))', '// 1111011', 'DEMO:', 'http://play.golang.org/p/leGVAELMhv', 'http://golang.org/pkg/strconv/#FormatInt', 'func', 'FormatInt', '(', 'i', 'int64', ',', 'base', 'int', ')', 'string', 'FormatInt', 'returns', 'the', 'string', 'representation', 'of', 'i', 'in', 'the', 'given', 'base,', 'for', '2', '=', '10.']"
108,14061714,"

and time.Tick(1e8) returns a read only channel.

Read more in the language spec here
","['Channels', 'can', 'have', 'a', 'type', 'indicating', 'whether', 'it', 'is', 'readonly,', 'writeonly', 'or', 'both.', 'Indicating', 'a', 'channel', 'direction', 'is', 'done', 'with', 'So', 'the', 'in', 'is', 'part', 'of', 'the', 'type,', 'chan', 'time', '.', 'Time', '//Would be a read/writable channel', 'chan', '<-', 'time', '.', 'Time', '// Would be a write only channel', '<-', 'chan', 'time', '.', 'Time', '// Would be a read only channel', 'and', 'time.Tick(1e8)', 'returns', 'a', 'read', 'only', 'channel.', 'Read', 'more', 'in', 'the', 'language', 'spec', 'here']"
109,14077292,"

defines a function with a channel output parameter - i.e. the writable end of a channel. Both these functions can have the whole channel passed as their actual parameter, or just the end they need.

The same general principle applies when channels are used as local variables or as fields in structs.

It's good practice to use the channel-end syntax wherever possible, because the compiler will be able to check more thoroughly that you've written what you intended.

Interestingly, the occam programming language also has equivalent syntax to mark which end of a channel is which.
","['A', 'good', 'way', 'to', 'think', 'of', 'channels', 'is', 'as', 'pipes', 'with', 'two', 'ends.', 'One', 'end', 'is', 'where', 'the', 'events', 'flow', 'in', 'and', 'the', 'other', 'where', 'they', 'flow', 'out.', 'So', 'declaring', 'a', 'channel,', 'e.g.', 'var', 'c', '=', 'make', '(', 'chan', 'int', ')', 'creates', 'a', 'channel', 'as', 'a', 'whole', '-', 'i.e.', 'with', 'both', 'ends.', 'Conversely,', 'func', 'consume', '(', 'c', '<-', 'chan', 'int', ')', '{', '...', '}', 'defines', 'a', 'function', 'with', 'a', 'channel', 'input', 'parameter', '-', 'i.e.', 'the', 'readable', 'end', 'of', 'a', 'channel,', 'and', 'func', 'generate', '(', 'c', 'chan', '<-', 'int', ')', '{', '...', '}', 'defines', 'a', 'function', 'with', 'a', 'channel', 'output', 'parameter', '-', 'i.e.', 'the', 'writable', 'end', 'of', 'a', 'channel.', 'Both', 'these', 'functions', 'can', 'have', 'the', 'whole', 'channel', 'passed', 'as', 'their', 'actual', 'parameter,', 'or', 'just', 'the', 'end', 'they', 'need.', 'The', 'same', 'general', 'principle', 'applies', 'when', 'channels', 'are', 'used', 'as', 'local', 'variables', 'or', 'as', 'fields', 'in', 'structs.', ""It's"", 'good', 'practice', 'to', 'use', 'the', 'channel-end', 'syntax', 'wherever', 'possible,', 'because', 'the', 'compiler', 'will', 'be', 'able', 'to', 'check', 'more', 'thoroughly', 'that', ""you've"", 'written', 'what', 'you', 'intended.', 'Interestingly,', 'the', 'occam', 'programming', 'language', 'also', 'has', 'equivalent', 'syntax', 'to', 'mark', 'which', 'end', 'of', 'a', 'channel', 'is', 'which.']"
110,14152326,"I don't see you populate the ID field anywhere so of course it's going to be 0 since that's the zero value for that field. AppEngine won't modify your struct when it stores it. The newly created key you get back when you Put the struct contains the generated IntId() when an incomplete key is used. I think your confusion was caused by assuming something the docs never said. Namely that AppEngine would auto-populate ID fields in your stored data for you.

Since in your case you want the ID field of the struct to store the id used in the key you probably want to generate you're own unique ids for when you create a Key instead of using incomplete keys.

When the doc says a string can be zero it's referring to the zero value of a string type which would the empty string """". You can read more about zero values here: http://golang.org/ref/spec#The_zero_value
","['I', ""don't"", 'see', 'you', 'populate', 'the', 'ID', 'field', 'anywhere', 'so', 'of', 'course', ""it's"", 'going', 'to', 'be', '0', 'since', ""that's"", 'the', 'zero', 'value', 'for', 'that', 'field.', 'AppEngine', ""won't"", 'modify', 'your', 'struct', 'when', 'it', 'stores', 'it.', 'The', 'newly', 'created', 'key', 'you', 'get', 'back', 'when', 'you', 'Put', 'the', 'struct', 'contains', 'the', 'generated', 'IntId()', 'when', 'an', 'incomplete', 'key', 'is', 'used.', 'I', 'think', 'your', 'confusion', 'was', 'caused', 'by', 'assuming', 'something', 'the', 'docs', 'never', 'said.', 'Namely', 'that', 'AppEngine', 'would', 'auto-populate', 'ID', 'fields', 'in', 'your', 'stored', 'data', 'for', 'you.', 'Since', 'in', 'your', 'case', 'you', 'want', 'the', 'ID', 'field', 'of', 'the', 'struct', 'to', 'store', 'the', 'id', 'used', 'in', 'the', 'key', 'you', 'probably', 'want', 'to', 'generate', ""you're"", 'own', 'unique', 'ids', 'for', 'when', 'you', 'create', 'a', 'Key', 'instead', 'of', 'using', 'incomplete', 'keys.', 'When', 'the', 'doc', 'says', 'a', 'string', 'can', 'be', 'zero', ""it's"", 'referring', 'to', 'the', 'zero', 'value', 'of', 'a', 'string', 'type', 'which', 'would', 'the', 'empty', 'string', '"""".', 'You', 'can', 'read', 'more', 'about', 'zero', 'values', 'here:', 'http://golang.org/ref/spec#The_zero_value']"
111,14152356,"

Not tested, but you get the picture... otherwise ID will always be 0.
","['I', ""don't"", 'see', 'where', 'you', 'actually', 'change', 'the', 'value', 'of', 'ID', 'prior', 'to', 'the', 'Put?', 'As', 'far', 'as', 'I', 'can', 'tell,', ""it's"", 'always', 'going', 'to', 'be', '0.', 'I', 'would', 'have', 'expected', 'to', 'see', 'something', 'like:', '//', 'PERSIST!', 'putKey', ',', 'e', ':=', 'datastore.Put( c, key, participant)', 'if', 'e', '!=', 'nil', '{', '//', '...', '}', '//', '...', 'participant', '.', 'ID', '=', 'putKey.IntID()', 'putKey', ',', 'e', '=', 'datastore.Put(c, putKey, participant)', 'Not', 'tested,', 'but', 'you', 'get', 'the', 'picture...', 'otherwise', 'ID', 'will', 'always', 'be', '0.']"
112,14152422,"
","['Without', 'seeing', 'your', 'code,', 'the', 'best', 'I', 'can', 'do', 'is', 'provide', 'an', 'example', 'that', 'shows', 'your', 'required', 'functionality.', 'If', 'I', 'had', 'to', 'take', 'a', 'guess,', ""I'd"", 'say', 'the', 'data', 'you', 'were', 'passing', 'in', 'was', 'a', 'string,', 'not', 'a', 'string', 'pointer.', 'A', 'string', 'cannot', 'have', 'a', 'value', 'of', 'nil/null,', 'only', 'a', 'string', 'pointer', 'can.', 'Though', 'that', 'would', 'yield', 'a', '"""",', 'not', 'a', '""null"",', '(as', 'demonstrated', 'here),', 'so', 'I', 'can', 'only', 'imagine', 'that', 'this', 'is', 'something', 'weird', ""you're"", 'doing', 'in', 'your', 'code.', 'To', 'prevent', 'link-rot,', ""I've"", 'duplicated', 'the', 'code', 'examples', 'below,', 'though', ""it's"", 'worth', 'clicking', 'through', 'the', 'links', 'to', 'see', 'their', 'output.', 'Required', 'Functionality:', 'package', 'main', 'import', '(', '""log""', '""os""', '""html/template""', ')', 'type', 'TemplateData', 'struct', '{', 'Email', '*', 'string', '}', 'func', 'main', '()', '{', 'const', 'temp', '=', '""var email = {{.Email}};\\n""', 't', ':=', 'template.Must(template.New(""email_template"").Parse(temp))', 'email', ':=', '""somebody@somewhere.com""', 'err', ':=', 't', '.', 'Execute', '(', 'os', '.', 'Stdout', ',', 'TemplateData', '{', 'Email', ':', '&', 'email', ',', '})', 'if', 'err', '!=', 'nil', '{', 'log.Println(""executing template:"", err)', '}', 'err', '=', 't', '.', 'Execute', '(', 'os', '.', 'Stdout', ',', 'TemplateData', '{', 'Email', ':', 'nil', ',', '})', 'if', 'err', '!=', 'nil', '{', 'log.Println(""executing template:"", err)', '}', '}', 'Trying', 'to', 'use', 'a', '""null""', 'string:', 'package', 'main', 'import', '(', '""log""', '""os""', '""html/template""', ')', 'type', 'TemplateData', 'struct', '{', 'Email', 'string', '}', 'func', 'main', '()', '{', 'const', 'temp', '=', '""var email = {{.Email}};\\n""', 't', ':=', 'template.Must(template.New(""email_template"").Parse(temp))', 'email', ':=', '""somebody@somewhere.com""', 'err', ':=', 't', '.', 'Execute', '(', 'os', '.', 'Stdout', ',', 'TemplateData', '{', 'Email', ':', 'email', ',', '})', 'if', 'err', '!=', 'nil', '{', 'log.Println(""executing template:"", err)', '}', 'err', '=', 't', '.', 'Execute', '(', 'os', '.', 'Stdout', ',', 'TemplateData', '{', '})', 'if', 'err', '!=', 'nil', '{', 'log.Println(""executing template:"", err)', '}', '}']"
113,14234709,". This is not mentioned in the README.md.
","['I', 'tried', 'to', 'follow', 'exactly', 'all', 'of', 'the', 'Manual', 'Installation', 'steps', 'with', 'no', 'problems', 'whatsoever.', '(', '12', ':', '49', ')', 'jnml', 'fsc', '-', 'r550', ':', '$', 'go', 'version', 'go', 'version', 'go', '1', '.', '0', '.', '3', '(', '12', ':', '49', ')', 'jnml', 'fsc', '-', 'r550', ':', '$', 'go', 'env', 'GOARCH', '=', '""amd64""', 'GOBIN', '=', '""/home/jnml/bin""', 'GOCHAR', '=', '""6""', 'GOEXE', '=', '""""', 'GOGCCFLAGS', '=', '""-g -O2 -fPIC -m64 -pthread""', 'GOHOSTARCH', '=', '""amd64""', 'GOHOSTOS', '=', '""linux""', 'GOOS', '=', '""linux""', 'GOPATH', '=', '""/home/jnml""', 'GOROOT', '=', '""/home/jnml/go""', 'GOTOOLDIR', '=', '""/home/jnml/go/pkg/tool/linux_amd64""', 'CGO_ENABLED', '=', '""1""', '(', '12', ':', '49', ')', 'jnml', 'fsc', '-', 'r550', ':', '$', 'Note:', 'I', 'have', 'cloned', 'the', 'thrift4go', 'repository', 'into', '$', 'GOPATH/src/github.com/pomack/thrift4go', '.', 'This', 'is', 'not', 'mentioned', 'in', 'the', 'README.md.']"
114,14236499," example.
","['Struct', 'with', 'zero', 'fields', 'are', 'handy.', 'Structs', 'with', 'many', 'fields', 'are', 'handy', 'even', 'more.', 'Structs', 'with', 'exactly', 'one', 'field', 'are', 'a', 'bit', 'special', 'and', 'I', ""can't"", 'think', 'of', 'a', 'reasonably', '""good""', 'case', 'where', 'to', 'use', 'them', '-', 'even', 'though', 'they', 'are', 'seen', 'regularly', '""in', 'the', 'wild"".', 'I,', 'for', 'one,', ""don't"", 'use', 'them.', 'Anyway,', 'if', 'you', 'really', 'really', 'need', 'tighter/bulletproof', 'safety', 'about', 'the', 'DNAStrand', 'slice', 'content', '-', 'then', 'it', 'is', 'possible', 'to', 'to', 'use', 'the', 'single', 'field', 'struct', 'and', 'define', 'an', 'argument', 'checking', 'setter', 'method', 'for', 'this/such', 'named', 'type.', 'In', 'that', 'case,', 'if', 'the', 'definition', 'is', 'later', 'used', 'from', 'some', 'other', 'package,', ""there's"", 'no', 'way,', 'modulo', 'using', 'package', 'unsafe,', 'to', 'circumvent', 'the', 'checks', 'and', 'get', 'a', 'result', 'equivalent', 'to', 'your', 'DNAStrand', '{[]', 'byte', '(', '""foo bar""', ')}', 'example.']"
115,14244569,"

Since the nucleotide type is not exported users can't construct their own. You provide the only allowed instances of them in the exported consts so no user can provide their own new nucleotides.
","['Taking', 'your', 'specific', 'example', 'I', 'would', 'probably', 'do', 'something', 'like', 'this:', 'type', 'neucleotide', 'char', ""// unexported type users can't construct their own."", 'type', 'DNAStrand', '[]', 'neucleotide', ""// because users can't construct their own"", '//', 'nucleotides', 'they', 'also', ""can't"", 'construct', 'their', '//', 'own', 'DNAStrands.', 'const', '(', '//', 'These', 'are', 'exported', 'values', 'so', 'they', 'can', 'use', 'these', 'nucleotides', 'to', 'construct', 'a', '//', 'DNAStrand', 'with.', 'A', 'nucleotide', '=', ""'A'"", 'C', 'nucleotide', '=', ""'C'"", 'G', 'nudleotide', '=', ""'G'"", 'T', 'nucleotide', '=', ""'T'"", ')', '//', 'This', 'function', 'allows', 'them', 'to', 'actually', 'construct', 'a', 'DNAstrand', 'with', 'a', 'list', 'of', '//', 'nucleotides', 'from', 'the', 'constants', 'above.', 'func', 'New', '(', 'nts', '...', 'nucleotide', ')', 'DNAStrand', '{', 'return', 'nts', '}', 'Since', 'the', 'nucleotide', 'type', 'is', 'not', 'exported', 'users', ""can't"", 'construct', 'their', 'own.', 'You', 'provide', 'the', 'only', 'allowed', 'instances', 'of', 'them', 'in', 'the', 'exported', 'consts', 'so', 'no', 'user', 'can', 'provide', 'their', 'own', 'new', 'nucleotides.']"
116,14247900,"
","[""I'd"", 'use', 'type', 'DNAStrand', '[]', 'byte', 'because', ""it's"", 'simple,', 'and', 'because', 'I', 'can', 'use', 'regexps', 'on', 'it.', ""I'd"", 'probably', 'use', 'an', 'initialisation', 'function', 'that', 'checks', 'that', 'every', 'byte', 'is', 'in', 'ACGT', 'though.', 'var', 'validDNAStrandPat', '=', 'regexp.MustCompile(""[ACTG]*"")', 'func', 'DNAStrandForString', '(', 's', 'string', ')', 'DNAStrand', '{', 'if', '!', 'validDNAStrandPat.Match(s)', '{', 'panic', '(', '""Invalid DNA Strand.""', ')', '}', 'return', 'DNAStrand', '([]', 'byte', '(', 's', '))', '}']"
117,14249946,"Code examples would help. But from your question it sounds like you've hardcoded a path to a config file somewhere when you probably wanted to pass it in instead.

Change the function you are testing to take a parameter defining the config file and then in your test code pass a different path in than you use in the non test code. It's bad practice for your code to have a different path when testing vs production.
","['Code', 'examples', 'would', 'help.', 'But', 'from', 'your', 'question', 'it', 'sounds', 'like', ""you've"", 'hardcoded', 'a', 'path', 'to', 'a', 'config', 'file', 'somewhere', 'when', 'you', 'probably', 'wanted', 'to', 'pass', 'it', 'in', 'instead.', 'Change', 'the', 'function', 'you', 'are', 'testing', 'to', 'take', 'a', 'parameter', 'defining', 'the', 'config', 'file', 'and', 'then', 'in', 'your', 'test', 'code', 'pass', 'a', 'different', 'path', 'in', 'than', 'you', 'use', 'in', 'the', 'non', 'test', 'code.', ""It's"", 'bad', 'practice', 'for', 'your', 'code', 'to', 'have', 'a', 'different', 'path', 'when', 'testing', 'vs', 'production.']"
118,14256760,"

Then you can use that tag to select which files will be included in a standard build of your package, and which will be used for testing.

If you put your standard configuration in a file of its own, then adding a line to the top like the following will ensure that it is not used for testing:

// +build !testing


You can then include the testing configuration in one of the *_test.go files, or in some other file that requires that the testing tag be set.
","['One', 'possibility', 'would', 'be', 'to', 'use', 'build', 'constraints.', 'If', 'you', 'run', 'go', 'test', 'as:', 'go', 'test', '-', 'tags', 'testing', 'pkgname', 'Then', 'you', 'can', 'use', 'that', 'tag', 'to', 'select', 'which', 'files', 'will', 'be', 'included', 'in', 'a', 'standard', 'build', 'of', 'your', 'package,', 'and', 'which', 'will', 'be', 'used', 'for', 'testing.', 'If', 'you', 'put', 'your', 'standard', 'configuration', 'in', 'a', 'file', 'of', 'its', 'own,', 'then', 'adding', 'a', 'line', 'to', 'the', 'top', 'like', 'the', 'following', 'will', 'ensure', 'that', 'it', 'is', 'not', 'used', 'for', 'testing:', '//', '+build', '!testing', 'You', 'can', 'then', 'include', 'the', 'testing', 'configuration', 'in', 'one', 'of', 'the', '*_test.go', 'files,', 'or', 'in', 'some', 'other', 'file', 'that', 'requires', 'that', 'the', 'testing', 'tag', 'be', 'set.']"
119,14322756,"You can't do this directly with the users API but see this question for alternative options:


  Instead of using the UserService API to logout, you can manually remove the AppEngine specific cookies that are set. Check out this blog post that discusses how to so (written in Python, but you should be able to modify it for Java). This should effectively log the user out from your own app but not from other Google services (though I haven't tested this myself).
  
  The more robust approach would be to create your own User class and manage your own session cookies, while wrapping the UserService API. The downside of this approach is the extra work that is required to set it up, compared to the very easy to use UserService API. However, the advantage of maintaining your own Users is that you will be able to use other methods of authentication besides for Google (e.g. now you will be able to use a Facebook login as well, or even a native login if you choose to set that up).

","['You', ""can't"", 'do', 'this', 'directly', 'with', 'the', 'users', 'API', 'but', 'see', 'this', 'question', 'for', 'alternative', 'options:', 'Instead', 'of', 'using', 'the', 'UserService', 'API', 'to', 'logout,', 'you', 'can', 'manually', 'remove', 'the', 'AppEngine', 'specific', 'cookies', 'that', 'are', 'set.', 'Check', 'out', 'this', 'blog', 'post', 'that', 'discusses', 'how', 'to', 'so', '(written', 'in', 'Python,', 'but', 'you', 'should', 'be', 'able', 'to', 'modify', 'it', 'for', 'Java).', 'This', 'should', 'effectively', 'log', 'the', 'user', 'out', 'from', 'your', 'own', 'app', 'but', 'not', 'from', 'other', 'Google', 'services', '(though', 'I', ""haven't"", 'tested', 'this', 'myself).', 'The', 'more', 'robust', 'approach', 'would', 'be', 'to', 'create', 'your', 'own', 'User', 'class', 'and', 'manage', 'your', 'own', 'session', 'cookies,', 'while', 'wrapping', 'the', 'UserService', 'API.', 'The', 'downside', 'of', 'this', 'approach', 'is', 'the', 'extra', 'work', 'that', 'is', 'required', 'to', 'set', 'it', 'up,', 'compared', 'to', 'the', 'very', 'easy', 'to', 'use', 'UserService', 'API.', 'However,', 'the', 'advantage', 'of', 'maintaining', 'your', 'own', 'Users', 'is', 'that', 'you', 'will', 'be', 'able', 'to', 'use', 'other', 'methods', 'of', 'authentication', 'besides', 'for', 'Google', '(e.g.', 'now', 'you', 'will', 'be', 'able', 'to', 'use', 'a', 'Facebook', 'login', 'as', 'well,', 'or', 'even', 'a', 'native', 'login', 'if', 'you', 'choose', 'to', 'set', 'that', 'up).']"
120,14427910,"
","['According', 'to', 'this', 'article:', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 'value', ':=', '""Thu, 05/19/11, 10:47PM""', '//', 'Writing', 'down', 'the', 'way', 'the', 'standard', 'time', 'would', 'look', 'like', 'formatted', 'our', 'way', 'layout', ':=', '""Mon, 01/02/06, 03:04PM""', 't', ',', '_', ':=', 'time.Parse(layout, value)', 'fmt.Println(t)', '}', '//', '=>', '""Thu', 'May', '19', '22:47:00', '+0000', '2011""']"
121,14427956,"

http://play.golang.org/p/YAeAJ3CNqO

You can read more about making custom format strings in this post.
","['You', 'need', 'time.Parse()', 'and', 'a', 'format', 'string', 'that', 'matches', 'your', 'supplied', 'date', 'string.', ""Here's"", 'an', 'example', 'using', 'your', 'date', 'format.', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 's', ':=', '""12-25-2012""', 'for', 'mat_string', ':=', '""01-02-2006""', 't', ',', 'err', ':=', 'time.Parse(format_string, s)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'fmt.Printf(""%v\\n"", t)', '}', 'http://play.golang.org/p/YAeAJ3CNqO', 'You', 'can', 'read', 'more', 'about', 'making', 'custom', 'format', 'strings', 'in', 'this', 'post.']"
122,14440697,"

But the import paths would be the same as in the previous case.
","['I', 'believe', 'you', 'should', 'read,', 'or', 're-read', 'How', 'to', 'Write', 'Go', 'code', 'In', 'short:', 'Set', 'you', 'GOPATH', 'to', 'somewhere', 'and', 'export', 'it', 'for', 'good.', 'Then', 'put', 'some', 'package', 'blah', 'into', 'directory', '$', 'GOPATH/src/foo/bar/baz/blah', '(', '1', ')', 'or', '$', 'GOPATH/src/blah', '(', '2', ')', 'or', '$', 'GOPATH/src/qux/blah', '(', '3', ')', 'etc', '.', 'Import', 'blah', 'into', 'other', 'packages', 'as', 'import', '""foo/bar/baz/blah""', '// (1)', 'or', 'import', '""blah""', '// (2)', 'or', 'import', '""qux/blah""', '// (3)', 'The', 'package', 'in', 'that', 'directory', 'will', 'contain', 'the', 'package', 'files.', 'Say', 'you', 'have', 'only', 'one,', 'blah.go.', 'Then', 'its', 'location', 'would', 'be', '$', 'GOPATH/src/foo/bar/baz/blah/blah.go //', '(', '1', ')', '$', 'GOPATH/src/blah/blah.go //', '(', '2', ')', '$', 'GOPATH/src/qux/blah/blah.go //', '(', '3', ')', 'If', 'the', 'blah', 'package', 'source', 'file', 'is', 'named,', 'say', 'proj.go', 'instead,', 'then', '$', 'GOPATH/src/foo/bar/baz/blah/proj.go //', '(', '1', ')', '$', 'GOPATH/src/blah/proj.go //', '(', '2', ')', '$', 'GOPATH/src/qux/blah/proj.go //', '(', '3', ')', 'But', 'the', 'import', 'paths', 'would', 'be', 'the', 'same', 'as', 'in', 'the', 'previous', 'case.']"
123,14440906,"Ok, this seems to solve it:

export GOPATH=`pwd`


Apparently, it needs to be an absolute path. I still find the error message very confusing, though.
","['But', 'the', 'import', 'paths', 'would', 'be', 'the', 'same', 'as', 'in', 'the', 'previous', 'case.']"
124,14480383,"to get the Number of Columns (and also the names) just use the Columns() Function

http://golang.org/pkg/database/sql/#Rows.Columns

and as csv can only be a strings, just use a []byte type as dest type for Scanner.
according to docu:


  If an argument has type *[]byte, Scan saves in that argument a copy of
  the corresponding data. The copy is owned by the caller and can be
  modified and held indefinitely.


the data will not be transformed into its real type.
and from this []byte you can then convert it to string.

if your are sure your tables only use base types (string, []byte, nil, int(s), float(s), bool) you can directly pass string as dest

but if you use other types like arrays, enums, or so on, then the data cant be transformed to string. but this also depends how the driver handles this types. (some months ago as example, the postgres driver was not able to handle arrays, so he returned always []byte where i needed to transform it by my own) 
","['to', 'get', 'the', 'Number', 'of', 'Columns', '(and', 'also', 'the', 'names)', 'just', 'use', 'the', 'Columns()', 'Function', 'http://golang.org/pkg/database/sql/#Rows.Columns', 'and', 'as', 'csv', 'can', 'only', 'be', 'a', 'strings,', 'just', 'use', 'a', '[]byte', 'type', 'as', 'dest', 'type', 'for', 'Scanner.', 'according', 'to', 'docu:', 'If', 'an', 'argument', 'has', 'type', '*[]byte,', 'Scan', 'saves', 'in', 'that', 'argument', 'a', 'copy', 'of', 'the', 'corresponding', 'data.', 'The', 'copy', 'is', 'owned', 'by', 'the', 'caller', 'and', 'can', 'be', 'modified', 'and', 'held', 'indefinitely.', 'the', 'data', 'will', 'not', 'be', 'transformed', 'into', 'its', 'real', 'type.', 'and', 'from', 'this', '[]byte', 'you', 'can', 'then', 'convert', 'it', 'to', 'string.', 'if', 'your', 'are', 'sure', 'your', 'tables', 'only', 'use', 'base', 'types', '(string,', '[]byte,', 'nil,', 'int(s),', 'float(s),', 'bool)', 'you', 'can', 'directly', 'pass', 'string', 'as', 'dest', 'but', 'if', 'you', 'use', 'other', 'types', 'like', 'arrays,', 'enums,', 'or', 'so', 'on,', 'then', 'the', 'data', 'cant', 'be', 'transformed', 'to', 'string.', 'but', 'this', 'also', 'depends', 'how', 'the', 'driver', 'handles', 'this', 'types.', '(some', 'months', 'ago', 'as', 'example,', 'the', 'postgres', 'driver', 'was', 'not', 'able', 'to', 'handle', 'arrays,', 'so', 'he', 'returned', 'always', '[]byte', 'where', 'i', 'needed', 'to', 'transform', 'it', 'by', 'my', 'own)']"
125,14500756,"
","['In', 'order', 'to', 'directly', 'Scan', 'the', 'values', 'into', 'a', '[]string,', 'you', 'must', 'create', 'an', '[]interface{}', 'slice', 'pointing', 'to', 'each', 'string', 'in', 'your', 'string', 'slice.', 'Here', 'you', 'have', 'a', 'working', 'example', 'for', 'MySQL', '(just', 'change', 'the', 'sql.Open-command', 'to', 'match', 'your', 'settings):', 'package', 'main', 'import', '(', '""fmt""', '_', '""github.com/go-sql-driver/mysql""', '""database/sql""', ')', 'func', 'main', '()', '{', 'db', ',', 'err', ':=', 'sql.Open(""mysql"", ""user:pass@tcp(localhost:3306)/test?charset=utf8"")', 'defer', 'db.Close()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""Failed to connect"", err)', 'return', '}', 'rows', ',', 'err', ':=', ""db.Query(`SELECT 'one' col1, 'two' col2, 3 col3, NULL col4`)"", 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""Failed to run query"", err)', 'return', '}', 'cols', ',', 'err', ':=', 'rows.Columns()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""Failed to get columns"", err)', 'return', '}', '//', 'Result', 'is', 'your', 'slice', 'string.', 'rawResult', ':=', 'make', '([][]', 'byte', ',', 'len', '(', 'cols', '))', 'result', ':=', 'make', '([]', 'string', ',', 'len', '(', 'cols', '))', 'dest', ':=', 'make', '([]', 'interface', '{},', 'len', '(', 'cols', '))', '// A temporary interface{} slice', 'for', 'i', ',', '_', ':=', 'range', 'rawResult', '{', 'dest', '[', 'i', ']', '=', '&', 'rawResult', '[', 'i', ']', '// Put pointers to each string in the interface slice', '}', 'for', 'rows.Next()', '{', 'err', '=', 'rows.Scan(dest...)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""Failed to scan row"", err)', 'return', '}', 'for', 'i', ',', 'raw', ':=', 'range', 'rawResult', '{', 'if', 'raw', '==', 'nil', '{', 'result', '[', 'i', ']', '=', '""\\\\N""', '}', 'else', '{', 'result', '[', 'i', ']', '=', 'string', '(', 'raw', ')', '}', '}', 'fmt.Printf(""%#v\\n"", result)', '}', '}']"
126,14715693,"

What did you think?
","['What', 'about', 'these', 'solution,', 'these', 'way', 'you', 'dont', 'need', 'a', 'query,', 'neither', 'an', 'iterator', 'is', 'more', 'direct', 'way', 'of', 'solving', 'the', 'problem.', 'var', 'article', 'Article', 'k', ':=', 'datastore.NewKey(c, ""Article"", """", usrr.User, nil)', 'q', ':=', 'datastore.Get(c,k,&article)', 'What', 'did', 'you', 'think?']"
127,14777001,"

If a specified field isn't present in a given doc, the other matching fields will still be included.

Build up the projection parameter object programmatically if you want it to be dynamic.
","['Yes,', ""that's"", 'the', 'purpose', 'of', 'the', 'projection', 'parameter', 'of', 'find:', 'db', '.', 'collection', '.', 'find', '({', '_id', ':', '1234', '},', '{', ""'parentfield1.childfield1'"", ':', '1', ',', ""'parentfield1.childfield2'"", ':', '1', ',', ""'parentfield1.childfield3'"", ':', '1', '});', 'If', 'a', 'specified', 'field', ""isn't"", 'present', 'in', 'a', 'given', 'doc,', 'the', 'other', 'matching', 'fields', 'will', 'still', 'be', 'included.', 'Build', 'up', 'the', 'projection', 'parameter', 'object', 'programmatically', 'if', 'you', 'want', 'it', 'to', 'be', 'dynamic.']"
128,15078106,"Running the gccgo-generated binary under Valgrind seems to indicate that gccgo has an inefficient memory allocator. This may be one of the reasons why gccgo 4.7.2 is slower than go 1.0.2. It is impossible to run a binary generated by go 1.0.2 under Valgrind, so it is hard to confirm for a fact whether memory allocation is gccgo's primary performance problem in this case.
","['If', 'a', 'specified', 'field', ""isn't"", 'present', 'in', 'a', 'given', 'doc,', 'the', 'other', 'matching', 'fields', 'will', 'still', 'be', 'included.', 'Build', 'up', 'the', 'projection', 'parameter', 'object', 'programmatically', 'if', 'you', 'want', 'it', 'to', 'be', 'dynamic.']"
129,15103151,"
","['Effectively,', 'you', 'are', 'running:', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 'return', 'CurrentTime', ':=', 'func', '()', 'string', '{', 'return', 'time.Now().String()', '}', 'c', ':=', 'make', '(', 'chan', 'string', ',', '2', ')', 'asyncReturnCurrentTime', ':=', 'func', '(', 'c', 'chan', 'string', ')', '{', 'time.Sleep(2001 * time.Millisecond)', 'c', '<-', 'return', 'CurrentTime', '()', '}', 'go', 'asyncReturnCurrentTime', '(', 'c', ')', 'go', 'asyncReturnCurrentTime', '(', 'c', ')', 'go', 'asyncReturnCurrentTime', '(', 'c', ')', 'fmt.Println(<-c)', 'fmt.Println(<-c)', 'fmt.Println(<-c)', 'fmt.Println()', 'go', 'asyncReturnCurrentTime', '(', 'c', ')', 'go', 'asyncReturnCurrentTime', '(', 'c', ')', 'go', 'asyncReturnCurrentTime', '(', 'c', ')', 'fmt.Println(<-c)', 'fmt.Println(<-c)', 'fmt.Println(<-c)', 'fmt.Println()', '}', 'Output:', '2013', '-', '02', '-', '26', '21', ':', '28', ':', '22', '.', '06', '9581655', '-', '05', '0', '0', 'EST', '2013', '-', '02', '-', '26', '21', ':', '28', ':', '22', '.', '06', '9688722', '-', '05', '0', '0', 'EST', '2013', '-', '02', '-', '26', '21', ':', '28', ':', '22', '.', '06', '9695217', '-', '05', '0', '0', 'EST', '2013', '-', '02', '-', '26', '21', ':', '28', ':', '24', '.', '07', '0', '985411', '-', '05', '0', '0', 'EST', '2013', '-', '02', '-', '26', '21', ':', '28', ':', '24', '.', '07', '0', '999309', '-', '05', '0', '0', 'EST', '2013', '-', '02', '-', '26', '21', ':', '28', ':', '24', '.', '071', '0', '02661', '-', '05', '0', '0', 'EST', 'Send', 'statements', 'Both', 'the', 'channel', 'and', 'the', 'value', 'expression', 'are', 'evaluated', 'before', 'communication', 'begins.', 'Communication', 'blocks', 'until', 'the', 'send', 'can', 'proceed.', 'The', 'returnCurrentTime()', 'expression', '(the', 'timestamp)', 'is', 'evaluated', 'immediately,', 'before', 'an', 'attempt', 'is', 'made', 'to', 'send.', ""It's"", 'not', 'a', 'timestamp', 'for', 'the', 'send.', 'The', 'send', 'may', 'happen', 'later', 'if', 'the', 'buffer', 'is', 'full.', 'Also,', 'measuring', 'actual', 'send', 'and', 'receive', 'times,', 'the', 'buffering', 'delay', 'for', 'chan', 'c', 'is', 'going', 'to', 'be', 'inconsequential:', 'send,', 'send,', 'block,', 'receive,', 'unblock,', 'send.', 'For', 'example,', 'c', '<-;', '2013', '-', '02', '-', '26', '23', ':', '29', ':', '34', '.', '505456624', '-', '05', '0', '0', 'EST', 'c', '<-;', '2013', '-', '02', '-', '26', '23', ':', '29', ':', '34', '.', '505467030', '-', '05', '0', '0', 'EST', '<-', 'c', ';', '2013', '-', '02', '-', '26', '23', ':', '29', ':', '34', '.', '505468497', '-', '05', '0', '0', 'EST', 'c', '<-;', '2013', '-', '02', '-', '26', '23', ':', '29', ':', '34', '.', '505518015', '-', '05', '0', '0', 'EST', 'c', '<-;', '2013', '-', '02', '-', '26', '23', ':', '31', ':', '36', '.', '506659943', '-', '05', '0', '0', 'EST', 'c', '<-;', '2013', '-', '02', '-', '26', '23', ':', '31', ':', '36', '.', '506664832', '-', '05', '0', '0', 'EST', '<-', 'c', ';', '2013', '-', '02', '-', '26', '23', ':', '31', ':', '36', '.', '506669302', '-', '05', '0', '0', 'EST', 'c', '<-;', '2013', '-', '02', '-', '26', '23', ':', '31', ':', '36', '.', '506696540', '-', '05', '0', '0', 'EST']"
130,15297139,"
","['if', 'you', 'call', 'parseMultipartForm', '(', '0', ')', 'this', 'will', 'write', 'the', 'entire', 'file', 'to', 'disk', 'instead', 'of', 'storing', 'anything', 'in', 'memory,', 'followed', 'by', 'f', ',', '_', ':=', 'FormFile', '(', '""file""', ')', 'then', 'you', 'can', 'stat', 'the', 'file', 'with', 'fi', ',', '_', ':=', 'f', '.(*', 'os', '.', 'File', ').', 'Stat', '()']"
131,15302979,"Depending on what you want to do with the data, the best thing to do may be to read the file into a byte slice with ioutil.ReadAll. (You might want the data as a byte slice eventually, anyway.) Once you've done that, you an find the length with len.
","['Depending', 'on', 'what', 'you', 'want', 'to', 'do', 'with', 'the', 'data,', 'the', 'best', 'thing', 'to', 'do', 'may', 'be', 'to', 'read', 'the', 'file', 'into', 'a', 'byte', 'slice', 'with', 'ioutil.ReadAll.', '(You', 'might', 'want', 'the', 'data', 'as', 'a', 'byte', 'slice', 'eventually,', 'anyway.)', 'Once', ""you've"", 'done', 'that,', 'you', 'an', 'find', 'the', 'length', 'with', 'len.']"
132,15311116,"

The first line finds the file's current offset. The second seeks to the end of the file and returns where it is in relation to the beginning of the file. This is the size of the file. The third seeks to the offset we were at before trying to find the size.

You can read more about the seek method here.
","['You', 'can', 'exploit', 'the', 'fact', 'that', 'multipart.File', 'implements', 'io.Seeker', 'to', 'find', 'its', 'size.', 'cur', ',', 'err', ':=', 'file.Seek(0, 1)', 'size', ',', 'err', ':=', 'file.Seek(0, 2)', '_', ',', 'err', ':=', 'file.Seek(cur, 0)', 'The', 'first', 'line', 'finds', 'the', ""file's"", 'current', 'offset.', 'The', 'second', 'seeks', 'to', 'the', 'end', 'of', 'the', 'file', 'and', 'returns', 'where', 'it', 'is', 'in', 'relation', 'to', 'the', 'beginning', 'of', 'the', 'file.', 'This', 'is', 'the', 'size', 'of', 'the', 'file.', 'The', 'third', 'seeks', 'to', 'the', 'offset', 'we', 'were', 'at', 'before', 'trying', 'to', 'find', 'the', 'size.', 'You', 'can', 'read', 'more', 'about', 'the', 'seek', 'method', 'here.']"
133,15452023,"

err is nil because all the exported fields, in this case there are none, were marshalled correctly.

Working example: http://play.golang.org/p/0Q8TIvZwuj

Check out the docs http://godoc.org/encoding/json/#Marshal
","['You', 'have', 'to', 'make', 'the', 'fields', 'that', 'you', 'want', 'to', 'marshal', 'public.', 'Like', 'this:', 'type', 'Address', 'struct', '{', 'Street', 'string', 'Extended', 'string', 'City', 'string', 'State', 'string', 'Zip', 'string', '}', 'err', 'is', 'nil', 'because', 'all', 'the', 'exported', 'fields,', 'in', 'this', 'case', 'there', 'are', 'none,', 'were', 'marshalled', 'correctly.', 'Working', 'example:', 'http://play.golang.org/p/0Q8TIvZwuj', 'Check', 'out', 'the', 'docs', 'http://godoc.org/encoding/json/#Marshal']"
134,15620256,"

Still 26 sec on my machine, I'd like to see a faster solution.

BTW: you need to do the random fileds, but that is left as an exercise to the reader :)
","['This', 'is', 'a', 'naive', 'approach', '(1GB):', 'package', 'main', 'import', '(', '""fmt""', '""log""', '""os""', ')', 'func', 'main', '()', '{', 'myfile', ',', 'err', ':=', 'os.OpenFile(""myfile"", os.O_WRONLY|os.O_CREATE, 0644)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'defer', 'myfile.Close()', 'var', 'pos', 'int', 'var', 'line', 'string', '//', 'sample:', 'login:jbill:2013/3/25,', '1', 'line', '=', 'fmt.Sprintf(""%s:%s:%s, %d\\n"", ""login"", ""jbill"", ""2013/3/25"", 1)', 'for', 'pos', '<', '1024', '*', '1024', '*', '1024', '{', 'bytes', ',', 'err', ':=', 'myfile.Write([]byte(line))', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'pos', '=', 'pos', '+', 'bytes', '}', '}', 'which', 'takes', 'forever', '(1:16),', 'because', 'the', 'output', 'is', 'not', 'buffered.', 'By', 'adding', 'bufio', 'you', 'can', 'decrease', 'the', 'time', 'dramatically', 'package', 'main', 'import', '(', '""bufio""', '""fmt""', '""log""', '""os""', ')', 'func', 'main', '()', '{', 'myfile', ',', 'err', ':=', 'os.OpenFile(""myfile"", os.O_WRONLY|os.O_CREATE, 0644)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'defer', 'myfile.Close()', 'mybufferedfile', ':=', 'bufio.NewWriter(myfile)', 'var', 'pos', 'int', 'var', 'line', 'string', '//', 'sample:', 'login:jbill:2013/3/25,', '1', 'line', '=', 'fmt.Sprintf(""%s:%s:%s, %d\\n"", ""login"", ""jbill"", ""2013/3/25"", 1)', 'for', 'pos', '<', '1024', '*', '1024', '*', '1024', '{', 'bytes', ',', 'err', ':=', 'mybufferedfile.WriteString(line)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'pos', '=', 'pos', '+', 'bytes', '}', 'err', '=', 'mybufferedfile.Flush()', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', '}', 'Still', '26', 'sec', 'on', 'my', 'machine,', ""I'd"", 'like', 'to', 'see', 'a', 'faster', 'solution.', 'BTW:', 'you', 'need', 'to', 'do', 'the', 'random', 'fileds,', 'but', 'that', 'is', 'left', 'as', 'an', 'exercise', 'to', 'the', 'reader', ':)']"
135,15622206,"
","['For', 'example,', 'package', 'main', 'import', '(', '""bufio""', '""fmt""', '""math/rand""', '""os""', '""strconv""', '""time""', ')', 'func', 'main', '()', '{', 'fileSize', ':=', 'int64', '(', '10', 'e9', ')', '// 10GB', 'f', ',', 'err', ':=', 'os.Create(""/tmp/largefile"")', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'w', ':=', 'bufio.NewWriter(f)', 'prefixes', ':=', '[]', 'string', '{', '""login""', ',', '""logout""', ',', '""register""', '}', 'names', ':=', '[]', 'string', '{', '""jbill""', ',', '""dkennedy""', '}', 'timeStart', ':=', 'time.Date(2012, 1, 1, 0, 0, 0, 0, time.UTC)', 'timeDur', ':=', 'timeStart.AddDate(1, 0, 0).Sub(timeStart)', 'rand.Seed(time.Now().UnixNano())', 'size', ':=', 'int64', '(', '0', ')', 'for', 'size', '<', 'fileSize', '{', '//', 'prefix:username:timestamp,', 'number', '//', 'login:jbill:2012/3/25,', '1', 'prefix', ':=', 'prefixes', '[', 'int', '(', 'rand.Int31n(int32(len(prefixes))))', ']', 'name', ':=', 'names', '[', 'int', '(', 'rand.Int31n(int32(len(names))))', ']', 'time', ':=', 'timeStart.Add(time.Duration(rand.Int63n(int64(timeDur)))).Format(""2006/1/2"")', 'number', ':=', 'strconv.Itoa(int(rand.Int31n(100) + 1))', 'line', ':=', 'prefix', '+', '"":""', '+', 'name', '+', '"":""', '+', 'time', '+', '"", ""', '+', 'number', '+', '""\\n""', 'n', ',', 'err', ':=', 'w.WriteString(line)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(n, err)', 'return', '}', 'size', '+=', 'int64', '(', 'len', '(', 'line', '))', '}', 'err', '=', 'w.Flush()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'err', '=', 'f.Close()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'fmt.Println(""Size:"", size)', '}', 'Output:', 'register', ':', 'jbill', ':', '2012/8/24,', '15', 'login', ':', 'jbill', ':', '2012/10/7,', '98', 'register', ':', 'dkennedy', ':', '2012/8/29,', '70', 'register', ':', 'jbill', ':', '2012/6/1,', '89', 'register', ':', 'jbill', ':', '2012/5/24,', '63', 'login', ':', 'dkennedy', ':', '2012/3/29,', '48', 'logout', ':', 'jbill', ':', '2012/7/8,', '93', 'logout', ':', 'dkennedy', ':', '2012/1/12,', '74', 'login', ':', 'jbill', ':', '2012/4/12,', '14', 'login', ':', 'jbill', ':', '2012/2/5,', '83']"
136,15643592,"In C++, the simplest solution would be to us an
std::ostringstream to put the data in a string, and then an
std::istringstream to reread it.  Although deprecated,
strstream will allow you to avoid the dynamic allocations and
the copies (assuming you know the maximum size of the data
before hand).  Or you can easily write your own streambuf to
do it.  Or if you don't need formatting, of course, you can just
push the data into an std::vector.

IIRC, Java also has memory based streams (based on Byte[],
I think).
",[]
137,15643594,"If using java : commons vfs supports a RAM file system type
","['If', 'using', 'java', ':', 'commons', 'vfs', 'supports', 'a', 'RAM', 'file', 'system', 'type']"
138,15643625,".Net has a MemoryStream class that you could use (System.IO):
http://msdn.microsoft.com/en-us/library/system.io.memorystream.aspx
","['.Net', 'has', 'a', 'MemoryStream', 'class', 'that', 'you', 'could', 'use', '(System.IO):', 'http://msdn.microsoft.com/en-us/library/system.io.memorystream.aspx']"
139,15745351,"I published a Go snippet over at Github of a function to render a number (float64 or int) according to user-specified thousand separator, decimal separator and decimal precision.

https://gist.github.com/gorhill/5285193


Usage: s := RenderFloat(format, n)

The format parameter tells how to render the number n.

Examples of format strings, given n = 12345.6789:

""#,###.##"" => ""12,345.67""
""#,###."" => ""12,345""
""#,###"" => ""12345,678""
""#\u202F###,##"" => ""12 345,67""
""#.###,###### => 12.345,678900
"""" (aka default format) => 12,345.67

","['I', 'published', 'a', 'Go', 'snippet', 'over', 'at', 'Github', 'of', 'a', 'function', 'to', 'render', 'a', 'number', '(float64', 'or', 'int)', 'according', 'to', 'user-specified', 'thousand', 'separator,', 'decimal', 'separator', 'and', 'decimal', 'precision.', 'https://gist.github.com/gorhill/5285193', 'Usage:', 's', ':=', 'RenderFloat(format,', 'n)', 'The', 'format', 'parameter', 'tells', 'how', 'to', 'render', 'the', 'number', 'n.', 'Examples', 'of', 'format', 'strings,', 'given', 'n', '=', '12345.6789:', '""#,###.##""', '=>', '""12,345.67""', '""#,###.""', '=>', '""12,345""', '""#,###""', '=>', '""12345,678""', '""#\\u202F###,##""', '=>', '""12', '345,67""', '""#.###,######', '=>', '12.345,678900', '""""', '(aka', 'default', 'format)', '=>', '12,345.67']"
140,15802707,"integer to ASCII. It comes from the C language/UNIX. See this thread for more: Where did the name `atoi` come from?

In the C language, there is no concept such as strings, you have arrays of characters that are null terminated.

Thanks to @mvp!
","['integer', 'to', 'ASCII.', 'It', 'comes', 'from', 'the', 'C', 'language/UNIX.', 'See', 'this', 'thread', 'for', 'more:', 'Where', 'did', 'the', 'name', '`atoi`', 'come', 'from?', 'In', 'the', 'C', 'language,', 'there', 'is', 'no', 'concept', 'such', 'as', 'strings,', 'you', 'have', 'arrays', 'of', 'characters', 'that', 'are', 'null', 'terminated.', 'Thanks', 'to', '@mvp!']"
141,15835001,"
","['Try', 'this:', 'fileHandler', ':=', 'http.StripPrefix(""/static/"", http.FileServer(http.Dir(""/absolute/path/static"")))', 'http.Handle(""/static/"", fileHandler)']"
142,15835185,"
","['I', 'think', 'you', 'might', 'be', 'looking', 'for', 'PathPrefix...', 'func', 'main', '()', '{', 'r', ':=', 'mux.NewRouter()', 'r.HandleFunc(""/search/{searchTerm}"", Search)', 'r.HandleFunc(""/load/{dataId}"", Load)', 'r.PathPrefix(""/"").Handler(http.FileServer(http.Dir(""./static/"")))', 'http.Handle(""/"", r)', 'http.ListenAndServe("":8100"", nil)', '}']"
143,15858718,"No, there are no guarantees.

Even when the channel is not full, if two goroutines are started at about the same time to send to it, I don't think there is any guarantee that the goroutine that was started first would actually execute first. So you can't count on the messages arriving in order.
","['No,', 'there', 'are', 'no', 'guarantees.', 'Even', 'when', 'the', 'channel', 'is', 'not', 'full,', 'if', 'two', 'goroutines', 'are', 'started', 'at', 'about', 'the', 'same', 'time', 'to', 'send', 'to', 'it,', 'I', ""don't"", 'think', 'there', 'is', 'any', 'guarantee', 'that', 'the', 'goroutine', 'that', 'was', 'started', 'first', 'would', 'actually', 'execute', 'first.', 'So', 'you', ""can't"", 'count', 'on', 'the', 'messages', 'arriving', 'in', 'order.']"
144,15858897,"
","['You', 'can', 'drop', 'the', 'message', 'if', 'the', 'channel', 'is', 'full', '(and', 'then', 'set', 'a', 'flag', 'to', 'pause', 'the', 'client', 'and', 'send', 'them', 'a', 'message', 'that', ""they're"", 'dropping', 'messages', 'or', 'whatever).', 'Something', 'along', 'the', 'lines', 'of', '(untested):', 'type', 'Client', 'struct', '{', 'Name', 'string', 'ch', 'chan', '<-', 'string', '}', 'func', 'broadcast', '(', 'c', '<-', 'chan', 'string', ',', 'chan', 's', '[]*', 'Client', ')', '{', 'for', 'msg', ':=', 'range', 'c', '{', 'for', '_', ',', 'ch', ':=', 'range', 'chan', 's', '{', 'select', '{', 'case', 'ch', '.', 'ch', '<-', 'msg', ':', '//', 'all', 'okay', 'default', ':', 'log.Printf(""Channel was full sending \'%s\' to client %s"", msg, ch.Name)', '}', '}', '}', '}']"
145,15862090,"In this code, no guarantees.

The main problem with the given sample code lies not in the channel behavior, but rather in the numerous created goroutines. All the goroutines are ""fired"" inside the same imbricated loop without further synchronization, so even before they start to send messages, we simply don't know which ones will execute first.

However this rises a legitimate question in general : if we somehow garantee the order of several blocking send instructions, are we guaranteed to receive them in the same order?

The ""happens-before"" property of the sendings is difficult to create. I fear it is impossible because :


Anything can happen before the sending instruction : for example, other goroutines performing their own sendings or not
A goroutine being blocked in a sending cannot simultaneously manage other sorts of synchronization


For example, if I have 10 goroutines numbered 1 to 10, I have no way of letting them send their own number to the channel, concurrently, in the right order. All I can do is use various kinds of sequential tricks like doing the sorting in 1 single goroutine.
","['In', 'this', 'code,', 'no', 'guarantees.', 'The', 'main', 'problem', 'with', 'the', 'given', 'sample', 'code', 'lies', 'not', 'in', 'the', 'channel', 'behavior,', 'but', 'rather', 'in', 'the', 'numerous', 'created', 'goroutines.', 'All', 'the', 'goroutines', 'are', '""fired""', 'inside', 'the', 'same', 'imbricated', 'loop', 'without', 'further', 'synchronization,', 'so', 'even', 'before', 'they', 'start', 'to', 'send', 'messages,', 'we', 'simply', ""don't"", 'know', 'which', 'ones', 'will', 'execute', 'first.', 'However', 'this', 'rises', 'a', 'legitimate', 'question', 'in', 'general', ':', 'if', 'we', 'somehow', 'garantee', 'the', 'order', 'of', 'several', 'blocking', 'send', 'instructions,', 'are', 'we', 'guaranteed', 'to', 'receive', 'them', 'in', 'the', 'same', 'order?', 'The', '""happens-before""', 'property', 'of', 'the', 'sendings', 'is', 'difficult', 'to', 'create.', 'I', 'fear', 'it', 'is', 'impossible', 'because', ':', 'Anything', 'can', 'happen', 'before', 'the', 'sending', 'instruction', ':', 'for', 'example,', 'other', 'goroutines', 'performing', 'their', 'own', 'sendings', 'or', 'not', 'A', 'goroutine', 'being', 'blocked', 'in', 'a', 'sending', 'cannot', 'simultaneously', 'manage', 'other', 'sorts', 'of', 'synchronization', 'For', 'example,', 'if', 'I', 'have', '10', 'goroutines', 'numbered', '1', 'to', '10,', 'I', 'have', 'no', 'way', 'of', 'letting', 'them', 'send', 'their', 'own', 'number', 'to', 'the', 'channel,', 'concurrently,', 'in', 'the', 'right', 'order.', 'All', 'I', 'can', 'do', 'is', 'use', 'various', 'kinds', 'of', 'sequential', 'tricks', 'like', 'doing', 'the', 'sorting', 'in', '1', 'single', 'goroutine.']"
146,15864816,"

These methods will, of course, remove all parallelism due to synchronization. However,
the concurrent aspect of your program remains.
","['This', 'is', 'an', 'addition', 'to', 'the', 'already', 'posted', 'answers.', 'As', 'practically', 'everyone', 'stated,', 'that', 'the', 'problem', 'is', 'the', 'order', 'of', 'execution', 'of', 'the', 'goroutines,', 'you', 'can', 'easily', 'coordinate', 'goroutine', 'execution', 'using', 'channels', 'by', 'passing', 'around', 'the', 'number', 'of', 'the', 'goroutine', 'you', 'want', 'to', 'run:', 'func', 'coordinated', '(', 'coord', 'chan', 'int', ',', 'num', ',', 'max', 'int', ',', 'work', 'func', '())', '{', 'for', '{', 'n', ':=', '<-', 'coord', 'if', 'n', '==', 'num', '{', 'work', '()', 'coord', '<-', '(', 'n', '+', '1', ')', '%', 'max', '}', 'else', '{', 'coord', '<-', 'n', '}', '}', '}', 'coord', ':=', 'make', '(', 'chan', 'int', ')', 'go', 'coordinated', '(', 'coord', ',', '0', ',', '3', ',', 'func', '()', '{', 'println', '(', '""0""', ');', 'time.Sleep(1 * time.Second) })', 'go', 'coordinated', '(', 'coord', ',', '1', ',', '3', ',', 'func', '()', '{', 'println', '(', '""1""', ');', 'time.Sleep(1 * time.Second) })', 'go', 'coordinated', '(', 'coord', ',', '2', ',', '3', ',', 'func', '()', '{', 'println', '(', '""2""', ');', 'time.Sleep(1 * time.Second) })', 'coord', '<-', '0', 'or', 'by', 'using', 'a', 'central', 'goroutine', 'which', 'executes', 'the', 'workers', 'in', 'a', 'ordered', 'manner:', 'func', 'executor', '(', 'funs', 'chan', 'func', '())', '{', 'for', '{', 'worker', ':=', '<-', 'funs', 'worker', '()', 'funs', '<-', 'worker', '}', '}', 'funs', ':=', 'make', '(', 'chan', 'func', '(),', '3', ')', 'funs', '<-', 'func', '()', '{', 'println', '(', '""0""', ');', 'time.Sleep(1 * time.Second)', '}', 'funs', '<-', 'func', '()', '{', 'println', '(', '""1""', ');', 'time.Sleep(1 * time.Second)', '}', 'funs', '<-', 'func', '()', '{', 'println', '(', '""2""', ');', 'time.Sleep(1 * time.Second)', '}', 'go', 'executor', '(', 'funs', ')', 'These', 'methods', 'will,', 'of', 'course,', 'remove', 'all', 'parallelism', 'due', 'to', 'synchronization.', 'However,', 'the', 'concurrent', 'aspect', 'of', 'your', 'program', 'remains.']"
147,15990066,"
","['How', 'about', 'to', 'store', 'Votes', 'as', 'child', 'items', 'of', 'Comment,', 'using', 'ancestor', 'paths?', 'I', 'mean', 'set', 'parent', 'key', 'parameter', 'pointing', 'to', 'parent', 'Comment', 'when', 'you', 'storing', 'each', 'new', 'Vote', 'struct.', 'Something', 'like', 'this:', 'key', ',', 'err', ':=', 'datastore.Put(context, datastore.NewIncompleteKey(context, model.DB_KIND_VOTE, commentKey), &vote)']"
148,16142329,"

Personally though, I would create a template function called zip that accepts multiple slices and returns a slice of each pair of values. It would look cleaner in your template and probably get reused somewhere.
","['One', 'of', 'the', 'predefined', 'global', 'template', 'functions', 'is', 'index.', 'index', 'Returns', 'the', 'result', 'of', 'indexing', 'its', 'first', 'argument', 'by', 'the', 'following', 'arguments.', 'Thus', 'index', 'x', '1', '2', '3', 'is,', 'in', 'Go', 'syntax,', 'x[1][2][3].', 'Each', 'indexed', 'item', 'must', 'be', 'a', 'map,', 'slice,', 'or', 'array.', 'So', 'you', 'are', 'on', 'the', 'right', 'track.', 'The', 'only', 'issue', 'is', 'that', 'you', 'are', 'not', 'accounting', 'for', 'the', 'fact', 'the', 'dot', 'has', 'been', 'reassigned', 'within', 'the', 'range', 'block.', 'So', 'you', 'need', 'to', 'get', 'back', 'to', 'the', 'original', 'dot,', 'for', 'that', 'we', 'have', 'the', 'following', 'When', 'execution', 'begins,', '$', 'is', 'set', 'to', 'the', 'data', 'argument', 'passed', 'to', 'Execute,', 'that', 'is,', 'to', 'the', 'starting', 'value', 'of', 'dot.', 'So', '(assuming', 'there', 'is', 'nothing', 'else', 'going', 'on', 'in', 'your', 'template)', 'you', 'should', 'be', 'able', 'to', 'do:', '{{', 'range', '$', 'i', ',', '$', 'e', ':=', '.', 'First', '}}$', 'e', '-', '{{', 'index', '$.', 'Second', '$', 'i', '}}{{', 'end', '}}', 'Personally', 'though,', 'I', 'would', 'create', 'a', 'template', 'function', 'called', 'zip', 'that', 'accepts', 'multiple', 'slices', 'and', 'returns', 'a', 'slice', 'of', 'each', 'pair', 'of', 'values.', 'It', 'would', 'look', 'cleaner', 'in', 'your', 'template', 'and', 'probably', 'get', 'reused', 'somewhere.']"
149,16169115,"

hopefully shows some useful information in your case. See also the output of

go help list


for additional information about the go list tool.
","['go', 'list', '-', 'f', '\'{{join .Deps ""\\n""}}\'', 'Will', 'show', 'import', 'dependencies', 'for', 'package', 'at', '-', 'or', 'in', 'current', 'directory', 'if', 'is', 'left', 'empty.', 'Alternatively', 'go', 'list', '-', 'f', '\'{{join .DepsErrors ""\\n""}}\'', 'hopefully', 'shows', 'some', 'useful', 'information', 'in', 'your', 'case.', 'See', 'also', 'the', 'output', 'of', 'go', 'help', 'list', 'for', 'additional', 'information', 'about', 'the', 'go', 'list', 'tool.']"
150,16175509,") makes this very simple.

So, if you have packages A -> B -> C -> A, you create InterfaceA (some relevant name, obviously, more behaviour-related than package-related :) in package C and make it depend on this interface instead of on package A, and you make sure package A ""implements"" this interface.

Then you just have to provide a concrete implementation of A to C at some point (many possibilities here, I usually do this ""glue"" code in the main package that knows about all dependencies).
","['To', 'complement', 'on', ""jnml's"", 'answer', '(which', 'helps', '""debug""', 'circular', 'references', 'problems),', 'you', 'can', 'use', 'dependency', 'inversion', 'to', 'break', 'those', 'cycles,', 'coupled', 'with', 'dependency', 'injection.', 'For', 'an', 'application,', 'I', 'always', 'try', 'to', 'follow', 'the', 'guidelines', 'of', 'the', 'Clean', 'Architecture', '-', 'see', 'here', 'for', 'a', 'Go-specific', 'example', '-', 'and', 'I', 'find', 'that', ""Go's"", '""non-declarative', 'implementation""', 'of', 'interfaces', '(that', 'is,', 'you', ""don't"", 'have', 'to', 'explicitly', 'say', 'type', 'MyStruct', 'struct', 'implements', 'IfceSomething', ')', 'makes', 'this', 'very', 'simple.', 'So,', 'if', 'you', 'have', 'packages', 'A', '->', 'B', '->', 'C', '->', 'A,', 'you', 'create', 'InterfaceA', '(some', 'relevant', 'name,', 'obviously,', 'more', 'behaviour-related', 'than', 'package-related', ':)', 'in', 'package', 'C', 'and', 'make', 'it', 'depend', 'on', 'this', 'interface', 'instead', 'of', 'on', 'package', 'A,', 'and', 'you', 'make', 'sure', 'package', 'A', '""implements""', 'this', 'interface.', 'Then', 'you', 'just', 'have', 'to', 'provide', 'a', 'concrete', 'implementation', 'of', 'A', 'to', 'C', 'at', 'some', 'point', '(many', 'possibilities', 'here,', 'I', 'usually', 'do', 'this', '""glue""', 'code', 'in', 'the', 'main', 'package', 'that', 'knows', 'about', 'all', 'dependencies).']"
151,16683592,"While you can declare an actual ""read only"" or ""write only"" channel variable, it's useless to do so, because you can't do anything with them.  

The ""read only"" and ""write only"" syntax is for function parameters.  This syntax is more like ""const"" in C or ""in"" and ""out"" in Ada. 

Nor do Go channels have two ""ends"". UNIX pipes have two file descriptors, one for each end. The same variable of channel type is used for both reading and writing.  
","['While', 'you', 'can', 'declare', 'an', 'actual', '""read', 'only""', 'or', '""write', 'only""', 'channel', 'variable,', ""it's"", 'useless', 'to', 'do', 'so,', 'because', 'you', ""can't"", 'do', 'anything', 'with', 'them.', 'The', '""read', 'only""', 'and', '""write', 'only""', 'syntax', 'is', 'for', 'function', 'parameters.', 'This', 'syntax', 'is', 'more', 'like', '""const""', 'in', 'C', 'or', '""in""', 'and', '""out""', 'in', 'Ada.', 'Nor', 'do', 'Go', 'channels', 'have', 'two', '""ends"".', 'UNIX', 'pipes', 'have', 'two', 'file', 'descriptors,', 'one', 'for', 'each', 'end.', 'The', 'same', 'variable', 'of', 'channel', 'type', 'is', 'used', 'for', 'both', 'reading', 'and', 'writing.']"
152,16916602,"

Playground



Output:

I am a *main.Cod

","['You', 'are', 'getting', 'the', 'correct', 'answer.', 'The', 'answer', 'you', 'want', 'to', 'get', 'is', 'wrong.', 'In', 'func', '(', 'f', '*', 'Fish', ')', 'WhatAmI', '()', 'string', '{', 'return', 'reflect.TypeOf(f).String()', '}', 'f', 'is', 'of', 'type', '*main.Fish,', ""it's"", 'even', 'declared', 'to', 'be', 'of', 'that', 'type', '(f', '*Fish).', 'Thus', 'it', 'cannot', 'ever', 'be', 'of', 'type', '*main.Cod.', 'The', 'probable', 'source', 'of', 'confusion:', 'The', 'method', 'set', 'of', 'Cod', 'inherites', 'the', 'method', 'set', 'of', 'its', 'embedded,', 'anonymous', 'field', 'Fish', 'and', ""doesn't"", 'override', 'it.', 'Thus', 'invoking', 'WhatAmI', 'on', 'an', 'instance', 'of', 'Cod', '""delegates""', 'the', 'call', 'to', 'Fish.WhatAmI,', 'but', 'the', 'receiver', 'is', 'now', 'the', 'embedded', 'field', 'of', 'type', '*main.Fish.', 'Example', 'with', 'overriding', 'the', 'inherited', 'method:', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'Fish', 'struct', '{', '}', 'func', '(', 'f', '*', 'Fish', ')', 'WhatAmI', '()', 'string', '{', 'return', 'fmt.Sprintf(""%T"", f)', '}', 'type', 'Cod', 'struct', '{', 'Fish', '}', 'func', '(', 'c', '*', 'Cod', ')', 'WhatAmI', '()', 'string', '{', 'return', 'fmt.Sprintf(""%T"", c)', '}', 'func', 'main', '()', '{', 'c', ':=', 'new', '(', 'Cod', ')', 'fmt.Println(""I am a"", c.WhatAmI())', '}', 'Playground', 'Output:', 'I', 'am', 'a', '*main.Cod']"
153,16917647,"

Gives:

I am a *main.Cod

","['For', 'a', 'fairly', 'generic', 'solution,', 'you', 'could', 'separate', 'the', 'WhatAmI', 'function', 'from', 'the', 'Fish', 'type', 'and', 'use', 'an', 'empty', 'interface', '(see', 'Andrew', ""Gerrand's"", '""The', 'Laws', 'of', 'Reflection""),', 'and', 'just', 'check', 'the', 'type', 'on', 'that:', 'package', 'main', 'import', '(', '""fmt""', '""reflect""', ')', 'type', 'Fish', 'struct', '{', '}', 'type', 'Cod', 'struct', '{', 'Fish', '}', 'func', 'WhatAmI', '(', 'self', 'interface', '{})', 'string', '{', 'return', 'reflect.TypeOf(self).String()', '}', 'func', 'main', '()', '{', 'c', ':=', 'new', '(', 'Cod', ')', 'fmt.Println(""I am a"", WhatAmI(c))', '}', 'Gives:', 'I', 'am', 'a', '*main.Cod']"
154,16931866,"

I posted a working example to goplay: http://play.golang.org/p/4EaasS2VLL
","['This', 'code', 'has', 'many', 'errors', 'in', 'it.', 'To', 'start', 'with,', 'the', 'json', ""isn't"", 'valid', 'json.', 'You', 'are', 'missing', 'the', 'commas', 'in', 'between', 'key', 'pairs', 'in', 'your', 'top', 'level', 'object.', 'I', 'added', 'the', 'commas', 'and', 'pretty', 'printed', 'it', 'for', 'you:', '{', '""1001""', ':{', '""level""', ':', '10', ',', '""monster-id""', ':', '1001', ',', '""skill-level""', ':', '1', ',', '""aimer-id""', ':', '301', '},', '""1002""', ':{', '""level""', ':', '12', ',', '""monster-id""', ':', '1002', ',', '""skill-level""', ':', '1', ',', '""aimer-id""', ':', '302', '},', '""1003""', ':{', '""level""', ':', '16', ',', '""monster-id""', ':', '1003', ',', '""skill-level""', ':', '2', ',', '""aimer-id""', ':', '303', '}', '}', 'Your', 'next', 'problem', '(the', 'one', 'you', 'asked', 'about)', 'is', 'that', 'm', ':=', 'data', '.(', 'map', '[', 'string', ']', 'interface', '{})', 'makes', 'm', 'a', 'map', '[', 'string', ']', 'interface', '{}', '.', 'That', 'means', 'when', 'you', 'index', 'it', 'such', 'as', 'the', 'v', 'in', 'your', 'range', 'loop,', 'the', 'type', 'is', 'interface{}.', 'You', 'need', 'to', 'type', 'assert', 'it', 'again', 'with', 'v', '.(', 'map', '[', 'string', ']', 'interface', '{})', 'and', 'then', 'type', 'assert', 'each', 'time', 'you', 'read', 'from', 'the', 'map.', 'I', 'also', 'notice', 'that', 'you', 'next', 'attempt', 'mc.Pool[i]', '=', 'monster', 'when', 'i', 'is', 'an', 'int', 'and', 'mc.Pool', 'is', 'a', 'map[string]Monster.', 'An', 'int', 'is', 'not', 'a', 'valid', 'key', 'for', 'that', 'map.', 'Your', 'data', 'looks', 'very', 'rigid', 'so', 'I', 'would', 'make', 'unmarshall', 'do', 'most', 'of', 'the', 'work', 'for', 'you.', 'Instead', 'of', 'providing', 'it', 'a', 'map[string]interface{},', 'you', 'can', 'provide', 'it', 'a', 'map[string]Monster.', 'Here', 'is', 'a', 'quick', 'example.', 'As', 'well', 'as', 'changing', 'how', 'the', 'unmarshalling', 'works,', 'I', 'also', 'added', 'an', 'error', 'return.', 'The', 'error', 'return', 'is', 'useful', 'for', 'finding', 'bugs.', 'That', 'error', 'return', 'is', 'what', 'told', 'me', 'you', 'had', 'invalid', 'json.', 'type', 'Monster', 'struct', '{', 'MonsterId', 'int32', 'json', ':', '""monster-id""', 'Level', 'int32', 'json', ':', '""level""', 'SkillLevel', 'int32', 'json', ':', '""skill-level""', 'AimerId', 'int32', 'json', ':', '""aimer-id""', '}', 'type', 'MonsterCollection', 'struct', '{', 'Pool', 'map', '[', 'string', ']', 'Monster', '}', 'func', '(', 'mc', '*', 'MonsterCollection', ')', 'FromJson', '(', 'jsonStr', 'string', ')', 'error', '{', 'var', 'data', '=', '&', 'mc', '.', 'Pool', 'b', ':=', '[]', 'byte', '(', 'jsonStr', ')', 'return', 'json.Unmarshal(b, data)', '}', 'I', 'posted', 'a', 'working', 'example', 'to', 'goplay:', 'http://play.golang.org/p/4EaasS2VLL']"
155,16937083,"Just wrap your call to fmt.Scan in a for loop.
","['I', 'posted', 'a', 'working', 'example', 'to', 'goplay:', 'http://play.golang.org/p/4EaasS2VLL']"
156,17004417,"This is impossible in Go, by design - if you don't have data, the Template package is unnecessary overhead. 

If you have no data, just read the file using the io package, instead of using templates.
","['I', 'posted', 'a', 'working', 'example', 'to', 'goplay:', 'http://play.golang.org/p/4EaasS2VLL']"
157,17004517,"
","['If', 'your', 'template', ""doesn't"", '(yet)', 'use', 'any', 'variables,', 'you', 'can', 'just', 'pass', 'any', 'value', 'as', 'data', 'to', 'render', 'the', 'template.', 'So,', 'to', 'render', 'the', 'template', 'to', 'stdout,', 'you', 'could', 'for', 'example', 'use:', 'tpl.Execute(os.Stdout, nil)', 'If', 'you', 'really', 'want', 'to', 'render', 'the', 'template', 'to', 'a', 'string,', 'you', 'can', 'use', 'a', 'bytes.Buffer', 'as', 'an', 'intermediary:', 'var', 'buf', 'bytes', '.', 'Buffer', 'tpl.Execute(&buf, nil)', 'str', ':=', 'buf.String()']"
158,17091172," to bundle the files
copy the files next to your executable
choose a way to adjust the local parameters (db server, db name, etc..)
choose a way to make to have your server reload the resources (restart your server / systematically re-read the resources / check modification dates / ... )


If you are looking for an existing web framework :

Revel is one option, which takes care of a good number of points, among which hot recompilation during development, and a deployment procedure.
","['I', 'assume', 'you', 'are', 'talking', 'about', 'web', 'development.', 'As', 'you', 'correctly', 'noted,', 'the', 'directory', 'structure', 'is', 'meant', 'for', 'the', 'code,', 'and', 'the', 'go', 'tool', 'suite', 'only', 'takes', 'care', 'of', 'building', 'binaries', 'and', 'putting', 'them', 'in', 'a', 'conventional', 'place', '(pkg', 'or', 'bin).', 'What', 'you', 'want', 'is', 'a', 'complete', 'deployment', 'procedure', 'for', 'a', 'binary', '+', 'resource', 'files.', 'You', 'should', 'either', 'roll', 'your', 'own', 'deployment', 'procedure,', 'or', 'use', 'an', 'existing', 'framework.', 'A', 'sketch', 'of', 'a', 'homemade', 'procedure', ':', 'put', 'all', 'the', 'resources', 'under', 'a', 'specific', 'directory', 'in', 'your', 'project', '(e.g.', 'resources/)', 'use', 'git', 'archive', 'resources', '/', 'to', 'bundle', 'the', 'files', 'copy', 'the', 'files', 'next', 'to', 'your', 'executable', 'choose', 'a', 'way', 'to', 'adjust', 'the', 'local', 'parameters', '(db', 'server,', 'db', 'name,', 'etc..)', 'choose', 'a', 'way', 'to', 'make', 'to', 'have', 'your', 'server', 'reload', 'the', 'resources', '(restart', 'your', 'server', '/', 'systematically', 're-read', 'the', 'resources', '/', 'check', 'modification', 'dates', '/', '...', ')', 'If', 'you', 'are', 'looking', 'for', 'an', 'existing', 'web', 'framework', ':', 'Revel', 'is', 'one', 'option,', 'which', 'takes', 'care', 'of', 'a', 'good', 'number', 'of', 'points,', 'among', 'which', 'hot', 'recompilation', 'during', 'development,', 'and', 'a', 'deployment', 'procedure.']"
159,17209029,"

Go's magic happens when you do IO. They look like synchronous but in fact they are async.
Go rotine does async request and returns control to scheduler. Scheduler looks for another goroutine waiting for taking control but there is only one waiting io.
So scheduler loops doing nothing.

If you had 2, 10 or 100 concurrent goroutines then will see a better performance.
","['I', 'guess', 'following', 'lines', 'work', 'slower', 'in', 'go.', 'fmt.Fscanf(input,""%f"",&p)', 'fmt.Fprintln(output,gain+10000)', ""Go's"", 'magic', 'happens', 'when', 'you', 'do', 'IO.', 'They', 'look', 'like', 'synchronous', 'but', 'in', 'fact', 'they', 'are', 'async.', 'Go', 'rotine', 'does', 'async', 'request', 'and', 'returns', 'control', 'to', 'scheduler.', 'Scheduler', 'looks', 'for', 'another', 'goroutine', 'waiting', 'for', 'taking', 'control', 'but', 'there', 'is', 'only', 'one', 'waiting', 'io.', 'So', 'scheduler', 'loops', 'doing', 'nothing.', 'If', 'you', 'had', '2,', '10', 'or', '100', 'concurrent', 'goroutines', 'then', 'will', 'see', 'a', 'better', 'performance.']"
160,17209612,"
","['Like', 'Max,', 'my', 'strong', 'suspicion', 'was', 'that', 'the', 'slowness', 'in', 'Go', 'was', 'related', 'to', 'poor', 'I/O', 'performance.', 'I', 'tested', 'this', 'hypothesis:', 'package', 'main', 'import', '""fmt""', 'import', '""os""', 'import', '""time""', 'func', 'main', '(){', 'now', ':=', 'time.Now()', 'input', ',', '_', ':=', 'os.Open(""testing/test_cases.txt"")', 'defer', 'input.Close()', 'output', ',', '_', ':=', 'os.Create(""testing/Goutput.txt"")', 'defer', 'output.Close()', 'var', 'ncases', 'int', 'var', 'p', 'float64', 'fmt.Fscanf(input,""%d"",&ncases)', 'fmt.Println(""Opened files in "", time.Since(now), ""seconds"")', 'now', '=', 'time.Now()', 'case', 's', ':=', 'make', '([]', 'float64', ',', 'ncases', ')', 'fmt.Println(""Made array in "", time.Since(now), ""seconds"")', 'now', '=', 'time.Now()', 'for', 'i', ':=', '0', ';', 'i', '<', 'ncases', ';', 'i', '++', '{', 'fmt.Fscanf(input,""%f"",&cases[i])', '}', 'fmt.Println(""Read data in "", time.Since(now), ""seconds"")', 'now', '=', 'time.Now()', 'for', 'i', ':=', '0', ';', 'i', '<', 'ncases', ';', 'i', '++', '{', 'p', '=', 'case', 's', '[', 'i', ']', 'if', 'p', '>=', '0', '.', '5', '{', 'case', 's', '[', 'i', ']', '=', '10000', '*', '(', '1', '-', 'p', ')', '*', '(', '2', '*', 'p', '-', '1', ')', '+', '10000', '}', 'else', '{', 'case', 's', '[', 'i', ']', '=', 'p', '*(', '1', '-', '2', '*', 'p', ')*', '10000', '+', '10000', '}', '}', 'fmt.Println(""Processed data in "", time.Since(now), ""seconds"")', 'now', '=', 'time.Now()', 'for', 'i', ':=', '0', ';', 'i', '<', 'ncases', ';', 'i', '++', '{', 'fmt.Fprintln(output, cases[i])', '}', 'fmt.Println(""Output processed data in "", time.Since(now), ""seconds"")', '}', 'Running', 'it', 'produced', 'this', 'output:', 'Opened', 'files', 'in', '2.011228ms', 'seconds', 'Made', 'array', 'in', '109.904us', 'seconds', 'Read', 'data', 'in', '4.524544608s', 'seconds', 'Processed', 'data', 'in', '10.083329ms', 'seconds', 'Output', 'processed', 'data', 'in', '1.703542918s', 'seconds', 'So', 'it', 'appears', 'that', 'on', 'my', 'machine,', 'all', 'of', 'the', 'math', 'occurs', 'in', 'about', '10ms,', 'but', 'the', 'I/O', 'is', 'slow,', 'confirming', 'the', 'hypothesis.', 'As', 'pointed', 'out', 'by', 'Janne', 'in', 'the', 'comments,', 'there', 'are', 'likely', 'faster', 'options', 'than', 'fmt.', 'Update:', 'For', 'example,', 'wrapping', 'input', 'and', 'output', 'with', ""bufio's"", 'Readers', 'and', 'Writers:', 'binput', ':=', 'bufio.NewReader(input)', 'boutput', ':=', 'bufio.NewWriter(output)', 'and', 'using', 'binput', 'and', 'boutput', 'for', 'buffered', 'I/O,', 'your', 'original', 'version', 'runs', 'in', '2.1', 'seconds', 'on', 'my', 'machine,', 'somewhat', 'faster', 'than', ""Python's"", '2.7.', 'Update', '2:', 'I', 'noticed', 'that', 'I', 'was', 'getting', 'different', 'results', 'by', 'just', 'switching', 'to', 'buffered', 'I/O.', 'It', 'turns', 'out', 'that', 'you', 'also', 'need', 'to', 'adjust', 'your', 'format', 'strings', 'to', 'include', 'the', '\\n,', 'as', 'you', 'do', 'in', 'the', 'C', 'version.', 'I', 'think', 'this', 'is', 'actually', 'more', 'correct', 'either', 'way,', 'but', 'it', 'looks', 'like', 'you', 'can', 'get', 'away', 'with', 'it', 'while', 'unbuffered.', ""It's"", 'also', 'important', 'to', 'Flush()', 'your', 'buffered', 'output,', 'which', 'I', 'did', 'but', ""didn't"", 'mention', 'before.', ""Here's"", 'my', 'complete', 'buffered', 'solution:', 'package', 'main', 'import', '""fmt""', 'import', '""os""', 'import', '""bufio""', 'import', '""time""', 'func', 'main', '(){', 'now', ':=', 'time.Now()', 'nbinput', ',', '_', ':=', 'os.Open(""testing/test_cases.txt"")', 'defer', 'nbinput.Close()', 'nboutput', ',', '_', ':=', 'os.Create(""testing/Goutput.txt"")', 'defer', 'nboutput.Close()', 'binput', ':=', 'bufio.NewReader(nbinput)', 'boutput', ':=', 'bufio.NewWriter(nboutput)', 'var', 'ncases', 'int', 'var', 'gain', ',', 'p', 'float64', 'fmt.Fscanf(binput,""%d\\n"",&ncases)', 'for', 'i', ':=', '0', ';', 'i', '<', 'ncases', ';', 'i', '++', '{', 'fmt.Fscanf(binput, ""%f\\n"", &p)', 'if', 'p', '>=', '0', '.', '5', '{', 'gain', '=', '10000', '*', '(', '1', '-', 'p', ')', '*', '(', '2', '*', 'p', '-', '1', ')', '}', 'else', '{', 'gain', '=', 'p', '*(', '1', '-', '2', '*', 'p', ')*', '10000', '}', 'fmt.Fprintln(boutput, gain+10000)', '}', 'boutput.Flush()', 'fmt.Println(""Took "", time.Since(now), ""seconds"")', '}']"
161,17222252,"
","['inside', 'your', 'handler', 'function', 'call', 'r.RemoteAddr', 'to', 'receive', 'ip:port', 'like', 'this:', 'func', 'renderIndexPage', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'ip', ':=', 'strings.Split(r.RemoteAddr,"":"")', '[', '0', ']', '}', 'update', '02/15/2017', 'as', '@Aigars', 'Matulis', 'pointed', 'out,', 'in', 'current', 'version', 'there', 'is', 'already', 'a', 'function', 'todo', 'this', 'ip', ',', '_', ',', '_', ':=', 'net.SplitHostPort(r.RemoteAddr)']"
162,17266948,"There are two that I know of:


http://godoc.org/code.google.com/p/go-html-transform/css/selector is one.
https://github.com/PuerkitoBio/goquery is another


go-html-transform also comes with some tools to transform the html that matches selectors.
","['There', 'are', 'two', 'that', 'I', 'know', 'of:', 'http://godoc.org/code.google.com/p/go-html-transform/css/selector', 'is', 'one.', 'https://github.com/PuerkitoBio/goquery', 'is', 'another', 'go-html-transform', 'also', 'comes', 'with', 'some', 'tools', 'to', 'transform', 'the', 'html', 'that', 'matches', 'selectors.']"
163,17326373,"You should check out this resize library: github.com/nfnt/resize. It has 6 good interpolation functions to choose from.
","['You', 'should', 'check', 'out', 'this', 'resize', 'library:', 'github.com/nfnt/resize.', 'It', 'has', '6', 'good', 'interpolation', 'functions', 'to', 'choose', 'from.']"
164,17383819,"your Items have to be an array of interface

like this:

Items []interface{}


here is a complete example:
http://play.golang.org/p/LOXCiSmUET

when you unmarshal your json, and want to iterate over your Items you need to identify the type. when doing be aware that complex types are represented as  map[string]interface and not as struct, in such case your need to create the struct by your self
",[]
165,17518473,"I wrote go-eldoc. You can install go-eldoc with package.el from MELPA.
","['I', 'wrote', 'go-eldoc.', 'You', 'can', 'install', 'go-eldoc', 'with', 'package.el', 'from', 'MELPA.']"
166,17575156,".
","['Although', 'it', 'is', 'definitely', 'not', 'idiomatic', 'Go,', 'you', 'could', 'do', 'something', 'like', 'this:', 'type', 'Response', 'map', '[', 'string', ']', 'interface', '{}', 'func', '(', 'r', '*', 'Response', ')', 'New', '()', '{', '*', 'r', '=', 'make', '(', 'map', '[', 'string', ']', 'interface', '{})', '(*', 'r', ')[', '""hello""', ']', '=', '""World""', '(*', 'r', ')[', '""high""', ']', '=', '5', '}', 'func', 'main', '()', '{', 'var', 'r', 'Response', 'r.New()', 'for', 'k', ',', 'v', ':=', 'range', 'r', '{', 'fmt.Printf(""%s = %v\\n"", k, v)', '}', '}', 'But', 'really,', ""there's"", 'nothing', 'wrong', 'with', 'func', 'NewResponse', '()', 'Response', '.']"
167,17575176," is fine if you need to create an empty Response.
","['It', ""doesn't."", 'Go', ""doesn't"", 'have', 'constructors.', 'To', 'create', 'an', '""empty""', 'object', 'is', 'to', 'create', 'a', 'zero', 'value', 'of', 'the', 'type', 'of', 'the', 'object.', 'What', ""you're"", 'trying', 'to', 'do', 'is', 'a', 'Response', 'method', 'named', 'New', 'to', 'be', 'called', 'on', 'an', 'existing', 'Response', 'object', 'that', 'would', 'return', 'a', '(different)', 'Response', 'object.', 'resp', ':=', 'Response{}', 'or', 'resp', ':=', 'make', '(', 'Response', ')', 'is', 'fine', 'if', 'you', 'need', 'to', 'create', 'an', 'empty', 'Response.']"
168,17575641,"
","['When', 'you', 'write', 'Go', 'programs,', 'use', 'idiomatic', 'Go.', 'Then,', 'other', 'people', 'will', 'be', 'able', 'to', 'read', 'your', 'programs.', 'For', 'example,', 'package', 'main', 'import', '""fmt""', 'type', 'Response', 'map', '[', 'string', ']', 'interface', '{}', 'func', 'NewResponse', '()', 'Response', '{', 'metadata', ':=', 'map', '[', 'string', ']', 'string', '{', '""base""', ':', '""api/v1""', ',', '""self""', ':', '""/crawler/jobs/add""', ',', '}', 'r', ':=', 'Response', '{', '""status""', ':', '200', ',', '""msg""', ':', '""Added jobs to queue""', ',', '""metadata""', ':', 'metadata', ',', '}', 'return', 'r', '}', 'func', 'main', '()', '{', 'resp', ':=', 'NewResponse', '()', 'fmt.Println(resp)', '}', 'Output:', 'map', '[', 'status', ':', '200', 'msg', ':', 'Added', 'jobs', 'to', 'queue', 'metadata', ':', 'map', '[', 'base', ':', 'api/v1 self:/crawler/jobs/add]]']"
169,17595735,"

Unique error code
If errors should have specific codes due to a protocol spec, these could be embedded in the error variable. The crypto/x509 package might be used for that, even though it is probably not the case.

But when it comes to how to solve it, I think there is no best approach, nor any clearly idiomatic one. The examples above shows you ways to do it and ways it is done in the standard libraries. Take your pick.

.. but maybe not using switch statements.
","['Both', 'usage', 'are', 'good,', 'but', 'it', 'depends', 'on', 'your', 'needs.', 'If', 'you', 'find', 'it', 'useful', 'to', 'attach', 'additional', 'data', 'to', 'the', 'error', 'that', ""doesn't"", 'show', 'in', 'the', 'error', 'message,', 'then', 'the', 'approach', 'in', 'crypto/x509', 'is', 'preferable.', 'But', 'I', 'think', 'in', 'most', 'cases,', 'the', 'simple', 'error', 'string', 'as', 'found', 'in', 'the', 'errors', 'package', 'is', 'sufficient.', 'Edit', 'An', 'error', 'can', 'have', 'different', '""attributes"":', 'Describing', 'The', 'Error()', 'method', 'should', 'return', 'a', 'short', 'describing', 'error', 'message', 'Identifiable', 'By', 'letting', 'a', 'package', 'export', 'the', 'different', 'errors', 'it', 'might', 'return,', 'you', 'can', 'identify', 'them.', 'This', 'is', 'either', 'done', 'like', 'in', 'the', 'io', 'package', 'by', 'exporting', 'initialized', 'error', 'variables', 'of', 'same', 'type:', 'if', 'err', '==', 'io', '.', 'EOF', '{', '...', '}', ""// That's easy"", 'Or', 'like', 'in', 'the', 'encoding/json', 'package', 'by', 'exporting', 'the', 'different', 'error', 'types:', 'if', 'mErr', ',', 'ok', ':=', 'err', '.(*', 'json', '.', 'MarshalerError', ');', 'ok', '{', '...', '}', ""// That's fairly easy"", 'Or', 'by', 'doing', 'like', 'they', 'do', 'in', 'the', 'crypto/x509', 'package,', 'by', 'exporting', 'the', 'different', 'Reasons', '(error', 'codes):', 'if', 'e', ',', 'ok', ':=', 'err', '.(', 'x509', '.', 'CertificateInvalidError', ');', 'ok', '&&', 'e', '.', 'Reason', '==', 'x509', '.', 'Expired', '{', '...', '}', '// Well, it works', 'Unique', 'error', 'code', 'If', 'errors', 'should', 'have', 'specific', 'codes', 'due', 'to', 'a', 'protocol', 'spec,', 'these', 'could', 'be', 'embedded', 'in', 'the', 'error', 'variable.', 'The', 'crypto/x509', 'package', 'might', 'be', 'used', 'for', 'that,', 'even', 'though', 'it', 'is', 'probably', 'not', 'the', 'case.', 'But', 'when', 'it', 'comes', 'to', 'how', 'to', 'solve', 'it,', 'I', 'think', 'there', 'is', 'no', 'best', 'approach,', 'nor', 'any', 'clearly', 'idiomatic', 'one.', 'The', 'examples', 'above', 'shows', 'you', 'ways', 'to', 'do', 'it', 'and', 'ways', 'it', 'is', 'done', 'in', 'the', 'standard', 'libraries.', 'Take', 'your', 'pick.', '..', 'but', 'maybe', 'not', 'using', 'switch', 'statements.']"
170,17947530,"
","['Hope', 'that', 'helps', '(go-1.1):', 'package', 'main', 'import', '(', '""fmt""', '""reflect""', ')', 'var', 'm', '=', 'map', '[', 'string', ']', 'int', '{', '""a""', ':', '3', ',', '""b""', ':', '4', '}', 'func', 'MapKeys', '(', 'm', 'interface', '{})', '(', 'keys', '[]', 'string', ')', '{', 'v', ':=', 'reflect.ValueOf(m)', 'for', '_', ',', 'k', ':=', 'range', 'v.MapKeys()', '{', 'keys', '=', 'append', '(', 'keys', ',', 'k.Interface().(string))', '}', 'return', '}', 'func', 'main', '()', '{', 'fmt.Printf(""%#v\\n"", MapKeys(m))', '}']"
171,18013987,"Please note, that goroutines are also limited to your local maschine and that channels are not natively network enabled, i.e. your particular case is probably not biting go's chocolate site.

Also: What did you expect from throwing (suposedly) every transfer into a goroutine? IO-Operations tend to have their bottleneck where the bits hit the metal, i.e. the physical transfer of the data to the medium. Think of it like that: No matter how many Threads or (Goroutines in this case) try to write to Networkcard, you still only have one Networkcard. Most likely hitting it with to many concurrent write calls will only slow things down, since the involved overhead increases

If you think this is not the problem or want to audit your code for optimized performance, go has neat builtin features to do so: profiling go programs (official go blog)
But still the actual bottleneck might well be outside your go program AND/OR in the way it interacts with the os.

Adressing your actual problem without code is pointless guessing. Post some and everyone will try their best to help you.
","['Please', 'note,', 'that', 'goroutines', 'are', 'also', 'limited', 'to', 'your', 'local', 'maschine', 'and', 'that', 'channels', 'are', 'not', 'natively', 'network', 'enabled,', 'i.e.', 'your', 'particular', 'case', 'is', 'probably', 'not', 'biting', ""go's"", 'chocolate', 'site.', 'Also:', 'What', 'did', 'you', 'expect', 'from', 'throwing', '(suposedly)', 'every', 'transfer', 'into', 'a', 'goroutine?', 'IO-Operations', 'tend', 'to', 'have', 'their', 'bottleneck', 'where', 'the', 'bits', 'hit', 'the', 'metal,', 'i.e.', 'the', 'physical', 'transfer', 'of', 'the', 'data', 'to', 'the', 'medium.', 'Think', 'of', 'it', 'like', 'that:', 'No', 'matter', 'how', 'many', 'Threads', 'or', '(Goroutines', 'in', 'this', 'case)', 'try', 'to', 'write', 'to', 'Networkcard,', 'you', 'still', 'only', 'have', 'one', 'Networkcard.', 'Most', 'likely', 'hitting', 'it', 'with', 'to', 'many', 'concurrent', 'write', 'calls', 'will', 'only', 'slow', 'things', 'down,', 'since', 'the', 'involved', 'overhead', 'increases', 'If', 'you', 'think', 'this', 'is', 'not', 'the', 'problem', 'or', 'want', 'to', 'audit', 'your', 'code', 'for', 'optimized', 'performance,', 'go', 'has', 'neat', 'builtin', 'features', 'to', 'do', 'so:', 'profiling', 'go', 'programs', '(official', 'go', 'blog)', 'But', 'still', 'the', 'actual', 'bottleneck', 'might', 'well', 'be', 'outside', 'your', 'go', 'program', 'AND/OR', 'in', 'the', 'way', 'it', 'interacts', 'with', 'the', 'os.', 'Adressing', 'your', 'actual', 'problem', 'without', 'code', 'is', 'pointless', 'guessing.', 'Post', 'some', 'and', 'everyone', 'will', 'try', 'their', 'best', 'to', 'help', 'you.']"
172,18022615,"
","['You', 'will', 'probably', 'have', 'to', 'post', 'your', 'source', 'code', 'to', 'get', 'any', 'real', 'input,', 'but', 'just', 'to', 'be', 'sure,', 'you', 'have', 'increased', 'number', 'of', 'cpus', 'to', 'use?', 'import', '""runtime""', 'func', 'main', '()', '{', 'runtime.GOMAXPROCS(runtime.NumCPU())', '}']"
173,18170244,"There is not currently a better way than context.Errorf() and friends. Python just got pdb support in the 1.8.3 SDK. I have not heard of any similar debugger support for go. It is perhaps worth asking on the app engine go list about this.
",[]
174,18188477,"

Then you just do http request using the info transport gets from passed function to Proxy struct field. Proxy info will be taken from $HTTP_PROXY environment variable.
","['You', 'can', 'get', 'proxy', 'info', 'using', 'ProxyFromEnvironment', 'function.', 'Then', 'you', 'create', 'http', 'client', 'using', 'transport', '(represented', 'by', 'RoundTripper', 'interface)', 'that', 'has', 'info', 'about', 'your', 'proxy', 'settings:', 'var', 'PTransport', 'RoundTripper', '=', '&', 'http', '.', 'Transport', '{', 'Proxy', ':', 'http', '.', 'ProxyFromEnvironment', '}', 'client', ':=', 'http', '.', 'Client', '{', 'Transport', ':', 'PTransport', '}', 'Then', 'you', 'just', 'do', 'http', 'request', 'using', 'the', 'info', 'transport', 'gets', 'from', 'passed', 'function', 'to', 'Proxy', 'struct', 'field.', 'Proxy', 'info', 'will', 'be', 'taken', 'from', '$HTTP_PROXY', 'environment', 'variable.']"
175,18208542,"
","['This', 'is', 'what', 'I', 'would', 'do', '(untested', 'code):', 'func', 'eq', '(', 'a', ',', 'b', 'map', '[', 'string', ']', 'int', ')', 'bool', '{', 'if', 'len', '(', 'a', ')', '!=', 'len', '(', 'b', ')', '{', 'return', 'false', '}', 'for', 'k', ',', 'v', ':=', 'range', 'a', '{', 'if', 'w', ',', 'ok', ':=', 'b', '[', 'k', '];', '!', 'ok', '||', 'v', '!=', 'w', '{', 'return', 'false', '}', '}', 'return', 'true', '}']"
176,18211675,", etc). Note that it will also work on non-map values, so be careful that what you're passing to it are really two maps. If you pass it two integers, it will happily tell you whether they are equal.
","['The', 'Go', 'library', 'has', 'already', 'got', 'you', 'covered.', 'Do', 'this:', 'import', '""reflect""', '//', 'm1', 'and', 'm2', 'are', 'the', 'maps', 'we', 'want', 'to', 'compare', 'eq', ':=', 'reflect.DeepEqual(m1, m2)', 'if', 'eq', '{', 'fmt.Println(""They\'re equal."")', '}', 'else', '{', 'fmt.Println(""They\'re unequal."")', '}', 'If', 'you', 'look', 'at', 'the', 'source', 'code', 'for', ""reflect.DeepEqual's"", 'Map', 'case,', ""you'll"", 'see', 'that', 'it', 'first', 'checks', 'if', 'both', 'maps', 'are', 'nil,', 'then', 'it', 'checks', 'if', 'they', 'have', 'the', 'same', 'length', 'before', 'finally', 'checking', 'to', 'see', 'if', 'they', 'have', 'the', 'same', 'set', 'of', '(key,', 'value)', 'pairs.', 'Because', 'reflect.DeepEqual', 'takes', 'an', 'interface', 'type,', 'it', 'will', 'work', 'on', 'any', 'valid', 'map', '(', 'map', '[', 'string', ']', 'bool', ',', 'map', '[', 'struct', '{}]', 'interface', '{}', ',', 'etc).', 'Note', 'that', 'it', 'will', 'also', 'work', 'on', 'non-map', 'values,', 'so', 'be', 'careful', 'that', 'what', ""you're"", 'passing', 'to', 'it', 'are', 'really', 'two', 'maps.', 'If', 'you', 'pass', 'it', 'two', 'integers,', 'it', 'will', 'happily', 'tell', 'you', 'whether', 'they', 'are', 'equal.']"
177,18275547,"I just red about your topic in this blog:

http://joshua.themarshians.com/hardcore-google-unit-testing.html

I can't give you an example but maybe it will help.
","['I', 'just', 'red', 'about', 'your', 'topic', 'in', 'this', 'blog:', 'http://joshua.themarshians.com/hardcore-google-unit-testing.html', 'I', ""can't"", 'give', 'you', 'an', 'example', 'but', 'maybe', 'it', 'will', 'help.']"
178,18298762,"
","['To', 'check', 'if', 'website', 'is', 'accessed', 'from', 'outside,', 'check', 'remote', 'IP', 'address.', 'If', 'it', 'is', 'not', 'from', '127.0.0.1', 'or', '::1', '(IPv6)', 'then', 'it', 'is', 'outside.', 'Use', 'function', 'func', '(*', 'IPConn', ')', 'RemoteAddr', '.', 'To', 'disable', 'some', 'functions', 'check', 'the', 'above', 'condition.', 'To', 'hide', 'the', 'whole', 'site,', 'bind', 'your', 'service', 'to', 'the', 'localhost', 'interface', '(127.0.0.1)', 'only.', 'Binding', 'net.Listen(""tcp"", ""localhost:8080"")', 'or', 'net.Listen(""tcp6"", ""ip6-localhost:8080"")', 'Using', 'http', 'package', 'http.ListenAndServe(""localhost:8080"", nil)']"
179,18343326,"
","['sort.Ints', 'is', 'a', 'convenient', 'function', 'to', 'sort', 'a', 'couple', 'of', 'ints.', 'Generally', 'you', 'need', 'to', 'implement', 'the', 'sort.Interface', 'interface', 'if', 'you', 'want', 'to', 'sort', 'something', 'and', 'sort.Reverse', 'just', 'returns', 'a', 'different', 'implementation', 'of', 'that', 'interface', 'that', 'redefines', 'the', 'Less', 'method.', 'Luckily', 'the', 'sort', 'package', 'contains', 'a', 'predefined', 'type', 'called', 'IntSlice', 'that', 'implements', 'sort.Interface:', 'keys', ':=', '[]', 'int', '{', '3', ',', '2', ',', '8', ',', '1', '}', 'sort.Sort(sort.Reverse(sort.IntSlice(keys)))', 'fmt.Println(keys)']"
180,18343362,"

Playground



Output:

[25 5 4 3 1]

","['package', 'main', 'import', '(', '""fmt""', '""sort""', ')', 'func', 'main', '()', '{', 'example', ':=', '[]', 'int', '{', '1', ',', '25', ',', '3', ',', '5', ',', '4', '}', 'sort.Sort(sort.Reverse(sort.IntSlice(example)))', 'fmt.Println(example)', '}', 'Playground', 'Output:', '[25', '5', '4', '3', '1]']"
181,18399983,"It's a loose way to say that channels have an explicit size, and sends block if they're full. By itself ""bounded"" is not a well-defined term in software development, though.
","[""It's"", 'a', 'loose', 'way', 'to', 'say', 'that', 'channels', 'have', 'an', 'explicit', 'size,', 'and', 'sends', 'block', 'if', ""they're"", 'full.', 'By', 'itself', '""bounded""', 'is', 'not', 'a', 'well-defined', 'term', 'in', 'software', 'development,', 'though.']"
182,18426453,"

Obviously, the ""magic number"" of 72 should probably be replaced with something else.  There is another method called RegQueryInfoKey that can retrieve information about the registry key to allocate the correct number of bytes for the largest name and value in the key.
","['A', 'member', 'of', 'the', 'Golang', 'sub-reddit', 'pointed', 'out', 'that', 'I', 'was', 'not', 'actually', 'allocating', 'any', 'memory', 'to', 'the', 'buffers', 'passed', 'in', 'to', 'RegEnumValue.', 'As', 'such,', ""I've"", 'corrected', 'the', 'above', 'example', 'to', 'the', 'following:', 'var', 'name_length', 'uint32', '=', '72', 'var', 'key_type', 'uint32', 'var', 'lpDataLength', 'uint32', '=', '72', 'var', 'zero_uint', 'uint32', '=', '0', 'name', ':=', 'make', '([]', 'uint16', ',', '72', ')', 'lpData', ':=', 'make', '([]', 'byte', ',', '72', ')', 'win.RegEnumValue(root, zero_uint, &name[0], &name_length, nil, &key_type, &lpData[0], &lpDataLength)', 'Obviously,', 'the', '""magic', 'number""', 'of', '72', 'should', 'probably', 'be', 'replaced', 'with', 'something', 'else.', 'There', 'is', 'another', 'method', 'called', 'RegQueryInfoKey', 'that', 'can', 'retrieve', 'information', 'about', 'the', 'registry', 'key', 'to', 'allocate', 'the', 'correct', 'number', 'of', 'bytes', 'for', 'the', 'largest', 'name', 'and', 'value', 'in', 'the', 'key.']"
183,18923274,"

Related: Is ""net/http""'s use of global variables considered a good practice in golang?.
","['No', 'it', 'is', 'not', 'safe,', 'yes', 'you', 'will', 'need', 'locking', 'of', 'some', 'form.', 'Each', 'connection', 'is', 'handled', 'in', 'its', 'own', 'goroutine.', 'See', 'the', 'Serve()', 'implementation', 'for', 'details.', 'A', 'general', 'pattern', 'is', 'to', 'use', 'a', 'goroutine', 'which', 'checks', 'for', 'a', 'channel', 'and', 'accepts', 'changes', 'via', 'a', 'channel:', 'var', 'counterInput', '=', 'make', '(', 'chan', 'int', ')', 'func', 'handler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'counterInput', '<-', '1', '}', 'func', 'counter', '(', 'c', '<-', 'chan', 'int', ')', '{', 'cur', ':=', '0', 'for', 'v', ':=', 'range', 'c', '{', 'cur', '+=', 'v', '}', '}', 'func', 'main', '()', '{', 'go', 'counter', '(', 'counterInput', ')', '//', 'setup', 'http', '}', 'Related:', 'Is', '""net/http""\'s', 'use', 'of', 'global', 'variables', 'considered', 'a', 'good', 'practice', 'in', 'golang?.']"
184,18923725,"Unless I'm overlooking something, in this case, instead of using a lock (or a channel), you could use the tools found in the sync/atomic package (though you'll need to make your type either int32 or int64)

The documentation itself recommends you otherwise, though.


  These functions require great care to be used correctly. Except for special, low-level applications, synchronization is better done with channels or the facilities of the sync package. Share memory by communicating; don't communicate by sharing memory.

","['Related:', 'Is', '""net/http""\'s', 'use', 'of', 'global', 'variables', 'considered', 'a', 'good', 'practice', 'in', 'golang?.']"
185,18927729,"
","['After', ""you've"", 'retrieved', 'the', 'reflect.Value', 'of', 'the', 'field', 'by', 'using', 'Field(i)', 'you', 'can', 'get', 'a', 'interface', 'value', 'from', 'it', 'by', 'calling', 'Interface().', 'Said', 'interface', 'value', 'then', 'represents', 'the', 'value', 'of', 'the', 'field.', 'There', 'is', 'no', 'function', 'to', 'convert', 'the', 'value', 'of', 'the', 'field', 'to', 'a', 'concrete', 'type', 'as', 'there', 'are,', 'as', 'you', 'may', 'know,', 'no', 'generics', 'in', 'go.', 'Thus,', 'there', 'is', 'no', 'function', 'with', 'the', 'signature', 'GetValue()', 'T', 'with', 'T', 'being', 'the', 'type', 'of', 'that', 'field', '(which', 'changes', 'of', 'course,', 'depending', 'on', 'the', 'field).', 'The', 'closest', 'you', 'can', 'achieve', 'in', 'go', 'is', 'GetValue', '()', 'interface', '{}', 'and', 'this', 'is', 'exactly', 'what', 'reflect', '.', 'Value.Interface()', 'offers.', 'The', 'following', 'code', 'illustrates', 'how', 'to', 'get', 'the', 'values', 'of', 'each', 'exported', 'field', 'in', 'a', 'struct', 'using', 'reflection', '(play):', 'import', '(', '""fmt""', '""reflect""', ')', 'func', 'main', '()', '{', 'x', ':=', 'struct', '{', 'Foo', 'string', ';', 'Bar', 'int', '}{', '""foo""', ',', '2', '}', 'v', ':=', 'reflect.ValueOf(x)', 'values', ':=', 'make', '([]', 'interface', '{},', 'v.NumField())', 'for', 'i', ':=', '0', ';', 'i', '<', 'v.NumField()', ';', 'i', '++', '{', 'values', '[', 'i', ']', '=', 'v.Field(i).Interface()', '}', 'fmt.Println(values)', '}']"
186,18931215,"
","['Using', 'a', 'bufio.Scanner', 'makes', 'things', 'nice.', ""I've"", 'also', 'used', 'an', 'io.Reader', 'rather', 'than', 'taking', 'a', 'filename.', 'Often', ""that's"", 'a', 'good', 'technique,', 'since', 'it', 'allows', 'the', 'code', 'to', 'be', 'used', 'on', 'any', 'file-like', 'object', 'and', 'not', 'just', 'a', 'file', 'on', 'disk.', 'Here', ""it's"", '""reading""', 'from', 'a', 'string.', 'package', 'main', 'import', '(', '""bufio""', '""fmt""', '""io""', '""strconv""', '""strings""', ')', '//', 'ReadInts', 'reads', 'whitespace-separated', 'ints', 'from', 'r.', 'If', ""there's"", 'an', 'error,', 'it', '//', 'returns', 'the', 'ints', 'successfully', 'read', 'so', 'far', 'as', 'well', 'as', 'the', 'error', 'value.', 'func', 'ReadInts', '(', 'r', 'io', '.', 'Reader', ')', '([]', 'int', ',', 'error', ')', '{', 'scanner', ':=', 'bufio.NewScanner(r)', 'scanner.Split(bufio.ScanWords)', 'var', 'result', '[]', 'int', 'for', 'scanner.Scan()', '{', 'x', ',', 'err', ':=', 'strconv.Atoi(scanner.Text())', 'if', 'err', '!=', 'nil', '{', 'return', 'result', ',', 'err', '}', 'result', '=', 'append', '(', 'result', ',', 'x', ')', '}', 'return', 'result', ',', 'scanner.Err()', '}', 'func', 'main', '()', '{', 'tf', ':=', '""1\\n2\\n3\\n4\\n5\\n6""', 'ints', ',', 'err', ':=', 'ReadInts', '(', 'strings.NewReader(tf))', 'fmt.Println(ints, err)', '}']"
187,18973915,"

on OS X. But, more importantly, you should call glfwInit (or it's equivalent glfw.Init) prior to calling any other GLFW3 function. AFAIK, only glfwSetErrorCallback can be used prior to this call.
","['Since', 'this', 'is', 'a', 'C', 'library', 'wrapper,', 'you', 'might', 'also', 'need', 'the', 'equivalent', 'of:', 'glfwWindowHint', '(', 'GLFW_OPENGL_FORWARD_COMPAT', ',', 'GL_TRUE', ');', 'on', 'OS', 'X.', 'But,', 'more', 'importantly,', 'you', 'should', 'call', 'glfwInit', '(or', ""it's"", 'equivalent', 'glfw.Init)', 'prior', 'to', 'calling', 'any', 'other', 'GLFW3', 'function.', 'AFAIK,', 'only', 'glfwSetErrorCallback', 'can', 'be', 'used', 'prior', 'to', 'this', 'call.']"
188,19088749," and pass those animals around.

Again: The ""prefered way"" is to remodel the solution without inheritance.
","['but', 'I', 'suspect', 'there', 'should', 'be', 'some', 'idiom', 'or', 'best', 'practice', 'for', 'simulating', 'this.', 'No', 'there', ""isn't."", 'If', 'something', 'like', 'that', 'does', 'come', 'up', '(and', 'it', ""doesn't"", 'very', 'often', 'in', 'real', 'code,', 'but', 'mostly', 'in', 'translations', 'of', 'Java/Ruby/whatever', 'code):', 'interface', 'Named', '{', 'Name', '()', 'string', '}', 'and', 'interface', 'Sounder', '{', 'Sound', '()', '}', 'combined', 'to', 'interface', 'Animal', '{', 'Named', ',', 'Sounder', '}', 'and', 'pass', 'those', 'animals', 'around.', 'Again:', 'The', '""prefered', 'way""', 'is', 'to', 'remodel', 'the', 'solution', 'without', 'inheritance.']"
189,19090667,"

Produces:


  
    mooo
    woof
  


Playgound link

EDIT: There's a quote from Rob Pike regarding this subject:


  
    Go takes an unusual approach to object-oriented programming, allowing methods on any type, not just classes, but without any form of type-based inheritance like subclassing. This means there is no type hierarchy. This was an intentional design choice. Although type hierarchies have been used to build much successful software, it is our opinion that the model has been overused and that it is worth taking a step back.
  

","['I', 'think', 'the', 'confusion', 'may', 'be', 'coming', 'from', 'constructing', 'the', 'instances', 'using', 'composite', 'literals.', 'These', 'are', 'perfect', 'for', 'creating', 'complex', 'types', 'in', 'single', 'lines,', 'and', 'manage,', 'as', 'the', 'previous', 'link', 'suggests,', 'to', 'cut', 'down', 'on', 'boiler-plate', 'code.', 'Sometimes', 'however,', 'the', 'code', 'may', 'be', 'simpler', 'and', 'more', 'readable', 'by', 'doing', 'things', 'more', 'explicitly.', 'I', 'find', 'this', 'is', 'sometimes', 'the', 'case', 'when', 'taking', 'advantage', 'of', 'Embedding.', 'To', 'quote', 'the', 'previous', 'link:', 'The', 'methods', 'of', 'embedded', 'types', 'come', 'along', 'for', 'free', 'You', ""aren't"", 'delegating', 'to', 'the', ""sub-class's"", 'sound', 'method,', 'but', 'the', 'setting', 'and', 'getting', 'of', 'the', '""sub-class""', 'sound', 'transparently', 'uses', 'the', 'sound', 'field', 'of', 'Animal', 'So', 'my', 'preferred', 'way', 'of', 'doing', 'this', 'would', 'be', 'something', 'like:', 'package', 'main', 'import', '""fmt""', 'type', 'Animal', 'struct', '{', 'name', 'string', 'sound', 'string', '}', 'type', 'Cow', 'struct', '{', 'Animal', '}', 'type', 'Dog', 'struct', '{', 'Animal', '}', 'func', '(', 'a', '*', 'Animal', ')', 'Speak', '()', 'string', '{', 'return', 'fmt.Sprintf(""%s"", a.sound)', '}', 'func', 'main', '()', '{', 'c', ':=', 'new', '(', 'Cow', ')', 'd', ':=', 'new', '(', 'Dog', ')', 'c', '.', 'name', ',', 'c', '.', 'sound', '=', '""Bessie""', ',', '""mooo""', 'd', '.', 'name', ',', 'd', '.', 'sound', '=', '""Sparky""', ',', '""woof""', 'fmt.Println(c.Speak())', 'fmt.Println(d.Speak())', '}', 'Produces:', 'mooo', 'woof', 'Playgound', 'link', 'EDIT:', ""There's"", 'a', 'quote', 'from', 'Rob', 'Pike', 'regarding', 'this', 'subject:', 'Go', 'takes', 'an', 'unusual', 'approach', 'to', 'object-oriented', 'programming,', 'allowing', 'methods', 'on', 'any', 'type,', 'not', 'just', 'classes,', 'but', 'without', 'any', 'form', 'of', 'type-based', 'inheritance', 'like', 'subclassing.', 'This', 'means', 'there', 'is', 'no', 'type', 'hierarchy.', 'This', 'was', 'an', 'intentional', 'design', 'choice.', 'Although', 'type', 'hierarchies', 'have', 'been', 'used', 'to', 'build', 'much', 'successful', 'software,', 'it', 'is', 'our', 'opinion', 'that', 'the', 'model', 'has', 'been', 'overused', 'and', 'that', 'it', 'is', 'worth', 'taking', 'a', 'step', 'back.']"
190,19092690,"
","['What', 'about', 'this?', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'Sounder', 'interface', '{', 'Sound', '()', 'string', '}', 'type', 'Animal', 'struct', '{', 'Name', 'string', 'Sounder', 'Sounder', '}', 'func', '(', 'a', '*', 'Animal', ')', 'Speak', '()', '{', 'fmt.Printf(""%s says %s.\\n"", a.Name, a.Sounder.Sound())', '}', 'type', 'StringSounder', 'string', 'func', '(', 'f', 'StringSounder', ')', 'Sound', '()', 'string', '{', 'return', 'string', '(', 'f', ')', '}', 'func', 'main', '()', '{', 'd', ':=', '&', 'Animal', '{', '""Sparky""', ',', 'StringSounder', '(', '""woof""', ')}', 'c', ':=', '&', 'Animal', '{', '""Bessie""', ',', 'StringSounder', '(', '""mooo""', ')}', 'd.Speak()', 'c.Speak()', '}']"
191,19100993,"

Play link w/ main: http://play.golang.org/p/YXX6opX8Cy
","['You', ""can't"", 'attach', 'non-interface', 'methods', 'to', 'an', 'interface.', 'If', 'an', 'animal', 'is', 'to', 'speak', 'they', 'need', 'both', 'a', 'name', 'and', 'a', 'sound.', 'Also', 'you', 'can', 'embed', 'private', 'types', 'and', 'what', ""you've"", 'embedded', 'is', 'an', 'implementation', 'detail.', 'Given', 'these', 'insights', 'I', 'think', 'this', 'is', 'what', ""you're"", 'after.', 'package', 'farm', 'type', 'Animal', 'interface', '{', 'Name', '()', 'string', 'Sound', '()', 'string', '}', 'func', 'Speak', '(', 'a', 'Animal', ')', 'string', '{', 'return', 'a.Name() + "" says "" + a.Sound()', '}', 'type', 'animal', 'struct', '{', 'name', 'string', '}', 'func', '(', 'a', '*', 'animal', ')', 'Name', '()', 'string', '{', 'return', 'a', '.', 'name', '}', 'type', 'Cow', 'struct', '{', 'animal', '}', 'func', 'NewCow', '(', 'name', 'string', ')', '*', 'Cow', '{', 'return', '&', 'Cow', '{', 'animal', '{', 'name', '}}', '}', 'func', '(', 'c', '*', 'Cow', ')', 'Sound', '()', 'string', '{', 'return', '""mooo""', '}', 'type', 'Dog', 'struct', '{', 'animal', '}', 'func', 'NewDog', '(', 'name', 'string', ')', '*', 'Dog', '{', 'return', '&', 'Dog', '{', 'animal', '{', 'name', '}}', '}', 'func', '(', 'c', '*', 'Dog', ')', 'Sound', '()', 'string', '{', 'return', '""woof""', '}', 'with', 'a', 'main', 'like', 'this:', 'package', 'main', 'import', '""fmt""', 'import', '""farm""', 'func', 'main', '()', '{', 'c', ':=', 'farm.NewCow(""Betsy"")', 'd', ':=', 'farm.NewDog(""Sparky"")', '//', '""In', 'classic', 'OOO', ""you'd"", 'write', 'c.Speak()""', 'fmt.Println(farm.Speak(c))', 'fmt.Println(farm.Speak(d))', '}', 'Play', 'link', 'w/', 'main:', 'http://play.golang.org/p/YXX6opX8Cy']"
192,19122746,"
","['By', 'looking', 'at', 'the', '.Weekday()', 'of', 'the', 'time,', 'you', 'can', 'compute', 'the', 'first', 'Monday.', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', '//', 'FirstMonday', 'returns', 'the', 'day', 'of', 'the', 'first', 'Monday', 'in', 'the', 'given', 'month.', 'func', 'FirstMonday', '(', 'year', 'int', ',', 'month', 'time', '.', 'Month', ')', 'int', '{', 't', ':=', 'time.Date(year, month, 1, 0, 0, 0, 0, time.UTC)', 'return', '(', '8', '-', 'int', '(', 't.Weekday()))', '%', '7', '+', '1', '}', 'func', 'main', '()', '{', 'for', 'm', ':=', '1', ';', 'm', '<=', '12', ';', 'm', '++', '{', 'fmt.Println(m, FirstMonday(2013, time.Month(m)))', '}', '}']"
193,19244880,"I think this is because you're using Start instead of Run.


  
    Start starts the specified command but does not wait for it to complete.
  


whereas:


  
    Run starts the specified command and waits for it to complete.
  


Therefore Start will just handover the process to the operating system when the Go (parent) process exits.
",[]
194,19245284,"What's happening is that if you send a process SIGINT (as e.g. os.Interrupt does), all proceses in the same process group will also get that signal (which includes child processes) - SIGINT will by default terminate a process. 

If however a parent process exits normally, not because of SIGINT or similar, a process in the same process group does not get any signal - it will continue to run, but be adopted by the init process. This is not specific to Go. 
","[""What's"", 'happening', 'is', 'that', 'if', 'you', 'send', 'a', 'process', 'SIGINT', '(as', 'e.g.', 'os.Interrupt', 'does),', 'all', 'proceses', 'in', 'the', 'same', 'process', 'group', 'will', 'also', 'get', 'that', 'signal', '(which', 'includes', 'child', 'processes)', '-', 'SIGINT', 'will', 'by', 'default', 'terminate', 'a', 'process.', 'If', 'however', 'a', 'parent', 'process', 'exits', 'normally,', 'not', 'because', 'of', 'SIGINT', 'or', 'similar,', 'a', 'process', 'in', 'the', 'same', 'process', 'group', 'does', 'not', 'get', 'any', 'signal', '-', 'it', 'will', 'continue', 'to', 'run,', 'but', 'be', 'adopted', 'by', 'the', 'init', 'process.', 'This', 'is', 'not', 'specific', 'to', 'Go.']"
195,19414475,"Working backwords, you end up here

http://golang.org/pkg/encoding/csv/#Reader.Read

reader is of type csv.Reader, which has Read defined on it.
","['Working', 'backwords,', 'you', 'end', 'up', 'here', 'http://golang.org/pkg/encoding/csv/#Reader.Read', 'reader', 'is', 'of', 'type', 'csv.Reader,', 'which', 'has', 'Read', 'defined', 'on', 'it.']"
196,19440853,"It is not clear what you want , but perhaps http://play.golang.org/p/YfGDtIuuBw will help. It uses EnumWindows to find window with a particular title.

Alex
","['It', 'is', 'not', 'clear', 'what', 'you', 'want', ',', 'but', 'perhaps', 'http://play.golang.org/p/YfGDtIuuBw', 'will', 'help.', 'It', 'uses', 'EnumWindows', 'to', 'find', 'window', 'with', 'a', 'particular', 'title.', 'Alex']"
197,19445765,"

Note bene : Two shell restarts are required - found it myself in a hard way.
","['Works', 'like', 'a', 'charm', ':', 'root', 'Ubuntu', '-', '1304', '-', 'raring', '-', '64', '-', 'minimal', ':/', 'etc', 'uname', '-', 'a', 'Linux', 'Ubuntu', '-', '1304', '-', 'raring', '-', '64', '-', 'minimal', '3', '.', '8', '.', '13', '.', '4', '2', 'SMP', 'Mon', 'Jul', '8', '23', ':', '59', ':', '05', 'CEST', '2013', 'x86_64', 'x86_64', 'x86_64', 'GNU/Linux', 'do', 'this', 'sequence', ':', 'cd', '/usr/local', 'mkdir', '/var/go', 'apt', '-', 'get', 'install', 'mercurial', 'hg', 'clone', 'https', '://', 'code', '.', 'go', 'ogle', '.', 'com/p/go/', 'After', 'that', 'create', 'a', '/etc/profile.d/go.sh', 'with', 'the', 'follewing', 'contents', 'and', 'make', 'it', 'executable:', 'export', 'GOPATH', '=/', 'var', '/', 'go', 'export', 'GOROOT', '=/', 'usr/local/go', 'export', 'GOBIN', '=$', 'GOPATH/bin', 'export', 'PATH', '=$', 'PATH', ':$', 'GOBIN', 'export', 'GOROOT_FINAL', '=/', 'var', '/', 'go', 'export', 'GOHOSTARCH', '=', 'amd64', 'export', 'GOARCH', '=', 'amd64', 'export', 'CGO_ENABLED', '=', '1', 'And', 'then', 'restart', 'your', 'shell.', 'NO', 'source', 'xxx', 'will', 'be', 'working', 'properly', '-', 'be', 'warned!', 'In', 'a', 'new', 'shell', 'do', 'this', ':', 'cd', '/usr/local/go/src', './', 'make', '.', 'bash', 'do', 'the', 'thing,', 'and', 'then', 'copy', 'all', 'the', 'things', 'from', '/usr/local/go', 'to', '/var/go', '-', 'or', ""there's"", 'a', 'way', 'to', 'merge', 'both', 'directories', 'by', 'symlink,', 'whatever', 'you', 'prefer.', 'After', 'that', 'comment', 'GOROOT_FINAL', 'in', 'go.sh', 'script', 'above', 'AND', 'restart', 'your', 'shell', 'again.', 'And', ""you're"", 'ok', 'with', 'latest', 'working', 'Go', 'language!', 'root', 'Ubuntu', '-', '1304', '-', 'raring', '-', '64', '-', 'minimal', ':/', 'usr/work/golang/go/src#', 'go', 'version', 'go', 'version', 'devel', '+', '35', 'd5bae6aac8', 'Fri', 'Oct', '18', '10', ':', '45', ':', '19', '2013', '+', '04', '0', '0', 'linux/amd64', 'Note', 'bene', ':', 'Two', 'shell', 'restarts', 'are', 'required', '-', 'found', 'it', 'myself', 'in', 'a', 'hard', 'way.']"
198,19579529,"

as suggested here; I don't know, I don't have a Windows machine handy.



Sidenote:


  Get-Command date says ""The term 'date' is not recognized as the name of a cmdlet""


There are exactly two Google results for that phrase. One of them leads me to this, which helped me figure this out.
","['Sadly,', 'that', 'example', ""isn't"", 'going', 'to', 'work', 'for', 'you', 'unless', 'you', 'get', 'a', 'date.exe', 'from', 'somewhere', '(Cygwin?)', 'and', 'put', 'in', 'on', 'your', '%PATH%.', ""What's"", 'going', 'on,', 'I', 'believe,', 'is', 'that', 'date', 'is', 'a', 'builtin', 'in', 'Powershell.', 'It', 'works', 'for', 'you', 'because', 'your', 'shell', 'is', 'interpreting', 'it.', 'You', 'may', 'be', 'able', 'to', 'do', 'out', ',', 'err', ':=', 'exec.Command(""cmd"", ""/C"", ""date"").Output()', 'as', 'suggested', 'here;', 'I', ""don't"", 'know,', 'I', ""don't"", 'have', 'a', 'Windows', 'machine', 'handy.', 'Sidenote:', 'Get-Command', 'date', 'says', '""The', 'term', ""'date'"", 'is', 'not', 'recognized', 'as', 'the', 'name', 'of', 'a', 'cmdlet""', 'There', 'are', 'exactly', 'two', 'Google', 'results', 'for', 'that', 'phrase.', 'One', 'of', 'them', 'leads', 'me', 'to', 'this,', 'which', 'helped', 'me', 'figure', 'this', 'out.']"
199,19579557,"
","['On', 'windows', 'since', 'date', 'is', 'not', 'a', 'executable,', 'I', 'changed', 'your', 'code', 'to', 'run', 'as', 'follows:', 'out', ',', 'err', ':=', 'exec.Command(""cmd.exe"", "" /c date /t"").Output()', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'fmt.Printf(""The date is %s\\n"", out)', 'The', 'output:', 'The', 'date', 'is', 'Fri', '25/10/2013']"
200,19580785,"
","['You', 'need', 'to', 'use', 'the', 'go/doc', 'package', 'to', 'extract', 'documentation', 'from', 'the', 'ast:', 'package', 'main', 'import', '(', '""fmt""', '""go/doc""', '""go/parser""', '""go/token""', ')', '//', 'FirstType', 'docs', 'type', 'FirstType', 'struct', '{', '//', 'FirstMember', 'docs', 'FirstMember', 'string', '}', '//', 'SecondType', 'docs', 'type', 'SecondType', 'struct', '{', '//', 'SecondMember', 'docs', 'SecondMember', 'string', '}', '//', 'Main', 'docs', 'func', 'main', '()', '{', 'fset', ':=', 'token.NewFileSet()', '// positions are relative to fset', 'd', ',', 'err', ':=', 'parser.ParseDir(fset, ""./"", nil, parser.ParseComments)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'for', 'k', ',', 'f', ':=', 'range', 'd', '{', 'fmt.Println(""package"", k)', 'p', ':=', 'doc.New(f, ""./"", 0)', 'for', '_', ',', 't', ':=', 'range', 'p', '.', 'Types', '{', 'fmt.Println(""  type"", t.Name)', 'fmt.Println(""    docs:"", t.Doc)', '}', '}', '}']"
201,19847766,"Have you looked at the runtime package? It has a GOOS const: http://golang.org/pkg/runtime/#pkg-constants
","['Have', 'you', 'looked', 'at', 'the', 'runtime', 'package?', 'It', 'has', 'a', 'GOOS', 'const:', 'http://golang.org/pkg/runtime/#pkg-constants']"
202,19847868,"

While this is compiled into the runtime and therefore ignores the environment, 
you can nevertheless be relatively certain that the value is correct. 
The reason for this is that every platform that is worth distinguishing needs 
rebuilding due to different executable formats and thus has a new GOOS value.
","['Detection', 'at', 'compile', 'time', 'If', ""you're"", 'doing', 'this', 'to', 'have', 'different', 'implementations', 'depending', 'on', 'the', 'OS,', 'it', 'is', 'more', 'useful', 'to', 'have', 'separate', 'files', 'with', 'the', 'implementation', 'of', 'that', 'feature', 'and', 'add', 'build', 'tags', 'to', 'each', 'of', 'the', 'files.', 'This', 'is', 'used', 'in', 'many', 'places', 'in', 'the', 'standard', 'library,', 'for', 'example', 'in', 'the', 'os', 'package.', 'These', 'so', 'called', ""'Build"", ""constraints'"", 'or', ""'Build"", ""tags'"", 'are', 'explained', 'here.', 'Say', 'you', 'have', 'the', 'constant', 'PATH_SEPARATOR', 'and', 'you', 'want', 'that', 'platform', 'dependant,', 'you', 'would', 'make', 'two', 'files,', 'one', 'for', 'windows', 'and', 'one', 'for', 'the', '(unix)', 'rest:', '/project/path_windows.go', '/project/path_unix.go', 'The', 'code', 'of', 'these', 'files', 'would', 'then', 'be:', 'path_windows.go', 'package', 'project', 'const', 'PATH_SEPARATOR', '=', ""'\\\\'"", 'path_unix.go', 'package', 'project', 'const', 'PATH_SEPARATOR', '=', ""'/'"", 'You', 'can', 'now', 'access', 'PATH_SEPARATOR', 'in', 'your', 'code', 'and', 'have', 'it', 'platform', 'dependant.', 'Detection', 'at', 'runtime', 'If', 'you', 'want', 'to', 'determine', 'the', 'operating', 'system', 'at', 'runtime,', 'use', 'the', 'runtime.GOOS', 'variable:', 'if', 'runtime', '.', 'GOOS', '==', '""windows""', '{', 'fmt.Println(""Hello from Windows"")', '}', 'While', 'this', 'is', 'compiled', 'into', 'the', 'runtime', 'and', 'therefore', 'ignores', 'the', 'environment,', 'you', 'can', 'nevertheless', 'be', 'relatively', 'certain', 'that', 'the', 'value', 'is', 'correct.', 'The', 'reason', 'for', 'this', 'is', 'that', 'every', 'platform', 'that', 'is', 'worth', 'distinguishing', 'needs', 'rebuilding', 'due', 'to', 'different', 'executable', 'formats', 'and', 'thus', 'has', 'a', 'new', 'GOOS', 'value.']"
203,19860606,"This error message implies a roundtrip to the database took longer than the timeout period you defined. Just increasing that timeout should get rid of the problem, assuming you don't have any real issues that are causing the application to behave in a sluggish manner.

In general, this error doesn't imply you have any kind of scale issues, other than the fact maybe you have an increasing amount of data in some collections and certain queries may be getting too slow and need re-thinking (indexes, etc).

There's also no need to restart the application. You can either Refresh the problematic session, or Close and re-create the session in case you're using copies of a master session. The state of mgo and the pool of connections is still fine. It's just warning you that this specific session observed an issue on the wire, and so you have to acknowledge it before the session will be valid again.

As usual, also make sure to be using the latest release to avoid problems that have already been fixed, if any.
","['This', 'error', 'message', 'implies', 'a', 'roundtrip', 'to', 'the', 'database', 'took', 'longer', 'than', 'the', 'timeout', 'period', 'you', 'defined.', 'Just', 'increasing', 'that', 'timeout', 'should', 'get', 'rid', 'of', 'the', 'problem,', 'assuming', 'you', ""don't"", 'have', 'any', 'real', 'issues', 'that', 'are', 'causing', 'the', 'application', 'to', 'behave', 'in', 'a', 'sluggish', 'manner.', 'In', 'general,', 'this', 'error', ""doesn't"", 'imply', 'you', 'have', 'any', 'kind', 'of', 'scale', 'issues,', 'other', 'than', 'the', 'fact', 'maybe', 'you', 'have', 'an', 'increasing', 'amount', 'of', 'data', 'in', 'some', 'collections', 'and', 'certain', 'queries', 'may', 'be', 'getting', 'too', 'slow', 'and', 'need', 're-thinking', '(indexes,', 'etc).', ""There's"", 'also', 'no', 'need', 'to', 'restart', 'the', 'application.', 'You', 'can', 'either', 'Refresh', 'the', 'problematic', 'session,', 'or', 'Close', 'and', 're-create', 'the', 'session', 'in', 'case', ""you're"", 'using', 'copies', 'of', 'a', 'master', 'session.', 'The', 'state', 'of', 'mgo', 'and', 'the', 'pool', 'of', 'connections', 'is', 'still', 'fine.', ""It's"", 'just', 'warning', 'you', 'that', 'this', 'specific', 'session', 'observed', 'an', 'issue', 'on', 'the', 'wire,', 'and', 'so', 'you', 'have', 'to', 'acknowledge', 'it', 'before', 'the', 'session', 'will', 'be', 'valid', 'again.', 'As', 'usual,', 'also', 'make', 'sure', 'to', 'be', 'using', 'the', 'latest', 'release', 'to', 'avoid', 'problems', 'that', 'have', 'already', 'been', 'fixed,', 'if', 'any.']"
204,19886142,"In the tutorial, you created the file TestPage previously.  Which is the page you should be navigating to when you first build the server.  In the tutorial, they have you navigate to view/test instead of view/TestPage as you should which is what creates the confusion.
","['While', 'this', 'is', 'compiled', 'into', 'the', 'runtime', 'and', 'therefore', 'ignores', 'the', 'environment,', 'you', 'can', 'nevertheless', 'be', 'relatively', 'certain', 'that', 'the', 'value', 'is', 'correct.', 'The', 'reason', 'for', 'this', 'is', 'that', 'every', 'platform', 'that', 'is', 'worth', 'distinguishing', 'needs', 'rebuilding', 'due', 'to', 'different', 'executable', 'formats', 'and', 'thus', 'has', 'a', 'new', 'GOOS', 'value.']"
205,19908214,"

Note that because of the way I defined the iteration, you cannot use negative steps in my simple Go version, but you can define something a bit more robust if you need to.
","['None', 'that', 'I', 'am', 'aware', 'of.', 'You', 'can', 'define', 'your', 'own', 'though:', 'import', '""math""', 'func', 'arange', '(', 'start', ',', 'stop', ',', 'step', 'float64', ')', '[]', 'float64', '{', 'N', ':=', 'int', '(', 'math.Ceil((stop - start) / step))', ';', 'rnge', ':=', 'make', '([]', 'float64', ',', 'N', ',', 'N', ')', 'i', ':=', '0', 'for', 'x', ':=', 'start', ';', 'x', '<', 'stop', ';', 'x', '+=', 'step', '{', 'rnge', '[', 'i', ']', '=', 'x', ';', 'i', '+=', '1', '}', 'return', 'rnge', '}', 'which', 'returns:', 'arange', '(', '0', '.,', '10', '.,', '0', '.', '5', ')', '[', '0', '0', '.', '5', '1', '1', '.', '5', '2', '2', '.', '5', '3', '3', '.', '5', '4', '4', '.', '5', '5', '5', '.', '5', '6', '6', '.', '5', '7', '7', '.', '5', '8', '8', '.', '5', '9', '9', '.', '5', ']', 'Corresponding', 'to', 'the', 'Python:', '>>>', 'np.arange(0., 10., 0.5)', 'array', '([', '0', '.', ',', '0', '.', '5', ',', '1', '.', ',', '1', '.', '5', ',', '2', '.', ',', '2', '.', '5', ',', '3', '.', ',', '3', '.', '5', ',', '4', '.', ',', '4', '.', '5', ',', '5', '.', ',', '5', '.', '5', ',', '6', '.', ',', '6', '.', '5', ',', '7', '.', ',', '7', '.', '5', ',', '8', '.', ',', '8', '.', '5', ',', '9', '.', ',', '9', '.', '5', '])', 'Note', 'that', 'because', 'of', 'the', 'way', 'I', 'defined', 'the', 'iteration,', 'you', 'cannot', 'use', 'negative', 'steps', 'in', 'my', 'simple', 'Go', 'version,', 'but', 'you', 'can', 'define', 'something', 'a', 'bit', 'more', 'robust', 'if', 'you', 'need', 'to.']"
206,19923071,"

http://play.golang.org/p/U67abBaBbv
","['Based', 'on', ""val's"", 'solution,', 'I', 'would', 'suggest', 'to', 'avoid', 'using', '""x+=step""', 'because', 'depending', 'on', 'the', 'limits', 'and', 'the', 'step,', 'rounding', 'errors', 'will', 'accumulate', 'and', 'you', 'may', 'leave', 'the', 'last', 'value', 'undefined', 'or', 'even', 'worse,', 'try', 'to', 'define', 'the', 'N+1', 'value,', 'causing', 'a', 'panic.', 'This', 'could', 'be', 'solved', 'with:', 'func', 'arange2', '(', 'start', ',', 'stop', ',', 'step', 'float64', ')', '[]', 'float64', '{', 'N', ':=', 'int', '(', 'math.Ceil((stop - start) / step))', 'rnge', ':=', 'make', '([]', 'float64', ',', 'N', ')', 'for', 'x', ':=', 'range', 'rnge', '{', 'rnge', '[', 'x', ']', '=', 'start', '+', 'step', '*', 'float64', '(', 'x', ')', '}', 'return', 'rnge', '}', 'http://play.golang.org/p/U67abBaBbv']"
207,19958942,"
","['For', 'example:', 'func', 'serveHTTP', '()', '{', 'http.ListenAndServe(...)', '}', 'func', 'serveCustom', '()', '{', 'net.Listen(""tcp"", ...)', '}', 'go', 'serveHTTP', '()', 'go', 'serveCustom', '()']"
208,20024383,"Why wouldn't calling the function work? The data for mux.Vars() is stored in a global context that maps requests into the relevant data. As long as you pass the same request pointer into the handler, it will be able to access mux.Vars().
",[]
209,20107241,"
","['Originally', 'I', 'thought', 'that', 'fmt.Fprintf', 'may', 'be', 'changing', 'the', 'request', 'data', 'on', 'the', 'way', 'out,', 'but', 'this', 'example', 'seems', 'to', 'work', 'OK.', 'However,', 'I', 'would', 'still', 'recommend', 'using', 'the', 'lower-level', 'Write/Read', 'instead', 'of', 'fmt', '.', 'Fprintf/ioutil.ReadAll', ':', 'req', ':=', '[]', 'byte', '{', '0', 'x01', ',', '0', 'x03', ',', '0', 'x00', ',', '0', 'x01', ',', '0', 'x00', ',', '0', 'x01', ',', '0xd5', ',', '0xca', '}', 'n', ',', 'err', ':=', 'conn.Write(req)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""write error:"", err)', 'return', '}', 'fmt.Printf(""wrote %d bytes for request: %#v"", n, req)', 'rsp', ':=', 'make', '([]', 'byte', ',', '64', ')', 'n', ',', 'err', '=', 'conn.Read(rsp)', 'fmt.Printf(""received %d bytes in response: %#v"", n, rsp[:n])', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""read error:"", err)', '}']"
210,20154730,"
","['type', 'Response2', 'struct', '{', 'method', 'string', 'bc', 'string', 'gc', '[]', 'string', '}', 'The', 'name', 'of', 'the', 'fields', 'Must', 'be', 'Uppercase', 'otherwise', 'the', 'Json', 'module', ""can't"", 'access', 'them', '(they', 'are', 'private', 'to', 'your', 'module).', 'You', 'can', 'use', 'the', 'json', 'tag', 'to', 'specify', 'a', 'match', 'between', 'Field', 'and', 'name', 'type', 'Response2', 'struct', '{', 'Method', 'string', 'json', ':', '""method""', 'Bc', 'string', 'json', ':', '""bc""', 'Gc', '[]', 'string', 'json', ':', '""gc""', '}']"
211,20165159," and callers must provide a slice of Statments. This is much clearer and callers can either convert their stuff to []Statement or directly construct a []Statement.
","['The', 'very', 'short', 'answer', 'to', 'your', '(long)', 'question', 'is:', 'No.', 'I', ""don't"", 'think', 'that', 'your', 'solution', 'of', 'ConvertToStatment', 'and', 'Replay', 'taking', 'an', 'empty', 'interface', 'is', 'a', '""nice""', 'solution:', ""I'd"", 'prefer', 'func', 'Replay', '([]', 'Statement', ')', 'and', 'callers', 'must', 'provide', 'a', 'slice', 'of', 'Statments.', 'This', 'is', 'much', 'clearer', 'and', 'callers', 'can', 'either', 'convert', 'their', 'stuff', 'to', '[]Statement', 'or', 'directly', 'construct', 'a', '[]Statement.']"
212,20168565,"The in-memory layout of a []Quote slice is different to a []Statement slice, so this is not possible.

The backing array of the []Quote slice will consist of the sequential Quote structs, while the []Statement slice's backing array consists of interface variables.  As well as holding the Quote struct (or whatever other type implements the interface), the interface variable also stores a pointer to type information for the contained value.  This is needed to determine how to dispatch the Say method call.

The different data layout means that you can't interchange the two slice types, not even through unsafe casts: if you have one type and need the other you'll need to manually convert between them.
","['and', 'callers', 'must', 'provide', 'a', 'slice', 'of', 'Statments.', 'This', 'is', 'much', 'clearer', 'and', 'callers', 'can', 'either', 'convert', 'their', 'stuff', 'to', '[]Statement', 'or', 'directly', 'construct', 'a', '[]Statement.']"
213,20202666,"
","['One', 'solution', 'is', 'to', 'make', 'use', 'of', 'the', 'html/template', 'functionality,', 'create', 'all', 'your', 'pages', 'to', 'include', 'the', 'same', 'section', 'like', 'below.', 'I', 'would', 'however', 'leave', 'room', 'to', 'add', 'tags', 'to', 'your', 'head', 'by', 'leaving', 'the', 'in', 'each', 'of', 'your', 'pages.', '{{', 'define', '""page_template""', '}}', 'My', 'page', 'template', '{{', 'template', '""template_css""', '}}', '...', 'etc', '...', 'And', 'the', 'template_css:', '{{', 'define', '""template_css""', '}}', '{{', 'end', '}}', 'A', 'snippet', 'of', 'code', 'for', 'the', 'template', 'parsing', 'tp', ',', 'err', ':=', 'template.ParseFiles(""page_template.html"", ""template_css.tp"")', 'err', '=', 'tp.ExecuteTemplate(buf, ""page_template"", templateParameters)']"
214,20221694,"
","['I', 'think', ""it's"", 'easy', 'to', 'implement', 'this', 'simple', 'asset', 'pipeline', 'feature,', 'you', 'can', 'use', 'path.filepath', 'to', 'walk', 'through', 'your', 'css', 'directory,', 'read', 'all', 'the', 'css', 'files,', 'generate', 'a', 'temp', 'css', 'file', 'by', 'join', 'all', 'lines', 'together,', 'then', 'serve', 'the', 'client', 'with', 'the', 'generated', 'file', 'import', '(', '""path/filepath""', '""os""', '""io/ioutil""', ')', 'func', 'Generate', '(', 'path', 'string', ')', '*', 'os', '.', 'File', '{', 'f', ',', 'err', ':=', 'ioutil.TempFile("""",""all"")', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', '}', 'filepath.Walk(path,func(p string,info os.FileInfo,err error)', 'error', '{', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'if', '!', 'info.IsDir()', '{', 'data', ',', 'err', ':=', 'ioutil.ReadFile(info.Name())', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'f.Write(data)', '}', 'return', 'err', '})', 'return', 'f', '}']"
215,20396438,"the reason is that you can not obtain overlapping results. With regex engines that support lookahead you can use the trick: (?=([0-9]+[dh]){2}) but go language does not support it.

If you want to obtain all results, I suggest you to use FindAllStringIndex() with ([0-9]+[dh]) and then determine all contiguous substrings with the offset.
",[]
216,20403220,"

Output:

""a\xc5z""
""az""



  Unicode Standard
  
  FAQ - UTF-8, UTF-16, UTF-32 & BOM
  
  Q: Are there any byte sequences that are not generated by a UTF? How
  should I interpret them?
  
  A: None of the UTFs can generate every arbitrary byte sequence. For
  example, in UTF-8 every byte of the form 110xxxxx2 must be followed
  with a byte of the form 10xxxxxx2. A sequence such as <110xxxxx2
  0xxxxxxx2> is illegal, and must never be generated. When faced with
  this illegal byte sequence while transforming or interpreting, a UTF-8
  conformant process must treat the first byte 110xxxxx2 as an illegal
  termination error: for example, either signaling an error, filtering
  the byte out, or representing the byte with a marker such as FFFD
  (REPLACEMENT CHARACTER). In the latter two cases, it will continue
  processing at the second byte 0xxxxxxx2.
  
  A conformant process must not interpret illegal or ill-formed byte
  sequences as characters, however, it may take error recovery actions.
  No conformant process  may use irregular byte sequences to encode
  out-of-band information.

","['For', 'example,', 'package', 'main', 'import', '(', '""fmt""', '""unicode/utf8""', ')', 'func', 'main', '()', '{', 's', ':=', '""a\\xc5z""', 'fmt.Printf(""%q\\n"", s)', 'if', '!', 'utf8.ValidString(s)', '{', 'v', ':=', 'make', '([]', 'rune', ',', '0', ',', 'len', '(', 's', '))', 'for', 'i', ',', 'r', ':=', 'range', 's', '{', 'if', 'r', '==', 'utf8', '.', 'RuneError', '{', '_', ',', 'size', ':=', 'utf8.DecodeRuneInString(s[i:])', 'if', 'size', '==', '1', '{', 'continue', '}', '}', 'v', '=', 'append', '(', 'v', ',', 'r', ')', '}', 's', '=', 'string', '(', 'v', ')', '}', 'fmt.Printf(""%q\\n"", s)', '}', 'Output:', '""a\\xc5z""', '""az""', 'Unicode', 'Standard', 'FAQ', '-', 'UTF-8,', 'UTF-16,', 'UTF-32', '&', 'BOM', 'Q:', 'Are', 'there', 'any', 'byte', 'sequences', 'that', 'are', 'not', 'generated', 'by', 'a', 'UTF?', 'How', 'should', 'I', 'interpret', 'them?', 'A:', 'None', 'of', 'the', 'UTFs', 'can', 'generate', 'every', 'arbitrary', 'byte', 'sequence.', 'For', 'example,', 'in', 'UTF-8', 'every', 'byte', 'of', 'the', 'form', '110xxxxx2', 'must', 'be', 'followed', 'with', 'a', 'byte', 'of', 'the', 'form', '10xxxxxx2.', 'A', 'sequence', 'such', 'as', '<110xxxxx2', '0xxxxxxx2>', 'is', 'illegal,', 'and', 'must', 'never', 'be', 'generated.', 'When', 'faced', 'with', 'this', 'illegal', 'byte', 'sequence', 'while', 'transforming', 'or', 'interpreting,', 'a', 'UTF-8', 'conformant', 'process', 'must', 'treat', 'the', 'first', 'byte', '110xxxxx2', 'as', 'an', 'illegal', 'termination', 'error:', 'for', 'example,', 'either', 'signaling', 'an', 'error,', 'filtering', 'the', 'byte', 'out,', 'or', 'representing', 'the', 'byte', 'with', 'a', 'marker', 'such', 'as', 'FFFD', '(REPLACEMENT', 'CHARACTER).', 'In', 'the', 'latter', 'two', 'cases,', 'it', 'will', 'continue', 'processing', 'at', 'the', 'second', 'byte', '0xxxxxxx2.', 'A', 'conformant', 'process', 'must', 'not', 'interpret', 'illegal', 'or', 'ill-formed', 'byte', 'sequences', 'as', 'characters,', 'however,', 'it', 'may', 'take', 'error', 'recovery', 'actions.', 'No', 'conformant', 'process', 'may', 'use', 'irregular', 'byte', 'sequences', 'to', 'encode', 'out-of-band', 'information.']"
217,20455991,"

While this is possible, I would not really recommend it. It doesn't make the code more clear than when using a sync.WaitGroup. After all, the signal channel would basically only work as a counter. A WaitGroup would have the same purpose and would do it cheaper.

But your question was not about how to solve the problem, but rather if it was possible to do it with pure channels.
","['You', 'can,', 'as', 'siritinga', 'suggested,', 'use', 'a', 'third', 'signalling', 'or', 'counter', 'channel,', 'eg', 'signal', 'chan', 'boolean,', 'where', 'the', 'produceWork', 'goroutine', 'would', 'add', 'a', 'value', 'before', 'each', 'job', 'entered', 'into', 'the', 'jobs', 'channel.', 'So,', 'an', 'equal', 'count', 'of', 'values', 'will', 'be', 'passed', 'to', 'signal', 'as', 'to', 'jobs:', 'func', 'produceWork', '(', 'vf', 'string', ',', 'jobs', 'chan', '*', 'utils', '.', 'DigSigEntries', ',', 'signal', 'chan', 'boolean', ')', '{', 'defer', 'close', '(', 'jobs', ')', '//', 'load', 'file', 'with', 'jobs', 'file', ',', 'err', ':=', 'ini.LoadFile(vf)', '//', 'get', 'data', 'for', 'processing', 'for', 'data', ',', '_', ':=', 'range', 'file', '{', '//', '...', 'signal', '<-', 'true', 'jobs', '<-', '&', 'myStruct', '{', 'data1', ',', 'data2', ',', 'data3', ',', 'false', '}', '}', 'close', '(', 'signal', ')', '}', 'The', 'consume', 'would', 'then', 'start', 'by', 'reading', 'from', 'the', 'signal', 'channel.', 'If', 'there', 'is', 'a', 'value,', 'it', 'can', 'be', 'certain', 'there', 'will', 'be', 'a', 'value', 'to', 'read', 'from', 'the', 'out', 'channel', '(once', 'a', 'worker', 'has', 'passed', 'it', 'on).', 'If', 'the', 'signal', 'is', 'closed,', 'then', 'all', 'is', 'done.', 'We', 'can', 'close', 'the', 'remaining', 'done', 'channel:', 'func', 'consumeWork', '(', 'done', 'chan', '*', 'myStruct', ',', 'signal', 'chan', 'boolean', ')', '{', 'for', '_', ':=', 'range', 'signal', '{', 'val', '<-', 'done', 'if', '!', 'val', '.', 'status', '{', 'fmt.Println(val)', '}', '}', 'close', '(', 'done', ')', '}', 'While', 'this', 'is', 'possible,', 'I', 'would', 'not', 'really', 'recommend', 'it.', 'It', ""doesn't"", 'make', 'the', 'code', 'more', 'clear', 'than', 'when', 'using', 'a', 'sync.WaitGroup.', 'After', 'all,', 'the', 'signal', 'channel', 'would', 'basically', 'only', 'work', 'as', 'a', 'counter.', 'A', 'WaitGroup', 'would', 'have', 'the', 'same', 'purpose', 'and', 'would', 'do', 'it', 'cheaper.', 'But', 'your', 'question', 'was', 'not', 'about', 'how', 'to', 'solve', 'the', 'problem,', 'but', 'rather', 'if', 'it', 'was', 'possible', 'to', 'do', 'it', 'with', 'pure', 'channels.']"
218,20456325,"
","['Sorry,', 'i', ""didn't"", 'notice', 'that', 'you', 'wanted', 'to', 'skip', '/sync', ':/', ""I'll"", 'leave', 'the', 'answer,', 'maybe', 'someone', 'is', 'looking', 'for', 'this.', 'import', '(', '""sync""', ')', 'func', 'main', '()', '{', 'jobs', ':=', 'make', '(', 'chan', '*', 'myStruct', ',', 'workers', ')', 'done', ':=', 'make', '(', 'chan', '*', 'myStruct', ',', 'workers', ')', 'var', 'workerWg', 'sync', '.', 'WaitGroup', '// waitGroup for workers', 'var', 'consumeWg', 'sync', '.', 'WaitGroup', '// waitGroup for consumer', 'consumeWg.Add(1)', '// add one active Consumer', 'for', 'i', ':=', '0', ';', 'i', '<', 'runtime.NumCPU()', ';', 'i', '++', '{', 'go', 'Worker', '(&', 'workerWg', ',', 'jobs', ',', 'done', ')', 'workerWg.Add(1)', '}', 'go', 'consumeWork', '(&', 'consumeWg', ',', 'done', ')', 'produceWork', '(', 'file_with_jobs', ',', 'jobs', ')', 'close', '(', 'jobs', ')', 'workerWg.Wait()', 'close', '(', 'done', ')', 'consumeWg.Wait()', '}', 'func', 'produceWork', '(', 'vf', 'string', ',', 'jobs', 'chan', '*', 'utils', '.', 'DigSigEntries', ')', '{', '//', 'load', 'file', 'with', 'jobs', 'file', ',', 'err', ':=', 'ini.LoadFile(vf)', '//', 'get', 'data', 'for', 'processing', 'for', 'data', ',', '_', ':=', 'range', 'file', '{', '//', '...', 'jobs', '<-', '&', 'myStruct', '{', 'data1', ',', 'data2', ',', 'data3', ',', 'false', '}', '}', '}', 'func', 'Worker', '(', 'wg', '*', 'sync', '.', 'WaitGroup', ',', 'done', 'chan', '*', 'myStruct', ')', '{', 'defer', 'wg.Done()', 'for', 'job', ':=', 'range', 'jobs', '{', 'result', ':=', 'process', '(', 'job', ')', 'out', '<-', 'result', '}', '//', 'close(out)', '-->', 'tried', 'closing', 'the', 'out', 'channel,', 'but', 'then', 'not', 'all', 'items', 'are', 'processed', '//', 'though', 'no', 'panics', 'occur.', '}', 'func', 'process', '(', 'item', '*', 'myStruct', ')', '{', '//', '...modify', 'the', 'item', 'item', '.', 'status', '=', 'true', '}', 'func', 'consumeWork', '(', 'wg', '*', 'sync', '.', 'WaitGroup', ',', 'done', 'chan', '*', 'myStruct', ')', '{', 'defer', 'wg.Done()', 'for', 'val', ':=', 'range', 'done', '{', 'if', '!', 'val', '.', 'status', '{', 'fmt.Println(val)', '}', '}', '}']"
219,20571405,"well you should cast your division result as float
","['well', 'you', 'should', 'cast', 'your', 'division', 'result', 'as', 'float']"
220,20571416," will be 1.5.

If you want integer division to be done, but the result to be a float, then covert the result as in float32(a/b). In this case, if a is 3 and b is 2, then float32(a/b) will get you 1.0.
","['You', 'have', 'to', 'convert', 'the', 'types', 'to', 'floats', 'first.', 'In', 'general,', 'if', 'you', 'have', 'some', 'non-float', 'numeric', 'types', '(such', 'as', 'ints)', 'a', 'and', 'b,', 'in', 'order', 'to', 'get', 'a', 'float', 'division', 'you', 'use', 'float32', '(', 'a', ')/', 'float32', '(', 'b', ')', '(or', 'float64', 'as', 'the', 'case', 'may', 'be).', 'This', 'applies', 'to', 'any', 'other', 'numeric', 'type', 'too,', 'if', 'you', 'want', 'to', 'treat', 'floats', 'as', 'integers', 'or', 'integers', 'as', 'complex', 'numbers', 'convert', 'the', 'operands.', 'In', 'this', 'case,', 'if', 'a', 'is', '3', 'and', 'b', 'is', '2,', 'float32', '(', 'a', ')/', 'float32', '(', 'b', ')', 'will', 'be', '1.5.', 'If', 'you', 'want', 'integer', 'division', 'to', 'be', 'done,', 'but', 'the', 'result', 'to', 'be', 'a', 'float,', 'then', 'covert', 'the', 'result', 'as', 'in', 'float32(a/b).', 'In', 'this', 'case,', 'if', 'a', 'is', '3', 'and', 'b', 'is', '2,', 'then', 'float32(a/b)', 'will', 'get', 'you', '1.0.']"
221,20571539,"

Depending upon what you want.  Also check out float64 -- if that floats your boat.
","['There', 'are', 'no', 'implicit', 'type', 'casts', 'for', 'variables', 'in', 'Go,', 'so', 'you', 'must', 'convert', 'to', 'float:', 'fmt.Printf(""%f"", float32(a)/float32(b))', 'or', 'fmt.Printf(""%f"", float32(a/b))', 'Depending', 'upon', 'what', 'you', 'want.', 'Also', 'check', 'out', 'float64', '--', 'if', 'that', 'floats', 'your', 'boat.']"
222,20572190,"

So although they seem to be equal in most of the cases, v.Kind() is not v.Type().Kind()
","['They', 'contain', 'the', 'same', 'value,', 'but', 'do', 'not', 'seem', 'to', 'refer', 'to', 'the', 'same', 'thing:', 'type.go', 'source', 'value.go', 'source', 'A', 'Type', 'is', 'usually', 'implemented', 'by', 'unexported', 'struct', 'rtype', '(via', 'TypeOf),', 'while', 'the', 'Value', 'contains', 'a', '*rtype', 'and', 'extends', 'flag,', 'which', 'is', 'itself', 'a', 'reduced', 'form', 'of', 'the', 'Kind:', '//', 'flag', 'holds', 'metadata', 'about', 'the', 'value.', '//', 'The', 'lowest', 'bits', 'are', 'flag', 'bits:', '//', '-', 'flagRO:', 'obtained', 'via', 'unexported', 'field,', 'so', 'read-only', '//', '-', 'flagIndir:', 'val', 'holds', 'a', 'pointer', 'to', 'the', 'data', '//', '-', 'flagAddr:', 'v.CanAddr', 'is', 'true', '(implies', 'flagIndir)', '//', '-', 'flagMethod:', 'v', 'is', 'a', 'method', 'value.', '//', 'The', 'next', 'five', 'bits', 'give', 'the', 'Kind', 'of', 'the', 'value.', '//', 'This', 'repeats', 'typ.Kind()', 'except', 'for', 'method', 'values.', '//', 'The', 'remaining', '23+', 'bits', 'give', 'a', 'method', 'number', 'for', 'method', 'values.', '//', 'If', 'flag.kind()', '!=', 'Func,', 'code', 'can', 'assume', 'that', 'flagMethod', 'is', 'unset.', '//', 'If', 'typ.size', '>', 'ptrSize,', 'code', 'can', 'assume', 'that', 'flagIndir', 'is', 'set.', 'When', 'getting', 'the', 'ValueOf', 'something:', '//', 'ValueOf', 'returns', 'a', 'new', 'Value', 'initialized', 'to', 'the', 'concrete', 'value', '//', 'stored', 'in', 'the', 'interface', 'i.', 'ValueOf(nil)', 'returns', 'the', 'zero', 'Value.', 'func', 'ValueOf', '(', 'i', 'interface', '{})', 'Value', '{', '[...]', '//', 'For', 'an', 'interface', 'value', 'with', 'the', 'noAddr', 'bit', 'set,', '//', 'the', 'representation', 'is', 'identical', 'to', 'an', 'empty', 'interface.', 'eface', ':=', '*(*', 'emptyInterface', ')(', 'unsafe.Pointer(&i))', 'typ', ':=', 'eface', '.', 'typ', '/**', 'Flag', 'is', 'built', 'from', 'the', 'type', ',', 'then', 'kept', 'separate', '(', 'my', 'comment', ')', '*/', 'fl', ':=', 'flag', '(', 'typ.Kind())', '<<', 'flagKindShift', 'if', 'typ', '.', 'size', '>', 'ptrSize', '{', 'fl', '|=', 'flagIndir', '}', 'return', 'Value', '{', 'typ', ',', 'unsafe.Pointer(eface.word)', ',', 'fl', '}', '}', 'And', 'so', 'when', 'you', 'get', 'the', 'kind', 'of', 'a', 'Value', '(remember', 'it', 'extends', 'its', 'flag):', 'func', '(', 'v', 'Value', ')', 'Kind', '()', 'Kind', '{', 'return', 'v.kind()', '}', 'func', '(', 'f', 'flag', ')', 'kind', '()', 'Kind', '{', 'return', 'Kind', '((', 'f', '>>', 'flagKindShift', ')', '&', 'flagKindMask', ')', '}', 'While', 'getting', 'the', 'kind', 'of', 'a', 'type:', '(Type', 'is', 'an', 'interface,', 'usually', 'implemented', 'by', '*rtype)', 'func', '(', 't', '*', 'rtype', ')', 'Kind', '()', 'Kind', '{', 'return', 'Kind', '(', 't', '.', 'kind', '&', 'kindMask', ')', '}', 'So', 'although', 'they', 'seem', 'to', 'be', 'equal', 'in', 'most', 'of', 'the', 'cases,', 'v.Kind()', 'is', 'not', 'v.Type().Kind()']"
223,20580808,"The file reflect/value.go states that the relevant field in the implementation of reflect.Value ""repeats typ.Kind() except for method values"". So, unless the value is a method, value.Kind() and value.Type().Kind() return the same number.
","['So', 'although', 'they', 'seem', 'to', 'be', 'equal', 'in', 'most', 'of', 'the', 'cases,', 'v.Kind()', 'is', 'not', 'v.Type().Kind()']"
224,20580856,"it's been an update and I thought to add what is the current state of affair.

The good news is the go tools now no longer strip debug symbols so if you are running on your local machine you can now get gdb support!

It's a bit of a process and ripe for some more automation (suggestions welcome)

in short:


look for the _app_go process
cd to the directory that it's running from 
Attach to the process with the '-pid' command to gdb
Tell gdb the directory of source


Boom -- debugging.
","[""it's"", 'been', 'an', 'update', 'and', 'I', 'thought', 'to', 'add', 'what', 'is', 'the', 'current', 'state', 'of', 'affair.', 'The', 'good', 'news', 'is', 'the', 'go', 'tools', 'now', 'no', 'longer', 'strip', 'debug', 'symbols', 'so', 'if', 'you', 'are', 'running', 'on', 'your', 'local', 'machine', 'you', 'can', 'now', 'get', 'gdb', 'support!', ""It's"", 'a', 'bit', 'of', 'a', 'process', 'and', 'ripe', 'for', 'some', 'more', 'automation', '(suggestions', 'welcome)', 'in', 'short:', 'look', 'for', 'the', '_app_go', 'process', 'cd', 'to', 'the', 'directory', 'that', ""it's"", 'running', 'from', 'Attach', 'to', 'the', 'process', 'with', 'the', ""'-pid'"", 'command', 'to', 'gdb', 'Tell', 'gdb', 'the', 'directory', 'of', 'source', 'Boom', '--', 'debugging.']"
225,20629533,". 

Keith Rarick notes you can set GOPATH=$HOME to put Go's src/, pkg/ and bin/ directories right under your homedir. That can be nice (for instance, you might already have $HOME/bin in your path) but of course some folks use multiple workspaces, etc.
","['[Update:', 'as', 'of', 'Go', '1.8,', 'GOPATH', 'defaults', 'to', '$HOME/go,', 'but', 'you', 'may', 'still', 'find', 'this', 'useful', 'if', 'you', 'want', 'to', 'understand', 'the', 'GOPATH', 'layout,', 'customize', 'it,', 'etc.]', 'The', 'official', 'Go', 'site', 'discusses', 'GOPATH', 'and', 'how', 'to', 'lay', 'out', 'a', 'workspace', 'directory.', 'export', 'GOPATH', '=', '""$HOME/your-workspace-dir/""', '--', 'run', 'it', 'in', 'your', 'shell,', 'then', 'add', 'it', 'to', '~/.bashrc', 'or', 'equivalent', 'so', 'it', 'will', 'be', 'set', 'for', 'you', 'in', 'the', 'future.', 'Go', 'will', 'install', 'packages', 'under', 'src/,', 'bin/,', 'and', 'pkg/,', 'subdirectories', 'there.', ""You'll"", 'want', 'to', 'put', 'your', 'own', 'packages', 'somewhere', 'under', '$GOPATH/src,', 'like', '$', 'GOPATH/src/github.com/myusername/', 'if', 'you', 'want', 'to', 'publish', 'to', 'GitHub.', ""You'll"", 'also', 'probably', 'want', 'export', 'PATH', '=$', 'PATH', ':$', 'GOPATH/bin', 'in', 'your', '.bashrc', 'so', 'you', 'can', 'run', 'compiled', 'programs', 'under', '$GOPATH.', 'Optionally,', 'via', 'Rob', 'Pike,', 'you', 'can', 'also', 'set', 'CDPATH', 'so', ""it's"", 'faster', 'to', 'cd', 'to', 'package', 'dirs', 'in', 'bash:', 'export', 'CDPATH', '=.:$', 'GOPATH/src/github.com:$GOPATH/src/golang.org/x', 'means', 'you', 'can', 'just', 'type', 'cd', 'net/html', 'instead', 'of', 'cd', '$', 'GOPATH/src/golang.org/x/net/html', '.', 'Keith', 'Rarick', 'notes', 'you', 'can', 'set', 'GOPATH=$HOME', 'to', 'put', ""Go's"", 'src/,', 'pkg/', 'and', 'bin/', 'directories', 'right', 'under', 'your', 'homedir.', 'That', 'can', 'be', 'nice', '(for', 'instance,', 'you', 'might', 'already', 'have', '$HOME/bin', 'in', 'your', 'path)', 'but', 'of', 'course', 'some', 'folks', 'use', 'multiple', 'workspaces,', 'etc.']"
226,20629537,".
","['Just', 'do', 'export', 'GOPATH', '=', '""/whatever/you/like/your/GOPATH/to/be""', '.']"
227,20656980,"

","['Watch', 'a', 'Video', 'In', 'general,', 'I', 'always', 'recommend', 'this', 'official', 'video', 'from', 'Go', 'to', 'get', 'a', 'quick', 'overview', 'on', 'the', 'matter:', 'http://www.youtube.com/watch?v=XCsL89YtqCs', ""It's"", 'easier', 'to', 'be', 'shown', 'than', 'to', 'be', 'told.', '@jwfearn', 'paraphrased', 'the', 'important', 'part', 'of', 'the', 'video:', 'export', 'GOPATH', '=', '""${HOME}/gocode""', ';', 'export', 'PATH', '=', '""${PATH}:${GOPATH}/bin""', ';', 'mkdir', '-', 'p', '""${GOPATH}""']"
228,20714739,"

In the example above, m is your original map and v is the reflected value. The interface value i, acquired by the Interface method is asserted to be of type map[string]int and this value is used as such in the last line.
","['Most', 'reflect', 'Value', 'objects', 'can', 'be', 'converted', 'back', 'to', 'a', 'interface{}', 'value', 'using', 'the', '.Interface()', 'method.', 'After', 'obtaining', 'this', 'value,', 'you', 'can', 'assert', 'it', 'back', 'to', 'the', 'map', 'you', 'want.', 'Example', '(play):', 'm', ':=', 'map', '[', 'string', ']', 'int', '{', '""foo""', ':', '1', ',', '""bar""', ':', '3', '}', 'v', ':=', 'reflect.ValueOf(m)', 'i', ':=', 'v.Interface()', 'a', ':=', 'i', '.(', 'map', '[', 'string', ']', 'int', ')', 'println', '(', 'a', '[', '""foo""', '])', '// 1', 'In', 'the', 'example', 'above,', 'm', 'is', 'your', 'original', 'map', 'and', 'v', 'is', 'the', 'reflected', 'value.', 'The', 'interface', 'value', 'i,', 'acquired', 'by', 'the', 'Interface', 'method', 'is', 'asserted', 'to', 'be', 'of', 'type', 'map[string]int', 'and', 'this', 'value', 'is', 'used', 'as', 'such', 'in', 'the', 'last', 'line.']"
229,20714742,"

Of course, that only works if you can write out all the concrete types you're interested out in the code. If you don't know the possible types at compile time, you have to use methods like v.MapKeys() and v.MapIndex(key) to work more with the reflect.Value, and, in my experience, that involves a long time looking at the reflect docs and is often verbose and pretty tricky.
","['To', 'turn', 'the', 'value', 'in', 'a', 'reflect.Value', 'into', 'an', 'interface{},', 'you', 'use', 'if', 'ace', ':=', 'v.Interface()', '.', 'Then,', 'to', 'access', 'that,', 'you', 'use', 'a', 'type', 'assertion', 'or', 'type', 'switch.', 'If', 'you', 'know', ""you're"", 'getting', 'a', 'map[string]string', 'the', 'assertion', 'is', 'simply', 'm', ':=', 'if', 'ace', '.(', 'map', '[', 'string', ']', 'string', ')', '.', 'If', ""there's"", 'a', 'handful', 'of', 'possibilities,', 'the', 'type', 'switch', 'to', 'handle', 'them', 'all', 'looks', 'like:', 'switch', 'item', ':=', 'if', 'ace', '.(', 'type', ')', '{', 'case', 'map', '[', 'string', ']', 'string', ':', 'fmt.Println(""it\'s a map, and key \\""key\\"" is"", item[""key""])', 'case', 'string', ':', 'fmt.Println(""it\'s a string:"", item)', 'default', ':', '//', 'optional--code', 'that', 'runs', 'if', ""it's"", 'none', 'of', 'the', 'above', 'types', '//', 'could', 'use', 'reflect', 'to', 'access', 'the', 'object', 'if', 'that', 'makes', 'sense', '//', 'or', 'could', 'do', 'an', 'error', 'return', 'or', 'panic', 'if', 'appropriate', 'fmt.Println(""unknown type"")', '}', 'Of', 'course,', 'that', 'only', 'works', 'if', 'you', 'can', 'write', 'out', 'all', 'the', 'concrete', 'types', ""you're"", 'interested', 'out', 'in', 'the', 'code.', 'If', 'you', ""don't"", 'know', 'the', 'possible', 'types', 'at', 'compile', 'time,', 'you', 'have', 'to', 'use', 'methods', 'like', 'v.MapKeys()', 'and', 'v.MapIndex(key)', 'to', 'work', 'more', 'with', 'the', 'reflect.Value,', 'and,', 'in', 'my', 'experience,', 'that', 'involves', 'a', 'long', 'time', 'looking', 'at', 'the', 'reflect', 'docs', 'and', 'is', 'often', 'verbose', 'and', 'pretty', 'tricky.']"
230,20743558,"

and it will work.
","['ReadString', 'takes', 'the', 'delimiter', 'byte.', 'In', 'your', 'case,', ""that's"", 'a', 'newline,', 'not', 'a', 'dot.', 'Simply', 'replace', 'the', 'line', 'input', ',', 'err', ':=', ""reader.ReadString('.')"", 'with', 'input', ',', 'err', ':=', ""reader.ReadString('\\n')"", 'and', 'it', 'will', 'work.']"
231,20909764,"

We can conclude that the output goes to stderr. Now I took a look at Go's docs, and guess what, cmd.Output only captures stdout (docs). You should use cmd.CombinedOutput (docs) :


  CombinedOutput runs the command and returns its combined standard output and standard error.

","['$', 'python', '--', 'version', 'Python', '2', '.', '7', '.', '2', '$', 'python', '--', 'version', '1', '>/', 'dev/null', 'hide', 'stdout', 'Python', '2', '.', '7', '.', '2', '$', 'python', '--', 'version', '2', '>/', 'dev/null', 'hide', 'stderr', 'We', 'can', 'conclude', 'that', 'the', 'output', 'goes', 'to', 'stderr.', 'Now', 'I', 'took', 'a', 'look', 'at', ""Go's"", 'docs,', 'and', 'guess', 'what,', 'cmd.Output', 'only', 'captures', 'stdout', '(docs).', 'You', 'should', 'use', 'cmd.CombinedOutput', '(docs)', ':', 'CombinedOutput', 'runs', 'the', 'command', 'and', 'returns', 'its', 'combined', 'standard', 'output', 'and', 'standard', 'error.']"
232,20930522,"I think you're going to end up needing to manually handle different types in this case. AFAIK, type assertions must be real types at compile time. Here's my best try in play: http://play.golang.org/p/J8RdHF2MVV
","['I', 'think', ""you're"", 'going', 'to', 'end', 'up', 'needing', 'to', 'manually', 'handle', 'different', 'types', 'in', 'this', 'case.', 'AFAIK,', 'type', 'assertions', 'must', 'be', 'real', 'types', 'at', 'compile', 'time.', ""Here's"", 'my', 'best', 'try', 'in', 'play:', 'http://play.golang.org/p/J8RdHF2MVV']"
233,20993391," and fix all races. 
","['You', 'code', 'is', 'racy:', 'You', 'write', 'to', 'the', 'same', 'memory', 'location', 'from', 'different,', 'unsynchronized', 'goroutines', 'without', 'any', 'locking.', 'The', 'result', 'is', 'basically', 'undefined.', 'You', 'must', 'either', 'a)', 'make', 'sure', 'that', 'all', 'the', 'goroutine', 'writes', 'after', 'each', 'other', 'in', 'a', 'nice,', 'ordered', 'way,', 'or', 'b)', 'protect', 'each', 'write', 'by', 'e.g.', 'e', 'mutex', 'or', 'c)', 'use', 'atomic', 'operations.', 'If', 'you', 'write', 'such', 'code:', 'Always', 'try', 'it', 'under', 'the', 'race', 'detector', 'like', '$', 'go', 'run', '-', 'race', 'main', '.', 'go', 'and', 'fix', 'all', 'races.']"
234,20994420,"First of all: prior to Go 1.5 it runs on a single processor, only using multiple threads for blocking system calls. Unless you tell the runtime to use more processors by using GOMAXPROCS.

As of Go 1.5 GOMAXPROCS is set to the number of CPUS. See 6, 7 .

Also, the operation *cptr = *cptr + 1 is not guaranteed to be atomic. If you look carefully, it can be split up into 3 operations: fetch old value by dereferencing pointer, increment value, save value into pointer address.

The fact that you're getting 508/510 is due to some magic in the runtime and not defined to stay that way. More information on the behaviour of operations with concurrency can be found in the Go memory model.
You're probably getting the correct values for 

Generally, what you're trying to do is neither recommendable in any language, nor the ""Go"" way to do concurrency. A very good example of using channels to synchronize is this code walk: Share Memory By Communicating (rather than communicating by sharing memory)

Here is a little example to show you what I mean: use a channel with a buffer of 1 to store the current number, fetch it from the channel when you need it, change it at will, then put it back for others to use.
","['and', 'fix', 'all', 'races.']"
235,21004078,"A nice alternative to using channels in this case might be the sync/atomic package, which contains specifically functions for atomically incrementing/decrementing numbers.
","['A', 'nice', 'alternative', 'to', 'using', 'channels', 'in', 'this', 'case', 'might', 'be', 'the', 'sync/atomic', 'package,', 'which', 'contains', 'specifically', 'functions', 'for', 'atomically', 'incrementing/decrementing', 'numbers.']"
236,21077980,"The go-runtime doesn't immediately release unused memory to the OS (it might be needed again soon).
So looking at the OS-level, you see only a part of the overall picture.
Using http://golang.org/pkg/runtime/#ReadMemStats you can see another part of the picture.

pkg/runtime/malloc.goc shows the freelist, and pkg/runtime/mgc0.c shows the garbage collector.

If memory-usage goes down in a stable situation that seems normal, after loading finishes, you can force a GC, and you might want to print the Memstats regularly for more info.
","['The', 'go-runtime', ""doesn't"", 'immediately', 'release', 'unused', 'memory', 'to', 'the', 'OS', '(it', 'might', 'be', 'needed', 'again', 'soon).', 'So', 'looking', 'at', 'the', 'OS-level,', 'you', 'see', 'only', 'a', 'part', 'of', 'the', 'overall', 'picture.', 'Using', 'http://golang.org/pkg/runtime/#ReadMemStats', 'you', 'can', 'see', 'another', 'part', 'of', 'the', 'picture.', 'pkg/runtime/malloc.goc', 'shows', 'the', 'freelist,', 'and', 'pkg/runtime/mgc0.c', 'shows', 'the', 'garbage', 'collector.', 'If', 'memory-usage', 'goes', 'down', 'in', 'a', 'stable', 'situation', 'that', 'seems', 'normal,', 'after', 'loading', 'finishes,', 'you', 'can', 'force', 'a', 'GC,', 'and', 'you', 'might', 'want', 'to', 'print', 'the', 'Memstats', 'regularly', 'for', 'more', 'info.']"
237,21203662,"To do that you should study the part 14.16 — Content-Range — of the RFC document describing the HTTP/1.1 protocol and then apply that knowledge to manipulate the set of HTTP headers sent when the client request is executed — see the documentation and examples there.

To calculate the range to request, to continue downloading, you should get the current file's size. This can be found in the results returned by the Stat() function which can be called on an opened file — *os.File returned by a call to os.Open().

You should open your file in append mode and then use something like io.Copy() to stream the data from the Body HTTP response member to the file object.

Do your own research on how to read data from HTTP responses in Go — they are abundant on the Internet.
","['and', 'fix', 'all', 'races.']"
238,21268855,"
  Is there a way to unmarshal the nested bar property and assign it directly to a struct property without creating a nested struct?


No, encoding/json cannot do the trick with "">some>deep>childnode"" like encoding/xml can do.
Nested structs is the way to go.
","['Is', 'there', 'a', 'way', 'to', 'unmarshal', 'the', 'nested', 'bar', 'property', 'and', 'assign', 'it', 'directly', 'to', 'a', 'struct', 'property', 'without', 'creating', 'a', 'nested', 'struct?', 'No,', 'encoding/json', 'cannot', 'do', 'the', 'trick', 'with', '"">some>deep>childnode""', 'like', 'encoding/xml', 'can', 'do.', 'Nested', 'structs', 'is', 'the', 'way', 'to', 'go.']"
239,21269578,"

Please ignore the fact that I'm not returning a proper error.  I left that out for simplicity.  
","['Like', 'what', 'Volker', 'mentioned,', 'nested', 'structs', 'is', 'the', 'way', 'to', 'go.', 'But', 'if', 'you', 'really', 'do', 'not', 'want', 'nested', 'structs,', 'you', 'can', 'override', 'the', 'UnmarshalJSON', 'func.', 'http://play.golang.org/p/T0aZEDL0Nu', 'type', 'A', 'struct', '{', 'FooBar', 'string', '// takes foo.bar', 'FooBaz', 'string', '// takes foo.baz', 'More', 'string', 'json', ':', '""more""', '}', 'func', '(', 'a', '*', 'A', ')', 'UnmarshalJSON', '(', 'b', '[]', 'byte', ')', 'error', '{', 'var', 'f', 'interface', '{}', 'json.Unmarshal(b, &f)', 'm', ':=', 'f', '.(', 'map', '[', 'string', ']', 'interface', '{})', 'foomap', ':=', 'm', '[', '""foo""', ']', 'v', ':=', 'foomap', '.(', 'map', '[', 'string', ']', 'interface', '{})', 'a', '.', 'FooBar', '=', 'v', '[', '""bar""', '].(', 'string', ')', 'a', '.', 'FooBaz', '=', 'v', '[', '""baz""', '].(', 'string', ')', 'return', 'nil', '}', 'Please', 'ignore', 'the', 'fact', 'that', ""I'm"", 'not', 'returning', 'a', 'proper', 'error.', 'I', 'left', 'that', 'out', 'for', 'simplicity.']"
240,21352256,"
","['Environmental', 'configs', 'are', 'best', 'kept', 'in', 'environment', 'variables,', 'in', 'my', 'experience.', 'You', 'can', 'rely', 'on', 'global', 'variables', 'like', 'so:', 'var', 'envSetting', '=', 'os.Getenv(""TEST_ENV"")', 'Alternatively,', 'if', 'using', 'flags', 'is', 'a', 'requirement,', 'you', 'could', 'place', 'your', 'initialization', 'code', 'inside', 'a', 'function', 'called', 'init().', 'func', 'init', '()', '{', 'flags.Parse()', 'myEnv', '=', '*', 'envFlag', '//', '...', '}']"
241,21461032,", which turns out to be false in go.

The issue is actually explained in the Go FAQ.
","['Admittedly,', ""it's"", 'somewhat', 'of', 'a', 'quirk,', 'but', ""there's"", 'an', 'explanation', 'for', 'it.', 'Imagine', 'an', 'interface{}', 'variable', 'as', 'a', 'struct', 'composed', 'of', 'two', 'fields:', 'one', 'is', 'the', 'type', 'and', 'another', 'is', 'the', 'data.', '([]int', 'and', 'nil).', 'Actually,', 'it', 'looks', 'just', 'like', 'that', 'in', 'the', 'Go', 'runtime.', 'struct', 'Iface', '{', 'Itab', '*', 'tab', ';', 'void', '*', 'data', ';', '};', 'When', 'you', 'pass', 'your', 'nil', 'slice', 'to', 'yes,', 'only', 'nil', 'is', 'passed', 'as', 'the', 'value,', 'so', 'your', 'comparison', 'boils', 'down', 'to', 'nil', '==', 'nil.', 'Meanwhile,', 'calling', 'no', 'automatically', 'wraps', 'your', 'variable', 'in', 'an', 'interface{}', 'type', 'and', 'the', 'call', 'becomes', 'something', 'akin', 'to', 'no', '(', 'interface', '{[]', 'int', ',', 'nil', '})', '.', 'So', 'the', 'comparison', 'in', 'no', 'could', 'be', 'seen', 'as', 'interface', '{[]', 'int', ',', 'nil', '}', '==', 'nil', ',', 'which', 'turns', 'out', 'to', 'be', 'false', 'in', 'go.', 'The', 'issue', 'is', 'actually', 'explained', 'in', 'the', 'Go', 'FAQ.']"
242,21488512,"I found a couple packages to help visualize data in Go.

My personal favourite - https://github.com/davecgh/go-spew

There's also - https://github.com/tonnerre/golang-pretty
","['I', 'found', 'a', 'couple', 'packages', 'to', 'help', 'visualize', 'data', 'in', 'Go.', 'My', 'personal', 'favourite', '-', 'https://github.com/davecgh/go-spew', ""There's"", 'also', '-', 'https://github.com/tonnerre/golang-pretty']"
243,21528010,"

Produces:


  2009/11/10 23:00:00 Void
  2009/11/10 23:00:00 Black


Playground
","['If', 'you', 'declare', 'the', 'PrintColour', 'method', 'on', 'the', 'Animal', 'type,', 'it', 'will', 'be', '""inherited""', 'when', 'you', 'include', 'Animal', 'in', 'Dog.', 'This', 'is', 'known', 'as', '""Embedding""', 'in', 'the', 'Go', 'world.', 'See', 'The', '""Embedding""', 'section', 'of', 'Effective', 'Go', 'for', 'more', 'info.', 'Try', 'something', 'like:', 'package', 'main', 'import', '""log""', 'type', 'Animal', 'struct', '{', 'Colour', 'string', 'Name', 'string', '}', 'type', 'Dog', 'struct', '{', 'Animal', '}', 'func', '(', 'a', '*', 'Animal', ')', 'PrintColour', '()', '{', 'log.Printf(""%s\\n"", a.Colour)', '}', 'func', 'main', '()', '{', 'a', ':=', 'new', '(', 'Animal', ')', 'a', '.', 'Colour', '=', '""Void""', 'd', ':=', 'new', '(', 'Dog', ')', 'd', '.', 'Colour', '=', '""Black""', 'a.PrintColour()', 'd.PrintColour()', '}', 'Produces:', '2009/11/10', '23:00:00', 'Void', '2009/11/10', '23:00:00', 'Black', 'Playground']"
244,21530413,"
","['You', 'could', 'try', 'it', 'with', 'interface{}', 'package', 'main', 'import', '(', '""fmt""', '""reflect""', ')', 'type', 'Animal', 'struct', '{', 'Colour', 'string', 'Name', 'string', '}', 'type', 'Dog', 'struct', '{', 'Animal', '}', 'func', 'PrintColour', '(', 'a', 'interface', '{})', '{', 'switch', 'a', '.(', 'type', '){', 'case', '*', 'Dog', ':', 'fmt.Printf(""Dog %s\\n"", a.(*Dog).Colour)', 'case', '*', 'Animal', ':', 'fmt.Printf(""Aimal %s\\n"", a.(*Animal).Colour)', 'default', ':', 'fmt.Printf(""hmm %s\\n"", reflect.TypeOf(a))', '}', '}', 'func', 'main', '()', '{', 'a', ':=', 'new', '(', 'Animal', ')', 'a', '.', 'Colour', '=', '""Void""', 'd', ':=', 'new', '(', 'Dog', ')', 'd', '.', 'Colour', '=', '""Black""', 'PrintColour', '(', 'a', ')', 'PrintColour', '(', 'd', ')', '}']"
245,21530419,"

playground

In the reference : the sentence after the second code block explains how you can declare an ""anonymous"" field, and states :


  The unqualified type name acts as the field name. 

","['The', 'embedded', '(anonymous)', 'field', 'can', 'still', 'be', 'explicitly', 'accessed', 'by', 'using', 'its', 'typename', ':', 'package', 'main', 'import', '""log""', 'type', 'Animal', 'struct', '{', 'Colour', 'string', 'Name', 'string', '}', 'type', 'Dog', 'struct', '{', 'Animal', '}', 'func', 'PrintColour', '(', 'a', '*', 'Animal', ')', '{', 'log.Printf(""%s\\n"", a.Colour)', '}', 'func', 'main', '()', '{', 'a', ':=', 'new', '(', 'Animal', ')', 'a', '.', 'Colour', '=', '""Void""', 'PrintColour', '(', 'a', ')', 'd', ':=', 'new', '(', 'Dog', ')', 'd', '.', 'Colour', '=', '""Black""', '//', 'you', 'can', 'access', 'the', 'underlying', '""Animal""', 'through', '""d.Animal""', 'PrintColour', '(&', 'd', '.', 'Animal', ')', '}', 'playground', 'In', 'the', 'reference', ':', 'the', 'sentence', 'after', 'the', 'second', 'code', 'block', 'explains', 'how', 'you', 'can', 'declare', 'an', '""anonymous""', 'field,', 'and', 'states', ':', 'The', 'unqualified', 'type', 'name', 'acts', 'as', 'the', 'field', 'name.']"
246,21532866,"
","[""I'm"", 'trying', 'to', 'learn', 'interfaces', 'and', 'how', 'I', 'can', 'write', 'a', 'single', 'function', 'to', 'work', 'with', 'different', 'types.', 'then', ""it's"", 'probably', 'simpler', 'to', 'avoid', 'the', 'whole', 'reflection', 'package,', 'and', 'just', 'define', 'an', 'interface', 'for', 'your', 'specific', 'purpose..', 'and', 'types', 'that', 'implement', 'your', 'interface.', 'something', 'like', 'this:', 'package', 'main', 'import', '""fmt""', 'import', '""math""', '//', 'Homegrown', 'types', 'type', 'IntArray', '[]', 'int', 'type', 'Float32Array', '[]', 'float32', '//', 'Max', 'defined', 'for', 'type', 'IntArray', 'func', '(', 'a', 'IntArray', ')', 'Max', '()', 'float64', '{', 'max', ':=', 'math', '.', 'MinInt32', ';', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'a', ');', 'i', '++', '{', 'if', 'a', '[', 'i', ']', '>', 'max', '{', 'max', '=', 'a', '[', 'i', ']', '}', '}', 'return', 'float64', '(', 'max', ')', '}', '//', 'Max', 'defined', 'for', 'type', 'Float32Array', 'func', '(', 'a', 'Float32Array', ')', 'Max', '()', 'float64', '{', 'max', ':=', 'float32', '(-', '1', '*', 'math', '.', 'MaxFloat32', ')', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'a', ');', 'i', '++', '{', 'if', 'a', '[', 'i', ']', '>', 'max', '{', 'max', '=', 'a', '[', 'i', ']', '}', '}', 'return', 'float64', '(', 'max', ')', '}', '//', 'Define', 'an', 'interface', 'that', 'works', 'for', 'any', 'type', '//', 'containing', 'a', 'Max', 'function', 'returning', 'a', 'float64', 'type', 'Maxing', 'interface', '{', 'Max', '()', 'float64', '}', '//', 'Define', 'a', 'function', 'that', 'works', 'with', 'your', 'interface', 'type', 'func', 'maxer', '(', 'm', 'Maxing', ')', 'float64', '{', 'return', 'm.Max()', ';', '}', 'func', 'main', '(){', '//', 'Declare', 'a', 'new', 'IntArray', 'i', ':=', 'IntArray', '([]', 'int', '{', '1', ',', '2', ',', '3', '})', '//', 'Declare', 'a', 'new', 'Float32Array', 'f', ':=', 'Float32Array', '([]', 'float32', '{', '1', '.', '0', ',', '2', '.', '0', ',', '3', '.', '0', '})', '//', 'Use', 'any', 'type', 'implementing', 'the', 'Max', 'interface', 'with', 'the', ""'maxer'"", 'func', 'fmt.Printf(""maxer(IntArray)     = %f\\n"", maxer(i))', ';', 'fmt.Printf(""maxer(Float32Array) = %f\\n"", maxer(f))', ';', '}']"
247,21540581,"My example might not be great but you can do what you want this way:

http://play.golang.org/p/JoAlOvJthr

Essentially use an interface to define the common functionality you want to expose to the outside world for all your types and embedded types.

(My example may not be the best but it works)
","['My', 'example', 'might', 'not', 'be', 'great', 'but', 'you', 'can', 'do', 'what', 'you', 'want', 'this', 'way:', 'http://play.golang.org/p/JoAlOvJthr', 'Essentially', 'use', 'an', 'interface', 'to', 'define', 'the', 'common', 'functionality', 'you', 'want', 'to', 'expose', 'to', 'the', 'outside', 'world', 'for', 'all', 'your', 'types', 'and', 'embedded', 'types.', '(My', 'example', 'may', 'not', 'be', 'the', 'best', 'but', 'it', 'works)']"
248,21551995,"

On the playground

It will be possible to add further fields to Dog. The difference to Uriel's Answer is that calls to PrintColour will fail at compile time if something else than a struct implementing Animalizer is passed in. 

Also you won't have to use a typeswitch since the compiler knows an Animalizer is implementing GetColour.

And, finally, the behaviour (printing) is separated from the struct, GetColour just returns the colour.
","['I', 'like', 'the', 'answers', 'here', 'so', 'far', 'and', 'I', 'want', 'to', 'add', 'one', 'that', 'allows', 'you', 'to', 'do', 'static', 'type', 'checking', 'on', 'the', 'interface', 'you', 'pass', 'in', 'using', 'an', 'interface:', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'Animalizer', 'interface', '{', 'GetColour', '()', 'string', '}', 'type', 'Animal', 'struct', '{', 'Colour', 'string', 'Name', 'string', '}', 'type', 'Dog', 'struct', '{', 'Animal', '}', 'func', '(', 'a', '*', 'Animal', ')', 'GetColour', '()', 'string', '{', 'return', 'a', '.', 'Colour', '}', 'func', 'PrintColour', '(', 'a', 'Animalizer', ')', '{', 'fmt.Print(a.GetColour())', '}', 'func', 'main', '()', '{', 'a', ':=', 'new', '(', 'Animal', ')', 'a', '.', 'Colour', '=', '""Void""', 'd', ':=', 'new', '(', 'Dog', ')', 'd', '.', 'Colour', '=', '""Black""', 'PrintColour', '(', 'a', ')', 'PrintColour', '(', 'd', ')', '}', 'On', 'the', 'playground', 'It', 'will', 'be', 'possible', 'to', 'add', 'further', 'fields', 'to', 'Dog.', 'The', 'difference', 'to', ""Uriel's"", 'Answer', 'is', 'that', 'calls', 'to', 'PrintColour', 'will', 'fail', 'at', 'compile', 'time', 'if', 'something', 'else', 'than', 'a', 'struct', 'implementing', 'Animalizer', 'is', 'passed', 'in.', 'Also', 'you', ""won't"", 'have', 'to', 'use', 'a', 'typeswitch', 'since', 'the', 'compiler', 'knows', 'an', 'Animalizer', 'is', 'implementing', 'GetColour.', 'And,', 'finally,', 'the', 'behaviour', '(printing)', 'is', 'separated', 'from', 'the', 'struct,', 'GetColour', 'just', 'returns', 'the', 'colour.']"
249,21615321,"
","['Use', 'net.SplitHostPort:', 'ip', ',', '_', ',', '_', ':=', 'net.SplitHostPort(r.RemoteAddr)']"
250,21643545," should work.
","['bufio.Reader', 'implements', 'the', 'ByteReader', 'interface.', 'Wrapping', 'conn', 'using', 'bufio.NewReader(conn)', 'should', 'work.']"
251,21644134,"
","['The', 'problem', 'is', 'that', 'the', 'underlying', 'net.TCPConn', 'returned', 'by', 'net.Dial', 'as', 'net.Conn', 'only', 'implements', 'the', 'Read', '(', 'byte', '[])', '(', 'int', ',', 'err', ')', 'method.', 'This', 'means', 'that', 'the', 'returned', 'net.Conn', 'satisfies', 'the', 'io.Reader', 'interface,', 'but', 'it', 'does', 'not', 'satisfy', 'the', 'io.ByteReader', 'interface', 'because', 'net.TCPConn', ""doesn't"", 'have', 'a', 'ReadByte', '()', '(', 'c', 'byte', ',', 'err', 'error', ')', 'method.', 'You', 'can', 'use', 'the', 'bufio.NewReader', 'function', 'to', 'wrap', 'the', 'net.Conn', 'in', 'a', 'type', 'that', 'does', 'implement', 'the', 'io.ByteReader', 'interface.', 'Example:', 'package', 'main', 'import', '(', '""bufio""', '""encoding/binary""', '""fmt""', '""net""', ')', 'func', 'main', '()', '{', 'conn', ',', 'err', ':=', 'net.Dial(""tcp"", ""google.com:80"")', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'defer', 'conn.Close()', 'fmt.Fprintf(conn, ""GET / HTTP/1.0\\r\\n\\r\\n"")', 'length', ',', 'err', ':=', 'binary.ReadVarint(bufio.NewReader(conn))', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'fmt.Println(length)', '}']"
252,21655525,"

The only tricky part is to use _ instead of i, to avoid an error ""i declared and not used"" when you try to build your program.
_ is called the blank identifier, you can learn more in the go documentation.
","['You', 'are', 'nearly', 'there:', 'package', 'main', 'import', '(', '""fmt""', ')', 'var', 'months', '=', '[', '12', ']', 'string', '{', '""January""', ',', '""February""', ',', '""March""', ',', '""April""', ',', '""May""', ',', '""June""', ',', '""July""', ',', '""August""', ',', '""September""', ',', '""October""', ',', '""November""', ',', '""December""', ',', '}', 'func', 'main', '()', '{', 'for', '_', ',', 'month', ':=', 'range', 'months', '{', 'fmt.Printf(""%s\\n"", month)', '}', '}', 'The', 'only', 'tricky', 'part', 'is', 'to', 'use', '_', 'instead', 'of', 'i,', 'to', 'avoid', 'an', 'error', '""i', 'declared', 'and', 'not', 'used""', 'when', 'you', 'try', 'to', 'build', 'your', 'program.', '_', 'is', 'called', 'the', 'blank', 'identifier,', 'you', 'can', 'learn', 'more', 'in', 'the', 'go', 'documentation.']"
253,21656121,"
","['For', 'example,', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 'for', 'i', ':=', 'time', '.', 'January', ';', 'i', '<=', 'time', '.', 'December', ';', 'i', '++', '{', 'fmt.Printf(""%s\\n"", i)', '}', '}', 'Output:', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']"
254,21863024,") as well as any code that that code imports and store it in your local $GOPATH/src/ directory then build it and store it so that is available to call via import, so you should never have to call go get more than once unless your GOPATH is being changed and it should always be available locally after the initial go get.
","['From', 'the', 'go', 'documentation:', 'Get', 'downloads', 'and', 'installs', 'the', 'package', 's', 'named', 'by', 'the', 'import', 'paths', ',', 'along', 'with', 'their', 'dependencies', '.', 'To', 'expand', 'on', 'that:', 'go', 'get', 'will', 'clone', 'the', 'code', ""you're"", 'requesting', 'from', 'the', 'repository', '(in', 'this', 'case', 'github', '.', 'com/codegangsta/martini', ')', 'as', 'well', 'as', 'any', 'code', 'that', 'that', 'code', 'imports', 'and', 'store', 'it', 'in', 'your', 'local', '$GOPATH/src/', 'directory', 'then', 'build', 'it', 'and', 'store', 'it', 'so', 'that', 'is', 'available', 'to', 'call', 'via', 'import,', 'so', 'you', 'should', 'never', 'have', 'to', 'call', 'go', 'get', 'more', 'than', 'once', 'unless', 'your', 'GOPATH', 'is', 'being', 'changed', 'and', 'it', 'should', 'always', 'be', 'available', 'locally', 'after', 'the', 'initial', 'go', 'get.']"
255,21918434," is implemented in such a way that it only works for self-signed user ids, because it doesn't use the right public key in the hash.

Bug report, with patch https://code.google.com/p/go/issues/detail?id=7371
","['The', 'code', 'looks', 'roughly', 'ok,', 'except', 'that', 'it', 'really', 'should', 'be', 'stricter', 'with', 'error', 'checking.', 'Panicking', 'on', 'error', 'is', 'better', 'then', 'no', 'error', 'checking', 'at', 'all', '(because', 'it', 'will', 'usually', 'segfault', 'sometimes', 'later).', 'The', 'problem', 'is', 'that', 'the', 'implementation', 'of', 'Signature.SignUserId()', 'inside', 'code', '.', 'go', 'ogle', '.', 'com/p/go.crypto/openpgp', 'is', 'wrong.', 'It', 'is', 'using', 'the', 'algorithm', 'that', 'signs', 'a', 'key', '(which', 'is', 'use', 'to', 'certify', 'that', 'the', 'subkey', 'belongs', 'to', 'the', 'primary', 'key)', 'instead', 'of', 'the', 'algorithm', 'that', 'signs', 'a', 'user', 'id.', 'In', 'addition,', 'while', 'exploring', 'this', 'I', 'realized', 'that', 'PublicKey.VerifyUserIdSignature()', 'is', 'implemented', 'in', 'such', 'a', 'way', 'that', 'it', 'only', 'works', 'for', 'self-signed', 'user', 'ids,', 'because', 'it', ""doesn't"", 'use', 'the', 'right', 'public', 'key', 'in', 'the', 'hash.', 'Bug', 'report,', 'with', 'patch', 'https://code.google.com/p/go/issues/detail?id=7371']"
256,22027473,"

Again, without an example, I'm only guessing that this is your problem.
","['Can', 'you', 'share', 'an', 'example', 'of', 'the', 'json', 'you', 'are', 'trying', 'to', 'decode?', 'I', 'suspect', 'that', 'it', 'is', 'an', 'annotations', 'issue.', 'Most', 'json', 'is', 'lowercase', 'due', 'to', 'the', 'javascript', 'syntax.', 'For', 'instance,', 'I', 'suspect', 'your', 'json', 'looks', 'like', 'this:', '{', '""pid""', ':', '""0""', ',', '""msgId""', ':', '""500""', ',', '""msg""', ':', '""this is the message""', '}', 'If', 'that', 'is', 'the', 'case,', 'then', 'you', 'need', 'annotations', 'on', 'your', 'struct', 'like', 'this:', 'type', 'Envelope', 'struct', '{', 'Pid', 'int', 'json', ':', '""pid""', 'MsgId', 'int64', 'json', ':', '""msgId""', 'Msg', 'interface', '{}', 'json', ':', '""msg""', '}', 'Again,', 'without', 'an', 'example,', ""I'm"", 'only', 'guessing', 'that', 'this', 'is', 'your', 'problem.']"
257,22107462,"

Let me know what you want your routes to be and I could give you a more specific example to what you are looking for.
","['We', 'have', 'used', 'http://www.gorillatoolkit.org/pkg/mux', 'for', 'over', 'a', 'year', 'in', 'our', 'production', 'stack', 'and', 'have', 'been', 'very', 'happy', 'with', 'it.', 'For', 'some', 'really', 'simple', 'sites', 'I', 'host', 'I', 'use', 'the', 'built', 'in', 'routing', 'something', 'like', 'this:', 'package', 'main', 'import', '(', '""flag""', '""fmt""', '""net/http""', '""os""', ')', 'const', '(', 'version', '=', '""0.1.0""', ')', 'var', '(', 'port', 'uint', ')', 'func', 'init', '()', '{', 'flag.UintVar(&port, ""port"", 8000, ""the port to listen on"")', 'flag.UintVar(&port, ""p"", 8000, ""the port to listen on"")', '}', 'func', 'main', '()', '{', 'flag.Parse()', '//', 'Retrieve', 'the', 'current', 'working', 'directory.', 'path', ',', 'err', ':=', 'os.Getwd()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'http.HandleFunc(""/gallery/view.aspx"", handleGallery)', 'http.HandleFunc(""/gallery/viewLarge.aspx"", handleViewLarge)', 'http.HandleFunc(""/ir.ashx"", handleImageResize)', 'http.Handle(""/"", http.FileServer(http.Dir(path)))', 'panic', '(', 'http.ListenAndServe(fmt.Sprintf("":%d"", port), nil))', '}', 'Let', 'me', 'know', 'what', 'you', 'want', 'your', 'routes', 'to', 'be', 'and', 'I', 'could', 'give', 'you', 'a', 'more', 'specific', 'example', 'to', 'what', 'you', 'are', 'looking', 'for.']"
258,22128462,"
","['how', 'about', 'you', 'use', 'something', 'like', 'this:', 'if', 'err', ':=', 'json.Unmarshal(input, temp_object)', ';', 'err', '!=', 'nil', '{', 'fmt.Println(""it\'s normal string!"")', '}', 'else', '{', 'fmt.Println(""it\'s json!"")', '}']"
259,22128517,"

Output:

true
false

","['For', 'example,', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', ')', 'func', 'isJSONString', '(', 's', 'string', ')', 'bool', '{', 'var', 'js', 'string', 'err', ':=', 'json.Unmarshal([]byte(s), &js)', 'return', 'err', '==', 'nil', '}', 'func', 'main', '()', '{', 'fmt.Println(isJSONString(`""Platypus""`))', 'fmt.Println(isJSONString(`Platypus`))', '}', 'Output:', 'true', 'false']"
260,22129435,"
","['I', 'was', 'unclear', 'if', 'you', 'needed', 'to', 'know', 'about', 'just', 'a', '""quoted', 'string""', 'or', 'if', 'you', 'needed', 'to', 'know', 'about', 'json,', 'or', 'the', 'difference', 'between', 'both', 'of', 'them,', 'so', 'this', 'shows', 'you', 'how', 'to', 'detect', 'both', 'scenarios', 'so', 'you', 'can', 'be', 'very', 'specific.', 'I', 'posted', 'the', 'interactive', 'code', 'sample', 'here', 'as', 'well:', 'http://play.golang.org/p/VmT0BVBJZ7', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', ')', 'func', 'isJSONString', '(', 's', 'string', ')', 'bool', '{', 'var', 'js', 'string', 'return', 'json.Unmarshal([]byte(s), &js)', '==', 'nil', '}', 'func', 'isJSON', '(', 's', 'string', ')', 'bool', '{', 'var', 'js', 'map', '[', 'string', ']', 'interface', '{}', 'return', 'json.Unmarshal([]byte(s), &js)', '==', 'nil', '}', 'func', 'main', '()', '{', 'var', 'tests', '=', '[]', 'string', '{', '""Platypus""', ',', 'Platypus', ',', '{', '""id""', ':', '""1""', '}', ',', '}', 'for', '_', ',', 't', ':=', 'range', 'tests', '{', 'fmt.Printf(""isJSONString(%s) = %v\\n"", t, isJSONString(t))', 'fmt.Printf(""isJSON(%s) = %v\\n\\n"", t, isJSON(t))', '}', '}', 'Which', 'will', 'output', 'this:', 'isJSONString', '(', '""Platypus""', ')', '=', 'true', 'isJSON', '(', '""Platypus""', ')', '=', 'false', 'isJSONString', '(', 'Platypus', ')', '=', 'false', 'isJSON', '(', 'Platypus', ')', '=', 'false', 'isJSONString', '({', '""id""', ':', '""1""', '})', '=', 'false', 'isJSON', '({', '""id""', ':', '""1""', '})', '=', 'true']"
261,22132076,"
","['The', 'log.SetOutput(ioutil.Discard)', 'statement', 'changes', 'the', 'standard', 'logger', 'output', 'destination.', 'The', 'defer', 'log.SetOutput(os.Stdout)', 'statement', 'attempts', 'to', 'reset', 'the', 'output', 'destination', 'back', 'to', 'its', 'initial', 'value', 'when', 'the', 'function', 'ends.', 'However,', 'it', 'should', 'have', 'reset', 'it', 'back', 'to', 'os.Stderr.', 'src/pkg/log/log.go', 'var', 'std', '=', 'New', '(', 'os', '.', 'Stderr', ',', '""""', ',', 'LstdFlags', ')']"
262,22214673,"

In Go, a Rect is just four integers contiguous in memory. You can still pass &r.Max to function expecting a *Point, that's just a pointer into the middle of the Rect variable r. 

In Java, the equivalent expression would be to make Rect and Point classes, in which case the Min and Max fields in Rect would be pointers to separately allocated objects. This requires more allocated objects, taking up more memory, and giving the garbage collector more to track and more to do. On the other hand, it does avoid ever needing to create a pointer to the middle of an object.

Compared to Java, then, Go gives you the programmer more control over memory layout, and you can use that control to reduce the load on the garbage collector. That can be very important in programs with large amounts of data. Control over memory layout may also be important for extracting performance from the hardware due to cache effects and such, but that's tangential to the original question.

The collector in the current Go distributions is reasonable but by no means state of the art. We have plans to spend more effort improving it over the next year or two. To be clear, 
Go's garbage collector is certainly not as good as modern Java garbage collectors, but we believe it is easier in Go to write programs that don't need as much garbage collection to begin with, so the net effect can still be that garbage collection is less of an issue in a Go program than in an equivalent Java program.
","['Go', 'does', 'not', 'have', 'latency-free', 'garbage', 'collection.', 'If', 'you', 'can', 'point', 'out', 'where', 'those', 'claims', 'are,', ""I'd"", 'like', 'to', 'try', 'to', 'correct', 'them.', 'One', 'advantage', 'that', 'we', 'believe', 'Go', 'has', 'over', 'Java', 'is', 'that', 'it', 'gives', 'you', 'more', 'control', 'over', 'memory', 'layout.', 'For', 'example,', 'a', 'simple', '2D', 'graphics', 'package', 'might', 'define:', 'type', 'Rect', 'struct', '{', 'Min', 'Point', 'Max', 'Point', '}', 'type', 'Point', 'struct', '{', 'X', 'int', 'Y', 'int', '}', 'In', 'Go,', 'a', 'Rect', 'is', 'just', 'four', 'integers', 'contiguous', 'in', 'memory.', 'You', 'can', 'still', 'pass', '&r.Max', 'to', 'function', 'expecting', 'a', '*Point,', ""that's"", 'just', 'a', 'pointer', 'into', 'the', 'middle', 'of', 'the', 'Rect', 'variable', 'r.', 'In', 'Java,', 'the', 'equivalent', 'expression', 'would', 'be', 'to', 'make', 'Rect', 'and', 'Point', 'classes,', 'in', 'which', 'case', 'the', 'Min', 'and', 'Max', 'fields', 'in', 'Rect', 'would', 'be', 'pointers', 'to', 'separately', 'allocated', 'objects.', 'This', 'requires', 'more', 'allocated', 'objects,', 'taking', 'up', 'more', 'memory,', 'and', 'giving', 'the', 'garbage', 'collector', 'more', 'to', 'track', 'and', 'more', 'to', 'do.', 'On', 'the', 'other', 'hand,', 'it', 'does', 'avoid', 'ever', 'needing', 'to', 'create', 'a', 'pointer', 'to', 'the', 'middle', 'of', 'an', 'object.', 'Compared', 'to', 'Java,', 'then,', 'Go', 'gives', 'you', 'the', 'programmer', 'more', 'control', 'over', 'memory', 'layout,', 'and', 'you', 'can', 'use', 'that', 'control', 'to', 'reduce', 'the', 'load', 'on', 'the', 'garbage', 'collector.', 'That', 'can', 'be', 'very', 'important', 'in', 'programs', 'with', 'large', 'amounts', 'of', 'data.', 'Control', 'over', 'memory', 'layout', 'may', 'also', 'be', 'important', 'for', 'extracting', 'performance', 'from', 'the', 'hardware', 'due', 'to', 'cache', 'effects', 'and', 'such,', 'but', ""that's"", 'tangential', 'to', 'the', 'original', 'question.', 'The', 'collector', 'in', 'the', 'current', 'Go', 'distributions', 'is', 'reasonable', 'but', 'by', 'no', 'means', 'state', 'of', 'the', 'art.', 'We', 'have', 'plans', 'to', 'spend', 'more', 'effort', 'improving', 'it', 'over', 'the', 'next', 'year', 'or', 'two.', 'To', 'be', 'clear,', ""Go's"", 'garbage', 'collector', 'is', 'certainly', 'not', 'as', 'good', 'as', 'modern', 'Java', 'garbage', 'collectors,', 'but', 'we', 'believe', 'it', 'is', 'easier', 'in', 'Go', 'to', 'write', 'programs', 'that', ""don't"", 'need', 'as', 'much', 'garbage', 'collection', 'to', 'begin', 'with,', 'so', 'the', 'net', 'effect', 'can', 'still', 'be', 'that', 'garbage', 'collection', 'is', 'less', 'of', 'an', 'issue', 'in', 'a', 'Go', 'program', 'than', 'in', 'an', 'equivalent', 'Java', 'program.']"
263,22234956,"

Or if you have something like a server loop going on in the main routine you may not need that at all since your program won't finish until a relevant signal is externally sent to it.

Hope that helps.
","['Yes.', 'Please', 'remember', 'that', 'you', 'will', 'still', 'need', 'the', 'main', 'goroutine', 'alive', 'for', 'these', 'to', 'finish', 'before', 'the', 'program', 'ends.', 'You', 'can', 'use', 'something', 'like', 'sync.WaitGroup:', 'wg', ':=', 'new', '(', 'sync', '.', 'WaitGroup', ')', 'for', 'key', ':=', 'range', 'Map', '{', 'wg.Add(1)', 'go', 'func', '()', '{', 'subroutine', '(', 'Map', '[', 'key', '])', 'wg.Done()', '}', '}', 'wg.Wait()', 'Or', 'if', 'you', 'have', 'something', 'like', 'a', 'server', 'loop', 'going', 'on', 'in', 'the', 'main', 'routine', 'you', 'may', 'not', 'need', 'that', 'at', 'all', 'since', 'your', 'program', ""won't"", 'finish', 'until', 'a', 'relevant', 'signal', 'is', 'externally', 'sent', 'to', 'it.', 'Hope', 'that', 'helps.']"
264,22298485,"

Do not forget to call syscall.Munmap on the returned slice, when you are done using it.
","['This', 'will', 'not', 'be', 'possible', 'without', 'actually', '/not/', 'allocating', 'the', 'unused', 'parts.', 'The', 'way', 'a', 'slice', 'is', 'defined', 'in', 'Go,', 'is', 'through', 'a', 'reflect.SliceHeader', 'type', 'SliceHeader', 'struct', '{', 'Data', 'uintptr', 'Len', 'int', 'Cap', 'int', '}', 'It', 'contains', 'no', 'starting', 'index', 'field.', 'Merely', 'a', 'reference', 'to', 'an', 'underlying,', 'fixed', 'size', 'array.', 'It', 'is', 'this', 'underlying', 'array', 'which', 'holds', 'your', 'actual', 'data.', 'The', 'slice', 'is', 'simply', 'a', ""'window'"", 'into', 'that', 'array,', 'which', 'always', 'begins', 'at', 'index', '0.', 'Wherever', '0', 'may', 'be', 'in', 'the', 'underlying', 'array.', 'For', 'instance,', 'consider', 'the', 'following', 'code:', 'a', ':=', '[]', 'int', '{', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', '}', 'b', ':=', 'a', '[', '2', ':', '8', ']', 'c', ':=', 'a', '[', '8', ':]', 'd', ':=', 'b', '[', '2', ':', '4', ']', 'This', 'yields', 'a', 'memory', 'layout', 'as', 'follows:', 'fixed', 'array', ':', '[', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ']', '>', '[', '10', ']', 'int', 'at', 'address', '273785072', 'slice', 'a', ':', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '>', 'SliceHeader', '{', 'Data', ':', '273785072', 'Len', ':', '10', 'Cap', ':', '10', '}', 'slice', 'b', ':', '.', '.', '.', '.', '.', '.', '>', 'SliceHeader', '{', 'Data', ':', '273785080', 'Len', ':', '6', 'Cap', ':', '8', '}', 'slice', 'c', ':', '.', '.', '>', 'SliceHeader', '{', 'Data', ':', '273785104', 'Len', ':', '2', 'Cap', ':', '2', '}', 'slice', 'd', ':', '.', '.', '>', 'SliceHeader', '{', 'Data', ':', '273785088', 'Len', ':', '2', 'Cap', ':', '6', '}', 'The', 'values', 'for', 'Data', 'are', 'simply', 'address', 'offsets', 'into', 'the', 'fixed', 'array', 'and', 'all', 'four', 'slices', 'share', 'the', 'underlying', 'storage.', 'a', '=:=', '$', '273785072', 'b', '=:=', '$', '273785080', '=:=', '$', 'a', '+', 'sizeof', '(', 'int', ')*', '2', '=:=', '$', 'a', '+', '8', 'c', '=:=', '$', '273785104', '=:=', '$', 'a', '+', 'sizeof', '(', 'int', ')*', '8', '=:=', '$', 'a', '+', '32', 'd', '=:=', '$', '273785088', '=:=', '$', 'b', '+', 'sizeof', '(', 'int', ')*', '2', '=:=', '$', 'a', '+', 'sizeof', '(', 'int', ')*', '4', '=:=', '$', 'a', '+', '16', 'At', 'whatever', 'index', 'you', 're-slice', 'an', 'existing', 'slice,', 'the', 'new', 'slice', 'will', 'always', 'be', 'indexed', 'from', '0', 'to', 'len(s),', 'because', 'the', 'address', 'in', 'the', 'underlying', 'fixed', 'array', 'it', 'points', 'to', 'puts', 'it', 'there.', 'Memory', 'mapping', 'If', 'your', 'data', 'is', 'loaded', 'from', 'file', 'on', 'a', 'disk,', 'you', 'can', 'have', 'a', 'different', 'option:', 'use', 'syscall.Mmap', 'to', 'provide', 'access', 'to', 'the', 'data', 'through', 'a', 'slice,', 'starting', 'at', 'the', 'desired', 'index.', 'The', 'returned', 'slice', 'is', 'now', 'index', 'from', '0', 'and', 'it', 'covers', 'only', 'the', 'range', 'you', 'specified.', 'func', 'mmap', '(', 'fd', '*', 'os', '.', 'File', ',', 'start', ',', 'size', 'int', ')', '([]', 'byte', ',', 'error', ')', '{', '_', ',', 'err', ':=', 'fd.Seek(0, 0)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'syscall.Mmap(int(fd.Fd())', ',', 'start', ',', 'size', ',', 'syscall', '.', 'PROT_READ', ',', 'syscall', '.', 'MAP_SHARED', ')', '}', 'Do', 'not', 'forget', 'to', 'call', 'syscall.Munmap', 'on', 'the', 'returned', 'slice,', 'when', 'you', 'are', 'done', 'using', 'it.']"
265,22314814,"

Adapted from http://pastebin.com/0HwHPXFq.
","['You', 'are', 'benchmarking', 'RandStrings,', 'which,', 'not', 'surprisingly,', 'is', 'very', 'slow.', 'For', 'example,', 'how', 'long', 'does', 'this', 'take', 'to', 'run?', 'package', 'main', 'import', '(', '""fmt""', '""math/rand""', ')', 'const', 'chars', '=', '""ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 abcdefghijklmnopqrstuvwxyz""', '+', '""~!@#$%^&*()-_+={}[]\\\\|.?/\\""', ';:', 'const', 'Maxlen', '=', '1024', 'func', 'RandStrings', '(', 'N', 'int', ')', '[]', 'string', '{', 'r', ':=', 'make', '([]', 'string', ',', 'N', ')', 'ri', ':=', '0', 'buf', ':=', 'make', '([]', 'byte', ',', 'Maxlen', ')', 'known', ':=', 'map', '[', 'string', ']', 'bool', '{}', 'for', 'i', ':=', '0', ';', 'i', '<', 'N', ';', 'i', '++', '{', 'retry', ':', 'l', ':=', 'rand.Intn(Maxlen)', 'for', 'j', ':=', '0', ';', 'j', '<', 'l', ';', 'j', '++', '{', 'buf', '[', 'j', ']', '=', 'chars', '[', 'rand.Intn(len(chars))', ']', '}', 's', ':=', 'string', '(', 'buf', '[', '0', ':', 'l', '])', 'if', 'known', '[', 's', ']', '{', 'go', 'to', 'retry', '}', 'known', '[', 's', ']', '=', 'true', 'r', '[', 'ri', ']', '=', 's', 'ri', '++', '}', 'return', 'r', '}', 'func', 'runbench', '(', 't', 'string', ',', 'n', 'int', ')', '{', 'for', 'i', ':=', '0', ';', 'i', '<', 'n', ';', 'i', '++', '{', 'r', ':=', 'RandStrings', '(', '2', ')', '_', '=', 'r', '}', '}', 'func', 'main', '()', '{', 'iter', ':=', '64000000', 'incr', ':=', '1000', 'for', 'i', ':=', 'incr', ';', 'i', '<', 'iter', '+', '1', ';', 'i', '=', 'incr', '{', 'runbench', '(', '""t""', ',', 'i', ')', 'incr', '=', '2', '*', 'i', '}', '}', 'Adapted', 'from', 'http://pastebin.com/0HwHPXFq.']"
266,22316226,"
","['Prepare', 'your', 'random', 'strings', 'outside', 'of', 'the', 'benchmark,', 'before', 'starting', 'to', 'measure', 'the', 'time.', 'Also,', 'you', 'count', 'the', 'file', 'opening,', 'db', 'opening,', 'db', 'closing', 'and', 'file', 'deletion', 'as', 'part', 'of', 'the', 'benchmark.', 'All', 'this', 'means', 'that', ""you're"", 'very', 'unlikely', 'to', 'measure', 'the', 'performance', 'of', 'db.Set(k,', 'v)', 'with', 'any', 'precision.', 'Retry', 'your', 'benchmark', 'by', 'first', 'generating', 'iter', 'random', 'strings,', 'then', 'using', 'those', 'within', 'your', 'benchmark', 'loop.', 'type', 'Pair', 'struct', '{', 'key', ',', 'value', 'string', '}', 'var', 'randString', '=', 'make', '([]', 'Pair', ',', 'iter', ')', 'func', 'setupRandomPairs', '()', '{', 'known', ':=', 'make', '(', 'map', '[', 'string', ']', 'bool', ')', 'for', 'i', ':=', 'range', 'randString', '{', 'randString', '[', 'i', ']', '=', 'Pair', '{', 'key', ':', 'genRandomString', '(', 'known', '),', 'value', ':', 'genRandomString', '(', 'known', '),', '}', '}', '}', 'Then', 'in', 'your', 'benchmark', 'code:', 'setupRandomPairs', '()', '//', 'start', 'timing', 'for', '_', ',', 'pair', ':=', 'range', 'randString', '{', 'db.Set(pair.key, pair.value)', '}', '//', 'stop', 'timing', 'cleanup', '()']"
267,22352160,"

This is how interfaces work in Go. They just provide you with a set of methods you can call, hiding the actual implementation from you; and, when you just depend on a particular interface instead of a particular implementation, you can combine in multiple ways, as fmt.Fprintln and io.Copy do.
","[""It's"", 'perhaps', 'true', 'than', 'the', 'behavior', 'is', 'not', 'well', 'defined', 'in', 'the', 'documentation.', 'If', 'you', 'check', 'the', 'code:', 'https://code.google.com/p/appengine-go/source/browse/appengine/file/write.go#133', 'In', 'each', 'call', 'to', 'Write', 'the', 'data', 'is', 'sent', 'to', 'the', 'cloud', '(line', '139).', 'So', 'you', ""don't"", 'need', 'to', 'save.', '(You', 'should', 'close', 'the', 'file', 'when', ""you're"", 'done,', 'through.)', 'Anyway,', ""I'm"", 'confused', 'with', 'your', 'wording:', '""The', ""package's"", 'Create', 'function', 'requires', 'the', 'io.WriteCloser', 'interface.""', ""That's"", 'not', 'true.', 'The', ""package's"", 'Create', 'functions', 'returns', 'a', 'io.WriteCloser,', 'that', 'is,', 'a', 'thingy', 'you', 'can', 'write', 'to', 'and', 'close.', 'yourFile', ',', '_', ',', 'err', ':=', 'Create', '(', 'ctx', ',', '""filename""', ',', 'nil', ')', '//', 'Check', 'err', '!=', 'nil', 'here.', 'defer', 'func', '()', '{', 'err', ':=', 'yourFile.Close()', '//', 'Check', 'err', '!=', 'nil', 'here.', '}()', 'yourFile.Write([]byte(""This will be sent to the file immediately.""))', 'fmt.Fprintln(yourFile, ""This too."")', 'io.Copy(yourFile, someReader)', 'This', 'is', 'how', 'interfaces', 'work', 'in', 'Go.', 'They', 'just', 'provide', 'you', 'with', 'a', 'set', 'of', 'methods', 'you', 'can', 'call,', 'hiding', 'the', 'actual', 'implementation', 'from', 'you;', 'and,', 'when', 'you', 'just', 'depend', 'on', 'a', 'particular', 'interface', 'instead', 'of', 'a', 'particular', 'implementation,', 'you', 'can', 'combine', 'in', 'multiple', 'ways,', 'as', 'fmt.Fprintln', 'and', 'io.Copy', 'do.']"
268,22591419,"In an interpreted language like PHP, implementing eval is fairly simple. But Go is a compiled language. To implement eval in Go would require writing an interpreter for Go. This would not be impossible, but it would be a big job.

-Edit
You can have a look at https://godoc.org/bitbucket.org/binet/go-eval/pkg/eval which might do what you want. If it doesn't you could then maybe expand on it a bit. It isn't a full interpreter though.
","['In', 'an', 'interpreted', 'language', 'like', 'PHP,', 'implementing', 'eval', 'is', 'fairly', 'simple.', 'But', 'Go', 'is', 'a', 'compiled', 'language.', 'To', 'implement', 'eval', 'in', 'Go', 'would', 'require', 'writing', 'an', 'interpreter', 'for', 'Go.', 'This', 'would', 'not', 'be', 'impossible,', 'but', 'it', 'would', 'be', 'a', 'big', 'job.', '-Edit', 'You', 'can', 'have', 'a', 'look', 'at', 'https://godoc.org/bitbucket.org/binet/go-eval/pkg/eval', 'which', 'might', 'do', 'what', 'you', 'want.', 'If', 'it', ""doesn't"", 'you', 'could', 'then', 'maybe', 'expand', 'on', 'it', 'a', 'bit.', 'It', ""isn't"", 'a', 'full', 'interpreter', 'though.']"
269,22596117,"Based on the examples you gave it seems like it'd be trivial-ish to build a bit of go code that knows how to evaluate checkGeo() or checkOs() rules; I think that'd be the best approach.

But that's not what you asked...

Another option would be to write the rules in Lua and run them with https://github.com/aarzilli/golua or in Javascript and use https://github.com/robertkrimen/otto
","['Based', 'on', 'the', 'examples', 'you', 'gave', 'it', 'seems', 'like', ""it'd"", 'be', 'trivial-ish', 'to', 'build', 'a', 'bit', 'of', 'go', 'code', 'that', 'knows', 'how', 'to', 'evaluate', 'checkGeo()', 'or', 'checkOs()', 'rules;', 'I', 'think', ""that'd"", 'be', 'the', 'best', 'approach.', 'But', ""that's"", 'not', 'what', 'you', 'asked...', 'Another', 'option', 'would', 'be', 'to', 'write', 'the', 'rules', 'in', 'Lua', 'and', 'run', 'them', 'with', 'https://github.com/aarzilli/golua', 'or', 'in', 'Javascript', 'and', 'use', 'https://github.com/robertkrimen/otto']"
270,22603364,"You don't need to pull in a full-blown interpreter for this sort of thing: write a simple parser that would pull your script apart into the syntax tree, and then write code that would walk that tree and ""evaluate"" it.  It's not really that hard for simplistic cases like yours.  And of course, your syntax might be made way simpler than PHP's since you don't want the full power of PHP's evaluator.

One simple example is rpn, but you can go simpler and invent a way to store your queries in, say, JSON.

Also note that Go has a Go parser in the form of a Go package — go/parser so you can write your queries using (minimal) Go syntax, parse them with go/parser and only implement an evaluator which would walk the AST produced by the parser and calculate the result.  But I think this would be an overengeneering, given the example you've provided.

And a minor nitpick: storing the code which is to be evaluated by a full-blown evaluator, like PHP, is dangerous: if someone somehow manages to inject a call to exec() or something like this in your table, the result will be suboptimal.  So having a primitive parser/evaluator is an upside from the security standpoint as well.
","['This', 'is', 'how', 'interfaces', 'work', 'in', 'Go.', 'They', 'just', 'provide', 'you', 'with', 'a', 'set', 'of', 'methods', 'you', 'can', 'call,', 'hiding', 'the', 'actual', 'implementation', 'from', 'you;', 'and,', 'when', 'you', 'just', 'depend', 'on', 'a', 'particular', 'interface', 'instead', 'of', 'a', 'particular', 'implementation,', 'you', 'can', 'combine', 'in', 'multiple', 'ways,', 'as', 'fmt.Fprintln', 'and', 'io.Copy', 'do.']"
271,22800641,"
","['It', 'just', 'so', 'happens', 'I', 'wrote', 'an', 'example', 'for', 'someone', 'recently.', 'https://gist.github.com/freeeve/9167240', 'The', 'meat', 'is', 'in', 'here,', 'replace', 'Post', 'with', 'Message', 'and', 'Comments', 'with', 'Friends:', 'msgs', ':=', '[]', 'Message', '{}', 'for', 'rows.Next()', '{', 'msg', ':=', 'Message', '{}', 'friend', ':=', 'Friend', '{}', 'err', ':=', 'rows.Scan(&msg.Id, &msg.Name, &msg.Street, &msg.City, &msg.Zip, &msg.State, &msg.Email, &msg.Phone, &friend.Id, &friend.Name)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'if', 'len', '(', 'msgs', ')', '==', '0', '||', 'msgs', '[', 'len', '(', 'msgs', ')-', '1', '].', 'Id', '!=', 'msg', '.', 'Id', '{', 'msg', '.', 'Friends', '=', 'append', '(', 'msg', '.', 'Friends', ',', 'friend', ')', 'msgs', '=', 'append', '(', 'msgs', ',', 'msg', ')', '}', 'else', '{', 'msgs', '[', 'len', '(', 'msgs', ')-', '1', '].', 'Friends', '=', 'append', '(', 'msgs', '[', 'len', '(', 'msgs', ')-', '1', '].', 'Friends', ',', 'friend', ')', '}', '}']"
272,22824962,"You can only have one case statement for each value, so that code is illegal. Additionally, fallthrough only works once, so even if it worked as you wanted for 0, it would still fail for 1.

The simplest solution is to put the initial 0,1 case in its own switch or if before the main switch.
","['You', 'can', 'only', 'have', 'one', 'case', 'statement', 'for', 'each', 'value,', 'so', 'that', 'code', 'is', 'illegal.', 'Additionally,', 'fallthrough', 'only', 'works', 'once,', 'so', 'even', 'if', 'it', 'worked', 'as', 'you', 'wanted', 'for', '0,', 'it', 'would', 'still', 'fail', 'for', '1.', 'The', 'simplest', 'solution', 'is', 'to', 'put', 'the', 'initial', '0,1', 'case', 'in', 'its', 'own', 'switch', 'or', 'if', 'before', 'the', 'main', 'switch.']"
273,22825063,"The reason for this behavior, in the current Go, is that the switch is implemented like an if-else-if.  Obviously, if (1) else if (1) doesn't make sense, thus you get this error.

Right now, there is no way to force the compiler to do this.  You have to rewrite your statements to get the effect you want.

Per this bug report comment supposedly quoting Rob Pike, this restriction will be lifted in a future Go version. 
",[]
274,22882847,"

I have put the lock in the deleter around the whole loop. It should be only necessary around the delete, however, you should not delete entries that way, with a range, because modifying the map can change the order of the iteration, so this structure should not be used in a real-life program.
","['You', 'are', 'executing', 'your', 'deleter', 'only', 'once.', 'In', 'addition,', 'map', 'access', 'is', 'not', 'concurrent-safe', 'so', 'you', 'need', 'to', 'add', 'Mutex', 'around', 'your', 'code.', 'Here', 'is', 'a', 'fix,', 'that', 'will', 'not', 'grow', 'with', 'time:', 'http://play.golang.org/p/GWQ2hJiySP', 'package', 'main', 'import', '(', '""fmt""', '""sync""', '""time""', ')', 'var', 'datastore', '=', 'make', '(', 'map', '[', 'int64', ']', 'string', ')', 'var', 'm', 'sync', '.', 'Mutex', 'func', 'adder', '()', '{', 'var', 'count', 'int64', '=', '0', 'for', '{', 'm.Lock()', 'datastore', '[', 'count', ']', '=', '""kjnbhjsdhgvsaghbsdbasjsabjhsabasbdjashdbashdbjasbdhasbdjbdjbdjhabjds""', 'm.Unlock()', 'count', '++', 'time.Sleep(10 * time.Microsecond)', '}', '}', 'func', 'deleter', '()', '{', 'for', '{', 'm.Lock()', 'for', 'key', ',', '_', ':=', 'range', 'datastore', '{', 'delete', '(', 'datastore', ',', 'key', ')', 'time.Sleep(1 * time.Microsecond)', '}', 'm.Unlock()', '}', '}', 'func', 'main', '()', '{', '//', 'Start', 'adding', 'stuff', 'to', 'datastore', '(with', 'MORE', 'sleep', 'time', '=', '10', 'Microsecond)', 'go', 'adder', '()', '//', 'Wait', 'for', 'some', 'time', 'time.Sleep(1 * time.Second)', '//', 'Start', 'deleting', 'stuff', 'from', 'datastore', '(With', 'LESS', 'sleep', 'time', '=', '1', 'Microsecond)', 'go', 'deleter', '()', 'time.Sleep(1 * time.Hour)', 'fmt.Println(""Done"")', '}', 'I', 'have', 'put', 'the', 'lock', 'in', 'the', 'deleter', 'around', 'the', 'whole', 'loop.', 'It', 'should', 'be', 'only', 'necessary', 'around', 'the', 'delete,', 'however,', 'you', 'should', 'not', 'delete', 'entries', 'that', 'way,', 'with', 'a', 'range,', 'because', 'modifying', 'the', 'map', 'can', 'change', 'the', 'order', 'of', 'the', 'iteration,', 'so', 'this', 'structure', 'should', 'not', 'be', 'used', 'in', 'a', 'real-life', 'program.']"
275,22883255,"
","['You', 'should', 'not', 'try', 'to', 'get', 'value', 'from', 'sC', 'channel', 'in', 'main', 'function', 'because', 'the', 'only', 'value', 'you', 'send', 'to', 'it', 'is', 'consumed', 'by', 'getC', 'function', 'in', 'seperate', 'go', 'routine.', 'While', 'trying', 'to', 'read', 'sC', 'channel', 'main', 'function', 'blocks', 'waiting', 'for', 'something', 'and', 'it', 'never', 'ends.', 'Go', 'routine', 'getS', 'is', 'finished,', 'go', 'routine', 'getC', 'has', 'consumed', 'value', 'from', 'channel', 'sC', 'and', 'has', 'also', 'finished.', 'There', 'is', 'nothing', 'in', 'channel', 'sC', 'anymore.', 'The', 'possible', 'solution', 'is', 'to', 'create', 'another', 'channel', 's2C', 'and', 'send', 'to', 'it', 'value', 'received', 'from', 'sC', 'channel.', 'The', 'complete', 'correct', 'code', 'would', 'look', 'like', 'this:', 'package', 'main', 'func', 'main', '()', '{', 'sC', ':=', 'make', '(', 'chan', 'string', ')', 'go', 'getS', '(', 'sC', ')', 's2C', ':=', 'make', '(', 'chan', 'string', ')', 'cC', ':=', 'make', '(', 'chan', 'string', ')', 'go', 'getC', '(', 's2C', ',', 'cC', ')', 's', ':=', '<-', 'sC', 'println', '(', 's', ')', 's2C', '<-', 's', 'c', ':=', '<-', 'cC', 'println', '(', 'c', ')', '}', 'func', 'getS', '(', 'sC', 'chan', 'string', ')', '{', 's', ':=', '"" simple completed ""', 'sC', '<-', 's', '}', 'func', 'getC', '(', 'sC', 'chan', 'string', ',', 'cC', 'chan', 'string', ')', '{', 's', ':=', '<-', 'sC', 'c', ':=', 's', '+', '"" more ""', 'cC', '<-', 'c', '}']"
276,22939850,"If you run into this problem after having $GOPATH set up, it may be because you're running it with an unsupported shell. I was using fish and it did not work, launching it with bash worked fine.
",[]
277,22962115,"The documentation is not clear about how to pass additional data directly; perhaps simply use a closure instead.

https://godoc.org/github.com/mattn/go-gtk/glib#CallbackContext
","['The', 'documentation', 'is', 'not', 'clear', 'about', 'how', 'to', 'pass', 'additional', 'data', 'directly;', 'perhaps', 'simply', 'use', 'a', 'closure', 'instead.', 'https://godoc.org/github.com/mattn/go-gtk/glib#CallbackContext']"
278,23002384," in the handler's signature, then, in the handler code, use type assertion to grab the actual arguments .
","['Based', 'on', 'response', 'from', 'the', 'amazing', 'mattn', 'on', 'GitHub:', 'https://github.com/mattn/go-gtk/blob/master/example/demo/demo.go#L58', 'Adopted,', 'tested', 'and', 'working:', 'import', '(', '...', '""github.com/mattn/go-gtk/glib""', ')', '...', 'func', 'ButtonHandler', '(', 'ctx', '*', 'glib', '.', 'CallbackContext', ')', '{', 'fmt.Printf(""Button Handler: %v\\n"", ctx.Data().(*gtk.RadioButton).GetState())', '}', 'aRadioButton.Connect(""toggled"", ButtonHandler, aRadioButton)', '...', 'Thedatasarguments', 'inconnect()must', 'be', 'passed', 'using', '*', 'glib', '.', 'CallbackContext', 'in', 'the', ""handler's"", 'signature,', 'then,', 'in', 'the', 'handler', 'code,', 'use', 'type', 'assertion', 'to', 'grab', 'the', 'actual', 'arguments', '.']"
279,23010085,"

That should do it.
","[""Can't"", 'you', 'just', 'wrap', 'policy', 'in', 'an', 'anonymous', 'function', 'that', 'would', 'do', 'the', 'conversion', 'for', 'you?', 'Something', 'like', 'this:', 'func', '(', 's', '*', 'SuperAgent', ')', 'RedirectPolicy', '(', 'policy', 'func', '(', 'req', 'Request', ',', 'via', '[]', 'Request', ')', 'error', ')', '*', 'SuperAgent', '{', 's', '.', 'Client', '.', 'CheckRedirect', '=', 'func', '(', 'r', '*', 'http', '.', 'Request', ',', 'v', '[]*', 'http', '.', 'Request', ')', 'error', '{', 'return', 'policy', '(', 'Request', '(', 'r', '),', '[]', 'Request', '(', 'v', '))', '}', 'return', 's', '}', ""I'm"", 'not', 'actually', 'sure', 'you', 'can', 'convert', 'the', '[]*http.Request', 'slice', 'to', 'a', '[]Request,', 'but', 'if', 'not,', 'you', 'could', 'create', 'a', 'temporary', 'slice', 'and', 'do', 'the', 'interface', 'conversion', 'one', 'by', 'one:', 'func', '(', 's', '*', 'SuperAgent', ')', 'RedirectPolicy', '(', 'policy', 'func', '(', 'req', 'Request', ',', 'via', '[]', 'Request', ')', 'error', ')', '*', 'SuperAgent', '{', 's', '.', 'Client', '.', 'CheckRedirect', '=', 'func', '(', 'r', '*', 'http', '.', 'Request', ',', 'v', '[]*', 'http', '.', 'Request', ')', 'error', '{', 'vv', ':=', 'make', '([]', 'Request', ',', 'len', '(', 'v', '))', 'for', 'i', ',', 'r', ':=', 'range', 'v', '{', 'vv', '[', 'i', ']', '=', 'Request', '(', 'r', ')', '}', 'return', 'policy', '(', 'Request', '(', 'r', '),', 'vv', ')', '}', 'return', 's', '}', 'That', 'should', 'do', 'it.']"
280,23025720,"

Or, more trivially as Jsor pointed out,

X xor Y  X != Y

","['There', 'is', 'not.', 'Go', 'does', 'not', 'provide', 'a', 'logical', 'exclusive-OR', 'operator', '(i.e.', 'XOR', 'over', 'booleans)', 'and', 'the', 'bitwise', 'XOR', 'operator', 'applies', 'only', 'to', 'integers.', 'However,', 'an', 'exclusive-OR', 'can', 'be', 'rewritten', 'in', 'terms', 'of', 'other', 'logical', 'operators.', 'When', 're-evaluation', 'of', 'the', 'expressions', '(X', 'and', 'Y)', 'is', 'ignored,', 'X', 'xor', 'Y', '->', '(', 'X', '||', 'Y', ')', '&&', '!(', 'X', '&&', 'Y', ')', 'Or,', 'more', 'trivially', 'as', 'Jsor', 'pointed', 'out,', 'X', 'xor', 'Y', 'X', '!=', 'Y']"
281,23144809,"As per http://golang.org/cmd/cgo/#hdr-Using_cgo_with_the_go_command


  When the Go tool sees that one or more Go files use the special import
  ""C"", it will look for other non-Go files in the directory and compile
  them as part of the Go package. Any .c, .s, or .S files will be
  compiled with the C compiler. Any .cc, .cpp, or .cxx files will be
  compiled with the C++ compiler.


So you can include the C library source in your repository and go will build it automatically. That page also explains how to pass build flags to the compilers and probably anything else you might need to know.
","['As', 'per', 'http://golang.org/cmd/cgo/#hdr-Using_cgo_with_the_go_command', 'When', 'the', 'Go', 'tool', 'sees', 'that', 'one', 'or', 'more', 'Go', 'files', 'use', 'the', 'special', 'import', '""C"",', 'it', 'will', 'look', 'for', 'other', 'non-Go', 'files', 'in', 'the', 'directory', 'and', 'compile', 'them', 'as', 'part', 'of', 'the', 'Go', 'package.', 'Any', '.c,', '.s,', 'or', '.S', 'files', 'will', 'be', 'compiled', 'with', 'the', 'C', 'compiler.', 'Any', '.cc,', '.cpp,', 'or', '.cxx', 'files', 'will', 'be', 'compiled', 'with', 'the', 'C++', 'compiler.', 'So', 'you', 'can', 'include', 'the', 'C', 'library', 'source', 'in', 'your', 'repository', 'and', 'go', 'will', 'build', 'it', 'automatically.', 'That', 'page', 'also', 'explains', 'how', 'to', 'pass', 'build', 'flags', 'to', 'the', 'compilers', 'and', 'probably', 'anything', 'else', 'you', 'might', 'need', 'to', 'know.']"
282,23193925,"The below samples from the App Engine docs would indicate that all your delay tasks created via delay.Function#Call should go to the default queue, and thus be deletable via the admin interface. If not, I would call it bug.

In fact, our delay tasks went to the default queue, and we could delete them with the admin interface.

https://developers.google.com/appengine/docs/go/taskqueue/delay#Function.Call


  func (f *Function) Call(c appengine.Context, args ...interface{})


Call invokes a delayed function.


  f.Call(c, ...)


is equivalent to


  t, _ := f.Task(...)
  taskqueue.Add(c, t, """")


https://developers.google.com/appengine/docs/go/taskqueue/reference#Add


  func Add(c appengine.Context, task *Task, queueName string) (*Task, error)


Add adds the task to a named queue. An empty queue name means that the default queue will be used. Add returns an equivalent Task with defaults filled in, including setting the task's Name field to the chosen name if the original was empty.
","['Or,', 'more', 'trivially', 'as', 'Jsor', 'pointed', 'out,', 'X', 'xor', 'Y', 'X', '!=', 'Y']"
283,23211837,"


From: http://nathany.com/good/

Solving the code you supplied, I will leave to some more learned Gopher
","['To', 'answer', 'the', 'question', 'the', 'in', 'the', 'title', 'to', 'post:', 'Go', 'does', 'not', 'use', 'classes,', 'but', 'provides', 'many', 'of', 'the', 'same', 'features:', '*', 'message', 'passing', 'with', 'methods', '*', 'automatic', 'message', 'delegation', 'via', 'embedding', '*', 'polymorphism', 'via', 'interface', 's', '*', 'namespacing', 'via', 'exports', 'From:', 'http://nathany.com/good/', 'Solving', 'the', 'code', 'you', 'supplied,', 'I', 'will', 'leave', 'to', 'some', 'more', 'learned', 'Gopher']"
284,23212996,"
","['Here', 'is', 'a', 'corrected', 'version', 'of', 'your', 'code', '(playground).', 'This', ""isn't"", 'exactly', 'Polymorphism,', 'but', 'the', 'use', 'of', 'an', 'interface', 'is', 'good', 'Go', 'style.', 'package', 'main', 'import', '""fmt""', 'type', 'MyInterfacer', 'interface', '{', 'Get', '()', 'int', 'Set', '(', 'i', 'int', ')', '}', 'type', 'MyStruct', 'struct', '{', 'data', 'int', '}', 'func', '(', 'this', '*', 'MyStruct', ')', 'Get', '()', 'int', '{', 'return', 'this', '.', 'data', '}', 'func', '(', 'this', '*', 'MyStruct', ')', 'Set', '(', 'i', 'int', ')', '{', 'this', '.', 'data', '=', 'i', '}', 'func', 'main', '()', '{', 's', ':=', '&', 'MyStruct', '{', '123', '}', 'fmt.Println(s.Get())', 's.Set(456)', 'fmt.Println(s.Get())', 'var', 'mi', 'MyInterfacer', '=', 's', 'mi.Set(789)', 'fmt.Println(mi.Get())', '}']"
285,23223156,"
","['I', 'once', 'found', 'this', 'example', 'of', 'how', 'to', 'do', 'polymorphism', 'in', 'Go:', 'http://play.golang.org/p/6Ip9scm4c3', 'package', 'main', 'import', '""fmt""', 'type', 'Talker', 'interface', '{', 'Talk', '(', 'words', 'string', ')', '}', 'type', 'Cat', 'struct', '{', 'name', 'string', '}', 'type', 'Dog', 'struct', '{', 'name', 'string', '}', 'func', '(', 'c', '*', 'Cat', ')', 'Talk', '(', 'words', 'string', ')', '{', 'fmt.Printf(""Cat "" + c.name + "" here: "" + words + ""\\n"")', '}', 'func', '(', 'd', '*', 'Dog', ')', 'Talk', '(', 'words', 'string', ')', '{', 'fmt.Printf(""Dog "" + d.name + "" here: "" + words + ""\\n"")', '}', 'func', 'main', '()', '{', 'var', 't1', ',', 't2', 'Talker', 't1', '=', '&', 'Cat', '{', '""Kit""', '}', 't2', '=', '&', 'Dog', '{', '""Doug""', '}', 't1.Talk(""meow"")', 't2.Talk(""woof"")', '}']"
286,23255749,"

There are no shadowed variables any more, and both the error logging and the return can be moved out of each if statement, resulting in much clearer code.

There may well be a way to improve on this. EDIT: ...and there is, following @ANisus' suggestion, the if-else chain has been replaced with a switch statement.
","['At', 'the', 'time', 'I', 'wrote', 'the', 'question,', 'my', 'function', 'looked', 'like', 'the', 'following:', '(shown', 'mostly', 'to', 'demonstrate', 'its', 'verbosity)', 'func', 'loadModule', '(', 'moduleName', ',', 'fileRoot', 'string', ')', '(', 'module', '[]', 'byte', ')', '{', 'if', 'strings.HasSuffix(moduleName, "".md"")', '{', 'module', ',', 'err', ':=', 'readConvertMDFile', '(', 'fileRoot', '+', '""htdocs/md/""', '+', 'moduleName', ')', 'if', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', 'return', 'module', '}', 'else', 'if', 'strings.HasSuffix(moduleName, "".html"")', '{', 'module', ',', 'err', ':=', 'ioutil.ReadFile(fileRoot + ""htdocs/html/"" + moduleName)', 'if', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', 'return', 'module', '}', 'else', 'if', 'strings.HasSuffix(moduleName, "".js"")', '{', 'module', ',', 'err', ':=', 'ioutil.ReadFile(fileRoot + ""htdocs/js/"" + moduleName)', 'if', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', 'return', 'module', '}', 'else', 'if', 'strings.HasSuffix(moduleName, "".css"")', '{', 'module', ',', 'err', ':=', 'ioutil.ReadFile(fileRoot + ""htdocs/css/"" + moduleName)', 'if', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', 'return', 'module', '}', 'else', '{', 'module', '=', '[]', 'byte', '{}', 'return', '}', '}', 'This', 'uses', 'my', 'suggested', 'solution', '1.', 'It', 'has', 'a', 'lot', 'of', 'repeated', 'code', ""(I'm"", 'still', 'something', 'of', 'a', 'beginner).', 'If', 'I', 'instead', 'use', 'suggested', 'solution', '2', '(but', 'not', 'in', 'the', 'way', 'I', 'originally', 'thought', 'of', 'it)', 'by', 'putting', 'var', 'err', 'error', 'at', 'the', 'top', 'of', 'then', 'function,', 'the', 'code', 'is', 'improved', 'in', 'two', 'ways:', 'func', 'loadModule', '(', 'moduleName', ',', 'fileRoot', 'string', ')', '(', 'module', '[]', 'byte', ')', '{', 'var', 'err', 'error', 'switch', '{', 'case', 'strings.HasSuffix(moduleName, "".md"")', ':', 'module', ',', 'err', '=', 'readConvertMDFile', '(', 'fileRoot', '+', '""htdocs/md/""', '+', 'moduleName', ')', 'case', 'strings.HasSuffix(moduleName, "".html"")', ':', 'module', ',', 'err', '=', 'ioutil.ReadFile(fileRoot + ""htdocs/html/"" + moduleName)', 'case', 'strings.HasSuffix(moduleName, "".js"")', ':', 'module', ',', 'err', '=', 'ioutil.ReadFile(fileRoot + ""htdocs/js/"" + moduleName)', 'case', 'strings.HasSuffix(moduleName, "".css"")', ':', 'module', ',', 'err', '=', 'ioutil.ReadFile(fileRoot + ""htdocs/css/"" + moduleName)', 'default', ':', 'module', '=', '[]', 'byte', '{}', '}', 'if', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', 'return', '}', 'There', 'are', 'no', 'shadowed', 'variables', 'any', 'more,', 'and', 'both', 'the', 'error', 'logging', 'and', 'the', 'return', 'can', 'be', 'moved', 'out', 'of', 'each', 'if', 'statement,', 'resulting', 'in', 'much', 'clearer', 'code.', 'There', 'may', 'well', 'be', 'a', 'way', 'to', 'improve', 'on', 'this.', 'EDIT:', '...and', 'there', 'is,', 'following', ""@ANisus'"", 'suggestion,', 'the', 'if-else', 'chain', 'has', 'been', 'replaced', 'with', 'a', 'switch', 'statement.']"
287,23256051,"

Option 2 is the most efficient solution too.  Remember that go returns all values on the stack so a named return value is equivalent to a stack allocated variable.

If in option 1 or option 3 you don't have a naked return, then there is an implicit module = module or module = moduleT statement in there anyway.

Unfortunately variable shadowing is something which bites every Go programmer after a while. I'd quite like the compiler to disallow all shadowing within a function as it is a source of real bugs.
","['I', 'always', 'use', 'your', 'suggested', 'solution', '2', '-', 'add', 'an', 'extra', 'var', 'statement.', 'func', 'loadModule', '(', 'moduleName', ',', 'fileRoot', 'string', ')', '(', 'module', '[]', 'byte', ')', '{', 'var', 'err', 'error', 'if', 'strings.HasSuffix(moduleName, "".md"")', '{', 'module', ',', 'err', '=', 'readConvertMDFile', '(', 'fileRoot', '+', '""htdocs/md/""', '+', 'moduleName', ')', 'if', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', 'return', '}', 'else', '{', '//', 'no', 'need', 'for', 'this', 'as', 'module', 'will', 'be', 'nil', 'if', 'it', ""isn't"", 'written', 'to', '//', 'a', 'nil', 'slice', 'is', 'perfectly', 'legal', 'and', 'has', 'len()=0', '//', 'and', 'can', 'be', 'appended', 'to', 'etc', '//', 'module', '=', '[]byte{}', 'return', '}', '}', 'Option', '2', 'is', 'the', 'most', 'efficient', 'solution', 'too.', 'Remember', 'that', 'go', 'returns', 'all', 'values', 'on', 'the', 'stack', 'so', 'a', 'named', 'return', 'value', 'is', 'equivalent', 'to', 'a', 'stack', 'allocated', 'variable.', 'If', 'in', 'option', '1', 'or', 'option', '3', 'you', ""don't"", 'have', 'a', 'naked', 'return,', 'then', 'there', 'is', 'an', 'implicit', 'module', '=', 'module', 'or', 'module', '=', 'moduleT', 'statement', 'in', 'there', 'anyway.', 'Unfortunately', 'variable', 'shadowing', 'is', 'something', 'which', 'bites', 'every', 'Go', 'programmer', 'after', 'a', 'while.', ""I'd"", 'quite', 'like', 'the', 'compiler', 'to', 'disallow', 'all', 'shadowing', 'within', 'a', 'function', 'as', 'it', 'is', 'a', 'source', 'of', 'real', 'bugs.']"
288,23258993,"The commit you've highlighted was from February last year, which is from before the Go 1.1 release.  It also references issue 4435, which is tagged Go1.1.

I'm not sure what people did to get around the restriction previously (if it was indeed possible), but for the last two released versions of the language, there has been no need to employ work arounds.  I've made use of the ability in a number of my projects without incident.
","['Option', '2', 'is', 'the', 'most', 'efficient', 'solution', 'too.', 'Remember', 'that', 'go', 'returns', 'all', 'values', 'on', 'the', 'stack', 'so', 'a', 'named', 'return', 'value', 'is', 'equivalent', 'to', 'a', 'stack', 'allocated', 'variable.', 'If', 'in', 'option', '1', 'or', 'option', '3', 'you', ""don't"", 'have', 'a', 'naked', 'return,', 'then', 'there', 'is', 'an', 'implicit', 'module', '=', 'module', 'or', 'module', '=', 'moduleT', 'statement', 'in', 'there', 'anyway.', 'Unfortunately', 'variable', 'shadowing', 'is', 'something', 'which', 'bites', 'every', 'Go', 'programmer', 'after', 'a', 'while.', ""I'd"", 'quite', 'like', 'the', 'compiler', 'to', 'disallow', 'all', 'shadowing', 'within', 'a', 'function', 'as', 'it', 'is', 'a', 'source', 'of', 'real', 'bugs.']"
289,23363971,"
","['See', 'also', 'the', 'fmt', 'package:', 'n', ':=', 'int64', '(', '123', ')', 'fmt.Printf(""%b"", n)', '// 1111011']"
290,23501877,"

You may be surprised by what actually gets allocated to the heap. For example, even if you use a bytes.Buffer locally it still gets allocated to the heap, due to bytes.Buffer.buf being re-sliced. Regardless of whether that's supposed to happen or not, there may be situations where you think you're not creating any garbage, but in reality you are.
","['The', 'fluctuations', 'are', 'likely', 'due', 'to', 'the', 'amount', 'of', 'garbage', 'your', 'program', 'is', 'creating', 'that', 'the', 'garbage', 'collector', 'has', 'to', 'eventually', 'collect.', 'The', 'frequency', 'of', 'the', 'fluctuation', 'is', 'going', 'to', 'depend', 'on', 'how', 'much', '/', 'how', 'often', 'you', 'are', 'creating', 'garbage', 'and', 'when', 'the', 'garbage', 'collector', 'collects', 'it.', 'Whether', 'a', 'variable', 'is', 'allocated', 'to', 'the', 'stack', 'or', 'the', 'heap', 'is', 'determined', 'by', 'the', 'compiler.', 'Generally', 'pointers,', 'maps,', 'and', 'slices', 'can', 'be', 'allocated', 'to', 'the', 'heap,', 'but', 'this', 'only', 'happens', 'if', 'the', ""compiler's"", 'escape', 'analysis', 'determines', 'that', 'a', 'variable', 'escapes.', 'Anything', 'that', 'is', 'allocated', 'to', 'the', 'heap', 'will', 'need', 'to', 'be', 'garbage', 'collected.', 'Even', 'though', 'Go', 'handles', 'the', 'stack', 'vs', 'heap', 'details,', 'creating', 'as', 'little', 'garbage', 'as', 'possible', 'can', 'be', 'of', 'great', 'benefit.', 'You', 'can', 'read', 'about', 'an', 'extreme', 'case', 'where', 'the', 'garbage', 'collector', 'paused', 'for', '10', 'seconds.', 'The', 'Go', 'garbage', 'collector', ""isn't"", 'perfect,', 'but', 'it', 'is', 'improving.', 'The', 'more', 'it', 'improves', 'less', ""you'll"", 'have', 'to', 'worry', 'about', 'it.', 'But', 'you', 'should', 'at', 'least', 'be', 'aware', 'of', 'it.', 'You', 'can', 'run', 'the', 'following', 'to', 'determine', 'what', 'the', 'compiler', 'will', 'allocate', 'to', 'the', 'heap:', 'go', 'build', '-', 'gcflags', '=-', 'm', 'program', '.', 'go', 'You', 'may', 'be', 'surprised', 'by', 'what', 'actually', 'gets', 'allocated', 'to', 'the', 'heap.', 'For', 'example,', 'even', 'if', 'you', 'use', 'a', 'bytes.Buffer', 'locally', 'it', 'still', 'gets', 'allocated', 'to', 'the', 'heap,', 'due', 'to', 'bytes.Buffer.buf', 'being', 're-sliced.', 'Regardless', 'of', 'whether', ""that's"", 'supposed', 'to', 'happen', 'or', 'not,', 'there', 'may', 'be', 'situations', 'where', 'you', 'think', ""you're"", 'not', 'creating', 'any', 'garbage,', 'but', 'in', 'reality', 'you', 'are.']"
291,23506978,"
","['I', 'had', 'tried', 'a', 'hell', 'lot', 'for', 'weeks.', 'This', 'one', 'worked', 'Setting', 'up', 'Go', 'development', 'environment', 'on', 'Ubuntu,', 'and', 'how', 'to', 'fix', '$GOPATH', '/', '$GOROOT', 'Steps', 'mkdir', '~/go', 'Set', '$GOPATH', 'in', '.bashrc,', 'export', 'GOPATH', '=', '/', 'go', 'export', 'PATH', '=$', 'PATH', ':$', 'GOPATH/bin']"
292,23563534,"
","['response', ',', 'error', ':=', 'http.Get(""http://another.service.com/image.jpg"")', 'if', 'error', '!=', 'nil', '{', '//', 'handle', 'error', '}', '_', ',', 'error', '=', 'http.Post(""http://max.com/upimg"", ""image/jpg"", response.Body)', 'if', 'error', '!=', 'nil', '{', '//', 'handle', 'error', '}', 'If', 'you', 'need', 'to', 'post', 'multipart', ""you'll"", 'have', 'to', 'encode', 'the', ""response's"", 'Body;', 'buffer', ':=', 'bytes.NewBuffer(nil)', 'encoder', ':=', 'multipart.NewWriter(buffer)', 'field', ',', 'error', ':=', 'encoder.CreateFormField(""image"")', '// Set ""image"" to correct field name', 'if', 'error', '!=', 'nil', '{', '//', 'handle', 'error', '}', '_', ',', 'error', '=', 'io.Copy(field, response.Body)', 'if', 'error', '!=', 'nil', '{', '//', 'handle', 'error', '}', '//', 'and', 'then', 'Post', 'buffer', 'instead', 'of', 'response.Body', 'Remember', 'to', 'set', 'the', 'correct', 'Content-Type', 'header', 'in', 'your', 'POST', 'request', '(e.g.', ""http.Post's"", 'second', 'argument)', 'to', 'something', 'like:', '""multipart/form-data; boundary=""', '+', 'encoder.Boundary()']"
293,23656689,"
","['float64', 'and', 'int', 'are', 'different', 'types,', 'but', 'conversions', 'are', 'allowed', 'under', 'specific', 'circumstances.', '(http://golang.org/ref/spec#Conversions)', 'Your', 'literal', '5', 'in', 'the', 'code', 'is', 'an', 'untyped', 'constant', '(http://golang.org/ref/spec#Constants),', 'and', 'the', 'proper', 'type', 'is', 'determined', 'by', 'the', 'expression', 'during', 'compilation.', 'Simply', 'use', 'float64', '(', 'len', '(', 'test_scores', '))']"
294,23656874,"

Maybe compiler perceives 5 as 5.0.. Anyway you should use conversion to float64.
","['This', 'lines', 'fmt.Printf(""%T\\n"", total)', 'fmt.Printf(""%T\\n"", 5)', 'fmt.Printf(""%T\\n"", 5.0)', 'fmt.Printf(""%T\\n"", len(test_scores))', 'prints', 'float64', 'int', 'float64', 'int', 'Maybe', 'compiler', 'perceives', '5', 'as', '5.0..', 'Anyway', 'you', 'should', 'use', 'conversion', 'to', 'float64.']"
295,23658470,"

The answer is still valid, though. The distinction between typed and untyped constants holds.
","['When', 'you', 'write', '5', 'directly', 'in', 'the', 'source-code', ""that's"", 'called', 'a', 'constant.', 'Same', 'goes', 'for', 'writing', 'true.', 'The', 'only', 'difference', 'is', 'that', 'the', 'former', 'is', 'an', 'untyped', 'constant', 'and', 'the', 'latter', 'a', 'typed', 'constant.', 'The', 'difference', 'lies', 'in', 'that', ""there's"", 'no', 'ambiguity', 'about', 'what', 'type', 'true', 'should', 'have', '–', ""it'll"", 'always', 'be', 'bool', 'but', 'in', 'the', 'case', 'of', '5', ""that's"", 'not', 'so', 'obvious', 'and', 'depends', 'on', 'the', 'context.', 'The', 'Go', 'compiler', 'will', 'figure', 'out', 'what', 'type', 'to', 'give', 'the', 'constant', 'on', 'compilation.', 'The', 'details', 'of', 'this', 'are', 'described', 'in', ""Go's"", 'language', 'specification.', 'Edit:', 'I', 'realized', 'that', ""there's"", 'a', 'mistake', 'in', 'my', 'answer:', 'true', 'is', 'in', 'fact', 'also', 'untyped', 'according', 'to', 'the', 'spec', 'because', 'it', 'may', 'be', 'utilized', 'anywhere', 'where', 'a', 'type', 'deriving', 'from', 'bool', 'is', 'expected.', 'That', 'means:', 'type', 'MyBool', 'bool', 'func', 'DoNothing', '(', 'b', 'MyBool', ')', '{}', 'DoNothing', '(', 'true', ')', '// true is coerced to MyBool', 'The', 'answer', 'is', 'still', 'valid,', 'though.', 'The', 'distinction', 'between', 'typed', 'and', 'untyped', 'constants', 'holds.']"
296,23747151,"As an answer and a follow-up of comments I received on the first post, I developed  Indenter, a small proof of concept based on the idea proposed of a service discovery daemon (I use etcd instead of ZooKeepr for simplicity however).

I wrote an article about it and release the code if someone may be interested one day:

Indenter: a scalable, fault-tolerant, distributed web service copying the go playground architecture.
","['As', 'an', 'answer', 'and', 'a', 'follow-up', 'of', 'comments', 'I', 'received', 'on', 'the', 'first', 'post,', 'I', 'developed', 'Indenter,', 'a', 'small', 'proof', 'of', 'concept', 'based', 'on', 'the', 'idea', 'proposed', 'of', 'a', 'service', 'discovery', 'daemon', '(I', 'use', 'etcd', 'instead', 'of', 'ZooKeepr', 'for', 'simplicity', 'however).', 'I', 'wrote', 'an', 'article', 'about', 'it', 'and', 'release', 'the', 'code', 'if', 'someone', 'may', 'be', 'interested', 'one', 'day:', 'Indenter:', 'a', 'scalable,', 'fault-tolerant,', 'distributed', 'web', 'service', 'copying', 'the', 'go', 'playground', 'architecture.']"
297,23760913,"Change filter to ""Phone ="", ...
","['The', 'answer', 'is', 'still', 'valid,', 'though.', 'The', 'distinction', 'between', 'typed', 'and', 'untyped', 'constants', 'holds.']"
298,23783295,"
","['There', 'is', 'a', 'Google', 'developped', 'library', 'called', 'JimFS', 'for', 'creating', 'an', 'in-memory', 'File', 'System', 'using', 'the', 'Java', 'NIO', ""it's"", 'open', 'source', 'under', 'the', 'Apache', '2', 'License', 'and', 'available', 'on', 'GitHub', 'it', 'is', 'very', 'easy', 'to', 'use', 'try', '(', 'FileSystem', 'fs', '=', 'Jimfs.newFileSystem(Configuration.unix()))', '{', 'Path', 'foo', '=', 'fs.getPath(""/foo"")', ';', 'Files.createDirectory(foo)', ';', 'Path', 'hello', '=', 'foo.resolve(""hello.txt"")', ';', '// /foo/hello.txt', 'Files.write(hello, ImmutableList.of(""hello world""), StandardCharsets.UTF_8)', ';', '//', 'Close', 'the', 'FileSystem', 'when', ""you're"", 'done', 'with', 'it', 'so', 'it', 'can', 'be', 'garbage', 'collected.', '}']"
299,24200239,"
","['I', 'would', 'modify', 'the', 'Unzip', 'function', 'from', 'https://gist.github.com/hnaohiro/4572580', 'to', 'the', 'following:', 'package', 'main', 'import', '(', '""archive/zip""', '""io""', '""log""', '""os""', '""path/filepath""', ')', 'func', 'unzipFile', '(', 'f', '*', 'zip', '.', 'File', ',', 'dest', 'string', ')', 'error', '{', 'rc', ',', 'err', ':=', 'f.Open()', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'defer', 'rc.Close()', 'path', ':=', 'filepath.Join(dest, f.Name)', 'if', 'f.FileInfo().IsDir()', '{', 'err', ':=', 'os.MkdirAll(path, f.Mode())', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', '}', 'else', '{', 'f', ',', 'err', ':=', 'os', '.', 'OpenFile', '(', 'path', ',', 'os', '.', 'O_WRONLY', '|', 'os', '.', 'O_CREATE', '|', 'os', '.', 'O_TRUNC', ',', 'f.Mode())', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'defer', 'f.Close()', '_', ',', 'err', '=', 'io.Copy(f, rc)', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', '}', 'return', 'nil', '}', 'func', 'Unzip', '(', 'src', ',', 'dest', 'string', ')', 'error', '{', 'r', ',', 'err', ':=', 'zip.OpenReader(src)', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'defer', 'r.Close()', 'for', '_', ',', 'f', ':=', 'range', 'r', '.', 'File', '{', 'err', ':=', 'unzipFile', '(', 'f', ',', 'dest', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', '}', 'return', 'nil', '}', 'func', 'main', '()', '{', 'err', ':=', 'Unzip', '(', '""./sample.zip""', ',', '""./out""', ')', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', '}']"
300,24211313,"Remember go build also defaults to static linking so for an apples to apples comparison you should give gccgo the -static or -static-libgo option.
",[]
301,24292325,"
","['just', 'rename', 'your', '.go', 'files.', 'The', 'compiler', 'is', 'trying', 'to', 'write', 'to', ""'client'"", 'but', ""'client'"", 'is', 'already', 'taken', 'by', 'the', 'directory.', '$', 'tree', '.', 'client', 'main', '.', 'go', 'server', 'main', '.', 'go', '2', 'directories', ',', '4', 'files', 'And/Or', 'create', 'a', 'script', 'that', 'outputs', 'them', 'with', 'a', 'different', 'name', 'go', 'build', '-', 'o', 'client', 'client/main.go']"
302,24313458,"
","['Using', 'rsa_test.go', 'as', 'a', 'base', 'I', 'managed', 'to', 'create', 'a', 'small', 'end', 'to', 'end', 'decryption', 'program.', 'From', 'the', 'informations', 'you', 'provided', 'is', 'hard', 'to', 'tell', 'where', 'the', 'error', 'is,', 'but', 'I', 'hope', 'reading', 'this', 'program', 'you', 'can', 'find', 'the', 'bug', 'yourself.', 'Probably', 'you', ""don't"", 'need', 'to', 'provide', 'a', 'Reader', 'in', 'the', 'DecryptOAEP.', 'http://play.golang.org/p/7VVCHJOB7R', 'package', 'main', 'import', '(', '""bytes""', '""crypto/rsa""', '""crypto/sha1""', '""log""', '""math/big""', ')', 'func', 'main', '()', '{', 'sha1', ':=', 'sha1.New()', 'n', ':=', 'new', '(', 'big', '.', 'Int', ')', 'd', ':=', 'new', '(', 'big', '.', 'Int', ')', 'rsa_modulus', ':=', '""a8b3b284af8eb50b387034a860f146c4919f318763cd6c5598c8ae4811a1e0abc4c7e0b082d693a5e7fced675cf4668512772c0cbc64a742c6c630f533c8cc72f62ae833c40bf25842e984bb78bdbf97c0107d55bdb662f5c4e0fab9845cb5148ef7392dd3aaff93ae1e6b667bb3d4247616d4f5ba10d4cfd226de88d39f16fb""', 'rsa_d', ':=', '""53339cfdb79fc8466a655c7316aca85c55fd8f6dd898fdaf119517ef4f52e8fd8e258df93fee180fa0e4ab29693cd83b152a553d4ac4d1812b8b9fa5af0e7f55fe7304df41570926f3311f15c4d65a732c483116ee3d3d2d0af3549ad9bf7cbfb78ad884f84d5beb04724dc7369b31def37d0cf539e9cfcdd3de653729ead5d1""', 'n.SetString(rsa_modulus, 16)', 'd.SetString(rsa_d, 16)', 'public', ':=', 'rsa', '.', 'PublicKey', '{', 'n', ',', '65537', '}', 'd.SetString(rsa_d, 16)', 'private', ':=', 'new', '(', 'rsa', '.', 'PrivateKey', ')', 'private', '.', 'PublicKey', '=', 'public', 'private', '.', 'D', '=', 'd', 'seed', ':=', '[]', 'byte', '{', '0x18', ',', '0xb7', ',', '0x76', ',', '0xea', ',', '0x21', ',', '0', 'x06', ',', '0x9d', ',', '0x69', ',', '0x77', ',', '0x6a', ',', '0x33', ',', '0xe9', ',', '0x6b', ',', '0xad', ',', '0x48', ',', '0xe1', ',', '0xdd', ',', '0xa', '0', ',', '0xa5', ',', '0xef', ',', '}', 'randomSource', ':=', 'bytes.NewReader(seed)', 'in', ':=', '[]', 'byte', '(', '""Hello World""', ')', 'encrypted', ',', 'err', ':=', 'rsa.EncryptOAEP(sha1, randomSource, &public, in, nil)', 'if', 'err', '!=', 'nil', '{', 'log.Println(""error: %s"", err)', '}', 'plain', ',', 'err', ':=', 'rsa.DecryptOAEP(sha1, nil, private, encrypted, nil)', 'if', 'err', '!=', 'nil', '{', 'log.Println(""error: %s"", err)', '}', 'log.Println(string(plain))', '}']"
303,24421402,"In Go, the source code is also used to generate documentation. Examples are not meant for testing but rather for the documentation. By having compiled examples, you can make sure they are working properly for anyone using them.

Examples found in the standard libraries can be run directly in the browser when using golang.org to browse the documentation. Godoc.org instead links your example code directly to play.golang.org where you can try it out.

As an example or Example usage, see:  http://golang.org/pkg/sort/
","['In', 'Go,', 'the', 'source', 'code', 'is', 'also', 'used', 'to', 'generate', 'documentation.', 'Examples', 'are', 'not', 'meant', 'for', 'testing', 'but', 'rather', 'for', 'the', 'documentation.', 'By', 'having', 'compiled', 'examples,', 'you', 'can', 'make', 'sure', 'they', 'are', 'working', 'properly', 'for', 'anyone', 'using', 'them.', 'Examples', 'found', 'in', 'the', 'standard', 'libraries', 'can', 'be', 'run', 'directly', 'in', 'the', 'browser', 'when', 'using', 'golang.org', 'to', 'browse', 'the', 'documentation.', 'Godoc.org', 'instead', 'links', 'your', 'example', 'code', 'directly', 'to', 'play.golang.org', 'where', 'you', 'can', 'try', 'it', 'out.', 'As', 'an', 'example', 'or', 'Example', 'usage,', 'see:', 'http://golang.org/pkg/sort/']"
304,24426137,"


  Entering the goroutine...
  received one
  received two
  received three
  Done!


Playground
","['Your', 'Goroutine', ""doesn't"", 'have', 'enough', 'time', 'to', 'execute,', 'as', 'the', 'main', 'function', 'exits', 'after', 'printing', 'Done!.', 'You', 'need', 'to', 'do', 'something', 'to', 'make', 'the', 'program', 'wait', 'for', 'the', 'Goroutine.', 'The', 'easiest', 'way', 'is', 'to', 'add', 'a', 'time.Sleep()', 'to', 'the', 'end.', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 'messages', ':=', 'make', '(', 'chan', 'string', ',', '3', ')', 'messages', '<-', '""one""', 'messages', '<-', '""two""', 'messages', '<-', '""three""', 'go', 'func', '(', 'm', '*', 'chan', 'string', ')', '{', 'fmt.Println(""Entering the goroutine..."")', 'for', '{', 'fmt.Println(<-*m)', '}', '}(&', 'messages', ')', 'time.Sleep(5 * time.Second)', 'fmt.Println(""Done!"")', '}', 'Entering', 'the', 'goroutine...', 'one', 'two', 'three', 'Done!', 'Playground', 'While', 'this', 'works,', ""it's"", 'recommended', 'to', 'use', 'channels,', 'or', 'functions', 'from', 'the', 'sync', 'package,', 'in', 'addition', 'to', 'goroutines,', 'to', 'synchronize', 'concurrent', 'code.', 'Example:', 'package', 'main', 'import', '(', '""fmt""', ')', 'func', 'main', '()', '{', 'messages', ':=', 'make', '(', 'chan', 'string', ',', '3', ')', 'go', 'func', '(', 'm', 'chan', 'string', ')', '{', 'defer', 'close', '(', 'm', ')', 'fmt.Println(""Entering the goroutine..."")', 'messages', '<-', '""one""', 'messages', '<-', '""two""', 'messages', '<-', '""three""', '}(', 'messages', ')', 'for', 'message', ':=', 'range', 'messages', '{', 'fmt.Println(""received"", message)', '}', 'fmt.Println(""Done!"")', '}', 'Entering', 'the', 'goroutine...', 'received', 'one', 'received', 'two', 'received', 'three', 'Done!', 'Playground']"
305,24426151,"The fact is that your goroutine starts, but is ended before doing anything because your program stop right after printing Done!: execution of goroutines is independant of the main program, but will be stopped at the same than the program. So basically, you need some process to make the program wait for them. It could be another channel waiting for a number of messages, a sync.WaitGroup, or other tricks. 

You should read the excellent post about concurrency in go in the golang blog.
","['Entering', 'the', 'goroutine...', 'received', 'one', 'received', 'two', 'received', 'three', 'Done!', 'Playground']"
306,24491458,"
","['You', 'can', 'assign', 'to', 'os.Stdin,', 'os.Stdout,', 'and', 'os.Stderr.', 'import', '""os""', 'os', '.', 'Stdin', ',', 'err', '=', 'os', '.', 'OpenFile', '(', '""input.txt""', ',', 'os', '.', 'RDONLY', '|', 'os', '.', 'O_CREATE', ',', '0666', ')', 'os', '.', 'Stdout', ',', 'err', '=', 'os', '.', 'OpenFile', '(', '""output.txt""', ',', 'os', '.', 'O_WRONLY', '|', 'os', '.', 'O_CREATE', '|', 'os', '.', 'O_TRUNC', ',', '0666', ')']"
307,24519448," (lower case suffix first letter)
","['godoc', 'is', 'very', 'picky', 'regarding', 'the', 'names,', 'your', 'Example', 'function', 'name', 'needs', 'to', 'correlate', 'with', 'an', 'actual', 'function', 'name,', 'type', 'name', 'or', 'other.', 'See', 'http://golang.org/pkg/testing/#hdr-Examples', 'for', 'reference.', 'Example', 'of', 'godoc', 'exmaple:', 'https://godoc.org/github.com/creack/multio#example-Multiplexer--ReadWriter,', 'code:', 'https://github.com/creack/multio/blob/master/example_test.go', 'You', 'will', 'notice,', 'that', 'the', 'Example', 'are', 'called', 'ExampleMultiplexer_simple', 'ExampleMultiplexer_readWriter', '.', 'This', 'is', 'because', 'I', 'wanted', 'two', 'example,', 'I', 'could', 'have', 'simply', 'use', 'ExampleMultiplexer.', 'This', 'works', 'because', 'I', 'have', 'a', 'type', 'called', '(exactly)', 'Multiplexer.', 'If', 'you', 'have', 'a', 'function,', 'you', 'can', 'do', 'the', 'same,', 'but', 'the', 'name', 'needs', 'to', 'match.', 'When', 'using', 'a', 'suffixe,', 'it', 'is', 'very', 'important', 'that', 'the', 'suffix', 'begins', 'with', 'a', 'lowercase,', 'otherwise', 'godoc', 'will', 'discard', 'it.', 'So', 'to', 'answer', 'your', 'question:', 'yes', 'you', 'can', 'use', 'arbitrary', 'name,', 'but', 'you', 'still', 'need', 'to', 'follow', 'the', 'godoc', 'style', 'of', 'ExampleTypeName_suffix', '(lower', 'case', 'suffix', 'first', 'letter)']"
308,24640489,"Just use go run or go run *.go you are running/compiling only main.go the other files are not included.
","['(lower', 'case', 'suffix', 'first', 'letter)']"
309,24643072,"You should, preferably, be using go build - to build a binary which you can then run as ./example. 

Go operates on packages, not files, and go run is ultimately just a convenience to be used when testing examples or simple programs (it builds the binary and discards it, effectively).
","['(lower', 'case', 'suffix', 'first', 'letter)']"
310,24703382,"
","['jpeg.Encode', ""can't"", 'procede,', 'because', ""it's"", 'blocked', 'writing', 'to', 'the', 'pipe', '(pipes', ""don't"", 'buffer).', 'You', 'either', 'need', 'to', 'buffer', 'the', 'encoded', 'image,', 'or', 'run', 'the', 'Encode', 'and', 'http', 'request', 'concurrently.', '//', 'make', 'sure', 'to', 'buffer', 'this', 'channel,', 'so', 'the', 'goroutine', 'can', 'exit', 'if', 'we', 'return', 'early', 'errChan', ':=', 'make', '(', 'chan', 'error', ',', '1', ')', 'r', ',', 'w', ':=', 'io.Pipe()', 'go', 'func', '()', '{', 'errChan', '<-', 'jpeg.Encode(w, img, &jpeg.Options{80})', '}()', 'req', ',', 'err', ':=', 'http.NewRequest(""PUT"", myUrl, r)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'err', ':=', 'http', '.', 'DefaultClient.Do(req)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', '//', 'check', 'for', 'an', 'encoding', 'error', 'err', ':=', '<-', 'errChan', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}']"
311,24703499,"
","['Just', 'use', 'a', 'buffer', 'var', 'w', 'bytes', '.', 'Buffer', 'jpeg.Encode(&w, img, &jpeg.Options{80})', 'req', ',', 'e', ':=', 'http.NewRequest(""PUT"", myUrl, &w)', 'if', 'e', '!=', 'nil', '{', 'log.Fatal(e)', '}', 'http', '.', 'DefaultClient.Do(req)']"
312,24706229,"

playground
","['You', 'could', 'use', 'interface{},', 'for', 'example', ':', 'type', 'JSONDoc', 'struct', '{', 'Count', 'int', 'json', ':', '""count""', 'Objects', '[]', 'interface', '{}', 'json', ':', '""objects""', '}', 'func', 'main', '()', '{', 'doc', ':=', 'JSONDoc', '{', 'Count', ':', '2', '}', 'doc', '.', 'Objects', '=', 'append', '(', 'doc', '.', 'Objects', ',', '&', 'ObjectA', '{', '""A""', '},', '&', 'ObjectB', '{', '""B""', '})', 'b', ',', 'err', ':=', 'json.MarshalIndent(&doc, """", ""\\t"")', 'fmt.Println(string(b), err)', '}', 'playground']"
313,24762569,"

and work from there

Working example

As far as debugging tricks, this was my process:


Value isn't being changed, so something is being copied by value
Notice that Registry is type []Broker, but we want to modify Brokers, so it needs to be a pointer
Change type Registry to []*Broker
Keep attempting to compile, letting the compiler tell me every place we are using a value where we need a pointer (woohoo fast compile times and static typing)

","[""You're"", 'not', 'using', 'pointers', 'throughout.', 'Start', 'off', 'with', 'a', 'Registry', 'of', 'type:', 'type', 'Registry', '[]*', 'Broker', 'and', 'work', 'from', 'there', 'Working', 'example', 'As', 'far', 'as', 'debugging', 'tricks,', 'this', 'was', 'my', 'process:', 'Value', ""isn't"", 'being', 'changed,', 'so', 'something', 'is', 'being', 'copied', 'by', 'value', 'Notice', 'that', 'Registry', 'is', 'type', '[]Broker,', 'but', 'we', 'want', 'to', 'modify', 'Brokers,', 'so', 'it', 'needs', 'to', 'be', 'a', 'pointer', 'Change', 'type', 'Registry', 'to', '[]*Broker', 'Keep', 'attempting', 'to', 'compile,', 'letting', 'the', 'compiler', 'tell', 'me', 'every', 'place', 'we', 'are', 'using', 'a', 'value', 'where', 'we', 'need', 'a', 'pointer', '(woohoo', 'fast', 'compile', 'times', 'and', 'static', 'typing)']"
314,24775499,"According to http://golang.org/doc/effective_go.html#defer:


  The arguments to the deferred function (which include the receiver if the function is a method) are evaluated when the defer executes, not when the call executes. Besides avoiding worries about variables changing values as the function executes, this means that a single deferred call site can defer multiple function executions.


So argument of defer function (trace(""b"") in your case) evaluates first
","['According', 'to', 'http://golang.org/doc/effective_go.html#defer:', 'The', 'arguments', 'to', 'the', 'deferred', 'function', '(which', 'include', 'the', 'receiver', 'if', 'the', 'function', 'is', 'a', 'method)', 'are', 'evaluated', 'when', 'the', 'defer', 'executes,', 'not', 'when', 'the', 'call', 'executes.', 'Besides', 'avoiding', 'worries', 'about', 'variables', 'changing', 'values', 'as', 'the', 'function', 'executes,', 'this', 'means', 'that', 'a', 'single', 'deferred', 'call', 'site', 'can', 'defer', 'multiple', 'function', 'executions.', 'So', 'argument', 'of', 'defer', 'function', '(trace(""b"")', 'in', 'your', 'case)', 'evaluates', 'first']"
315,24777143,"
","['Simplifying,', 'package', 'main', 'import', '""fmt""', 'func', 'trace', '(', 's', 'string', ')', 'string', '{', 'fmt.Println(""entering:"", s)', 'return', 's', '}', 'func', 'un', '(', 's', 'string', ')', '{', 'fmt.Println(""leaving:"", s)', '}', 'func', 'b', '()', '{', 'defer', 'un', '(', 'trace', '(', '""b""', '))', 'fmt.Println(""in b"")', '}', 'func', 'main', '()', '{', 'b', '()', '}', 'Output:', 'entering:', 'b', 'in', 'b', 'leaving:', 'b', 'Since', '""arguments', 'to', 'deferred', 'functions', 'are', 'evaluated', 'when', 'the', 'defer', 'executes"",', 'the', 'defer', 'un', '(', 'trace', '(', '""b""', '))', 'statement', 'in', 'function', 'b', 'is,', 'using', 'explicit', 'scope,', 'equivalent', 'to', '{', 'unarg', ':=', 'trace(""b"")', 'defer', 'un(unarg)', '}', 'Therefore,', 'equivalently,', 'package', 'main', 'import', '""fmt""', 'func', 'trace(s', 'string)', 'string', '{', 'fmt.Println(""entering:"",', 's)', 'return', 's', '}', 'func', 'un(s', 'string)', '{', 'fmt.Println(""leaving:"",', 's)', '}', 'func', 'b()', '{', '{', 'unarg', ':=', 'trace(""b"")', 'defer', 'un(unarg)', '}', 'fmt.Println(""in', 'b"")', '}', 'func', 'main()', '{', 'b()', '}', 'Output:', 'entering', ':', 'b', 'in', 'b', 'leaving', ':', 'b', 'Equivalently,', 'for', 'your', 'complete', 'example,', 'package', 'main', 'import', '""fmt""', 'func', 'trace(s', 'string)', 'string', '{', 'fmt.Println(""entering:"",', 's)', 'return', 's', '}', 'func', 'un(s', 'string)', '{', 'fmt.Println(""leaving:"",', 's)', '}', 'func', 'a()', '{', '{', 'unarg', ':=', 'trace(""a"")', 'defer', 'un(unarg)', '}', 'fmt.Println(""in', 'a"")', '}', 'func', 'b()', '{', '{', 'unarg', ':=', 'trace(""b"")', 'defer', 'un(unarg)', '}', 'fmt.Println(""in', 'b"")', 'a()', '}', 'func', 'main()', '{', 'b()', '}', 'Output:', 'entering:', 'b', 'in', 'b', 'entering:', 'a', 'in', 'a', 'leaving:', 'a', 'leaving:', 'b', '{', 'unarg', ':=', 'trace', '(', '""b""', ')', 'defer', 'un', '(', 'unarg', ')', '}', 'Equivalently,', 'for', 'your', 'complete', 'example,', 'package', 'main', 'import', '""fmt""', 'func', 'trace(s', 'string)', 'string', '{', 'fmt.Println(""entering:"",', 's)', 'return', 's', '}', 'func', 'un(s', 'string)', '{', 'fmt.Println(""leaving:"",', 's)', '}', 'func', 'a()', '{', '{', 'unarg', ':=', 'trace(""a"")', 'defer', 'un(unarg)', '}', 'fmt.Println(""in', 'a"")', '}', 'func', 'b()', '{', '{', 'unarg', ':=', 'trace(""b"")', 'defer', 'un(unarg)', '}', 'fmt.Println(""in', 'b"")', 'a()', '}', 'func', 'main()', '{', 'b()', '}', 'Output:', 'entering:', 'b', 'in', 'b', 'entering:', 'a', 'in', 'a', 'leaving:', 'a', 'leaving:', 'b', 'package', 'main', 'import', '""fmt""', 'func', 'trace', '(', 's', 'string', ')', 'string', '{', 'fmt.Println(""entering:"", s)', 'return', 's', '}', 'func', 'un', '(', 's', 'string', ')', '{', 'fmt.Println(""leaving:"", s)', '}', 'func', 'b', '()', '{', '{', 'unarg', ':=', 'trace', '(', '""b""', ')', 'defer', 'un', '(', 'unarg', ')', '}', 'fmt.Println(""in b"")', '}', 'func', 'main', '()', '{', 'b', '()', '}', 'Equivalently,', 'for', 'your', 'complete', 'example,', 'package', 'main', 'import', '""fmt""', 'func', 'trace', '(', 's', 'string', ')', 'string', '{', 'fmt.Println(""entering:"", s)', 'return', 's', '}', 'func', 'un', '(', 's', 'string', ')', '{', 'fmt.Println(""leaving:"", s)', '}', 'func', 'a', '()', '{', '{', 'unarg', ':=', 'trace', '(', '""a""', ')', 'defer', 'un', '(', 'unarg', ')', '}', 'fmt.Println(""in a"")', '}', 'func', 'b', '()', '{', '{', 'unarg', ':=', 'trace', '(', '""b""', ')', 'defer', 'un', '(', 'unarg', ')', '}', 'fmt.Println(""in b"")', 'a', '()', '}', 'func', 'main', '()', '{', 'b', '()', '}', 'Output:', 'entering', ':', 'b', 'in', 'b', 'entering', ':', 'a', 'in', 'a', 'leaving', ':', 'a', 'leaving', ':', 'b']"
316,24838866,"



dalu adds in the comments:


  it can also be done with import, type, var, and more than once.


It is true, but you will find iota only use in a constant declaration, and that would force you to define multiple const () blocks if you need multiple sets of consecutive integer constants.
","['The', 'second', 'form', 'is', 'mainly', 'for', 'grouping', 'several', 'constant', 'declarations.', 'If', 'you', 'have', 'only', 'one', 'constant,', 'the', 'first', 'form', 'is', 'enough.', 'for', 'instance', 'archive/tar/reader.go', ':', 'const', 'maxNanoSecondIntSize', '=', '9', 'But', 'in', 'archive/zip/struct.go', ':', '//', 'Compression', 'methods.', 'const', '(', 'Store', 'uint16', '=', '0', 'Deflate', 'uint16', '=', '8', ')', 'That', ""doesn't"", 'mean', 'you', 'have', 'to', 'group', 'all', 'constants', 'in', 'one', 'const', '():', 'when', 'you', 'have', 'constants', 'initialized', 'by', 'iota', '(successive', 'integer),', 'each', 'block', 'counts.', 'See', 'for', 'instance', 'cmd/yacc/yacc.go', '//', 'flags', 'for', 'state', 'generation', 'const', '(', 'DONE', '=', 'iota', 'MUSTDO', 'MUSTLOOKAHEAD', ')', '//', 'flags', 'for', 'a', 'rule', 'having', 'an', 'action,', 'and', 'being', 'reduced', 'const', '(', 'ACTFLAG', '=', '1', '<<', '(', 'iota', '+', '2', ')', 'REDFLAG', ')', 'dalu', 'adds', 'in', 'the', 'comments:', 'it', 'can', 'also', 'be', 'done', 'with', 'import,', 'type,', 'var,', 'and', 'more', 'than', 'once.', 'It', 'is', 'true,', 'but', 'you', 'will', 'find', 'iota', 'only', 'use', 'in', 'a', 'constant', 'declaration,', 'and', 'that', 'would', 'force', 'you', 'to', 'define', 'multiple', 'const', '()', 'blocks', 'if', 'you', 'need', 'multiple', 'sets', 'of', 'consecutive', 'integer', 'constants.']"
317,24845867,"You cannot do such stuff. The slive does not contain the variables but their values, so you cannot get their name. Just use a map.
","['You', 'cannot', 'do', 'such', 'stuff.', 'The', 'slive', 'does', 'not', 'contain', 'the', 'variables', 'but', 'their', 'values,', 'so', 'you', 'cannot', 'get', 'their', 'name.', 'Just', 'use', 'a', 'map.']"
318,24849574,"

(Don't see a problem working with unsafe here because any casting is not being based of uncontrolled content and unsafe.Pointer is only used for reading. 
Attention!: Have in mind that pointer-values might vary between program runs. Thus, replacing the templates {{xxx}} in a second run of the program might fail. Moreover: that scenario (second run) might be ""unsafe"" since unrelated memory might be assessed.) 
","['instead', 'of', 'working', 'with', 'the', 'variable', 'names,', 'you', 'might', 'work', 'with', 'a', 'slice', 'with', '(string', 'converted)', 'pointers', 'to', 'the', 'variables', 'to', 'reach', 'your', 'original', 'aim:', 'package', 'main', 'import', '""fmt""', 'import', '""unsafe""', 'import', '""strconv""', 'func', 'castStr', '(', 'v', '*', 'string', ')', 'string', '{', 'return', 'fmt.Sprint(uintptr(unsafe.Pointer(v)))', '}', 'func', 'uncastStr', '(', 's', 'string', ')', 'string', '{', 'p', ',', '_', ':=', 'strconv.ParseInt(s, 10, 64)', 'return', '*((*', 'string', ')(', 'unsafe.Pointer(uintptr(p))))', '}', 'func', 'main', '()', '{', 'onevar', ':=', '""something""', 'other', ':=', '""something else""', 'sa', ':=', '[]', 'string', '{', 'castStr', '(&', 'onevar', '),', 'castStr', '(&', 'other', ')}', 'for', '_', ',', 'v', ':=', 'range', 'sa', '{', 'fmt.Printf(""{{%s}}\\n"", v)', 'fmt.Printf(""%v\\n"", uncastStr(v))', '}', '//', 'for', '_,', 'v', ':=', 'range', 'sa', '{', '//', 'vName', ':=', 'fmt.Sprintf(""{{%s}}"",', 'v)', '//', 'msg', '=', 'strings.Replace(msg,', 'vName,', 'uncastStr(v)', '-1)', '//', '}', '}', ""(Don't"", 'see', 'a', 'problem', 'working', 'with', 'unsafe', 'here', 'because', 'any', 'casting', 'is', 'not', 'being', 'based', 'of', 'uncontrolled', 'content', 'and', 'unsafe.Pointer', 'is', 'only', 'used', 'for', 'reading.', 'Attention!:', 'Have', 'in', 'mind', 'that', 'pointer-values', 'might', 'vary', 'between', 'program', 'runs.', 'Thus,', 'replacing', 'the', 'templates', '{{xxx}}', 'in', 'a', 'second', 'run', 'of', 'the', 'program', 'might', 'fail.', 'Moreover:', 'that', 'scenario', '(second', 'run)', 'might', 'be', '""unsafe""', 'since', 'unrelated', 'memory', 'might', 'be', 'assessed.)']"
319,24854488,"Yes, in the flag package documentation, it says that one of the possible command line flag syntaxes is -flag.  You should try making a boolean flag with the Bool or BoolVar functions and see if it works the expected way.
","[""(Don't"", 'see', 'a', 'problem', 'working', 'with', 'unsafe', 'here', 'because', 'any', 'casting', 'is', 'not', 'being', 'based', 'of', 'uncontrolled', 'content', 'and', 'unsafe.Pointer', 'is', 'only', 'used', 'for', 'reading.', 'Attention!:', 'Have', 'in', 'mind', 'that', 'pointer-values', 'might', 'vary', 'between', 'program', 'runs.', 'Thus,', 'replacing', 'the', 'templates', '{{xxx}}', 'in', 'a', 'second', 'run', 'of', 'the', 'program', 'might', 'fail.', 'Moreover:', 'that', 'scenario', '(second', 'run)', 'might', 'be', '""unsafe""', 'since', 'unrelated', 'memory', 'might', 'be', 'assessed.)']"
320,24863769,"

(Note the dollar sign inside the range)

Playground link: http://play.golang.org/p/XiQFcGJEyR

Side note: Next time try to provide proper code and a better explanation. As it stands, I think I've answered this, but I cannot be sure. Your code doesn't compile - for example, type names are wrong/mixed with members and you have unexported fields so they cannot be accessed by the templates.
","['From', 'the', 'documentation:', 'When', 'execution', 'begins,', '$', 'is', 'set', 'to', 'the', 'data', 'argument', 'passed', 'to', 'Execute,', 'that', 'is,', 'to', 'the', 'starting', 'value', 'of', 'dot.', 'Therefore,', 'you', 'can', 'use', 'this:', '{{', 'range', '.', 'notes', '}}', '{{$.', 'Email', '}}', '{{.', 'sf', '}}', '{{', 'end', '}}', 'Email', '{{.', 'Email', '}}', '(Note', 'the', 'dollar', 'sign', 'inside', 'the', 'range)', 'Playground', 'link:', 'http://play.golang.org/p/XiQFcGJEyR', 'Side', 'note:', 'Next', 'time', 'try', 'to', 'provide', 'proper', 'code', 'and', 'a', 'better', 'explanation.', 'As', 'it', 'stands,', 'I', 'think', ""I've"", 'answered', 'this,', 'but', 'I', 'cannot', 'be', 'sure.', 'Your', 'code', ""doesn't"", 'compile', '-', 'for', 'example,', 'type', 'names', 'are', 'wrong/mixed', 'with', 'members', 'and', 'you', 'have', 'unexported', 'fields', 'so', 'they', 'cannot', 'be', 'accessed', 'by', 'the', 'templates.']"
321,24877796,"

Playground link: http://play.golang.org/p/NBv9sooqEV
","['You', 'just', 'need', 'to', 'dereference', 'the', 'pointer', '(so', ""you're"", 'not', 'iterating', 'over', 'a', 'pointer', '-', ""you're"", 'iterating', 'over', 'a', 'slice):', 'for', '_', ',', 'chicken', ':=', 'range', '*', 'chickens', '{', '//', '...', '}', 'Playground', 'link:', 'http://play.golang.org/p/NBv9sooqEV']"
322,24877925,"

playground
","['There', 'are', 'few', 'problems', 'with', 'your', 'code.', ""You're"", 'returning', 'a', 'pointer', 'to', 'a', 'reflect.Value,', '99%', 'sure', ""that's"", 'not', 'what', ""you're"", 'trying', 'to', 'achive.', ""You're"", 'not', 'dereferencing', 'the', 'slice', 'like', 'Simon', 'mentioned.', 'Slices', 'are', 'pointer', 'types,', 'if', ""you're"", 'returning', '*[]interface{}', 'for', 'performance', 'reasons,', ""you're"", 'actually', 'hurting', 'not', 'helping.', 'So', ""let's"", 'rewrite', 'the', 'code', 'and', 'optimize', 'it!', ""(it's"", 'late', 'night', 'SO,', 'time', 'to', 'party):', '//', 'pass', 'the', 'size', 'to', 'preallocate', 'the', 'slice,', 'also', 'return', 'the', 'correct', 'slice', 'type.', 'func', 'GetaDynamiclyTypedSlice', '(', 'ptrItemType', 'interface', '{},', 'size', 'int', ')', '(', 'col', '[]', 'interface', '{})', '{', 'col', '=', 'make', '([]', 'interface', '{},', 'size', ')', 'itemtyp', ':=', 'reflect.TypeOf(ptrItemType).Elem()', 'for', 'i', ':=', 'range', 'col', '{', '//prettier than for i := 0; etc etc', 'item', ':=', 'reflect.New(itemtyp)', 'item.Elem().FieldByName(""Weight"").SetFloat(rand.ExpFloat64())', 'col', '[', 'i', ']', '=', 'item.Interface()', '//this is the magic word, return the actual item, not reflect.Value', '}', 'return', '}', 'playground']"
323,24954530,"According to your code .Data is array or slice. It does not have GetId() method
","['According', 'to', 'your', 'code', '.Data', 'is', 'array', 'or', 'slice.', 'It', 'does', 'not', 'have', 'GetId()', 'method']"
324,24958024,"
","['problem', 'is', 'that', 'i', 'needed', 'to', 'make', 'instance', 'of', 'my', 'struct', 'like', 'this', 'var', 'warehouse', '=', 'new', '(', 'models', '.', 'Warehouse', ')', '// works', 'instead', 'of', 'var', 'warehouse', 'models', '.', 'Warehouse', '// fails']"
325,24958673,"
","['You', ""can't"", 'use', '+', 'on', 'a', 'slice,', 'however', 'you', 'can', 'use', 'append:', 'ioutil.WriteFile(""testOutput.txt"", append(contents, cnvrtUserProfile), 0x777)']"
326,24980225,"You will need to look at the following options and see if it works for you :


Looking at the large file size, you should consider using Google Cloud Storage for the file. You can use the command line utilities that GCS provides to upload your file to your bucket. Once uploaded, you can look at using the JSON API directly to work with the file and import it into your datastore layer. Take a look at the following: https://developers.google.com/storage/docs/json_api/v1/json-api-go-samples
If this is like a one time import of a large file, another option could be spinning up a Google Compute VM, writing an App there to read from GCS and pass on the data via smaller chunks to a Service running in App Engine Go, that can then accept and persist the data. 

","['You', 'will', 'need', 'to', 'look', 'at', 'the', 'following', 'options', 'and', 'see', 'if', 'it', 'works', 'for', 'you', ':', 'Looking', 'at', 'the', 'large', 'file', 'size,', 'you', 'should', 'consider', 'using', 'Google', 'Cloud', 'Storage', 'for', 'the', 'file.', 'You', 'can', 'use', 'the', 'command', 'line', 'utilities', 'that', 'GCS', 'provides', 'to', 'upload', 'your', 'file', 'to', 'your', 'bucket.', 'Once', 'uploaded,', 'you', 'can', 'look', 'at', 'using', 'the', 'JSON', 'API', 'directly', 'to', 'work', 'with', 'the', 'file', 'and', 'import', 'it', 'into', 'your', 'datastore', 'layer.', 'Take', 'a', 'look', 'at', 'the', 'following:', 'https://developers.google.com/storage/docs/json_api/v1/json-api-go-samples', 'If', 'this', 'is', 'like', 'a', 'one', 'time', 'import', 'of', 'a', 'large', 'file,', 'another', 'option', 'could', 'be', 'spinning', 'up', 'a', 'Google', 'Compute', 'VM,', 'writing', 'an', 'App', 'there', 'to', 'read', 'from', 'GCS', 'and', 'pass', 'on', 'the', 'data', 'via', 'smaller', 'chunks', 'to', 'a', 'Service', 'running', 'in', 'App', 'Engine', 'Go,', 'that', 'can', 'then', 'accept', 'and', 'persist', 'the', 'data.']"
327,24983086,".

There's no need to use html/template if you only need to serve static files.

But a clean solution depends on what you are actually trying to do.
","['func', 'main', '()', '{', 'http.Handle(""/"", http.FileServer(http.Dir(""static"")))', 'http.ListenAndServe("":4747"", nil)', '}', 'You', ""don't"", 'need', 'static/home,', 'just', 'static.', 'FileServer', 'is', 'using', 'directory', 'listing', 'and', 'since', 'you', ""don't"", 'have', 'an', 'index.html', 'in', '/static,', 'the', 'directory', 'content', 'is', 'shown', 'instead.', 'A', 'quick', 'fix', 'would', 'be', 'to', 'just', 'rename', 'home.html', 'to', 'index.html.', 'This', 'would', 'allow', 'you', 'to', 'access', 'index.html', 'through', 'http', '://', 'localhost', ':', '4747', '/', 'and', 'edit.html', 'with', 'http', '://', 'localhost', ':', '4747/edit.html', '.', ""There's"", 'no', 'need', 'to', 'use', 'html/template', 'if', 'you', 'only', 'need', 'to', 'serve', 'static', 'files.', 'But', 'a', 'clean', 'solution', 'depends', 'on', 'what', 'you', 'are', 'actually', 'trying', 'to', 'do.']"
328,25002758,"

playground
","['You', 'could', 'write', 'a', 'custom', 'io.Reader', 'that', 'you', 'feed', 'to', 'json.Decoder', 'and', 'that', 'will', 'pre-read', 'your', 'json', 'file', 'and', 'skip', 'that', 'specific', 'field.', 'The', 'other', 'option', 'is', 'to', 'write', 'your', 'own', 'decoder,', 'more', 'complicated', 'and', 'messy.', '//edit', 'it', 'seemed', 'like', 'a', 'fun', 'exercise,', 'so', 'here', 'goes:', 'type', 'IgnoreField', 'struct', '{', 'io', '.', 'Reader', 'Field', 'string', 'buf', 'bytes', '.', 'Buffer', '}', 'func', 'NewIgnoreField', '(', 'r', 'io', '.', 'Reader', ',', 'field', 'string', ')', '*', 'IgnoreField', '{', 'return', '&', 'IgnoreField', '{', 'Reader', ':', 'r', ',', 'Field', ':', 'field', ',', '}', '}', 'func', '(', 'iF', '*', 'IgnoreField', ')', 'Read', '(', 'p', '[]', 'byte', ')', '(', 'n', 'int', ',', 'err', 'error', ')', '{', 'if', 'n', ',', 'err', '=', 'iF', '.', 'Reader.Read(p)', ';', 'err', '!=', 'nil', '{', 'return', '}', 's', ':=', 'string', '(', 'p', ')', 'fl', ':=', '""` + iF.Field + `""', 'if', 'i', ':=', 'strings.Index(s, fl)', ';', 'i', '!=', '-', '1', '{', 'l', ':=', 'strings.LastIndex(s[0:i], "","")', 'if', 'l', '==', '-', '1', '{', 'l', '=', 'i', '}', 'iF', '.', 'buf.WriteString(s[0:l])', 's', '=', 's', '[', 'i', '+', '1', '+', 'len', '(', 'fl', '):]', 'i', '=', 'strings.Index(s, `""`)', 'if', 'i', '!=', '-', '1', '{', 's', '=', 's', '[', 'i', '+', '1', ':]', '}', 'for', '{', 'i', '=', 'strings.Index(s, `""`)', '//end quote', 'if', 'i', '!=', '-', '1', '{', 's', '=', 's', '[', 'i', '+', '1', ':]', 'fmt.Println(""Skipped"")', 'break', '}', 'else', '{', 'if', 'n', ',', 'err', '=', 'iF', '.', 'Reader.Read(p)', ';', 'err', '!=', 'nil', '{', 'return', '}', 's', '=', 'string', '(', 'p', ')', '}', '}', 'iF', '.', 'buf.WriteString(s)', '}', 'ln', ':=', 'iF', '.', 'buf.Len()', 'if', 'ln', '>=', 'len', '(', 'p', ')', '{', 'tmp', ':=', 'iF', '.', 'buf.Bytes()', 'iF', '.', 'buf.Reset()', 'copy', '(', 'p', ',', 'tmp', '[', '0', ':', 'len', '(', 'p', ')])', 'iF', '.', 'buf.Write(p[len(p):])', 'ln', '=', 'len', '(', 'p', ')', '}', 'else', '{', 'copy', '(', 'p', ',', 'iF', '.', 'buf.Bytes())', 'iF', '.', 'buf.Reset()', '}', 'return', 'ln', ',', 'nil', '}', 'func', 'main', '()', '{', 'type', 'MyStruct', 'struct', '{', 'Field1', 'string', 'Field2', 'string', '}', 'fi', ',', 'err', ':=', 'os.Open(""myJSONFile.json"")', 'if', 'err', '!=', 'nil', '{', 'os.Exit(2)', '}', '//', 'create', 'an', 'instance', 'and', 'populate', 'var', 'mystruct', 'MyStruct', 'err', ':=', 'json.NewDecoder(NewIgnoreField(fi, ""Field3"")).Decode(&mystruct)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'fmt.Println(mystruct)', '}', 'playground']"
329,25012943,"

Martini provides lots more functionality as well, such as session, template rendering, route handlers etc...

We're using Martini in production here and have been more than happy with it and it's surrounding infrastructure.
","['If', ""you're"", 'only', 'interested', 'in', 'writing', 'a', 'simple', 'server', 'that', 'serves', 'static', 'content', 'and', 'not', 'just', 'as', 'a', 'learning', 'experience', ""I'd"", 'take', 'a', 'look', 'at', 'Martini', '(http://martini.codegangsta.io/).', 'The', 'quintessential', 'Martini', 'app', 'to', 'serve', 'static', 'files', 'from', 'a', 'folder', 'named', ""'public'"", 'would', 'be:', 'package', 'main', 'import', '(', '""github.com/go-martini/martini""', ')', 'func', 'main', '()', '{', 'm', ':=', 'martini.Classic()', 'm.Run()', '}', 'to', 'add', 'a', 'new', 'static', 'folder', 'called', ""'static'"", 'to', 'the', 'list', 'of', 'static', 'folders', 'searched', 'for', 'content', 'is', 'also', 'simple:', 'package', 'main', 'import', '(', '""github.com/go-martini/martini""', ')', 'func', 'main', '()', '{', 'm', ':=', 'martini.Classic()', 'm.Use(martini.Static(""static""))', '// serve from the ""static"" directory as well', 'm.Run()', '}', 'Martini', 'provides', 'lots', 'more', 'functionality', 'as', 'well,', 'such', 'as', 'session,', 'template', 'rendering,', 'route', 'handlers', 'etc...', ""We're"", 'using', 'Martini', 'in', 'production', 'here', 'and', 'have', 'been', 'more', 'than', 'happy', 'with', 'it', 'and', ""it's"", 'surrounding', 'infrastructure.']"
330,25028189,"Not a the solution I hoped for, but I ended up splitting the large files into 32MB pieces, uploading each to blob storage, then parsing each in a task.

It aint' pretty. But it took less time than the other options. 
","['Not', 'a', 'the', 'solution', 'I', 'hoped', 'for,', 'but', 'I', 'ended', 'up', 'splitting', 'the', 'large', 'files', 'into', '32MB', 'pieces,', 'uploading', 'each', 'to', 'blob', 'storage,', 'then', 'parsing', 'each', 'in', 'a', 'task.', 'It', ""aint'"", 'pretty.', 'But', 'it', 'took', 'less', 'time', 'than', 'the', 'other', 'options.']"
331,25094332,"
","['You', 'need', 'to', 'use', 'Format', 'for', 'this.', 'time.RFC1123Z', 'is', 'just', 'a', 'layout', 'string.', 't', ':=', 'time.Now()', 's', ':=', 't.Format(time.RFC1123Z)', '// Format t to a string using the given layout', 'fmt.Println(s)']"
332,25181475," method that returns a struct meant strictly for comparison?


I suspect it is a better approach, considering:


comparing interface is slow (issue 6105)
(and that supposes comparison operators are defined: see Map Types)
using an Equaler (as in this thread) isn't easy
you might need to distinguish between the actual types included in the interface instances you are comparing.

","['Is', 'the', 'best', 'way', 'to', 'compare', 'Foods', 'to', 'not', 'use', 'map[Food]bool', 'and', 'instead', 'use', 'something', 'like', 'map[FoodKey],', 'where', 'any', 'struct', 'that', 'satsifies', 'Food', 'provides', 'a', 'FoodKey', '()', 'comparisonStruct', 'method', 'that', 'returns', 'a', 'struct', 'meant', 'strictly', 'for', 'comparison?', 'I', 'suspect', 'it', 'is', 'a', 'better', 'approach,', 'considering:', 'comparing', 'interface', 'is', 'slow', '(issue', '6105)', '(and', 'that', 'supposes', 'comparison', 'operators', 'are', 'defined:', 'see', 'Map', 'Types)', 'using', 'an', 'Equaler', '(as', 'in', 'this', 'thread)', ""isn't"", 'easy', 'you', 'might', 'need', 'to', 'distinguish', 'between', 'the', 'actual', 'types', 'included', 'in', 'the', 'interface', 'instances', 'you', 'are', 'comparing.']"
333,25181637,"
","['You', 'have', 'two', 'options', 'to', 'determine', 'or', 'compare', 'the', 'underlying', 'structs', 'of', 'interfaces.', '1-', 'Use', 'the', 'reflect', 'package,', 'specifically', 'the', 'reflect.TypeOf', 'function,', 'which', 'will', 'return', 'the', 'dynamic', 'type', 'of', 'the', 'interface,', 'such', 'as:', 'x', ':=', 'Food', '(', 'fruit', '{', '""banana""', ',', '0', '})', 'y', ':=', 'Food', '(', 'vegetable', '{', 'potato', ',', '45', '})', 'return', 'reflect.TypeOf(x) == reflect.TypeOf(y)', 'This', 'piece', 'of', 'code', 'will', 'return', 'false.', '2-', 'Use', 'type', 'assertions', 'or', 'a', 'type', 'switch,', 'such', 'as:', 'value', ',', 'ok', ':=', 'yourInterface', '.(', 'possibleType', ')']"
334,25182837,"

playground
","['I', 'believe', 'the', 'most', 'efficient', 'path', 'here', 'is', 'to', 'add', 'an', 'extra', 'function', 'to', 'your', 'interface', 'like', 'Is(f', 'Food)', 'bool,', ""it's"", 'easy', 'to', 'implement,', 'no', 'overhead', 'of', 'using', 'reflection', 'or', 'comparing', 'interfaces', 'or', 'using', 'a', 'map', 'somewhere.', 'Example:', 'type', 'Food', 'interface', '{', 'Name', '()', 'string', 'Tastiness', '()', 'int', 'Is', '(', 'f', 'Food', ')', 'bool', '}', '//', '....', 'func', '(*', 'fruit', ')', 'Is', '(', 'f', 'Food', ')', 'bool', '{', '_', ',', 'ok', ':=', 'f', '.(*', 'fruit', ');', 'return', 'ok', '}', '//', '....', 'func', '(*', 'vegetable', ')', 'Is', '(', 'f', 'Food', ')', 'bool', '{', '_', ',', 'ok', ':=', 'f', '.(*', 'vegetable', ');', 'return', 'ok', '}', 'playground']"
335,25249682,"The flag package does not use GNU parsing rules. The rules are explained in the documentation for flag the package. Your question is answered there:


  Flag parsing stops just before the first non-flag argument (""-"" is a non-flag argument) or after the terminator ""--"".

",['playground']
336,25266597,"With := you are declaring a new variable (not writing to the global) and that new variable at function scope is unused. (Has nothing to do with globals.)
",['playground']
337,25266601,"You're re-declaring Reqs with the := operator. Drop the colon.

You should probably start with the basics first:


Tour of Go
How to Write Go Code
Effective Go

",['playground']
338,25266750,"



You can try your fixed code here (Golang Play).
","['Okay', 'first', 'of', 'all', ""I'd"", 'recommend', 'you', 'to', 'read', 'Effective', 'Go', 'before', 'continuing.', 'You', 'are', 'declaring', 'your', 'global', 'variable', 'using:', 'var', 'Reqs', '[]Req', 'Then', 're-declaring', 'a', 'variable', 'with', 'the', 'same', 'name', 'using:', 'Reqs', ':=', '......', 'You', 'are', 'declaring', 'two', 'different', 'variables.', 'var', 'Name', 'type', 'also', 'initializes', 'the', 'variable:', 'var', 's', 'string', 'Is', 'equivalent', 'to:', 's', ':=', '""""', 'So', 'this', 'makes', 'the', 'following', 'line', 'useless:', 'Reqs', '=', 'make', '([]', 'Req', ',', '0', ')', 'You', 'can', 'try', 'your', 'fixed', 'code', 'here', '(Golang', 'Play).']"
339,25297743,"

Also check this answer which goes into a lot of details about transactions.
","['It', 'depends', 'on', 'which', 'driver', 'you', 'are', 'using,', 'some', 'drivers', '/', 'databases', ""don't"", 'support', 'transactions', 'at', 'all.', 'For', 'example', 'go-sql-driver/mysql', 'supports', 'transactions', 'just', 'fine.', 'Your', 'code', 'should', 'work,', 'or', 'you', 'could', 'change', 'it', 'a', 'little', 'to:', 'tx', ',', 'err', ':=', 'db.Begin()', '...', 'stmt', ',', 'err', ':=', 'tx.Prepare(`INSERT INTO balance set money=?, id=? ON DUPLICATE UPDATE balance SET money=money+? WHERE id=?`)', 'res', ',', 'err', ':=', 'stmt.Exec(123.45, 1, 123.45, 1)', 'res', ',', 'err', ':=', 'stmt.Exec(67.89, 2, 67.89, 2)', 'res', ',', 'err', ':=', 'stmt.Exec(10.23, 3, 10.23, 3)', '...', 'tx.Commit()', 'Also', 'check', 'this', 'answer', 'which', 'goes', 'into', 'a', 'lot', 'of', 'details', 'about', 'transactions.']"
340,25325342,"

In general the ""higher"" isolation level you use, the poorer concurrency you get. Poorer in the sense that more locks are used and blocks concurrent queries from other transactions. If you know that you shall update a row that is selected you can select ... for update.

See for example http://en.wikipedia.org/wiki/Isolation_%28database_systems%29 for a more thorough explanation.
","['In', 'general', 'yes,', 'but', 'you', 'have', 'to', 'define', 'the', 'level', 'of', 'safety', 'that', 'you', 'require.', 'The', 'three', 'standard', 'phenomena', 'that', 'can', 'occur', 'in', 'a', 'transaction', 'are:', '-', 'Dirty', 'reads', '(', 'read', 'uncommitted', 'data', ')', '-', 'Nonrepeatable', 'reads', '(', 'a', 'row', 'is', 'retrieved', 'twice', 'and', 'the', 'values', 'within', 'the', 'row', 'differ', 'between', 'reads', ')', '-', 'Phantom', 'reads', '(', 'two', 'identical', 'queries', 'are', 'executed', ',', 'and', 'the', 'collection', 'of', 'rows', 'return', 'ed', 'by', 'the', 'second', 'query', 'is', 'different', 'from', 'the', 'first', ')', 'Dependent', 'of', 'what', 'behavior', 'that', 'is', 'accepted', 'you', 'can', 'use', 'different', 'isolation', 'levels:', '-', 'Read', 'uncommitted', '(', 'all', 'phenomena', 'possible', ')', '-', 'Read', 'committed', '(', 'dirty', 'read', 'prevented', ')', '-', 'Repeatable', 'reads', '(', 'phantom', 'read', 'can', 'occur', ')', '-', 'Serializable', '(', 'non', 'of', 'the', 'phenomena', 'is', 'possible', ')', 'In', 'general', 'the', '""higher""', 'isolation', 'level', 'you', 'use,', 'the', 'poorer', 'concurrency', 'you', 'get.', 'Poorer', 'in', 'the', 'sense', 'that', 'more', 'locks', 'are', 'used', 'and', 'blocks', 'concurrent', 'queries', 'from', 'other', 'transactions.', 'If', 'you', 'know', 'that', 'you', 'shall', 'update', 'a', 'row', 'that', 'is', 'selected', 'you', 'can', 'select', '...', 'for', 'update.', 'See', 'for', 'example', 'http://en.wikipedia.org/wiki/Isolation_%28database_systems%29', 'for', 'a', 'more', 'thorough', 'explanation.']"
341,25326736,".
","['The', 'pitch', 'parameter', 'expects', 'the', ""surface's"", 'width', '*', 'sizeof(int32)', 'as', 'far', 'as', 'I', 'can,', 'this', 'code', 'works', 'and', 'prints', 'random', 'pixels', 'every', 'loop:', 'func', 'main', '()', '{', 'window', ',', 'err', ':=', 'sdl', '.', 'CreateWindow', '(', '""test""', ',', 'sdl', '.', 'WINDOWPOS_UNDEFINED', ',', 'sdl', '.', 'WINDOWPOS_UNDEFINED', ',', '800', ',', '600', ',', 'sdl', '.', 'WINDOW_SHOWN', ')', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'defer', 'window.Destroy()', 'renderer', ',', 'err', ':=', 'sdl.CreateRenderer(window, -1, 0)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'defer', 'renderer.Destroy()', 'texture', ',', 'err', ':=', 'renderer', '.', 'CreateTexture', '(', 'sdl', '.', 'PIXELFORMAT_ARGB8888', ',', 'sdl', '.', 'TEXTUREACCESS_STATIC', ',', '800', ',', '600', ')', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'defer', 'texture.Destroy()', 'pixels', ':=', 'make', '([]', 'uint32', ',', '800', '*', '600', ')', 'L', ':', 'for', '{', 'for', 'event', ':=', 'sdl.PollEvent(); event != nil; event = sdl.PollEvent()', '{', 'if', '_', ',', 'ok', ':=', 'event', '.(*', 'sdl', '.', 'QuitEvent', ');', 'ok', '{', 'break', 'L', '}', '}', 'for', 'i', ':=', 'range', 'pixels', '{', 'pixels', '[', 'i', ']', '=', '0', 'x00777777', '+', 'uint32', '(', 'rand.Intn(0x00AAAAAA))', '}', '//', '4', '==', 'sizeof(int32),', 'unsafe.Sizeof(pixels)', 'returns', 'the', 'actual', 'size', 'of', '//', 'the', 'slice', 'header', 'which', 'is', '24', 'texture.Update(nil, unsafe.Pointer(&pixels[0]), 800*4)', 'window.UpdateSurface()', 'renderer.Clear()', 'renderer.Copy(texture, nil, nil)', 'renderer.Present()', '}', 'sdl.Delay(1000)', 'sdl.Quit()', '}', '//edit', 'it', 'should', 'be', 'unsafe.Pointer(&pixels[0])', 'not', 'unsafe.Pointer(&pixels)', '.']"
342,25327191,"DB is safe to be accessed from multiple goroutines:


  DB is a database handle representing a pool of zero or more underlying connections.
  
  It's safe for concurrent use by multiple goroutines.


Also Stmt is safe to be used from multiple goroutines:


  Stmt is a prepared statement. Stmt is safe for concurrent use by multiple goroutines.


You should use only one sql.Tx per goroutine:


  Once DB.Begin is called, the returned Tx is bound to a single connection

",['.']
343,25334843,"Compressing each line individually is just going to be very slow, and provide relatively inefficient compression to boot.

Is there a reason you're not simply compressing the entire file? Or at least one ""block"" at a time?
","['Compressing', 'each', 'line', 'individually', 'is', 'just', 'going', 'to', 'be', 'very', 'slow,', 'and', 'provide', 'relatively', 'inefficient', 'compression', 'to', 'boot.', 'Is', 'there', 'a', 'reason', ""you're"", 'not', 'simply', 'compressing', 'the', 'entire', 'file?', 'Or', 'at', 'least', 'one', '""block""', 'at', 'a', 'time?']"
344,25342976,"
","['The', 'proper', 'way', 'of', 'doing', 'this', 'is', 'passing', 'the', 'handle', 'in', 'main', 'to', 'SetupLogging:', 'func', 'SetupLogging', '(', 'lf', '*', 'os', '.', 'File', ')', '{', 'log.SetOutput(io.MultiWriter(os.Stderr, logFile))', 'log.Println(""Started"")', '}', 'func', 'main', '()', '{', 'logFile', ',', 'err', ':=', 'os.OpenFile(""test.log"", os.O_APPEND|os.O_CREATE, 0666)', 'if', 'err', '!=', 'nil', '{', 'log.Panicln(err)', '}', 'defer', 'logFile.Close()', 'SetupLogging', '(', 'logFile', ')', 'log.Println(""Test message"")', '}', 'Another', 'option', 'is', 'to', 'use', 'runtime.SetFinalizer,', 'but', ""it's"", 'not', 'always', 'guaranteed', 'to', 'run', 'before', 'main', 'exits.', 'func', 'SetupLogging', '()', '{', 'logFile', ',', 'err', ':=', 'os.OpenFile(""test.log"", os.O_APPEND|os.O_CREATE, 0666)', 'if', 'err', '!=', 'nil', '{', 'log.Panicln(err)', '}', 'runtime.SetFinalizer(logFile, func(h *os.File)', '{', 'h.Close()', '})', 'log.SetOutput(io.MultiWriter(os.Stderr, logFile))', '}']"
345,25351051,"

playground

Another approach is to use a map then for sorting generate a list out of it and sort it.
","['You', 'would', 'be', 'surprised', 'how', 'fast', 'and', 'efficient', 'looping', 'over', 'a', 'small', 'slice', 'is,', 'and', 'you', 'can', 'implement', 'sorting', 'on', 'top', 'of', 'it', 'fairly', 'simple.', 'I', 'recommend', 'reading', 'http://golang.org/pkg/sort/', 'SortWrapper.', 'type', 'Letter', 'struct', '{', 'Value', 'rune', 'Score', 'int', '}', 'type', 'LetterList', '[]*', 'Letter', 'func', '(', 'll', '*', 'LetterList', ')', 'FindOrAdd', '(', 'r', 'rune', ')', '(', 'l', '*', 'Letter', ')', '{', 'for', '_', ',', 'l', '=', 'range', '*', 'll', '{', 'if', 'l', '.', 'Value', '==', 'r', '{', 'return', '}', '}', 'l', '=', '&', 'Letter', '{', 'Value', ':', 'r', ',', 'Score', ':', '0', '}', '*', 'll', '=', 'append', '(*', 'll', ',', 'l', ')', 'return', '}', 'func', '(', 'll', 'LetterList', ')', 'SortByScore', '()', 'LetterList', '{', 'sort.Sort(llByScore{ll})', 'return', 'll', '}', 'func', '(', 'll', 'LetterList', ')', 'SortByValue', '()', 'LetterList', '{', 'sort.Sort(llByValue{ll})', 'return', 'll', '}', 'func', '(', 'll', 'LetterList', ')', 'String', '()', 'string', '{', 'var', 'b', 'bytes', '.', 'Buffer', ""b.WriteByte('[')"", 'for', '_', ',', 'v', ':=', 'range', 'll', '{', 'b.WriteString(fmt.Sprintf(""{%q, %d}, "", v.Value, v.Score))', '}', ""b.WriteByte(']')"", 'return', 'b.String()', '}', 'func', 'New', '(', 's', 'string', ')', '(', 'll', 'LetterList', ')', '{', 'll', '=', 'LetterList', '{}', 'for', '_', ',', 'r', ':=', 'range', 's', '{', 'll.FindOrAdd(r)', '.', 'Score', '++', '}', 'return', '}', 'func', '(', 'll', 'LetterList', ')', 'Len', '()', 'int', '{', 'return', 'len', '(', 'll', ')', '}', 'func', '(', 'll', 'LetterList', ')', 'Swap', '(', 'i', ',', 'j', 'int', ')', '{', 'll', '[', 'i', '],', 'll', '[', 'j', ']', '=', 'll', '[', 'j', '],', 'll', '[', 'i', ']', '}', 'type', 'llByScore', 'struct', '{', 'LetterList', '}', 'func', '(', 'l', 'llByScore', ')', 'Less', '(', 'i', ',', 'j', 'int', ')', 'bool', '{', 'return', 'l', '.', 'LetterList', '[', 'i', '].', 'Score', '>', 'l', '.', 'LetterList', '[', 'j', '].', 'Score', '}', 'type', 'llByValue', 'struct', '{', 'LetterList', '}', 'func', '(', 'l', 'llByValue', ')', 'Less', '(', 'i', ',', 'j', 'int', ')', 'bool', '{', 'return', 'l', '.', 'LetterList', '[', 'i', '].', 'Value', '>', 'l', '.', 'LetterList', '[', 'j', '].', 'Value', '}', 'func', 'main', '()', '{', 'll', ':=', 'New', '(', 'Let', ""'s say I have a string and I would like to count each letter'"", 's', 'frequency', 'and', 'then', 'sort', 'the', 'table', 'by', 'the', 'frequency', '.', 'Desired', 'output', 'of', '""hello larry""', 'would', 'be', ')', 'fmt.Println(ll)', 'fmt.Println(ll.SortByScore())', 'fmt.Println(ll.SortByValue())', '}', 'playground', 'Another', 'approach', 'is', 'to', 'use', 'a', 'map', 'then', 'for', 'sorting', 'generate', 'a', 'list', 'out', 'of', 'it', 'and', 'sort', 'it.']"
346,25376707,"The article mentions:


  Many server frameworks provide packages and types for carrying request-scoped values.
  We can define new implementations of the Context interface to bridge between code using existing frameworks and code that expects a Context parameter.
  
  For example, Gorilla's github.com/gorilla/context package allows handlers to associate data with incoming requests by providing a mapping from HTTP requests to key-value pairs.
  In gorilla.go, we provide a Context implementation whose Value method returns the values associated with a specific HTTP request in the Gorilla package.
  
  Other packages have provided cancellation support similar to Context.
  For example, Tomb provides a Kill method that signals cancellation by closing a Dying channel. Tomb also provides methods to wait for those goroutines to exit, similar to sync.WaitGroup.
  In tomb.go, we provide a Context implementation that is canceled when either its parent Context is canceled or a provided Tomb is killed. 


You will find other examples of Context, like context.go in goweb.
","['playground', 'Another', 'approach', 'is', 'to', 'use', 'a', 'map', 'then', 'for', 'sorting', 'generate', 'a', 'list', 'out', 'of', 'it', 'and', 'sort', 'it.']"
347,25391509,"

I'm guessing that you somehow installed something as root that changed the permission of $GOPATH/pkg.
","['It', 'looks', 'like', 'a', 'permission', 'problem,', 'changing', 'the', 'ownership', 'on', '$GOPATH', 'should', 'fix', 'it.', 'sudo', 'chown', '-', 'R', '$', 'USER', '$', 'GOPATH', ""I'm"", 'guessing', 'that', 'you', 'somehow', 'installed', 'something', 'as', 'root', 'that', 'changed', 'the', 'permission', 'of', '$GOPATH/pkg.']"
348,25431804,"

So for anyone who wants to do a bulk upsert, there is a pattern to work around any limitations of the mysql driver.
","['So', 'while', 'we', ""weren't"", 'able', 'to', 'do', 'separate', 'queries', 'for', 'each', 'upsert,', 'we', 'did', 'write', 'valid', 'mysql', 'for', 'bulk', 'upserts', 'in', 'a', 'single', 'statement...', 'INSERT', 'INTO', 'balance', '(', 'id', ',', 'money', ')', 'VALUES', '(', '1', ',', '123', '.', '45', '),', '(', '2', ',', '67', '.', '89', '),', '(', '3', ',', '10', '.', '23', ')', 'ON', 'DUPLICATE', 'KEY', 'UPDATE', 'money', '=', 'money', '+', 'values', '(', 'money', ')', 'So', 'for', 'anyone', 'who', 'wants', 'to', 'do', 'a', 'bulk', 'upsert,', 'there', 'is', 'a', 'pattern', 'to', 'work', 'around', 'any', 'limitations', 'of', 'the', 'mysql', 'driver.']"
349,25476750,"Use proper error handling and you should see what is going on. For some reason it is either loading a blank file or no able to find the file and that is why the results page is blank.

As mentioned in the comments:

In renderTemplate, do a panic(err) and check the return value of t.Execute(). In viewHandler do a panic(err) as well. Same in editHandler, do a panic(err).

See what those panics say and go from there.
","['So', 'for', 'anyone', 'who', 'wants', 'to', 'do', 'a', 'bulk', 'upsert,', 'there', 'is', 'a', 'pattern', 'to', 'work', 'around', 'any', 'limitations', 'of', 'the', 'mysql', 'driver.']"
350,25487392,"

playground
","['You', 'will', 'have', 'to', 'create', 'a', 'struct', 'to', 'hold', 'your', 'map', 'and', 'provide', 'custom', 'get/put/delete', 'funcs', 'to', 'access', 'it.', 'Note', 'that', '2-5k', 'accesses', 'per', 'second', 'is', 'not', 'really', 'that', 'much', 'at', 'all,', 'so', 'you', ""don't"", 'have', 'to', 'worry', 'about', 'that.', ""Here's"", 'a', 'simple', 'implementation:', 'type', 'item', 'struct', '{', 'value', 'string', 'lastAccess', 'int64', '}', 'type', 'TTLMap', 'struct', '{', 'm', 'map', '[', 'string', ']*', 'item', 'l', 'sync', '.', 'Mutex', '}', 'func', 'New', '(', 'ln', 'int', ',', 'maxTTL', 'int', ')', '(', 'm', '*', 'TTLMap', ')', '{', 'm', '=', '&', 'TTLMap', '{', 'm', ':', 'make', '(', 'map', '[', 'string', ']*', 'item', ',', 'ln', ')}', 'go', 'func', '()', '{', 'for', 'now', ':=', 'range', 'time.Tick(time.Second)', '{', 'm', '.', 'l.Lock()', 'for', 'k', ',', 'v', ':=', 'range', 'm', '.', 'm', '{', 'if', 'now.Unix() - v.lastAccess > int64(maxTTL)', '{', 'delete', '(', 'm', '.', 'm', ',', 'k', ')', '}', '}', 'm', '.', 'l.Unlock()', '}', '}()', 'return', '}', 'func', '(', 'm', '*', 'TTLMap', ')', 'Len', '()', 'int', '{', 'return', 'len', '(', 'm', '.', 'm', ')', '}', 'func', '(', 'm', '*', 'TTLMap', ')', 'Put', '(', 'k', ',', 'v', 'string', ')', '{', 'm', '.', 'l.Lock()', 'it', ',', 'ok', ':=', 'm', '.', 'm', '[', 'k', ']', 'if', '!', 'ok', '{', 'it', '=', '&', 'item', '{', 'value', ':', 'v', '}', 'm', '.', 'm', '[', 'k', ']', '=', 'it', '}', 'it', '.', 'lastAccess', '=', 'time.Now().Unix()', 'm', '.', 'l.Unlock()', '}', 'func', '(', 'm', '*', 'TTLMap', ')', 'Get', '(', 'k', 'string', ')', '(', 'v', 'string', ')', '{', 'm', '.', 'l.Lock()', 'if', 'it', ',', 'ok', ':=', 'm', '.', 'm', '[', 'k', '];', 'ok', '{', 'v', '=', 'it', '.', 'value', 'it', '.', 'lastAccess', '=', 'time.Now().Unix()', '}', 'm', '.', 'l.Unlock()', 'return', '}', 'playground']"
351,25496227,"That is just a plain make file and not even well written.


running just make will execute the commands under test
make dependencies will download all the dependencies of the current packages
make cover will do coverage testing and output an html file 

",['playground']
352,25496238,"
","['You', 'can', 'find', 'enough', 'info', 'and', 'documentation', 'on', 'golang', 'page.', 'There', 'is', 'a', '""search""', 'in', 'upper', 'right', 'corner,', 'inserting', '""cover""', 'or', '""-cover""', 'yielded', 'very', 'useful', 'info,', 'such', 'as', 'this:', 'Cover', 'is', 'a', 'program', 'for', 'analyzing', 'the', 'coverage', 'profiles', 'generated', 'by', ""'go"", 'test', ""-coverprofile=cover.out'."", 'Cover', 'is', 'also', 'used', 'by', ""'go"", 'test', ""-cover'"", 'to', 'rewrite', 'the', 'source', 'code', 'with', 'annotations', 'to', 'track', 'which', 'parts', 'of', 'each', 'function', 'are', 'executed.', 'It', 'operates', 'on', 'one', 'Go', 'source', 'file', 'at', 'a', 'time,', 'computing', 'approximate', 'basic', 'block', 'information', 'by', 'studying', 'the', 'source.', 'It', 'is', 'thus', 'more', 'portable', 'than', 'binary-rewriting', 'coverage', 'tools,', 'but', 'also', 'a', 'little', 'less', 'capable.', 'For', 'instance,', 'it', 'does', 'not', 'probe', 'inside', '&&', 'and', '||', 'expressions,', 'and', 'can', 'be', 'mildly', 'confused', 'by', 'single', 'statements', 'with', 'multiple', 'function', 'literals.', 'For', 'usage', 'information,', 'please', 'see:', 'go', 'help', 'testflag', 'go', 'tool', 'cover', '-', 'help']"
353,25498741,"



Also, As illustrated in ""Golang function pointer as a part of a struct"", you can define functions on a func receiver ApplyFunc(!).
","['Golang', 'function', 'are', 'first-class,', 'as', 'illustrated', 'in', 'this', 'go-example', 'page.', 'It', 'is', 'a', 'named', 'type,', 'which', 'means', 'you', 'can', 'use', 'ApplyFunc', 'anywhere', 'where', 'a', 'func', '(', 'commitIndex', 'uint64', ',', 'cmd', '[]', 'byte', ')', '[]', 'byte', 'is', 'expected:', 'see', '""Golang:', 'Why', 'can', 'I', 'type', 'alias', 'functions', 'and', 'use', 'them', 'without', 'casting?"".', 'It', 'means,', 'as', 'commented', 'by', 'Volker,', 'it', ""isn't"", 'a', 'function', 'or', 'a', '""pointer', 'to', 'a', 'function"".', 'It', 'is', 'a', 'type', 'which', 'allows', 'you', 'to', 'declare', 'a', 'variable', 'storing', 'any', 'function', 'which', 'respects', 'the', 'same', 'func', 'signature', 'as', 'its', 'declared', 'type,', 'like', 'a', 'function', 'literal', '(or', '""anonymous', 'function"").', 'var', 'af', 'ApplyFunc', '=', 'func', '(', 'uint64', ',[]', 'byte', ')', '[]', 'byte', '{', 'return', 'nil', '}', '//', '(function', 'literal', 'or', '""anonymous', 'function"")', 'See', '""Anonymous', 'Functions', 'and', 'Closures"":', 'you', 'can', 'define', 'a', 'function', 'which', 'returns', 'another', 'function,', 'taking', 'advantage', 'of', 'closure:', 'Function', 'literals', 'are', 'closures:', 'they', 'may', 'refer', 'to', 'variables', 'defined', 'in', 'a', 'surrounding', 'function.', 'Those', 'variables', 'are', 'then', 'shared', 'between', 'the', 'surrounding', 'function', 'and', 'the', 'function', 'literal,', 'and', 'they', 'survive', 'as', 'long', 'as', 'they', 'are', 'accessible.', '(see', 'playground', 'example)', 'type', 'inc', 'func', '(', 'digit', 'int', ')', 'int', 'func', 'getIncbynFunction', '(', 'n', 'int', ')', 'inc', '{', 'return', 'func', '(', 'value', 'int', ')', 'int', '{', 'return', 'value', '+', 'n', '}', '}', 'func', 'main', '()', '{', 'g', ':=', 'getIncbynFunction', 'h', ':=', 'g', '(', '4', ')', 'i', ':=', 'g', '(', '6', ')', 'fmt.Println(h(5))', '// return 5+4, since n has been set to 4', 'fmt.Println(i(1))', '// return 1+6, since n has been set to 6', '}', 'Also,', 'As', 'illustrated', 'in', '""Golang', 'function', 'pointer', 'as', 'a', 'part', 'of', 'a', 'struct"",', 'you', 'can', 'define', 'functions', 'on', 'a', 'func', 'receiver', 'ApplyFunc(!).']"
354,25499760," (pkg/ is created for you, windows_amd64 reflects your windows architecture)
with go install, install it in %GOPATH%/bin (bin/ is also created for you)


Note: with Go 1.8+ (Q2 2017), GOPATH might be set for you by default to (on Windows) %USERPROFILE%/go.
On Linux, it would be $HOME/go: see issue 17262.
","['GOROOT', 'must', 'reference', 'the', 'folder', 'where', 'you', 'installed', 'GO', 'GOPATH', 'must', 'reference', 'an', 'empty', 'folder', 'which', 'will', 'be', 'your', 'workspace', '(src/pkg/bin', 'for', 'your', 'projects)', 'Add', 'those', 'two', 'variables', 'in', 'your', 'user', 'environment', 'variables.', 'A', 'go', 'get', 'github', '.', 'com/coreos/etcd', 'should:', 'download', 'the', 'sources', 'in', '%', 'GOPATH', '%/', 'src/github.com/coreos/etcd', '(src', 'is', 'created', 'for', 'you)', 'compile', 'it', 'in', '%', 'GOPATH', '%/', 'pkg/windows_amd64', '(pkg/', 'is', 'created', 'for', 'you,', 'windows_amd64', 'reflects', 'your', 'windows', 'architecture)', 'with', 'go', 'install,', 'install', 'it', 'in', '%GOPATH%/bin', '(bin/', 'is', 'also', 'created', 'for', 'you)', 'Note:', 'with', 'Go', '1.8+', '(Q2', '2017),', 'GOPATH', 'might', 'be', 'set', 'for', 'you', 'by', 'default', 'to', '(on', 'Windows)', '%USERPROFILE%/go.', 'On', 'Linux,', 'it', 'would', 'be', '$HOME/go:', 'see', 'issue', '17262.']"
355,25519765,"

You need to try with a camera.go including only that code, or check how the camera.go file fits in your current workspace.
","['Isolating', 'in', 'a', 'playgroud,', 'it', 'compiles', 'just', 'fine,', 'and', 'has', 'the', 'expected', 'output:', 'c', ':=', 'camera', '{}', 'res', ':=', 'c.SwitchToCartesianThreeSpace(2, 3)', '//', 'res', 'is', '[0', '2', '-3]', 'You', 'need', 'to', 'try', 'with', 'a', 'camera.go', 'including', 'only', 'that', 'code,', 'or', 'check', 'how', 'the', 'camera.go', 'file', 'fits', 'in', 'your', 'current', 'workspace.']"
356,25595027,"

","['The', 'installation', 'page', 'does', 'mention:', 'Once', 'downloaded', 'it', 'can', 'be', 'run', 'from', 'anywhere.', 'You', 'don’t', 'need', 'to', 'install', 'it', 'into', 'a', 'global', 'location.', 'Ideally', 'you', 'should', 'install', 'it', 'somewhere', 'in', 'your', 'path', 'for', 'easy', 'use.', '/usr/local/bin', 'is', 'the', 'most', 'probable', 'location.', 'As', 'long', 'as:', 'you', 'chose', 'the', 'right', 'release', 'for', 'your', 'architecture', '(linux,', 'Mac', 'or', 'Windows)', 'rename', 'the', 'executable', 'to', 'hugo', '(or', 'make', 'a', 'symlink', 'to', 'it,', 'named', 'hugo)', 'your', '$PATH', '(or', '%PATH%', 'on', 'Windows)', 'environment', 'variable', 'references', 'the', 'executable', 'hugo,', 'you', 'can', 'start', 'using', 'it.', 'hugo', 'new', 'site', '/path/to/site']"
357,25596117,"

Make sure either hugo is in your path or provide a path to it. For example, rename the hugo_0.11_linux_amd64 executable file to hugo. Move the hugo executable file to /usr/local/bin.

Run

$ hugo help


Continue to follow the instructions for Using Hugo.

References:

Hugo

Hugo Documentation: Getting Started
","['Extract', 'hugo_0', '.', '11', '_linux_amd64', '.tar.gz', 'to', 'a', 'directory.', 'In', 'that', 'directory', 'you', 'should', 'find', 'three', 'files:', 'hugo_0', '.', '11', '_linux_amd64', 'LICENSE', '.', 'md', 'README', '.', 'md', 'Make', 'sure', 'either', 'hugo', 'is', 'in', 'your', 'path', 'or', 'provide', 'a', 'path', 'to', 'it.', 'For', 'example,', 'rename', 'the', 'hugo_0.11_linux_amd64', 'executable', 'file', 'to', 'hugo.', 'Move', 'the', 'hugo', 'executable', 'file', 'to', '/usr/local/bin.', 'Run', '$', 'hugo', 'help', 'Continue', 'to', 'follow', 'the', 'instructions', 'for', 'Using', 'Hugo.', 'References:', 'Hugo', 'Hugo', 'Documentation:', 'Getting', 'Started']"
358,25652169,"
","[""I'm"", 'not', 'familiar', 'enough', 'with', 'Java', 'but', ""wouldn't"", 'this', 'do', 'the', 'same', 'thing:', '//', 'w', '=', 'io.Writer', 'io.WriteString(""stuff"")', '//', 'r', '=', 'io.Reader', 'sc', ':=', 'bufio.NewScanner(r)', 'for', 'scanner.Scan()', '{', 'fmt.Println(sc.Text())', '}', 'strings', 'are', 'a', 'readonly', '[]byte', 'more', 'or', 'less.', '//edit', 'After', 'reading', 'the', 'comments,', 'I', 'think', ""you're"", 'looking', 'for', 'https://code.google.com/p/go-charset:', 'r', ',', 'err', ':=', 'charset.NewReader(""latin1"", r)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'result', ',', 'err', ':=', 'ioutil.ReadAll(r)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'fmt.Printf(""%s\\n"", result)']"
359,25669593,"
","['You', 'could', 'use', 'something', 'like', 'this', 'skipping', 'the', 'cgo', 'all', 'together,', 'I', ""can't"", 'test', 'it', 'right', 'now:', 'const', '(', 'netNS', '=', '""/run/netns/""', 'mntNS', '=', '""/run/mntns/""', ')', 'func', 'ChangeNamespace', '(', 'name', 'string', ')', 'error', '{', 'fd', ',', 'err', ':=', 'syscall.Open(netNS+name, syscall.O_RDONLY, 0666)', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'defer', 'syscall.Close(fd)', 'if', '_', ',', '_', ',', 'err', ':=', 'syscall.RawSyscall(syscall.SYS_SETNS, uintptr(fd), 0, 0)', ';', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'fd1', ',', 'err', ':=', 'syscall.Open(mntNS+name, syscall.O_RDONLY, 0666)', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'defer', 'syscall.Close(fd1)', 'if', '_', ',', '_', ',', 'err', ':=', 'syscall.RawSyscall(syscall.SYS_SETNS, uintptr(fd1), 0, 0)', ';', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'return', 'nil', '}']"
360,25712559,"Slightly off to one side - you asked for an array of objects when you needed a map

If you need an array (actually a slice) 

http://ioblocks.blogspot.com/2014/09/loading-arrayslice-of-objects-from-json.html
","['Slightly', 'off', 'to', 'one', 'side', '-', 'you', 'asked', 'for', 'an', 'array', 'of', 'objects', 'when', 'you', 'needed', 'a', 'map', 'If', 'you', 'need', 'an', 'array', '(actually', 'a', 'slice)', 'http://ioblocks.blogspot.com/2014/09/loading-arrayslice-of-objects-from-json.html']"
361,25728030,"Just a shot in the dark - what is the system CCSID set to?  DSPSYSVAL QCCSID.  If it is 65535, that means the system language is 'binary - do not translate'.  You might need to set the CCSID in your connection string if that's the case.
","['Just', 'a', 'shot', 'in', 'the', 'dark', '-', 'what', 'is', 'the', 'system', 'CCSID', 'set', 'to?', 'DSPSYSVAL', 'QCCSID.', 'If', 'it', 'is', '65535,', 'that', 'means', 'the', 'system', 'language', 'is', ""'binary"", '-', 'do', 'not', ""translate'."", 'You', 'might', 'need', 'to', 'set', 'the', 'CCSID', 'in', 'your', 'connection', 'string', 'if', ""that's"", 'the', 'case.']"
362,25745513,"

In other words, this isn't the map errMsg which is the issue, but the value you want to put in it.
","['It', 'is', 'possible', 'that', 'err', 'is', 'nil', 'when', 'returning', 'from', 'ValidateName(),', 'ValidateEmail()', 'or', 'ValidatePassword()', 'calls.', 'You', 'should', 'check', 'err', '!=', 'nil', 'before', 'adding', 'it', 'to', 'the', 'map.', 'if', 'err', '!=', 'nil', '{', 'mutex.Lock()', 'errMsg', '[', '""xxx""', ']', '=', 'err.Error()', 'mutex.Unlock()', '}', 'In', 'other', 'words,', 'this', ""isn't"", 'the', 'map', 'errMsg', 'which', 'is', 'the', 'issue,', 'but', 'the', 'value', 'you', 'want', 'to', 'put', 'in', 'it.']"
363,25806298,"I don't see how you would refactor the code, and somehow keep it clear and expressive enough.

If you have only three cases to consider, making them in three separate if/else is the easiest way to code those cases.
","['I', ""don't"", 'see', 'how', 'you', 'would', 'refactor', 'the', 'code,', 'and', 'somehow', 'keep', 'it', 'clear', 'and', 'expressive', 'enough.', 'If', 'you', 'have', 'only', 'three', 'cases', 'to', 'consider,', 'making', 'them', 'in', 'three', 'separate', 'if/else', 'is', 'the', 'easiest', 'way', 'to', 'code', 'those', 'cases.']"
364,25809786,"It is technically possible: you could create an if statement for the >170 case, then define an array of 170 function pointers and use an index operation for the other two cases. I can't think of a reasonable case where this solution is actually better than the one you already have though.
","['In', 'other', 'words,', 'this', ""isn't"", 'the', 'map', 'errMsg', 'which', 'is', 'the', 'issue,', 'but', 'the', 'value', 'you', 'want', 'to', 'put', 'in', 'it.']"
365,25837128,"
","['No,', 'but', 'it', 'might', 'be', 'simpler', 'to', 'apply', 'strings.Index', 'on', 'a', 'slice', 'of', 'the', 'string', 'strings.Index(s[1:], ""go"")', '+', '1', 'strings.Index(s[n:], ""go"")', '+', 'n', 'See', 'example', '(for', 'the', 'case', 'where', 'the', 'string', ""isn't"", 'found,', 'see', ""OneOfOne's"", 'answer),', 'but,', 'as', 'commented', 'by', 'Dewy', 'Broto,', 'one', 'can', 'simply', 'test', 'it', 'with', 'a', ""'if'"", 'statement', 'including', 'a', 'simple', 'statement:', '(also', 'called', ""'if'"", 'with', 'an', 'initialization', 'statement)', 'if', 'i', ':=', 'strings.Index(s[n:], sep)', '+', 'n', ';', 'i', '>=', 'n', '{', '...', '}']"
366,25837141,"
","[""It's"", 'an', 'annoying', 'oversight,', 'you', 'have', 'to', 'create', 'your', 'own', 'function.', 'Something', 'like:', 'func', 'indexAt', '(', 's', ',', 'sep', 'string', ',', 'n', 'int', ')', 'int', '{', 'idx', ':=', 'strings.Index(s[n:], sep)', 'if', 'idx', '>', '-', '1', '{', 'idx', '+=', 'n', '}', 'return', 'idx', '}']"
367,25838625," ...).

A different approach will be to use an 'ORM-ish' package like gorp or gorm, both should handle sql updates properly.
","['In', 'case', 'you', ""don't"", 'want', 'to', 'use', 'an', 'ORM,', 'try', 'a', 'SQL', 'generator', 'like', 'Squirrel,', 'and', 'check', 'every', 'argument', 'before', 'modifying', 'the', 'sql', 'statement:', 'import', '(', 'sq', '""github.com/lann/squirrel""', '""fmt""', ')', 'statement', ':=', 'sq.Update(""user"").Where(sq.Eq{""Id"": &u.Id})', 'if', '&', 'u', '.', 'Name', '!=', 'nil', '{', 'statement', '=', 'statement.Set(""Name"", ""Jack"")', '}', 'sql', ',', 'args', ',', 'err', ':=', 'statement.ToSql()', 'fmt.Println(sql)', 'In', 'some', 'scenarios', 'you', 'may', 'need', 'to', 'query', 'the', 'DB', 'first', 'to', 'make', 'sure', 'the', 'input', 'data', 'is', 'not', 'trying', 'to', 'explicitly', 'set', 'column', '´Name´', 'to', 'null', '(like', 'update', 'user', 'set', 'Name', '=', 'null', '...).', 'A', 'different', 'approach', 'will', 'be', 'to', 'use', 'an', ""'ORM-ish'"", 'package', 'like', 'gorp', 'or', 'gorm,', 'both', 'should', 'handle', 'sql', 'updates', 'properly.']"
368,25861731,"

Yes, that's a little mind-bending. I've never heard the specific thinking explained, but maybe they kept builtin type names un-reserved so they could later introduce new builtin types without breaking code that's already out there.

Anyway, it means your first function definition doesn't actually accept an int and a *StructObj but a *StructObj named int and another named reply. So the error message from net/rpc actually means that the client passed a 0 when it expected a *StructObj. Pretty fun.
","['You', 'hit', 'a', 'tricky', 'aspect', 'of', 'function', 'definition', 'syntax', 'in', 'Go.', 'You', ""can't"", 'have', 'an', 'unnamed', 'argument,', 'and', 'you', 'can', 'name', 'an', 'argument', 'int,', 'and', 'func', 'f(x,', 'y,', 'z', 'Type)', 'is', 'a', 'shortcut', 'to', 'declare', 'all', 'three', 'variables', 'to', 'be', 'of', 'type', 'Type.', 'For', 'example,', 'func', 'f', '(', 'int', ',', 'x', 'string', ')', 'counterintuitively', 'declares', 'an', 'f', 'that', 'accepts', 'two', 'strings,', 'one', 'of', 'which', 'happens', 'to', 'be', 'named', 'int.', 'package', 'main', 'import', '""fmt""', 'func', 'f', '(', 'int', ',', 'x', 'string', ')', '{', 'fmt.Println(""int is:"", int)', 'fmt.Println(""x is:"", x)', '}', 'func', 'main', '()', '{', 'f', '(', '""foo""', ',', '""bar""', ')', '}', 'When', 'you', 'run', 'it,', 'the', 'output', 'is', 'int', 'is', ':', 'foo', 'x', 'is', ':', 'bar', 'Yes,', ""that's"", 'a', 'little', 'mind-bending.', ""I've"", 'never', 'heard', 'the', 'specific', 'thinking', 'explained,', 'but', 'maybe', 'they', 'kept', 'builtin', 'type', 'names', 'un-reserved', 'so', 'they', 'could', 'later', 'introduce', 'new', 'builtin', 'types', 'without', 'breaking', 'code', ""that's"", 'already', 'out', 'there.', 'Anyway,', 'it', 'means', 'your', 'first', 'function', 'definition', ""doesn't"", 'actually', 'accept', 'an', 'int', 'and', 'a', '*StructObj', 'but', 'a', '*StructObj', 'named', 'int', 'and', 'another', 'named', 'reply.', 'So', 'the', 'error', 'message', 'from', 'net/rpc', 'actually', 'means', 'that', 'the', 'client', 'passed', 'a', '0', 'when', 'it', 'expected', 'a', '*StructObj.', 'Pretty', 'fun.']"
369,25942472,"

playground
","['They', ""aren't"", 'equal', 'because', ""it's"", 'comparing', 'the', 'pointer', 'not', 'the', 'value', 'of', 'the', 'pointer.', 'You', 'have', 'few', 'options.', ""Don't"", 'use', 'pointers', 'and', 'you', ""won't"", 'be', 'able', 'to', 'use', 'slices', 'either', 'in', 'either', 'structs,', 'you', 'can', 'use', 'fixed', 'size', 'arrays.', 'Write', 'your', 'own', 'func', '(', 'p', '*', 'packet', ')', 'Equals', '(', 'o', '*', 'packet', ')', 'bool', 'and', 'compare', 'stuff', 'yourself.', 'use', 'reflect.DeepEqual,', 'this', 'is', 'by', 'far', 'the', 'slowest', '/', 'least', 'efficient', 'solution,', ""I'd"", 'personally', 'go', 'with', '#2.', 'Simple', 'implementation', 'of', '#2:', 'func', '(', 'h', '*', 'header', ')', 'Equal', '(', 'o', '*', 'header', ')', 'bool', '{', 'return', 'h', '!=', 'nil', '&&', 'o', '!=', 'nil', '&&', 'h', '.', 'dataLength', '==', 'o', '.', 'dataLength', '&&', 'h', '.', 'optDataLength', '==', 'o', '.', 'optDataLength', '&&', 'h', '.', 'packetType', '==', 'o', '.', 'packetType', '}', 'func', '(', 'p', '*', 'packet', ')', 'Equal', '(', 'o', '*', 'packet', ')', 'bool', '{', 'return', 'p', '!=', 'nil', '&&', 'o', '!=', 'nil', '&&', 'p', '.', 'header.Equal(o.header)', '&&', 'p', '.', 'syncByte', '==', 'o', '.', 'syncByte', '&&', 'p', '.', 'headerCrc', '==', 'o', '.', 'headerCrc', '&&', 'p', '.', 'dataCrc', '==', 'o', '.', 'dataCrc', '&&', 'bytes.Equal(p.data, o.data)', '&&', 'bytes.Equal(p.optData, o.optData)', '}', 'playground']"
370,25942593,"Each call to Decode allocates a new value of type header. You are observing the different addresses for these allocated headers. The two headers values have the same contents, but they are at different addresses.
",['playground']
371,25972959,"

Replay() doesn't change or know anything about Attributed{}.
You do have to introduce types for the slices Quotes & Statements.
","['The', 'following', 'code', 'has', 'two', 'different', 'structure', 'types', 'that', 'both', 'implement', 'the', 'Say()', 'function.', 'You', 'can', 'create', 'an', 'array', 'containing', 'both', 'types', 'and', 'call', 'Replay()and', 'have', 'it', 'do', 'what', 'you', 'want:', 'package', 'main', 'import', '""fmt""', 'type', 'Statement', 'interface', '{', 'Say', '()', 'string', '}', 'type', 'Statements', '[]', 'Statement', 'type', 'Quote', 'struct', '{', 'quote', 'string', '}', 'type', 'Quotes', '[]', 'Quote', 'func', '(', 'p', 'Quote', ')', 'Say', '()', 'string', '{', 'return', 'p', '.', 'quote', '}', 'type', 'Attributed', 'struct', '{', 'who', 'string', 'quote', 'string', '}', 'func', '(', 'p', 'Attributed', ')', 'Say', '()', 'string', '{', 'return', 'p', '.', 'who', '+', '"": ""', '+', 'p', '.', 'quote', '}', 'func', 'Replay', '(', 'conversation', '[]', 'Statement', ')', '{', 'for', '_', ',', 's', ':=', 'range', 'conversation', '{', 'fmt.Println(s.Say())', '}', '}', 'func', '(', 'q', 'Quotes', ')', 'toStatements', '()', 'Statements', '{', 'conv', ':=', 'make', '(', 'Statements', ',', 'len', '(', 'q', '))', 'for', 'i', ',', 'v', ':=', 'range', 'q', '{', 'conv', '[', 'i', ']', '=', 'Statement', '(', 'v', ')', '}', 'return', 'conv', '}', 'func', 'main', '()', '{', 'conversation', ':=', 'Statements', '{', 'Quote', '{', '""Nice Guy Eddie: C\'mon, throw in a buck!""', '},', 'Quote', '{', '""Mr. Pink: Uh-uh, I don\'t tip.""', '},', 'Attributed', '{', '""Nice Guy Eddie""', ',', '""You don\'t tip?""', '},', '// <= another type', 'Quote', '{', '""Mr. Pink: Nah, I don\'t believe in it.""', '},', 'Quote', '{', '""Nice Guy Eddie: You don\'t believe in tipping?""', '},', '}', 'myquotes', ':=', 'Quotes', '{', 'Quote', '{', '""Nice Guy Eddie: C\'mon, throw in a buck!""', '},', 'Quote', '{', '""Mr. Pink: Uh-uh, I don\'t tip.""', '},', 'Quote', '{', '""Nice Guy Eddie: You don\'t tip?""', '},', 'Quote', '{', '""Mr. Pink: Nah, I don\'t believe in it.""', '},', 'Quote', '{', '""Nice Guy Eddie: You don\'t believe in tipping?""', '},', '}', 'Replay', '(', 'conversation', ')', 'Replay', '(', 'myquotes.toStatements())', '}', 'Replay()', ""doesn't"", 'change', 'or', 'know', 'anything', 'about', 'Attributed{}.', 'You', 'do', 'have', 'to', 'introduce', 'types', 'for', 'the', 'slices', 'Quotes', '&', 'Statements.']"
372,26000374,"
","['Make', 'sure', 'the', 'actual', 'error', ""isn't"", 'related', 'to', 'an', 'import', 'issue', '(as', 'in', 'issues', '266)', 'Check', '(to', 'be', 'sure', 'you', 'are', 'using', 'the', 'latest', 'versions,', 'as', 'in', 'this', 'issue):', 'your', 'Go-MySQL-Driver', 'version', '(or', 'git', 'SHA)', 'your', 'Go', 'version', '(run', 'go', 'version', 'in', 'your', 'console)', 'If', 'the', 'error', ""isn't"", 'directly', 'in', 'the', 'Open', 'step,', 'but', 'when', 'accessing', 'the', 'Rows,', 'check', 'this', 'comment', 'out:', 'Use', 'either', 'a', 'for', 'loop', '(', 'for', 'rows.Next()', '{', '...', '}', ')', 'or', 'something', 'like', 'this:', 'if', 'rows.Next()', '{', '//', 'whatever', '}', 'else', '{', '//', 'catch', 'error', 'with', 'rows.Err()', '}', 'rows.Close()', ""// <- don't forget this if you are not iterating over ALL results""]"
373,26011449,"You should keep i18n decoupled from your currency implementation. So no, don't bundle everything in a struct and call it a day. Mark what currency the amount represents but nothing more. Let i18n take care of formatting, stringifying, prefixing, etc.

Use an arbitrary precision numerical type like math/big.Rat. If that is not an option (because of serialization limitations or other barriers), then use the biggest fixed-size integer type you can use to represent the amount of atomic money in whatever currency you are representing – cents for USD, yens for JPY, rappen for CHF, cents for EUR, and so forth.

When using the second approach take extra care to not incur in overflows and define a clear and meaningful rounding behaviour for division.
",[]
374,26016960,"You might want to check out http.MaxBytesReader. It limitates the maximum amount of data which can be received from/sent by a single request. 


  MaxBytesReader prevents clients from accidentally or maliciously sending a large request and wasting server resources. 

","['You', 'might', 'want', 'to', 'check', 'out', 'http.MaxBytesReader.', 'It', 'limitates', 'the', 'maximum', 'amount', 'of', 'data', 'which', 'can', 'be', 'received', 'from/sent', 'by', 'a', 'single', 'request.', 'MaxBytesReader', 'prevents', 'clients', 'from', 'accidentally', 'or', 'maliciously', 'sending', 'a', 'large', 'request', 'and', 'wasting', 'server', 'resources.']"
375,26058668,"
","['Virtual', 'Inheritance', 'solves', 'a', 'problem', 'which', 'does', 'not', 'exist', 'if', 'you', ""don't"", 'have', 'multiple', 'inheritance.', 'Consider', 'the', 'following', 'inheritance', 'tree:', 'A', '/', 'B', 'C', '/', 'D', 'If', 'classes', 'B', 'and', 'C', 'both', 'provide', 'a', 'data-member', '(or', 'method', 'for', 'that', 'matter)', 'with', 'the', 'same', 'name', 'then', 'when', 'accessing', 'said', 'member', 'in', 'D,', 'you', 'need', 'a', 'way', 'to', 'disambiguate', 'whose', ""ancestor's"", 'data-member', '(or', 'method)', 'you', 'wish', 'to', 'access.', 'Virtual', 'Inheritance', 'is', ""C++'s"", 'solution.', 'In', 'Go', 'you', ""don't"", 'have', 'inheritance', 'to', 'begin', 'with;', 'only', 'composition', 'and', 'you', 'can', 'embed', 'at', 'most', '1', 'member', 'of', 'any', 'given', 'type', 'at', 'once.', 'http://play.golang.org/p/1iYzdoFqIC', 'package', 'main', 'type', 'B', 'struct', '{', '}', 'func', '(', 'b', 'B', ')', 'Foo', '()', '{}', 'type', 'C', 'struct', '{', '}', 'func', '(', 'c', 'C', ')', 'Foo', '()', '{}', 'type', 'D', 'struct', '{', 'B', 'C', '}', 'func', 'main', '()', '{', 'd', ':=', 'D', '{', 'B', '{},', 'C', '{}}', '//', 'd.Foo()', '<-', 'ambiguous', 'd', '.', 'B.Foo()', '// <- ok', 'd', '.', 'C.Foo()', '// <- ok', '}']"
376,26093701,"
","['""Virtual', 'Inheritance""', 'is', 'something', 'more', 'like', 'this', 'http://play.golang.org/p/8RvPmB3Pof', 'package', 'main', 'type', 'A', 'struct', '{', 'virtual', 'int', '}', 'func', '(', 'a', '*', 'A', ')', 'set', '(', 'v', 'int', ')', '{', 'a', '.', 'virtual', '=', 'v', '}', 'func', '(', 'a', '*', 'A', ')', 'get', '()', 'int', '{', 'return', 'a', '.', 'virtual', '}', 'type', 'B', 'struct', '{', '*', 'A', '}', 'type', 'C', 'struct', '{', '*', 'A', '}', 'type', 'D', 'struct', '{', '*', 'B', '*', 'C', '}', 'func', 'main', '()', '{', 'a', ':=', '&', 'A', '{}', 'b', ':=', '&', 'B', '{', 'a', '}', 'c', ':=', '&', 'C', '{', 'a', '}', 'd', ':=', '&', 'D', '{', 'b', ',', 'c', '}', 'd', '.', 'B.set(3)', 'println', '(', 'd', '.', 'C.get())', 'return', '}']"
377,26143288,"
","['It', 'is', 'not', 'possible', 'to', 'empty', 'a', 'channel', 'without', 'a', 'loop.', 'If', 'you', ""don't"", 'have', 'any', 'concurrent', 'receivers,', 'then', 'you', 'can', 'use', 'this', 'simple', 'loop:', 'for', 'len', '(', 'ch', ')', '>', '0', '{', '<-', 'ch', '}', 'If', 'you', 'do', 'have', 'concurrent', 'receivers,', 'then', 'use', 'the', 'loop:', 'L', ':', 'for', '{', 'select', '{', 'case', '<-', 'c', ':', 'default', ':', 'break', 'L', '}', '}']"
378,26143528,"What you're describing is inherently racy, since there may be legitimate requests to reconnect on the channel. Rather than trying to drain the channel, I would recommend keeping track of timing.

On your reconnect channel, post the time. When finished with the reconnect, note the time. While consuming the reconnect channel, throw away any messages that are older than your last reconnect.

Another more lockstep solution to achieve this is to make the reconnect channel a bool. Post ""true"" to reconnect. When the reconnect completes, post ""false"". Then consume the channel until you find ""false.""
","['What', ""you're"", 'describing', 'is', 'inherently', 'racy,', 'since', 'there', 'may', 'be', 'legitimate', 'requests', 'to', 'reconnect', 'on', 'the', 'channel.', 'Rather', 'than', 'trying', 'to', 'drain', 'the', 'channel,', 'I', 'would', 'recommend', 'keeping', 'track', 'of', 'timing.', 'On', 'your', 'reconnect', 'channel,', 'post', 'the', 'time.', 'When', 'finished', 'with', 'the', 'reconnect,', 'note', 'the', 'time.', 'While', 'consuming', 'the', 'reconnect', 'channel,', 'throw', 'away', 'any', 'messages', 'that', 'are', 'older', 'than', 'your', 'last', 'reconnect.', 'Another', 'more', 'lockstep', 'solution', 'to', 'achieve', 'this', 'is', 'to', 'make', 'the', 'reconnect', 'channel', 'a', 'bool.', 'Post', '""true""', 'to', 'reconnect.', 'When', 'the', 'reconnect', 'completes,', 'post', '""false"".', 'Then', 'consume', 'the', 'channel', 'until', 'you', 'find', '""false.""']"
379,26143596,"It sounds like instead of a reset channel, you want a reset goroutine.  It would have an input from the side sending the reset signal, and an output to the receiver.  When this goroutine receives a request to reconnect, it passes it to the receiver.  Then it waits to receive an acknowledgement back from the receiver on a third channel, throwing away any reconnect requests it receives in the meantime.  So 3 channels total, 1 input, 1 output, 1 ack.
","['It', 'sounds', 'like', 'instead', 'of', 'a', 'reset', 'channel,', 'you', 'want', 'a', 'reset', 'goroutine.', 'It', 'would', 'have', 'an', 'input', 'from', 'the', 'side', 'sending', 'the', 'reset', 'signal,', 'and', 'an', 'output', 'to', 'the', 'receiver.', 'When', 'this', 'goroutine', 'receives', 'a', 'request', 'to', 'reconnect,', 'it', 'passes', 'it', 'to', 'the', 'receiver.', 'Then', 'it', 'waits', 'to', 'receive', 'an', 'acknowledgement', 'back', 'from', 'the', 'receiver', 'on', 'a', 'third', 'channel,', 'throwing', 'away', 'any', 'reconnect', 'requests', 'it', 'receives', 'in', 'the', 'meantime.', 'So', '3', 'channels', 'total,', '1', 'input,', '1', 'output,', '1', 'ack.']"
380,26146146,"

The second approach is more efficient. The two approaches are listed on the useful SliceTricks page.
","['lines', '=', 'append', '(', 'lines', '[:', 'i', '],', 'append', '([]', 'string', '{', '""MY INSERTED TEXT HERE""', '},', 'lines', '[', 'i', ':]...)...)', 'or', 'lines', '=', 'append', '(', 'lines', ',', '""""', ')', 'copy', '(', 'lines', '[', 'i', '+', '1', ':],', 'lines', '[', 'i', ':])', 'lines', '[', 'i', ']', '=', '""MY INSERTED TEXT HERE""', 'The', 'second', 'approach', 'is', 'more', 'efficient.', 'The', 'two', 'approaches', 'are', 'listed', 'on', 'the', 'useful', 'SliceTricks', 'page.']"
381,26146150,"
","['If', 'you', 'want', 'to', 'do', 'this', 'with', 'a', 'slice,', 'you', 'can', 'insert', 'the', 'string', 'you', 'want', 'at', 'the', 'correct', 'index.', '//', 'make', 'the', 'slice', 'longer', 'lines', '=', 'append', '(', 'lines', ',', '""""', ')', '//', 'shift', 'each', 'element', 'back', 'copy', '(', 'lines', '[', 'i', '+', '1', ':],', 'lines', '[', 'i', ':])', '//', 'now', 'you', 'can', 'insert', 'the', 'new', 'line', 'at', 'i', 'lines', '[', 'i', ']', '=', 'x']"
382,26149656,"

playground
","['Another', 'approach', 'is', 'using', 'sync.Cond', 'and', 'atomic,', 'something', 'along', 'the', 'lines', 'of:', 'type', 'Server', 'struct', '{', 's', 'chan', 'int', 'r', 'chan', 'int', 'c', '*', 'sync', '.', 'Cond', 'state', 'uint32', '}', 'const', '(', 'sNormal', '=', '0', 'sQuitting', '=', '1', 'sReconnecting', '=', '2', ')', 'func', 'New', '()', '*', 'Server', '{', 's', ':=', '&', 'Server', '{', 's', ':', 'make', '(', 'chan', 'int', '),', 'r', ':', 'make', '(', 'chan', 'int', '),', 'c', ':', 'sync.NewCond(&sync.Mutex{})', ',', '}', 'go', 's.sender()', '//', 'go', 's.receiver()', 'return', 's', '}', 'func', '(', 's', '*', 'Server', ')', 'sender', '()', '{', '//', 'for', '{', 'select', '{', 'case', 'data', ':=', '<-', 's', '.', 's', ':', '//', 'do', 'stuff', 'with', 'data', 'default', ':', 's', '.', 'c', '.', 'L.Lock()', 'L', ':', 'for', '{', 'switch', 'atomic.LoadUint32(&s.state)', '{', 'case', 'sNormal', ':', 'break', 'L', 'case', 'sReconnecting', ':', 'case', 'sQuitting', ':', 's', '.', 'c', '.', 'L.Unlock()', 'return', '}', 's', '.', 'c.Wait()', '}', 's', '.', 'c', '.', 'L.Unlock()', '}', '}', '}', '//', 'repeat', 'for', 'receiver', 'func', '(', 's', '*', 'Server', ')', 'Reconnect', '()', '{', 'var', 'cannotReconnect', 'bool', 'atomic.StoreUint32(&s.state, sReconnecting)', '//', 'keep', 'trying', 'to', 'reconnect', 'if', 'cannotReconnect', '{', 'atomic.StoreUint32(&s.state, sQuitting)', '}', 'else', '{', 'atomic.StoreUint32(&s.state, sNormal)', '}', 's', '.', 'c.Broadcast()', '}', 'playground']"
383,26150590,"
","['for', '{', 'value', ',', '_', ':=', 'FuncX', '()', 'if', 'value', '==', '0', '{', 'break', '}', '}']"
384,26150621,"
","['You', 'can', 'use', 'a', 'loop', 'like:', 'value', ',', '_', ':=', 'FuncX', '()', 'for', 'value', '==', '0', '{', 'value', ',', '_', '=', 'FuncX', '()', '// note using the = not :=', '}']"
385,26150953,"

If you need line or err outside the loop you just predeclare them and replace the := with =.
","['A', 'more', 'complex', 'loop', 'header', 'than', 'others', 'have', 'offered,', 'although', 'having', 'nothing', 'in', 'the', 'loop', 'body', 'may', 'trigger', 'coder', 'OCD.', 'for', 'value', ',', '_', ':=', 'FuncX', '();', 'value', '!=', '0', ';', 'value', ',', '_', '=', 'FuncX', '()', '{', '}', 'In', 'fact,', 'this', 'is', 'usually', 'how', 'I', 'read', 'files', 'line', 'by', 'line', 'in', 'Go', '//', 'Assume', 'we', 'have', 'some', 'bufio.Reader', 'named', 'buf', 'already', 'created', 'for', 'line', ',', 'err', ':=', ""buf.ReadString('\\n'); err == nil; line,err = buf.ReadString('\\n')"", '{', '//', 'Do', 'stuff', 'with', 'the', 'line.', '}', 'If', 'you', 'need', 'line', 'or', 'err', 'outside', 'the', 'loop', 'you', 'just', 'predeclare', 'them', 'and', 'replace', 'the', ':=', 'with', '=.']"
386,26185296,"

// edit

Also @elithrar made a very valid point in comments, so keep it in mind:


  Also note that restarting your application means that it cannot read existing sessions (as new keys are generated every time) when using this method. 

","['From', 'the', 'documentation', 'you', 'linked:', '//', 'It', 'is', 'recommended', 'to', 'use', 'an', 'authentication', 'key', 'with', '32', 'or', '64', 'bytes.', '//', 'The', 'encryption', 'key,', 'if', 'set,', 'must', 'be', 'either', '16,', '24,', 'or', '32', 'bytes', 'to', 'select', 'AES-128,', 'AES-192,', 'or', 'AES-256', 'modes.', 'So', 'you', 'could', 'use', 'something', 'like', 'this:', '//', 'replace', '16', 'with', '24', 'for', '192bit', 'or', '32', 'for', '256bit.', 'var', 'store', '=', 'sessions.NewCookieStore(securecookie.GenerateRandomKey(16)', ',', 'securecookie.GenerateRandomKey(16))', '//', 'edit', 'Also', '@elithrar', 'made', 'a', 'very', 'valid', 'point', 'in', 'comments,', 'so', 'keep', 'it', 'in', 'mind:', 'Also', 'note', 'that', 'restarting', 'your', 'application', 'means', 'that', 'it', 'cannot', 'read', 'existing', 'sessions', '(as', 'new', 'keys', 'are', 'generated', 'every', 'time)', 'when', 'using', 'this', 'method.']"
387,26223739,"
","['The', 'answers', 'above', 'neglect', 'to', 'check', 'if', ""user's"", 'IP', 'is', 'forwarded', 'by', 'a', 'proxy.', 'In', 'a', 'lot', 'of', 'cases,', 'the', 'IP', 'that', 'you', 'will', 'find', 'in', 'the', 'RemoteAddr', 'is', 'the', 'IP', 'of', 'a', 'proxy', 'that', 'is', 'forwarding', 'the', ""user's"", 'request', 'to', 'you', '-', 'not', 'the', ""user's"", 'IP', 'address!', 'A', 'more', 'accurate', 'solution', 'would', 'look', 'like', 'this:', 'package', 'main', 'import', '(', '""net""', '""net/http""', ')', 'func', 'GetIP', '(', 'r', '*', 'http', '.', 'Request', ')', 'string', '{', 'if', 'ipProxy', ':=', 'r', '.', 'Header.Get(""X-FORWARDED-FOR""); len(ipProxy)', '>', '0', '{', 'return', 'ipProxy', '}', 'ip', ',', '_', ',', '_', ':=', 'net.SplitHostPort(r.RemoteAddr)', 'return', 'ip', '}']"
388,26299816,"
","['In', 'Your', 'router', 'You', 'should', 'serve', 'index.html', 'to', 'all', 'undefined', 'elsewhere', 'URLs.', 'In', 'mux', 'package', 'there', 'is', 'helpful', 'handler:', 'http://www.gorillatoolkit.org/pkg/mux#Router', '-', 'look', 'at', 'NotFoundHandler', 'You', 'can', 'use', 'it,', 'to', 'handle', 'all', ""404's"", 'and', 'serve', 'index.html', 'instead:', 'func', 'main', '()', '{', 'r', ':=', 'mux.NewRouter()', 'r.HandleFunc(""/foo"", fooHandler)', 'r', '.', 'NotFoundHandler', '=', 'http.HandlerFunc(notFound)', 'http.Handle(""/"", r)', '}', 'and', 'define', 'notFound', 'function:', 'func', 'notFound', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'http.ServeFile(w, r, ""static/index.html"")', '}']"
389,26332619,"There are only 2 ways to do that currently:


use swig, the official example is in $GOROOT/misc/swig/callback.
Write hand-made wrapper like you'd do for any other language that doesn't support C++.

","['There', 'are', 'only', '2', 'ways', 'to', 'do', 'that', 'currently:', 'use', 'swig,', 'the', 'official', 'example', 'is', 'in', '$GOROOT/misc/swig/callback.', 'Write', 'hand-made', 'wrapper', 'like', ""you'd"", 'do', 'for', 'any', 'other', 'language', 'that', ""doesn't"", 'support', 'C++.']"
390,26415155,"

Try it in the playground: http://play.golang.org/p/MK-UECa9AV

The s flag tells the parser to let . match a new line.
","['You', 'need', 'to', 'tell', 'it', 'to', 'match', 'against', 'new', 'lines', '..', 'by', 'specifying', 'the', 's', 'flag:', 'r', ':=', 'regexp.MustCompile(`(?s)(.)`)', 'Try', 'it', 'in', 'the', 'playground:', 'http://play.golang.org/p/MK-UECa9AV', 'The', 's', 'flag', 'tells', 'the', 'parser', 'to', 'let', '.', 'match', 'a', 'new', 'line.']"
391,26457906,"
","['@troq', ""I'm"", 'a', 'little', 'late', 'to', 'the', 'party', 'but', ""I'd"", 'say', 'the', 'answer', 'is', 'yes', 'and', 'no.', 'As', '@gnibbler', 'pointed', 'out,', 'CPython', 'is', 'slower', 'in', 'the', 'simple', 'implementation', 'but', 'pypy', 'is', 'jit', 'compiled', 'for', 'much', 'faster', 'code', 'when', 'you', 'need', 'it.', 'If', ""you're"", 'doing', 'numeric', 'processing', 'with', 'CPython', 'most', 'will', 'do', 'it', 'with', 'numpy', 'resulting', 'in', 'fast', 'operations', 'on', 'arrays', 'and', 'matrices.', 'Recently', ""I've"", 'been', 'doing', 'a', 'lot', 'with', 'numba', 'which', 'allows', 'you', 'to', 'add', 'a', 'simple', 'wrapper', 'to', 'your', 'code.', 'For', 'this', 'one', 'I', 'just', 'added', '@njit', 'to', 'a', 'function', 'incALot()', 'which', 'runs', 'your', 'code', 'above.', 'On', 'my', 'machine', 'CPython', 'takes', '61', 'seconds,', 'but', 'with', 'the', 'numba', 'wrapper', 'it', 'takes', '7.2', 'microseconds', 'which', 'will', 'be', 'similar', 'to', 'C', 'and', 'maybe', 'faster', 'than', 'Go.', 'Thats', 'an', '8', 'million', 'times', 'speedup.', 'So,', 'in', 'Python,', 'if', 'things', 'with', 'numbers', 'seem', 'a', 'bit', 'slow,', 'there', 'are', 'tools', 'to', 'address', 'it', '-', 'and', 'you', 'still', 'get', ""Python's"", 'programmer', 'productivity', 'and', 'the', 'REPL.', 'def', 'incALot', '(', 'y', '):', 'x', '=', '0', 'while', 'x', '<', 'y', ':', 'x', '+=', '1', 'njit', '(', ""'i8(i8)'"", ')', 'def', 'nbIncALot', '(', 'y', '):', 'x', '=', '0', 'while', 'x', '<', 'y', ':', 'x', '+=', '1', 'return', 'x', 'size', '=', '1000000000', 'start', '=', 'time.time()', 'incALot', '(', 'size', ')', 't1', '=', 'time.time()', '-', 'start', 'start', '=', 'time.time()', 'x', '=', 'nbIncALot', '(', 'size', ')', 't2', '=', 'time.time()', '-', 'start', 'print', '(', ""'CPython3 takes %.3fs, Numba takes %.9fs'"", '%(', 't1', ',', 't2', '))', 'print', '(', ""'Speedup is: %.1f'"", '%', '(', 't1/t2))', 'print', '(', ""'Just Checking:'"", ',', 'x', ')', 'CPython3', 'takes', '58', '.', '958', 's', ',', 'Numba', 'takes', '0', '.', '0', '0', '0', '0', '07153', 's', 'Speedup', 'is', ':', '8242982', '.', '2', 'Just', 'Checking', ':', '1000000000']"
392,26526822,"


You can still use append and slicing operations on values of MySliceType.
You can define methods on MySliceType.


You can't, however, monkeypatch []SomeType's methods.
","['You', 'can', 'define', 'a', 'slice', 'type:', 'type', 'MySliceType', '[]', 'SomeType', 'You', 'can', 'still', 'use', 'append', 'and', 'slicing', 'operations', 'on', 'values', 'of', 'MySliceType.', 'You', 'can', 'define', 'methods', 'on', 'MySliceType.', 'You', ""can't,"", 'however,', 'monkeypatch', ""[]SomeType's"", 'methods.']"
393,26546559,"go get  is the Go package manager. It works in a completely decentralized way and how package discovery still possible without a central package hosting repository.

Besides locating and downloading packages, the other big role of a package manager is handling multiple versions of the same package. Go takes the most minimal and pragmatic approach of any package manager. There is no such thing as multiple versions of a Go package.

go get always pulls from the HEAD of the default branch in the repository. Always. This has two important implications:


As a package author, you must adhere to the stable HEAD philosophy. Your default branch must always be the stable, released version of your package. You must do work in feature branches and only merge when ready to release.
New major versions of your package must have their own repository. Put simply, each major version of your package (following semantic versioning) would have its own repository and thus its own import path.

e.g. github.com/jpoehls/gophermail-v1 and github.com/jpoehls/gophermail-v2.


As someone building an application in Go, the above philosophy really doesn't have a downside. Every import path is a stable API. There are no version numbers to worry about. Awesome!

For more details  : http://zduck.com/2014/go-and-package-versioning/
","['go', 'get', 'is', 'the', 'Go', 'package', 'manager.', 'It', 'works', 'in', 'a', 'completely', 'decentralized', 'way', 'and', 'how', 'package', 'discovery', 'still', 'possible', 'without', 'a', 'central', 'package', 'hosting', 'repository.', 'Besides', 'locating', 'and', 'downloading', 'packages,', 'the', 'other', 'big', 'role', 'of', 'a', 'package', 'manager', 'is', 'handling', 'multiple', 'versions', 'of', 'the', 'same', 'package.', 'Go', 'takes', 'the', 'most', 'minimal', 'and', 'pragmatic', 'approach', 'of', 'any', 'package', 'manager.', 'There', 'is', 'no', 'such', 'thing', 'as', 'multiple', 'versions', 'of', 'a', 'Go', 'package.', 'go', 'get', 'always', 'pulls', 'from', 'the', 'HEAD', 'of', 'the', 'default', 'branch', 'in', 'the', 'repository.', 'Always.', 'This', 'has', 'two', 'important', 'implications:', 'As', 'a', 'package', 'author,', 'you', 'must', 'adhere', 'to', 'the', 'stable', 'HEAD', 'philosophy.', 'Your', 'default', 'branch', 'must', 'always', 'be', 'the', 'stable,', 'released', 'version', 'of', 'your', 'package.', 'You', 'must', 'do', 'work', 'in', 'feature', 'branches', 'and', 'only', 'merge', 'when', 'ready', 'to', 'release.', 'New', 'major', 'versions', 'of', 'your', 'package', 'must', 'have', 'their', 'own', 'repository.', 'Put', 'simply,', 'each', 'major', 'version', 'of', 'your', 'package', '(following', 'semantic', 'versioning)', 'would', 'have', 'its', 'own', 'repository', 'and', 'thus', 'its', 'own', 'import', 'path.', 'e.g.', 'github.com/jpoehls/gophermail-v1', 'and', 'github.com/jpoehls/gophermail-v2.', 'As', 'someone', 'building', 'an', 'application', 'in', 'Go,', 'the', 'above', 'philosophy', 'really', ""doesn't"", 'have', 'a', 'downside.', 'Every', 'import', 'path', 'is', 'a', 'stable', 'API.', 'There', 'are', 'no', 'version', 'numbers', 'to', 'worry', 'about.', 'Awesome!', 'For', 'more', 'details', ':', 'http://zduck.com/2014/go-and-package-versioning/']"
394,26573513,"
","['The', 'problem', 'is', 'that', 'router.PathPrefix(""/"").Handler(fs)', 'will', 'match', 'every', 'route', 'and', 'the', 'NotFoundHandler', 'is', 'never', 'executed.', 'The', 'NotFoundHandler', 'is', 'only', 'executed', 'when', 'the', 'router', ""can't"", 'find', 'a', 'matching', 'route.', 'When', 'you', 'explicitly', 'define', 'your', 'routes', 'it', 'works', 'as', 'expected.', 'You', 'could', 'do', 'something', 'like:', 'router.Handle(""/foo"", fooHandler())', 'router.PathPrefix(""/assets"").Handler(fs)', 'router.HandleFunc(""/"", index)', 'router.HandleFunc(""/about"", about)', 'router.HandleFunc(""/contact"", contact)', 'router', '.', 'NotFoundHandler', '=', 'http.HandlerFunc(notFound)']"
395,26580721,"It looks like user.Current() ultimately calls getuid from libc, does he have it installed? Is it the 64 bit rpm? 
","['It', 'looks', 'like', 'user.Current()', 'ultimately', 'calls', 'getuid', 'from', 'libc,', 'does', 'he', 'have', 'it', 'installed?', 'Is', 'it', 'the', '64', 'bit', 'rpm?']"
396,26610702,"
","['There', 'is', 'an', 'open', 'issue', 'related', 'to', 'it.', 'As', 'a', 'temporary', 'workaround,', 'I', 'am', 'running', 'sed', 'in', 'between', 'collecting', 'and', 'visualizing', 'the', 'coverage', 'results.', 'go', 'app', 'test', '-', 'cover', '-', 'test', '.', 'v', '=', 'true', '-', 'test', '.', 'coverprofile', '=', 'c', '.', 'out', 'sed', '-', 'i', '-', 'e', '""s#.*/\\(.*\\.go\\)#\\./\\\\1#""', 'c', '.', 'out', 'go', 'app', 'tool', 'cover', '-', 'html', 'c', '.', 'out', '-', 'o', 'coverage', '.', 'html']"
397,26647875,"The code of your static lib isn't really obfuscated: see ""What about protection for Golang source code"".

But you wouldn't be able to get back the exact Go code from the binary, so in that respect, you have ""some"" protection.
","['The', 'code', 'of', 'your', 'static', 'lib', ""isn't"", 'really', 'obfuscated:', 'see', '""What', 'about', 'protection', 'for', 'Golang', 'source', 'code"".', 'But', 'you', ""wouldn't"", 'be', 'able', 'to', 'get', 'back', 'the', 'exact', 'Go', 'code', 'from', 'the', 'binary,', 'so', 'in', 'that', 'respect,', 'you', 'have', '""some""', 'protection.']"
398,26771938,"

you can see an asynchronous log system i have made for a complete example: https://github.com/sescobb27/ciudad-gourmet/blob/master/services/log_service.go
","['You', 'can', 'do', 'this', 'using', 'channels,', 'here', 'is', 'my', 'approach', 'type', 'InfoLog', 'struct', '{', 'InfoChan', 'chan', 'string', 'CloseChan', 'chan', 'struct', '{}', '//empty signal', 'log', '*', 'log', '.', 'Logger', 'file', '*', 'os', '.', 'File', '}', 'func', 'NewInfoLog', '(', 'file', '*', 'os', '.', 'File', ')', '*', 'InfoLog', '{', 'return', '&', 'InfoLog', '{', 'InfoChan', ':', 'make', '(', 'chan', 'string', '),', 'CloseChan', ':', 'make', '(', 'chan', 'struct', '{}),', 'log', ':', 'log.New(file, ""TAG"", log.Ldate|log.Ltime)', ',', 'file', ':', 'file', ',', '}', '}', 'func', '(', 'i', '*', 'InfoLog', ')', 'listen', '()', '{', 'for', '{', 'select', '{', 'case', 'infoMsg', ':=', '<-', 'i', '.', 'InfoChan', ':', 'i', '.', 'log.Println(infoMsg)', 'case', '<-', 'i', '.', 'CloseChan', ':', 'i', '.', 'file.Close()', 'close', '(', 'i', '.', 'InfoChan', ')', '}', '}', '}', 'then', 'in', 'main', 'func', 'main', '()', '{', 'infoLog', ':=', 'NewInfoLog', '(', 'ANY_OPEN_FILE_HERE', ')', 'go', 'infoLog.listen()', 'infoLog', '.', 'InfoChan', '<-', '""msg""', 'infoLog', '.', 'InfoChan', '<-', '""msg""', 'infoLog', '.', 'InfoChan', '<-', '""msg""', 'infoLog', '.', 'CloseChan', '<-', 'struct', '{}{}', '//', 'exits', 'normaly', '}', 'you', 'can', 'see', 'an', 'asynchronous', 'log', 'system', 'i', 'have', 'made', 'for', 'a', 'complete', 'example:', 'https://github.com/sescobb27/ciudad-gourmet/blob/master/services/log_service.go']"
399,26810553,"This is a bug in fedora: Bug 1135152

If you compile the Go program using gccgo, rather than golang it will work.
","['you', 'can', 'see', 'an', 'asynchronous', 'log', 'system', 'i', 'have', 'made', 'for', 'a', 'complete', 'example:', 'https://github.com/sescobb27/ciudad-gourmet/blob/master/services/log_service.go']"
400,26832241,"go get does not not display anything while downloading and installing libraries. So as long as you are connected to the internet just wait. If there are troubles connecting to the server it will display an error.

Depending on your platform: Check if you have installed git and hg.
","['you', 'can', 'see', 'an', 'asynchronous', 'log', 'system', 'i', 'have', 'made', 'for', 'a', 'complete', 'example:', 'https://github.com/sescobb27/ciudad-gourmet/blob/master/services/log_service.go']"
401,26832979,"

will not not work with git version < 1.7.9.5. 
The trick is to upgrade your git version. I upgraded my git version to 1.7.12.4 and it works.
","['I', 'hope', 'this', 'will', 'help', 'others.', 'I', 'spent', 'almost', '3', 'hours', 'figuring', 'this', 'out.', 'Apparently,', '[', 'developer', 'machine', 'go', 'code', ']$', 'go', 'get', 'go', 'pkg', '.', 'in/wantedpackage', 'will', 'not', 'not', 'work', 'with', 'git', 'version', '<', '1.7.9.5.', 'The', 'trick', 'is', 'to', 'upgrade', 'your', 'git', 'version.', 'I', 'upgraded', 'my', 'git', 'version', 'to', '1.7.12.4', 'and', 'it', 'works.']"
402,26889480,"As of now, the encoding/gob package doesn't work with recursive values:


  Recursive types work fine, but recursive values (data with cycles) are problematic. This may change.


Until this is changed, you'll have to either not use cyclic data, or use a different approach to serialisation.
","['will', 'not', 'not', 'work', 'with', 'git', 'version', '<', '1.7.9.5.', 'The', 'trick', 'is', 'to', 'upgrade', 'your', 'git', 'version.', 'I', 'upgraded', 'my', 'git', 'version', 'to', '1.7.12.4', 'and', 'it', 'works.']"
403,26906705,"
","['Running', 'the', 'benchmark', 'with', 'the', '-m', 'gcflag', 'gives', 'the', 'possible', 'answer:', './', 'main_test', '.', 'go', ':', '16', ':', 'BenchmarkWithoutPointer', '[]', 'int', 'literal', 'does', 'not', 'escape', '(...)', './', 'main_test', '.', 'go', ':', '25', ':', '[]', 'int', 'literal', 'escapes', 'to', 'heap', 'Your', '[]int', 'in', 'the', 'second', 'example', 'escapes', 'to', 'heap,', 'which', 'is', 'slower', 'than', 'stack.', 'If', 'you', 'use', 'separate', 'x', 'and', 'y', 'fields', 'for', 'your', 'arguments', 'instead', 'of', 'a', 'slice', 'type', 'Adder', 'struct', '{', 'x', ',', 'y', 'int', '}', 'func', '(', 'a', '*', 'Adder', ')', 'add', '()', 'int', '{', 'return', 'a', '.', 'x', '+', 'a', '.', 'y', '}', 'the', 'benchmark', 'shows', 'the', 'expected', 'behaviour:', 'BenchmarkWithoutPointer', '1000000000', '2', '.', '27', 'ns/op', 'BenchmarkWithPointer', '2000000000', '1', '.', '98', 'ns/op']"
404,26909828,"
","['I', 'think', 'you', 'should', 'create', 'the', 'Child', 'outside', 'of', 'the', 'Add', 'method', 'and', 'pass', 'it', 'in.', 'If', 'you', 'want', 'to', 'manipulate', 'the', 'Child,', 'do', 'that', 'before', 'you', 'passed', 'it', 'in.', 'You', 'might', 'use', 'methods', 'on', 'the', 'Child', 'struct', 'to', 'do', 'that:', 'func', '(', 'c', '*', 'Child', ')', 'Init', '(', 'fn1', 'func', '(),', 'fn2', 'func', '())', '{', 'c', '.', 'Status', '=', '""1""', '...', '}', 'func', '(', 'p', '*', 'Parent', ')', 'Add', '(', 'c', '*', 'Child', ')', '*', 'Child', '{', 'p', '.', 'Children', '=', 'append', '(', 'p', '.', 'Children', ',', 'c', ')', 'return', 'c', '}', 'func', 'main', '()', '{', 'var', 'p', 'Parent', 'var', 'child', 'Child', 'child.Init(...)', '// <- pass something in there...', 'p.Add(&child)', 'child', '.', 'Status', '=', '""2""', 'fmt.Println(p)', 'fmt.Println(child)', '}']"
405,26909891,"

The decision on whether to keep your labels exported, or hide them and provide getters/setters is up to you, and depends solely on your system's design and consistency requirements.
","[""I'd"", 'suggest', 'doing', 'this', 'in', 'the', 'simplest', 'way', 'possible.', 'Remember', 'the', 'KISS', 'principle.', 'One', 'part', 'of', 'the', 'system', 'does', 'one', 'and', 'only', 'one', 'thing.', 'Following', 'this', 'logic,', 'your', 'Add(c', '*Child)', 'method', 'should', 'only', 'add', 'a', 'child.', 'Creating', 'a', 'Child', 'should', 'be', 'done', 'separately,', 'same', 'for', 'giving', 'a', 'Child', 'some', 'unique', 'properties.', 'For', 'your', 'OpenGL', 'menu', 'system,', 'this', 'approach', 'fits', 'nicely', 'as', 'well:', 'm', ':=', 'NewMenu', '()', 't', ':=', 'NewText', '(', 'text', ')', 't', '.', 'OnClick', '=', 'someCallback', '//', 'Some', 'other', 't', 'initialisation.', 'm.Add(t)', '//', 'Some', 'time', 'later', 'you', 'can', 'still', 'change', 't', 'if', ""it's"", 'a', 'pointer', 'and', 'm.Add', '//', ""doesn't"", 'copy.', 't', '.', 'OnHover', '=', 'someOtherCallback', 'The', 'decision', 'on', 'whether', 'to', 'keep', 'your', 'labels', 'exported,', 'or', 'hide', 'them', 'and', 'provide', 'getters/setters', 'is', 'up', 'to', 'you,', 'and', 'depends', 'solely', 'on', 'your', ""system's"", 'design', 'and', 'consistency', 'requirements.']"
406,26921970,"
","['Ok', 'the', 'following', 'works', 'for', 'me.', 'The', 'code', 'is', 'changed', 'again', 'to', 'try', 'to', 'focus', 'more', 'clearly', 'on', 'the', 'particular', 'issue', 'I', 'was', 'having.', 'It', 'all', 'comes', 'down', 'to', 'properly', 'using', 'pointers.', 'Thanks', 'for', 'the', 'suggestions.', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'HairColor', 'func', '()', 'string', 'type', 'Parent', 'struct', '{', 'Children', '[]*', 'Child', '}', 'type', 'Child', 'struct', '{', 'Age', 'int', 'ShowHairColor', 'HairColor', '}', 'func', '(', 'p', '*', 'Parent', ')', 'Add', '(', 'c', '*', 'Child', ')', '{', 'p', '.', 'Children', '=', 'append', '(', 'p', '.', 'Children', ',', 'c', ')', '}', 'func', 'main', '()', '{', 'var', 'parent', 'Parent', 'var', 'child', 'Child', 'child', '.', 'Age', '=', '10', 'parent.Add(&child)', 'child', '.', 'ShowHairColor', '=', 'func', '()', 'string', '{', 'return', '""red""', '}', 'fmt.Printf(""%v\\n"", parent.Children[0])', 'fmt.Printf(""%v\\n"", child)', 'fmt.Println(parent.Children[0].ShowHairColor())', '}']"
407,26939091,"
","['Here', 'is', 'a', 'function', 'that', 'takes', 'an', 'integer', 'and', 'grouping', 'separator', 'and', 'returns', 'a', 'string', 'delimited', 'with', 'the', 'specified', 'separator.', 'I', 'have', 'tried', 'to', 'optimize', 'for', 'efficiency,', 'no', 'string', 'concatenation', 'or', 'mod/division', 'in', 'the', 'tight', 'loop.', 'From', 'my', 'profiling', 'it', 'is', 'more', 'than', 'twice', 'as', 'fast', 'as', 'the', 'humanize.Commas', 'implementation', '(~680ns', 'vs', '1642ns)', 'on', 'my', 'Mac.', 'I', 'am', 'new', 'to', 'Go,', 'would', 'love', 'to', 'see', 'faster', 'implementations!', 'Usage:', 's', ':=', 'NumberToString(n', 'int,', 'sep', 'rune)', 'Examples', 'Illustrates', 'using', 'different', 'separator', ""(','"", 'vs', ""'"", ""'),"", 'verified', 'with', 'int', 'value', 'range.', 's:=', 'NumberToString(12345678,', ""',')"", '=>', '""12,345,678""', 's:=', 'NumberToString(12345678,', ""'"", ""')"", '=>', '""12', '345', '678""', 's:', '=', 'NumberToString(-9223372036854775807,', ""',')"", '=>', '""-9,223,372,036,854,775,807""', 'Function', 'Implementation', 'func', 'NumberToString', '(', 'n', 'int', ',', 'sep', 'rune', ')', 'string', '{', 's', ':=', 'strconv.Itoa(n)', 'startOffset', ':=', '0', 'var', 'buff', 'bytes', '.', 'Buffer', 'if', 'n', '<', '0', '{', 'startOffset', '=', '1', ""buff.WriteByte('-')"", '}', 'l', ':=', 'len', '(', 's', ')', 'commaIndex', ':=', '3', '-', '((', 'l', '-', 'startOffset', ')', '%', '3', ')', 'if', '(', 'commaIndex', '==', '3', ')', '{', 'commaIndex', '=', '0', '}', 'for', 'i', ':=', 'startOffset', ';', 'i', '<', 'l', ';', 'i', '++', '{', 'if', '(', 'commaIndex', '==', '3', ')', '{', 'buff.WriteRune(sep)', 'commaIndex', '=', '0', '}', 'commaIndex', '++', 'buff.WriteByte(s[i])', '}', 'return', 'buff.String()', '}']"
408,26960404,"Just pass a pointer to your struct and not its value to the function. The pointer is still interface{} but a pointer to the interface is meaningless. 
",[]
409,26966454,"
","['It', 'sounds', 'like', 'you', 'want', 'to', 'send', 'non-pointer', 'values', 'over', 'a', 'chan', 'interface{}', 'and', 'have', 'a', 'custom', 'MarshalJSON', 'method', 'work', 'as', 'expected.', 'In', 'that', 'case,', 'just', ""don't"", 'define', 'the', 'method', 'on', 'the', 'pointer', 'type.', 'See', 'here', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', '""log""', '""time""', ')', 'func', 'printer', '(', 'in', 'chan', 'interface', '{})', '{', 'for', 'val', ':=', 'range', 'in', '{', 'buf', ',', 'err', ':=', 'json.Marshal(val)', 'if', 'err', '!=', 'nil', '{', 'log.Println(err.Error())', '}', 'log.Println(string(buf))', '}', '}', 'type', 'MyType', 'struct', '{', 'name', 'string', '}', 'func', '(', 'm', 'MyType', ')', 'MarshalJSON', '()', '([]', 'byte', ',', 'error', ')', '{', 'return', '[]', 'byte', '(', 'fmt.Sprintf(`""%s""`, m.name))', ',', 'nil', '}', 'func', 'main', '()', '{', 'ch', ':=', 'make', '(', 'chan', 'interface', '{})', 'go', 'printer', '(', 'ch', ')', 'ch', '<-', '""string value""', 'ch', '<-', '25', 'ch', '<-', 'MyType', '{', 'name', ':', '""foo""', ',', '}', 'time.Sleep(time.Second)', '}', 'The', 'only', 'real', 'difference', 'is', 'the', 'method', 'receiver.', 'func', '(', 'm', 'MyType', ')', 'MarshalJSON', '([]', 'byte', ',', 'error', ')', 'instead', 'of', 'func', '(', 'm', '*', 'MyType', ')', 'MarshalJSON', '([]', 'byte', ',', 'error', ')']"
410,27098764,"

Playground
","[""I'd"", 'recommend', 'defining', 'setter', 'and', 'getter', 'methods', 'on', 'the', 'type,', 'and', 'store', 'the', 'values', 'in', 'a', 'slice', 'in', 'the', 'struct.', 'For', 'example:', 'package', 'main', 'import', '""fmt""', 'type', 'kv', 'struct', '{', 'k', ',', 'v', 'string', '}', 'type', 'mybasket', 'struct', '{', 'Coupons', 'string', 'Amount', 'int', 'Contents', '[]', 'kv', '}', 'func', '(', 't', '*', 'mybasket', ')', 'SetContents', '(', 'c', '...', 'kv', ')', '{', 't', '.', 'Contents', '=', 'c', 'return', '}', 'func', '(', 't', '*', 'mybasket', ')', 'GetContents', '()', '[]', 'kv', '{', 'return', 't', '.', 'Contents', '}', 'func', 'main', '()', '{', 'T', ':=', '&', 'mybasket', '{', '""couponlist""', ',', '100', ',', '[]', 'kv', '{}}', '// New Basket', 'kvs', ':=', '[]', 'kv', '{{', '""foo""', ',', '""bar""', '},', '{', '""baz""', ',', '""bat""', '}}', '// Contents', 'T.SetContents(kvs...)', '// Set Contents', 'fmt.Printf(""%v"", T.GetContents())', '// Get Contents', '}', 'Prints:', '[{', 'foo', 'bar', '}', '{', 'baz', 'bat', '}]', 'Playground']"
411,27140645,"

This aspect of the API is quirky and not very obvious. The API made more sense in the early days when the template package had the additional Set type
","['Create', 'a', 'dummy', 'template,', 'set', 'the', 'delimiters', 'and', 'then', 'parse', 'the', 'files:', 'tmpl', ',', 'err', ':=', 'template.New("""").Delims(""[["", ""]]"").ParseFiles(""base.tmpl"", ""homepage/inner.tmpl"")', 'This', 'aspect', 'of', 'the', 'API', 'is', 'quirky', 'and', 'not', 'very', 'obvious.', 'The', 'API', 'made', 'more', 'sense', 'in', 'the', 'early', 'days', 'when', 'the', 'template', 'package', 'had', 'the', 'additional', 'Set', 'type']"
412,27165762,"The Go Authors actually (2014/11) added webp to their additional go ""image"" repo (bmp/tiff/webP) here:

https://github.com/golang/image

EDIT: Obviously the repo does not contain any webp encoder / seems to be the reader - only.

(Haven't tested the webp code so far. Maybe leave some more time 4 testing before using in production.)
","['The', 'Go', 'Authors', 'actually', '(2014/11)', 'added', 'webp', 'to', 'their', 'additional', 'go', '""image""', 'repo', '(bmp/tiff/webP)', 'here:', 'https://github.com/golang/image', 'EDIT:', 'Obviously', 'the', 'repo', 'does', 'not', 'contain', 'any', 'webp', 'encoder', '/', 'seems', 'to', 'be', 'the', 'reader', '-', 'only.', ""(Haven't"", 'tested', 'the', 'webp', 'code', 'so', 'far.', 'Maybe', 'leave', 'some', 'more', 'time', '4', 'testing', 'before', 'using', 'in', 'production.)']"
413,27187685,", presented in this article:


  throttled, a Go package that implements various strategies to control access to HTTP handlers.
  Out-of-the-box, it supports rate-limiting of requests, constant interval flow of requests and memory usage thresholds to grant or deny access, but it also provides mechanisms to extend its functionality.


The rate limit isn't exactly what you need, but can give a good idea for implementing a similar feature. 
","['You', 'could', 'check', 'out', 'the', 'implementation', 'of', 'PuerkitoBio/throttled', ',', 'presented', 'in', 'this', 'article:', 'throttled,', 'a', 'Go', 'package', 'that', 'implements', 'various', 'strategies', 'to', 'control', 'access', 'to', 'HTTP', 'handlers.', 'Out-of-the-box,', 'it', 'supports', 'rate-limiting', 'of', 'requests,', 'constant', 'interval', 'flow', 'of', 'requests', 'and', 'memory', 'usage', 'thresholds', 'to', 'grant', 'or', 'deny', 'access,', 'but', 'it', 'also', 'provides', 'mechanisms', 'to', 'extend', 'its', 'functionality.', 'The', 'rate', 'limit', ""isn't"", 'exactly', 'what', 'you', 'need,', 'but', 'can', 'give', 'a', 'good', 'idea', 'for', 'implementing', 'a', 'similar', 'feature.']"
414,27190130,"
","[""There's"", 'a', 'token', 'bucket', 'algorithm', 'that', 'can', 'be', 'helpful', 'to', 'implement', 'such', 'the', 'rate', 'limit.', 'I', 'found', 'an', 'example', 'implementation,', 'which', 'you', 'can', 'use:', 'https://github.com/juju/ratelimit', 'package', 'main', 'import', '(', '""bytes""', '""fmt""', '""io""', '""time""', '""github.com/juju/ratelimit""', ')', 'func', 'main', '()', '{', '//', 'Source', 'holding', '1MB', 'src', ':=', 'bytes.NewReader(make([]byte, 1024*1024))', '//', 'Destination', 'dst', ':=', '&', 'bytes', '.', 'Buffer', '{}', '//', 'Bucket', 'adding', '100KB', 'every', 'second,', 'holding', 'max', '100KB', 'bucket', ':=', 'ratelimit.NewBucketWithRate(100*1024, 100*1024)', 'start', ':=', 'time.Now()', '//', 'Copy', 'source', 'to', 'destination,', 'but', 'wrap', 'our', 'reader', 'with', 'rate', 'limited', 'one', 'io.Copy(dst, ratelimit.Reader(src, bucket))', 'fmt.Printf(""Copied %d bytes in %s\\n"", dst.Len(), time.Since(start))', '}', 'After', 'running', 'it,', 'the', 'output', 'is:', 'Copied', '1048576', 'bytes', 'in', '9', '.', '239607694', 's', 'You', 'can', 'use', 'different', 'bucket', 'implementations', 'to', 'provide', 'desired', 'behaviour.', 'In', 'your', 'code,', 'after', 'setting', 'up', 'right', 'token', 'bucket,', 'you', 'would', 'call:', '_', ',', 'err', '=', 'io.Copy(out, ratelimit.Reader(file, bucket))']"
415,27201340,"If depends on the format you will chose for the serialization.

One well-suited for over-the-network communication is MessagePack (an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it's faster and smaller)

A Go library like philhofer/msgp can serializaze any struct (like one with a map), including composite types like maps and arrays.

However, it uses Go1.4 go generate command. (go 1.4rc1 is already out)

From there, a library like docker/libchan can help: Libchan is an ultra-lightweight networking library which lets network services communicate in the same way that goroutines communicate using channels. 
",[]
416,27211124,"

In this context not equal to performs the same function as xor: the statement can only be true if one of the booleans is true and one is false.
","['With', 'booleans', 'an', 'xor', 'is', 'simply:', 'if', 'boolA', '!=', 'boolB', '{', '}', 'In', 'this', 'context', 'not', 'equal', 'to', 'performs', 'the', 'same', 'function', 'as', 'xor:', 'the', 'statement', 'can', 'only', 'be', 'true', 'if', 'one', 'of', 'the', 'booleans', 'is', 'true', 'and', 'one', 'is', 'false.']"
417,27214494,". The default rate is 100%, meaning for programs that make lots of small allocations and hold lots of RAM, the overhead can be huge. I had an HTTP cache take up over 200% the cache size once. Try tuning the percentage to somewhere around 10% and see if it helps.
","[""I'm"", 'not', 'sure', 'that', 'this', 'is', 'your', 'problem,', 'although', 'reading', 'your', 'code', 'it', 'seems', ""you're"", 'not', 'leaking', 'anything', '-', 'but', 'you', 'can', 'tune', 'GC', 'behavior', 'a', 'bit', 'with', 'SetGCPercent()', 'http://golang.org/pkg/runtime/debug/#SetGCPercent', 'According', 'to', 'TFM,', 'a', 'collection', 'is', 'triggered', 'when', 'the', 'ratio', 'of', 'freshly', 'allocated', 'data', 'to', 'live', 'data', 'remaining', 'after', 'the', 'previous', 'collection', 'reaches', 'this', 'percentage', '.', '.', 'The', 'default', 'rate', 'is', '100%,', 'meaning', 'for', 'programs', 'that', 'make', 'lots', 'of', 'small', 'allocations', 'and', 'hold', 'lots', 'of', 'RAM,', 'the', 'overhead', 'can', 'be', 'huge.', 'I', 'had', 'an', 'HTTP', 'cache', 'take', 'up', 'over', '200%', 'the', 'cache', 'size', 'once.', 'Try', 'tuning', 'the', 'percentage', 'to', 'somewhere', 'around', '10%', 'and', 'see', 'if', 'it', 'helps.']"
418,27259783,"My problem was solved by using a third party dns library, specifically miekg/dns (https://github.com/miekg/dns).
","['My', 'problem', 'was', 'solved', 'by', 'using', 'a', 'third', 'party', 'dns', 'library,', 'specifically', 'miekg/dns', '(https://github.com/miekg/dns).']"
419,27379160,"The best way is not maintaining a list at all.

Each connection should connect to a hub with a given identifier (eg:user id, connection id, etc...), subscribe for messages for such identifier and publish messages with that identifier. Also subscribe for global messages and group messages if you want.

UPDATE:

To scale to 50K+ connections you are going to need a more distributed approach rather than a simple map with a mutex.  For example: https://github.com/bitly/nsq (made in GO) ""NSQ is a realtime distributed messaging platform designed to operate at scale, handling billions of messages per day."" 
","['The', 'best', 'way', 'is', 'not', 'maintaining', 'a', 'list', 'at', 'all.', 'Each', 'connection', 'should', 'connect', 'to', 'a', 'hub', 'with', 'a', 'given', 'identifier', '(eg:user', 'id,', 'connection', 'id,', 'etc...),', 'subscribe', 'for', 'messages', 'for', 'such', 'identifier', 'and', 'publish', 'messages', 'with', 'that', 'identifier.', 'Also', 'subscribe', 'for', 'global', 'messages', 'and', 'group', 'messages', 'if', 'you', 'want.', 'UPDATE:', 'To', 'scale', 'to', '50K+', 'connections', 'you', 'are', 'going', 'to', 'need', 'a', 'more', 'distributed', 'approach', 'rather', 'than', 'a', 'simple', 'map', 'with', 'a', 'mutex.', 'For', 'example:', 'https://github.com/bitly/nsq', '(made', 'in', 'GO)', '""NSQ', 'is', 'a', 'realtime', 'distributed', 'messaging', 'platform', 'designed', 'to', 'operate', 'at', 'scale,', 'handling', 'billions', 'of', 'messages', 'per', 'day.""']"
420,27392755,"This problem can be stated more generally: You have a collection of values. You need to iterate over the collection, add to the collection and remove from the collection with high concurrency. 

I would start with what you propose: use a map protected by a mutex.

If you find that there's high contention on the mutex, then consider lock striping. This is where you use N mutex and map pairs where the pair is selected by a hash of the key.
","['This', 'problem', 'can', 'be', 'stated', 'more', 'generally:', 'You', 'have', 'a', 'collection', 'of', 'values.', 'You', 'need', 'to', 'iterate', 'over', 'the', 'collection,', 'add', 'to', 'the', 'collection', 'and', 'remove', 'from', 'the', 'collection', 'with', 'high', 'concurrency.', 'I', 'would', 'start', 'with', 'what', 'you', 'propose:', 'use', 'a', 'map', 'protected', 'by', 'a', 'mutex.', 'If', 'you', 'find', 'that', ""there's"", 'high', 'contention', 'on', 'the', 'mutex,', 'then', 'consider', 'lock', 'striping.', 'This', 'is', 'where', 'you', 'use', 'N', 'mutex', 'and', 'map', 'pairs', 'where', 'the', 'pair', 'is', 'selected', 'by', 'a', 'hash', 'of', 'the', 'key.']"
421,27448765,")

Then you need to create the directory with the permissions 0755. Directories need the executable bit set in order to traverse them.
","['First,', 'you', 'need', 'to', 'split', 'off', 'the', 'executable', 'from', ""it's"", 'base', 'path', 'as', ""it's"", 'returned', 'from', 'osext', 'exePath', ',', '_', ':=', 'osext.Executable()', 'base', ',', '_', ':=', 'filepath.Split(exePath)', '(or', 'use', 'osext.ExecutableFolder()', ')', 'Then', 'you', 'need', 'to', 'create', 'the', 'directory', 'with', 'the', 'permissions', '0755.', 'Directories', 'need', 'the', 'executable', 'bit', 'set', 'in', 'order', 'to', 'traverse', 'them.']"
422,27468580,"
Make correct html close tag after 

That`s it:


   
     
    
        {{template ""left"" .}}
    
    
        {{template ""right"" .}}
    



","['{{', 'template', '""left""', '.}}', '{{', 'template', '""right""', '.}}', 'Make', 'correct', 'html', 'close', 'tag', 'after', 'That`s', 'it:', '{{template', '""left""', '.}}', '{{template', '""right""', '.}}']"
423,27469986,"My problem was that I run go file from random directory. To solve it I changed directory (cd) to parent of templates folder. 
","['Make', 'correct', 'html', 'close', 'tag', 'after', 'That`s', 'it:', '{{template', '""left""', '.}}', '{{template', '""right""', '.}}']"
424,27485744,"This is already explained in this question. In short - you can create your own Marshaller implementation if you need to preserve these characters, but even encoded the json output will be a perfectly valid one and should not break anything.
","['This', 'is', 'already', 'explained', 'in', 'this', 'question.', 'In', 'short', '-', 'you', 'can', 'create', 'your', 'own', 'Marshaller', 'implementation', 'if', 'you', 'need', 'to', 'preserve', 'these', 'characters,', 'but', 'even', 'encoded', 'the', 'json', 'output', 'will', 'be', 'a', 'perfectly', 'valid', 'one', 'and', 'should', 'not', 'break', 'anything.']"
425,27528721,"
","['The', 'question', '""Properly', 'pass', 'arguments', 'to', 'Go', 'Exec""', 'mentions:', 'exec.Command(...)', 'adds', 'double', 'quotes', 'to', 'the', 'parameters', 'if', 'there', 'is', 'spaces', 'in', 'them,', 'so', 'you', 'only', 'need', 'to', 'escape', '\\""', 'where', 'you', 'need', 'them.', 'In', 'your', 'case,', '-', 'cp', '""/minecraft/bin/*""', 'would', 'be', 'passed', 'to', 'exec.Command', 'as', 'two', 'separate', 'parameters.', 'If', 'you', 'need', 'quotes', 'within', 'one', 'parameter,', 'you', 'could', 'use', 'a', 'string', 'literal', 'to', 'keep', 'them', '(as', 'commented', 'in', '""How', 'do', 'you', 'add', 'spaces', 'to', 'exec.command', 'in', 'golang"").', 'But', 'if,', 'in', 'your', 'case,', 'you', 'need', 'the', 'cp', '(classpath)', 'to', 'be', 'expended', 'by', 'the', 'shell', '(as', 'mentioned', 'in', '""double', 'quotes', 'escaping', 'in', 'golang', 'exec""),', 'then', 'remove', 'the', 'quotes:', 'exec.Command(..., ""-cp"", `/minecraft/bin/*`, ...)']"
426,27658174,"Put that in the ~/.vimrc file to make the settings permanent.
Here's a wiki article on this - http://vim.wikia.com/wiki/Indent_with_tabs,_align_with_spaces
",[]
427,27690792,"
Marshal() defined here https://golang.org/src/net/mockicmp_test.go?h=Marshal#L32 
And icmpMessage struct here https://golang.org/src/net/mockicmp_test.go?h=icmpMessage#L17

","['Marshal()', 'defined', 'here', 'https://golang.org/src/net/mockicmp_test.go?h=Marshal#L32', 'And', 'icmpMessage', 'struct', 'here', 'https://golang.org/src/net/mockicmp_test.go?h=icmpMessage#L17']"
428,27727469,"
","['The', 'approach', ""I've"", 'found', 'workable', 'is', ""git's"", 'submodule', 'system.', 'Using', 'that', 'you', 'can', 'submodule', 'in', 'a', 'given', 'version', 'of', 'the', 'code', 'and', 'upgrading/downgrading', 'is', 'explicit', 'and', 'recorded', '-', 'never', 'haphazard.', 'The', 'folder', 'structure', ""I've"", 'taken', 'with', 'this', 'is:', '+', 'myproject', '++', 'src', '+++', 'myproject', '+++', 'github', '.', 'com', '++++', 'submoduled_project', 'of', 'some', 'kind', '.']"
429,27795117,"
","['Using', '2', 'different', 'channels', 'You', 'want', 'to', 'send', 'values', 'to', '2', 'different', 'channels.', 'Sending', 'a', 'value', 'to', 'a', 'channel', 'is', 'not', 'an', 'assignment,', 'so', 'you', ""can't"", 'send', 'on', 'both', 'channels', 'in', 'one', 'step.', 'First', 'store', 'the', 'values', 'returned', 'by', 'boolInt(),', 'then', 'send', 'the', 'values', 'to', 'the', '2', 'channels', 'like', 'this:', 'go', 'func', '()', '{', 'b', ',', 'i', ':=', 'boolInt', '()', 'chan', 'Bool', '<-', 'b', 'chan', 'Int', '<-', 'i', '}()', 'Testing', 'it:', 'go', 'func', '()', '{', 'b', ',', 'i', ':=', 'boolInt', '()', 'chan', 'Bool', '<-', 'b', 'chan', 'Int', '<-', 'i', '}()', 'fmt.Println(""Received bool:"", <-chanBool)', 'fmt.Println(""Received int:"", <-chanInt)', 'Output:', 'Received', 'bool', ':', 'false', 'Received', 'int', ':', '1', 'Note:', 'you', 'first', 'have', 'to', 'receive', 'from', 'chanBool', 'because', 'you', 'created', 'unbuffered', 'channels,', 'and', 'because', 'in', 'the', 'example', 'we', 'first', 'send', 'to', 'chanBool,', 'that', 'blocks', 'until', 'the', 'sent', 'value', 'is', 'recevied', 'and', 'only', 'then', 'proceeds', 'to', 'send', 'a', 'value', 'to', 'the', 'chanInt.', 'Attempting', 'to', 'receive', 'from', 'chanInt', 'first', 'would', 'cause', 'a', 'deadlock', '(', '""fatal error: all goroutines are asleep - deadlock!""', ').', 'Solution', 'using', 'only', 'one', 'channel', 'If', 'you', 'want', 'to', 'send', 'multiple', 'values', 'on', 'a', 'channel,', 'you', 'can', 'create', 'a', 'wrapper', 'struct', 'for', 'the', 'values:', 'type', 'MyStruct', 'struct', '{', 'b', 'bool', 'i', 'int', '}', 'And', 'using', 'it:', 'ch', ':=', 'make', '(', 'chan', 'MyStruct', ')', 'go', 'func', '()', '{', 'b', ',', 'i', ':=', 'boolInt', '()', 'ch', '<-', 'MyStruct', '{', 'b', ',', 'i', '}', '}()', 'fmt.Println(""Received value:"", <-ch)', 'Output:', 'Received', 'value', ':', '{', 'false', '1', '}', 'Note:', 'You', 'could', 'also', 'use', 'a', '[]interface{}', 'slice', 'as', 'a', 'wrapper,', 'but', 'a', 'struct', 'provides', 'a', 'clearer', 'way', 'and', 'type', 'safety', 'to', 'its', 'fields.', 'Note', '#2:', 'It', 'would', 'make', 'things', 'easier', 'and', 'clearer', 'if', 'the', 'boolInt()', 'function', 'itself', 'would', 'return', 'a', 'MyStruct', 'value:', 'func', 'boolInt', '()', 'MyStruct', '{', 'return', 'MyStruct', '{', 'false', ',', '1', '}', '}', 'In', 'which', 'case', 'code', 'would', 'be', 'as', 'simple', 'as', 'this:', 'ch', ':=', 'make', '(', 'chan', 'MyStruct', ')', 'go', 'func', '()', '{', 'ch', '<-', 'boolInt', '()', '}()', 'Alternative', '1', 'channel', 'solution', 'Another', 'option', 'is', 'to', 'make', 'the', 'channel', 'type', 'interface{}', 'so', 'it', 'can', 'receive', 'values', 'of', 'any', 'type,', 'and', 'just', 'send/receive', 'multiple', 'values', 'on', 'it:', 'ch', ':=', 'make', '(', 'chan', 'interface', '{})', 'go', 'func', '()', '{', 'b', ',', 'i', ':=', 'boolInt', '()', 'ch', '<-', 'b', 'ch', '<-', 'i', '}()', 'fmt.Println(""Received values:"", <-ch, <-ch)', 'Output:', 'Received', 'values', ':', 'false', '1']"
430,27795708,"

This solution might be preferable if you have multiple goroutines sending or receiving on the channel.  Since the two values are packed together you don't need to worry about bugs in one place leading to the two channels getting out of sync.

You can experiment with this suggestion here: http://play.golang.org/p/I_Apg4ciFI
","['If', 'you', 'want', 'to', 'send', 'two', 'values', 'down', 'a', 'channel', 'together,', 'one', 'option', 'is', 'to', 'use', 'a', 'struct', 'to', 'pack', 'both', 'values', 'together.', 'For', 'example:', 'type', 'BoolPlusInt', 'struct', '{', 'B', 'bool', 'I', 'int', '}', 'You', 'can', 'then', 'create', 'a', 'value', 'of', 'this', 'type', 'holding', 'the', 'two', 'values', 'before', 'sending', 'it', 'down', 'the', 'channel.', 'For', 'instance:', 'c', ':=', 'make', '(', 'chan', 'BoolPlusInt', ')', 'go', 'func', '()', '{', 'var', 'v', 'BoolPlusInt', 'v', '.', 'B', ',', 'v', '.', 'I', '=', 'boolInt', '()', 'c', '<-', 'v', '}()', 'This', 'solution', 'might', 'be', 'preferable', 'if', 'you', 'have', 'multiple', 'goroutines', 'sending', 'or', 'receiving', 'on', 'the', 'channel.', 'Since', 'the', 'two', 'values', 'are', 'packed', 'together', 'you', ""don't"", 'need', 'to', 'worry', 'about', 'bugs', 'in', 'one', 'place', 'leading', 'to', 'the', 'two', 'channels', 'getting', 'out', 'of', 'sync.', 'You', 'can', 'experiment', 'with', 'this', 'suggestion', 'here:', 'http://play.golang.org/p/I_Apg4ciFI']"
431,27819409,"

Output:

float64 9.12


Test it on Go Playground
","['The', 'reason', 'for', 'the', 'different', 'output', 'is', 'that', 'in', 'the', 'first', 'case', '912', '*', '0.01', 'is', 'the', 'multiplication', 'of', '2', 'untyped', 'constant', 'values', 'which', 'is', 'of', 'arbitrary', 'precision,', 'and', 'only', 'the', 'result', 'is', 'converted', 'to', 'float64', 'when', 'the', 'value', 'is', 'passed', 'to', 'Println().', '(See', 'Constant', 'expressions', 'section', 'of', 'the', 'Language', 'specification', 'for', 'details.)', 'In', 'the', 'second', 'case', 'float64(912)', '*', '0.01', 'first', '912', 'is', 'converted', 'to', 'float64,', 'then', 'the', 'untyped', 'constant', '0.01', 'is', 'converted', 'to', 'float64', 'and', 'these', 'two', 'values', 'having', 'float64', 'are', 'multiplied', 'which', 'is', 'not', 'an', 'arbitrary', 'precision,', 'and', 'will', 'not', 'give', 'exact', 'result.', 'Note:', 'In', 'the', 'first', 'case', 'the', 'result', 'will', 'be', 'converted', 'to', 'float64', 'when', 'passed', 'to', 'the', 'Println():', 'fmt.Printf(""%T %v\\n"", 912 * 0.01, 912 * 0.01)', 'Output:', 'float64', '9.12', 'Test', 'it', 'on', 'Go', 'Playground']"
432,27819483,". 0.01 is not exactly representable in a float64, thus precision is lost in a different place than in the expression float64(912 * 0.01) which arises in the argument of fmt.Println() in your first example, explaining the different results.
","['As', 'per', 'spec:', 'Constant', 'expressions', 'are', 'always', 'evaluated', 'exactly;', 'intermediate', 'values', 'and', 'the', 'constants', 'themselves', 'may', 'require', 'precision', 'significantly', 'larger', 'than', 'supported', 'by', 'any', 'predeclared', 'type', 'in', 'the', 'language.', 'Since', '912', '*', '0.01', 'is', 'a', 'constant', 'expression,', 'it', 'is', 'evaluated', 'exactly.', 'Thus,', 'writing', 'fmt.Println(912 * 0.01)', 'has', 'the', 'same', 'effect', 'as', 'writing', 'fmt.Println(9.12).', 'When', 'you', 'pin', '912', 'to', 'float64,', 'the', 'other', 'operand', 'of', 'the', 'floating-point', 'multiplication', 'is', 'implicitly', 'pinned', 'to', 'float64,', 'too.', 'Thus,', 'the', 'expression', 'float64(912)', '*', '0.01', 'behaves', 'like', 'float64', '(', '912', ')', '*', 'float64', '(', '0', '.', '01', ')', '.', '0.01', 'is', 'not', 'exactly', 'representable', 'in', 'a', 'float64,', 'thus', 'precision', 'is', 'lost', 'in', 'a', 'different', 'place', 'than', 'in', 'the', 'expression', 'float64(912', '*', '0.01)', 'which', 'arises', 'in', 'the', 'argument', 'of', 'fmt.Println()', 'in', 'your', 'first', 'example,', 'explaining', 'the', 'different', 'results.']"
433,27853130,"As background, Go doesn't come with the zlib library, and compress/zlib is only has its name 'cause it works with zlib format data. Though the format's the same, the details of the compression algorithm aren't (leading, for example, to worse speed and slightly worse compression for the Go library). So output won't typically match, even at the same compression level and with the same wrapper.

The answer from an author of zlib (Mark Adler) raises the essential point that different output doesn't mean the output can't be decompressed by zlib. I think that's your real answer here, but leaving the rest of this around because it has some non-overlapping information about what Go's doing/your options in Go.



The Vitess project (YouTube's internal MySQL proxy) needed the speed of C zlib for their application, so they wrote an adapter, cgzip. You didn't say what format you wanted the output in; if the answer is not gzip, you'll have to fork and modify cgzip so it calls the right bits of zlib to produce what you need.

The upside of using cgzip or similar is that it'll act like zlib because it's using zlib. The downside is that you'll no no longer have a pure-Go app, so you lose the trivial cross-compiles and gain an additional dependency on the environment your program's built and run in (though in zlib's case, the ubiquity and stable API mean it's much less of an issue to take it as a dep than some libraries).
","['.', '0.01', 'is', 'not', 'exactly', 'representable', 'in', 'a', 'float64,', 'thus', 'precision', 'is', 'lost', 'in', 'a', 'different', 'place', 'than', 'in', 'the', 'expression', 'float64(912', '*', '0.01)', 'which', 'arises', 'in', 'the', 'argument', 'of', 'fmt.Println()', 'in', 'your', 'first', 'example,', 'explaining', 'the', 'different', 'results.']"
434,27853778,"Just because the compressed data is different doesn't mean that it can't be decompressed.  zlib-compliant compressed data generated anywhere can be decompressed by a compliant zlib decoder anywhere else.  Did you try decompressing?

As for the difference, @twotwotwo points out that compress/zlib in Go is not the original zlib library, but rather a different implementation written in Go.  So it would be expected to generate different output if it uses different algorithms to find matches and/or emit blocks.
","['Just', 'because', 'the', 'compressed', 'data', 'is', 'different', ""doesn't"", 'mean', 'that', 'it', ""can't"", 'be', 'decompressed.', 'zlib-compliant', 'compressed', 'data', 'generated', 'anywhere', 'can', 'be', 'decompressed', 'by', 'a', 'compliant', 'zlib', 'decoder', 'anywhere', 'else.', 'Did', 'you', 'try', 'decompressing?', 'As', 'for', 'the', 'difference,', '@twotwotwo', 'points', 'out', 'that', 'compress/zlib', 'in', 'Go', 'is', 'not', 'the', 'original', 'zlib', 'library,', 'but', 'rather', 'a', 'different', 'implementation', 'written', 'in', 'Go.', 'So', 'it', 'would', 'be', 'expected', 'to', 'generate', 'different', 'output', 'if', 'it', 'uses', 'different', 'algorithms', 'to', 'find', 'matches', 'and/or', 'emit', 'blocks.']"
435,27871599,"
","['There', 'is', 'an', 'updated', 'version', 'of', 'the', 'package', 'on', 'github', 'You', 'use', 'it', 'by', 'wrapping', 'an', 'io.Reader', 'Here', 'is', 'a', 'complete', 'example', 'which', 'will', 'show', 'the', 'homepage', 'of', 'Google', 'veeeery', 'sloooowly.', 'This', 'wrapping', 'an', 'interface', 'to', 'make', 'new', 'functionality', 'is', 'very', 'good', 'Go', 'style,', 'and', ""you'll"", 'see', 'a', 'lot', 'of', 'it', 'in', 'your', 'journey', 'into', 'Go.', 'package', 'main', 'import', '(', '""io""', '""log""', '""net/http""', '""os""', '""github.com/mxk/go-flowrate/flowrate""', ')', 'func', 'main', '()', '{', 'resp', ',', 'err', ':=', 'http.Get(""http://google.com"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatalf(""Get failed: %v"", err)', '}', 'defer', 'resp', '.', 'Body.Close()', '//', 'Limit', 'to', '10', 'bytes', 'per', 'second', 'wrappedIn', ':=', 'flowrate.NewReader(resp.Body, 10)', '//', 'Copy', 'to', 'stdout', '_', ',', 'err', '=', 'io.Copy(os.Stdout, wrappedIn)', 'if', 'err', '!=', 'nil', '{', 'log.Fatalf(""Copy failed: %v"", err)', '}', '}']"
436,27878678,"

Nothing magic.
","['Thirdparty', 'packages', 'have', 'convenient', 'wrappers.', 'But', 'if', 'you', 'interested', 'in', 'how', 'things', 'work', 'under', 'the', 'hood', '-', ""it's"", 'quite', 'easy.', 'package', 'main', 'import', '(', '""io""', '""net/http""', '""os""', '""time""', ')', 'var', 'datachunk', 'int64', '=', '500', '//Bytes', 'var', 'timelapse', 'time', '.', 'Duration', '=', '1', '//per seconds', 'func', 'main', '()', '{', 'responce', ',', '_', ':=', 'http.Get(""http://google.com"")', 'for', 'range', 'time.Tick(timelapse * time.Second)', '{', '_', ',', 'err', ':=', 'io.CopyN(os.Stdout, responce.Body, datachunk)', 'if', 'err', '!=', 'nil', '{', 'break', '}', '}', '}', 'Nothing', 'magic.']"
437,27933786,"
","['Is', 'an', 'inplace', 'bitwise', 'OR', 'operator', 'https://golang.org/ref/spec#Operators.', 'There', 'are', 'many', 'others:', '+', '&', '+=', '&=', '&&', '==', '!=', '-', '|', '-=', '|=', '||', '<', '<=', '*', '^', '*=', '^=', '>=', '/', '<<', '/=', '<<=', '++', '=', ':=', '%', '>>', '%=', '>>=', '--', '!', '&^', '&^=']"
438,27949612,"Prepared statement already bound to concrete connection to DB, contains low-level driver.Stmt and can be used concurrently by multiple go-routings. So it's quite handy to prepare and use, and things work faster.
","['Prepared', 'statement', 'already', 'bound', 'to', 'concrete', 'connection', 'to', 'DB,', 'contains', 'low-level', 'driver.Stmt', 'and', 'can', 'be', 'used', 'concurrently', 'by', 'multiple', 'go-routings.', 'So', ""it's"", 'quite', 'handy', 'to', 'prepare', 'and', 'use,', 'and', 'things', 'work', 'faster.']"
439,27950620,"I think the best answer comes from the wikipedia article on Prepared Statements.

Quoting: 


  The overhead of compiling and optimizing the statement is incurred
  only once, although the statement is executed multiple times. Not all
  optimization can be performed at the time the prepared statement is
  compiled, for two reasons: the best plan may depend on the specific
  values of the parameters, and the best plan may change as tables and
  indexes change over time.`enter code here
  
  Prepared statements are resilient against SQL injection, because
  parameter values, which are transmitted later using a different
  protocol, need not be correctly escaped. If the original statement
  template is not derived from external input, SQL injection cannot
  occur.

","['I', 'think', 'the', 'best', 'answer', 'comes', 'from', 'the', 'wikipedia', 'article', 'on', 'Prepared', 'Statements.', 'Quoting:', 'The', 'overhead', 'of', 'compiling', 'and', 'optimizing', 'the', 'statement', 'is', 'incurred', 'only', 'once,', 'although', 'the', 'statement', 'is', 'executed', 'multiple', 'times.', 'Not', 'all', 'optimization', 'can', 'be', 'performed', 'at', 'the', 'time', 'the', 'prepared', 'statement', 'is', 'compiled,', 'for', 'two', 'reasons:', 'the', 'best', 'plan', 'may', 'depend', 'on', 'the', 'specific', 'values', 'of', 'the', 'parameters,', 'and', 'the', 'best', 'plan', 'may', 'change', 'as', 'tables', 'and', 'indexes', 'change', 'over', 'time.`enter', 'code', 'here', 'Prepared', 'statements', 'are', 'resilient', 'against', 'SQL', 'injection,', 'because', 'parameter', 'values,', 'which', 'are', 'transmitted', 'later', 'using', 'a', 'different', 'protocol,', 'need', 'not', 'be', 'correctly', 'escaped.', 'If', 'the', 'original', 'statement', 'template', 'is', 'not', 'derived', 'from', 'external', 'input,', 'SQL', 'injection', 'cannot', 'occur.']"
440,27985538,"

Output

97

","['You', 'need', 'to', 'pass', 'a', 'pointer', 'to', 'WrapObj', 'to', 'the', 'findKFromLastRecr()', 'function.', 'Similar', 'to', 'the', 'languages', 'in', 'the', 'C', 'family,', 'everything', 'in', 'Go', 'is', 'passed', 'by', 'value.', 'That', 'is,', 'a', 'function', 'always', 'gets', 'a', 'copy', 'of', 'the', 'thing', 'being', 'passed,', 'as', 'if', 'there', 'were', 'an', 'assignment', 'statement', 'assigning', 'the', 'value', 'to', 'the', 'parameter.', 'For', 'instance,', 'passing', 'a', 'WrapObj', 'value', 'to', 'a', 'function', 'makes', 'a', 'copy', 'of', 'the', 'WrapObj,', 'but', 'not', 'the', 'WrapObj', 'it', 'points', 'to.', 'Therefore,', 'without', 'a', 'pointer', 'to', 'WrapObj,', 'each', 'findKFromLastRecr()', 'function', 'gets', 'a', 'copy', 'of', 'WrapObj', 'and', 'the', 'increase', 'can', 'not', 'be', 'shared', 'by', 'the', 'outer', 'findKFromLastRecr()', 'functions.', 'It', 'could', 'be', 'useful', 'to', 'check', 'the', 'pointers', 'section', 'from', 'golang-book.', 'package', 'main', 'import', '(', '""container/list""', '""fmt""', ')', 'var', 'sMap', 'map', '[', 'int', ']', 'bool', 'func', 'main', '()', '{', 'l', ':=', 'list.New()', 'for', 'i', ':=', '1', ';', 'i', '<', '100', ';', 'i', '++', '{', 'l.PushBack(i)', '}', 'kFromLastElemRec', ':=', 'findKFromLastRecr', '(', 'l.Front(), 3, &WrapObj{0})', 'fmt.Println(kFromLastElemRec.Value.(int))', '}', '//', 'Object', 'to', 'store', 'the', 'count', 'type', 'WrapObj', 'struct', '{', 'count', 'int', '}', '//', 'ERROR', '//', 'recursive', 'function', 'to', 'find', 'the', 'kth', 'from', 'last', 'element', 'func', 'findKFromLastRecr', '(', 'head', '*', 'list', '.', 'Element', ',', 'k', 'int', ',', 'wrapper', '*', 'WrapObj', ')', '*', 'list', '.', 'Element', '{', 'if', 'head', '==', 'nil', '{', 'return', 'nil', '}', 'resNode', ':=', 'findKFromLastRecr', '(', 'head.Next(), k, wrapper)', 'wrapper', '.', 'count', '=', '(', 'wrapper', '.', 'count', ')', '+', '1', 'if', 'wrapper', '.', 'count', '==', 'k', '{', 'return', 'head', '}', 'return', 'resNode', '}', 'Output', '97']"
441,27986874,"
","['The', 'range', 'variant', 'of', 'the', 'for', 'loop', 'is', 'not', 'extendable', 'to', 'custom', 'collections', 'that', 'are', 'not', 'just', 'renamed', 'slices,', 'maps,', 'strings,', 'or', 'channels.', 'There', 'is', 'no', 'Ranger', 'interface', 'or', 'anything', 'like', 'that.', 'If', 'you', 'want', 'to', 'range', 'over', 'a', 'custom', 'type,', 'consider', 'using', 'a', 'for-loop', 'like', 'this:', 'for', 'x', ',', 'eof', ':=', 'col.Next(); x, eof = col.Next()', ';', '!', 'eof', '{', '//', '...', '}', 'where', 'Next()', 'is', 'a', 'method', 'that', 'iterates', 'through', 'your', 'collection', 'with', 'a', 'signature', 'like', 'this:', 'func', '(*', 'MyCollection', ')', 'Next', '()', '(', 'ItemType', 'x', ',', 'bool', 'eof', ')']"
442,27995703,"

playground example
","['It', 'is', 'not', 'possible', 'to', 'construct', 'a', 'loop', 'using', 'the', 'container/list', 'List', 'type.', 'The', 'List', 'type', 'methods', 'ensure', 'that', ""there's"", 'no', 'loop.', 'Because', 'the', 'list', ""Element's"", 'next', 'and', 'previous', 'pointers', 'are', 'not', 'exported,', 'the', 'application', 'cannot', 'create', 'a', 'loop', 'by', 'modifying', 'the', 'elements', 'directly.', 'You', 'can', 'define', 'your', 'own', 'type', 'to', 'create', 'a', 'list', 'with', 'a', 'loop:', 'package', 'main', 'import', '""fmt""', 'type', 'node', 'struct', '{', 'v', 'int', 'next', '*', 'node', '}', 'func', 'main', '()', '{', '//', 'Create', 'list', 'with', '1,', '2,', '3', 'and', 'print.', 'l', ':=', '&', 'node', '{', '1', ',', '&', 'node', '{', '2', ',', '&', 'node', '{', '3', ',', 'nil', '}}}', 'for', 'n', ':=', 'l', ';', 'n', '!=', 'nil', ';', 'n', '=', 'n', '.', 'next', '{', 'fmt.Println(n.v)', '}', '//', 'Create', 'list', 'with', 'loop', 'and', 'print', 'at', 'most', '100', 'steps', 'down', 'the', 'list.', 'n3', ':=', '&', 'node', '{', '3', ',', 'nil', '}', 'l', '=', '&', 'node', '{', '1', ',', '&', 'node', '{', '2', ',', 'n3', '}}', 'n3', '.', 'next', '=', 'l', 'for', 'i', ',', 'n', ':=', '0', ',', 'l', ';', 'n', '!=', 'nil', '&&', 'i', '<', '100', ';', 'n', ',', 'i', '=', 'n', '.', 'next', ',', 'i', '+', '1', '{', 'fmt.Println(n.v)', '}', '}', 'playground', 'example']"
443,28008290,".
","['The', 'source', 'to', 'tools/pos.go', 'called', 'by', 'ParseQueryPos', 'says', '//', 'parsePosFlag', 'parses', 'a', 'string', 'of', 'the', 'form', '""file:pos""', 'or', '//', 'file:start,end""', 'where', 'pos,', 'start,', 'end', 'match', '#%d', 'and', 'represent', 'byte', '//', 'offsets,', 'and', 'returns', 'its', 'components.', 'If', 'you', 'really', 'had', 'to', 'convert', 'from', 'line:column', 'strings,', ""you'd"", 'look', 'at', 'the', 'file', 'contents', 'and', 'count', 'up', 'bytes', '(including', 'newlines)', 'leading', 'to', 'that', 'line:column.', 'But', 'since', ""you're"", 'working', 'with', 'a', 'token.Position,', 'it', 'looks', 'like', 'you', 'can', 'get', 'what', 'you', 'need', 'from', 'token', '.', 'Position', '.', 'Offset', '.']"
444,28023772,"string is one of the predeclared type in the builtin package.

Those functions in strings couldn't have been defined as method using a predeclared type as a receiver: that would have required to define a type alias (to the underlying type string, in order to attach methods to it).  

A method declaration uses a receiver which has a Type, which in turn does not include any of the predeclared types (bool byte complex64 complex128 error float32 float64 int int8 int16 int32 int64 rune string uint uint8 uint16 uint32 uint64 uintptr).

Or (which is done here), one uses functions in a dedicated package 'strings'.
That seems coherent with the fact that the type string itself has no fields: its content doesn't have to ""receive"" the method, it can simply be used by a function.
",['.']
445,28023872,"The short answer is: ""To keep the language simple.""

Go as a language only allows methods to be defined on types that are in the same package, but because string (like other builtin types) is implemented in the language itself, there is no way to add methods to it, without complicating the language / compiler.

It's also partly, because of how Go was designed.

See this mail from Rob Pike (one of the creators of Go) for more information:


  Go does not have methods on basic types because the designers of the 
  language did not want methods defined for basic types, in part because 
  of the knock-on effect they might have on interfaces. I believe we are 
  all still comfortable with that decision. Others may feel differently. 
  
  -rob 


And this one too:


  We simply didn't understand what the implications would be; there's 
  nothing to explain. Go was designed with caution. 
  
  In that vein, look at the size of the strings library. Making all that 
  functionality methods on the basic type would, as Andrew said, 
  complicate the language. Why complicate the language with such trivial 
  things when it can be achieved by a library, which is more 
  maintainable, easier to extend, and more flexible? The language is 
  much simpler the way things are. 
  
  -rob 

",['.']
446,28034936,"
","[""It's"", 'not', 'pretty,', 'but', 'you', 'can', 'use', 'the', 'w32', 'binding:', '(github.com/AllenDang/w32)', 'package', 'main', 'import', '(', '""fmt""', '""github.com/AllenDang/w32""', '""unsafe""', ')', 'func', 'GetProcessName', '(', 'id', 'uint32', ')', 'string', '{', 'snapshot', ':=', 'w32.CreateToolhelp32Snapshot(w32.TH32CS_SNAPMODULE, id)', 'if', 'snapshot', '==', 'w32', '.', 'ERROR_INVALID_HANDLE', '{', 'return', '""""', '}', 'defer', 'w32.CloseHandle(snapshot)', 'var', 'me', 'w32', '.', 'MODULEENTRY32', 'me', '.', 'Size', '=', 'uint32', '(', 'unsafe.Sizeof(me))', 'if', 'w32.Module32First(snapshot, &me)', '{', 'return', 'w32.UTF16PtrToString(&me.SzModule[0])', '}', 'return', '""""', '}', 'func', 'ListProcesses', '()', '[]', 'uint32', '{', 'sz', ':=', 'uint32', '(', '1000', ')', 'procs', ':=', 'make', '([]', 'uint32', ',', 'sz', ')', 'var', 'bytesReturned', 'uint32', 'if', 'w32.EnumProcesses(procs, sz, &bytesReturned)', '{', 'return', 'procs', '[:', 'int', '(', 'bytesReturned', ')/', '4', ']', '}', 'return', '[]', 'uint32', '{}', '}', 'func', 'FindProcessByName', '(', 'name', 'string', ')', '(', 'uint32', ',', 'error', ')', '{', 'for', '_', ',', 'pid', ':=', 'range', 'ListProcesses', '()', '{', 'if', 'GetProcessName', '(', 'pid', ')', '==', 'name', '{', 'return', 'pid', ',', 'nil', '}', '}', 'return', '0', ',', 'fmt.Errorf(""unknown process"")', '}', 'func', 'main', '()', '{', 'fmt.Println(FindProcessByName(""chrome.exe""))', '}']"
447,28047625,"

It returns

1
11
2
21
3
31

","['You', 'cannot,', 'but', 'if', 'they', 'are', 'the', 'same', 'length', 'you', 'can', 'use', 'the', 'index', 'from', 'range.', 'package', 'main', 'import', '(', '""fmt""', ')', 'func', 'main', '()', '{', 'r1', ':=', '[]', 'int', '{', '1', ',', '2', ',', '3', '}', 'r2', ':=', '[]', 'int', '{', '11', ',', '21', ',', '31', '}', 'for', 'i', ',', '_', ':=', 'range', 'r1', '{', 'fmt.Println(r1[i])', 'fmt.Println(r2[i])', '}', '}', 'It', 'returns', '1', '11', '2', '21', '3', '31']"
448,28047701,"
","['If', 'your', 'slices', 'are', 'the', 'same', 'length,', 'use', 'range', 'like', 'this:', 'for', 'i', ':=', 'range', 'x', '{', 'fmt.Println(x[i], y[i])', '}']"
449,28084332,"You should double check your 'client_secret' and 'client_id' (must be right because you get the code) if it is correct, apparently Github returns HTTP status code 404 if it is wrong.
","['You', 'should', 'double', 'check', 'your', ""'client_secret'"", 'and', ""'client_id'"", '(must', 'be', 'right', 'because', 'you', 'get', 'the', 'code)', 'if', 'it', 'is', 'correct,', 'apparently', 'Github', 'returns', 'HTTP', 'status', 'code', '404', 'if', 'it', 'is', 'wrong.']"
450,28085169,"

See this in action.
","['You', 'are', 'generating', 'empty', 'JSON', 'objects.', 'Your', 'struct', 'fields', 'should', 'start', 'in', 'capitals', 'for', 'the', 'JSON', 'encoder', 'to', 'be', 'able', 'to', 'encode', 'them.', 'type', 'go', 'odparam', 'struct', '{', 'Code', 'string', 'json', ':', '""code""', 'ClientId', 'string', 'json', ':', '""client_id""', 'ClientSecret', 'string', 'json', ':', '""client_secret""', '}', 'See', 'this', 'in', 'action.']"
451,28197489,"If you import a package with _ as first argument, you cannot use any function or type of that package. _ means that you are importing the package only for its secondary effects of calling the init() functions. 

In addition, you need to use the package name before the function, mapstructure.Decode in this case.

Alternatively, as pointed out by Ainar-G, you may use ""."" instead of _ when importing the package. This way you will be importing the names to the ""default"" namespace, allowing to use Decode directly. However, this is not recommended because you are polluting the namespace with other names and there may be conflicts, now or in the future.
","['If', 'you', 'import', 'a', 'package', 'with', '_', 'as', 'first', 'argument,', 'you', 'cannot', 'use', 'any', 'function', 'or', 'type', 'of', 'that', 'package.', '_', 'means', 'that', 'you', 'are', 'importing', 'the', 'package', 'only', 'for', 'its', 'secondary', 'effects', 'of', 'calling', 'the', 'init()', 'functions.', 'In', 'addition,', 'you', 'need', 'to', 'use', 'the', 'package', 'name', 'before', 'the', 'function,', 'mapstructure.Decode', 'in', 'this', 'case.', 'Alternatively,', 'as', 'pointed', 'out', 'by', 'Ainar-G,', 'you', 'may', 'use', '"".""', 'instead', 'of', '_', 'when', 'importing', 'the', 'package.', 'This', 'way', 'you', 'will', 'be', 'importing', 'the', 'names', 'to', 'the', '""default""', 'namespace,', 'allowing', 'to', 'use', 'Decode', 'directly.', 'However,', 'this', 'is', 'not', 'recommended', 'because', 'you', 'are', 'polluting', 'the', 'namespace', 'with', 'other', 'names', 'and', 'there', 'may', 'be', 'conflicts,', 'now', 'or', 'in', 'the', 'future.']"
452,28301545,"It looks like you are trying to to read from a file and then split the work across multiple workers (fan out). I do not see any closing of channels in your code. See https://gist.github.com/kylewolfe/7c54018a9ed16517c0dd for an example of the pattern I'm referring to. For each line of your file, you would read into the one channel, where x workers would read from it (and reflect / do work).
","['It', 'looks', 'like', 'you', 'are', 'trying', 'to', 'to', 'read', 'from', 'a', 'file', 'and', 'then', 'split', 'the', 'work', 'across', 'multiple', 'workers', '(fan', 'out).', 'I', 'do', 'not', 'see', 'any', 'closing', 'of', 'channels', 'in', 'your', 'code.', 'See', 'https://gist.github.com/kylewolfe/7c54018a9ed16517c0dd', 'for', 'an', 'example', 'of', 'the', 'pattern', ""I'm"", 'referring', 'to.', 'For', 'each', 'line', 'of', 'your', 'file,', 'you', 'would', 'read', 'into', 'the', 'one', 'channel,', 'where', 'x', 'workers', 'would', 'read', 'from', 'it', '(and', 'reflect', '/', 'do', 'work).']"
453,28455077,"

Try with anchors.^$ will disable partial matching.See demo.

https://regex101.com/r/qH1uG3/4
","['^(', '+|-)', '(((', 'd', '{', '1', ',', '3', '}[,', '])(', 'd', '{', '3', '}[', ',])*', 'd', '{', '3', '})|', 'd', '+)(', '[', '.,]', '(', 'd', '{', '3', '}[,', '])*', 'd', '+)', '$', 'Try', 'with', 'anchors.^$', 'will', 'disable', 'partial', 'matching.See', 'demo.', 'https://regex101.com/r/qH1uG3/4']"
454,28472360,"os.Args[1] = ""-conf=my.conf""

flag.Parse()

Notice that the config file name is hard-coded.
","['os.Args[1]', '=', '""-conf=my.conf""', 'flag.Parse()', 'Notice', 'that', 'the', 'config', 'file', 'name', 'is', 'hard-coded.']"
455,28506418,"

You can of course limit it to a more targeted set of data you need to pass around rather than the entire request. 

The other thing that the context package helps with (and I think that blog does an ok job of pointing out), is a common framework for timeouts or deadlines. 

Note that the context package does not enforce timeouts for you. It is up to the components receiving a context object to watch the Done channel and self-cancel their own http request or database call or calculation or whatever.

edit - on timeouts

It is extremely useful to be able to manage timeouts from the outside of a component. If I have a database module, I don't need to hardcode timeout values, just be able to handle a timeout triggered from the outside. 

One way I have done this is in a service that makes multiple db / service calls per incoming request. If the total time exceeds 1 second, I want to abort all outbound operations and return a partial or error result. Initializing the context with a timeout at the top level and passing it to all dependencies is a really easy way to manage this.

It is not always pretty for the dependency to listen to the Done channel and abort it's work, but as the blog shows, it is not terribly painful either. 
","['One', 'of', 'the', 'most', 'common', 'needs', 'for', 'context', 'passing', 'is', 'correlating', 'outgoing', 'requests', 'to', 'incoming', 'requests.', 'I', 'have', 'used', 'this', 'for', 'a', 'variety', 'of', 'purposes,', 'for', 'example:', 'I', 'want', 'error', 'logs', 'for', 'my', 'database', 'component', 'to', 'include', 'the', 'full', 'url', 'from', 'the', 'http', 'request', 'it', 'is', 'a', 'result', 'of.', 'Incoming', 'http', 'requests', 'contain', 'a', 'set', 'of', 'headers', 'that', 'I', 'need', 'to', 'preserve', 'and', 'pass', 'on', 'to', 'other', 'http', 'services', 'I', 'call', 'downstream', '(maybe', 'for', 'tracking', 'reasons).', 'I', 'want', 'to', 'examine', 'the', 'incoming', 'http', 'request', 'in', 'some', 'other', 'component', 'to', 'do', 'access', 'control', 'or', 'user', 'authentication', 'or', 'whatever.', 'This', 'could', 'be', 'at', 'the', 'http', 'handler', 'layer,', 'or', 'some', 'other', 'part', 'of', 'my', 'application.', 'Many', 'languages', 'and', 'platforms', 'have', 'convenient/magical', 'ways', 'to', 'get', 'the', 'current', 'Http', 'request.', 'C#', 'has', 'HttpRequest.Current', 'which', 'is', 'globally', 'available', '(via', 'thread', 'local', 'storage)', 'to', 'anyone', 'who', 'wants', 'to', 'know', 'the', 'context', 'of', 'the', 'current', 'http', 'request.', 'You', 'can', 'set', 'arbitrary', 'data', 'on', 'it', 'to', 'communicate', 'various', 'context', 'data.', 'Other', 'platforms', 'have', 'similar', 'facilities.', 'Since', 'go', 'has', 'no', 'facilities', 'for', 'goroutine', 'local', 'storage,', 'there', 'is', 'no', 'way', 'to', 'store', 'a', 'global', 'variable', 'in', 'the', 'context', 'of', 'the', 'current', 'http', 'request.', 'Instead,', 'it', 'is', 'idiomatic', 'to', 'initialize', 'the', 'context', 'at', 'the', 'boundary', 'of', 'your', 'system', '(an', 'incoming', 'request),', 'and', 'pass', 'it', 'as', 'an', 'argument', 'to', 'any', 'downstream', 'components', 'that', 'need', 'access', 'to', 'that', 'information.', 'One', 'super', 'simple', 'way', 'to', 'do', 'this', 'would', 'be', 'to', 'make', 'a', 'context', 'object', 'with', 'the', 'current', 'http', 'request', 'and', 'pass', 'that', 'around:', 'func', 'someHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', '){', 'ctx', ':=', 'context.WithValue(context.Background(),""request"",r)', 'myDatabase.doSomething(ctx,....)', '}', 'You', 'can', 'of', 'course', 'limit', 'it', 'to', 'a', 'more', 'targeted', 'set', 'of', 'data', 'you', 'need', 'to', 'pass', 'around', 'rather', 'than', 'the', 'entire', 'request.', 'The', 'other', 'thing', 'that', 'the', 'context', 'package', 'helps', 'with', '(and', 'I', 'think', 'that', 'blog', 'does', 'an', 'ok', 'job', 'of', 'pointing', 'out),', 'is', 'a', 'common', 'framework', 'for', 'timeouts', 'or', 'deadlines.', 'Note', 'that', 'the', 'context', 'package', 'does', 'not', 'enforce', 'timeouts', 'for', 'you.', 'It', 'is', 'up', 'to', 'the', 'components', 'receiving', 'a', 'context', 'object', 'to', 'watch', 'the', 'Done', 'channel', 'and', 'self-cancel', 'their', 'own', 'http', 'request', 'or', 'database', 'call', 'or', 'calculation', 'or', 'whatever.', 'edit', '-', 'on', 'timeouts', 'It', 'is', 'extremely', 'useful', 'to', 'be', 'able', 'to', 'manage', 'timeouts', 'from', 'the', 'outside', 'of', 'a', 'component.', 'If', 'I', 'have', 'a', 'database', 'module,', 'I', ""don't"", 'need', 'to', 'hardcode', 'timeout', 'values,', 'just', 'be', 'able', 'to', 'handle', 'a', 'timeout', 'triggered', 'from', 'the', 'outside.', 'One', 'way', 'I', 'have', 'done', 'this', 'is', 'in', 'a', 'service', 'that', 'makes', 'multiple', 'db', '/', 'service', 'calls', 'per', 'incoming', 'request.', 'If', 'the', 'total', 'time', 'exceeds', '1', 'second,', 'I', 'want', 'to', 'abort', 'all', 'outbound', 'operations', 'and', 'return', 'a', 'partial', 'or', 'error', 'result.', 'Initializing', 'the', 'context', 'with', 'a', 'timeout', 'at', 'the', 'top', 'level', 'and', 'passing', 'it', 'to', 'all', 'dependencies', 'is', 'a', 'really', 'easy', 'way', 'to', 'manage', 'this.', 'It', 'is', 'not', 'always', 'pretty', 'for', 'the', 'dependency', 'to', 'listen', 'to', 'the', 'Done', 'channel', 'and', 'abort', ""it's"", 'work,', 'but', 'as', 'the', 'blog', 'shows,', 'it', 'is', 'not', 'terribly', 'painful', 'either.']"
456,28528330,"Without seeing the code to timeoutDial, my wild guess is that you don't close the connection when you're done with it.
","['You', 'can', 'of', 'course', 'limit', 'it', 'to', 'a', 'more', 'targeted', 'set', 'of', 'data', 'you', 'need', 'to', 'pass', 'around', 'rather', 'than', 'the', 'entire', 'request.', 'The', 'other', 'thing', 'that', 'the', 'context', 'package', 'helps', 'with', '(and', 'I', 'think', 'that', 'blog', 'does', 'an', 'ok', 'job', 'of', 'pointing', 'out),', 'is', 'a', 'common', 'framework', 'for', 'timeouts', 'or', 'deadlines.', 'Note', 'that', 'the', 'context', 'package', 'does', 'not', 'enforce', 'timeouts', 'for', 'you.', 'It', 'is', 'up', 'to', 'the', 'components', 'receiving', 'a', 'context', 'object', 'to', 'watch', 'the', 'Done', 'channel', 'and', 'self-cancel', 'their', 'own', 'http', 'request', 'or', 'database', 'call', 'or', 'calculation', 'or', 'whatever.', 'edit', '-', 'on', 'timeouts', 'It', 'is', 'extremely', 'useful', 'to', 'be', 'able', 'to', 'manage', 'timeouts', 'from', 'the', 'outside', 'of', 'a', 'component.', 'If', 'I', 'have', 'a', 'database', 'module,', 'I', ""don't"", 'need', 'to', 'hardcode', 'timeout', 'values,', 'just', 'be', 'able', 'to', 'handle', 'a', 'timeout', 'triggered', 'from', 'the', 'outside.', 'One', 'way', 'I', 'have', 'done', 'this', 'is', 'in', 'a', 'service', 'that', 'makes', 'multiple', 'db', '/', 'service', 'calls', 'per', 'incoming', 'request.', 'If', 'the', 'total', 'time', 'exceeds', '1', 'second,', 'I', 'want', 'to', 'abort', 'all', 'outbound', 'operations', 'and', 'return', 'a', 'partial', 'or', 'error', 'result.', 'Initializing', 'the', 'context', 'with', 'a', 'timeout', 'at', 'the', 'top', 'level', 'and', 'passing', 'it', 'to', 'all', 'dependencies', 'is', 'a', 'really', 'easy', 'way', 'to', 'manage', 'this.', 'It', 'is', 'not', 'always', 'pretty', 'for', 'the', 'dependency', 'to', 'listen', 'to', 'the', 'Done', 'channel', 'and', 'abort', ""it's"", 'work,', 'but', 'as', 'the', 'blog', 'shows,', 'it', 'is', 'not', 'terribly', 'painful', 'either.']"
457,28531524,"
","['To', 'more', 'explicitly', 'state', 'what', 'Not_a_Golfer', 'and', 'OneOfOne', 'have', 'said,', 'when', ""you're"", 'done', 'with', 'the', 'response,', 'you', 'need', 'to', 'close', 'the', 'connection', 'which', 'has', 'been', 'left', 'open', '(through', 'the', 'Body', 'field', 'which', 'is', 'an', 'io.ReadCloser).', 'So', 'basically,', 'one', 'simple', 'though', 'would', 'be', 'to', 'change', 'the', 'code', 'pertaining', 'to', 'making', 'an', 'http', 'request', 'to:', 'var', 'resp', '*', 'http', '.', 'Response', 'if', 'data', '.', 'Redirect', '{', 'c', ':=', '&', 'http', '.', 'Client', '{', 'Transport', ':', 't', ',', '}', 'resp', ',', 'err', '=', 'c.Do(req)', '}', 'else', '{', 'resp', ',', 'err', '=', 't.RoundTrip(req)', '}', 'if', 'err', '==', 'nil', '{', 'defer', 'resp', '.', 'Body.Close()', '// we need to close the connection', '}']"
458,28719641,"
","['Indexing', 'a', 'string', 'indexes', 'its', 'bytes', 'not', 'its', 'runes', '(a', 'rune', 'is', 'a', 'unicode', 'codepoint).', 'What', 'you', 'want', 'to', 'do', 'is', 'check', 'the', 'first', 'character', '(rune)', 'of', 'the', 'string,', 'not', 'its', 'first', 'byte', 'in', 'its', 'UTF-8', 'encoded', 'form.', 'And', 'for', 'this', 'there', 'is', 'support', 'in', 'the', 'standard', 'library:', 'unicode.IsUpper().', 'To', 'get', 'the', 'first', 'rune,', 'you', 'can', 'convert', 'the', 'string', 'to', 'a', 'slice', 'of', 'runes,', 'and', 'take', 'the', 'first', 'element', '(at', 'index', '0).', 'ins', ':=', '[]', 'string', '{', '""å/Å/ä/Ä/ö/Ö""', ',', '""Å/ä/Ä/ö/Ö""', '}', 'for', '_', ',', 's', ':=', 'range', 'ins', '{', 'fmt.Println(s, unicode.IsUpper([]rune(s)[0]))', '}', 'Output:', 'å/Å/ä/Ä/ö/Ö', 'false', 'Å/ä/Ä/ö/Ö', 'true']"
459,28786936,"The answer to this self-answered question might help:

Golang write input and get output from terminal process

at least, he mentions in the answer that he ""was able to get ssh access working with a password"", which is not mentioned explicitly in the question - that's why you probably didn't find it while searching the site?
","['The', 'answer', 'to', 'this', 'self-answered', 'question', 'might', 'help:', 'Golang', 'write', 'input', 'and', 'get', 'output', 'from', 'terminal', 'process', 'at', 'least,', 'he', 'mentions', 'in', 'the', 'answer', 'that', 'he', '""was', 'able', 'to', 'get', 'ssh', 'access', 'working', 'with', 'a', 'password"",', 'which', 'is', 'not', 'mentioned', 'explicitly', 'in', 'the', 'question', '-', ""that's"", 'why', 'you', 'probably', ""didn't"", 'find', 'it', 'while', 'searching', 'the', 'site?']"
460,28791744,"

is valid because the type of constant ""test"" interpreted as template.HTML. Untyped constant has default type, but it can be any driven type by context at compile time. This article explains about constant in detail. Maybe this article make your question clear.
","['In', 'short,', 'second', 'expression', 'is', 'invalid', 'their', 'types', 'are', 'incompatible.', 'Every', 'operations', 'in', 'Go,', 'arguments', 'are', 'must', 'be', 'same', 'type.', 'The', 'second', 'expression', 'template.HTML(""test"")', '==', 'htmlString', 'is', 'invalid', 'since', ""it's"", 'comparing', 'template.HTML', 'and', 'string.', 'Although', 'template.HTML', 'is', 'driven', 'from', 'string,', 'but', 'it', 'is', 'incompatible.', 'You', 'should', 'cast', 'the', 'variable', 'like', 'template.HTML(htmlString)', '.', 'But', 'the', 'first', 'expression', 'template.HTML(""test"")', '==', '""test""', 'is', 'valid', 'because', 'the', 'type', 'of', 'constant', '""test""', 'interpreted', 'as', 'template.HTML.', 'Untyped', 'constant', 'has', 'default', 'type,', 'but', 'it', 'can', 'be', 'any', 'driven', 'type', 'by', 'context', 'at', 'compile', 'time.', 'This', 'article', 'explains', 'about', 'constant', 'in', 'detail.', 'Maybe', 'this', 'article', 'make', 'your', 'question', 'clear.']"
461,28885389,"RabbitMQ will only return a basic.nack if


  an internal error occurs in the Erlang process responsible for a queue.


So, the basic.ack/basic.nack is only confirming if the RabbitMQ broker received the message, not if a ""final"" consumer did.  See the last sentence of ""Negative Acknowledgement"" on this page.
","['is', 'valid', 'because', 'the', 'type', 'of', 'constant', '""test""', 'interpreted', 'as', 'template.HTML.', 'Untyped', 'constant', 'has', 'default', 'type,', 'but', 'it', 'can', 'be', 'any', 'driven', 'type', 'by', 'context', 'at', 'compile', 'time.', 'This', 'article', 'explains', 'about', 'constant', 'in', 'detail.', 'Maybe', 'this', 'article', 'make', 'your', 'question', 'clear.']"
462,28902682,"

Session implements the Setter interface, which means its unmarshaling happens via its SetBSON method, which is implemented by asking the bson package to unmarshal itself, which will do that by calling its SetBSON method. This never ends, until the stack space is over.

The solution is, of course, to not implement custom unmarshaling of Session by just asking the bson package to unmarshal it again. 
","['This', 'logic', 'introduces', 'an', 'infinite', 'recursion:', 'func', '(', 'rcv', '*', 'Session', ')', 'SetBSON', '(', 'raw', 'bson', '.', 'Raw', ')', 'error', '{', 'return', 'raw.Unmarshal(rcv)', '}', 'Session', 'implements', 'the', 'Setter', 'interface,', 'which', 'means', 'its', 'unmarshaling', 'happens', 'via', 'its', 'SetBSON', 'method,', 'which', 'is', 'implemented', 'by', 'asking', 'the', 'bson', 'package', 'to', 'unmarshal', 'itself,', 'which', 'will', 'do', 'that', 'by', 'calling', 'its', 'SetBSON', 'method.', 'This', 'never', 'ends,', 'until', 'the', 'stack', 'space', 'is', 'over.', 'The', 'solution', 'is,', 'of', 'course,', 'to', 'not', 'implement', 'custom', 'unmarshaling', 'of', 'Session', 'by', 'just', 'asking', 'the', 'bson', 'package', 'to', 'unmarshal', 'it', 'again.']"
463,28944539," from your GOPATH fixes the issue ?

Edit: Also, a colleague of mine said that after rebooting all went well.
","['Does', 'removing', 'and', 're', 'go', 'getting', 'go', 'ogle', '.', 'go', 'lang', '.', 'org/appengine', 'from', 'your', 'GOPATH', 'fixes', 'the', 'issue', '?', 'Edit:', 'Also,', 'a', 'colleague', 'of', 'mine', 'said', 'that', 'after', 'rebooting', 'all', 'went', 'well.']"
464,28984118,"If you look at the documentation of ReadString you will notice that the string returned will include the delimiter (in your case \n).


  ReadString reads until the first occurrence of delim in the input,
  returning a string containing the data up to and including the
  delimiter.


And because the length of the line after reading 10 is 4 I would assume that the lines are delimited by \r\n. The easiest way to remove it is using one of the Trim functions (like TrimSpace).
","['from', 'your', 'GOPATH', 'fixes', 'the', 'issue', '?', 'Edit:', 'Also,', 'a', 'colleague', 'of', 'mine', 'said', 'that', 'after', 'rebooting', 'all', 'went', 'well.']"
465,28984161,"
","['From', 'the', 'documentation:', '""ReadString', 'reads', 'until', 'the', 'first', 'occurrence', 'of', 'delim', 'in', 'the', 'input,', 'returning', 'a', 'string', 'containing', 'the', 'data', 'up', 'to', 'and', 'including', 'the', 'delimiter.""', 'Because', 'of', 'this,', 'i', 'suggest', 'you', 'use', 'a', 'scanner,', 'which', 'handles', 'this', 'case', 'like', 'you', 'would', 'expect:', 'scanner', ':=', 'bufio.NewScanner(file)', 'for', 'scanner.Scan()', '{', 'lineStr', ':=', 'scanner.Text()', 'num', ',', '_', ':=', 'strconv.Atoi(lineStr)', 'fmt.Println(lineStr, num)', '}']"
466,28984217,"

Advice: use strings.TrimSpace to clean your input.
","['Citing', 'the', 'documentation', 'of', 'bufio.Reader.ReadString', '(emphasis', 'mine):', 'ReadString', 'reads', 'until', 'the', 'first', 'occurrence', 'of', 'delim', 'in', 'the', 'input,', 'returning', 'a', 'string', 'containing', 'the', 'data', 'up', 'to', 'and', 'including', 'the', 'delimiter.', 'Now,', 'the', 'documentation', 'of', 'strconv.ParseInt', 'The', 'errors', 'that', 'ParseInt', 'returns', 'have', 'concrete', 'type', '*NumError', 'and', 'include', 'err.Num', '=', 's.', 'If', 's', 'is', 'empty', 'or', 'contains', 'invalid', 'digits,', 'err.Err', '=', 'ErrSyntax', 'and', 'the', 'returned', 'value', 'is', '0', 'Your', 'problem', 'is', 'that', 'the', 'ReadString', 'method', 'return', 'also', 'the', '\\n', 'that', 'terminate', 'the', 'line,', 'which', 'is', 'an', 'invalid', 'character', 'for', 'the', 'ParseInt', 'function.', 'You', 'can', 'check', 'the', 'real', 'error', 'with', 'the', 'following', 'snippet', 'i', ',', 'err', ':=', 'strconv.ParseInt(line, 10, 64)', 'if', 'err', '!=', 'nil', '{', 'switch', 'err', '.(*', 'strconv', '.', 'NumError', ').', 'Err', '{', 'case', 'strconv', '.', 'ErrSyntax', ':', 'fmt.Println(""syntax error"")', 'case', 'strconv', '.', 'ErrRange', ':', 'fmt.Println(""out of range value"")', '}', '}', 'Advice:', 'use', 'strings.TrimSpace', 'to', 'clean', 'your', 'input.']"
467,29166419,"

Playground
","['Like', 'that', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', ')', 'func', 'main', '()', '{', 'data', ':=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'data', '[', '""a""', ']', '=', '""b""', 'data', '[', '""c""', ']', '=', '""d""', 'bytes', ',', 'err', ':=', 'json.Marshal(data)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'text', ':=', 'string', '(', 'bytes', ')', 'fmt.Println(text)', '}', 'Playground']"
468,29190369,"The program stops receiving on the channels when a difference is detected. 

The walk goroutines run until they block sending to the channels. They never exit. This is the leak.
","['The', 'program', 'stops', 'receiving', 'on', 'the', 'channels', 'when', 'a', 'difference', 'is', 'detected.', 'The', 'walk', 'goroutines', 'run', 'until', 'they', 'block', 'sending', 'to', 'the', 'channels.', 'They', 'never', 'exit.', 'This', 'is', 'the', 'leak.']"
469,29269960,"
","['The', 'Go', 'Programming', 'Language', 'Specification', 'Close', 'For', 'a', 'channel', 'c,', 'the', 'built-in', 'function', 'close(c)', 'records', 'that', 'no', 'more', 'values', 'will', 'be', 'sent', 'on', 'the', 'channel.', 'After', 'calling', 'close,', 'and', 'after', 'any', 'previously', 'sent', 'values', 'have', 'been', 'received,', 'receive', 'operations', 'will', 'return', 'the', 'zero', 'value', 'for', 'the', ""channel's"", 'type', 'without', 'blocking.', 'In', 'the', 'channel', 'buffer', 'there', 'are', '5', 'previously', 'sent', 'values', 'followed', 'by', 'a', 'close.', 'For', 'example,', 'package', 'main', 'import', '(', '""fmt""', '""sync""', '""time""', ')', 'func', 'main', '()', '{', 'iCh', ':=', 'make', '(', 'chan', 'int', ',', '99', ')', 'var', 'wg', 'sync', '.', 'WaitGroup', 'go', 'func', '()', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '5', ';', 'i', '++', '{', 'wg.Add(1)', 'go', 'func', '(', 'i', 'int', ')', '{', 'defer', 'wg.Done()', 'iCh', '<-', 'i', '}(', 'i', ')', '}', 'wg.Wait()', 'close', '(', 'iCh', ')', '}()', 'time.Sleep(5 * time.Second)', 'fmt.Println(""previously sent values"", len(iCh))', 'for', 'i', ':=', 'range', 'iCh', '{', 'fmt.Printf(""%v\\n"", i)', '}', 'print', '(', '""the channel should be closed by now\\n""', ')', 'print', '(', '""done""', ')', '}', 'Output:', 'previously', 'sent', 'values', '5', '0', '1', '2', '3', '4', 'the', 'chan', 'nel', 'should', 'be', 'closed', 'by', 'now', 'done']"
470,29270134,"
","['I', 'should', 'have', 'sent', 's', 'from', 'getS.', 'Code', 'below', 'package', 'main', 'import', '""time""', 'func', 'main', '()', '{', '//', 'simple', 'function', 'and', 'complex', 'function/channel', 'sC', ':=', 'make', '(', 'chan', 'string', ')', 'go', 'getS', '(', 'sC', ')', 'cC', ':=', 'make', '(', 'chan', 'string', ')', 'go', 'getC', '(', 'sC', ',', 'cC', ')', '//', 'collect', 'the', 'functions', 'result', 's', ':=', '<-', 'sC', '//', 'do', 'something', 'with', '`s`.', 'We', 'print', 'but', 'we', 'may', 'want', 'to', 'use', 'it', 'in', 'a', '`func(s)`', 'print', '(', 's', ')', '//', 'after', 'a', 'while', 'we', 'do', 'soemthing', 'with', '`c`', 'c', ':=', '<-', 'cC', 'print', '(', 'c', ')', '}', 'func', 'getS', '(', 'sC', 'chan', 'string', ')', '{', 's', ':=', '"" simple completed \\n""', 'sC', '<-', 's', 'print', '(', '""sent s back so that main can read it too""', ')', 'sC', '<-', 's', '}', 'func', 'getC', '(', 'sC', 'chan', 'string', ',', 'cC', 'chan', 'string', ')', '{', 'time.Sleep(1 * time.Second)', '//', 'we', 'do', 'some', 'complex', 'stuff', 'print', '(', '""complex is not complicated\\n""', ')', '//', 'Now', 'we', 'need', 'the', 'simple', 'value', 'so', 'we', 'try', 'wait', 'for', 'the', 's', 'channel.', 's', ':=', '<-', 'sC', 'c', ':=', 's', '+', '"" more ""', 'cC', '<-', 'c', '//send complex value', '}']"
471,29284050,"
","['Im', 'not', 'familiar', 'with', 'mustache', 'but', 'from', 'looking', 'at', 'it', 'I', 'think', 'the', '{{#DataKey}}', 'is', 'wrong.', 'From', 'the', 'docs:', 'Template:', '{{', 'repo', '}}', '{{', 'name', '}}', '{{/', 'repo', '}}', 'Hash:', '{', '""repo""', ':', '[', '{', '""name""', ':', '""resque""', '},', '{', '""name""', ':', '""hub""', '},', '{', '""name""', ':', '""rip""', '}', ']', '}', 'Output:', 'resque', 'hub', 'rip', ""I'd"", 'suggest', 'trying', 'the', 'following', 'viewModel', ':=', 'struct', '{', 'items', '[]', 'DataKey', '{}', '}{', 'data', '}', 'mustache.RenderFileInLayout(""templates/datakeys.html.mustache"",', '""templates/layout.html.mustache"",', 'user,', 'viewModel', ')))', 'and', 'then', 'replace', 'the', 'template', 'with', '{{', 'items', '}}', '{{', 'Id', '}}', '{{', 'UserId', '}}', '{{', 'Data', '}}', '{{', 'CreatedAt', '}}', '{{/', 'items', '}}', 'This', 'is', 'untested', 'and', 'might', 'not', 'be', 'correct,', 'but', 'might', 'be', 'worth', 'trying.', 'My', 'guess', 'is', 'that', 'DataKey', ""isn't"", 'a', 'property', 'on', 'the', 'model', 'hence', ""it's"", 'failing', 'to', 'evaluate.', 'Edit', 'for', 'more', 'clarity:', 'In', 'theory', 'viewModel', ':=', 'struct{', 'items', '[]DataKey{}', '}{', 'data', '}', 'will', 'become', '{', '""items""', ':', '[', '{...},{...}', '...', 'etc', ']', '}']"
472,29288854,"When you upload/deploy your application, application files and static files are stored separately. Static files are served by specialized/dedicated servers, not by your frontend instances.

That means if you have a file which you want to read from your Go code, that file must not match any static file pattern and cannot be in a folder specified as a static directory, else the file will be considered a static file and will not be deployed next to your Go code.

This is detailed on the Application configuration page, Section Static file handlers. Quoting the relevant part:


  For efficiency, App Engine stores and serves static files separately from application files. Static files are not available in the application's file system. If you have data files that need to be read by the application code, the data files must be application files, and must not be matched by a static file pattern.


If there is a file which you want to be both a static file and an application file, you have 2 options:

1) You may duplicate it, e.g. put it next to your code and to a separate folder (e.g. static) which you can mark as a static dir.

Or (preferred):

2) Specify the application_readable option to the static file handler which includes/applies to the file. Quoting from the documentation:


  Optional. By default, files declared in static file handlers are uploaded as static data and are only served to end users, they cannot be read by an application. If this field is set to true, the files are also uploaded as code data so your application can read them. Both uploads are charged against your code and static data storage resource quotas.

",[]
473,29378153,"
","['For', 'example,', 'package', 'main', 'import', '(', '""bytes""', '""io""', ')', 'var', 'items', '[]*', 'bytes', '.', 'Buffer', 'func', 'f', '(', 'items', '[]', 'io', '.', 'Reader', ')', '{}', 'func', 'main', '()', '{', 'readers', ':=', 'make', '([]', 'io', '.', 'Reader', ',', 'len', '(', 'items', '))', 'for', 'i', ',', 'item', ':=', 'range', 'items', '{', 'readers', '[', 'i', ']', '=', 'item', '}', 'f', '(', 'readers', ')', '}']"
474,29404617,"
","['Similar', 'to', ""peterSO's"", 'answer.', 'package', 'main', 'import', '(', '""bytes""', '""io""', ')', 'type', 'Foo', 'struct', '{}', 'type', 'Foos', '[]', 'Foo', 'func', '(', 'f', 'Foos', ')', 'toReaders', '()', '[]', 'io', '.', 'Reader', '{', 'readers', ':=', 'make', '([]', 'io', '.', 'Reader', ',', 'len', '(', 'f', '))', 'for', 'i', ',', 'item', ':=', 'range', 'f', '{', 'readers', '[', 'i', ']', '=', 'item', '}', 'return', 'readers', '}', 'func', 'f', '(', 'items', '[]', 'io', '.', 'Reader', ')', '{}', 'func', 'main', '()', '{', 'var', 'x', 'Foos', 'f', '(', 'x.toReaders())', '}']"
475,29422795,"DeepEqual returns false because you're comparing two instances of a type which is not comparable. Type ResultResponse is not comparable because not all of its fields are comparable. The Result field is a slice and slices are specified by the language to be not comparable.
",[]
476,29428932,"
","['I', 'think', 'it', 'is', 'an', 'editing', 'mistake.I', 'guess', 'that', 'What', 'you', 'want', 'to', 'code', 'is:', '""reflect.DeepEqual(p, want)""', 'but', 'you', 'actually', 'wrote:', '""reflect.DeepEqual(input, want)""']"
477,29431214,"

For more infos see discussion here: Google Groups – GOPATH Problem
","['I', 'had', 'to', 'run', 'an', 'application', 'as', 'root', '(to', 'open', 'a', 'webserver', 'on', 'port', '80),', 'this', 'produced', 'the', 'error', 'for', 'me,', 'because', 'the', 'sudo', 'user', 'has', 'a', 'different', 'environment', 'than', 'the', 'normal', 'user,', 'hence', 'GOPATH', 'was', 'not', 'set.', 'If', 'someone', 'else', 'is', 'having', 'this', 'problem,', 'add', '-E', 'to', 'the', 'command,', 'this', 'will', 'preserve', 'the', 'user', 'environment.', 'sudo', '-', 'E', 'go', 'run', 'main', '.', 'go', 'For', 'more', 'infos', 'see', 'discussion', 'here:', 'Google', 'Groups', '–', 'GOPATH', 'Problem']"
478,29444890,"

See it in the playground
","['Type', 'assertions', 'return', 'two', 'values', '..', 'the', 'first', 'is', 'the', 'converted', 'value,', 'the', 'second', 'is', 'a', 'bool', 'indicating', 'if', 'the', 'type', 'assertion', 'worked', 'properly.', 'So', 'you', 'could', 'do', 'this:', '_', ',', 'ok', ':=', 'x', '.(', 'int', ')', 'if', 'ok', '{', 'fmt.Println(""Its an int"")', '}', 'else', '{', 'fmt.Println(""Its NOT an int"")', '}', '..or,', 'shorthand:', 'if', '_', ',', 'ok', ':=', 'x', '.(', 'int', ');', 'ok', '{', 'fmt.Println(""Its an int"")', '}', 'See', 'it', 'in', 'the', 'playground']"
479,29444894,"
","['I', 'just', 'figured', 'out', 'another', 'way', 'of', 'doing', 'this', 'based', 'on', 'this:', 'if', '_', ',', 'ok', ':=', 'x', '.(', 'int', ');', 'ok', '{', 'fmt.Println(""This is an int"")', '}']"
480,29444964,"

If you have a single type that you have to check, use a simple if, otherwise use a switch for better readability.
","['In', 'Effective', 'Go', 'you', 'can', 'find', 'a', 'really', 'simple', 'example', 'of', 'what', ""you're"", 'trying', 'to', 'achieve.', 'var', 't', 'interface', '{}', 't', '=', 'func', 'tionOfSomeType', '()', 'switch', 't', ':=', 't', '.(', 'type', ')', '{', 'default', ':', 'fmt.Printf(""unexpected type %T"", t)', '// %T prints whatever type t has', 'case', 'bool', ':', 'fmt.Printf(""boolean %t\\n"", t)', '// t has type bool', 'case', 'int', ':', 'fmt.Printf(""integer %d\\n"", t)', '// t has type int', 'case', '*', 'bool', ':', 'fmt.Printf(""pointer to boolean %t\\n"", *t)', '// t has type *bool', 'case', '*', 'int', ':', 'fmt.Printf(""pointer to integer %d\\n"", *t)', '// t has type *int', '}', 'If', 'you', 'have', 'a', 'single', 'type', 'that', 'you', 'have', 'to', 'check,', 'use', 'a', 'simple', 'if,', 'otherwise', 'use', 'a', 'switch', 'for', 'better', 'readability.']"
481,29447927,"
","[""I'm"", 'not', 'seeing', 'the', 'error,', 'but', 'I', 'did', 'notice', 'some', 'issues', 'with', 'the', 'code.', 'For', 'this:', 'w.Header().Set(""Content-Type"", r.Header.Get(""Content-Type""))', 'You', 'should', 'use', 'the', 'mime', ""package's:"", 'func', 'TypeByExtension', '(', 'ext', 'string', ')', 'string', 'To', 'determine', 'the', 'content', 'type.', '(if', 'you', 'end', 'up', 'with', 'the', 'empty', 'string', 'default', 'to', 'application/octet-stream', ')', 'For:', 'w.Header().Set(""Content-Length"", r.Header.Get(""Content-Length""))', 'You', 'need', 'to', 'get', 'the', 'content', 'length', 'from', 'the', 'file', 'itself.', 'By', 'using', 'the', 'request', 'content', 'length,', 'for', 'a', 'GET', 'this', 'basically', 'ends', 'up', 'as', 'a', 'no-op,', 'but', 'for', 'a', 'POST', ""you're"", 'sending', 'back', 'the', 'wrong', 'length,', 'which', 'might', 'explain', 'the', 'error', ""you're"", 'seeing.', 'After', 'you', 'open', 'the', 'file,', 'do', 'this:', 'fi', ',', 'err', ':=', 'file.Stat()', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), 500)', 'return', '}', 'w.Header().Set(""Content-Length"", fmt.Sprint(fi.Size()))', 'One', 'final', 'thing,', 'when', 'you', 'open', 'the', 'file,', 'if', ""there's"", 'an', 'error,', 'you', ""don't"", 'need', 'to', 'close', 'the', 'file', 'handle.', 'Do', 'it', 'like', 'this', 'instead:', 'file', ',', 'err', ':=', 'os.Open(...)', 'if', 'err', '!=', 'nil', '{', 'http.NotFound(w, r)', 'return', '}', 'defer', 'file.Close()']"
482,29450292,"
","['Rather', 'than', 'mucking', 'around', 'with', 'getting', 'the', 'correct', 'the', 'content', 'type', 'and', 'length', 'headers', 'yourself', ""it'd"", 'probably', 'be', 'much', 'better', 'to', 'use', 'http.ServeContent', 'which', 'will', 'do', 'that', 'for', 'you', '(as', 'well', 'as', 'support', '""If-Modified-Since"",', 'range', 'requests,', 'etc.', 'If', 'you', 'can', 'supply', 'an', '""ETag""', 'header', 'it', 'can', 'also', 'handle', '""If-Range""', 'and', '""If-None-Match""', 'requests', 'as', 'well).', 'As', 'mentioned', 'previously,', ""it's"", 'often', 'preferable', 'to', 'limit', 'on', 'the', 'write', 'side', 'but', ""it's"", 'awkward', 'to', 'wrap', 'an', 'http.ResponseWriter', 'since', 'various', 'http', 'functions', 'also', 'check', 'for', 'optional', 'interfaces', 'such', 'as', 'http.Flusher', 'and', 'http.Hijacker.', ""It's"", 'much', 'easier', 'to', 'wrap', 'the', 'io.ReadSeeker', 'that', 'ServeContent', 'needs.', 'For', 'example,', 'something', 'like', 'this', 'perhaps:', 'func', 'pathFromID', '(', 'fileID', 'string', ')', 'string', '{', '//', 'replace', 'with', 'whatever', 'logic', 'you', 'need', 'return', '""../../bin/files/test.txt""', '}', '//', 'or', 'more', 'verbosely', 'you', 'could', 'call', 'this', 'a', '""limitedReadSeeker""', 'type', 'lrs', 'struct', '{', 'io', '.', 'ReadSeeker', '//', 'This', 'reader', 'must', 'not', 'buffer', 'but', 'just', 'do', 'something', 'simple', '//', 'while', 'passing', 'through', 'Read', 'calls', 'to', 'the', 'ReadSeeker', 'r', 'io', '.', 'Reader', '}', 'func', '(', 'r', 'lrs', ')', 'Read', '(', 'p', '[]', 'byte', ')', '(', 'int', ',', 'error', ')', '{', 'return', 'r', '.', 'r.Read(p)', '}', 'func', 'newLRS', '(', 'r', 'io', '.', 'ReadSeeker', ',', 'bucket', '*', 'ratelimit', '.', 'Bucket', ')', 'io', '.', 'ReadSeeker', '{', '//', 'Here', 'we', 'know/expect', 'that', 'a', 'ratelimit.Reader', 'does', 'nothing', '//', 'to', 'the', 'Read', 'calls', 'other', 'than', 'add', 'delays', 'so', 'it', ""won't"", 'break', '//', 'any', 'io.Seeker', 'calls.', 'return', 'lrs', '{', 'r', ',', 'ratelimit.Reader(r, bucket)', '}', '}', 'func', 'serveFile', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{', 'fileID', ':=', 'req', '.', 'URL.Query().Get(""fileID"")', 'if', 'len', '(', 'fileID', ')', '==', '0', '{', 'http.Error(w, ""invalid request"", http.StatusBadRequest)', 'return', '}', 'path', ':=', 'pathFromID', '(', 'fileID', ')', 'file', ',', 'err', ':=', 'os.Open(path)', 'if', 'err', '!=', 'nil', '{', 'http.NotFound(w, req)', 'return', '}', 'defer', 'file.Close()', 'fi', ',', 'err', ':=', 'file.Stat()', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, ""blah"", 500)', '// XXX fixme', 'return', '}', 'const', '(', 'rate', '=', '100', '<<', '10', 'capacity', '=', '100', '<<', '10', ')', '//', 'Normally', ""we'd"", 'prefer', 'to', 'limit', 'the', 'writer', 'but', ""it's"", 'awkward', 'to', 'wrap', '//', 'an', 'http.ResponseWriter', 'since', 'it', 'may', 'optionally', 'also', 'implement', '//', 'http.Flusher,', 'or', 'http.Hijacker.', 'bucket', ':=', 'ratelimit.NewBucketWithRate(rate, capacity)', 'lr', ':=', 'newLRS', '(', 'file', ',', 'bucket', ')', 'http.ServeContent(w, req, path, fi.ModTime(), lr)', '}']"
483,29504544,"

Wrap http.StripPrefix with a function that logs before calling it if you need logging.
","['stdlib', 'version', 'package', 'main', 'import', '(', '""log""', '""net/http""', '""net/http/httputil""', '""net/url""', ')', 'func', 'main', '()', '{', 'target', ',', 'err', ':=', 'url.Parse(""http://192.168.2.8:8000"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'http.Handle(""/users/"", http.StripPrefix(""/users/"", httputil.NewSingleHostReverseProxy(target)))', 'http.Handle(""/public/"", http.StripPrefix(""/public/"", http.FileServer(http.Dir(""./Documents""))))', 'log.Fatal(http.ListenAndServe("":8080"", nil))', '}', 'Wrap', 'http.StripPrefix', 'with', 'a', 'function', 'that', 'logs', 'before', 'calling', 'it', 'if', 'you', 'need', 'logging.']"
484,29621608,"

For the second question, the oauth2.Config struct is reusable.
","['My', 'bad,', 'I', 'should', 'read', 'the', 'response.Body', 'first,', 'for', 'example:', 'response', ',', 'err', '=', 'client.Get(`https://accounts.google.com/.well-known/openid-configuration`)', 'body', ',', 'err', ':=', 'ioutil.ReadAll(response.Body)', 'response', '.', 'Body.Close()', 'According', 'to', 'this', 'document,', 'we', 'should', 'fetch', 'from', 'that', 'URL', 'first,', 'then', 'fetch', 'from', 'userinfo_endpoint', 'from', 'the', 'result', 'above', 'to', 'retrieve', 'the', 'e-mail,', 'for', 'example:', '//', 'json', ':=', 'json_to_map(body)', '//', 'get', 'json[`userinfo_endpoint`]', '//', 'response,', 'err', '=', 'client.Get(json[`userinfo_endpoint`])', '//', 'body,', 'err', ':=', 'ioutil.ReadAll(response.Body)', '//', 'response.Body.Close()', '//', 'json', '=', 'json_to_map(body)', '//', 'json[`email`]', 'For', 'the', 'second', 'question,', 'the', 'oauth2.Config', 'struct', 'is', 'reusable.']"
485,29654409,"

and then doing

objdump -S main


to see the annotated assembly.
","['As', 'noted', 'by', 'the', 'people', 'in', 'the', 'comments', 'to', 'your', 'question,', ""it's"", 'implementation-specific.', 'gc', 'does', 'remove', 'it.', 'You', 'can', 'build', 'your', 'program', 'with', '-gcflags', ""'-S'"", 'and', 'see', 'that', 'the', 'ASSERT', 'part', 'is', 'not', 'in', 'the', 'binary.', 'E.g.', 'compile', 'the', 'following', 'code', 'with', '-gcflags', ""'-S',"", 'and', ""you'll"", 'see', 'that', 'the', 'code', 'on', 'lines', '8', 'and', '9', 'is', 'included,', 'but', 'change', 'Assert', 'to', 'be', 'false,', 'and', 'they', ""won't"", 'be', 'there', 'in', 'the', 'asm', 'listing.', 'package', 'main', 'const', 'Assert', '=', 'true', 'var', 'cond', '=', 'true', 'func', 'main', '()', '{', 'if', 'Assert', '&&', '!', 'cond', '{', 'panic', '(', '""failed""', ')', '}', '}', 'EDIT:', 'As', 'for', 'gccgo,', 'it', 'removes', 'this', 'code', 'at', '-O1', 'and', 'above.', 'You', 'can', 'see', 'it', 'by', 'compiling', 'the', 'same', 'code', 'with', 'go', 'build', '-', 'compiler', 'gccgo', '-', 'gccgoflags', ""'-O1'"", 'main', '.', 'go', 'and', 'then', 'doing', 'objdump', '-S', 'main', 'to', 'see', 'the', 'annotated', 'assembly.']"
486,29659664,"This is actually the intended behavior,

You can even call go get on a github repo and it will create this same directory structure
","['and', 'then', 'doing', 'objdump', '-S', 'main', 'to', 'see', 'the', 'annotated', 'assembly.']"
487,29659794,"
","['The', 'behavior', 'is', 'correct.', 'The', 'packages', 'names', 'in', 'Go', 'provide', 'unique', 'global', 'name', 'space.', 'github.com/user/repo', 'therefore', 'identifies', 'a', 'package,', 'which', 'is', 'easily', 'go', 'get', '-able', '(download', 'and', 'install', 'the', 'package)', 'and', 'also', 'provides', 'much', 'needed', 'separation.', 'You', 'can', 'also', 'create', 'packages', 'without', 'a', 'hostname', '(in', 'this', 'case', 'github.com)', 'but', 'effectively', 'preventing', 'users', 'from', 'using', 'go', 'get', 'and', 'resorting', 'to', 'manual', 'management.', 'Having', 'a', 'username', 'in', 'GitHub', 'case', 'allows', 'you', 'to', 'use', 'forks', 'of', 'other', 'libraries', 'and', 'maintain', 'the', 'separation.', 'The', 'full', 'package', 'name', 'is', 'then', 'used', 'for', 'importing', 'import', '""github.com/user/repo""']"
488,29670260,"The regexp does not accept digits, s/[a-z ]/[a-z0-9 ]/

http://play.golang.org/p/ov_zoxBenV
",[]
489,29670299,"

Output:


  Found: [tag1 tag2]


Then, in order to split the string into seperate tags, I recommend using strings.Split
","['First', 'off,', 'the', 'pattern', 'will', 'not', 'match', 'the', 'digits.', 'You', 'might', 'want', 'to', 'change', 'it', 'to:', 'var', 're', '=', 'regexp.MustCompile(`query=""(.*)""`)', 'Then,', 'in', 'order', 'to', 'get', 'the', 'substring,', 'you', 'can', 'just', 'use', 'FindStringSubmatch:', 'match', ':=', 're.FindStringSubmatch(`query=""tag1 tag2""`)', 'if', 'len', '(', 'match', ')', '==', '2', '{', 'fmt.Printf(""Found: [%s]\\n"", match[1])', '}', 'else', '{', 'fmt.Println(""No match found"", match)', '}', 'Output:', 'Found:', '[tag1', 'tag2]', 'Then,', 'in', 'order', 'to', 'split', 'the', 'string', 'into', 'seperate', 'tags,', 'I', 'recommend', 'using', 'strings.Split']"
490,29670705,"
","['It', 'only', 'unmarshals', 'exported', 'and', 'thus', 'Caps', 'fields.', 'Also', 'Loc', ""shouldn't"", 'be', 'a', 'struct', 'but', 'can', 'be', 'a', 'string', 'directly.', 'package', 'main', 'import', '(', '""encoding/xml""', '""fmt""', ')', 'type', 'Query', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'xml', ':', '""urlset""', 'Locs', '[]', 'Loc', 'xml', ':', '""url>loc""', '}', 'type', 'Loc', 'string', 'var', 'data', '=', '[]', 'byte', '(', 'http', '://', 'www', '.', 'konga', '.', 'com/mobile-recharge', '2015', '-', '04', '-', '14', 'daily', '0', '.', '5', 'http', '://', 'www', '.', 'konga', '.', 'com/beauty-health-personal-care', '2015', '-', '04', '-', '14', 'daily', '0', '.', '5', ')', 'func', 'main', '()', '{', 'var', 'q', 'Query', 'xml.Unmarshal(data, &q)', 'fmt.Println(q.Locs)', '}']"
491,29674185,"

Output: [tag1 tag2 tag3]
","['You', 'can', 'extract', 'the', 'whole', 'tag', 'string', 'and', 'then', 'Split()', 'it.', 'package', 'main', 'import', '(', '""fmt""', '""regexp""', '""strings""', ')', 'func', 'main', '()', '{', 'var', 'str', 'string', '=', 'query', '=', '""tag1 tag2 tag3""', 'foo', '=', '""wee""', 're', ':=', 'regexp.MustCompile(`query=""(.+?)""`)', 'match', ':=', 're.FindStringSubmatch(str)', 'if', 'len', '(', 'match', ')', '==', '2', '{', 'fmt.Println(strings.Split(match[1], "" ""))', '}', '}', 'Output:', '[tag1', 'tag2', 'tag3]']"
492,29738472,"

playground

I changed the function argument from a pointer to a slice to a slice. This change has no impact on the issue raised on the question, but it's generally how Go code is written. Pointers to slices are rarely used in Go.
","['Each', 'map', 'value', 'is', 'a', 'pointer', 'to', 'the', 'single', 'local', 'variable', 'thing.', 'One', 'fix', 'is', 'to', 'add', 'an', 'pointer', 'to', 'the', 'slice', 'element:', 'func', 'toRegistry', '(', 'things', '[]', 'Thing', ')', 'Registry', '{', 'registry', ':=', 'make', '(', 'Registry', ')', 'for', 'i', ':=', 'range', 'things', '{', 'registry', '[', 'things', '[', 'i', '].', 'Name', ']', '=', '&', 'things', '[', 'i', ']', '}', 'return', 'registry', '}', 'playground', 'Another', 'option', 'is', 'to', 'store', 'pointers', 'to', 'Thing', 'in', 'the', 'slice:', 'func', 'toRegistry', '(', 'things', '[]*', 'Thing', ')', 'Registry', '{', 'registry', ':=', 'make', '(', 'Registry', ')', 'for', '_', ',', 'thing', ':=', 'range', 'things', '{', 'registry', '[', 'thing', '.', 'Name', ']', '=', 'thing', '}', 'return', 'registry', '}', 'func', 'main', '()', '{', 'things', ':=', '[]*', 'Thing', '{&', 'Thing', '{', '""thingA""', ',', '1', '},', '&', 'Thing', '{', '""thingB""', ',', '2', '}}', 'registry', ':=', 'toRegistry', '(', 'things', ')', 'fmt.Println(registry)', '}', 'playground', 'I', 'changed', 'the', 'function', 'argument', 'from', 'a', 'pointer', 'to', 'a', 'slice', 'to', 'a', 'slice.', 'This', 'change', 'has', 'no', 'impact', 'on', 'the', 'issue', 'raised', 'on', 'the', 'question,', 'but', ""it's"", 'generally', 'how', 'Go', 'code', 'is', 'written.', 'Pointers', 'to', 'slices', 'are', 'rarely', 'used', 'in', 'Go.']"
493,29738513,"

Playground
","['You', 'may', 'reassign', 'thing', 'to', 'another', 'local', 'variable', 'on', 'each', 'iteration', 'and', 'store', 'new', 'variable', 'in', 'registry.', 'package', 'main', 'import', '""fmt""', 'type', 'Thing', 'struct', '{', 'Name', 'string', 'Value', 'int', '}', 'type', 'Registry', 'map', '[', 'string', ']*', 'Thing', 'func', 'toRegistry', '(', 'things', '*[]', 'Thing', ')', 'Registry', '{', 'registry', ':=', 'make', '(', 'Registry', ')', 'for', '_', ',', 'thing', ':=', 'range', '*', 'things', '{', 't', ':=', 'thing', 'registry', '[', 'thing', '.', 'Name', ']', '=', '&', 't', '}', 'return', 'registry', '}', 'func', 'main', '()', '{', 'things', ':=', '[]', 'Thing', '{{', '""thingA""', ',', '1', '},', '{', '""thingB""', ',', '2', '}}', 'registry', ':=', 'toRegistry', '(&', 'things', ')', 'fmt.Println(registry)', '}', 'Playground']"
494,29840479,"
","['Until', 'I', 'see', 'more', 'information,', 'this', 'is', 'simply', 'a', 'guess', 'based', 'on', 'what', 'I', 'could', 'gather', 'from', 'the', 'code', 'you', 'posted.', 'The', 'call', 'res.Body.Close()', 'should', 'come', 'after', 'your', 'check', 'for', 'error,', 'not', 'before.', 'So', 'change:', 'res', ',', 'err', ':=', 'httpClient.Do(req)', 'defer', 'res', '.', 'Body.Close()', 'if', 'err', '!=', 'nil', '{', '...', '}', 'to', 'res', ',', 'err', ':=', 'httpClient.Do(req)', 'if', 'err', '!=', 'nil', '{', '...', '}', 'defer', 'res', '.', 'Body.Close()']"
495,29841190,"
","['Converting', 'Simple', 'strings', 'The', 'easiest', 'way', 'is', 'to', 'use', 'the', 'strconv.Atoi()', 'function.', 'Note', 'that', 'there', 'are', 'many', 'other', 'ways.', 'For', 'example', 'fmt.Sscan()', 'and', 'strconv.ParseInt()', 'which', 'give', 'greater', 'flexibility', 'as', 'you', 'can', 'specify', 'the', 'base', 'and', 'bitsize', 'for', 'example.', 'Also', 'as', 'noted', 'in', 'the', 'documentation', 'of', 'strconv.Atoi():', 'Atoi', 'is', 'shorthand', 'for', 'ParseInt(s,', '10,', '0).', ""Here's"", 'an', 'example', 'using', 'the', 'mentioned', 'functions', '(try', 'it', 'on', 'the', 'Go', 'Playground):', 'flag.Parse()', 's', ':=', 'flag.Arg(0)', 'if', 'i', ',', 'err', ':=', 'strconv.Atoi(s)', ';', 'err', '==', 'nil', '{', 'fmt.Printf(""i=%d, type: %T\\n"", i, i)', '}', 'if', 'i', ',', 'err', ':=', 'strconv.ParseInt(s, 10, 64)', ';', 'err', '==', 'nil', '{', 'fmt.Printf(""i=%d, type: %T\\n"", i, i)', '}', 'var', 'i', 'int', 'if', '_', ',', 'err', ':=', 'fmt.Sscan(s, &i)', ';', 'err', '==', 'nil', '{', 'fmt.Printf(""i=%d, type: %T\\n"", i, i)', '}', 'Output', '(if', 'called', 'with', 'argument', '""123""):', 'i', '=', '123', ',', 'type', ':', 'int', 'i', '=', '123', ',', 'type', ':', 'int64', 'i', '=', '123', ',', 'type', ':', 'int', 'Parsing', 'Custom', 'strings', 'There', 'is', 'also', 'a', 'handy', 'fmt.Sscanf()', 'which', 'gives', 'even', 'greater', 'flexibility', 'as', 'with', 'the', 'format', 'string', 'you', 'can', 'specify', 'the', 'number', 'format', '(like', 'width,', 'base', 'etc.)', 'along', 'with', 'additional', 'extra', 'characters', 'in', 'the', 'input', 'string.', 'This', 'is', 'great', 'for', 'parsing', 'custom', 'strings', 'holding', 'a', 'number.', 'For', 'example', 'if', 'your', 'input', 'is', 'provided', 'in', 'a', 'form', 'of', '""id:00123""', 'where', 'you', 'have', 'a', 'prefix', '""id:""', 'and', 'the', 'number', 'is', 'fixed', '5', 'digits,', 'padded', 'with', 'zeros', 'if', 'shorter,', 'this', 'is', 'very', 'easily', 'parsable', 'like', 'this:', 's', ':=', '""id:00123""', 'var', 'i', 'int', 'if', '_', ',', 'err', ':=', 'fmt.Sscanf(s, ""id:%5d"", &i)', ';', 'err', '==', 'nil', '{', 'fmt.Println(i)', '// Outputs 123', '}']"
496,29873144,"The closest thing you will get to do it without adding a lot of printf's is using godebug, which pretty much adds the printfs for you.
",[]
497,29873754,"

The problem with this approach is that your logging function now has a pointer instead of the real type and must unwrap the pointers to do anything with them. But if you are using reflect, that is not horribly difficult.
","['You', 'are', 'correct', 'in', 'assesing', 'that', 'the', 'arguments', 'to', 'a', 'deferred', 'function', 'are', 'evaluated', 'at', 'the', 'point', 'the', 'defer', 'is', 'queued,', 'not', 'when', 'it', 'is', 'executed.', 'Your', 'method', 'of', 'making', 'an', 'anonymous', 'function', 'that', 'refers', 'to', 'named', 'returns', 'is', 'valid.', 'Another', 'approach', 'is', 'to', 'pass', 'in', 'the', 'address', 'of', 'the', 'return', 'values:', 'func', 'try', '()', '(', 'i', 'int', ')', '{', 'defer', 'printReturns', '(', 'time.Now(), &i)', 'time.Sleep(10 * time.Millisecond)', 'i', '=', '10', 'return', 'i', '+', '1', '}', 'func', 'printReturns', '(', 'start', 'time', '.', 'Time', ',', 'rets', '...', 'interface', '{})', '{', 'fmt.Println(time.Now().Sub(start))', 'for', '_', ',', 'ret', ':=', 'range', 'rets', '{', 'fmt.Println(ret)', '}', '}', 'The', 'problem', 'with', 'this', 'approach', 'is', 'that', 'your', 'logging', 'function', 'now', 'has', 'a', 'pointer', 'instead', 'of', 'the', 'real', 'type', 'and', 'must', 'unwrap', 'the', 'pointers', 'to', 'do', 'anything', 'with', 'them.', 'But', 'if', 'you', 'are', 'using', 'reflect,', 'that', 'is', 'not', 'horribly', 'difficult.']"
498,29885554,"
","['urlfetch.Client(ctx)', 'returns', 'an', 'HTTP', 'client', '(http://godoc.org/google.golang.org/appengine/urlfetch#Client)', 'The', 'http.Client', 'has', 'methods', 'for', 'Get,', 'Post,', 'etc...', 'It', 'also', 'has', 'Do', 'which', 'you', 'can', 'hand', 'an', 'arbitrary', 'request.', 'Create', 'a', 'request', 'using', 'http.NewRequest:', 'req', ',', 'err', ':=', 'http.NewRequest(""GET"", ""http://www.google.com"", nil)', 'Then', 'you', 'can', 'add', 'a', 'header', 'like', 'this:', 'req', '.', 'Header.Set(""Authorization"", ""whatever"")', 'And', 'call', 'Do:', 'res', ',', 'err', ':=', 'client.Do(req)']"
499,29948833,"
","['Maybe', 'this', 'will', 'do', 'what', 'you', 'want.', 'Disclaimer:', 'I', 'am', 'not', 'an', 'expert', 'in', 'openpgp;', 'I', ""don't"", 'know', 'whether', 'this', 'is', 'correct', 'or', 'not.', 'But', 'it', 'does', 'work', 'with', 'gpg', '--import.', 'package', 'main', 'import', '(', '""fmt""', '""os""', '""golang.org/x/crypto/openpgp""', '""golang.org/x/crypto/openpgp/armor""', ')', 'func', 'main', '()', '{', 'var', 'e', '*', 'openpgp', '.', 'Entity', 'e', ',', 'err', ':=', 'openpgp.NewEntity(""itis"", ""test"", ""itis@itis3.com"", nil)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', '//', 'Add', 'more', 'identities', 'here', 'if', 'you', 'wish', '//', 'Sign', 'all', 'the', 'identities', 'for', '_', ',', 'id', ':=', 'range', 'e', '.', 'Identities', '{', 'err', ':=', 'id', '.', 'SelfSignature.SignUserId(id.UserId.Id, e.PrimaryKey, e.PrivateKey, nil)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', '}', 'w', ',', 'err', ':=', 'armor.Encode(os.Stdout, openpgp.PublicKeyType, nil)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'defer', 'w.Close()', 'e.Serialize(w)', '}']"
500,29962554,") for this.

You will have to build or install PortAudio on your system. Consult http://portaudio.com/docs/v19-doxydocs/tutorial_start.html for this.

A complete example for playing back a sound file is located at https://github.com/gordonklaus/portaudio/blob/master/examples/play.go
","['You', 'could', 'use', 'the', 'PortAudio', 'Go', 'bindings', '(', 'go', 'get', 'github', '.', 'com/gordonklaus/portaudio', ')', 'for', 'this.', 'You', 'will', 'have', 'to', 'build', 'or', 'install', 'PortAudio', 'on', 'your', 'system.', 'Consult', 'http://portaudio.com/docs/v19-doxydocs/tutorial_start.html', 'for', 'this.', 'A', 'complete', 'example', 'for', 'playing', 'back', 'a', 'sound', 'file', 'is', 'located', 'at', 'https://github.com/gordonklaus/portaudio/blob/master/examples/play.go']"
501,30046137,"The gob package seems like a good solution for your problem. There is a great article on the Go blog that explains how and why. A short excerpt:


  The gob package was designed with a number of goals in mind.
  
  First, and most obvious, it had to be very easy to use. First, because
  Go has reflection, there is no need for a separate interface
  definition language or ""protocol compiler"". The data structure itself
  is all the package should need to figure out how to encode and decode
  it. On the other hand, this approach means that gobs will never work
  as well with other languages, but that's OK: gobs are unashamedly
  Go-centric.
  
  Efficiency is also important. Textual representations, exemplified by
  XML and JSON, are too slow to put at the center of an efficient
  communications network. A binary encoding is necessary.
  
  Gob streams must be self-describing. Each gob stream, read from the
  beginning, contains sufficient information that the entire stream can
  be parsed by an agent that knows nothing a priori about its contents.
  This property means that you will always be able to decode a gob
  stream stored in a file, even long after you've forgotten what data it
  represents.


Further down the article is an example that shows how easy it is to use and how versatile it is.
","['The', 'gob', 'package', 'seems', 'like', 'a', 'good', 'solution', 'for', 'your', 'problem.', 'There', 'is', 'a', 'great', 'article', 'on', 'the', 'Go', 'blog', 'that', 'explains', 'how', 'and', 'why.', 'A', 'short', 'excerpt:', 'The', 'gob', 'package', 'was', 'designed', 'with', 'a', 'number', 'of', 'goals', 'in', 'mind.', 'First,', 'and', 'most', 'obvious,', 'it', 'had', 'to', 'be', 'very', 'easy', 'to', 'use.', 'First,', 'because', 'Go', 'has', 'reflection,', 'there', 'is', 'no', 'need', 'for', 'a', 'separate', 'interface', 'definition', 'language', 'or', '""protocol', 'compiler"".', 'The', 'data', 'structure', 'itself', 'is', 'all', 'the', 'package', 'should', 'need', 'to', 'figure', 'out', 'how', 'to', 'encode', 'and', 'decode', 'it.', 'On', 'the', 'other', 'hand,', 'this', 'approach', 'means', 'that', 'gobs', 'will', 'never', 'work', 'as', 'well', 'with', 'other', 'languages,', 'but', ""that's"", 'OK:', 'gobs', 'are', 'unashamedly', 'Go-centric.', 'Efficiency', 'is', 'also', 'important.', 'Textual', 'representations,', 'exemplified', 'by', 'XML', 'and', 'JSON,', 'are', 'too', 'slow', 'to', 'put', 'at', 'the', 'center', 'of', 'an', 'efficient', 'communications', 'network.', 'A', 'binary', 'encoding', 'is', 'necessary.', 'Gob', 'streams', 'must', 'be', 'self-describing.', 'Each', 'gob', 'stream,', 'read', 'from', 'the', 'beginning,', 'contains', 'sufficient', 'information', 'that', 'the', 'entire', 'stream', 'can', 'be', 'parsed', 'by', 'an', 'agent', 'that', 'knows', 'nothing', 'a', 'priori', 'about', 'its', 'contents.', 'This', 'property', 'means', 'that', 'you', 'will', 'always', 'be', 'able', 'to', 'decode', 'a', 'gob', 'stream', 'stored', 'in', 'a', 'file,', 'even', 'long', 'after', ""you've"", 'forgotten', 'what', 'data', 'it', 'represents.', 'Further', 'down', 'the', 'article', 'is', 'an', 'example', 'that', 'shows', 'how', 'easy', 'it', 'is', 'to', 'use', 'and', 'how', 'versatile', 'it', 'is.']"
502,30106057,"
","['You', 'can', 'use', 'a', 'map:', 'example', ':=', 'map', '[', 'string', ']', 'interface', '{}{', '""Key1""', ':', '123', ',', '""Key2""', ':', '""value2""', '}', 'js', ',', '_', ':=', 'json.Marshal(example)', 'You', 'can', 'also', 'create', 'types', 'inside', 'of', 'a', 'function:', 'func', 'f', '()', '{', 'type', 'Example', 'struct', '{', '}', '}', 'Or', 'create', 'unnamed', 'types:', 'func', 'f', '()', '{', 'json.Marshal(struct { Key1 int; Key2 string }{123, ""value2""})', '}']"
503,30106093,"
","['You', 'could', 'use', 'an', 'anonymous', 'struct', 'type.', 'example', ':=', 'struct', '{', 'Key1', 'int', 'Key2', 'string', '}{', 'Key1', ':', '123', ',', 'Key2', ':', '""value2""', ',', '}', 'js', ',', 'err', ':=', 'json.Marshal(&example)', 'Or,', 'if', 'you', 'are', 'ready', 'to', 'lose', 'some', 'type', 'safety,', 'map', '[', 'string', ']', 'interface', '{}', ':', 'example', ':=', 'map', '[', 'string', ']', 'interface', '{}{', '""Key1""', ':', '123', ',', '""Key2""', ':', '""value2""', ',', '}', 'js', ',', 'err', ':=', 'json.Marshal(example)']"
504,30217870,"
","[""You're"", 'copying', 'your', 'Stream', 'and', 'List', 'values', 'in', 'the', 'Append', 'method.', 'Either', 'make', 'Append', 'a', 'pointer', 'receiver', 'func', '(', 's', '*', 'Stream', ')', 'Append', '(', 'value', 'interface', '{})', '{', 'or', 'make', 'Stream.list', 'a', '*list.List', 'type', 'Stream', 'struct', '{', 'list', '*', 'list', '.', 'List', '}']"
505,30233728,"
","['ev.detail.response', 'is', 'just', 'a', 'string', 'response,', 'it', 'is', 'not', 'a', 'parsed', 'json', 'object.', 'First', 'you', 'need', 'to', 'parse', 'it', 'using', 'JSON.parse()', 'and', 'then', 'you', 'can', 'access', 'its', 'content.', 'See', 'this', 'Javascript', 'example:', 'var', 'json', '=', '\'{""trial-data"":[{""trial"":{""index"": 0}},{""trial"":{""index"":1}}]}\'', 'alert', '(', ""JSON.parse(json)['trial-data'])"", 'To', 'access', 'the', 'value', 'of', 'the', 'first', '""index""', 'field,', 'for', 'example:', 'var', 'idx0', '=', 'JSON.parse(json)', '[', ""'trial-data'"", '][', '0', '][', ""'trial'"", '][', ""'index'"", ']']"
506,30237486,"
","['With', 'all', 'RDBMS,', 'the', 'SQL', 'standard', 'mandates', 'that', 'a', 'condition', 'involving', 'a', 'comparison', 'with', 'a', 'NULL', 'value', 'is', 'always', 'false.', 'The', 'following', 'query', 'therefore', 'always', 'returns', 'an', 'empty', 'result:', 'select', '*', 'from', 'XXX', 'where', 'deleted_at', '=', 'NULL', 'If', 'you', 'want', 'to', 'search', 'for', 'NULL', 'values,', 'you', 'are', 'supposed', 'to', 'write:', 'select', '*', 'from', 'XXX', 'where', 'deleted_at', 'is', 'null', 'I', 'think', 'you', 'can', 'fix', 'the', 'issue', 'by', 'making', 'sure', 'GORM', 'generates', 'the', 'correct', 'query.', 'For', 'instance,', 'this', 'should', 'work', '(untested):', 'db.Where(""deleted_at is null"").Find(&users)']"
507,30242906,"
","['The', 'C', 'header', 'file', 'foo.h', 'is', 'missing:', '//', 'foo.h', 'int', 'for', 'tythree', '();', 'Reference', 'the', 'header', 'file', 'from', 'Go', 'like', 'this:', '//', 'foo.go', 'package', 'main', '/*', 'include', '""foo.h""', 'int', 'for', 'tytwo', '()', '{', 'return', '42', ';', '}', '*/', 'import', '""C""', 'import', '""fmt""', 'func', 'main', '()', '{', 'fmt.Printf(""forty-two == %d\\n"", C.fortytwo())', 'fmt.Printf(""forty-three == %d\\n"", C.fortythree())', '}', 'Behold,', 'the', 'power', 'of', 'foo.h:', '$', 'go', 'install', '$', 'foo', 'for', 'ty', '-', 'two', '==', '42', 'for', 'ty', '-', 'three', '==', '43']"
508,30290367,"
","['You', 'cannot', 'cast', 'pointers', 'to', 'arbitrary', 'types', 'in', 'Go.', 'If', 'you', 'really', 'want', 'to', 'do', 'that,', 'you', 'should', 'use', 'unsafe.Pointer:', 'type', 'var', 'Attrib1b', 'struct', '{', 'vaHeader', 'uint8', 'vaData', '[]', 'string', '}', 'func', 'var', 'AttIs1B', '(', 'ptr', 'uintptr', ')', 'bool', '{', 'return', '((*', 'var', 'Attrib1b', ')(', 'unsafe.Pointer(ptr)).vaHeader & 0x01)', '==', '0', 'x01', '}', 'It', 'compiles', 'and', 'works,', 'but', 'are', 'you', 'sure', 'there', 'is', 'no', 'safe', 'way', 'of', 'doing', 'that', 'in', 'go?', ""Can't"", 'you', 'just', 'define', 'an', 'interface:', 'type', 'Attr', 'interface', '{', 'AttrIs1B', '()', 'bool', '}', 'func', '(', 'b', 'var', 'Attrib1b', ')', 'AttrIs1B', '()', 'bool', '{', 'return', 'b', '.', 'vaHeader', '&', '0', 'x01', '==', '0', 'x01', '}', 'func', 'var', 'AttIs1B', '(', 'attr', 'Attr', ')', 'bool', '{', 'return', 'attr.AttrIs1B()', '}', 'Or', 'implement', 'it', 'with', 'type', 'casts?', 'func', 'var', 'AttIs1B', '(', 'ptr', 'interface', '{})', 'bool', '{', 'switch', 'a', ':=', 'ptr', '.(', 'type', ')', '{', 'case', 'var', 'Attrib1b', ':', 'return', 'a', '.', 'vaHeader', '&', '0', 'x01', '==', '0', 'x01', '}', 'return', 'false', '}']"
509,30340045,"

reference http://golang.org/src/net/http/client.go?s=14234:14316#L450
","['You', 'may', 'want', 'to', 'set', 'the', 'request', 'content', 'type', 'req', '.', 'Header.Set(""Content-Type"", ""application/x-www-form-urlencoded"")', 'reference', 'http://golang.org/src/net/http/client.go?s=14234:14316#L450']"
510,30340071,"

And get rid of the nutils.ReaderToString call. You can only read once from a Reader (unless it's also a Seeker but then you still need to  Seek it before reusing it)

","['To', 'fix', 'your', 'print', 'output', 'you', 'need', 'to', 'change', 'this:', 'fmt.Printf(fmt.Sprintf(""%s\\n"", nutils.ReaderToString(req.Body)))', 'Into', 'this:', 'fmt.Printf(""%s"",', 'fmt.Sprintf(""%s\\n"",', 'nutils', '.', 'ReaderToString', '(req.Body)))', 'Or', 'this:', 'fmt.Println(fmt.Sprintf(""%s\\n"",', 'nutils.ReaderToString(req.Body)))', 'By', 'printing', 'out', 'the', 'request', 'body', 'you', 'are', 'consuming', 'it.', 'Use', 'a', 'TeeReader:', 'req,', '_', ':=', 'http.NewRequest(r.Method,', 'fmt.Sprintf(""%s%s"",', 'apiUrl,', 'u.Path),', 'io.TeeReader(r.Body,', 'os.Stdout))', 'And', 'get', 'rid', 'of', 'the', 'nutils.ReaderToString', 'call.', 'You', 'can', 'only', 'read', 'once', 'from', 'a', 'Reader', '(unless', ""it's"", 'also', 'a', 'Seeker', 'but', 'then', 'you', 'still', 'need', 'to', 'Seek', 'it', 'before', 'reusing', 'it)', 'fmt.Printf(""%s"", fmt.Sprintf(""%s\\n"", nutils.ReaderToString(req.Body)))', '(req.Body)))', 'Or', 'this:', 'fmt.Println(fmt.Sprintf(""%s\\n"", nutils.ReaderToString(req.Body)))', 'By', 'printing', 'out', 'the', 'request', 'body', 'you', 'are', 'consuming', 'it.', 'Use', 'a', 'TeeReader:', 'req', ',', '_', ':=', 'http.NewRequest(r.Method, fmt.Sprintf(""%s%s"", apiUrl, u.Path), io.TeeReader(r.Body, os.Stdout))', 'And', 'get', 'rid', 'of', 'the', 'nutils.ReaderToString', 'call.', 'You', 'can', 'only', 'read', 'once', 'from', 'a', 'Reader', '(unless', ""it's"", 'also', 'a', 'Seeker', 'but', 'then', 'you', 'still', 'need', 'to', 'Seek', 'it', 'before', 'reusing', 'it)']"
511,30340366,", it worked.

Lesson learnt: It might not always be your Go code be the problem.
","['Got', 'it.', 'The', 'problem', 'was', 'my', 'endpoint', 'in', ""Python's"", 'Flask', 'server', 'does', 'not', 'support', 'chunked', 'encoding,', 'which', ""Go's"", 'Request', 'insists', 'on.', 'When', 'I', 'manually', 'specified', 'the', 'ContentLength', 'like', 'req', '.', 'ContentLength', '=', '25', ',', 'it', 'worked.', 'Lesson', 'learnt:', 'It', 'might', 'not', 'always', 'be', 'your', 'Go', 'code', 'be', 'the', 'problem.']"
512,30369694,"


  Client requests always use HTTP/1.1.

","['Apparently', 'you', ""can't."", 'The', 'Request.Proto', 'field', 'is', 'ignored', 'when', 'making', 'the', 'request', 'by', 'the', 'Client.', 'Quoting', 'from', 'the', 'doc', 'of', 'http.Request:', '//', 'The', 'protocol', 'version', 'for', 'incoming', 'requests.', '//', 'Client', 'requests', 'always', 'use', 'HTTP/1.1.', 'Proto', 'string', '// ""HTTP/1.0""', 'Client', 'requests', 'always', 'use', 'HTTP/1.1.']"
513,30392103,"

That may open the question: why not use a struct with a lock? 



Edit to answer question in comments: Yes, using a 32-bit integer would result in actual atomic operations on all Go-supported architectures because they all support XADDL (or analog) to the best of my knowledge.
","['Is', 'this', 'Go', 'code', 'correct', 'and', 'portable', 'It', 'is', 'correct,', 'as', 'long', 'as', 'you', 'work', 'with', 'unsigned', 'integers', 'of', '64-bit', 'width.', 'Portability', 'in', 'this', 'case', 'is', 'provided', 'by', 'the', 'sync/atomic', 'packages', 'to', 'the', 'architectures', 'supported', 'by', 'the', 'Go', 'compiler.', 'Note,', 'however,', 'that', 'not', 'all', 'architectures', 'support', '""true""', 'atomic', 'operations', 'on', '64-bit', 'wide', 'data.', 'For', 'example,', 'the', 'i386', 'implementation', 'uses', 'a', 'CAS-loop:', 'TEXT', 'AddUint64', '(', 'SB', '),', 'NOSPLIT', ',$', '0', '-', '20', '//', 'no', 'XADDQ', 'so', 'use', 'CMPXCHG8B', 'loop', 'MOVL', 'addr', '+', '0', '(', 'FP', '),', 'BP', 'TESTL', '$', '7', ',', 'BP', 'JZ', '2', '(', 'PC', ')', 'MOVL', '0', ',', 'AX', '// crash with nil ptr deref', '//', 'DI:SI', '=', 'delta', 'MOVL', 'delta_lo', '+', '4', '(', 'FP', '),', 'SI', 'MOVL', 'delta_hi', '+', '8', '(', 'FP', '),', 'DI', '//', 'DX:AX', '=', '*addr', 'MOVL', '0', '(', 'BP', '),', 'AX', 'MOVL', '4', '(', 'BP', '),', 'DX', 'addloop', ':', '//', 'CX:BX', '=', 'DX:AX', '(*addr)', '+', 'DI:SI', '(delta)', 'MOVL', 'AX', ',', 'BX', 'MOVL', 'DX', ',', 'CX', 'ADDL', 'SI', ',', 'BX', 'ADCL', 'DI', ',', 'CX', '//', 'if', '*addr', '==', 'DX:AX', '{', '//', '*addr', '=', 'CX:BX', '//', '}', 'else', '{', '//', 'DX:AX', '=', '*addr', '//', '}', '//', 'all', 'in', 'one', 'instruction', 'LOCK', 'CMPXCHG8B', '0', '(', 'BP', ')', 'JNZ', 'addloop', '//', 'success', '//', 'return', 'CX:BX', 'MOVL', 'BX', ',', 'new_lo', '+', '12', '(', 'FP', ')', 'MOVL', 'CX', ',', 'new_hi', '+', '16', '(', 'FP', ')', 'RET', 'That', 'may', 'open', 'the', 'question:', 'why', 'not', 'use', 'a', 'struct', 'with', 'a', 'lock?', 'Edit', 'to', 'answer', 'question', 'in', 'comments:', 'Yes,', 'using', 'a', '32-bit', 'integer', 'would', 'result', 'in', 'actual', 'atomic', 'operations', 'on', 'all', 'Go-supported', 'architectures', 'because', 'they', 'all', 'support', 'XADDL', '(or', 'analog)', 'to', 'the', 'best', 'of', 'my', 'knowledge.']"
514,30425069,"There is no difference except for the amount of typing you have to do. A good sized program or package can easily have a dozen or more imported packages so why keep typing the same word time and again when you can achieve the same with a pair of ().

Though most people probably use GoImports nowadays anyway.
","['There', 'is', 'no', 'difference', 'except', 'for', 'the', 'amount', 'of', 'typing', 'you', 'have', 'to', 'do.', 'A', 'good', 'sized', 'program', 'or', 'package', 'can', 'easily', 'have', 'a', 'dozen', 'or', 'more', 'imported', 'packages', 'so', 'why', 'keep', 'typing', 'the', 'same', 'word', 'time', 'and', 'again', 'when', 'you', 'can', 'achieve', 'the', 'same', 'with', 'a', 'pair', 'of', '().', 'Though', 'most', 'people', 'probably', 'use', 'GoImports', 'nowadays', 'anyway.']"
515,30427459,"

both will produce the same result.
","['There', 'is', 'absolutely', 'no', 'difference', 'for', 'a', 'go', 'compiler.', 'The', 'difference', 'is', 'only', 'for', 'a', 'go', 'programmer', 'in', 'how', 'many', 'times', 'he', 'has', 'to', 'copy/type', 'import.', 'You', 'can', 'look', 'at', 'it', 'in', 'the', 'same', 'way', 'as:', 'func', 'f1', '(', 'n1', ',', 'n2', ',', 'n3', 'int', '){', '...', '}', 'vs', 'func', 'f1', '(', 'n1', 'int', ',', 'n2', 'int', ',', 'n3', 'int', '){', '...', '}', 'or', 'var', 'n1,', 'n2,', 'n3', 'int', 'vs', 'var', 'n1', 'int', 'var', 'n2', 'int', 'var', 'n3', 'int', 'both', 'will', 'produce', 'the', 'same', 'result.']"
516,30474723,"

Or use an external library like Gorilla MUX.
","['http.HandleFunc()', 'can', 'not', 'be', 'used', 'to', 'register', 'a', 'pattern', 'to', 'match', 'a', 'regular', 'expression.', 'In', 'short,', 'the', 'pattern', 'specified', 'at', 'HandleFunc()', 'can', 'match', 'a', 'fixed,', 'rooted', 'path', '(like', '/favico.ico)', 'or', 'rooted', 'subtrees', '(like', '/images/),', 'longer', 'patterns', 'take', 'precedence', 'over', 'shorter', 'ones.', 'You', 'can', 'find', 'more', 'details', 'at', 'the', 'doc', 'of', 'the', 'ServeMux', 'type.', 'What', 'you', 'can', 'do', 'is', 'register', 'your', 'handler', 'to', 'a', 'rooted', 'subtree', 'which', 'may', 'be', 'everything', 'with', 'the', '/', 'pattern,', 'and', 'inside', 'your', 'handler', 'you', 'can', 'do', 'further', 'regexp', 'matching', 'and', 'routing.', 'For', 'example:', 'func', 'main', '()', '{', 'http.HandleFunc(""/"", route)', '// Match everything', 'http.ListenAndServe("":8080"", nil)', '}', 'var', 'rNum', '=', 'regexp.MustCompile(`\\d`)  // Has digit(s)', 'var', 'rAbc', '=', 'regexp.MustCompile(`abc`)', '// Contains ""abc""', 'func', 'route', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'switch', '{', 'case', 'rNum.MatchString(r.URL.Path)', ':', 'digits', '(', 'w', ',', 'r', ')', 'case', 'rAbc.MatchString(r.URL.Path)', ':', 'abc', '(', 'w', ',', 'r', ')', 'default', ':', 'w.Write([]byte(""Unknown Pattern""))', '}', '}', 'func', 'digits', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'w.Write([]byte(""Has digits""))', '}', 'func', 'abc', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'w.Write([]byte(""Has abc""))', '}', 'Or', 'use', 'an', 'external', 'library', 'like', 'Gorilla', 'MUX.']"
517,30474731,"Golang doesn't have built-in regex support for URL matching. And it's somewhat complicated to implement from scratch.

Maybe using a framework would be a better choice, such as beego or martin, etc.
","['Golang', ""doesn't"", 'have', 'built-in', 'regex', 'support', 'for', 'URL', 'matching.', 'And', ""it's"", 'somewhat', 'complicated', 'to', 'implement', 'from', 'scratch.', 'Maybe', 'using', 'a', 'framework', 'would', 'be', 'a', 'better', 'choice,', 'such', 'as', 'beego', 'or', 'martin,', 'etc.']"
518,30489243," is being built from the copy on Github, not from the local copy. The most recent commit of the api package doesn't have the extraneous fmt statements. Also, the log statement in main.go works fine, as does the fmt.Fprintf already in the api package. Try to verify the api package is getting built from the source you think it is. 

EDIT 6/1/2015: 

All my tests indicate this is a problem stemming from having an internal subpackage, and the remote service having trouble with that. The api package is not getting built from the local copy. fmt.Print works just fine from main.go, and moving GetIP from the api package to the main package lets fmt print just fine to stdout during web requests. 

Basically, all changes made to the local api subpackage are getting ignored.

The EB logs probably say something about which packages are being downloaded remotely; mine did.

I'm not a Godep pro, so maybe a Godep pro can elaborate. But FWIW, it seems like it might be related to this issue, tangentially. It might also be a problem with the remote service not building with godep go build, but like I said, I'm not a Godep pro, so I'm unsure.
","['I', 'think', 'import', '""github.com/rdegges/ipify-api/api""', 'is', 'being', 'built', 'from', 'the', 'copy', 'on', 'Github,', 'not', 'from', 'the', 'local', 'copy.', 'The', 'most', 'recent', 'commit', 'of', 'the', 'api', 'package', ""doesn't"", 'have', 'the', 'extraneous', 'fmt', 'statements.', 'Also,', 'the', 'log', 'statement', 'in', 'main.go', 'works', 'fine,', 'as', 'does', 'the', 'fmt.Fprintf', 'already', 'in', 'the', 'api', 'package.', 'Try', 'to', 'verify', 'the', 'api', 'package', 'is', 'getting', 'built', 'from', 'the', 'source', 'you', 'think', 'it', 'is.', 'EDIT', '6/1/2015:', 'All', 'my', 'tests', 'indicate', 'this', 'is', 'a', 'problem', 'stemming', 'from', 'having', 'an', 'internal', 'subpackage,', 'and', 'the', 'remote', 'service', 'having', 'trouble', 'with', 'that.', 'The', 'api', 'package', 'is', 'not', 'getting', 'built', 'from', 'the', 'local', 'copy.', 'fmt.Print', 'works', 'just', 'fine', 'from', 'main.go,', 'and', 'moving', 'GetIP', 'from', 'the', 'api', 'package', 'to', 'the', 'main', 'package', 'lets', 'fmt', 'print', 'just', 'fine', 'to', 'stdout', 'during', 'web', 'requests.', 'Basically,', 'all', 'changes', 'made', 'to', 'the', 'local', 'api', 'subpackage', 'are', 'getting', 'ignored.', 'The', 'EB', 'logs', 'probably', 'say', 'something', 'about', 'which', 'packages', 'are', 'being', 'downloaded', 'remotely;', 'mine', 'did.', ""I'm"", 'not', 'a', 'Godep', 'pro,', 'so', 'maybe', 'a', 'Godep', 'pro', 'can', 'elaborate.', 'But', 'FWIW,', 'it', 'seems', 'like', 'it', 'might', 'be', 'related', 'to', 'this', 'issue,', 'tangentially.', 'It', 'might', 'also', 'be', 'a', 'problem', 'with', 'the', 'remote', 'service', 'not', 'building', 'with', 'godep', 'go', 'build,', 'but', 'like', 'I', 'said,', ""I'm"", 'not', 'a', 'Godep', 'pro,', 'so', ""I'm"", 'unsure.']"
519,30503061,"MyFunc0 is a function declaration (https://golang.org/ref/spec#Function_declarations)

MyFunc1 is not a function declaration. It is a variable (https://golang.org/ref/spec#Variable_declarations) of type func (see https://golang.org/ref/spec#Function_types, https://golang.org/ref/spec#Function_literals). It has an initial value, but can be changed to hold a different value/function (as long as function signatures match).
","['is', 'being', 'built', 'from', 'the', 'copy', 'on', 'Github,', 'not', 'from', 'the', 'local', 'copy.', 'The', 'most', 'recent', 'commit', 'of', 'the', 'api', 'package', ""doesn't"", 'have', 'the', 'extraneous', 'fmt', 'statements.', 'Also,', 'the', 'log', 'statement', 'in', 'main.go', 'works', 'fine,', 'as', 'does', 'the', 'fmt.Fprintf', 'already', 'in', 'the', 'api', 'package.', 'Try', 'to', 'verify', 'the', 'api', 'package', 'is', 'getting', 'built', 'from', 'the', 'source', 'you', 'think', 'it', 'is.', 'EDIT', '6/1/2015:', 'All', 'my', 'tests', 'indicate', 'this', 'is', 'a', 'problem', 'stemming', 'from', 'having', 'an', 'internal', 'subpackage,', 'and', 'the', 'remote', 'service', 'having', 'trouble', 'with', 'that.', 'The', 'api', 'package', 'is', 'not', 'getting', 'built', 'from', 'the', 'local', 'copy.', 'fmt.Print', 'works', 'just', 'fine', 'from', 'main.go,', 'and', 'moving', 'GetIP', 'from', 'the', 'api', 'package', 'to', 'the', 'main', 'package', 'lets', 'fmt', 'print', 'just', 'fine', 'to', 'stdout', 'during', 'web', 'requests.', 'Basically,', 'all', 'changes', 'made', 'to', 'the', 'local', 'api', 'subpackage', 'are', 'getting', 'ignored.', 'The', 'EB', 'logs', 'probably', 'say', 'something', 'about', 'which', 'packages', 'are', 'being', 'downloaded', 'remotely;', 'mine', 'did.', ""I'm"", 'not', 'a', 'Godep', 'pro,', 'so', 'maybe', 'a', 'Godep', 'pro', 'can', 'elaborate.', 'But', 'FWIW,', 'it', 'seems', 'like', 'it', 'might', 'be', 'related', 'to', 'this', 'issue,', 'tangentially.', 'It', 'might', 'also', 'be', 'a', 'problem', 'with', 'the', 'remote', 'service', 'not', 'building', 'with', 'godep', 'go', 'build,', 'but', 'like', 'I', 'said,', ""I'm"", 'not', 'a', 'Godep', 'pro,', 'so', ""I'm"", 'unsure.']"
520,30528755,"

I hope it helps somebody else having problems.
","['After', 'a', 'lot', 'of', 'trial', 'and', 'error,', 'both', 'above', 'answers', 'helped', 'me', 'in', 'coming', 'up', 'with', 'what', 'worked', 'for', 'me.', 'I', 'have', 'static', 'folder', 'in', 'web', ""app's"", 'root', 'directory.', 'Along', 'with', 'PathPrefix', 'I', 'had', 'to', 'use', 'StripPrefix', 'for', 'getting', 'route', 'to', 'work', 'recursively.', 'package', 'main', 'import', '(', '""log""', '""net/http""', '""github.com/gorilla/mux""', ')', 'func', 'main', '()', '{', 'r', ':=', 'mux.NewRouter()', 's', ':=', 'http.StripPrefix(""/static/"", http.FileServer(http.Dir(""./static/"")))', 'r.PathPrefix(""/static/"").Handler(s)', 'http.Handle(""/"", r)', 'err', ':=', 'http.ListenAndServe("":8081"", nil)', '}', 'I', 'hope', 'it', 'helps', 'somebody', 'else', 'having', 'problems.']"
521,30559462,". If the library had been written that way, it would pick up the correct paths from foobar's pkgconfig definition.

I realise its not a direct answer to the question, and that pkgconfig isn't exactly a native windows tool... I'd be interested to hear if any other solutions exist.
","['This', 'is', 'kind', 'of', 'the', 'role', 'filled', 'by', 'cgo', 'pkgconfig', ':', 'foobar', '.', 'If', 'the', 'library', 'had', 'been', 'written', 'that', 'way,', 'it', 'would', 'pick', 'up', 'the', 'correct', 'paths', 'from', ""foobar's"", 'pkgconfig', 'definition.', 'I', 'realise', 'its', 'not', 'a', 'direct', 'answer', 'to', 'the', 'question,', 'and', 'that', 'pkgconfig', ""isn't"", 'exactly', 'a', 'native', 'windows', 'tool...', ""I'd"", 'be', 'interested', 'to', 'hear', 'if', 'any', 'other', 'solutions', 'exist.']"
522,30600955,"

Note: after further testing, this function doesn't work perfectly. I would suggest using the solution posted by @IvanTung, and welcome any edits from anyone who can get mine to work perfectly.
","['If', 'you', ""don't"", 'want', 'to', 'use', 'a', 'library', '(for', 'whatever', 'reason),', 'I', 'knocked', 'this', 'up.', 'It', 'seems', 'to', 'work', 'and', 'can', 'use', 'any', 'specified', 'rune', 'as', 'a', 'delimiter:', 'import', '(', '""strconv""', ')', 'func', 'delimitNumeral', '(', 'i', 'int', ',', 'delim', 'rune', ')', 'string', '{', 'src', ':=', 'strconv.Itoa(i)', 'strLen', ':=', 'utf8.RuneCountInString(src)', 'outStr', ':=', '""""', 'digitCount', ':=', '0', 'for', 'i', ':=', 'strLen', '-', '1', ';', 'i', '>=', '0', ';', 'i', '--', '{', 'outStr', '=', 'src', '[', 'i', ':', 'i', '+', '1', ']', '+', 'outStr', 'if', 'digitCount', '==', '2', '{', 'outStr', '=', 'string', '(', 'delim', ')', '+', 'outStr', 'digitCount', '=', '0', '}', 'else', '{', 'digitCount', '++', '}', '}', 'return', 'outStr', '}', 'Note:', 'after', 'further', 'testing,', 'this', 'function', ""doesn't"", 'work', 'perfectly.', 'I', 'would', 'suggest', 'using', 'the', 'solution', 'posted', 'by', '@IvanTung,', 'and', 'welcome', 'any', 'edits', 'from', 'anyone', 'who', 'can', 'get', 'mine', 'to', 'work', 'perfectly.']"
523,30620573,"
","['I', 'have', 'this', 'code', 'here', 'that', 'works', 'quite', 'nice', 'and', 'is', 're-usable.', 'func', 'ServeStatic', '(', 'router', '*', 'mux', '.', 'Router', ',', 'staticDirectory', 'string', ')', '{', 'staticPaths', ':=', 'map', '[', 'string', ']', 'string', '{', '""styles""', ':', 'staticDirectory', '+', '""/styles/""', ',', '""bower_components""', ':', 'staticDirectory', '+', '""/bower_components/""', ',', '""images""', ':', 'staticDirectory', '+', '""/images/""', ',', '""scripts""', ':', 'staticDirectory', '+', '""/scripts/""', ',', '}', 'for', 'pathName', ',', 'pathValue', ':=', 'range', 'staticPaths', '{', 'pathPrefix', ':=', '""/""', '+', 'pathName', '+', '""/""', 'router.PathPrefix(pathPrefix)', '.', 'Handler', '(', 'http', '.', 'StripPrefix', '(', 'pathPrefix', ',', 'http.FileServer(http.Dir(pathValue))))', '}', '}', 'router', ':=', 'mux.NewRouter()', 'ServeStatic', '(', 'router', ',', '""/static/""', ')']"
524,30737590,"

Add the modifications we've made to $PATH and $GOPATH to your $HOME/.bash_profile to make them persist between reboots.
","['Using', 'brew', 'I', 'installed', 'it', 'using', 'brew.', '$', 'brew', 'install', 'go', 'When', 'it', 'was', 'done', 'if', 'you', 'run', 'this', 'brew', 'command', ""it'll"", 'show', 'the', 'following', 'info:', '$', 'brew', 'info', 'go', 'go', ':', 'stable', '1', '.', '4.2 (bottled)', ',', 'HEAD', 'Go', 'programming', 'environment', 'https', '://', 'go', 'lang', '.', 'org', '/usr/local/Cellar/go/1.4.2', '(', '4676', 'files', ',', '158', 'M', ')', '*', 'Poured', 'from', 'bottle', 'From', ':', 'https', '://', 'github', '.', 'com/Homebrew/homebrew/blob/master/Library/Formula/go.rb', '==>', 'Options', '--', 'with', '-', 'cc', '-', 'all', 'Build', 'with', 'cross', '-', 'compilers', 'and', 'runtime', 'support', 'for', 'all', 'supported', 'platforms', '--', 'with', '-', 'cc', '-', 'common', 'Build', 'with', 'cross', '-', 'compilers', 'and', 'runtime', 'support', 'for', 'darwin', ',', 'linux', 'and', 'windows', '--', 'without', '-', 'cgo', 'Build', 'without', 'cgo', '--', 'without', '-', 'go', 'doc', 'go', 'doc', 'will', 'not', 'be', 'installed', 'for', 'you', '--', 'without', '-', 'vet', 'vet', 'will', 'not', 'be', 'installed', 'for', 'you', '--', 'HEAD', 'Install', 'HEAD', 'version', '==>', 'Caveats', 'As', 'of', 'go', '1', '.', '2', ',', 'a', 'valid', 'GOPATH', 'is', 'required', 'to', 'use', 'the', 'go', 'get', 'command', ':', 'https', '://', 'go', 'lang', '.', 'org/doc/code.html#GOPATH', 'You', 'may', 'wish', 'to', 'add', 'the', 'GOROOT', '-', 'based', 'install', 'location', 'to', 'your', 'PATH', ':', 'export', 'PATH', '=$', 'PATH', ':/', 'usr/local/opt/go/libexec/bin', 'The', 'important', 'pieces', 'there', 'are', 'these', 'lines:', '/usr/local/Cellar/go/1.4.2', '(4676', 'files,', '158M)', '*', 'export', 'PATH=$PATH:/usr/local/opt/go/libexec/bin', 'Setting', 'up', ""GO's"", 'environment', 'That', 'shows', 'where', 'GO', 'was', 'installed.', 'We', 'need', 'to', 'do', 'the', 'following', 'to', 'setup', ""GO's"", 'environment:', '$', 'export', 'PATH', '=$', 'PATH', ':/', 'usr/local/opt/go/libexec/bin', '$', 'export', 'GOPATH', '=/', 'usr/local/opt/go/bin', 'You', 'can', 'then', 'check', 'using', 'GO', 'to', 'see', 'if', ""it's"", 'configured', 'properly:', '$', 'go', 'env', 'GOARCH', '=', '""amd64""', 'GOBIN', '=', '""""', 'GOCHAR', '=', '""6""', 'GOEXE', '=', '""""', 'GOHOSTARCH', '=', '""amd64""', 'GOHOSTOS', '=', '""darwin""', 'GOOS', '=', '""darwin""', 'GOPATH', '=', '""/usr/local/opt/go/bin""', 'GORACE', '=', '""""', 'GOROOT', '=', '""/usr/local/Cellar/go/1.4.2/libexec""', 'GOTOOLDIR', '=', '""/usr/local/Cellar/go/1.4.2/libexec/pkg/tool/darwin_amd64""', 'CC', '=', '""clang""', 'GOGCCFLAGS', '=', '""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common""', 'CXX', '=', '""clang++""', 'CGO_ENABLED', '=', '""1""', 'Setting', 'up', 'json2csv', 'Looks', 'good,', 'so', 'lets', 'install', 'json2csv:', '$', 'go', 'get', 'github', '.', 'com/jehiah/json2csv', '$', 'What', 'just', 'happened?', 'It', 'installed', 'it.', 'You', 'can', 'check', 'like', 'this:', '$', '$', 'ls', '-', 'l', '$', 'GOPATH/bin', 'total', '5248', '-', 'rwxr', '-', 'xr', '-', 'x', '1', 'sammingolelli', 'staff', '2686320', 'Jun', '9', '12', ':', '28', 'json2csv', 'OK,', 'so', 'why', ""can't"", 'I', 'type', 'json2csv', 'in', 'my', 'shell?', ""That's"", 'because', 'the', '/bin', 'directory', 'under', '$GOPATH', ""isn't"", 'on', 'your', '$PATH.', '$', 'type', '-', 'f', 'json2csv', '-', 'bash', ':', 'type', ':', 'json2csv', ':', 'not', 'found', 'So', ""let's"", 'temporarily', 'add', 'it:', '$', 'export', 'PATH', '=$', 'GOPATH/bin:$PATH', 'And', 're-check:', '$', 'type', '-', 'f', 'json2csv', 'json2csv', 'is', 'hashed', '(/', 'usr/local/opt/go/bin/bin/json2csv)', 'Now', ""it's"", 'there:', '$', 'json2csv', '--', 'help', 'Usage', 'of', 'json2csv', ':', '-', 'd', '=', '"",""', ':', 'delimiter', 'used', 'for', 'output', 'values', '-', 'i', '=', '""""', ':', '/path/to/input.json', '(', 'optional', ';', 'default', 'is', 'stdin', ')', '-', 'k', '=[]:', 'fields', 'to', 'output', '-', 'o', '=', '""""', ':', '/path/to/output.json', '(', 'optional', ';', 'default', 'is', 'stdout', ')', '-', 'p', '=', 'false', ':', 'prints', 'header', 'to', 'output', '-', 'v', '=', 'false', ':', 'verbose', 'output', '(', 'to', 'stderr', ')', '-', 'version', '=', 'false', ':', 'print', 'version', 'string', 'Add', 'the', 'modifications', ""we've"", 'made', 'to', '$PATH', 'and', '$GOPATH', 'to', 'your', '$HOME/.bash_profile', 'to', 'make', 'them', 'persist', 'between', 'reboots.']"
525,30744362,"
","['Running', 'wbemtest.exe', 'as', 'an', 'administrator', 'you', 'can', 'open', 'the', 'MSFT_DSCLocalConfigurationManager', 'class', 'and', 'use', 'Show', 'MOF', 'to', 'see', ""it's"", 'class', 'definition:', '[', 'ClassVersion', '(', '""1.0.0""', '),', 'locale', '(', '1033', '),', 'dynamic', ':', 'ToInstance', ',', 'provider', '(', '""dsccore""', '):', 'ToInstance', ']', 'class', 'MSFT_DSCLocalConfigurationManager', '{', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'SendConfiguration', '([', 'In', ',', 'Octetstring', ':', 'DisableOverride', 'ToSubClass', ']', 'uint8', 'ConfigurationData', '[],', '[', 'In', ']', 'boolean', 'for', 'ce', ');', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'SendConfigurationApply', '([', 'In', ',', 'Octetstring', ':', 'DisableOverride', 'ToSubClass', ']', 'uint8', 'ConfigurationData', '[],', '[', 'In', ']', 'boolean', 'for', 'ce', ');', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'GetConfiguration', '([', 'In', ',', 'Octetstring', ':', 'DisableOverride', 'ToSubClass', ']', 'uint8', 'configurationData', '[],', '[', 'Stream', ':', 'DisableOverride', 'ToSubClass', ',', 'EmbeddedInstance', '(', '""OMI_BaseResource""', '):', 'ToSubClass', ',', 'Out', ']', 'OMI_BaseResource', 'configurations', '[]);', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'TestConfiguration', '([', 'In', ',', 'Octetstring', ':', 'DisableOverride', 'ToSubClass', ']', 'uint8', 'configurationData', '[],', '[', 'Out', ']', 'boolean', 'InDesiredState', ',', '[', 'Out', ',', 'EmbeddedInstance', '(', '""MSFT_ResourceInDesiredState""', '):', 'ToSubClass', ']', 'MSFT_ResourceInDesiredState', 'ResourcesInDesiredState', '[],', '[', 'Out', ',', 'EmbeddedInstance', '(', '""MSFT_ResourceNotInDesiredState""', '):', 'ToSubClass', ']', 'MSFT_ResourceNotInDesiredState', 'ResourcesNotInDesiredState', '[]);', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'ApplyConfiguration', '([', 'In', ']', 'boolean', 'for', 'ce', ');', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'SendMetaConfigurationApply', '([', 'In', ',', 'Octetstring', ':', 'DisableOverride', 'ToSubClass', ']', 'uint8', 'ConfigurationData', '[]);', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'GetMetaConfiguration', '([', 'Out', ',', 'EmbeddedInstance', '(', '""MSFT_DSCMetaConfiguration""', '):', 'ToSubClass', ']', 'MSFT_DSCMetaConfiguration', 'MetaConfiguration', ');', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'RollBack', '([', 'In', ']', 'uint8', 'configurationNumber', ');', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'PerformRequiredConfigurationChecks', '([', 'In', ']', 'uint32', 'Flags', ');', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'StopConfiguration', '([', 'In', ']', 'boolean', 'for', 'ce', ');', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'GetConfigurationStatus', '([', 'In', ']', 'uint32', 'Flags', ',', '[', 'Stream', ':', 'DisableOverride', 'ToSubClass', ',', 'EmbeddedInstance', '(', '""MSFT_DSCConfigurationStatus""', '):', 'ToSubClass', ',', 'Out', ']', 'MSFT_DSCConfigurationStatus', 'configurationStatus', '[]);', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'SendConfigurationApplyAsync', '([', 'In', ',', 'Octetstring', ':', 'DisableOverride', 'ToSubClass', ']', 'uint8', 'ConfigurationData', '[],', '[', 'In', ']', 'boolean', 'for', 'ce', ',', '[', 'In', ']', 'string', 'jobId', ');', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'GetConfigurationResultOutput', '([', 'In', ']', 'string', 'jobId', ',', '[', 'In', ',', 'Octetstring', ':', 'DisableOverride', 'ToSubClass', ']', 'uint8', 'resumeOutputBookmark', '[],', '[', 'Out', ',', 'Stream', ':', 'DisableOverride', 'ToSubClass', ',', 'EmbeddedInstance', '(', '""MSFT_DSCConfigurationOutput""', '):', 'ToSubClass', ']', 'MSFT_DSCConfigurationOutput', 'output', '[]);', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'RemoveConfiguration', '([', 'In', ']', 'uint32', 'Stage', ',', '[', 'In', ']', 'boolean', 'Force', ');', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'ResourceGet', '([', 'In', ']', 'string', 'ResourceType', ',', '[', 'In', ']', 'string', 'ModuleName', ',', '[', 'In', ',', 'Octetstring', ':', 'DisableOverride', 'ToSubClass', ']', 'uint8', 'resourceProperty', '[],', '[', 'Stream', ':', 'DisableOverride', 'ToSubClass', ',', 'EmbeddedInstance', '(', '""OMI_BaseResource""', '):', 'ToSubClass', ',', 'Out', ']', 'OMI_BaseResource', 'configurations', '[]);', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'ResourceSet', '([', 'In', ']', 'string', 'ResourceType', ',', '[', 'In', ']', 'string', 'ModuleName', ',', '[', 'In', ',', 'Octetstring', ':', 'DisableOverride', 'ToSubClass', ']', 'uint8', 'resourceProperty', '[],', '[', 'Out', ']', 'boolean', 'RebootRequired', ');', '[', 'implemented', ',', 'static', ':', 'DisableOverride', 'ToSubClass', ']', 'uint32', 'ResourceTest', '([', 'In', ']', 'string', 'ResourceType', ',', '[', 'In', ']', 'string', 'ModuleName', ',', '[', 'In', ',', 'Octetstring', ':', 'DisableOverride', 'ToSubClass', ']', 'uint8', 'resourceProperty', '[],', '[', 'Out', ']', 'boolean', 'InDesiredState', ');', '};', 'GetConfiguration', 'is', 'a', 'method', 'used', 'to', 'return', 'the', 'current', 'configuration', 'document,', 'not', 'the', 'status', 'of', 'the', 'last', 'DSC', 'run.', 'You', 'may', 'be', 'using', 'an', 'older', 'version', 'of', 'DSC,', 'make', 'sure', '$psversiontable', 'in', 'powershell', 'shows', 'at', 'least', '5.0.10018.0.', 'wbemtest.exe', 'will', 'also', 'let', 'you', 'use', 'IWbemServices', 'to', 'execute', 'a', 'method', '(similar', 'to', 'the', 'code', 'you', 'have', 'above)', 'and', 'it', 'shows', 'the', 'output', 'parameters', 'are', 'of', 'type:', '[', 'abstract', ']', 'class', '__PARAMETERS', '{', '[', 'Stream', ':', 'DisableOverride', 'ToSubClass', ',', 'EmbeddedInstance', '(', '""MSFT_DSCConfigurationStatus""', '):', 'ToSubClass', ',', 'Out', ',', 'ID', '(', '1', '):', 'DisableOverride', 'ToInstance', ']', 'MSFT_DSCConfigurationStatus', 'configurationStatus', '[]', '=', '{', 'instance', 'of', 'MSFT_DSCConfigurationStatus', '{', 'DurationInSeconds', '=', '33', ';', 'HostName', '=', '""GBRAY02""', ';']"
526,30793913,"Use https://github.com/dustin/go-humanize .. it has a bunch of helpers to deal with those things.  In addition to bytes as MiB, MB, and other goodies.
","['Use', 'https://github.com/dustin/go-humanize', '..', 'it', 'has', 'a', 'bunch', 'of', 'helpers', 'to', 'deal', 'with', 'those', 'things.', 'In', 'addition', 'to', 'bytes', 'as', 'MiB,', 'MB,', 'and', 'other', 'goodies.']"
527,30857066,"
","['Ended', 'up', 'using', 'a', 'special', '""boolean""', 'type,', 'and', 'where', 'I', 'was', 'using', 'a', 'normal', 'bool,', 'swapped', 'for', 'this:', 'type', 'ConvertibleBoolean', 'bool', 'func', '(', 'bit', 'ConvertibleBoolean', ')', 'UnmarshalJSON', '(', 'data', '[]', 'byte', ')', 'error', '{', 'asString', ':=', 'string', '(', 'data', ')', 'if', 'asString', '==', '""1""', '||', 'asString', '==', '""true""', '{', 'bit', '=', 'true', '}', 'else', 'if', 'asString', '==', '""0""', '||', 'asString', '==', '""false""', '{', 'bit', '=', 'false', '}', 'else', '{', 'return', 'errors.New(fmt.Sprintf(""Boolean unmarshal error: invalid input %s"", asString))', '}', 'return', 'nil', '}']"
528,30950396,"

the main error was capital letter for your struct.
","['your', 'yaml', 'file', 'must', 'be', 'hits', ':', '5', 'time', ':', '5000000', 'your', 'code', 'should', 'look', 'like', 'this:', 'package', 'main', 'import', '(', '""fmt""', '""gopkg.in/yaml.v2""', '""io/ioutil""', '""log""', ')', 'type', 'conf', 'struct', '{', 'Hits', 'int64', 'yaml', ':', '""hits""', 'Time', 'int64', 'yaml', ':', '""time""', '}', 'func', '(', 'c', '*', 'conf', ')', 'getConf', '()', '*', 'conf', '{', 'yamlFile', ',', 'err', ':=', 'ioutil.ReadFile(""conf.yaml"")', 'if', 'err', '!=', 'nil', '{', 'log.Printf(""yamlFile.Get err   #%v "", err)', '}', 'err', '=', 'yaml.Unmarshal(yamlFile, c)', 'if', 'err', '!=', 'nil', '{', 'log.Fatalf(""Unmarshal: %v"", err)', '}', 'return', 'c', '}', 'func', 'main', '()', '{', 'var', 'c', 'conf', 'c.getConf()', 'fmt.Println(c)', '}', 'the', 'main', 'error', 'was', 'capital', 'letter', 'for', 'your', 'struct.']"
529,30956460,"

Playground: http://play.golang.org/p/oFBePRQzhN.
","[""You're"", 'misusing', 'the', 'Sum', 'method.', 'The', 'docs', 'for', 'the', 'hash.Hash', 'interface', 'clearly', 'say', 'that', 'Sum', 'appends', 'the', 'current', 'hash', 'to', 'b', 'and', 'returns', 'the', 'resulting', 'slice.', '(Emphasis', 'added.)', 'You', 'need', 'to', 'either', 'write', 'the', 'data', 'to', 'the', 'hash', 'and', 'use', 'h.Sum', 'like', 'this', 'h.Write([]byte(password))', 'b', ':=', 'h.Sum(nil)', 'or', 'just', 'use', 'sha256.Sum256', 'h', ':=', 'sha256.Sum256([]byte(password))', 'Playground:', 'http://play.golang.org/p/oFBePRQzhN.']"
530,31046325,"

The first if statement takes care of the first optional, ""incomplete"" group which is less than 3 digits if exists, and the subsequent for loop handles the rest, copying 3 digits in each iteration and appending a comma (',') grouping sign if there are more digits.
","['The', 'fmt', 'package', 'does', 'not', 'support', 'grouping', 'decimals.', 'We', 'have', 'to', 'implement', 'one', 'ourselves', '(or', 'use', 'an', 'existing', 'one).', 'The', 'Code', 'Here', 'is', 'a', 'compact', 'and', 'really', 'efficient', 'solution', '(see', 'explanation', 'after):', 'Try', 'it', 'on', 'the', 'Go', 'Playground.', 'func', 'Format', '(', 'n', 'int64', ')', 'string', '{', 'in', ':=', 'strconv.FormatInt(n, 10)', 'out', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'in', ')+(', 'len', '(', 'in', ')-', '2', '+', 'int', '(', 'in', '[', '0', ']/', ""'0'"", '))/', '3', ')', 'if', 'in', '[', '0', ']', '==', ""'-'"", '{', 'in', ',', 'out', '[', '0', ']', '=', 'in', '[', '1', ':],', ""'-'"", '}', 'for', 'i', ',', 'j', ',', 'k', ':=', 'len', '(', 'in', ')-', '1', ',', 'len', '(', 'out', ')-', '1', ',', '0', ';', ';', 'i', ',', 'j', '=', 'i', '-', '1', ',', 'j', '-', '1', '{', 'out', '[', 'j', ']', '=', 'in', '[', 'i', ']', 'if', 'i', '==', '0', '{', 'return', 'string', '(', 'out', ')', '}', 'if', 'k', '++;', 'k', '==', '3', '{', 'j', ',', 'k', '=', 'j', '-', '1', ',', '0', 'out', '[', 'j', ']', '=', ""','"", '}', '}', '}', 'Testing', 'it:', 'for', '_,', 'v', ':=', 'range', '[]int64{0,', '1,', '12,', '123,', '1234,', '123456789}', '{', 'fmt.Printf(""%10d', '=', '%12s\\n"",', 'v,', 'Format(v))', 'fmt.Printf(""%10d', '=', '%12s\\n"",', '-v,', 'Format(-v))', '}', 'Output:', '0', '=', '0', '0', '=', '0', '1', '=', '1', '-1', '=', '-1', '12', '=', '12', '-12', '=', '-12', '123', '=', '123', '-123', '=', '-123', '1234', '=', '1,234', '-1234', '=', '-1,234', '123456789', '=', '123,456,789', '-123456789', '=', '-123,456,789', 'Explanation:', 'Basically', 'what', 'the', 'Format()', 'function', 'does', 'is', 'it', 'formats', 'the', 'number', 'without', 'grouping,', 'then', 'creates', 'a', 'big', 'enough', 'other', 'slice', 'and', 'copies', 'the', 'digits', 'of', 'the', 'number', 'inserting', 'comma', ""(',')"", 'grouping', 'symbol', 'when', 'necessary', '(after', 'groups', 'of', 'digits', 'of', '3', 'if', 'there', 'are', 'more', 'digits)', 'meanwhile', 'taking', 'care', 'of', 'the', 'negative', 'sign', 'to', 'be', 'preserved.', 'The', 'length', 'of', 'the', 'output:', 'It', 'is', 'basically', 'the', 'length', 'of', 'the', 'input', 'plus', 'the', 'number', 'of', 'grouping', 'signs', 'to', 'be', 'inserted.', 'The', 'number', 'of', 'grouping', 'signs', 'is:', 'numOfCommas', '=', '(numOfDigits', '-', '1)', '/', '3', 'Since', 'the', 'input', 'string', 'is', 'a', 'number', 'which', 'may', 'only', 'contain', 'digits', ""('0..9')"", 'and', 'optionally', 'a', 'negative', 'sign', ""('-'),"", 'the', 'characters', 'are', 'simply', 'mapped', 'to', 'bytes', 'in', 'a', '1-to-1', 'fashion', 'in', 'UTF-8', 'encoding', '(this', 'is', 'how', 'Go', 'stores', 'strings', 'in', 'memory).', 'So', 'we', 'can', 'simply', 'work', 'with', 'bytes', 'instead', 'of', 'runes.', 'So', 'the', 'number', 'of', 'digits', 'is', 'the', 'input', 'string', 'length,', 'optionally', 'minus', '1', 'for', 'the', 'sign', 'digit', ""'-'."", 'If', 'there', 'is', 'a', 'sign', 'digit,', 'it', 'will', 'be', 'in', 'in[0].', 'The', 'numerical', 'value', 'of', ""'-'"", 'is', '45,', 'while', 'the', 'numerical', 'value', 'of', 'digit', 'characters', ""'0'..'9'"", 'are', '48..57.', 'So', 'the', 'sign', 'character', 'is', 'less', 'than', 'the', 'possible', 'digits.', 'So', 'if', 'we', 'divide', 'the', 'first', 'character', '(there', 'is', 'always', 'at', 'least', '1', 'character)', 'by', ""'0',"", 'we', 'get', '0', 'if', 'it', 'is', 'a', 'negative', 'sign', 'and', '1', 'if', 'it', 'is', 'a', 'digit', '(integer', 'division).', 'So', 'the', 'number', 'of', 'digits', 'in', 'the', 'input', 'string', 'is:', 'numOfDigits', '=', 'len(in)', '-', '1', '+', ""int(in[0]/'0')"", 'And', 'therefore', 'the', 'number', 'of', 'grouping', 'signs:', 'numOfCommas', '=', '(len(in)', '-', '2', '+', ""int(in[0]/'0'))"", '/', '3', 'Therefore', 'the', 'output', 'slice', 'will', 'be:', 'out', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'in', ')+(', 'len', '(', 'in', ')-', '2', '+', 'int', '(', 'in', '[', '0', ']/', ""'0'"", '))/', '3', ')', 'Handling', 'the', 'negative', 'sign', 'character:', 'If', 'the', 'number', 'is', 'negative,', 'we', 'simply', 'slice', 'the', 'input', 'string', 'to', 'exclude', 'it', 'from', 'processing', 'and', 'we', 'manually', 'copy', 'the', 'sign', 'bit', 'to', 'the', 'output:', 'if', 'in[0]', '==', ""'-'"", '{', 'in,', 'out[0]', '=', 'in[1:],', ""'-'"", '}', 'And', 'therefore', 'the', 'rest', 'of', 'the', 'function', 'does', 'not', 'need', 'to', 'know/care', 'about', 'the', 'optional', 'negative', 'sign', 'character.', 'The', 'rest', 'of', 'the', 'function', 'is', 'a', 'for', 'loop', 'which', 'just', 'copies', 'the', 'bytes', '(digits)', 'of', 'the', 'number', 'from', 'the', 'input', 'string', 'to', 'the', 'output,', 'inserting', 'a', 'grouping', 'sign', ""(',')"", 'after', 'every', 'group', 'of', '3', 'digits', 'if', 'there', 'are', 'more', 'digits.', 'The', 'loop', 'goes', 'downward', 'so', ""it's"", 'easier', 'to', 'track', 'the', 'groups', 'of', '3', 'digits.', 'Once', 'done', '(no', 'more', 'digits),', 'the', 'output', 'byte', 'slice', 'is', 'returned', 'as', 'a', 'string.', 'Variations', 'Handling', 'negative', 'with', 'recursion', 'If', ""you're"", 'less', 'concerned', 'with', 'efficiency', 'and', 'more', 'about', 'readability,', 'you', 'might', 'like', 'this', 'version:', 'func', 'Format2(n', 'int64)', 'string', '{', 'if', 'n', '<', '0', '{', 'return', '""-""', '+', 'Format2(-n)', '}', 'in', ':=', 'strconv.FormatInt(n,', '10)', 'out', ':=', 'make([]byte,', 'len(in)+(len(in)-1)/3)', 'for', 'i,', 'j,', 'k', ':=', 'len(in)-1,', 'len(out)-1,', '0;', ';', 'i,', 'j', '=', 'i-1,', 'j-1', '{', 'out[j]', '=', 'in[i]', 'if', 'i', '==', '0', '{', 'return', 'string(out)', '}', 'if', 'k++;', 'k', '==', '3', '{', 'j,', 'k', '=', 'j-1,', '0', 'out[j]', '=', ""','"", '}', '}', '}', 'Basically', 'this', 'handles', 'negative', 'numbers', 'with', 'a', 'recursive', 'call:', 'if', 'the', 'number', 'is', 'negative,', 'calls', 'itself', '(recursive)', 'with', 'the', 'absolute', '(positive)', 'value', 'and', 'prepends', 'the', 'result', 'with', 'a', '""-""', 'string.', 'With', 'append()', 'slices', ""Here's"", 'another', 'version', 'using', 'the', 'builtin', 'append()', 'function', 'and', 'slice', 'operations.', 'Somewhat', 'easier', 'to', 'understand', 'but', 'not', 'so', 'good', 'performance-wise:', 'func', 'Format3(n', 'int64)', 'string', '{', 'if', 'n', '<', '0', '{', 'return', '""-""', '+', 'Format3(-n)', '}', 'in', ':=', '[]byte(strconv.FormatInt(n,', '10))', 'var', 'out', '[]byte', 'if', 'i', ':=', 'len(in)', '%', '3;', 'i', '!=', '0', '{', 'if', 'out,', 'in', '=', 'append(out,', 'in[:i]...),', 'in[i:];', 'len(in)', '>', '0', '{', 'out', '=', 'append(out,', ""',')"", '}', '}', 'for', 'len(in)', '>', '0', '{', 'if', 'out,', 'in', '=', 'append(out,', 'in[:3]...),', 'in[3:];', 'len(in)', '>', '0', '{', 'out', '=', 'append(out,', ""',')"", '}', '}', 'return', 'string(out)', '}', 'The', 'first', 'if', 'statement', 'takes', 'care', 'of', 'the', 'first', 'optional,', '""incomplete""', 'group', 'which', 'is', 'less', 'than', '3', 'digits', 'if', 'exists,', 'and', 'the', 'subsequent', 'for', 'loop', 'handles', 'the', 'rest,', 'copying', '3', 'digits', 'in', 'each', 'iteration', 'and', 'appending', 'a', 'comma', ""(',')"", 'grouping', 'sign', 'if', 'there', 'are', 'more', 'digits.', 'for', '_', ',', 'v', ':=', 'range', '[]', 'int64', '{', '0', ',', '1', ',', '12', ',', '123', ',', '1234', ',', '123456789', '}', '{', 'fmt.Printf(""%10d = %12s\\n"", v, Format(v))', 'fmt.Printf(""%10d = %12s\\n"", -v, Format(-v))', '}', 'Handling', 'the', 'negative', 'sign', 'character:', 'If', 'the', 'number', 'is', 'negative,', 'we', 'simply', 'slice', 'the', 'input', 'string', 'to', 'exclude', 'it', 'from', 'processing', 'and', 'we', 'manually', 'copy', 'the', 'sign', 'bit', 'to', 'the', 'output:', 'if', 'in[0]', '==', ""'-'"", '{', 'in,', 'out[0]', '=', 'in[1:],', ""'-'"", '}', 'And', 'therefore', 'the', 'rest', 'of', 'the', 'function', 'does', 'not', 'need', 'to', 'know/care', 'about', 'the', 'optional', 'negative', 'sign', 'character.', 'The', 'rest', 'of', 'the', 'function', 'is', 'a', 'for', 'loop', 'which', 'just', 'copies', 'the', 'bytes', '(digits)', 'of', 'the', 'number', 'from', 'the', 'input', 'string', 'to', 'the', 'output,', 'inserting', 'a', 'grouping', 'sign', ""(',')"", 'after', 'every', 'group', 'of', '3', 'digits', 'if', 'there', 'are', 'more', 'digits.', 'The', 'loop', 'goes', 'downward', 'so', ""it's"", 'easier', 'to', 'track', 'the', 'groups', 'of', '3', 'digits.', 'Once', 'done', '(no', 'more', 'digits),', 'the', 'output', 'byte', 'slice', 'is', 'returned', 'as', 'a', 'string.', 'Variations', 'Handling', 'negative', 'with', 'recursion', 'If', ""you're"", 'less', 'concerned', 'with', 'efficiency', 'and', 'more', 'about', 'readability,', 'you', 'might', 'like', 'this', 'version:', 'func', 'Format2(n', 'int64)', 'string', '{', 'if', 'n', '<', '0', '{', 'return', '""-""', '+', 'Format2(-n)', '}', 'in', ':=', 'strconv.FormatInt(n,', '10)', 'out', ':=', 'make([]byte,', 'len(in)+(len(in)-1)/3)', 'for', 'i,', 'j,', 'k', ':=', 'len(in)-1,', 'len(out)-1,', '0;', ';', 'i,', 'j', '=', 'i-1,', 'j-1', '{', 'out[j]', '=', 'in[i]', 'if', 'i', '==', '0', '{', 'return', 'string(out)', '}', 'if', 'k++;', 'k', '==', '3', '{', 'j,', 'k', '=', 'j-1,', '0', 'out[j]', '=', ""','"", '}', '}', '}', 'Basically', 'this', 'handles', 'negative', 'numbers', 'with', 'a', 'recursive', 'call:', 'if', 'the', 'number', 'is', 'negative,', 'calls', 'itself', '(recursive)', 'with', 'the', 'absolute', '(positive)', 'value', 'and', 'prepends', 'the', 'result', 'with', 'a', '""-""', 'string.', 'With', 'append()', 'slices', ""Here's"", 'another', 'version', 'using', 'the', 'builtin', 'append()', 'function', 'and', 'slice', 'operations.', 'Somewhat', 'easier', 'to', 'understand', 'but', 'not', 'so', 'good', 'performance-wise:', 'func', 'Format3(n', 'int64)', 'string', '{', 'if', 'n', '<', '0', '{', 'return', '""-""', '+', 'Format3(-n)', '}', 'in', ':=', '[]byte(strconv.FormatInt(n,', '10))', 'var', 'out', '[]byte', 'if', 'i', ':=', 'len(in)', '%', '3;', 'i', '!=', '0', '{', 'if', 'out,', 'in', '=', 'append(out,', 'in[:i]...),', 'in[i:];', 'len(in)', '>', '0', '{', 'out', '=', 'append(out,', ""',')"", '}', '}', 'for', 'len(in)', '>', '0', '{', 'if', 'out,', 'in', '=', 'append(out,', 'in[:3]...),', 'in[3:];', 'len(in)', '>', '0', '{', 'out', '=', 'append(out,', ""',')"", '}', '}', 'return', 'string(out)', '}', 'The', 'first', 'if', 'statement', 'takes', 'care', 'of', 'the', 'first', 'optional,', '""incomplete""', 'group', 'which', 'is', 'less', 'than', '3', 'digits', 'if', 'exists,', 'and', 'the', 'subsequent', 'for', 'loop', 'handles', 'the', 'rest,', 'copying', '3', 'digits', 'in', 'each', 'iteration', 'and', 'appending', 'a', 'comma', ""(',')"", 'grouping', 'sign', 'if', 'there', 'are', 'more', 'digits.', '0', '=', '0', '0', '=', '0', '1', '=', '1', '-', '1', '=', '-', '1', '12', '=', '12', '-', '12', '=', '-', '12', '123', '=', '123', '-', '123', '=', '-', '123', '1234', '=', '1', ',', '234', '-', '1234', '=', '-', '1', ',', '234', '123456789', '=', '123', ',', '456', ',', '789', '-', '123456789', '=', '-', '123', ',', '456', ',', '789', 'Handling', 'the', 'negative', 'sign', 'character:', 'If', 'the', 'number', 'is', 'negative,', 'we', 'simply', 'slice', 'the', 'input', 'string', 'to', 'exclude', 'it', 'from', 'processing', 'and', 'we', 'manually', 'copy', 'the', 'sign', 'bit', 'to', 'the', 'output:', 'if', 'in[0]', '==', ""'-'"", '{', 'in,', 'out[0]', '=', 'in[1:],', ""'-'"", '}', 'And', 'therefore', 'the', 'rest', 'of', 'the', 'function', 'does', 'not', 'need', 'to', 'know/care', 'about', 'the', 'optional', 'negative', 'sign', 'character.', 'The', 'rest', 'of', 'the', 'function', 'is', 'a', 'for', 'loop', 'which', 'just', 'copies', 'the', 'bytes', '(digits)', 'of', 'the', 'number', 'from', 'the', 'input', 'string', 'to', 'the', 'output,', 'inserting', 'a', 'grouping', 'sign', ""(',')"", 'after', 'every', 'group', 'of', '3', 'digits', 'if', 'there', 'are', 'more', 'digits.', 'The', 'loop', 'goes', 'downward', 'so', ""it's"", 'easier', 'to', 'track', 'the', 'groups', 'of', '3', 'digits.', 'Once', 'done', '(no', 'more', 'digits),', 'the', 'output', 'byte', 'slice', 'is', 'returned', 'as', 'a', 'string.', 'Variations', 'Handling', 'negative', 'with', 'recursion', 'If', ""you're"", 'less', 'concerned', 'with', 'efficiency', 'and', 'more', 'about', 'readability,', 'you', 'might', 'like', 'this', 'version:', 'func', 'Format2(n', 'int64)', 'string', '{', 'if', 'n', '<', '0', '{', 'return', '""-""', '+', 'Format2(-n)', '}', 'in', ':=', 'strconv.FormatInt(n,', '10)', 'out', ':=', 'make([]byte,', 'len(in)+(len(in)-1)/3)', 'for', 'i,', 'j,', 'k', ':=', 'len(in)-1,', 'len(out)-1,', '0;', ';', 'i,', 'j', '=', 'i-1,', 'j-1', '{', 'out[j]', '=', 'in[i]', 'if', 'i', '==', '0', '{', 'return', 'string(out)', '}', 'if', 'k++;', 'k', '==', '3', '{', 'j,', 'k', '=', 'j-1,', '0', 'out[j]', '=', ""','"", '}', '}', '}', 'Basically', 'this', 'handles', 'negative', 'numbers', 'with', 'a', 'recursive', 'call:', 'if', 'the', 'number', 'is', 'negative,', 'calls', 'itself', '(recursive)', 'with', 'the', 'absolute', '(positive)', 'value', 'and', 'prepends', 'the', 'result', 'with', 'a', '""-""', 'string.', 'With', 'append()', 'slices', ""Here's"", 'another', 'version', 'using', 'the', 'builtin', 'append()', 'function', 'and', 'slice', 'operations.', 'Somewhat', 'easier', 'to', 'understand', 'but', 'not', 'so', 'good', 'performance-wise:', 'func', 'Format3(n', 'int64)', 'string', '{', 'if', 'n', '<', '0', '{', 'return', '""-""', '+', 'Format3(-n)', '}', 'in', ':=', '[]byte(strconv.FormatInt(n,', '10))', 'var', 'out', '[]byte', 'if', 'i', ':=', 'len(in)', '%', '3;', 'i', '!=', '0', '{', 'if', 'out,', 'in', '=', 'append(out,', 'in[:i]...),', 'in[i:];', 'len(in)', '>', '0', '{', 'out', '=', 'append(out,', ""',')"", '}', '}', 'for', 'len(in)', '>', '0', '{', 'if', 'out,', 'in', '=', 'append(out,', 'in[:3]...),', 'in[3:];', 'len(in)', '>', '0', '{', 'out', '=', 'append(out,', ""',')"", '}', '}', 'return', 'string(out)', '}', 'The', 'first', 'if', 'statement', 'takes', 'care', 'of', 'the', 'first', 'optional,', '""incomplete""', 'group', 'which', 'is', 'less', 'than', '3', 'digits', 'if', 'exists,', 'and', 'the', 'subsequent', 'for', 'loop', 'handles', 'the', 'rest,', 'copying', '3', 'digits', 'in', 'each', 'iteration', 'and', 'appending', 'a', 'comma', ""(',')"", 'grouping', 'sign', 'if', 'there', 'are', 'more', 'digits.', 'numOfCommas', '=', '(', 'numOfDigits', '-', '1', ')', '/', '3', 'Handling', 'the', 'negative', 'sign', 'character:', 'If', 'the', 'number', 'is', 'negative,', 'we', 'simply', 'slice', 'the', 'input', 'string', 'to', 'exclude', 'it', 'from', 'processing', 'and', 'we', 'manually', 'copy', 'the', 'sign', 'bit', 'to', 'the', 'output:', 'if', 'in[0]', '==', ""'-'"", '{', 'in,', 'out[0]', '=', 'in[1:],', ""'-'"", '}', 'And', 'therefore', 'the', 'rest', 'of', 'the', 'function', 'does', 'not', 'need', 'to', 'know/care', 'about', 'the', 'optional', 'negative', 'sign', 'character.', 'The', 'rest', 'of', 'the', 'function', 'is', 'a', 'for', 'loop', 'which', 'just', 'copies', 'the', 'bytes', '(digits)', 'of', 'the', 'number', 'from', 'the', 'input', 'string', 'to', 'the', 'output,', 'inserting', 'a', 'grouping', 'sign', ""(',')"", 'after', 'every', 'group', 'of', '3', 'digits', 'if', 'there', 'are', 'more', 'digits.', 'The', 'loop', 'goes', 'downward', 'so', ""it's"", 'easier', 'to', 'track', 'the', 'groups', 'of', '3', 'digits.', 'Once', 'done', '(no', 'more', 'digits),', 'the', 'output', 'byte', 'slice', 'is', 'returned', 'as', 'a', 'string.', 'Variations', 'Handling', 'negative', 'with', 'recursion', 'If', ""you're"", 'less', 'concerned', 'with', 'efficiency', 'and', 'more', 'about', 'readability,', 'you', 'might', 'like', 'this', 'version:', 'func', 'Format2(n', 'int64)', 'string', '{', 'if', 'n', '<', '0', '{', 'return', '""-""', '+', 'Format2(-n)', '}', 'in', ':=', 'strconv.FormatInt(n,', '10)', 'out', ':=', 'make([]byte,', 'len(in)+(len(in)-1)/3)', 'for', 'i,', 'j,', 'k', ':=', 'len(in)-1,', 'len(out)-1,', '0;', ';', 'i,', 'j', '=', 'i-1,', 'j-1', '{', 'out[j]', '=', 'in[i]', 'if', 'i', '==', '0', '{', 'return', 'string(out)', '}', 'if', 'k++;', 'k', '==', '3', '{', 'j,', 'k', '=', 'j-1,', '0', 'out[j]', '=', ""','"", '}', '}', '}', 'Basically', 'this', 'handles', 'negative', 'numbers', 'with', 'a', 'recursive', 'call:', 'if', 'the', 'number', 'is', 'negative,', 'calls', 'itself', '(recursive)', 'with', 'the', 'absolute', '(positive)', 'value', 'and', 'prepends', 'the', 'result', 'with', 'a', '""-""', 'string.', 'With', 'append()', 'slices', ""Here's"", 'another', 'version', 'using', 'the', 'builtin', 'append()', 'function', 'and', 'slice', 'operations.', 'Somewhat', 'easier', 'to', 'understand', 'but', 'not', 'so', 'good', 'performance-wise:', 'func', 'Format3(n', 'int64)', 'string', '{', 'if', 'n', '<', '0', '{', 'return', '""-""', '+', 'Format3(-n)', '}', 'in', ':=', '[]byte(strconv.FormatInt(n,', '10))', 'var', 'out', '[]byte', 'if', 'i', ':=', 'len(in)', '%', '3;', 'i', '!=', '0', '{', 'if', 'out,', 'in', '=', 'append(out,', 'in[:i]...),', 'in[i:];', 'len(in)', '>', '0', '{', 'out', '=', 'append(out,', ""',')"", '}', '}', 'for', 'len(in)', '>', '0', '{', 'if', 'out,', 'in', '=', 'append(out,', 'in[:3]...),', 'in[3:];', 'len(in)', '>', '0', '{', 'out', '=', 'append(out,', ""',')"", '}', '}', 'return', 'string(out)', '}', 'The', 'first', 'if', 'statement', 'takes', 'care', 'of', 'the', 'first', 'optional,', '""incomplete""', 'group', 'which', 'is', 'less', 'than', '3', 'digits', 'if', 'exists,', 'and', 'the', 'subsequent', 'for', 'loop', 'handles', 'the', 'rest,', 'copying', '3', 'digits', 'in', 'each', 'iteration', 'and', 'appending', 'a', 'comma', ""(',')"", 'grouping', 'sign', 'if', 'there', 'are', 'more', 'digits.', 'numOfDigits', '=', 'len', '(', 'in', ')', '-', '1', '+', 'int', '(', 'in', '[', '0', ']/', ""'0'"", ')', 'Handling', 'the', 'negative', 'sign', 'character:', 'If', 'the', 'number', 'is', 'negative,', 'we', 'simply', 'slice', 'the', 'input', 'string', 'to', 'exclude', 'it', 'from', 'processing', 'and', 'we', 'manually', 'copy', 'the', 'sign', 'bit', 'to', 'the', 'output:', 'if', 'in[0]', '==', ""'-'"", '{', 'in,', 'out[0]', '=', 'in[1:],', ""'-'"", '}', 'And', 'therefore', 'the', 'rest', 'of', 'the', 'function', 'does', 'not', 'need', 'to', 'know/care', 'about', 'the', 'optional', 'negative', 'sign', 'character.', 'The', 'rest', 'of', 'the', 'function', 'is', 'a', 'for', 'loop', 'which', 'just', 'copies', 'the', 'bytes', '(digits)', 'of', 'the', 'number', 'from', 'the', 'input', 'string', 'to', 'the', 'output,', 'inserting', 'a', 'grouping', 'sign', ""(',')"", 'after', 'every', 'group', 'of', '3', 'digits', 'if', 'there', 'are', 'more', 'digits.', 'The', 'loop', 'goes', 'downward', 'so', ""it's"", 'easier', 'to', 'track', 'the', 'groups', 'of', '3', 'digits.', 'Once', 'done', '(no', 'more', 'digits),', 'the', 'output', 'byte', 'slice', 'is', 'returned', 'as', 'a', 'string.', 'Variations', 'Handling', 'negative', 'with', 'recursion', 'If', ""you're"", 'less', 'concerned', 'with', 'efficiency', 'and', 'more', 'about', 'readability,', 'you', 'might', 'like', 'this', 'version:', 'func', 'Format2(n', 'int64)', 'string', '{', 'if', 'n', '<', '0', '{', 'return', '""-""', '+', 'Format2(-n)', '}', 'in', ':=', 'strconv.FormatInt(n,', '10)', 'out', ':=', 'make([]byte,', 'len(in)+(len(in)-1)/3)', 'for', 'i,', 'j,', 'k', ':=', 'len(in)-1,', 'len(out)-1,', '0;', ';', 'i,', 'j', '=', 'i-1,', 'j-1', '{', 'out[j]', '=', 'in[i]', 'if', 'i', '==', '0', '{', 'return', 'string(out)', '}', 'if', 'k++;', 'k', '==', '3', '{', 'j,', 'k', '=', 'j-1,', '0', 'out[j]', '=', ""','"", '}', '}', '}', 'Basically', 'this', 'handles', 'negative', 'numbers', 'with', 'a', 'recursive', 'call:', 'if', 'the', 'number', 'is', 'negative,', 'calls', 'itself', '(recursive)', 'with', 'the', 'absolute', '(positive)', 'value', 'and', 'prepends', 'the', 'result', 'with', 'a', '""-""', 'string.', 'With', 'append()', 'slices', ""Here's"", 'another', 'version', 'using', 'the', 'builtin', 'append()', 'function', 'and', 'slice', 'operations.', 'Somewhat', 'easier', 'to', 'understand', 'but', 'not', 'so', 'good', 'performance-wise:', 'func', 'Format3(n', 'int64)', 'string', '{', 'if', 'n', '<', '0', '{', 'return', '""-""', '+', 'Format3(-n)', '}', 'in', ':=', '[]byte(strconv.FormatInt(n,', '10))', 'var', 'out', '[]byte', 'if', 'i', ':=', 'len(in)', '%', '3;', 'i', '!=', '0', '{', 'if', 'out,', 'in', '=', 'append(out,', 'in[:i]...),', 'in[i:];', 'len(in)', '>', '0', '{', 'out', '=', 'append(out,', ""',')"", '}', '}', 'for', 'len(in)', '>', '0', '{', 'if', 'out,', 'in', '=', 'append(out,', 'in[:3]...),', 'in[3:];', 'len(in)', '>', '0', '{', 'out', '=', 'append(out,', ""',')"", '}', '}', 'return', 'string(out)', '}', 'The', 'first', 'if', 'statement', 'takes', 'care', 'of', 'the', 'first', 'optional,', '""incomplete""', 'group', 'which', 'is', 'less', 'than', '3', 'digits', 'if', 'exists,', 'and', 'the', 'subsequent', 'for', 'loop', 'handles', 'the', 'rest,', 'copying', '3', 'digits', 'in', 'each', 'iteration', 'and', 'appending', 'a', 'comma', ""(',')"", 'grouping', 'sign', 'if', 'there', 'are', 'more', 'digits.', 'numOfCommas', '=', '(', 'len', '(', 'in', ')', '-', '2', '+', 'int', '(', 'in', '[', '0', ']/', ""'0'"", '))', '/', '3', 'Handling', 'the', 'negative', 'sign', 'character:', 'If', 'the', 'number', 'is', 'negative,', 'we', 'simply', 'slice', 'the', 'input', 'string', 'to', 'exclude', 'it', 'from', 'processing', 'and', 'we', 'manually', 'copy', 'the', 'sign', 'bit', 'to', 'the', 'output:', 'if', 'in', '[', '0', ']', '==', ""'-'"", '{', 'in', ',', 'out', '[', '0', ']', '=', 'in', '[', '1', ':],', ""'-'"", '}', 'And', 'therefore', 'the', 'rest', 'of', 'the', 'function', 'does', 'not', 'need', 'to', 'know/care', 'about', 'the', 'optional', 'negative', 'sign', 'character.', 'The', 'rest', 'of', 'the', 'function', 'is', 'a', 'for', 'loop', 'which', 'just', 'copies', 'the', 'bytes', '(digits)', 'of', 'the', 'number', 'from', 'the', 'input', 'string', 'to', 'the', 'output,', 'inserting', 'a', 'grouping', 'sign', ""(',')"", 'after', 'every', 'group', 'of', '3', 'digits', 'if', 'there', 'are', 'more', 'digits.', 'The', 'loop', 'goes', 'downward', 'so', ""it's"", 'easier', 'to', 'track', 'the', 'groups', 'of', '3', 'digits.', 'Once', 'done', '(no', 'more', 'digits),', 'the', 'output', 'byte', 'slice', 'is', 'returned', 'as', 'a', 'string.', 'Variations', 'Handling', 'negative', 'with', 'recursion', 'If', ""you're"", 'less', 'concerned', 'with', 'efficiency', 'and', 'more', 'about', 'readability,', 'you', 'might', 'like', 'this', 'version:', 'func', 'Format2', '(', 'n', 'int64', ')', 'string', '{', 'if', 'n', '<', '0', '{', 'return', '""-""', '+', 'Format2', '(-', 'n', ')', '}', 'in', ':=', 'strconv.FormatInt(n, 10)', 'out', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'in', ')+(', 'len', '(', 'in', ')-', '1', ')/', '3', ')', 'for', 'i', ',', 'j', ',', 'k', ':=', 'len', '(', 'in', ')-', '1', ',', 'len', '(', 'out', ')-', '1', ',', '0', ';', ';', 'i', ',', 'j', '=', 'i', '-', '1', ',', 'j', '-', '1', '{', 'out', '[', 'j', ']', '=', 'in', '[', 'i', ']', 'if', 'i', '==', '0', '{', 'return', 'string', '(', 'out', ')', '}', 'if', 'k', '++;', 'k', '==', '3', '{', 'j', ',', 'k', '=', 'j', '-', '1', ',', '0', 'out', '[', 'j', ']', '=', ""','"", '}', '}', '}', 'Basically', 'this', 'handles', 'negative', 'numbers', 'with', 'a', 'recursive', 'call:', 'if', 'the', 'number', 'is', 'negative,', 'calls', 'itself', '(recursive)', 'with', 'the', 'absolute', '(positive)', 'value', 'and', 'prepends', 'the', 'result', 'with', 'a', '""-""', 'string.', 'With', 'append()', 'slices', ""Here's"", 'another', 'version', 'using', 'the', 'builtin', 'append()', 'function', 'and', 'slice', 'operations.', 'Somewhat', 'easier', 'to', 'understand', 'but', 'not', 'so', 'good', 'performance-wise:', 'func', 'Format3', '(', 'n', 'int64', ')', 'string', '{', 'if', 'n', '<', '0', '{', 'return', '""-""', '+', 'Format3', '(-', 'n', ')', '}', 'in', ':=', '[]', 'byte', '(', 'strconv.FormatInt(n, 10))', 'var', 'out', '[]', 'byte', 'if', 'i', ':=', 'len', '(', 'in', ')', '%', '3', ';', 'i', '!=', '0', '{', 'if', 'out', ',', 'in', '=', 'append', '(', 'out', ',', 'in', '[:', 'i', ']...),', 'in', '[', 'i', ':];', 'len', '(', 'in', ')', '>', '0', '{', 'out', '=', 'append', '(', 'out', ',', ""','"", ')', '}', '}', 'for', 'len', '(', 'in', ')', '>', '0', '{', 'if', 'out', ',', 'in', '=', 'append', '(', 'out', ',', 'in', '[:', '3', ']...),', 'in', '[', '3', ':];', 'len', '(', 'in', ')', '>', '0', '{', 'out', '=', 'append', '(', 'out', ',', ""','"", ')', '}', '}', 'return', 'string', '(', 'out', ')', '}', 'The', 'first', 'if', 'statement', 'takes', 'care', 'of', 'the', 'first', 'optional,', '""incomplete""', 'group', 'which', 'is', 'less', 'than', '3', 'digits', 'if', 'exists,', 'and', 'the', 'subsequent', 'for', 'loop', 'handles', 'the', 'rest,', 'copying', '3', 'digits', 'in', 'each', 'iteration', 'and', 'appending', 'a', 'comma', ""(',')"", 'grouping', 'sign', 'if', 'there', 'are', 'more', 'digits.']"
531,31103130,"

I apologize for my English.
","['I', 'learning', 'go', 'language', '(and', 'English', ':P),', 'and', 'in', 'the', 'tour', 'of', 'go', 'is', 'a', 'exersie:', 'Fibonacci', 'closure', '(https://tour.golang.org/moretypes/22)', 'The', 'result', 'is:', '0', '1', '1', '2', '3', '5', '8', '13', '21', '34', 'The', 'main', 'function', 'is:', 'func', 'main', '()', '{', 'f', ':=', 'fibonacci', '()', 'for', 'i', ':=', '0', ';', 'i', '<', '10', ';', 'i', '++', '{', 'fmt.Println(f())', '}', '}', 'And', 'my', 'first', 'solution', 'was:', 'func', 'fibonacci', '()', 'func', '()', 'int', '{', 'antant', ':=', '0', 'ant', ':=', '1', 'i', ':=', '0', 'return', 'func', '()', 'int', '{', 'var', 'result', 'int', 'if', 'i', '==', '0', '||', 'i', '==', '1', '{', 'result', '=', 'i', 'i', '++', 'return', 'result', '}', 'result', '=', 'antant', '+', 'ant', 'antant', '=', 'ant', 'ant', '=', 'result', 'return', 'result', '}', '}', 'But', 'I', ""didn't"", 'want', 'ask', 'in', 'heach', 'call', 'to', 'f()', 'if', 'was', 'the', 'firsth', 'or', 'second', 'call', '(if', 'i', '==', '0', '||', 'i', '==', '1).', 'The', 'result', 'was', 'a', 'function', 'auto-override:', 'type', 'doFibonacci', 'func', '(*', 'doFibonacci', ')', 'int', 'func', 'fibonacci', '()', 'func', '()', 'int', '{', 'antant', ':=', '0', 'ant', ':=', '1', 'i', ':=', '0', 'doFibo', ':=', 'doFibonacci', '(', 'func', '(', 'ptrDo', '*', 'doFibonacci', ')', 'int', '{', 'var', 'result', 'int', 'if', 'i', '==', '0', '||', 'i', '==', '1', '{', 'result', '=', 'i', 'i', '++', 'return', 'result', '}', '*', 'ptrDo', '=', 'func', '(', 'ptrDo', '*', 'doFibonacci', ')', 'int', '{', 'var', 'result', 'int', 'result', '=', 'antant', '+', 'ant', 'antant', '=', 'ant', 'ant', '=', 'result', 'return', 'result', '}', 'return', '(*', 'ptrDo', ')(', 'ptrDo', ')', '})', 'return', 'func', '()', 'int', '{', 'return', 'doFibo', '(&', 'doFibo', ')', '}', '}', 'I', 'apologize', 'for', 'my', 'English.']"
532,31143133,"
","['There', 'is', 'a', 'package', 'by', 'this', 'guy', 'on', 'GitHub', 'that', 'includes', 'both', 'an', 'encoder', 'and', 'a', 'decoder', 'for', 'WebP:', 'https://github.com/chai2010/webp', 'From', 'the', 'readme', 'file:', 'package', 'main', 'import', '(', '""bytes""', '""fmt""', '""io/ioutil""', '""log""', '""github.com/chai2010/webp""', ')', 'func', 'main', '()', '{', 'var', 'buf', 'bytes', '.', 'Buffer', 'var', 'width', ',', 'height', 'int', 'var', 'data', '[]', 'byte', 'var', 'err', 'error', '//', 'Load', 'file', 'data', 'if', 'data', ',', 'err', '=', 'ioutil.ReadFile(""./testdata/1_webp_ll.webp"")', ';', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', '//', 'GetInfo', 'if', 'width', ',', 'height', ',', '_', ',', 'err', '=', 'webp.GetInfo(data)', ';', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', 'fmt.Printf(""width = %d, height = %d\\n"", width, height)', '//', 'GetMetadata', 'if', 'metadata', ',', 'err', ':=', 'webp.GetMetadata(data, ""ICCP"")', ';', 'err', '!=', 'nil', '{', 'fmt.Printf(""Metadata: err = %v\\n"", err)', '}', 'else', '{', 'fmt.Printf(""Metadata: %s\\n"", string(metadata))', '}', '//', 'Decode', 'webp', 'm', ',', 'err', ':=', 'webp.Decode(bytes.NewReader(data))', 'if', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', '//', 'Encode', 'lossless', 'webp', 'if', 'err', '=', 'webp.Encode(&buf, m, &webp.Options{Lossless: true})', ';', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', 'if', 'err', '=', 'ioutil.WriteFile(""output.webp"", buf.Bytes(), 0666)', ';', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', '}']"
533,31287203,"

it not always produce same output I think. So we should assume goroutine may  parallel, add lock if you need control the sequence.
","['you', 'should', 'not', 'predict', 'the', 'goroutine', 'schedule.', 'by', 'running', 'the', 'example', 'you', 'provided,', 'I', 'got', 'this', 'output.', 'direct', ':', '0', 'direct', ':', '1', 'direct', ':', '2', 'go', 'routine', ':', '0', 'go', 'routine', ':', '1', 'go', 'routine', ':', '2', 'go', 'ing', 'done', 'if', 'I', 'add', 'runtime.GOMAXPROCS(4)', 'at', 'the', 'begin', 'of', 'main', 'function,', 'and', 'run', 'it', 'on', 'my', 'i5', 'Qcore', 'desktop', 'ubuntu,', 'it', 'output', 'direct', ':', '0', 'direct', ':', '1', 'direct', ':', '2', 'go', 'routine', ':', '0', 'go', 'routine', ':', '1', 'go', 'routine', ':', '2', 'go', 'ing', 'done', 'it', 'not', 'always', 'produce', 'same', 'output', 'I', 'think.', 'So', 'we', 'should', 'assume', 'goroutine', 'may', 'parallel,', 'add', 'lock', 'if', 'you', 'need', 'control', 'the', 'sequence.']"
534,31327554,"

You probably don't want to use your original t variable but keeping the example simple. I loop until t equals f, if they're equal I return my days count. If they're not I check to make sure it's a weekday and increment my days count if it is. I unconditionally add one day to my starting time.
","[""Here's"", 'a', 'simple', 'little', 'solution.', 'days', ':=', '0', 'for', '{', 'if', '(', 't.Equal(f))', '{', 'return', 'days', '}', 'if', '(', 't.Weekday() != 6 && t.Weekday() != 7)', '{', 'days', '++', '}', 't.Add(time.Hour*24)', '}', 'You', 'probably', ""don't"", 'want', 'to', 'use', 'your', 'original', 't', 'variable', 'but', 'keeping', 'the', 'example', 'simple.', 'I', 'loop', 'until', 't', 'equals', 'f,', 'if', ""they're"", 'equal', 'I', 'return', 'my', 'days', 'count.', 'If', ""they're"", 'not', 'I', 'check', 'to', 'make', 'sure', ""it's"", 'a', 'weekday', 'and', 'increment', 'my', 'days', 'count', 'if', 'it', 'is.', 'I', 'unconditionally', 'add', 'one', 'day', 'to', 'my', 'starting', 'time.']"
535,31329658,"

output 32
","['Here', 'is', 'a', 'solution', 'thank', 'you', 'evanmcdonnal', 'and', 'luc', 'for', 'answering', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 't', ':=', 'time.Date(2015, time.Now().Month(), time.Now().Day(), time.Now().Hour(), time.Now().Minute(), time.Now().Second(), time.Now().Nanosecond()*0, time.UTC)', 'fmt.Printf(""%s\\n"",t)', 'f', ':=', 'time.Date(2015, time.August, 22, time.Now().Hour(), time.Now().Minute(), time.Now().Second(), time.Now().Nanosecond()*0, time.UTC)', 'fmt.Printf(""%s\\n"",f)', 'days', ':=', '0', 'for', '{', 'if', '(', 't.Equal(f))', '{', 'break', '}', 'if', '(', 't.Weekday()!=6 && t.Weekday()!=0)', '{', 'days', '++', '}', 't', '=', 't.Add(time.Hour*24)', '}', 'fmt.Printf(""days  %d\\n"", days)', '}', 'output', '32']"
536,31411854,"

(Though there is no point in this case to using a goroutine, since you want the value synchronously)
","[""There's"", '2', 'primary', 'issues', '(and', 'many', 'unrelated).', 'First,', 'you', 'need', 'to', 'parenthesize', 'named', 'return', 'parameters', 'func', 'ping', '(', 'curl_out', 'string', ')', '(', 'endtime', 'int64', ')', '{', 'Second,', 'you', ""can't"", 'assign', 'the', 'return', 'value', 'of', 'a', 'goroutine.', ""It's"", 'executed', 'asynchronously', 'in', 'an', 'entirely', 'new', 'context.', 'Use', 'a', 'channel', 'to', 'communicate', 'between', 'goroutines', 'You', 'could', 'declare', 'the', 'ping', 'function', 'like:', 'func', 'ping', '(', 'curl_out', 'string', ',', 'endtime', 'chan', '<-', 'int64', ')', '{', 'And', 'then', 'pass', 'in', 'a', 'channel', 'on', 'which', 'to', 'receive', 'the', 'value', 'ch', ':=', 'make', '(', 'chan', 'int64', ')', 'go', 'ping', '(', 'string', '(', 'curl_out', '),', 'ch', ')', 'endtime', '<-', 'ch', '(Though', 'there', 'is', 'no', 'point', 'in', 'this', 'case', 'to', 'using', 'a', 'goroutine,', 'since', 'you', 'want', 'the', 'value', 'synchronously)']"
537,31411861,"

And you're right about the use of go keyword to create a goroutine, you can't assign that to a return value, just remove the go keyword and assign the value directly.

Also (style)  go variables are in camelCase so you should change your variables from run_container  to either runContainer  or better just container or even better just c, same goes for run_curl it could be curl

Here's an slightly enhanced version of your code ( without really knowing what it does)

http://play.golang.org/p/3Y7TPip5kP
","['In', 'line', '9:', 'Add', 'parenthesis', 'func', 'ping', '(', 'curl_out', 'string', ')', '(', 'endtime', 'int64', ')', '{', 'or', 'remove', 'return', 'value', 'name:', 'func', 'ping', '(', 'curl_out', 'string', ')', 'int64', '{', 'And', ""you're"", 'right', 'about', 'the', 'use', 'of', 'go', 'keyword', 'to', 'create', 'a', 'goroutine,', 'you', ""can't"", 'assign', 'that', 'to', 'a', 'return', 'value,', 'just', 'remove', 'the', 'go', 'keyword', 'and', 'assign', 'the', 'value', 'directly.', 'Also', '(style)', 'go', 'variables', 'are', 'in', 'camelCase', 'so', 'you', 'should', 'change', 'your', 'variables', 'from', 'run_container', 'to', 'either', 'runContainer', 'or', 'better', 'just', 'container', 'or', 'even', 'better', 'just', 'c,', 'same', 'goes', 'for', 'run_curl', 'it', 'could', 'be', 'curl', ""Here's"", 'an', 'slightly', 'enhanced', 'version', 'of', 'your', 'code', '(', 'without', 'really', 'knowing', 'what', 'it', 'does)', 'http://play.golang.org/p/3Y7TPip5kP']"
538,31436063,"
","['Use', 'binary', 'shift', 'operators', 'to', 'load', 'seven', 'bits', 'at', 'a', 'time', 'into', 'a', 'bit', 'buffer,', 'and', 'whenever', 'the', 'bit', 'buffer', 'has', 'eight', 'bits,', 'output', 'that.', 'At', 'the', 'end,', 'if', 'there', 'are', 'any', 'bits', 'leftover,', 'output', 'a', 'final', 'byte', 'with', ""what's"", 'in', 'the', 'buffer.', 'So', 'something', 'like', ""(don't"", 'know', 'Go,', 'but', 'this', 'should', 'be', 'close):', 'bits', '=', '0', 'bitbuf', '=', '0', '...', 'some', 'loop', '...', '...', 'make', 'your', 'seven', 'bits', '...', 'bitbuf', '|=', 'sevenbits', '<<', 'bits', 'bits', '+=', '7', 'if', 'bits', '>=', '8', '{', 'output', '(', 'bitbuf', '&', '0xff', ')', 'bitbuf', '>>=', '8', ';', 'bits', '-=', '8', ';', '}', '...', 'if', 'bits', '>', '0', '{', 'output', '(', 'bitbuf', ')', '}']"
539,31474039,"
","[""There's"", 'no', 'convention,', 'as', 'far', 'as', 'I', 'am', 'aware', 'of.', ""It's"", 'OK', 'to', 'create', 'a', 'slice', 'type', 'if', 'you', 'really', 'need', 'it.', 'In', 'fact,', 'if', 'you', 'ever', 'want', 'to', 'sort', 'your', 'data,', 'this', 'is', 'pretty', 'much', 'the', 'only', 'way:', 'create', 'a', 'type', 'and', 'define', 'the', 'sort.Interface', 'methods', 'on', 'it.', 'Also,', 'in', 'your', 'example', 'there', 'is', 'no', 'need', 'to', 'take', 'the', 'address', 'of', 'Trips', 'since', 'slice', 'is', 'already', 'a', '""fat', 'pointer""', 'of', 'a', 'kind.', 'So', 'you', 'can', 'simplify', 'your', 'method', 'to:', 'func', '(', 'trips', 'Trips', ')', 'TotalLength', '()', '(', 'tl', 'int', ')', '{', 'for', '_', ',', 'l', ':=', 'range', 'trips', '{', 'tl', '+=', 'l', '.', 'Length', '}', 'return', 'tl', '}']"
540,31474074," rather than having it as a Trips' method.)

To calm your mind there are plenty of such slice-types in standard packages:

http://golang.org/pkg/net/#IP

http://golang.org/pkg/sort/#Float64Slice

http://golang.org/pkg/sort/#IntSlice

http://golang.org/pkg/encoding/json/#RawMessage
","['If', 'this', 'is', 'what', 'your', 'type', 'is', '(a', 'slice),', ""it's"", 'just', 'fine.', 'It', 'gives', 'you', 'an', 'easy', 'access', 'to', 'underlying', 'elements', '(and', 'allows', 'for', 'range', 'iteration)', 'while', 'providing', 'additional', 'methods.', 'Of', 'course', 'you', 'probably', 'should', 'only', 'keep', 'essential', 'set', 'of', 'methods', 'on', 'this', 'type', 'and', 'not', 'bloating', 'it', 'with', 'everything', 'that', 'would', 'take', '[]Trip', 'as', 'an', 'argument.', '(For', 'example', 'I', 'would', 'suggest', 'having', 'DrawTripsOnTheGlobe', '(', 't', 'Trips', ')', 'rather', 'than', 'having', 'it', 'as', 'a', ""Trips'"", 'method.)', 'To', 'calm', 'your', 'mind', 'there', 'are', 'plenty', 'of', 'such', 'slice-types', 'in', 'standard', 'packages:', 'http://golang.org/pkg/net/#IP', 'http://golang.org/pkg/sort/#Float64Slice', 'http://golang.org/pkg/sort/#IntSlice', 'http://golang.org/pkg/encoding/json/#RawMessage']"
541,31503648,"

Then you can write your queries over the date object.
","['You', 'should', 'add', 'a', 'date', 'field', 'into', 'the', 'documents,', 'over', 'which', 'you', 'can', 'query.', 'That', 'is', 'the', 'easiest', 'option.', 'type', 'Post', 'struct', '{', 'Id', 'bson', '.', 'ObjectId', 'bson', ':', '""_id""', 'date', 'time', '.', 'Time', 'bson', ':', '""date""', '}', 'Then', 'you', 'can', 'write', 'your', 'queries', 'over', 'the', 'date', 'object.']"
542,31541855,"

note: Because ObjectId isn't ISODate assemble ObjectId from ISODate
","[""Here's"", 'how', 'you', 'do', 'it.', 'Assemble', 'fromDate', 'and', 'toDate.', 'Create', 'bson.ObjectId', 'with', 'bson.NewObjectIdWithTime()', 'Query', 'for', 'date', 'range', 'Example:', 'Query', 'for', 'posts', 'created', '2015', 'year', ':=', '2015', 'fromDate', ':=', 'time.Date(year, time.January, 1, 0, 0, 0, 0, time.UTC)', 'toDate', ':=', 'time.Date(year+1, time.January, 1, 0, 0, 0, 0, time.UTC)', 'fromId', ':=', 'bson.NewObjectIdWithTime(fromDate)', 'toId', ':=', 'bson.NewObjectIdWithTime(toDate)', 'posts', ':=', '[]*', 'Post', '{}', 'if', 'e', ':=', 'cPost.Find(bson.M{""_id"": bson.M{""$gte"": fromId, ""$lt"": toId}}).All(&posts)', ';', 'e', '!=', 'nil', '{', '}', 'note:', 'Because', 'ObjectId', ""isn't"", 'ISODate', 'assemble', 'ObjectId', 'from', 'ISODate']"
543,31598706,"

Are there any errors in your event stream after you deploy? ""eb events"" i believe.
","['It', 'is', 'possible', 'you', 'are', 'running', 'an', 'older', 'version', 'of', 'the', 'app,', 'when', 'I', 'try', 'to', 'build', 'the', 'container', 'locally', 'I', 'get', 'the', 'following', 'error:', 'docker', 'build', '.', 'Executing', '3', 'build', 'triggers', 'Trigger', '0', ',', 'COPY', '.', '/go/src/app', 'Step', '0', ':', 'COPY', '.', '/go/src/app', 'Trigger', '1', ',', 'RUN', 'go', '-', 'wrapper', 'download', 'Step', '0', ':', 'RUN', 'go', '-', 'wrapper', 'download', '--->', 'Running', 'in', 'c1854666d13c', '+', 'exec', 'go', 'get', '-', 'v', '-', 'd', 'github', '.', 'com/julienschmidt/httprouter', '(', 'download', ')', 'github', '.', 'com/rdegges/ipify-api', '(', 'download', ')', 'github', '.', 'com/rs/cors', '(', 'download', ')', 'Trigger', '2', ',', 'RUN', 'go', '-', 'wrapper', 'install', 'Step', '0', ':', 'RUN', 'go', '-', 'wrapper', 'install', '--->', 'Running', 'in', '0', 'bbdec1b99d7', '+', 'exec', 'go', 'install', '-', 'v', 'github', '.', 'com/julienschmidt/httprouter', 'github', '.', 'com/rdegges/ipify-api/models', 'github', '.', 'com/rs/cors', 'github', '.', 'com/rdegges/ipify-api/api', 'app', 'app', './', 'main', '.', 'go', ':', '27', ':', 'cannot', 'use', 'api.NotFound (type func(http.ResponseWriter, *http.Request))', 'as', 'type', 'http', '.', 'Handler', 'in', 'assignment', ':', 'func', '(', 'http', '.', 'ResponseWriter', ',', '*', 'http', '.', 'Request', ')', 'does', 'not', 'implement', 'http.Handler (missing ServeHTTP method)', './', 'main', '.', 'go', ':', '28', ':', 'cannot', 'use', 'api.MethodNotAllowed (type func(http.ResponseWriter, *http.Request))', 'as', 'type', 'http', '.', 'Handler', 'in', 'assignment', ':', 'func', '(', 'http', '.', 'ResponseWriter', ',', '*', 'http', '.', 'Request', ')', 'does', 'not', 'implement', 'http.Handler (missing ServeHTTP method)', 'The', 'command', ""'/bin/sh -c go-wrapper install'"", 'return', 'ed', 'a', 'non', '-', 'zero', 'code', ':', '2', 'Are', 'there', 'any', 'errors', 'in', 'your', 'event', 'stream', 'after', 'you', 'deploy?', '""eb', 'events""', 'i', 'believe.']"
544,31626494,"
","['I', 'came', 'across', 'a', 'similar', 'problem', '-', 'from', 'a', 'package', 'path', 'how', 'do', 'you', 'get', 'the', 'package', 'name.', 'The', 'best', 'solution', 'I', 'found', 'is', 'to', 'exec', 'the', '""go', 'list""', 'command.', 'Not', 'ideal', 'but', 'I', 'came', 'up', 'blank', 'elsewhere.', 'In', 'my', 'case', 'I', 'also', 'had', 'a', 'problem', 'that', 'sometimes', 'the', 'package', 'is', 'an', 'empty', 'directory.', 'With', 'no', 'source', 'files,', '""go', 'list""', 'throws', 'an', 'error,', 'so', 'I', 'added', 'a', 'function', 'to', 'create', 'a', 'sensible', 'package', 'name', 'from', 'the', 'path.', ""Here's"", 'the', 'code:', 'func', 'getPackageName', '(', 'path', 'string', ')', 'string', '{', 'output', ',', 'err', ':=', 'exec.Command(""go"", ""list"", ""-f"", ""{{.Name}}"", path).CombinedOutput()', 'if', 'err', '!=', 'nil', '{', 'return', 'guessPackageName', '(', 'path', ')', '}', 'return', 'strings.TrimSpace(string(output))', '}', 'func', 'guessPackageName', '(', 'path', 'string', ')', 'string', '{', 'preferred', ':=', 'path', 'if', 'strings.HasSuffix(preferred, ""/"")', '{', '//', 'training', 'slashes', 'are', 'usually', 'tolerated,', 'so', 'we', 'can', 'get', 'rid', 'of', 'one', 'if', 'it', 'exists', 'preferred', '=', 'preferred', '[:', 'len', '(', 'preferred', ')-', '1', ']', '}', 'if', 'strings.Contains(preferred, ""/"")', '{', '//', 'if', 'the', 'path', 'contains', 'a', '""/"",', 'use', 'the', 'last', 'part', 'preferred', '=', 'preferred', '[', 'strings.LastIndex(preferred, ""/"")', '+', '1', ':]', '}', 'if', 'strings.Contains(preferred, ""-"")', '{', '//', 'the', 'name', 'usually', 'follows', 'a', 'hyphen', '-', 'e.g.', 'github.com/foo/go-bar', '//', 'if', 'the', 'package', 'name', 'contains', 'a', '""-"",', 'use', 'the', 'last', 'part', 'preferred', '=', 'preferred', '[', 'strings.LastIndex(preferred, ""-"")', '+', '1', ':]', '}', 'if', 'strings.Contains(preferred, ""."")', '{', '//', 'dot', 'is', 'commonly', 'usually', 'used', 'as', 'a', 'version', '-', 'e.g.', 'github.com/foo/bar.v1', '//', 'if', 'the', 'package', 'name', 'contains', 'a', '""."",', 'use', 'the', 'first', 'part', 'preferred', '=', 'preferred', '[:', 'strings.LastIndex(preferred, ""."")', ']', '}', 'return', 'preferred', '}']"
545,31632586,"

see this code in play.golang.org
","['Building', 'on', 'the', 'answer', 'provided', 'by', '@Mark', 'Although', 'the', 'OP', 'asked', 'how', 'to', 'print', 'an', 'integer,', 'I', 'often', 'want', 'to', 'look', 'at', 'more', 'then', '64', 'bits', 'worth', 'of', 'data,', 'without', 'my', 'eyes', 'boggling:', '/*', '---', 'Credit', 'to', 'Dave', 'C', 'in', 'the', 'comments', '---', '*/', 'package', 'main', 'import', '(', '""bytes""', '""fmt""', ')', 'func', 'main', '()', '{', 'fmt.Printf(""\\n"", fmtBits([]byte{0xDE, 0xAD, 0xBE, 0xEF, 0xF0, 0x0D, 0xDE, 0xAD, 0xBE, 0xEF, 0xF0, 0x0D}))', '//', 'OUTPUT:', '//', '}', 'func', 'fmtBits', '(', 'data', '[]', 'byte', ')', '[]', 'byte', '{', 'var', 'buf', 'bytes', '.', 'Buffer', 'for', '_', ',', 'b', ':=', 'range', 'data', '{', 'fmt.Fprintf(&buf, ""%08b "", b)', '}', 'buf.Truncate(buf.Len() - 1)', '// To remove extra space', 'return', 'buf.Bytes()', '}', 'see', 'this', 'code', 'in', 'play.golang.org']"
546,31688970,"The Go dev_appserver does not currently support local Google Cloud Storage emulation. What is recommended is that you create a real GCS bucket for testing purposes and then you can start your dev_appserver to talk to the ""test"" GCS bucket.

This tutorial: https://cloud.google.com/appengine/docs/go/googlecloudstorageclient/getstarted
gives detailed instructions on how you can set up your local app to use a real GCS bucket. (Make sure you carefully follow the linked instructions to enable the two Cloud Storage APIs and set up and download your private key.)

Also, just FYI, the google-appengine-go Google Group is a great place to ask questions like this and also search through the posts to find answers.  There are a lot of really helpful people on that list to help you get up and running quickly.
","['The', 'Go', 'dev_appserver', 'does', 'not', 'currently', 'support', 'local', 'Google', 'Cloud', 'Storage', 'emulation.', 'What', 'is', 'recommended', 'is', 'that', 'you', 'create', 'a', 'real', 'GCS', 'bucket', 'for', 'testing', 'purposes', 'and', 'then', 'you', 'can', 'start', 'your', 'dev_appserver', 'to', 'talk', 'to', 'the', '""test""', 'GCS', 'bucket.', 'This', 'tutorial:', 'https://cloud.google.com/appengine/docs/go/googlecloudstorageclient/getstarted', 'gives', 'detailed', 'instructions', 'on', 'how', 'you', 'can', 'set', 'up', 'your', 'local', 'app', 'to', 'use', 'a', 'real', 'GCS', 'bucket.', '(Make', 'sure', 'you', 'carefully', 'follow', 'the', 'linked', 'instructions', 'to', 'enable', 'the', 'two', 'Cloud', 'Storage', 'APIs', 'and', 'set', 'up', 'and', 'download', 'your', 'private', 'key.)', 'Also,', 'just', 'FYI,', 'the', 'google-appengine-go', 'Google', 'Group', 'is', 'a', 'great', 'place', 'to', 'ask', 'questions', 'like', 'this', 'and', 'also', 'search', 'through', 'the', 'posts', 'to', 'find', 'answers.', 'There', 'are', 'a', 'lot', 'of', 'really', 'helpful', 'people', 'on', 'that', 'list', 'to', 'help', 'you', 'get', 'up', 'and', 'running', 'quickly.']"
547,31691333,"

full example
","['Even', 'though', 'A', 'and', 'B', 'both', 'have', 'a', 'status', 'field', 'they', 'are', 'not', 'interchangeable', 'to', 'the', 'type', 'system.', 'You', 'must', 'have', 'separate', 'cases', 'for', 'each', 'of', 'them.', 'case', 'A', ':', 't', '.', 'Status', '=', 'status', 'case', 'B', ':', 't', '.', 'Status', '=', 'status', '}', 'playground', 'link', 'Alternatively,', 'you', 'could', 'use', 'an', 'actual', 'interface:', 'type', 'HasStatus', 'interface', '{', 'SetStatus', '(', 'int', ')', '}', 'type', 'A', 'struct', '{', 'Status', 'int', '}', 'func', '(', 'a', '*', 'A', ')', 'SetStatus', '(', 's', 'int', ')', '{', 'a', '.', 'Status', '=', 's', '}', 'func', 'foo', '(', 'v', 'HasStatus', ',', 'status', 'int', ')', '{', 'v.SetStatus(status)', '}', 'full', 'example', 'If', 'you', 'have', 'multiple', 'types', 'that', 'all', 'have', 'a', 'common', 'set', 'of', 'fields', 'you', 'may', 'want', 'to', 'use', 'an', 'embedded', 'struct:', 'type', 'HasStatus', 'interface', '{', 'SetStatus', '(', 'int', ')', '}', 'type', 'StatusHolder', 'struct', '{', 'Status', 'int', '}', 'func', '(', 'sh', '*', 'StatusHolder', ')', 'SetStatus', '(', 's', 'int', ')', '{', 'sh', '.', 'Status', '=', 's', '}', 'type', 'A', 'struct', '{', 'StatusHolder', '}', 'type', 'B', 'struct', '{', 'id', 'string', 'StatusHolder', '}', 'full', 'example']"
548,31714459,"Not vim-go but syntastic do this, just config 

let g:syntastic_go_checkers = []
","['Not', 'vim-go', 'but', 'syntastic', 'do', 'this,', 'just', 'config', 'let', 'g:syntastic_go_checkers', '=', '[]']"
549,31778315," appears to be sorted after the call.
","['The', 'types', 'you', 'are', 'converting', 'is', 'neither', 'a', 'numeric', 'type', 'or', 'a', 'string:', '[]string', 'and', 'stringsLongestFirst', 'are', 'slice', 'types.', 'So', 'the', 'conversion', 'should', 'incur', 'no', 'more', 'overhead', 'than', 'copying', 'the', 'slice', 'header', '(which', 'is', '12', 'or', '24', 'bytes,', 'depending', 'on', 'the', 'word', 'size),', 'which', 'would', 'happen', 'anyway', 'when', 'packing', 'it', 'as', 'an', 'interface{}', 'variable', 'in', 'order', 'to', 'call', 'Sort.', 'The', 'backing', 'array', 'is', 'not', 'copied,', 'which', 'is', 'why', 'severalThousandStrings', 'appears', 'to', 'be', 'sorted', 'after', 'the', 'call.']"
550,31791886,"
","['Assuming', 'your', 'data', ""isn't"", 'inherently', 'too', 'big', 'for', 'the', 'computer', ""it's"", 'running', 'on,', 'the', 'problem', 'is', 'likely', 'the', 'inefficient', 'building', 'of', 'that', 'string.', 'Instead', 'you', 'should', 'be', 'using', 'a', 'bytes.buffer', 'and', 'then', 'callings', ""it's"", 'String()', 'method.', ""Here's"", 'an', 'example;', 'var', 'buffer', 'bytes', '.', 'Buffer', 'for', '_', ',', 'record', ':=', 'range', 'all_data', '{', 'body', ',', '_', ':=', 'json.Marshal(record)', 'buffer.Write(body)', 'buffer.WriteString(""\\n"")', '}', 'fmt.Println(buffer.String())']"
551,31796112,"According to the golang website:


  Get downloads and installs the packages named by the import paths, along with their dependencies.


It sounds like the download isn't working, which is causing the folder to be empty. One alternative is to download the driver as a zip file and run go install on the folder.
","['According', 'to', 'the', 'golang', 'website:', 'Get', 'downloads', 'and', 'installs', 'the', 'packages', 'named', 'by', 'the', 'import', 'paths,', 'along', 'with', 'their', 'dependencies.', 'It', 'sounds', 'like', 'the', 'download', ""isn't"", 'working,', 'which', 'is', 'causing', 'the', 'folder', 'to', 'be', 'empty.', 'One', 'alternative', 'is', 'to', 'download', 'the', 'driver', 'as', 'a', 'zip', 'file', 'and', 'run', 'go', 'install', 'on', 'the', 'folder.']"
552,31967618,"Go is not Java; Go is even not C++. You should think of Go as ""C with interfaces"".

In particular, you cannot do as you want, as you cannot nest struct definitions in interface definitions. Note that you can nest structs inside structs, but you cannot instantiate a nested struct directly.

The closest you can do is to move each logical group of objects to its own package.
","['Go', 'is', 'not', 'Java;', 'Go', 'is', 'even', 'not', 'C++.', 'You', 'should', 'think', 'of', 'Go', 'as', '""C', 'with', 'interfaces"".', 'In', 'particular,', 'you', 'cannot', 'do', 'as', 'you', 'want,', 'as', 'you', 'cannot', 'nest', 'struct', 'definitions', 'in', 'interface', 'definitions.', 'Note', 'that', 'you', 'can', 'nest', 'structs', 'inside', 'structs,', 'but', 'you', 'cannot', 'instantiate', 'a', 'nested', 'struct', 'directly.', 'The', 'closest', 'you', 'can', 'do', 'is', 'to', 'move', 'each', 'logical', 'group', 'of', 'objects', 'to', 'its', 'own', 'package.']"
553,31967977,"

As you can see the code uses much shorter names and still remains very readable.

Package names like service shows that you organize the code in your app by layers instead of by features. I wouldn't recommend it. Here is interesting article about it: http://www.javapractices.com/topic/TopicAction.do?Id=205. It uses Java but the principle applies to any programming language.
","['Here', 'is', 'a', 'suggestion', 'to', 'organize', 'your', 'code', 'in', 'more', '""idiomatic""', 'Go', 'way:', 'package', 'user', 'type', 'Request', 'struct', '{', '...', '}', 'type', 'Response', 'struct', '{', '...', '}', 'type', 'Service', 'interface', '{', 'GetUser', '(', 'r', 'Request', ')', 'Response', '}', 'Outside', 'of', 'user', 'package', 'the', 'code', 'will', 'look', 'like:', 's', ':=', 'user.NewService()', 'var', 'req', 'user', '.', 'Request', 'var', 'resp', 'user', '.', 'Response', 'resp', '=', 's.GetUser(req)', 'As', 'you', 'can', 'see', 'the', 'code', 'uses', 'much', 'shorter', 'names', 'and', 'still', 'remains', 'very', 'readable.', 'Package', 'names', 'like', 'service', 'shows', 'that', 'you', 'organize', 'the', 'code', 'in', 'your', 'app', 'by', 'layers', 'instead', 'of', 'by', 'features.', 'I', ""wouldn't"", 'recommend', 'it.', 'Here', 'is', 'interesting', 'article', 'about', 'it:', 'http://www.javapractices.com/topic/TopicAction.do?Id=205.', 'It', 'uses', 'Java', 'but', 'the', 'principle', 'applies', 'to', 'any', 'programming', 'language.']"
554,31987081,"Field names need to begin with upper case character to be exported identifiers.
","['Field', 'names', 'need', 'to', 'begin', 'with', 'upper', 'case', 'character', 'to', 'be', 'exported', 'identifiers.']"
555,32034083,"I am not an authority, but I will make a few observations that might help even though I do not have a complete answer for you.

The first thing about your question that struck me is the use of the term ""inherit"" --  Go does not support inheritance.  It does support embedding.   I might have written the question subject as ""Reuse controller from module in Revel framework. 

Second, I wonder if you are trying to reuse a Revel module between two separate Revel applications or if you are trying to reuse code from a module in two separate parts of one Revel application that just happens to have a front end and a back end.   A quick read of the reveal framework makes me think modules were designed for the former, not the latter.

Third, I wonder if perhaps you are confusing files with packages.  It was not obvious to me when learning Go that one package can span multiple files.. if the same declaration of ""package controller"" exists in two files such as db.go and app.go, they are still in the same package.
","['I', 'am', 'not', 'an', 'authority,', 'but', 'I', 'will', 'make', 'a', 'few', 'observations', 'that', 'might', 'help', 'even', 'though', 'I', 'do', 'not', 'have', 'a', 'complete', 'answer', 'for', 'you.', 'The', 'first', 'thing', 'about', 'your', 'question', 'that', 'struck', 'me', 'is', 'the', 'use', 'of', 'the', 'term', '""inherit""', '--', 'Go', 'does', 'not', 'support', 'inheritance.', 'It', 'does', 'support', 'embedding.', 'I', 'might', 'have', 'written', 'the', 'question', 'subject', 'as', '""Reuse', 'controller', 'from', 'module', 'in', 'Revel', 'framework.', 'Second,', 'I', 'wonder', 'if', 'you', 'are', 'trying', 'to', 'reuse', 'a', 'Revel', 'module', 'between', 'two', 'separate', 'Revel', 'applications', 'or', 'if', 'you', 'are', 'trying', 'to', 'reuse', 'code', 'from', 'a', 'module', 'in', 'two', 'separate', 'parts', 'of', 'one', 'Revel', 'application', 'that', 'just', 'happens', 'to', 'have', 'a', 'front', 'end', 'and', 'a', 'back', 'end.', 'A', 'quick', 'read', 'of', 'the', 'reveal', 'framework', 'makes', 'me', 'think', 'modules', 'were', 'designed', 'for', 'the', 'former,', 'not', 'the', 'latter.', 'Third,', 'I', 'wonder', 'if', 'perhaps', 'you', 'are', 'confusing', 'files', 'with', 'packages.', 'It', 'was', 'not', 'obvious', 'to', 'me', 'when', 'learning', 'Go', 'that', 'one', 'package', 'can', 'span', 'multiple', 'files..', 'if', 'the', 'same', 'declaration', 'of', '""package', 'controller""', 'exists', 'in', 'two', 'files', 'such', 'as', 'db.go', 'and', 'app.go,', 'they', 'are', 'still', 'in', 'the', 'same', 'package.']"
556,32067013,"

Try it on the Go playground
","['package', 'main', 'import', '""fmt""', 'import', '""strconv""', 'import', '""time""', 'func', 'main', '()', '{', 'fmt.Println(""Hello, playground"")', 't', ':=', 'time.Now()', 'time', ':=', 't.Format(""20060102030405"")', 'time', '=', 'time', '[:', '6', ']', '+', 'strconv.Itoa(int(t.Weekday()))', '+', 'time', '[', '6', ':]', 'fmt.Println(time)', '}', 'Try', 'it', 'on', 'the', 'Go', 'playground']"
557,32142190,"

because *big.Int implements the fmt.Formatter interface. 

Taken from https://stackoverflow.com/a/23317788/871134
","['This', 'code', 'works', 'on', 'big', 'integers', '*big.Int', ':', 'x', ':=', 'big.NewInt(123)', 's', ':=', 'fmt.Sprintf(""%b"", x)', '//', 's', '==', '""1111011""', 'because', '*big.Int', 'implements', 'the', 'fmt.Formatter', 'interface.', 'Taken', 'from', 'https://stackoverflow.com/a/23317788/871134']"
558,32143928,"Here is a bug on github. It turned out that go tool generated wrong names.
","['Here', 'is', 'a', 'bug', 'on', 'github.', 'It', 'turned', 'out', 'that', 'go', 'tool', 'generated', 'wrong', 'names.']"
559,32143987,"All of that approaches failed to me, noobie here. But i have found a better way http://play.golang.org/p/OcMsuUpv2g

I'm using sync package to solve that problem and wait for all goroutines to finish, without Sleep or Channel.

And don't forget to take a look at that awesome post http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/
","['because', '*big.Int', 'implements', 'the', 'fmt.Formatter', 'interface.', 'Taken', 'from', 'https://stackoverflow.com/a/23317788/871134']"
560,32180800,"
  
  Before this CL, the current directory still has the stale binary from 'go build'. If $PATH contains dot, running the name of the program will find this stale binary instead of the new, installed one.


I can't find anything mentioning that in the release notes though. Might be a documentation issue.

It seems like the solution is to use the binary that go install has produced.

EDIT: Here is the issue on the Go issue tracker if you want to follow on updates. Should be fixed by 1.5.1.
","['Yes,', 'the', 'behaviour', 'has', 'changed', 'in', 'Go', '1.5:', 'If', ""'go"", ""install'"", '(with', 'no', 'arguments,', 'meaning', 'the', 'current', 'directory)', 'succeeds,', 'remove', 'the', 'executable', 'written', 'by', ""'go"", ""build',"", 'if', 'present.', 'This', 'avoids', 'leaving', 'a', 'stale', 'binary', 'behind', 'during', 'a', 'sequence', 'like:', 'go', 'build', 'go', 'install', 'Before', 'this', 'CL,', 'the', 'current', 'directory', 'still', 'has', 'the', 'stale', 'binary', 'from', ""'go"", ""build'."", 'If', '$PATH', 'contains', 'dot,', 'running', 'the', 'name', 'of', 'the', 'program', 'will', 'find', 'this', 'stale', 'binary', 'instead', 'of', 'the', 'new,', 'installed', 'one.', 'I', ""can't"", 'find', 'anything', 'mentioning', 'that', 'in', 'the', 'release', 'notes', 'though.', 'Might', 'be', 'a', 'documentation', 'issue.', 'It', 'seems', 'like', 'the', 'solution', 'is', 'to', 'use', 'the', 'binary', 'that', 'go', 'install', 'has', 'produced.', 'EDIT:', 'Here', 'is', 'the', 'issue', 'on', 'the', 'Go', 'issue', 'tracker', 'if', 'you', 'want', 'to', 'follow', 'on', 'updates.', 'Should', 'be', 'fixed', 'by', '1.5.1.']"
561,32217055,"It turns out the method I needed was img.At(x, y).RGBA(), this returns those values respectively.
","['Before', 'this', 'CL,', 'the', 'current', 'directory', 'still', 'has', 'the', 'stale', 'binary', 'from', ""'go"", ""build'."", 'If', '$PATH', 'contains', 'dot,', 'running', 'the', 'name', 'of', 'the', 'program', 'will', 'find', 'this', 'stale', 'binary', 'instead', 'of', 'the', 'new,', 'installed', 'one.', 'I', ""can't"", 'find', 'anything', 'mentioning', 'that', 'in', 'the', 'release', 'notes', 'though.', 'Might', 'be', 'a', 'documentation', 'issue.', 'It', 'seems', 'like', 'the', 'solution', 'is', 'to', 'use', 'the', 'binary', 'that', 'go', 'install', 'has', 'produced.', 'EDIT:', 'Here', 'is', 'the', 'issue', 'on', 'the', 'Go', 'issue', 'tracker', 'if', 'you', 'want', 'to', 'follow', 'on', 'updates.', 'Should', 'be', 'fixed', 'by', '1.5.1.']"
562,32217287,"

The -pthread option is needed because the Go runtime makes use of threads.  When I run the resulting executable it prints 42.
","['To', 'build', 'an', 'archive', 'callable', 'from', 'C,', 'you', 'will', 'need', 'to', 'mark', 'them', 'as', 'exported', 'CGo', 'symbols.', 'For', 'example,', 'if', 'I', 'create', 'a', 'file', 'foo.go', 'with', 'the', 'following', 'contents:', 'package', 'main', 'import', '(', '""C""', '""fmt""', ')', '//', 'export', 'PrintInt', 'func', 'PrintInt', '(', 'x', 'int', ')', '{', 'fmt.Println(x)', '}', 'func', 'main', '()', '{}', 'The', 'important', 'things', 'to', 'note', 'are:', 'The', 'package', 'needs', 'to', 'be', 'called', 'main', 'You', 'need', 'to', 'have', 'a', 'main', 'function,', 'although', 'it', 'can', 'be', 'empty.', 'You', 'need', 'to', 'import', 'the', 'package', 'C', 'You', 'need', 'special', '//export', 'comments', 'to', 'mark', 'the', 'functions', 'you', 'want', 'callable', 'from', 'C.', 'I', 'can', 'compile', 'it', 'as', 'a', 'C', 'callable', 'static', 'library', 'with', 'the', 'following', 'command:', 'go', 'build', '-', 'buildmode', '=', 'c', '-', 'archive', 'foo', '.', 'go', 'The', 'results', 'will', 'be', 'an', 'archive', 'foo.a', 'and', 'a', 'header', 'foo.h.', 'In', 'the', 'header,', 'we', 'get', 'the', 'following', '(eliding', 'irrelevant', 'parts):', '...', 'type', 'def', 'long', 'long', 'GoInt64', ';', '...', 'type', 'def', 'GoInt64', 'GoInt', ';', '...', 'extern', 'void', 'PrintInt', '(', 'GoInt', 'p0', ');', '...', 'So', ""that's"", 'enough', 'to', 'call', 'the', 'exported', 'function.', 'We', 'can', 'write', 'a', 'simple', 'C', 'program', 'that', 'calls', 'it', 'like', 'so:', 'include', '""foo.h""', 'int', 'main', '(', 'int', 'argc', ',', 'char', '**', 'argv', ')', '{', 'PrintInt', '(', '42', ');', 'return', '0', ';', '}', 'We', 'can', 'compile', 'it', 'with', 'a', 'command', 'like:', 'gcc', '-', 'pthread', 'foo', '.', 'c', 'foo', '.', 'a', '-', 'o', 'foo', 'The', '-pthread', 'option', 'is', 'needed', 'because', 'the', 'Go', 'runtime', 'makes', 'use', 'of', 'threads.', 'When', 'I', 'run', 'the', 'resulting', 'executable', 'it', 'prints', '42.']"
563,32231151,"
","['Adding', 'this', 'for', 'future', 'reference,', 'but', 'to', 'access', 'the', 'underling', 'color.YCbCr', 'you', 'just', 'need', 'to', 'type', 'assert', 'the', 'value,', 'example:', 'for', 'y', ':=', 'bounds', '.', 'Min', '.', 'Y', ';', 'y', '<', 'bounds', '.', 'Max', '.', 'Y', ';', 'y', '++', '{', 'for', 'x', ':=', 'bounds', '.', 'Min', '.', 'X', ';', 'x', '<', 'bounds', '.', 'Max', '.', 'X', ';', 'x', '++', '{', 'if', 'c', ',', 'ok', ':=', 'img.At(x, y).(color.YCbCr)', ';', 'ok', '{', 'fmt.Println(c.Y, c.Cb, c.Cr)', '}', 'else', '{', 'fmt.Println(reflect.TypeOf(img.At(x, y)))', '}', '}', '}']"
564,32250399,"
","['You', 'posted', 'this:', 'kdata', ':=', 'make', '([]', 'Klabel', ',', '10', ')', 'kdata', '[', '0', '].', 'label', '=', '""test""', 'And', 'it', 'works.', 'When', 'printing', 'the', 'kdata', 'slice,', 'output', 'is', '(Go', 'Playground):', '[{[]', 'test', '}', '{[]', '}', '{[]', '}', '{[]', '}', '{[]', '}', '{[]', '}', '{[]', '}', '{[]', '}', '{[]', '}', '{[]', '}]', 'The', 'output', 'shows', 'kdata', 'has', '10', 'elements,', 'and', 'the', 'first', 'has', 'the', 'label', 'value:', '""test"".', 'To', 'be', 'more', 'clear,', 'print', 'it', 'with:', 'fmt.Printf(""%+v"", kdata)', 'Output:', '[{', 'values', ':[]', 'label', ':', 'test', '}', '{', 'values', ':[]', 'label', ':}', '{', 'values', ':[]', 'label', ':}', '{', 'values', ':[]', 'label', ':}', '{', 'values', ':[]', 'label', ':}', '{', 'values', ':[]', 'label', ':}', '{', 'values', ':[]', 'label', ':}', '{', 'values', ':[]', 'label', ':}', '{', 'values', ':[]', 'label', ':}', '{', 'values', ':[]', 'label', ':}]', 'Slices', '(unlike', 'maps)', 'are', 'addressable.', 'You', 'can', 'change', 'the', 'fields', 'of', 'the', 'elements', '(that', 'are', 'structs)', 'by', 'simply', 'indexing', 'the', 'slice', 'and', 'assigning', 'new', 'values', 'to', 'the', 'fields.', 'For', 'example:', 'kdata', '[', '0', '].', 'label', '=', '""test""', 'kdata', '[', '0', '].', 'values', '=', '[]', 'float64', '{', '1', '.', '1', ',', '2', '.', '2', '}', 'kdata', '[', '0', '].', 'values', '=', 'append', '(', 'kdata', '[', '0', '].', 'values', ',', '3', '.', '3', ')', 'fmt.Printf(""%+v"", kdata[0])', 'Output:', '{', 'values', ':[', '1', '.', '1', '2', '.', '2', '3', '.', '3', ']', 'label', ':', 'test', '}', 'If', 'you', 'want', 'to', 'append', 'a', 'slice', 'of', 'floats', 'to', 'the', 'values', 'field', 'of', 'an', 'element:', 'vals', ':=', '[]', 'float64', '{', '1', '.', '2', ',', '2', '.', '3', '}', 'kdata', '[', '0', '].', 'values', '=', 'append', '(', 'kdata', '[', '0', '].', 'values', ',', 'vals', '...)', '// Note the 3 dot ...']"
565,32250480,"

(See on Go Playground)

But note that the slice length will be 1 rather than 10, so it's not exactly equivalent.
","['As', 'an', 'alternative', 'to', 'the', 'other', 'answer,', 'you', 'could', 'also', 'do', 'this:', 'kdata', ':=', '[]', 'Klabel', '{{', 'label', ':', '""test""', '}}', '(See', 'on', 'Go', 'Playground)', 'But', 'note', 'that', 'the', 'slice', 'length', 'will', 'be', '1', 'rather', 'than', '10,', 'so', ""it's"", 'not', 'exactly', 'equivalent.']"
566,32253871,"Spec: Conversions:


  Specific rules apply to (non-constant) conversions between numeric types or to and from a string type. These conversions may change the representation of x and incur a run-time cost. All other conversions only change the type but not the representation of x.


So converting to and from the underlying type of your custom type does not make a copy if it.

When you pass a value to a function or method, a copy is made and passed. If you pass a string to a function, only the structure describing the string will be copied and passed, since strings are immutable.

Same is true if you pass a slice (slices are also descriptors). Passing a slice will make a copy of the slice descriptor but it will refer to the same underlying array.
","['(See', 'on', 'Go', 'Playground)', 'But', 'note', 'that', 'the', 'slice', 'length', 'will', 'be', '1', 'rather', 'than', '10,', 'so', ""it's"", 'not', 'exactly', 'equivalent.']"
567,32273463,"
","['Your', 'program', 'is', 'exiting', 'before', 'all', 'goroutines', 'are', 'done.', 'You', 'need', 'to', 'wait', 'for', 'both', 'the', 'foo', 'and', 'bar', 'goroutines', 'to', 'finish', 'before', 'returning', 'from', 'main.', 'The', 'usual', 'way', 'of', 'doing', 'this', 'is', 'by', 'using', 'a', 'sync.WaitGroup,', 'but', 'since', 'main', ""isn't"", 'the', 'producer', 'for', 'the', 'd', 'channel,', 'you', 'will', 'have', 'to', 'ensure', 'that', 'all', 'sends', 'on', 'that', 'channel', 'are', 'finished', 'before', 'closing', 'that', 'with', 'a', 'second', 'WaitGroup', '(or', 'equivalent).', 'var', '(', 'fooWG', 'sync', '.', 'WaitGroup', 'barWG', 'sync', '.', 'WaitGroup', ')', 'func', 'main', '()', '{', 'd', ':=', 'make', '(', 'chan', 'uint', ')', 'barWG.Add(1)', 'go', 'bar', '(', 'd', ')', 'c1', ':=', 'make', '(', 'chan', 'uint', ')', 'c2', ':=', 'make', '(', 'chan', 'uint', ')', 'c3', ':=', 'make', '(', 'chan', 'uint', ')', 'fooWG.Add(3)', 'go', 'foo', '(', 'c1', ',', 'd', ')', 'go', 'foo', '(', 'c2', ',', 'd', ')', 'go', 'foo', '(', 'c3', ',', 'd', ')', 'c1', '<-', '1', 'c2', '<-', '2', 'c3', '<-', '3', 'c1', '<-', '4', 'c2', '<-', '5', 'c3', '<-', '6', 'c1', '<-', '7', 'c2', '<-', '8', 'c3', '<-', '9', '//', 'close', 'the', 'channels', 'so', 'the', 'foo', 'goroutines', 'can', 'exit', 'close', '(', 'c1', ')', 'close', '(', 'c2', ')', 'close', '(', 'c3', ')', 'fooWG.Wait()', '//', 'all', 'foo', 'are', 'done,', 'so', ""it's"", 'safe', 'to', 'close', 'd', 'and', 'wait', 'for', 'bar', 'close', '(', 'd', ')', 'barWG.Wait()', '}', 'func', 'foo', '(', 'c', 'chan', 'uint', ',', 'd', 'chan', 'uint', ')', '{', 'defer', 'fooWG.Done()', 'fmt.Println(""foo start"")', 'for', 'stuff', ':=', 'range', 'c', '{', 'time.Sleep(1)', 'd', '<-', 'stuff', '*', '2', '}', 'fmt.Println(""foo end"")', '}', 'func', 'bar', '(', 'd', 'chan', 'uint', ')', '{', 'defer', 'barWG.Done()', 'fmt.Println(""bar start"")', 'for', 'stuff', ':=', 'range', 'd', '{', 'fmt.Printf(""bar received %d\\n"", stuff)', '}', 'fmt.Println(""bar end"")', '}']"
568,32280323,"
","[""JimB's"", 'answer', 'definitely', 'works,', 'but', ""it's"", 'adding', 'more', 'complexity', 'than', 'is', 'actually', 'needed', 'in', 'the', 'code.', 'A', 'simple', 'complete', 'channel', 'would', 'suffice', 'to', 'synchronize', 'this', 'code', 'though', 'completion.', 'Also,', 'with', 'channel', 'synchronization,', 'the', 'time.Sleep(1)', 'command', 'is', 'no', 'longer', 'needed', 'for', 'functionality:', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 'd', ':=', 'make', '(', 'chan', 'uint', ')', 'complete', ':=', 'make', '(', 'chan', 'bool', ')', 'go', 'bar', '(', 'd', ',', 'complete', ')', 'c1', ':=', 'make', '(', 'chan', 'uint', ')', 'c2', ':=', 'make', '(', 'chan', 'uint', ')', 'c3', ':=', 'make', '(', 'chan', 'uint', ')', 'go', 'foo', '(', 'c1', ',', 'd', ')', 'go', 'foo', '(', 'c2', ',', 'd', ')', 'go', 'foo', '(', 'c3', ',', 'd', ')', 'c1', '<-', '1', 'c2', '<-', '2', 'c3', '<-', '3', 'c1', '<-', '4', 'c2', '<-', '5', 'c3', '<-', '6', 'c1', '<-', '7', 'c2', '<-', '8', 'c3', '<-', '9', '//', 'If', 'you', 'know', 'the', 'number', 'of', 'inputs,', 'count', 'them', 'to', 'ensure', 'completion', 'for', 'i', ':=', '0', ';', 'i', '<', '9', ';', 'i', '++{', '<-', 'complete', '}', '//', 'Clean', 'up', 'after', 'yourself,', 'to', 'keep', 'away', 'the', 'memory', 'leaks', 'close', '(', 'c1', ')', 'close', '(', 'c2', ')', 'close', '(', 'c3', ')', 'close', '(', 'd', ')', '//', 'Verify', 'bar', 'is', 'done', 'and', 'closed', 'correctly', '<-', 'complete', 'close', '(', 'complete', ')', '}', 'func', 'foo', '(', 'c', 'chan', 'uint', ',', 'd', 'chan', 'uint', ')', '{', 'fmt.Println(""foo start"")', 'for', 'stuff', ':=', 'range', 'c', '{', 'time.Sleep(1)', '//Not needed for the program to function', 'd', '<-', 'stuff', '*', '2', '}', 'fmt.Println(""foo end"")', '}', 'func', 'bar', '(', 'd', 'chan', 'uint', ',', 'cmp', 'chan', 'bool', ')', '{', 'fmt.Println(""bar start"")', 'for', 'stuff', ':=', 'range', 'd', '{', 'fmt.Printf(""bar received %d\\n"", stuff)', 'cmp', '<-', 'true', '}', 'fmt.Println(""bar end"")', '//', 'verify', 'that', 'cmp', 'can', 'be', 'closed', '(all', 'output', 'is', 'done,', 'and', 'd', 'is', 'closed)', 'cmp', '<-', 'true', '}']"
569,32322125,"

Calling the function is the same.
","['Use', 'interface{}:', 'func', 'ParseJSON', '(', 'file', 'string', ',', 'val', 'interface', '{})', '{', 'configFile', ',', 'err', ':=', 'ioutil.ReadFile(file)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'err', '=', 'json.Unmarshal(configFile, val)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', '}', 'Calling', 'the', 'function', 'is', 'the', 'same.']"
570,32330783,"
","['If', 'you', 'use', 'the', 'standard', 'flag', 'package', 'to', 'parse', 'command-line', 'flags,', 'you', 'can', 'call', 'the', 'NFlag', 'function', 'to', 'get', 'the', 'number', 'of', 'flags:', 'package', 'main', 'import', '""fmt""', 'import', '""flag""', 'func', 'main', '()', '{', 'flag.Bool(""a"", true, ""A value"")', ';', 'flag.Bool(""b"", true, ""B value"")', ';', 'flag.Parse()', ';', 'fmt.Println(flag.NFlag())', '}', 'Test:', '$', 'go', 'run', 'test', '.', 'go', '0', '$', 'go', 'run', 'test', '.', 'go', '-', 'a', '1', '$', 'go', 'run', 'test', '.', 'go', '-', 'a', '-', 'b', '2']"
571,32346093,"

Playground: https://play.golang.org/p/trC2lOSLNE
","['As', 'the', 'Go', 'specification', 'states:', 'A', 'function', 'type', 'denotes', 'the', 'set', 'of', 'all', 'functions', 'with', 'the', 'same', 'parameter', 'and', 'result', 'types', 'In', 'your', 'case,', 'your', 'result', 'types', 'differ', '(string', 'vs', 'interface{})', 'To', 'be', 'able', 'to', 'receive', 'a', 'function', 'with', 'any', 'kind', 'of', 'result', 'type,', 'test', 'would', 'have', 'to', 'be', 'defined', 'as:', 'func', 'text', '(', 'x', 'interface', '{})', '{', '...', '}', 'and', 'then', 'you', 'will', 'have', 'to', 'use', 'reflect', 'package', 'to', 'call', 'the', 'function', 'stored', 'in', 'x.', 'Edit', 'Such', 'a', 'test', 'function', 'would', 'look', 'like', 'this:', 'func', 'test', '(', 'x', 'interface', '{})', '{', 'v', ':=', 'reflect.ValueOf(x)', 'if', 'v.Kind()', '!=', 'reflect', '.', 'Func', '{', 'panic', '(', '""Test requires a function""', ')', '}', 't', ':=', 'v.Type()', 'if', 't.NumIn() != 0 && t.NumOut()', '!=', '1', '{', 'panic', '(', '""Function type must have no input parameters and a single return value""', ')', '}', 'values', ':=', 'v.Call(nil)', 'val', ':=', 'values', '[', '0', '].', 'Interface', '()', '//', 'some', 'more', 'code..', '}', 'Playground:', 'https://play.golang.org/p/trC2lOSLNE']"
572,32346212,"

Now this might look strange as you return a string which is not of type interface{}.  This works because any type is assignable to variables of type interface{} (as every type has at least no methods :-). 
","['You', 'tripped', 'over', 'a', 'very', 'common', 'misconception', 'for', 'Go', 'newcomers:', 'The', 'empty', 'interface', 'interface{}', 'does', 'not', 'mean', '""any', 'type"".', 'Really,', 'it', 'does', 'not.', 'Go', 'is', 'statically', 'typed.', 'The', 'empty', 'interface', 'interface', '{}', 'is', 'an', 'actual', '(strongly', 'typed', 'type)', 'like', 'e.g.', 'string', 'or', 'struct{Foo', 'int}', 'or', 'interface', '{', 'Explode', '()', 'bool', '}', '.', 'That', 'means', 'if', 'something', 'has', 'the', 'type', 'interface{}', 'it', 'has', 'that', 'type', 'and', 'not', '""any', 'type"".', 'Your', 'function', 'func', 'test', '(', 'x', 'func', '()', 'interface', '{})', 'takes', 'one', 'parameter.', 'This', 'parameter', 'is', 'a', '(parameterless', 'function)', 'which', 'returns', 'a', 'specific', 'type,', 'the', 'type', 'interface{}.', 'You', 'can', 'pass', 'any', 'function', 'to', 'test', 'which', 'matches', 'this', 'signature:', '""No', 'parameters', 'and', 'return', 'interface{}"".', 'None', 'of', 'your', 'functions', 'a', 'and', 'b', 'match', 'this', 'signature.', 'As', 'said', 'above:', 'interface', '{}', 'is', 'not', 'a', 'magical', 'abbreviation', 'for', '""whatever"",it', 'is', 'a', 'distinct', 'static', 'type.', 'You', 'have', 'to', 'change', 'e.g.', 'a', 'to:', 'func', 'a', '()', 'interface', '{}', '{', 'return', '""hello""', '}', 'Now', 'this', 'might', 'look', 'strange', 'as', 'you', 'return', 'a', 'string', 'which', 'is', 'not', 'of', 'type', 'interface{}.', 'This', 'works', 'because', 'any', 'type', 'is', 'assignable', 'to', 'variables', 'of', 'type', 'interface{}', '(as', 'every', 'type', 'has', 'at', 'least', 'no', 'methods', ':-).']"
573,32423688,"It looks like you are editing the darwin64-local.env file , but actually using the system.env file (the one selected in the drop down on the top toolbar). make sure you are using the correct file. 
","['It', 'looks', 'like', 'you', 'are', 'editing', 'the', 'darwin64-local.env', 'file', ',', 'but', 'actually', 'using', 'the', 'system.env', 'file', '(the', 'one', 'selected', 'in', 'the', 'drop', 'down', 'on', 'the', 'top', 'toolbar).', 'make', 'sure', 'you', 'are', 'using', 'the', 'correct', 'file.']"
574,32439080,"From Go 1.5 there's the ""vendor experiment"" that helps you manage dependencies. As of Go 1.6 this is no longer an experiment. Theres also some other options on the Go wiki..

Edit: as mentioned in this answer gopkg.in is a good option for pinning github-depdencies pre-1.5.
","['From', 'Go', '1.5', ""there's"", 'the', '""vendor', 'experiment""', 'that', 'helps', 'you', 'manage', 'dependencies.', 'As', 'of', 'Go', '1.6', 'this', 'is', 'no', 'longer', 'an', 'experiment.', 'Theres', 'also', 'some', 'other', 'options', 'on', 'the', 'Go', 'wiki..', 'Edit:', 'as', 'mentioned', 'in', 'this', 'answer', 'gopkg.in', 'is', 'a', 'good', 'option', 'for', 'pinning', 'github-depdencies', 'pre-1.5.']"
575,32469214,"

It is using a closure around the cleanup logic being deferred.

A somewhat more elaborate public example of using this approach is in the Viper code: here is the return from a test initializer, and here it is used to encapsulate the cleanup logic and objects
","['I', 'have', 'now', 'successfully', 'used', 'the', 'below', 'approach', 'for', 'about', 'a', 'year', 'in', 'multiple', 'projects.', 'The', 'idea', 'is', 'to', 'return', 'a', 'function', 'from', 'the', 'setup', 'call.', 'That', 'resulting', 'function', 'contains', 'the', 'destruction', 'logic.', 'Here', 'is', 'an', 'example:', 'package', 'main', 'import', '(', '""fmt""', '""io""', '""log""', '""os""', ')', 'func', 'LogSetupAndDestruct', '()', 'func', '()', '{', 'logFile', ',', 'err', ':=', 'os.OpenFile(""test.log"", os.O_CREATE|os.O_APPEND|os.O_RDWR, 0666)', 'if', 'err', '!=', 'nil', '{', 'log.Panicln(err)', '}', 'log.SetOutput(io.MultiWriter(os.Stderr, logFile))', 'return', 'func', '()', '{', 'e', ':=', 'logFile.Close()', 'if', 'e', '!=', 'nil', '{', 'fmt.Fprintf(os.Stderr, ""Problem closing the log file: %s\\n"", e)', '}', '}', '}', 'func', 'main', '()', '{', 'defer', 'LogSetupAndDestruct', '()()', 'log.Println(""Test message"")', '}', 'It', 'is', 'using', 'a', 'closure', 'around', 'the', 'cleanup', 'logic', 'being', 'deferred.', 'A', 'somewhat', 'more', 'elaborate', 'public', 'example', 'of', 'using', 'this', 'approach', 'is', 'in', 'the', 'Viper', 'code:', 'here', 'is', 'the', 'return', 'from', 'a', 'test', 'initializer,', 'and', 'here', 'it', 'is', 'used', 'to', 'encapsulate', 'the', 'cleanup', 'logic', 'and', 'objects']"
576,32486253,"
","['The', 'GOROOT', 'is', 'not', 'set', 'correctly', 'in', 'LiteIDE.', 'In', 'a', 'terminal', 'enter', 'which', 'go', 'to', 'know', 'where', 'gvm', 'installed', 'go.', 'Example:', '/home/username/.gvm/gos/go1.6/bin/go', 'In', 'LiteIDE,', 'click', 'on', 'the', 'grey', 'box', '""edit', 'current', 'environment""', 'right', 'of', 'the', 'environment', 'drop', 'down', 'menu.', 'Uncomment', 'the', 'GOROOT', 'line', 'in', 'the', 'system.env', 'file', 'and', 'enter', 'the', 'correct', 'path', 'that', 'you', 'got', 'from', 'which', 'go.', 'You', 'omit', '""/bin/go"".', 'GOROOT', '=/', 'home/username/.gvm/gos/go1.6', 'Save', 'the', 'file.', 'If', 'saving', 'is', 'greyed', 'out,', 'you', 'might', 'need', 'to', 'change', 'the', 'permission', 'of', ""LiteIDE's"", 'liteenv', 'directory.', 'I', 'installed', 'mine', 'to', '/opt/liteide/share/liteide/liteenv', '.', 'When', 'the', 'settings', 'are', 'configured', 'correctly,', 'this', 'is', 'what', 'you', 'should', 'see', 'in', ""LiteIDE's"", 'Build', 'Output', 'window:', '/home/username/.gvm/gos/go1.6/bin/go build -i [/home/username/go/src/project]', 'Success', ':', 'process', 'exited', 'with', 'code', '0', '.', '/home/username/go/src/bad/bad  [/home/username/go/src/project]', 'Hello', 'World', '!', 'Success', ':', 'process', 'exited', 'with', 'code', '0', '.', 'Instead', 'of', 'using', 'the', 'system', 'environment', 'config', '(the', 'default', 'in', 'the', 'drop', 'down', 'menu)', ""I'm"", 'personally', 'using', 'the', 'linux64-local.env', 'file.', 'My', 'LiteIDE', 'config', 'file', 'looks', 'like', 'this:', 'native', 'compiler', 'linux', 'amd64', 'GOROOT', '=/', 'home/username/.gvm/gos/go1.6', 'GOBIN', '=', 'GOARCH', '=', 'amd64', 'GOOS', '=', 'linux', 'CGO_ENABLED', '=', '1', 'PATH', '=$', 'GOROOT/bin:$PATH', 'LITEIDE_GDB', '=', 'gdb', 'LITEIDE_MAKE', '=', 'make', 'LITEIDE_TERM', '=/', 'usr/bin/gnome-terminal', 'LITEIDE_TERMARGS', '=', 'LITEIDE_EXEC', '=/', 'usr/bin/xterm', 'LITEIDE_EXECOPT', '=-', 'e', 'LITEIDE_SHELL', '=', 'gnome', '-', 'terminal', ';', 'lxterminal', ';', 'kconsole', ';', 'xfce4', '-', 'terminal', ';', 'xterm']"
577,32630589,"
","['You', 'can', 'use', 'git', 'checkout', 'to', 'get', 'an', 'specific', 'version', 'and', 'build', 'your', 'program', 'using', 'this', 'version.', 'Example:', 'export', 'GOPATH', '=', '/', 'go', 'get', 'github', '.', 'com/whateveruser/whateverrepo', 'cd', '/src/github.com/whateveruser/whateverrepo', 'git', 'tag', '-', 'l', 'supose', 'tag', 'v0', '.', '0', '.', '2', 'is', 'correct', 'version', 'git', 'checkout', 'tags/v0.0.2', 'go', 'run', 'whateverpackage/main.go']"
578,32716043,"

And then compare with the test data to see if there are differences, this is as you say the only place it could go wrong ?
","['There', 'is', 'a', 'problem', 'with', 'you', 'code', 'missing', 'some', 'brackets', 'etc.', 'This', 'seems', 'to', 'work', ':', 'package', 'main', 'import', '(', '""bytes""', '""fmt""', ')', 'const', 'data', '=', '{', '""abc""', ':[{', '""b""', ':', '5', ',', '""bca""', ':', '14', ',', '""xyz""', ':', '0', '}]}{', '""abc""', ':[{', '""b""', ':', '7', ',', '""hjk""', ':', '14', ',', '""qwe""', ':', '0', '}]}', 'func', 'main', '()', '{', 'buf', ':=', '[]', 'byte', '(', 'data', ')', 'fmt.Printf(""buf = %s\\n"", string(buf))', 'if', 'bytes.Contains(buf, []byte(""}{""))', '{', 'fmt.Printf(""I got you\\n"")', '}', '}', 'There', 'may', 'be', 'an', 'encoding', 'problem', 'receiving', 'the', 'data', 'in', 'your', 'connected', 'application,', 'thats', 'a', 'tricky', 'one', 'to', 'show', 'and', 'I', 'have', 'resorted', 'to', 'printing', 'the', 'hex', 'vals', 'of', 'received', 'data', 'on', 'occasion', 'to', 'really', 'see', 'what', 'came', 'across', 'the', 'wire.', 'EDIT', ':', 'Try', 'to', 'print', 'out', 'the', 'received', 'data', 'like', 'this', ':', 'for', '_', ',', 'b', ':=', 'range', 'buf', '{', 'fmt.Printf(""%X "", b)', '}', 'And', 'then', 'compare', 'with', 'the', 'test', 'data', 'to', 'see', 'if', 'there', 'are', 'differences,', 'this', 'is', 'as', 'you', 'say', 'the', 'only', 'place', 'it', 'could', 'go', 'wrong', '?']"
579,32717193," — for reading up to a } byte.
ReadByte() — for reading a single byte to check if a { follows.
UnreadByte(c byte) — for putting the byte back into the buffer if it's not a { following }.




Now let's look at your problem from a more general perspective.
The data you've presented in your example looks like a series of JSON objects to me.  So why are you trying to apply some low-tech approach for finding boundaries between those objects instead of just using JSON decoder to decode your data right away or at least properly skip over objects in the stream?
","['Do', 'you', 'actually', 'check', 'err', 'and', 'Len', 'after', 'c.conn.Read(buf)', 'finishes?', 'The', 'chief', 'flaw', 'in', 'your', 'program', '(as', 'presented)', 'is', 'that', ""you're"", 'using', 'buf', 'to', 'search', 'for', 'data', 'while', 'the', 'read', 'operation', 'on', 'your', 'socket', 'is', 'free', 'to', 'return', 'successfuuly', 'after', 'receiving', 'any', 'number', 'of', 'bytes', 'between', '1', 'and', '1024,', 'and', 'return', 'with', 'an', 'error', 'after', 'receiving', 'any', 'number', 'of', 'bytes', 'between', '0', 'and', '1024.', 'So,', 'you', 'must', 'do', 'two', 'things:', 'Check', 'for', 'error;', 'To', 'access', 'the', 'actual', 'data', 'available', 'at', 'the', 'beginning', 'of', 'the', 'buffer', 'after', 'the', 'read', 'operation', 'ends', 'you', 'have', 'to', 'use', 'the', 'actual', 'length', 'of', 'data,', 'Len.', 'To', 'do', 'the', 'latter,', 'you', 'usually', 'construct', 'a', 'new', 'slice:', 'data', ':=', 'buf[:Len]', 'And', 'then', 'use', 'the', 'data', 'variable:', 'if', 'bytes.Contains(data, []byte(""}{""))', '{', '...', '}', 'If', 'you', ""don't"", 'do', 'this,', 'you', 'might', 'easily', 'access', 'stale', 'data', 'in', 'your', 'buffer', '—', 'that', 'is,', 'the', 'data', 'left', 'there', 'from', 'the', 'previous', 'call', 'to', 'c.conn.Read(buf).', 'If', ""you'll"", 'think', 'of', 'the', 'situation', 'a', 'bit', 'more,', ""you'll"", 'see', 'that', 'nothing', 'guarantees', 'that', 'the', 'next', 'call', 'to', 'Read()', 'on', 'your', 'socket', 'will', 'bring', 'the', '}{', 'sequence', 'into', 'the', 'buffer,', 'and', 'you', 'have', 'to', 'be', 'prepared', 'for', 'accumulating', 'your', 'data:', 'that', 'is,', 'Each', 'call', 'to', 'Read()', 'should', 'add', 'its', 'Len', 'bytes', 'to', 'the', 'number', 'of', 'bytes', 'in', 'the', 'buffer', 'to', 'consider', 'by', 'your', 'code.', 'This', 'means', 'that', 'if', 'the', 'Nth', 'read', 'operation', 'failed', 'to', 'provide', 'the', 'data', ""you're"", 'looking', 'for,', 'the', '(N+1)th', 'operation', 'must', 'put', 'its', 'bytes', 'right', 'after', 'the', 'last', 'byte', 'of', 'the', 'previous', 'read', 'operation;', 'in', 'Go,', 'this', 'typically', 'means', 'constructing', 'another', 'slice', 'for', 'that', 'next', 'read', 'operation.', 'You', 'should', 'use', 'the', 'total', 'current', 'number', 'of', 'accumulated', 'bytes', 'to', 'search', 'for', '""}{"".', 'Please', 'consider', 'starting', 'with', 'this', 'book', 'to', 'grasp', 'the', 'basics', 'of', 'networking', 'programming', '(with', 'Go', 'specifics).', 'As', 'you', 'can', 'see,', 'properly', 'dealing', 'with', 'this', 'task', 'looks', 'complicated.', 'So', 'why', 'not', 'let', 'Go', 'do', 'buffering', 'itself?', 'You', 'could', 'restate', 'your', 'algorythm', 'like', 'this:', 'Read', 'the', 'input', 'data', 'until', 'a', '}', 'character', 'is', 'found.', 'Accumulate', 'this', 'data.', 'Once', '}', 'is', 'found,', 'read', 'the', 'next', 'character', 'and', 'if', ""it's"", 'a', '{,', ""we've"", 'found', 'the', 'spot', ""we're"", 'interested', 'in.', 'Otherwise', 'return', 'to', 'step', '(1).', 'This', 'is', 'doable', 'using', 'bytes.Buffer', 'and', 'its', 'methods:', 'ReadBytes', '(', 'delim', 'byte', ')', '—', 'for', 'reading', 'up', 'to', 'a', '}', 'byte.', 'ReadByte()', '—', 'for', 'reading', 'a', 'single', 'byte', 'to', 'check', 'if', 'a', '{', 'follows.', 'UnreadByte(c', 'byte)', '—', 'for', 'putting', 'the', 'byte', 'back', 'into', 'the', 'buffer', 'if', ""it's"", 'not', 'a', '{', 'following', '}.', 'Now', ""let's"", 'look', 'at', 'your', 'problem', 'from', 'a', 'more', 'general', 'perspective.', 'The', 'data', ""you've"", 'presented', 'in', 'your', 'example', 'looks', 'like', 'a', 'series', 'of', 'JSON', 'objects', 'to', 'me.', 'So', 'why', 'are', 'you', 'trying', 'to', 'apply', 'some', 'low-tech', 'approach', 'for', 'finding', 'boundaries', 'between', 'those', 'objects', 'instead', 'of', 'just', 'using', 'JSON', 'decoder', 'to', 'decode', 'your', 'data', 'right', 'away', 'or', 'at', 'least', 'properly', 'skip', 'over', 'objects', 'in', 'the', 'stream?']"
580,32731118,"

Writing multiple values to a stream gains efficiency because information about each encoded type is written once to the stream.  
","['Since', 'entering', 'this', 'answer,', 'I', 'learned', 'that', 'OP', 'is', 'trolling', 'us.', 'Stop', 'feeding', 'the', 'troll.', 'You', 'can', 'write', 'multiple', 'values', 'to', 'a', 'stream.', 'You', 'can', 'read', 'multiple', 'values', 'from', 'a', 'stream.', 'This', 'code', 'writes', 'two', 'values', 'to', 'output', 'stream', 'w,', 'an', 'io.Writer:', 'e', ':=', 'go', 'b.NewEncoder(w)', 'err', ':=', 'e.Encode(v1)', 'if', 'err', '!=', 'nil', '{', '//', 'handle', 'error', '}', 'err', ':=', 'e.Encode(v2)', 'if', 'err', '!=', 'nil', '{', '//', 'handle', 'error', '}', 'This', 'code', 'reads', 'the', 'values', 'from', 'stream', 'r,', 'an', 'io.Reader.', 'Each', 'call', 'to', 'Decode', 'reads', 'a', 'value', 'that', 'was', 'written', 'by', 'a', 'call', 'to', 'Decode.', 'd', ':=', 'go', 'b.NewDecoder(r)', 'var', 'v1', 'V', 'err', ':=', 'e.Decode(&v1)', 'if', 'err', '!=', 'nil', '{', '//', 'handle', 'error', '}', 'var', 'v2', 'V', 'err', ':=', 'e.Decode(&v2)', 'if', 'err', '!=', 'nil', '{', '//', 'handle', 'error', '}', 'Writing', 'multiple', 'values', 'to', 'a', 'stream', 'gains', 'efficiency', 'because', 'information', 'about', 'each', 'encoded', 'type', 'is', 'written', 'once', 'to', 'the', 'stream.']"
581,32833605,"

without changing its original code.
","['Binding', 'so', 'not', 'work.', 'The', 'fields', 'of', 'your', 'form', '-', 'name', '=', '""fields', '[1]""', 'and', 'name', '=', '""fields', '[0]""', 'are', 'independent', 'from', 'each', 'other,', 'so', 'for', 'each', 'of', 'them', 'your', 'structure', 'should', 'contain', 'its', 'own', 'field:', 'type', 'FormInfo', 'struct', '{', 'Fields1', 'string', 'Fields2', 'string', 'Action', 'string', 'PageTitle', 'string', 'Id', 'string', '}', 'respectively,', 'in', 'the', 'handler:', '...', '&', 'f', '.', 'Fields1', ':', '""fields[0]""', ',', '&', 'f', '.', 'Fields2', ':', '""fields[1]""', ',', '&', 'f', '.', 'Action', ':', '""action""', ',', '...', 'As', 'a', 'result,', 'the', 'output', 'will', 'be:', '(*', 'main', '.', 'FormInfo', ')(', '0xc', '0', '8200', 'aa50', ')({', 'Fields1', ':', '(', 'string', ')', '(', 'len', '=', '7', ')', '""value 1""', ',', 'Fields2', ':', '(', 'string', ')', '(', 'len', '=', '7', ')', '""value 2""', ',', 'Action', ':', '(', 'string', ')', '(', 'len', '=', '4', ')', '""save""', ',', 'PageTitle', ':', '(', 'string', ')', '""""', ',', 'Id', ':', '(', 'string', ')', '""""', '})', 'EDIT:', 'If', 'you', 'change', 'the', 'code', 'in', 'the', 'form', 'on', 'the', '...', '<', 'input', 'type', '=', '""text""', 'name', '=', '""fields""', '...', '<', 'input', 'type', '=', '""text""', 'name', '=', '""fields""', '...', 'you', 'can', 'get', 'info', '.', 'Fields', '=', '[', 'value', '1', 'value', '2', ']', 'without', 'changing', 'its', 'original', 'code.']"
582,32932233,"
","['Outside', 'of', 'a', 'package', 'only', 'the', 'exported', 'identifiers', 'can', 'be', 'reached', '/', 'referred', 'to,', 'that', 'is', 'identifiers', 'that', 'start', 'with', 'an', 'uppercase', 'letter.', 'So', 'the', 'easiest', 'fix', 'is', 'to', 'export', 'your', 'math.add()', 'function', 'by', 'changing', 'its', 'name', 'to', 'Add()', 'in', 'math.go:', 'func', 'Add', '(', 'x', ',', 'y', 'int', ')', 'int', '{', 'return', 'x', '+', 'y', '}', 'And', 'of', 'course', 'when', 'you', 'refer', 'to', 'it', 'from', 'the', 'main.go:', 'x', ':=', 'math.Add(6 + 5)', 'And', 'as', 'a', 'side', 'note,', 'note', 'that', 'when', 'importing', 'your', 'hello_world/math', 'package', 'you', ""don't"", 'have', 'to', 'specify', 'a', 'new', 'name', 'to', 'refer', 'to', 'its', 'exported', 'identifiers:', 'by', 'default', 'it', 'will', 'be', 'the', 'last', 'part', 'of', 'its', 'import', 'path,', 'so', 'this', 'is', 'equivalent', 'to', 'your', 'imports:', 'import', '(', '""fmt""', '""hello_world/math""', ')']"
583,32962550,"
","['The', 'main', 'problem', 'is', 'that', 'structs', 'are', 'not', 'descriptor', 'values', 'like', 'slices', 'or', 'maps,', 'that', 'is', 'if', 'you', 'assign', 'a', 'struct', 'value', 'to', 'a', 'variable,', 'it', 'will', 'be', 'copied.', 'If', 'you', 'assign', 'a', 'struct', 'value', 'to', 'an', 'element', 'of', 'a', 'slice', 'or', 'array,', 'the', 'slice', 'will', 'be', 'copied.', 'They', 'will', 'not', 'be', 'linked!', 'So', 'when', 'you', 'add', 'your', 'rootFile', 'to', 'stack,', 'and', 'then', 'you', 'pop', 'an', 'element', 'from', 'the', 'stack', '(which', 'will', 'be', 'equal', 'to', 'rootFile)', 'and', 'you', 'modify', 'the', 'popped', 'element,', 'you', 'will', 'not', 'observe', 'the', 'changes', 'in', 'your', 'local', 'variable', 'rootFile.', 'Solution', 'is', 'simple:', 'use', 'pointers', 'to', 'structs.', 'You', 'also', 'have', 'a', 'mistake', 'in', 'your', 'code:', 'child', '=', '(', 'toFile', '(', 'children', '[', 'i', '],', 'path', '+', '""/""', '+', 'children', '[', 'i', '].', 'Name', '()))', '//turn it into a File object', 'It', 'should', 'be:', 'child', '=', '(', 'toFile', '(', 'children', '[', 'i', '],', 'file', '.', 'Path', '+', '""/""', '+', 'children', '[', 'i', '].', 'Name', '()))', '// ...', 'Tips', 'to', 'improve', 'your', 'code:', 'I', 'would', 'rather', 'use', 'path.Join()', 'or', 'filepath.Join()', 'to', 'join', 'path', 'elements:', 'child', '=', 'toFile', '(', 'children', '[', 'i', '],', 'filepath.Join(file.Path, children[i].Name()))', 'Your', 'code', 'might', 'not', 'even', 'work', 'if', 'the', 'initial', 'path', 'ends', 'with', 'a', 'slash', 'or', 'backslash', 'and', 'you', 'explicitly', 'concatenate', 'it', 'with', 'another', 'slash.', 'Join()', 'will', 'take', 'care', 'of', 'these', 'so', 'you', ""don't"", 'have', 'to.', ""Don't"", 'declare', 'all', 'local', 'variables', 'ahead', 'in', 'the', 'beginning', 'of', 'your', 'function,', 'only', 'when', 'you', 'need', 'them,', 'and', 'in', 'the', 'most', 'inner', 'block', 'you', 'need', 'them.', 'This', 'will', 'ensure', 'you', ""don't"", 'accidentally', 'assign', 'to', 'the', 'wrong', 'variable,', 'and', 'you', 'will', 'know', 'it', 'is', 'not', 'modified', 'outside', 'of', 'the', 'innermost', 'block', '(because', 'outside', 'of', 'it', 'it', 'is', 'not', 'in', 'scope)', '-', 'this', 'helps', 'understanding', 'your', 'code', 'much', 'easier.', 'You', 'may', 'also', 'use', 'short', 'variable', 'declaration.', 'Make', 'use', 'of', 'the', 'for', '...', 'range', 'construct,', 'much', 'cleaner.', 'For', 'example:', 'for', '_', ',', 'chld', ':=', 'range', 'children', '{', 'child', ':=', 'toFile', '(', 'chld', ',', 'filepath.Join(file.Path, chld.Name()))', 'file', '.', 'Children', '=', 'append', '(', 'file', '.', 'Children', ',', 'child', ')', 'stack', '=', 'append', '(', 'stack', ',', 'child', ')', '}', 'Also', 'make', 'use', 'of', 'zero', 'values,', 'for', 'example', 'if', 'a', 'file', 'is', 'not', 'a', 'link,', 'you', ""don't"", 'need', 'to', 'set', 'the', 'IsLink', 'and', 'LinksTo', 'fields', 'as', 'the', 'zero', 'values', 'are', 'false', 'and', '""""', 'which', 'is', 'what', 'you', 'would', 'end', 'up', 'with.', 'And', 'although', 'it', 'may', 'not', 'be', 'important', 'here,', 'but', 'always', 'handle', 'errors,', 'print', 'or', 'log', 'them', 'as', 'a', 'minimum', 'so', 'you', ""won't"", 'end', 'up', 'wasting', 'time', 'figuring', 'out', 'what', 'is', 'wrong', 'if', 'something', 'is', 'not', 'what', 'you', 'expect', '(you', 'will', 'end', 'up', 'searching', 'bugs', 'in', 'your', 'code,', 'and', 'hours', 'later', 'you', 'finally', 'add', 'print', 'errors', 'and', 'see', 'the', 'bug', ""wasn't"", 'in', 'your', 'code', 'but', 'somewhere', 'else).', 'Working', 'variant', 'using', 'pointers', 'and', 'tips', 'mentioned', 'above', 'type', 'File', 'struct', '{', 'ModifiedTime', 'time', '.', 'Time', 'json', ':', '""ModifiedTime""', 'IsLink', 'bool', 'json', ':', '""IsLink""', 'IsDir', 'bool', 'json', ':', '""IsDir""', 'LinksTo', 'string', 'json', ':', '""LinksTo""', 'Size', 'int64', 'json', ':', '""Size""', 'Name', 'string', 'json', ':', '""Name""', 'Path', 'string', 'json', ':', '""Path""', 'Children', '[]*', 'File', 'json', ':', '""Children""', '}', 'func', 'iterateJSON', '(', 'path', 'string', ')', '{', 'rootOSFile', ',', '_', ':=', 'os.Stat(path)', 'rootFile', ':=', 'toFile', '(', 'rootOSFile', ',', 'path', ')', '//start with root file', 'stack', ':=', '[]*', 'File', '{', 'rootFile', '}', 'for', 'len', '(', 'stack', ')', '>', '0', '{', '//until stack is empty,', 'file', ':=', 'stack', '[', 'len', '(', 'stack', ')-', '1', ']', '//pop entry from stack', 'stack', '=', 'stack', '[:', 'len', '(', 'stack', ')-', '1', ']', 'children', ',', '_', ':=', 'ioutil.ReadDir(file.Path)', '//get the children of entry', 'for', '_', ',', 'chld', ':=', 'range', 'children', '{', '//for each child', 'child', ':=', 'toFile', '(', 'chld', ',', 'filepath.Join(file.Path, chld.Name()))', '//turn it into a File object', 'file', '.', 'Children', '=', 'append', '(', 'file', '.', 'Children', ',', 'child', ')', '//append it to the children of the current file popped', 'stack', '=', 'append', '(', 'stack', ',', 'child', ')', '//append the child to the stack, so the same process can be run again', '}', '}', 'output', ',', '_', ':=', 'json.MarshalIndent(rootFile, """", ""     "")', 'fmt.Println(string(output))', '}', 'func', 'toFile', '(', 'file', 'os', '.', 'FileInfo', ',', 'path', 'string', ')', '*', 'File', '{', 'JSONFile', ':=', 'File', '{', 'ModifiedTime', ':', 'file.ModTime()', ',', 'IsDir', ':', 'file.IsDir()', ',', 'Size', ':', 'file.Size()', ',', 'Name', ':', 'file.Name()', ',', 'Path', ':', 'path', ',', 'Children', ':', '[]*', 'File', '{},', '}', 'if', 'file.Mode()', '&', 'os', '.', 'ModeSymlink', '==', 'os', '.', 'ModeSymlink', '{', 'JSONFile', '.', 'IsLink', '=', 'true', 'JSONFile', '.', 'LinksTo', ',', '_', '=', 'filepath.EvalSymlinks(filepath.Join(path, file.Name()))', '}', '// Else case is the zero values of the fields', 'return', '&', 'JSONFile', '}']"
584,33165892," can be directly done in your repository and commited on it ...

Note: The environament variable can be accessibe: http://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables or calling \printenv`
","['It', 'might', 'be', 'simple,', 'but', 'matrix', 'environement', 'can', 'not', 'be', 'done', 'for', 'a', 'specific', 'OS', '...', 'Then', 'just', 'select', 'with', 'local', 'environement', 'variable:', 'language', ':', 'go', 'go', ':', '-', '1', '.', '5', '.', '1', 'branches', ':', 'only', ':', '-', 'master', 'os', ':', '-', 'osx', '-', 'linux', 'install', ':', '-', 'if', '[', '""$TRAVIS_OS_NAME""', '==', '""linux""', '];', 'then', 'export', 'GIMME_OS', '=', 'windows', ';', 'export', 'GIMME_ARCH', '=', 'amd64', ';', 'fi', 'before_script', ':', '-', 'go', 'get', '-', 'd', '-', 'v', './...', 'script', ':', '-', 'go', 'build', '-', 'v', './...', 'after_script', ':', '-', 'go', 'test', '-', 'v', './...', 'before_deploy', ':', '-', './', 'before_deploy', '.', 'sh', 'An', 'other', 'way:', 'language', ':', 'go', 'go', ':', '-', '1', '.', '5', '.', '1', 'branches', ':', 'only', ':', '-', 'master', 'matrix', ':', 'include', ':', '-', 'os', ':', 'linux', 'env', ':', 'GIMME_OS', '=', 'windows', ';', 'GIMME_ARCH', '=', 'amd64', ';', '-', 'os', ':', 'osx', 'before_script', ':', '-', 'go', 'get', '-', 'd', '-', 'v', './...', 'script', ':', '-', 'go', 'build', '-', 'v', './...', 'after_script', ':', '-', 'go', 'test', '-', 'v', './...', 'before_deploy', ':', '-', './', 'before_deploy', '.', 'sh', 'Note:', 'the', 'commande:', '-', 'chmod', '+', 'x', './', 'before_deploy', '.', 'sh', 'can', 'be', 'directly', 'done', 'in', 'your', 'repository', 'and', 'commited', 'on', 'it', '...', 'Note:', 'The', 'environament', 'variable', 'can', 'be', 'accessibe:', 'http://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables', 'or', 'calling', '\\printenv`']"
585,33171739,"QueryRow returns a single *sql.Row

What you want is Query, which will give you *sql.Rows which has the methods you are trying to use.
","['can', 'be', 'directly', 'done', 'in', 'your', 'repository', 'and', 'commited', 'on', 'it', '...', 'Note:', 'The', 'environament', 'variable', 'can', 'be', 'accessibe:', 'http://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables', 'or', 'calling', '\\printenv`']"
586,33180089,"
","['For', 'a', 'function', 'like', 'json.Unamrshal,', 'you', ""don't"", 'need', 'the', 'map,', 'you', 'only', 'need', 'the', 'correct', 'type', 'pointer,', 'which', 'you', 'can', 'make', 'with', 'reflect.New.', 'The', 'json', 'package', 'will', 'allocate', 'the', 'map', 'as', 'needed.', 'm', ':=', 'reflect.New(reflect.MapOf(reflect.TypeOf(""""), reflect.TypeOf(typ)))', 'If', 'you', 'need', 'to', 'allocate', 'the', 'map,', 'use', 'the', 'Set', 'method', 'to', 'assign', 'it', 'to', 'the', 'pointer.', 'http://play.golang.org/p/hnOhh8242i', 'map', 'Type', ':=', 'reflect.MapOf(reflect.TypeOf(""""), reflect.TypeOf(typ))', 'ptr', ':=', 'reflect.New(mapType)', 'ptr.Elem().Set(reflect.MakeMap(mapType))']"
587,33237188,"


Taken from another Stackoverflow post.
","['Type', 'this', 'stuff', 'into', 'Google', 'before', 'you', 'come', 'here.', 'you', 'can', 'do', 'this', 'by', 'execing', 'stty', '-echo', 'to', 'turn', 'off', 'echo', 'and', 'then', 'stty', 'echo', 'after', 'reading', 'in', 'the', 'password', 'to', 'turn', 'it', 'back', 'on', 'OR', 'Just', 'saw', 'a', 'mail', 'in', '#go-nuts', 'maillist.', 'There', 'is', 'someone', 'who', 'wrote', 'quite', 'a', 'simple', 'go', 'package', 'to', 'be', 'used.', 'You', 'can', 'find', 'it', 'here:', 'https://github.com/howeyc/gopass', 'It', 'something', 'like', 'that:', 'package', 'main', 'import', '""fmt""', 'import', '""github.com/howeyc/gopass""', 'func', 'main', '()', '{', 'fmt.Printf(""Password: "")', 'pass', ':=', 'go', 'pass.GetPasswd()', '//', 'Do', 'something', 'with', 'pass', '}', 'Taken', 'from', 'another', 'Stackoverflow', 'post.']"
588,33308935,"
","['A', 'few', 'things:', 'Create', 'an', 'interface', 'that', 'will', 'be', 'implemented', 'both', 'by', 'datastore.Storage', 'and', 'your', 'mock', 'store.', 'Use', 'the', 'above', 'interface', 'as', 'the', 'argument', 'type', 'in', 'EventHandler', '(not', 'a', 'pointer', 'to', 'the', 'interface).', 'Pass', 'a', 'pointer', 'to', 'your', 'MockStore', 'to', 'EventHandler,', 'as', 'the', 'Get', 'method', 'is', 'defined', 'for', 'a', 'pointer', 'to', 'the', 'struct.', 'Your', 'updated', 'code', 'should', 'be', 'something', 'like', 'the', 'following:', 'type', 'Store', 'interface', '{', 'Get', '()', '(', 'interface', '{},', 'bool', ')', '// change as needed', 'Set', '(', 'interface', '{})', 'bool', '}', 'type', 'MockStore', 'struct', '{', 'mock', '.', 'Mock', '}', 'func', '(', 's', '*', 'MockStore', ')', 'Get', '()', '...', 'func', 'EventHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ',', 'bucket', 'datastore', '.', 'Storage', '){', '//', 'Does', 'HTTP', 'stuff', 'and', 'stores', 'things', 'in', 'a', 'data', 'store', '//', 'Need', 'to', 'mock', 'out', 'the', 'data', 'store', 'get/sets', '}', '//', 'Later', 'in', 'my', 'Tests', 'ms', ':=', '&', 'MockStore', '{}', 'EventHandler', '(', 'w', ',', 'r', ',', 'ms', ')']"
589,33314888,"

For more details: https://golang.org/pkg/net/http/
","['Hope', 'this', 'will', 'help:', 'package', 'main', 'import', '(', '""fmt""', '""io/ioutil""', '""log""', '""net/http""', ')', 'func', 'Error', '(', 'err', 'error', ')', '{', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', '}', 'func', 'main', '()', '{', 'response', ',', 'err', ':=', 'http.Get(""http://www.oracle.com/"")', 'Error', '(', 'err', ')', 'defer', 'response', '.', 'Body.Close()', 'contents', ',', 'err', ':=', 'ioutil.ReadAll(response.Body)', 'Error', '(', 'err', ')', 'fmt.Printf(""%s\\n"", contents)', '}', 'For', 'more', 'details:', 'https://golang.org/pkg/net/http/']"
590,33317209,"
","['An', 'alternative', 'approach', 'is', 'to', 'make', 'main()', 'be', 'a', 'stub', 'that', 'merely', 'calls', 'into', 'another', 'function', 'after', 'arguments', 'are', 'processed', 'by', 'flag.Parse(),', 'for', 'example:', 'var', 'flagvar', 'int', 'func', 'init', '()', '{', 'flag.IntVar(&flagvar, ""flagname"", 1234, ""help for flagname"")', '}', 'func', 'main', '()', '{', 'flag.Parse()', 'submain', '(', 'flag', '.', 'Args', ')', '}', 'func', 'submain', '(', 'args', '[]', 'string', ')', '{', '...', '}', 'Then', 'in', 'your', 'tests,', 'flag', 'variables', 'can', 'be', 'set', 'and', 'arguments', 'established', 'before', 'calling', 'submain(...)', 'simulating', 'the', 'command', 'line', 'establishment', 'of', 'flags', 'and', 'arguments.', 'This', 'approach', 'can', 'be', 'used', 'to', 'maximize', 'test', 'coverage', 'without', 'actually', 'using', 'a', 'command', 'line.', 'For', 'example,', 'in', 'main_test.go,', 'you', 'might', 'write:', 'func', 'TestSomething', '(', 't', '*', 'testing', '.', 'T', ')', '{', 'flagvar', '=', '23', 'args', ':=', '[]', 'string', '{', '""a""', ',', '""b""', ',', '""c""', '}', 'submain', '(', 'args', ')', '...', '}']"
591,33338989,"
","[""I'm"", 'new', 'to', 'Go,', 'please', 'excuse', 'this', 'code', 'for', 'being', 'ugly/malformed/just', 'plain', 'wrong.', ""I've"", 'been', 'working', 'my', 'way', 'though', 'this', 'and', 'ran', 'across', 'the', 'same', 'problem', 'on', 'appengine.', ""@Caleb's"", 'answer', 'above', 'was', 'a', 'big', 'help.', ""I've"", 'just', 'added', 'some', 'detail', 'to', 'that', 'to', 'help', 'someone', 'who', 'might', 'come', 'across', 'a', 'similar', 'problem.', ""Here's"", 'what', 'my', 'import', 'statement', 'looks', 'like:', 'Import', '{', '""appengine""', '""appengine/urlfetch""', '""bytes""', '""encoding/json""', '""fmt""', '""golang.org/x/oauth2""', '""io/ioutil""', '""net/http""', '""net/url""', '}', 'This', 'is', 'a', 'function', 'that', 'receives', 'and', 'incoming', 'authentication', 'callback', 'request,', 'then', 'replies', 'with', 'a', 'request', 'for', 'an', 'access', 'token', 'from', 'the', 'authentication', 'server.', 'In', 'this', 'case,', 'fitbit,', 'which', 'needs', 'an', 'Authentication', 'header', 'set', 'to', '""Basic""', 'with', 'some', 'extra', 'information.', 'I', ""couldn't"", 'figure', 'out', 'how', 'to', 'do', 'this', 'with', 'the', 'stock', 'Oauth2', 'library,', 'which', ""doesn't"", 'seem', 'to', 'easily', 'allow', 'changing', 'the', 'request', 'headers.', 'As', 'you', 'can', 'see', 'we', 'the', 'context', 'of', 'the', 'incoming', 'request', '(r).', 'From', 'that', 'context,', 'we', 'get', 'the', 'http.Client', 'from', 'urlfetch.', 'Then', 'we', 'pack', 'up', 'and', 'send', 'a', 'request', 'back,', 'with', 'some', 'authorization', 'information.', 'After', 'we', 'get', 'a', 'response', 'we', 'print', 'the', 'results', 'to', 'the', 'browser.', 'Hope', 'this', 'helps!', 'func', 'authCallbackHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'data', ':=', 'url', '.', 'Values', '{}', 'data.Set(""client_id"", ""231343"")', 'data.Add(""grant_type"", ""authorization_code"")', 'data.Add(""redirect_uri"", ""http://localhost:8080/callmebacklaterok"")', 'data.Add(""code"", ""authcode123132"")', 'encodedData', ':=', 'data.Encode()', 'c', ':=', 'appengine.NewContext(r)', 'client', ':=', 'urlfetch.Client(c)', 'urlStr', ':=', '""https://api.fitbit.com/oauth2/token""', 'req', ',', '_', ':=', 'http.NewRequest(""POST"", urlStr,bytes.NewBufferString(encodedData))', 'req', '.', 'Header.Add(""Authorization"", ""Basic RmFuY3kgbWVldGluZyB5b3UgaGVyZSEg"")', 'resp', ',', '_', ':=', 'client.Do(req)', 'defer', 'resp', '.', 'Body.Close()', 'fmt.Fprint(w, resp)', 'body', ',', 'err', ':=', 'ioutil.ReadAll(resp.Body)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err.Error())', '}', 'var', 'bodydata', 'interface', '{}', 'err', '=', 'json.Unmarshal(body, &bodydata)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err.Error())', '}', 'fmt.Fprint(w, bodydata)', '}']"
592,33400582," is added to the string when you pass extra parameters, unexpected by the format. Maybe you are using the format string ""Hello World"" instead of ""Hello %s"", or passing the argument twice?
","['I', ""can't"", 'reproduce', 'this', 'behavior.', 'Are', 'you', 'sure', ""it's"", 'not', 'a', 'simple', 'error', 'that', 'you', 'forgot', 'to', 'show', 'here?', 'https://play.golang.org/p/-jtmll17Xj', 'package', 'main', 'import', '""fmt""', 'func', 'Info', '(', 'for', 'mat', 'string', ',', 'args', '...', 'interface', '{}){', 'msg', ':=', 'fmt.Sprintf(format, args...)', 'fmt.Print(msg)', '}', 'func', 'main', '()', '{', 'Info', '(', '""Hello %s""', ',', '""World""', ')', '}', 'Prints', 'Hello', 'World', 'According', 'to', 'the', 'fmt', 'docs,', '%!(', 'EXTRA', 'string', '=', 'WORLD', ')', 'is', 'added', 'to', 'the', 'string', 'when', 'you', 'pass', 'extra', 'parameters,', 'unexpected', 'by', 'the', 'format.', 'Maybe', 'you', 'are', 'using', 'the', 'format', 'string', '""Hello', 'World""', 'instead', 'of', '""Hello', '%s"",', 'or', 'passing', 'the', 'argument', 'twice?']"
593,33401293,"

Some of my code was calling the library without a format string.See here for a more detailed example: http://play.golang.org/p/Xx79qujaFp
","['The', 'error', 'was', 'between', 'the', 'chair', 'and', 'keyboard.', 'I', 'mixed', 'up', 'the', 'following', 'interfaces:', 'func', 'Print', '(', 'v', '...', 'interface', '{})', 'func', 'Printf', '(', 'for', 'mat', 'string', ',', 'v', '...', 'interface', '{})', 'Some', 'of', 'my', 'code', 'was', 'calling', 'the', 'library', 'without', 'a', 'format', 'string.See', 'here', 'for', 'a', 'more', 'detailed', 'example:', 'http://play.golang.org/p/Xx79qujaFp']"
594,33513828,"This seems to be a known issue: https://github.com/golang/go/issues/6483.  The workaround is to call SerializePrivate first, even if you don't use the result.
","['Some', 'of', 'my', 'code', 'was', 'calling', 'the', 'library', 'without', 'a', 'format', 'string.See', 'here', 'for', 'a', 'more', 'detailed', 'example:', 'http://play.golang.org/p/Xx79qujaFp']"
595,33524942,"
","['in', 'case', 'where', 'multiple', '""teardown""', 'processes', 'are', 'needed,', 'great', 'solution', 'to', 'this', 'is', 'using', 'google', 'context', 'package', '(https://blog.golang.org/context).', 'advantage', 'is', 'that', 'you', 'can', 'teardown', 'all', 'currently', 'executing', 'procedures', 'with', 'single', 'context.', 'smth', 'like', 'this:', 'package', 'main', 'import', '(', '""fmt""', '""io""', '""log""', '""os""', '""golang.org/x/net/context""', ')', 'func', 'LogSetup', '(', 'ctx', 'context', '.', 'Context', ')', 'error', '{', 'logFile', ',', 'err', ':=', 'os.OpenFile(""test.log"", os.O_CREATE|os.O_APPEND|os.O_RDWR, 0666)', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'log.SetOutput(io.MultiWriter(os.Stderr, logFile))', '//', 'here', 'we', 'could', 'f.ex.', 'execute:', '//', 'sendLogOutputToExternalService(ctx)', '//', 'and', 'it', 'could', 'have', ""it's"", 'own', 'teardown', 'procedure', '//', 'which', 'would', 'be', 'called', 'on', 'main', ""context's"", 'expiration', 'go', 'func', '()', '{', 'for', '_', '=', 'range', 'ctx.Done()', '{', 'err', ':=', 'logFile.Close()', 'if', 'err', '=', 'nil', '{', 'fmt.Fprintf(os.Stderr, ""Problem closing the log file: %s\\n"", e)', '}', '}()', 'return', 'nil', '}', 'func', 'main', '()', '{', 'var', 'stopAll', 'func', '()', 'mainContext', ',', 'stopAll', '=', 'context.WithCancel(context.Background())', 'defer', 'stopAll', '()', 'err', ':=', 'LogSetup', '(', 'mainContext', ')', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(""error while initializing logging"")', '}', 'log.Println(""Test message"")', '}']"
596,33605439,"
","['It', 'turns', 'out', 'that', 'line', 'glidenovendor', '=', 'append', '(', 'glidenovendor', ',', 'strings.Split(out.String(), "" "")...)', 'for', 'some', 'reason', 'added', 'a', 'new', 'line', 'character', '""\\n""', 'to', 'the', 'last', 'string', 'element', 'of', 'the', 'glidenovendor', 'slice.', 'I', 'still', 'have', 'no', 'idea', 'why.', 'But', 'removing', 'it', 'with', 'the', 'snippet', 'below', 'got', 'the', 'script', 'running', 'as', 'expected:', '//', 'Remove', 'trailing', 'LF', 'from', 'strings', 'in', '`glidenovendor`', 'for', 'i', ',', 'v', ':=', 'range', 'glidenovendor', '{', 'glidenovendor', '[', 'i', ']', '=', 'strings.Trim(v, ""\\n"")', '}']"
597,33632446,"

which will give it the right size initially.
","['Your', 'method', 'of', 'generating', 'the', 'random', 'numbers', 'is', 'fine,', 'however', 'xs', 'is', 'empty,', 'and', 'Go', ""doesn't"", 'automatically', 'extend', 'slices.', 'You', 'could', 'use', 'append,', 'however', 'since', 'you', 'know', 'the', 'size', 'in', 'advance,', ""it's"", 'most', 'efficient', 'to', 'replace', 'var', 'xs', '[]float64', 'with', 'xs', ':=', 'make', '([]', 'float64', ',', '10', ')', 'which', 'will', 'give', 'it', 'the', 'right', 'size', 'initially.']"
598,33633601,"
","['@hobbs', 'answered', 'the', 'part', 'about', 'your', 'error,', 'but', 'still', 'your', 'solution', 'will', 'give', 'you', 'the', 'same', 'array', 'every', 'time', 'you', 'run', 'it', 'because', 'you', 'are', 'not', 'passing', 'a', 'random', 'seed.', 'I', 'would', 'do', 'something', 'like', 'this:', 'package', 'main', 'import', '(', '""fmt""', '""math/rand""', '""time""', ')', 'func', 'main', '()', '{', 's', ':=', 'rand.NewSource(time.Now().UnixNano())', 'r', ':=', 'rand.New(s)', 'xn', ':=', 'make', '([]', 'float64', ',', '10', ')', 'for', 'n', ':=', '0', ';', 'n', '<', '10', ';', 'n', '++', '{', 'xn', '[', 'n', ']', '=', 'r.Float64()', '}', 'fmt.Println(xn)', '}']"
599,33646531,"You can create one timer object with time.NewTicker this will provide with a channel that sends a message periodically. 
","['You', 'can', 'create', 'one', 'timer', 'object', 'with', 'time.NewTicker', 'this', 'will', 'provide', 'with', 'a', 'channel', 'that', 'sends', 'a', 'message', 'periodically.']"
600,33655049,"You want to create a single priority queue that holds all of the scheduled timeouts.  A single goroutine should be checking the head of the priority queue, sleeping until the next timeout, and either execute the associated code or discard it.

Of course, you will need to deal with synchronisation issues.  The Java way would be to protect the priority queue by a lock.  The more go-ish approach would be to put the timeout-handling goroutine in charge of enqueing timeouts, which it receives over a dedicated channel.

There is a priority queue implementation in package container/heap, but I haven't checked how good it is.
",[]
601,33672201,"Your OAuth token has no write:public_key scope. Scopes
",[]
602,33699213,"
","['Is', 'there', 'a', 'way', 'to', 'pre-compile', 'my', 'dependencies', '(get', '.a)', 'files,', 'so', 'it', 'is', 'faster', 'to', 'compile', 'when', 'I', 'run', 'go', 'install', 'or', 'go', 'build', 'See', 'https://golang.org/cmd/go/#hdr-Compile_packages_and_dependencies', 'go', 'build', '[-o', 'output]', '[-i]', '[build', 'flags]', '[packages]', '[...]', 'The', '-i', 'flag', 'installs', 'the', 'packages', 'that', 'are', 'dependencies', 'of', 'the', 'target.', 'Also,', 'how', 'can', 'I', 'remove', 'vendor/', 'from', ""go's"", 'tools', 'to', 'lint', 'and', 'check', 'the', 'codebase', 'for', 'errors?', 'See', 'https://github.com/golang/go/issues/11659#issuecomment-122139338:', 'Instead', 'of', 'using', './...', 'you', 'can', 'do:', 'go', 'install', '$(', 'go', 'list', './...', '|', 'grep', '-', 'v', '/vendor/)']"
603,33705844,"
","['The', 'GitHub', 'API', 'docs', 'for', 'creating', 'a', 'public', 'key', 'give', 'an', 'example', 'with', 'a', 'request', 'body', 'that', 'contains', 'lowercase', 'keys:', '{', '""title""', ':', '""octocat@octomac""', ',', '""key""', ':', '""ssh-rsa AAA...""', '}', 'while', 'the', 'first', 'character', 'of', 'your', 'request', 'keys', 'is', 'capitalized:', '{', '""Title""', ':', '""octocat@octomac""', ',', '""Key""', ':', '""ssh-rsa AAA...""', '}', 'I', 'think', 'the', 'easiest', 'way', 'to', 'fix', 'this', 'is', 'by', 'using', 'json', 'struct', 'tags', 'on', 'your', 'githubBody', 'struct.', 'For', 'example:', 'type', 'githubBody', 'struct', '{', 'Title', 'string', 'json', ':', '""title""', 'Key', 'string', 'json', ':', '""key""', '}']"
604,33705989,"You are trying to access variables called 1back and 2back but your variables are actually called back1 and back2 
",[]
605,33708340,"Refactoring issues aside, keep in mind that variables in go must begin with a letter, not a number. back1 and back2 are valid go variables, but 1back and 2back are not. See https://golang.org/ref/spec#Identifiers. 
",[]
606,33722676,"

Will not send the file ""Screen Shot 2015-11-15 at 6.09.58 pm.png"", it's gonig to send the literal text as the body. You probably want ""-d @'Screen Shot 2015-11-15 at 6.09.58 pm.png'"".

Which then your ""good"" result is not exactly good, so you have to figure out what the bug is at the receiving end on the server. As the GUI client you're using is probably sending the file, whereas cURL is not. And your backend seems to accept text, not files. 
","['I', 'do', 'not', 'believe', ""you're"", 'doing', 'what', 'you', 'think', 'you', 'are.', 'curl', '-', 'X', 'POST', '-', 'd', '""Screen Shot 2015-11-15 at 6.09.58 pm.png""', 'http', '://', 'localhost', ':', '8000/image/agent123/property --header ""Content-Type:image/png""', '--', 'header', '""X-User-Agent:agent-php""', 'Will', 'not', 'send', 'the', 'file', '""Screen', 'Shot', '2015-11-15', 'at', '6.09.58', 'pm.png"",', ""it's"", 'gonig', 'to', 'send', 'the', 'literal', 'text', 'as', 'the', 'body.', 'You', 'probably', 'want', '""-d', ""@'Screen"", 'Shot', '2015-11-15', 'at', '6.09.58', 'pm.png\'"".', 'Which', 'then', 'your', '""good""', 'result', 'is', 'not', 'exactly', 'good,', 'so', 'you', 'have', 'to', 'figure', 'out', 'what', 'the', 'bug', 'is', 'at', 'the', 'receiving', 'end', 'on', 'the', 'server.', 'As', 'the', 'GUI', 'client', ""you're"", 'using', 'is', 'probably', 'sending', 'the', 'file,', 'whereas', 'cURL', 'is', 'not.', 'And', 'your', 'backend', 'seems', 'to', 'accept', 'text,', 'not', 'files.']"
607,33806519,"
","['I', 'am', 'trying', 'to', 'use', 'logrus', 'to', 'write', 'the', 'CSV', 'as', 'logs.', 'But', 'I', 'see', 'the', 'log', 'level', '(info)', 'and', 'the', 'time', 'getting', 'added', 'to', 'the', 'CSV', 'content', 'in', 'logs.', 'It', 'looks', 'like', 'you', 'definitely', ""shouldn't"", 'be', 'using', 'logrus,', 'as', 'the', 'main', 'reason', 'it', 'exists', 'is', 'creating', 'structured', 'logs,', 'i.e.', 'key-value', 'style.', 'Not', 'sure', 'why', ""don't"", 'you', 'simply', 'do', 'fmt.Println(""100,Click,Android"")', 'or', 'fmt.Fprintln(os.Stderr, ""100,Click,Android"")', 'if', 'you', 'want', 'it', 'to', 'be', 'written', 'into', 'the', 'standard', 'error', '(default', 'for', 'loggers).', 'If', 'for', 'any', 'reason', 'you', 'need', 'a', 'logger,', 'you', 'can', 'pretty', 'much', 'do', 'the', 'same', 'thing', 'with', 'the', 'standard', 'logger', 'by', 'disabling', 'flags:', 'log.SetFlags(0)', 'log.Println(""100,Click,Android"")', '//', 'Output:', '//', '100,Click,Android', 'However,', 'if', ""you're"", 'creating', 'a', 'CSV', 'output', 'yourself', '(i.e.', 'you', 'have', 'spearate', 'fields', 'rather', 'than', 'full', 'CSV', 'lines', 'already),', 'use', 'csv', 'package', 'from', 'the', 'standard', 'library:', 'w', ':=', 'csv.NewWriter(os.Stdout)', 'w.Write([]string{""100"", ""Click"", ""Android""})', 'w.Flush()', '//', 'Output:', '//', '100,Click,Android', 'Unless', 'you', 'just', 'want', 'to', 'use', 'logrus,', 'then', 'follow', 'the', 'concept', 'of', 'the', 'package', 'and', 'stick', 'with', 'structured', 'output:', 'logrus', '.', 'WithFields', '(', 'logrus', '.', 'Fields', '{', '""id""', ':', '""100""', ',', '""event""', ':', '""Click""', ',', '""os""', ':', '""Android""', ',', '}).', 'Info', '(', '""Hooray, we have some users!""', ')', '//', 'Output:', '//', 'time=""2015-11-19T15:20:32+01:00""', 'level=info', 'msg=""Hooray,', 'we', 'have', 'some', 'users!""', 'event=Click', 'id=100', 'os=Android']"
608,33836248,". That's not really what you're looking for. If you want to say ""Car is a Vehicle"" and it be true, then Vehicle needs to be an interface which Car implements.
","['Vehicle', 'is', 'embedded', 'in', 'Car', 'and', 'Bus', 'so', 'you', 'got', 'things', 'going', 'in', 'the', 'wrong', 'direction...', ""It's"", 'not', 'like', 'Vehicle', 'is', 'a', 'parent', 'class', 'so', 'you', ""can't"", 'get', 'the', 'polymorphic', 'behavior', ""you're"", 'looking', 'for', 'out', 'of', 'this', 'design.', 'What', 'you', 'need', 'is', 'an', 'interface.', 'To', 'show', 'you', 'a', 'working', 'example', ""I'm"", 'just', 'going', 'to', 'use', 'empty', 'interface', '(it', 'will', 'allow', 'you', 'to', 'store', 'any', 'type', 'in', 'the', 'collection).', 'For', 'your', 'actual', 'program', 'you', 'might', 'want', 'to', 'make', 'something', 'like', 'an', 'IVehicle', 'interface', 'and', 'put', 'whatever', 'common', 'method', 'all', 'the', 'vehicles', 'will', 'have', 'on', 'it,', 'maybe', 'something', 'like', 'Start()', 'or', 'whatever...', 'https://play.golang.org/p/iPJbFYlo7o', 'To', 'expand', 'on', 'that', 'embedding', 'thing', 'a', 'little', 'bit...', 'This', ""isn't"", 'inheritance.', 'You', 'can', 'accomplish', 'the', 'same', 'things', 'with', 'it', 'however', 'the', 'statement', '""Car', 'is', 'a', 'Vehicle""', 'is', 'not', 'true.', 'This', 'is', 'actually', 'more', 'like', 'composition,', '""Car', 'has', 'a', 'Vehicle"".', ""It's"", 'just', 'that', ""Vehicle's"", 'fields', 'and', 'methods', 'are', ""'hoisted'"", 'up', 'to', 'Car,', 'meaning', 'they', 'can', 'be', 'accessed', 'from', 'an', 'instance', 'of', 'Car', 'without', 'another', 'layer', 'of', 'indirection', 'like', 'Car', '.', 'Vehicle', '.', 'FieldOnVehicle', '.', ""That's"", 'not', 'really', 'what', ""you're"", 'looking', 'for.', 'If', 'you', 'want', 'to', 'say', '""Car', 'is', 'a', 'Vehicle""', 'and', 'it', 'be', 'true,', 'then', 'Vehicle', 'needs', 'to', 'be', 'an', 'interface', 'which', 'Car', 'implements.']"
609,33848913,"
","['What', 'about', 'anonymous', 'fields?', ""I'm"", 'not', 'sure', 'if', 'that', 'will', 'constitute', 'a', '""nested', 'struct""', 'but', ""it's"", 'cleaner', 'than', 'having', 'a', 'nested', 'struct', 'declaration.', 'What', 'if', 'you', 'want', 'to', 'reuse', 'the', 'nested', 'element', 'elsewhere?', 'type', 'NestedElement', 'struct', '{', 'someNumber', 'int', 'json', ':', '""number""', 'someString', 'string', 'json', ':', '""string""', '}', 'type', 'BaseElement', 'struct', '{', 'NestedElement', 'json', ':', '""bar""', '}']"
610,33873000," (or go install or whatever), etc
By default a binary will be built for the system you're running, but this isn't necessary - see 2

","['Yes', 'it', 'will;', 'this', 'is', 'true', 'of', 'basically', 'all', 'binaries', 'compiled', 'for', '64-bit', 'Linux,', 'not', 'just', 'those', 'written', 'in', 'Go', '(except', 'for', 'shared', 'libraries,', 'which', 'Go', ""doesn't"", 'rely', 'on)', 'You', 'can', 'set', 'the', 'GOOS', 'and', 'GOARCH', 'environment', 'variables', 'before', 'building:', 'GOOS', '=', 'windows', 'GOARCH', '=', '386', 'go', 'build', '(or', 'go', 'install', 'or', 'whatever),', 'etc', 'By', 'default', 'a', 'binary', 'will', 'be', 'built', 'for', 'the', 'system', ""you're"", 'running,', 'but', 'this', ""isn't"", 'necessary', '-', 'see', '2']"
611,33902991,"
","['It', 'seems', 'the', 'documentation', 'is', 'incorrect.', 'handlers', '.', 'RecoveryHandler', 'can', 'not', 'be', 'used', 'as', 'a', 'http', 'handler', 'middleware', 'itself,', 'it', 'returns', 'one.', 'Looking', 'at', 'the', 'signature', 'func', 'RecoveryHandler', '(', 'opts', '...', 'RecoveryOption', ')', 'func', '(', 'h', 'http', '.', 'Handler', ')', 'http', '.', 'Handler', 'we', 'can', 'see', 'that', 'it', 'takes', '0', 'or', 'more', 'handlers', '.', 'RecoveryOption', 's', 'and', 'returns', 'a', 'func', '(', 'http', '.', 'Handler', ')', 'http', '.', 'Handler', '.', 'That', 'func', 'that', 'it', 'returns', 'is', 'what', 'we', 'actually', 'want', 'to', 'wrap', 'around', 'our', 'router.', 'We', 'can', 'write', 'it', 'as', 'recoveryHandler', ':=', 'handlers.RecoveryHandler()', 'http.ListenAndServe("":1123"", recoveryHandler(r))', 'Or', 'you', 'could', 'do', 'it', 'all', 'in', 'one', 'line', 'http.ListenAndServe("":1123"", handlers.RecoveryHandler()(r))']"
612,33911866,"

Playground

JSON serialization in GO
","['Fields', 'in', 'your', 'structures', 'starts', 'with', 'lower', 'case', 'so', 'they', 'are', 'not', 'marshalled', 'to', 'JSON.', 'Make', 'them', 'start', 'with', 'upper', 'case', 'letter.', 'package', 'main', 'import', '""encoding/json""', 'import', '""fmt""', 'type', 'Sim', 'struct', '{', 'Yr', ',', 'Ag', ',', 'Av', ',', 'Db', ',', 'Wd', ',', 'St', '[]', 'int', 'Withdrawal', '[]', 'string', '}', 'func', 'main', '()', '{', '//', 'Creating', 'simulation', 'var', 's', 'Sim', '//', 'Converting', 'to', 'JSON,', 'for', 'transmission', 'over', 'web', 'data', ',', 'err', ':=', 'json.Marshal(s)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', '//', 'Data', 'is', 'correct', 'fmt.Println(s)', '//', 'Prints:', '{}', 'fmt.Println(string(data))', '}', 'Playground', 'JSON', 'serialization', 'in', 'GO']"
613,33948752,"Really surprised nobody has mentioned gopkg.in.

gopkg.in is a service that provides a wrapper (redirect) that lets you express versions as repo urls, without actually creating repos. eg gopkg.in/yaml.v1 vs gopkg.in/yaml.v2, even though they both live at https://github.com/go-yaml/yaml


gopkg.in/yaml.v1 redirects to https://github.com/go-yaml/yaml/tree/v1
gopkg.in/yaml.v2 redirects to https://github.com/go-yaml/yaml/tree/v2


This isn't perfect if the author is not following proper versioning practices (by incrementing the version number when breaking backwards compatibility), but it does work with branches and tags.
","['Really', 'surprised', 'nobody', 'has', 'mentioned', 'gopkg.in.', 'gopkg.in', 'is', 'a', 'service', 'that', 'provides', 'a', 'wrapper', '(redirect)', 'that', 'lets', 'you', 'express', 'versions', 'as', 'repo', 'urls,', 'without', 'actually', 'creating', 'repos.', 'eg', 'gopkg.in/yaml.v1', 'vs', 'gopkg.in/yaml.v2,', 'even', 'though', 'they', 'both', 'live', 'at', 'https://github.com/go-yaml/yaml', 'gopkg.in/yaml.v1', 'redirects', 'to', 'https://github.com/go-yaml/yaml/tree/v1', 'gopkg.in/yaml.v2', 'redirects', 'to', 'https://github.com/go-yaml/yaml/tree/v2', 'This', ""isn't"", 'perfect', 'if', 'the', 'author', 'is', 'not', 'following', 'proper', 'versioning', 'practices', '(by', 'incrementing', 'the', 'version', 'number', 'when', 'breaking', 'backwards', 'compatibility),', 'but', 'it', 'does', 'work', 'with', 'branches', 'and', 'tags.']"
614,34101405,"

This should correctly return all releases for jp9000's obs-studio repository.

Original Answer:

Looking at the docs, the code looks good but this might be an issue with Github's API though. For instance, if you go to https://api.github.com/repos/golang/go/releases you get an empty array, but if you search for the tags using https://api.github.com/repos/golang/go/tags it lists all tasks without any problem.

And if you go to https://api.github.com/repos/golang/go/releases/1 you get a 404. I took these addresses from the Github Developer's page: https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository
","['Edit:', 'Taking', 'a', 'closer', 'look', 'at', 'the', 'Go', 'repository,', 'the', 'releases', 'are', 'actually', 'just', 'tags', 'and', 'not', 'Github', 'releases,', ""that's"", 'why', ""it's"", 'returning', 'an', 'empty', 'array.', 'Try', 'this:', '//', 'https:api.github.com/repos/jp9000/obs-studio/releases', 'releases', ',', 'rsp', ',', 'err', ':=', 'client', '.', 'Repositories.ListReleases(""jp9000"", ""obs-studio"", opt)', 'This', 'should', 'correctly', 'return', 'all', 'releases', 'for', ""jp9000's"", 'obs-studio', 'repository.', 'Original', 'Answer:', 'Looking', 'at', 'the', 'docs,', 'the', 'code', 'looks', 'good', 'but', 'this', 'might', 'be', 'an', 'issue', 'with', ""Github's"", 'API', 'though.', 'For', 'instance,', 'if', 'you', 'go', 'to', 'https://api.github.com/repos/golang/go/releases', 'you', 'get', 'an', 'empty', 'array,', 'but', 'if', 'you', 'search', 'for', 'the', 'tags', 'using', 'https://api.github.com/repos/golang/go/tags', 'it', 'lists', 'all', 'tasks', 'without', 'any', 'problem.', 'And', 'if', 'you', 'go', 'to', 'https://api.github.com/repos/golang/go/releases/1', 'you', 'get', 'a', '404.', 'I', 'took', 'these', 'addresses', 'from', 'the', 'Github', ""Developer's"", 'page:', 'https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository']"
615,34191218,"
","['By', 'default,', 'Angular', 'adds', 'the', 'hashPrefix', 'in', 'front', 'of', 'urls.', 'So', 'when', 'you', 'navigate', 'to', 'http', '://', 'localhost', ':', '8080/admin', ',', 'You', ""don't"", 'see', 'index.html', 'since', 'you', 'have', 'not', 'yet', 'visited', 'the', 'url', 'as', 'defined', 'in', 'the', ""angular's"", 'ui-router.', 'You', 'will', 'have', 'to', 'navigate', 'to', 'http', '://', 'localhost', ':', '8080/admin/#/', 'to', 'actuall', 'be', 'in', 'the', '/', 'state', 'of', 'your', 'application.', 'It', 'is', 'the', 'same', 'reason', 'that', 'your', 'app', ""doesn't"", 'work', 'without', 'the', '.otherwise(),', 'since', 'then', 'it', 'automatically', 'redirects', 'you', 'to', 'the', '/', 'state', 'later.', 'For', 'a', 'possible', 'fix:', 'Inside', 'your', '.config', 'function:', '//', 'This', 'is', 'in', 'your', 'app', 'module', 'config.', '$', 'locationProvider.html5Mode(true)', ';', 'And', 'in', 'your', 'index.html:', '//', 'This', 'is', 'in', 'your', 'index.html', 'head.']"
616,34191224,"The problem is not with not having a declared otherwise.

The problem lays on your route. You're specifying the url to be '/', that means the state home is accessible only through http://localhost:8080/admin/ and NOT through http://localhost:8080/admin

What the otherwise does is. When you access the url http://localhost:8080/admin the router try to find a state that matches the url, but don't find it. So it redirects to http://localhost:8080/admin/ which matches with your home state.
",[]
617,34230466,"

This, in my opinion, is a powerful pattern since you can write more ""generic"" handlers and just plug them in to the routes you want.  
","['I', 'assume', 'your', 'main_package', ""isn't"", 'the', 'main', 'package', 'in', 'Go.', 'I', 'think', 'the', 'child_packages', ""shouldn't"", 'be', 'under', 'the', 'main_package', 'as', 'our', 'goal', 'is', 'to', 'decouple', 'each', 'package', 'from', 'one', 'another.', 'This', 'is', 'the', 'pattern', 'that', ""I'm"", 'currently', 'using', 'in', 'my', 'project', 'to', 'avoid', 'dependency', 'conflicts:', 'project', '/', 'main_package', 'main_package', '.', 'go', 'brokers', 'brokers', '.', 'go', 'child_package1', 'child_package1', '.', 'go', 'child_package2', 'child_package2', '.', 'go', 'child_package3', 'child_package3', '.', 'go', 'Essentially,', 'each', 'package', 'should', 'never', 'have', 'to', 'deal', 'with', 'anything', 'outside', 'of', 'itself', '(or', 'at', 'least', 'do', 'so', 'with', 'as', 'little', 'as', 'possible).', 'The', 'broker', 'will', 'be', 'the', 'sole', 'party', 'who', '""negotiates""', 'between', 'any', 'two', 'packages.', '//', 'main_package.go', 'package', 'main_package', 'import', '(', '""path/to/sql""', '""path/to/mux""', '""path/to/brokers""', ')', '//', 'Never', 'use', 'selectors', 'from', 'packages', 'directly', '//', 'but', 'create', 'a', '`Broker`', 'object', 'for', 'each', 'endpoint', 'var', 'bk1', '=', 'brokers.New(""/api1"")', 'var', 'bk2', '=', 'brokers.New(""/api2"")', 'var', 'bk3', '=', 'brokers.New(""/api3"")', 'func', 'Handlers', '(', 'db', '*', 'sql', '.', 'DB', ',', 'customeruploadFile', 'string', ')', '*', 'mux', '.', 'Router', '{', 'router', ':=', 'mux.NewRouter()', '//', 'each', 'broker', 'has', 'its', 'own', '`MyHandler`', 'function', 'router.HandleFunc(""/api1"", bk1.MyHandler)', 'router.HandleFunc(""/api2"", bk2.MyHandler)', 'router.HandleFunc(""/api3"", bk3.MyHandler)', 'fileHandler', ':=', 'http.FileServer(http.Dir(""./client/compiled""))', 'router.PathPrefix(""/"").Handler(http.StripPrefix(""/"", fileHandler))', 'return', 'router', '}', 'The', 'brokers', 'package', 'is', 'the', 'central', 'interface', 'for', 'the', 'communication', '//', 'brokers.go', 'package', 'brokers', 'import', '(', '""path/to/child_package1""', '""path/to/child_package2""', '""path/to/child_package3""', '""net/http""', ')', 'type', 'Broker', 'interface', '{', 'MyHandler', '(', 'http', '.', 'ResponseWriter', ',', '*', 'http', '.', 'Request', ')', '}', '//', 'Factory', 'function', 'to', 'create', 'a', '`Broker`', 'instance', 'func', 'New', '(', 'uri', 'string', ')', 'Broker', '{', 'if', 'uri', '==', '""/api1""', '{', 'return', 'Broker', '(', 'new', '(', 'child_package1', '.', 'Delegate', ')', ')', '}', 'else', 'if', 'uri', '==', '""/api2""', '{', 'return', 'Broker', '(', 'new', '(', 'child_package2', '.', 'Delegate', ')', ')', '}', 'else', 'if', 'uri', '==', '""/api3""', '{', 'return', 'Broker', '(', 'new', '(', 'child_package3', '.', 'Delegate', ')', ')', '}', 'return', 'nil', '}', 'Now', 'child_packageX', 'is', 'no', 'long', 'decoupled', 'to', 'any', 'internal', 'dependency,', 'provided', 'it', 'expose', 'a', '""representative""', 'or', 'Delegate', 'object', 'to', 'talk', 'to', 'the', 'broker.', '//', 'child_package1.go', 'package', 'child_package1', 'import', '""net/http""', 'type', 'Delegate', 'struct', '{', '//', 'Optional', 'parameters', 'can', 'be', 'carried', 'by', 'the', 'Delegate', '//', 'to', 'be', 'used', 'in', 'the', 'created', 'Broker', 'anywhere', '}', 'func', '(', 'd', '*', 'Delegate', ')', 'MyHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', '//', 'Maybe', 'return', 'a', 'JSON', 'here', '}', 'Each', 'child', 'can', 'have', 'its', 'own', 'MyHandler', 'that', 'does', 'different', 'things', 'for', 'different', 'api', 'calls,', 'without', 'having', 'to', 'know', 'what', 'endpoints', 'they', 'are', 'serving.', '//', 'child_package2', 'package', 'child_package2', 'import', '""net/http""', 'type', 'Delegate', 'struct', '{}', 'func', '(', 'd', '*', 'Delegate', ')', 'MyHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', '//', 'Maybe', 'return', 'an', 'XML', 'here', '}', 'The', 'main_package', ""doesn't"", 'import', 'all', 'the', 'child_packageX,', 'but', 'just', 'the', 'broker', 'package.', 'You', 'can', 'write', 'a', 'test', 'that', 'imports', 'the', 'broker', 'package', 'instead', 'of', 'the', 'actual', 'packages,', 'or', 'you', 'can', 'even', 'write', 'another', 'broker', 'for', 'testing.', 'package', 'test', 'import', '(', '""testing""', '""path/to/main_package""', ')', 'func', 'TestMain', '(*', 'testing', '.', 'T', ')', '{', '//', 'test', 'the', 'routing', 'in', '`main_package`', '}', ""You're"", 'no', 'longer', 'testing', 'a', 'functionality', 'of', 'a', 'handler', 'function,', 'but', 'one', 'of', 'an', 'endpoint', 'exposed', 'by', 'a', 'broker.', 'This', 'encourage', 'you', 'to', 'write', 'generic', 'handler', 'functions', 'and', 'focus', 'on', 'the', 'higher', 'level', 'endpoints.', 'package', 'test', 'import', '(', '""testing""', '""path/to/broker""', ')', 'func', 'TestGetJSONAlright', '(*', 'testing', '.', 'T', ')', '{', 'bk1', ':=', 'brokers.New(""/api1"")', '//', 'test', 'if', 'I', 'get', 'JSON', 'here', '}', 'func', 'TestGetXMLAlright', '(*', 'testing', '.', 'T', ')', '{', 'bk1', ':=', 'brokers.New(""/api2"")', '//', 'test', 'if', 'I', 'get', 'XML', 'here', '}', 'This,', 'in', 'my', 'opinion,', 'is', 'a', 'powerful', 'pattern', 'since', 'you', 'can', 'write', 'more', '""generic""', 'handlers', 'and', 'just', 'plug', 'them', 'in', 'to', 'the', 'routes', 'you', 'want.']"
618,34232264,"Order 'not specified' means that it's up to compiler to decide, and it is not guaranteed to be the same over different versions of a compiler/other compilers etc/other machine/other time of day etc.

It does not mean that it has to be different each time or crash (as you may be accustomed to from C, where 'undefined behaviour' usually meant something bad, for example like using a pointer after freeing memory)
","['Order', ""'not"", ""specified'"", 'means', 'that', ""it's"", 'up', 'to', 'compiler', 'to', 'decide,', 'and', 'it', 'is', 'not', 'guaranteed', 'to', 'be', 'the', 'same', 'over', 'different', 'versions', 'of', 'a', 'compiler/other', 'compilers', 'etc/other', 'machine/other', 'time', 'of', 'day', 'etc.', 'It', 'does', 'not', 'mean', 'that', 'it', 'has', 'to', 'be', 'different', 'each', 'time', 'or', 'crash', '(as', 'you', 'may', 'be', 'accustomed', 'to', 'from', 'C,', 'where', ""'undefined"", ""behaviour'"", 'usually', 'meant', 'something', 'bad,', 'for', 'example', 'like', 'using', 'a', 'pointer', 'after', 'freeing', 'memory)']"
619,34259703,"
","['If', 'you', 'for', 'example', 'just', 'do', 'a', 'http.Get', 'then', 'just', 'User', '-', 'Agent', ':', 'Go', '-', 'http', '-', 'client/1.1', 'Accept', '-', 'Encoding', ':', 'gzip']"
620,34295295,"I just had this exact issue, and the accepted solution did NOT solve it for me. That's because my $HTTP_PROXY environment variable was not set!

I was able to solve it by setting up my environment variables as per indicated here: http://www.bonusbits.com/wiki/HowTo:Setup_Charles_Proxy_on_Mac Then once the variable was set correctly, I didn't even need to apply a custom Transport to my client. It worked with the default transport.

Perhaps because I'm using a custom shell (zsh) this didn't happen automatically. However what's interesting is that python would correct appear in Charles Proxy in the same shell while Go would not. Updating my .zshrc (or whatever shell or profile you are using's config) to export the appropriate variables worked.
",[]
621,34376163,"
","['you', 'can', 'just', 'cast', 'your', 'integer', 'literal', 'to', 'uint64.', 'for', 'i', ':=', 'uint64', '(', '1', ');', 'i', '<=', 'k', ';', 'i', '++', '{', '//', 'do', 'something', '}', 'Alternatively', 'you', 'could', 'initialize', 'i', 'outside', 'of', 'the', 'for', 'loop,', 'but', 'then', ""it's"", 'scoped', 'larger', 'than', 'the', 'loop', 'itself.', 'var', 'i', 'uint64', 'for', 'i', '=', '1', ';', 'i', '<=', 'k', ';', 'i', '++', '{', '//', 'note', 'the', '`=`', 'instead', 'of', 'the', '`:=`', '}', '//', 'i', 'still', 'exists', 'and', 'is', 'now', 'k+1']"
622,34376170,"
","['You', 'have', 'to', 'explicitly', 'declare', 'your', 'variables', 'as', 'that', 'type.', 'The', 'int', 'literal', 'will', 'be', 'of', 'type', 'int', 'https://play.golang.org/p/OgaZzmpLfB', 'something', 'like', 'var', 'i', 'uint64', 'is', 'required.', 'In', 'your', 'example', ""you'd"", 'have', 'to', 'change', 'your', 'assignment', 'as', 'well', 'so', 'something', 'like', 'this;', 'var', 'i', 'uint64', 'for', 'i', '=', '2', ';', 'i', '<=', 'k', ';', 'i', '+=', '1', '{', '// I want i to be a uint64', '...', '}']"
623,34406759,"Function overloading is not supported in the language. From the official Golang site it says,

Method dispatch is simplified if it doesn't need to do type matching as well. Experience with other languages told us that having a variety of methods with the same name but different signatures was occasionally useful but that it could also be confusing and fragile in practice. Matching only by name and requiring consistency in the types was a major simplifying decision in Go's type system.

Regarding operator overloading, it seems more a convenience than an absolute requirement. Again, things are simpler without it.

https://golang.org/doc/faq#overloading

One potential solution would be to define a high level function that type checks and handles different types similarly to how you would overload multiple functions. See @evanmcdonnal's solution for a great example. 
","['Function', 'overloading', 'is', 'not', 'supported', 'in', 'the', 'language.', 'From', 'the', 'official', 'Golang', 'site', 'it', 'says,', 'Method', 'dispatch', 'is', 'simplified', 'if', 'it', ""doesn't"", 'need', 'to', 'do', 'type', 'matching', 'as', 'well.', 'Experience', 'with', 'other', 'languages', 'told', 'us', 'that', 'having', 'a', 'variety', 'of', 'methods', 'with', 'the', 'same', 'name', 'but', 'different', 'signatures', 'was', 'occasionally', 'useful', 'but', 'that', 'it', 'could', 'also', 'be', 'confusing', 'and', 'fragile', 'in', 'practice.', 'Matching', 'only', 'by', 'name', 'and', 'requiring', 'consistency', 'in', 'the', 'types', 'was', 'a', 'major', 'simplifying', 'decision', 'in', ""Go's"", 'type', 'system.', 'Regarding', 'operator', 'overloading,', 'it', 'seems', 'more', 'a', 'convenience', 'than', 'an', 'absolute', 'requirement.', 'Again,', 'things', 'are', 'simpler', 'without', 'it.', 'https://golang.org/doc/faq#overloading', 'One', 'potential', 'solution', 'would', 'be', 'to', 'define', 'a', 'high', 'level', 'function', 'that', 'type', 'checks', 'and', 'handles', 'different', 'types', 'similarly', 'to', 'how', 'you', 'would', 'overload', 'multiple', 'functions.', 'See', ""@evanmcdonnal's"", 'solution', 'for', 'a', 'great', 'example.']"
624,34406772,"

Also; here's a quick read about type switches and assertions that may be helpful; http://blog.denevell.org/golang-interface-type-assertions-switch.html
You can also check out effective-go as it has sections on both features.
","['The', 'most', 'common', 'way', 'to', 'do', 'this', 'would', 'be', 'to', 'define', 'the', 'method', 'as', 'func', 'fatal', '(', 'err', 'interface', '{})', 'then', 'do', 'type', 'assertions', 'or', 'use', 'a', 'type', 'switch', 'within', ""it's"", 'body', 'to', 'handle', 'each', 'of', 'the', 'different', 'types.', 'If', 'I', 'were', 'coding', 'for', 'your', 'example', 'it', 'would', 'look', 'like', 'this;', 'func', 'fatal', '(', 'err', 'interface', '{})', '{', 'if', 'v', ',', 'ok', ':=', 'err', '.(', 'string', ');', 'ok', '{', 'fmt.Println(v)', '}', 'if', 'v', ',', 'ok', ':=', 'err', '.(', 'error', ');', 'ok', '{', 'fmt.Println(v.Error())', '}', 'else', '{', '//', 'panic', '?', '}', '}', 'Also;', ""here's"", 'a', 'quick', 'read', 'about', 'type', 'switches', 'and', 'assertions', 'that', 'may', 'be', 'helpful;', 'http://blog.denevell.org/golang-interface-type-assertions-switch.html', 'You', 'can', 'also', 'check', 'out', 'effective-go', 'as', 'it', 'has', 'sections', 'on', 'both', 'features.']"
625,34406811,"Use log.Fatal() instead. https://golang.org/pkg/log/#Fatal

You can use interface{} but it is not recommended because you lose all the benefits of type checking when you do that. The Go authors get to use interface{} because they understand the appropriate level of additional testing and checks to do when using interface{}. It's much easier (even for intermediate and advanced gophers) to use builtin and standard library functions when something like this is required.

Go does not have algebraic or/sum types either. The standard workaround is to define an and/product type with pointers (e.g. struct{*string, *error}) and go to the effort of making sure you only ever make one of the fields non nil at any point in time.
","['Use', 'log.Fatal()', 'instead.', 'https://golang.org/pkg/log/#Fatal', 'You', 'can', 'use', 'interface{}', 'but', 'it', 'is', 'not', 'recommended', 'because', 'you', 'lose', 'all', 'the', 'benefits', 'of', 'type', 'checking', 'when', 'you', 'do', 'that.', 'The', 'Go', 'authors', 'get', 'to', 'use', 'interface{}', 'because', 'they', 'understand', 'the', 'appropriate', 'level', 'of', 'additional', 'testing', 'and', 'checks', 'to', 'do', 'when', 'using', 'interface{}.', ""It's"", 'much', 'easier', '(even', 'for', 'intermediate', 'and', 'advanced', 'gophers)', 'to', 'use', 'builtin', 'and', 'standard', 'library', 'functions', 'when', 'something', 'like', 'this', 'is', 'required.', 'Go', 'does', 'not', 'have', 'algebraic', 'or/sum', 'types', 'either.', 'The', 'standard', 'workaround', 'is', 'to', 'define', 'an', 'and/product', 'type', 'with', 'pointers', '(e.g.', 'struct{*string,', '*error})', 'and', 'go', 'to', 'the', 'effort', 'of', 'making', 'sure', 'you', 'only', 'ever', 'make', 'one', 'of', 'the', 'fields', 'non', 'nil', 'at', 'any', 'point', 'in', 'time.']"
626,34464139,"No, they can't be lost.

While the language spec does not in any way impose any particular implementation on channels, you can think of them as critical sections or mutexes protecting either a single value (for the single message) or an array/list of them (for buffered channels).

The semantics are then enforced in such a way that as soon as a goroutine wants to send a message to a channel, it enters that critical section / locks the mutex, and then either succeds at sending—there's a free slot for its message—or blocks—when there isn't.  As soon as such a slot appears—someone has received an existing message—the sending succeeds and the sending goroutine gets unblocked.

This is a simplified explanation but I hope it gets you the correct idea. In other words, channels in Go is not like message queues which usually are happy with losing messages.

On a side note, I'm not really sure what happens if the receiver panics in some specific state when it's about to receive your message. IOW I'm not sure whether Go guarantees that the message is either sent or not in the presence of a receiver panicking in an unfortunate moment.

Oh, and there's that grey area of the main goroutine exiting (that one running the main.main() function): the spec states clear than the main goroutine does not wait for any other goroutines to complete when it exits. So unless you somehow arrange for the synchronized controlled shutdown of all your spawned goroutines, I beleive they may lose messages.  On the other hand, in this case the world is collapsing anyway…
","['Also;', ""here's"", 'a', 'quick', 'read', 'about', 'type', 'switches', 'and', 'assertions', 'that', 'may', 'be', 'helpful;', 'http://blog.denevell.org/golang-interface-type-assertions-switch.html', 'You', 'can', 'also', 'check', 'out', 'effective-go', 'as', 'it', 'has', 'sections', 'on', 'both', 'features.']"
627,34480141,"Message can not be lost. It can be not sent.Order of goroutines execution not defined. So your endless for loop can receive from only one worker all time, and even can sleep if it isn't in main thread. To be sure your queue works in regular fashion you better explicitly in 'main' receive messages for each worker.
","['Message', 'can', 'not', 'be', 'lost.', 'It', 'can', 'be', 'not', 'sent.Order', 'of', 'goroutines', 'execution', 'not', 'defined.', 'So', 'your', 'endless', 'for', 'loop', 'can', 'receive', 'from', 'only', 'one', 'worker', 'all', 'time,', 'and', 'even', 'can', 'sleep', 'if', 'it', ""isn't"", 'in', 'main', 'thread.', 'To', 'be', 'sure', 'your', 'queue', 'works', 'in', 'regular', 'fashion', 'you', 'better', 'explicitly', 'in', ""'main'"", 'receive', 'messages', 'for', 'each', 'worker.']"
628,34494494,"

It will automatically return value in your Go variable (I guess )
please try this 
","['Hi', 'I', ""Don't"", 'know', 'about', 'go', 'but', 'I', 'know', 'about', 'oracle', 'return', 'query', 'Same', 'problem', 'I', 'had', 'with', 'PHP', 'and', 'I', 'solve', 'it', 'using', 'this', 'query', 'insert', 'into', 'table', '(', 'field1', ',', 'field2', ',', 'field3', ')', 'values', '(', 'val1', ',', 'val2', ',', 'val3', ')', 'return', 'primaryfield_id', 'into', ':', 'xx', 'It', 'will', 'automatically', 'return', 'value', 'in', 'your', 'Go', 'variable', '(I', 'guess', ')', 'please', 'try', 'this']"
629,34584151,"The program sends two values to the channel out and reads one value from the channel out.  One of the values is not received.

If the channel is unbuffered (capacity 0), then one of the sending goroutines will block until the program exits.  This is a leak.

If the channel is created with a capacity of 1, then both goroutines can send to the channel and exit. The first value sent to the channel is received by main. The second value remains in the channel.

If the main function does not receive a value from the channel out, then a channel of capacity 2 is required to prevent the goroutines from blocking indefinitely.
","['It', 'will', 'automatically', 'return', 'value', 'in', 'your', 'Go', 'variable', '(I', 'guess', ')', 'please', 'try', 'this']"
630,34645031,"I think you are assuming mgo is an ""ORM"". But it's just a simple way to store data in Mongo. There are 3 different ways to fix your problem:


Put different types into different collections. That way, every document is the same type.  (Collections are like ""tables"" in a relational database).
Tag each thing with it's type (i.e. store the object type in a field), then you can query on it.
If you are feeling dangerous, you can assume all Artists have Genres, and all Users have a Profile. Then use $exists to select only that type.


The first option is the usual way to do it. You should have specific reasons for doing #2 or #3, as they could be slower.
","['It', 'will', 'automatically', 'return', 'value', 'in', 'your', 'Go', 'variable', '(I', 'guess', ')', 'please', 'try', 'this']"
631,34696916,"
","['In', 'order', 'for', 'your', 'JSON', 'to', 'be', 'picked', 'up', 'by', 'the', 'decoder,', 'the', 'fields', 'in', 'your', 'struct', 'must', 'be', 'exported.', 'This', 'means', 'you', 'need', 'you', 'capitalize', 'the', 'field', 'names.', 'If', 'you', 'have', 'custom', 'naming', 'on', 'your', 'fields', '->', 'json', 'conversion,', 'you', 'can', 'add', 'json', 'tags', 'to', 'your', 'structs.', 'This', 'will', 'fix', 'your', 'issue:', 'type', 'SynonymResponse', 'struct', '{', 'Lists', '[]', 'SynonymList', 'json', ':', '""response""', '}', 'type', 'SynonymList', 'struct', '{', 'Category', 'string', 'json', ':', '""category""', 'Synonyms', 'string', 'json', ':', '""synonyms""', '}']"
632,34717018,"

Join returns a string with "", "" inserted between each argument.
","['You', 'should', 'use', 'strings.Join', 'for', 'this.', 'Try,', 'fmt.Printf(""%s, Author of The Art of Computer Programming"", strings.Join(os.Args[1:], "", ""))', 'Join', 'returns', 'a', 'string', 'with', '"",', '""', 'inserted', 'between', 'each', 'argument.']"
633,34721983,"

You should also take a look at the strings package as was pointed out by Chandru. There's a bunch of goodies in there to help with dealing with strings.

See: https://golang.org/pkg/strings/
","['The', 'reason', ""it's"", 'outputting', 'the', 'brackets', 'is', 'because', ""you're"", 'passing', 'a', 'slice', 'into', 'the', 'print', 'command.', 'What', 'you', 'want', 'to', 'do', 'is', 'take', 'each', 'command', 'and', 'put', 'them', 'into', 'a', 'string', 'to', 'be', 'printed', 'as', 'needed.', 'firstname', ':=', 'os', '.', 'Args', '[', '1', ']', 'lastname', ':=', 'os', '.', 'Args', '[', '2', ']', 'fmt.Println(lastname + "", "" + firstname)', 'You', 'should', 'also', 'take', 'a', 'look', 'at', 'the', 'strings', 'package', 'as', 'was', 'pointed', 'out', 'by', 'Chandru.', ""There's"", 'a', 'bunch', 'of', 'goodies', 'in', 'there', 'to', 'help', 'with', 'dealing', 'with', 'strings.', 'See:', 'https://golang.org/pkg/strings/']"
634,34726387,"It looks like the two libraries that you are using both correctly use runtime.LockOSThread to make main-thread-only API calls; unfortunately, to use more than one such library, you'll have to do something fancier than the example code that either provides.  You'll need to write your own main thread / main.Main-invoked message loop that handles calls to multiple MTO APIs.

runtime.LockOSThread is part of the solution to operating with APIs such as this; the golang wiki has a page about how to use it to interact with ""call from main thread only"" APIs.

An extremely short description of how your program should change:

You'll want to use runtime.LockOSThread in main.init to make sure that the main thread is running main.Main; main.Main should be refactored into two parts:


starts a goroutine or goroutines that run what previously was in main.Main;
enters a message loop receiving messages to take certain main-thread actions on one or more channels

","['You', 'should', 'also', 'take', 'a', 'look', 'at', 'the', 'strings', 'package', 'as', 'was', 'pointed', 'out', 'by', 'Chandru.', ""There's"", 'a', 'bunch', 'of', 'goodies', 'in', 'there', 'to', 'help', 'with', 'dealing', 'with', 'strings.', 'See:', 'https://golang.org/pkg/strings/']"
635,34826423," and cmd.Start() then I pipe stdin and stdout and communicate with this child process through those.

The example code can be found on Github. Warning there is an error in this gist where after child exits main process will start burning through CPU cycles. Feel free to fix it yourself.

The reason why I did not want to go through with RPC is because this will become slightly too complex to what I want to achieve and does not provide easy way to do two way communication.
","['Since', 'there', 'is', 'not', 'enough', 'traction', 'on', 'this', 'question', ""I've"", 'decided', 'to', 'post', 'my', 'own', 'solution', 'I', 'found', 'while', 'trying', 'to', 'workaround', 'this', 'issue.', 'This', ""won't"", 'be', 'marked', 'as', 'answer', 'yet', 'since', 'someone', 'else', 'may', 'provide', 'better', 'solution.', 'I', 'have', 'moved', 'one', 'of', 'the', 'UI', 'processes', '(namely', 'part', 'that', 'uses', 'systray)', 'into', 'another', 'binary', 'and', 'call', 'it', 'using', 'cmd', ':=', 'exec.Command(...)', 'and', 'cmd.Start()', 'then', 'I', 'pipe', 'stdin', 'and', 'stdout', 'and', 'communicate', 'with', 'this', 'child', 'process', 'through', 'those.', 'The', 'example', 'code', 'can', 'be', 'found', 'on', 'Github.', 'Warning', 'there', 'is', 'an', 'error', 'in', 'this', 'gist', 'where', 'after', 'child', 'exits', 'main', 'process', 'will', 'start', 'burning', 'through', 'CPU', 'cycles.', 'Feel', 'free', 'to', 'fix', 'it', 'yourself.', 'The', 'reason', 'why', 'I', 'did', 'not', 'want', 'to', 'go', 'through', 'with', 'RPC', 'is', 'because', 'this', 'will', 'become', 'slightly', 'too', 'complex', 'to', 'what', 'I', 'want', 'to', 'achieve', 'and', 'does', 'not', 'provide', 'easy', 'way', 'to', 'do', 'two', 'way', 'communication.']"
636,34829722,"One way could be to have an if statement controlling the print output, i.e. if the result is cleanly divisible by 1 (result%1 == 0) then print the result to no decimal places. Otherwise print to .2f as you've done above. Not sure if there is a shorter way of doing this, but I think this should work.
","['One', 'way', 'could', 'be', 'to', 'have', 'an', 'if', 'statement', 'controlling', 'the', 'print', 'output,', 'i.e.', 'if', 'the', 'result', 'is', 'cleanly', 'divisible', 'by', '1', '(result%1', '==', '0)', 'then', 'print', 'the', 'result', 'to', 'no', 'decimal', 'places.', 'Otherwise', 'print', 'to', '.2f', 'as', ""you've"", 'done', 'above.', 'Not', 'sure', 'if', 'there', 'is', 'a', 'shorter', 'way', 'of', 'doing', 'this,', 'but', 'I', 'think', 'this', 'should', 'work.']"
637,34829815,"

Bonus: the same regex works for any number of trailing zeros.

Side note: You'll display 50.0041 the same way than 50, which might be a little misleading.
","[""There's"", 'no', 'direct', 'solution', 'with', 'the', 'fmt', 'package.', 'But', 'you', 'can', 'remove', 'the', 'dot', 'and', 'zeros', 'at', 'end', 'with', 'a', 'regular', 'expression:', 'r', ',', '_', ':=', 'regexp.Compile(`\\.?0*$`)', 'fmt.Printf(""%s%%\\n"", r.ReplaceAllString(fmt.Sprintf(""%.2f"", 100*(value/total)),""""))', 'Bonus:', 'the', 'same', 'regex', 'works', 'for', 'any', 'number', 'of', 'trailing', 'zeros.', 'Side', 'note:', ""You'll"", 'display', '50.0041', 'the', 'same', 'way', 'than', '50,', 'which', 'might', 'be', 'a', 'little', 'misleading.']"
638,34830031,"
","[""There's"", 'no', 'way', 'to', 'do', 'that', 'inside', 'fmt', 'with', 'e.g.', 'another', 'flag', 'or', 'what', 'have', 'you.', ""You'll"", 'have', 'to', 'write', 'out', 'the', 'logic', 'yourself.', 'You', 'could', 'do', 'something', 'like:', 'var', 'final', 'string', 'doubledecimal', ':=', 'fmt.Sprintf(""%.2f"", 100*value/total)', 'if', 'doubledecimal', '[', 'len', '(', 'doubledecimal', ')-', '2', ':]', '==', '""00""', '{', 'final', '=', 'doubledecimal', '[:', 'len', '(', 'doubledecimal', ')-', '3', ']', '}', 'else', '{', 'final', '=', 'doubledecimal', '}', 'fmt.Printf(""%s%%\\n, final)', 'You', 'could', 'similarly', 'use', 'strings.Split', 'to', 'split', 'on', 'the', 'decimal', 'point', 'and', 'work', 'from', 'there.', 'You', 'could', 'even', 'adjust', 'this', 'to', 'turn', '50.10%', 'into', '50.1%.', 'doubledecimal', ':=', 'fmt.Sprintf(""%.2f"", 100*value/total)', '//', 'Strip', 'trailing', 'zeroes', 'for', 'doubledecimal', '[', 'len', '(', 'doubledecimal', ')-', '1', ']', '==', '0', '{', 'doubledecimal', '=', 'doubledecimal', '[:', 'len', '(', 'doubledecimal', ')-', '1', ']', '}', '//', 'Strip', 'the', 'decimal', 'point', 'if', ""it's"", 'trailing.', 'if', 'doubledecimal', '[', 'len', '(', 'doubledecimal', ')-', '1', ']', '==', '"".""', '{', 'doubledecimal', '=', 'doubledecimal', '[:', 'len', '(', 'doubledecimal', ')-', '1', ']', '}', 'fmt.Printf(""%s%%\\n"", doubledecimal)']"
639,34879997,"
","['You', 'could', 'dial', 'to', 'the', 'socket', 'before', 'using', 'it:', '_', ',', 'err', '=', 'net.Dial(""tcp"", ""127.0.0.1:8021"")', '//8021 is a closed socket', 'if', 'err', '!=', 'nil', '{', 'panic', '(', '""Error, socket not opened""', ')', '}', 'EDIT:', 'Maybe', 'this', 'way', 'is', 'more', 'clear:', 'isOpen', ':=', 'true', '_', ',', 'err', '=', 'net.Dial(""tcp"", ""127.0.0.1:8021"")', '//8021 is a closed socket', 'if', 'err', '!=', 'nil', '{', 'isOpen', '=', 'false', '}', 'if', 'isOpen', '{', '//', 'Your', 'logic', 'here', '}']"
640,34889113,"I enabled tcp keepalive and this problem got solved. I was running my VM in google compute engine and probably the firewall terminated idle connections.

TCP Keep alive

Configuring tcp keep alive in linux

Golang http server automatically picked this up, so no change was required in my golang code.

Regards,

Sathya
","['I', 'enabled', 'tcp', 'keepalive', 'and', 'this', 'problem', 'got', 'solved.', 'I', 'was', 'running', 'my', 'VM', 'in', 'google', 'compute', 'engine', 'and', 'probably', 'the', 'firewall', 'terminated', 'idle', 'connections.', 'TCP', 'Keep', 'alive', 'Configuring', 'tcp', 'keep', 'alive', 'in', 'linux', 'Golang', 'http', 'server', 'automatically', 'picked', 'this', 'up,', 'so', 'no', 'change', 'was', 'required', 'in', 'my', 'golang', 'code.', 'Regards,', 'Sathya']"
641,34927433,"

playground
","['Something', 'like', 'this', 'should', 'work,', 'however', ""I'm"", 'not', 'familiar', 'with', 'how', 'GCD', 'works', 'so', 'I', 'could', 'be', 'way', 'off.', 'func', 'main', '()', '{', 'q', ':=', 'NewQueue', '(', '10', ')', ""// the size is mainly so it wouldn't block, you can play with that to your liking."", 'var', 'wg', 'sync', '.', 'WaitGroup', 'for', 'i', ':=', '0', ';', 'i', '<', '10', ';', 'i', '++', '{', 'wg.Add(1)', 'i', ':=', 'i', 'q', '<-', 'func', '()', '{', 'log.Println(""i ="", i); wg.Done()', '}', '}', 'wg.Wait()', 'close', '(', 'q', ')', '}', 'func', 'NewQueue', '(', 'size', 'int', ')', '(', 'q', 'chan', 'func', '())', '{', 'q', '=', 'make', '(', 'chan', 'func', '(),', 'size', ')', 'go', 'func', '()', '{', 'for', 'fn', ':=', 'range', 'q', '{', 'fn', '()', '}', '}()', 'return', '}', 'playground']"
642,34947853,"Check out https://godoc.org/code.google.com/p/go-uuid/uuid#NewRandom.

And you may want to consider storing this in a database with the email address and perhaps an expiry date / time so that the verification doesn't stay there forever. You may only want to allow people to verify within 24 hours, or 7 days and so on. Have another job that periodically cleans expired and non-verified emails.
","['Check', 'out', 'https://godoc.org/code.google.com/p/go-uuid/uuid#NewRandom.', 'And', 'you', 'may', 'want', 'to', 'consider', 'storing', 'this', 'in', 'a', 'database', 'with', 'the', 'email', 'address', 'and', 'perhaps', 'an', 'expiry', 'date', '/', 'time', 'so', 'that', 'the', 'verification', ""doesn't"", 'stay', 'there', 'forever.', 'You', 'may', 'only', 'want', 'to', 'allow', 'people', 'to', 'verify', 'within', '24', 'hours,', 'or', '7', 'days', 'and', 'so', 'on.', 'Have', 'another', 'job', 'that', 'periodically', 'cleans', 'expired', 'and', 'non-verified', 'emails.']"
643,34947943,"Two points:


No, the method as presented won't guarantee them to be unique.
You don't need to have all your tokens to be unique.


To expand on these points…

You're dealing with a set of outstanding verification requests.
That is:


A request is made by the user;
You generate a unique verification token and store it into some presistent database.  This is needed in order for verification to work anyway.
The user receives your e-mail and clicks that link from it which contain your token.  At this point you remove the information about this pending verificaton request from your persistent storage.


As you can see, at any given time you only have several outstanding verification requests.  Hence this situation has two important properties:


You only need the tokens of these outstanding requests be different from one another.  It's OK to have a verification token to be the same as that of some past (or future) request.
Your tokens have to be hard-to-guess (obviously).  I'm sure you already understand that.


So, the approach to generating a new token is as follows:


Generate something hard-to-guess.
Compare it with the tokens bound to the outstanding/pending verification requests persisted in your storage.

If you find an outstanding request with the same token, you have a collision so go to step (1) and repeat.

Otherwise the token is OK so proceed with it and persist the data about this request.
Once the request passed verification, remove it from your storage.


Exact algorythm for generating tokens does not matter much.  I'd say an UUID or something looking like SHA-256/512 calculated over some random data is OK.
","['Two', 'points:', 'No,', 'the', 'method', 'as', 'presented', ""won't"", 'guarantee', 'them', 'to', 'be', 'unique.', 'You', ""don't"", 'need', 'to', 'have', 'all', 'your', 'tokens', 'to', 'be', 'unique.', 'To', 'expand', 'on', 'these', 'points…', ""You're"", 'dealing', 'with', 'a', 'set', 'of', 'outstanding', 'verification', 'requests.', 'That', 'is:', 'A', 'request', 'is', 'made', 'by', 'the', 'user;', 'You', 'generate', 'a', 'unique', 'verification', 'token', 'and', 'store', 'it', 'into', 'some', 'presistent', 'database.', 'This', 'is', 'needed', 'in', 'order', 'for', 'verification', 'to', 'work', 'anyway.', 'The', 'user', 'receives', 'your', 'e-mail', 'and', 'clicks', 'that', 'link', 'from', 'it', 'which', 'contain', 'your', 'token.', 'At', 'this', 'point', 'you', 'remove', 'the', 'information', 'about', 'this', 'pending', 'verificaton', 'request', 'from', 'your', 'persistent', 'storage.', 'As', 'you', 'can', 'see,', 'at', 'any', 'given', 'time', 'you', 'only', 'have', 'several', 'outstanding', 'verification', 'requests.', 'Hence', 'this', 'situation', 'has', 'two', 'important', 'properties:', 'You', 'only', 'need', 'the', 'tokens', 'of', 'these', 'outstanding', 'requests', 'be', 'different', 'from', 'one', 'another.', ""It's"", 'OK', 'to', 'have', 'a', 'verification', 'token', 'to', 'be', 'the', 'same', 'as', 'that', 'of', 'some', 'past', '(or', 'future)', 'request.', 'Your', 'tokens', 'have', 'to', 'be', 'hard-to-guess', '(obviously).', ""I'm"", 'sure', 'you', 'already', 'understand', 'that.', 'So,', 'the', 'approach', 'to', 'generating', 'a', 'new', 'token', 'is', 'as', 'follows:', 'Generate', 'something', 'hard-to-guess.', 'Compare', 'it', 'with', 'the', 'tokens', 'bound', 'to', 'the', 'outstanding/pending', 'verification', 'requests', 'persisted', 'in', 'your', 'storage.', 'If', 'you', 'find', 'an', 'outstanding', 'request', 'with', 'the', 'same', 'token,', 'you', 'have', 'a', 'collision', 'so', 'go', 'to', 'step', '(1)', 'and', 'repeat.', 'Otherwise', 'the', 'token', 'is', 'OK', 'so', 'proceed', 'with', 'it', 'and', 'persist', 'the', 'data', 'about', 'this', 'request.', 'Once', 'the', 'request', 'passed', 'verification,', 'remove', 'it', 'from', 'your', 'storage.', 'Exact', 'algorythm', 'for', 'generating', 'tokens', 'does', 'not', 'matter', 'much.', ""I'd"", 'say', 'an', 'UUID', 'or', 'something', 'looking', 'like', 'SHA-256/512', 'calculated', 'over', 'some', 'random', 'data', 'is', 'OK.']"
644,34949307,"

https://play.golang.org/p/l9U2uUZNAV
","['No', 'need', 'to', 'be', 'unique.', 'You', 'could', 'look', 'for', 'more', 'secure/complex', 'solutions', 'but', 'what', 'about', 'simply', 'putting', 'a', 'random', 'number', 'in', 'hex', 'such', 'that', 'strconv.FormatInt(rand.Int63(), 16)', 'https://play.golang.org/p/l9U2uUZNAV']"
645,34995923,"
","['The', 'second', 'current', 'is', 'in', 'the', 'if', 'scope.', 'Replace', 'current', ':=', 'with', 'current', '=', '(no', 'colon).', 'When', 'using', ':=', 'you', 'define', 'a', 'new', 'current', 'variable', 'in', 'the', 'nested', 'scope.', 'if', 'winning', '==', 'current', '{', 'fmt.Println(games_played)', 'break', '}', 'else', '{', 'current', ':=', '<-', 'ch', 'games_played', '+=', '1', '}', 'is', 'equivalent', 'of:', 'if', 'winning', '==', 'current', '{', 'fmt.Println(games_played)', 'break', '}', 'else', '{', 'var', 'current', 'int', '[', '6', ']', ""// you don't want this, as it shadows your"", '//', 'current', 'form', 'the', 'outher', 'scope', 'current', '=', '<-', 'ch', '// you want only this guy', 'games_played', '+=', '1', '}']"
646,35030421,"
","['Your', 'server', 'receives', 'a', 'file', '(e.g.', 'via', 'a', 'form', 'post),', 'and', 'your', 'server', 'code', 'is', 'responsible', 'to', 'save', 'it', 'to', 'a', 'folder', 'of', 'the', ""server's"", 'choice.', 'The', 'client', 'has', 'no', 'control', 'over', 'where', 'the', 'server', 'will', 'save', 'it.', 'The', 'client', 'may', 'arbitrarily', 'recommend', 'a', 'folder', 'e.g.', 'with', 'another', 'form', 'field', '(or', 'a', 'subfolder', 'relative', 'to', 'some', 'agreed', 'or', 'arbitrary', 'root),', 'but', 'the', 'client', 'is', 'not', 'in', 'a', 'position', 'to', 'enforce', 'anything.', 'One', 'thing', 'you', 'should', 'be', 'aware', 'of', 'that', 'if', 'you', 'acquire', 'the', 'posted', 'file', 'name', 'at', 'server', 'side,', 'you', 'should', 'not', 'use', 'it', 'as', 'is,', 'because', 'the', 'client', 'may', 'send', 'a', 'file', 'name', 'which', 'contains', 'folder', 'separators', '(e.g.', ""'/'"", 'and', 'it', 'may', 'contain', 'sequences', 'to', 'denote', 'parent', 'folders', '(e.g.', '""../.."").', 'What', 'you', 'should', 'do', '(most', 'secure)', 'is', 'to', 'generate', 'a', 'name', 'at', 'the', 'server', 'side.', 'Or', 'if', 'you', 'want', 'to', 'use', 'the', 'name', 'recommended', 'by', 'the', 'client,', 'only', 'use', 'the', 'last', 'part', 'of', 'the', 'sent', 'file', 'name', '(in', 'case', 'it', 'contains', 'folder', 'names', 'too).', 'Also', 'if', 'you', 'use', 'the', 'name', 'sent', 'by', 'the', 'client,', 'you', 'should', 'check', 'if', 'file', 'already', 'exists', 'to', 'prevent', 'independent', 'clients', 'to', 'overwrite', 'each', ""other's"", 'files.', 'Or', 'best', 'would', 'be', 'to', 'use', 'a', 'folder', 'name', 'unique', 'to', 'the', 'client,', 'that', 'way', 'there', 'is', 'no', 'chance', 'to', 'overwrite', 'each', ""other's"", 'files.', 'You', 'may', 'use', 'the', 'path', 'package', 'to', 'check/manipulate', 'file', 'names', 'and', 'paths.', 'For', 'example', 'path.Base()', 'returns', 'only', 'the', 'last', 'part', '(the', 'file', 'name)', 'of', 'a', 'path.', 'And', 'you', 'may', 'use', 'path.Join()', 'to', 'concatenate', 'folders', 'and', 'file', 'name.', 'For', 'example', 'if', 'a', 'client', 'uploads', 'a', 'file', 'via', 'a', 'form', 'post,', 'you', 'may', 'handle', 'it', 'at', 'server', 'side', 'like', 'this:', 'func', 'fileHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'f', ',', 'fh', ',', 'err', ':=', 'r.FormFile(""file"")', 'if', 'err', '!=', 'nil', '{', '//', 'File', 'not', 'submitted?', 'Handle', 'error', 'http.Error(w, ""You must upload a file"", http.StatusBadRequest)', 'return', '}', '//', 'Save', 'it:', '//', 'Here', 'I', 'use', 'username', 'as', 'a', 'unique', 'client', 'identifier', 'saveName', ':=', 'path.Join(""path/to/uploaded/files/"", username, path.Base(fh.Filename))', 'savef', ',', 'err', ':=', 'os.Create(saveName)', 'if', 'err', '!=', 'nil', '{', '//', 'Failed', 'to', 'create', 'file', 'on', 'server,', 'handle', 'err', 'http.Error(w, ""Failed to save file"", http.StatusInternalServerError)', 'return', '}', 'defer', 'savef.Close()', 'io.Copy(savef, f)', 'fmt.Fprintln(w, ""File saved successfully."")', '}']"
647,35042360,"
","['Here', 'is', 'the', 'code,', 'that', 'calculates', 'current', 'offset', 'between', 'local', 'and', 'specified', 'timezones.', 'I', 'agree', 'with', ""Ainar-G's"", 'comment', 'that', 'offset', 'makes', 'sense', 'only', 'with', 'relation', 'to', 'specified', 'moment', 'in', 'time:', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 'loc', ',', 'err', ':=', 'time.LoadLocation(""MST"")', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'now', ':=', 'time.Now()', '_', ',', 'destOffset', ':=', 'now.In(loc).Zone()', '_', ',', 'localOffset', ':=', 'now.Zone()', 'fmt.Println(""Offset:"", destOffset-localOffset)', '}']"
648,35085405,"If only a single goroutine accesses the struct member, you don't need to have a mutex to control access. I would, probably, use one anyway (either re-use the existing mutex in the struct, or another one), on the basis that while there may only be one goroutine accessing that struct member today, there's nothing enforce that.
","['If', 'only', 'a', 'single', 'goroutine', 'accesses', 'the', 'struct', 'member,', 'you', ""don't"", 'need', 'to', 'have', 'a', 'mutex', 'to', 'control', 'access.', 'I', 'would,', 'probably,', 'use', 'one', 'anyway', '(either', 're-use', 'the', 'existing', 'mutex', 'in', 'the', 'struct,', 'or', 'another', 'one),', 'on', 'the', 'basis', 'that', 'while', 'there', 'may', 'only', 'be', 'one', 'goroutine', 'accessing', 'that', 'struct', 'member', 'today,', ""there's"", 'nothing', 'enforce', 'that.']"
649,35094402,"

playground
","['You', 'do', 'not', 'need', 'another', 'mutex', 'for', 'it,', 'also', 'if', ""you're"", 'just', 'operating', 'on', 'int*', 'types,', 'you', 'can', 'ditch', 'the', 'mutex', 'all', 'together', 'and', 'use', 'atomic.*', 'type', 'shared', 'struct', '{', 'sharedCounter', 'int64', '// member shared between multiple goroutines, protected by mutex', 'exclusiveCounter', 'int64', '// member exclusive of one goroutine -- is mutex needed?', '}', 'func', '(', 's', '*', 'shared', ')', 'readCounter', '()', 'int64', '{', 'return', 'atomic.LoadInt64(&s.sharedCounter)', '}', 'func', '(', 's', '*', 'shared', ')', 'setCounter', '(', 'i', 'int64', ')', '{', 'atomic.StoreInt64(&s.sharedCounter, i)', '}', 'playground']"
650,35141761,"Based on the compile error you're working with a uint64 pointer and not a uint64 value.  You may get what you want by referencing the value directly using the * operator. I've never worked with protobuf, so I could be off but that should get you moving.  Here's a nice reference that may help golang pointers
","['Based', 'on', 'the', 'compile', 'error', ""you're"", 'working', 'with', 'a', 'uint64', 'pointer', 'and', 'not', 'a', 'uint64', 'value.', 'You', 'may', 'get', 'what', 'you', 'want', 'by', 'referencing', 'the', 'value', 'directly', 'using', 'the', '*', 'operator.', ""I've"", 'never', 'worked', 'with', 'protobuf,', 'so', 'I', 'could', 'be', 'off', 'but', 'that', 'should', 'get', 'you', 'moving.', ""Here's"", 'a', 'nice', 'reference', 'that', 'may', 'help', 'golang', 'pointers']"
651,35141771,"

(See the * prefix as the difference)
","[""pb_obj.Score's"", 'type', 'seems', 'to', 'be', '*uint64', '(pointer', 'to', 'uint64),', 'not', 'uint64.', 'You', 'just', 'need', 'to', 'access', 'to', 'the', 'value', 'the', 'pointer', 'is', 'referencing:', 'score', ':=', 'int64', '(*', 'pb_obj', '.', 'Score', ')', '(See', 'the', '*', 'prefix', 'as', 'the', 'difference)']"
652,35203695," obviously.
","['Like', 'JimB', 'pointed', 'out,', 'you', 'are', 'not', 'handling', 'http', 'nor', 'websocket', 'connections', 'yet.', 'You', 'can', 'do', 'websocket', 'handling', 'with', 'the', 'package', 'github', '.', 'com/gorilla/websocket', 'This', 'is', 'how', 'a', 'simple', 'setup', 'could', 'look', 'like:', 'package', 'main', 'import', '(', '""log""', '""net/http""', '""github.com/gorilla/websocket""', ')', '//', 'wsHandler', 'implements', 'the', 'Handler', 'Interface', 'type', 'wsHandler', 'struct', '{}', 'func', 'main', '()', '{', 'router', ':=', 'http.NewServeMux()', 'router.Handle(""/"", http.FileServer(http.Dir(""./webroot"")))', '//handles static html / css etc. under ./webroot', 'router.Handle(""/ws"", wsHandler{})', '//handels websocket connections', '//', 'serving', 'log.Fatal(http.ListenAndServe(""localhost:8080"", router))', '}', 'func', '(', 'wsh', 'wsHandler', ')', 'ServeHTTP', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', '//', 'upgrader', 'is', 'needed', 'to', 'upgrade', 'the', 'HTTP', 'Connection', 'to', 'a', 'websocket', 'Connection', 'upgrader', ':=', '&', 'websocket', '.', 'Upgrader', '{', 'ReadBufferSize', ':', '1024', ',', 'WriteBufferSize', ':', '1024', ',', '}', '//', 'Upgrading', 'HTTP', 'Connection', 'to', 'websocket', 'connection', 'wsConn', ',', 'err', ':=', 'upgrader.Upgrade(w, r, nil)', 'if', 'err', '!=', 'nil', '{', 'log.Printf(""error upgrading %s"", err)', 'return', '}', '//', 'handle', 'your', 'websockets', 'with', 'wsConn', '}', 'In', 'your', 'Javascript', 'you', 'then', 'need', 'var', 'sock', '=', 'new', 'WebSocket', '(', '""ws://localhost/ws:8080""', ');', 'obviously.']"
653,35216377,"
","['Note', 'that', 'you', 'can', 'also', 'manipulate', 'what', 'the', 'name', 'of', 'the', 'fields', 'in', 'the', 'generated', 'JSON', 'are', 'by', 'doing', 'the', 'following:', 'type', 'Name', 'struct', '{', 'First', 'string', 'json', ':', '""firstname""', 'Middle', 'string', 'json', ':', '""middlename""', 'Last', 'string', 'json', ':', '""lastname""', '}']"
654,35253006,"
","['The', 'issue', 'is', 'that', 'you', 'are', 'initializing', 'the', 'nested', 'map', 'of', '""key""', 'in', 'each', 'called,', 'so', 'it', 'always', 'overrides', 'the', 'previous', 'data.', 'So', 'just', 'changing', 'your', 'line', 'retMap', '[', 'key', ']', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', '// If not assign here then it gives runtime error ""panic: assignment to entry in nil map""', 'to', 'the', 'below', 'should', 'make', 'your', 'code', 'work:', '=', '_', ',', 'ok', ':=', 'retMap', '[', 'key', ']', 'if', '!', 'ok', '{', 'retMap', '[', 'key', ']', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', '}', ""I'm"", 'just', 'checking', 'the', 'existence', 'of', 'a', 'value', 'stored', 'for', '""key"",', 'and', 'initialize', 'a', 'new', 'map', 'if', 'it', ""doesn't"", 'exist.', 'Updated:', 'I', 'also', 'rewrote', 'your', 'code', 'to', 'use', 'some', 'built-in', 'functions', 'that', 'Go', 'provide', 'with,', 'as', 'strings.Split', 'or', 'strings.Trim*', 'functions.', 'It', 'could', 'be', 'helpful.', 'package', 'main', 'import', '(', '""fmt""', '""strconv""', '""strings""', ')', 'const', 'str', '=', '""Hello @John martin #sosos &Hi @William ""', 'func', 'main', '()', '{', 'retMap', ':=', 'make', '(', 'map', '[', 'string', ']', 'map', '[', 'string', ']', 'string', ')', 'retMap', '[', '""group""', ']', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'retMap', '[', '""user""', ']', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'retMap', '[', '""hashTag""', ']', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'list', ':=', 'strings.Split(strings.TrimSpace(str), "" "")', 'for', '_', ',', 'value', ':=', 'range', 'list', '{', 'firstCharacter', ':=', 'string', '(', 'value', '[', '0', '])', 'if', 'firstCharacter', '==', '""@""', '{', 'retMap', '[', '""user""', '][', 'strconv.Itoa(len(retMap[""user""])+1)] = strings.TrimLeft(value, ""@"")', '}', 'else', 'if', 'firstCharacter', '==', '""&""', '{', 'retMap', '[', '""group""', '][', 'strconv.Itoa(len(retMap[""group""])+1)] = strings.TrimLeft(value, ""&"")', '}', 'else', 'if', 'firstCharacter', '==', '""#""', '{', 'retMap', '[', '""hashTag""', '][', 'strconv.Itoa(len(retMap[""hashTag""])+1)] = strings.TrimLeft(value, ""#"")', '}', '}', 'fmt.Println(""Final String "", retMap)', '}']"
655,35256530,"
","['Importantly,', 'you', 'should', 'check', 'all', 'of', 'your', 'errors', '-', 'e.g.:', '-', 'hashedPassword', ',', '_', ':=', 'bcrypt.GenerateFromPassword([]byte(r.Form[""passwordSignup""][0]), bcrypt.DefaultCost)', 'Check', 'our', 'error', ',', 'especially', 'for', 'something', 'as', 'import', 'ant', 'as', 'password', 'hashing', '+', 'hashedPassword', ',', 'err', ':=', 'bcrypt.GenerateFromPassword([]byte(r.Form[""passwordSignup""][0]), bcrypt.DefaultCost)', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)', 'return', '}', 'A', 'lot', 'of', 'your', 'relevant', 'cookie', 'code', 'is', 'missing,', 'but', ""here's"", 'what', 'it', 'should', 'look', 'like:', 'cookie', ':=', '&', 'http', '.', 'Cookie', '{', 'Name', ':', '""my_app""', ',', 'Value', ':', 'val', ',', '// Some encoded value', 'Path', ':', '""/""', ',', '// Otherwise it defaults to the /login if you create this on /login (standard cookie behaviour)', 'MaxAge', ':', '86400', ',', '// One day', '}', 'http.SetCookie(w, cookie)', 'Alternatively,', 'if', 'you', 'use', 'gorilla/sessions', '(which', 'I', 'recommend', 'because', 'it', 'correctly', 'authenticates', 'cookies),', 'you', 'would', 'do', 'the', 'following:', 'session', ',', 'err', ':=', 'store.Get(r, ""session-name"")', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), 500)', 'return', '}', 'session', '.', 'Options', '.', 'Path', '=', '""/""', 'session', '.', 'Values', '[', '""user""', ']', '=', 'user', 'err', ':=', 'session.Save(r, w)', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), 500)', 'return', '}', 'http.Redirect(w, r, ""/"", 301)']"
656,35257894,"

","['Ok,', 'two', 'things:', 'You', ""haven't"", '""inherited""', 'io.Writer', '(you', 'simply', 'stated', 'that', 'your', 'struct', 'contains', 'a', 'writer).', 'In', 'go,', 'interfaces', 'are', 'implicit.', 'If', 'your', 'struct', 'implements', 'Write', '(', 'p', '[]', 'byte', ')', '(', 'n', 'int', ',', 'err', ',', 'error', ')', ',', 'it', 'is', 'an', 'io.Writer', 'and', 'can', 'be', 'used', 'with', 'any', 'function', 'accepting', 'it.', 'Period.', 'No', 'need', 'to', 'declare', 'anything.', 'As', 'for', 'your', 'problem:', 'fmt.Printf(""%s\\n"", string(p))']"
657,35327747,"
","['I', 'think', 'the', 'best', 'approach', 'for', 'this', 'would', 'be', 'to', 'keep', 'a', 'pool', 'of', 'worker', 'goroutines,', 'dispatch', 'the', 'work', 'for', 'them', 'in', 'channels,', 'and', 'then', 'close', 'the', 'channel', 'so', 'they', 'would', 'exit.', 'something', 'like', 'this:', '//', 'create', 'a', 'channel', 'for', 'work', '""tasks""', 'ch', ':=', 'make', '(', 'chan', 'string', ')', 'wg', ':=', 'sync', '.', 'WaitGroup', '{}', '//', 'start', 'the', 'workers', 'for', 't', '=', '0', ';', 't', '<', '100', ';', 't', '++{', 'wg.Add(1)', 'go', 'saveToDB', '(', 'ch', ',', '&', 'wg', ')', '}', '//', 'push', 'the', 'lines', 'to', 'the', 'queue', 'channel', 'for', 'processing', 'for', '_', ',', 'line', ':=', 'range', 'fileline', '{', 'ch', '<-', 'line', '}', '//', 'this', 'will', 'cause', 'the', 'workers', 'to', 'stop', 'and', 'exit', 'their', 'receive', 'loop', 'close', '(', 'ch', ')', '//', 'make', 'sure', 'they', 'all', 'exit', 'wg.Wait()', 'and', 'then', 'the', 'saveFunction', 'looks', 'like', 'this:', 'func', 'saveToDB', '(', 'ch', 'chan', 'string', ',', 'wg', '*', 'sync', '.', 'WaitGroup', ')', '{', '//', 'cnosume', 'a', 'line', 'for', 'line', ':=', 'range', 'ch', '{', '//', 'do', 'work', 'actuallySaveToDB', '(', 'line', ')', '}', '//', ""we've"", 'exited', 'the', 'loop', 'when', 'the', 'dispatcher', 'closed', 'the', 'channel,', '//', 'so', 'now', 'we', 'can', 'just', 'signal', 'the', 'workGroup', ""we're"", 'done', 'wg.Done()', '}']"
658,35348490,"

Hope this helps someone with the same issue! 
","['@OneOfOne,', 'it', 'was', 'close', 'but', 'not', 'quite.', 'I', 'ended', 'up', 'making', 'a', 'Serial', 'Dispatch', 'Queue', 'implementation', 'in', 'Go', 'available', 'here.', 'It', 'is', 'basically', 'a', 'go', 'routine', 'that', 'blocks', 'on', 'a', 'channel', 'of', 'type', 'func()', 'and', 'runs', 'the', 'functions', 'that', 'are', 'passed', 'in', 'order.', 'Implementation:', '//', 'Package', 'serialqueue', 'provides', 'a', 'serial', 'queue', 'for', 'functions.', '//', 'Queue', 'items', 'are', 'processed', 'in', 'First', 'In', 'First', 'Out', '(FIFO)', 'order.', 'package', 'serialqueue', '//', 'New', 'returns', 'a', 'new', 'serial', 'queue.', '//', 'Enqueue', 'items', 'like', 'queueObj', '<-', 'func()', '{doWork(data)}', 'func', 'New', '()', 'chan', 'func', '()', '{', '//', 'create', 'channel', 'of', 'type', 'function', 'var', 'queue', '=', 'make', '(', 'chan', 'func', '())', '//', 'spawn', 'go', 'routine', 'to', 'read', 'and', 'run', 'functions', 'in', 'the', 'channel', 'go', 'func', '()', '{', 'for', 'true', '{', 'nextFunction', ':=', '<-', 'queue', 'nextFunction', '()', '}', '}()', 'return', 'queue', '}', 'Usage:', '(demonstrating', 'writing', 'to', 'a', 'string', 'in', 'the', 'correct', 'order)', '//', 'Package', 'serialqueue', 'provides', 'provides', 'tests', 'for', 'github.com/ansonl/serialqueue.', 'package', 'serialqueue_test', 'import', '(', '""testing""', '""fmt""', '""sync""', '""github.com/ansonl/serialqueue""', ')', 'func', 'TestQueue', '(', 't', '*', 'testing', '.', 'T', ')', '{', '//', 'Create', 'new', 'serial', 'queue', 'queue', ':=', 'serialqueue.New()', '//', 'Number', 'of', 'times', 'to', 'loop', 'var', 'loops', '=', '100', '//', 'Queue', 'output', 'will', 'be', 'added', 'here', 'var', 'queueOutput', 'string', '//', 'WaitGroup', 'for', 'determining', 'when', 'queue', 'output', 'is', 'finished', 'var', 'wg', 'sync', '.', 'WaitGroup', '//', 'Create', 'function', 'to', 'place', 'in', 'queue', 'var', 'printTest', '=', 'func', '(', 'i', 'int', ')', '{', 'queueOutput', '=', 'fmt.Sprintf(""%v%v"",queueOutput, i)', 'wg.Done()', '}', '//', 'Add', 'functions', 'to', 'queue', 'var', 'i', 'int', ';', 'for', 'i', '=', '0', ';', 'i', '<', 'loops', ';', 'i', '++', '{', 'wg.Add(1)', 't', ':=', 'i', 'queue', '<-', 'func', '()', '{', 'printTest', '(', 't', ')}', '}', '//', 'Generate', 'correct', 'output', 'var', 'correctOutput', 'string', 'for', 'i', '=', '0', ';', 'i', '<', 'loops', ';', 'i', '++', '{', 'correctOutput', '=', 'fmt.Sprintf(""%v%v"", correctOutput, i)', '}', '//', 'Wait', 'until', 'all', 'functions', 'in', 'queue', 'are', 'done', 'wg.Wait()', '//', 'Compare', 'queue', 'output', 'with', 'correct', 'output', 'if', 'queueOutput', '!=', 'correctOutput', '{', 't.Errorf(""Serial Queue produced %v, want %v"", queueOutput, correctOutput)', ';', '}', '}', 'Hope', 'this', 'helps', 'someone', 'with', 'the', 'same', 'issue!']"
659,35379919,"
","['The', 'Go', 'Programming', 'Language', 'Specification', 'Map', 'types', 'A', 'new,', 'empty', 'map', 'value', 'is', 'made', 'using', 'the', 'built-in', 'function', 'make,', 'which', 'takes', 'the', 'map', 'type', 'and', 'an', 'optional', 'capacity', 'hint', 'as', 'arguments:', 'make', '(', 'map', '[', 'string', ']', 'int', ')', 'make', '(', 'map', '[', 'string', ']', 'int', ',', '100', ')', 'The', 'initial', 'capacity', 'does', 'not', 'bound', 'its', 'size:', 'maps', 'grow', 'to', 'accommodate', 'the', 'number', 'of', 'items', 'stored', 'in', 'them,', 'with', 'the', 'exception', 'of', 'nil', 'maps.', 'A', 'nil', 'map', 'is', 'equivalent', 'to', 'an', 'empty', 'map', 'except', 'that', 'no', 'elements', 'may', 'be', 'added.', 'You', 'write:', 'var', 'countedData', 'map', '[', 'string', '][]', 'ChartElement', 'Instead,', 'to', 'initialize', 'the', 'map,', 'write,', 'countedData', ':=', 'make', '(', 'map', '[', 'string', '][]', 'ChartElement', ')']"
660,35386184,"

What results do you get when you run this code?
","['To', 'paraphrase,', 'there', 'are', 'lies,', 'damn', 'lies,', 'and', 'benchmarks.', 'Despite', 'being', 'asked,', 'you', 'still', ""haven't"", 'posted', 'the', 'code', 'necessary', 'to', 'reproduce', 'your', 'issue:', 'How', 'to', 'create', 'a', 'Minimal,', 'Complete,', 'and', 'Verifiable', 'example.', ""Here's"", 'a', 'reproducible', 'benchmark,', 'which', 'uses', 'a', 'PRNG,', 'that', 'should', 'drive', 'your', 'CPUs', 'to', 'close', 'to', '100%:', 'package', 'main', 'import', '(', '""math/rand""', '""runtime""', '""time""', ')', 'func', 'DoSomeCPU', '(', 'done', '<-', 'chan', 'bool', ')', '{', 'r', ':=', 'rand.New(rand.NewSource(time.Now().UnixNano()))', 'k', ':=', '0', 'for', 'i', ':=', '0', ';', 'i', '<', '1000000', ';', 'i', '++', '{', 'j', ':=', 'i', '*', 'i', '+', '2', 'k', '+=', 'i', '*', 'r.Intn(j)', '}', '_', '=', 'k', '<-', 'done', '}', 'func', 'main', '()', '{', 'numCPU', ':=', 'runtime.NumCPU()', 'runtime.GOMAXPROCS(numCPU)', 'done', ':=', 'make', '(', 'chan', 'bool', ',', '2', '*', 'numCPU', ')', 'for', '{', 'done', '<-', 'true', 'go', 'DoSomeCPU', '(', 'done', ')', '}', '}', 'What', 'results', 'do', 'you', 'get', 'when', 'you', 'run', 'this', 'code?']"
661,35388675,"The main reason is, the global rand.* uses a mutex, so at any given point, you can only generate one random number at a time.

The reason @peterSO's answer works is because there's no mutex now and it's 1 generator per routine, however you can end up with duplicate state if 2 or more goroutines start at the exact nano second, although unlikely.

Look here to see how the global rand works under the hood.
","['What', 'results', 'do', 'you', 'get', 'when', 'you', 'run', 'this', 'code?']"
662,35436450,"

And remove 'Parameters' from your endpoint swagger doc
","['Try', 'to', 'add', 'your', 'endpoint', 'operatin', 'id', ""('updateBar')"", 'as', 'a', 'parameter', 'operation', 'id.', 'Something', 'like:', '//', 'swagger:parameters', 'updateBar', 'type', 'BarParam', 'struct', '{', '//', 'aaaa', '//', 'in:', 'path', 'bar', 'string', '}', 'And', 'remove', ""'Parameters'"", 'from', 'your', 'endpoint', 'swagger', 'doc']"
663,35487263,"

So if you wish to parse comments with pure AST, you need to be aware that this is how it works. But the preferred method, as @mjibson suggested, is to use go/doc. Good luck!
","['Great', 'question!', 'Looking', 'at', 'the', 'source', 'code', 'of', 'go/doc,', 'we', 'can', 'see', 'that', 'it', 'has', 'to', 'deal', 'with', 'this', 'same', 'case', 'in', 'readType', 'function.', 'There,', 'it', 'says:', '324', 'func', '(', 'r', '*', 'reader', ')', 'readType', '(', 'decl', '*', 'ast', '.', 'GenDecl', ',', 'spec', '*', 'ast', '.', 'TypeSpec', ')', '{', '...', '334', '// compute documentation', '335', 'doc', ':=', 'spec', '.', 'Doc', '336', 'spec', '.', 'Doc', '=', 'nil', '// doc consumed - remove from AST', '337', 'if', 'doc', '==', 'nil', '{', '338', '// no doc associated with the spec, use the declaration doc, if any', '339', 'doc', '=', 'decl', '.', 'Doc', '340', '}', '...', 'Notice', 'in', 'particular', 'how', 'it', 'needs', 'to', 'deal', 'with', 'the', 'case', 'where', 'the', 'AST', 'does', 'not', 'have', 'a', 'doc', 'attached', 'to', 'the', 'TypeSpec.', 'To', 'do', 'this,', 'it', 'falls', 'back', 'on', 'the', 'GenDecl.', 'This', 'gives', 'us', 'a', 'clue', 'as', 'to', 'how', 'we', 'might', 'use', 'the', 'AST', 'directly', 'to', 'parse', 'doc', 'comments', 'for', 'structs.', 'Adapting', 'the', 'for', 'loop', 'in', 'the', 'question', 'code', 'to', 'add', 'a', 'case', 'for', '*ast.GenDecl:', 'for', '_', ',', 'f', ':=', 'range', 'd', '{', 'ast.Inspect(f, func(n ast.Node)', 'bool', '{', 'switch', 'x', ':=', 'n', '.(', 'type', ')', '{', 'case', '*', 'ast', '.', 'FuncDecl', ':', 'fmt.Printf(""%s:\\tFuncDecl %s\\t%s\\n"", fset.Position(n.Pos()), x.Name, x.Doc.Text())', 'case', '*', 'ast', '.', 'TypeSpec', ':', 'fmt.Printf(""%s:\\tTypeSpec %s\\t%s\\n"", fset.Position(n.Pos()), x.Name, x.Doc.Text())', 'case', '*', 'ast', '.', 'Field', ':', 'fmt.Printf(""%s:\\tField %s\\t%s\\n"", fset.Position(n.Pos()), x.Names, x.Doc.Text())', 'case', '*', 'ast', '.', 'GenDecl', ':', 'fmt.Printf(""%s:\\tGenDecl %s\\n"", fset.Position(n.Pos()), x.Doc.Text())', '}', 'return', 'true', '})', '}', 'Running', 'this', 'gives', 'us:', 'main', '.', 'go', ':', '3', ':', '1', ':', 'GenDecl', '%!', 's', '(*', 'ast', '.', 'CommentGroup', '=)', 'main', '.', 'go', ':', '11', ':', '1', ':', 'GenDecl', '&{[%!', 's', '(*', 'ast', '.', 'Comment', '=&{', '69', '// FirstType docs})]}', 'main', '.', 'go', ':', '11', ':', '6', ':', 'TypeSpec', 'FirstType', '%!', 's', '(*', 'ast', '.', 'CommentGroup', '=)', 'main', '.', 'go', ':', '13', ':', '2', ':', 'Field', '[', 'FirstMember', ']', '&{[%!', 's', '(*', 'ast', '.', 'Comment', '=&{', '112', '// FirstMember docs})]}', 'main', '.', 'go', ':', '17', ':', '1', ':', 'GenDecl', '&{[%!', 's', '(*', 'ast', '.', 'Comment', '=&{', '155', '// SecondType docs})]}', 'main', '.', 'go', ':', '17', ':', '6', ':', 'TypeSpec', 'SecondType', '%!', 's', '(*', 'ast', '.', 'CommentGroup', '=)', 'main', '.', 'go', ':', '19', ':', '2', ':', 'Field', '[', 'SecondMember', ']', '&{[%!', 's', '(*', 'ast', '.', 'Comment', '=&{', '200', '// SecondMember docs})]}', 'main', '.', 'go', ':', '23', ':', '1', ':', 'FuncDecl', 'main', '&{[%!', 's', '(*', 'ast', '.', 'Comment', '=&{', '245', '// Main docs})]}', 'main', '.', 'go', ':', '33', ':', '23', ':', 'Field', '[', 'n', ']', '%!', 's', '(*', 'ast', '.', 'CommentGroup', '=)', 'main', '.', 'go', ':', '33', ':', '35', ':', 'Field', '[]', '%!', 's', '(*', 'ast', '.', 'CommentGroup', '=)', 'And,', 'hey!', ""We've"", 'printed', 'out', 'the', 'long-lost', 'FirstType', 'docs', 'and', 'SecondType', 'docs!', 'But', 'this', 'is', 'unsatisfactory.', 'Why', 'is', 'the', 'doc', 'not', 'attached', 'to', 'the', 'TypeSpec?', 'The', 'go/doc/reader.go', 'file', 'goes', 'to', 'extraordinary', 'lengths', 'to', 'circumvent', 'this', 'issue,', 'actually', 'generating', 'a', 'fake', 'GenDecl', 'and', 'passing', 'it', 'to', 'the', 'readType', 'function', 'mentioned', 'earlier,', 'if', 'there', 'is', 'no', 'documentation', 'associated', 'with', 'the', 'struct', 'declaration!', '503', 'fake', ':=', '&', 'ast', '.', 'GenDecl', '{', '504', 'Doc', ':', 'd', '.', 'Doc', ',', '505', ""// don't use the existing TokPos because it"", '506', '// will lead to the wrong selection range for', '507', '// the fake declaration if there are more', '508', '// than one type in the group (this affects', '509', ""// src/cmd/godoc/godoc.go's posLink_urlFunc)"", '510', 'TokPos', ':', 's.Pos()', ',', '511', 'Tok', ':', 'token', '.', 'TYPE', ',', '512', 'Specs', ':', '[]', 'ast', '.', 'Spec', '{', 's', '},', '513', '}', 'But', 'why', 'all', 'this?', 'Imagine', 'we', 'changed', 'the', 'type', 'definitions', 'from', 'code', 'in', 'the', 'question', 'slightly', '(defining', 'structs', 'like', 'this', 'is', 'not', 'common,', 'but', 'still', 'valid', 'Go):', '//', 'This', 'documents', 'FirstType', 'and', 'SecondType', 'together', 'type', '(', '//', 'FirstType', 'docs', 'FirstType', 'struct', '{', '//', 'FirstMember', 'docs', 'FirstMember', 'string', '}', '//', 'SecondType', 'docs', 'SecondType', 'struct', '{', '//', 'SecondMember', 'docs', 'SecondMember', 'string', '}', ')', 'Run', 'the', 'code', '(including', 'the', 'case', 'for', 'ast.GenDecl)', 'and', 'we', 'get:', 'main', '.', 'go', ':', '3', ':', '1', ':', 'GenDecl', '%!', 's', '(*', 'ast', '.', 'CommentGroup', '=)', 'main', '.', 'go', ':', '11', ':', '1', ':', 'GenDecl', '&{[%!', 's', '(*', 'ast', '.', 'Comment', '=&{', '69', '// This documents FirstType and SecondType together})]}', 'main', '.', 'go', ':', '13', ':', '2', ':', 'TypeSpec', 'FirstType', '&{[%!', 's', '(*', 'ast', '.', 'Comment', '=&{', '129', '// FirstType docs})]}', 'main', '.', 'go', ':', '15', ':', '3', ':', 'Field', '[', 'FirstMember', ']', '&{[%!', 's', '(*', 'ast', '.', 'Comment', '=&{', '169', '// FirstMember docs})]}', 'main', '.', 'go', ':', '19', ':', '2', ':', 'TypeSpec', 'SecondType', '&{[%!', 's', '(*', 'ast', '.', 'Comment', '=&{', '215', '// SecondType docs})]}', 'main', '.', 'go', ':', '21', ':', '3', ':', 'Field', '[', 'SecondMember', ']', '&{[%!', 's', '(*', 'ast', '.', 'Comment', '=&{', '257', '// SecondMember docs})]}', 'main', '.', 'go', ':', '26', ':', '1', ':', 'FuncDecl', 'main', '&{[%!', 's', '(*', 'ast', '.', 'Comment', '=&{', '306', '// Main docs})]}', 'main', '.', 'go', ':', '36', ':', '23', ':', 'Field', '[', 'n', ']', '%!', 's', '(*', 'ast', '.', 'CommentGroup', '=)', 'main', '.', 'go', ':', '36', ':', '35', ':', 'Field', '[]', '%!', 's', '(*', 'ast', '.', 'CommentGroup', '=)', ""That's"", 'right', 'Now', 'the', 'struct', 'type', 'definitions', 'have', 'their', 'docs,', 'and', 'the', 'GenDecl', 'has', 'its', 'own', 'documentation,', 'too.', 'In', 'the', 'first', 'case,', 'posted', 'in', 'the', 'question,', 'the', 'doc', 'was', 'attached', 'to', 'GenDecl,', 'since', 'the', 'AST', 'sees', 'the', 'individual', 'struct', 'type', 'definitions', 'of', '""contractions""', 'of', 'the', 'parenthesized-version', 'of', 'type', 'definitions,', 'and', 'wants', 'to', 'handle', 'all', 'definitions', 'the', 'same,', 'whether', 'they', 'are', 'grouped', 'or', 'not.', 'The', 'same', 'thing', 'would', 'happen', 'with', 'variable', 'definitions,', 'as', 'in:', '//', 'some', 'general', 'docs', 'var', '(', '//', 'v', 'docs', 'v', 'int', '//', 'v2', 'docs', 'v2', 'string', ')', 'So', 'if', 'you', 'wish', 'to', 'parse', 'comments', 'with', 'pure', 'AST,', 'you', 'need', 'to', 'be', 'aware', 'that', 'this', 'is', 'how', 'it', 'works.', 'But', 'the', 'preferred', 'method,', 'as', '@mjibson', 'suggested,', 'is', 'to', 'use', 'go/doc.', 'Good', 'luck!']"
664,35513661,"
","['You', 'can', 'do', 'this', 'by', 'setting', 'the', 'CGO_CPPFLAGS', 'and', 'CGO_LDFLAGS', 'environment', 'variables.', 'For', 'example,', 'on', 'my', 'MacBook,', 'Homebrew', 'is', 'installed', 'in', '~/.homebrew', '(instead', 'of', '/usr/local),', 'so', 'when', 'I', 'try', 'to', 'go', 'get', 'packages', 'with', 'native', 'bindings', 'they', ""can't"", 'find', 'the', 'headers', 'and', 'libs.', 'To', 'fix', 'that', 'I', 'added', 'these', 'two', 'lines', 'to', 'my', '~/.zshenv', 'file:', 'export', 'CGO_CPPFLAGS', '=', '""-I $BREW_HOME/include""', 'export', 'CGO_LDFLAGS', '=', '""-L $BREW_HOME/lib""']"
665,35556287,"

Note that this however will only print \r\n at the end of the log entry; but if you use \n inside the format string or the arguments are strings (or will result in a string by calling their String() method) containing \n, those will not turn into \r\n automatically. You may use strings.Replace() to handle those too.
","['As', 'noted,', 'the', 'fmt', 'package', 'always', 'uses', '\\n', 'as', 'the', 'newline', '""sequence""', 'regardless', 'of', 'the', 'OS', '(on', 'Windows', 'too).', 'The', 'log', 'package', 'uses', 'fmt', 'under', 'the', 'hood,', 'so', 'the', 'same', 'applies', 'to', 'log', 'too.', 'When', 'functions', 'that', 'do', 'not', 'end', 'with', '...ln()', 'are', 'called', '(e.g.', 'log.Printf()),', 'a', '\\n', 'will', 'be', 'printed', 'explicitly', 'as', 'documented', 'at', 'Logger.Output()', '(to', 'which', 'log.Printf()', 'forwards', 'to).', 'Just', 'deal', 'with', '\\n', 'as', 'the', 'newline.', 'If', 'you', 'do', 'need', 'to', 'print', '\\r\\n,', 'you', 'have', 'to', 'handle', 'that', 'manually', 'by', 'appending', 'a', '\\r', 'character', 'at', 'the', 'end', 'of', 'the', 'format', 'string,', 'e.g.:', 'log.Printf(""This will be terminated by CR+LF\\r"")', '// \\n is appended automatically', 'You', 'may', 'create', 'a', 'wrapper', 'function', 'for', 'it:', 'func', 'winprintf', '(', 'for', 'mat', 'string', ',', 'a', '...', 'interface', '{})', '{', 'log.Printf(format+""\\r"", a...)', '}', 'Note', 'that', 'this', 'however', 'will', 'only', 'print', '\\r\\n', 'at', 'the', 'end', 'of', 'the', 'log', 'entry;', 'but', 'if', 'you', 'use', '\\n', 'inside', 'the', 'format', 'string', 'or', 'the', 'arguments', 'are', 'strings', '(or', 'will', 'result', 'in', 'a', 'string', 'by', 'calling', 'their', 'String()', 'method)', 'containing', '\\n,', 'those', 'will', 'not', 'turn', 'into', '\\r\\n', 'automatically.', 'You', 'may', 'use', 'strings.Replace()', 'to', 'handle', 'those', 'too.']"
666,35576591,"Don't link files across packages, that's bad practice. For one, the code will be duplicated. For another, identifiers will be duplicated meaning to denote the same entities (e.g. type or function), but they will be distinct. E.g. if linked and structs.go would contain a type Response definition, you would have 2 distinct types server.Response and routines.Response giving just more confusion.

One solution would be to put structs.go into its own package, e.g. model, and all other packages relying on it can import it (e.g. your main, server and routines).

In a theoretical example: if package A imports package B and structs.go would be needed in both, then it could also be added to package B. If there would be a package C needing only structs.go, then again it would be wiser to create its own package model (so package C doesn't need to import / know about package B, only the new model package).

Also if noone else will use your package and it is not too complex, it might not worth the hassle to organize it into multiple packages.
","['Note', 'that', 'this', 'however', 'will', 'only', 'print', '\\r\\n', 'at', 'the', 'end', 'of', 'the', 'log', 'entry;', 'but', 'if', 'you', 'use', '\\n', 'inside', 'the', 'format', 'string', 'or', 'the', 'arguments', 'are', 'strings', '(or', 'will', 'result', 'in', 'a', 'string', 'by', 'calling', 'their', 'String()', 'method)', 'containing', '\\n,', 'those', 'will', 'not', 'turn', 'into', '\\r\\n', 'automatically.', 'You', 'may', 'use', 'strings.Replace()', 'to', 'handle', 'those', 'too.']"
667,35607787,"
","['Go', 'has', 'a', 'library', 'for', 'creating', 'services', 'in', 'windows.', 'Please', 'check', 'this', 'library', 'github.com/kardianos/service.', 'package', 'main', 'import', '(', '""log""', '""github.com/kardianos/service""', ')', 'var', 'logger', 'service', '.', 'Logger', 'type', 'program', 'struct', '{}', 'func', '(', 'p', '*', 'program', ')', 'Start', '(', 's', 'service', '.', 'Service', ')', 'error', '{', '//', 'Start', 'should', 'not', 'block.', 'Do', 'the', 'actual', 'work', 'async.', 'go', 'p.run()', 'return', 'nil', '}', 'func', '(', 'p', '*', 'program', ')', 'run', '()', '{', '//', 'Do', 'work', 'here', '}', 'func', '(', 'p', '*', 'program', ')', 'Stop', '(', 's', 'service', '.', 'Service', ')', 'error', '{', '//', 'Stop', 'should', 'not', 'block.', 'Return', 'with', 'a', 'few', 'seconds.', 'return', 'nil', '}', 'func', 'main', '()', '{', 'svcConfig', ':=', '&', 'service', '.', 'Config', '{', 'Name', ':', '""GoServiceExampleSimple""', ',', 'DisplayName', ':', '""Go Service Example""', ',', 'Description', ':', '""This is an example Go service.""', ',', '}', 'prg', ':=', '&', 'program', '{}', 's', ',', 'err', ':=', 'service.New(prg, svcConfig)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'logger', ',', 'err', '=', 's.Logger(nil)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'err', '=', 's.Run()', 'if', 'err', '!=', 'nil', '{', 'logger.Error(err)', '}', '}']"
668,35636889,"@peterSO mentioned that errors should always be checked in Go, I should had done that.
","['@peterSO', 'mentioned', 'that', 'errors', 'should', 'always', 'be', 'checked', 'in', 'Go,', 'I', 'should', 'had', 'done', 'that.']"
669,35644397,"
","['Because', 'c.Find(https://godoc.org/gopkg.in/mgo.v2#Collection.Find)', 'only', 'allow', 'one', 'param', 'You', 'can', 'try', 'query', ':=', 'bson', '.', 'M', '{', '""company_name""', ':', '""bank""', ',', '""process""', ':', 'bson', '.', 'M', '{', '""$elemMatch""', ':', 'bson', '.', 'M', '{', '""process.process_name""', ':', '""Converted""', '}', '}', '}', 'err', ':=', 'c.Find(query).Sort(""-id"").All(&results)']"
670,35660410,"
","['The', 'Write', 'method', 'needs', 'a', 'pointer', 'to', 'a', 'value,', 'not', 'a', 'pointer', 'to', 'an', 'interface', 'containing', 'the', 'value.', 'You', 'can', 'get', 'it', 'using', 'reflection:', 'u', ':=', 'reflect.New(reflect.ValueOf(v).Type())', 'u.Elem().Set(reflect.ValueOf(v))', 'v', ':=', 'u.Interface()']"
671,35791164,"Please check this out difference between godep update and godep save.
I usually just use godep save unless I am updating a specific package. This grabs all the updated packages for the project from GOPATH. 
BTW: I am also fairly new to Godeps.
",[]
672,35791966,"
","['Make', 'sure', 'you', 'have', 'git', 'committed', 'package', 'you', 'want', 'to', 'update,', 'you', 'can', 'check', 'the', 'commit', 'sha-1', 'checksum', 'using', 'git', 'log', 'and', 'make', 'sure', 'it', 'has', 'different', 'rev', 'commit', 'version', 'in', 'Godeps.json.', 'Then', 'include', 'package', 'name', 'in', 'godep', 'command', 'go', 'dep', 'update', 'github', '.', 'com/package/...']"
673,35890152,"
","['You', 'need', 'to', 'explicitly', 'ask', 'your', 'server', 'to', 'serve', 'static', 'files.', 'See', 'http.FileServer', 'In', 'your', 'case', 'register', 'another', 'handler.', 'http.Handle(""/public/"", http.StripPrefix(""/public/"", http.FileServer(http.Dir(""public""))))']"
674,35901368,"

And to use the files in your HTML, simply



","['Like', 'Aruna', 'said,', 'register', 'a', 'static', 'file', 'server', 'handle', 'http.Handle(""/public/"", http.StripPrefix(""/public/"", http.FileServer(http.Dir(""public""))))', 'And', 'to', 'use', 'the', 'files', 'in', 'your', 'HTML,', 'simply']"
675,35918852,"Programming languages are able to communicate with each other -- yes, you can write a server in Go and a client in Python and have them communicate with each other.

If you're trying to communicate using raw sockets, look at the documentation for your desired languages and make sure that the serialized data match in structure.

e.g. You could decide on a struct and implement your payload in Python or code and then match that structure in Go (there may be a better/stdlib way in Go; I'm not very experienced in this language).  The potential maintenance and implementation headache in worrying about these details is why people use higher-level protocols -- exactly a good use case for ZeroMQ.

If you're using a message queue as the backbone of your operation, simply use that as the shared protocol.  If your Python code can speak with ZeroMQ, then it's doing its job correctly -- there's no need for your Go code to know it's speaking to Python.

In this case, your new Go server would bind to ZeroMQ, your Python client would bind to ZeroMQ, and your two heterogenous languages need to know nothing about each other.
","['Programming', 'languages', 'are', 'able', 'to', 'communicate', 'with', 'each', 'other', '--', 'yes,', 'you', 'can', 'write', 'a', 'server', 'in', 'Go', 'and', 'a', 'client', 'in', 'Python', 'and', 'have', 'them', 'communicate', 'with', 'each', 'other.', 'If', ""you're"", 'trying', 'to', 'communicate', 'using', 'raw', 'sockets,', 'look', 'at', 'the', 'documentation', 'for', 'your', 'desired', 'languages', 'and', 'make', 'sure', 'that', 'the', 'serialized', 'data', 'match', 'in', 'structure.', 'e.g.', 'You', 'could', 'decide', 'on', 'a', 'struct', 'and', 'implement', 'your', 'payload', 'in', 'Python', 'or', 'code', 'and', 'then', 'match', 'that', 'structure', 'in', 'Go', '(there', 'may', 'be', 'a', 'better/stdlib', 'way', 'in', 'Go;', ""I'm"", 'not', 'very', 'experienced', 'in', 'this', 'language).', 'The', 'potential', 'maintenance', 'and', 'implementation', 'headache', 'in', 'worrying', 'about', 'these', 'details', 'is', 'why', 'people', 'use', 'higher-level', 'protocols', '--', 'exactly', 'a', 'good', 'use', 'case', 'for', 'ZeroMQ.', 'If', ""you're"", 'using', 'a', 'message', 'queue', 'as', 'the', 'backbone', 'of', 'your', 'operation,', 'simply', 'use', 'that', 'as', 'the', 'shared', 'protocol.', 'If', 'your', 'Python', 'code', 'can', 'speak', 'with', 'ZeroMQ,', 'then', ""it's"", 'doing', 'its', 'job', 'correctly', '--', ""there's"", 'no', 'need', 'for', 'your', 'Go', 'code', 'to', 'know', ""it's"", 'speaking', 'to', 'Python.', 'In', 'this', 'case,', 'your', 'new', 'Go', 'server', 'would', 'bind', 'to', 'ZeroMQ,', 'your', 'Python', 'client', 'would', 'bind', 'to', 'ZeroMQ,', 'and', 'your', 'two', 'heterogenous', 'languages', 'need', 'to', 'know', 'nothing', 'about', 'each', 'other.']"
676,35961173,"

I believe the func above should do what you want...
","['You', 'do', 'not', 'need', 'to', 'call', 'ParseFiles', 'and', 'Must,', 'you', 'can', 'call', 'one', 'or', 'the', 'other', 'func', 'RenderTemplate', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'data', 'interface', '{},', 'tmpl', '...', 'string', ')', '{', 'cwd', ',', '_', ':=', 'os.Getwd()', 'for', '_', ',', 'file', ':=', 'range', 'tmpl', '{', 'file', '=', 'filepath.Join(cwd,""./view/""+file+"".html"")', '}', 't', ',', 'err', ':=', 'template.ParseFiles(tmpl...)', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), http.StatusInternalServerError)', 'return', '}', 'err', '=', 't.Execute(w, data)', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), http.StatusInternalServerError)', '}', '}', 'I', 'believe', 'the', 'func', 'above', 'should', 'do', 'what', 'you', 'want...']"
677,35962433,"

See https://golang.org/src/text/template/helper.go?s=576:619#L11
","['template.Must()', 'has', 'this', 'signature:', 'func', 'Must', '(', 't', '*', 'Template', ',', 'err', 'error', ')', '*', 'Template', 'the', 'arguments', 'to', 'Must()', 'are', '""by', 'coincidence""', 'the', 'same', 'as', 'the', 'return', 'values', 'to', 'ParseFiles()', 'and', 'ParseGlob()', 'so', 'you', 'can', 'use', 'those', 'functions', 'inside', 'Must()', 'and', 'have', 'the', 'effect', 'that', 'it', 'panics,', 'if', 'the', 'error', 'is', 'non-nil.', 'So', 'you', 'can', 'say', 't', ':=', 'template.Must(template.ParseFiles(....))', 'and', ""don't"", 'care', 'about', 'the', 'error', 'checking.', 'This', 'is', 'merely', 'a', 'convenience', 'function,', 'similar', 'to', 'all', 'other', 'Must()', 'functions', 'throughout', 'the', 'standard', 'library,', 'such', 'as', 'regexp.MustCompile().', 'The', 'implementation', 'of', 'Must()', 'is', 'straightforward:', 'func', 'Must', '(', 't', '*', 'Template', ',', 'err', 'error', ')', '*', 'Template', '{', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'return', 't', '}', 'See', 'https://golang.org/src/text/template/helper.go?s=576:619#L11']"
678,35985183,"It's the Base64 encoding of the signature which can have the last letter changed to certain targets without affecting the relevant bits.

Try popping both signatures into a base64->hex decoder and you'll get the same results. In fact at https://conv.darkbyte.ru/ both signatures get re-evaluated to base64 SxshVL42DUH9e7jXUblbBbTwKxhe4jo70DrvbQMlaQ==
","[""It's"", 'the', 'Base64', 'encoding', 'of', 'the', 'signature', 'which', 'can', 'have', 'the', 'last', 'letter', 'changed', 'to', 'certain', 'targets', 'without', 'affecting', 'the', 'relevant', 'bits.', 'Try', 'popping', 'both', 'signatures', 'into', 'a', 'base64->hex', 'decoder', 'and', ""you'll"", 'get', 'the', 'same', 'results.', 'In', 'fact', 'at', 'https://conv.darkbyte.ru/', 'both', 'signatures', 'get', 're-evaluated', 'to', 'base64', 'SxshVL42DUH9e7jXUblbBbTwKxhe4jo70DrvbQMlaQ==']"
679,36029056,"

And also make your post.html template a complete, valid HTML document.

Also another piece of advice: in your code you religiously omit checking returned errors. Don't do that. The least you could do is print them on the console. You will save a lot of time for yourself if you don't omit errors.
","['As', 'hinted,', ""it's"", 'because', 'you', ""haven't"", 'set', 'the', 'content', 'type.', 'Quoting', 'from', 'http.ResponseWriter:', '//', 'Write', 'writes', 'the', 'data', 'to', 'the', 'connection', 'as', 'part', 'of', 'an', 'HTTP', 'reply.', '//', 'If', 'WriteHeader', 'has', 'not', 'yet', 'been', 'called,', 'Write', 'calls', 'WriteHeader(http.StatusOK)', '//', 'before', 'writing', 'the', 'data.', 'If', 'the', 'Header', 'does', 'not', 'contain', 'a', '//', 'Content-Type', 'line,', 'Write', 'adds', 'a', 'Content-Type', 'set', 'to', 'the', 'result', 'of', 'passing', '//', 'the', 'initial', '512', 'bytes', 'of', 'written', 'data', 'to', 'DetectContentType.', 'Write', '([]', 'byte', ')', '(', 'int', ',', 'error', ')', 'If', 'you', ""don't"", 'set', 'the', 'content', 'type', 'yourself,', 'first', 'call', 'to', 'ResponseWriter.Write()', 'will', 'call', 'http.DetectContentType()', 'to', 'guess', 'what', 'to', 'set.', 'If', 'the', 'content', 'you', 'send', 'starts', 'with', '"""",', 'it', ""won't"", 'be', 'detected', 'as', 'HTML,', 'but', '""text/plain; charset=utf-8""', 'will', 'be', 'set', '(which', '""instructs""', 'the', 'browser', 'to', 'display', 'the', 'content', 'as', 'text', 'and', 'not', 'try', 'to', 'interpret', 'it', 'as', 'HTML).', 'If', 'the', 'content', 'would', 'start', 'with', '""""', 'for', 'example,', 'content', 'type', '""text/html; charset=utf-8""', 'would', 'be', 'set', 'automatically', 'and', 'it', 'would', 'work', 'without', 'further', 'actions.', 'But', ""don't"", 'rely', 'on', 'automatic', 'detection', 'if', 'you', 'know', 'what', ""you're"", 'sending,', 'also', ""it's"", 'much', 'faster', 'to', 'set', 'it', 'yourself', 'than', 'to', 'run', 'a', 'detection', 'algorithm', 'on', 'it,', 'so', 'simply', 'add', 'this', 'line', 'before', 'writing/sending', 'any', 'data:', 'w.Header().Set(""Content-Type"", ""text/html; charset=utf-8"")', 'And', 'also', 'make', 'your', 'post.html', 'template', 'a', 'complete,', 'valid', 'HTML', 'document.', 'Also', 'another', 'piece', 'of', 'advice:', 'in', 'your', 'code', 'you', 'religiously', 'omit', 'checking', 'returned', 'errors.', ""Don't"", 'do', 'that.', 'The', 'least', 'you', 'could', 'do', 'is', 'print', 'them', 'on', 'the', 'console.', 'You', 'will', 'save', 'a', 'lot', 'of', 'time', 'for', 'yourself', 'if', 'you', ""don't"", 'omit', 'errors.']"
680,36098929,"In C, that pointer you return is going to be stale.  You would need to allocate the table like double *result = calloc(sizeof(double), nrows) --- which would require also have a way to free the memory.
","['In', 'C,', 'that', 'pointer', 'you', 'return', 'is', 'going', 'to', 'be', 'stale.', 'You', 'would', 'need', 'to', 'allocate', 'the', 'table', 'like', 'double', '*result', '=', 'calloc(sizeof(double),', 'nrows)', '---', 'which', 'would', 'require', 'also', 'have', 'a', 'way', 'to', 'free', 'the', 'memory.']"
681,36103121,"
","['OK,', 'so', 'I', 'figured', 'out', 'a', 'simple', 'way', 'to', 'achieve', 'this.', 'We', 'first', 'use', 'calloc', 'to', 'allocate', 'memory', 'for', 'the', 'array:', 'double', '*', 'c_func', '(', 'int', 'n_rows', ')', '{', 'double', '*', 'result', ';', 'result', '=', 'calloc', '(', 'n_rows', ',', 'sizeof', '(', 'double', '));', 'for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'n_rows', ';', '++', 'i', ')', '{', 'result', '[', 'i', ']', '=', '(', 'double', ')', 'i', ';', '}', 'return', 'result', ';', '}', 'and', 'after', 'that,', 'we', 'simply', 'convert', 'the', 'data', 'into', 'proper', 'type', 'in', 'Go.', 'The', 'trick', 'is', 'to', 'use', 'C.free', 'to', 'free', 'the', 'memory', 'allocated', 'from', 'C', 'side.', '//', 'convert', 'C', 'double', 'pointer', 'to', 'float64', 'slice', '...', 'func', 'doubleToFloats', '(', 'in', '*', 'C', '.', 'double', ',', 'size', 'int', ')', '[]', 'float64', '{', 'defer', 'C.free(unsafe.Pointer(in))', 'out', ':=', '(*[', '1', '<<', '30', ']', 'float64', ')(', 'unsafe.Pointer(in))', '[:', 'size', ':', 'size', ']', 'return', 'out', '}']"
682,36153205,"


As you can see in the last line, the IdentifierList is optional (but Type is required).
","['Because', 'there', 'is', 'no', 'implicit', 'identifier', 'denoting', 'the', 'actual', 'receiver', 'value', '(like', 'this', 'in', 'Java),', 'and', 'if', 'you', 'want', 'to', 'refer', 'to', 'the', 'fields', 'or', 'methods', 'of', 'the', 'receiver', 'value', '(Rectangle', 'value),', 'you', 'need', 'an', 'identifier', 'that', 'you', 'can', 'use.', 'Note', 'that', 'the', 'spec', 'does', 'not', 'require', 'you', 'to', 'name', 'the', 'receiver', 'value,', 'e.g.', 'the', 'following', 'using', 'the', 'blank', 'identifier', 'is', 'a', 'valid', 'syntax:', 'func', '(', '_', 'Rectangle', ')', 'Foo', '()', 'string', '{', 'return', '""foo""', '}', 'Or', 'even', 'this:', 'omitting', 'the', 'receiver', 'name', '(the', 'parameter', 'name):', 'func', '(', 'Rectangle', ')', 'Foo', '()', 'string', '{', 'return', '""foo""', '}', 'Relevant', 'section', 'from', 'the', 'spec:', 'Method', 'declarations:', 'MethodDecl', '=', '""func""', 'Receiver', 'MethodName', '(', 'Function', '|', 'Signature', ')', '.', 'Receiver', '=', 'Parameters', '.', 'Where', 'Parameters', 'is:', 'Parameters', '=', '""(""', '[', 'ParameterList', '[', '"",""', ']', ']', '"")""', '.', 'ParameterList', '=', 'ParameterDecl', '{', '"",""', 'ParameterDecl', '}', '.', 'ParameterDecl', '=', '[', 'IdentifierList', ']', '[', '""...""', ']', 'Type', '.', 'As', 'you', 'can', 'see', 'in', 'the', 'last', 'line,', 'the', 'IdentifierList', 'is', 'optional', '(but', 'Type', 'is', 'required).']"
683,36153664,"

As indicated by Icza, there is no implicit identifier like self or this, so the only way for the method to access the values of the struct is through the identifier r. 
","['Struct', 'methods', 'are', 'like', 'Class', 'methods.', 'The', 'variable', ""'r'"", 'is', 'a', 'reference', 'to', 'the', 'struct/class', 'instance/object', 'that', 'the', 'method', 'is', 'being', 'applied', 'to.', 'Without', 'that', 'reference,', 'you', 'will', 'not', 'be', 'able', 'to', 'access', 'whatever', 'is', 'contained', 'within', 'that', 'struct/object.', 'Lets', 'say', 'for', 'example,', 'I', 'created', 'smallRectangle', 'using', 'your', 'struct:', 'var', 'smallRectangle', '=', 'Rectangle', '{', '5', ',', '3', '}', 'Now', 'I', 'want', 'to', 'calculate', 'the', 'area', 'using', 'the', 'Rectangle', 'method', 'Area', 'area', ':=', 'smallRectangle.Area()', 'Lets', 'look', 'at', 'what', 'happens', 'within', 'the', 'function.', 'r', 'from', 'the', 'method', 'declaration', 'becomes', 'a', 'copy', 'of', 'smallRectangle', 'since', ""that's"", 'the', 'struct', 'object', 'calling', 'it.', 'func', '(', 'smallRectangle', 'Rectangle', ')', 'Area', '()', 'int', '{', 'return', 'smallRectangle', '.', 'length', '*', 'smallRectangle', '.', 'width', '}', 'As', 'indicated', 'by', 'Icza,', 'there', 'is', 'no', 'implicit', 'identifier', 'like', 'self', 'or', 'this,', 'so', 'the', 'only', 'way', 'for', 'the', 'method', 'to', 'access', 'the', 'values', 'of', 'the', 'struct', 'is', 'through', 'the', 'identifier', 'r.']"
684,36153952,"

You see your problem?
","['The', 'problem', 'is', 'that', 'your', 'first', 'assigning', 'i', 'to', '15', 'when', 'your', 'calling', 'closure1()', 'And', 'then', 'closure', 'two', 'you', 'print', 'it..', 'Your', 'doing', 'closure1()', 'after', 'assigning', 'i', 'to', '20..', 'Thats', 'the', 'problem,', 'this', 'should', 'fix', 'your', 'problem:', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'i', ':=', '10', 'closure1', ':=', 'func', '()', '{', 'fmt.Printf(""closure, i: %d\\n"", i)', 'i', '=', '15', '}', 'closure1', '()', 'fmt.Printf(""in main, i: %d\\n"", i)', 'closure2', ':=', 'func', '(', 'x', 'int', ')', '{', 'fmt.Printf(""function call, pass parameter, i: %d\\n"", x)', '}', 'closure1', '()', 'i', '=', '20', '// Now it assigns it back to 20.. So the result below will become 20...', 'closure2', '(', 'i', ')', '}', 'You', 'see', 'your', 'problem?']"
685,36158275,"The last line of closure1 sets i to 15.  This i belongs to the main() context.

The next to last line of main calls closure1() again.  So the i from main is set to 15 again.
","['The', 'last', 'line', 'of', 'closure1', 'sets', 'i', 'to', '15.', 'This', 'i', 'belongs', 'to', 'the', 'main()', 'context.', 'The', 'next', 'to', 'last', 'line', 'of', 'main', 'calls', 'closure1()', 'again.', 'So', 'the', 'i', 'from', 'main', 'is', 'set', 'to', '15', 'again.']"
686,36180479,"Perhaps you could put the setup code that you want to use from multiple unit test files into a separate package that only the unit tests use?

Or you could put the setup code into the normal package and just use it from the unit tests.

It's been asked before but the Go authors have chosen not to implicitly supply a test tag that could be used to selectively enable function compiles within the normal package files.
","['Perhaps', 'you', 'could', 'put', 'the', 'setup', 'code', 'that', 'you', 'want', 'to', 'use', 'from', 'multiple', 'unit', 'test', 'files', 'into', 'a', 'separate', 'package', 'that', 'only', 'the', 'unit', 'tests', 'use?', 'Or', 'you', 'could', 'put', 'the', 'setup', 'code', 'into', 'the', 'normal', 'package', 'and', 'just', 'use', 'it', 'from', 'the', 'unit', 'tests.', ""It's"", 'been', 'asked', 'before', 'but', 'the', 'Go', 'authors', 'have', 'chosen', 'not', 'to', 'implicitly', 'supply', 'a', 'test', 'tag', 'that', 'could', 'be', 'used', 'to', 'selectively', 'enable', 'function', 'compiles', 'within', 'the', 'normal', 'package', 'files.']"
687,36188366,".
","['Test', 'packages,', 'not', 'files!', 'Since', ""you're"", 'testing', 'handlers/endpoints', 'it', 'would', 'make', 'sense', 'to', 'put', 'all', 'your', '_test', 'files', 'in', 'either', 'the', 'handlers', 'or', 'the', 'router', 'package.', '(e.g.', 'one', 'file', 'per', 'endpoint/handler).', 'Also,', ""don't"", 'use', 'init()', 'to', 'setup', 'your', 'tests.', 'The', 'testing', 'package', 'specifies', 'a', 'function', 'with', 'the', 'following', 'signature:', 'func', 'TestMain', '(', 'm', '*', 'testing', '.', 'M', ')', 'The', 'generated', 'test', 'will', 'call', 'TestMain(m)', 'instead', 'of', 'running', 'the', 'tests', 'directly.', 'TestMain', 'runs', 'in', 'the', 'main', 'goroutine', 'and', 'can', 'do', 'whatever', 'setup', 'and', 'teardown', 'is', 'necessary', 'around', 'a', 'call', 'to', 'm.Run.', 'It', 'should', 'then', 'call', 'os.Exit', 'with', 'the', 'result', 'of', 'm.Run', 'Inside', 'the', 'TestMain', 'function', 'you', 'can', 'do', 'whatever', 'setup', 'you', 'need', 'in', 'order', 'to', 'run', 'your', 'tests.', 'If', 'you', 'have', 'global', 'variables,', 'this', 'is', 'the', 'place', 'to', 'declare', 'and', 'initialize', 'them.', 'You', 'only', 'need', 'to', 'do', 'this', 'once', 'per', 'package,', 'so', 'it', 'makes', 'sense', 'to', 'put', 'the', 'TestMain', 'code', 'in', 'a', 'seperate', '_test', 'file.', 'For', 'example:', 'package', 'router', 'import', '(', '""testing""', '""net/http/httptest""', ')', 'var', '(', 'testServer', '*', 'httptest', '.', 'Server', ')', 'func', 'TestMain', '(', 'm', '*', 'testing', '.', 'M', ')', '{', '//', 'setup', 'the', 'test', 'server', 'router', ':=', 'ConfigureRouter', '()', 'testServer', '=', 'httptest.NewServer(router)', '//', 'run', 'tests', 'os.Exit(m.Run())', '}', 'Finally', 'run', 'the', 'tests', 'with', 'go', 'test', 'my/package/router', '.']"
688,36200934,"You have one workspace and projects share the packages.

It's there in the overview section: 


  Go programmers typically keep all their Go code in a single workspace.
  
  Note that this differs from other programming environments in which every project has a separate workspace and workspaces are closely tied to version control repositories.


Edit: If you use vendoring, you can effectively get a separate workspace for each project. This brings things closer to how other programming languages work.
","['You', 'have', 'one', 'workspace', 'and', 'projects', 'share', 'the', 'packages.', ""It's"", 'there', 'in', 'the', 'overview', 'section:', 'Go', 'programmers', 'typically', 'keep', 'all', 'their', 'Go', 'code', 'in', 'a', 'single', 'workspace.', 'Note', 'that', 'this', 'differs', 'from', 'other', 'programming', 'environments', 'in', 'which', 'every', 'project', 'has', 'a', 'separate', 'workspace', 'and', 'workspaces', 'are', 'closely', 'tied', 'to', 'version', 'control', 'repositories.', 'Edit:', 'If', 'you', 'use', 'vendoring,', 'you', 'can', 'effectively', 'get', 'a', 'separate', 'workspace', 'for', 'each', 'project.', 'This', 'brings', 'things', 'closer', 'to', 'how', 'other', 'programming', 'languages', 'work.']"
689,36204611,"

This gives me a go workspace with its own bin, src, pkg subdirectories.  I can go get anything I want.  Later I can delete the whole temporary directory if I like.  Getting things from repositories like github.com has a tendency to get many packages from other contributors, but because it puts them all into a clean src subdirectory, it's easy to use find and see what has been pulled down.  And later it is even easier to remove everything from the hd again.
","['So', 'far,', 'I', 'use', 'different', 'workspaces', 'either', 'when', 'I', 'want', 'to', 'use', 'a', 'different', 'version', 'of', 'Go', 'or', 'I', 'want', 'to', 'separate', 'my', 'private', 'work', 'from', 'the', 'code', 'the', 'kids', 'and', 'I', 'have', 'fun', 'with.', 'Also', 'if', 'I', 'want', 'to', 'play', 'with', 'some', 'open', 'source', 'code', 'but', 'want', 'a', 'simple', 'way', 'of', 'cleaning', 'it', 'all', 'up', 'later.', 'Something', 'like', 'mk', '/tmp/tmpgo', 'cd', '/tmp/tmpgo', 'Copy', 'or', 'edit', 'a', 'setenv', 'file', '.', 'setenv', 'I', 'use', 'bash', 'The', 'setenv', 'file', 'looks', 'something', 'like', 'this.', 'export', 'GOROOT', '=$', 'HOME/go16', 'export', 'GOPATH', '=$', 'PWD', 'export', 'GOBIN', '=$', 'GOPATH/bin', 'export', 'PATH', '=$', 'GOROOT/bin:$GOPATH/bin:$PATH', 'export', 'PS1', '=', ""'\\[\\033[01;32m\\]workspacenamehere\\[\\033[01;33m\\] \\W\\[\\033[00m\\] '"", 'This', 'gives', 'me', 'a', 'go', 'workspace', 'with', 'its', 'own', 'bin,', 'src,', 'pkg', 'subdirectories.', 'I', 'can', 'go', 'get', 'anything', 'I', 'want.', 'Later', 'I', 'can', 'delete', 'the', 'whole', 'temporary', 'directory', 'if', 'I', 'like.', 'Getting', 'things', 'from', 'repositories', 'like', 'github.com', 'has', 'a', 'tendency', 'to', 'get', 'many', 'packages', 'from', 'other', 'contributors,', 'but', 'because', 'it', 'puts', 'them', 'all', 'into', 'a', 'clean', 'src', 'subdirectory,', ""it's"", 'easy', 'to', 'use', 'find', 'and', 'see', 'what', 'has', 'been', 'pulled', 'down.', 'And', 'later', 'it', 'is', 'even', 'easier', 'to', 'remove', 'everything', 'from', 'the', 'hd', 'again.']"
690,36296251,"Check out https://github.com/sendgrid/go-gmime (disclaimer, I work with SendGrid, but did not put together anything in the lib)
","['Check', 'out', 'https://github.com/sendgrid/go-gmime', '(disclaimer,', 'I', 'work', 'with', 'SendGrid,', 'but', 'did', 'not', 'put', 'together', 'anything', 'in', 'the', 'lib)']"
691,36299472,"You should generally never have to set $GOROOT unless you know why you're setting it.

This assumes a 'normal' installation of Go.  If you've moved the go binary around, or deleted pkg or src folders, your mileage may vary.

Also, make sure an older version of go is not found in your $PATH before the version you intend to use.

In this case @Bangash had to delete the old /usr/bin/go and add /usr/local/go/bin to his PATH environment variable.

Usually people use $GOROOT when switching between multiple versions of go.

Please read comments as well as chat for the solution.
","['This', 'gives', 'me', 'a', 'go', 'workspace', 'with', 'its', 'own', 'bin,', 'src,', 'pkg', 'subdirectories.', 'I', 'can', 'go', 'get', 'anything', 'I', 'want.', 'Later', 'I', 'can', 'delete', 'the', 'whole', 'temporary', 'directory', 'if', 'I', 'like.', 'Getting', 'things', 'from', 'repositories', 'like', 'github.com', 'has', 'a', 'tendency', 'to', 'get', 'many', 'packages', 'from', 'other', 'contributors,', 'but', 'because', 'it', 'puts', 'them', 'all', 'into', 'a', 'clean', 'src', 'subdirectory,', ""it's"", 'easy', 'to', 'use', 'find', 'and', 'see', 'what', 'has', 'been', 'pulled', 'down.', 'And', 'later', 'it', 'is', 'even', 'easier', 'to', 'remove', 'everything', 'from', 'the', 'hd', 'again.']"
692,36300055,".  You will find that there's an invalid character '{' after array element at offset 1685.

playground example
","['Check', 'and', 'handle', 'the', 'error', 'returned', 'from', 'json.Unmarshal([]byte(buff), &s)', '.', 'You', 'will', 'find', 'that', ""there's"", 'an', 'invalid', 'character', ""'{'"", 'after', 'array', 'element', 'at', 'offset', '1685.', 'playground', 'example']"
693,36309240,"

Playground: http://play.golang.org/p/OZsXT7pmtN

Obviously, you may want a different heuristic. I assumed that a line that is not indented and doesn't contain "":"", must be indented.
","['Given', 'that', 'the', 'message', 'is', 'malformed,', 'I', 'would', 'fix', 'it', 'through', 'a', 'separate', 'piece', 'of', 'code', 'that', 'reformats', 'the', 'message:', 'func', 'fixBrokenMime', '(', 'r_', 'io', '.', 'Reader', ',', 'w', 'io', '.', 'WriteCloser', ')', '{', 'r', ':=', 'bufio.NewScanner(bufio.NewReader(r_))', 'for', 'r.Scan()', '{', 'line', ':=', 'r.Text()', 'if', 'len', '(', 'line', ')', '>', '0', '&&', 'line', '[', '0', ']', '!=', ""' '"", '&&', ""strings.IndexByte(line, ':')"", '<', '0', '{', 'line', '=', '"" ""', '+', 'line', '}', 'w.Write([]byte(line+""\\n""))', '}', 'w.Close()', '}', 'Playground:', 'http://play.golang.org/p/OZsXT7pmtN', 'Obviously,', 'you', 'may', 'want', 'a', 'different', 'heuristic.', 'I', 'assumed', 'that', 'a', 'line', 'that', 'is', 'not', 'indented', 'and', ""doesn't"", 'contain', '"":"",', 'must', 'be', 'indented.']"
694,36322864,"
","['The', 'first', 'server', 'is', 'double', 'encoding', 'the', 'value.', 'The', 'result', 'is', 'a', 'string.', 'd', ',', '_', ':=', 'json.Marshal(c)', '// d is []byte containing the JSON', '...', 'encoder.Encode(d)', '// encoder writes base64 encoding of []byte as JSON string', 'Change', 'the', 'code', 'to:', 'conn', ',', 'err', ':=', 'net.Dial(""tcp"", ""127.0.0.1:8081"")', 'if', 'err', '!=', 'nil', '{', '//', 'handle', 'error', '}', 'encoder', ':=', 'json.NewEncoder(conn)', 'if', 'err', ':=', 'encoder.Encode(c)', ';', 'err', '!=', 'nil', '{', '//', 'handle', 'error', '}']"
695,36322866,"When you do encoder.Encode(d), you are encoding the marshaled result from previous step. So when you decode it back you don't get the go object, but a string.

Instead you can do, encoder.Encode(c). (Directly encode the object c).

This should help you understand: http://play.golang.org/p/qNxqOJcj_a
",[]
696,36328644," for that.
","['unsafe.Sizeof(&process)', 'returns', 'the', 'size', 'of', 'the', 'pointer', '—', 'the', 'address', 'of', 'the', 'memory', 'occupied', 'by', 'the', 'variable', 'process.', 'I', 'suppose', 'you', 'want', 'to', 'use', 'unsafe.Sizeof(process)', 'for', 'that.']"
697,36329704,"




use process.cb can't get use info.
","['_', ',', '_', ',', 'err', '=', 'GetProcessMemoryInfo.Call(uintptr(current), uintptr(unsafe.Pointer(&process)), uintptr(process.cb))', 'use', 'process.cb', ""can't"", 'get', 'use', 'info.']"
698,36342688,"

If that's not the problem (you are running it as stated above), then please update your question with more specifics such as what godep command you are running, where, and what that directorys structure looks like for the root of that project (including the filename with package main and your func main() function).
","['First,', 'what', 'is', 'the', 'output', 'of', 'this:', '$', 'echo', '$PATH', 'It', 'should,', 'at', 'a', 'minimal', 'to', 'run', 'Go', 'projects,', 'have', 'TWO', 'directories', 'in', 'it', 'for:', '/path/to/go/installation/bin', '(e.g.', '/usr/local/go/bin)', '/path/to/your/GOPATH/bin', '(e.g.', '/Users/denis/Programming/Golang', '/bin)', 'Your', ""go's"", 'installation', 'should', 'be', 'in', 'your', 'PATH', 'already', 'if', 'you', 'followed', 'the', 'Go', 'installation', 'setup.', 'https://golang.org/doc/install', 'Since', 'you', 'posted', '/Users/denis/Programming/Golang,', 'with', 'the', 'capital', 'U,', 'I', 'am', 'going', 'to', 'assume', 'that', 'you', 'are', 'on', 'OS', 'X', 'going', 'forward...', 'In', 'OS', 'X,', 'and', 'if', 'you', 'used', 'the', 'default', 'install,', 'you', 'can', 'test', 'for', 'Go', 'in', 'your', 'PATH', 'with', 'a', 'simple', 'command:', '$', 'echo', '$', 'PATH', '|', 'grep', '--', 'color', '=', 'auto', '""/usr/local/go/bin""', 'It', 'should', 'print', 'our', 'your', 'entire', '$PATH', 'and', 'highlight', 'that', 'you', 'have', 'things', 'setup', 'properly.', 'This', 'is', 'because', 'the', 'OS', 'X', 'GoLang', 'installer', 'in', 'the', 'URL', 'above', 'should', 'have', 'modified', 'your', 'PATH', 'to', 'include:', '/usr/local/go/bin', 'or', 'more', 'specifically,', 'it', 'may', 'be', 'export', 'PATH', '=', '""$PATH:/usr/local/go/bin""', 'If', 'you', 'have', 'some', 'custom', '.bashrc', 'and/or', '.profile', 'files,', 'then', 'most', 'likely', 'your', 'PATH', ""isn't"", 'being', 'setup', 'correctly.', 'You', 'can', 'test', 'this', 'by', 'doing', 'this:', '$', 'PATH', '=', '""$PATH:/usr/local/go/bin""', '$', 'PATH', '=', '""$PATH:/Users/denis/Programming/Golang/bin""', '$', 'go', 'dep', 'go', 'build', 'If', 'it', 'works', 'now,', 'then', 'your', 'PATH', ""isn't"", 'setup', 'properly', 'in', 'your', '.bashrc/.profile', 'files.', ""That's"", 'a', 'different', 'kind', 'of', 'question', 'and', 'can', 'be', 'setup', 'a', '1000', 'different', 'ways', 'and', 'you', 'may', 'need', 'to', 'figure', 'it', 'out', '(or', 'another', 'SO', 'question).', 'If', 'that', 'resolves', 'your', 'issue,', 'then', 'you', 'need', 'to', 'follow', 'the', 'godep', 'directions', 'to', 'run', 'godep', 'from', 'your', ""project's"", 'root:', '$', 'cd', '$', 'GOPATH/src/backend/', '$', 'go', 'dep', 'save', '$', 'git', 'add', 'Godeps', '/', 'godep', 'creates', 'a', 'Godeps', 'directory', 'in', 'the', 'root', 'of', 'the', 'Go', 'project.', 'If', 'you', 'have', 'multiple', 'Go', 'projects/multiple', 'executables,', 'then', 'you', 'need', 'to', 'run', 'godep', 'save', 'on', 'each', 'root', 'of', 'the', 'runtime.', 'IOW,', 'for', 'each', 'executable', 'you', 'run', 'go', 'build', 'for,', 'you', 'need', 'to', 'run', 'godep', 'save', 'in', 'each', 'directory.', 'Also,', 'once', 'you', 'move', 'to', 'godep,', 'you', 'want', 'to', 'use', 'it', 'for', 'your', 'build', 'and', 'testing', 'as', 'well:', '$', 'go', 'dep', 'go', 'build', '$', 'go', 'dep', 'go', 'test', '...', 'etc', 'If', ""that's"", 'not', 'the', 'problem', '(you', 'are', 'running', 'it', 'as', 'stated', 'above),', 'then', 'please', 'update', 'your', 'question', 'with', 'more', 'specifics', 'such', 'as', 'what', 'godep', 'command', 'you', 'are', 'running,', 'where,', 'and', 'what', 'that', 'directorys', 'structure', 'looks', 'like', 'for', 'the', 'root', 'of', 'that', 'project', '(including', 'the', 'filename', 'with', 'package', 'main', 'and', 'your', 'func', 'main()', 'function).']"
699,36344766,".
","[""That's"", 'not', 'a', 'compile', 'error,', 'you', 'are', 'getting', 'panic', ':', 'runtime', 'error', ':', 'index', 'out', 'of', 'range', 'If', 'the', 'slice', 'searchresponse', '.', 'Hits', '.', 'Hits', 'has', 'a', 'length', 'of', '0,', 'indexing', 'the', 'first', 'element', 'is', 'going', 'to', 'be', 'out', 'of', 'range', 'and', 'panic.', 'You', 'can', 'check', 'for', 'the', 'number', 'of', 'Hits', 'first', 'with', 'searchresponse', '.', 'Hits.Len()', '.']"
700,36347471,"




The results of the code run and I see a lot of gaps in the resource manager.Who can tell me Why?
","['package', 'main', 'import', '(', '""fmt""', '""syscall""', '""unsafe""', ')', 'const', '(', 'PROCESS_QUERY_INFORMATION', '=', '1', '<<', '10', 'PROCESS_VM_READ', '=', '1', '<<', '4', ')', 'type', 'PROCESS_MEMORY_COUNTERS', 'struct', '{', 'cb', 'uint32', 'PageFaultCount', 'uint32', 'PeakWorkingSetSize', 'uint64', 'WorkingSetSize', 'uint64', 'QuotaPeakPagedPoolUsage', 'uint64', 'QuotaPagedPoolUsage', 'uint64', 'QuotaPeakNonPagedPoolUsage', 'uint64', 'QuotaNonPagedPoolUsage', 'uint64', 'PagefileUsage', 'uint64', 'PeakPagefileUsage', 'uint64', '}', 'func', 'main', '()', '{', 'current', ',', 'err', ':=', 'syscall.OpenProcess(PROCESS_QUERY_INFORMATION|PROCESS_VM_READ, false, 21984)', 'defer', 'syscall.CloseHandle(current)', 'if', 'err', '!=', 'nil', '{', 'return', '}', 'psapi', ':=', 'syscall.NewLazyDLL(""psapi.dll"")', 'var', 'process', 'PROCESS_MEMORY_COUNTERS', 'process', '.', 'cb', '=', 'uint32', '(', 'unsafe.Sizeof((process)))', 'GetProcessMemoryInfo', ':=', 'psapi.NewProc(""GetProcessMemoryInfo"")', '_', ',', '_', ',', 'err', '=', 'GetProcessMemoryInfo.Call(uintptr(current), uintptr(unsafe.Pointer(&process)), uintptr(process.cb))', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'fmt.Println(""PageFaultCount: "", process.PageFaultCount)', 'fmt.Println(""PeakWorkingSetSize: "", process.PeakWorkingSetSize)', 'fmt.Println(""WorkingSetSize: "", process.WorkingSetSize)', 'fmt.Println(""QuotaPeakPagedPoolUsage: "", process.QuotaPeakPagedPoolUsage)', '}', 'The', 'results', 'of', 'the', 'code', 'run', 'and', 'I', 'see', 'a', 'lot', 'of', 'gaps', 'in', 'the', 'resource', 'manager.Who', 'can', 'tell', 'me', 'Why?']"
701,36365437,"The code is correct. The server https://hide.me is not a proxy server.
","['The', 'code', 'is', 'correct.', 'The', 'server', 'https://hide.me', 'is', 'not', 'a', 'proxy', 'server.']"
702,36403089,"

Update and lock the packages' versions. This creates glide.lock file in your project directory to lock the versions. 

$ glide up


I tried glide and been happily using it for my current project. 
","['Glide', 'is', 'a', 'really', 'elegant', 'package', 'management', 'for', 'Go', 'especially', 'if', 'you', 'come', 'from', ""Node's"", 'npm', 'or', ""Rust's"", 'cargo.', 'It', 'behaves', 'closely', 'to', ""Godep's"", 'new', 'vendor', 'feature', 'in', '1.6', 'but', 'is', 'way', 'more', 'easier.', 'Your', 'dependencies', 'and', 'versions', 'are', '""locked""', 'inside', 'your', 'projectdir/vendor', 'directory', 'without', 'relying', 'on', 'GOPATH.', 'Install', 'with', 'brew', '(OS', 'X)', '$', 'brew', 'install', 'glide', 'Init', 'the', 'glide.yaml', 'file', '(akin', 'to', 'package.json).', 'This', 'also', 'grabs', 'the', 'existing', 'imported', 'packages', 'in', 'your', 'project', 'from', 'GOPATH', 'and', 'copy', 'then', 'to', 'the', ""project's"", 'vendor/', 'directory.', '$', 'glide', 'init', 'Get', 'new', 'packages', '$', 'glide', 'get', 'vcs/namespace/package', 'Update', 'and', 'lock', 'the', ""packages'"", 'versions.', 'This', 'creates', 'glide.lock', 'file', 'in', 'your', 'project', 'directory', 'to', 'lock', 'the', 'versions.', '$', 'glide', 'up', 'I', 'tried', 'glide', 'and', 'been', 'happily', 'using', 'it', 'for', 'my', 'current', 'project.']"
703,36407524,"
","['you', 'need', 'to', 'define', 'the', 'app_history', 'variable', 'outside', 'the', 'if', 'statement', 'and', 'then', 'assign', 'to', 'it', 'in', 'each', 'of', 'the', 'branches', 'like', 'so', 'var', 'app_history', '&', 'models', '.', 'AppsHistoryInsert', '{}', 'if', 'x', '{', 'app_history', '=', '&', 'models', '.', 'AppsHistoryInsert', '{', 'AppId', ':', 'response', '.', 'SetAppData', '[', '0', '].', 'Id', ',', 'LiveDate', ':', '&', 'theTime', ',', '}', '}', 'else', '{', 'app_history', '=', '&', 'models', '.', 'AppsHistoryInsert', '{', 'AppId', ':', 'response', '.', 'SetAppData', '[', '0', '].', 'Id', ',', '}', '}']"
704,36489594,"

Example here http://play.golang.org/p/Ekd6Xf3miS
","['You', 'are', 'right', 'currently', ""it's"", 'impossible.', 'But', 'you', 'can', 'use', 'sub-structures', 'like', 'type', 'PriceType', 'struct', '{', 'Price', 'int', 'xml', ':', '""Price,attr""', 'Type', 'string', 'xml', ':', '""Type,attr""', '}', 'type', 'Book', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'xml', ':', '""DailyAct""', 'Symbol', 'string', 'xml', ':', '""TradeInstrId,attr""', 'EntityId', 'string', 'xml', ':', '""EntityId,attr""', 'AssetClass', 'string', 'xml', ':', '""AssetClass,attr""', 'Open', 'PriceType', 'xml', ':', '""Open""', 'High', 'PriceType', 'xml', ':', '""High""', 'Low', 'PriceType', 'xml', ':', '""Low""', 'Close', 'PriceType', 'xml', ':', '""Close""', '}', 'Example', 'here', 'http://play.golang.org/p/Ekd6Xf3miS']"
705,36526059,"If their package takes an actual *log.Logger, there's nothing you can do to inject your own logger other than set the output of a log.Logger to a custom writer where you intercept their log statements and you then re-log them through yours.

But that will be sub-awesome as you'd basically be parsing all their log statements just so you can re-log.   Not sure if log.Logger writes a log message as one call to Write.  if it does, it's easy as all you do is re-log for every call to Write.

You might also want to consider finding another library or forking and changing that library as nothing should really depend on log.Logger like that.
","['If', 'their', 'package', 'takes', 'an', 'actual', '*log.Logger,', ""there's"", 'nothing', 'you', 'can', 'do', 'to', 'inject', 'your', 'own', 'logger', 'other', 'than', 'set', 'the', 'output', 'of', 'a', 'log.Logger', 'to', 'a', 'custom', 'writer', 'where', 'you', 'intercept', 'their', 'log', 'statements', 'and', 'you', 'then', 're-log', 'them', 'through', 'yours.', 'But', 'that', 'will', 'be', 'sub-awesome', 'as', ""you'd"", 'basically', 'be', 'parsing', 'all', 'their', 'log', 'statements', 'just', 'so', 'you', 'can', 're-log.', 'Not', 'sure', 'if', 'log.Logger', 'writes', 'a', 'log', 'message', 'as', 'one', 'call', 'to', 'Write.', 'if', 'it', 'does,', ""it's"", 'easy', 'as', 'all', 'you', 'do', 'is', 're-log', 'for', 'every', 'call', 'to', 'Write.', 'You', 'might', 'also', 'want', 'to', 'consider', 'finding', 'another', 'library', 'or', 'forking', 'and', 'changing', 'that', 'library', 'as', 'nothing', 'should', 'really', 'depend', 'on', 'log.Logger', 'like', 'that.']"
706,36566412,"Since you mention a time period of days, of the two given, you should probably go with the second option.  This way you can store state to a file (or database) and restart the process if necessary.  The first option makes storing the state more difficult, but still possible.
","['Since', 'you', 'mention', 'a', 'time', 'period', 'of', 'days,', 'of', 'the', 'two', 'given,', 'you', 'should', 'probably', 'go', 'with', 'the', 'second', 'option.', 'This', 'way', 'you', 'can', 'store', 'state', 'to', 'a', 'file', '(or', 'database)', 'and', 'restart', 'the', 'process', 'if', 'necessary.', 'The', 'first', 'option', 'makes', 'storing', 'the', 'state', 'more', 'difficult,', 'but', 'still', 'possible.']"
707,36572467,"Nothing was leaked. The memory is still reachable and it's quite common to not free things on exit, it just takes unnecessary time and the OS will deal with it anyway.

This is memory allocated to thread local storage to a thread that's still running, so it would be incorrect to free it. A better question would be ""how do I stop this thread?"", to which an answer is: you don't, the Go runtime deals with it. It is quite common to not stop threads at exit, it just takes unnecessary time and the OS will deal with it anyway.

It has nothing to do with your code and your function call, it's something that Go runtime allocates for itself.

Go is a garbage collected language and using valgrind on it will not tell you much. It will neither detect real memory leaks nor will it understand which memory is still in use.
","['Nothing', 'was', 'leaked.', 'The', 'memory', 'is', 'still', 'reachable', 'and', ""it's"", 'quite', 'common', 'to', 'not', 'free', 'things', 'on', 'exit,', 'it', 'just', 'takes', 'unnecessary', 'time', 'and', 'the', 'OS', 'will', 'deal', 'with', 'it', 'anyway.', 'This', 'is', 'memory', 'allocated', 'to', 'thread', 'local', 'storage', 'to', 'a', 'thread', ""that's"", 'still', 'running,', 'so', 'it', 'would', 'be', 'incorrect', 'to', 'free', 'it.', 'A', 'better', 'question', 'would', 'be', '""how', 'do', 'I', 'stop', 'this', 'thread?"",', 'to', 'which', 'an', 'answer', 'is:', 'you', ""don't,"", 'the', 'Go', 'runtime', 'deals', 'with', 'it.', 'It', 'is', 'quite', 'common', 'to', 'not', 'stop', 'threads', 'at', 'exit,', 'it', 'just', 'takes', 'unnecessary', 'time', 'and', 'the', 'OS', 'will', 'deal', 'with', 'it', 'anyway.', 'It', 'has', 'nothing', 'to', 'do', 'with', 'your', 'code', 'and', 'your', 'function', 'call,', ""it's"", 'something', 'that', 'Go', 'runtime', 'allocates', 'for', 'itself.', 'Go', 'is', 'a', 'garbage', 'collected', 'language', 'and', 'using', 'valgrind', 'on', 'it', 'will', 'not', 'tell', 'you', 'much.', 'It', 'will', 'neither', 'detect', 'real', 'memory', 'leaks', 'nor', 'will', 'it', 'understand', 'which', 'memory', 'is', 'still', 'in', 'use.']"
708,36614587," instead.
","['You', ""didn't"", 'declare', 'your', 'function', 'correctly.', 'full_name', ':=', 'func', '()', 'string', '{', '// add a return type', 'return', 'first_name', '}', 'Even', 'for', 'an', 'anonymous', 'function,', 'arguments', 'and', 'return', 'values', 'must', 'be', 'declared.', 'Since', 'you', 'did', 'not', 'specify', 'any', 'return', 'value,', 'you', 'cannot', 'use', 'return', 'xx.', 'Also,', 'be', 'aware', 'that', 'fmt.Println(full_name)', 'will', 'return', 'the', 'address', 'of', 'the', 'function,', 'not', 'execute', 'the', 'function.', 'Try', 'fmt.Println(full_name())', 'instead.']"
709,36614590,"
","['You', 'need', 'to', 'change', 'your', 'function', 'definition', 'to', 'the', 'following:', 'full_name', ':=', 'func', '()', 'string', '{', 'return', 'first_name', '}', ""That's"", 'how', 'you', 'tell', 'Go', 'that', 'you', 'intend', 'to', 'return', 'something', 'from', 'a', 'function', 'and', 'what', 'that', 'something', 'is', '(a', 'string', 'in', 'this', 'case).', 'Then', 'later', 'you', 'should', 'call', 'your', 'newly', 'created', 'function', 'like', 'this:', 'fmt.Println(full_name())']"
710,36659185,"

Instead use this 

x := math.Add(6, 5)

","['And', 'when', 'calling', 'Add', 'in', 'your', 'main', 'function,', 'dont', 'use', 'this', 'x', ':=', 'math.Add(6 + 5)', 'Instead', 'use', 'this', 'x', ':=', 'math.Add(6,', '5)']"
711,36666114,"
","['The', 'testing', 'package', 'modifies', 'the', 'global', 'environment', 'when', 'loaded:', 'it', 'registers', 'a', 'lot', 'of', 'command-line', 'flags.', 'So,', 'we', 'can', 'check', 'if', 'these', 'flags', 'are', 'registered:', 'func', 'init', '()', '{', 'if', 'flag.Lookup(""test.v"")', '==', 'nil', '{', 'fmt.Println(""normal run"")', '}', 'else', '{', 'fmt.Println(""run under go test"")', '}', '}']"
712,36689864,"All your variables have a slice type. Slices have a backing array. In Go you can't access uninitialized variables. If you don't explicitly provide a value when you create a new variable, they will be initialized with the zero value of the variable's type.

This means when you create a slice with make([]int, 0, 5), it also creates a backing array, the backing array will be initialized with its zero value, and this zeroed array will be sliced. The zero value of an array type is an array having the zero value of element type for each of its elements.

So even though you didn't explicitly set every elements of the backing array to 0, they will be zeroed automatically. So when you do c := b[:2], it will slice the b slice, and c will have a length of 2, and those 2 elements will be 0.

And when you do d := c[2:5] that slices the c slice, its length will be 5-2 = 3, and its capacity will also be 5-2 = 3 because slicing a slice will result in a new slice which shares the same backing array, and the capacity will be the first element till the last of the backing array (unless you use a full slice expression which also controls the resulting slice's capacity).

Must-read blog posts for newcomers who want to understand slices and arrays:

The Go Blog: Go Slices: usage and internals

The Go Blog: Arrays, slices (and strings): The mechanics of 'append'
",[]
713,36696853,"

In the above example, you would test the DoSomething function and the branches that happens eg. you would create an instance of the mock with an error for one test case and create another instance of the mock without the error to test the other case. The respective cases are to test a certain string has been logged to standard out; in this case it would be ""error occurred"" when simpleMock is instantiated with an error and ""no error occurred"" when there simpleMock is not instantiated with an error. 

This can of course be expanded to other cases eg. the DoSomething function actually returns some kind of value and you want to make an assertion on the value. 

Edit:

I updated the code with the concern that the interface lives in another package. Note that the new updated code has a package a that contains the interface and the function under test and a package a_test that is merely a template of how to approach testing a.DoSomething.
","['As', 'a', 'general', 'guideline,', 'functions', ""aren't"", 'very', 'mockable', 'so', 'its', 'in', 'our', 'best', 'interests', 'to', 'mock', 'structs', 'that', 'implement', 'a', 'certain', 'interface', 'that', 'may', 'be', 'passed', 'into', 'functions', 'to', 'test', 'the', 'different', 'branches', 'of', 'code.', 'See', 'below', 'for', 'a', 'basic', 'example.', 'package', 'a', 'type', 'DoSomethingInterface', 'interface', '{', 'DoSomething', '()', 'error', '}', 'func', 'DoSomething', '(', 'a', 'DoSomethingInterface', ')', '{', 'if', 'err', ':=', 'a.DoSomething()', ';', 'err', '!=', 'nil', '{', 'fmt.Println(""error occurred"")', 'return', '}', 'fmt.Println(""no error occurred"")', 'return', '}', 'package', 'a_test', 'import', '(', '""testing""', '""/a""', ')', 'type', 'simpleMock', 'struct', '{', 'err', 'error', '}', 'func', '(', 'm', '*', 'simpleMock', ')', 'DoSomething', '()', 'error', '{', 'return', 'm', '.', 'err', '}', 'func', 'TestDoSomething', '(', 't', '*', 'testing', '.', 'T', ')', '{', 'errorMock', ':=', '&', 'simpleMock', '{', 'errors.New(""some error"")', '}', 'a.DoSomething(errorMock)', '//', 'test', 'that', '""an', 'error', 'occurred""', 'is', 'logged', 'regularMock', ':=', '&', 'simpleMock', '{}', 'a.DoSomething(regularMock)', '//', 'test', '""no', 'error', 'occurred""', 'is', 'logged', '}', 'In', 'the', 'above', 'example,', 'you', 'would', 'test', 'the', 'DoSomething', 'function', 'and', 'the', 'branches', 'that', 'happens', 'eg.', 'you', 'would', 'create', 'an', 'instance', 'of', 'the', 'mock', 'with', 'an', 'error', 'for', 'one', 'test', 'case', 'and', 'create', 'another', 'instance', 'of', 'the', 'mock', 'without', 'the', 'error', 'to', 'test', 'the', 'other', 'case.', 'The', 'respective', 'cases', 'are', 'to', 'test', 'a', 'certain', 'string', 'has', 'been', 'logged', 'to', 'standard', 'out;', 'in', 'this', 'case', 'it', 'would', 'be', '""error', 'occurred""', 'when', 'simpleMock', 'is', 'instantiated', 'with', 'an', 'error', 'and', '""no', 'error', 'occurred""', 'when', 'there', 'simpleMock', 'is', 'not', 'instantiated', 'with', 'an', 'error.', 'This', 'can', 'of', 'course', 'be', 'expanded', 'to', 'other', 'cases', 'eg.', 'the', 'DoSomething', 'function', 'actually', 'returns', 'some', 'kind', 'of', 'value', 'and', 'you', 'want', 'to', 'make', 'an', 'assertion', 'on', 'the', 'value.', 'Edit:', 'I', 'updated', 'the', 'code', 'with', 'the', 'concern', 'that', 'the', 'interface', 'lives', 'in', 'another', 'package.', 'Note', 'that', 'the', 'new', 'updated', 'code', 'has', 'a', 'package', 'a', 'that', 'contains', 'the', 'interface', 'and', 'the', 'function', 'under', 'test', 'and', 'a', 'package', 'a_test', 'that', 'is', 'merely', 'a', 'template', 'of', 'how', 'to', 'approach', 'testing', 'a.DoSomething.']"
714,36697143,"

Let me explain. Notice how in pack2_test.go, the first line says that the package is pack2. In a nutshell, this means that we're in the ""scope"" of the package pack2 and thus all the functions found in pack2 can be called as if you're within pack2. Thats why, within the Testf* functions, we could've called the functions from pack2. Another thing to note is the imported package ""testing"". This helps with two things:

First, it provides some functionality for running tests. I won't go into that.
Second, it helps identify the functions that go test should run. 

Now to the functions. Any function within a test package that has the prefix ""Test"" and the parameters ""t *testing.T"" (you can use ""*testing.T"" when you don't need to use the testing functionality) will be executed when you run  go test. You use the variable t to reference the testing functionality I mentioned. You can also declare functions without the prefix and call them within the prefixed functions.

So, if I go to my terminal and run go test, it will execute the functions you want to test, specified in pack2_test.go

You can learn more about testing here and here
","[""I'm"", 'not', 'sure', 'what', ""you're"", 'trying', 'to', 'do', 'here', 'but', ""I'll"", 'explain', 'how', 'testing', 'should', 'be', 'done', 'in', 'Go.', 'Lets', 'say', 'we', 'have', 'an', 'application', 'with', 'the', 'following', 'directory', 'hierarchy:', 'root', '/', 'pack1', '/', 'pack1', '.', 'go', 'pack1_test', '.', 'go', 'pack2', '/', 'pack2', '.', 'go', 'pack2_test', '.', 'go', 'main', '.', 'go', 'main_test', '.', 'go', ""We'll"", 'assume', 'that', 'pack2.go', 'has', 'the', 'functions', 'you', 'want', 'to', 'test:', 'package', 'pack2', 'func', 'f1', '()', 'error', '{', '...', '//some API call', '}', 'func', '(', 's', '*', 'SomeStruct', ')', 'f2', '()', 'error', '{', 'return', 'f1', '}', 'func', 'f3', '()', 'error', '{', 'return', 'nil', '}', 'func', 'f4', '()', 'error', '{', '...', 'err', '=', 'obj.f2()', '...', 'err', '=', 'f3', '()', '...', '}', 'Looks', 'good', 'so', 'far.', 'Now', 'if', 'you', 'want', 'to', 'test', 'the', 'functions', 'in', 'pack2,', 'you', 'would', 'create', 'a', 'file', 'called', 'pack2_test.go.', 'All', 'test', 'files', 'in', 'go', 'are', 'named', 'similarly', '(packagename_test.go).', 'Now', 'lets', 'see', 'the', 'inside', 'of', 'a', 'typical', 'test', 'for', 'a', 'package', '(pack2_test.go', 'in', 'this', 'example):', 'package', 'pack2', 'import', '(', '""testing""', '""fmt""', ')', 'TestF1', '(*', 'testing', '.', 'T', ')', '{', 'x', ':=', '""something for testing""', 'f1', '()', '// This tests f1 from the package ""pact2.go""', '}', 'TestF2', '(*', 'testing', '.', 'T', ')', '{', 'y', ':=', 'new', '(', 'somestruct', ')', 'y.f2()', '// tests f2 from package ""pact2.go""', '}', 'TestF3', '(*', 'testing', '.', 'T', ')', '{', '//', '/', 'some', 'code', 'f3', '()', '// tests f3', '}', 'TestF4', '(*', 'testing', '.', 'T', ')', '{', '//', '/', 'code', 'f3', '()', '// you get the gist', '}', 'Let', 'me', 'explain.', 'Notice', 'how', 'in', 'pack2_test.go,', 'the', 'first', 'line', 'says', 'that', 'the', 'package', 'is', 'pack2.', 'In', 'a', 'nutshell,', 'this', 'means', 'that', ""we're"", 'in', 'the', '""scope""', 'of', 'the', 'package', 'pack2', 'and', 'thus', 'all', 'the', 'functions', 'found', 'in', 'pack2', 'can', 'be', 'called', 'as', 'if', ""you're"", 'within', 'pack2.', 'Thats', 'why,', 'within', 'the', 'Testf*', 'functions,', 'we', ""could've"", 'called', 'the', 'functions', 'from', 'pack2.', 'Another', 'thing', 'to', 'note', 'is', 'the', 'imported', 'package', '""testing"".', 'This', 'helps', 'with', 'two', 'things:', 'First,', 'it', 'provides', 'some', 'functionality', 'for', 'running', 'tests.', 'I', ""won't"", 'go', 'into', 'that.', 'Second,', 'it', 'helps', 'identify', 'the', 'functions', 'that', 'go', 'test', 'should', 'run.', 'Now', 'to', 'the', 'functions.', 'Any', 'function', 'within', 'a', 'test', 'package', 'that', 'has', 'the', 'prefix', '""Test""', 'and', 'the', 'parameters', '""t', '*testing.T""', '(you', 'can', 'use', '""*testing.T""', 'when', 'you', ""don't"", 'need', 'to', 'use', 'the', 'testing', 'functionality)', 'will', 'be', 'executed', 'when', 'you', 'run', 'go', 'test.', 'You', 'use', 'the', 'variable', 't', 'to', 'reference', 'the', 'testing', 'functionality', 'I', 'mentioned.', 'You', 'can', 'also', 'declare', 'functions', 'without', 'the', 'prefix', 'and', 'call', 'them', 'within', 'the', 'prefixed', 'functions.', 'So,', 'if', 'I', 'go', 'to', 'my', 'terminal', 'and', 'run', 'go', 'test,', 'it', 'will', 'execute', 'the', 'functions', 'you', 'want', 'to', 'test,', 'specified', 'in', 'pack2_test.go', 'You', 'can', 'learn', 'more', 'about', 'testing', 'here', 'and', 'here']"
715,36729325,"

http://play.golang.org/p/LkeQOtc1Hd
","['The', '3', 'letter', 'month', 'constant', 'is', 'Jan', 'date', ':=', '""APR 19, 3:15p ET""', 'd', ',', 'err', ':=', 'time.Parse(""Jan 02, 3:04p ET"", date)', 'http://play.golang.org/p/LkeQOtc1Hd']"
716,36771170,"You have to install mingw-get and after that you can run ""mingw-get install make"" to have the command make. Here is a link for what you want http://www.mingw.org/wiki/getting_started
","['You', 'have', 'to', 'install', 'mingw-get', 'and', 'after', 'that', 'you', 'can', 'run', '""mingw-get', 'install', 'make""', 'to', 'have', 'the', 'command', 'make.', 'Here', 'is', 'a', 'link', 'for', 'what', 'you', 'want', 'http://www.mingw.org/wiki/getting_started']"
717,36800555,"
When you're done, RESTART your cmd or Bash(that's important) and you have your GOPATH set. To be sure run go env and you will see your value.

","['I', 'faced', 'with', 'the', 'same', 'problem.', 'However', 'i', 'set', 'everything', 'as', 'it', 'was', 'said', 'in', 'the', 'tutorial', 'but', 'forgot', 'to', 'restart', 'cmd.', 'So', 'the', 'steps', 'were:', 'Download', 'and', 'install', 'Go', 'distribution(the', 'GOROOT', 'variable', 'was', 'set', 'automatically)', 'Create', 'new', 'folder', 'wherever', 'you', 'like', 'for', 'your', 'workspace,', 'create', 'there', '3', 'directories:', 'bin,', 'src', 'and', 'pkg', 'Then', 'go', 'to', 'Control', 'Panel', '->', 'All', 'Control', 'Panel', 'Items', '->', 'System', '->', 'Advansed', 'System', 'Settings', '->', 'tab', 'Advanced', '->', 'Environment', 'Variables', '->', 'add', 'new', 'system', 'variable', 'by', 'clicking', 'New', 'on', 'System', 'varaibles', '->', 'Variable', 'name', '=', 'GOPATH,', 'Variable', 'value', '=', 'Your', ':', 'directory', 'that', 'you', 'created', 'When', ""you're"", 'done,', 'RESTART', 'your', 'cmd', 'or', ""Bash(that's"", 'important)', 'and', 'you', 'have', 'your', 'GOPATH', 'set.', 'To', 'be', 'sure', 'run', 'go', 'env', 'and', 'you', 'will', 'see', 'your', 'value.']"
718,36917148,"
","['In', 'order', 'to', 'be', 'able', 'to', 'get', 'the', 'elements', 'out', 'you', 'have', 'to', 'have', '""exported""', 'fields,', 'meaning', 'that', 'app_id', 'and', 'app_name', 'in', 'the', 'App', 'struct', 'should', 'start', 'with', 'a', 'capital', 'letter.', 'In', 'addition,', 'your', 'app_name', 'field', 'is', 'also', 'missing', 'a', ',attr', 'in', 'its', 'xml', 'field', 'tag.', 'See', 'below', 'for', 'a', 'working', 'example', 'of', 'your', 'code.', ""I've"", 'added', 'comments', 'on', 'the', 'lines', 'that', 'require', 'some', 'changes.', 'package', 'main', 'import', '(', '""fmt""', '""encoding/xml""', ')', 'func', 'main', '()', '{', 'data', ':=', 'type', 'App', 'struct', '{', 'App_id', 'string', 'xml', ':', '""app_id,attr""', '// notice the capitalized field name here', 'App_name', 'string', 'xml', ':', '""app_name,attr""', '// notice the capitalized field name here and the `xml:""app_name,attr""`', '}', 'type', 'AppList', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'xml', ':', '""applist""', 'Apps', '[]', 'App', 'xml', ':', '""app""', '}', 'var', 'portfolio', 'AppList', 'err', ':=', 'xml.Unmarshal([]byte(data), &portfolio)', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""error: %v"", err)', 'return', '}', 'fmt.Printf(""application ID:: %q\\n"", portfolio.Apps[0].App_id)', '// the corresponding changes here for App', 'fmt.Printf(""application name:: %q\\n"", portfolio.Apps[0].App_name)', '// the corresponding changes here for App', '}']"
719,36922225,"
","['For', 'anyone', 'else', 'looking', 'for', 'a', 'way', 'to', 'validate', 'any', 'JSON', 'string', 'regardless', 'of', 'schema,', 'try', 'the', 'following:', 'func', 'IsJSON', '(', 'str', 'string', ')', 'bool', '{', 'var', 'js', 'json', '.', 'RawMessage', 'return', 'json.Unmarshal([]byte(str), &js)', '==', 'nil', '}']"
720,36932024,"

https://play.golang.org/p/ZN27nGnUE9
","['The', 'issue', 'is', 'that', 'the', 'src', 'attribute', ""isn't"", 'treated', 'strictly', 'as', 'an', 'attribute,', 'but', 'as', 'a', 'URL.', 'If', 'you', 'change', 'it', 'from', 'a', 'string', 'to', 'a', 'template.URL', 'it', 'works', 'just', 'fine.', 'tplVars', ':=', 'map', '[', 'string', ']', 'interface', '{}{', '""Dog""', ':', 'template.URL(""cid:dog.png"")', ',', '""Cat""', ':', '""cid:cat.png""', ',', '}', 'https://play.golang.org/p/ZN27nGnUE9']"
721,36939646,"

Should be initiated once and referred to after that.
","['The', 'error', 'message', 'you', 'are', 'getting', 'is', 'a', 'PostgreSQL', 'error', 'and', 'not', 'GORM.', 'It', 'is', 'caused', 'as', 'you', 'are', 'opening', 'the', 'database', 'connection', 'more', 'than', 'once.', 'db', ',', 'err', ':=', 'go', 'rm.Open(""postgres"", ""user=gorm dbname=gorm"")', 'Should', 'be', 'initiated', 'once', 'and', 'referred', 'to', 'after', 'that.']"
722,36960703,"
","['Functions,', 'variables', ',', 'anything', 'coming', 'from', 'a', 'different', 'package', 'have', 'to', 'start', 'with', 'a', 'capital', 'letter', 'to', 'make', 'it', 'visible', 'for', 'when', 'importing', 'into', 'the', 'main', 'package.', 'example:', 'package', 'main', 'import', '""fmt""', 'import', '""other/out""', 'func', 'main', '(){', 'fmt.Println(out.X)', '//', 'hello', '}', 'package', 'other', 'var', 'X', 'string', '=', '""hi""']"
723,36973208,"
","['Have', 'the', 'service', 'have', 'an', 'internal', 'field', 'that', 'takes', 'a', 'pointer', 'to', 'the', 'db', 'and', 'use', 'that.', 'type', 'DBService', 'struct', '{', 'db', '*', 'sql', '.', 'DB', '}', 'func', '(', 'dbs', '*', 'DBService', ')', 'GetUserKey', '(', 'id', 'int64', ')', '(', 'key', 'string', ',', 'err', 'error', ')', 'dbs', '.', 'db.Query(""SOMETHING"")', 'return', '}', 'func', 'NewService', '(', 'db', '*', 'sql', '.', 'DB', ')', '*', 'DBService', '{', 'return', '&', 'DBService', '{', 'db', ':', 'db', '}', '}']"
724,37064603,"

Unfortunately it does mean that in a multhreaded C++ environment, all threads would go through a mutex to the map. But it is only a write lock when objects are created and destroyed, and for all method calls on an object it is a read lock.
","['The', 'way', 'I', 'ended', 'up', 'solving', 'this,', 'for', 'lack', 'of', 'a', 'better', 'solution,', 'was', 'to', 'use', 'private', 'global', 'maps', 'on', 'the', 'Go', 'side', '(ref).', 'These', 'maps', 'would', 'associate', 'instances', 'of', 'the', 'Go', 'objects', 'with', 'a', 'random', 'uint64', 'id,', 'and', 'the', 'id', 'would', 'be', 'returned', 'to', 'C++', 'as', 'an', '""opaque', 'handle"".', 'type', 'frameSetMap', 'struct', '{', 'lock', '*', 'sync', '.', 'RWMutex', 'm', 'map', '[', 'FrameSetId', ']*', 'frameSetRef', 'rand', 'idMaker', '}', '//', '...', 'func', '(', 'm', '*', 'frameSetMap', ')', 'Add', '(', 'fset', 'fileseq', '.', 'FrameSet', ')', 'FrameSetId', '{', '//', 'fmt.Printf(""frameset', 'Add', '%v', 'as', '%v\\n"",', 'fset.String(),', 'id)', 'm', '.', 'lock.Lock()', 'id', ':=', 'FrameSetId', '(', 'm', '.', 'rand.Uint64())', 'm', '.', 'm', '[', 'id', ']', '=', '&', 'frameSetRef', '{', 'fset', ',', '1', '}', 'm', '.', 'lock.Unlock()', 'return', 'id', '}', 'Then', 'I', 'use', 'reference', 'counting', 'to', 'determine', 'when', 'C++', 'no', 'longer', 'needs', 'the', 'object,', 'and', 'remove', 'it', 'from', 'the', 'map:', '//', 'Go', 'func', '(', 'm', '*', 'frameSetMap', ')', 'Incref', '(', 'id', 'FrameSetId', ')', '{', 'm', '.', 'lock.RLock()', 'ref', ',', 'ok', ':=', 'm', '.', 'm', '[', 'id', ']', 'm', '.', 'lock.RUnlock()', 'if', '!', 'ok', '{', 'return', '}', 'atomic.AddUint32(&ref.refs, 1)', '//', 'fmt.Printf(""Incref', '%v', 'to', '%d\\n"",', 'ref,', 'refs)', '}', 'func', '(', 'm', '*', 'frameSetMap', ')', 'Decref', '(', 'id', 'FrameSetId', ')', '{', 'm', '.', 'lock.RLock()', 'ref', ',', 'ok', ':=', 'm', '.', 'm', '[', 'id', ']', 'm', '.', 'lock.RUnlock()', 'if', '!', 'ok', '{', 'return', '}', 'refs', ':=', 'atomic.AddUint32(&ref.refs, ^uint32(0))', '//', 'fmt.Printf(""Decref', '%v', 'to', '%d\\n"",', 'ref,', 'refs)', 'if', 'refs', '!=', '0', '{', 'return', '}', 'm', '.', 'lock.Lock()', 'if', 'atomic.LoadUint32(&ref.refs)', '==', '0', '{', '//', 'fmt.Printf(""Deleting', '%v\\n"",', 'ref)', 'delete', '(', 'm', '.', 'm', ',', 'id', ')', '}', 'm', '.', 'lock.Unlock()', '}', '//', 'C++', 'FileSequence', '::', 'FileSequence', '()', '{', 'if', '(', 'm_valid', ')', '{', '//', 'std::cout', '<<', '""FileSequence', 'destroy', '""', '<<', 'm_id', '<<', 'std::endl;', 'm_valid', '=', 'false', ';', 'internal', '::', 'FileSequence_Decref', '(', 'm_id', ');', 'm_id', '=', '0', ';', 'm_fsetId', '=', '0', ';', '}', '}', 'And', 'all', 'C++', 'interactions', 'with', 'the', 'exported', 'Go', 'library', 'communicate', 'via', 'the', 'opaque', 'handle:', '//', 'C++', 'size_t', 'FileSequence', '::', 'length', '()', 'const', '{', 'return', 'internal', '::', 'FileSequence_Len', '(', 'm_id', ');', '}', 'Unfortunately', 'it', 'does', 'mean', 'that', 'in', 'a', 'multhreaded', 'C++', 'environment,', 'all', 'threads', 'would', 'go', 'through', 'a', 'mutex', 'to', 'the', 'map.', 'But', 'it', 'is', 'only', 'a', 'write', 'lock', 'when', 'objects', 'are', 'created', 'and', 'destroyed,', 'and', 'for', 'all', 'method', 'calls', 'on', 'an', 'object', 'it', 'is', 'a', 'read', 'lock.']"
725,37083273,"


Obviously the above doesn't apply exactly if bash isn't your default shell, but I trust that if you're a user of a different shell, you can grok what I am saying above and apply the same principles to your particular environment.
","['Okay', 'guys,', 'I', 'figured', 'out', 'the', 'problem.', 'https://github.com/joefitzgerald/go-plus/issues/386', 'here', 'it', 'has', 'been', 'discussed.', 'I', 'will', 'just', 'copy', 'it', 'from', 'that', 'Linux', 'folks,', 'particularly', 'those', 'running', 'Ubuntu.', 'I', 'believe', 'I', 'have', 'reproduced', 'your', 'issues', 'and', 'I', 'think', 'they', 'have', 'to', 'do', 'with', 'where', 'you', 'are', 'setting', 'your', 'GOPATH', 'and', 'PATH.', '~/.profile:', 'If', 'you', 'set', 'them', 'here,', '$GOPATH', 'will', 'be', 'set', 'in', 'Atom', 'when', 'you', 'launch', 'Atom', 'for', 'the', 'first', 'time', 'from', 'the', 'launcher', 'in', 'the', 'toolbar', '~/.bashrc', 'If', 'you', 'set', 'them', 'here,', '$GOPATH', 'will', 'be', 'set', 'in', 'Atom', 'when', 'you', 'launch', 'Atom', 'for', 'the', 'first', 'time', 'from', 'the', 'terminal', 'Thus,', 'to', 'ensure', 'GOPATH', 'and', 'PATH', 'are', 'set', 'correctly', 'regardless', 'of', 'how', 'you', 'launch', 'Atom,', 'you', 'should', 'put', 'the', 'following', '(or', 'similar)', 'in', 'both', '~/.profile', 'and', '~/.bashrc:', 'export', 'GOPATH', '=$', 'HOME/work', 'export', 'PATH', '=$', 'GOPATH/bin:/usr/local/go/bin:$PATH', 'Obviously', 'the', 'above', ""doesn't"", 'apply', 'exactly', 'if', 'bash', ""isn't"", 'your', 'default', 'shell,', 'but', 'I', 'trust', 'that', 'if', ""you're"", 'a', 'user', 'of', 'a', 'different', 'shell,', 'you', 'can', 'grok', 'what', 'I', 'am', 'saying', 'above', 'and', 'apply', 'the', 'same', 'principles', 'to', 'your', 'particular', 'environment.']"
726,37096297,"It stated on Golang http docs :


  For incoming requests, the Host header is promoted to the Request.Host
  field and removed from the Header map.


So you can get the host by access 


  http.Request.Host


Check here for details : https://golang.org/pkg/net/http/
","['It', 'stated', 'on', 'Golang', 'http', 'docs', ':', 'For', 'incoming', 'requests,', 'the', 'Host', 'header', 'is', 'promoted', 'to', 'the', 'Request.Host', 'field', 'and', 'removed', 'from', 'the', 'Header', 'map.', 'So', 'you', 'can', 'get', 'the', 'host', 'by', 'access', 'http.Request.Host', 'Check', 'here', 'for', 'details', ':', 'https://golang.org/pkg/net/http/']"
727,37114445,"

Unfortunately this does not seem to be possible. I then tried some other permutations including using interface{}, []interface{} as well as variadic functions and I couldn't get anything to work.

After doing some research it turns out that Go will not convert the type of slices. Even if each element of a slice is an instance of an interface such as Itemer or interface{} it still won't do it. I could not re-find the source but apparently This is due to the fact that a new slice would have to be created and each element would have to be type cast individually from the old slice to the new slice: https://stackoverflow.com/a/7975763/2325784.

To me this suggests that a function such as doSmth is not possible. 

The only thing I could suggest is to restructure the code. If you are willing to post more information about Foo and doSmth I can try to help with that.
","['Replace', '????', 'with', '[]Item:', 'Go', 'Playground.', 'It', 'is', 'just', 'the', 'same', 'as', 'how', 'that', 'variable', 'report.Items', 'is', 'defined', 'in', 'struct', 'Report.', 'Ok,', 'yes', 'that', 'does', 'change', 'the', 'question.', 'The', 'thing', 'I', 'thought', 'of', 'immediately', 'was', 'that', 'you', 'just', 'needed', 'to', 'create', 'an', 'interface', 'such', 'as', 'Itemer', 'and', 'have', '[]Itemer', 'in', 'the', 'function', 'definition', 'of', 'doSmth:', 'type', 'Itemer', 'interface', '{', 'Foo', '()', 'bool', '}', 'func', 'doSmth', '(', 'items', '[]', 'Itemer', ')', '{', '...', '}', 'Unfortunately', 'this', 'does', 'not', 'seem', 'to', 'be', 'possible.', 'I', 'then', 'tried', 'some', 'other', 'permutations', 'including', 'using', 'interface{},', '[]interface{}', 'as', 'well', 'as', 'variadic', 'functions', 'and', 'I', ""couldn't"", 'get', 'anything', 'to', 'work.', 'After', 'doing', 'some', 'research', 'it', 'turns', 'out', 'that', 'Go', 'will', 'not', 'convert', 'the', 'type', 'of', 'slices.', 'Even', 'if', 'each', 'element', 'of', 'a', 'slice', 'is', 'an', 'instance', 'of', 'an', 'interface', 'such', 'as', 'Itemer', 'or', 'interface{}', 'it', 'still', ""won't"", 'do', 'it.', 'I', 'could', 'not', 're-find', 'the', 'source', 'but', 'apparently', 'This', 'is', 'due', 'to', 'the', 'fact', 'that', 'a', 'new', 'slice', 'would', 'have', 'to', 'be', 'created', 'and', 'each', 'element', 'would', 'have', 'to', 'be', 'type', 'cast', 'individually', 'from', 'the', 'old', 'slice', 'to', 'the', 'new', 'slice:', 'https://stackoverflow.com/a/7975763/2325784.', 'To', 'me', 'this', 'suggests', 'that', 'a', 'function', 'such', 'as', 'doSmth', 'is', 'not', 'possible.', 'The', 'only', 'thing', 'I', 'could', 'suggest', 'is', 'to', 'restructure', 'the', 'code.', 'If', 'you', 'are', 'willing', 'to', 'post', 'more', 'information', 'about', 'Foo', 'and', 'doSmth', 'I', 'can', 'try', 'to', 'help', 'with', 'that.']"
728,37114487,"
","['You', 'need', 'to', 'use', 'variadic', 'function', 'for', 'this', 'scope:', 'func', 'main', '(){', '//', 'some', 'funcs', 'called', 'to', 'get', 'the', 'report', 'object', 'doSmth', '(', 'report', '.', 'Items', ')', '}', 'func', 'doSmth', '(', 'items', '...', 'report', '.', 'Items', '){', 'for', '_', ',', 'item', ':=', 'range', 'items', '{', 'item.Foo()', '}', '}']"
729,37115672,"
","['EDIT:', 'Nvm,', 'this', 'wont', 'work.', 'Forgot', 'about', 'the', 'fact', 'that', 'go', ""doesn't"", 'have', 'inheritance.', 'You', 'could', 'convert', 'the', 'array', 'into', 'a', 'slice,', 'and', 'make', 'the', 'function', 'take', 'a', 'slice', 'as', 'a', 'parameter', 'instead.', 'names', ':=', '[]', 'string', '{', '""leto""', ',', '""paul""', ',', '""teg""', '}', 'process', '(', 'names', '[:])', 'func', 'process', '(', 'names', '[]', 'string', ')', '{', '...', '}']"
730,37141582,"I put together a sample Kubernetes client in Go that allows to query the API version and make a sample NGINX deployment. Maybe it's helpful to you: https://github.com/timoreimann/kubernetes-goclient-example

Note that it doesn't use replication controllers (which, by the way, have been replaced by replica sets by now) but uses the newer Deployments API. I also don't feed in YAML files; instead, I define everything programmatically. Reading YAML files and unmarshalling them into Kubernetes structs should be a fairly straight-forward thing to do though.
","['I', 'put', 'together', 'a', 'sample', 'Kubernetes', 'client', 'in', 'Go', 'that', 'allows', 'to', 'query', 'the', 'API', 'version', 'and', 'make', 'a', 'sample', 'NGINX', 'deployment.', 'Maybe', ""it's"", 'helpful', 'to', 'you:', 'https://github.com/timoreimann/kubernetes-goclient-example', 'Note', 'that', 'it', ""doesn't"", 'use', 'replication', 'controllers', '(which,', 'by', 'the', 'way,', 'have', 'been', 'replaced', 'by', 'replica', 'sets', 'by', 'now)', 'but', 'uses', 'the', 'newer', 'Deployments', 'API.', 'I', 'also', ""don't"", 'feed', 'in', 'YAML', 'files;', 'instead,', 'I', 'define', 'everything', 'programmatically.', 'Reading', 'YAML', 'files', 'and', 'unmarshalling', 'them', 'into', 'Kubernetes', 'structs', 'should', 'be', 'a', 'fairly', 'straight-forward', 'thing', 'to', 'do', 'though.']"
731,37211133,"

I also suggest reading https://golang.org/doc/effective_go.html#channels, it's got some good stuff in there related to channels.
","['You', 'have', 'an', 'unbuffered', 'channel.', 'According', 'to', 'the', 'docs:', 'If', 'the', 'channel', 'is', 'unbuffered,', 'the', 'sender', 'blocks', 'until', 'the', 'receiver', 'has', 'received', 'the', 'value.', 'If', 'the', 'channel', 'has', 'a', 'buffer,', 'the', 'sender', 'blocks', 'only', 'until', 'the', 'value', 'has', 'been', 'copied', 'to', 'the', 'buffer', 'By', 'changing', 'the', 'channel', 'to', 'being', 'buffered,', 'we', 'can', 'avoid', 'deadlock.', 'c', ':=', 'make', '(', 'chan', 'int', ',', '10', ')', '// holds 10 ints', 'I', 'also', 'suggest', 'reading', 'https://golang.org/doc/effective_go.html#channels,', ""it's"", 'got', 'some', 'good', 'stuff', 'in', 'there', 'related', 'to', 'channels.']"
732,37211325,"

** see this answer for details
","['So,', 'lets', 'look', 'at', ""what's"", 'really', 'going', 'on', 'in', 'your', 'source.', 'You', 'have', 'two', 'goroutines', ""(there's"", 'more', 'than', 'two,', 'but', ""we're"", 'going', 'to', 'focus', 'on', 'the', 'explicit', 'ones),', 'main', 'and', 'readFromChannel.', 'Lets', 'look', 'at', 'what', 'readFromChannel', 'does:', 'if', 'chan', 'nel', 'c', 'is', 'not', 'empty', 'before', 'ti', 'has', 'expired', ',', 'print', 'its', 'contents', 'and', 'return', ',', 'after', 'signalling', 'its', 'completion', 'to', 'wait', 'group', '.', 'if', 'ti', 'has', 'expired', 'before', 'c', 'is', 'not', 'empty', ',', 'print', '""TIMED OUT""', 'and', 'return', ',', 'after', 'signalling', 'its', 'completion', 'to', 'wait', 'group', '.', 'now', 'Main:', 'adds', 'to', 'waitgroup', 'make', 'a', 'chan', 'nel', 'c', 'start', 'a', 'go', 'routine', 'readFromChannel', 'sleep', 'for', '5', 'seconds', 'send', '10', 'to', 'chan', 'nel', 'c', 'call', 'wait', 'for', 'waitgroup', 'Now,', 'lets', 'go', 'through', 'the', 'flow', 'of', 'execution', 'for', 'your', 'code,', 'concurrently', '(your', 'code', 'may/', 'may', 'not', 'execute', 'in', 'this', 'order', 'every', 'time,', 'keep', 'that', 'in', 'mind)', '1', ')', 'wg.Add(1)', '2', ')', 'c', ':=', 'make', '(', 'chan', 'int', ')', '3', ')', 'go', 'readFromChannel', '(', 'c', ',', 'time.After(time.Duration(2)*time.Second))', 'timer', 'ti', 'starts', '4', ')', 'time.Sleep(time.Duration(5) * time.Second)', 'MAIN', 'Goroutine', 'begins', 'sleep', 'timer', 'ti', 'expires', '5', ')', 'case', '<-', 'ti', ':', '6', ')', 'fmt.Println(""TIMED OUT"")', '7', ')', 'wg.Done()', 'readFromChannel', 'Goroutine', 'return', 's', 'MAIN', 'Goroutine', 'exits', 'sleep', '8', ')', 'c', '<-', '10', '9', ')', '......', 'DEADLOCK', 'Now', 'you', 'can', 'guess', 'why', 'you', 'got', 'a', 'deadlock.', 'In', 'go,', 'non', 'buffered', 'channels', 'will', 'block', 'until', 'something', 'happens', 'on', 'the', 'other', 'end', 'of', 'the', 'channel,', 'regardless', 'of', 'whether', ""you're"", 'sending', 'or', 'receiving.', 'So', 'c', 'will', 'block', 'until', 'something', 'reads', 'from', 'the', 'other', 'end', 'of', 'c,', 'but', 'the', 'goroutine', 'you', 'had', 'for', 'that', 'has', 'dropped', 'out', 'of', 'the', 'picture', '2', 'seconds', 'ago.', 'Therefore,', 'c', 'blocks', 'forever,', 'and', 'since', 'main', 'is', 'the', 'last', 'goroutine', 'left,', 'you', 'get', 'a', 'Deadlock.', 'How', 'to', 'prevent', 'it?', 'When', 'using', 'channels,', 'ensure', 'that', ""there's"", 'always', 'a', 'receive', 'at', 'the', 'other', 'end', 'of', 'the', 'channel', 'for', 'every', 'send.', 'You', 'can', 'also', 'use', 'a', 'buffered', 'channel,', 'but', 'in', 'your', 'code', 'above,', 'it', 'would', 'not', 'be', 'the', '""right""', 'solution.', ""Here's"", 'my', 'fix', 'for', 'the', 'deadlock:', 'func', 'main', '()', '{', 'wg.Add(1)', 'c', ':=', 'make', '(', 'chan', 'int', ')', 'go', 'readFromChannel', '(', 'c', ',', 'time.After(time.Duration(2)*time.Second))', 'time.Sleep(time.Duration(5) * time.Second)', 'c', '<-', '10', 'wg.Wait()', '}', 'func', 'readFromChannel', '(', 'c', 'chan', 'int', ',', 'ti', '<-', 'chan', 'time', '.', 'Time', ')', '{', '//', 'the', 'forloop', 'will', 'run', 'forever', 'loop', ':', '// **', 'for', '{', 'select', '{', 'case', 'x', ':=', '<-', 'c', ':', 'fmt.Println(""Read"", x)', 'break', 'loop', '// breaks out of the for loop and the select **', 'case', '<-', 'ti', ':', 'fmt.Println(""TIMED OUT"")', '}', '}', 'wg.Done()', '}', '**', 'see', 'this', 'answer', 'for', 'details']"
733,37211409,"

Getting the values out of different concurrently executing goroutines can be accomplished with the select keyword, which closely resembles the switch control statement and is sometimes called the communications switch.

Using a send operation in a select statement with a default case guarantees that the send will be non-blocking! If there are no cases, the select blocks execution forever.

https://play.golang.org/p/Ai1ggveb4s
","['Your', 'problem', 'is', 'that', 'you', 'are', 'using', 'select', 'statement', 'but', 'you', 'are', 'not', 'using', 'inside', 'a', 'goroutine.', 'go', 'func', '()', '{', 'for', '{', 'select', '{', 'case', 'x', ':=', '<-', 'c', ':', 'fmt.Println(""Read"", x)', 'case', '<-', 'ti', ':', 'fmt.Println(""TIMED OUT"")', '}', '}', '}()', 'Getting', 'the', 'values', 'out', 'of', 'different', 'concurrently', 'executing', 'goroutines', 'can', 'be', 'accomplished', 'with', 'the', 'select', 'keyword,', 'which', 'closely', 'resembles', 'the', 'switch', 'control', 'statement', 'and', 'is', 'sometimes', 'called', 'the', 'communications', 'switch.', 'Using', 'a', 'send', 'operation', 'in', 'a', 'select', 'statement', 'with', 'a', 'default', 'case', 'guarantees', 'that', 'the', 'send', 'will', 'be', 'non-blocking!', 'If', 'there', 'are', 'no', 'cases,', 'the', 'select', 'blocks', 'execution', 'forever.', 'https://play.golang.org/p/Ai1ggveb4s']"
734,37214476,"
","['Thank', 'you', 'Will', 'Charzuck', 'for', 'the', 'answer,', 'however,', 'it', 'did', 'not', 'work', 'for', 'me', 'unless', 'I', 'used', 'a', 'pointer', 'method', 'receiver,', 'and', 'set', 'the', 'value', 'of', 'the', 'pointer', 'in', 'the', 'function', 'body.', 'type', 'ConvertibleBoolean', 'bool', 'func', '(', 'bit', '*', 'ConvertibleBoolean', ')', 'UnmarshalJSON', '(', 'data', '[]', 'byte', ')', 'error', '{', 'asString', ':=', 'string', '(', 'data', ')', 'if', 'asString', '==', '""1""', '||', 'asString', '==', '""true""', '{', '*', 'bit', '=', 'true', '}', 'else', 'if', 'asString', '==', '""0""', '||', 'asString', '==', '""false""', '{', '*', 'bit', '=', 'false', '}', 'else', '{', 'return', 'errors.New(fmt.Sprintf(""Boolean unmarshal error: invalid input %s"", asString))', '}', 'return', 'nil', '}']"
735,37255140,"

Now add() has the same function type as fn in the parameters of WrapperFunc(), so your code will compile and run.

Output (try it on the Go Playground)

cool function
7


Notes:

Now lr parameter in add() is of type RequestBody and not LoginRequest. You may use it like a RequestBody, which is you may call its GetDescription() method. In WrapperFunc() you don't have to change anything, as LoginRequest implements RequestBody, so it is allowed to call fn() with a value of LoginRequest, and an interface value of type RequestBody will automatically, implicitly be created and passed to fn (which is add() in your case).

Note that in add() since parameter is now a RequestBody, you can't refer to fields of LoginRequest. You may if the value implementing the interface is indeed a value of type LoginRequest, in which case you may use type assertion to obtain the wrapped LoginRequest value should you need it.
","['The', 'problem', 'is', 'that', 'WrapperFunc()', 'expects', 'a', 'value', 'of', 'function', 'type:', 'func', '(', 'int', ',', 'int', ',', 'RequestBody', ')', 'int', 'And', 'you', 'try', 'to', 'pass', 'add', 'to', 'it', 'which', 'has', 'a', 'function', 'type:', 'func', '(', 'int', ',', 'int', ',', 'LoginRequest', ')', 'int', '2', 'function', 'types', 'are', 'equal', 'if', 'both', 'have', 'the', 'same', 'parameter', 'and', 'result', 'types.', 'This', 'does', 'not', 'hold', 'in', 'the', 'above', 'mentioned', '2', 'function', 'types:', 'RequestBody', 'and', 'LoginRequest', 'are', 'different', 'types,', 'and', 'so', 'function', 'types', 'having', 'these', 'as', '(or', 'among)', 'parameters', 'are', 'different', 'types.', 'You', 'may', 'only', 'pass', 'add', 'to', 'WrapperFunc()', 'if', 'you', 'change', 'its', 'parameters', 'to', 'match', 'the', 'required', 'type:', 'func', 'add', '(', 'a', ',', 'b', 'int', ',', 'lr', 'RequestBody', ')', 'int', '{', 'fmt.Println(lr.GetDescription())', 'return', 'a', '+', 'b', '}', 'Now', 'add()', 'has', 'the', 'same', 'function', 'type', 'as', 'fn', 'in', 'the', 'parameters', 'of', 'WrapperFunc(),', 'so', 'your', 'code', 'will', 'compile', 'and', 'run.', 'Output', '(try', 'it', 'on', 'the', 'Go', 'Playground)', 'cool', 'function', '7', 'Notes:', 'Now', 'lr', 'parameter', 'in', 'add()', 'is', 'of', 'type', 'RequestBody', 'and', 'not', 'LoginRequest.', 'You', 'may', 'use', 'it', 'like', 'a', 'RequestBody,', 'which', 'is', 'you', 'may', 'call', 'its', 'GetDescription()', 'method.', 'In', 'WrapperFunc()', 'you', ""don't"", 'have', 'to', 'change', 'anything,', 'as', 'LoginRequest', 'implements', 'RequestBody,', 'so', 'it', 'is', 'allowed', 'to', 'call', 'fn()', 'with', 'a', 'value', 'of', 'LoginRequest,', 'and', 'an', 'interface', 'value', 'of', 'type', 'RequestBody', 'will', 'automatically,', 'implicitly', 'be', 'created', 'and', 'passed', 'to', 'fn', '(which', 'is', 'add()', 'in', 'your', 'case).', 'Note', 'that', 'in', 'add()', 'since', 'parameter', 'is', 'now', 'a', 'RequestBody,', 'you', ""can't"", 'refer', 'to', 'fields', 'of', 'LoginRequest.', 'You', 'may', 'if', 'the', 'value', 'implementing', 'the', 'interface', 'is', 'indeed', 'a', 'value', 'of', 'type', 'LoginRequest,', 'in', 'which', 'case', 'you', 'may', 'use', 'type', 'assertion', 'to', 'obtain', 'the', 'wrapped', 'LoginRequest', 'value', 'should', 'you', 'need', 'it.']"
736,37279729,"The ExpectContinueTimeout field was added in Go 1.6. Upgrade your version of Go.
","['The', 'ExpectContinueTimeout', 'field', 'was', 'added', 'in', 'Go', '1.6.', 'Upgrade', 'your', 'version', 'of', 'Go.']"
737,37280167,"
","['You', 'need', 'to', 'specify', 'struct', 'tags', 'in', 'your', 'struct', 'definition:', 'type', 'Retailers', 'struct', '{', 'Id', 'int', 'json', ':', '""id""', 'Name', 'string', 'json', ':', '""name""', 'Products', '[]', 'Product', 'json', ':', '""products""', '}', 'type', 'Product', 'struct', '{', 'Id', 'int', 'json', ':', '""id""', 'Description', 'string', 'json', ':', '""description""', 'Url', 'string', 'json', ':', '""url""', '}']"
738,37292523,"
","['Some', 'background', 'First', ""let's"", 'clear', 'some', 'things', 'related', 'to', 'types.', 'Quoting', 'from', 'Spec:', 'Types:', 'A', 'type', 'determines', 'the', 'set', 'of', 'values', 'and', 'operations', 'specific', 'to', 'values', 'of', 'that', 'type.', 'Types', 'may', 'be', 'named', 'or', 'unnamed.', 'Named', 'types', 'are', 'specified', 'by', 'a', '(possibly', 'qualified)', 'type', 'name;', 'unnamed', 'types', 'are', 'specified', 'using', 'a', 'type', 'literal,', 'which', 'composes', 'a', 'new', 'type', 'from', 'existing', 'types.', 'So', 'there', 'are', '(predeclared)', 'named', 'types', 'such', 'as', 'string,', 'int', 'etc,', 'and', 'you', 'may', 'also', 'create', 'new', 'named', 'types', 'using', 'type', 'declarations', '(which', 'involves', 'the', 'type', 'keyword)', 'such', 'as', 'type', 'MyInt', 'int.', 'And', 'there', 'are', 'unnamed', 'types', 'which', 'are', 'the', 'result', 'of', 'a', 'type', 'literal', '(applied', 'to', '/', 'including', 'named', 'or', 'unnamed', 'types)', 'such', 'as', '[]int,', 'struct{i', 'int},', '*int', 'etc.', 'You', 'can', 'get', 'the', 'name', 'of', 'a', 'named', 'type', 'using', 'the', 'Type.Name()', 'method,', 'which', '""returns', 'an', 'empty', 'string', 'for', 'unnamed', 'types"":', 'var', 'i', 'int', '=', '2', 'fmt.Printf(""%q\\n"", reflect.TypeOf(""abc"").Name())', '// Named: ""string""', 'fmt.Printf(""%q\\n"", reflect.TypeOf(int(2)).Name())', '// Named: ""int""', 'fmt.Printf(""%q\\n"", reflect.TypeOf([]int{}).Name())', '// Unnamed: """"', 'fmt.Printf(""%q\\n"", reflect.TypeOf(struct{ i int }{}).Name())', '// Unnamed: """"', 'fmt.Printf(""%q\\n"", reflect.TypeOf(&struct{ i int }{}).Name())', '// Unnamed: """"', 'fmt.Printf(""%q\\n"", reflect.TypeOf(&i).Name())', '// Unnamed: """"', 'There', 'are', 'types', 'which', 'are', 'predeclared', 'and', 'are', 'ready', 'for', 'you', 'to', 'use', 'them', '(either', 'as-is,', 'or', 'in', 'type', 'literals):', 'Named', 'instances', 'of', 'the', 'boolean,', 'numeric,', 'and', 'string', 'types', 'are', 'predeclared.', 'Composite', 'types—array,', 'struct,', 'pointer,', 'function,', 'interface,', 'slice,', 'map,', 'and', 'channel', 'types—may', 'be', 'constructed', 'using', 'type', 'literals.', 'Predeclared', 'types', 'are:', 'bool', 'byte', 'complex64', 'complex128', 'error', 'float32', 'float64', 'int', 'int8', 'int16', 'int32', 'int64', 'rune', 'string', 'uint', 'uint8', 'uint16', 'uint32', 'uint64', 'uintptr', 'You', 'may', 'use', 'Type.PkgPath()', 'to', 'get', 'a', 'named', ""type's"", 'package', 'path,', 'which', '""if', 'the', 'type', 'was', 'predeclared', '(string,', 'error)', 'or', 'unnamed', '(*T,', 'struct{},', '[]int),', 'the', 'package', 'path', 'will', 'be', 'the', 'empty', 'string"":', 'fmt.Printf(""%q\\n"", reflect.TypeOf(""abc"").PkgPath())', '// Predeclared: """"', 'fmt.Printf(""%q\\n"", reflect.TypeOf(A{}).PkgPath())', '// Named: ""main""', 'fmt.Printf(""%q\\n"", reflect.TypeOf([]byte{}).PkgPath())', '// Unnamed: """"', 'So', 'you', 'have', '2', 'tools', 'available', 'to', 'you:', 'Type.Name()', 'to', 'tell', 'if', 'the', 'type', 'is', 'a', 'named', 'type,', 'and', 'Type.PkgPath()', 'to', 'tell', 'if', 'the', 'type', 'is', 'not', 'predeclared', 'and', 'is', 'a', 'named', 'type.', 'But', 'care', 'must', 'be', 'taken.', 'If', 'you', 'use', 'your', 'own,', 'named', 'type', 'in', 'a', 'type', 'literal', 'to', 'construct', 'a', 'new', 'type', '(e.g.', '[]A),', 'that', 'will', 'be', 'an', 'unnamed', 'type', '(if', 'you', ""don't"", 'use', 'the', 'type', 'keyword', 'to', 'construct', 'a', 'new,', 'named', 'type):', 'type', 'ASlice', '[]', 'A', 'fmt.Printf(""%q\\n"", reflect.TypeOf([]A{}).PkgPath())', '// Also unnamed: """"', 'fmt.Printf(""%q\\n"", reflect.TypeOf(ASlice{}).PkgPath())', '// Named: ""main""', 'What', 'can', 'you', 'do', 'in', 'such', 'cases?', 'You', 'may', 'use', 'Type.Elem()', 'to', 'get', 'the', ""type's"", 'element', 'type,', 'if', ""type's"", 'Kind', 'is', 'Array,', 'Chan,', 'Map,', 'Ptr,', 'or', 'Slice', '(else', 'Type.Elem()', 'panics):', 'fmt.Printf(""%q\\n"", reflect.TypeOf([]A{}).Elem().Name())', '// Element type: ""A""', 'fmt.Printf(""%q\\n"", reflect.TypeOf([]A{}).Elem().PkgPath())', '// Which is named, so: ""main""', 'Summary', 'Type.PkgPath()', 'can', 'be', 'used', 'to', '""filter', 'out""', 'predeclared', 'and', 'unnamed', 'types.', 'If', 'PkgPath()', 'returns', 'a', 'non-empty', 'string,', 'you', 'can', 'be', 'sure', ""it's"", 'a', '""custom""', 'type.', 'If', 'it', 'returns', 'an', 'empty', 'string,', 'it', 'still', 'may', 'be', 'an', 'unnamed', 'type', '(in', 'which', 'case', 'Type.Name()', 'returns', '"""")', 'constructed', 'from', 'a', '""custom""', 'type;', 'for', 'that', 'you', 'may', 'use', 'Type.Elem()', 'to', 'see', 'if', 'it', 'is', 'constructed', 'from', 'a', '""custom""', 'type,', 'which', 'may', 'have', 'to', 'be', 'applied', 'recursively:', '//', '[][]A', '->', 'Elem()', '->', '[]A', 'which', 'is', 'still', 'unnamed:', '""""', 'fmt.Printf(""%q\\n"", reflect.TypeOf([][]A{}).Elem().PkgPath())', '//', '[][]A', '->', 'Elem()', '->', '[]A', '->', 'Elem()', '->', 'A', 'which', 'is', 'named:', '""main""', 'fmt.Printf(""%q\\n"", reflect.TypeOf([][]A{}).Elem().Elem().PkgPath())', 'Try', 'all', 'the', 'examples', 'on', 'the', 'Go', 'Playground.', 'Special', 'case', '#1:', 'Anonymous', 'struct', 'types', 'There', 'is', 'also', 'the', 'case', 'of', 'an', 'anonymous', 'struct', 'type', 'which', 'is', 'unnamed,', 'but', 'it', 'may', 'have', 'a', 'field', 'of', 'a', '""custom""', 'type.', 'This', 'case', 'can', 'be', 'handled', 'by', 'iterating', 'over', 'the', 'fields', 'of', 'the', 'struct', 'type', 'and', 'performing', 'the', 'same', 'check', 'on', 'each', 'field,', 'and', 'if', 'any', 'of', 'them', 'is', 'found', 'to', 'be', 'a', '""custom""', 'type,', 'we', 'can', 'claim', 'the', 'whole', 'struct', 'type', 'to', 'be', '""custom"".', 'Special', 'case', '#2:', 'Map', 'types', 'In', 'case', 'of', 'maps', 'we', 'may', 'consider', 'an', 'unnamed', 'map', 'type', '""custom""', 'if', 'any', 'of', 'its', 'key', 'or', 'value', 'type', 'is', '""custom"".', 'The', 'value', 'type', 'of', 'a', 'map', 'can', 'be', 'queried', 'with', 'the', 'above', 'mentioned', 'Type.Elem()', 'method,', 'and', 'the', 'key', 'type', 'of', 'a', 'map', 'can', 'be', 'queried', 'with', 'the', 'Type.Key()', 'method', '-', 'we', 'also', 'have', 'to', 'check', 'this', 'in', 'case', 'of', 'maps.', 'Example', 'implementation', 'func', 'isCustom', '(', 't', 'reflect', '.', 'Type', ')', 'bool', '{', 'if', 't.PkgPath()', '!=', '""""', '{', 'return', 'true', '}', 'if', 'k', ':=', 't.Kind()', ';', 'k', '==', 'reflect', '.', 'Array', '||', 'k', '==', 'reflect', '.', 'Chan', '||', 'k', '==', 'reflect', '.', 'Map', '||', 'k', '==', 'reflect', '.', 'Ptr', '||', 'k', '==', 'reflect', '.', 'Slice', '{', 'return', 'isCustom', '(', 't.Elem()) || k == reflect.Map && isCustom(t.Key())', '}', 'else', 'if', 'k', '==', 'reflect', '.', 'Struct', '{', 'for', 'i', ':=', 't.NumField()', '-', '1', ';', 'i', '>=', '0', ';', 'i', '--', '{', 'if', 'isCustom', '(', 't.Field(i).Type)', '{', 'return', 'true', '}', '}', '}', 'return', 'false', '}', 'Testing', 'it', '(try', 'it', 'on', 'the', 'Go', 'Playground):', 'type', 'K', 'int', 'var', 'i', 'int', '=', '2', 'fmt.Println(isCustom(reflect.TypeOf("""")))', '// false', 'fmt.Println(isCustom(reflect.TypeOf(int(2))))', '// false', 'fmt.Println(isCustom(reflect.TypeOf([]int{})))', '// false', 'fmt.Println(isCustom(reflect.TypeOf(struct{ i int }{})))', '// false', 'fmt.Println(isCustom(reflect.TypeOf(&i)))', '// false', 'fmt.Println(isCustom(reflect.TypeOf(map[string]int{})))', '// false', 'fmt.Println(isCustom(reflect.TypeOf(A{})))', '// true', 'fmt.Println(isCustom(reflect.TypeOf(&A{})))', '// true', 'fmt.Println(isCustom(reflect.TypeOf([]A{})))', '// true', 'fmt.Println(isCustom(reflect.TypeOf([][]A{})))', '// true', 'fmt.Println(isCustom(reflect.TypeOf(struct{ a A }{})))', '// true', 'fmt.Println(isCustom(reflect.TypeOf(map[K]int{})))', '// true', 'fmt.Println(isCustom(reflect.TypeOf(map[string]K{})))', '// true']"
739,37366707,"
","['This', 'serve', 'all', 'files', 'inside', 'the', 'folder', 'flag,', 'as', 'well', 'as', 'serving', 'index.html', 'at', 'the', 'root.', 'Usage', '//', 'port', 'default', 'values', 'is', '8500', '//', 'folder', 'defaults', 'to', 'the', 'current', 'directory', 'go', 'run', 'main', '.', 'go', '//', 'your', 'case,', 'dont', 'forget', 'the', 'last', 'slash', 'go', 'run', 'main', '.', 'go', '-', 'folder', 'static', '/', '//', 'dont', 'go', 'run', 'main', '.', 'go', '-', 'folder', './', 'Code', 'package', 'main', 'import', '(', '""flag""', '""fmt""', '""net/http""', '""os""', '""strconv""', '""strings""', '""github.com/gorilla/handlers""', '""github.com/gorilla/mux""', '""github.com/kr/fs""', ')', 'func', 'main', '()', '{', 'mux', ':=', 'mux.NewRouter()', 'var', 'port', 'int', 'var', 'folder', 'string', 'flag.IntVar(&port, ""port"", 8500, ""help message for port"")', 'flag.StringVar(&folder, ""folder"", """", ""help message for folder"")', 'flag.Parse()', 'walker', ':=', 'fs.Walk(""./"" + folder)', 'for', 'walker.Step()', '{', 'var', 'www', 'string', 'if', 'err', ':=', 'walker.Err()', ';', 'err', '!=', 'nil', '{', 'fmt.Fprintln(os.Stderr, ""eroooooo"")', 'continue', '}', 'www', '=', 'walker.Path()', 'if', 'info', ',', 'err', ':=', 'os.Stat(www); err == nil && !info.IsDir()', '{', 'mux.HandleFunc(""/""+strings.Replace(www, folder, """", -1), func(w http.ResponseWriter, r *http.Request)', '{', 'http.ServeFile(w, r, www)', '})', '}', '}', 'mux.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request)', '{', 'http.ServeFile(w, r, folder+""index.html"")', '})', 'http.ListenAndServe("":""+strconv.Itoa(port), handlers.LoggingHandler(os.Stdout, mux))', '}']"
740,37368727,"You can compare the two strings (the one that won't work, and where you type the ""same"" string in manually) and you can see there's a difference. The string that doesn't work uses A0 (hex) non-breaking space, while the one that works uses the regular space 20 (hex).

You can see it in the playground: https://play.golang.org/p/6UIEKg9hs0
","['You', 'can', 'compare', 'the', 'two', 'strings', '(the', 'one', 'that', ""won't"", 'work,', 'and', 'where', 'you', 'type', 'the', '""same""', 'string', 'in', 'manually)', 'and', 'you', 'can', 'see', ""there's"", 'a', 'difference.', 'The', 'string', 'that', ""doesn't"", 'work', 'uses', 'A0', '(hex)', 'non-breaking', 'space,', 'while', 'the', 'one', 'that', 'works', 'uses', 'the', 'regular', 'space', '20', '(hex).', 'You', 'can', 'see', 'it', 'in', 'the', 'playground:', 'https://play.golang.org/p/6UIEKg9hs0']"
741,37405003,"

From documentation at https://golang.org/pkg/reflect/#StructTag,


  By convention, tag strings are a concatenation of optionally
  space-separated key:""value"" pairs.


So there should be no space between key and value. Different pairs of a key and a value could be separated by a space.
","['Remove', 'the', 'space', 'in', 'the', 'middle', 'of', 'tags.', 'Use', 'bson:""firstName""', 'instead', 'of', 'bson:', '""firstName""', 'type', 'Person', 'struct', '{', 'FirstName', 'string', 'bson', ':', '""firstName""', 'json', ':', '""firstName""', 'LastName', 'string', 'bson', ':', '""lastName json:""', 'lastName', '}', 'From', 'documentation', 'at', 'https://golang.org/pkg/reflect/#StructTag,', 'By', 'convention,', 'tag', 'strings', 'are', 'a', 'concatenation', 'of', 'optionally', 'space-separated', 'key:""value""', 'pairs.', 'So', 'there', 'should', 'be', 'no', 'space', 'between', 'key', 'and', 'value.', 'Different', 'pairs', 'of', 'a', 'key', 'and', 'a', 'value', 'could', 'be', 'separated', 'by', 'a', 'space.']"
742,37409084,"

A point about your code: look at how the export of fields and methods between package is done. Because all the fields and methods starting by a lowercase letter are not accessible outside of the package. You have to start them with an uppercase letter.

Another point: there are usually no getters and setters in Go code. If you want to read and write a struct field, simply start it with an uppercase letter.
","['To', 'get', 'information', 'about', 'a', 'struct', 'at', 'runtime,', 'you', 'have', 'to', 'use', 'the', 'package', 'reflect.', 'First,', 'get', 'the', 'type', 'of', 'the', 'struct,', 'and', 'then', 'you', 'can', 'iterate', 'through', 'it.', 'However,', 'with', 'your', 'example,', 'be', 'aware', 'that', 'the', 'type', 'main.Student', ""doesn't"", 'have', 'any', 'methods', 'associated,', 'but', 'the', 'type', '*main.Student', 'has.', 'Here', 'is', 'an', 'example', 'of', 'how', 'you', 'can', 'fetch', 'those', 'information:', 'func', 'main', '()', '{', 's', ':=', 'Student', '{', '1', ',', '""Jack""', ',', '22', '}', 't', ':=', 'reflect.TypeOf(s)', 'ptr_t', ':=', 'reflect.TypeOf(&s)', 'methods', ':=', 'make', '([]', 'string', ',', '0', ')', 'for', 'i', ':=', '0', ';', 'i', '<', 'ptr_t.NumMethod()', ';', 'i', '++', '{', 'methods', '=', 'append', '(', 'methods', ',', 'ptr_t.Method(i).Name)', '}', 'fields', ':=', 'make', '([]', 'string', ',', '0', ')', 'for', 'i', ':=', '0', ';', 'i', '<', 't.NumField()', ';', 'i', '++', '{', 'fields', '=', 'append', '(', 'fields', ',', 't.Field(i).Name)', '}', 'fmt.Println(methods)', '[', 'getAge', 'getId', 'getName', 'setAge', 'setId', 'setName', ']', 'fmt.Println(fields)', '[', 'id', 'name', 'age', ']', '}', 'A', 'point', 'about', 'your', 'code:', 'look', 'at', 'how', 'the', 'export', 'of', 'fields', 'and', 'methods', 'between', 'package', 'is', 'done.', 'Because', 'all', 'the', 'fields', 'and', 'methods', 'starting', 'by', 'a', 'lowercase', 'letter', 'are', 'not', 'accessible', 'outside', 'of', 'the', 'package.', 'You', 'have', 'to', 'start', 'them', 'with', 'an', 'uppercase', 'letter.', 'Another', 'point:', 'there', 'are', 'usually', 'no', 'getters', 'and', 'setters', 'in', 'Go', 'code.', 'If', 'you', 'want', 'to', 'read', 'and', 'write', 'a', 'struct', 'field,', 'simply', 'start', 'it', 'with', 'an', 'uppercase', 'letter.']"
743,37459588,"
","['There', 'is', 'json.RawMessage', 'for', 'this', 'purpose.', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', ')', 'type', 'Container', 'struct', '{', 'Type', 'string', 'Object', 'json', '.', 'RawMessage', '}', 'type', 'Selling', 'struct', '{', 'Surname', 'string', 'Firstname', 'string', 'Price', 'int', '}', 'type', 'Buying', 'struct', '{', 'ID', 'int', 'Surname', 'string', 'Firstname', 'string', '}', 'func', 'main', '()', '{', 'rawJson1', ':=', '[]', 'byte', '(', '{', '""Type""', ':', '""Selling""', ',', '""Object""', ':{', '""Surname""', ':', '""X""', ',', '""Firstname""', ':', '""Mister""', ',', '""Price""', ':', '10', '}}', ')', 'rawJson2', ':=', '[]', 'byte', '(', '{', '""Type""', ':', '""Buying""', ',', '""Object""', ':{', '""ID""', ':', '1', ',', '""Surname""', ':', '""X""', ',', '""Firstname""', ':', '""Mister""', '}}', ')', 'processMessage', '(', 'rawJson1', ')', 'processMessage', '(', 'rawJson2', ')', '}', 'func', 'processMessage', '(', 'data', '[]', 'byte', ')', '{', 'var', 'c', 'Container', 'json.Unmarshal(data, &c)', 'switch', '{', 'case', 'c', '.', 'Type', '==', '""Buying""', ':', 'processBuying', '(', 'c', ')', 'case', 'c', '.', 'Type', '==', '""Selling""', ':', 'processSelling', '(', 'c', ')', 'default', ':', 'fmt.Println(""bad entry"")', '}', '}', 'func', 'processBuying', '(', 'c', 'Container', ')', '{', 'var', 'bu', 'Buying', 'json.Unmarshal(c.Object, &bu)', 'fmt.Println(bu.Firstname, bu.Surname, ""wants to buy the following product:"", bu.ID)', '}', 'func', 'processSelling', '(', 'c', 'Container', ')', '{', 'var', 'se', 'Selling', 'json.Unmarshal(c.Object, &se)', 'fmt.Println(se.Firstname, se.Surname, ""wants to sell something for:"", se.Price)', '}']"
744,37459613,"

Then unmarshall in the type aware container. You could use a factory pattern to come with the right struct.
","['I', 'might', 'be', 'wrong,', 'but', 'I', ""don't"", 'think', 'you', 'can', 'do', 'it', 'in', 'one', 'step.', 'First', 'idea:', 'Unmarshal', 'in', 'map', '[', 'string', ']', 'interface', '{}', ""Don't"", 'use', 'type', 'with', 'unmarshal,', 'instead', 'use', 'a', 'map[string]interface{},', 'and', 'then', 'construct', 'Selling/Buying', 'from', 'this', 'map', '(or', 'use', 'directly', 'the', 'map)', 'type', 'Container', 'struct', '{', 'Type', 'string', 'Object', 'map', '[', 'string', ']', 'interface', '{}', '}', 'Second', 'idea:', 'Two', 'steps', '/', 'clueless', 'container', 'First:', 'Unmarshall', 'in', 'a', 'clueless', 'Container', 'that', ""doesn't"", 'know', 'the', 'type', 'type', 'CluelessContainer', 'struct', '{', 'Type', 'string', 'Object', 'interface', '{}', 'json', ':', '""-""', '// or just remove this line ?', '}', 'Then', 'unmarshall', 'in', 'the', 'type', 'aware', 'container.', 'You', 'could', 'use', 'a', 'factory', 'pattern', 'to', 'come', 'with', 'the', 'right', 'struct.']"
745,37503340,"

also see: Different Forms of For Loop
","['I', 'think', 'the', 'question', 'is', 'about', 'Different', 'Forms', 'of', 'For', 'Loop:', 'simple', 'loop', 'variants', 'working', 'sample:', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', '//', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'for', 'i', ':=', '0', ';', 'i', '<', '10', ';', 'i', '++', '{', 'fmt.Print(i, "" "")', '}', 'fmt.Println()', 'i', ':=', '0', 'for', ';', 'i', '<', '10', ';', 'i', '++', '{', 'fmt.Print(i, "" "")', '}', 'fmt.Println()', 'for', 'i', ':=', '0', ';', 'i', '<', '10', ';', '{', 'fmt.Print(i, "" "")', 'i', '++', '}', 'fmt.Println()', '//', '2', '4', '6', '8', '10', '12', '14', '16', '18', '20', 'for', 'i', ':=', '1', ';', ';', 'i', '++', '{', 'if', 'i', '&', '1', '==', '1', '{', 'continue', '}', 'if', 'i', '==', '22', '{', 'break', '}', 'fmt.Print(i, "" "")', '}', 'fmt.Println()', 'i', '=', '0', 'for', '{', 'fmt.Print(i, "" "")', 'i', '++', 'if', 'i', '==', '10', '{', 'break', '}', '}', 'fmt.Println()', 'for', 'i', ',', 'j', ':=', '0', ',', '0', ';', 'i', '<', '5', '&&', 'j', '<', '10', ';', 'i', ',', 'j', '=', 'i', '+', '1', ',', 'j', '+', '2', '{', 'fmt.Println(i, j)', '}', '}', 'for', 'array,', 'slice,string,', 'map,', 'channel', 'using', 'range', 'keyword:', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'ary', ':=', '[', '5', ']', 'int', '{', '0', ',', '1', ',', '2', ',', '3', ',', '4', '}', 'for', 'index', ',', 'value', ':=', 'range', 'ary', '{', 'fmt.Print(""ary["", index, ""] ="", value, "" "")', '}', 'fmt.Println()', 'for', 'index', ':=', 'range', 'ary', '{', 'fmt.Print(""ary["", index, ""] ="", ary[index], "" "")', '}', 'fmt.Println()', 'for', '_', ',', 'value', ':=', 'range', 'ary', '{', 'fmt.Print(value, "" "")', '}', 'fmt.Println()', 'slice', ':=', '[]', 'int', '{', '20', ',', '21', ',', '22', ',', '23', ',', '24', ',', '25', ',', '26', ',', '27', ',', '28', ',', '29', '}', 'for', 'index', ',', 'value', ':=', 'range', 'slice', '{', 'fmt.Println(""slice["", index, ""] ="", value)', '}', 'fmt.Println()', 'str', ':=', '""Hello""', 'for', 'index', ',', 'value', ':=', 'range', 'str', '{', 'fmt.Println(""str["", index, ""] ="", value)', '}', 'fmt.Println()', 'mp', ':=', 'map', '[', 'string', ']', 'int', '{', '""One""', ':', '1', ',', '""Two""', ':', '2', ',', '""Three""', ':', '3', '}', 'for', 'key', ',', 'value', ':=', 'range', 'mp', '{', 'fmt.Println(""map["", key, ""] ="", value)', '}', 'fmt.Println()', 'ch', ':=', 'make', '(', 'chan', 'int', ',', '10', ')', 'for', 'i', ':=', '0', ';', 'i', '<', '10', ';', 'i', '++', '{', 'ch', '<-', 'i', '}', 'close', '(', 'ch', ')', 'for', 'i', ':=', 'range', 'ch', '{', 'fmt.Print(i, "" "")', '}', 'fmt.Println()', '}', 'and', 'Label', 'for', 'break', 'Label', 'and', 'continue', 'Label:', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'a', ',', 'b', ':=', '1', ',', '1', 'Loop1', ':', 'for', '{', 'b', '++', 'Loop2', ':', 'for', '{', 'a', '++', 'switch', '{', 'case', 'a', '==', '2', ':', 'fallthrough', 'case', 'a', '==', '3', ':', 'fmt.Println(3)', 'case', 'a', '==', '4', ',', 'a', '==', '5', ':', 'continue', 'case', 'a', '==', '7', ':', 'continue', 'Loop1', 'case', 'a', '==', '9', ':', 'break', 'Loop2', 'case', 'a', '==', '10', ':', 'break', 'Loop1', 'case', 'a', '==', '8', ':', 'break', 'default', ':', 'fmt.Println(a, b)', '}', '}', '}', '}', 'also', 'see:', 'Different', 'Forms', 'of', 'For', 'Loop']"
746,37557884,"
","['You', 'have', 'a', 'type', 'mismatch', 'here.', 'If', 'you', 'look', 'at', 'the', 'documentation,', ""you'll"", 'see', 'that', 'the', 'field', 'Transport', 'of', 'the', 'Client', 'struct', 'returns', 'an', 'interface', 'RoundTripper:', 'type', 'Client', 'struct', '{', '//', 'Transport', 'specifies', 'the', 'mechanism', 'by', 'which', 'individual', '//', 'HTTP', 'requests', 'are', 'made.', '//', 'If', 'nil,', 'DefaultTransport', 'is', 'used.', 'Transport', 'RoundTripper', '//', '...', '}', 'So,', 'the', 'type', 'of', 'tmp1', 'is', 'http.RoundTripper,', 'though', 'the', 'underlying', 'type', 'is', '*http2.Transport', 'which', 'implements', 'the', 'RoundTripper', 'interface.', 'As', 'for', 'tmp2', 'and', 'tmp3,', 'they', 'are', 'seen', 'as', 'pointers', 'to', 'a', 'RoundTripper', 'and', 'not', 'as', '**http2.Transport.', 'In', 'order', 'to', 'retrieve', 'the', 'DialTLS', 'field,', 'you', 'have', 'to', 'use', 'type', 'assertions', 'to', 'convert', 'a', 'RoundTripper', 'back', 'into', 'a', 'Transport:', 'dialTLS', ':=', 'client', '.', 'Transport', '.(*', 'http2', '.', 'Transport', ').', 'DialTLS']"
747,37596328,"You don't appear to be parsing your file correctly.  You should first split on \n, THEN split on \t.  Also, verify your text file actually has \t and not spaces.

You should probably iterate through your parsed values with fmt.Println to verify your parsed results are as expected.

It should look something like this.
",[]
748,37614097,"Well, if you really want to hide the page by redirecting the user to another page, then you obviously cannot use this method, because anyone can turn javascript off and see the page, thus this can be a security risk. However, if you just simply want to redirect for some reason, this is fine.

As for you crawler, what you can do is search the source code with regex for redirections like that, but it can be very challenging to cover all cases.
","['Well,', 'if', 'you', 'really', 'want', 'to', 'hide', 'the', 'page', 'by', 'redirecting', 'the', 'user', 'to', 'another', 'page,', 'then', 'you', 'obviously', 'cannot', 'use', 'this', 'method,', 'because', 'anyone', 'can', 'turn', 'javascript', 'off', 'and', 'see', 'the', 'page,', 'thus', 'this', 'can', 'be', 'a', 'security', 'risk.', 'However,', 'if', 'you', 'just', 'simply', 'want', 'to', 'redirect', 'for', 'some', 'reason,', 'this', 'is', 'fine.', 'As', 'for', 'you', 'crawler,', 'what', 'you', 'can', 'do', 'is', 'search', 'the', 'source', 'code', 'with', 'regex', 'for', 'redirections', 'like', 'that,', 'but', 'it', 'can', 'be', 'very', 'challenging', 'to', 'cover', 'all', 'cases.']"
749,37657970,"
","['This', 'is', 'an', 'example', 'of', 'how', 'to', 'unmarshall', 'JSON', 'responses', 'from', 'the', 'Safebrowsing', 'v4', 'API', 'sbserver', 'proxy', 'server:', 'https://play.golang.org/p/4rGB5da0Lt', '//', 'this', 'example', 'shows', 'how', 'to', 'unmarshall', 'JSON', 'requests', 'from', 'the', 'Safebrowsing', 'v4', 'sbserver', 'package', 'main', 'import', '(', '""fmt""', '""log""', '""encoding/json""', ')', '//', 'response', 'from', 'sbserver', 'POST', 'request', 'type', 'Results', 'struct', '{', 'Matches', '[]', 'Match', '}', '//', 'nested', 'within', 'sbserver', 'response', 'type', 'Match', 'struct', '{', 'ThreatType', 'string', 'PlatformType', 'string', 'ThreatEntryType', 'string', 'Threat', 'struct', '{', 'URL', 'string', '}', '}', 'func', 'main', '()', '{', 'fmt.Println(""Hello, playground"")', '//', 'sample', 'POST', 'request', '//', 'curl', '-X', 'POST', '-H', ""'Content-Type:"", ""application/json'"", '//', '-d', '\'{""threatInfo"":', '{""threatEntries"":', '[{""url"":', '""http:testsafebrowsing.appspot.com/apiv4/ANY_PLATFORM/MALWARE/URL/""}]}}\'', '//', 'http:127.0.0.1:8080/v4/threatMatches:find', '//', 'sample', 'JSON', 'response', 'jsonResponse', ':=', '{', '""matches""', ':[{', '""threatType""', ':', '""MALWARE""', ',', '""platformType""', ':', '""ANY_PLATFORM""', ',', '""threatEntryType""', ':', '""URL""', ',', '""threat""', ':{', '""url""', ':', '""http://testsafebrowsing.appspot.com/apiv4/ANY_PLATFORM/MALWARE/URL/""', '}}]}', 'res', ':=', '&', 'Results', '{}', 'err', ':=', 'json.Unmarshal([]byte(jsonResponse), res)', 'if', '(', 'err', '!=', 'nil', ')', '{', 'log.Fatal(err)', '}', 'fmt.Printf(""%v\\n"",res)', 'fmt.Printf(""\\tThreat Type: %s\\n"",res.Matches[0].ThreatType)', 'fmt.Printf(""\\tPlatform Type: %s\\n"",res.Matches[0].PlatformType)', 'fmt.Printf(""\\tThreat Entry Type: %s\\n"",res.Matches[0].ThreatEntryType)', 'fmt.Printf(""\\tURL: %s\\n"",res.Matches[0].Threat.URL)', '}']"
750,37658851,"
","['You', 'can', 'use', '%s', 'to', 'printf:', 'for', '_', ',', 'hit', ':=', 'range', 'serachResult', '.', 'Hits', '.', 'Hits', '{', 'fmt.Printf(""%s\\n"", hit.Source)', '}']"
751,37734617,"

https://play.golang.org/p/wHW8KDgls9
","['Use', 'the', 'encoding/binary', 'package:', 'import', '(', '""encoding/binary""', ')', 'data', ':=', '[]', 'byte', '{', '0xB', '0', ',', '0x1B', '}', 'val', ':=', 'binary', '.', 'BigEndian.Uint16(data)', 'https://play.golang.org/p/wHW8KDgls9']"
752,37740198,"According to Go FAQ, you cannot change the type of slice directly.

So it seems that your solution is the preferred way.
","['According', 'to', 'Go', 'FAQ,', 'you', 'cannot', 'change', 'the', 'type', 'of', 'slice', 'directly.', 'So', 'it', 'seems', 'that', 'your', 'solution', 'is', 'the', 'preferred', 'way.']"
753,37742126,".

If that is not the case, I would create some helpers to go through and check to make sure the types are set to your needs. I have an example in the playground

https://play.golang.org/p/9OPgXGXADY
","['Is', 'getSomeValue()', 'your', 'function?', 'If', 'so,', 'I', 'would', 'change', 'the', 'return', 'type', 'to', 'be', 'map[string][]string', 'rather', 'than', 'map', '[', 'string', '][]', 'interface', '.', 'If', 'that', 'is', 'not', 'the', 'case,', 'I', 'would', 'create', 'some', 'helpers', 'to', 'go', 'through', 'and', 'check', 'to', 'make', 'sure', 'the', 'types', 'are', 'set', 'to', 'your', 'needs.', 'I', 'have', 'an', 'example', 'in', 'the', 'playground', 'https://play.golang.org/p/9OPgXGXADY']"
754,37759643,"This isn't a Golang specific question or answer but the best solution would be to compress the folder into an archive and have your users download that.
","['This', ""isn't"", 'a', 'Golang', 'specific', 'question', 'or', 'answer', 'but', 'the', 'best', 'solution', 'would', 'be', 'to', 'compress', 'the', 'folder', 'into', 'an', 'archive', 'and', 'have', 'your', 'users', 'download', 'that.']"
755,37759782,"
","['I', 'am', 'not', 'really', 'sure', 'what', 'are', 'you', 'trying', 'to', 'achive,', 'but', 'may', 'be', 'it', 'help.', 'bodyBytes', ',', 'err', ':=', 'ioutil.ReadAll(resp.Body)', 'reader', ':=', 'bytes.NewReader(bodyBytes)', 'http.Post(""https://httpbin.org/post"", ""application/json; charset=utf-8"", reader)', '//', 'or', 'you', 'can', 'do', 'it', 'directly', '//', 'http.Post(""https:httpbin.org/post"",', '""application/json;', 'charset=utf-8"",', 'resp.Body)']"
756,37832151,"Here is a thread that may interest you: Add runtime.Free() for GOGC=off

Interesting part:


  The Go GC does not have the ability to manually deallocate blocks 
  anymore. And besides, runtime. Free is unsafe (people might free still
  in use pointers or double free) and then all sorts of C memory problem
  that Go tries hard to get rid of will come back. The other reason is
  that runtime sometimes allocates behind your back and there is no way
  for the program to explicitly free memory.
  
  If you really want to manually manage memory with Go, implement your
  own memory allocator based on syscall.Mmap or cgo malloc/free.
  
  Disabling GC for extended period of time is generally a bad solution
  for a concurrent language like Go. And Go's GC will only be better
  down the road.


TL;DR: Yes, but don't do it
","['Here', 'is', 'a', 'thread', 'that', 'may', 'interest', 'you:', 'Add', 'runtime.Free()', 'for', 'GOGC=off', 'Interesting', 'part:', 'The', 'Go', 'GC', 'does', 'not', 'have', 'the', 'ability', 'to', 'manually', 'deallocate', 'blocks', 'anymore.', 'And', 'besides,', 'runtime.', 'Free', 'is', 'unsafe', '(people', 'might', 'free', 'still', 'in', 'use', 'pointers', 'or', 'double', 'free)', 'and', 'then', 'all', 'sorts', 'of', 'C', 'memory', 'problem', 'that', 'Go', 'tries', 'hard', 'to', 'get', 'rid', 'of', 'will', 'come', 'back.', 'The', 'other', 'reason', 'is', 'that', 'runtime', 'sometimes', 'allocates', 'behind', 'your', 'back', 'and', 'there', 'is', 'no', 'way', 'for', 'the', 'program', 'to', 'explicitly', 'free', 'memory.', 'If', 'you', 'really', 'want', 'to', 'manually', 'manage', 'memory', 'with', 'Go,', 'implement', 'your', 'own', 'memory', 'allocator', 'based', 'on', 'syscall.Mmap', 'or', 'cgo', 'malloc/free.', 'Disabling', 'GC', 'for', 'extended', 'period', 'of', 'time', 'is', 'generally', 'a', 'bad', 'solution', 'for', 'a', 'concurrent', 'language', 'like', 'Go.', 'And', ""Go's"", 'GC', 'will', 'only', 'be', 'better', 'down', 'the', 'road.', 'TL;DR:', 'Yes,', 'but', ""don't"", 'do', 'it']"
757,37881018,"


","['This', 'library', 'will', 'works', 'perfectly', 'with', 'firebase,', 'if', 'you', 'do', 'several', 'things:', 'Change', 'xmppHost', 'from', 'https://gcm-http.googleapis.com/gcm/send', 'to', 'https://fcm.googleapis.com/fcm/send', 'Add', 'new', 'const', 'xmppDomain', '=', '""gcm.googleapis.com""', 'Change', 'function', 'xmppUser,', 'it', 'should', 'be', 'like', 'func', 'xmppUser', '(', 'senderId', 'string', ')', 'string', '{', 'return', 'senderId', '+', '""@""', '+', 'xmppDomain', '}']"
758,37900615,"Handing io.EOF is part of the contract of using an io.Reader, and it indicates that there's nothing more to read. If you have read what you expected to read, there is no error. If you look at functions like ioutil.ReadAll, you'll see that it handles the EOF, and returns no error at the end of the stream. 

You may also consider not checking for ContentLength, as it precludes you from handing chunked responses. 
",[]
759,37903293,"

Double-check the To header you're sending and make sure it uses commas instead of semi-colons to separate multiple recipients.
","['I', 'was', 'able', 'to', 'reproduce', 'this', 'error', 'if', 'and', 'only', 'if', 'I', 'had', 'a', 'semi-colon', 'in', 'the', 'To', 'header', 'within', 'the', 'message', 'body.', 'E.g.:', 'msg', ':=', '[]', 'byte', '(', '""To: email1@example.com;email2@example.com\\r\\nSubject: foo\\r\\n\\r\\nbody\\r\\n""', ')', 'Double-check', 'the', 'To', 'header', ""you're"", 'sending', 'and', 'make', 'sure', 'it', 'uses', 'commas', 'instead', 'of', 'semi-colons', 'to', 'separate', 'multiple', 'recipients.']"
760,37922991,"The documentation states:


  Multiple goroutines may invoke methods on a Conn simultaneously.


There is no mention of whether each individual write is atomic. While the current implementation may ensure that each call to Write happens completely before the next call can begin, there is no guarantee in the language specification. 
","['Double-check', 'the', 'To', 'header', ""you're"", 'sending', 'and', 'make', 'sure', 'it', 'uses', 'commas', 'instead', 'of', 'semi-colons', 'to', 'separate', 'multiple', 'recipients.']"
761,37986398,"

(This depends on the parameter name of the Parse method (which can have a custom prefix), but I think that’s ok.)
","['No,', 'accessing', 'stack[1]', 'does', 'not', 'work', 'reliably.', 'It', 'doesn’t', 'contain', 'any', 'result', 'as', 'soon', 'as', 'the', 'stack', 'needs', 'to', 'grow', 'beyond', '16,', 'its', 'initial', 'size.', '(See', '#16163.)', 'The', 'if', 'statement', 'after', 'the', 'yystack', 'label', 'then', 'creates', 'a', 'new', 'stack', 'and', 'totally', 'forgets', 'about', 'the', 'one', 'saved', 'in', 'yyParserImpl.', 'I', 'did', 'the', 'following.', 'Add', 'a', 'result', 'field', 'to', 'the', 'lexer', 'type:', 'type', 'ShellLexer', 'struct', '{', '/*', '*/', 'result', '*', 'ShellProgram', '}', 'Extend', 'the', 'grammar', 'by', 'the', 'following', 'rule', 'at', 'the', 'very', 'beginning:', 'start', ':', 'program', '{', 'shyylex', '.(*', 'ShellLexer', ').', 'result', '=', '$$', '}', '(This', 'depends', 'on', 'the', 'parameter', 'name', 'of', 'the', 'Parse', 'method', '(which', 'can', 'have', 'a', 'custom', 'prefix),', 'but', 'I', 'think', 'that’s', 'ok.)']"
762,38010631,"The second solution handles the leak by using the quit channel. When the quit channel is closed (in Same() function), the case 2 of select statement succeeds(case 
","['The', 'second', 'solution', 'handles', 'the', 'leak', 'by', 'using', 'the', 'quit', 'channel.', 'When', 'the', 'quit', 'channel', 'is', 'closed', '(in', 'Same()', 'function),', 'the', 'case', '2', 'of', 'select', 'statement', 'succeeds(case']"
763,38017286,"

Note the uppercase on the field's name, in order to access a field it shall be exported, and thus starts with an upper case in the type declaration.
","['In', 'your', 'code,', 'since', 'you', ""didn't"", 'tell,', 'I', 'guess', 'the', 'variable', ""'d'"", 'is', 'passed', 'to', 'the', 'template.', ""'d'"", 'is', 'of', 'type', 'Daten', 'and', 'thus', 'contain', 'a', 'field', 'named', 'TableData.', 'This', 'field', 'is', 'a', 'slice', 'of', '*Tasks.', 'This', 'is', 'why', 'in', 'your', 'template', 'you', 'can', 'loop', 'on', 'it', 'using', 'range.', 'The', 'range', 'keyword', 'returns', 'two', 'values,', 'the', 'first', 'one,', ""'$key'"", 'in', 'your', 'code,', 'is', 'the', 'index', 'of', 'the', 'slice,', 'and', 'the', 'second', 'one,', ""'$values'"", 'in', 'your', 'code', 'is', 'the', 'value', 'pointed', 'by', 'TableData[$key].', 'Because', 'TableData', 'is', 'a', 'slice', 'of', 'type', '*Tasks,', 'that', 'means', '$values', 'is', 'of', 'type', '*Tasks.', 'So', 'not', 'an', 'array', 'nor', 'a', 'slice.', 'That', 'means,', 'you', ""can't"", 'loop', 'on', '$values', 'because', ""it's"", 'not', 'a', 'slice.', 'But,', 'you', 'can', 'access', 'all', 'the', 'exported', 'fields', 'of', 'Tasks.', 'So', 'depending', 'on', 'what', 'you', 'want', 'to', 'display', 'in', 'your', 'template,', 'you', 'can', 'do', 'the', 'following:', '//', 'Inside', 'the', 'firts', 'range', '{{', '$', 'key', '}}:', 'name', ':', '$', 'values', '.', 'Name', 'open', ':', '$', 'values', '.', 'Open', 'Note', 'the', 'uppercase', 'on', 'the', ""field's"", 'name,', 'in', 'order', 'to', 'access', 'a', 'field', 'it', 'shall', 'be', 'exported,', 'and', 'thus', 'starts', 'with', 'an', 'upper', 'case', 'in', 'the', 'type', 'declaration.']"
764,38079468,"

I usually put all my functions that are doing stuff with database in some helper (this is mostly because of tests). 

I think this is good directions because like this you code is easy to maintain and you will be changing only helper functions instead of going to million fictions that are doing add/delete/update for every model.  
","['I', 'can', 'see', 'you', 'have', 'a', 'lot', 'of', 'redundancy', 'in', 'your', 'code.', 'Few', 'months', 'back', 'I', 'had', 'a', 'same', 'problem', 'and', 'have', 'great', 'answer.', 'Take', 'a', 'look', 'at', 'here:', 'How', 'to', 'return', 'dynamic', 'type', 'struct', 'in', 'Golang?.', 'Basically', 'you', 'will', 'have', 'same', 'three', 'functions(add/edit/delete/count)', 'like', 'this', '(i', 'do', 'not', 'know', 'what', 'db', 'are', 'you', 'using', 'I', 'use', 'NoSql', 'Rethinkdb,', 'but', 'the', 'principle', 'is', 'same):', 'func', '(', 'c', 'Main', ')', 'Get', '(', 'modelname', 'string', ')', 'interface', '{}', '{', '//', 'your', 'query', 'here', 'for', 'getting', 'stuff', 'from', 'model', 'name', 'and', 'return', 'interface', 'rows', ',', 'err', ':=', 'rethink.Table(modelname).OrderBy(rethink.Asc(""sortNo"")).Run(c.DB)', 'if', 'err', '!=', 'nil', '{', 'log.Println(err)', 'return', 'nil', '}', 'if', '(', 'modelType', '==', '""brand""', ')', '{', 'var', 'brands', '[]*', 'models', '.', 'Brand', 'rows.All(&brands)', 'return', 'brands', '}', '//', 'rest', 'of', 'your', 'models', 'here', 'or', 'use', 'some', 'switch', '})', 'I', 'usually', 'put', 'all', 'my', 'functions', 'that', 'are', 'doing', 'stuff', 'with', 'database', 'in', 'some', 'helper', '(this', 'is', 'mostly', 'because', 'of', 'tests).', 'I', 'think', 'this', 'is', 'good', 'directions', 'because', 'like', 'this', 'you', 'code', 'is', 'easy', 'to', 'maintain', 'and', 'you', 'will', 'be', 'changing', 'only', 'helper', 'functions', 'instead', 'of', 'going', 'to', 'million', 'fictions', 'that', 'are', 'doing', 'add/delete/update', 'for', 'every', 'model.']"
765,38081337,"
","['I', 'implemented', 'this', 'idea', 'in', 'the', 'code.', 'It', 'turned', 'out', 'great.', 'Refactoring', 'code', '//', '------------------------------------------------------------------------', '//', 'REFACTORING', '//', '-----------------------------------------------------------------------', 'func', '(', 'd', '*', 'Database', ')', 'Create', '(', 'model', 'string', ',', 'params', 'interface', '{})', '*', 'Answer', '{', '//', 'variables', 'answer', ':=', 'd.initCall(""Create"")', 'tableType', ':=', 'd', '.', 'Mapper', '[', 'model', ']', 'var', '(', 'errorExists', 'interface', '{}', 'flag', 'bool', ')', '//', 'logic', 'switch', 'types', 'switch', 'tableType', '.(', 'type', ')', '{', 'case', 'User', ':', 'params', ':=', 'params', '.(', 'UserUpdate', ')', 'if', 'errorExists', '=', 'd', '.', 'DB.Find(&User{}, &User{Email:params.Email})', '.', 'Error', ';', 'errorExists', '==', 'nil', '{', 'flag', '=', 'false', '}', 'else', '{', 'flag', '=', 'true', '//', 'variables', 'user', ':=', 'new', '(', 'User', ')', 'userinfo', ':=', 'UserInfo', '{', 'Data', ':', 'time.Now()', '}', 'session', ':=', 'Session', '{', 'Data', ':', 'time.Now()', '}', 'cook', ':=', 'Cook', '{}', '//', 'make', 'support', 'tables', 'object', '//', 'userinfo', 'object', 'userinfo', '.', 'Password', '=', 'params', '.', 'Password', 'userinfo', '.', 'Username', '=', 'params', '.', 'Username', '//', 'cook', 'object', 'cook', '.', 'SessionID', '=', 'session', '.', 'ID', 'cook', '.', 'Cookie', '=', 'd.cookgeneratenew(""somesaltforcooksgenerate"")', 'cook', '.', 'Status', '=', 'true', 'cook', '.', 'Lastconnect', '=', 'time.Now()', 'cook', '.', 'CountConnect', '+=', '1', '//', 'user', 'object', 'user', '.', 'Email', '=', 'params', '.', 'Email', 'user', '.', 'Session', '=', 'session', 'user', '.', 'UserInfo', '=', 'userinfo', 'user', '.', 'Cook', '=', 'cook', 'user', '.', 'Role', '=', 'int64', '(', 'params', '.', 'Role', ')', '//', 'assign', 'ready', 'model', 'for', 'create', 'tableType', '=', 'user', '}', 'case', 'Category', ':', 'params', ':=', 'params', '.(', 'CategoryUpdate', ')', 'if', 'errorExists', '=', 'd', '.', 'DB.Find(&Category{}, &Category{Name:params.Name})', '.', 'Error', ';', 'errorExists', '==', 'nil', '{', '//', 'set', 'logic', 'switcher', 'flag', '=', 'false', '}', 'else', '{', '//', 'set', 'logic', 'switcher', 'flag', '=', 'true', '//', 'speciffic', 'functional', 'cat', ':=', 'new', '(', 'Category', ')', 'cat', '.', 'Name', '=', 'params', '.', 'Name', '//', 'assign', 'ready', 'model', 'for', 'create', 'tableType', '=', 'cat', '}', 'default', ':', 'fmt.Printf(""Wrong type table\\n"")', '}', '//', 'call', 'function', 'create', 'model', 'if', 'flag', '{', 'if', 'err', ':=', 'd', '.', 'DB.Create(tableType)', '.', 'Error', ';', 'err', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'err.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'tableType', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', '}', '}', 'else', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', '""object already exist""', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', '//', 'make', 'answer', 'd.serilize(answer)', 'return', 'answer', '}']"
766,38163481,"There's a certain edge case you are probably missing in your code. See https://getsatisfaction.com/codeeval/topics/bubble-sort-iterations-are-too-high-causing-solution-to-be-aborted-in-java
","[""There's"", 'a', 'certain', 'edge', 'case', 'you', 'are', 'probably', 'missing', 'in', 'your', 'code.', 'See', 'https://getsatisfaction.com/codeeval/topics/bubble-sort-iterations-are-too-high-causing-solution-to-be-aborted-in-java']"
767,38234154,"
","['You', 'need', 'to', 'write', 'one', 'yourself,', 'but', 'the', 'building', 'blocks', 'are', 'already', 'in', 'the', 'standard', 'library:', 'func', 'swapCase', '(', 's', 'string', ')', 'string', '{', 'return', 'strings.Map(func(r rune)', 'rune', '{', 'switch', '{', 'case', 'unicode.IsLower(r)', ':', 'return', 'unicode.ToUpper(r)', 'case', 'unicode.IsUpper(r)', ':', 'return', 'unicode.ToLower(r)', '}', 'return', 'r', '},', 's', ')', '}']"
768,38234237,"
","['but', 'in', 'case', 'I', 'would', 'like', 'to', 'get', 'the', 'output', 'in', 'realtime', 'One', 'way', 'to', 'do', 'that', 'is', 'to', 'attach', 'os.Stdout', 'to', 'cmd.Stdout', 'oCmd', ':=', 'exec.Command(bin, cmdArgs...)', 'oCmd', '.', 'Stdout', '=', 'os', '.', 'Stdout', 'oCmd', '.', 'Stderr', '=', 'os', '.', 'Stderr', 'err', ':=', 'oCmd.Run()', 'Then', 'you', 'can', 'use', 'a', 'File', 'instead', 'with', 'f', ',', '_', ':=', 'os.Create(""file"")', '.', 'If', 'you', 'want', 'to', 'write', 'it', 'to', 'both', 'a', 'file', 'and', 'to', 'the', 'terminal', 'at', 'same', 'time,', 'i', 'suspect', '(I', 'have', 'not', 'done', 'that', 'yet),', 'that', 'you', 'need', 'to', 'use', 'io.Mutiwriters', 'f', ',', '_', ':=', 'os.Create(""file"")', 'cmd', '.', 'Stdout', '=', 'io.MultiWriter(os.Stdout, f)']"
769,38253645,"

Note it works with different length arrays.  See https://play.golang.org/p/DRCI_CwSjA for a playground example.
","['You', 'can', 'do', 'this,', 'at', 'the', 'cost', 'of', 'creating', 'a', 'new', 'array', '(which', 'may', 'or', 'may', 'not', 'be', 'a', 'deal', 'breaker', 'for', 'you)', 'for', '_', ',', 'i', ':=', 'range', 'append', '([]', 'int', '{', '1', ',', '2', ',', '3', '},', '[]', 'int', '{', '4', ',', '5', ',', '6', ',', '7', '}...)', '{', 'fmt.Printf(""%v\\n"", i)', '}', 'Note', 'it', 'works', 'with', 'different', 'length', 'arrays.', 'See', 'https://play.golang.org/p/DRCI_CwSjA', 'for', 'a', 'playground', 'example.']"
770,38290806,"

In other words you could just use the map type, but having a helper function that clears our intention is good.
","['I', 'do', 'not', 'know', 'PHP,', 'but', 'as', 'far', 'as', 'I', 'understand', 'from', 'the', 'PHP', 'code', 'the', 'Go', 'equivalent', 'should', 'be:', 'func', 'compare', '(', 'keyword', 'string', ',', 'filters', 'map', '[', 'string', ']', 'struct', '{})', '(', 'string', ',', 'error', ')', '{', '//', 'value,', 'ok', ':=', 'myMap[key]', '//', 'this', 'is', 'Go', 'syntax', 'for', 'checking', 'the', 'existance', 'of', 'a', 'key', 'in', 'a', 'map', '-', 'check', 'the', 'ok', 'variable.', '_', ',', 'filterMatched', ':=', 'filters', '[', 'keyword', ']', 'if', 'filterMatched', '{', 'return', ',', 'fmt.Errorf(""keyword %s got filtered"", keyword)', '}', 'return', 'keyword', ',', 'nil', '}', 'In', 'other', 'words', 'you', 'could', 'just', 'use', 'the', 'map', 'type,', 'but', 'having', 'a', 'helper', 'function', 'that', 'clears', 'our', 'intention', 'is', 'good.']"
771,38295195,"

REG_BINARY values will looks like ""\x01\x00\x00...""
","['Maybe', 'someone', 'found', 'this', 'useful:', 'const', 'regKey', '=', 'SOFTWARE', 'Microsoft', 'Windows', 'NT', 'CurrentVersion', 'func', 'getSettingsFromRegistry', '()', '(', 'settings', 'map', '[', 'string', ']', 'string', ')', '{', 'settings', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'k', ',', 'err', ':=', 'registry.OpenKey(registry.LOCAL_MACHINE, regKey, registry.QUERY_VALUE)', 'if', 'err', '!=', 'nil', '{', 'self', '.', 'Log.Println(""Can\'t open registry key "" + regKey , err)', 'return', '}', 'defer', 'k.Close()', 'params', ',', 'err', ':=', 'k.ReadValueNames(0)', 'if', 'err', '!=', 'nil', '{', 'self', '.', 'Log.Printf(""Can\'t ReadSubKeyNames %s %#v"", psaConfRegistry32, err)', 'return', '}', 'for', '_', ',', 'param', ':=', 'range', 'params', '{', 'val', ',', 'err', ':=', 'getRegistryValueAsString', '(', 'k', ',', 'param', ')', 'if', 'err', '!=', 'nil', '{', 'self', '.', 'Log.Println(err)', 'return', '}', 'settings', '[', 'param', ']', '=', 'val', '}', 'self', '.', 'Log.Printf(""%#v\\n"", settings)', 'return', '}', 'func', 'getRegistryValueAsString', '(', 'key', 'registry', '.', 'Key', ',', 'subKey', 'string', ')', '(', 'string', ',', 'error', ')', '{', 'valString', ',', '_', ',', 'err', ':=', 'key.GetStringValue(subKey)', 'if', 'err', '==', 'nil', '{', 'return', 'valString', ',', 'nil', '}', 'valStrings', ',', '_', ',', 'err', ':=', 'key.GetStringsValue(subKey)', 'if', 'err', '==', 'nil', '{', 'return', 'strings.Join(valStrings, ""\\n"")', ',', 'nil', '}', 'valBinary', ',', '_', ',', 'err', ':=', 'key.GetBinaryValue(subKey)', 'if', 'err', '==', 'nil', '{', 'return', 'string', '(', 'valBinary', '),', 'nil', '}', 'valInteger', ',', '_', ',', 'err', ':=', 'key.GetIntegerValue(subKey)', 'if', 'err', '==', 'nil', '{', 'return', 'strconv.FormatUint(valInteger, 10)', ',', 'nil', '}', 'return', '""""', ',', 'errors.New(""Can\'t get type for sub key "" + subKey)', '}', 'REG_BINARY', 'values', 'will', 'looks', 'like', '""\\x01\\x00\\x00...""']"
772,38321944,"The problem is, that not every data could be marshaled to json (or unmarshaled). http.HandlerFunc is not a function (https://golang.org/pkg/net/http/#HandlerFunc). You cannot put it directly - but you can change handler to string and on the place when you trying to call it obtain HandlerFunc from reflect (a quite complicated) or from prepared map[string]HandlerFunc.
","['The', 'problem', 'is,', 'that', 'not', 'every', 'data', 'could', 'be', 'marshaled', 'to', 'json', '(or', 'unmarshaled).', 'http.HandlerFunc', 'is', 'not', 'a', 'function', '(https://golang.org/pkg/net/http/#HandlerFunc).', 'You', 'cannot', 'put', 'it', 'directly', '-', 'but', 'you', 'can', 'change', 'handler', 'to', 'string', 'and', 'on', 'the', 'place', 'when', 'you', 'trying', 'to', 'call', 'it', 'obtain', 'HandlerFunc', 'from', 'reflect', '(a', 'quite', 'complicated)', 'or', 'from', 'prepared', 'map[string]HandlerFunc.']"
773,38322054,"

then after unmarshalling your json you can assign the handler using the handlername of each route
","['The', 'simplest', 'solution', 'is', 'to', 'have', 'a', 'string', 'instead', 'of', 'the', 'http.HandlerFunc', 'as', 'type,', 'and', 'define', 'a', 'map', 'with', 'the', 'functions.', 'var', 'func', 'tions', '=', 'map', '[', 'string', ']', 'interface', '{}{', '""func1""', ':', 'func', '1', ',', '}', 'then', 'after', 'unmarshalling', 'your', 'json', 'you', 'can', 'assign', 'the', 'handler', 'using', 'the', 'handlername', 'of', 'each', 'route']"
774,38382115,"

This should fix the problem. Try opening a new terminal and echo $GOPATH you should see the correct value. 
","['For', 'MAC', 'this', 'worked', 'well', 'for', 'me.', 'sudo', 'nano', '/etc/bashrc', 'and', 'add', 'the', 'below', 'at', 'the', 'end', 'of', 'the', 'file', 'export', 'PATH', '=$', 'PATH', ':/', 'usr/local/opt/go/libexec/bin', 'export', 'GOPATH', '=/', 'usr/local/opt/go/bin', 'This', 'should', 'fix', 'the', 'problem.', 'Try', 'opening', 'a', 'new', 'terminal', 'and', 'echo', '$GOPATH', 'you', 'should', 'see', 'the', 'correct', 'value.']"
775,38387285,"

and see:
https://github.com/jasonlvhit/gocron
Golang - How to execute function at specific times
Golang: Implementing a cron / executing tasks at a specific time
","['So', 'you', 'need', 'Interval', 'Timer', 'to', 'run', 'one', 'function', 'at', 'noon', 'everyday,', 'you', 'may', 'use:', 'time.AfterFunc()', 'or', 'time.Tick()', 'or', 'time.Sleep()', 'or', 'time.Ticker', 'first', 'when', 'program', 'starts', 'calculate', 'time', 'interval', 'for', 'start', 'up', 'time', 'till', 'first', 'next', 'noon', 'and', 'use', 'some', 'wait', '(e.g.', 'time.Sleep', 'or', '...)', 'then', 'use', '24', '*', 'time.Hour', 'interval', 'for', 'the', 'next', 'interval.', 'sample', 'code', 'using', 'time.Sleep:', 'package', 'main', 'import', '""fmt""', 'import', '""time""', 'func', 'noonTask', '()', '{', 'fmt.Println(time.Now())', 'fmt.Println(""do some job."")', '}', 'func', 'initNoon', '()', '{', 't', ':=', 'time.Now()', 'n', ':=', 'time.Date(t.Year(), t.Month(), t.Day(), 12, 0, 0, 0, t.Location())', 'd', ':=', 'n.Sub(t)', 'if', 'd', '<', '0', '{', 'n', '=', 'n.Add(24 * time.Hour)', 'd', '=', 'n.Sub(t)', '}', 'for', '{', 'time.Sleep(d)', 'd', '=', '24', '*', 'time', '.', 'Hour', 'noonTask', '()', '}', '}', 'func', 'main', '()', '{', 'initNoon', '()', '}', 'and', 'you', 'may', 'change', 'main', 'to', 'this', '(or', 'any', 'thing', 'you', 'need):', 'func', 'main', '()', '{', 'go', 'initNoon', '()', '//', 'do', 'normal', 'task', 'here:', 'for', '{', 'fmt.Println(""do normal task here"")', 'time.Sleep(1 * time.Minute)', '}', '}', 'using', 'time.AfterFunc:', 'package', 'main', 'import', '(', '""fmt""', '""sync""', '""time""', ')', 'func', 'noonTask', '()', '{', 'fmt.Println(time.Now())', 'fmt.Println(""do some job."")', 'time.AfterFunc(duration(), noonTask)', '}', 'func', 'main', '()', '{', 'time.AfterFunc(duration(), noonTask)', 'wg.Add(1)', '//', 'do', 'normal', 'task', 'here', 'wg.Wait()', '}', 'func', 'duration', '()', 'time', '.', 'Duration', '{', 't', ':=', 'time.Now()', 'n', ':=', 'time.Date(t.Year(), t.Month(), t.Day(), 12, 0, 0, 0, t.Location())', 'if', 't.After(n)', '{', 'n', '=', 'n.Add(24 * time.Hour)', '}', 'd', ':=', 'n.Sub(t)', 'return', 'd', '}', 'var', 'wg', 'sync', '.', 'WaitGroup', 'using', 'time.Ticker:', 'package', 'main', 'import', '(', '""fmt""', '""sync""', '""time""', ')', 'var', 'ticker', '*', 'time', '.', 'Ticker', '=', 'nil', 'func', 'noonTask', '()', '{', 'if', 'ticker', '==', 'nil', '{', 'ticker', '=', 'time.NewTicker(24 * time.Hour)', '}', 'for', '{', 'fmt.Println(time.Now())', 'fmt.Println(""do some job."")', '<-', 'ticker', '.', 'C', '}', '}', 'func', 'main', '()', '{', 'time.AfterFunc(duration(), noonTask)', 'wg.Add(1)', '//', 'do', 'normal', 'task', 'here', 'wg.Wait()', '}', 'func', 'duration', '()', 'time', '.', 'Duration', '{', 't', ':=', 'time.Now()', 'n', ':=', 'time.Date(t.Year(), t.Month(), t.Day(), 12, 0, 0, 0, t.Location())', 'if', 't.After(n)', '{', 'n', '=', 'n.Add(24 * time.Hour)', '}', 'd', ':=', 'n.Sub(t)', 'return', 'd', '}', 'var', 'wg', 'sync', '.', 'WaitGroup', 'and', 'see:', 'https://github.com/jasonlvhit/gocron', 'Golang', '-', 'How', 'to', 'execute', 'function', 'at', 'specific', 'times', 'Golang:', 'Implementing', 'a', 'cron', '/', 'executing', 'tasks', 'at', 'a', 'specific', 'time']"
776,38420129,"
","['It', 'is', 'because', 'you', 'are', 'only', 'declaring', 'and', 'assigning', 'values', 'to', 'number.', 'You', 'are', 'never', 'actually', 'using', 'it', 'anywhere', '(i.e.', 'referring', 'to', 'the', 'value', 'it', 'holds', 'in', 'any', 'way).', 'In', 'you', 'code,', 'you', 'can', 'safely', 'remove', 'number', 'declaration', 'and', 'number', '=', 'x[0]', 'and', 'it', ""won't"", 'change', 'the', 'program', 'behavior.', 'The', 'correct', 'implementation', 'however', 'would', 'return', 'the', 'smallest', 'number', 'from', 'the', 'function:', 'package', 'main', 'import', '(', '""fmt""', ')', 'func', 'main', '()', '{', 'n', ':=', 'samlestNumber', '()', 'fmt.Println(""Smallest Number ="", n)', '}', 'func', 'samlestNumber', '()', 'int', '{', '// add a return type', 'x', ':=', '[]', 'int', '{', '48', ',', '96', ',', '86', ',', '68', ',', '57', ',', '82', ',', '63', ',', '70', ',', '37', ',', '34', ',', '83', ',', '27', ',', '19', ',', '97', ',', '9', ',', '17', ',', '}', '//', 'x', '=', 'append(x,6,7)', 'var', 'number', 'int', '=', 'x', '[', '0', ']', 'for', '_', ',', 'element', ':=', 'range', 'x', '{', '//', 'always', 'compare', 'to', 'smallest', 'number.', 'Even', 'if', 'you', ""don't"", 'return', '//', 'number', 'anymore,', 'you', 'are', 'still', 'accessing', 'the', 'value', 'held', 'by', '//', 'the', 'number', 'variable.', 'So', 'even', 'making', 'this', 'change', 'alone', 'will', '//', 'make', 'the', 'compiler', 'error', 'go', 'away', 'if', 'element', '<', 'number', '{', 'number', '=', 'element', '}', 'fmt.Println("" :::: "",element)', '}', 'return', 'number', '// return number', '}']"
777,38422879,"You need to close the channel after wg.Wait(). Otherwise your range for loop gets stuck.

Other than that your code looks fine.
",[]
778,38423953,"

Note that now the channel is unbuffered and the connect function doesn't know about the waitgroup or channel, so it is more reusable. You could use buffered channel too, if it turns out that the producers generate data more rapidly than the consumer reads it, but you probaly wouldn't need the buffer to be len(splitPorts) but something smaller.

Another optimisation could be to preallocate the results array as you seem to know the numer of results beforehand (len(splitPorts)) so you do not need to use append.
","['As', '@creker', 'wrote,', 'you', 'have', 'to', 'close', 'the', 'channel,', 'othervise', 'the', 'loop', 'which', 'reads', 'from', 'it', 'will', 'be', 'infinite', 'loop.', 'However,', 'I', 'do', 'not', 'agree', 'that', 'just', 'adding', 'close(ch)', 'after', 'the', 'wg.Wait()', 'is', 'right', 'way', 'to', 'go', '-', 'this', 'would', 'mean', 'that', 'the', 'loop', 'which', 'reads', 'the', 'values', 'from', 'the', 'channel', ""wouldn't"", 'start', 'until', 'all', 'ports', 'are', 'scanned', '(all', 'connect()', 'calls', 'return).', ""I'd"", 'say', 'you', 'want', 'to', 'start', 'proccessing', 'the', 'results', 'as', 'soon', 'as', 'they', 'are', 'available.', 'For', 'that', 'you', 'have', 'to', 'restructure', 'your', 'code', 'so', 'that', 'the', 'producer', 'and', 'consumer', 'are', 'different', 'goroutines,', 'something', 'like', 'following', 'var', 'results', '[]*', 'portscan', '.', 'ScanResult', 'ch', ':=', 'make', '(', 'chan', '*', 'portscan', '.', 'ScanResult', ')', '//', 'launch', 'the', 'producer', 'goroutine', 'go', 'func', '()', '{', 'var', 'wg', 'sync', '.', 'WaitGroup', 'wg.Add(len(splitPorts))', 'for', '_', ',', 'port', ':=', 'range', 'splitPorts', '{', 'go', 'func', '(', 'port', 'int32', ')', '{', 'defer', 'wg.Done()', 'ch', '<-', 'connect', '(', 'ip', ',', 'port', ',', 'req', '.', 'Timeout', ')', '}(', 'port', ')', '}', 'wg.Wait()', 'close', '(', 'ch', ')', '}()', '//', 'consume', 'results', 'for', 'elem', ':=', 'range', 'ch', '{', 'results', '=', 'append', '(', 'results', ',', 'elem', ')', '}', 'func', 'connect', '(', 'ip', 'string', ',', 'port', ',', 'timeout', 'int32', ')', '*', 'portscan', '.', 'ScanResult', '{', 'res', ':=', '&', 'portscan', '.', 'ScanResult', '{', 'Port', ':', 'port', ',', 'IsOpen', ':', 'false', ',', '}', 'conn', ',', 'err', ':=', 'net.DialTimeout(""tcp"", fmt.Sprintf(""%s:%d"", ip, port), time.Duration(timeout)*time.Millisecond)', 'if', 'err', '==', 'nil', '{', 'conn.Close()', 'res', '.', 'IsOpen', '=', 'true', '}', 'return', 'res', '}', 'Note', 'that', 'now', 'the', 'channel', 'is', 'unbuffered', 'and', 'the', 'connect', 'function', ""doesn't"", 'know', 'about', 'the', 'waitgroup', 'or', 'channel,', 'so', 'it', 'is', 'more', 'reusable.', 'You', 'could', 'use', 'buffered', 'channel', 'too,', 'if', 'it', 'turns', 'out', 'that', 'the', 'producers', 'generate', 'data', 'more', 'rapidly', 'than', 'the', 'consumer', 'reads', 'it,', 'but', 'you', 'probaly', ""wouldn't"", 'need', 'the', 'buffer', 'to', 'be', 'len(splitPorts)', 'but', 'something', 'smaller.', 'Another', 'optimisation', 'could', 'be', 'to', 'preallocate', 'the', 'results', 'array', 'as', 'you', 'seem', 'to', 'know', 'the', 'numer', 'of', 'results', 'beforehand', '(len(splitPorts))', 'so', 'you', 'do', 'not', 'need', 'to', 'use', 'append.']"
779,38465911,"

The output is a huge list of information and works in Linux only. As a next stel I have to find a way to extract the info I need which is the ESSID probably with strings.split package/function.
","['I', 'was', 'able', 'to', 'get', 'the', 'information', 'by', 'executing', 'a', 'Linux', 'command.', ""Here's"", 'the', 'piece', 'of', 'code:', 'iwlistCmd', ':=', 'exec.Command(""iwlist"", iface, ""scan"")', 'iwlistCmdOut', ',', 'err', ':=', 'iwlistCmd.Output()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err, ""Error when getting the interface information."")', '}', 'else', '{', 'fmt.Println(string(iwlistCmdOut))', '}', 'The', 'output', 'is', 'a', 'huge', 'list', 'of', 'information', 'and', 'works', 'in', 'Linux', 'only.', 'As', 'a', 'next', 'stel', 'I', 'have', 'to', 'find', 'a', 'way', 'to', 'extract', 'the', 'info', 'I', 'need', 'which', 'is', 'the', 'ESSID', 'probably', 'with', 'strings.split', 'package/function.']"
780,38499181,"

https://play.golang.org/p/HdwIssr-oC
","['Struct', 'values', 'encode', 'as', 'JSON', 'objects.', 'Each', 'exported', 'struct', 'field', 'becomes', 'a', 'member', 'of', 'the', 'object', 'unless', '-', 'the', 'field', 's', 'tag', 'is', '""-""', ',', 'or', '-', 'the', 'field', 'is', 'empty', 'and', 'its', 'tag', 'specifies', 'the', '""omitempty""', 'option', '.', 'The', 'empty', 'values', 'are', 'false,', '0,', 'any', 'nil', 'pointer', 'or', 'interface', 'value,', 'and', 'any', 'array,', 'slice,', 'map,', 'or', 'string', 'of', 'length', 'zero.', 'The', ""object's"", 'default', 'key', 'string', 'is', 'the', 'struct', 'field', 'name', 'but', 'can', 'be', 'specified', 'in', 'the', 'struct', ""field's"", 'tag', 'value.', 'The', '""json""', 'key', 'in', 'the', 'struct', ""field's"", 'tag', 'value', 'is', 'the', 'key', 'name,', 'followed', 'by', 'an', 'optional', 'comma', 'and', 'options.', 'Examples:', '//', 'Field', 'is', 'ignored', 'by', 'this', 'package.', 'Field', 'int', 'json', ':', '""-""', '//', 'Field', 'appears', 'in', 'JSON', 'as', 'key', '""myName"".', 'Field', 'int', 'json', ':', '""myName""', '//', 'Field', 'appears', 'in', 'JSON', 'as', 'key', '""myName""', 'and', '//', 'the', 'field', 'is', 'omitted', 'from', 'the', 'object', 'if', 'its', 'value', 'is', 'empty,', '//', 'as', 'defined', 'above.', 'Field', 'int', 'json', ':', '""myName,omitempty""', '//', 'Field', 'appears', 'in', 'JSON', 'as', 'key', '""Field""', '(the', 'default),', 'but', '//', 'the', 'field', 'is', 'skipped', 'if', 'empty.', '//', 'Note', 'the', 'leading', 'comma.', 'Field', 'int', 'json', ':', '"",omitempty""', 'So', 'your', 'code', 'should', 'be:', 'package', 'main', 'import', '""fmt""', 'import', '""encoding/json""', 'type', 'A', 'struct', '{', 'Name', 'string', 'json', ':', '""name""', 'Password', 'string', 'json', ':', '""password""', '}', 'type', 'B', 'struct', '{', 'A', 'Password', 'string', 'json', ':', '""password,omitempty""', 'Locale', 'string', 'json', ':', '""locale""', '}', 'func', 'main', '()', '{', 'a', ':=', 'A', '{', '""Jim""', ',', '""some_secret_password""', '}', 'b', ':=', 'B', '{', 'A', ':', 'a', ',', 'Locale', ':', '""en""', '}', 'data', ',', '_', ':=', 'json.Marshal(&b)', 'fmt.Printf(""%v"", string(data))', '}', 'https://play.golang.org/p/HdwIssr-oC']"
781,38543982,"


  Bounds Checking Elimination (or BCE) is a general term for removing
  redundant bound checking. Normally a go program will panic when a
  slice or a string is accessed outside of its bounds. There are two
  types of bound checking: for indexing (a[i]) and for slicing (a[i:j]).
  The go compiler inserts these bounds checks at every access, but in
  most cases they are not needed and are redundant based on the context.
  
  Bound checking is important because it provides a defense against
  buffer overflow attacks and catches a common programming error early.
  BCE is important because: it speeds up the code, makes the binary
  smaller. If binaries are slowed down by bound checks then developers
  will have an incentive to disable bound checking (using -gcflags=-B).  


ref 
","['The', 'capacity', 'growth', 'is', 'not', 'under', 'user', 'control:', 'append', '(', 's', 'S', ',', 'x', '...', 'T', ')', 'S', '// T is the element type of S ', 'If', 'the', 'capacity', 'of', 's', 'is', 'not', 'large', 'enough', 'to', 'fit', 'the', 'additional', 'values,', 'append', 'allocates', 'a', 'new,', 'sufficiently', 'large', 'underlying', 'array', 'that', 'fits', 'both', 'the', 'existing', 'slice', 'elements', 'and', 'the', 'additional', 'values.', 'Otherwise,', 'append', 're-uses', 'the', 'underlying', 'array.', 'ref:', 'https://golang.org/ref/spec#Appending_and_copying_slices', 'and', 'see:', 'https://golang.org/doc/effective_go.html#append', 'it', 'is', 'not', 'increased', 'by', '2', '(it', 'is', 'performance', 'optimized):', 'test', 'sample', 'code', 'with', 'initial', 'capacity', '5', 'bytes', 'then', 'it', 'is', '16', 'instead', 'of', '10', '(see', 'commented', 'output):', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 's', ':=', '[]', 'byte', '{', '1', ',', '2', ',', '3', ',', '4', ',', '5', '}', 'fmt.Println(cap(s))', '// 5', 's', '=', 'append', '(', 's', ',', 's', '...)', 'fmt.Println(cap(s))', '// 16', '}', 'test', 'sample', 'code', '(with', 'commented', 'output):', 'package', 'main', 'import', '(', '""fmt""', ')', 'func', 'main', '()', '{', 's', ':=', '[]', 'int', '{', '0', '}', 'fmt.Println(cap(s))', '// 1', 's', '=', 'append', '(', 's', ',', 's', '...)', 'fmt.Println(cap(s))', '// 2', '}', 'test', 'sample', 'code', '(with', 'commented', 'output):', 'package', 'main', 'import', '(', '""fmt""', ')', 'func', 'main', '()', '{', 's', ':=', '[]', 'int', '{}', 'fmt.Println(cap(s))', '// 0', 's', '=', 'append', '(', 's', ',', '1', ')', 'fmt.Println(cap(s))', '// 1', '}', 'test', 'sample', 'code', 'with', 'nil', 'slice', '(with', 'commented', 'output):', 'package', 'main', 'import', '(', '""fmt""', ')', 'func', 'main', '()', '{', 'var', 's', '[]', 'int', 'fmt.Println(cap(s))', '// 0', 's', '=', 'append', '(', 's', ',', '1', ')', 'fmt.Println(cap(s))', '// 1', '}', 'your', 'sample', 'code', '(with', 'commented', 'output):', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'var', 's1', '[]', 'int', 's2', ':=', 'append', '(', 's1', ',', '1', ')', 'fmt.Println(cap(s1))', '// 0', 'fmt.Println(cap(s2))', '// 1', '}', 'test', 'sample', 'code', 'with', '5', 'ints', '(with', 'commented', 'output):', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 's', ':=', '[]', 'int', '{', '1', ',', '2', ',', '3', ',', '4', ',', '5', '}', 'fmt.Println(cap(s))', '// 5', 's', '=', 'append', '(', 's', ',', 's', '...)', 'fmt.Println(cap(s))', '// 10', '}', 'you', 'can', 'not', 'access', 'uninitialized', 'indexes', 'of', 'slice', 'like', 's2[1]:', 'panic:', 'runtime', 'error:', 'slice', 'bounds', 'out', 'of', 'range:', 'test', 'sample', 'code', '(with', 'commented', 'output):', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'var', 's1', '[]', 'int', 's2', ':=', 'append', '(', 's1', ',', '1', ')', 'fmt.Println(cap(s1))', '// 0', 'fmt.Println(cap(s2))', '// 1', 'fmt.Println(s1)', '// []', 'fmt.Println(s2)', '// [1]', '//', 'fmt.Println(s2[0:2])', 'panic:', 'runtime', 'error:', 'slice', 'bounds', 'out', 'of', 'range', '//', 'fmt.Println(s2[1])', 'panic:', 'runtime', 'error:', 'slice', 'bounds', 'out', 'of', 'range', '}', 'Bounds', 'Checking', 'Elimination', '(or', 'BCE)', 'is', 'a', 'general', 'term', 'for', 'removing', 'redundant', 'bound', 'checking.', 'Normally', 'a', 'go', 'program', 'will', 'panic', 'when', 'a', 'slice', 'or', 'a', 'string', 'is', 'accessed', 'outside', 'of', 'its', 'bounds.', 'There', 'are', 'two', 'types', 'of', 'bound', 'checking:', 'for', 'indexing', '(a[i])', 'and', 'for', 'slicing', '(a[i:j]).', 'The', 'go', 'compiler', 'inserts', 'these', 'bounds', 'checks', 'at', 'every', 'access,', 'but', 'in', 'most', 'cases', 'they', 'are', 'not', 'needed', 'and', 'are', 'redundant', 'based', 'on', 'the', 'context.', 'Bound', 'checking', 'is', 'important', 'because', 'it', 'provides', 'a', 'defense', 'against', 'buffer', 'overflow', 'attacks', 'and', 'catches', 'a', 'common', 'programming', 'error', 'early.', 'BCE', 'is', 'important', 'because:', 'it', 'speeds', 'up', 'the', 'code,', 'makes', 'the', 'binary', 'smaller.', 'If', 'binaries', 'are', 'slowed', 'down', 'by', 'bound', 'checks', 'then', 'developers', 'will', 'have', 'an', 'incentive', 'to', 'disable', 'bound', 'checking', '(using', '-gcflags=-B).', 'ref']"
782,38544172,"Go is free to provide you more capacity than you request. This improves performance by reducing the number of allocations (and possibly copying) that are required. Capacity is just the amount of space reserved before another allocation would be required.

If you append 5 elements to this slice, at least in my experiments, the capacity is 8. This shouldn't be surprising, but also shouldn't be relied on. On different platforms, or different versions of the compiler, the actual result may be different, as long as the capacity is ""sufficiently large"" (equal to or greater than length).

The upper index bound of a slice is defined as its capacity:


  For arrays or strings, the indices are in range if 0 


This is why reading past the length is not causing a panic. Even so, you shouldn't think of those zeros as part of the slice. They are indexable by the slice, but fmt.Printf(s2) would correctly not show them because they are not part of the slice. Don't subscript this way.

In general, you want to be looking at length, not capacity. Capacity mostly is readable to assist in performance optimization.
","['Bounds', 'Checking', 'Elimination', '(or', 'BCE)', 'is', 'a', 'general', 'term', 'for', 'removing', 'redundant', 'bound', 'checking.', 'Normally', 'a', 'go', 'program', 'will', 'panic', 'when', 'a', 'slice', 'or', 'a', 'string', 'is', 'accessed', 'outside', 'of', 'its', 'bounds.', 'There', 'are', 'two', 'types', 'of', 'bound', 'checking:', 'for', 'indexing', '(a[i])', 'and', 'for', 'slicing', '(a[i:j]).', 'The', 'go', 'compiler', 'inserts', 'these', 'bounds', 'checks', 'at', 'every', 'access,', 'but', 'in', 'most', 'cases', 'they', 'are', 'not', 'needed', 'and', 'are', 'redundant', 'based', 'on', 'the', 'context.', 'Bound', 'checking', 'is', 'important', 'because', 'it', 'provides', 'a', 'defense', 'against', 'buffer', 'overflow', 'attacks', 'and', 'catches', 'a', 'common', 'programming', 'error', 'early.', 'BCE', 'is', 'important', 'because:', 'it', 'speeds', 'up', 'the', 'code,', 'makes', 'the', 'binary', 'smaller.', 'If', 'binaries', 'are', 'slowed', 'down', 'by', 'bound', 'checks', 'then', 'developers', 'will', 'have', 'an', 'incentive', 'to', 'disable', 'bound', 'checking', '(using', '-gcflags=-B).', 'ref']"
783,38544227,"

playground

It will print


  [1 2] 2
  [1] 2
  [1 2] 2  


You can see that even though I resliced to smaller length, second element is still preserved.
","['Slice', 'zero', 'value', 'Zero', 'value', 'for', 'slices', 'is', 'nil.', 'But', 'it', ""doesn't"", 'mean', 'you', ""can't"", 'do', 'anything', 'with', 'it.', 'In', 'Go', 'types', 'can', 'actually', 'be', 'used', 'when', 'the', 'value', 'is', 'nil.', 'For', 'example,', 'struct', 'methods', 'can', 'be', 'called', 'even', 'if', 'the', 'pointer', 'receiver', 'is', 'nil.', ""Here's"", 'an', 'example:', 'package', 'main', 'import', '""fmt""', 'type', 'foo', 'struct', '{', '}', 'func', '(', 'f', '*', 'foo', ')', 'bar', '()', '{', 'fmt.Println(1)', '}', 'func', 'main', '()', '{', 'var', 'f', '*', 'foo', 'fmt.Println(f)', 'f.bar()', '}', 'playground', 'The', 'same', 'applies', 'to', 'slices.', 'len,', 'cap,', 'append', 'all', 'work', 'even', 'if', 'you', 'pass', 'a', 'nil', 'slice.', 'In', 'case', 'of', 'append', 'it', 'basically', 'creates', 'a', 'new', 'slice', 'for', 'you', 'that', 'points', 'to', 'an', 'array', 'holding', 'the', 'value.', 'Slice', 'capacity', 'growth', 'When', 'you', 'add', 'an', 'element', 'and', 'you', 'need', 'to', 'allocate', 'more', 'space', 'for', 'it,', 'you', ""don't"", 'allocate', 'space', 'for', 'just', 'one', 'element.', ""That's"", 'very', 'ineficient.', 'Instead', 'you', 'allocate', 'more', 'than', 'actually', 'needed.', 'Exactly', 'how', 'much', 'more', 'is', 'allocated', 'depends', 'on', 'the', 'implementation', 'and', 'is', 'not', 'defined', 'in', 'the', 'language', 'spec.', 'Usually', 'capacity', 'is', 'doubled', 'but', 'in', 'case', 'of', 'Go,', 'at', 'least', 'as', 'of', 'v1.5,', 'it', 'rounded', 'up', 'to', 'allocated', 'memory', 'block.', 'You', 'can', 'find', 'link', 'to', 'the', 'source', 'code', 'here.', 'Slicing', 'past', 'length', 'Slicing', 'past', 'length', 'is', 'actually', 'supported.', 'You', 'can', 'slice', 'beyond', 'the', 'length', 'of', 'a', 'slice', 'but', 'you', ""can't"", 'slice', 'beyond', 'the', 'capacity:', 'Earlier', 'we', 'sliced', 's', 'to', 'a', 'length', 'shorter', 'than', 'its', 'capacity.', 'We', 'can', 'grow', 's', 'to', 'its', 'capacity', 'by', 'slicing', 'it', 'again:', 'A', 'slice', 'cannot', 'be', 'grown', 'beyond', 'its', 'capacity.', 'Attempting', 'to', 'do', 'so', 'will', 'cause', 'a', 'runtime', 'panic,', 'just', 'as', 'when', 'indexing', 'outside', 'the', 'bounds', 'of', 'a', 'slice', 'or', 'array.', 'Similarly,', 'slices', 'cannot', 'be', 're-sliced', 'below', 'zero', 'to', 'access', 'earlier', 'elements', 'in', 'the', 'array.', 'https://blog.golang.org/go-slices-usage-and-internals', 'In', 'your', 'case', 'underlying', 'array', 'has', 'capacity', 'of', '2.', 'You', 'only', 'appended', 'one', 'element', 'so', 'the', 'other', 'one', 'is', 'equal', 'to', ""it's"", 'zero', 'value.', 'When', 'you', 'reslice', 'past', 'length', 'Go', 'can', 'recognize', 'that', 'slice', 'already', 'has', 'the', 'needed', 'capacity.', 'So', 'it', 'returns', 'a', 'new', 'slice', 'that', 'points', 'to', 'the', 'same', 'array', 'but', 'with', 'length', 'value', 'set', 'to', '2.', ""Here's"", 'an', 'example', 'of', 'how', 'it', 'works:', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'var', 's', '[]', 'int', 's', '=', 'append', '(', 's', ',', '1', ',', '2', ')', 'fmt.Println(s, cap(s))', 's', '=', 's', '[:', '1', ']', 'fmt.Println(s, cap(s))', 's', '=', 's', '[:', '2', ']', 'fmt.Println(s, cap(s))', '}', 'playground', 'It', 'will', 'print', '[1', '2]', '2', '[1]', '2', '[1', '2]', '2', 'You', 'can', 'see', 'that', 'even', 'though', 'I', 'resliced', 'to', 'smaller', 'length,', 'second', 'element', 'is', 'still', 'preserved.']"
784,38547676,"Problem is Python is interpreted, GO isn't so there's no real way to bench test speeds. Interpreted languages usually (not always have a vm component) that's where the problem lies, any test you run is being run in interpreted bounds not actual runtime bounds. Go is slightly slower than C in terms of speed and that is mostly due to it using garbage collection instead of manual memory management. That said GO compared to Python is fast because its a compiled language, the only thing lacking in GO is bug testing I stand corrected if I'm wrong.
","['Problem', 'is', 'Python', 'is', 'interpreted,', 'GO', ""isn't"", 'so', ""there's"", 'no', 'real', 'way', 'to', 'bench', 'test', 'speeds.', 'Interpreted', 'languages', 'usually', '(not', 'always', 'have', 'a', 'vm', 'component)', ""that's"", 'where', 'the', 'problem', 'lies,', 'any', 'test', 'you', 'run', 'is', 'being', 'run', 'in', 'interpreted', 'bounds', 'not', 'actual', 'runtime', 'bounds.', 'Go', 'is', 'slightly', 'slower', 'than', 'C', 'in', 'terms', 'of', 'speed', 'and', 'that', 'is', 'mostly', 'due', 'to', 'it', 'using', 'garbage', 'collection', 'instead', 'of', 'manual', 'memory', 'management.', 'That', 'said', 'GO', 'compared', 'to', 'Python', 'is', 'fast', 'because', 'its', 'a', 'compiled', 'language,', 'the', 'only', 'thing', 'lacking', 'in', 'GO', 'is', 'bug', 'testing', 'I', 'stand', 'corrected', 'if', ""I'm"", 'wrong.']"
785,38548703,"
","[""There's"", 'a', 'bit', 'of', 'confusion', 'here', 'about', 'capacity', 'and', 'length,', 'I', 'think.', 'What', 'you', 'are', 'looking', 'at', 'when', 'you', 'print', 'the', 'slice', 'and', 'see', 'zero', 'or', 'one', 'elements', 'in', 'the', 'slice', 'is', 'its', 'length,', 'that', 'is,', 'the', 'number', 'of', 'values', 'the', 'slice', 'actually', 'contains.', 'The', 'capacity', 'of', 'the', 'underlying', 'array', 'is', 'generally', 'hidden', 'from', 'you', 'unless', 'you', 'look', 'it', 'up', 'with', 'the', 'cap()', 'builtin.', 'Under', 'the', 'hood,', 'slices', 'are', 'actually', 'fixed', 'length', 'arrays.', 'When', 'you', 'run', 'out', 'of', 'space', 'in', 'the', 'slice,', 'Go', 'has', 'to', 'make', 'it', 'bigger', 'by', 'creating', 'a', 'new', '(longer)', 'array,', 'and', 'copying', 'all', 'the', 'values', 'over', 'from', 'the', 'old', 'one.', 'If', ""you're"", 'adding', 'lots', 'of', 'values', 'to', 'a', 'slice,', 'it', 'would', 'be', 'very', 'slow', 'to', 'allocate', 'memory', 'for', 'the', 'new', 'value', '(and', 'copy', 'all', 'the', 'old', 'ones', 'over)', 'every', 'time,', 'so', 'sometimes', 'Go', 'assumes', 'that', ""you're"", 'going', 'to', 'append', 'more', 'elements', 'and', 'goes', 'ahead', 'and', 'allocates', 'more', 'memory', 'than', 'it', 'needs', 'so', 'that', 'you', ""don't"", 'have', 'to', 'copy', 'things', 'as', 'often.', 'This', 'extra', 'memory', 'can', 'be', 'used', 'the', 'next', 'time', 'you', 'call', 'append,', 'and', 'the', 'number', 'of', 'values', 'which', 'can', 'be', 'stored', 'in', 'the', 'slice', 'before', 'it', 'has', 'to', 'be', 'expanded', 'is', 'called', 'its', 'capacity.', 'In', 'other', 'words,', 'the', 'capacity', 'of', 'the', 'slice', 'is', 'the', 'length', 'of', 'the', 'slices', 'backing', 'array,', 'and', 'the', 'length', 'of', 'a', 'slice', 'is', 'independent', 'from', 'the', 'capacity.', 'When', 'you', 'append', 'a', 'single', 'value', 'to', 'your', 'slice', 'Go', 'sees', 'that', 'it', 'has', 'to', 'allocate', 'space', 'for', 'this', 'value,', 'so', 'it', 'allocates', 'twice', 'the', 'amount', 'of', 'space', 'that', 'it', 'actually', 'needs,', 'increasing', 'the', 'length', 'by', '1', 'and', 'the', 'capacity', 'by', '2.', 'The', 'slice', 'you', 'mention', 'is', 'because', 'slicing', 'acts', 'on', 'the', 'underlying', 'array:', 'Go', 'lets', 'you', 'slice', 'beyond', 'the', 'length', 'of', 'a', 'slice,', 'you', 'just', ""can't"", 'go', 'beyond', 'its', 'capacity', '(the', 'length', 'of', 'the', 'underlying', 'array).', 'For', 'example,', 'lets', 'try', 'a', 'few', 'things', 'on', 'a', 'simple', 'nil', 'slice:', 'var', 's', '[]', 'int', 'fmt.Println(len(s), cap(s))', '// Prints `0 0` because this is a nil slice', 's', '=', 'append', '(', 's', ',', '1', ')', 'fmt.Println(len(s), cap(s))', '// Prints `1 2`', 'fmt.Println(s[0:2])         // Prints `[1 0]` (only the first value is part of the slice, the second position in the underlying array is a zero value that is waiting to be used when the slices length grows)', ""fmt.Println(s[0:3])         // panic: slice bounds out of range (because we've exceeded the slices capacity)""]"
786,38556663,"

Tempted to submit a documentation patch of some sort to the database/sql package.
","['I', 'reworked', 'the', 'code', 'to', 'get', 'the', 'results', 'I', 'wanted.', '//', 'Get', 'the', 'karma', 'value', 'for', 'nick', 'from', 'the', 'database.', 'func', 'getKarma', '(', 'nick', 'string', ',', 'db', '*', 'sql', '.', 'DB', ')', 'string', '{', 'var', 'karma', 'int', 'rows', ',', 'err', ':=', 'db.Query(""SELECT SUM(delta) FROM karma WHERE nick = $1"", nick)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'defer', 'rows.Close()', 'karmaStr', ':=', 'fmt.Sprintf(""%s has no karma."", nick)', 'if', 'rows.Next()', '{', 'rows.Scan(&karma)', 'karmaStr', '=', 'fmt.Sprintf(""Karma for %s is %d."", nick, karma)', '}', 'return', 'karmaStr', '}', 'Tempted', 'to', 'submit', 'a', 'documentation', 'patch', 'of', 'some', 'sort', 'to', 'the', 'database/sql', 'package.']"
787,38558922,"I believe your issue is that you're getting a NULL value back from the database, which go translates into nil. However, you're scanning into an integer, which has no concept of nil. One thing you can do is scan into a type that implements the sql.Scanner interface (and can handle NULL values), e.g., sql.NullInt64.

In the example code in the documentation, I'd assume they have a NOT NULL constraint on the username column. I think the reason for this is because they didn't want to lead people to believe that you have to use NULL-able types across the board.
","['Tempted', 'to', 'submit', 'a', 'documentation', 'patch', 'of', 'some', 'sort', 'to', 'the', 'database/sql', 'package.']"
788,38613473,"
","['You', 'need', 'to', 'serialise', 'the', 'rsa.PublicKey', 'to', 'a', '[]byte.', 'There', 'are', 'multiple', 'ways', 'of', 'doing', 'this,', 'but', ""I'd"", 'probably', 'go', 'with', 'JSON.', 'The', 'struct', 'looks', 'like', 'this,', 'and', 'everthing', 'within', 'it', 'is', 'a)', 'Public', 'and', 'b)', 'Serializable', 'with', 'JSON.', 'type', 'PublicKey', 'struct', '{', 'N', '*', 'big', '.', 'Int', '// modulus', 'E', 'int', '// public exponent', '}']"
789,38616355,"

Sending gob blobs can be faster and more efficient then doing JSON encoding especially if you are doing a lot of it, but you need to decide whether it is a significant factor for you and whether you prefer text (JSON) or binary format (gob or protobufs) for data transport.
","['If', 'you', 'are', 'sending', 'data', 'from', 'a', 'Go', 'program', 'to', 'another', 'Go', 'one', '(as', 'you', 'show', 'in', 'your', 'examples),', 'you', 'can', 'use', 'the', 'package', 'encoding/gob', 'https://golang.org/pkg/encoding/gob/', 'to', 'serialize', '(Encode)', 'an', 'object', 'into', 'a', 'slice', 'of', 'bytes', 'and', 'deserialize', '(Decode)', 'the', 'received', 'bytes', 'back', 'into', 'the', 'Go', 'object.', ""Here's"", 'an', 'example', '(also', 'https://play.golang.org/p/3bxbqGtqQY):', 'package', 'main', 'import', '(', '""bytes""', '""crypto/rand""', '""crypto/rsa""', '""encoding/gob""', '""fmt""', '""log""', ')', 'func', 'main', '()', '{', 'priv', ',', '_', ':=', 'rsa.GenerateKey(rand.Reader, 512)', '// skipped error checking for brevity', 'pub', ':=', 'priv', '.', 'PublicKey', '//', 'adapted', 'from', 'https:golang.org/pkg/encoding/gob/#example__basic:', '//', 'Initialize', 'the', 'encoder', 'and', 'decoder.', 'Normally', 'enc', 'and', 'dec', 'would', 'be', '//', 'bound', 'to', 'network', 'connections', 'and', 'the', 'encoder', 'and', 'decoder', 'would', '//', 'run', 'in', 'different', 'processes.', 'var', 'network', 'bytes', '.', 'Buffer', '// Stand-in for a network connection', 'enc', ':=', 'go', 'b.NewEncoder(&network)', '// Will write to network.', 'dec', ':=', 'go', 'b.NewDecoder(&network)', '// Will read from network.', 'enc.Encode(&pub)', 'var', 'pub2', '=', 'rsa', '.', 'PublicKey', '{}', 'dec.Decode(&pub2)', 'if', 'pub', '.', 'N.Cmp(pub2.N)', '!=', '0', '||', 'pub', '.', 'E', '!=', 'pub2', '.', 'E', '{', 'log.Fatal(""Public Keys at source and destination not equal"")', '}', 'fmt.Printf(""OK - %#v\\n"", pub2)', '}', 'Output', 'similar', 'to:', 'OK', '-', 'rsa', '.', 'PublicKey', '{', 'N', ':', '10881677056019504919833663670523712169444878787643568603135265932739968735275981472697621424678110007129031867528249518560683510901399549383480944574041391', ',', 'E', ':', '65537', '}', 'Sending', 'gob', 'blobs', 'can', 'be', 'faster', 'and', 'more', 'efficient', 'then', 'doing', 'JSON', 'encoding', 'especially', 'if', 'you', 'are', 'doing', 'a', 'lot', 'of', 'it,', 'but', 'you', 'need', 'to', 'decide', 'whether', 'it', 'is', 'a', 'significant', 'factor', 'for', 'you', 'and', 'whether', 'you', 'prefer', 'text', '(JSON)', 'or', 'binary', 'format', '(gob', 'or', 'protobufs)', 'for', 'data', 'transport.']"
790,38645289,"Every array could be a slice but not every slice could be an array. If you have a fixed collection size you can get a minor performance improvement from using an array. At the very least you'll save the space occupied by the slice header.
","['Every', 'array', 'could', 'be', 'a', 'slice', 'but', 'not', 'every', 'slice', 'could', 'be', 'an', 'array.', 'If', 'you', 'have', 'a', 'fixed', 'collection', 'size', 'you', 'can', 'get', 'a', 'minor', 'performance', 'improvement', 'from', 'using', 'an', 'array.', 'At', 'the', 'very', 'least', ""you'll"", 'save', 'the', 'space', 'occupied', 'by', 'the', 'slice', 'header.']"
791,38645343,"Arrays are more efficient in saving space.  If you never update the size of the slice (i.e. start with a predefined size and never go past it) there really is not much of a performance difference.  But there is extra overhead in space, as a slice is simply a wrapper containing the array at its core. Contextually, it also improves clarity as it makes the intended use of the variable more apparent.
","['Arrays', 'are', 'more', 'efficient', 'in', 'saving', 'space.', 'If', 'you', 'never', 'update', 'the', 'size', 'of', 'the', 'slice', '(i.e.', 'start', 'with', 'a', 'predefined', 'size', 'and', 'never', 'go', 'past', 'it)', 'there', 'really', 'is', 'not', 'much', 'of', 'a', 'performance', 'difference.', 'But', 'there', 'is', 'extra', 'overhead', 'in', 'space,', 'as', 'a', 'slice', 'is', 'simply', 'a', 'wrapper', 'containing', 'the', 'array', 'at', 'its', 'core.', 'Contextually,', 'it', 'also', 'improves', 'clarity', 'as', 'it', 'makes', 'the', 'intended', 'use', 'of', 'the', 'variable', 'more', 'apparent.']"
792,38645895,"

Note: When ranging over a complete array vs a complete slice, there may be no performance difference at all as obviously it may be optimized so that the pointer in the slice header is only dereferenced once. For details / example, see Array vs Slice: accessing speed.



See related questions where an array can be used / makes more sense than a slice:

Why use arrays instead of slices?

Why can't Go slice be used as keys in Go maps pretty much the same way arrays can be used as keys?

Hash with key as an array type

Golang: How do I check the equality of three values elegantly?

Slicing a slice pointer passed as argument

And this is just for curiosity: a slice can contain itself while an array can't. (Actually this property makes comparison easier as you don't have to deal with recursive data structures).

Must-read blogs:

Go Slices: usage and internals

Arrays, slices (and strings): The mechanics of 'append'
","['There', 'is', 'more', 'to', 'arrays', 'than', 'just', 'the', 'fixed', 'length:', 'they', 'are', 'comparable,', 'and', 'they', 'are', 'values', '(not', 'reference', 'or', 'pointer', 'types).', 'There', 'are', 'countless', 'advantages', 'of', 'arrays', 'over', 'slices', 'in', 'certain', 'situations,', 'all', 'which', 'together', 'more', 'than', 'justify', 'the', 'existence', 'of', 'arrays', '(along', 'with', 'slices).', ""Let's"", 'see', 'them.', ""(I'm"", 'not', 'even', 'counting', 'arrays', 'being', 'the', 'building', 'blocks', 'of', 'slices.)', '1.', 'Being', 'comparable', 'means', 'you', 'can', 'use', 'arrays', 'as', 'keys', 'in', 'maps,', 'but', 'not', 'slices.', 'Yes,', 'you', 'could', 'say', 'now', 'that', 'why', 'not', 'make', 'slices', 'comparable', 'then,', 'so', 'that', 'this', 'alone', ""wouldn't"", 'justify', 'the', 'existence', 'of', 'both.', 'Equality', 'is', 'not', 'well', 'defined', 'on', 'slices.', 'FAQ:', 'Why', ""don't"", 'maps', 'allow', 'slices', 'as', 'keys?', 'They', ""don't"", 'implement', 'equality', 'because', 'equality', 'is', 'not', 'well', 'defined', 'on', 'such', 'types;', 'there', 'are', 'multiple', 'considerations', 'involving', 'shallow', 'vs.', 'deep', 'comparison,', 'pointer', 'vs.', 'value', 'comparison,', 'how', 'to', 'deal', 'with', 'recursive', 'types,', 'and', 'so', 'on.', '2.', 'Arrays', 'can', 'also', 'give', 'you', 'higher', 'compile-time', 'safety,', 'as', 'the', 'index', 'bounds', 'can', 'be', 'checked', 'at', 'compile', 'time', '(array', 'length', 'must', 'evaluate', 'to', 'a', 'non-negative', 'constant', 'representable', 'by', 'a', 'value', 'of', 'type', 'int):', 's', ':=', 'make', '([]', 'int', ',', '3', ')', 's', '[', '3', ']', '=', '3', '// ""Only"" a runtime panic: runtime error: index out of range', 'a', ':=', '[', '3', ']', 'int', '{}', 'a', '[', '3', ']', '=', '3', '// Compile-time error: invalid array index 3 (out of bounds for 3-element array)', '3.', 'Also', 'passing', 'around', 'or', 'assigning', 'array', 'values', 'will', 'implicitly', 'make', 'a', 'copy', 'of', 'the', 'entire', 'array,', 'so', 'it', 'will', 'be', '""detached""', 'from', 'the', 'original', 'value.', 'If', 'you', 'pass', 'a', 'slice,', 'it', 'will', 'still', 'make', 'a', 'copy', 'but', 'just', 'of', 'the', 'slice', 'header,', 'but', 'the', 'slice', 'value', '(the', 'header)', 'will', 'point', 'to', 'the', 'same', 'backing', 'array.', 'This', 'may', 'or', 'may', 'not', 'be', 'what', 'you', 'want.', 'If', 'you', 'want', 'to', '""detach""', 'a', 'slice', 'from', 'the', '""original""', 'one,', 'you', 'have', 'to', 'explicitly', 'copy', 'the', 'content', 'e.g.', 'with', 'the', 'builtin', 'copy()', 'function', 'to', 'a', 'new', 'slice.', 'a', ':=', '[', '2', ']', 'int', '{', '1', ',', '2', '}', 'b', ':=', 'a', 'b', '[', '0', ']', '=', '10', '// This only affects b, a will remain {1, 2}', 'sa', ':=', '[]', 'int', '{', '1', ',', '2', '}', 'sb', ':=', 'sa', 'sb', '[', '0', ']', '=', '10', '// Affects both sb and sa', '4.', 'Also', 'since', 'the', 'array', 'length', 'is', 'part', 'of', 'the', 'array', 'type,', 'arrays', 'with', 'different', 'length', 'are', 'distinct', 'types.', 'On', 'one', 'hand', 'this', 'may', 'be', 'a', '""pain', 'in', 'the', 'ass""', '(e.g.', 'you', 'write', 'a', 'function', 'which', 'takes', 'a', 'parameter', 'of', 'type', '[4]int,', 'you', ""can't"", 'use', 'that', 'function', 'to', 'take', 'and', 'process', 'an', 'array', 'of', 'type', '[5]int),', 'but', 'this', 'may', 'also', 'be', 'an', 'advantage:', 'this', 'may', 'be', 'used', 'to', 'explicitly', 'specify', 'the', 'length', 'of', 'the', 'array', 'that', 'is', 'expected.', 'E.g.', 'you', 'want', 'to', 'write', 'a', 'function', 'which', 'takes', 'an', 'IPv4', 'address,', 'it', 'can', 'be', 'modeled', 'with', 'the', 'type', '[4]byte.', 'Now', 'you', 'have', 'a', 'compile-time', 'guarantee', 'that', 'the', 'value', 'passed', 'to', 'your', 'function', 'will', 'have', 'exactly', '4', 'bytes,', 'no', 'more', 'and', 'no', 'less', '(which', 'would', 'be', 'an', 'invalid', 'IPv4', 'address', 'anyway).', '5.', 'Related', 'to', 'the', 'previous,', 'the', 'array', 'length', 'may', 'also', 'serve', 'a', 'documentation', 'purpose.', 'A', 'type', '[4]byte', 'properly', 'documents', 'that', 'IPv4', 'has', '4', 'bytes.', 'An', 'rgb', 'variable', 'of', 'type', '[3]byte', 'tells', 'there', 'are', '1', 'byte', 'for', 'each', 'color', 'components.', 'In', 'some', 'cases', 'it', 'is', 'even', 'taken', 'out', 'and', 'is', 'available,', 'documented', 'separately;', 'for', 'example', 'in', 'the', 'crypto/md5', 'package:', 'md5.Sum()', 'returns', 'a', 'value', 'of', 'type', '[Size]byte', 'where', 'md5.Size', 'is', 'a', 'constant', 'being', '16:', 'the', 'length', 'of', 'an', 'MD5', 'checksum.', '6.', 'They', 'are', 'also', 'very', 'useful', 'when', 'planning', 'memory', 'layout', 'of', 'struct', 'types,', 'see', ""JimB's"", 'answer', 'here,', 'and', 'this', 'answer', 'in', 'greater', 'detail', 'and', 'real-life', 'example.', '7.', 'Also', 'since', 'slices', 'are', 'headers', 'and', 'they', 'are', '(almost)', 'always', 'passed', 'around', 'as-is', '(without', 'pointers),', 'the', 'language', 'spec', 'is', 'more', 'restrictive', 'regarding', 'pointers', 'to', 'slices', 'than', 'pointers', 'to', 'arrays.', 'For', 'example', 'the', 'spec', 'provides', 'multiple', 'shorthands', 'for', 'operating', 'with', 'pointers', 'to', 'arrays,', 'while', 'the', 'same', 'gives', 'compile-time', 'error', 'in', 'case', 'of', 'slices', '(because', ""it's"", 'rare', 'to', 'use', 'pointers', 'to', 'slices,', 'if', 'you', 'still', 'want', '/', 'have', 'to', 'do', 'it,', 'you', 'have', 'to', 'be', 'explicit', 'about', 'handling', 'it;', 'read', 'more', 'in', 'this', 'answer).', 'Such', 'examples', 'are:', 'Slicing', 'a', 'p', 'pointer', 'to', 'array:', 'p[low:high]', 'is', 'a', 'shorthand', 'for', '(*p)[low:high].', 'If', 'p', 'is', 'a', 'pointer', 'to', 'slice,', 'this', 'is', 'compile-time', 'error', '(spec:', 'Slice', 'expressions).', 'Indexing', 'a', 'p', 'pointer', 'to', 'array:', 'p[i]', 'is', 'a', 'shorthand', 'for', '(*p)[i].', 'If', 'p', 'is', 'pointer', 'to', 'a', 'slice,', 'this', 'is', 'a', 'compile', 'time', 'error', '(spec:', 'Index', 'expressions).', 'Example:', 'pa', ':=', '&[', '2', ']', 'int', '{', '1', ',', '2', '}', 'fmt.Println(pa[1:1])', '// OK', 'fmt.Println(pa[1])', '// OK', 'ps', ':=', '&[]', 'int', '{', '3', ',', '4', '}', 'println', '(', 'ps', '[', '1', ':', '1', '])', '// Error: cannot slice ps (type *[]int)', 'println', '(', 'ps', '[', '1', '])', '// Error: invalid operation: ps[1] (type *[]int does not support indexing)', '8.', 'Accessing', '(single)', 'array', 'elements', 'is', 'more', 'efficient', 'than', 'accessing', 'slice', 'elements;', 'as', 'in', 'case', 'of', 'slices', 'the', 'runtime', 'has', 'to', 'go', 'through', 'an', 'implicit', 'pointer', 'dereference.', 'Also', '""the', 'expressions', 'len(s)', 'and', 'cap(s)', 'are', 'constants', 'if', 'the', 'type', 'of', 's', 'is', 'an', 'array', 'or', 'pointer', 'to', 'an', 'array"".', 'May', 'be', 'suprising,', 'but', 'you', 'can', 'even', 'write:', 'type', 'IP', '[', '4', ']', 'byte', 'const', 'x', '=', 'len', '(', 'IP', '{})', '// x will be 4', ""It's"", 'valid,', 'and', 'is', 'evaluated', 'and', 'compile-time', 'even', 'though', 'IP{}', 'is', 'not', 'a', 'constant', 'expression', 'so', 'e.g.', 'const', 'i', '=', 'IP{}', 'would', 'be', 'a', 'compile-time', 'error!', 'After', 'this,', ""it's"", 'not', 'even', 'surprising', 'that', 'the', 'following', 'also', 'works:', 'const', 'x2', '=', 'len', '((*', 'IP', ')(', 'nil', '))', '// x2 will also be 4', 'Note:', 'When', 'ranging', 'over', 'a', 'complete', 'array', 'vs', 'a', 'complete', 'slice,', 'there', 'may', 'be', 'no', 'performance', 'difference', 'at', 'all', 'as', 'obviously', 'it', 'may', 'be', 'optimized', 'so', 'that', 'the', 'pointer', 'in', 'the', 'slice', 'header', 'is', 'only', 'dereferenced', 'once.', 'For', 'details', '/', 'example,', 'see', 'Array', 'vs', 'Slice:', 'accessing', 'speed.', 'See', 'related', 'questions', 'where', 'an', 'array', 'can', 'be', 'used', '/', 'makes', 'more', 'sense', 'than', 'a', 'slice:', 'Why', 'use', 'arrays', 'instead', 'of', 'slices?', 'Why', ""can't"", 'Go', 'slice', 'be', 'used', 'as', 'keys', 'in', 'Go', 'maps', 'pretty', 'much', 'the', 'same', 'way', 'arrays', 'can', 'be', 'used', 'as', 'keys?', 'Hash', 'with', 'key', 'as', 'an', 'array', 'type', 'Golang:', 'How', 'do', 'I', 'check', 'the', 'equality', 'of', 'three', 'values', 'elegantly?', 'Slicing', 'a', 'slice', 'pointer', 'passed', 'as', 'argument', 'And', 'this', 'is', 'just', 'for', 'curiosity:', 'a', 'slice', 'can', 'contain', 'itself', 'while', 'an', 'array', ""can't."", '(Actually', 'this', 'property', 'makes', 'comparison', 'easier', 'as', 'you', ""don't"", 'have', 'to', 'deal', 'with', 'recursive', 'data', 'structures).', 'Must-read', 'blogs:', 'Go', 'Slices:', 'usage', 'and', 'internals', 'Arrays,', 'slices', '(and', 'strings):', 'The', 'mechanics', 'of', ""'append'""]"
793,38645964,"

Here, a Foo value will contains a 64 byte value, rather than a slice header which needs to be separately initialized. Arrays are also used to pad structs to match alignment when interoperating with C code and to prevent false sharing for better cache performance.

Another aspect for improved performance is that you can better define memory layout than with slices, because data locality can have a very big impact on memory intensive calculations. Dereferencing a pointer can take considerable time compared to the operations being performed on the data, and copying values smaller than a cache line incurs very little cost, so performance critical code often uses arrays for that reason alone.
","['Arrays', 'are', 'values,', 'and', 'it', 'is', 'often', 'useful', 'to', 'have', 'a', 'value', 'instead', 'of', 'a', 'pointer.', 'Values', 'can', 'be', 'compared,', 'hence', 'you', 'can', 'use', 'arrays', 'as', 'map', 'keys.', 'Values', 'are', 'always', 'initialized,', 'so', ""there's"", 'you', ""don't"", 'need', 'to', 'initialize,', 'or', 'make', 'them', 'like', 'you', 'do', 'with', 'a', 'slice.', 'Arrays', 'give', 'you', 'better', 'control', 'of', 'memory', 'layout,', 'where', 'as', 'you', ""can't"", 'allocate', 'space', 'directly', 'in', 'a', 'struct', 'with', 'a', 'slice,', 'you', 'can', 'with', 'an', 'array:', 'type', 'Foo', 'struct', '{', 'buf', '[', '64', ']', 'byte', '}', 'Here,', 'a', 'Foo', 'value', 'will', 'contains', 'a', '64', 'byte', 'value,', 'rather', 'than', 'a', 'slice', 'header', 'which', 'needs', 'to', 'be', 'separately', 'initialized.', 'Arrays', 'are', 'also', 'used', 'to', 'pad', 'structs', 'to', 'match', 'alignment', 'when', 'interoperating', 'with', 'C', 'code', 'and', 'to', 'prevent', 'false', 'sharing', 'for', 'better', 'cache', 'performance.', 'Another', 'aspect', 'for', 'improved', 'performance', 'is', 'that', 'you', 'can', 'better', 'define', 'memory', 'layout', 'than', 'with', 'slices,', 'because', 'data', 'locality', 'can', 'have', 'a', 'very', 'big', 'impact', 'on', 'memory', 'intensive', 'calculations.', 'Dereferencing', 'a', 'pointer', 'can', 'take', 'considerable', 'time', 'compared', 'to', 'the', 'operations', 'being', 'performed', 'on', 'the', 'data,', 'and', 'copying', 'values', 'smaller', 'than', 'a', 'cache', 'line', 'incurs', 'very', 'little', 'cost,', 'so', 'performance', 'critical', 'code', 'often', 'uses', 'arrays', 'for', 'that', 'reason', 'alone.']"
794,38672052,"

Then the pointer inside your package points to your dbPointer. I think this is a good way to pass a pointer into other packages.
","['This', 'is', 'the', 'concept', 'which', 'should', 'work.', 'Inside', 'the', 'package', 'you', 'should', 'declare', 'a', 'variable,', 'which', 'is', 'exported.', 'This', 'variable', 'has', 'to', 'be', 'a', 'pointer.', 'var', 'myVar', '=', '3', 'var', 'MyPointer', '=', '&', 'myVar', 'https://play.golang.org/p/EQDwGF7pjv', 'From', 'your', 'main', 'package', 'you', 'can', 'set', 'the', 'pointer', 'to', 'your', '""global""', 'db', 'or', 'session', 'adress.', 'mypackage', '.', 'MyPointer', '=', 'dbPointer', 'Then', 'the', 'pointer', 'inside', 'your', 'package', 'points', 'to', 'your', 'dbPointer.', 'I', 'think', 'this', 'is', 'a', 'good', 'way', 'to', 'pass', 'a', 'pointer', 'into', 'other', 'packages.']"
795,38709178,"You can ""pack"" the static files (text, images etc.) by including it into a .go file (usually automatically generated) and then compiling it into the stand-alone binary.  You can do it by using https://github.com/golang/tools/blob/master/godoc/static/makestatic.go or with https://github.com/jteeuwen/go-bindata. See http://blog.ralch.com/tutorial/golang-embedded-resources/ for more information and examples.
","['You', 'can', '""pack""', 'the', 'static', 'files', '(text,', 'images', 'etc.)', 'by', 'including', 'it', 'into', 'a', '.go', 'file', '(usually', 'automatically', 'generated)', 'and', 'then', 'compiling', 'it', 'into', 'the', 'stand-alone', 'binary.', 'You', 'can', 'do', 'it', 'by', 'using', 'https://github.com/golang/tools/blob/master/godoc/static/makestatic.go', 'or', 'with', 'https://github.com/jteeuwen/go-bindata.', 'See', 'http://blog.ralch.com/tutorial/golang-embedded-resources/', 'for', 'more', 'information', 'and', 'examples.']"
796,38714480,"
","['The', 'latest', 'version', 'of', 'goimports', 'support', '-local', 'flag.', 'Quoting', 'this', 'commit', 'message:', 'For', 'example,', 'running', 'go', 'import', 's', '-', 'local', 'example', '.', 'com', '/', 'might', 'produce', 'import', '(', '""database/sql""', '""io""', '""strconv""', '""golang.org/x/net/context""', '""example.com/foo/bar""', '""example.com/foo/baz""', ')']"
797,38810688,"
","['The', 'arguments', 'to', 'the', 'go', 'install', 'command', 'are', 'packages,', 'not', '.go', 'files.', 'Use', 'these', 'commands', 'to', 'specify', 'the', 'package', 'by', 'relative', 'path.', 'For', 'the', 'package', 'containing', 'the', 'file', './src/tutorial/helloworld/hello.go:', 'go', 'install', './', 'src/tutorial/helloworld', 'For', 'the', 'package', 'containing', 'the', 'file', './path/to/.go/file/hello.go:', 'go', 'install', './', 'path/to/.go/file']"
798,38811255,"
","['If', 'you', 'just', 'want', 'the', 'content', 'as', 'string,', 'then', 'the', 'simple', 'solution', 'is', 'to', 'use', 'the', 'ReadFile', 'function', 'from', 'the', 'io/ioutil', 'package.', 'This', 'function', 'returns', 'a', 'slice', 'of', 'bytes', 'which', 'you', 'can', 'easily', 'convert', 'to', 'a', 'string.', 'package', 'main', 'import', '(', '""fmt""', '""io/ioutil""', ')', 'func', 'main', '()', '{', 'b', ',', 'err', ':=', 'ioutil.ReadFile(""file.txt"")', '// just pass the file name', 'if', 'err', '!=', 'nil', '{', 'fmt.Print(err)', '}', 'fmt.Println(b)', ""// print the content as 'bytes'"", 'str', ':=', 'string', '(', 'b', ')', ""// convert content to a 'string'"", 'fmt.Println(str)', ""// print the content as a 'string'"", '}']"
799,38830027,"To be able to find an entity in the result of a query/filter by a property that property must have had indexing enabled (in the model definition) at the time when the entity was created and the datastore's background indexing task(s) must be completed for it.

If you enable indexing for that property after the entity was created you need to re-write the property so that the indexing tasks are triggered for it, see: https://stackoverflow.com/a/34583510/4495081.

The ""Saving search indexes"" message is a generic one printed before the operation takes place, it doesn't mean the result of the operation will be non-empty.

You don't need to worry that your index.yaml file is empty. Not all indexes need to be present in the index.yaml file, only the more complex/composite ones need to. Your filter can be matched using the built-in indexes (after the above-mentioned indexing requirements are met). From Indexes:


  There are two types of indexes:
  
  
  Built-in indexes
  
  By default, Cloud Datastore automatically predefines an index for each property of each entity kind. These single property indexes are
  suitable for simple types of queries.
  Composite indexes
  
  Composite indexes index multiple property values per indexed entity. Composite indexes support complex queries and are defined in
  an index configuration file (index.yaml).
  

",[]
800,38839236,"
","['Wrap', 'your', 'handlers', 'with', 'a', 'redirector:', 'func', 'wwwRedirect', '(', 'h', 'http', '.', 'Handler', ')', 'http', '.', 'Handler', '{', 'return', 'http.HandlerFunc(func(w http.ResponseWriter, r *http.Request)', '{', 'if', 'host', ':=', 'strings.TrimPrefix(r.Host, ""www."")', ';', 'host', '!=', 'r', '.', 'Host', '{', '//', 'Request', 'host', 'has', 'www.', 'prefix.', 'Redirect', 'to', 'host', 'with', 'www.', 'trimmed.', 'u', ':=', '*', 'r', '.', 'URL', 'u', '.', 'Host', '=', 'host', 'u', '.', 'Scheme', '=', '""https""', 'http.Redirect(w, r, u.String(), http.StatusFound)', 'return', '}', 'h.ServeHTTP(w, r)', '})', '}', 'Use', 'the', 'redirector', 'like', 'this:', 'log.Fatal(http.ListenAndServeTLS(addr, certFile, keyFile, wwwRedirect(handler))']"
801,38842871,"
","['The', 'property', 'name', 'in', 'the', 'datastore', 'is', '""Email""', 'with', 'capital', 'E,', 'not', '""email"".', ""It's"", 'case-sensitive,', 'must', 'be', 'queried', 'with', 'capital', 'E:', 'query', '=', 'datastore.NewQuery(""UserAccount"").Filter(""Email ="", ""test@example.com"")', 'If', 'you', 'would', 'want', 'it', 'to', 'be', 'saved', '/', 'retrieved', 'with', 'small', 'e,', 'you', 'could', 'use', 'tags', 'to', 'do', 'the', 'mapping,', 'e.g.:', 'type', 'UserAccount', 'struct', '{', 'Email', 'string', 'datastore', ':', '""email""', '//', 'other', 'fields...', '}']"
802,38870609,"  Docs:  


  StdoutPipe returns a pipe that will be connected to the command's
  standard output when the command starts.
  
  Wait will close the pipe after seeing the command exit, so most
  callers need not close the pipe themselves; however, an implication is
  that it is incorrect to call Wait before all reads from the pipe have
  completed. For the same reason, it is incorrect to call Run when using
  StdoutPipe. See the example for idiomatic usage.

","['There', 'are', 'some', 'problems:', 'The', 'pipe', 'is', 'being', 'closed', 'before', 'reading', 'all', 'data.', 'Always', 'check', 'for', 'errors', 'Start', 'cmd.Start()', 'after', 'c', 'and', 'use', 'unbuffered', 'channel', 'c', ':=', 'make', '(', 'chan', 'struct', '{})', 'Two', 'working', 'sample', 'codes:', '1:', 'Wait', 'using', 'channel', 'then', 'close', 'the', 'pipe', 'after', 'EOF', 'using', 'defer', 'func()', '{', 'c', ',', 'like', 'this', 'working', 'sample', 'code:', 'package', 'main', 'import', '(', '""bufio""', '""fmt""', '""os/exec""', ')', 'func', 'main', '()', '{', 'cmd', ':=', 'exec.Command(""Streamer"")', 'c', ':=', 'make', '(', 'chan', 'struct', '{})', 'go', 'run', '(', 'cmd', ',', 'c', ')', 'c', '<-', 'struct', '{}{}', 'cmd.Start()', '<-', 'c', 'if', 'err', ':=', 'cmd.Wait()', ';', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'fmt.Println(""done."")', '}', 'func', 'run', '(', 'cmd', '*', 'exec', '.', 'Cmd', ',', 'c', 'chan', 'struct', '{})', '{', 'defer', 'func', '()', '{', 'c', '<-', 'struct', '{}{}', '}()', 'stdout', ',', 'err', ':=', 'cmd.StdoutPipe()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '<-', 'c', 'scanner', ':=', 'bufio.NewScanner(stdout)', 'for', 'scanner.Scan()', '{', 'm', ':=', 'scanner.Text()', 'fmt.Println(m)', '}', 'fmt.Println(""EOF"")', '}', '2:', 'Also', 'you', 'may', 'Wait', 'using', 'sync.WaitGroup,', 'like', 'this', 'working', 'sample', 'code:', 'package', 'main', 'import', '(', '""bufio""', '""fmt""', '""os/exec""', '""sync""', ')', 'var', 'wg', 'sync.WaitGroup', 'func', 'main()', '{', 'cmd', ':=', 'exec.Command(""Streamer"")', 'c', ':=', 'make(chan', 'struct{})', 'wg.Add(1)', 'go', 'func(cmd', '*exec.Cmd,', 'c', 'chan', 'struct{})', '{', 'defer', 'wg.Done()', 'stdout,', 'err', ':=', 'cmd.StdoutPipe()', 'if', 'err', '!=', 'nil', '{', 'panic(err)', '}', '<-c', 'scanner', ':=', 'bufio.NewScanner(stdout)', 'for', 'scanner.Scan()', '{', 'm', ':=', 'scanner.Text()', 'fmt.Println(m)', '}', '}(cmd,', 'c)', 'c', '<-', 'struct{}{}', 'cmd.Start()', 'wg.Wait()', 'fmt.Println(""done."")', '}', 'And', 'Streamer', 'sample', 'code', '(just', 'for', 'testing):', 'package', 'main', 'import', '""fmt""', 'import', '""time""', 'func', 'main()', '{', 'for', 'i', ':=', '0;', 'i', '<', '10;', 'i++', '{', 'time.Sleep(1', '*', 'time.Second)', 'fmt.Println(i,', '"":"",', 'time.Now().UTC())', '}', '}', 'And', 'see', 'func', '(c', '*Cmd)', 'StdoutPipe()', '(io.ReadCloser,', 'error)', 'Docs:', 'StdoutPipe', 'returns', 'a', 'pipe', 'that', 'will', 'be', 'connected', 'to', 'the', ""command's"", 'standard', 'output', 'when', 'the', 'command', 'starts.', 'Wait', 'will', 'close', 'the', 'pipe', 'after', 'seeing', 'the', 'command', 'exit,', 'so', 'most', 'callers', 'need', 'not', 'close', 'the', 'pipe', 'themselves;', 'however,', 'an', 'implication', 'is', 'that', 'it', 'is', 'incorrect', 'to', 'call', 'Wait', 'before', 'all', 'reads', 'from', 'the', 'pipe', 'have', 'completed.', 'For', 'the', 'same', 'reason,', 'it', 'is', 'incorrect', 'to', 'call', 'Run', 'when', 'using', 'StdoutPipe.', 'See', 'the', 'example', 'for', 'idiomatic', 'usage.', 'defer', 'func', '()', '{', 'c', '<-', 'struct', '{}{}', '}()', '2:', 'Also', 'you', 'may', 'Wait', 'using', 'sync.WaitGroup,', 'like', 'this', 'working', 'sample', 'code:', 'package', 'main', 'import', '(', '""bufio""', '""fmt""', '""os/exec""', '""sync""', ')', 'var', 'wg', 'sync', '.', 'WaitGroup', 'func', 'main', '()', '{', 'cmd', ':=', 'exec.Command(""Streamer"")', 'c', ':=', 'make', '(', 'chan', 'struct', '{})', 'wg.Add(1)', 'go', 'func', '(', 'cmd', '*', 'exec', '.', 'Cmd', ',', 'c', 'chan', 'struct', '{})', '{', 'defer', 'wg.Done()', 'stdout', ',', 'err', ':=', 'cmd.StdoutPipe()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '<-', 'c', 'scanner', ':=', 'bufio.NewScanner(stdout)', 'for', 'scanner.Scan()', '{', 'm', ':=', 'scanner.Text()', 'fmt.Println(m)', '}', '}(', 'cmd', ',', 'c', ')', 'c', '<-', 'struct', '{}{}', 'cmd.Start()', 'wg.Wait()', 'fmt.Println(""done."")', '}', 'And', 'Streamer', 'sample', 'code', '(just', 'for', 'testing):', 'package', 'main', 'import', '""fmt""', 'import', '""time""', 'func', 'main', '()', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '10', ';', 'i', '++', '{', 'time.Sleep(1 * time.Second)', 'fmt.Println(i, "":"", time.Now().UTC())', '}', '}', 'And', 'see', 'func', '(', 'c', '*', 'Cmd', ')', 'StdoutPipe', '()', '(', 'io', '.', 'ReadCloser', ',', 'error', ')', 'Docs:', 'StdoutPipe', 'returns', 'a', 'pipe', 'that', 'will', 'be', 'connected', 'to', 'the', ""command's"", 'standard', 'output', 'when', 'the', 'command', 'starts.', 'Wait', 'will', 'close', 'the', 'pipe', 'after', 'seeing', 'the', 'command', 'exit,', 'so', 'most', 'callers', 'need', 'not', 'close', 'the', 'pipe', 'themselves;', 'however,', 'an', 'implication', 'is', 'that', 'it', 'is', 'incorrect', 'to', 'call', 'Wait', 'before', 'all', 'reads', 'from', 'the', 'pipe', 'have', 'completed.', 'For', 'the', 'same', 'reason,', 'it', 'is', 'incorrect', 'to', 'call', 'Run', 'when', 'using', 'StdoutPipe.', 'See', 'the', 'example', 'for', 'idiomatic', 'usage.']"
803,38871065,"
","['From', 'godocs:', 'StdoutPipe', 'returns', 'a', 'pipe', 'that', 'will', 'be', 'connected', 'to', 'the', ""command's"", 'standard', 'output', 'when', 'the', 'command', 'starts.', 'Wait', 'will', 'close', 'the', 'pipe', 'after', 'seeing', 'the', 'command', 'exit,', 'so', 'most', 'callers', 'need', 'not', 'close', 'the', 'pipe', 'themselves;', 'however,', 'an', 'implication', 'is', 'that', 'it', 'is', 'incorrect', 'to', 'call', 'Wait', 'before', 'all', 'reads', 'from', 'the', 'pipe', 'have', 'completed.', 'You', 'are', 'calling', 'Wait()', 'immediately', 'after', 'starting', 'the', 'command.', 'So', 'the', 'pipe', 'gets', 'closed', 'as', 'soon', 'as', 'the', 'command', 'completes,', 'before', 'making', 'sure', 'you', 'have', 'read', 'all', 'the', 'data', 'from', 'the', 'pipe.', 'Try', 'moving', 'Wait()', 'to', 'your', 'go', 'routine', 'after', 'the', 'scan', 'loop.', 'go', 'func', '(', 'cmd', '*', 'exec', '.', 'Cmd', ',', 'c', 'chan', 'int', ')', '{', 'stdout', ',', '_', ':=', 'cmd.StdoutPipe()', '<-', 'c', 'scanner', ':=', 'bufio.NewScanner(stdout)', 'for', 'scanner.Scan()', '{', 'm', ':=', 'scanner.Text()', 'fmt.Println(m)', '}', 'cmd.Wait()', 'c', '<-', '1', '}(', 'cmd', ',', 'c', ')', 'cmd.Start()', 'c', '<-', '1', '//', 'This', 'is', 'here', 'so', 'we', ""don't"", 'exit', 'the', 'program', 'early,', '<-', 'c', ""There's"", 'also', 'a', 'simpler', 'way', 'to', 'do', 'things,', 'which', 'is', 'to', 'just', 'assign', 'os.stdout', 'as', 'the', ""cmd's"", 'stdout,', 'causing', 'the', 'command', 'to', 'directly', 'write', 'to', 'the', 'os.stdout:', 'cmd', ':=', 'exec.Command(""some"", ""command"")', 'cmd', '.', 'Stdout', '=', 'os', '.', 'Stdout', 'cmd.Run()']"
804,38877591,"

...as suggested in the example code here: https://github.com/aws/aws-sdk-go/blob/f1e26250235022af782521266389e4b2ae2945e4/service/s3/examples_test.go#L975

At first I thought it was an erasure issue, but after testing, I find that the time.Time value that t was pointing to escapes the block (which honestly surprised me). Maybe there's some other bug happening in between the two, but I would assume that since their tests are passing, this should work.
","['Try', 'this', 'simplification:', 'var', 't', 'time', '.', 'Time', 'if', 'fi', ',', 'err2', ':=', 'os.Stat(finalFilePath)', ';', 'err2', '==', 'nil', '{', 't', ':=', 'fi.ModTime()', '}', 'and', 'later:', 'params', ':=', '&', 's3', '.', 'GetObjectInput', '{', 'Bucket', ':', 'aws.String(bucket)', ',', 'Key', ':', 'aws.String(filename)', ',', 'IfModifiedSince', ':', 'aws.Time(t)', '}', '...as', 'suggested', 'in', 'the', 'example', 'code', 'here:', 'https://github.com/aws/aws-sdk-go/blob/f1e26250235022af782521266389e4b2ae2945e4/service/s3/examples_test.go#L975', 'At', 'first', 'I', 'thought', 'it', 'was', 'an', 'erasure', 'issue,', 'but', 'after', 'testing,', 'I', 'find', 'that', 'the', 'time.Time', 'value', 'that', 't', 'was', 'pointing', 'to', 'escapes', 'the', 'block', '(which', 'honestly', 'surprised', 'me).', 'Maybe', ""there's"", 'some', 'other', 'bug', 'happening', 'in', 'between', 'the', 'two,', 'but', 'I', 'would', 'assume', 'that', 'since', 'their', 'tests', 'are', 'passing,', 'this', 'should', 'work.']"
805,38885186,"

Keeping them lower case does have its purpose, particularly if you want to protect it from inadvertent use outside the package.
","['Capitalize', 'the', 'function', 'within', 'your', 'package', 'that', 'you', 'want', 'other', 'functions', 'to', 'read:', 'func', 'Add', '(', 'x', ',', 'y', 'int', ')', 'int', '{', 'return', 'x', '+', 'y', '}', 'then', 'call', 'it', 'in', 'hello.go', 'like', 'this:', 'x', ':=', 'math.Add(6 + 5)', 'Keeping', 'them', 'lower', 'case', 'does', 'have', 'its', 'purpose,', 'particularly', 'if', 'you', 'want', 'to', 'protect', 'it', 'from', 'inadvertent', 'use', 'outside', 'the', 'package.']"
806,38898596,"

Did you want + 1000?
","['Use', 'this:', '""$center""', ':', '[]', 'interface', '{}{', 'j', '.', 'Location', '.', 'Coordinates', ',', '5000', '}', 'This', 'line', 'is', 'probably', 'an', 'error:', 'time.Now().Unix()', '*', '1000', 'Did', 'you', 'want', '+', '1000?']"
807,38923623,"

You can then safely pass bufCopy to the goroutines, or simply use it directly in the closure.
","['The', 'goroutines', 'are', 'only', 'working', 'on', 'copies', 'of', 'the', 'slice', 'headers,', 'the', 'underlying', 'arrays', 'are', 'the', 'same.', 'To', 'make', 'a', 'copy', 'of', 'a', 'slice,', 'you', 'need', 'to', 'use', 'copy', '(or', 'append', 'to', 'a', 'different', 'slice).', 'buf_Seq', '=', 'append', '(', 'buf_Seq', ',', 'line', ')', 'bufCopy', ':=', 'make', '([]', 'string', ',', 'len', '(', 'buf_Seq', '))', 'copy', '(', 'bufCopy', ',', 'buf_Seq', ')', 'You', 'can', 'then', 'safely', 'pass', 'bufCopy', 'to', 'the', 'goroutines,', 'or', 'simply', 'use', 'it', 'directly', 'in', 'the', 'closure.']"
808,38923640,"
","['The', 'data', 'race', 'exists', 'because', 'slices', 'are', 'reference', 'types', 'in', 'Go.', 'They', 'are', 'generally', 'passed', 'by', 'value,', 'but', 'being', 'reference', 'types,', 'any', 'changes', 'made', 'to', 'the', 'one', 'value', 'is', 'reflected', 'in', 'another.', 'Consider:', 'func', 'f', '(', 'xs', '[]', 'string', ')', '{', 'xs', '[', '0', ']', '=', '""changed_in_f""', '}', 'func', 'main', '()', '{', 'xs', ':=', '[]', 'string', '{', '""set_in_ main""', ',', '""asd""', '}', 'fmt.Println(""Before call:"", xs)', 'f', '(', 'xs', ')', 'fmt.Println(""After call:"", xs)', 'var', 'ys', '[]', 'string', 'ys', '=', 'xs', 'ys', '[', '0', ']', '=', '""changed_through_ys""', 'fmt.Println(""After ys:"", xs)', '}', 'This', 'prints:', 'Before', 'call', ':', '[', 'set_in_main', 'asd', ']', 'After', 'call', ':', '[', 'chan', 'ged_in_f', 'asd', ']', 'After', 'ys', ':', '[', 'chan', 'ged_through_ys', 'asd', ']', 'This', 'happens', 'because', 'all', 'three', 'slices', 'share', 'the', 'same', 'underlying', 'array', 'in', 'memory.', 'More', 'details', 'here.', 'This', 'is', 'what', 'might', 'be', 'happening', 'when', 'you', 'pass', 'buf_Seq', 'to', 'search_gene2.', 'A', 'new', 'slice', 'value', 'is', 'passed', 'to', 'each', 'call,', 'however,', 'each', 'slice', 'value', 'may', 'be', 'referring', 'to', 'the', 'same', 'underlying', 'array,', 'causing', 'potential', 'race', 'condition', '(call', 'to', 'append', 'may', 'change', 'the', 'underlying', 'array', 'of', 'a', 'slice).', 'To', 'solve', 'the', 'problem,', 'try', 'this', 'in', 'your', 'main:', 'bufCopy', ':=', 'make', '([]', 'string', ',', 'len', '(', 'buf_Seq', '))', '//', 'make', 'a', 'copy', 'of', 'buf_Seq', 'in', 'an', 'entirely', 'separate', 'slice', 'copy', '(', 'buffCopy', ',', 'buf_Seq', ')', 'go', 'func', '(', 'genes', ',', 'buf_Seq', '[]', 'string', ')', '{', 'defer', 'wg.Done()', 'queue', '<-', 'search_gene2', '(', 'genes', ',', 'bufCopy', ')', '}(', 'genes', ',', 'buf_Seq', ')', '}']"
809,38923846,"The slices are indeed copies, but slices themselves are reference types.  A slice, fundamentally, is a 3-word structure.  It contains a pointer to the start of an underlying array, an integer denoting the current number of elements in the slice, and another integer denoting the capacity of the underlying array.  When you pass a slice into a function, a copy is made of this slice ""header"" structure, but the header still refers to the same underlying array as the header that was passed in.

This means any changes you make to the slice header itself, like sub-slicing it, appending to it enough to trigger a resize (and thus a reallocation to a new location, with a new start pointer), etc will only be reflected in the slice header inside that function.  Any changes to the underlying data itself, however, will be reflected even in the slice outside the function (unless you triggered a reallocation due by growing the slice past capacity).

Example: https://play.golang.org/p/a2y5eGulXW
","['The', 'slices', 'are', 'indeed', 'copies,', 'but', 'slices', 'themselves', 'are', 'reference', 'types.', 'A', 'slice,', 'fundamentally,', 'is', 'a', '3-word', 'structure.', 'It', 'contains', 'a', 'pointer', 'to', 'the', 'start', 'of', 'an', 'underlying', 'array,', 'an', 'integer', 'denoting', 'the', 'current', 'number', 'of', 'elements', 'in', 'the', 'slice,', 'and', 'another', 'integer', 'denoting', 'the', 'capacity', 'of', 'the', 'underlying', 'array.', 'When', 'you', 'pass', 'a', 'slice', 'into', 'a', 'function,', 'a', 'copy', 'is', 'made', 'of', 'this', 'slice', '""header""', 'structure,', 'but', 'the', 'header', 'still', 'refers', 'to', 'the', 'same', 'underlying', 'array', 'as', 'the', 'header', 'that', 'was', 'passed', 'in.', 'This', 'means', 'any', 'changes', 'you', 'make', 'to', 'the', 'slice', 'header', 'itself,', 'like', 'sub-slicing', 'it,', 'appending', 'to', 'it', 'enough', 'to', 'trigger', 'a', 'resize', '(and', 'thus', 'a', 'reallocation', 'to', 'a', 'new', 'location,', 'with', 'a', 'new', 'start', 'pointer),', 'etc', 'will', 'only', 'be', 'reflected', 'in', 'the', 'slice', 'header', 'inside', 'that', 'function.', 'Any', 'changes', 'to', 'the', 'underlying', 'data', 'itself,', 'however,', 'will', 'be', 'reflected', 'even', 'in', 'the', 'slice', 'outside', 'the', 'function', '(unless', 'you', 'triggered', 'a', 'reallocation', 'due', 'by', 'growing', 'the', 'slice', 'past', 'capacity).', 'Example:', 'https://play.golang.org/p/a2y5eGulXW']"
810,38927101,"

As other answers said: you shared same underlying array of slice with all goroutines.

I hope this helps.
","['I', 'think', 'this', 'is', 'the', 'idiomatic', 'Go', '(for', 'this', 'job):', 'A', 'code', 'is', 'worth', 'a', 'thousand', 'comments:', 'genes', '=', 'readGenes', '(', '""lists/genes.csv""', ')', '// read the gene list', 'n', ':=', 'runtime.NumCPU()', '// the number of goroutines', 'wg.Add(n + 1)', 'go', 'scan', '()', '// read the ""fasta/sequences.tsv""', 'for', 'i', ':=', '0', ';', 'i', '<', 'n', ';', 'i', '++', '{', 'go', 'search', '()', '}', 'go', 'WaitClose', '()', 'slice', ':=', '[]', 'string', '{}', 'for', 't', ':=', 'range', 'queue', '{', 'slice', '=', 'append', '(', 'slice', ',', 't', ')', '}', 'fmt.Println(slice)', 'scan()', 'reads', 'the', '""fasta/sequences.tsv""', 'to', 'this', 'channel:', 'var', 'ch', '=', 'make', '(', 'chan', 'string', ',', '100', ')', 'concurrently', 'and', 'search()', 'is', 'CPU', 'intensive', 'goroutine', 'so', 'for', 'performance', 'reason', 'the', 'number', 'of', 'goroutines', 'limited', 'to', 'NumCPU.', 'Try', 'this', 'working', 'sample', 'code', '(simulated', 'and', 'tested):', 'package', 'main', 'import', '(', '""bufio""', '""fmt""', '//', '""os""', '""runtime""', '""strings""', '""sync""', '//', '""github.com/mathpl/golang-pkg-pcre/src/pkg/pcre""', ')', 'func', 'main', '()', '{', 'genes', '=', 'readGenes', '(', '""lists/genes.csv""', ')', '// read the gene list', 'n', ':=', 'runtime.NumCPU()', '// the number of goroutines', 'wg.Add(n + 1)', 'go', 'scan', '()', '// read the ""fasta/sequences.tsv""', 'for', 'i', ':=', '0', ';', 'i', '<', 'n', ';', 'i', '++', '{', 'go', 'search', '()', '}', 'go', 'WaitClose', '()', 'slice', ':=', '[]', 'string', '{}', 'for', 't', ':=', 'range', 'queue', '{', 'slice', '=', 'append', '(', 'slice', ',', 't', ')', '}', 'fmt.Println(slice)', '}', 'var', 'wg', 'sync', '.', 'WaitGroup', 'var', 'genes', '[]', 'string', 'var', 'ch', '=', 'make', '(', 'chan', 'string', ',', '100', ')', 'var', 'queue', '=', 'make', '(', 'chan', 'string', ',', '100', ')', 'func', 'scan', '()', '{', 'defer', 'wg.Done()', 'defer', 'close', '(', 'ch', ')', 'scanner', ':=', 'bufio.NewScanner(strings.NewReader(strings.Join([]string{""A2"", ""B2"", ""C2"", ""D2"", ""E2"", ""F2"", ""G2"", ""H2"", ""I2""}, ""\\n"")))', '/*', 'f', ',', 'err', ':=', 'os.Open(""fasta/sequences.tsv"")', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'defer', 'f.Close()', 'scanner', ':=', 'bufio.NewScanner(f)', '*/', 'for', 'scanner.Scan()', '{', 'ch', '<-', 'scanner.Text()', '}', '}', 'func', 'match', '(', 'pattern', ',', 'seq', 'string', ')', 'bool', '{', '//', 'return', 'pcre.MustCompile(pattern,', '0).MatcherString(seq,', '0).Matches()', 'return', 'pattern', '[', '0', ']', '==', 'seq', '[', '0', ']', '}', 'func', 'search', '()', '{', 'defer', 'wg.Done()', 'for', 'seq', ':=', 'range', 'ch', '{', 'for', '_', ',', 'gene', ':=', 'range', 'genes', '{', 'if', 'match', '(', 'gene', ',', 'seq', ')', '{', 'queue', '<-', 'seq', 'break', '}', '}', '}', '}', 'func', 'WaitClose', '()', '{', 'wg.Wait()', 'close', '(', 'queue', ')', '}', '//', 'function', 'read', 'a', 'list', 'of', 'genes', 'and', 'return', 'a', 'slice', 'of', 'gene', 'names.', 'func', 'readGenes', '(', 'filename', 'string', ')', '[]', 'string', '{', 'return', '[]', 'string', '{', '""A1""', ',', '""B1""', ',', '""C1""', ',', '""D1""', ',', '""E1""', ',', '""F1""', ',', '""G1""', ',', '""H1""', ',', '""I1""', '}', '/*', 'var', 'genes', '[]', 'string', '// slice of genes names', 'f', ',', 'err', ':=', 'os.Open(filename)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'defer', 'f.Close()', 'scanner', ':=', 'bufio.NewScanner(f)', 'for', 'scanner.Scan()', '{', 'line', ':=', 'scanner.Text()', 'genes', '=', 'append', '(', 'genes', ',', 'line', ')', '}', 'return', 'genes', '*/', '}', 'Output:', '[', 'A2', 'B2', 'C2', 'D2', 'E2', 'F2', 'G2', 'H2', 'I2', ']', 'I', 'hope', 'this', 'could', 'help', 'for', 'your', 'real', 'case', '(comments', 'switched', 'in', 'that', 'code,', 'not', 'tested):', 'package', 'main', 'import', '(', '""bufio""', '""fmt""', '""os""', '""runtime""', '//', '""strings""', '""sync""', '""github.com/mathpl/golang-pkg-pcre/src/pkg/pcre""', '//', 'pcre', '""regexp""', ')', 'func', 'main', '()', '{', 'genes', '=', 'readGenes', '(', '""lists/genes.csv""', ')', '// read the gene list', 'n', ':=', 'runtime.NumCPU()', '// the number of goroutines', 'wg.Add(n + 1)', 'go', 'scan', '()', '// read the ""fasta/sequences.tsv""', 'for', 'i', ':=', '0', ';', 'i', '<', 'n', ';', 'i', '++', '{', 'go', 'search', '()', '}', 'go', 'WaitClose', '()', 'slice', ':=', '[]', 'string', '{}', 'for', 't', ':=', 'range', 'queue', '{', 'slice', '=', 'append', '(', 'slice', ',', 't', ')', '}', 'fmt.Println(slice)', '}', 'var', 'wg', 'sync', '.', 'WaitGroup', 'var', 'genes', '[]', 'string', 'var', 'ch', '=', 'make', '(', 'chan', 'string', ',', '100', ')', 'var', 'queue', '=', 'make', '(', 'chan', 'string', ',', '100', ')', 'func', 'scan', '()', '{', 'defer', 'wg.Done()', 'defer', 'close', '(', 'ch', ')', '//', 'scanner', ':=', 'bufio.NewScanner(strings.NewReader(strings.Join([]string{""A2"",', '""B2"",', '""C2"",', '""D2"",', '""E2"",', '""F2"",', '""G2"",', '""H2"",', '""I2""},', '""\\n"")))', 'f', ',', 'err', ':=', 'os.Open(""fasta/sequences.tsv"")', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'defer', 'f.Close()', 'scanner', ':=', 'bufio.NewScanner(f)', 'for', 'scanner.Scan()', '{', 'ch', '<-', 'scanner.Text()', '}', '}', 'func', 'match', '(', 'pattern', ',', 'seq', 'string', ')', 'bool', '{', 'return', 'pcre.MustCompile(pattern, 0).MatcherString(seq, 0).Matches()', '//', 'return', 'pattern[0]', '==', 'seq[0]', '//', 'return', 'pcre.MustCompile(pattern).Match([]byte(seq))', '}', 'func', 'search', '()', '{', 'defer', 'wg.Done()', 'for', 'seq', ':=', 'range', 'ch', '{', 'for', '_', ',', 'gene', ':=', 'range', 'genes', '{', 'if', 'match', '(', 'gene', ',', 'seq', ')', '{', 'queue', '<-', 'seq', 'break', '}', '}', '}', '}', 'func', 'WaitClose', '()', '{', 'wg.Wait()', 'close', '(', 'queue', ')', '}', '//', 'function', 'read', 'a', 'list', 'of', 'genes', 'and', 'return', 'a', 'slice', 'of', 'gene', 'names.', 'func', 'readGenes', '(', 'filename', 'string', ')', '[]', 'string', '{', '//', 'return', '[]string{""A1"",', '""B1"",', '""C1"",', '""D1"",', '""E1"",', '""F1"",', '""G1"",', '""H1"",', '""I1""}', 'var', 'genes', '[]', 'string', '// slice of genes names', 'f', ',', 'err', ':=', 'os.Open(filename)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'defer', 'f.Close()', 'scanner', ':=', 'bufio.NewScanner(f)', 'for', 'scanner.Scan()', '{', 'line', ':=', 'scanner.Text()', 'genes', '=', 'append', '(', 'genes', ',', 'line', ')', '}', 'return', 'genes', '}', 'problems', 'of', 'your', 'code:', '1-', 'in', 'read_genes', '(', 'filename', 'string', ')', '[]', 'string', 'you', 'should', 'check', 'for', 'errors:', 'f', ',', 'err', ':=', 'os.Open(filename)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '2-', 'in', 'read_genes(filename', 'string)', '[]string', 'Close', 'Opened', 'file:', 'defer', 'f.Close()', '3-', 'After', 'filename', ':=', '""fasta/sequences.tsv""', 'you', 'should', 'check', 'for', 'errors:', 'f,', 'err', ':=', 'os.Open(filename)', 'if', 'err!=nil{', 'panic(err)', '}', '4-', 'Afterfilename', ':=', '""fasta/sequences.tsv""', 'Close', 'Opened', 'file:', 'defer', 'f.Close()', '5-', 'Inside', 'for', 'scanner.Scan()', '{', 'if', 'this', 'file', 'fasta/sequences.tsv', 'does', 'not', 'contain', 'multiples', 'of', '100', 'lines', 'if', 'n', '==', 'read_buff', '{', 'will', 'not', 'succeeds', 'for', 'last', 'slice', 'and', 'you', 'will', 'miss', 'it.', '6-', 'How', 'many', 'CPU', 'cores', 'do', 'you', 'have?', 'You', 'should', 'limit', 'the', 'number', 'of', 'goroutines.', '7-', 'your', 'main', 'question:', 'I', 'made', 'a', 'Minimal,', 'Complete,', 'and', 'Verifiable', 'example', '(still', 'problem', '5', 'exists):', 'package', 'main', 'import', '(', '""bufio""', '""fmt""', '""strings""', '""sync""', ')', 'func', 'match', '(', 'pattern', ',', 'str', 'string', ')', 'bool', '{', 'return', 'pattern', '[', '0', ']', '==', 'str', '[', '0', ']', '}', 'func', 'search_gene2', '(', 'genes', ',', 'seqs', '[]', 'string', ')', '(', 'res', '[]', 'string', ')', '{', 'for', '_', ',', 'r', ':=', 'range', 'seqs', '{', 'for', '_', ',', 'i', ':=', 'range', 'genes', '{', 'if', 'match', '(', 'i', ',', 'r', ')', '{', 'res', '=', 'append', '(', 'res', ',', 'r', ')', '// is the gene matches the gene name is append to res', 'break', '}', '}', '}', 'return', '}', 'func', 'main', '()', '{', 'read_buff', ':=', '2', '// the number of sequences analysed by one goroutine', 'var', 'wg', 'sync', '.', 'WaitGroup', 'queue', ':=', 'make', '(', 'chan', '[]', 'string', ',', 'read_buff', ')', 'genes', ':=', '[]', 'string', '{', '""A1""', ',', '""B1""', ',', '""C1""', ',', '""D1""', ',', '""E1""', ',', '""F1""', ',', '""G1""', ',', '""H1""', ',', '""I1""', '}', 'sequences', ':=', 'strings.Join([]string{""A2"", ""B2"", ""C2"", ""D2"", ""E2"", ""F2"", ""G2"", ""H2"", ""I2""}, ""\\n"")', 'scanner', ':=', 'bufio.NewScanner(strings.NewReader(sequences))', 'buf_Seq', ':=', 'make', '([]', 'string', ',', '0', ',', 'read_buff', ')', 'for', 'n', ':=', '1', ';', 'scanner.Scan()', ';', 'n', '++', '{', 'line', ':=', 'scanner.Text()', 'buf_Seq', '=', 'append', '(', 'buf_Seq', ',', 'line', ')', '// store the sequences into buf_Seq', 'if', 'n', '==', 'read_buff', '{', '// when the read buffer contains 100 sequences one goroutine analyses them', 'wg.Add(1)', 'temp', ':=', 'make', '([]', 'string', ',', 'n', ')', 'copy', '(', 'temp', ',', 'buf_Seq', ')', 'buf_Seq', '=', 'buf_Seq', '[:', '0', ']', '// reset buf_Seq', 'n', '=', '0', '// reset the sequences counter', 'go', 'func', '(', 'genes', ',', 'Seq', '[]', 'string', ')', '{', 'defer', 'wg.Done()', 'fmt.Println(Seq)', 'queue', '<-', 'search_gene2', '(', 'genes', ',', 'Seq', ')', '}(', 'genes', ',', 'temp', ')', '}', '}', 'go', 'func', '()', '{', 'wg.Wait()', 'close', '(', 'queue', ')', '}()', 'slice', ':=', '[]', 'string', '{}', 'for', 't', ':=', 'range', 'queue', '{', 'slice', '=', 'append', '(', 'slice', ',', 't', '...)', '}', 'fmt.Println(slice)', '}', 'output', '(5:', 'I2', '?):', '[', 'A2', 'B2', ']', '[', 'C2', 'D2', ']', '[', 'E2', 'F2', ']', '[', 'G2', 'H2', ']', '[', 'A2', 'B2', 'C2', 'D2', 'E2', 'F2', 'G2', 'H2', ']', 'here', 'is', 'the', 'solution', 'to', 'your', 'main', 'question', '(make', 'a', 'new', 'slice', 'and', 'copy', 'all', 'data', '):', 'temp', ':=', 'make', '([]', 'string', ',', 'n', ')', 'copy', '(', 'temp', ',', 'buf_Seq', ')', 'buf_Seq', '=', 'buf_Seq', '[:', '0', ']', '// reset buf_Seq', 'n', '=', '0', '// reset the sequences counter', 'go', 'func', '(', 'genes', ',', 'Seq', '[]', 'string', ')', '{', 'defer', 'wg.Done()', 'fmt.Println(Seq)', 'queue', '<-', 'search_gene2', '(', 'genes', ',', 'Seq', ')', '}(', 'genes', ',', 'temp', ')', 'cause', 'of', 'this:', 'Found', '1', 'data', 'race(s)', 'exit', 'status', '66', 'line', '71', 'is', ':', 'copy', '(', 'bufCopy', ',', 'buf_Seq', ')', 'line', '63', 'is', ':', 'buf_Seq', '=', 'append', '(', 'buf_Seq', ',', 'line', ')', 'line', '73', 'is', ':}(', 'genes', ',', 'buf_Seq', ')', 'As', 'other', 'answers', 'said:', 'you', 'shared', 'same', 'underlying', 'array', 'of', 'slice', 'with', 'all', 'goroutines.', 'I', 'hope', 'this', 'helps.']"
811,38940489,"Yes, You do need to have all dependencies into your repository. 

In fact when you run godep save ./... and you are using go 1.5 or greater, Godep will automatically put dependencies in a directory named vendor (inside root directory of your repo). You need to commit both Godep and vendor directory to your repository.

On side note while adding vendor directory use -f flag to add all files in it. It is needed as some files/directory might not be committed depending on your gitignore file and that will cause build failure in heroku. As a standard practice you can exeute following command to after adding dependencies using godep.


  git add -f vendor/ Godep/
  
  git commit -a -m ""Vendorizing dependencies""

","['As', 'other', 'answers', 'said:', 'you', 'shared', 'same', 'underlying', 'array', 'of', 'slice', 'with', 'all', 'goroutines.', 'I', 'hope', 'this', 'helps.']"
812,38958767,"
","['I', 'do', 'not', 'know', 'which', 'proto', 'generation', 'package', 'you', 'are', 'using,', 'but', 'with', 'github', '.', 'com/golang/protobuf/proto', 'you', 'also', 'get', 'the', 'reverse', 'mapping', 'of', 'enums.', 'Example', 'xyz.pb.go', 'generated', 'file:', 'type', 'TimeInterval', 'int32', 'const', '(', 'TimeInterval_TI_UNKNOWN', 'TimeInterval', '=', '0', 'TimeInterval_TI_HOUR', 'TimeInterval', '=', '1', 'TimeInterval_TI_DAY', 'TimeInterval', '=', '2', 'TimeInterval_TI_WEEK', 'TimeInterval', '=', '3', 'TimeInterval_TI_MONTH', 'TimeInterval', '=', '4', 'TimeInterval_TI_QUARTER', 'TimeInterval', '=', '5', 'TimeInterval_TI_YEAR', 'TimeInterval', '=', '6', ')', 'var', 'TimeInterval_name', '=', 'map', '[', 'int32', ']', 'string', '{', '0', ':', '""TI_UNKNOWN""', ',', '1', ':', '""TI_HOUR""', ',', '2', ':', '""TI_DAY""', ',', '3', ':', '""TI_WEEK""', ',', '4', ':', '""TI_MONTH""', ',', '5', ':', '""TI_QUARTER""', ',', '6', ':', '""TI_YEAR""', ',', '}', 'var', 'TimeInterval_value', '=', 'map', '[', 'string', ']', 'int32', '{', '""TI_UNKNOWN""', ':', '0', ',', '""TI_HOUR""', ':', '1', ',', '""TI_DAY""', ':', '2', ',', '""TI_WEEK""', ':', '3', ',', '""TI_MONTH""', ':', '4', ',', '""TI_QUARTER""', ':', '5', ',', '""TI_YEAR""', ':', '6', ',', '}', 'func', '(', 'x', 'TimeInterval', ')', 'String', '()', 'string', '{', 'return', 'proto.EnumName(TimeInterval_name, int32(x))', '}', 'func', '(', 'TimeInterval', ')', 'EnumDescriptor', '()', '([]', 'byte', ',', '[]', 'int', ')', '{', 'return', 'fileDescriptor0', ',', '[]', 'int', '{', '0', '}', '}', 'So', 'with', 'this', 'you', 'could', 'test', 'for', 'existence', 'in', 'the', 'following', 'manner:', 'if', '_', ',', 'found', ':=', 'TimeInterval_name', '[', 'testinputint', '];', 'found', '{', '//', 'all', 'ok', '}', 'else', '{', '//', 'not', 'a', 'value', 'for', 'this', 'enum', '}']"
813,38966338,"Please see this oracle blog post. Appengine runs JDK7 and it supports TLSv1.2 but the default protocol is TLSV1

So it first tries to make connection in v1 and if it doesnt support try the other protocols v1.1 and then v1.2 

As far as I know you cannot pass {-Dhttps.protocols=TLSv1.2} to GAE but you may be able to set it through code
{System.setProperty(""https.protocols"", ""TLSv1.2"");}
","['Please', 'see', 'this', 'oracle', 'blog', 'post.', 'Appengine', 'runs', 'JDK7', 'and', 'it', 'supports', 'TLSv1.2', 'but', 'the', 'default', 'protocol', 'is', 'TLSV1', 'So', 'it', 'first', 'tries', 'to', 'make', 'connection', 'in', 'v1', 'and', 'if', 'it', 'doesnt', 'support', 'try', 'the', 'other', 'protocols', 'v1.1', 'and', 'then', 'v1.2', 'As', 'far', 'as', 'I', 'know', 'you', 'cannot', 'pass', '{-Dhttps.protocols=TLSv1.2}', 'to', 'GAE', 'but', 'you', 'may', 'be', 'able', 'to', 'set', 'it', 'through', 'code', '{System.setProperty(""https.protocols"",', '""TLSv1.2"");}']"
814,39028462,"

Notice that the ""Errorf"" function doesn't print anything to stdout. It creates an error by formatting the text and arguments you provide and simply returns that error. What you really want is ""fmt.Printf"".
","['Change', 'the', 'nested', 'line', 'of', 'your', 'main', 'function', 'from:', 'fmt.Errorf(""Error: %v"", err)', 'To:', 'fmt.Printf(""Error: %v"", err)', 'Notice', 'that', 'the', '""Errorf""', 'function', ""doesn't"", 'print', 'anything', 'to', 'stdout.', 'It', 'creates', 'an', 'error', 'by', 'formatting', 'the', 'text', 'and', 'arguments', 'you', 'provide', 'and', 'simply', 'returns', 'that', 'error.', 'What', 'you', 'really', 'want', 'is', '""fmt.Printf"".']"
815,39059763,"

From the appengine documentation it appears you can use the net/http package as usual with a few tweaks.
","['From', 'Go', 'net/http', 'documentation:', 'For', 'control', 'over', 'proxies,', 'TLS', 'configuration,', 'keep-alives,', 'compression,', 'and', 'other', 'settings,', 'create', 'a', 'Transport:', 'tr', ':=', '&', 'http', '.', 'Transport', '{', 'TLSClientConfig', ':', '&', 'tls', '.', 'Config', '{...},', 'DisableCompression', ':', 'true', ',', '}', 'client', ':=', '&', 'http', '.', 'Client', '{', 'Transport', ':', 'tr', '}', 'From', 'the', 'appengine', 'documentation', 'it', 'appears', 'you', 'can', 'use', 'the', 'net/http', 'package', 'as', 'usual', 'with', 'a', 'few', 'tweaks.']"
816,39132056,"

","['You', 'may', 'use', 'one', 'func', 'Save', '(', 'd', 'interface', '{})', 'like', 'this:', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', ')', 'type', 'User', 'struct', '{', 'ID', 'int', 'Name', 'string', '}', 'type', 'Admin', 'struct', '{', 'User', 'Level', 'int', '}', 'func', 'main', '()', '{', 'Save', '(', 'User', '{})', 'Save', '(', 'Admin', '{})', '}', 'func', 'Save', '(', 'd', 'interface', '{})', '{', 'body', ',', 'err', ':=', 'json.Marshal(d)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'st', ':=', 'string', '(', 'body', ')', 'fmt.Println(st)', '}', 'output:', '{', '""ID""', ':', '0', ',', '""Name""', ':', '""""', '}', '{', '""ID""', ':', '0', ',', '""Name""', ':', '""""', ',', '""Level""', ':', '0', '}', 'for', 'your', 'case,', 'use', 'this', 'one', 'function', 'for', 'all', 'types:', 'func', 'Save', '(', 'i', 'interface', '{},', 'id', 'int', ')', '{', 'data', ',', 'err', ':=', 'json.Marshal(i)', 'check', '(', 'err', ')', 'if', 'id', '==', '0', '{', '_', ',', 'err', '=', 'app', '.', 'DB.Exec(`INSERT INTO users(data) VALUES ($1) `, string(data))', '}', 'else', '{', '_', ',', 'err', '=', 'app', '.', 'DB.Exec(`UPDATE users SET data = $1 WHERE id=$2`, string(data), id)', '}', 'check', '(', 'err', ')', '}', 'And', 'call', 'it', 'like', 'this:', 'u', ':=', 'User', '{}', 'a', ':=', 'Admin', '{}', 'Save', '(', 'u', ',', 'u', '.', 'ID', ')', 'Save', '(', 'a', ',', 'a', '.', 'ID', ')', 'And', 'Yes,', 'this', 'is', 'even', 'simplifies', 'call', 'to', 'Save', 'to', 'one', 'parameter:', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', ')', 'type', 'Model', 'interface', '{', 'ID', '()', 'int', 'setID', '(', 'int', ')', '}', 'type', 'User', 'struct', '{', 'Id', 'int', 'Name', 'string', '}', 'func', '(', 't', 'User', ')', 'ID', '()', 'int', '{', 'return', 't', '.', 'Id', '}', 'func', '(', 't', 'User', ')', 'setID', '(', 'id', 'int', ')', '{', 't', '.', 'Id', '=', 'id', '}', 'type', 'Admin', 'struct', '{', 'User', 'Level', 'int', '}', 'func', 'main', '()', '{', 'Save', '(', 'User', '{})', 'Save', '(', 'Admin', '{})', '}', 'func', 'Save', '(', 'd', 'Model', ')', '{', 'body', ',', 'err', ':=', 'json.Marshal(d)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'st', ':=', 'string', '(', 'body', ')', 'fmt.Println(st)', 'fmt.Println(""ID is "", d.ID())', '}', 'output:', '{', '""Id""', ':', '0', ',', '""Name""', ':', '""""', '}', 'ID', 'is', '0', '{', '""Id""', ':', '0', ',', '""Name""', ':', '""""', ',', '""Level""', ':', '0', '}', 'ID', 'is', '0', 'Now', 'You', 'may', 'use', 'this', 'one', 'function', 'for', 'all', 'types:', 'func', 'Save', '(', 'i', 'Model', ')', '{', 'data', ',', 'err', ':=', 'json.Marshal(i)', 'check', '(', 'err', ')', 'id', ':=', 'i.ID()', 'if', 'id', '==', '0', '{', '_', ',', 'err', '=', 'app', '.', 'DB.Exec(`INSERT INTO users(data) VALUES ($1) `, string(data))', '}', 'else', '{', '_', ',', 'err', '=', 'app', '.', 'DB.Exec(`UPDATE users SET data = $1 WHERE id=$2`, string(data), id)', '}', 'check', '(', 'err', ')', '}', 'And', 'call', 'it', 'like', 'this:', 'u', ':=', 'User', '{}', 'a', ':=', 'Admin', '{}', 'Save', '(', 'u', ')', 'Save', '(', 'a', ')', 'Effective', 'Go:', 'Getters', 'Go', ""doesn't"", 'provide', 'automatic', 'support', 'for', 'getters', 'and', 'setters.', ""There's"", 'nothing', 'wrong', 'with', 'providing', 'getters', 'and', 'setters', 'yourself,', 'and', ""it's"", 'often', 'appropriate', 'to', 'do', 'so,', 'but', ""it's"", 'neither', 'idiomatic', 'nor', 'necessary', 'to', 'put', 'Get', 'into', 'the', ""getter's"", 'name.', 'If', 'you', 'have', 'a', 'field', 'called', 'owner', '(lower', 'case,', 'unexported),', 'the', 'getter', 'method', 'should', 'be', 'called', 'Owner', '(upper', 'case,', 'exported),', 'not', 'GetOwner.', 'The', 'use', 'of', 'upper-case', 'names', 'for', 'export', 'provides', 'the', 'hook', 'to', 'discriminate', 'the', 'field', 'from', 'the', 'method.', 'A', 'setter', 'function,', 'if', 'needed,', 'will', 'likely', 'be', 'called', 'SetOwner.', 'Both', 'names', 'read', 'well', 'in', 'practice:', 'owner', ':=', 'obj.Owner()', 'if', 'owner', '!=', 'user', '{', 'obj.SetOwner(user)', '}']"
817,39136399,"I've done this using the runtime.Stack function. Its output is equivalent to what you get from a panic(), but without halting the program. You can set up a signal handler to dump the stack to a file/stdout, or start a goroutine to dump the stack at regular intervals, if you prefer.

You could also check out the runtime/debug package.
","[""I've"", 'done', 'this', 'using', 'the', 'runtime.Stack', 'function.', 'Its', 'output', 'is', 'equivalent', 'to', 'what', 'you', 'get', 'from', 'a', 'panic(),', 'but', 'without', 'halting', 'the', 'program.', 'You', 'can', 'set', 'up', 'a', 'signal', 'handler', 'to', 'dump', 'the', 'stack', 'to', 'a', 'file/stdout,', 'or', 'start', 'a', 'goroutine', 'to', 'dump', 'the', 'stack', 'at', 'regular', 'intervals,', 'if', 'you', 'prefer.', 'You', 'could', 'also', 'check', 'out', 'the', 'runtime/debug', 'package.']"
818,39143263,"

Output (try it on the Go Playground):

main.Small{val:1}
1


Notes:

This works for any field, not just the first one (at ""offset 0""). This also works for named fields too, not just for embedded fields. This doesn't work for unexported fields though.
","['Avoid', 'using', 'unsafe', 'whenever', 'possible.', 'The', 'above', 'task', 'can', 'be', 'done', 'using', 'reflection', '(reflect', 'package):', 'var', 'v', 'interface', '{}', '=', 'Big', '{', 'Small', '{', '1', '},', '2', '}', 'rf', ':=', 'reflect.ValueOf(v)', 's', ':=', 'rf.FieldByName(""Small"").Interface()', 'fmt.Printf(""%#v\\n"", s)', 'fmt.Printf(""%#v\\n"", s.(Small).val)', 'Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):', 'main.Small{val:1}', '1', 'Notes:', 'This', 'works', 'for', 'any', 'field,', 'not', 'just', 'the', 'first', 'one', '(at', '""offset', '0"").', 'This', 'also', 'works', 'for', 'named', 'fields', 'too,', 'not', 'just', 'for', 'embedded', 'fields.', 'This', ""doesn't"", 'work', 'for', 'unexported', 'fields', 'though.']"
819,39143331,"
","['type', 'Small', 'struct', '{', 'val', 'int', '}', 'type', 'Big', 'struct', '{', 'Small', 'bigval', 'int', '}', 'func', 'main', '()', '{', 'var', 'v', '=', 'Big', '{', 'Small', '{', '10', '},', '200', '}', 'print', '(', 'v', '.', 'val', ')', '}']"
820,39143823,"

Output:

Small val: 3

","['While', 'answer', 'with', 'reflection', 'is', 'working', 'but', 'it', 'has', 'performance', 'penalties', 'and', 'is', 'not', 'idiomatic', 'to', 'Go.', 'I', 'believe', 'you', 'should', 'use', 'interface.', 'Like', 'this', 'https://play.golang.org/p/OG1MPHjDlQ', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'MySmall', 'interface', '{', 'SmallVal', '()', 'int', '}', 'type', 'Small', 'struct', '{', 'val', 'int', '}', 'func', '(', 'v', 'Small', ')', 'SmallVal', '()', 'int', '{', 'return', 'v', '.', 'val', '}', 'type', 'Big', 'struct', '{', 'Small', 'bigval', 'int', '}', 'func', 'main', '()', '{', 'var', 'v', 'interface', '{}', '=', 'Big', '{', 'Small', '{', 'val', ':', '3', '},', '4', '}', 'fmt.Printf(""Small val: %v"", v.(MySmall).SmallVal())', '}', 'Output:', 'Small', 'val:', '3']"
821,39149407,"
","['With', 'help', 'from', 'this', 'question:', 'How', 'to', 'parse', 'http', 'headers', 'in', 'Go', 'the', 'following', 'attempt', 'with', 'http.ReadRequest()', 'works...', 'if', 'tcpLayer', ':=', 'packet.Layer(layers.LayerTypeTCP)', ';', 'tcpLayer', '!=', 'nil', '{', 'tcp', ',', '_', ':=', 'tcpLayer', '.(*', 'layers', '.', 'TCP', ')', 'if', 'len', '(', 'tcp', '.', 'Payload', ')', '!=', '0', '{', 'reader', ':=', 'bufio.NewReader(bytes.NewReader(tcp.Payload))', 'httpReq', ',', 'err', ':=', 'http.ReadRequest(reader)', '.', '..', '...', '}', '}']"
822,39151726,"
","['Because', 'echo', 'appends', 'a', '\\n', 'character.', 'Try', 'doing', 'echo', '-n:', 'echo', '-', 'n', '""sha1 this string""', '|', 'gsha256sum', 'fceab3bb749b11a43b89f21ccd28e3f5d8b38d5b23eeea960fc169ab482ee2cd', '-']"
823,39154131,"
","['I', 'use', 'the', 'first', 'approach.', 'Here', 'its', 'a', 'gulp', 'task', 'the', 'build', 'go', 'code.', 'If', 'the', 'production', 'flag', 'is', 'set,', 'it', 'runs', 'GOOS', '=', 'linux', 'CGO_ENABLED', '=', '0', 'go', 'build', 'instead', 'go', 'build.', 'So', 'the', 'binary', 'will', 'work', 'inside', 'a', 'docker', 'container', ""gulp.task('server:build', function ()"", '{', 'var', 'build', ';', 'let', 'options', '=', '{', 'env', ':', '{', ""'PATH'"", ':', 'process', '.', 'env', '.', 'PATH', ',', ""'GOPATH'"", ':', 'process', '.', 'env', '.', 'GOPATH', '}', '}', 'if', '(', 'argv', '.', 'prod', ')', '{', 'options', '.', 'env', '[', ""'GOOS'"", ']', '=', ""'linux'"", 'options', '.', 'env', '[', ""'CGO_ENABLED'"", ']', '=', ""'0'"", 'console.log(""Compiling go binarie to run inside Docker container"")', '}', 'var', 'output', '=', 'argv', '.', 'prod', 'conf', '.', 'paths', '.', 'build', '+', ""'/prod/bin'"", ':', 'conf', '.', 'paths', '.', 'build', '+', ""'/dev/bin'"", ';', 'build', '=', 'child.spawnSync(\'go\', [\'build\', \'-o\', output, ""src/backend/main.go""], options)', ';', 'if', '(', 'build', '.', 'stderr', '.', 'length', ')', '{', 'var', 'lines', '=', 'build', '.', 'stderr.toString()', '.', 'split', '(', ""'\\n'"", ').', 'filter', '(', 'func', 'tion', '(', 'line', ')', '{', 'return', 'line', '.', 'length', '});', 'for', '(', 'var', 'l', 'in', 'lines', ')', 'util', '.', 'log', '(', 'util', '.', 'colors', '.', 'red', '(', ""'Error (go install): '"", '+', 'lines', '[', 'l', ']', '));', 'notifier', '.', 'notify', '({', 'title', ':', ""'Error (go install)'"", ',', 'message', ':', 'lines', '});', '}', 'return', 'build', ';', '});']"
824,39161250," should do.
Have a custom JSON unmarshaling method for this type which would do whatever handling it wants.

","['You', ""can't"", 'because', 'in', 'Go', 'types', 'do', 'not', 'have', 'constructors.', 'Instead,', 'have', 'either', 'an', 'explicit', 'initializer', 'function', '(or', 'method', 'on', 'the', 'pointer', 'receiver)', 'or', 'a', 'constructor/factory', 'function', '(these', 'are', 'conventionally', 'called', 'New', 'so', 'yours', 'would', 'be', 'NewFileData)', 'which', 'would', 'return', 'an', 'initialized', 'value', 'of', 'your', 'type.', 'All-in-all,', 'I', 'have', 'a', 'feeling', 'this', 'looks', 'like', 'an', 'XY', 'problem.', 'From', 'your', 'question,', 'it', 'appears', 'you', 'want', 'to', 'have', 'a', 'default', 'value', 'on', 'one', 'of', 'your', 'fields', 'if', 'nothing', 'was', 'unmarshaled.', 'If', 'so,', 'just', 'post-process', 'the', 'values', 'of', 'this', 'type', 'unmarshaled', 'from', 'JSON', 'and', 'if', 'nothing', 'was', 'unmarshaled', 'to', 'Encodning', 'set', 'it', 'to', 'whatever', 'default', 'you', 'want.', 'Alternatively', 'you', 'might', 'consider', 'this', 'approach:', 'Have', 'a', 'custom', 'type', 'for', 'your', 'field.', 'Something', 'like', 'type', 'EncodingMethod', 'string', 'should', 'do.', 'Have', 'a', 'custom', 'JSON', 'unmarshaling', 'method', 'for', 'this', 'type', 'which', 'would', 'do', 'whatever', 'handling', 'it', 'wants.']"
825,39161269,"

Working code: https://play.golang.org/p/y5_wBgHGJk
","['Since', 'your', 'FileData', ""isn't"", 'too', 'complex,', 'you', 'can', 'easily', 'make', 'use', 'of', 'json.Unmarshaler', 'interface.', 'Declare', 'Encoding', 'as', 'a', 'separate', 'type', 'and', 'set', 'the', 'default', 'value', 'in', 'the', 'unmarshal', 'method:', 'type', 'FileData', 'struct', '{', 'UID', 'string', 'json', ':', '""uid""', 'Size', 'int', 'json', ':', '""size""', 'Content', 'string', 'json', ':', 'content', 'Encoding', 'Encoding', 'json', ':', 'encoding', '// declared as a custom type', 'User', 'string', 'json', ':', '""user""', '}', 'type', 'Encoding', 'string', '//', 'implement', 'the', 'Unmarshaler', 'interface', 'on', 'Encoding', 'func', '(', 'e', '*', 'Encoding', ')', 'UnmarshalJSON', '(', 'b', '[]', 'byte', ')', 'error', '{', 'var', 's', 'string', 'if', 'err', ':=', 'json.Unmarshal(b, &s)', ';', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'if', 's', '==', '""""', '{', '*', 'e', '=', 'Encoding', '(', '""base64""', ')', '}', 'else', '{', '*', 'e', '=', 'Encoding', '(', 's', ')', '}', 'return', 'nil', '}', 'Now', 'when', 'you', 'encode', 'a', 'json', 'with', 'empty', 'Encoding', 'value,', ""it'll"", 'be', 'set', 'to', 'base64:', 'var', 'data1', '=', '[]', 'byte', '(', '{', '""uid""', ':', '""UID""', ',', '""size""', ':', '10', ',', '""content""', ':', '""CONTENT""', ',', '""encoding""', ':', '""ASCII""', ',', '""user""', ':', '""qwe""', '}', ')', 'var', 'data2', '=', '[]', 'byte', '(', '{', '""uid""', ':', '""UID""', ',', '""size""', ':', '10', ',', '""content""', ':', '""CONTENT""', ',', '""encoding""', ':', '""""', ',', '""user""', ':', '""qwe""', '}', ')', 'func', 'main', '()', '{', 'fmt.Println(""Hello, playground"")', 'f', ':=', 'FileData', '{}', 'if', 'e', ':=', 'json.Unmarshal(data1, &f)', ';', 'e', '!=', 'nil', '{', 'fmt.Println(""Error:"", e)', '}', 'fmt.Println(f, f.Encoding)', 'if', 'e', ':=', 'json.Unmarshal(data2, &f)', ';', 'e', '!=', 'nil', '{', 'fmt.Println(""Error:"", e)', '}', 'fmt.Println(f, f.Encoding)', '}', 'Output:', '{', 'UID', '10', 'CONTENT', 'ASCII', 'qwe', '}', 'ASCII', '{', 'UID', '10', 'CONTENT', 'base64', 'qwe', '}', 'base64', 'Working', 'code:', 'https://play.golang.org/p/y5_wBgHGJk']"
826,39161308,"You can set default value when you init your 'FileData'
See my example: https://play.golang.org/p/QXwDG7_mul
Page int has default value 33


package main

import (
    ""encoding/json""
    ""fmt""
)

type Response2 struct {
    Page   int      `json:""page""`
    Fruits []string `json:""fruits""`
}

func main() {
    str := `{""fruits"": [""apple"", ""peach""]}`
    res := Response2{Page: 33 /*Default value*/}
    json.Unmarshal([]byte(str), &res)
    fmt.Println(res)
}

","['Working', 'code:', 'https://play.golang.org/p/y5_wBgHGJk']"
827,39166548,"Goroutine deadlock analysis is handled well using the trace command.

First, you need to get data to run a trace against, which you want at any point. You can get this by using the pprof package or the trace package.

https://golang.org/pkg/net/http/pprof/
https://golang.org/pkg/runtime/trace/

The pprof package will add its HTTP handlers to a web server and let you collect trace data while the app is running, while the trace package lets you write out a trace to a stream (e.g. a file), but I haven't tried that myself.

Once you've collected trace data, you can run the trace command against the data you've collected to produce a web view of the state:

https://golang.org/cmd/trace/

There's an example output here:

https://talks.golang.org/2015/dynamic-tools.slide#30
","['Working', 'code:', 'https://play.golang.org/p/y5_wBgHGJk']"
828,39185719,"

https://play.golang.org/p/0v6wOzxJ1H
","[""Here's"", 'a', 'simple', 'function', 'using', 'regex:', 'import', '(', '""strconv""', '""regexp""', ')', 'func', 'for', 'matCommas', '(', 'num', 'int', ')', 'string', '{', 'str', ':=', 'strconv.Itoa(num)', 're', ':=', 'regexp.MustCompile(""(\\\\d+)(\\\\d{3})"")', 'for', 'i', ':=', '0', ';', 'i', '<', '(', 'len', '(', 'str', ')', '-', '1', ')', '/', '3', ';', 'i', '++', '{', 'str', '=', 're.ReplaceAllString(str, ""$1,$2"")', '}', 'return', 'str', '}', 'Example:', 'fmt.Println(formatCommas(1000))', 'fmt.Println(formatCommas(-1000000000))', 'Output:', '1', ',', '0', '0', '0', '-', '1', ',', '0', '0', '0', ',', '0', '0', '0', ',', '0', '0', '0', 'https://play.golang.org/p/0v6wOzxJ1H']"
829,39192294,"

But if you need mvc I suggest that you use some framework (Revel for example). I am using it all the time. It gives you that basic mvc functionality if you like and all other stuff is really up to you.
You keep you business logic in some helpers, models in models file etc.

You can check Revel main controller structure here:
https://github.com/revel/revel/blob/master/controller.go
","['You', 'can', 'have', 'one', 'file', 'called', 'for', 'example', 'MainController', 'where', 'you', 'can', 'make', 'functions', 'for', 'accessing', 'database,', 'sessions,', 'config', 'files', 'and', 'so', 'on.', 'All', 'you', 'have', 'to', 'do', 'really', 'from', 'there', 'is', 'to', 'say', 'something', 'like', 'this', 'for', 'example', '(inherit', 'stuff', 'from', 'some', 'other', 'controller):', '//', 'MyController.go', 'type', 'App', 'struct', '{', 'MainController', '}', 'func', '(', 'c', 'Application', ')', 'MyControllerFunc', '()', 'return', 'TypeHere', '(', 'http', '.', 'Response', 'for', 'example', ')', '{', '//', 'c.getDatabaseName', 'is', 'function', 'from', 'MainController', 'that', 'reads', 'information', 'from', 'some', 'plain', 'text', 'file', 'or', 'json', 'file', 'or', 'similar', 'someInfoFromConfigFile', '=', 'c.getDatabaseName()', 'var', 'str', '[]', 'string', 'str', '=', 'append', '(', 'str', ',', 'someInfoFromConfigFile', ')', '//', 'RenderJson', 'is', 'function', 'that', 'render', 'http', 'response', 'as', 'json', '(Content', 'type', 'plain/json)', 'return', 'c.RenderJson(str)', '}', 'But', 'if', 'you', 'need', 'mvc', 'I', 'suggest', 'that', 'you', 'use', 'some', 'framework', '(Revel', 'for', 'example).', 'I', 'am', 'using', 'it', 'all', 'the', 'time.', 'It', 'gives', 'you', 'that', 'basic', 'mvc', 'functionality', 'if', 'you', 'like', 'and', 'all', 'other', 'stuff', 'is', 'really', 'up', 'to', 'you.', 'You', 'keep', 'you', 'business', 'logic', 'in', 'some', 'helpers,', 'models', 'in', 'models', 'file', 'etc.', 'You', 'can', 'check', 'Revel', 'main', 'controller', 'structure', 'here:', 'https://github.com/revel/revel/blob/master/controller.go']"
830,39229876,"


To verify that hugo is installed globally, under any directory in command prompt type where hugo and it'll tell you where it is (in our case, c:\hugo\bin\hugo.exe)

From there you should be able to run your Hugo sites from any repository on your HD.
","['Old', 'question,', 'but', 'I', 'figured', 'this', 'could', 'help', 'somebody', 'down', 'the', 'road.', ""I'm"", 'on', 'Windows', '(yes', 'I', 'know', 'this', 'was', 'for', 'Linux)', 'and', 'was', 'running', 'Hugo', 'outside', 'the', 'created', 'directory', 'where', 'hugo.exe', 'lives.', 'Note', 'that', 'the', 'hugo.exe', ""doesn't"", 'have', 'to', 'live', 'in', 'c:\\hugo\\bin', 'as', 'per', 'the', 'example', 'below', 'Download', 'Hugo', '(64', 'or', '32-bit)', 'from', 'https://github.com/spf13/hugo/releases', 'Create', 'a', 'folder', 'on', 'your', 'C:\\', 'called', 'Hugo.', 'Create', 'another', 'folder', 'inside', 'of', 'C:\\Hugo', 'called', 'bin', 'Unzip', 'the', 'file', 'downloaded', 'from', 'the', 'HUGO', 'URL', 'into', 'the', 'bin', 'folder', 'Open', 'cmd.exe', 'to', 'add', 'the', 'path', 'to', 'HUGO', 'to', 'the', 'windows', 'PATH', 'environment', 'variables.', 'Type', 'set', 'PATH', '=%', 'PATH', '%;', 'C', ':', 'Hugo', 'bin', 'To', 'verify', 'that', 'hugo', 'is', 'installed', 'globally,', 'under', 'any', 'directory', 'in', 'command', 'prompt', 'type', 'where', 'hugo', 'and', ""it'll"", 'tell', 'you', 'where', 'it', 'is', '(in', 'our', 'case,', 'c:\\hugo\\bin\\hugo.exe)', 'From', 'there', 'you', 'should', 'be', 'able', 'to', 'run', 'your', 'Hugo', 'sites', 'from', 'any', 'repository', 'on', 'your', 'HD.']"
831,39240034,"
","['The', 'snippet', 'of', 'code', 'defines', 'one', 'variable', 'v', 'with', 'type', '*', 'account', '.', 'CreateAccountRequest', '.', 'The', 'second', 'type', 'assertion', 'attempts', 'to', 'assign', 'a', '*', 'account', '.', 'PostAccountRequest', 'to', 'the', 'variable', 'v.', 'This', 'is', 'an', 'error.', 'The', 'code', 'will', 'compile', 'if', 'you', 'create', 'a', 'second', 'variable', 'v:', 'v', ',', 'ok', ':=', 'req', '.(*', 'account', '.', 'CreateAccountRequest', ')', 'if', 'ok', '{', 'if', 'v', ',', 'ok', ':=', 'req', '.(*', 'account', '.', 'PostAccountRequest', ');', 'ok', '{', '// note "":""', 'panic', '(', 'ok', ')', '}', '}', '...', 'but', 'does', 'not', 'make', 'sense', 'because', 'v', 'can', 'only', 'be', 'one', 'of', 'the', 'struct', 'types.', 'Perhaps', 'you', 'are', 'looking', 'for', 'something', 'like', 'this:', 'var', 'name', ',', 'token', 'string', 'switch', 'v', ':=', 'v', '.(', 'type', ')', '{', 'case', '*', 'account', '.', 'CreateAccountRequest', ':', '//', 'v', 'is', 'a', '*account.CreateAccountRequest', 'in', 'this', 'branch', 'of', 'the', 'switch', 'name', '=', 'v', '.', 'Name', 'token', '=', 'v', '.', 'Token', 'case', '*', 'account', '.', 'PostAccountRequest', ':', '//', 'v', 'is', 'a', '*account.PostAccountRequest', 'in', 'this', 'branch', 'of', 'the', 'switch', 'name', '=', 'v', '.', 'Name', 'token', '=', 'v', '.', 'Token', 'default', ':', '//', 'panic?', '}']"
832,39260680,"

https://play.golang.org/p/FNzx57R2jy
","[""Go's"", 'reference', 'layout', 'uses', '-7', 'hours', 'as', 'the', 'timezone', 'offset,', 'but', 'you', 'used', '+7', 'hours:', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 'date', ':=', '""2016-07-08T08:34:24+00:00""', 'd', ',', 'err', ':=', 'time.Parse(""2006-01-02T15:04:05-07:00"", date)', 'if', 'err', '==', 'nil', '{', 'fmt.Println(d)', '}', 'else', '{', 'fmt.Println(err)', '}', '}', 'https://play.golang.org/p/FNzx57R2jy']"
833,39345982,"

...
","['Wow', 'I', 'just', 'have', 'the', 'wrong', 'type', 'in', 'this', 'line:', 'parsed', ':=', 'TimeWithoutZone', '{}', 'must', 'be', 'parsed', ':=', 'TimeTestObj', '{}', '...']"
834,39350291,"
","[""That's"", 'not', 'how', 'you', 'do', 'regex', 'with', 'mgo.', 'You', 'must', 'use', 'bson.RegEx.', 'Try', 'this:', 'bson', '.', 'M', '{', '""$match""', ':', 'bson', '.', 'M', '{', '""wordname""', ':', 'bson', '.', 'M', '{', '""$in""', ':', '[]', 'bson', '.', 'RegEx', '{{', '""^how$""', ',', '""i""', '}}}}}']"
835,39383654,"

Hopefully this will do dynamically or you can create a struct so that it can directly be decoded into that cheers
","['you', 'can', 'do', 'something', 'like', 'this', 'majorCat', ':=', 'body', '[', '""categorySlug""', ']', 'category', ':=', 'body', '[', '""category""', ']', 'subCategory', ':=', 'body', '[', '""subCategory""', ']', 'brandId', ',', 'err', ':=', 'strconv.Atoi(body[""brandId""])', 'if', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', 'result', ':=', 'database.GetMappedFields(""Brands"", bson.M{""brandId"": brandId}, bson.M{""category"": 1, ""_id"": 0})', 'internalObj', ':=', 'result', '[', '0', '][', '""category""', '].(', 'map', '[', 'string', ']', 'interface', '{})', 'finalValue', ':=', 'internalObj', '[', '""television_warrantyPeriod""', ']', 'if', 'category', '!=', '""""', '{', 'for', '_', ',', 'v', ':=', 'range', 'internalObj', '[', 'majorCat', '].([]', 'interface', '{})', '{', 'subObj', ':=', 'v', '.(', 'map', '[', 'string', ']', 'interface', '{})', 'if', 'subObj', '[', '""cat""', ']', '==', 'category', '{', 'finalValue', '=', 'subObj', '[', '""warrantyPeriod""', ']', 'if', 'subCategory', '!=', '""""', '{', 'minorObj', ':=', 'subObj', '[', '""subCategory""', '].([]', 'interface', '{})', 'for', '_', ',', 'iter', ':=', 'range', 'minorObj', '{', 'kevVal', ':=', 'iter', '.(', 'map', '[', 'string', ']', 'interface', '{})', 'if', 'kevVal', '[', '""subCat""', ']', '==', 'subCategory', '{', 'finalValue', '=', 'kevVal', '[', '""warrantyPeriod""', ']', '}', '}', '}', '}', '}', '}', 'Hopefully', 'this', 'will', 'do', 'dynamically', 'or', 'you', 'can', 'create', 'a', 'struct', 'so', 'that', 'it', 'can', 'directly', 'be', 'decoded', 'into', 'that', 'cheers']"
836,39442001,"
You describe how http protocol works, means request-response. If that all you need you may feel good with just keep-alive connections. Websocket is async in nature, messages aren't assume responses. Use-case is server-send-events for example.
In Go server uses fire-and-forget strategy. It accepts connection, spawns goroutine to handle it, forgets it and listens for a new. Spawned goroutine upgrades connection to websocket and then serves client itself without any intermediary.

","['You', 'describe', 'how', 'http', 'protocol', 'works,', 'means', 'request-response.', 'If', 'that', 'all', 'you', 'need', 'you', 'may', 'feel', 'good', 'with', 'just', 'keep-alive', 'connections.', 'Websocket', 'is', 'async', 'in', 'nature,', 'messages', ""aren't"", 'assume', 'responses.', 'Use-case', 'is', 'server-send-events', 'for', 'example.', 'In', 'Go', 'server', 'uses', 'fire-and-forget', 'strategy.', 'It', 'accepts', 'connection,', 'spawns', 'goroutine', 'to', 'handle', 'it,', 'forgets', 'it', 'and', 'listens', 'for', 'a', 'new.', 'Spawned', 'goroutine', 'upgrades', 'connection', 'to', 'websocket', 'and', 'then', 'serves', 'client', 'itself', 'without', 'any', 'intermediary.']"
837,39527767,"

Just as with the pointer-to-slice value type, you first have to initialize a value for a key with a non-nil map before you can actually ""add"" values to it. Hide this by creating your own type and adding methods.
","['With', 'slice', 'value', 'type', 'map', 'is', 'a', 'good', 'choice', 'if', 'you', 'need', 'fast', 'lookup,', 'but', 'since', 'you', 'want', 'to', 'store', 'multiple', 'values', 'for', 'the', 'same', 'key,', 'that', 'warrants', 'for', 'a', 'slice', 'as', 'the', 'value', 'type:', 'm', ':=', 'map', '[', 'int', '][]', 'interface', '{}{}', 'm', '[', '1', ']', '=', 'append', '(', 'm', '[', '1', '],', '""one""', ')', 'm', '[', '2', ']', '=', 'append', '(', 'm', '[', '2', '],', '""two""', ')', 'm', '[', '1', ']', '=', 'append', '(', 'm', '[', '1', '],', '""three""', ')', 'fmt.Println(m[1])', 'Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):', '[one', 'three]', 'Note', 'that', 'using', 'this', 'map', 'is', 'a', 'little', 'less', 'convenient,', 'as', 'when', 'you', 'want', 'to', 'add', 'a', 'new', 'value', 'you', ""don't"", ""(can't)"", 'just', 'assign', 'it', 'but', 'you', 'have', 'to', 'append', 'to', 'the', 'existing', 'slice', 'associated', 'with', 'the', 'key,', 'and', 'you', 'have', 'to', 'assign', 'back', 'the', '(potentially)', 'new', 'slice.', 'To', 'ease', 'this', '""pain"",', 'you', 'may', 'create', 'your', 'own', 'type', 'and', 'provide', 'helper', 'methods', 'to', 'support', 'different', 'operations', 'on', 'the', 'map.', 'This', 'is', 'also', 'true', 'for', 'the', 'subsequent', 'alternatives,', 'so', 'being', 'a', 'little', 'more', 'verbose', 'does', 'not', 'necessarily', 'mean', 'you', 'have', 'to', 'struggle', 'with', 'it.', 'With', 'pointer', 'to', 'slice', 'value', 'type', 'Note', 'that', 'you', 'could', 'avoid', 'having', 'to', 'reassign', 'the', 'new', 'slice', 'if', 'you', 'would', 'store', 'pointers', 'in', 'the', 'map,', 'for', 'example:', 'm', ':=', 'map', '[', 'int', ']*[]', 'interface', '{}{}', 'm', '[', '1', ']', '=', '&[]', 'interface', '{}{}', 'm', '[', '2', ']', '=', '&[]', 'interface', '{}{}', 's', ':=', 'm', '[', '1', ']', '*', 's', '=', 'append', '(*', 's', ',', '""one""', ')', 's', '=', 'm', '[', '2', ']', '*', 's', '=', 'append', '(*', 's', ',', '""two""', ')', 's', '=', 'm', '[', '1', ']', '*', 's', '=', 'append', '(*', 's', ',', '""three""', ')', 'fmt.Println(m[1])', 'Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):', '&[one', 'three]', 'You', 'still', 'have', 'to', 'assign', 'back', 'the', 'slice', 'returned', 'by', 'append(),', 'but', 'not', 'to', 'a', 'map', 'key', 'but', 'to', 'the', 'pointed', 'value', '(acquired', 'from', '/', 'stored', 'in', 'the', 'map).', 'But', 'as', 'you', 'can', 'see,', 'handling', 'it', 'is', 'more', 'hassle,', 'but', 'may', 'be', 'more', 'efficient', 'if', 'you', 'add', 'new', 'elements', 'frequently.', 'Also', 'note', 'that', 'since', 'zero', 'value', 'for', 'any', 'pointer', 'type', 'is', 'nil,', 'before', 'you', 'could', 'add', 'an', 'element', 'for', 'a', 'key,', 'you', 'first', 'have', 'to', 'initialize', 'it', 'with', 'a', 'pointer', 'to', 'an', 'existing,', 'non-nil', 'slice', '(but', 'if', 'you', 'create', 'your', 'own', 'type,', 'you', 'can', 'hide', 'this', 'check', 'and', 'initialization).', 'With', 'map', 'as', 'value', 'type', 'Previous', 'solutions', '(with', 'slices', 'in', 'keys)', 'are', 'good,', 'but', 'if', 'you', 'also', 'have', 'to', 'support', 'frequent', 'removal', 'operation,', 'they', 'lag', 'behind,', 'as', 'whenever', 'you', 'have', 'to', 'remove', 'an', 'element,', 'you', 'index', 'the', 'map', 'to', 'get', 'the', 'slice,', 'and', 'you', 'have', 'to', 'search', 'this', 'slice', 'and', 'remove', 'the', 'element', 'from', 'it', '(and', 'removing', 'from', 'a', 'slice', 'includes', 'slice', 'header', 'update', 'and', 'copying', 'subsequent', 'elements', 'to', '1-less', 'indices).', 'If', 'this', 'slice', 'is', 'not', 'sorted,', 'this', 'is', 'a', 'linear', 'search', 'and', 'so', 'it', 'has', 'O(n)', 'complexity', '(where', 'n', 'is', 'the', 'number', 'of', 'elements', 'associated', 'with', 'the', 'same', 'key,', 'not', 'the', 'number', 'of', 'keys', 'in', 'the', 'map).', 'May', 'not', 'be', 'acceptable', 'depending', 'on', 'your', 'case.', 'To', 'support', 'fast', 'element', 'removal,', 'you', 'may', 'keep', 'the', 'value', 'slices', 'sorted,', 'and', 'so', 'finding', 'the', 'removable', 'element', 'in', 'them', 'is', 'O(log(n))', 'complexity', '–', 'acceptable', 'in', 'most', 'cases.', 'An', 'even', 'faster', 'solution', 'may', 'use', 'another', 'map', '(as', 'a', 'set,', 'see', 'example', '#1', 'and', 'example', '#2)', 'as', 'the', 'value', 'type,', 'which', 'will', 'be', 'O(1)', 'complexity', 'for', 'removals', 'too.', 'Cool.', 'It', 'could', 'look', 'like', 'this:', 'm', ':=', 'map', '[', 'int', ']', 'map', '[', 'interface', '{}]', 'bool', '{}', 'm', '[', '1', ']', '=', 'map', '[', 'interface', '{}]', 'bool', '{}', 'm', '[', '2', ']', '=', 'map', '[', 'interface', '{}]', 'bool', '{}', 'm', '[', '1', '][', '""one""', ']', '=', 'true', 'm', '[', '2', '][', '""two""', ']', '=', 'true', 'm', '[', '1', '][', '""three""', ']', '=', 'true', 'fmt.Println(m[1])', 'Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):', 'map', '[', 'one', ':', 'true', 'three', ':', 'true', ']', 'Just', 'as', 'with', 'the', 'pointer-to-slice', 'value', 'type,', 'you', 'first', 'have', 'to', 'initialize', 'a', 'value', 'for', 'a', 'key', 'with', 'a', 'non-nil', 'map', 'before', 'you', 'can', 'actually', '""add""', 'values', 'to', 'it.', 'Hide', 'this', 'by', 'creating', 'your', 'own', 'type', 'and', 'adding', 'methods.']"
838,39537990,"If you are modifying state of m, you'll need a mutex lock and careful locking patterns.

Other than that, this will increase context switching across your thread boundries under most circumstances.

This is why we have the Go idiom:


  Do not communicate by sharing memory; 
  instead, share memory by communicating.


https://blog.golang.org/share-memory-by-communicating
","['Just', 'as', 'with', 'the', 'pointer-to-slice', 'value', 'type,', 'you', 'first', 'have', 'to', 'initialize', 'a', 'value', 'for', 'a', 'key', 'with', 'a', 'non-nil', 'map', 'before', 'you', 'can', 'actually', '""add""', 'values', 'to', 'it.', 'Hide', 'this', 'by', 'creating', 'your', 'own', 'type', 'and', 'adding', 'methods.']"
839,39538506,"
","[""I'd"", 'seen', 'the', 'link', '@eduncan911', 'posted', 'but', 'never', 'tried', 'to', 'apply', 'it.', 'Hopefully', 'this', 'example', 'helps:', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'type', 'dummyStruct', 'struct', '{', 'a', 'int', '}', 'func', '(', 'm', '*', 'dummyStruct', ')', 'doSomethingElse', '()', '{', 'fmt.Println(m.a)', '}', 'func', 'doSomething', '(', 'c', 'chan', 'int', ')', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '5', ';', 'i', '++', '{', 'go', 'func', '()', '{', 'x', ':=', 'time.Now().Unix()', 'c', '<-', 'int', '(', 'x', ')', '}()', 'time.Sleep(time.Second)', '}', '}', 'func', 'main', '()', '{', 'outputs', ':=', 'make', '(', 'chan', 'int', ')', 'm', ':=', '&', 'dummyStruct', '{}', 'doSomething', '(', 'outputs', ')', 'for', '{', '//', 'block', 'until', 'we', 'can', 'read', 'from', 'channel:', 'x', ':=', '<-', 'outputs', 'm', '.', 'a', '=', 'x', 'm.doSomethingElse()', '}', '}', '//', 'Output:', 'go', 'run', 'main', '.', 'go', '1474052448', '1474052449', '1474052450', '1474052451', '1474052452', 'fatal', 'error', ':', 'all', 'go', 'routines', 'are', 'asleep', '-', 'deadlock', '!']"
840,39543478,"

Let me know if it's not what you want!
","['Go', 'executes', 'these', 'commands', 'a', 'way', 'that', 'you', ""can't"", 'use', 'shell', 'things,', 'because', 'it', 'creates', 'a', 'new', 'process.', 'So', 'you', 'should', 'create', 'a', 'new', 'shell', 'process,', 'for', 'example:', 'package', 'main', 'import', '(', '""os""', '""os/exec""', ')', 'func', 'main', '()', '{', 'cmd', ':=', 'exec.Command(""sh"", ""-c"", ""value=`ls`; echo $value"")', 'cmd', '.', 'Stdout', '=', 'os', '.', 'Stdout', 'err', ':=', 'cmd.Run()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '}', 'Let', 'me', 'know', 'if', ""it's"", 'not', 'what', 'you', 'want!']"
841,39568490,"
","['I', 'think', 'the', 'problem', 'is', 'with', 'the', 'synchronization.', 'Using', 'a', 'sleep', 'may', 'solve', 'the', 'problem.', 'When', 'you', 'send', 'a', 'value', 'on', 'a', 'channel,', 'it', 'should', 'be', 'received', 'on', 'the', 'other', 'end', 'or', 'else', 'it', 'will', 'show', 'deadlock', 'error.', 'package', 'main', 'import', '""sync""', 'import', '""time""', 'import', '""fmt""', 'var', 'wg', 'sync', '.', 'WaitGroup', 'func', 'main', '()', '{', 'sC', ':=', 'make', '(', 'chan', 'string', ')', 'wg.Add(1)', 'go', 'getS', '(', 'sC', ')', 'cC', ':=', 'make', '(', 'chan', 'string', ')', 'wg.Add(1)', 'go', 'getC', '(', 'sC', ',', 'cC', ')', 'time.Sleep(1 * time.Millisecond)', 'select', '{', 'case', 's', ':=', '<-', 'sC', ':', 'print', '(', 's', ')', 'case', 'c', ':=', '<-', 'cC', ':', 'print', '(', 'c', ')', '}', 'wg.Wait()', '}', 'func', 'getS', '(', 'sC', 'chan', 'string', ')', '{', 'defer', 'wg.Done()', 's', ':=', '"" simple completed ""', 'fmt.Println(s)', 'sC', '<-', 's', '}', 'func', 'getC', '(', 'sC', 'chan', 'string', ',', 'cC', 'chan', 'string', ')', '{', 'defer', 'wg.Done()', 'fmt.Println(""complex is not complicated\\n"")', 's', ':=', '<-', 'sC', 'c', ':=', 's', '+', '"" more ""', 'cC', '<-', 'c', '//send complex value', '}']"
842,39569070,"I think Pointer is not the right way to share data with respect to goroutines, as it will decrease the performance. The best option is channels.
","['I', 'think', 'Pointer', 'is', 'not', 'the', 'right', 'way', 'to', 'share', 'data', 'with', 'respect', 'to', 'goroutines,', 'as', 'it', 'will', 'decrease', 'the', 'performance.', 'The', 'best', 'option', 'is', 'channels.']"
843,39571341,"You can use PAM Authentication for both linux and OS X.
The main function being pam_authenticate, though you'll need to start the pam service first and end it when you're finished.

Here's an example of its basic usage.
","['You', 'can', 'use', 'PAM', 'Authentication', 'for', 'both', 'linux', 'and', 'OS', 'X.', 'The', 'main', 'function', 'being', 'pam_authenticate,', 'though', ""you'll"", 'need', 'to', 'start', 'the', 'pam', 'service', 'first', 'and', 'end', 'it', 'when', ""you're"", 'finished.', ""Here's"", 'an', 'example', 'of', 'its', 'basic', 'usage.']"
844,39590815,"


","['This', ""isn't"", '""part""', 'of', 'any', 'convention,', 'but', 'the', 'standard', 'library', 'also', 'uses', 'MustXX()', 'functions,', 'so', ""it's"", 'a', 'good', 'pattern', 'to', 'follow,', 'if', 'you', 'really', 'need', 'this.', 'Examples:', 'Exported:', 'func', 'MustCompile', '(', 'str', 'string', ')', '*', 'Regexp', 'func', 'Must', '(', 't', '*', 'Template', ',', 'err', 'error', ')', '*', 'Template', 'src/syscall/dll_windows.go', ':', '(on', 'Windows)', 'func', 'MustLoadDLL', '(', 'name', 'string', ')', '*', 'DLL', 'func', '(', 'd', '*', 'DLL', ')', 'MustFindProc', '(', 'name', 'string', ')', '*', 'Proc', 'Unexported:', 'src/cmd/go/go_test.go', ':', 'func', '(', 'tg', '*', 'testgoData', ')', 'must', '(', 'err', 'error', ')', 'func', '(', 'tg', '*', 'testgoData', ')', 'mustExist', '(', 'path', 'string', ')', 'func', '(', 'tg', '*', 'testgoData', ')', 'mustNotExist', '(', 'path', 'string', ')', 'src/encoding/xml/xml.go', ':', 'func', '(', 'd', '*', 'Decoder', ')', 'mustgetc', '()', '(', 'b', 'byte', ',', 'ok', 'bool', ')', 'src/fmt/scan.go:', 'func', '(', 's', '*', 'ss', ')', 'mustReadRune', '()', '(', 'r', 'rune', ')', 'src/reflect/value.go:', 'func', '(', 'f', 'flag', ')', 'mustBe', '(', 'expected', 'Kind', ')', 'func', '(', 'f', 'flag', ')', 'mustBeExported', '()', 'func', '(', 'f', 'flag', ')', 'mustBeAssignable', '()', 'src/syscall/dll_windows.go:', 'func', '(', 'd', '*', 'LazyDLL', ')', 'mustLoad', '()', 'func', '(', 'p', '*', 'LazyProc', ')', 'mustFind', '()']"
845,39593997,"
","['You', 'should', 'create', 'and', 'setup', 'new', 'transport', 'that', 'has', 'TLS', 'configuration', 'and', 'uses', 'the', 'AppEngine', 'service.', 'It', 'can', 'be', 'done', 'by', 'replacing', 'default', 'dial', 'function', 'with', 'one', 'that', 'is', 'defined', 'by', 'AppEngine', 'SDK', '(with', 'context).', '//', 'NewClient', 'sets', 'up', 'an', 'HTTP/2', 'client', 'for', 'a', 'certificate', 'and', 'context', 'func', 'NewClient', '(', 'ctx', 'context', '.', 'Context', ')', '(*', 'http', '.', 'Client', ',', 'error', ')', '{', 'config', ':=', '&', 'tls', '.', 'Config', '{}', 'transport', ':=', '&', 'http', '.', 'Transport', '{', 'TLSClientConfig', ':', 'config', ',', 'Dial', ':', 'func', '(', 'network', ',', 'addr', 'string', ')', '(', 'net', '.', 'Conn', ',', 'error', ')', '{', '//', 'this', 'uses', 'the', 'appengine', 'service', 'to', 'create', 'the', 'actual', 'client', 'return', 'socket.Dial(ctx, network, addr)', '},', '}', 'return', '&', 'http', '.', 'Client', '{', 'Transport', ':', 'transport', '},', 'nil', '}']"
846,39603015,"
","['In', 'case', 'someone', 'else', 'comes', 'across', 'a', 'similar', 'issue,', 'I', 'was', 'able', 'to', 'get', 'this', 'working', 'by', 'adding', 'the', 'JSON', 'header', 'to', 'my', 'CORS', 'function(instead', 'of', 'the', 'WriteJSON', 'function)', 'like', 'this:', 'func', 'CORS', '(', 'h', 'http', '.', 'Handler', ')', 'http', '.', 'Handler', '{', 'return', 'http.HandlerFunc(func(w http.ResponseWriter, r *http.Request)', '{', 'w.Header().Set(""Content-Type"", ""application/json; charset=UTF-8"")', 'w.Header().Set(""Access-Control-Allow-Origin"", r.Header.Get(""Origin""))', 'w.Header().Set(""Access-Control-Allow-Methods"", ""POST, GET, OPTIONS, PUT, DELETE"")', 'w.Header()', '.', 'Set', '(', '""Access-Control-Allow-Headers""', ',', '""Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization""', ',', ')', 'w.Header().Set(""Access-Control-Allow-Credentials"", ""true"")', 'if', 'r', '.', 'Method', '==', '""OPTIONS""', '{', 'return', '}', 'h.ServeHTTP(w, r)', '})', '}', 'After', 'I', 'added', 'that,', 'the', 'request', 'was', 'still', 'not', 'working', 'with', 'fetch.', 'So,', 'I', 'switched', 'tried', 'it', 'with', 'axios', 'again', 'and', 'it', 'worked.', 'Here', 'is', 'what', 'the', 'new', 'request', 'code', 'looks', 'like', 'with', 'axios.', 'export', 'func', 'tion', 'putVisit', '(', 'visit', ')', '{', 'return', 'func', 'tion', '(', 'dispatch', ')', '{', 'return', 'axios.put(`http://localhost:8080/api/v1/visits/${visit.visit_id}/`, visit)', '.', 'then', '(', 'response', '=>', 'dispatch', '(', 'updateVisit', '(', 'response', '.', 'data', '))', ')', '.', 'catch', '(', 'err', '=>', 'console.log(err)', ')', '}', '}']"
847,39619149,"
","['CreatorId', '(which,', 'by', 'the', 'way', 'should', 'be', 'called', 'CreatorID)', 'is', 'a', 'part', 'of', 'Сommon,', 'so', 'the', 'only', 'way', 'to', 'initialize', 'it', 'in', 'struct', 'literal', 'is:', 'post1', ':=', '&', 'Post', '{', 'Common', ':', 'Common', '{', 'CreatorID', ':', '1', '},', '//', '...', '}', 'Alternatively,', 'post1', ':=', '&', 'Post', '{', '//', '...', '}', 'post1', '.', 'CreatorID', '=', '1']"
848,39626592,"
","['I', 'wrote', 'https://github.com/alokmenghrajani/gpgeez', 'for', 'exactly', 'this', 'purpose.', ""It's"", 'a', 'Go', 'library', 'which', 'makes', 'things', 'like', 'key', 'creating', 'or', 'exporting', 'a', 'key', 'as', 'an', 'armored', 'string', 'easier.', 'Here', 'is', 'the', 'gist', 'of', 'it,', 'without', 'any', 'error', 'checking:', 'func', 'CreateKey', '()', '*', 'openpgp', '.', 'Entity', '{', 'key', ',', '_', ':=', 'openpgp.NewEntity(name, comment, email, nil)', 'for', '_', ',', 'id', ':=', 'range', 'key', '.', 'Identities', '{', 'id', '.', 'SelfSignature', '.', 'PreferredSymmetric', '=', '[]', 'uint8', '{...}', 'id', '.', 'SelfSignature', '.', 'PreferredHash', '=', '[]', 'uint8', '{...}', 'id', '.', 'SelfSignature', '.', 'PreferredCompression', '=', '[]', 'uint8', '{...}', 'id', '.', 'SelfSignature.SignUserId(id.UserId.Id, key.PrimaryKey, key.PrivateKey, nil)', '}', '//', 'Self-sign', 'the', 'Subkeys', 'for', '_', ',', 'subkey', ':=', 'range', 'key', '.', 'Subkeys', '{', 'subkey', '.', 'Sig.SignKey(subkey.PublicKey, key.PrivateKey, nil)', '}', 'return', 'r', '}']"
849,39641551,"

If Publish and Subscribe are called concurrently by handlers, then there are data races on Clients in Publish and Subscribe.
","['The', 'Hub', 'function', 'creates', 'a', 'new', 'client', 'map', 'on', 'every', 'call.', 'Change', 'the', 'function', 'to:', 'func', 'Hub', '()', '*', 'hubSingleton', '{', 'if', 'instance', '==', 'nil', '{', 'fmt.Println(""New instance created"")', 'instance', '=', '&', 'hubSingleton', '{}', 'instance', '.', 'Clients', '=', 'make', '(', 'map', '[', 'string', '][]*', 'websocket', '.', 'Conn', ',', '6', ')', '}', 'return', 'instance', '}', 'If', 'the', 'first', 'call', 'to', 'Hub', 'is', 'from', 'a', 'request', 'handler,', 'then', ""there's"", 'a', 'data', 'race', 'on', 'instance.', 'Use', 'a', 'lock', 'to', 'fix', 'the', 'race:', 'var', '(', 'instance', '*', 'hubSingleton', 'mu', 'sync', '.', 'Mutex', ')', 'func', 'Hub', '()', '*', 'hubSingleton', '{', 'mu.Lock()', 'defer', 'mu.Unlock()', 'if', 'instance', '==', 'nil', '{', 'fmt.Println(""New instance created"")', 'instance', '=', '&', 'hubSingleton', '{}', 'instance', '.', 'Clients', '=', 'make', '(', 'map', '[', 'string', '][]*', 'websocket', '.', 'Conn', ',', '6', ')', '}', 'return', 'instance', '}', 'A', 'simpler', 'approach', 'is', 'to', 'initialize', 'the', 'instance', 'once', 'before', 'use:', 'var', 'instance', '*', 'hubSingleton', 'func', 'newHub', '()', '*', 'hubSingleton', '{', 'return', '&', 'hubSingleton', '{', 'Clients', ':', 'make', '(', 'map', '[', 'string', '][]*', 'websocket', '.', 'Conn', ',', '6', ')}', '}', 'func', 'main', '()', '{', 'instance', '=', 'newHub', '()', '...', '}', 'If', 'Publish', 'and', 'Subscribe', 'are', 'called', 'concurrently', 'by', 'handlers,', 'then', 'there', 'are', 'data', 'races', 'on', 'Clients', 'in', 'Publish', 'and', 'Subscribe.']"
850,39642839,"
","['You', 'may', 'use', 'sync.WaitGroup', 'to', 'stop', 'the', 'program', 'from', 'exiting', 'until', 'all', 'the', 'work', 'is', 'done.', 'Try', 'it', 'on', 'The', 'Go', 'Playground:', 'package', 'main', 'import', '(', '""fmt""', '""sync""', '""time""', ')', 'var', '(', 'wg', 'sync', '.', 'WaitGroup', ')', 'func', 'main', '()', '{', 'wg.Add(1)', 'go', 'func', '()', '{', 'defer', 'wg.Done()', 'time.Sleep(2 * time.Second)', '}()', 'fmt.Println(""Wait..."")', 'wg.Wait()', 'fmt.Println(""Done."")', '}']"
851,39654604,"
  
  Such a function indirects through the receiver to create a value to
  pass as the receiver to the underlying method; the method does not
  overwrite the value whose address is passed in the function call.
  
  The final case, a value-receiver function for a pointer-receiver
  method, is illegal because pointer-receiver methods are not in the
  method set of the value type.
  
  Function values derived from methods are called with function call
  syntax; the receiver is provided as the first argument to the call.
  That is, given f := T.Mv, f is invoked as f(t, 7) not t.f(7). To
  construct a function that binds the receiver, use a function literal
  or method value.
  
  It is legal to derive a function value from a method of an interface
  type. The resulting function takes an explicit receiver of that
  interface type.




And see:
Go - difference between parameter and receiver
Is there a performance penalty for passing ""this"" by value in Go methods?
differences between pointer and value slice in for-range loop   
","['Method', 'expressions:', 'If', 'M', 'is', 'in', 'the', 'method', 'set', 'of', 'type', 'T,', 'T.M', 'is', 'a', 'function', 'that', 'is', 'callable', 'as', 'a', 'regular', 'function', 'with', 'the', 'same', 'arguments', 'as', 'M', 'prefixed', 'by', 'an', 'additional', 'argument', 'that', 'is', 'the', 'receiver', 'of', 'the', 'method.', 'MethodExpr', '=', 'ReceiverType', '"".""', 'MethodName', '.', 'ReceiverType', '=', 'TypeName', '|', '""(""', '""*""', 'TypeName', '"")""', '|', '""(""', 'ReceiverType', '"")""', '.', 'Consider', 'a', 'struct', 'type', 'T', 'with', 'two', 'methods,', 'Mv,', 'whose', 'receiver', 'is', 'of', 'type', 'T,', 'and', 'Mp,', 'whose', 'receiver', 'is', 'of', 'type', '*T.', 'type', 'T', 'struct', '{', 'a', 'int', '}', 'func', '(', 'tv', 'T', ')', 'Mv', '(', 'a', 'int', ')', 'int', '{', 'return', '0', '}', '// value receiver', 'func', '(', 'tp', '*', 'T', ')', 'Mp', '(', 'f', 'float32', ')', 'float32', '{', 'return', '1', '}', '// pointer receiver', 'var', 't', 'T', 'The', 'expression', 'T.Mv', 'yields', 'a', 'function', 'equivalent', 'to', 'Mv', 'but', 'with', 'an', 'explicit', 'receiver', 'as', 'its', 'first', 'argument;', 'it', 'has', 'signature', 'func', '(', 'tv', 'T', ',', 'a', 'int', ')', 'int', 'That', 'function', 'may', 'be', 'called', 'normally', 'with', 'an', 'explicit', 'receiver,', 'so', 'these', 'five', 'invocations', 'are', 'equivalent:', 't.Mv(7)', 'T.Mv(t, 7)', '(', 'T', ').', 'Mv', '(', 't', ',', '7', ')', 'f1', ':=', 'T', '.', 'Mv', ';', 'f1', '(', 't', ',', '7', ')', 'f2', ':=', '(', 'T', ').', 'Mv', ';', 'f2', '(', 't', ',', '7', ')', 'Similarly,', 'the', 'expression', '(*T).Mp', 'yields', 'a', 'function', 'value', 'representing', 'Mp', 'with', 'signature', 'func', '(', 'tp', '*', 'T', ',', 'f', 'float32', ')', 'float32', 'For', 'a', 'method', 'with', 'a', 'value', 'receiver,', 'one', 'can', 'derive', 'a', 'function', 'with', 'an', 'explicit', 'pointer', 'receiver,', 'so', '(*T).Mv', 'yields', 'a', 'function', 'value', 'representing', 'Mv', 'with', 'signature', 'func', '(', 'tv', '*', 'T', ',', 'a', 'int', ')', 'int', 'Such', 'a', 'function', 'indirects', 'through', 'the', 'receiver', 'to', 'create', 'a', 'value', 'to', 'pass', 'as', 'the', 'receiver', 'to', 'the', 'underlying', 'method;', 'the', 'method', 'does', 'not', 'overwrite', 'the', 'value', 'whose', 'address', 'is', 'passed', 'in', 'the', 'function', 'call.', 'The', 'final', 'case,', 'a', 'value-receiver', 'function', 'for', 'a', 'pointer-receiver', 'method,', 'is', 'illegal', 'because', 'pointer-receiver', 'methods', 'are', 'not', 'in', 'the', 'method', 'set', 'of', 'the', 'value', 'type.', 'Function', 'values', 'derived', 'from', 'methods', 'are', 'called', 'with', 'function', 'call', 'syntax;', 'the', 'receiver', 'is', 'provided', 'as', 'the', 'first', 'argument', 'to', 'the', 'call.', 'That', 'is,', 'given', 'f', ':=', 'T.Mv,', 'f', 'is', 'invoked', 'as', 'f(t,', '7)', 'not', 't.f(7).', 'To', 'construct', 'a', 'function', 'that', 'binds', 'the', 'receiver,', 'use', 'a', 'function', 'literal', 'or', 'method', 'value.', 'It', 'is', 'legal', 'to', 'derive', 'a', 'function', 'value', 'from', 'a', 'method', 'of', 'an', 'interface', 'type.', 'The', 'resulting', 'function', 'takes', 'an', 'explicit', 'receiver', 'of', 'that', 'interface', 'type.', 'And', 'see:', 'Go', '-', 'difference', 'between', 'parameter', 'and', 'receiver', 'Is', 'there', 'a', 'performance', 'penalty', 'for', 'passing', '""this""', 'by', 'value', 'in', 'Go', 'methods?', 'differences', 'between', 'pointer', 'and', 'value', 'slice', 'in', 'for-range', 'loop']"
852,39659996,"

The type Sample then can also be used in other controllers as placeholder of any data which is going to be passed to template.
","['Declare', 'field', 'Data', 'in', 'struct', 'Sample', 'as', 'interface{}:', 'type', 'Sample', 'struct', '{', 'Temppath', 'string', 'Data', 'interface', '{}', '}', 'The', 'type', 'Sample', 'then', 'can', 'also', 'be', 'used', 'in', 'other', 'controllers', 'as', 'placeholder', 'of', 'any', 'data', 'which', 'is', 'going', 'to', 'be', 'passed', 'to', 'template.']"
853,39685362,"
","['Using', 'golang', 'package', 'reflect', 'in', 'this', 'particular', 'case', 'will', 'be', 'the', 'best.', 'reflect', 'will', 'get', 'you', 'the', 'fields', 'of', 'the', 'struct', 'and', 'you', 'can', 'iterate', 'over', 'them', 'comparing', 'the', 'values', 'with', 'the', 'corresponding', 'filter', 'value.', 'The', 'example', 'is', 'specific', 'to', 'the', 'struct', 'that', 'you', 'provided,', 'but', 'you', 'can', 'easily', 'modify', 'it', 'to', 'apply', 'to', 'all', 'structs,', 'again', 'using', 'reflection.', 'Example:', 'Go', 'Playground', 'package', 'main', 'import', '(', '""fmt""', '""reflect""', ')', 'type', 'cnts', '[]', 'cnt', 'type', 'cnt', 'struct', '{', 'ID', 'int', 'json', ':', '""Id""', 'Area', 'string', 'json', ':', '""Area""', 'State', 'string', 'json', ':', '""State""', 'City', 'string', 'json', ':', '""City""', '}', '//', 'Filtering', 'function', 'func', 'filterItem', '(', 'val', '*', 'cnt', ',', 'filter', 'map', '[', 'string', ']', 'string', ')', 'bool', '{', 'item', ':=', 'reflect.ValueOf(val).Elem()', 'itemType', ':=', 'item.Type()', 'isValid', ':=', 'true', '//', 'Iterate', 'over', 'the', 'struct', 'fileds', 'for', 'i', ':=', '0', ';', 'i', '<', 'item.NumField()', ';', 'i', '++', '{', 'field', ':=', 'item.Field(i)', 'filterValue', ',', 'ok', ':=', 'filter', '[', 'itemType.Field(i)', '.', 'Name', ']', 'if', 'ok', '{', '//', 'filter', 'out', 'if', 'filterValue', '!=', 'field.Interface()', '{', 'isValid', '=', 'false', 'break', '}', '}', '}', 'return', 'isValid', '}', 'func', 'main', '()', '{', 'mycnts', ':=', 'cnts', '{', 'cnt', '{', '124', ',', '""Here""', ',', '""South""', ',', '""Home""', '},', 'cnt', '{', '125', ',', '""Here""', ',', '""West""', ',', '""Home""', '},', 'cnt', '{', '126', ',', '""""', ',', '""South""', ',', '""Home""', '},', 'cnt', '{', '127', ',', '""Here""', ',', '""West""', ',', '""NY""', '}}', '//', 'my', 'maps', 'with', 'filter', 'map', 'Filter', ':=', 'map', '[', 'string', ']', 'string', '{', '""Area""', ':', '""Here""', ',', '""City""', ':', '""Home""', '}', 'fmt.Println(mapFilter)', 'mycntsFilter', ':=', 'make', '(', 'cnts', ',', '0', ')', 'for', '_', ',', 'val', ':=', 'range', 'mycnts', '{', 'if', 'filterItem', '(&', 'val', ',', 'map', 'Filter', ')', '{', 'mycntsFilter', '=', 'append', '(', 'mycntsFilter', ',', 'val', ')', '}', '}', 'fmt.Println(mycntsFilter)', '}']"
854,39689964,"
","['Thanks', 'to', '@putu', 'comment,', 'I', 'was', 'available', 'to', 'cross-compile', 'using', 'GOARM=6', 'env', 'GOOS', '=', 'freebsd', 'GOARCH', '=', 'arm', 'GOARM', '=', '6', 'go', 'build']"
855,39759625,"

Something like the code above would work though there are many options. I think you'll want to remove all that code you have to redirect to the terminal. 
","['Rather', 'than', 'redirecting', ""it's"", 'output', 'to', 'the', 'terminal', 'read', 'it', 'and', 'then', 'you', 'can', 'log/print', 'do', 'whatever', 'you', 'want', 'with', 'it.', 'stdout', ',', 'err', ':=', 'cmd.StdoutPipe()', 'b', ',', '_', ':=', 'ioutil.ReadAll(stdout)', 'fmt.Println(string(b))', 'Something', 'like', 'the', 'code', 'above', 'would', 'work', 'though', 'there', 'are', 'many', 'options.', 'I', 'think', ""you'll"", 'want', 'to', 'remove', 'all', 'that', 'code', 'you', 'have', 'to', 'redirect', 'to', 'the', 'terminal.']"
856,39760283,"
","['you', 'could', 'store', 'the', 'output', 'in', 'a', 'temporary', 'buffer', 'and', 'write', 'it', 'to', 'several', 'places', 'outBuf', ':=', 'bytes', '.', 'Buffer', '{}', 'cmd', ':=', 'exec.Command(cmd1, slice...)', 'cmd', '.', 'Stdout', '=', '&', 'outBuf', 'cmd.Run()', 'if', 'outBuf.Len()', '>', '0', '{', 'log.Printf(""%s"", outBuf.String())', 'fmt.Fprintf(os.Stdout, ""%s"", outBuf.String())', '}']"
857,39813836,"

Output:


  http://127.0.0.1:8080/  

","['This', 'worked', 'for', 'me.', 'I', 'run', 'go', 'in', '8081', 'and', 'made', 'a', 'request', 'from', 'port', '8080.', 'fmt.Printf(""r: %+v\\n"", r)', '// Print all fields that you get in request', 'Output:', 'r:', '&{Method:POST', 'URL:/email', 'Proto:HTTP/1.1', 'ProtoMajor:1', 'ProtoMinor:1', 'Header:map[User-Agent:[Mozilla/5.0', '(Macintosh;', 'Intel', 'Mac', 'OS', 'X', '10_12_1)', 'AppleWebKit/602.2.11', '(KHTML,', 'like', 'Gecko)', 'Version/10.0.1', 'Safari/602.2.11]', 'Accept-Language:[en-us]', 'Accept-Encoding:[gzip,', 'deflate]', 'Connection:[keep-alive]', 'Accept:[/]', 'Referer:[http://127.0.0.1:8080/]', 'Content-Length:[9]', 'Content-Type:[application/x-www-form-urlencoded;', 'charset=UTF-8]', 'Origin:[http://127.0.0.1:8080]]', 'Body:0xc420012800', 'ContentLength:9', 'TransferEncoding:[]', 'Close:false', 'Host:127.0.0.1:8081', 'Form:map[]', 'PostForm:map[]', 'MultipartForm:', 'Trailer:map[]', 'RemoteAddr:127.0.0.1:62232', 'RequestURI:/email', 'TLS:', 'Cancel:', 'Response:', 'ctx:0xc420017860}', 'The', 'Referer', 'and', 'Origin', 'have', 'my', 'client', 'IP.', 'ip', ':=', 'r.Referer()', '// Get Referer value', 'fmt.Println(ip)', '// print ip', 'Output:', 'http://127.0.0.1:8080/']"
858,39824758,"

}

AND BROWSE IT UNDER http://localhost:9000/
","['try', 'this', 'way', 'put', 'the', 'html', 'files', 'to', 'html', 'folder', 'add', 'html', 'and', 'js', 'files', 'to', 'it.', 'func', 'webServer', '()', '{', 'http', '.', 'Handle', '(', '""/""', ',', 'http', '.', 'StripPrefix', '(', '""/""', ',', 'http.FileServer(http.Dir(""html""))', ',', '),', ')', 'http.ListenAndServe("":9000"", nil)', '}', 'AND', 'BROWSE', 'IT', 'UNDER', 'http://localhost:9000/']"
859,39876956,"
","['Try', 'the', 'following', 't', ':=', 'strconv.Itoa(123)']"
860,39877077,"

https://play.golang.org/p/IdDnnOtS2V
","['While', 'that', 'is', 'perfectly', 'fine', 'for', 'what', ""you're"", 'trying', 'to', 'do,', 'the', 'encoding/binary', 'package', 'has', 'much', 'more', 'functionality', 'for', 'reading', 'and', 'writing', 'binary', 'values.', 'You', 'can', 'use', 'i', ':=', 'uint16', '(', '0x474F', ')', 'b', ':=', 'make', '([]', 'byte', ',', '2', ')', 'binary', '.', 'BigEndian.PutUint16(b, i)', 'fmt.Println(string(b))', '//', 'GO', 'https://play.golang.org/p/IdDnnOtS2V']"
861,39936881,"


  Index returns the index of the first instance of sep in s, or -1 if sep is not present in s.

","['Here', 'is', 'the', 'working', 'code', 'with', 'some', 'optimizations,', 'try', 'it', 'on', 'the', 'The', 'Go', 'Playground:', 'package', 'main', 'import', '(', '""fmt""', '""strings""', ')', 'func', 'main', '()', '{', 'filters', ':=', '[]', 'string', '{', '""aaa""', ',', '""bbb""', ',', '""ccc""', '}', 'fmt.Println(compareKeywords(""a"", filters))', '// """"', 'fmt.Println(compareKeywords(""d"", filters))', '// ""d""', '}', 'func', 'compareKeywords', '(', 'keyword', 'string', ',', 'filters', '[]', 'string', ')', 'string', '{', 'for', '_', ',', 'filter', ':=', 'range', 'filters', '{', 'if', 'strings.Index(filter, keyword)', '>=', '0', '{', 'return', '""""', '}', '}', 'return', 'keyword', '}', 'output:', 'd', 'And', 'see', 'strings.Index', 'Docs:', 'func', 'Index', '(', 's', ',', 'sep', 'string', ')', 'int', 'Index', 'returns', 'the', 'index', 'of', 'the', 'first', 'instance', 'of', 'sep', 'in', 's,', 'or', '-1', 'if', 'sep', 'is', 'not', 'present', 'in', 's.']"
862,39948718,"There is a new line because you're adding a new line after colons (:)

This works https://play.golang.org/p/k4lazGhE-r
Note I just start the first if right after the first colons
","['There', 'is', 'a', 'new', 'line', 'because', ""you're"", 'adding', 'a', 'new', 'line', 'after', 'colons', '(:)', 'This', 'works', 'https://play.golang.org/p/k4lazGhE-r', 'Note', 'I', 'just', 'start', 'the', 'first', 'if', 'right', 'after', 'the', 'first', 'colons']"
863,39953936,"

Try this one on the Go Playground.
","['In', 'your', 'first', 'template,', 'you', 'have', 'a', 'newline', 'after', 'the', 'static', 'text', '""Let\'s', 'say:"",', 'and', 'the', '2nd', 'line', 'contains', 'only', 'the', '{{if}}', 'action,', 'and', 'it', 'also', 'contains', 'a', 'newline,', 'and', 'its', 'body', '""Hello, StackOverflow!""', 'starts', 'in', 'the', '3rd', 'line.', 'If', 'this', 'is', 'rendered,', 'there', 'will', 'be', '2', 'newlines', 'between', 'the', '2', 'static', 'texts,', 'so', ""you'll"", 'see', 'an', 'empty', 'line', '(as', 'you', 'posted).', 'You', 'may', 'use', '{{-', 'if...', 'to', 'get', 'rid', 'of', 'the', 'first', 'newline,', 'so', 'when', 'rendered,', 'only', '1', 'newline', 'gets', 'to', 'the', 'output,', 'resulting', 'in', '2', 'different', 'lines', 'but', 'no', 'newlines', 'between', 'them:', 'Let', 's', 'say', ':', '{{-', 'if', 'eq', '.', 'Foo', '""foo""', '}}', 'Hello', ',', 'StackOverflow', '!', '{{-', 'else', 'if', 'eq', '.', 'Foo', '""bar""', '}}', 'Hello', ',', 'World', '!', '{{-', 'end', '}}', 'Output', 'when', 'Foo', 'is', '""foo"":', 'Let', 's', 'say', ':', 'Hello', ',', 'StackOverflow', '!', 'Output', 'when', 'Foo', 'is', '""bar"":', 'Let', 's', 'say', ':', 'Hello', ',', 'World', '!', 'Try', 'it', 'on', 'the', 'Go', 'Playground.', 'Note', 'that', 'this', 'was', 'added', 'in', 'Go', '1.6:', 'Template,', 'and', 'is', 'documented', 'at', 'text/template:', 'Text', 'and', 'Spaces.', 'If', 'you', 'use', 'the', '-', 'sign', 'at', 'the', 'closing', 'of', 'the', 'actions', '-}},', 'you', 'can', 'even', 'remove', 'all', 'the', 'newlines:', 'Let', 's', 'say', ':', '{{-', 'if', 'eq', '.', 'Foo', '""foo""', '-}}', 'Hello', ',', 'StackOverflow', '!', '{{-', 'else', 'if', 'eq', '.', 'Foo', '""bar""', '-}}', 'Hello', ',', 'World', '!', '{{-', 'end', '-}}', 'Output', 'when', 'Foo', 'is', '""foo""', 'and', 'Foo', 'is', '""bar"":', 'Let', 's', 'say', ':', 'Hello', ',', 'StackOverflow', '!', 'Let', 's', 'say', ':', 'Hello', ',', 'World', '!', 'Try', 'this', 'one', 'on', 'the', 'Go', 'Playground.']"
864,40000860,"You could create a Docker container from the distinct OS you need for your executable, and map a volume to your src directory. Run the container and make the executable from within the container.  You end up with a binary that you can run on the distinct OS.
","['You', 'could', 'create', 'a', 'Docker', 'container', 'from', 'the', 'distinct', 'OS', 'you', 'need', 'for', 'your', 'executable,', 'and', 'map', 'a', 'volume', 'to', 'your', 'src', 'directory.', 'Run', 'the', 'container', 'and', 'make', 'the', 'executable', 'from', 'within', 'the', 'container.', 'You', 'end', 'up', 'with', 'a', 'binary', 'that', 'you', 'can', 'run', 'on', 'the', 'distinct', 'OS.']"
865,40049793,"You can manually run garbage collection:
https://golang.org/pkg/runtime/#GC

I think that would free up the memory, but as others have said, that memory will get freed eventually when the runtime's scheduled garbage collector runs.
","['You', 'can', 'manually', 'run', 'garbage', 'collection:', 'https://golang.org/pkg/runtime/#GC', 'I', 'think', 'that', 'would', 'free', 'up', 'the', 'memory,', 'but', 'as', 'others', 'have', 'said,', 'that', 'memory', 'will', 'get', 'freed', 'eventually', 'when', 'the', ""runtime's"", 'scheduled', 'garbage', 'collector', 'runs.']"
866,40093374,"
","['This', 'is', 'an', 'older', 'question,', 'but', ""i'm"", 'diving', 'deep', 'into', 'learning', 'channels', 'myself', 'and', 'found', 'this', 'here.', 'I', 'think', 'you', 'just', 'need', 'to', 'close', 'the', 'channel', 'after', 'your', 'done', 'sending', 'on', 'it?', 'Code:', 'func', 'main', '()', '{', 'wg.Add(1)', 'c', ':=', 'make', '(', 'chan', 'int', ')', 'go', 'readFromChannel', '(', 'c', ',', 'time.After(time.Duration(2)*time.Second))', 'time.Sleep(time.Duration(5) * time.Second)', 'c', '<-', '10', 'close', '(', 'c', ')', '// <- CLOSE IT HERE', 'wg.Wait()', '}']"
867,40120128,"

After restarting my mac the environment in the output of process.env was correct and go-plus worked as expected.


","['I', 'had', 'the', 'same', 'issue', 'on', 'OSX.', 'Weird', 'in', 'my', 'case', 'was', 'that', 'process.env', 'showed', 'I', 'am', 'using', 'normal', 'bash.', 'This', 'was', 'strange,', 'because', 'I', 'am', 'using', 'zsh.', 'The', 'environment', 'variables', 'overall', 'were', 'wrong', 'and', 'did', 'not', 'match', 'the', 'environment', 'in', 'my', 'terminal', 'at', 'all.', 'Turned', 'out', 'I', 'needed', 'to', 'set', 'zsh', 'as', 'default', 'shell.', 'This', 'added', 'zsh', 'to', 'the', 'list', 'of', 'known', 'shells', 'and', 'made', 'it', 'the', 'default', 'for', 'my', 'user.', 'Note', 'that', 'xh3b4sd', 'is', 'my', 'username.', 'command', '-', 'v', 'zsh', '|', 'sudo', 'tee', '-', 'a', '/etc/shells', 'chsh', '-', 's', '$(', 'which', 'zsh', ')', 'xh3b4sd', 'After', 'restarting', 'my', 'mac', 'the', 'environment', 'in', 'the', 'output', 'of', 'process.env', 'was', 'correct', 'and', 'go-plus', 'worked', 'as', 'expected.']"
868,40132097,"

Proper content type will be detected and set automatically.
","['There', 'are', 'quite', 'a', 'few', 'errors', 'in', 'your', 'code.', 'As', 'a', '""pre-first"",', 'always', 'check', 'returned', 'errors!', 'First,', 'os.Open()', 'opens', 'the', 'file', 'in', 'read-only', 'mode.', 'To', 'be', 'able', 'to', 'replace', 'the', 'file', 'content', 'on', 'the', 'disk,', 'you', 'must', 'open', 'it', 'in', 'read-write', 'mode', 'instead:', 'file', ',', 'err', ':=', 'os.OpenFile(fileName, os.O_RDWR, 0)', 'Next,', 'when', 'you', 'open', 'something', 'that', 'is', 'an', 'io.Closer', '(*os.File', 'is', 'an', 'io.Closer),', 'make', 'sure', 'you', 'close', 'it', 'with', 'the', 'Close()', 'method,', 'best', 'done', 'as', 'a', 'deferred', 'statement.', 'Next,', '*os.File', 'is', 'an', 'io.Reader,', 'but', 'that', 'is', 'not', 'the', 'same', 'thing', 'as', 'a', 'byte', 'slice', '[]byte.', 'An', 'io.Reader', 'may', 'be', 'used', 'to', 'read', 'bytes', 'into', 'a', 'byte', 'slice.', 'Use', 'io.Copy()', 'to', 'copy', 'the', 'content', 'from', 'the', 'file', 'to', 'the', 'gzip', 'stream', '(which', 'will', 'end', 'up', 'in', 'the', 'buffer).', 'In', 'certain', 'situation', '(where', 'you', ""don't"", 'close', 'the', 'gzip.Writer),', 'you', 'must', 'call', 'gzip.Writer.Flush()', 'to', 'ensure', 'everything', 'is', 'flushed', 'into', 'its', 'writer', '(which', 'is', 'the', 'buffer', 'in', 'this', 'case).', 'Note', 'that', 'gzip.Writer.Close()', 'also', 'flushes,', 'so', 'this', 'may', 'seem', 'like', 'an', 'unnecessary', 'step,', 'but', 'must', 'be', 'done', 'for', 'example', 'if', 'the', 'Close()', 'of', 'the', 'gzip.Writer', 'is', 'also', 'called', 'as', 'a', 'deferred', 'statemement,', 'because', 'then', 'it', 'may', 'not', 'be', 'executed', 'before', 'we', 'use', 'the', 'content', 'of', 'the', 'buffer.', 'Since', 'in', 'our', 'examle', 'we', 'close', 'the', 'gzip', 'writer', 'after', 'io.Copy(),', 'that', 'will', 'take', 'care', 'of', 'necessary', 'flushes.', 'Next,', 'to', 'replace', 'the', 'content', 'of', 'the', 'original', 'file,', 'you', 'must', 'seek', 'back', 'to', 'the', 'beginning', 'of', 'the', 'file', 'to', 'replace.', 'For', 'that,', 'you', 'may', 'use', 'File.Seek().', 'Next,', 'you', 'may', 'again', 'use', 'io.Copy()', 'to', 'copy', 'the', 'contents', 'of', 'the', 'buffer', '(the', 'gzipped', 'data)', 'to', 'the', 'file.', 'And', 'last,', 'since', 'the', 'gzipped', 'content', 'will', 'most', 'likely', 'be', 'shorter', 'than', 'the', 'original', 'file', 'size,', 'you', 'must', 'truncate', 'the', 'file', 'at', 'the', 'size', 'of', 'the', 'gzipped', 'content', '(else', 'uncompressed', 'content', 'of', 'the', 'original', 'file', 'may', 'be', 'left', 'there).', ""Here's"", 'the', 'complete', 'code:', 'file', ',', 'err', ':=', 'os.OpenFile(fileName, os.O_RDWR, 0)', 'if', 'err', '!=', 'nil', '{', 'log.Fatalf(""Error opening %q: %v"", fileName, err)', '}', 'defer', 'file.Close()', '//', 'Check', 'if', 'gzip', 'should', 'be', 'applied', 'if', '*', 'metaGzip', '{', 'var', 'b', '=', '&', 'bytes', '.', 'Buffer', '{}', 'w', ':=', 'gzip.NewWriter(b)', 'if', '_', ',', 'err', ':=', 'io.Copy(w, file)', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'if', 'err', ':=', 'w.Close()', ';', 'err', '!=', 'nil', '{', '// This also flushes', 'panic', '(', 'err', ')', '}', 'if', '_', ',', 'err', ':=', 'file.Seek(0, 0)', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'if', '_', ',', 'err', ':=', 'io.Copy(file, b)', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'if', 'err', ':=', 'file.Truncate(int64(b.Len()))', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '}', 'Note:', 'The', 'above', 'code', 'will', 'replace', 'the', 'file', 'content', 'on', 'your', 'disk.', 'If', 'you', ""don't"", 'want', 'this', 'and', 'you', 'just', 'need', 'the', 'compressed', 'data,', 'you', 'may', 'do', 'it', 'like', 'this.', 'Note', 'that', 'I', 'used', 'a', 'new', 'input', 'variable', 'of', 'type', 'io.Reader,', 'as', 'a', 'value', 'of', 'bytes.Buffer', '(or', '*bytes.Buffer)', 'cannot', 'be', 'assigned', 'to', 'a', 'variable', 'of', 'type', '*os.File,', 'and', 'we', 'will', 'most', 'likely', 'only', 'need', 'the', 'result', 'as', 'a', 'value', 'of', 'io.Reader', '(and', 'this', 'is', 'implemented', 'by', 'both):', 'var', 'input', 'io', '.', 'Reader', 'file', ',', 'err', ':=', 'os.Open(fileName)', 'if', 'err', '!=', 'nil', '{', 'log.Fatalf(""Error opening %q: %v"", fileName, err)', '}', 'defer', 'file.Close()', '//', 'Check', 'if', 'gzip', 'should', 'be', 'applied', 'if', '*', 'metaGzip', '{', 'var', 'b', '=', '&', 'bytes', '.', 'Buffer', '{}', 'w', ':=', 'gzip.NewWriter(b)', 'if', '_', ',', 'err', ':=', 'io.Copy(w, file)', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'if', 'err', ':=', 'w.Close()', ';', 'err', '!=', 'nil', '{', '// This also flushes', 'panic', '(', 'err', ')', '}', 'input', '=', 'b', '}', 'else', '{', 'input', '=', 'file', '}', '//', 'Use', 'input', 'here', 'Note', '#2:', 'If', 'you', ""don't"", 'want', 'to', '""work""', 'with', 'the', 'compressed', 'data', 'but', 'you', 'just', 'want', 'to', 'send', 'it', 'e.g.', 'as', 'the', 'web', 'response,', 'you', ""don't"", 'even', 'need', 'the', 'bytes.Buffer,', 'you', 'can', 'just', '""stream""', 'the', 'compressed', 'data', 'to', 'the', 'http.ResponseWriter.', 'It', 'could', 'look', 'like', 'this:', 'func', 'myHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'file', ',', 'err', ':=', 'os.Open(fileName)', 'if', 'err', '!=', 'nil', '{', 'http.NotFound(w, r)', '}', 'defer', 'file.Close()', 'gz', ':=', 'gzip.NewWriter(w)', 'defer', 'gz.Close()', 'if', '_', ',', 'err', ':=', 'io.Copy(gz, file)', ';', 'err', '!=', 'nil', '{', '//', 'handle', 'error', '}', '}', 'Proper', 'content', 'type', 'will', 'be', 'detected', 'and', 'set', 'automatically.']"
869,40189899,".

Or you can try vendoring. 
","['You', 'need', 'to', 'have', 'all', 'imported', 'libraries', 'in', 'your', '$GOPATH', '(external', 'libs)', 'or', '$GOROOT', '(std', 'lib)', 'The', 'go', 'get', 'command', 'can', 'fetch', 'libraries', 'from', 'remote', 'and', 'put', 'them', 'in', 'your', '$GOPATH', 'So', 'if', 'you', 'go', 'get', 'github', '.', 'com/labstack/echo', 'it', 'fetches', 'the', 'library', 'from', 'the', 'URL', 'and', 'places', 'it', 'in', '$', 'GOPATH/github.com/labstack/echo', 'locally.', 'This', 'is', 'not', 'possible', 'for', 'the', 'library', 'go-todo/models', 'to', 'be', 'fetched', 'remotely', 'like', 'that,', 'so', 'you', 'need', 'to', 'make', 'sure', 'in', 'your', 'CI', 'that', 'it', 'is', 'copied', 'and', 'made', 'available', 'locally', 'at', '$', 'GOPATH/go-todo/models', '.', 'Or', 'you', 'can', 'try', 'vendoring.']"
870,40216486,"Go has garbage collection. This means the Go runtime checks in the background if an object or any other variable is not used anymore and if this is the case, frees the memory.

Also see the Go FAQ: Why is the syntax so different from C? - Why do garbage collection? Won't it be too expensive?
","['Go', 'has', 'garbage', 'collection.', 'This', 'means', 'the', 'Go', 'runtime', 'checks', 'in', 'the', 'background', 'if', 'an', 'object', 'or', 'any', 'other', 'variable', 'is', 'not', 'used', 'anymore', 'and', 'if', 'this', 'is', 'the', 'case,', 'frees', 'the', 'memory.', 'Also', 'see', 'the', 'Go', 'FAQ:', 'Why', 'is', 'the', 'syntax', 'so', 'different', 'from', 'C?', '-', 'Why', 'do', 'garbage', 'collection?', ""Won't"", 'it', 'be', 'too', 'expensive?']"
871,40216490,"As you see here:


  Go is fully garbage-collected and provides fundamental support for concurrent execution and communication.


So you don't have to care about memory allocation.
","['As', 'you', 'see', 'here:', 'Go', 'is', 'fully', 'garbage-collected', 'and', 'provides', 'fundamental', 'support', 'for', 'concurrent', 'execution', 'and', 'communication.', 'So', 'you', ""don't"", 'have', 'to', 'care', 'about', 'memory', 'allocation.']"
872,40216513,"In Go, unlike in C and C++, but like in Java, memory is managed automatically by a garbage collector.

There is no delete to call.

Off-topic:


  in C++ when new is used on an object you can delete the object once there is no longer any need for the object to be stored.


You must delete, otherwise you have memory leak.
","['.', 'Or', 'you', 'can', 'try', 'vendoring.']"
873,40229629,"

Conclusion

Each case above solves the same problem with a slightly different emphasis.  Case A is straightforward.  Case B and C rely on underlying shared code that could be used with event notifications.  Case B and C are different in User scope.  In Case B User is a structure.  In Case C user is a package name.  I think Case C is used less often than Case B.  So, if use insist on having an underlying model, then Case B is probably the most intuitive solution from user code point of view.
","['From', 'overall', 'conceptual', 'standpoint', 'there', 'is', 'nothing', 'wrong', 'in', 'your', 'implementation.', 'On', 'a', 'detailed', 'view', 'there', 'are', 'inconsistencies', 'that', 'raise', 'questions.', 'In', 'all', 'cases', 'below', 'there', 'is', 'a', 'potential', 'concurrency', 'issue', 'due', 'to', 'data', 'shared', 'across', 'various', 'Delete', 'calls.', 'Case', 'A', 'If', 'models.User{}', 'does', 'all', 'the', 'work,', 'then', 'why', ""can't"", 'we', 'just', 'userModel', ':=', '&', 'models', '.', 'User', '{}', 'userModel.Delete(userId)', 'Case', 'B', 'If', 'User', 'is', 'our', 'public', 'interface:', 'user', ':=', 'User', '{', 'model', ':', 'userModel', '}', 'user.Delete(1)', 'then', 'taking', 'userId', 'to', 'delete', 'is', 'redundant', 'and', 'shall', 'be', 'done', 'as:', 'user.Delete()', 'userId', 'is', 'taken', 'from', 'user', 'context.', 'Case', 'C', 'Otherwise,', 'we', 'might', 'want', 'to', 'make', 'userModel', 'to', 'be', 'set', 'for', 'all', 'User', 'instances:', 'package', 'User', ';', '//', 'private', 'package', 'level', 'variable', 'var', 'model', '=', 'userModel', 'func', 'Delete', '(', 'userId', 'int', ')', '{', 'model.Delete(userId)', '}', '...', 'User.Delete(userId)', 'Conclusion', 'Each', 'case', 'above', 'solves', 'the', 'same', 'problem', 'with', 'a', 'slightly', 'different', 'emphasis.', 'Case', 'A', 'is', 'straightforward.', 'Case', 'B', 'and', 'C', 'rely', 'on', 'underlying', 'shared', 'code', 'that', 'could', 'be', 'used', 'with', 'event', 'notifications.', 'Case', 'B', 'and', 'C', 'are', 'different', 'in', 'User', 'scope.', 'In', 'Case', 'B', 'User', 'is', 'a', 'structure.', 'In', 'Case', 'C', 'user', 'is', 'a', 'package', 'name.', 'I', 'think', 'Case', 'C', 'is', 'used', 'less', 'often', 'than', 'Case', 'B.', 'So,', 'if', 'use', 'insist', 'on', 'having', 'an', 'underlying', 'model,', 'then', 'Case', 'B', 'is', 'probably', 'the', 'most', 'intuitive', 'solution', 'from', 'user', 'code', 'point', 'of', 'view.']"
874,40263029,"Go checks for bounds in arrays and slices so it is not vulnerable as long as you are not playing around with unsafe package.
","['Go', 'checks', 'for', 'bounds', 'in', 'arrays', 'and', 'slices', 'so', 'it', 'is', 'not', 'vulnerable', 'as', 'long', 'as', 'you', 'are', 'not', 'playing', 'around', 'with', 'unsafe', 'package.']"
875,40263134,"After a quick search I found this link: http://0xdabbad00.com/2015/04/12/looking_for_security_trouble_spots_in_go_code/

It states that golang is safe from most ""known"" attacks (""known"" as in used in C). For instance, the fact that there is no pointer arithmetics, no manual memory management make it less prone to errors that would lead to ""exploitable"" code.

I'm no expert of golang but it seems like a well thought language with a good environment (std lib, compiler, etc...)
","['After', 'a', 'quick', 'search', 'I', 'found', 'this', 'link:', 'http://0xdabbad00.com/2015/04/12/looking_for_security_trouble_spots_in_go_code/', 'It', 'states', 'that', 'golang', 'is', 'safe', 'from', 'most', '""known""', 'attacks', '(""known""', 'as', 'in', 'used', 'in', 'C).', 'For', 'instance,', 'the', 'fact', 'that', 'there', 'is', 'no', 'pointer', 'arithmetics,', 'no', 'manual', 'memory', 'management', 'make', 'it', 'less', 'prone', 'to', 'errors', 'that', 'would', 'lead', 'to', '""exploitable""', 'code.', ""I'm"", 'no', 'expert', 'of', 'golang', 'but', 'it', 'seems', 'like', 'a', 'well', 'thought', 'language', 'with', 'a', 'good', 'environment', '(std', 'lib,', 'compiler,', 'etc...)']"
876,40267397,"

To reliably find the actual types in the source, use the go/types package.  A tutorial on the package is available.
","['The', 'types', 'in', 'the', 'AST', 'represent', 'the', 'syntax', 'used', 'to', 'declare', 'the', 'type', 'and', 'not', 'the', 'actual', 'type.', 'For', 'example:', 'type', 't', 'struct', '{', '}', 'var', 'a', 'int', '// TypeSpec.Type is *ast.Ident', 'var', 'b', 'struct', '{', '}', '// TypeSpec.Type is *ast.StructType', 'var', 'c', 't', '// TypeSpec.Type is *ast.Ident, but c variable is a struct type', 'I', 'find', ""it's"", 'helpful', 'to', 'print', 'example', 'ASTs', 'when', 'trying', 'to', 'understand', 'how', 'different', 'syntax', 'is', 'represented.', 'Run', 'this', 'program', 'to', 'see', 'an', 'example.', 'This', 'code', 'will', 'check', 'for', 'ints', 'in', 'most', 'cases,', 'but', 'does', 'not', 'do', 'so', 'reliably:', 'if', 'id', ',', 'ok', ':=', 'ts', '.', 'Type', '.(*', 'ast', '.', 'Ident', ');', 'ok', '{', 'if', 'id', '.', 'Name', '==', '""int""', '{', '//', 'it', 'might', 'be', 'an', 'int', '}', '}', 'The', 'code', 'is', 'not', 'correct', 'for', 'the', 'following', 'cases:', 'type', 'myint', 'int', 'var', 'a', 'myint', ""// the underlying type of a is int, but it's not declared as int"", 'type', 'int', 'anotherType', 'var', 'b', 'int', '// b is anotherType, not the predeclared int type', 'To', 'reliably', 'find', 'the', 'actual', 'types', 'in', 'the', 'source,', 'use', 'the', 'go/types', 'package.', 'A', 'tutorial', 'on', 'the', 'package', 'is', 'available.']"
877,40288438,"

The name of an embedded field is the same as the type name.
","['The', 'field', 'origin', 'is', 'an', 'embedded', 'field.', 'The', 'application', 'can', 'set', 'the', 'field', 'using', 'the', 'following', 'code:', 'func', '(', 'dest', '*', 'destination', ')', 'LaunchTheDevice', '(', 'theOrigin', 'origin', ')', '{', 'dest', '.', 'origin', '=', 'theOrigin', '}', 'The', 'name', 'of', 'an', 'embedded', 'field', 'is', 'the', 'same', 'as', 'the', 'type', 'name.']"
878,40370060," all on one line, but the moment the field's assignment is on a different line than the opening and closing braces, it requires a comma.
","['The', 'example', 'you', 'have', 'is', 'equivalent', 'to:', 'type', 'Cache', 'struct', '{', 'sync', '.', 'Mutex', 'map', 'ping', 'map', '[', 'string', ']', 'string', '}', 'cache', ':=', 'Cache', '{', 'map', 'ping', ':', 'make', '(', 'map', '[', 'string', ']', 'string', '),', '}', 'Except', 'in', 'your', 'example', 'you', 'do', 'not', 'declare', 'a', 'type', 'of', 'Cache', 'and', 'instead', 'have', 'an', 'anonymous', 'struct.', 'In', 'your', 'example,', 'as', 'oppose', 'to', 'my', 'Cache', 'type,', 'the', 'type', 'is', 'the', 'entire', 'struct', '{', 'sync', '.', 'Mutex', 'map', 'ping', 'map', '[', 'string', ']', 'string', '}', 'So', 'think', 'of', 'the', 'second', 'pair', 'of', 'braces', 'as', 'the', 'cache', ':=', 'Cache', '{', 'map', 'ping', ':', 'make', '(', 'map', '[', 'string', ']', 'string', '),', '}', 'part.', 'make', 'is', 'a', 'built', 'in', 'function', 'that', 'works', 'similarly', 'to', ""C's"", 'calloc()', 'which', 'both', 'initialize', 'a', 'data', 'structure', 'filled', 'with', ""0'd"", 'values,', 'in', ""Go's"", 'case,', 'certain', 'data', 'structures', 'need', 'to', 'be', 'initialized', 'this', 'way,', ""other's"", '(for', 'the', 'most', 'part', 'structs)', 'are', 'initialized', 'with', ""0'd"", 'values', 'automatically.', 'The', 'field', 'there', 'is', 'needed', 'so', 'that', 'the', 'compiler', ""now's"", 'cache.mapping', 'is', 'a', 'empty', 'map[string]string.', 'The', 'comma', 'there', 'is', 'part', 'of', ""Go's"", 'formatting,', 'you', 'can', 'do', 'Cache', '{', 'map', 'ping', ':', 'make', '(', 'map', '[', 'string', ']', 'string', ')}', 'all', 'on', 'one', 'line,', 'but', 'the', 'moment', 'the', ""field's"", 'assignment', 'is', 'on', 'a', 'different', 'line', 'than', 'the', 'opening', 'and', 'closing', 'braces,', 'it', 'requires', 'a', 'comma.']"
879,40382754,"

the type name (NewType) has just been replaced with the type of the struct itself, struct{A string}. Note that they are not the same type (an alias) for the purpose of comparison or assignment, but they do share the same semantics.
","['This', 'is', 'called', 'a', '""struct', 'literal""', 'or', 'an', '""anonymous', 'struct""', 'and', 'is,', 'in', 'fact,', 'how', 'you', 'always', 'create', 'structs', 'in', 'Go,', 'it', 'just', 'may', 'not', 'be', 'immediately', 'obvious', 'since', 'you', 'might', 'be', 'used', 'to', 'creating', 'new', 'types', 'for', 'struct', 'types', 'to', 'make', 'declaring', 'them', 'a', 'bit', 'less', 'verbose.', 'An', 'entire', 'struct', 'definition', 'is', 'actually', 'a', 'type', 'in', 'Go,', 'just', 'like', 'int', 'or', '[]byte', 'or', 'string.', 'Just', 'as', 'you', 'can', 'do:', 'type', 'NewType', 'int', 'var', 'a', 'NewType', '=', '5', '// a is a NewType (which is based on an int)', 'or:', 'a', ':=', '5', '// a is an int', 'and', 'both', 'are', 'distinct', 'types', 'that', 'look', 'like', 'ints,', 'you', 'can', 'also', 'do', 'the', 'same', 'thing', 'with', 'structs:', '//', 'a', 'is', 'type', 'NewType', '(which', 'is', 'a', 'struct{}).', 'type', 'NewType', 'struct', '{', 'A', 'string', '}', 'a', ':=', 'NewType', '{', 'A', ':', '""test string""', ',', '}', '//', 'a', 'is', 'type', 'struct{A', 'string}', 'a', ':=', 'struct', '{', 'A', 'string', '}{', 'A', ':', '""test string""', ',', '}', 'the', 'type', 'name', '(NewType)', 'has', 'just', 'been', 'replaced', 'with', 'the', 'type', 'of', 'the', 'struct', 'itself,', 'struct{A', 'string}.', 'Note', 'that', 'they', 'are', 'not', 'the', 'same', 'type', '(an', 'alias)', 'for', 'the', 'purpose', 'of', 'comparison', 'or', 'assignment,', 'but', 'they', 'do', 'share', 'the', 'same', 'semantics.']"
880,40392962,"

Here's an example of it working in the Go Playground: https://play.golang.org/p/EUB0K2V7iT

You can see that the concurrent scanner output is interleaved. Rather than reading all of one reader, then moving on to the next, as is seen with io.MultiReader.
","['As', 'JimB', 'commented,', 'that', 'method', ""won't"", 'work', 'due', 'to', 'the', 'operation', 'of', 'io.MultiReader.', 'What', 'you', 'need', 'to', 'do', 'is', 'read', 'from', 'each', 'from', 'each', 'response', 'individually', 'and', 'combine', 'the', 'output.', 'Since', ""you're"", 'dealing', 'with', 'logs,', 'it', 'would', 'make', 'sense', 'to', 'break', 'up', 'the', 'reads', 'on', 'newlines.', 'bufio.Scanner', 'does', 'this', 'for', 'a', 'single', 'io.Reader.', 'So', 'one', 'option', 'would', 'be', 'to', 'create', 'a', 'new', 'type', 'that', 'scans', 'multiple', 'readers', 'concurrently.', 'You', 'could', 'use', 'it', 'like', 'this:', 'scanner', ':=', 'NewConcurrentScanner', '(', 'readers', '...)', 'for', 'scanner.Scan()', '{', 'fmt.Println(scanner.Text())', '}', 'if', 'err', ':=', 'scanner.Err()', ';', 'err', '!=', 'nil', '{', 'log.Fatalln(err)', '}', 'Example', 'implementation', 'of', 'a', 'concurrent', 'scanner:', '//', 'ConcurrentScanner', 'works', 'like', 'io.Scanner,', 'but', 'with', 'multiple', 'io.Readers', 'type', 'ConcurrentScanner', 'struct', '{', 'scans', 'chan', '[]', 'byte', '// Scanned data from readers', 'errors', 'chan', 'error', '// Errors from readers', 'done', 'chan', 'struct', '{}', '// Signal that all readers have completed', 'cancel', 'func', '()', '// Cancel all readers (stop on first error)', 'data', '[]', 'byte', '// Last scanned value', 'err', 'error', '}', '//', 'NewConcurrentScanner', 'starts', 'scanning', 'each', 'reader', 'in', 'a', 'separate', 'goroutine', '//', 'and', 'returns', 'a', '*ConcurrentScanner.', 'func', 'NewConcurrentScanner', '(', 'readers', '...', 'io', '.', 'Reader', ')', '*', 'ConcurrentScanner', '{', 'ctx', ',', 'cancel', ':=', 'context.WithCancel(context.Background())', 's', ':=', '&', 'ConcurrentScanner', '{', 'scans', ':', 'make', '(', 'chan', '[]', 'byte', '),', 'errors', ':', 'make', '(', 'chan', 'error', '),', 'done', ':', 'make', '(', 'chan', 'struct', '{}),', 'cancel', ':', 'cancel', ',', '}', 'var', 'wg', 'sync', '.', 'WaitGroup', 'wg.Add(len(readers))', 'for', '_', ',', 'reader', ':=', 'range', 'readers', '{', '//', 'Start', 'a', 'scanner', 'for', 'each', 'reader', 'in', ""it's"", 'own', 'goroutine.', 'go', 'func', '(', 'reader', 'io', '.', 'Reader', ')', '{', 'defer', 'wg.Done()', 'scanner', ':=', 'bufio.NewScanner(reader)', 'for', 'scanner.Scan()', '{', 'select', '{', 'case', 's', '.', 'scans', '<-', 'scanner.Bytes()', ':', '//', 'While', 'there', 'is', 'data,', 'send', 'it', 'to', 's.scans,', '//', 'this', 'will', 'block', 'until', 'Scan()', 'is', 'called.', 'case', '<-', 'ctx.Done()', ':', '//', 'This', 'fires', 'when', 'context', 'is', 'cancelled,', '//', 'indicating', 'that', 'we', 'should', 'exit', 'now.', 'return', '}', '}', 'if', 'err', ':=', 'scanner.Err()', ';', 'err', '!=', 'nil', '{', 'select', '{', 'case', 's', '.', 'errors', '<-', 'err', ':', '//', 'Reprort', 'we', 'got', 'an', 'error', 'case', '<-', 'ctx.Done()', ':', '//', 'Exit', 'now', 'if', 'context', 'was', 'cancelled,', 'otherwise', 'sending', '//', 'the', 'error', 'and', 'this', 'goroutine', 'will', 'never', 'exit.', 'return', '}', '}', '}(', 'reader', ')', '}', 'go', 'func', '()', '{', '//', 'Signal', 'that', 'all', 'scanners', 'have', 'completed', 'wg.Wait()', 'close', '(', 's', '.', 'done', ')', '}()', 'return', 's', '}', 'func', '(', 's', '*', 'ConcurrentScanner', ')', 'Scan', '()', 'bool', '{', 'select', '{', 'case', 's', '.', 'data', '=', '<-', 's', '.', 'scans', ':', '//', 'Got', 'data', 'from', 'a', 'scanner', 'return', 'true', 'case', '<-', 's', '.', 'done', ':', '//', 'All', 'scanners', 'are', 'done,', 'nothing', 'to', 'do.', 'case', 's', '.', 'err', '=', '<-', 's', '.', 'errors', ':', '//', 'One', 'of', 'the', 'scanners', ""error'd,"", 'were', 'done.', '}', 's.cancel()', '// Cancel context regardless of how we exited.', 'return', 'false', '}', 'func', '(', 's', '*', 'ConcurrentScanner', ')', 'Bytes', '()', '[]', 'byte', '{', 'return', 's', '.', 'data', '}', 'func', '(', 's', '*', 'ConcurrentScanner', ')', 'Text', '()', 'string', '{', 'return', 'string', '(', 's', '.', 'data', ')', '}', 'func', '(', 's', '*', 'ConcurrentScanner', ')', 'Err', '()', 'error', '{', 'return', 's', '.', 'err', '}', ""Here's"", 'an', 'example', 'of', 'it', 'working', 'in', 'the', 'Go', 'Playground:', 'https://play.golang.org/p/EUB0K2V7iT', 'You', 'can', 'see', 'that', 'the', 'concurrent', 'scanner', 'output', 'is', 'interleaved.', 'Rather', 'than', 'reading', 'all', 'of', 'one', 'reader,', 'then', 'moving', 'on', 'to', 'the', 'next,', 'as', 'is', 'seen', 'with', 'io.MultiReader.']"
881,40398093,"

Note that I intentionally used a downward loop in Checks() to mimic the first-in-last-out nature of the execution of deferred functions, because the last defer will be executed first, and so using a downward loop the last function value passed to Checks() will be executed first.
","['If', 'a', 'deferred', 'function', 'has', 'any', 'return', 'values,', 'they', 'are', 'discarded', 'when', 'the', 'function', 'completes', '(for', 'more', 'details', 'check', 'Spec:', 'Defer', 'statements).', 'So', 'the', 'only', 'way', 'to', 'check', 'the', 'return', 'value', 'is', 'to', 'store', 'it,', 'and', 'it', 'is', 'only', 'possible', 'if', 'not', 'the', 'function', 'itself', 'is', 'deferred,', 'but', 'another', 'function', 'that', 'calls', 'it.', 'One', 'way', 'to', 'do', 'it', 'is', 'using', 'an', 'anonymous', 'function', 'as', 'you', 'did,', 'which', 'may', 'be', 'slightly', 'simplified:', 'defer', 'func', '()', '{', 'if', 'err', ':=', 'r', '.', 'Body.Close()', ';', 'err', '!=', 'nil', '{', 'fmt.Println(""Error when closing:"", err)', '}', '}()', 'Or', 'you', 'may', 'create', 'a', 'helper', 'function', 'for', 'it:', 'func', 'Check', '(', 'f', 'func', '()', 'error', ')', '{', 'if', 'err', ':=', 'f', '();', 'err', '!=', 'nil', '{', 'fmt.Println(""Received error:"", err)', '}', '}', 'And', 'using', 'it:', 'defer', 'Check', '(', 'r', '.', 'Body', '.', 'Close', ')', 'The', 'helper', 'function', 'of', 'course', 'can', 'be', 'used', 'multiple', 'times,', 'e.g.:', 'defer', 'Check', '(', 'r', '.', 'Body', '.', 'Close', ')', 'defer', 'Check', '(', 'SomeOtherFunc', ')', 'For', 'which', 'you', 'may', 'also', 'create', 'a', 'modified', 'helper', 'function,', 'which', 'may', 'accept', 'multiple', 'functions:', 'func', 'Checks', '(', 'fs', '...', 'func', '()', 'error', ')', '{', 'for', 'i', ':=', 'len', '(', 'fs', ')', '-', '1', ';', 'i', '>=', '0', ';', 'i', '--', '{', 'if', 'err', ':=', 'fs', '[', 'i', ']();', 'err', '!=', 'nil', '{', 'fmt.Println(""Received error:"", err)', '}', '}', '}', 'And', 'using', 'it:', 'defer', 'Checks', '(', 'r', '.', 'Body', '.', 'Close', ',', 'SomeOtherFunc', ')', 'Note', 'that', 'I', 'intentionally', 'used', 'a', 'downward', 'loop', 'in', 'Checks()', 'to', 'mimic', 'the', 'first-in-last-out', 'nature', 'of', 'the', 'execution', 'of', 'deferred', 'functions,', 'because', 'the', 'last', 'defer', 'will', 'be', 'executed', 'first,', 'and', 'so', 'using', 'a', 'downward', 'loop', 'the', 'last', 'function', 'value', 'passed', 'to', 'Checks()', 'will', 'be', 'executed', 'first.']"
882,40413105,"

Installation directions from Beego
","['That', 'is', 'not', 'the', 'url', 'path', 'for', 'Beego.', 'You', 'also', 'have', 'a', 'typo', 'after', 'your', 'go', 'get', 'command.', 'You', 'need', 'to', 'run', 'this', 'from', 'your', 'command', 'line:', 'go', 'get', 'github', '.', 'com/astaxie/beego', 'Installation', 'directions', 'from', 'Beego']"
883,40423745,"

https://play.golang.org/p/oUFjZONjhk (note that in the playground, this example seems to currently favor a single goroutine being the receiver. Normally the blocked goroutines will receive randomly, and you can see that behavior if you compile and run normally)
","[""You're"", 'blocking', 'the', 'iteration', 'over', 'the', 'channel', 'in', 'your', 'handle', 'function', 'with', 'the', 'send', 'on', 'the', 'done', 'channel,', 'because', 'nothing', 'is', 'receiving', 'on', 'the', 'other', 'side.', 'Those', 'extra', 'channels', ""aren't"", 'really', 'doing', 'anything,', 'and', 'you', 'could', 'just', 'add', 'a', 'WaitGroup', 'to', 'synchronize', 'the', ""handler's"", 'exit,', 'then', 'you', 'can', 'remove', 'the', 'done', 'channel', 'which', 'will', 'allow', 'the', 'handler', 'to', 'continue.', 'func', 'handle', '(', 'queue', 'chan', '*', 'Request', ',', 'i', 'int', ',', 'wg', '*', 'sync', '.', 'WaitGroup', ')', '{', 'defer', 'wg.Done()', 'for', 'r', ':=', 'range', 'queue', '{', 'fmt.Println(i, ""---"", r)', '}', '}', 'func', 'Serve', '(', 'clientRequests', 'chan', '*', 'Request', ',', 'wg', '*', 'sync', '.', 'WaitGroup', ')', '{', '//', 'Start', 'handlers', 'for', 'i', ':=', '0', ';', 'i', '<', 'MaxOutstanding', ';', 'i', '++', '{', 'wg.Add(1)', 'go', 'handle', '(', 'clientRequests', ',', 'i', ',', 'wg', ')', '}', '}', 'func', 'main', '()', '{', 'clientRequests', ':=', 'make', '(', 'chan', '*', 'Request', ')', 'var', 'wg', 'sync', '.', 'WaitGroup', 'go', 'Serve', '(', 'clientRequests', ',', '&', 'wg', ')', 'for', 'i', ':=', 'int32', '(', '0', ');', 'i', '<', '50', ';', 'i', '++', '{', 'clientRequests', '<-', '&', 'Request', '{', 'i', '}', '}', 'close', '(', 'clientRequests', ')', 'wg.Wait()', '}', 'https://play.golang.org/p/oUFjZONjhk', '(note', 'that', 'in', 'the', 'playground,', 'this', 'example', 'seems', 'to', 'currently', 'favor', 'a', 'single', 'goroutine', 'being', 'the', 'receiver.', 'Normally', 'the', 'blocked', 'goroutines', 'will', 'receive', 'randomly,', 'and', 'you', 'can', 'see', 'that', 'behavior', 'if', 'you', 'compile', 'and', 'run', 'normally)']"
884,40423754,"

https://play.golang.org/p/L5Y2YoFNvz
","['Inside', 'the', 'for', 'loop', 'you', 'are', 'handling', 'the', 'channel', 'operation', 'only', 'to', 'the', '5th', 'element,', 'however', 'in', 'the', 'main', 'function', 'you', 'are', 'trying', 'to', 'send', 'over', 'the', 'value', 'to', 'the', 'channel,', 'which', 'is', 'closed.', 'To', 'overcome', 'this', 'situation', 'you', 'can', 'send', 'the', 'request', 'value', 'inside', 'a', 'for', 'loop:', 'for', 'i', ':=', '0', ';', 'i', '<', 'MaxOutstanding', ';', 'i', '++', '{', 'clientRequests', '<-', '&', 'Request', '{', 'int32', '(', 'i', ')}', '}', 'Here', 'is', 'the', 'working', 'code:', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'Request', 'struct', '{', 'int32', '}', 'var', 'MaxOutstanding', '=', '10', 'func', 'handle', '(', 'queue', 'chan', '*', 'Request', ',', 'i', 'int', ',', 'done', 'chan', 'bool', ')', '{', 'for', 'r', ':=', 'range', 'queue', '{', 'fmt.Println(i, ""---"", r)', 'done', '<-', 'true', '}', '}', 'func', 'Serve', '(', 'clientRequests', 'chan', '*', 'Request', ',', 'quit', ',', 'done', 'chan', 'bool', ')', '{', '//', 'Start', 'handlers', 'for', 'i', ':=', '0', ';', 'i', '<', 'MaxOutstanding', ';', 'i', '++', '{', 'go', 'handle', '(', 'clientRequests', ',', 'i', ',', 'done', ')', '}', '<-', 'quit', '// Wait to be told to exit.', '}', 'func', 'main', '()', '{', 'clientRequests', ':=', 'make', '(', 'chan', '*', 'Request', ')', 'quit', ':=', 'make', '(', 'chan', 'bool', ')', 'done', ':=', 'make', '(', 'chan', 'bool', ')', 'go', 'Serve', '(', 'clientRequests', ',', 'quit', ',', 'done', ')', 'for', 'i', ':=', '0', ';', 'i', '<', 'MaxOutstanding', ';', 'i', '++', '{', 'clientRequests', '<-', '&', 'Request', '{', 'int32', '(', 'i', ')}', '}', 'fmt.Println(""...........>"", <-done)', 'close', '(', 'clientRequests', ')', 'close', '(', 'done', ')', '}', 'https://play.golang.org/p/L5Y2YoFNvz']"
885,40468644,"
","['If', 'clearing', 'the', 'terminal', 'is', 'truly', 'part', 'of', 'your', ""program's"", 'responsibility', 'then', 'check', 'out', 'the', 'answers', 'in', 'this', 'question', 'How', 'can', 'I', 'clear', 'the', 'terminal', 'screen', 'in', 'Go?', 'However', 'if', ""you're"", 'just', 'wanting', 'to', 'clear', 'the', 'screen', 'as', 'part', 'of', 'your', 'development', 'process', 'then', 'I', 'would', 'keep', 'it', 'simple', 'and', 'do', 'something', 'like', 'this', 'clear', '&&', 'go', 'run', '*.', 'go']"
886,40502582,"

Source
","['You', 'need', 'to', 'write', 'your', 'own', 'implimentation', 'of', 'logrus.Formatter.', 'type', 'Formatter', 'interface', '{', 'Format', '(*', 'Entry', ')', '([]', 'byte', ',', 'error', ')', '}', 'Source']"
887,40502637,"
","['Time', 'zone', 'setting', 'is', 'not', 'supported', 'directly,', 'but', 'you', 'may', 'use', 'a', 'custom', 'log.Formatter', 'in', 'which', 'you', 'may', '""switch""', 'to', 'the', 'time', 'zone', 'of', 'your', 'choice,', 'UTC', 'included.', 'A', 'simple', 'usage', 'that', 'uses', 'the', 'local', 'time', 'zone', '(not', 'UTC)', 'may', 'look', 'like', 'this:', 'import', '(', 'log', '""github.com/Sirupsen/logrus""', ')', 'func', 'main', '()', '{', 'log.SetFormatter(&log.JSONFormatter{})', 'log.Info(""Testing"")', '}', 'Output', '(time', 'is', 'formatted', 'using', 'my', '+01', 'local', 'timezone):', '{', '""level""', ':', '""info""', ',', '""msg""', ':', '""Testing""', ',', '""time""', ':', '""2016-11-09T09:28:02+01:00""', '}', 'Now', ""let's"", 'create', 'a', 'custom', 'log.Formatter', 'which', 'switches', 'to', 'UTC:', 'type', 'UTCFormatter', 'struct', '{', 'log', '.', 'Formatter', '}', 'func', '(', 'u', 'UTCFormatter', ')', 'Format', '(', 'e', '*', 'log', '.', 'Entry', ')', '([]', 'byte', ',', 'error', ')', '{', 'e', '.', 'Time', '=', 'e', '.', 'Time.UTC()', 'return', 'u', '.', 'Formatter.Format(e)', '}', 'func', 'main', '()', '{', 'log.SetFormatter(UTCFormatter{&log.JSONFormatter{}})', 'log.Info(""Testing"")', '}', 'Output', '(time', 'is', 'formatted', 'in', 'UTC', 'timezone):', '{', '""level""', ':', '""info""', ',', '""msg""', ':', '""Testing""', ',', '""time""', ':', '""2016-11-09T08:28:09Z""', '}']"
888,40505694,"
","['You', 'JSON', 'is', 'not', 'valid', 'with', 'superfluous', 'comma', 'after', 'the', 'second', ']', 'Once', 'you', 'correct', 'the', 'JSON,', 'you', 'can', 'use', 'the', 'excellent', 'https://mholt.github.io/json-to-go/', 'to', 'build', 'the', 'following', 'Go', 'struct', 'type', 'AutoGenerated', 'struct', '{', 'Message', 'struct', '{', 'Server1ExampleCom', '[]', 'struct', '{', 'Application', 'string', 'json', ':', '""application""', 'Host', 'struct', '{', 'Name', 'string', 'json', ':', '""name""', '}', 'json', ':', '""host""', 'Owner', 'string', 'json', ':', '""owner""', 'Project', 'string', 'json', ':', '""project""', 'Subowner', 'string', 'json', ':', '""subowner""', '}', 'json', ':', '""Server1.example.com""', 'Server2ExampleCom', '[]', 'struct', '{', 'Application', 'string', 'json', ':', '""application""', 'Host', 'struct', '{', 'Name', 'string', 'json', ':', '""name""', '}', 'json', ':', '""host""', 'Owner', 'string', 'json', ':', '""owner""', 'Project', 'string', 'json', ':', '""project""', 'Subowner', 'string', 'json', ':', '""subowner""', '}', 'json', ':', '""Server2.example.com""', '}', 'json', ':', '""message""', 'ResponseMs', 'int', 'json', ':', '""response_ms""', 'Success', 'bool', 'json', ':', '""success""', '}']"
889,40509559,"

With some additional json tags, you will be able to parse your json.
","['You', 'could', 'include', 'a', 'map[string]ServerStruct', 'to', 'fullfill', 'your', 'requirements.', 'your', 'struct', 'could', 'look', 'like', 'this:', 'type', 'YourStruct', 'struct', '{', 'Success', 'bool', 'ResponseMS', 'int', 'Servers', 'map', '[', 'string', ']*', 'ServerStruct', '}', 'type', 'ServerStruct', 'struct', '{', 'Application', 'string', 'Owner', 'string', '[...]', '}', 'With', 'some', 'additional', 'json', 'tags,', 'you', 'will', 'be', 'able', 'to', 'parse', 'your', 'json.']"
890,40540527,"

playground example
","['Try', 'this:', 'type', 'ConfigItem', 'struct', '{', 'Name', 'string', 'Value', 'interface', '{}', 'SomethingElse', 'bool', '}', 'map', 'OfResults', '=', 'ThingDoer', '([]', 'ConfigItem', '{', '{', '""One""', ',', '-', '1', ',', 'true', '},', '{', '""Flying""', ',', '""""', ',', 'true', '},', '{', '""Banana""', ',', 'false', ',', 'true', '},', '})', 'The', 'ThingDoer', 'can', 'use', 'a', 'type', 'switch', 'to', 'determine', 'the', 'value', 'types:', 'func', 'ThingDoer', '(', 'config', '[]', 'ConfigItem', ')', 'map', '[', 'foo', ']', 'bar', '{', 'for', '_', ',', 'item', ':=', 'range', 'config', '{', 'switch', 'v', ':=', 'item', '.', 'Value', '.(', 'type', ')', '{', 'case', 'int', ':', '//', 'v', 'is', 'int', 'case', 'bool', ':', '//', 'v', 'is', 'bool', 'case', 'string', ':', '//', 'v', 'is', 'string', '}', '}', '}', 'playground', 'example']"
891,40575079,"
","['This', 'is', 'normal', 'behaviour', 'that', 'is', 'defined', 'by', 'the', 'spec', '(emphasis', 'mine):', 'The', 'TypeSwitchGuard', 'may', 'include', 'a', 'short', 'variable', 'declaration.', 'When', 'that', 'form', 'is', 'used,', 'the', 'variable', 'is', 'declared', 'at', 'the', 'beginning', 'of', 'the', 'implicit', 'block', 'in', 'each', 'clause.', 'In', 'clauses', 'with', 'a', 'case', 'listing', 'exactly', 'one', 'type,', 'the', 'variable', 'has', 'that', 'type;', 'otherwise,', 'the', 'variable', 'has', 'the', 'type', 'of', 'the', 'expression', 'in', 'the', 'TypeSwitchGuard.', 'So,', 'in', 'fact,', 'the', 'type', 'switch', 'does', 'take', 'effect,', 'but', 'the', 'variable', 'a', 'keeps', 'the', 'type', 'interface{}.', 'One', 'way', 'you', 'could', 'get', 'around', 'this', 'is', 'to', 'assert', 'that', 'foo', 'has', 'the', 'method', 'test(),', 'which', 'would', 'look', 'something', 'like', 'this:', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'A', 'struct', '{', 'a', 'int', '}', 'func', '(', 'this', '*', 'A', ')', 'test', '()', '{', 'fmt.Println(this)', '}', 'type', 'B', 'struct', '{', 'A', '}', 'type', 'tester', 'interface', '{', 'test', '()', '}', 'func', 'main', '()', '{', 'var', 'foo', 'interface', '{}', 'foo', '=', '&', 'B', '{}', 'if', 'a', ',', 'ok', ':=', 'foo', '.(', 'tester', ');', 'ok', '{', 'fmt.Println(""foo has test() method"")', 'a.test()', '}', '}']"
892,40586380,"

Run the go code here
","['Try', 'this:', '\\((.*?)\\)', 'Explanation', 'Code', 'Sample:', 'package', 'main', 'import', '(', '""regexp""', '""fmt""', ')', 'func', 'main', '()', '{', 'var', 're', '=', 'regexp.MustCompile(`\\((.*?)\\)`)', 'var', 'str', '=', 'foo', '(', 'bar', ')', 'foo', '(', 'baz', ')', 'go', 'lang', 'mt', ':=', 're.FindAllStringSubmatch(str, -1)', 'for', '_', ',', 'i', ':=', 'range', 'mt', '{', 'fmt.Println(i[1])', '}', '}', 'Run', 'the', 'go', 'code', 'here']"
893,40586418,"

outputs:

bar
baz




The Regex \(([^)]+)\):


\( matches literal (
([^)]+) matches substring upto next ) and put the match in a captured group, here you can use non-greeedy match .*?\) too
\) matches literal )




Go playground demo
","[""go's"", 'regexp', 'package', 'does', 'not', 'support', 'zero', 'width', 'lookarounds.', 'You', 'can', 'leverage', 'captured', 'grouping', 'with', 'the', 'regexp.FindAllStringSubmatch()', 'function:', 'package', 'main', 'import', '(', '""regexp""', '""fmt""', ')', 'func', 'main', '()', '{', 'str', ':=', '""foo(bar)foo(baz)golang""', 'rex', ':=', 'regexp.MustCompile(`\\(([^)]+)\\)`)', 'out', ':=', 'rex.FindAllStringSubmatch(str, -1)', 'for', '_', ',', 'i', ':=', 'range', 'out', '{', 'fmt.Println(i[1])', '}', '}', 'outputs:', 'bar', 'baz', 'The', 'Regex', '\\(([^)]+)\\):', '\\(', 'matches', 'literal', '(', '([^)]+)', 'matches', 'substring', 'upto', 'next', ')', 'and', 'put', 'the', 'match', 'in', 'a', 'captured', 'group,', 'here', 'you', 'can', 'use', 'non-greeedy', 'match', '.*?\\)', 'too', '\\)', 'matches', 'literal', ')', 'Go', 'playground', 'demo']"
894,40589592,"
","['AddDate', 'takes', '(and', 'adds)', 'year,', 'month,', 'day', 'as', 'parameters,', 'not', 'hour,', 'minute,', 'second.', 'From', 'https://golang.org/pkg/time/#Time.AddDate:', 'func', '(', 't', 'Time', ')', 'AddDate', '(', 'years', 'int', ',', 'months', 'int', ',', 'days', 'int', ')', 'Time']"
895,40589596,"
","['I', 'guess', 'what', 'you', 'are', 'looking', 'for', 'is', 'timein', ':=', 'time.Now().Local().Add(time.Hour * time.Duration(Hours)', '+', 'time', '.', 'Minute', '*', 'time.Duration(Mins)', '+', 'time', '.', 'Second', '*', 'time.Duration(Sec))']"
896,40595743,"
","['A', 'binary', 'search', 'requires', 'a', 'greater', 'than', 'or', 'less', 'than', 'comparison,', 'otherwise', 'it', 'would', 'just', 'be', 'a', 'linear', 'search', 'over', 'the', 'slice.', 'Any', 'comparison', 'greater', 'than', 'the', 'value', 'at', 'the', 'requested', 'index', 'needs', 'to', 'be', 'true,', 'in', 'order', 'for', 'the', 'search', 'method', 'to', 'scan', 'backwards', 'looking', 'for', 'the', 'smallest', 'index.', 'See', 'the', 'default', 'implementation', 'of', 'the', 'string', 'search', 'function', 'from', 'the', 'sort', 'package:', 'https://golang.org/src/sort/search.go?s=3673:3717#L91', 'func', 'SearchStrings', '(', 'a', '[]', 'string', ',', 'x', 'string', ')', 'int', '{', 'return', 'Search', '(', 'len', '(', 'a', '),', 'func', '(', 'i', 'int', ')', 'bool', '{', 'return', 'a', '[', 'i', ']', '>=', 'x', '})', '}']"
897,40658382,"Use the full option names of --start-group and --end-group rather than the shorthand version.
",[]
898,40661736,"along with with separate packages as above, if you set the GOBIN=$GOPATH/bin then it will create client and server in the bin dir and it will not collide with dir names 
","['along', 'with', 'with', 'separate', 'packages', 'as', 'above,', 'if', 'you', 'set', 'the', 'GOBIN=$GOPATH/bin', 'then', 'it', 'will', 'create', 'client', 'and', 'server', 'in', 'the', 'bin', 'dir', 'and', 'it', 'will', 'not', 'collide', 'with', 'dir', 'names']"
899,40663575,"
","['Here', 'is', 'a', 'possible', 'solution,', 'which', 'is', 'based', 'on', ""@Andy's"", 'comment.', 'A', 'new', 'responseRecorder', 'will', 'be', 'passed', 'to', 'the', 'nextHandler,', 'and', 'the', 'recorded', 'response', 'will', 'be', 'copied', 'back', 'to', 'the', 'client:', 'func', 'timeoutHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', 'error', '{', 'const', 'seconds', '=', '1', 'ctx', ',', 'cancel', ':=', 'context.WithTimeout(r.Context()', ',', 'time.Duration(seconds)*time.Second)', 'defer', 'cancel', '()', 'r', '=', 'r.WithContext(ctx)', 'errCh', ':=', 'make', '(', 'chan', 'error', ',', '1', ')', 'w2', ':=', 'newResponseRecorder', '()', 'go', 'func', '()', '{', 'errCh', '<-', 'nextHandler', '(', 'w2', ',', 'r', ')', '}()', 'select', '{', 'case', 'err', ':=', '<-', 'errCh', ':', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'w2.cloneHeader(w.Header())', 'w.WriteHeader(w2.status)', 'w.Write(w2.buf.Bytes())', 'return', 'nil', 'case', '<-', 'ctx.Done()', ':', 'http.Error(w, ""Request timeout"", 408)', 'return', 'nil', '}', '}', 'And', 'here', 'is', 'the', 'responseRecorder:', 'type', 'responseRecorder', 'struct', '{', 'http', '.', 'ResponseWriter', 'header', 'http', '.', 'Header', 'buf', '*', 'bytes', '.', 'Buffer', 'status', 'int', '}', 'func', 'newResponseRecorder', '()', '*', 'responseRecorder', '{', 'return', '&', 'responseRecorder', '{', 'header', ':', 'http', '.', 'Header', '{},', 'buf', ':', '&', 'bytes', '.', 'Buffer', '{},', '}', '}', 'func', '(', 'w', '*', 'responseRecorder', ')', 'Header', '()', 'http', '.', 'Header', '{', 'return', 'w', '.', 'header', '}', 'func', '(', 'w', '*', 'responseRecorder', ')', 'cloneHeader', '(', 'dst', 'http', '.', 'Header', ')', '{', 'for', 'k', ',', 'v', ':=', 'range', 'w', '.', 'header', '{', 'tmp', ':=', 'make', '([]', 'string', ',', 'len', '(', 'v', '))', 'copy', '(', 'tmp', ',', 'v', ')', 'dst', '[', 'k', ']', '=', 'tmp', '}', '}', 'func', '(', 'w', '*', 'responseRecorder', ')', 'Write', '(', 'data', '[]', 'byte', ')', '(', 'int', ',', 'error', ')', '{', 'if', 'w', '.', 'status', '==', '0', '{', 'w.WriteHeader(http.StatusOK)', '}', 'return', 'w', '.', 'buf.Write(data)', '}', 'func', '(', 'w', '*', 'responseRecorder', ')', 'WriteHeader', '(', 'status', 'int', ')', '{', 'w', '.', 'status', '=', 'status', '}']"
900,40669025,"

Also you should check the length of os.Args before indexing it, if the user does not provide any arguments, os.Args[1] will panic.

As you mentioned, you should find another way to test input JSON documents, this becomes unfeasible if the JSON text is larger, and also this is OS (shell) specific. A better way would be to read from the standard input or read from a file.
","['First', 'check', 'errors', 'returned', 'by', 'json.Unmarshal().', 'Next', 'your', 'json', 'tag', 'uses', 'small', '""a""', 'as', 'the', 'JSON', 'key,', 'however', 'the', 'encoding/json', 'package', 'will', 'recognize', 'the', 'capital', '""A""', 'too.', 'And', 'last', 'passing', 'such', 'arguments', 'in', 'the', 'command', 'line', 'may', 'be', 'OS', '(shell)', 'specific.', 'The', 'backtick', 'and', 'quotes', 'usually', 'have', 'special', 'meaning,', 'try', 'passing', 'it', 'like', 'this:', 'go', 'run', 'trial', '.', 'go', '{', '""a\\""', ':', '""1\\""', '}', 'Also', 'you', 'should', 'check', 'the', 'length', 'of', 'os.Args', 'before', 'indexing', 'it,', 'if', 'the', 'user', 'does', 'not', 'provide', 'any', 'arguments,', 'os.Args[1]', 'will', 'panic.', 'As', 'you', 'mentioned,', 'you', 'should', 'find', 'another', 'way', 'to', 'test', 'input', 'JSON', 'documents,', 'this', 'becomes', 'unfeasible', 'if', 'the', 'JSON', 'text', 'is', 'larger,', 'and', 'also', 'this', 'is', 'OS', '(shell)', 'specific.', 'A', 'better', 'way', 'would', 'be', 'to', 'read', 'from', 'the', 'standard', 'input', 'or', 'read', 'from', 'a', 'file.']"
901,40676494,"
","['import', '(', '""fmt""', ';', '""strings""', ')', 'func', 'commas', '(', 's', 'string', ')', 'string', '{', 'if', 'len', '(', 's', ')', '<=', '3', '{', 'return', 's', '}', 'else', '{', 'return', 'commas', '(', 's', '[', '0', ':', 'len', '(', 's', ')-', '3', '])', '+', '"",""', '+', 's', '[', 'len', '(', 's', ')-', '3', ':]', '}', '}', 'func', 'toString', '(', 'f', 'float64', ')', 'string', '{', 'parts', ':=', 'strings.Split(fmt.Sprintf(""%.2f"", f), ""."")', 'if', 'parts', '[', '0', '][', '0', ']', '==', ""'-'"", '{', 'return', '""-""', '+', 'commas', '(', 'parts', '[', '0', '][', '1', ':])', '+', '"".""', '+', 'parts', '[', '1', ']', '}', 'return', 'commas', '(', 'parts', '[', '0', '])', '+', '"".""', '+', 'parts', '[', '1', ']', '}']"
902,40688635,"
","['Thanks', 'to', 'a', 'comment', 'from', 'Ismail', 'Badawi,', 'the', 'answer', 'is', 'to', 'write', 'a', 'function', 'in', 'C', 'that', 'returns', 'None.', 'This', 'is', 'required', 'because', 'Py_None', 'is', 'a', 'macro,', 'which', 'Go', ""can't"", 'see.', 'none.c', 'define', 'Py_LIMITED_API', 'include', 'PyObject', '*', 'IncrNone', '()', '{', 'Py_RETURN_NONE', ';', '}', 'mymodule.go', '/*', 'cgo', 'pkg', '-', 'config', ':', 'python3', 'define', 'Py_LIMITED_API', 'include', 'PyObject', '*', 'IncrNone', '();', '*/', 'import', '""C""', '//', 'export', 'Nothing', 'func', 'Nothing', '(', 'self', ',', 'args', '*', 'C', '.', 'PyObject', ')', '(', 'status', '*', 'C', '.', 'PyObject', ')', '{', 'return', 'C.IncrNone()', '}']"
903,40713267,"
","['You', 'must', 'use', '(with', '""http://""', 'in', 'this', 'case)', 'resp', ',', '_', ':=', 'http.Get(""http://localhost:80/static"")', 'and', 'check', 'the', 'errors', 'before', 'use', 'the', 'response,', 'just', 'in', 'case', 'the', 'request', 'fails', 'resp', ',', 'err', ':=', 'http.Get(""http://localhost:80/static"")', 'if', 'err', '!=', 'nil', '{', '//', 'do', 'something', '}', 'else', '{', 'ans', ',', '_', ':=', 'ioutil.ReadAll(resp.Body)', 'fmt.Printf(""response: %s"", ans)', '}', 'Also,', 'if', 'you', 'want', 'to', 'get', 'any', 'response', 'from', 'your', 'handler,', 'you', 'have', 'to', 'write', 'a', 'response', 'in', 'it.', 'func', 'myHandler', '(', 'rw', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{', 'fmt.Printf(req.URL.Path)', 'rw.Write([]byte(""Hello World!""))', '}']"
904,40741632,"Yes, you can use an internal directory. 


  Code in or below a directory named ""internal"" is importable only by code in the directory tree rooted at the parent of ""internal"". 

","['Yes,', 'you', 'can', 'use', 'an', 'internal', 'directory.', 'Code', 'in', 'or', 'below', 'a', 'directory', 'named', '""internal""', 'is', 'importable', 'only', 'by', 'code', 'in', 'the', 'directory', 'tree', 'rooted', 'at', 'the', 'parent', 'of', '""internal"".']"
905,40802483,"
","['You', 'can', 'try', 'os.NewFile:', 'f', ':=', 'os.NewFile(4, ""my_fd_4"")']"
906,40828492,"

bar could be a struct property if you like. Also, no maps.
","['Yes.', 'With', 'gjson', 'all', 'you', 'have', 'to', 'do', 'now', 'is:', 'bar', ':=', 'gjson.Get(json, ""foo.bar"")', 'bar', 'could', 'be', 'a', 'struct', 'property', 'if', 'you', 'like.', 'Also,', 'no', 'maps.']"
907,40833102,"

See https://play.golang.org/p/7WwQbPuESC.
","['The', 'format', 'is', 'described', 'here:', 'Convert', 'snmp', 'octet', 'string', 'to', 'human', 'readable', 'date', 'format', 'If', 'you', 'just', 'need', 'to', 'create', 'a', 'date/time', 'string', 'in', 'the', 'format', 'you', 'mentioned,', 'this', 'will', 'do', 'it:', 'func', 'snmpTimeString', '(', 'c', '[]', 'byte', ')', 'string', '{', 'year', ':=', '(', 'int', '(', 'c', '[', '0', '])', '<<', '8', ')', '|', 'int', '(', 'c', '[', '1', '])', 'return', 'fmt.Sprintf(""%d-%d-%d,%02d:%02d:%02d.%d,%c%d:%d"", year, c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10])', '}', 'func', 'main', '()', '{', 'c', ':=', '[]', 'byte', '{', '0x7', ',', '0xe', '0', ',', '0x1', ',', '0x1c', ',', '0x14', ',', '0x4', ',', '0x2a', ',', '0', 'x0', ',', '0x2b', ',', '0', 'x0', ',', '0', 'x0', '}', 'fmt.Println(snmpTimeString(c))', '}', 'See', 'https://play.golang.org/p/7WwQbPuESC.']"
908,40842586,"
","['Similar', 'to', ""bjarneh's"", 'response.', 'If', 'you', 'want', 'to', 'do', 'this', 'via', 'interfaces,', 'best', 'to', 'avoid', 'reflect.', 'Reflect', 'is', 'not', 'good', 'for', 'comparing', 'values,', 'because', 'you', 'cannot', 'know', 'what', 'type', 'the', 'values', 'are.', 'My', 'suggestion', 'is', 'to', 'implement', 'something', 'similar', 'to', ""go's"", 'sort', 'interface', 'which', 'allows', 'you', 'to', 'use', 'the', 'function', 'sort', 'on', 'any', 'type.', 'Implementing', 'it', 'this', 'way', 'would', 'then', 'allow', 'you', 'to', 'get', 'max', 'value', 'for', 'structs', 'or', 'strings,', 'as', 'long', 'as', 'you', 'implemented', 'the', 'functions', 'for', 'them.', 'On', 'go', 'playgorund', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'Comparable', 'interface', '{', 'Less', '(', 'i', ',', 'j', 'int', ')', 'bool', 'Len', '()', 'int', 'Val', '(', 'i', 'int', ')', 'interface', '{}', '}', 'func', 'maxer', '(', 's', 'Comparable', ')', '(', 'interface', '{})', '{', 'if', 's.Len()', '==', '0', '{', 'return', 'nil', '}', 'maxI', ':=', '0', 'for', 'i', ':=', '1', ';', 'i', '<', 's.Len()', ';', 'i', '++', '{', 'if', 's.Less(maxI, i)', '{', 'maxI', '=', 'i', '}', '}', 'return', 's.Val(maxI)', '}', 'type', 'MaxerInt', '[]', 'int', 'func', '(', 'm', 'MaxerInt', ')', 'Len', '()', 'int', '{', 'return', 'len', '(', 'm', ')}', 'func', '(', 'm', 'MaxerInt', ')', 'Val', '(', 'i', 'int', ')', 'interface', '{}', '{', 'return', 'm', '[', 'i', ']}', 'func', '(', 'm', 'MaxerInt', ')', 'Less', '(', 'i', ',', 'j', 'int', ')', 'bool', '{', 'return', 'm', '[', 'i', ']', '<', 'm', '[', 'j', ']}', 'type', 'MaxerFloat', '[]', 'float64', 'func', '(', 'm', 'MaxerFloat', ')', 'Len', '()', 'int', '{', 'return', 'len', '(', 'm', ')}', 'func', '(', 'm', 'MaxerFloat', ')', 'Val', '(', 'i', 'int', ')', 'interface', '{}', '{', 'return', 'm', '[', 'i', ']}', 'func', '(', 'm', 'MaxerFloat', ')', 'Less', '(', 'i', ',', 'j', 'int', ')', 'bool', '{', 'return', 'm', '[', 'i', ']', '<', 'm', '[', 'j', ']}', 'func', 'main', '()', '{', 'fmt.Println(maxer(MaxerInt{1, 2, 3, 4}))', 'fmt.Println(maxer(MaxerFloat{1.1, 2.1, 3.14, 0.1, 2.4}))', '}']"
909,40843976,"
","['Refactor', 'your', 'code,', 'move', 'the', 'limit', 'outside', 'of', 'your', 'function', 'which', 'tests', 'can', 'change:', 'var', 'limit', '=', '1', '<<', '32', 'var', 'ErrTooLarge', '=', 'errors.New(""String is too large!"")', 'func', 'Process', '(', 's', 'string', ')', 'error', '{', 'if', 'len', '(', 's', ')', '>', 'limit', '{', 'return', 'ErrTooLarge', '}', '//', 'All', 'OK', 'return', 'nil', '}', 'Testing', 'it:', 'func', 'TestProcess', '(', 't', '*', 'testing', '.', 'T', ')', '{', '//', 'Save', 'limit', 'and', 'restore', 'it', 'at', 'the', 'end:', 'old', ':=', 'limit', 'defer', 'func', '()', '{', 'limit', '=', 'old', '}()', '//', 'Test', 'success', 'if', 'err', ':=', 'Process', '(', '""123""', ');', 'err', '!=', 'nil', '{', 't.Errorf(""Expected success, got: %v"", err)', '}', '//', 'Test', 'failure', '(too', 'large', 'string)', 'limit', '=', '5', 'if', 'err', ':=', 'Process', '(', '""123456""', ');', 'err', '!=', 'ErrTooLarge', '{', 't.Errorf(""Expected ErrTooLarge, got: %v"", err)', '}', '}', 'Running', 'go', 'test', '-cover:', 'PASS', 'coverage', ':', '100', '.', '0', '%', 'of', 'statements', 'ok', 'play', '0', '.', '0', '01', 's']"
910,40865028,"
","['You', 'use', 'the', 'StructTag', 'type', 'to', 'get', 'the', 'tags.', 'The', 'documentation', 'I', 'linked', 'has', 'examples,', 'look', 'them', 'up,', 'but', 'your', 'code', 'could', 'be', 'something', 'like', 'func', '(', 'b', 'example', ')', 'PrintFields', '()', '{', 'val', ':=', 'reflect.ValueOf(b)', 'for', 'i', ':=', '0', ';', 'i', '<', 'val.Type().NumField()', ';', 'i', '++', '{', 'fmt.Println(val.Type().Field(i).Tag.Get(""json""))', '}', '}']"
911,40865043,"

See it in playground.
","['Use:', 'func', '(', 'b', 'example', ')', 'PrintFields', '()', '{', 'val', ':=', 'reflect.ValueOf(b)', 't', ':=', 'val.Type()', 'for', 'i', ':=', '0', ';', 'i', '<', 't.NumField()', ';', 'i', '++', '{', 'fmt.Println(t.Field(i).Tag.Get(""json""))', '}', '}', 'See', 'it', 'in', 'playground.']"
912,40865100,"
","['Instead', 'of', 'using', ""StructField's"", 'Name,', 'you', 'can', 'use', 'Tag', 'to', 'get', 'a', 'StructTag', 'object.', 'See:', 'https://golang.org/pkg/reflect/#StructTag', 'Then', 'you', 'can', 'use', ""StructTag's"", 'Get', 'or', 'Lookup', 'methods', 'to', 'get', 'the', 'json', 'tag:', 'Using', 'Get:', 'func', '(', 'b', 'example', ')', 'PrintFields', '()', '{', 'val', ':=', 'reflect.ValueOf(b)', 'for', 'i', ':=', '0', ';', 'i', '<', 'val.Type().NumField()', ';', 'i', '++', '{', '//', 'prints', 'empty', 'line', 'if', 'there', 'is', 'no', 'json', 'tag', 'for', 'the', 'field', 'fmt.Println(val.Type().Field(i).Tag.Get(""json""))', '}', '}', 'Using', 'Lookup:', 'func', '(', 'b', 'example', ')', 'PrintFields', '()', '{', 'val', ':=', 'reflect.ValueOf(b)', 'for', 'i', ':=', '0', ';', 'i', '<', 'val.Type().NumField()', ';', 'i', '++', '{', '//', 'skips', 'fields', 'without', 'json', 'tag', 'if', 'tag', ',', 'ok', ':=', 'val.Type().Field(i).Tag.Lookup(""json"")', ';', 'ok', '{', 'fmt.Println(tag)', '}', '}', '}']"
913,40865110,"
","['Not', 'the', 'Name', 'you', 'are', 'looking', 'for.', 'What', 'you', 'looking', 'is', 'the', 'Tag', 'func', '(', 'b', 'example', ')', 'PrintFields', '()', '{', 'val', ':=', 'reflect.ValueOf(b)', 'for', 'i', ':=', '0', ';', 'i', '<', 'val.Type().NumField()', ';', 'i', '++', '{', 'fmt.Println(val.Type().Field(i).Tag.Get(""json""))', '}', '}']"
914,40876262,"

Try it on the playground.

The outer loop is just there to repeat the steps for long enough that we can witness the quit command happening.
","['You', 'should', 'be', 'able', 'to', 'adapt', 'this', 'easily', 'to', 'a', 'for', 'loop', 'if', 'you', 'range', 'over', 'a', 'list', 'of', 'the', 'functions', 'that', 'are', 'your', 'steps:', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'a', '()', '{', 'fmt.Printf(""a"")', '}', 'func', 'b', '()', '{', 'fmt.Printf(""b"")', '}', 'func', 'c', '()', '{', 'fmt.Printf(""c"")', '}', 'func', 'd', '()', '{', 'fmt.Printf(""d"")', '}', 'func', 'e', '()', '{', 'fmt.Printf(""e"")', '}', 'func', 'f', '(', 'quit', '<-', 'chan', 'struct', '{})', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '10000', ';', 'i', '++', '{', 'for', '_', ',', 'fn', ':=', 'range', '[]', 'func', '(){', 'a', ',', 'b', ',', 'c', ',', 'd', ',', 'e', '}', '{', 'select', '{', 'case', '_', ',', '_', '=', '<-', 'quit', ':', 'fmt.Println(""quit f"")', 'return', 'default', ':', 'fn', '()', 'time.Sleep(1 * time.Millisecond)', '}', '}', '}', '}', 'func', 'main', '()', '{', 'quit', ':=', 'make', '(', 'chan', 'struct', '{})', 'fmt.Println(""go f"")', 'go', 'f', '(', 'quit', ')', 'fmt.Println(""sleep"")', 'time.Sleep(100 * time.Millisecond)', 'fmt.Println(""\\nquit"")', 'close', '(', 'quit', ')', 'time.Sleep(10 * time.Millisecond)', 'fmt.Println(""exit"")', '}', 'Try', 'it', 'on', 'the', 'playground.', 'The', 'outer', 'loop', 'is', 'just', 'there', 'to', 'repeat', 'the', 'steps', 'for', 'long', 'enough', 'that', 'we', 'can', 'witness', 'the', 'quit', 'command', 'happening.']"
915,40928592,"

RelatedSel is like LeftOuterJoin
","['I', 'had', 'a', 'slightly', 'different', 'problem,', 'but', 'the', 'solution', 'that', 'I', 'have', 'found', 'can', 'help', 'with', 'this', 'problem', 'too.', 'I', 'foun', 'solution', 'here', 'https://github.com/astaxie/beego/issues/1258', 'You', 'need', 'to', 'call', 'qs.RelatedSel()', 'without', 'parameters', '(or', 'with', 'int', 'parameter,', 'that', 'responds', 'about', 'deep', 'of', 'relation', 'selection)', 'and', 'manually', 'call', 'LoadRelated', 'for', 'each', 'record', 'func', 'GetAllCustomerSaldo', '(', 'query', 'map', '[', 'string', ']', 'string', ',', 'fields', '[]', 'string', ',', 'sortby', '[]', 'string', ',', 'order', '[]', 'string', ',', 'offset', 'int64', ',', 'limit', 'int64', ')', '(', 'ml', '[]', 'interface', '{},', 'err', 'error', ',', 'totals', 'int64', ')', '{', 'o', ':=', 'orm.NewOrm()', 'qs', ':=', 'o.QueryTable(new(CustomerSaldo))', 'qs.RelatedSel().All(&CustomerSaldo{})', '...', '}', 'o', ':=', 'orm.NewOrm()', 'for', '_', ',', 'el', ':=', 'range', 'arr', '{', 'o.LoadRelated(el, ""CustomerId"")', '}', 'RelatedSel', 'is', 'like', 'LeftOuterJoin']"
916,40939364,"
","['Golang', 'handle', 'all', 'date', 'formatting', 'in', 'a', 'unique', 'way', '-', 'it', 'uses', 'the', 'reference', 'time', 'Mon', 'Jan', '2', '15', ':', '04', ':', '05', 'MST', '2006', '(01/02', '03:04:05PM', ""'06"", '-0700)', 'to', 'show', 'the', 'pattern', 'with', 'which', 'to', 'format/parse', 'a', 'given', 'time/string.', 'So,', 'to', 'read', 'the', 'format', '""Wed', 'Nov', '23', '23:26:10', '2016""', 'you', 'would', 'put', 'the', 'reference', 'date', 'into', 'that', 'format:', '""Mon', 'Jan', '2', '15:04:05', '2006"",', 'and', 'then', 'do:', 't', ',', '_', ':=', 'time.Parse(""Mon Jan 2 15:04:05 2006"", ""Wed Nov 23 23:26:10 2016"")', 'Then,', 'to', 'output', 'it', 'in', 'the', 'given', 'format,', 'if', 'you', 'wanted', 'the', 'format', 'DD-MM-YYYY', 'hh:mm:ss,', 'you', 'would', 'put', 'the', 'reference', 'time', 'into', 'that', 'format:', '02-01-2006', '15:04:05,', 'and', 'then', 'do:', 't.Format(""02-01-2006 15:04:05"")', 'https://play.golang.org/p/VO5413Z7-z', 'So', 'basically,', 'the', 'main', 'change', 'is', '//', 'Format', 'mask', 'for', 'output', 'layout', ':=', '""DD-MM-YYYY hh:mm:ss""', 'should', 'be', '//', 'Format', 'mask', 'for', 'output', 'layout', ':=', '""02-01-2006 15:04:05""', 'and', 'time.Parse(date, layout)', 'should', 'be', 'time.Parse(layout, date)']"
917,40945424,"

Read more in Highlight unwanted spaces from wikia.
","['From', 'go.vim', 'Vim', 'syntax', 'file:', 'There', 'are', 'some', 'options', 'for', 'customizing', 'the', 'highlighting', ';', 'the', 'recommended', 'settings', 'are', 'the', 'default', 'values', ',', 'but', 'you', 'can', 'write', ':', 'let', 'OPTION_NAME', '=', '0', 'in', 'your', '/.', 'vimrc', 'file', 'to', 'disable', 'particular', 'options', '.', 'Put', 'in', 'your', '.vimrc', 'let', 'g', ':', 'go', '_highlight_trailing_whitespace_error', '=', '0', 'There', 'are', 'these', 'other', 'options:', '-', 'g', ':', 'go', '_highlight_array_whitespace_error', '""     Highlights white space after ""', '[]', '.', '-', 'g', ':', 'go', '_highlight_chan_whitespace_error', 'Highlights', 'white', 'space', 'around', 'the', 'communications', 'operator', 'that', 'don', 't', 'follow', 'the', 'standard', 'style', '.', '-', 'g', ':', 'go', '_highlight_extra_types', 'Highlights', 'commonly', 'used', 'library', 'type', 's', '(', 'io', '.', 'Reader', ',', 'etc', '.).', '-', 'g', ':', 'go', '_highlight_space_tab_error', 'Highlights', 'instances', 'of', 'tabs', 'following', 'spaces', '.', 'If', 'you', 'still', 'like', 'the', 'highlighting', 'of', 'trailing', 'whitespaces', 'but', 'not', 'during', 'the', 'typing,', 'you', 'can', 'try', 'au', 'InsertEnter', '*.', 'go', 'match', 'go', 'SpaceError', '/', 's', '+', '%', '<!$/', 'au', 'InsertLeave', '*.', 'go', 'match', 'go', 'SpaceError', '/', 's', '+$/', 'Read', 'more', 'in', 'Highlight', 'unwanted', 'spaces', 'from', 'wikia.']"
918,40949505,"

For black-box testing you'd use the package a_test package clause in a_test.go and b_test.go. Having a func util() in file a_test.go, you can use it in b_test.go too.

If you're writing white-box testing, you'd use package a in the test files, and again, you can refer any identifiers declared in a_test.go from b_test.go (and vice versa) without any imports.

Note that however if the package clauses in a_test.go and b_test.go do not match (e.g. a_test.go uses package a and b_test.go uses package a_test), then they will belong to different test packages and then you can't use identifiers declared in one another.
","['You', 'just', 'put', 'it', 'in', 'any', 'of', 'the', 'test', 'files', 'and', ""that's"", 'all.', 'Test', 'files', 'using', 'the', 'same', 'package', 'clause', 'belong', 'to', 'the', 'same', 'test', 'package', 'and', 'can', 'refer', 'to', 'each', ""other's"", 'exported', 'and', 'unexported', 'identifiers', 'without', 'any', 'import', 'statements.', 'Also', 'note', 'that', ""you're"", 'not', 'required', 'to', 'create', 'a', 'separate', '_test.go', 'file', 'for', 'each', 'of', 'the', '.go', 'files;', 'and', 'you', 'can', 'have', 'an', 'xx_test.go', 'file', 'without', 'having', 'a', '""matching""', 'xx.go', 'file', 'in', 'the', 'package.', 'For', 'example', 'if', ""you're"", 'writing', 'package', 'a,', 'having', 'the', 'following', 'files:', 'a', '/', 'a', '.', 'go', 'b', '.', 'go', 'a_test', '.', 'go', 'b_test', '.', 'go', 'For', 'black-box', 'testing', ""you'd"", 'use', 'the', 'package', 'a_test', 'package', 'clause', 'in', 'a_test.go', 'and', 'b_test.go.', 'Having', 'a', 'func', 'util()', 'in', 'file', 'a_test.go,', 'you', 'can', 'use', 'it', 'in', 'b_test.go', 'too.', 'If', ""you're"", 'writing', 'white-box', 'testing,', ""you'd"", 'use', 'package', 'a', 'in', 'the', 'test', 'files,', 'and', 'again,', 'you', 'can', 'refer', 'any', 'identifiers', 'declared', 'in', 'a_test.go', 'from', 'b_test.go', '(and', 'vice', 'versa)', 'without', 'any', 'imports.', 'Note', 'that', 'however', 'if', 'the', 'package', 'clauses', 'in', 'a_test.go', 'and', 'b_test.go', 'do', 'not', 'match', '(e.g.', 'a_test.go', 'uses', 'package', 'a', 'and', 'b_test.go', 'uses', 'package', 'a_test),', 'then', 'they', 'will', 'belong', 'to', 'different', 'test', 'packages', 'and', 'then', 'you', ""can't"", 'use', 'identifiers', 'declared', 'in', 'one', 'another.']"
919,41009815,"
","['The', 'godoc.org/golang.org/x/tools/go/gcimporter15', 'tells', 'that', 'the', 'package', 'gcimporter', 'is', 'deprecated', 'and', 'this', 'package', 'will', 'be', 'deleted', 'in', 'October', '2017.', 'And', 'this', 'new', 'code', 'should', 'be', 'used:', 'golang.org/x/tools/go/gcexportdata', 'instead', 'of', 'gcimporter', '.', 'So,', 'what', 'you', 'have', 'to', 'do', 'is:', '$', 'go', 'get', 'go', 'doc', '.', 'org/golang.org/x/tools/go/gcexportdata', 'PS:', 'Tested', 'within', 'Ubuntu', '16.04', '64bit', 'and', 'go', 'version', 'go', '1', '.', '6', '.', '2', 'linux/amd64', 'without', 'any', 'issues.', 'Test:', 'package', 'main', 'import', '(', '""fmt""', 'gcexportdata', '""golang.org/x/tools/go/gcexportdata""', ')', 'func', 'main', '()', '{', 'filename', ',', 'path', ':=', 'gcexportdata.Find(""fmt"", """")', 'fmt.Println(filename, path)', '}', 'Output:', '/usr/lib/go-1.6/pkg/linux_amd64/fmt.a', 'fmt']"
920,41034423,"Converting VonC's comment into an answer.

You can bind the host by setting host:port in your http.Server.Addr or http.ListenAndServe.

They use net.Listen internally.

From net.Listen :


  For TCP and UDP, the syntax of laddr is ""host:port"", like
  ""127.0.0.1:8080"". If host is omitted, as in "":8080"", Listen listens on
  all available interfaces instead of just the interface with the given
  host address.

",[]
921,41108447,"

}

You can of course add more bound checks to return errors rather than letting this panic when indexing out of bounds.

I modified your inStream slice slightly to match your definition, and you can see the example output here: https://play.golang.org/p/FoNoazluOF
","['While', ""there's"", 'probably', 'no', 'generic', 'package', 'to', 'implement', 'this', 'custom', 'struct', 'packing,', 'you', 'can', 'easily', 'create', 'your', 'own', 'method', 'extracting', 'just', 'the', 'bits', 'required', 'for', 'each', 'field.', 'func', '(', 'm', '*', 'Message', ')', 'UnmarshalBinary', '(', 'data', '[]', 'byte', ')', 'error', '{', 'm', '.', 'Length', '=', 'binary', '.', 'BigEndian.Uint32(data[:4])', 'if', 'int', '(', 'm', '.', 'Length', ')', '>', 'len', '(', 'data', ')', '{', 'return', 'fmt.Errorf(""not enough bytes"")', '}', 'm', '.', 'Type', '=', 'MessageType', '(', 'data', '[', '4', '])', 'm', '.', 'Version', '=', 'data', '[', '5', ']', '>>', '4', 'm', '.', 'Subversion', '=', 'data', '[', '5', ']', '>>', '2', '&', '0', 'x03', 'm', '.', 'Optional', '=', 'data', '[', '5', ']', '>>', '1', '&', '0', 'x01', '//', 'move', 'the', 'index', 'for', 'ANumber', 'back', 'if', ""there's"", 'an', 'optional', 'string', 'idx', ':=', '6', 'if', 'm', '.', 'Optional', '==', '0', '{', '//', 'remove', 'the', 'last', 'two', 'bytes', 'for', 'ANumber', 'end', ':=', 'int', '(', 'm', '.', 'Length', ')', '-', '2', 'm', '.', 'NodeName', '=', 'string', '(', 'data', '[', '6', ':', 'end', '])', 'idx', '=', 'end', '}', 'm', '.', 'ANumber', '=', 'uint16', '(', 'data', '[', 'idx', ']&', '0xc', '0', ')>', '6', ')', 'return', 'nil', '}', 'You', 'can', 'of', 'course', 'add', 'more', 'bound', 'checks', 'to', 'return', 'errors', 'rather', 'than', 'letting', 'this', 'panic', 'when', 'indexing', 'out', 'of', 'bounds.', 'I', 'modified', 'your', 'inStream', 'slice', 'slightly', 'to', 'match', 'your', 'definition,', 'and', 'you', 'can', 'see', 'the', 'example', 'output', 'here:', 'https://play.golang.org/p/FoNoazluOF']"
922,41132011,"Mixing of google api go libs, was causing the problem.

Long Answer

Short Answer

Google Cloud API libs come in two different flavors, issues was caused by mixing of lib features from libs below.

google-cloud-go Recommanded

google-api-go-client
","['Mixing', 'of', 'google', 'api', 'go', 'libs,', 'was', 'causing', 'the', 'problem.', 'Long', 'Answer', 'Short', 'Answer', 'Google', 'Cloud', 'API', 'libs', 'come', 'in', 'two', 'different', 'flavors,', 'issues', 'was', 'caused', 'by', 'mixing', 'of', 'lib', 'features', 'from', 'libs', 'below.', 'google-cloud-go', 'Recommanded', 'google-api-go-client']"
923,41158012,"
","['The', 'user', 'may', 'be', 'able', 'to', 'pass', 'in', 'any', 'value,', 'but', 'your', 'code', 'can', 'deal', 'with', 'invalid', 'input', 'by', 'passing', 'an', 'error', 'back', 'to', 'them.', 'If', 'you', 'know', 'the', 'desired', 'format', 'of', 'the', 'incoming', 'data', 'you', 'can', 'directly', 'unmarshal', 'it', 'and', 'handle', 'any', 'invalid', 'input', 'separately.', 'This', 'removes', 'the', 'need', 'to', 'have', 'the', 'intermediate', 'interface{}', ""that's"", 'hard', 'to', 'deal', 'with:', 'https://play.golang.org/p/VNCflbk3GL', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', ')', 'type', 'session', 'struct', '{', 'Value', 'Person', 'Flash', 'map', '[', 'string', ']', 'string', '}', 'type', 'Person', 'struct', '{', 'Name', 'string', 'Age', 'int', '}', 'func', 'Get', '(', 'marshaled', 'string', ')', '(', 'Person', ',', 'error', ')', '{', 'var', 'sess', 'session', 'err', ':=', 'json.Unmarshal([]byte(marshaled), &sess)', 'if', 'err', '!=', 'nil', '{', 'return', 'Person', '{},', 'err', '}', 'fmt.Println(sess)', '// {{bob 3} map[]}', 'return', 'sess', '.', 'Value', ',', 'nil', '}', 'func', 'main', '()', '{', 'person', ',', 'err', ':=', 'Get', '(', '{', '""Value""', ':{', '""Name""', ':', '""bob""', ',', '""Age""', ':', '3', '},', '""Flash""', ':', 'null', '}', ')', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""Got err:"", err)', '}', 'fmt.Printf(""%#v"", person)', '// main.Person{Name:""bob"", Age:3}', '}', 'If', ""it's"", 'valid', 'for', 'Value', 'to', 'be', 'multiple', 'types,', 'then', 'you', 'will', 'have', 'to', 'do', 'a', 'type', 'assertion', 'somewhere.', 'In', 'Go', ""it's"", 'not', 'all', 'that', 'painful', 'though:', 'https://newfivefour.com/golang-interface-type-assertions-switch.html', 'switch', 'v', ':=', 'anything', '.(', 'type', ')', '{', 'case', 'string', ':', 'fmt.Println(v)', 'case', 'int32', ',', 'int64', ':', 'fmt.Println(v)', 'case', 'SomeCustomType', ':', 'fmt.Println(v)', 'default', ':', 'fmt.Println(""unknown"")', '}']"
924,41158379,"

This way, your solution will be even easier -> you'll just need to check what property is not nil.

Hope this helps.

Cheers.

Update Dec 15, 2016
To reply on your comment regarding the framework: what you are describing is a process of binding of user's request to an arbitrary data-type.
OK. Unfortunately, its too much code to post here, but here's a link as a starting point:
https://github.com/go-playground/validator/blob/v8.18.1/validator.go#L498

This is a package and approach Gin framework is using for binding here: https://github.com/gin-gonic/gin/blob/master/binding/json.go

Good luck!
","['You', 'problem', 'is', 'that', 'your', 'incoming', 'data', 'type', 'of', 'Value', 'is', 'map[string]interface{},', 'and', ""there's"", 'no', 'direct/native', 'way', 'in', 'Go', 'to', 'convert', 'map', 'into', 'your', 'type', '(while', ""there's"", 'definitely', 'code', 'out', 'there).', 'OK.', 'If', 'we', 'assume', 'that', 'we', 'totally', 'have', 'no', 'control', 'over', 'incoming', 'data', 'in', 'the', 'Value', 'field,', 'but', 'still,', 'we', 'can', 'identify', 'data', 'type', 'by', 'a', 'combination', 'of', 'its', 'attributes,', 'right?', 'Because', 'by', 'definition,', 'you', 'should', 'know', 'possible', 'options.', 'We', 'can', 'create', 'a', 'universal', 'incoming', 'object', 'instead', 'of', 'interface{}.', 'AWS', 'is', 'using', 'similar', 'approach', 'in', 'their', 'Go', 'SDK,', 'at', 'least', 'for', 'DynamoDB', 'service,', 'setting', 'optional', 'attributes', 'via', 'pointers:', 'https://github.com/aws/aws-sdk-go/blob/master/service/dynamodb/examples_test.go#L32', 'So,', 'the', 'approach', 'is:', 'your', 'UnknownObj', 'struct', 'will', 'have', 'optional', 'attributes', 'that', 'may', 'be', 'filled', '(and', 'may', 'be', 'not)', 'on', 'json.Unmarshal.', 'Knowing', 'what', 'fields', 'were', 'delivered', 'via', 'the', 'switch,', 'you', 'can', 'guess', 'the', 'data', 'sent.', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', ')', 'type', 'session', 'struct', '{', 'Value', 'UnknownObj', 'Flash', 'map', '[', 'string', ']', 'string', '}', 'type', 'UnknownObj', 'struct', '{', 'Name', '*', 'string', 'Age', '*', 'float64', 'SomeOtherField', '*', 'map', '[', 'string', ']', 'string', '}', 'func', 'Get', '()', 'UnknownObj', '{', 'marshalledString', ':=', '{', '""Value""', ':{', '""Name""', ':', '""bob""', ',', '""Age""', ':', '3', '},', '""Flash""', ':', 'null', '}', 'var', 'sess', 'session', 'json.Unmarshal([]byte(marshalledString), &sess)', 'return', 'sess', '.', 'Value', '}', 'func', 'main', '()', '{', 'v', ':=', 'Get', '()', 'switch', '{', 'case', 'v', '.', 'Name', '!=', 'nil', '&&', 'v', '.', 'Age', '!=', 'nil', ':', 'fmt.Println(""This is a Person"")', 'default', ':', 'fmt.Println(""Unknown data type"")', '}', '}', 'However,', 'if', 'you', 'have', 'control', 'over', 'the', 'root/Values', 'field', 'and', 'you', 'can', 'request', 'to', 'send', 'you', 'specific', 'fields', 'for', 'each', 'of', 'the', 'types', 'instead', 'of', 'pushing', 'all', 'under', 'Values,', 'then', 'you', 'could', 'have:', 'type', 'session', 'struct', '{', 'Person', '*', 'Person', 'Car', '*', 'Car', 'Building', '*', 'Buidling', 'Etc', '*', 'Etc', '...', '}', 'This', 'way,', 'your', 'solution', 'will', 'be', 'even', 'easier', '->', ""you'll"", 'just', 'need', 'to', 'check', 'what', 'property', 'is', 'not', 'nil.', 'Hope', 'this', 'helps.', 'Cheers.', 'Update', 'Dec', '15,', '2016', 'To', 'reply', 'on', 'your', 'comment', 'regarding', 'the', 'framework:', 'what', 'you', 'are', 'describing', 'is', 'a', 'process', 'of', 'binding', 'of', ""user's"", 'request', 'to', 'an', 'arbitrary', 'data-type.', 'OK.', 'Unfortunately,', 'its', 'too', 'much', 'code', 'to', 'post', 'here,', 'but', ""here's"", 'a', 'link', 'as', 'a', 'starting', 'point:', 'https://github.com/go-playground/validator/blob/v8.18.1/validator.go#L498', 'This', 'is', 'a', 'package', 'and', 'approach', 'Gin', 'framework', 'is', 'using', 'for', 'binding', 'here:', 'https://github.com/gin-gonic/gin/blob/master/binding/json.go', 'Good', 'luck!']"
925,41164738,"
","['OK,', 'I', 'think', 'I', 'know', 'what', ""you're"", 'wanting', 'to', 'do.', 'I', 'found', 'this', 'answer', 'Converting', 'map', 'to', 'struct', 'and', 'made', 'some', 'tweaks', 'to', 'get', 'it', 'working', 'for', 'your', 'particular', 'use', 'case.', 'Note:', 'this', ""hasn't"", 'been', 'tested', 'thoroughly', 'and', 'may', 'be', 'a', 'little', 'shaky,', 'use', 'at', 'your', 'own', 'risk:', 'package', 'main', 'import', '(', '""bytes""', '""encoding/json""', '""errors""', '""fmt""', '""log""', '""reflect""', ')', 'type', 'session', 'struct', '{', 'Value', 'interface', '{}', 'Flash', 'map', '[', 'string', ']', 'string', '}', 'type', 'Person', 'struct', '{', 'Name', 'string', 'Age', 'int', '}', 'func', 'Get', '(', 'pointer', 'interface', '{})', '{', 'marshalledString', ':=', '{', '""Value""', ':{', '""Name""', ':', '""bob""', ',', '""Age""', ':', '3', '},', '""Flash""', ':', 'null', '}', 'var', 'sess', 'session', 'd', ':=', 'json.NewDecoder(bytes.NewBuffer([]byte(marshalledString)))', 'd.UseNumber()', 'if', 'err', ':=', 'd.Decode(&sess)', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'fmt.Printf(""%#v"", sess)', 'switch', 'sess', '.', 'Value', '.(', 'type', ')', '{', 'case', 'map', '[', 'string', ']', 'interface', '{}:', 'err', ':=', 'FillStruct', '(', 'sess', '.', 'Value', '.(', 'map', '[', 'string', ']', 'interface', '{}),', 'pointer', ')', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'default', ':', 'return', '// You may want to return an error here...', '}', '}', 'func', 'main', '()', '{', 'var', 'personObj', 'Person', 'Get', '(&', 'personObj', ')', '//', 'Wanting', 'to', 'see', 'personObj', 'here', 'have', 'Name', '""bob""', 'and', 'Age', '3', 'fmt.Printf(""%#v"", personObj)', '}', 'func', 'SetField', '(', 'obj', 'interface', '{},', 'name', 'string', ',', 'value', 'interface', '{})', 'error', '{', 'struct', 'Value', ':=', 'reflect.ValueOf(obj).Elem()', 'struct', 'FieldValue', ':=', 'struct', 'Value.FieldByName(name)', 'if', '!', 'struct', 'FieldValue.IsValid()', '{', 'return', 'fmt.Errorf(""No such field: %s in obj"", name)', '}', 'if', '!', 'struct', 'FieldValue.CanSet()', '{', 'return', 'fmt.Errorf(""Cannot set %s field value"", name)', '}', 'struct', 'FieldType', ':=', 'struct', 'FieldValue.Type()', 'val', ':=', 'reflect.ValueOf(value)', 'if', '_', ',', 'ok', ':=', 'value', '.(', 'json', '.', 'Number', ');', 'ok', '{', 'if', 'f', ',', 'err', ':=', 'value', '.(', 'json', '.', 'Number', ').', 'Int64', '();', 'err', '==', 'nil', '{', 'struct', 'FieldValue.SetInt(f)', 'return', 'nil', '}', 'if', 'f', ',', 'err', ':=', 'value', '.(', 'json', '.', 'Number', ').', 'Float64', '();', 'err', '==', 'nil', '{', 'struct', 'FieldValue.SetFloat(f)', 'return', 'nil', '}', '}', 'if', 'struct', 'FieldType', '!=', 'val.Type()', '{', 'return', 'errors.New(fmt.Sprintf(""Provided value type [%s] didn\'t match obj field type [%s]"", val.Type().String(), structFieldType.String()))', '}', 'struct', 'FieldValue.Set(val)', 'return', 'nil', '}', 'func', 'FillStruct', '(', 'm', 'map', '[', 'string', ']', 'interface', '{},', 's', 'interface', '{})', 'error', '{', 'for', 'k', ',', 'v', ':=', 'range', 'm', '{', 'err', ':=', 'SetField', '(', 's', ',', 'k', ',', 'v', ')', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', '}', 'return', 'nil', '}']"
926,41230015,"
","['Had', 'the', 'same', 'issue.', 'Here', 'is', 'what', 'I', 'found', 'from', 'going', 'through', 'the', 'graphql-go', 'source.', 'The', 'Fields', 'of', 'an', 'InputObject', 'have', 'to', 'be', 'of', 'type', 'InputObjectConfigFieldMap', 'or', 'InputObjectConfigFieldMapThunk', 'for', 'the', 'pkg', 'to', 'work.', 'So', 'an', 'InputObject', 'would', 'look', 'like', 'this', ':', 'var', 'inputType', '=', 'graphql', '.', 'NewInputObject', '(', 'graphql', '.', 'InputObjectConfig', '{', 'Name', ':', '""MyInputType""', ',', 'Fields', ':', 'graphql', '.', 'InputObjectConfigFieldMap', '{', '""key""', ':', '&', 'graphql', '.', 'InputObjectFieldConfig', '{', 'Type', ':', 'graphql', '.', 'String', ',', '},', '},', '},', ')', 'Modified', 'the', 'Hello', 'World', 'example', 'to', 'take', 'an', 'Input', 'Object', ':', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', '""log""', '""github.com/graphql-go/graphql""', ')', 'func', 'main', '()', '{', '//', 'Schema', 'var', 'inputType', '=', 'graphql', '.', 'NewInputObject', '(', 'graphql', '.', 'InputObjectConfig', '{', 'Name', ':', '""MyInputType""', ',', 'Fields', ':', 'graphql', '.', 'InputObjectConfigFieldMap', '{', '""key""', ':', '&', 'graphql', '.', 'InputObjectFieldConfig', '{', 'Type', ':', 'graphql', '.', 'String', ',', '},', '},', '},', ')', 'args', ':=', 'graphql', '.', 'FieldConfigArgument', '{', '""foo""', ':', '&', 'graphql', '.', 'ArgumentConfig', '{', 'Type', ':', 'inputType', ',', '},', '}', 'fields', ':=', 'graphql', '.', 'Fields', '{', '""hello""', ':', '&', 'graphql', '.', 'Field', '{', 'Type', ':', 'graphql', '.', 'String', ',', 'Args', ':', 'args', ',', 'Resolve', ':', 'func', '(', 'p', 'graphql', '.', 'ResolveParams', ')', '(', 'interface', '{},', 'error', ')', '{', 'fmt.Println(p.Args)', 'return', '""world""', ',', 'nil', '},', '},', '}', 'rootQuery', ':=', 'graphql', '.', 'ObjectConfig', '{', 'Name', ':', '""RootQuery""', ',', 'Fields', ':', 'fields', ',', '}', 'schemaConfig', ':=', 'graphql', '.', 'SchemaConfig', '{', 'Query', ':', 'graphql.NewObject(rootQuery)', '}', 'schema', ',', 'err', ':=', 'graphql.NewSchema(schemaConfig)', 'if', 'err', '!=', 'nil', '{', 'log.Fatalf(""failed to create new schema, error: %v"", err)', '}', '//', 'Query', 'query', ':=', '{', 'hello', '(', 'foo', ':{', 'key', ':', '""blah""', '})', '}', 'params', ':=', 'graphql', '.', 'Params', '{', 'Schema', ':', 'schema', ',', 'RequestString', ':', 'query', '}', 'r', ':=', 'graphql.Do(params)', 'if', 'len', '(', 'r', '.', 'Errors', ')', '>', '0', '{', 'log.Fatalf(""failed to execute graphql operation, errors: %+v"", r.Errors)', '}', 'rJSON', ',', '_', ':=', 'json.Marshal(r)', 'fmt.Printf(""%s \\n"", rJSON)', '// {“data”:{“hello”:”world”}}', '}']"
927,41239174,"

Or use the bufio.Scanner which can scan lines and it cuts trailing newlines automatically.
","['Know', 'that', 'Reader.ReadString()', 'returns', 'you', 'a', 'string', 'value', 'with', 'the', 'delimieter.', 'So', ""r.ReadString('\\n')"", 'will', 'return', 'you', 'a', 'string', 'with', 'the', 'trailing', 'newline', 'character.', 'And', 'when', 'you', 'split', 'the', 'string', 'at', 'the', 'commas,', 'the', 'last', 'part', 'will', 'contain', 'the', 'newline', 'character,', 'and', 'attempting', 'to', 'parse', 'the', 'number', 'from', 'it', 'will', 'fail,', 'as', 'shown', 'in', 'this', 'example:', 'line', ':=', '""0,1,2\\n""', 'for', '_', ',', 'ele', ':=', 'range', 'strings.Split(line, "","")', '{', 'fmt.Println(strconv.ParseInt(ele, 10, 64))', '}', 'Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):', '0', '1', '0', 'strconv', '.', 'ParseInt', ':', 'parsing', '""2\\n""', ':', 'invalid', 'syntax', 'You', 'religiously', 'omit', 'error', 'checks,', ""don't"", 'do', 'that!', 'As', 'you', 'can', 'see', 'in', 'the', 'above', 'example,', 'checking', 'and', 'printing', 'the', 'error', 'returned', 'by', 'strconv.ParseInt()', 'immediately', 'revealed', 'the', 'error', 'and', ""what's"", 'going', 'wrong.', 'What', 'you', 'may', 'do', 'is', 'cut', 'the', 'trailing', 'newline', 'character', 'before', 'attempting', 'to', 'parse', 'any', 'number', 'from', 'it,', 'e.g.:', 'strconv.ParseInt(strings.TrimSpace(ele), 10, 64)', 'Or', 'use', 'the', 'bufio.Scanner', 'which', 'can', 'scan', 'lines', 'and', 'it', 'cuts', 'trailing', 'newlines', 'automatically.']"
928,41250437,"
","['From', 'the', 'io.Writer', 'documentation:', 'Write', 'must', 'not', 'modify', 'the', 'slice', 'data,', 'even', 'temporarily.', 'Implementations', 'must', 'not', 'retain', 'p', 'You', ""can't"", 'store', 'or', 'reuse', 'the', 'slice', 'being', 'passed', 'to', 'your', 'Write', 'method.', 'If', 'you', 'want', 'to', 'use', 'that', 'data', 'elsewhere,', 'you', 'need', 'to', 'make', 'a', 'copy', 'of', 'it', 'func', '(', 'self', '*', 'WriterToHash', ')', 'Write', '(', 'p', '[]', 'byte', ')', '(', 'n', 'int', ',', 'err', 'error', ')', '{', 'b', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'p', '))', 'copy', '(', 'b', ',', 'p', ')', 'fmt.println(""WriterToHash  len=%d, buff=%v"", len(p), b)', 'self', '.', 'BodyChannel', '<-', 'b', 'return', 'len', '(', 'p', '),', 'nil', '}']"
929,41267045,"
","['You', 'could', 'do', 'something', 'like', 'this:', 'func', 'main', '()', '{', 'var', 'hello', 'SmartString', '=', '""hello""', 'p', ':=', '&', 'hello', 'p.Print()', 'p', '=', 'nil', 'p.Print()', '}', 'type', 'SmartString', 'string', 'func', '(', 'p', '*', 'SmartString', ')', 'Print', '()', '{', 'if', 'p', '==', 'nil', '{', 'fmt.Println(p)', '}', 'else', '{', 'fmt.Println(*p)', '}', '}', 'Whether', ""it's"", 'a', 'good', 'idea', 'or', 'not', 'is', 'up', 'to', 'you.', 'You', 'can', 'even', 'use', 'the', 'String', 'interface', 'to', 'make', 'it', 'work', 'with', 'fmt.Println', 'func', 'main', '()', '{', 'var', 'hello', 'SmartString', '=', '""hello""', 'p', ':=', '&', 'hello', 'fmt.Println(p)', 'p', '=', 'nil', 'fmt.Println(p)', '}', 'type', 'SmartString', 'string', 'func', '(', 'p', '*', 'SmartString', ')', 'String', '()', 'string', '{', 'if', 'p', '==', 'nil', '{', 'return', '""""', '}', 'return', 'string', '(*', 'p', ')', '}']"
930,41302818,"You did the right thing by filing a bug, so hopefully that will be resolved soon. The most recent version of the cloud APIs adds support for query parameters but based on the error that you are seeing, one of the libraries was not updated properly.
","['You', 'did', 'the', 'right', 'thing', 'by', 'filing', 'a', 'bug,', 'so', 'hopefully', 'that', 'will', 'be', 'resolved', 'soon.', 'The', 'most', 'recent', 'version', 'of', 'the', 'cloud', 'APIs', 'adds', 'support', 'for', 'query', 'parameters', 'but', 'based', 'on', 'the', 'error', 'that', 'you', 'are', 'seeing,', 'one', 'of', 'the', 'libraries', 'was', 'not', 'updated', 'properly.']"
931,41318404,"
","['You', ""don't"", 'have', 'to', 'convert', 'bson.M', 'to', 'struct,', 'instead,', 'you', 'directly', 'pass', 'a', 'struct', 'pointer', 'to', 'the', 'One', 'function', 'var', 'struct', '2', 'Struct2', 'err', ':=', 'c.Find(bson.M{nil}).One(&struct2)', 'In', 'case', 'of', 'you', 'still', 'want', 'to', 'convert', 'bson.M', 'to', 'struct,', 'use', 'Marshal', 'and', 'Unmarshal', 'var', 'm', 'bson', '.', 'M', 'var', 's', 'Struct1', '//', 'convert', 'm', 'to', 's', 'bsonBytes', ',', '_', ':=', 'bson.Marshal(m)', 'bson.Unmarshal(bsonBytes, &s)']"
932,41335088,"Ideally, whatever is constructing the Parent struct should initialize it so it's in a usable state. But since you have no control over it, the next best thing is to have a piece of code that lets you set the WithContext pointer in Parent, by providing a member function on Parent or just a piece of code in your application to set it, since WithContext field is exported.
",[]
933,41354918," and there is no ToFloat() function in the constant package. 

As @nexus66 says, the gcimporter is deprecated. So, I don't expect them to fix this. If you are using this package directly, its better to move on to the recommended gcexportdata package. If you are using a third party library which is in turn using gcimporter, may be you should upgrade to go-1.7. That's what I did and things worked fine. 
","['Its', 'bad', 'but', 'seems', 'there', 'is', 'a', 'mismatch', 'between', 'the', 'gcimporter15', 'and', 'go-1.5.', 'I', 'faced', 'the', 'same', 'problem', 'and', 'looked', 'at', 'go-1.5', 'code', 'in', 'file', 'src/go/constant/value.go', 'and', 'there', 'is', 'no', 'ToFloat()', 'function', 'in', 'the', 'constant', 'package.', 'As', '@nexus66', 'says,', 'the', 'gcimporter', 'is', 'deprecated.', 'So,', 'I', ""don't"", 'expect', 'them', 'to', 'fix', 'this.', 'If', 'you', 'are', 'using', 'this', 'package', 'directly,', 'its', 'better', 'to', 'move', 'on', 'to', 'the', 'recommended', 'gcexportdata', 'package.', 'If', 'you', 'are', 'using', 'a', 'third', 'party', 'library', 'which', 'is', 'in', 'turn', 'using', 'gcimporter,', 'may', 'be', 'you', 'should', 'upgrade', 'to', 'go-1.7.', ""That's"", 'what', 'I', 'did', 'and', 'things', 'worked', 'fine.']"
934,41366470,"You are not checking the error returned by loadPage() in viewHandler() so if loadPage() can't load the file and returns nil with an error, viewHandler() tries to use that nil to obtain the page title and body and that's what causing the panic.

It works fine if loadPage() can read the file, though.
","['You', 'are', 'not', 'checking', 'the', 'error', 'returned', 'by', 'loadPage()', 'in', 'viewHandler()', 'so', 'if', 'loadPage()', ""can't"", 'load', 'the', 'file', 'and', 'returns', 'nil', 'with', 'an', 'error,', 'viewHandler()', 'tries', 'to', 'use', 'that', 'nil', 'to', 'obtain', 'the', 'page', 'title', 'and', 'body', 'and', ""that's"", 'what', 'causing', 'the', 'panic.', 'It', 'works', 'fine', 'if', 'loadPage()', 'can', 'read', 'the', 'file,', 'though.']"
935,41408909,"
","['This', 'is', 'a', 'little', 'bit', 'late', 'but', 'I', 'found', 'this', 'post', 'while', 'I', 'am', 'trying', 'to', 'find', 'a', 'golang-to-python', '0mq', 'implementation.', 'In', 'my', 'golang', 'code,', 'I', 'have', 'just', 'changed', 'zmq', 'to', 'zmq4', 'and', 'everything', 'worked', 'for', 'me:', 'import', '(', 'zmq4', '""github.com/pebbe/zmq4""', ')', 'func', 'main', '()', '{', 'ctx', ',', '_', ':=', 'zmq4.NewContext()', 'sock', ',', '_', ':=', 'ctx.NewSocket(zmq4.REQ)', 'sock.Connect(""tcp://localhost:57000"")', 'sock.Send(""simple message"", 0)', '}']"
936,41422312,"Instead of importing the entire C source code, you can link it with compiled object files and header files. Refer to https://golang.org/cmd/cgo/ which covers how to use the LDFLAGS argument for cgo.

There are other documents online which cover how to compile C code into object files (.a and .o files) such as this one. You should also refer to documentation in the library you're using, or its Makefile as it will likely already have instructions to compile it into object files that can be linked.

If the library that has import ""C"", and its source isn't being modified, you can also go get it, (or perhaps go install it) which will store its compiled object files in your $GOPATH/pkg, making compilation of other Go programs that import it faster.
",[]
937,41424677,"
","['The', 'code', 'referenced', 'by', 'the', 'comment', 'is', 'memory', 'efficient', 'as', 'written.', 'Any', 'allocations', 'are', 'in', 'strings.Join', 'which', 'is', 'written', 'to', 'minimize', 'memory', 'allocations.', 'I', 'suspect', 'that', 'the', 'comment', 'was', 'accidentally', 'copied', 'and', 'pasted', 'from', 'this', 'code', 'in', 'the', 'net/http', 'package:', '//', 'TODO:', 'could', 'do', 'better', 'allocation-wise', 'here,', 'but', 'trailers', 'are', 'rare,', '//', 'so', 'being', 'lazy', 'for', 'now.', 'if', '_', ',', 'err', ':=', 'io.WriteString(w, ""Trailer: ""+strings.Join(keys, "","")+""\\r\\n"")', ';', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'This', 'snippet', 'has', 'the', 'following', 'possible', 'allocations:', '[]byte', 'created', 'in', 'strings.Join', 'for', 'constructing', 'the', 'result', 'string', 'conversion', 'result', 'returned', 'by', 'strings.Join', 'string', 'result', 'for', 'expression', '""Trailer: ""', '+', 'strings.Join(keys, "","")', '+', '""\\r\\n""', 'The', '[]byte', 'conversion', 'result', 'used', 'in', 'io.WriteString', 'A', 'more', 'memory', 'efficient', 'approach', 'is', 'to', 'allocate', 'a', 'single', '[]byte', 'for', 'the', 'data', 'to', 'be', 'written.', 'n', ':=', 'len', '(', '""Trailer: ""', ')', '+', 'len', '(', '""\\r\\n""', ')', 'for', '_', ',', 's', ':=', 'range', 'keys', '{', 'n', '+=', 'len', '(', 's', ')', '+', '1', '}', 'p', ':=', 'make', '([]', 'byte', ',', '0', ',', 'n', '-', '1', ')', '// subtract 1 for len(keys) - 1 commas', 'p', '=', 'append', '(', 'p', ',', '""Trailer: ""', '...)', 'for', 'i', ',', 's', ':=', 'range', 'keys', '{', 'if', 'i', '>', '0', '{', 'p', '=', 'append', '(', 'p', ',', ""','"", ')', '}', 'p', '=', 'append', '(', 'p', ',', 's', '...)', '}', 'p', '=', 'append', '(', 'p', ',', '""\\r\\n""', '...)', 'w.Write(p)']"
938,41439441,"
","['There', 'is', 'a', 'little', 'trick', 'in', 'Go', 'template', 'parseFiles.', 'func', 'parseFiles', '(', 't', '*', 'Template', ',', 'filenames', '...', 'string', ')', '(*', 'Template', ',', 'error', ')', '{', 'if', 'len', '(', 'filenames', ')', '==', '0', '{', '//', 'Not', 'really', 'a', 'problem,', 'but', 'be', 'consistent.', 'return', 'nil', ',', 'fmt.Errorf(""template: no files named in call to ParseFiles"")', '}', 'for', '_', ',', 'filename', ':=', 'range', 'filenames', '{', 'b', ',', 'err', ':=', 'ioutil.ReadFile(filename)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 's', ':=', 'string', '(', 'b', ')', 'name', ':=', 'filepath.Base(filename)', '//', 'First', 'template', 'becomes', 'return', 'value', 'if', 'not', 'already', 'defined,', '//', 'and', 'we', 'use', 'that', 'one', 'for', 'subsequent', 'New', 'calls', 'to', 'associate', '//', 'all', 'the', 'templates', 'together.', 'Also,', 'if', 'this', 'file', 'has', 'the', 'same', 'name', '//', 'as', 't,', 'this', 'file', 'becomes', 'the', 'contents', 'of', 't,', 'so', '//', 't,', 'err', ':=', 'New(name).Funcs(xxx).ParseFiles(name)', '//', 'works.', 'Otherwise', 'we', 'create', 'a', 'new', 'template', 'associated', 'with', 't.', 'var', 'tmpl', '*', 'Template', 'if', 't', '==', 'nil', '{', 't', '=', 'New', '(', 'name', ')', '}', 'if', 'name', '==', 't.Name()', '{', 'tmpl', '=', 't', '}', 'else', '{', 'tmpl', '=', 't.New(name)', '}', '_', ',', 'err', '=', 'tmpl.Parse(s)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', '}', 'return', 't', ',', 'nil', '}', 'Only', 'the', 'template', 'with', 'same', 'name', 'will', 'be', 'reuse,', 'otherwise', 'create', 'new', 'one.', 'as', 'your', 'sample:', 'tmpl', ',', 'err', ':=', 'template.New(""test"").ParseFiles(""file.txt"")', 'tmpl', 'is', 'the', 'template', 'named', '""test"",', 'and', 'associated', 'another', 'template', 'named', '""file.txt"",', 'you', 'call', 'Execute', 'on', '""test""', 'template,', 'this', 'template', 'is', 'a', 'empty', 'template,', 'so', 'raise', 'the', 'error', '""test', 'is', 'an', 'incomplete', 'or', 'empty', 'template"".', 'It', 'worked', 'when', 'you', 'change', 'the', 'template', 'name', 'to', 'file.txt', 'tmpl', ',', 'err', ':=', 'template.New(""file.txt"").ParseFiles(""file.txt"")']"
939,41466328,"
","['Ok,', 'I', 'spent', 'a', 'whole', 'day', 'and', 'found', 'a', 'viable', 'solution.', 'We', 'need', 'to', 'have', 'the', ""extension's"", 'main', 'source', 'file', 'start', 'with:', 'package', 'main', '// make sure to use main package', '/*', 'cgo', 'CFLAGS', ':', '-', 'I/path/to/postgres/include/server', 'cgo', 'LDFLAGS', ':', '-', 'Wl', ',-', 'unresolved', '-', 'symbols', '=', 'ignore', '-', 'all', 'Use', 'go', 'build', '-', 'o', 'myext', '.', 'so', '-', 'buildmode', '=', 'c', '-', 'shared', 'myext', '.', 'go', 'to', 'generate', 'myext.so.', 'If', 'some', 'Go', 'method', 'is', 'needed', 'from', 'the', 'C', 'side,', 'we', 'should', 'add', '//export', 'methodname', 'above', 'the', 'method', 'declaration.', 'This', 'will', 'generate', 'symbols', 'without', 'package', 'name', 'prefix.', 'Then', 'we', 'can', 'extern', 'these', 'symbols', 'on', 'the', 'C', 'side.', 'Make', 'sure', 'the', 'exported', 'Go', 'methods', 'reside', 'in', 'packages', 'other', 'than', 'main.', 'package', 'test', ':', '//', 'export', 'Merge', 'func', 'Merge', '(', 'cint', 'C', '.', 'int', ')', 'C', '.', 'int', '...', 'package', 'main', ':', 'extern', 'int', 'Merge', '(', 'int', ');', 'import', '""./test""', 'var', '_', '=', 'test', '.', 'Somevar', '// dumb placeholder to fake use package test.']"
940,41499772,"

Use channels, locks, etc when necessary, based on your use case.
","['Since', ""'rows.Next()'"", 'is', 'sequential,', 'you', 'would', 'need', 'to', 'split', 'your', 'query', 'into', 'multiple', 'statements,', 'and', 'then', 'work', 'concurrently', 'on', 'them.', 'func', 'main', '()', '{', 'queries', ':=', '[]', 'string', '{', '""SELECT * FROM abc where a < 10000""', ',', '""SELECT * FROM abc where a >= 10000 && a <= 30000""', ',', '""SELECT * FROM abc where a > 30000""', ',', '}', 'for', '_', ',', 'query', ':=', 'range', 'queries', '{', 'go', 'dbCall', '(', 'query', ')', '}', '}', 'func', 'dbCall', '(', 'query', 'string', ')', '{', 'rows', ',', '_', ':=', 'db.Query(query)', 'for', 'rows.Next()', '{', 'var', 'a', ',', 'b', ',', 'c', 'int', '_', '=', 'rows.Scan(&a, &b, &c)', '//', 'Process', 'row', '}', '}', 'Use', 'channels,', 'locks,', 'etc', 'when', 'necessary,', 'based', 'on', 'your', 'use', 'case.']"
941,41522547,"You're forgetting to remove the IV. This means the IV gets ""decrypted"" as well, resulting in nonsense.

The nonsense seems to be interpreted as UTF-8, where a character may have a multi-byte encoding, so the size of the IV you print out may differ somewhat.

So remove the IV, and try printing out hexadecimals when debugging binary values.
","[""You're"", 'forgetting', 'to', 'remove', 'the', 'IV.', 'This', 'means', 'the', 'IV', 'gets', '""decrypted""', 'as', 'well,', 'resulting', 'in', 'nonsense.', 'The', 'nonsense', 'seems', 'to', 'be', 'interpreted', 'as', 'UTF-8,', 'where', 'a', 'character', 'may', 'have', 'a', 'multi-byte', 'encoding,', 'so', 'the', 'size', 'of', 'the', 'IV', 'you', 'print', 'out', 'may', 'differ', 'somewhat.', 'So', 'remove', 'the', 'IV,', 'and', 'try', 'printing', 'out', 'hexadecimals', 'when', 'debugging', 'binary', 'values.']"
942,41592747,"AD HOC polymophism

Ad hoc polymorphism is a general way of polymorphism implementation for statically typed languages. Polymorphism in Go is ad hoc polymorphism which is very close to Bjarne's Stroustrup definition:


  Polymorphism – providing a single interface to entities of different types.


Interfaces

Go interface is really powerful tool designed specially for polymorphism implementation. Interface is a type abstraction (sets of methods) which provides a way to specify the behavior of an object: if something can do this, then it can be used here. Back to Straustrup's polymorphism definition: it is possible to use objects of different types as a type of a common interface if they implement the interface.

Playground with an example.

Parametric polyumorphism

Wiki:


  A function or a data type can be written generically so that it can handle values identically without depending on their type.


This kind of polymorphism is more regular for dynamically typed languages like Python or Ruby but Go implements it too! Go uses type empty interface interface{} for this purpose.

Type interface{}

From Tour Of Go:


  The interface type that specifies zero methods is known as the empty interface:
  
  interface{}
  An empty interface may hold values of any type. Every type implements at least zero methods.
  
  Empty interfaces are used by code that handles values of unknown type. For example, fmt.Print takes any number of arguments of type interface{}.


And it is possible to get particular type of an object with type assertion. 

And again Tour Of Go:


  A type assertion provides access to an interface value's underlying concrete value.


t := i.(T)


  This statement asserts that the interface value i holds the concrete type T and assigns the underlying T value to the variable t.


There we have parametric polymorphism with static duck typing.
","['Use', 'channels,', 'locks,', 'etc', 'when', 'necessary,', 'based', 'on', 'your', 'use', 'case.']"
943,41613108,"
","['Change', 'the', 'signature', 'of', 'your', 'function', 'to', 'make', 'it', 'generic,', 'and', 'pass', 'the', 'slice', 'as', 'argument.', 'The', 'following', 'should', 'work:', 'func', 'getDriversOrPilots', '(', 'file', 'string', ',', 'slice', 'interface', '{})', '{', 'raw', ',', 'err', ':=', 'ioutil.ReadFile(file)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err.Error())', 'os.Exit(1)', '}', 'json.Unmarshal(raw, slice)', '}', 'func', 'getDrivers', '()', '[]', 'Driver', '{', 'var', 'd', '[]', 'Driver', 'getDriversOrPilots', '(', '""/home/ubuntu/drivers.json""', ',', '&', 'd', ')', 'return', 'd', '}', 'func', 'getPilots', '()', '[]', 'Pilot', '{', 'var', 'p', '[]', 'Pilot', 'getDriversOrPilots', '(', '""/home/ubuntu/pilots.json""', ',', '&', 'p', ')', 'return', 'p', '}']"
944,41647898,"

and use the template to render the view.


  code ref links



https://github.com/sairam/kinli/blob/master/template_funcs.go#L57-L59
https://github.com/sairam/kinli/blob/master/templates.go#L48

","['You', 'can', 'write', 'a', 'helper', 'view', 'function', 'like', 'this', 'func', 'replace', '(', 'input', ',', 'from', ',', 'to', 'string', ')', 'string', '{', 'return', 'strings.Replace(input,from,to, -1)', '}', 'func', 'Map', '=', 'template', '.', 'FuncMap', '{', '""replace""', ':', 'replace', ',', '}', 'template', ':=', 'template.New("""").Funcs(internalFuncMap)', 'and', 'use', 'the', 'template', 'to', 'render', 'the', 'view.', 'code', 'ref', 'links', 'https://github.com/sairam/kinli/blob/master/template_funcs.go#L57-L59', 'https://github.com/sairam/kinli/blob/master/templates.go#L48']"
945,41665303,"

But assumes msg[""pwr""] can't be anything other than a bson.Binary... if that's not an invariant you should do the type assertion first (handle the possible type mismatch case when it happens) and then cast to get the Data field.
","['This', 'does', 'what', 'you', 'want:', 'pwr', ':=', 'bson.Binary(msg[""pwr""].(bson.Binary))', '.', 'Data', 'But', 'assumes', 'msg[""pwr""]', ""can't"", 'be', 'anything', 'other', 'than', 'a', 'bson.Binary...', 'if', ""that's"", 'not', 'an', 'invariant', 'you', 'should', 'do', 'the', 'type', 'assertion', 'first', '(handle', 'the', 'possible', 'type', 'mismatch', 'case', 'when', 'it', 'happens)', 'and', 'then', 'cast', 'to', 'get', 'the', 'Data', 'field.']"
946,41721291,"
","['I', 'have', 'been', 'working', 'on', 'some', 'patch', 'for', 'restruct.io', 'to', 'be', 'able', 'to', 'work', 'with', 'bitfields', '....', 'Still', 'not', 'fully', 'tested', 'but', 'seems', 'to', 'work', '...', 'Will', 'try', 'to', 'send', 'a', 'pull', 'request', 'once', 'tested', '...', 'func', '(', 'e', '*', 'encoder', ')', 'writeBits', '(', 'f', 'field', ',', 'inBuf', '[]', 'byte', ')', '{', 'var', 'inputLength', 'uint8', '=', 'uint8', '(', 'len', '(', 'inBuf', '))', 'if', 'f', '.', 'BitSize', '==', '0', '{', '//', 'Having', 'problems', 'with', 'complex64', 'type', '...', 'so', 'we', 'asume', 'we', 'want', 'to', 'read', 'all', '//', 'f.BitSize', '=', 'uint8(f.Type.Bits())', 'f', '.', 'BitSize', '=', '8', '*', 'inputLength', '}', '//', 'destPos:', 'Destination', 'position', '(', 'in', 'the', 'result', ')', 'of', 'the', 'first', 'bit', 'in', 'the', 'first', 'byte', 'var', 'destPos', 'uint8', '=', '8', '-', 'e', '.', 'bitCounter', '//', 'originPos:', 'Original', 'position', 'of', 'the', 'first', 'bit', 'in', 'the', 'first', 'byte', 'var', 'originPos', 'uint8', '=', 'f', '.', 'BitSize', '%', '8', 'if', 'originPos', '==', '0', '{', 'originPos', '=', '8', '}', '//', 'numBytes:', 'number', 'of', 'complete', 'bytes', 'to', 'hold', 'the', 'result', 'var', 'numBytes', 'uint8', '=', 'f', '.', 'BitSize', '/', '8', '//', 'numBits:', 'number', 'of', 'remaining', 'bits', 'in', 'the', 'first', 'non-complete', 'byte', 'of', 'the', 'result', 'var', 'numBits', 'uint8', '=', 'f', '.', 'BitSize', '%', '8', '//', 'number', 'of', 'positions', 'we', 'have', 'to', 'shift', 'the', 'bytes', 'to', 'get', 'the', 'result', 'var', 'shift', 'uint8', 'if', 'originPos', '>', 'destPos', '{', 'shift', '=', 'originPos', '-', 'destPos', '}', 'else', '{', 'shift', '=', 'destPos', '-', 'originPos', '}', 'shift', '=', 'shift', '%', '8', 'var', 'inputInitialIdx', 'uint8', '=', 'inputLength', '-', 'numBytes', 'if', 'numBits', '>', '0', '{', 'inputInitialIdx', '=', 'inputInitialIdx', '-', '1', '}', 'if', 'originPos', '<', 'destPos', '{', '//', 'shift', 'left', 'carry', ':=', 'func', '(', 'idx', 'uint8', ')', 'uint8', '{', 'if', '(', 'idx', '+', '1', ')', '<', 'inputLength', '{', 'return', '(', 'inBuf', '[', 'idx', '+', '1', ']', '>>', '(', '8', '-', 'shift', '))', '}', 'return', '0', 'x00', '}', 'mask', ':=', 'func', '(', 'idx', 'uint8', ')', 'uint8', '{', 'if', 'idx', '==', '0', '{', 'return', '(', '0', 'x01', '<<', 'destPos', ')', '-', '1', '}', 'return', '0xFF', '}', 'var', 'idx', 'uint8', '=', '0', 'for', 'inIdx', ':=', 'inputInitialIdx', ';', 'inIdx', '<', 'inputLength', ';', 'inIdx', '++', '{', 'e', '.', 'buf', '[', 'idx', ']', '|=', '((', 'inBuf', '[', 'inIdx', ']', '<<', 'shift', ')', '|', 'carry', '(', 'inIdx', '))', '&', 'mask', '(', 'idx', ')', 'idx', '++', '}', '}', 'else', '{', '//', 'originPos', '>=', 'destPos', '=>', 'shift', 'right', 'var', 'idx', 'uint8', '=', '0', '//', 'carry', ':', 'is', 'a', 'little', 'bit', 'tricky', 'in', 'this', 'case', 'because', 'of', 'the', 'first', 'case', '//', 'when', 'idx', '==', '0', 'and', 'there', 'is', 'no', 'carry', 'at', 'all', 'carry', ':=', 'func', '(', 'idx', 'uint8', ')', 'uint8', '{', 'if', 'idx', '==', '0', '{', 'return', '0', 'x00', '}', 'return', '(', 'inBuf', '[', 'idx', '-', '1', ']', '<<', '(', '8', '-', 'shift', '))', '}', 'mask', ':=', 'func', '(', 'idx', 'uint8', ')', 'uint8', '{', 'if', 'idx', '==', '0', '{', 'return', '(', '0', 'x01', '<<', 'destPos', ')', '-', '1', '}', 'return', '0xFF', '}', 'inIdx', ':=', 'inputInitialIdx', 'for', ';', 'inIdx', '<', 'inputLength', ';', 'inIdx', '++', '{', '//', 'note:', 'Should', 'the', 'mask', 'be', 'done', 'BEFORE', 'the', 'OR', 'with', 'carry?', 'e', '.', 'buf', '[', 'idx', ']', '|=', '((', 'inBuf', '[', 'inIdx', ']', '>>', 'shift', ')', '|', 'carry', '(', 'inIdx', '))', '&', 'mask', '(', 'idx', ')', 'idx', '++', '}', 'if', '((', 'e', '.', 'bitCounter', '+', 'f', '.', 'BitSize', ')', '%', '8', ')', '>', '0', '{', 'e', '.', 'buf', '[', 'idx', ']', '|=', 'carry', '(', 'inIdx', ')', '}', '}', '//', 'now', 'we', 'should', 'update', 'buffer', 'and', 'bitCounter', 'e', '.', 'bitCounter', '=', '(', 'e', '.', 'bitCounter', '+', 'f', '.', 'BitSize', ')', '%', '8', '//', 'move', 'the', 'head', 'to', 'the', 'next', 'non-complete', 'byte', 'used', 'headerUpdate', ':=', 'func', '()', 'uint8', '{', 'if', '(', 'e', '.', 'bitCounter', '==', '0', ')', '&&', '((', 'f', '.', 'BitSize', '%', '8', ')', '!=', '0', ')', '{', 'return', '(', 'numBytes', '+', '1', ')', '}', 'return', 'numBytes', '}', 'e', '.', 'buf', '=', 'e', '.', 'buf', '[', 'headerUpdate', '():]', 'return', '}']"
947,41725497,"The Insert function should periodically rebalance the tree, as an imbalanced tree may lead to very uneven traversal times.  As a result, Insert should generally be slower that Contains.

If your Insert function does not rebalance the tree, then the time required for any given function become O(n) worst case instead of O(log n) and fairly unpredictable.

In addition, when talking about O(...) time complexity, we're generally talking about worst case behavior.  If you time single calls, then any given call may take (much) less time than the worst case -- for example, Contains looking for the node that happens to be the root will return immediately regardless of the size.
",[]
948,41731291,"
","['You', 'can', 'use', 'struct', 'sockaddr*:', 'void', 'printPointer', '(', 'struct', 'sockaddr_any', '*', 'pp', ')', '{', 'struct', 'sockaddr', '*', 'p', '=', 'pp', '->', 'addr', ';', 'printf', '(', '"":: %p :: ""', ',', 'p', ');', '}', 'since', 'sockaddr_any', 'is', 'defined', 'as:', 'struct', 'sockaddr_any', '{', 'struct', 'sockaddr', 'addr', ';', 'char', 'pad', '[', 'sizeof', '(', 'union', 'sockaddr_all', ')', '-', 'sizeof', '(', 'struct', 'sockaddr', ')];', '};']"
949,41731636,"

Then, I can use usable_pointer as any other sockaddr variable. 

Thank you very much
","['Using', 'Laszlo', 'answer,', 'there', 'is', 'a', 'simple', 'solution', 'for', 'my', 'problem.', 'It', ""isn't"", 'because', 'the', 'definition', 'of', 'the', 'structure', 'sockaddr_any', ""isn't"", 'accessible', 'in', 'my', 'context', ""(there's"", 'no', 'simple', 'way', 'to', 'access', 'the', 'addr', 'field)', 'that', 'we', ""can't"", 'cast', 'the', 'pointer.', 'So,', 'I', 'can', 'simply', 'do:', '//', '#include', '//', 'void', 'printPointer(struct', 'sockaddr_any', '*p){', '//', 'struct', 'sockaddr', '*usable_pointer', '=', '(struct', 'sockaddr', '*)', 'p;', '//', '}', 'import', '""C""', 'Then,', 'I', 'can', 'use', 'usable_pointer', 'as', 'any', 'other', 'sockaddr', 'variable.', 'Thank', 'you', 'very', 'much']"
950,41735501,"

you will notice that it import ""c"" meaing it will require a C compiler that is compartible with the target OS.
","['This', 'could', 'be', 'happening', 'because', 'of', 'your', 'mac', ""doesn't"", 'have', 'a', 'c', 'compiler', 'that', 'can', 'cross', 'compiler', 'to', 'the', 'target', 'OS.', 'I', 'tried', 'it', 'on', 'a', 'Linux', 'OS', 'and', 'it', 'compiles', 'without', 'any', 'issues.', 'there', 'was', 'an', 'issue', 'on', 'git', 'about', 'it', 'last', 'year', 'and', ""it's"", 'still', 'open', 'till', 'today.', 'I', 'would', 'suggest', 'compiling', 'it', 'directly', 'on', 'the', 'target', 'OS.', 'If', 'you', 'look', 'throught', 'the', 'code', 'in', 'github', '.', 'com/go-gl/gl/v2.1/gl/conversions.go', 'you', 'will', 'notice', 'that', 'it', 'import', '""c""', 'meaing', 'it', 'will', 'require', 'a', 'C', 'compiler', 'that', 'is', 'compartible', 'with', 'the', 'target', 'OS.']"
951,41784931,"

https://golang.org/pkg/time/#Time.Add
","['func', '(', 't', 'Time', ')', 'Add', '(', 'd', 'Duration', ')', 'Time', 'https://golang.org/pkg/time/#Time.Add']"
952,41785015,"
","['You', 'are', 'asigning', 'a', 'string', 'to', 't', '(the', 'result', 'of', 'calling', 'Format)', 'instead', 'of', 'a', 'Time', '(the', 'result', 'of', 'calling', 'Now).', ""Here's"", 'an', 'working', 'example:', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 't', ':=', 'time.Now()', 'fmt.Println(t.Format(time.RFC3339))', 't', '=', 't.Add(time.Second)', 'fmt.Println(t.Format(time.RFC3339))', '}', '//', 'prints', '//', '2017-01-21T16:51:31-05:00', '//', '2017-01-21T16:51:32-05:00']"
953,41790923,"

They need to be in separate files.

Now I can access easily all the gifs matching a Tag and vice-versa.
","['So', 'I', 'found', 'how', 'to', 'add', 'back-reference.', 'I', 'created', 'two', 'files', 'in', 'the', 'same', 'package', 'containing', 'the', 'models,', 'and', 'added', 'Associations', 'with', 'the', 'same', 'join-table', 'for', 'the', 'many2many.', 'tag.go', ':', 'type', 'Tag', 'struct', '{', 'ID', 'uint', 'go', 'rm', ':', '""primary_key""', 'json', ':', '""id,omitempty""', 'Name', 'string', 'go', 'rm', ':', '""not null;unique""', 'json', ':', '""name,omitempty""', 'Gifs', '[]', 'Gif', 'go', 'rm', ':', '""many2many:gif_tags;""', 'json', ':', '""gifs,omitempty""', '}', 'and', 'gif.go', ':', 'type', 'Gif', 'struct', '{', 'ID', 'uint', 'go', 'rm', ':', '""primary_key""', 'json', ':', '""id,omitempty""', 'Url', 'string', 'go', 'rm', ':', '""not null;unique""', 'json', ':', '""url,omitempty""', 'Tags', '[]', 'Tag', 'go', 'rm', ':', '""many2many:gif_tags;""', 'json', ':', '""tags,omitempty""', '}', 'They', 'need', 'to', 'be', 'in', 'separate', 'files.', 'Now', 'I', 'can', 'access', 'easily', 'all', 'the', 'gifs', 'matching', 'a', 'Tag', 'and', 'vice-versa.']"
954,41837749,"

This package gave me some greater insight into JSON in go, so it seemed useful to put here.
","['In', 'searching', 'for', 'an', 'answer', 'to', 'this', 'question,', 'I', 'found', 'https://github.com/asaskevich/govalidator,', 'which', 'was', 'tied', 'to', 'this', 'blog', 'post', 'which', 'describes', 'creating', 'an', 'input', 'validator:', 'https://husobee.github.io/golang/validation/2016/01/08/input-validation.html.', 'Just', 'in', 'case', 'someone', 'is', 'looking', 'for', 'a', 'quick', 'library', 'on', 'doing', 'this,', 'I', 'thought', 'it', 'would', 'be', 'useful', 'to', 'put', 'that', 'tool', 'in', 'an', 'easy-to-find', 'place.', 'This', 'package', 'uses', 'the', 'same', 'method', 'for', 'isJSON', 'that', 'William', 'King', 'suggests,', 'as', 'follows:', '//', 'IsJSON', 'check', 'if', 'the', 'string', 'is', 'valid', 'JSON', '(note:', 'uses', 'json.Unmarshal).', 'func', 'IsJSON', '(', 'str', 'string', ')', 'bool', '{', 'var', 'js', 'json', '.', 'RawMessage', 'return', 'json.Unmarshal([]byte(str), &js)', '==', 'nil', '}', 'This', 'package', 'gave', 'me', 'some', 'greater', 'insight', 'into', 'JSON', 'in', 'go,', 'so', 'it', 'seemed', 'useful', 'to', 'put', 'here.']"
955,41839169,"

Hope this helps someone.
","['(for', 'MAC)', 'I', 'tried', 'all', 'these', 'answers', 'and,', 'for', 'some', 'still', 'unknown', 'reason,', 'none', 'of', 'them', 'worked.', 'I', 'had', 'to', '""force', 'feed""', 'the', 'GOPATH', 'by', 'setting', 'the', 'environment', 'variable', 'per', 'every', 'command', 'that', 'required', 'it.', 'For', 'example:', 'sudo', 'env', 'GOPATH', '=$', 'HOME/goWorkDirectory', 'go', 'build', '...', 'Even', 'glide', 'was', 'giving', 'me', 'the', 'GOPATH', 'not', 'set', 'error.', 'Resolved', 'it,', 'again,', 'by', '""force', 'feeding"":', 'I', 'tried', 'all', 'these', 'answers', 'and,', 'for', 'some', 'still', 'unknown', 'reason,', 'none', 'of', 'them', 'worked.', 'I', 'had', 'to', '""force', 'feed""', 'the', 'GOPATH', 'by', 'setting', 'the', 'environment', 'variable', 'per', 'every', 'command', 'that', 'required', 'it.', 'sudo', 'env', 'GOPATH', '=$', 'HOME/goWorkDirectory', 'glide', 'install', 'Hope', 'this', 'helps', 'someone.']"
956,41858792,"
","['You', 'do', 'not', 'check', 'for', 'any', 'error', 'when', 'calling', 'the', 'api.', 'Thus', 'the', 'error', 'when', 'trying', 'to', 'close', 'a', 'response', 'that', 'never', 'arrived.', 'This', 'code', 'does', 'not', 'panic:', 'package', 'main', 'import', '(', '""fmt""', '""net/http""', ')', 'func', 'main', '()', '{', 'requests', ':=', '10000', 'ch', ':=', 'make', '(', 'chan', 'string', ',', 'requests', ')', 'for', 'i', ':=', '1', ';', 'i', '<=', 'requests', ';', 'i', '++', '{', 'go', 'func', '(', 'iter', 'int', ')', '{', 'fmt.Println(iter)', 'resp', ',', 'err', ':=', 'http.Get(""http://localhost:8080/api/project"")', 'if', '(', 'err', '==', 'nil', ')', '{', 'resp', '.', 'Body.Close()', '}', 'ch', '<-', 'fmt.Sprint(iter)', '}(', 'i', ')', '}', 'for', 'i', ':=', '1', ';', 'i', '<=', 'requests', ';', 'i', '++', '{', 'fmt.Println(<-ch)', '}', '}']"
957,41887654,"When iterating over a map with a range loop, the iteration order is not specified and is not guaranteed to be the same from one iteration to the next.

You can't surely print by newest without storing key somewhere else.

Read this: doc

You can store key and maintain order. See this

Again, if you want to print in reverse order. Iterate array in reverse order.
","['When', 'iterating', 'over', 'a', 'map', 'with', 'a', 'range', 'loop,', 'the', 'iteration', 'order', 'is', 'not', 'specified', 'and', 'is', 'not', 'guaranteed', 'to', 'be', 'the', 'same', 'from', 'one', 'iteration', 'to', 'the', 'next.', 'You', ""can't"", 'surely', 'print', 'by', 'newest', 'without', 'storing', 'key', 'somewhere', 'else.', 'Read', 'this:', 'doc', 'You', 'can', 'store', 'key', 'and', 'maintain', 'order.', 'See', 'this', 'Again,', 'if', 'you', 'want', 'to', 'print', 'in', 'reverse', 'order.', 'Iterate', 'array', 'in', 'reverse', 'order.']"
958,41908127,"
","[""I'm"", 'sorry', 'guys', 'but', ""I'm"", 'not', 'convinced', 'that', 'this', 'code', 'in', 'Go', 'is', 'really', 'working', 'as', 'expected.', ""I'm"", 'not', 'an', 'expert,', 'so', 'please', 'correct', 'me', 'if', ""I'm"", 'wrong.', 'First', 'of', 'all', 'it', 'prints', 'z', 'which', 'it', 'seems', 'is', 'a', 'current', 'value', 'of', 'it', 'in', 'global', 'scope', '(usually', 'k*1000)', 'https://play.golang.org/p/a4TJyjKBQh', '//', 'test.go', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 'for', 'z', ':=', '0', ';', 'z', '<', '1000', ';', 'z', '++', '{', 'go', 'func', '(', 'x', 'int', ')', '{', ""// I'm passing z to the function with current value now"", 'fmt.Println(x)', '}(', 'z', ')', '}', 'time.Sleep(1 * time.Nanosecond)', '}', 'And', 'also', 'if', 'I', 'comment', 'out', 'Sleep', 'the', 'program', 'will', 'exit', 'before', 'even', 'starting', 'any', 'goroutines', '(at', 'least', 'it', ""doesn't"", 'print', 'out', 'the', 'results).', 'I', 'would', 'be', 'happy', 'to', 'know', 'if', ""I'm"", 'doing', 'something', 'wrong,', 'but', 'from', 'this', 'simple', 'example', 'it', 'seems', 'the', 'problem', 'is', 'not', 'with', 'Elixir,', 'but', 'Go', 'code', 'provided.', 'Some', 'Go', 'gurus', 'out', 'there?', ""I've"", 'also', 'run', 'some', 'test', 'on', 'my', 'local', 'machine:', 'go', 'run', 'test', '.', 'go', '500', '|', 'wc', '-', 'l', '72442', 'expected', '500000', 'go', 'run', 'test', '.', 'go', '5000', '|', 'wc', '-', 'l', '76274', 'expected', '5000000']"
959,41914615,"

However, I would check the errors :)
","['Instead', 'of', 'calling', 'r.FormFile(),', 'you', 'could', 'instead', 'try:', 'mpr', ',', '_', ':=', 'r.MultipartReader()', 'filePart', ',', '_', ':=', 'r.NextPart()', 'fileName', ':=', 'filePart.FileName()', 'However,', 'I', 'would', 'check', 'the', 'errors', ':)']"
960,41950775,"
","['When', 'you', 'find', 'yourself', 'trying', 'to', 'iterate', 'over', 'an', 'array', 'inside', 'a', 'ReQL', 'query,', 'it', 'is', 'often', 'easier', 'or', 'necessary', 'to', 'use', 'built-in', 'ReQL', 'operations', 'such', 'as', 'Map', 'or', 'ConcatMap.', 'In', 'this', 'case,', 'Contains', 'seems', 'to', 'be', 'the', 'operation', 'you', 'want.', 'Try', 'something', 'like:', '(...).', 'Filter', '(', 'func', '(', 'post', 'r', '.', 'Term', ')', 'interface', '{}{', 'r.Expr(listOriginID).Contains(post.Field(""OriginID""))', '})']"
961,42048039,"
","['The', 'receiver', 'node', 'is', 'passed', 'by', 'value', 'just', 'like', 'other', 'parameters,', 'so', 'any', 'changes', 'you', 'make', 'in', 'the', 'function', 'are', 'not', 'seen', 'by', 'the', 'caller.', 'If', 'you', 'want', 'a', 'function', 'to', 'modify', 'something', 'that', 'exists', 'outside', 'the', 'function,', 'the', 'function', 'needs', 'to', 'be', 'dealing', 'with', 'a', 'pointer', 'to', 'that', 'object.', 'In', 'your', 'case,', 'node', 'is', 'a', 'pointer,', 'but', 'what', 'you', 'really', 'want', 'is', 'a', 'pointer', 'to', 'something', 'that', 'represents', 'the', 'list', 'itself.', 'For', 'example:', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'LinkedListNode', 'struct', '{', 'data', 'int', 'next', '*', 'LinkedListNode', '}', 'type', 'LinkedList', 'struct', '{', 'head', '*', 'LinkedListNode', '}', '//', 'InsertList', 'will', 'insert', 'a', 'item', 'into', 'the', 'list', 'func', '(', 'list', '*', 'LinkedList', ')', 'InsertList', '(', 'data', 'int', ')', '{', 'newHead', ':=', '&', 'LinkedListNode', '{', 'data', ',', 'list', '.', 'head', '}', 'list', '.', 'head', '=', 'newHead', '}', 'func', 'main', '()', '{', 'var', 'list', 'LinkedList', 'list.InsertList(4)', 'fmt.Printf(""node = %+v\\n"", list.head)', 'list.InsertList(7)', 'fmt.Printf(""node = %+v\\n"", list.head)', '}']"
962,42048111,"

Playground link
","['Think', 'of', 'it', 'like', 'this:', 'every', 'variable', 'must', 'be', 'stored', 'at', 'some', 'location', 'in', 'memory,', 'and', 'you', 'can', 'use', 'a', 'pointer', 'to', 'store', 'that', 'location', 'rather', 'than', 'just', 'the', 'variable', 'itself.', 'To', 'get', 'or', 'set', 'the', 'value', 'at', 'that', 'location', 'using', 'the', 'pointer,', 'you', 'need', 'to', 'use', 'the', '""indirection""', 'operator.', 'For', 'example,', '*node', 'will', 'get', 'the', 'LinkedList', 'at', 'the', 'location', 'that', 'node', 'points', 'to,', 'and', '*node', '=', 'newHead', 'will', 'set', 'the', 'LinkedList', 'at', 'the', 'location', 'that', 'node', 'points', 'to.', 'You', 'can', 'also', 'point', 'the', 'pointer', 'to', 'a', 'new', 'memory', 'location,', 'but', 'that', 'change', 'will', 'only', 'be', 'visible', 'in', 'the', 'current', 'scope.', 'In', 'your', 'case,', 'that', 'means', 'node', '=', '&newHead', 'only', 'affects', 'the', 'node', 'pointer', 'in', 'InsertList,', 'not', 'the', 'node', 'pointer', 'in', 'main.', ""Here's"", 'a', 'simpler', 'example', 'using', 'normal', 'functions,', 'though', 'the', 'same', 'rules', 'apply', 'for', 'methods:', '//', 'Changes', 'the', 'value', '`x`', 'points', 'to', 'func', 'modifyValue', '(', 'x', '*', 'int', ')', '{', 'fmt.Printf(""  modifyValue: x=%3d @ %p\\n"", *x, x)', '*', 'x', '=', '1', 'fmt.Printf(""  modifyValue: x=%3d @ %p\\n"", *x, x)', '}', '//', 'Changes', 'the', 'pointer', '`x`', 'itself', 'func', 'modifyPointer', '(', 'x', '*', 'int', ')', '{', 'fmt.Printf(""modifyPointer: x=%3d @ %p\\n"", *x, x)', 'n', ':=', '1', 'x', '=', '&', 'n', 'fmt.Printf(""modifyPointer: x=%3d @ %p\\n"", *x, x)', '}', 'func', 'main', '()', '{', 'x', ':=', '200', 'fmt.Printf(""         main: x=%3d @ %p\\n\\n"", x, &x)', 'modifyPointer', '(&', 'x', ')', 'fmt.Printf(""         main: x=%3d @ %p\\n\\n"", x, &x)', 'modifyValue', '(&', 'x', ')', 'fmt.Printf(""         main: x=%3d @ %p\\n\\n"", x, &x)', '}', 'Output:', 'main', ':', 'x', '=', '200', '0x1', '04', '0', 'e0f8', 'modifyPointer', ':', 'x', '=', '200', '0x1', '04', '0', 'e0f8', 'modifyPointer', ':', 'x', '=', '1', '0x1', '04', '0', 'e134', 'main', ':', 'x', '=', '200', '0x1', '04', '0', 'e0f8', 'modifyValue', ':', 'x', '=', '200', '0x1', '04', '0', 'e0f8', 'modifyValue', ':', 'x', '=', '1', '0x1', '04', '0', 'e0f8', 'main', ':', 'x', '=', '1', '0x1', '04', '0', 'e0f8', 'Playground', 'link']"
963,42051365,"
","['Just', 'change', 'the', 'value', 'reference', 'argument', 'point', 'to', 'func', '(', 'node', '*', 'LinkedList', ')', 'InsertList', '(', 'data', 'int', ')', '{', 'newHead', ':=', 'LinkedList', '{', 'data', ',', 'node', '}', '*', 'node', '=', 'newHead', '//<- dereference here ', '}']"
964,42069690,"

Do we really need global variables? Since the values returned by Config() are produced by the anonymous function passed to once.Do() which is guaranteed to run only once, yes, you need to store them somewhere to be able to return them multiple times, even when the anonymous function is not called / run anymore (on subsequent calls to Config()).

Question: May there be a data race here?

If Config() is called from multiple goroutines, at least one will write the global variables cm and cmErr, and all will read them. So it's rightful to ask this question.

But the answer is no, the above code is safe. The global variables cm and cmErr are only written once, and this happens before they could be read. Because once.Do() blocks until the anonymous function returns. If Config() (and thus once.Do()) is called simultaneously from multiple goroutines, all will block until the anonymous function completes (once only), and reading the variables can happen only after the first write. And since the anonymous function will not run anymore, no more writes will happen.
","['You', 'pass', 'an', 'anonymous', 'function', 'value', 'to', 'once.Do()', '(which', 'is', 'Once.Do()),', 'and', 'the', 'return', 'statements', 'are', 'inside', 'that.', 'Which', 'means', 'those', 'return', 'statements', 'want', 'to', 'return', 'from', 'the', 'anonymous', 'function,', 'but', 'it', ""doesn't"", 'have', 'any', 'return', 'values:', 'func', 'Config', '()', '(*', 'ConfigMap', ',', 'error', ')', '{', 'once.Do(func()', '{', '//', 'You', ""can't"", 'return', 'any', 'values', 'here,', 'only', 'this', 'works:', 'return', '})', '//', 'And', 'you', 'do', 'need', 'to', 'return', 'something', 'here:', 'return', '&', 'ConfigMap', '{},', 'nil', '}', 'What', 'you', 'may', 'do', 'is', 'create', 'global', 'variables', 'matching', 'the', 'return', 'values', 'of', 'Config(),', 'and', 'the', 'anonymous', 'function', 'should', 'store', 'the', 'values', 'in', 'them.', 'And', 'in', 'Config()', 'you', 'may', 'return', 'the', 'values', 'of', 'these', 'global', 'variables.', 'var', 'cm', '*', 'ConfigMap', 'var', 'cmErr', 'error', 'func', 'Config', '()', '(*', 'ConfigMap', ',', 'error', ')', '{', 'once.Do(func()', '{', '//', 'load', 'config,', 'and', 'store,', 'e.g.', 'cm', ',', 'cmErr', '=', '&', 'ConfigMap', '{},', 'nil', '})', 'return', 'cm', ',', 'cmErr', '}', 'Do', 'we', 'really', 'need', 'global', 'variables?', 'Since', 'the', 'values', 'returned', 'by', 'Config()', 'are', 'produced', 'by', 'the', 'anonymous', 'function', 'passed', 'to', 'once.Do()', 'which', 'is', 'guaranteed', 'to', 'run', 'only', 'once,', 'yes,', 'you', 'need', 'to', 'store', 'them', 'somewhere', 'to', 'be', 'able', 'to', 'return', 'them', 'multiple', 'times,', 'even', 'when', 'the', 'anonymous', 'function', 'is', 'not', 'called', '/', 'run', 'anymore', '(on', 'subsequent', 'calls', 'to', 'Config()).', 'Question:', 'May', 'there', 'be', 'a', 'data', 'race', 'here?', 'If', 'Config()', 'is', 'called', 'from', 'multiple', 'goroutines,', 'at', 'least', 'one', 'will', 'write', 'the', 'global', 'variables', 'cm', 'and', 'cmErr,', 'and', 'all', 'will', 'read', 'them.', 'So', ""it's"", 'rightful', 'to', 'ask', 'this', 'question.', 'But', 'the', 'answer', 'is', 'no,', 'the', 'above', 'code', 'is', 'safe.', 'The', 'global', 'variables', 'cm', 'and', 'cmErr', 'are', 'only', 'written', 'once,', 'and', 'this', 'happens', 'before', 'they', 'could', 'be', 'read.', 'Because', 'once.Do()', 'blocks', 'until', 'the', 'anonymous', 'function', 'returns.', 'If', 'Config()', '(and', 'thus', 'once.Do())', 'is', 'called', 'simultaneously', 'from', 'multiple', 'goroutines,', 'all', 'will', 'block', 'until', 'the', 'anonymous', 'function', 'completes', '(once', 'only),', 'and', 'reading', 'the', 'variables', 'can', 'happen', 'only', 'after', 'the', 'first', 'write.', 'And', 'since', 'the', 'anonymous', 'function', 'will', 'not', 'run', 'anymore,', 'no', 'more', 'writes', 'will', 'happen.']"
965,42069743,"
","[""You're"", 'calling', 'return', 'nil,', 'err', 'and', 'similar', 'from', 'the', 'nested', 'func()', 'inside', 'your', 'once.Do.', 'Conversely,', ""you're"", 'not', 'returning', 'from', 'the', 'actual', 'function.', 'Instead,', 'you', 'can', 'structure', 'your', 'code', 'like', 'this:', 'func', 'newConfig', '()', '(*', 'Config', ',', 'error', ')', '{', 'configFilePath', ',', 'err', ':=', 'filepath.Abs(""../build/app.conf"")', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', '//', 'Load', 'app.conf', 'cfg', ',', 'err', ':=', 'ini.Load(configFilePath)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', '//', 'Get', 'app', 'mode', 'mode', ',', 'err', ':=', 'AppMode', '()', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'c', ':=', '&', 'ConfigMap', '{}', 'err', '=', 'cfg.Section(mode).MapTo(c)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'c', ',', 'err', '}', '//', 'Cached', 'config', 'and', 'any', 'error.', 'var', '(', 'cachedConfig', '*', 'Config', 'cachedConfigErr', 'error', ')', 'func', 'Config', '()', '(*', 'Config', ',', 'error', ')', '{', 'once.Do(func()', '{', 'cachedConfig', ',', 'cachedConfigErr', '=', 'newConfig', '()', '})', 'return', 'cachedConfig', ',', 'cachedConfigErr', '}']"
966,42170463,"
","['Alternative', 'solution:', 'use', 'sed', 'to', 'insert', 'additional', 'field', 'into', 'the', 'generated', 'parser.', 'Then,', 'in', 'your', 'grammar', 'action,', 'assign', 'the', 'value.', 'go', 'tool', 'yacc', '-', 'o', 'parser', '.', 'go', '-', 'p', 'Filter', 'parser', '.', 'y', 'sed', '-', 'i', ""'/type FilterParserImpl struct/a tree *treeNode'"", 'parser', '.', 'go', 'The', 'generated', 'parser:', 'type', 'FilterParserImpl', 'struct', '{', 'tree', '*', 'treeNode', 'lval', 'FilterSymType', 'stack', '[', 'FilterInitialStackSize', ']', 'FilterSymType', 'char', 'int', '}', 'Grammar', 'action:', 'filter', '{', 'Filterrcvr', '.', 'tree', '=', '$', '1', '}']"
967,42197509,"From https://golang.org/pkg/regexp/:


  Find(All)?(String)?(Submatch)?(Index)?
  
  If 'All' is present, the routine matches successive non-overlapping
  matches of the entire expression. Empty matches abutting a preceding
  match are ignored. The return value is a slice containing the
  successive return values of the corresponding non-'All' routine. These
  routines take an extra integer argument, n; if n >= 0, the function
  returns at most n matches/submatches.

","['From', 'https://golang.org/pkg/regexp/:', 'Find(All)?(String)?(Submatch)?(Index)?', 'If', ""'All'"", 'is', 'present,', 'the', 'routine', 'matches', 'successive', 'non-overlapping', 'matches', 'of', 'the', 'entire', 'expression.', 'Empty', 'matches', 'abutting', 'a', 'preceding', 'match', 'are', 'ignored.', 'The', 'return', 'value', 'is', 'a', 'slice', 'containing', 'the', 'successive', 'return', 'values', 'of', 'the', 'corresponding', ""non-'All'"", 'routine.', 'These', 'routines', 'take', 'an', 'extra', 'integer', 'argument,', 'n;', 'if', 'n', '>=', '0,', 'the', 'function', 'returns', 'at', 'most', 'n', 'matches/submatches.']"
968,42324497,"I see 3 choices:

0) Inconsistent Snapshot This is what you have: Your map is changing as you generate keys, so you get what you get. I'm not entirely sure your locking is correct. It looks really suspicious to me.  Test it extensively with the race detector, of course.

1) ""Stop The World"" - You can block write access to your map while you generate all the keys. Generating keys is much quicker than processing the items, and will give you a perfect consistent snapshot of the items to process. Unfortunately, when you send the keys to co-routines, those keys may not exist by the time you get around to processing it.  It sounds like you are OK with that.  It does require storing a copy of all the keys, so hopefully this is OK.

2) Roll your own MVCC (Multi-Version Concurrency Control) - Instead of using 1 map, use 2. Let's call them A and B. The idea is to only write to the first map while you process the second map, then flip roles.


Next to your RW Lock, add a boolean to protect your maps.
Take out your RW lock as normal, but then consult BOTH maps.
When the boolean is true, Read/Write from A, but allow reads to ""fall back"" to B if not found in A.
when the boolean is false, Read/Write from B, but allow reads to ""fall back"" to A if not found in B.


When it's time to start your background jobs, just take out a RW lock, while you flip the boolean.  Now you can iterate over the keys of the ""fall back"" map, calling a gouroutine for each one. The key is guaranteed to exist, since nobody is writing to that map.

You can delete from B in the goroutine (requires using locking when reading and again while deleting).

But it might be better/simpler to just process all the entries with NO locking (since everything is just reading), then wait for all the goroutines to be done, then wipe out B by doing ""B = make()"" to get an empty map. This will free up all your memory at once, and save some accounting that needs to be done after ever delete.

Once you wipe the map (or have deleted all the entries), you can take the RW lock while you flip the boolean the other way, then start processing the other map.

The downside is that you will end up with 2 copies of the map if you update items frequently.  If this is the case: 1) have WRITES check the fallback map. If it's there, update it, otherwise update the main map. 2) Delete the item from the map BEFORE background processing. (You can't use the bulk delete trick.)
","['I', 'see', '3', 'choices:', '0)', 'Inconsistent', 'Snapshot', 'This', 'is', 'what', 'you', 'have:', 'Your', 'map', 'is', 'changing', 'as', 'you', 'generate', 'keys,', 'so', 'you', 'get', 'what', 'you', 'get.', ""I'm"", 'not', 'entirely', 'sure', 'your', 'locking', 'is', 'correct.', 'It', 'looks', 'really', 'suspicious', 'to', 'me.', 'Test', 'it', 'extensively', 'with', 'the', 'race', 'detector,', 'of', 'course.', '1)', '""Stop', 'The', 'World""', '-', 'You', 'can', 'block', 'write', 'access', 'to', 'your', 'map', 'while', 'you', 'generate', 'all', 'the', 'keys.', 'Generating', 'keys', 'is', 'much', 'quicker', 'than', 'processing', 'the', 'items,', 'and', 'will', 'give', 'you', 'a', 'perfect', 'consistent', 'snapshot', 'of', 'the', 'items', 'to', 'process.', 'Unfortunately,', 'when', 'you', 'send', 'the', 'keys', 'to', 'co-routines,', 'those', 'keys', 'may', 'not', 'exist', 'by', 'the', 'time', 'you', 'get', 'around', 'to', 'processing', 'it.', 'It', 'sounds', 'like', 'you', 'are', 'OK', 'with', 'that.', 'It', 'does', 'require', 'storing', 'a', 'copy', 'of', 'all', 'the', 'keys,', 'so', 'hopefully', 'this', 'is', 'OK.', '2)', 'Roll', 'your', 'own', 'MVCC', '(Multi-Version', 'Concurrency', 'Control)', '-', 'Instead', 'of', 'using', '1', 'map,', 'use', '2.', ""Let's"", 'call', 'them', 'A', 'and', 'B.', 'The', 'idea', 'is', 'to', 'only', 'write', 'to', 'the', 'first', 'map', 'while', 'you', 'process', 'the', 'second', 'map,', 'then', 'flip', 'roles.', 'Next', 'to', 'your', 'RW', 'Lock,', 'add', 'a', 'boolean', 'to', 'protect', 'your', 'maps.', 'Take', 'out', 'your', 'RW', 'lock', 'as', 'normal,', 'but', 'then', 'consult', 'BOTH', 'maps.', 'When', 'the', 'boolean', 'is', 'true,', 'Read/Write', 'from', 'A,', 'but', 'allow', 'reads', 'to', '""fall', 'back""', 'to', 'B', 'if', 'not', 'found', 'in', 'A.', 'when', 'the', 'boolean', 'is', 'false,', 'Read/Write', 'from', 'B,', 'but', 'allow', 'reads', 'to', '""fall', 'back""', 'to', 'A', 'if', 'not', 'found', 'in', 'B.', 'When', ""it's"", 'time', 'to', 'start', 'your', 'background', 'jobs,', 'just', 'take', 'out', 'a', 'RW', 'lock,', 'while', 'you', 'flip', 'the', 'boolean.', 'Now', 'you', 'can', 'iterate', 'over', 'the', 'keys', 'of', 'the', '""fall', 'back""', 'map,', 'calling', 'a', 'gouroutine', 'for', 'each', 'one.', 'The', 'key', 'is', 'guaranteed', 'to', 'exist,', 'since', 'nobody', 'is', 'writing', 'to', 'that', 'map.', 'You', 'can', 'delete', 'from', 'B', 'in', 'the', 'goroutine', '(requires', 'using', 'locking', 'when', 'reading', 'and', 'again', 'while', 'deleting).', 'But', 'it', 'might', 'be', 'better/simpler', 'to', 'just', 'process', 'all', 'the', 'entries', 'with', 'NO', 'locking', '(since', 'everything', 'is', 'just', 'reading),', 'then', 'wait', 'for', 'all', 'the', 'goroutines', 'to', 'be', 'done,', 'then', 'wipe', 'out', 'B', 'by', 'doing', '""B', '=', 'make()""', 'to', 'get', 'an', 'empty', 'map.', 'This', 'will', 'free', 'up', 'all', 'your', 'memory', 'at', 'once,', 'and', 'save', 'some', 'accounting', 'that', 'needs', 'to', 'be', 'done', 'after', 'ever', 'delete.', 'Once', 'you', 'wipe', 'the', 'map', '(or', 'have', 'deleted', 'all', 'the', 'entries),', 'you', 'can', 'take', 'the', 'RW', 'lock', 'while', 'you', 'flip', 'the', 'boolean', 'the', 'other', 'way,', 'then', 'start', 'processing', 'the', 'other', 'map.', 'The', 'downside', 'is', 'that', 'you', 'will', 'end', 'up', 'with', '2', 'copies', 'of', 'the', 'map', 'if', 'you', 'update', 'items', 'frequently.', 'If', 'this', 'is', 'the', 'case:', '1)', 'have', 'WRITES', 'check', 'the', 'fallback', 'map.', 'If', ""it's"", 'there,', 'update', 'it,', 'otherwise', 'update', 'the', 'main', 'map.', '2)', 'Delete', 'the', 'item', 'from', 'the', 'map', 'BEFORE', 'background', 'processing.', '(You', ""can't"", 'use', 'the', 'bulk', 'delete', 'trick.)']"
969,42365070,"
","['At', 'this', 'point', 'the', 'documentation', 'is', 'a', 'little', 'bit', 'hard', 'to', 'order.', 'I', 'am', 'going', 'to', 'link', 'the', 'important', 'topics', 'to', 'the', 'hugo', 'documentation', 'so', 'that', 'you', 'are', 'able', 'to', 'read', 'more', 'details.', 'After', 'looking', 'to', 'your', 'Content', 'Organisation', 'there', 'are', 'two', 'Sections:', 'blog-folder-1', 'blog-folder-2', 'So', 'inside', 'your', 'theme', 'you', 'are', 'able', 'to', 'define', 'one', 'template', 'for', 'each', 'section.', 'If', 'there', 'is', 'no', 'template', 'provided', 'hugo', 'uses', 'the', 'default.', 'So', 'inside', 'your', 'layouts', 'folder', 'there', 'is', 'that', 'logic:', '/layouts/SECTION/LAYOUT.html', 'For', 'your', 'case', 'you', 'can', 'define', 'a', 'default', 'layout.', 'When', 'for', 'example', 'blog-folder-2', 'needs', 'another', 'template', 'your', 'structure', 'would', 'look', 'like', 'this:', 'layouts', '/', '_default', '/', 'single', '.', 'html', 'blog', '-', 'folder', '-', '2', '/', 'single', '.', 'html', 'If', 'you', 'want', 'to', 'filter', 'out', 'one', 'section', 'inside', 'a', 'list,', 'you', 'need', 'to', 'use', 'the', 'page', 'variables.', 'At', 'that', 'points', 'where', 'you', 'are', 'ranging', 'over', 'the', 'sites', 'you', 'can', 'add', 'a', 'where', 'clause:', '{{', 'range', '$', 'i', ',', '$', 'p', ':=', '(.', 'Paginate', '(', 'where', '.', 'Data', '.', 'Pages', '""Section""', '""!=""', '""blog-folder-2""', ')).', 'Pages', '}}']"
970,42377440,"

Playground Example
","['To', 'recurse', 'down', 'a', 'hierarchy,', 'use', 'a', 'named', 'template', 'that', 'executes', 'itself.', 'In', 'the', 'following', 'example,', 'the', 'template', '""replies""', 'executes', '""replies""', 'to', 'display', 'sub-replies:', '{{', 'define', '""main""', '}}', '{{.', 'Title', '}}', '{{.', 'Body', '}}', '{{', 'template', '""replies""', '.', 'Replies', '}}', '{{', 'end', '}}', '{{', 'define', '""replies""', '}}', '{{', 'if', '.}}', '{{', 'range', '.', '}}', '{{.', 'Title', '}}', '{{.', 'Body', '}}', '{{', 'template', '""replies""', '.', 'Replies', '}}', '{{', 'end', '}}', '{{', 'end', '}}', '{{', 'end', '}}', 'Playground', 'Example']"
971,42377447,"
","['You', 'just', 'have', 'defined', 'a', 'recursive', 'data', 'type.', 'You', 'can', 'render', 'it', 'by', 'defining', 'a', 'recursive', 'template:', '{{', 'define', '""replies""', '}}', '{{', 'range', '$', 'key', ',', '$', 'value', ':=', '.', '}}', '{{', '$', 'value', '.', 'ID', '}}', '{{', '$', 'value', '.', 'PostNum', '}}', '{{', 'template', '""replies""', '.', 'Replies', '}}', '{{', 'end', '}}', '{{', 'end', '}}', '{{', '.', 'Title', '}}', '{{', '.', 'Body', '}}', '{{', 'template', '""replies""', '.', 'Replies', '}}']"
972,42396801,"

After that you can simply deploy the application with cf push and everything should work as a charm
","['Ok,', 'after', 'digging', 'around', 'a', 'bit', 'I', 'got', 'the', 'whole', 'thing', 'working', 'as', 'follows', 'manifest.yml', '---', 'applications', ':', '-', 'name', ':', 'prometheus', 'instances', ':', '1', 'buildpack', ':', 'https', '://', 'github', '.', 'com/cloudfoundry/go-buildpack.git', 'command', ':', 'prometheus', 'env', ':', 'GOPACKAGENAME', ':', 'github', '.', 'com/prometheus/prometheus', 'GO_INSTALL_PACKAGE_SPEC', ':', 'github', '.', 'com/prometheus/prometheus/cmd/prometheus', 'memory', ':', '1000', 'M', 'BUT', 'in', 'order', 'to', 'listen', 'on', 'the', 'right', 'port,', 'the', 'only', 'solution', 'I', 'could', 'find', 'is', 'adding', 'the', 'following', 'to', 'the', 'cmd/prometheus/config.go', 'file', 'to', 'the', 'beginning', 'of', 'the', 'init()', 'function', 'port', ':=', '"":9090""', 'if', 's', ':=', 'os.Getenv(""PORT"")', ';', 's', '!=', '""""', '{', 'port', '=', '"":""', '+', 's', '}', 'and', 'then', 'changing', 'the', 'following', 'part', '(also', 'in', 'the', 'init()', 'function)', 'cfg', '.', 'fs', '.', 'StringVar', '(', '&', 'cfg', '.', 'web', '.', 'ListenAddress', ',', '""web.listen-address""', ',', '"":9090""', ',', '""Address to listen on for the web interface, API, and telemetry.""', ',', ')', 'to', 'cfg', '.', 'fs', '.', 'StringVar', '(', '&', 'cfg', '.', 'web', '.', 'ListenAddress', ',', '""web.listen-address""', ',', 'port', ',', '""Address to listen on for the web interface, API, and telemetry.""', ',', ')', 'After', 'that', 'you', 'can', 'simply', 'deploy', 'the', 'application', 'with', 'cf', 'push', 'and', 'everything', 'should', 'work', 'as', 'a', 'charm']"
973,42408164,"
","['You', 'could', 'try', 'through', 'ssh,', 'if', 'your', 'public', 'ssh', 'key', 'is', 'registered', 'on', 'coding.net.', 'See', '""go', 'get', 'for', 'private', 'repos', 'in', 'docker""', 'as', 'an', 'example:', 'FROM', 'go', 'lang', ':', '1', '.', '6', 'RUN', 'echo', '""[url \\""', 'git', 'github', '.', 'com', ':', '""]\\n\\tinsteadOf = https://github.com/""', '>>', '/root/.gitconfig', 'RUN', 'mkdir', '/root/.ssh && echo ""StrictHostKeyChecking no "" > /root/.ssh/config', 'ADD', '.', '/go/src/github.com/company/foo', 'CMD', 'cd', '/go/src/github.com/company/foo && go get github.com/company/bar && go build -o /foo', 'with', 'the', 'build', 'step:', 'docker', 'build', '-', 't', 'foo', '-', 'build', '.', 'docker', 'run', '--', 'name', '=', 'foo', '-', 'build', '-', 'v', '/.', 'ssh/id_rsa:/root/.ssh/id_rsa', 'foo', '-', 'build', 'docker', 'cp', 'foo', '-', 'build', ':/', 'foo', 'foo', 'docker', 'rm', '-', 'f', 'foo', '-', 'build', 'docker', 'rmi', '-', 'f', 'foo', '-', 'build']"
974,42412985,"
","['The', 'element', 'type', 'of', 'the', 'slice', 'is', 'interface{},', 'so', 'a', 'composite', 'literal', 'needs', 'an', 'additional', 'pair', 'of', 'braces:', '[]interface{}{}.', 'In', 'case', 'of', 'slice', 'of', 'slices:', 'toReturn', ':=', '[][]', 'interface', '{}{}', 'Or', 'when', 'using', 'make(),', 'you', 'specify', 'a', 'type', '(and', 'not', 'a', 'composite', 'literal):', 'toReturn', ':=', 'make', '([][]', 'interface', '{},', '0', ',', 'len', '(', 'map', '_', '))']"
975,42412988,"
","[""You're"", 'creating', 'an', 'instance,', 'not', 'defining', 'a', 'type,', 'so', 'you', 'need', 'an', 'extra', 'pair', 'of', 'curly', 'braces', 'to', 'initialize', 'the', 'variable:', 'toReturn', ':=', '[][]', 'interface', '{}{}']"
976,42416871,"Prometheus is a TSDB. And it is intended to consume gigabytes and gigabytes of data.

On a Cloud Foundry platform, you are limited by available resources. 
So, why deploy Prometheus to Cloud Foundry?

Why not spin up a standalone bosh director and deploy Prometheus through the director as a Bosh deployment, and a standalone. Then inject it as a CUPS into Cloud Foundry?

I am just curious and trying to understand the use case.
",[]
977,42473964,"No, there is not. The Go language specification specifies this clearly:


  Exported identifiers
  
  An identifier may be exported to permit access to it from another package. An identifier is exported if both:
  
  
  the first character of the identifier's name is a Unicode upper case letter (Unicode class ""Lu""); and
  the identifier is declared in the package block or it is a field name or method name.
  
  
  All other identifiers are not exported.

","['No,', 'there', 'is', 'not.', 'The', 'Go', 'language', 'specification', 'specifies', 'this', 'clearly:', 'Exported', 'identifiers', 'An', 'identifier', 'may', 'be', 'exported', 'to', 'permit', 'access', 'to', 'it', 'from', 'another', 'package.', 'An', 'identifier', 'is', 'exported', 'if', 'both:', 'the', 'first', 'character', 'of', 'the', ""identifier's"", 'name', 'is', 'a', 'Unicode', 'upper', 'case', 'letter', '(Unicode', 'class', '""Lu"");', 'and', 'the', 'identifier', 'is', 'declared', 'in', 'the', 'package', 'block', 'or', 'it', 'is', 'a', 'field', 'name', 'or', 'method', 'name.', 'All', 'other', 'identifiers', 'are', 'not', 'exported.']"
978,42517082,"

Do note that sending a value to statusChannel while is is not listening for a value will make the example blow up in your face. Either use a buffered channel or a channel that signals back to main when the goroutine is back to listening for a signal.
","[""Here's"", 'an', 'isolated', 'commented', 'runable', 'version', 'of', 'how', 'such', 'a', 'signaling', 'system', 'might', 'be', 'implemented.', 'package', 'main', 'import', '(', '""time""', '""log""', ')', 'func', 'main', '()', '{', 'statusChannel', ':=', 'make', '(', 'chan', 'bool', ')', 'go', 'applicationLoop', '(', 'statusChannel', ')', '//', 'reasonably', 'random', 'outcome', 'for', 'testing', 'if', 'time.Now().Unix()', '%', '2', '==', '0', '{', 'statusChannel', '<-', 'true', '}', 'else', '{', 'statusChannel', '<-', 'false', '}', 'for', '{', '//', 'busy', 'loop', 'for', 'testing', 'time.Sleep(1000)', '}', '}', 'func', 'applicationLoop', '(', 'statusChannel', 'chan', 'bool', ')', '{', 'defer', 'close', '(', 'statusChannel', ')', 'for', '{', 'log.Printf(""waiting for signal...\\n"")', 'shouldContinue', ':=', '<-', 'statusChannel', 'if', '!', 'shouldContinue', '{', 'log.Print(""received false, breaking...\\n"")', 'break', '}', '//', 'run', 'your', 'code', 'here', '//', 'you', 'should', 'use', 'a', 'second', 'channel', 'to', 'return', 'results,', 'as', 'the', 'channel', 'is', 'not', 'buffered', 'log.Print(""working...\\n"")', '}', '}', 'Do', 'note', 'that', 'sending', 'a', 'value', 'to', 'statusChannel', 'while', 'is', 'is', 'not', 'listening', 'for', 'a', 'value', 'will', 'make', 'the', 'example', 'blow', 'up', 'in', 'your', 'face.', 'Either', 'use', 'a', 'buffered', 'channel', 'or', 'a', 'channel', 'that', 'signals', 'back', 'to', 'main', 'when', 'the', 'goroutine', 'is', 'back', 'to', 'listening', 'for', 'a', 'signal.']"
979,42518866,"

Currently there is no official package that provide a functionality which combines context.Context and sync.WaitGroup. The nearest thing is an errgroup which can resemble this functionality with some hacks.
","['This', 'problem', 'has', 'two', 'parts.', 'First', 'we', 'need', 'to', 'stop', 'child', 'goroutines', 'somehow', 'in', 'a', 'way', 'that', 'even', 'if', 'a', 'parent', 'goroutines', 'stops,', 'all', ""it's"", 'children', 'should', 'get', 'notified', 'and', 'stop', '-', 'a', 'hierarchy', 'of', 'stop', 'signals', 'that', 'goes', 'down', 'but', 'not', 'up.', 'On', 'the', 'other', 'hand', 'the', 'parent', 'needs', 'to', 'wait', 'for', ""it's"", 'children', 'until', 'they', 'are', 'done.', 'Otherwise', 'we', 'would', 'return', 'from', 'a', 'goroutine', 'or', 'even', 'exit', 'from', 'the', 'app', 'before', 'some', 'goroutines', 'are', 'finished', 'properly.', 'For', 'simplicity', 'we', 'ignore', 'implementing', 'error', 'handling,', 'timeouts', 'and', 'the', 'like.', 'For', 'handling', 'the', 'first', 'problem', 'we', 'use', 'context.Context', 'which', 'gives', 'us', 'a', 'nice', 'hierarchy', 'of', 'execution', 'context', 'handling', 'tools', 'and', 'for', 'solving', 'the', 'second', 'problem', 'we', 'use', 'sync.WaitGroup', 'which', 'allows', 'us', 'to', 'wait', 'for', 'a', 'group', 'of', 'goroutines', 'to', 'complete', 'their', 'tasks.', 'A', 'simple', 'demonstration', 'would', 'be:', 'func', 'main', '()', '{', 'all', ':=', '&', 'sync', '.', 'WaitGroup', '{}', 'rootCtx', ',', 'rootCancel', ':=', 'context.WithCancel(context.Background())', 'all.Add(1)', 'go', 'level1', '(', 'rootCtx', ',', 'all', ')', '//', 'just', 'to', 'simulate', 'stop,', 'we', 'could', 'use', 'an', 'os', 'signal', 'instead', '//', 'app', 'ends', 'after', '3', 'seconds', 'go', 'func', '()', '{', 'time.Sleep(time.Second * 3)', 'rootCancel', '()', '}()', 'all.Wait()', '}', 'func', 'level1', '(', 'parent', 'context', '.', 'Context', ',', 'all', '*', 'sync', '.', 'WaitGroup', ')', '{', 'defer', 'all.Done()', 'l1Ctx', ',', 'l1Cancel', ':=', 'context.WithCancel(parent)', 'defer', 'l1Cancel', '()', 'for', 'i', ':=', '0', ';', 'i', '<', '3', ';', 'i', '++', '{', 'all.Add(1)', 'go', 'level2', '(', 'l1Ctx', ',', 'all', ')', '}', 'for', '{', 'select', '{', 'case', '<-', 'parent.Done()', ':', 'return', '//', 'other', 'cases', 'if', 'any,', '//', 'this', 'is', 'a', 'sample', 'case', '<-', 'time.After(time.Second)', ':', 'log.Println(`level1`)', '}', '}', '}', 'func', 'level2', '(', 'parent', 'context', '.', 'Context', ',', 'all', '*', 'sync', '.', 'WaitGroup', ')', '{', 'defer', 'all.Done()', 'for', '{', 'select', '{', 'case', '<-', 'parent.Done()', ':', 'return', 'case', '<-', 'time.After(time.Second)', ':', 'log.Println(`level2`)', '}', '}', '}', 'Which', 'gives', 'us', 'some', 'output', 'like:', '[', 'info', ']', 'level2', '[', 'info', ']', 'level2', '[', 'info', ']', 'level2', '[', 'info', ']', 'level1', '[', 'info', ']', 'level2', '[', 'info', ']', 'level1', '[', 'info', ']', 'level2', '[', 'info', ']', 'level2', 'Currently', 'there', 'is', 'no', 'official', 'package', 'that', 'provide', 'a', 'functionality', 'which', 'combines', 'context.Context', 'and', 'sync.WaitGroup.', 'The', 'nearest', 'thing', 'is', 'an', 'errgroup', 'which', 'can', 'resemble', 'this', 'functionality', 'with', 'some', 'hacks.']"
980,42529742,"As for just about any resource (and a connection is no different), a user should call the functions to return resources to the system after use. Most users understand this across languages and architectures, so I don't see why your package users should have any concern. Go addresses this problem very elegantly by including the defer statement which makes it very easy to provide for releasing a resource.
","['As', 'for', 'just', 'about', 'any', 'resource', '(and', 'a', 'connection', 'is', 'no', 'different),', 'a', 'user', 'should', 'call', 'the', 'functions', 'to', 'return', 'resources', 'to', 'the', 'system', 'after', 'use.', 'Most', 'users', 'understand', 'this', 'across', 'languages', 'and', 'architectures,', 'so', 'I', ""don't"", 'see', 'why', 'your', 'package', 'users', 'should', 'have', 'any', 'concern.', 'Go', 'addresses', 'this', 'problem', 'very', 'elegantly', 'by', 'including', 'the', 'defer', 'statement', 'which', 'makes', 'it', 'very', 'easy', 'to', 'provide', 'for', 'releasing', 'a', 'resource.']"
981,42566899,"Simple answer: no.  Elements placed on a Go channel can only be read once, regardless of how many goroutines are trying to read off the channel at the same time, and that applies regardless of whether the channel is buffered or not.  There's no possibility that an element will be read by two different goroutines unless that element was sent to the channel more than once.  The only thing that buffering does, with regards to channel semantics, is remove the necessity for the read and write to occur synchronously.
","['Simple', 'answer:', 'no.', 'Elements', 'placed', 'on', 'a', 'Go', 'channel', 'can', 'only', 'be', 'read', 'once,', 'regardless', 'of', 'how', 'many', 'goroutines', 'are', 'trying', 'to', 'read', 'off', 'the', 'channel', 'at', 'the', 'same', 'time,', 'and', 'that', 'applies', 'regardless', 'of', 'whether', 'the', 'channel', 'is', 'buffered', 'or', 'not.', ""There's"", 'no', 'possibility', 'that', 'an', 'element', 'will', 'be', 'read', 'by', 'two', 'different', 'goroutines', 'unless', 'that', 'element', 'was', 'sent', 'to', 'the', 'channel', 'more', 'than', 'once.', 'The', 'only', 'thing', 'that', 'buffering', 'does,', 'with', 'regards', 'to', 'channel', 'semantics,', 'is', 'remove', 'the', 'necessity', 'for', 'the', 'read', 'and', 'write', 'to', 'occur', 'synchronously.']"
982,42580794,"
  In other words, could different go routine grab the same elem in the channel, or while one go routine is reading the buffer, the other go routines already read and processed some of the elements? 


Nope...

I believe a misunderstanding is in difference between non-blocking and thread safe concepts.

Non blocking (buffered) channels


  Sends to a buffered channel block only when the buffer is full.


Buffered channels just like it said have buffers to store some amount of items. It allows reading goroutine to read without await for writing goroutine put an item to a channel on condition something already written to a channel. If a channel unbuffered it can contain just single item therefore it requires to block channel for writing before a written item be withdrawn. ""Blocking/non-blocking"" concept doesn't related to ""thread safe"" concept and non-blocking doesn't mean not thread safe.

Thread safety of Go channels

Go channels are thread safe in all available ways of use. Channel is a reference type so once allocated with make channel could be passed by value because it has implicit pointer to a single memory slot. Obviously contained in a channel item never be copied and couldn't be read twice. 
","['Currently', 'there', 'is', 'no', 'official', 'package', 'that', 'provide', 'a', 'functionality', 'which', 'combines', 'context.Context', 'and', 'sync.WaitGroup.', 'The', 'nearest', 'thing', 'is', 'an', 'errgroup', 'which', 'can', 'resemble', 'this', 'functionality', 'with', 'some', 'hacks.']"
983,42633344,"Have a look at the present tool, it does a similar thing using flat files and might even be useful for you.

https://godoc.org/golang.org/x/tools/present
","['Have', 'a', 'look', 'at', 'the', 'present', 'tool,', 'it', 'does', 'a', 'similar', 'thing', 'using', 'flat', 'files', 'and', 'might', 'even', 'be', 'useful', 'for', 'you.', 'https://godoc.org/golang.org/x/tools/present']"
984,42706064,"
","['with', '2', 'channels,', 'this', 'work:', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'var', 'ch', 'chan', 'int', '=', 'make', '(', 'chan', 'int', ')', 'var', 'ch2', 'chan', 'int', '=', 'make', '(', 'chan', 'int', ')', 'var', 'counter', 'int', 'func', 'main', '()', '{', 'go', 'sub', '()', 'for', 'i', ':=', '0', ';', 'i', '<', '10000', ';', 'i', '++', '{', '//change to 10000', 'go', 'con', '()', '}', 'time.Sleep(1000 * time.Millisecond)', 'ch2', '<-', '0', 'fmt.Println(<- ch2)', '//', 'fmt.Println(counter)', 'uncomment', 'this', '}', 'func', 'sub', '()', '{', 'for', ';;', '{', 'select', '{', 'case', '<-', 'ch', ':', 'counter', '++', 'case', '<-', 'ch2', ':', 'ch2', '<-', 'counter', '}', '}', '}', 'func', 'con', '()', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '10000', ';', 'i', '++', '{', 'ch', '<-', '1', '}', '}']"
985,42726688,"(Not something) OR (not something else mutually exclusive) is always going to be true isn't it?

If it is method post, it will not be delete and vice versa , you might want && ?
","['(Not', 'something)', 'OR', '(not', 'something', 'else', 'mutually', 'exclusive)', 'is', 'always', 'going', 'to', 'be', 'true', ""isn't"", 'it?', 'If', 'it', 'is', 'method', 'post,', 'it', 'will', 'not', 'be', 'delete', 'and', 'vice', 'versa', ',', 'you', 'might', 'want', '&&', '?']"
986,42728004,"
","['Better', 'to', 'use', 'AddDate', 'for', 'time', 'calculations', 'greater', 'than', '24', 'hours:', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'AddWorkDays', '(', 't', 'time', '.', 'Time', ',', 'workdays', 'int', ')', 'time', '.', 'Time', '{', 'curDate', ':=', 't', 'for', 'curWorkdays', ':=', '0', ';', 'curWorkdays', '<=', 'workdays', ';', '{', 'curDate', '=', 'curDate.AddDate(0, 0, 1)', 'if', 'curDate.Weekday() != 6 && t.Weekday()', '!=', '7', '{', 'curWorkdays', '++', '}', '}', 'return', 'curDate', '}', 'func', 'main', '()', '{', 'now', ':=', 'time.Now()', 'workdays', ':=', '3', 't', ':=', 'AddWorkDays', '(', 'now', ',', 'workdays', ')', 'fmt.Printf(""  now %-9v %v\\n"", now.Weekday(), now)', 'fmt.Printf(""later %-9v %v\\n"", t.Weekday(), t)', '}', 'Output', 'on', 'day', ""I'm"", 'answering:', 'now', 'Friday', '2017', '-', '03', '-', '10', '21', ':', '33', ':', '28', '.', '395198671', '+', '0', '0', '0', '0', 'UTC', 'later', 'Wednesday', '2017', '-', '03', '-', '15', '21', ':', '33', ':', '28', '.', '395198671', '+', '0', '0', '0', '0', 'UTC']"
987,42732778,"
","['Like', 'Kenny', 'Grant', 'said,', 'you', 'might', 'want', 'to', 'ponder', 'about', 'the', 'logic.', 'Perhaps', 'this', 'is', 'what', 'you', 'meant:', '//', 'only', 'allow', 'POST', 'or', 'DELETE', 'if', 'req', '.', 'Method', '!=', 'http', '.', 'MethodPost', '&&', 'req', '.', 'Method', '!=', 'http', '.', 'MethodDelete', '{', 'http.Error(res, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)', 'return', '}']"
988,42745121,"In principle, yes it is bad, however you would need to decide whether the risks outweigh the cost in your specific case as the work required can be quite extensive.

No matter the language used employing the model 'Never trust the client' tends to provide the best security. In this model you assume all requests are malicious therefore should be validated and sanitized. This allows you to gain confidence in the data you are storing, and in principle protects against changing requirements. For example; if you are presenting this stored data back to the users then you can have some trust that nothing malicious is stored, however this should not mean output encoding is not also used.

The final point to consider is how you are accessing the DB and creating the inserts. Assuming this is a SQL DB then ensure your query uses named parameters rather than string concatenation.
","['In', 'principle,', 'yes', 'it', 'is', 'bad,', 'however', 'you', 'would', 'need', 'to', 'decide', 'whether', 'the', 'risks', 'outweigh', 'the', 'cost', 'in', 'your', 'specific', 'case', 'as', 'the', 'work', 'required', 'can', 'be', 'quite', 'extensive.', 'No', 'matter', 'the', 'language', 'used', 'employing', 'the', 'model', ""'Never"", 'trust', 'the', ""client'"", 'tends', 'to', 'provide', 'the', 'best', 'security.', 'In', 'this', 'model', 'you', 'assume', 'all', 'requests', 'are', 'malicious', 'therefore', 'should', 'be', 'validated', 'and', 'sanitized.', 'This', 'allows', 'you', 'to', 'gain', 'confidence', 'in', 'the', 'data', 'you', 'are', 'storing,', 'and', 'in', 'principle', 'protects', 'against', 'changing', 'requirements.', 'For', 'example;', 'if', 'you', 'are', 'presenting', 'this', 'stored', 'data', 'back', 'to', 'the', 'users', 'then', 'you', 'can', 'have', 'some', 'trust', 'that', 'nothing', 'malicious', 'is', 'stored,', 'however', 'this', 'should', 'not', 'mean', 'output', 'encoding', 'is', 'not', 'also', 'used.', 'The', 'final', 'point', 'to', 'consider', 'is', 'how', 'you', 'are', 'accessing', 'the', 'DB', 'and', 'creating', 'the', 'inserts.', 'Assuming', 'this', 'is', 'a', 'SQL', 'DB', 'then', 'ensure', 'your', 'query', 'uses', 'named', 'parameters', 'rather', 'than', 'string', 'concatenation.']"
989,42758241,"
","['multipart.File', 'implements', 'io.Reader', 'interface', 'so', 'you', 'could', 'copy', 'its', 'content', 'into', 'a', 'bytes.Buffer', 'like', 'this:', 'file', ',', 'header', ',', 'err', ':=', 'ctx', '.', 'Request.FormFile(""file"")', 'defer', 'file.Close()', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'buf', ':=', 'bytes.NewBuffer(nil)', 'if', '_', ',', 'err', ':=', 'io.Copy(buf, file)', ';', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'and', 'then', 'add', 'to', 'your', 'app', 'app.SetFile(buf.Bytes())']"
990,42758492,"
","['You', 'need', 'to', 'pass', 'a', 'context', 'to', 'bulkRequest.Do().', 'From', 'the', 'olivere/elastic', 'Github', 'page', '(abbreviated);', '//', 'Create', 'a', 'context', 'ctx', ':=', 'context.Background()', 'bulkRequest.Do(ctx)']"
991,42761887,"

Also you can use third party package management tools. But most of them support tags and revisions, not branches (since it is implied that you don't need to install feature branch).

gpm:


  You can specify packages with the   format, where version can be a revision number (a git/bazaar/mercurial/svn revision hash) or a tag.

","['Stable', 'HEAD', 'philosophy', 'It', 'is', 'not', 'possible', 'with', 'pure', 'go', 'get.', 'Go', 'takes', 'the', 'most', 'minimal', 'and', 'pragmatic', 'approach', 'of', 'any', 'package', 'manager.', 'There', 'is', 'no', 'such', 'thing', 'as', 'multiple', 'versions', 'of', 'a', 'Go', 'package.', 'But', 'this', 'is', 'not', 'as', 'bad', 'as', 'it', 'seems', 'at', 'the', 'first', 'view', 'because', 'there', 'exists', 'a', 'philosophy', 'behind', 'this', 'behavior.', 'As', 'a', 'package', 'author,', 'you', 'must', 'adhere', 'to', 'the', 'stable', 'HEAD', 'philosophy.', 'Your', 'default', 'branch', 'must', 'always', 'be', 'the', 'stable,', 'released', 'version', 'of', 'your', 'package.', 'You', 'must', 'do', 'work', 'in', 'feature', 'branches', 'and', 'only', 'merge', 'when', 'ready', 'to', 'release.', 'This', 'approach', 'is', 'forced', 'by', 'go', 'get', 'limitations', 'and', 'it', 'should', 'be', 'treated', 'like', 'Python', 'indentations', '-', 'it', 'is', 'kind', 'of', 'philosophy', 'forced', 'by', 'language', 'design.', 'Development', 'approaches', 'If', 'you', 'want', 'to', 'fork', 'something', 'or', 'try', 'new', 'features', 'you', 'can', 'clone', 'repo', 'then', 'switch', 'to', 'a', 'desired', 'branch', 'and', 'do', 'go', 'build.', 'This', 'way', ""shouldn't"", 'go', 'to', 'production.', 'git', 'clone', 'cd', 'git', 'checkout', 'go', 'build', 'Also', 'you', 'can', 'use', 'third', 'party', 'package', 'management', 'tools.', 'But', 'most', 'of', 'them', 'support', 'tags', 'and', 'revisions,', 'not', 'branches', '(since', 'it', 'is', 'implied', 'that', 'you', ""don't"", 'need', 'to', 'install', 'feature', 'branch).', 'gpm:', 'You', 'can', 'specify', 'packages', 'with', 'the', 'format,', 'where', 'version', 'can', 'be', 'a', 'revision', 'number', '(a', 'git/bazaar/mercurial/svn', 'revision', 'hash)', 'or', 'a', 'tag.']"
992,42766877,", but is branch or tag v3.*. 

for more details, see here
","['you', 'can', 'use', 'gopkg.in,', 'it', 'will', 'redirect', 'to', 'github.', 'There', 'are', 'two', 'URL', 'patterns', 'supported:', 'go', 'pkg', '.', 'in/pkg.v3      → github.com/go-pkg/pkg (branch/tag', 'v3', ',', 'v3', '.', 'N', ',', 'or', 'v3', '.', 'N', '.', 'M', ')', 'go', 'pkg', '.', 'in/user/pkg.v3 → github.com/user/pkg   (branch/tag', 'v3', ',', 'v3', '.', 'N', ',', 'or', 'v3', '.', 'N', '.', 'M', ')', 'go', 'get', 'go', 'pkg', '.', 'in/pkg.v3', 'means', 'go', 'get', 'github', '.', 'com/go-pkg/pkg', ',', 'but', 'is', 'branch', 'or', 'tag', 'v3.*.', 'for', 'more', 'details,', 'see', 'here']"
993,42770327,"If err implements the Error interface, then the Error() method will be invoked implicitly when using a valid format verb such as %s. The documentation for fmt has more on this.
","[',', 'but', 'is', 'branch', 'or', 'tag', 'v3.*.', 'for', 'more', 'details,', 'see', 'here']"
994,42770341,"Both versions are completely fine.

The fmt package has special support for the error interface (scroll down a couple screens from this link):


  
  If an operand implements the error interface, the Error method will be invoked to convert the object to a string, which will then be formatted as required by the verb (if any).
  


Your second version will probably run faster as it can avoid most of the special assertions the fmt package does, but the difference shouldn't be noticeable in most cases.

In general you should probably prefer the first version, which is more readable, especially with more arguments.
","['Both', 'versions', 'are', 'completely', 'fine.', 'The', 'fmt', 'package', 'has', 'special', 'support', 'for', 'the', 'error', 'interface', '(scroll', 'down', 'a', 'couple', 'screens', 'from', 'this', 'link):', 'If', 'an', 'operand', 'implements', 'the', 'error', 'interface,', 'the', 'Error', 'method', 'will', 'be', 'invoked', 'to', 'convert', 'the', 'object', 'to', 'a', 'string,', 'which', 'will', 'then', 'be', 'formatted', 'as', 'required', 'by', 'the', 'verb', '(if', 'any).', 'Your', 'second', 'version', 'will', 'probably', 'run', 'faster', 'as', 'it', 'can', 'avoid', 'most', 'of', 'the', 'special', 'assertions', 'the', 'fmt', 'package', 'does,', 'but', 'the', 'difference', ""shouldn't"", 'be', 'noticeable', 'in', 'most', 'cases.', 'In', 'general', 'you', 'should', 'probably', 'prefer', 'the', 'first', 'version,', 'which', 'is', 'more', 'readable,', 'especially', 'with', 'more', 'arguments.']"
995,42780150,"Another option would be to use Google's gopacket package which provides packets decoding for Go. In particular, the layers sub-package provides logic for decoding protocol packets, among which what is necessary to decode DNS packets.
","['Another', 'option', 'would', 'be', 'to', 'use', ""Google's"", 'gopacket', 'package', 'which', 'provides', 'packets', 'decoding', 'for', 'Go.', 'In', 'particular,', 'the', 'layers', 'sub-package', 'provides', 'logic', 'for', 'decoding', 'protocol', 'packets,', 'among', 'which', 'what', 'is', 'necessary', 'to', 'decode', 'DNS', 'packets.']"
996,42798467,"You just use net/http in most instances:


  Starting with Go 1.6, the http package has transparent support for the HTTP/2 protocol when using HTTPS.
  
  The http package's Transport and Server both automatically enable HTTP/2 support for simple configurations. To enable HTTP/2 for more complex configurations, to use lower-level HTTP/2 features, or to use a newer version of Go's http2 package, import ""golang.org/x/net/http2"" directly and use its ConfigureTransport and/or ConfigureServer functions. Manually configuring HTTP/2 via the golang.org/x/net/http2 package takes precedence over the net/http package's built-in HTTP/2 support.

","[',', 'but', 'is', 'branch', 'or', 'tag', 'v3.*.', 'for', 'more', 'details,', 'see', 'here']"
997,42842803,"
","['After', 'some', 'testing', 'I', 'manage', 'to', 'get', 'it,', 'I', 'was', 'sending', 'the', 'wrong', 'parameter', 'to', 'the', 'function', 'I', 'change', 'it', 'to', 'this', 'var', 'paramVar', 'comments', 'handleReadAll', '(', '""/getsome""', ',', 'paramVar', ')', 'func', 'handleReadAll', '(', 'getPath', 'string', ',', 'struct', 'ToDecodeArray', 'interface', '{}){', 'var', 'someVar', '=', 'reflect.ValueOf(structToDecodeArray).Interface()', '}', 'That', 'would', 'be', 'the', 'equivalent', 'variable', 'as', 'type', 'Interface', 'of', 'the', 'parameter', 'passed', 'to', 'the', 'function', 'just', 'like', 'having', 'var', 'someVar', 'comments']"
998,42881490,"The docs for the fmt package have this to say:


  Except when printed using the verbs %T and %p, special formatting
  considerations apply for operands that implement certain interfaces.
  In order of application:
  
  ...
  
  If the format (which is implicitly %v for Println etc.) is valid for a
  string (%s %q %v %x %X), the following two rules apply:
  
  
  If an operand implements the error interface, the Error method will be invoked to convert the object to a string, which will then be
  formatted as required by the verb (if any).
  If an operand implements method String() string, that method will be invoked to convert the object to a string, which will then be
  formatted as required by the verb (if any).
  


In other words, fmt.Println will attempt to print the string representation of the interface. Since the error interface is satisfied by binFunc, it invokes the Error method of binFunc.
",[]
999,43040753,"There are several things to be aware of when using depends_on:


depends_on will not wait for db and redis to be “ready” before starting web - only until they have been started. If you need to wait for a service to be ready, see Controlling startup order for more on this problem and strategies for solving it.


Version 3 no longer supports the condition form of depends_on.

The depends_on option is ignored when deploying a stack in swarm mode with a version 3 Compose file.

","['There', 'are', 'several', 'things', 'to', 'be', 'aware', 'of', 'when', 'using', 'depends_on:', 'depends_on', 'will', 'not', 'wait', 'for', 'db', 'and', 'redis', 'to', 'be', '“ready”', 'before', 'starting', 'web', '-', 'only', 'until', 'they', 'have', 'been', 'started.', 'If', 'you', 'need', 'to', 'wait', 'for', 'a', 'service', 'to', 'be', 'ready,', 'see', 'Controlling', 'startup', 'order', 'for', 'more', 'on', 'this', 'problem', 'and', 'strategies', 'for', 'solving', 'it.', 'Version', '3', 'no', 'longer', 'supports', 'the', 'condition', 'form', 'of', 'depends_on.', 'The', 'depends_on', 'option', 'is', 'ignored', 'when', 'deploying', 'a', 'stack', 'in', 'swarm', 'mode', 'with', 'a', 'version', '3', 'Compose', 'file.']"
1000,43042558,"

Before this I wrote it dbfirst. and do not forget to change the host to appropriate name just like in the docker-compose.yml file. In this case is redis = redis and mongodb = db.

I forget that in app.go I call redis first then mongodb.
","['This', 'is', 'stupid', 'I', 'wrote', 'the', 'depends_on', 'not', 'in', 'order', 'I', 'fix', 'the', 'issue', 'writing', 'the', 'order', 'like', 'this', ':', 'depends_on', ':', '-', 'redis', '-', 'db', 'Before', 'this', 'I', 'wrote', 'it', 'dbfirst.', 'and', 'do', 'not', 'forget', 'to', 'change', 'the', 'host', 'to', 'appropriate', 'name', 'just', 'like', 'in', 'the', 'docker-compose.yml', 'file.', 'In', 'this', 'case', 'is', 'redis', '=', 'redis', 'and', 'mongodb', '=', 'db.', 'I', 'forget', 'that', 'in', 'app.go', 'I', 'call', 'redis', 'first', 'then', 'mongodb.']"
1001,43080367,"Disclaimer: Unrelated to map[string]int but related to testing the equivalence of maps in Go, which is the title of the question

If you have a map of a pointer type (like map[*string]int), then you do not want to use reflect.DeepEqual because it will return false.

Finally, if the key is a type that contains an unexported pointer, like time.Time, then reflect.DeepEqual on such a map can also return false.
","['Before', 'this', 'I', 'wrote', 'it', 'dbfirst.', 'and', 'do', 'not', 'forget', 'to', 'change', 'the', 'host', 'to', 'appropriate', 'name', 'just', 'like', 'in', 'the', 'docker-compose.yml', 'file.', 'In', 'this', 'case', 'is', 'redis', '=', 'redis', 'and', 'mongodb', '=', 'db.', 'I', 'forget', 'that', 'in', 'app.go', 'I', 'call', 'redis', 'first', 'then', 'mongodb.']"
1002,43107783,"I have solved this problem, because different postfix may have different fdm, though I have set fdm=syntax in .vimrc
","['I', 'have', 'solved', 'this', 'problem,', 'because', 'different', 'postfix', 'may', 'have', 'different', 'fdm,', 'though', 'I', 'have', 'set', 'fdm=syntax', 'in', '.vimrc']"
1003,43188798,"
","['I', 'found', 'easier', 'to', 'do', 'it', 'like', 'this:', 'export', 'GOROOT', '=$', 'HOME/go', 'export', 'GOPATH', '=$', 'GOROOT/bin', 'export', 'PATH', '=$', 'PATH', ':$', 'GOPATH']"
1004,43289614,"

Now I'm not famailar with your driver, but it should be the same, in that you pass a reference to a struct or interface with your query and it looks the data into that reference.  You don't normally have to unmarshall in the struct after the query.
","['I', 'think', 'it', 'might', 'be', 'the', 'way', 'you', 'are', 'defining', 'your', 'structs.', 'Given', 'the', 'json', 'you', 'provided', '{', 'Source', ':', '{', 'ID', ':', 'string', ',', 'subId', ':', 'string', ',', 'Campaigns', ':[]{', 'CampaignID', ':', 'string', ',', 'Status', ':', 'string', '}}}', 'your', 'struct', 'should', 'look', 'like', 'something', 'close', 'to', 'whats', 'below.', 'type', 'object', 'struct', '{', 'Source', 'struct', '{', 'ID', 'string', 'db', ':', '""id""', 'SubId', 'string', 'db', ':', '""sub_id""', 'Campaigns', '[]', 'compaign', 'db', ':', '""compaigns""', '}', 'json', ':', '""source""', '}', 'type', 'compaign', 'struct', '{', 'CampaignID', 'string', 'db', ':', '""compaign_id""', 'Status', 'string', 'db', ':', '""status""', '}', 'Given', 'the', 'comments', 'below.', 'Try', 'obj', ':=', 'make', '(', 'map', '[', 'string', ']', 'interaface', '{})', 'instead', 'of', 'the', 'defining', 'a', 'struct.', 'Also', 'taking', 'a', 'look', 'at', 'https://github.com/jmoiron/sqlx', 'the', 'struct', 'should', 'be', 'using', 'the', 'db', 'flag', 'instead', 'of', 'json,', 'so', 'I', 'changed', 'it.', 'You', ""shouldn't"", 'have', 'to', 'marshal', 'the', 'data', 'example', 'db.Select(&people, ""SELECT * FROM person ORDER BY first_name ASC"")', 'Where', '&people', 'is', 'a', 'reference', 'to', 'a', 'struct.', 'E.g', 'var', 'people', 'PeopleStruct', 'Now', ""I'm"", 'not', 'famailar', 'with', 'your', 'driver,', 'but', 'it', 'should', 'be', 'the', 'same,', 'in', 'that', 'you', 'pass', 'a', 'reference', 'to', 'a', 'struct', 'or', 'interface', 'with', 'your', 'query', 'and', 'it', 'looks', 'the', 'data', 'into', 'that', 'reference.', 'You', ""don't"", 'normally', 'have', 'to', 'unmarshall', 'in', 'the', 'struct', 'after', 'the', 'query.']"
1005,43398959,"I found out the legacy system I'm working with was using an ASP.Net library called ServiceStack to serialize/deserialize my sphinx db, and it was using it's own custom JSV format, which the author of ServiceStack say as an optimized mix of JSON and CSV, but hasn't been adopted anywhere else as far as I can tell.  

So it looks like I'm going to either rewrite that library in Go, or more likely change the indexing algorithm to use JSON.
","['I', 'found', 'out', 'the', 'legacy', 'system', ""I'm"", 'working', 'with', 'was', 'using', 'an', 'ASP.Net', 'library', 'called', 'ServiceStack', 'to', 'serialize/deserialize', 'my', 'sphinx', 'db,', 'and', 'it', 'was', 'using', ""it's"", 'own', 'custom', 'JSV', 'format,', 'which', 'the', 'author', 'of', 'ServiceStack', 'say', 'as', 'an', 'optimized', 'mix', 'of', 'JSON', 'and', 'CSV,', 'but', ""hasn't"", 'been', 'adopted', 'anywhere', 'else', 'as', 'far', 'as', 'I', 'can', 'tell.', 'So', 'it', 'looks', 'like', ""I'm"", 'going', 'to', 'either', 'rewrite', 'that', 'library', 'in', 'Go,', 'or', 'more', 'likely', 'change', 'the', 'indexing', 'algorithm', 'to', 'use', 'JSON.']"
1006,43408894,"

Embedding


  Including an anonymous field in a struct is known as embedding. In this case the Discount type is embedded in the PremiumDiscount type. All the methods of Discount are instantly available on the PremiumDiscount type. Furthermore those same methods can be hidden


It is possible to embed interface to struct to extend it's behavior or to be more specific - declare abstract dependency.
","['Abstract', 'function', 'type', 'You', 'can', 'do', 'it', 'with', 'dependency', 'injection', 'not', 'using', 'interfaces:', 'import', '(', '""fmt""', '""math""', ')', 'type', 'a', 'func', '(', 'float64', ')', 'float64', 'func', 'A', '(', 'arg', 'float64', ')', 'float64', '{', 'return', 'math.Pow(arg, 2)', '}', 'func', 'mock', '(', 'arg', 'float64', ')', 'float64', '{', 'return', 'math.Sqrt(arg)', '}', 'func', 'b', '(', 'func', 'tion', 'a', ',', 'arg', 'float64', ')', 'float64', '{', 'return', 'func', 'tion', '(', 'arg', ')', '}', 'func', 'main', '()', '{', 'fmt.Println(b(A, 2))', 'fmt.Println(b(mock, 2))', '}', 'Function', 'is', 'first', 'class', 'citizen', 'in', 'Go', 'In', 'programming', 'language', 'design,', 'a', 'first-class', 'citizen', '(also', 'type,', 'object,', 'entity,', 'or', 'value)', 'in', 'a', 'given', 'programming', 'language', 'is', 'an', 'entity', 'which', 'supports', 'all', 'the', 'operations', 'generally', 'available', 'to', 'other', 'entities.', 'It', 'means', 'you', 'can', 'pass', 'function', 'as', 'argument', 'among', 'other', 'possibilities.', 'And', 'of', 'course', 'you', 'can', 'declare', 'an', 'abstract', 'type', 'based', 'on', 'function', 'with', 'concrete', 'interface', ""(Don't"", 'confuse', 'with', 'interface', 'type)', 'Interface', 'approach', 'You', 'can', 'make', 'compositions', 'using', 'your', 'functions', 'import', '(', '""fmt""', '""math""', ')', '//', 'Declare', 'an', 'interface', 'type', 'with', 'dependencies', 'type', 'HGer', 'interface', '{', 'H', '(', 'float64', ')', 'float64', 'G', '(', 'float64', ')', 'float64', '}', '//', 'Declare', 'a', 'dependent', 'type', 'with', 'embedded', 'interface', 'type', 'Dependent', 'struct', '{', 'HGer', '}', 'func', '(', 'd', '*', 'Dependent', ')', 'B', '(', 'arg', 'float64', ')', 'float64', '{', 'return', 'd.H(arg) * d.G(arg)', '}', '//', 'Implement', 'the', 'interface', 'for', 'an', 'actual', 'program', 'type', 'ImplHGer', 'struct', '{}', 'func', '(', 'i', '*', 'ImplHGer', ')', 'H', '(', 'arg', 'float64', ')', 'float64', '{', 'return', 'math.Pow(arg, 2)', '}', 'func', '(', 'i', '*', 'ImplHGer', ')', 'G', '(', 'arg', 'float64', ')', 'float64', '{', 'return', 'math.Sqrt(arg)', '}', '//', 'Implement', 'the', 'interface', 'for', 'mock', 'of', 'dependencies', 'type', 'MockHGer', 'struct', '{}', 'func', '(', 'i', '*', 'MockHGer', ')', 'H', '(', 'arg', 'float64', ')', 'float64', '{', 'return', 'float64', '(', '0', ')', '}', 'func', '(', 'i', '*', 'MockHGer', ')', 'G', '(', 'arg', 'float64', ')', 'float64', '{', 'return', 'float64', '(', '0', ')', '}', 'func', 'main', '()', '{', '//', 'Use', 'real', 'implementation', 'a', ':=', 'Dependent', '{', 'new', '(', 'ImplHGer', ')}', '//', 'Use', 'the', 'mock', 'b', ':=', 'Dependent', '{', 'new', '(', 'MockHGer', ')}', 'fmt.Println(a.B(8))', '// 181.01933598375618', 'fmt.Println(b.B(8))', '// 0', '}', 'Embedding', 'Including', 'an', 'anonymous', 'field', 'in', 'a', 'struct', 'is', 'known', 'as', 'embedding.', 'In', 'this', 'case', 'the', 'Discount', 'type', 'is', 'embedded', 'in', 'the', 'PremiumDiscount', 'type.', 'All', 'the', 'methods', 'of', 'Discount', 'are', 'instantly', 'available', 'on', 'the', 'PremiumDiscount', 'type.', 'Furthermore', 'those', 'same', 'methods', 'can', 'be', 'hidden', 'It', 'is', 'possible', 'to', 'embed', 'interface', 'to', 'struct', 'to', 'extend', ""it's"", 'behavior', 'or', 'to', 'be', 'more', 'specific', '-', 'declare', 'abstract', 'dependency.']"
1007,43425461," in this case). In my example I simply passed it to panic() because http.LitenAndServe() and http.Serve() block if everything goes well (so they only return if there's an error, which I pass to panic()).
","['You', 'may', 'use', 'port', '0', 'to', 'indicate', ""you're"", 'not', 'specifying', 'an', 'exact', 'port', 'but', 'you', 'want', 'a', 'free,', 'available', 'port', 'selected', 'by', 'the', 'system:', 'http.ListenAndServe("":0"", nil)', 'The', 'problem', 'with', 'this', 'is', 'that', 'you', ""won't"", 'be', 'able', 'to', 'find', 'out', 'what', 'port', 'was', 'assigned.', 'So', 'you', 'need', 'to', 'create', 'the', 'net.Listener', 'yourself', '(using', 'the', 'net.Listen()', 'function),', 'and', 'manually', 'pass', 'it', 'to', 'http.Serve():', 'listener', ',', 'err', ':=', 'net.Listen(""tcp"", "":0"")', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'fmt.Println(""Using port:"", listener.Addr().(*net.TCPAddr).Port)', 'panic', '(', 'http.Serve(listener, nil))', 'Example', 'output:', 'Using', 'port:', '42039', 'As', 'you', 'can', 'see,', 'you', 'can', 'access', 'the', 'assigned', 'port', 'from', 'the', 'net.Listener,', 'from', 'its', 'net.Addr', 'address', '(acquired', 'by', 'its', 'Addr()', 'method).', 'net.Addr', 'does', 'not', 'directly', 'give', 'access', 'to', 'the', 'port,', 'but', 'since', 'we', 'created', 'the', 'net.Listener', 'using', 'tcp', 'network', 'stream,', 'the', 'net.Addr', 'will', 'be', 'of', 'dynamic', 'type', '*net.TCPAddr', '(which', 'we', 'can', 'acquire', 'with', 'a', 'type', 'assertion),', 'which', 'is', 'a', 'struct', 'and', 'has', 'a', 'field', 'Port', 'int.', 'Note', 'that', 'if', 'you', ""don't"", 'need', 'the', 'port', 'in', 'your', 'application', '(e.g.', 'you', 'just', 'want', 'to', 'display', 'it', 'for', 'yourself),', 'you', ""don't"", 'need', 'the', 'type', 'assertion,', 'you', 'can', 'just', 'print', 'listener.Addr()', '(which', 'will', 'contain', 'the', 'port', 'at', 'the', 'end):', 'fmt.Println(""Address:"", listener.Addr())', 'Example', 'output:', 'Address:', '[::]:42039', 'Also', ""don't"", 'forget', 'to', 'handle', 'returned', 'errors', '(', 'http.ListenAndServe()', 'in', 'this', 'case).', 'In', 'my', 'example', 'I', 'simply', 'passed', 'it', 'to', 'panic()', 'because', 'http.LitenAndServe()', 'and', 'http.Serve()', 'block', 'if', 'everything', 'goes', 'well', '(so', 'they', 'only', 'return', 'if', ""there's"", 'an', 'error,', 'which', 'I', 'pass', 'to', 'panic()).']"
1008,43425767,"

in your template file:



","['To', 'serve', 'files', 'via', 'http,', 'define', 'a', 'FileServer', 'for', 'a', 'directory', 'and', 'route', 'it', 'to,', 'for', 'example,', '""/assets/""', 'using', 'http.Handle.', 'Following', 'setup', 'should', 'work', 'for', 'you:', 'directory', 'structure:', 'assets', '/', 'js', 'css', 'templates', '/', 'main', '.', 'go', 'main.go', 'func', 'main', '()', '{', 'http.HandleFunc(""/"", rootHandler)', 'http.Handle(""/assets/"", http.StripPrefix(""/assets/"", http.FileServer(http.Dir(""assets""))))', 'http.ListenAndServe("":8080"", nil)', '}', 'func', 'rootHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'http.ServeFile(w, r, ""templates/index.html"")', '}', 'in', 'your', 'template', 'file:']"
1009,43430711," (which is a representation of the utf-8 string Hello, 世界) is a valid UTF-8 sequence.
While utf8.Valid accepts only array of bytes (there is no overloading in Go, so the ""only"" part is actually irrelevant), there are a few similar functions to check for validness: utf8.ValidRune and utf8.ValidString


I recommend reading an awesome article on the Go blog: Strings, bytes, runes and characters in Go, I believe after reading it and experimenting a bit you'll get answers to most of your utf8-related questions about Go.
","['rune', 'is', 'an', 'alias', 'for', 'the', 'type', 'int32.', 'It', 'is', 'intended', 'to', 'make', 'programs', 'clear', 'about', 'the', 'cases', 'when', 'an', 'integer', 'value', 'represents', 'a', 'code', 'point.', 'Because', 'the', 'sequence', 'of', 'bytes', '0x48', ',', '0x65', ',', '0x6c', ',', '0x6c', ',', '0x6f', ',', '0x2c', ',', '0x2', '0', ',', '0xe4', ',', '0xb8', ',', '0x96', ',', '0xe7', ',', '0x95', ',', '0x8c', '(which', 'is', 'a', 'representation', 'of', 'the', 'utf-8', 'string', 'Hello,', '世界)', 'is', 'a', 'valid', 'UTF-8', 'sequence.', 'While', 'utf8.Valid', 'accepts', 'only', 'array', 'of', 'bytes', '(there', 'is', 'no', 'overloading', 'in', 'Go,', 'so', 'the', '""only""', 'part', 'is', 'actually', 'irrelevant),', 'there', 'are', 'a', 'few', 'similar', 'functions', 'to', 'check', 'for', 'validness:', 'utf8.ValidRune', 'and', 'utf8.ValidString', 'I', 'recommend', 'reading', 'an', 'awesome', 'article', 'on', 'the', 'Go', 'blog:', 'Strings,', 'bytes,', 'runes', 'and', 'characters', 'in', 'Go,', 'I', 'believe', 'after', 'reading', 'it', 'and', 'experimenting', 'a', 'bit', ""you'll"", 'get', 'answers', 'to', 'most', 'of', 'your', 'utf8-related', 'questions', 'about', 'Go.']"
1010,43437945,"Why not use the built-in gob package to store your struct values?  

I use it to store different structures, one per line, in files.  During decoding, you can test the type conversion or provide a hint in a wrapper - whichever is faster for your given use case.

You'd treat each line as a buffer when Encoding and Decoding when reading back the line. You can even gzip/zlib/compress, encrypt/decrypt, etc the stream in real-time. 

No point in re-inventing the wheel when you have a polished and armorall'd wheel already at your disposal.
","['(which', 'is', 'a', 'representation', 'of', 'the', 'utf-8', 'string', 'Hello,', '世界)', 'is', 'a', 'valid', 'UTF-8', 'sequence.', 'While', 'utf8.Valid', 'accepts', 'only', 'array', 'of', 'bytes', '(there', 'is', 'no', 'overloading', 'in', 'Go,', 'so', 'the', '""only""', 'part', 'is', 'actually', 'irrelevant),', 'there', 'are', 'a', 'few', 'similar', 'functions', 'to', 'check', 'for', 'validness:', 'utf8.ValidRune', 'and', 'utf8.ValidString', 'I', 'recommend', 'reading', 'an', 'awesome', 'article', 'on', 'the', 'Go', 'blog:', 'Strings,', 'bytes,', 'runes', 'and', 'characters', 'in', 'Go,', 'I', 'believe', 'after', 'reading', 'it', 'and', 'experimenting', 'a', 'bit', ""you'll"", 'get', 'answers', 'to', 'most', 'of', 'your', 'utf8-related', 'questions', 'about', 'Go.']"
1011,43438265,"

Playground: https://play.golang.org/p/KQF3CicVzA
","['Instead', 'of', 'using', 'the', 'Bytes', 'method', 'on', 'reflect.Value', 'which', 'does', 'not', 'work', 'as', 'you', 'initially', 'intended,', 'you', 'can', 'use', 'either', 'the', 'strconv', 'package', 'or', 'the', 'fmt', 'to', 'format', 'you', 'fields.', ""Here's"", 'an', 'example', 'using', 'fmt:', 'var', 's', 'string', 'switch', 'fi.Kind()', '{', 'case', 'reflect', '.', 'String', ':', 's', '=', 'fmt.Sprintf(""%q"", fi.String())', 'case', 'reflect', '.', 'Int', ':', 's', '=', 'fmt.Sprintf(""%d"", fi.Int())', 'case', 'reflect', '.', 'Slice', ':', 'if', 'fi.Type().Elem().Kind()', '!=', 'reflect', '.', 'String', '{', 'continue', '}', 's', '=', '""[""', 'for', 'j', ':=', '0', ';', 'j', '<', 'fi.Len()', ';', 'j', '++', '{', 's', '=', 'fmt.Sprintf(""%s%q, "", s, fi.Index(i).String())', '}', 's', '=', 'strings.TrimRight(s, "", "")', '+', '""]""', 'default', ':', 'continue', '}', 'sf', ':=', 'rv.Type().Field(i)', 'if', '_', ',', 'err', ':=', 'fmt.Fprintf(file, ""%s=%s\\n"", sf.Name, s)', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'Playground:', 'https://play.golang.org/p/KQF3CicVzA']"
1012,43449991,"
","['This', 'is', 'how', 'I', 'did', 'it:', 'package', 'main', 'import', '(', '""fmt""', '""os""', '""bytes""', ')', 'fun', 'main', '()', '{', 'filerc', ',', 'err', ':=', 'os.Open(""filename"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'defer', 'filerc.Close()', 'buf', ':=', 'new', '(', 'bytes', '.', 'Buffer', ')', 'buf.ReadFrom(filerc)', 'contents', ':=', 'buf.String()', 'fmt.Print(contents)', '}']"
1013,43459325,"

You can then delete your fork from your GitHub account. After which, go get -u will function as normal.

Any time you need to make new changes to the package, you can repeat this process.
","['Fork', 'the', 'repo', 'in', 'GitHub,', 'then', 'add', 'your', 'fork', 'as', 'a', 'remote', 'in', 'your', 'working', 'copy', 'under', 'a', 'name', 'other', 'than', 'origin,', 'e.g.', 'git', 'remote', 'add', 'myfork', 'git', 'github', '.', 'org', '...', '.', 'You', 'can', 'push', 'your', 'changes', 'to', 'your', 'fork', '(git', 'push', 'myfork),', 'then', 'open', 'a', 'PR', 'from', 'your', 'fork', 'to', 'the', 'original.', 'Explicitly,', 'the', 'commands', 'would', 'something', 'like', 'this', 'after', 'you', 'fork', 'the', 'original', 'to', 'your', 'own', 'account:', 'git', 'remote', 'add', 'myfork', 'https', '://', 'github', '.', 'com//.git', 'git', 'push', 'myfork', 'After', 'which,', 'you', 'can', 'submit', 'the', 'PR', 'to', 'the', 'original.', 'If', 'your', 'PR', 'is', 'accepted,', 'you', 'can', 'then', 'run', 'these', 'commands:', 'git', 'remote', 'remove', 'myfork', 'git', 'rebase', 'master', 'git', 'pull', 'origin', 'master', 'You', 'can', 'then', 'delete', 'your', 'fork', 'from', 'your', 'GitHub', 'account.', 'After', 'which,', 'go', 'get', '-u', 'will', 'function', 'as', 'normal.', 'Any', 'time', 'you', 'need', 'to', 'make', 'new', 'changes', 'to', 'the', 'package,', 'you', 'can', 'repeat', 'this', 'process.']"
1014,43459894,"In the code given, you're only synchronizing your writes, not your reads; that means you still might read from the map while you're writing to it, which would be a race condition.

To make it thread-safe, you need to wrap both reads and writes in a concurrency structure - either using channels or a mutex - in order to ensure that only one thread is accessing it at any given time if it is a write operation. Multiple threads can safely read at the same time, as long as no thread is writing to it. RWMutex provides this functionality explicitly.
","['You', 'can', 'then', 'delete', 'your', 'fork', 'from', 'your', 'GitHub', 'account.', 'After', 'which,', 'go', 'get', '-u', 'will', 'function', 'as', 'normal.', 'Any', 'time', 'you', 'need', 'to', 'make', 'new', 'changes', 'to', 'the', 'package,', 'you', 'can', 'repeat', 'this', 'process.']"
1015,43485517,"You use os.TempDir() for that.
","['You', 'can', 'then', 'delete', 'your', 'fork', 'from', 'your', 'GitHub', 'account.', 'After', 'which,', 'go', 'get', '-u', 'will', 'function', 'as', 'normal.', 'Any', 'time', 'you', 'need', 'to', 'make', 'new', 'changes', 'to', 'the', 'package,', 'you', 'can', 'repeat', 'this', 'process.']"
1016,43549158,".
","['Go', ""won't"", 'interpret', '$HOME.', 'Use', 'an', 'explicit', 'path', 'such', 'as', '/home/username/Documents/TEST/Login/', '.']"
1017,43602060,"

this will fix the second program.

I think you have misleading about golang interface type


  An interface type specifies a method set called its interface. A variable of interface type can store a value of any type with a method set that is any superset of the interface. Such a type is said to implement the interface.

","['func', 'invokeHello', '(', 'p', '*', 'Person', ')', '{', 'p.Hello()', '}', 'p', 'is', 'type', '*Person,', '*Joker', 'implement', 'interface', 'Person,', 'revert', 'invokeHello', 'to:', 'func', 'invokeHello', '(', 'p', 'Person', ')', '{', 'p.Hello()', '}', 'this', 'will', 'fix', 'the', 'second', 'program.', 'I', 'think', 'you', 'have', 'misleading', 'about', 'golang', 'interface', 'type', 'An', 'interface', 'type', 'specifies', 'a', 'method', 'set', 'called', 'its', 'interface.', 'A', 'variable', 'of', 'interface', 'type', 'can', 'store', 'a', 'value', 'of', 'any', 'type', 'with', 'a', 'method', 'set', 'that', 'is', 'any', 'superset', 'of', 'the', 'interface.', 'Such', 'a', 'type', 'is', 'said', 'to', 'implement', 'the', 'interface.']"
1018,43605883,"

Otherwise if you want to receive a value of a type, implement the interface with value receiver, like you did in a first example.
","['Fix', 'You', ""can't"", 'use', 'pointers', 'to', 'interface', 'type.', 'That', 'is', 'the', 'problem:', 'func', 'invokeHello', '(', 'p', '*', 'Person', ')', '{', 'p.Hello()', '}', 'Should', 'be:', 'func', 'invokeHello', '(', 'p', 'Person', ')', '{', 'p.Hello()', '}', 'Interface', 'implementation', 'Types', 'implement', 'interfaces.', 'If', 'type', 'has', 'methods', 'appropriate', 'to', 'a', 'methods', 'declared', 'in', 'an', 'interface', 'than', 'the', 'interface', 'is', 'implemented', 'by', 'the', 'type.', 'Interfaces', 'in', 'Go', 'provide', 'a', 'way', 'to', 'specify', 'the', 'behavior', 'of', 'an', 'object:', 'if', 'something', 'can', 'do', 'this,', 'then', 'it', 'can', 'be', 'used', 'here.', 'Types', 'vs', 'pointers', 'to', 'a', 'types', 'Type', 'and', '*Type', 'are', 'different', 'types.', 'For', 'example', '*Type', 'could', 'implement', 'an', 'interface', 'but', 'Type', 'can', 'not', 'implement', 'it.', 'But', '*InterfaceType', 'really', 'has', 'no', 'sence', 'to', 'use.', 'If', 'you', 'want', 'to', 'receive', 'pointer', 'to', 'a', 'type', 'in', 'a', 'function', 'which', 'expects', 'an', 'interface', 'type,', 'implement', 'the', 'interface', 'with', 'pointer', 'receiver,', 'like', 'you', 'did', 'in', 'a', 'second', 'example.', 'Example:', 'type', 'Person', 'interface', '{', 'Hello', '()', '}', 'type', 'Joker', 'struct', '{', 'Name', 'string', '}', '/*', 'A', 'Hello', 'method', 'declared', 'with', 'a', 'pointer', 'receiver', 'which', 'means', 'that', 'a', 'pointer', 'to', 'the', 'Joker', 'type', '(*', 'Joker', ')', 'not', 'Joker', 'type', 'itself', 'implements', 'Person', 'interface', '.', '*/', 'func', '(', 'j', '*', 'Joker', ')', 'Hello', '()', '{', 'fmt.Println(j.Name, ""says, \\""Hello!\\"""")', '}', '/*', 'invokeHello', 'receives', 'ANY', 'type', 'which', 'statisfies', 'Person', 'interface', '.', 'In', 'this', 'case', 'this', 'is', 'pointer', 'to', 'Joker', 'type', '.', '*/', 'func', 'invokeHello', '(', 'p', 'Person', ')', '{', 'p.Hello()', '}', 'func', 'main', '()', '{', 'i', ':=', 'Joker', '{', '""Peter""', '}', 'j', ':=', '&', 'i', '//', 'Note', 'difference', 'between', 'types', 'fmt', '.', 'Printf', '(', '""Joker type: %s\\nPointer to Joker type: %s\\n""', ',', 'reflect.TypeOf(i), reflect.TypeOf(j))', 'invokeHello', '(', 'j', ')', '}', 'Otherwise', 'if', 'you', 'want', 'to', 'receive', 'a', 'value', 'of', 'a', 'type,', 'implement', 'the', 'interface', 'with', 'value', 'receiver,', 'like', 'you', 'did', 'in', 'a', 'first', 'example.']"
1019,43607941,"

Output (try it on the Go Playground):

&{text:lalala}

","[""Don't"", 'use', 'pointer', 'to', 'interface,', 'only', 'a', 'slice', 'of', 'interfaces:', 'content', '[]', 'DocumentItem', 'If', 'the', 'dynamic', 'value', 'wrapped', 'in', 'the', 'interface', 'value', 'is', 'a', 'pointer,', 'you', 'lose', 'nothing,', 'you', 'will', 'be', 'able', 'to', 'modify', 'the', 'pointed', 'object.', 'This', 'was', 'the', 'only', 'thing', 'that', 'had', 'to', 'be', 'changed.', 'To', 'verify,', 'I', 'added', 'printing', 'at', 'the', 'end:', 'fmt.Printf(""%+v"", p)', 'Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):', '&{text:lalala}']"
1020,43681742,"I found solution, it's because my field en began by a lower case. If i change en by En and translatedName by TranslatedName, it's work.
Here a more details answer
","['Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):', '&{text:lalala}']"
1021,43696135,"
","['r.HandleFunc(""/todo/{id}"", redisHandler.api.GetTodoHandler).Methods(""GET"")', 'Your', 'redisHandler,', 'as', 'defined', 'in', 'main,', 'has', 'no', 'api', 'field,', 'so', 'this', 'naturally', ""doesn't"", 'compile.', 'If', 'you', 're-defined', 'your', 'RedisInstance', 'type', 'in', 'the', 'api', 'package,', 'and', 'you', 'defined', 'the', 'handler', 'methods', 'on', 'that', 'type', 'in', 'the', 'method-specific', 'files,', 'then', 'you', 'can', 'initialize', 'your', 'redisHandler', 'using', 'that', 'api.RedisInstance', 'type', 'and', 'you', 'can', 'delete', 'the', 'main.RedisInstance', 'type', 'definition:', 'package', 'main', 'import', '(', '""github.com/gorilla/mux""', '""github.com/go-redis/redis""', '""net/http""', '""fmt""', '""log""', '""encoding/json""', '""io/ioutil""', '""../redismanager""', '""../api""', ')', 'func', 'main', '()', '{', '//', 'Initialize', 'Redis', 'Client', 'client', ':=', 'redismanager.InitRedisClient()', '//', 'Get', 'current', 'redis', 'instance', 'to', 'get', 'passed', 'to', 'different', 'Gorilla-Mux', 'Handlers', 'redisHandler', ':=', '&', 'api', '.', 'RedisInstance', '{', 'RInstance', ':&', 'client', '}', '//', 'Initialize', 'Router', 'Handlers', 'r', ':=', 'mux.NewRouter()', 'r.HandleFunc(""/todo"", redisHandler.AddTodoHandler).Methods(""POST"")', 'r.HandleFunc(""/todo/{id}"", redisHandler.GetTodoHandler).Methods(""GET"")', 'fmt.Println(""Listening on port :8000 . . ."")', '//', 'Bind', 'to', 'a', 'port', 'and', 'pass', 'our', 'router', 'in', 'log.Fatal(http.ListenAndServe("":8000"", r))', '}']"
1022,43696494,"

where client is the Redis instance.
","['Write', 'a', 'function', 'that', 'converts', 'a', 'function', 'with', 'the', 'Redis', 'instance', 'argument', 'to', 'an', 'HTTP', 'handler:', 'func', 'redisHandler', '(', 'c', '*', 'RedisInstance', ',', 'f', 'func', '(', 'c', '*', 'RedisInstance', ',', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', '))', 'http', '.', 'Handler', '{', 'return', 'http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { f(c, w, r) })', '}', 'Write', 'your', 'API', 'handlers', 'like', 'this:', 'func', 'AddTodoHandler', '(', 'c', '*', 'RedisInstance', ',', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', '...', '}', 'Add', 'to', 'the', 'mux', 'like', 'this:', 'r.Handler(""/todo"", redisHandler(client, api.AddTodoHandler)).Methods(""POST"")', 'where', 'client', 'is', 'the', 'Redis', 'instance.']"
1023,43779544,"
Go to ezwinports, https://sourceforge.net/projects/ezwinports/files/
Download make-4.2.1-without-guile-w32-bin.zip (get the version
without guile) 
Extract zip 
Copy the contents to C:\ProgramFiles\Git\mingw64\ merging the folders, but do NOT overwrite/replace any exisiting files.

","['Go', 'to', 'ezwinports,', 'https://sourceforge.net/projects/ezwinports/files/', 'Download', 'make-4.2.1-without-guile-w32-bin.zip', '(get', 'the', 'version', 'without', 'guile)', 'Extract', 'zip', 'Copy', 'the', 'contents', 'to', 'C:\\ProgramFiles\\Git\\mingw64\\', 'merging', 'the', 'folders,', 'but', 'do', 'NOT', 'overwrite/replace', 'any', 'exisiting', 'files.']"
1024,43852617,"In Go, a string is a fixed-length struct containing a length and a pointer to a byte array.

So var a [2]string allocates an array with space for two such structs.

a[0] = ""Hello"" allocates another array to store ""Hello"", and puts a pointer to this, and a length into a[0].
","['where', 'client', 'is', 'the', 'Redis', 'instance.']"
1025,43852653,"Strings are like read-only slices of bytes. So the reason this code works is because the array need only allocate space for a pointer and some metadata (the length of the string).

See the section on Strings here (at the bottom):

https://blog.golang.org/slices
","['Strings', 'are', 'like', 'read-only', 'slices', 'of', 'bytes.', 'So', 'the', 'reason', 'this', 'code', 'works', 'is', 'because', 'the', 'array', 'need', 'only', 'allocate', 'space', 'for', 'a', 'pointer', 'and', 'some', 'metadata', '(the', 'length', 'of', 'the', 'string).', 'See', 'the', 'section', 'on', 'Strings', 'here', '(at', 'the', 'bottom):', 'https://blog.golang.org/slices']"
1026,43854626," that would work as well.

https://play.golang.org/p/jifZZvoBVZ
","['The', 'default', 'value', 'for', 'a', 'bool', 'is', 'false.', 'If', 'you', 'notice', 'that', 'you', 'are', 'overwriting', 'the', 'options', 'value', 'to', 'true', 'every', 'time', 'you', 'run', 'the', 'code.', 'The', 'default', 'values', 'of', 'a', 'strings', 'variable', 'is', '"""".', 'So', 'if', 'check', 'the', 'string', 'with', 'len', '(', 'opts', '.', 'StringOption', ')', '==', '0', 'or', 'opts', '.', 'StringOption', '==', '""""', 'that', 'would', 'work', 'as', 'well.', 'https://play.golang.org/p/jifZZvoBVZ']"
1027,43856941,"



A bit simpler would be to make the BoolOption into notBoolOption, and have the default be false.



Or, as Olivia Ruth points out, if you have the field as a pointer to a boolean, it will be remain nil until ""initialized"".
","['For', 'detecting', 'uninitialized', 'struct', 'fields,', 'as', 'a', 'rule', 'certain', 'types', 'have', 'zero', 'values,', 'they', 'are', 'otherwise', 'nil', '(maps', 'and', 'channels', 'need', 'to', 'be', 'maked):', 'var', 'i', 'int', '// i = 0', 'var', 'f', 'float64', '// f = 0', 'var', 'b', 'bool', '// b = false', 'var', 's', 'string', '// s = """"', 'var', 'm', 'chan', 'int//', 'c', '=', 'nil', 'There', 'is', 'a', 'tour', 'slide', 'which', 'is', 'useful.', 'I', 'think', ""you're"", 'problem', 'involves', 'creating', 'a', 'default', 'boolean', 'value', 'of', 'true', 'For', 'your', 'sake,', 'however,', 'if', 'you', 'are', 'passing', 'an', 'Option', 'struct', 'into', 'that', 'function,', 'and', 'the', 'user', 'did', 'not', 'specify', 'the', 'options,', 'then', 'yes', 'they', 'will', 'be', 'false', 'and', '""""', 'by', 'default.', 'One', 'solution', 'is', 'to', 'create', 'a(nother)', 'constructor:', 'func', 'NewOptions', '(', 'b', 'bool', ',', 's', 'string', ')', 'Options', 'This', 'constructor', 'would', 'make', 'the', 'bool', 'default', 'true.', 'You', 'could', 'also', 'try', 'an', 'enum', 'to', 'simulate', 'a', 'boolean;', 'the', 'zero', 'value', 'will', 'be', '0.', 'So', 'instead', 'of', 'type', 'bool', 'for', 'the', 'Options', 'struct', 'value', 'BoolOption,', 'you', 'could', 'use', 'int:', 'const', '(', 'TRUE', 'FALSE', ')', 'You', 'could', 'also', 'have', 'a', 'UNINITIALIZED', 'as', 'zero,', 'but', 'I', 'think', 'you', 'just', 'want', 'to', 'switch', 'the', 'default', 'value,', 'rather', 'than', 'detecting', 'that', 'it', 'is', 'uninitialized.', 'So', 'when', 'checking', 'a', 'value', 'of', 'Options,', 'you', 'could', 'write:', 'if', 'opt', '.', 'BoolOption', '==', 'FALSE', '{', '//', 'Do', 'something', 'with', 'the', 'option', '}', 'else', '{', '//', 'The', 'default', 'option', '}', 'A', 'bit', 'simpler', 'would', 'be', 'to', 'make', 'the', 'BoolOption', 'into', 'notBoolOption,', 'and', 'have', 'the', 'default', 'be', 'false.', 'Or,', 'as', 'Olivia', 'Ruth', 'points', 'out,', 'if', 'you', 'have', 'the', 'field', 'as', 'a', 'pointer', 'to', 'a', 'boolean,', 'it', 'will', 'be', 'remain', 'nil', 'until', '""initialized"".']"
1028,43936698,"

If this is intended then the type of values is:

[][]Value


to represent the two arrays, else remove the array nesting and it becomes:

[]Value


Runnable Example: https://play.golang.org/p/UUqQR1KSwB
","['If', 'you', 'look', 'carefully', 'at', 'your', 'json.', 'you', 'have', 'an', 'array', 'in', 'an', 'array...', '...', '""values""', ':', '[', '[...', 'If', 'this', 'is', 'intended', 'then', 'the', 'type', 'of', 'values', 'is:', '[][]Value', 'to', 'represent', 'the', 'two', 'arrays,', 'else', 'remove', 'the', 'array', 'nesting', 'and', 'it', 'becomes:', '[]Value', 'Runnable', 'Example:', 'https://play.golang.org/p/UUqQR1KSwB']"
1029,43936709,"
","['type', 'Basic', 'struct', '{', 'ID', 'string', 'json', ':', '""id""', '}', 'type', 'Inner', 'struct', '{', 'ID', 'string', 'json', ':', '""id""', 'Keys', '[]', 'Basic', 'json', ':', '""keys""', '}', 'type', 'Middle', 'struct', '{', 'ID', 'int', 'json', ':', '""id""', 'Values', '[]', 'Inner', 'json', ':', '""values""', '}', 'type', 'Final', 'struct', '{', 'Data', '[]', 'Middle', 'json', ':', '""data""', '}']"
1030,43991706,"
","['you', 'can', 'use', 'interface', 'with', 'method', 'In', 'service', '(connect', 'db)', '//', 'UserServiceInterface', 'include', 'method', 'list', 'type', 'UserServiceInterface', 'interface', '{', 'GetAll', '(', 'helpers', '.', 'ParamsGetAll', ')', '(', 'models', '.', 'PublicUsers', ',', 'error', ')', 'Get', '(', 'int64', ')', '(', 'models', '.', 'User', ',', 'error', ')', 'Delete', '(', 'int64', ')', '(', 'bool', ',', 'error', ')', 'Create', '(', 'models', '.', 'User', ')', '(', 'int64', ',', 'error', ')', 'Update', '(', 'models', '.', 'User', ')', '(', 'models', '.', 'User', ',', 'error', ')', 'CheckExistUsername', '(', 'string', ')', '(', 'bool', ',', 'error', ')', 'CheckExistEmail', '(', 'string', ')', '(', 'bool', ',', 'error', ')', 'CreateEmailActive', '(', 'string', ',', 'string', ',', 'int64', ')', 'error', 'CheckExistUser', '(', 'int64', ')', '(', 'bool', ',', 'error', ')', '}', '//', 'UserService', 'struct', 'type', 'userService', 'struct', '{}', '//', 'NewUserService', 'to', 'constructor', 'func', 'NewUserService', '()', 'userService', '{', 'return', 'userService', '{}', '}', 'func', '(', 'userService', ')', 'GetAll', '(', 'p', 'helpers', '.', 'ParamGetAll', ')(', 'models', '.', 'PublicUser', ',', 'error', ')', '{', 'code', 'here', '....', '}', 'In', 'user', 'controller', '//', 'UserController', 'controller', 'type', 'UserController', 'struct', '{', 'Service', 'services', '.', 'UserServiceInterface', '}', 'func', '(', 'controller', 'UserController', ')', 'GetAll', '(', 'c', '*', 'gin', '.', 'Context', ')', '{', 'users', ',', 'errGetAll', ':=', 'controller', '.', 'Service.GetAll(params)', '}']"
1031,44073435,"
","['Find', 'It.', 'I', 'do', 'c', ',', 'err', ':=', 'cdp', '.', 'New', '(', 'ctxt', ',', 'cdp', '.', 'WithRunnerOptions', '(', 'runner.Flag(""headless"", true)', ',', 'runner.Flag(""disable-gpu"", true)))', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}']"
1032,44078268,"
","['Unfortunately', 'not.', 'http.ListenAndServe', 'generates', 'a', 'local', 'http.Server', 'instance,', 'which', 'you', 'cannot', 'gain', 'access', 'to,', 'which', 'is', 'what', 'you', 'would', 'need', 'to', 'be', 'able', 'to', 'stop', 'it.', ""You'll"", 'need', 'to', 'create', 'your', 'own', 'http.Server', 'instance,', 'and', 'register', 'your', 'handlers', 'with', 'that', 'instead', 'of', 'using', 'http.HandleFunc.', 'Then', 'you', 'can', 'shut', 'down', 'the', 'server', 'using', 'Close()', 'to', 'shut', 'down', 'immediately,', 'or', 'Shutdown()', 'to', 'do', 'a', 'graceful', 'stop', '(letting', 'requests', 'in', 'flight', 'complete', 'before', 'shutting', 'down).', 'var', 'server', '*', 'http', '.', 'Server', '//', '...', 'func', 'PleaseStart', '()', '{', 'http.HandleFunc(""/"", handlerfunc)', 'server', '=', '&', 'http', '.', 'Server', '{', 'Addr', ':', '"":80""', ',', 'Handler', ':', 'http', '.', 'DefaultServeMux', ',', '}', 'log.Fatal(server.ListenAndServe())', '}', 'func', 'kill_server', '()', '{', 'server.Close()', '}']"
1033,44103397,"

In this case I'm using it to compile against the latest OpenSSL.  Edit to suit your needs.
","['If', ""you're"", 'using', 'Cgo,', 'you', 'must', 'use', 'something', 'like', 'this:', '/*', 'cgo', 'CFLAGS', ':', '-', 'I/usr/local/ssl/include', 'cgo', 'LDFLAGS', ':', '-', 'lcrypto', '-', 'L/usr/local/ssl/lib', '*/', 'import', '""C""', 'In', 'this', 'case', ""I'm"", 'using', 'it', 'to', 'compile', 'against', 'the', 'latest', 'OpenSSL.', 'Edit', 'to', 'suit', 'your', 'needs.']"
1034,44136086,"

as the length of the generated map will be clearly less than six :)

In other words use the found method of @Ricky_A above to keep on the safe side.
","['Yes', 'as', '@RickyA', 'mentions', 'using', 'a', 'range', 'is', 'nice', 'as', 'it', 'verifies', 'for', 'all', 'the', 'possible', 'underlying', 'const', 'values.', 'Additionally', 'you', 'could', 'check', 'the', 'length', 'of', 'the', 'enum,', 'although', 'that', 'would', 'only', 'be', 'possible', 'when', 'the', 'underlying', 'enum', 'values', 'do', 'not', 'have', 'any', ""'gaps'"", 'and', 'have', 'a', 'consequitive', 'range', 'of', 'numbers.', 'Verbose', 'explanation', 'via', 'code:', 'type', 'length', ':=', 'int32', '(', 'len', '(', 'TimeInterval_name', '))', 'if', 'testinputint', '=', 'type', 'length', '{', '//', 'not', 'a', 'value', 'for', 'this', 'enum,', 'return', 'err', '}', 'A', 'bit', 'less', 'verbose,', 'and', 'just', 'using', 'int', 'instead', 'of', 'int32', 'if', 'testinputint', '=', 'len', '(', 'TimeInterval_name', ')', '{', '//', 'not', 'a', 'value', 'for', 'this', 'enum,', 'return', 'err', '}', 'But', 'as', 'said,', 'this', 'will', 'only', 'be', 'valid', 'for', 'enums', 'that', 'adhere', 'to', 'a', 'proper', 'iota.', 'That', 'might', 'not', 'be', 'the', 'case', 'when', 'you', 'have', 'changed', 'your', 'enum', 'to', 'read', 'something', 'like', 'this:', 'var', 'TimeInterval_name', '=', 'map', '[', 'int32', ']', 'string', '{', '0', ':', '""TI_UNKNOWN""', ',', '1', ':', '""TI_HOUR""', ',', '2', ':', '""TI_DAY""', ',', '3', ':', '""TI_WEEK""', ',', '//', 'we', 'do', 'not', 'use', 'month', 'anymore', '4:', '""TI_MONTH"",', '5', ':', '""TI_QUARTER""', ',', '6', ':', '""TI_YEAR""', ',', '}', 'as', 'the', 'length', 'of', 'the', 'generated', 'map', 'will', 'be', 'clearly', 'less', 'than', 'six', ':)', 'In', 'other', 'words', 'use', 'the', 'found', 'method', 'of', '@Ricky_A', 'above', 'to', 'keep', 'on', 'the', 'safe', 'side.']"
1035,44178318,"It is automatically added by the IDE and its there to separate the parameter sent to delve from the parameters sent to the application. In case you don't have any parameters then, as you say, it's redundant but it's not harmful / shouldn't bother you. Is there any problem that you currently have with the IDE? 

Edit: This was fixed in the newer EAPs starting from EAP 8.
","['It', 'is', 'automatically', 'added', 'by', 'the', 'IDE', 'and', 'its', 'there', 'to', 'separate', 'the', 'parameter', 'sent', 'to', 'delve', 'from', 'the', 'parameters', 'sent', 'to', 'the', 'application.', 'In', 'case', 'you', ""don't"", 'have', 'any', 'parameters', 'then,', 'as', 'you', 'say,', ""it's"", 'redundant', 'but', ""it's"", 'not', 'harmful', '/', ""shouldn't"", 'bother', 'you.', 'Is', 'there', 'any', 'problem', 'that', 'you', 'currently', 'have', 'with', 'the', 'IDE?', 'Edit:', 'This', 'was', 'fixed', 'in', 'the', 'newer', 'EAPs', 'starting', 'from', 'EAP', '8.']"
1036,44201166,"
","['The', 'following', 'code', 'prettily', 'statisfies', 'your', 'requirement,', 'you', 'can', 'get', 'this', 'code', 'at', 'https://gist.github.com/hygull/645c3dc39c69b6b69c06f5ea9deee41f.', 'The', 'table', 'data', 'has', 'been', 'also', 'provided.', '/**', '{', '""created_on""', ':', '""26 may 2017""', ',', '""todos""', ':', '[', '""go get github.com/go-sql-driver/mysql""', '],', '""aim""', ':', '""Reading fname column into []string(slice of strings)""', '}', '*/', '/*', 'mysql', '>', 'select', '*', 'from', 'users', ';', '+----+-----------+----------+----------+-------------------------------+--------------+', '|', 'id', '|', 'fname', '|', 'lname', '|', 'uname', '|', 'email', '|', 'contact', '|', '+----+-----------+----------+----------+-------------------------------+--------------+', '|', '1', '|', 'Rishikesh', '|', 'Agrawani', '|', 'hygull', '|', 'rishikesh0014051992', 'gmail', '.', 'com', '|', '917353787704', '|', '|', '2', '|', 'Sandeep', '|', 'E', '|', 'sandeep', '|', 'sandeepeswar8', 'gmail', '.', 'com', '|', '919739040038', '|', '|', '3', '|', 'Darshan', '|', 'Sidar', '|', 'darshan', '|', 'sidardarshan', 'gmail', '.', 'com', '|', '917996917565', '|', '|', '4', '|', 'Surendra', '|', 'Prajapat', '|', 'surendra', '|', 'surendrakgadwal', 'gmail', '.', 'com', '|', '918385894407', '|', '|', '5', '|', 'Mukesh', '|', 'Jakhar', '|', 'mukesh', '|', 'mjakhar', '.', 'kjahhar', 'gmail', '.', 'com', '|', '919772254140', '|', '+----+-----------+----------+----------+-------------------------------+--------------+', '5', 'rows', 'in', 'set', '(', '0', '.', '0', '0', 'sec', ')', 'mysql', '>', '*/', 'package', 'main', 'import', '""fmt""', 'import', '""log""', 'import', '(', '_', '""github.com/go-sql-driver/mysql""', '""database/sql""', ')', 'func', 'main', '()', '{', '//', 'db,', 'err', ':=', 'sql.Open(""mysql"",', '"":@tcp(127.0.0.1:)/?charset=utf8""', ')', 'db', ',', 'err', ':=', 'sql.Open(""mysql"", ""hygull:admin@67@tcp(127.0.0.1:3306)/practice_db?charset=utf8"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'rows', ',', 'err', ':=', 'db.Query(""select fname from users"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'firstnames', ':=[]', 'string', '{}', 'for', 'rows.Next()', '{', 'var', 'fname', 'string', 'rows.Scan(&fname)', 'firstnames', '=', 'append', '(', 'firstnames', ',', 'fname', ')', '}', 'fmt.Println(firstnames)', 'db.Close()', '}', '/*', '[', 'Rishikesh', 'Sandeep', 'Darshan', 'Surendra', 'Mukesh', ']', '*/']"
1037,44207768,"
","['This', 'error', 'happens', 'because', 'by', 'default', 'go', 'get', ""doesn't"", 'use', 'terminal', 'input.', 'This', 'behaviour', 'can', 'be', 'changed', 'by', 'modifying', 'environment', 'variable', 'GIT_TERMINAL_PROMPT,', 'which', 'was', 'introduced', 'in', 'git', '2.3.', ""That's"", 'why', 'the', 'go', 'get', 'command', 'behaves', 'differently', 'in', 'CentOS', '7', '(git', '1.8)', 'and', 'Alpine', '3.5', '(git', '2.11).', 'You', 'can', 'work', 'your', 'way', 'around', 'the', 'issue', 'in', 'git', '>=', '2.3', 'by', 'running', 'go', 'get', 'as', 'follows:', '$', 'GIT_TERMINAL_PROMPT', '=', '1', 'go', 'get', 'github', '.', 'com/foo/bar', 'Username', 'for', ""'https://github.com'"", ':', 'If', 'you', 'have', 'multiple', 'go', 'get', 'calls', 'then', 'you', 'can', 'export', 'that', 'environment', 'variable', 'before', 'running', 'the', 'commands:', '$', 'export', 'GIT_TERMINAL_PROMPT', '=', '1', '$', 'go', 'get', 'github', '.', 'com/foo/bar', 'Username', 'for', ""'https://github.com'"", ':', '$', 'go', 'get', 'github', '.', 'com/foo/baz', 'Username', 'for', ""'https://github.com'"", ':']"
1038,44250438,"this is ASCII. You need to convert your HEX output. 
I don't have any knowledge of GO.
https://en.wikipedia.org/wiki/ASCII
","['this', 'is', 'ASCII.', 'You', 'need', 'to', 'convert', 'your', 'HEX', 'output.', 'I', ""don't"", 'have', 'any', 'knowledge', 'of', 'GO.', 'https://en.wikipedia.org/wiki/ASCII']"
1039,44302889,"
","['The', 'most', 'effective', 'way', 'would', 'be', 'to', 'remove', 'this', 'step:', 'db', ':=', 'bytes.Split(data, []uint8(""\\n""))', 'and', 'instead', 'iterate', 'over', 'data', 'like', 'that:', 'func', 'main', '()', '{', 'data', ',', '_', ':=', 'ioutil.ReadFile(""test.txt"")', 's', ':=', 'make', '([]', 'string', ',', '0', ')', 'start', ':=', '0', 'for', 'i', ':=', 'range', 'data', '{', 'if', 'data', '[', 'i', ']', '==', ""'\\n'"", '{', 'elem', ':=', 'string', '(', 'data', '[', 'start', ':', 'i', '-', '1', '])', 's', '=', 'append', '(', 's', ',', 'elem', ')', 'start', '=', 'i', '}', '}', 'fmt.Printf(""%v"", s)', '}', 'Or', 'if', 'you', 'want', 'to', 'convert', '[][]byte', 'to', '[]string:', 'func', 'convert', '(', 'data', '[][]', 'byte', ')', '[]', 'string', '{', 's', ':=', 'make', '([]', 'string', ',', 'len', '(', 'data', '))', 'for', 'row', ':=', 'range', 'data', '{', 's', '[', 'row', ']', '=', 'string', '(', 'data', '[', 'row', '])', '}', 'return', 's', '}']"
1040,44326496,"

*the benchmark read a sample file of 1.2 MiB and ~10K lines

The new code runs in 36% of the time and 71% of the memory used by the original function.
","['If', 'you', 'actually', 'want', 'to', 'convert', 'a', 'file', 'content', 'to', 'a', '[]string,', 'you', 'can', 'use', 'bufio.Scanner', 'which', 'is', 'cleaner', '(IMO)', 'and', 'more', 'efficient', 'than', 'the', 'code', 'you', 'posted:', 'func', 'readFile', '(', 'filename', 'string', ')', '([]', 'string', ',', 'error', ')', '{', 'file', ',', 'err', ':=', 'os.Open(filename)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'defer', 'file.Close()', 'scanner', ':=', 'bufio.NewScanner(file)', 'var', 'data', '[]', 'string', 'for', 'scanner.Scan()', '{', 'line', ':=', 'scanner.Text()', 'data', '=', 'append', '(', 'data', ',', 'line', ')', '}', 'if', 'err', '=', 'scanner.Err()', ';', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'data', ',', 'nil', '}', ""Here's"", 'a', 'benchmark*', 'comparing', 'the', 'original', 'function', '(readFile1)', 'and', 'my', 'function', '(readFile2):', 'BenchmarkReadFile1', '-', '8', '300', '4632189', 'ns/op     3035552 B/op      10570 allocs/op', 'BenchmarkReadFile2', '-', '8', '1000', '1695820', 'ns/op     2169655 B/op      10587 allocs/op', '*the', 'benchmark', 'read', 'a', 'sample', 'file', 'of', '1.2', 'MiB', 'and', '~10K', 'lines', 'The', 'new', 'code', 'runs', 'in', '36%', 'of', 'the', 'time', 'and', '71%', 'of', 'the', 'memory', 'used', 'by', 'the', 'original', 'function.']"
1041,44372739,"

But all I have done is replace your tmp with a function parameter.
","['I', ""don't"", 'think', 'it', 'is', 'particularly', 'messy', 'but', 'I', 'might', 'be', 'tempted', 'to', 'make', 'some', 'sort', 'of', 'addDupe', 'helper', 'function', 'that', 'takes', 'a', 'dupCount', 'by', 'value,', 'makes', 'whatever', 'changes', 'are', 'required', 'to', 'add', 'the', 'line', 'and', 'returns', 'the', 'dupCount', 'by', 'value', 'func', 'addDupe', '(', 'dupes', 'dupCount', ',', 'filename', 'string', ')', 'dupCount', '{', 'if', 'dupes', '.', 'count', '==', '0', '{', 'dupes', '.', 'fileCount', '=', 'make', '(', 'map', '[', 'string', ']', 'int', ')', '}', 'dupes', '.', 'fileCount', '[', 'filename', ']++', 'dupes', '.', 'count', '++', 'return', 'dupes', '}', 'This', 'is', 'similar', 'to', 'the', 'way', 'the', 'standard', 'append', 'function', 'for', 'slices', 'works.', 'Then', 'countLines', 'can', 'be', 'written', 'as:', 'func', 'countLines', '(', 'r', 'io', '.', 'Reader', ',', 'counts', 'map', '[', 'string', ']', 'dupCount', ',', 'filename', 'string', ')', '{', 'input', ':=', 'bufio.NewScanner(r)', 'for', 'input.Scan()', '{', 'line', ':=', 'input.Text()', 'counts', '[', 'line', ']', '=', 'addDupe', '(', 'counts', '[', 'line', '],', 'filename', ')', '}', '}', 'But', 'all', 'I', 'have', 'done', 'is', 'replace', 'your', 'tmp', 'with', 'a', 'function', 'parameter.']"
1042,44376544,"

Although in the newest version of windows you have to read the following keys to get the version: CurrentMajorVersionNumber & CurrentMinorVersionNumber
","['Why', 'not', 'use', 'the', 'windows', 'registry?', 'https://godoc.org/golang.org/x/sys/windows/registry', 'How', 'to', 'return', 'a', 'default', 'value', 'from', 'windows/registry', 'with', 'golang', 'package', 'main', 'import', '(', '""golang.org/x/sys/windows/registry""', '""log""', '""fmt""', ')', 'func', 'main', '()', '{', 'k', ',', 'err', ':=', 'registry.OpenKey(registry.LOCAL_MACHINE, `SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion`, registry.QUERY_VALUE)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'defer', 'k.Close()', 'cv', ',', '_', ',', 'err', ':=', 'k.GetStringValue(""CurrentVersion"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'fmt.Printf(""CurrentVersion: %s\\n"", cv)', 'pn', ',', '_', ',', 'err', ':=', 'k.GetStringValue(""ProductName"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'fmt.Printf(""ProductName: %s\\n"", pn)', 'maj', ',', '_', ',', 'err', ':=', 'k.GetIntegerValue(""CurrentMajorVersionNumber"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'fmt.Printf(""CurrentMajorVersionNumber: %d\\n"", maj)', 'min', ',', '_', ',', 'err', ':=', 'k.GetIntegerValue(""CurrentMinorVersionNumber"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'fmt.Printf(""CurrentMinorVersionNumber: %d\\n"", min)', 'cb', ',', '_', ',', 'err', ':=', 'k.GetStringValue(""CurrentBuild"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'fmt.Printf(""CurrentVersion: %s\\n"", cb)', '}', 'This', 'returns:', 'PS', 'C', ':', 'Users', 'Adamar', 'Desktop', '>', '.', 'WindowsVersion', '.', 'exe', 'CurrentVersion', ':', '6', '.', '3', 'ProductName', ':', 'Windows', 'Server', '2016', 'Standard', 'Evaluation', 'CurrentMajorVersionNumber', ':', '10', 'CurrentMinorVersionNumber', ':', '0', 'CurrentVersion', ':', '14393', 'Although', 'in', 'the', 'newest', 'version', 'of', 'windows', 'you', 'have', 'to', 'read', 'the', 'following', 'keys', 'to', 'get', 'the', 'version:', 'CurrentMajorVersionNumber', '&', 'CurrentMinorVersionNumber']"
1043,44378550,"Go Downloads

PowerPC architecture: ppc64le (64-bit PowerPC little-endian). For example, for Go 1.8.3,

go1.8.3.linux-ppc64le.tar.gz: https://storage.googleapis.com/golang/go1.8.3.linux-ppc64le.tar.gz
","['Go', 'Downloads', 'PowerPC', 'architecture:', 'ppc64le', '(64-bit', 'PowerPC', 'little-endian).', 'For', 'example,', 'for', 'Go', '1.8.3,', 'go1.8.3.linux-ppc64le.tar.gz:', 'https://storage.googleapis.com/golang/go1.8.3.linux-ppc64le.tar.gz']"
1044,44426276,"Have you explored solutions such as ory/hydra, which will handle everything OAuth2/OpenID related and let you handle user authentication?

Implementing your own OAuth2 provider is dangerous territory. It only takes one misread RFC and BOOM! Security vulnerability. It's typically better to entrust that responsibility to established security experts or lasting projects as opposed to home-grown remedies.

Of course, this isn't to say that everybody needs to jump onto the hype train and use this cool new software. In fact, I would urge the opposite: if you are a competent security analyst and feel comfortable writing an OAuth2/OpenID Connect implementation, go right ahead! But us normal people who don't want our hair to gray before we are thirty will use existing technologies to our advantage.


","['Have', 'you', 'explored', 'solutions', 'such', 'as', 'ory/hydra,', 'which', 'will', 'handle', 'everything', 'OAuth2/OpenID', 'related', 'and', 'let', 'you', 'handle', 'user', 'authentication?', 'Implementing', 'your', 'own', 'OAuth2', 'provider', 'is', 'dangerous', 'territory.', 'It', 'only', 'takes', 'one', 'misread', 'RFC', 'and', 'BOOM!', 'Security', 'vulnerability.', ""It's"", 'typically', 'better', 'to', 'entrust', 'that', 'responsibility', 'to', 'established', 'security', 'experts', 'or', 'lasting', 'projects', 'as', 'opposed', 'to', 'home-grown', 'remedies.', 'Of', 'course,', 'this', ""isn't"", 'to', 'say', 'that', 'everybody', 'needs', 'to', 'jump', 'onto', 'the', 'hype', 'train', 'and', 'use', 'this', 'cool', 'new', 'software.', 'In', 'fact,', 'I', 'would', 'urge', 'the', 'opposite:', 'if', 'you', 'are', 'a', 'competent', 'security', 'analyst', 'and', 'feel', 'comfortable', 'writing', 'an', 'OAuth2/OpenID', 'Connect', 'implementation,', 'go', 'right', 'ahead!', 'But', 'us', 'normal', 'people', 'who', ""don't"", 'want', 'our', 'hair', 'to', 'gray', 'before', 'we', 'are', 'thirty', 'will', 'use', 'existing', 'technologies', 'to', 'our', 'advantage.']"
1045,44447716,"
","['The', 'compiler', 'command', 'is', 'incomplete.', 'You', 'can', 'use', 'gomobile', 'build', '-x', 'to', 'see', 'how', 'to', 'invoke', 'the', 'compiler', 'correctly,', 'remember', 'you', 'might', 'need', 'to', 'quote', 'the', 'parameters', 'correctly', 'in', 'your', 'shell.', 'An', 'example', 'of', 'a', 'correct', 'command:', 'GOMOBILE', '=/', 'home/janus/go/pkg/gomobile GOPATH=$HOME/go ANDROID_HOME=/home/janus/Desktop/android-sdk-linux GOOS=android GOARCH=arm CC=$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/clang CXX=$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ CGO_CFLAGS=""-target armv7a-none-linux-androideabi --sysroot $ANDROID_HOME/ndk-bundle/platforms/android-15/arch-arm -gcc-toolchain $ANDROID_HOME/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64 -I$GOMOBILE/include"" CGO_CPPFLAGS=""-target armv7a-none-linux-androideabi --sysroot $ANDROID_HOME/ndk-bundle/platforms/android-15/arch-arm -gcc-toolchain $ANDROID_HOME/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64 -I$GOMOBILE/include"" CGO_LDFLAGS=""-target armv7a-none-linux-androideabi --sysroot $ANDROID_HOME/ndk-bundle/platforms/android-15/arch-arm -gcc-toolchain $ANDROID_HOME/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64 -L$ANDROID_HOME/ndk-bundle/platforms/android-15/arch-arm/usr/lib -L$GOMOBILE/lib/arm"" CGO_ENABLED=1 GOARM=7 go build -pkgdir=$GOMOBILE/pkg_android_arm', '-', 'buildmode', '=', 'c', '-', 'shared']"
1046,44481041,"
","['If', 'in', 'a', 'map', 'you', 'want', 'to', 'store', 'multiple', 'values', 'associated', 'with', 'the', 'same', 'key,', 'the', 'value', 'type', 'must', 'be', 'suitable', 'for', 'that.', 'A', 'struct', ""isn't,"", 'but', 'a', 'slice', 'is', 'a', 'perfect', 'choice.', 'So', 'change', 'your', 'value', 'type', 'to', '[]A:', 'letSee', ':=', 'map', '[', 'X', '][]', 'A', '{}', 'letSee', '[', 'X', '{', '1', '}]', '=', '[]', 'A', '{', 'A', '{', '""T""', ',', 'B', '{', '""T1""', ',', 'C', '{', '""T11""', ',', '""T12""', '}}}}', 'letSee', '[', 'X', '{', '1', '}]', '=', 'append', '(', 'letSee', '[', 'X', '{', '1', '}],', 'A', '{', '""L""', ',', 'B', '{', '""L1""', ',', 'C', '{', '""L11""', ',', '""L12""', '}}})', 'fmt.Printf(""%+v"", letSee)', 'Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):', 'map', '[{', 'key', ':', '1', '}:[{', 'value1', ':', 'T', 'value2', ':{', 'value3', ':', 'T1', 'value4', ':{', 'value5', ':', 'T11', 'value6', ':', 'T12', '}}}', '{', 'value1', ':', 'L', 'value2', ':{', 'value3', ':', 'L1', 'value4', ':{', 'value5', ':', 'L11', 'value6', ':', 'L12', '}}}]]']"
1047,44482304,"You should remove the default clauses from the select statements. 

Since your select statement is within a for loop and the default clause prevents it from blocking, the loop has to go through a lot of cycles before any message will be received. 

Looks like Playground detects it and stops the program.
",[]
1048,44482565," on the beginning of your program, run few times and check output to see, how it's working:

https://play.golang.org/p/TLDHNg6urB

Here's correct example for you:

https://play.golang.org/p/bc0TGdmx1Y

Note, that in this case you should use different channels for stopping additional and main goroutines.
","['As', '@dev.bmax', 'already', 'mentioned,', 'you', 'use', 'default', 'in', 'a', 'wrong', 'way.', 'Check', 'this', 'small', 'article', 'about', 'using', 'default', 'keyword.', 'Also,', 'try', 'to', 'add', 'runtime.GOMAXPROCS(4)', 'on', 'the', 'beginning', 'of', 'your', 'program,', 'run', 'few', 'times', 'and', 'check', 'output', 'to', 'see,', 'how', ""it's"", 'working:', 'https://play.golang.org/p/TLDHNg6urB', ""Here's"", 'correct', 'example', 'for', 'you:', 'https://play.golang.org/p/bc0TGdmx1Y', 'Note,', 'that', 'in', 'this', 'case', 'you', 'should', 'use', 'different', 'channels', 'for', 'stopping', 'additional', 'and', 'main', 'goroutines.']"
1049,44524824,"Your call to Math.Float64frombits occurs at runtime, not compile time, and thus, is not constant. From the effective Go page (which will explain it better than I can):


  Constants in Go are just that—constant. They are created at compile
  time, even when defined as locals in functions, and can only be
  numbers, strings or booleans. Because of the compile-time restriction,
  the expressions that define them must be constant expressions,
  evaluatable by the compiler. For instance, 1<<3 is a constant
  expression, while math.Sin(math.Pi/4) is not because the function call
  to math.Sin needs to happen at run time.


Link: https://golang.org/doc/effective_go.html#constants
","['Your', 'call', 'to', 'Math.Float64frombits', 'occurs', 'at', 'runtime,', 'not', 'compile', 'time,', 'and', 'thus,', 'is', 'not', 'constant.', 'From', 'the', 'effective', 'Go', 'page', '(which', 'will', 'explain', 'it', 'better', 'than', 'I', 'can):', 'Constants', 'in', 'Go', 'are', 'just', 'that—constant.', 'They', 'are', 'created', 'at', 'compile', 'time,', 'even', 'when', 'defined', 'as', 'locals', 'in', 'functions,', 'and', 'can', 'only', 'be', 'numbers,', 'strings', 'or', 'booleans.', 'Because', 'of', 'the', 'compile-time', 'restriction,', 'the', 'expressions', 'that', 'define', 'them', 'must', 'be', 'constant', 'expressions,', 'evaluatable', 'by', 'the', 'compiler.', 'For', 'instance,', '1<<3', 'is', 'a', 'constant', 'expression,', 'while', 'math.Sin(math.Pi/4)', 'is', 'not', 'because', 'the', 'function', 'call', 'to', 'math.Sin', 'needs', 'to', 'happen', 'at', 'run', 'time.', 'Link:', 'https://golang.org/doc/effective_go.html#constants']"
1050,44524941,"
","['You', ""can't"", 'call', 'a', 'function', 'like', 'Float64frombits', 'in', 'a', 'constant', 'declaration;', 'the', 'function', 'call', 'means', 'it', ""can't"", 'be', 'evaluated', 'fully', 'at', 'compile', 'time,', 'so', 'it', ""can't"", 'be', 'used', 'as', 'a', 'constant.', 'You', 'can,', 'however,', 'just', 'dump', 'bits', 'into', 'a', 'float', 'value:', 'const', 'myFloat', 'float64', '=', '0x7ff8c', '0', 'c0ac0ffee1', 'func', 'main', '()', '{', 'fmt.Println(myFloat)', '}']"
1051,44525986,"
","['If', 'you', 'want', 'to', 'store', 'the', 'bit', 'value', '(which', 'is', 'essentially', 'a', 'uint64),', 'and', 'have', 'it', 'available', 'as', 'a', 'float64', 'to', 'external', 'packages,', 'you', 'can', 'provide', 'a', '""constant""', 'function,', 'which', 'you', 'guarantee', 'to', 'only', 'return', 'the', 'constant', 'value.', 'This', 'is', 'precisely', 'how', 'functions', 'like', 'math.NaN', 'work.', 'const', 'uintFoo', '=', '0x7ff8c', '0', 'c0ac0ffee1', 'func', 'ConstFoo', '()', 'float64', '{', 'return', 'math.Float64frombits(uintFoo)', '}']"
1052,44528288,"
","[""You're"", 'code', 'looks', 'alright.', 'However', 'it', 'can', 'be', 'simplified-', 'var', 'b', 'bytes', '.', 'Buffer', '// you could use buffer pool here', 'err', ':=', 'jsonapi.MarshalManyPayload(&b, albumList())', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'return', 'c.JSONBlob(http.StatusOK, b.Bytes())', 'Following', 'approaches', 'for', 'your', 'thoughts:', 'Approach', '1', '-', 'c.Response().Header().Set(echo.HeaderContentType, jsonapi.MediaType)', 'c.Response().WriteHeader(http.StatusOK)', 'return', 'jsonapi.MarshalManyPayload(c.Response(), albumList())', 'Approach', '2', '-', 'var', 'b', 'bytes', '.', 'Buffer', '// you could use buffer pool here', 'err', ':=', 'jsonapi.MarshalManyPayload(&b, albumList())', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'c.Response().Header().Set(echo.HeaderContentType, jsonapi.MediaType)', 'c.Response().WriteHeader(http.StatusOK)', '_', ',', 'err', ':=', 'b.WriteTo(c.Response())', 'return', 'err']"
1053,44594347,"
","[""You're"", 'looking', 'at', 'two', 'separate', 'data', 'structures,', 'so', 'to', 'unmarshal', 'them', 'with', 'a', 'single', 'struct', 'type,', ""you'd"", 'need', 'to', 'account', 'for', 'both:', 'type', 'Owner', 'struct', '{', 'Name', 'string', 'Pet', 'Pets', '[]', 'Pet', 'json', ':', '""Pet""', '}', 'Then,', 'if', 'you', 'want', 'the', 'slice', 'to', 'be', 'authoritative,', 'after', 'you', 'unmarshall,', 'move', 'the', 'embedded', 'to', 'the', 'slice:', '//', 'owner', ':=', 'unmarshall', 'blah', 'blah', 'if', 'owner', '.', 'Pet', '!=', 'Pet', '{}', '{', 'owner', '.', 'Pets', '=', 'append', '(', 'owner', '.', 'Pets', ',', 'owner', '.', 'Pet', ')', '}']"
1054,44594408," also work, and I think this should work in other platforms (Mac, Linux) too. 
The error message is related to delve issue. See https://github.com/Microsoft/vscode-go/issues/986

","['Yes', ""it's"", 'possible.', 'Suppose', 'that', 'the', 'GOPATH', 'is', 'C:\\Work\\golang', 'Revel', 'project', 'name', 'is', 'myapp,', 'thus', 'the', 'location', 'of', 'the', 'project', '(workspace)', 'will', 'be', 'C', ':', 'Work', 'go', 'lang', 'src', 'myapp', '.', 'Make', 'some', 'changes', 'to', 'the', 'controllers', 'etc...', 'Run', 'the', 'application', 'with', 'revel', 'run', 'myapp,', 'then', 'press', 'CTRL+C', 'to', 'exit.', 'This', 'step', 'is', 'necessary', 'to', 'generate', 'corresponding', 'go', 'files.', 'The', 'generated', 'file,', 'i.e.', 'the', 'main', 'package', 'will', 'be', 'available', 'under', '${', 'workspaceRoot', '}/', 'app/tmp/main.go', 'Configure', 'launch.json', 'as', 'follows:', '{', '""version""', ':', '""0.2.0""', ',', '""configurations""', ':', '[', '{', '""name""', ':', '""Launch""', ',', '""type""', ':', '""go""', ',', '""request""', ':', '""launch""', ',', '""mode""', ':', '""debug""', ',', '""remotePath""', ':', '""""', ',', '""port""', ':', '2345', ',', '""host""', ':', '""127.0.0.1""', ',', '""env""', ':', '{},', '""showLog""', ':', 'true', ',', '""program""', ':', '""${workspaceRoot}/app/tmp/""', ',', '""args""', ':', '[', '""-importPath""', ',', '""myapp""', ',', '""-srcPath""', ',', '""c:\\\\work\\\\golang\\\\src""', ',', '""-runMode""', ',', '""dev""', ']', '}', ']', '}', 'The', 'important', 'parts', 'are', 'program', 'and', 'args', 'parameters,', 'while', 'the', 'other', 'parameters', 'are', 'unmodified.', 'Set', 'breakpoint', 'and', 'start', 'the', 'delve', 'debugger...', 'EDIT:', 'Setting', 'args', 'parameter', 'to', '[', '""-importPath""', ',', '""myapp""', ',', '""-srcPath""', ',', '""${workspaceRoot}/..""', ',', '""-runMode""', ',', '""dev""', ']', 'also', 'work,', 'and', 'I', 'think', 'this', 'should', 'work', 'in', 'other', 'platforms', '(Mac,', 'Linux)', 'too.', 'The', 'error', 'message', 'is', 'related', 'to', 'delve', 'issue.', 'See', 'https://github.com/Microsoft/vscode-go/issues/986']"
1055,44631925,"You should not set $GOROOT.

Type export GOROOT="""" to fix your problem. 
","['also', 'work,', 'and', 'I', 'think', 'this', 'should', 'work', 'in', 'other', 'platforms', '(Mac,', 'Linux)', 'too.', 'The', 'error', 'message', 'is', 'related', 'to', 'delve', 'issue.', 'See', 'https://github.com/Microsoft/vscode-go/issues/986']"
1056,44631949,"

Please type export GOROOT="""" to fix your problem. 
","['Your', '$GOROOT', 'should', 'not', 'be', 'set', 'up.', 'You', '$GOPATH', 'should', 'be', 'set', 'to', '$HOME/go', 'by', 'typing', 'export', '$', 'GOPATH', '=$', 'HOME/go', 'Please', 'type', 'export', 'GOROOT=""""', 'to', 'fix', 'your', 'problem.']"
1057,44651270,"

https://play.golang.org/p/ktABS6z40m
","['package', 'main', 'import', '(', '""bytes""', '""encoding/json""', '""errors""', '""fmt""', ')', 'type', 'StreamMessage', 'struct', '{', 'Data', '[]*', 'Data', 'json', ':', '""data""', 'Ts', 'float64', 'json', ':', '""ts""', '}', 'type', 'Data', 'struct', '{', 'Type', 'string', 'XRate', '*', 'XRateData', 'Balance', '*', 'BalanceData', 'Event', '*', 'EventData', 'Sync', '*', 'SyncData', '}', 'func', '(', 'd', '*', 'Data', ')', 'UnmarshalJSON', '(', 'b', '[]', 'byte', ')', 'error', '{', 'dec', ':=', 'json.NewDecoder(bytes.NewReader(b))', 't', ',', '_', ':=', 'dec.Token()', 'if', 'delim', ',', 'ok', ':=', 't', '.(', 'json', '.', 'Delim', ');', '!', 'ok', '||', 'delim', '!=', ""'['"", '{', 'return', 'errors.New(""expecting data to be an array"")', '}', 'if', 'err', ':=', 'dec.Decode(&d.Type)', ';', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'var', 'err', 'error', 'switch', 'd', '.', 'Type', '{', 'case', '""xrate""', ':', 'err', '=', 'dec.Decode(&d.XRate)', 'case', '""sync""', ':', 'err', '=', 'dec.Decode(&d.Sync)', 'case', '""balance""', ':', 'err', '=', 'dec.Decode(&d.Balance)', 'case', '""event""', ':', 'err', '=', 'dec.Decode(&d.Event)', 'default', ':', 'return', 'errors.New(""unknown data type "" + d.Type)', '}', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 't', ',', '_', '=', 'dec.Token()', 'if', 'delim', ',', 'ok', ':=', 't', '.(', 'json', '.', 'Delim', ');', '!', 'ok', '||', 'delim', '!=', ""']'"", '{', 'return', 'errors.New(""expecting array to be two elements"")', '}', 'return', 'nil', '}', 'type', 'XRateData', 'struct', '{', 'Rate', 'json', '.', 'Number', 'json', ':', '""rate""', 'CCY', 'string', 'json', ':', '""ccy""', '}', 'type', 'BalanceData', 'struct', '{', '//', 'TODO', '}', 'type', 'EventData', 'struct', '{', '//', 'TODO', '}', 'type', 'SyncData', 'struct', '{', 'Token', 'string', 'json', ':', '""Token""', '}', 'var', 'streamSnapshot', '=', '[]', 'byte', '(', '{', '""ts""', ':', '1496244373', '.', '04', ',', '""data""', ':[', '[', '""xrate""', ',', '{', '""rate""', ':', '1', '.', '2916', ',', '""ccy""', ':', '""USD""', '}],', '[', '""balance""', ',', '{', '""open_stake""', ':[', '""GBP""', ',', '0', '.', '0', '],', '""balance""', ':[', '""GBP""', ',', '0', '.', '0', ']', '}', '],', '[', '""event""', ',', '{', '""competition_id""', ':', '""545""', ',', '""ir_status""', ':', '""pre_event""', ',', '""start_time""', ':', '""2017-09-10T17:00:00+00:00""', ',', '""competition_name""', ':', '""USA NFL""', ',', '""event_id""', ':', '""2017-09-10,21617,21635""', ',', '""home""', ':', '""Buffalo Bills""', ',', '""away""', ':', '""New York Jets""', ',', '""sport""', ':', '""af""', ',', '""competition_country""', ':', '""US""', '}', '],', '[', '""sync""', ',', '{', '""Token""', ':', '""eb1c57132d004f8d8fb967c076921fac""', '}]', ']', '}', ')', 'func', 'main', '()', '{', 'var', 'sm', 'StreamMessage', 'if', 'err', ':=', 'json.Unmarshal(streamSnapshot, &sm)', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'fmt.Println(sm)', '}', 'https://play.golang.org/p/ktABS6z40m']"
1058,44671438,"
","['If', 'you', 'want', 'to', 'Switch', 'Bar', 'to', 'lowercase,', 'you', 'have', 'to', 'set', ':', '//', 'swagger:parameters', 'updateBar', 'type', 'BarParam', 'struct', '{', 'Bar', 'string', 'json', ':', '""bar""', '}']"
1059,44675798,"If you don't send data containing a variable to the template but you use {{ if .Variable }} you will get the error: 


  executing ""templatename"" at : can't evaluate field Variable in type handler.Data


My solution was to send the ""Email"" variable as a boolean (false) in order to pass the {{ if .Email }} function check. But this is a short term solution that I don't like.

I was inspired by: https://stackoverflow.com/a/31527618/1564840. In that example they show different HTML for authenticated and non-authenticated users. You will see that in both cases they send the ""Logged"" variable. Try removing that variable from the struct and execute the function. You will receive the error that I mentioned above.
",[]
1060,44676179,"
","['The', 'recommended', 'way', 'First,', 'the', 'recommended', 'way', 'is', 'not', 'to', 'rely', 'on', 'whether', 'a', 'struct', 'field', 'exists.', 'Of', 'course', 'there', 'might', 'be', 'optional', 'parts', 'of', 'the', 'template,', 'but', 'the', 'condition', 'to', 'decide', 'whether', 'to', 'render', 'a', 'part', 'should', 'rely', 'on', 'fields', 'that', 'exist', 'in', 'all', 'cases.', 'The', 'issue,', 'and', 'avoiding', 'it', 'using', 'a', 'map', 'If', 'the', 'type', 'of', 'the', 'template', 'data', 'is', 'a', 'struct', '(or', 'a', 'pointer', 'to', 'a', 'struct)', 'and', 'there', 'is', 'no', 'field', 'or', 'method', 'with', 'the', 'given', 'name,', 'the', 'template', 'engine', 'returns', 'an', 'error', 'for', 'that.', 'You', 'could', 'easily', 'get', 'rid', 'of', 'this', 'error', 'if', 'you', 'were', 'to', 'use', 'a', 'map,', 'as', 'maps', 'can', 'be', 'indexed', 'with', 'keys', 'they', ""don't"", 'contain,', 'and', 'the', 'result', 'of', 'that', 'index', 'expression', 'is', 'the', 'zero', 'value', 'of', 'the', 'value', 'type', '(and', 'not', 'an', 'error).', 'To', 'demonstrate,', 'see', 'this', 'example:', 's', ':=', '{{', 'if', '.', 'Email', '}}', 'Email', 'is', ':', '{{.', 'Email', '}}{{', 'else', '}}', 'Email', 'is', 'NOT', 'set', '.{{', 'end', '}}', 't', ':=', 'template.Must(template.New("""").Parse(s))', 'exec', ':=', 'func', '(', 'name', 'string', ',', 'param', 'interface', '{})', '{', 'fmt.Printf(""\\n%s:\\n  "", name)', 'if', 'err', ':=', 't.Execute(os.Stdout, param)', ';', 'err', '!=', 'nil', '{', 'fmt.Println(""Error:"", err)', '}', '}', 'exec', '(', '""Filled map""', ',', 'map', '[', 'string', ']', 'interface', '{}{', '""Email""', ':', '""as@as""', '})', 'exec', '(', '""Empty map""', ',', 'map', '[', 'string', ']', 'interface', '{}{})', 'exec', '(', '""Filled struct""', ',', 'struct', '{', 'Email', 'string', '}{', 'Email', ':', '""as@as.com""', '})', 'exec', '(', '""Empty struct""', ',', 'struct', '{}{})', 'Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):', 'Filled', 'map', ':', 'Email', 'is', ':', 'as', 'as', 'Empty', 'map', ':', 'Email', 'is', 'NOT', 'set', '.', 'Filled', 'struct', ':', 'Email', 'is', ':', 'as', 'as', '.', 'com', 'Empty', 'struct', ':', 'Error', ':', 'template', ':', ':', '1', ':', '5', ':', 'executing', '""""', 'at', ':', 'can', 't', 'evaluate', 'field', 'Email', 'in', 'type', 'struct', '{}', 'Sticking', 'to', 'struct', 'and', 'providing', '""isset""', 'If', 'you', 'must', 'or', 'want', 'to', 'stick', 'to', 'a', 'struct,', 'this', '""isset""', 'can', 'be', 'implemented', 'and', 'provided,', ""I'll"", 'call', 'it', 'avail().', 'This', 'implementation', 'uses', 'reflection,', 'and', 'in', 'order', 'to', 'check', 'if', 'the', 'field', 'given', 'by', 'its', 'name', 'exists', '(is', 'available),', 'the', '(wrapper)', 'data', 'must', 'also', 'be', 'passed', 'to', 'it:', 'func', 'avail', '(', 'name', 'string', ',', 'data', 'interface', '{})', 'bool', '{', 'v', ':=', 'reflect.ValueOf(data)', 'if', 'v.Kind()', '==', 'reflect', '.', 'Ptr', '{', 'v', '=', 'v.Elem()', '}', 'if', 'v.Kind()', '!=', 'reflect', '.', 'Struct', '{', 'return', 'false', '}', 'return', 'v.FieldByName(name).IsValid()', '}', 'Example', 'using', 'it:', 's', ':=', '{{', 'if', '(', 'avail', '""Email""', '.)}}', 'Email', 'is', ':', '{{.', 'Email', '}}{{', 'else', '}}', 'Email', 'is', 'unavailable', '.{{', 'end', '}}', 't', ':=', 'template.Must(template.New("""")', '.', 'Funcs', '(', 'template', '.', 'FuncMap', '{', '""avail""', ':', 'avail', ',', '}).', 'Parse', '(', 's', '))', 'exec', ':=', 'func', '(', 'name', 'string', ',', 'param', 'interface', '{})', '{', 'fmt.Printf(""\\n%s:\\n  "", name)', 'if', 'err', ':=', 't.Execute(os.Stdout, param)', ';', 'err', '!=', 'nil', '{', 'fmt.Println(""Error:"", err)', '}', '}', 'exec', '(', '""Filled struct""', ',', 'struct', '{', 'Email', 'string', '}{', 'Email', ':', '""as@as.com""', '})', 'exec', '(', '""Empty struct""', ',', 'struct', '{}{})', 'Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):', 'Filled', 'struct', ':', 'Email', 'is', ':', 'as', 'as', '.', 'com', 'Empty', 'struct', ':', 'Email', 'is', 'unavailable', '.']"
1061,44687510,"   ZMQ_PULL, ZMQ_PUSH, ZMQ_SUB, ZMQ_PUB, ZMQ_DEALER

","['In', 'newer', 'API-versions,', 'there', 'is', 'an', 'option', 'to', 'discard', 'all', '""old""', 'messages', 'and', 'always', 'deliver', 'just', 'the', '""newest""', 'one.', 'If', 'that', 'meets', 'your', 'expectations,', 'and', 'if', 'all', 'peers', 'meet', 'API', 'v.4.0+,', 'you', 'are', 'done.', 'ZMQ_CONFLATE:', 'Keep', 'only', 'last', 'message', 'If', 'set,', 'a', 'socket', 'shall', 'keep', 'only', 'one', 'message', 'in', 'its', 'inbound/outbound', 'queue,', 'this', 'message', 'being', 'the', 'last', 'message', 'received/the', 'last', 'message', 'to', 'be', 'sent.', 'Ignores', 'ZMQ_RCVHWM', 'and', 'ZMQ_SNDHWM', 'options.', 'Does', 'not', 'support', 'multi-part', 'messages,', 'in', 'particular,', 'only', 'one', 'part', 'of', 'it', 'is', 'kept', 'in', 'the', 'socket', 'internal', 'queue.', 'Option', 'value', 'type', 'int', 'Option', 'value', 'unit', 'boolean', 'Default', 'value', '0', '(false)', 'Applicable', 'socket', 'type', 's', 'ZMQ_PULL,', 'ZMQ_PUSH,', 'ZMQ_SUB,', 'ZMQ_PUB,', 'ZMQ_DEALER']"
1062,44690546,"What you're trying to do is use communication as an execution rendezvous. The sender wants to know something about when the receiver gets messages.

ZMQ implements the Actor model. What you need is a modification of the Communicating Sequential Processes model (one where sends timeout). Basically you need to add control message flows to/from the workers, the idea being that the server asks the worker to receive a message and the server waits for the reply. The reply means that the worker is ready to receive a message right now, and that the server and worker have both rendezvoused at a send/receive in their program flows. If that reply fails to arrive within timeout seconds, then the server doesn't send the actual message. 

Or you could cheat by having everything going to the workers regardless, wrapped in a message that carries a ""sent at time X"" field, and have the worker decide to discard old messages.
","['What', ""you're"", 'trying', 'to', 'do', 'is', 'use', 'communication', 'as', 'an', 'execution', 'rendezvous.', 'The', 'sender', 'wants', 'to', 'know', 'something', 'about', 'when', 'the', 'receiver', 'gets', 'messages.', 'ZMQ', 'implements', 'the', 'Actor', 'model.', 'What', 'you', 'need', 'is', 'a', 'modification', 'of', 'the', 'Communicating', 'Sequential', 'Processes', 'model', '(one', 'where', 'sends', 'timeout).', 'Basically', 'you', 'need', 'to', 'add', 'control', 'message', 'flows', 'to/from', 'the', 'workers,', 'the', 'idea', 'being', 'that', 'the', 'server', 'asks', 'the', 'worker', 'to', 'receive', 'a', 'message', 'and', 'the', 'server', 'waits', 'for', 'the', 'reply.', 'The', 'reply', 'means', 'that', 'the', 'worker', 'is', 'ready', 'to', 'receive', 'a', 'message', 'right', 'now,', 'and', 'that', 'the', 'server', 'and', 'worker', 'have', 'both', 'rendezvoused', 'at', 'a', 'send/receive', 'in', 'their', 'program', 'flows.', 'If', 'that', 'reply', 'fails', 'to', 'arrive', 'within', 'timeout', 'seconds,', 'then', 'the', 'server', ""doesn't"", 'send', 'the', 'actual', 'message.', 'Or', 'you', 'could', 'cheat', 'by', 'having', 'everything', 'going', 'to', 'the', 'workers', 'regardless,', 'wrapped', 'in', 'a', 'message', 'that', 'carries', 'a', '""sent', 'at', 'time', 'X""', 'field,', 'and', 'have', 'the', 'worker', 'decide', 'to', 'discard', 'old', 'messages.']"
1063,44700761,"

As a result it becomes valid token without nil. 
","['The', 'server', 'requires', 'a', 'token', 'string', 'without', 'added', 'strings', 'in', 'my', 'case', 'I', 'have', 'added', 'Bearer', 'string', 'to', 'the', 'token', 'string', 'in', 'the', 'header', 'when', 'sending', 'request', 'to', 'the', 'web', 'server', 'i.e.', ""'Authorization'"", ':', ""'Bearer'"", '+', ""localStorage.getItem('id_token')"", 'At', 'the', 'web', 'server', 'we', 'need', 'to', 'split', 'only', 'the', 'valid', 'token', 'without', 'the', 'Bearer', 'string', 'reqToken', ':=', 'r', '.', 'Header.Get(""Authorization"")', 'splitToken', ':=', 'strings.Split(reqToken, ""Bearer"")', 'reqToken', '=', 'splitToken', '[', '1', ']', 'As', 'a', 'result', 'it', 'becomes', 'valid', 'token', 'without', 'nil.']"
1064,44716385,"
","['More', 'robust', 'solution', 'that', ""Garrett's"", 'one', 'is:', 'func', 'init', '()', '{', 'if', 'v', ':=', 'flag.Lookup(""test.v""); v == nil || v.Value.String()', '!=', '""true""', '{', 'fmt.Println(""normal run"")', '}', 'else', '{', 'fmt.Println(""run under go test"")', '}', '}']"
1065,44757772,"Here a solution to make cross-compile super easy even with CGO.

I stumbled upon it recently after wasting a lot of time getting a new windows build server to build my Go app.
Now I just compile it on my Mac and will create a Linux build server with it:

https://github.com/karalabe/xgo

Many thanks to Péter Szilágyi alias karalabe for this really great package!

How to use:


have Docker running
go get github.com/karalabe/xgo
xgo --targets=windows/amd64 ./


There are lots more options!
","['Here', 'a', 'solution', 'to', 'make', 'cross-compile', 'super', 'easy', 'even', 'with', 'CGO.', 'I', 'stumbled', 'upon', 'it', 'recently', 'after', 'wasting', 'a', 'lot', 'of', 'time', 'getting', 'a', 'new', 'windows', 'build', 'server', 'to', 'build', 'my', 'Go', 'app.', 'Now', 'I', 'just', 'compile', 'it', 'on', 'my', 'Mac', 'and', 'will', 'create', 'a', 'Linux', 'build', 'server', 'with', 'it:', 'https://github.com/karalabe/xgo', 'Many', 'thanks', 'to', 'Péter', 'Szilágyi', 'alias', 'karalabe', 'for', 'this', 'really', 'great', 'package!', 'How', 'to', 'use:', 'have', 'Docker', 'running', 'go', 'get', 'github.com/karalabe/xgo', 'xgo', '--targets=windows/amd64', './', 'There', 'are', 'lots', 'more', 'options!']"
1066,44759792,"This is not possible with Go. As a statically compiled language you can only compile a binary if all its dependencies exist.
Can you give us some more details on why you need this in the first place? Maybe there is a simpler or more idiomatic way to achieve your idea.
","['This', 'is', 'not', 'possible', 'with', 'Go.', 'As', 'a', 'statically', 'compiled', 'language', 'you', 'can', 'only', 'compile', 'a', 'binary', 'if', 'all', 'its', 'dependencies', 'exist.', 'Can', 'you', 'give', 'us', 'some', 'more', 'details', 'on', 'why', 'you', 'need', 'this', 'in', 'the', 'first', 'place?', 'Maybe', 'there', 'is', 'a', 'simpler', 'or', 'more', 'idiomatic', 'way', 'to', 'achieve', 'your', 'idea.']"
1067,44812828,"

Obviously there's a lot of checks missing here, but this is the basic idea.
","['You', 'could', 'use', 'a', 'map[string]command', 'similar', 'to', 'how', 'the', 'net/http', 'package', 'registers', 'handlers.', 'Something', 'akin', 'to', 'this:', 'https://play.golang.org/p/9YzHyLodAQ', 'package', 'main', 'import', '(', '""fmt""', '""errors""', ')', 'type', 'BotFunc', 'func', '(', 'string', ')', '(', 'string', ',', 'error', ')', 'type', 'BotMap', 'map', '[', 'string', ']', 'BotFunc', 'var', 'Bot', '=', 'BotMap', '{}', 'func', '(', 'b', 'BotMap', ')', 'RegisterCommand', '(', 'command', 'string', ',', 'f', 'BotFunc', ')', 'error', '{', 'if', '_', ',', 'exists', ':=', 'b', '[', 'command', '];', 'exists', '{', 'return', 'errors.New(""command already exists"")', '}', 'b', '[', 'command', ']', '=', 'f', 'return', 'nil', '}', 'func', '(', 'b', 'BotMap', ')', 'Execute', '(', 'statement', 'string', ')', '(', 'string', ',', 'error', ')', '{', '//', 'parse', 'out', 'command', 'and', 'query', 'however', 'you', 'choose', '(not', 'this', 'way', 'obviously)', 'command', ':=', 'statement', '[:', '9', ']', 'query', ':=', 'statement', '[', '10', ':]', 'return', 'b.ExecuteQuery(command, query)', '}', 'func', '(', 'b', 'BotMap', ')', 'ExecuteQuery', '(', 'command', ',', 'query', 'string', ')', '(', 'string', ',', 'error', ')', '{', 'if', 'com', ',', 'exists', ':=', 'b', '[', 'command', '];', 'exists', '{', 'return', 'com', '(', 'query', ')', '}', 'return', '""""', ',', 'errors.New(""command doesn\'t exist"")', '}', 'func', 'main', '()', '{', 'err', ':=', 'Bot.RegisterCommand(""search me"", func(query string) (string, error)', '{', 'fmt.Println(""search"", query)', 'return', '""searched""', ',', 'nil', '})', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'err', '=', 'Bot.RegisterCommand(""thesaurus me"", func(query string) (string, error)', '{', 'fmt.Println(""thesaurus"", query)', 'return', '""thesaurused""', ',', 'nil', '})', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'result', ',', 'err', ':=', 'Bot.Execute(""search me please"")', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'fmt.Println(result)', '}', 'Obviously', ""there's"", 'a', 'lot', 'of', 'checks', 'missing', 'here,', 'but', 'this', 'is', 'the', 'basic', 'idea.']"
1068,44833099,"

However, if you just want to delete a file, you're probably better off using os.Remove to directly delete a file rather than forking out to the shell to do so.
","['del', 'is', 'not', 'an', 'executable,', ""it's"", 'a', 'built-in', 'command.', 'exec.Command', 'allows', 'you', 'to', 'fork', 'out', 'to', 'another', 'executable.', 'To', 'use', 'shell', 'commands,', 'you', 'would', 'have', 'to', 'call', 'the', 'shell', 'executable,', 'and', 'pass', 'in', 'the', 'built-in', 'command', '(and', 'parameters)', 'you', 'want', 'executed:', 'cmd', ':=', 'exec.Command(""cmd.exe"", ""/C"", ""del C:\\\\trial\\\\now.txt"")', 'Note', 'that', 'you', 'also', 'have', 'to', 'escape', 'backslashes', 'in', 'strings', 'as', 'above,', 'or', 'use', 'backtick-quoted', 'strings:', 'cmd', ':=', 'exec.Command(""cmd.exe"", ""/C"", `del C:\\trial\\now.txt`)', 'However,', 'if', 'you', 'just', 'want', 'to', 'delete', 'a', 'file,', ""you're"", 'probably', 'better', 'off', 'using', 'os.Remove', 'to', 'directly', 'delete', 'a', 'file', 'rather', 'than', 'forking', 'out', 'to', 'the', 'shell', 'to', 'do', 'so.']"
1069,44833287,"

See String Literals in the Go Language Spec for more.
","['In', 'addition', 'to', 'the', 'problem', 'with', 'the', 'executable,', 'your', 'path', 'string', 'is', 'not', 'what', 'you', 'think', 'it', 'is.', 'cmd', ':=', 'exec.Command(""del"", ""C:\\trial\\now.txt"")', 'The', '\\t', 'will', 'be', 'interpreted', 'as', 'a', 'tab,', 'and', 'the', '\\n', 'as', 'a', 'newline.', 'To', 'avoid', 'this,', 'use', '``', 'which', 'has', 'no', 'special', 'characters', 'and', 'no', 'escape,', 'not', 'even', '\\.', 'A', 'great', 'relief', 'for', 'Windows', 'users!', 'cmd', ':=', 'exec.Command(""del"", `C:\\trial\\now.txt`)', 'See', 'String', 'Literals', 'in', 'the', 'Go', 'Language', 'Spec', 'for', 'more.']"
1070,44847651,"
","['Per', 'the', 'documentation,', ""they're"", 'strings.', 'Just', 'type', 'cast', 'to', 'string:', 'asStr', ':=', 'string', '(', 'myTplJsObj', ')']"
1071,44852377,"I think there is a bit of a misunderstanding here. openssl rsautl -sign does not encrypt the data. It produces a signature. The contents in your secret file is not ""secret"", encrypted. Rather, it is a signature of the text ""secret"" that is signed with the private key.

Using the public key, you can -verify the signature, but this isn't really what you are trying to do. It sounds like you want encrypt/decrypt, not sign/verify.

Use the -encrypt and -decrypt options of rsautl. Encryption happens with the public key, and decryption happens with the private key.

Keep in mind there are limits to the amount of data you can encrypt with RSA. Typically, you would protect a symmetric key with RSA, and use the symmetric key to do bulk encryption and decryption.
",[]
1072,44853488,"
","['I', 'fully', 'understood', 'my', 'question,', 'it', 'was', 'about', 'RSA_public_decrypt', 'method', 'of', 'openssl:', 'https://www.openssl.org/docs/man1.1.0/crypto/RSA_public_decrypt.html', 'I', 'did', 'not', 'found', 'any', 'pure-golang', 'realization.', 'Realization', 'with', 'cgo:', 'https://github.com/dgkang/rsa/blob/master/rsa/rsa.go', 'UPD,', 'work', 'for', 'me:', 'func', 'RSA_public_decrypt', '(', 'pubKey', '*', 'rsa', '.', 'PublicKey', ',', 'data', '[]', 'byte', ')', '[]', 'byte', '{', 'c', ':=', 'new', '(', 'big', '.', 'Int', ')', 'm', ':=', 'new', '(', 'big', '.', 'Int', ')', 'm.SetBytes(data)', 'e', ':=', 'big.NewInt(int64(pubKey.E))', 'c.Exp(m, e, pubKey.N)', 'out', ':=', 'c.Bytes()', 'skip', ':=', '0', 'for', 'i', ':=', '2', ';', 'i', '<', 'len', '(', 'out', ');', 'i', '++', '{', 'if', 'i', '+', '1', '>=', 'len', '(', 'out', ')', '{', 'break', '}', 'if', 'out', '[', 'i', ']', '==', '0xff', '&&', 'out', '[', 'i', '+', '1', ']', '==', '0', '{', 'skip', '=', 'i', '+', '2', 'break', '}', '}', 'return', 'out', '[', 'skip', ':]', '}']"
1073,44890804,"
The client ACKs (responds to server) that it has also updated local state to be synchronous with the server.


If 4. doesn't happen, then the server rolls back the transaction done in 1. and the entire operation of 1 - 4 is atomic.
","['The', 'client', 'ACKs', '(responds', 'to', 'server)', 'that', 'it', 'has', 'also', 'updated', 'local', 'state', 'to', 'be', 'synchronous', 'with', 'the', 'server.', 'If', '4.', ""doesn't"", 'happen,', 'then', 'the', 'server', 'rolls', 'back', 'the', 'transaction', 'done', 'in', '1.', 'and', 'the', 'entire', 'operation', 'of', '1', '-', '4', 'is', 'atomic.']"
1074,44895648,"

Please have a look on example code: https://play.golang.org/p/4KFqRuxcx2
","['You', 'have', 'to', 'define', 'slice', 'of', 'Weather', 'struct', 'in', 'WeatherData.', 'Uncomment', 'Weather', 'struct', 'and', 'update', 'WeatherData', 'struct', 'to', 'following.', '//', 'WeatherData', 'struct', 'to', 'collect', 'data', 'from', 'the', 'API', 'call', 'type', 'WeatherData', 'struct', '{', 'Wind', 'Wind', 'json', ':', '""wind""', 'Sys', 'Sys', 'json', ':', '""sys""', 'Weather', '[]', 'Weather', 'json', ':', '""weather""', 'Name', 'string', 'json', ':', '""name""', '}', 'Please', 'have', 'a', 'look', 'on', 'example', 'code:', 'https://play.golang.org/p/4KFqRuxcx2']"
1075,44950870,"


https://play.golang.org/p/_wxw8-PyMO
https://goplay.space/#wWU0Stv5zO

","['Realizing', 'that', 'we', 'are', 'calculating', 'an', 'integral', 'and', 'remembering', 'that', 'integrals', 'are', 'usually', 'calculated', 'using', 'primitive', 'functions,', 'which', 'can', 'be', 'taken', 'to', 'be', 'the', 'integral', 'from', 'some', 'fixed', 'time,', 'we', 'can', 'write', 'the', 'following', 'code.', 'The', 'function', 'primitive()', 'gives', 'the', 'number', 'of', 'workdays', 'since', '3', 'January', '2000,', 'chosen', 'to', 'be', 'a', 'Monday', 'to', 'simplify', 'the', 'formula.', 'The', 'number', 'of', 'workdays', 'between', 'two', 'dates', 'is', 'then', 'given', 'by', 'the', 'difference', 'of', 'primitive()', 'for', 'the', 'two', 'days.', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'type', 'Date', 'struct', '{', 'year', 'int', 'month', 'time', '.', 'Month', 'day', 'int', '}', 'func', 'date2unix', '(', 'd', 'Date', ',', 'loc', '*', 'time', '.', 'Location', ')', 'int64', '{', 'return', 'time.Date(d.year, d.month, d.day, 0, 0, 0, 0, loc).Unix()', '}', 'func', 'primitive', '(', 'd', 'Date', ',', 'loc', '*', 'time', '.', 'Location', ')', 'int64', '{', '//', '3', 'January', '2000', 'was', 'a', 'Monday', 'base', ':=', 'Date', '{', '2000', ',', 'time', '.', 'January', ',', '3', '}', 'seconds', ':=', 'date2unix', '(', 'd', ',', 'loc', ')', '-', 'date2unix', '(', 'base', ',', 'loc', ')', 'weeks', ':=', 'seconds', '/', '(', '7', '*', '24', '*', '60', '*', '60', ')', 'seconds_into_week', ':=', 'seconds', '%', '(', '7', '*', '24', '*', '60', '*', '60', ')', 'workdays', ':=', 'seconds_into_week', '/', '(', '24', '*', '60', '*', '60', ')', 'if', 'workdays', '>', '5', '{', 'workdays', '=', '5', '}', 'return', '5', '*', 'weeks', '+', 'workdays', '}', 'func', 'DayCountExcludingWeekends', '(', 'from', ',', 'to', 'Date', ',', 'loc', '*', 'time', '.', 'Location', ')', 'int', '{', 'return', 'int', '(', 'primitive', '(', 'to', ',', 'loc', ')', '-', 'primitive', '(', 'from', ',', 'loc', '))', '}', 'func', 'main', '()', '{', 'loc', ',', 'err', ':=', 'time.LoadLocation(""Europe/Stockholm"")', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'f', ':=', 'Date', '{', '2017', ',', '6', ',', '28', '}', 't', ':=', 'Date', '{', '2017', ',', '7', ',', '6', '}', 'fmt.Println(DayCountExcludingWeekends(f, t, loc))', '}', 'https://play.golang.org/p/_wxw8-PyMO', 'https://goplay.space/#wWU0Stv5zO']"
1076,44960239,"In the end, the solution was to add an expires-at property like @colini and @bazza mentioned, and to drop timed out messages from the queue after each heartbeat. However, doing so and satisfying all requirements of my application was proving to be more difficult than first glance, so I ended up using RabbitMQ, whose ttl-expires argument provided the desired functionality.
","['In', 'the', 'end,', 'the', 'solution', 'was', 'to', 'add', 'an', 'expires-at', 'property', 'like', '@colini', 'and', '@bazza', 'mentioned,', 'and', 'to', 'drop', 'timed', 'out', 'messages', 'from', 'the', 'queue', 'after', 'each', 'heartbeat.', 'However,', 'doing', 'so', 'and', 'satisfying', 'all', 'requirements', 'of', 'my', 'application', 'was', 'proving', 'to', 'be', 'more', 'difficult', 'than', 'first', 'glance,', 'so', 'I', 'ended', 'up', 'using', 'RabbitMQ,', 'whose', 'ttl-expires', 'argument', 'provided', 'the', 'desired', 'functionality.']"
1077,44987214,"

","[""You've"", 'got', 'two', 'options:', 'The', 'simplest', 'is', 'load', 'the', 'data', 'in', 'main', 'before', 'any', 'other', 'processing', 'starts.', 'If', 'probability', 'that', 'you', 'will', 'read', 'the', 'data', 'is', 'very', 'high', 'and', 'there', 'is', 'no', 'other', 'reason', 'to', 'avoid', 'doing', 'it', 'immediately,', 'why', 'not?', 'Load', 'the', 'data', 'with', 'sync.Once.', 'Something', 'like:', 'var', 'dataLoaded', 'sync', '.', 'Once', 'var', 'data', 'DataType', '=', 'nil', 'func', 'LookupPostCode', '(', 'some_args', ')', '{', 'once.Do(func()', '{', 'data', '=', 'LoadData', '(', 'some_subset_of_some_args', ')', '})', '//', 'and', 'here', 'I', 'know,', 'that', 'data', 'are', 'loaded', '}']"
1078,44992313,"

For graceful shutdown, there's a few packages. I know of this one. 


https://github.com/tylerb/graceful

","['In', 'net/rpc', 'godoc', 'example', 'it', 'just', 'shows', 'how', 'to', 'use', 'global', 'defaults.', 'Instead', 'create', 'your', 'own', 'rpc', 'and', 'http', 'server', 'instances.', 'import', '""net/rpc""', 'import', '""net/http""', 'rpcServer', ':=', 'rpc.NewServer()', '//', 'rpc', 'stuff', 'httpServer', ':=', '&', 'http', '.', 'Server', '{', 'Handler', ':', 'rpcServer', ',', '}', '//', 'graceful', 'shutdown', 'stuff', 'For', 'graceful', 'shutdown,', ""there's"", 'a', 'few', 'packages.', 'I', 'know', 'of', 'this', 'one.', 'https://github.com/tylerb/graceful']"
1079,44993440,"You can use init() function in your package to do this.

Or, if it does not change frequently, you can convert your CSV into a Go Map definition in a separate .go file and it will be 'loaded' at the compile time.
","['You', 'can', 'use', 'init()', 'function', 'in', 'your', 'package', 'to', 'do', 'this.', 'Or,', 'if', 'it', 'does', 'not', 'change', 'frequently,', 'you', 'can', 'convert', 'your', 'CSV', 'into', 'a', 'Go', 'Map', 'definition', 'in', 'a', 'separate', '.go', 'file', 'and', 'it', 'will', 'be', ""'loaded'"", 'at', 'the', 'compile', 'time.']"
1080,45024418,"
","[""Let's"", 'start', 'with', 'using', 'interface{},', 'when', 'you', 'define', 'interface', ""don't"", 'use', 'pointer', 'definition,', 'good', 'read', 'here.', 'type', 'DockerUtil', 'struct', '{', 'Client', 'DockerClient', '}', 'And', 'moby', 'Client', 'implements', 'lot', 'of', 'methods', 'and', 'you', 'would', 'like', 'to', 'do', 'interface', 'for', 'selective', 'methods.', 'Right', 'way', 'to', 'do', 'is', 'via', 'Type', 'assertion.', 'Good', 'read', 'Effective', 'Go', '-', 'Type', 'assertions', 'and', 'Spec', '-', 'Type', 'assertion.', 'Note:', 'try', 'this', 'code,', 'I', ""don't"", 'have', 'docker', 'env', 'in', 'my', 'machine', 'to', 'test.', 'func', 'NewDockerUtil', '()', '(*', 'DockerUtil', ',', 'error', ')', '{', 'dockerClient', ',', 'err', ':=', 'client.NewEnvClient()', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', '&', 'DockerUtil', '{', 'Client', ':', 'dockerClient', '.(', 'DockerClient', '),', '},', 'nil', '}', 'Note:', 'Using', 'DockerUtil.Client,', 'you', 'can', 'call', 'only', 'Ping', 'method', 'since', 'your', 'interface', 'DockerClient', 'has', 'definition', 'of', 'Ping', 'method.', 'If', 'you', 'would', 'like', 'to', 'call', 'all', 'the', 'methods', 'supported', 'by', 'client.Client', 'later', 'on', 'then', 'you', 'have', 'to', 'do', 'type', 'assertion-', 'dockerClient', ':=', 'DockerUtil', '.', 'Client', '.(*', 'client', '.', 'Client', ')']"
1081,45088878,"I had a look on your sample code and its errors. To learn more about interface slice is to refer this Go wiki and SliceTricks.



Generic implementation is bit complex instead you can go with type based implementation. However Type based implementation brings more code on boilerplate/repetitive.

You need to use reflect package for your purpose as @stephen-weinberg mentioned in the comment.

So best starting point would be; try this library github.com/anzhihun/generic and go through library codebase, implement on your own. This library uses reflection. 
",[]
1082,45089928,"

Yes, in generic languages, you would wrap those five lines up in to a nice stdlib method, but Go is not a generic language. Trying to do this with reflection is slow, but that's not the reason to avoid it. Reflection is very complicated. It's hard to get it right. You'll spend much more time figuring out Value and chasing weird corner cases than you'll spend rewriting those five lines of code 12 times (including fixing the time you accidentally cut/paste it wrong, and the one time you mess up i--). Just write them.

Just writing the code lets you decide what equality means. It lets you decide whether to stop searching at the first match, or keep going through the whole list. It lets you do what this program needs rather than focusing on what some generic program might someday need.

I love generic programming. Few things make me happier than creating an elegant fold in Haskell. But that's not the way of Go. In Go you generally just write the code, keep it simple and obvious, and move on.

Andy makes a good point that if you have to do this a lot, list may be a better data structure. And I often find that when I have three types that all seem to have parallel methods, it turns out that they should all have been part of a single struct (do you really need separate lists here at all?) But in any case, stay away from reflection unless you have a very specialized problem where you really mean ""anything"" rather than ""one of these short list of things.""

(It's noteworthy that you call out append(). I don't think it's possible to write append() in Go. That's why it had to be part of the language rather than a stdlib function. When I started working in Go, I took that as a significant flaw in the language. The longer I've worked in Go, the more I've found it not to matter so much. You just write the code and move on.)
","['Trying', 'to', 'make', 'Go', 'generic', 'is', 'one', 'of', 'the', 'great', 'pitfalls', 'for', 'new', 'Go', 'devs.', 'Stop.', ""You're"", 'saving', 'five', 'of', 'lines', 'of', 'code:', 'for', 'i', ':=', 'len', '(', 'foos', ')', '-', '1', ';', 'i', '>=', '0', ';', 'i', '--', '{', 'if', 'foos', '[', 'i', ']', '==', 'foo1', '{', 'foos', '=', 'append', '(', 'foos', '[:', 'i', '],', 'foos', '[', 'i', '+', '1', ':]...)', '}', '}', 'Yes,', 'in', 'generic', 'languages,', 'you', 'would', 'wrap', 'those', 'five', 'lines', 'up', 'in', 'to', 'a', 'nice', 'stdlib', 'method,', 'but', 'Go', 'is', 'not', 'a', 'generic', 'language.', 'Trying', 'to', 'do', 'this', 'with', 'reflection', 'is', 'slow,', 'but', ""that's"", 'not', 'the', 'reason', 'to', 'avoid', 'it.', 'Reflection', 'is', 'very', 'complicated.', ""It's"", 'hard', 'to', 'get', 'it', 'right.', ""You'll"", 'spend', 'much', 'more', 'time', 'figuring', 'out', 'Value', 'and', 'chasing', 'weird', 'corner', 'cases', 'than', ""you'll"", 'spend', 'rewriting', 'those', 'five', 'lines', 'of', 'code', '12', 'times', '(including', 'fixing', 'the', 'time', 'you', 'accidentally', 'cut/paste', 'it', 'wrong,', 'and', 'the', 'one', 'time', 'you', 'mess', 'up', 'i--).', 'Just', 'write', 'them.', 'Just', 'writing', 'the', 'code', 'lets', 'you', 'decide', 'what', 'equality', 'means.', 'It', 'lets', 'you', 'decide', 'whether', 'to', 'stop', 'searching', 'at', 'the', 'first', 'match,', 'or', 'keep', 'going', 'through', 'the', 'whole', 'list.', 'It', 'lets', 'you', 'do', 'what', 'this', 'program', 'needs', 'rather', 'than', 'focusing', 'on', 'what', 'some', 'generic', 'program', 'might', 'someday', 'need.', 'I', 'love', 'generic', 'programming.', 'Few', 'things', 'make', 'me', 'happier', 'than', 'creating', 'an', 'elegant', 'fold', 'in', 'Haskell.', 'But', ""that's"", 'not', 'the', 'way', 'of', 'Go.', 'In', 'Go', 'you', 'generally', 'just', 'write', 'the', 'code,', 'keep', 'it', 'simple', 'and', 'obvious,', 'and', 'move', 'on.', 'Andy', 'makes', 'a', 'good', 'point', 'that', 'if', 'you', 'have', 'to', 'do', 'this', 'a', 'lot,', 'list', 'may', 'be', 'a', 'better', 'data', 'structure.', 'And', 'I', 'often', 'find', 'that', 'when', 'I', 'have', 'three', 'types', 'that', 'all', 'seem', 'to', 'have', 'parallel', 'methods,', 'it', 'turns', 'out', 'that', 'they', 'should', 'all', 'have', 'been', 'part', 'of', 'a', 'single', 'struct', '(do', 'you', 'really', 'need', 'separate', 'lists', 'here', 'at', 'all?)', 'But', 'in', 'any', 'case,', 'stay', 'away', 'from', 'reflection', 'unless', 'you', 'have', 'a', 'very', 'specialized', 'problem', 'where', 'you', 'really', 'mean', '""anything""', 'rather', 'than', '""one', 'of', 'these', 'short', 'list', 'of', 'things.""', ""(It's"", 'noteworthy', 'that', 'you', 'call', 'out', 'append().', 'I', ""don't"", 'think', ""it's"", 'possible', 'to', 'write', 'append()', 'in', 'Go.', ""That's"", 'why', 'it', 'had', 'to', 'be', 'part', 'of', 'the', 'language', 'rather', 'than', 'a', 'stdlib', 'function.', 'When', 'I', 'started', 'working', 'in', 'Go,', 'I', 'took', 'that', 'as', 'a', 'significant', 'flaw', 'in', 'the', 'language.', 'The', 'longer', ""I've"", 'worked', 'in', 'Go,', 'the', 'more', ""I've"", 'found', 'it', 'not', 'to', 'matter', 'so', 'much.', 'You', 'just', 'write', 'the', 'code', 'and', 'move', 'on.)']"
1083,45098675," to change the settings of indexing policy on Azure portal as the figure below, or using REST API Replace a Collection.



Hope it helps.
","['It', 'seems', 'that', 'mongo', 'wire', 'protocol', 'does', 'not', 'support', 'the', 'feature', 'of', 'indexing', 'policy', 'change.', 'As', '@DavidMakogon', 'said,', 'please', 'refer', 'to', 'the', 'document', 'How', 'does', 'Azure', 'Cosmos', 'DB', 'index', 'data', 'to', 'change', 'the', 'settings', 'of', 'indexing', 'policy', 'on', 'Azure', 'portal', 'as', 'the', 'figure', 'below,', 'or', 'using', 'REST', 'API', 'Replace', 'a', 'Collection.', 'Hope', 'it', 'helps.']"
1084,45108529,"Find the answer: just need client instead of conn:

client, err := ssh.Dial(""tcp"", addr, config)

sftp, err := sftp.NewClient(client)
","['Find', 'the', 'answer:', 'just', 'need', 'client', 'instead', 'of', 'conn:', 'client,', 'err', ':=', 'ssh.Dial(""tcp"",', 'addr,', 'config)', 'sftp,', 'err', ':=', 'sftp.NewClient(client)']"
1085,45180310,"

Or William King's solution, which is better.
","['The', 'current', 'accepted', 'answer', '(as', 'of', 'July', '2017)', 'fails', 'for', 'JSON', 'arrays', 'and', ""hasn't"", 'been', 'updated:', 'https://repl.it/J8H0/10', 'Try', 'this:', 'func', 'isJSON', '(', 's', 'string', ')', 'bool', '{', 'var', 'js', 'interface', '{}', 'return', 'json.Unmarshal([]byte(s), &js)', '==', 'nil', '}', 'Or', 'William', ""King's"", 'solution,', 'which', 'is', 'better.']"
1086,45209033,"
","[""It's"", 'called', 'conversion', 'in', 'Go', '(not', 'casting),', 'and', 'this', 'is', 'covered', 'in', 'Spec:', 'Conversions:', 'Specific', 'rules', 'apply', 'to', '(non-constant)', 'conversions', 'between', 'numeric', 'types', 'or', 'to', 'and', 'from', 'a', 'string', 'type.', 'These', 'conversions', 'may', 'change', 'the', 'representation', 'of', 'x', 'and', 'incur', 'a', 'run-time', 'cost.', 'All', 'other', 'conversions', 'only', 'change', 'the', 'type', 'but', 'not', 'the', 'representation', 'of', 'x.', 'So', 'generally', 'converting', 'does', 'not', 'make', 'a', 'copy,', 'only', 'changes', 'the', 'type.', 'Converting', 'to', '/', 'from', 'string', 'usually', 'does,', 'as', 'string', 'values', 'are', 'immutable,', 'and', 'for', 'example', 'if', 'converting', 'a', 'string', 'to', '[]byte', 'would', 'not', 'make', 'a', 'copy,', 'you', 'could', 'change', 'the', 'content', 'of', 'the', 'string', 'by', 'changing', 'elements', 'of', 'the', 'resulting', 'byte', 'slice.', 'See', 'related', 'question:', 'Does', 'convertion', 'between', 'alias', 'types', 'in', 'Go', 'create', 'copies?', 'There', 'are', 'some', 'exceptions', '(compiler', 'optimizations)', 'when', 'converting', 'to', '/', 'from', 'string', 'does', 'not', 'make', 'a', 'copy,', 'for', 'details', 'see', 'golang:', '[]byte(string)', 'vs', '[]byte(*string).', 'If', 'you', 'already', 'have', 'your', 'JSON', 'content', 'as', 'a', 'string', 'value', 'which', 'you', 'want', 'to', 'unmarshal,', 'you', 'should', 'not', 'convert', 'it', 'to', '[]byte', 'just', 'for', 'the', 'sake', 'of', 'unmarshaling.', 'Instead', 'use', 'strings.NewReader()', 'to', 'obtain', 'an', 'io.Reader', 'which', 'reads', 'from', 'the', 'passed', 'string', 'value,', 'and', 'pass', 'this', 'reader', 'to', 'json.NewDecoder(),', 'so', 'you', 'can', 'unmarshal', 'without', 'having', 'to', 'make', 'a', 'copy', 'of', 'your', 'big', 'input', 'JSON', 'string.', 'This', 'is', 'how', 'it', 'could', 'look', 'like:', 'input', ':=', '""BIG JSON INPUT""', 'dec', ':=', 'json.NewDecoder(strings.NewReader(input))', 'var', 'result', 'YourResultType', 'if', 'err', ':=', 'dec.Decode(&result)', ';', 'err', '!=', 'nil', '{', '//', 'Handle', 'error', '}', 'Also', 'note', 'that', 'this', 'solution', 'can', 'further', 'be', 'optimized', 'if', 'the', 'big', 'JSON', 'string', 'is', 'read', 'from', 'an', 'io.Reader,', 'in', 'which', 'case', 'you', 'can', 'completely', 'omit', 'reading', 'it', 'first,', 'just', 'pass', 'that', 'to', 'json.NewDecoder()', 'directly,', 'e.g.:', 'dec', ':=', 'json.NewDecoder(jsonSource)', 'var', 'result', 'YourResultType', 'if', 'err', ':=', 'dec.Decode(&result)', ';', 'err', '!=', 'nil', '{', '//', 'Handle', 'error', '}']"
1087,45299316,"
","['You', 'can', 'use', 'the', 'map', '[', 'string', ']', 'interface', '{}', 'result', 'and', 'typecast', 'the', 'relevant', 'parts,', 'e.g.:', 'o', '[', '""ret""', '].([]', 'interface', '{})', 'would', 'get', 'the', 'array', 'and', 'continue', 'so', 'on.', 'However,', 'this', 'is', 'tedious', 'and', 'you', 'need', 'to', 'check', 'for', 'values', 'being', 'set', 'etc', 'as', 'well.', 'Instead,', ""I'd"", 'recommend', 'you', 'use', 'the', 'handy', 'JSON', 'to', 'Go', 'tool', 'that', 'can', 'automatically', 'generate', 'a', 'struct', 'definition', 'for', 'you', 'to', 'paste', 'into', 'your', 'Go', 'code', 'when', 'given', 'some', 'input', 'JSON.', 'Obviously', 'you', 'might', 'need', 'to', 'amend', 'this', 'to', 'suit', 'your', 'needs', 'as', 'you', 'know', 'what', 'valid', 'formats', 'the', 'input', 'can', 'take.', 'However,', 'this', 'tool', 'saves', 'a', 'lot', 'of', 'tedious', 'boilerplate', 'code', 'writing!', 'For', 'example,', 'for', 'the', 'JSON', 'above,', 'it', 'generates:', 'type', 'AutoGenerated', 'struct', '{', 'Profile', 'struct', '{', 'ExecutionTime', 'int', 'json', ':', '""execution_time""', 'ServerName', 'string', 'json', ':', '""server_name""', '}', 'json', ':', '""profile""', 'Result', 'string', 'json', ':', '""result""', 'Ret', '[]', 'struct', '{', 'Alias', 'string', 'json', ':', '""alias""', 'AllParents', '[]', 'int', 'json', ':', '""all_parents""', 'Bankrupt', 'bool', 'json', ':', '""bankrupt""', 'Block', 'bool', 'json', ':', '""block""', 'Card', 'interface', '{}', 'json', ':', '""card""', '}', 'json', ':', '""ret""', '}']"
1088,45308172,"

fix it?

If that is the case, you may not strictly need your app on :9000 to listen https. It may simplify your deployment or cert management to just have it listen http and have caddy manage all the certs.
","['From', 'the', 'caddy', 'docs', 'to', 'is', 'the', 'destination', 'endpoint', 'to', 'proxy', 'to.', 'At', 'least', 'one', 'is', 'required,', 'but', 'multiple', 'may', 'be', 'specified.', 'If', 'a', 'scheme', '(http/https)', 'is', 'not', 'specified,', 'http', 'is', 'used.', 'Unix', 'sockets', 'may', 'also', 'be', 'used', 'by', 'prefixing', '""unix:"".', 'So', 'maybe', 'it', 'is', 'sending', 'http', 'requests', 'to', 'the', 'proxied', 'https', 'endpoint.', 'Does', 'mysite', '.', 'com', '{', 'proxy', '/', 'https', '://', 'localhost', ':', '9000', '{', 'max_fails', '1', '}', 'log', 'logfile', '}', 'fix', 'it?', 'If', 'that', 'is', 'the', 'case,', 'you', 'may', 'not', 'strictly', 'need', 'your', 'app', 'on', ':9000', 'to', 'listen', 'https.', 'It', 'may', 'simplify', 'your', 'deployment', 'or', 'cert', 'management', 'to', 'just', 'have', 'it', 'listen', 'http', 'and', 'have', 'caddy', 'manage', 'all', 'the', 'certs.']"
1089,45315040,"
","['Using', '../css', 'on', 'the', 'web', 'should', 'be', 'avoided', 'and', 'likely', 'is', 'your', 'error', 'source.', 'Your', 'go', 'server', 'likely', 'cannot', 'resolve', 'the', 'file', '(because', 'you', ""don't"", 'have', 'a', 'handler', 'for', 'the', '../css', 'URI).', 'So', 'you', 'should', 'change', 'the', '../css', 'part', 'to', '/css', 'and', 'tell', 'your', 'server', '(you', ""didn't"", 'provide', 'details,', 'so', 'I', 'cannot', 'show', 'you', 'code)', 'to', 'handle', '/css', 'URIs', 'by', 'serving', 'the', 'files.', 'Assuming', 'that', 'you', 'are', 'using', 'the', 'default', 'net/http', 'mux,', 'your', 'code', 'should', 'look', 'something', 'like:', 'mux', ':=', 'http.NewServeMux()', 'mux.Handle(""/css/"", http.StripPrefix(""/css/"", http.FileServer(http.Dir(""css""))))', 'http.ListenAndServe("":8080"", mux)']"
1090,45317241,"First, it's a slice not an array. Arrays and slices in Go are very different, arrays have a fixed size that is part of the type. I had trouble with this at first too :)


Not really. Any if the three is correct, and any difference should be too small to worry about. In my own code I generally use whatever is easiest in a particular case.
0
Nothing, until you need to add an item, then whatever it costs to allocate the storage needed.

","['First,', ""it's"", 'a', 'slice', 'not', 'an', 'array.', 'Arrays', 'and', 'slices', 'in', 'Go', 'are', 'very', 'different,', 'arrays', 'have', 'a', 'fixed', 'size', 'that', 'is', 'part', 'of', 'the', 'type.', 'I', 'had', 'trouble', 'with', 'this', 'at', 'first', 'too', ':)', 'Not', 'really.', 'Any', 'if', 'the', 'three', 'is', 'correct,', 'and', 'any', 'difference', 'should', 'be', 'too', 'small', 'to', 'worry', 'about.', 'In', 'my', 'own', 'code', 'I', 'generally', 'use', 'whatever', 'is', 'easiest', 'in', 'a', 'particular', 'case.', '0', 'Nothing,', 'until', 'you', 'need', 'to', 'add', 'an', 'item,', 'then', 'whatever', 'it', 'costs', 'to', 'allocate', 'the', 'storage', 'needed.']"
1091,45318222,"
  Is there any difference between the 3 ways to make an empty array?


if empty array means len(array)==0, the answer is no, but actually only myArr3==nil is true.


  What is the default capacity of an array when unspecified?


the default capacity will be same with the len you specify.


  What is the performance cost of using arrays with unspecified capacity?


none
",[]
1092,45331396,"
","['What', 'is', 'the', 'performance', 'cost', 'of', 'using', 'arrays', 'with', 'unspecified', 'capacity?', 'There', 'is', 'certainly', 'a', 'cost', 'when', 'you', 'start', 'populating', 'the', 'slice.', 'If', 'you', 'know', 'how', 'big', 'the', 'slice', 'should', 'grow,', 'you', 'can', 'allocate', 'capacity', 'of', 'the', 'underlying', 'array', 'from', 'the', 'very', 'begging', 'as', 'opposed', 'to', 'reallocating', 'every', 'time', 'the', 'underlying', 'array', 'fills', 'up.', 'Here', 'is', 'a', 'simple', 'example', 'with', 'timing:', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'limit', ':=', '500', '*', '1000', '*', '1000', 'mySlice', ':=', 'make', '([]', 'int', ',', '0', ',', 'limit', ')', '//vs mySlice := make([]int, 0)', 'for', 'i', ':=', '0', ';', 'i', '<', 'limit', ';', 'i', '++', '{', 'mySlice', '=', 'append', '(', 'mySlice', ',', 'i', ')', '}', 'fmt.Println(len(mySlice))', '}', 'On', 'my', 'machine:', 'time', 'go', 'run', 'my_file', '.', 'go', 'With', 'preallocation:', 'real', '0', 'm2', '.', '129', 's', 'user', '0', 'm2', '.', '073', 's', 'sys', '0', 'm1', '.', '357', 's', 'Without', 'preallocation', 'real', '0', 'm7', '.', '673', 's', 'user', '0', 'm9', '.', '0', '95', 's', 'sys', '0', 'm3', '.', '462', 's']"
1093,45333669,"
","['Its', 'important', 'to', 'check', 'the', 'returned', 'error', 'always.', 'if', 'err', ':=', 'xml.Unmarshal([]byte(xmlRawData), &xmlData)', ';', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'The', 'error', ""you're"", 'getting', 'is', 'cannot', 'unmarshal', 'into', 'interface', '{}', 'Empty', 'interface', 'cannot', 'be', 'unmarshalled', 'since', 'the', 'empty', 'interface', ""doesn't"", 'have', 'any', 'exported', 'fields', 'to', 'map', 'the', 'xml', 'keys/values', 'to.', 'However', 'there', 'is', 'way', 'to', 'get', 'around.', 'Implementing', 'xml.Unmarshaler', 'interface', 'on', 'your', 'VendorMapInfo', 'struct.', 'Example:', 'Your', 'updated', 'code', 'type', 'VendorMapInfo', 'struct', '{', 'MapHierarchyString', 'string', 'xml', ':', '""mapHierarchyString,attr""', 'FloorRefID', 'interface', '{}', 'xml', ':', '""floorRefId,attr""', 'Image', 'Image', 'xml', ':', '""Image""', 'FloorDimension', 'VendorFloorDimension', '}', 'type', 'Image', 'struct', '{', 'Name', 'string', 'xml', ':', '""imageName,attr""', '}', 'func', '(', 'mf', '*', 'VendorMapInfo', ')', 'UnmarshalXML', '(', 'd', '*', 'xml', '.', 'Decoder', ',', 'start', 'xml', '.', 'StartElement', ')', 'error', '{', '//', 'Attributes', 'for', '_', ',', 'attr', ':=', 'range', 'start', '.', 'Attr', '{', 'switch', 'attr', '.', 'Name', '.', 'Local', '{', 'case', '""mapHierarchyString""', ':', 'mf', '.', 'MapHierarchyString', '=', 'attr', '.', 'Value', 'case', '""floorRefId""', ':', 'mf', '.', 'FloorRefID', '=', 'findFloorRefIDType', '(', 'attr', '.', 'Value', ')', '}', '}', 'for', '{', 'token', ',', 'err', ':=', 'd.Token()', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'switch', 'el', ':=', 'token', '.(', 'type', ')', '{', 'case', 'xml', '.', 'StartElement', ':', 'if', 'el', '.', 'Name', '.', 'Local', '==', '""Image""', '{', 'item', ':=', 'new', '(', 'Image', ')', 'if', 'err', '=', 'd.DecodeElement(item, &el)', ';', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'mf', '.', 'Image', '=', '*', 'item', '}', 'case', 'xml', '.', 'EndElement', ':', 'if', 'el', '==', 'start.End()', '{', 'return', 'nil', '}', '}', '}', 'return', 'nil', '}', 'Complete', 'code,', 'play', 'link:', 'https://play.golang.org/p/wZQOsQv0Nq', 'Output:', '{', 'Locations', ':{', 'Space', ':', 'Local', ':}', 'WirelessClientLocation', ':[{', 'MacAddress', ':', '0', '0', ':', '0', '0', ':', '0', '0', ':', '0', '0', ':', '0', '0', ':', '0', '0', 'MapInfo', ':{', 'MapHierarchyString', ':', 'Head', 'office', '>', 'Ground', 'floor', '>', 'Store', 'FloorRefID', ':-', '1122334455667789', 'Image', ':{', 'Name', ':', 'floorPlan1', '.', 'png', '}', 'FloorDimension', ':{', 'Length', ':', '0', 'Width', ':', '0', 'Height', ':', '0', 'OffsetX', ':', '0', 'OffsetY', ':', '0', 'Unit', ':}}}', '{', 'MacAddress', ':', '11', ':', '11', ':', '11', ':', '11', ':', '11', ':', '11', 'MapInfo', ':{', 'MapHierarchyString', ':', 'Head', 'office', '>', 'Ground', 'floor', '>', 'Store', 'FloorRefID', ':-', '1122334455667789', 'Image', ':{', 'Name', ':', 'floorPlan1', '.', 'png', '}', 'FloorDimension', ':{', 'Length', ':', '0', 'Width', ':', '0', 'Height', ':', '0', 'OffsetX', ':', '0', 'OffsetY', ':', '0', 'Unit', ':}}}', '{', 'MacAddress', ':', '26', ':', 'cd', ':', '96', ':', '46', ':', '0', 'b', ':', '2', 'b', 'MapInfo', ':{', 'MapHierarchyString', ':', 'FloorRefID', ':', '0', 'Image', ':{', 'Name', ':}', 'FloorDimension', ':{', 'Length', ':', '0', 'Width', ':', '0', 'Height', ':', '0', 'OffsetX', ':', '0', 'OffsetY', ':', '0', 'Unit', ':}}}]}']"
1094,45368604,"Monitoring process exits because p.Wait() does not block.

From the docs:


  On most operating systems, the Process must be a child of the current
  process or an error will be returned.


You can perhaps poll the process pool to check if the process still exists.
",[]
1095,45379942,"
","['This', 'is', 'maybe', 'related', 'to', 'some', 'docker-compose', 'bug.', 'Try', 'cleaning', 'containers', 'docker-compose', 'down', 'Alternatively', 'this', '(you', 'will', 'lose', 'your', 'container', 'data):', 'docker', 'rm', '-', 'f', '$(', 'docker', 'ps', '-', 'a', '-', 'q', ')']"
1096,45388909,"

You can specify a behaviour on that event by setting the Example.EventHandler property.
","['I', 'think', 'that', 'the', 'best', 'answer', 'would', 'be', 'an', 'example.', 'Look', 'at', 'Client.CheckRedirect', 'in', 'the', 'documentation.', 'type', 'Client', 'struct', '{', '//', '(...)', 'CheckRedirect', 'func', '(', 'req', '*', 'Request', ',', 'via', '[]*', 'Request', ')', 'error', '}', 'This', 'is', 'a', 'function', 'that', 'is', 'being', 'invoked', 'whenever', 'a', 'http.Client', 'has', 'a', 'redirect', 'response.', 'By', 'the', 'fact,', 'that', 'this', 'function', 'is', 'a', 'public', 'property,', 'you', 'can', 'set', 'this', 'when', 'creating', 'the', 'Client', 'object', 'or', 'afterwards', 'and', 'thus', 'you', 'can', 'define', 'custom', 'behaviour', 'on', 'such', 'case.', 'client', ':=', '&', 'http', '.', 'Client', '{', 'CheckRedirect', ':', 'func', '(', 'req', '*', 'http', '.', 'Request', ',', 'via', '[]*', 'http', '.', 'Request', ')', 'error', '{', 'return', 'http', '.', 'ErrUseLastResponse', '}', '}', 'Function', 'properties', 'are', 'just', 'a', 'delegates', 'of', 'custom', 'behaviour', '(and', 'not', 'only!).', 'Another', 'example', 'would', 'be', 'creating', 'an', 'object', 'which', 'has', 'an', 'event.', 'type', 'Example', 'struct', '{', 'EventHandler', 'func', '(', 'params', '[]', 'interface', '{})', '}', 'You', 'can', 'specify', 'a', 'behaviour', 'on', 'that', 'event', 'by', 'setting', 'the', 'Example.EventHandler', 'property.']"
1097,45395478,"It allows you to customize the function for a type without making it be from that type. 
","['It', 'allows', 'you', 'to', 'customize', 'the', 'function', 'for', 'a', 'type', 'without', 'making', 'it', 'be', 'from', 'that', 'type.']"
1098,45428021,"

See this playground showing those examples:

https://play.golang.org/p/CA8P7gYpok
","['Yes,', 'you', 'can', 'do', 'that.', 'It', 'does', 'not', 'need', 'to', 'go', 'anywhere.', 'Purpose', 'of', 'the', 'Done', 'channel', 'usually', 'is', 'just', 'to', 'signal', 'the', 'done', 'event,', 'so', 'the', 'value', 'is', 'not', 'relevant', 'and', 'can', 'be', 'ignored.', 'It', 'is', 'the', 'same', 'as', 'when', 'you', 'call', 'a', 'function', 'and', ""don't"", 'assign', 'the', 'return', 'values', 'to', 'variables.', 'Consider', 'this:', 'func', 'getInt', '()', 'int', '{', 'return', '1', '}', 'func', 'main', '()', '{', 'getInt', '()', '// does not ""go anywhere""', '}', 'See', 'this', 'playground', 'showing', 'those', 'examples:', 'https://play.golang.org/p/CA8P7gYpok']"
1099,45443981,"
","['You', 'probably', 'want', 'to', 'limit', 'active', 'concurrent', 'requests', 'to', 'a', 'more', 'sensible', 'number', 'than', '5000.', 'Possibly', 'spin', 'up', '10/20', 'workers', 'and', 'send', 'individual', 'files', 'to', 'them', 'over', 'a', 'channel.', 'The', 'http', 'client', 'should', 'reuse', 'connections', 'for', 'requests,', 'assuming', 'you', 'always', 'read', 'the', 'entire', 'request', 'body,', 'and', 'close', 'it.', 'Something', 'like', 'this:', 'func', 'main', '()', '{', 'http', '.', 'DefaultTransport', '.(*', 'http', '.', 'Transport', ').', 'MaxIdleConnsPerHost', '=', '100', 'for', 'i', ':=', '0', ';', 'i', '<', '10', ';', 'i', '++', '{', 'wg.Add(1)', 'go', 'worker', '()', '}', 'var', 'csvs', '=', '[]', 'string', '{', '""http://example.com/a.csv""', ',', '""http://example.com/b.csv""', '}', 'for', '_', ',', 'u', ':=', 'range', 'csvs', '{', 'ch', '<-', 'u', '}', 'close', '(', 'ch', ')', 'wg.Wait()', '}', 'var', 'ch', '=', 'make', '(', 'chan', 'string', ')', 'var', 'wg', 'sync', '.', 'WaitGroup', 'func', 'worker', '()', '{', 'defer', 'wg.Done()', 'for', 'u', ':=', 'range', 'ch', '{', 'get', '(', 'u', ')', '}', '}', 'func', 'get', '(', 'u', 'string', ')', '{', 'resp', ',', 'err', ':=', 'http.Get(u)', '//', 'check', 'err', 'here', '//', 'make', 'sure', 'we', 'always', 'read', 'rest', 'of', 'body,', 'and', 'close', 'defer', 'resp', '.', 'Body.Close()', 'defer', 'io.Copy(ioutil.Discard, resp.Body)', '//', 'read', 'and', 'decode', '/', 'handle', 'it.', 'Make', 'sure', 'to', 'read', 'all', 'of', 'body.', '}']"
1100,45444981,"
  I understand that sleep will cause the new goroutine to start the other thread for the specified amount of time


This is partly incorrect!

This would be correct on a machine with only one core where only one thread can be executed at a time.

On a machine with multiple cores go can execute as many goroutines parallel as there are cores. With parallel executed goroutines there is no guarantee at all, what will be executed before or after.
","['I', 'understand', 'that', 'sleep', 'will', 'cause', 'the', 'new', 'goroutine', 'to', 'start', 'the', 'other', 'thread', 'for', 'the', 'specified', 'amount', 'of', 'time', 'This', 'is', 'partly', 'incorrect!', 'This', 'would', 'be', 'correct', 'on', 'a', 'machine', 'with', 'only', 'one', 'core', 'where', 'only', 'one', 'thread', 'can', 'be', 'executed', 'at', 'a', 'time.', 'On', 'a', 'machine', 'with', 'multiple', 'cores', 'go', 'can', 'execute', 'as', 'many', 'goroutines', 'parallel', 'as', 'there', 'are', 'cores.', 'With', 'parallel', 'executed', 'goroutines', 'there', 'is', 'no', 'guarantee', 'at', 'all,', 'what', 'will', 'be', 'executed', 'before', 'or', 'after.']"
1101,45444985,"You cannot say with any certainty what order concurrent operations will ""always"" execute in. That's how concurrency works. If you want to control the order of execution, either don't execute concurrently, or use synchronization constructs (e.g. mutex, channel) to control the order of operations.
","['You', 'cannot', 'say', 'with', 'any', 'certainty', 'what', 'order', 'concurrent', 'operations', 'will', '""always""', 'execute', 'in.', ""That's"", 'how', 'concurrency', 'works.', 'If', 'you', 'want', 'to', 'control', 'the', 'order', 'of', 'execution,', 'either', ""don't"", 'execute', 'concurrently,', 'or', 'use', 'synchronization', 'constructs', '(e.g.', 'mutex,', 'channel)', 'to', 'control', 'the', 'order', 'of', 'operations.']"
1102,45445211,"

Lastly, take a look at this article which you might find interesting as well:

http://container-solutions.com/surprise-golang-thread-scheduling/
","['As', 'others', 'have', 'said,', 'there', 'are', 'no', 'guarantees', 'you', 'can', 'assume', 'about', 'the', 'order', 'of', 'execution.', 'The', 'Go', 'scheduler', 'has', 'an', 'internal', 'algorithm', 'that', 'decides', 'how', 'to', 'allocate', 'the', 'processor', 'and', 'there', 'is', 'little', 'you', 'can', 'do', 'to', 'control', 'this', 'without', 'resorting', 'to', 'synchronization', '(which', 'would', 'be', 'the', 'right', 'approach', 'to', 'take', 'here).', 'If', 'you', 'are', 'interested', 'in', 'learning', 'how', 'to', 'control', 'synchronization', 'between', 'tasks,', 'take', 'a', 'look', 'at', 'the', 'sync', 'package,', 'and', 'also', 'at', 'how', 'channels', 'work:', 'https://golang.org/pkg/sync/', 'https://tour.golang.org/concurrency/2', 'However,', 'I', 'want', 'to', 'add', 'something', 'that', 'others', 'have', 'not', 'mentioned,', 'and', 'while', 'it', 'does', 'not', 'allow', 'you', 'to', 'control', 'execution', 'order,', 'it', 'might', 'be', 'worth', 'commenting', 'due', 'to', 'the', 'nature', 'of', 'the', 'question.', 'There', 'is', 'a', 'runtime.Gosched', 'function', 'that', 'you', 'can', 'use', 'to', 'hint', 'the', 'scheduler.', 'It', 'would', 'yield', 'the', 'processor', 'so', 'it', 'is', 'likely', 'that', 'other', 'threads', 'will', 'execute.', 'https://golang.org/pkg/runtime/#Gosched', 'If', 'you', 'add', 'a', 'call', 'to', 'Gosched', 'instead', 'of', 'sleeping,', 'in', 'my', 'tests', 'it', 'is', 'much', 'more', 'likely', 'that', '""hello""', 'and', '""world""', 'would', 'output', 'in', 'order', '(though', 'again,', 'there', 'is', 'no', 'guarantee', 'and', 'they', 'will', 'appear', 'in', 'random', 'order', 'at', 'times).', 'Try', 'it', 'like', 'this:', 'package', 'main', 'import', '(', '""fmt""', '""runtime""', ')', 'func', 'say', '(', 's', 'string', ')', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '5', ';', 'i', '++', '{', 'fmt.Println(s, i)', 'runtime.Gosched()', '}', '}', 'func', 'main', '()', '{', 'go', 'say', '(', '""world""', ')', 'say', '(', '""hello""', ')', '}', 'Lastly,', 'take', 'a', 'look', 'at', 'this', 'article', 'which', 'you', 'might', 'find', 'interesting', 'as', 'well:', 'http://container-solutions.com/surprise-golang-thread-scheduling/']"
1103,45512527,"The only way I've been able to make working DLLs is to use buildmode=c-archive and write C stubs for all the go functions I want to export.  But I was working on Windows for this, I haven't had to mess with this on Linux.  It is a path to investigate.
","['The', 'only', 'way', ""I've"", 'been', 'able', 'to', 'make', 'working', 'DLLs', 'is', 'to', 'use', 'buildmode=c-archive', 'and', 'write', 'C', 'stubs', 'for', 'all', 'the', 'go', 'functions', 'I', 'want', 'to', 'export.', 'But', 'I', 'was', 'working', 'on', 'Windows', 'for', 'this,', 'I', ""haven't"", 'had', 'to', 'mess', 'with', 'this', 'on', 'Linux.', 'It', 'is', 'a', 'path', 'to', 'investigate.']"
1104,45597771,"In your sample code you're creating arrays, not slices, hence the error. To create a slice of a specific length, use make, which does not require the length to be a constant. When you create an array, the length must be a constant, because you're creating an unnamed type which must be resolvable at compile time.
","['Lastly,', 'take', 'a', 'look', 'at', 'this', 'article', 'which', 'you', 'might', 'find', 'interesting', 'as', 'well:', 'http://container-solutions.com/surprise-golang-thread-scheduling/']"
1105,45604492,"

I tested it for different array sizes, and it is better than looping through individual elements (using only unsafe.Pointer) only when arrays are large enough.
","['So', 'this', 'is', 'what', 'I', 'ended', 'up', 'doing', '(posting', 'it', 'as', 'an', 'answer', 'to', 'my', 'question):', 'import', '""unsafe""', 'import', '""reflect""', 'mySliceR', ':=', '*(*', 'reflect', '.', 'SliceHeader', ')(', 'unsafe.Pointer(&mySlice))', 'mySliceR', '.', 'Len', '*=', 'mySliceElemSize', 'mySliceR', '.', 'Cap', '*=', 'mySliceElemSize', 'byteSlice', ':=', '*(*[]', 'byte', ')(', 'unsafe.Pointer(&mySliceR))', 'I', 'tested', 'it', 'for', 'different', 'array', 'sizes,', 'and', 'it', 'is', 'better', 'than', 'looping', 'through', 'individual', 'elements', '(using', 'only', 'unsafe.Pointer)', 'only', 'when', 'arrays', 'are', 'large', 'enough.']"
1106,45619883,"If you're using the same version of the same Go-based tool to compile the proto, you should get the same output. I would double-check that both are identical versions.
","['If', ""you're"", 'using', 'the', 'same', 'version', 'of', 'the', 'same', 'Go-based', 'tool', 'to', 'compile', 'the', 'proto,', 'you', 'should', 'get', 'the', 'same', 'output.', 'I', 'would', 'double-check', 'that', 'both', 'are', 'identical', 'versions.']"
1107,45653717,"

Notice that &Baz{} works even though it has a value receiver, but not the reverse. The reason being that a *Baz points to exactly one Baz, both of which exist (the pointer and the value), so the value is easily obtained. When you try to do v = Bar{}, the value exists, but the pointer does not, and Go will not automatically create one for an interface{} value.

This is all explained in detail under the Pointers and interfaces heading in this blog post
","['The', 'explanation', 'lies', 'in', 'the', 'fact', 'that', 'when', 'dealing', 'with', 'the', 'concrete', 'struct', 'itself,', 'it', 'has', 'the', 'proper', 'information', 'to', 'handle', 'this', 'automatically.', 'You', 'can', 'read', 'in', 'the', 'tour', 'here', 'that:', 'Go', 'automatically', 'handles', 'conversion', 'between', 'values', 'and', 'pointers', 'for', 'method', 'calls.', 'But', 'when', 'you', 'are', 'dealing', 'with', 'an', 'interface{}', 'type,', 'it', 'has', 'less', 'information', 'on', 'what', 'is', 'actually', 'contained', 'in', 'the', 'variable.', 'It', 'just', 'knows', 'there', 'is', 'a', 'foo()', 'method.', 'But', 'there', 'is', 'a', 'subtlety', 'here', 'that', 'requires', 'extra', 'explanation', 'so', 'here', 'is', 'an', 'example.', 'https://play.golang.org/p/Y0fJcAISw1', 'type', 'Foo', 'interface', '{', 'foo', '()', '}', 'type', 'Bar', 'struct', '{}', 'func', '(', 'b', '*', 'Bar', ')', 'foo', '()', '{}', 'type', 'Baz', 'struct', '{}', 'func', '(', 'b', 'Baz', ')', 'foo', '()', '{}', 'func', 'main', '()', '{', 'b', ':=', 'Bar', '{}', 'b.foo()', 'var', 'v', 'Foo', '=', '&', 'Bar', '{}', '//', 'v', '=', 'Bar{}', 'fails', 'v.foo()', 'v', '=', 'Baz', '{}', 'v.foo()', 'v', '=', '&', 'Baz', '{}', '// works too', 'v.foo()', '}', 'Notice', 'that', '&Baz{}', 'works', 'even', 'though', 'it', 'has', 'a', 'value', 'receiver,', 'but', 'not', 'the', 'reverse.', 'The', 'reason', 'being', 'that', 'a', '*Baz', 'points', 'to', 'exactly', 'one', 'Baz,', 'both', 'of', 'which', 'exist', '(the', 'pointer', 'and', 'the', 'value),', 'so', 'the', 'value', 'is', 'easily', 'obtained.', 'When', 'you', 'try', 'to', 'do', 'v', '=', 'Bar{},', 'the', 'value', 'exists,', 'but', 'the', 'pointer', 'does', 'not,', 'and', 'Go', 'will', 'not', 'automatically', 'create', 'one', 'for', 'an', 'interface{}', 'value.', 'This', 'is', 'all', 'explained', 'in', 'detail', 'under', 'the', 'Pointers', 'and', 'interfaces', 'heading', 'in', 'this', 'blog', 'post']"
1108,45653986,"Short answer var foo Foo = Bar{} is not working because the concrete value stored in an interface is not addressable.

Longer Version

Please read https://github.com/golang/go/wiki/MethodSets


  It is legal to call a pointer-valued method on anything that is
  already a pointer or whose address can be taken. It is legal to call a
  value method on anything which is a value or whose value can be
  dereferenced.


With respect to the above explanation, your code

b := Bar{}
b.foo()


works because b is addressable.


  The concrete value stored in an interface is not addressable.
  Therefore, when you call a method on an interface, it must either have
  an identical receiver type or it must be directly discernible from the
  concrete type: pointer- and value-receiver methods can be called with
  pointers and values respectively, as you would expect. Value-receiver
  methods can be called with pointer values because they can be
  dereferenced first. Pointer-receiver methods cannot be called with
  values, however, because the value stored inside an interface has no
  address. When assigning a value to an interface, the compiler ensures
  that all possible interface methods can actually be called on that
  value, and thus trying to make an improper assignment will fail on
  compilation.


According to the above explanation the concrete value stored in an interface is not addressable and hence the code,

var foo Foo = Bar{}


will not work because the concrete value stored in an interface, in this case Bar{}, is not addressable. 
","['Notice', 'that', '&Baz{}', 'works', 'even', 'though', 'it', 'has', 'a', 'value', 'receiver,', 'but', 'not', 'the', 'reverse.', 'The', 'reason', 'being', 'that', 'a', '*Baz', 'points', 'to', 'exactly', 'one', 'Baz,', 'both', 'of', 'which', 'exist', '(the', 'pointer', 'and', 'the', 'value),', 'so', 'the', 'value', 'is', 'easily', 'obtained.', 'When', 'you', 'try', 'to', 'do', 'v', '=', 'Bar{},', 'the', 'value', 'exists,', 'but', 'the', 'pointer', 'does', 'not,', 'and', 'Go', 'will', 'not', 'automatically', 'create', 'one', 'for', 'an', 'interface{}', 'value.', 'This', 'is', 'all', 'explained', 'in', 'detail', 'under', 'the', 'Pointers', 'and', 'interfaces', 'heading', 'in', 'this', 'blog', 'post']"
1109,45654151,"
","['Half', 'of', 'your', 'question', 'depends', 'on', 'whether', 'your', 'value', 'is', 'addressable', 'or', 'not:', 'For', 'an', 'operand', 'x', 'of', 'type', 'T,', 'the', 'address', 'operation', '&x', 'generates', 'a', 'pointer', 'of', 'type', '*T', 'to', 'x.', 'The', 'operand', 'must', 'be', 'addressable,', 'that', 'is,', 'either:', 'a', 'variable,', 'pointer', 'indirection,', 'or', 'slice', 'indexing', 'operation;', 'or', 'a', 'field', 'selector', 'of', 'an', 'addressable', 'struct', 'operand;', 'or', 'an', 'array', 'indexing', 'operation', 'of', 'an', 'addressable', 'array.', 'As', 'an', 'exception', 'to', 'the', 'addressability', 'requirement,', 'x', 'may', 'also', 'be', 'a', '(possibly', 'parenthesized)', 'composite', 'literal.', '—', 'Address', 'operators', 'Bar{}', 'is', 'a', 'composite', 'literal,', 'thus', 'it', 'is', 'not', 'addressable.', 'You', 'may', 'type', '&Bar{}', 'to', 'create', 'an', 'object', 'of', 'type', '*Bar,', 'but', 'that', 'is', 'listed', 'as', '""an', 'exception', 'to', 'the', 'addressability', 'requirement"",', 'reinforcing', 'the', 'idea', 'that', 'Bar{}', 'is', 'not', 'addressable', 'in', 'itself.', 'Variable', 'b', 'of', 'type', 'Bar', 'can', 'invoke', 'b.foo()', 'despite', 'Bar.foo()', 'requiring', 'a', 'pointer', 'receiver', 'for', 'a', 'good', 'reason:', 'A', 'method', 'call', 'x.m()', 'is', 'valid', 'if', 'the', 'method', 'set', 'of', '(the', 'type', 'of)', 'x', 'contains', 'm', 'and', 'the', 'argument', 'list', 'can', 'be', 'assigned', 'to', 'the', 'parameter', 'list', 'of', 'm.', 'If', 'x', 'is', 'addressable', 'and', ""&x's"", 'method', 'set', 'contains', 'm,', 'x.m()', 'is', 'shorthand', 'for', '(&x).m()', '—', 'Calls', 'However,', 'that', 'does', 'not', 'mean', 'Bar.foo()', 'is', 'in', 'the', 'method', 'set', 'of', 'b.', 'This', 'is', 'because', 'b', 'has', 'type', 'Bar', 'while', 'Bar.foo()', 'receives', 'a', 'value', 'of', 'type', '*Bar:', 'A', 'type', 'may', 'have', 'a', 'method', 'set', 'associated', 'with', 'it.', 'The', 'method', 'set', 'of', 'an', 'interface', 'type', 'is', 'its', 'interface.', 'The', 'method', 'set', 'of', 'any', 'other', 'type', 'T', 'consists', 'of', 'all', 'methods', 'declared', 'with', 'receiver', 'type', 'T.', 'The', 'method', 'set', 'of', 'the', 'corresponding', 'pointer', 'type', '*T', 'is', 'the', 'set', 'of', 'all', 'methods', 'declared', 'with', 'receiver', '*T', 'or', 'T', '(that', 'is,', 'it', 'also', 'contains', 'the', 'method', 'set', 'of', 'T).', '—', 'from', 'Method', 'sets', 'Because', 'the', 'method', 'sets', 'of', 'b', 'and', 'the', 'Foo', 'interface', 'differ,', 'you', 'cannot', 'use', 'var', 'foo', 'Foo', '=', 'b,', 'despite', 'b.foo()', 'being', 'converted', 'to', '(&b).foo()', 'by', 'the', 'compiler.', 'Otherwise,', 'var', 'foo', 'Foo', '=', 'Bar{}', 'would', 'work.', 'You', 'may,', 'however,', 'use', 'either', 'of', 'the', 'following', 'since', 'Bar.foo()', 'receives', 'a', '*Bar:', 'var', 'foo', 'Foo', '=', '&', 'b', 'var', 'foo', 'Foo', '=', '&', 'Bar', '{}']"
1110,45713197,"
","['This', 'question', 'is', 'impossibly', 'broad.', 'Entire', 'books', 'have', 'been', 'written', 'on', 'the', 'topic.', 'But', 'since', 'you', 'asked', 'specifically', 'about', 'global', 'variables,', 'the', 'simplest', 'answer', 'is:', ""Don't"", 'use', 'global', 'variables.', ""We're"", 'always', 'taught', 'that', 'global', 'variables', 'are', 'an', 'anti-pattern.', 'Testing', 'is', 'one', 'of', 'the', 'main', 'reasons', 'that', 'global', 'variables', 'and', 'singletons', 'is', 'an', 'anti-pattern.', 'If', 'possible,', 'refactor', 'your', 'global', 'state', 'to', 'at', 'least', 'allow', 'an', 'instance', 'variable,', 'rather', 'than', 'a', 'global.', 'Then', 'you', 'can', 'pass', 'that', 'instance', 'into', 'your', 'functions', 'for', 'testing.', 'As', 'a', 'simplified', 'example,', 'suppose', 'you', 'have', 'the', 'following', 'global', 'variable,', 'and', 'a', 'function', 'which', 'uses', 'it:', 'var', 'globalFoo', '=', '123', 'func', 'doFoo', '()', 'string', '{', 'return', 'fmt.Sprintf(""foo = %d"", globalFoo)', '}', 'Modify', 'your', 'function', 'to', 'take', 'your', 'variable', 'as', 'an', 'argument:', 'func', 'doFoo', '(', 'foo', 'int', ')', 'string', '{', 'return', 'fmt.Sprintf(""foo = %d"", foo)', '}', 'This', 'can', 'be', 'more', 'complicated', 'if', 'your', 'global', 'state', 'is', 'a', 'database', 'connection,', 'or', 'a', 'large', 'number', 'of', 'variables,', 'but', 'the', 'principle', 'is', 'the', 'same:', ""Don't"", 'use', 'globals;', 'pass', 'variables', 'instead.', 'In', 'a', 'legacy', 'codebase,', 'one', 'method', 'to', 'allow', 'testing,', 'without', 'changing', 'your', 'function', 'signatures,', 'is', 'to', 'create', 'simple', 'wrapping', 'functions:', 'func', 'doFoo', '()', 'string', '{', 'return', 'realDoFoo', '(', 'globalFoo', ')', '}', 'func', 'realDoFoo', '(', 'foo', 'int', ')', 'string', '{', 'fmt.Sprintf(""foo = %s"", foo)', '}']"
1111,45732044,"
","['To', 'answer', 'the', '""My', 'Real', 'Question:', 'How', 'can', 'I', 'customize', 'the', 'behaviour', 'of', 'mgo', 'before', 'upsert?""', '-', 'you', 'can', 'customise', 'bson', 'marshalling', 'by', 'defining', 'bson', 'Getter', 'to', 'the', 'model.', 'To', 'illustrate', 'how', 'it', 'works,', 'lets', 'simplify', 'the', 'model', 'to', 'avoid', 'nested', 'documents:', 'type', 'Game', 'struct', '{', 'ID', 'int', 'bson', ':', '""_id""', 'Name', 'string', 'Stats', '[]', 'float64', '}', 'With', 'newGame', 'as', 'following:', 'newGame', ':=', 'Game', '{', 'ID', ':', '1', ',', 'Name', ':', '""foo""', ',', 'Stats', ':', '[]{', '5', '.', '0', '}', '}', 'The', 'update', 'col.UpsertId(newGame.ID, newGame)', 'by', 'default', 'marshals', 'newGame', 'into', 'JSON,', 'producing', 'mongo', 'query', 'like:', 'update', '({', '_id', ':', '1', '},', '{', 'name', ':', '""foo""', ',', 'stats', ':', '[', '5', ']},', '{', 'upsert', ':', 'true', '});', 'To', 'make', 'use', 'of', '$set,', '$push', 'etc,', 'you', 'can', 'define', 'a', 'custom', 'bson', 'getter.', 'E.g.', 'func', '(', 'g', 'Game', ')', 'GetBSON', '()', '(', 'interface', '{},', 'error', ')', '{', 'return', 'bson', '.', 'M', '{', '""$set""', ':', 'bson', '.', 'M', '{', '""name""', ':', 'g', '.', 'Name', '},', '""$push""', ':', 'bson', '.', 'M', '{', '""stats""', ':', 'bson', '.', 'M', '{', '""$each""', ':', 'g', '.', 'Stats', '}},', '},', 'nil', '}', 'So', 'the', 'update', 'col.UpsertId(newGame.ID,', 'newGame)', 'will', 'produce', 'a', 'mongodb', 'query', 'update', '({', '_id', ':', '1', '},', '{$', 'set', ':', '{', 'name', ':', '""foo""', '},', '$', 'push', ':', '{', 'stats', ':', '{$', 'each', ':', '[', '5', ']}}},', '{', 'upsert', ':', 'true', '});', 'To', 'make', 'it', 'crystal', 'clear', '-', 'the', 'custom', 'marshaler', 'will', 'be', 'used', 'in', 'all', 'mgo', 'queries,', 'so', 'you', 'probably', ""don't"", 'want', 'to', 'define', 'it', 'directly', 'to', 'the', 'model,', 'but', 'to', 'its', 'derivative', 'to', 'use', 'in', 'upsert', 'operations', 'only:', 'type', 'UpdatedGame', 'struct', '{', 'Game', '}', 'func', '(', 'g', 'UpdatedGame', ')', 'GetBSON', '()', '(', 'interface', '{},', 'error', ')', '{', 'return', 'bson', '.', 'M', '{....}', '}', '.....', 'newGame', ':=', 'Game', '{', 'ID', ':', '1', ',', 'Name', ':', '""foo""', ',', 'Stats', ':', '[]{', '5', '.', '0', '}', '}', 'col.UpsertId(newGame.ID, UpdatedGame{newGame})']"
1112,45741268,"

Here's a working version of your playground example, slightly modified to avoid ""program took too long"" errors because in its current form it never stops: https://play.golang.org/p/RSUJFvluU5
","['This:', 'for', 'range', '<-md{', 'is', 'not', 'the', 'same', 'as:', 'for', 'range', 'md{', 'The', 'latter', 'ranges', 'over', 'the', 'channel', '(what', 'you', 'want),', 'while', 'the', 'former', 'ranges', 'over', 'the', 'value', 'received', 'from', 'the', 'channel', 'when', 'the', 'loop', 'starts,', 'which', 'happens', 'to', 'be', 'a', 'two-element', 'array,', 'hence', 'the', 'two', 'executions.', ""You're"", 'also', 'ignoring', 'the', 'value', 'received', 'from', 'the', 'channel', 'in', 'the', 'for', 'statement,', 'and', 'reading', 'from', 'it', 'again', 'in', 'the', 'loop', 'body,', 'ignoring', 'every', 'other', 'message', 'on', 'the', 'channel', '(though', 'this', 'makes', 'no', 'difference', 'in', 'the', 'example,', 'since', 'every', 'value', 'is', 'identical,', 'it', 'would', 'make', 'a', 'significant', 'difference', 'in', 'practice).', 'What', 'you', 'really', 'want', 'is:', 'for', 'foo', ':=', 'range', 'md', '{', 'fmt.Println(foo)', '}', ""Here's"", 'a', 'working', 'version', 'of', 'your', 'playground', 'example,', 'slightly', 'modified', 'to', 'avoid', '""program', 'took', 'too', 'long""', 'errors', 'because', 'in', 'its', 'current', 'form', 'it', 'never', 'stops:', 'https://play.golang.org/p/RSUJFvluU5']"
1113,45754815,"This is a known issue, see this thread:

https://github.com/golang/go/issues/20239

Hopefully they will fix it soon but for now it sounds like adding a short delay in your test is the simplest solution - it probably doesn't come up in real world use much because you won't trigger a shutdown so soon after starting. 
","['This', 'is', 'a', 'known', 'issue,', 'see', 'this', 'thread:', 'https://github.com/golang/go/issues/20239', 'Hopefully', 'they', 'will', 'fix', 'it', 'soon', 'but', 'for', 'now', 'it', 'sounds', 'like', 'adding', 'a', 'short', 'delay', 'in', 'your', 'test', 'is', 'the', 'simplest', 'solution', '-', 'it', 'probably', ""doesn't"", 'come', 'up', 'in', 'real', 'world', 'use', 'much', 'because', 'you', ""won't"", 'trigger', 'a', 'shutdown', 'so', 'soon', 'after', 'starting.']"
1114,45836832,"

Hope this helps!
","['In', 'Go', 'int', 'is', 'a', 'predefined', 'identifier,', 'therefore', 'it', 'cannot', 'be', 'used', 'as', 'a', 'variable', 'name.', 'So', 'rename', 'the', 'first', 'variable', 'to', 'anything', 'else.', 'Such', 'as', 'num1', 'and', 'it', 'will', 'compile!', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'var', 'num1', 'int', '=', '8', 'fmt.Println(num1)', 'var', 'number', 'int', '=', '10', 'fmt.Println(number)', '}', 'Hope', 'this', 'helps!']"
1115,45837791,"

You are shadowing the int identifier.

See The Go Programming Language Specification.

Go is a block structured programming language: 

Blocks

Declarations and scope

int is a predeclared identifier and is implicitly declared in the universe block.

The scope of a variable identifier declared inside a function begins at the end of the declaration and ends at the end of the innermost containing block.

The statement

var int int = 8


uses the predeclared int type to declare a variable identifier int, shadowing the predeclared identifier: Variable shadowing.
","['package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', '//', 'int', 'is', 'a', 'predeclared', 'type', 'identifier', 'var', 'int', 'int', '=', '8', '//', 'int', 'is', 'a', 'variable', 'identifier', 'fmt.Println(int)', '//', 'error:', 'int', 'is', 'not', 'a', 'type', 'var', 'number', 'int', '=', '10', 'fmt.Println(number)', '}', 'You', 'are', 'shadowing', 'the', 'int', 'identifier.', 'See', 'The', 'Go', 'Programming', 'Language', 'Specification.', 'Go', 'is', 'a', 'block', 'structured', 'programming', 'language:', 'Blocks', 'Declarations', 'and', 'scope', 'int', 'is', 'a', 'predeclared', 'identifier', 'and', 'is', 'implicitly', 'declared', 'in', 'the', 'universe', 'block.', 'The', 'scope', 'of', 'a', 'variable', 'identifier', 'declared', 'inside', 'a', 'function', 'begins', 'at', 'the', 'end', 'of', 'the', 'declaration', 'and', 'ends', 'at', 'the', 'end', 'of', 'the', 'innermost', 'containing', 'block.', 'The', 'statement', 'var', 'int', 'int', '=', '8', 'uses', 'the', 'predeclared', 'int', 'type', 'to', 'declare', 'a', 'variable', 'identifier', 'int,', 'shadowing', 'the', 'predeclared', 'identifier:', 'Variable', 'shadowing.']"
1116,45855822,"The JSON package can only process exported struct fields (e.g. start with a capital letter). That's why you use the JSON tag so you can change the tag name/case to use. 

Otherwise, this works as you would expect. See example:

https://play.golang.org/p/pRVKNrekWe
","['The', 'JSON', 'package', 'can', 'only', 'process', 'exported', 'struct', 'fields', '(e.g.', 'start', 'with', 'a', 'capital', 'letter).', ""That's"", 'why', 'you', 'use', 'the', 'JSON', 'tag', 'so', 'you', 'can', 'change', 'the', 'tag', 'name/case', 'to', 'use.', 'Otherwise,', 'this', 'works', 'as', 'you', 'would', 'expect.', 'See', 'example:', 'https://play.golang.org/p/pRVKNrekWe']"
1117,1743526,"Today a great friend of mine asked me what are the main differences between the newest Go language and Cython, which is a set of C-extensions for Python. I don't have much knowledge on Python, can anyone tell me why Go is better/worse than Cython?
","['Today', 'a', 'great', 'friend', 'of', 'mine', 'asked', 'me', 'what', 'are', 'the', 'main', 'differences', 'between', 'the', 'newest', 'Go', 'language', 'and', 'Cython,', 'which', 'is', 'a', 'set', 'of', 'C-extensions', 'for', 'Python.', 'I', ""don't"", 'have', 'much', 'knowledge', 'on', 'Python,', 'can', 'anyone', 'tell', 'me', 'why', 'Go', 'is', 'better/worse', 'than', 'Cython?']"
1118,1798455,"In looking at Go and Erlang's approach to concurrency, I noticed that they both rely on message passing.

This approach obviously alleviates the need for complex locks because there is no shared state.

However, consider the case of many clients wanting parallel read-only access to a single large data structure in memory -- like a suffix array.

My questions:


Will using shared state be faster and use less memory than message passing, as locks will mostly be unnecessary because the data is read-only, and only needs to exist in a single location?
How would this problem be approached in a message passing context? Would there be a single process with access to the data structure and clients would simply need to sequentially request data from it? Or, if possible, would the data be chunked to create several processes that hold chunks?
Given the architecture of modern CPUs & memory, is there much difference between the two solutions -- i.e., can shared memory be read in parallel by multiple cores -- meaning there is no hardware bottleneck that would otherwise make both implementations roughly perform the same?

","['In', 'looking', 'at', 'Go', 'and', ""Erlang's"", 'approach', 'to', 'concurrency,', 'I', 'noticed', 'that', 'they', 'both', 'rely', 'on', 'message', 'passing.', 'This', 'approach', 'obviously', 'alleviates', 'the', 'need', 'for', 'complex', 'locks', 'because', 'there', 'is', 'no', 'shared', 'state.', 'However,', 'consider', 'the', 'case', 'of', 'many', 'clients', 'wanting', 'parallel', 'read-only', 'access', 'to', 'a', 'single', 'large', 'data', 'structure', 'in', 'memory', '--', 'like', 'a', 'suffix', 'array.', 'My', 'questions:', 'Will', 'using', 'shared', 'state', 'be', 'faster', 'and', 'use', 'less', 'memory', 'than', 'message', 'passing,', 'as', 'locks', 'will', 'mostly', 'be', 'unnecessary', 'because', 'the', 'data', 'is', 'read-only,', 'and', 'only', 'needs', 'to', 'exist', 'in', 'a', 'single', 'location?', 'How', 'would', 'this', 'problem', 'be', 'approached', 'in', 'a', 'message', 'passing', 'context?', 'Would', 'there', 'be', 'a', 'single', 'process', 'with', 'access', 'to', 'the', 'data', 'structure', 'and', 'clients', 'would', 'simply', 'need', 'to', 'sequentially', 'request', 'data', 'from', 'it?', 'Or,', 'if', 'possible,', 'would', 'the', 'data', 'be', 'chunked', 'to', 'create', 'several', 'processes', 'that', 'hold', 'chunks?', 'Given', 'the', 'architecture', 'of', 'modern', 'CPUs', '&', 'memory,', 'is', 'there', 'much', 'difference', 'between', 'the', 'two', 'solutions', '--', 'i.e.,', 'can', 'shared', 'memory', 'be', 'read', 'in', 'parallel', 'by', 'multiple', 'cores', '--', 'meaning', 'there', 'is', 'no', 'hardware', 'bottleneck', 'that', 'would', 'otherwise', 'make', 'both', 'implementations', 'roughly', 'perform', 'the', 'same?']"
1119,2893772,"

Is there something special I need to do in order for it to recognize the package? I found the package source at $GOROOT/src/pkg/github.com/hoisie/web.go/web. I tried github.com/hoisie/web.go/web as the import and it still did not like that.
","['With', 'halfdans', 'advice,', 'I', 'was', 'successfully', 'able', 'to', 'use', 'goinstall', 'github.com/hoisie/web.go', 'without', 'any', 'errors', 'after', 'installing', 'git', 'first.', 'However,', 'now', 'when', 'I', 'try', 'to', 'compile', 'the', 'sample', 'code', 'given,', 'go', 'is', 'not', 'finding', 'the', 'web', 'package.', 'I', 'get', 'the', 'error,', 'main', '.', 'go', ':', '4', ':', 'can', 't', 'find', 'import', ':', 'web', 'On', 'this', 'code', 'package', 'main', 'import', '(', '""web""', ')', 'func', 'hello', '(', 'val', 'string', ')', 'string', '{', 'return', '""hello ""', '+', 'val', '}', 'func', 'main', '()', '{', 'web.Get(""/(.*)"", hello)', 'web.Run(""0.0.0.0:9999"")', '}', 'Is', 'there', 'something', 'special', 'I', 'need', 'to', 'do', 'in', 'order', 'for', 'it', 'to', 'recognize', 'the', 'package?', 'I', 'found', 'the', 'package', 'source', 'at', '$GOROOT/src/pkg/github.com/hoisie/web.go/web.', 'I', 'tried', 'github.com/hoisie/web.go/web', 'as', 'the', 'import', 'and', 'it', 'still', 'did', 'not', 'like', 'that.']"
1120,3125381,"In C, the idea of an array is very straightforward—simply a pointer to the first element in a row of elements in memory, which can be accessed via pointer arithmetic/ the standard array[i] syntax.

However, in languages like Google Go, ""arrays are values"", not pointers. What does that mean? How is it implemented?
","['Is', 'there', 'something', 'special', 'I', 'need', 'to', 'do', 'in', 'order', 'for', 'it', 'to', 'recognize', 'the', 'package?', 'I', 'found', 'the', 'package', 'source', 'at', '$GOROOT/src/pkg/github.com/hoisie/web.go/web.', 'I', 'tried', 'github.com/hoisie/web.go/web', 'as', 'the', 'import', 'and', 'it', 'still', 'did', 'not', 'like', 'that.']"
1121,3129324,". Is there a way of having unnamed arrays in structs in Go? If so, what's the correct syntax?
","['So', 'I', 'can', 'have', 'struct', '{', 'int', 'x', '[]', 'int', '}', 'However,', 'struct', '{', 'int', '[]', 'int', '}', 'will', 'result', 'in', 'a', 'syntax', 'error', ':', 'unexpected', '[,', 'expecting', '}', '.', 'Is', 'there', 'a', 'way', 'of', 'having', 'unnamed', 'arrays', 'in', 'structs', 'in', 'Go?', 'If', 'so,', ""what's"", 'the', 'correct', 'syntax?']"
1122,3516357,"
","[""I'm"", 'looking', 'for', 'a', 'go', 'language', 'capability', 'similar', 'to', 'the', '""dictionary""', 'in', 'python', 'to', 'facilitate', 'the', 'conversion', 'of', 'some', 'python', 'code.', 'EDIT:', 'Maps', 'worked', 'quite', 'well', 'for', 'this', 'de-dupe', 'application.', 'I', 'was', 'able', 'to', 'condense', '1.3e6', 'duplicated', 'items', 'down', 'to', '2.5e5', 'unique', 'items', 'using', 'a', 'map', 'with', 'a', '16', 'byte', 'string', 'index', 'in', 'just', 'a', 'few', 'seconds.', 'The', 'map-related', 'code', 'was', 'simple', 'so', ""I've"", 'included', 'it', 'below.', 'Worth', 'noting', 'that', 'pre-allocation', 'of', 'map', 'with', '1.3e6', 'elements', 'sped', 'it', 'up', 'by', 'only', 'a', 'few', 'percent:', 'var', 'm', '=', 'make', '(', 'map', '[', 'string', ']', 'int', ',', '1300000', ')', '// map with initial space for 1.3e6 elements', 'ct', ',', 'ok', ':=', 'm', '[', 'ax_hash', ']', 'if', 'ok', '{', 'm', '[', 'ax_hash', ']', '=', 'ct', '+', '1', '}', 'else', '{', 'm', '[', 'ax_hash', ']', '=', '1', '}']"
1123,3863972,"I played around with Go a bit shortly after it came out. There wasn't a profiler then; is there one now?
","['I', 'played', 'around', 'with', 'Go', 'a', 'bit', 'shortly', 'after', 'it', 'came', 'out.', 'There', ""wasn't"", 'a', 'profiler', 'then;', 'is', 'there', 'one', 'now?']"
1124,4278430,"I'm trying to convert a string returned from flag.Arg(n) to an int. What is the idiomatic way to do this in Go?
",[]
1125,5367961,"

My reasoning so far is this. All types in Golang are different, but it allows to convert from one type to another with C-like cast syntax as long as underlying types are identical. In my example, converting 'int' to 'myint' is not a problem. '*int' to '*myint' isn't either. It's when you have pointer to pointer problems arise. I've been stuck on this for the second day now. Any help is appreciated.
","['Can', 'anyone', 'tell', 'my', 'why', 'this', ""wouldn't"", 'compile?', 'package', 'main', 'type', 'myint', 'int', 'func', 'set', '(', 'a', '**', 'myint', ')', '{', 'i', ':=', 'myint', '(', '5', ')', '*', 'a', '=', '&', 'i', '}', 'func', 'main', '()', '{', 'var', 'k', '*', 'int', 'set', '(', '(**', 'myint', ')(&', 'k', ')', ')', '// cannot convert &k (type **int) to type **myint', 'print', '(', '*', 'k', ')', '}', 'My', 'reasoning', 'so', 'far', 'is', 'this.', 'All', 'types', 'in', 'Golang', 'are', 'different,', 'but', 'it', 'allows', 'to', 'convert', 'from', 'one', 'type', 'to', 'another', 'with', 'C-like', 'cast', 'syntax', 'as', 'long', 'as', 'underlying', 'types', 'are', 'identical.', 'In', 'my', 'example,', 'converting', ""'int'"", 'to', ""'myint'"", 'is', 'not', 'a', 'problem.', ""'*int'"", 'to', ""'*myint'"", ""isn't"", 'either.', ""It's"", 'when', 'you', 'have', 'pointer', 'to', 'pointer', 'problems', 'arise.', ""I've"", 'been', 'stuck', 'on', 'this', 'for', 'the', 'second', 'day', 'now.', 'Any', 'help', 'is', 'appreciated.']"
1126,6000524,"I can't seem to find any... it's a bit sad for a language positioned as networking-oriented one.
","['I', ""can't"", 'seem', 'to', 'find', 'any...', ""it's"", 'a', 'bit', 'sad', 'for', 'a', 'language', 'positioned', 'as', 'networking-oriented', 'one.']"
1127,6051088,"In Go it is valid to create a type:

type Num int


but how can one then initialize that type? make(Num, 2) does not seem to work.
","['My', 'reasoning', 'so', 'far', 'is', 'this.', 'All', 'types', 'in', 'Golang', 'are', 'different,', 'but', 'it', 'allows', 'to', 'convert', 'from', 'one', 'type', 'to', 'another', 'with', 'C-like', 'cast', 'syntax', 'as', 'long', 'as', 'underlying', 'types', 'are', 'identical.', 'In', 'my', 'example,', 'converting', ""'int'"", 'to', ""'myint'"", 'is', 'not', 'a', 'problem.', ""'*int'"", 'to', ""'*myint'"", ""isn't"", 'either.', ""It's"", 'when', 'you', 'have', 'pointer', 'to', 'pointer', 'problems', 'arise.', ""I've"", 'been', 'stuck', 'on', 'this', 'for', 'the', 'second', 'day', 'now.', 'Any', 'help', 'is', 'appreciated.']"
1128,6118919,"I am trying to learn Go and have installed Go MinGW but I cannot find out how to actually compile a .go file ANYWHERE.  This is the program linked directly from the Go wiki for Windows Support, but all the tutorials talk about using 6g and gccgo etc. to compile and none of those work from my windows machine.
","['I', 'am', 'trying', 'to', 'learn', 'Go', 'and', 'have', 'installed', 'Go', 'MinGW', 'but', 'I', 'cannot', 'find', 'out', 'how', 'to', 'actually', 'compile', 'a', '.go', 'file', 'ANYWHERE.', 'This', 'is', 'the', 'program', 'linked', 'directly', 'from', 'the', 'Go', 'wiki', 'for', 'Windows', 'Support,', 'but', 'all', 'the', 'tutorials', 'talk', 'about', 'using', '6g', 'and', 'gccgo', 'etc.', 'to', 'compile', 'and', 'none', 'of', 'those', 'work', 'from', 'my', 'windows', 'machine.']"
1129,6125345,"
","['How', 'would', 'I', 'implement', 'one-to-many', 'on', 'Google', 'App', 'Engine', 'in', 'the', 'Go', 'programming', 'language?', 'For', 'example,', 'if', 'I', 'have', 'the', 'structs', 'below,', 'how', 'would', 'I', 'store', 'the', 'association', 'of', 'many', 'Votes', 'to', 'one', 'Comment?', 'Would', 'I', 'use', 'an', 'array', '(slice)', 'of', 'keys', 'to', 'Votes', 'in', 'the', 'Comment', 'struct,', 'or', 'one', 'key', 'to', 'the', 'Comment', 'from', 'the', 'Vote', 'struct?', 'type', 'Comment', 'struct', '{', 'Author', 'string', 'Content', 'string', 'Date', 'datastore', '.', 'Time', '}', 'type', 'Vote', 'struct', '{', 'User', 'string', 'Score', 'int', '}']"
1130,6163096,"I am trying to create binding for a C library using Cgo. I have package which uses Cgo to import the library and make some calls to it. It compiles and installs fine. But when trying to use that package from a Go program, I get the the error ""unexpected R_X86_64_64 relocation for dynamic symbol"" when linking.

Any ideas?
","['I', 'am', 'trying', 'to', 'create', 'binding', 'for', 'a', 'C', 'library', 'using', 'Cgo.', 'I', 'have', 'package', 'which', 'uses', 'Cgo', 'to', 'import', 'the', 'library', 'and', 'make', 'some', 'calls', 'to', 'it.', 'It', 'compiles', 'and', 'installs', 'fine.', 'But', 'when', 'trying', 'to', 'use', 'that', 'package', 'from', 'a', 'Go', 'program,', 'I', 'get', 'the', 'the', 'error', '""unexpected', 'R_X86_64_64', 'relocation', 'for', 'dynamic', 'symbol""', 'when', 'linking.', 'Any', 'ideas?']"
1131,6384824,"little confused with reflect pkg

all of the examples us reflect.NewValue() to get the reflect.Value of a var, but 


func NewValue is not documented in http://golang.org/pkg/reflect/
the 8g compiler returns ""undefined: reflect.NewValue""


is NewValue() still supported? if not, how does one get reflect.Value from a var?



the Typeof and NewValue functions have been renamed to TypeOf and ValueOf.
",[]
1132,7309355,"
","[""I'm"", 'currently', 'porting', 'a', 'pretty', 'basic', 'gallery', 'application', 'from', 'PHP', 'to', 'Go.', 'This', 'application', 'features', 'automatic', 'generation', 'of', 'thumbnails', 'and', 'middle-sized', 'version', 'of', 'every', 'image.', 'In', 'PHP', 'I', 'used', 'GD,', 'because', 'it', 'ships', 'with', 'it', 'and', 'worked', 'pretty', 'well.', '(Code', 'is', 'at', 'the', 'end', 'of', 'the', 'question).', 'I', 'thought', 'I', 'could', 'just', 'replicate', 'that', 'in', 'Go', 'and', 'found', 'go-gd', 'from', 'https://github.com/bolknote/go-gd', '(again,', 'code', 'is', 'at', 'the', 'end).', 'It', 'works,', 'but', 'it', 'is', 'roughly', '10', 'times', 'slower', '(measured', 'using', 'time', 'wget', '$URL).', 'The', 'PHP', 'implementation', 'takes', 'about', '1', 'second', 'for', 'generating', 'a', '1024x768', 'version', 'from', 'a', '10', 'MP-image,', 'while', 'the', 'Go-Code', 'takes', 'almost', '10', 'seconds.', 'Is', 'there', 'any', 'way', 'to', 'speed', 'this', 'up', 'or', 'any', 'other', 'image-processing', 'libary', 'for', 'Go,', 'which', 'implements', 'scaling', 'and', 'convolution', 'while', 'being', 'reasonably', 'fast?', 'PHP-Code', 'public', 'func', 'tion', 'saveThumb', '($', 'outName', ',', '$', 'options', ')', '{', '$', 'this', '->', 'img', '=', 'imagecreatefromjpeg', '($', 'filename', ');', 'if', '(!', 'is_dir', '(', 'dirname', '($', 'outName', ')))', '{', 'mkdir', '(', 'dirname', '($', 'outName', '),', '0777', ',', 'true', ');', '}', '$', 'width', '=', 'imagesx', '($', 'this', '->', 'img', ');', '$', 'height', '=', 'imagesy', '($', 'this', '->', 'img', ');', 'if', '($', 'options', '[', '""keep_aspect""', '])', '{', '$', 'factor', '=', 'min', '($', 'options', '[', '""size_x""', ']/$', 'width', ',', '$', 'options', '[', '""size_y""', ']/$', 'height', ');', '$', 'new_width', '=', 'round', '($', 'factor', '*$', 'width', ');', '$', 'new_height', '=', 'round', '($', 'factor', '*$', 'height', ');', '}', 'else', '{', '$', 'new_width', '=', '$', 'options', '[', '""size_x""', '];', '$', 'new_height', '=', '$', 'options', '[', '""size_y""', '];', '}', '//', 'create', 'a', 'new', 'temporary', 'image', '$', 'tmp_img', '=', 'imagecreatetruecolor', '($', 'new_width', ',', '$', 'new_height', ');', '//', 'copy', 'and', 'resize', 'old', 'image', 'into', 'new', 'image', 'imagecopyresampled', '($', 'tmp_img', ',', '$', 'this', '->', 'img', ',', '0', ',', '0', ',', '0', ',', '0', ',', '$', 'new_width', ',', '$', 'new_height', ',', '$', 'width', ',', '$', 'height', ');', 'if', '($', 'options', '[', '""sharpen""', '])', '{', '//', 'define', 'the', 'sharpen', 'matrix', '$', 'sharpen', '=', 'array', '(', 'array', '(-', '1', ',', '-', '1', '.', '7', ',', '-', '1', '),', 'array', '(-', '1', '.', '7', ',', '20', ',', '-', '1', '.', '7', '),', 'array', '(-', '1', ',', '-', '1', '.', '7', ',', '-', '1', ')', ');', '//', 'calculate', 'the', 'sharpen', 'divisor', '$', 'divisor', '=', 'array_sum', '(', 'array_map', '(', ""'array_sum'"", ',', '$', 'sharpen', '));', '//', 'apply', 'the', 'matrix', 'imageconvolution', '($', 'tmp_img', ',', '$', 'sharpen', ',', '$', 'divisor', ',', '0', ');', '}', '//', 'save', 'thumbnail', 'into', 'a', 'file', 'imagejpeg', '($', 'tmp_img', ',', '$', 'outName', ');', '}', 'Go-Code', 'func', '(', 'entry', '*', 'entry', ')', 'GenerateThumb', '(', 'options', 'ImageType', ',', 'overwrite', 'bool', ')', 'os', '.', 'Error', '{', 'targetFilename', ':=', 'entry.Filename(imageType)', 'sourceFilename', ':=', 'entry.Filename(IMAGE_TYPE_FULL)', 'targetDirname', ',', '_', ':=', 'filepath.Split(targetFilename)', 'os.MkdirAll(targetDirname, 0777)', 'targetFi', ',', 'errT', ':=', 'os.Stat(targetFilename)', 'sourceFi', ',', 'errS', ':=', 'os.Stat(sourceFilename)', 'image', ':=', 'gd.CreateFromJpeg(sourceFilename)', 'if', 'image', '==', 'nil', '{', 'return', 'os.NewError(""Image could not be loaded"")', '}', 'var', 'targetX', ',', 'targetY', 'int', '=', '0', ',', '0', 'if', 'options', '.', 'KeepAspect', '{', 'factor', ':=', 'math.Fmin(float64(options.SizeX)/float64(image.Sx()), float64(options.SizeY)/float64(image.Sy()))', 'targetX', '=', 'int', '(', 'factor', '*', 'float64', '(', 'image.Sx()))', 'targetY', '=', 'int', '(', 'factor', '*', 'float64', '(', 'image.Sy()))', '}', 'else', '{', 'targetX', '=', 'options', '.', 'SizeX', 'targetY', '=', 'options', '.', 'SizeY', '}', 'tmpImage', ':=', 'gd.CreateTrueColor(targetX, targetY)', 'image.CopyResampled(tmpImage, 0, 0, 0, 0, tmpImage.Sx(), tmpImage.Sy(), image.Sx(), image.Sy())', 'if', 'options', '.', 'Sharpen', '{', 'sharpenMatrix', ':=', '[', '3', '][', '3', ']', 'float32', '{', '{-', '1', ',', '-', '1', '.', '7', ',', '-', '1', '},', '{-', '1', '.', '7', ',', '20', ',', '-', '1', '.', '7', '},', '{-', '1', ',', '-', '1', '.', '7', ',', '-', '1', '}', '}', 'tmpImage.Convolution(sharpenMatrix, 9.2, 0)', '}', 'tmpImage.Jpeg(targetFilename, 90)', 'return', 'nil', '}', 'EDIT:', 'Go-Code', 'using', 'resize.go', '(see', 'answer)', 'func', '(', 'entry', '*', 'entry', ')', 'GenerateThumb', '(', 'options', 'ImageType', ',', 'overwrite', 'bool', ')', 'os', '.', 'Error', '{', 'targetFilename', ':=', 'entry.Filename(imageType)', 'sourceFilename', ':=', 'entry.Filename(IMAGE_TYPE_FULL)', 'targetDirname', ',', '_', ':=', 'filepath.Split(targetFilename)', 'os.MkdirAll(targetDirname, 0777)', 'targetFi', ',', 'errT', ':=', 'os.Stat(targetFilename)', 'sourceFi', ',', 'errS', ':=', 'os.Stat(sourceFilename)', 'if', 'errT', '==', 'nil', '&&', 'errS', '==', 'nil', '{', 'if', 'targetFi', '.', 'Mtime_ns', '>', 'sourceFi', '.', 'Mtime_ns', '&&', '!', 'overwrite', '{', '//', 'already', 'up-to-date,', 'nothing', 'to', 'do', 'return', 'nil', '}', '}', 'log.Printf(""Generate(\\""%v\\"", %v)\\n"", imageType, overwrite)', 'inFile', ',', 'fErr', ':=', 'os.Open(sourceFilename)', 'if', 'fErr', '!=', 'nil', '{', 'log.Fatal(fErr)', '}', 'defer', 'inFile.Close()', 'img', ',', '_', ',', 'err', ':=', 'image.Decode(inFile)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'var', 'targetX', ',', 'targetY', 'int', 'if', 'options', '.', 'KeepAspect', '{', 'factor', ':=', 'math.Fmin(float64(options.SizeX)/float64(img.Bounds().Max.X), float64(options.SizeY)/float64(img.Bounds().Max.Y))', 'targetX', '=', 'int', '(', 'factor', '*', 'float64', '(', 'img.Bounds().Max.X))', 'targetY', '=', 'int', '(', 'factor', '*', 'float64', '(', 'img.Bounds().Max.Y))', '}', 'else', '{', 'targetX', '=', 'curType', '.', 'SizeX', 'targetY', '=', 'curType', '.', 'SizeY', '}', 'newImg', ':=', 'resize.Resample(img, image.Rect(0, 0, img.Bounds().Max.X, img.Bounds().Max.Y), targetX, targetY)', 'var', 'outFile', '*', 'os', '.', 'File', 'outFile', ',', 'fErr', '=', 'os.Create(targetFilename)', 'if', 'fErr', '!=', 'nil', '{', 'log.Fatal(fErr)', '}', 'defer', 'outFile.Close()', 'err', '=', 'jpeg.Encode(outFile, newImg, &jpeg.Options{90})', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'return', 'nil', '}']"
1133,7535803,"I've compiled Goauth so that I can use OAuth in my Go Google App Engine project.  Where do I put the goauth.a file so that I can both use it in the project, and have it available when deploying to the GAE servers?  I can get it working locally if I put it in a subfolder of $GOROOT/pkg, but then it can't be found when compiling at deployment time.

GoClipse sets up a project with lots of folders, I'm not really sure what their purpose is,  where should I put goauth.a and how do I import it?
","[""I've"", 'compiled', 'Goauth', 'so', 'that', 'I', 'can', 'use', 'OAuth', 'in', 'my', 'Go', 'Google', 'App', 'Engine', 'project.', 'Where', 'do', 'I', 'put', 'the', 'goauth.a', 'file', 'so', 'that', 'I', 'can', 'both', 'use', 'it', 'in', 'the', 'project,', 'and', 'have', 'it', 'available', 'when', 'deploying', 'to', 'the', 'GAE', 'servers?', 'I', 'can', 'get', 'it', 'working', 'locally', 'if', 'I', 'put', 'it', 'in', 'a', 'subfolder', 'of', '$GOROOT/pkg,', 'but', 'then', 'it', ""can't"", 'be', 'found', 'when', 'compiling', 'at', 'deployment', 'time.', 'GoClipse', 'sets', 'up', 'a', 'project', 'with', 'lots', 'of', 'folders,', ""I'm"", 'not', 'really', 'sure', 'what', 'their', 'purpose', 'is,', 'where', 'should', 'I', 'put', 'goauth.a', 'and', 'how', 'do', 'I', 'import', 'it?']"
1134,7599476,"I've been playing with Go and GAE using GoClipse for a bit now on my Mac (since they won't run on Windows). Recently I noticed that when I goinstall a package from github it had some problems working. I figured I'd reinstall the whole thing and set it up properly. Go installed nicely, but when it came to integrating the GAE SDK it took me a couple hours of searching and came up with only this article:
http://code.google.com/p/goclipse/wiki/GoClipseAndTheGoogleAppEngine
But since it tell you to move files from the go/scr folder (where goinstall installs packages), I reckon it is not the correct way to set everything up.

Can anyone give me a clear, easy to follow step-by-step guide on how to install both Go and GAE SDK on a Mac?
","[""I've"", 'been', 'playing', 'with', 'Go', 'and', 'GAE', 'using', 'GoClipse', 'for', 'a', 'bit', 'now', 'on', 'my', 'Mac', '(since', 'they', ""won't"", 'run', 'on', 'Windows).', 'Recently', 'I', 'noticed', 'that', 'when', 'I', 'goinstall', 'a', 'package', 'from', 'github', 'it', 'had', 'some', 'problems', 'working.', 'I', 'figured', ""I'd"", 'reinstall', 'the', 'whole', 'thing', 'and', 'set', 'it', 'up', 'properly.', 'Go', 'installed', 'nicely,', 'but', 'when', 'it', 'came', 'to', 'integrating', 'the', 'GAE', 'SDK', 'it', 'took', 'me', 'a', 'couple', 'hours', 'of', 'searching', 'and', 'came', 'up', 'with', 'only', 'this', 'article:', 'http://code.google.com/p/goclipse/wiki/GoClipseAndTheGoogleAppEngine', 'But', 'since', 'it', 'tell', 'you', 'to', 'move', 'files', 'from', 'the', 'go/scr', 'folder', '(where', 'goinstall', 'installs', 'packages),', 'I', 'reckon', 'it', 'is', 'not', 'the', 'correct', 'way', 'to', 'set', 'everything', 'up.', 'Can', 'anyone', 'give', 'me', 'a', 'clear,', 'easy', 'to', 'follow', 'step-by-step', 'guide', 'on', 'how', 'to', 'install', 'both', 'Go', 'and', 'GAE', 'SDK', 'on', 'a', 'Mac?']"
1135,7846846,"

Instead of a neat reference to an image file.

What is the proper way to parse the template files now, after the
update?
","['I`ve', 'just', 'updated', 'my', 'GAE', 'Go', 'SDK', 'to', 'the', 'newest', 'release.', 'I', 'ran', 'the', 'gofix', 'on', 'my', 'code,', 'but', 'there', 'were', 'still', 'some', 'errors.', 'The', 'code', 'used', 'to', 'look:', 'AnkietaTemp', '=', 'template.New(nil)', 'err', ':=', 'AnkietaTemp.ParseFile(""ankieta/ankieta.html"")', 'but', 'now', 'passing', 'nil', ""doesn't"", 'seem', 'to', 'work,', 'so', 'I', 'replaced', 'it', 'into:', 'AnkietaTemp', '=', 'template.New("""")', '_', ',', 'err', ':=', 'AnkietaTemp.ParseFile(""ankieta/ankieta.html"")', 'Tried', 'running', 'my', 'app,', 'but', 'in', 'HTML', 'source', 'I', 'get:', '<', 'img', 'src', '=', '""images/{.section One}{@}{.end}""', 'alt', '=', '""images/{.section One}{@}{.end}""', 'width', '=', '""100%""', '/>', 'Instead', 'of', 'a', 'neat', 'reference', 'to', 'an', 'image', 'file.', 'What', 'is', 'the', 'proper', 'way', 'to', 'parse', 'the', 'template', 'files', 'now,', 'after', 'the', 'update?']"
1136,7987154,"Does anyone know how to create a SOCKET as returned by WSASocket() function in go programming language?

Using a normal syscall.Socket type syscall.Bind results in:
WSAENOTSOCK - Error 10038 - An operation was attempted on something that is not a socket. The specified socket parameter refers to a file, not a socket.

Thanks
","['Does', 'anyone', 'know', 'how', 'to', 'create', 'a', 'SOCKET', 'as', 'returned', 'by', 'WSASocket()', 'function', 'in', 'go', 'programming', 'language?', 'Using', 'a', 'normal', 'syscall.Socket', 'type', 'syscall.Bind', 'results', 'in:', 'WSAENOTSOCK', '-', 'Error', '10038', '-', 'An', 'operation', 'was', 'attempted', 'on', 'something', 'that', 'is', 'not', 'a', 'socket.', 'The', 'specified', 'socket', 'parameter', 'refers', 'to', 'a', 'file,', 'not', 'a', 'socket.', 'Thanks']"
1137,8037783,"Will google Go use less resources than Python and Java on Appengine? Are the instance startup times for go faster than Java's and Python's startup times? 

Is the go program uploaded as binaries or source code and if it is uploaded as source code is it then compiled once or at each instance startup?

In other words: Will I benefit from using Go in app engine from a cost perspective? (only taking to account the cost of the appengine resources not development time)
","['Will', 'google', 'Go', 'use', 'less', 'resources', 'than', 'Python', 'and', 'Java', 'on', 'Appengine?', 'Are', 'the', 'instance', 'startup', 'times', 'for', 'go', 'faster', 'than', ""Java's"", 'and', ""Python's"", 'startup', 'times?', 'Is', 'the', 'go', 'program', 'uploaded', 'as', 'binaries', 'or', 'source', 'code', 'and', 'if', 'it', 'is', 'uploaded', 'as', 'source', 'code', 'is', 'it', 'then', 'compiled', 'once', 'or', 'at', 'each', 'instance', 'startup?', 'In', 'other', 'words:', 'Will', 'I', 'benefit', 'from', 'using', 'Go', 'in', 'app', 'engine', 'from', 'a', 'cost', 'perspective?', '(only', 'taking', 'to', 'account', 'the', 'cost', 'of', 'the', 'appengine', 'resources', 'not', 'development', 'time)']"
1138,8340751,"Is there somewhere a complete WebP encoder and decoder compatible with current weekly (or forkable)?

Is it comparable in speed to the standard png one ?
","['Is', 'there', 'somewhere', 'a', 'complete', 'WebP', 'encoder', 'and', 'decoder', 'compatible', 'with', 'current', 'weekly', '(or', 'forkable)?', 'Is', 'it', 'comparable', 'in', 'speed', 'to', 'the', 'standard', 'png', 'one', '?']"
1139,8868077,"I follow the installation guide at http://golang.org/doc/install.html, 
at first everything goes well, but problem comes at the ""fetch the repository"" step,

the guide says ""$ hg clone -u release https://go.googlecode.com/hg/ go""
I follow the command but system always say that's wrong
so I read the help and modified it into 
""$ hg clone -U release ..repo url... go""
(I don't see a lowercase u option but there's a U instead which means noupdate)
but still goes wrong
so I modified it again 
""$ hg clone -U r60 ..repo url... go""
(I think release actually means go release number?)
ok, now that works finally 
but, when it's over
cd to the go directory,hey,why all the files are hidden?!
and different with the url directory, for ex there's no such a src directory

so what am I doing wrong, and sorry for my english is not good
thank you for your help



for as a new user I can't attach a image and can't have more than two links in one post, see the picture link below at the reply to Evan Shaw

and in the guide page they say that I need to install python-setuptools python-dev and build-essential, because in ubuntu/debian users' distribution's package repository, the  will ""most likely be old and broken"", what that mean? Am I suppose to install the tool manually(but not a easy_install)?



for a new user I can't answer myself,I think jnml points out the best matched answer

I thought this question is answerd,
the problem is that repository in Ubuntu/Debian for  is tool old,
if you just easy_install  (apt-get install ) 
you got version 1.0.1 , that's not match for the command gave on the go installation guide,
so a simple way to work it out is(thanks jnml for pointing this out):


hg clone
cd go
hg update release


that's done.

but I still wonder how can I get the latest version of  be installed on my Debian,but that's another question, 

Thanks a lot to all of you who reply to me, thank you for your help!
","['I', 'follow', 'the', 'installation', 'guide', 'at', 'http://golang.org/doc/install.html,', 'at', 'first', 'everything', 'goes', 'well,', 'but', 'problem', 'comes', 'at', 'the', '""fetch', 'the', 'repository""', 'step,', 'the', 'guide', 'says', '""$', 'hg', 'clone', '-u', 'release', 'https://go.googlecode.com/hg/', 'go""', 'I', 'follow', 'the', 'command', 'but', 'system', 'always', 'say', ""that's"", 'wrong', 'so', 'I', 'read', 'the', 'help', 'and', 'modified', 'it', 'into', '""$', 'hg', 'clone', '-U', 'release', '..repo', 'url...', 'go""', '(I', ""don't"", 'see', 'a', 'lowercase', 'u', 'option', 'but', ""there's"", 'a', 'U', 'instead', 'which', 'means', 'noupdate)', 'but', 'still', 'goes', 'wrong', 'so', 'I', 'modified', 'it', 'again', '""$', 'hg', 'clone', '-U', 'r60', '..repo', 'url...', 'go""', '(I', 'think', 'release', 'actually', 'means', 'go', 'release', 'number?)', 'ok,', 'now', 'that', 'works', 'finally', 'but,', 'when', ""it's"", 'over', 'cd', 'to', 'the', 'go', 'directory,hey,why', 'all', 'the', 'files', 'are', 'hidden?!', 'and', 'different', 'with', 'the', 'url', 'directory,', 'for', 'ex', ""there's"", 'no', 'such', 'a', 'src', 'directory', 'so', 'what', 'am', 'I', 'doing', 'wrong,', 'and', 'sorry', 'for', 'my', 'english', 'is', 'not', 'good', 'thank', 'you', 'for', 'your', 'help', 'for', 'as', 'a', 'new', 'user', 'I', ""can't"", 'attach', 'a', 'image', 'and', ""can't"", 'have', 'more', 'than', 'two', 'links', 'in', 'one', 'post,', 'see', 'the', 'picture', 'link', 'below', 'at', 'the', 'reply', 'to', 'Evan', 'Shaw', 'and', 'in', 'the', 'guide', 'page', 'they', 'say', 'that', 'I', 'need', 'to', 'install', 'python-setuptools', 'python-dev', 'and', 'build-essential,', 'because', 'in', 'ubuntu/debian', ""users'"", ""distribution's"", 'package', 'repository,', 'the', 'will', '""most', 'likely', 'be', 'old', 'and', 'broken"",', 'what', 'that', 'mean?', 'Am', 'I', 'suppose', 'to', 'install', 'the', 'tool', 'manually(but', 'not', 'a', 'easy_install)?', 'for', 'a', 'new', 'user', 'I', ""can't"", 'answer', 'myself,I', 'think', 'jnml', 'points', 'out', 'the', 'best', 'matched', 'answer', 'I', 'thought', 'this', 'question', 'is', 'answerd,', 'the', 'problem', 'is', 'that', 'repository', 'in', 'Ubuntu/Debian', 'for', 'is', 'tool', 'old,', 'if', 'you', 'just', 'easy_install', '(apt-get', 'install', ')', 'you', 'got', 'version', '1.0.1', ',', ""that's"", 'not', 'match', 'for', 'the', 'command', 'gave', 'on', 'the', 'go', 'installation', 'guide,', 'so', 'a', 'simple', 'way', 'to', 'work', 'it', 'out', 'is(thanks', 'jnml', 'for', 'pointing', 'this', 'out):', 'hg', 'clone', 'cd', 'go', 'hg', 'update', 'release', ""that's"", 'done.', 'but', 'I', 'still', 'wonder', 'how', 'can', 'I', 'get', 'the', 'latest', 'version', 'of', 'be', 'installed', 'on', 'my', 'Debian,but', ""that's"", 'another', 'question,', 'Thanks', 'a', 'lot', 'to', 'all', 'of', 'you', 'who', 'reply', 'to', 'me,', 'thank', 'you', 'for', 'your', 'help!']"
1140,9704895,"

EDIT: For what it's worth, I am keeping the code here.
","['As', 'a', 'personal', 'project,', 'trying', 'to', 'learn', 'Go(lang)', 'by', 'applying', 'it', 'to', 'something,', 'I', 'am', 'writing', 'an', 'EMCAScript/JavaScript', '""compiler"";', 'all', 'it', 'will', '(initially)', 'do', 'is', 'allow', 'you', 'to', 'include', 'other', '.js', 'files.', 'Functionality', 'aside,', 'I', 'am', 'pulling', 'my', 'hair', 'out', 'trying', 'to', 'figure', 'out', 'the', 'regexp', 'package.', 'Here', 'is', 'the', 'snippet', 'that', 'does', 'not', 'seem', 'to', 'be', 'doing', 'what', 'I', 'want', 'it', 'to:', '//', 'Note:', '""lines""', 'is', 'an', 'array', 'of', 'strings.', 'var', 'includeRegex', ',', '_', '=', 'regexp.Compile(""^[ \\t]*include[(]{1}\\""([^\\""]+)\\""[)]{1};"")', 'for', '_', ',', 'line', ':=', 'range', 'lines', '{', 'var', 'isInclude', '=', 'includeRegex.Match([]byte(line))', 'if', 'isInclude', '{', 'var', 'includeFile', '=', 'includeRegex.FindString(line)', 'fmt.Println(""INCLUDE"", includeFile)', '}', 'else', '{', '//', '...', '}', 'I', 'have', 'already', 'stumbled', 'across', ""Go's"", 'subset', 'of', 'regular', 'expressions,', 'hence', 'why', 'the', 'regex', 'does', 'not', 'read', 'as', '^', 's', '*', 'include', '(', '""([^""', ']+)', ');', '.', 'I', 'have', 'already', 'tested', 'both', 'the', 'preferred,', 'and', 'the', 'Go-style', 'regex,', 'in', 'RegexPal,', 'and', 'both', 'definitely', 'work.', 'The', 'match', 'just', 'never', 'seems', 'to', 'occurr;', 'what', 'am', 'I', 'doing', 'wrong?', 'For', 'what', ""it's"", 'worth,', 'the', 'include()', 'statement', 'I', 'am', 'trying', 'to', 'parse', 'looks', 'like', 'so:', 'include', '(', '""somefile.js""', ');', 'EDIT:', 'For', 'what', ""it's"", 'worth,', 'I', 'am', 'keeping', 'the', 'code', 'here.']"
1141,9748196,"

The problem with the code above is that the call to f.Addr() near the end is apparently trying to get the address of an unaddressable value.

If there is an alternative solution, I would appreciate that as well. Either way, any help would be much appreciated.

Thanks!
","[""I'm"", 'trying', 'to', 'write', 'functions', 'that', 'will', 'allow', 'me', 'to', 'marshal/unmarshal', 'simple', 'structs', 'into', 'byte', 'arrays.', ""I've"", 'succeeded', 'in', 'writing', 'Marshal,', 'with', 'help', 'from', 'the', 'kind', 'folks', 'at', '#go-nuts,', 'but', ""I'm"", 'running', 'into', 'trouble', 'writing', 'Unmarshal.', '//', 'Unmarshal', 'unpacks', 'the', 'binary', 'data', 'and', 'stores', 'it', 'in', 'the', 'packet', 'using', '//', 'reflection.', 'func', 'Unmarshal', '(', 'b', '[]', 'byte', ',', 't', 'reflect', '.', 'Type', ')', '(', 'pkt', 'interface', '{},', 'err', 'error', ')', '{', 'buf', ':=', 'bytes.NewBuffer(b)', 'p', ':=', 'reflect.New(t)', 'v', ':=', 'reflect.ValueOf(p)', 'for', 'i', ':=', '0', ';', 'i', '<', 't.NumField()', ';', 'i', '++', '{', 'f', ':=', 'v.Field(i)', 'switch', 'f.Kind()', '{', 'case', 'reflect', '.', 'String', ':', '//', 'length', 'of', 'string', 'var', 'l', 'int16', 'var', 'e', 'error', 'e', '=', 'binary.Read(buf, binary.BigEndian, &l)', 'if', 'e', '!=', 'nil', '{', 'err', '=', 'e', 'return', '}', '//', 'read', 'length-of-string', 'bytes', 'from', 'the', 'buffer', 'raw', ':=', 'make', '([]', 'byte', ',', 'l', ')', '_', ',', 'e', '=', 'buf.Read(raw)', 'if', 'e', '!=', 'nil', '{', 'err', '=', 'e', 'return', '}', '//', 'convert', 'the', 'bytes', 'to', 'a', 'string', 'f.SetString(bytes.NewBuffer(raw).String())', 'default', ':', 'e', ':=', 'binary.Read(buf, binary.BigEndian, f.Addr())', 'if', 'e', '!=', 'nil', '{', 'err', '=', 'e', 'return', '}', '}', '}', 'pkt', '=', 'p', 'return', '}', 'The', 'problem', 'with', 'the', 'code', 'above', 'is', 'that', 'the', 'call', 'to', 'f.Addr()', 'near', 'the', 'end', 'is', 'apparently', 'trying', 'to', 'get', 'the', 'address', 'of', 'an', 'unaddressable', 'value.', 'If', 'there', 'is', 'an', 'alternative', 'solution,', 'I', 'would', 'appreciate', 'that', 'as', 'well.', 'Either', 'way,', 'any', 'help', 'would', 'be', 'much', 'appreciated.', 'Thanks!']"
1142,9862443,"

The file numbers.txt is just:

1
2
3
...


ReadFile() seems too long (maybe because of the error handing).

Is there a shorter / more Go idiomatic way to load a file?
","['I', 'need', 'to', 'read', 'a', 'file', 'of', 'integers', 'into', 'an', 'array.', 'I', 'have', 'it', 'working', 'with', 'this:', 'package', 'main', 'import', '(', '""fmt""', '""io""', '""os""', ')', 'func', 'readFile', '(', 'filePath', 'string', ')', '(', 'numbers', '[]', 'int', ')', '{', 'fd', ',', 'err', ':=', 'os.Open(filePath)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'fmt.Sprintf(""open %s: %v"", filePath, err))', '}', 'var', 'line', 'int', 'for', '{', '_', ',', 'err', ':=', 'fmt.Fscanf(fd, ""%d\\n"", &line)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'if', 'err', '==', 'io', '.', 'EOF', '{', 'return', '}', 'panic', '(', 'fmt.Sprintf(""Scan Failed %s: %v"", filePath, err))', '}', 'numbers', '=', 'append', '(', 'numbers', ',', 'line', ')', '}', 'return', '}', 'func', 'main', '()', '{', 'numbers', ':=', 'readFile', '(', '""numbers.txt""', ')', 'fmt.Println(len(numbers))', '}', 'The', 'file', 'numbers.txt', 'is', 'just:', '1', '2', '3', '...', 'ReadFile()', 'seems', 'too', 'long', '(maybe', 'because', 'of', 'the', 'error', 'handing).', 'Is', 'there', 'a', 'shorter', '/', 'more', 'Go', 'idiomatic', 'way', 'to', 'load', 'a', 'file?']"
1143,10022110,"

Of course the tricky part will be filling out nextsibling() for my custom use-case. But just as a general solution to eliminating inner recursion while maintaining the depth-first traversal order I need, this rough outline should do so in some form or another.
","['This', 'is', 'a', 'bit', 'more', 'intricate', 'than', 'a', 'simple', 'left-recursion', 'or', 'tail-call', 'recursion.', 'So', ""I'm"", 'wondering', 'how', 'I', 'can', 'eliminate', 'this', 'kind', 'of', 'recursion.', ""I'm"", 'already', 'keeping', 'my', 'own', 'stack', 'as', 'you', 'can', 'see', 'below,', 'so', 'the', 'function', 'needs', 'to', 'no', 'params', 'or', 'return', 'values.', 'However,', ""it's"", 'still', 'calling', 'itself', 'up', '(or', 'down)', 'to', 'a', 'certain', 'level', 'and', 'I', 'want', 'to', 'turn', 'this', 'into', 'a', 'loop,', 'but', 'been', 'scratching', 'my', 'head', 'over', 'this', 'for', 'some', 'time', 'now.', ""Here's"", 'the', 'simplified', 'test', 'case,', 'replacing', 'all', '""real', 'logic""', 'with', 'printf(""dostuff', 'at', 'level', '#n"")', 'messages.', 'This', 'is', 'in', 'Go', 'but', 'the', 'problem', 'is', 'applicable', 'to', 'most', 'languages.', 'Use', 'of', 'loops', 'and', ""goto's"", 'would', 'be', 'perfectly', 'acceptable', '(but', 'I', 'played', 'with', 'this', 'and', 'it', 'gets', 'convoluted,', 'out-of-hand', 'and', 'seemingly', 'unworkable', 'to', 'begin', 'with);', 'however,', 'additional', 'helper', 'functions', 'should', 'be', 'avoided.', 'I', 'guess', 'I', 'should', 'to', 'turn', 'this', 'into', 'some', 'kind', 'of', 'simple', 'state', 'machine,', 'but...', 'which?', ';)', 'As', 'for', 'the', 'practicality,', 'this', 'is', 'to', 'run', 'at', 'about', '20', 'million', 'times', 'per', 'second', '(stack', 'depth', 'can', 'range', 'from', '1', 'through', '25', 'max', 'later', 'on).', 'This', 'is', 'a', 'case', 'where', 'maintaining', 'my', 'own', 'stack', 'is', 'bound', 'to', 'be', 'more', 'stable', '/', 'faster', 'than', 'the', 'function', 'call', 'stack.', '(There', 'are', 'no', 'other', 'function', 'calls', 'in', 'this', 'function,', 'only', 'calculations.)', 'Also,', 'no', 'garbage', 'generated', '=', 'no', 'garbage', 'collected.', 'So', 'here', 'goes:', 'func', 'testRecursion', '()', '{', 'var', 'root', '*', 'TMyTreeNode', '=', 'makeSomeDeepTreeStructure', '()', '//', 'rl:', 'current', 'recursion', 'level', '//', 'ml:', 'max', 'recursion', 'level', 'var', 'rl', ',', 'ml', '=', '0', ',', 'root', '.', 'MaxDepth', '//', 'node:', '""the', 'stack""', 'var', 'node', '=', 'make', '([]*', 'TMyTreeNode', ',', 'ml', '+', '1', ')', '//', 'the', 'recursive', 'and', 'the', 'non-recursive', '/', 'iterative', 'test', 'functions:', 'var', 'walkNodeRec', ',', 'walkNodeIt', 'func', '();', 'walkNodeIt', '=', 'func', '()', '{', 'log.Panicf(""YOUR ITERATIVE / NON-RECURSIVE IDEAS HERE"")', '}', 'walkNodeRec', '=', 'func', '()', '{', 'log.Printf(""ENTER LEVEL %v"", rl)', 'if', '(', 'node', '[', 'rl', '].', 'Level', '==', 'ml', ')', '||', '(', 'node', '[', 'rl', '].', 'ChildNodes', '==', 'nil', ')', '{', 'log.Printf(""EXIT LEVEL %v"", rl)', 'return', '}', 'log.Printf(""PRE-STUFF LEVEL %v"", rl)', 'for', 'i', ':=', '0', ';', 'i', '<', '3', ';', 'i', '++', '{', 'switch', 'i', '{', 'case', '0', ':', 'log.Printf(""PRECASE %v.%v"", rl, i)', 'node', '[', 'rl', '+', '1', ']', '=', 'node', '[', 'rl', '].', 'ChildNodes', '[', 'rl', '+', 'i', '];', 'rl', '++;', 'walkNodeRec', '();', 'rl', '--', 'log.Printf(""POSTCASE %v.%v"", rl,  i)', 'case', '1', ':', 'log.Printf(""PRECASE %v.%v"", rl, i)', 'node', '[', 'rl', '+', '1', ']', '=', 'node', '[', 'rl', '].', 'ChildNodes', '[', 'rl', '+', 'i', '];', 'rl', '++;', 'walkNodeRec', '();', 'rl', '--', 'log.Printf(""POSTCASE %v.%v"", rl,  i)', 'case', '2', ':', 'log.Printf(""PRECASE %v.%v"", rl, i)', 'node', '[', 'rl', '+', '1', ']', '=', 'node', '[', 'rl', '].', 'ChildNodes', '[', 'rl', '+', 'i', '];', 'rl', '++;', 'walkNodeRec', '();', 'rl', '--', 'log.Printf(""POSTCASE %v.%v"", rl,  i)', '}', '}', '}', '//', 'test', 'recursion', 'for', 'reference:', 'if', 'true', '{', 'rl', ',', 'node', '[', '0', ']', '=', '0', ',', 'root', 'log.Printf(""\\n\\n=========>RECURSIVE ML=%v:"", ml)', 'walkNodeRec', '()', '}', '//', 'test', 'non-recursion,', 'output', 'should', 'be', 'identical', 'if', 'true', '{', 'rl', ',', 'node', '[', '0', ']', '=', '0', ',', 'root', 'log.Printf(""\\n\\n=========>ITERATIVE ML=%v:"", ml)', 'walkNodeIt', '()', '}', '}', 'UPDATE', '--', 'after', 'some', 'discussion', 'here,', 'and', 'further', 'thinking:', 'I', 'just', 'made', 'up', 'the', 'following', 'pseudo-code', 'which', 'in', 'theory', 'should', 'do', 'what', 'I', 'need:', 'curLevel', '=', '0', 'for', '{', 'cn', '=', 'nextsibling', '(', 'curLevel', ',', 'coords', ')', 'lastnode', '[', 'curlevel', ']', '=', 'cn', 'if', 'cn', '<', '8', '{', 'if', 'isleaf', '{', 'process', '()', '}', 'else', '{', 'curLevel', '++', '}', '}', 'else', 'if', 'curLevel', '==', '0', '{', 'break', '}', 'else', '{', 'curLevel', '--', '}', '}', 'Of', 'course', 'the', 'tricky', 'part', 'will', 'be', 'filling', 'out', 'nextsibling()', 'for', 'my', 'custom', 'use-case.', 'But', 'just', 'as', 'a', 'general', 'solution', 'to', 'eliminating', 'inner', 'recursion', 'while', 'maintaining', 'the', 'depth-first', 'traversal', 'order', 'I', 'need,', 'this', 'rough', 'outline', 'should', 'do', 'so', 'in', 'some', 'form', 'or', 'another.']"
1144,10045481,"eldoc-mode show you the parameters of the function you are calling when you write in Emacs Lisp.  Does anything like this exist for Google Go in Emacs?
","['eldoc-mode', 'show', 'you', 'the', 'parameters', 'of', 'the', 'function', 'you', 'are', 'calling', 'when', 'you', 'write', 'in', 'Emacs', 'Lisp.', 'Does', 'anything', 'like', 'this', 'exist', 'for', 'Google', 'Go', 'in', 'Emacs?']"
1145,10136478,"I have been thinking instead of using:


Tomcat
Apache 
Lightweight webserver
PHP
Ruby
JSP


Why not switch my projects to Go language. Because there i have:


webserver built in 
i do not even need to depend on PHP, Ruby, JSP 
Go solves cross-platform such as: runs on FreeBSD, Linux, Solaris (Windows, Mac, Android, Tizen)
nor Apache nor Tomcat nor other webserver maintainence
speed of browser would be extreamly faster then other web server scripting languages.


But one thing i am worried about, which is the stablity of Go webserver compared to other webservers.

Has anyone done this before or am i alone building such projects for production releases?
","['I', 'have', 'been', 'thinking', 'instead', 'of', 'using:', 'Tomcat', 'Apache', 'Lightweight', 'webserver', 'PHP', 'Ruby', 'JSP', 'Why', 'not', 'switch', 'my', 'projects', 'to', 'Go', 'language.', 'Because', 'there', 'i', 'have:', 'webserver', 'built', 'in', 'i', 'do', 'not', 'even', 'need', 'to', 'depend', 'on', 'PHP,', 'Ruby,', 'JSP', 'Go', 'solves', 'cross-platform', 'such', 'as:', 'runs', 'on', 'FreeBSD,', 'Linux,', 'Solaris', '(Windows,', 'Mac,', 'Android,', 'Tizen)', 'nor', 'Apache', 'nor', 'Tomcat', 'nor', 'other', 'webserver', 'maintainence', 'speed', 'of', 'browser', 'would', 'be', 'extreamly', 'faster', 'then', 'other', 'web', 'server', 'scripting', 'languages.', 'But', 'one', 'thing', 'i', 'am', 'worried', 'about,', 'which', 'is', 'the', 'stablity', 'of', 'Go', 'webserver', 'compared', 'to', 'other', 'webservers.', 'Has', 'anyone', 'done', 'this', 'before', 'or', 'am', 'i', 'alone', 'building', 'such', 'projects', 'for', 'production', 'releases?']"
1146,10152478,"

But read from response.Body always empty. And seems I can't use response.Body to send data to server.

Any one can help?
","['I', 'try', 'to', 'connect', 'a', 'http', 'server', 'as', 'long', 'connection,', 'like', 'below:', 'func', 'main', '()', '{', 'request', ',', 'err', ':=', 'http.NewRequest(""GET"", ""http://long.connection.org:8080/"", nil)', 'request.SetBasicAuth(""xxx"", ""oooo"")', 'http_client', ':=', '&', 'http', '.', 'Client', '{}', 'response', ',', '_', ':=', 'http_client.Do(request)', 'var', 'buf', '[]', 'byte', 'for', '{', '_', ',', 'err', ':=', 'response', '.', 'Body.Read(buf)', 'if', 'err', '==', 'io', '.', 'EOF', '{', 'break', '}', 'fmt.Printf(""%s"", string(buf))', '}', '}', 'But', 'read', 'from', 'response.Body', 'always', 'empty.', 'And', 'seems', 'I', ""can't"", 'use', 'response.Body', 'to', 'send', 'data', 'to', 'server.', 'Any', 'one', 'can', 'help?']"
1147,10185942,"

Why does not?
test.html exists
","['how', 'to', 'display', 'the', 'contents', 'of', 'the', 'template?', 'package', 'main', 'import', '(', '""fmt""', '""html/template""', '""os""', ')', 'func', 'main', '()', '{', 't', ':=', 'template.New(""another"")', 't', ',', 'e', ':=', 't.ParseFiles(""test.html"")', 'if', '(', 'e', '!=', 'nil', '){', 'fmt.Println(e)', ';', '}', 't.Execute(os.Stdout, nil)', '}', 'Why', 'does', 'not?', 'test.html', 'exists']"
1148,10529365,"I have a large dataset of philosophic arguments, each of which connect to other arguments as proof or disproof of a given statement. A root statement can have many proofs and disproofs, each of which may also have proofs and disproofs.  Statements can also be used in multiple graphs, and graphs can be analyzed under a ""given context"" or assumption.

I need to construct a bayesian network of related arguments, so that each node propagates influence fairly and accurately to it's connected arguments; I need to be able to calculate the probability of chains of connected nodes concurrently, with each node requiring datastore lookups that must block to get results; the process is mostly I/O bound, and my datastore connection can run asynchronously in java, go and python {google appengine}.  Once each lookup completes, it propagates the effects to all other connected nodes until the probability delta drops below a threshold of irrelevance {currently 0.1%}.  Each node of the process must calculate chains of connections, then sum up all the results across all queries to adjust validity results, with results chained outward to any connected arguments.

In order to avoid recurring infinitely, I was thinking of using an A*-like process in goroutines to propagate updates to the argument maps, with a heuristic based on compounding influence which ignores nodes once probability of influence dips below, say 0.1% .  I'd tried to set up the calculations with SQL triggers, but it got complex and messy way too fast. Then I moved to google appengine to take advantage of asynchronous nosql, and it was better, but still too slow.  I need to be run the updates fast enough to get a snappy UI, so when a user creates or votes for or against a proof or disproof, they can see the results reflected in UI immediately.

I think Go is the language of choice to support the concurrency I need, but I'm open to suggestions.  The client is a monolithic javascript app that just uses XHR and websockets to push and pull argument maps {and their updates} in real time.  I have a java prototype that can compute large chains in 10~15s, but monitoring of performance shows that most of my runtime is wasted in synchronization and overhead from ConcurrentHashMap.

If there are other highly-concurrent languages worth trying out, please let me know. I know java, python, go, ruby and scala, but will learn any language if it suits my needs. 

Similarly, if there are open source implementations of huge Bayesian networks, please leave a suggestion.
","['I', 'have', 'a', 'large', 'dataset', 'of', 'philosophic', 'arguments,', 'each', 'of', 'which', 'connect', 'to', 'other', 'arguments', 'as', 'proof', 'or', 'disproof', 'of', 'a', 'given', 'statement.', 'A', 'root', 'statement', 'can', 'have', 'many', 'proofs', 'and', 'disproofs,', 'each', 'of', 'which', 'may', 'also', 'have', 'proofs', 'and', 'disproofs.', 'Statements', 'can', 'also', 'be', 'used', 'in', 'multiple', 'graphs,', 'and', 'graphs', 'can', 'be', 'analyzed', 'under', 'a', '""given', 'context""', 'or', 'assumption.', 'I', 'need', 'to', 'construct', 'a', 'bayesian', 'network', 'of', 'related', 'arguments,', 'so', 'that', 'each', 'node', 'propagates', 'influence', 'fairly', 'and', 'accurately', 'to', ""it's"", 'connected', 'arguments;', 'I', 'need', 'to', 'be', 'able', 'to', 'calculate', 'the', 'probability', 'of', 'chains', 'of', 'connected', 'nodes', 'concurrently,', 'with', 'each', 'node', 'requiring', 'datastore', 'lookups', 'that', 'must', 'block', 'to', 'get', 'results;', 'the', 'process', 'is', 'mostly', 'I/O', 'bound,', 'and', 'my', 'datastore', 'connection', 'can', 'run', 'asynchronously', 'in', 'java,', 'go', 'and', 'python', '{google', 'appengine}.', 'Once', 'each', 'lookup', 'completes,', 'it', 'propagates', 'the', 'effects', 'to', 'all', 'other', 'connected', 'nodes', 'until', 'the', 'probability', 'delta', 'drops', 'below', 'a', 'threshold', 'of', 'irrelevance', '{currently', '0.1%}.', 'Each', 'node', 'of', 'the', 'process', 'must', 'calculate', 'chains', 'of', 'connections,', 'then', 'sum', 'up', 'all', 'the', 'results', 'across', 'all', 'queries', 'to', 'adjust', 'validity', 'results,', 'with', 'results', 'chained', 'outward', 'to', 'any', 'connected', 'arguments.', 'In', 'order', 'to', 'avoid', 'recurring', 'infinitely,', 'I', 'was', 'thinking', 'of', 'using', 'an', 'A*-like', 'process', 'in', 'goroutines', 'to', 'propagate', 'updates', 'to', 'the', 'argument', 'maps,', 'with', 'a', 'heuristic', 'based', 'on', 'compounding', 'influence', 'which', 'ignores', 'nodes', 'once', 'probability', 'of', 'influence', 'dips', 'below,', 'say', '0.1%', '.', ""I'd"", 'tried', 'to', 'set', 'up', 'the', 'calculations', 'with', 'SQL', 'triggers,', 'but', 'it', 'got', 'complex', 'and', 'messy', 'way', 'too', 'fast.', 'Then', 'I', 'moved', 'to', 'google', 'appengine', 'to', 'take', 'advantage', 'of', 'asynchronous', 'nosql,', 'and', 'it', 'was', 'better,', 'but', 'still', 'too', 'slow.', 'I', 'need', 'to', 'be', 'run', 'the', 'updates', 'fast', 'enough', 'to', 'get', 'a', 'snappy', 'UI,', 'so', 'when', 'a', 'user', 'creates', 'or', 'votes', 'for', 'or', 'against', 'a', 'proof', 'or', 'disproof,', 'they', 'can', 'see', 'the', 'results', 'reflected', 'in', 'UI', 'immediately.', 'I', 'think', 'Go', 'is', 'the', 'language', 'of', 'choice', 'to', 'support', 'the', 'concurrency', 'I', 'need,', 'but', ""I'm"", 'open', 'to', 'suggestions.', 'The', 'client', 'is', 'a', 'monolithic', 'javascript', 'app', 'that', 'just', 'uses', 'XHR', 'and', 'websockets', 'to', 'push', 'and', 'pull', 'argument', 'maps', '{and', 'their', 'updates}', 'in', 'real', 'time.', 'I', 'have', 'a', 'java', 'prototype', 'that', 'can', 'compute', 'large', 'chains', 'in', '10~15s,', 'but', 'monitoring', 'of', 'performance', 'shows', 'that', 'most', 'of', 'my', 'runtime', 'is', 'wasted', 'in', 'synchronization', 'and', 'overhead', 'from', 'ConcurrentHashMap.', 'If', 'there', 'are', 'other', 'highly-concurrent', 'languages', 'worth', 'trying', 'out,', 'please', 'let', 'me', 'know.', 'I', 'know', 'java,', 'python,', 'go,', 'ruby', 'and', 'scala,', 'but', 'will', 'learn', 'any', 'language', 'if', 'it', 'suits', 'my', 'needs.', 'Similarly,', 'if', 'there', 'are', 'open', 'source', 'implementations', 'of', 'huge', 'Bayesian', 'networks,', 'please', 'leave', 'a', 'suggestion.']"
1149,10716433,"

Now, the root / is registered with the handler func. In the first request (GET), I create a form and send it to the user. If the user submits this form, I handle it under the ""POST"" method. Now, I create a different form in the post method handler, and now I want a way to do some operations based on what the user typed in this form2, when [s]he submits form2.

What is the standard way with go to handle the form2 form submission ? I have done some asp programming earlier and we use form action to submit to a different asp file. How can I do some actions based on parsing the form2 submission request ? 
","['I', 'have', 'a', 'webapp', 'where', 'I', 'have', 'code', 'like:', 'func', 'handler', '(', 'w', 'res', ',', 'r', 'req', ')', '{', 'if', 'req', '.', 'Method', '==', 'POST', '{', '//', 'create', 'html', 'form', '2', 'with', 'a', 'submit', 'button2', 'return', ';', '}', '//', 'create', 'html', 'form', '1', 'with', 'a', 'submit', 'button1', 'return', '}', 'func', 'main', '()', '{', 'handle', '(', '""/""', ',', 'handler', ')', '}', 'Now,', 'the', 'root', '/', 'is', 'registered', 'with', 'the', 'handler', 'func.', 'In', 'the', 'first', 'request', '(GET),', 'I', 'create', 'a', 'form', 'and', 'send', 'it', 'to', 'the', 'user.', 'If', 'the', 'user', 'submits', 'this', 'form,', 'I', 'handle', 'it', 'under', 'the', '""POST""', 'method.', 'Now,', 'I', 'create', 'a', 'different', 'form', 'in', 'the', 'post', 'method', 'handler,', 'and', 'now', 'I', 'want', 'a', 'way', 'to', 'do', 'some', 'operations', 'based', 'on', 'what', 'the', 'user', 'typed', 'in', 'this', 'form2,', 'when', '[s]he', 'submits', 'form2.', 'What', 'is', 'the', 'standard', 'way', 'with', 'go', 'to', 'handle', 'the', 'form2', 'form', 'submission', '?', 'I', 'have', 'done', 'some', 'asp', 'programming', 'earlier', 'and', 'we', 'use', 'form', 'action', 'to', 'submit', 'to', 'a', 'different', 'asp', 'file.', 'How', 'can', 'I', 'do', 'some', 'actions', 'based', 'on', 'parsing', 'the', 'form2', 'submission', 'request', '?']"
1150,10828187,"

But the fields are treated as new elements:

there


If I add the tag xml:"",attr"" to the Attr field, it expects a []byte or string specifying the contents of a single attribute.

How do I specify attributes at runtime? How do I annotate the type to provide field(s) for this?
","['I', 'need', 'to', 'marshal', 'in', 'extra', 'attributes', 'on', 'an', 'element', 'at', 'runtime.', ""I've"", 'tried', 'this:', 'type', 'Meh', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'Attrs', '[]', 'xml', '.', 'Attr', '}', 'Meh', '{', 'Attrs', ':', '[]', 'xml', '.', 'Attr', '{', 'xml', '.', 'Attr', '{', 'xml', '.', 'Name', '{', 'Local', ':', '""hi""', '},', '""there""', '},', '},', '}', 'But', 'the', 'fields', 'are', 'treated', 'as', 'new', 'elements:', 'there', 'If', 'I', 'add', 'the', 'tag', 'xml:"",attr""', 'to', 'the', 'Attr', 'field,', 'it', 'expects', 'a', '[]byte', 'or', 'string', 'specifying', 'the', 'contents', 'of', 'a', 'single', 'attribute.', 'How', 'do', 'I', 'specify', 'attributes', 'at', 'runtime?', 'How', 'do', 'I', 'annotate', 'the', 'type', 'to', 'provide', 'field(s)', 'for', 'this?']"
1151,10869843,"

Is there a better way? 
","['I', 'want', 'to', 'do', 'this:', 'test.FailNow(""My Message"")', 'but', 'test.T.FailNow', ""doesn't"", 'take', 'a', 'message.', 'I', 'am', 'currently', 'doing:', 'log.Println(""Expected exception but got none"")', 'test.FailNow()', 'Is', 'there', 'a', 'better', 'way?']"
1152,10990174,"
","['The', 'following', 'code', 'creates', 'a', 'usable', 'instance', 'of', 'the', 'struct,', 'Car.', 'How', 'is', 'this', 'different', 'than', 'using', 'new(Car)?', 'Example:', 'type', 'Car', 'struct', '{', 'make', 'string', '}', 'func', 'Main', '()', '{', 'var', 'car', 'Car', ';', '// how is this different than ""car := new(Car)""?', 'car', '.', 'make', '=', '""Honda""', '}']"
1153,10998222,"

I've found a nullable int64 in the sql package, but json doesn't seem to be able to handle it. 

Is there a nullable int64 type that json can handle? If possible I'd be happy with the json null being translated to, -1 or MinValue. 

Thank you for your input,
Fabian
","[""I'm"", 'trying', 'to', 'parse', 'a', 'json', 'stream', 'in', 'Go.', ""I've"", 'created', 'a', 'simplified', 'example:', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', ')', 'var', 'd', '=', '[]', 'byte', '(', '{', '""world""', ':[{', '""data""', ':', '2251799813685312', '},', '{', '""data""', ':', 'null', '}]}', ')', 'type', 'jsonobj', 'struct', '{', 'World', '[]', 'World', '}', 'type', 'World', 'struct', '{', 'Data', 'int64', '}', 'func', 'main', '()', '{', 'var', 'data', 'jsonobj', 'jerr', ':=', 'json.Unmarshal(d, &data)', 'fmt.Println(jerr)', '}', 'this', 'will', 'give', 'me', 'go', 'run', 'testmin', '.', 'go', 'json', ':', 'cannot', 'unmarshal', 'null', 'into', 'Go', 'value', 'of', 'type', 'int64', ""I've"", 'found', 'a', 'nullable', 'int64', 'in', 'the', 'sql', 'package,', 'but', 'json', ""doesn't"", 'seem', 'to', 'be', 'able', 'to', 'handle', 'it.', 'Is', 'there', 'a', 'nullable', 'int64', 'type', 'that', 'json', 'can', 'handle?', 'If', 'possible', ""I'd"", 'be', 'happy', 'with', 'the', 'json', 'null', 'being', 'translated', 'to,', '-1', 'or', 'MinValue.', 'Thank', 'you', 'for', 'your', 'input,', 'Fabian']"
1154,11609583,"

Any idea what I did wrong to be causing this apparent memory corruption?
","['I', 'am', 'new', 'to', 'golang', 'and', 'currently', 'following', 'this', 'tutorial', 'and', 'source', 'code', 'here', '-', 'http://golang.org/doc/articles/wiki/part2.go', 'After', 'building', 'this', 'file,', 'I', 'am', 'getting', 'calvin', '$', './', 'mywebwiki2', '2012/07/23', '17', ':', '12', ':', '59', 'http', ':', 'panic', 'serving', '[::', '1', ']:', '58820', ':', 'runtime', 'error', ':', 'invalid', 'memory', 'address', 'or', 'nil', 'pointer', 'dereference', '/usr/local/go/src/pkg/net/http/server.go:576', '(', '0x3f2', '02', ')', '_func_003', ':', 'buf.Write(debug.Stack())', '/private/tmp/bindist454984655/go/src/pkg/runtime/proc.c:1443', '(', '0x1', '0', 'c79', ')', '/private/tmp/bindist454984655/go/src/pkg/runtime/runtime.c:128', '(', '0x11745', ')', '/private/tmp/bindist454984655/go/src/pkg/runtime/thread_darwin.c:418', '(', '0x148b5', ')', '/Users/calvin/work/gowiki/mywebwiki2.go:33', '(', '0x2248', ')', 'viewHandler', ':', 'fmt.Fprintf(w, ""%s%s"", p.Title, p.Body)', '/usr/local/go/src/pkg/net/http/server.go:690', '(', '0x331ae', ')', 'HandlerFunc', '.', 'ServeHTTP', ':', 'f', '(', 'w', ',', 'r', ')', '/usr/local/go/src/pkg/net/http/server.go:926', '(', '0x34', '03', '0', ')', '(*', 'ServeMux', ').', 'ServeHTTP', ':', 'mux.handler(r).ServeHTTP(w, r)', '/usr/local/go/src/pkg/net/http/server.go:656', '(', '0x32fc1', ')', '(*', 'conn', ').', 'serve', ':', 'handler.ServeHTTP(w, w.req)', '/private/tmp/bindist454984655/go/src/pkg/runtime/proc.c:271', '(', '0xed7f', ')', '2012/07/23', '17', ':', '12', ':', '59', 'http', ':', 'panic', 'serving', '[::', '1', ']:', '58821', ':', 'runtime', 'error', ':', 'invalid', 'memory', 'address', 'or', 'nil', 'pointer', 'dereference', 'Any', 'idea', 'what', 'I', 'did', 'wrong', 'to', 'be', 'causing', 'this', 'apparent', 'memory', 'corruption?']"
1155,11805356," and
 when ran with ParseFiles(), tmpl is: (*parse.Tree)(nil).  I find it odd that one is a dereference, and one value is a pointer.  This may help solve the riddle
","[""I'm"", 'trying', 'to', 'do', 'some', 'simple', 'work', 'with', 'the', 'text/template', 'package.', 'The', 'sample', 'given', 'at', 'the', 'top', 'of', 'template', 'is', 'what', ""I'm"", 'working', 'with.', 'How', 'do', 'I', 'write', 'the', ""'parsed'"", 'file', 'so', 'template.ParseFiles()', 'properly', 'reads', 'and', 'executes', 'it?', 'package', 'main', 'import', '(', '""text/template""', '""os""', ')', 'type', 'Inventory', 'struct', '{', 'Material', 'string', 'Count', 'uint', '}', 'func', 'main', '()', '{', 'sweaters', ':=', 'Inventory', '{', '""wool""', ',', '17', '}', 'tmpl', ',', 'err', ':=', 'template.New(""test"").Parse(""{{.Count}} items are made of {{.Material}}"")', '//', 'tmpl,', 'err', ':=', 'template.New(""test"").ParseFiles(""file.txt"")', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'err', '=', 'tmpl.Execute(os.Stdout, sweaters)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '}', '/*', 'Contents', 'of', 'file', '.', 'txt', ':', '{{.', 'Count', '}}', 'items', 'are', 'made', 'of', '{{.', 'Material', '}}', 'Error', 'thrown', ':', 'panic', ':', 'template', ':', 'test', ':', '1', ':', '""test""', 'is', 'an', 'incomplete', 'or', 'empty', 'template', 'go', 'routine', '1', '[', 'running', ']:', 'main.main()', '/tmp/templates/t.go:19', '+', '0x21a', 'go', 'routine', '2', '[', 'syscall', ']:', 'created', 'by', 'runtime', '.', 'main', '/var/tmp/portage/dev-lang/go-1.0.1/work/go/src/pkg/runtime/proc.c:221', '*/', 'I', 'have', 'a', 'copy', 'of', 'this', 'code', 'posted', 'at', 'the', 'golang', 'playground', 'here', 'Edit', '#1:', ""I've"", 'been', 'doing', 'some', 'research', 'on', 'this', 'issue...', 'since', ""it's"", 'the', 'Execute()', 'method', 'that', 'actually', 'throws', 'the', 'exception,', 'and', 'not', 'the', 'ParseFiles()', 'part,', 'I', 'checked', 'the', 'method', 'definition:', '//', 'Execute', 'applies', 'a', 'parsed', 'template', 'to', 'the', 'specified', 'data', 'object,', '//', 'and', 'writes', 'the', 'output', 'to', 'wr.', 'func', '(', 't', '*', 'Template', ')', 'Execute', '(', 'wr', 'io', '.', 'Writer', ',', 'data', 'interface', '{})', '(', 'err', 'error', ')', '{', 'defer', 'errRecover', '(&', 'err', ')', 'value', ':=', 'reflect.ValueOf(data)', 'state', ':=', '&', 'state', '{', 'tmpl', ':', 't', ',', 'wr', ':', 'wr', ',', 'line', ':', '1', ',', 'var', 's', ':', '[]', 'var', 'iable', '{{', '""$""', ',', 'value', '}},', '}', 'if', 't', '.', 'Tree', '==', 'nil', '||', 't', '.', 'Root', '==', 'nil', '{', 'state.errorf(""%q is an incomplete or empty template"", t.name)', '}', 'state.walk(value, t.Root)', 'return', '}', 'So,', 'on', 'a', 'hunch,', 'I', 'dumped', 'the', 'value', 'of', 't.Tree', 'for', 'the', 'inline', ""'non-file'"", 'style,', 'tmpl', 'is:', '&', 'parse', '.', 'Tree', '{', 'Name', ':', '""test""', ',', 'Root', ':(*', 'parse', '.', 'ListNode', ')(', '0xf84', '0', '03', '07', '0', '0', '),', 'func', 's', ':[]', 'map', '[', 'string', ']', 'interface', '{}(', 'nil', '),', 'lex', ':(*', 'parse', '.', 'lexer', ')(', 'nil', '),', 'token', ':[', '2', ']', 'parse', '.', 'item', '{', 'parse', '.', 'item', '{', 'typ', ':', '6', ',', 'val', ':', '""""', '},', 'parse', '.', 'item', '{', 'typ', ':', '9', ',', 'val', ':', '""{{""', '}},', 'peekCount', ':', '1', ',', 'var', 's', ':[]', 'string', '(', 'nil', ')}', 'and', 'when', 'ran', 'with', 'ParseFiles(),', 'tmpl', 'is:', '(*parse.Tree)(nil).', 'I', 'find', 'it', 'odd', 'that', 'one', 'is', 'a', 'dereference,', 'and', 'one', 'value', 'is', 'a', 'pointer.', 'This', 'may', 'help', 'solve', 'the', 'riddle']"
1156,12224412,"

This only happens when I try to make the program run in parallel. If I have it run linearly then all the urls are found correctly.

Note: If I am not doing this right (parallelism I mean) then I apologise.
","[""I've"", 'just', 'started', 'learning', 'go,', 'and', 'have', 'been', 'working', 'through', 'the', 'tour.', 'The', 'last', 'exercise', 'is', 'to', 'edit', 'a', 'web', 'crawler', 'to', 'crawl', 'in', 'parallel', 'and', 'without', 'repeats.', 'Here', 'is', 'the', 'link', 'to', 'the', 'exercise:', 'http://tour.golang.org/#70', 'Here', 'is', 'the', 'code.', 'I', 'only', 'changed', 'the', 'crawl', 'and', 'the', 'main', 'function.', 'So', ""I'll"", 'just', 'post', 'those', 'to', 'keep', 'it', 'neat.', '//', 'Crawl', 'uses', 'fetcher', 'to', 'recursively', 'crawl', '//', 'pages', 'starting', 'with', 'url,', 'to', 'a', 'maximum', 'of', 'depth.', 'var', 'used', '=', 'make', '(', 'map', '[', 'string', ']', 'bool', ')', 'var', 'urlchan', '=', 'make', '(', 'chan', 'string', ')', 'func', 'Crawl', '(', 'url', 'string', ',', 'depth', 'int', ',', 'fetcher', 'Fetcher', ')', '{', '//', 'TODO:', 'Fetch', 'URLs', 'in', 'parallel.', '//', 'Done:', ""Don't"", 'fetch', 'the', 'same', 'URL', 'twice.', '//', 'This', 'implementation', ""doesn't"", 'do', 'either:', 'done', ':=', 'make', '(', 'chan', 'bool', ')', 'if', 'depth', '<=', '0', '{', 'return', '}', 'body', ',', 'urls', ',', 'err', ':=', 'fetcher.Fetch(url)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'fmt.Printf(""\\nfound: %s %q\\n\\n"", url, body)', 'go', 'func', '()', '{', 'for', '_', ',', 'i', ':=', 'range', 'urls', '{', 'urlchan', '<-', 'i', '}', 'done', '<-', 'true', '}()', 'for', 'u', ':=', 'range', 'urlchan', '{', 'if', 'used', '[', 'u', ']', '==', 'false', '{', 'used', '[', 'u', ']', '=', 'true', 'go', 'Crawl', '(', 'u', ',', 'depth', '-', '1', ',', 'fetcher', ')', '}', 'if', '<-', 'done', '==', 'true', '{', 'break', '}', '}', 'return', '}', 'func', 'main', '()', '{', 'used', '[', '""http://golang.org/""', ']', '=', 'true', 'Crawl', '(', '""http://golang.org/""', ',', '4', ',', 'fetcher', ')', '}', 'The', 'problem', 'is', 'that', 'when', 'I', 'run', 'the', 'program', 'the', 'crawler', 'stops', 'after', 'printing', 'not', 'found', ':', 'http', '://', 'go', 'lang', '.', 'org/cmd/', 'This', 'only', 'happens', 'when', 'I', 'try', 'to', 'make', 'the', 'program', 'run', 'in', 'parallel.', 'If', 'I', 'have', 'it', 'run', 'linearly', 'then', 'all', 'the', 'urls', 'are', 'found', 'correctly.', 'Note:', 'If', 'I', 'am', 'not', 'doing', 'this', 'right', '(parallelism', 'I', 'mean)', 'then', 'I', 'apologise.']"
1157,12374718,"

I don´t know if this is possible but I would really like to write scripts in Go since I like the language a lot.
","['I', 'am', 'trying', 'to', 'write', 'a', 'script', 'in', 'Go', 'but', 'I', 'get', 'this', 'error:', 'bad', 'interpreter:', 'Permission', 'denied', 'My', 'super', 'simple', 'script', 'is', 'as', 'follow:', '!/', 'usr/local/Cellar/go/1.0.2/bin', 'fmt.Println(""Hello World"")', 'I', 'don´t', 'know', 'if', 'this', 'is', 'possible', 'but', 'I', 'would', 'really', 'like', 'to', 'write', 'scripts', 'in', 'Go', 'since', 'I', 'like', 'the', 'language', 'a', 'lot.']"
1158,12451898,"
","[""I'm"", 'using', 'Webfaction', 'API', 'and', 'trying', 'to', 'unmarshal', 'their', 'response', 'to', 'obtain', 'the', 'session', 'ID', '(12345abcde...', 'below).', 'How', 'do', 'I', 'access', 'the', 'specific', 'value', 'when', 'its', 'nested', 'under', 'several', 'fields', '(namely,', 'params>param)?', 'Code', 'below', 'is', 'at', 'http://play.golang.org/p/krG4_fXVka', 'package', 'main', 'import', '(', '""encoding/xml""', '""fmt""', ')', 'type', 'Result', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'xml', ':', '""methodResponse""', 'Values', '[]', 'string', 'xml', ':', '""params>param>value""', '}', 'func', 'main', '()', '{', 'data', ':=', '12345', 'abcde12345abcde12345', 'username', 'trex', 'home', '/', 'home', 'mail_server', 'Mailbox1', 'web_server', 'Web12', 'id', '1234', '`', 'v', ':=', 'Result', '{}', 'err', ':=', 'xml.Unmarshal([]byte(data), &v)', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""error: %v"", err)', 'return', '}', 'fmt.Printf(""XMLName: %#v\\n"", v.XMLName)', 'fmt.Printf(""Values: %#v\\n"", v.Values)', '}']"
1159,12540057,"

to see the resulting data structure, like Data::Dumper would turn the JSON into an Array of Hashes. Seeing this in Go, will help me to understand how to construct and work with the data. Something like this would be considered a major lightbulb moment in my learning of Go.

Contrary to the statements made in the C counterpart post, I believe we can write this, and since I'll be passing Dumper to Println, after compilation what ever JSON string or XML page I pass in and decode. I should be able to see the result of the decoding, in a Dumper like state... So, does any more know of anything like this that exists? or maybe some pointers to getting something like this done? 
","[""I've"", 'looked', 'at', 'the', 'very', 'similarly', 'titled', 'post', '(Is', 'there', 'a', 'C', 'equivalent', 'to', ""Perls'"", 'Dumper()', 'method', 'in', 'Data::Dumper?),', 'regarding', 'a', 'C', 'equivalent', 'to', 'Data', '::', 'Dumper', '::', 'Dumper', '();', '.', 'I', 'have', 'a', 'similar', 'question', 'for', 'the', 'Go', 'language.', ""I'm"", 'a', 'Perl', 'Zealot', 'by', 'trade,', 'and', 'am', 'a', 'progamming', 'hobbyist,', 'and', 'make', 'use', 'of', 'Data::Dumper', 'and', 'similar', 'offspring', 'literally', 'hundreds', 'of', 'times', 'a', 'day.', ""I've"", 'taken', 'up', 'learning', 'Go,', 'because', 'it', 'looks', 'like', 'a', 'fun', 'and', 'interesting', 'language,', 'something', 'that', 'will', 'get', 'me', 'out', 'of', 'the', 'Perl', 'rut', ""I'm"", 'in,', 'while', 'opening', 'my', 'eyes', 'to', 'new', 'ways', 'of', 'doing', 'stuffz...', 'One', 'of', 'the', 'things', 'I', 'really', 'want', 'is', 'something', 'like:', 'fmt.Println(dump.Dumper(decoded_json))', 'to', 'see', 'the', 'resulting', 'data', 'structure,', 'like', 'Data::Dumper', 'would', 'turn', 'the', 'JSON', 'into', 'an', 'Array', 'of', 'Hashes.', 'Seeing', 'this', 'in', 'Go,', 'will', 'help', 'me', 'to', 'understand', 'how', 'to', 'construct', 'and', 'work', 'with', 'the', 'data.', 'Something', 'like', 'this', 'would', 'be', 'considered', 'a', 'major', 'lightbulb', 'moment', 'in', 'my', 'learning', 'of', 'Go.', 'Contrary', 'to', 'the', 'statements', 'made', 'in', 'the', 'C', 'counterpart', 'post,', 'I', 'believe', 'we', 'can', 'write', 'this,', 'and', 'since', ""I'll"", 'be', 'passing', 'Dumper', 'to', 'Println,', 'after', 'compilation', 'what', 'ever', 'JSON', 'string', 'or', 'XML', 'page', 'I', 'pass', 'in', 'and', 'decode.', 'I', 'should', 'be', 'able', 'to', 'see', 'the', 'result', 'of', 'the', 'decoding,', 'in', 'a', 'Dumper', 'like', 'state...', 'So,', 'does', 'any', 'more', 'know', 'of', 'anything', 'like', 'this', 'that', 'exists?', 'or', 'maybe', 'some', 'pointers', 'to', 'getting', 'something', 'like', 'this', 'done?']"
1160,12574909,"

It finishes in a few minutes.

Why is the Go version so much faster. Are they both counting up to 1000000000 or am I missing something?
","['I', 'think', 'I', 'may', 'have', 'implemented', 'this', 'incorrectly', 'because', 'the', 'results', 'do', 'not', 'make', 'sense.', 'I', 'have', 'a', 'go', 'program', 'that', 'counts', 'to', '1000000000', 'package', 'main', 'import', '(', '""fmt""', ')', 'func', 'main', '()', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '1000000000', ';', 'i', '++', '{}', 'fmt.Println(""Done"")', '}', 'It', 'finishes', 'in', 'less', 'than', 'a', 'second.', 'On', 'the', 'other', 'hand', 'I', 'have', 'a', 'python', 'script', 'x', '=', '0', 'while', 'x', '<', '1000000000', ':', 'x', '+=', '1', 'print', ""'Done'"", 'It', 'finishes', 'in', 'a', 'few', 'minutes.', 'Why', 'is', 'the', 'Go', 'version', 'so', 'much', 'faster.', 'Are', 'they', 'both', 'counting', 'up', 'to', '1000000000', 'or', 'am', 'I', 'missing', 'something?']"
1161,12612409,"

Thanks!

PS: Very tedious to add four space before every line of code in stackoverflow especially when you are copy pasting. Didn't find it very user friendly or is there an easier way?
","['Before', 'I', 'being', 'a', 'bit', 'of', 'background,', 'I', 'am', 'very', 'new', 'to', 'go', 'programming', 'language.', 'I', 'am', 'running', 'go', 'on', 'Win', '7,', 'latest', 'go', 'package', 'installer', 'for', 'windows.', ""I'm"", 'not', 'good', 'at', 'coding', 'but', 'I', 'do', 'like', 'some', 'challenge', 'of', 'learning', 'a', 'new', 'language.', 'I', 'wanted', 'to', 'start', 'learn', 'Erlang', 'but', 'found', 'go', 'very', 'interesting', 'based', 'on', 'the', 'GO', 'I/O', 'videos', 'in', 'youtube.', ""I'm"", 'having', 'problem', 'with', 'capturing', 'POST', 'form', 'values', 'in', 'GO.', 'I', 'spend', 'three', 'hours', 'yesterday', 'to', 'get', 'go', 'to', 'print', 'a', 'POST', 'form', 'value', 'in', 'the', 'browser', 'and', 'failed', 'miserably.', 'I', ""don't"", 'know', 'what', ""I'm"", 'doing', 'wrong,', 'can', 'anyone', 'point', 'me', 'to', 'the', 'right', 'direction?', 'I', 'can', 'easily', 'do', 'this', 'in', 'another', 'language', 'like', 'C#,', 'PHP,', 'VB,', 'ASP,', 'Rails', 'etc.', 'I', 'have', 'search', 'the', 'entire', 'interweb', 'and', ""haven't"", 'found', 'a', 'working', 'sample.', 'Below', 'is', 'my', 'sample', 'code.', 'Here', 'is', 'Index.html', 'page', '{{', 'define', '""title""', '}}', 'Homepage', '{{', 'end', '}}', '{{', 'define', '""content""', '}}', 'My', 'Homepage', 'Hello', ',', 'and', 'welcome', 'to', 'my', 'homepage', '!', 'Enter', 'your', 'name', ':', 'Go', '{{', 'end', '}}', 'Here', 'is', 'the', 'base', 'page', '{{', 'template', '""title""', '.', '}}', '{{', 'template', '""content""', '.', '}}', 'My', 'homepage', '2012', 'copy', 'now', 'some', 'go', 'code', 'package', 'main', 'import', '(', '""fmt""', '""http""', '""strings""', '""html/template""', ')', 'var', 'index', '=', 'template', '.', 'Must', '(', 'template', '.', 'ParseFiles', '(', '""templates/_base.html""', ',', '""templates/index.html""', ',', '))', 'func', 'GeneralHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'index.Execute(w, nil)', 'if', 'r', '.', 'Method', '==', '""POST""', '{', 'a', ':=', 'r.FormValue(""username"")', 'fmt.Fprintf(w, ""hi %s!"",a)', ';', '//<-- this variable does not rendered in the browser!!!', '}', '}', 'func', 'helloHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'remPartOfURL', ':=', 'r', '.', 'URL', '.', 'Path', '[', 'len', '(', '""/hello/""', '):]', 'fmt.Fprintf(w, ""Hello %s!"", remPartOfURL)', '}', 'func', 'main', '()', '{', 'http.HandleFunc(""/"", GeneralHandler)', 'http.HandleFunc(""/hello/"", helloHandler)', 'http.ListenAndServe(""localhost:81"", nil)', '}', 'Thanks!', 'PS:', 'Very', 'tedious', 'to', 'add', 'four', 'space', 'before', 'every', 'line', 'of', 'code', 'in', 'stackoverflow', 'especially', 'when', 'you', 'are', 'copy', 'pasting.', ""Didn't"", 'find', 'it', 'very', 'user', 'friendly', 'or', 'is', 'there', 'an', 'easier', 'way?']"
1162,12659126,"

to get entity key.

How do this?

Sorry for my poor English. Thanks!
","['I', 'want', 'to', 'use', 'look', 'like', 'datastore.NewQuery(""Article"").Filter(""ID ="", id)', 'to', 'get', 'entity', 'key.', 'How', 'do', 'this?', 'Sorry', 'for', 'my', 'poor', 'English.', 'Thanks!']"
1163,12885235,"
","['Starting', 'to', 'work', 'through', 'the', 'Google', 'Go', 'HelloWorld', 'tutorial', 'from:', 'https://developers.google.com/appengine/docs/go/gettingstarted/helloworld', 'Using', 'OS', 'X', '10.8.2', 'on', 'MacBook', 'Pro.', 'Followed', 'the', 'steps,', 'but', 'when', 'I', 'run', 'the', 'first', 'code', '(', 'dev_appserver.py', 'myapp/', '),', 'I', 'get', 'errors', 'listed', 'at', 'end', 'of', 'question.', 'This', 'is', 'the', 'hello', 'world', 'program:', 'package', 'hello', 'import', '(', '""fmt""', '""net/http""', ')', 'func', 'init', '()', '{', 'http.HandleFunc(""/"", handler)', '}', 'func', 'handler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'fmt.Fprint(w, ""Hello, world!"")', '}', 'and', 'this', 'is', 'the', 'configuration', 'file:', 'application', ':', 'helloworld', 'version', ':', '1', 'runtime', ':', 'go', 'api_version', ':', 'go', '1', 'handlers:', '-', 'url', ':', '/.*', 'script', ':', '_go_app', 'Have', 'googled', 'and', 'searched', 'here', 'on', 'stackoverflow,', 'but', 'not', 'found', 'solution.', 'Let', 'me', 'know', 'if', 'you', 'have', 'any', 'ideas/suggestions.', 'Last', 'login', ':', 'Sun', 'Oct', '14', '13', ':', '05', ':', '37', 'on', 'ttys000', 'derek', '-', 'etnyres', '-', 'macbook', '-', 'pro', '-', '2', ':', 'dereketnyre', '$', 'dev_appserver', '.', 'py', 'myapp', '/', 'WARNING', '2012', '-', '10', '-', '14', '18', ':', '19', ':', '54', ',', '239', 'rdbms_mysqldb', '.', 'py', ':', '74', ']', 'The', 'rdbms', 'API', 'is', 'not', 'available', 'because', 'the', 'MySQLdb', 'library', 'could', 'not', 'be', 'loaded', '.', 'Warning', ':', 'You', 'are', 'using', 'a', 'Python', 'runtime', '(', '2', '.', '7', ')', 'that', 'is', 'more', 'recent', 'than', 'the', 'production', 'runtime', 'environment', '(', '2', '.', '5', ').', 'Your', 'application', 'may', 'use', 'features', 'that', 'are', 'not', 'available', 'in', 'the', 'production', 'environment', 'and', 'may', 'not', 'work', 'correctly', 'when', 'deployed', 'to', 'production', '.', 'CRITICAL', '2012', '-', '10', '-', '14', '18', ':', '19', ':', '54', ',', '686', 'appcfg', '.', 'py', ':', '562', ']', 'The', 'api_version', 'specified', 'in', 'app.yaml (go1)', 'is', 'not', 'supported', 'by', 'this', 'release', 'of', 'the', 'SDK', '.', 'The', 'supported', 'api_versions', 'are', '[', ""'1'"", '].', '==========', 'Update', 'Changed', 'the', 'api_version', 'to', 'be', '1', '(', 'api_version:', '1)', 'and', 'it', 'did', 'help.', 'Still', 'gives', 'error', 'message', 'but', 'the', 'server', 'starts.', 'It', 'now', 'says:', 'derek', '-', 'etnyres', '-', 'macbook', '-', 'pro', '-', '2', ':', 'dereketnyre', '$', 'dev_appserver', '.', 'py', 'myapp', '/', 'WARNING', '2012', '-', '10', '-', '14', '21', ':', '03', ':', '14', ',', '910', 'rdbms_mysqldb', '.', 'py', ':', '74', ']', 'The', 'rdbms', 'API', 'is', 'not', 'available', 'because', 'the', 'MySQLdb', 'library', 'could', 'not', 'be', 'loaded', '.', 'Warning', ':', 'You', 'are', 'using', 'a', 'Python', 'runtime', '(', '2', '.', '7', ')', 'that', 'is', 'more', 'recent', 'than', 'the', 'production', 'runtime', 'environment', '(', '2', '.', '5', ').', 'Your', 'application', 'may', 'use', 'features', 'that', 'are', 'not', 'available', 'in', 'the', 'production', 'environment', 'and', 'may', 'not', 'work', 'correctly', 'when', 'deployed', 'to', 'production', '.', 'INFO', '2012', '-', '10', '-', '14', '21', ':', '03', ':', '15', ',', '324', 'appcfg', '.', 'py', ':', '585', ']', 'Checking', 'for', 'updates', 'to', 'the', 'SDK', '.', 'INFO', '2012', '-', '10', '-', '14', '21', ':', '03', ':', '15', ',', '551', 'appcfg', '.', 'py', ':', '603', ']', 'The', 'SDK', 'is', 'up', 'to', 'date', '.', 'WARNING', '2012', '-', '10', '-', '14', '21', ':', '03', ':', '15', ',', '551', 'datastore_file_stub', '.', 'py', ':', '518', ']', 'Could', 'not', 'read', 'datastore', 'data', 'from', '/var/folders/s0/095xdtkd3cgbjp73tpxx309r0000gn/T/dev_appserver.datastore', 'WARNING', '2012', '-', '10', '-', '14', '21', ':', '03', ':', '15', ',', '552', 'simple_search_stub', '.', 'py', ':', '949', ']', 'Could', 'not', 'read', 'search', 'indexes', 'from', '/var/folders/s0/095xdtkd3cgbjp73tpxx309r0000gn/T/dev_appserver.searchindexes', 'WARNING', '2012', '-', '10', '-', '14', '21', ':', '03', ':', '15', ',', '562', 'dev_appserver', '.', 'py', ':', '3621', ']', 'Could', 'not', 'initialize', 'images', 'API', ';', 'you', 'are', 'likely', 'missing', 'the', 'Python', '""PIL""', 'module', '.', 'ImportError', ':', 'No', 'module', 'named', '_imaging', 'INFO', '2012', '-', '10', '-', '14', '21', ':', '03', ':', '15', ',', '570', 'dev_appserver_multiprocess', '.', 'py', ':', '655', ']', 'Running', 'application', 'dev', 'helloworld', 'on', 'port', '8080', ':', 'http', '://', 'localhost', ':', '8080', 'INFO', '2012', '-', '10', '-', '14', '21', ':', '03', ':', '15', ',', '570', 'dev_appserver_multiprocess', '.', 'py', ':', '657', ']', 'Admin', 'console', 'is', 'available', 'at', ':', 'http', '://', 'localhost', ':', '8080/_ah/admin', 'When', 'I', 'go', 'to', 'localhost:8080', 'using', 'Safari', '-', 'does', 'not', 'display', 'hello', 'word', '-', 'gives', 'a', 'screen', 'full', 'of', 'python', 'script', 'exceptions.', 'At', 'the', 'very', 'bottom', 'it', 'says:', ':', 'no', 'go', 'root', 'found', 'at', '/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/goroot', 'args', '=', '(', ""'no goroot found at /Applications/GoogleAppEngine...bundle/Contents/Resources/google_appengine/goroot'"", ',)', 'message', '=', ""'no goroot found at /Applications/GoogleAppEngine...bundle/Contents/Resources/google_appengine/goroot'"", 'Looks', 'like', 'the', 'path', 'is', 'not', 'set', 'correctly?', 'The', 'full', 'text', 'of', 'the', 'python', 'errors', 'is:', 'pe', ""'exceptions.AttributeError'"", '>', 'Python', '2', '.', '7', '.', '2', ':', '/usr/bin/python', 'Sun', 'Oct', '14', '21', ':', '29', ':', '05', '2012', 'A', 'problem', 'occurred', 'in', 'a', 'Python', 'script', '.', 'Here', 'is', 'the', 'sequence', 'of', 'func', 'tion', 'calls', 'leading', 'up', 'to', 'the', 'error', ',', 'in', 'the', 'order', 'they', 'occurred', '.', '/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver.py', 'in', '_HandleRequest', '(', 'self', '=)', '2952', 'outfile', '=', 'cStringIO.StringIO()', '2953', 'try', ':', '=>', '2954', 'self._Dispatch(dispatcher, self.rfile, outfile, env_dict)', '2955', 'finally', ':', '2956', 'self', '.', 'module_manager.UpdateModuleFileModificationTimes()', 'self', '=', ',', 'self', '.', '_Dispatch', '=', '>,', 'dispatcher', '=', ',', 'self', '.', 'rfile', '=', ',', 'outfile', '=', ',', 'env_dict', '=', '{', ""'APPENGINE_RUNTIME'"", ':', ""'go'"", ',', ""'APPLICATION_ID'"", ':', ""'dev~helloworld'"", ',', ""'CURRENT_VERSION_ID'"", ':', ""'1.1'"", ',', ""'DEFAULT_VERSION_HOSTNAME'"", ':', ""'localhost:8080'"", ',', ""'REMOTE_ADDR'"", ':', ""'127.0.0.1'"", ',', ""'REQUEST_ID_HASH'"", ':', ""'C1DFD96E'"", ',', ""'REQUEST_METHOD'"", ':', ""'GET'"", ',', ""'SDK_VERSION'"", ':', ""'1.7.2'"", ',', ""'SERVER_NAME'"", ':', ""'localhost'"", ',', ""'SERVER_PORT'"", ':', ""'8080'"", ',', '...}', '/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver.py', 'in', '_Dispatch', '(', 'self', '=,', 'dispatcher', '=,', 'socket_infile', '=,', 'outfile', '=,', 'env_dict', '={', ""'APPENGINE_RUNTIME'"", ':', ""'go'"", ',', ""'APPLICATION_ID'"", ':', ""'dev~helloworld'"", ',', ""'CURRENT_VERSION_ID'"", ':', ""'1.1'"", ',', ""'DEFAULT_VERSION_HOSTNAME'"", ':', ""'localhost:8080'"", ',', ""'REMOTE_ADDR'"", ':', ""'127.0.0.1'"", ',', ""'REQUEST_ID_HASH'"", ':', ""'C1DFD96E'"", ',', ""'REQUEST_METHOD'"", ':', ""'GET'"", ',', ""'SDK_VERSION'"", ':', ""'1.7.2'"", ',', ""'SERVER_NAME'"", ':', ""'localhost'"", ',', ""'SERVER_PORT'"", ':', ""'8080'"", ',', '...})', '2822', 'dispatcher', '.', 'Dispatch', '(', 'app_server_request', ',', '2823', 'outfile', ',', '=>', '2824', 'base_env_dict', '=', 'env_dict', ')', '2825', 'finally', ':', '2826', 'request_file.close()', 'base_env_dict', 'undefined', ',', 'env_dict', '=', '{', ""'APPENGINE_RUNTIME'"", ':', ""'go'"", ',', ""'APPLICATION_ID'"", ':', ""'dev~helloworld'"", ',', ""'CURRENT_VERSION_ID'"", ':', ""'1.1'"", ',', ""'DEFAULT_VERSION_HOSTNAME'"", ':', ""'localhost:8080'"", ',', ""'REMOTE_ADDR'"", ':', ""'127.0.0.1'"", ',', ""'REQUEST_ID_HASH'"", ':', ""'C1DFD96E'"", ',', ""'REQUEST_METHOD'"", ':', ""'GET'"", ',', ""'SDK_VERSION'"", ':', ""'1.7.2'"", ',', ""'SERVER_NAME'"", ':', ""'localhost'"", ',', ""'SERVER_PORT'"", ':', ""'8080'"", ',', '...}', '/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver.py', 'in', 'Dispatch', '(', 'self', '=,', 'request', '=', 'for', 'ce_admin', ':', 'False', '>,', 'outfile', '=,', 'base_env_dict', '={', ""'APPENGINE_RUNTIME'"", ':', ""'go'"", ',', ""'APPLICATION_ID'"", ':', ""'dev~helloworld'"", ',', ""'CURRENT_VERSION_ID'"", ':', ""'1.1'"", ',', ""'DEFAULT_VERSION_HOSTNAME'"", ':', ""'localhost:8080'"", ',', ""'REMOTE_ADDR'"", ':', ""'127.0.0.1'"", ',', ""'REQUEST_ID_HASH'"", ':', ""'C1DFD96E'"", ',', ""'REQUEST_METHOD'"", ':', ""'GET'"", ',', ""'SDK_VERSION'"", ':', ""'1.7.2'"", ',', ""'SERVER_NAME'"", ':', ""'localhost'"", ',', ""'SERVER_PORT'"", ':', ""'8080'"", ',', '...})', '705', 'for', 'ward_request', '=', 'dispatcher', '.', 'Dispatch', '(', 'request', ',', '706', 'outfile', ',', '=>', '707', 'base_env_dict', '=', 'base_env_dict', ')', '708', '709', 'while', 'for', 'ward_request', ':', 'base_env_dict', '=', '{', ""'APPENGINE_RUNTIME'"", ':', ""'go'"", ',', ""'APPLICATION_ID'"", ':', ""'dev~helloworld'"", ',', ""'CURRENT_VERSION_ID'"", ':', ""'1.1'"", ',', ""'DEFAULT_VERSION_HOSTNAME'"", ':', ""'localhost:8080'"", ',', ""'REMOTE_ADDR'"", ':', ""'127.0.0.1'"", ',', ""'REQUEST_ID_HASH'"", ':', ""'C1DFD96E'"", ',', ""'REQUEST_METHOD'"", ':', ""'GET'"", ',', ""'SDK_VERSION'"", ':', ""'1.7.2'"", ',', ""'SERVER_NAME'"", ':', ""'localhost'"", ',', ""'SERVER_PORT'"", ':', ""'8080'"", ',', '...}', '/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver.py', 'in', 'Dispatch', '(', 'self', '=,', 'request', '=', 'for', 'ce_admin', ':', 'False', '>,', 'outfile', '=,', 'base_env_dict', '={', ""'APPENGINE_RUNTIME'"", ':', ""'go'"", ',', ""'APPLICATION_ID'"", ':', ""'dev~helloworld'"", ',', ""'CURRENT_VERSION_ID'"", ':', ""'1.1'"", ',', ""'DEFAULT_VERSION_HOSTNAME'"", ':', ""'localhost:8080'"", ',', ""'REMOTE_ADDR'"", ':', ""'127.0.0.1'"", ',', ""'REQUEST_ID_HASH'"", ':', ""'C1DFD96E'"", ',', ""'REQUEST_METHOD'"", ':', ""'GET'"", ',', ""'SDK_VERSION'"", ':', ""'1.7.2'"", ',', ""'SERVER_NAME'"", ':', ""'localhost'"", ',', ""'SERVER_PORT'"", ':', ""'8080'"", ',', '...})', '1770', 'memory_file', ',', '1771', 'outfile', ',', '=>', '1772', 'self', '.', '_module_dict', ')', '1773', 'finally', ':', '1774', 'logging', '.', 'root', '.', 'level', '=', 'before_level', 'self', '=', ',', 'self', '.', '_module_dict', '=', '{', ""'codecs'"", ':', ',', ""'email'"", ':', ',', ""'email.Charset'"", ':', ',', ""'email.Encoders'"", ':', ',', ""'email.Errors'"", ':', ',', ""'email.FeedParser'"", ':', ',', ""'email.Generator'"", ':', ',', ""'email.Header'"", ':', ',', ""'email.Iterators'"", ':', ',', ""'email.MIMEAudio'"", ':', ',', '...}', ""/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver.py in ExecuteCGI(config=, root_path='/Users/dereketnyre/myapp', handler_path='_go_app', cgi_path='/Users/dereketnyre/myapp/_go_app', env={'APPENGINE_RUNTIME': 'go', 'APPLICATION_ID': 'dev~helloworld', 'AUTH_DOMAIN': 'gmail.com', 'CONTENT_LENGTH': '', 'CONTENT_TYPE': 'application/x-www-form-urlencoded', 'CURRENT_VERSION_ID': '1.1', 'DEFAULT_VERSION_HOSTNAME': 'localhost:8080', 'GATEWAY_INTERFACE': 'CGI/1.1', 'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',"", ""'HTTP_ACCEPT_LANGUAGE'"", ':', ""'en-us'"", ',', '...},', 'infile', '=,', 'outfile', '=,', 'module_dict', '={', ""'codecs'"", ':', ',', ""'email'"", ':', ',', ""'email.Charset'"", ':', ',', ""'email.Encoders'"", ':', ',', ""'email.Errors'"", ':', ',', ""'email.FeedParser'"", ':', ',', ""'email.Generator'"", ':', ',', ""'email.Header'"", ':', ',', ""'email.Iterators'"", ':', ',', ""'email.MIMEAudio'"", ':', ',', '...},', 'exec_script', '=,', 'exec_py27_handler', '=)', '1588', 'from', 'go', 'ogle', '.', 'appengine', '.', 'ext', '.', 'go', 'import', 'execute_go_cgi', '1589', 'return', 'execute_go_cgi', '(', 'root_path', ',', 'config', ',', 'handler_path', ',', 'cgi_path', ',', '=>', '1590', 'env', ',', 'infile', ',', 'outfile', ')', '1591', '1592', 'env', '=', '{', ""'APPENGINE_RUNTIME'"", ':', ""'go'"", ',', ""'APPLICATION_ID'"", ':', ""'dev~helloworld'"", ',', ""'AUTH_DOMAIN'"", ':', ""'gmail.com'"", ',', ""'CONTENT_LENGTH'"", ':', ""''"", ',', ""'CONTENT_TYPE'"", ':', ""'application/x-www-form-urlencoded'"", ',', ""'CURRENT_VERSION_ID'"", ':', ""'1.1'"", ',', ""'DEFAULT_VERSION_HOSTNAME'"", ':', ""'localhost:8080'"", ',', ""'GATEWAY_INTERFACE'"", ':', ""'CGI/1.1'"", ',', ""'HTTP_ACCEPT'"", ':', ""'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'"", ',', ""'HTTP_ACCEPT_LANGUAGE'"", ':', ""'en-us'"", ',', '...},', 'infile', '=', ',', 'outfile', '=', ""/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/ext/go/__init__.py in execute_go_cgi(root_path='/Users/dereketnyre/myapp', config=, handler_path='_go_app', cgi_path='/Users/dereketnyre/myapp/_go_app', env={'APPENGINE_RUNTIME': 'go', 'APPLICATION_ID': 'dev~helloworld', 'AUTH_DOMAIN': 'gmail.com', 'CONTENT_LENGTH': '', 'CONTENT_TYPE': 'application/x-www-form-urlencoded', 'CURRENT_VERSION_ID': '1.1', 'DEFAULT_VERSION_HOSTNAME': 'localhost:8080', 'GATEWAY_INTERFACE': 'CGI/1.1', 'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',"", ""'HTTP_ACCEPT_LANGUAGE'"", ':', ""'en-us'"", ',', '...},', 'infile', '=,', 'outfile', '=)', '519', 'RAPI_HANDLER', '=', 'handler.ApiCallHandler()', '520', 'GO_APP', '=', 'GoApp', '(', 'root_path', ')', '=>', '521', 'GO_APP.make_and_run(env)', '522', '523', 'global', 'GO_APP', '=', 'None', ',', 'GO_APP', '.', 'make_and_run', 'undefined', ',', 'env', '=', '{', ""'APPENGINE_RUNTIME'"", ':', ""'go'"", ',', ""'APPLICATION_ID'"", ':', ""'dev~helloworld'"", ',', ""'AUTH_DOMAIN'"", ':', ""'gmail.com'"", ',', ""'CONTENT_LENGTH'"", ':', ""''"", ',', ""'CONTENT_TYPE'"", ':', ""'application/x-www-form-urlencoded'"", ',', ""'CURRENT_VERSION_ID'"", ':', ""'1.1'"", ',', ""'DEFAULT_VERSION_HOSTNAME'"", ':', ""'localhost:8080'"", ',', ""'GATEWAY_INTERFACE'"", ':', ""'CGI/1.1'"", ',', ""'HTTP_ACCEPT'"", ':', ""'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'"", ',', ""'HTTP_ACCEPT_LANGUAGE'"", ':', ""'en-us'"", ',', '...}', ':', ""'NoneType'"", 'object', 'has', 'no', 'attribute', ""'make_and_run'"", 'args', '=', '(', '""\'NoneType\' object has no attribute \'make_and_run\'""', ',)', 'message', '=', '""\'NoneType\' object has no attribute \'make_and_run\'""']"
1164,13020308," outputs 1000, what format can I specify to output 1,000 instead?

The docs don't seem to mention commas, and I couldn't immediately see anything in the source.
","['Does', ""Go's"", 'fmt.Printf', 'support', 'outputting', 'a', 'number', 'with', 'the', 'thousands', 'comma?', 'fmt.Printf(""%d"", 1000)', 'outputs', '1000,', 'what', 'format', 'can', 'I', 'specify', 'to', 'output', '1,000', 'instead?', 'The', 'docs', ""don't"", 'seem', 'to', 'mention', 'commas,', 'and', 'I', ""couldn't"", 'immediately', 'see', 'anything', 'in', 'the', 'source.']"
1165,13291958,"

Click for Go Playground version

I'm forced to code type assertions for each supported type even though at compile time, we should know the exact type of the mapWithStringKey parameter.
","['I', 'wrote', 'a', 'function', 'that', 'would', 'return', 'a', 'sorted', 'slice', 'of', 'strings', 'from', 'a', 'map[string]Foo.', ""I'm"", 'curious', 'what', 'is', 'the', 'best', 'way', 'to', 'create', 'a', 'generic', 'routine', 'that', 'can', 'return', 'a', 'sorted', 'slice', 'of', 'strings', 'from', 'any', 'type', 'that', 'is', 'a', 'map', 'with', 'strings', 'as', 'keys.', 'Is', 'there', 'a', 'way', 'to', 'do', 'it', 'using', 'an', 'interface', 'specification?', 'For', 'example,', 'is', 'there', 'any', 'way', 'to', 'do', 'something', 'like:', 'type', 'MapWithStringKey', 'interface', '{', '}', 'To', 'implement', 'the', 'interface', 'above,', 'a', 'type', 'would', 'need', 'strings', 'as', 'keys.', 'I', 'could', 'then', 'write', 'a', 'generic', 'function', 'that', 'returns', 'a', 'sorted', 'list', 'of', 'keys', 'for', 'fulfilling', 'types.', 'This', 'is', 'my', 'current', 'best', 'solution', 'using', 'the', 'reflect', 'module:', 'func', 'SortedKeys', '(', 'map', 'WithStringKey', 'interface', '{})', '[]', 'string', '{', 'keys', ':=', '[]', 'string', '{}', 'typ', ':=', 'reflect.TypeOf(mapWithStringKey)', 'if', 'typ.Kind() == reflect.Map && typ.Key().Kind()', '==', 'reflect', '.', 'String', '{', 'switch', 'typ.Elem().Kind()', '{', 'case', 'reflect', '.', 'Int', ':', 'for', 'key', ',', '_', ':=', 'range', 'map', 'WithStringKey', '.(', 'map', '[', 'string', ']', 'int', ')', '{', 'keys', '=', 'append', '(', 'keys', ',', 'key', ')', '}', 'case', 'reflect', '.', 'String', ':', 'for', 'key', ',', '_', ':=', 'range', 'map', 'WithStringKey', '.(', 'map', '[', 'string', ']', 'string', ')', '{', 'keys', '=', 'append', '(', 'keys', ',', 'key', ')', '}', '//', '...', 'add', 'more', 'cases', 'as', 'needed', 'default', ':', 'log.Fatalf(""Error: SortedKeys() does not handle %s\\n"", typ)', '}', 'sort.Strings(keys)', '}', 'else', '{', 'log.Fatalln(""Error: parameter to SortedKeys() not map[string]..."")', '}', 'return', 'keys', '}', 'Click', 'for', 'Go', 'Playground', 'version', ""I'm"", 'forced', 'to', 'code', 'type', 'assertions', 'for', 'each', 'supported', 'type', 'even', 'though', 'at', 'compile', 'time,', 'we', 'should', 'know', 'the', 'exact', 'type', 'of', 'the', 'mapWithStringKey', 'parameter.']"
1166,13330274,"

?U makes greedy quantifiers(+ and *) non-greedy, and non-greedy quantifiers (*?) greedy. Details in the Go regex documentation.

But it doesn't work because parenthesis are not matched correctly.
","[""I'm"", 'looking', 'for', 'a', 'regex', 'to', 'find', 'named', 'capturing', 'groups', 'in', '(other)', 'regex', 'strings.', 'Example:', 'I', 'want', 'to', 'find', '(?Pm((a|b).+)n),', '(?P.+)', 'and', '(?P(5|6)\\.', '.+)', 'in', 'the', 'following', 'regex:', '/(', 'Pm', '((', 'a', '|', 'b', ').+)', 'n', ')/(', 'P', '.+)/(', 'P', '(', '5', '|', '6', ')', '.', '.+)', 'I', 'tried', 'the', 'following', 'regex', 'to', 'find', 'the', 'named', 'capturing', 'groups:', 'var', 'subGroups', 'string', '=', '(', '(.+', '))*', 'var', 'prefixedSubGroups', 'string', '=', '.+', '+', 'subGroups', 'var', 'postfixedSubGroups', 'string', '=', 'subGroups', '+', '.+', 'var', 'surroundedSubGroups', 'string', '=', '.+', '+', 'subGroups', '+', '.+', 'var', 'capturingGroupNameRegex', '*', 'regexp', '.', 'RichRegexp', '=', 'regexp', '.', 'MustCompile', '(', '(', 'U', ')', '+', '(', 'P', '+', '(', '+', 'prefixedSubGroups', '+', '|', '+', 'postfixedSubGroups', '+', '|', '+', 'surroundedSubGroups', '+', ')', '+', ')', ')', '?U', 'makes', 'greedy', 'quantifiers(+', 'and', '*)', 'non-greedy,', 'and', 'non-greedy', 'quantifiers', '(*?)', 'greedy.', 'Details', 'in', 'the', 'Go', 'regex', 'documentation.', 'But', 'it', ""doesn't"", 'work', 'because', 'parenthesis', 'are', 'not', 'matched', 'correctly.']"
1167,13508332,"

And yes, I use gccgo 4.7.2

I've got no experience woking with gcc, so I search for some help here.
","['First', 'of', 'all,', 'all', 'these', 'code', 'can', 'be', 'built', 'successfully', 'using', 'go', 'tool(e.g.', 'go', 'build,', 'go', 'install)', 'For', 'say', 'I', 'got', 'an', 'a.go', 'which', 'tries', 'to', 'import', 'a', 'non-standard-library', 'pkg', 'from', 'github:', 'package', 'a', 'import', '(', '""fmt""', '""github.com/usr/pkg""', ')', 'func', 'init', '()', '{', 'fmt.Println(""Import pkg"", pkg.somevar)', '}', 'when', 'I', 'try', 'to', 'compile', 'it', 'with', 'gccgo:', '$', 'gccgo', '-', 'c', 'a', '.', 'go', 'a', '.', 'go', ':', '5', ':', '20', ':', 'error', ':', 'import', 'file', 'github', '.', 'com/usr/pkg’', 'not', 'found', '...', 'And', 'then', 'I', 'read', 'the', 'Setting', 'up', 'and', 'using', 'gccgo', ',', 'it', 'says', 'When', 'you', 'import', 'the', 'package', 'FILE', 'with', 'gccgo,', 'it', 'will', 'look', 'for', 'the', 'import', 'data', 'in', 'the', 'following', 'files,', 'and', 'use', 'the', 'first', 'one', 'that', 'it', 'finds.', 'FILE.gox', 'FILE.o', 'libFILE.so', 'libFILE.a', 'The', 'gccgo', 'compiler', 'will', 'look', 'in', 'the', 'current', 'directory', 'for', 'import', 'files', 'So', 'I', 'cp', 'the', '$GOPATH/pkg/github.com/usr/pkg.a', 'to', 'the', 'current', 'directory', 'and', 'rename', 'it', 'as', 'libpkg.a.', 'It', 'seems', 'failed', 'again:', '$', 'gccgo', '-', 'c', 'a', '.', 'go', 'a', '.', 'go', ':', '9', ':', '4', ':', 'error', ':', 'libpkg', '.', 'a', ':', 'malformed', 'archive', 'header', 'name', 'at', '8', 'a', '.', 'go', ':', '9', ':', '4', ':', 'error', ':', 'libpkg', '.', 'a', 'exists', 'but', 'does', 'not', 'contain', 'any', 'Go', 'export', 'data', 'And', 'yes,', 'I', 'use', 'gccgo', '4.7.2', ""I've"", 'got', 'no', 'experience', 'woking', 'with', 'gcc,', 'so', 'I', 'search', 'for', 'some', 'help', 'here.']"
1168,13514184,"I have lots of small files, I don't want to read them line by line.

Is there a function in Golang to let me read a whole file into a string variable?
","['I', 'have', 'lots', 'of', 'small', 'files,', 'I', ""don't"", 'want', 'to', 'read', 'them', 'line', 'by', 'line.', 'Is', 'there', 'a', 'function', 'in', 'Golang', 'to', 'let', 'me', 'read', 'a', 'whole', 'file', 'into', 'a', 'string', 'variable?']"
1169,13814868,"
","['Before', 'I', 'added', 'the', 'feature', 'to', 'accept', 'a', 'input', 'address', 'all', 'works', 'fine.', 'After', 'splitting', 'of', 'the', 'IP-Addresse', 'into', '3', 'segements', 'and', 'surrender', 'it', 'to', 'the', 'getHostName', 'function,', 'the', 'programm', 'skipps', '""all/inclusive', 'of', 'the', 'function""', 'after', 'the', 'call', 'of', 'the', 'function', 'net.LookupAddr(ip).', 'package', 'main', 'import', '(', '""fmt""', '""net""', '""strconv""', '""strings""', ')', 'func', 'getHostName', '(', 'h', 'chan', 'string', ',', 'ipAdresse', 'string', ',', 'n', 'int', ')', '{', 'ip', ':=', 'ipAdresse', '+', 'strconv.Itoa(n)', 'addr', ',', 'ok', ':=', 'net.LookupAddr(ip)', 'fmt.Println(ok)', 'if', 'ok', '==', 'nil', '{', 'h', '<-', 'ip', '+', '"" - ""', '+', 'addr', '[', '0', ']', '}', 'else', '{', 'fmt.Println(ok)', '}', '}', 'func', 'printer', '(', 'n', 'chan', 'string', ')', '{', 'msg', ':=', '<-', 'n', 'fmt.Println(msg)', '}', 'func', 'main', '()', '{', 'fmt.Println(""Please enter your local IP-Adresse e.g 192.168.1.1"")', 'var', 'ipAdresse_user', 'string', 'fmt.Scanln(&ipAdresse_user)', 'ipsegment', ':=', 'strings.SplitAfter(ipAdresse_user, ""."")', 'ipadresse_3', ':=', 'ipsegment', '[', '0', ']', '+', 'ipsegment', '[', '1', ']', '+', 'ipsegment', '[', '2', ']', 'host', ':=', 'make', '(', 'chan', 'string', ')', 'for', 'i', ':=', '0', ';', 'i', '<', '55', ';', 'i', '++', '{', 'go', 'getHostName', '(', 'host', ',', 'ipadresse_3', ',', 'i', ')', 'go', 'printer', '(', 'host', ')', '}', 'fmt.Println(""Finish - Network Scan"")', '}']"
1170,13846522,"
","['When', 'using', 'Scanf', 'twice', 'the', 'first', 'time', 'it', 'gets', 'the', 'useres', 'input', 'but', 'the', 'second', 'time', 'it', 'does', 'not', 'and', 'returns', 'out', 'of', 'the', 'function.', 'This', 'is', 'only', 'a', 'problem', 'when', 'running', 'on', 'Windows.', 'When', 'I', 'run', 'it', 'on', 'my', 'Mac', 'it', 'works', 'as', 'expected', 'first', 'asking', 'the', 'uers', 'for', 'their', 'username', 'then', 'their', 'password.', 'Below', 'is', 'the', 'code', 'in', 'questions.', 'I', 'am', 'not', 'sure', 'why', 'it', 'works', 'fine', 'on', 'Mac', 'but', 'not', 'on', 'Windows.', 'Any', 'help', 'in', 'advance', 'is', 'appreciated.', 'Thank', 'you.', 'func', 'credentials', '()', '(', 'string', ',', 'string', ')', '{', 'var', 'username', 'string', 'var', 'password', 'string', 'fmt.Print(""Enter Username: "")', 'fmt.Scanf(""%s"", &username)', 'fmt.Print(""Enter Password: "")', 'fmt.Scanf(""%s"", &password)', 'return', 'username', ',', 'password', '}']"
1171,13870845,"Has anyone got an idea if there is any inbuilt functionality in Go for converting from any one of the numeric types to its binary number form.

For example, if 123 was the input, the string ""1111011"" would be the output.
",[]
1172,14061633,"

Why do I need a  in my type declaration for a channel? I thought that  was for writing to or reading from a channel. Why would it appear in a type?
","['This', 'works.', 'var', 'tick', '<-', 'chan', 'time', '.', 'Time', '=', 'time.Tick(1e8)', 'However,', 'this', 'does', 'not.', 'var', 'tick', 'chan', 'time', '.', 'Time', '=', 'time.Tick(1e8)', 'Why', 'do', 'I', 'need', 'a', 'in', 'my', 'type', 'declaration', 'for', 'a', 'channel?', 'I', 'thought', 'that', 'was', 'for', 'writing', 'to', 'or', 'reading', 'from', 'a', 'channel.', 'Why', 'would', 'it', 'appear', 'in', 'a', 'type?']"
1173,14150985,"

How to fix it?

EDIT: here is my code: http://play.golang.org/p/8k4s8dv2PE

You can see Go surrounds string with quotes and removes comment - there is pre or post processing.
","['I', 'want', 'to', 'put', 'in', 'my', 'html', 'template', '(actually', 'JavaScript', 'part)', 'null', 'or', 'string', 'with', 'email:', 'var', 'email', '=', 'null', ';', '//', 'or', 'a', 'string:', 'var', 'email', '=', '""somebody@somewhere.com""', ';', 'But', 'with', 'template', 'var', 'email', '=', '{{.', 'Email', '}};', 'I', 'get', 'quoted', 'string', 'everytime:', 'var', 'email', '=', '""null""', ';', 'var', 'email', '=', '""somebody@somewhere.com""', ';', 'How', 'to', 'fix', 'it?', 'EDIT:', 'here', 'is', 'my', 'code:', 'http://play.golang.org/p/8k4s8dv2PE', 'You', 'can', 'see', 'Go', 'surrounds', 'string', 'with', 'quotes', 'and', 'removes', 'comment', '-', 'there', 'is', 'pre', 'or', 'post', 'processing.']"
1174,14151976,"

For completeness, I've also tried using the NewKey() with an ID value of zero, but that was giving the same result.  The API documentation about NewKey says something about the (string) name and ID both being zero creating an incomplete key -- I'm not sure how to make a string zero, but nil doesn't work.

Somebody help me figure out what is probably amazingly obvious once pointed to the correct section of the document.
","[""I'm"", 'trying', 'to', 'persist', 'entities,', 'and', 'allow', 'the', 'database', 'to', 'generate', 'a', 'key.', 'Unfortunately,', 'I', ""can't"", 'seem', 'to', 'tease', 'a', 'synthetic', 'ID', 'out', 'of', 'the', 'API...', ""Here's"", 'what', ""I'm"", 'doing:', 'case', '""POST""', ':', 'd', ',', '_', ':=', 'ioutil.ReadAll( r.Body)', 'participant', ':=', 'new', '(', 'Participant', ')', 'err', ':=', 'json.Unmarshal( d, &participant)', 'if', 'err', '!=', 'nil', '{', 'serveError', '(', 'c', ',', 'w', ',', 'err', ')', 'return', '}', 'var', 'key', '*', 'datastore', '.', 'Key', ';', 'if', 'participant', '.', 'ID', '==', '0', '{', '//', 'no', 'id', 'yet', '..', 'create', 'an', 'incomplete', 'key', 'and', 'allow', 'the', 'db', 'to', 'create', 'one.', 'key', '=', 'datastore.NewIncompleteKey( c, ""participant"", parentKey)', '}', 'else', '{', '//', 'we', 'have', 'an', 'id.', 'use', 'that', 'to', 'update', 'key', '=', 'datastore.NewKey( c, ""participant"", """", participant.ID, parentKey)', '}', '//', 'PERSIST!', 'putKey', ',', 'e', ':=', 'datastore.Put( c, key, participant)', 'if', 'e', '!=', 'nil', '{', 'serveError', '(', 'c', ',', 'w', ',', 'e', ')', 'return', '}', '//', 'Fetch', 'back', 'out', 'of', 'the', 'database,', 'presumably', 'with', 'my', 'new', 'ID', 'if', 'e', '=', 'datastore.Get( c, putKey, participant)', ';', 'e', '!=', 'nil', '{', 'serveError', '(', 'c', ',', 'w', ',', 'e', ')', 'return', '}', '//', 'send', 'to', 'the', 'consumer', 'json', ',', '_', ':=', 'json.Marshal( participant)', 'w.Write( json)', 'Well,', 'oddly', 'enough', 'the', 'ID', 'is', 'always', 'zero!', 'The', 'details', 'are', 'persisted,', 'but', 'I', 'get', 'multiple', 'values', 'persisted', 'with', 'the', 'same', 'ID', 'field.', 'For', 'grins,', ""here's"", 'the', 'object', 'definition:', 'type', 'Participant', 'struct', '{', 'ID', 'int64', 'LastName', 'string', 'FirstName', 'string', 'Birthdate', 'string', 'Email', 'string', 'Cell', 'string', '}', 'Following', 'up', 'with', 'a', 'GET', 'operation,', 'I', 'am', 'presented', 'a', 'list', 'of', 'entities', '(yes,', 'the', 'entities', 'I', 'created,', 'as', 'many', 'times', 'as', 'I', 'created', 'them)', 'all', 'with', 'the', 'ID', 'of', 'zero.', '[', '{', '""ID""', ':', '0', ',', '""LastName""', ':', '""Schmuck""', ',', '""FirstName""', ':', '""Joe""', ',', '""Birthdate""', ':', '""12-12-12""', ',', '""Email""', ':', '""""', ',', '""Cell""', ':', '""""', '},', '{', '""ID""', ':', '0', ',', '""LastName""', ':', '""Schmuck""', ',', '""FirstName""', ':', '""Jane""', ',', '""Birthdate""', ':', '""12-12-12""', ',', '""Email""', ':', '""""', ',', '""Cell""', ':', '""""', '},', '{', '""ID""', ':', '0', ',', '""LastName""', ':', '""Schmuck""', ',', '""FirstName""', ':', '""Jane""', ',', '""Birthdate""', ':', '""12-12-12""', ',', '""Email""', ':', '""""', ',', '""Cell""', ':', '""""', '},', '{', '""ID""', ':', '0', ',', '""LastName""', ':', '""Schmuck""', ',', '""FirstName""', ':', '""Jane""', ',', '""Birthdate""', ':', '""12-12-12""', ',', '""Email""', ':', '""""', ',', '""Cell""', ':', '""""', '},', '{', '""ID""', ':', '0', ',', '""LastName""', ':', '""Schmuck""', ',', '""FirstName""', ':', '""Jane""', ',', '""Birthdate""', ':', '""12-12-12""', ',', '""Email""', ':', '""""', ',', '""Cell""', ':', '""""', '},', '{', '""ID""', ':', '0', ',', '""LastName""', ':', '""Schmuck""', ',', '""FirstName""', ':', '""Jane""', ',', '""Birthdate""', ':', '""12-12-12""', ',', '""Email""', ':', '""""', ',', '""Cell""', ':', '""""', '}', ']', 'For', 'completeness,', ""I've"", 'also', 'tried', 'using', 'the', 'NewKey()', 'with', 'an', 'ID', 'value', 'of', 'zero,', 'but', 'that', 'was', 'giving', 'the', 'same', 'result.', 'The', 'API', 'documentation', 'about', 'NewKey', 'says', 'something', 'about', 'the', '(string)', 'name', 'and', 'ID', 'both', 'being', 'zero', 'creating', 'an', 'incomplete', 'key', '--', ""I'm"", 'not', 'sure', 'how', 'to', 'make', 'a', 'string', 'zero,', 'but', 'nil', ""doesn't"", 'work.', 'Somebody', 'help', 'me', 'figure', 'out', 'what', 'is', 'probably', 'amazingly', 'obvious', 'once', 'pointed', 'to', 'the', 'correct', 'section', 'of', 'the', 'document.']"
1175,14234224,"

Thank you for any input
p.s
Arch linux (X86, 64)

upd
The problem was when thrift cloned from GIT, use https://dist.apache.org/repos/dist/release/thrift/0.9.0/thrift-0.9.0.tar.gz version instead
","[""I'm"", 'new', 'in', 'GO.', 'I', 'have', 'decide', 'to', 'use', 'implementation', 'of', 'Thrift', 'for', 'Go.', 'After', 'reading', 'manual', 'installation', 'instruction', 'steps', 'I', 'have', 'downloaded', 'last', 'Thrift', '0.9.0', 'from', 'git', 'and', 'start', 'building', 'process:', 'My', 'build', 'script', 'is', 'follow:', '!/', 'bin/bash', 'export', 'THRIFT', '=$(', 'pwd', ')/', 'thrift', 'export', 'THRIFT4GO', '=$(', 'pwd', ')/', 'thrift4go', 'export', 'GOROOT', '=/', 'usr', 'bash', '$', 'THRIFT4GO/scripts/merge_and_build.sh', '-', 'b', 'cd', '$', 'THRIFT', './', 'cleanup', '.', 'sh', './', 'bootstrap', '.', 'sh', './', 'configure', '--', 'with', '-', 'go', '--', 'without', '-', 'python', '--', 'without', '-', 'csharp', 'make', 'if', '""$?""', '==', '""1""', ';', 'then', 'ln', '-', 's', '$', 'THRIFT/lib/go/src/thrift $GOPATH/src/thrift', 'go', 'install', 'thrift', 'fi', 'But', 'make', ""doesn't"", 'work', 'well', 'for', 'GO,', 'whereis', 'the', 'problem', '?', 'I', 'have', 'correct', 'installed', 'GO', 'with', 'exported', 'GOPATH', 'variable', 'in', 'bash,', '""go', 'install""', 'worked', 'for', 'other', 'projects.', 'I', ""can't"", 'understand', 'why', 'GO', ""can't"", 'find', 'package.', 'Making', 'all', 'in', 'go', 'make', '[', '3', ']:', 'Entering', 'directory', ""/home/user/projects/delkon/thrift/lib/go'"", 'make', 'check', '-', 'local', 'make', '[', '4', ']:', 'Entering', 'directory', ""/home/user/projects/delkon/thrift/lib/go'"", 'go', 'build', '-', 'v', '-', 'x', 'thrift', 'WORK', '=/', 'tmp/go-build548238117', 'src/thrift/tiostream_transport.go:23:2:', 'import', '""bufio""', ':', 'cannot', 'find', 'package', 'src/thrift/tframed_transport.go:23:2:', 'import', '""bytes""', ':', 'cannot', 'find', 'package', 'src/thrift/tmap.go:24:2: import ""container/list"":', 'cannot', 'find', 'package', 'src/thrift/tjson_protocol.go:23:2: import ""encoding/base64"":', 'cannot', 'find', 'package', 'src/thrift/tbinary_protocol.go:23:2: import ""encoding/binary"":', 'cannot', 'find', 'package', 'src/thrift/tsimple_json_protocol.go:26:2: import ""encoding/json"":', 'cannot', 'find', 'package', 'src/thrift/tapplication_exception.go:23:2:', 'import', '""errors""', ':', 'cannot', 'find', 'package', 'src/thrift/tcompact_protocol.go:24:2:', 'import', '""fmt""', ':', 'cannot', 'find', 'package', 'src/thrift/tbinary_protocol.go:24:2:', 'import', '""io""', ':', 'cannot', 'find', 'package', 'src/thrift/ttransport.go:23:2:', 'import', '""log""', ':', 'cannot', 'find', 'package', 'src/thrift/tbinary_protocol.go:25:2:', 'import', '""math""', ':', 'cannot', 'find', 'package', 'src/thrift/tnonblocking_server_socket.go:23:2:', 'import', '""net""', ':', 'cannot', 'find', 'package', 'src/thrift/thttp_client.go:24:2: import ""net/http"":', 'cannot', 'find', 'package', 'src/thrift/thttp_client.go:25:2: import ""net/url"":', 'cannot', 'find', 'package', 'src/thrift/ttransport.go:24:2:', 'import', '""os""', ':', 'cannot', 'find', 'package', 'src/thrift/tmap.go:25:2:', 'import', '""reflect""', ':', 'cannot', 'find', 'package', 'package', 'thrift', 'import', 's', 'runtime', ':', 'import', '""runtime""', ':', 'cannot', 'find', 'package', 'src/thrift/tfield.go:23:2:', 'import', '""sort""', ':', 'cannot', 'find', 'package', 'src/thrift/thttp_client.go:26:2:', 'import', '""strconv""', ':', 'cannot', 'find', 'package', 'src/thrift/tbinary_protocol.go:26:2:', 'import', '""strings""', ':', 'cannot', 'find', 'package', 'src/thrift/tnonblocking_socket.go:24:2:', 'import', '""time""', ':', 'cannot', 'find', 'package', 'make', '[', '4', ']:', '***', '[', 'check', '-', 'local', ']', 'Error', '1', 'make', '[', '4', ']:', 'Leaving', 'directory', ""/home/user/projects/delkon/thrift/lib/go'"", 'make', '[', '3', ']:', '***', '[', 'check', '-', 'am', ']', 'Error', '2', 'make', '[', '3', ']:', 'Leaving', 'directory', ""/home/user/projects/delkon/thrift/lib/go'"", 'make', '[', '2', ']:', '***', '[', 'all', '-', 'recursive', ']', 'Error', '1', 'make', '[', '2', ']:', 'Leaving', 'directory', ""/home/user/projects/delkon/thrift/lib'"", 'make', '[', '1', ']:', '***', '[', 'all', '-', 'recursive', ']', 'Error', '1', 'make', '[', '1', ']:', 'Leaving', 'directory', ""/home/user/projects/delkon/thrift'"", 'make', ':', '***', '[', 'all', ']', 'Error', '2', 'Thank', 'you', 'for', 'any', 'input', 'p.s', 'Arch', 'linux', '(X86,', '64)', 'upd', 'The', 'problem', 'was', 'when', 'thrift', 'cloned', 'from', 'GIT,', 'use', 'https://dist.apache.org/repos/dist/release/thrift/0.9.0/thrift-0.9.0.tar.gz', 'version', 'instead']"
1176,14236263,"

Or is it better to let the type contain the dna strand? Are there any rules of thumb for when to use either of the two approaches?
","[""I'm"", 'currently', 'learning', 'Go', 'by', 'doing', 'the', 'rosalind', 'problems', '(basically', 'a', 'bunch', 'of', 'bioinformatics', 'related', 'code', 'katas).', ""I'm"", 'currently', 'representing', 'a', 'DNA', 'strand', 'with', 'a', 'type:', 'type', 'DNAStrand', 'struct', '{', 'dna', 'byte', '[]', '}', 'My', 'initial', 'reason', 'was', 'to', 'encapsulate', 'the', 'byte', 'slice', 'so', 'I', 'would', 'know', 'it', 'only', 'contained', 'bytes', 'representing', 'the', 'nucleotides:', ""'A',"", ""'C',"", ""'G',"", ""'T'."", 'I', 'realized', 'that', 'this', 'was', 'obviously', 'not', 'guarateed', 'since', 'I', 'could', 'simply', 'do:', 'DNAStrand', '{[]', 'byte', '(', '""foo bar""', ')}', 'And', 'there', 'is', 'no', 'longer', 'any', 'guarantee', 'that', 'my', 'dna', 'strand', 'contains', 'a', 'byte', 'array', 'with', 'only', 'elements', 'from', 'those', 'four', 'bytes.', 'Since', 'my', 'struct', 'only', 'contains', 'a', 'byte', 'array', 'is', 'it', 'better/more', 'ideomatic', 'to', 'do:', 'type', 'DNAStrand', '[]', 'byte', 'Or', 'is', 'it', 'better', 'to', 'let', 'the', 'type', 'contain', 'the', 'dna', 'strand?', 'Are', 'there', 'any', 'rules', 'of', 'thumb', 'for', 'when', 'to', 'use', 'either', 'of', 'the', 'two', 'approaches?']"
1177,14249217,"When I run ""go test"", I want to use a different configuration file. How do I know within my code if I'm running within a test context or a normal context? Is there some sort of environment variable to check?
","['When', 'I', 'run', '""go', 'test"",', 'I', 'want', 'to', 'use', 'a', 'different', 'configuration', 'file.', 'How', 'do', 'I', 'know', 'within', 'my', 'code', 'if', ""I'm"", 'running', 'within', 'a', 'test', 'context', 'or', 'a', 'normal', 'context?', 'Is', 'there', 'some', 'sort', 'of', 'environment', 'variable', 'to', 'check?']"
1178,14322674,"I have created a logout url with the users api: https://developers.google.com/appengine/docs/go/users/overview

But I only want it to disconnect them from my app, not log them out of their other Google services (Gmail etc). Is that possible?
","['I', 'have', 'created', 'a', 'logout', 'url', 'with', 'the', 'users', 'api:', 'https://developers.google.com/appengine/docs/go/users/overview', 'But', 'I', 'only', 'want', 'it', 'to', 'disconnect', 'them', 'from', 'my', 'app,', 'not', 'log', 'them', 'out', 'of', 'their', 'other', 'Google', 'services', '(Gmail', 'etc).', 'Is', 'that', 'possible?']"
1179,14322724,"I do not know much about the Go programming language, but I have seen several claims that said Go has latency-free garbage collection, and it is much better than other garbage collectors (like JVM garbage collector). I have developed application for JVM and i know that JVM garbage collector is not latency-free (specially in large memory usage). 

I was wondering, what is difference between the garbage collection approach in Go and and the others which make it latency-free?

Thanks in advance.



Edit:
@All I edited this question entirely, please vote to reopen this question if you find it constructive.
","['I', 'do', 'not', 'know', 'much', 'about', 'the', 'Go', 'programming', 'language,', 'but', 'I', 'have', 'seen', 'several', 'claims', 'that', 'said', 'Go', 'has', 'latency-free', 'garbage', 'collection,', 'and', 'it', 'is', 'much', 'better', 'than', 'other', 'garbage', 'collectors', '(like', 'JVM', 'garbage', 'collector).', 'I', 'have', 'developed', 'application', 'for', 'JVM', 'and', 'i', 'know', 'that', 'JVM', 'garbage', 'collector', 'is', 'not', 'latency-free', '(specially', 'in', 'large', 'memory', 'usage).', 'I', 'was', 'wondering,', 'what', 'is', 'difference', 'between', 'the', 'garbage', 'collection', 'approach', 'in', 'Go', 'and', 'and', 'the', 'others', 'which', 'make', 'it', 'latency-free?', 'Thanks', 'in', 'advance.', 'Edit:', '@All', 'I', 'edited', 'this', 'question', 'entirely,', 'please', 'vote', 'to', 'reopen', 'this', 'question', 'if', 'you', 'find', 'it', 'constructive.']"
1180,14427830,"

I would like t to contain the value of s.
","['This', 'is', 'maybe', 'a', 'stupid', 'question', 'to', 'ask', 'but', 'I', ""can't"", 'seem', 'to', 'find', 'how', 'to', 'convert', 'date', 'in', 'string', 'format', 'to', 'date', 'time', 'format.', 'Many', 'thanks!', 's', ':=', '""12-25-2012""', 'var', 't', 'time', '.', 'Time', 't', '=', 's.Time()', 'I', 'would', 'like', 't', 'to', 'contain', 'the', 'value', 'of', 's.']"
1181,14440369," confirms. How can this happen? Where should the disjsets.go file live if Go is to find it?

(Google Go 1.0.2)
","[""I'm"", 'trying', 'to', 'compile', 'a', 'Go', 'program', 'made', 'up', 'of', 'multiple', 'modules,', 'like', 'so:', '//', 'main.go', 'package', 'main', 'import', '""mst""', '//', 'do', 'something', 'interesting', 'involving', 'minimum', 'spanning', 'trees', '//', 'src/mst/kruskal.go', 'import', '""disjsets""', '//', ""Kruskal's"", 'algorithm', 'follows', '//', 'src/disjsets/disjsets.go', '//', 'implements', 'disjoint', 'sets', 'with', 'union-find', 'Now,', 'when', 'I', 'run', 'either', 'go', 'run', 'main.go', 'or', 'go', 'build', 'after', 'export', 'GOPATH=.', 'in', 'the', 'directory', 'containing', 'both', 'main.go', 'and', 'src,', 'it', 'prints', 'disjsets', 'open', 'src/disjsets/disjsets.go:', 'No', 'such', 'file', 'or', 'directory', 'I', ""don't"", 'get', 'this.', 'The', 'file', 'is', 'there', 'as', 'ls', '-', 'l', 'src/disjsets/disjsets.go', 'confirms.', 'How', 'can', 'this', 'happen?', 'Where', 'should', 'the', 'disjsets.go', 'file', 'live', 'if', 'Go', 'is', 'to', 'find', 'it?', '(Google', 'Go', '1.0.2)']"
1182,14477941,"
","['I', 'want', 'to', 'write', 'a', 'Go', 'program', 'to', 'dump', 'rows', 'from', 'from', 'a', 'database', 'table', 'into', 'a', 'csv', 'file', 'using', 'SELECT', '*.', 'Go', 'provides', 'the', 'excellent', 'sql', 'and', 'csv', 'apis,', 'but', 'csv', 'expects', 'arrays', 'of', 'strings', 'and', 'the', 'Scan', 'method', 'in', 'Rows', '""fills""', 'fields', 'according', 'to', 'their', 'types.', 'As', 'I', ""don't"", 'know', 'the', 'table', 'before,', 'I', 'have', 'no', 'idea', 'how', 'many', 'columns', 'there', 'are', 'and', 'what', 'their', 'types', 'are.', ""It's"", 'my', 'first', 'program', 'in', 'Go,', 'so', ""I'm"", 'struggling', 'a', 'little.', 'How', 'do', 'I', 'best', 'read', 'the', 'columns', 'from', 'a', 'Rows', 'instance', 'into', 'a', '[]string', '-', 'and', 'is', 'that', 'the', '""right""', 'way?', 'Thanks!', 'UPDATE', ""I'm"", 'still', 'struggling', 'with', 'the', 'parameters.', 'This', 'is', 'my', 'code,', 'for', 'now', ""I'm"", 'using', 'panic', 'instead', 'of', 'returning', 'an', 'error,', 'but', ""I'm"", 'going', 'to', 'change', 'that', 'later.', 'In', 'my', 'test,', ""I'm"", 'passing', 'the', 'query', 'result', 'and', 'os.Stdout.', 'func', 'dumpTable', '(', 'rows', '*', 'sql', '.', 'Rows', ',', 'out', 'io', '.', 'Writer', ')', 'error', '{', 'colNames', ',', 'err', ':=', 'rows.Columns()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'if', 'rows.Next()', '{', 'writer', ':=', 'csv.NewWriter(out)', 'writer', '.', 'Comma', '=', ""'\\t'"", 'cols', ':=', 'make', '([]', 'string', ',', 'len', '(', 'colNames', '))', 'processRow', ':=', 'func', '()', '{', 'err', ':=', 'rows.Scan(cols...)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'writer.Write(cols)', '}', 'processRow', '()', 'for', 'rows.Next()', '{', 'processRow', '()', '}', 'writer.Flush()', '}', 'return', 'nil', '}', 'For', 'this,', 'I', 'get', 'cannot', 'use', 'cols', '(', 'type', '[]', 'string', ')', 'as', 'type', '[]', 'interface', '{}', 'in', 'func', 'tion', 'argument', '(at', 'the', 'writer.Write(cols)', 'line.', 'I', 'then', 'tested', 'readCols', ':=', 'make', '([]', 'interface', '{},', 'len', '(', 'colNames', '))', 'writeCols', ':=', 'make', '([]', 'string', ',', 'len', '(', 'colNames', '))', 'processRow', ':=', 'func', '()', '{', 'err', ':=', 'rows.Scan(readCols...)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '//', '...', 'CONVERSION?', 'writer.Write(writeCols)', '}', 'which', 'lead', 'to', 'panic', ':', 'sql', ':', 'Scan', 'error', 'on', 'column', 'index', '0', ':', 'destination', 'not', 'a', 'pointer', '.', 'UPDATE', '2', 'I', 'independently', 'arrived', 'at', ""ANisus'"", 'solution.', 'This', 'is', 'the', 'code', ""I'm"", 'using', 'now.', 'func', 'dumpTable', '(', 'rows', '*', 'sql', '.', 'Rows', ',', 'out', 'io', '.', 'Writer', ')', 'error', '{', 'colNames', ',', 'err', ':=', 'rows.Columns()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'writer', ':=', 'csv.NewWriter(out)', 'writer', '.', 'Comma', '=', ""'\\t'"", 'readCols', ':=', 'make', '([]', 'interface', '{},', 'len', '(', 'colNames', '))', 'writeCols', ':=', 'make', '([]', 'string', ',', 'len', '(', 'colNames', '))', 'for', 'i', ',', '_', ':=', 'range', 'writeCols', '{', 'readCols', '[', 'i', ']', '=', '&', 'writeCols', '[', 'i', ']', '}', 'for', 'rows.Next()', '{', 'err', ':=', 'rows.Scan(readCols...)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'writer.Write(writeCols)', '}', 'if', 'err', '=', 'rows.Err()', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'writer.Flush()', 'return', 'nil', '}']"
1183,14776879,"

Is it even doable? Is it possible to do efficiently also?
Any help would be great (python, go).
","['Is', 'it', 'possible', 'to', 'selectively', 'retrieve', 'depending', 'on', 'the', 'existence', 'of', 'keys', 'in', 'a', 'map', 'in', 'mongodb?', 'And', 'if', 'so,', 'how', 'do', 'you', 'go', 'about', 'doing', 'it?', 'Suppose', 'I', 'have', 'a', 'document', 'that', 'looks', 'like', 'this', 'for', 'example..', '{', '""_id""', ':', '1234', ',', '""parentfield1""', ':', '{', '""childfield1""', ':', '{', '...},', '""childfield2""', ':', '{', '...},', '""childfield5""', ':', '{', '...},', '// There might be many childfields.. > 50', '},', '}', 'How', 'would', 'I', 'be', 'able', 'to', 'selectively', 'retrieve', 'from', 'the', 'document', 'a/some', 'particular', 'childfields', 'given', 'multiple', 'options', 'to', 'choose', 'from?', 'Some', 'of', 'which', 'may', 'not', 'exist', 'in', 'the', 'document.', 'i.e.', 'input', '""childfield1""', ',', '""childfield2""', ',', '""childfield3""', '->', 'output', '{', '""_id""', ':', '1234', ',', '""parentfield1""', ':', '{', '""childfield1""', ':', '{', '...', '},', '""childfield2""', ':', '{', '...', '},', '},', '}', 'Is', 'it', 'even', 'doable?', 'Is', 'it', 'possible', 'to', 'do', 'efficiently', 'also?', 'Any', 'help', 'would', 'be', 'great', '(python,', 'go).']"
1184,15073027,"

And that's why I'm looking for something else.

EDIT2:

Since it seems that someone wants my question to be closed, I did not try to use gprof out of the blue: https://groups.google.com/d/msg/golang-nuts/1xESoT5Xcd0/bpMvxQeJguMJ
","[""I'm"", 'sure', 'everyone', 'knowing', 'golang', 'knows', 'that', 'blog', 'post', 'here.', 'Reading', 'it', 'again,', 'I', 'wondered', 'if', 'using', 'gccgo', 'instead', 'of', 'go', 'build', 'would', 'increase', 'the', 'speed', 'a', 'bit', 'more.', 'In', 'my', 'typical', 'use', 'case', '(scientific', 'computations),', 'a', 'gccgo-generated', 'binary', 'is', 'always', 'faster', 'than', 'a', 'go', 'build-generated', 'one.', 'So,', 'just', 'grab', 'this', 'file:', 'havlak6.go', 'and', 'compile', 'it:', 'go', 'build', 'havlak6', '.', 'go', '-', 'O', 'havlak6_go', 'gccgo', '-', 'o', 'havlak6_gccgo', '-', 'march', '=', 'native', '-', 'Ofast', 'havlak6', '.', 'go', 'Surprise', '!', '$/', 'usr/bin/time ./havlak6_go', '5', '.', '45', 'user', '0', '.', '06', 'system', '0', ':', '05', '.', '54', 'elapsed', '99', '%', 'CPU', '$/', 'usr/bin/time ./havlak6_gccgo', '11', '.', '38', 'user', '0', '.', '16', 'system', '0', ':', '11', '.', '74', 'elapsed', '98', '%', 'CPU', ""I'm"", 'curious', 'and', 'want', 'to', 'know', 'why', 'an', '""optimizing""', 'compiler', 'does', 'produce', 'slower', 'code.', 'I', 'tried', 'to', 'use', 'gprof', 'on', 'gccgo', 'generated', 'binary:', 'gccgo', '-', 'pg', '-', 'march', '=', 'native', '-', 'Ofast', 'havlak6', '.', 'go', './', 'a', '.', 'out', 'gprof', 'a', '.', 'out', 'gmon', '.', 'out', 'with', 'no', 'luck:', 'Flat', 'profile', ':', 'Each', 'sample', 'counts', 'as', '0', '.', '01', 'seconds', '.', 'no', 'time', 'accumulated', 'As', 'you', 'can', 'see', 'the', 'code', 'has', 'not', 'been', 'actually', 'profiled.', 'Of', 'course,', 'I', 'read', 'this,', 'but', 'as', 'you', 'can', 'see,', 'the', 'program', 'takes', '10+', 'seconds', 'to', 'execute...', 'The', 'number', 'of', 'samples', 'should', 'be', '>', '1000.', 'I', 'also', 'tried:', 'rm', 'a', '.', 'out', 'gmon', '.', 'out', 'LDFLAGS', '=', ""'-g -pg'"", 'gccgo', '-', 'g', '-', 'pg', '-', 'march', '=', 'native', '-', 'Ofast', 'havlak6', '.', 'go', './', 'a', '.', 'out', 'gprof', 'No', 'success', 'neither.', 'Do', 'you', 'know', ""what's"", 'wrong?', 'Do', 'you', 'have', 'an', 'idea', 'of', 'why', 'gccgo,', 'with', 'all', 'its', 'optimization', 'routines', 'fails', 'to', 'be', 'faster', 'than', 'gc', 'in', 'this', 'case?', 'go', 'version:', '1.0.2', 'gcc', 'version:', '4.7.2', 'EDIT:', 'Oh,', 'I', 'completely', 'forgot', 'to', 'mention...', 'I', 'obviously', 'tried', 'pprof', 'on', 'the', 'gccgo-generated', 'binary...', 'Here', 'is', 'a', 'top10:', 'Welcome', 'to', 'pprof', '!', 'For', 'help', ',', 'type', ""'help'"", '.', '(', 'pprof', ')', 'top10', 'Total', ':', '1143', 'samples', '1143', '100', '.', '0', '%', '100', '.', '0', '%', '1143', '100', '.', '0', '%', '0', 'x00007fbfb04cf1f4', '0', '0', '.', '0', '%', '100', '.', '0', '%', '890', '77', '.', '9', '%', '0', 'x00007fbfaf81101e', '0', '0', '.', '0', '%', '100', '.', '0', '%', '4', '0', '.', '3', '%', '0', 'x00007fbfaf8deb64', '0', '0', '.', '0', '%', '100', '.', '0', '%', '1', '0', '.', '1', '%', '0', 'x00007fbfaf8f2faf', '0', '0', '.', '0', '%', '100', '.', '0', '%', '3', '0', '.', '3', '%', '0', 'x00007fbfaf8f2fc5', '0', '0', '.', '0', '%', '100', '.', '0', '%', '1', '0', '.', '1', '%', '0', 'x00007fbfaf8f2fc9', '0', '0', '.', '0', '%', '100', '.', '0', '%', '1', '0', '.', '1', '%', '0', 'x00007fbfaf8f2fd6', '0', '0', '.', '0', '%', '100', '.', '0', '%', '1', '0', '.', '1', '%', '0', 'x00007fbfaf8f2fdf', '0', '0', '.', '0', '%', '100', '.', '0', '%', '2', '0', '.', '2', '%', '0', 'x00007fbfaf8f4a2f', '0', '0', '.', '0', '%', '100', '.', '0', '%', '1', '0', '.', '1', '%', '0', 'x00007fbfaf8f4a33', 'And', ""that's"", 'why', ""I'm"", 'looking', 'for', 'something', 'else.', 'EDIT2:', 'Since', 'it', 'seems', 'that', 'someone', 'wants', 'my', 'question', 'to', 'be', 'closed,', 'I', 'did', 'not', 'try', 'to', 'use', 'gprof', 'out', 'of', 'the', 'blue:', 'https://groups.google.com/d/msg/golang-nuts/1xESoT5Xcd0/bpMvxQeJguMJ']"
1185,15102643,"

Obviously i misunderstood the concept of buffered channels, would somebody please be kind enough to explain the fault in my logic and how to achieve the expected result?

Thank you
","[""I'm"", 'having', 'a', 'hard', 'time', 'understanding', 'how', 'buffered', 'channels', 'work.', 'Based', 'on', 'the', 'following', 'example,', ""i'm"", 'trying', 'to', 'utilize', '2', 'threads', 'at', 'a', 'time', 'to', 'print', 'out', 'the', 'current', 'time,', 'with', 'approximately', '2', 'second', 'delays', 'between', 'every', '2', 'go', 'calls:', 'package', 'main', 'import', '""fmt""', 'import', '""time""', 'func', 'main', '()', '{', 'return', 'CurrentTime', ':=', 'func', '()', 'string', '{', 'return', 'time.Now().String()', '}', 'c', ':=', 'make', '(', 'chan', 'string', ',', '2', ')', 'asyncReturnCurrentTime', ':=', 'func', '(', 'c', 'chan', 'string', ')', '{', 'time.Sleep(2001 * time.Millisecond)', 'c', '<-', 'return', 'CurrentTime', '()', '}', 'for', 'i', ':=', '1', ';', 'i', '!=', '7', ';', 'i', '++', '{', 'go', 'asyncReturnCurrentTime', '(', 'c', ')', 'if', '(', 'i', '%', '3', '==', '0', ')', '{', 'fmt.Println(<- c)', 'fmt.Println(<- c)', 'fmt.Println(<- c)', 'fmt.Println()', '}', '}', '}', 'This', 'produces', '2013', '-', '02', '-', '27', '03', ':', '17', ':', '50', '2013', '-', '02', '-', '27', '03', ':', '17', ':', '50', '2013', '-', '02', '-', '27', '03', ':', '17', ':', '50', '2013', '-', '02', '-', '27', '03', ':', '17', ':', '52', '2013', '-', '02', '-', '27', '03', ':', '17', ':', '52', '2013', '-', '02', '-', '27', '03', ':', '17', ':', '52', 'What', ""i'm"", 'expecting', 'regarding', 'the', 'seconds', 'is', '2', 'second', 'delays', 'between', 'ever', '2', 'go', 'calls', 'and', 'in', 'this', 'case', 'the', 'following', 'result', '2013', '-', '02', '-', '27', '03', ':', '17', ':', '50', '2013', '-', '02', '-', '27', '03', ':', '17', ':', '50', '2013', '-', '02', '-', '27', '03', ':', '17', ':', '52', '<-', '3', 'rd', 'call', 'with', '2', 'buffer', 'slots', '2013', '-', '02', '-', '27', '03', ':', '17', ':', '54', '2013', '-', '02', '-', '27', '03', ':', '17', ':', '54', '2013', '-', '02', '-', '27', '03', ':', '17', ':', '56', '<-', '3', 'rd', 'call', 'with', '2', 'buffer', 'slots', 'Obviously', 'i', 'misunderstood', 'the', 'concept', 'of', 'buffered', 'channels,', 'would', 'somebody', 'please', 'be', 'kind', 'enough', 'to', 'explain', 'the', 'fault', 'in', 'my', 'logic', 'and', 'how', 'to', 'achieve', 'the', 'expected', 'result?', 'Thank', 'you']"
1186,15295522,"
","['In', 'the', 'docs', 'it', 'is', 'said', 'that', 'If', 'stored', 'on', 'disk,', 'the', ""File's"", 'underlying', 'concrete', 'type', 'will', 'be', 'an', '*os.File.', 'In', 'this', 'case', 'everything', 'is', 'clear.', 'Great.', 'But,', 'what', 'happens', 'if', 'not,', 'if', 'the', 'file', 'is', 'stored', 'in', 'memory?', 'My', 'actual', 'problem', 'is', 'that', 'I´m', 'trying', 'to', 'get', 'the', 'size', 'of', 'the', 'different', 'files', 'stored', 'in', 'memory', 'that', 'I', 'got', 'though', 'an', 'html', 'form', 'but', 'I', 'can', 'not', 'use', 'os.Stat', 'to', 'do', 'fileInfo.Size()', 'because', 'I', 'don´t', 'have', 'the', 'location', 'of', 'the', 'file,', 'just', 'it´s', 'name.', 'fhs', ':=', 'req', '.', 'MultipartForm', '.', 'File', '[', '""files""', ']', 'for', '_', ',', 'fileHeader', ':=', 'range', 'fhs', '{', 'file', ',', '_', ':=', 'fileHeader.Open()', 'log.Println(len(file))', '// Gives an error because is of type multipart.File', 'fileInfo', ',', 'err', ':=', 'os.Stat(fileHeader.Filename)', '// Gives an error because it´s just the name, not the complete path', '//', 'Here', 'I', 'would', 'do', 'things', 'with', 'the', 'file', '}']"
1187,15452004,"
","['I', 'am', 'using', 'Go', '1.0.3', 'on', 'Mac', 'OS', 'X', '10.8.2,', 'and', 'I', 'am', 'experimenting', 'with', 'the', 'json', 'package,', 'trying', 'to', 'marshal', 'a', 'struct', 'to', 'json,', 'but', 'I', 'keep', 'getting', 'an', 'empty', '{}', 'json', 'object.', 'The', 'err', 'value', 'is', 'nil,', 'so', 'nothing', 'is', 'wrong', 'according', 'to', 'the', 'json.Marshal', 'function,', 'and', 'the', 'struct', 'is', 'correct.', 'Why', 'is', 'this', 'happening?', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', ')', 'type', 'Address', 'struct', '{', 'street', 'string', 'extended', 'string', 'city', 'string', 'state', 'string', 'zip', 'string', '}', 'type', 'Name', 'struct', '{', 'first', 'string', 'middle', 'string', 'last', 'string', '}', 'type', 'Person', 'struct', '{', 'name', 'Name', 'age', 'int', 'address', 'Address', 'phone', 'string', '}', 'func', 'main', '()', '{', 'myname', ':=', 'Name', '{', '""Alfred""', ',', '""H""', ',', '""Eigenface""', '}', 'myaddr', ':=', 'Address', '{', '""42 Place Rd""', ',', '""Unit 2i""', ',', '""Placeton""', ',', '""ST""', ',', '""00921""', '}', 'me', ':=', 'Person', '{', 'myname', ',', '24', ',', 'myaddr', ',', '""000 555-0001""', '}', 'b', ',', 'err', ':=', 'json.Marshal(me)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'fmt.Println(string(b))', '// err is nil, but b is empty, why?', 'fmt.Println(""\\n"")', 'fmt.Println(me)', '// me is as expected, full of data', '}']"
1188,15619225,"

And also an array of usernames:

jbill, dkennedy

","['I', 'want', 'to', 'create', 'a', '10', 'GB', 'file', 'that', 'looks', 'like:', 'prefix', ':', 'username', ':', 'timestamp', ',', 'number', 'So', 'an', 'example', 'is', 'like:', 'login', ':', 'jbill', ':', '2013/3/25,', '1', 'I', 'want', 'to', 'create', 'a', '10GB', 'file,', 'by', 'creating', 'random', 'rows', 'like', 'the', 'one', 'above.', 'How', 'could', 'I', 'do', 'this', 'in', 'Go?', 'I', 'can', 'have', 'an', 'array', 'of', 'prefixes', 'like:', 'login', ',', 'logout', ',', 'register', 'And', 'also', 'an', 'array', 'of', 'usernames:', 'jbill,', 'dkennedy']"
1189,15643388,"I would like to know if there is any library of file system in memory for c, c++, golang, java, .net

the purpose is to save temp file in memory, not for user access, only for program internal use, so I don't need ram drive.
","['I', 'would', 'like', 'to', 'know', 'if', 'there', 'is', 'any', 'library', 'of', 'file', 'system', 'in', 'memory', 'for', 'c,', 'c++,', 'golang,', 'java,', '.net', 'the', 'purpose', 'is', 'to', 'save', 'temp', 'file', 'in', 'memory,', 'not', 'for', 'user', 'access,', 'only', 'for', 'program', 'internal', 'use,', 'so', 'I', ""don't"", 'need', 'ram', 'drive.']"
1190,15802695,"This might sound like a silly question... But I can't find anywhere what the ""a"" in strconv.Itoa actually stands for. If its taking an integer and turning it into a string, why isn't the function called Itos?
","['This', 'might', 'sound', 'like', 'a', 'silly', 'question...', 'But', 'I', ""can't"", 'find', 'anywhere', 'what', 'the', '""a""', 'in', 'strconv.Itoa', 'actually', 'stands', 'for.', 'If', 'its', 'taking', 'an', 'integer', 'and', 'turning', 'it', 'into', 'a', 'string,', 'why', ""isn't"", 'the', 'function', 'called', 'Itos?']"
1191,15834278," in my web browser the index.html content is delivered successfully, however, all the js and css URLs return 404s.

How can I get the program to serve files out of static sub-directories?
","['I', 'am', 'attempting', 'to', 'use', 'the', 'Gorilla', ""toolkit's"", 'mux', 'package', 'to', 'route', 'URLs', 'in', 'a', 'Go', 'web', 'server.', 'Using', 'this', 'question', 'as', 'a', 'guide', 'I', 'have', 'the', 'following', 'Go', 'code:', 'func', 'main', '()', '{', 'r', ':=', 'mux.NewRouter()', 'r.Handle(""/"", http.FileServer(http.Dir(""./static/"")))', 'r.HandleFunc(""/search/{searchTerm}"", Search)', 'r.HandleFunc(""/load/{dataId}"", Load)', 'http.Handle(""/"", r)', 'http.ListenAndServe("":8100"", nil)', '}', 'The', 'directory', 'structure', 'is:', '...', 'main', '.', 'go', 'static', '|', 'index', '.', 'html', '|', 'js', '|', '|', 'css', '|', 'The', 'Javascript', 'and', 'CSS', 'files', 'are', 'referenced', 'in', 'index.html', 'like', 'this:', '...', '...', 'When', 'I', 'access', 'http', '://', 'localhost', ':', '8100', 'in', 'my', 'web', 'browser', 'the', 'index.html', 'content', 'is', 'delivered', 'successfully,', 'however,', 'all', 'the', 'js', 'and', 'css', 'URLs', 'return', '404s.', 'How', 'can', 'I', 'get', 'the', 'program', 'to', 'serve', 'files', 'out', 'of', 'static', 'sub-directories?']"
1192,15858658,"

However, the order of the messages that get passed to each channel is important. I looked to the spec to see if channels preserve order when blocked, and all I found was this:


  If the capacity is greater than zero, the channel is asynchronous: communication operations succeed without blocking if the buffer is not full (sends) or not empty (receives), and elements are received in the order they are sent.


To me, if a write is blocked, then it is not ""sent"", but waiting to be sent. With that assumption, the above says nothing about order of sending when multiple goroutines are blocked on writing.

Are there any guarantees about the order of sends after a channel becomes unblocked?
","['I', 'have', 'a', 'slice', 'of', 'channels', 'that', 'all', 'receive', 'the', 'same', 'message:', 'func', 'broadcast', '(', 'c', '<-', 'chan', 'string', ',', 'chan', 's', '[]', 'chan', '<-', 'string', ')', '{', 'for', 'msg', ':=', 'range', 'c', '{', 'for', '_', ',', 'ch', ':=', 'range', 'chan', 's', '{', 'ch', '<-', 'msg', '}', '}', '}', 'However,', 'since', 'each', 'of', 'the', 'channels', 'in', 'chans', 'are', 'potentially', 'being', 'read', 'at', 'a', 'different', 'rate,', 'I', ""don't"", 'want', 'to', 'block', 'the', 'other', 'channels', 'when', 'I', 'get', 'a', 'slow', 'consumer.', ""I've"", 'solved', 'this', 'with', 'goroutines:', 'func', 'broadcast', '(', 'c', '<-', 'chan', 'string', ',', 'chan', 's', '[]', 'chan', '<-', 'string', ')', '{', 'for', 'msg', ':=', 'range', 'c', '{', 'for', '_', ',', 'ch', ':=', 'range', 'chan', 's', '{', 'go', 'func', '()', '{', 'ch', '<-', 'msg', '}()', '}', '}', '}', 'However,', 'the', 'order', 'of', 'the', 'messages', 'that', 'get', 'passed', 'to', 'each', 'channel', 'is', 'important.', 'I', 'looked', 'to', 'the', 'spec', 'to', 'see', 'if', 'channels', 'preserve', 'order', 'when', 'blocked,', 'and', 'all', 'I', 'found', 'was', 'this:', 'If', 'the', 'capacity', 'is', 'greater', 'than', 'zero,', 'the', 'channel', 'is', 'asynchronous:', 'communication', 'operations', 'succeed', 'without', 'blocking', 'if', 'the', 'buffer', 'is', 'not', 'full', '(sends)', 'or', 'not', 'empty', '(receives),', 'and', 'elements', 'are', 'received', 'in', 'the', 'order', 'they', 'are', 'sent.', 'To', 'me,', 'if', 'a', 'write', 'is', 'blocked,', 'then', 'it', 'is', 'not', '""sent"",', 'but', 'waiting', 'to', 'be', 'sent.', 'With', 'that', 'assumption,', 'the', 'above', 'says', 'nothing', 'about', 'order', 'of', 'sending', 'when', 'multiple', 'goroutines', 'are', 'blocked', 'on', 'writing.', 'Are', 'there', 'any', 'guarantees', 'about', 'the', 'order', 'of', 'sends', 'after', 'a', 'channel', 'becomes', 'unblocked?']"
1193,16141467,"
","[""I'm"", 'executing', 'a', 'template', 'with', '2', 'parallel', 'arrays', '(same', 'size)', 'and', 'I', 'want', 'to', 'list', 'items', 'from', 'both', 'arrays', 'in', 'parallel,', 'how', 'do', 'I', 'use', 'index', 'inside', 'of', 'range?', 'this', 'obviously', ""doesn't"", 'work:', '{{', 'range', '$', 'i', ',', '$', 'e', ':=', '.', 'First', '}}$', 'e', '-', '{{', 'index', '.', 'Second', '$', 'i', '}}{{', 'end', '}}']"
1194,16168601,". It will only help you to know which file may cause the problem but nothing more deeply. Since import relationship just become more and more complex while code grows, I'm eager to know how to avoid import cycle more efficiently in Go. Any help is much appreciated.
","[""I'm"", 'working', 'on', 'a', 'Go', 'project', 'for', 'a', 'month.', 'The', 'good', 'thing', 'is', 'Go', 'is', 'really', 'highly', 'efficient.', 'But', 'after', 'a', 'month', 'of', 'development', ""I've"", 'already', 'got', 'thousands', 'lines', 'of', 'code', 'and', 'many', 'packages.', 'To', 'avoid', 'import', 'cycle', 'is', 'a', 'major', 'issue', 'for', 'me', 'that', 'anytime', 'I', 'got', 'a', 'import', 'cycle', 'error,', 'I', 'have', 'no', 'idea', 'where', 'the', 'problem', 'may', 'be', 'at', 'first', 'time.', 'The', 'Go', 'compiler', 'also', 'only', 'have', 'very', 'simple', 'notice', 'that', 'always', 'not', 'good', 'enough', 'to', 'locate', 'issue', 'quickly', 'like:', 'main', '.', 'go', ':', '7', ':', '3', ':', 'import', 'cycle', 'not', 'allowed', '.', 'It', 'will', 'only', 'help', 'you', 'to', 'know', 'which', 'file', 'may', 'cause', 'the', 'problem', 'but', 'nothing', 'more', 'deeply.', 'Since', 'import', 'relationship', 'just', 'become', 'more', 'and', 'more', 'complex', 'while', 'code', 'grows,', ""I'm"", 'eager', 'to', 'know', 'how', 'to', 'avoid', 'import', 'cycle', 'more', 'efficiently', 'in', 'Go.', 'Any', 'help', 'is', 'much', 'appreciated.']"
1195,16916464,"

The output I get is:

I am a *main.Fish


What I want is:

I am a *main.Cod

","['How', 'do', 'I', 'get', 'the', 'correct', 'Type', 'of', 'the', 'struct', 'using', 'the', 'anonymous', 'field', '(or', 'superclass)?', 'I', 'am', 'trying', 'to', 'make', 'this', 'fish', 'describe', 'itself', 'as', 'a', 'cod:', 'package', 'main', 'import', '(', '""fmt""', '""reflect""', ')', 'type', 'Fish', 'struct', '{', '}', 'func', '(', 'self', '*', 'Fish', ')', 'WhatAmI', '()', 'string', '{', 'return', 'reflect.TypeOf(self).String()', '}', 'type', 'Cod', 'struct', '{', 'Fish', '}', 'func', 'main', '()', '{', 'c', ':=', 'new', '(', 'Cod', ')', 'fmt.Println(""I am a"", c.WhatAmI())', '}', 'The', 'output', 'I', 'get', 'is:', 'I', 'am', 'a', '*main.Fish', 'What', 'I', 'want', 'is:', 'I', 'am', 'a', '*main.Cod']"
1196,16931499,"

The compiler complain about the  v[""level""] 

","['I', 'have', 'the', 'following', 'JSON,', 'and', 'I', 'want', 'to', 'parse', 'it', 'into', 'array', 'of', 'class:', '{', '""1001""', ':', '{', '""level""', ':', '10', ',', '""monster-id""', ':', '1001', ',', '""skill-level""', ':', '1', ',', '""aimer-id""', ':', '301', '}', '""1002""', ':', '{', '""level""', ':', '12', ',', '""monster-id""', ':', '1002', ',', '""skill-level""', ':', '1', ',', '""aimer-id""', ':', '302', '}', '""1003""', ':', '{', '""level""', ':', '16', ',', '""monster-id""', ':', '1003', ',', '""skill-level""', ':', '2', ',', '""aimer-id""', ':', '303', '}', '}', 'Here', 'is', 'what', 'i', 'am', 'trying', 'to', 'do', 'but', 'failed:', 'type', 'Monster', 'struct', '{', 'MonsterId', 'int32', 'Level', 'int32', 'SkillLevel', 'int32', 'AimerId', 'int32', '}', 'type', 'MonsterCollection', 'struct', '{', 'Pool', 'map', '[', 'string', ']', 'Monster', '}', 'func', '(', 'mc', '*', 'MonsterCollection', ')', 'FromJson', '(', 'jsonStr', 'string', ')', '{', 'var', 'data', 'interface', '{}', 'b', ':=', '[]', 'byte', '(', 'jsonStr', ')', 'err', ':=', 'json.Unmarshal(b, &data)', 'if', 'err', '!=', 'nil', '{', 'return', '}', 'm', ':=', 'data', '.(', 'map', '[', 'string', ']', 'interface', '{})', 'i', ':=', '0', 'for', 'k', ',', 'v', ':=', 'range', 'm', '{', 'monster', ':=', 'new', '(', 'Monster', ')', 'monster', '.', 'Level', '=', 'v', '[', '""level""', ']', 'monster', '.', 'MonsterId', '=', 'v', '[', '""monster-id""', ']', 'monster', '.', 'SkillLevel', '=', 'v', '[', '""skill-level""', ']', 'monster', '.', 'AimerId', '=', 'v', '[', '""aimer-id""', ']', 'mc', '.', 'Pool', '[', 'i', ']', '=', 'monster', 'i', '++', '}', '}', 'The', 'compiler', 'complain', 'about', 'the', 'v[""level""]']"
1197,16931561,"The fmt package has a Scan function that reads stdin, and writes consecutive space separated values to the variables you provide. Is there a way to use this with Slices, so that I could create a slice of sice n, and have scan read n values and put them into the slice?
","['The', 'compiler', 'complain', 'about', 'the', 'v[""level""]']"
1198,17004405,"

I'm just starting out, so I don't have any data yet. Is there a way I can convert the Template object into a string without data?
","[""I've"", 'loaded', 'a', 'template', 'file', 'into', 'memory', 'with', 'the', 'following', 'code:', 't', ':=', 'template.New(""master"")', 'tpl', ',', 'err', ':=', 't.ParseFiles(""templates/index.html"")', 'Now', 'I', 'want', 'to', 'draw', 'that', 'template', 'into', 'a', 'string,', 'so', 'my', 'index.html', 'is', 'pretty', 'empty:', '{{', 'define', '""master""', '}}', 'Hello', 'World', '{{', 'end', '}}', ""I'm"", 'just', 'starting', 'out,', 'so', 'I', ""don't"", 'have', 'any', 'data', 'yet.', 'Is', 'there', 'a', 'way', 'I', 'can', 'convert', 'the', 'Template', 'object', 'into', 'a', 'string', 'without', 'data?']"
1199,17086309,"

The case is that i have many non-code resources, like default settings files, html templates and images... but it seems a little weird to me place it in the ""src/github.com/username/reponame"" directory (because the first ""src"" part).

What are the most common solutions to this problem?

Another problem I'm facing now is that I don't know the most common ""make"" tools to build an entire project with external resources like default settings files or html (the ""go build/install"" commands only take care of source code files). How do you take care of relative paths when the executable is ""installed""?

Disclaimer: I've read this thread: How to access resource files after the 'go' tool installed the executable? , but I didn't see reliable solutions. My executable is a server, and it's not an option to embed the settings files and recompile every time I want to reconfigure the server (and its not an option to pass all the settings parameters via execution parameters, because the settings file is very complex).
","[""I'm"", 'new', 'to', 'Go', 'and', ""I'm"", 'struggling', 'to', 'find', 'the', 'best', 'way', 'to', 'handle', 'Git', 'repositories.', 'At', 'this', 'moment', ""I'm"", 'using', 'the', ""Go's"", 'official', 'proposed', 'directories', 'structure,', 'but', 'I', 'think', 'it', 'has', 'many', 'pitfalls.', ""It's"", 'something', 'like', '$', 'GOPATH', 'bin', 'non', '-', 'import', 'ant', '-', 'stuff', 'pkg', 'non', '-', 'import', 'ant', '-', 'stuff', 'src', 'github', '.', 'com', 'username', 'reponame', 'The', 'case', 'is', 'that', 'i', 'have', 'many', 'non-code', 'resources,', 'like', 'default', 'settings', 'files,', 'html', 'templates', 'and', 'images...', 'but', 'it', 'seems', 'a', 'little', 'weird', 'to', 'me', 'place', 'it', 'in', 'the', '""src/github.com/username/reponame""', 'directory', '(because', 'the', 'first', '""src""', 'part).', 'What', 'are', 'the', 'most', 'common', 'solutions', 'to', 'this', 'problem?', 'Another', 'problem', ""I'm"", 'facing', 'now', 'is', 'that', 'I', ""don't"", 'know', 'the', 'most', 'common', '""make""', 'tools', 'to', 'build', 'an', 'entire', 'project', 'with', 'external', 'resources', 'like', 'default', 'settings', 'files', 'or', 'html', '(the', '""go', 'build/install""', 'commands', 'only', 'take', 'care', 'of', 'source', 'code', 'files).', 'How', 'do', 'you', 'take', 'care', 'of', 'relative', 'paths', 'when', 'the', 'executable', 'is', '""installed""?', 'Disclaimer:', ""I've"", 'read', 'this', 'thread:', 'How', 'to', 'access', 'resource', 'files', 'after', 'the', ""'go'"", 'tool', 'installed', 'the', 'executable?', ',', 'but', 'I', ""didn't"", 'see', 'reliable', 'solutions.', 'My', 'executable', 'is', 'a', 'server,', 'and', ""it's"", 'not', 'an', 'option', 'to', 'embed', 'the', 'settings', 'files', 'and', 'recompile', 'every', 'time', 'I', 'want', 'to', 'reconfigure', 'the', 'server', '(and', 'its', 'not', 'an', 'option', 'to', 'pass', 'all', 'the', 'settings', 'parameters', 'via', 'execution', 'parameters,', 'because', 'the', 'settings', 'file', 'is', 'very', 'complex).']"
1200,17208763," script.

I thought Go would be somewhere between C and Python as far as running time is concerned.  Am I doing something inefficiently with my Go code, and if so, what?

P.S. I also ran the above three programs without the file handling operations, and still the same result, i.e., Go takes an extraordinarily long time compared to the other two.
","['I', 'was', 'solving', 'a', 'simple', 'question', 'in', 'C,', 'Go,', 'and', 'Python', 'and', 'comparing', 'the', 'results.', 'The', 'solution', 'is', 'simply', 'supposed', 'to', 'have', 'two', 'equations', 'inside', 'an', 'if-else', 'block.', 'The', 'following', 'are', 'the', 'code', 'for', 'my', 'solution', 'in:', 'C', 'python', 'go', 'I', 'was', 'comparing', 'the', 'way', 'the', 'three', 'languages', 'deal', 'with', 'floating', 'point', 'results', 'and', 'hence', 'made', 'this', 'script', 'to', 'generate', 'the', 'test', 'cases', 'and', 'this', 'to', 'compare', 'the', 'results,', 'two', 'at', 'a', 'time.', 'The', 'weird', 'thing', 'is', 'the', 'time', 'it', 'takes', 'to', 'run', 'the', 'first', '3', 'scripts.', 'The', 'C', 'program', 'obviously', 'runs', 'within', 'a', 'couple', 'of', 'seconds.', 'Python', 'takes', 'around', '2.5-3', 'seconds.', 'However,', 'Go', 'is', 'taking', 'around', '24-25', 'seconds', 'to', 'run', 'the', 'program', 'on', 'the', 'test', 'cases', 'generated', 'by', 'the', 'generate_test_cases', '.', 'py', 'script.', 'I', 'thought', 'Go', 'would', 'be', 'somewhere', 'between', 'C', 'and', 'Python', 'as', 'far', 'as', 'running', 'time', 'is', 'concerned.', 'Am', 'I', 'doing', 'something', 'inefficiently', 'with', 'my', 'Go', 'code,', 'and', 'if', 'so,', 'what?', 'P.S.', 'I', 'also', 'ran', 'the', 'above', 'three', 'programs', 'without', 'the', 'file', 'handling', 'operations,', 'and', 'still', 'the', 'same', 'result,', 'i.e.,', 'Go', 'takes', 'an', 'extraordinarily', 'long', 'time', 'compared', 'to', 'the', 'other', 'two.']"
1201,17222021,"I want to integrate ReCAPTCHA to my GAE Golang web application. In order to verify a captcha, I need to get user's IP address. How can I fetch user's IP address from a form post?
","['I', 'want', 'to', 'integrate', 'ReCAPTCHA', 'to', 'my', 'GAE', 'Golang', 'web', 'application.', 'In', 'order', 'to', 'verify', 'a', 'captcha,', 'I', 'need', 'to', 'get', ""user's"", 'IP', 'address.', 'How', 'can', 'I', 'fetch', ""user's"", 'IP', 'address', 'from', 'a', 'form', 'post?']"
1202,17266532," in go
","['Is', 'there', 'anything', 'like', 'fizzler,', 'htmlagilitypack', 'or', 'beautifulsoup', 'for', 'go?', 'I', 'want', 'to', 'do', 'something', 'like', 'doc.load(html); aelements:=doc.SelectAll(""a"")', 'in', 'go']"
1203,17383554,"

Then modelling the objects inside with their own struct.  I'd rather do it the first way, is it possible?
","['I', 'want', 'to', 'be', 'able', 'to', 'Marshal/Unmarshall', 'a', 'struct', 'type', 'MyType', 'struct', '{', 'Items', 'json', ':', '""item""', '}', 'Where', 'an', 'example', 'JSON', 'document', 'it', 'must', 'be', 'able', 'to', 'handle', 'is', '{', '""items""', ':[', '""value1""', ',', '{', '""x""', ':', '""y""', '},', '""value3""', ']}', 'I', 'am', 'only', 'starting', 'to', 'learn', 'Go.', 'I', 'am', 'starting', 'to', 'think', 'I', 'might', 'need', 'to', 'impose', 'some', 'restrictions', 'on', 'the', 'structure', 'of', 'the', 'array.', 'Using', 'the', 'above', 'example,', 'my', 'idea', 'would', 'be', '{', '""items""', ':[', '{', '""type""', ':', 'null', ',', '""value""', ':', '""value1""', '}', '{', '""type:""', 'x', '"", ""', 'value', '"":""', 'y', '},', '{', '""type""', ':', '""value3""', ',', '""value""', ':', '""value3""', '}', ']}', 'Then', 'modelling', 'the', 'objects', 'inside', 'with', 'their', 'own', 'struct.', ""I'd"", 'rather', 'do', 'it', 'the', 'first', 'way,', 'is', 'it', 'possible?']"
1204,17574770,".

So, how could this be implemented? 
","['Given', 'this', 'type', 'type', 'Response', 'map', '[', 'string', ']', 'interface', '{}', 'I', 'created', 'a', 'method', 'NewResponse', 'which', 'fills', 'in', 'the', 'default', 'values:', 'func', 'NewResponse', '()', 'Response', '{', 'resp', ':=', 'Response', '{', '""status""', ':', '200', ',', '""msg""', ':', '""Added jobs to queue""', '}', 'resp_metadata', ':=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'resp_metadata', '[', '""base""', ']', '=', '""api/v1""', 'resp_metadata', '[', '""self""', ']', '=', '""/crawler/jobs/add""', 'resp', '[', '""metadata""', ']', '=', 'resp_metadata', 'return', 'resp', '}', 'which', 'i', 'call', 'like', 'NewResponse()', 'but', 'I', 'would', 'like', 'to', 'do', 'Response.New()', 'instead,', 'so', 'the', 'method', 'signature', 'should', 'be', 'like', 'this', 'func', '(', 'Response', ')', 'New', '()', 'Response', '{', 'but', 'then', 'I', 'always', 'get', 'the', 'error', 'not', 'enough', 'arguments', 'in', 'call', 'to', 'Response', '.', 'New', '.', 'So,', 'how', 'could', 'this', 'be', 'implemented?']"
1205,17595502,"
","['I', 'was', 'looking', 'at', 'net/http', 'and', 'crypto/x509', 'I', 'wondering', 'which', 'approach', 'is', 'better', 'and', 'why.', 'net/http/http.go', 'uses', 'strings:', '//', 'HTTP', 'request', 'parsing', 'errors.', 'type', 'ProtocolError', 'struct', '{', 'ErrorString', 'string', '}', 'func', '(', 'err', '*', 'ProtocolError', ')', 'Error', '()', 'string', '{', 'return', 'err', '.', 'ErrorString', '}', 'var', '(', 'ErrHeaderTooLong', '=', '&', 'ProtocolError', '{', '""header too long""', '}', 'ErrShortBody', '=', '&', 'ProtocolError', '{', '""entity body too short""', '}', 'ErrNotSupported', '=', '&', 'ProtocolError', '{', '""feature not supported""', '}', 'ErrUnexpectedTrailer', '=', '&', 'ProtocolError', '{', '""trailer header without chunked transfer encoding""', '}', 'ErrMissingContentLength', '=', '&', 'ProtocolError', '{', '""missing ContentLength in HEAD response""', '}', 'ErrNotMultipart', '=', '&', 'ProtocolError', '{', '""request Content-Type isn\'t multipart/form-data""', '}', 'ErrMissingBoundary', '=', '&', 'ProtocolError', '{', '""no multipart boundary param in Content-Type""', '}', ')', 'crypto/x509/verify.go', 'uses', 'ints:', 'type', 'InvalidReason', 'int', 'const', '(', 'TooManyIntermediates', 'IncompatibleUsage', ')', 'type', 'CertificateInvalidError', 'struct', '{', 'Cert', '*', 'Certificate', 'Reason', 'InvalidReason', '}', 'func', '(', 'e', 'CertificateInvalidError', ')', 'Error', '()', 'string', '{', 'switch', 'e', '.', 'Reason', '{', 'case', 'TooManyIntermediates', ':', 'return', '""x509: too many intermediates for path length constraint""', 'case', 'IncompatibleUsage', ':', 'return', '""x509: certificate specifies an incompatible key usage""', '}', 'return', '""x509: unknown error""', '}']"
1206,18006533,"

load average is a little high but I'll worry about that later.  The network traffic though is almost hitting the network potential.

I'm on Ubuntu 12.04,
8 Gigs Ram,
2.3 GHz processors (says EC2 :P)

Also, I've increased my file descriptors from 1024 to 10240

I thought go was designed for this kind of thing or am I expecting too much of go for this application?

Is there something trivial that I'm missing?  Do I need to configure my system to maximizes go's potential?

EDIT

I guess my question wasn't clear enough. Sorry. I'm not asking for magic from go, I know the computers have limitations to what they can handle. 
So I'll rephrase. Why is 1 instance with 1800 go routines != 9 instances with 200 threads each?  Same amount of go routines significantly less performance for 1 instance compared to 9 instances. 
","['I', 'writing', 'a', 'data', 'mover', 'in', 'go.', 'Taking', 'data', 'located', 'in', 'one', 'data', 'center', 'and', 'moving', 'it', 'to', 'another', 'data', 'center.', 'Figured', 'go', 'would', 'be', 'perfect', 'for', 'this', 'given', 'the', 'go', 'routines.', 'I', 'notice', 'if', 'I', 'have', 'one', 'program', 'running', '1800', 'threads', 'the', 'amount', 'of', 'data', 'being', 'transmitted', 'is', 'really', 'low', ""here's"", 'the', 'dstat', 'print', 'out', 'averaged', 'over', '30', 'seconds', '---', 'load', '-', 'avg', '---', '----', 'total', '-', 'cpu', '-', 'usage', '----', '-', 'dsk/total- -net/total-', '---', 'paging', '--', '---', 'system', '--', '1', 'm', '5', 'm', '15', 'm', '|', 'usr', 'sys', 'idl', 'wai', 'hiq', 'siq', '|', 'read', 'writ', '|', 'recv', 'send', '|', 'in', 'out', '|', 'int', 'csw', '0', '.', '70', '3', '.', '58', '4', '.', '42', '|', '10', '1', '89', '0', '0', '0', '|', '0', '156', 'k', '|', '7306', 'k', '6667', 'k', '|', '0', '0', '|', '11', 'k', '6287', '0', '.', '61', '3', '.', '28', '4', '.', '29', '|', '12', '2', '85', '0', '0', '1', '|', '0', '6963', 'B', '|', '8822', 'k', '8523', 'k', '|', '0', '0', '|', '14', 'k', '7531', '0', '.', '65', '3', '.', '03', '4', '.', '18', '|', '12', '2', '86', '0', '0', '1', '|', '0', '1775', 'B', '|', '8660', 'k', '8514', 'k', '|', '0', '0', '|', '13', 'k', '7464', '0', '.', '67', '2', '.', '81', '4', '.', '07', '|', '12', '2', '86', '0', '0', '1', '|', '0', '1638', 'B', '|', '8908', 'k', '8735', 'k', '|', '0', '0', '|', '13', 'k', '7435', '0', '.', '67', '2', '.', '60', '3', '.', '96', '|', '12', '2', '86', '0', '0', '1', '|', '0', '819', 'B', '|', '8752', 'k', '8385', 'k', '|', '0', '0', '|', '13', 'k', '7445', '0', '.', '47', '2', '.', '37', '3', '.', '84', '|', '11', '2', '86', '0', '0', '1', '|', '0', '2185', 'B', '|', '8740', 'k', '8491', 'k', '|', '0', '0', '|', '13', 'k', '7548', '0', '.', '61', '2', '.', '22', '3', '.', '74', '|', '10', '2', '88', '0', '0', '0', '|', '0', '1229', 'B', '|', '7122', 'k', '6765', 'k', '|', '0', '0', '|', '11', 'k', '6228', '0', '.', '52', '2', '.', '04', '3', '.', '63', '|', '3', '1', '97', '0', '0', '0', '|', '0', '546', 'B', '|', '1999', 'k', '1365', 'k', '|', '0', '0', '|', '3117', '2033', 'If', 'I', 'run', '9', 'instances', 'of', 'the', 'program', 'with', '200', 'threads', 'each', 'I', 'see', 'much', 'better', 'performance', '---', 'load', '-', 'avg', '---', '----', 'total', '-', 'cpu', '-', 'usage', '----', '-', 'dsk/total- -net/total-', '---', 'paging', '--', '---', 'system', '--', '1', 'm', '5', 'm', '15', 'm', '|', 'usr', 'sys', 'idl', 'wai', 'hiq', 'siq', '|', 'read', 'writ', '|', 'recv', 'send', '|', 'in', 'out', '|', 'int', 'csw', '8', '.', '34', '9', '.', '56', '8', '.', '78', '|', '53', '8', '36', '0', '0', '3', '|', '0', '410', 'B', '|', '38', 'M', '32', 'M', '|', '0', '0', '|', '41', 'k', '26', 'k', '8', '.', '01', '9', '.', '37', '8', '.', '74', '|', '74', '10', '12', '0', '0', '4', '|', '0', '137', 'B', '|', '51', 'M', '51', 'M', '|', '0', '0', '|', '59', 'k', '39', 'k', '8', '.', '36', '9', '.', '31', '8', '.', '74', '|', '75', '9', '12', '0', '0', '4', '|', '0', '1092', 'B', '|', '51', 'M', '51', 'M', '|', '0', '0', '|', '59', 'k', '39', 'k', '6', '.', '93', '8', '.', '89', '8', '.', '62', '|', '74', '10', '12', '0', '0', '4', '|', '0', '5188', 'B', '|', '50', 'M', '49', 'M', '|', '0', '0', '|', '59', 'k', '38', 'k', '7', '.', '0', '9', '8', '.', '73', '8', '.', '58', '|', '75', '9', '12', '0', '0', '4', '|', '0', '410', 'B', '|', '51', 'M', '50', 'M', '|', '0', '0', '|', '60', 'k', '39', 'k', '7', '.', '40', '8', '.', '62', '8', '.', '54', '|', '75', '9', '12', '0', '0', '4', '|', '0', '137', 'B', '|', '52', 'M', '49', 'M', '|', '0', '0', '|', '61', 'k', '40', 'k', '7', '.', '96', '8', '.', '63', '8', '.', '55', '|', '75', '9', '12', '0', '0', '4', '|', '0', '956', 'B', '|', '51', 'M', '51', 'M', '|', '0', '0', '|', '59', 'k', '39', 'k', '7', '.', '46', '8', '.', '44', '8', '.', '49', '|', '75', '9', '12', '0', '0', '4', '|', '0', '273', 'B', '|', '51', 'M', '50', 'M', '|', '0', '0', '|', '58', 'k', '38', 'k', '8', '.', '0', '8', '8', '.', '51', '8', '.', '51', '|', '75', '9', '12', '0', '0', '4', '|', '0', '410', 'B', '|', '51', 'M', '51', 'M', '|', '0', '0', '|', '59', 'k', '39', 'k', 'load', 'average', 'is', 'a', 'little', 'high', 'but', ""I'll"", 'worry', 'about', 'that', 'later.', 'The', 'network', 'traffic', 'though', 'is', 'almost', 'hitting', 'the', 'network', 'potential.', ""I'm"", 'on', 'Ubuntu', '12.04,', '8', 'Gigs', 'Ram,', '2.3', 'GHz', 'processors', '(says', 'EC2', ':P)', 'Also,', ""I've"", 'increased', 'my', 'file', 'descriptors', 'from', '1024', 'to', '10240', 'I', 'thought', 'go', 'was', 'designed', 'for', 'this', 'kind', 'of', 'thing', 'or', 'am', 'I', 'expecting', 'too', 'much', 'of', 'go', 'for', 'this', 'application?', 'Is', 'there', 'something', 'trivial', 'that', ""I'm"", 'missing?', 'Do', 'I', 'need', 'to', 'configure', 'my', 'system', 'to', 'maximizes', ""go's"", 'potential?', 'EDIT', 'I', 'guess', 'my', 'question', ""wasn't"", 'clear', 'enough.', 'Sorry.', ""I'm"", 'not', 'asking', 'for', 'magic', 'from', 'go,', 'I', 'know', 'the', 'computers', 'have', 'limitations', 'to', 'what', 'they', 'can', 'handle.', 'So', ""I'll"", 'rephrase.', 'Why', 'is', '1', 'instance', 'with', '1800', 'go', 'routines', '!=', '9', 'instances', 'with', '200', 'threads', 'each?', 'Same', 'amount', 'of', 'go', 'routines', 'significantly', 'less', 'performance', 'for', '1', 'instance', 'compared', 'to', '9', 'instances.']"
1207,18169071,"I""m (slowly) working on a app-engine app using the go language -- While I like many parts of the experience (the nice integration with google services and the go language itself) but I'm a bit suprised at the lack of debug facilities especially with app engine.

I know that you can log to the console (The lowest form of debugging IMHO) but all attempts at anything more clever (attaching gdb on the local instance) fails. (the build tools for app engine specifically seem to strip debug info)

I can't believe I'm the only one who has observed this so I'm wondering what other folks are doing to develop/debug in app engine?
","['I""m', '(slowly)', 'working', 'on', 'a', 'app-engine', 'app', 'using', 'the', 'go', 'language', '--', 'While', 'I', 'like', 'many', 'parts', 'of', 'the', 'experience', '(the', 'nice', 'integration', 'with', 'google', 'services', 'and', 'the', 'go', 'language', 'itself)', 'but', ""I'm"", 'a', 'bit', 'suprised', 'at', 'the', 'lack', 'of', 'debug', 'facilities', 'especially', 'with', 'app', 'engine.', 'I', 'know', 'that', 'you', 'can', 'log', 'to', 'the', 'console', '(The', 'lowest', 'form', 'of', 'debugging', 'IMHO)', 'but', 'all', 'attempts', 'at', 'anything', 'more', 'clever', '(attaching', 'gdb', 'on', 'the', 'local', 'instance)', 'fails.', '(the', 'build', 'tools', 'for', 'app', 'engine', 'specifically', 'seem', 'to', 'strip', 'debug', 'info)', 'I', ""can't"", 'believe', ""I'm"", 'the', 'only', 'one', 'who', 'has', 'observed', 'this', 'so', ""I'm"", 'wondering', 'what', 'other', 'folks', 'are', 'doing', 'to', 'develop/debug', 'in', 'app', 'engine?']"
1208,18187136,"I'm using Charles to debug HTTP requests, but it seems that Go's network stack ignores the system proxy settings (on OSX) and the requests are not logged.

How do I tell Go that the requests should use the proxy?
","[""I'm"", 'using', 'Charles', 'to', 'debug', 'HTTP', 'requests,', 'but', 'it', 'seems', 'that', ""Go's"", 'network', 'stack', 'ignores', 'the', 'system', 'proxy', 'settings', '(on', 'OSX)', 'and', 'the', 'requests', 'are', 'not', 'logged.', 'How', 'do', 'I', 'tell', 'Go', 'that', 'the', 'requests', 'should', 'use', 'the', 'proxy?']"
1209,18208394,"

This assumes that the string representations of equivalent maps are the same, which seems to be true in this case (if the keys are the same then they hash to the same value, so their orders will be the same). Is there a better way to do this? What is the idiomatic way to compare two maps in table-driven tests?
","['I', 'have', 'a', 'table-driven', 'test', 'case', 'like', 'this', 'one:', 'func', 'CountWords', '(', 's', 'string', ')', 'map', '[', 'string', ']', 'int', 'func', 'TestCountWords', '(', 't', '*', 'testing', '.', 'T', ')', '{', 'var', 'tests', '=', '[]', 'struct', '{', 'input', 'string', 'want', 'map', '[', 'string', ']', 'int', '}{', '{', '""foo""', ',', 'map', '[', 'string', ']', 'int', '{', '""foo""', ':', '1', '}},', '{', '""foo bar foo""', ',', 'map', '[', 'string', ']', 'int', '{', '""foo""', ':', '2', ',', '""bar""', ':', '1', '}},', '}', 'for', 'i', ',', 'c', ':=', 'range', 'tests', '{', 'go', 't', ':=', 'CountWords', '(', 'c', '.', 'input', ')', '//', 'TODO', 'test', 'whether', 'c.want', '==', 'got', '}', '}', 'I', 'could', 'check', 'whether', 'the', 'lengths', 'are', 'the', 'same', 'and', 'write', 'a', 'loop', 'that', 'checks', 'if', 'every', 'key-value', 'pair', 'is', 'the', 'same.', 'But', 'then', 'I', 'have', 'to', 'write', 'this', 'check', 'again', 'when', 'I', 'want', 'to', 'use', 'it', 'for', 'another', 'type', 'of', 'map', '(say', 'map[string]string).', 'What', 'I', 'ended', 'up', 'doing', 'is,', 'I', 'converted', 'the', 'maps', 'to', 'strings', 'and', 'compared', 'the', 'strings:', 'func', 'checkAsStrings', '(', 'a', ',', 'b', 'interface', '{})', 'bool', '{', 'return', 'fmt.Sprintf(""%v"", a) != fmt.Sprintf(""%v"", b)', '}', '//', '...', 'if', 'checkAsStrings', '(', 'go', 't', ',', 'c', '.', 'want', ')', '{', 't.Errorf(""Case #%v: Wanted: %v, got: %v"", i, c.want, got)', '}', 'This', 'assumes', 'that', 'the', 'string', 'representations', 'of', 'equivalent', 'maps', 'are', 'the', 'same,', 'which', 'seems', 'to', 'be', 'true', 'in', 'this', 'case', '(if', 'the', 'keys', 'are', 'the', 'same', 'then', 'they', 'hash', 'to', 'the', 'same', 'value,', 'so', 'their', 'orders', 'will', 'be', 'the', 'same).', 'Is', 'there', 'a', 'better', 'way', 'to', 'do', 'this?', 'What', 'is', 'the', 'idiomatic', 'way', 'to', 'compare', 'two', 'maps', 'in', 'table-driven', 'tests?']"
1210,18298223,"
How can I check from Go whether a webpage is accessed from localhost or from outside?
How can I disable some functions for external users?
How can I hide the whole site, like ""nope, nothing here, port 8080 is closed, move along"".

","['How', 'can', 'I', 'check', 'from', 'Go', 'whether', 'a', 'webpage', 'is', 'accessed', 'from', 'localhost', 'or', 'from', 'outside?', 'How', 'can', 'I', 'disable', 'some', 'functions', 'for', 'external', 'users?', 'How', 'can', 'I', 'hide', 'the', 'whole', 'site,', 'like', '""nope,', 'nothing', 'here,', 'port', '8080', 'is', 'closed,', 'move', 'along"".']"
1211,18343208,"
","['I', 'am', 'trying', 'to', 'reverse-sort', 'a', 'slice', 'of', 'integers', 'in', 'Go.', 'example', ':=', '[]', 'int', '{', '1', ',', '25', ',', '3', ',', '5', ',', '4', '}', 'sort.Ints(example)', '// this will give me a slice sorted from 1 to the highest number', 'How', 'do', 'I', 'sort', 'it', 'so', 'that', 'it', 'goes', 'from', 'highest', 'to', 'lowest?', 'so', '[25', '5', '4', '3', '1]', 'I', 'have', 'tried', 'this', 'sort.Sort(sort.Reverse(sort.Ints(keys)))', 'Source:', 'http://golang.org/pkg/sort/#Reverse', 'However,', 'I', 'am', 'getting', 'the', 'error', 'below', 'command', '-', 'line', '-', 'arguments', './', 'Roman_Numerals', '.', 'go', ':', '31', ':', 'sort.Ints(keys)', 'used', 'as', 'value']"
1212,18398200,"I am trying to follow below presentation

http://www.slideshare.net/borderj/concurrency-in-go-10662038

And I found this statement ,


  ""typed BOUNDED blocking""


in here what exactly mean by BOUNDED ?

I tried gooling and found that BOUNDED BUFFER explanations but I am looking for more general understanding 
","['I', 'am', 'trying', 'to', 'follow', 'below', 'presentation', 'http://www.slideshare.net/borderj/concurrency-in-go-10662038', 'And', 'I', 'found', 'this', 'statement', ',', '""typed', 'BOUNDED', 'blocking""', 'in', 'here', 'what', 'exactly', 'mean', 'by', 'BOUNDED', '?', 'I', 'tried', 'gooling', 'and', 'found', 'that', 'BOUNDED', 'BUFFER', 'explanations', 'but', 'I', 'am', 'looking', 'for', 'more', 'general', 'understanding']"
1213,18425465,"

In this case, RegEnumValue always returns code 87, which MSDN's only explanation is ""The parameter is incorrect.""

Does anyone have any ideas that can point me in the right direction for this?
","[""I'm"", 'trying', 'to', 'enumerate', 'over', 'a', 'list', 'of', 'values', 'in', 'the', 'Windows', 'registry', 'using', 'Go,', 'but', ""I'm"", 'running', 'into', 'some', 'trouble.', ""I've"", 'tried', 'two', 'approaches:', 'using', 'both', 'the', 'Go-provided', 'syscall', 'library', 'to', 'call', 'into', 'RegEnumValue,', 'as', 'well', 'as', 'using', 'a', 'Windows', 'API', 'wrapper', 'by', 'lxn.', 'In', 'both', 'cases,', ""I'm"", 'having', 'the', 'same', 'issue.', 'This', 'is', 'the', 'code', ""I'm"", 'using', '(which', 'is', 'currently', 'using', 'the', 'win', 'library', 'from', 'lxn):', 'var', 'root', 'win', '.', 'HKEY', 'rootpath', ',', '_', ':=', 'syscall.UTF16PtrFromString(""HARDWARE\\\\DEVICEMAP\\\\SERIALCOMM"")', 'fmt.Println(win.RegOpenKeyEx(win.HKEY_LOCAL_MACHINE, rootpath, 0, win.KEY_READ, &root))', 'var', 'name_length', 'uint32', '=', '72', 'var', 'name', '*', 'uint16', 'var', 'key_type', 'uint32', 'var', 'lpData', '*', 'byte', 'var', 'lpDataLength', 'uint32', '=', '72', 'var', 'zero_uint', 'uint32', '=', '0', 'fmt.Println(win.RegEnumValue(root, zero_uint, name, &name_length, nil, &key_type, lpData, &lpDataLength))', 'win.RegCloseKey(root)', 'In', 'this', 'case,', 'RegEnumValue', 'always', 'returns', 'code', '87,', 'which', ""MSDN's"", 'only', 'explanation', 'is', '""The', 'parameter', 'is', 'incorrect.""', 'Does', 'anyone', 'have', 'any', 'ideas', 'that', 'can', 'point', 'me', 'in', 'the', 'right', 'direction', 'for', 'this?']"
1214,18923123,"

Is it safe?
May be I need to use a mutex?
","['I', 'have', 'a', 'http', 'server.', 'It', 'is', 'written', 'with', 'Go.', 'I', 'have', 'this', 'code:', 'package', 'main', 'import', '(', '""net/http""', '""runtime""', ')', 'var', 'cur', '=', '0', 'func', 'handler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'cur', '=', 'cur', '+', '1', ';', '}', 'func', 'main', '()', '{', 'runtime.GOMAXPROCS(runtime.NumCPU())', 'http.HandleFunc(""/"", handler)', 'http.ListenAndServe("":9010"", nil)', '}', 'Is', 'it', 'safe?', 'May', 'be', 'I', 'need', 'to', 'use', 'a', 'mutex?']"
1215,18926303,".

Thanks!
","['Basically,', 'the', 'only', 'way', '(that', 'I', 'know', 'of)', 'to', 'iterate', 'through', 'the', 'values', 'of', 'a', 'struct', 'is', 'like', 'this:', 'type', 'Example', 'struct', '{', 'a_number', 'uint32', 'a_string', 'string', '}', '//', '...', 'r', ':=', '&', 'Example', '{(', '2', '<<', '31', ')', '-', '1', ',', '""....""', '}:', 'for', '_', ',', 'd', ':=', 'range', '[]', 'interface', '{}{', 'r', '.', 'a_number', ',', 'r', '.', 'a_string', ',', '}', '{', '//', 'do', 'something', 'with', 'the', 'd', '}', 'I', 'was', 'wondering,', 'if', ""there's"", 'a', 'better', 'and', 'more', 'versatile', 'way', 'of', 'achieving', '[]', 'interface', '{}{', 'r', '.', 'a_number', ',', 'r', '.', 'a_string', ',', '}', ',', 'so', 'I', ""don't"", 'need', 'to', 'list', 'each', 'parameter', 'individually,', 'or', 'alternatively,', 'is', 'there', 'a', 'better', 'way', 'to', 'loop', 'through', 'a', 'struct?', 'I', 'tried', 'to', 'look', 'through', 'the', 'reflect', 'package,', 'but', 'I', 'hit', 'a', 'wall,', 'because', ""I'm"", 'not', 'sure', 'what', 'to', 'do', 'once', 'I', 'retrieve', 'reflect.ValueOf(*r).Field(0)', '.', 'Thanks!']"
1216,18969572,"
","[""I'm"", 'trying', 'to', 'write', 'an', 'OpenGL', 'application', 'in', 'Go', 'on', 'MacOS,', 'and', ""can't"", 'figure', 'out', 'how', 'to', 'create', 'a', 'context', 'with', 'a', 'version', 'higher', 'than', 'OpenGL', '2.1', ""I've"", 'tried', 'using', 'multiple', 'OpenGL', 'bindings', 'out', 'there,', 'but', 'settled', 'on', 'github.com/go-gl/gl', 'The', 'below', 'example', 'will', 'output', '2', '.', '1', 'NVIDIA', '-', '8', '.', '12', '.', '47', '310', '.', '40', '.', '0', '0', '.', '05', 'f01', '.', 'What', 'do', 'I', 'need', 'to', 'do', 'to', 'create', 'an', 'OpenGL', '3.2', 'context?', 'package', 'main', 'import', '(', '""fmt""', '""github.com/go-gl/gl""', 'glfw', '""github.com/go-gl/glfw3""', ')', 'func', 'main', '()', '{', '//', 'request', '3.2', 'context', 'glfw.WindowHint(glfw.ContextVersionMajor, 3)', 'glfw.WindowHint(glfw.ContextVersionMinor, 2)', 'glfw.WindowHint(glfw.OpenglProfile, glfw.OpenglCoreProfile)', 'if', '!', 'glfw.Init()', '{', 'panic', '(', '""glfw init failed""', ')', '}', 'defer', 'glfw.Terminate()', '//', 'create', 'and', 'set', 'window', 'context', 'window', ',', 'err', ':=', 'glfw.CreateWindow(64, 64, ""foo"", nil, nil)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'window.MakeContextCurrent()', '//', 'check', 'version', 'version', ':=', 'gl.GetString(gl.VERSION)', 'fmt.Println(version)', '}']"
1217,19087603,"

But I feel I'm going about this all wrong.  I know I can put sound() in an interface, but then the specific animals are sounders, not really animals.  If Animal becomes the interface, I can't share the name and the speak code.  I realize the designers of Go went with interfaces-only and chose not do directly support this classic OO use case the way we would see it done in Ruby, Python, Java, and so on, but I suspect there should be some idiom or best practice for simulating this.  What is the preferred way of doing so?
","['I', 'am', 'looking', 'to', 'translate', 'a', '""classic', 'OO""', 'example', 'into', 'Go,', 'one', 'in', 'which', 'a', 'set', 'of', 'subclasses', 'implement', 'some', 'methods', 'on', 'their', 'own', 'but', 'they', 'share', 'an', 'implementation', 'of', 'some', 'methods', 'via', 'their', 'superclass.', ""I'm"", 'well', 'aware', 'of', 'how', 'to', 'use', ""Go's"", 'interfaces', 'and', ""I've"", 'even', 'used', 'embedding,', 'but', ""I'm"", 'not', 'quite', 'sure', 'what,', 'if', 'any,', 'idioms', 'to', 'employ', 'to', 'capture', 'this', 'intended', 'behavior.', ""Here's"", 'a', 'concrete,', 'and', 'probably', 'a', 'very', 'familiar', 'example.', ""I'll"", 'use', 'Ruby.', 'There', 'are', 'two', 'kinds', 'of', 'animals,', 'dogs', 'and', 'cows.', 'All', 'animals', 'have', 'a', 'name', 'and', 'they', 'can', 'speak.', 'The', 'way', 'you', 'set', 'and', 'get', 'the', 'same', 'is', 'the', 'same', 'regardless', 'of', 'the', 'animal', 'type;', 'the', 'sound', 'they', 'make', 'differs', 'depending', 'on', 'the', 'subclass.', 'Now', 'there', 'is', 'a', 'speak', 'method', 'which', 'is', 'the', 'same', 'for', 'all', 'animals,', 'but', 'it', 'delegates', 'to', 'the', ""subclass's"", 'sound', 'method.', 'Here', 'it', 'is', 'in', 'Ruby:', 'class', 'Animal', 'def', 'initialize', '(', 'name', ');', 'name', '=', 'name', ';', 'end', 'def', 'speak', ';', 'puts', '""#{@name} says #{sound()}""', ';', 'end', 'end', 'class', 'Dog', '<', 'Animal', ';', 'def', 'sound', '();', '""woof""', ';', 'end', ';', 'end', 'class', 'Cow', '<', 'Animal', ';', 'def', 'sound', '();', '""mooo""', ';', 'end', ';', 'end', 'How', 'is', 'this', 'best', 'captured', 'in', 'Go?', 'So', 'far', ""I've"", 'tried', 'type', 'Animal', 'struct', '{', 'name', 'string', '}', 'type', 'Cow', 'struct', '{', 'Animal', '}', 'type', 'Dog', 'struct', '{', 'Animal', '}', 'and', ""I've"", 'been', 'able', 'to', 'construct', '""animals""', 'like', 'so:', 'func', '(', 'd', 'Dog', ')', 'sound', '()', 'string', '{', 'return', '""woof""', '}', 'func', '(', 'c', 'Cow', ')', 'sound', '()', 'string', '{', 'return', '""mooo""', '}', 'func', 'main', '()', '{', 'd', ':=', 'Dog', '{', 'Animal', '{', '""Sparky""', '}}', 'c', ':=', 'Cow', '{', 'Animal', '{', '""Bessie""', '}}', 'fmt.Println(d.name)', 'fmt.Println(c.sound())', '}', 'But', 'I', 'feel', ""I'm"", 'going', 'about', 'this', 'all', 'wrong.', 'I', 'know', 'I', 'can', 'put', 'sound()', 'in', 'an', 'interface,', 'but', 'then', 'the', 'specific', 'animals', 'are', 'sounders,', 'not', 'really', 'animals.', 'If', 'Animal', 'becomes', 'the', 'interface,', 'I', ""can't"", 'share', 'the', 'name', 'and', 'the', 'speak', 'code.', 'I', 'realize', 'the', 'designers', 'of', 'Go', 'went', 'with', 'interfaces-only', 'and', 'chose', 'not', 'do', 'directly', 'support', 'this', 'classic', 'OO', 'use', 'case', 'the', 'way', 'we', 'would', 'see', 'it', 'done', 'in', 'Ruby,', 'Python,', 'Java,', 'and', 'so', 'on,', 'but', 'I', 'suspect', 'there', 'should', 'be', 'some', 'idiom', 'or', 'best', 'practice', 'for', 'simulating', 'this.', 'What', 'is', 'the', 'preferred', 'way', 'of', 'doing', 'so?']"
1218,19122477,". Is there a better way to do this?
","[""I'm"", 'trying', 'to', 'get', 'the', 'first', 'Monday', 'of', 'a', 'given', 'month.', 'Best', 'way', 'I', 'can', 'come', 'up', 'with', 'is', 'to', 'loop', 'through', 'first', 'seven', 'days', 'and', 'return', 'when', '.', 'Weekday', '()', '==', '""Monday""', '.', 'Is', 'there', 'a', 'better', 'way', 'to', 'do', 'this?']"
1219,19243431,"

In the later condition the parent of sleep 100000 will be the init process after 20s if we didn't interrupt the main program.
","['I', 'found', 'a', 'strange', 'problem', 'in', 'golang.The', 'program', 'executed', 'by', 'exec.Start()', 'will', 'quit', 'if', 'the', 'parent', 'program', 'is', 'interrupt', 'by', 'the', 'signal', 'os.Interrupt,while', 'the', 'child', 'program', 'will', 'NOT', 'quit', 'if', 'the', 'parent', 'program', 'exit', ""normally.What's"", 'the', 'difference', 'between', 'that', 'two', 'conditions?', 'For', 'examples:', 'package', 'main', 'import', '""fmt""', 'import', '""os""', 'import', '""time""', 'import', '""os/exec""', 'func', 'main', '(){', 'cmd', ':=', 'exec.Command(""sleep"", ""100000"")', 'cmd', '.', 'Env', '=', 'os.Environ()', 'fmt.Println(cmd.Env)', 'cmd.Start()', 'time.Sleep(1e9*20)', 'return', '}', 'In', 'the', 'later', 'condition', 'the', 'parent', 'of', 'sleep', '100000', 'will', 'be', 'the', 'init', 'process', 'after', '20s', 'if', 'we', ""didn't"", 'interrupt', 'the', 'main', 'program.']"
1220,19414427,"

Is the Read() function defined in os package?
I am trying to understand this code but cannot find where the Read() function is defined... if that is the one in os package, it returns integer for record variable. But how come it is able to print out the text in the text file?

Thanks~
","['http://play.golang.org/p/Opb7pRFyMf', '//', 'func', '(f', '*File)', 'Read(b', '[]byte)', '(n', 'int,', 'err', 'error)', 'record', ',', 'err', ':=', 'reader.Read()', 'Is', 'the', 'Read()', 'function', 'defined', 'in', 'os', 'package?', 'I', 'am', 'trying', 'to', 'understand', 'this', 'code', 'but', 'cannot', 'find', 'where', 'the', 'Read()', 'function', 'is', 'defined...', 'if', 'that', 'is', 'the', 'one', 'in', 'os', 'package,', 'it', 'returns', 'integer', 'for', 'record', 'variable.', 'But', 'how', 'come', 'it', 'is', 'able', 'to', 'print', 'out', 'the', 'text', 'in', 'the', 'text', 'file?', 'Thanks~']"
1221,19436860,"


Steps I've taken:


I've grabbed and modified github.com/AllenDang/w32 which I think formats syscall for Go.

When I need an unlisted function from user32.go, I add it.

Tried using GetForegroundWindow and GetWindowText with result, then GetWindow( hwnd, previous ) to just walkthrough everything
Read through:

syscall docs (http://golang.org/pkg/syscall/)
syscall/dll_windows.go
syscall/env_windows.go
syscall/exec_windows.go
syscall/syscall.go
syscall/syscall_windows.go
syscall/syscall_windows_386.go
syscall/syscall_windows_amd86.go
syscall/syscall_windows_test.go
syscall/zsyscall_windows_386.go
syscall/zsyscall_windows_amd86.go
syscall/ztypes_windows.go
syscall/ztypes_windows_386.go
syscall/ztypes_windows_amd86.go

Every potential Window Function at Windows Dev Center
Searched StackExchange, Google, DuckDuckGo
I can see there's something (TestEnumWindows)

line 125 in runtime/syscall_windows_test.go (http://golang.org/src/pkg/runtime/syscall_windows_test.go)
Though this function doesn't exist in syscall_windows_test.go



Questions:


Better solution? In my ignorance I could easily be overlooking some method like: GiveGeoffreyExactlyWhatHeWants()
Am I in the right ballpark?
Is this doable in Go?
What's the right direction to head?
Is this something anybody else needs?

","['Thanks', 'for', 'reading', 'and', 'any', 'comments', 'you', 'may', 'have.', 'Context:', ""I've"", 'been', 'a', 'UI/R&D', 'dev', '(prototyping,', 'etc.)', 'for', 'over', '20', 'years', 'and', 'just', 'started', 'server/backend', 'development.', ""I'm"", 'very', 'new', 'to', 'Go', '-', 'less', 'than', '2', 'months', '-', 'and', 'have', '1)', 'run', 'through', 'much', 'of', 'GoByExample', 'and', '2)', 'set', 'up', 'a', 'primitive,', 'working', 'web', 'server', 'on', 'an', 'Amazon', 'EC2', 'instance.', 'I', 'created', 'a', 'UI', 'in', 'another', 'language', 'which', 'serves', 'a', 'HUD', '(Heads', 'Up', 'Display)', 'for', 'another', '3rd', 'party', 'application', '-', 'a', 'game', 'which', 'spawns', 'multiple', 'windows.', '(Think', 'multiple', 'poker', 'tables', 'running', 'in', 'multiple', 'windows.)', 'I', 'connected', 'the', 'HUD', 'to', 'a', 'Go', 'client', 'I', 'created.', 'I', 'use', 'Go', 'to', 'grab', 'OS', 'information', 'because', 'of', 'limitations', 'in', 'the', 'first', 'language.', 'I', 'want', 'to', 'continue', 'to', 'use', 'Go', 'because', 'I', 'really', 'enjoy', 'it.', ""I'm"", 'on', 'a', 'Windows', '7', 'machine.', 'Goal(s):', 'Big', 'picture:', 'When', 'a', 'User', 'moves', 'a', 'window,', 'I', 'want', 'the', 'HUD', 'to', 'move', 'with', 'it.', 'To', 'do', 'this', 'I', 'need', 'information', 'about', 'the', 'main', 'windows', 'whos', 'WindowText', 'starts', 'with', '""Game"".', 'The', 'ideal', 'would', 'be', 'something', 'like', 'this:', 'windows', ':', '[', '{', 'windowHwnd', ':', 'hwnd', ',', 'windowText', ':', 'windowText', ',', 'windowX', ':', 'x', ',', 'windowY', ':', 'y', ',', 'windowWidth', ':', 'width', ',', 'windowHeight', ':', 'height', '},', '.', '.', '.', '{', 'windowHwnd', ':', 'hwnd', ',', 'windowText', ':', 'windowText', ',', 'windowX', ':', 'x', ',', 'windowY', ':', 'y', ',', 'windowWidth', ':', 'width', ',', 'windowHeight', ':', 'height', '}', ']', 'Steps', ""I've"", 'taken:', ""I've"", 'grabbed', 'and', 'modified', 'github.com/AllenDang/w32', 'which', 'I', 'think', 'formats', 'syscall', 'for', 'Go.', 'When', 'I', 'need', 'an', 'unlisted', 'function', 'from', 'user32.go,', 'I', 'add', 'it.', 'Tried', 'using', 'GetForegroundWindow', 'and', 'GetWindowText', 'with', 'result,', 'then', 'GetWindow(', 'hwnd,', 'previous', ')', 'to', 'just', 'walkthrough', 'everything', 'Read', 'through:', 'syscall', 'docs', '(http://golang.org/pkg/syscall/)', 'syscall/dll_windows.go', 'syscall/env_windows.go', 'syscall/exec_windows.go', 'syscall/syscall.go', 'syscall/syscall_windows.go', 'syscall/syscall_windows_386.go', 'syscall/syscall_windows_amd86.go', 'syscall/syscall_windows_test.go', 'syscall/zsyscall_windows_386.go', 'syscall/zsyscall_windows_amd86.go', 'syscall/ztypes_windows.go', 'syscall/ztypes_windows_386.go', 'syscall/ztypes_windows_amd86.go', 'Every', 'potential', 'Window', 'Function', 'at', 'Windows', 'Dev', 'Center', 'Searched', 'StackExchange,', 'Google,', 'DuckDuckGo', 'I', 'can', 'see', ""there's"", 'something', '(TestEnumWindows)', 'line', '125', 'in', 'runtime/syscall_windows_test.go', '(http://golang.org/src/pkg/runtime/syscall_windows_test.go)', 'Though', 'this', 'function', ""doesn't"", 'exist', 'in', 'syscall_windows_test.go', 'Questions:', 'Better', 'solution?', 'In', 'my', 'ignorance', 'I', 'could', 'easily', 'be', 'overlooking', 'some', 'method', 'like:', 'GiveGeoffreyExactlyWhatHeWants()', 'Am', 'I', 'in', 'the', 'right', 'ballpark?', 'Is', 'this', 'doable', 'in', 'Go?', ""What's"", 'the', 'right', 'direction', 'to', 'head?', 'Is', 'this', 'something', 'anybody', 'else', 'needs?']"
1222,19579238,"

This is a code example from the documentation for executing system commands. http://golang.org/pkg/os/exec/#example_Cmd_Output Even on the documentation site the example execute box doesn't run and has the same error:
2009/11/10 23:00:00 exec: ""date"": executable file not found in $PATH

On Windows I get:
exec: ""date"": executable file not found in %PATH%

How do I get commands to work? Do I need to set a path or write out the full path of the command?
","['package', 'main', 'import', '(', '""fmt""', '""log""', '""os/exec""', ')', 'func', 'main', '()', '{', 'out', ',', 'err', ':=', 'exec.Command(""date"").Output()', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'fmt.Printf(""The date is %s\\n"", out)', '}', 'This', 'is', 'a', 'code', 'example', 'from', 'the', 'documentation', 'for', 'executing', 'system', 'commands.', 'http://golang.org/pkg/os/exec/#example_Cmd_Output', 'Even', 'on', 'the', 'documentation', 'site', 'the', 'example', 'execute', 'box', ""doesn't"", 'run', 'and', 'has', 'the', 'same', 'error:', '2009/11/10', '23:00:00', 'exec:', '""date"":', 'executable', 'file', 'not', 'found', 'in', '$PATH', 'On', 'Windows', 'I', 'get:', 'exec:', '""date"":', 'executable', 'file', 'not', 'found', 'in', '%PATH%', 'How', 'do', 'I', 'get', 'commands', 'to', 'work?', 'Do', 'I', 'need', 'to', 'set', 'a', 'path', 'or', 'write', 'out', 'the', 'full', 'path', 'of', 'the', 'command?']"
1223,19580688,"

The comment docs for the func and fields are output no problem, but for some reason the ‘FirstType docs’ and ‘SecondType docs’ are nowhere to be found. What am I missing? Go version is 1.1.2.

(To run the above, save it into a main.go file, and go run main.go)
","['I', 'am', 'trying', 'to', 'read', 'the', 'assocated', 'Doc', 'comments', 'on', 'a', 'struct', 'type', 'using', 'Go’s', 'parser', 'and', 'ast', 'packages.', 'In', 'this', 'example,', 'the', 'code', 'simply', 'uses', 'itself', 'as', 'the', 'source.', 'package', 'main', 'import', '(', '""fmt""', '""go/ast""', '""go/parser""', '""go/token""', ')', '//', 'FirstType', 'docs', 'type', 'FirstType', 'struct', '{', '//', 'FirstMember', 'docs', 'FirstMember', 'string', '}', '//', 'SecondType', 'docs', 'type', 'SecondType', 'struct', '{', '//', 'SecondMember', 'docs', 'SecondMember', 'string', '}', '//', 'Main', 'docs', 'func', 'main', '()', '{', 'fset', ':=', 'token.NewFileSet()', '// positions are relative to fset', 'd', ',', 'err', ':=', 'parser.ParseDir(fset, ""./"", nil, parser.ParseComments)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'for', '_', ',', 'f', ':=', 'range', 'd', '{', 'ast.Inspect(f, func(n ast.Node)', 'bool', '{', 'switch', 'x', ':=', 'n', '.(', 'type', ')', '{', 'case', '*', 'ast', '.', 'FuncDecl', ':', 'fmt.Printf(""%s:\\tFuncDecl %s\\t%s\\n"", fset.Position(n.Pos()), x.Name, x.Doc)', 'case', '*', 'ast', '.', 'TypeSpec', ':', 'fmt.Printf(""%s:\\tTypeSpec %s\\t%s\\n"", fset.Position(n.Pos()), x.Name, x.Doc)', 'case', '*', 'ast', '.', 'Field', ':', 'fmt.Printf(""%s:\\tField %s\\t%s\\n"", fset.Position(n.Pos()), x.Names, x.Doc)', '}', 'return', 'true', '})', '}', '}', 'The', 'comment', 'docs', 'for', 'the', 'func', 'and', 'fields', 'are', 'output', 'no', 'problem,', 'but', 'for', 'some', 'reason', 'the', '‘FirstType', 'docs’', 'and', '‘SecondType', 'docs’', 'are', 'nowhere', 'to', 'be', 'found.', 'What', 'am', 'I', 'missing?', 'Go', 'version', 'is', '1.1.2.', '(To', 'run', 'the', 'above,', 'save', 'it', 'into', 'a', 'main.go', 'file,', 'and', 'go', 'run', 'main.go)']"
1224,19847594,"

As you can see, in my case all I need to know is how to detect windows but I'd like to know the way to detect any platform/os.

Play:

http://play.golang.org/p/r4lYWDJDxL
","[""Here's"", 'what', ""I'm"", 'currently', 'using,', 'which', 'I', 'think', 'gets', 'the', 'job', 'done,', 'but', ""there's"", 'got', 'to', 'be', 'a', 'better', 'way:', 'func', 'isWindows', '()', 'bool', '{', 'return', 'os', '.', 'PathSeparator', '==', ""'\\\\'"", '&&', 'os', '.', 'PathListSeparator', '==', ""';'"", '}', 'As', 'you', 'can', 'see,', 'in', 'my', 'case', 'all', 'I', 'need', 'to', 'know', 'is', 'how', 'to', 'detect', 'windows', 'but', ""I'd"", 'like', 'to', 'know', 'the', 'way', 'to', 'detect', 'any', 'platform/os.', 'Play:', 'http://play.golang.org/p/r4lYWDJDxL']"
1225,19858664,"I'm curious how should I structure JSON REST API server in Go language with Mgo library. I have dozens of collections related with each other. I've created the gist with sample part of file structure in my current approach.

It works great, but from time to time I encounter downtime caused by this error: ""read tcp 10.168.30.100:37288: i/o timeout"". I suppose that I handle mgo connection pool inapropriately. Are there any examples showing how should I create big applications based on mgo?
","[""I'm"", 'curious', 'how', 'should', 'I', 'structure', 'JSON', 'REST', 'API', 'server', 'in', 'Go', 'language', 'with', 'Mgo', 'library.', 'I', 'have', 'dozens', 'of', 'collections', 'related', 'with', 'each', 'other.', ""I've"", 'created', 'the', 'gist', 'with', 'sample', 'part', 'of', 'file', 'structure', 'in', 'my', 'current', 'approach.', 'It', 'works', 'great,', 'but', 'from', 'time', 'to', 'time', 'I', 'encounter', 'downtime', 'caused', 'by', 'this', 'error:', '""read', 'tcp', '10.168.30.100:37288:', 'i/o', 'timeout"".', 'I', 'suppose', 'that', 'I', 'handle', 'mgo', 'connection', 'pool', 'inapropriately.', 'Are', 'there', 'any', 'examples', 'showing', 'how', 'should', 'I', 'create', 'big', 'applications', 'based', 'on', 'mgo?']"
1226,19906544,"Numpy's arange function returns a list of evenly spaced values within a given interval with float steps. Is there a short and simple way to create a slice like that in Go?
","[""Numpy's"", 'arange', 'function', 'returns', 'a', 'list', 'of', 'evenly', 'spaced', 'values', 'within', 'a', 'given', 'interval', 'with', 'float', 'steps.', 'Is', 'there', 'a', 'short', 'and', 'simple', 'way', 'to', 'create', 'a', 'slice', 'like', 'that', 'in', 'Go?']"
1227,19958767,"I'm trying to create a multi-protocol server using Go. One server is an HTTP server, listening on 80. Another, is a custom-made protocol (over TCP) running on port 8088. Is this possible with Go?
","[""I'm"", 'trying', 'to', 'create', 'a', 'multi-protocol', 'server', 'using', 'Go.', 'One', 'server', 'is', 'an', 'HTTP', 'server,', 'listening', 'on', '80.', 'Another,', 'is', 'a', 'custom-made', 'protocol', '(over', 'TCP)', 'running', 'on', 'port', '8088.', 'Is', 'this', 'possible', 'with', 'Go?']"
1228,20023944,"I'm trying to invoke a Gurilla Mux handler programmatically in another handler function.  Simply calling that handler function won't work, because it uses mux.Vars().  What I have at hand is a URL.  Therefore, I'm looking for a way to invoke that handler function just as if the user has visited that URL, and I want the response back to further process it.  Does anyone know a way to do it?
","['As', 'you', 'can', 'see,', 'in', 'my', 'case', 'all', 'I', 'need', 'to', 'know', 'is', 'how', 'to', 'detect', 'windows', 'but', ""I'd"", 'like', 'to', 'know', 'the', 'way', 'to', 'detect', 'any', 'platform/os.', 'Play:', 'http://play.golang.org/p/r4lYWDJDxL']"
1229,20086504,"
","[""I'm"", 'trying', 'to', 'test', 'out', 'performing', 'a', 'simple', 'TCP', 'MODBUS', 'read', 'of', 'a', 'single', 'register', 'from', 'a', 'device', 'emulator.', 'When', 'running', 'the', 'code', 'it', 'is', 'showing', 'a', 'response', 'of', '0', 'bytes', 'and', 'I', 'get', 'the', 'message', '""connection', 'reset', 'by', 'peer"".', 'Any', 'ideas', 'as', 'to', 'why', ""it's"", 'not', 'working?', 'UPDATE,', 'my', 'request', 'was', 'incorrect,', 'the', 'correct', 'working', 'MODBUS', 'TCP', 'poll', 'code', 'is:', 'package', 'main', 'import', '(', '""fmt""', '""net""', ')', '//', 'TCP', 'MODBUS', 'client', 'func', 'main', '()', '{', 'conn', ',', 'err', ':=', 'net.Dial(""tcp"", ""192.168.98.114:502"")', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'numRegs', ':=', '1', 'make', 'a', 'MODBUS', 'TCP', 'request', '(', 'be', 'careful', ',', 'the', 'for', 'mat', 'is', 'different', 'to', 'MODBUS', 'serial', ')', 'request', ':=', '[]', 'byte', '{', '0', 'x00', ',', '0', 'x00', ',', '0', 'x00', ',', '0', 'x00', ',', '0', 'x00', ',', '0', 'x06', ',', '0', 'x01', ',', '0', 'x03', ',', '0', 'x00', ',', '0', 'x01', ',', '0', 'x00', ',', '0', 'x01', '}', 'n', ',', 'err', ':=', 'conn.Write(request)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'expectedResponseLen', ':=', '5', '+', '2', '*', 'numRegs', 'response', ':=', 'make', '([]', 'byte', ',', 'expectedResponseLen', ')', 'n', ',', 'err', '=', 'conn.Read(response)', 'conn.Close()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'for', 'i', ':=', '0', ';', 'i', '<', 'n', ';', 'i', '++', '{', 'fmt.Printf(""%02x "", response[i])', '}', 'fmt.Println(""\\n"")', '}']"
1230,20154606,"

res.method and res.gc dont print anything. I have no idea on whats going wrong.
","['I', 'have', 'a', 'sample', 'json', 'file', 'which', 'is', 'structured', 'like', 'this', '{', '""method""', ':', '""brute_force""', ',', '""bc""', ':', '""select * from blah;""', ',', '""gc""', ':[', '""select sum(year) from blah;""', ',', '""select count(*) from table;""', ']', '}', 'I', 'am', 'trying', 'to', 'write', 'a', 'go', 'program', 'which', 'can', 'read', 'this', 'file', 'and', 'operate', 'of', 'json', 'content.', 'package', 'main', 'import', '(', '""fmt""', '""encoding/json""', '""io/ioutil""', ')', 'type', 'Response2', 'struct', '{', 'method', 'string', 'bc', 'string', 'gc', '[]', 'string', '}', 'func', 'main', '()', '{', 'file', ',', '_', ':=', 'ioutil.ReadFile(""config.json"")', 'fmt.Printf(""%s"",string(file))', 'res', ':=', '&', 'Response2', '{}', 'json.Unmarshal([]byte(string(file)), &res)', 'fmt.Println(res)', 'fmt.Println(res.method)', 'fmt.Println(res.gc)', '}', 'res.method', 'and', 'res.gc', 'dont', 'print', 'anything.', 'I', 'have', 'no', 'idea', 'on', 'whats', 'going', 'wrong.']"
1231,20163660,"

Finally, my question: Is there a simpler way to allow Replay to accept a slice of any type A, as long as A implements the Statement interface?
","['I', 'have', 'the', 'following', 'types:', 'type', 'Statement', 'interface', '{', 'Say', '()', 'string', '}', 'type', 'Quote', 'struct', '{', 'quote', 'string', '}', 'func', '(', 'p', 'Quote', ')', 'Say', '()', 'string', '{', 'return', 'p', '.', 'quote', '}', 'func', 'Replay', '(', 'conversation', '[]', 'Statement', ')', '{', 'for', '_', ',', 'statement', ':=', 'range', 'conversation', '{', 'fmt.Println(statement.Say())', '}', '}', 'I', 'think', 'I', 'have', 'a', 'fairly', 'good', 'grasp', 'of', 'why', 'a', 'function', 'that', 'accepts', 'a', 'parameter', 'of', 'type', '[]Statement,', 'cannot', 'be', 'called', 'with', '[]Quote;', 'even', 'though', 'Quote', 'implements', 'Statement,', '[]Quote', 'does', 'not', 'implement', '[]Statement.', '[]Statement', 'is', 'not', 'even', 'an', 'interface.', 'It', 'has', 'the', 'type', 'slice', 'of', 'Statement.', 'While', 'Go', 'implicitly', 'converts', 'from', 'a', 'type', 'to', 'an', 'interface', 'type,', 'it', 'does', 'no', 'implicit', 'conversion', 'from', 'a', 'slice', 'of', 'type', 'A', 'to', 'a', 'slice', 'of', 'interface', 'B.', 'We', 'can', 'convert', 'the', 'quotes', 'to', 'statements', 'explicitly:', 'conversation', ':=', '[]', 'Quote', '{', 'Quote', '{', '""Nice Guy Eddie: C\'mon, throw in a buck!""', '},', 'Quote', '{', '""Mr. Pink: Uh-uh, I don\'t tip.""', '},', 'Quote', '{', '""Nice Guy Eddie: You don\'t tip?""', '},', 'Quote', '{', '""Mr. Pink: Nah, I don\'t believe in it.""', '},', 'Quote', '{', '""Nice Guy Eddie: You don\'t believe in tipping?""', '},', '}', '//', 'This', ""doesn't"", 'work', '//', 'Replay(conversation)', '//', 'Create', 'statements', 'from', 'quotes', 'statements', ':=', 'make', '([]', 'Statement', ',', 'len', '(', 'conversation', '))', 'for', 'i', ',', 'quote', ':=', 'range', 'conversation', '{', 'statements', '[', 'i', ']', '=', 'quote', '}', 'Replay', '(', 'statements', ')', 'Now', 'say', 'that', 'Replay', 'is', 'part', 'of', 'a', 'library', 'that', 'wants', 'to', 'go', 'out', 'of', 'its', 'way', 'in', 'how', 'easy', ""it's"", 'to', 'use', 'Replay.', 'It', 'allows', 'you', 'to', 'call', 'Replay', 'with', 'any', 'slice', 'of', 'objects', 'as', 'long', 'as', 'those', 'objects', 'implement', 'the', 'Statement', 'interface.', 'To', 'do', 'so', 'it', 'has', 'the', 'following', 'conversion', 'method:', 'func', 'ConvertToStatements(its', 'interface{})', '([]Statement,', 'error)', '{', 'itsValue', ':=', 'reflect.ValueOf(its)', 'itsKind', ':=', 'itsValue.Kind()', 'if', 'itsKind', '!=', 'reflect.Array', '&&', 'itsKind', '!=', 'reflect.Slice', '{', 'return', 'nil,', 'fmt.Errorf(""Expected', 'items', 'to', 'be', 'an', 'Array', 'or', 'a', 'Slice,', 'got', '%s"",', 'itsKind)', '}', 'itsLength', ':=', 'itsValue.Len()', 'items', ':=', 'make([]Statement,', 'itsLength)', 'for', 'i', ':=', '0;', 'i', '<', 'itsLength;', 'i++', '{', 'itsItem', ':=', 'itsValue.Index(i)', 'if', 'item,', 'ok', ':=', 'itsItem.Interface().(Statement);', 'ok', '{', 'items[i]', '=', 'item', '}', 'else', '{', 'return', 'nil,', 'fmt.Errorf(""item', '#%d', 'does', 'not', 'implement', 'the', 'Statement', 'interface:', '%s"",', 'i,', 'itsItem)', '}', '}', 'return', 'items,', 'nil', '}', 'Replay', 'looks', 'like', 'this:', 'func', 'Replay(its', 'interface{})', '{', 'conversation', ':=', 'ConvertToStatements(its)', 'for', '_,', 'statement', ':=', 'range', 'conversation', '{', 'fmt.Println(statement.Say())', '}', '}', 'We', 'can', 'now', 'call', 'Replay', 'with', 'quotes', 'directly:', 'Replay', '(', 'conversation', ')', 'Finally,', 'my', 'question:', 'Is', 'there', 'a', 'simpler', 'way', 'to', 'allow', 'Replay', 'to', 'accept', 'a', 'slice', 'of', 'any', 'type', 'A,', 'as', 'long', 'as', 'A', 'implements', 'the', 'Statement', 'interface?', 'func', 'ConvertToStatements', '(', 'its', 'interface', '{})', '([]', 'Statement', ',', 'error', ')', '{', 'itsValue', ':=', 'reflect.ValueOf(its)', 'itsKind', ':=', 'itsValue.Kind()', 'if', 'itsKind', '!=', 'reflect', '.', 'Array', '&&', 'itsKind', '!=', 'reflect', '.', 'Slice', '{', 'return', 'nil', ',', 'fmt.Errorf(""Expected items to be an Array or a Slice, got %s"", itsKind)', '}', 'itsLength', ':=', 'itsValue.Len()', 'items', ':=', 'make', '([]', 'Statement', ',', 'itsLength', ')', 'for', 'i', ':=', '0', ';', 'i', '<', 'itsLength', ';', 'i', '++', '{', 'itsItem', ':=', 'itsValue.Index(i)', 'if', 'item', ',', 'ok', ':=', 'itsItem.Interface().(Statement)', ';', 'ok', '{', 'items', '[', 'i', ']', '=', 'item', '}', 'else', '{', 'return', 'nil', ',', 'fmt.Errorf(""item #%d does not implement the Statement interface: %s"", i, itsItem)', '}', '}', 'return', 'items', ',', 'nil', '}', 'Finally,', 'my', 'question:', 'Is', 'there', 'a', 'simpler', 'way', 'to', 'allow', 'Replay', 'to', 'accept', 'a', 'slice', 'of', 'any', 'type', 'A,', 'as', 'long', 'as', 'A', 'implements', 'the', 'Statement', 'interface?', 'func', 'Replay', '(', 'its', 'interface', '{})', '{', 'conversation', ':=', 'ConvertToStatements', '(', 'its', ')', 'for', '_', ',', 'statement', ':=', 'range', 'conversation', '{', 'fmt.Println(statement.Say())', '}', '}']"
1232,20197563,"
","[""I'm"", 'trying', 'to', 'build', 'a', 'small', 'web', 'app,', 'and', ""I'd"", 'like', 'to', 'have', 'all', 'my', 'CSS', 'files', 'in', 'one', 'folder,', 'and', 'have', 'them', 'load', 'automatically', 'on', 'all', 'web', 'pages', '(sort', 'of', 'like', 'the', 'Rails', 'asset', 'pipeline).', ""I'm"", 'using', 'this', 'to', 'serve', 'the', 'css', 'files,', 'but', 'how', 'would', 'I', 'get', 'them', 'to', 'load', 'with', 'all', 'pages?', 'http.Handle(""/css/"", http.StripPrefix(""/css/"", http.FileServer(http.Dir(""/css/""))))']"
1233,20380157,"I launched a task using the delayed package

The only problem is that the task is failing (ooops!) and is keeping trying it again and again. I am aware of the RetryCount field but I would like to force kill the task myself.

Does anyone knows a way to do it ?
",[]
1234,20395562,", but it turned out to be [[2d3h 3h]]. Can you explain why? Thanks in advance.
","['here', 'is', 'my', 'snippet', 'of', 'code', 'in', 'Go', 'which', 'can', 'be', 'found', 'here', 'http://play.golang.org/p/L1AcgHf3E4.', 'package', 'main', 'import', '(', '""fmt""', '""regexp""', ')', 'func', 'main', '()', '{', 'reg', ':=', 'regexp.MustCompile(""([0-9]+[dh]){2}"")', 'str', ':=', '""2d3h5d""', 'fmt.Println(reg.FindAllStringSubmatch(str, -1))', '}', ""I'd"", 'expect', 'the', 'result', 'to', 'be', '[[', '2', 'd3h', '3', 'h', ']', '[', '3', 'h5d', '5', 'd', ']]', ',', 'but', 'it', 'turned', 'out', 'to', 'be', '[[2d3h', '3h]].', 'Can', 'you', 'explain', 'why?', 'Thanks', 'in', 'advance.']"
1235,20401873,"

The reason is obvious, but how can I delete/replace such strings in Go? I've been reading docst on unicode and unicode/utf8 packages and there seems no obvious/quick way to do it.

In Python for example you have methods for it where the invalid characters can be deleted, replaced by a specified character or strict setting which raises exception on invalid chars. How can I do equivalent thing in Go?

UPDATE: I meant the reason for getting an exception (panic?) - illegal char in what json.Marshal expects to be valid UTF-8 string.

(how the illegal byte sequence got into that string is not important, the usual way - bugs, file corruption, other programs that do not conform to unicode, etc)
","['I', 'get', 'this', 'on', 'json.Marshal', 'of', 'a', 'list', 'of', 'strings:', 'json', ':', 'invalid', 'UTF', '-', '8', 'in', 'string', ':', '""...ole\\xc5\\""', 'The', 'reason', 'is', 'obvious,', 'but', 'how', 'can', 'I', 'delete/replace', 'such', 'strings', 'in', 'Go?', ""I've"", 'been', 'reading', 'docst', 'on', 'unicode', 'and', 'unicode/utf8', 'packages', 'and', 'there', 'seems', 'no', 'obvious/quick', 'way', 'to', 'do', 'it.', 'In', 'Python', 'for', 'example', 'you', 'have', 'methods', 'for', 'it', 'where', 'the', 'invalid', 'characters', 'can', 'be', 'deleted,', 'replaced', 'by', 'a', 'specified', 'character', 'or', 'strict', 'setting', 'which', 'raises', 'exception', 'on', 'invalid', 'chars.', 'How', 'can', 'I', 'do', 'equivalent', 'thing', 'in', 'Go?', 'UPDATE:', 'I', 'meant', 'the', 'reason', 'for', 'getting', 'an', 'exception', '(panic?)', '-', 'illegal', 'char', 'in', 'what', 'json.Marshal', 'expects', 'to', 'be', 'valid', 'UTF-8', 'string.', '(how', 'the', 'illegal', 'byte', 'sequence', 'got', 'into', 'that', 'string', 'is', 'not', 'important,', 'the', 'usual', 'way', '-', 'bugs,', 'file', 'corruption,', 'other', 'programs', 'that', 'do', 'not', 'conform', 'to', 'unicode,', 'etc)']"
1236,20455116,"

I'm mainly trying to understand how to do this without using the sync/Wait stuff -  just pure channels - is this possible?  The goal of this routine is to have a single producer load up items that are processed by N workers - appreciate any pointers / help.
","[""I'm"", 'having', 'an', 'issue', 'trying', 'to', 'implement', 'this', '(all', 'goroutines', 'asleep', '-', 'deadlock!)', ""Here's"", 'the', 'gist', 'of', 'the', 'code:', 'var', 'workers', '=', 'runtime.NumCPU()', 'func', 'main', '()', '{', 'jobs', ':=', 'make', '(', 'chan', '*', 'myStruct', ',', 'workers', ')', 'done', ':=', 'make', '(', 'chan', '*', 'myStruct', ',', 'workers', ')', 'go', 'produceWork', '(', 'file_with_jobs', ',', 'jobs', ')', 'for', 'i', ':=', '0', ';', 'i', '<', 'runtime.NumCPU()', ';', 'i', '++', '{', 'go', 'Worker', '(', 'jobs', ',', 'done', ')', '}', 'consumeWork', '(', 'done', ')', '}', 'func', 'produceWork', '(', 'vf', 'string', ',', 'jobs', 'chan', '*', 'utils', '.', 'DigSigEntries', ')', '{', 'defer', 'close', '(', 'jobs', ')', '//', 'load', 'file', 'with', 'jobs', 'file', ',', 'err', ':=', 'ini.LoadFile(vf)', '//', 'get', 'data', 'for', 'processing', 'for', 'data', ',', '_', ':=', 'range', 'file', '{', '//', '...', 'jobs', '<-', '&', 'myStruct', '{', 'data1', ',', 'data2', ',', 'data3', ',', 'false', '}', '}', '}', 'func', 'Worker', '(', 'in', ',', 'out', 'chan', '*', 'myStruct', ')', '{', 'for', '{', 'item', ',', 'open', ':=', '<-', 'in', 'if', '!', 'open', '{', 'break', '}', 'process', '(', 'item', ')', 'out', '<-', 'item', '}', '//', 'close(out)', '-->', 'tried', 'closing', 'the', 'out', 'channel,', 'but', 'then', 'not', 'all', 'items', 'are', 'processed', '//', 'though', 'no', 'panics', 'occur.', '}', 'func', 'process', '(', 'item', '*', 'myStruct', ')', '{', '//', '...modify', 'the', 'item', 'item', '.', 'status', '=', 'true', '}', 'func', 'consumeWork', '(', 'done', 'chan', '*', 'myStruct', ')', '{', 'for', 'val', ':=', 'range', 'done', '{', 'if', '!', 'val', '.', 'status', '{', 'fmt.Println(val)', '}', '}', '}', ""I'm"", 'mainly', 'trying', 'to', 'understand', 'how', 'to', 'do', 'this', 'without', 'using', 'the', 'sync/Wait', 'stuff', '-', 'just', 'pure', 'channels', '-', 'is', 'this', 'possible?', 'The', 'goal', 'of', 'this', 'routine', 'is', 'to', 'have', 'a', 'single', 'producer', 'load', 'up', 'items', 'that', 'are', 'processed', 'by', 'N', 'workers', '-', 'appreciate', 'any', 'pointers', '/', 'help.']"
1237,20571280,"

For -a 3 and -b 2 command line arguments, the output is: %!f(int=1)

What is the best / most elegant way to force this division to be floating point?
","['I', 'have', 'the', 'following', 'code', 'snippet:', 'package', 'main', 'import', '(', '""fmt""', ';', '""flag""', ')', 'func', 'main', '()', '{', 'var', 'a', '=', 'flag.Int(""a"",0,""divident"")', 'var', 'b', '=', 'flag.Int(""b"",1,""divisor"")', 'flag.Parse()', 'fmt.Printf(""%f"",*a / *b )', '}', 'For', '-a', '3', 'and', '-b', '2', 'command', 'line', 'arguments,', 'the', 'output', 'is:', '%!f(int=1)', 'What', 'is', 'the', 'best', '/', 'most', 'elegant', 'way', 'to', 'force', 'this', 'division', 'to', 'be', 'floating', 'point?']"
1238,20571822," 

Is v.Kind() just call v.Type().Kind() ?
","['Both', 'of', 'the', 'reflect.Type', 'interface', 'and', 'reflect.Value', 'type', 'implement', 'the', 'same', 'Kind()', 'method', 'signature,', 'suppose', 'that', 'we', 'have', 'some', 'value', 'object', 'v', ':=', 'reflect.ValueOf(x)', 'Is', 'v.Kind()', 'just', 'call', 'v.Type().Kind()', '?']"
1239,20628918,"

Any help on how to fix this on MacOS?
","['I', 'want', 'to', 'install', 'json2csv', 'using', 'go', 'get', 'github', '.', 'com/jehiah/json2csv', 'but', 'I', 'receive', 'this', 'error:', 'package', 'github', '.', 'com/jehiah/json2csv:', 'cannot', 'download', ',', '$', 'GOPATH', 'not', 'set', '.', 'For', 'more', 'details', 'see', ':', 'go', 'help', 'go', 'path', 'Any', 'help', 'on', 'how', 'to', 'fix', 'this', 'on', 'MacOS?']"
1240,20714004,"
","[""I'm"", 'getting', 'this', 'return', 'value', 'from', 'a', 'function', 'call', 'in', 'the', '""reflect""', 'package:', '.', 'Wondering', 'if', 'I', 'can', 'access', 'the', 'actual', 'map', 'inside', 'the', 'return', 'value', 'and', 'if', 'so,', 'how?', 'EDIT:', 'So', 'this', 'is', 'where', ""I'm"", 'making', 'the', 'call', 'which', 'returns', 'the', 'Value', 'object.', 'It', 'returns', '[]', 'to', 'which', 'I', 'grab', 'the', 'first', 'object', 'in', 'that', 'array.', 'However,', ""I'm"", 'not', 'sure', 'how', 'to', 'convert', '[]', 'into', 'a', 'regular', 'map.', 'view_args', ':=', 'reflect.ValueOf(&controller_ref).MethodByName(action_name).Call(in)']"
1241,20743400,"
","['I', 'have', 'a', 'program', 'that', 'is', 'taking', 'an', 'array', 'and', 'shuffling', 'it,', 'once', 'it', 'has', 'done', 'this', 'it', 'will', 'print', 'out', 'one', 'of', 'the', 'first', 'value', 'from', 'the', 'shuffled', 'array.', 'Once', 'it', 'prints', 'out', 'the', 'value', 'I', 'want', 'to', 'it', 'display', 'a', ""'Press"", 'return', 'to', ""continue'"", 'message', 'will', 'be', 'displayed.', 'This', 'message', 'will', 'presist', 'until', 'the', 'user', 'presses', 'return,', 'then', 'it', 'will', 'get', 'the', 'next', 'value', 'from', 'the', 'shuffled', 'array.', 'I', 'have', 'a', 'script', 'working', 'fine', 'for', 'the', 'first', 'value', 'but', 'after', 'I', 'press', 'return', 'it', 'just', 'creates', 'empty', 'lines', 'in', 'my', 'terminal.', 'Here', 'is', 'my', 'example:', 'package', 'main', 'import', '(', '""bufio""', '""fmt""', '""math/rand""', '""os""', '""time""', ')', 'func', 'main', '()', '{', 'users', ':=', 'make', '(', 'map', '[', 'int', ']', 'string', ')', 'users', '[', '0', ']', '=', '""Mike""', 'users', '[', '1', ']', '=', '""Paul""', 'users', '[', '2', ']', '=', '""Steve""', 'users', '[', '3', ']', '=', '""Lawrence""', 'users', '[', '4', ']', '=', '""Stephen""', 'users', '[', '5', ']', '=', '""James""', 'getNextSpeaker', '(', 'users', ')', '}', 'func', 'getNextSpeaker', '(', 'users', 'map', '[', 'int', ']', 'string', ')', '{', 'numUsers', ':=', 'len', '(', 'users', ')', 'list', ':=', 'randList', '(', '1', ',', 'numUsers', ')', 'for', '_', ',', 'element', ':=', 'range', 'list', '{', 'fmt.Println(users[element-1])', 'pressAnyKey', '()', '}', '}', 'func', 'randList', '(', 'min', ',', 'max', 'int', ')', '[]', 'int', '{', 'if', 'max', '<', 'min', '{', 'min', ',', 'max', '=', 'max', ',', 'min', '}', 'length', ':=', 'max', '-', 'min', '+', '1', 't0', ':=', 'time.Now()', 'rand.Seed(int64(t0.Nanosecond()))', 'list', ':=', 'rand.Perm(length)', 'for', 'index', ',', '_', ':=', 'range', 'list', '{', 'list', '[', 'index', ']', '+=', 'min', '}', 'return', 'list', '}', 'func', 'pressAnyKey', '()', 'string', '{', 'fmt.Println(""Press Return To Continue..."")', 'reader', ':=', 'bufio.NewReader(os.Stdin)', 'input', ',', 'err', ':=', ""reader.ReadString('.')"", 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'return', 'input', '}', 'Terminal', 'Output:', '$', 'go', 'run', 'src/RandomMeetingSpeaker/meeting.go', 'Paul', 'Press', 'Return', 'To', 'Continue', '...', 'etc', 'etc']"
1242,20845256,"I'm writing a simple golang application that needs to do some decoding of some DNS packets. I noticed that in the net library, there appears to be the perfect implementation in the form of net/dnsmsg.go which contains the right structs, pack / unpack functions etc.

However, the type is marked private (lower case dnsMsg). So it appears that I have no way of using this from within my app.

I'm quite new to golang, so don't know if my only option would be to reimplement net/dnsmsg.go myself, or if there's a better way around this.
",[]
1243,20909598,"

Any idea what I'm doing wrong?
","[""I'm"", 'trying', 'to', 'get', 'my', 'Python', 'version', 'using', 'Go:', 'import', '(', '""log""', '""os/exec""', '""strings""', ')', 'func', 'verifyPythonVersion', '()', '{', '_', ',', 'err', ':=', 'exec.LookPath(""python"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatalf(""No python version located"")', '}', 'out', ',', 'err', ':=', 'exec.Command(""python"", ""--version"").Output()', 'log.Print(out)', 'if', 'err', '!=', 'nil', '{', 'log.Fatalf(""Error checking Python version with the \'python\' command: %v"", err)', '}', 'fields', ':=', 'strings.Fields(string(out))', 'log.Print(fields)', '}', 'func', 'main', '()', '{', 'verifyPythonVersion', '()', '}', 'This', 'returns', 'empty', 'slices:', '2014/01/03', '20', ':', '39', ':', '53', '[]', '2014/01/03', '20', ':', '39', ':', '53', '[]', 'Any', 'idea', 'what', ""I'm"", 'doing', 'wrong?']"
1244,20930447,"
","[""I'm"", 'trying', 'to', 'learn', 'interfaces', 'and', 'how', 'I', 'can', 'write', 'a', 'single', 'function', 'to', 'work', 'with', 'different', 'types.', 'I', 'came', 'up', 'with', 'this', 'example', 'where', ""I'm"", 'finding', 'the', 'maximum', 'value', 'in', 'either', 'a', 'slice', 'of', 'int', 'or', 'a', 'slice', 'of', 'float32.', 'The', 'code', 'is', 'as', 'follows.', 'I', 'keep', 'getting', 'this', 'error', '""t', 'is', 'not', 'a', 'type"".', 'Could', 'someone', 'please', 'tell', 'me', 'what', 'is', 'wrong', 'and', 'how', 'I', 'might', 'go', 'about', 'fixing', 'it?', 'package', 'main', 'import', '""fmt""', 'import', '""reflect""', 'var', '_', '=', 'fmt', '.', 'Println', 'var', '_', '=', 'reflect', '.', 'TypeOf', 'func', 'maxer', '(', 's', 'interface', '{})', 'interface', '{}', '{', 'v', ':=', 'reflect.ValueOf(s)', 't', ':=', 'v.Type()', 'maxval', ':=', 's', '.(', 't', ')[', '0', ']', 'for', '_', ',', 'v', ':=', 'range', 's', '.(', 't', ')[', '1', ':]', '{', 'if', 'v', '>', 'maxval', '{', 'maxval', '=', 'v', '}', '}', 'return', 'maxval', '}', 'func', 'main', '()', '{', 'fmt.Println(maxer([]int{1, 2, 3, 4}))', 'fmt.Println(maxer([]float32{1.1, 2.1, 3.14, 0.1, 2.4}))']"
1245,20993139,"

The value of count should increment by one the number of times the loop runs. Consider the cases:

Loop runs for 100 times--> value of count is 100 (Which is correct as the loop runs 100 times).

Loop runs for >510 times --> Value of count is either 508 OR 510. This happens even if it is 100000.

I am running this on an 8 core processor machine.
","['I', 'am', 'a', 'newbie', 'in', 'Go', 'language,', 'so', 'please', 'excuse', 'me', 'if', 'my', 'question', 'is', 'very', 'basic.', 'I', 'have', 'written', 'a', 'very', 'simple', 'code:', 'func', 'main', '(){', 'var', 'count', 'int', '// Default 0', 'cptr', ':=', '&', 'count', 'go', 'incr', '(', 'cptr', ')', 'time.Sleep(100)', 'fmt.Println(*cptr)', '}', '//', 'Increments', 'the', 'value', 'of', 'count', 'through', 'pointer', 'var', 'func', 'incr', '(', 'cptr', '*', 'int', ')', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '1000', ';', 'i', '++', '{', 'go', 'func', '()', '{', 'fmt.Println(*cptr)', '*', 'cptr', '=', '*', 'cptr', '+', '1', '}()', '}', '}', 'The', 'value', 'of', 'count', 'should', 'increment', 'by', 'one', 'the', 'number', 'of', 'times', 'the', 'loop', 'runs.', 'Consider', 'the', 'cases:', 'Loop', 'runs', 'for', '100', 'times-->', 'value', 'of', 'count', 'is', '100', '(Which', 'is', 'correct', 'as', 'the', 'loop', 'runs', '100', 'times).', 'Loop', 'runs', 'for', '>510', 'times', '-->', 'Value', 'of', 'count', 'is', 'either', '508', 'OR', '510.', 'This', 'happens', 'even', 'if', 'it', 'is', '100000.', 'I', 'am', 'running', 'this', 'on', 'an', '8', 'core', 'processor', 'machine.']"
1246,21007259,"
","['I', 'made', 'a', 'small', 'program', 'to', 'benchmark', 'go', 'channel', 'throughput,', 'however', 'it', 'always', 'deadlocks,', 'I', 'tried', 'very', 'hard', 'but', 'cannot', 'understand', 'why:', 'package', 'main', 'import', '(', '""fmt""', '""runtime""', ')', 'const', 'CONCURRENCY', '=', '32', 'const', 'WORK_PER_WORKER', '=', '100', 'const', 'TOTAL_WORK', '=', 'CONCURRENCY', '*', 'WORK_PER_WORKER', 'func', 'work', '()', '{', 'sum', ':=', '0', 'for', 'i', ':=', '0', ';', 'i', '<', '10000000', ';', 'i', '++', '{', 'sum', '*=', 'i', '}', '}', 'type', 'WorkItem', 'struct', '{', 'Done', 'chan', 'int', '}', 'func', 'main', '()', '{', 'runtime.GOMAXPROCS(CONCURRENCY)', 'var', 'workQueue', '[', 'CONCURRENCY', ']', 'chan', '*', 'WorkItem', '//', 'initialize', 'workers', 'for', 'i', ':=', '0', ';', 'i', '<', 'CONCURRENCY', ';', 'i', '++', '{', 'workQueue', '[', 'i', ']', '=', 'make', '(', 'chan', '*', 'WorkItem', ')', '}', '//', 'start', 'workers', 'for', 'i', ':=', '0', ';', 'i', '<', 'CONCURRENCY', ';', 'i', '++', '{', 'go', 'func', '(', 'i', 'int', ')', '{', 'anItem', ':=', '<-', 'workQueue', '[', 'i', ']', 'work', '()', 'anItem', '.', 'Done', '<-', '1', '}(', 'i', ')', '}', 'completed', ':=', 'make', '(', 'chan', 'bool', ',', 'TOTAL_WORK', ')', 'for', 'i', ':=', '0', ';', 'i', '<', 'TOTAL_WORK', ';', 'i', '++', '{', 'go', 'func', '(', 'i', 'int', ')', '{', '//', 'send', 'work', 'to', 'queues', 'workToDo', ':=', '&', 'WorkItem', '{', 'Done', ':', 'make', '(', 'chan', 'int', ')}', 'workQueue', '[', 'i/WORK_PER_WORKER] <- workToDo //', '!!', 'DEADLOCK', '//', 'wait', 'until', 'the', 'work', 'is', 'done', '<-', 'workToDo', '.', 'Done', 'completed', '<-', 'true', '}(', 'i', ')', '}', 'fmt.Println(""Waiting"")', 'for', 'i', ':=', '0', ';', 'i', '<', 'TOTAL_WORK', ';', 'i', '++', '{', '<-', 'completed', '}', '}']"
1247,21064426,"I have a Go program that allocates lots of maps and slices. Generally a lot of usage, allocation overhead etc. I run it, it loads a lot of data in, and then I query it with a web service.

After I leave it running, when it's read in all its data and isn't doing any queries (i.e should be stable) I see memory fluctuations. Recently it's reported: 5.42 GB, 5.01 GB and 4.3 GB of real memory. That's a massive fluctuation.

I have about 150 million objects (slices hanging off the main hashtable). That's a lot of little objects. I expect a little fluctuation (although I would never expect memory to increase when no new objects are being allocated and the main thread/s is blocking on a socket).

Possible explanations are


the overhead of lots of small allocations just multiplies any natural fluctuation
some code is allocating objects (although I can't see how)
the Go GC is doing its own paging (?)
I'm using Mac OS, and it's at fault somehow


Is this amount of fluctuation normal / expected?
","['I', 'have', 'a', 'Go', 'program', 'that', 'allocates', 'lots', 'of', 'maps', 'and', 'slices.', 'Generally', 'a', 'lot', 'of', 'usage,', 'allocation', 'overhead', 'etc.', 'I', 'run', 'it,', 'it', 'loads', 'a', 'lot', 'of', 'data', 'in,', 'and', 'then', 'I', 'query', 'it', 'with', 'a', 'web', 'service.', 'After', 'I', 'leave', 'it', 'running,', 'when', ""it's"", 'read', 'in', 'all', 'its', 'data', 'and', ""isn't"", 'doing', 'any', 'queries', '(i.e', 'should', 'be', 'stable)', 'I', 'see', 'memory', 'fluctuations.', 'Recently', ""it's"", 'reported:', '5.42', 'GB,', '5.01', 'GB', 'and', '4.3', 'GB', 'of', 'real', 'memory.', ""That's"", 'a', 'massive', 'fluctuation.', 'I', 'have', 'about', '150', 'million', 'objects', '(slices', 'hanging', 'off', 'the', 'main', 'hashtable).', ""That's"", 'a', 'lot', 'of', 'little', 'objects.', 'I', 'expect', 'a', 'little', 'fluctuation', '(although', 'I', 'would', 'never', 'expect', 'memory', 'to', 'increase', 'when', 'no', 'new', 'objects', 'are', 'being', 'allocated', 'and', 'the', 'main', 'thread/s', 'is', 'blocking', 'on', 'a', 'socket).', 'Possible', 'explanations', 'are', 'the', 'overhead', 'of', 'lots', 'of', 'small', 'allocations', 'just', 'multiplies', 'any', 'natural', 'fluctuation', 'some', 'code', 'is', 'allocating', 'objects', '(although', 'I', ""can't"", 'see', 'how)', 'the', 'Go', 'GC', 'is', 'doing', 'its', 'own', 'paging', '(?)', ""I'm"", 'using', 'Mac', 'OS,', 'and', ""it's"", 'at', 'fault', 'somehow', 'Is', 'this', 'amount', 'of', 'fluctuation', 'normal', '/', 'expected?']"
1248,21201808,"Am using golang as a programming tool of choice.

What i wanted to write is a program that downloads large files with resume support utilising range requests in the http headers 
something similar to aria2c.
","['Am', 'using', 'golang', 'as', 'a', 'programming', 'tool', 'of', 'choice.', 'What', 'i', 'wanted', 'to', 'write', 'is', 'a', 'program', 'that', 'downloads', 'large', 'files', 'with', 'resume', 'support', 'utilising', 'range', 'requests', 'in', 'the', 'http', 'headers', 'something', 'similar', 'to', 'aria2c.']"
1249,21268000,"

I've seen people using a map, but that's not my case. I basically don't care about the content of foo (which is a large object), except for a few specific elements.

What is the correct approach in this case? I'm not looking for weird hacks, thus if this is the way to go, I'm fine with that.
","['There', 'are', 'a', 'few', 'questions', 'on', 'the', 'topic', 'but', 'none', 'of', 'them', 'seem', 'to', 'cover', 'my', 'case,', 'thus', ""I'm"", 'creating', 'a', 'new', 'one.', 'I', 'have', 'JSON', 'like', 'the', 'following:', '{', '""foo""', ':{', '""bar""', ':', '""1""', ',', '""baz""', ':', '""2""', '},', '""more""', ':', '""text""', '}', 'Is', 'there', 'a', 'way', 'to', 'unmarshal', 'the', 'nested', 'bar', 'property', 'and', 'assign', 'it', 'directly', 'to', 'a', 'struct', 'property', 'without', 'creating', 'a', 'nested', 'struct?', 'The', 'solution', ""I'm"", 'adopting', 'right', 'now', 'is', 'the', 'following:', 'type', 'Foo', 'struct', '{', 'More', 'String', 'json', ':', '""more""', 'Foo', 'struct', '{', 'Bar', 'string', 'json', ':', '""bar""', '}', 'json', ':', '""foo""', '//', 'FooBar', 'string', '`json:""foo.bar""`', '}', 'This', 'is', 'a', 'simplified', 'version,', 'please', 'ignore', 'the', 'verbosity.', 'As', 'you', 'can', 'see,', ""I'd"", 'like', 'to', 'be', 'able', 'to', 'parse', 'and', 'assign', 'the', 'value', 'to', '//', 'FooBar', 'string', '`json:""foo.bar""`', ""I've"", 'seen', 'people', 'using', 'a', 'map,', 'but', ""that's"", 'not', 'my', 'case.', 'I', 'basically', ""don't"", 'care', 'about', 'the', 'content', 'of', 'foo', '(which', 'is', 'a', 'large', 'object),', 'except', 'for', 'a', 'few', 'specific', 'elements.', 'What', 'is', 'the', 'correct', 'approach', 'in', 'this', 'case?', ""I'm"", 'not', 'looking', 'for', 'weird', 'hacks,', 'thus', 'if', 'this', 'is', 'the', 'way', 'to', 'go,', ""I'm"", 'fine', 'with', 'that.']"
1250,21350962,"Is there a way to get the command line arguments in go ""tests"",
When you call go test obviously your main is not run, so is there a way to process command line arguments,   

One way would be to use the flags packages and check for the command line arguments in each test or function being tested, but that is not ideal for that you need to do this in lots and lots of places, unlike the way you to it just in main when you run the application.   

EDIT: mainly to down-voters, I imagine you are downvoting the question because you think it is a wrong thing to do, and is against purity of unit-tests,  


not all tests are unit tests
it is very functional not to rely on ""ENV"" variables and actually pass the stuff as arguments in command line,
please put your opinion in the answers so that future generations can benefit,


EDIT 2: for the record I ended up putting an init() function in one of my _test files, and set the variable that is set through flags when the main is called this way.  
","[""I've"", 'seen', 'people', 'using', 'a', 'map,', 'but', ""that's"", 'not', 'my', 'case.', 'I', 'basically', ""don't"", 'care', 'about', 'the', 'content', 'of', 'foo', '(which', 'is', 'a', 'large', 'object),', 'except', 'for', 'a', 'few', 'specific', 'elements.', 'What', 'is', 'the', 'correct', 'approach', 'in', 'this', 'case?', ""I'm"", 'not', 'looking', 'for', 'weird', 'hacks,', 'thus', 'if', 'this', 'is', 'the', 'way', 'to', 'go,', ""I'm"", 'fine', 'with', 'that.']"
1251,21373558,"

From client function I am trying to send some data but unable to receive data in handleServerConnection()

my program is written in go language 
help me out 

I have referred most of the examples given in the book and stack overflow 

i am getting an empty object in handleconnection function
","['//', 'package', 'cluster', 'package', 'main', 'import', '(', '""encoding/csv""', '""encoding/json""', '""fmt""', '""io""', '""math/rand""', '""net""', '""os""', '""strconv""', '""time""', '//', '""bytes""', ')', 'const', '(', 'BROADCAST', '=', '-', '1', ')', 'var', 'outbox', ',', 'inbox', 'chan', '*', 'Envelope', 'var', 'pids', '[', '10', ']', 'int', 'var', 'ips', '[', '10', ']', 'string', 'type', 'Envelope', 'struct', '{', 'Pid', 'int', 'MsgId', 'int64', 'Msg', 'interface', '{}', '}', 'type', 'Server', 'interface', '{', 'Pid', '()', 'int', 'Peers', '()', '[]', 'int', 'Outbox', '()', 'chan', '*', 'Envelope', 'Inbox', '()', 'chan', '*', 'Envelope', '}', '/*', 'func', '(', 'envelope', 'Envelope', ')', 'Pid', '()', 'int', '{', 'return', 'envelope', '.', 'MsgId', '}', '*/', 'var', 'server', 'Envelope', 'func', '(', 'envelope', 'Envelope', ')', 'Peers', '()', '[]', 'int', '{', 'return', 'nil', '//pids', '}', 'func', '(', 'envelope', 'Envelope', ')', 'Outbox', '()', 'chan', '*', 'Envelope', '{', 'return', 'outbox', '}', 'func', '(', 'envelope', 'Envelope', ')', 'Inbox', '()', 'chan', '*', 'Envelope', '{', 'return', 'inbox', '}', 'func', 'server_', '()', '{', '//', 'listen', 'on', 'a', 'port', 'ln', ',', 'err', ':=', 'net.Listen(""tcp"", "":9999"")', '//', 'time.Sleep(time.Second', '*', '2)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'for', '{', 'c', ',', 'err', ':=', 'ln.Accept()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'continue', '}', 'else', '{', 'fmt.Println(""handle"")', 'go', 'handleServerConnection', '(', 'c', ')', '}', '}', '}', 'func', 'handleServerConnection', '(', 'c', 'net', '.', 'Conn', ')', '{', '//', 'receive', 'the', 'message', 'var', 'msg', 'Envelope', 'var', 'b', '[]', 'byte', '//', 'for{', 'c.Read(b)', '/*', 'if', 'b', '==', 'nil', '{', 'continue', '}', 'else', '{', 'break', '}', '*/', '//', '}', 'fmt.Println(b)', 'err', ':=', 'json.Unmarshal(b, &msg)', 'if', 'err', '!=', 'nil', '{', '//ERORR !!!!', 'fmt.Println(err)', '}', 'else', '{', 'fmt.Println(""Received : %+v"", msg)', '}', 'c.Close()', '}', 'func', 'client', '()', '{', '//', 'connect', 'to', 'the', 'server', 'for', 'msg', ':=', 'range', 'outbox', '{', 'c', ',', 'err', ':=', 'net.Dial(""tcp"", ""127.0.0.1:9999"")', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""error encoding the response to a join request"")', 'fmt.Println(err)', '}', 'b', ',', '_', ':=', 'json.Marshal(msg)', 'fmt.Printf(""the json: %s\\n"", b)', 'c.Write(b)', 'c.Close()', '}', 'time.Sleep(time.Second * 2)', '}', 'func', 'New', '(', 'myPid', 'int', ',', 'ConFile', 'string', ')', 'Envelope', '{', 'inbox', '=', 'make', '(', 'chan', '*', 'Envelope', ',', '100', ')', 'outbox', '=', 'make', '(', 'chan', '*', 'Envelope', ',', '100', ')', 'file', ',', 'err', ':=', 'os.Open(ConFile)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""Error:"", err)', '}', 'defer', 'file.Close()', 'reader', ':=', 'csv.NewReader(file)', 'i', ':=', '0', 'j', ':=', '0', 'for', '{', 'record', ',', 'err', ':=', 'reader.Read()', 'if', 'err', '==', 'io', '.', 'EOF', '{', 'break', '}', 'else', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""Error:"", err)', '}', 'x', ',', '_', ':=', 'strconv.Atoi(record[0])', 'pids', '[', 'i', ']', '=', 'x', 'i', '++', 'ips', '[', 'j', ']', '=', 'record', '[', '1', ']', 'j', '++', '}', 'fmt.Println(""\\n"", ips)', 'fmt.Println(""\\n"", pids)', 'MsgId', ':=', 'rand.Int63n(0x10000000)', 'server', '=', 'Envelope', '{', 'Pid', ':', 'myPid', ',', 'MsgId', ':', 'MsgId', ',', 'Msg', ':', '""Hello World :)""', '}', 'go', 'server_', '()', 'go', 'client', '()', 'var', 'input', 'string', 'fmt.Println(""\\n\\nPress enter ---\\n\\n"")', 'fmt.Scanln(&input)', 'return', 'server', '}', 'func', 'main', '()', '{', '//', 'for', 'i', ':=', '1;', 'i', '<=', '10;', 'i++', '{', 'server', ':=', 'New', '(', '12', ',', '""config.txt""', ')', 'server.Outbox()', '<-', '&', 'Envelope', '{', 'Pid', ':', 'BROADCAST', ',', 'MsgId', ':', 'server', '.', 'MsgId', ',', 'Msg', ':', '""hello there""', '}', 'select', '{', 'case', 'envelope', ':=', '<-', 'server.Inbox()', ':', 'fmt.Printf(""Received msg from %d: \'%s\'\\n"", envelope.Pid, envelope.Msg)', 'case', '<-', 'time.After(2 * time.Second)', ':', 'println', '(', '""Waited and waited. Ab thak gaya\\n""', ')', '}', '//', 'fmt.Println(server.Pid,', 'server.MsgId,', 'server.Msg', ')', '//', '}', '}', 'From', 'client', 'function', 'I', 'am', 'trying', 'to', 'send', 'some', 'data', 'but', 'unable', 'to', 'receive', 'data', 'in', 'handleServerConnection()', 'my', 'program', 'is', 'written', 'in', 'go', 'language', 'help', 'me', 'out', 'I', 'have', 'referred', 'most', 'of', 'the', 'examples', 'given', 'in', 'the', 'book', 'and', 'stack', 'overflow', 'i', 'am', 'getting', 'an', 'empty', 'object', 'in', 'handleconnection', 'function']"
1252,21460787,"

Why the difference in output between the two functions?
","['See', 'this', 'playground:', 'http://play.golang.org/p/nWHmlw1W01', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'var', 'i', '[]', 'int', '=', 'nil', 'yes', '(', 'i', ')', '// output: true', 'no', '(', 'i', ')', '// output: false', '}', 'func', 'yes', '(', 'thing', '[]', 'int', ')', '{', 'fmt.Println(thing == nil)', '}', 'func', 'no', '(', 'thing', 'interface', '{})', '{', 'fmt.Println(thing == nil)', '}', 'Why', 'the', 'difference', 'in', 'output', 'between', 'the', 'two', 'functions?']"
1253,21494035,"
","['I', 'want', 'to', 'sign', 'a', 'public', 'key', 'from', 'ascii', 'armor', 'with', 'a', 'private', 'key', 'in', 'go', 'language.For', 'that', 'I', 'developed', 'following', 'code', 'but', 'the', 'problem', 'is', 'when', 'I', 'check', 'the', 'signature', 'in', 'gpg', '--check-sigs', 'the', 'signature', 'created', 'by', 'code', 'is', 'shown', 'as', '""bad', 'Signature"".Please', 'Help', 'as', 'I', 'cant', 'figure', 'out', 'any', 'way', 'of', 'solving', 'it.I', 'have', 'already', 'postd', 'on', 'golang-nuts.I', 'am', 'just', 'learning', 'golang', 'for', 'my', 'college', 'project', 'and', 'I', 'am', 'stuck', 'here,Please', 'help.', '//', 'signer', 'package', 'main', 'import', '(', '""bytes""', '""code.google.com/p/go.crypto/openpgp""', '""code.google.com/p/go.crypto/openpgp/armor""', '""code.google.com/p/go.crypto/openpgp/packet""', '""fmt""', ')', '//', 'This', 'function', 'takes', 'asciiarmored', 'private', 'key', 'which', 'will', 'sign', 'the', 'public', 'key', '//', 'Public', 'key', 'is', 'also', 'ascii', 'armored,pripwd', 'is', 'password', 'of', 'private', 'key', 'in', 'string', '//', 'This', 'function', 'will', 'return', 'ascii', 'armored', 'signed', 'public', 'key', 'i.e.', '(pubkey+sign', 'by', 'prikey)', 'func', 'SignPubKeyPKS', '(', 'asciiPub', 'string', ',', 'asciiPri', 'string', ',', 'pripwd', 'string', ')', '(', 'asciiSignedKey', 'string', ')', '{', '//', 'get', 'Private', 'key', 'from', 'armor', '_', ',', 'priEnt', ':=', 'getPri', '(', 'asciiPri', ',', 'pripwd', ')', '//pripwd is the password todecrypt the private key', '_', ',', 'pubEnt', ':=', 'getPub', '(', 'asciiPub', ')', '//This will generate signature and add it to pubEnt', 'usrIdstring', ':=', '""""', 'for', '_', ',', 'uIds', ':=', 'range', 'pubEnt', '.', 'Identities', '{', 'usrIdstring', '=', 'uIds', '.', 'Name', '}', 'fmt.Println(usrIdstring)', 'errSign', ':=', 'pubEnt.SignIdentity(usrIdstring, &priEnt, nil)', 'if', 'errSign', '!=', 'nil', '{', 'fmt.Println(""Signing Key "", errSign.Error())', 'return', '}', 'asciiSignedKey', '=', 'PubEntToAsciiArmor', '(', 'pubEnt', ')', 'return', '}', '//', 'get', 'packet.PublicKey', 'and', 'openpgp.Entity', 'of', 'Public', 'Key', 'from', 'ascii', 'armor', 'func', 'getPub', '(', 'asciiPub', 'string', ')', '(', 'pubKey', 'packet', '.', 'PublicKey', ',', 'retEntity', 'openpgp', '.', 'Entity', ')', '{', 'read1', ':=', 'bytes.NewReader([]byte(asciiPub))', 'entityList', ',', 'errReadArm', ':=', 'openpgp.ReadArmoredKeyRing(read1)', 'if', 'errReadArm', '!=', 'nil', '{', 'fmt.Println(""Reading Pubkey "", errReadArm.Error())', 'return', '}', 'for', '_', ',', 'pubKeyEntity', ':=', 'range', 'entityList', '{', 'if', 'pubKeyEntity', '.', 'PrimaryKey', '!=', 'nil', '{', 'pubKey', '=', '*', 'pubKeyEntity', '.', 'PrimaryKey', 'retEntity', '=', '*', 'pubKeyEntity', '}', '}', 'return', '}', '//', 'get', 'packet.PrivateKEy', 'and', 'openpgp.Entity', 'of', 'Private', 'Key', 'from', 'ascii', 'armor', 'func', 'getPri', '(', 'asciiPri', 'string', ',', 'pripwd', 'string', ')', '(', 'priKey', 'packet', '.', 'PrivateKey', ',', 'priEnt', 'openpgp', '.', 'Entity', ')', '{', 'read1', ':=', 'bytes.NewReader([]byte(asciiPri))', 'entityList', ',', 'errReadArm', ':=', 'openpgp.ReadArmoredKeyRing(read1)', 'if', 'errReadArm', '!=', 'nil', '{', 'fmt.Println(""Reading PriKey "", errReadArm.Error())', 'return', '}', 'for', '_', ',', 'can_pri', ':=', 'range', 'entityList', '{', 'smPr', ':=', 'can_pri', '.', 'PrivateKey', 'retEntity', ':=', 'can_pri', 'if', 'smPr', '==', 'nil', '{', 'fmt.Println(""No Private Key"")', 'return', '}', 'priKey', '=', '*', 'smPr', 'errDecr', ':=', 'priKey.Decrypt([]byte(pripwd))', 'if', 'errDecr', '!=', 'nil', '{', 'fmt.Println(""Decrypting "", errDecr.Error())', 'return', '}', 'retEntity', '.', 'PrivateKey', '=', '&', 'priKey', 'priEnt', '=', '*', 'retEntity', '}', 'return', '}', '//', 'Create', 'ASscii', 'Armor', 'from', 'openpgp.Entity', 'func', 'PubEntToAsciiArmor', '(', 'pubEnt', 'openpgp', '.', 'Entity', ')', '(', 'asciiEntity', 'string', ')', '{', 'go', 'tWriter', ':=', 'bytes.NewBuffer(nil)', 'wr', ',', 'errEncode', ':=', 'armor.Encode(gotWriter, openpgp.PublicKeyType, nil)', 'if', 'errEncode', '!=', 'nil', '{', 'fmt.Println(""Encoding Armor "", errEncode.Error())', 'return', '}', 'errSerial', ':=', 'pubEnt.Serialize(wr)', 'if', 'errSerial', '!=', 'nil', '{', 'fmt.Println(""Serializing PubKey "", errSerial.Error())', '}', 'errClosing', ':=', 'wr.Close()', 'if', 'errClosing', '!=', 'nil', '{', 'fmt.Println(""Closing writer "", errClosing.Error())', '}', 'asciiEntity', '=', 'go', 'tWriter.String()', 'return', '}']"
1254,21527489,"

Assuming my understanding's incorrect, how can I achieve what I want in Go?

Edit
Note: 


I don't want to attach the behaviour to the struct
I'd like to keep the pointer type as the method parameter because I'm working separately on a pet project and this requires I manipulate the struct passed in before then acting on it.
In reality my Dog struct would have additional fields/members; hopefully this doesn't muddy the water further

","[""I'm"", 'trying', 'to', 'firm', 'up', 'the', 'concept', 'of', 'inheritence', 'that', 'Go', 'provides', '(rather', '""composition""', 'than', 'pure', 'inheritence,', 'perhaps).', 'However,', ""I'm"", 'failing', 'to', 'grasp', 'why', 'I', ""can't"", 'use', 'the', '""parent""', 'type', 'as', 'a', 'func', 'parameter', 'to', 'produce', 'a', 'generic', 'function', 'that', 'acts', 'on', 'the', 'parameter.', 'package', 'main', 'import', '""log""', 'type', 'Animal', 'struct', '{', 'Colour', 'string', 'Name', 'string', '}', 'type', 'Dog', 'struct', '{', 'Animal', '}', 'func', 'PrintColour', '(', 'a', '*', 'Animal', ')', '{', 'log.Printf(""%s\\n"", a.Colour)', '}', 'func', 'main', '()', '{', 'a', ':=', 'new', '(', 'Animal', ')', 'a', '.', 'Colour', '=', '""Void""', 'd', ':=', 'new', '(', 'Dog', ')', 'd', '.', 'Colour', '=', '""Black""', 'PrintColour', '(', 'a', ')', 'PrintColour', '(', 'd', ')', '}', 'Assuming', 'my', ""understanding's"", 'incorrect,', 'how', 'can', 'I', 'achieve', 'what', 'I', 'want', 'in', 'Go?', 'Edit', 'Note:', 'I', ""don't"", 'want', 'to', 'attach', 'the', 'behaviour', 'to', 'the', 'struct', ""I'd"", 'like', 'to', 'keep', 'the', 'pointer', 'type', 'as', 'the', 'method', 'parameter', 'because', ""I'm"", 'working', 'separately', 'on', 'a', 'pet', 'project', 'and', 'this', 'requires', 'I', 'manipulate', 'the', 'struct', 'passed', 'in', 'before', 'then', 'acting', 'on', 'it.', 'In', 'reality', 'my', 'Dog', 'struct', 'would', 'have', 'additional', 'fields/members;', 'hopefully', 'this', ""doesn't"", 'muddy', 'the', 'water', 'further']"
1255,21642991,"

How can I make this work?
","['I', 'am', 'connecting', 'to', 'a', 'TCP/IP', 'server', 'using', 'Go', 'code', 'similar', 'to:', 'conn', ',', 'err', ':=', 'net.Dial(""tcp"", host+"":""+strconv.Itoa(port))', 'Now', 'I', 'need', 'to', 'use', 'binary.ReadVariant', 'which', 'takes', 'an', 'io.ByteReader,', 'so', 'trying', 'to', 'write', 'code', 'like', 'this:', 'var', 'length', 'int64', 'var', 'err', 'error', 'length', ',', 'err', '=', 'binary.ReadVarint(conn)', 'Gives', 'me', 'an', 'error', 'like:', './', 'main', '.', 'go', ':', '67', ':', 'cannot', 'use', 'conn', '(', 'type', 'net', '.', 'Conn', ')', 'as', 'type', 'io', '.', 'ByteReader', 'in', 'func', 'tion', 'argument', ':', 'net', '.', 'Conn', 'does', 'not', 'implement', 'io.ByteReader (missing ReadByte method)', 'How', 'can', 'I', 'make', 'this', 'work?']"
1256,21655408,"
","['I', 'have', 'just', 'started', 'learning', 'Golang', 'and', 'would', 'like', 'to', 'list', 'months', 'in', 'order', 'for', 'a', 'options', 'in', 'an', 'html', 'select', 'tag:', 'I', 'have', 'started', 'this:', 'package', 'main', 'import', '(', '""fmt""', ')', 'var', 'months', '=', '[', '12', ']', 'string', '{', '""January""', ',', '""February""', ',', '""March""', ',', '""April""', ',', '""May""', ',', '""June""', ',', '""July""', ',', '""August""', ',', '""September""', ',', '""October""', ',', '""November""', ',', '""December""', ',', '}', 'func', 'main', '(){', 'for', 'i', ',', 'n', ':=', 'range', 'months', '{', 'fmt.Printf(""%2d: %s\\n"", i, n)', '}', '}', 'I', 'would', 'like', 'to', 'print', 'out', 'this:', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']"
1257,21862622,"I am certainly a GO newbie so I will apologize in advance. I am playing around with a GO app that imports martini for example. Every time I run the app, I have to run ""go get github.com/codegangsta/martini"". Any way to NOT have to do this? Either way, how would this work in an offline environment? I am considering GO for an app that will be offline with no internet access. 
","['I', 'am', 'certainly', 'a', 'GO', 'newbie', 'so', 'I', 'will', 'apologize', 'in', 'advance.', 'I', 'am', 'playing', 'around', 'with', 'a', 'GO', 'app', 'that', 'imports', 'martini', 'for', 'example.', 'Every', 'time', 'I', 'run', 'the', 'app,', 'I', 'have', 'to', 'run', '""go', 'get', 'github.com/codegangsta/martini"".', 'Any', 'way', 'to', 'NOT', 'have', 'to', 'do', 'this?', 'Either', 'way,', 'how', 'would', 'this', 'work', 'in', 'an', 'offline', 'environment?', 'I', 'am', 'considering', 'GO', 'for', 'an', 'app', 'that', 'will', 'be', 'offline', 'with', 'no', 'internet', 'access.']"
1258,21978883,"

in go doc ,it says long Pattern will take higher priority than short Pattern.
and i want to run something(parse id , clean path etc) before all handlers.

i don't want to give up the features of defaultmux. should i redefine a brand new route,or use http.NewServeMux()? if i use http.NewServerMux(),how should i do to add something while keeping the features? 
","['i', 'have', 'viewed', 'source', 'code', 'of', 'mux,but', 'i', 'just', 'want', 'something', 'simple', ',not', 'using', 'all', 'features.', 'i', 'wanna', 'get', 'value', 'of', '""id""', 'in', 'the', 'url', 'like', '/url/{id},setting', 'the', 'value', 'in', 'the', 'req.Form', 'and', 'clean', 'the', 'path', 'like', 'mux.', 'code', 'like', 'r', ':=', 'http.NewServeMux()', 'r.HandlerFunc(""/"",func(w http.ResponseWriter,r *http.Request)', '{', '//', 'Clean', 'path', 'to', 'canonical', 'form', 'and', 'redirect.', 'if', 'p', ':=', 'cleanPath', '(', 'req', '.', 'URL', '.', 'Path', ');', 'p', '!=', 'req', '.', 'URL', '.', 'Path', '{', 'url', ':=', '*', 'req', '.', 'URL', 'url', '.', 'Path', '=', 'p', 'p', '=', 'url.String()', '//', '根据HTTP的协议重定向', 'w.Header().Set(""Location"", p)', 'w.WriteHeader(http.StatusMovedPermanently)', 'return', '}', '//', 'some', 'code', 'check', 'the', 'url', 'parse', 'id', 'and', 'set', 'to', 'req.form', '})', '//', 'then', 'add', 'some', 'specific', 'url', 'handlers.', 'in', 'go', 'doc', ',it', 'says', 'long', 'Pattern', 'will', 'take', 'higher', 'priority', 'than', 'short', 'Pattern.', 'and', 'i', 'want', 'to', 'run', 'something(parse', 'id', ',', 'clean', 'path', 'etc)', 'before', 'all', 'handlers.', 'i', ""don't"", 'want', 'to', 'give', 'up', 'the', 'features', 'of', 'defaultmux.', 'should', 'i', 'redefine', 'a', 'brand', 'new', 'route,or', 'use', 'http.NewServeMux()?', 'if', 'i', 'use', 'http.NewServerMux(),how', 'should', 'i', 'do', 'to', 'add', 'something', 'while', 'keeping', 'the', 'features?']"
1259,22128282,"
","['I', 'want', 'to', 'create', 'a', 'function', 'to', 'receive', 'an', 'input', 'string', 'which', 'can', 'be', 'string', 'in', 'json', 'format', 'or', 'just', 'a', 'string.', 'For', 'example,', 'something', 'easy', 'like', 'following', 'function.', 'func', 'checkJson', '(', 'input', 'string', '){', 'if', '...', 'input', 'is', 'in', 'json', '...', '{', 'fmt.Println(""it\'s json!"")', '}', 'else', '{', 'fmt.Println(""it\'s normal string!"")', '}', '}']"
1260,22131865,"

Why does the author defer logging to stdout after discard the log?
","['In', 'go-nsq', 'library', '(https://github.com/bitly/go-nsq/blob/master/writer_test.go#L38),', 'I', 'found', 'the', 'following', 'code:', 'log.SetOutput(ioutil.Discard)', 'defer', 'log.SetOutput(os.Stdout)', 'Why', 'does', 'the', 'author', 'defer', 'logging', 'to', 'stdout', 'after', 'discard', 'the', 'log?']"
1261,22181660,"

Where Map has, let's say 3 (key,Value) pairs.

So my understanding is that the subroutine() function will run concurrently using all the Map[Key] values ie subroutine(Map[key1]),subroutine(Map[key2]) and subroutine(Map[key3]) will all run concurrently ?

Is my understanding of concurrent subroutines in a for loop correct?

Thanks!
","[""I'm"", 'having', 'some', 'doubts', 'on', 'my', 'understanding', 'of', 'the', 'behaviour', 'of', 'a', 'go', 'subroutine', 'in', 'a', 'for', 'loop.', 'From', 'what', 'I', 'understand,', 'when', 'we', 'have', 'a', 'for', 'loop:', 'for', 'key', ':=', 'range', 'Map', '{', 'go', 'subroutine', '(', 'Map', '[', 'key', '])', '}', 'Where', 'Map', 'has,', ""let's"", 'say', '3', '(key,Value)', 'pairs.', 'So', 'my', 'understanding', 'is', 'that', 'the', 'subroutine()', 'function', 'will', 'run', 'concurrently', 'using', 'all', 'the', 'Map[Key]', 'values', 'ie', 'subroutine(Map[key1]),subroutine(Map[key2])', 'and', 'subroutine(Map[key3])', 'will', 'all', 'run', 'concurrently', '?', 'Is', 'my', 'understanding', 'of', 'concurrent', 'subroutines', 'in', 'a', 'for', 'loop', 'correct?', 'Thanks!']"
1262,22296232,") is obviously memory inefficient because the underlying array not only needs to be allocated for the entire range, but remains allocated. does not even work, because afterwards the data formerly at index 3*1024*1024*1024 is now at index 0, whilst my goal is to keep it at the original index.

Can I allocate the slice (or its underlying array) in such a way that indices below the slice's start are not allocated, ideally not even initially?
","[""I'm"", 'trying', 'to', 'use', 'a', 'slice,', 'say', 'mySlice,', 'with', 'a', 'very', 'large', 'starting', 'index.', 'Rather', 'than', 'explicitly', 'subtracting', 'the', 'starting', 'index', 'by', 'always', 'using', 'it', 'as', 'mySlice', '[', 'index', '-', 'mySliceStartIndex', ']', ',', 'I', 'am', 'tempted', 'to', 'simply', 'define', 'the', 'slice', 'in', 'such', 'a', 'way', 'that', 'I', 'can', 'use', 'it', 'without', 'such', 'arithmetic', 'as', 'mySlice[index].', 'Can', 'this', 'be', 'done', 'without', 'allocating', 'memory', 'for', 'all', 'the', 'unused', 'low', 'indices?', 'The', 'naive', 'way', 'of', 'doing', 'this,', 'allocating', 'a', 'slice', 'and', 'then', 'reslicing', 'it', '(e.g.', 'mySlice', '=', 'mySlice', '[', '3', '*', '1024', '*', '1024', '*', '1024', ':', '4', '*', '1024', '*', '1024', '*', '1024', ']', ')', 'is', 'obviously', 'memory', 'inefficient', 'because', 'the', 'underlying', 'array', 'not', 'only', 'needs', 'to', 'be', 'allocated', 'for', 'the', 'entire', 'range,', 'but', 'remains', 'allocated.', 'does', 'not', 'even', 'work,', 'because', 'afterwards', 'the', 'data', 'formerly', 'at', 'index', '3*1024*1024*1024', 'is', 'now', 'at', 'index', '0,', 'whilst', 'my', 'goal', 'is', 'to', 'keep', 'it', 'at', 'the', 'original', 'index.', 'Can', 'I', 'allocate', 'the', 'slice', '(or', 'its', 'underlying', 'array)', 'in', 'such', 'a', 'way', 'that', 'indices', 'below', 'the', ""slice's"", 'start', 'are', 'not', 'allocated,', 'ideally', 'not', 'even', 'initially?']"
1263,22351780,"Golang provides the file package to access Cloud Storage.

The package's Create function requires the io.WriteCloser interface. However, I have not found a single sample or documentation showing how to actually save a file to Cloud Storage.

Can anybody help? Is there a higher level implementation of io.WriteCloser that would allow us to store files in Cloud Storage? Any sample code? 

We've obviously tried to Google it ourselves but found nothing and now hope for the community to help.
","['Golang', 'provides', 'the', 'file', 'package', 'to', 'access', 'Cloud', 'Storage.', 'The', ""package's"", 'Create', 'function', 'requires', 'the', 'io.WriteCloser', 'interface.', 'However,', 'I', 'have', 'not', 'found', 'a', 'single', 'sample', 'or', 'documentation', 'showing', 'how', 'to', 'actually', 'save', 'a', 'file', 'to', 'Cloud', 'Storage.', 'Can', 'anybody', 'help?', 'Is', 'there', 'a', 'higher', 'level', 'implementation', 'of', 'io.WriteCloser', 'that', 'would', 'allow', 'us', 'to', 'store', 'files', 'in', 'Cloud', 'Storage?', 'Any', 'sample', 'code?', ""We've"", 'obviously', 'tried', 'to', 'Google', 'it', 'ourselves', 'but', 'found', 'nothing', 'and', 'now', 'hope', 'for', 'the', 'community', 'to', 'help.']"
1264,22591198,". In PHP it is easy, just eval($stringToEval), but how can this be done in Go lang?
","[""I'm"", 'moving', 'part', 'of', 'my', 'application', 'from', 'PHP', 'to', 'Go.', ""I'm"", 'storing', 'some', 'pieces', 'of', 'code', 'to', 'eval', 'in', 'MySQL,', 'for', 'example:', 'checkGeo', '(', '\'{geo:[""DE"",""AU"",""NL""]}\'', ')', '&&', 'check0s', '(', '\'{os:[""android""]}\'', ')', '.', 'In', 'PHP', 'it', 'is', 'easy,', 'just', 'eval($stringToEval),', 'but', 'how', 'can', 'this', 'be', 'done', 'in', 'Go', 'lang?']"
1265,22800353,"

I am able to grab the posts and show the json, just not the comments.  I think I need to have an array of Comment structs in the Post struct.  Just not sure how to tie it all together, particularly the scanning of the rows.

An example showing outputting json from a relationship like this would be great.
","['Still', 'learning', 'Go.', 'If', 'I', 'have', 'a', 'posts', 'and', 'comments', 'table', 'relationship', 'in', 'a', 'mysqp/pg', 'database', 'eg', 'Post', 'id', ',', 'title', 'Comments', 'id', ',', 'post_id', ',', 'comment', ""I'd"", 'like', 'to', 'have', 'a', 'json', 'representation', 'of', 'this:', '{', 'id', ':', '1', 'title', ':', '""A blog post""', 'comments', ':', '[', '{', 'id', ':', '1', ',', 'comment', ':', '""This is comment 1""', '},', '{', 'id', ':', '2', ',', 'comment', ':', '""This is comment 2""', '}', ']', '}', 'I', 'am', 'able', 'to', 'grab', 'the', 'posts', 'and', 'show', 'the', 'json,', 'just', 'not', 'the', 'comments.', 'I', 'think', 'I', 'need', 'to', 'have', 'an', 'array', 'of', 'Comment', 'structs', 'in', 'the', 'Post', 'struct.', 'Just', 'not', 'sure', 'how', 'to', 'tie', 'it', 'all', 'together,', 'particularly', 'the', 'scanning', 'of', 'the', 'rows.', 'An', 'example', 'showing', 'outputting', 'json', 'from', 'a', 'relationship', 'like', 'this', 'would', 'be', 'great.']"
1266,22824917,"

Why is this an error? Is there some way to instruct the compiler to allow such code?
","['I', 'am', 'new', 'to', 'Go,', 'and', 'while', 'attempting', 'to', 'remove', 'some', 'duplicate', 'code', 'across', 'switch', 'statements', 'I', 'added', 'a', 'case', 'with', 'fallthrough', 'like', 'so:', 'i', ':=', '1', 'switch', 'i', '{', 'case', '0', ',', '1', ':', 'fmt.Println(""common code"")', 'fallthrough', 'case', '0', ':', 'fmt.Println(""aux for 0"")', 'case', '1', ':', 'fmt.Println(""aux for 1"")', 'default', ':', 'fmt.Println(""other number"")', '}', 'However,', 'I', 'received', 'an', 'error', 'about', 'the', 'duplicate', 'cases', 'such', 'as:', 'prog', '.', 'go', ':', '13', ':', 'duplicate', 'case', '0', 'in', 'switch', 'previous', 'case', 'at', 'prog', '.', 'go', ':', '10', 'prog', '.', 'go', ':', '15', ':', 'duplicate', 'case', '1', 'in', 'switch', 'previous', 'case', 'at', 'prog', '.', 'go', ':', '10', 'Why', 'is', 'this', 'an', 'error?', 'Is', 'there', 'some', 'way', 'to', 'instruct', 'the', 'compiler', 'to', 'allow', 'such', 'code?']"
1267,22881549,"

Does it instantly frees up memory or does it frees memory after garbage collector is run. 
If it frees up memory after garbage collector is run, Does running runtime.GC() will clean up the memory instantly.

Also is runtime.GC() resource hungry ? or Its okay to run runtime.GC() after every delete() function

Update 2:
Forget what my program does (basically update 1)  
Check this link http://play.golang.org/p/Wb8-4qWyf4 
There is a subroutine to add to a Map every 10 Microsecond 
There is a subroutine to delete from map every 1 Microsecond (10 times faster that adding) 
Run this program in your local machine, you will find that its keeps on occupying more and more RAM slowly. (Slowly because I added a sleep time, otherwise computer will hang)


Update 1

My program fetches 5000 rows of data from database every minute and stores it in a map called datastore.
There are 100 subroutines running which processes each rows from datastore. It takes much time to process one row (less than a second)
If data is successfully processed it is deleted ""delete()"" from datastore, but within next minute next 5000 is fetched and added to datastore.
I am keeping maximum of 20,000 rows in datastore. Which is not much (200 MB at max) 
After processing millions of rows, application start taking 100% of RAM and gets Killed by kernal at the end.
It should not happen if delete() was clearing the memory instantly.
","['I', 'have', 'a', 'map', 'myMap', ':=', 'map', '[', 'string', ']', 'string', 'myMap', '[', ""'hello'"", ']', '=', ""'world'"", 'myMap', '[', ""'foo'"", ']', '=', ""'bar'"", 'When', 'I', 'delete', 'an', 'element', 'from', 'myMap', 'like,', 'delete', '(', 'myMap', '[', ""'hello'"", '])', 'Does', 'it', 'instantly', 'frees', 'up', 'memory', 'or', 'does', 'it', 'frees', 'memory', 'after', 'garbage', 'collector', 'is', 'run.', 'If', 'it', 'frees', 'up', 'memory', 'after', 'garbage', 'collector', 'is', 'run,', 'Does', 'running', 'runtime.GC()', 'will', 'clean', 'up', 'the', 'memory', 'instantly.', 'Also', 'is', 'runtime.GC()', 'resource', 'hungry', '?', 'or', 'Its', 'okay', 'to', 'run', 'runtime.GC()', 'after', 'every', 'delete()', 'function', 'Update', '2:', 'Forget', 'what', 'my', 'program', 'does', '(basically', 'update', '1)', 'Check', 'this', 'link', 'http://play.golang.org/p/Wb8-4qWyf4', 'There', 'is', 'a', 'subroutine', 'to', 'add', 'to', 'a', 'Map', 'every', '10', 'Microsecond', 'There', 'is', 'a', 'subroutine', 'to', 'delete', 'from', 'map', 'every', '1', 'Microsecond', '(10', 'times', 'faster', 'that', 'adding)', 'Run', 'this', 'program', 'in', 'your', 'local', 'machine,', 'you', 'will', 'find', 'that', 'its', 'keeps', 'on', 'occupying', 'more', 'and', 'more', 'RAM', 'slowly.', '(Slowly', 'because', 'I', 'added', 'a', 'sleep', 'time,', 'otherwise', 'computer', 'will', 'hang)', 'Update', '1', 'My', 'program', 'fetches', '5000', 'rows', 'of', 'data', 'from', 'database', 'every', 'minute', 'and', 'stores', 'it', 'in', 'a', 'map', 'called', 'datastore.', 'There', 'are', '100', 'subroutines', 'running', 'which', 'processes', 'each', 'rows', 'from', 'datastore.', 'It', 'takes', 'much', 'time', 'to', 'process', 'one', 'row', '(less', 'than', 'a', 'second)', 'If', 'data', 'is', 'successfully', 'processed', 'it', 'is', 'deleted', '""delete()""', 'from', 'datastore,', 'but', 'within', 'next', 'minute', 'next', '5000', 'is', 'fetched', 'and', 'added', 'to', 'datastore.', 'I', 'am', 'keeping', 'maximum', 'of', '20,000', 'rows', 'in', 'datastore.', 'Which', 'is', 'not', 'much', '(200', 'MB', 'at', 'max)', 'After', 'processing', 'millions', 'of', 'rows,', 'application', 'start', 'taking', '100%', 'of', 'RAM', 'and', 'gets', 'Killed', 'by', 'kernal', 'at', 'the', 'end.', 'It', 'should', 'not', 'happen', 'if', 'delete()', 'was', 'clearing', 'the', 'memory', 'instantly.']"
1268,22882934,"
","['It', 'seems', 'that', 'the', '""complex""', '(getC)', 'function', 'is', 'blocked.', 'I', 'assume', 'the', 'channel', 'is', 'destroyed', 'once', 'it', 'is', 'read', 'therefore', ""I'm"", 'wondering', 'how', 'can', 'I', 'share', 'the', 'sC', 'channel', 'with', 'both', 'getC', 'function', 'and', 'the', 'main', 'function', 'without', 'get', 'into', 'deadlock', '(', 'current', 'snippet', ')', 'package', 'main', 'func', 'main', '()', '{', '//', 'simple', 'function', 'and', 'complex', 'function/channel', 'sC', ':=', 'make', '(', 'chan', 'string', ')', 'go', 'getS', '(', 'sC', ')', 'cC', ':=', 'make', '(', 'chan', 'string', ')', 'go', 'getC', '(', 'sC', ',', 'cC', ')', '//', 'collect', 'the', 'functions', 'result', 's', ':=', '<-', 'sC', '//', 'do', 'something', 'with', '`s`.', 'We', 'print', 'but', 'we', 'may', 'want', 'to', 'use', 'it', 'in', 'a', '`func(s)`', 'print', '(', 's', ')', '//', 'after', 'a', 'while', 'we', 'do', 'soemthing', 'with', '`c`', 'c', ':=', '<-', 'cC', 'print', '(', 'c', ')', '}', 'func', 'getS', '(', 'sC', 'chan', 'string', ')', '{', 's', ':=', '"" simple completed ""', 'sC', '<-', 's', '}', 'func', 'getC', '(', 'sC', 'chan', 'string', ',', 'cC', 'chan', 'string', ')', '{', '//', 'we', 'do', 'some', 'complex', 'stuff', 'print', '(', '""complex is not complicated\\n""', ')', '//', 'Now', 'we', 'need', 'the', 'simple', 'value', 'so', 'we', 'try', 'wait', 'for', 'the', 's', 'channel.', 's', ':=', '<-', 'sC', 'c', ':=', 's', '+', '"" more ""', 'cC', '<-', 'c', '//send complex value', '}']"
1269,22960592,"

My question: How do I set up slot (event handler) that takes parameters using gtk.go.Connect()?
","['I', 'am', 'using', 'GTK', 'bindings', 'for', 'Go.', 'Trying', 'to', 'connect', 'a', 'gtk.RadioButton', 'toggle', 'signal', 'to', 'a', 'function.', 'This', 'code', 'works', 'fine:', '...', 'radioButton.Connect(""toggled"", doRadioToggle)', 'func', 'doRadioToggle', '()', '{', 'fmt.Println(""toggled"")', '}', '...', 'When', 'radioButton', 'is', 'toggled,', 'doRadioToggle', 'is', 'called', '-', 'Good.', 'But', 'I', 'want', 'to', 'connect', 'to', 'a', 'function', 'that', 'takes', 'a', 'parameter,', 'for', 'example:', 'func', 'doRadioToggle', '(', 'button', '*', 'gtk', '.', 'RadioButton', ')', '{', 'fmt.Println(button.GetState())', '}', 'The', 'gtk.go.Connect()', 'function', 'has', 'this', 'signature:', 'func', '(', 'v', '*', 'Widget', ')', 'Connect', '(', 's', 'string', ',', 'f', 'interface', '{},', 'datas', '...', 'interface', '{})', 'Based', 'on', 'what', 'I', 'know', 'from', 'gtkmm,', 'I', 'tried', 'code', 'like', 'this', '(the', 'go', 'binding', 'has', 'apparently', 'greatly', 'simplified', 'the', 'call', 'to', 'connect())', 'radioButton.Connect(""toggled"", doRadioToggle, radioButton)', 'The', 'third', 'argument', 'passed', 'inconnect()', '-', 'radioButton', '-', 'corresponding', 'todatasin', 'gtk.Connect(s string, f interface{}, datas ...interface{})', 'which', 'I', 'understood', 'to', 'mean', 'data', 'arguments', 'to', 'be', 'passed', 'to', 'the', 'slot.', 'But', 'with', 'this', 'code,', 'the', 'doRadioToggle()', 'handler', 'never', 'gets', 'called,', 'and', 'I', 'immediately', 'exit', 'with', 'a', 'panic:', 'panic', ':', 'reflect', ':', 'Call', 'using', '*', 'glib', '.', 'CallbackContext', 'as', 'type', '*', 'gtk', '.', 'RadioButton', 'My', 'question:', 'How', 'do', 'I', 'set', 'up', 'slot', '(event', 'handler)', 'that', 'takes', 'parameters', 'using', 'gtk.go.Connect()?']"
1270,23009221,"

I cannot find any document for this kind of conversion and if it's possible, please suggest.
If not, please suggest some other good way to do this. Thanks!
","['I', 'am', 'writing', 'a', 'library', 'named', '""GoRequest""', 'which', 'wraps', 'around', 'net/http', 'package', 'and', 'is', 'meant', 'for', 'making', 'an', 'easy', 'http', 'client.', 'Now,', 'I', 'am', 'having', 'a', 'problem', 'with', 'function', 'conversion', 'which', 'has', 'similar', 'types', 'as', 'its', 'parameters.', 'Here', 'is', 'my', 'problem', 'snippet.', 'type', 'Request', '*', 'http', '.', 'Request', 'type', 'Response', '*', 'http', '.', 'Response', 'func', '(', 's', '*', 'SuperAgent', ')', 'RedirectPolicy', '(', 'policy', 'func', '(', 'req', 'Request', ',', 'via', '[]', 'Request', ')', 'error', ')', '*', 'SuperAgent', '{', 's', '.', 'Client', '.', 'CheckRedirect', '=', 'policy', 'return', 's', '}', 's.Client.CheckRedirect', 'is', 'a', 'member', 'in', 'http.Client', 'struct', 'and', 'should', 'receive', 'func(req', '*http.Request,', 'via', '[]*http.Request)', 'error', 'As', 'you', 'might', 'see,', 'I', 'want', 'to', 'convert', 'func', '(', 'req', 'Request', ',', 'via', '[]', 'Request', ')', 'error', '-->', 'func', '(', 'req', '*', 'http', '.', 'Request', ',', 'via', '[]*', 'http', '.', 'Request', ')', 'which', 'has', 'similar', 'types', 'of', 'parameters.', 'But', 'it', 'returns', 'me', 'an', 'error:', './', 'main', '.', 'go', ':', '142', ':', 'cannot', 'use', 'policy', '(', 'type', 'func', '(', 'Request', ',', '[]', 'Request', ')', 'error', ')', 'as', 'type', 'func', '(*', 'http', '.', 'Request', ',', '[]*', 'http', '.', 'Request', ')', 'error', 'in', 'assignment', 'I', 'cannot', 'find', 'any', 'document', 'for', 'this', 'kind', 'of', 'conversion', 'and', 'if', ""it's"", 'possible,', 'please', 'suggest.', 'If', 'not,', 'please', 'suggest', 'some', 'other', 'good', 'way', 'to', 'do', 'this.', 'Thanks!']"
1271,23025694,"Is there no XOR operator for booleans in golang?

I was trying to do something like b1^b2 but it said it wasn't defined for booleans.
","['I', 'cannot', 'find', 'any', 'document', 'for', 'this', 'kind', 'of', 'conversion', 'and', 'if', ""it's"", 'possible,', 'please', 'suggest.', 'If', 'not,', 'please', 'suggest', 'some', 'other', 'good', 'way', 'to', 'do', 'this.', 'Thanks!']"
1272,23144556,"

works as long as i build from my library, but as soon as I want to build from another project the relative path is from that project and not from my library, so it fails.
","['I', 'am', 'writing', 'a', 'Go', 'wrapper', 'for', 'a', 'C', 'library', 'in', 'Go.', 'The', 'problem', 'is,', 'that', 'the', 'C', 'library', 'is', 'not', 'available', 'on', 'many', 'Linux', 'distributions,', 'so', 'I', 'want', 'a', 'solution', 'where', 'i', '""go', 'get', 'github.com/me/mylibrary""', 'does', 'not', 'require', 'anybody', 'to', 'have', 'the', 'library', 'installed.', 'One', 'solution', 'would', 'be', 'to', 'just', 'add', 'the', 'source', 'of', 'the', 'library', 'into', 'a', 'sub', 'directory.', 'Then', 'when', 'my', 'project', 'is', 'build', 'with', 'go', 'get', 'I', 'need', 'to', 'automatically', 'build', 'this', 'library,', 'too.', 'But', 'I', 'have', 'no', 'idea', 'how', 'I', 'can', 'automate', 'this.', 'Alternatively', 'I', 'could', 'have', 'a', 'script', 'that', 'downloads', 'the', 'source,', 'extracts', 'and', 'builds', 'it', 'But', 'I', 'have', 'no', 'Idea', 'how', 'to', 'connect', 'these', 'build', 'steps', 'with', 'the', 'go', 'build', 'tool.', 'linking', 'a', 'static', 'library', 'is', 'also', 'not', 'the', 'easiest.', 'cgo', 'linux', 'LDFLAGS', ':', './', 'MyLib/lib/libMyLib.a', '-', 'lstdc', '++', '-', 'lm', '-', 'lX11', 'works', 'as', 'long', 'as', 'i', 'build', 'from', 'my', 'library,', 'but', 'as', 'soon', 'as', 'I', 'want', 'to', 'build', 'from', 'another', 'project', 'the', 'relative', 'path', 'is', 'from', 'that', 'project', 'and', 'not', 'from', 'my', 'library,', 'so', 'it', 'fails.']"
1273,23211648,",  this MyStruct is not a pointer, and the changes are lost as soon at the function exits. But making it this *MyStruct would not compile. Is there any workaround?
","['I', 'am', 'trying', 'to', 'make', 'something', 'real', 'simple', 'on', 'Go:', 'to', 'have', 'an', 'interface', 'with', 'getter', 'and', 'setter', 'methods.', 'And', 'it', 'seems', 'setter', 'methods', 'are', 'not', 'allowed.', 'Given', 'this', 'code:', 'package', 'main', 'import', '""fmt""', 'type', 'MyInterfacer', 'interface', '{', 'Get', '()', 'int', 'Set', '(', 'i', 'int', ')', '}', 'type', 'MyStruct', 'struct', '{', 'data', 'int', '}', 'func', '(', 'this', 'MyStruct', ')', 'Get', '()', 'int', '{', 'return', 'this', '.', 'data', '}', 'func', '(', 'this', 'MyStruct', ')', 'Set', '(', 'i', 'int', ')', '{', 'this', '.', 'data', '=', 'i', '}', 'func', 'main', '()', '{', 's', ':=', 'MyStruct', '{', '123', '}', 'fmt.Println(s.Get())', 's.Set(456)', 'fmt.Println(s.Get())', 'var', 'mi', 'MyInterfacer', '=', 's', 'mi.Set(789)', 'fmt.Println(mi.Get())', '}', 'Set', 'method', 'does', 'not', 'work,', 'because', 'in', 'func', '(', 'this', 'MyStruct', ')', 'Set', '(', 'i', 'int', ')', ',', 'this', 'MyStruct', 'is', 'not', 'a', 'pointer,', 'and', 'the', 'changes', 'are', 'lost', 'as', 'soon', 'at', 'the', 'function', 'exits.', 'But', 'making', 'it', 'this', '*MyStruct', 'would', 'not', 'compile.', 'Is', 'there', 'any', 'workaround?']"
1274,23252387,"Edit: This question is moot.  I misread the date on the commit, it is included in existing versions of the Go tools.  Thanks, James!

It seems that the upcoming release of Go (1.3) will allow non-Go threads to call CGO callbacks.

I'm wondering what people have typically done to get around this restriction to date.

That is, I have a third party library that creates threads on its own, and I would like to get some information from those threads into the Go code.

Some sort of a handoff mechanism from a C thread to a Go thread on the ""C"" side of the code?  Some way to get a message onto a queue without calling into Go?  Other ideas?
","['Edit:', 'This', 'question', 'is', 'moot.', 'I', 'misread', 'the', 'date', 'on', 'the', 'commit,', 'it', 'is', 'included', 'in', 'existing', 'versions', 'of', 'the', 'Go', 'tools.', 'Thanks,', 'James!', 'It', 'seems', 'that', 'the', 'upcoming', 'release', 'of', 'Go', '(1.3)', 'will', 'allow', 'non-Go', 'threads', 'to', 'call', 'CGO', 'callbacks.', ""I'm"", 'wondering', 'what', 'people', 'have', 'typically', 'done', 'to', 'get', 'around', 'this', 'restriction', 'to', 'date.', 'That', 'is,', 'I', 'have', 'a', 'third', 'party', 'library', 'that', 'creates', 'threads', 'on', 'its', 'own,', 'and', 'I', 'would', 'like', 'to', 'get', 'some', 'information', 'from', 'those', 'threads', 'into', 'the', 'Go', 'code.', 'Some', 'sort', 'of', 'a', 'handoff', 'mechanism', 'from', 'a', 'C', 'thread', 'to', 'a', 'Go', 'thread', 'on', 'the', '""C""', 'side', 'of', 'the', 'code?', 'Some', 'way', 'to', 'get', 'a', 'message', 'onto', 'a', 'queue', 'without', 'calling', 'into', 'Go?', 'Other', 'ideas?']"
1275,23255748,"

(This snippet runs fine, and is my current solution to the problem)

... the compiler will complain that module is shadowed if instead of return module there is just return. This is because module was declared (a second time) along with err, which has to be declared as it doesn't exist yet in this scope.

Possible Solutions


Do as I have done and explicitly name the return variable. While this isn't a terrible solution, I feel as though there should be a way to arrange the code so that it runs as it should with a naked return. Others have commented that this explicit return leads to 'code smell'.
Add a var err error at the beginning and use a multiple assignment rather than declaration. Probably a better solution, but I would prefer to use implicit assignment where possible for the sake of consistency and to reduce unnecessary lines.
Use a temporary moduleT variable then assign module = moduleT... this just feels messy and redundant.


While I can get the compiled result I'm looking for, I'm hoping someone can suggest a clear, idiomatic way of writing this.
","['Normal', 'Situation', 'When', 'writing', 'a', 'function', 'with', 'a', 'named', 'return', 'value,', 'you', 'can', 'typically', 'use', 'naked', 'returns', '(whether', 'or', 'not', 'you', 'should', 'is', 'a', 'separate', 'discussion).', 'They', 'might', 'look', 'something', 'like', 'the', 'following:', 'func', 'add', '(', 'x', ',', 'y', 'int', ')', '(', 'z', 'int', ')', '{', 'z', '=', 'x', '+', 'y', 'return', '}', 'return', 'here', 'meaning', 'the', 'same', 'as', 'return', 'z', 'Problematic', 'Situation', 'However', 'with', 'the', 'abridged', 'snippet', 'below...', 'func', 'loadModule', '(', 'moduleName', ',', 'fileRoot', 'string', ')', '(', 'module', '[]', 'byte', ')', '{', 'if', 'strings.HasSuffix(moduleName, "".md"")', '{', 'module', ',', 'err', ':=', 'readConvertMDFile', '(', 'fileRoot', '+', '""htdocs/md/""', '+', 'moduleName', ')', 'if', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', 'return', 'module', '}', 'else', '{', 'module', '=', '[]', 'byte', '{}', 'return', '}', '}', '(This', 'snippet', 'runs', 'fine,', 'and', 'is', 'my', 'current', 'solution', 'to', 'the', 'problem)', '...', 'the', 'compiler', 'will', 'complain', 'that', 'module', 'is', 'shadowed', 'if', 'instead', 'of', 'return', 'module', 'there', 'is', 'just', 'return.', 'This', 'is', 'because', 'module', 'was', 'declared', '(a', 'second', 'time)', 'along', 'with', 'err,', 'which', 'has', 'to', 'be', 'declared', 'as', 'it', ""doesn't"", 'exist', 'yet', 'in', 'this', 'scope.', 'Possible', 'Solutions', 'Do', 'as', 'I', 'have', 'done', 'and', 'explicitly', 'name', 'the', 'return', 'variable.', 'While', 'this', ""isn't"", 'a', 'terrible', 'solution,', 'I', 'feel', 'as', 'though', 'there', 'should', 'be', 'a', 'way', 'to', 'arrange', 'the', 'code', 'so', 'that', 'it', 'runs', 'as', 'it', 'should', 'with', 'a', 'naked', 'return.', 'Others', 'have', 'commented', 'that', 'this', 'explicit', 'return', 'leads', 'to', ""'code"", ""smell'."", 'Add', 'a', 'var', 'err', 'error', 'at', 'the', 'beginning', 'and', 'use', 'a', 'multiple', 'assignment', 'rather', 'than', 'declaration.', 'Probably', 'a', 'better', 'solution,', 'but', 'I', 'would', 'prefer', 'to', 'use', 'implicit', 'assignment', 'where', 'possible', 'for', 'the', 'sake', 'of', 'consistency', 'and', 'to', 'reduce', 'unnecessary', 'lines.', 'Use', 'a', 'temporary', 'moduleT', 'variable', 'then', 'assign', 'module', '=', 'moduleT...', 'this', 'just', 'feels', 'messy', 'and', 'redundant.', 'While', 'I', 'can', 'get', 'the', 'compiled', 'result', ""I'm"", 'looking', 'for,', ""I'm"", 'hoping', 'someone', 'can', 'suggest', 'a', 'clear,', 'idiomatic', 'way', 'of', 'writing', 'this.']"
1276,23561379,"
","['I', 'need', 'to', 'download', 'an', 'image', 'and', 'upload', 'it', 'on', 'another', 'service.', 'Is', 'it', 'possible', 'to', 'upload', 'it', 'without', 'to', 'save', 'it', 'on', 'disk', '?', 'I', 'checked', 'the', 'go', 'docs', 'but', 'I', ""couldn't"", 'find', 'any', 'straightforward', 'method', 'not', 'even', 'to', 'upload/post', 'multi', 'part', 'from', 'disk.', 'So', 'far', 'I', 'have', 'this', 'non-working', 'code', 'func', 'upf', '(', 'file', '[]', 'byte', ')', '(', 'url', 'string', ',', 'err', 'error', ')', '{', 'URL', ':=', '""http:///max.com/upimg""', 'b', ':=', 'bytes', '.', 'Buffer', 'writer', ':=', 'multipart.NewWriter(b)', 'part', ',', 'err', ':=', 'writer.CreateFormField(file)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'err', '=', 'writer.Close()', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'http.NewRequest(""POST"", URL, b)', '}']"
1277,23656621,"



The only difference being that in the final line, I'm using a fixed 5 and on the non-working one, I'm using the len(test_scores) call.

Len returns an integer as well, so what's up?
","[""I'm"", 'trying', 'to', 'create', 'random', 'grades', 'and', 'adding', 'them', 'to', 'a', 'test_scores', 'array.', 'Then', 'calculate', 'the', 'average.', 'This', 'program:', 'package', 'main', 'import', '(', '""fmt""', '""math/rand""', ')', 'func', 'main', '()', '{', 'i', ':=', '0', 'var', 'test_scores', '[', '5', ']', 'float64', 'for', 'i', '<', 'len', '(', 'test_scores', ')', '{', 'test_scores', '[', 'i', ']', '=', 'rand.Float64()', 'i', '++', '}', 'fmt.Println(test_scores)', 'var', 'total', 'float64', '=', '0', 'i', '=', '0', 'for', 'i', '<', 'len', '(', 'test_scores', ')', '{', 'total', '+=', 'test_scores', '[', 'i', ']', 'i', '++', '}', 'fmt.Println(total)', 'fmt.Println(total / len(test_scores))', '}', 'produces:', 'main', '.', 'go', ':', '24', ':', 'invalid', 'operation', ':', 'total', '/', '5', '(', 'mismatched', 'type', 's', 'float64', 'and', 'int', ')', 'This', 'one', 'works', 'fine:', 'package', 'main', 'import', '(', '""fmt""', '""math/rand""', ')', 'func', 'main', '()', '{', 'i', ':=', '0', 'var', 'test_scores', '[', '5', ']', 'float64', 'for', 'i', '<', 'len', '(', 'test_scores', ')', '{', 'test_scores', '[', 'i', ']', '=', 'rand.Float64()', 'i', '++', '}', 'fmt.Println(test_scores)', 'var', 'total', 'float64', '=', '0', 'i', '=', '0', 'for', 'i', '<', 'len', '(', 'test_scores', ')', '{', 'total', '+=', 'test_scores', '[', 'i', ']', 'i', '++', '}', 'fmt.Println(total)', 'fmt.Println(total / 5)', '}', 'The', 'only', 'difference', 'being', 'that', 'in', 'the', 'final', 'line,', ""I'm"", 'using', 'a', 'fixed', '5', 'and', 'on', 'the', 'non-working', 'one,', ""I'm"", 'using', 'the', 'len(test_scores)', 'call.', 'Len', 'returns', 'an', 'integer', 'as', 'well,', 'so', ""what's"", 'up?']"
1278,23664069,"According to this article, the app-engine front-end and the playground back-end communicate through RPC calls. Each one of app-engine front-end instance and playground instance can be created to support scaling.



I am asking myself what is/are the patterns (solutions) to load balance works between front-end request and back-end instance while keeping RPC.

One solution may be to use one global working queue where tasks are puts inside it with a 'Reply-To' header. This header should point to a per front-end instance queue where responses are put. Something like the following schema (from RabbitMQ tutorial) with rpc_queue shared between back-end instances :


I am not sure this would be a good way to do especially the fact that if the shared queue is offline, the whole system fail (but how to take care of this?).

Thank you.
","['According', 'to', 'this', 'article,', 'the', 'app-engine', 'front-end', 'and', 'the', 'playground', 'back-end', 'communicate', 'through', 'RPC', 'calls.', 'Each', 'one', 'of', 'app-engine', 'front-end', 'instance', 'and', 'playground', 'instance', 'can', 'be', 'created', 'to', 'support', 'scaling.', 'I', 'am', 'asking', 'myself', 'what', 'is/are', 'the', 'patterns', '(solutions)', 'to', 'load', 'balance', 'works', 'between', 'front-end', 'request', 'and', 'back-end', 'instance', 'while', 'keeping', 'RPC.', 'One', 'solution', 'may', 'be', 'to', 'use', 'one', 'global', 'working', 'queue', 'where', 'tasks', 'are', 'puts', 'inside', 'it', 'with', 'a', ""'Reply-To'"", 'header.', 'This', 'header', 'should', 'point', 'to', 'a', 'per', 'front-end', 'instance', 'queue', 'where', 'responses', 'are', 'put.', 'Something', 'like', 'the', 'following', 'schema', '(from', 'RabbitMQ', 'tutorial)', 'with', 'rpc_queue', 'shared', 'between', 'back-end', 'instances', ':', 'I', 'am', 'not', 'sure', 'this', 'would', 'be', 'a', 'good', 'way', 'to', 'do', 'especially', 'the', 'fact', 'that', 'if', 'the', 'shared', 'queue', 'is', 'offline,', 'the', 'whole', 'system', 'fail', '(but', 'how', 'to', 'take', 'care', 'of', 'this?).', 'Thank', 'you.']"
1279,23755985,"

but this returns a null from the datastore as if it weren't any entity that matches the filter. But there is an entity that has that phone (among others).
","['I', ""can't"", 'find', 'how', 'to', 'work', 'with', 'multiple', 'valued', 'properties', 'on', 'go,', 'in', 'my', 'case', 'I', 'have', 'defined', 'the', 'next', 'struct:', 'type', 'trans', 'struct', '{', 'Phone', '[]', 'string', 'datastore', ':', '""phone""', 'Name', 'string', 'datastore', ':', '""name,noindex""', 'Manager', 'string', 'datastore', ':', '""manager,noindex""', 'Mail', 'string', 'datastore', ':', '""email,noindex""', '}', 'but', 'I', 'want', 'Phone', 'to', 'be', 'multivalued', 'and', 'I', ""don't"", 'know', 'how', 'to', 'do', 'it', ':(', 'What', 'I', 'want', 'to', 'get', 'is', 'to', 'be', 'able', 'to', 'filter', 'on', 'the', 'multivalued', 'property', 'like', 'this:', 'datastore.NewQuery(""trans"").Filter(""phone ="", ""+33699999999"").GetAll(c, &mtrans)', 'but', 'this', 'returns', 'a', 'null', 'from', 'the', 'datastore', 'as', 'if', 'it', ""weren't"", 'any', 'entity', 'that', 'matches', 'the', 'filter.', 'But', 'there', 'is', 'an', 'entity', 'that', 'has', 'that', 'phone', '(among', 'others).']"
1280,24197011,"

I initially got the Unzip function from https://gist.github.com/hnaohiro/4572580, but upon further inspection, the use of defer in the gist author's function seemed wrong as the file would only be closed after the Unzip() function returned which is too late becuase then 18000 file descriptors will be open. ;) 

I replaced the deferred Closes with explicit Close() as shown above, but am still getting the same ""too many open files"" error. Is there a problem with my modified Unzip function?

UPDATE # 2
Oops, I was running this on Heroku and was pushing to the wrong app with my changes this entire time. Lesson learned: verify target app in heroku toolbelt.

Unzip code from https://gist.github.com/hnaohiro/4572580 does not work as it does not close files until all files processed. 

My unzip code with explicit close above works and so does the defer version in @peterSO's answer. 
","['I', 'am', 'going', 'through', 'a', 'list', 'of', 'files', 'and', 'Unmarshalling', 'the', 'xml', 'data', 'in', 'them', 'into', 'an', 'array', 'of', 'structs', 'rArray.', 'I', 'intend', 'to', 'process', 'about', '18000', 'files.', 'When', 'I', 'get', 'to', 'about', '1300', 'files', 'processed,', 'the', 'program', 'panics', 'and', 'says', 'that', 'too', 'many', 'files', 'are', 'open.', 'If', 'I', 'limit', 'the', 'amount', 'of', 'files', 'processed', 'to', 'a', 'safe', 'amount', 'of', '1000,', 'the', 'program', 'does', 'not', 'crash.', 'As', 'seen', 'below,', 'I', 'am', 'using', 'ioutil.ReadFile', 'to', 'read', 'the', 'file', 'data.', 'for', '_', ',', 'f', ':=', 'range', 'files', '{', 'func', '()', '{', 'data', ',', 'err', ':=', 'ioutil.ReadFile(""./"" + recordDir + ""/"" + f.Name())', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""error reading %v"", err)', 'return', '}', 'else', '{', 'if', '(', 'strings.Contains(filepath.Ext(f.Name()), ""xml""))', '{', '//', 'unmarshal', 'data', 'and', 'put', 'into', 'struct', 'array', 'err', '=', 'xml.Unmarshal([]byte(data), &rArray[a])', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""error decoding %v: %v"",f.Name(), err)', 'return', '}', '}', '}', '}()', '}', 'I', 'am', 'not', 'sure', 'if', 'Go', 'is', 'using', 'too', 'many', 'file', 'descriptors', 'or', 'not', 'closing', 'the', 'files', 'fast', 'enough.', 'After', 'reading', 'https://groups.google.com/forum/#!topic/golang-nuts/7yXXjgcOikM', 'and', 'viewing', 'the', 'ioutil', 'source', 'in', 'http://golang.org/src/pkg/io/ioutil/ioutil.go,', 'the', 'code', 'for', 'ioutil.ReadFile', 'shows', 'that', 'it', 'uses', 'defer', 'to', 'close', 'the', 'file.', 'defer', 'runs', 'when', 'calling', 'function', 'is', 'returned', 'and', 'ReadFile()', 'is', 'the', 'calling', 'function.', 'Am', 'I', 'correct', 'in', 'this', 'understanding?', 'I', 'also', 'tried', 'wrapping', 'the', 'ioutil.ReadFile', 'part', 'of', 'my', 'code', 'in', 'a', 'function,', 'but', 'it', 'makes', 'no', 'difference.', 'My', 'ulimit', 'is', 'set', 'to', 'unlimited.', 'UPDATE:', 'I', 'believe', 'that', 'the', 'error', 'of', 'too', 'many', 'files', 'is', 'actually', 'occurring', 'during', 'my', 'Unzip', 'function.', 'func', 'Unzip', '(', 'src', ',', 'dest', 'string', ')', 'error', '{', 'r', ',', 'err', ':=', 'zip.OpenReader(src)', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'for', '_', ',', 'f', ':=', 'range', 'r', '.', 'File', '{', 'rc', ',', 'err', ':=', 'f.Open()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'path', ':=', 'filepath.Join(dest, f.Name)', 'if', 'f.FileInfo().IsDir()', '{', 'os.MkdirAll(path, f.Mode())', '}', 'else', '{', 'f', ',', 'err', ':=', 'os', '.', 'OpenFile', '(', 'path', ',', 'os', '.', 'O_WRONLY', '|', 'os', '.', 'O_CREATE', '|', 'os', '.', 'O_TRUNC', ',', 'f.Mode())', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '_', ',', 'err', '=', 'io.Copy(f, rc)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'f.Close()', '}', 'rc.Close()', '}', 'r.Close()', 'return', 'nil', '}', 'I', 'initially', 'got', 'the', 'Unzip', 'function', 'from', 'https://gist.github.com/hnaohiro/4572580,', 'but', 'upon', 'further', 'inspection,', 'the', 'use', 'of', 'defer', 'in', 'the', 'gist', ""author's"", 'function', 'seemed', 'wrong', 'as', 'the', 'file', 'would', 'only', 'be', 'closed', 'after', 'the', 'Unzip()', 'function', 'returned', 'which', 'is', 'too', 'late', 'becuase', 'then', '18000', 'file', 'descriptors', 'will', 'be', 'open.', ';)', 'I', 'replaced', 'the', 'deferred', 'Closes', 'with', 'explicit', 'Close()', 'as', 'shown', 'above,', 'but', 'am', 'still', 'getting', 'the', 'same', '""too', 'many', 'open', 'files""', 'error.', 'Is', 'there', 'a', 'problem', 'with', 'my', 'modified', 'Unzip', 'function?', 'UPDATE', '#', '2', 'Oops,', 'I', 'was', 'running', 'this', 'on', 'Heroku', 'and', 'was', 'pushing', 'to', 'the', 'wrong', 'app', 'with', 'my', 'changes', 'this', 'entire', 'time.', 'Lesson', 'learned:', 'verify', 'target', 'app', 'in', 'heroku', 'toolbelt.', 'Unzip', 'code', 'from', 'https://gist.github.com/hnaohiro/4572580', 'does', 'not', 'work', 'as', 'it', 'does', 'not', 'close', 'files', 'until', 'all', 'files', 'processed.', 'My', 'unzip', 'code', 'with', 'explicit', 'close', 'above', 'works', 'and', 'so', 'does', 'the', 'defer', 'version', 'in', ""@peterSO's"", 'answer.']"
1281,24292133,"

Not sure how to get around this, it would just be nice to have the same client and server in the same directory but maybe this is against how I should be doing things in go?
","['Hi', 'all', 'I', 'am', 'fairly', 'new', 'to', 'Golang,', 'I', 'am', 'writing', 'a', 'toy', 'client', 'and', 'server', 'app', 'just', 'to', 'learn', 'the', 'libraries.', 'But', 'I', 'have', 'the', 'project', 'folder:', 'philipherron', 'Philips', '-', 'iMac', '{', '/workspace/gospace/src/github.com/redbrain/station}', '$', 'echo', '$', 'GOPATH', '/Users/philipherron/workspace/gospace', 'I', 'wanted', 'to', 'have', '2', 'binaries:', 'client.go', 'server.go', 'But', 'when', 'I', 'build', 'I', 'get:', 'philipherron', 'Philips', '-', 'iMac', '{', '/workspace/gospace/src/github.com/redbrain/station} $ go build github.com/redbrain/station/', 'github', '.', 'com/redbrain/station', './', 'server', '.', 'go', ':', '5', ':', 'main', 'redeclared', 'in', 'this', 'block', 'previous', 'declaration', 'at', './', 'client', '.', 'go', ':', '5', 'I', 'guess', 'this', 'is', 'because', 'it', 'looks', 'like', 'I', 'am', 'making', 'to', 'mains', 'in', 'the', 'same', 'package.', 'So', 'I', 'tried', 'creating', 'a', 'client', 'and', 'a', 'server', 'subdir', 'and', 'have', 'the', 'binaries', 'in', 'each', 'of', 'those,', 'but', 'I', 'get:', 'philipherron', 'Philips', '-', 'iMac', '{', '/workspace/gospace/src/github.com/redbrain/station} $ go build github.com/redbrain/station/client', 'go', 'install', 'github', '.', 'com/redbrain/station/client:', 'build', 'output', '""client""', 'already', 'exists', 'and', 'is', 'a', 'directory', 'I', 'guess', 'this', 'is', 'because', 'I', 'have', 'the', 'layout', 'of:', '$', 'tree', '.', 'client', 'client', '.', 'go', 'server', 'server', '.', 'go', '2', 'directories', ',', '4', 'files', 'Not', 'sure', 'how', 'to', 'get', 'around', 'this,', 'it', 'would', 'just', 'be', 'nice', 'to', 'have', 'the', 'same', 'client', 'and', 'server', 'in', 'the', 'same', 'directory', 'but', 'maybe', 'this', 'is', 'against', 'how', 'I', 'should', 'be', 'doing', 'things', 'in', 'go?']"
1282,24311575,"

Each requires a random io.Reader, and the test file uses rand.Reader from crypto/rand. However, whenever I encrypt a message with rand.Reader on the client side, the message never is decrypted properly on the server side which has a separate instance of rand.Reader.


What is the purpose of the random io.Reader?
How can I ensure that the encrypted message is transferred and decrypted properly by the server? Would I also need to transfer some information about the rand.Reader used by the client as well to the server for the message to be properly decrypted?

","[""I'm"", 'writing', 'a', 'file', 'server', 'that', 'encrypts', 'data', 'on', 'the', 'client', 'side,', 'sends', 'the', 'data', 'over', 'TCP,', 'and', 'decrypts', 'it', 'on', 'server', 'side', 'using', 'asymmetric', 'RSA-OAEP', 'encryption.', 'There', 'are', 'two', 'main', 'functions', 'I', 'have', 'been', 'trying', 'to', 'use,', 'which', 'take', 'the', 'following', 'arguments', 'per', 'the', 'documentation:', 'EncryptOAEP', '(', 'hash', 'hash', '.', 'Hash', ',', 'random', 'io', '.', 'Reader', ',', 'pub', '*', 'PublicKey', ',', 'msg', '[]', 'byte', ',', 'label', '[]', 'byte', ')', '(', 'out', '[]', 'byte', ',', 'err', 'error', ')', 'DecryptOAEP', '(', 'hash', 'hash', '.', 'Hash', ',', 'random', 'io', '.', 'Reader', ',', 'priv', '*', 'PrivateKey', ',', 'ciphertext', '[]', 'byte', ',', 'label', '[]', 'byte', ')', '(', 'msg', '[]', 'byte', ',', 'err', 'error', ')', 'Each', 'requires', 'a', 'random', 'io.Reader,', 'and', 'the', 'test', 'file', 'uses', 'rand.Reader', 'from', 'crypto/rand.', 'However,', 'whenever', 'I', 'encrypt', 'a', 'message', 'with', 'rand.Reader', 'on', 'the', 'client', 'side,', 'the', 'message', 'never', 'is', 'decrypted', 'properly', 'on', 'the', 'server', 'side', 'which', 'has', 'a', 'separate', 'instance', 'of', 'rand.Reader.', 'What', 'is', 'the', 'purpose', 'of', 'the', 'random', 'io.Reader?', 'How', 'can', 'I', 'ensure', 'that', 'the', 'encrypted', 'message', 'is', 'transferred', 'and', 'decrypted', 'properly', 'by', 'the', 'server?', 'Would', 'I', 'also', 'need', 'to', 'transfer', 'some', 'information', 'about', 'the', 'rand.Reader', 'used', 'by', 'the', 'client', 'as', 'well', 'to', 'the', 'server', 'for', 'the', 'message', 'to', 'be', 'properly', 'decrypted?']"
1283,24421326,"I was recently reading on testing and examples in the go testing framework and did not really understand what they were for. I see that the documentation says:


  The package also runs and verifies example code. Example functions may include a concluding line comment that begins with ""Output:"" and is compared with the standard output of the function when the tests are run. (The comparison ignores leading and trailing space.)


However, I don't really appreciate the reason that this would exist. As I write my tests, it seems that it should be more than clear how to use the code just by reading the unit tests and the benchmarks. What additional motivation does the example section provide? It seems redundant to me, however, I am sure that the inventors of go put it for a good reason, specially because they seem to empathizes good programming practice by the design of their language. I hope to understand either their motivation or how this part of language can be used in a positive way in a golang project! :) 
","['I', 'was', 'recently', 'reading', 'on', 'testing', 'and', 'examples', 'in', 'the', 'go', 'testing', 'framework', 'and', 'did', 'not', 'really', 'understand', 'what', 'they', 'were', 'for.', 'I', 'see', 'that', 'the', 'documentation', 'says:', 'The', 'package', 'also', 'runs', 'and', 'verifies', 'example', 'code.', 'Example', 'functions', 'may', 'include', 'a', 'concluding', 'line', 'comment', 'that', 'begins', 'with', '""Output:""', 'and', 'is', 'compared', 'with', 'the', 'standard', 'output', 'of', 'the', 'function', 'when', 'the', 'tests', 'are', 'run.', '(The', 'comparison', 'ignores', 'leading', 'and', 'trailing', 'space.)', 'However,', 'I', ""don't"", 'really', 'appreciate', 'the', 'reason', 'that', 'this', 'would', 'exist.', 'As', 'I', 'write', 'my', 'tests,', 'it', 'seems', 'that', 'it', 'should', 'be', 'more', 'than', 'clear', 'how', 'to', 'use', 'the', 'code', 'just', 'by', 'reading', 'the', 'unit', 'tests', 'and', 'the', 'benchmarks.', 'What', 'additional', 'motivation', 'does', 'the', 'example', 'section', 'provide?', 'It', 'seems', 'redundant', 'to', 'me,', 'however,', 'I', 'am', 'sure', 'that', 'the', 'inventors', 'of', 'go', 'put', 'it', 'for', 'a', 'good', 'reason,', 'specially', 'because', 'they', 'seem', 'to', 'empathizes', 'good', 'programming', 'practice', 'by', 'the', 'design', 'of', 'their', 'language.', 'I', 'hope', 'to', 'understand', 'either', 'their', 'motivation', 'or', 'how', 'this', 'part', 'of', 'language', 'can', 'be', 'used', 'in', 'a', 'positive', 'way', 'in', 'a', 'golang', 'project!', ':)']"
1284,24425987,"

And here's the result:

Done!


I don't understand why my goroutine is never executed. The ""Entering the goroutine"" is not printed and I don't have any error message.
","[""I'm"", 'learning', 'Go', 'and', 'I', 'wanted', 'to', 'try', 'goroutines', 'and', 'channels.', ""Here's"", 'my', 'code:', 'package', 'main', 'import', '""fmt""', 'func', 'main', '(){', 'messages', ':=', 'make', '(', 'chan', 'string', ',', '3', ')', 'messages', '<-', '""one""', 'messages', '<-', '""two""', 'messages', '<-', '""three""', 'go', 'func', '(', 'm', '*', 'chan', 'string', ')', '{', 'fmt.Println(""Entering the goroutine..."")', 'for', '{', 'fmt.Println(<- *m)', '}', '}(&', 'messages', ')', 'fmt.Println(""Done!"")', '}', 'And', ""here's"", 'the', 'result:', 'Done!', 'I', ""don't"", 'understand', 'why', 'my', 'goroutine', 'is', 'never', 'executed.', 'The', '""Entering', 'the', 'goroutine""', 'is', 'not', 'printed', 'and', 'I', ""don't"", 'have', 'any', 'error', 'message.']"
1285,24491325,"

In Java you can do the same with

System.setIn


And friends.

This it very convenient if you need to swap between using a file and stdin/stdout often, and if to keep your code free from file pointers.

Does Go have something similar?
","['In', 'C', 'I', 'can', 'read', 'and', 'write', 'files', 'using', 'scanf', 'and', 'printf', 'by', 'piping', 'them', 'as', 'follows:', 'freopen', '(', '""input.txt""', ',', '""r""', ',', 'stdin', ');', 'freopen', '(', '""output.txt""', ',', '""w""', ',', 'stdout', ');', 'In', 'Java', 'you', 'can', 'do', 'the', 'same', 'with', 'System.setIn', 'And', 'friends.', 'This', 'it', 'very', 'convenient', 'if', 'you', 'need', 'to', 'swap', 'between', 'using', 'a', 'file', 'and', 'stdin/stdout', 'often,', 'and', 'if', 'to', 'keep', 'your', 'code', 'free', 'from', 'file', 'pointers.', 'Does', 'Go', 'have', 'something', 'similar?']"
1286,24519347,"

I don't understand, so I cannot make arbitrary names of examples? Do the names have to match function names of my package or of my file? This is in my test package, so I am probably trying to test function in a different package and file. How do I do this?
","['I', 'was', 'trying', 'to', 'make', 'a', 'documentation', 'and', 'provide', 'examples', 'but', 'I', ""didn't"", 'understand', 'how', 'to', 'because', 'godoc', 'was', 'skipping', 'my', 'examples.', 'when', 'I', 'go', 'to', 'localhost', ':', '8080/pkg/hello_example', 'on', 'the', 'browser', 'it', 'print', 'on', 'the', 'terminal:', '2014/07/01', '15', ':', '54', ':', '29', 'skipping', 'example', ""'ExampleAuthenticate'"", 'because', ""'Authenticate'"", 'is', 'not', 'a', 'known', 'func', 'tion', 'or', 'type', '2014/07/01', '15', ':', '54', ':', '29', 'skipping', 'example', ""'ExampleGetAllowAllDriver'"", 'because', ""'GetAllowAllDriver'"", 'is', 'not', 'a', 'known', 'func', 'tion', 'or', 'type', '2014/07/01', '15', ':', '54', ':', '29', 'skipping', 'example', ""'ExampleGetAndUseAllowAllDriver'"", 'because', ""'GetAndUseAllowAllDriver'"", 'is', 'not', 'a', 'known', 'func', 'tion', 'or', 'type', '2014/07/01', '15', ':', '54', ':', '29', 'skipping', 'example', ""'ExampleGetAndUseDenyAllDriver'"", 'because', ""'GetAndUseDenyAllDriver'"", 'is', 'not', 'a', 'known', 'func', 'tion', 'or', 'type', '2014/07/01', '15', ':', '54', ':', '29', 'skipping', 'example', ""'ExampleGetDenyAllDriver'"", 'because', ""'GetDenyAllDriver'"", 'is', 'not', 'a', 'known', 'func', 'tion', 'or', 'type', '2014/07/01', '15', ':', '54', ':', '29', 'skipping', 'example', ""'ExampleGetRedisDriver'"", 'because', ""'GetRedisDriver'"", 'is', 'not', 'a', 'known', 'func', 'tion', 'or', 'type', '2014/07/01', '15', ':', '54', ':', '30', 'skipping', 'example', ""'ExampleAuthenticate'"", 'because', ""'Authenticate'"", 'is', 'not', 'a', 'known', 'func', 'tion', 'or', 'type', '2014/07/01', '15', ':', '54', ':', '30', 'skipping', 'example', ""'ExampleGetAllowAllDriver'"", 'because', ""'GetAllowAllDriver'"", 'is', 'not', 'a', 'known', 'func', 'tion', 'or', 'type', '2014/07/01', '15', ':', '54', ':', '30', 'skipping', 'example', ""'ExampleGetAndUseAllowAllDriver'"", 'because', ""'GetAndUseAllowAllDriver'"", 'is', 'not', 'a', 'known', 'func', 'tion', 'or', 'type', '2014/07/01', '15', ':', '54', ':', '30', 'skipping', 'example', ""'ExampleGetAndUseDenyAllDriver'"", 'because', ""'GetAndUseDenyAllDriver'"", 'is', 'not', 'a', 'known', 'func', 'tion', 'or', 'type', '2014/07/01', '15', ':', '54', ':', '30', 'skipping', 'example', ""'ExampleGetDenyAllDriver'"", 'because', ""'GetDenyAllDriver'"", 'is', 'not', 'a', 'known', 'func', 'tion', 'or', 'type', '2014/07/01', '15', ':', '54', ':', '30', 'skipping', 'example', ""'ExampleGetRedisDriver'"", 'because', ""'GetRedisDriver'"", 'is', 'not', 'a', 'known', 'func', 'tion', 'or', 'type', '^', 'C', '%', 'I', ""don't"", 'understand,', 'so', 'I', 'cannot', 'make', 'arbitrary', 'names', 'of', 'examples?', 'Do', 'the', 'names', 'have', 'to', 'match', 'function', 'names', 'of', 'my', 'package', 'or', 'of', 'my', 'file?', 'This', 'is', 'in', 'my', 'test', 'package,', 'so', 'I', 'am', 'probably', 'trying', 'to', 'test', 'function', 'in', 'a', 'different', 'package', 'and', 'file.', 'How', 'do', 'I', 'do', 'this?']"
1287,24640352,"
","['The', 'goji', 'microframework', 'for', 'Go', 'has', 'a', 'fully', 'functional', 'example', 'app', 'with', 'three', 'files,', 'main', '.', 'go', ',', 'models', '.', 'go', 'and', 'middleware', '.', 'go', '.', 'I', 'installed', 'the', 'framework', 'using', 'the', 'go', 'get', 'command', 'go', 'get', 'github', '.', 'com/zenazn/goji', 'and', 'therefore', 'have', 'the', 'example', 'app', 'availabl', 'in', 'my', 'GOPATH', 'like', 'this', 'src/github.com/zenazn/goji/example', 'if', 'I', 'navigate', 'to', '/example/', 'and', 'run', 'go', 'run', 'main.go,', 'it', 'gives', 'me', 'errors', 'which', 'indicate', 'that', 'the', 'main.go', 'file', 'is', ""isn't"", 'accessing', 'the', 'objects', 'from', 'the', 'middleware.go', 'and', 'models.go', 'files,', 'like', 'this', './', 'main', '.', 'go', ':', '39', ':', 'undefined', ':', 'PlainText', './', 'main', '.', 'go', ':', '47', ':', 'undefined', ':', 'SuperSecure', './', 'main', '.', 'go', ':', '73', ':', 'undefined', ':', 'Greets', './', 'main', '.', 'go', ':', '74', ':', 'undefined', ':', 'Greets', './', 'main', '.', 'go', ':', '85', ':', 'undefined', ':', 'Greet', './', 'main', '.', 'go', ':', '98', ':', 'undefined', ':', 'Greets', './', 'main', '.', 'go', ':', '99', ':', 'undefined', ':', 'Greets', './', 'main', '.', 'go', ':', '107', ':', 'undefined', ':', 'Users', './', 'main', '.', 'go', ':', '116', ':', 'undefined', ':', 'Greets', './', 'main', '.', 'go', ':', '116', ':', 'too', 'many', 'errors', 'There', 'is', 'no', 'code', 'in', 'main.go', 'that', 'imports', 'middleware.go', 'or', 'models.go,', 'only', 'the', 'regular', 'import', 'statements', 'for', 'libraries.', 'How', 'are', 'these', 'files', 'supposed', 'to', 'be', 'tied', 'together', 'so', 'that', 'the', 'objects', 'from', 'one', 'are', 'available', 'in', 'the', 'other?', 'from', 'main.go', 'package', 'main', 'import', '(', '""fmt""', '""io""', '""net/http""', '""regexp""', '""strconv""', '""github.com/zenazn/goji""', '""github.com/zenazn/goji/param""', '""github.com/zenazn/goji/web""', ')', '//', 'Note:', 'the', 'code', 'below', 'cuts', 'a', 'lot', 'of', 'corners', 'to', 'make', 'the', 'example', 'app', 'simple.', 'func', 'main', '()', '{', '//', 'Add', 'routes', 'to', 'the', 'global', 'handler', 'go', 'ji.Get(""/"", Root)', '//', 'Fully', 'backwards', 'compatible', 'with', ""net/http's"", 'Handlers', 'go', 'ji.Get(""/greets"", http.RedirectHandler(""/"", 301))', '//', 'Use', 'your', 'favorite', 'HTTP', 'verbs', 'go', 'ji.Post(""/greets"", NewGreet)', '//', 'Use', 'Sinatra-style', 'patterns', 'in', 'your', 'URLs', 'go', 'ji.Get(""/users/:name"", GetUser)', '//', 'Goji', 'also', 'supports', 'regular', 'expressions', 'with', 'named', 'capture', 'groups.', 'go', 'ji.Get(regexp.MustCompile(`^/greets/(?P\\d+)$`), GetGreet)', '//', 'Middleware', 'can', 'be', 'used', 'to', 'inject', 'behavior', 'into', 'your', 'app.', 'The', '//', 'middleware', 'for', 'this', 'application', 'are', 'defined', 'in', 'middleware.go,', 'but', 'you', '//', 'can', 'put', 'them', 'wherever', 'you', 'like.', 'go', 'ji.Use(PlainText)', 'admin', ':=', 'web.New()', 'go', 'ji.Handle(""/admin/*"", admin)', 'admin.Use(SuperSecure)', '//', ""Goji's"", 'routing,', 'like', ""Sinatra's,"", 'is', 'exact:', 'no', 'effort', 'is', 'made', 'to', '//', 'normalize', 'trailing', 'slashes.', 'go', 'ji.Get(""/admin"", http.RedirectHandler(""/admin/"", 301))', 'admin.Get(""/admin/"", AdminRoot)', 'admin.Get(""/admin/finances"", AdminFinances)', '//', 'Use', 'a', 'custom', '404', 'handler', 'go', 'ji.NotFound(NotFound)', 'go', 'ji.Serve()', '}', 'middleware.go', 'package', 'main', 'import', '(', '""encoding/base64""', '""net/http""', '""strings""', '""github.com/zenazn/goji/web""', ')', '//', 'PlainText', 'sets', 'the', 'content-type', 'of', 'responses', 'to', 'text/plain.', 'func', 'PlainText', '(', 'h', 'http', '.', 'Handler', ')', 'http', '.', 'Handler', '{', 'fn', ':=', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'w.Header().Set(""Content-Type"", ""text/plain"")', 'h.ServeHTTP(w, r)', '}', 'return', 'http.HandlerFunc(fn)', '}', '//', 'Nobody', 'will', 'ever', 'guess', 'this!', 'const', 'Password', '=', '""admin:admin""', '//', 'SuperSecure', 'is', 'HTTP', 'Basic', 'Auth', 'middleware', 'for', 'super-secret', 'admin', 'page.', 'Shhhh!', 'func', 'SuperSecure', '(', 'c', '*', 'web', '.', 'C', ',', 'h', 'http', '.', 'Handler', ')', 'http', '.', 'Handler', '{', 'fn', ':=', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'auth', ':=', 'r', '.', 'Header.Get(""Authorization"")', 'if', '!', 'strings.HasPrefix(auth, ""Basic "")', '{', 'pleaseAuth', '(', 'w', ')', 'return', '}', 'password', ',', 'err', ':=', 'base64', '.', 'StdEncoding.DecodeString(auth[6:])', 'if', 'err', '!=', 'nil', '||', 'string', '(', 'password', ')', '!=', 'Password', '{', 'pleaseAuth', '(', 'w', ')', 'return', '}', 'h.ServeHTTP(w, r)', '}', 'return', 'http.HandlerFunc(fn)', '}', 'func', 'pleaseAuth', '(', 'w', 'http', '.', 'ResponseWriter', ')', '{', 'w.Header().Set(""WWW-Authenticate"", `Basic realm=""Gritter""`)', 'w.WriteHeader(http.StatusUnauthorized)', 'w.Write([]byte(""Go away!\\n""))', '}', 'models.go', 'package', 'main', 'import', '(', '""fmt""', '""io""', '""time""', ')', '//', 'A', 'Greet', 'is', 'a', '140-character', 'micro-blogpost', 'that', 'has', 'no', 'resemblance', 'whatsoever', '//', 'to', 'the', 'noise', 'a', 'bird', 'makes.', 'type', 'Greet', 'struct', '{', 'User', 'string', 'param', ':', '""user""', 'Message', 'string', 'param', ':', '""message""', 'Time', 'time', '.', 'Time', 'param', ':', '""time""', '}', '//', 'Store', 'all', 'our', 'greets', 'in', 'a', 'big', 'list', 'in', 'memory,', 'because,', ""let's"", 'be', 'honest,', ""who's"", '//', 'actually', 'going', 'to', 'use', 'a', 'service', 'that', 'only', 'allows', 'you', 'to', 'post', '140-character', '//', 'messages?', 'var', 'Greets', '=', '[]', 'Greet', '{', '{', '""carl""', ',', '""Welcome to Gritter!""', ',', 'time.Now()', '},', '{', '""alice""', ',', '""Wanna know a secret?""', ',', 'time.Now()', '},', '{', '""bob""', ',', '""Okay!""', ',', 'time.Now()', '},', '{', '""eve""', ',', '""I\'m listening...""', ',', 'time.Now()', '},', '}', '//', 'Write', 'out', 'a', 'representation', 'of', 'the', 'greet', 'func', '(', 'g', 'Greet', ')', 'Write', '(', 'w', 'io', '.', 'Writer', ')', '{', 'fmt', '.', 'Fprintf', '(', 'w', ',', '""%s\\n@%s at %s\\n---\\n""', ',', 'g', '.', 'Message', ',', 'g', '.', 'User', ',', 'g', '.', 'Time.Format(time.UnixDate))', '}', '//', 'A', 'User', 'is', 'a', 'person.', 'It', 'may', 'even', 'be', 'someone', 'you', 'know.', 'Or', 'a', 'rabbit.', 'Hard', 'to', 'say', '//', 'from', 'here.', 'type', 'User', 'struct', '{', 'Name', ',', 'Bio', 'string', '}', '//', 'All', 'the', 'users', 'we', 'know', 'about!', 'There', ""aren't"", 'very', 'many...', 'var', 'Users', '=', 'map', '[', 'string', ']', 'User', '{', '""alice""', ':', '{', '""Alice in Wonderland""', ',', '""Eating mushrooms""', '},', '""bob""', ':', '{', '""Bob the Builder""', ',', '""Making children dumber""', '},', '""carl""', ':', '{', '""Carl Jackson""', ',', '""Duct tape aficionado""', '},', '}', '//', 'Write', 'out', 'the', 'user', 'func', '(', 'u', 'User', ')', 'Write', '(', 'w', 'io', '.', 'Writer', ',', 'handle', 'string', ')', '{', 'fmt.Fprintf(w, ""%s (@%s)\\n%s\\n"", u.Name, handle, u.Bio)', '}']"
1288,24702774,"

How can I write an image to the request body?
","['I', 'have', 'a', 'jpeg', 'image.Image', 'and', 'I', 'want', 'to', 'decode', 'to', 'a', 'request', 'body.', 'Simplified', 'below,', 'it', ""doesn't"", 'seem', 'to', 'finish', 'the', 'request', 'ever.', 'The', 'program', 'hangs.', 'r', ',', 'w', ':=', 'io.Pipe()', 'jpeg.Encode(w, img, &jpeg.Options{ 80 })', 'req', ',', 'e', ':=', 'http.NewRequest(""PUT"", myUrl, r)', 'if', 'e', '!=', 'nil', '{', 'return', 'nil', ',', 'e', '}', 'http', '.', 'DefaultClient.Do(req)', 'How', 'can', 'I', 'write', 'an', 'image', 'to', 'the', 'request', 'body?']"
1289,24706034,"

How can i store pointers to structs that will be correctly encoded to json?
","['My', 'golang', 'program', 'have', 'this', 'structure', 'of', 'structs:', 'type', 'JSONDoc', 'struct', '{', 'Count', 'int', 'json', ':', '""count""', 'Objects', '[]', 'uintptr', 'json', ':', '""objects""', '}', 'type', 'ObjectA', 'struct', '{', 'FieldA', 'string', '}', 'type', 'ObjectB', 'struct', '{', 'FieldB', 'string', '}', 'I', ""don't"", 'know', 'what', 'object', 'types', 'can', 'be', 'in', 'JSONDoc.Objects,', ""i'm"", 'need', 'to', 'store', 'multiple', 'structs', 'in', 'json', 'array.', 'Reflect', 'returns', 'pointers', 'to', 'structs,', ""i'm"", 'appending', 'them', 'to', 'struct,', 'but', 'encoding/json', 'package', 'in', 'result', 'json', 'replace', 'pointer', 'with', 'integer', 'address.', 'Also', 'unsafe.Pointer', 'cannot', 'be', 'parsed', 'by', 'encoding/json', 'too.', 'Just', 'want', 'result', 'json', 'to', 'look', 'as', '{', '""count""', ':', '2', ',', '""objects""', ':', '[', '{', '""FieldA""', ':', '""...""', '},', '{', '""FieldB""', ':', '""...""', '}', ']', '}', 'How', 'can', 'i', 'store', 'pointers', 'to', 'structs', 'that', 'will', 'be', 'correctly', 'encoded', 'to', 'json?']"
1290,24762418,"I'm stuck in a situation and cannot figure out what I messed up. Easiest way to explain is probably some minimal example: http://play.golang.org/p/14lbOBsCCo

I am tying to modify a value of a struct via its pointer but end up modifing some memory other the part I want. Line 92 is where my issue is.

How would you debug a situation like this (tools etc.), and how do I get the broker.Port set?

Thanks for hints/suggestions! 
","[""I'm"", 'stuck', 'in', 'a', 'situation', 'and', 'cannot', 'figure', 'out', 'what', 'I', 'messed', 'up.', 'Easiest', 'way', 'to', 'explain', 'is', 'probably', 'some', 'minimal', 'example:', 'http://play.golang.org/p/14lbOBsCCo', 'I', 'am', 'tying', 'to', 'modify', 'a', 'value', 'of', 'a', 'struct', 'via', 'its', 'pointer', 'but', 'end', 'up', 'modifing', 'some', 'memory', 'other', 'the', 'part', 'I', 'want.', 'Line', '92', 'is', 'where', 'my', 'issue', 'is.', 'How', 'would', 'you', 'debug', 'a', 'situation', 'like', 'this', '(tools', 'etc.),', 'and', 'how', 'do', 'I', 'get', 'the', 'broker.Port', 'set?', 'Thanks', 'for', 'hints/suggestions!']"
1291,24775306,"

I know, that defer statement will be execute after return statement in the function. But here, why entering: b is the first output? I am expected in b as the fist output!
","['i', 'try', 'to', 'learn', 'golang', 'and', 'use', 'effective', 'go', 'as', 'lecture.', 'I', 'stuck', 'on', 'capital', 'defer,', 'look', 'at', 'the', 'following', 'code', 'package', 'main', 'import', '""fmt""', 'func', 'trace', '(', 's', 'string', ')', 'string', '{', 'fmt.Println(""entering:"", s)', 'return', 's', '}', 'func', 'un', '(', 's', 'string', ')', '{', 'fmt.Println(""leaving:"", s)', '}', 'func', 'a', '()', '{', 'defer', 'un', '(', 'trace', '(', '""a""', '))', 'fmt.Println(""in a"")', '}', 'func', 'b', '()', '{', 'defer', 'un', '(', 'trace', '(', '""b""', '))', 'fmt.Println(""in b"")', 'a', '()', '}', 'func', 'main', '()', '{', 'b', '()', '}', 'as', 'output', ""i've"", 'got', 'entering', ':', 'b', 'in', 'b', 'entering', ':', 'a', 'in', 'a', 'leaving', ':', 'a', 'leaving', ':', 'b', 'I', 'know,', 'that', 'defer', 'statement', 'will', 'be', 'execute', 'after', 'return', 'statement', 'in', 'the', 'function.', 'But', 'here,', 'why', 'entering:', 'b', 'is', 'the', 'first', 'output?', 'I', 'am', 'expected', 'in', 'b', 'as', 'the', 'fist', 'output!']"
1292,24836696,"
","[""I'm"", 'trying', 'to', 'build', 'an', 'easy', 'to', 'use', 'templating', 'system.', 'Basically', 'I', 'just', 'want', 'to', 'create', 'a', 'slice', 'with', 'different', 'variables', '(', 'strings', ')', 'and', 'then', 'loop', 'through', 'the', 'slice', 'and', 'replace', 'the', 'markup', '{{}}', 'with', 'the', 'actual', 'values.', 'So', 'if', 'the', 'variable', ""'name'"", 'is', 'onevar', 'it', 'will', 'look', 'in', 'the', 'template', 'for', '{{onevar}}', 'and', 'replace', 'that', 'with', 'the', 'actual', 'value', 'of', 'the', 'variable', '.', 'Question:', 'how', 'do', 'I', 'get', 'the', 'variable', 'name?', 'Basically', ""what's"", 'in', 'the', 'source', 'code.', 'Is', 'it', 'possible', '?', ""I've"", 'tried', 'something', 'with', 'reflect', 'but', 'seems', 'I', ""couldn't"", 'get', 'it', 'right.', 'See', 'belowg', 'onevar', ':=', '""something""', 'other', ':=', '""something else""', 'var', 'msg', 'string', 'sa', ':=', '[]', 'string', '{', 'onevar', ',', 'other', '}', 'for', '_', ',', 'v', ':=', 'range', 'sa', '{', 'vName', ':=', 'reflect.TypeOf(v).Name()', 'vName', '=', 'fmt.Sprintf(""{{%s}}"", vName)', 'msg', '=', 'strings.Replace(msg, vName, v, -1)', '}']"
1293,24838846,"

Both ways are accepted by gofmt. Both ways are found in stdlib, though 1) is used more.
","['Which', 'is', 'the', 'preferred', 'way', 'to', 'declare', 'a', 'single', 'constant', 'in', 'Go?', '1)', 'const', 'myConst', '2)', 'const', '(', 'myConst', ')', 'Both', 'ways', 'are', 'accepted', 'by', 'gofmt.', 'Both', 'ways', 'are', 'found', 'in', 'stdlib,', 'though', '1)', 'is', 'used', 'more.']"
1294,24854410,"With the flag package in golang, can I have flags that I only need to know the presence of them? Like rails -s, the flag ""s"" does not have any value, but program can know the presence of the flag s.
","['With', 'the', 'flag', 'package', 'in', 'golang,', 'can', 'I', 'have', 'flags', 'that', 'I', 'only', 'need', 'to', 'know', 'the', 'presence', 'of', 'them?', 'Like', 'rails', '-s,', 'the', 'flag', '""s""', 'does', 'not', 'have', 'any', 'value,', 'but', 'program', 'can', 'know', 'the', 'presence', 'of', 'the', 'flag', 's.']"
1295,24855081,"

But then, how can I make a difference during the import?
","['coming', 'from', 'a', 'Node', 'environment', 'I', 'used', 'to', 'install', 'a', 'specific', 'version', 'of', 'a', 'vendor', 'lib', 'into', 'the', 'project', 'folder', '(node_modules)', 'by', 'telling', 'npm', 'to', 'install', 'that', 'version', 'of', 'that', 'lib', 'from', 'the', 'package.json', 'or', 'even', 'directly', 'from', 'the', 'console,', 'like', 'so:', '$', 'npm', 'install', 'express', '4', '.', '0', '.', '0', 'Then', 'I', 'used', 'to', 'import', 'that', 'version', 'of', 'that', 'package', 'in', 'my', 'project', 'just', 'with:', 'var', 'express', '=', 'require', '(', ""'express'"", ');', 'Now,', 'I', 'want', 'to', 'do', 'the', 'same', 'thing', 'with', 'go.', 'How', 'can', 'I', 'do', 'that?', 'Is', 'it', 'possible', 'to', 'install', 'a', 'specific', 'version', 'of', 'a', 'package?', 'If', 'so,', 'using', 'a', 'centralized', '$GOPATH,', 'how', 'can', 'I', 'import', 'one', 'version', 'instead', 'of', 'another?', 'I', 'would', 'do', 'something', 'like', 'this:', '$', 'go', 'get', 'github', '.', 'com/wilk/uuid@0.0.1', '$', 'go', 'get', 'github', '.', 'com/wilk/uuid@0.0.2', 'But', 'then,', 'how', 'can', 'I', 'make', 'a', 'difference', 'during', 'the', 'import?']"
1296,24855388,"

Everything works fine. /api/hello return ""Hello World"" and if I go to / it will serve my index.html. However since I'm trying to use angular ui-router so I need my go server to send all non-registered routes to angular so angular ui-router can handle them. 

For example: If I go /random right now it will return a 404 since I don't have any file under ./static named random. But what I want is Go to forward that request to Angular so ui-router can handle the /random
","[""I'm"", 'a', 'new', 'Gopher', 'trying', 'to', 'do', 'a', 'Go', 'backend', 'to', 'serve', 'my', 'Angularjs', 'frontend', 'and', 'also', 'serve', 'an', 'API.', 'This', 'is', 'what', 'I', 'have', 'so', 'far.', 'package', 'main', 'import', '(', '""github.com/gorilla/mux""', '""log""', '""net/http""', ')', 'func', 'main', '()', '{', 'rtr', ':=', 'mux.NewRouter()', 'srtr', ':=', 'rtr.PathPrefix(""/api"").Subrouter()', 'srtr.HandleFunc(""/hello"", hello).Methods(""GET"")', 'rtr.PathPrefix(""/"").Handler(http.FileServer(http.Dir(""./static/"")))', 'http.Handle(""/"", rtr)', 'log.Println(""Listening..."")', 'http.ListenAndServe("":3000"", nil)', '}', 'func', 'hello', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'w.Write([]byte(""Hello World""))', '}', 'Everything', 'works', 'fine.', '/api/hello', 'return', '""Hello', 'World""', 'and', 'if', 'I', 'go', 'to', '/', 'it', 'will', 'serve', 'my', 'index.html.', 'However', 'since', ""I'm"", 'trying', 'to', 'use', 'angular', 'ui-router', 'so', 'I', 'need', 'my', 'go', 'server', 'to', 'send', 'all', 'non-registered', 'routes', 'to', 'angular', 'so', 'angular', 'ui-router', 'can', 'handle', 'them.', 'For', 'example:', 'If', 'I', 'go', '/random', 'right', 'now', 'it', 'will', 'return', 'a', '404', 'since', 'I', ""don't"", 'have', 'any', 'file', 'under', './static', 'named', 'random.', 'But', 'what', 'I', 'want', 'is', 'Go', 'to', 'forward', 'that', 'request', 'to', 'Angular', 'so', 'ui-router', 'can', 'handle', 'the', '/random']"
1297,24863585,"

I've checked the godocs but they seem quite useless. 
","['I', 'have', 'two', 'structs', 'as', 'below', 'and', 'I', 'need', 'to', 'render', 'the', 'data', 'on', 'a', 'template', 'using', 'the', 'templates', 'pack.', 'I', 'get', 'this', 'error', ':', 'Email', 'is', 'not', 'a', 'field', 'of', 'struct', 'type', 'Notes', '.', 'The', 'issue', 'seems', 'to', 'be', 'that', 'only', 'fields', 'of', 'the', 'range', 'struct', 'seem', 'to', 'be', 'available', 'within', 'the', 'range', 'loop', 'so', ""I'm"", 'wondering', 'how', 'I', 'can', 'import', 'fields', 'from', 'outside', 'the', 'range', 'struct', '(e.g.', 'the', 'Email', 'string).', 'The', 'behavior', 'is', 'quite', 'unexpected.', 'type', 'notes', 'struct', '{', 'Note', 'string', 'sf', 'string', '}', 'type', 'uis', 'struct', '{', 'notes', '[]', 'Note', 'Email', 'string', '}', 'var', 'ui', 'uis', 'HTML', '{{', 'range', '.', 'notes', '}}', '{{.', 'Email', '}}', '{{.', 'sf', '}}', '{{', 'end', '}}', 'Email', '{{.', 'Email', '}}', ""I've"", 'checked', 'the', 'godocs', 'but', 'they', 'seem', 'quite', 'useless.']"
1298,24877566,"


what should i do to be able to use range on the returned slice?
how can i use the itemtyp as the type of my slice?

","['Trying', 'to', 'create', 'a', 'slice', 'in', 'which', 'the', 'type', 'is', 'set', 'dynamicaly', 'based', 'on', 'a', 'pointer', 'to', 'a', 'specific', 'type,', 'so', 'i', 'made', 'the', 'following', 'sample', 'func', 'main', '()', '{', 'var', 'chicken', '*', 'Chicken', '//', 'create', 'a', 'slice', 'of', 'chickens', 'chickens', ':=', 'GetaDynamiclyTypedSlice', '(', 'chicken', ')', '//', 'this', 'throws', 'cannot', 'range', 'over', 'chickens', '(type', '*[]interface', '{})', 'and', 'i', 'cant', 'figure', 'how', 'to', 'create', 'a', 'slice', 'using', 'my', 'above', 'chicken', 'pointer', 'for', '_', ',', 'chicken', ':=', 'range', 'chickens', '{', 'fmt.Println(chicken)', '}', '}', 'type', 'Chicken', 'struct', '{', 'Weight', 'float64', '}', 'func', 'GetaDynamiclyTypedSlice', '(', 'ptrItemType', 'interface', '{})*[]', 'interface', '{}{', 'var', 'collection', '[]', 'interface', '{}', 'itemtyp', ':=', 'reflect.TypeOf(ptrItemType).Elem()', 'for', 'i', ':=', '0', ';', 'i', '<', '1000', ';', 'i', '++{', '//', 'create', 'an', 'item', 'of', 'the', 'wanted', 'type', 'item', ':=', 'reflect.New(itemtyp)', '//', 'set', 'a', 'random', 'float', 'to', 'the', 'weight', 'value', 'item.Elem().FieldByName(""Weight"").SetFloat(rnd.ExpFloat64())', 'collection', '=', 'append', '(', 'collection', ',&', 'item', ')', '}', 'return', '&', 'collection', '}', 'what', 'should', 'i', 'do', 'to', 'be', 'able', 'to', 'use', 'range', 'on', 'the', 'returned', 'slice?', 'how', 'can', 'i', 'use', 'the', 'itemtyp', 'as', 'the', 'type', 'of', 'my', 'slice?']"
1299,24952983,"

in single show warehouse i do this but that fails while .Data.Name return the name correctly

{{ .Data.GetId }}


any idea what i am missing here?
","['i', 'have', 'following', 'code', 'func', '(', 'w', '*', 'Warehouse', ')', 'GetId', '()', 'string', '{', 'return', 'w', '.', 'Id.Hex()', '}', 'view', 'multiple', 'works', 'perfect', '{{', 'range', '.', 'Data', '}}', '{{', '.', 'Name', '}}', '{{', '.', 'City', '}}', '{{', '.', 'Manager', '}}', 'view', '{{', 'end', '}}', 'in', 'single', 'show', 'warehouse', 'i', 'do', 'this', 'but', 'that', 'fails', 'while', '.Data.Name', 'return', 'the', 'name', 'correctly', '{{', '.Data.GetId', '}}', 'any', 'idea', 'what', 'i', 'am', 'missing', 'here?']"
1300,24958569,"
","['Im', 'trying', 'to', 'write', 'a', 'program', 'that', 'takes', 'user', 'input', 'flags,', 'reads', 'an', 'input', 'file', 'containing', 'data', '(testInput.txt),', 'then', 'appends', 'the', ""user's"", 'flags', 'to', 'the', 'input', 'data', 'and', 'exports', 'it', 'all', 'to', 'an', 'output', 'file', '(testOutput.txt).', 'I', 'am', 'getting', 'an', 'error', 'in', 'func', 'employeeReadWrite()', 'when', 'trying', 'to', 'append', 'the', 'two', 'together.', '""invalid', 'operation:', 'contents', '+', 'cnvUserProfile', '(operator', '+', 'not', 'defined', 'on', 'slice)"".', ""I'm"", 'new', 'to', 'programming', 'with', 'go', 'being', 'my', '1st', 'language,', 'and', 'I', ""don't"", 'have', 'a', 'great', 'handle', 'on', 'slices', 'yet.', 'What', 'do', 'I', 'need', 'to', 'do', 'to', 'resolve', 'that', 'error?', 'package', 'main', 'import', '(', '""flag""', '""fmt""', '""io/ioutil""', '""os""', ')', 'var', 'targetEmployee', '*', 'string', 'var', 'targetUsername', '*', 'string', 'var', 'targetLocation', '*', 'string', 'var', 'targetDepartment', '*', 'string', 'var', 'targetManager', '*', 'string', 'var', 'targetTitle', '*', 'string', 'var', 'userProfile', 'string', 'func', 'getFlagVariables', '()', '{', 'targetEmployee', '=', 'flag.String(""employee"", """", ""What is there name? (-employee)"")', 'targetUsername', '=', 'flag.String(""username"", """", ""What is there username? (-username)"")', 'targetLocation', '=', 'flag.String(""location"", """", ""Where are the working from? (-location)"")', 'targetDepartment', '=', 'flag.String(""department"", """", ""What is there department? (-department)"")', 'targetManager', '=', 'flag.String(""manager"", """", ""Who is there manager? (-manager)"")', 'targetTitle', '=', 'flag.String(""title"", """", ""What is there job title? (-title)"")', 'flag.Parse()', 'fmt.Println(""-----------------------------------"")', 'userProfile', '=', '*', 'targetEmployee', '+', '""\\n""', '+', '*', 'targetUsername', '+', '""\\n""', '+', '*', 'targetUsername', '+', '""@genericCompany.com""', '+', '""\\n""', '+', '*', 'targetLocation', '+', '""\\n""', '+', '*', 'targetDepartment', '+', '""\\n""', '+', '*', 'targetManager', '+', '""\\n""', '+', '*', 'targetTitle', 'fmt.Println(userProfile)', 'fmt.Println(""-----------------------------------"")', '}', 'func', 'employeeReadWriteFile', '()', '{', 'contents', ',', '_', ':=', 'ioutil.ReadFile(""testInput.txt"")', 'cnvrtUserProfile', ':=', '[]', 'byte', '(', 'userProfile', ')', 'ioutil.WriteFile(""testOutput.txt"", contents+cnvrtUserProfile, 0x777)', '}']"
1301,24977231," -- but that seems to have a limit of 32MB. I also see there's a bulk upload tool -- bulk_uploader.py -- but it won't do all the data-massaging I require and I'd like to limit writes (and really cost) of this bulk insert.

How would one effectively read and parse a very large (500mb+) csv file without the benefit of reading from local storage?
","['Locally', 'I', 'am', 'successfully', 'able', 'to', '(in', 'a', 'task):', 'Open', 'the', 'csv', 'Scan', 'through', 'each', 'line', '(using', 'Scanner.Scan)', 'Map', 'the', 'parsed', 'CSV', 'line', 'to', 'my', 'desired', 'struct', 'Save', 'the', 'struct', 'to', 'datastore', 'I', 'see', 'that', 'blobstore', 'has', 'a', 'reader', 'that', 'would', 'allow', 'me', 'to', 'read', 'the', 'value', 'directly', 'using', 'a', 'streaming', 'file', '-', 'like', 'interface', '.', '--', 'but', 'that', 'seems', 'to', 'have', 'a', 'limit', 'of', '32MB.', 'I', 'also', 'see', ""there's"", 'a', 'bulk', 'upload', 'tool', '--', 'bulk_uploader.py', '--', 'but', 'it', ""won't"", 'do', 'all', 'the', 'data-massaging', 'I', 'require', 'and', ""I'd"", 'like', 'to', 'limit', 'writes', '(and', 'really', 'cost)', 'of', 'this', 'bulk', 'insert.', 'How', 'would', 'one', 'effectively', 'read', 'and', 'parse', 'a', 'very', 'large', '(500mb+)', 'csv', 'file', 'without', 'the', 'benefit', 'of', 'reading', 'from', 'local', 'storage?']"
1302,24980927,"

When I run it, the web page displays the links to edit.html and home.html instead of displaying the static page from home.html. What am I doing wrong. Is this the best way to serve files? I know there are other ways eg. from the html/templates package but I'm not sure what the difference is and when to use each of these methods. Thanks!
","[""I'm"", 'trying', 'to', 'display', 'a', 'static', 'page', 'with', 'GO.', 'GO:', 'package', 'main', 'import', '""net/http""', 'func', 'main', '()', '{', 'fs', ':=', 'http.FileServer(http.Dir(""static/home""))', 'http.Handle(""/"", fs)', 'http.ListenAndServe("":4747"", nil)', '}', 'Directory:', 'Project', '/', 'static', 'home', '.', 'html', 'edit', '.', 'html', 'project', '.', 'go', 'When', 'I', 'run', 'it,', 'the', 'web', 'page', 'displays', 'the', 'links', 'to', 'edit.html', 'and', 'home.html', 'instead', 'of', 'displaying', 'the', 'static', 'page', 'from', 'home.html.', 'What', 'am', 'I', 'doing', 'wrong.', 'Is', 'this', 'the', 'best', 'way', 'to', 'serve', 'files?', 'I', 'know', 'there', 'are', 'other', 'ways', 'eg.', 'from', 'the', 'html/templates', 'package', 'but', ""I'm"", 'not', 'sure', 'what', 'the', 'difference', 'is', 'and', 'when', 'to', 'use', 'each', 'of', 'these', 'methods.', 'Thanks!']"
1303,25002575,"

The issue is that the built-in json.Decoder type reads the entire file into memory on Decode before throwing away key-values that don't match the struct's fields (as has been pointed out on StackOverflow before: link).

Are there any ways of decoding JSON in Go without keeping the entire JSON object in memory?
","['I', 'have', 'a', 'JSON', 'file', 'with', 'a', 'single', 'field', 'that', 'takes', 'a', 'huge', 'amount', 'of', 'space', 'when', 'loaded', 'into', 'memory.', 'The', 'other', 'fields', 'are', 'reasonable,', 'but', ""I'm"", 'trying', 'to', 'take', 'care', 'not', 'to', 'load', 'that', 'particular', 'field', 'unless', 'I', 'absolutely', 'have', 'to.', '{', '""Field1""', ':', '""value1""', ',', '""Field2""', ':', '""value2""', ',', '""Field3""', ':', '""a very very long string that potentially takes a few GB of memory""', '}', 'When', 'reading', 'that', 'file', 'into', 'memory,', ""I'd"", 'want', 'to', 'ignore', 'Field3', '(because', 'loading', 'it', 'could', 'crash', 'my', 'app).', ""Here's"", 'some', 'code', 'that', 'I', 'would', 'assume', 'does', 'that', 'because', 'it', 'uses', 'io', 'streams', 'rather', 'than', 'passing', 'a', '[]byte', 'type', 'to', 'the', 'Unmarshal', 'command.', 'package', 'main', 'import', '(', '""encoding/json""', '""os""', ')', 'func', 'main', '()', '{', 'type', 'MyStruct', 'struct', '{', 'Field1', 'string', 'Field2', 'string', '}', 'fi', ',', 'err', ':=', 'os.Open(""myJSONFile.json"")', 'if', 'err', '!=', 'nil', '{', 'os.Exit(2)', '}', '//', 'create', 'an', 'instance', 'and', 'populate', 'var', 'mystruct', 'MyStruct', 'err', '=', 'json.NewDecoder(fi).Decode(&mystruct)', 'if', 'err', '!=', 'nil', '{', 'os.Exit(2)', '}', '//', 'do', 'some', 'other', 'stuff', '}', 'The', 'issue', 'is', 'that', 'the', 'built-in', 'json.Decoder', 'type', 'reads', 'the', 'entire', 'file', 'into', 'memory', 'on', 'Decode', 'before', 'throwing', 'away', 'key-values', 'that', ""don't"", 'match', 'the', ""struct's"", 'fields', '(as', 'has', 'been', 'pointed', 'out', 'on', 'StackOverflow', 'before:', 'link).', 'Are', 'there', 'any', 'ways', 'of', 'decoding', 'JSON', 'in', 'Go', 'without', 'keeping', 'the', 'entire', 'JSON', 'object', 'in', 'memory?']"
1304,25090797,"
Another time it might be Id and Name.

Appreciate your response.
","['I', 'get', 'a', 'JSON', 'from', 'a', 'client', 'on', 'the', 'successful', 'submit', 'of', 'user', 'details.', 'Some', 'element', 'in', 'the', 'JSON', 'can', 'be', 'skipped', 'since', 'they', 'were', 'not', 'updated.', 'On', 'the', 'Golang', 'server', 'side,', 'I', 'have', 'an', 'equivalent', 'struct', 'defined.', 'The', 'server', 'successfully', 'marshals', 'the', 'JSON', 'bytes', 'into', 'the', 'struct.', 'type', 'user', 'struct', '{', 'Id', '*', 'int64', 'json', ':', '"",omitempty""', 'Name', '*', 'string', 'json', ':', '"",omitempty""', 'Age', '*', 'int64', 'json', ':', '"",omitempty""', '}', 'How', 'do', 'I', 'create', 'a', 'dynamic', 'update', 'statement', 'depending', 'on', 'the', 'available', 'JSON', 'elements?', 'For', 'example,', 'I', 'might', 'get', 'the', 'Id', 'and', 'Age', 'alone.', 'How', 'can', 'I', 'create', 'a', 'update', 'statement', 'dynamically,', 'like', 'update', 'user', 'set', 'age', '=', '$', '1', 'where', 'id', '=', '$', '2', 'Another', 'time', 'it', 'might', 'be', 'Id', 'and', 'Name.', 'Appreciate', 'your', 'response.']"
1305,25094243,"

which seem correct but need current time and use now() somehow i guess. but havent figured out how.
","['I', 'need', 'to', 'format', 'time', 'like', 'this', 'Mon', ',', '16', 'Jun', '2014', '0', '9', ':', '19', ':', '01', '+', '02', '0', '0', 'following', 'code', 'a', ':=', 'time.RFC1123Z', 'give', 'me', 'Mon', ',', '02', 'Jan', '2006', '15', ':', '04', ':', '05', '-', '07', '0', '0', 'which', 'seem', 'correct', 'but', 'need', 'current', 'time', 'and', 'use', 'now()', 'somehow', 'i', 'guess.', 'but', 'havent', 'figured', 'out', 'how.']"
1306,25180509," method that returns a struct meant strictly for comparison?
","[""Let's"", 'say', 'I', 'have', 'a', 'lot', 'of', 'different', 'struct', 'types', 'which', 'all', 'satisfy', 'an', 'interface,', 'Food.', 'type', 'Food', 'interface', '{', 'Name', '()', 'string', 'Tastiness', '()', 'int', '}', 'type', 'fruit', 'struct', '{', 'species', 'string', 'numSeeds', 'int', '}', 'type', 'vegetable', 'struct', '{', 'commonName', 'string', 'weight', 'int', '}', 'func', '(', 'f', '*', 'fruit', ')', 'Name', '()', 'string', '{', 'return', 'f', '.', 'species', '}', 'func', '(', 'f', '*', 'fruit', ')', 'Tastiness', '()', 'int', '{', 'return', '100', '-', 'f', '.', 'numSeeds', '}', 'func', '(', 'v', '*', 'vegetable', ')', 'Name', '()', 'string', '{', 'return', 'v', '.', 'commonName', '}', 'func', '(', 'v', '*', 'vegetable', ')', 'Tastiness', '()', 'int', '{', 'return', '1', '}', 'The', 'structs', 'that', 'satisfy', 'the', 'Food', 'interface', 'do', 'so', 'with', 'functions', 'that', 'are', 'pointer', 'receivers', 'because', 'I', 'pass', 'them', 'around', 'often,', 'which', 'is', 'unwieldy', 'without', 'pointers.', 'Often,', 'I', 'want', 'to', 'make', 'comparisons', 'between', 'food1', 'and', 'food2,', 'and', 'so', 'I', 'construct', 'maps', 'that', 'look', 'like', 'foodmap', ':=', 'map', '[', 'Food', ']', 'bool', '.', 'What', 'I', 'really', 'want', 'to', 'check', 'is', 'if', 'the', 'underlying', 'structs', 'are', 'the', 'same', 'thing.', 'But,', 'because', ""it's"", 'always', 'pointers', 'that', 'are', 'satisfying', 'the', 'interface,', 'I', ""can't"", 'do', 'equality', 'or', 'presence', 'tests', 'using', 'maps', 'or', 'lists', 'if', 'I', 'create', 'two', 'of', 'the', 'same', 'kind', 'of', 'fruit', 'or', 'vegetable,', 'for', 'example.', 'Is', 'the', 'best', 'way', 'to', 'compare', 'Foods', 'to', 'not', 'use', 'map[Food]bool', 'and', 'instead', 'use', 'something', 'like', 'map[FoodKey],', 'where', 'any', 'struct', 'that', 'satsifies', 'Food', 'provides', 'a', 'FoodKey', '()', 'comparisonStruct', 'method', 'that', 'returns', 'a', 'struct', 'meant', 'strictly', 'for', 'comparison?']"
1307,25248534,"

When I execute the binary like this:

> test -b ""random""


I get the expected output, becuase there is one argument, and the flag is set:

1
-b true


However, when I execute the binary the other way around:

> test ""random"" -b


I get this:

2
-b false


Now, the flag isn't recodnized any more as flag, but as another argument.

Why is it that way? Is there a definition that flags come first and then the arguments? I always thought that the ""GNU-way"" of passing and parsing arguments is: The first places after the binary are reserved for mandatory arguments. And after that you can put optional arguments and flags.
","['I', 'am', 'parsing', 'command-line', 'arguments.', 'I', 'use', 'the', 'following', 'code:', 'var', 'flagB', '=', 'flag.Bool(""b"", false, ""boolflag"")', 'func', 'main', '()', '{', 'flag.Parse()', 'fmt.Println(flag.NArg())', 'fmt.Println(""-b"", *flagB)', '}', 'When', 'I', 'execute', 'the', 'binary', 'like', 'this:', '>', 'test', '-b', '""random""', 'I', 'get', 'the', 'expected', 'output,', 'becuase', 'there', 'is', 'one', 'argument,', 'and', 'the', 'flag', 'is', 'set:', '1', '-b', 'true', 'However,', 'when', 'I', 'execute', 'the', 'binary', 'the', 'other', 'way', 'around:', '>', 'test', '""random""', '-b', 'I', 'get', 'this:', '2', '-b', 'false', 'Now,', 'the', 'flag', ""isn't"", 'recodnized', 'any', 'more', 'as', 'flag,', 'but', 'as', 'another', 'argument.', 'Why', 'is', 'it', 'that', 'way?', 'Is', 'there', 'a', 'definition', 'that', 'flags', 'come', 'first', 'and', 'then', 'the', 'arguments?', 'I', 'always', 'thought', 'that', 'the', '""GNU-way""', 'of', 'passing', 'and', 'parsing', 'arguments', 'is:', 'The', 'first', 'places', 'after', 'the', 'binary', 'are', 'reserved', 'for', 'mandatory', 'arguments.', 'And', 'after', 'that', 'you', 'can', 'put', 'optional', 'arguments', 'and', 'flags.']"
1308,25266304,"

I was thinking that declaring var Reqs []Req should declare the variable, but it does not seem to be aware of it inside the ReadReqs function.  I do realize that globals are BAD but I would like to use global var for this simple program.
","['I', 'am', 'starting', 'out', 'with', 'GO', 'language,', 'and', 'getting', 'an', 'error', 'I', 'cannot', 'figure', 'out.', 'How', 'do', 'I', 'create', 'a', 'global', 'slice', 'that', 'all', 'functions', 'within', 'the', 'module', 'can', 'use?', 'Here', 'is', 'what', 'I', 'have:', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'Req', 'struct', '{', 'Req', 'int', 'Name', 'string', '}', 'var', 'Reqs', '[]', 'Req', 'func', 'ReadReqs', '(', 'fp', 'string', ')', '{', 'var', 'CReq', 'Req', ';', 'CReq', '.', 'Req', '=', '1', 'CReq', '.', 'Name', '=', '""first""', 'Reqs', ':=', 'append', '(', 'Reqs', ',', 'CReq', ')', '}', 'func', 'main', '()', '{', 'Reqs', ':=', 'make', '([]', 'Req', ',', '0', ')', 'if', 'len', '(', 'Reqs', ')', '>', '0', '{', 'fmt.Println(Reqs[0])', '}', 'fmt.Println(Reqs)', '}', 'This', 'code', 'will', 'not', 'compile', 'because', 'of', 'the', 'following', 'error:', './', 'question', '.', 'go', ':', '18', ':', 'Reqs', 'declared', 'and', 'not', 'used', 'I', 'was', 'thinking', 'that', 'declaring', 'var', 'Reqs', '[]Req', 'should', 'declare', 'the', 'variable,', 'but', 'it', 'does', 'not', 'seem', 'to', 'be', 'aware', 'of', 'it', 'inside', 'the', 'ReadReqs', 'function.', 'I', 'do', 'realize', 'that', 'globals', 'are', 'BAD', 'but', 'I', 'would', 'like', 'to', 'use', 'global', 'var', 'for', 'this', 'simple', 'program.']"
1309,25289593,"

Ideally, I'd be able to take a prepared query, and build up a list of upserts to be sent at the same time... but here, we get a result back from the database after each execution.  Any suggestions on how to go about this?

Edit:
My coworker found this open ticket that describes the problem... it looks to be a larger concern than strictly within the context of a transaction.
","[""I've"", 'been', 'messing', 'around', 'with', ""golang's"", 'sql', 'package', 'with', 'transactions,', 'and', ""I'm"", 'trying', 'to', 'understand', 'how', 'to', 'do', 'bulk', 'upserts', 'without', 'the', '""per', 'insert""', 'round', 'trip', 'communication', 'for', 'each', 'row.', 'The', 'examples', 'here', ""don't"", 'really', 'show', 'how', 'any', 'bulk', 'queries', 'would', 'be', 'done.', 'updateMoney', ',', 'err', ':=', 'db.Prepare(""INSERT INTO balance set money=?, id=? ON DUPLICATE UPDATE balance SET money=money+? WHERE id=?"")', '...', 'tx', ',', 'err', ':=', 'db.Begin()', '...', 'res', ',', 'err', ':=', 'tx.Stmt(updateMoney).Exec(123.45, 1, 123.45, 1)', 'res', ',', 'err', ':=', 'tx.Stmt(updateMoney).Exec(67.89, 2, 67.89, 2)', 'res', ',', 'err', ':=', 'tx.Stmt(updateMoney).Exec(10.23, 3, 10.23, 3)', '...', 'tx.Commit()', 'Ideally,', ""I'd"", 'be', 'able', 'to', 'take', 'a', 'prepared', 'query,', 'and', 'build', 'up', 'a', 'list', 'of', 'upserts', 'to', 'be', 'sent', 'at', 'the', 'same', 'time...', 'but', 'here,', 'we', 'get', 'a', 'result', 'back', 'from', 'the', 'database', 'after', 'each', 'execution.', 'Any', 'suggestions', 'on', 'how', 'to', 'go', 'about', 'this?', 'Edit:', 'My', 'coworker', 'found', 'this', 'open', 'ticket', 'that', 'describes', 'the', 'problem...', 'it', 'looks', 'to', 'be', 'a', 'larger', 'concern', 'than', 'strictly', 'within', 'the', 'context', 'of', 'a', 'transaction.']"
1310,25325114,"I need to execute several SQL queries (select, update, delete) concurrently and roll back if any goroutine errors out. Thus the question: are DB transactions safe for concurrent access?
","['Ideally,', ""I'd"", 'be', 'able', 'to', 'take', 'a', 'prepared', 'query,', 'and', 'build', 'up', 'a', 'list', 'of', 'upserts', 'to', 'be', 'sent', 'at', 'the', 'same', 'time...', 'but', 'here,', 'we', 'get', 'a', 'result', 'back', 'from', 'the', 'database', 'after', 'each', 'execution.', 'Any', 'suggestions', 'on', 'how', 'to', 'go', 'about', 'this?', 'Edit:', 'My', 'coworker', 'found', 'this', 'open', 'ticket', 'that', 'describes', 'the', 'problem...', 'it', 'looks', 'to', 'be', 'a', 'larger', 'concern', 'than', 'strictly', 'within', 'the', 'context', 'of', 'a', 'transaction.']"
1311,25325229,"

This code will compile with no errors, but when ran it will produce a runtime panic, but I can't see what would cause that in this code.

I am using these SDL2 Go bindings: https://github.com/veandco/go-sdl2
","['I', 'have', 'an', 'SDL2', 'go', 'program', 'which', 'tries', 'to', 'write', 'a', 'pixel', 'array', 'to', 'the', 'screen.', 'When', 'I', 'try', 'and', 'update', 'the', 'texture', 'with', 'the', 'new', 'pixels', 'the', 'program', 'panics', 'with', 'a', 'runtime', 'error:', 'fatal', 'error', ':', 'unexpected', 'signal', 'during', 'runtime', 'execution', 'Unfortunately', 'I', 'can', 'find', 'little', 'to', 'no', 'documentation', 'about', 'how', 'to', 'pass', 'around', 'unsafe', 'pointers', 'in', 'Go', 'and', ""I'm"", 'not', 'sure', 'if', ""I'm"", 'approaching', 'this', 'correctly,', 'here', 'is', 'some', 'example', 'code', 'that', 'exhibits', 'the', 'problem:', 'func', 'main', '()', '{', 'window', ':=', 'sdl', '.', 'CreateWindow', '(', '""test""', ',', 'sdl', '.', 'WINDOWPOS_UNDEFINED', ',', 'sdl', '.', 'WINDOWPOS_UNDEFINED', ',', '800', ',', '600', ',', 'sdl', '.', 'WINDOW_SHOWN', ')', 'renderer', ':=', 'sdl.CreateRenderer(window, -1, 0)', 'texture', ':=', 'sdl', '.', 'CreateTexture', '(', 'renderer', ',', 'sdl', '.', 'PIXELFORMAT_ARGB8888', ',', 'sdl', '.', 'TEXTUREACCESS_STATIC', ',', '800', ',', '600', ')', 'defer', 'renderer.Destroy()', 'defer', 'texture.Destroy()', 'defer', 'window.Destroy()', 'for', '{', 'pixels', ':=', 'make', '([]', 'uint32', ',', '800', '*', '600', ')', 'texture.Update(nil, unsafe.Pointer(&pixels), int(800*unsafe.Sizeof(pixels)))', 'window.UpdateSurface()', 'renderer.Clear()', 'renderer.Copy(texture, nil, nil)', 'renderer.Present()', '}', 'sdl.Delay(1000)', 'sdl.Quit()', '}', 'This', 'code', 'will', 'compile', 'with', 'no', 'errors,', 'but', 'when', 'ran', 'it', 'will', 'produce', 'a', 'runtime', 'panic,', 'but', 'I', ""can't"", 'see', 'what', 'would', 'cause', 'that', 'in', 'this', 'code.', 'I', 'am', 'using', 'these', 'SDL2', 'Go', 'bindings:', 'https://github.com/veandco/go-sdl2']"
1312,25333683,"

Edit: Apply go fmt on the code. Add an option to choose the size of the packing. Test 3 different sizes.
","[""I'm"", 'working', 'on', 'a', 'little', 'program', 'with', 'Go', '(v1.0.2).', ""I'm"", 'trying', 'to', 'load', 'lines', 'into', 'memory,', 'which', 'I', 'can', 'recall', 'by', 'index', '(the', 'first', 'column', 'of', 'a', 'line).', 'To', 'save', 'space,', 'I', 'compress', 'every', 'line', 'with', 'zlib.', 'Lines', 'are', 'grouped', 'by', 'blocks.', 'Items', 'are', 'loaded', 'from', 'a', 'file.', 'An', 'item', 'is', 'represented', 'by', 'a', 'line.', 'This', 'line', 'has', 'many', 'properties', 'separated', 'by', 'tabulation.', ""It's"", 'working', 'just', 'fine,', 'but', ""it's"", 'currently', 'really', 'slow.', 'It', 'took', 'me', 'almost', '50', 'sec', 'to', 'just', 'load', 'a', '40', 'Mb', 'file!', '(Note', 'that', 'if', 'I', 'disable', 'the', '""compress""', 'part,', 'it', 'takes', 'only', '0.87', 'sec).', ""I'm"", 'obviously', 'doing', 'something', 'wrong,', 'but', 'I', ""can't"", 'find', 'what.', 'Please', 'note', 'that', ""I'm"", 'a', 'beginner', 'in', 'this', 'language.', 'Note:', ""I'm"", 'stuck', 'with', 'Go', '1.0.2', 'and', ""can't"", 'update.', 'package', 'main', 'import', '(', '""bytes""', '""compress/zlib""', '""encoding/json""', '""flag""', '""fmt""', '""gotwcc/mylib""', '""io""', '""net/http""', '""os""', ')', 'type', 'Block', 'struct', '{', 'data', '[]', 'byte', '}', 'type', 'Row', 'struct', '{', 'offset', ',', 'len', 'uint32', 'block', '*', 'Block', '}', 'type', 'Cache', 'struct', '{', 'blocks', '[]', 'Block', 'indexes', 'map', '[', 'string', ']*', 'Row', 'enable_compress', 'bool', 'maxRowGroup', 'uint', '}', 'func', '(', 'this', '*', 'Cache', ')', 'dump', '()', '{', 'for', 'key', ',', 'value', ':=', 'range', 'this', '.', 'indexes', '{', 'fmt.Printf(""[%s] = \\""%s\\""\\n"", key, value.block)', '}', '}', 'func', '(', 'this', '*', 'Cache', ')', 'search', '(', 'item_id', 'string', ')', 'string', '{', 'row', ':=', 'this', '.', 'indexes', '[', 'item_id', ']', 'if', 'row', '==', 'nil', '{', 'return', '""(Not found)""', '}', 'block', ':=', 'this.uncompress(row.block.data)', 'slice', ':=', 'block', '[', 'row', '.', 'offset', ':', 'row', '.', 'offset', '+', 'row', '.', 'len', ']', 'return', 'string', '(', 'slice', ')', '}', 'func', '(', 'this', '*', 'Cache', ')', 'compress', '(', 'data', '[]', 'byte', ')', '[]', 'byte', '{', 'if', '!', 'this', '.', 'enable_compress', '{', 'return', 'data', '}', 'var', 'b', 'bytes', '.', 'Buffer', 'w', ':=', 'zlib.NewWriter(&b)', 'w.Write(data)', 'w.Close()', 'return', 'b.Bytes()', '}', 'func', '(', 'this', '*', 'Cache', ')', 'uncompress', '(', 'data', '[]', 'byte', ')', '[]', 'byte', '{', 'if', '!', 'this', '.', 'enable_compress', '{', 'return', 'data', '}', 'var', 'res', 'bytes', '.', 'Buffer', 'b', ':=', 'bytes.NewReader(data)', 'r', ',', 'err', ':=', 'zlib.NewReader(b)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'io.Copy(&res, r)', 'r.Close()', 'return', 'res.Bytes()', '}', 'func', '(', 'this', '*', 'Cache', ')', 'loadFile', '(', 's', 'string', ')', '{', 'type', 'TempRowBuf', 'struct', '{', 'item_id', '[]', 'byte', 'offset', ',', 'len', 'uint32', '}', 'file', ',', 'err', ':=', 'os.Open(s)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err.Error())', '}', 'defer', 'file.Close()', 'scanner', ':=', 'mybufio.NewScanner(file)', 'scanner.Split(mybufio.ScanLines)', 'var', 'tmp_buf', 'bytes', '.', 'Buffer', 'var', 'buffer', 'bytes', '.', 'Buffer', 'var', 'tmp_list', '[]', 'TempRowBuf', 'this', '.', 'indexes', '=', 'make', '(', 'map', '[', 'string', ']*', 'Row', ')', 'var', 'offset', 'uint32', '=', '0', 'nb', ':=', 'this', '.', 'maxRowGroup', 'for', 'scanner.Scan()', '{', 'nb', '--', 'tmp_buf.Reset()', 'tmp_buf.Write(scanner.Bytes())', 'line', ':=', 'tmp_buf.Bytes()', 'item_id', ',', '_', ':=', ""tmp_buf.ReadBytes('\\t')"", 'item_id', '=', 'item_id', '[', '0', ':', 'len', '(', 'item_id', ')-', '1', ']', 'size', ':=', 'uint32', '(', 'len', '(', 'line', '))', 'buffer.Write(line)', 'tmp_list', '=', 'append', '(', 'tmp_list', ',', 'TempRowBuf', '{', 'item_id', ',', 'offset', ',', 'size', '})', 'offset', '+=', 'size', 'if', 'nb', '<=', '0', '{', 'compressed', ':=', 'this.compress(buffer.Bytes())', 'buff', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'compressed', '))', 'copy', '(', 'buff', ',', 'compressed', ')', 'var', 'block', '*', 'Block', '=', '&', 'Block', '{', 'buff', '}', 'for', '_', ',', 'tmp', ':=', 'range', 'tmp_list', '{', 'this', '.', 'indexes', '[', 'string', '(', 'tmp', '.', 'item_id', ')]', '=', '&', 'Row', '{', 'tmp', '.', 'offset', ',', 'tmp', '.', 'len', ',', 'block', '}', '}', 'nb', '=', 'this', '.', 'maxRowGroup', 'offset', '=', '0', 'tmp_list', '=', 'nil', 'buffer.Reset()', '}', '}', 'if', 'nb', '>', '0', '{', 'compressed', ':=', 'this.compress(buffer.Bytes())', 'buff', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'compressed', '))', 'copy', '(', 'buff', ',', 'compressed', ')', 'var', 'block', '*', 'Block', '=', '&', 'Block', '{', 'buff', '}', 'for', '_', ',', 'tmp', ':=', 'range', 'tmp_list', '{', 'this', '.', 'indexes', '[', 'string', '(', 'tmp', '.', 'item_id', ')]', '=', '&', 'Row', '{', 'tmp', '.', 'offset', ',', 'tmp', '.', 'len', ',', 'block', '}', '}', '}', '}', 'func', 'wsCacheHandler', '(', 'cache', '*', 'Cache', ',', 'writer', 'http', '.', 'ResponseWriter', ',', 'request', '*', 'http', '.', 'Request', ')', '{', 'var', 'value', 'map', '[', 'string', ']', 'string', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'item_id', ':=', 'request.FormValue(""item_id"")', 'value', '[', '""item_id""', ']', '=', 'item_id', 'value', '[', '""raw""', ']', '=', 'cache.search(item_id)', 'jsonResp', ',', 'err', ':=', 'json.Marshal(value)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""error:"", err)', '}', 'else', '{', 'fmt.Fprintf(writer, ""%s"", string(jsonResp))', '}', '}', 'func', 'main', '()', '{', 'filename', ':=', 'flag.String(""data"", ""default.txt"", ""The data filename"")', 'no_http', ':=', 'flag.Bool(""no-http"", false, ""Do not start an http server"")', 'dumpMap', ':=', 'flag.Bool(""dump"", false, ""If we should dump the map to stdout"")', 'noCompression', ':=', 'flag.Bool(""no-compress"", false, ""Disable compression"")', 'maxRowGroup', ':=', 'flag.Uint(""max-row-group"", 100, ""How much line to group when doing compression"")', 'flag.Parse()', 'var', 'cache', 'Cache', 'cache', '.', 'enable_compress', '=', '!*', 'noCompression', 'cache', '.', 'maxRowGroup', '=', '*', 'maxRowGroup', 'cache.loadFile(*filename)', 'if', '*', 'dumpMap', '{', 'cache.dump()', 'fmt.Println(cache.search(""100001""))', 'fmt.Println(cache.search(""100002""))', 'fmt.Println(cache.search(""100003""))', 'fmt.Println(cache.search(""100004""))', 'fmt.Println(cache.search(""100005""))', 'fmt.Println(cache.search(""100006""))', 'fmt.Println(cache.search(""100007""))', 'fmt.Println(cache.search(""100008""))', 'fmt.Println(cache.search(""100009""))', 'fmt.Println(cache.search(""100010""))', '}', 'if', '!*', 'no_http', '{', 'http.HandleFunc(""/"", func(writer http.ResponseWriter, request *http.Request)', '{', 'wsCacheHandler', '(&', 'cache', ',', 'writer', ',', 'request', ')', '})', 'fmt.Println(""Cache loaded, now listening on port 8585..."")', 'http.ListenAndServe("":8585"", nil)', '}', '}', 'This', 'is', 'the', 'test', 'file', 'I', 'use', ""(I'm"", 'not', 'pasting', 'the', '40', 'Mo', 'file', 'here', ':p):', 'data.txt:', '100001', 'bar', '100002', 'foo', '100003', 'bob', '100004', 'nuts', '100005', 'go', 'go', 'powran', '100006', 'green', '100007', 'test', '100008', 'alongwordwithlotofletters', '100009', '100010', 'space', 'space', 'space', 'I', 'launch', 'my', 'application', 'like', 'this:', 'time', './', 'mybin', '-', 'data', '=', 'data', '.', 'txt', '-', 'no', '-', 'http', '-', 'no', '-', 'compress', '=>', 'ok', '(', '0', '.', '6', 'sec', 'to', 'load', ')', 'time', './', 'mybin', '-', 'data', '=', 'data', '.', 'txt', '-', 'no', '-', 'http', '--', 'max_row_group', '=', '100', '=>', 'slow', '(', '12', '.', '1', 'sec', 'to', 'load', ')', 'time', './', 'mybin', '-', 'data', '=', 'data', '.', 'txt', '-', 'no', '-', 'http', '--', 'max_row_group', '=', '1000', '=>', 'still', 'slow', '(', '10', '.', '9', 'sec', 'to', 'load', ')', 'time', './', 'mybin', '-', 'data', '=', 'data', '.', 'txt', '-', 'no', '-', 'http', '--', 'max_row_group', '=', '10000', '=>', 'still', 'slow', '(', '10', '.', '6', 'sec', 'to', 'load', ')', 'Edit:', 'Apply', 'go', 'fmt', 'on', 'the', 'code.', 'Add', 'an', 'option', 'to', 'choose', 'the', 'size', 'of', 'the', 'packing.', 'Test', '3', 'different', 'sizes.']"
1313,25342806,"

Is there a different way to fully encapsulate open file management into a function, yet still nicely release the handle?
","['When', 'trying', 'to', 'move', 'log', 'setup', 'code', 'into', 'a', 'separate', 'function', 'I', 'ran', 'into', 'inability', 'to', 'hide', 'the', 'destination', 'file', 'object', 'from', 'the', 'main', 'function.', 'In', 'the', 'following', 'INCORRECT', 'simplified', 'example', 'the', 'attempt', 'is', 'made', 'to', 'setup', 'log', 'writing', 'to', 'both', 'Stderr', 'and', 'a', 'file', 'via', 'a', 'single', 'function', 'call:', 'package', 'main', 'import', '(', '""io""', '""log""', '""os""', ')', 'func', 'SetupLogging', '()', '{', 'logFile', ',', 'err', ':=', 'os.OpenFile(""test.log"", os.O_APPEND|os.O_CREATE, 0666)', 'if', 'err', '!=', 'nil', '{', 'log.Panicln(err)', '}', 'defer', 'logFile.Close()', 'log.SetOutput(io.MultiWriter(os.Stderr, logFile))', '}', 'func', 'main', '()', '{', 'SetupLogging', '()', 'log.Println(""Test message"")', '}', 'Clearly', 'is', 'does', 'not', 'work', 'because', 'defer', 'closes', 'the', 'log', 'file', 'at', 'the', 'end', 'of', 'the', 'SetupLogging', 'function.', 'A', 'working', 'example', 'below', 'adds', 'extra', 'code', 'and', 'IMHO', 'looses', 'some', 'clarity', 'if', 'repeated', 'in', 'a', 'larger', 'application', 'as', 'a', 'pattern:', 'package', 'main', 'import', '(', '""io""', '""log""', '""os""', ')', 'func', 'SetupLogging', '()', '*', 'os', '.', 'File', '{', 'logFile', ',', 'err', ':=', 'os.OpenFile(""test.log"", os.O_APPEND|os.O_CREATE, 0666)', 'if', 'err', '!=', 'nil', '{', 'log.Panicln(err)', '}', 'log.SetOutput(io.MultiWriter(os.Stderr, logFile))', 'return', 'logFile', '}', 'func', 'main', '()', '{', 'logf', ':=', 'SetupLogging', '()', 'defer', 'logf.Close()', 'log.Println(""Test message"")', '}', 'Is', 'there', 'a', 'different', 'way', 'to', 'fully', 'encapsulate', 'open', 'file', 'management', 'into', 'a', 'function,', 'yet', 'still', 'nicely', 'release', 'the', 'handle?']"
1314,25350710,"

However that brings bunch of other problems:


I need to check if the Letter is not already present in LetterList because I can't use the letters as keys
There's no direct way to sort them (using Int.sort() or so)


Using the structures just doesn't feel elegant at all. Is there a better solution?
","[""Let's"", 'say', 'I', 'have', 'a', 'string', 'and', 'I', 'would', 'like', 'to', 'count', 'each', ""letter's"", 'frequency', 'and', 'then', 'sort', 'the', 'table', 'by', 'the', 'frequency.', 'Desired', 'output', 'of', '""hello', 'larry""', 'would', 'be:', '+--------+-----------+', '|', 'Letter', '|', 'Occurence', '|', '+--------+-----------+', '|', 'l', '|', '3', '|', '|', 'r', '|', '2', '|', '|', 'h', '|', '1', '|', '|', 'e', '|', '1', '|', '|', 'o', '|', '1', '|', '|', 'a', '|', '1', '|', '|', 'y', '|', '1', '|', '+--------+-----------+', 'First', 'I', 'thought', ""I'll"", 'deal', 'with', 'this', 'easily', 'using', 'map', 'having', 'the', 'letters', 'as', 'keys.', 'This', 'is', 'really', 'easy.', 'However,', 'map', 'items', ""don't"", 'have', 'an', 'order', 'hence', ""can't"", 'be', 'sorted.', 'I', 'guess', 'I', 'could', 'deal', 'with', 'this', 'using', 'a', 'structure:', 'type', 'Letter', 'struct', '{', 'Value', 'string', 'Score', 'int', '}', 'type', 'LetterList', '[]', 'Letter', 'However', 'that', 'brings', 'bunch', 'of', 'other', 'problems:', 'I', 'need', 'to', 'check', 'if', 'the', 'Letter', 'is', 'not', 'already', 'present', 'in', 'LetterList', 'because', 'I', ""can't"", 'use', 'the', 'letters', 'as', 'keys', ""There's"", 'no', 'direct', 'way', 'to', 'sort', 'them', '(using', 'Int.sort()', 'or', 'so)', 'Using', 'the', 'structures', 'just', ""doesn't"", 'feel', 'elegant', 'at', 'all.', 'Is', 'there', 'a', 'better', 'solution?']"
1315,25376313,"Has somebody a good example application, how to use the go library http://blog.golang.org/context. 
","['Has', 'somebody', 'a', 'good', 'example', 'application,', 'how', 'to', 'use', 'the', 'go', 'library', 'http://blog.golang.org/context.']"
1316,25391051,"

echo $GOPATH outputs:

/Users/Swanros/Go


What am I missing? I've been dealing with this all morning.
","['When', 'I', 'try', 'to', 'run', 'go', 'install', 'I', 'get', 'the', 'following:', 'go', 'install', 'go', 'lang', '-', 'book/chapter11/math: mkdir /Users/Swanros/Go/pkg/darwin_amd64:', 'permission', 'denied', 'Then', 'I', 'try', 'sudo', 'go', 'install', 'and', 'get', 'the', 'following:', 'go', 'install', ':', 'no', 'install', 'location', 'for', 'directory', '/Users/Swanros/Go/src/golang-book/chapter11/math', 'outside', 'GOPATH', ""Here's"", 'my', 'go', 'env:', 'GOARCH', '=', '""amd64""', 'GOBIN', '=', '""""', 'GOCHAR', '=', '""6""', 'GOEXE', '=', '""""', 'GOHOSTARCH', '=', '""amd64""', 'GOHOSTOS', '=', '""darwin""', 'GOOS', '=', '""darwin""', 'GOPATH', '=', '""/Users/Swanros/Go""', 'GORACE', '=', '""""', 'GOROOT', '=', '""/usr/local/go""', 'GOTOOLDIR', '=', '""/usr/local/go/pkg/tool/darwin_amd64""', 'CC', '=', '""clang""', 'GOGCCFLAGS', '=', '""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common""', 'CXX', '=', '""clang++""', 'CGO_ENABLED', '=', '""1""', 'echo', '$GOPATH', 'outputs:', '/Users/Swanros/Go', 'What', 'am', 'I', 'missing?', ""I've"", 'been', 'dealing', 'with', 'this', 'all', 'morning.']"
1317,25475003,"

So I want to handle ask from the index.html and the results page and run response, which will render the results page on submission of the ask form from index.html and the results page.
","['I', 'am', 'able', 'to', 'load', 'a', 'html', 'page', '(', 'index.html', ')', ""who's"", 'contents', 'looks', 'like', 'the', 'following:', 'What', 'I', 'am', 'trying', 'to', 'so', 'is', 'render', 'index.html', 'and', 'then', 'on', 'submission', 'of', 'the', 'ask', 'render', 'a', 'copy', 'of', 'index.html', 'except', 'have', 'some', 'of', 'the', 'contents', 'come', 'from', 'my', 'golang', 'code', 'as', 'a', 'results', 'page.', 'When', 'I', 'submit', 'the', 'form', 'in', 'index.html,', 'I', 'get', 'a', 'blank', 'page.', 'But', 'I', 'am', 'getting', 'no', 'data', 'received', 'when', 'going', 'to', 'localhost:8000/view', 'or', 'localhost:8000/view?q=hello+world', 'in', 'the', 'browser.', 'And', 'in', 'the', 'terminal,', 'I', 'get', 'this', 'and', 'a', 'lot', 'more,', 'but', 'this', 'is', 'the', 'first', 'line:', 'http:', 'panic', 'serving', '[::1]:53803:', 'runtime', 'error:', 'invalid', 'memory', 'address', 'or', 'nil', 'pointer', 'dereference', 'what', 'does', 'it', 'mean', 'and', 'how', 'can', 'I', 'fix', 'it?', 'WhenI', 'go', 'to', '/ask', 'or', '/ask?q=hello+world,', 'which', 'is', 'what', 'I', 'am', 'trying', 'to', 'do,', 'I', 'get', 'the', 'blank', 'page', 'with', 'no', 'errors.', 'I', 'am', 'trying', 'to', 'handle', 'ask', 'on', 'the', 'initial', 'page', 'that', 'is', 'loaded', 'and', 'on', 'the', 'results', 'page', 'once', 'that', 'ask', 'form', 'has', 'been', 'submitted.', 'index.html,', 'view.html,', 'and', 'edit.html', 'all', 'have', 'this:', 'Here', 'is', 'my', 'code', 'now:', 'package', 'main', 'import', '(', '""fmt""', '""net/http""', '""github.com/zenazn/goji""', '""github.com/zenazn/goji/web""', '""html/template""', '""io/ioutil""', ')', 'type', 'Page', 'struct', '{', 'Title', 'string', 'Body', '[]', 'byte', '}', 'func', '(', 'p', '*', 'Page', ')', 'save', '()', 'error', '{', 'filename', ':=', 'p', '.', 'Title', '+', '"".txt""', 'return', 'ioutil.WriteFile(filename, p.Body, 0600)', '}', 'func', 'loadPage', '(', 'title', 'string', ')', '(*', 'Page', ',', 'error', '){', 'filename', ':=', 'title', '+', '"".txt""', 'body', ',', 'err', ':=', 'ioutil.ReadFile(filename)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', '&', 'Page', '{', 'Title', ':', 'title', ',', 'Body', ':', 'body', '},', 'nil', '}', 'func', 'renderTemplate', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'tmpl', 'string', ',', 'p', '*', 'Page', '){', 't', ',', 'err', ':=', 'template.ParseFiles(tmpl + "".html"")', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 't.Execute(w, p)', '}', 'func', 'viewHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', '){', '//', 'title', ':=', 'r.URL.Path[len(""/view/""):]', 'title', ':=', 'r.FormValue(""q"")', 'p', ',', 'err', ':=', 'loadPage', '(', 'title', ')', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'renderTemplate', '(', 'w', ',', '""view""', ',', 'p', ')', '}', 'func', 'editHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', '){', '//', 'title', ':=', 'r.URL.Path[len(""/edit/""):]', 'title', ':=', 'r.FormValue(""q"")', 'p', ',', 'err', ':=', 'loadPage', '(', 'title', ')', 'if', 'err', '!=', 'nil', '{', 'p', '=', '&', 'Page', '{', 'Title', ':', 'title', '}', 'fmt.Println(err)', '}', 'renderTemplate', '(', 'w', ',', '""edit""', ',', 'p', ')', '}', 'func', 'response', '(', 'c', 'web', '.', 'C', ',', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', '){', '}', 'func', 'serveSingle', '(', 'filename', 'string', ')', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'return', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'http.ServeFile(w, r, filename)', '}', '}', 'func', 'main', '()', '{', 'go', 'ji.Get(""/"", serveSingle(""Projects/Go/src/web/site/index.html""))', 'go', 'ji.Handle(""/ask"", response)', 'http.HandleFunc(""/view/"", viewHandler)', 'http.HandleFunc(""/edit/"", editHandler)', 'go', 'ji.Serve()', '}', 'So', 'I', 'want', 'to', 'handle', 'ask', 'from', 'the', 'index.html', 'and', 'the', 'results', 'page', 'and', 'run', 'response,', 'which', 'will', 'render', 'the', 'results', 'page', 'on', 'submission', 'of', 'the', 'ask', 'form', 'from', 'index.html', 'and', 'the', 'results', 'page.']"
1318,25484122,"

But it must store values for about 10 minutes and then clear it from memory.
Second condition is records amount - it must be huge. This data-structure must add at least 2-5K records per second.

So, what is the most correct way in Go to make it?

I'm trying to make goroutine with timeout for each new elemnt. And one(or more) garbage-collector goroutine with channel to receive timeouts and clear elements.
But I'm not sure it's the most clear way. Is it Ok to have millions of waiting goroutines with timeouts?

Thanks.
","['I', 'need', 'to', 'build', 'a', 'data-structure', 'like', 'this:', 'map', '[', 'string', ']', 'SomeType', 'But', 'it', 'must', 'store', 'values', 'for', 'about', '10', 'minutes', 'and', 'then', 'clear', 'it', 'from', 'memory.', 'Second', 'condition', 'is', 'records', 'amount', '-', 'it', 'must', 'be', 'huge.', 'This', 'data-structure', 'must', 'add', 'at', 'least', '2-5K', 'records', 'per', 'second.', 'So,', 'what', 'is', 'the', 'most', 'correct', 'way', 'in', 'Go', 'to', 'make', 'it?', ""I'm"", 'trying', 'to', 'make', 'goroutine', 'with', 'timeout', 'for', 'each', 'new', 'elemnt.', 'And', 'one(or', 'more)', 'garbage-collector', 'goroutine', 'with', 'channel', 'to', 'receive', 'timeouts', 'and', 'clear', 'elements.', 'But', ""I'm"", 'not', 'sure', ""it's"", 'the', 'most', 'clear', 'way.', 'Is', 'it', 'Ok', 'to', 'have', 'millions', 'of', 'waiting', 'goroutines', 'with', 'timeouts?', 'Thanks.']"
1319,25496170,"

I don't understand this golang makefile. Is there any tutorial for golang makefiles? I searched Google and didn't find any complete one. For example, I don't see any explanation for what is ""cover,"" etc.
","['COVERPROFILE', '=', 'cover', '.', 'out', 'default', ':', 'test', 'cover', ':', 'go', 'test', '-', 'coverprofile', '=$(', 'COVERPROFILE', ')', '.', 'go', 'tool', 'cover', '-', 'html', '=$(', 'COVERPROFILE', ')', 'rm', '$(', 'COVERPROFILE', ')', 'dependencies', ':', 'go', 'get', '-', 'd', '.', 'test', ':', 'go', 'test', '-', 'i', './...', 'go', 'test', '-', 'v', './...', '.', 'PHONY', ':', 'coverage', 'dependencies', 'test', 'I', ""don't"", 'understand', 'this', 'golang', 'makefile.', 'Is', 'there', 'any', 'tutorial', 'for', 'golang', 'makefiles?', 'I', 'searched', 'Google', 'and', ""didn't"", 'find', 'any', 'complete', 'one.', 'For', 'example,', 'I', ""don't"", 'see', 'any', 'explanation', 'for', 'what', 'is', '""cover,""', 'etc.']"
1320,25498505,"

For this declaration. My understanding is,this is a function pointer. Its name is ApplyFunc. 
And this function takes commitIndex and cmd as inputs. It returns []byte.

Is my understanding right?
thanks!
","['type', 'ApplyFunc', 'func', '(', 'commitIndex', 'uint64', ',', 'cmd', '[]', 'byte', ')', '[]', 'byte', 'For', 'this', 'declaration.', 'My', 'understanding', 'is,this', 'is', 'a', 'function', 'pointer.', 'Its', 'name', 'is', 'ApplyFunc.', 'And', 'this', 'function', 'takes', 'commitIndex', 'and', 'cmd', 'as', 'inputs.', 'It', 'returns', '[]byte.', 'Is', 'my', 'understanding', 'right?', 'thanks!']"
1321,25499670,"I'm install the go with the go1.3.1.windows-amd64.msi, after installation  GOROOT is default setting, I found the 
D:\Programs\Go\bin in the PATH,then I create a GOPATH environment variant,
when using the 'go get' command, error occurs:

package github.com/coreos/etcd: cannot download, $GOPATH must not be set to $GOROOT. For more details see: go help gopath

OS: windows 7 

GOPATH will conflict with GOROOT?

How can I set these two PATH values?
","[""I'm"", 'install', 'the', 'go', 'with', 'the', 'go1.3.1.windows-amd64.msi,', 'after', 'installation', 'GOROOT', 'is', 'default', 'setting,', 'I', 'found', 'the', 'D:\\Programs\\Go\\bin', 'in', 'the', 'PATH,then', 'I', 'create', 'a', 'GOPATH', 'environment', 'variant,', 'when', 'using', 'the', ""'go"", ""get'"", 'command,', 'error', 'occurs:', 'package', 'github.com/coreos/etcd:', 'cannot', 'download,', '$GOPATH', 'must', 'not', 'be', 'set', 'to', '$GOROOT.', 'For', 'more', 'details', 'see:', 'go', 'help', 'gopath', 'OS:', 'windows', '7', 'GOPATH', 'will', 'conflict', 'with', 'GOROOT?', 'How', 'can', 'I', 'set', 'these', 'two', 'PATH', 'values?']"
1322,25519638,"

I've written a fair amount of Go code so far and do not understand why the errors on line 9 or the errors on line 13 are occurring! Anyone able to explain?
","['When', 'compiling', 'the', 'following', 'code...', 'package', 'camera', 'type', 'camera', 'struct', '{', 'position', '[', '3', ']', 'float64', 'viewWidth', 'int', 'viewHeight', 'int', '}', 'func', '(', 'c', 'camera', ')', 'SwitchToCartesianThreeSpace', '(', 'x', ',', 'y', 'int', ')', '[', '3', ']', 'float64', '{', '// LINE 9', 'var', 'x3', 'float64', '=', '0', '// view is set to the origin', 'var', 'y3', 'float64', '=', 'float64', '(', 'x', ')', '-', '(', 'float64', '(', 'c', '.', 'viewWidth', ')', '/', '2', ')', 'var', 'z3', 'float64', '=', 'float64', '(-', 'y', ')', '+', '(', 'float64', '(', 'c', '.', 'viewHeight', ')', '/', '2', ')', 'result', ':=', '[', '3', ']', 'float64', '{', 'x3', ',', 'y3', ',', 'z3', '}', '// LINE 13', 'return', 'result', '}', '...the', 'following', 'errors', 'occur.', 'camera/camera.go:9:', 'undefined', ':', 'x', 'camera/camera.go:9:', 'undefined', ':', 'y', 'camera/camera.go:11:', 'undefined', ':', 'x', 'camera/camera.go:12:', 'undefined', ':', 'y', 'camera/camera.go:13:', 'cannot', 'use', 'x3', '(', 'type', 'float64', ')', 'as', 'type', '[', '3', ']', 'float64', 'in', 'array', 'element', 'camera/camera.go:13:', 'cannot', 'use', 'y3', '(', 'type', 'float64', ')', 'as', 'type', '[', '3', ']', 'float64', 'in', 'array', 'element', 'camera/camera.go:13:', 'cannot', 'use', 'z3', '(', 'type', 'float64', ')', 'as', 'type', '[', '3', ']', 'float64', 'in', 'array', 'element', ""I've"", 'written', 'a', 'fair', 'amount', 'of', 'Go', 'code', 'so', 'far', 'and', 'do', 'not', 'understand', 'why', 'the', 'errors', 'on', 'line', '9', 'or', 'the', 'errors', 'on', 'line', '13', 'are', 'occurring!', 'Anyone', 'able', 'to', 'explain?']"
1323,25595011," file from the releases page, and I cannot figure out how to run the binary. I took a few stabs at using go run, and sh, but no luck. Can anyone offer a few more details?
","['I', 'have', 'downloaded', 'and', 'unzipped', 'the', 'hugo_0', '.', '11', '_linux_amd64', '.', 'tar', '.', 'gz', 'file', 'from', 'the', 'releases', 'page,', 'and', 'I', 'cannot', 'figure', 'out', 'how', 'to', 'run', 'the', 'binary.', 'I', 'took', 'a', 'few', 'stabs', 'at', 'using', 'go', 'run,', 'and', 'sh,', 'but', 'no', 'luck.', 'Can', 'anyone', 'offer', 'a', 'few', 'more', 'details?']"
1324,25651501,"Go has very nice io.Reader and io.Writer interfaces, that roughly correspond to java.io.InputStream and java.io.OutputStream classes in Java (i.e. io.Reader = stream of bytes, io.Writer = sink for bytes).

I'm wondering, if Go also has some equivalent of java.io.Reader (stream of characters) and java.io.Writer (sink for characters) classes.

What I want is to read/write string from/to stream, without thinking about the encoding all the time + support for different encodings than just UTF8 (which is what combination of io.Reader + string typecasting gives me almost for free).

Update: so I guess my description is confusing, and I should have avoided comparison to Java stuff. What I want is something like this:

Reader part, read next 128 bytes, and return Go string by decoding bytes using ISO-8859-2 charset.


stringReader := NewStringReader(reader, ""iso-8859-2"")
stringReader.read(128)


Writer part, convert stuff to UTF16-BE bytes, and write it to the writer:


stringWriter := NewStringWriter(writer, ""utf16be"")
stringWriter.write(""馞鮂 擙樲橚 褗褆諓"");

","['file', 'from', 'the', 'releases', 'page,', 'and', 'I', 'cannot', 'figure', 'out', 'how', 'to', 'run', 'the', 'binary.', 'I', 'took', 'a', 'few', 'stabs', 'at', 'using', 'go', 'run,', 'and', 'sh,', 'but', 'no', 'luck.', 'Can', 'anyone', 'offer', 'a', 'few', 'more', 'details?']"
1325,25668980,"
","['I', 'want', 'to', 'change', 'namespace', 'in', 'go.', 'When', ""I'm"", 'compiling', 'and', 'running', 'code', 'in', 'C', 'it', 'works', 'fine,', 'but', 'in', 'go', 'I', 'got', 'errno', '22', 'on', 'netns', 'syscall.', 'Any', 'Idea', 'why', 'this', 'could', 'occur?', 'go)', '$', 'go', 'build', 'main', '.', 'go', ';', './', 'main', 'setns', 'mnt', ':', 'Invalid', 'argument', 'panic', ':', '-', '1', 'go', 'routine', '1', '[', 'running', ']:', 'runtime.panic(0x423b80, 0xffffffffffffffff)', '/usr/local/go/src/pkg/runtime/panic.c:266', '+', '0xb6', 'main.main()', 'main', '.', 'go', ':', '81', '+', '0x86', '$', 'c)', '$', 'grep', '^//', 'main', '.', 'go', '|', 'sed', ""'s/\\/\\///'"", '|', 'sed', ""'s/__main/main/'"", '>', 'main', '.', 'c', ';', 'gcc', 'main', '.', 'c', '-', 'o', 'main', ';', './', 'main', '$', 'The', 'code', 'below:', 'package', 'main', '//', '//', '#define', '_GNU_SOURCE', '//', '#include', '//', '#include', '//', '#include', '//', '#include', '//', '#include', '//', '#include', '//', '#include', '//', '//', '#define', 'NETNS_RUN_DIR', '""/run/netns""', '//', '#define', 'MNTNS_RUN_DIR', '""/run/mntns""', '//', '//', '#ifndef', 'HAVE_SETNS', '//', '//', 'int', '//', 'setns(int', 'fd,', 'int', 'nstype)', '{', '//', '#ifdef', '__NR_setns', '//', 'return', 'syscall(__NR_setns,', 'fd,', 'nstype);', '//', '#else', '//', 'errno', '=', 'ENOSYS;', '//', 'return', '-1;', '//', '#endif', '//', '}', '//', '//', '#endif', '/*', 'HAVE_SETNS', '*/', '//', '//', '//', 'int', '//', 'ChangeNamespace(char', '*name)', '//', '{', '//', 'char', 'net_path[MAXPATHLEN];', '//', 'char', 'mnt_path[MAXPATHLEN];', '//', 'int', 'fd;', '//', '//', 'snprintf(net_path,', 'sizeof(net_path),', '""%s/%s"",', 'NETNS_RUN_DIR,', 'name);', '//', 'snprintf(mnt_path,', 'sizeof(mnt_path),', '""%s/%s"",', 'MNTNS_RUN_DIR,', 'name);', '//', '//', 'fd', '=', 'open(net_path,', 'O_RDONLY);', '//', 'if', '(fd', '<', '0)', '{', '//', 'perror(""open', 'net"");', '//', 'return', '-1;', '//', '}', '//', '//', 'if', '(setns(fd,', '0)', '<', '0)', '{', '//', 'perror(""setns', 'net"");', '//', 'return', '-1;', '//', '}', '//', '//', 'fd', '=', 'open(mnt_path,', 'O_RDONLY);', '//', 'if', '(fd', '<', '0)', '{', '//', 'perror(""open', 'mnt"");', '//', 'return', '-1;', '//', '}', '//', '//', 'if', '(setns(fd,', '0)', '<', '0)', '{', '//', 'perror(""setns', 'mnt"");', '//', 'return', '-1;', '//', '}', '//', '//', 'return', '0;', '//', '}', '//', '//', 'int', '//', '__main(int', 'argc,', 'char', '*argv[])', '{', '//', 'ChangeNamespace(""ns"");', '//', 'return', '0;', '//', '}', '//', 'import', '""C""', 'import', '""unsafe""', 'func', 'main', '()', '{', 'name', ':=', 'C.CString(""ns"")', 'defer', 'C.free(unsafe.Pointer(name))', 'i', ':=', 'int', '(', 'C.ChangeNamespace(name))', 'if', 'i', '<', '0', '{', 'panic', '(', 'i', ')', '}', '}']"
1326,25715581,"

Any ideas what is going wrong, what I can check, or how I can get this to work?

Update

I did a test on a Linux VM and this works with that exact code.  I am able to use pyodbc with Python to connect on my Windows machine just fine using equivalent code, so this must be some sort of issue with this ODBC library on Windows.  I think at this point unless there are other ideas, I'm going to try some other libraries or open a bug report with the library author.
","['I', 'am', 'attempting', 'to', 'use', 'ODBC', 'to', 'query', 'an', 'IBM', 'iSeries', 'server', '(IBM', 'i)', 'using', 'https://code.google.com/p/odbc/.', 'I', 'seem', 'to', 'think', 'I', 'had', 'this', 'working', 'a', 'while', 'back', 'when', 'first', 'testing', 'but', 'the', 'server', 'has', 'since', 'been', 'updated,', 'iSeries', 'Access', 'updated,', 'and', 'I', 'am', 'using', 'Go', '1.3.1', 'It', 'seems', 'to', 'connect', 'fine,', 'but', 'the', 'query', 'causes', 'an', 'error.', 'I', 'am', 'guessing', 'I', 'am', 'missing', 'something', 'with', 'either', 'the', 'driver', 'or', 'the', 'query', 'being', 'in', 'the', 'correct', 'encoding', 'but', 'I', 'am', 'not', 'sure', 'how', 'to', 'address', 'it', 'or', 'if', 'it', 'is', 'perhaps', 'a', 'bug', 'with', 'the', 'odbc', 'library', 'and', 'I', 'should', 'open', 'an', 'issue', 'there.', 'My', 'code', 'is', 'as', 'follows:', 'package', 'main', 'import', '(', '_', '""code.google.com/p/odbc""', '""database/sql""', '""fmt""', '""log""', ')', 'func', 'main', '()', '{', 'db', ',', 'err', ':=', 'sql', '.', 'Open', '(', '""odbc""', ',', 'Driver', '=', 'iSeries', 'Access', 'ODBC', 'Driver', ';', 'System', '=', 'myhost', ';', 'Uid', '=', 'myuserid', ';', 'Pwd', '=', 'mypassword', ')', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'defer', 'db.Close()', 'rows', ',', 'err', ':=', 'db.Query(""SELECT 1 FROM sysibm.sysdummy1"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'var', 'number', 'int', 'for', 'rows.Next()', '{', 'rows.Scan(&number)', '}', 'fmt.Println(number)', '}', 'When', 'running', 'the', 'above,', 'I', 'am', 'getting', 'the', 'following', 'error', 'message:', 'SQLPrepare', ':', '{', '42000', '}', '[', 'IBM', '][', 'System', 'i', 'Access', 'ODBC', 'Driver', '][', 'DB2', 'for', 'i5/OS]SQL0104', '-', 'Error', 'message', 'text', 'unavailable', '.', 'Message', 'can', 'not', 'be', 'translated', 'successfully', '.', 'Any', 'ideas', 'what', 'is', 'going', 'wrong,', 'what', 'I', 'can', 'check,', 'or', 'how', 'I', 'can', 'get', 'this', 'to', 'work?', 'Update', 'I', 'did', 'a', 'test', 'on', 'a', 'Linux', 'VM', 'and', 'this', 'works', 'with', 'that', 'exact', 'code.', 'I', 'am', 'able', 'to', 'use', 'pyodbc', 'with', 'Python', 'to', 'connect', 'on', 'my', 'Windows', 'machine', 'just', 'fine', 'using', 'equivalent', 'code,', 'so', 'this', 'must', 'be', 'some', 'sort', 'of', 'issue', 'with', 'this', 'ODBC', 'library', 'on', 'Windows.', 'I', 'think', 'at', 'this', 'point', 'unless', 'there', 'are', 'other', 'ideas,', ""I'm"", 'going', 'to', 'try', 'some', 'other', 'libraries', 'or', 'open', 'a', 'bug', 'report', 'with', 'the', 'library', 'author.']"
1327,25745374,"

But when I remove in the goroutine all errMsg inserts, then the function works. I do not know the reason what I do wrong.
","['I', 'try', 'to', 'write', 'a', 'function', 'that', 'validate', 'data.', 'Look', 'at', 'the', 'following', 'code:', 'func', 'Create', '(', 'name', ',', 'email', ',', 'password', ',', 'local', 'string', ',', 'termOf', 'bool', ')', 'map', '[', 'string', ']', 'string', '{', 'wait', ':=', 'new', '(', 'sync', '.', 'WaitGroup', ')', 'mutex', ':=', 'new', '(', 'sync', '.', 'Mutex', ')', 'errMsg', ':=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'if', '!', 'termOf', '{', 'mutex.Lock()', 'errMsg', '[', '""termOf""', ']', '=', 'translate', '(', 'local', ',', '""text06""', ')', 'mutex.Unlock()', '}', 'wait.Add(1)', 'go', 'func', '()', '{', 'err', ':=', 'ValidateName', '(', 'name', ',', 'local', ')', 'mutex.Lock()', 'errMsg', '[', '""name""', ']', '=', 'err.Error()', 'mutex.Unlock()', 'wait.Done()', '}()', 'wait.Add(1)', 'go', 'func', '()', '{', 'err', ':=', 'ValidateEmail', '(', 'email', ',', 'local', ')', 'mutex.Lock()', 'errMsg', '[', '""email""', ']', '=', 'err.Error()', 'mutex.Unlock()', 'wait.Done()', '}()', 'wait.Add(1)', 'go', 'func', '()', '{', 'err', ':=', 'ValidatePassword', '(', 'password', ',', 'local', ')', 'mutex.Lock()', 'errMsg', '[', '""password""', ']', '=', 'err.Error()', 'mutex.Unlock()', 'wait.Done()', '}()', 'wait.Wait()', '//', 'If', 'errors', 'appear', 'if', 'len', '(', 'errMsg', ')', '>', '0', '{', 'return', 'errMsg', '}', 'return', 'nil', '}', 'As', 'you', 'can', 'see', 'here,', 'I', 'use', 'three', 'goroutines', 'and', 'in', 'the', 'goroutine', 'I', 'lock', 'it', 'to', 'change', 'errMsg', 'variable', 'map', 'type.', 'When', 'I', 'run', 'the', 'function,', ""I've"", 'got', 'compiler', 'error', 'runtime', 'error', ':', 'invalid', 'memory', 'address', 'or', 'nil', 'pointer', 'dereference', '[', 'signal', '0xc', '0', '0', '0', '0', '0', '05', 'code', '=', '0', 'x0', 'addr', '=', '0x14', 'pc', '=', '0x442', '06', 'a', ']', 'But', 'when', 'I', 'remove', 'in', 'the', 'goroutine', 'all', 'errMsg', 'inserts,', 'then', 'the', 'function', 'works.', 'I', 'do', 'not', 'know', 'the', 'reason', 'what', 'I', 'do', 'wrong.']"
1328,25806133,"
","['Using', 'only', '1', ""'if'"", 'statement', 'and', 'no', ""'else'"", '&', 'no', 'switch', '&', 'no', 'shorthand', 'notation', 'for', 'if-else?', '//', 'Original', 'function', 'func', 'Wheel', '(', 'WheelPos', 'uint32', ')', '{', 'if', 'WheelPos', '<', '85', '{', 'fmt.Println(""WheelPos < 85"",Color(WheelPos*3, 255-WheelPos*3, 0))', '}', 'else', 'if', 'WheelPos', '<', '170', '{', 'WheelPos', '-=', '85', 'fmt.Println(""WheelPos >= 85"",Color(0, WheelPos*3, 255-WheelPos*3))', '}', 'else', '{', 'WheelPos', '-=', '170', 'fmt.Println(""WheelPos > 170"",Color(0, 255-WheelPos*3, WheelPos*3))', '}', '}', 'The', 'above', 'function', 'is', 'called', 'in', 'the', 'main', 'inside', 'a', 'for', 'loop', 'like', 'so:', 'func', 'main', '()', '{', 'var', 'i', 'uint32', 'for', 'i', '=', '0', ';', 'i', '<', '255', ';', 'i', '++', '{', 'Wheel', '(', 'i', ')', '}', '}', 'The', 'Color', 'function', 'is', 'defined', 'as', 'such:', 'func', 'Color', '(', 'r', 'uint32', ',', 'g', 'uint32', ',', 'b', 'uint32', ')', 'uint32', '{', 'return', '(', 'r', '<<', '16', ')', '|', '(', 'g', '<<', '8', ')', '|', 'b', '}', 'I', 'have', 'started', 'off', 'with', 'something', 'like', 'so:', 'func', 'Wheel', '(', 'WheelPos', 'uint32', ')', '{', 'if', '(', 'WheelPos', '=', '85', ')', '||', '(', 'WheelPos', '>', '170', ')', '{', '//', 'logic....', '}', '}']"
1329,25837030,"
","['I', 'am', 'new', 'to', 'go', 'and', 'trying', 'to', 'find', 'to', 'find', 'the', 'index', 'of', 'a', 'string', 'in', 'a', 'string,', 'but', 'I', 'want', 'to', 'pass', 'in', 'the', 'start', 'index.', 'I', 'know', 'there', 'is', 'strings.Index', 'and', 'strings.LastIndex,', 'but', 'they', 'just', 'find', 'the', 'first', 'and', 'last.', 'Is', 'there', 'any', 'function', 'I', 'can', 'use,', 'where', 'I', 'can', 'specify', 'the', 'start', 'index?', 'Something', 'like', 'the', 'last', 'line', 'in', 'my', 'example.', 'Example:', 's', ':=', '""go gopher, go""', 'fmt.Println(strings.Index(s, ""go""))', '// Position 0', 'fmt.Println(strings.LastIndex(s, ""go""))', '// Postion 11', 'fmt.Println(strings.Index(s, ""go"", 1))', '// Position 3 - Start looking for ""go"" begining at index 1']"
1330,25861389,"

I changed the GetName method to GetName(id int, reply *StructObj) and it works.
I want to know why this happened? 
","['In', 'the', 'RPC', 'handler', 'function,', 'I', 'omit', 'the', 'first', 'argument', 'like:', 'func', '(', 'self', 'Handler', ')', 'GetName', '(', 'int', ',', 'reply', '*', 'StructObj', ')', '{', '}', 'and', 'in', 'the', 'calling', 'side', 'var', 'reply', 'StructObj', 'client.Call(""Handler.GetName"", 0, &reply)', 'Because', 'I', 'do', 'not', 'need', 'the', 'first', 'argument', 'in', 'the', 'GetName', 'Method,', 'I', 'omit', 'its', 'name,', 'HOWEVER,', 'I', 'got:', 'go', 'b', ':', 'type', 'mismatch', 'in', 'decoder', ':', 'want', 'struct', 'type', 'I', 'changed', 'the', 'GetName', 'method', 'to', 'GetName(id', 'int,', 'reply', '*StructObj)', 'and', 'it', 'works.', 'I', 'want', 'to', 'know', 'why', 'this', 'happened?']"
1331,25941791,"

which to mee seems equal. But why do they look like 0xc2080004f8 vs 0xc2080004b8 when i cannot see the difference when i check on packet.header directly? 
","['I', 'have', 'a', 'struct', 'in', 'go:', 'type', 'header', 'struct', '{', 'dataLength', 'uint16', 'optDataLength', 'uint8', 'packetType', 'uint8', '}', 'type', 'packet', 'struct', '{', 'syncByte', 'uint8', 'header', '*', 'header', 'headerCrc', 'uint8', 'data', '[]', 'byte', 'optData', '[]', 'byte', 'dataCrc', 'uint8', '}', 'If', 'i', 'have', 'created', 'an', 'Encode', 'and', 'Decode', 'function', 'for', 'creating', 'packages', 'and', 'for', 'encoding', 'them', 'into', 'binary.', 'However', 'why', 'does', 'those', 'two', 'instances.header', 'differ?', '&{', 'syncByte', ':', '85', 'header', ':', '0xc2', '0', '80004', 'b8', 'headerCrc', ':', '112', 'data', ':[', '2', ']', 'optData', ':[]', 'dataCrc', ':', '14', '}', '&{', 'syncByte', ':', '85', 'header', ':', '0xc2', '0', '80004', 'f8', 'headerCrc', ':', '112', 'data', ':[', '2', ']', 'optData', ':[]', 'dataCrc', ':', '14', '}', 'If', 'i', 'run', 'Println', 'on', 'those', 'two', ""header's"", 'i', 'get:', '&{', 'dataLength', ':', '1', 'optDataLength', ':', '0', 'packetType', ':', '5', '}', '&{', 'dataLength', ':', '1', 'optDataLength', ':', '0', 'packetType', ':', '5', '}', 'which', 'to', 'mee', 'seems', 'equal.', 'But', 'why', 'do', 'they', 'look', 'like', '0xc2080004f8', 'vs', '0xc2080004b8', 'when', 'i', 'cannot', 'see', 'the', 'difference', 'when', 'i', 'check', 'on', 'packet.header', 'directly?']"
1332,25999714,"

It works fine with my local DB.
","['I', 'can', 'connect', 'to', 'the', 'RDS', 'instance', 'using', 'mysql', '-h', '...', 'command', 'so', 'I', 'know', ""it's"", 'not', 'a', 'security', 'group', 'problem.', ""I've"", 'tried', 'to', 'use:', 'sql.Open(""mysql"", ""id:password@tcp(your-amazonaws-uri.com:3306)/dbname"")', 'in', 'the', 'readme', 'file', 'of', 'go-sql-driver(https://github.com/go-sql-driver/mysql),', 'but', 'it', ""doesn't"", 'seem', 'to', 'work.', ""I'm"", 'using', 'my', 'username', 'under', 'the', 'RDS', 'instance', 'instead', 'of', 'id', 'here', 'though.', 'Edit:', 'The', 'error', 'returned', 'is:', 'panic', 'runtime', 'error', ':', 'invalid', 'memory', 'address', 'or', 'nil', 'pointer', 'deference', '[', 'signal', '0xb', 'code', '=', '0x1', 'addr', '=', '0x2', '0', 'pc', '=', '0x5b551e', ']', 'go', 'routine', '16', '[', 'running', ']', 'runtime.panic(0x7d4fc0, 0xa6ca73)...database/sql.(*Rows)', '.', 'Next', '...', 'It', 'works', 'fine', 'with', 'my', 'local', 'DB.']"
1333,26008004,"I'm building an online store in Go.  As would be expected, several important pieces need to record exact monetary amounts.  I'm aware of the rounding problems associated with floats (i.e. 0.3 cannot be exactly represented, etc.).

The concept of currency seems easy to just represent as a string.  However, I'm unsure of what type would be most appropriate to express the actual monetary amount in.

The key requirements would seem to be:


Can exactly express decimal numbers down to a specified number of decimal places, based on the currency (some currencies use more than 2 decimal places: http://www.londonfx.co.uk/ccylist.html )
Obviously basic arithmetic operations are needed - add/sub/mul/div.
Sane string conversion - which would essentially mean conversion to it's decimal equivalent.  Also, internationalization would need to be at least possible, even if all of the logic for that isn't built in (1.000 in Europe vs 1,000 in the US).
Rounding, possibly using alternate rounding schemes like Banker's rounding.
Needs to have a simple and obvious way to correspond to a database value - MySQL in my case.  (Might make the most sense to treat the value as a string at this level in order to ensure it's value is preserved exactly.)


I'm aware of math/big.Rat and it seems to solve a lot of these things, but for example it's string output won't work as-is, since it will output in the ""a/b"" form.  I'm sure there is a solution for that too, but I'm wondering if there is some sort of existing best practice that I'm not aware of (couldn't easily find) for this sort of thing.

UPDATE: This package looks promising: https://code.google.com/p/godec/
","[""I'm"", 'building', 'an', 'online', 'store', 'in', 'Go.', 'As', 'would', 'be', 'expected,', 'several', 'important', 'pieces', 'need', 'to', 'record', 'exact', 'monetary', 'amounts.', ""I'm"", 'aware', 'of', 'the', 'rounding', 'problems', 'associated', 'with', 'floats', '(i.e.', '0.3', 'cannot', 'be', 'exactly', 'represented,', 'etc.).', 'The', 'concept', 'of', 'currency', 'seems', 'easy', 'to', 'just', 'represent', 'as', 'a', 'string.', 'However,', ""I'm"", 'unsure', 'of', 'what', 'type', 'would', 'be', 'most', 'appropriate', 'to', 'express', 'the', 'actual', 'monetary', 'amount', 'in.', 'The', 'key', 'requirements', 'would', 'seem', 'to', 'be:', 'Can', 'exactly', 'express', 'decimal', 'numbers', 'down', 'to', 'a', 'specified', 'number', 'of', 'decimal', 'places,', 'based', 'on', 'the', 'currency', '(some', 'currencies', 'use', 'more', 'than', '2', 'decimal', 'places:', 'http://www.londonfx.co.uk/ccylist.html', ')', 'Obviously', 'basic', 'arithmetic', 'operations', 'are', 'needed', '-', 'add/sub/mul/div.', 'Sane', 'string', 'conversion', '-', 'which', 'would', 'essentially', 'mean', 'conversion', 'to', ""it's"", 'decimal', 'equivalent.', 'Also,', 'internationalization', 'would', 'need', 'to', 'be', 'at', 'least', 'possible,', 'even', 'if', 'all', 'of', 'the', 'logic', 'for', 'that', ""isn't"", 'built', 'in', '(1.000', 'in', 'Europe', 'vs', '1,000', 'in', 'the', 'US).', 'Rounding,', 'possibly', 'using', 'alternate', 'rounding', 'schemes', 'like', ""Banker's"", 'rounding.', 'Needs', 'to', 'have', 'a', 'simple', 'and', 'obvious', 'way', 'to', 'correspond', 'to', 'a', 'database', 'value', '-', 'MySQL', 'in', 'my', 'case.', '(Might', 'make', 'the', 'most', 'sense', 'to', 'treat', 'the', 'value', 'as', 'a', 'string', 'at', 'this', 'level', 'in', 'order', 'to', 'ensure', ""it's"", 'value', 'is', 'preserved', 'exactly.)', ""I'm"", 'aware', 'of', 'math/big.Rat', 'and', 'it', 'seems', 'to', 'solve', 'a', 'lot', 'of', 'these', 'things,', 'but', 'for', 'example', ""it's"", 'string', 'output', ""won't"", 'work', 'as-is,', 'since', 'it', 'will', 'output', 'in', 'the', '""a/b""', 'form.', ""I'm"", 'sure', 'there', 'is', 'a', 'solution', 'for', 'that', 'too,', 'but', ""I'm"", 'wondering', 'if', 'there', 'is', 'some', 'sort', 'of', 'existing', 'best', 'practice', 'that', ""I'm"", 'not', 'aware', 'of', ""(couldn't"", 'easily', 'find)', 'for', 'this', 'sort', 'of', 'thing.', 'UPDATE:', 'This', 'package', 'looks', 'promising:', 'https://code.google.com/p/godec/']"
1334,26015235,"In an HTTP service implementation, I'm allowing multipart http file upload with the PUT method. 

However, before writing everything into the hard drive, I'd like to check if the size of the file is OK. E.g. has to be under 50MB. 

How to do this in go?
","['In', 'an', 'HTTP', 'service', 'implementation,', ""I'm"", 'allowing', 'multipart', 'http', 'file', 'upload', 'with', 'the', 'PUT', 'method.', 'However,', 'before', 'writing', 'everything', 'into', 'the', 'hard', 'drive,', ""I'd"", 'like', 'to', 'check', 'if', 'the', 'size', 'of', 'the', 'file', 'is', 'OK.', 'E.g.', 'has', 'to', 'be', 'under', '50MB.', 'How', 'to', 'do', 'this', 'in', 'go?']"
1335,26058133,"
How to realize ""Virtual Inheritance"" in go?
go lang compiler version: ""1.3.1 windows/amd64"", does it support ""Virtual Inheritance"" for go lang?


I never heard a C like language could support ""Virtual"",so I really misunderstand.
","['How', 'to', 'realize', '""Virtual', 'Inheritance""', 'in', 'go?', 'go', 'lang', 'compiler', 'version:', '""1.3.1', 'windows/amd64"",', 'does', 'it', 'support', '""Virtual', 'Inheritance""', 'for', 'go', 'lang?', 'I', 'never', 'heard', 'a', 'C', 'like', 'language', 'could', 'support', '""Virtual"",so', 'I', 'really', 'misunderstand.']"
1336,26143091,"The short version:
Is there a way to empty a go channel without recreating it, or looping through it? 

The why:
I'm using two channels to send and receive data, and I have an extra channel to signal that a reconnect is needed.

Now when the transport has been reset/reconnected I want to 'empty' the extra channel to make sure that there is not any lingering other reset requests which would cause the thing to reconnect again.
","['The', 'short', 'version:', 'Is', 'there', 'a', 'way', 'to', 'empty', 'a', 'go', 'channel', 'without', 'recreating', 'it,', 'or', 'looping', 'through', 'it?', 'The', 'why:', ""I'm"", 'using', 'two', 'channels', 'to', 'send', 'and', 'receive', 'data,', 'and', 'I', 'have', 'an', 'extra', 'channel', 'to', 'signal', 'that', 'a', 'reconnect', 'is', 'needed.', 'Now', 'when', 'the', 'transport', 'has', 'been', 'reset/reconnected', 'I', 'want', 'to', ""'empty'"", 'the', 'extra', 'channel', 'to', 'make', 'sure', 'that', 'there', 'is', 'not', 'any', 'lingering', 'other', 'reset', 'requests', 'which', 'would', 'cause', 'the', 'thing', 'to', 'reconnect', 'again.']"
1337,26146081,"

How do I do this?
","['I', 'have', 'a', 'text', 'file', 'that', ""i'd"", 'like', 'to', 'add', 'an', 'a', 'block', 'of', 'text', 'to', 'using', 'Go.', 'The', 'text', 'file', 'looks', 'like', 'this', '(without', 'the', 'numbering)', 'blah', 'blah2', ']', 'blah3', 'blah4', 'and', 'i', 'want', 'it', 'to', 'look', 'like', 'this', 'blah', 'blah2', 'MY', 'INSERTED', 'TEXT', 'HERE', ']', 'blah3', 'blah4', 'Assume', ""I've"", 'already', 'opened', 'the', 'file', 'and', 'created', 'a', 'string', 'array', 'of', 'each', 'line', 'in', 'the', 'file', 'called', ""'lines'."", '//', 'find', 'line', 'with', ']', 'for', 'i', ',', 'line', ':=', 'range', 'lines', '{', 'if', '(', ""strings.ContainsRune(line, ']'))"", '{', '//', 'take', 'the', 'line', 'before', ""']'..."", 'and', 'write', 'to', 'it', 'somehow', 'lines', '[', 'i', '-', '1', ']', '(', ')', '}', '}', 'How', 'do', 'I', 'do', 'this?']"
1338,26150553,"

seems like a pretty ugly way to do it. Whats a possible better way?
","['I', 'want', 'to', 'run', 'a', 'function', 'until', 'it', 'returns', '0.', 'value', ',', '_', ':=', 'FuncX', '()', 'if', 'value', '!=', '0', '{', 'value', ',', '_', ':=', 'FuncX', '()', 'if', '(', 'value', '!=', '0', ')', '{', 'value', ',', '_', ':=', 'FuncX', '()', 'if', '(', 'value', '!=', '0', ')', '....', '}', '}', 'seems', 'like', 'a', 'pretty', 'ugly', 'way', 'to', 'do', 'it.', 'Whats', 'a', 'possible', 'better', 'way?']"
1339,26185201,"

I think pass the right parameter.
","['When', 'I', 'create', 'new', 'cookie', 'store', 'and', 'do', 'like:', 'var', 'store', '=', 'sessions.NewCookieStore(securecookie.GenerateRandomKey(1), securecookie.GenerateRandomKey(2))', ""I've"", 'got', 'the', 'the', 'error', 'message', 'crypto/aes:', 'invalid', 'key', 'size', '2', 'Why', 'what', 'do', 'I', 'wrong?', 'When', 'I', 'look', 'at', 'the', 'function', 'definition', '//', 'NewCookieStore', 'returns', 'a', 'new', 'CookieStore.', '//', '//', 'Keys', 'are', 'defined', 'in', 'pairs', 'to', 'allow', 'key', 'rotation,', 'but', 'the', 'common', 'case', 'is', '//', 'to', 'set', 'a', 'single', 'authentication', 'key', 'and', 'optionally', 'an', 'encryption', 'key.', '//', '//', 'The', 'first', 'key', 'in', 'a', 'pair', 'is', 'used', 'for', 'authentication', 'and', 'the', 'second', 'for', '//', 'encryption.', 'The', 'encryption', 'key', 'can', 'be', 'set', 'to', 'nil', 'or', 'omitted', 'in', 'the', 'last', '//', 'pair,', 'but', 'the', 'authentication', 'key', 'is', 'required', 'in', 'all', 'pairs.', '//', '//', 'It', 'is', 'recommended', 'to', 'use', 'an', 'authentication', 'key', 'with', '32', 'or', '64', 'bytes.', '//', 'The', 'encryption', 'key,', 'if', 'set,', 'must', 'be', 'either', '16,', '24,', 'or', '32', 'bytes', 'to', 'select', '//', 'AES-128,', 'AES-192,', 'or', 'AES-256', 'modes.', '//', '//', 'Use', 'the', 'convenience', 'function', 'securecookie.GenerateRandomKey()', 'to', 'create', '//', 'strong', 'keys.', 'func', 'NewCookieStore', '(', 'keyPairs', '...[]', 'byte', ')', '*', 'CookieStore', '{', 'return', '&', 'CookieStore', '{', 'Codecs', ':', 'securecookie.CodecsFromPairs(keyPairs...)', ',', 'Options', ':', '&', 'Options', '{', 'Path', ':', '""/""', ',', 'MaxAge', ':', '86400', '*', '30', ',', '},', '}', '}', 'I', 'think', 'pass', 'the', 'right', 'parameter.']"
1340,26332292,"I google for a while, it seems to that the cgo is support C++ now.
but when I call C++ function like C in Golang, it failed.
so I wanna know how can let cgo know that the function I call is a C++ function, not C function?

I appreciate any help.
","['I', 'google', 'for', 'a', 'while,', 'it', 'seems', 'to', 'that', 'the', 'cgo', 'is', 'support', 'C++', 'now.', 'but', 'when', 'I', 'call', 'C++', 'function', 'like', 'C', 'in', 'Golang,', 'it', 'failed.', 'so', 'I', 'wanna', 'know', 'how', 'can', 'let', 'cgo', 'know', 'that', 'the', 'function', 'I', 'call', 'is', 'a', 'C++', 'function,', 'not', 'C', 'function?', 'I', 'appreciate', 'any', 'help.']"
1341,26415117,"

The wildcard cannot match byte 10 (ie the new line character). Looks like a bug. I suppose regex was never really meant to work with []byte, but golang offers the []byte functions, so this is kind of an oversight.
","['Try', 'the', 'following:', 'func', 'main', '(){', 'r', ':=', 'regexp.MustCompile(`(.)`)', 'for', 'i', ':=', '0', ';', 'i', '<', '255', ';', 'i', '++{', 'd', ':=', '[]', 'byte', '{', 'byte', '(', 'i', ')}', 'all', ':=', 'r.FindAll(d, -1)', 'fmt.Println(all)', '}', '}', 'The', 'wildcard', 'cannot', 'match', 'byte', '10', '(ie', 'the', 'new', 'line', 'character).', 'Looks', 'like', 'a', 'bug.', 'I', 'suppose', 'regex', 'was', 'never', 'really', 'meant', 'to', 'work', 'with', '[]byte,', 'but', 'golang', 'offers', 'the', '[]byte', 'functions,', 'so', 'this', 'is', 'kind', 'of', 'an', 'oversight.']"
1342,26526736,"I would like to define a method on []T, where T is a type I defined.
It looks like i have to define a new type to do this, but that stops me from using all the builtin functions for slices on this new type (such as len).

Is the go way of doing this to just make ordinary functions, rather than methods? (Kinda like how append() could be a method, but isn't?)
","['The', 'wildcard', 'cannot', 'match', 'byte', '10', '(ie', 'the', 'new', 'line', 'character).', 'Looks', 'like', 'a', 'bug.', 'I', 'suppose', 'regex', 'was', 'never', 'really', 'meant', 'to', 'work', 'with', '[]byte,', 'but', 'golang', 'offers', 'the', '[]byte', 'functions,', 'so', 'this', 'is', 'kind', 'of', 'an', 'oversight.']"
1343,26565794,"

Does Go's cover tool only work on non-GAE apps? Do I have to package my app differently in order to visualize the coverage results?

I unsuccessfully asked this on golang-nuts before.
","['I', 'am', 'developing', 'a', 'server', 'with', 'the', 'latest', 'Go', 'GAE', 'SDK.', 'I', 'am', 'running', 'tests', 'after', 'every', 'change:', 'go', 'app', 'test', '-', 'test', '.', 'v', '=', 'true', 'I', 'am', 'using', '-cover', 'to', 'record', 'coverage', 'as', 'described', 'by', 'goapp', 'help', 'testflag:', 'go', 'app', 'test', '-', 'cover', '-', 'test', '.', 'v', '=', 'true', '-', 'test', '.', 'coverprofile', '=', 'c', '.', 'out', '[..]', 'coverage', ':', '53', '.', '8', '%', 'of', 'statements', 'ok', '_/var/lib/jenkins/jobs/loyalty/workspace', '30', '.', '464', 's', 'This', 'completes', 'successfully', 'and', 'prints', 'the', 'percentage', 'of', 'lines', 'covered', 'by', 'tests.', 'However,', 'attempting', 'to', 'visualize', 'the', 'results', 'fails:', 'go', 'app', 'tool', 'cover', '-', 'html', '=', 'c', '.', 'out', 'cover', ':', 'can', 't', 'find', '""app.go""', ':', 'cannot', 'find', 'package', '""_/home/ingo/git/loyalty/""', 'in', 'any', 'of', ':', '/home/ingo/Downloads/go_appengine_sdk_linux_amd64-1.9.10/go_appengine/goroot/src/pkg/_/home/ingo/git/loyalty', '(', 'from', '$', 'GOROOT', ')', '/home/ingo/git/loyalty/src/_/home/ingo/git/loyalty', '(', 'from', '$', 'GOPATH', ')', 'Does', ""Go's"", 'cover', 'tool', 'only', 'work', 'on', 'non-GAE', 'apps?', 'Do', 'I', 'have', 'to', 'package', 'my', 'app', 'differently', 'in', 'order', 'to', 'visualize', 'the', 'coverage', 'results?', 'I', 'unsuccessfully', 'asked', 'this', 'on', 'golang-nuts', 'before.']"
1344,26573394,"

/foo works ok

/file-that-exists works ok

/file-that-doesnt-exist doesn't work
- I get 404 page not found instead of index.html

So what am I doing wrong here?
","['I', 'just', ""can't"", 'get', 'this', 'NotFoundHandler', 'to', 'work.', ""I'd"", 'like', 'to', 'serve', 'a', 'static', 'file', 'on', 'every', 'get', 'request,', 'given', 'that', 'it', 'exists,', 'otherwise', 'serve', 'index.html.', ""Here's"", 'my', 'simplified', 'router', 'at', 'the', 'moment:', 'func', 'fooHandler', '()', 'http', '.', 'Handler', '{', 'fn', ':=', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'w.Write([]byte(""Foo""))', '}', 'return', 'http.HandlerFunc(fn)', '}', 'func', 'notFound', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'http.ServeFile(w, r, ""public/index.html"")', '}', 'func', 'main', '()', '{', 'router', '=', 'mux.NewRouter()', 'fs', ':=', 'http.FileServer(http.Dir(""public""))', 'router.Handle(""/foo"", fooHandler())', 'router.PathPrefix(""/"").Handler(fs)', 'router', '.', 'NotFoundHandler', '=', 'http.HandlerFunc(notFound)', 'http.ListenAndServe("":3000"", router)', '}', '/foo', 'works', 'ok', '/file-that-exists', 'works', 'ok', '/file-that-doesnt-exist', ""doesn't"", 'work', '-', 'I', 'get', '404', 'page', 'not', 'found', 'instead', 'of', 'index.html', 'So', 'what', 'am', 'I', 'doing', 'wrong', 'here?']"
1345,26575662,"user.Current() doesn't work on a fresh Fedora golang. No cross-compiling involved. Just straight go install and run. Works fine on Ubuntu and a custom slackware dist. Any ideas?
","['/foo', 'works', 'ok', '/file-that-exists', 'works', 'ok', '/file-that-doesnt-exist', ""doesn't"", 'work', '-', 'I', 'get', '404', 'page', 'not', 'found', 'instead', 'of', 'index.html', 'So', 'what', 'am', 'I', 'doing', 'wrong', 'here?']"
1346,26646802,"By now,I can't find any way to build a package as static lib.
Because in my next project I really want some code to be protected, so I think I can build a static lib for that issue, and other golang app can easily link this lib by putting that lib in to the pkg folder.But some tests tell me it won't work.
So I really want to know if golang just not support my requirement. If so,can some one tell me why...T_T
","['By', 'now,I', ""can't"", 'find', 'any', 'way', 'to', 'build', 'a', 'package', 'as', 'static', 'lib.', 'Because', 'in', 'my', 'next', 'project', 'I', 'really', 'want', 'some', 'code', 'to', 'be', 'protected,', 'so', 'I', 'think', 'I', 'can', 'build', 'a', 'static', 'lib', 'for', 'that', 'issue,', 'and', 'other', 'golang', 'app', 'can', 'easily', 'link', 'this', 'lib', 'by', 'putting', 'that', 'lib', 'in', 'to', 'the', 'pkg', 'folder.But', 'some', 'tests', 'tell', 'me', 'it', ""won't"", 'work.', 'So', 'I', 'really', 'want', 'to', 'know', 'if', 'golang', 'just', 'not', 'support', 'my', 'requirement.', 'If', 'so,can', 'some', 'one', 'tell', 'me', 'why...T_T']"
1347,26832168,"

I get nothing
However in the /gocode/src/gopkg.in directory, I see a directory named gomail.v1 with nothing inside..
","['I', 'am', 'trying', 'to', 'get', 'gomail', 'via', 'gopkg.in/gomail.v1', 'but', 'my', 'connection', 'just', 'stays', 'hanging.', 'In', 'other', 'words,', 'on', 'my', 'console,', 'when', 'I', 'type:', '[', 'developer', 'machine', 'go', 'code', ']$', 'go', 'get', 'go', 'pkg', '.', 'in/gomail.v1', 'I', 'get', 'nothing', 'However', 'in', 'the', '/gocode/src/gopkg.in', 'directory,', 'I', 'see', 'a', 'directory', 'named', 'gomail.v1', 'with', 'nothing', 'inside..']"
1348,26889287,"

As you can see, there are two custom structs, each containing a reference to the other, recursively.  When I try to package one up into a file using gob, it compiles, but i get a stack overflow, I am assuming this is caused by the recursion.  In my experience, pickle handles things like this without a gasp.  What am I doing wrong?
","['I', 'mostly', 'use', 'Python,', 'but', 'am', 'playing', 'around', 'with', 'Go.', 'I', 'wrote', 'the', 'following', 'to', 'do', 'something', 'that', 'is', 'quite', 'simple', 'in', 'python,', 'and', 'im', 'hoping', 'it', 'can', 'be', 'accomplished', 'in', 'Go', 'as', 'well.', 'package', 'main', 'import', '(', '""bytes""', '""encoding/gob""', '""fmt""', '""io/ioutil""', ')', 'type', 'Order', 'struct', '{', 'Text', 'string', 'User', '*', 'User', '}', 'type', 'User', 'struct', '{', 'Text', 'string', 'Order', '*', 'Order', '}', 'func', 'main', '()', '{', 'o', ':=', 'Order', '{}', 'u', ':=', 'User', '{}', 'o', '.', 'Text', '=', '""order text""', 'u', '.', 'Text', '=', '""user text""', '//', 'commenting', 'this', 'section', 'prevents', 'stack', 'overflow', 'o', '.', 'User', '=', '&', 'u', 'u', '.', 'Order', '=', '&', 'o', 'fmt.Println(""o.u.text:"", o.User.Text, ""u.o.text:"", u.Order.Text)', '//', 'end', 'section', 'm', ':=', 'new', '(', 'bytes', '.', 'Buffer', ')', 'enc', ':=', 'go', 'b.NewEncoder(m)', 'enc.Encode(o)', 'err', ':=', 'ioutil.WriteFile(""gob_data"", m.Bytes(), 0600)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'fmt.Printf(""just saved gob with %v\\n"", o)', 'n', ',', 'err', ':=', 'ioutil.ReadFile(""gob_data"")', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""cannot read file"")', 'panic', '(', 'err', ')', '}', 'p', ':=', 'bytes.NewBuffer(n)', 'dec', ':=', 'go', 'b.NewDecoder(p)', 'e', ':=', 'Order', '{}', 'err', '=', 'dec.Decode(&e)', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""cannot decode"")', 'panic', '(', 'err', ')', '}', 'fmt.Printf(""just read gob from file and it\'s showing: %v\\n"", e)', '}', 'As', 'you', 'can', 'see,', 'there', 'are', 'two', 'custom', 'structs,', 'each', 'containing', 'a', 'reference', 'to', 'the', 'other,', 'recursively.', 'When', 'I', 'try', 'to', 'package', 'one', 'up', 'into', 'a', 'file', 'using', 'gob,', 'it', 'compiles,', 'but', 'i', 'get', 'a', 'stack', 'overflow,', 'I', 'am', 'assuming', 'this', 'is', 'caused', 'by', 'the', 'recursion.', 'In', 'my', 'experience,', 'pickle', 'handles', 'things', 'like', 'this', 'without', 'a', 'gasp.', 'What', 'am', 'I', 'doing', 'wrong?']"
1349,26906323,"

EDIT: 

Conclusion: 

As Ainar-G said, the []int does escape to heap in the second benchmark. After reading a bit more about 1.4beta1 it seems, that new write barriers are introduced when accessing the heap caused by the new GC plans. But raw execution seems to have increased. Looking forward to 1.5 =).  
","['The', 'following', 'code', 'shows', 'two', 'benchmarks.', 'The', 'first', 'one', 'creates', 'a', 'struct', 'by', 'value', 'in', 'each', 'iteration,', 'while', 'the', 'second', 'one', 'does', 'use', 'a', 'pointer', 'to', 'the', 'struct.', 'Why', 'is', 'the', 'latter', '20x', 'slower', '??', 'I', 'know', 'about', 'GC', 'issues', 'with', 'GoLang,', 'but', ""shouldn't"", 'escape', 'analysis', 'handle', 'those', 'situations', '?', ""I'm"", 'using', 'go1.4beta1,', 'but', '1.3.3', 'gave', 'me', 'the', '[same', '-', 'wrong]', 'different', 'results.', 'Any', 'idea', '?', 'package', 'main', 'import', '""testing""', 'type', 'Adder', 'struct', '{', 'vals', '[]', 'int', '}', 'func', '(', 'a', '*', 'Adder', ')', 'add', '()', 'int', '{', 'return', 'a', '.', 'vals', '[', '0', ']', '+', 'a', '.', 'vals', '[', '1', ']', '}', 'func', 'BenchmarkWithoutPointer', '(', 'b', '*', 'testing', '.', 'B', ')', '{', 'accum', ':=', '0', 'for', 'i', ':=', '0', ';', 'i', '<', 'b', '.', 'N', ';', 'i', '++', '{', 'adder', ':=', 'Adder', '{[]', 'int', '{', 'accum', ',', 'i', '}}', 'accum', '=', 'adder.add()', '}', '_', '=', 'accum', '}', 'func', 'BenchmarkWithPointer', '(', 'b', '*', 'testing', '.', 'B', ')', '{', 'accum', ':=', '0', 'for', 'i', ':=', '0', ';', 'i', '<', 'b', '.', 'N', ';', 'i', '++', '{', 'adder', ':=', '&', 'Adder', '{[]', 'int', '{', 'accum', ',', 'i', '}}', 'accum', '=', 'adder.add()', '}', '_', '=', 'accum', '}', 'Benchmark', 'go1.4.1:', '$', 'go', 'test', '-', 'bench', '=.', 'testing', ':', 'warning', ':', 'no', 'tests', 'to', 'run', 'PASS', 'BenchmarkWithoutPointer', '1000000000', '2', '.', '92', 'ns/op', 'BenchmarkWithPointer', '30000000', '57', '.', '8', 'ns/op', 'ok', 'github', '.', 'com/XXXXXXXXXX/bench/perf', '5', '.', '01', '0', 's', 'Benchmark', 'go1.3.3:', 'testing', ':', 'warning', ':', 'no', 'tests', 'to', 'run', 'PASS', 'BenchmarkWithoutPointer', '500000000', '7', '.', '89', 'ns/op', 'BenchmarkWithPointer', '50000000', '37', '.', '5', 'ns/op', 'ok', 'EDIT:', 'Conclusion:', 'As', 'Ainar-G', 'said,', 'the', '[]int', 'does', 'escape', 'to', 'heap', 'in', 'the', 'second', 'benchmark.', 'After', 'reading', 'a', 'bit', 'more', 'about', '1.4beta1', 'it', 'seems,', 'that', 'new', 'write', 'barriers', 'are', 'introduced', 'when', 'accessing', 'the', 'heap', 'caused', 'by', 'the', 'new', 'GC', 'plans.', 'But', 'raw', 'execution', 'seems', 'to', 'have', 'increased.', 'Looking', 'forward', 'to', '1.5', '=).']"
1350,26909443,"

Anyway just wondering if anybody has any thoughts on this type of situation.
","['So', 'I', 'am', 'trying', 'to', 'write', 'some', 'code', 'that', 'allows', 'me', 'to', 'edit', 'values', 'in', 'an', 'array', 'in', 'a', 'struct.', 'This', 'example', 'uses', '""Status""', 'as', 'a', 'possible', 'value', 'to', 'alter,', 'but', 'this', 'is', 'just', 'a', 'simplification', 'to', 'try', 'to', 'get', 'my', 'intent', 'across.', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'Parent', 'struct', '{', 'Children', '[]', 'Child', '}', 'type', 'Child', 'struct', '{', 'Status', 'string', '}', 'func', '(', 'p', '*', 'Parent', ')', 'Add', '()', '*', 'Child', '{', 'var', 'child', 'Child', 'child', '.', 'Status', '=', '""1""', 'p', '.', 'Children', '=', 'append', '(', 'p', '.', 'Children', ',', 'child', ')', 'return', '&', 'p', '.', 'Children', '[', 'len', '(', 'p', '.', 'Children', ')-', '1', ']', '}', 'func', 'main', '()', '{', 'var', 'p', 'Parent', 'child', ':=', 'p.Add()', 'child', '.', 'Status', '=', '""2""', 'fmt.Println(p)', 'fmt.Println(child)', '}', 'This', ""doesn't"", 'feel', '""proper"".', 'How', 'should', 'I', 'do', 'this', 'in', 'golang?', 'Certainly', 'I', 'could', 'pass', 'the', 'value', 'in', 'as', 'a', 'parameter,', 'but', 'in', 'my', 'particular', 'case', 'I', 'would', 'like', 'to', 'edit', 'function', 'pointers', 'that', 'are', 'inside', 'the', 'Child', 'struct', '(not', 'in', 'this', 'code', 'to', 'keep', 'it', 'short)', 'after', 'having', 'added', 'the', 'child.', 'That', 'feels', 'nicer,', 'but', 'maybe', 'I', 'just', 'need', 'to', 'pass', 'them', 'as', 'parameters', 'to', 'the', 'Add', 'method?', 'eg', 'func', '(', 'p', '*', 'Parent', ')', 'Add', '(', 'fn1', 'func', '(),', 'fn2', 'func', '())', '*', 'Child', '{', 'Anyway', 'just', 'wondering', 'if', 'anybody', 'has', 'any', 'thoughts', 'on', 'this', 'type', 'of', 'situation.']"
1351,26960243,"

Followed by the default json.Marshal output, rather than the custom one. As far as I can tell, that's because the call to Marshal sees a value of type pointer-to-interface rather than pointer-to-MyType.

Why do I lose type information when I take &v? I would expect the second line of the output to be *MyType and not *interface {}.

Is there any way for me have the custom JSON Marshaller called without explicitly casting?
","[""I'm"", 'working', 'with', 'some', '""generic""', 'functions', 'in', 'Go', 'that', 'operate', 'on', 'interface{}', 'and', 'send', 'things', 'around', 'channels,', 'etc.', 'Slimmed', 'down,', ""let's"", 'say', 'I', 'have', 'something', 'like:', 'type', 'MyType', 'struct', '{', '//', 'Fields', '}', 'func', '(', 'm', '*', 'MyType', ')', 'MarshalJSON', '()', '([]', 'byte', ',', 'error', ')', '{', '//', 'MarshalJSON', 'log.Print(""custom JSON marshal"")', 'return', '[]', 'byte', '(', '""hello""', '),', 'nil', '}', 'func', 'GenericFunc', '(', 'v', 'interface', '{})', '{', '//', 'Do', 'things...', 'log.Print(reflect.TypeOf(v))', 'log.Print(reflect.TypeOf(&v))', 'b', ',', '_', '=', 'json.Marshal(&v)', 'fmt.Println(string(b))', '}', 'func', 'main', '()', '{', 'm', ':=', 'MyType', '{}', 'GenericFunc', '(', 'm', ')', '}', 'This', 'outputs:', '2014/11/16', '12', ':', '41', ':', '44', 'MyType', '2014/11/16', '12', ':', '41', ':', '44', '*', 'interface', '{}', 'Followed', 'by', 'the', 'default', 'json.Marshal', 'output,', 'rather', 'than', 'the', 'custom', 'one.', 'As', 'far', 'as', 'I', 'can', 'tell,', ""that's"", 'because', 'the', 'call', 'to', 'Marshal', 'sees', 'a', 'value', 'of', 'type', 'pointer-to-interface', 'rather', 'than', 'pointer-to-MyType.', 'Why', 'do', 'I', 'lose', 'type', 'information', 'when', 'I', 'take', '&v?', 'I', 'would', 'expect', 'the', 'second', 'line', 'of', 'the', 'output', 'to', 'be', '*MyType', 'and', 'not', '*interface', '{}.', 'Is', 'there', 'any', 'way', 'for', 'me', 'have', 'the', 'custom', 'JSON', 'Marshaller', 'called', 'without', 'explicitly', 'casting?']"
1352,27098062,"
","['I', 'need', 'a', 'data', 'structure', 'which', 'accepts', 'name', '/', 'value', 'pairs', 'in', 'addition', 'to', 'custom', 'fields.', 'How', 'can', 'I', 'define', 'a', 'such', 'structure', '?', 'e.g.', 'type', 'mybasket', 'struct', '{', 'Coupons', 'string', 'Amount', 'int', '.......', '// string or int', '}']"
1353,27115076,"

Is this possible at all ? If so, what am I doing wrong ?
","['Using', 'templates', 'with', 'delimiters', 'works', 'fine', 'when', 'using', 'template.New(""..."").Delims(""[["", ""]]"").Parse()', 'However,', 'I', 'cannot', 'figure', 'out', 'how', 'to', 'get', 'to', 'the', 'same', 'result', 'with', 'template.ParseFiles()', 'tmpl', ',', 'err', ':=', 'template.ParseFiles(""base.tmpl"", ""homepage/inner.tmpl"")', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'tmpl.Delims(""[["", ""]]"")', 'p', ':=', 'new', '(', 'Page', ')', 'err', '=', 'tmpl.Execute(os.Stdout, p)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'I', 'have', 'no', 'errors,', 'but', 'the', 'Delimiters', 'are', 'not', 'changed.', 'tmpl', ',', 'err', ':=', 'template.ParseFiles(""base.tmpl"", ""homepage/inner.tmpl"")', 't', ':=', 'tmpl.Lookup(""base.tmpl"").Delims(""[["", ""]]"")', 'p', ':=', 'new', '(', 'Page', ')', 'err', '=', 't.Execute(os.Stdout, p)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'This', 'leads', 'to', 'the', 'same', 'result.', 'In', 'case', 'this', 'is', 'relevant,', 'my', 'need', 'is', 'to', 'embed', 'a', 'small', 'angular', 'app', 'in', 'a', 'particular', 'page', 'of', 'my', 'site.', 'Also,', 'I', 'have', 'a', 'base', 'template', 'with', 'a', 'common', 'HTML', 'structure', 'that', 'I', 'combine', 'with', 'a', 'page-specific', 'template', 'with', 'ParseFiles(),', 'leading', 'to', 'this', 'layout', ':', '/templates/base.tmpl', '/templates/homepage/inner.tmpl', '/templates/otherpage/inner.tmpl', 'Is', 'this', 'possible', 'at', 'all', '?', 'If', 'so,', 'what', 'am', 'I', 'doing', 'wrong', '?']"
1354,27187617,"
","['How', 'would', 'I', 'limit', 'upload', 'and', 'download', 'speed', 'from', 'the', 'server', 'in', 'golang?', ""I'm"", 'writing', 'a', 'golang', 'server', 'to', 'allow', 'users', 'to', 'upload', 'and', 'download', 'files.', 'And', 'file', 'is', 'big,', 'about', '1GB', 'bytes.', 'I', 'want', 'to', 'limit', 'the', 'upload', 'and', 'download', 'speed', 'to', '(for', 'instance)', '1MB/s', '(configurable', 'of', 'course).', 'below', 'is', 'my', 'upload', 'code:', 'func', 'uploadFile', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'file', ',', '_', ',', 'err', ':=', 'r.FormFile(""file"")', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), 500)', 'return', '}', 'defer', 'file.Close()', 'os.MkdirAll(`e:\\test`, os.ModePerm)', 'out', ',', 'err', ':=', 'os.Create(`e:\\test\\test.mpg`)', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), 500)', 'return', '}', 'defer', 'out.Close()', '_', ',', 'err', '=', 'io.Copy(out, file)', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), 500)', '}', '}']"
1355,27201256,"

Please let me know. Thanks!
","['What', 'is', 'the', 'best', 'way', 'to', 'pass', 'slice', 'and', 'map', 'structure', 'over', 'channel', 'that', 'is', 'distributed', 'over', 'network?', 'I', 'need', 'to', 'distribute', 'the', 'application', 'running', 'over', 'several', 'EC2', 'instances', 'and', 'wonder', 'how', 'I', 'can', 'achieve', 'this', 'by', 'communicating', 'each', 'application', 'by', 'Go', 'channel.', ""Here's"", 'the', 'workflow', 'that', 'I', 'would', 'like', 'to', 'run:', '1', '.', 'Process', 'data', 'in', 'one', 'application', '2', '.', 'Distribute', 'the', 'data', 'into', '10', 'replica', 'applications', '3', '.', 'Each', '10', 'application', 'does', 'its', 'job', 'in', 'a', 'separate', 'EC2', 'instance', '4', '.', 'Once', 'they', 'are', 'all', 'done', ',', 'they', 'send', 'the', 'result', 'back', 'to', 'the', 'original', 'program', '5', '.', 'This', 'is', 'sent', 'over', 'the', 'chan', 'nel', 'Please', 'let', 'me', 'know.', 'Thanks!']"
1356,27210030,"
","[""I'm"", 'parsing', 'through', 'the', 'triples', 'of', 'the', 'Freebase', 'RDF', 'compressed', 'and', 'streaming', 'with', 'the', 'XML', 'package', 'in', 'Golang.', 'However,', ""I'm"", 'getting', 'an', 'out', 'of', 'memory', 'error.', 'Do', 'I', 'have', 'to', 'garbage-collect?', 'How', 'can', 'I', 'do', 'that?', 'How', 'can', 'I', 'clear', 'the', 'memory', 'after', ""I'm"", 'doing', 'writing', 'that', 'triple', 'to', 'the', 'XML', 'file?', ""Here's"", 'my', 'code:', 'http://play.golang.org/p/dWvbtcs7wy', 'package', 'main', 'import', '(', '""bufio""', '""flag""', '""fmt""', '""io""', '""net/url""', '""os""', '""regexp""', '""strings""', ')', 'var', 'inputFile', '=', 'flag.String(""infile"", ""freebase-rdf"", ""Input file path"")', 'var', 'filter', ',', '_', '=', 'regexp.Compile(""^file:.*|^talk:.*|^special:.*|^wikipedia:.*|^wiktionary:.*|^user:.*|^user_talk:.*"")', 'type', 'Redirect', 'struct', '{', 'Title', 'string', 'xml', ':', '""title,attr""', '}', 'type', 'Page', 'struct', '{', 'Title', 'string', 'xml', ':', '""title""', 'Abstract', 'string', 'xml', ':', '""""', '}', 'func', 'CanonicaliseTitle', '(', 'title', 'string', ')', 'string', '{', 'can', ':=', 'strings.ToLower(title)', 'can', '=', 'strings.Replace(can, "" "", ""_"", -1)', 'can', '=', 'url.QueryEscape(can)', 'return', 'can', '}', 'func', 'convertFreebaseId', '(', 'uri', 'string', ')', 'string', '{', 'if', 'strings.HasPrefix(uri, """")', '{', 'var', 'id', '=', 'uri', '[', '1', ':', 'len', '(', 'uri', ')-', '1', ']', 'id', '=', 'strings.Replace(id, ""http://rdf.freebase.com/ns"", """", -1)', 'id', '=', 'strings.Replace(id, ""."", ""/"", -1)', 'return', 'id', '}', 'return', 'uri', '}', 'func', 'parseTriple', '(', 'line', 'string', ')', '(', 'string', ',', 'string', ',', 'string', '){', 'var', 'parts', '=', 'strings.Split(line, ""\\t"")', 'subject', ':=', 'convertFreebaseId', '(', 'parts', '[', '0', '])', 'predicate', ':=', 'convertFreebaseId', '(', 'parts', '[', '1', '])', 'object', ':=', 'convertFreebaseId', '(', 'parts', '[', '2', '])', 'return', 'subject', ',', 'predicate', ',', 'object', '}', 'var', '(', 'validRegexp', '=', 'regexp.MustCompile(""^[A-Za-z0-9][A-Za-z0-9_-]*$"")', 'englishRegexp', '=', 'regexp.MustCompile(""@en"")', ')', 'func', 'validTitle', '(', 'content', '[]', 'string', ')', 'bool', '{', 'for', '_', ',', 'v', ':=', 'range', 'content', '{', 'if', '!', 'englishRegexp.MatchString(v) && len(v) > 1 && strings.Index(v, ""[]"")', '!=', '-', '1', '{', '}', '}', 'return', 'true', '}', 'func', 'validText', '(', 'content', '[]', 'string', ')', 'bool', '{', 'for', '_', ',', 'v', ':=', 'range', 'content', '{', 'if', '!', 'validRegexp.MatchString(v) && len(v) > 1 && strings.Index(v, ""[]"")', '!=', '-', '1', '{', 'return', 'false', '}', '}', 'return', 'true', '}', 'func', 'processTopic', '(', 'id', 'string', ',', 'properties', 'map', '[', 'string', '][]', 'string', ',', 'file', 'io', '.', 'Writer', '){', 'if', 'validTitle', '(', 'properties', '[', '""/type/object/name""', '])', '&&', 'validText', '(', 'properties', '[', '""/common/document/text""', ']){', 'fmt.Fprintf(file, ""\\n"")', 'fmt.Fprintf(file, ""\\""%s\\""\\n"", properties[""/type/object/name""])', 'fmt.Fprintf(file, ""\\""%s/%s\\""\\n"", ""https://usercontent.googleapis.com/freebase/v1/image"", id)', 'fmt.Fprintf(file, ""\\""%s\\""\\n"", properties[""/common/document/text""])', 'fmt.Fprintf(file, ""\\n"")', 'for', 'k', ',', 'v', ':=', 'range', 'properties', '{', 'for', '_', ',', 'value', ':=', 'range', 'v', '{', 'fmt.Fprintf(file, ""%s\\n"", k, value)', '}', '}', 'fmt.Fprintf(file, ""\\n"")', 'fmt.Fprintf(file, ""\\n"")', '}', '}', 'func', 'main', '(){', 'var', 'current_mid', '=', '""""', 'current_topic', ':=', 'make', '(', 'map', '[', 'string', '][]', 'string', ')', 'f', ',', 'err', ':=', 'os.Open(*inputFile)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'r', ':=', 'bufio.NewReader(f)', 'xmlFile', ',', '_', ':=', 'os.Create(""freebase.xml"")', 'line', ',', 'err', ':=', ""r.ReadString('\\n')"", 'for', 'err', '==', 'nil', '{', 'subject', ',', 'predicate', ',', 'object', ':=', 'parseTriple', '(', 'line', ')', 'if', 'subject', '==', 'current_mid', '{', 'current_topic', '[', 'predicate', ']', '=', 'append', '(', 'current_topic', '[', 'predicate', '],', 'object', ')', '}', 'else', 'if', 'len', '(', 'current_mid', ')', '>', '0', '{', 'processTopic', '(', 'current_mid', ',', 'current_topic', ',', 'xmlFile', ')', 'current_topic', '=', 'make', '(', 'map', '[', 'string', '][]', 'string', ')', '}', 'current_mid', '=', 'subject', 'line', ',', 'err', '=', ""r.ReadString('\\n')"", '}', 'processTopic', '(', 'current_mid', ',', 'current_topic', ',', 'xmlFile', ')', 'if', 'err', '!=', 'io', '.', 'EOF', '{', 'fmt.Println(err)', 'return', '}', '}']"
1357,27370217,"I want to send a stream (channel in Go) of messages to every client that connects to me through a websocket. There's a new message to send every ~100ms. How do I maintain a list of open connections with connections being opened and closed all the time while having to do some sort of iteration over that list to send out the messages for >50,000 connections? Right now I'm storing connections in a map that synchronizes with a single mutex, but I'm not sure if that can scale.
","['I', 'want', 'to', 'send', 'a', 'stream', '(channel', 'in', 'Go)', 'of', 'messages', 'to', 'every', 'client', 'that', 'connects', 'to', 'me', 'through', 'a', 'websocket.', ""There's"", 'a', 'new', 'message', 'to', 'send', 'every', '~100ms.', 'How', 'do', 'I', 'maintain', 'a', 'list', 'of', 'open', 'connections', 'with', 'connections', 'being', 'opened', 'and', 'closed', 'all', 'the', 'time', 'while', 'having', 'to', 'do', 'some', 'sort', 'of', 'iteration', 'over', 'that', 'list', 'to', 'send', 'out', 'the', 'messages', 'for', '>50,000', 'connections?', 'Right', 'now', ""I'm"", 'storing', 'connections', 'in', 'a', 'map', 'that', 'synchronizes', 'with', 'a', 'single', 'mutex,', 'but', ""I'm"", 'not', 'sure', 'if', 'that', 'can', 'scale.']"
1358,27397306,"

Anyone here have same problem with me? any solution guys?
","['I', 'know', 'this', 'is', 'very', 'basic,', 'but', 'i', 'think', 'the', 'official', 'documentation', 'at', '[beego', 'website][1]', '[1]:', 'http://beego.me/docs/mvc/model/query.md', ""doesn't"", 'give', 'clear', 'direction.', 'I', 'made', 'a', 'RESTful', 'API', 'using', 'beego', 'framework.', 'As', 'it', 'promised,', 'it', 'generates', 'basic', 'CRUD', 'code', 'for', 'my', 'app.', 'The', 'problem', 'is', 'READ', 'method', ""doesn't"", 'return', 'all', 'data.', 'By', 'all', 'data', 'I', 'mean', 'data', 'in', 'a', 'table', 'including', 'data', 'from', 'all', 'tables', 'related', 'to', 'it.', 'this', 'is', 'the', 'output', 'from', 'the', 'generated', 'code', ""(i'm"", 'using', 'swagger', 'to', 'call', 'it):', '{', '""data""', ':', '[', '{', '""Id""', ':', '1', ',', '""CustomerId""', ':', '{', '""Id""', ':', '2', ',', '""Name""', ':', '""""', ',', '""Phone""', ':', '""""', ',', '""Email""', ':', '""""', ',', '""CreatedAt""', ':', '""0001-01-01T00:00:00Z""', ',', '""UpdatedAt""', ':', '""0001-01-01T00:00:00Z""', '},', '""Saldo""', ':', '2500000', ',', '""CreatedAt""', ':', '""2014-12-10T08:10:10+07:00""', ',', '""UpdatedAt""', ':', '""2014-12-10T08:10:10+07:00""', '}', '],', '""totals""', ':', '1', '}', 'see,', 'it', ""doesn't"", 'return', 'the', 'Name,', 'Phone,', 'and', 'Email.', 'so', 'i', 'look', 'into', 'documentation', 'and', 'found', 'this', 'method', 'RelatedSel()', 'but', 'still', 'I', 'have', 'no', 'idea', 'how', 'to', 'use', 'it', 'properly.', ""here's"", 'my', 'code:', 'func', 'GetAllCustomerSaldo', '(', 'query', 'map', '[', 'string', ']', 'string', ',', 'fields', '[]', 'string', ',', 'sortby', '[]', 'string', ',', 'order', '[]', 'string', ',', 'offset', 'int64', ',', 'limit', 'int64', ')', '(', 'ml', '[]', 'interface', '{},', 'err', 'error', ',', 'totals', 'int64', ')', '{', 'o', ':=', 'orm.NewOrm()', 'qs', ':=', 'o.QueryTable(new(CustomerSaldo))', 'qs.RelatedSel(""CustomerId__Customers"").All(&CustomerSaldo{})', '...', 'after', 'trying', 'many', 'parameter', 'possibilities,', 'i', 'still', 'get', 'this', 'error:', 'Handler', 'crashed', 'with', 'error', 'unknown', 'model/table', 'name', 'Customers', 'Anyone', 'here', 'have', 'same', 'problem', 'with', 'me?', 'any', 'solution', 'guys?']"
1359,27447305,"

It is all strange, as each test creates a new ""/go-buildxxx/"" folder and therefore the folder should never actually be there?

Any ideas?
","['I', 'can', 'not', 'understand,', 'why', 'I', 'am', 'not', 'able', 'to', 'create', 'a', 'folder', 'and', 'write', 'to', 'a', 'file,', 'and', 'then', 'read', 'it', 'in', 'again', '-', 'with', 'the', 'same', 'path', 'in', 'same', 'func,', 'just', 'for', 'testing?', 'When', 'I', 'run', '""go', 'test', 'myio_test.go""', 'on', 'the', 'file.', 'I', 'get', 'myio_test.go', '...', 'func', 'TestMyIo', '(', 't', '*', 'testing', '.', 'T', ')', '{', 'myio.CreateTempJsonFile()', '}', '....', 'myio.go', 'package', 'myio', 'import', '(', '""fmt""', '""io/ioutil""', '""path""', '//', '""syscall""', '//', '""os""', '""bitbucket.org/kardianos/osext""', '""os""', ')', 'func', 'CreateTempJsonFile', '()', '{', 'exePath', ',', '_', ':=', 'osext.Executable()', 'filePath', ':=', 'path.Dir(exePath + ""/json/"")', 'fmt.Println(""create: "", filePath)', '_', ',', 'errx', ':=', 'os.Stat(filePath)', 'if', 'os.IsNotExist(errx)', '{', 'errm', ':=', 'os.Mkdir(filePath, 0644)', 'if', 'errm', '!=', 'nil', '{', 'fmt.Println(""error creating dir..."")', 'panic', '(', 'errm', ')', '}', '}', 'writeError', ':=', 'ioutil.WriteFile(filePath+""/user.txt"", []byte(`{""user"": ""Mac""}`), 0644) // os.ModeTemporary)// 0644)', 'if', 'writeError', '==', 'nil', '{', 'fmt.Println(""Ok write"")', '}', 'else', '{', 'fmt.Println(""Error write"")', '}', '_', ',', 'err', ':=', 'ioutil.ReadFile(filePath + ""/user.txt"")', 'if', 'err', '==', 'nil', '{', 'fmt.Println(""Reading file"")', '}', 'else', '{', 'fmt.Println(""Error reading file"")', '}', '}', 'It', 'is', 'like', 'the', 'os.Stat(filePath)', 'thinks', 'the', 'folder', 'is', 'already', 'there.', 'If', 'I', 'then', 'remove', 'the', 'check', 'for', 'os.Stat()', 'and', 'just', 'go', 'and', 'create', 'the', 'folder', 'I', 'get', 'a', 'panic', '""not', 'a', 'directory', '""?', 'fmt.Println(""create:', '"",', 'filePath)', 'prints:', '/private/var/folders/yj/jcyhsxxj6ml3tdfkp9gd2wpr0000gq/T/go-build627785093/command-line-arguments/_test/myio.test/json', 'It', 'is', 'all', 'strange,', 'as', 'each', 'test', 'creates', 'a', 'new', '""/go-buildxxx/""', 'folder', 'and', 'therefore', 'the', 'folder', 'should', 'never', 'actually', 'be', 'there?', 'Any', 'ideas?']"
1360,27468281,"
","['I', 'try', 'to', 'use', 'martini', 'framework', 'with', 'layout', 'template:', 'package', 'main', 'import', '(', '""github.com/go-martini/martini""', '""github.com/martini-contrib/render""', ')', 'func', 'main', '()', '{', 'm', ':=', 'martini.Classic()', 'm', '.', 'Use', '(', 'render', '.', 'Renderer', '(', 'render', '.', 'Options', '{', 'Directory', ':', '""./templates""', ',', 'Layout', ':', '""layout""', ',', 'Extensions', ':', '[]', 'string', '{', '"".tmpl""', '},', '}))', 'm.Get(""/"", func(r render.Render)', '{', 'r.HTML(200, ""mainPage"", map[string]interface{}{""Title"": ""some title"", ""H1"": ""some h1""})', '})', 'm.Run()', '}', 'In', 'the', 'same', 'folder', 'as', 'this', 'main.go', 'file', 'I', 'got', 'folder', 'templates', 'with', 'layout.tmpl', 'file:', '{{', 'template', '""left""', '.}}', '{{', 'template', '""right""', '.}}', 'and', 'mainPage.tmpl', 'file:', '{{', 'define', '""left""', '}}', 'left', 'content', '{{', 'end', '}}', '{{', 'define', '""right""', '}}', 'right', 'content', '{{', 'end', '}}', 'When', 'I', 'open', 'http', '://', 'localhost', ':', '3000', '/', 'in', 'browser', 'I', 'see', 'error:', 'html/template:', '""layout""', 'is', 'undefined']"
1361,27485256,"

playground
","['How', 'to', 'prevent', 'converting', 'to', '\\u003cp\\u003e', 'in', 'json.Marshal', '?', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', ')', 'type', 'User', 'struct', '{', 'Name', 'string', '}', 'func', 'main', '()', '{', 'user', ':=', 'User', '{', 'Name', ':', '""Frank""', '}', 'b', ',', 'err', ':=', 'json.Marshal(&user)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'fmt.Println(user)', 'fmt.Println(string(b))', '}', 'It', 'outputs:', '{', 'Frank', '}', '{', '""Name""', ':', '""\\u003cp\\u003eFrank\\u003c/p\\u003e""', '}', 'playground']"
1362,27528430,"
","['I', 'would', 'really', 'appreciate', 'if', 'you', 'helped', 'me.', ""I'm"", 'rewriting', 'a', 'simple', 'Minecraft', 'launcher', 'from', 'Java', 'to', 'Go.', 'Everything', 'is', 'good,', 'in', 'exception', 'of', 'one', 'thing.', 'I', 'have', 'a', 'start', 'function', 'which', 'executes', 'using', 'os.Exec', 'this', 'command:', 'java', '-', 'Xincgc', '-', 'Xmx1024M', '-', 'Djava', '.', 'library', '.', 'path', '=', '""/minecraft/bin/natives/""', '-', 'cp', '""/minecraft/bin/*""', '-', 'Dfml', '.', 'ignoreInvalidMinecraftCertificates', '=', 'true', '-', 'Dfml', '.', 'ignorePatchDiscrepancies', '=', 'true', 'net', '.', 'minecraft', '.', 'launchwrapper', '.', 'Launch', '--', 'username', 'user', '--', 'session', 'session', '--', 'version', '1', '.', '6', '.', '4', '--', 'gameDir', '""/minecraft""', '--', 'assetsDir', '""/minecraft""', '--', 'tweakClass', 'cpw', '.', 'mods', '.', 'fml', '.', 'common', '.', 'launcher', '.', 'FMLTweaker', 'Everything', 'is', 'fine', 'running', 'this', 'through', 'bash', 'or', 'cmd,', 'but', 'when', 'executed', 'with', 'Go', 'function', 'it', 'returns', 'the', 'following:', 'Could', 'not', 'find', 'or', 'load', 'main', 'class', 'net', '.', 'minecraft', '.', 'launchwrapper', '.', 'Launch', 'I', 'think', 'os.exec(Command)', 'cannot', 'properly', 'interpet', 'this', 'part', 'of', 'command:', '-', 'cp', '""/minecraft/bin/*""', 'Maybe', ""that's"", 'because', 'I', 'quoted', 'string', '""/minecraft/bin/*""', 'with', 'strconv.Quote()', 'function', 'or', 'because', 'of', 'asterisk.', 'I', 'really', ""don't"", 'know', ""what's"", 'heppening.', 'Ah,', 'btw,', 'the', 'command', 'os.exec', 'has', 'run', 'is', 'correct,', 'though', '(I', 'read', 'it', 'in', 'stdout', 'with', 'fmt', 'for', 'debugging', 'purposes).', 'program:', 'func', 'start', '(', 'login', 'string', ',', 'session', 'string', ',', 'ram', 'string', ')', '{', '//', 'start', 'game', 'app', ':=', '""java""', 'arg0', ':=', '""-Xincgc""', 'arg1', ':=', '""-Xmx""', '+', 'ram', '+', '""M""', 'arg2', ':=', '""-Djava.library.path=""', '+', 'strconv.Quote(filepath.FromSlash(client+""bin/natives/""))', 'arg3', ':=', '""-cp""', 'arg4', ':=', 'strconv.Quote(filepath.FromSlash(client + ""bin/*""))', 'arg5', ':=', '""-Dfml.ignoreInvalidMinecraftCertificates=true""', 'arg6', ':=', '""-Dfml.ignorePatchDiscrepancies=true""', 'arg7', ':=', '""net.minecraft.launchwrapper.Launch""', 'arg8', ':=', '""--username""', '//', 'arg9', 'is', 'login', 'arg10', ':=', '""--session""', '//', 'arg11', 'is', 'session', 'arg12', ':=', '""--version 1.6.4""', 'arg13', ':=', '""--gameDir""', 'arg14', ':=', 'strconv.Quote(filepath.FromSlash(client))', 'arg15', ':=', '""--assetsDir""', 'arg16', ':=', 'strconv.Quote(filepath.FromSlash(client + ""assets""))', 'arg17', ':=', '""--tweakClass cpw.mods.fml.common.launcher.FMLTweaker""', 'cmd', ':=', 'exec.Command(app, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, login, arg10, session, arg12, arg13, arg14, arg15, arg16, arg17)', 'cmd', '.', 'Stdout', '=', 'os', '.', 'Stdout', 'cmd', '.', 'Stderr', '=', 'os', '.', 'Stderr', 'cmd.Run()', 'fmt.Println(app, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, login, arg10, session, arg12, arg13, arg14, arg15, arg16, arg17)', '}']"
1363,27658081,"I'd like to have my go files indented with tabs not whitespaces. 
When I run :set expandtab then :retab I get what I want but it automatically switches back to an indentation with whitespaces everytime I save the file.

I am using the vim-go plugin but I couldn't find anything in the doc/code which could lead to this issue. I have tried changing to setlocal noexpandtab in ftplugin/go.vim but it didn't work

How can I change this?

Many thanks
",[]
1364,27686338,"

I am not able to understand followings in this code :


Marshal() is not included in the net package documentation, please let me know how to find this function and why it is not included in the net package. 
please explain me line #121 (icmpMessage struct and function calling as these are not defined in this file). 

","['I', 'am', 'writing', 'small', 'code', 'for', 'generating', 'the', 'ICMP', 'packet.', 'For', 'that', 'I', 'am', 'following', 'the', 'code', 'from', 'golang', 'net', 'package.', 'I', 'identified', 'the', 'following', 'code', 'to', 'use', 'for', 'ICMP', 'packet', 'generation:', '109', 'c', ',', 'err', ':=', 'Dial', '(', 'tt', '.', 'net', ',', 'tt', '.', 'raddr', ')', '110', 'if', 'err', '!=', 'nil', '{', '111', 't.Fatalf(""Dial failed: %v"", err)', '112', '}', '113', 'c.SetDeadline(time.Now().Add(100 * time.Millisecond))', '114', 'defer', 'c.Close()', '115', '116', 'typ', ':=', 'icmpv4EchoRequest', '117', 'if', 'net', '==', '""ip6""', '{', '118', 'typ', '=', 'icmpv6EchoRequest', '119', '}', '120', 'xid', ',', 'xseq', ':=', 'os.Getpid()', '&', '0xffff', ',', 'i', '+', '1', '121', 'wb', ',', 'err', ':=', '(&', 'icmpMessage', '{', '122', 'Type', ':', 'typ', ',', 'Code', ':', '0', ',', '123', 'Body', ':', '&', 'icmpEcho', '{', '124', 'ID', ':', 'xid', ',', 'Seq', ':', 'xseq', ',', '125', 'Data', ':', 'bytes.Repeat([]byte(""Go Go Gadget Ping!!!""), 3)', ',', '126', '},', '127', '}).', 'Marshal', '()', '128', 'if', 'err', '!=', 'nil', '{', '129', 't.Fatalf(""icmpMessage.Marshal failed: %v"", err)', '130', '}', '131', 'if', '_', ',', 'err', ':=', 'c.Write(wb)', ';', 'err', '!=', 'nil', '{', '132', 't.Fatalf(""Conn.Write failed: %v"", err)', '133', '}', 'I', 'am', 'not', 'able', 'to', 'understand', 'followings', 'in', 'this', 'code', ':', 'Marshal()', 'is', 'not', 'included', 'in', 'the', 'net', 'package', 'documentation,', 'please', 'let', 'me', 'know', 'how', 'to', 'find', 'this', 'function', 'and', 'why', 'it', 'is', 'not', 'included', 'in', 'the', 'net', 'package.', 'please', 'explain', 'me', 'line', '#121', '(icmpMessage', 'struct', 'and', 'function', 'calling', 'as', 'these', 'are', 'not', 'defined', 'in', 'this', 'file).']"
1365,27795036,".

playground
","['Is', 'it', 'posible', 'to', 'create', 'channel', 'for', 'function', 'boolInt', 'without', 'redefining', 'it?', 'package', 'main', 'func', 'boolInt', '()', '(', 'bool', ',', 'int', ')', '{', 'return', 'false', ',', '1', '}', 'func', 'main', '()', '{', 'chan', 'Bool', ':=', 'make', '(', 'chan', 'bool', ')', 'chan', 'Int', ':=', 'make', '(', 'chan', 'int', ')', 'go', 'func', '()', '{', '//', 'chanBool', '<-', 'boolInt()', 'error:', 'multiple-value', 'boolInt()', 'in', 'single-value', 'context', 'chan', 'Bool', ',', 'chan', 'Int', '<-', 'boolInt', '()', '//  syntax error: unexpected semicolon or newline, expecting := or = or comma', '}()', '}', 'When', 'I', 'try', 'to', 'use', 'it', 'in', 'single', 'value', 'context', 'chanBool', 'I', 'get', 'an', 'error:', 'multiple-value', 'boolInt()', 'in', 'single-value', 'context.', 'In', '2-value', 'context:', 'chanBool,', 'chanInt', 'got', 'error:', 'syntax', 'error:', 'unexpected', 'semicolon', 'or', 'newline,', 'expecting', ':=', 'or', '=', 'or', 'comma.', 'playground', 'chan', 'Bool', '<-', 'boolInt', '()', 'When', 'I', 'try', 'to', 'use', 'it', 'in', 'single', 'value', 'context', 'chanBool', 'I', 'get', 'an', 'error:', 'multiple', '-', 'value', 'boolInt', '()', 'in', 'single', '-', 'value', 'context', '.', 'In', '2-value', 'context:', 'chanBool,', 'chanInt', 'got', 'error:', 'syntax', 'error:', 'unexpected', 'semicolon', 'or', 'newline,', 'expecting', ':=', 'or', '=', 'or', 'comma.', 'playground', 'chan', 'Bool', ',', 'chan', 'Int', '<-', 'boolInt', '()', '.', 'In', '2-value', 'context:', 'chanBool,', 'chanInt', 'got', 'error:', 'syntax', 'error', ':', 'unexpected', 'semicolon', 'or', 'newline', ',', 'expecting', ':=', 'or', '=', 'or', 'comma', '.', 'playground']"
1366,27819137,"

(Go Playground link)

The second one prints 9.120000000000001, which is actually fine, I understand why that is happening.

However, why does the first line print 9.12, without the …01 at the end? Does Go multiply the two untyped constants and simply replace them with a 9.12 literal when compiling?
","['Consider', 'these', 'two', 'cases:', 'fmt.Println(912 * 0.01)', 'fmt.Println(float64(912) * 0.01)', '(Go', 'Playground', 'link)', 'The', 'second', 'one', 'prints', '9.120000000000001,', 'which', 'is', 'actually', 'fine,', 'I', 'understand', 'why', 'that', 'is', 'happening.', 'However,', 'why', 'does', 'the', 'first', 'line', 'print', '9.12,', 'without', 'the', '…01', 'at', 'the', 'end?', 'Does', 'Go', 'multiply', 'the', 'two', 'untyped', 'constants', 'and', 'simply', 'replace', 'them', 'with', 'a', '9.12', 'literal', 'when', 'compiling?']"
1367,27852940,"I found that, for the same string, the result of using zlib in golang is different with that in c. How can I compress in golang and decompress in c by zlib ? Which version does go use?
","['I', 'found', 'that,', 'for', 'the', 'same', 'string,', 'the', 'result', 'of', 'using', 'zlib', 'in', 'golang', 'is', 'different', 'with', 'that', 'in', 'c.', 'How', 'can', 'I', 'compress', 'in', 'golang', 'and', 'decompress', 'in', 'c', 'by', 'zlib', '?', 'Which', 'version', 'does', 'go', 'use?']"
1368,27869858,"I'm a beginner to golang. 

Is there any way to limit golang's http.Get() bandwidth usage? I found this: http://godoc.org/code.google.com/p/mxk/go1/flowcontrol, but I'm not sure how to piece the two together. How would I get access to the http Reader?
","[""I'm"", 'a', 'beginner', 'to', 'golang.', 'Is', 'there', 'any', 'way', 'to', 'limit', ""golang's"", 'http.Get()', 'bandwidth', 'usage?', 'I', 'found', 'this:', 'http://godoc.org/code.google.com/p/mxk/go1/flowcontrol,', 'but', ""I'm"", 'not', 'sure', 'how', 'to', 'piece', 'the', 'two', 'together.', 'How', 'would', 'I', 'get', 'access', 'to', 'the', 'http', 'Reader?']"
1369,27933739,"
","[""I've"", 'found', 'this', 'operator', '|=', 'and', ""I'm"", 'wondering', 'what', 'it', 'means', 'func', 'getPageInfoMode', '(', 'r', '*', 'http', '.', 'Request', ')', '(', 'mode', 'PageInfoMode', ')', '{', 'for', '_', ',', 'k', ':=', 'range', 'strings.Split(r.FormValue(""m""), "","")', '{', 'if', 'm', ',', 'found', ':=', 'modeNames', '[', 'strings.TrimSpace(k)', '];', 'found', '{', 'mode', '|=', 'm', '}', '}', 'return', '}']"
1370,27948469,"In the go sql package, I understand that each statement should be closed after execution.
Why would someone use prepared statements instead of just the raw Query or Exec methods?
",[]
1371,27984992,"
","['I', 'have', 'the', 'code', 'to', 'find', 'the', 'kth', 'from', 'the', 'last', 'element', 'in', 'a', 'list', 'in', 'golang.', 'I', 'wrote', 'a', 'recursive', 'function.', 'When', 'it', 'reaches', 'the', 'end', 'of', 'the', 'list,', 'it', 'will', 'return', 'the', 'count', 'as', '1', 'and', 'increments', 'in', 'further', 'returns.', 'When', 'the', 'count', '==', 'k', 'then', 'return', 'the', 'node', 'value.', 'But', 'I', 'am', 'getting', ""'nil"", 'pointer', ""dereference'"", 'error.', 'Could', 'anyone', 'help', 'me', 'in', 'this?', 'package', 'main', 'import', '(', '""container/list""', '""fmt""', ')', 'var', 'sMap', 'map', '[', 'int', ']', 'bool', 'func', 'main', '()', '{', 'l', ':=', 'list.New()', 'for', 'i', ':=', '1', ';', 'i', '<', '100', ';', 'i', '++', '{', 'l.PushBack(i)', '}', 'kFromLastElemRec', ':=', 'findKFromLastRecr', '(', 'l.Front(), 3, WrapObj{0})', 'fmt.Println(kFromLastElemRec.Value.(int))', '}', '//', 'Object', 'to', 'store', 'the', 'count', 'type', 'WrapObj', 'struct', '{', 'count', 'int', '}', '//', 'ERROR', '//', 'recursive', 'function', 'to', 'find', 'the', 'kth', 'from', 'last', 'element', 'func', 'findKFromLastRecr', '(', 'head', '*', 'list', '.', 'Element', ',', 'k', 'int', ',', 'wrapper', 'WrapObj', ')', '*', 'list', '.', 'Element', '{', 'if', 'head', '==', 'nil', '{', 'return', 'nil', '}', 'resNode', ':=', 'findKFromLastRecr', '(', 'head.Next(), k, wrapper)', 'wrapper', '.', 'count', '=', '(', 'wrapper', '.', 'count', ')', '+', '1', 'if', 'wrapper', '.', 'count', '==', 'k', '{', 'return', 'head', '}', 'return', 'resNode', '}']"
1372,27986534,"It seems that there is no Ranger interface for ranging over custom types. Is there anything similar? Or do I have to make a method that converts the type to a slice or map?

Edit: of course I could cast x to []struct, but that would make it harder to change the underlying type of x.
",[]
1373,27995531,"

could anyone help me on this?
","['I', 'wrote', 'a', 'function', 'to', 'find', 'the', 'loop', 'in', 'a', 'list', 'using', 'golang.', 'But', 'I', 'am', 'not', 'able', 'to', 'construct', 'a', 'loop', 'in', 'a', 'list', 'as', 'input.', 'Please', 'find', 'below', 'the', 'code,', 'package', 'main', 'import', '(', '""container/list""', '""fmt""', ')', 'func', 'main', '()', '{', 'l', ':=', 'list.New()', 'l.PushBack(0)', 'l.PushBack(1)', 'l.PushBack(2)', 'l.PushBack(3)', 'l.PushBack(4)', 'l.PushBack(5)', 'e6', ':=', 'l.PushBack(6)', 'l.PushBack(7)', 'e8', ':=', 'l.PushBack(8)', 'e9', ':=', 'l.InsertAfter(9,e8)', 'l.InsertBefore(e9, e6)', 'for', 'e', ':=', 'l.Front() ; e !=nil ; e=e.Next()', '{', 'fmt.Println(e.Value)', '}', '}', 'could', 'anyone', 'help', 'me', 'on', 'this?']"
1374,28008164," to a posFlag param required by ParseQueryPos which looks like /pathto/file.go:#550.

Why?

I'm using the Oracle tool to do some static analysis. I need to run Oracle.Query which requires a param of type *QueryPos. The only way to get *QueryPos is using ParseQueryPos. 
","['How', 'can', 'I', 'encode', 'the', 'position', 'of', 'the', 'form', '/pathto/file.go:40:32', 'which', 'is', 'returned', 'by', 'token', '.', 'Position.String()', 'to', 'a', 'posFlag', 'param', 'required', 'by', 'ParseQueryPos', 'which', 'looks', 'like', '/pathto/file.go:#550.', 'Why?', ""I'm"", 'using', 'the', 'Oracle', 'tool', 'to', 'do', 'some', 'static', 'analysis.', 'I', 'need', 'to', 'run', 'Oracle.Query', 'which', 'requires', 'a', 'param', 'of', 'type', '*QueryPos.', 'The', 'only', 'way', 'to', 'get', '*QueryPos', 'is', 'using', 'ParseQueryPos.']"
1375,28023566,"

in the strings package.

My guess is that if you want to implement a custom version of ToUpper on a custom type that extends string (i.e., type MyString string), you have no way to access the builtin ToUpper anymore on that type, but I can't find any support on this.
","['I', 'was', 'just', 'wondering', 'why', 'the', 'string', 'functions', 'in', 'Google', 'Go', 'are', 'defined', 'in', 'a', 'strings', 'package', 'as', 'opposed', 'to', 'on', 'the', 'string', 'data', 'type', 'itself.', 'They', 'could', 'have', 'easily', 'done', 'func', '(', 's', 'string', ')', 'ToUpper', '()', 'string', '{', '}', 'instead', 'of', 'the', 'current', 'func', 'ToUpper', '(', 's', 'string', ')', 'string', '{', '}', 'in', 'the', 'strings', 'package.', 'My', 'guess', 'is', 'that', 'if', 'you', 'want', 'to', 'implement', 'a', 'custom', 'version', 'of', 'ToUpper', 'on', 'a', 'custom', 'type', 'that', 'extends', 'string', '(i.e.,', 'type', 'MyString', 'string),', 'you', 'have', 'no', 'way', 'to', 'access', 'the', 'builtin', 'ToUpper', 'anymore', 'on', 'that', 'type,', 'but', 'I', ""can't"", 'find', 'any', 'support', 'on', 'this.']"
1376,28033957,"

I only need this to work on Windows.
","['In', 'OS', 'package', 'there', 'is', 'a', 'FindProcess()', 'that', 'you', 'can', 'pass', 'in', 'the', 'ID', 'of', 'the', 'process', 'to', 'get', 'a', 'process.', 'You', 'can', 'then', 'call', 'kill', 'on', 'the', 'process', 'but', 'is', 'there', 'a', 'way', 'to', 'find', 'a', 'process', 'based', 'off', 'of', 'the', 'name?', '(In', 'windows)', 'For', 'example', 'i', 'would', 'like', 'to', 'be', 'able', 'to', 'do', 'something', 'like', 'this.', 'p', ',', 'perr', ':=', 'os.FindProcessByName(""Itunes"")', 'if', 'perr', '!=', 'nil', '{', 'fmt.Println(perr)', '}', 'p.Kill()', 'I', 'only', 'need', 'this', 'to', 'work', 'on', 'Windows.']"
1377,28047311,"
","['We', 'can', 'use', 'for', '_', ',', 'x', ':=', 'range', '[]', 'int', '{', '1', ',', '2', ',', '3', '}', '{', '//', 'do', 'something', '}', 'To', 'iterate', 'an', 'array.', 'How', 'can', 'I', 'iterate', 'two', 'arrays', 'simultaneously?', 'Is', 'there', 'something', 'like', 'following', 'in', 'python?', 'for', 'x', ',', 'y', 'in', 'range', '([', '1', ',', '2', ',', '3', '],', '[', '4', ',', '5', ',', '6', ']):', 'print', 'x', ',', 'y']"
1378,28083629," message always.
While using Python, I'm getting the correct results with the same input data.
","[""I'm"", 'trying', 'to', 'implement', 'oauth-workflow', 'for', 'GitHub', 'in', 'golang', 'and', 'using', 'https://github.com/franela/goreq', 'to', 'perform', 'http(s)', 'requests.', 'There', 'is', 'a', 'section', 'in', 'which', 'GitHub', 'returns', 'a', 'code', 'and', 'you', 'have', 'to', 'make', 'a', 'POST', 'request', 'to', 'https://github.com/login/oauth/access_token', 'with', 'code,', 'client_id', 'and', 'client_secret.', 'package', 'main', 'import', '""fmt""', 'import', '""github.com/franela/goreq""', 'type', 'param', 'struct', '{', 'code', 'string', 'client_id', 'string', 'client_secret', 'string', '}', 'func', 'main', '()', '{', 'params', ':=', 'param', '{', 'code', ':', '""XX""', ',', 'client_id', ':', '""XX""', ',', 'client_secret', ':', '""XX""', '}', 'req', ':=', 'go', 'req', '.', 'Request', '{', 'Method', ':', '""POST""', ',', 'Uri', ':', '""https://github.com/login/oauth/access_token""', ',', 'Body', ':', 'params', ',', '}', 'req.AddHeader(""Content-Type"", ""application/json"")', 'req.AddHeader(""Accept"", ""application/json"")', 'res', ',', '_', ':=', 'req.Do()', 'fmt.Println(res.Body.ToString())', '}', 'It', 'is', 'giving', '404', 'with', '{', '""error""', ':', '""Not Found""', '}', 'message', 'always.', 'While', 'using', 'Python,', ""I'm"", 'getting', 'the', 'correct', 'results', 'with', 'the', 'same', 'input', 'data.']"
1379,28188504,"

I'd love some pointers as to how I can provide appengine with a ""known"" http.Request because ultimately I am trying to get to the storage api which also requires a valid context.
","['I', 'post', 'JSON', 'to', 'an', 'app', 'I', 'registered', 'at', 'Google', 'App', 'Engine', 'but', 'I', 'am', 'baffled', 'by', 'the', 'authentication', 'process', 'in', 'my', 'Go', 'code', 'to', 'get', 'it', 'working', 'in', 'appengine:', 'func', 'init', '()', '{', 'http.HandleFunc(""/post"", handler)', '}', 'func', 'handler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'app', ':=', 'appengine.NewContext(r)', 'client', ':=', '&', 'http', '.', 'Client', '{', 'Transport', ':', '&', 'oauth2', '.', 'Transport', '{', 'Source', ':', 'go', 'ogle.AppEngineTokenSource(app, ""https://www.googleapis.com/auth/bigquery"")', ',', 'Base', ':', '&', 'urlfetch', '.', 'Transport', '{', 'Context', ':', 'app', ',', '},', '},', '}', 'log.Print(client)', '}', 'In', 'following', 'the', 'docs,', 'I', 'have', 'reduced', 'my', 'problem', 'to', 'the', 'code', 'above', 'which', 'consistently', 'gives', 'me', 'the', 'following', 'error:', '2015/01/28', '0', '9', ':', '05', ':', '32', 'appengine', ':', 'NewContext', 'passed', 'an', 'unknown', 'http', '.', 'Request', ""I'd"", 'love', 'some', 'pointers', 'as', 'to', 'how', 'I', 'can', 'provide', 'appengine', 'with', 'a', '""known""', 'http.Request', 'because', 'ultimately', 'I', 'am', 'trying', 'to', 'get', 'to', 'the', 'storage', 'api', 'which', 'also', 'requires', 'a', 'valid', 'context.']"
1380,28197443,"

This basic call returns ""undefined: Decode"" error. Is there anything else to be done besides the import?

Thanks in advance!
","[""I've"", 'imported', '_', '""github.com/mitchellh/mapstructure""', 'Into', 'a', 'project', 'of', 'mine.', 'However', ""i'm"", 'not', 'able', 'to', 'utilize', 'the', 'Decode', 'function', 'included', 'in', 'that', 'library', 'in', 'order', 'to', 'convert', 'a', 'map', 'interface', 'to', 'struct:', 'var', 'result', 'Person', 'err', ':=', 'Decode', '(', 'input', ',', '&', 'result', ')', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'This', 'basic', 'call', 'returns', '""undefined:', 'Decode""', 'error.', 'Is', 'there', 'anything', 'else', 'to', 'be', 'done', 'besides', 'the', 'import?', 'Thanks', 'in', 'advance!']"
1381,28300581,"

This code is correctly printing out all the received values from the channels.
But in the end it is exiting with the below error :


  fatal error: all goroutines are asleep - deadlock!
  
  goroutine 1 [select]: reflect.rselect(0xc200283480, 0x22, 0x22,
  0xffffffffffffffff, 0x0, ...)
          /usr/local/go/src/pkg/runtime/chan.c:1212 +0x10d 
   reflect.Select(0xc200066800, 0x22, 0x22, 0x1, 0x0, ...)
          /usr/local/go/src/pkg/reflect/value.go:1957 +0x1fb


I am a newbee at GO. I referred google and somehow managed to write a working code. I didn't understand fully how this script works especially the reflect package commands. My intention here is to execute the unix commands listed in ../tmpStatus.config file parallely and print out the results. I am excited by the concurrency features offered by GO and hence decided to give it a try. Now it is printing the results so fast. Till now, I was doing this in python one by one.
I ran this script in go version go1.1.2 linux/amd64 installed to a custom location.
Any idea why the deadlock is happening ?
","['package', 'main', 'import', '(', '""fmt""', '""os""', '""os/exec""', '""bufio""', '""reflect""', ')', 'func', 'runTheCommand', '(', 'ch', 'chan', '<-', 'string', ',', 'cmD', 'string', ')', '{', 'ouT', ',', '_', ':=', 'exec.Command(""sh"",""-c"",cmD).Output()', 'ch', '<-', 'string', '(', 'ouT', ')', '}', '//', 'Readln', 'returns', 'a', 'single', 'line', '(without', 'the', 'ending', '\\n)', 'from', 'the', 'input', 'buffered', 'reader.', 'An', 'error', 'is', 'returned', 'iff', 'there', 'is', 'an', 'error', 'with', 'the', 'buffered', 'reader.', 'func', 'Readln', '(', 'r', '*', 'bufio', '.', 'Reader', ')', '(', 'string', ',', 'error', ')', '{', 'var', '(', 'isPrefix', 'bool', '=', 'true', 'err', 'error', '=', 'nil', 'line', ',', 'ln', '[]', 'byte', ')', 'for', 'isPrefix', '&&', 'err', '==', 'nil', '{', 'line', ',', 'isPrefix', ',', 'err', '=', 'r.ReadLine()', 'ln', '=', 'append', '(', 'ln', ',', 'line', '...)', '}', 'return', 'string', '(', 'ln', '),', 'err', '}', 'func', 'main', '()', '{', 'var', 'chan', 's', '=', '[]', 'chan', 'string', '{}', 'f', ',', '_', ':=', 'os.Open(""../tmpStatus.config"")', 'r', ':=', 'bufio.NewReader(f)', 'cmD', ',', 'e', ':=', 'Readln', '(', 'r', ')', 'for', 'e', '==', 'nil', '{', 'ch', ':=', 'make', '(', 'chan', 'string', ')', 'chan', 's', '=', 'append', '(', 'chan', 's', ',', 'ch', ')', 'go', 'runTheCommand', '(', 'ch', ',', 'cmD', ')', 'cmD', ',', 'e', '=', 'Readln', '(', 'r', ')', '}', 'case', 's', ':=', 'make', '([]', 'reflect', '.', 'SelectCase', ',', 'len', '(', 'chan', 's', '))', 'for', 'i', ',', 'ch', ':=', 'range', 'chan', 's', '{', 'case', 's', '[', 'i', ']', '=', 'reflect', '.', 'SelectCase', '{', 'Dir', ':', 'reflect', '.', 'SelectRecv', ',', 'Chan', ':', 'reflect.ValueOf(ch)', '}', '}', 'remaining', ':=', 'len', '(', 'case', 's', ')', 'for', 'remaining', '>', '0', '{', 'chosen', ',', 'value', ',', 'ok', ':=', 'reflect.Select(cases)', 'if', '!', 'ok', '{', 'case', 's', '[', 'chosen', '].', 'Chan', '=', 'reflect.ValueOf(nil)', 'remaining', '-=', '1', 'continue', '}', 'fmt.Printf(""%s"", value.String())', '}', '}', 'This', 'code', 'is', 'correctly', 'printing', 'out', 'all', 'the', 'received', 'values', 'from', 'the', 'channels.', 'But', 'in', 'the', 'end', 'it', 'is', 'exiting', 'with', 'the', 'below', 'error', ':', 'fatal', 'error:', 'all', 'goroutines', 'are', 'asleep', '-', 'deadlock!', 'goroutine', '1', '[select]:', 'reflect.rselect(0xc200283480,', '0x22,', '0x22,', '0xffffffffffffffff,', '0x0,', '...)', '/usr/local/go/src/pkg/runtime/chan.c:1212', '+0x10d', 'reflect.Select(0xc200066800,', '0x22,', '0x22,', '0x1,', '0x0,', '...)', '/usr/local/go/src/pkg/reflect/value.go:1957', '+0x1fb', 'I', 'am', 'a', 'newbee', 'at', 'GO.', 'I', 'referred', 'google', 'and', 'somehow', 'managed', 'to', 'write', 'a', 'working', 'code.', 'I', ""didn't"", 'understand', 'fully', 'how', 'this', 'script', 'works', 'especially', 'the', 'reflect', 'package', 'commands.', 'My', 'intention', 'here', 'is', 'to', 'execute', 'the', 'unix', 'commands', 'listed', 'in', '../tmpStatus.config', 'file', 'parallely', 'and', 'print', 'out', 'the', 'results.', 'I', 'am', 'excited', 'by', 'the', 'concurrency', 'features', 'offered', 'by', 'GO', 'and', 'hence', 'decided', 'to', 'give', 'it', 'a', 'try.', 'Now', 'it', 'is', 'printing', 'the', 'results', 'so', 'fast.', 'Till', 'now,', 'I', 'was', 'doing', 'this', 'in', 'python', 'one', 'by', 'one.', 'I', 'ran', 'this', 'script', 'in', 'go', 'version', 'go1.1.2', 'linux/amd64', 'installed', 'to', 'a', 'custom', 'location.', 'Any', 'idea', 'why', 'the', 'deadlock', 'is', 'happening', '?']"
1382,28454756,"

For example in regexr the following input does not match:

1.12,4.64


But in Go it does match.
","['I', 'have', 'developed', 'some', 'regex', 'in', 'regexr', 'where', 'it', 'works', 'as', 'expected,', 'but', 'when', 'I', 'use', 'it', 'in', 'Go', 'it', 'seems', 'to', 'be', 'mismatching', 'strings.', '(', '+|-)', '(((', 'd', '{', '1', ',', '3', '}[,', '])(', 'd', '{', '3', '}[', ',])*', 'd', '{', '3', '})|', 'd', '+)(', '[', '.,]', '(', 'd', '{', '3', '}[,', '])*', 'd', '+)', 'For', 'example', 'in', 'regexr', 'the', 'following', 'input', 'does', 'not', 'match:', '1.12,4.64', 'But', 'in', 'Go', 'it', 'does', 'match.']"
1383,28486324," package. However, after playing with the code and trying to reproduce the logic of the article, I still hardly understand how to use it for every incoming request and even why it is useful for this.

How should I organize my code to create context (and what should it contain, generally) for every incoming request using the golang.org/x/net/context package? Could anybody give a little example and explain what is so useful and why so frequently used?
","['From', 'time', 'to', 'time', 'I', 'am', 'faced', 'with', 'the', '""Context""', 'concept', 'which,', 'as', 'a', 'rule', 'is', 'created', 'for', 'all', 'incoming', 'requests.', 'Recently', ""I've"", 'read', 'the', 'Go', 'blog', 'article', 'that', 'describes', 'using', 'the', 'go', 'lang', '.', 'org/x/net/context', 'package.', 'However,', 'after', 'playing', 'with', 'the', 'code', 'and', 'trying', 'to', 'reproduce', 'the', 'logic', 'of', 'the', 'article,', 'I', 'still', 'hardly', 'understand', 'how', 'to', 'use', 'it', 'for', 'every', 'incoming', 'request', 'and', 'even', 'why', 'it', 'is', 'useful', 'for', 'this.', 'How', 'should', 'I', 'organize', 'my', 'code', 'to', 'create', 'context', '(and', 'what', 'should', 'it', 'contain,', 'generally)', 'for', 'every', 'incoming', 'request', 'using', 'the', 'golang.org/x/net/context', 'package?', 'Could', 'anybody', 'give', 'a', 'little', 'example', 'and', 'explain', 'what', 'is', 'so', 'useful', 'and', 'why', 'so', 'frequently', 'used?']"
1384,28528060,"

I need help for solving this problem.

It seems like this but I don't see any solution https://bugs.launchpad.net/juju-core/+bug/1307434
","['I', 'wrote', 'a', 'golang', 'program', 'which', 'run', 'well', 'in', 'the', 'past', 'several', 'months', 'in', 'ubuntu', '12.04', 'LTS', 'until', 'I', 'upgraded', 'it', 'to', '14.04', 'LTS', 'My', 'program', 'is', 'focused', 'on', 'sending', 'HTTP', 'requests', 'which', 'send', 'about', '2-10', 'HTTP', 'requests', 'per', 'second.', 'The', 'HTTP', 'request', 'address', 'vary.', 'When', 'the', 'problem', 'occurs,', 'first,', 'some', 'of', 'the', 'requests', 'shows', 'read', 'tcp', '[', 'ip', ']:[', 'port', ']:', 'i/o', 'timeout', ',', 'then', 'after', 'several', 'minutes', 'all', 'requests', 'show', 'read', 'tcp', '[ip]:[port]:', 'i/o', 'timeout,', 'not', 'any', 'request', 'can', 'be', 'sent.', 'I', 'restart', 'the', 'program,', 'everything', 'become', 'right', 'again.', 'All', 'of', 'our', 'servers(2', 'server)', 'have', 'such', 'problem', 'after', 'upgraded', 'from', '12.04', 'to', '14.04', 'I', 'create', 'new', 'goroutine', 'for', 'every', 'request', 'the', 'problem', 'does', 'not', 'occur', 'in', 'the', 'same', 'interval,', 'sometimes', 'it', ""won't"", 'occur', 'one', 'or', 'two', 'day,', 'sometimes', 'It', 'occur', 'twice', 'in', 'an', 'hour', 'Bellow', 'is', 'my', 'code', 'requesting', 'HTTP', 'Address:', 't', ':=', '&', 'http', '.', 'Transport', '{', 'Dial', ':', 'timeoutDial', '(', 'data', '.', 'Timeout', '),', 'TLSClientConfig', ':', '&', 'tls', '.', 'Config', '{', 'InsecureSkipVerify', ':', 'true', '},', '}', '//', 'req', ':=', 's.ParseReq(data)', 'req', ':=', 'data.convert2Request()', 'if', 'req', '==', 'nil', '{', 'return', '}', 'var', 'resp', '*', 'http', '.', 'Response', 'if', 'data', '.', 'Redirect', '{', 'c', ':=', '&', 'http', '.', 'Client', '{', 'Transport', ':', 't', ',', '}', 'resp', ',', 'err', '=', 'c.Do(req)', '}', 'else', '{', 'resp', ',', 'err', '=', 't.RoundTrip(req)', '}', 'data.updateTry()', 'r', ':=', 's.ParseResp(data, resp, err)', 'updateTry:', 'func', '(', 'd', '*', 'SendData', ')', 'updateTry', '()', '{', 'd', '.', 'Try', '++', 'd', '.', 'LastSend', '=', 'time.Now()', '}', 'timeoutDial:', 'func', 'timeoutDial', '(', 'timeout', 'int', ')', 'func', '(', 'netw', ',', 'addr', 'string', ')', '(', 'net', '.', 'Conn', ',', 'error', ')', '{', 'if', 'timeout', '<=', '0', '{', 'timeout', '=', '10', '}', 'return', 'func', '(', 'netw', ',', 'addr', 'string', ')', '(', 'net', '.', 'Conn', ',', 'error', ')', '{', 'deadline', ':=', 'time.Now().Add(time.Duration(timeout) * time.Second)', 'c', ',', 'err', ':=', 'net.DialTimeout(netw, addr, time.Second*time.Duration(timeout+5))', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'c.SetDeadline(deadline)', 'return', 'c', ',', 'nil', '}', '}', 'and', 'My', 'dealing', 'with', 'response', 'is:', 'func', '(', 's', '*', 'Sender', ')', 'ParseResp', '(', 'data', 'SendData', ',', 'resp', '*', 'http', '.', 'Response', ',', 'err', 'error', ')', '(', 'r', 'Resp', ')', '{', 'r', '=', 'Resp', '{', 'URL', ':', 'data', '.', 'URL', '}', 'if', 'err', '!=', 'nil', '{', 'r', '.', 'Err', '=', 'err.Error()', '}', 'else', '{', 'r', '.', 'HttpCode', '=', 'resp', '.', 'StatusCode', 'r', '.', 'Header', '=', 'resp', '.', 'Header', 'r', '.', 'URL', '=', 'resp', '.', 'Request', '.', 'URL.String()', 'defer', 'resp', '.', 'Body.Close()', '//', 'we', 'just', 'read', 'part', 'of', 'response', 'and', 'log', 'it.', 'reader', ':=', 'bufio.NewReader(resp.Body)', 'buf', ':=', 'make', '([]', 'byte', ',', 'bytes', '.', 'MinRead', ')', '// 512 byte', 'for', 'len', '(', 'r', '.', 'Body', ')', '<', '1024', '{', '// max 1k', 'var', 'n', 'int', 'if', 'n', ',', '_', '=', 'reader.Read(buf)', ';', 'n', '==', '0', '{', 'break', '}', 'r', '.', 'Body', '+=', 'string', '(', 'buf', '[:', 'n', '])', '}', '}', 'return', '}', 'I', 'also', 'found', 'setting', 'in', '/etc/sysctl.conf', 'which', 'can', 'make', 'the', 'problem', 'happen', 'less', 'frequently:', 'net', '.', 'core', '.', 'somaxconn', '=', '65535', 'net', '.', 'netfilter', '.', 'nf_conntrack_max', '=', '655350', 'net', '.', 'netfilter', '.', 'nf_conntrack_tcp_timeout_established', '=', '1200', 'I', 'need', 'help', 'for', 'solving', 'this', 'problem.', 'It', 'seems', 'like', 'this', 'but', 'I', ""don't"", 'see', 'any', 'solution', 'https://bugs.launchpad.net/juju-core/+bug/1307434']"
1385,28591664,"How one would play audio file in go language?

I have function and want sound to be played as notification when event happens.

I could not find anything about playing sound file in go lang just some web browser based music players but it wasnt helpful too much.
","['How', 'one', 'would', 'play', 'audio', 'file', 'in', 'go', 'language?', 'I', 'have', 'function', 'and', 'want', 'sound', 'to', 'be', 'played', 'as', 'notification', 'when', 'event', 'happens.', 'I', 'could', 'not', 'find', 'anything', 'about', 'playing', 'sound', 'file', 'in', 'go', 'lang', 'just', 'some', 'web', 'browser', 'based', 'music', 'players', 'but', 'it', 'wasnt', 'helpful', 'too', 'much.']"
1386,28710276,"

With the -x argument I see the printout of flags and they don't include the ones I am setting on the command line.  Perhaps the #cgo CFLAGS/LDFLAGS statements at the top of the external go package squash what I am telling it to use...
","[""Let's"", 'say', 'I', 'want', 'to', 'use', 'some', 'awesome', 'go', 'package.', 'I', 'can', 'include', 'it', 'by:', 'import', '""github.com/really-awesome/project/foobar""', 'And', 'inside', 'that', ""project's"", 'foobar.go', 'file,', 'it', 'defines', 'some', 'cgo', 'instructions', 'like:', 'cgo', 'windows', 'CFLAGS', ':', '-', 'I', 'C', ':/', 'some', '-', 'path/Include', 'cgo', 'windows', 'LDFLAGS', ':', '-', 'L', 'C', ':/', 'some', '-', 'path/Lib', '-', 'lfoobar', 'But', 'if', 'I', 'have', 'that', 'foobar', 'C', 'dependency', 'installed', 'somewhere', 'else,', 'I', 'would', 'really', 'need', 'those', 'lines', 'to', 'say:', 'cgo', 'windows', 'CFLAGS', ':', '-', 'I', 'C', ':/', 'different', '-', 'path/Include', 'cgo', 'windows', 'LDFLAGS', ':', '-', 'L', 'C', ':/', 'different', '-', 'path/Lib', '-', 'lfoobar', 'Is', 'there', 'a', 'way', 'to', 'override', 'or', 'trump', 'where', 'cgo', 'is', 'looking', 'for', 'these', 'dependencies?', 'Right', 'now', 'my', 'fix', 'is', 'to', 'manually', 'edit', 'those', 'two', 'lines', 'after', 'running', 'go', 'get', './...', 'which', 'will', 'fetch', 'the', 'github', '.', 'comreally', '-', 'awesome/project/foobar', 'code.', 'NOTE:', ""I'm"", 'using', 'the', 'MinGw', 'compiler,', 'though', 'I', 'doubt', 'that', 'matters.', 'update:', 'I', 'have', 'tried', 'adding', 'flags', 'to', 'go', 'build', 'to', 'no', 'avail:', 'go', 'build', '-', 'x', '-', 'gcflags', '=', '""-I C:/different/include -L C:/different-path/lib -lfoobar""', 'go', 'build', '-', 'x', '-', 'ccflags', '=', '""-I C:/different/include""', '-', 'ldflags', '=', '""-L C:/different-path/lib -lfoobar""', 'With', 'the', '-x', 'argument', 'I', 'see', 'the', 'printout', 'of', 'flags', 'and', 'they', ""don't"", 'include', 'the', 'ones', 'I', 'am', 'setting', 'on', 'the', 'command', 'line.', 'Perhaps', 'the', '#cgo', 'CFLAGS/LDFLAGS', 'statements', 'at', 'the', 'top', 'of', 'the', 'external', 'go', 'package', 'squash', 'what', 'I', 'am', 'telling', 'it', 'to', 'use...']"
1387,28719523,"
","['The', 'following', 'function', 'does', 'not', 'work', 'with', 'Swedish', 'characters,', 'i.e', 'å/Å/ä/Ä/ö/Ö.', 'func', 'StartsWithUppercase', '(', 's', 'string', ')', 'bool', '{', 'return', '(', 'string', '(', 's', '[', '0', '])', '==', 'strings.ToUpper(string(s[0])))', '}', 'How', 'do', 'I', 'proceed', 'to', 'check', 'if', 'a', 'string', 'starts', 'with', 'upper', 'case', 'Swedish', 'character?', 'w', ':=', '""åÅäÄöÖ""', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'w', ');', 'i', '++', '{', 'fmt.Println(i, w[i])', '}', 'Results', 'in:', '1', '.', '195', '2', '.', '165', '3', '.', '195', '4', '.', '133', '5', '.', '195', '6', '.', '164', '7', '.', '195', '8', '.', '132', '9', '.', '195', '10', '.', '182', '11', '.', '195', '12', '.', '150']"
1388,28786190,"
","['I', 'need', 'to', 'use', 'password', 'authenticated', 'scp', 'to', 'download', 'a', 'file', 'from', 'a', 'server.', 'How', 'do', 'I', 'do', 'so', 'using', 'Go?', 'Tried', 'the', 'following', 'code,', 'but', 'it', ""doesn't"", 'pass', 'in', 'the', 'password.', 'package', 'main', 'import', '(', '""os/exec""', '""time""', ')', 'func', 'main', '()', '{', 'password', ':=', '""password""', 'cmd', ':=', 'exec.Command(""scp"", ""admin@192.168.1.150:file"", ""file"")', 'in', ',', 'err', ':=', 'cmd.StdinPipe()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'defer', 'in.Close()', 'out', ',', 'err', ':=', 'cmd.StdoutPipe()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'defer', 'out.Close()', 'if', 'err', '=', 'cmd.Run()', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'go', 'func', '()', '{', 'time.Sleep(10 * time.Second)', '_', ',', 'err', '=', 'in.Write([]byte(password + ""\\n""))', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '}()', '}', 'Edit:', 'I', 'ended', 'up', 'using', 'the', 'gexpect', '(github.com/ThomasRooney/gexpect)', 'library.', 'package', 'main', 'import', '(', '""github.com/ThomasRooney/gexpect""', '""log""', ')', 'func', 'main', '()', '{', 'child', ',', 'err', ':=', 'gexpect.Spawn(""scp admin@192.168.1.150:file file"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatalln(err)', '}', 'child.Expect(""password:"")', 'child.SendLine(""password"")', 'child.Interact()', 'child.Close()', '}']"
1389,28791568,"

http://play.golang.org/p/dON4eLpGN8

document for template.HTML:
http://golang.org/pkg/html/template/#HTML

The first comparison is true. However, the second comparison yield following error :


  invalid operation: ""html/template"".HTML(""test"") == htmlString
  (mismatched types ""html/template"".HTML and string)


Can someone explain what happened under the hood ?
","['package', 'main', 'import', '(', '""fmt""', '""html/template""', ')', 'func', 'main', '()', '{', 'fmt.Println(template.HTML(""test"") == ""test"")', 'htmlString', ':=', '""test""', 'fmt.Println(template.HTML(""test"") == htmlString)', '}', 'http://play.golang.org/p/dON4eLpGN8', 'document', 'for', 'template.HTML:', 'http://golang.org/pkg/html/template/#HTML', 'The', 'first', 'comparison', 'is', 'true.', 'However,', 'the', 'second', 'comparison', 'yield', 'following', 'error', ':', 'invalid', 'operation:', '""html/template"".HTML(""test"")', '==', 'htmlString', '(mismatched', 'types', '""html/template"".HTML', 'and', 'string)', 'Can', 'someone', 'explain', 'what', 'happened', 'under', 'the', 'hood', '?']"
1390,28885109," shows that the list of queues is empty.

But it still prints ""Ack""

I have set both mandatory and immediate to true


  Publishings can be undeliverable when the mandatory flag is
  true and no queue is bound that matches the routing key, or when the
  immediate flag is true and no consumer on the matched queue is ready
  to accept the delivery


Is my approach for sending to a non-existing queue a wrong approach, and is there another way I can send a message that will provoke a publisher nack?
","['I', 'am', 'writing', 'a', 'go', 'program', 'with', 'publisher', 'confirms,', 'and', 'I', 'want', 'to', 'verify', 'the', 'behavior', 'when', 'a', 'message', 'can', 'be', 'delivered/not', 'be', 'delivered', 'to', 'the', 'broker.', 'I', 'am', 'doing', 'this', 'from', 'an', 'integration', 'test', 'that', 'sets', 'up', 'a', 'queue,', 'and', 'asks', 'my', 'system', 'code', 'to', 'send', 'to', 'that', 'queue', 'name.', 'Verifying', 'the', 'behavior', 'for', 'publisher', 'ack', 'is', 'no', 'problem,', 'but', 'I', 'cannot', 'provoke', 'a', 'situation', 'that', 'results', 'in', 'a', 'publisher', 'nack.', 'I', 'try', 'to', 'send', 'a', 'message', 'to', 'a', 'non-existing', 'queue', 'with', 'the', 'following', 'piece', 'of', 'code:', 'connection', ',', 'err', ':=', 'amqp.Dial(""amqp://localhost"")', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'defer', 'connection.Close()', 'chan', 'nel', ',', 'err', ':=', 'connection.Channel()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'err', '=', 'chan', 'nel.Confirm(false)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'pubAck', ',', 'pubNack', ':=', 'chan', 'nel.NotifyConfirm(make(chan uint64, 1), make(chan uint64, 1))', 'fmt.Println(""Publish to queue: "", queueName)', 'msg', ':=', 'amqp', '.', 'Publishing', '{', 'Body', ':', '[]', 'byte', '(', '""Hello""', ')}', 'err', '=', 'chan', 'nel.Publish("""", queueName, true, true, msg)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'select', '{', 'case', '<-', 'pubAck', ':', 'fmt.Println(""Ack"")', 'case', '<-', 'pubNack', ':', 'fmt.Println(""NAck"")', '}', 'The', 'queue', 'name', 'is', 'indeed', 'a', 'non', 'existing', 'queue,', 'and', 'executing', 'sudo', 'rabbitmqctl', 'list_queues', 'shows', 'that', 'the', 'list', 'of', 'queues', 'is', 'empty.', 'But', 'it', 'still', 'prints', '""Ack""', 'I', 'have', 'set', 'both', 'mandatory', 'and', 'immediate', 'to', 'true', 'Publishings', 'can', 'be', 'undeliverable', 'when', 'the', 'mandatory', 'flag', 'is', 'true', 'and', 'no', 'queue', 'is', 'bound', 'that', 'matches', 'the', 'routing', 'key,', 'or', 'when', 'the', 'immediate', 'flag', 'is', 'true', 'and', 'no', 'consumer', 'on', 'the', 'matched', 'queue', 'is', 'ready', 'to', 'accept', 'the', 'delivery', 'Is', 'my', 'approach', 'for', 'sending', 'to', 'a', 'non-existing', 'queue', 'a', 'wrong', 'approach,', 'and', 'is', 'there', 'another', 'way', 'I', 'can', 'send', 'a', 'message', 'that', 'will', 'provoke', 'a', 'publisher', 'nack?']"
1391,28901604,"

What am I doing wrong?
","['I', 'want', 'to', 'use', 'mongodb', 'in', 'golang', 'and', 'wrote', 'an', 'sample', 'application:', 'package', 'main', 'import', '(', '""fmt""', '""labix.org/v2/mgo""', '""labix.org/v2/mgo/bson""', '""os""', ')', 'type', 'Session', 'struct', '{', 'Id', 'bson', '.', 'ObjectId', 'bson', ':', '""_id""', 'Data', 'map', '[', 'string', ']', 'interface', '{}', 'bson', ':', '""data""', '}', 'func', '(', 'rcv', '*', 'Session', ')', 'SetBSON', '(', 'raw', 'bson', '.', 'Raw', ')', 'error', '{', 'return', 'raw.Unmarshal(rcv)', '}', 'type', 'Authen', 'struct', '{', 'Name', 'string', 'bson', ':', '""name""', 'Email', 'string', 'bson', ':', '""email""', '}', 'func', 'main', '()', '{', 'uri', ':=', '""mongodb://localhost/""', 'if', 'uri', '==', '""""', '{', 'fmt.Println(""no connection string provided"")', 'os.Exit(1)', '}', 'sess', ',', 'err', ':=', 'mgo.Dial(uri)', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""Can\'t connect to mongo, go error %v\\n"", err)', 'os.Exit(1)', '}', 'defer', 'sess.Close()', 'sess.SetSafe(&mgo.Safe{})', 'collection', ':=', 'sess.DB(""test"").C(""sess"")', 'a', ':=', '&', 'Authen', '{', 'Name', ':', '""Cormier""', ',', 'Email', ':', '""cormier@example.com""', '}', 's', ':=', '&', 'Session', '{}', 's', '.', 'Id', '=', 'bson.NewObjectId()', 's', '.', 'Data', '=', 'make', '(', 'map', '[', 'string', ']', 'interface', '{})', 's', '.', 'Data', '[', '""logged""', ']', '=', 'a', 'err', '=', 'collection.Insert(s)', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""Can\'t insert document: %v\\n"", err)', 'os.Exit(1)', '}', 'c', ':=', '&', 'Session', '{}', 'c', '.', 'Id', '=', 'bson.NewObjectId()', 'c', '.', 'Data', '=', 'make', '(', 'map', '[', 'string', ']', 'interface', '{})', 'err', '=', 'sess.DB(""test"").C(""sess"").Find(bson.M{}).One(c)', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""got an error finding a doc %v\\n"")', 'os.Exit(1)', '}', '}', 'Insert', 'into', 'mongodb', 'works', 'like', 'a', 'charm,', 'but', 'to', 'unmarshal', 'back', 'to', 'reference', ""I've"", 'got', 'following', 'panic:', 'runtime', ':', 'go', 'routine', 'stack', 'exceeds', '1000000000', '-', 'byte', 'limit', 'fatal', 'error', ':', 'stack', 'overflow', 'runtime', 'stack', ':', 'runtime.throw(0x6d84d9)', 'c', ':/', 'go', '/src/runtime/panic.go:491', '+', '0xad', 'runtime.newstack()', 'c', ':/', 'go', '/src/runtime/stack.c:784', '+', '0x5ef', 'runtime.morestack()', 'c', ':/', 'go', '/src/runtime/asm_amd64.s:324', '+', '0x86', 'What', 'am', 'I', 'doing', 'wrong?']"
1392,28983831,"

ouputs a num of 10 (ok)

string in literal are ok but string from file do not work, what is wrong ?

thanks in advance
","['I', 'am', 'dealing', 'with', 'an', 'input', 'file', 'containing', 'a', 'list', 'of', 'integers', 'as', 'a', 'string', '10', '..', 'I', 'have', 'choosen', 'to', 'read', 'it', 'line', 'by', 'line', 'with', ""ReadString('\\n')"", 'method', 'The', 'following', 'code', 'line', ',', 'error', ':=', ""inputReader.ReadString('\\n')"", 'lineStr', ':=', 'string', '(', 'line', ')', 'console', 'output', '(length', 'and', 'value)', 'lineStr', '%', 'v', '4', 'lineStr', '%', 'v', '10', 'lineStr', 'as', 'a', 'length', 'of', '""4"",', 'maybe', 'because', 'of', 'rune', 'encoding.', 'Then', 'I', 'have', 'tried', 'several', 'way', 'to', 'convert', 'it', 'to', 'simple', 'integer', 'but', 'with', 'no', 'success.', 'Ex1', 'num', ',', '_', ':=', 'strconv.ParseUint(lineStr, 0, 64)', 'ouputs', 'a', 'num', 'of', '0', '(should', 'be', '10)', 'Ex2', 'num', ',', '_', ':=', 'strconv.Atoi(lineStr)', 'ouputs', 'a', 'num', 'of', '0', '(should', 'be', '10)', 'Ex3', 'num', ',', '_', ':=', 'strconv.Atoi(""10"")', 'ouputs', 'a', 'num', 'of', '10', '(ok)', 'Ex4', 'num', ',', '_', ':=', 'strconv.ParseUint(""10"", 0, 64)', 'ouputs', 'a', 'num', 'of', '10', '(ok)', 'string', 'in', 'literal', 'are', 'ok', 'but', 'string', 'from', 'file', 'do', 'not', 'work,', 'what', 'is', 'wrong', '?', 'thanks', 'in', 'advance']"
1393,29165973,"

How do i convert this to JSON ?
","['How', 'to', 'convert', 'a', 'Hashtable', 'into', 'JSON', 'in', 'GoLang', '?', 'I', 'want', 'to', 'convert', 'a', 'hash', 'table', 'into', 'a', 'JSON', 'to', 'be', 'able', 'to', 'send', 'it', 'as', 'POST', 'request', 'payload', 'data', ':=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'data', '[', '""a""', ']', '=', '""b""', 'data', '[', '""c""', ']', '=', '""d""', 'How', 'do', 'i', 'convert', 'this', 'to', 'JSON', '?']"
1394,29190333,"

How does it accomplish that? Where was this leak? (to test the code you will have to run it on http://tour.golang.org/concurrency/8). Very confused and would appreciate some help, thanks!
","['//', 'Copyright', '2012', 'The', 'Go', 'Authors.', 'All', 'rights', 'reserved.', '//', 'Use', 'of', 'this', 'source', 'code', 'is', 'governed', 'by', 'a', 'BSD-style', '//', 'license', 'that', 'can', 'be', 'found', 'in', 'the', 'LICENSE', 'file.', '//', '+build', 'ignore', 'package', 'main', 'import', '(', '""fmt""', '""code.google.com/p/go-tour/tree""', ')', 'func', 'walkImpl', '(', 't', '*', 'tree', '.', 'Tree', ',', 'ch', 'chan', 'int', ')', '{', 'if', 't', '==', 'nil', '{', 'return', '}', 'walkImpl', '(', 't', '.', 'Left', ',', 'ch', ')', 'ch', '<-', 't', '.', 'Value', 'walkImpl', '(', 't', '.', 'Right', ',', 'ch', ')', '}', '//', 'Walk', 'walks', 'the', 'tree', 't', 'sending', 'all', 'values', '//', 'from', 'the', 'tree', 'to', 'the', 'channel', 'ch.', 'func', 'Walk', '(', 't', '*', 'tree', '.', 'Tree', ',', 'ch', 'chan', 'int', ')', '{', 'walkImpl', '(', 't', ',', 'ch', ')', '//', 'Need', 'to', 'close', 'the', 'channel', 'here', 'close', '(', 'ch', ')', '}', '//', 'Same', 'determines', 'whether', 'the', 'trees', '//', 't1', 'and', 't2', 'contain', 'the', 'same', 'values.', '//', 'NOTE:', 'The', 'implementation', 'leaks', 'goroutines', 'when', 'trees', 'are', 'different.', '//', 'See', 'binarytrees_quit.go', 'for', 'a', 'better', 'solution.', 'func', 'Same', '(', 't1', ',', 't2', '*', 'tree', '.', 'Tree', ')', 'bool', '{', 'w1', ',', 'w2', ':=', 'make', '(', 'chan', 'int', '),', 'make', '(', 'chan', 'int', ')', 'go', 'Walk', '(', 't1', ',', 'w1', ')', 'go', 'Walk', '(', 't2', ',', 'w2', ')', 'for', '{', 'v1', ',', 'ok1', ':=', '<-', 'w1', 'v2', ',', 'ok2', ':=', '<-', 'w2', 'if', '!', 'ok1', '||', '!', 'ok2', '{', 'return', 'ok1', '==', 'ok2', '}', 'if', 'v1', '!=', 'v2', '{', 'return', 'false', '}', '}', '}', 'func', 'main', '()', '{', 'fmt.Print(""tree.New(1) == tree.New(1): "")', 'if', 'Same', '(', 'tree.New(1), tree.New(1))', '{', 'fmt.Println(""PASSED"")', '}', 'else', '{', 'fmt.Println(""FAILED"")', '}', 'fmt.Print(""tree.New(1) != tree.New(2): "")', 'if', '!', 'Same', '(', 'tree.New(1), tree.New(2))', '{', 'fmt.Println(""PASSED"")', '}', 'else', '{', 'fmt.Println(""FAILED"")', '}', '}', 'In', 'this', 'code,', 'a', 'solution', 'for', 'http://tour.golang.org/concurrency/8', 'Why', 'is', 'there', 'a', 'comment', 'on', 'Same()', 'func', 'Same(t1,', 't2', '*tree.Tree)', 'bool', 'saying', 'that', 'it', 'leaks', 'goroutines?', 'How', 'so?', 'It', 'also', 'mentions', 'a', 'second', 'file', 'that', 'fixes', 'this:', '//', 'Copyright', '2015', 'The', 'Go', 'Authors.', 'All', 'rights', 'reserved.', '//', 'Use', 'of', 'this', 'source', 'code', 'is', 'governed', 'by', 'a', 'BSD-style', '//', 'license', 'that', 'can', 'be', 'found', 'in', 'the', 'LICENSE', 'file.', '//', '+build', 'ignore', 'package', 'main', 'import', '(', '""fmt""', '""code.google.com/p/go-tour/tree""', ')', 'func', 'walkImpl', '(', 't', '*', 'tree', '.', 'Tree', ',', 'ch', ',', 'quit', 'chan', 'int', ')', '{', 'if', 't', '==', 'nil', '{', 'return', '}', 'walkImpl', '(', 't', '.', 'Left', ',', 'ch', ',', 'quit', ')', 'select', '{', 'case', 'ch', '<-', 't', '.', 'Value', ':', '//', 'Value', 'successfully', 'sent.', 'case', '<-', 'quit', ':', 'return', '}', 'walkImpl', '(', 't', '.', 'Right', ',', 'ch', ',', 'quit', ')', '}', '//', 'Walk', 'walks', 'the', 'tree', 't', 'sending', 'all', 'values', '//', 'from', 'the', 'tree', 'to', 'the', 'channel', 'ch.', 'func', 'Walk', '(', 't', '*', 'tree', '.', 'Tree', ',', 'ch', ',', 'quit', 'chan', 'int', ')', '{', 'walkImpl', '(', 't', ',', 'ch', ',', 'quit', ')', 'close', '(', 'ch', ')', '}', '//', 'Same', 'determines', 'whether', 'the', 'trees', '//', 't1', 'and', 't2', 'contain', 'the', 'same', 'values.', 'func', 'Same', '(', 't1', ',', 't2', '*', 'tree', '.', 'Tree', ')', 'bool', '{', 'w1', ',', 'w2', ':=', 'make', '(', 'chan', 'int', '),', 'make', '(', 'chan', 'int', ')', 'quit', ':=', 'make', '(', 'chan', 'int', ')', 'defer', 'close', '(', 'quit', ')', 'go', 'Walk', '(', 't1', ',', 'w1', ',', 'quit', ')', 'go', 'Walk', '(', 't2', ',', 'w2', ',', 'quit', ')', 'for', '{', 'v1', ',', 'ok1', ':=', '<-', 'w1', 'v2', ',', 'ok2', ':=', '<-', 'w2', 'if', '!', 'ok1', '||', '!', 'ok2', '{', 'return', 'ok1', '==', 'ok2', '}', 'if', 'v1', '!=', 'v2', '{', 'return', 'false', '}', '}', '}', 'func', 'main', '()', '{', 'fmt.Print(""tree.New(1) == tree.New(1): "")', 'if', 'Same', '(', 'tree.New(1), tree.New(1))', '{', 'fmt.Println(""PASSED"")', '}', 'else', '{', 'fmt.Println(""FAILED"")', '}', 'fmt.Print(""tree.New(1) != tree.New(2): "")', 'if', '!', 'Same', '(', 'tree.New(1), tree.New(2))', '{', 'fmt.Println(""PASSED"")', '}', 'else', '{', 'fmt.Println(""FAILED"")', '}', '}', 'How', 'does', 'it', 'accomplish', 'that?', 'Where', 'was', 'this', 'leak?', '(to', 'test', 'the', 'code', 'you', 'will', 'have', 'to', 'run', 'it', 'on', 'http://tour.golang.org/concurrency/8).', 'Very', 'confused', 'and', 'would', 'appreciate', 'some', 'help,', 'thanks!']"
1395,29269850,"

Edit: It seems that if I move the close statement just before the channel range it closes it for good. So I'm wondering why it's not working with the ""time.Sleep"" trick too . By that time (5 seconds) all the go routines should have been completed and the channel closed, isn't it ?
","[""I'm"", 'investigating', 'the', 'channels', 'behaviour', 'and', ""I'm"", 'quite', 'confused', 'by', 'their', 'behaviour.', 'The', 'spec', 'say', 'After', 'calling', 'close', ',', 'and', 'after', 'any', 'previously', 'sent', 'values', 'have', 'been', 'received', ',', 'receive', 'operations', 'will', 'return', 'the', 'zero', 'value', 'for', 'the', 'chan', 'nel', 's', 'type', 'without', 'blocking', '.', 'However', 'it', 'seems', 'I', 'still', 'get', 'the', 'values', 'in', 'the', 'range', 'statement', 'even', 'if', 'by', 'that', 'time', 'the', 'channel', 'is', 'closed.', 'Why', 'is', 'that?', 'package', 'main', 'import', '""fmt""', 'import', '""sync""', 'import', '""time""', 'func', 'main', '()', '{', 'iCh', ':=', 'make', '(', 'chan', 'int', ',', '99', ')', 'var', 'wg', 'sync', '.', 'WaitGroup', 'go', 'func', '()', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '5', ';', 'i', '++', '{', 'wg.Add(1)', 'go', 'func', '(', 'i', 'int', ')', '{', 'defer', 'wg.Done()', 'iCh', '<-', 'i', '}(', 'i', ')', '}', 'wg.Wait()', 'close', '(', 'iCh', ')', '}()', 'time.Sleep(5 * time.Second)', 'print', '(', '""the channel should be closed by now\\n""', ')', 'for', 'i', ':=', 'range', 'iCh', '{', 'fmt.Printf(""%v\\n"", i)', '}', 'print', '(', '""done""', ')', '}', 'Edit:', 'It', 'seems', 'that', 'if', 'I', 'move', 'the', 'close', 'statement', 'just', 'before', 'the', 'channel', 'range', 'it', 'closes', 'it', 'for', 'good.', 'So', ""I'm"", 'wondering', 'why', ""it's"", 'not', 'working', 'with', 'the', '""time.Sleep""', 'trick', 'too', '.', 'By', 'that', 'time', '(5', 'seconds)', 'all', 'the', 'go', 'routines', 'should', 'have', 'been', 'completed', 'and', 'the', 'channel', 'closed,', ""isn't"", 'it', '?']"
1396,29282728,"

The only thing I get is the table header. This function does not return an error so I don't know why it didn't like the data. I have also tried passing it in as a reference.
","['I', 'have', 'a', 'struct.', 'type', 'DataKey', 'struct', '{', 'Id', 'int64', 'db', ':', '""id""', 'UserId', 'string', 'db', ':', '""user_id""', 'Data', 'string', 'db', ':', '""data""', 'CreatedAt', 'time', '.', 'Time', 'db', ':', '""created_at""', '}', 'I', 'create', 'a', 'slice', 'of', 'structs.', 'data', ':=', '[]DataKey{}', 'After', 'doing', 'a', 'sql', 'query', 'and', 'filling', 'the', 'slices', 'I', 'try', 'to', 'pass', 'to', 'mustache', 'to', 'build', 'my', 'list.', 'mustache.RenderFileInLayout(""templates/datakeys.html.mustache"", ""templates/layout.html.mustache"", user, data)))', 'datakeys.html.mustache', 'UserID', 'DataKey', 'CreatedAt', '{{', 'DataKey', '}}', '{{', 'Id', '}}', '{{', 'UserId', '}}', '{{', 'Data', '}}', '{{', 'CreatedAt', '}}', '{{/', 'DataKey', '}}', 'The', 'only', 'thing', 'I', 'get', 'is', 'the', 'table', 'header.', 'This', 'function', 'does', 'not', 'return', 'an', 'error', 'so', 'I', ""don't"", 'know', 'why', 'it', ""didn't"", 'like', 'the', 'data.', 'I', 'have', 'also', 'tried', 'passing', 'it', 'in', 'as', 'a', 'reference.']"
1397,29285670,"

Any idea why this happens and how to fix it?

Thanks in advance :)
","['I', 'am', 'developing', 'a', 'Google', 'App', 'Engine', 'project', 'in', 'go', 'and', 'got', 'stuck', 'at', 'reading', 'files.', 'In', 'fact', 'app', 'works', 'perfectly', 'locally.', 'However', 'when', 'deployed,', 'it', 'panics', 'telling', 'me', 'that', 'there', 'is', 'no', 'such', 'file', 'or', 'directory.', 'Here', 'is', 'my', 'fileValue', 'method:', 'func', 'fileValue', '(', 'path', 'string', ')', 'string', '{', 'content', ',', 'err', ':=', 'ioutil.ReadFile(path)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'return', 'string', '(', 'content', ')', '}', 'And', 'I', 'call', 'it', 'like', 'this:', 'secondPart', ':=', 'fileValue', '(', '""./console/page/secondPart.html""', ')', 'And', 'this', 'is', 'what', 'I', 'can', 'se', 'under', 'logs', 'in', 'developers', 'console:', 'panic', ':', 'open', './', 'console/page/firstPart.html:', 'no', 'such', 'file', 'or', 'directory', 'go', 'routine', '11', '[', 'running', ']:', 'console.fileValue(0x19582f0, 0x1d, 0x0, 0x0)', 'console/console.go:191', '+', '0xbd', 'console.generateUnsignedHtml(0xc01043a780, 0x0, 0x0)', 'console/console.go:68', '+', '0x69', 'console.consoleHandler(0x7f180fa61830, 0xc01042f380, 0xc0105640d0)', 'console/console.go:58', '+', '0x37e', 'net/http.HandlerFunc.ServeHTTP(0x1a21210,', '0x7f18', '0', 'fa61830', ',', '0xc', '01', '042', 'f380', ',', '0xc', '01', '0564', '0', 'd0', ')', 'go', '/src/net/http/server.go:1265', '+', '0x56', 'net/http.(*ServeMux).ServeHTTP(0xc01048a8a0,', '0x7f18', '0', 'fa61830', ',', '0xc', '01', '042', 'f380', ',', '0xc', '01', '0564', '0', 'd0', ')', 'go', '/src/net/http/server.go:1541', '+', '0x1b4', 'appengine_internal.executeRequestSafely(0xc01042f380, 0xc0105640d0)', 'go', '/src/appengine_internal/api_prod.go:280', '+', '0xb7', 'appengine_internal', '.(*', 'server', ').', 'HandleRequest', '(', '0x1be76f', '0', ',', '0xc', '01', '054', '0', '0', '0', '0', ',', '0xc', '01', '04', 'ba000', ',', '0xc', '01', '043', '0', 'b60', ',', '0', 'x0', ',', '0', 'x0', ')', 'go', '/src/appengine_internal/api_prod.go:214', '+', '0x1', '02', 'b', 'reflect', '.', 'Value.call(0x1842640, 0x1be76f0, 0x113, 0x18d1380, 0x4, 0xc010533f78, 0x3, 0x3, 0x0, 0x0, ...)', '/tmp/appengine/go/src/reflect/value.go:419', '+', '0x1', '0', 'fd', 'reflect', '.', 'Value', '.', 'Call', '(', '0x184264', '0', ',', '0x1be76f', '0', ',', '0x113', ',', '0xc', '01', '0533', 'f78', ',', '0x3', ',', 'Any', 'idea', 'why', 'this', 'happens', 'and', 'how', 'to', 'fix', 'it?', 'Thanks', 'in', 'advance', ':)']"
1398,29323560,"
","['There', 'is', 'supposed', 'to', 'be', 'a', 'bug', 'in', 'this', 'bit', 'of', 'code.', 'My', 'mate', 'told', 'me', 'that', 'it', 'contains', 'a', 'memory', 'leak', 'and', 'it', 'occurs', 'when', 'the', 'time', 'out', 'case', 'happens', 'in', 'the', 'select', 'statement', 'before', 'the', 'go', 'function', 'has', 'finished', 'and', 'he', 'also', 'told', 'me', 'that', 'adding', 'a', 'buffer', 'of', 'size', 'one', 'to', 'ch', 'would', 'solve', 'the', 'problem.', 'But', 'i', 'have', 'a', 'hard', 'time', 'understanding', 'why', 'it', 'would', 'solve', 'the', 'problem', 'and', 'would', 'appreciate', 'if', 'someone', 'could', 'explain', 'if', 'for', 'me?', ""I've"", 'tried', 'to', 'search', 'for', 'the', 'answer', 'myself', 'but', 'with', 'no', 'success.', 'Thanks.', 'func', 'Read', '(', 'url', 'string', ',', 'timeout', 'time', '.', 'Duration', ')', '(', 'res', '*', 'Response', ')', '{', 'ch', ':=', 'make', '(', 'chan', '*', 'Response', ')', 'go', 'func', '()', '{', 'time.Sleep(time.Millisecond * 300)', 'ch', '<-', 'Get', '(', 'url', ')', '}()', 'select', '{', 'case', 'res', '=', '<-', 'ch', ':', 'case', '<-', 'time.After(timeout)', ':', 'res', '=', '&', 'Response', '{', '""Gateway timeout\\n""', ',', '504', '}', '}', '}']"
1399,29377477,"
","['Suppose', 'I', 'have', 'an', 'array', 'of', 'items', 'that', 'implement', 'an', 'interface', 'Reader:', 'var', 'items', '[]Foo', 'How', 'would', 'I', 'pass', 'these', 'items', 'into', 'a', 'function', 'that', 'takes', 'readers?', 'func', '(', 'items', '[]', 'Reader', ')', '{', '...', '}', 'I', ""can't"", 'use', 'the', 'type', '[]Reader', 'because', 'I', 'get', 'an', 'error', 'like:', 'Cannot', 'use', 'type', '[]', 'Foo', 'as', 'type', '[]', 'Reader', '...']"
1400,29422602,"
","[""I'm"", 'curious', 'why', 'this', 'DeepEqual', 'check', 'is', 'false:', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', '""log""', '""reflect""', '""strings""', ')', 'type', 'Result', 'struct', '{', 'Topic', 'string', 'json', ':', '""topic,omitempty""', 'Id', 'int', 'json', ':', '""id,omitempty""', '}', '//', 'Result', 'represents', 'the', 'returned', 'collection', 'from', 'a', 'topic', 'search.', 'type', 'ResultResponse', 'struct', '{', 'Result', '[]', 'Result', 'json', ':', '""results""', '}', 'func', 'main', '()', '{', 'want', ':=', 'ResultResponse', '{', '[]', 'Result', '{{', 'Topic', ':', '""Clojure""', ',', 'Id', ':', '1000', '}},', '}', 'input', ':=', '{', '""results""', ':', '[', '{', '""topic""', ':', '""Clojure""', ',', '""id""', ':', '1000', '}', ']}', 'p', ':=', 'ResultResponse', '{}', 'err', ':=', 'json.NewDecoder(strings.NewReader(input)).Decode(&p)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'fmt.Println(p, want)', 'if', '!', 'reflect.DeepEqual(input, want)', '{', 'log.Printf(""returned %+v, want %+v"", p, want)', '}', '}']"
1401,29444817,"

or is the type switch the way to go?
","['Say', 'I', 'have', 'the', 'following', 'code:', 'var', 'x', 'interface', '{}', 'y', ':=', '4', 'x', '=', 'y', 'fmt.Println(reflect.TypeOf(x))', 'This', 'will', 'print', 'int', 'as', 'the', 'type.', 'My', 'question', 'is', 'how', 'can', 'I', 'test', 'for', 'the', 'type?', 'I', 'know', 'there', 'is', 'the', 'type', 'switch', 'which', 'does', 'this,', 'so', 'I', 'could', 'do:', 'switch', 'x', '.(', 'type', ')', '{', 'case', 'int', ':', 'fmt.Println(""This is an int"")', '}', 'But', 'if', 'I', 'only', 'want', 'to', 'check', 'for', 'just', 'one', 'specific', 'type', 'the', 'switch', 'seems', 'like', 'the', 'wrong', 'tool.', 'Is', 'there', 'a', 'more', 'direct', 'method', 'of', 'doing', 'this', 'like', 'reflect.TypeOf(x)', '==', 'int', 'or', 'is', 'the', 'type', 'switch', 'the', 'way', 'to', 'go?']"
1402,29445173,"

But I'm getting this error:


  Corrupted Content Error
  
  The page you are trying to view cannot be shown because an error in
  the data transmission was detected.


Here's my code on the Go playground: http://play.golang.org/p/ulgXQl4eQO
","[""I'm"", 'currently', 'developing', 'a', 'download', 'server', 'in', 'Go.', 'I', 'need', 'to', 'limit', 'the', 'download', 'speed', 'of', 'users', 'to', '100KB/s.', 'This', 'was', 'my', 'code:', 'func', 'serveFile', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'fileID', ':=', 'r', '.', 'URL.Query().Get(""fileID"")', 'if', 'len', '(', 'fileID', ')', '!=', '0', '{', 'w.Header().Set(""Content-Disposition"", ""attachment; filename=filename.txt"")', 'w.Header().Set(""Content-Type"", r.Header.Get(""Content-Type""))', 'w.Header().Set(""Content-Length"", r.Header.Get(""Content-Length""))', 'file', ',', 'err', ':=', 'os.Open(fmt.Sprintf(""../../bin/files/test.txt""))', 'defer', 'file.Close()', 'if', 'err', '!=', 'nil', '{', 'http.NotFound(w, r)', 'return', '}', 'io.Copy(w, file)', '}', 'else', '{', 'io.WriteString(w, ""Invalid request."")', '}', '}', 'Then', 'I', 'found', 'a', 'package', 'on', 'github', 'and', 'my', 'code', 'became', 'the', 'following:', 'func', 'serveFile', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'fileID', ':=', 'r', '.', 'URL.Query().Get(""fileID"")', 'if', 'len', '(', 'fileID', ')', '!=', '0', '{', 'w.Header().Set(""Content-Disposition"", ""attachment; filename=Wiki.png"")', 'w.Header().Set(""Content-Type"", r.Header.Get(""Content-Type""))', 'w.Header().Set(""Content-Length"", r.Header.Get(""Content-Length""))', 'file', ',', 'err', ':=', 'os.Open(fmt.Sprintf(""../../bin/files/test.txt""))', 'defer', 'file.Close()', 'if', 'err', '!=', 'nil', '{', 'http.NotFound(w, r)', 'return', '}', 'bucket', ':=', 'ratelimit.NewBucketWithRate(100*1024, 100*1024)', 'reader', ':=', 'bufio.NewReader(file)', 'io.Copy(w, ratelimit.Reader(reader, bucket))', '}', 'else', '{', 'io.WriteString(w, ""Invalid request."")', '}', '}', 'But', ""I'm"", 'getting', 'this', 'error:', 'Corrupted', 'Content', 'Error', 'The', 'page', 'you', 'are', 'trying', 'to', 'view', 'cannot', 'be', 'shown', 'because', 'an', 'error', 'in', 'the', 'data', 'transmission', 'was', 'detected.', ""Here's"", 'my', 'code', 'on', 'the', 'Go', 'playground:', 'http://play.golang.org/p/ulgXQl4eQO']"
1403,29476611,"


edit 2



This only seems to be a problem when using it directly through the browser, XMLHttpRequest works just fine
","[""I've"", 'been', 'searching', 'all', 'over', 'the', 'internet', 'how', 'to', 'do', 'this,', 'but', 'I', ""haven't"", 'been', 'able', 'to', 'find', 'it.', ""I'm"", 'trying', 'to', 'build', 'a', 'simple', 'API', 'gateway', 'using', 'Go', 'and', 'Martini', 'for', 'my', 'system', 'that', 'has', 'a', 'few', 'microservices', 'with', 'REST', 'interfaces', 'running.', 'For', 'example,', 'I', 'have', 'my', 'users', 'service', 'running', 'on', '192.168.2.8:8000,', 'and', 'I', 'want', 'to', 'access', 'it', 'through', '/users', 'So', 'my', 'API', 'gateway', 'would', 'look', 'something', 'like', 'this:', 'package', 'main', 'import', '(', '""github.com/codegangsta/martini""', '""net/http""', ')', 'func', 'main', '(){', 'app', ':=', 'martini.Classic()', 'app.Get(""/users/:resource"", func(req *http.Request, res http.ResponseWriter)', '{', '//', 'proxy', 'to', 'http:192.168.2.8:8000/:resource', '})', 'app.Run()', '}', 'edit', ""I've"", 'got', 'something', 'working,', 'but', 'all', 'i', 'see', 'is', '[', 'vhost', 'v2', ']', 'release', '2', '.', '2', '.', '5', ':', 'package', 'main', 'import', '(', '""net/url""', '""net/http""', '""net/http/httputil""', '""github.com/codegangsta/martini""', '""fmt""', ')', 'func', 'main', '()', '{', 'remote', ',', 'err', ':=', 'url.Parse(""http://127.0.0.1:3000"")', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'proxy', ':=', 'httputil.NewSingleHostReverseProxy(remote)', 'app', ':=', 'martini.Classic()', 'app.Get(""/users/**"", handler(proxy))', 'app.RunOnAddr("":4000"")', '}', 'func', 'handler', '(', 'p', '*', 'httputil', '.', 'ReverseProxy', ')', 'func', '(', 'http', '.', 'ResponseWriter', ',', '*', 'http', '.', 'Request', ',', 'martini', '.', 'Params', ')', '{', 'return', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ',', 'params', 'martini', '.', 'Params', ')', '{', 'fmt.Println(params)', 'r', '.', 'URL', '.', 'Path', '=', '""/authorize""', 'p.ServeHTTP(w, r)', '}', '}', 'edit', '2', 'This', 'only', 'seems', 'to', 'be', 'a', 'problem', 'when', 'using', 'it', 'directly', 'through', 'the', 'browser,', 'XMLHttpRequest', 'works', 'just', 'fine']"
1404,29620344,"

but it still give empty Body as before.

Second question, can I reuse the oauth2.Config (provider) variable for another user? or should I create a copies for each user?
","[""I've"", 'already', 'tried', 'to', 'authenticate', 'using', 'OAuth', 'sucessfully', 'with', 'golang.com/x/oauth2', 'library.', '//', 'provider', 'variable', 'is', 'oauth2.Config', '//', 'scope', 'is:', 'https:www.googleapis.com/auth/userinfo.email', 'url', ':=', 'provider.AuthCodeURL(``)', '// redirect URL', 'after', 'getting', 'redirected', 'back', 'from', 'the', 'client,', 'I', 'send', 'the', 'auth_code', 'successfully', 'auth_code', ':=', 'ctx', '.', 'Request', '.', 'URL', '.', 'RawQuery', '// code=XXXX', 'if', 'len', '(', 'auth_code', ')', '>', '5', '{', 'auth_code', '=', 'auth_code', '[', '5', ':]', '// XXXX', '}', 'tok', ',', 'err', ':=', 'provider.Exchange(oauth2.NoContext, auth_code)', 'if', 'err', '==', 'nil', '{', 'client', ':=', 'provider.Client(oauth2.NoContext, tok)', 'email_url', ':=', 'https', '://', 'www', '.', 'go', 'ogleapis', '.', 'com/auth/userinfo.email`', '//', 'Log.Describe(client)', 'response', ',', 'err', ':=', 'client.Get(email_url)', 'if', 'err', '==', 'nil', '{', 'ctx.Render(`login_oauth`, response)', '//', 'handled', '=', 'true', '}', '}', '//', 'Log.Describe(err)', 'I', 'found', 'nothing', 'that', 'tells', 'the', 'e-mail', 'part', 'on', 'the', 'response', '(the', 'Body', 'is', 'empty):', '{', '""Status""', ':', '""200 OK""', ',', '""StatusCode""', ':', '200', ',', '""Proto""', ':', '""HTTP/1.1""', ',', '""ProtoMajor""', ':', '1', ',', '""ProtoMinor""', ':', '1', ',', '""Header""', ':', '{', '""Alternate-Protocol""', ':', '[', '""443:quic,p=0.5""', '],', '""Cache-Control""', ':', '[', '""private, max-age=0""', '],', '""Content-Type""', ':', '[', '""text/plain""', '],', '""Date""', ':', '[', '""Tue, 14 Apr 2015 05:52:17 GMT""', '],', '""Expires""', ':', '[', '""Tue, 14 Apr 2015 05:52:17 GMT""', '],', '""Server""', ':', '[', '""GSE""', '],', '""X-Content-Type-Options""', ':', '[', '""nosniff""', '],', '""X-Frame-Options""', ':', '[', '""SAMEORIGIN""', '],', '""X-Xss-Protection""', ':', '[', '""1; mode=block""', ']', '},', '""Body""', ':', '{},', '// empty!!!', '""ContentLength""', ':', '-', '1', ',', '""TransferEncoding""', ':', '[', '""chunked""', '],', '""Close""', ':', 'false', ',', '""Trailer""', ':', 'null', ',', '""Request""', ':', '{', '""Method""', ':', '""GET""', ',', '""URL""', ':', '{', '""Scheme""', ':', '""https""', ',', '""Opaque""', ':', '""""', ',', '""User""', ':', 'null', ',', '""Host""', ':', '""www.googleapis.com""', ',', '""Path""', ':', '""/auth/userinfo.email""', ',', '""RawQuery""', ':', '""""', ',', '""Fragment""', ':', '""""', '},', '""Proto""', ':', '""HTTP/1.1""', ',', '""ProtoMajor""', ':', '1', ',', '""ProtoMinor""', ':', '1', ',', '""Header""', ':', '{', '""Authorization""', ':', '[', '""Bearer ya29.VQFRHDe21t7g2cUhN8sUwjpRRi10XldgLe0RFhMe2ZxgyRo7q90HoKES5WmcucwKqtjZdq_KvYjKiQ""', ']', '},', '""Body""', ':', 'null', ',', '""ContentLength""', ':', '0', ',', '""TransferEncoding""', ':', 'null', ',', '""Close""', ':', 'false', ',', '""Host""', ':', '""www.googleapis.com""', ',', '""Form""', ':', 'null', ',', '""PostForm""', ':', 'null', ',', '""MultipartForm""', ':', 'null', ',', '""Trailer""', ':', 'null', ',', '""RemoteAddr""', ':', '""""', ',', '""RequestURI""', ':', '""""', ',', '""TLS""', ':', 'null', '},', '""TLS""', ':', '{', '//', 'really', 'long', 'output', '}', '}', 'First', 'question,', 'how', 'to', 'get', 'the', 'e-mail', 'correctly?', 'without', 'using', 'Google+', 'API.', 'edit', '#2', ""I've"", 'tried', 'using', 'another', 'scope', 'for', 'oauth2.Config:', 'https', '://', 'www', '.', 'go', 'ogleapis', '.', 'com/auth/plus.profile.emails.read', 'https', '://', 'www', '.', 'go', 'ogleapis', '.', 'com/auth/plus.login', 'https', '://', 'www', '.', 'go', 'ogleapis', '.', 'com/auth/plus.me', 'and', 'try', 'to', 'retrieve', 'the', 'e-mail', 'using', 'newer', 'API:', 'https', '://', 'www', '.', 'go', 'ogleapis', '.', 'com/plus/v1/people/me', 'but', 'it', 'gives', '403', 'Forbidden', 'edit', '#3', ""I've"", 'tried', 'using', 'another', 'scope:', 'openid', 'profile', 'email', 'and', 'try', 'to', 'retrieve', 'the', 'e-mail', 'using', 'this', 'URL:', 'https', '://', 'www', '.', 'go', 'ogleapis', '.', 'com/oauth2/v3/userinfo', 'but', 'it', 'still', 'give', 'empty', 'Body', 'as', 'before.', 'Second', 'question,', 'can', 'I', 'reuse', 'the', 'oauth2.Config', '(provider)', 'variable', 'for', 'another', 'user?', 'or', 'should', 'I', 'create', 'a', 'copies', 'for', 'each', 'user?']"
1405,29654175,"

My question is will the if-statement be optimized out if I define const ASSERT = false?
","['Go', 'has', 'a', 'very', 'unfortunate', 'lack', 'of', 'built-in', 'assertions.', 'I', 'want', 'to', 'implement', 'them', 'this', 'way:', 'const', 'ASSERT', '=', 'true', 'func', 'SomeFunction', '()', '{', 'if', 'ASSERT', '&&', '!', 'some_condition_that_should_always_be_true', '()', '{', 'panic', '(', '""Error message or object.""', ')', '}', '}', 'My', 'question', 'is', 'will', 'the', 'if-statement', 'be', 'optimized', 'out', 'if', 'I', 'define', 'const', 'ASSERT', '=', 'false?']"
1406,29659626,"

but I don't think this is what's intended.

What can I do here?
","['Getting', 'started', 'with', 'Go', 'and', 'going', 'through', 'the', 'docs', 'here:', 'https://golang.org/doc/code.html', 'The', 'part', 'entitled', 'Package', 'paths', 'recommends', 'using', 'my', 'Github', 'account', 'as', 'a', 'base', 'path.', 'However,', 'with', 'the', 'forward', 'slashes', 'in', 'the', 'GH', 'url,', 'when', 'I', 'run', 'mkdir', '-', 'p', '$', 'GOPATH/src/github.com/user', 'it', 'creates', 'a', 'sub-folder.', 'So', 'the', 'example', 'of', 'github.com/user', 'creates:', 'src', '/', 'github', '.', 'com', '/', 'user', '/', 'but', 'I', ""don't"", 'think', 'this', 'is', ""what's"", 'intended.', 'What', 'can', 'I', 'do', 'here?']"
1407,29669835,"

http://play.golang.org/p/8vieH4eDd1
","['I', 'want', 'to', 'parse', 'a', 'string', 'and', 'get', 'the', 'substring', 'inside', 'two', 'quotes', 'subject', 'query=""tag1', 'tag2""', 'pattern', 'query=""([a-z', ']*)""', 'result', 'tag1', 'tag2', 'code', 'package', 'main', 'import', '(', '""fmt""', '""regexp""', ')', 'var', 're', '=', 'regexp.MustCompile(`query=""([a-z ]*)""`)', 'func', 'main', '()', '{', 'match', ':=', 're.FindStringSubmatch(`query=""tag1 tag2""`)', 'result', ':=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'for', 'i', ',', 'name', ':=', 'range', 're.SubexpNames()', '{', 'result', '[', 'name', ']', '=', 'match', '[', 'i', ']', '}', 'fmt.Printf(""by name: %v\\n"", result)', '}', 'http://play.golang.org/p/voKpOlcc8J', 'update', 'string', 'query', '=', '""tag1 tag2 tag3""', 'foo', '=', '""wee""', 'matches', 'tag1', 'tag2', 'tag3', 'package', 'main', 'import', '""fmt""', 'import', '""regexp""', 'func', 'main', '()', '{', 'var', 'str', 'string', '=', 'query', '=', '""tag1 tag2 tag3""', 'foo', '=', '""wee""', 're', ':=', 'regexp.MustCompile(`query=""(([a-z0-9]+) ?)*""`)', 'match', ':=', 're.FindStringSubmatch(str)', 'if', 'len', '(', 'match', ')', '==', '0', '{', 'fmt.Print(""no matches"")', '}', 'else', '{', 'result', ':=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'for', 'i', ',', 'name', ':=', 'range', 're.SubexpNames()', '{', 'result', '[', 'name', ']', '=', 'match', '[', 'i', ']', '}', 'fmt.Print(result)', '}', '}', 'http://play.golang.org/p/8vieH4eDd1']"
1408,29670462,"
","['I', 'want', 'to', 'extract', 'all', 'loc', 'element', 'value', 'but', 'I', 'am', 'getting', 'an', 'empty', 'array', 'My', 'code:', 'package', 'main', 'import', '(', '""fmt""', '""encoding/xml""', ')', 'type', 'Query', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'xml', ':', '""urlset""', 'locs', '[]', 'Loc', 'xml', ':', '""url>loc""', '}', 'type', 'Loc', 'struct', '{', 'loc', 'string', '}', 'var', 'data', '=', '[]', 'byte', '(', 'http', '://', 'www', '.', 'konga', '.', 'com/mobile-recharge', '2015', '-', '04', '-', '14', 'daily', '0', '.', '5', 'http', '://', 'www', '.', 'konga', '.', 'com/beauty-health-personal-care', '2015', '-', '04', '-', '14', 'daily', '0', '.', '5', ')', 'func', 'main', '()', '{', 'var', 'q', 'Query', 'xml.Unmarshal(data, &q)', 'fmt.Println(q.locs)', '}']"
1409,29738391,"

GO
","['I', 'have', 'an', 'array', 'of', 'pointers', 'to', 'structs.', 'The', 'structs', 'have', 'a', 'name', 'field.', 'I', 'want', 'to', 'create', 'a', 'map', 'from', 'names', 'to', 'pointers', 'to', 'structs.', 'Why', 'are', 'all', 'of', 'the', 'values', 'in', 'the', 'registry', 'map', 'identical?', 'package', 'main', 'import', '""fmt""', 'type', 'Thing', 'struct', '{', 'Name', 'string', 'Value', 'int', '}', 'type', 'Registry', 'map', '[', 'string', ']*', 'Thing', 'func', 'toRegistry', '(', 'things', '*[]', 'Thing', ')', 'Registry', '{', 'registry', ':=', 'make', '(', 'Registry', ')', 'for', '_', ',', 'thing', ':=', 'range', '*', 'things', '{', 'registry', '[', 'thing', '.', 'Name', ']', '=', '&', 'thing', '}', 'return', 'registry', '}', 'func', 'main', '()', '{', 'things', ':=', '[]', 'Thing', '{{', '""thingA""', ',', '1', '},', '{', '""thingB""', ',', '2', '}}', 'registry', ':=', 'toRegistry', '(&', 'things', ')', 'fmt.Println(registry)', '}', 'Sample', 'output:', 'map', '[', 'thingB', ':', '0x1', '04361', '80', 'thingA', ':', '0x1', '04361', '80', ']', 'GO', 'EDIT', 'Per', ""@tvblah's"", 'suggestion,', 'things', 'was', 'already', 'a', 'slice,', 'so', ""there's"", 'no', 'need', 'to', 'point', 'to', 'it:', 'package', 'main', 'import', '""fmt""', 'type', 'Thing', 'struct', '{', 'Name', 'string', 'Value', 'int', '}', 'type', 'Registry', 'map', '[', 'string', ']*', 'Thing', 'func', 'toRegistry', '(', 'things', '[]', 'Thing', ')', 'Registry', '{', 'registry', ':=', 'make', '(', 'Registry', ')', 'for', '_', ',', 'thing', ':=', 'range', 'things', '{', 'registry', '[', 'thing', '.', 'Name', ']', '=', '&', 'thing', '}', 'return', 'registry', '}', 'func', 'main', '()', '{', 'things', ':=', '[]', 'Thing', '{{', '""thingA""', ',', '1', '},', '{', '""thingB""', ',', '2', '}}', 'registry', ':=', 'toRegistry', '(', 'things', ')', 'fmt.Println(registry)', 'GO']"
1410,29840375,"
","['I', 'learning', 'the', 'go', 'and', 'struggling', 'with', 'this', 'panic', 'error...', 'it', 'working', 'for', 'some', 'time,', 'but', 'soon', 'end', 'up', 'with', 'such', 'exception', 'panic', ':', 'runtime', 'error', ':', 'invalid', 'memory', 'address', 'or', 'nil', 'pointer', 'dereference', 'The', 'function', 'simply', 'iterate', 'over', 'map', 'of', 'proxies', 'until', 'it', 'successfully', 'get', 'the', 'content', 'of', 'the', '""address"".', 'It', 'must', 'be', 'not', 'very', 'idiomatic,', 'especially', 'using', 'map', 'instead', 'of', 'slice', 'and', 'the', 'last', 'return,', 'but', 'I', 'hope', 'that', 'is', 'not', 'the', 'reason', 'of', 'panic', 'crush...', 'if', 'I', 'omitted', 'something', 'possible', 'important', 'please,', 'let', 'me', 'know,', 'I', 'will', 'update', 'the', 'post,', 'I', 'just', 'do', 'not', 'want', 'to', 'flood', 'it', 'with', 'unnecessary', 'info.', 'proxies', 'is', 'a', 'struct', 'with', 'map', 'field', 'with', 'methods', 'for', 'concurrent', 'safe', 'read/delete.', 'func', 'getContent', '(', 'address', 'string', ')', 'string', '{', 'localProxies', ':=', 'proxies.Get()', 'for', 'proxy', ':=', 'range', 'localProxies', '{', 'proxyUrl', ',', '_', ':=', 'url.Parse(""http://"" + proxy)', 'transport', ':=', 'http', '.', 'Transport', '{', 'Dial', ':', 'dialTimeout', ',', 'Proxy', ':', 'http.ProxyURL(proxyUrl)', ',', '}', 'httpClient', ':=', 'http', '.', 'Client', '{', 'Transport', ':', '&', 'transport', ',', 'Timeout', ':', 'timeout', '}', 'req', ',', 'err', ':=', 'http.NewRequest(""GET"", address, nil)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""Request error: "", err.Error())', '}', 'req', '.', 'Header.Set(""User-Agent"", ""Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0"")', 'res', ',', 'err', ':=', 'httpClient.Do(req)', 'defer', 'res', '.', 'Body.Close()', 'if', 'err', '!=', 'nil', '{', '//', 'fmt.Println(""Broken', '"",', 'proxy)', 'fmt.Println(""Response error: "", err.Error())', 'proxies.Del(proxy)', 'continue', '}', 'if', 'res', '.', 'StatusCode', '!=', '200', '{', '//', 'fmt.Println(""Status', 'error:', '"",', 'res.Status)', 'proxies.Del(proxy)', 'continue', '}', 'out', ',', 'err', ':=', 'ioutil.ReadAll(res.Body)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""Read error: "", err.Error())', 'proxies.Del(proxy)', 'continue', '}', 'return', 'string', '(', 'out', ')', '}', 'return', '""error""', '}', 'go', 'version', 'go', '1', '.', '4', '.', '2', 'linux/amd64']"
1411,29871585,"

or, even better, use reflection to output the arguments/return values at time of entry/exit. I'm assuming runtime performance isn't critical :). 

Is there a good way to do this? Shaba Abhiram's handy Tracey lib does go a long way towards this but stops short of printing the return values.
","['I', 'want', 'to', 'know', 'the', 'return', 'values', 'at', 'time', 'of', 'exit', 'from', 'a', 'golang', 'function.', 'The', 'golang', 'defer', 'mechanism', 'is', 'helpful,', 'but', 'it', 'evaluates', 'arguments', 'at', 'the', 'time', 'the', 'defer', 'statement', 'is', 'registered', 'rather', 'than', 'when', 'it', 'is', 'executed.', 'I', 'can', 'work', 'with', 'this', 'using', 'an', 'anonymous', 'function', 'which', 'accesses', 'the', 'return', 'values:', 'func', 'try', '()', '(', 'int', 'i', ')', '{', 'defer', 'func', '()', '{', 'fmt.Printf(""%d"", i)}()', 'i', '=', '10', 'return', 'i', '+', '1', '}', 'func', 'main', '()', '{', 'try', '()', '}', 'This', 'would', 'work', 'ok,', 'i', 'think,', 'but', 'I', 'would', 'like', 'to', 'handle', 'this', 'in', 'a', 'generic', 'manner,', 'perhaps', 'something', 'like:', 'func', 'try', '(', 'in', 'string', ')', '(', 'out', 'int', ')', '{', 'enter', '(', '""%s""', ',', 'in', ');', 'exit', '(', '""%d""', ',', 'out', ')', '}', 'or,', 'even', 'better,', 'use', 'reflection', 'to', 'output', 'the', 'arguments/return', 'values', 'at', 'time', 'of', 'entry/exit.', ""I'm"", 'assuming', 'runtime', 'performance', ""isn't"", 'critical', ':).', 'Is', 'there', 'a', 'good', 'way', 'to', 'do', 'this?', 'Shaba', ""Abhiram's"", 'handy', 'Tracey', 'lib', 'does', 'go', 'a', 'long', 'way', 'towards', 'this', 'but', 'stops', 'short', 'of', 'printing', 'the', 'return', 'values.']"
1412,29871954,"How can I add an Authorization header to urlfetch client with Go?

There is a similar question answered for java and python, but not Go.
","['or,', 'even', 'better,', 'use', 'reflection', 'to', 'output', 'the', 'arguments/return', 'values', 'at', 'time', 'of', 'entry/exit.', ""I'm"", 'assuming', 'runtime', 'performance', ""isn't"", 'critical', ':).', 'Is', 'there', 'a', 'good', 'way', 'to', 'do', 'this?', 'Shaba', ""Abhiram's"", 'handy', 'Tracey', 'lib', 'does', 'go', 'a', 'long', 'way', 'towards', 'this', 'but', 'stops', 'short', 'of', 'printing', 'the', 'return', 'values.']"
1413,29929750,"

1.) When I serialize the public key (to get an armored version of it), I get the following error message: 


  Serializing PubKey  openpgp: invalid argument: Signature: need to call Sign, SignUserId or SignKey before Serialize


I thought I just used every possible way to create a signature on that key?

2.) I still receive an output from problem 1, when I upload the key to a keyserver, than the available information are incomplete. Only the key-id and the creation date are listed. All additional information like, self-signature, user-id-string and so on are missing (example: https://pgp.mit.edu/pks/lookup?search=0xbe6ee21e94a73ba5&op=index). What went wrong? Is it related to error 1?

PS: I am new to golang, started today.
","[""I'm"", 'currently', 'working', 'on', 'openpgp', 'in', 'combination', 'with', 'golang.', 'I', 'use', 'the', 'following', 'code', 'to', 'generate', 'a', 'new', 'keypair', 'and', 'create', 'a', 'self-signature', 'on', 'the', 'resulting', 'public', 'key:', 'package', 'main', 'import', '(', '""bytes""', '""crypto""', '""time""', '""golang.org/x/crypto/openpgp""', '""golang.org/x/crypto/openpgp/armor""', '""golang.org/x/crypto/openpgp/packet""', '""fmt""', ')', '//', 'Create', 'ASscii', 'Armor', 'from', 'openpgp.Entity', 'func', 'PubEntToAsciiArmor', '(', 'pubEnt', '*', 'openpgp', '.', 'Entity', ')', '(', 'asciiEntity', 'string', ')', '{', 'go', 'tWriter', ':=', 'bytes.NewBuffer(nil)', 'wr', ',', 'errEncode', ':=', 'armor.Encode(gotWriter, openpgp.PublicKeyType, nil)', 'if', 'errEncode', '!=', 'nil', '{', 'fmt.Println(""Encoding Armor "", errEncode.Error())', 'return', '}', 'errSerial', ':=', 'pubEnt.Serialize(wr)', 'if', 'errSerial', '!=', 'nil', '{', 'fmt.Println(""Serializing PubKey "", errSerial.Error())', '}', 'errClosing', ':=', 'wr.Close()', 'if', 'errClosing', '!=', 'nil', '{', 'fmt.Println(""Closing writer "", errClosing.Error())', '}', 'asciiEntity', '=', 'go', 'tWriter.String()', 'return', '}', 'func', 'main', '()', '{', 'var', 'entity', '*', 'openpgp', '.', 'Entity', 'entity', ',', 'err', ':=', 'openpgp.NewEntity(""itis"", ""test"", ""itis@itis3.com"", nil)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""ERROR"")', '}', 'usrIdstring', ':=', '""""', 'for', '_', ',', 'uIds', ':=', 'range', 'entity', '.', 'Identities', '{', 'usrIdstring', '=', 'uIds', '.', 'Name', '}', 'var', 'priKey', '=', 'entity', '.', 'PrivateKey', 'var', 'sig', '=', 'new', '(', 'packet', '.', 'Signature', ')', '//', 'Prepare', 'sign', 'with', 'our', 'configs/IS', 'IT', 'A', 'MUST', '??', 'sig', '.', 'Hash', '=', 'crypto', '.', 'SHA1', 'sig', '.', 'PubKeyAlgo', '=', 'priKey', '.', 'PubKeyAlgo', 'sig', '.', 'CreationTime', '=', 'time.Now()', 'dur', ':=', 'new', '(', 'uint32', ')', '*', 'dur', '=', 'uint32', '(', '365', '*', '24', '*', '60', '*', '60', ')', 'sig', '.', 'SigLifetimeSecs', '=', 'dur', '//a year', 'issuerUint', ':=', 'new', '(', 'uint64', ')', '*', 'issuerUint', '=', 'priKey', '.', 'KeyId', 'sig', '.', 'IssuerKeyId', '=', 'issuerUint', 'sig', '.', 'SigType', '=', 'packet', '.', 'SigTypeGenericCert', 'err', '=', 'sig.SignKey(entity.PrimaryKey, entity.PrivateKey, nil)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""ERROR"")', '}', 'err', '=', 'sig.SignUserId(usrIdstring, entity.PrimaryKey, entity.PrivateKey, nil)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""ERROR"")', '}', 'entity.SignIdentity(usrIdstring, entity, nil)', 'var', 'copy', '=', 'entity', 'var', 'asciiSignedKey', '=', 'PubEntToAsciiArmor', '(', 'copy', ')', 'fmt.Println(asciiSignedKey)', '}', '1.)', 'When', 'I', 'serialize', 'the', 'public', 'key', '(to', 'get', 'an', 'armored', 'version', 'of', 'it),', 'I', 'get', 'the', 'following', 'error', 'message:', 'Serializing', 'PubKey', 'openpgp:', 'invalid', 'argument:', 'Signature:', 'need', 'to', 'call', 'Sign,', 'SignUserId', 'or', 'SignKey', 'before', 'Serialize', 'I', 'thought', 'I', 'just', 'used', 'every', 'possible', 'way', 'to', 'create', 'a', 'signature', 'on', 'that', 'key?', '2.)', 'I', 'still', 'receive', 'an', 'output', 'from', 'problem', '1,', 'when', 'I', 'upload', 'the', 'key', 'to', 'a', 'keyserver,', 'than', 'the', 'available', 'information', 'are', 'incomplete.', 'Only', 'the', 'key-id', 'and', 'the', 'creation', 'date', 'are', 'listed.', 'All', 'additional', 'information', 'like,', 'self-signature,', 'user-id-string', 'and', 'so', 'on', 'are', 'missing', '(example:', 'https://pgp.mit.edu/pks/lookup?search=0xbe6ee21e94a73ba5&op=index).', 'What', 'went', 'wrong?', 'Is', 'it', 'related', 'to', 'error', '1?', 'PS:', 'I', 'am', 'new', 'to', 'golang,', 'started', 'today.']"
1414,30041461,"

And so on. There are a lot of different child types and each requires it's own generator -- a function SaveChildren1, SaveChildren2 etc. These functions actually fill the channels with objects.

The question is how would you refactor these ""binders"" -- the functions that transform SaveChildren (a function of 2 args) into a function of 1 argument? Currently this code doesn't look like a well written go-style code.
","['Consider', 'a', 'function', 'that', 'saves', 'streams', 'of', 'objects', 'of', 'different', 'types', 'to', 'disk:', 'func', 'Save', '(', 'fill', 'func', '(', 'c', 'chan', 'BaseType', '),', 'file', 'string', ')', '{}', 'This', 'function', 'is', 'used', 'in', 'the', 'following', 'way', 'throughout', 'the', 'code:', '//', 'Here', ""we've"", 'got', 'different', 'data', 'structures', 'data1,', 'data2,', '...', '//', 'that', 'must', 'be', 'stored', 'to', 'disk', 'Save', '(', 'func', '(', 'c', 'chan', 'BaseType', ')', '{', '//', 'SaveChildren1', 'generates', 'objects', 'of', 'type', 'Child1', 'based', '//', 'on', 'the', 'data1', 'data', 'structure', 'SaveChildren1', '(', 'c', ',', 'data1', ')', '},', 'filename1', ')', 'Save', '(', 'func', '(', 'c', 'chan', 'BaseType', ')', '{', '//', 'SaveChildren2', 'generates', 'objects', 'of', 'type', 'Child2', 'based', '//', 'on', 'the', 'data2', 'data', 'structure', 'SaveChildren2', '(', 'c', ',', 'data2', ')', '},', 'filename2', ')', 'And', 'so', 'on.', 'There', 'are', 'a', 'lot', 'of', 'different', 'child', 'types', 'and', 'each', 'requires', ""it's"", 'own', 'generator', '--', 'a', 'function', 'SaveChildren1,', 'SaveChildren2', 'etc.', 'These', 'functions', 'actually', 'fill', 'the', 'channels', 'with', 'objects.', 'The', 'question', 'is', 'how', 'would', 'you', 'refactor', 'these', '""binders""', '--', 'the', 'functions', 'that', 'transform', 'SaveChildren', '(a', 'function', 'of', '2', 'args)', 'into', 'a', 'function', 'of', '1', 'argument?', 'Currently', 'this', 'code', ""doesn't"", 'look', 'like', 'a', 'well', 'written', 'go-style', 'code.']"
1415,30105798,"

Sometimes object (struct) with a specific schema (type declaration) is needed just in one place and nowhere else. I don't want to spawn numerous useless types, and I don't want to use reflection for this. 

Is there any syntactic sugar in Go that provides a more elegant way to do this? 
","['In', 'Python', 'it', 'is', 'possible', 'to', 'create', 'a', 'dictionary', 'and', 'serialize', 'it', 'as', 'a', 'JSON', 'object', 'like', 'this:', 'example', '=', '{', '""key1""', ':', '123', ',', '""key2""', ':', '""value2""', '}', 'js', '=', 'json.dumps(example)', 'Go', 'is', 'statically', 'typed,', 'so', 'we', 'have', 'to', 'declare', 'the', 'object', 'schema', 'first:', 'type', 'Example', 'struct', '{', 'Key1', 'int', 'Key2', 'string', '}', 'example', ':=', '&', 'Example', '{', 'Key1', ':', '123', ',', 'Key2', ':', '""value2""', '}', 'js', ',', '_', ':=', 'json.Marshal(example)', 'Sometimes', 'object', '(struct)', 'with', 'a', 'specific', 'schema', '(type', 'declaration)', 'is', 'needed', 'just', 'in', 'one', 'place', 'and', 'nowhere', 'else.', 'I', ""don't"", 'want', 'to', 'spawn', 'numerous', 'useless', 'types,', 'and', 'I', ""don't"", 'want', 'to', 'use', 'reflection', 'for', 'this.', 'Is', 'there', 'any', 'syntactic', 'sugar', 'in', 'Go', 'that', 'provides', 'a', 'more', 'elegant', 'way', 'to', 'do', 'this?']"
1416,30217782,"

This code will keep on printing 0 and 1 all the time. Am I doing it wrong?
","['Take', 'a', 'look', 'at', 'the', 'following', 'source', 'code:', 'import', '""container/list""', 'type', 'Stream', 'struct', '{', 'list', 'list', '.', 'List', '}', 'func', '(', 's', 'Stream', ')', 'Append', '(', 'value', 'interface', '{})', '{', 'log.Println(s.list.Len())', 's', '.', 'list.PushBack(value)', 'log.Println(s.list.Len())', '}', 'This', 'code', 'will', 'keep', 'on', 'printing', '0', 'and', '1', 'all', 'the', 'time.', 'Am', 'I', 'doing', 'it', 'wrong?']"
1417,30233217,"

If I do that I get the JSON object in JavaScript, but if I try to look into the JSON to get the array- i.e. console.log(ev.detail.response['trial-data']) then this doesn't work. 
","['I', 'have', 'a', 'go', 'server', 'which', 'has', 'to', 'respond', 'to', 'a', 'javascript', 'request', 'by', 'serving', 'a', 'json', 'file.', 'The', 'json', 'file', 'is', 'an', 'array', 'of', 'objects.', 'My', 'code', ':', 'Server', 'side', 'package', 'expt', 'import', '(', '""net/http""', ')', 'func', 'init', '()', '{', 'http.HandleFunc(""/"", handleStatic)', 'http.HandleFunc(""/loadTrials"", handleloadJson)', '}', 'func', 'handleStatic', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'w.Header().Set(""Cache-Control"", ""no-cache"")', 'http.ServeFile(w, r, ""static/""+r.URL.Path)', '}', 'func', 'handleloadJson', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'http.ServeFile(w, r, ""static/trial.json"")', '}', 'Client', 'side', 'loadTrials', ':', 'func', 'tion', 'loadTrials', '()', '{', 'var', '_this', '=', 'this', ',', 'load', '=', 'this', '.', ""shadowRoot.querySelector('#load-trial')"", ';', 'load', '.', 'url', '=', '""http://url:8080/loadTrials""', ';', 'load.go()', ""load.addEventListener('core-response', function(ev)"", '{', 'console.log(ev.detail.response)', '},', 'false', ');', '}', 'Json', '{', '""trial-data""', ':', '[', '{', '""trial""', ':', '{', '""index""', ':', '0', ',', '}', '},', '{', '""trial""', ':', '{', '""index""', ':', '1', ',', '}', '}', ']', '}', 'If', 'I', 'do', 'that', 'I', 'get', 'the', 'JSON', 'object', 'in', 'JavaScript,', 'but', 'if', 'I', 'try', 'to', 'look', 'into', 'the', 'JSON', 'to', 'get', 'the', 'array-', 'i.e.', ""console.log(ev.detail.response['trial-data'])"", 'then', 'this', ""doesn't"", 'work.']"
1418,30234610,"
","[""I'm"", 'using', 'GORM', 'to', 'access', 'the', 'records', 'in', 'my', 'database.', 'Now', 'I', 'want', 'to', 'retrieve', 'all', 'records', 'that', 'are', 'not', 'deleted', 'which', 'means,', 'that', 'the', 'attribute', 'DeletedAt', 'must', 'be', 'NULL.', 'I', 'tried', 'the', 'following', 'command', 'chains', 'with', 'WHERE(),', 'but', 'they', 'returned', 'no', 'results.', 'users', ':=', '[]*', 'models', '.', 'User', '{}', 'db.Where(""deleted_at"", nil).Find(&users)', 'and', 'db.Where(""deleted_at"", ""NULL"").Find(&users)', 'My', 'database', 'model', 'is', 'defined', 'by', 'the', 'following', 'structs:', 'type', 'Model', 'struct', '{', 'ID', 'uint', 'go', 'rm', ':', '""primary_key""', 'CreatedAt', 'time', '.', 'Time', 'UpdatedAt', 'time', '.', 'Time', 'DeletedAt', '*', 'time', '.', 'Time', '}', 'type', 'User', 'struct', '{', 'go', 'rm', '.', 'Model', 'Username', 'string', 'sql', ':', '""size:32; not null; unique""', 'Password', 'string', 'sql', ':', '""not null""', 'Locale', 'string', 'sql', ':', '""not null""', '}']"
1419,30242905,"
","['To', 'write', 'some', 'C', 'code', 'in', 'a', 'comment', 'above', 'import', '""C""', 'is', 'straightforward:', '//', 'foo.go', 'package', 'main', '/*', 'int', 'for', 'tytwo', '()', '{', 'return', '42', ';', '}', '*/', 'import', '""C""', 'import', '""fmt""', 'func', 'main', '()', '{', 'fmt.Printf(""forty-two == %d\\n"", C.fortytwo())', 'fmt.Printf(""forty-three == %d\\n"", C.fortythree())', '}', 'And', 'it', 'works', 'fine:', '$', 'go', 'install', '$', 'foo', 'for', 'ty', '-', 'two', '==', '42', 'However,', 'C', 'code', 'in', ""it's"", 'own', '.c', 'file:', '//', 'foo.c', 'int', 'for', 'tythree', '()', '{', 'return', '43', ';', '}', '...referenced', 'from', 'Go:', '//', 'foo.go', 'func', 'main', '()', '{', 'fmt.Printf(""forty-two == %d\\n"", C.fortytwo())', 'fmt.Printf(""forty-three == %d\\n"", C.fortythree())', '}', '...does', 'not', 'work:', '$', 'go', 'install', 'foo', 'could', 'not', 'determine', 'kind', 'of', 'name', 'for', 'C', '.', 'for', 'tythree']"
1420,30287218,"

How can I do this?
","['I', 'have', 'some', 'c', 'macros', 'in', 'the', 'form', 'of', 'define', 'VARATT_IS_4B', '(', 'PTR', ')', '((((', 'var', 'attrib_1b', '*)', '(', 'PTR', '))->', 'va_header', '&', '0x8', '0', ')', '==', '0', 'x00', ')', 'and', 'want', 'to', 'convert', 'it', 'to', 'Go', 'lang.', 'I', 'am', 'doing', 'something', 'like', 'func', 'var', 'AttIs1B', '(', 'ptr', 'uintptr', ')', 'bool', '{', 'return', '(*', 'var', 'Attrib1b', '(', 'ptr', ').', 'vaHeader', '&', '0', 'x01', ')', '==', '0', 'x01', '}', 'but', 'yeah,', 'it', 'is', 'not', 'working', 'and', 'I', 'am', 'getting', 'compiler', 'error', '""cannot', 'convert', 'ptr', '(type', 'int)', 'to', 'type', 'varAttrib1b"".', 'varAttrib1b', 'is', 'a', 'struct', 'with', 'two', 'fields', 'and', 'ptr', 'is', 'a', 'uintptr(could', 'be', 'some', 'other', 'type', 'also).', 'type', 'var', 'Attrib1b', 'struct', '{', 'vaHeader', 'uint8', 'vaData', '[]', 'string', '}', 'How', 'can', 'I', 'do', 'this?']"
1421,30339877,"


It should not be null. It should be meh@gmail.com
","['func', 'for', 'warderHandlerFunc', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'client', ':=', '&', 'http', '.', 'Client', '{}', 'u', ',', '_', ':=', 'url.Parse(r.RequestURI)', 'req', ',', '_', ':=', 'http.NewRequest(r.Method, fmt.Sprintf(""%s%s"", apiUrl, u.Path), r.Body)', 'fmt.Printf(fmt.Sprintf(""%s\\n"", nutils.ReaderToString(req.Body)))', 'resp', ',', '_', ':=', 'client.Do(req)', 'resp.Write(w)', '}', 'I', 'am', 'trying', 'to', 'forward', 'an', 'incoming', 'HTTP', 'request', 'to', 'another', 'endpoint,', 'while', 'copying', 'the', 'body,', 'including', 'POST/PUT', 'form', 'data', 'into', 'the', 'new', 'request.', 'However,', 'it', ""doesn't"", 'seem', 'to', 'work,', 'even', 'if', 'the', 'Body', 'seems', 'to', 'print', 'out', 'correct', 'with', 'data.', 'Print', 'output', 'is:', 'email=meh%!g(MISSING)mail.com', 'How', 'can', 'I', 'fix', 'it?', 'Edit:', 'Added', 'more', 'debug', 'info,', 'this', 'time,', 'printing', 'out', 'the', 'output', 'of', 'resp', 'func', 'for', 'warderHandlerFunc', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'client', ':=', '&', 'http', '.', 'Client', '{}', 'u', ',', '_', ':=', 'url.Parse(r.RequestURI)', 'req', ',', '_', ':=', 'http.NewRequest(r.Method, fmt.Sprintf(""%s%s"", apiUrl, u.Path), r.Body)', 'fmt.Printf(fmt.Sprintf(""%s\\n"", nutils.ReaderToString(req.Body)))', 'resp', ',', '_', ':=', 'client.Do(req)', 'b', ',', '_', ':=', 'ioutil.ReadAll(resp.Body)', 'fmt.Printf(fmt.Sprintf(""%s\\n"", nutils.BytesToString(b)))', 'resp.Write(w)', '}', '$', 'go', 'install', '&&', 'go', 'm', '-', 'proxy', '-', 'for', 'warder', 'run', '--', 'listen', 'localhost', ':', '5002', '--', 'api', '-', 'url', 'http', '://', 'localhost', ':', '5001', 'email', '=', 'meh2', '%!', 'g', '(', 'MISSING', ')', 'mail', '.', 'com', '{', '""email""', ':', 'null', '}', 'It', 'should', 'not', 'be', 'null.', 'It', 'should', 'be', 'meh@gmail.com']"
1422,30369575,"

But it seems req.Proto is ignored. The message is sent out using HTTP/1.1.
","['Is', 'it', 'possible', 'to', 'send', 'HTTP', 'requests', 'using', 'HTTP/1.0', 'with', 'golang?', 'I', 'tried', 'the', 'following:', 'req', ',', '_', ':=', 'http.NewRequest(""POST"", url, buffer)', 'req', '.', 'Proto', '=', '""HTTP/1.0""', 'client', ':=', '&', 'http', '.', 'Client', '{}', 'resp', ',', 'err', '=', 'client.Do(req)', 'But', 'it', 'seems', 'req.Proto', 'is', 'ignored.', 'The', 'message', 'is', 'sent', 'out', 'using', 'HTTP/1.1.']"
1423,30391141,"

http://play.golang.org/p/aBlp-Zatgn
","['Is', 'this', 'Go', 'code', 'correct', 'and', 'portable,', 'I', 'need', 'to', 'store', '2', 'counters', '(each', 'call', 'only', 'one', 'counter', 'will', 'be', 'updated)', 'in', 'one', 'variable', 'to', 'avoid', 'locks', 'in', 'actual', 'code', 'where', 'I', 'am', 'going', 'to', 'use', 'single', 'atomic.AddUint64()', 'instead', 'of', 'locking', 'whole', 'struct.', 'package', 'main', 'import', '""fmt""', 'var', 'long', 'uint64', '// Actual counters storage', 'func', 'main', '()', '{', 'left', ':=', 'uint32', '(', '100', ')', '// First counter', 'right', ':=', 'uint32', '(', '200', ')', '// Second counter', 'long', '=', 'uint64', '(', 'left', ')', 'long', '=', 'long', '<<', '32', '|', 'uint64', '(', 'right', ')', 'fmt.Println(left, right)', 'long', '+=', 'uint64', '(', '1', '<<', '32', ')', '// Increment left', 'long', '+=', '1', '// Increment right', 'xLeft', ':=', 'uint32', '(', 'long', '>>', '32', ')', '// Get left', 'xRight', ':=', 'uint32', '(', 'long', ')', '// Get right', 'fmt.Println(xLeft, xRight)', '}', 'http://play.golang.org/p/aBlp-Zatgn']"
1424,30424935,"
  
  But it is good style to use the factored import statement.


Is there actually any concrete advantage to using one approach over the other - such as a difference in behaviour or an easy-to-make typo that is only a danger with one of the two syntaxes - or is this just an arbitrary style convention?
","['The', 'official', 'tour', 'of', 'Go,', 'after', 'exhibiting', 'a', 'factored', 'import', 'like', 'this...', 'import', '(', '""fmt""', '""math""', ')', '...', 'contains', 'the', 'following', 'slightly', 'unclear', 'remark:', 'You', 'can', 'also', 'write', 'multiple', 'import', 'statements,', 'like:', 'import', '""fmt""', 'import', '""math""', 'But', 'it', 'is', 'good', 'style', 'to', 'use', 'the', 'factored', 'import', 'statement.', 'Is', 'there', 'actually', 'any', 'concrete', 'advantage', 'to', 'using', 'one', 'approach', 'over', 'the', 'other', '-', 'such', 'as', 'a', 'difference', 'in', 'behaviour', 'or', 'an', 'easy-to-make', 'typo', 'that', 'is', 'only', 'a', 'danger', 'with', 'one', 'of', 'the', 'two', 'syntaxes', '-', 'or', 'is', 'this', 'just', 'an', 'arbitrary', 'style', 'convention?']"
1425,30428926,"

The above statement just prints ""WOO…"" to the console. This is run every time a new request is made.

Unfortunately, when I run eb logs to view my instance logs, this debug line never shows up – and I can't figure out why.

I've tried printing to STDERR, printing to STDOUT, etc. – but I'm absolutely unable to get any output.

I've scoured the internet looking for solutions, but have yet to find any.
","['This', 'is', 'sort', 'of', 'an', 'in-depth', 'question,', 'so', ""I'll"", 'try', 'to', 'explain', 'it', 'as', 'best', 'I', 'can.', ""I've"", 'built', 'a', 'small', 'API', 'service', 'in', 'Go', 'that', ""I'm"", 'trying', 'to', 'deploy', 'to', 'AWS', 'using', 'the', 'relatively', 'new', 'AWS', 'Elastic', 'Beanstalk', 'Docker', 'support.', ""Here's"", 'what', ""I've"", 'done', '(the', 'code', 'is', 'all', 'open', 'source,', 'so', 'you', 'can', 'follow', 'along', 'if', ""you'd"", 'like):', '$', 'git', 'clone', 'https', '://', 'github', '.', 'com/rdegges/ipify-api.git', '$', 'cd', 'ipify', '-', 'api', '$', 'git', 'fetch', 'origin', 'aws', ':', 'aws', '$', 'git', 'checkout', 'aws', '$', 'eb', 'init', '$', 'eb', 'create', '$', 'eb', 'deploy', 'This', 'will', 'use', 'elastic', 'beanstalk', 'to', 'create', 'a', 'new', 'app', '(with', 'docker),', 'and', 'deploy', 'it.', 'If', 'I', 'then', 'run', 'eb', 'open', 'to', 'open', 'my', 'web', 'app,', ""I'll"", 'see', 'my', 'public', 'IP', 'address', 'displayed', '(this', 'is', 'the', 'correct', 'behavior),', 'so', 'I', 'know', 'that', 'my', 'application', 'is', 'running', '/', 'functional.', 'Now,', 'in', 'my', 'source', 'code,', ""I've"", 'got', 'several', 'lines', 'of', 'debugging', 'output:', 'fmt.Println(""WOOOOOOOOOOOO"")', 'The', 'above', 'statement', 'just', 'prints', '""WOO…""', 'to', 'the', 'console.', 'This', 'is', 'run', 'every', 'time', 'a', 'new', 'request', 'is', 'made.', 'Unfortunately,', 'when', 'I', 'run', 'eb', 'logs', 'to', 'view', 'my', 'instance', 'logs,', 'this', 'debug', 'line', 'never', 'shows', 'up', '–', 'and', 'I', ""can't"", 'figure', 'out', 'why.', ""I've"", 'tried', 'printing', 'to', 'STDERR,', 'printing', 'to', 'STDOUT,', 'etc.', '–', 'but', ""I'm"", 'absolutely', 'unable', 'to', 'get', 'any', 'output.', ""I've"", 'scoured', 'the', 'internet', 'looking', 'for', 'solutions,', 'but', 'have', 'yet', 'to', 'find', 'any.']"
1426,30474313,"
","['How', 'to', 'use', 'regular', 'expression', 'matching', 'URL,', 'which', 'does', 'decide', 'to', 'use', 'the', 'corresponding', 'function', 'processing', 'package', 'main', 'import', '(', '""fmt""', '""net/http""', ')', 'func', 'main', '()', '{', 'http.HandleFunc(""/pattern"", resolve)', 'http.ListenAndServe("":8080"", nil)', '}', 'func', 'resolve', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'fmt.Println(r.URL.Host)', '}']"
1427,30502933,"

However, it is not possible to override MyFunc0 the same way. So now a question is raised. What are the differences between the two ways of declaring a function? Is this behavior difference intended?
","['I', 'found', 'something', 'interesting', 'in', 'Go.', ""Let's"", 'say', 'I', 'have', 'my', 'package', 'name', 'is', 'mypkg,', 'inside', 'mypkg,', 'I', 'have', 'two', 'functions:', 'package', 'mypkg', 'func', 'MyFunc0', '(){', '//', '...', '}', 'var', 'MyFunc1', '=', 'func', '(){', '//', '...', '}', 'Now', 'in', 'my', 'main', 'package,', 'it', 'is', 'possible', 'to', 'override', 'MyFunc1,', 'like', 'this:', 'mypkg', '.', 'MyFunc1', '=', 'func', '(){', '//', 'new', 'logic', '}', 'However,', 'it', 'is', 'not', 'possible', 'to', 'override', 'MyFunc0', 'the', 'same', 'way.', 'So', 'now', 'a', 'question', 'is', 'raised.', 'What', 'are', 'the', 'differences', 'between', 'the', 'two', 'ways', 'of', 'declaring', 'a', 'function?', 'Is', 'this', 'behavior', 'difference', 'intended?']"
1428,30744205,"
","[""I'm"", 'attempting', 'to', 'call', 'the', 'following', 'method:', 'https://msdn.microsoft.com/en-us/library/dn469242(v=vs.85).aspx', 'The', 'corresponding', 'powershell', 'is:', 'wmic', '/', 'namespace', ':', 'ROOT', 'Microsoft', 'Windows', 'DesiredStateConfiguration', 'class', 'MSFT_DSCLocalConfigurationManager', 'call', 'GetConfigurationStatus', 'I', ""can't"", 'quite', 'figure', 'out', 'how', 'to', 'do', 'it', 'correctly', 'using', 'go-ole.', ""Here's"", 'what', 'I', 'have', 'so', 'far.', 'It', 'fails', 'with:', 'invoke_test.go:47:', 'wmi:', 'error', 'calling', 'method', 'GetConfiguration:', 'Exception', 'occurred.', 'Generic', 'failure', ')', 'When', 'I', 'try', 'using', 'GetConfigurationStatus', 'instead', 'of', 'GetConfiguration,', 'I', 'get', 'a', 'Unknown', 'name', 'error,', 'so', 'I', 'suspect', 'this', 'method', 'exists', ""I'm"", 'just', 'invoking', 'it', 'wrong.', 'package', 'wmi', 'import', '(', '""testing""', '""github.com/go-ole/go-ole""', '""github.com/go-ole/go-ole/oleutil""', ')', 'func', 'TestMethod(t', '*testing.T)', '{', 'err', ':=', 'ole.CoInitializeEx(0,', 'ole.COINIT_MULTITHREADED)', 'if', 'err', '!=', 'nil', '{', 't.Fatal(err)', '}', 'unknown,', 'err', ':=', 'oleutil.CreateObject(""WbemScripting.SWbemLocator"")', 'if', 'err', '!=', 'nil', '{', 't.Fatal(err)', '}', 'defer', 'unknown.Release()', 'wmi,', 'err', ':=', 'unknown.QueryInterface(ole.IID_IDispatch)', 'if', 'err', '!=', 'nil', '{', 't.Fatal(err)', '}', 'defer', 'wmi.Release()', 'serviceRaw,', 'err', ':=', 'oleutil.CallMethod(wmi,', '""ConnectServer"",', 'nil,', '`ROOT\\Microsoft\\Windows\\DesiredStateConfiguration`)', 'if', 'err', '!=', 'nil', '{', 't.Fatal(err)', '}', 'service', ':=', 'serviceRaw.ToIDispatch()', 'defer', 'serviceRaw.Clear()', 'typeName', ':=', '""MSFT_DSCLocalConfigurationManager""', 'typeRaw,', 'err', ':=', 'oleutil.CallMethod(service,', '""Get"",', 'typeName)', 'if', 'err', '!=', 'nil', '{', 't.Fatalf(""wmi:', 'error', 'fetching', 'type', '%v:', '%v"",', 'typeName,', 'err)', '}', 'typeResult', ':=', 'typeRaw.ToIDispatch()', 'defer', 'typeRaw.Clear()', 'methodName', ':=', '""GetConfiguration""', 'methodRaw,', 'err', ':=', 'oleutil.CallMethod(typeResult,', 'methodName)', 'if', 'err', '!=', 'nil', '{', 't.Fatalf(""wmi:', 'error', 'calling', 'method', '%v:', '%v"",', 'methodName,', 'err)', '}', 'item', ':=', 'methodRaw.ToIDispatch()', 'defer', 'methodRaw.Clear()', '_', '=', 'item', '}', 'invoke_test', '.', 'go', ':', '47', ':', 'wmi', ':', 'error', 'calling', 'method', 'GetConfiguration', ':', 'Exception', 'occurred', '.', 'Generic', 'failure', ')', 'instead', 'of', 'GetConfiguration,', 'I', 'get', 'a', 'Unknown', 'name', 'error,', 'so', 'I', 'suspect', 'this', 'method', 'exists', ""I'm"", 'just', 'invoking', 'it', 'wrong.', 'package', 'wmi', 'import', '(', '""testing""', '""github.com/go-ole/go-ole""', '""github.com/go-ole/go-ole/oleutil""', ')', 'func', 'TestMethod', '(', 't', '*', 'testing', '.', 'T', ')', '{', 'err', ':=', 'ole.CoInitializeEx(0, ole.COINIT_MULTITHREADED)', 'if', 'err', '!=', 'nil', '{', 't.Fatal(err)', '}', 'unknown', ',', 'err', ':=', 'oleutil.CreateObject(""WbemScripting.SWbemLocator"")', 'if', 'err', '!=', 'nil', '{', 't.Fatal(err)', '}', 'defer', 'unknown.Release()', 'wmi', ',', 'err', ':=', 'unknown.QueryInterface(ole.IID_IDispatch)', 'if', 'err', '!=', 'nil', '{', 't.Fatal(err)', '}', 'defer', 'wmi.Release()', 'serviceRaw', ',', 'err', ':=', 'oleutil.CallMethod(wmi, ""ConnectServer"", nil, `ROOT\\Microsoft\\Windows\\DesiredStateConfiguration`)', 'if', 'err', '!=', 'nil', '{', 't.Fatal(err)', '}', 'service', ':=', 'serviceRaw.ToIDispatch()', 'defer', 'serviceRaw.Clear()', 'type', 'Name', ':=', '""MSFT_DSCLocalConfigurationManager""', 'type', 'Raw', ',', 'err', ':=', 'oleutil.CallMethod(service, ""Get"", typeName)', 'if', 'err', '!=', 'nil', '{', 't.Fatalf(""wmi: error fetching type %v: %v"", typeName, err)', '}', 'type', 'Result', ':=', 'type', 'Raw.ToIDispatch()', 'defer', 'type', 'Raw.Clear()', 'methodName', ':=', '""GetConfiguration""', 'methodRaw', ',', 'err', ':=', 'oleutil.CallMethod(typeResult, methodName)', 'if', 'err', '!=', 'nil', '{', 't.Fatalf(""wmi: error calling method %v: %v"", methodName, err)', '}', 'item', ':=', 'methodRaw.ToIDispatch()', 'defer', 'methodRaw.Clear()', '_', '=', 'item', '}']"
1429,30856454,"
","['Currently', 'am', 'mapping', 'the', 'output', 'of', 'a', 'service', 'that,', 'lets', 'say,', 'liberally', 'interchanges', '0', 'and', 'false', '(and', '1', 'and', 'true)', 'for', 'its', 'boolean', 'types.', 'Is', 'there', 'a', 'way', 'to', 'use', 'a', 'more', 'permissive', 'parser', 'for', 'the', 'built', 'in', 'encoding/json', 'unmarshal', 'function?', ""I've"", 'tried', 'adding', ',string', 'to', 'the', 'json', 'tags', 'to', 'no', 'avail.', 'An', 'example', 'of', 'what', ""I'd"", 'want:', 'type', 'MyType', 'struct', '{', 'AsBoolean', 'bool', 'json', ':', '""field1""', 'AlsoBoolean', 'bool', 'json', ':', '""field2""', '}', 'then,', 'given', 'input', 'json:', '{', '""field1""', ':', 'true', ',', '""field2""', ':', '1', '}', 'the', 'resulting', 'struct', 'would', 'be:', 'obj', ':=', 'MyType', '{}', 'json_err', ':=', 'json.Unmarshal([]byte(input_json), &obj)', 'fmt.Printf(""%v\\n"", obj.AsBoolean)', '//""true""', 'fmt.Printf(""%v\\n"", obj.AlsoBoolean)', '//""true""']"
1430,30947534,"
","['I', 'have', 'an', 'issue', 'with', 'reading', 'a', 'YAML', 'file.', 'I', 'think', ""it's"", 'something', 'in', 'the', 'file', 'structure', 'but', 'I', ""can't"", 'figure', 'out', 'what.', 'YAML', 'file:', 'conf', ':', 'hits', ':', '5', 'time', ':', '5000000', 'code:', 'type', 'conf', 'struct', '{', 'hits', 'int64', 'yaml', ':', '""hits""', 'time', 'int64', 'yaml', ':', '""time""', '}', 'func', '(', 'c', '*', 'conf', ')', 'getConf', '()', '*', 'conf', '{', 'yamlFile', ',', 'err', ':=', 'ioutil.ReadFile(""conf.yaml"")', 'if', 'err', '!=', 'nil', '{', 'log.Printf(""yamlFile.Get err   #%v "", err)', '}', 'err', '=', 'yaml.Unmarshal(yamlFile, c)', 'if', 'err', '!=', 'nil', '{', 'log.Fatalf(""Unmarshal: %v"", err)', '}', 'return', 'c', '}']"
1431,30956244,"

For an input of abcd1234 it should encrypt to: {SHA256}6c7nGrky_ehjM40Ivk3p3-OeoEm9r7NCzmWexUULaa4=

But I get {SHA256}YWJjZDEyMzTjsMRCmPwcFJr79MiZb7kkJ65B5GSbk0yklZkbeFK4VQ== instead.  I suspect I'm using the encryption libraries wrong, but I'm not sure what I should be using as this seems to be the standard library method of encryption to SHA256.
","['I', 'am', 'attempting', 'to', 'complete', 'the', 'Top', 'Code', 'Go', 'Learning', 'Challenges', 'as', 'a', 'vehicle', 'to', 'learn', 'go.', ""I'm"", 'currently', 'working', 'on', 'their', 'Simple', 'API', 'Web', 'Server', 'problem.', 'Part', 'of', 'that', 'problem', 'calls', 'for', 'you', 'to', 'encrypt', 'a', 'password', 'string', 'as', 'such', '""‘{SHA256}’', '+', 'Base64', 'encoded', 'SHA256', 'digest', 'of', 'the', 'user’s', 'password""', ""I've"", 'used', 'the', 'following', 'code', 'to', 'do', 'this,', 'but', 'the', 'results', ""don't"", 'match', 'the', 'test', 'case', 'provided.', 'import', '(', '""encoding/base64""', '""crypto/sha256""', ')', 'func', 'encrtyptPasswords', '(', 'password', 'string', ')', 'string', '{', 'h', ':=', 'sha256.New()', 'return', '""{SHA256}""', '+', 'string', '(', 'base64', '.', 'StdEncoding.EncodeToString(h.Sum([]byte(password))))', '}', 'For', 'an', 'input', 'of', 'abcd1234', 'it', 'should', 'encrypt', 'to:', '{SHA256}6c7nGrky_ehjM40Ivk3p3-OeoEm9r7NCzmWexUULaa4=', 'But', 'I', 'get', '{SHA256}YWJjZDEyMzTjsMRCmPwcFJr79MiZb7kkJ65B5GSbk0yklZkbeFK4VQ==', 'instead.', 'I', 'suspect', ""I'm"", 'using', 'the', 'encryption', 'libraries', 'wrong,', 'but', ""I'm"", 'not', 'sure', 'what', 'I', 'should', 'be', 'using', 'as', 'this', 'seems', 'to', 'be', 'the', 'standard', 'library', 'method', 'of', 'encryption', 'to', 'SHA256.']"
1432,31102871,"I'm running Google App Engine dev_appserver (golang) and have it working with the production Google Cloud Storage (GCS) such that it can read and write files via HTTPS to an actual GCS bucket.  But how do I get the local dev_appserver to simulate GCS locally?  I keep seeing people mention it's possible but can't find any documentation on how to set it up so that you can use the same cloud storage client library for development where all cloud files are stored locally.

Even Google's documentation seems to imply it is possible with the devserver in that you can change the storage path for ""Google Cloud Storage Files"": https://cloud.google.com/appengine/docs/go/tools/devserver

So if I can specify where to save Google Cloud Storage files then how do I setup the Client for Google Cloud Storage (https://cloud.google.com/appengine/docs/go/googlecloudstorageclient/) to work locally? 
","[""I'm"", 'running', 'Google', 'App', 'Engine', 'dev_appserver', '(golang)', 'and', 'have', 'it', 'working', 'with', 'the', 'production', 'Google', 'Cloud', 'Storage', '(GCS)', 'such', 'that', 'it', 'can', 'read', 'and', 'write', 'files', 'via', 'HTTPS', 'to', 'an', 'actual', 'GCS', 'bucket.', 'But', 'how', 'do', 'I', 'get', 'the', 'local', 'dev_appserver', 'to', 'simulate', 'GCS', 'locally?', 'I', 'keep', 'seeing', 'people', 'mention', ""it's"", 'possible', 'but', ""can't"", 'find', 'any', 'documentation', 'on', 'how', 'to', 'set', 'it', 'up', 'so', 'that', 'you', 'can', 'use', 'the', 'same', 'cloud', 'storage', 'client', 'library', 'for', 'development', 'where', 'all', 'cloud', 'files', 'are', 'stored', 'locally.', 'Even', ""Google's"", 'documentation', 'seems', 'to', 'imply', 'it', 'is', 'possible', 'with', 'the', 'devserver', 'in', 'that', 'you', 'can', 'change', 'the', 'storage', 'path', 'for', '""Google', 'Cloud', 'Storage', 'Files"":', 'https://cloud.google.com/appengine/docs/go/tools/devserver', 'So', 'if', 'I', 'can', 'specify', 'where', 'to', 'save', 'Google', 'Cloud', 'Storage', 'files', 'then', 'how', 'do', 'I', 'setup', 'the', 'Client', 'for', 'Google', 'Cloud', 'Storage', '(https://cloud.google.com/appengine/docs/go/googlecloudstorageclient/)', 'to', 'work', 'locally?']"
1433,31285215,"

The output in most cases is:


  i am not parallel : 0
  i am not parallel : 1
  i am not parallel : 2
  neither me : 0 
  neither me : 1 
  neither me : 2


And sometimes:


  neither me : 0 
  neither me : 1 
  neither me : 2
  i am not parallel : 0
  i am not parallel : 1
  i am not parallel : 2


When runtime.Gosched() is uncommented all seems to be OK. 
I have tried changing GOMAXPROCS number from 2 to NumCPU, number of goroutines, cycles: none could get it to work in parallel. 
Why so strange behaviour?

Edit:
Ok, seems to be context-switching is heavy work and is not done very often without reasonable matters. One thing I still can't understand - why people get it to work without any sleep instructions? 
","['Given', 'following', 'code:', 'package', 'main', 'import', '(', '""fmt""', '""runtime""', '""time""', ')', 'func', 'f', '(', 'from', 'string', ')', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '3', ';', 'i', '++', '{', 'fmt.Println(from, "":"", i)', '//', 'runtime.Gosched()', '}', '}', 'func', 'main', '()', '{', 'runtime.GOMAXPROCS(runtime.NumCPU()*2)', 'time.Sleep(100)', 'go', 'f', '(', '""i am not parallel""', ')', 'go', 'f', '(', '""neither me""', ')', 'var', 'input', 'string', 'fmt.Scanln(&input)', '}', 'The', 'output', 'in', 'most', 'cases', 'is:', 'i', 'am', 'not', 'parallel', ':', '0', 'i', 'am', 'not', 'parallel', ':', '1', 'i', 'am', 'not', 'parallel', ':', '2', 'neither', 'me', ':', '0', 'neither', 'me', ':', '1', 'neither', 'me', ':', '2', 'And', 'sometimes:', 'neither', 'me', ':', '0', 'neither', 'me', ':', '1', 'neither', 'me', ':', '2', 'i', 'am', 'not', 'parallel', ':', '0', 'i', 'am', 'not', 'parallel', ':', '1', 'i', 'am', 'not', 'parallel', ':', '2', 'When', 'runtime.Gosched()', 'is', 'uncommented', 'all', 'seems', 'to', 'be', 'OK.', 'I', 'have', 'tried', 'changing', 'GOMAXPROCS', 'number', 'from', '2', 'to', 'NumCPU,', 'number', 'of', 'goroutines,', 'cycles:', 'none', 'could', 'get', 'it', 'to', 'work', 'in', 'parallel.', 'Why', 'so', 'strange', 'behaviour?', 'Edit:', 'Ok,', 'seems', 'to', 'be', 'context-switching', 'is', 'heavy', 'work', 'and', 'is', 'not', 'done', 'very', 'often', 'without', 'reasonable', 'matters.', 'One', 'thing', 'I', 'still', ""can't"", 'understand', '-', 'why', 'people', 'get', 'it', 'to', 'work', 'without', 'any', 'sleep', 'instructions?']"
1434,31327124,"
","['I', 'have', 'this', 'so', 'far', 'to', 'count', 'the', 'number', 'of', 'days', 'using', 'http://golang.org/pkg/time/', 'but', 'I', ""don't"", 'know', 'how', 'to', 'exclude', 'weekends', 'and', 'only', 'count', 'business', 'days', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 't', ':=', 'time.Now()', 'f', ':=', 'time.Date(2015, time.August, 21, 24, 0, 0, 0, time.UTC)', 'diff', ':=', 'f.Sub(t)', '//', 'convert', 'diff', 'to', 'days', 'days', ':=', 'int', '(', 'diff.Hours() / 24)', 'fmt.Printf(""days  %d\\n"", days)', '}']"
1435,31411555,"

I think it's wrong. How can I use keyword go?

In Go, Do I decelerate statement outside function body?
","['I', ""don't"", 'understand', 'why', 'my', 'code', 'has', 'syntax', 'error.', 'package', 'main', 'import', '(', '""fmt""', '""os/exec""', '""time""', ')', 'func', 'ping', '(', 'curl_out', 'string', ')', 'endtime', 'int64', '{', 'try_curl', ':=', 'exec.Command(""curl"", ""localhost:8500/v1/catalog/nodes"")', 'try_curl_out', ':=', 'try_curl.Output()', 'for', 'try_curl_out', '==', 'curl_out', '{', 'try_curl', ':=', 'exec.Command(""curl"", ""localhost:8500/v1/catalog/nodes"")', 'try_curl_out', ':=', 'try_curl.Output()', '}', 'endtime', ':=', 'time.Now().Unix()', 'return', 'endtime', '}', 'func', 'main', '()', '{', 'run_container', ':=', 'exec.Command(""docker"", ""run"", ""-p"", ""8400:8400"", ""-p"", ""8500:8500"", ""-p"", ""8600:53/udp"", ""-h"", ""node1"", ""progrium/consul"", ""-server"", ""-bootstrap"")', 'container_id', ',', 'err', ':=', 'run_container.Output()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'run_curl', ':=', 'exec.Command(""curl"", ""localhost:8500/v1/catalog/nodes"")', 'curl_out', ',', 'err', ':=', 'run_curl.Output()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'endtime', ':=', 'go', 'ping', '(', 'string', '(', 'curl_out', '))', 'container_id', ',', 'err', '=', 'exec.Command(""docker"", ""stop"", container_id)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', 'startime', ':=', 'time.Now().Unix()', 'fmt.Println(""delay is"", endtime-startime)', '}', 'command', '-', 'line', '-', 'arguments', './', 'main', '.', 'go', ':', '9', ':', 'syntax', 'error', ':', 'unexpected', 'name', ',', 'expecting', 'semicolon', 'or', 'newline', './', 'main', '.', 'go', ':', '11', ':', 'non', '-', 'declaration', 'statement', 'outside', 'func', 'tion', 'body', './', 'main', '.', 'go', ':', '15', ':', 'non', '-', 'declaration', 'statement', 'outside', 'func', 'tion', 'body', './', 'main', '.', 'go', ':', '16', ':', 'non', '-', 'declaration', 'statement', 'outside', 'func', 'tion', 'body', './', 'main', '.', 'go', ':', '17', ':', 'non', '-', 'declaration', 'statement', 'outside', 'func', 'tion', 'body', './', 'main', '.', 'go', ':', '18', ':', 'syntax', 'error', ':', 'unexpected', '}', 'This', 'code', 'calculates', 'time', 'between', 'docker', 'start', 'and', 'stop.', 'I', 'use', 'routine', 'to', 'return', 'end', 'time.', 'endtime', ':=', 'go', 'ping', '(', 'string', '(', 'curl_out', '))', 'I', 'think', ""it's"", 'wrong.', 'How', 'can', 'I', 'use', 'keyword', 'go?', 'In', 'Go,', 'Do', 'I', 'decelerate', 'statement', 'outside', 'function', 'body?']"
1436,31434554,"

The real codec or the language being used both don't really matter (actually: the codec is G.711 and the language is Golang). So maybe the go-Tag is inappropriate.

Any clue on this?
","['Currently,', ""I'm"", 'trying', 'to', 'translate', 'some', 'compression', 'algorithm', 'from', 'existing', 'C', 'code.', 'Encoding', 'and', 'decoding', ""doesn't"", 'appear', 'difficult', 'to', 'me.', ""It's"", 'more', 'about', 'the', 'serialization', 'to', 'and', 'from', 'a', 'stream', '(be', 'it', 'a', 'file', 'or', 'a', 'socket).', 'The', 'input', 'is', '12', 'bit', 'and', 'the', 'compressed', 'output', 'is', '7', 'bits.', 'But', 'writing', 'something', 'to', 'a', 'stream', 'always', 'involves', 'writing', 'entire', '8', 'bits.', 'So', 'as', 'there', 'is', 'always', '1', 'bit', 'remaining', 'for', 'each', 'value,', 'does', 'that', 'mean', 'I', 'would', 'have', 'to', 'buffer', '7', 'bytes', 'just', 'to', 'be', 'able', 'to', 'write', '8', 'values?', 'Which', 'would', 'give', 'the', 'following', 'bytes', '(whereas', 'all', '1s', 'belong', 'to', 'the', 'first', 'value,', 'all', ""2's"", 'to', 'the', 'second', 'one,', 'etc.)', '11111112', '22222233', '33333444', '44445555', '55566666', '66777777', '78888888', 'The', 'real', 'codec', 'or', 'the', 'language', 'being', 'used', 'both', ""don't"", 'really', 'matter', '(actually:', 'the', 'codec', 'is', 'G.711', 'and', 'the', 'language', 'is', 'Golang).', 'So', 'maybe', 'the', 'go-Tag', 'is', 'inappropriate.', 'Any', 'clue', 'on', 'this?']"
1437,31473429,"

Is it somehow a convention in Golang to create types like Trips in my example? Or it is better to use []Trip in the whole project? Any pros and cons?
","['Is', 'it', 'a', 'good', 'idea', 'to', 'create', 'own', 'type', 'from', 'a', 'slice', 'in', 'Golang?', 'Example:', 'type', 'Trip', 'struct', '{', 'From', 'string', 'To', 'string', 'Length', 'int', '}', 'type', 'Trips', '[]', 'Trip', '// <-- is this a good idea?', 'func', '(', 'trips', '*', 'Trips', ')', 'TotalLength', '()', 'int', '{', 'ret', ':=', '0', 'for', '_', ',', 'i', ':=', 'range', '*', 'trips', '{', 'ret', '+=', 'i', '.', 'Length', '}', 'return', 'ret', '}', 'Is', 'it', 'somehow', 'a', 'convention', 'in', 'Golang', 'to', 'create', 'types', 'like', 'Trips', 'in', 'my', 'example?', 'Or', 'it', 'is', 'better', 'to', 'use', '[]Trip', 'in', 'the', 'whole', 'project?', 'Any', 'pros', 'and', 'cons?']"
1438,31502195,"

and each post of course has a unique id that was created at a certain time.

I can get the time value with post.Id.Time().

However how do I query for posts from let's say the year 2015?

And how would I do a range query for posts since 01.01.2014-31.12.2015?

I would assume that I need to iterate over results, check if post.Id.Time() is between 01.01.2014 and 31.12.2015 and if it is add it to a posts slice.

Is there a less complicated way to search for posts made between certain ranges or at a certain date using the mgo driver?

If there isn't I will accept No as an answer. If there is I will accept and answer that shows how, with code example.

I have found this post on Stackoverflow:1

However I don't know how this would apply to a bson.ObjectId since they type isn't time.Time but bson.ObjectId.
","['Ok,', 'say', 'you', 'have', 'a', 'number', 'of', 'posts', 'type', 'Post', 'struct', '{', 'Id', 'bson', '.', 'ObjectId', 'bson', ':', '""_id,omitempty""', '}', 'and', 'each', 'post', 'of', 'course', 'has', 'a', 'unique', 'id', 'that', 'was', 'created', 'at', 'a', 'certain', 'time.', 'I', 'can', 'get', 'the', 'time', 'value', 'with', 'post.Id.Time().', 'However', 'how', 'do', 'I', 'query', 'for', 'posts', 'from', ""let's"", 'say', 'the', 'year', '2015?', 'And', 'how', 'would', 'I', 'do', 'a', 'range', 'query', 'for', 'posts', 'since', '01.01.2014-31.12.2015?', 'I', 'would', 'assume', 'that', 'I', 'need', 'to', 'iterate', 'over', 'results,', 'check', 'if', 'post.Id.Time()', 'is', 'between', '01.01.2014', 'and', '31.12.2015', 'and', 'if', 'it', 'is', 'add', 'it', 'to', 'a', 'posts', 'slice.', 'Is', 'there', 'a', 'less', 'complicated', 'way', 'to', 'search', 'for', 'posts', 'made', 'between', 'certain', 'ranges', 'or', 'at', 'a', 'certain', 'date', 'using', 'the', 'mgo', 'driver?', 'If', 'there', ""isn't"", 'I', 'will', 'accept', 'No', 'as', 'an', 'answer.', 'If', 'there', 'is', 'I', 'will', 'accept', 'and', 'answer', 'that', 'shows', 'how,', 'with', 'code', 'example.', 'I', 'have', 'found', 'this', 'post', 'on', 'Stackoverflow:1', 'However', 'I', ""don't"", 'know', 'how', 'this', 'would', 'apply', 'to', 'a', 'bson.ObjectId', 'since', 'they', 'type', ""isn't"", 'time.Time', 'but', 'bson.ObjectId.']"
1439,31567734,"

... but can't find a way for package name (package name can be different from directory name).
","['For', 'logging', 'purpose', 'I', 'want', 'to', 'write', 'a', 'function', 'which', 'will', 'print', 'a', 'package', 'name.', 'I', 'can', 'do', 'it', 'for', 'a', 'directory', 'name:', '//', 'file', 'is', 'the', 'full', 'file', 'name', '//', '4', '-', 'how', 'many', 'calls', 'we', 'want', 'to', 'go', 'up', 'in', 'a', 'stack', 'trace.', '_', ',', 'file', ',', 'line', ',', 'ok', ':=', 'runtime.Caller(4)', '...', 'but', ""can't"", 'find', 'a', 'way', 'for', 'package', 'name', '(package', 'name', 'can', 'be', 'different', 'from', 'directory', 'name).']"
1440,31689929,"

I use vim-go, but I don't like it auto build executable file when save a go source file. How to forbidden it?
","['I', 'use', 'vim-go,', 'but', 'I', ""don't"", 'like', 'it', 'auto', 'build', 'executable', 'file', 'when', 'save', 'a', 'go', 'source', 'file.', 'How', 'to', 'forbidden', 'it?']"
1441,31691193,"

What am I doing wrong if the typecast converts interface{} to the underlying type?
","['The', 'scenario', 'is', 'to', 'pass', 'similar', 'structs', 'with', 'common', 'fields', 'and', 'set', 'those', 'to', 'values', 'passed', 'as', 'params:', 'package', 'main', 'type', 'A', 'struct', '{', 'Status', 'int', '}', 'type', 'B', 'struct', '{', 'id', 'string', 'Status', 'int', '}', '//', ""It's"", 'okay', 'to', 'pass', 'by', 'value', 'because', 'content', 'is', 'only', 'used', 'inside', 'this', 'func', 'foo', '(', 'v', 'interface', '{},', 'status', 'int', ')', '{', 'switch', 't', ':=', 'v', '.(', 'type', ')', '{', 'case', 'A', ',', 'B', ':', 't', '.', 'Status', '=', 'status', '// ERROR :-(', '}', '}', 'func', 'main', '()', '{', 'a', ':=', 'A', '{}', 'foo', '(', 'a', ',', '0', ')', 'b', ':=', 'B', '{}', 'b', '.', 'id', '=', '""x""', 'foo', '(', 'b', ',', '1', ')', '}', 'To', 'my', 'dismay,', 'I', 'am', 'getting', 'this', 'error:', 'test', 'go', 'run', 'test', '.', 'go', 'command', '-', 'line', '-', 'arguments', './', 'test', '.', 'go', ':', '15', ':', 't', '.', 'Status', 'undefined', '(', 'type', 'interface', '{}', 'has', 'no', 'field', 'or', 'method', 'Status', ')', 'What', 'am', 'I', 'doing', 'wrong', 'if', 'the', 'typecast', 'converts', 'interface{}', 'to', 'the', 'underlying', 'type?']"
1442,31776584,". Does the string slice somehow get smartly reinterpreted as a stringsLongestFirst type, or do I have to count with some copying overhead ? 

(edited : removed the excerpt from the specification, that was ill-suited to the case at hand)
","[""I'm"", 'just', 'getting', 'to', 'grips', 'with', 'Go', '(started', 'two', 'days', 'ago', 'and', 'wrote', 'less', 'than', '1000', 'lines),', 'and', ""I'm"", 'still', 'wondering', 'about', 'some', 'idioms.', 'I', 'needed', 'to', 'sort', 'a', 'slice', 'of', 'strings', 'by', 'descending', 'length.', 'I', 'did', 'like', 'so', ':', 'func', '...', '{', '...', 'do', 'business', '...', 'sort.Sort(stringsLongestFirst(severalThousandStrings))', '...', 'carry', 'on', 'and', 'be', 'happy', ',', 'because', 'it', 'works', '...', '}', 'type', 'stringsLongestFirst', '[]', 'string', 'func', '(', 'b', 'stringsLongestFirst', ')', 'Len', '()', 'int', '{', 'return', 'len', '(', 'b', ')', '}', 'func', '(', 'b', 'stringsLongestFirst', ')', 'Less', '(', 'i', ',', 'j', 'int', ')', 'bool', '{', 'return', 'len', '(', 'b', '[', 'i', '])', '>', 'len', '(', 'b', '[', 'j', '])', '}', 'func', '(', 'b', 'stringsLongestFirst', ')', 'Swap', '(', 'i', ',', 'j', 'int', ')', '{', 'b', '[', 'j', '],', 'b', '[', 'i', ']', '=', 'b', '[', 'i', '],', 'b', '[', 'j', ']', '}', 'First', 'of', 'all', 'I', 'wonder', 'if', 'this', 'is', 'the', 'most', 'idiomatic', 'way', 'to', 'do', 'it.', 'And', 'then,', 'most', 'of', 'all,', 'I', 'wonder', 'about', 'what', 'happens', 'under', 'the', 'hood', 'when', 'I', 'write', 'stringsLongestFirst', '(', 'severalThousandStrings', ')', '.', 'Does', 'the', 'string', 'slice', 'somehow', 'get', 'smartly', 'reinterpreted', 'as', 'a', 'stringsLongestFirst', 'type,', 'or', 'do', 'I', 'have', 'to', 'count', 'with', 'some', 'copying', 'overhead', '?', '(edited', ':', 'removed', 'the', 'excerpt', 'from', 'the', 'specification,', 'that', 'was', 'ill-suited', 'to', 'the', 'case', 'at', 'hand)']"
1443,31788886,"

Is there a way to append to a byte array a new line character? Right now I cast via string(body), and I have a feeling that that operation allocates a lot of memory (I may be wrong).
","[""I'm"", 'trying', 'to', 'marshal', 'an', 'golang', 'array', 'into', 'a', 'string', 'with', 'each', 'element', 'added', 'separated', 'by', 'newline,', 'yet', ""I'm"", 'running', 'out', 'of', 'memory', 'and', 'was', 'trying', 'to', 'think', 'of', 'a', 'more', 'efficient', 'way', 'of', 'doing', 'things.', 'buffer', ':=', '""""', 'for', '_', ',', 'record', ':=', 'range', 'all_data', '{', 'body', ',', '_', ':=', 'json.Marshal(record)', 'buffer', '+=', 'string', '(', 'body', ')', '+', '""\\n""', '// i run out of memory here', 'Is', 'there', 'a', 'way', 'to', 'append', 'to', 'a', 'byte', 'array', 'a', 'new', 'line', 'character?', 'Right', 'now', 'I', 'cast', 'via', 'string(body),', 'and', 'I', 'have', 'a', 'feeling', 'that', 'that', 'operation', 'allocates', 'a', 'lot', 'of', 'memory', '(I', 'may', 'be', 'wrong).']"
1444,31794172,"I try to connect to SQL server in golang, I searched in internet and through this address: https://github.com/denisenkom/go-mssqldb I understood that first I need to install a package for the purpose, but when I want to install this package through git terminal by entering this command:

$ go get github.com/denisenkom/go-mssqldb

I receive this error :

can't load package: package github.com/denisenkom/go-mssqldb: no buildable go source files in C:\Go\src\github.com\dnisenkom\go-mssqldb

my $GOPATH is already set.I don't know how to fix this problem ...
","['I', 'try', 'to', 'connect', 'to', 'SQL', 'server', 'in', 'golang,', 'I', 'searched', 'in', 'internet', 'and', 'through', 'this', 'address:', 'https://github.com/denisenkom/go-mssqldb', 'I', 'understood', 'that', 'first', 'I', 'need', 'to', 'install', 'a', 'package', 'for', 'the', 'purpose,', 'but', 'when', 'I', 'want', 'to', 'install', 'this', 'package', 'through', 'git', 'terminal', 'by', 'entering', 'this', 'command:', '$', 'go', 'get', 'github.com/denisenkom/go-mssqldb', 'I', 'receive', 'this', 'error', ':', ""can't"", 'load', 'package:', 'package', 'github.com/denisenkom/go-mssqldb:', 'no', 'buildable', 'go', 'source', 'files', 'in', 'C:\\Go\\src\\github.com\\dnisenkom\\go-mssqldb', 'my', '$GOPATH', 'is', 'already', 'set.I', ""don't"", 'know', 'how', 'to', 'fix', 'this', 'problem', '...']"
1445,31967057,"?
","['So', 'I', 'have', 'an', 'interface,', 'called', 'UserService', 'inside', 'a', 'package', 'service', 'I', 'have', 'two', 'simple', 'structs', 'representing', 'the', 'body', 'and', 'response', 'of', 'a', 'HTTP', 'call.', 'I', 'have', 'another', 'struct', 'implementing', 'the', 'UserService', 'interface.', 'I', 'want', 'to', 'put', 'these', 'structs,', 'call', 'them', 'UserResponse', 'and', 'UserRequest', 'inside', 'the', 'interface', 'so', 'other', 'services', 'can', 'use', 'them', 'to', 'make', 'the', 'HTTP', 'call.', 'Furthermore,', 'the', 'request', 'and', 'response', 'should', 'be', 'available', '(struct', 'UserReponse,', 'not', 'struct', 'userResponse)', 'so', 'other', 'parts', 'of', 'the', 'code', 'can', 'use', 'them.', 'I', 'define', 'a', 'function', 'in', 'the', 'interface', 'called', 'GetUser', '(', 'request', 'UserRequest', ')', 'UserResponse', 'However,', 'whenever', 'I', 'reference', 'UserRequest', 'I', 'have', 'to', 'use', 'service.UserRequest', 'and', 'not', 'service', '.', 'UserService', '.', 'UserRequest', '.', 'This', 'is', 'bad', 'because', 'I', ""don't"", 'want', 'user-related', 'objects', 'to', 'go', 'into', 'the', 'service', 'namespace.', 'I', 'want', 'each', 'service', 'related', 'data', 'to', 'organized', 'under', 'its', 'own', 'interface,', 'file,', 'etc.', 'Unfortunately,', 'I', 'get', 'an', 'error', 'if', 'I', 'put', 'UserResponse', 'inside', 'the', 'UserService', 'interface.', 'So', 'I', 'put', 'it', 'at', 'the', 'same', 'level', 'as', 'UserService,', 'which', 'is', 'why', 'they', 'are', 'showing', 'up', 'as', 'service.UserResponse.', 'How', 'do', 'I', 'go', 'about', 'accessing', 'UserResponse', 'as', 'service', '.', 'UserService', '.', 'UserResponse', '?']"
1446,31987018,"
","['This', 'is', 'my', 'first', 'attempt', 'at', 'Go', 'and', 'I', 'feel', ""I'm"", 'missing', 'something', 'important', 'here.', 'Trying', 'to', 'decode', 'a', 'JSON', 'message', 'from', 'a', 'webservice', 'but', 'the', 'output', ""I'm"", 'getting', 'is:', '{response:{requests:[]}}', 'All', ""I'm"", 'really', 'interested', 'in', 'is', 'the', 'data', 'within', 'the', 'request', 'node.', 'My', 'for-loop', 'obviously', ""isn't"", 'getting', 'called', 'because', 'the', 'array', 'is', 'empty.', 'I', 'feel', 'like', 'my', 'structs', 'need', 'to', 'be', 'declared', 'exactly', 'as', 'they', 'appear', 'in', 'the', 'webservice?', 'Sample', 'JSON:', '{', '""response""', ':', '{', '""requests""', ':', '[', '{', '""request""', ':', '{}', '},', '{', '""request""', ':', '{', '""id""', ':', '589748', ',', '""image_thumbnail""', ':', '""""', ',', '""description""', ':', '""Blah blah""', ',', '""status""', ':', '""received""', ',', '""user""', ':', '""test""', '}', '}', '],', '""count""', ':', '""50""', ',', '""benchmark""', ':', '0', '.', '95516896247864', ',', '""status""', ':', '{},', '""debug""', ':', '{}', '}', '}', 'type', 'Request', 'struct', '{', 'id', 'int', 'json', ':', '""id""', 'description', 'string', 'json', ':', '""description""', 'user', 'string', 'json', ':', '""user""', '}', 'type', 'Requests', 'struct', '{', 'request', 'Request', 'json', ':', '""request""', '}', 'type', 'Response', 'struct', '{', 'requests', '[]', 'Requests', 'json', ':', '""requests""', '}', 'type', 'RootObject', 'struct', '{', 'response', 'Response', 'json', ':', '""response""', '}', 'url', ':=', '""""', 'req', ',', 'err', ':=', 'http.NewRequest(""GET"", url, nil)', 'req', '.', 'Header.Set(""Content-Type"", ""application/json"")', 'client', ':=', '&', 'http', '.', 'Client', '{}', 'resp', ',', 'err', ':=', 'client.Do(req)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'defer', 'resp', '.', 'Body.Close()', 'var', 'r', 'RootObject', 'decoder', ':=', 'json.NewDecoder(resp.Body)', 'decoder.Decode(&r)', 'fmt.Printf(""%+v"", r)', 'for', '_', ',', 'req', ':=', 'range', 'r', '.', 'response', '.', 'requests', '{', 'fmt.Printf(""%d = %s\\n"", req.request.id, req.request.user)', '}']"
1447,32033369,"

so that DBController can be used with several revel apps? Thank you very much.
","['I', 'am', 'trying', 'to', 'use', 'a', 'shared', 'controller', 'from', 'a', 'module', 'in', 'my', 'app,', 'but', ""I'm"", 'not', 'really', 'sure', 'how', 'to', 'do', 'it.', ""Here's"", 'what', 'I', 'want', 'to', 'do:', 'I', 'have', 'two', 'revel', 'apps,', 'a', 'frontend', 'and', 'backend', 'app.', 'The', 'frontend', 'app', 'is', 'used', 'to', 'show', 'the', 'user-facing', 'site,', 'and', 'the', 'backend', 'app', 'is', 'for', 'admin', 'stuffs.', 'I', 'created', 'a', 'special', 'controller', 'to', 'connect', 'to', 'database', 'as', 'per', 'the', 'booking', 'sample.', 'I', 'want', 'both', 'the', 'frontend', 'and', 'backend', 'app', 'to', 'use', 'the', 'same', 'controller,', 'to', 'minimize', 'redundancy.', 'From', 'the', 'sample,', 'when', 'you', 'want', 'to', 'have', 'one', 'controller', 'database,', 'it', 'roughly', 'translate', 'to', 'this:', 'type', 'DBController', '{', '*', 'revel', '.', 'Controller', '}', 'type', 'App', '{', 'DBController', '}', 'This', 'works', 'when', 'I', 'want', 'to', 'have', 'only', '1', 'app,', 'but', 'when', 'I', 'want', 'to', 'share', 'the', 'controller', 'to', 'another', 'app,', 'I', ""can't"", 'import', 'DBController', 'to', 'the', 'app.', 'Things', ""I've"", 'Tried', 'I', 'tried', 'moving', 'DBController', 'to', 'its', 'own', 'package,', 'and', 'then', 'importing', 'that', 'and', 'inherit', 'from', 'it', 'directly:', '//', 'in', 'db.go', 'package', 'controllers', '//', 'import', 'and', 'stuffs', 'type', 'DBController', '{', '*', 'revel', '.', 'Controller', '}', '//', 'in', 'app.go', 'package', 'controllers', 'import', '(', 'dbc', '""site.com/modules/controllers""', ')', 'type', 'App', 'struct', '{', 'dbc', '.', 'DBController', '//', '*dbc.DBController', '}', 'This', 'gives', 'me', 'a', 'panic', 'error', 'stating', 'that', 'the', 'route', 'is', 'not', 'found:', 'panic', ':', 'Route', 'validation', 'error', '(', 'in', '/app/path/routes:7):', 'revel/controller:', 'failed', 'to', 'find', 'controller', 'App', 'in', 'both', 'inheriting', 'with', 'and', 'without', 'pointer.', ""I've"", 'also', 'tried', ""Revel's"", 'module,', 'with', 'the', 'same', 'code,', 'but', 'different', 'directory', 'and', 'importing', 'via', 'config:', '//', 'app.conf', 'modules', '.', 'dbcontroller', '=', 'site', '.', 'com/modules/dbcontroller', 'And', 'then', 'in', 'app.go:', 'type', 'App', 'struct', '{', 'DBController', '}', 'But', 'it', 'still', ""didn't"", 'work', 'with', 'the', 'same', 'error', 'as', 'before.', ""I'm"", 'pretty', 'convinced', 'that', 'the', 'right', 'route', 'is', 'by', 'using', 'module,', 'since', 'the', 'documentation', 'said', '(emphasis', 'mine):', 'Modules', 'are', 'packages', 'that', 'can', 'be', 'plugged', 'into', 'an', 'application.', 'They', 'allow', 'sharing', 'of', 'controllers,', 'views,', 'assets,', 'and', 'other', 'code', 'between', 'multiple', 'Revel', 'applications', 'or', 'from', 'third-party', 'sources.', 'A', 'module', 'should', 'have', 'the', 'same', 'layout', 'as', 'a', 'Revel', 'application’s', 'layout.', 'The', '“hosting”', 'application', 'will', 'merge', 'it', 'in', 'as', 'follows:', 'Any', 'templates', 'in', 'module/app/views', 'will', 'be', 'added', 'to', 'the', 'Template', 'Loader', 'search', 'path', 'Any', 'controllers', 'in', 'module/app/controllers', 'will', 'be', 'treated', 'as', 'if', 'they', 'were', 'in', 'your', 'application.', 'etc..', 'But', ""I'm"", 'not', 'sure', 'how', 'I', 'can', 'share', 'and', 'derive', 'my', 'controller', 'from', 'here.', 'TL;', 'DR', 'How', 'do', 'I', 'share', 'controller', 'in', 'Revel', 'so', 'that', 'I', 'can', 'inherit', 'a', 'controller', 'from', 'other', 'module,', 'roughly', 'like:', 'import', 'dbc', '""site.com/modules/dbcontroller""', 'type', 'App', 'struct', '{', 'dbc', '.', 'DBController', '}', 'so', 'that', 'DBController', 'can', 'be', 'used', 'with', 'several', 'revel', 'apps?', 'Thank', 'you', 'very', 'much.']"
1448,32066978,"

http://play.golang.org/p/Tdamoxi3bE

But it does not have weekday in it and i couldn't find any format to get from time.Format.
Is there any way to get the desired result from time.Format() or any other go 
api.
","['I', 'have', 'a', 'PHP', 'API', 'that', 'takes', 'time', 'in', 'format', 'of', 'YYYYMMWDDHHMMSS.', 'Here', 'W', 'is', 'weekday(Sunday=0,', 'Monday', '=', '1', '...).', 'I', 'am', 'trying', 'to', 'generate', 'the', 'it', 'like', 'following:', 'package', 'main', 'import', '""fmt""', 'import', '""time""', 'func', 'main', '()', '{', 'fmt.Println(""Hello, playground"")', 't', ':=', 'time.Now()', 'time', ':=', 't.Format(""20060102030405"")', 'fmt.Println(time)', '}', 'http://play.golang.org/p/Tdamoxi3bE', 'But', 'it', 'does', 'not', 'have', 'weekday', 'in', 'it', 'and', 'i', ""couldn't"", 'find', 'any', 'format', 'to', 'get', 'from', 'time.Format.', 'Is', 'there', 'any', 'way', 'to', 'get', 'the', 'desired', 'result', 'from', 'time.Format()', 'or', 'any', 'other', 'go', 'api.']"
1449,32114128,"
","['Go', 'v', '1.5.', '1)', 'Compile', 'the', 'package', 'worker:', 'go', 'build', '-', 'buildmode', '=', 'shared', '-', 'linkshared', '2)', 'Install', 'this', 'package', '3)', 'Try', 'to', 'compile', 'another', 'package,', 'which', 'imports', 'worker:', 'go', 'build', '-', 'linkshared', 'go', '/pkg/tool/linux_amd64/link:', 'running', 'gcc', 'failed', ':', 'exit', 'status', '1', 'gcc', ':', 'error', ':', 'missing', 'argument', 'to', '-', 'l', 'The', 'same', 'command', 'with', ""'-x"", ""--compiler=gccgo'"", 'option', 'produces', 'the', 'following:', '/usr/bin/gccgo -o $WORK/godev/testgo/_obj/exe/a.out $WORK/godev/testgo/_obj/_go_.o -Wl,-( -m64 -Wl,-) -L/home/user/dev/godev/pkg/gccgo_linux_amd64_fPIC/shlibs -Wl,-rpath=/home/user/dev/godev/pkg/gccgo_linux_amd64_fPIC/shlibs', '-', 'l', '-', 'Wl', ',-', 'E', '-', 'fPIC']"
1450,32180434,"Till Go 1.4.2 when i run go install after running go build, i could find binary file in my current folder. Hence following Linux command was working


  $ go build && go install && ./executable


But after installing go 1.5, when i run same command i get,


  -bash: ./executable: No such file or directory


and when i checked, there is no executable to find. Did go install behavior changed in Go 1.5?
","['Till', 'Go', '1.4.2', 'when', 'i', 'run', 'go', 'install', 'after', 'running', 'go', 'build,', 'i', 'could', 'find', 'binary', 'file', 'in', 'my', 'current', 'folder.', 'Hence', 'following', 'Linux', 'command', 'was', 'working', '$', 'go', 'build', '&&', 'go', 'install', '&&', './executable', 'But', 'after', 'installing', 'go', '1.5,', 'when', 'i', 'run', 'same', 'command', 'i', 'get,', '-bash:', './executable:', 'No', 'such', 'file', 'or', 'directory', 'and', 'when', 'i', 'checked,', 'there', 'is', 'no', 'executable', 'to', 'find.', 'Did', 'go', 'install', 'behavior', 'changed', 'in', 'Go', '1.5?']"
1451,32215509,"Ever since Go 1.5 came out, I started taking another look at how I could integrate it into an existing project of mine.

The project's codebase is written entirely in C for low level access to to hardware and other fun stuff. However, some of the higher level things are tedious, and I would like to start writing them in a higher level language (Go)

Is there any way I can call Go code from a C program? I installed Go 1.5, which added -buildmode=c-archive (https://golang.org/s/execmodes) which I am trying to get working.

However, I can't seem to get Go to generate the appropriate header files to allow my project to actually compile. When I generate the archive, I see the function in the exported symbols (using objdump), but without the header files to include gcc complains about the function not existing (as expected)

I'm quite new to Go - however, I love the language and would like to make use of it. Is there any idiomatic way (""idiomatic"" gets used a lot in the world of Go I see...) to get this to play nicely with each other?

The reason I asked this question and specifically mentioned Go 1.5 is that according to this document, https://docs.google.com/document/d/1nr-TQHw_er6GOQRsF6T43GGhFDelrAP0NqSS_00RgZQ/edit?pli=1#heading=h.1gw5ytjfcoke
Go 1.5 added support for non-Go programs to call Go code. Specifically, mentioned under the section ""Go code linked into, and called from, a non-Go program""
",[]
1452,32216985,"

I need to be able to access the individual Y, Cb and Cr colors, but when I try img.At(x, y).Cb or img.At(x, y)['Y'] or even img.At(x, y)[0], I get various compile-time errors telling me that color.Color doesn't have those methods or doesn't support indexing.
","[""I'm"", 'iterating', 'over', 'an', ""image's"", 'pixels', 'trying', 'to', 'get', 'the', 'individual', 'color', 'values', 'and', 'average', 'them', 'out.', 'When', 'I', 'do', 'this:', 'bounds', ':=', 'img.Bounds()', 'for', 'y', ':=', 'bounds', '.', 'Min', '.', 'Y', ';', 'y', '<', 'bounds', '.', 'Max', '.', 'Y', ';', 'y', '++', '{', 'for', 'x', ':=', 'bounds', '.', 'Min', '.', 'X', ';', 'x', '<', 'bounds', '.', 'Max', '.', 'X', ';', 'x', '++', '{', 'fmt.Println(reflect.TypeOf(img.At(x, y)))', '}', '}', 'I', 'get', 'color.YCbCr', 'a', 'billion', 'times.', 'If', 'I', 'print', 'it', 'without', 'reflect.TypeOf,', 'I', 'get', 'a', 'result', 'like', 'this:', '{', '154', '135', '124', '}', '{', '153', '135', '124', '}', '{', '152', '135', '124', '}', '{', '152', '135', '124', '}', '{', '151', '135', '124', '}', '{', '149', '135', '124', '}', '{', '147', '135', '124', '}', 'I', 'need', 'to', 'be', 'able', 'to', 'access', 'the', 'individual', 'Y,', 'Cb', 'and', 'Cr', 'colors,', 'but', 'when', 'I', 'try', 'img.At(x,', 'y).Cb', 'or', 'img.At(x,', ""y)['Y']"", 'or', 'even', 'img.At(x,', 'y)[0],', 'I', 'get', 'various', 'compile-time', 'errors', 'telling', 'me', 'that', 'color.Color', ""doesn't"", 'have', 'those', 'methods', 'or', ""doesn't"", 'support', 'indexing.']"
1453,32250277,"

Well, with no success...

So any help is appreciated! Thanks in advance!
","['I', 'declared', 'a', 'type', 'like', 'this', 'type', 'Klabel', 'struct', '{', 'values', '[]', 'float64', 'label', 'string', '}', 'Then,', 'I', 'created', 'a', 'slice', 'of', 'this', 'type', 'like', 'this', 'kdata', ':=', '[]Klabel', 'How', 'can', 'I', 'set', 'the', 'label', 'variable', 'or', 'append', 'a', 'slice', 'of', 'floats', 'to', 'values?', 'I', 'tried', 'kdata', '[', '0', '].', 'label', '=', '""test""', 'and', 'kdata', ':=', 'make', '([]', 'Klabel', ',', '10', ')', 'kdata', '[', '0', '].', 'label', '=', '""test""', 'and', 'kdata', '=', 'append', '(', 'kdata', '[', '0', '],', 'kdata', '[', '0', '].', 'label', '=', '""test""', ')', 'Well,', 'with', 'no', 'success...', 'So', 'any', 'help', 'is', 'appreciated!', 'Thanks', 'in', 'advance!']"
1454,32253768,"
","['Example:', 'type', 'MyString', 'string', 'var', 's', '=', '""very long string""', 'var', 'ms', '=', 'MyString', '(', 's', ')', 'var', 's2', '=', 'string', '(', 's', ')', 'Are', 'ms', 'or', 's2', 'a', 'full', 'copy', 'of', 's', '(as', 'it', 'would', 'be', 'done', 'with', '[]byte(s))?', 'Or', 'they', 'are', 'just', 'a', 'string', 'struct', 'copies', '(which', 'keeps', 'the', 'real', 'value', 'in', 'a', 'pointer)?', 'What', 'if', 'we', 'are', 'passing', 'this', 'to', 'a', 'function?', 'Eg:', 'func', 'foo', '(', 's', 'MyString', '){', '...', '}', 'foo', '(', 'ms', '(', 's', '))', '// do we copy s here?']"
1455,32273218,"

In my actual program, each ""foo"" function is doing filtering and a bunch of heavy string regexp stuff.  And I need the ""bar"" function, because it has the job of reordering based on a timestamp, and serializing printing, so output doesn't get interlaced.
","['Here', 'is', 'a', 'small', 'example', 'program', 'with', 'the', 'basic', 'architecture/flow', 'that', 'I', 'am', 'trying', 'to', 'get', 'working.', 'How', 'do', 'I', 'get', 'all', 'the', 'numbers', 'and', '""end""', 'messages', 'to', 'print', 'out?', 'I', 'have', 'tried', 'putting', 'close', 'statements', 'here', 'and', 'there,', 'but', 'it', 'either', ""doesn't"", 'work,', 'or', 'I', 'get', 'panics', 'about', 'trying', 'to', 'close', 'an', 'already', 'closed', 'channel...', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 'd', ':=', 'make', '(', 'chan', 'uint', ')', 'go', 'bar', '(', 'd', ')', 'c1', ':=', 'make', '(', 'chan', 'uint', ')', 'c2', ':=', 'make', '(', 'chan', 'uint', ')', 'c3', ':=', 'make', '(', 'chan', 'uint', ')', 'go', 'foo', '(', 'c1', ',', 'd', ')', 'go', 'foo', '(', 'c2', ',', 'd', ')', 'go', 'foo', '(', 'c3', ',', 'd', ')', 'c1', '<-', '1', 'c2', '<-', '2', 'c3', '<-', '3', 'c1', '<-', '4', 'c2', '<-', '5', 'c3', '<-', '6', 'c1', '<-', '7', 'c2', '<-', '8', 'c3', '<-', '9', '}', 'func', 'foo', '(', 'c', 'chan', 'uint', ',', 'd', 'chan', 'uint', ')', '{', 'fmt.Println(""foo start"")', 'for', 'stuff', ':=', 'range', 'c', '{', 'time.Sleep(1)', 'd', '<-', 'stuff', '*', '2', '}', 'fmt.Println(""foo end"")', '}', 'func', 'bar', '(', 'd', 'chan', 'uint', ')', '{', 'fmt.Println(""bar start"")', 'for', 'stuff', ':=', 'range', 'd', '{', 'fmt.Printf(""bar received %d\\n"", stuff)', '}', 'fmt.Println(""bar end"")', '}', 'The', 'output', 'I', 'am', 'getting', 'looks', 'like', 'this.', 'Notice', 'the', 'last', 'set', 'of', 'numbers', 'and', 'the', '""end""', 'outputs', 'are', 'missing.', 'foo', 'start', 'bar', 'start', 'foo', 'start', 'foo', 'start', 'bar', 'received', '6', 'bar', 'received', '2', 'bar', 'received', '4', 'bar', 'received', '12', 'bar', 'received', '8', 'bar', 'received', '10', 'In', 'my', 'actual', 'program,', 'each', '""foo""', 'function', 'is', 'doing', 'filtering', 'and', 'a', 'bunch', 'of', 'heavy', 'string', 'regexp', 'stuff.', 'And', 'I', 'need', 'the', '""bar""', 'function,', 'because', 'it', 'has', 'the', 'job', 'of', 'reordering', 'based', 'on', 'a', 'timestamp,', 'and', 'serializing', 'printing,', 'so', 'output', ""doesn't"", 'get', 'interlaced.']"
1456,32322013,"

Or if there is a better way to do all this let me know that as well. Pretty new to Go and I have Java conventions carved into my brain. 
","['I', 'am', 'writing', 'a', 'function', 'that', 'parses', 'a', 'config', 'JSON', 'file', 'and', 'using', 'json.Unmarshal', 'stores', 'its', 'data', 'in', 'a', 'struct.', ""I've"", 'done', 'some', 'research', 'and', ""it's"", 'gotten', 'me', 'the', 'point', 'where', 'I', 'have', 'a', 'Config', 'struct', 'and', 'a', 'Server_Config', 'struct', 'as', 'a', 'field', 'in', 'config', 'to', 'allow', 'me', 'to', 'add', 'more', 'fields', 'as', 'I', 'want', 'different', 'config-like', 'structs.', 'How', 'can', 'I', 'write', 'one', 'parseJSON', 'function', 'to', 'work', 'for', 'different', 'types', 'of', 'structs?', 'Code:', 'Server.go', 'type', 'Server_Config', 'struct', '{', 'html_templates', 'string', '}', 'type', 'Config', 'struct', '{', 'Server_Config', '}', 'func', 'main', '()', '{', 'config', ':=', 'Config', '{}', 'ParseJSON', '(', '""server_config.json""', ',', '&', 'config', ')', 'fmt.Printf(""%T\\n"", config.html_templates)', 'fmt.Printf(config.html_templates)', '}', 'config.go', 'package', 'main', 'import', '(', '""encoding/json""', '""io/ioutil""', '""log""', ')', 'func', 'ParseJSON', '(', 'file', 'string', ',', 'config', 'Config', ')', '{', 'configFile', ',', 'err', ':=', 'ioutil.ReadFile(file)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'err', '=', 'json.Unmarshal(configFile, &config)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', '}', 'Or', 'if', 'there', 'is', 'a', 'better', 'way', 'to', 'do', 'all', 'this', 'let', 'me', 'know', 'that', 'as', 'well.', 'Pretty', 'new', 'to', 'Go', 'and', 'I', 'have', 'Java', 'conventions', 'carved', 'into', 'my', 'brain.']"
1457,32330631,"

Here, -IP, -db, -wv, -wc these four are flags and others are passing as normal argument as I know.

Number of flags can be variable.

How can I know how many flags are passed to my program. In this case 4 flags are passed.
","[""I'm"", 'passing', 'argument', 'from', 'console.', 'There', 'are', 'some', 'flags', 'too.', 'Like:', 'go', 'run', 'test', '.', 'go', '""-IP=10.10.10.10""', '""-db=kite""', '""-wv=45""', '""-cv=75""', '""A = value1""', '""B = value2""', '""C = 100""', '""D := ((A-B)/A)*C""', '""D ?""', 'Here,', '-IP,', '-db,', '-wv,', '-wc', 'these', 'four', 'are', 'flags', 'and', 'others', 'are', 'passing', 'as', 'normal', 'argument', 'as', 'I', 'know.', 'Number', 'of', 'flags', 'can', 'be', 'variable.', 'How', 'can', 'I', 'know', 'how', 'many', 'flags', 'are', 'passed', 'to', 'my', 'program.', 'In', 'this', 'case', '4', 'flags', 'are', 'passed.']"
1458,32345760,"

Play: https://play.golang.org/p/waOGBZZwN7
","[""I'm"", 'new', 'to', 'Go', 'and', 'I', 'would', 'like', 'to', 'understand', 'why', 'the', 'code', 'snippet', 'below', 'does', 'not', 'compile.', 'What', 'is', 'the', 'Go', 'way', 'of', 'accepting', 'a', 'function', 'as', 'a', 'function', 'argument', 'that', 'may', 'have', 'any', 'return', 'type?', 'Thanks!', 'package', 'main', 'func', 'main', '()', '{', 'test', '(', 'a', ')', '// Error: cannot use a (type func() string) as type func() interface {} in argument to test', 'test', '(', 'b', ')', '// Error: cannot use b (type func() int) as type func() interface {} in argument to test', '}', 'func', 'a', '()', 'string', '{', 'return', '""hello""', '}', 'func', 'b', '()', 'int', '{', 'return', '1', '}', 'func', 'test', '(', 'x', 'func', '()', 'interface', '{})', '{', '//', 'some', 'code...', 'v', ':=', 'x', '()', '//', 'some', 'more', 'code....', '}', 'Play:', 'https://play.golang.org/p/CqbuEZGy12', 'My', 'solution', 'based', 'on', ""Volker's"", 'answer:', 'package', 'main', 'import', '(', '""fmt""', ')', 'func', 'main', '()', '{', '//', 'Wrap', 'function', 'a', 'and', 'b', 'with', 'an', 'anonymous', 'function', '//', 'that', 'has', 'an', 'empty', 'interface', 'return', 'type.', 'With', 'this', '//', 'anonymous', 'function,', 'the', 'call', 'signature', 'of', 'test', '//', 'can', 'be', 'satisfied', 'without', 'needing', 'to', 'modify', 'the', 'return', '//', 'type', 'of', 'function', 'a', 'and', 'b.', 'test', '(', 'func', '()', 'interface', '{}', '{', 'return', 'a', '()', '})', 'test', '(', 'func', '()', 'interface', '{}', '{', 'return', 'b', '()', '})', '}', 'func', 'a', '()', 'string', '{', 'return', '""hello""', '}', 'func', 'b', '()', 'int', '{', 'return', '1', '}', 'func', 'test', '(', 'x', 'func', '()', 'interface', '{})', '{', 'v', ':=', 'x', '()', 'fmt.Println(v)', '}', 'Play:', 'https://play.golang.org/p/waOGBZZwN7']"
1459,32416778,"



Here is my setup, which works great when building and running .go files:



How can I fix?

Thanks

Thanks
","['I', 'am', 'using', 'Mac', 'OS', 'X', 'version', 'X27.2.1of', 'liteIDE.', 'I', 'am', 'able', 'to', 'build', 'and', 'run', '.go', 'files', 'fine', 'however', 'when', 'I', 'try', 'to', 'run', 'code', 'in', 'the', 'playground,', 'I', 'get', 'the', 'error:', '""Error: Process failed to start""', 'Here', 'is', 'my', 'setup,', 'which', 'works', 'great', 'when', 'building', 'and', 'running', '.go', 'files:', 'How', 'can', 'I', 'fix?', 'Thanks', 'Thanks']"
1460,32486252,"

If I open a terminal and cd to the project's location and do a go build it works just fine.  My go env seems to work just fine outside of liteide.
","[""I've"", 'set', 'up', 'go', '(golang)', 'on', 'my', 'Linux', 'Mint', '(Ubuntu)', 'box', 'using', 'gvm', '(Go', 'Version', 'Manager).', ""I've"", 'started', 'a', 'project,', 'but', 'I', ""can't"", 'get', 'it', 'to', 'build', 'from', 'within', 'LiteIDE.', 'go', 'build', '-', 'i', '[/', 'home/username/go/src/projectname]', 'Error', ':', 'process', 'failed', 'to', 'start', '.', 'If', 'I', 'open', 'a', 'terminal', 'and', 'cd', 'to', 'the', ""project's"", 'location', 'and', 'do', 'a', 'go', 'build', 'it', 'works', 'just', 'fine.', 'My', 'go', 'env', 'seems', 'to', 'work', 'just', 'fine', 'outside', 'of', 'liteide.']"
1461,32715166,"

is CORRECT !!! I do not understand this... because it fallows that contents must be different between data which was received via server, and data form usually attachment in program.
","['I', 'have', 'strange', 'problem', 'with', 'function', 'bytes.Contains(b, subslice []byte)', 'bool', '.', 'It', ""doesn't"", 'find', 'characters', 'in', 'byte', 'array', 'which', 'was', 'received', 'in', 'function', '(', 'c', '*', 'IPConn', ')', 'Read', '(', 'b', '[]', 'byte', ')', '(', 'int', ',', 'error', ')', '.', 'Application', 'is', 'a', 'simple', 'server.', 'So', 'I', 'have', 'byte', 'array,', 'which', 'was', 'received', 'via', 'server', 'to', 'variable', 'buf', 'buf', ':=', 'make', '([]', 'byte', ',', '1024', ')', 'Len', ',', 'err', ':=', 'c', '.', 'conn.Read(buf)', '//', 'below', 'received', 'content', 'in', 'buf', '//', '{""abc"":[{""b"":5,""bca"":14,""xyz"":0}]}{""abc"":[{""b"":7,""hjk"":14,""qwe"":0}]}', 'Now', 'I', 'wanted', 'use', 'below', 'function', 'to', 'find', '}{', 'characters', 'in', 'array', 'buf', 'if', 'bytes.Contains(buf, []byte(`}{`)', '!=', 'false', '{', 'fmt.Printf(""I got you"")', '}', 'But', 'function', 'always', 'return', 'false.', 'Why', '?', 'I', 'did', 'some', 'experiment', 'in', 'my', 'program', 'as', 'below:', 'worker', ':=', '[]', 'byte', '(', '\'{""abc"":[{""b"":5,""bca"":14,""xyz"":0}]}{""abc"":[{""b"":7,""hjk"":14,""qwe"":0}]}\'', ')', '//', 'try', 'find', '}{', 'if', 'bytes.Contains(worker, []byte(`}{`)', '!=', 'false', '{', 'fmt.Printf(""I got you"")', '}', 'is', 'CORRECT', '!!!', 'I', 'do', 'not', 'understand', 'this...', 'because', 'it', 'fallows', 'that', 'contents', 'must', 'be', 'different', 'between', 'data', 'which', 'was', 'received', 'via', 'server,', 'and', 'data', 'form', 'usually', 'attachment', 'in', 'program.']"
1462,32730794,"

i didn't understand nothing in this documentation . what they mean by ( reads the next value from the input stream ) they are one data that we could send it's a struct or a map but not many .what they mean by If e is nil, the value will be discarded.  please expert explain to me i'am disasperate all day and ididn't find nothing
","['in', 'my', 'ambitions', 'to', 'understand', 'how', 'gob', 'work', '.', 'i', 'have', 'severals', 'question', '.', 'i', 'know', 'that', 'gob', 'serialize', 'a', 'go', 'type', 'like', 'struct', 'map', 'or', 'interface(we', 'must', 'register', ""it's"", 'real', 'type)', 'but', ':', 'func', '(', 'dec', '*', 'Decoder', ')', 'Decode', '(', 'e', 'interface', '{})', 'error', 'Decode', 'reads', 'the', 'next', 'value', 'from', 'the', 'input', 'stream', 'and', 'stores', 'it', 'in', 'the', 'data', 'represented', 'by', 'the', 'empty', 'interface', 'value', '.', 'If', 'e', 'is', 'nil', ',', 'the', 'value', 'will', 'be', 'discarded', '.', 'Otherwise', ',', 'the', 'value', 'underlying', 'e', 'must', 'be', 'a', 'pointer', 'to', 'the', 'correct', 'type', 'for', 'the', 'next', 'data', 'item', 'received', '.', 'If', 'the', 'input', 'is', 'at', 'EOF', ',', 'Decode', 'return', 's', 'io', '.', 'EOF', 'and', 'does', 'not', 'modify', 'e', '.', 'i', ""didn't"", 'understand', 'nothing', 'in', 'this', 'documentation', '.', 'what', 'they', 'mean', 'by', '(', 'reads', 'the', 'next', 'value', 'from', 'the', 'input', 'stream', ')', 'they', 'are', 'one', 'data', 'that', 'we', 'could', 'send', ""it's"", 'a', 'struct', 'or', 'a', 'map', 'but', 'not', 'many', '.what', 'they', 'mean', 'by', 'If', 'e', 'is', 'nil,', 'the', 'value', 'will', 'be', 'discarded.', 'please', 'expert', 'explain', 'to', 'me', ""i'am"", 'disasperate', 'all', 'day', 'and', ""ididn't"", 'find', 'nothing']"
1463,32815561,"

But when I try to print the contents of Fields, it is nil.
What am I doing wrong?
","['I', 'am', 'trying', 'to', 'submit', 'and', 'parse', 'a', 'form', 'in', 'go', 'and', 'I', 'am', 'failing', 'to', 'parse', 'the', 'form', 'fields', 'properly.', 'Here', 'is', 'an', 'excerpt', 'of', 'the', 'code', 'I', 'am', 'trying.', 'formtest.go', ':', 'package', 'main', 'import', '(', '""fmt""', '""log""', '""net/http""', '""github.com/codegangsta/negroni""', '""github.com/davecgh/go-spew/spew""', '""github.com/julienschmidt/httprouter""', '""github.com/mholt/binding""', '""gopkg.in/unrolled/render.v1""', ')', 'type', 'FormInfo', 'struct', '{', 'Fields', '[]', 'string', 'Action', 'string', 'PageTitle', 'string', 'Id', 'string', '}', 'func', '(', 'f', '*', 'FormInfo', ')', 'FieldMap', '(*', 'http', '.', 'Request', ')', 'binding', '.', 'FieldMap', '{', 'return', 'binding', '.', 'FieldMap', '{', '&', 'f', '.', 'Fields', ':', '""fields""', ',', '&', 'f', '.', 'Action', ':', '""action""', ',', '}', '}', 'func', 'for', 'mtest', '(', 'resp', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ',', 'p', 'httprouter', '.', 'Params', ')', '{', '//', 'var', 'ticket', 'Ticket', 'info', ':=', 'new', '(', 'FormInfo', ')', 'tkt', ':=', 'p.ByName(""tkt"")', 'info', '.', 'PageTitle', '=', 'tkt', 'info', '.', 'Id', '=', 'tkt', 'if', 'req', '.', 'Method', '==', '""POST""', '{', 'bind_err', ':=', 'binding.Bind(req, info)', 'if', 'bind_err.Handle(resp)', '{', 'log.Println(""Error decoding form contents"")', 'return', '}', 'spew.Dump(info)', '}', 'Render.HTML(resp, http.StatusOK, ""formtest"", info)', 'return', '}', 'var', 'Render', '*', 'render', '.', 'Render', 'func', 'main', '()', '{', 'router', ':=', 'httprouter.New()', 'router.GET(""/formtest"", formtest)', 'router.POST(""/formtest"", formtest)', 'Render', '=', 'render', '.', 'New', '(', 'render', '.', 'Options', '{', 'Layout', ':', '""layout""', ',', 'IndentJSON', ':', 'true', ',', 'IndentXML', ':', 'true', ',', 'HTMLContentType', ':', '""text/html""', ',', 'IsDevelopment', ':', 'true', ',', '})', 'n', ':=', 'negroni', '.', 'New', '(', 'negroni.NewRecovery()', ',', 'negroni.NewLogger()', ',', 'negroni.NewStatic(http.Dir(""static""))', ',', ')', 'n.UseHandler(router)', 'n.Run(fmt.Sprintf("":%d"", 3000))', '}', 'templates/layout.tmpl', ':', '{{', '.', 'PageTitle', '}}', '<', 'meta', 'name', '=', '""viewport""', 'content', '=', '""initial-scale=1.0,width=device-width,user-scalable=no""', '>', '{{', 'yield', '}}', 'templates/formtest.tmpl', ':', '{{', '.', 'PageTitle', '}}', 'Question', '1', 'Question', '2', 'Procedure:', 'go', 'run', 'formtest.go', 'Open', 'browser', 'and', 'go', 'to', 'http://127.0.0.1:3000/formtest', 'Submit', 'the', 'form', 'Check', 'console', 'for', 'the', 'logs.', 'Observation', ':', '(*', 'main', '.', 'FormInfo', ')(', '0xc82', '0', '066', 'c30', ')({', 'Fields', ':', '([]', 'string', ')', ',', 'Action', ':', '(', 'string', ')', '(', 'len', '=', '4', ')', '""save""', ',', 'PageTitle', ':', '(', 'string', ')', '""""', ',', 'Id', ':', '(', 'string', ')', '""""', '})', 'Expectation', ':', 'Fields', ':', '([]', 'string', ')', ',', 'But', 'when', 'I', 'try', 'to', 'print', 'the', 'contents', 'of', 'Fields,', 'it', 'is', 'nil.', 'What', 'am', 'I', 'doing', 'wrong?']"
1464,32932199,"

How fix it? Thanks you!
","['I', 'have', 'some', 'problem', 'with', 'Golang', 'and', 'include', 'package.', 'I', 'have', 'that', 'scructure', 'src', '/', 'hello_world', 'hello', '.', 'go', 'math', 'add', '.', 'go', 'hello.go', 'file', 'contains', 'this', 'code:', 'package', 'main', 'import', '(', '""fmt""', 'math', '""hello_world/math""', ')', 'func', 'main', '()', '{', 'fmt.Println(""Hello World"")', 'x', ':=', 'math.add(6 + 5)', '}', 'and', 'add.go', 'package', 'math', 'func', 'add', '(', 'x', ',', 'y', 'int', ')', 'int', '{', 'return', 'x', '+', 'y', '}', 'and', 'when', 'I', 'do', '""go', 'run', 'hello', 'go""', 'I', 'see', 'it:', 'evgen', 'laptop', ':', '/go/src/hello_world$', 'go', 'run', 'hello', '.', 'go', 'command', '-', 'line', '-', 'arguments', './', 'hello', '.', 'go', ':', '10', ':', 'cannot', 'refer', 'to', 'unexported', 'name', 'math', '.', 'add', './', 'hello', '.', 'go', ':', '10', ':', 'undefined', ':', '""hello_world/math""', '.', 'add', 'GOPATH:', 'evgen', 'laptop', ':', '/go/src/hello_world$', 'echo', '$', 'GOPATH', '/home/evgen/go', 'How', 'fix', 'it?', 'Thanks', 'you!']"
1465,32962128,"

Theoretically, the child files should be appended to the root file as we move through the stack. However, the only thing that is returned is the root file (without any children appended). Any idea as to why this is happening?
","[""I'm"", 'having', 'trouble', 'creating', 'an', 'iterative', 'version', 'of', 'a', 'program', 'I', 'wrote', 'recursively', 'in', 'GoLang.', 'The', 'goal', 'is', 'to', 'take', 'a', 'directory', 'path', 'and', 'return', 'a', 'JSON', 'tree', 'that', 'contains', 'file', 'information', 'from', 'that', 'directory', 'and', 'preserves', 'the', 'directory', 'structure.', 'Here', 'is', 'what', 'I', 'have', 'so', 'far:', ""I've"", 'created', 'a', 'File', 'struct', 'that', 'will', 'contain', 'the', 'information', 'of', 'each', 'entry', 'in', 'the', 'directory', 'tree:', 'type', 'File', 'struct', '{', 'ModifiedTime', 'time', '.', 'Time', 'json', ':', '""ModifiedTime""', 'IsLink', 'bool', 'json', ':', '""IsLink""', 'IsDir', 'bool', 'json', ':', '""IsDir""', 'LinksTo', 'string', 'json', ':', '""LinksTo""', 'Size', 'int64', 'json', ':', '""Size""', 'Name', 'string', 'json', ':', '""Name""', 'Path', 'string', 'json', ':', '""Path""', 'Children', '[]', 'File', 'json', ':', '""Children""', '}', 'In', 'my', 'iterative', 'program,', 'I', 'create', 'a', 'stack', 'to', 'simulate', 'the', 'recursive', 'calls.', 'func', 'iterateJSON', '(', 'path', 'string', ')', '{', 'var', 'stack', '[]', 'File', 'var', 'child', 'File', 'var', 'file', 'File', 'rootOSFile', ',', '_', ':=', 'os.Stat(path)', 'rootFile', ':=', 'toFile', '(', 'rootOSFile', ',', 'path', ')', '//start with root file', 'stack', '=', 'append', '(', 'stack', ',', 'rootFile', ')', '//append root to stack ', 'for', 'len', '(', 'stack', ')', '>', '0', '{', '//until stack is empty,', 'file', '=', 'stack', '[', 'len', '(', 'stack', ')-', '1', ']', '//pop entry from stack', 'stack', '=', 'stack', '[:', 'len', '(', 'stack', ')-', '1', ']', 'children', ',', '_', ':=', 'ioutil.ReadDir(file.Path)', '//get the children of entry ', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'children', ');', 'i', '++', '{', '//for each child', 'child', '=', '(', 'toFile', '(', 'children', '[', 'i', '],', 'path', '+', '""/""', '+', 'children', '[', 'i', '].', 'Name', '()))', '//turn it into a File object', 'file', '.', 'Children', '=', 'append', '(', 'file', '.', 'Children', ',', 'child', ')', '//append it to the children of the current file popped', 'stack', '=', 'append', '(', 'stack', ',', 'child', ')', '//append the child to the stack, so the same process can be run again', '}', '}', 'rootFile', '.', 'Children', 'output', ',', '_', ':=', 'json.MarshalIndent(rootFile, """", ""     "")', 'fmt.Println(string(output))', '}', 'func', 'toFile', '(', 'file', 'os', '.', 'FileInfo', ',', 'path', 'string', ')', 'File', '{', 'var', 'isLink', 'bool', 'var', 'linksTo', 'string', 'if', 'file.Mode()', '&', 'os', '.', 'ModeSymlink', '==', 'os', '.', 'ModeSymlink', '{', 'isLink', '=', 'true', 'linksTo', ',', '_', '=', 'filepath.EvalSymlinks(path + ""/"" + file.Name())', '}', 'else', '{', 'isLink', '=', 'false', 'linksTo', '=', '""""', '}', 'JSONFile', ':=', 'File', '{', 'ModifiedTime', ':', 'file.ModTime()', ',', 'IsDir', ':', 'file.IsDir()', ',', 'IsLink', ':', 'isLink', ',', 'LinksTo', ':', 'linksTo', ',', 'Size', ':', 'file.Size()', ',', 'Name', ':', 'file.Name()', ',', 'Path', ':', 'path', ',', 'Children', ':', '[]', 'File', '{}}', 'return', 'JSONFile', '}', 'Theoretically,', 'the', 'child', 'files', 'should', 'be', 'appended', 'to', 'the', 'root', 'file', 'as', 'we', 'move', 'through', 'the', 'stack.', 'However,', 'the', 'only', 'thing', 'that', 'is', 'returned', 'is', 'the', 'root', 'file', '(without', 'any', 'children', 'appended).', 'Any', 'idea', 'as', 'to', 'why', 'this', 'is', 'happening?']"
1466,33111375,"

Is there a nice clean way to combine these two (with Environment variables or any other crazy idea)?
","['I', 'have', 'a', 'Go', 'project', 'that', 'I', 'want', 'to', 'build', 'with', 'Travis-CI', 'and', 'deploy', 'it', 'to', 'a', 'specific', 'provider.', 'I', 'familiar', 'with', 'Gimme', 'project', 'that', 'will', 'use', 'a', 'cross-compilation', 'to', 'do', 'so.', 'But', 'because', 'Travis', 'already', 'support', 'linux', 'and', 'osx', 'I', 'only', 'need', 'this', 'feature', 'for', 'Windows', 'build.', 'The', 'big', 'motivation', 'is,', 'of', 'course,', 'to', 'avoid', 'cross-compilation', 'run', 'time', 'error', 'as', 'there', 'are', 'plenty', 'of', 'it.', 'My', 'question', 'is', 'how', 'can', 'I', 'create,', 'in', 'the', 'same', '.travis.yml', 'file,', 'a', 'different', 'build', 'flow:', 'Native', 'linux/os', 'build', '(with', '""os""', 'section).', 'Windows', 'compilation', 'using', 'Gimmme', 'The', '.travis.yml', 'file', 'for', 'the', 'first', 'option', 'will', 'look', 'something', 'like:', 'language', ':', 'go', 'go', ':', '-', '1', '.', '5', '.', '1', 'branches', ':', 'only', ':', '-', 'master', 'os', ':', '-', 'osx', '-', 'linux', 'before_script', ':', '-', 'go', 'get', '-', 'd', '-', 'v', './...', 'script', ':', '-', 'go', 'build', '-', 'v', './...', '-', 'go', 'test', '-', 'v', './...', 'before_deploy', ':', '-', 'chmod', '+', 'x', './', 'before_deploy', '.', 'sh', '-', './', 'before_deploy', '.', 'sh', 'The', '.travis.yml', 'file', 'for', 'the', 'second', 'option', 'will', 'look', 'something', 'like:', 'language', ':', 'go', 'go', ':', '-', '1', '.', '5', '.', '1', 'branches', ':', 'only', ':', '-', 'master', 'env', ':', '-', 'GIMME_OS', '=', 'windows', 'GIMME_ARCH', '=', 'amd64', 'before_script', ':', '-', 'go', 'get', '-', 'd', '-', 'v', './...', 'script', ':', '-', 'go', 'build', '-', 'v', './...', '-', 'go', 'test', '-', 'v', './...', 'before_deploy', ':', '-', 'chmod', '+', 'x', './', 'before_deploy', '.', 'sh', '-', './', 'before_deploy', '.', 'sh', 'Is', 'there', 'a', 'nice', 'clean', 'way', 'to', 'combine', 'these', 'two', '(with', 'Environment', 'variables', 'or', 'any', 'other', 'crazy', 'idea)?']"
1467,33171661,"

I am getting the errors  rows.Columns undefined (type *sql.Row has no field or method Columns) and  rows.Next undefined (type *sql.Row has no field or method Next).Anyone have an example of code that I can take a look at?
","['I', 'want', 'to', 'print', 'multiple', 'rows', 'having', 'multiple', 'columns', 'from', 'my', 'postgresql', 'database', 'using', 'golang.when', 'i', 'tried', 'to', 'build', 'the', 'code', 'package', 'main', 'import', '(', '""database/sql""', '""fmt""', '""github.com/gin-gonic/gin""', '_', '""github.com/lib/pq""', '""log""', '""runtime""', ')', 'func', 'main', '()', '{', 'runtime.GOMAXPROCS(runtime.NumCPU())', 'db', ',', 'err', ':=', 'sql.Open(""postgres"", ""dbname=sample_data user=postgres password=postgres sslmode=disable"")', 'defer', 'db.Close()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""error connecting to DB"")', '}', 'r', ':=', 'gin.Default()', 'r.GET(""/cin_display"", func(c *gin.Context)', '{', 'rows', ':=', 'db.QueryRow(""SELECT cin FROM companies limit 1;"")', 'columns', ',', '_', ':=', 'rows.Columns()', 'count', ':=', 'len', '(', 'columns', ')', 'values', ':=', 'make', '([]', 'interface', '{},', 'count', ')', 'valuePtrs', ':=', 'make', '([]', 'interface', '{},', 'count', ')', 'for', 'rows.Next()', '{', 'for', 'i', ',', '_', ':=', 'range', 'columns', '{', 'valuePtrs', '[', 'i', ']', '=', '&', 'values', '[', 'i', ']', '}', 'rows.Scan(valuePtrs...)', 'for', 'i', ',', 'col', ':=', 'range', 'columns', '{', 'var', 'v', 'interface', '{}', 'val', ':=', 'values', '[', 'i', ']', 'b', ',', 'ok', ':=', 'val', '.([]', 'byte', ')', 'if', 'ok', '{', 'v', '=', 'string', '(', 'b', ')', '}', 'else', '{', 'v', '=', 'val', '}', 'fmt.Println(col, v)', '}', '}', '})', '}', 'func', 'Connect', '(', 'connectionString', 'string', ')', '*', 'sql', '.', 'DB', '{', 'db', ',', 'err', ':=', 'sql.Open(""postgres"", connectionString)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'return', 'db', '}', 'I', 'am', 'getting', 'the', 'errors', 'rows.Columns', 'undefined', '(type', '*sql.Row', 'has', 'no', 'field', 'or', 'method', 'Columns)', 'and', 'rows.Next', 'undefined', '(type', '*sql.Row', 'has', 'no', 'field', 'or', 'method', 'Next).Anyone', 'have', 'an', 'example', 'of', 'code', 'that', 'I', 'can', 'take', 'a', 'look', 'at?']"
1468,33179876,"
","['I', 'need', 'to', 'pass', 'a', 'pointer', 'to', 'a', 'map', 'to', 'another', 'function', 'using', 'the', 'reflect', 'package.', 'Think', 'of', 'encoding/json.Unmarshal', 'which', 'accepts', 'only', 'pointers.', 'Below', 'is', 'some', 'code', 'of', 'what', 'I', 'need', 'to', 'do', 'using', 'reflection:', 'myTyp', ':=', '&', 'MyType', '{}', 'json.Unmarshal(jsonPayload1, myTyp)', 'm', ':=', 'make', '(', 'map', '[', 'string', ']*', 'MyType', ')', 'm', '[', '""someKey""', ']', '=', 'myTyp', '//', 'Dump', 'it', 'again', 'to', 'Unmarshal.', 'It', 'will', 'overwrite', 'it', 'only', 'if', '//', 'there', 'is', 'a', '`someKey`', 'key.', 'x', ':=', 'json.Unmarshal(jsonPayload2, &m)', 'So', 'far', 'I', 'have', 'the', 'following:', '....', 'm', ':=', 'reflect.MakeMap(reflect.MapOf(reflect.TypeOf(""""), reflect.TypeOf(typ))', 'x', ':=', 'json.Unmarshal(jsonPayload2, m.Interface())', 'The', 'issue', 'with', 'this', 'code', 'is', 'that', ""it's"", 'making', 'a', 'map', 'of', 'map[string]MyType', 'but', 'there', 'is', 'no', 'way', 'I', 'can', 'create', 'a', 'pointer', 'for', 'it.', 'If', 'I', 'try', 'to', 'make', 'the', 'pointer', '[2]', 'directly', 'it', 'panics', 'with', 'reflect', '.', 'MakeMap', 'of', 'non', '-', 'map', 'type', '.', 'Why', 'the', 'map', 'must', 'be', 'allocated:', 'I', 'need', 'the', 'map', 'allocated', 'so', 'that', 'I', 'can', 'set', 'myTyp', 'on', 'a', 'specific', 'key.', 'myTyp', 'is', 'decoded', 'using', 'multiple', 'decoding', 'sources', 'so', 'I', ""don't"", 'know', 'what', 'fields', 'were', 'decoded', 'with', 'each', 'source', 'but', 'I', 'know', 'that', 'Unmarshal', 'overwrites', 'only', 'keys', 'that', 'match', 'the', 'json', 'content/keys', 'so', ""it's"", 'safe', 'to', 'use', 'the', 'same', 'variable', 'to', 'multiple', 'Unmarshal', 'functions.', '[2]', 'reflect.MakeMap(reflect.PtrTo(reflect.MapOf(reflect.TypeOf("""")),  reflect.TypeOf(typ))']"
1469,33237126,"I'm writing a command line tool with Go and one of the command will query the user for its username and password (and save it to a config file inside the home directory). 

For now I couldn't realize how to replace the typed password to '*' or even not to type anything as a lot of command line tools are doing.

How does can this be done when using golang?
","[""I'm"", 'writing', 'a', 'command', 'line', 'tool', 'with', 'Go', 'and', 'one', 'of', 'the', 'command', 'will', 'query', 'the', 'user', 'for', 'its', 'username', 'and', 'password', '(and', 'save', 'it', 'to', 'a', 'config', 'file', 'inside', 'the', 'home', 'directory).', 'For', 'now', 'I', ""couldn't"", 'realize', 'how', 'to', 'replace', 'the', 'typed', 'password', 'to', ""'*'"", 'or', 'even', 'not', 'to', 'type', 'anything', 'as', 'a', 'lot', 'of', 'command', 'line', 'tools', 'are', 'doing.', 'How', 'does', 'can', 'this', 'be', 'done', 'when', 'using', 'golang?']"
1470,33308887,"
","[""I'm"", 'mocking', 'out', 'a', 'DataStore', 'and', ""it's"", 'Get/Set', 'functionality.', 'The', 'trouble', ""I'm"", 'having', 'is:', 'cannot', 'use', 's', '(type', '*MockStore)', 'as', 'type', '*datastore.Storage', 'in', 'argument', 'to', 'EventHandler', 'This', 'is', 'caused', 'by', 'my', 'EventHandler', 'function', 'needing', 'to', 'be', 'passed', 'a', '*datastore.Storage', 'as', 'an', 'argument', 'type.', 'I', 'want', 'to', 'Test', '(http', 'test)', 'EvenHandler()', 'using', 'the', 'MockStore', ""I've"", 'created', 'instead', 'of', 'the', 'real', 'datastore.', ""I'm"", 'using', 'the', 'golang', 'testify', 'mock', 'package.', 'Some', 'Code', 'Examples', 'type', 'MockStore', 'struct', '{', 'mock', '.', 'Mock', '}', 'func', '(', 's', '*', 'MockStore', ')', 'Get', '()', '...', 'func', 'EventHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ',', 'bucket', '*', 'datastore', '.', 'Storage', '){', '//', 'Does', 'HTTP', 'stuff', 'and', 'stores', 'things', 'in', 'a', 'data', 'store', '//', 'Need', 'to', 'mock', 'out', 'the', 'data', 'store', 'get/sets', '}', '//', 'Later', 'in', 'my', 'Tests', 'ms', ':=', 'MockStore', 'EventHandler', '(', 'w', ',', 'r', ',', 'ms', ')']"
1471,33314790,"

I need to do the same in golang i.e read and print the html source code, but cannot find the relation between two, I am a beginner with Go language, thank you in advance
","['import', 'java', '.', 'net', '.*;', 'import', 'java', '.', 'io', '.*;', 'public', 'class', 'URLReader', '{', 'public', 'static', 'void', 'main', '(', 'String', '[]', 'args', ')', 'throws', 'Exception', '{', 'URL', 'oracle', '=', 'new', 'URL', '(', '""http://www.oracle.com/""', ');', 'BufferedReader', 'in', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'oracle.openStream()))', ';', 'String', 'inputLine', ';', 'while', '((', 'inputLine', '=', 'in.readLine()) != null)', 'System', '.', 'out.println(inputLine)', ';', 'in.close()', ';', '}', '}', 'I', 'need', 'to', 'do', 'the', 'same', 'in', 'golang', 'i.e', 'read', 'and', 'print', 'the', 'html', 'source', 'code,', 'but', 'cannot', 'find', 'the', 'relation', 'between', 'two,', 'I', 'am', 'a', 'beginner', 'with', 'Go', 'language,', 'thank', 'you', 'in', 'advance']"
1472,33400325,"

This returns ""Hello World%!EXTRA []interface{}=[]"".
","[""I'm"", 'implementing', 'a', 'wrapper', 'around', 'the', 'standard', 'log', 'package', 'to', 'make', 'a', 'logger', 'with', 'various', 'log', 'levels.', 'I', 'have', 'the', 'following', 'interface:', 'type', 'Logger', 'interface', '{', 'Trace', '(', 'fmt', 'string', ',', 'args', '...', 'interface', '{})', 'Debug', '(', 'fmt', 'string', ',', 'args', '...', 'interface', '{})', 'Info', '(', 'fmt', 'string', ',', 'args', '...', 'interface', '{})', 'Warn', '(', 'fmt', 'string', ',', 'args', '...', 'interface', '{})', 'Error', '(', 'fmt', 'string', ',', 'args', '...', 'interface', '{})', 'Fatal', '(', 'fmt', 'string', ',', 'args', '...', 'interface', '{})', 'Panic', '(', 'fmt', 'string', ',', 'args', '...', 'interface', '{})', '}', 'In', 'the', 'implementation', 'I', 'have', 'something', 'like', 'this', '(not', 'the', 'exact', 'code)', 'func', 'Info', '(', 'for', 'mat', 'string', ',', 'args', '...', 'interface', '{}){', 'msg', ':=', 'fmt.Sprintf(format, args...)', 'log.Println(msg)', '}', 'Now,', 'assume', 'I', 'call', 'my', 'library', 'like', 'this:', 'logger.Info(""Hello %s"", ""World"")', 'I', 'get', 'the', 'printout:', '""Hello', '%!(EXTRA', 'string=WORLD)"",', 'instead', 'of', 'the', 'expected', '""Hello', 'World"".', 'There', 'a', 'similar', 'output', 'if', 'I', 'do', 'msg', ':=', 'fmt.Sprintf(format, args)', 'This', 'returns', '""Hello', 'World%!EXTRA', '[]interface{}=[]"".']"
1473,33604928,"

Running the command directly on my shell gives me all lines of out put as expected.

How do I make my script print the entire output?
","[""I'm"", 'using', 'glide', 'to', 'manage', 'dependencies', 'on', 'my', 'project.', 'I', 'created', 'a', 'script', 'that', 'runs', 'go', 'test', '$(', 'glide', 'novendor', ')', '(which', 'tests', 'all', 'directories,', 'excluding', 'the', 'vendor/', 'one)', 'for', 'me.', 'While', 'it', 'works,', 'the', 'output', 'for', 'the', 'run', 'command', ""doesn't"", 'go', 'beyond', 'the', '1st', 'line:', 'ok', 'my/project/scripts', '0', '.', '0', '05', 's', 'Here', 'is', 'the', 'portion', 'of', 'the', 'script', 'that', 'runs', 'it:', '//', 'Get', 'the', 'paths', 'to', 'test', '(excluding', 'the', '""vendor/""', 'directory)', 'cmd', ':=', 'exec.Command(""glide"", ""novendor"")', 'var', 'out', 'bytes', '.', 'Buffer', 'cmd', '.', 'Stdout', '=', '&', 'out', 'err', '=', 'cmd.Run()', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(""Could not run `glide novendor`: "", err)', '}', 'glidenovendor', ':=', '[]', 'string', '{', '""test""', '}', '//', 'Represents', 'the', '""test', './src/...', './scripts/...""', 'portion', 'of', 'the', 'command', 'glidenovendor', '=', 'append', '(', 'glidenovendor', ',', 'strings.Split(out.String(), "" "")...)', '//', 'Run', '`go', 'test', './src/...', './scripts/...`', 'cmd', '=', 'exec.Command(""go"", glidenovendor...)', 'cmd', '.', 'Stdout', '=', 'os', '.', 'Stdout', 'err', '=', 'cmd.Run()', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(""Could not run `go test` command with args: "", cmd, err)', '}', 'Running', 'the', 'command', 'directly', 'on', 'my', 'shell', 'gives', 'me', 'all', 'lines', 'of', 'out', 'put', 'as', 'expected.', 'How', 'do', 'I', 'make', 'my', 'script', 'print', 'the', 'entire', 'output?']"
1474,33632365," allowed in slice literals?

","[""I'm"", 'learning', 'Go', 'programming', 'and', 'try', 'to', 'test', 'the', 'following', 'average', 'function:', 'func', 'average', '(', 'xs', '[]', 'float64', ')', 'float64', '{', 'total', ':=', '0', '.', '0', 'for', '_', ',', 'v', ':=', 'range', 'xs', '{', 'total', '+=', 'v', '}', 'return', 'total', '/', 'float64', '(', 'len', '(', 'xs', '))', '}', 'I', 'tried', 'to', 'generate', 'a', 'slice', 'of', 'random', 'float', 'numbers', 'by:', 'var', 'xs', '[]', 'float64', 'for', 'n', ':=', '0', ';', 'n', '<', '10', ';', 'n', '++', '{', 'xs', '[', 'n', ']', '=', 'rand.Float64()', '}', 'however,', 'I', 'got', 'panic', ':', 'runtime', 'error', ':', 'index', 'out', 'of', 'range', 'Question:', 'How', 'to', 'generate', 'a', 'slice', 'of', 'random', 'number', 'in', 'Golang?', 'Is', 'expression', 'or', 'function', 'call,', 'like', 'xs', ':=', '[]', 'float64', '{', 'for', '...', '}', 'allowed', 'in', 'slice', 'literals?']"
1475,33645459,"I am trying to implement Reliable-UDP in golang. 

One of the basic features I need to implement is packet-retransmission.

The naive method is as follows: 


send a packet;
create a timer (also will create a new goroutine) to check if ACK is received before timer fires.


It is simple, but creation a lot of goroutine is NOT FREE. And I do NOT think implementation of packet-retransmission in TCP uses this method.

So, is there a way to callback a function without creating a new goroutine?

I have checked the post from golang-nuts ( https://groups.google.com/forum/#!topic/golang-nuts/ja8j7wQUB-0), and still can not figure out a solution.
","['I', 'am', 'trying', 'to', 'implement', 'Reliable-UDP', 'in', 'golang.', 'One', 'of', 'the', 'basic', 'features', 'I', 'need', 'to', 'implement', 'is', 'packet-retransmission.', 'The', 'naive', 'method', 'is', 'as', 'follows:', 'send', 'a', 'packet;', 'create', 'a', 'timer', '(also', 'will', 'create', 'a', 'new', 'goroutine)', 'to', 'check', 'if', 'ACK', 'is', 'received', 'before', 'timer', 'fires.', 'It', 'is', 'simple,', 'but', 'creation', 'a', 'lot', 'of', 'goroutine', 'is', 'NOT', 'FREE.', 'And', 'I', 'do', 'NOT', 'think', 'implementation', 'of', 'packet-retransmission', 'in', 'TCP', 'uses', 'this', 'method.', 'So,', 'is', 'there', 'a', 'way', 'to', 'callback', 'a', 'function', 'without', 'creating', 'a', 'new', 'goroutine?', 'I', 'have', 'checked', 'the', 'post', 'from', 'golang-nuts', '(', 'https://groups.google.com/forum/#!topic/golang-nuts/ja8j7wQUB-0),', 'and', 'still', 'can', 'not', 'figure', 'out', 'a', 'solution.']"
1476,33666158,"

I have deleted the ssh key and token so please no comments on why I should not post those.

I know everything is authorized and parsed correctly before the request (I have tested with wrong token and wrong json format both return a different error) but I do not know why this is not working. I have tried to just build the json string turn it into a byte array and pass that with the same out come. 

I don't know if this matters but I am doing this through a VPN (I changed the address to show github and not the actual address). I have tested this call through PostMan (not using VPN) and it worked, so I know the server has these api calls. 
","['So', 'the', 'following', 'code', 'recieves', 'a', 'public', 'key', 'that', 'is', 'created', 'then', 'passed', 'into', 'an', 'object', 'that', 'is', 'then', 'marshalled', 'into', 'json.', 'This', 'json', 'is', 'then', 'passed', 'into', 'an', 'http', 'request.', 'Github', 'is', 'parsing', 'the', 'json', 'correctly', 'but', 'returns', 'that', 'the', 'ssh', 'key', 'is', 'invalid.', 'If', 'I', 'copy', 'the', 'contents', 'and', 'go', 'online', 'to', 'paste', 'the', 'key', 'it', 'works', 'fine.', 'I', 'did', 'edit', 'the', 'key', 'to', 'remove', 'the', 'user@hostname', 'part', 'of', 'the', 'key', '(I', 'always', 'do', 'even', 'though', 'I', 'know', 'it', 'is', 'unsafe)', 'to', 'see', 'if', 'that', 'was', 'the', 'problem.', 'func', 'addKeyToGitHub', '(', 'token', 'string', ',', 'comment', 'string', ',', 'publickey', '[]', 'byte', ')', '(*', 'http', '.', 'Response', ',', 'error', ')', '{', 'if', 'token', '==', '""""', '{', 'fmt.Println(""Please create a token that has \'write:public_key\' scope"")', 'open.Run(githubAPPURL)', 'ir', ':=', 'bufio.NewReader(os.Stdin)', 'fmt.Print(""Enter Token: "")', 'token', ',', '_', '=', ""ir.ReadString('\\n')"", '}', 'k', ':=', 'string', '(', 'publickey', ')', '//', 'Removes', 'unwanted', 'host', 'at', 'end', 'of', 'file', 'array', ':=', 'strings.Split(k, "" "")', 'array', '=', 'array', '[:', 'len', '(', 'array', ')-', '1', ']', 'k', '=', 'strings.Join(array, "" "")', 'fmt.Println(k)', 'b', ':=', '&', 'githubBody', '{', 'Title', ':', 'comment', ',', 'Key', ':', 'k', '}', 'body', ',', 'err', ':=', 'json.Marshal(b)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'req', ',', 'err', ':=', 'http.NewRequest(""POST"", githubAPIURL+""user/keys"", bytes.NewBuffer(body))', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'req', '.', 'Header.Set(""Authorization"", ""token ""+token)', 'req', '.', 'Header.Set(""Content-Type"", ""application/json"")', 'fmt.Println(req)', 'client', ':=', 'http', '.', 'Client', '{}', 'return', 'client.Do(req)', '}', 'Here', 'is', 'what', 'it', 'outputs', 'Please', 'create', 'a', 'token', 'that', 'has', ""'write:public_key'"", 'scope', 'Enter', 'Token', ':', '3310', 'b4ef5d0dbbb8687b992e6f78e02cd34e4d6d', 'ssh', '-', 'rsa', 'AAAAB3NzaC1yc2EAAAADAQABAAABAQC7zwo/h3mVL2RwOyMeUyGZblLT+nZy9pS6akUMSiOaVkphCdQzoHH/6xbDPiTKNlXC+1JYmQq4DaeglFdVc+FQHp3ZlbhZp6YPemXHnGtKamtQrJHS+HA7zE+F3xPzLQlVTgUdlE4ckU0THRK7WdwXa1sSMO2UNBrn7MGZ4wskU4PO8QFBjFHN0e5SIv2mlF/Oi1FoSRHIEohHAY6JSE8lnxkYFA5XeVkygLFQbZ7dKpVaZg4Y1LvrZUnThmI+e1QxP9ttUj5Ike6wFewBTvTjtPb8hkEHp3GuwjmwN9SKIW4d5bmrJtGxQjYmY4PHhW5DnySBQWBeOnQxhqVQFqlN', '&{', 'POST', 'http', '://', 'github', '.', 'com/api/v3/user/keys HTTP/1.1 1 1 map[Authorization:[token 3310b4ef5d0dbbb8687b992e6f78e02cd34e4d6d] Content-Type:[application/json]] {{""Key"":""ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7zwo/h3mVL2RwOyMeUyGZblLT+nZy9pS6akUMSiOaVkphCdQzoHH/6xbDPiTKNlXC+1JYmQq4DaeglFdVc+FQHp3ZlbhZp6YPemXHnGtKamtQrJHS+HA7zE+F3xPzLQlVTgUdlE4ckU0THRK7WdwXa1sSMO2UNBrn7MGZ4wskU4PO8QFBjFHN0e5SIv2mlF/Oi1FoSRHIEohHAY6JSE8lnxkYFA5XeVkygLFQbZ7dKpVaZg4Y1LvrZUnThmI+e1QxP9ttUj5Ike6wFewBTvTjtPb8hkEHp3GuwjmwN9SKIW4d5bmrJtGxQjYmY4PHhW5DnySBQWBeOnQxhqVQFqlN"",""Title"":""dixon@homedesktop""}}', '418', '[]', 'false', 'github', '.', 'com', 'map', '[]', 'map', '[]', 'map', '[]', '}', 'Status', '422', 'Body', ':', '{', '""message""', ':', '""Validation Failed""', ',', '""documentation_url""', ':', '""https://developer.github.com/v3/users/keys/#create-a-public-key""', ',', '""errors""', ':[{', '""resource""', ':', '""PublicKey""', ',', '""code""', ':', '""custom""', ',', '""field""', ':', '""key""', ',', '""message""', ':', '""key is invalid. It must begin with \'ssh-rsa\', \'ssh-dss\', \'ecdsa-sha2-nistp256\', \'ecdsa-sha2-nistp384\', or \'ecdsa-sha2-nistp521\'. Check that you\'re copying the public half of the key""', '}]}', 'I', 'have', 'deleted', 'the', 'ssh', 'key', 'and', 'token', 'so', 'please', 'no', 'comments', 'on', 'why', 'I', 'should', 'not', 'post', 'those.', 'I', 'know', 'everything', 'is', 'authorized', 'and', 'parsed', 'correctly', 'before', 'the', 'request', '(I', 'have', 'tested', 'with', 'wrong', 'token', 'and', 'wrong', 'json', 'format', 'both', 'return', 'a', 'different', 'error)', 'but', 'I', 'do', 'not', 'know', 'why', 'this', 'is', 'not', 'working.', 'I', 'have', 'tried', 'to', 'just', 'build', 'the', 'json', 'string', 'turn', 'it', 'into', 'a', 'byte', 'array', 'and', 'pass', 'that', 'with', 'the', 'same', 'out', 'come.', 'I', ""don't"", 'know', 'if', 'this', 'matters', 'but', 'I', 'am', 'doing', 'this', 'through', 'a', 'VPN', '(I', 'changed', 'the', 'address', 'to', 'show', 'github', 'and', 'not', 'the', 'actual', 'address).', 'I', 'have', 'tested', 'this', 'call', 'through', 'PostMan', '(not', 'using', 'VPN)', 'and', 'it', 'worked,', 'so', 'I', 'know', 'the', 'server', 'has', 'these', 'api', 'calls.']"
1477,33688705,"Golang's glide downloads dependencies to the project's source. As a result, go build compiles those too, and go plugins that lint/vet the codebase also parse the dependencies.

Assuming those dependencies are stable, how can I compile the dependencies so go build becomes faster?

Also, how can I remove vendor/ from go's tools to lint and check the codebase for errors?
","['I', 'have', 'deleted', 'the', 'ssh', 'key', 'and', 'token', 'so', 'please', 'no', 'comments', 'on', 'why', 'I', 'should', 'not', 'post', 'those.', 'I', 'know', 'everything', 'is', 'authorized', 'and', 'parsed', 'correctly', 'before', 'the', 'request', '(I', 'have', 'tested', 'with', 'wrong', 'token', 'and', 'wrong', 'json', 'format', 'both', 'return', 'a', 'different', 'error)', 'but', 'I', 'do', 'not', 'know', 'why', 'this', 'is', 'not', 'working.', 'I', 'have', 'tried', 'to', 'just', 'build', 'the', 'json', 'string', 'turn', 'it', 'into', 'a', 'byte', 'array', 'and', 'pass', 'that', 'with', 'the', 'same', 'out', 'come.', 'I', ""don't"", 'know', 'if', 'this', 'matters', 'but', 'I', 'am', 'doing', 'this', 'through', 'a', 'VPN', '(I', 'changed', 'the', 'address', 'to', 'show', 'github', 'and', 'not', 'the', 'actual', 'address).', 'I', 'have', 'tested', 'this', 'call', 'through', 'PostMan', '(not', 'using', 'VPN)', 'and', 'it', 'worked,', 'so', 'I', 'know', 'the', 'server', 'has', 'these', 'api', 'calls.']"
1478,33705973,"
","['Just', 'as', 'a', 'precursor', ""I've"", 'just', 'barely', 'started', 'learning', 'Go', 'recently.', 'This', 'is', 'probably', 'my', '3rd', 'day', 'spending', 'some', 'time', 'on', 'it.', ""I've"", 'been', 'working', 'with', 'this', 'error', 'for', 'a', 'couple', 'hours', 'now,', 'and', 'I', ""can't"", 'figure', 'out', 'what', 'is', 'wrong.', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'nextFib', ':=', 'fibGenerator', '();', 'fmt.Println(nextFib())', ';', 'fmt.Println(nextFib())', ';', 'fmt.Println(nextFib())', ';', 'fmt.Println(nextFib())', ';', 'fmt.Println(nextFib())', ';', '}', 'func', 'fibGenerator', '()', 'uint', '{', 'var', '(', 'n', 'uint', '=', '0', 'back1', 'uint', '=', '1', 'back2', 'uint', '=', '0', ')', '_computeFib', ':=', 'func', '()', 'uint', '{', 'if', 'n', '==', '0', '{', 'n', '++', 'return', '0', '}', 'else', 'if', 'n', '==', '1', '{', 'n', '++', 'return', '1', '}', 'fib', ':=', '1', 'back', '+', '2', 'back', '// throws compile time error on this line', '2', 'back', '=', '1', 'back', '1', 'back', '=', 'n', 'n', '++', 'return', 'fib', '}', 'return', '_computeFib', '}', 'This', 'is', 'the', 'error', 'it', 'throws:', 'syntax', 'error:', 'unexpected', 'name,', 'expecting', 'semicolon', 'or', 'newline', 'or', '}', ""It's"", 'probably', 'something', 'simple,', 'but', 'with', 'my', 'limited', 'knowledge', 'in', 'Go', 'I', ""can't"", 'put', 'my', 'finger', 'on', 'it.', 'Any', 'help', 'would', 'be', 'appreciated.', 'EDIT:', 'This', 'is', 'the', 'final', 'working', 'function', 'besides', 'renaming', 'my', 'variables', 'like', 'the', 'accepted', 'answer', 'says', 'I', 'also', 'had', 'to', 'make', 'the', 'generator', 'return', 'a', 'function', 'that', 'returns', 'an', 'int.', 'I', 'also', 'had', 'an', 'error', 'w/', 'Fibonacci', 'logic.', 'func', 'fibGenerator', '()', 'func', '()', 'uint', '{', 'var', '(', 'n', 'uint', '=', '0', 'back1', 'uint', '=', '1', 'back2', 'uint', '=', '0', ')', '_computeFib', ':=', 'func', '()', 'uint', '{', 'if', 'n', '==', '0', '{', 'n', '++', 'return', '0', '}', 'else', 'if', 'n', '==', '1', '{', 'n', '++', 'return', '1', '}', 'fib', ':=', 'back1', '+', 'back2', 'back2', '=', 'back1', 'back1', '=', 'fib', 'n', '++', 'return', 'fib', '}', 'return', '_computeFib', '}']"
1479,33722090,"

When i hit the URL using cURL as below the response is 200 OK (as expected)


  curl -X POST -d@ ""Screen Shot 2015-11-15 at 6.09.58 pm.png""
  http://localhost:8000/image/agent123/property --header ""Content-Type:image/png""
  --header ""X-User-Agent:agent-php""  response -->{""fileURL"":""http://testing.com""}%


Entire cURL request & response 


But when i try the same from DHC rest client, have also tried with advanced rest client getting no response. 



Edit 1: Request does reach the server when fired from rest clients
","['Having', 'a', 'simple', 'GO', 'WebServer', 'which', 'accepts', 'an', 'image', 'as', 'part', 'of', 'POST', 'request.', 'Code', 'snippet', '-', 'Request', 'is', 'mapped', 'to', 'this', 'function', 'func', 'UploadFile', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ',', 'p', 'httprouter', '.', 'Params', ')', '{', 'successResponse', ':=', 'models', '.', 'HTTPResponse', '{', 'FileURL', ':', '""http://testing.com""', ',', '}', 'WrapResponse', '(', 'w', ',', 'successResponse', ',', 'http', '.', 'StatusOK', ')', '}', 'Response', 'writer', 'function', 'func', 'WrapResponse', '(', 'writer', 'http', '.', 'ResponseWriter', ',', 'content', 'interface', '{},', 'status', 'int', ')', '{', 'writer.Header().Set(""Content-Type"", ""application/json"")', 'writer.WriteHeader(status)', '//', 'Content', 'is', 'a', 'struct', 'Response', '{', 'fileURL', 'string', '}', 'responseJson', ',', 'err', ':=', 'json.Marshal(content)', 'CheckError', '(', 'err', ',', '""Error wrapping response""', ')', 'writer.Write(responseJson)', '}', 'func', 'CheckError', '(', 'err', 'error', ',', 'msg', 'string', ')', '{', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'fmt.Sprintf(""%s : %s"", msg, err))', '}', '}', 'When', 'i', 'hit', 'the', 'URL', 'using', 'cURL', 'as', 'below', 'the', 'response', 'is', '200', 'OK', '(as', 'expected)', 'curl', '-X', 'POST', '-d@', '""Screen', 'Shot', '2015-11-15', 'at', '6.09.58', 'pm.png""', 'http://localhost:8000/image/agent123/property', '--header', '""Content-Type:image/png""', '--header', '""X-User-Agent:agent-php""', 'response', '-->{""fileURL"":""http://testing.com""}%', 'Entire', 'cURL', 'request', '&', 'response', 'But', 'when', 'i', 'try', 'the', 'same', 'from', 'DHC', 'rest', 'client,', 'have', 'also', 'tried', 'with', 'advanced', 'rest', 'client', 'getting', 'no', 'response.', 'Edit', '1:', 'Request', 'does', 'reach', 'the', 'server', 'when', 'fired', 'from', 'rest', 'clients']"
1480,33781161,"I am trying to write the logs in CSV format. I am trying to use logrus to write the CSV as logs. But I see the log level (info) and the time getting added to the CSV content in logs. Like, 

time=""2015-11-18T01:27:38-04:00"" level=info msg=""100,Click,Android"" 

How can I write only my message using logrus?
Or should I use any other loggers available in golang?

Note: I am a newbie to go
","['I', 'am', 'trying', 'to', 'write', 'the', 'logs', 'in', 'CSV', 'format.', 'I', 'am', 'trying', 'to', 'use', 'logrus', 'to', 'write', 'the', 'CSV', 'as', 'logs.', 'But', 'I', 'see', 'the', 'log', 'level', '(info)', 'and', 'the', 'time', 'getting', 'added', 'to', 'the', 'CSV', 'content', 'in', 'logs.', 'Like,', 'time=""2015-11-18T01:27:38-04:00""', 'level=info', 'msg=""100,Click,Android""', 'How', 'can', 'I', 'write', 'only', 'my', 'message', 'using', 'logrus?', 'Or', 'should', 'I', 'use', 'any', 'other', 'loggers', 'available', 'in', 'golang?', 'Note:', 'I', 'am', 'a', 'newbie', 'to', 'go']"
1481,33835925,"

Playground

How would you achieve something like this. Or am I trying to tackle this problem from the wrong angle. I'm new to Go.
","['If', 'you', 'imagine', 'I', 'have', 'the', 'following', 'declarations:', 'type', 'Car', 'struct', '{', 'Vehicle', 'engineType', 'string', '}', 'type', 'Bus', 'struct', '{', 'Vehicle', 'public', 'bool', 'engineType', 'string', '}', 'type', 'Bike', 'struct', '{', 'Vehicle', 'motorbike', 'bool', '}', 'type', 'Vehicle', 'struct', '{', 'NumberWheels', 'int', 'NumberPassengers', 'int', 'Owner', 'string', '}', 'type', 'Vehicles', '[]', 'Vehicle', 'Playground', ""I'm"", 'trying', 'to', 'have', 'an', 'array', 'of', 'Vehicles.', 'However', 'this', 'is', 'not', 'possible', 'as', 'they', 'each', 'have', 'a', 'different', 'type', '(', 'i.e', 'Car,', 'Bus,', 'Bike,', 'etc...)', 'var', 'myCar', '=', 'Car', '{', 'Vehicle', '{', '4', ',', '4', ',', '""Me""', '},', '""Manual""', '}', 'var', 'myBike', '=', 'Bike', '{', 'Vehicle', '{', '2', ',', '0', ',', '""Bob and I""', '},', 'false', '}', 'var', 'myVehicles', '=', 'Vehicles', '{', 'myCar', ',', 'myBike', '}', 'for', 'i', ':=', 'range', 'myVehicles', '{', 'fmt.Println(myVehicles[i])', '}', 'Playground', 'How', 'would', 'you', 'achieve', 'something', 'like', 'this.', 'Or', 'am', 'I', 'trying', 'to', 'tackle', 'this', 'problem', 'from', 'the', 'wrong', 'angle.', ""I'm"", 'new', 'to', 'Go.']"
1482,33872612,"Suppose I'm a primarily Linux user, but I'm developing an application in Go that I want to be cross platform. I've searched around, but I can't seem to find information to absolve the following:


If I go install a binary on my amd64 Ubuntu system, will it also work on anyone else's 64-bit Ubuntu/Debian system?
How can I use go install to build an x86_64 binary that will also run out-of-the-box on 32-bit Debianlikes?
If I must use Windows to make a binary which will run on Windows, how can I also ensure that even if my Windows system is 64-bit the executable will be built for x86_64?


My questions in effect boil down to, ""how static/portable is go's linker/compiler?""
","['Playground', 'How', 'would', 'you', 'achieve', 'something', 'like', 'this.', 'Or', 'am', 'I', 'trying', 'to', 'tackle', 'this', 'problem', 'from', 'the', 'wrong', 'angle.', ""I'm"", 'new', 'to', 'Go.']"
1483,33902212,".


src/main.go:48: cannot use r (type *mux.Router) as type handlers.RecoveryOption in argument to handlers.RecoveryHandler
src/main.go:48: cannot use handlers.RecoveryHandler(r) (type func(http.Handler) http.Handler) as type *mux.Router in assignment


How do I use RecoveryHandler of Gorilla?
","['Trying', 'to', 'use', 'RecoverHandler,', 'compile', 'from', 'Intellij', 'fails.', 'r', ':=', 'mux.NewRouter()', 'r.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request)', '{', 'panic', '(', '""Unexpected error!""', ')', '})', 'http.ListenAndServe("":1123"", handlers.RecoveryHandler(r))', 'I', 'get', 'below', 'errors.', 'Above', 'code', 'is', 'from', 'gorilla', 'documenation', 'as-is', 'used', 'and', 'I', 'did', 'run', 'go', 'get', 'github', '.', 'com/gorilla/handlers', '.', 'src/main.go:48:', 'cannot', 'use', 'r', '(type', '*mux.Router)', 'as', 'type', 'handlers.RecoveryOption', 'in', 'argument', 'to', 'handlers.RecoveryHandler', 'src/main.go:48:', 'cannot', 'use', 'handlers.RecoveryHandler(r)', '(type', 'func(http.Handler)', 'http.Handler)', 'as', 'type', '*mux.Router', 'in', 'assignment', 'How', 'do', 'I', 'use', 'RecoveryHandler', 'of', 'Gorilla?']"
1484,33911712,"
","['I', 'am', 'trying', 'to', 'convert', 'my', 'struct', '""Sim""', 'into', 'JSON,', 'after', 'being', 'filled', 'with', 'data.', 'When', 'I', 'print', 'the', 'var', 's,', 'it', 'shows', 'correct', 'information,', 'when', 'I', 'print', 'data,', 'it', 'shows', 'blank.', 'How', 'do', 'I', 'convert', 'Struct', 'to', 'JSON?', 'Reduced', 'Code', 'Below:', 'type', 'Sim', 'struct', '{', 'yr', ',', 'ag', ',', 'av', ',', 'db', ',', 'wd', ',', 'st', '[]', 'int', 'withdrawal', '[]', 'string', '}', 'func', 'main', '()', '{', '//', 'Creating', 'simulation', 'var', 's', 'Sim', '//', 'Filling', 'with', 'data', 's', '=', 'simulate', '(', '15000', ',', '60', ',', '65', ',', '90', ',', '2015', ',', '10', '.', '0', ',', '140000', '.', '0', ',', 'true', ',', 's', ')', '//', 'Converting', 'to', 'JSON,', 'for', 'transmission', 'over', 'web', 'data', ',', 'err', ':=', 'json.Marshal(s)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', 'return', '}', '//', 'Data', 'is', 'correct', 'fmt.Println(s)', '//', 'Prints:', '{}', 'fmt.Println(string(data))', '}']"
1485,34100738,"

I don't know what I am doing wrong.
","['Learning', 'Go', 'and', 'try', 'to', 'get', 'the', 'release', 'list', 'of', 'golang/go', 'with', 'go-github.', 'Here', 'is', 'my', 'code:', 'package', 'main', 'import', '(', '""github.com/google/go-github/github""', '""fmt""', ')', 'func', 'main', '()', '{', 'client', ':=', 'github.NewClient(nil)', 'opt', ':=', '&', 'github', '.', 'ListOptions', '{', 'Page', ':', '2', ',', 'PerPage', ':', '10', '}', 'releases', ',', 'rsp', ',', 'err', ':=', 'client', '.', 'Repositories.ListReleases(""golang"", ""go"", opt)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'fmt.Printf(""\\n%+v\\n"", releases)', 'fmt.Printf(""\\n%+v\\n"", rsp)', '}', 'When', 'I', 'run', 'it,', 'the', 'release', 'list', 'is', 'empty', '(as', 'below):', '[]', 'github', '.', 'Rate', '{', 'Limit', ':', '60', ',', 'Remaining', ':', '59', ',', 'Reset', ':', 'github', '.', 'Timestamp', '{', '2015', '-', '12', '-', '05', '14', ':', '47', ':', '55', '+', '1100', 'AEDT', '}}', 'I', ""don't"", 'know', 'what', 'I', 'am', 'doing', 'wrong.']"
1486,34191096,"

when I don't call $urlRouterProvider.othwerwise line, and I open http://localhost:8080/admin I expect to see admin/index.html, but I don't. I see it only if I navigate to http://localhost:8080/admin#/ manually.
But if I add $urlRouterProvider.othwerwise option and go to http://localhost:8080/admin it redirects automatically to http://localhost:8080/admin#/
I don't think this is usual way to do it because I may want ""otherwise"" to route to a custom 404 page. What point do I miss?
","['Routing', ""doesn't"", 'occur', 'if', 'I', ""don't"", 'include', ""$urlRouterProvider.otherwise('/');"", 'in', 'the', 'config.', 'my', 'go', 'app', 'engine', 'setting', 'with', 'gorilla', 'is', 'r', ':=', 'mux.NewRouter()', 'r.HandleFunc(/admin, handleAdmin)', 'and', 'angularjs', 'config', 'is;', ""angular.module('admin')"", '.', 'config', '(', 'func', 'tion', '($', 'stateProvider', ',', '$', 'urlRouterProvider', ')', '{', '$', 'stateProvider', '.', 'state', '(', ""'home'"", ',', '{', 'url', ':', ""'/'"", ',', 'templateUrl', ':', ""'/admin/index.html'"", ',', 'controller', ':', ""'AdminController as admin'"", '});', '//', ""$urlRouterProvider.otherwise('/');"", '})', 'when', 'I', ""don't"", 'call', '$urlRouterProvider.othwerwise', 'line,', 'and', 'I', 'open', 'http://localhost:8080/admin', 'I', 'expect', 'to', 'see', 'admin/index.html,', 'but', 'I', ""don't."", 'I', 'see', 'it', 'only', 'if', 'I', 'navigate', 'to', 'http://localhost:8080/admin#/', 'manually.', 'But', 'if', 'I', 'add', '$urlRouterProvider.othwerwise', 'option', 'and', 'go', 'to', 'http://localhost:8080/admin', 'it', 'redirects', 'automatically', 'to', 'http://localhost:8080/admin#/', 'I', ""don't"", 'think', 'this', 'is', 'usual', 'way', 'to', 'do', 'it', 'because', 'I', 'may', 'want', '""otherwise""', 'to', 'route', 'to', 'a', 'custom', '404', 'page.', 'What', 'point', 'do', 'I', 'miss?']"
1487,34222841,"

The problem is when I write test cases for child packages, I need this Handlers method to create test server, for that I need to import main_package in child_packages, then as obvious there is cycle imports happening, as child_packages are imported in main_package.
Can any one please suggest me the best approach to tackle this?
","['Here', 'is', 'my', 'project', 'structure', '--main', 'package', '--|--child_package1', '--|--child_package2', '--|--child_package3', 'I', 'have', 'all', 'the', 'the', 'routes', 'and', 'method', 'call', 'management', 'for', 'API', 'calls', 'listed', 'in', 'main_package', 'The', 'router', 'Handler', 'from', 'main_package.go', 'looks', 'like', 'this:', 'func', 'Handlers', '(', 'db', '*', 'sql', '.', 'DB', ',', 'customeruploadFile', 'string', ')', '*', 'mux', '.', 'Router', '{', 'router', ':=', 'mux.NewRouter()', 'router.HandleFunc(""/api1"", child_package1.method )', 'router.HandleFunc(""/api2"", child_package2.method)', 'router.HandleFunc(""/api3"", child_package3.mehtod)', 'fileHandler', ':=', 'http.FileServer(http.Dir(""./client/compiled""))', 'router.PathPrefix(""/"").Handler(http.StripPrefix(""/"", fileHandler))', 'return', 'router', '}', 'The', 'problem', 'is', 'when', 'I', 'write', 'test', 'cases', 'for', 'child', 'packages,', 'I', 'need', 'this', 'Handlers', 'method', 'to', 'create', 'test', 'server,', 'for', 'that', 'I', 'need', 'to', 'import', 'main_package', 'in', 'child_packages,', 'then', 'as', 'obvious', 'there', 'is', 'cycle', 'imports', 'happening,', 'as', 'child_packages', 'are', 'imported', 'in', 'main_package.', 'Can', 'any', 'one', 'please', 'suggest', 'me', 'the', 'best', 'approach', 'to', 'tackle', 'this?']"
1488,34232126,"

I found the value of slice x is always [2,2]. Is there anything I misunderstand?

Thanks in advance.
","['I', 'recently', 'went', 'through', ""Golang's"", '""Language', 'Specification""', 'https://golang.org/ref/spec#Order_of_evaluation', 'but', 'found', 'the', 'order', 'of', 'evaluation', 'being', 'different', 'from', 'what', 'it', 'is', 'explained', 'in', 'this', 'document.', 'For', 'example,', 'it', 'says:', 'a', ':=', '1', 'f', ':=', 'func', '()', 'int', '{', 'a', '++;', 'return', 'a', '}', 'x', ':=', '[]', 'int', '{', 'a', ',', 'f', '()}', '// x may be [1, 2] or [2, 2]: evaluation order between a and f() is not specified', 'Then', 'I', 'tried', 'with', 'this', 'code:', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'for', '{', 'result', ':=', 'evaluate', '()', 'if', 'result', '==', '1', '{', 'break', '}', '}', '}', 'func', 'evaluate', '()', 'int', '{', 'a', ':=', '1', 'f', ':=', 'func', '()', 'int', '{', 'a', '++;', 'return', 'a', '}', 'x', ':=', '[]', 'int', '{', 'a', ',', 'f', '()}', 'fmt.Println(x)', 'return', 'x', '[', '0', ']', '}', 'I', 'found', 'the', 'value', 'of', 'slice', 'x', 'is', 'always', '[2,2].', 'Is', 'there', 'anything', 'I', 'misunderstand?', 'Thanks', 'in', 'advance.']"
1489,34259350,"When I write a programme in Python and post a request using urllib, my header is sent to the server as Python-urllib/3.4

What HTTP headers are sent to a server by default when accessing an API with a Go programme?
","['I', 'found', 'the', 'value', 'of', 'slice', 'x', 'is', 'always', '[2,2].', 'Is', 'there', 'anything', 'I', 'misunderstand?', 'Thanks', 'in', 'advance.']"
1490,34285040,"

How to get last inserted ID, or how to get value from stored funcion in Go from Oracle?
","['I', 'need', 'to', 'insert', 'two', 'records', 'in', 'Oracle', 'database', 'from', 'my', 'go', 'application', 'using', 'sqlx', '(https://github.com/jmoiron/sqlx)', 'with', 'go-oci8', '(https://github.com/mattn/go-oci8)', 'driver.', 'Second', 'record', 'references', 'previous', 'one', 'by', 'foreign', 'key.', 'So', 'I', 'need', 'to', 'have', 'primary', 'key', 'of', 'first', 'record', '(it', 'is', 'assigned', 'from', 'sequence', 'with', 'before', 'insert', 'trigger', 'on', 'first', 'table)', 'before', 'I', 'can', 'insert', 'second', 'record.', 'So', 'I', 'experimented', 'to', 'get', 'last', 'inserted', 'id:', 'create', 'table', 't', '(', 'x', 'int', 'primary', 'key', ');', 'create', 'sequence', 'x_seq', ';', 'LastInsertId', 'failed', 'for', 'me:', 'import', '(', '""fmt""', '""github.com/jmoiron/sqlx""', '_', '""github.com/mattn/go-oci8""', ')', 'func', 'main', '(){', 'db', ',', 'err', ':=', 'sqlx.Connect(""oci8"", ""integr/integr@localhost:49161/xe"")', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'sql', ':=', '""insert into t values(x_seq.nextval)""', 'r', ',', 'err', ':=', 'db.Exec(sql)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'fmt.Println(r.RowsAffected())', 'fmt.Println(r.LastInsertId())', '}', 'Output:', '1', '0', 'LastInsertId', 'not', 'supported', 'Then', 'I', 'tried', 'to', 'make', 'stored', 'function', 'that', 'inserts', 'record', 'and', 'returns', 'primary', 'key.', 'create', 'func', 'tion', 'f', '(', 'x', 'int', ')', 'return', 'int', 'as', 'v', 'int', ';', 'begin', 'insert', 'into', 't', 'values', '(', 'x', ')', 'return', 'ing', 'x', 'into', 'v', ';', 'return', 'v', ';', 'end', ';', 'But', 'I', 'failed', 'to', 'find', 'a', 'way', 'to', 'get', 'its', 'result.', 'PostgreSQL', 'style', 'select', 'fails:', 'SQL', '>', 'select', 'f', '(', '9', ')', 'from', 'dual', ';', 'select', 'f', '(', '9', ')', 'from', 'dual', '*', 'ERROR', 'at', 'line', '1', ':', 'ORA', '-', '14551', ':', 'cannot', 'perform', 'a', 'DML', 'operation', 'inside', 'a', 'query', 'ORA', '-', '06512', ':', 'at', '""INTEGR.F""', ',', 'line', '1', 'And', 'OCI8', 'style', 'variable', 'binding', 'does', 'not', 'work:', 'package', 'main', 'import', '(', '""fmt""', '""github.com/jmoiron/sqlx""', '_', '""github.com/mattn/go-oci8""', ')', 'func', 'main', '(){', 'db', ',', 'err', ':=', 'sqlx.Connect(""oci8"", ""integr/integr@localhost:49161/xe"")', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'sql', ':=', 'sqlx.Rebind(sqlx.NAMED,""begin ? := f(?); end;"")', 'var', 'a', 'int', '_', ',', 'err', '=', 'db.Exec(sql, a, 333)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'fmt.Println(sql)', 'fmt.Println(a)', '}', 'Output:', 'begin', ':', 'arg1', ':=', 'f', '(:', 'arg2', ');', 'end', ';', '0', 'How', 'to', 'get', 'last', 'inserted', 'ID,', 'or', 'how', 'to', 'get', 'value', 'from', 'stored', 'funcion', 'in', 'Go', 'from', 'Oracle?']"
1491,34376141,"
","[""I'm"", 'looking', 'at', 'the', 'numeric', 'types', 'in', 'Go.', 'I', 'want', 'to', 'use', 'uint64', 'literals.', 'Is', 'this', 'possible', 'in', 'Go?', ""Here's"", 'an', 'example', 'of', 'how', ""I'd"", 'like', 'to', 'use', 'uint64', 'literals:', 'for', 'i', ':=', '2', ';', 'i', '<=', 'k', ';', 'i', '+=', '1', '{', '// I want i to be a uint64', '...', '}']"
1492,34406700,", is that what's needed? Am I missing a different feature of the language that allows me to do what I want?
","[""I'm"", 'trying', 'go', 'for', 'a', 'small', 'project', 'and', 'tried', 'to', 'write', 'these', 'functions:', 'func', 'fatal', '(', 'reason', 'string', ')', '{', 'println(reason)', 'os.Exit(1)', '}', 'func', 'fatal(err', 'error)', '{', 'fatal(err.Error())', '}', 'After', 'digging', 'about', 'a', 'bit', 'and', 'finding', 'this', 'answer,', 'which', 'referenced', 'the', 'docs', 'on', 'overloading', 'I', 'realised', 'that', 'what', 'I', 'was', 'trying', 'to', 'do', 'was', 'illegal', 'in', 'go.', 'What', 'I', 'want', 'is', 'a', 'simple', 'api', 'that', 'allows', 'me', 'to', 'call', 'fatal', 'with', 'either', 'a', 'string', 'or', 'an', 'error', 'in', 'order', 'to', 'simplify', 'my', 'logic.', 'How', 'do', 'I', 'achieve', 'this', 'or', 'a', 'similar', 'goal?', 'It', 'would', 'feel', 'inelegant', 'to', 'have', 'func', 'fatal(reason', 'string)', 'along', 'with', 'func', 'fatalErr', '(', 'err', 'error', ')', ',', 'is', 'that', ""what's"", 'needed?', 'Am', 'I', 'missing', 'a', 'different', 'feature', 'of', 'the', 'language', 'that', 'allows', 'me', 'to', 'do', 'what', 'I', 'want?']"
1493,34583722,"

Because this section implies that a chan of buffer size 3 would not block. Can anyone please clarify/assist my understanding? 
","[""I'm"", 'reading/working', 'through', 'Go', 'Concurrency', 'Patterns:', 'Pipelines', 'and', 'cancellation,', 'but', ""i'm"", 'having', 'trouble', 'understanding', 'the', 'Stopping', 'short', 'section.', 'We', 'have', 'the', 'following', 'functions:', 'func', 'sq', '(', 'in', '<-', 'chan', 'int', ')', '<-', 'chan', 'int', '{', 'out', ':=', 'make', '(', 'chan', 'int', ')', 'go', 'func', '()', '{', 'for', 'n', ':=', 'range', 'in', '{', 'out', '<-', 'n', '*', 'n', '}', 'close', '(', 'out', ')', '}()', 'return', 'out', '}', 'func', 'gen', '(', 'nums', '...', 'int', ')', '<-', 'chan', 'int', '{', 'out', ':=', 'make', '(', 'chan', 'int', ')', 'go', 'func', '()', '{', 'for', '_', ',', 'n', ':=', 'range', 'nums', '{', 'out', '<-', 'n', '}', 'close', '(', 'out', ')', '}()', 'return', 'out', '}', 'func', 'merge', '(', 'cs', '...<-', 'chan', 'int', ')', '<-', 'chan', 'int', '{', 'var', 'wg', 'sync', '.', 'WaitGroup', 'out', ':=', 'make', '(', 'chan', 'int', ',', '1', ')', '// enough space for the unread inputs', '//', 'Start', 'an', 'output', 'goroutine', 'for', 'each', 'input', 'channel', 'in', 'cs.', 'output', '//', 'copies', 'values', 'from', 'c', 'to', 'out', 'until', 'c', 'is', 'closed,', 'then', 'calls', 'wg.Done.', 'output', ':=', 'func', '(', 'c', '<-', 'chan', 'int', ')', '{', 'for', 'n', ':=', 'range', 'c', '{', 'out', '<-', 'n', '}', 'wg.Done()', '}', 'wg.Add(len(cs))', 'for', '_', ',', 'c', ':=', 'range', 'cs', '{', 'go', 'output', '(', 'c', ')', '}', '//', 'Start', 'a', 'goroutine', 'to', 'close', 'out', 'once', 'all', 'the', 'output', 'goroutines', 'are', '//', 'done.', 'This', 'must', 'start', 'after', 'the', 'wg.Add', 'call.', 'go', 'func', '()', '{', 'wg.Wait()', 'close', '(', 'out', ')', '}()', 'return', 'out', '}', 'func', 'main', '()', '{', 'in', ':=', 'gen', '(', '2', ',', '3', ')', '//', 'Distribute', 'the', 'sq', 'work', 'across', 'two', 'goroutines', 'that', 'both', 'read', 'from', 'in.', 'c1', ':=', 'sq', '(', 'in', ')', 'c2', ':=', 'sq', '(', 'in', ')', '//', 'Consume', 'the', 'first', 'value', 'from', 'output.', 'out', ':=', 'merge', '(', 'c1', ',', 'c2', ')', 'fmt.Println(<-out)', '// 4 or 9', 'return', '//', 'Apparently', 'if', 'we', 'had', 'not', 'set', 'the', 'merge', 'out', 'buffer', 'size', 'to', '1', '//', 'then', 'we', 'would', 'have', 'a', 'hanging', 'go', 'routine.', '}', 'Now,', 'if', 'you', 'notice', 'line', '2', 'in', 'merge,', 'it', 'says', 'we', 'make', 'the', 'out', 'chan', 'with', 'buffer', 'size', '1,', 'because', 'this', 'is', 'enough', 'space', 'for', 'the', 'unread', 'inputs.', 'However,', ""I'm"", 'almost', 'positive', 'that', 'we', 'should', 'allocate', 'a', 'chan', 'with', 'buffer', 'size', '2.', 'In', 'accordance', 'with', 'this', 'code', 'sample:', 'c', ':=', 'make', '(', 'chan', 'int', ',', '2', ')', '// buffer size 2', 'c', '<-', '1', '// succeeds immediately', 'c', '<-', '2', '// succeeds immediately', 'c', '<-', '3', '// blocks until another goroutine does <-c and receives 1 ', 'Because', 'this', 'section', 'implies', 'that', 'a', 'chan', 'of', 'buffer', 'size', '3', 'would', 'not', 'block.', 'Can', 'anyone', 'please', 'clarify/assist', 'my', 'understanding?']"
1494,34644754,"

I'm trying to get all of the artists, from all of the users essentially. But I can't figure what I need in my query? I've touched briefly on Map/Reduce, but it didn't seem to apply to what I'm trying to do. 
","['I', 'have', 'a', 'go', 'application', 'which', 'uses', 'mgo/mongodb.', ""I'm"", 'using', 'embedded', 'documents', 'rather', 'than', 'relational', 'ones.', 'So', 'I', 'have...', '(some', 'code', 'redacted', 'for', 'brevity).', 'type', 'User', 'struct', '{', 'Id', 'bson', '.', 'ObjectId', 'bson', ':', '""_id,omitempty""', 'json', ':', '""id""', 'Name', 'string', 'for', 'm', ':', '""name""', 'bson', ':', '""name""', 'json', ':', '""name""', 'Password', 'string', 'for', 'm', ':', '""password""', 'bson', ':', '""password,omitempty""', 'json', ':', '""password""', 'binding', ':', '""required""', 'Email', 'string', 'for', 'm', ':', '""email""', 'bson', ':', '""email,omitempty""', 'json', ':', '""email""', 'binding', ':', '""required""', 'Artists', '[]', 'Artist', 'for', 'm', ':', '""artists""', 'bson', ':', '""artists,omitempty""', 'json', ':', '""artists""', 'inline', 'Releases', '[]', 'Release', 'for', 'm', ':', '""releases""', 'bson', ':', '""releases,omitempty""', 'json', ':', '""releases""', 'inline', 'ContentFeed', '[]', 'Content', 'for', 'm', ':', '""content_feed""', 'bson', ':', '""content_feed,omitempty""', 'json', ':', '""content_feed""', 'inline', 'Profile', 'Profile', 'for', 'm', ':', '""profile""', 'bson', ':', '""profile,omitempty""', 'json', ':', '""profile""', 'inline', 'TopTracks', '[]', 'Track', 'for', 'm', ':', '""top_tracks""', 'bson', ':', '""top_tracks""', 'json', ':', '""top_tracks""', 'inline', '}', 'type', 'Artist', 'struct', '{', 'Id', 'bson', '.', 'ObjectId', 'bson', ':', '""_id,omitempty""', 'json', ':', '""id""', 'Title', 'string', 'for', 'm', ':', '""title""', 'bson', ':', '""title""', 'json', ':', '""title""', 'Genres', 'string', 'for', 'm', ':', '""genres""', 'bson', ':', '""genres""', 'json', ':', '""genres""', '}', 'func', '(', 'repo', '*', 'ArtistRepo', ')', 'GetArtists', '()', '([]', 'Artist', ',', 'error', ')', '{', 'results', ':=', '&[]', 'Artist', '{}', 'err', ':=', 'repo', '.', 'collection.Find(???).All(results)', 'return', 'results', ',', 'err', '}', ""I'm"", 'trying', 'to', 'get', 'all', 'of', 'the', 'artists,', 'from', 'all', 'of', 'the', 'users', 'essentially.', 'But', 'I', ""can't"", 'figure', 'what', 'I', 'need', 'in', 'my', 'query?', ""I've"", 'touched', 'briefly', 'on', 'Map/Reduce,', 'but', 'it', ""didn't"", 'seem', 'to', 'apply', 'to', 'what', ""I'm"", 'trying', 'to', 'do.']"
1495,34696852,"
","['I', 'am', 'trying', 'to', 'decode', 'some', 'JSON', 'retrieved', 'via', 'http.Get.', 'However,', 'when', 'I', 'check', 'the', 'structs', 'I', 'initialize', 'with', 'fmt.Println,', 'they', 'are', 'always', 'empty.', 'I', 'suspect', 'it', 'is', 'because', 'my', ""struct's"", 'structure', 'does', 'not', 'agree', 'with', 'the', 'returned', 'JSON,', 'but', 'I', 'am', 'not', 'sure', 'how', 'to', 'fix', 'it.', 'In', 'general,', 'I', 'am', 'not', 'exactly', 'quite', 'sure', 'how', 'the', 'decoder', 'works.', 'This', 'is', 'the', 'JSON:', '{', '""response""', ':[', '{', '""list""', ':', '{', '""category""', ':', '""(noun)""', ',', '""synonyms""', ':', '""histrion|player|thespian|role player|performer|performing artist""', '}', '},', '{', '""list""', ':', '{', '""category""', ':', '""(noun)""', ',', '""synonyms""', ':', '""doer|worker|person|individual|someone|somebody|mortal|soul""', '}', '}', ']', '}', 'Here', 'is', 'what', 'i', 'have', 'tried', 'so', 'far:', 'type', 'SynonymResponse', 'struct', '{', 'lists', '[]', 'SynonymList', '}', 'type', 'SynonymList', 'struct', '{', 'category', 'string', 'synonyms', 'string', '}', 'var', 'synonyms', 'SynonymResponse', ';', 'dec', ':=', 'json.NewDecoder(response.Body)', 'err', ':=', 'dec.Decode(&synonyms)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'fmt.Println(synonyms)', 'EDIT:', 'Per', ""@Leo's"", 'answer', 'and', ""@JimB's"", 'hint,', 'there', 'are', 'two', 'issues', 'with', 'my', 'attempt.', 'Below', 'is', 'the', 'proper', 'set', 'of', 'structs,', 'though', 'as', 'Leo', 'pointed', 'out,', 'this', 'will', 'be', 'empty:', 'type', 'SynonymResponses', 'struct', '{', 'resp', '[]', 'SynonymResponse', '}', 'type', 'SynonymResponse', 'struct', '{', 'listo', 'SynonymList', '}', 'type', 'SynonymList', 'struct', '{', 'cat', 'string', 'syns', 'string', '}']"
1496,34716700,"
","['When', 'I', 'tried', 'to', 'print', 'command', 'line', 'arguments', 'using', 'fmt.Println(os.Args[1:])', 'I', 'got', 'result', 'like', '[Gates', 'Bill]', 'How', 'can', 'I', 'get', 'rid', 'of', 'the', '[]', 'around', 'the', 'arguments?', 'And', 'Go', 'seems', 'to', 'eat', 'all', 'the', 'commas', 'in', 'the', 'arguments,', 'how', 'can', 'I', 'get', 'the', 'output', 'like', 'Last', 'name', ',', 'First', 'name', 'Gates', ',', 'Bill']"
1497,34724912,"

Is there a workaround that? All I could think of so far is to put UI and Notifications into separate binaries and make them to communicate with main over some sort of IPC. But I may be missing something.
","['I', 'am', 'finding', 'it', 'difficult', 'to', 'write', 'something', 'with', 'more', 'or', 'less', 'common', 'UI', 'at', 'least', 'for', 'Mac.', 'My', 'application', 'has', 'to', 'have', 'tray', 'icon', 'and', 'be', 'able', 'to', 'show', 'system', 'notifications', 'The', 'issue', 'is', 'the', 'goroutines', 'themselves.', 'Any', 'call', 'to', 'UI', 'frameworks', 'on', 'Mac', 'requires', 'that', 'the', 'call', 'is', 'made', 'from', 'main', 'thread,', 'or', 'at', 'least', 'in', 'a', 'thread-safe', 'manner.', 'The', 'issue', 'arise', 'when', 'I', 'am', 'already', 'running', 'UI', '(well,', 'for', 'GUI', 'application', 'that', 'is', 'a', 'must,', 'no?)', 'and', 'try', 'to', 'show', 'notification.', 'The', 'reason', 'for', 'this', 'seems', 'to', 'be', 'that', 'systray', 'package', 'Init', 'function', 'has', 'to', 'be', 'locked', 'to', 'main', 'thread', 'using', 'runtime.LockOsThread', 'and', 'never', 'releases', 'it.', 'Then', 'if', 'I', 'try', 'to', 'show', 'notification', 'which', 'also', 'requires', 'runtime.LockOsThread', 'it', 'causes', 'following', 'error:', '2016', '-', '01', '-', '11', '22', ':', '56', ':', '27', '.', '973', 'main', '[', '30162', ':', '4094392', ']', '***', 'Assertion', 'failure', 'in', '+[', 'NSUndoManager', '_endTopLevelGroupings', '],', '/Library/Caches/com.apple.xbs/Sources/Foundation/Foundation-1256.1/Misc.subproj/NSUndoManager.m:359', '2016', '-', '01', '-', '11', '22', ':', '56', ':', '27', '.', '974', 'main', '[', '30162', ':', '4094392', ']', '+[', 'NSUndoManager', '(', 'NSInternal', ')', '_endTopLevelGroupings', ']', 'is', 'only', 'safe', 'to', 'invoke', 'on', 'the', 'main', 'thread', '.', '2016', '-', '01', '-', '11', '22', ':', '56', ':', '27', '.', '977', 'main', '[', '30162', ':', '4094392', ']', '(', '0', 'CoreFoundation', '0', 'x00007fff8d42bae2', '__exceptionPreprocess', '+', '178', '1', 'libobjc', '.', 'A', '.', 'dylib', '0', 'x00007fff8bb03f7e', 'objc_exception_throw', '+', '48', '2', 'CoreFoundation', '0', 'x00007fff8d42b8ba', '+[', 'NSException', 'raise', ':', 'for', 'mat', ':', 'arguments', ':]', '+', '106', '3', 'Foundation', '0', 'x00007fff8cb4c88c', '-[', 'NSAssertionHandler', 'handleFailureInMethod', ':', 'object', ':', 'file', ':', 'lineNumber', ':', 'description', ':]', '+', '198', '4', 'Foundation', '0', 'x00007fff8cad24c1', '+[', 'NSUndoManager', '(', 'NSPrivate', ')', '_endTopLevelGroupings', ']', '+', '170', '5', 'AppKit', '0', 'x00007fff8514206a', '-[', 'NSApplication', 'run', ']', '+', '844', '6', 'main', '0', 'x0000000004166200', 'nativeLoop', '+', '128', '7', 'main', '0', 'x0000000004165bca', '_cgo_8c6479959095_Cfunc_nativeLoop', '+', '26', '8', 'main', '0', 'x000000000405a590', 'runtime', '.', 'asmcgocall', '+', '112', ')', '2016', '-', '01', '-', '11', '22', ':', '56', ':', '27', '.', '977', 'main', '[', '30162', ':', '4094392', ']', '***', 'Assertion', 'failure', 'in', '+[', 'NSUndoManager', '_endTopLevelGroupings', '],', '/Library/Caches/com.apple.xbs/Sources/Foundation/Foundation-1256.1/Misc.subproj/NSUndoManager.m:359', '2016', '-', '01', '-', '11', '22', ':', '56', ':', '27', '.', '978', 'main', '[', '30162', ':', '4094392', ']', 'An', 'uncaught', 'exception', 'was', 'raised', '2016', '-', '01', '-', '11', '22', ':', '56', ':', '27', '.', '978', 'main', '[', '30162', ':', '4094392', ']', '+[', 'NSUndoManager', '(', 'NSInternal', ')', '_endTopLevelGroupings', ']', 'is', 'only', 'safe', 'to', 'invoke', 'on', 'the', 'main', 'thread', '.', 'Is', 'there', 'a', 'workaround', 'that?', 'All', 'I', 'could', 'think', 'of', 'so', 'far', 'is', 'to', 'put', 'UI', 'and', 'Notifications', 'into', 'separate', 'binaries', 'and', 'make', 'them', 'to', 'communicate', 'with', 'main', 'over', 'some', 'sort', 'of', 'IPC.', 'But', 'I', 'may', 'be', 'missing', 'something.']"
1498,34823724,"

I can confirm that I am closing the request body in every handler using defer r.Body.Close().

I am using go 1.5.2. 

Any help would be appreciated.

Regards,

Sathya
","['I', 'am', 'running', 'a', 'https', 'web', 'server', 'in', 'go.', 'I', 'am', 'testing', 'it', 'using', 'a', 'angular', 'web', 'app', '(Chrome', 'browser)', 'that', 'makes', 'ajax', 'calls', 'to', 'the', 'web', 'server.', 'If', 'I', 'keep', 'hitting', 'the', 'web', 'server', 'continuously', 'everything', 'seems', 'working.', 'But', 'whenever', 'I', 'leave', 'it', 'idle', 'for', 'sometime', 'and', 'hit', 'the', 'web', 'server', 'the', 'ajax', 'call', 'from', 'browser', ""doesn't"", 'get', 'a', 'response.', 'Almost', 'always', 'I', 'see', 'this', 'log', 'line', 'in', 'my', 'server', 'log.', '2016/01/16', '04', ':', '06', ':', '47', '.', '0', '06', '977', 'http', ':', 'TLS', 'handshake', 'error', 'from', '42', '.', '21', '.', '139', '.', '47', ':', '51463', ':', 'EOF', 'I', 'can', 'confirm', 'that', 'the', 'IP', 'address', 'is', 'my', 'IP', 'address.', 'I', 'am', 'starting', 'my', 'https', 'server', 'like', 'this:', 'r', ':=', 'mux.NewRouter()', 'r.HandleFunc(""/status"", handleStatus)', 'setUpLoginEndpoint', '(&', 'cfg', '.', 'Session', ',', 'r', ')', 'setUpLogoutEndpoint', '(', 'cfg', '.', 'Session', '.', 'CookieName', ',', 'r', ')', 'setUpChangePasswordEndpoint', '(', 'cfg', '.', 'Session', '.', 'CookieName', ',', 'r', ')', 'setUpMetricSinkEndpoint', '(', 'cfg', '.', 'Metric', '.', 'SinkApiKey', ',', 'r', ')', 'setUpMetricQueryEndpoint', '(', 'cfg', '.', 'Session', '.', 'CookieName', ',', 'r', ')', 'http.ListenAndServeTLS("":443"", ""../cert.pem"", ""../keys.pem"", &Server{r})', 'I', 'can', 'confirm', 'that', 'I', 'am', 'closing', 'the', 'request', 'body', 'in', 'every', 'handler', 'using', 'defer', 'r.Body.Close().', 'I', 'am', 'using', 'go', '1.5.2.', 'Any', 'help', 'would', 'be', 'appreciated.', 'Regards,', 'Sathya']"
1499,34829606,"

The problem is that if my percentage is, say, exactly 50, I will get the following output:

50.00%


While what I want is to get:

50%


Is there any way for the format string to indicate that a maximum of 2 digits of precision should be used, but only if needed?
","[""I'm"", 'trying', 'to', 'print', 'floating', 'point', 'numbers', 'as', 'percentages,', 'and', ""I'd"", 'like', 'for', 'the', 'number', 'of', 'digits', 'after', 'the', 'decimal', 'place', 'to', 'vary', 'as', 'needed.', 'Currently', 'I', 'have:', 'fmt.Printf(""%.2f%%\\n"", 100*(value/total))', 'The', 'problem', 'is', 'that', 'if', 'my', 'percentage', 'is,', 'say,', 'exactly', '50,', 'I', 'will', 'get', 'the', 'following', 'output:', '50.00%', 'While', 'what', 'I', 'want', 'is', 'to', 'get:', '50%', 'Is', 'there', 'any', 'way', 'for', 'the', 'format', 'string', 'to', 'indicate', 'that', 'a', 'maximum', 'of', '2', 'digits', 'of', 'precision', 'should', 'be', 'used,', 'but', 'only', 'if', 'needed?']"
1500,34875888,"In Golang, i can close a TCPListener, however, i can not tell whether a TCPListener is closed or not. This info could be used to do some other logic in program.
","['The', 'problem', 'is', 'that', 'if', 'my', 'percentage', 'is,', 'say,', 'exactly', '50,', 'I', 'will', 'get', 'the', 'following', 'output:', '50.00%', 'While', 'what', 'I', 'want', 'is', 'to', 'get:', '50%', 'Is', 'there', 'any', 'way', 'for', 'the', 'format', 'string', 'to', 'indicate', 'that', 'a', 'maximum', 'of', '2', 'digits', 'of', 'precision', 'should', 'be', 'used,', 'but', 'only', 'if', 'needed?']"
1501,34926930,"

I would have a function receive from this channel and call the received functions. The functions must be executed in FIFO order. 

Is there a better method or structure to do this in Go?

This shouldn't make a difference but I am looking to queue SQL queries to run in FIFO for this. 
","['Is', 'there', 'Go', 'equivalent', 'of', ""Apple's"", 'GCD', 'serial', 'dispatch', 'queue?', 'So', 'far', 'I', 'have', 'only', 'found', 'a', 'solution', 'that', 'is', 'a', 'channel', 'of', 'functions.', 'work', ':=', 'make', '(', 'chan', 'func', '())', 'I', 'would', 'have', 'a', 'function', 'receive', 'from', 'this', 'channel', 'and', 'call', 'the', 'received', 'functions.', 'The', 'functions', 'must', 'be', 'executed', 'in', 'FIFO', 'order.', 'Is', 'there', 'a', 'better', 'method', 'or', 'structure', 'to', 'do', 'this', 'in', 'Go?', 'This', ""shouldn't"", 'make', 'a', 'difference', 'but', 'I', 'am', 'looking', 'to', 'queue', 'SQL', 'queries', 'to', 'run', 'in', 'FIFO', 'for', 'this.']"
1502,34947001,"

But what I want to ask is if this method is OK? How to make all the token generated by this method is unique ? 

What is the normal way to implement this system ?

Please give me some ideas and tell me if this method of generating token is good.

Thanks.
","['I', 'want', 'to', 'implement', 'a', 'system', 'that', 'after', 'user', 'signs', 'up,', 'user', 'will', 'receive', 'an', 'email', 'includes', 'a', 'link', 'to', 'verify', 'this', 'email', 'is', 'for', 'that', 'user.', 'The', 'way', 'I', 'generate', 'the', 'token', 'for', 'verifying', 'the', 'email', 'is', 'like', 'this:', 'import', '(', '""crypto/rand""', '""encoding/base64""', ')', 'func', 'generateToken', '()', '(', 'string', ',', 'error', ')', '{', 'b', ':=', 'make', '([]', 'byte', ',', '35', ')', '_', ',', 'err', ':=', 'rand.Read(b)', 'if', 'err', '!=', 'nil', '{', 'return', '""""', ',', 'err', '}', 'return', 'base64', '.', 'URLEncoding.EncodeToString(b)', ',', 'nil', '}', 'But', 'what', 'I', 'want', 'to', 'ask', 'is', 'if', 'this', 'method', 'is', 'OK?', 'How', 'to', 'make', 'all', 'the', 'token', 'generated', 'by', 'this', 'method', 'is', 'unique', '?', 'What', 'is', 'the', 'normal', 'way', 'to', 'implement', 'this', 'system', '?', 'Please', 'give', 'me', 'some', 'ideas', 'and', 'tell', 'me', 'if', 'this', 'method', 'of', 'generating', 'token', 'is', 'good.', 'Thanks.']"
1503,34995808,"

Here's the problem: that fourth-last line, current := , throws a compiler error, 'current declared and not used'. I want to say ""Yeah, I know it's not used after that point reading downward, but it's declared inside a loop, so its value matters on the next iteration."" But I can't work out how, or if I've done something stupid. I'm totally clueless about Go, obviously. But to me, thinking through it, the logic is sound. Am I messing something up?

(Note: I'm aware of the oversight that a draw of [1 2 3] won't be equal to [2 3 1], ignoring that for now.)
","['Poor', 'title,', 'but', 'I', ""didn't"", 'know', 'how', 'else', 'to', 'describe', 'it', 'within', 'the', 'character', 'limit.', 'As', 'a', 'learning', 'exercise,', ""I'm"", 'trying', 'to', 'write', 'a', 'little', 'Go', 'program', 'that', 'simulates', 'a', 'lottery', 'draw.', 'It', 'draws', 'six', 'random', 'numbers', 'to', 'be', 'the', 'winning', 'set,', 'then', 'continually', 'draws', 'random', 'arrays', 'of', 'random', 'ints', 'until', 'you', 'get', 'that', 'set', 'again.', 'First', 'I', 'wrote', 'a', 'function', 'which', 'takes', 'a', 'channel', 'and', 'infinitely', 'loops', '""add', 'array', 'of', '6', 'random', 'ints', 'to', 'the', 'channel"":', 'func', 'draw', '(', 'ch', 'chan', '<-', '[', '6', ']', 'int', ')', '{', 'generator', ':=', 'rand.New(rand.NewSource(time.Now().UnixNano()))', 'for', '{', 'ch', '<-', '[', '6', ']', 'int', '{', 'generator.Intn(100)', ',', 'generator.Intn(100)', ',', 'generator.Intn(100)', ',', 'generator.Intn(100)', ',', 'generator.Intn(100)', ',', 'generator.Intn(100)', ',', '}', '}', '}', 'Then', 'in', 'main()', 'I', 'specify', 'two', 'OS', 'threads,', 'create', 'a', 'channel', 'that', 'can', 'hold', '250', 'arrays', 'of', '6', 'ints,', 'and', 'start', 'my', 'draw()', 'function', 'in', 'a', 'goroutine.', 'runtime.GOMAXPROCS(2)', 'ch', ':=', 'make', '(', 'chan', '[', '6', ']', 'int', ',', '250', ')', 'go', 'draw', '(', 'ch', ')', 'Next', 'I', 'take', 'a', 'winning', 'set', '(eg', '[4', '8', '15', '16', '23', '42])', 'from', 'the', 'channel,', 'then', 'a', ""'current'"", 'set,', 'meaning', 'the', 'most', 'recent', 'draw.', 'I', 'set', 'my', 'game_played', 'counter', 'to', '1:', 'winning', ':=', '<-', 'ch', 'current', ':=', '<-', 'ch', 'games_played', ':=', '1', ""Here's"", 'the', 'tricky', 'bit.', 'In', 'an', 'infinite', 'loop,', 'I', 'check', 'if', 'the', 'current', 'draw', 'is', 'equal', 'to', 'the', 'winning', 'draw.', 'If', 'it', 'is,', 'I', 'print', 'the', 'number', 'of', 'games', 'played,', 'and', 'break', 'from', 'the', 'loop.', 'If', 'it', ""isn't,"", 'I', 'set', 'current', 'to', 'a', 'new', 'draw,', 'and', 'increment', 'the', 'counter.', 'The', 'loop', 'should', 'then', 'run', 'the', 'if', 'winning', '==', 'current', '...', 'check', 'again', 'over', 'and', 'over', 'until', ""there's"", 'a', 'match.', 'for', '{', 'if', 'winning', '==', 'current', '{', 'fmt.Println(games_played)', 'break', '}', 'else', '{', 'current', ':=', '<-', 'ch', 'games_played', '+=', '1', '}', '}', ""Here's"", 'the', 'problem:', 'that', 'fourth-last', 'line,', 'current', ':=', ',', 'throws', 'a', 'compiler', 'error,', ""'current"", 'declared', 'and', 'not', ""used'."", 'I', 'want', 'to', 'say', '""Yeah,', 'I', 'know', ""it's"", 'not', 'used', 'after', 'that', 'point', 'reading', 'downward,', 'but', ""it's"", 'declared', 'inside', 'a', 'loop,', 'so', 'its', 'value', 'matters', 'on', 'the', 'next', 'iteration.""', 'But', 'I', ""can't"", 'work', 'out', 'how,', 'or', 'if', ""I've"", 'done', 'something', 'stupid.', ""I'm"", 'totally', 'clueless', 'about', 'Go,', 'obviously.', 'But', 'to', 'me,', 'thinking', 'through', 'it,', 'the', 'logic', 'is', 'sound.', 'Am', 'I', 'messing', 'something', 'up?', '(Note:', ""I'm"", 'aware', 'of', 'the', 'oversight', 'that', 'a', 'draw', 'of', '[1', '2', '3]', ""won't"", 'be', 'equal', 'to', '[2', '3', '1],', 'ignoring', 'that', 'for', 'now.)']"
1504,35029311,"I am writing a web app using Golang, and I am writing the file upload part now, but I don't know what is the most secure way to do it.

Can anyone give me some information? Thanks.

Edit: I mean how to prevent users upload their file to the position other than the position I want. User may modify the filename to cause it to be uploaded to a specific directory. Are there any way to prevent it?

And I want to ask if the hacking technique like web shell workable to the web app written in Golang? I think is not, but I want to check if my thinking is right.
","['I', 'am', 'writing', 'a', 'web', 'app', 'using', 'Golang,', 'and', 'I', 'am', 'writing', 'the', 'file', 'upload', 'part', 'now,', 'but', 'I', ""don't"", 'know', 'what', 'is', 'the', 'most', 'secure', 'way', 'to', 'do', 'it.', 'Can', 'anyone', 'give', 'me', 'some', 'information?', 'Thanks.', 'Edit:', 'I', 'mean', 'how', 'to', 'prevent', 'users', 'upload', 'their', 'file', 'to', 'the', 'position', 'other', 'than', 'the', 'position', 'I', 'want.', 'User', 'may', 'modify', 'the', 'filename', 'to', 'cause', 'it', 'to', 'be', 'uploaded', 'to', 'a', 'specific', 'directory.', 'Are', 'there', 'any', 'way', 'to', 'prevent', 'it?', 'And', 'I', 'want', 'to', 'ask', 'if', 'the', 'hacking', 'technique', 'like', 'web', 'shell', 'workable', 'to', 'the', 'web', 'app', 'written', 'in', 'Golang?', 'I', 'think', 'is', 'not,', 'but', 'I', 'want', 'to', 'check', 'if', 'my', 'thinking', 'is', 'right.']"
1505,35036951,"I want to get the offset in seconds from a specified time zone. That is exactly what tz_offset() in Perl's Time::Zone does: ""determines the offset from GMT in seconds of a specified timezone"".

Is there already a way of doing this in Go? The input is a string that has the time zone name and that's it, but I know that Go has LoadLocation() in the time package, so string => offset or location => offset should be fine.

Input: ""MST""

Output: -25200
","[""Here's"", 'the', 'problem:', 'that', 'fourth-last', 'line,', 'current', ':=', ',', 'throws', 'a', 'compiler', 'error,', ""'current"", 'declared', 'and', 'not', ""used'."", 'I', 'want', 'to', 'say', '""Yeah,', 'I', 'know', ""it's"", 'not', 'used', 'after', 'that', 'point', 'reading', 'downward,', 'but', ""it's"", 'declared', 'inside', 'a', 'loop,', 'so', 'its', 'value', 'matters', 'on', 'the', 'next', 'iteration.""', 'But', 'I', ""can't"", 'work', 'out', 'how,', 'or', 'if', ""I've"", 'done', 'something', 'stupid.', ""I'm"", 'totally', 'clueless', 'about', 'Go,', 'obviously.', 'But', 'to', 'me,', 'thinking', 'through', 'it,', 'the', 'logic', 'is', 'sound.', 'Am', 'I', 'messing', 'something', 'up?', '(Note:', ""I'm"", 'aware', 'of', 'the', 'oversight', 'that', 'a', 'draw', 'of', '[1', '2', '3]', ""won't"", 'be', 'equal', 'to', '[2', '3', '1],', 'ignoring', 'that', 'for', 'now.)']"
1506,35084268,"

Run it on playground
","['I', 'have', 'one', 'Golang', 'struct', 'shared', 'among', 'multiple', 'goroutines.', 'For', 'concurrent', 'access', 'to', 'struct', 'members,', 'there', 'is', 'the', 'mutex', 'sync.RWMutex.', 'For', 'struct', 'member', 'that', 'is', 'accessed', 'by', 'one', 'single', 'goroutine,', 'is', 'there', 'need', 'of', 'mutex', 'protection?', 'For', 'example,', 'in', 'the', 'code', 'below,', 'one', 'single', 'writer', 'goroutine', 'accesses', 'the', 'member', 'shared.exclusiveCounter,', 'without', 'any', 'lock', 'protection.', 'Is', 'this', 'correct/safe?', 'Or', 'is', 'there', 'need', 'of', 'mutex', 'because', 'the', 'whole', 'struct', 'is', 'accessed', 'by', 'multiple', 'goroutines', 'thru', 'a', 'shared', 'pointer?', 'package', 'main', 'import', '(', '""fmt""', '""sync""', '""time""', ')', 'func', 'main', '()', '{', 's', ':=', '&', 'shared', '{', 'mutex', ':', '&', 'sync', '.', 'RWMutex', '{}}', 'readerDone', ':=', 'make', '(', 'chan', 'int', ')', 'writerDone', ':=', 'make', '(', 'chan', 'int', ')', 'go', 'reader', '(', 's', ',', 'readerDone', ')', 'go', 'writer', '(', 's', ',', 'writerDone', ')', '<-', 'readerDone', '<-', 'writerDone', '}', 'type', 'shared', 'struct', '{', 'mutex', '*', 'sync', '.', 'RWMutex', 'sharedCounter', 'int', '// member shared between multiple goroutines, protected by mutex', 'exclusiveCounter', 'int', '// member exclusive of one goroutine -- is mutex needed?', '}', 'func', '(', 's', '*', 'shared', ')', 'readCounter', '()', 'int', '{', 'defer', 's', '.', 'mutex.RUnlock()', 's', '.', 'mutex.RLock()', 'return', 's', '.', 'sharedCounter', '}', 'func', '(', 's', '*', 'shared', ')', 'setCounter', '(', 'i', 'int', ')', '{', 'defer', 's', '.', 'mutex.Unlock()', 's', '.', 'mutex.Lock()', 's', '.', 'sharedCounter', '=', 'i', '}', 'func', 'reader', '(', 's', '*', 'shared', ',', 'done', 'chan', '<-', 'int', ')', '{', 'for', '{', 'time.Sleep(2 * time.Second)', 'counter', ':=', 's.readCounter()', 'fmt.Printf(""reader: read counter=%d\\n"", counter)', 'if', 'counter', '>', '5', '{', 'break', '}', '}', 'fmt.Printf(""reader: exiting\\n"")', 'done', '<-', '1', '}', 'func', 'writer', '(', 's', '*', 'shared', ',', 'done', 'chan', '<-', 'int', ')', '{', 's', '.', 'exclusiveCounter', '=', '0', 'for', '{', 'time.Sleep(1 * time.Second)', 's', '.', 'exclusiveCounter', '++', 'fmt.Printf(""writer: writing counter=%d\\n"", s.exclusiveCounter)', 's.setCounter(s.exclusiveCounter)', 'if', 's', '.', 'exclusiveCounter', '>', '5', '{', 'break', '}', '}', 'fmt.Printf(""writer: exiting\\n"")', 'done', '<-', '1', '}', 'Run', 'it', 'on', 'playground']"
1507,35141669,".  I tried converting the a uint64 as well, and got an almost identical message.
","['I', 'have', 'a', 'field', 'that', 'is', 'of', 'type', 'fixed64', 'in', 'a', '.proto', 'file.', 'I', 'want', 'to', 'read', 'it', 'as', 'an', 'int64', 'field:', 'score', ':=', 'int64', '(', 'pb_obj', '.', 'Score', ')', 'When', 'I', 'try', 'to', 'compile', 'the', 'line', 'agove', 'I', 'get', 'the', 'error', 'message', 'cannot', 'convert', 'pb_obj.Score (type *uint64)', 'to', 'type', 'int64', '.', 'I', 'tried', 'converting', 'the', 'a', 'uint64', 'as', 'well,', 'and', 'got', 'an', 'almost', 'identical', 'message.']"
1508,35202405,"

I found this article referring to node.js indicating to add /websocket to my client websocket string, though it did not solve the problem and resulted in a 404

I thought response code 200 is good, do I need to convert the request to a websocket somehow and maybe it is defaulting to http? If so how can I do this?
","['I', 'have', 'a', 'simple', 'go', 'web', 'server', 'which', 'serves', 'on', 'port', 'localhost:8080', 'an', 'public', 'folder', 'containing', 'both', 'an', 'html', 'file', 'as', 'well', 'as', 'a', 'client', 'script', 'with', 'websocket', 'logic.', 'in', 'my', 'main.go', 'file', 'listener', ',', 'err', ':=', 'net.listen(""tcp"", ""localhost:8080"")', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', '//', 'full', 'code', 'in', 'gist', 'https:gist.github.com/Kielan/98706aaf5dc0be9d6fbe', 'then', 'in', 'my', 'client', 'script', 'try', '{', 'var', 'sock', '=', 'new', 'WebSocket', '(', '""ws://127.0.0.1:8080""', ');', 'console.log(""Websocket - status: "" + sock.readyState)', ';', 'sock', '.', 'onopen', '=', 'func', 'tion', '(', 'message', ')', '{', 'console.log(""CONNECTION opened..."" + this.readyState)', ';', '//', 'onmessage,', 'onerr,', 'onclose,', 'ect...', '}', 'I', 'get', 'the', 'error', 'in', 'chrome', 'WebSocket', 'connection', 'to', ""'ws://127.0.0.1:8080/'"", 'failed', ':', 'Error', 'during', 'WebSocket', 'handshake', ':', 'Unexpected', 'response', 'code', ':', '200', 'and', 'Firefox', 'Firefox', 'can', 't', 'establish', 'a', 'connection', 'to', 'the', 'server', 'at', 'ws', '://', '127', '.', '0', '.', '0', '.', '1', ':', '8080/.', 'I', 'found', 'this', 'article', 'referring', 'to', 'node.js', 'indicating', 'to', 'add', '/websocket', 'to', 'my', 'client', 'websocket', 'string,', 'though', 'it', 'did', 'not', 'solve', 'the', 'problem', 'and', 'resulted', 'in', 'a', '404', 'I', 'thought', 'response', 'code', '200', 'is', 'good,', 'do', 'I', 'need', 'to', 'convert', 'the', 'request', 'to', 'a', 'websocket', 'somehow', 'and', 'maybe', 'it', 'is', 'defaulting', 'to', 'http?', 'If', 'so', 'how', 'can', 'I', 'do', 'this?']"
1509,35250981,"

Output : 
Final String  map[group:map[1: Hi ] user:map[2: William ] hashTag:map[1: sosos ]]

Expected Output : 

Final String  map[group:map[1: Hi ] user:map[1: John, 2: William ] hashTag:map[1: sosos ]] 

It might be duplicate of 

Runtime error: ""assignment to entry in nil map""

Runtime error: assignment to entry in nil map

but not understand kindly provide me a solution. Thanks
","[""I'm"", 'new', 'with', 'galang', 'and', 'I', 'want', 'to', 'concat', 'string', 'with', 'nested', 'map.', 'Below', 'is', 'the', 'dummy', 'code', 'given,', 'point', 'out', 'my', 'mistake.', 'Thanks', 'in', 'advance', 'import', '(', '""fmt""', '""strconv""', ')', 'func', 'main', '()', '{', 'str', ':=', '""Hello @John martin #sosos &Hi @William ""', 'var', 'key', 'string', '=', '""""', 'var', 'ku', 'int', '=', '0', 'var', 'kh', 'int', '=', '0', 'var', 'kg', 'int', '=', '0', 'var', 'id', 'string', 'var', 'col', 'string', 'var', 'retMap', '=', 'make', '(', 'map', '[', 'string', ']', 'map', '[', 'string', ']', 'string', ')', 'retMap', '[', 'key', ']', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'str', ');', 'i', '++', '{', '//', 'fmt.Println(string(str[i]),', '""', '>>', '"",', 'str[i])', 'if', 'str', '[', 'i', ']', '==', '64', '||', 'str', '[', 'i', ']', '==', '35', '||', 'str', '[', 'i', ']', '==', '38', '{', 'if', 'str', '[', 'i', ']', '==', '64', '{', 'ku', '++', 'key', '=', '""user""', 'id', '=', 'strconv.Itoa(ku)', '}', 'else', 'if', 'str', '[', 'i', ']', '==', '35', '{', 'kh', '++', 'key', '=', '""hashTag""', 'id', '=', 'strconv.Itoa(kh)', '}', 'else', '{', 'kg', '++', 'key', '=', '""group""', 'id', '=', 'strconv.Itoa(kg)', '}', 'retMap', '[', 'key', ']', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', '// If not assign here then it gives runtime error ""panic: assignment to entry in nil map""', 'for', 'j', ':=', 'i', '+', '1', ';', 'j', '<', 'len', '(', 'str', ');', 'j', '++', '{', 'col', '=', 'col', '+', 'string', '(', 'str', '[', 'j', '])', 'if', 'str', '[', 'j', ']', '==', '32', '{', 'j', '=', 'len', '(', 'str', ')', '-', '1', 'retMap', '[', 'key', '][', 'id', ']', '=', 'retMap', '[', 'key', '][', 'id', ']', '+', 'col', 'col', '=', '"" ""', '}', '}', '}', '}', 'fmt.Println(""Final String "",retMap)', '}', 'Output', ':', 'Final', 'String', 'map[group:map[1:', 'Hi', ']', 'user:map[2:', 'William', ']', 'hashTag:map[1:', 'sosos', ']]', 'Expected', 'Output', ':', 'Final', 'String', 'map[group:map[1:', 'Hi', ']', 'user:map[1:', 'John,', '2:', 'William', ']', 'hashTag:map[1:', 'sosos', ']]', 'It', 'might', 'be', 'duplicate', 'of', 'Runtime', 'error:', '""assignment', 'to', 'entry', 'in', 'nil', 'map""', 'Runtime', 'error:', 'assignment', 'to', 'entry', 'in', 'nil', 'map', 'but', 'not', 'understand', 'kindly', 'provide', 'me', 'a', 'solution.', 'Thanks']"
1510,35252253,"

I checked this links too :
http://shadynasty.biz/blog/2012/09/05/auth-and-sessions/
https://www.youtube.com/watch?v=p0tGnjW_xxI
","['I', 'am', 'trying', 'to', 'authenticate', 'a', 'user', '(using', 'email', 'and', 'password)', 'in', 'golang', 'but', 'I', 'am', 'having', 'some', 'problems', 'with', 'sessions.', 'It', 'seems', 'like', 'I', 'cant', 'retrieve', 'the', 'session', 'value', 'from', '/login/', 'to', '/', '(home)', 'page.', 'User', 'Registration', 'hashedPassword', ',', '_', ':=', 'bcrypt.GenerateFromPassword([]byte(r.Form[""passwordSignup""][0]), bcrypt.DefaultCost)', 'err', '=', 'c', '.', 'Insert', '(&', 'model', '.', 'UserModel', '{', 'Email', ':', 'r', '.', 'Form', '[', '""emailSignup""', '][', '0', '],', 'Password', ':', 'string', '(', 'hashedPassword', '),', 'CreatedAt', ':', 'time.Now()', ',', '})', '//', 'TODO', ':', 'should', 'session', 'management', 'be', 'made', 'in', 'here', '???', '//', 'you', 'can', 'use', 'gorilla', 'sessions', 'if', 'you', 'want', 'as', 'far', 'it', 'works', 'http.SetCookie(w, cookie)', 'http.Redirect(w, r, ""/"", 301) // goes to the homepage(only accessed by authenticated users)', 'Login', 'if', 'r', '.', 'Form', '[', '""emailLogin""', '][', '0', ']', '==', 'result', '.', 'Email', '&&', 'bcrypt.CompareHashAndPassword([]byte(result.Password), []byte(r.Form[""passwordLogin""][0]))', '==', 'nil', '{', '//', 'TODO', ':', 'Handling', 'the', 'session', 'in', 'here', 'http.Redirect(w, r, ""/"", 301)', '// goes to the home page', '}', 'else', '{', 'http.Redirect(w, r, ""/login/"", 301)', '}', 'I', 'checked', 'this', 'links', 'too', ':', 'http://shadynasty.biz/blog/2012/09/05/auth-and-sessions/', 'https://www.youtube.com/watch?v=p0tGnjW_xxI']"
1511,35257784,"

Would appreciate assistance
","[""I'm"", 'new', 'to', 'go', '(coming', 'from', 'the', 'C++', 'world)', ""I've"", 'created', 'a', 'new', 'writer,', 'which', '""inherits""', 'from', 'io.writer:', 'type', 'httpWriter', 'struct', '{', 'io', '.', 'Writer', '}', 'Next', ""I've"", 'implemented', 'the', 'Write()', 'function', 'of', 'the', 'io.Writer', 'interface:', 'func', '(', 'w', '*', 'httpWriter', ')', 'Write', '(', 'p', '[]', 'byte', ')', '(', 'n', 'int', ',', 'err', ',', 'error', '){...}', 'Then,', ""I've"", 'redirected', 'all', 'output', 'to', 'that', 'writer.', ""I'm"", 'having', 'truble', 'to', 'print', 'the', 'actual', 'string', 'in', 'the', 'Write()', 'implementation.', ""I've"", 'tried', 'all', 'string', 'formatting', 'I', 'could', 'find', 'in', 'the', 'documentation,', 'but', 'none', 'of', 'them', 'give', 'me', 'the', 'original', 'string', 'as', 'an', 'output.', 'fmt.Printf(""%s\\n"",p)', 'etc', '..', 'Would', 'appreciate', 'assistance']"
1512,35327609,"

Do I need to do something like that or is there a cleaner way to go about this? Or is me running the 100,000 concurrent tasks not an issue?
","['So', 'I', 'come', 'accross', 'this', 'issue', 'with', 'go', 'a', 'lot.', ""Let's"", 'say', 'I', 'have', 'a', 'text', 'file', 'with', '100,000', 'lines', 'of', 'text.', 'Now', 'I', 'wanna', 'save', 'all', 'these', 'lines', 'to', 'a', 'db.', 'So', 'I', 'would', 'do', 'something', 'like', 'this:', 'file', ',', '_', ':=', 'iotuil.ReadFile(""file.txt"")', 'fileLines', ':=', 'strings.Split(string(file), ""\\n"")', 'Now', 'I', 'would', 'loop', 'over', 'all', 'the', 'lines', 'in', 'the', 'file:', 'for', '_', ',', 'l', ':=', 'range', 'fileLines', '{', 'saveToDB', '(', 'l', ')', '}', 'Now', 'I', 'wanna', 'run', 'this', 'saveToDB', 'func', 'concurrently:', 'var', 'wg', 'sync', '.', 'WaitGroup', 'for', '_', ',', 'l', ':=', 'range', 'fileLines', '{', 'wg.Add(1)', 'go', 'saveToDB', '(', 'l', ',', '&', 'wg', ')', '}', 'wg.Wait()', 'I', ""don't"", 'know', 'if', 'this', 'is', 'a', 'problem', 'or', 'not', 'but', 'that', 'would', 'run', '100,000', 'concurrent', 'functions.', 'Is', 'there', 'any', 'way', 'of', 'saying', 'hey', 'run', '100', 'concurrent', 'functions', 'wait', 'for', 'all', 'of', 'those', 'to', 'finish', 'then', 'run', '100', 'more.', 'for', 'i', ',', '_', ':=', 'range', 'fileLine', '{', 'for', 't', '=', '0', ';', 't', '<', '100', ';', 't', '++{', 'wg.Add(1)', 'go', 'saveToDB', '(', 'fileLine', '[', 'i', '],', '&', 'wg', ')', '}', 'wg.Wait()', '}', 'Do', 'I', 'need', 'to', 'do', 'something', 'like', 'that', 'or', 'is', 'there', 'a', 'cleaner', 'way', 'to', 'go', 'about', 'this?', 'Or', 'is', 'me', 'running', 'the', '100,000', 'concurrent', 'tasks', 'not', 'an', 'issue?']"
1513,35379378,"

How to realize this inserting in a proper way?
","[""I'm"", 'rather', 'new', 'in', 'go,', 'and', 'I', 'searched', 'for', 'this', 'trouble', 'on', 'this', 'site,', 'and', 'founed', 'answered', 'questions,', 'but', 'cannot', 'implement', 'those', 'answers', 'to', 'my', 'case.', 'I', 'have', 'a', 'code', ':', 'func', 'receiveWork', '(', 'out', '<-', 'chan', 'Work', ')', 'map', '[', 'string', '][]', 'ChartElement', '{', 'var', 'countedData', 'map', '[', 'string', '][]', 'ChartElement', 'for', 'el', ':=', 'range', 'out', '{', 'countedData', '[', 'el', '.', 'Name', ']', '=', 'el', '.', 'Data', '}', 'fmt.Println(""This is never executed !!!"")', 'return', 'countedData', '}', 'there', 'are', 'no', 'troubles', 'with', 'structs', 'outside', 'this', 'method.', 'Also', 'Println', 'not', 'executes(as', 'test', 'that', 'panic', 'is', 'here).', 'I', 'understands', 'that', 'the', 'trouble', 'is', 'in', 'incrementing', 'data', 'to', 'the', 'structure.', 'There', 'are', 'some', 'goroutines', ',', 'that', 'are', 'sending', 'data', 'to', 'channel,', 'and', 'receiveWork', 'method', 'rgabs', 'it', 'all', 'and', 'should', 'make', 'a', 'map', 'like', 'this:', 'map', '=>', '""typeOne""', '=>', '[', 'ChartElement', ',', 'ChartElement', ',', 'ChartElement', ',', '],', '""typeTwo""', '=>', '[', 'ChartElement', ',', 'ChartElement', ',', 'ChartElement', ',', ']', 'How', 'to', 'realize', 'this', 'inserting', 'in', 'a', 'proper', 'way?']"
1514,35384033,"

How can I get the program to use all the cores at 100% while using an RNG?
","['I', 'am', 'using', 'version', 'go1.5.3', 'linux/amd64', 'of', 'the', 'go', 'language.', 'I', 'have', 'a', 'go', 'routine', 'that', 'performs', 'a', 'mathematical', 'operation', 'that', 'takes', 'some', 'time.', 'Each', 'go', 'routine', 'acts', 'independently', 'and', 'does', 'not', 'have', 'to', 'block.', 'My', 'systems', 'has', '12', 'cores.', 'If', 'I', 'spawn', '12', 'go', 'routines,', 'it', 'only', 'takes', 'the', 'average', 'use', 'of', 'all', 'cores', 'up', 'to', '31%.', 'If', 'I', 'use', '24', 'go', 'routines,', 'it', 'brings', 'the', 'average', 'use', 'of', 'all', 'cores', 'up', 'to', '49%.', 'If', 'I', 'use', '240,', 'i', 'get', '77%.', '2400', 'gives', 'me', '76%.', 'Apparently,', 'the', 'rand.Intn(j)', 'operation', 'is', 'what', 'is', 'slowing', 'it', 'down.', 'Without', 'it,', 'the', 'cores', 'will', 'run', 'at', '100%.', 'func', 'DoSomeMath', '()', 'int', '{', 'k', ':=', '0', 'for', 'i', ':=', '0', ';', 'i', '<', '1000', ';', 'i', '++', '{', 'j', ':=', 'i', '*', 'i', '+', '2', 'k', '+=', 'i', '*', 'rand.Intn(j)', '}', 'return', 'k', '}', 'How', 'can', 'I', 'get', 'the', 'program', 'to', 'use', 'all', 'the', 'cores', 'at', '100%', 'while', 'using', 'an', 'RNG?']"
1515,35432369,"

How can I modify the doc comments for go-swagger to achieve that? Is there any documentation that describes the exact comments format for go-swagger?
","['I', 'am', 'trying', 'to', 'generate', 'json', 'API', 'documentation', 'compliant', 'with', 'Swagger2.0', 'specification', 'using', 'go-swagger.', 'I', 'have', 'a', 'problem', 'generating', 'JSON', 'doc', 'for', 'the', 'route', 'with', 'path', 'param', 'which', 'looks', 'like', 'this:', 'PUT', '/foo/{bar}', 'Currently', 'my', 'godoc', 'looks', 'like', 'this:', '//', 'Update', 'bar', 'in', 'foo', '//', 'swagger:route', 'PUT', '/foo/{bar}', 'updateBar', '//', 'Parameters:', '//', 'bar:', 'barParam', '//', 'Responses:', '//', '500:', 'myErrorResponse', 'func', '(', 'h', '*', 'handler', ')', 'update', '(', 'req', '*', 'http', '.', 'Request', ',', 'params', 'martini', '.', 'Params', ')', '(', 'int', ',', 'string', ')', 'Struct', 'wrapping', 'bar', 'parameter:', '//', 'swagger:parameters', 'barParam', 'type', 'BarParam', 'struct', '{', '//', 'aaaa', '//', 'in:', 'path', 'bar', 'string', '}', 'When', 'I', 'run:', 'swagger', 'generate', 'spec', '-', 'o', './', 'swagger', '.', 'json', 'The', 'generated', 'JSON', 'currently', 'looks', 'like', 'this:', '""/foo/{bar}""', ':', '{', '""put""', ':', '{', '""description""', ':', '""bar: barParam""', ',', '""operationId""', ':', '""updateBar""', ',', '""responses""', ':', '{', '""500""', ':', '{', '""$ref""', ':', '""#/responses/myErrorResponse""', '}', '},', '""summary""', ':', '""Parameters:""', '}', '}', 'But', 'I', 'want', 'to', 'generate', 'the', 'following', 'JSON', '(compliant', 'with', 'Swagger2.0):', '""/v2/foo/{bar}""', ':', '{', '""put""', ':', '{', '""operationId""', ':', '""updateBar""', ',', '""responses""', ':', '{', '""500""', ':', '{', '""$ref""', ':', '""#/responses/myErrorResponse""', '}', '},', '""parameters""', ':', '[', '{', '""in""', ':', '""path""', ',', '""name""', ':', '""bar""', ',', '""description""', ':', '""aaaa""', ',', '""required""', ':', 'true', ',', '""type""', ':', '""string""', '}', ']', '}', '}', 'How', 'can', 'I', 'modify', 'the', 'doc', 'comments', 'for', 'go-swagger', 'to', 'achieve', 'that?', 'Is', 'there', 'any', 'documentation', 'that', 'describes', 'the', 'exact', 'comments', 'format', 'for', 'go-swagger?']"
1516,35555692,"

This is working great on Mac.  Each line using log.Printf is logged on a separate line, but on Windows the line breaks do not show and I get one lines without line breaks.  I am well aware of ""\r"" and ""\r\n"" difference between unix and windows.  But I thought that log.Printf will behave appropriately based on the platform it is run on?

If my assumption is wrong then what are some of the options that I have to make sure that the log file is readable on Windows?  If I can, I do not want to pass flags, e.g., -platform windows or some such thing.  Can this be handled in a transparent manner?
","['I', 'am', 'developing', 'a', 'Go', 'program', 'on', 'a', 'Mac', 'which', 'has', 'Parallels', 'installed', 'with', 'Windows', 'so', 'that', 'I', 'can', 'test', 'on', 'both', 'platforms.', 'My', 'program', 'works', 'well.', 'I', 'can', 'compile', 'a', 'Windows', '"".exe""', 'file', 'on', 'my', 'Mac', 'and', 'run', 'it', 'from', 'Windows', 'and', 'it', 'works', 'well', 'except', 'the', 'log', 'file.', 'I', 'have', 'set', 'the', 'logger', 'to', 'write', 'its', 'output', 'to', 'a', 'file', 'like', 'so:', 'log.SetOutput(projectsLog)', 'Where', 'projectsLog', 'is', 'declare', 'above', 'it', 'as', 'shown', 'below:', 'projectsLog', '*', 'os', '.', 'File', 'I', 'am', 'using', 'log.Printf', 'statements', 'since', 'I', 'want', 'formatted', 'output.', 'An', 'example', 'is', 'shown', 'below:', 'log.Printf(""Error: wrong Hra Class value %s in row %v for project/path %s"", hraClass, (rowNum + 1), testDir)', 'This', 'is', 'working', 'great', 'on', 'Mac.', 'Each', 'line', 'using', 'log.Printf', 'is', 'logged', 'on', 'a', 'separate', 'line,', 'but', 'on', 'Windows', 'the', 'line', 'breaks', 'do', 'not', 'show', 'and', 'I', 'get', 'one', 'lines', 'without', 'line', 'breaks.', 'I', 'am', 'well', 'aware', 'of', '""\\r""', 'and', '""\\r\\n""', 'difference', 'between', 'unix', 'and', 'windows.', 'But', 'I', 'thought', 'that', 'log.Printf', 'will', 'behave', 'appropriately', 'based', 'on', 'the', 'platform', 'it', 'is', 'run', 'on?', 'If', 'my', 'assumption', 'is', 'wrong', 'then', 'what', 'are', 'some', 'of', 'the', 'options', 'that', 'I', 'have', 'to', 'make', 'sure', 'that', 'the', 'log', 'file', 'is', 'readable', 'on', 'Windows?', 'If', 'I', 'can,', 'I', 'do', 'not', 'want', 'to', 'pass', 'flags,', 'e.g.,', '-platform', 'windows', 'or', 'some', 'such', 'thing.', 'Can', 'this', 'be', 'handled', 'in', 'a', 'transparent', 'manner?']"
1517,35576337,"

My problem, is that I do not know where to put structs.go because it contains structures used in several package, as in the 'main.go' code.

How to share efficiently this structs.go file ? Should I include it (via a symlink to the file) in each of the package I defined, i.e serverand routines and also in main ?

My method may be awkward because I'm a beginner in Go, and in programming generally. 
","['I', 'have', 'a', 'short', 'program', 'in', 'Go', 'with', 'the', 'following', 'files', 'part', 'of', 'it.', 'Program', 'directory', 'structure:', 'myprogram', '/', 'main', '.', 'go', 'server', '.', 'go', 'routines', '.', 'go', 'struct', 's', '.', 'go', 'These', 'different', 'files', 'contain', 'different', 'function.', 'The', 'structs.go', 'file', 'contains', 'a', 'list', 'of', 'structure', 'type', 'defined,', 'and', 'used', 'in', 'several', 'files', 'of', 'my', 'program.', 'What', 'I', 'want', 'to', 'do,', 'now', 'is', 'to', 'split', 'my', 'program', 'into', 'package', 'like', 'in', 'this', 'example', ':', 'main', '/', 'main', '.', 'go', '// the main program', 'server', '/', 'server', '.', 'go', '// a package imported in main', 'routines', '/', 'routines', '.', 'go', '// a package imported in main', 'My', 'problem,', 'is', 'that', 'I', 'do', 'not', 'know', 'where', 'to', 'put', 'structs.go', 'because', 'it', 'contains', 'structures', 'used', 'in', 'several', 'package,', 'as', 'in', 'the', ""'main.go'"", 'code.', 'How', 'to', 'share', 'efficiently', 'this', 'structs.go', 'file', '?', 'Should', 'I', 'include', 'it', '(via', 'a', 'symlink', 'to', 'the', 'file)', 'in', 'each', 'of', 'the', 'package', 'I', 'defined,', 'i.e', 'serverand', 'routines', 'and', 'also', 'in', 'main', '?', 'My', 'method', 'may', 'be', 'awkward', 'because', ""I'm"", 'a', 'beginner', 'in', 'Go,', 'and', 'in', 'programming', 'generally.']"
1518,35605238,"

The services are created successfully but it doesn not get started. It gives startup timeout error while starting the service.

I need to start the application from windows services.

Thanks in advance.
","['I', 'have', 'a', 'application', 'with', 'golang', 'as', 'the', 'backend.', 'I', 'can', 'create', 'a', 'service', 'using', 'the', 'sc', 'and', 'nssm', 'as', 'below', ':', 'sc', 'create', 'TestService', 'binpath', '=', 'C', ':', 'User', 'sds', 'Desktop', 'test', '.', 'exe', 'nssm', 'install', 'TestService', 'C', ':', 'User', 'sds', 'Desktop', 'test', '.', 'exe', 'The', 'services', 'are', 'created', 'successfully', 'but', 'it', 'doesn', 'not', 'get', 'started.', 'It', 'gives', 'startup', 'timeout', 'error', 'while', 'starting', 'the', 'service.', 'I', 'need', 'to', 'start', 'the', 'application', 'from', 'windows', 'services.', 'Thanks', 'in', 'advance.']"
1519,35632942,"

For the record:


My computer has 4 cores
This is go 1.5.3

","['I', 'am', 'trying', 'to', 'write', 'to', '100000', 'files', 'in', 'parallel', 'with', 'Go.', 'I', 'am', 'not', 'sure', 'why,', 'but', 'this', 'code', 'below', 'crashes', '~30%', 'of', 'the', 'time', 'when', 'I', 'call', 'it', 'with', 'the', 'argv', 'parameter', '""100000"".', 'Here', 'is', 'the', 'crash:', 'go', 'routine', '3749', '[', 'chan', 'send', ']:', 'main.CallShellCommand(0xc820016180, 0xea1)', '.../', 'parallel', '.', 'go', ':', '13', '+', '0x1bf', 'created', 'by', 'main', '.', 'main', '.../', 'parallel', '.', 'go', ':', '22', '+', '0xbd', 'Here', 'is', 'the', 'code:', 'package', 'main', 'import', '""fmt""', 'import', '""io/ioutil""', 'import', '""strconv""', 'import', '""os""', 'import', '""runtime""', 'func', 'CallCommand', '(', 'ch', 'chan', 'struct', '{},', 'id', 'int', ')', '{', 'ioutil.WriteFile(fmt.Sprintf(""/tmp/my_prefix_%d"", id), []byte(""HELLO\\n""), 0644)', 'ch', '<-', 'struct', '{}{}', '}', 'func', 'main', '()', '{', 'runtime.GOMAXPROCS(4)', 'n', ',', '_', ':=', 'strconv.Atoi(os.Args[1])', 'ch', ':=', 'make', '(', 'chan', 'struct', '{})', 'for', 'i', ':=', '0', ';', 'i', '<', 'n', ';', 'i', '++', '{', 'go', 'CallCommand', '(', 'ch', ',', 'i', '+', '1', ')', '}', 'for', 'j', ':=', '0', ';', 'j', '<', 'n', ';', 'j', '++', '{', '<-', 'ch', '}', '}', 'For', 'the', 'record:', 'My', 'computer', 'has', '4', 'cores', 'This', 'is', 'go', '1.5.3']"
1520,35644058,"

What is wrong with my query? Is it any syntax error?
","['I', 'was', 'trying', 'to', 'search', 'a', 'collection', 'with', 'multiple', 'field', 'conditions', 'using', '$elemMatch', 'operator.', 'Then', 'I', 'encountered', 'an', 'error', '""too', 'many', 'arguments', 'in', 'call', 'to', 'c.Find"".', 'Document', 'structure', 'is', 'as', 'follows:-', '{', '""_id""', ':', 'ObjectId', '(', '""56cfca4bf23e4e2859257425""', '),', '""company_name""', ':', '""bank""', ',', '""admin""', ':', '{', '""email""', ':', '""xyz@bank.com""', ',', '""fullname""', ':', '""xyz""', '},', '""process""', ':', '[', '{', '""process_name""', ':', '""Enquiry""', ',', '""processtype""', ':', '0', ',', '""sortorder""', ':', '0', '},', '{', '""process_name""', ':', '""Converted""', ',', '""processtype""', ':', '1', ',', '""sortorder""', ':', '1', '}', ']', '}', 'My', 'query', 'is', 'as', 'follows:-', 'colQuerier', ':=', 'bson', '.', 'M', '{', '""company_name""', ':', '""bank""', '}', 'match', ':=', 'bson', '.', 'M', '{', '""process""', ':', 'bson', '.', 'M', '{', '""$elemMatch""', ':', 'bson', '.', 'M', '{', '""process.process_name""', ':', '""Converted""', '}}}', 'err', ':=', 'c.Find(colQuerier,match).Sort(""-id"").All(&results)', 'What', 'is', 'wrong', 'with', 'my', 'query?', 'Is', 'it', 'any', 'syntax', 'error?']"
1521,35658354,"

If I replace the map by a slice of interface{}, I get the exact same problem so my hunch is that this has to do with the binding of loop variables, but yet v := v doesn't help so I'm not sure.

I'm quite familiar with Go, HDF5 (C library) and go-hdf5 but I'm really stuck here. Any idea?

BTW I'm using go1.5.1 darwin/amd64.
","[""I'm"", 'using', 'go-hdf5', 'and', ""I'm"", 'hitting', 'a', 'problem', 'when', 'trying', 'to', 'write', 'attributes', 'in', 'a', 'loop', 'from', 'a', 'map.', 'The', 'attributes', 'are', 'created', 'correctly', '(correct', 'name', 'and', 'datatype)', 'but', 'the', 'written', 'value', 'is', 'garbage.', 'The', 'same', 'code', 'outside', 'of', 'the', 'loop', 'works', 'fine.', 'I', 'tried', 'both', 'the', 'v', ':=', 'v', 'idiom', 'and', 'wrapping', 'the', 'code', 'in', 'a', 'closure', 'to', 'capture', 'v', 'but', 'it', ""doesn't"", 'make', 'a', 'difference.', 'Here', 'is', 'the', 'gist', 'of', 'the', 'code', '(error', 'checking', 'intentionally', 'left', 'out', 'for', 'clarity):', 'm', ':=', 'map', '[', 'string', ']', 'interface', '{', '""foo""', ',', '42', '}', 'for', 'k', ',', 'v', ':=', 'range', 'm', '{', '//', '[...]', 'v', ':=', 'v', 'attr.Write(&v, dtype)', '}', 'The', 'Write', 'method', 'is', 'using', 'reflection', 'to', 'grab', 'a', 'pointer', 'to', 'the', 'value', 'and', 'forwards', 'it', 'to', 'the', 'C', 'library.', 'The', 'relevant', 'part', 'of', 'the', 'code', 'is', 'just:', 'func', '(', 's', '*', 'Attribute', ')', 'Write', '(', 'data', 'interface', '{},', 'dtype', '*', 'Datatype', ')', 'error', '{', 'v', ':=', 'reflect.ValueOf(data)', 'addr', ':=', 'unsafe.Pointer(v.Pointer())', 'return', 'h5err', '(', 'C.H5Awrite(s.id, dtype.id, addr))', '}', 'If', 'I', 'replace', 'the', 'map', 'by', 'a', 'slice', 'of', 'interface{},', 'I', 'get', 'the', 'exact', 'same', 'problem', 'so', 'my', 'hunch', 'is', 'that', 'this', 'has', 'to', 'do', 'with', 'the', 'binding', 'of', 'loop', 'variables,', 'but', 'yet', 'v', ':=', 'v', ""doesn't"", 'help', 'so', ""I'm"", 'not', 'sure.', ""I'm"", 'quite', 'familiar', 'with', 'Go,', 'HDF5', '(C', 'library)', 'and', 'go-hdf5', 'but', ""I'm"", 'really', 'stuck', 'here.', 'Any', 'idea?', 'BTW', ""I'm"", 'using', 'go1.5.1', 'darwin/amd64.']"
1522,35790414,"Hi I have latest deps available in my $GOPATH. Now i want to update my project Godeps.json with new deps(with latest GOPATH) by calling godep update ./... and then calling godep save ./... . 
however still i am with old deps in Godeps.json . Could somebody please guide me.

i am new to Godep. Thanks 
","['If', 'I', 'replace', 'the', 'map', 'by', 'a', 'slice', 'of', 'interface{},', 'I', 'get', 'the', 'exact', 'same', 'problem', 'so', 'my', 'hunch', 'is', 'that', 'this', 'has', 'to', 'do', 'with', 'the', 'binding', 'of', 'loop', 'variables,', 'but', 'yet', 'v', ':=', 'v', ""doesn't"", 'help', 'so', ""I'm"", 'not', 'sure.', ""I'm"", 'quite', 'familiar', 'with', 'Go,', 'HDF5', '(C', 'library)', 'and', 'go-hdf5', 'but', ""I'm"", 'really', 'stuck', 'here.', 'Any', 'idea?', 'BTW', ""I'm"", 'using', 'go1.5.1', 'darwin/amd64.']"
1523,35888817,"

index.html view is located in folder view, router is in folder route

In index.html I include resources like these:





When request the appropriate path, index.html is still rendered, but images and stylesheet are not loaded. How can I do to include them in Golang html template engine?
","['I', 'setup', 'a', 'route', 'in', 'server.js', 'in', 'package', 'main', 'in', 'root', 'directory', 'of', 'project', 'http.HandleFunc(""/"",route.IndexHandler)', 'The', 'IndexHandler', 'is', 'implemented', 'in', 'package', 'route', 'like', 'this:', 'func', 'IndexHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'data', ':=', 'struct', '{', 'Name', 'string', '}{', '""My name""', ',', '}', 'util.RenderTemplate(w, ""index"", data)', '}', 'The', 'RenderTemplate', 'function', 'is', 'implemented', 'in', 'package', 'util', 'like', 'this:', 'func', 'RenderTemplate', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'tmpl', 'string', ',', 'data', 'interface', '{})', '{', 'cwd', ',', '_', ':=', 'os.Getwd()', 't', ',', 'err', ':=', 'template.ParseFiles(filepath.Join(cwd, ""./view/"" + tmpl + "".html""))', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), http.StatusInternalServerError)', 'return', '}', 'err', '=', 't.Execute(w, data)', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), http.StatusInternalServerError)', '}', '}', 'Directory', 'structure', 'in', 'project', 'like', 'this:', '/', '/public/css', '/public/images', '/public/js', '/', 'route', '/', 'view', 'index.html', 'view', 'is', 'located', 'in', 'folder', 'view,', 'router', 'is', 'in', 'folder', 'route', 'In', 'index.html', 'I', 'include', 'resources', 'like', 'these:', 'When', 'request', 'the', 'appropriate', 'path,', 'index.html', 'is', 'still', 'rendered,', 'but', 'images', 'and', 'stylesheet', 'are', 'not', 'loaded.', 'How', 'can', 'I', 'do', 'to', 'include', 'them', 'in', 'Golang', 'html', 'template', 'engine?']"
1524,35904722,"

Did I miss something? I checked the prototype of ""html/template"".Must and didn't get what happened
","['I', 'write', 'a', 'wrapper', 'function', 'in', 'Golang', 'for', 'rendering', 'template', 'from', 'multiple', 'files', 'like', 'this:', 'func', 'RenderTemplate', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'data', 'interface', '{},', 'tmpl', '...', 'string', ')', '{', 'cwd', ',', '_', ':=', 'os.Getwd()', 'for', '_', ',', 'file', ':=', 'range', 'tmpl', '{', 'file', '=', 'filepath.Join(cwd,""./view/""+file+"".html"")', '}', 't', ',', 'err', ':=', 'template.ParseFiles(tmpl...)', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), http.StatusInternalServerError)', 'return', '}', 'templates', ':=', 'template.Must(t)', 'err', '=', 'templates.Execute(w, data)', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), http.StatusInternalServerError)', '}', '}', 'When', 'I', 'run', 'server', 'from', 'main', 'function,', 'the', 'console', 'throws', 'an', 'error:', 'not', 'enough', 'arguments', 'in', 'call', 'to', '""html/template""', '.', 'Must', 'If', 'I', 'write', 'like', 'this:', 'templates', ',', 'err', ':=', 'template.Must(t)', 'It', 'also', 'throws', 'the', 'same', 'error,', 'plus:', 'assignment', 'count', 'mismatch', ':', '2', '=', '1', 'I', 'intend', 'to', 'use', 'this', 'function', 'for', 'a', 'route', 'handler', 'in', 'server:', 'func', 'IndexHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'files', ':=[]', 'string', '{', '""base""', ',', '""index""', '}', 'util.RenderTemplate(w, nil, files...)', '}', 'index.html', 'extends', 'from', 'base.html', 'using', 'template', 'nesting', 'base.html', 'template:', '{{', 'define', '""base""', '}}', '{{', 'template', '""title""', '.}}', '{{', 'template', '""index""', '.}}', '{{', 'end', '}}', 'And', 'index.html', 'template:', '{{', 'define', '""title""', '}}', 'Homepage', '{{', 'end', '}}', '{{', 'define', '""index""', '}}', 'Organize', 'Modern', 'Knowledge', 'for', 'Mankind', 'Consume', ',', 'Colect', 'and', 'Revisit', 'Knowledge', 'at', 'Your', 'Fingertips', '{{', 'end', '}}', 'Did', 'I', 'miss', 'something?', 'I', 'checked', 'the', 'prototype', 'of', '""html/template"".Must', 'and', ""didn't"", 'get', 'what', 'happened']"
1525,35918588,"

Server stucks at sock.recv()
","[""I've"", 'built', 'an', 'app', 'written', 'on', 'python,', 'based', 'on', 'ZeroMQ,', 'but', 'now', ""I'm"", 'facing', 'perfomance', 'issues.', 'So', 'I', 'decided', 'to', 'rewrite', 'some', 'modules', 'of', 'my', 'app', 'using,', ""let's"", 'say,', 'Golang.', 'But', 'when', 'I', 'try', 'to', 'establish', 'messaging', 'between', 'sockets,', 'implemented', 'by', 'different', 'languages,', 'anything', 'does', 'not', ""work.I've"", 'searched', 'so', 'far,', 'but', 'I', ""didn't"", 'find', 'any', 'info', 'about', 'compatibility', 'problems', 'of', 'ZeroMQ', 'using', 'different', 'languages.', 'So', 'the', 'question', 'is:', 'Can', 'I', 'use', 'golang', 'for', 'server', 'implementation', 'based', 'on', 'ZeroMQ', 'and', 'client', 'written', 'on', 'python', 'to', 'connect', 'to', 'it?Or', 'do', 'I', 'have', 'to', 'use', 'only', 'one', 'language?', 'EDIT:', 'here', 'are', 'typical', 'server', 'and', 'client', 'that', ""I'm"", 'trying', 'to', 'get', 'working', 'properly', 'server:', 'import', 'zmqctx', '=', 'zmq.Context()', 'sock', '=', 'ctx.socket(zmq.REP)', 'sock.bind(""tcp://*:57000"")', 'msg', '=', 'sock.recv()', 'client:', 'package', 'main', 'import', '(', 'zmq', '""github.com/pebbe/zmq4""', ')', 'func', 'main', '()', '{', 'ctx', ',', '_', ':=', 'zmq.NewContext()', 'sock', ',', '_', ':=', 'ctx.NewSocket(zmq.REQ)', 'sock.Connect(""tcp://localhost:57000"")', 'sock.Send(""simple message"", 0)', '}', 'Server', 'stucks', 'at', 'sock.recv()']"
1526,35950072,"I'm trying to get my head around JWT tokens in Golang. I'm using github.com/dgrijalva/jwt-go. 

What caught me off guard is the fact that I can enter multiple valid signatures.

For example, head over to http://jwt.io
- enter MySuperSecretKey for the secret

This token is valid:

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NTc3MzAyODMsInVzZXIiOiJ1c2VyMSJ9.SxshVL42DUH9e7jXUblbB_bTwKxhe4jo70DrvbQMlaU

as well as this one:

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NTc3MzAyODMsInVzZXIiOiJ1c2VyMSJ9.SxshVL42DUH9e7jXUblbB_bTwKxhe4jo70DrvbQMlaV

In fact, if I change the last letter to V, W or X, I get a ""Signature Verfied"" message.

Can anyone tell me what's going on here? 
","[""I'm"", 'trying', 'to', 'get', 'my', 'head', 'around', 'JWT', 'tokens', 'in', 'Golang.', ""I'm"", 'using', 'github.com/dgrijalva/jwt-go.', 'What', 'caught', 'me', 'off', 'guard', 'is', 'the', 'fact', 'that', 'I', 'can', 'enter', 'multiple', 'valid', 'signatures.', 'For', 'example,', 'head', 'over', 'to', 'http://jwt.io', '-', 'enter', 'MySuperSecretKey', 'for', 'the', 'secret', 'This', 'token', 'is', 'valid:', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NTc3MzAyODMsInVzZXIiOiJ1c2VyMSJ9.SxshVL42DUH9e7jXUblbB_bTwKxhe4jo70DrvbQMlaU', 'as', 'well', 'as', 'this', 'one:', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NTc3MzAyODMsInVzZXIiOiJ1c2VyMSJ9.SxshVL42DUH9e7jXUblbB_bTwKxhe4jo70DrvbQMlaV', 'In', 'fact,', 'if', 'I', 'change', 'the', 'last', 'letter', 'to', 'V,', 'W', 'or', 'X,', 'I', 'get', 'a', '""Signature', 'Verfied""', 'message.', 'Can', 'anyone', 'tell', 'me', ""what's"", 'going', 'on', 'here?']"
1527,35997995,"I need to run Golang application on Docker machine.

I'm working on Mac OSX and Docker is working on top of Linux virtual machine, so binaries builded on Mac are not runnable on Docker. 

I see two ways here:


cross-compile binaries on Mac for linux OS
copy project sources to docker, run 'go get' and 'go build' on it


First one is hard because of CGO (it is used in some imported libraries). 

Second is very slow because of 'go get' operation.

Can you please tell me, which way is the most common in that situation? Or maybe I'm doing something wrong?
","['I', 'need', 'to', 'run', 'Golang', 'application', 'on', 'Docker', 'machine.', ""I'm"", 'working', 'on', 'Mac', 'OSX', 'and', 'Docker', 'is', 'working', 'on', 'top', 'of', 'Linux', 'virtual', 'machine,', 'so', 'binaries', 'builded', 'on', 'Mac', 'are', 'not', 'runnable', 'on', 'Docker.', 'I', 'see', 'two', 'ways', 'here:', 'cross-compile', 'binaries', 'on', 'Mac', 'for', 'linux', 'OS', 'copy', 'project', 'sources', 'to', 'docker,', 'run', ""'go"", ""get'"", 'and', ""'go"", ""build'"", 'on', 'it', 'First', 'one', 'is', 'hard', 'because', 'of', 'CGO', '(it', 'is', 'used', 'in', 'some', 'imported', 'libraries).', 'Second', 'is', 'very', 'slow', 'because', 'of', ""'go"", ""get'"", 'operation.', 'Can', 'you', 'please', 'tell', 'me,', 'which', 'way', 'is', 'the', 'most', 'common', 'in', 'that', 'situation?', 'Or', 'maybe', ""I'm"", 'doing', 'something', 'wrong?']"
1528,36027099,"

I've currently been reading from an empty dataf.txt file.
","['I', ""don't"", 'understand', 'why', 'the', 'code', 'is', 'generating', 'the', 'view.html', 'and', 'post.html', 'data', 'correctly', 'but', 'displaying', 'it', 'all', 'as', 'raw', 'text.', 'I', 'had', 'been', 'following', 'the', 'guide', 'here', 'and', 'as', 'I', 'was', 'building', 'it,', 'I', 'thought', 'that', 'the', 'generated', 'html', 'from', 'the', 'Execute', 'function', 'would', 'be', 'sent', 'to', 'the', 'ResponserWriter', 'which', 'would', 'handle', 'displaying', 'it,', 'but', 'the', 'error', ""I'm"", 'getting', 'seems', 'to', 'indicate', 'my', 'understanding', 'of', 'Execute', 'or', 'the', 'ResponseWriter', 'is', 'wrong.', 'package', 'main', 'import', '(', '""os""', '""fmt""', '""time""', '""bufio""', '""net/http""', '""html/template""', ')', 'type', 'UserPost', 'struct', '{', 'Name', 'string', 'About', 'string', 'PostTime', 'string', '}', 'func', 'check', '(', 'e', 'error', ')', '{', 'if', 'e', '!=', 'nil', '{', 'fmt.Println(""Error Recieved..."")', 'panic', '(', 'e', ')', '}', '}', 'func', 'lineCounter', '(', 'workingFile', '*', 'os', '.', 'File', ')', 'int', '{', 'fileScanner', ':=', 'bufio.NewScanner(workingFile)', 'lineCount', ':=', '0', 'for', 'fileScanner.Scan()', '{', 'lineCount', '++', '}', 'return', 'lineCount', '}', 'func', 'loadPage', '(', 'i', 'int', ')', '(*', 'UserPost', ',', 'error', ')', '{', 'Posts', ',', 'err', ':=', 'os.Open(""dataf.txt"")', 'check', '(', 'err', ')', 'var', 'PostArray', '[', '512', ']', 'UserPost', '=', 'parsePosts', '(', 'Posts', ',', 'i', ')', 'Name', ':=', 'PostArray', '[', 'i', '].', 'Name', 'About', ':=', 'PostArray', '[', 'i', '].', 'About', 'PostTime', ':=', 'PostArray', '[', 'i', '].', 'PostTime', 'Posts.Close()', 'return', '&', 'UserPost', '{', 'Name', ':', 'Name', '[:', 'len', '(', 'Name', ')-', '1', '],', 'About', ':', 'About', '[:', 'len', '(', 'About', ')-', '1', '],', 'PostTime', ':', 'PostTime', '[:', 'len', '(', 'PostTime', ')-', '1', ']},', 'nil', '}', 'func', 'viewHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'tmp', ',', 'err', ':=', 'os.Open(""dataf.txt"")', 'check', '(', 'err', ')', 'num', ':=', '(', 'lineCounter', '(', 'tmp', ')/', '3', ')', 'tmp.Close()', 'for', 'i', ':=', '0', ';', 'i', '<', 'num', ';', 'i', '++', '{', 'p', ',', '_', ':=', 'loadPage', '(', 'i', ')', 't', ',', '_', ':=', 'template.ParseFiles(""view.html"")', 't.Execute(w, p)', '}', 'p', ':=', 'UserPost', '{', 'Name', ':', '""""', ',', 'About', ':', '""""', ',', 'PostTime', ':', '""""', '}', 't', ',', '_', ':=', 'template.ParseFiles(""post.html"")', 't.Execute(w, p)', '}', 'func', 'inputHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'Name', ':=', 'r.FormValue(""person"")', 'About', ':=', 'r.FormValue(""body"")', 'PostTime', ':=', 'time.Now().String()', 'filePaste', ',', 'err', ':=', 'os.OpenFile(""dataf.txt"", os.O_RDWR | os.O_CREATE | os.O_APPEND | os.SEEK_END, 0666)', 'check', '(', 'err', ')', 'filePaste.WriteString(Name+""~\\n"")', 'filePaste.WriteString(About+""~\\n"")', 'filePaste.WriteString(PostTime+""~\\n"")', 'filePaste.Close()', 'fmt.Println(""Data recieved: "", Name,About,PostTime)', 'http.Redirect(w, r, ""/#bottom"", http.StatusFound)', '//Use ""/#bottom"" to go to bottom of html page.', '}', '//', 'os.File', 'is', 'the', 'file', 'type.', 'func', 'parsePosts', '(', 'fileToParse', '*', 'os', '.', 'File', ',', 'num', 'int', ')', '[', '512', ']', 'UserPost', '{', 'var', 'buffer', '[', '512', ']', 'UserPost', 'reader', ':=', 'bufio.NewReader(fileToParse)', '//', 'This', 'For', 'loop', 'reads', 'each', '""forum', 'post""', 'then', 'saves', 'it', 'to', 'the', 'buffer,', 'then', 'iterates', 'to', 'the', 'next.', 'for', 'i', ':=', '0', ';', 'i', '<=', 'num', ';', 'i', '++', '{', 'currentPost', ':=', 'new', '(', 'UserPost', ')', 'str', ',', 'err', ':=', ""reader.ReadString('~')"", 'check', '(', 'err', ')', 'currentPost', '.', 'Name', '=', 'str', '//', 'I', 'search', 'for', ""'~'"", 'because', 'my', 'files', 'save', 'the', 'end', 'of', 'reading', 'line', 'with', 'that,', 'so', 'i', 'can', 'keep', 'formatting', 'saved', '(\\n', 'placement).', 'str2', ',', 'err2', ':=', ""reader.ReadString('~')"", 'check', '(', 'err2', ')', 'currentPost', '.', 'About', '=', 'str2', 'str3', ',', 'err3', ':=', ""reader.ReadString('~')"", 'check', '(', 'err3', ')', 'currentPost', '.', 'PostTime', '=', 'str3', 'buffer', '[', 'i', ']', '=', '*', 'currentPost', '}', 'return', 'buffer', '}', 'func', 'main', '()', '{', 'fmt.Println(""Listening..."")', 'http.HandleFunc(""/"", viewHandler)', 'http.HandleFunc(""/post/"", inputHandler)', 'http.ListenAndServe("":8080"", nil)', '}', 'view.html', '{{.', 'Name', '}}', '{{', 'printf', '""%s""', '.', 'About', '}}', '{{.', 'PostTime', '}}', 'post.html', '{{', 'printf', '""%s""', '.', 'Name', '}}', '{{', 'printf', '""%s""', '.', 'About', '}}', ""I've"", 'currently', 'been', 'reading', 'from', 'an', 'empty', 'dataf.txt', 'file.']"
1529,36098875,"

which looks like somewhat memory issue to me...

I'm not sure if this is the correct way to handle returned double array from C in Go. If yes, how to fix the problem (which occurs ocassionally). If no, what is the correct way to handle returned double array from C?

Thanks.
","['I', 'got', 'a', 'C', 'function', 'like', 'this', 'double', '*', 'c_func', '(', 'int', 'n_rows', ')', '{', 'double', 'result', '[', 'n_rows', '];', 'for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'n_rows', ';', '++', 'i', ')', '{', 'result', '[', 'i', ']', '=', '(', 'double', ')', 'i', ';', '}', 'return', 'result', ';', '}', 'And', 'I', 'use', 'this', 'Go', 'function', 'to', 'process', 'the', 'C', 'double:', '//', 'convert', 'C', 'double', 'pointer', 'to', 'float64', 'slice', '...', 'func', 'doubleToFloats', '(', 'in', '*', 'C', '.', 'double', ',', 'length', 'int', ')', '[]', 'float64', '{', 'out', ':=', 'make', '([]', 'float64', ',', 'length', ',', 'length', ')', 'start', ':=', 'unsafe.Pointer(in)', 'size', ':=', 'unsafe.Sizeof(C.double(0))', 'for', 'i', ':=', '0', ';', 'i', '<', 'length', ';', 'i', '++', '{', 'val', ':=', '*(*', 'C', '.', 'double', ')(', 'unsafe.Pointer(uintptr(start) + size*uintptr(i)))', 'out', '[', 'i', ']', '=', 'float64', '(', 'val', ')', '}', 'return', 'out', '}', 'This', 'sometimes', 'works', 'but', 'sometimes', 'not.', 'When', 'it', 'not', 'works,', 'it', 'return', 'something', 'like', 'this:', '[', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '2', '.', '53', 'e', '-', '321', '3', '.', '32018606', 'e', '-', '316', '4', '.', '24664374149', 'e', '-', '312', '4', '.', '24399158193', 'e', '-', '312', '1', '.', '1383', 'e', '-', '320', '3', '.', '31882387', 'e', '-', '316', '3', '.', '71924634', 'e', '-', '316', '3', '.', '31885594', 'e', '-', '316', '3', '.', '71924634', 'e', '-', '316', '5', 'e', '-', '324', '0', '4', '.', '6950308', 'e', '-', '316', '4', '.', '24664374149', 'e', '-', '312', '3', '.', '7175681', 'e', '-', '316', '3', '.', '3200616', 'e', '-', '316', ']', 'which', 'looks', 'like', 'somewhat', 'memory', 'issue', 'to', 'me...', ""I'm"", 'not', 'sure', 'if', 'this', 'is', 'the', 'correct', 'way', 'to', 'handle', 'returned', 'double', 'array', 'from', 'C', 'in', 'Go.', 'If', 'yes,', 'how', 'to', 'fix', 'the', 'problem', '(which', 'occurs', 'ocassionally).', 'If', 'no,', 'what', 'is', 'the', 'correct', 'way', 'to', 'handle', 'returned', 'double', 'array', 'from', 'C?', 'Thanks.']"
1530,36152294,"

I think the output of the closure2 should be 20, but the real result is 15, i do not know why????
anybody can help me , please see my comment in my code, thanks in advance.
","['see', 'test', 'code:', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'i', ':=', '10', 'closure1', ':=', 'func', '()', '{', 'fmt.Printf(""closure, i: %d\\n"", i)', 'i', '=', '15', '}', 'closure1', '()', 'fmt.Printf(""in main, i: %d\\n"", i)', 'closure2', ':=', 'func', '(', 'x', 'int', ')', '{', 'fmt.Printf(""function call, pass parameter, i: %d\\n"", x)', '}', 'i', '=', '20', 'closure1', '()', 'closure2', '(', 'i', ')', '}', 'I', 'think', 'the', 'output', 'of', 'the', 'closure2', 'should', 'be', '20,', 'but', 'the', 'real', 'result', 'is', '15,', 'i', 'do', 'not', 'know', 'why????', 'anybody', 'can', 'help', 'me', ',', 'please', 'see', 'my', 'comment', 'in', 'my', 'code,', 'thanks', 'in', 'advance.']"
1531,36152939,"

Why must I give it a variable name here r?
","[""Let's"", 'say', 'I', 'have', 'a', 'struct', 'type', 'Rectangle', 'struct', '{', 'length', ',', 'width', 'int', '}', 'and', 'I', 'want', 'to', 'add', 'a', 'method', 'to', 'it:', 'func', '(', 'r', 'Rectangle', ')', 'Area', '()', 'int', '{', 'return', 'r', '.', 'length', '*', 'r', '.', 'width', '}', 'Why', 'must', 'I', 'give', 'it', 'a', 'variable', 'name', 'here', 'r?']"
1532,36177614,"

config contains configuration in JSON and one simple config.go that reads and parses JSON file and fills the Config struct. handlers contains controllers (i.e. handlers of respective METHOD+URL described in router/routes.go). lib contains some DB, request responder and logger logic. models contains structs and their funcs to be mapped from-to JSON and DB. Finally router contains the router and routes definition.

Now I was searching and reading a lot about unit testing REST APIs in GO and found more or less satisfying articles about how to set up a testing server, define routes and test my requests. All fine. BUT only if you want to test a single file!

My problem is now how to set up the testing environment (server, routes, DB connection) for all handlers? With the approach found here (which I find very easy to understand and implement) I have one problem: either I have to run tests separately for each handler or I have to write test suites for all handlers in just one test file. I believe you understand that both cases are not very happy (1st because I need to preserve that running go test runs all tests that succeed and 2nd because having one test file to cover all handler funcs would become unmaintainable).

By now I have succeeded (according to the linked article) only if I put all testing and initializing code into just one func per XYZhandler_test.go file but I don't like this approach as well.

What I would like to achieve is kind of setUp() or init() that runs once with first triggered test making all required variables globally visible and initialized so that all next tests could use them already without the need of instantiating them again while making sure that this setup file is compiled only for tests...

I am not sure if this is completely clear or if some code example is required for this kind of question (other than what is already linked in the article but I will add anything that you think is required, just tell me!
","['I', 'am', 'trying', 'to', 'write', 'nice', 'unit', 'tests', 'for', 'my', 'already', 'created', 'REST', 'API.', 'I', 'have', 'this', 'simple', 'structure:', 'ROOT', '/', 'config', '/', 'handlers', '/', 'lib', '/', 'models', '/', 'router', '/', 'main', '.', 'go', 'config', 'contains', 'configuration', 'in', 'JSON', 'and', 'one', 'simple', 'config.go', 'that', 'reads', 'and', 'parses', 'JSON', 'file', 'and', 'fills', 'the', 'Config', 'struct.', 'handlers', 'contains', 'controllers', '(i.e.', 'handlers', 'of', 'respective', 'METHOD+URL', 'described', 'in', 'router/routes.go).', 'lib', 'contains', 'some', 'DB,', 'request', 'responder', 'and', 'logger', 'logic.', 'models', 'contains', 'structs', 'and', 'their', 'funcs', 'to', 'be', 'mapped', 'from-to', 'JSON', 'and', 'DB.', 'Finally', 'router', 'contains', 'the', 'router', 'and', 'routes', 'definition.', 'Now', 'I', 'was', 'searching', 'and', 'reading', 'a', 'lot', 'about', 'unit', 'testing', 'REST', 'APIs', 'in', 'GO', 'and', 'found', 'more', 'or', 'less', 'satisfying', 'articles', 'about', 'how', 'to', 'set', 'up', 'a', 'testing', 'server,', 'define', 'routes', 'and', 'test', 'my', 'requests.', 'All', 'fine.', 'BUT', 'only', 'if', 'you', 'want', 'to', 'test', 'a', 'single', 'file!', 'My', 'problem', 'is', 'now', 'how', 'to', 'set', 'up', 'the', 'testing', 'environment', '(server,', 'routes,', 'DB', 'connection)', 'for', 'all', 'handlers?', 'With', 'the', 'approach', 'found', 'here', '(which', 'I', 'find', 'very', 'easy', 'to', 'understand', 'and', 'implement)', 'I', 'have', 'one', 'problem:', 'either', 'I', 'have', 'to', 'run', 'tests', 'separately', 'for', 'each', 'handler', 'or', 'I', 'have', 'to', 'write', 'test', 'suites', 'for', 'all', 'handlers', 'in', 'just', 'one', 'test', 'file.', 'I', 'believe', 'you', 'understand', 'that', 'both', 'cases', 'are', 'not', 'very', 'happy', '(1st', 'because', 'I', 'need', 'to', 'preserve', 'that', 'running', 'go', 'test', 'runs', 'all', 'tests', 'that', 'succeed', 'and', '2nd', 'because', 'having', 'one', 'test', 'file', 'to', 'cover', 'all', 'handler', 'funcs', 'would', 'become', 'unmaintainable).', 'By', 'now', 'I', 'have', 'succeeded', '(according', 'to', 'the', 'linked', 'article)', 'only', 'if', 'I', 'put', 'all', 'testing', 'and', 'initializing', 'code', 'into', 'just', 'one', 'func', 'per', 'XYZhandler_test.go', 'file', 'but', 'I', ""don't"", 'like', 'this', 'approach', 'as', 'well.', 'What', 'I', 'would', 'like', 'to', 'achieve', 'is', 'kind', 'of', 'setUp()', 'or', 'init()', 'that', 'runs', 'once', 'with', 'first', 'triggered', 'test', 'making', 'all', 'required', 'variables', 'globally', 'visible', 'and', 'initialized', 'so', 'that', 'all', 'next', 'tests', 'could', 'use', 'them', 'already', 'without', 'the', 'need', 'of', 'instantiating', 'them', 'again', 'while', 'making', 'sure', 'that', 'this', 'setup', 'file', 'is', 'compiled', 'only', 'for', 'tests...', 'I', 'am', 'not', 'sure', 'if', 'this', 'is', 'completely', 'clear', 'or', 'if', 'some', 'code', 'example', 'is', 'required', 'for', 'this', 'kind', 'of', 'question', '(other', 'than', 'what', 'is', 'already', 'linked', 'in', 'the', 'article', 'but', 'I', 'will', 'add', 'anything', 'that', 'you', 'think', 'is', 'required,', 'just', 'tell', 'me!']"
1533,36200806,"When using Go how are projects organized? I'm a bit confused on the workspaces part. I've had a read of the following: https://golang.org/doc/code.html#Workspaces ... and this part has thrown me off a little:


  A typical workspace contains many source repositories containing many packages and commands. Most Go programmers keep all their Go source code and dependencies in a single workspace. 


Does this mean that for each project I create it is a seperate workspace? For example if two projects use the same package, I would have two copies of that package on my computer.

Or, does it mean you have a main workspace and your projects share those packages?

Bit confused.
","['config', 'contains', 'configuration', 'in', 'JSON', 'and', 'one', 'simple', 'config.go', 'that', 'reads', 'and', 'parses', 'JSON', 'file', 'and', 'fills', 'the', 'Config', 'struct.', 'handlers', 'contains', 'controllers', '(i.e.', 'handlers', 'of', 'respective', 'METHOD+URL', 'described', 'in', 'router/routes.go).', 'lib', 'contains', 'some', 'DB,', 'request', 'responder', 'and', 'logger', 'logic.', 'models', 'contains', 'structs', 'and', 'their', 'funcs', 'to', 'be', 'mapped', 'from-to', 'JSON', 'and', 'DB.', 'Finally', 'router', 'contains', 'the', 'router', 'and', 'routes', 'definition.', 'Now', 'I', 'was', 'searching', 'and', 'reading', 'a', 'lot', 'about', 'unit', 'testing', 'REST', 'APIs', 'in', 'GO', 'and', 'found', 'more', 'or', 'less', 'satisfying', 'articles', 'about', 'how', 'to', 'set', 'up', 'a', 'testing', 'server,', 'define', 'routes', 'and', 'test', 'my', 'requests.', 'All', 'fine.', 'BUT', 'only', 'if', 'you', 'want', 'to', 'test', 'a', 'single', 'file!', 'My', 'problem', 'is', 'now', 'how', 'to', 'set', 'up', 'the', 'testing', 'environment', '(server,', 'routes,', 'DB', 'connection)', 'for', 'all', 'handlers?', 'With', 'the', 'approach', 'found', 'here', '(which', 'I', 'find', 'very', 'easy', 'to', 'understand', 'and', 'implement)', 'I', 'have', 'one', 'problem:', 'either', 'I', 'have', 'to', 'run', 'tests', 'separately', 'for', 'each', 'handler', 'or', 'I', 'have', 'to', 'write', 'test', 'suites', 'for', 'all', 'handlers', 'in', 'just', 'one', 'test', 'file.', 'I', 'believe', 'you', 'understand', 'that', 'both', 'cases', 'are', 'not', 'very', 'happy', '(1st', 'because', 'I', 'need', 'to', 'preserve', 'that', 'running', 'go', 'test', 'runs', 'all', 'tests', 'that', 'succeed', 'and', '2nd', 'because', 'having', 'one', 'test', 'file', 'to', 'cover', 'all', 'handler', 'funcs', 'would', 'become', 'unmaintainable).', 'By', 'now', 'I', 'have', 'succeeded', '(according', 'to', 'the', 'linked', 'article)', 'only', 'if', 'I', 'put', 'all', 'testing', 'and', 'initializing', 'code', 'into', 'just', 'one', 'func', 'per', 'XYZhandler_test.go', 'file', 'but', 'I', ""don't"", 'like', 'this', 'approach', 'as', 'well.', 'What', 'I', 'would', 'like', 'to', 'achieve', 'is', 'kind', 'of', 'setUp()', 'or', 'init()', 'that', 'runs', 'once', 'with', 'first', 'triggered', 'test', 'making', 'all', 'required', 'variables', 'globally', 'visible', 'and', 'initialized', 'so', 'that', 'all', 'next', 'tests', 'could', 'use', 'them', 'already', 'without', 'the', 'need', 'of', 'instantiating', 'them', 'again', 'while', 'making', 'sure', 'that', 'this', 'setup', 'file', 'is', 'compiled', 'only', 'for', 'tests...', 'I', 'am', 'not', 'sure', 'if', 'this', 'is', 'completely', 'clear', 'or', 'if', 'some', 'code', 'example', 'is', 'required', 'for', 'this', 'kind', 'of', 'question', '(other', 'than', 'what', 'is', 'already', 'linked', 'in', 'the', 'article', 'but', 'I', 'will', 'add', 'anything', 'that', 'you', 'think', 'is', 'required,', 'just', 'tell', 'me!']"
1534,36295343,"

in the source of the message.

Go Playground example

What is the correct way of parsing the headers correctly, regardless if indented or not?
","['How', 'I', 'can', 'read', 'some', 'headers', 'from', 'an', 'email', 'message', 'in', 'Go?', 'Usually', 'I', 'would', 'use', 'ReadMIMEHeader(),', 'but', 'sadly', 'not', 'everybody', 'has', 'read', 'all', 'the', 'relevant', 'RFCs', 'and', 'for', 'some', 'messages', 'I', 'get', 'output', 'like:', 'malformed', 'MIME', 'header', 'line:', 'name=""7DDA4_foo_9E5D72.zip""', 'I', 'narrowed', 'the', 'culprit', 'to', 'be', 'Content', '-', 'Type', ':', 'application/x-zip-compressed;', 'x', '-', 'unix', '-', 'mode', '=', '06', '0', '0', ';', 'name', '=', '""7DDA4_foo_9E5D72.zip""', 'instead', 'of', 'Content', '-', 'Type', ':', 'application/x-zip-compressed;', 'x', '-', 'unix', '-', 'mode', '=', '06', '0', '0', ';', 'name', '=', '""7DDA4_foo_9E5D72.zip""', 'in', 'the', 'source', 'of', 'the', 'message.', 'Go', 'Playground', 'example', 'What', 'is', 'the', 'correct', 'way', 'of', 'parsing', 'the', 'headers', 'correctly,', 'regardless', 'if', 'indented', 'or', 'not?']"
1535,36299375,"

A hint

I remember that the tar I installed from was go1.6.linux-amd64.tar.gz, which means the go version 1.6 should be shown but my terminal is outputting 1.3.3.
","['Operating', 'system:', 'Ubuntu', '14.04', 'lines', 'in', 'the', '.bashrc', '(tried', 'both', 'of', 'the', 'following)', 'GoPath', '(', 'without', 'go', 'root', ')', 'export', 'GOPATH', '=$', 'HOME/gowork', '...', 'GoPath', '(', 'with', 'go', 'root', ')', 'export', 'GOROOT', '=/', 'usr/local/go', 'export', 'GOPATH', '=$', 'HOME/gowork', 'Note:', 'I', 'tried', 'to', 'set', 'the', 'above', 'environment', 'variables,', 'first', 'in', '.profile', 'and', 'then', 'in', '.bashrc', 'as', 'suggested', 'by', 'different', 'people', 'in', 'a', 'different', 'way.', 'Tried', 'to', 'run', 'the', 'following', 'code', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'fmt.Println(""Hello World!"")', '}', 'Error', 'message', 'in', 'the', 'terminal', 'go', 'run', 'helloworld', '.', 'go', 'helloworld', '.', 'go', ':', '3', ':', '8', ':', 'cannot', 'find', 'package', '""fmt""', 'in', 'any', 'of', ':', '/usr/local/go/src/pkg/fmt', '(', 'from', '$', 'GOROOT', ')', '/home/arif/gowork/src/fmt', '(', 'from', '$', 'GOPATH', ')', 'package', 'runtime', ':', 'cannot', 'find', 'package', '""runtime""', 'in', 'any', 'of', ':', '/usr/local/go/src/pkg/runtime', '(', 'from', '$', 'GOROOT', ')', '/home/arif/gowork/src/runtime', '(', 'from', '$', 'GOPATH', ')', 'edit', 'go', 'env', 'output', 'GOARCH', '=', '""amd64""', 'GOBIN', '=', '""""', 'GOCHAR', '=', '""6""', 'GOEXE', '=', '""""', 'GOHOSTARCH', '=', '""amd64""', 'GOHOSTOS', '=', '""linux""', 'GOOS', '=', '""linux""', 'GOPATH', '=', '""/home/arif/gowork""', 'GORACE', '=', '""""', 'GOROOT', '=', '""/usr/local/go""', 'GOTOOLDIR', '=', '""/usr/local/go/pkg/tool/linux_amd64""', 'CC', '=', '""gcc""', 'GOGCCFLAGS', '=', '""-fPIC -m64 -pthread -fmessage-length=0""', 'CXX', '=', '""g++""', 'CGO_ENABLED', '=', '""1""', 'go', 'version', 'output', 'go', 'version', 'go', '1', '.', '3', '.', '3', 'linux/amd64', 'A', 'hint', 'I', 'remember', 'that', 'the', 'tar', 'I', 'installed', 'from', 'was', 'go1.6.linux-amd64.tar.gz,', 'which', 'means', 'the', 'go', 'version', '1.6', 'should', 'be', 'shown', 'but', 'my', 'terminal', 'is', 'outputting', '1.3.3.']"
1536,36299902,"

Does anyone see what I'm doing wrong?  Thanks.
","[""I've"", 'been', 'stuck', 'trying', 'to', 'unmarshal', 'a', 'json', 'object.', 'I', 'am', 'not', 'getting', 'any', 'errors', 'but', 'I', 'am', 'getting', 'an', 'empty', 'map', 'afterwards.', ""I'm"", 'new', 'to', 'go', 'so', ""I'm"", 'still', 'trying', 'to', 'wrap', 'my', 'head', 'around', 'some', 'of', 'the', 'language', 'constructs.', 'Here', 'is', 'what', 'my', 'data', 'source', 'looks', 'like', '{', '""animationStates""', ':', '{', '""idle""', ':', '{', '""numFrames""', ':', '4', ',', '""frames""', ':', '[', '{', '""frame""', ':', '{', '""x""', ':', '43', ',', '""y""', ':', '106', ',', '""w""', ':', '12', ',', '""h""', ':', '15', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '1', ',', '""y""', ':', '143', ',', '""w""', ':', '12', ',', '""h""', ':', '14', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '71', ',', '""y""', ':', '132', ',', '""w""', ':', '12', ',', '""h""', ':', '14', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '15', ',', '""y""', ':', '126', ',', '""w""', ':', '12', ',', '""h""', ':', '15', '},', '""rotated""', ':', 'true', '}', ']', '},', '""run""', ':', '{', '""numFrames""', ':', '10', ',', '""frames""', ':', '[', '{', '""frame""', ':', '{', '""x""', ':', '73', ',', '""y""', ':', '82', ',', '""w""', ':', '12', ',', '""h""', ':', '15', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '29', ',', '""y""', ':', '125', ',', '""w""', ':', '12', ',', '""h""', ':', '15', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '33', ',', '""y""', ':', '36', ',', '""w""', ':', '12', ',', '""h""', ':', '16', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '1', ',', '""y""', ':', '107', ',', '""w""', ':', '12', ',', '""h""', ':', '16', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '1', ',', '""y""', ':', '89', ',', '""w""', ':', '12', ',', '""h""', ':', '16', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '17', ',', '""y""', ':', '54', ',', '""w""', ':', '12', ',', '""h""', ':', '16', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '1', ',', '""y""', ':', '125', ',', '""w""', ':', '12', ',', '""h""', ':', '16', '},', '""rotated""', ':', 'false', '}', '{', '""frame""', ':', '{', '""x""', ':', '15', ',', '""y""', ':', '143', ',', '""w""', ':', '12', ',', '""h""', ':', '14', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '29', ',', '""y""', ':', '142', ',', '""w""', ':', '12', ',', '""h""', ':', '14', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '72', ',', '""y""', ':', '99', ',', '""w""', ':', '12', ',', '""h""', ':', '15', '},', '""rotated""', ':', 'false', '}', ']', '},', '""roll""', ':', '{', '""numFrames""', ':', '5', ',', '""frames""', ':', '[', '{', '""frame""', ':', '{', '""x""', ':', '71', ',', '""y""', ':', '116', ',', '""w""', ':', '12', ',', '""h""', ':', '14', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '71', ',', '""y""', ':', '148', ',', '""w""', ':', '12', ',', '""h""', ':', '10', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '73', ',', '""y""', ':', '47', ',', '""w""', ':', '12', ',', '""h""', ':', '15', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '57', ',', '""y""', ':', '147', ',', '""w""', ':', '12', ',', '""h""', ':', '11', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '29', ',', '""y""', ':', '108', ',', '""w""', ':', '12', ',', '""h""', ':', '15', '},', '""rotated""', ':', 'false', '}', ']', '},', '""jump""', ':', '{', '""numFrames""', ':', '1', ',', '""frames""', ':', '[', '{', '""frame""', ':', '{', '""x""', ':', '45', ',', '""y""', ':', '54', ',', '""w""', ':', '12', ',', '""h""', ':', '16', '},', '""rotated""', ':', 'false', '}', ']', '},', '""fall""', ':', '{', '""numFrames""', ':', '1', ',', '""frames""', ':', '[', '{', '""frame""', ':', '{', '""x""', ':', '29', ',', '""y""', ':', '90', ',', '""w""', ':', '12', ',', '""h""', ':', '16', '},', '""rotated""', ':', 'false', '}', ']', '},', '""shoot""', ':', '{', '""numFrames""', ':', '5', ',', '""frames""', ':', '[', '{', '""frame""', ':', '{', '""x""', ':', '37', ',', '""y""', ':', '1', ',', '""w""', ':', '14', ',', '""h""', ':', '15', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '17', ',', '""y""', ':', '37', ',', '""w""', ':', '14', ',', '""h""', ':', '15', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '1', ',', '""y""', ':', '37', ',', '""w""', ':', '14', ',', '""h""', ':', '16', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '19', ',', '""y""', ':', '19', ',', '""w""', ':', '14', ',', '""h""', ':', '15', '},', '""rotated""', ':', 'false', '},', '{', '""frame""', ':', '{', '""x""', ':', '1', ',', '""y""', ':', '55', ',', '""w""', ':', '14', ',', '""h""', ':', '15', '},', '""rotated""', ':', 'false', '}', ']', '}', '}', '}', 'and', 'here', 'is', 'the', 'code', 'that', ""I'm"", 'using', 'to', 'unmarshal', 'package', 'main', 'import', '(', '""encoding/json""', '""io/ioutil""', ')', 'type', 'AnimationFrame', 'struct', '{', 'Frame', 'struct', '{', 'X', 'int', 'json', ':', '""x""', 'Y', 'int', 'json', ':', '""y""', 'W', 'int', 'json', ':', '""w""', 'H', 'int', 'json', ':', '""h""', '}', 'json', ':', '""frame""', 'Rotated', 'bool', 'json', ':', '""rotated""', '}', 'type', 'Animation', 'struct', '{', 'NumFrames', 'int', 'json', ':', '""numFrames""', 'Frames', '[]', 'AnimationFrame', 'json', ':', '""frames""', '}', 'type', 'StateList', 'struct', '{', 'Actions', 'map', '[', 'string', ']', 'Animation', 'json', ':', '""animationStates""', '}', 'func', 'NewAnimation', '(', 'file', 'string', ')', '*', 'StateList', '{', 'list', ':=', 'make', '(', 'map', '[', 'string', ']', 'Animation', ')', 's', ':=', '&', 'StateList', '{', 'list', '}', 'buff', ',', 'err', ':=', 'ioutil.ReadFile(file)', 'check', '(', 'err', ')', 'json.Unmarshal([]byte(buff), &s)', 'return', 's', '}', 'func', 'check', '(', 'e', 'error', ')', '{', 'if', 'e', '!=', 'nil', '{', 'panic', '(', 'e', ')', '}', '}', 'Does', 'anyone', 'see', 'what', ""I'm"", 'doing', 'wrong?', 'Thanks.']"
1537,36310538," tells me that it is a Slice of byte. How can I differentiate []byte{} from A{}, without having a bounded list of types to check for?

Are there new ways to do it in newer versions of Go?
","['I', 'need', 'to', 'differentiate', 'such', 'types', 'as', 'type', 'A', '[]byte', 'from', 'a', '[]byte.', 'Using', 'reflect,', 'reflect.TypeOf(A{})', '.', 'Kind', 'tells', 'me', 'that', 'it', 'is', 'a', 'Slice', 'of', 'byte.', 'How', 'can', 'I', 'differentiate', '[]byte{}', 'from', 'A{},', 'without', 'having', 'a', 'bounded', 'list', 'of', 'types', 'to', 'check', 'for?', 'Are', 'there', 'new', 'ways', 'to', 'do', 'it', 'in', 'newer', 'versions', 'of', 'Go?']"
1538,36322527,"

I suspect I am not decoding the JSON properly or I am missing something very obvious.
","['I', 'have', 'been', 'experimenting', 'with', 'GO', 'for', 'the', 'first', 'time,', 'over', 'the', 'last', 'few', 'days.', 'I', 'have', 'a', 'HTML', 'form', 'that', 'passes', ""it's"", 'values', 'to', 'a', 'server.', 'This', 'server', 'in', 'turn', 'extracts', 'the', 'form', 'keys/', 'values', 'and', 'places', 'them', 'inside', 'a', 'JSON.', 'This', 'JSON', 'is', 'then', 'sent', 'to', 'another', 'server.', 'The', 'issue', 'is:', 'I', 'get', 'the', 'following', 'error', 'when', 'the', 'second', 'server', 'attempts', 'to', 'decode', 'the', 'JSON:', 'Error', 'decoding', 'JSON', ':', 'json', ':', 'cannot', 'unmarshal', 'string', 'into', 'Go', 'value', 'of', 'type', 'main', '.', 'NewContainerJSON', '1:', 'The', 'original', 'HTML', 'form', 'Container', 'Configuration', 'Container', 'Name', 'Base', 'Server', 'Ubuntu', '14', '.', '04', 'Content', 'Management', 'System', 'Wordpress', 'Website', 'Name', 'New', 'Root', 'Database', 'Password', 'Database', 'Admin', 'Username', 'Database', 'Admin', 'Password', '2:', 'The', 'first', 'servers', 'code', 'package', 'main', 'import', '(', '""fmt""', '""encoding/json""', '""net""', '""net/http""', ')', 'type', 'newContainerJSON', 'struct', '{', 'ContainerName', 'string', 'BaseServer', 'string', 'CMS', 'string', 'WebsiteName', 'string', 'DBrootPWD', 'string', 'DBadminUname', 'string', 'DBadminPWD', 'string', '}', 'func', 'newUser', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'r.ParseForm()', 'cName', ':=', 'r.FormValue(""containerName"")', 'sName', ':=', 'r.FormValue(""BaseServer"")', 'cmsName', ':=', 'r.FormValue(""CMS"")', 'wsName', ':=', 'r.FormValue(""websiteName"")', 'dbrootPwd', ':=', 'r.FormValue(""dbRootPWD"")', 'dbadmName', ':=', 'r.FormValue(""dbAdminUname"")', 'dbamdpwdName', ':=', 'r.FormValue(""dbAdminPwd"")', 'c', ':=', 'newContainerJSON', '{', 'ContainerName', ':', 'cName', ',', 'BaseServer', ':', 'sName', ',', 'CMS', ':', 'cmsName', ',', 'WebsiteName', ':', 'wsName', ',', 'DBrootPWD', ':', 'dbrootPwd', ',', 'DBadminUname', ':', 'dbadmName', ',', 'DBadminPWD', ':', 'dbamdpwdName', ',', '}', 'd', ',', '_', ':=', 'json.Marshal(c)', 's', ':=', 'string', '(', 'd', ')', 'fmt.Println(s)', 'conn', ',', 'err', ':=', 'net.Dial(""tcp"", ""127.0.0.1:8081"")', 'checkError', '(', 'err', ')', 'encoder', ':=', 'json.NewEncoder(conn)', 'encoder.Encode(d)', '}', 'func', 'main', '()', '{', 'http.HandleFunc(""/new-user"", newUser)', 'err', ':=', 'http.ListenAndServe("":8080"", nil)', '// setting listening port', 'checkError', '(', 'err', ')', '}', 'func', 'checkError', '(', 'err', 'error', ')', '{', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""Fatal error "", err.Error())', '}', '}', '3:', 'The', 'second', 'servers', 'code:', 'package', 'main', 'import', '(', '""fmt""', '""net""', '""encoding/json""', ')', 'type', 'NewContainerJSON', 'struct', '{', 'ContainerName', 'string', 'json', ':', '"",string""', 'BaseServer', 'string', 'json', ':', '"",string""', 'CMS', 'string', 'json', ':', '"",string""', 'WebsiteName', 'string', 'json', ':', '"",string""', 'DBrootPWD', 'string', 'json', ':', '"",string""', 'DBadminUname', 'string', 'json', ':', '"",string""', 'DBadminPWD', 'string', 'json', ':', '"",string""', '}', 'func', 'main', '()', '{', 'service', ':=', '""127.0.0.1:8081""', 'tcpAddr', ',', 'err', ':=', 'net.ResolveTCPAddr(""tcp"", service)', 'checkError', '(', 'err', ')', 'listener', ',', 'err', ':=', 'net.ListenTCP(""tcp"", tcpAddr)', 'checkError', '(', 'err', ')', 'conn', ',', 'err', ':=', 'listener.Accept()', 'checkError', '(', 'err', ')', 'decoder', ':=', 'json.NewDecoder(conn)', 'var', 'b', 'NewContainerJSON', 'err', '=', 'decoder.Decode(&b)', 'checkError', '(', 'err', ')', 'fmt.Println(b)', 'conn.Close()', ""// we're finished"", '}', 'func', 'checkError', '(', 'err', 'error', ')', '{', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""An error occurred: "", err.Error())', '}', '}', 'The', 'error', 'occurs', 'with', 'following', 'code', 'in', 'the', 'second', 'servers', 'code', 'var', 'b', 'NewContainerJSON', 'err', '=', 'decoder.Decode(&b)', 'checkError', '(', 'err', ')', 'fmt.Println(b)', 'I', 'suspect', 'I', 'am', 'not', 'decoding', 'the', 'JSON', 'properly', 'or', 'I', 'am', 'missing', 'something', 'very', 'obvious.']"
1539,36326870,"

Reports this error:


  The data area passed to a system call is too small

","['package', 'main', 'import', '(', '""fmt""', '""syscall""', '""unsafe""', ')', 'const', '(', 'PROCESS_QUERY_INFORMATION', '=', '1', '<<', '10', 'PROCESS_VM_READ', '=', '1', '<<', '4', ')', '//', 'defind', 'a', 'struct', 'type', 'PROCESS_MEMORY_COUNTERS', 'struct', '{', 'cb', 'uint32', 'PageFaultCount', 'uint32', 'PeakWorkingSetSize', 'uint64', 'WorkingSetSize', 'uint64', 'QuotaPeakPagedPoolUsage', 'uint64', 'QuotaPagedPoolUsage', 'uint64', 'QuotaPeakNonPagedPoolUsage', 'uint64', 'QuotaNonPagedPoolUsage', 'uint64', 'PagefileUsage', 'uint64', 'PeakPagefileUsage', 'uint64', '}', 'func', 'main', '()', '{', '//', 'get', 'Process', 'Handle', 'current', ',', 'err', ':=', 'syscall.OpenProcess(PROCESS_QUERY_INFORMATION|PROCESS_VM_READ, false, 728)', 'if', 'err', '!=', 'nil', '{', 'return', '}', '//', 'call', 'psapi.ll', 'psapi', ':=', 'syscall.NewLazyDLL(""psapi.dll"")', 'var', 'process', 'PROCESS_MEMORY_COUNTERS', 'process', '.', 'cb', '=', 'uint32', '(', 'unsafe.Sizeof((process)))', 'GetProcessMemoryInfo', ':=', 'psapi.NewProc(""GetProcessMemoryInfo"")', '_', ',', '_', ',', 'err', '=', 'GetProcessMemoryInfo.Call(uintptr(current), uintptr(unsafe.Pointer(&process)), unsafe.Sizeof(&process))', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'else', '{', 'fmt.Println(process)', '}', '}', 'Reports', 'this', 'error:', 'The', 'data', 'area', 'passed', 'to', 'a', 'system', 'call', 'is', 'too', 'small']"
1540,36341505,"
","['I', 'trying', 'to', 'deploy', 'my', 'server', 'on', 'heroku', 'and', 'I', 'stuck', 'on', 'step', 'where', 'I', 'should', 'use', 'godep,', 'I', 'spent', 'little', 'time', 'with', 'GO,', 'last', 'two', 'days', 'I', 'had', 'looking', 'how', 'to', 'solve', 'this', 'issue,', 'actually', ""it's"", 'a', 'popular', 'issue,', 'but', 'I', ""can't"", 'figure', 'out,', 'maybe', 'I', 'did', 'something', 'fundamentally', 'wrong.', 'I', 'have', 'OS', 'X', '10.11.2', 'My', 'GOPATH', '-', 'Users/denis/Programming/Golang', 'My', 'PATH', '-', '$GOPATH/bin', 'I', 'trying', 'to', 'use', 'godep', 'to', 'my', 'project', 'which', 'is', 'placed', 'in', '$GOPATH/src/backend', 'in', 'my', 'PATH', 'I', 'have', 'an', 'executable', 'godep', 'file(not', '.go).', 'Whole', 'structure', 'of', 'my', 'workplace.', '/', 'Golang', '/', '.', 'bin', '/', 'go', 'dep', '//executable file', '.', 'pkg', '/', '.', 'darwin', '-', 'amd64', '/', './/', 'other', 'folders', '/', '.', 'src', '/', '.', 'github', '.', 'com', '/', '.', 'backend', '/', './/', 'other', 'folders//']"
1541,36344680,"

The code of my scritp is here:

https://gist.github.com/hectorgool/c9e18d7d6324a9ed1a2df92ddcc95c08#file-elastigo_example-go-L80
","[""I'm"", 'testing', 'golang', 'with', 'elasticsearch', ""I'm"", 'using', 'the', 'library:', 'https://github.com/mattbaird/elastigo', 'My', 'problem', 'is', 'when', 'i', 'run:', 'go', 'run', 'elastigo_postal_code2', '.', 'go', 'The', 'compiler', 'show', 'something', 'like', 'this:', 'panic', ':', 'runtime', 'error', ':', 'index', 'out', 'of', 'range', 'go', 'routine', '1', '[', 'running', ']:', 'panic', '(', '0x893ce', '0', ',', '0xc82', '0', '0', '0', 'a150', ')', '/opt/go/src/runtime/panic.go:464', '+', '0x3ff', 'main.main()', '/home/hector/go/elastigo_postal_code2.go:80', '+', '0xa3', '0', 'exit', 'status', '2', ""I'm"", 'not', 'sure', 'what', 'this', 'means', 'or', 'how', 'I', 'can', 'fix', 'it!', 'Someone', 'can', 'help', 'me', 'and', 'tell', 'me', ""I'm"", 'doing', 'wrong', '/*', 'curl', '-', 'X', 'PUT', '""http://localhost:9200/mx2/postal_code/1""', '-', 'd', '{', '""cp\\""', ':', '""20000\\""', ',', '""colonia\\""', ':', '""Zona Centro\\""', ',', '""ciudad\\""', ':', '""Aguascalientes\\""', ',', '""delegacion\\""', ':', '""Aguascalientes\\""', ',', '""location\\""', ':', '{', '""lat\\""', ':', '""22.0074\\""', ',', '""lon\\""', ':', '""-102.2837\\""', '}', '}', 'curl', '-', 'X', 'PUT', '""http://localhost:9200/mx2/postal_code/2""', '-', 'd', '{', '""cp\\""', ':', '""20008\\""', ',', '""colonia\\""', ':', '""Delegacion de La Secretaria de Comercio y Fomento Industrial\\""', ',', '""ciudad\\""', ':', '""Aguascalientes\\""', ',', '""delegacion\\""', ':', '""Aguascalientes\\""', ',', '""location\\""', ':', '{', '""lat\\""', ':', '""22.0074\\""', ',', '""lon\\""', ':', '""-102.2837\\""', '}', '}', '*/', 'package', 'main', 'import', '(', '""encoding/json""', '""flag""', '""log""', 'elastigo', '""github.com/mattbaird/elastigo/lib""', ')', 'var', '(', 'eshost', '*', 'string', '=', 'flag.String(""host"", ""localhost"", ""Elasticsearch Server Host Address"")', ')', 'func', 'main', '()', '{', 'flag.Parse()', 'log.SetFlags(log.Ltime | log.Lshortfile)', 'c', ':=', 'elastigo.NewConn()', 'c', '.', 'Domain', '=', '*', 'eshost', '//', '/', 'searchJson', ':=', '{', '""size""', ':', '10', ',', '""query""', ':', '{', '""match""', ':', '{', '""all""', ':', '{', '""query""', ':', '""aguascalientes""', ',', '""operator""', ':', '""and""', '}', '}', '},', '""sort""', ':', '[{', '""colonia""', ':', '{', '""order""', ':', '""asc""', ',', '""mode""', ':', '""avg""', '}', '}]', '}', '//', '/', 'searchresponse', ',', 'err', ':=', 'c.Search(""mx2"", ""postal_code"", nil, searchJson)', 'if', 'err', '!=', 'nil', '{', 'log.Println(""error during search:"" + err.Error())', 'log.Fatal(err)', '}', '//', 'try', 'marshalling', 'to', 'ElasticSearchResponse', 'type', 'var', 't', 'ElasticSearchResponse', 'bytes', ',', 'err', ':=', 'searchresponse', '.', 'Hits', '.', 'Hits', '[', '0', '].', 'Source.MarshalJSON()', 'if', 'err', '!=', 'nil', '{', 'log.Fatalf(""err calling marshalJson:%v"", err)', '}', 'json.Unmarshal(bytes, &t)', 'log.Printf(""Search Found: %s"", t)', 'c.Flush()', '}', 'func', '(', 't', '*', 'ElasticSearchResponse', ')', 'String', '()', 'string', '{', 'b', ',', '_', ':=', 'json.Marshal(t)', 'return', 'string', '(', 'b', ')', '}', '//', 'used', 'in', 'test', 'suite,', 'chosen', 'to', 'be', 'similar', 'to', 'the', 'documentation', 'type', 'ElasticSearchResponse', 'struct', '{', 'Cp', 'string', 'json', ':', '""cp""', 'Colonia', 'string', 'json', ':', '""colonia""', 'Ciudad', 'string', 'json', ':', '""ciudad""', 'Delegacion', 'string', 'json', ':', '""delegacion""', 'Location', 'Location', 'json', ':', '""location""', '}', 'type', 'Location', 'struct', '{', 'Lat', 'string', 'json', ':', '""lat""', 'Lon', 'string', 'json', ':', '""lon""', '}', 'The', 'code', 'of', 'my', 'scritp', 'is', 'here:', 'https://gist.github.com/hectorgool/c9e18d7d6324a9ed1a2df92ddcc95c08#file-elastigo_example-go-L80']"
1542,36356835,"

I'm a very beginner in Go so don't hesitate to correct me if my code un not clear and clean.

Thanks for your help !
","[""I'm"", 'working', 'on', 'a', 'POC', 'using', 'Gorilla/Websocket', 'to', 'communicate,', 'through', 'a', 'Web', 'Proxy,', 'with', 'the', 'Websocket', 'Check', 'Website', '""echo.websocket.org"".', ""I'm"", 'using', 'the', 'free', 'online', 'Proxy', '""hide.me/en/""', 'for', 'testing.', 'When', 'I', 'simply', 'try', 'to', 'communicate', 'with', '""echo.websocket.org""', '(Server', 'side),', 'my', 'client-site', 'Websocket', 'POC', 'reach', 'the', 'response.', 'But', 'when', 'i', 'try', 'to', 'add', 'the', 'Proxy', 'gesture,', 'everything', 'goes', 'wrong', ':(', 'Here', 'is', 'a', 'sample', 'of', 'my', 'code', ':', 'package', 'main', 'import', '(', '""flag""', '""log""', '""net/url""', '""os""', '""os/signal""', '""time""', '""github.com/gorilla/websocket""', '""net/http""', ')', 'var', 'addrWebsocket', '=', 'flag.String(""addrWebsocket"", ""echo.websocket.org"", ""http service address"")', 'func', 'main', '()', '{', 'flag.Parse()', 'log.SetFlags(0)', 'interrupt', ':=', 'make', '(', 'chan', 'os', '.', 'Signal', ',', '1', ')', 'signal.Notify(interrupt, os.Interrupt)', '//', 'Initialize', 'the', 'WebSocket', 'URL', 'and', 'the', 'Path', 'to', 'follow', 'uWS', ':=', 'url', '.', 'URL', '{', 'Scheme', ':', '""wss""', ',', 'Host', ':', '*', 'addrWebsocket', '}', '//', 'Initialize', 'the', 'Proxy', 'URL', 'and', 'the', 'Path', 'to', 'follow', 'uProxy', ',', '_', ':=', 'url.Parse(""https://hide.me/en/proxy"")', '//', 'Set', 'the', 'Dialer', '(especially', 'the', 'proxy)', 'dialer', ':=', 'websocket', '.', 'Dialer', '{', 'Proxy', ':', 'http.ProxyURL(uProxy)', ',', '}', '//', 'dialer', ':=', 'websocket.DefaultDialer', '==>', 'with', 'this', 'default', 'dialer,', 'it', 'works', '!', 'c', ',', '_', ',', 'err', ':=', 'dialer.Dial(uWS.String(), nil)', '// ==> With the proxy config, it fails here !', 'defer', 'c.Close()', 'done', ':=', 'make', '(', 'chan', 'struct', '{})', 'go', 'func', '()', '{', 'defer', 'c.Close()', 'defer', 'close', '(', 'done', ')', 'for', '{', '_', ',', 'message', ',', 'err', ':=', 'c.ReadMessage()', 'if', 'err', '!=', 'nil', '{', 'log.Println(""read:"", err)', 'return', '}', 'log.Printf(""recv: %s"", message)', '}', '}()', 'ticker', ':=', 'time.NewTicker(time.Second)', 'defer', 'ticker.Stop()', 'for', '{', 'select', '{', 'case', 't', ':=', '<-', 'ticker', '.', 'C', ':', 'err', ':=', 'c.WriteMessage(websocket.TextMessage, []byte(t.String()))', 'if', 'err', '!=', 'nil', '{', 'log.Println(""write:"", err)', 'return', '}', 'case', '<-', 'interrupt', ':', 'log.Println(""interrupt"")', 'err', ':=', 'c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, """"))', 'if', 'err', '!=', 'nil', '{', 'log.Println(""write close:"", err)', 'return', '}', 'select', '{', 'case', '<-', 'done', ':', 'case', '<-', 'time.After(time.Second)', ':', '}', 'c.Close()', 'return', '}', '}', '}', ""I'm"", 'a', 'very', 'beginner', 'in', 'Go', 'so', ""don't"", 'hesitate', 'to', 'correct', 'me', 'if', 'my', 'code', 'un', 'not', 'clear', 'and', 'clean.', 'Thanks', 'for', 'your', 'help', '!']"
1543,36362457,"

Then switch on the type field and cast to the proper struct, but honestly I am new to go and mongo and am sure there is better way to do this. Any suggestions? Thanks
","['I', 'have', 'a', 'fairly', 'odd', 'question', 'that', 'I', 'have', 'been', 'trying', 'to', 'wrap', 'my', 'head', 'around', 'and', 'am', 'looking', 'of', 'some', 'pointers', 'as', 'to', 'the', 'best', 'approach.', 'I', 'am', 'use', 'mgo', 'to', 'filter', 'a', 'collection', 'that', 'contains', 'a', 'few', 'different', 'types', 'of', 'structs', 'and', 'am', 'trying', 'to', 'cast', 'from', 'bson.M', 'to', 'the', 'proper', 'struct', 'after', 'the', 'fact.', 'Basically', ""I'd"", 'like', 'to', 'be', 'able', 'to', 'filter', 'the', 'collection', 'and', 'look', 'at', 'each', 'result', 'and', 'based', 'on', 'a', 'common', 'field', 'cast', 'to', 'the', 'proper', 'struct.', 'Here', 'is', 'sample', 'of', 'the', 'structs', 'I', 'am', 'trying', 'to', 'use.', 'type', 'Action', 'interface', '{', 'MyFunc', '()', 'bool', '}', 'type', 'Struct1', 'struct', '{', 'Id', 'bson', '.', 'ObjectId', 'bson', ':', '""_id,omitempty""', 'Type', 'string', 'bson', ':', '""type""', 'Struct1Only', 'string', 'bson', ':', '""struct1only""', '}', 'func', '(', 's', 'Struct1', ')', 'MyFunc', '()', 'bool', '{', 'return', 'true', '}', 'type', 'Struct2', 'struct', '{', 'Id', 'bson', '.', 'ObjectId', 'bson', ':', '""_id,omitempty""', 'Type', 'string', 'bson', ':', '""type""', 'Struct2Only', 'string', 'bson', ':', '""struct2only""', '}', 'func', '(', 's', 'Struct2', ')', 'MyFunc', '()', 'bool', '{', 'return', 'true', '}', 'My', 'initial', 'idea', 'was', 'to', 'do', 'something', 'like:', 'var', 'result', 'bson', '.', 'M', '{}', 'err', ':=', 'c.Find(bson.M{nil}).One(&result)', 'Then', 'switch', 'on', 'the', 'type', 'field', 'and', 'cast', 'to', 'the', 'proper', 'struct,', 'but', 'honestly', 'I', 'am', 'new', 'to', 'go', 'and', 'mongo', 'and', 'am', 'sure', 'there', 'is', 'better', 'way', 'to', 'do', 'this.', 'Any', 'suggestions?', 'Thanks']"
1544,36407297,"
","['I', 'am', 'casting', 'to', 'a', 'struct', 'which', 'has', 'a', 'time.Time', 'type', 'in.', 't2', ':=', 'time.Now()', 'for', 'mat', ':=', '""2006-01-02 15:04:05""', 'theTime', ',', '_', ':=', 'time.Parse(format, t2.Format(format))', 'However,', 'sometimes', 'I', ""don't"", 'want', 'to', 'set', 'the', 'time.Time', 'field,', 'how', 'do', 'you', 'define', 'this', 'with', 'the', 'go/mysql', 'db', 'driver?', 'app_history', ':=', '&', 'models', '.', 'AppsHistoryInsert', '{', 'AppId', ':', 'response', '.', 'SetAppData', '[', '0', '].', 'Id', ',', 'LiveDate', ':', '&', 'theTime', ',', '}', 'Basically,', 'I', 'want', 'if', '(', 'x', '==', 'true', ')', '{', 'include', 'time', '}', 'else', '{', 'don', 't', 'include', 'time', '.', '}', 'I', 'tried', 'doing', 'an', 'if', 'around', 'the', 'struct', 'declaration', 'itself', 'and', 'leaving', 'the', 'LiveDate', 'field', 'out', 'but', 'I', 'got', 'the', 'error', 'of', 'controllers/apps.go:1068:', 'undefined', ':', 'app_history']"
1545,36487467,"

Edit: 
I found this discussion, while googling around so what I'm going for may not be feasible currently 
","['Given', 'the', 'following', 'struct:', 'type', 'book', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'xml', ':', '""DailyAct""', 'Symbol', 'string', 'xml', ':', '""TradeInstrId,attr""', 'EntityId', 'string', 'xml', ':', '""EntityId,attr""', 'AssetClass', 'string', 'xml', ':', '""AssetClass,attr""', 'Open', 'int', 'xml', ':', '""Open""', 'High', 'int', 'xml', ':', '""High""', 'Low', 'int', 'xml', ':', '""Low""', 'Close', 'int', 'xml', ':', '""Close""', '//', 'Type', 'string', '``', ""I'll"", 'leave', 'this', 'for', 'another', 'question', '}', 'My', 'current', 'XML:', '2', '3', '1', '5', 'But,', 'I', 'need', 'to', 'repurpose', 'certain', 'fields', 'of', 'the', 'struct', '(or', 'generate', 'xml', 'another', 'way)', 'to', 'achieve:', 'But', 'I', 'get:', '&', 'errors', '.', 'errorString', '{', 's', ':', '""xml: DailyAct>Open chain not valid with Price,attr flag""', '}', '(', 'actual', ')', 'when', 'I', 'try', 'to', 'nest', 'fields', 'like', 'so:', 'type', 'book', 'struct', '{', '//', '...', 'Open', 'int', 'xml', ':', '""DailyAct>Open,Price,attr>""', '//', '...', '}', 'Edit:', 'I', 'found', 'this', 'discussion,', 'while', 'googling', 'around', 'so', 'what', ""I'm"", 'going', 'for', 'may', 'not', 'be', 'feasible', 'currently']"
1546,36525757,"We use a third party library which accepts *log.Logger (stdlib Logger) as a parameter in its New function, but we implement Logger by ourself. It has the same ""interface"" with stdlib Logger.

Is there any hack way to pass our own implementation of Logger to the third library excepting asking the library owner to change the parameter type to interface？
","['Edit:', 'I', 'found', 'this', 'discussion,', 'while', 'googling', 'around', 'so', 'what', ""I'm"", 'going', 'for', 'may', 'not', 'be', 'feasible', 'currently']"
1547,36566288,"the state machine's first state is waiting for one event, if the event doesn't happen in certain days, the status machine will switch to the second state. If the event happened in the period, the state machine will switch to the third state. 

I have two option:
1, Use a timer. Set up a timer as certain days. When time is up, checking does the event happened or not. If happened, switch to the third state. If not, switch to the second state. It is possible that thousands of timers will be created in the period.

2, Use a looping with routine. Start a routine to run a loop. Every half hour, the goroutine will check the event happened or not. If the event happened, switch to the third state. Else, keep looping until expired the certain days, then switch to the second state. 

My question is time.Timer vs goroutine, which is more suit for this case?
","['the', 'state', ""machine's"", 'first', 'state', 'is', 'waiting', 'for', 'one', 'event,', 'if', 'the', 'event', ""doesn't"", 'happen', 'in', 'certain', 'days,', 'the', 'status', 'machine', 'will', 'switch', 'to', 'the', 'second', 'state.', 'If', 'the', 'event', 'happened', 'in', 'the', 'period,', 'the', 'state', 'machine', 'will', 'switch', 'to', 'the', 'third', 'state.', 'I', 'have', 'two', 'option:', '1,', 'Use', 'a', 'timer.', 'Set', 'up', 'a', 'timer', 'as', 'certain', 'days.', 'When', 'time', 'is', 'up,', 'checking', 'does', 'the', 'event', 'happened', 'or', 'not.', 'If', 'happened,', 'switch', 'to', 'the', 'third', 'state.', 'If', 'not,', 'switch', 'to', 'the', 'second', 'state.', 'It', 'is', 'possible', 'that', 'thousands', 'of', 'timers', 'will', 'be', 'created', 'in', 'the', 'period.', '2,', 'Use', 'a', 'looping', 'with', 'routine.', 'Start', 'a', 'routine', 'to', 'run', 'a', 'loop.', 'Every', 'half', 'hour,', 'the', 'goroutine', 'will', 'check', 'the', 'event', 'happened', 'or', 'not.', 'If', 'the', 'event', 'happened,', 'switch', 'to', 'the', 'third', 'state.', 'Else,', 'keep', 'looping', 'until', 'expired', 'the', 'certain', 'days,', 'then', 'switch', 'to', 'the', 'second', 'state.', 'My', 'question', 'is', 'time.Timer', 'vs', 'goroutine,', 'which', 'is', 'more', 'suit', 'for', 'this', 'case?']"
1548,36571917,"

How can I free these memory? Since I need to used this function to do a lot of process. It causes lots of memory leaks, which can not be freed
","['Here', 'is', 'the', 'code.', 'In', 'the', 'golang', 'main', 'function,', 'which', 'in', 'main.go', 'func', 'main', '()', '{', 'rgc.GetRgcService()', '}', 'where', 'the', 'rgc', 'is', 'in', 'another', 'golang', 'file,', 'named', 'mrgc.go.', 'The', 'code', 'inside', 'is', 'package', 'rgc', 'func', 'GetRgcService', '()', '(', 'svc', '*', 'RgcService', ',', 'err', 'error', ')', '{}', 'The', 'function', 'GetRgcService', 'is', 'a', 'empty', 'function.', 'However,', 'when', 'I', 'used', 'valgrind', 'to', 'test', 'the', 'memory,', 'I', 'got', 'the', 'following', 'output', '==', '58156', '==', 'HEAP', 'SUMMARY', ':', '==', '58156', '==', 'in', 'use', 'at', 'exit', ':', '1', ',', '152', 'bytes', 'in', '4', 'blocks', '==', '58156', '==', 'total', 'heap', 'usage', ':', '9', 'allocs', ',', '5', 'frees', ',', '1', ',', '304', 'bytes', 'allocated', '==', '58156', '==', '288', 'bytes', 'in', '1', 'blocks', 'are', 'possibly', 'lost', 'in', 'loss', 'record', '4', 'of', '4', '==', '58156', '==', 'at', '0x4A27F63', ':', 'calloc', '(', 'vg_replace_malloc', '.', 'c', ':', '593', ')', '==', '58156', '==', 'by', '0x4', '01', '0', 'DE1', ':', 'allocate_dtv', '(', 'in', '/home/opt/gcc-4.8.2.bpkg-r2/gcc-4.8.2.bpkg-r2/lib64/ld-2.18.so)', '==', '58156', '==', 'by', '0x4', '0114', 'ED', ':', '_dl_allocate_tls', '(', 'in', '/home/opt/gcc-4.8.2.bpkg-r2/gcc-4.8.2.bpkg-r2/lib64/ld-2.18.so)', '==', '58156', '==', 'by', '0x4B36DE2', ':', 'pthread_create', 'GLIBC_2', '.', '2.5 (in /home/opt/gcc-4.8.2.bpkg-r2/gcc-4.8.2.bpkg-r2/lib64/libpthread-2.18.so)', '==', '58156', '==', 'by', '0x4B2937', ':', '_cgo_sys_thread_start', '(', 'gcc_linux_amd64', '.', 'c', ':', '75', ')', '==', '58156', '==', 'by', '0x455', '06', 'C', ':', 'runtime.asmcgocall (/home/map/.jumbo/lib/go/src/runtime/asm_amd64.s:612)', '==', '58156', '==', 'by', '0x5', '061', '9', 'F', ':', '(', 'in', '/home/users/zhanghuaizhi/ttt.38)', '==', '58156', '==', 'by', '0xC7FFFFFFFF', ':', '==', '58156', '==', 'by', '0xC82', '0', '067', 'FFF', ':', '==', '58156', '==', 'by', '0x42D69B', ':', 'runtime.allocm (/home/map/.jumbo/lib/go/src/runtime/proc.go:1260)', '==', '58156', '==', 'by', '0x42DD3A', ':', 'runtime.newm (/home/map/.jumbo/lib/go/src/runtime/proc.go:1510)', '==', '58156', '==', 'by', '0x42E', '071', ':', 'runtime.startm (/home/map/.jumbo/lib/go/src/runtime/proc.go:1583)', '==', '58156', '==', '==', '58156', '==', 'LEAK', 'SUMMARY', ':', '==', '58156', '==', 'definitely', 'lost', ':', '0', 'bytes', 'in', '0', 'blocks', '==', '58156', '==', 'indirectly', 'lost', ':', '0', 'bytes', 'in', '0', 'blocks', '==', '58156', '==', 'possibly', 'lost', ':', '1', ',', '152', 'bytes', 'in', '4', 'blocks', '==', '58156', '==', 'still', 'reachable', ':', '0', 'bytes', 'in', '0', 'blocks', '==', '58156', '==', 'suppressed', ':', '0', 'bytes', 'in', '0', 'blocks', 'How', 'can', 'I', 'free', 'these', 'memory?', 'Since', 'I', 'need', 'to', 'used', 'this', 'function', 'to', 'do', 'a', 'lot', 'of', 'process.', 'It', 'causes', 'lots', 'of', 'memory', 'leaks,', 'which', 'can', 'not', 'be', 'freed']"
1549,36614509,"
","['When', 'I', 'assign', 'a', 'function', 'to', 'variable', 'and', 'try', 'to', 'invoke', 'it', '.', 'It', 'throws', 'an', 'error', ""'too"", 'many', 'arguments', 'to', ""return'"", 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'first_name', ':=', '""Hello""', 'last_name', ':=', '""World!""', 'full_name', ':=', 'func', '()', '{', 'return', 'first_name', '}', 'fmt.Println(first_name)', 'fmt.Println(last_name)', 'fmt.Println(full_name)', '}']"
1550,36683911,"

Why does c look like [0,0] and have length 2? b was not originally zero'ed hence it being []. So does setting c to b[:2] zero out the first two elements?

Also, why is the capacity of d 3? Very confused.

Thanks in advance.
","['Trying', 'to', 'learn', 'Go', 'from', 'the', 'tutorial', 'right', 'now,', 'and', 'have', 'a', 'pretty', 'basic', 'question:', 'func', 'main', '()', '{', 'a', ':=', 'make', '([]', 'int', ',', '5', ')', '//', '[0,0,0,0,0]', 'len=5', 'cap=5', 'b', ':=', 'make', '([]', 'int', ',', '0', ',', '5', ')', '//', '[]', 'len=0', 'cap=5', 'c', ':=', 'b', '[:', '2', ']', '//', '[0,0]', 'len=2', 'cap=5', 'd', ':=', 'c', '[', '2', ':', '5', ']', '//', '[0,0,0]', 'len=3', 'cap=3', '}', 'Why', 'does', 'c', 'look', 'like', '[0,0]', 'and', 'have', 'length', '2?', 'b', 'was', 'not', 'originally', ""zero'ed"", 'hence', 'it', 'being', '[].', 'So', 'does', 'setting', 'c', 'to', 'b[:2]', 'zero', 'out', 'the', 'first', 'two', 'elements?', 'Also,', 'why', 'is', 'the', 'capacity', 'of', 'd', '3?', 'Very', 'confused.', 'Thanks', 'in', 'advance.']"
1551,36688872,"

For the above: if I want to test f4, what's the best way to mock f2 and f3?

If I pass f2 and f3 to f4 as parameters it would work, but then what for the f2 test? Should I pass f1 to f2 as parameter?

And if that's it, should then f4 have f1 as well in the parameters?
","['I', 'am', 'developing', 'some', 'tests', 'for', 'my', 'code', '(using', 'the', 'testing', 'package),', 'and', 'I', 'am', 'wondering', ""what's"", 'the', 'best', 'way', 'to', 'mock', 'functions', 'inside', 'the', 'tested', 'function:', 'Should', 'I', 'pass', 'the', 'function', 'as', 'parameter?', 'In', 'that', 'case,', 'what', 'if', 'that', 'function', 'calls', 'another', 'function?', 'Should', 'I', 'pass', 'both', 'the', 'first', 'and', 'second', 'function', 'as', 'parameters', 'in', 'the', 'tested', 'one?', 'Note:', 'some', 'of', 'the', 'functions', 'are', 'called', 'on', 'objects', '(i.e.', 'someObj.Create())', 'and', 'use', 'HTTP', 'API', 'calls.', 'UPDATE', 'for', 'clarification:', 'Example:', 'functions', 'func', 'f1', '()', 'error', '{', '...', '//some API call', '}', 'func', '(', 's', '*', 'SomeStruct', ')', 'f2', '()', 'error', '{', 'return', 'f1', '}', 'func', 'f3', '()', 'error', '{', 'return', 'nil', '}', 'func', 'f4', '()', 'error', '{', '...', 'err', '=', 'obj.f2()', '...', 'err', '=', 'f3', '()', '...', '}', 'For', 'the', 'above:', 'if', 'I', 'want', 'to', 'test', 'f4,', ""what's"", 'the', 'best', 'way', 'to', 'mock', 'f2', 'and', 'f3?', 'If', 'I', 'pass', 'f2', 'and', 'f3', 'to', 'f4', 'as', 'parameters', 'it', 'would', 'work,', 'but', 'then', 'what', 'for', 'the', 'f2', 'test?', 'Should', 'I', 'pass', 'f1', 'to', 'f2', 'as', 'parameter?', 'And', 'if', ""that's"", 'it,', 'should', 'then', 'f4', 'have', 'f1', 'as', 'well', 'in', 'the', 'parameters?']"
1552,36729147,"

Thanks in advance.
","['I', 'am', 'having', 'some', 'trouble', 'in', 'parsing', 'this', 'date', '(""APR', '19,', '3:15p', 'ET""),', 'can', 'anyone', 'please', 'help', 'me', 'in', 'this', 'regard?', 'This', 'is', 'the', 'code', 'which', 'I', 'have', 'written.', 'd', ',', 'err', ':=', 'time.Parse(""JAN 02, 3:04p ET"", date)', 'Thanks', 'in', 'advance.']"
1553,36770716,"

How can I ""work-around"" this problem?
","['I', 'am', 'working', 'on', 'Windows', '10.', 'I', 'want', 'to', 'run', 'a', '""make', 'build""', 'in', 'MINGW64', 'but', 'following', 'error', 'comes', 'up:', '$', 'make', 'build', 'bash', ':', 'make', ':', 'command', 'not', 'found', 'I', 'want', 'to', 'build', 'Glide', 'for', 'Golang', 'I', 'tried', 'following:', '$', 'sudo', 'yum', 'install', 'build', '-', 'essential', 'bash', ':', 'sudo', ':', 'command', 'not', 'found', 'As', 'well', 'as:', '$', 'yum', 'install', 'build', '-', 'essential', 'bash', ':', 'yum', ':', 'command', 'not', 'found', 'And:', '$', 'apt', '-', 'cyg', 'build', '-', 'essential', 'bash', ':', 'apt', '-', 'cyg', ':', 'command', 'not', 'found', 'How', 'can', 'I', '""work-around""', 'this', 'problem?']"
1554,36822702,"

Is there a recomended/better way of getting at the result from the parser?
(Since this feels like a bit of an abuse of the generator...)
","['I', 'am', 'trying', 'to', 'create', 'a', 'parser', 'using', ""golang's"", 'yacc', 'tool.', 'I', 'found', 'nex', 'to', 'simplify', 'creating', 'a', 'lexer', 'to', 'give', 'the', 'parser.', 'My', 'problem', 'now', 'is', 'that', 'the', 'generated', 'parser', 'has', 'no', 'method', 'or', 'field', 'to', 'give', 'me', 'access', 'to', 'the', 'parsing', 'result.', 'I', 'could', 'just', 'store', 'the', 'parse', 'result', 'in', 'a', 'global', 'variable,', 'but', 'that', 'seems', 'wrong.', 'Currently', ""I've"", 'added', 'the', 'following', 'as', 'an', 'initial', 'attempt', 'to', 'the', 'top', 'of', 'my', 'parser.y', 'file:', 'type', 'ResultParser', 'interface', '{', 'yyParser', '// Generated parser interface', 'Result', '()', 's', '.', 'Expr', '// s.Expr is an interface for the parsed result', '}', 'func', '(', 'p', '*', 'yyParserImpl', ')', 'Result', '()', 's', '.', 'Expr', '{', 'return', 'p', '.', 'stack', '[', '1', '].', 'expr', '}', 'func', 'NewResultParser', '()', 'ResultParser', '{', 'return', '&', 'yyParserImpl', '{}', '}', 'Is', 'there', 'a', 'recomended/better', 'way', 'of', 'getting', 'at', 'the', 'result', 'from', 'the', 'parser?', '(Since', 'this', 'feels', 'like', 'a', 'bit', 'of', 'an', 'abuse', 'of', 'the', 'generator...)']"
1555,36861569,"

As you can see, the FrameSet type that I want to expose contains a slice of pointers to an underlying type, each of which stores state. 

Ideally, I would love to be able to store a void* on a C++ class, and make it just a simple proxy for calling back into exported Go functions with the void*. But the cgo rules disallow C storing a Go pointer longer than the function call. And I am failing to see how I could use an approach of defining C++ classes that could be allocated and used to operate with my Go library. 

Is it possible to wrap complex types for exposure to C/C++? 
Is there a pattern that would allow a C++ client to create a Go FrameSet? 

Edit

One idea I can think of would be to let C++ create objects in Go that get stored on the Go side in a static map[int]*FrameSet and then return the int id to C++. Then all the C++ operations make requests into Go with the id. Does that sound like a valid solution? 

Update

For now, I am proceeding with testing a solution that uses global maps and unique ids to store objects. C++ would request a new object to be created and only get back an opaque id. Then they can call all of the methods exported as functions, using that id, including requesting for it to be destroyed when done. 

If there is a better approach than this, I would love to see an answer. Once I get a fully working prototype, I will add my own answer.

Update #2

I've written a blog post about the final solution that I ended up using: http://justinfx.com/2016/05/14/cpp-bindings-for-go/
","['I', 'own', 'a', 'Go', 'library,', 'gofileseq,', 'for', 'which', 'I', 'would', 'like', 'to', 'try', 'and', 'made', 'a', 'C/C++', 'binding.', 'It', 'is', 'pretty', 'straightforward', 'to', 'be', 'able', 'to', 'export', 'functions', 'that', 'use', 'simple', 'types', '(ints,', 'strings,', '...).', 'It', 'is', 'even', 'easy', 'enough', 'to', 'export', 'data', 'from', 'custom', 'Go', 'types', 'to', 'C', 'by', 'defining', 'a', 'C', 'struct', 'and', 'translating', 'the', 'Go', 'type', 'to', 'it,', 'to', 'be', 'used', 'in', 'the', 'exported', 'functions,', 'since', 'you', 'are', 'allocating', 'C', 'memory', 'to', 'do', 'it.', 'But', 'with', 'the', 'go', '1.5', 'cgo', 'rules', 'I', 'am', 'finding', 'it', 'difficult', 'to', 'figure', 'out', 'how', 'to', 'export', 'functionality', 'from', 'a', 'more', 'complex', 'struct', 'that', 'stores', 'state.', 'Example', 'of', 'a', 'struct', 'from', 'gofileseq', 'that', 'I', 'would', 'like', 'to', 'export', 'somehow', 'to', 'a', 'C++', 'binding:', '//', 'package', 'fileseq', '//', 'type', 'FrameSet', 'struct', '{', 'frange', 'string', 'range', 'Ptr', '*', 'range', 's', '.', 'InclusiveRanges', '}', 'func', 'NewFrameSet', '(', 'frange', 'string', ')', '(*', 'FrameSet', ',', 'error', ')', '{', '//', 'bunch', 'of', 'processing', 'to', 'set', 'up', 'internal', 'state', '}', 'func', '(', 's', '*', 'FrameSet', ')', 'Len', '()', 'int', '{', 'return', 's', '.', 'range', 'Ptr.Len()', '}', '//', 'package', 'ranges', '//', 'type', 'InclusiveRanges', 'struct', '{', 'blocks', '[]*', 'InclusiveRange', '}', 'type', 'InclusiveRange', 'struct', '{', 'start', 'int', 'end', 'int', 'step', 'int', 'cachedEnd', 'int', 'isEndCached', 'bool', 'cachedLen', 'int', 'isLenCached', 'bool', '}', 'As', 'you', 'can', 'see,', 'the', 'FrameSet', 'type', 'that', 'I', 'want', 'to', 'expose', 'contains', 'a', 'slice', 'of', 'pointers', 'to', 'an', 'underlying', 'type,', 'each', 'of', 'which', 'stores', 'state.', 'Ideally,', 'I', 'would', 'love', 'to', 'be', 'able', 'to', 'store', 'a', 'void*', 'on', 'a', 'C++', 'class,', 'and', 'make', 'it', 'just', 'a', 'simple', 'proxy', 'for', 'calling', 'back', 'into', 'exported', 'Go', 'functions', 'with', 'the', 'void*.', 'But', 'the', 'cgo', 'rules', 'disallow', 'C', 'storing', 'a', 'Go', 'pointer', 'longer', 'than', 'the', 'function', 'call.', 'And', 'I', 'am', 'failing', 'to', 'see', 'how', 'I', 'could', 'use', 'an', 'approach', 'of', 'defining', 'C++', 'classes', 'that', 'could', 'be', 'allocated', 'and', 'used', 'to', 'operate', 'with', 'my', 'Go', 'library.', 'Is', 'it', 'possible', 'to', 'wrap', 'complex', 'types', 'for', 'exposure', 'to', 'C/C++?', 'Is', 'there', 'a', 'pattern', 'that', 'would', 'allow', 'a', 'C++', 'client', 'to', 'create', 'a', 'Go', 'FrameSet?', 'Edit', 'One', 'idea', 'I', 'can', 'think', 'of', 'would', 'be', 'to', 'let', 'C++', 'create', 'objects', 'in', 'Go', 'that', 'get', 'stored', 'on', 'the', 'Go', 'side', 'in', 'a', 'static', 'map[int]*FrameSet', 'and', 'then', 'return', 'the', 'int', 'id', 'to', 'C++.', 'Then', 'all', 'the', 'C++', 'operations', 'make', 'requests', 'into', 'Go', 'with', 'the', 'id.', 'Does', 'that', 'sound', 'like', 'a', 'valid', 'solution?', 'Update', 'For', 'now,', 'I', 'am', 'proceeding', 'with', 'testing', 'a', 'solution', 'that', 'uses', 'global', 'maps', 'and', 'unique', 'ids', 'to', 'store', 'objects.', 'C++', 'would', 'request', 'a', 'new', 'object', 'to', 'be', 'created', 'and', 'only', 'get', 'back', 'an', 'opaque', 'id.', 'Then', 'they', 'can', 'call', 'all', 'of', 'the', 'methods', 'exported', 'as', 'functions,', 'using', 'that', 'id,', 'including', 'requesting', 'for', 'it', 'to', 'be', 'destroyed', 'when', 'done.', 'If', 'there', 'is', 'a', 'better', 'approach', 'than', 'this,', 'I', 'would', 'love', 'to', 'see', 'an', 'answer.', 'Once', 'I', 'get', 'a', 'fully', 'working', 'prototype,', 'I', 'will', 'add', 'my', 'own', 'answer.', 'Update', '#2', ""I've"", 'written', 'a', 'blog', 'post', 'about', 'the', 'final', 'solution', 'that', 'I', 'ended', 'up', 'using:', 'http://justinfx.com/2016/05/14/cpp-bindings-for-go/']"
1556,36916504,"
","['I', 'am', 'pretty', 'new', 'to', 'GO', 'and', 'I', 'am', 'having', 'trouble', 'extracting', 'attribute', 'values', 'from', 'XML', 'documents.', 'The', 'code', 'below', 'produces', 'the', 'following', 'output:', 'application', 'ID::', '""""', 'application', 'name::', '""""', 'My', 'assumption', 'is', 'that', 'I', 'am', 'missing', 'something', 'when', 'it', 'comes', 'to', 'how', 'to', 'use', 'tagging', 'and', 'I', 'would', 'really', 'appreciate', 'it', 'if', 'someone', 'could', 'point', 'me', 'in', 'the', 'right', 'direction.', 'data', ':=', 'type', 'App', 'struct', '{', 'app_id', 'string', 'xml', ':', '""app_id,attr""', 'app_name', 'string', 'xml', ':', '""app_name""', '}', 'type', 'AppList', 'struct', '{', 'XMLName', 'xml', '.', 'Name', 'xml', ':', '""applist""', 'Apps', '[]', 'App', 'xml', ':', '""app""', '}', 'var', 'portfolio', 'AppList', 'err', ':=', 'xml.Unmarshal([]byte(data), &portfolio)', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""error: %v"", err)', 'return', '}', 'fmt.Printf(""application ID:: %q\\n"", portfolio.Apps[0].app_id)', 'fmt.Printf(""application name:: %q\\n"", portfolio.Apps[0].app_name)']"
1557,36931742,"

If text is outside attribute context, it is evaluated correctly, but when it is an src attribute it always become that error string. I tried also change value from string to template.HTMLAttr but nothing happen. Cid value is always evaluated to that error output #ZgotmplZ.
","['Trying', 'to', 'render', 'HTML', 'templates', 'for', 'sending', 'via', 'email', 'with', 'embedded', 'attachments', 'with', 'cid:.', 'Problem', 'is,', 'that', 'Go', 'does', 'escaping', 'and', 'I', 'cannot', 'do', 'anything.', 'tplVars', ':=', 'map', '[', 'string', ']', 'interface', '{}{', '""Dog""', ':', '""cid:dog.png""', ',', '""Cat""', ':', '""cid:cat.png""', ',', '}', 'My', 'testing', 'template', 'looks', 'more', 'less', 'like', 'this:', 'Dog:', 'Cat:', '{{.Cat}}', 'Output', 'is:', 'Dog', ':', 'Cat', ':', 'cid', ':', 'cat', '.', 'png', 'If', 'text', 'is', 'outside', 'attribute', 'context,', 'it', 'is', 'evaluated', 'correctly,', 'but', 'when', 'it', 'is', 'an', 'src', 'attribute', 'it', 'always', 'become', 'that', 'error', 'string.', 'I', 'tried', 'also', 'change', 'value', 'from', 'string', 'to', 'template.HTMLAttr', 'but', 'nothing', 'happen.', 'Cid', 'value', 'is', 'always', 'evaluated', 'to', 'that', 'error', 'output', '#ZgotmplZ.']"
1558,36935089,"

I just use the default configuration. The error happen after I did a lot of test request on my application. 

And the error is gone after I restart my application. So, I am thinking that the GORM connection is not released after done with the query. I don't check it very deep enough on GORM code, I just ask here maybe someone has already experience about it?
","['I', 'am', 'using', 'GORM', 'golang', 'on', 'my', 'project,', 'everything', 'is', 'good', 'until', 'I', 'got', 'error', 'that', 'said', ':', 'pq', ':', 'sorry', ',', 'too', 'many', 'clients', 'already', 'I', 'just', 'use', 'the', 'default', 'configuration.', 'The', 'error', 'happen', 'after', 'I', 'did', 'a', 'lot', 'of', 'test', 'request', 'on', 'my', 'application.', 'And', 'the', 'error', 'is', 'gone', 'after', 'I', 'restart', 'my', 'application.', 'So,', 'I', 'am', 'thinking', 'that', 'the', 'GORM', 'connection', 'is', 'not', 'released', 'after', 'done', 'with', 'the', 'query.', 'I', ""don't"", 'check', 'it', 'very', 'deep', 'enough', 'on', 'GORM', 'code,', 'I', 'just', 'ask', 'here', 'maybe', 'someone', 'has', 'already', 'experience', 'about', 'it?']"
1559,36972513,"

Also, how do I pass the db to this in my main so it can use the database connection?
","['I', 'want', 'to', 'create', 'a', 'class', 'that', 'takes', 'a', 'sql', 'connection,', 'and', 'then', 'I', 'can', 'write', 'methods', 'to', 'return', 'data', 'from', 'my', 'database.', 'func', 'main', '()', '{', 'db', ':=', 'dbConnect', '()', 'defer', 'db.Close()', '//', 'pass', 'the', 'db', 'to', 'my', 'dbservice.go', 'somehow?', '}', 'Then', 'in', 'my', 'handlers', '(for', 'a', 'web', 'app)', 'I', 'want', 'to', 'be', 'able', 'to', 'do:', 'var', 'userKey', ',', 'err', ':=', 'dbService.getUserKey(123)', 'Do', 'I', 'just', 'create', 'a', 'file', 'like', 'dbservice.go', 'and', 'then', 'create', 'structs', 'that', 'represent', 'my', 'return', 'values,', 'and', 'then', 'do:', 'func', '(', 'mystruct', '*', 'MyStruct', ')', 'GetUserKey', '(', 'id', 'int64', ')', '(', 'key', 'string', ',', 'err', 'error', ')', '{', '//', '}', 'Also,', 'how', 'do', 'I', 'pass', 'the', 'db', 'to', 'this', 'in', 'my', 'main', 'so', 'it', 'can', 'use', 'the', 'database', 'connection?']"
1560,37083167,"
","['I', 'have', 'set', 'following', 'path', 'on', 'my', '~/.bashrc', 'file', 'export', 'GOPATH', '=/', 'usr/lib/go', 'export', 'PATH', '=$', 'PATH', ':$', 'GOROOT/bin:$GOPATH/bin', 'But', 'when', 'i', 'installed', 'ATOM', 'IDE', 'and', 'i', 'tried', 'to', 'install', 'go-plus', 'package,', 'it', 'tired', 'to', 'download', 'something', 'at', 'the', 'end', 'and', 'i', 'got', 'the', 'error', 'that', 'package', 'github', '.', 'com/nsf/gocode:', 'cannot', 'download', ',', '$', 'GOPATH', 'not', 'set', '.', 'For', 'more', 'details', 'see', ':', 'go', 'help', 'go', 'path', 'What', 'I', 'am', 'doing', 'wrong', '?', 'Here', 'is', 'my', 'ubunt', 'information', 'as', 'well.', 'Distributor', 'ID', ':', 'Ubuntu', 'Description', ':', 'Ubuntu', '15', '.', '10', 'Release', ':', '15', '.', '10', 'Codename', ':', 'wily', 'P.S', 'I', 'have', 'already', 'tried', 'setting', 'my', 'export', 'GOPATH', '=/', 'home/<username/go', 'export', 'PATH', '=$', 'PATH', ':$', 'GOPATH/bin']"
1561,37096166,"

which means my browser is sending ""Cookie"", ""User-Agent"", ""Accept-Language"", ""Accept-Encoding"", ""Connection"", and ""Accept"" but there is no ""Host"" value.

How can I get my https://en.wikipedia.org/wiki/Virtual_hosting working without this value?

I'm using https://github.com/gin-gonic/gin
","[""I'm"", 'printing', 'out', 'all', 'the', 'headers', 'and', 'I', 'get:', 'map', '[', 'Cookie', ':[', '_ga', '=', 'GA1', '.', '2', '.', '843429125', '.', '1462575405', ']', 'User', '-', 'Agent', ':[', 'Mozilla/5.0', '(', 'Macintosh', ';', 'Intel', 'Mac', 'OS', 'X', '10', '_11_3', ')', 'AppleWebKit/601.4.4', '(', 'KHTML', ',', 'like', 'Gecko', ')', 'Version/9.0.3 Safari/601.4.4]', 'Accept', '-', 'Language', ':[', 'en', '-', 'us', ']', 'Accept', '-', 'Encoding', ':[', 'gzip', ',', 'deflate', ']', 'Connection', ':[', 'keep', '-', 'alive', ']', 'Accept', ':[', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]]', 'which', 'means', 'my', 'browser', 'is', 'sending', '""Cookie"",', '""User-Agent"",', '""Accept-Language"",', '""Accept-Encoding"",', '""Connection"",', 'and', '""Accept""', 'but', 'there', 'is', 'no', '""Host""', 'value.', 'How', 'can', 'I', 'get', 'my', 'https://en.wikipedia.org/wiki/Virtual_hosting', 'working', 'without', 'this', 'value?', ""I'm"", 'using', 'https://github.com/gin-gonic/gin']"
1562,37114313,"

program print the list of my items
","['I', 'have', 'an', 'object', 'parsed', 'from', 'some', 'XML', 'file.', 'It', 'has', 'struct', 'type', 'like', 'this', 'type', 'Report', 'struct', '{', 'Items', '[]', 'Item', 'xml', ':......', 'AnotherItems', '[]', 'AnotherItem', 'xml', ':......', '}', 'type', 'Item', 'struct', '{', 'Name', 'string', '}', 'type', 'AnotherItem', 'struct', '{', 'Name', 'string', '}', 'func', '(', 'Item', '*', 'Item', ')', 'Foo', '()', 'bool', '{', '//', 'some', 'code', 'here', '}', 'func', '(', 'AnotherItem', '*', 'AnotherItem', ')', 'Foo', '()', 'bool', '{', '//', 'another', 'code', 'here', '}', 'For', 'each', 'item', 'i', 'have', 'to', 'do', 'smth', 'like', 'this:', 'func', 'main', '(){', '//', 'some', 'funcs', 'called', 'to', 'get', 'the', 'report', 'object', 'doSmth', '(', 'report', '.', 'Items', ')', 'doSmth', '(', 'report', '.', 'AnotherItems', ')', '}', 'func', 'doSmth', '(', 'items', '){', 'for', '_', ',', 'item', ':', 'range', 'items', '{', 'item.Foo()', '}', '}', 'Since', 'i', 'have', 'different', 'items', 'with', 'same', 'function', 'i', 'want', 'to', 'have', 'only', 'one', 'doSmth', 'so', 'i', ""can't"", 'do', 'just', 'doSmth(items', '[]Item)', 'And', 'the', 'question', 'is', '-', 'what', 'should', 'i', 'write', 'instead', 'of', '""????""', 'to', 'get', 'this', 'working?', 'The', 'only', 'way', 'i', 'made', 'it', 'to', 'pass', 'report.Items', 'into', 'doSmth()', 'was', 'func', 'doSmth', '(', 'items', 'interface', '{})', 'But', 'it', 'throws', 'me', 'an', 'error', '""cannot', 'range', 'over', 'items', '(type', 'interface', '{})""', 'And', 'if', 'instead', 'of', 'iteration', 'i', 'just', 'put', 'smth', 'like', 'func', 'doSmth', '(', 'items', 'interface', '{}){', 'fmt.Println(items)', '}', 'program', 'print', 'the', 'list', 'of', 'my', 'items']"
1563,37135933,"I`m trying to create replication controllers, services etc from the golang client. (""github.com/kubernetes/kubernetes/pkg/client/unversioned"") However I cannot find any documentation on how to do so.

I found this: 

r, err := c.ReplicationControllers(api.NamespaceDefault).Create(rep)

But I don`t know where to put the yml data etc. Anyone who found documentation or has some sample code that I could get started with ?
","['I`m', 'trying', 'to', 'create', 'replication', 'controllers,', 'services', 'etc', 'from', 'the', 'golang', 'client.', '(""github.com/kubernetes/kubernetes/pkg/client/unversioned"")', 'However', 'I', 'cannot', 'find', 'any', 'documentation', 'on', 'how', 'to', 'do', 'so.', 'I', 'found', 'this:', 'r,', 'err', ':=', 'c.ReplicationControllers(api.NamespaceDefault).Create(rep)', 'But', 'I', 'don`t', 'know', 'where', 'to', 'put', 'the', 'yml', 'data', 'etc.', 'Anyone', 'who', 'found', 'documentation', 'or', 'has', 'some', 'sample', 'code', 'that', 'I', 'could', 'get', 'started', 'with', '?']"
1564,37210109,"
","['Here', 'is', 'my', 'program', 'which', 'is', 'producing', 'deadlock,', 'how', 'do', 'I', 'avoid', 'it', 'and', 'what', 'is', 'the', 'recommended', 'pattern', 'to', 'handle', 'this', 'kind', 'of', 'situation.', 'The', 'problem', 'is', 'after', 'timeout', 'how', 'do', 'I', 'detect', 'that', 'there', 'is', 'no', 'reader', 'on', 'my', 'channel', '?', 'var', 'wg', 'sync', '.', 'WaitGroup', 'func', 'main', '()', '{', 'wg.Add(1)', 'c', ':=', 'make', '(', 'chan', 'int', ')', 'go', 'readFromChannel', '(', 'c', ',', 'time.After(time.Duration(2)*time.Second))', 'time.Sleep(time.Duration(5) * time.Second)', 'c', '<-', '10', 'wg.Wait()', '}', 'func', 'readFromChannel', '(', 'c', 'chan', 'int', ',', 'ti', '<-', 'chan', 'time', '.', 'Time', ')', '{', 'select', '{', 'case', 'x', ':=', '<-', 'c', ':', 'fmt.Println(""Read"", x)', 'case', '<-', 'ti', ':', 'fmt.Println(""TIMED OUT"")', '}', 'wg.Done()', '}']"
1565,37253717,"

So, it understands that, in WrapperFunc body, I can only call fn with int, int and an RequestBody interface that implements the GetDescription, yet I still cannot pass it in the function phase. How can I accomplish this? I want to wrap functions that can have parameters that their type can change.
","['The', 'following', 'code', 'works', 'nicely:', 'package', 'main', 'import', '(', '""fmt""', ')', 'func', 'WrapperFunc', '(', 'fn', 'func', '(', 'int', ',', 'int', ')', 'int', ')', 'int', '{', 'return', 'fn', '(', '3', ',', '4', ')', '}', 'func', 'add', '(', 'a', ',', 'b', 'int', ')', 'int', '{', 'return', 'a', '+', 'b', '}', 'func', 'main', '(){', 'fmt.Println(WrapperFunc(add))', '}', 'I', 'want', 'to', 'pass', 'additional', 'parameters', 'that', 'implements', 'a', 'specific', 'interface.', 'For', 'instance,', 'I', 'modify', 'the', 'code', 'as', 'follows:', 'import', '(', '""fmt""', ')', 'type', 'RequestBody', 'interface', '{', 'GetDescription', '()', 'string', '}', 'type', 'LoginRequest', 'struct', '{', 'Username', 'string', 'Password', 'string', '}', 'func', '(', 'lr', 'LoginRequest', ')', 'GetDescription', '()', 'string', '{', 'return', '""cool function""', '}', 'func', 'WrapperFunc', '(', 'fn', 'func', '(', 'int', ',', 'int', ',', 'RequestBody', ')', 'int', ')', 'int', '{', 'lr', ':=', 'LoginRequest', '{}', 'return', 'fn', '(', '3', ',', '4', ',', 'lr', ')', '}', 'func', 'add', '(', 'a', ',', 'b', 'int', ',', 'lr', 'LoginRequest', ')', 'int', '{', 'fmt.Println(lr.GetDescription())', 'return', 'a', '+', 'b', '}', 'func', 'main', '()', '{', 'fmt.Println(WrapperFunc(add))', '}', 'It', 'fails', 'with', 'the', 'error', 'below:', 'cannot', 'use', 'add', '(type', 'func(int,', 'int,', 'LoginRequest)', 'int)', 'as', 'type', 'func(int,', 'int,', 'RequestBody)', 'int', 'in', 'argument', 'to', 'WrapperFunc', 'However,', 'when', 'I', 'do', 'not', 'implement', 'the', 'GetDescription', 'as', 'below:', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'RequestBody', 'interface', '{', 'GetDescription()', 'string', '}', 'type', 'LoginRequest', 'struct', '{', 'Username', 'string', 'Password', 'string', '}', 'func', 'WrapperFunc(fn', 'func(int,', 'int,', 'RequestBody)', 'int)', 'int', '{', 'lr', ':=', 'LoginRequest{}', 'return', 'fn(3,', '4,', 'lr)', '}', 'func', 'add(a,', 'b', 'int,', 'lr', 'LoginRequest)', 'int', '{', 'return', 'a', '+', 'b', '}', 'func', 'main()', '{', 'fmt.Println(WrapperFunc(add))', '}', 'It', 'fails', 'with', 'second', 'error,', 'as', 'interface', 'is', 'not', 'implemented', '(as', 'expected).', 'cannot', 'use', 'lr', '(type', 'LoginRequest)', 'as', 'type', 'RequestBody', 'in', 'argument', 'to', 'fn:', 'LoginRequest', 'does', 'not', 'implement', 'RequestBody', '(missing', 'GetDescription', 'method)', 'cannot', 'use', 'add', '(', 'type', 'func', '(', 'int', ',', 'int', ',', 'LoginRequest', ')', 'int', ')', 'as', 'type', 'func', '(', 'int', ',', 'int', ',', 'RequestBody', ')', 'int', 'in', 'argument', 'to', 'WrapperFunc', 'So,', 'it', 'understands', 'that,', 'in', 'WrapperFunc', 'body,', 'I', 'can', 'only', 'call', 'fn', 'with', 'int,', 'int', 'and', 'an', 'RequestBody', 'interface', 'that', 'implements', 'the', 'GetDescription,', 'yet', 'I', 'still', 'cannot', 'pass', 'it', 'in', 'the', 'function', 'phase.', 'How', 'can', 'I', 'accomplish', 'this?', 'I', 'want', 'to', 'wrap', 'functions', 'that', 'can', 'have', 'parameters', 'that', 'their', 'type', 'can', 'change.', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'RequestBody', 'interface', '{', 'GetDescription', '()', 'string', '}', 'type', 'LoginRequest', 'struct', '{', 'Username', 'string', 'Password', 'string', '}', 'func', 'WrapperFunc', '(', 'fn', 'func', '(', 'int', ',', 'int', ',', 'RequestBody', ')', 'int', ')', 'int', '{', 'lr', ':=', 'LoginRequest', '{}', 'return', 'fn', '(', '3', ',', '4', ',', 'lr', ')', '}', 'func', 'add', '(', 'a', ',', 'b', 'int', ',', 'lr', 'LoginRequest', ')', 'int', '{', 'return', 'a', '+', 'b', '}', 'func', 'main', '()', '{', 'fmt.Println(WrapperFunc(add))', '}', 'So,', 'it', 'understands', 'that,', 'in', 'WrapperFunc', 'body,', 'I', 'can', 'only', 'call', 'fn', 'with', 'int,', 'int', 'and', 'an', 'RequestBody', 'interface', 'that', 'implements', 'the', 'GetDescription,', 'yet', 'I', 'still', 'cannot', 'pass', 'it', 'in', 'the', 'function', 'phase.', 'How', 'can', 'I', 'accomplish', 'this?', 'I', 'want', 'to', 'wrap', 'functions', 'that', 'can', 'have', 'parameters', 'that', 'their', 'type', 'can', 'change.', 'cannot', 'use', 'lr', '(', 'type', 'LoginRequest', ')', 'as', 'type', 'RequestBody', 'in', 'argument', 'to', 'fn', ':', 'LoginRequest', 'does', 'not', 'implement', 'RequestBody', '(', 'missing', 'GetDescription', 'method', ')', 'cannot', 'use', 'add', '(', 'type', 'func', '(', 'int', ',', 'int', ',', 'LoginRequest', ')', 'int', ')', 'as', 'type', 'func', '(', 'int', ',', 'int', ',', 'RequestBody', ')', 'int', 'in', 'argument', 'to', 'WrapperFunc']"
1566,37268031,"

What will be the reason for this error? How to solve this? I am new to this GO framework.
","['In', 'my', 'GO', 'project', 'I', 'am', 'getting', 'an', 'error', 'in', 'transport.go', 'file', 'as,', 'mygo/testkit/pkg/http', 'mygo/testkit/pkg/http', 'pkg\\http\\transport.go:93:', 'unknown', 'http.Transport', 'field', ""'ExpectContinueTimeout'"", 'in', 'struct', 'literal', 'Here', 'is', 'my', 'newDefaultTransport', '()', 'function,', 'which', 'gives', 'the', 'error', 'in', 'transport.go.', 'func', 'newDefaultTransport', '()', '*', 'http', '.', 'Transport', '{', 'return', '&', 'http', '.', 'Transport', '{', 'DisableCompression', ':', 'disableCompression', ',', 'DisableKeepAlives', ':', 'default', 'DisableKeepAlives', ',', 'MaxIdleConnsPerHost', ':', 'default', 'MaxIdleConnsPerHost', ',', 'ResponseHeaderTimeout', ':', 'default', 'ResponseHeaderTimeout', ',', 'ExpectContinueTimeout', ':', 'default', 'ExpectContinueTimeout', ',', 'TLSHandshakeTimeout', ':', 'default', 'TLSHandshakeTimeout', ',', 'TLSClientConfig', ':', 'newTLSClientConfig', '(),', 'Proxy', ':', 'http', '.', 'ProxyFromEnvironment', ',', 'Dial', ':', 'func', '(', 'network', ',', 'addr', 'string', ')', '(', 'net', '.', 'Conn', ',', 'error', ')', '{', 'return', 'NewTimeoutConnDial', '(', 'network', ',', 'addr', ',', 'TCPDialTimeout', ',', 'TCPKeepAlive', ',', 'default', 'IdleTimeout', ')', '},', '}', '}', 'And', 'I', 'am', 'getting', 'the', 'error', 'at', 'this', 'line,', 'ExpectContinueTimeout', ':', 'default', 'ExpectContinueTimeout', ',', 'What', 'will', 'be', 'the', 'reason', 'for', 'this', 'error?', 'How', 'to', 'solve', 'this?', 'I', 'am', 'new', 'to', 'this', 'GO', 'framework.']"
1567,37280034,"

How can I achieve this using golang?  
","['I', 'have', 'two', 'tables', 'like', 'Retailers', 'and', 'products', 'in', 'database.', 'Retailer', 'has', 'many', 'Products.', 'They', 'following', 'are', 'the', 'structs', 'I', 'have', 'defined', 'in', 'golang.', 'type', 'Retailers', 'struct', '{', 'Id', 'int', 'Name', 'string', 'Products', '[]', 'Product', '}', 'type', 'Product', 'struct', '{', 'Id', 'int', 'Description', 'string', 'Url', 'string', '}', 'The', 'following', 'is', 'the', 'query', 'am', 'using', 'to', 'fetch', 'data', 'from', 'Database.', 'select', 'r', '.', 'id', ',', 'r', '.', 'name', ',', 'p', '.', 'id', ',', 'p', '.', 'description', ',', 'p', '.', 'url', 'from', 'retailers', 'r', 'JOIN', 'products', 'on', 'r', '.', 'id', '=', 'r', '.', 'retailer_id', 'Using', 'the', 'above', 'struct', 'and', 'query', 'I', 'wish', 'to', 'form', 'the', 'json', 'as', 'below', '{', '""id""', ':', '""DFT""', ',', '""name""', ':', '""Amazon""', ',', '""products""', ':[', '{', '""id""', ':', '""APP0001""', ',', '""description""', ':', '""Iphone5s""', ',', '""url""', ':', '""www.Iphone5s.com""', '},', '{', '""id""', ':', '""APP0002""', ',', '""description""', ':', '""Iphone6s""', ',', '""url""', ':', '""www.Iphone6s.com""', '}', ']', '}', 'How', 'can', 'I', 'achieve', 'this', 'using', 'golang?']"
1568,37368442,"

I think I have checked that all the values are correct on the layout.
","['I', 'currently', 'have', 'the', 'following', 'date', 'string', 'May', '21', '2016', ',', '21', ':', '47', ':', '0', '8', 'CEST', 'So', 'I', 'want', 'to', 'parse', 'it.', 'I', 'tried', 'the', 'following', 'time', ',', 'err', ':=', 'time.Parse(""Jan 2 2006, 15:04:05 MST"", date)', 'But', 'I', 'am', 'getting', 'the', 'following', 'error', 'parsing', 'time', '""May\xa021\xa02016,\xa021:47:08\xa0CEST""', 'as', '""Jan 2 2006, 15:04:05 CEST""', ':', 'cannot', 'parse', '""\xa021\xa02016,\xa021:47:08\xa0CEST""', 'as', '"" ""', 'I', 'think', 'I', 'have', 'checked', 'that', 'all', 'the', 'values', 'are', 'correct', 'on', 'the', 'layout.']"
1569,37404523,"

When using res.FirstName in place of res I just get a space in lieu of the {}.

I have been over the documentation in the following locations:

https://labix.org/mgo

https://godoc.org/gopkg.in/mgo.v2#Collection.Find

https://gist.github.com/border/3489566

I would be extemely grateful for any help that can be given. Thank You.
","['I', 'am', 'trying', 'to', 'parse', 'the', 'results', 'of', 'a', 'MongoDB', 'query', 'from', 'Go.', 'I', 'have', 'document(s)', 'that', 'output', 'from', 'my', 'Database', 'as', 'a', 'result', 'of:', ""db.getCollection('People').find({})"", '{', '""_id""', ':', 'ObjectId', '(', '""5730fd75113c8b08703b5974""', '),', '""firstName""', ':', '""George""', ',', '""lastName""', ':', '""FakeLastName""', '}', '{', '""_id""', ':', 'ObjectId', '(', '""5730fd75113c8b08703b5975""', '),', '""firstName""', ':', '""John""', ',', '""lastName""', ':', '""Doe""', '}', '{', '""_id""', ':', 'ObjectId', '(', '""5730fd75113c8b08703b5976""', '),', '""firstName""', ':', '""Jane""', ',', '""lastName""', ':', '""Doe""', '}', 'Here', 'is', 'the', 'Go', 'code', 'that', 'I', 'am', 'trying', 'to', 'use:', 'package', 'main', 'import', '(', '""fmt""', '""log""', '""gopkg.in/mgo.v2""', ')', 'type', 'Person', 'struct', '{', 'FirstName', 'string', 'bson', ':', '""firstName""', 'json', ':', '""firstName""', 'LastName', 'string', 'bson', ':', '""lastName json: ""', 'lastName', '}', 'func', 'main', '()', '{', 'session', ',', 'err', ':=', 'mgo.Dial(""10.0.0.89"")', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'defer', 'session.Close()', '//', 'Optional.', 'Switch', 'the', 'session', 'to', 'a', 'monotonic', 'behavior.', 'session.SetMode(mgo.Monotonic, true)', 'c', ':=', 'session.DB(""PeopleDatabase"").C(""People"")', 'var', 'people', '[]', 'Person', 'err', '=', 'c.Find(nil).All(&people)', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'for', '_', ',', 'res', ':=', 'range', 'people', '{', 'fmt.Printf(""Name: %v\\n"", res)', '}', '}', 'When', 'I', 'run', 'this', 'code', 'I', 'get', 'the', 'following', 'Output:', 'Name', ':', '{', '}', 'Name', ':', '{', '}', 'Name', ':', '{', '}', 'When', 'using', 'res.FirstName', 'in', 'place', 'of', 'res', 'I', 'just', 'get', 'a', 'space', 'in', 'lieu', 'of', 'the', '{}.', 'I', 'have', 'been', 'over', 'the', 'documentation', 'in', 'the', 'following', 'locations:', 'https://labix.org/mgo', 'https://godoc.org/gopkg.in/mgo.v2#Collection.Find', 'https://gist.github.com/border/3489566', 'I', 'would', 'be', 'extemely', 'grateful', 'for', 'any', 'help', 'that', 'can', 'be', 'given.', 'Thank', 'You.']"
1570,37406075,"
","['How', 'to', 'list', 'the', 'fields', 'and', 'methods', 'of', 'a', 'struct,', 'in', 'GoLang', 'dynamically?', 'For', 'eg,', 'I', 'want', 'to', 'get', 'the', 'output', 'as', 'id,', 'name,', 'age,', 'and', 'all', 'the', 'method', 'names.', 'type', 'Student', 'struct', '{', 'id', 'int', 'name', 'string', 'age', 'int', '}', 'func', '(', 's', '*', 'Student', ')', 'setId', '(', 'i', 'int', ')', '{', 's', '.', 'id', '=', 'i', '}', 'func', '(', 's', '*', 'Student', ')', 'getId', '()', 'int', '{', 'return', 's', '.', 'id', '}', 'func', '(', 's', '*', 'Student', ')', 'setName', '(', 'n', 'string', ')', '{', 's', '.', 'name', '=', 'n', '}', 'func', '(', 's', '*', 'Student', ')', 'getName', '()', 'string', '{', 'return', 's', '.', 'name', '}', 'func', '(', 's', '*', 'Student', ')', 'setAge', '(', 'a', 'int', ')', '{', 's', '.', 'age', '=', 'a', '}', 'func', '(', 's', '*', 'Student', ')', 'getAge', '()', 'int', '{', 'return', 's', '.', 'age', '}', 'func', 'main', '()', '{', 'st', ':=', 'Student', '{', '1', ',', '""Jack""', ',', '22', '}', 'fmt.Println(st.getId(),"" "",st.getName(),"" "",st.getAge())', '}']"
1571,37458556,"

I need to handle messages which comes up like it, but I don't know if it's possible? does it possible?

Thank for help !
","[""I'm"", 'working', 'with', 'json', 'and', 'golang.', ""I've"", 'made', 'a', 'TCP', 'server', 'and,', 'I', 'need', 'to', 'Unmarshal', 'the', 'message', 'to', 'know', 'which', 'type', 'of', 'service', 'is', 'asked,', 'before', 'Unmarshal', 'the', 'contained', 'data.', ""It's"", 'a', 'bit', 'hard', 'to', 'explain', 'so', 'this', 'is', 'my', 'code:', 'package', 'main', 'import', '(', '""fmt""', '""encoding/json""', ')', 'type', 'Container', 'struct', '{', 'Type', 'string', 'Object', 'interface', '{}', '}', 'type', 'Selling', 'struct', '{', 'Surname', 'string', 'Firstname', 'string', '//', '......', 'Price', 'int', '}', 'type', 'Buying', 'struct', '{', 'ID', 'int', 'Surname', 'string', 'Firstname', 'string', '//', '..........', '}', '/*', 'type', 'Editing', 'struct', '{', 'ID', 'int', '...............', '}', 'Informations', ',', 'etc', 'etc', '*/', 'func', 'main', '()', '{', 'tmp_message_json1', ':=', 'Selling', '{', 'Surname', ':', '""X""', ',', 'Firstname', ':', '""Mister""', ',', 'Price', ':', '10', '}', '//', 'tmp_message_json1', ':=', 'Buying{ID:', '1,', 'Surname:', '""X"",', 'Firstname:', '""Mister""}', 'tmp_container_json1', ':=', 'Container', '{', 'Type', ':', '""Selling""', ',', 'Object', ':', 'tmp_message_json1', '}', 'json_tmp', ',', '_', ':=', 'json.Marshal(tmp_container_json1)', '/*...........', 'We', 'init', 'tcp', 'etc', 'etc', 'and', 'then', 'a', 'message', 'comes', 'up', '!', '...........*/', 'c', ':=', 'Container', '{}', 'json.Unmarshal(json_tmp, &c)', '//', 'I', 'unmarshal', 'a', 'first', 'time', 'to', 'know', 'the', 'type', 'of', 'service', 'asked', '//', 'first', 'question:', 'Does', 'Unmarshal', 'need', 'to', 'be', 'used', 'only', 'one', 'time?', '//', 'does', 'I', 'need', 'to', 'pass', 'c.Object', 'as', 'a', 'string', 'to', 'unmarshal', 'it', 'in', 'the', 'called', 'functions?', 'if', 'c', '.', 'Type', '==', '""Buying""', '{', 'takeInterfaceBuying', '(', 'c', '.', 'Object', ')', '}', 'else', 'if', 'c', '.', 'Type', '==', '""client""', '{', 'takeInterfaceSelling', '(', 'c', '.', 'Object', ')', '}', 'else', '{', 'fmt.Println(""bad entry"")', '}', '}', 'func', 'takeInterfaceBuying', '(', 'Object', 'interface', '{})', '{', 'bu', ':=', 'Object', 'fmt.Println(bu.Firstname, bu.Surname, ""wants to buy the following product:"", bu.ID)', '}', 'func', 'takeInterfaceSelling', '(', 'Object', 'interface', '{})', '{', 'se', ':=', 'Object', 'fmt.Println(se.Firstname, se.Surname, ""wants to sell something for:"", se.Price)', '}', 'I', 'need', 'to', 'handle', 'messages', 'which', 'comes', 'up', 'like', 'it,', 'but', 'I', ""don't"", 'know', 'if', ""it's"", 'possible?', 'does', 'it', 'possible?', 'Thank', 'for', 'help', '!']"
1572,37478857,"

and all I get is this


  error creating xmpp client>error connecting client>auth failure: not-authorized


I'm using the same library Google's using in it's examples. Is the library maybe not working with FCM yet or am I doing something wrong?

If it's the library, how would I implement this without it?
","[""I'm"", 'currently', 'trying', 'to', 'implement', 'a', 'server', 'in', 'Go', 'working', 'with', 'Firebase', 'Cloud', 'Messaging.', 'I', 'inserted', 'my', 'API', 'key', 'and', 'sender', 'ID', '(which', 'I', 'both', 'got', 'from', 'the', 'Firebase', 'console', 'at', 'Project', 'Settings', '->', 'Cloud', 'Messaging)', 'and', 'did', 'this:', 'err', ':=', 'gcm.Listen(senderID, apiKey, onMessageReceived, nil)', 'and', 'all', 'I', 'get', 'is', 'this', 'error', 'creating', 'xmpp', 'client>error', 'connecting', 'client>auth', 'failure:', 'not-authorized', ""I'm"", 'using', 'the', 'same', 'library', ""Google's"", 'using', 'in', ""it's"", 'examples.', 'Is', 'the', 'library', 'maybe', 'not', 'working', 'with', 'FCM', 'yet', 'or', 'am', 'I', 'doing', 'something', 'wrong?', 'If', ""it's"", 'the', 'library,', 'how', 'would', 'I', 'implement', 'this', 'without', 'it?']"
1573,37484049,"
","['I', 'saw', 'this', 'question', 'that', 'for', 'correct', 'answer', 'had', ""'for"", 'and', ""range'."", 'But', 'the', 'for', 'statement', 'is', 'the', 'only', 'available', 'looping', 'statement', 'in', 'Go,and', 'the', 'range', 'keyword', 'allows', 'you', 'to', 'iterate', 'over', 'items', 'of', 'a', 'list', 'like', 'an', 'array', 'or', 'a', 'map.', 'For', 'understanding', 'it,', 'you', 'could', 'translate', 'the', 'range', 'keyword', 'to', 'for', 'each', 'index', 'of.', '//', 'for', 'loop', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '5', ';', 'i', '++', '{', 'fmt.Println(""Value of i is now:"", i)', '}', '}', '//', 'range', 'is', 'used', 'inside', 'a', 'for', 'loop', 'a', ':=', '[...]', 'string', '{', '""a""', ',', '""b""', ',', '""c""', ',', '""d""', '}', 'for', 'i', ':=', 'range', 'a', '{', 'fmt.Println(""Array item"", i, ""is"", a[i])', '}', 'capitals', ':=', 'map', '[', 'string', ']', 'string', '{', '""France""', ':', '""Paris""', ',', '""Italy""', ':', '""Rome""', ',', '""Japan""', ':', '""Tokyo""', '}', 'for', 'key', ':=', 'range', 'capitals', '{', 'fmt.Println(""Map item: Capital of"", key, ""is"", capitals[key])', '}', '//', 'range', 'can', 'also', 'return', 'two', 'items,', 'the', 'index/key', 'and', 'the', 'corresponding', 'value', 'for', 'key2', ',', 'val', ':=', 'range', 'capitals', '{', 'fmt.Println(""Map item: Capital of"", key2, ""is"", val)', '}']"
1574,37557763,"

What I am attempting to do is access DialTLS in the Transport instance.
","['Create', 'a', 'struct', 'that', 'implements', 'an', 'interface.', 'Encapsulate', 'it', 'into', 'another', 'struct.', 'Fetch', 'the', 'struct', '/', 'dereference', 'it.', 'Fetching', 'gets', 'pointer', 'to', 'the', 'implementation', 'of', 'the', 'interface.', 'Dereferencing', 'the', 'pointer', 'results', 'in', 'another', 'point', 'to', 'the', 'interface.', 'Why', ""wouldn't"", 'dereferencing', 'the', 'pointer', 'to', 'the', 'implementation', 'gives', 'the', 'implementation', 'instance?', 'package', 'main', 'import', '(', '""fmt""', '""net/http""', '""golang.org/x/net/http2""', ')', 'func', 'main', '()', '{', 'transport', ':=', '&', 'http2', '.', 'Transport', '{}', 'client', ':=', '&', 'http', '.', 'Client', '{', 'Transport', ':', 'transport', '}', 'tmp1', ':=', 'client', '.', 'Transport', 'tmp2', ':=', '&', 'client', '.', 'Transport', 'tmp3', ':=', '&', 'tmp1', 'fmt.Printf(""%T\\n%T\\n%T\\n"", tmp1, tmp2, tmp3)', '//', 'dialTLS', ':=', 'tmp1.DialTLS', '}', 'This', 'code', 'outputs...', '*http2.Transport', '*http.RoundTripper', '*http.RoundTripper', 'As', 'well,', 'trying', 'to', 'access', 'a', 'property', 'of', 'the', 'tmp1', '(uncommenting', 'dialTLS', ':=', 'tmp1', '.', 'DialTLS', ')', 'results', 'in', 'compile', 'error...', 'tmp1.DialTLS', 'undefined', '(type', 'http.RoundTripper', 'has', 'no', 'field', 'or', 'method', 'DialTLS)', '...even', 'though', 'fmt.Printf(""%+v"",', 'tmp1)', 'outputs...', '&{DialTLS:', 'TLSClientConfig:0xc8203ec8c0', 'ConnPool:', 'DisableCompression:false', 'MaxHeaderListSize:0', 't1:', 'connPoolOnce:{m:{state:0', 'sema:0}', 'done:0}', 'connPoolOrDef:}', 'What', 'I', 'am', 'attempting', 'to', 'do', 'is', 'access', 'DialTLS', 'in', 'the', 'Transport', 'instance.', '*', 'http2', '.', 'Transport', '*', 'http', '.', 'RoundTripper', '*', 'http', '.', 'RoundTripper', ')', 'results', 'in', 'compile', 'error...', 'tmp1', '.', 'DialTLS', 'undefined', '(', 'type', 'http', '.', 'RoundTripper', 'has', 'no', 'field', 'or', 'method', 'DialTLS', ')', '...even', 'though', 'fmt.Printf(""%+v"", tmp1)', 'outputs...', '&{', 'DialTLS', ':', 'TLSClientConfig', ':', '0xc82', '03', 'ec8c0', 'ConnPool', ':', 'DisableCompression', ':', 'false', 'MaxHeaderListSize', ':', '0', 't1', ':', 'connPoolOnce', ':{', 'm', ':{', 'state', ':', '0', 'sema', ':', '0', '}', 'done', ':', '0', '}', 'connPoolOrDef', ':}', 'What', 'I', 'am', 'attempting', 'to', 'do', 'is', 'access', 'DialTLS', 'in', 'the', 'Transport', 'instance.']"
1575,37595002,"

EDIT: Alright, I just changed the file to having only one duration because apparently it's pretty complicated to have multiple duration(according to my project advisor). Thanks for the help!
","[""I'm"", 'new', 'to', 'Go', 'and', 'trying', 'to', 'generate', 'multiple', 'requests', 'to', 'several', 'http/', 'https', 'servers', 'to', 'check', 'the', 'response', 'time', 'and', 'the', 'status', 'of', 'each', 'web', 'server.', 'I', 'stored', 'the', 'URLs', 'in', 'a', 'text', 'file,', 'afterwards', 'I', 'decided', 'to', 'add', 'a', 'ticker', 'to', 'my', 'code', 'which', 'will', 'keep', 'generating', 'these', 'requests', 'on', 'each', 'URL', 'after', 'a', 'certain', 'amount', 'of', 'time', '(the', 'amount', 'of', 'time', 'is', 'in', 'seconds', 'typed', 'next', 'to', 'each', 'URL', 'and', 'spaced', 'with', 'a', 'tab).', 'When', 'I', 'started', 'scanning', 'the', 'time', 'from', 'the', 'file', 'everything', 'got', 'complicated', 'and', 'I', ""can't"", 'manage', 'to', 'find', 'my', 'mistake.', 'Here', 'is', 'my', 'Go', 'code:', 'package', 'main', 'import', '(', '""fmt""', '""io/ioutil""', '""log""', '""net/http""', '""strconv""', '""strings""', '""sync""', '""time""', ')', 'func', 'get_resp_time', '(', 'url', 'string', ')', '{', '//Get time for each URL', 'time_start', ':=', 'time.Now()', 'fmt.Println(""Start time"", time_start, "" URL "", url)', 'resp', ',', 'err', ':=', 'http.Get(url)', '//', 'fmt.Printf(""resp', ':', '%#v', '\\n"",', 'resp)', 'if', 'err', '!=', 'nil', '{', 'log.Printf(""Error fetching: %v"", err)', '}', 'defer', 'resp', '.', 'Body.Close()', 'fmt.Println(time.Since(time_start), url, "" Status: "", resp.Status)', '}', 'func', 'main', '()', '{', 'content', ',', '_', ':=', 'ioutil.ReadFile(""url_list.txt"")', 'lines', ':=', 'strings.Split(string(content), ""\\t"")', '//', 'fields', ':=', 'strings.Split(string(content),', '""\\t"")', '//', 'fmt.Println(lines[1])', '//', 'fmt.Println(strconv.Atoi(lines[0]))', 'const', 'workers', '=', '25', 'var', 'nb', 'int', 'wg', ':=', 'new', '(', 'sync', '.', 'WaitGroup', ')', 'in', ':=', 'make', '(', 'chan', 'string', ',', '2', '*', 'workers', ')', 'if', '_', ',', 'err', ':=', 'strconv.Atoi(lines[1])', ';', 'err', '==', 'nil', '{', 'nb', ',', 'err', '=', 'strconv.Atoi(lines[1])', '}', 'ticker', ':=', 'time.NewTicker(time.Second * time.Duration(nb))', 'for', 't', ':=', 'range', 'ticker', '.', 'C', '{', 'fmt.Println(""Time of origin: "", time.Now())', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'lines', ')-', '1', ';', 'i', '++', '{', 'wg.Add(1)', 'go', 'func', '()', '{', 'defer', 'wg.Done()', '//', 'for', 'j', ':=', '0;', 'j', '<', 'len(in);', 'j++', '{', 'if', '_', ',', 'err', ':=', 'strconv.Atoi(lines[i])', ';', 'err', '==', 'nil', '{', 'nb', ',', 'err', '=', 'strconv.Atoi(lines[i])', '//', 'get_resp_time(url)', '}', 'else', '{', 'get_resp_time', '(', 'lines', '[', 'i', '])', '}', '//', '}', '}()', '}', 'for', '_', ',', 'url', ':=', 'range', 'lines', '{', 'if', 'url', '!=', '""""', '{', 'in', '<-', 'url', '}', '}', 'fmt.Println(""Tick at "", t)', '}', 'close', '(', 'in', ')', 'wg.Wait()', '}', 'And', 'the', 'text', 'file:', 'http', '://', 'go', 'ogle', '.', 'com', '5', 'http', '://', 'nike', '.', 'com', '10', 'This', 'is', 'the', 'error', 'I', 'got:', 'panic', ':', 'runtime', 'error', ':', 'invalid', 'memory', 'address', 'or', 'nil', 'pointer', 'dereference', '[', 'signal', '0xb', 'code', '=', '0x1', 'addr', '=', '0', 'x0', 'pc', '=', '0x2752', ']', 'go', 'routine', '9', '[', 'running', ']:', 'panic', '(', '0x31318', '0', ',', '0xc82', '0', '0', '0', 'a0d0', ')', '/usr/local/go/src/runtime/panic.go:464', '+', '0x3e6', 'main.get_resp_time(0xc82006e195, 0x14)', '/Users/Elliott/Desktop/GoTutorial/url-time-response.go:26', '+', '0x712', 'main', '.', 'main.func1(0xc820070dc0, 0xc82006e1e0, 0xc8200a0090, 0x9, 0x9, 0xc820070da8)', '/Users/Elliott/Desktop/GoTutorial/url-time-response.go:61', '+', '0x13f', 'created', 'by', 'main', '.', 'main', '/Users/Elliott/Desktop/GoTutorial/url-time-response.go:65', '+', '0x4a6', 'exit', 'status', '2', 'EDIT:', 'Alright,', 'I', 'just', 'changed', 'the', 'file', 'to', 'having', 'only', 'one', 'duration', 'because', 'apparently', ""it's"", 'pretty', 'complicated', 'to', 'have', 'multiple', 'duration(according', 'to', 'my', 'project', 'advisor).', 'Thanks', 'for', 'the', 'help!']"
1576,37613823,"

And it redirects to index.php page. Why people are using this approach to redirect user to index page. Any security vulnerability with this approach? And also, how can i handle this situation in crawler?
","['I', 'am', 'developing', 'a', 'website', 'crawler', 'using', 'golang.', 'When', 'i', 'tried', 'to', 'crawl', 'some', 'websites,', 'I', 'am', 'getting', 'weird', 'results.', 'Root', 'Url', 'of', 'some', 'website', 'returns', 'script', 'tag', 'as', 'shown', 'below.', 'window', '.', 'location', '=', '""index.php""', ';', 'And', 'it', 'redirects', 'to', 'index.php', 'page.', 'Why', 'people', 'are', 'using', 'this', 'approach', 'to', 'redirect', 'user', 'to', 'index', 'page.', 'Any', 'security', 'vulnerability', 'with', 'this', 'approach?', 'And', 'also,', 'how', 'can', 'i', 'handle', 'this', 'situation', 'in', 'crawler?']"
1577,37658719,"

This code run will result in un-readable array of bytes, apparently without the ability to just build a string from the raw message.
","[""I'm"", 'doing', 'some', 'work', 'with', 'Elasticsearch', 'and', 'the', 'query', 'return', 'a', 'Source', 'object', 'which', ""it's"", 'type', 'is', '*json.RawMessage.', 'I', 'only', 'want', 'to', 'print', 'it', 'to', 'screen', 'without', 'creating', 'struct', 'model', 'for', 'it', 'and', 'doing', 'the', 'obvious', 'json.Marshal.', 'Is', 'there', 'a', 'print', 'function', 'that', 'will', 'consume', '*json.RawMessage', 'type', 'and', 'print', 'it', 'to', 'screen?', 'Code', 'sample:', 'for', '_', ',', 'hit', ':=', 'range', 'serachResult', '.', 'Hits', '.', 'Hits', '{', 'fmt.Println(hit.Source, ""\\n"")', '}', 'This', 'code', 'run', 'will', 'result', 'in', 'un-readable', 'array', 'of', 'bytes,', 'apparently', 'without', 'the', 'ability', 'to', 'just', 'build', 'a', 'string', 'from', 'the', 'raw', 'message.']"
1578,37734556,"I have the following hex data: 0xB01B; its 45083 as uint16; how do I convert this to uint16 in go?
","['This', 'code', 'run', 'will', 'result', 'in', 'un-readable', 'array', 'of', 'bytes,', 'apparently', 'without', 'the', 'ability', 'to', 'just', 'build', 'a', 'string', 'from', 'the', 'raw', 'message.']"
1579,37739896,"

but is there any way to do this in-place, or is there any preferred way to do this?
","['I', 'have', 'the', 'following', 'code:', 'func', 'return', 'TheMap', '()', 'map', '[', 'string', '][]', 'string', '{', 'myThing', ':=', 'getSomeValue', '()', '}', 'getSomeValue()', 'returns', 'something', 'of', 'type', 'map', '[', 'string', ']', 'interface', '{}', 'but', 'it', 'is', 'always', 'internally', 'a', 'map[string][]string.', 'What', 'is', 'the', 'best', 'way', 'to', 'set', 'myThing', 'equal', 'to', 'the', 'same', 'thing', 'as', 'getSomeValue(),', 'but', 'of', 'type', 'map[string][]string?', 'I', 'can', 'make', 'a', 'new', 'object', 'like', 'so:', 'newMap', ':=', 'make', '(', 'map', '[', 'string', '][]', 'string', ')', '//', 'cardTypeList', 'is', 'of', 'type', 'map[string]interface', '{},', 'must', 'convert', 'to', 'map[string][]string', 'for', 'k', ',', 'v', ':=', 'range', 'myThing', '{', 'newMap', '[', 'k', ']', '=', 'v', '.([]', 'string', ')', '}', 'but', 'is', 'there', 'any', 'way', 'to', 'do', 'this', 'in-place,', 'or', 'is', 'there', 'any', 'preferred', 'way', 'to', 'do', 'this?']"
1580,37759462,"How do I serve up a directory that is created server side to a user for them to download it? The directory doesn't just contain files, but sub directories as well. 
","['How', 'do', 'I', 'serve', 'up', 'a', 'directory', 'that', 'is', 'created', 'server', 'side', 'to', 'a', 'user', 'for', 'them', 'to', 'download', 'it?', 'The', 'directory', ""doesn't"", 'just', 'contain', 'files,', 'but', 'sub', 'directories', 'as', 'well.']"
1581,37759697,"
","['I', 'have', 'a', 'handler', 'that', 'makes', 'a', 'request', 'to', 'elasticsearch.', 'I', 'cat', 'get', 'the', 'json', 'response', 'from', 'that', 'request:', 'resp', ',', 'err', ':=', 'http.Get(getUrl)', 'defer', 'resp', '.', 'Body.Close()', 'bodyString', ':=', '""""', 'if', 'resp', '.', 'StatusCode', '==', '200', '{', 'bodyBytes', ',', 'err', ':=', 'ioutil.ReadAll(resp.Body)', 'checkForError', '(', 'err', ')', 'bodyString', '=', 'string', '(', 'bodyBytes', ')', 'fmt.Fprintf(w, bodyString)', '}', 'How', 'do', 'I', 'turn', 'that', 'bodyString', 'into', 'something', 'I', 'can', 'pass', 'to', 'an', 'http.Post', 'of', 'this', 'sort:', 'http.Post(""https://httpbin.org/post"", ""application/json; charset=utf-8"", jsonData)']"
1582,37831477,"After discussion with college, I wonder if it would be possible (even if completely does not make any sense) to deallocate memory manually in go (ie. by using unsafe package). Is it?
","['After', 'discussion', 'with', 'college,', 'I', 'wonder', 'if', 'it', 'would', 'be', 'possible', '(even', 'if', 'completely', 'does', 'not', 'make', 'any', 'sense)', 'to', 'deallocate', 'memory', 'manually', 'in', 'go', '(ie.', 'by', 'using', 'unsafe', 'package).', 'Is', 'it?']"
1583,37885698,"

I appreciate any advice I get on this.

Thanks!
","['I', 'am', 'writing', 'a', 'registration', 'form', 'using', 'GoLang', '1.5.', 'I', 'have', 'it', 'all', 'working,', 'but', ""I've"", 'noticed', 'if', 'I', 'attempt', 'to', 'sign', 'up', 'using', 'an', 'e-mail', 'with', 'a', 'plus', 'sign', 'in', 'it', '(someemail+theirlabel@theirdomain.com)', 'I', 'receive', 'the', 'following', 'error:', 'Transaction', 'failed:', 'Illegal', 'semicolon,', 'not', 'in', 'group', 'Googling', 'for', 'this', ""hasn't"", 'yielded', 'much', 'results,', 'and', 'it', 'seems', 'like', 'Go', 'should', 'handle', 'the', 'plus', 'sign', 'just', 'fine.', 'import', '(', '""net/smtp""', '""net/mail""', ')', 'func', 'sendEmail', '(', 't', '*', 'Email', ')', 'bool', '{', 'to', ':=', '[]', 'string', '{', '""johndoe+test@gmail.com""', '}', 'err', '=', 'smtp.SendMail(smtp_url, auth, from_email, to, buff.Bytes())', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '//', 'outputs:', 'Transaction', 'failed:', 'Illegal', 'semicolon,', 'not', 'in', 'group', '}', '}', 'I', 'appreciate', 'any', 'advice', 'I', 'get', 'on', 'this.', 'Thanks!']"
1584,37899240,"

But since I am handling error here, it is returning an error which says EOF. 

The http endpoint to where I am sending the request is running an apache server, mentioning it here since I am not sure if it matters.

If I am not handling the error, I get the complete json body, which is there in the remote server, and the program continues to work as expected. 

What is the best way to handle this? Is the Read method that I use, is bad for this situation? Please advise.

Thank you.
","['I', 'am', 'using', 'an', 'http', 'client', 'to', 'get', 'a', 'json', 'body,', 'and', 'read', 'it', 'to', 'a', 'byte', 'array', 'like', 'client', ':=', 'new', '(', 'http', '.', 'Client', ')', 'client', '.', 'Timeout', '=', 'time', '.', 'Second', '*', '10', 'GetJobJson', ',', 'err', ':=', 'client.Get(joblocation.String())', '//where joblocation is of type *url.Url', 'if', 'err', '!=', 'nil', '{', 'errorlog', '.', 'Err.Println(""Error getting job from"", joblocation.String(), err)', 'return', 'false', ',', 'http', '.', 'StatusBadRequest', ',', 'nil', '}', 'buff', ':=', 'make', '([]', 'byte', ',', 'GetJobJson', '.', 'ContentLength', ')', 'length', ',', 'err', ':=', 'GetJobJson', '.', 'Body.Read(buff)', '//This returns an EOF error', 'if', 'err', '!=', 'nil', '{', 'errorlog', '.', 'Err.Println(""Error reading request body of length"", length, ""vs contentlength"", GetJobJson.ContentLength, err)', 'return', 'false', ',', 'http', '.', 'StatusBadRequest', ',', 'nil', '}', 'In', 'the', 'above', 'code,', 'GetJobJson.Body', 'is', 'of', 'type', 'io.ReadCloser,', 'which', 'implements', 'Reader,', 'having', 'Read', 'method,', 'which', 'I', 'am', 'using', 'here', 'as', 'length', ',', 'err', ':=', 'GetJobJson', '.', 'Body.Read(buff)', 'But', 'since', 'I', 'am', 'handling', 'error', 'here,', 'it', 'is', 'returning', 'an', 'error', 'which', 'says', 'EOF.', 'The', 'http', 'endpoint', 'to', 'where', 'I', 'am', 'sending', 'the', 'request', 'is', 'running', 'an', 'apache', 'server,', 'mentioning', 'it', 'here', 'since', 'I', 'am', 'not', 'sure', 'if', 'it', 'matters.', 'If', 'I', 'am', 'not', 'handling', 'the', 'error,', 'I', 'get', 'the', 'complete', 'json', 'body,', 'which', 'is', 'there', 'in', 'the', 'remote', 'server,', 'and', 'the', 'program', 'continues', 'to', 'work', 'as', 'expected.', 'What', 'is', 'the', 'best', 'way', 'to', 'handle', 'this?', 'Is', 'the', 'Read', 'method', 'that', 'I', 'use,', 'is', 'bad', 'for', 'this', 'situation?', 'Please', 'advise.', 'Thank', 'you.']"
1585,37922775,"

The program will run 100000 goroutines at same time, and all goroutines will send message to the same connection。
I am doubt that server will receive error message like ""hellohelloworldworld"", but there is no problem when the program run in my Ubuntu 14.04LTS.

So, Do multiple goroutine will invoke a method on a Conn simultaneously?

=========================================================================

How can I keep the Write method atomic?
","['My', 'program', 'like', 'this:', 'func', 'handle', '(', 'conn', 'net', '.', 'Conn', ')', '{', 'msg', ':=', '""hello, world!""', 'for', 'i', ':=', '0', ';', 'i', '<', '100000', ';', 'i', '++', '{', 'go', 'func', '()', '{', 'err', ':=', 'write', '(', 'conn', ',', 'msg', ')', '}', '}', '}', 'func', 'write', '(', 'conn', 'net', '.', 'Conn', ',', 'msg', 'string', ')', 'error', '{', 'mlen', ':=', 'fmt.Sprintf(""%04d"", len(msg))', '_', ',', 'err', ':=', 'conn.Write([]byte(mlen + msg))', 'return', 'err', '}', 'The', 'program', 'will', 'run', '100000', 'goroutines', 'at', 'same', 'time,', 'and', 'all', 'goroutines', 'will', 'send', 'message', 'to', 'the', 'same', 'connection。', 'I', 'am', 'doubt', 'that', 'server', 'will', 'receive', 'error', 'message', 'like', '""hellohelloworldworld"",', 'but', 'there', 'is', 'no', 'problem', 'when', 'the', 'program', 'run', 'in', 'my', 'Ubuntu', '14.04LTS.', 'So,', 'Do', 'multiple', 'goroutine', 'will', 'invoke', 'a', 'method', 'on', 'a', 'Conn', 'simultaneously?', '=========================================================================', 'How', 'can', 'I', 'keep', 'the', 'Write', 'method', 'atomic?']"
1586,38000646,"
","['I', 'have', 'a', 'scenario', 'where', 'I', 'need', 'to', 'range', 'over', '(as', 'many', 'as', 'possible)', 'map', 'entries', 'and', 'send', 'them', 'into', 'a', 'channel.', 'The', 'operation', 'at', 'the', 'other', 'end', 'of', 'the', 'channel', 'can', 'take', 'a', 'long', 'amount', 'of', 'time', 'and', 'the', 'map', 'is', 'accessed', 'concurrently', '(and', 'protected', 'by', 'an', 'RWMutex).', 'The', 'map', 'is', 'also', 'rather', 'big', 'and', 'I', 'want', 'to', 'avoid', 'creating', 'a', 'temporary', 'copy', 'of', 'it.', 'Assume', 'I', 'have', 'a', 'struct', 'like', 'this:', 'type', 'Example', 'struct', '{', 'sync', '.', 'RWMutex', 'm', 'map', '[', 'string', ']', 'struct', '{}', '}', 'Now', 'I', 'came', 'up', 'with', 'something', 'like', 'this:', 'func', '(', 'e', '*', 'Example', ')', 'StreamAll', '()', '<-', 'chan', 'string', '{', 'toReturn', ':=', 'make', '(', 'chan', 'string', ')', 'go', 'func', '()', '{', 'e.RLock()', 'defer', 'e.RUnlock()', 'for', 'k', ':=', 'range', 'e', '.', 'm', '{', 'e.RUnlock()', 'toReturn', '<-', 'k', 'e.RLock()', '}', 'close', '(', 'toReturn', ')', '}()', 'return', 'toReturn', '}', 'The', 'language', 'specification', 'has', 'this', 'interesting', 'bit', 'about', 'ranging', 'over', 'maps:', 'If', 'map', 'entries', 'that', 'have', 'not', 'yet', 'been', 'reached', 'are', 'removed', 'during', 'iteration,', 'the', 'corresponding', 'iteration', 'values', 'will', 'not', 'be', 'produced.', 'If', 'map', 'entries', 'are', 'created', 'during', 'iteration,', 'that', 'entry', 'may', 'be', 'produced', 'during', 'the', 'iteration', 'or', 'may', 'be', 'skipped.', 'Now,', 'what', ""I'd"", 'like', 'to', 'know', 'is', 'this:', 'Is', 'there', 'a', 'guarantee', 'that', 'my', 'method', 'of', 'ranging', 'over', 'the', 'map', 'works', 'even', 'if', 'the', 'map', 'is', 'changed', 'between', 'iterations?', 'Including', 'the', 'case', 'where', 'the', 'key', 'I', 'last', 'read', 'is', 'deleted?', 'I', ""don't"", 'need', 'all', 'of', 'the', 'map', 'entries,', 'but', 'most', 'of', 'them.', 'Here', 'is', 'a', 'complete', 'example:', 'package', 'main', 'import', '(', '""fmt""', '""sync""', ')', 'type', 'Example', 'struct', '{', 'sync', '.', 'RWMutex', 'm', 'map', '[', 'string', ']', 'struct', '{}', '}', 'func', 'NewExample', '()', '*', 'Example', '{', 'return', '&', 'Example', '{', 'm', ':', 'make', '(', 'map', '[', 'string', ']', 'struct', '{}),', '}', '}', 'func', '(', 'e', '*', 'Example', ')', 'Put', '(', 's', 'string', ')', '{', 'e.Lock()', 'defer', 'e.Unlock()', 'e', '.', 'm', '[', 's', ']', '=', 'struct', '{}{}', '}', 'func', '(', 'e', '*', 'Example', ')', 'Delete', '(', 's', 'string', ')', '{', 'e.Lock()', 'defer', 'e.Unlock()', 'delete', '(', 'e', '.', 'm', ',', 's', ')', '}', 'func', '(', 'e', '*', 'Example', ')', 'StreamAll', '()', '<-', 'chan', 'string', '{', 'toReturn', ':=', 'make', '(', 'chan', 'string', ')', 'go', 'func', '()', '{', 'e.RLock()', 'defer', 'e.RUnlock()', 'for', 'k', ':=', 'range', 'e', '.', 'm', '{', 'e.RUnlock()', 'toReturn', '<-', 'k', 'e.RLock()', '}', 'close', '(', 'toReturn', ')', '}()', 'return', 'toReturn', '}', 'func', 'main', '()', '{', 'e', ':=', 'NewExample', '()', 'e.Put(""a"")', 'e.Put(""b"")', 'values', ':=', 'e.StreamAll()', '//', 'Assume', 'other', 'goroutines', 'concurrently', 'call', 'Put', 'and', 'Delete', 'on', 'e', 'for', 'k', ':=', 'range', 'values', '{', 'fmt.Println(k)', '}', '}']"
1587,38001650,"

When I look in the first range and give me the $values as one string and the second range is death. 

What's my Problem?
","['i', 'give', 'a', 'dataset', 'from', 'mysql-database', 'to', 'go-template.', 'the', 'result', 'have', 'multiple', 'rows', 'but', 'all', 'values', 'is', 'one', 'string!?', 'type', 'Tasks', 'struct', '{', 'tid', 'int', 'pid', 'int', 'uid', 'int', 'del', 'int', 'finisch', 'int', 'open', 'int', 'inprocess', 'int', 'abnahme', 'int', 'fertig', 'int', 'finischdatum', 'string', 'erstellt', 'string', 'start', 'string', 'ende', 'string', 'name', 'string', 'beschreibung', 'string', '}', 'type', 'Daten', 'struct', '{', 'Tabledata', '[]*', 'Tasks', '}', 'd', ':=', 'Daten', '{}', 'rows', ',', 'err', ':=', 'db.Query(""SELECT * FROM tasks WHERE pid=? AND del=0"", pid)', 'checkError', '(', 'err', ')', 'defer', 'rows.Close()', 'rs', ':=', 'make', '([]*', 'Tasks', ',', '0', ')', 'for', 'rows.Next()', '{', 'rst', ':=', 'new', '(', 'Tasks', ')', 'err', ':=', 'rows.Scan(&rst.tid, &rst.pid, &rst.uid, &rst.del, &rst.finisch, &rst.open, &rst.inprocess, &rst.abnahme, &rst.fertig, &rst.finischdatum, &rst.erstellt, &rst.start, &rst.ende, &rst.name, &rst.beschreibung)', 'if', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', 'rs', '=', 'append', '(', 'rs', ',', 'rst', ')', '}', 'd', '.', 'Tabledata', '=', 'rs', 'template:', '{{', 'range', '$', 'key', ',', '$', 'values', ':=', '.', 'Tabledata', '}}', '{{', '$', 'key', '}}:', '{{', 'range', '$', 'values', '}}', '{{.}}', '{{', 'end', '}}', '{{', 'end', '}}', 'When', 'I', 'look', 'in', 'the', 'first', 'range', 'and', 'give', 'me', 'the', '$values', 'as', 'one', 'string', 'and', 'the', 'second', 'range', 'is', 'death.', ""What's"", 'my', 'Problem?']"
1588,38079036,"
","['Problem:', 'There', 'is', 'a', 'list', 'of', 'tables', 'associated', 'keys.', 'It', 'is', 'necessary', 'to', 'implement', 'CRUD', 'for', 'each', 'table', '+', 'some', 'functional', 'on', 'the', 'specifics', 'of', 'the', 'table', '(pagination,', 'etc.).', 'Troubles:', 'duplicated', 'in', 'each', 'of', 'the', 'functional', 'implementation', 'for', 'each', 'table', 'About', '50%', 'of', 'the', 'code.', 'Question:', 'What', 'are', 'the', 'ways', 'on', 'the', 'specifics', 'of', 'the', 'language,', 'of', 'the', 'optimization', '/', 'refactoring', '/', 'use', 'similar', 'code', 'patterns?', 'Example', 'code', 'part', '//', '------------------------------------------------------------------', '//', 'user', '//', '----------------------------------------------------------------------', 'func', '(', 'd', '*', 'Database', ')', 'UserCreate', '(', 'email', ',', 'password', ',', 'username', 'string', ',', 'role', 'int', ')', '*', 'Answer', '{', '//', 'variables', 'answer', ':=', 'd.initCall(""UserCreate"")', 'user', ':=', 'new', '(', 'User', ')', '//', 'check', 'exist', 'user', 'if', 'userExist', ':=', 'd', '.', 'DB.Find(&User{}, &User{Email:email})', '.', 'Error', ';', 'userExist', '==', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', '""[usercreate] user already exist""', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'userinfo', ':=', 'UserInfo', '{', 'Data', ':', 'time.Now()', '}', 'session', ':=', 'Session', '{', 'Data', ':', 'time.Now()', '}', 'cook', ':=', 'Cook', '{}', '//', 'make', 'support', 'tables', 'object', '//', 'userinfo', 'object', 'userinfo', '.', 'Password', '=', 'password', 'userinfo', '.', 'Username', '=', 'username', '//', 'cook', 'object', 'cook', '.', 'SessionID', '=', 'session', '.', 'ID', 'cook', '.', 'Cookie', '=', 'd.cookgeneratenew(""somesaltforcooksgenerate"")', 'cook', '.', 'Status', '=', 'true', 'cook', '.', 'Lastconnect', '=', 'time.Now()', 'cook', '.', 'CountConnect', '+=', '1', '//', 'user', 'object', 'user', '.', 'Email', '=', 'email', 'user', '.', 'Session', '=', 'session', 'user', '.', 'UserInfo', '=', 'userinfo', 'user', '.', 'Cook', '=', 'cook', 'user', '.', 'Role', '=', 'int64', '(', 'role', ')', '//', 'make', 'request', '+', 'serizlizations', 'to', 'json', 'answer', 'if', 'err', ':=', 'd', '.', 'DB.Create(user)', '.', 'Error', ';', 'err', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'err.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'user', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', '}', '}', 'd.serilize(answer)', 'return', 'answer', '}', 'func', '(', 'd', '*', 'Database', ')', 'UserDelete', '(', 'userid', 'int64', ')', '*', 'Answer', '{', 'answer', ':=', 'd.initCall(""UserDelete"")', 'user', ':=', 'new', '(', 'User', ')', '//', 'check', 'exists', 'if', 'userExists', ':=', 'd', '.', 'DB.Find(user, ""ID = ?"", userid)', '.', 'Error', ';', 'userExists', '==', 'nil', '{', 'if', 'userDelete', ':=', 'd', '.', 'DB.Delete(user)', '.', 'Error', ';', 'userDelete', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'userExists.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '=', 'nil', '}', '}', 'else', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'userExists.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'd.serilize(answer)', 'return', 'answer', '}', 'func', '(', 'd', '*', 'Database', ')', 'UserRead', '(', 'userid', 'int64', ')', '*', 'Answer', '{', 'answer', ':=', 'd.initCall(""UserRead"")', 'user', ':=', 'new', '(', 'User', ')', 'if', 'userExists', ':=', 'd', '.', 'DB.Find(user, ""ID = ?"", userid)', '.', 'Error', ';', 'userExists', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'userExists.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'if', 'rel', ':=', 'd', '.', 'DB.Model(user).Related(&user.Session)', '.', 'Error', ';', 'rel', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'rel.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', 'if', 'rel', '=', 'd', '.', 'DB.Model(user).Related(&user.UserInfo)', '.', 'Error', ';', 'rel', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'rel.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', 'if', 'rel', '=', 'd', '.', 'DB.Model(user).Related(&user.Cook)', '.', 'Error', ';', 'rel', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'rel.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'user', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', '}', '}', 'd.serilize(answer)', 'return', 'answer', '}', 'func', '(', 'd', '*', 'Database', ')', 'UserReadAll', '()', '*', 'Answer', '{', 'answer', ':=', 'd.initCall(""UserReadAll"")', 'users', ':=', '[]', 'User', '{}', 'if', 'usersGet', ':=', 'd', '.', 'DB.Find(&users)', '.', 'Error', ';', 'usersGet', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'usersGet.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'for', '_', ',', 'user', ':=', 'range', 'users', '{', 'd', '.', 'DB.Model(user).Related(&user.Session)', 'd', '.', 'DB.Model(user).Related(&user.UserInfo)', 'd', '.', 'DB.Model(user).Related(&user.Cook)', '}', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'users', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', '}', 'd.serilize(answer)', 'return', 'answer', '}', 'func', '(', 'd', '*', 'Database', ')', 'UserUpdate', '(', 'userid', 'int64', ',', 'uu', '*', 'UserUpdateStruct', ')', '*', 'Answer', '{', 'answer', ':=', 'd.initCall(""UserUpdate"")', 'user', ':=', 'new', '(', 'User', ')', 'if', 'userExists', ':=', 'd', '.', 'DB.Find(user, ""ID = ?"", userid)', '.', 'Error', ';', 'userExists', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'userExists.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', '//', 'get', 'relevating', 'struct', 'info', 'd', '.', 'DB.Model(user).Related(&user.Session)', 'd', '.', 'DB.Model(user).Related(&user.UserInfo)', 'd', '.', 'DB.Model(user).Related(&user.Cook)', '//', 'update', 'columns', 'if', 'uu', '.', 'Email', '!=', '""""', '{', 'user', '.', 'Email', '=', 'uu', '.', 'Email', '}', 'if', 'uu', '.', 'Avatar', '>', '0', '{', 'user', '.', 'UserInfo', '.', 'Avatar', '=', 'uu', '.', 'Avatar', '}', 'if', 'uu', '.', 'Birthday', '!=', '""""', '{', 'user', '.', 'UserInfo', '.', 'Birthday', '=', 'uu', '.', 'Birthday', '}', 'if', 'uu', '.', 'Location', '!=', '""""', '{', 'user', '.', 'UserInfo', '.', 'Location', '=', 'uu', '.', 'Location', '}', 'if', 'uu', '.', 'Male', '!=', '""""', '{', 'user', '.', 'UserInfo', '.', 'Male', '=', 'uu', '.', 'Male', '}', 'if', 'uu', '.', 'Password', '!=', '""""', '{', 'user', '.', 'UserInfo', '.', 'Password', '=', 'uu', '.', 'Password', '}', 'if', 'uu', '.', 'Role', '>', '0', '{', 'if', 'roleErr', ':=', 'd', '.', 'DB.Find(&Role{})', '.', 'Error', ';', 'roleErr', '!=', 'nil', '{', '//', 'role', 'not', 'found', 'fmt.Printf(""[userupdate] role not found `%d`\\n"", uu.Role)', '}', 'else', '{', 'user', '.', 'Role', '=', 'uu', '.', 'Role', '}', '}', '//', 'update', 'if', 'errUpdate', ':=', 'd', '.', 'DB.Save(user)', '.', 'Error', ';', 'errUpdate', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'errUpdate.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'user', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', '}', '}', 'd.serilize(answer)', 'return', 'answer', '}', 'func', '(', 'd', '*', 'Database', ')', 'UserPaginate', '(', 'page', ',', 'countPage', 'int', ')', '*', 'Answer', '{', 'answer', ':=', 'd.initCall(""UserPaginate"")', 'result', ':=', '[]*', 'User', '{}', 'if', 'errPag', ':=', 'd', '.', 'DB.Limit(countPage).Offset((page * countPage) - countPage).Find(&result)', '.', 'Error', ';', 'errPag', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'errPag.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'for', '_', ',', 'user', ':=', 'range', 'result', '{', 'd', '.', 'DB.Model(&user).Related(&user.Session)', 'd', '.', 'DB.Model(&user).Related(&user.UserInfo)', 'd', '.', 'DB.Model(&user).Related(&user.Cook)', '}', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'result', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', '}', 'd.serilize(answer)', 'return', 'answer', '}', '//', '-------------------------------------------------------------------', '//', 'category', '//', '--------------------------------------------------------------------', 'func', '(', 'd', '*', 'Database', ')', 'CategoryCreate', '(', 'name', 'string', ')', '*', 'Answer', '{', '//', 'variables', 'answer', ':=', 'd.initCall(""CategoryCreate"")', 'cat', ':=', 'new', '(', 'Category', ')', '//', 'check', 'exist', 'user', 'if', 'catExist', ':=', 'd', '.', 'DB.Find(&Category{}, &Category{Name:name})', '.', 'Error', ';', 'catExist', '==', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', '""[categorycreate] category already exist""', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'cat', '.', 'Name', '=', 'name', '//', 'make', 'request', '+', 'serizlizations', 'to', 'json', 'answer', 'if', 'err', ':=', 'd', '.', 'DB.Create(cat)', '.', 'Error', ';', 'err', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'err.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'cat', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', '}', '}', 'd.serilize(answer)', 'return', 'answer', '}', 'func', '(', 'd', '*', 'Database', ')', 'CategoryDelete', '(', 'catid', 'int64', ')', '*', 'Answer', '{', 'answer', ':=', 'd.initCall(""CategoryDelete"")', 'cat', ':=', 'new', '(', 'Category', ')', '//', 'check', 'exists', 'if', 'catExists', ':=', 'd', '.', 'DB.Find(cat, ""ID = ?"", catid)', '.', 'Error', ';', 'catExists', '==', 'nil', '{', 'if', 'catDelete', ':=', 'd', '.', 'DB.Delete(cat)', '.', 'Error', ';', 'catDelete', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'catExists.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '=', 'nil', '}', '}', 'else', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'catExists.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'd.serilize(answer)', 'return', 'answer', '}', 'func', '(', 'd', '*', 'Database', ')', 'CategoryRead', '(', 'catid', 'int64', ')', '*', 'Answer', '{', 'answer', ':=', 'd.initCall(""CategoryRead"")', 'cat', ':=', 'new', '(', 'Category', ')', 'if', 'catExists', ':=', 'd', '.', 'DB.Find(cat, ""ID = ?"", catid)', '.', 'Error', ';', 'catExists', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'catExists.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'if', 'rel', ':=', 'd', '.', 'DB.Model(cat).Related(&cat.Post)', '.', 'Error', ';', 'rel', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'rel.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'for', 'x', ',', 'p', ':=', 'range', 'cat', '.', 'Post', '{', 'd', '.', 'DB.Model(&p).Related(&p.Comment)', 'd', '.', 'DB.Model(&p).Related(&p.PostSeo)', 'cat', '.', 'Post', '[', 'x', ']', '=', 'p', '}', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'cat', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', '}', '}', 'd.serilize(answer)', 'return', 'answer', '}', 'func', '(', 'd', '*', 'Database', ')', 'CategoryReadAll', '()', '*', 'Answer', '{', 'answer', ':=', 'd.initCall(""CategoryReadAll"")', 'cats', ':=', '[]', 'Category', '{}', 'if', 'catsGet', ':=', 'd', '.', 'DB.Find(&cats)', '.', 'Error', ';', 'catsGet', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'catsGet.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', '//', 'categorys', 'for', '_', ',', 'cat', ':=', 'range', 'cats', '{', 'd', '.', 'DB.Model(cat).Related(&cat.Post)', '//', 'get', 'relete', 'POST', 'for', 'x', ',', 'p', ':=', 'range', 'cat', '.', 'Post', '{', 'd', '.', 'DB.Model(&p).Related(&p.Comment)', 'd', '.', 'DB.Model(&p).Related(&p.PostSeo)', 'cat', '.', 'Post', '[', 'x', ']', '=', 'p', '}', '}', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'cats', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', '}', 'd.serilize(answer)', 'return', 'answer', '}', 'func', '(', 'd', '*', 'Database', ')', 'CategoryUpdate', '(', 'catid', 'int64', ',', 'name', 'string', ')', '*', 'Answer', '{', 'answer', ':=', 'd.initCall(""CategoryUpdate"")', 'cat', ':=', 'new', '(', 'Category', ')', 'if', 'catExists', ':=', 'd', '.', 'DB.Find(cat, ""ID = ?"", catid)', '.', 'Error', ';', 'catExists', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'catExists.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', '//', 'get', 'relevating', 'struct', 'info', 'd', '.', 'DB.Model(cat).Related(&cat.Post)', '//', 'update', 'columns', 'if', 'name', '!=', '""""', '{', 'cat', '.', 'Name', '=', 'name', '}', '//', 'update', 'if', 'errUpdate', ':=', 'd', '.', 'DB.Save(cat)', '.', 'Error', ';', 'errUpdate', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'errUpdate.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'cat', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', '}', '}', 'd.serilize(answer)', 'return', 'answer', '}', 'func', '(', 'd', '*', 'Database', ')', 'CategoryPaginate', '(', 'page', ',', 'countPage', 'int', ')', '*', 'Answer', '{', 'answer', ':=', 'd.initCall(""CategoryPaginate"")', 'result', ':=', '[]*', 'Category', '{}', 'if', 'errPag', ':=', 'd', '.', 'DB.Limit(countPage).Offset((page * countPage) - countPage).Find(&result)', '.', 'Error', ';', 'errPag', '!=', 'nil', '{', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '.', 'Message', '=', 'errPag.Error()', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'false', '}', 'else', '{', 'for', '_', ',', 'cat', ':=', 'range', 'result', '{', 'd', '.', 'DB.Model(&cat).Related(&cat.Post)', '//', 'get', 'relete', 'POST', 'for', 'x', ',', 'p', ':=', 'range', 'cat', '.', 'Post', '{', 'd', '.', 'DB.Model(&p).Related(&p.Comment)', 'd', '.', 'DB.Model(&p).Related(&p.PostSeo)', 'cat', '.', 'Post', '[', 'x', ']', '=', 'p', '}', '}', 'answer', '.', 'AnswerJSON', '.', 'Result', '=', 'result', 'answer', '.', 'AnswerJSON', '.', 'ErrorAnswer', '=', 'nil', 'answer', '.', 'AnswerJSON', '.', 'Status', '=', 'true', '}', 'd.serilize(answer)', 'return', 'answer', '}']"
1589,38088721,"I was trying to submit my solution of https://www.codeeval.com/open_challenges/158/ it's a bubble sort. I code in GO lang and on my PC it runs fine and fast! I tried utilize code example of go's input and I tried my own piece of code too.

Anyone can help me ? I tried change the code in somehow, but nothing worked.
Thanks in advance.
","['I', 'was', 'trying', 'to', 'submit', 'my', 'solution', 'of', 'https://www.codeeval.com/open_challenges/158/', ""it's"", 'a', 'bubble', 'sort.', 'I', 'code', 'in', 'GO', 'lang', 'and', 'on', 'my', 'PC', 'it', 'runs', 'fine', 'and', 'fast!', 'I', 'tried', 'utilize', 'code', 'example', 'of', ""go's"", 'input', 'and', 'I', 'tried', 'my', 'own', 'piece', 'of', 'code', 'too.', 'Anyone', 'can', 'help', 'me', '?', 'I', 'tried', 'change', 'the', 'code', 'in', 'somehow,', 'but', 'nothing', 'worked.', 'Thanks', 'in', 'advance.']"
1590,38229584,"

I was expecting to be available to get the same output while calling it from go with the previous code, the strange thing is that if I change to command to be something like id, whoami uname I do get the result and can printed, therefore wondering what could be wrong.

Any ideas ?

UPDATE

Found that I have to wait the program to finish, as suggested in the comments in order to get the output, but in case I would like to get the output in realtime how could I achieve this, what could be the best way of doing it, either io.Copy an os.Pipe, etc ?
","['I', 'want', 'to', 'capture', 'and', 'save', 'to', 'a', 'file', 'all', 'the', 'stdout', 'and', 'stderr', 'For', 'testing', 'purposes', 'I', 'am', 'printing', 'only', 'what', 'I', 'capture', 'using', 'this:', 'package', 'main', 'import', '(', '""bufio""', '""bytes""', '""fmt""', '""io""', '""os/exec""', ')', 'func', 'main', '()', '{', 'cmd', ':=', 'exec.Command(""/tmp/stdout"")', 'stdout', ':=', 'new', '(', 'bytes', '.', 'Buffer', ')', 'stderr', ':=', 'new', '(', 'bytes', '.', 'Buffer', ')', 'cmd', '.', 'Stdout', '=', 'stdout', 'cmd', '.', 'Stderr', '=', 'stderr', 'if', 'err', ':=', 'cmd.Start()', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'if', 'err', ':=', 'cmd.Wait()', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'in', ':=', 'bufio.NewScanner(io.MultiReader(stdout, stderr))', 'for', 'in.Scan()', '{', 'fmt.Println(in.Text())', '}', '}', 'The', '/tmp/stdout', 'command', 'can', 'be', 'build', 'using', 'this', 'code:', 'package', 'main', 'import', '(', '""fmt""', '""os""', '""time""', ')', 'func', 'main', '()', '{', 'for', 'i', ':=', '1', ';', 'i', '<', '1000', ';', 'i', '++', '{', 'if', 'i', '%', '3', '==', '0', '{', 'fmt.Fprintf(os.Stderr, ""STDERR i: %d\\n"", i)', '}', 'else', '{', 'fmt.Printf(""STDOUT i: %d\\n"", i)', '}', 'time.Sleep(1 * time.Second)', '}', '}', 'For', 'some', 'reason', 'I', 'am', 'not', 'been', 'available', 'to', 'capture', 'anything', 'from', 'the', 'output,', 'If', 'I', 'run', 'the', '/tmp/stdout', 'command', 'I', 'get', 'this:', '$', '/tmp/stdout', 'STDOUT', 'i', ':', '1', 'STDOUT', 'i', ':', '2', 'STDERR', 'i', ':', '3', 'STDOUT', 'i', ':', '4', 'STDOUT', 'i', ':', '5', 'STDERR', 'i', ':', '6', 'STDOUT', 'i', ':', '7', 'I', 'was', 'expecting', 'to', 'be', 'available', 'to', 'get', 'the', 'same', 'output', 'while', 'calling', 'it', 'from', 'go', 'with', 'the', 'previous', 'code,', 'the', 'strange', 'thing', 'is', 'that', 'if', 'I', 'change', 'to', 'command', 'to', 'be', 'something', 'like', 'id,', 'whoami', 'uname', 'I', 'do', 'get', 'the', 'result', 'and', 'can', 'printed,', 'therefore', 'wondering', 'what', 'could', 'be', 'wrong.', 'Any', 'ideas', '?', 'UPDATE', 'Found', 'that', 'I', 'have', 'to', 'wait', 'the', 'program', 'to', 'finish,', 'as', 'suggested', 'in', 'the', 'comments', 'in', 'order', 'to', 'get', 'the', 'output,', 'but', 'in', 'case', 'I', 'would', 'like', 'to', 'get', 'the', 'output', 'in', 'realtime', 'how', 'could', 'I', 'achieve', 'this,', 'what', 'could', 'be', 'the', 'best', 'way', 'of', 'doing', 'it,', 'either', 'io.Copy', 'an', 'os.Pipe,', 'etc', '?']"
1591,38234029,"I know about ToUpper and ToLower from strings package but obviously they won't help here. Is there a built-in function or do I have to write one myself?
","['I', 'know', 'about', 'ToUpper', 'and', 'ToLower', 'from', 'strings', 'package', 'but', 'obviously', 'they', ""won't"", 'help', 'here.', 'Is', 'there', 'a', 'built-in', 'function', 'or', 'do', 'I', 'have', 'to', 'write', 'one', 'myself?']"
1592,38262155,"

I know my code may look verbose and look a bit lame. But any advice into direction I should move would be very appreciated. 
","['I', 'am', 'coming', 'from', 'PHP', 'background', 'and', 'trying', 'to', 'build', 'small', 'tool', 'that', 'would', 'allow', 'me', 'to', 'filter', 'the', 'list', 'of', 'keywords', 'against', 'the', 'black', 'list', 'both', 'supplied', 'via', 'CSV', 'file.', 'I', 'managed', 'to', 'do', 'that', 'in', 'PHP', 'but', 'it', 'has', 'some', 'speed', 'limitation.', 'So', 'I', 'decided', 'to', 'try', 'my', 'powers', 'with', 'Golang.', 'I', 'have', 'succeeded', 'to', 'open', 'CSV', 'file', 'fmt.Println', 'the', 'contents', 'of', 'both', 'keywords', 'and', 'blacklist,', 'and', 'managed', 'to', 'compare', 'each', 'of', 'the', 'keywords', 'to', 'each', 'of', 'the', 'blacklists', 'keyword.', 'But', 'the', 'problem', 'I', 'face', 'is', 'that', 'I', 'can', 'figure', 'out', 'how', 'to', 'build', 'dynamic', 'associative', 'array', 'something', 'like', 'that.', 'func', 'tion', 'compareKeywords', '($', 'keyword', ',', '$', 'filters', ')', '{', '$', 'matches', '=', '[];', 'for', 'each', '($', 'filters', 'as', '$', 'filter', ')', '{', '$', 'matches', '[]', '=', 'strpos', '($', 'keyword', ',', '$', 'filter', ');', '}', '$', 'matches', '=', 'array_filter', '($', 'matches', ');', 'if', '(', 'empty', '($', 'matches', '))', '{', 'return', '$', 'keyword', '}', '}', 'This', 'function', 'simply', 'checks', 'keyword', 'against', 'fully', 'or', 'partially', 'matching', 'the', 'blacklisted', 'keywords', 'if', 'it', 'does', 'not', 'match', 'the', 'blacklisted', 'keywords', 'it', 'returns', 'this', 'keyword', 'and', 'then', 'adds', 'it', 'to', 'CSV', 'file.', 'I', 'spent', 'decent', 'amount', 'of', 'time', 'trying', 'to', 'create', 'similar', 'function', 'in', 'Golang', 'but', 'I', 'struggle', 'to', 'mimic', 'the', 'associative', 'array', 'from', 'PHP.', 'I', 'came', 'up', 'with', 'slightly', 'different', 'function', 'which', 'accepts', 'keywords', 'rather', 'than', 'single', 'keyword', 'as', 'well', 'as', 'filters', 'and', 'uses', 'nested', 'loop.', 'func', 'compare', '(', 'keywords', '[][]', 'string', ',', 'filterKeywords', '[][]', 'string', ')', '(', 'keywordMap', '//no sure what type it should be) {', 'matchFilters', ':=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'keywordMap', ':=', 'make', '(', 'map', '[', 'string', ']', 'string', ')', 'for', '_', ',', 'keyword', ':=', 'range', 'keywords', '{', 'for', '_', ',', 'filter', ':=', 'range', 'filterKeywords', '{', 'if', 'convStr', '(', 'keyword', ')', '==', 'convStr', '(', 'filter', ')', '{', '//', 'here', 'i', 'want', 'to', 'store', 'matches', 'filters', '}', '}', '}', '//', 'Check', 'if', 'matchFilters', 'empty', 'and', 'return', 'filtered', 'keywordMap', 'return', '}', 'I', 'know', 'my', 'code', 'may', 'look', 'verbose', 'and', 'look', 'a', 'bit', 'lame.', 'But', 'any', 'advice', 'into', 'direction', 'I', 'should', 'move', 'would', 'be', 'very', 'appreciated.']"
1593,38321621,"

The Problem is the handlerFunc. When I get the config it will be a string but how to make it a go value? Can I cast it somehow?

Following error occures:


  json: cannot unmarshal string into Go value of type http.HandlerFunc


Thanks
","['I', 'want', 'to', 'put', 'my', 'router', 'config', 'in', 'an', 'extern', 'json', 'config', 'file', 'like', 'so:', '{', '""routes""', ':', '[', '{', '""name""', ':', '""Index""', ',', '""method""', ':', '""GET""', ',', '""pattern""', ':', '""/""', ',', '""handler""', ':', '""Index""', '},', '{', '""name""', ':', '""CountsIndex""', ',', '""method""', ':', '""GET""', ',', '""pattern""', ':', '""/counts""', ',', '""handler""', ':', '""CountsIndex""', '}', ']', '}', 'My', 'related', 'struct', 'looks', 'like', 'so:', 'type', 'Route', 'struct', '{', 'Name', 'string', 'json', ':', '""name""', 'Method', 'string', 'json', ':', '""method""', 'Pattern', 'string', 'json', ':', '""pattern""', 'HandlerFunc', 'http', '.', 'HandlerFunc', 'json', ':', '""handler""', '}', 'type', 'Routes', '[]', 'Route', 'The', 'Problem', 'is', 'the', 'handlerFunc.', 'When', 'I', 'get', 'the', 'config', 'it', 'will', 'be', 'a', 'string', 'but', 'how', 'to', 'make', 'it', 'a', 'go', 'value?', 'Can', 'I', 'cast', 'it', 'somehow?', 'Following', 'error', 'occures:', 'json:', 'cannot', 'unmarshal', 'string', 'into', 'Go', 'value', 'of', 'type', 'http.HandlerFunc', 'Thanks']"
1594,38386762,"Is it possible to execute code at a noon everyday? The program is handling user input the rest of its run time but needs to run a function at noon to output some text. What is the most effective way to do this?
","['Is', 'it', 'possible', 'to', 'execute', 'code', 'at', 'a', 'noon', 'everyday?', 'The', 'program', 'is', 'handling', 'user', 'input', 'the', 'rest', 'of', 'its', 'run', 'time', 'but', 'needs', 'to', 'run', 'a', 'function', 'at', 'noon', 'to', 'output', 'some', 'text.', 'What', 'is', 'the', 'most', 'effective', 'way', 'to', 'do', 'this?']"
1595,38420069,"
","['I', 'am', 'new', 'in', 'Go', 'language', 'and', 'want', 'to', 'learn', 'basic', 'fundamental', 'here', 'below', 'I', 'paste', 'example.', 'the', 'problem', 'in', 'this', 'example', 'is', 'I', 'cannot', 'access', 'number', 'variable', 'inside', 'for', 'loop.', 'it', 'shows', 'this', 'error', '""', 'number', 'declared', 'and', 'not', 'use', '""', '.', 'Please', 'help', 'me', ':(', 'package', 'main', 'import', '(', '""fmt""', ')', 'func', 'main', '()', '{', 'samlestNumber', '()', '}', 'func', 'samlestNumber', '()', '{', 'x', ':=', '[]', 'int', '{', '48', ',', '96', ',', '86', ',', '68', ',', '57', ',', '82', ',', '63', ',', '70', ',', '37', ',', '34', ',', '83', ',', '27', ',', '19', ',', '97', ',', '9', ',', '17', ',', '}', '//', 'x', '=', 'append(x,6,7)', 'var', 'number', 'int', '=', 'x', '[', '0', ']', 'for', '_', ',', 'element', ':=', 'range', 'x', '{', 'if', 'element', '<', 'x', '[', '0', ']', '{', 'number', '=', 'element', '}', 'fmt.Println("" :::: "",element)', '}', '}']"
1596,38422600,"

What is the cause for it to get stuck. Does looking at this code give anything away? 

So in short, what I want my end result to be is that each port is scanned in a different go routine, and when they all finished, everything comes together in a resulting slice of ScanResult.

I hope I have been clear and provided enough information for you guys to help me.

Oh, and im especially looking for pointers, and the learning bit, not persee working code samples.
","['I', 'am', 'currently', 'in', 'the', 'proces', 'of', 'learning', 'go.', 'To', 'do', 'that,', 'I', 'am', 'making', 'a', 'relatively', 'simple', 'portscanner.', 'The', 'issue', 'I', 'am', 'facing', 'is', 'that', 'it', 'takes', 'a', 'considerable', 'amount', 'of', 'time', 'to', 'scan', 'these', 'ports.', 'The', 'behaviour', 'i', 'am', 'having', 'is', 'that,', 'if', 'i', 'scan', 'ports', '(defined', 'as', 'an', 'array', 'of', 'int32', '(protobuf', 'doesnt', 'support', 'int16),', 'NOT', 'using', 'goroutines', 'works,', 'but', 'is', 'quite', 'slow', 'when', 'scanning', 'more', 'then', '5', 'ports', 'as', 'you', 'can', 'imagine,', 'since', 'it', 'is', 'not', 'running', 'in', 'parallel.', 'To', 'achieve', 'parallelism,', 'I', 'came', 'up', 'with', 'the', 'following', 'bits', 'of', 'code', '(explanation', '+', 'issue', 'comes', 'after', 'code):', '//', 'entry', 'point', 'for', 'port', 'scanning', 'var', 'results', '[]*', 'portscan', '.', 'ScanResult', '//', 'len(splitPorts)', 'is', 'the', 'given', 'string', '(see', 'benchmark', 'below)', 'chopped', 'up', 'in', 'an', 'int32', 'slice', 'ch', ':=', 'make', '(', 'chan', '*', 'portscan', '.', 'ScanResult', ',', 'len', '(', 'splitPorts', '))', 'var', 'wg', 'sync', '.', 'WaitGroup', 'for', '_', ',', 'port', ':=', 'range', 'splitPorts', '{', 'connect', '(', 'ip', ',', 'port', ',', 'req', '.', 'Timeout', ',', 'ch', ',', '&', 'wg', ')', '}', 'wg.Wait()', 'for', 'elem', ':=', 'range', 'ch', '{', 'results', '=', 'append', '(', 'results', ',', 'elem', ')', '}', '//', 'go', 'routine', 'func', 'connect', '(', 'ip', 'string', ',', 'port', ',', 'timeout', 'int32', ',', 'ch', 'chan', '*', 'portscan', '.', 'ScanResult', ',', 'wg', '*', 'sync', '.', 'WaitGroup', ')', '{', 'wg.Add(1)', 'go', 'func', '()', '{', 'res', ':=', '&', 'portscan', '.', 'ScanResult', '{', 'Port', ':', 'port', ',', 'IsOpen', ':', 'false', ',', '}', 'conn', ',', 'err', ':=', 'net.DialTimeout(""tcp"", fmt.Sprintf(""%s:%d"", ip, port), time.Duration(timeout)*time.Millisecond)', 'if', 'err', '==', 'nil', '{', 'conn.Close()', 'res', '.', 'IsOpen', '=', 'true', '}', 'ch', '<-', 'res', 'wg.Done()', '}()', '}', 'So', 'protobuf', 'prepared', 'me', 'a', 'struct', 'which', 'looks', 'as', 'follows:', 'type', 'ScanResult', 'struct', '{', 'Port', 'int32', 'protobuf', ':', '""varint,1,opt,name=port""', 'json', ':', '""port,omitempty""', 'IsOpen', 'bool', 'protobuf', ':', '""varint,2,opt,name=isOpen""', 'json', ':', '""isOpen,omitempty""', '}', 'As', 'seen', 'in', 'the', 'first', 'line', 'of', 'the', 'code', 'snippet,', 'I', 'have', 'defined', 'a', 'slice,', 'to', 'hold', 'all', 'results,', 'the', 'idea', 'is', 'that', 'my', 'application', 'scans', 'ports', 'in', 'parallel', 'and', 'when', 'that', 'is', 'done,', 'send', 'the', 'results', 'to', 'whoever', 'is', 'interested.', 'However,', 'using', 'this', 'code,', 'the', 'program', 'gets', 'stuck.', 'I', 'run', 'this', 'benchmark', 'to', 'test', 'its', 'performance:', 'func', 'BenchmarkPortScan', '(', 'b', '*', 'testing', '.', 'B', ')', '{', 'request', ':=', '&', 'portscan', '.', 'ScanPortsRequest', '{', 'Ip', ':', '""62.129.139.214""', ',', 'PortRange', ':', '""20,21,22,23""', ',', 'Timeout', ':', '500', ',', '}', 'svc', ':=', 'newService', '()', 'for', 'i', ':=', '0', ';', 'i', '<', 'b', '.', 'N', ';', 'i', '++', '{', 'svc.ScanPorts(nil, request)', '}', '}', 'What', 'is', 'the', 'cause', 'for', 'it', 'to', 'get', 'stuck.', 'Does', 'looking', 'at', 'this', 'code', 'give', 'anything', 'away?', 'So', 'in', 'short,', 'what', 'I', 'want', 'my', 'end', 'result', 'to', 'be', 'is', 'that', 'each', 'port', 'is', 'scanned', 'in', 'a', 'different', 'go', 'routine,', 'and', 'when', 'they', 'all', 'finished,', 'everything', 'comes', 'together', 'in', 'a', 'resulting', 'slice', 'of', 'ScanResult.', 'I', 'hope', 'I', 'have', 'been', 'clear', 'and', 'provided', 'enough', 'information', 'for', 'you', 'guys', 'to', 'help', 'me.', 'Oh,', 'and', 'im', 'especially', 'looking', 'for', 'pointers,', 'and', 'the', 'learning', 'bit,', 'not', 'persee', 'working', 'code', 'samples.']"
1597,38427250,"I would like to get a list of the wireless networks available inside a Go program running under Linux OS. It's pretty easy to get this information from a Linux command line with iwlist but I really want to have it done natively in Go. Any ideas of which package should be used? Thank you.
","['I', 'would', 'like', 'to', 'get', 'a', 'list', 'of', 'the', 'wireless', 'networks', 'available', 'inside', 'a', 'Go', 'program', 'running', 'under', 'Linux', 'OS.', ""It's"", 'pretty', 'easy', 'to', 'get', 'this', 'information', 'from', 'a', 'Linux', 'command', 'line', 'with', 'iwlist', 'but', 'I', 'really', 'want', 'to', 'have', 'it', 'done', 'natively', 'in', 'Go.', 'Any', 'ideas', 'of', 'which', 'package', 'should', 'be', 'used?', 'Thank', 'you.']"
1598,38494274,"
","['I', 'was', 'really', 'hoping', 'the', 'below', 'code', 'would', 'work,', 'but', 'it', ""doesn't"", 'so', 'currently', 'I', 'have', 'to', 'manually', 'set', 'values', 'from', 'one', 'struct', 'to', 'another.', 'https://play.golang.org/p/yfcsaNJm9M', 'package', 'main', 'import', '""fmt""', 'import', '""encoding/json""', 'type', 'A', 'struct', '{', 'Name', 'string', 'json', ':', '""name""', 'Password', 'string', 'json', ':', '""password""', '}', 'type', 'B', 'struct', '{', 'A', 'Password', 'string', 'json', ':', '""-""', 'Locale', 'string', 'json', ':', '""locale""', '}', 'func', 'main', '()', '{', 'a', ':=', 'A', '{', '""Jim""', ',', '""some_secret_password""', '}', 'b', ':=', 'B', '{', 'A', ':', 'a', ',', 'Locale', ':', '""en""', '}', 'data', ',', '_', ':=', 'json.Marshal(&b)', 'fmt.Printf(""%v"", string(data))', '}', 'Output...I', ""don't"", 'want', 'to', 'show', 'the', 'secret', 'field', '{', '""name""', ':', '""Jim""', ',', '""password""', ':', '""some_secret_password""', ',', '""locale""', ':', '""en""', '}']"
1599,38543825,"

Why is appending one element to a nil slice increases the capacity by 2?

Printing the slices using fmt.Printf shows the following:

[] // s1
[1] // s2


I am also confused about why re-slicing s2[0:2] shows a zero which was not in the original slice nor appended to it:

[1,0] // s2[0:2]

","['I', 'have', 'a', 'nil', 'slice:', 'var', 's1', '[]', 'int', '// len(s1) == 0, cap(s1) == 0', 'Which', 'I', 'append', 'one', 'element', 'to:', 's2', ':=', 'append', '(', 's1', ',', '1', ')', '// len(s2) == 1, cap(s2) == 2', 'Why', 'is', 'appending', 'one', 'element', 'to', 'a', 'nil', 'slice', 'increases', 'the', 'capacity', 'by', '2?', 'Printing', 'the', 'slices', 'using', 'fmt.Printf', 'shows', 'the', 'following:', '[]', '//', 's1', '[1]', '//', 's2', 'I', 'am', 'also', 'confused', 'about', 'why', 're-slicing', 's2[0:2]', 'shows', 'a', 'zero', 'which', 'was', 'not', 'in', 'the', 'original', 'slice', 'nor', 'appended', 'to', 'it:', '[1,0]', '//', 's2[0:2]']"
1600,38555568,"

I must be doing something stupid - clues appreciated.
","['I', 'have', 'a', 'small', 'Go', 'program', 'which', 'uses', 'a', 'a', 'postgresql', 'db.', 'In', 'it', 'there', 'is', 'a', 'query', 'which', 'can', 'return', 'no', 'rows,', 'and', 'the', 'code', ""I'm"", 'using', 'to', 'deal', 'with', 'this', ""isn't"", 'working', 'correctly.', '//', 'Get', 'the', 'karma', 'value', 'for', 'nick', 'from', 'the', 'database.', 'func', 'getKarma', '(', 'nick', 'string', ',', 'db', '*', 'sql', '.', 'DB', ')', 'string', '{', 'var', 'karma', 'int', 'err', ':=', 'db.QueryRow(""SELECT SUM(delta) FROM karma WHERE nick = $1"", nick).Scan(&karma)', 'var', 'karmaStr', 'string', 'switch', '{', 'case', 'err', '==', 'sql', '.', 'ErrNoRows', ':', 'karmaStr', '=', 'fmt.Sprintf(""%s has no karma."", nick)', 'case', 'err', '!=', 'nil', ':', 'log.Fatal(err)', 'default', ':', 'karmaStr', '=', 'fmt.Sprintf(""Karma for %s is %d."", nick, karma)', '}', 'return', 'karmaStr', '}', 'This', 'logic', 'is', 'taken', 'directly', 'from', 'the', 'Go', 'documentation.', 'When', 'there', 'are', 'no', 'rows', 'corresponding', 'to', 'nick,', 'the', 'following', 'error', 'occurs:', '2016/07/24', '19', ':', '37', ':', '07', 'sql', ':', 'Scan', 'error', 'on', 'column', 'index', '0', ':', 'converting', 'driver', '.', 'Value', 'type', '(', '""""', ')', 'to', 'a', 'int', ':', 'invalid', 'syntax', 'I', 'must', 'be', 'doing', 'something', 'stupid', '-', 'clues', 'appreciated.']"
1601,38612279,"
","[""I've"", 'been', 'trying', 'to', 'make', 'a', 'simple', 'RSA', 'encrypted', 'chat', 'app.', 'The', 'problem', ""I've"", 'come', 'across', 'is', 'having', 'to', 'send', 'the', 'rsa', 'Public', 'key', 'over', 'the', 'tcp', 'connection,', 'as', 'net.Conn', ',', 'to', 'my', 'knowledge', 'only', 'accepts', 'the', 'type', '[]byte.', 'Problem', 'code', 'conn.Write([]byte(public_key))', 'This', 'is', 'the', 'code', 'that', 'is', 'producing', 'my', 'complications.This', 'code', 'is', 'under', 'the', 'function', 'handleRequest.', 'I', 'understand', 'that', 'conn.Write', 'can', 'only', 'accept', 'the', 'type', '[]byte,', 'but', 'is', 'there', 'anywhere', 'around', 'this.', 'How', 'can', 'I', 'deliver', 'the', 'public_key', 'to', 'my', 'client?', 'I', 'have', 'included', 'all', 'my', 'server', 'code', 'just', 'in', 'case.', 'Also', 'if', 'you', 'wish', 'to', 'obtain', 'all', 'server/client', 'code', 'comment', 'so', 'and', 'I', 'will', 'create', 'a', 'github', 'link.', 'Thankyou', 'Just', 'in', 'case-server', 'code', 'main.go', 'package', 'main', 'import', '(', '""fmt""', '""github.com/jonfk/golang-chat/tcp/common""', '""io""', '""log""', '""net""', '""os""', ')', 'const', '(', 'CONN_HOST', '=', '""0.0.0.0""', 'CONN_PORT', '=', '""3333""', 'CONN_TYPE', '=', '""tcp""', ')', 'var', '(', 'connections', '[]', 'net', '.', 'Conn', ')', 'func', 'main', '()', '{', 'setUP', '(', '3072', ')', 'l', ',', 'err', ':=', 'net.Listen(CONN_TYPE, CONN_HOST+"":""+CONN_PORT)', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""Error listening:"", err.Error())', 'os.Exit(1)', '}', '//', 'Close', 'the', 'listener', 'when', 'the', 'application', 'closes.', 'defer', 'l.Close()', 'fmt.Println(""Listening on "" + CONN_HOST + "":"" + CONN_PORT)', 'for', '{', '//', 'Listen', 'for', 'an', 'incoming', 'connection.', 'conn', ',', 'err', ':=', 'l.Accept()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""Error accepting: "", err.Error())', 'os.Exit(1)', '}', '//', 'Save', 'connection', 'connections', '=', 'append', '(', 'connections', ',', 'conn', ')', '//', 'Handle', 'connections', 'in', 'a', 'new', 'goroutine.', 'go', 'handleRequest', '(', 'conn', ')', '}', '}', '//', 'Handles', 'incoming', 'requests.', 'func', 'handleRequest', '(', 'conn', 'net', '.', 'Conn', ')', '{', '//', 'I', 'use', 'the', 'common', 'library', 'but', 'this', 'is', 'how', 'it', 'would', 'look', 'like', 'using', ""go's"", 'net', 'library.', 'conn.Write([]byte(public_key))', '//', 'Using', 'the', 'import', 'common', 'library', 'this', 'is', 'what', 'the', 'command', 'would', 'be', '//', 'common.WriteMsg(conn,string(public_key))', 'for', '{', 'msg', ',', 'err', ':=', 'common.ReadMsg(conn)', 'if', 'err', '!=', 'nil', '{', 'if', 'err', '==', 'io', '.', 'EOF', '{', '//', 'Close', 'the', 'connection', 'when', ""you're"", 'done', 'with', 'it.', 'removeConn', '(', 'conn', ')', 'conn.Close()', 'return', '}', 'log.Println(err)', 'return', '}', 'broadcast', '(', 'conn', ',', 'msg', ')', '}', '}', 'func', 'removeConn', '(', 'conn', 'net', '.', 'Conn', ')', '{', 'var', 'i', 'int', 'for', 'i', '=', 'range', 'connections', '{', 'if', 'connections', '[', 'i', ']', '==', 'conn', '{', 'break', '}', '}', 'connections', '=', 'append', '(', 'connections', '[:', 'i', '],', 'connections', '[', 'i', '+', '1', ':]...)', '}', 'func', 'broadcast', '(', 'conn', 'net', '.', 'Conn', ',', 'msg', 'string', ')', '{', 'for', 'i', ':=', 'range', 'connections', '{', 'if', 'connections', '[', 'i', ']', '!=', 'conn', '{', 'err', ':=', 'common.WriteMsg(connections[i], msg)', 'if', 'err', '!=', 'nil', '{', 'log.Println(err)', '}', '}', '}', '}', 'encryption.go', 'package', 'main', 'import', '(', '""crypto/md5""', '""crypto/rand""', '""crypto/rsa""', '""log""', ')', 'var', 'private_key', '*', 'rsa', '.', 'PrivateKey', 'var', 'public_key', '*', 'rsa', '.', 'PublicKey', 'var', 'encrypted', ',', 'decrypted', '[]', 'byte', 'func', 'setUP', '(', 'size', 'int', ')', 'bool', '{', 'var', 'err', 'error', 'if', 'private_key', ',', 'err', '=', 'rsa.GenerateKey(rand.Reader,size)', ';', 'err', '!=', 'nil', '{', 'log.Fatal(err)', 'return', 'false', '}', 'private_key.Precompute()', 'if', 'err', '=', 'private_key.Validate()', ';', 'err', '!=', 'nil', '{', 'log.Fatal(err)', 'return', 'false', '}', 'public_key', '=', '&', 'private_key', '.', 'PublicKey', 'return', 'true', '}', 'func', 'encrypt', '(', 'msg', 'string', ')', 'string', '{', 'var', 'err', 'error', 'var', 'label', '[]', 'byte', 'md5h', ':=', 'md5.New()', 'if', 'encrypted', ',', 'err', '=', 'rsa.EncryptOAEP(md5h,rand.Reader,public_key,[]byte(msg),label)', ';', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'return', 'string', '(', 'encrypted', ')', '}', 'func', 'decrypt', '(', 'msg', 'string', ')', 'string', '{', 'var', 'err', 'error', 'var', 'label', '[]', 'byte', 'md5h', ':=', 'md5.New()', 'if', 'decrypted', ',', 'err', '=', 'rsa.DecryptOAEP(md5h,rand.Reader,private_key,[]byte(msg),label)', ';', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'return', 'string', '(', 'decrypted', ')', '}']"
1602,38645175,"I understand the difference between arrays and slices in Go. But what I don't understand is why it is helpful to have arrays at all. Why is it helpful that an array type definition specifies a length and an element type? Why can't every ""array"" that we use be a slice?
","['I', 'understand', 'the', 'difference', 'between', 'arrays', 'and', 'slices', 'in', 'Go.', 'But', 'what', 'I', ""don't"", 'understand', 'is', 'why', 'it', 'is', 'helpful', 'to', 'have', 'arrays', 'at', 'all.', 'Why', 'is', 'it', 'helpful', 'that', 'an', 'array', 'type', 'definition', 'specifies', 'a', 'length', 'and', 'an', 'element', 'type?', 'Why', ""can't"", 'every', '""array""', 'that', 'we', 'use', 'be', 'a', 'slice?']"
1603,38669971,"


What is the best way to pass this two pointers to other packages for other handle function to call them?
","['I', 'separated', 'different', 'http.HandleFunc', 'in', 'different', 'files', 'according', 'to', 'which', 'page', 'they', 'are', 'related', 'to.', 'I', 'use', 'gorilla/sessions', 'to', 'manage', 'client', 'sessions', 'and', 'user', 'authentication', 'and', 'I', 'use', 'go-sql-driver', 'for', 'accessing', 'a', 'MySQL', 'database.', 'Project', 'Layout:', '->', '// This folder containing html, css, and js', '->', '->', '->', 'index', '.', 'go', '// Need to access database and session ', '->', '->', 'projbrwsr', '.', 'go', '// Need to access database and session', '->', 'main', '.', 'go', 'Therefore,', 'I', 'have', '1', 'pointer', 'pointing', 'to', 'the', 'go-sql-driver', 'service', 'db', ',', 'err', ':=', 'sql.Open(""mysql"", ""user:password@/dbname"")', 'and', '1', 'pointer', 'pointing', 'to', 'gorilla/sessions', 'service', 'var', 'store', '=', 'sessions.NewCookieStore([]byte(""something-very-secret""))', 'There', 'are', '2', 'methods', 'to', 'pass', 'the', 'two', 'pointers', 'to', 'other', 'packages', 'in', 'my', 'understanding:', 'Wrap', 'the', 'two', 'pointers', 'into', 'two', 'packages', '(sess,', 'db)', 'and', 'make', 'them', 'exported.', 'And,', 'the', 'package', 'that', 'requires', 'the', 'service', 'needed', 'to', 'import', 'the', 'packages', '(sess,', 'db).', 'And', 'call', 'the', 'exported', 'pointers.', '->', '// This folder containing html, css, and js', '->', '->', '->', 'index', '.', 'go', '// Need to access database and session ', '->', '->', 'projbrwsr', '.', 'go', '// Need to access database and session', '->', '->', 'sess', '.', 'go', '// Storing the database service pointer', '->', 'db', '.', 'go', '// Storing the session service pointer', '->', 'main', '.', 'go', 'Initialize', 'the', 'two', 'pointers', 'in', 'main', 'package', 'and', 'pass', 'them', 'to', 'the', 'another', 'package,', 'that', 'contain', 'the', 'page', 'handle', 'functions,', 'as', 'args.', 'Inside', 'the', 'another', 'package,', 'set', 'the', 'args', 'to', 'a', 'local', 'variable', 'so', 'we', 'can', 'call', 'it', 'locally', 'in', 'the', 'another', 'package.', '->', '// This folder containing html, css, and js', '->', '->', '->', 'index', '.', 'go', '// Need to access database and session', '//', 'Containing', 'a', 'func', 'newService(db', '*DB)', '->', '->', 'projbrwsr', '.', 'go', '// Need to access database and session', '//', 'Containing', 'a', 'func', 'newService(sess', '*CookieStore)', '->', 'main', '.', 'go', 'What', 'is', 'the', 'best', 'way', 'to', 'pass', 'this', 'two', 'pointers', 'to', 'other', 'packages', 'for', 'other', 'handle', 'function', 'to', 'call', 'them?']"
1604,38704769,"

is there a tool that can automatically do this?
","['I', 'see', 'that', 'Go', 'has', 'goimports', 'to', 'help', 'with', 'import', 'grouping,', 'but', ""I'm"", 'wondering', 'if', 'anyone', 'has', 'created', 'a', 'package', 'to', 'group', 'imports', 'in', 'groupings', 'by', 'some', 'pattern?', 'Go', 'imports', 'does', 'this', 'a', 'little', 'by', 'enforcing', 'at', 'least', 'two', 'groupings', 'stdlib', 'and', 'everything', 'else;', 'however,', 'my', 'company', 'has', 'a', 'policy', 'of', 'grouping', 'imports', 'in', '4', 'groups', 'import', '(', 'stdlib', 'current_project', 'company', 'all', 'others', ')', 'is', 'there', 'a', 'tool', 'that', 'can', 'automatically', 'do', 'this?']"
1605,38705615,"

When I build my package with go install (that builds and places the executable in bin), I'd like config.txt to be copied in that folder together with the executable. Is there a way to do so?

Sorry if I didn't find a way that may look obvious to you, but I'm new to programming, especially to Go.
","['My', '$GOPATH', 'looks', 'like', 'this:', 'src', '/', 'mypkg', '/', 'source', '.', 'go', 'config', '.', 'txt', 'bin', '/', 'mypkg', 'pkg', '/', 'somestuff', '/', 'When', 'I', 'build', 'my', 'package', 'with', 'go', 'install', '(that', 'builds', 'and', 'places', 'the', 'executable', 'in', 'bin),', ""I'd"", 'like', 'config.txt', 'to', 'be', 'copied', 'in', 'that', 'folder', 'together', 'with', 'the', 'executable.', 'Is', 'there', 'a', 'way', 'to', 'do', 'so?', 'Sorry', 'if', 'I', ""didn't"", 'find', 'a', 'way', 'that', 'may', 'look', 'obvious', 'to', 'you,', 'but', ""I'm"", 'new', 'to', 'programming,', 'especially', 'to', 'Go.']"
1606,38809347,"
","['I', 'have', 'a', 'function', 'to', 'download', 'a', 'file', 'from', 'S3.', 'It', 'works', 'but', 'does', 'not', 'recognize', 'the', 'IfModifiedSince', 'option.', 'The', 'below', 'function', 'looks', 'for', 'the', 'same', 'named', 'file', 'locally,', 'and', 'if', 'present', 'sets', 'a', 'time.Time', 'object', 'to', 'the', 'Modification', 'date', 'and', 'time.', 'That', 'is', 'then', 'used', 'in', 'the', 'request', 'to', 'S3', 'to', 'only', 'download', 'the', 'file', 'if', 'it', 'has', 'been', 'modified', 'since', 'then.', 'func', 'DownloadS3Media', '(', 'filename', 'string', ',', 'mediaDirectory', 'string', ',', 'bucket', 'string', ',', 'c', '*', 'configuration', '.', 'Configuration', ')', '(', 'dest', 'string', ',', 'bytes', 'int64', ',', 'err', 'error', ')', '{', 'os.Setenv(""AWS_ACCESS_KEY_ID"", c.AWS_ACCESS_KEY_ID)', 'os.Setenv(""AWS_SECRET_ACCESS_KEY"", c.AWS_SECRET_ACCESS_KEY)', '//', 'Create', 'the', 'directories', 'in', 'the', 'path', 'finalFilePath', ':=', 'filepath.Join(mediaDirectory, filename)', 'if', 'err1', ':=', 'os.MkdirAll(filepath.Dir(finalFilePath), 0775)', ';', 'err1', '!=', 'nil', '{', 'return', '""""', ',', '0', ',', 'err1', '}', '//', 'Create', 'the', 'blank', 'file', 'to', 'push', 'the', 'data', 'into', 'var', 't', '*', 'time', '.', 'Time', 'if', 'fi', ',', 'err2', ':=', 'os.Stat(finalFilePath)', ';', 'err2', '==', 'nil', '{', 't1', ':=', 'fi.ModTime()', 't', '=', '&', 't1', '}', 'tempFilePath', ':=', 'filepath.Join(mediaDirectory, filename + "".tmp"")', 'tempFile', ',', 'err3', ':=', 'os.Create(tempFilePath)', 'if', 'err3', '!=', 'nil', '{', 'log.Println(""Failed to create file"", err3)', 'return', 'finalFilePath', ',', '0', ',', 'err3', '}', 'defer', 'tempFile.Close()', 'logLevel', ':=', 'aws', '.', 'LogDebug', 'downloader', ':=', 's3manager.NewDownloader(session.New(&aws.Config{Region: aws.String(""us-east-1""), LogLevel:&logLevel}))', 'params', ':=', '&', 's3', '.', 'GetObjectInput', '{', 'Bucket', ':', 'aws.String(bucket)', ',', 'Key', ':', 'aws.String(filename)', ',', 'IfModifiedSince', ':', 't', '}', 'numBytes', ',', 'err4', ':=', 'downloader.Download(tempFile, params)', 'if', 'err4', '!=', 'nil', '{', 'log.Println(""Failed to download file"", err4)', 'return', 'finalFilePath', ',', '0', ',', 'err4', '}', '//', 'if', 'downloader', 'pulled', 'down', 'the', 'file,', 'rename', 'the', 'tmp', 'file', 'to', 'original.', 'if', '_', ',', 'err5', ':=', 'os.Stat(tempFilePath)', ';', 'err5', '==', 'nil', '{', 'os.Rename(tempFilePath, finalFilePath)', 'log.Println(""Renamed "", tempFilePath, ""to"", finalFilePath)', '}', 'log.Println(""Downloaded file"", filename, ""to"", finalFilePath, numBytes, ""bytes"")', 'return', 'finalFilePath', ',', 'numBytes', ',', 'nil', '}', 'When', 'debugging,', 'I', 'see', 'the', 'proper', 'value', 'for', '&t', 'which', 'is', '\ufeffsomething', 'like', 'sec:', '63606119179.', 'By', 'the', 'time', 'AWS', 'sends', 'the', 'request,', 'the', 'header', 'is', 'present', 'but', 'is', 'set', 'to', '1/1/0001.', '---[', 'REQUEST', 'POST', '-', 'SIGN', ']-----------------------------', 'GET', 'http', '://*****.', 's3', '.', 'amazonaws', '.', 'com/domenic-test.png HTTP/1.1', 'Host', ':', '*****.', 's3', '.', 'amazonaws', '.', 'com', 'User', '-', 'Agent', ':', 'aws', '-', 'sdk', '-', 'go', '/', '1', '.', '3.1 (go1.6.3; darwin; amd64)', 'S3Manager', 'Authorization', ':', 'AWS4', '-', 'HMAC', '-', 'SHA256', 'Credential', '=', '*****/', '20160806/us-east-1/s3/aws4_request,', 'SignedHeaders', '=', 'host', ';', 'if', '-', 'modified', '-', 'since', ';', 'range', ';', 'x', '-', 'amz', '-', 'content', '-', 'sha256', ';', 'x', '-', 'amz', '-', 'date', ',', 'Signature', '=', '*****', 'If', '-', 'Modified', '-', 'Since', ':', 'Mon', ',', '1', 'Jan', '0', '0', '01', '0', '0', ':', '0', '0', ':', '0', '0', 'GMT', 'Range', ':', 'bytes', '=', '0', '-', '5242879', 'X', '-', 'Amz', '-', 'Content', '-', 'Sha256', ':', '*****', 'X', '-', 'Amz', '-', 'Date', ':', '20160806', 'T223302Z']"
1607,38810507,"

I have set GOPATH in my .bash_profile and the go installation added the go root directory in /usr/local/go/bin to my PATH

Any ideas why I cannot run install from outside the directory like the instructions on the golang.org website says?
","['I', 'installed', 'Golang', 'via', 'the', 'suggestion', 'https://golang.org/doc/install', 'and', 'it', 'seems', 'I', 'cannot', 'run', 'the', 'go', 'install', 'command', 'like', 'they', 'do', 'on', 'the', 'website', 'If', 'I', 'run', 'the', 'command', 'from', 'any', 'directory', 'besides', 'the', 'directory', 'that', 'is', 'home', 'to', 'the', '.go', 'file,', 'then', 'it', 'gives', 'me', 'this', 'error.', 'for', 'example:', 'go', 'install', './', 'src/tutorial/helloworld/hello.go', 'or', 'go', 'install', './', 'path/to/.go/file/hello.go', 'go', 'install', ':', 'no', 'install', 'location', 'for', '.', 'go', 'files', 'listed', 'on', 'command', 'line', '(', 'GOBIN', 'not', 'set', ')', 'but', 'if', 'I', 'run', 'the', 'install', 'from', 'inside', 'the', 'directory', 'that', 'has', 'the', '.go', 'file', 'everything', 'goes', 'well', 'and', 'it', 'places', 'the', 'final', 'executable', 'in', 'the', 'GOPATH', 'bin', 'folder.', '//', 'In', 'the', 'folder', 'that', 'contains', 'my', '.go', 'file', 'go', 'install', 'I', 'have', 'set', 'GOPATH', 'in', 'my', '.bash_profile', 'and', 'the', 'go', 'installation', 'added', 'the', 'go', 'root', 'directory', 'in', '/usr/local/go/bin', 'to', 'my', 'PATH', 'Any', 'ideas', 'why', 'I', 'cannot', 'run', 'install', 'from', 'outside', 'the', 'directory', 'like', 'the', 'instructions', 'on', 'the', 'golang.org', 'website', 'says?']"
1608,38829469,"

Screenshot of Viewer:


","['If', 'I', ""don't"", 'use', 'a', 'filter,', 'I', 'get', 'results.', 'If', 'I', 'use', 'a', 'filter', '(this', 'record', 'definitely', 'exists),', 'I', ""don't"", 'get', 'any', 'results.', 'It', 'might', 'be', 'the', 'lack', 'of', 'an', 'index', 'defined', 'for', 'that', 'property,', 'but,', 'as', 'I', 'understand', 'it,', 'simple', 'indices', 'should', 'automatically', 'be', 'created', 'in', 'the', 'development', 'server', '(and', 'an', 'index.yaml', 'file', 'created', 'and', 'populated', 'with', 'it).', 'This', 'is', 'not', 'happening.', 'query', '=', 'datastore.NewQuery(""UserAccount"").Filter(""email ="", ""test@example.com"")', 'ua', ':=', 'UserAccount', '{}', 't', ':=', 'query.Run(ctx)', 'for', ';', ';', '{', 'if', '_', ',', 'err', '=', 't.Next(&ua)', ';', 'err', '==', 'nil', '{', 'log.Debugf(ctx, ""Current: %s"", ua)', '}', 'else', 'if', 'err', '==', 'datastore', '.', 'Done', '{', 'break', '}', 'else', '{', 'panic', '(', 'err', ')', '}', '}', 'When', 'the', 'development', 'server', 'terminates,', 'it', 'states', 'that', ""it's"", '""saving', 'search', 'indexes"":', 'INFO', '2016', '-', '0', '8', '-', '0', '8', '05', ':', '0', '9', ':', '52', ',', '894', 'api_server', '.', 'py', ':', '651', ']', 'Saving', 'search', 'indexes', 'However,', 'since', 'an', '""index.yaml""', 'file', ""doesn't"", 'appear,', ""I'm"", 'assuming', 'that', 'no', 'indices', 'needed', 'to', 'be', 'created,', 'which', 'means', 'that', 'my', 'query', 'must', ""not've"", 'had', 'the', 'desired', 'effect?', 'What', 'am', 'I', 'missing?', 'Edit:', 'Note', 'that', 'the', 'record', 'was', 'previously', 'created', 'and', 'the', 'application', 'stopped', 'and', 'started', 'many', 'times', 'since.', 'I', 'sincerely', 'doubt', 'this', 'is', 'a', 'eventual-consistency', 'thing.', 'Edit', '2:', 'For', 'the', 'purpose', 'of', 'testing,', ""I've"", 'created', 'the', 'following', 'model', 'with', 'the', 'following', 'code.', 'They', 'both', 'exhibit', 'the', 'same', 'behavior', 'as', 'my', 'original', 'model', 'and', 'code.', 'Definition:', 'type', 'TestEntity', 'struct', '{', 'Email', 'string', '}', 'Code:', 'log.Debugf(ctx, ""Putting."")', 'email', ':=', '""anothertest@a.b""', 'te', ':=', '&', 'TestEntity', '{', 'Email', ':', 'email', ',', '}', 'k', ':=', 'datastore.NewKey(ctx, ""TestEntity"", ""123"", 0, nil)', '_', ',', 'err', '=', 'datastore.Put(ctx, k, te)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'log.Debugf(ctx, ""Waiting."")', 'time.Sleep(1 * time.Second)', 'query', ':=', 'datastore.NewQuery(""TestEntity"")', 'var', 'results', '[]', 'TestEntity', '_', ',', 'err', '=', 'query.GetAll(ctx, &results)', 'log.Debugf(ctx, ""GetAll: %s"", results)', 'log.Debugf(ctx, ""Running query."")', 'query', '=', 'datastore.NewQuery(""TestEntity"").Filter(""email ="", email)', 'te', '=', '&', 'TestEntity', '{}', 't', ':=', 'query.Run(ctx)', 'for', ';', ';', '{', 'if', '_', ',', 'err', '=', 't.Next(te)', ';', 'err', '==', 'nil', '{', 'log.Debugf(ctx, ""Found: [%s]"", te.Email)', '}', 'else', 'if', 'err', '==', 'datastore', '.', 'Done', '{', 'log.Debugf(ctx, ""Done."")', 'break', '}', 'else', '{', 'panic', '(', 'err', ')', '}', '}', 'Results:', '2016/08/09', '02', ':', '11', ':', '36', 'DEBUG', ':', 'Putting', '.', '2016/08/09', '02', ':', '11', ':', '36', 'DEBUG', ':', 'Waiting', '.', '2016/08/09', '02', ':', '11', ':', '37', 'DEBUG', ':', 'GetAll', ':', '[{', 'anothertest', 'a', '.', 'b', '}]', '2016/08/09', '02', ':', '11', ':', '37', 'DEBUG', ':', 'Running', 'query', '.', '2016/08/09', '02', ':', '11', ':', '37', 'DEBUG', ':', 'Done', '.', 'Screenshot', 'of', 'Viewer:']"
1609,38839094,"

But none of these variables contained the absolute path with the www part. How can I check if a request was made from a www url? I want to figure this out so that I can redirect from www to non-www.

Is this really not even possible in Go? Some people suggested putting nginx in front of Go, but there has to be a way without nginx right? Do I really need to install and use nginx in front of Go just to do a simple redirect from www to non-www? This does not seem like a good solution to a seemingly small problem.

Is there no way to achieve this?
","['I', 'saw', 'this', 'post', 'by', 'someone', 'here', 'but', 'there', 'are', 'no', 'answers:', 'Redirecting', 'https://www.domain.com', 'to', 'https://domain.com', 'in', 'Go', 'I', 'tried', 'to', 'see', 'if', 'I', 'could', 'find', 'a', 'way', 'to', 'check', 'if', 'the', 'request', 'was', 'made', 'with', 'a', 'www', 'url', 'by', 'checking', 'the', 'variables', 'in', '*http.Request', 'variable', 'but', 'all', 'I', 'got', 'was', 'relative', 'paths', 'and', 'empty', 'strings', '"""".', 'I', 'tried', 'to', 'fmt.Println()', 'these', 'variables:', 'func', 'handleFunc', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'fmt.Println(r.URL.string())', 'fmt.Println(r.Host)', 'fmt.Println(r.RequestURI)', '}', 'But', 'none', 'of', 'these', 'variables', 'contained', 'the', 'absolute', 'path', 'with', 'the', 'www', 'part.', 'How', 'can', 'I', 'check', 'if', 'a', 'request', 'was', 'made', 'from', 'a', 'www', 'url?', 'I', 'want', 'to', 'figure', 'this', 'out', 'so', 'that', 'I', 'can', 'redirect', 'from', 'www', 'to', 'non-www.', 'Is', 'this', 'really', 'not', 'even', 'possible', 'in', 'Go?', 'Some', 'people', 'suggested', 'putting', 'nginx', 'in', 'front', 'of', 'Go,', 'but', 'there', 'has', 'to', 'be', 'a', 'way', 'without', 'nginx', 'right?', 'Do', 'I', 'really', 'need', 'to', 'install', 'and', 'use', 'nginx', 'in', 'front', 'of', 'Go', 'just', 'to', 'do', 'a', 'simple', 'redirect', 'from', 'www', 'to', 'non-www?', 'This', 'does', 'not', 'seem', 'like', 'a', 'good', 'solution', 'to', 'a', 'seemingly', 'small', 'problem.', 'Is', 'there', 'no', 'way', 'to', 'achieve', 'this?']"
1610,38866952,"

The idea is to start the Goroutine, get a hold of the cmd.stdout, wait that the cmd is started, and start processing its output.

The result is that the long command gets executed and the program waits for its completion, but nothing is printed to terminal.

Any idea why by the time scanner.Scan() is invoked for the first time the stdout has already reached EOF?
","['Streaming', 'commands', 'output', 'progress', 'question', 'addresses', 'the', 'problem', 'of', 'printing', 'progress', 'of', 'a', 'long', 'running', 'command.', 'I', 'tried', 'to', 'put', 'the', 'printing', 'code', 'within', 'a', 'goroutine', 'but', 'the', 'scanner', 'claims', 'to', 'have', 'already', 'hit', 'the', 'EOF', 'immediately', 'and', 'the', 'for', 'block', 'is', 'never', 'executed.', 'The', 'bufio.scan', 'code', 'that', 'gets', 'executed', 'on', 'the', 'first', 'execution', 'of', 'the', 'Scan()', 'method', 'is:', '//', 'We', 'cannot', 'generate', 'a', 'token', 'with', 'what', 'we', 'are', 'holding.', '//', 'If', ""we've"", 'already', 'hit', 'EOF', 'or', 'an', 'I/O', 'error,', 'we', 'are', 'done.', 'if', 's', '.', 'err', '!=', 'nil', '{', '//', 'Shut', 'it', 'down.', 's', '.', 'start', '=', '0', 's', '.', 'end', '=', '0', 'return', 'false', '}', 'And', 'if', 'I', 'print', 's.err', 'the', 'output', 'is', 'EOF.', 'The', 'code', ""I'm"", 'trying', 'to', 'run', 'is:', 'cmd', ':=', 'exec.Command(""some"", ""command"")', 'c', ':=', 'make', '(', 'chan', 'int', ',', '1', ')', 'go', 'func', '(', 'cmd', '*', 'exec', '.', 'Cmd', ',', 'c', 'chan', 'int', ')', '{', 'stdout', ',', '_', ':=', 'cmd.StdoutPipe()', '<-', 'c', 'scanner', ':=', 'bufio.NewScanner(stdout)', 'for', 'scanner.Scan()', '{', 'm', ':=', 'scanner.Text()', 'fmt.Println(m)', '}', '}(', 'cmd', ',', 'c', ')', 'cmd.Start()', 'c', '<-', '1', 'cmd.Wait()', 'The', 'idea', 'is', 'to', 'start', 'the', 'Goroutine,', 'get', 'a', 'hold', 'of', 'the', 'cmd.stdout,', 'wait', 'that', 'the', 'cmd', 'is', 'started,', 'and', 'start', 'processing', 'its', 'output.', 'The', 'result', 'is', 'that', 'the', 'long', 'command', 'gets', 'executed', 'and', 'the', 'program', 'waits', 'for', 'its', 'completion,', 'but', 'nothing', 'is', 'printed', 'to', 'terminal.', 'Any', 'idea', 'why', 'by', 'the', 'time', 'scanner.Scan()', 'is', 'invoked', 'for', 'the', 'first', 'time', 'the', 'stdout', 'has', 'already', 'reached', 'EOF?']"
1611,38892436,"
","['I', 'have', 'the', 'following', 'query:', ""db.getCollection('spawnlocations')"", '.', 'find', '({', ""'location'"", ':', '{', ""'$geoWithin'"", ':', '{', ""'$center'"", ':', '[[-', '73', '.', '94075', ',', '40', '.', '789138', '],', '5000', ']', '}', '},', '""expirationtimems""', ':', '{', '""$gte""', ':', '1234567890', '},', '""_id""', ':', '{', '""$gte""', ':', '""2a920240836c40d8b374203a798a27fa.16""', '}', '}).', 'sort', '({', '""_id""', ':', '1', '}).', 'limit', '(', '50', ')', 'I', 'am', 'trying', 'to', 'convert', 'the', 'query', 'to', 'mgo', 'using', 'bson.M', 'but', ""I'm"", 'having', 'a', 'hard', 'time', 'with', 'the', 'array', 'part', 'of', 'it.', 'I', 'thought', 'this', 'would', 'work,', 'but', 'of', 'course', 'it', ""doesn't"", 'q', '=', 'bson', '.', 'M', '{', '""location""', ':', 'bson', '.', 'M', '{', '""$geoWithin""', ':', 'bson', '.', 'M', '{', '""$center""', ':', '[', 'j', '.', 'Location', '.', 'Coordinates', ',', '5000', '],', '},', '},', '""expirationtimems""', ':', 'bson', '.', 'M', '{', '""$gte""', ':', 'time.Now().Unix()', '*', '1000', ',', '},', '""_id""', ':', 'bson', '.', 'M', '{', '""$gt""', ':', 'p', ',', '},', '}']"
1612,38923237,"
","['I', 'try', 'to', 'make', 'a', 'program', 'in', 'Go', 'to', 'find', 'some', 'genes', 'in', 'very', 'large', 'files', 'of', 'DNA', 'sequences.', 'I', 'already', 'made', 'a', 'Perl', 'program', 'to', 'do', 'that', 'but', 'I', 'would', 'like', 'to', 'take', 'advantage', 'of', 'the', 'goroutines', 'to', 'perform', 'this', 'search', 'in', 'parallel', ';)', 'Because', 'the', 'files', 'are', 'huge,', 'my', 'idea', 'was', 'to', 'read', '100', 'sequences', 'at', 'a', 'time,', 'then', 'send', 'the', 'analysis', 'to', 'a', 'goroutine,', 'and', 'read', 'again', '100', 'sequences', 'etc.', 'I', 'would', 'like', 'to', 'thank', 'the', 'member', 'of', 'this', 'site', 'for', 'their', 'really', 'helpful', 'explanations', 'concerning', 'slices', 'and', 'goroutines.', 'I', 'have', 'made', 'the', 'suggested', 'change,', 'to', 'use', 'a', 'copy', 'of', 'the', 'slice', 'processed', 'by', 'the', 'goroutines.', 'But', 'the', '-race', 'execution', 'still', 'detect', 'one', 'data', 'race', 'at', 'the', 'level', 'of', 'the', 'copy()', 'function', ':', 'Thank', 'you', 'very', 'much', 'for', 'your', 'comments', '!', '==================', 'WARNING', ':', 'DATA', 'RACE', 'Read', 'by', 'go', 'routine', '6', ':', 'runtime.slicecopy()', '/usr/lib/go-1.6/src/runtime/slice.go:113', '+', '0', 'x0', 'main', '.', 'main.func1()', 'test_chan006', '.', 'go', ':', '71', '+', '0xd8', 'Previous', 'write', 'by', 'main', 'go', 'routine', ':', 'main.main()', 'test_chan006', '.', 'go', ':', '63', '+', '0x3b7', 'Goroutine', '6', '(', 'running', ')', 'created', 'at', ':', 'main.main()', 'test_chan006', '.', 'go', ':', '73', '+', '0x4c9', '==================', '[>', '5', 'HSAA098909', 'BA098909', '...]', 'Found', '1', 'data', 'race', '(', 's', ')', 'exit', 'status', '66', 'line', '71', 'is', ':', 'copy', '(', 'bufCopy', ',', 'buf_Seq', ')', 'line', '63', 'is', ':', 'buf_Seq', '=', 'append', '(', 'buf_Seq', ',', 'line', ')', 'line', '73', 'is', ':}(', 'genes', ',', 'buf_Seq', ')', 'package', 'main', 'import', '(', '""bufio""', '""fmt""', '""os""', '""github.com/mathpl/golang-pkg-pcre/src/pkg/pcre""', '""sync""', ')', '//', 'function', 'read', 'a', 'list', 'of', 'genes', 'and', 'return', 'a', 'slice', 'of', 'gene', 'names', 'func', 'read_genes', '(', 'filename', 'string', ')', '[]', 'string', '{', 'var', 'genes', '[]', 'string', '// slice of genes names', '//', 'Open', 'the', 'file.', 'f', ',', '_', ':=', 'os.Open(filename)', '//', 'Create', 'a', 'new', 'Scanner', 'for', 'the', 'file.', 'scanner', ':=', 'bufio.NewScanner(f)', '//', 'Loop', 'over', 'all', 'lines', 'in', 'the', 'file', 'and', 'print', 'them.', 'for', 'scanner.Scan()', '{', 'line', ':=', 'scanner.Text()', 'genes', '=', 'append', '(', 'genes', ',', 'line', ')', '}', 'return', 'genes', '}', '//', 'function', 'find', 'the', 'sequences', 'with', 'a', 'gene', 'matching', 'gene[]', 'slice', 'func', 'search_gene2', '(', 'genes', '[]', 'string', ',', 'seqs', '[]', 'string', ')', '([]', 'string', ')', '{', 'var', 'res', '[]', 'string', 'for', 'r', ':=', '0', ';', 'r', '<=', 'len', '(', 'seqs', ')', '-', '1', ';', 'r', '++', '{', 'for', 'i', ':=', '0', ';', 'i', '<=', 'len', '(', 'genes', ')', '-', '1', ';', 'i', '++', '{', 'match', ':=', 'pcre.MustCompile(genes[i], 0).MatcherString(seqs[r], 0)', 'if', '(', 'match.Matches() == true)', '{', 'res', '=', 'append', '(', 'res', ',', 'seqs', '[', 'r', '])', '// is the gene matches the gene name is append to res', 'break', '}', '}', '}', 'return', 'res', '}', '//', '###########################################', 'func', 'main', '()', '{', 'var', 'slice', '[]', 'string', 'var', 'buf_Seq', '[]', 'string', 'read_buff', ':=', '100', '// the number of sequences analysed by one goroutine', 'var', 'wg', 'sync', '.', 'WaitGroup', 'queue', ':=', 'make', '(', 'chan', '[]', 'string', ',', '100', ')', 'filename', ':=', '""fasta/sequences.tsv""', 'f', ',', '_', ':=', 'os.Open(filename)', 'scanner', ':=', 'bufio.NewScanner(f)', 'n', ':=', '0', 'genes', ':=', 'read_genes', '(', '""lists/genes.csv""', ')', 'for', 'scanner.Scan()', '{', 'line', ':=', 'scanner.Text()', 'n', '+=', '1', 'buf_Seq', '=', 'append', '(', 'buf_Seq', ',', 'line', ')', '// store the sequences into buf_Seq', 'if', 'n', '==', 'read_buff', '{', '// when the read buffer contains 100 sequences one goroutine analyses them', 'wg.Add(1)', 'go', 'func', '(', 'genes', ',', 'buf_Seq', '[]', 'string', ')', '{', 'defer', 'wg.Done()', 'bufCopy', ':=', 'make', '([]', 'string', ',', 'len', '(', 'buf_Seq', '))', 'copy', '(', 'bufCopy', ',', 'buf_Seq', ')', 'queue', '<-', 'search_gene2', '(', 'genes', ',', 'bufCopy', ')', '}(', 'genes', ',', 'buf_Seq', ')', 'buf_Seq', '=', 'buf_Seq', '[:', '0', ']', '// reset buf_Seq', 'n', '=', '0', '// reset the sequences counter', '}', '}', 'go', 'func', '()', '{', 'wg.Wait()', 'close', '(', 'queue', ')', '}()', 'for', 't', ':=', 'range', 'queue', '{', 'slice', '=', 'append', '(', 'slice', ',', 't', '...)', '}', 'fmt.Println(slice)', '}']"
1613,38933957,"
","['I', 'want', 'to', 'deploy', 'Go', 'application', 'on', 'Heroku,', 'but', 'I', 'got', 'an', 'error', 'like', 'this:', 'remote', ':', '----->', 'Go', 'app', 'detected', 'remote', ':', '----->', 'Checking', 'Godeps/Godeps.json', 'file', '.', 'remote', ':', '----->', 'Using', 'go', '1', '.', '6', '.', '3', 'remote', ':', '!!', 'Installing', 'package', ""'.'"", '(', 'default', ')', 'remote', ':', '!!', 'remote', ':', '!!', 'remote', ':', '----->', 'Running', ':', 'go', 'install', '-', 'v', '-', 'tags', 'heroku', '.', 'remote', ':', 'main', '.', 'go', ':', '9', ':', '2', ':', 'cannot', 'find', 'package', '""github.com/go-martini/martini""', 'in', 'any', 'of', ':', 'remote', ':', '/app/tmp/cache/go1.6.3/go/src/github.com/go-martini/martini', '(', 'from', '$', 'GOROOT', ')', 'remote', ':', '/tmp/build_3c0222e075a91a3363e590a0169d6fb6/.heroku/go/src/github.com/go-martini/martini', '(', 'from', '$', 'GOPATH', ')', 'It', 'works', 'on', 'my', 'local', 'environment', 'and', 'I', 'added', 'dependencies', 'to', 'Godeps/Godeps.json', 'with', 'godeps', 'save', 'command.', ""What's"", 'the', 'problem?', 'I', 'noticed', 'official', 'go-getting-started', 'repo', 'has', 'vendor', 'folder,', 'so', 'does', 'it', 'mean', 'I', 'have', 'to', 'have', 'all', 'dependencies', 'into', 'my', 'repository?', 'This', 'is', 'my', 'Godeps/Godeps.json:', '{', '""ImportPath""', ':', '""github.com/mikamikuh/oauth2-server-tester""', ',', '""GoVersion""', ':', '""go1.6""', ',', '""GodepVersion""', ':', '""v74""', ',', '""Deps""', ':', '[', '{', '""ImportPath""', ':', '""github.com/codegangsta/inject""', ',', '""Comment""', ':', '""v1.0-rc1-10-g33e0aa1""', ',', '""Rev""', ':', '""33e0aa1cb7c019ccc3fbe049a8262a6403d30504""', '},', '{', '""ImportPath""', ':', '""github.com/go-martini/martini""', ',', '""Comment""', ':', '""v1.0-185-gc257c41""', ',', '""Rev""', ':', '""c257c412d547ac70fcaf5596c1a50a7cb832c1fc""', '}', ']', '}']"
1614,38942171,"

Changing runtime to python27 gets rid of the library error, but obviously then my go code doesn't work.

Any ideas how to get TLS 1.2 enabled, both with the dev appserver and production?
","[""I'm"", 'writing', 'a', 'go', 'appengine', 'app,', 'which', 'needs', 'to', 'fetch', 'a', 'page', 'from', 'Stripe.', 'Basically', ""I'm"", 'using', 'these', 'instructions', 'that', 'come', 'with', 'the', 'official', 'Stripe', 'API.', 'However,', 'when', 'I', 'run', 'this', 'with', 'dev_appserver.py,', 'I', 'get:', '2016/08/14 12:03:15 Requesting POST api.stripe.com/v1/customers', '2016/08/14 12:03:18 Error encountered from Stripe: {""type"":""invalid_request_error"",""message"":""Stripe no longer supports API requests made with TLS 1.0. Please initiate HTTPS connections with TLS 1.2 or later. You can learn more about this at https://stripe.com/blog/upgrading-tls."",""request_id"":""req_90O6reF1Mwi9yZ"",""status"":401}', 'I', 'found', 'that', 'Python', 'AppEngine', 'apps', 'can', 'specify', 'the', 'SSL', 'library', 'to', 'use', 'in', 'my', 'app.yaml', '(see', 'SSL', 'support).', 'However,', 'if', 'I', 'add', 'a', 'libraries', 'section', 'to', 'my', 'app.yaml', 'file,', 'I', 'get:', '$', '(', 'go', '_appengine/dev_appserver.py', 'app', ')', 'Traceback', '(', 'most', 'recent', 'call', 'last', '):', 'File', '""go_appengine/dev_appserver.py""', ',', 'line', '89', ',', 'in', '_run_file', '(', '__file__', ',', 'globals', '())', 'File', '""go_appengine/dev_appserver.py""', ',', 'line', '85', ',', 'in', '_run_file', 'execfile', '(', '_PATHS.script_file(script_name), globals_)', 'File', '""/Users/kchodorow/gitroot/tt/go_appengine/google/appengine/tools/devappserver2/devappserver2.py""', ',', 'line', '1040', ',', 'in', 'main', '()', 'File', '""/Users/kchodorow/gitroot/tt/go_appengine/google/appengine/tools/devappserver2/devappserver2.py""', ',', 'line', '1033', ',', 'in', 'main', 'dev_server.start(options)', 'File', '""/Users/kchodorow/gitroot/tt/go_appengine/google/appengine/tools/devappserver2/devappserver2.py""', ',', 'line', '758', ',', 'in', 'start', 'options', '.', 'config_paths', ',', 'options', '.', 'app_id', ')', 'File', '""/Users/kchodorow/gitroot/tt/go_appengine/google/appengine/tools/devappserver2/application_configuration.py""', ',', 'line', '831', ',', 'in', '__init__', 'module_configuration', '=', 'ModuleConfiguration', '(', 'config_path', ',', 'app_id', ')', 'File', '""/Users/kchodorow/gitroot/tt/go_appengine/google/appengine/tools/devappserver2/application_configuration.py""', ',', 'line', '127', ',', 'in', '__init__', 'self', '.', '_config_path', ')', 'File', '""/Users/kchodorow/gitroot/tt/go_appengine/google/appengine/tools/devappserver2/application_configuration.py""', ',', 'line', '424', ',', 'in', '_parse_configuration', 'config', ',', 'files', '=', 'appinfo_includes.ParseAndReturnIncludePaths(f)', 'File', '""/Users/kchodorow/gitroot/tt/go_appengine/google/appengine/api/appinfo_includes.py""', ',', 'line', '82', ',', 'in', 'ParseAndReturnIncludePaths', 'appyaml', '=', 'appinfo.LoadSingleAppInfo(appinfo_file)', 'File', '""/Users/kchodorow/gitroot/tt/go_appengine/google/appengine/api/appinfo.py""', ',', 'line', '2191', ',', 'in', 'LoadSingleAppInfo', 'listener.Parse(app_info)', 'File', '""/Users/kchodorow/gitroot/tt/go_appengine/google/appengine/api/yaml_listener.py""', ',', 'line', '227', ',', 'in', 'Parse', 'self._HandleEvents(self._GenerateEventParameters(stream, loader_class))', 'File', '""/Users/kchodorow/gitroot/tt/go_appengine/google/appengine/api/yaml_listener.py""', ',', 'line', '178', ',', 'in', '_HandleEvents', 'raise', 'yaml_errors.EventError(e, event_object)', 'go', 'ogle', '.', 'appengine', '.', 'api', '.', 'yaml_errors', '.', 'EventError', ':', 'libraries', 'entries', 'are', 'only', 'supported', 'by', 'the', '""python27""', 'runtime', 'in', '""app/app.yaml""', ',', 'line', '25', ',', 'column', '1', 'Which', 'makes', 'sense,', 'because', ""I'm"", 'not', 'using', 'Python.', 'I', 'really', 'need', 'a', 'way', 'to', 'set', 'this', 'for', 'Go.', 'My', 'app.yaml', 'file', 'looks', 'like:', 'application', ':', 'app', '-', 'name', 'version', ':', 'alpha', '-', '0', '01', 'runtime', ':', 'go', 'api_version', ':', 'go', '1', 'handlers', ':', '...', 'Changing', 'runtime', 'to', 'python27', 'gets', 'rid', 'of', 'the', 'library', 'error,', 'but', 'obviously', 'then', 'my', 'go', 'code', ""doesn't"", 'work.', 'Any', 'ideas', 'how', 'to', 'get', 'TLS', '1.2', 'enabled,', 'both', 'with', 'the', 'dev', 'appserver', 'and', 'production?']"
1615,38957169,"

Question: Is there a better, more idiomatic way to map incoming integer values to protoc-generated constants?

In particular, I would like to avoid listing all constants explicitly in the case A, B, C, D statement.
","['I', 'have', 'an', 'enum', 'in', 'a', 'proto', 'file', 'that', 'generates', 'to', 'integer', 'constants', 'in', 'the', 'pb.go', 'file.', 'I', 'now', 'have', 'some', 'integers', 'coming', 'from', 'the', 'an', 'external', 'data', 'source', 'and', 'want', 'to', 'safely', 'map', 'them', 'to', 'the', 'possible', 'constants.', 'Here', 'is', 'what', 'I', 'currently', 'have:', 'https://play.golang.org/p/-5VZqPbukd', 'package', 'main', 'import', '(', '""errors""', '""fmt""', ')', '//', 'enum', 'in', 'the', 'proto', 'file', '//', '//', 'enum', 'X', '{', '//', 'A', '=', '0;', '//', 'B', '=', '1;', '//', 'C', '=', '2;', '//', 'D', '=', '3;', '//', '}', '//', 'enum', 'type', 'generated', 'by', 'protoc', 'type', 'X', 'int32', '//', 'enum', 'constants', 'generated', 'by', 'protoc', 'const', '(', 'X_A', 'X', '=', '0', 'X_B', 'X', '=', '1', 'X_C', 'X', '=', '2', 'X_D', 'X', '=', '3', ')', 'func', 'intToX', '(', 'v', 'int', ')', '(', 'X', ',', 'error', ')', '{', 'x', ':=', 'X', '(', 'v', ')', 'switch', 'x', '{', 'case', 'X_A', ',', 'X_B', ',', 'X_C', ',', 'X_D', ':', 'return', 'x', ',', 'nil', '}', 'return', '0', ',', 'errors.New(""could not convert int to X"")', '}', 'func', 'main', '()', '{', 'for', 'i', ':=', '-', '1', ';', 'i', '<', '10', ';', 'i', '++', '{', 'if', 'x', ',', 'err', ':=', 'intToX', '(', 'i', ');', 'err', '!=', 'nil', '{', 'fmt.Println(""unhandled error:"", err, ""for input value"", i)', '}', 'else', '{', 'fmt.Printf(""%d => X(%d)\\n"", i, x)', '}', '}', '}', 'Question:', 'Is', 'there', 'a', 'better,', 'more', 'idiomatic', 'way', 'to', 'map', 'incoming', 'integer', 'values', 'to', 'protoc-generated', 'constants?', 'In', 'particular,', 'I', 'would', 'like', 'to', 'avoid', 'listing', 'all', 'constants', 'explicitly', 'in', 'the', 'case', 'A,', 'B,', 'C,', 'D', 'statement.']"
1616,39027998,"
","['I', 'have', 'the', 'following', 'snippet', 'which', 'recovers', 'from', 'index', 'out', 'of', 'range', 'panics', 'Playground,', 'also', 'pasted', 'below', 'The', 'error', 'is', 'nil', 'when', 'called', 'from', 'main', 'but', 'not', 'nil', 'in', 'an', 'equivalent', 'test', 'case.', ""What's"", 'the', 'difference', '?', 'type', 'Foo', 'struct', '{', 'Is', '[]', 'int', '}', 'func', 'main', '()', '{', 'fp', ':=', '&', 'Foo', '{}', 'if', 'err', ':=', 'fp.Panic()', ';', 'err', '!=', 'nil', '{', 'fmt.Errorf(""Error: %v"", err)', '}', 'fmt.Println(""ok"")', '}', 'func', '(', 'fp', '*', 'Foo', ')', 'Panic', '()', '(', 'err', 'error', ')', '{', 'defer', 'PanicRecovery', '(&', 'err', ')', 'fp', '.', 'Is', '[', '0', ']', '=', '5', 'return', 'nil', '}', 'func', 'PanicRecovery', '(', 'err', '*', 'error', ')', '{', 'if', 'r', ':=', 'recover', '();', 'r', '!=', 'nil', '{', 'if', '_', ',', 'ok', ':=', 'r', '.(', 'runtime', '.', 'Error', ');', 'ok', '{', '//', 'fmt.Println(""Panicing"")', '*', 'err', '=', 'r', '.(', 'error', ')', '//panic(r)', '}', 'else', '{', '*', 'err', '=', 'r', '.(', 'error', ')', '}', '}', '}', 'Test', 'case:', 'func', 'TestPanic', '(', 't', '*', 'testing', '.', 'T', ')', '{', 'fp', ':=', '&', 'Foo', '{}', 'if', 'err', ':=', 'fp.Panic()', ';', 'err', '!=', 'nil', '{', 't.Errorf(""Panic: %v"", err)', '}', '}']"
1617,39082404,"

Any suggestions are welcome...
","['I', 'am', 'using', 'the', 'gopacket', 'package', 'and', 'every', 'time', 'I', 'have', 'a', 'TCP', 'packet', 'I', 'want', 'to', 'check', 'if', 'the', 'payload', 'contains', 'an', 'HTTP', 'request.', 'Is', 'there', 'an', 'easy', 'way', 'to', 'do', 'that', 'instead', 'of', 'writing', 'my', 'own', 'parser?', 'There', 'is', 'also', 'a', 'function', '(see:', 'func', 'ReadRequest(b', '*bufio.Reader))', 'which', 'returns', 'a', 'Request', 'struct', 'but', 'I', 'do', 'not', 'know', 'what', 'kind', 'of', 'input', 'I', 'should', 'use.', 'tcp.Payload', 'is', 'the', 'byte[]', 'array', 'that', 'seems', 'to', 'have', 'the', 'information', 'I', 'need', 'to', 'parse', '(see', 'the', 'following', 'example):', '//', 'Get', 'the', 'TCP', 'layer', 'from', 'this', 'packet', 'if', 'tcpLayer', ':=', 'packet.Layer(layers.LayerTypeTCP)', ';', 'tcpLayer', '!=', 'nil', '{', 'fmt.Printf(""TCP "")', '//', 'Get', 'actual', 'TCP', 'data', 'from', 'this', 'layer', 'tcp', ',', '_', ':=', 'tcpLayer', '.(*', 'layers', '.', 'TCP', ')', 'srcPort', '=', 'tcp', '.', 'SrcPort', 'dstPort', '=', 'tcp', '.', 'DstPort', 'if', 'tcp', '.', 'SYN', '{', 'fmt.Print(""[SYN] "")', '}', 'if', 'tcp', '.', 'ACK', '{', 'fmt.Print(""[ACK] "")', '}', 'if', 'tcp', '.', 'FIN', '{', 'fmt.Print(""[FIN] "")', '}', 'fmt.Printf(""%s:%d > %s:%d "", srcIP, srcPort, dstIP, dstPort)', 'fmt.Println(string(tcp.Payload))', '}', 'After', 'sending', 'an', 'HTTP', 'request', 'I', 'get', 'the', 'following', 'output:', 'PKT', '[', '0', '01', ']', 'TCP', '[', 'SYN', ']', '192', '.', '168', '.', '2', '.', '6', ':', '59095', '>', '192', '.', '168', '.', '3', '.', '5', ':', '80', 'PKT', '[', '0', '02', ']', 'TCP', '[', 'SYN', ']', '[', 'ACK', ']', '192', '.', '168', '.', '3', '.', '5', ':', '80', '>', '192', '.', '168', '.', '2', '.', '6', ':', '59095', 'PKT', '[', '0', '03', ']', 'TCP', '[', 'ACK', ']', '192', '.', '168', '.', '2', '.', '6', ':', '59095', '>', '192', '.', '168', '.', '3', '.', '5', ':', '80', 'PKT', '[', '0', '04', ']', 'TCP', '[', 'ACK', ']', '192', '.', '168', '.', '2', '.', '6', ':', '59095', '>', '192', '.', '168', '.', '3', '.', '5', ':', '80', 'GET', '/certificates/test.pdf HTTP/1.1', 'User', '-', 'Agent', ':', 'Wget/1.15', '(', 'linux', '-', 'gnu', ')', 'Accept', ':', '*/*', 'Host', ':', '192', '.', '168', '.', '3', '.', '5', 'Connection', ':', 'Keep', '-', 'Alive', 'Any', 'suggestions', 'are', 'welcome...']"
1618,39130593,"
","['I', 'am', 'trying', 'to', 'create', 'a', 'generic', 'Binary', 'Tree', 'in', 'Golang.', 'How', 'can', 'I', 'compare', 'data', 'from', 'an', 'interface', 'and', 'input', 'data', 'in', 'the', 'code?', 'Here', 'is', 'an', 'example', 'of', 'what', 'I', 'am', 'trying', 'to', 'do.', 'The', 'comparison', 'that', 'is', 'giving', 'me', 'trouble', 'is', 'this', '}', 'else', 'if', 'cur', '.', 'data', '<', 'data', '{', '-', 'package', 'DSAA', 'type', 'TreeNode', 'struct', '{', 'data', 'interface', '{}', 'right', '*', 'TreeNode', 'left', '*', 'TreeNode', '}', 'type', 'BinarySearchTree', 'struct', '{', 'root', '*', 'TreeNode', '}', 'func', 'BSTCreate', '()', '*', 'BinarySearchTree', '{', 'return', '&', 'BinarySearchTree', '{', 'nil', '}', '}', 'func', '(', 'b', '*', 'BinarySearchTree', ')', 'Insert', '(', 'cur', 'TreeNode', ',', 'data', 'interface', '{})', '*', 'BinarySearchTree', '{', 'if', '&', 'cur', '==', 'nil', '{', 'cur', ':=', '&', 'TreeNode', '{', 'data', ',', 'nil', ',', 'nil', '}', '}', 'else', 'if', 'cur', '.', 'data', '<', 'data', '{', 'b', '=', 'b.Insert(*cur.left, data)', '}', 'else', '{', 'b', '=', 'b.Insert(*cur.right, data)', '}', 'return', 'b', '}']"
1619,39131886,"

Right now I have to copy/paste this func to every model file, changing only method receiver. Can this be avoided?
","['I', 'have', 'a', 'gin-gonic', 'web', 'app', 'with', 'somewhat', 'MVC', 'architecture.', 'I', 'created', 'a', 'couple', 'of', 'models,', 'all', 'of', 'them', 'embed', 'one', 'common', 'struct:', 'type', 'User', 'struct', '{', 'ID', 'int', 'Name', 'string', '}', 'type', 'Admin', 'struct', '{', 'User', 'Level', 'int', '}', '...', '{', 'User', '}', 'Now', 'I', 'want', 'to', 'store', 'them', 'in', 'database', 'in', 'json', 'format.', 'The', 'goal', 'I', 'want', 'to', 'accomplish', 'is', 'to', 'code', 'only', 'one', 'function/method', 'that', 'will', 'marshal', 'any', 'model', 'and', 'will', 'save', 'save', 'it', 'into', 'DB.', 'This', 'method', 'must', 'marshal', 'all', 'the', 'fields', 'of', 'current', 'model,', 'not', 'only', 'from', 'User', 'struct,', 'e.g.', 'User', 'must', 'be', 'marshaled', 'into', '{', 'id', ':', '1', ',', 'name', ':', '""zhora""', '}', ',', 'while', 'Admin', 'will', 'go', 'into', '{', 'id', ':', '1', ',', 'name', ':', '""gena""', ',', 'level', ':', '2', '}', '.', 'Like', 'this', 'one:', 'func', '(', 'i', '*', 'User', ')', 'Save', '()', '{', 'data', ',', 'err', ':=', 'json.Marshal(i)', 'check', '(', 'err', ')', 'if', 'i', '.', 'ID', '==', '0', '{', '_', ',', 'err', '=', 'app', '.', 'DB.Exec(`INSERT INTO users(data) VALUES ($1) `, string(data))', '}', 'else', '{', '_', ',', 'err', '=', 'app', '.', 'DB.Exec(`UPDATE users SET data = $1 WHERE id=$2`, string(data), i.ID)', '}', 'check', '(', 'err', ')', '}', 'Right', 'now', 'I', 'have', 'to', 'copy/paste', 'this', 'func', 'to', 'every', 'model', 'file,', 'changing', 'only', 'method', 'receiver.', 'Can', 'this', 'be', 'avoided?']"
1620,39132629,"I'm looking to do some kind of debugging on windows where the state of the service appears to be a deadlock.  Perhaps the approach would be to do a dump.  How can you do a program dump of a Go service?  And then analyze that dump?
","[""I'm"", 'looking', 'to', 'do', 'some', 'kind', 'of', 'debugging', 'on', 'windows', 'where', 'the', 'state', 'of', 'the', 'service', 'appears', 'to', 'be', 'a', 'deadlock.', 'Perhaps', 'the', 'approach', 'would', 'be', 'to', 'do', 'a', 'dump.', 'How', 'can', 'you', 'do', 'a', 'program', 'dump', 'of', 'a', 'Go', 'service?', 'And', 'then', 'analyze', 'that', 'dump?']"
1621,39143091,"

It seems that compiler is theoretically able to operate such expression, because it knows that Big type has Small type embedded at offset 0. Is there any way to do such things (maybe with unsafe.Pointer)?
","['I', 'have', 'some', 'different', 'structs', 'like', 'Big', 'with', 'Small', 'embedded', 'at', 'offset', '0.', 'How', 'can', 'I', 'access', ""Small's"", 'structure', 'fields', 'from', 'code,', 'that', ""doesn't"", 'know', 'anything', 'about', 'Big', 'type,', 'but', 'it', 'is', 'known', 'that', 'Small', 'is', 'at', 'offset', '0?', 'type', 'Small', 'struct', '{', 'val', 'int', '}', 'type', 'Big', 'struct', '{', 'Small', 'bigval', 'int', '}', 'var', 'v', 'interface', '{}', '=', 'Big', '{}', '//', 'here', 'i', 'only', 'know', 'about', ""'Small'"", 'struct', 'and', 'i', 'know', 'that', 'it', 'is', 'at', 'the', 'begining', 'of', 'variable', 'v', '.(', 'Small', ').', 'val', '// compile error', 'It', 'seems', 'that', 'compiler', 'is', 'theoretically', 'able', 'to', 'operate', 'such', 'expression,', 'because', 'it', 'knows', 'that', 'Big', 'type', 'has', 'Small', 'type', 'embedded', 'at', 'offset', '0.', 'Is', 'there', 'any', 'way', 'to', 'do', 'such', 'things', '(maybe', 'with', 'unsafe.Pointer)?']"
1622,39151674,"

Is this not the correct way to create a digest in Go? Can someone explain what is going on here?
","['Golang', 'playground', 'link', 'given', 'in', 'a', 'SO', 'question', 'uses', 'the', 'sha256', 'lib', 'of', 'Go', 'gives', 'a', 'different', 'result', 'than', 'running', 'the', 'following', 'command', 'in', 'Ubuntu', 'linux.', 'echo', '""sha1 this string""', '|', 'sha256sum', ""Go's"", 'result:', 'fceab3bb749b11a43b89f21ccd28e3f5d8b38d5b23eeea960fc169ab482ee2cd', 'Linux', 'result:', '62', 'd44fd0392ed998179bfd4a162141d7000d1f9aa4fae26465e2e4f57d3a420e', 'Is', 'this', 'not', 'the', 'correct', 'way', 'to', 'create', 'a', 'digest', 'in', 'Go?', 'Can', 'someone', 'explain', 'what', 'is', 'going', 'on', 'here?']"
1623,39160807,"
","['How', 'to', 'set', 'default', 'value', 'for', 'Encoding', 'as', '""base64""?', 'type', 'FileData', 'struct', '{', 'UID', 'string', 'json', ':', '""uid""', 'Size', 'int', 'json', ':', '""size""', 'Content', 'string', 'json', ':', 'content', 'Encoding', 'string', 'json', ':', 'encoding', 'User', 'string', 'json', ':', '""user""', '}', 'I', 'tried', 'Encoding', 'string', 'json', ':', 'encoding', '=', '""base64""', '// Not working']"
1624,39189731,"I searched many sites and I saw a lot of sources in github and i haven't solution.

I created mvc website pattern in Golang:


app


controllers
models
lib (All the features class/functions)
middleware
router.go

resources


views

main.go


My question is: How to inject config to have everywhere settings and other implemented class that will always be needed (like load speed single page)

One more thing(additionally): Can anyone recommend me a good material or transcribe MVC tricks idea works MVC with golang (General useful information)
","['I', 'searched', 'many', 'sites', 'and', 'I', 'saw', 'a', 'lot', 'of', 'sources', 'in', 'github', 'and', 'i', ""haven't"", 'solution.', 'I', 'created', 'mvc', 'website', 'pattern', 'in', 'Golang:', 'app', 'controllers', 'models', 'lib', '(All', 'the', 'features', 'class/functions)', 'middleware', 'router.go', 'resources', 'views', 'main.go', 'My', 'question', 'is:', 'How', 'to', 'inject', 'config', 'to', 'have', 'everywhere', 'settings', 'and', 'other', 'implemented', 'class', 'that', 'will', 'always', 'be', 'needed', '(like', 'load', 'speed', 'single', 'page)', 'One', 'more', 'thing(additionally):', 'Can', 'anyone', 'recommend', 'me', 'a', 'good', 'material', 'or', 'transcribe', 'MVC', 'tricks', 'idea', 'works', 'MVC', 'with', 'golang', '(General', 'useful', 'information)']"
1625,39239977,"
","['req', 'is', 'a', 'interface{}', 'and', 'PostAccountRequest,CreateAccountRequest', 'is', 'struct,', 'when', 'I', 'do', 'this,', 'I', 'get', 'cannot', 'assign', '*', 'account', '.', 'PostAccountRequest', 'to', 'v', '(', 'type', '*', 'account', '.', 'CreateAccountRequest', ')', 'in', 'multiple', 'assignment', 'v', ',', 'ok', ':=', 'req', '.(*', 'account', '.', 'CreateAccountRequest', ')', 'if', 'ok', '{', 'if', 'v', ',', 'ok', '=', 'req', '.(*', 'account', '.', 'PostAccountRequest', ');', 'ok', '{', 'panic', '(', 'ok', ')', '}', '}']"
1626,39260647,"

Obviously a regexp could first check for this format and transform the + to a -, but that implies the standard library cant parse this date.
","[""It's"", 'not', 'clear', 'to', 'me', 'from', 'the', 'documentation', 'how', 'I', 'would', 'parse', 'a', 'date', 'in', 'this', 'somewhat', 'strange', 'format.', 'It', 'seems', 'like', 'it', 'might', 'not', 'be', 'possible.', '2016', '-', '07', '-', '0', '8', 'T08', ':', '34', ':', '24', '+', '0', '0', ':', '0', '0', 'The', 'following', 'does', 'not', 'work', '(go', 'play', 'link)', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 'date', ':=', '""2016-07-08T08:34:24+00:00""', 'd', ',', 'err', ':=', 'time.Parse(""2006-01-02T15:04:05+07:00"", date)', 'if', 'err', '==', 'nil', '{', 'fmt.Println(d)', '}', 'else', '{', 'fmt.Println(err)', '}', '}', 'Obviously', 'a', 'regexp', 'could', 'first', 'check', 'for', 'this', 'format', 'and', 'transform', 'the', '+', 'to', 'a', '-,', 'but', 'that', 'implies', 'the', 'standard', 'library', 'cant', 'parse', 'this', 'date.']"
1627,39345921,"

All the examples I find, and even the default parser from the Go time package seem to work that way...
","['I', 'got', 'the', 'following', 'custom', 'type:', 'type', 'TimeWithoutZone', 'struct', '{', 'time', '.', 'Time', '}', 'The', 'Marshaling', 'works', 'fine:', 'const', 'timeWithoutZoneFormat', '=', '""2006-01-02T15:04:05""', 'func', '(', 't', '*', 'TimeWithoutZone', ')', 'MarshalJSON', '()', '([]', 'byte', ',', 'error', ')', '{', 'stamp', ':=', 'fmt.Sprintf(`""%s""`, t.Time.Format(timeWithoutZoneFormat ))', 'return', '[]', 'byte', '(', 'stamp', '),', 'nil', '}', 'But', 'here', 'the', 'date', 'can', 'not', 'be', 'parsed:', 'func', '(', 't', '*', 'TimeWithoutZone', ')', 'UnmarshalJSON', '(', 'data', '[]', 'byte', ')', '(', 'err', 'error', ')', '{', 'log.Println(""Parsing: "" + string(data))', 't', '.', 'Time', ',', 'err', '=', 'time.Parse(`""` + timeWithoutZoneFormat + `""`, string(data))', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'return', 'nil', '}', 'It', 'logs:', 'Parsing', ':', '{', '""time""', ':', '""2016-09-06T11:06:16""', '}', 'but', 'I', 'would', 'expect', 'it', 'to', 'parse', 'just', 'the', 'value', 'of', 'time', 'What', 'am', 'I', 'doing', 'wrong?', 'here', 'is', 'the', 'related', 'test:', 'type', 'TimeTestObj', 'struct', '{', 'Time', 'TimeWithoutZone', 'json', ':', '""time""', '}', 'func', 'TestParseDataWithoutTimezone', '(', 't', '*', 'testing', '.', 'T', ')', '{', 'parsed', ':=', 'TimeWithoutZone', '{}', 'data', ':=', '{', '""time""', ':', '""2016-09-06T11:06:16""', '}', 'err', ':=', 'json.Unmarshal([]byte(data), &parsed)', 'if', 'err', '!=', 'nil', '{', 't.Error(err)', '}', 'if', 'parsed.Unix()', '!=', '1473152776', '{', 't.Error(parsed.Unix(), ""!="", 1473152776)', '}', '}', 'All', 'the', 'examples', 'I', 'find,', 'and', 'even', 'the', 'default', 'parser', 'from', 'the', 'Go', 'time', 'package', 'seem', 'to', 'work', 'that', 'way...']"
1628,39349612,"
","['The', 'regular', 'expression', 'query', 'in', '$in', 'is', 'not', 'working.', 'It', 'works', 'fine', 'in', 'the', 'mongo', 'shell.', 'Does', 'not', 'work:', 'OpMatch', ':=', 'bson', '.', 'M', '{', '""$match""', ':', 'bson', '.', 'M', '{', '""wordname""', ':', 'bson', '.', 'M', '{', '""$in""', ':', '[...]', 'string', '{', '""/^how$/""', '}}}}', 'Works:', 'OpMatch', ':=', 'bson', '.', 'M', '{', '""$match""', ':', 'bson', '.', 'M', '{', '""wordname""', ':', 'bson', '.', 'M', '{', '""$in""', ':', '[...]', 'string', '{', '""how""', '}}}}']"
1629,39364133,"

I'm just not able to wrap my head around this nested structure which sometimes returns a map and sometimes an interface!
Any help would be highly appreciated!
","['I', 'am', 'trying', 'to', 'receive', 'data', 'from', 'my', 'MongoDB', 'using', 'MGO', 'in', 'a', 'map', 'of', 'type', '[]', 'map', '[', 'string', ']', 'interface', '{}', 'My', 'JSON', 'looks', 'like', 'this', '-', '{', '""_id""', ':', '""string""', ',', '""brandId""', ':', '123', ',', '""category""', ':{', '""television""', ':[', '{', '""cat""', ':', '""T1""', ',', '""subCategory""', ':[', '{', '""subCat""', ':', '""T1A TV""', ',', '""warrantyPeriod""', ':', '6', '}', '],', '""warrantyPeriod""', ':', '12', '},', '{', '""cat""', ':', '""T2""', ',', '""subCategory""', ':[', '{', '""subCat""', ':', '""T2A""', ',', '""warrantyPeriod""', ':', '18', '},', '{', '""subCat""', ':', '""T2B""', ',', '""warrantyPeriod""', ':', '9', '}', '],', '""warrantyPeriod""', ':', '15', '},', '{', '""cat""', ':', '""T3""', ',', '""subCategory""', ':[', '{', '""subCat""', ':', '""T3A""', ',', '""warrantyPeriod""', ':', '3', '},', '{', '""subCat""', ':', '""T3B""', ',', '""warrantyPeriod""', ':', '5', '},', '{', '""subCat""', ':', '""T3C""', ',', '""warrantyPeriod""', ':', '7', '},', '{', '""subCat""', ':', '""T3D""', ',', '""warrantyPeriod""', ':', '11', '}', '],', '""warrantyPeriod""', ':', '4', '}', '],', '""television_warrantyPeriod""', ':', '24', '},', '""title""', ':', '""BrandName""', '}', 'I', 'would', 'ideally', 'pass', 'in', 'the', 'category', 'name', 'i.e.', ""'television'"", 'and', 'cat', 'and', 'subCat', 'values', 'which', 'could', 'be', 'optional.', 'For', 'e.g.', 'something', 'like', 'this', '-', '{', '""categorySlug""', ':', '""television""', ',', '""brandId""', ':', '""123""', ',', '""model""', ':', '""T2""', '}', 'In', 'which', 'case', 'I', 'would', 'expect', 'to', 'find', ""'15'"", 'which', 'is', 'the', 'warrantyPeriod', 'value', 'for', 'T2', 'if', 'there', 'are', 'no', 'T2A', 'or', 'T2B', 'specified.', 'My', 'query', 'functions', 'look', 'like', 'this', '-', 'var', 'data', 'map', '[', 'string', ']', 'string', 'err', ':=', 'json.NewDecoder(r.Body).Decode(&data)', 'log.Println(err)', 'var', 'buffer', 'bytes', '.', 'Buffer', 'buffer.WriteString(""category."")', 'buffer.WriteString(data[""categorySlug""])', 'brandId', ',', '_', ':=', 'strconv.Atoi(data[""brandId""])', 'concernedbrandandcategory', ':=', 'database.GetMappedFields(""Brands"", bson.M{""brandId"": brandId, buffer.String(): bson.M{""$exists"": true}}, bson.M{buffer.String(): 1})', 'categorymap', ':=', 'concernedbrandandcategory', '[', '0', ']', 'log.Println(categorymap[""category""][""television""], reflect.TypeOf(categorymap))', 'My', 'GetMappedFields', 'function', 'looks', 'like', 'this', '-', 'func', 'GetMappedFields', '(', 'collectionName', 'string', ',', 'query', 'interface', '{},', 'select', 'or', 'interface', '{})', '(', 'result', '[]', 'map', '[', 'string', ']', 'interface', '{})', '{', 'MgoSession.DB(Dbname).C(collectionName).Find(query).Select(selector).All(&result)', 'return', '}', ""I'm"", 'just', 'not', 'able', 'to', 'wrap', 'my', 'head', 'around', 'this', 'nested', 'structure', 'which', 'sometimes', 'returns', 'a', 'map', 'and', 'sometimes', 'an', 'interface!', 'Any', 'help', 'would', 'be', 'highly', 'appreciated!']"
1630,39438422,"I am new to go and trying to learn it by replacing a nodejs server.  My nodejs server had the following components:  


It received a websocket message from a client.  The client would provide a unique ID and a key for the message. The server would process the message based on the key (much like a REST interface would) and return a message to the client with the unique ID so that the client would know 
which message the server was responding to.  
For some of the messages, the server would spawn an external process (one for each connection).  The server would then act as a ""client"" to the spawned process, sending JSON messages with unique IDs and receiving back data.  The server in this instance acts as an intermediary between the spawned process and the client.  


On node it was trivial to get this to work generically.  I simply added the spawned process to the connection in my ""main"" and used callbacks in the main.  The websocket server module and the module governing the spawned process communication had no direct interaction and were completely generic. 

However, while I have a websocket package and a spawn package that work well in go, I haven't been able to figure out a good way to generically create a spawned process per websocket connection.  I've thought of passing callbacks and inits but this method seems hackish.  I recognize that node and go probably require different strategies in programming but I can't think of a good ""go"" way of doing this.  I welcome any suggestions!
","['I', 'am', 'new', 'to', 'go', 'and', 'trying', 'to', 'learn', 'it', 'by', 'replacing', 'a', 'nodejs', 'server.', 'My', 'nodejs', 'server', 'had', 'the', 'following', 'components:', 'It', 'received', 'a', 'websocket', 'message', 'from', 'a', 'client.', 'The', 'client', 'would', 'provide', 'a', 'unique', 'ID', 'and', 'a', 'key', 'for', 'the', 'message.', 'The', 'server', 'would', 'process', 'the', 'message', 'based', 'on', 'the', 'key', '(much', 'like', 'a', 'REST', 'interface', 'would)', 'and', 'return', 'a', 'message', 'to', 'the', 'client', 'with', 'the', 'unique', 'ID', 'so', 'that', 'the', 'client', 'would', 'know', 'which', 'message', 'the', 'server', 'was', 'responding', 'to.', 'For', 'some', 'of', 'the', 'messages,', 'the', 'server', 'would', 'spawn', 'an', 'external', 'process', '(one', 'for', 'each', 'connection).', 'The', 'server', 'would', 'then', 'act', 'as', 'a', '""client""', 'to', 'the', 'spawned', 'process,', 'sending', 'JSON', 'messages', 'with', 'unique', 'IDs', 'and', 'receiving', 'back', 'data.', 'The', 'server', 'in', 'this', 'instance', 'acts', 'as', 'an', 'intermediary', 'between', 'the', 'spawned', 'process', 'and', 'the', 'client.', 'On', 'node', 'it', 'was', 'trivial', 'to', 'get', 'this', 'to', 'work', 'generically.', 'I', 'simply', 'added', 'the', 'spawned', 'process', 'to', 'the', 'connection', 'in', 'my', '""main""', 'and', 'used', 'callbacks', 'in', 'the', 'main.', 'The', 'websocket', 'server', 'module', 'and', 'the', 'module', 'governing', 'the', 'spawned', 'process', 'communication', 'had', 'no', 'direct', 'interaction', 'and', 'were', 'completely', 'generic.', 'However,', 'while', 'I', 'have', 'a', 'websocket', 'package', 'and', 'a', 'spawn', 'package', 'that', 'work', 'well', 'in', 'go,', 'I', ""haven't"", 'been', 'able', 'to', 'figure', 'out', 'a', 'good', 'way', 'to', 'generically', 'create', 'a', 'spawned', 'process', 'per', 'websocket', 'connection.', ""I've"", 'thought', 'of', 'passing', 'callbacks', 'and', 'inits', 'but', 'this', 'method', 'seems', 'hackish.', 'I', 'recognize', 'that', 'node', 'and', 'go', 'probably', 'require', 'different', 'strategies', 'in', 'programming', 'but', 'I', ""can't"", 'think', 'of', 'a', 'good', '""go""', 'way', 'of', 'doing', 'this.', 'I', 'welcome', 'any', 'suggestions!']"
1631,39518237,"

Am getting nil token as a return, my guess is i have sent bearer and i think it might need parsing if so how ?
","['Am', 'using', '""github.com/dgrijalva/jwt-go"",', 'and', 'able', 'to', 'send', 'a', 'token', 'to', 'my', 'frontend', ',', 'and', 'what', 'i', 'would', 'like', 'to', 'know', 'how', 'i', 'could', 'retrieve', 'the', 'token', 'sent', 'from', 'the', 'frontend', 'so', 'that', 'i', 'can', 'verify', 'if', 'the', 'token', 'that', 'was', 'sent', 'is', 'valid', 'and', 'if', 'so', 'the', 'secured', 'resource', 'will', 'be', 'delivered.', 'Here', 'is', 'the', 'token', 'sent', 'from', 'frontend', 'javascript', '...', 'headers', ':', '{', ""'Authorization'"", ':', ""'Bearer'"", '+', ""localStorage.getItem('id_token')"", '}', 'Here', 'is', 'the', 'code', 'to', 'send', 'token', 'token', ':=', 'jwt.New(jwt.GetSigningMethod(""HS256""))', 'claims', ':=', 'make', '(', 'jwt', '.', 'MapClaims', ')', 'claims', '[', '""userName""', ']', '=', 'loginRequest', '.', 'UserName', 'claims', '[', '""exp""', ']', '=', 'time.Now().Add(time.Minute * 60).Unix()', 'token', '.', 'Claims', '=', 'claims', 'tokenString', ',', 'err', ':=', 'token.SignedString([]byte(SecretKey))', 'tokenByte', ',', 'err', ':=', 'json.Marshal(data)', 'w.WriteHeader(201)', 'w.Write(tokenByte)', 'Here', 'is', 'the', 'code', 'to', 'verify', 'the', 'token', 'func', 'VerifyToken', '(', 'r', '*', 'http', '.', 'Request', ')', 'bool', '{', 'reqToken', ':=', 'r', '.', 'Header.Get(""Authorization"")', 'token', ',', 'err', ':=', 'jwt.Parse(reqToken, func(t *jwt.Token) (interface{}, error)', '{', 'return', '[]', 'byte', '(', 'SecretKey', '),', 'nil', '})', 'if', 'err', '==', 'nil', '&&', 'token', '.', 'Valid', '{', 'fmt.Println(""valid token"")', 'return', 'true', '}', 'else', '{', 'fmt.Println(""invalid token"")', 'return', 'false', '}', '}', 'Am', 'getting', 'nil', 'token', 'as', 'a', 'return,', 'my', 'guess', 'is', 'i', 'have', 'sent', 'bearer', 'and', 'i', 'think', 'it', 'might', 'need', 'parsing', 'if', 'so', 'how', '?']"
1632,39527700,"
","['Which', 'data', 'structure', 'can', 'I', 'use', 'in', 'Go', 'to', 'store', 'key-value', 'pairs', 'with', 'duplicate', 'keys?', 'For', 'eg:', 'key', '|', 'value', '1', 'one', '2', 'two', '1', 'three', 'and', 'If', 'I', 'try', 'to', 'fetch', 'values', 'corresponding', 'to', 'key', '1', 'I', 'should', 'get', 'an', 'array', 'of', 'values', 'one,three.', 'I', 'tries', 'using', 'map,', 'but', 'it', 'gives', 'me', 'only', '1', 'value.', 'map', 'y', ':=', 'make', '(', 'map', '[', 'int', ']', 'interface', '{})', 'map', 'y', '[', '1', ']', '=', '""one""', 'map', 'y', '[', '2', ']', '=', '""two""', 'map', 'y', '[', '1', ']', '=', '""three""', 'x', ':=', 'map', 'y', '[', '1', ']', 'fmt.Println(x)', 'output', ':', 'three']"
1633,39537728,"

I know that I can not go wrong by passing m as a parameter to the goroutine but I was wondering if it is extremely necessary
","['I', 'have', 'a', 'method', 'with', 'a', 'pointer', 'receiver,', 'I', 'was', 'wondering', 'if', 'using', 'this', 'pointer', 'receiver', 'is', 'safe', 'to', 'use', 'inside', 'a', 'goroutine', 'within', 'this', 'method?', 'or', 'should', 'I', 'pass', 'this', 'pointer', 'receiver', 'as', 'a', 'parameter?', 'for', 'example:', 'func', '(', 'm', '*', 'dummyStruct', ')', 'doSomething', '{', '/*', 'do', 'a', 'bunch', 'of', 'stuff', '*/', 'go', 'func', '()', '{', 'm', '.', 'a', '=', 'x', 'm.doSomethingElse()', '}()', 'return', 'y', '}', 'I', 'know', 'that', 'I', 'can', 'not', 'go', 'wrong', 'by', 'passing', 'm', 'as', 'a', 'parameter', 'to', 'the', 'goroutine', 'but', 'I', 'was', 'wondering', 'if', 'it', 'is', 'extremely', 'necessary']"
1634,39543356,"I am trying to use os.exec (https://nathanleclaire.com/blog/2014/12/29/shelled-out-commands-in-golang/) with a command like: value=`something`; echo $value

But it appears to the back ticks are messing with the command of the strings.Split I do. 

If I use something it works

How can I use the back ticks? Do I have to find out another way to write my command?

Thanks
","['I', 'am', 'trying', 'to', 'use', 'os.exec', '(https://nathanleclaire.com/blog/2014/12/29/shelled-out-commands-in-golang/)', 'with', 'a', 'command', 'like:', 'value=`something`;', 'echo', '$value', 'But', 'it', 'appears', 'to', 'the', 'back', 'ticks', 'are', 'messing', 'with', 'the', 'command', 'of', 'the', 'strings.Split', 'I', 'do.', 'If', 'I', 'use', 'something', 'it', 'works', 'How', 'can', 'I', 'use', 'the', 'back', 'ticks?', 'Do', 'I', 'have', 'to', 'find', 'out', 'another', 'way', 'to', 'write', 'my', 'command?', 'Thanks']"
1635,39560479,"I have an application that reads a user's name and password over a socket.  I want to determine if the supplied password matches the password that the OS has for that user. If it does, I want to fork a process running as that user. Ideally, the code would be in Go, but I can do C if needed.  Ideally, it would work in Linux, OSX, and BSD.  
","['I', 'have', 'an', 'application', 'that', 'reads', 'a', ""user's"", 'name', 'and', 'password', 'over', 'a', 'socket.', 'I', 'want', 'to', 'determine', 'if', 'the', 'supplied', 'password', 'matches', 'the', 'password', 'that', 'the', 'OS', 'has', 'for', 'that', 'user.', 'If', 'it', 'does,', 'I', 'want', 'to', 'fork', 'a', 'process', 'running', 'as', 'that', 'user.', 'Ideally,', 'the', 'code', 'would', 'be', 'in', 'Go,', 'but', 'I', 'can', 'do', 'C', 'if', 'needed.', 'Ideally,', 'it', 'would', 'work', 'in', 'Linux,', 'OSX,', 'and', 'BSD.']"
1636,39590458,"
","[""I'm"", 'wondering', 'if', 'there', 'is', 'a', 'golang', 'naming', 'convention', 'for', 'guard', '(assert)', 'functions?', ""I've"", 'googled', 'a', 'bit', 'but', ""couldn't"", 'find', 'anything', 'definitive.', ""I've"", 'read', 'in', '""The', 'Go', 'Programming', 'Language""', 'book', 'that', 'using', ""'must'"", 'prefix', 'is', 'a', 'common', 'practice.', 'Example', 'of', 'the', 'function', 'I', 'need:', 'package', 'main', 'func', 'divide', '(', 'a', ',', 'b', 'int', ')', 'int', '{', 'mustNotBeZero', '(', 'b', ')', 'return', 'a', '/', 'b', '}', 'func', 'mustNotBeZero', '(', 'n', 'int', ')', '{', 'if', 'n', '==', '0', '{', 'panic', '(', '""cannot divide by zero""', ')', '}', '}', 'func', 'main', '()', '{', 'println', '(', 'divide', '(', '5', ',', '0', '))', '}']"
1637,39597109,"
","['I', 'am', 'creating', 'a', 'REST', 'API', 'with', 'Go', '(using', 'Gorilla', 'mux)', 'and', 'a', 'frontend', 'app', 'with', 'React.', 'The', 'GET', 'requests', 'work', 'fine,', 'but', ""I'm"", 'having', 'trouble', 'getting', 'the', 'PUT', 'request', 'to', 'work', 'correctly.', 'It', 'makes', 'the', 'OPTIONS', 'preflight', 'request', 'successfully,', 'but', 'never', 'the', 'PUT', 'request.', 'I', 'may', 'be', 'handling', 'it', 'incorrectly', 'on', 'the', 'backend', 'or', 'making', 'the', 'request', 'incorrectly.', ""I'm"", 'created', 'a', 'middleware', 'that', 'will', 'add', 'the', 'CORS', 'headers', 'because', 'the', 'gorilla', ""toolkit's"", 'CORS', 'handlers', ""weren't"", 'allowing', 'the', 'OPTIONS', 'request', 'at', 'all.', 'I', 'have', 'also', 'tried', 'using', 'axios', 'instead', 'of', 'fetch', 'to', 'make', 'sure', 'it', ""wasn't"", 'something', 'I', 'was', 'doing', 'incorrectly', 'in', 'the', 'request.', 'I', 'was', 'getting', 'the', 'exact', 'same', 'behavior', 'with', 'axios.', 'Here', 'is', 'the', 'router:', 'var', 'V1URLBase', 'string', '=', '""/api/v1""', 'func', 'Load', '()', 'http', '.', 'Handler', '{', 'r', ':=', 'mux.NewRouter().StrictSlash(true)', '//', 'Status', 'endpoints', 's', ':=', 'r.PathPrefix(fmt.Sprintf(""%s%s"", V1URLBase, ""/statuses"")).Subrouter()', 's.HandleFunc(""/"", handlers.GetStatuses)', '.', 'Methods', '(', '""GET""', ')', 's.HandleFunc(""/{status_id}/"", handlers.GetStatus)', '.', 'Methods', '(', '""GET""', ')', 's.HandleFunc(""/"", handlers.PostStatus)', '.', 'Methods', '(', '""POST""', ')', 's.HandleFunc(""/{status_id}/"", handlers.PutStatus)', '.', 'Methods', '(', '""PUT""', ')', 's.HandleFunc(""/{status_id}/"", handlers.DeleteStatus)', '.', 'Methods', '(', '""DELETE""', ')', '//', 'Visit', 'endpoints', 'v', ':=', 'r.PathPrefix(fmt.Sprintf(""%s%s"", V1URLBase, ""/visits"")).Subrouter()', 'v.HandleFunc(""/"", handlers.GetVisits)', '.', 'Methods', '(', '""GET""', ')', 'v.HandleFunc(""/{visit_id}/"", handlers.GetVisit)', '.', 'Methods', '(', '""GET""', ')', 'v.HandleFunc(""/"", handlers.PostVisit)', '.', 'Methods', '(', '""POST""', ')', 'v.HandleFunc(""/{visit_id}/"", handlers.PutVisit)', '.', 'Methods', '(', '""PUT""', ')', 'v.HandleFunc(""/{visit_id}/"", handlers.DeleteVisit)', '.', 'Methods', '(', '""DELETE""', ')', '//', 'Member', 'endpoints', 'm', ':=', 'r.PathPrefix(fmt.Sprintf(""%s%s"", V1URLBase, ""/members"")).Subrouter()', 'm.HandleFunc(""/"", handlers.GetMembers)', '.', 'Methods', '(', '""GET""', ')', 'm.HandleFunc(""/{member_id}/"", handlers.GetMember)', '.', 'Methods', '(', '""GET""', ')', 'm.HandleFunc(""/"", handlers.PostMember)', '.', 'Methods', '(', '""POST""', ')', 'm.HandleFunc(""/{member_id}/"", handlers.PutMember)', '.', 'Methods', '(', '""PUT""', ')', 'm.HandleFunc(""/{member_id}/"", handlers.DeleteMember)', '.', 'Methods', '(', '""DELETE""', ')', '//', 'GymLocation', 'endpoints', 'gl', ':=', 'r.PathPrefix(fmt.Sprintf(""%s%s"", V1URLBase, ""/gym_locations"")).Subrouter()', 'gl.HandleFunc(""/"", handlers.GetGymLocations)', '.', 'Methods', '(', '""GET""', ')', 'gl.HandleFunc(""/{gym_location_id}/"", handlers.GetGymLocation)', '.', 'Methods', '(', '""GET""', ')', 'gl.HandleFunc(""/"", handlers.PostGymLocation)', '.', 'Methods', '(', '""POST""', ')', 'gl.HandleFunc(""/{gym_location_id}/"", handlers.PutGymLocation)', '.', 'Methods', '(', '""PUT""', ')', 'gl.HandleFunc(""/{gym_location_id}/"", handlers.DeleteGymLocation)', '.', 'Methods', '(', '""DELETE""', ')', 'router', ':=', 'ghandlers.LoggingHandler(os.Stdout, r)', 'router', '=', 'handlers.WriteCORSHeaders(r)', 'return', 'router', '}', 'Here', 'is', 'the', 'CORS', 'handler:', 'func', 'WriteCORSHeaders', '(', 'h', 'http', '.', 'Handler', ')', 'http', '.', 'Handler', '{', 'return', 'http.HandlerFunc(func(w http.ResponseWriter, r *http.Request)', '{', 'fmt.Println(""HIT"")', 'w.Header().Set(""Access-Control-Allow-Origin"", r.Header.Get(""Origin""))', 'w.Header().Set(""Access-Control-Allow-Methods"", ""POST, GET, OPTIONS, PUT, DELETE"")', 'w.Header()', '.', 'Set', '(', '""Access-Control-Allow-Headers""', ',', '""Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization""', ',', ')', '//', 'w.Header().Set(""Access-Control-Allow-Credentials"",', '""true"")', 'if', 'r', '.', 'Method', '==', '""OPTIONS""', '{', 'return', '}', 'h.ServeHTTP(w, r)', '})', '}', 'Here', 'is', 'the', 'PUT', 'handler:', 'func', 'PutVisit', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'body', ',', '_', ':=', 'ioutil.ReadAll(r.Body)', 'r', '.', 'Body.Close()', 'visitId', ',', 'err', ':=', 'strconv.ParseInt(mux.Vars(r)[VisitId], 10, 64)', 'if', 'err', '!=', 'nil', '{', 'WriteJSON', '(', 'w', ',', 'http', '.', 'StatusBadRequest', ',', 'APIErrorMessage', '{', 'Message', ':', 'InvalidVisitId', '})', 'return', '}', 'visit', ':=', '&', 'models', '.', 'Visit', '{}', 'err', '=', 'json.Unmarshal(body, visit)', 'if', 'err', '!=', 'nil', '{', 'WriteJSON', '(', 'w', ',', 'http', '.', 'StatusBadRequest', ',', 'APIErrorMessage', '{', 'Message', ':', 'err.Error()})', 'return', '}', 'updated', ',', 'err', ':=', 'datastore.UpdateVisit(visitId, *visit)', 'if', 'err', '!=', 'nil', '{', 'WriteJSON', '(', 'w', ',', 'http', '.', 'StatusInternalServerError', ',', 'APIErrorMessage', '{', 'Message', ':', 'err.Error()})', 'return', '}', 'WriteJSON', '(', 'w', ',', 'http', '.', 'StatusOK', ',', 'updated', ')', '}', 'func', 'WriteJSON', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'statusCode', 'int', ',', 'response', 'interface', '{})', '{', 'encoder', ':=', 'json.NewEncoder(w)', 'w.Header().Set(""Content-Type"", ""application/json; charset=UTF-8"")', 'w.WriteHeader(statusCode)', 'encoder.Encode(response)', '}', 'Here', 'is', 'the', 'main', 'that', 'starts', 'the', 'server:', 'func', 'main', '()', '{', 'r', ':=', 'router.Load()', 'http.ListenAndServe("":8080"", r)', '}', 'Here', 'is', 'my', 'request', 'from', 'Reactjs:', 'export', 'func', 'tion', 'putVisit', '(', 'visit', ')', '{', 'return', 'func', 'tion', '(', 'dispatch', ')', '{', 'return', 'fetch', '(', 'http', '://', 'localhost', ':', '8080/api/v1/visits/${visit.visit_id}/`,', '{', 'method', ':', ""'PUT'"", ',', 'headers', ':', '{', ""'Accept'"", ':', ""'application/json; charset=UTF-8'"", ',', ""'Content-Type'"", ':', ""'application/json; charset=UTF-8'"", '},', 'body', ':', 'JSON.stringify(visit)', '})', '.', 'then', '(', 'response', '=>', 'response.json())', '.', 'then', '(', 'json', '=>', 'dispatch', '(', 'updateVisit', '(', 'json', '))', ')', '.', 'catch', '(', 'err', '=>', 'console.log(err)', ')', '}', '}']"
1638,39616236,"

Is this a known bug?  Is making shared libraries meant to be supported?
","['Following', 'my', 'earlier', 'question,', 'now', ""I'm"", 'getting', 'this', 'error', 'when', 'trying', 'to', 'perform', 'all', 'the', 'same', 'steps', 'from', 'this', 'article,', 'since', ""I've"", 'upgraded', 'from', 'Go', '1.6.1', 'to', 'Go', '1.7.1', '(I', 'cannot', 'go', 'back', 'to', 'Go', '1.6.1', 'because', 'the', 'linker', 'crashes', 'when', 'tries', 'to', 'compile', 'some', 'shared', 'libraries).', 'What', 'I', 'did:', 'Installed', 'go', 'in', '~/.go/go', '(this', 'is', 'later', 'referred', 'to', 'as', 'GOROOT).', 'Compiled', 'libstd.so:', 'GOROOT', '=', '/.', 'go', '/', 'go', 'GOPATH', '=', '/', 'tests', 'go', 'install', '-', 'buildmode', '=', 'shared', '-', 'linkshared', 'std', 'Compiled', 'calc', 'library:', 'GOROOT', '=', '/.', 'go', '/', 'go', 'GOPATH', '=', '/', 'tests', 'go', 'install', '-', 'a', '-', 'x', '-', 'buildmode', '=', 'shared', '-', 'linkshared', 'calc', 'Tried', 'to', 'compile', 'app:', 'GOROOT', '=', '/.', 'go', '/', 'go', 'GOPATH', '=', '/', 'tests', 'go', 'build', '-', 'a', '-', 'x', '-', 'linkshared', '-', 'o', 'app', 'cashier', 'and', 'received', 'this', 'error:', '/.', 'go', '/go/pkg/tool/linux_amd64/link: cannot implicitly include runtime/cgo', 'in', 'a', 'shared', 'library', 'I', 'tried', 'to', 'repeat', 'the', 'steps', 'with', 'CGO_ENABLED=0', 'prepended', 'to', 'the', 'environment,', 'but', 'nothing', 'would', 'build', 'this', 'way.', 'Giving', 'me', 'this', 'error:', 'import', 's', 'runtime/cgo:', 'C', 'source', 'files', 'not', 'allowed', 'when', 'not', 'using', 'cgo', 'or', 'SWIG', ':', 'gcc_fatalf', '.', 'c', 'gcc_linux_amd64', '.', 'c', 'gcc_mmap', '.', 'c', 'gcc_util', '.', 'c', 'Is', 'this', 'a', 'known', 'bug?', 'Is', 'making', 'shared', 'libraries', 'meant', 'to', 'be', 'supported?']"
1639,39618959,"

It does not recognise the CreatorId field.
How would I reference this field in the new instance or modify the struct so that it registers CreatorID as part of the Post struct?
Thanks
","['I', 'have', '2', 'structs', 'whereby', 'one', 'inherits', 'values', 'that', 'are', 'common', 'amongst', 'all', 'stucts', 'denoted', 'by', 'type', 'Common', 'struct', '{...}', 'type', 'Common', 'struct', '{', 'Id', 'int', 'CreatedAt', 'time', '.', 'Time', 'UpdatedAt', 'time', '.', 'Time', 'CreatorId', 'int', '}', 'type', 'Post', 'struct', '{', 'type', 'Post', 'struct', '{', 'Common', 'Status', 'Title', 'string', 'ShortDescription', 'string', 'Content', 'string', 'CategoryIds', '[]', 'int', 'TagIds', '[]', 'int', 'Url', 'string', 'MainImageId', 'int', 'Keywords', '[]', 'string', '}', 'However', 'when', 'I', 'try', 'to', 'create', 'a', 'new', 'instance', 'of', 'the', 'Post', 'struct', 'as', 'in', 'the', 'following.', 'post1', ':=', '&', 'Post', '{', 'CreatorId', ':', '1', ',', 'Status', ':', '1', ',', 'Title', ':', '""this is the title of the first post""', ',', 'ShortDescription', ':', '""this is the short description of this post""', ',', 'Content', ':', '""""', ',', 'Url', ':', '""first-post""', ',', 'MainImageId', ':', '1', ',', '}', 'It', 'does', 'not', 'recognise', 'the', 'CreatorId', 'field.', 'How', 'would', 'I', 'reference', 'this', 'field', 'in', 'the', 'new', 'instance', 'or', 'modify', 'the', 'struct', 'so', 'that', 'it', 'registers', 'CreatorID', 'as', 'part', 'of', 'the', 'Post', 'struct?', 'Thanks']"
1640,39632932,".
I am looking for some best practice to close the goroutine for the flow based logics.

","['I', 'have', 'some', 'goroutine', 'logics', 'like', 'this:', 'go', 'func', '()', '{', 'do_things_0', '()', 'do_things_1', '()', 'do_things_2', '()', 'do_things_3', '()', '...', '...', '}', '()', 'When', 'the', 'service', 'receives', 'a', 'request,', 'it', 'will', 'create', 'such', 'goroutine.', 'And', 'the', 'goroutine', 'maybe', 'memory', 'consuming', 'and', 'needs', 'to', 'run', 'more', 'than', '30', 'minutes.', 'Sometimes,', 'the', 'service', 'may', 'notice', 'the', 'lack', 'of', 'memory,', 'and', 'needs', 'to', 'terminate', 'some', 'goroutines.', 'My', 'questions', 'are:', 'How', 'can', 'I', 'terminate', 'the', 'goroutine', 'in', 'the', 'above', 'example?', 'Is', 'there', 'any', 'way', 'to', 'know', 'the', 'used', 'memory', 'of', 'each', 'goroutine?', 'Update', 'I', 'read', 'other', 'SO', 'answers', 'that', 'goroutine', ""can't"", 'be', 'killed', 'outside', 'I', 'suppose', 'that', 'send', 'a', 'signal', 'to', 'the', 'channel', 'handled', 'by', 'the', 'goroutine', 'to', 'make', 'the', 'goroutine', 'quit', 'is', 'only', 'suitable', 'for', 'the', 'for', 'loop', 'based', 'logics', '.', 'I', 'am', 'looking', 'for', 'some', 'best', 'practice', 'to', 'close', 'the', 'goroutine', 'for', 'the', 'flow', 'based', 'logics.']"
1641,39640284,"

Subscribers added to the map disapear every time I call Hub().
What can I do, to make the changes in map be preserved between calls?
","[""I'm"", 'having', 'hard', 'time', 'understanding', 'how', 'references', 'in', 'go', 'work.', 'I', 'want', 'to', 'write', 'a', 'really', 'simple', 'in-memory', 'publish-subscribe', 'mechanism.', ""Here's"", 'the', 'code:', 'package', 'sockets', 'import', '(', '""fmt""', '""github.com/gorilla/websocket""', ')', 'type', 'hubSingleton', 'struct', '{', 'Clients', 'map', '[', 'string', '][]*', 'websocket', '.', 'Conn', '}', 'var', 'instance', '*', 'hubSingleton', 'func', 'Hub', '()', '*', 'hubSingleton', '{', 'if', 'instance', '==', 'nil', '{', 'fmt.Println(""New instance created"")', 'instance', '=', '&', 'hubSingleton', '{}', '}', 'instance', '.', 'Clients', '=', 'make', '(', 'map', '[', 'string', '][]*', 'websocket', '.', 'Conn', ',', '6', ')', 'return', 'instance', '}', 'func', '(', 'hub', '*', 'hubSingleton', ')', 'Subscribe', '(', 'chan', 'nel', 'string', ',', 'socket', '*', 'websocket', '.', 'Conn', ')', 'error', '{', 'if', '_', ',', 'ok', ':=', 'hub', '.', 'Clients', '[', 'chan', 'nel', '];', '!', 'ok', '{', 'hub', '.', 'Clients', '[', 'chan', 'nel', ']', '=', 'make', '([]*', 'websocket', '.', 'Conn', ',', '0', ')', '}', 'hub', '.', 'Clients', '[', 'chan', 'nel', ']', '=', 'append', '(', 'hub', '.', 'Clients', '[', 'chan', 'nel', '],', 'socket', ')', 'fmt.Println(""Subscribe: "", hub.Clients)', 'return', 'nil', '}', 'func', '(', 'hub', '*', 'hubSingleton', ')', 'Publish', '(', 'chan', 'nel', 'string', ',', 'message', 'interface', '{})', '{', 'fmt.Println(""Publish: "", hub.Clients)', 'if', '_', ',', 'ok', ':=', 'hub', '.', 'Clients', '[', 'chan', 'nel', '];', '!', 'ok', '{', 'return', '}', 'for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'hub', '.', 'Clients', '[', 'chan', 'nel', ']);', 'i', '++', '{', 'conn', ':=', 'hub', '.', 'Clients', '[', 'chan', 'nel', '][', 'i', ']', 'conn.WriteJSON(Message{status: ""ok"", content: message})', '}', '}', 'The', 'problem', 'is', 'that', 'it', 'seems', 'that', 'every', 'time', 'I', 'call', 'Hub().Publish()', 'or', 'Hub().Subscribe()', 'a', 'new', 'hubSingleton.Client', 'is', 'created.', 'Well,', ""I'm"", 'not', 'sure', 'what', 'happens,', 'but', ""here's"", 'the', 'output', 'of', 'running', 'program:', 'Publish', ':', 'map', '[]', 'Subscribe', ':', 'map', '[', 'chan', ':[', '0xc82', '017', '0', '0', '0', '0', ']]', 'Publish', ':', 'map', '[]', 'Subscribe', ':', 'map', '[', 'chan', ':[', '0xc82', '0', '0', '8', 'ac80', ']]', 'Publish', ':', 'map', '[]', 'Publish', ':', 'map', '[]', 'Publish', ':', 'map', '[]', 'Subscribe', ':', 'map', '[', 'chan', ':[', '0xc82', '017', '014', '0', ']]', 'Publish', ':', 'map', '[]', 'Subscribers', 'added', 'to', 'the', 'map', 'disapear', 'every', 'time', 'I', 'call', 'Hub().', 'What', 'can', 'I', 'do,', 'to', 'make', 'the', 'changes', 'in', 'map', 'be', 'preserved', 'between', 'calls?']"
1642,39642189,"
","['I', 'have', 'the', 'following', 'code', 'which', 'implements', 'a', 'worker', 'queue:', 'package', 'main', 'import', '(', '""fmt""', '""net/http""', '""io""', '""time""', ')', 'var', '(', 'linkQueue', 'chan', 'Link', 'scraperQueue', 'chan', 'chan', 'Link', ')', 'func', 'CycleDirectory', '(', 'page', 'int', ')', '{', 'linkQueue', '<-', 'Link', '{', 'Name', ':', '""asd""', '}', '}', 'type', 'Link', 'struct', '{', 'Name', 'string', '}', 'func', '(', 's', 'Scraper', ')', 'Start', '()', '{', 'fmt.Println(""Started"")', 'go', 'func', '()', '{', 'for', '{', 's', '.', 'ScraperQueue', '<-', 's', '.', 'Link', 'select', '{', 'case', 'link', ':=', '<-', 's', '.', 'Link', ':', 'fmt.Println(fmt.Sprintf(""%v"", s.Id) + "": Received "" + link.Name)', 'case', '<-', 's', '.', 'QuitChan', ':', 'fmt.Println(""Closed"")', 'return', '}', '}', '}()', '}', 'func', '(', 's', 'Scraper', ')', 'Stop', '()', '{', 'go', 'func', '()', '{', 's', '.', 'QuitChan', '<-', 'true', '}()', '}', 'type', 'Scraper', 'struct', '{', 'Id', 'int', 'Link', 'chan', 'Link', 'ScraperQueue', 'chan', 'chan', 'Link', 'QuitChan', 'chan', 'bool', '}', 'func', 'InitScraper', '(', 'id', 'int', ',', 'scraperQueue', 'chan', 'chan', 'Link', ')', 'Scraper', '{', 'return', 'Scraper', '{', 'Id', ':', 'id', ',', 'Link', ':', 'make', '(', 'chan', 'Link', '),', 'ScraperQueue', ':', 'scraperQueue', ',', 'QuitChan', ':', 'make', '(', 'chan', 'bool', '),', '}', '}', 'func', 'HelloServer', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{', 'io.WriteString(w, ""hello, world!\\n"")', '}', 'func', 'main', '()', '{', 'linkQueue', '=', 'make', '(', 'chan', 'Link', ',', '2000', ')', 'numScrapers', ':=', '2', 'scraperQueue', '=', 'make', '(', 'chan', 'chan', 'Link', ',', 'numScrapers', ')', 'for', 'i', ':=', '0', ';', 'i', '<', 'numScrapers', ';', 'i', '++', '{', 's', ':=', 'InitScraper', '(', 'i', '+', '1', ',', 'scraperQueue', ')', 's.Start()', '}', 'go', 'func', '()', '{', 'for', '{', 'select', '{', 'case', 'link', ':=', '<-', 'linkQueue', ':', 'go', 'func', '()', '{', 'scraper', ':=', '<-', 'scraperQueue', 'scraper', '<-', 'link', '}()', '}', '}', '}()', 'CycleDirectory', '(', '1', ')', '//', 'time.Sleep(1', '*', 'time.Millisecond)', 'for', '{', '//', 'select', '{', '//', '}', '}', '//', 'http.HandleFunc(""/hello"",', 'HelloServer)', '//', 'http.ListenAndServe("":12345"",', 'nil)', '}', 'Running', 'this', 'code', 'using', 'a', 'for', 'loop', 'containing', 'an', 'if', 'statement', '(or', 'nothing', 'inside),', 'the', 'scraper', 'does', 'not', 'print', 'a', 'received', 'message.', 'Blocking', 'using', 'the', 'ListenAndServe', 'function', 'from', 'net/http,', 'it', 'prints', 'the', 'received', 'message.', 'Blocking', 'using', 'sleep', 'for', '1', 'ms,', 'I', 'receive', 'the', 'message.', 'And', 'putting', 'a', 'select', 'statement', 'in', 'the', 'for', 'loop,', 'I', 'also', 'receive', 'the', 'message.', 'Why', 'is', 'the', 'for', 'loop', 'without', 'a', 'select', 'statement', 'not', 'allowing', 'for', 'execution', 'of', 'the', 'message', 'sending', 'in', 'the', 'worker', 'queues,', 'and', 'how', 'would', 'I', 'go', 'about', 'handling', 'this.', 'I', 'need', 'an', 'if', 'statement', 'in', 'the', 'for', 'loop', 'to', 'check', 'if', 'all', 'the', 'work', 'has', 'been', 'done', 'so', 'I', 'can', 'exit', 'the', 'loop', 'and', 'end', 'the', 'program.', 'Update', ""Amd's"", 'suggestion', 'is', 'a', 'solution', 'to', 'this', 'problem.', 'Here', 'is', 'my', 'updated', 'code', 'using', 'sync.WaitGroup', 'package', 'main', 'import', '(', '""fmt""', '""sync""', ')', 'var', '(', 'linkQueue', 'chan', 'Link', 'scraperQueue', 'chan', 'chan', 'Link', 'wg', 'sync', '.', 'WaitGroup', ')', 'func', 'CycleDirectory', '(', 'page', 'int', ')', '{', 'wg.Add(1)', 'linkQueue', '<-', 'Link', '{', 'Name', ':', '""asd""', '}', '}', 'type', 'Link', 'struct', '{', 'Name', 'string', '}', 'func', '(', 's', 'Scraper', ')', 'Start', '()', '{', 'fmt.Println(""Started"")', 'go', 'func', '()', '{', 'for', '{', 's', '.', 'ScraperQueue', '<-', 's', '.', 'Link', 'select', '{', 'case', 'link', ':=', '<-', 's', '.', 'Link', ':', 'Scrape', '(', 's', '.', 'Id', ',', 'link', '.', 'Name', ')', 's.Stop()', 'case', '<-', 's', '.', 'QuitChan', ':', 'fmt.Println(""Closed"")', 'wg.Done()', 'return', '}', '}', '}()', '}', 'func', '(', 's', 'Scraper', ')', 'Stop', '()', '{', 'go', 'func', '()', '{', 's', '.', 'QuitChan', '<-', 'true', '}()', '}', 'type', 'Scraper', 'struct', '{', 'Id', 'int', 'Link', 'chan', 'Link', 'ScraperQueue', 'chan', 'chan', 'Link', 'QuitChan', 'chan', 'bool', '}', 'func', 'Scrape', '(', 'id', 'int', ',', 'name', 'string', ')', '{', 'fmt.Println(fmt.Sprintf(""%v"", id) + "": Received "" + name)', '}', 'func', 'InitScraper', '(', 'id', 'int', ',', 'scraperQueue', 'chan', 'chan', 'Link', ')', 'Scraper', '{', 'return', 'Scraper', '{', 'Id', ':', 'id', ',', 'Link', ':', 'make', '(', 'chan', 'Link', '),', 'ScraperQueue', ':', 'scraperQueue', ',', 'QuitChan', ':', 'make', '(', 'chan', 'bool', '),', '}', '}', 'func', 'main', '()', '{', 'linkQueue', '=', 'make', '(', 'chan', 'Link', ',', '2000', ')', 'numScrapers', ':=', '2', 'scraperQueue', '=', 'make', '(', 'chan', 'chan', 'Link', ',', 'numScrapers', ')', 'for', 'i', ':=', '0', ';', 'i', '<', 'numScrapers', ';', 'i', '++', '{', 's', ':=', 'InitScraper', '(', 'i', '+', '1', ',', 'scraperQueue', ')', 's.Start()', '}', 'go', 'func', '()', '{', 'for', '{', 'select', '{', 'case', 'link', ':=', '<-', 'linkQueue', ':', 'go', 'func', '()', '{', 'scraper', ':=', '<-', 'scraperQueue', 'scraper', '<-', 'link', '}()', '}', '}', '}()', 'CycleDirectory', '(', '1', ')', 'wg.Wait()', 'fmt.Println(""Done"")', '}']"
1643,39654312,"

Golang Playground Link

The example's syntax is strange but has no error.

Can any one tell me how these codes work or give me an official document about them?

Thanks:)
","['I', 'read', 'some', 'strange', 'codes', 'which', 'convert', 'a', 'method', 'to', 'a', 'function', 'whose', 'first', 'argument', 'is', 'a', 'pointer', 'to', 'this', ""method's"", 'struct.', 'I', 'write', 'an', 'example', 'to', 'demonstrate', 'it:', 'package', 'main', 'import', '""fmt""', 'type', 'fooS', 'struct', '{}', 'func', '(', 's', '*', 'fooS', ')', 'fooF', '(', 'fooArg', 'interface', '{})', '{', 'fmt.Println(""fooF: "", fooArg)', '}', 'type', 'wowS', 'struct', '{', 'callback', 'func', '(', 's', '*', 'fooS', ',', 'fooArg', 'interface', '{})', '}', 'func', 'main', '()', '{', 'wow', ':=', 'new', '(', 'wowS', ')', 'wow', '.', 'callback', '=', '(*', 'fooS', ').', 'fooF', '// strange', 'wow.callback(nil, 123)', '}', 'Golang', 'Playground', 'Link', 'The', ""example's"", 'syntax', 'is', 'strange', 'but', 'has', 'no', 'error.', 'Can', 'any', 'one', 'tell', 'me', 'how', 'these', 'codes', 'work', 'or', 'give', 'me', 'an', 'official', 'document', 'about', 'them?', 'Thanks:)']"
1644,39655389," 
","['i', 'going', 'to', 'render', 'html', 'with', 'data,when', 'render,i', ""don't"", 'know', 'how', 'to', 'render', 'struct', 'of', 'other', 'file', 'return', 'for', 'render', 'on', 'controller', ',', 'code', ':', 'package', 's', 'controller', 'type', 'Index', 'struct', '{', 'Title', 'string', 'Body', 'string', '}', 'func', 'IndexController', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', '){', 'if', 'r', '.', 'Method', '==', '""POST""', '{', 'data', ':=', '&', 'Index', '{', 'Title', ':', '""Hello""', ',', 'Body', ':', '""Welcome to the WebGo.""', ',', '}', 'ff', ':=', 'renders', '.', 'Sample', '{', 'Temppath', ':', '""templates/index.tmpl""', ',', 'Data', ':', 'data', '}', 'ff.Render(w)', 'my', 'render', 'package:', 'package', 'renders', 'import', '(', '""html/template""', '""log""', '""net/http""', ')', 'type', 'Sample', 'struct', '{', 'Temppath', 'string', 'Data', 'struct', '{}', 'i', 'don', 't', 'know', 'how', 'to', 'use', 'pass', 'value', 'of', 'package', 'controller', 'to', 'renders', 'package', '}', 'func', '(', 'obj', 'Sample', ')', 'Render', '(', 'w', 'http', '.', 'ResponseWriter', ')', 'error', '{', 'var', 'indexTemplate', '=', 'template.Must(template.ParseFiles(obj.Temppath))', 'if', 'err', ':=', 'indexTemplate.Execute(w, obj.Data)', ';', 'err', '!=', 'nil', '{', 'log.Println(err)', 'return', 'err', '}', 'return', 'nil', '}', 'html', 'code', ':', '{{.Title}}', 'body', '{', 'font-family:', 'sans-serif;', '}', 'h1', '{', 'background:', '#ddd;', '}', '#sidebar', '{', 'float:', 'right;', '}', '{{.Title}}', '{{block', '""sidebar""', '.}}', '{{end}}', '{{block', '""content""', '.}}', '{{.Body}}', '{{end}}', 'how', 'to', 'pass', 'type', 'Index', 'struct', 'to', 'renders', 'package', 'for', 'use', 'indexTemplate.Execute(w, obj.Data)', '{{.', 'Title', '}}', 'body', '{', 'font', '-', 'family', ':', 'sans', '-', 'serif', ';', '}', 'h1', '{', 'background', ':', 'ddd', ';', '}', 'sidebar', '{', 'float', ':', 'right', ';', '}', '{{.', 'Title', '}}', '{{', 'block', '""sidebar""', '.}}', '{{', 'end', '}}', '{{', 'block', '""content""', '.}}', '{{.', 'Body', '}}', '{{', 'end', '}}']"
1645,39678131,"

Any idea how what flags to use or how to properly cross-compile for FreeBSD within a Raspberry pi ?
","['On', 'a', 'Raspberry', 'Pi', '1', 'model', 'B', 'I', 'installed', 'FreeBSD', '10.3', 'using', 'the', 'SD', 'Card', 'Images', 'RPI-B.', 'I', 'can', 'boot,', 'get', 'network,', 'ssh', 'into', 'it,', 'etc,', 'all', 'seems', 'to', 'be', 'ok', 'and', 'functional.', 'This', 'is', 'part', 'of', 'the', 'dmesg', 'output:', 'FreeBSD', '10', '.', '3', '-', 'RELEASE', '0', 'r297264', ':', 'Fri', 'Mar', '25', '0', '8', ':', '01', ':', '14', 'UTC', '2016', 'root', 'releng1', '.', 'nyi', '.', 'freebsd', '.', 'org', ':/', 'usr/obj/arm.armv6/usr/src/sys/RPI-B', 'arm', 'FreeBSD', 'clang', 'version', '3', '.', '4.1 (tags/RELEASE_34/dot1-final 208032)', '20140512', 'VT', ':', 'init', 'without', 'driver', '.', 'CPU', ':', 'ARM1176JZ', '-', 'S', 'rev', '7', '(', 'ARM11J', 'core', ')', 'Supported', 'features', ':', 'ARM_ISA', 'THUMB2', 'JAZELLE', 'ARMv4', 'Security_Ext', 'WB', 'enabled', 'LABT', 'branch', 'prediction', 'enabled', '16KB/32B', '4', '-', 'way', 'instruction', 'cache', '16KB/32B', '4', '-', 'way', 'write', '-', 'back', '-', 'locking', '-', 'C', 'data', 'cache', 'real', 'memory', '=', '503312384', '(', '479', 'MB', ')', 'avail', 'memory', '=', '483127296', '(', '460', 'MB', ')', 'On', 'a', 'mac', 'os', 'X', '(10.11.6)', 'with', 'go', '1.7.1:', 'go', 'version', 'go', '1', '.', '7', '.', '1', 'darwin/amd64', 'I', 'am', 'cross', 'compile', 'this', 'code:', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 't', ':=', 'time.Now().UTC()', 'fmt.Println(""Location:"", t.Location(), "":Time:"", t.Format(time.RFC3339Nano))', '}', 'With:', 'env', 'GOOS', '=', 'freebsd', 'GOARCH', '=', 'arm', 'go', 'build', 'Running', 'the', 'generated', 'binary', 'on', 'the', 'raspberry-pi', 'generates', 'a', 'coredump:', 'freebsd', 'rpi', '-', 'b', ':', '%', './', 'time', 'Illegal', 'instruction', '(', 'core', 'dumped', ')', 'On', 'the', 'time.core', 'after', 'typing:', '$', 'strings', 'time.core', 'besides', 'many', 'characters', 'I', 'see', 'this:', 'fatal', 'error', ':', 'cgo', 'callback', 'before', 'cgo', 'call', 'Any', 'idea', 'how', 'what', 'flags', 'to', 'use', 'or', 'how', 'to', 'properly', 'cross-compile', 'for', 'FreeBSD', 'within', 'a', 'Raspberry', 'pi', '?']"
1646,39681086,"

What is the best way to filter my data with dynamic filter (Represente here by a map of string)?
","['I', 'have', 'an', 'array', 'of', 'a', 'struct', 'and', 'a', 'maps', 'with', 'variable', 'name', 'and', 'some', 'filter', 'values.', 'I', 'want', 'to', 'filter', 'my', 'array', 'with', 'my', 'maps.', 'Example', 'Go', 'Playground:', 'package', 'main', 'import', '""fmt""', 'type', 'cnts', '[]', 'cnt', 'type', 'cnt', 'struct', '{', 'ID', 'int', 'json', ':', '""Id""', 'Area', 'string', 'json', ':', '""Area""', 'State', 'string', 'json', ':', '""State""', 'City', 'string', 'json', ':', '""City""', '}', 'func', 'main', '()', '{', 'mycnts', ':=', 'cnts', '{', 'cnt', '{', '124', ',', '""Here""', ',', '""South""', ',', '""Home""', '},', 'cnt', '{', '125', ',', '""Here""', ',', '""West""', ',', '""Home""', '},', 'cnt', '{', '126', ',', '""""', ',', '""South""', ',', '""Home""', '},', 'cnt', '{', '127', ',', '""Here""', ',', '""West""', ',', '""NY""', '}}', '//', 'my', 'maps', 'with', 'filter', 'map', 'Filter', ':=', 'map', '[', 'string', ']', 'string', '{', '""Area""', ':', '""Here""', ',', '""City""', ':', '""Home""', '}', 'fmt.Println(mapFilter)', 'mycntsFilter', ':=', 'make', '(', 'cnts', ',', '0', ')', 'for', '_', ',', 'val', ':=', 'range', 'mycnts', '{', '//', 'I', 'want', 'to', 'select', 'only', 'row', 'where', 'the', 'map', 'filter', ""it's"", 'ok', 'mycntsFilter', '=', 'append', '(', 'mycntsFilter', ',', 'val', ')', 'fmt.Println(val, mycntsFilter)', '}', '}', 'What', 'is', 'the', 'best', 'way', 'to', 'filter', 'my', 'data', 'with', 'dynamic', 'filter', '(Represente', 'here', 'by', 'a', 'map', 'of', 'string)?']"
1647,39758689,"

..
The interactive program could be :
execute(ftp) 

I think I have to dup stdin, stdout and read write in separate thread.
","['I', 'have', 'a', 'method', 'that', 'can', 'spawn', 'an', 'interactive', 'process,', 'now', 'how', 'do', 'I', 'log', 'everything', '(including', 'stdin', 'and', 'stdout)', 'after', 'spawning', '?', 'e.g.,', 'func', 'execute', '(', 'cmd1', 'string', ',', 'slice', '[]', 'string', ')', '{', 'cmd', ':=', 'exec.Command(cmd1, slice...)', '//', 'redirect', 'the', 'output', 'to', 'terminal', 'cmd', '.', 'Stdout', '=', 'os', '.', 'Stdout', 'cmd', '.', 'Stderr', '=', 'os', '.', 'Stderr', 'cmd', '.', 'Stdin', '=', 'os', '.', 'Stdin', 'cmd.Run()', '}', '..', 'The', 'interactive', 'program', 'could', 'be', ':', 'execute(ftp)', 'I', 'think', 'I', 'have', 'to', 'dup', 'stdin,', 'stdout', 'and', 'read', 'write', 'in', 'separate', 'thread.']"
1648,39824698,"

`

Is it time for some JS?
","[""Let's"", 'say', 'I', 'have', 'a', 'page,', 'it', 'a', 'header', 'and', 'a', 'body.', 'In', 'the', 'header', 'are', 'links,', 'and', 'on', 'click', 'the', 'body', 'changes,', 'but', 'the', 'header', 'remains.', 'To', 'build', 'this', 'with', 'the', 'html/template', 'library', 'is', 'easy,', 'but', 'also', 'seems', 'dumb', 'if', 'I', 'just', 'send', 'back', 'a', 'whole', 'new', 'page', '(fetching', 'the', 'information', 'in', 'the', 'header', 'from', 'the', 'database', 'every', 'time).', 'How', 'to', 'I', 'switch', 'out', 'body', 'templates', 'depending', 'on', 'the', 'url', 'I', 'guess.', 'Here', 'is', 'what', 'I', 'have:', '`', '{{', 'template', '""GlobalNav""', '}}', '{{', 'template', '""GroupHeader""', '.', 'Header', '}}', '{{', 'if', 'eq', '.', 'Active', '""""', '}}', '{{', 'template', '""GroupBody""', '.', 'Body', '}}', '{{', 'else', 'if', 'eq', '.', 'Active', '""papers""', '}}', '{{', 'template', '""GroupPapers""', '.', 'Body', '}}', '{{', 'else', 'if', 'eq', '.', 'Active', '""projects""', '}}', '{{', 'template', '""GroupProjects""', '.', 'Body', '}}', '{{', 'end', '}}', 'Server', 'Side', ':', 'http.HandleFunc(""/g/"", Groups)', 'http.HandleFunc(""/g/papers"", GroupsPapers)', 'http.HandleFunc(""/g/projects"", GroupsProjects)', 'func', 'Groups', '()', '{', 'header', ':=', 'fromDBHeader', '(', 'id', ')', 'body', ':=', 'fromDBMain', '(', 'id', ')', 'render', 'Home', 'template', '...', '}', 'func', 'GroupsPapers', '()', '{', 'header', ':=', 'fromDBHeader', '(', 'id', ')', 'body', ':=', 'fromDBPapers', '(', 'id', ')', 'render', 'Paper', 'template', '...', '}', 'func', 'GroupsProjects', '()', '{', 'header', ':=', 'fromDBHeader', '(', 'id', ')', 'body', ':=', 'fromDBProjects', '(', 'id', ')', 'render', 'Project', 'template', '...', '}', '`', 'Is', 'it', 'time', 'for', 'some', 'JS?']"
1649,39876914,"

https://play.golang.org/p/423CAL-SJv

This seems rather clunky. Is there an existing library function to do this? I have looked at both the strings and binary packages, but nothing seemed immediately obvious.
","['I', 'am', 'dealing', 'with', 'some', 'legacy', 'data', 'where', 'I', 'routinely', 'need', 'to', 'convert', 'a', 'uint16', 'to', 'a', '2', 'byte', 'string.', 'Here', 'is', 'what', 'I', 'am', 'using', '(where', 'i', 'is', 'a', 'uint16):', 'string', '([]', 'byte', '{', 'byte', '(', 'i', '>>', '8', '),', 'byte', '(', 'i', '&', '0xFF', ')})', 'https://play.golang.org/p/423CAL-SJv', 'This', 'seems', 'rather', 'clunky.', 'Is', 'there', 'an', 'existing', 'library', 'function', 'to', 'do', 'this?', 'I', 'have', 'looked', 'at', 'both', 'the', 'strings', 'and', 'binary', 'packages,', 'but', 'nothing', 'seemed', 'immediately', 'obvious.']"
1650,39948383," error.
","['Given', 'this', 'Go', 'text/template', 'code:', 'Let', 's', 'say', ':', '{{', 'if', 'eq', '.', 'Foo', '""foo""', '}}', 'Hello', ',', 'StackOverflow', '!', '{{', 'else', 'if', 'eq', '.', 'Foo', '""bar""', '}}', 'Hello', ',', 'World', '!', '{{', 'end', '}}', 'We', 'get', 'the', 'following', 'output', 'in', 'case', 'Foo', 'equals', '""foo"":', 'Let', 's', 'say', ':', 'Hello', ',', 'StackOverflow', '!', '(followed', 'by', 'a', 'newline)', 'Is', 'there', 'a', 'way', 'to', 'get', 'rid', 'of', 'the', 'extra', 'newlines?', 'I', 'would', 'expect', 'that', 'this', 'can', 'be', 'accomplished', 'using', 'the', '{{-', 'and', '-}}', 'syntax:', 'Let', 's', 'say', ':', '{{-', 'if', 'eq', '.', 'Foo', '""foo""', '}}', 'Hello', ',', 'StackOverflow', '!', '{{-', 'else', 'if', 'eq', '.', 'Foo', '""bar""', '}}', 'Hello', ',', 'World', '!', '{{-', 'end', '}}', 'However,', 'that', 'yields', 'an', 'illegal', 'number', 'syntax', ':', '""-""', 'error.']"
1651,40130541,"
","['I', 'have', 'the', 'following', 'Go', 'code:', 'file', ',', 'err', ':=', 'os.Open(fileName)', 'if', 'err', '!=', 'nil', '{', 'fatalf', '(', 'service', ',', '""Error opening %q: %v""', ',', 'fileName', ',', 'err', ')', '}', '//', 'Check', 'if', 'gzip', 'should', 'be', 'applied', 'if', '*', 'metaGzip', '==', 'true', '{', 'var', 'b', 'bytes', '.', 'Buffer', 'w', ':=', 'gzip.NewWriter(&b)', 'w.Write(file)', 'w.Close()', 'file', '=', 'w', '}', 'I', 'want', 'to', 'replace', 'the', 'file', 'content', 'of', 'file', 'with', 'a', 'gzipped', 'version', 'if', 'metaGzip', '=', 'true.', 'PS:', 'I', 'followed', 'this', 'advice:', 'Getting', '""bytes.Buffer', 'does', 'not', 'implement', 'io.Writer""', 'error', 'message', 'but', 'I', 'still', 'get', 'the', 'error:', 'cannot', 'use', 'file', '(', 'type', '*', 'os', '.', 'File', ')', 'as', 'type', '[]', 'byte', 'in', 'argument', 'to', 'w', '.', 'Write']"
1652,40168086,"

What is the best workflow I can choose for a mid-size (roughly 5-10 member) team of engineers to vendor Repo C for both Repo A and Repo B? Engineers of varying abilities, most of which probably shouldn't need to know the details of this at all?  

I'm currently using govendor for this. I'd prefer not to switch but would if there is a tool that provides a better workflow.

This needs to integrate with a CI server running the builds. I can think of 3 scenarios:

Vendor Repo C into A & B:


Pros:


Reproducible Builds
Easy integration with CI

Cons:


Manual and Error Prone - Can easily vendor incorrect code
Engineers need decent knowledge of vendor tool and methodology



Symlink Repo C trunk branch into vendor folders of A & B:


Pros:


Engineers need no knowledge of vendor tool
Low Developer Maintenance

Cons:


Builds not (easily) reproducible
Possibility of including code in build that shouldn't be released
Less Flexible (Repo A and Repo B can't have differing versions of C)



Include Repo C as a git submodule or subtree in Repo A and Repo B (either utilizing vendor or not):


Pros:   


Engineers need no knowledge of vendor tool   
Easy Setup   
Less Maintenance   
Reproducible Builds

Cons:   


Having to use git submodule or subtree



Finding surprisingly little about this question on the internet.  Is there some idiomatic way of doing this?  I'm sure there are other ways of doing this; what am I missing?
","['Trying', 'to', 'move', 'to', 'the', 'officially', 'supported', 'Golang', 'vendoring', 'solution', 'from', 'legacy', 'Godeps', 'workflow.', 'Scenario:', 'Repo', 'A', '===', '========>', 'Repo', 'C', '(', 'shared', 'library', 'code', ')', '/', 'Repo', 'B', '===', 'What', 'is', 'the', 'best', 'workflow', 'I', 'can', 'choose', 'for', 'a', 'mid-size', '(roughly', '5-10', 'member)', 'team', 'of', 'engineers', 'to', 'vendor', 'Repo', 'C', 'for', 'both', 'Repo', 'A', 'and', 'Repo', 'B?', 'Engineers', 'of', 'varying', 'abilities,', 'most', 'of', 'which', 'probably', ""shouldn't"", 'need', 'to', 'know', 'the', 'details', 'of', 'this', 'at', 'all?', ""I'm"", 'currently', 'using', 'govendor', 'for', 'this.', ""I'd"", 'prefer', 'not', 'to', 'switch', 'but', 'would', 'if', 'there', 'is', 'a', 'tool', 'that', 'provides', 'a', 'better', 'workflow.', 'This', 'needs', 'to', 'integrate', 'with', 'a', 'CI', 'server', 'running', 'the', 'builds.', 'I', 'can', 'think', 'of', '3', 'scenarios:', 'Vendor', 'Repo', 'C', 'into', 'A', '&', 'B:', 'Pros:', 'Reproducible', 'Builds', 'Easy', 'integration', 'with', 'CI', 'Cons:', 'Manual', 'and', 'Error', 'Prone', '-', 'Can', 'easily', 'vendor', 'incorrect', 'code', 'Engineers', 'need', 'decent', 'knowledge', 'of', 'vendor', 'tool', 'and', 'methodology', 'Symlink', 'Repo', 'C', 'trunk', 'branch', 'into', 'vendor', 'folders', 'of', 'A', '&', 'B:', 'Pros:', 'Engineers', 'need', 'no', 'knowledge', 'of', 'vendor', 'tool', 'Low', 'Developer', 'Maintenance', 'Cons:', 'Builds', 'not', '(easily)', 'reproducible', 'Possibility', 'of', 'including', 'code', 'in', 'build', 'that', ""shouldn't"", 'be', 'released', 'Less', 'Flexible', '(Repo', 'A', 'and', 'Repo', 'B', ""can't"", 'have', 'differing', 'versions', 'of', 'C)', 'Include', 'Repo', 'C', 'as', 'a', 'git', 'submodule', 'or', 'subtree', 'in', 'Repo', 'A', 'and', 'Repo', 'B', '(either', 'utilizing', 'vendor', 'or', 'not):', 'Pros:', 'Engineers', 'need', 'no', 'knowledge', 'of', 'vendor', 'tool', 'Easy', 'Setup', 'Less', 'Maintenance', 'Reproducible', 'Builds', 'Cons:', 'Having', 'to', 'use', 'git', 'submodule', 'or', 'subtree', 'Finding', 'surprisingly', 'little', 'about', 'this', 'question', 'on', 'the', 'internet.', 'Is', 'there', 'some', 'idiomatic', 'way', 'of', 'doing', 'this?', ""I'm"", 'sure', 'there', 'are', 'other', 'ways', 'of', 'doing', 'this;', 'what', 'am', 'I', 'missing?']"
1653,40188257,"

And while I grasp that the path is incomplete from a remote environment perspective, I also know that relative paths won't fix it, and I have to assume there's some environmental variable that my ignorance is making me blind to in this context.

It's also worth noting that all of the go get calls for remote packages play nicely as expected.

Any help will be greatly appreciated. Refining my google searches is just bringing back the same stack of seemingly unrelated questions.
","[""I'm"", 'new', 'to', 'Go,', 'and', 'I', 'imagine', 'this', 'is', 'an', 'obvious', 'situation', 'for', 'anyone', ""who's"", 'worked', 'with', 'Go', 'deployment', 'in', 'the', 'past.', 'In', 'the', 'most', 'TL;DR', 'sense,', 'I', 'built', 'out', 'a', 'demo', 'project', 'from', 'Scotch.IO', 'for', 'a', 'simple', 'todo', 'list', 'using', 'Go', '(https://scotch.io/tutorials/create-a-single-page-app-with-go-echo-and-vue),', 'and', 'it', 'works', 'flawlessly', 'on', 'my', 'machine,', 'but', 'it', 'breaks', 'in', 'CircleCI', 'when', 'it', 'attempts', 'to', 'import', 'locally', 'defined', 'packages:', 'import', '(', '""database/sql""', '""net/http""', '""strconv""', '""go-todo/models""', '// <- This', '""github.com/labstack/echo""', ')', 'I', 'know', ""there's"", 'no', 'real', 'reason', 'to', 'deploy', 'an', 'app', 'like', 'this,', 'but', ""I'd"", 'like', 'to', 'understand', 'it', 'better', 'before', 'diving', 'into', 'larger', 'projects', 'where', 'deployment', 'is', 'essential.', 'The', 'logs', 'at', 'the', 'breakpoint', 'read:', 'package', 'go', '-', 'todo/handlers: unrecognized import path ""go-todo/handlers""', '(', 'import', 'path', 'does', 'not', 'begin', 'with', 'hostname', ')', 'package', 'go', '-', 'todo/models: unrecognized import path ""go-todo/models""', '(', 'import', 'path', 'does', 'not', 'begin', 'with', 'hostname', ')', 'And', 'while', 'I', 'grasp', 'that', 'the', 'path', 'is', 'incomplete', 'from', 'a', 'remote', 'environment', 'perspective,', 'I', 'also', 'know', 'that', 'relative', 'paths', ""won't"", 'fix', 'it,', 'and', 'I', 'have', 'to', 'assume', ""there's"", 'some', 'environmental', 'variable', 'that', 'my', 'ignorance', 'is', 'making', 'me', 'blind', 'to', 'in', 'this', 'context.', ""It's"", 'also', 'worth', 'noting', 'that', 'all', 'of', 'the', 'go', 'get', 'calls', 'for', 'remote', 'packages', 'play', 'nicely', 'as', 'expected.', 'Any', 'help', 'will', 'be', 'greatly', 'appreciated.', 'Refining', 'my', 'google', 'searches', 'is', 'just', 'bringing', 'back', 'the', 'same', 'stack', 'of', 'seemingly', 'unrelated', 'questions.']"
1654,40207528,"

I felt like the struct is used to store the information, and the method of the struct should be used to modify the value of the struct. 

But right now I made a struct just because I want to treat it like a class and solve the dependency problem, is it bad to use such approach in Golang?
","['I', 'wrote', 'a', 'lot', 'PHP', 'with', 'the', 'OOP', 'frameworks', 'before,', 'and', ""I'm"", 'learning', 'Golang,', 'When', 'I', 'was', 'using', 'PHP,', 'The', 'class', 'is', 'useful', 'that', 'I', 'could', 'pass', 'a', '$model', 'in', 'to', 'my', 'class', 'then', 'share', 'it', 'between', 'functions:', 'class', 'User', '{', 'func', 'tion', '__construct', '(', 'UserModel', '$', 'model', ')', '{', '$', 'this', '->', 'model', '=', '$', 'model', '}', 'func', 'tion', 'delete', '($', 'id', ')', '{', '$', 'this', '->', 'model', '->', 'delete', '($', 'id', ');', '}', 'func', 'tion', 'update', '($', 'id', ')', '{', '$', 'this', '->', 'model', '->', 'update', '($', 'id', ');', '}', '}', '$', 'UserModel', '=', 'new', 'UserModel', '();', '$', 'User', '=', 'new', 'User', '($', 'UserModel', ');', '$', 'User', '->', 'delete', '(', '1', ');', 'But', ""there's"", 'no', 'class', 'in', 'Golang,', 'I', 'knew', 'that', 'I', 'could', 'treat', 'structs', 'like', 'a', 'class:', 'type', 'User', 'struct', '{', 'model', '*', 'models', '.', 'User', '}', 'func', '(', 'u', '*', 'User', ')', 'Delete', '(', 'id', 'int', ')', '{', 'u', '.', 'model.Delete(id)', '}', 'func', '(', 'u', '*', 'User', ')', 'Update', '(', 'id', 'int', ')', '{', 'u', '.', 'model.Update(id)', '}', 'userModel', ':=', '&', 'models', '.', 'User', '{}', 'user', ':=', 'User', '{', 'model', ':', 'userModel', '}', 'user.Delete(1)', 'I', 'felt', 'like', 'the', 'struct', 'is', 'used', 'to', 'store', 'the', 'information,', 'and', 'the', 'method', 'of', 'the', 'struct', 'should', 'be', 'used', 'to', 'modify', 'the', 'value', 'of', 'the', 'struct.', 'But', 'right', 'now', 'I', 'made', 'a', 'struct', 'just', 'because', 'I', 'want', 'to', 'treat', 'it', 'like', 'a', 'class', 'and', 'solve', 'the', 'dependency', 'problem,', 'is', 'it', 'bad', 'to', 'use', 'such', 'approach', 'in', 'Golang?']"
1655,40216428,"I have started programming in Go and I was wondering when new(Object) is used it allocates memory to the size of that object right? If this is the case how do I free this memory once I have finished using the object? 

I ask this because in C++ when new is used on an object you can delete the object once there is no longer any need for the object to be stored.

I have been searching to see if Go does have delete or something similar to C++ but I have been unable to find anything.

Any help is much appreciated.
","['I', 'felt', 'like', 'the', 'struct', 'is', 'used', 'to', 'store', 'the', 'information,', 'and', 'the', 'method', 'of', 'the', 'struct', 'should', 'be', 'used', 'to', 'modify', 'the', 'value', 'of', 'the', 'struct.', 'But', 'right', 'now', 'I', 'made', 'a', 'struct', 'just', 'because', 'I', 'want', 'to', 'treat', 'it', 'like', 'a', 'class', 'and', 'solve', 'the', 'dependency', 'problem,', 'is', 'it', 'bad', 'to', 'use', 'such', 'approach', 'in', 'Golang?']"
1656,40262971,"I know languages like c# aren't vulnerable to buffer overflows unless you marshal or use unsafe code. But is go vulnerable for buffer overflows?
","['I', 'know', 'languages', 'like', 'c#', ""aren't"", 'vulnerable', 'to', 'buffer', 'overflows', 'unless', 'you', 'marshal', 'or', 'use', 'unsafe', 'code.', 'But', 'is', 'go', 'vulnerable', 'for', 'buffer', 'overflows?']"
1657,40266003,"
","['I', 'have', 'following', 'code', 'for', 'Golang', 'docs', 'parsing.', '""ts""', 'is', 'ast.TypeSpec.', 'I', 'can', 'check', 'StructType', 'and', 'etc.', 'But,', 'ts.Type', 'is', '""int"".', 'How', 'can', 'I', 'assert', 'for', 'int', 'and', 'other', 'basic', 'type?', 'ts', ',', 'ok', ':=', 'd', '.', 'Decl', '.(*', 'ast', '.', 'TypeSpec', ')', 'switch', 'ts', '.', 'Type', '.(', 'type', ')', '{', 'case', '*', 'ast', '.', 'StructType', ':', 'fmt.Println(""StructType"")', 'case', '*', 'ast', '.', 'ArrayType', ':', 'fmt.Println(""ArrayType"")', 'case', '*', 'ast', '.', 'InterfaceType', ':', 'fmt.Println(""InterfaceType"")', 'case', '*', 'ast', '.', 'MapType', ':', 'fmt.Println(""MapType"")', '}']"
1658,40288351,"

But dest=theOrigin doesn't work while dest have the same struct as theOrigin.

Thanks in advance!
","[""I'm"", 'currently', 'trying', 'to', 'copy', 'a', 'struct', 'into', 'another', 'structure', 'which', 'implement', 'an', 'interface.', 'My', 'code', 'is', 'the', 'following:', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'intf', 'interface', '{', 'SaySomething', '(', 'string', ')', 'LaunchTheDevice', '(', 'origin', ')', '}', 'type', 'destination', 'struct', '{', 'origin', '}', 'func', '(', 'dest', '*', 'destination', ')', 'SaySomething', '(', 's', 'string', ')', '{', 'fmt.Println(""I\'m saying --> "",s)', '}', 'func', '(', 'dest', '*', 'destination', ')', 'LaunchTheDevice', '(', 'theOrigin', 'origin', ')', '{', '*', 'dest', '=', 'theOrigin', '}', 'type', 'origin', 'struct', '{', 'name', 'string', 'value', 'string', 'infos', 'string', '}', 'func', 'main', '()', '{', 'firstValue', ':=', 'new', '(', 'origin', ')', 'firstValue', '.', 'name', '=', '""Nyan""', 'firstValue', '.', 'value', '=', '""I\'m the only one""', 'firstValue', '.', 'infos', '=', '""I\'m a cat""', 'secondValue', ':=', 'new', '(', 'destination', ')', 'secondValue.LaunchTheDevice(*firstValue)', '}', 'I', 'want', 'that', 'the', 'function', 'LaunchTheDevice()', 'set', 'the', 'values', 'of', 'destination.', 'But', 'when', 'I', 'run', 'my', 'code', 'I', 'get', 'this', 'error:', 'cannot', 'use', 'theOrigin', '(', 'type', 'origin', ')', 'as', 'type', 'destination', 'in', 'assignment', 'So', 'how', 'can', 'I', 'do', 'this?', 'And', 'why', 'I', ""can't"", 'run', 'my', 'code?', 'I', ""don't"", 'understand', 'because', 'I', 'can', 'type', 'dest', '.', 'name', '=', '""a value""', 'dest', '.', 'value', '=', '""another value""', 'dest', '.', 'infos', '=', '""another value""', 'But', 'dest=theOrigin', ""doesn't"", 'work', 'while', 'dest', 'have', 'the', 'same', 'struct', 'as', 'theOrigin.', 'Thanks', 'in', 'advance!']"
1659,40360936,"

The thing is, when I change the type to a string, it works fine. How do I use an object as an input arg?

Thanks!
","[""I'm"", 'attempting', 'to', 'pass', 'an', 'object', 'as', 'an', 'argument', 'to', 'a', 'query', '(rather', 'than', 'a', 'scalar).', 'From', 'the', 'docs', 'it', 'seems', 'that', 'this', 'should', 'be', 'possible,', 'but', 'I', ""can't"", 'figure', 'out', 'how', 'to', 'make', 'it', 'work.', ""I'm"", 'using', 'graphql-go,', 'here', 'is', 'the', 'test', 'schema:', 'var', 'fileDocumentType', '=', 'graphql', '.', 'NewObject', '(', 'graphql', '.', 'ObjectConfig', '{', 'Name', ':', '""FileDocument""', ',', 'Fields', ':', 'graphql', '.', 'Fields', '{', '""id""', ':', '&', 'graphql', '.', 'Field', '{', 'Type', ':', 'graphql', '.', 'String', ',', 'Resolve', ':', 'func', '(', 'p', 'graphql', '.', 'ResolveParams', ')', '(', 'interface', '{},', 'error', ')', '{', 'if', 'fileDoc', ',', 'ok', ':=', 'p', '.', 'Source', '.(', 'data_format', '.', 'FileDocument', ');', 'ok', '{', 'return', 'fileDoc', '.', 'Id', ',', 'nil', '}', 'return', '""""', ',', 'nil', '},', '},', '""tags""', ':', '&', 'graphql', '.', 'Field', '{', 'Type', ':', 'graphql.NewList(tagsDataType)', ',', 'Args', ':', 'graphql', '.', 'FieldConfigArgument', '{', '""tags""', ':', '&', 'graphql', '.', 'ArgumentConfig', '{', 'Type', ':', 'tagsInputType', ',', '},', '},', 'Resolve', ':', 'func', '(', 'p', 'graphql', '.', 'ResolveParams', ')', '(', 'interface', '{},', 'error', ')', '{', 'fmt.Println(p.Source)', 'fmt.Println(p.Args)', 'if', 'fileDoc', ',', 'ok', ':=', 'p', '.', 'Source', '.(', 'data_format', '.', 'FileDocument', ');', 'ok', '{', 'return', 'fileDoc', '.', 'Tags', ',', 'nil', '}', 'return', 'nil', ',', 'nil', '},', '},', '},', '})', 'And', 'the', 'inputtype', ""I'm"", 'attempting', 'to', 'use', ""(I've"", 'tried', 'both', 'an', 'InputObject', 'and', 'a', 'standard', 'Object)', 'var', 'tagsInputType', '=', 'graphql', '.', 'NewInputObject', '(', 'graphql', '.', 'InputObjectConfig', '{', 'Name', ':', '""tagsInput""', ',', 'Fields', ':', 'graphql', '.', 'Fields', '{', '""keyt""', ':', '&', 'graphql', '.', 'Field', '{', 'Type', ':', 'graphql', '.', 'String', ',', '},', '""valuet""', ':', '&', 'graphql', '.', 'Field', '{', 'Type', ':', 'graphql', '.', 'String', ',', '},', '},', '})', 'And', 'here', 'is', 'the', 'graphql', 'query', ""I'm"", 'using', 'to', 'test:', '{', 'list', '(', 'location', ':', '""blah""', ',', 'rule', ':', '""blah""', ')', '{', 'id', ',', 'tags', '(', 'tags', ':{', 'keyt', ':', '""test""', ',', 'valuet', ':', '""test""', '})', '{', 'key', ',', 'value', '},', '{', 'datacentre', ',', 'handlerData', '{', 'key', ',', 'value', '}', '}', '}', '}', ""I'm"", 'getting', 'the', 'following', 'error:', 'wrong', 'result', ',', 'unexpected', 'errors', ':', '[', 'Argument', '""tags""', 'has', 'invalid', 'value', '{', 'keyt', ':', '""test""', ',', 'valuet', ':', '""test""', '}.', 'In', 'field', '""keyt""', ':', 'Unknown', 'field', '.', 'In', 'field', '""valuet""', ':', 'Unknown', 'field', '.]', 'The', 'thing', 'is,', 'when', 'I', 'change', 'the', 'type', 'to', 'a', 'string,', 'it', 'works', 'fine.', 'How', 'do', 'I', 'use', 'an', 'object', 'as', 'an', 'input', 'arg?', 'Thanks!']"
1660,40370006,"

This looks like a struct with an embedded field sync.Mutex but I can't get my head around the second set of braces. It compiles and executes but what's up? Why does the label on the make instruction matter (it does) and the comma? Thanks...
","['var', 'cache', '=', 'struct', '{', 'sync', '.', 'Mutex', 'map', 'ping', 'map', '[', 'string', ']', 'string', '}', '{', 'map', 'ping', ':', 'make', '(', 'map', '[', 'string', ']', 'string', '),', '}', 'This', 'looks', 'like', 'a', 'struct', 'with', 'an', 'embedded', 'field', 'sync.Mutex', 'but', 'I', ""can't"", 'get', 'my', 'head', 'around', 'the', 'second', 'set', 'of', 'braces.', 'It', 'compiles', 'and', 'executes', 'but', ""what's"", 'up?', 'Why', 'does', 'the', 'label', 'on', 'the', 'make', 'instruction', 'matter', '(it', 'does)', 'and', 'the', 'comma?', 'Thanks...']"
1661,40389137,"

Basically there is no great difference in my implementation from that of docker logs https://github.com/docker/docker/blob/master/cli/command/container/logs.go, hence I'm wondering what causes this issues.
","[""I'm"", 'trying', 'to', 'get', 'the', 'logs', 'from', 'multiple', 'docker', 'containers', 'at', 'once', '(order', ""doesn't"", 'matter).', 'This', 'works', 'as', 'expected', 'if', 'type', 's', '.', 'ContainerLogsOption', '.', 'Follow', 'is', 'set', 'to', 'false.', 'If', 'types.ContainerLogsOption.Follow', 'is', 'set', 'to', 'true', 'sometimes', 'the', 'log', 'output', 'get', 'stuck', 'after', 'a', 'few', 'logs', 'and', 'no', 'follow', 'up', 'logs', 'are', 'printed', 'to', 'stdout.', 'If', 'the', 'output', ""doesn't"", 'get', 'stuck', 'it', 'works', 'as', 'expected.', 'Additionally', 'if', 'I', 'restart', 'one', 'or', 'all', 'of', 'the', 'containers', 'the', 'command', ""doesn't"", 'exit', 'like', 'docker', 'logs', '-', 'f', 'containerName', 'does.', 'func', '(', 'w', '*', 'Whatever', ')', 'Logs', '(', 'options', 'LogOptions', ')', '{', 'readers', ':=', '[]', 'io', '.', 'Reader', '{}', 'for', '_', ',', 'container', ':=', 'range', 'options', '.', 'Containers', '{', 'responseBody', ',', 'err', ':=', 'w', '.', 'Docker', '.', 'Client.ContainerLogs(context.Background()', ',', 'container', ',', 'type', 's', '.', 'ContainerLogsOptions', '{', 'ShowStdout', ':', 'true', ',', 'ShowStderr', ':', 'true', ',', 'Follow', ':', 'options', '.', 'Follow', ',', '})', 'defer', 'responseBody.Close()', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'readers', '=', 'append', '(', 'readers', ',', 'responseBody', ')', '}', '//', 'concatenate', 'all', 'readers', 'to', 'one', 'multiReader', ':=', 'io.MultiReader(readers...)', '_', ',', 'err', ':=', 'stdcopy.StdCopy(os.Stdout, os.Stderr, multiReader)', 'if', 'err', '!=', 'nil', '&&', 'err', '!=', 'io', '.', 'EOF', '{', 'log.Fatal(err)', '}', '}', 'Basically', 'there', 'is', 'no', 'great', 'difference', 'in', 'my', 'implementation', 'from', 'that', 'of', 'docker', 'logs', 'https://github.com/docker/docker/blob/master/cli/command/container/logs.go,', 'hence', ""I'm"", 'wondering', 'what', 'causes', 'this', 'issues.']"
1662,40397781,"
","['gometalinter', 'and', 'errcheck', 'return', 'me', 'a', 'warning', 'about', 'deferring', 'a', 'function', 'which', 'returns', 'a', 'variable.', 'Example', 'in', 'a', 'web', 'request:', 'defer', 'r', '.', 'Body.Close()', 'In', 'this', 'case,', 'Close', 'returns', 'an', 'error', 'variable', 'and', ""it's"", 'not', 'checked.', 'Is', 'the', 'best', 'method', '/', 'idiomatic', 'to', 'defer', 'it', 'inside', 'another', 'function?', 'defer', 'func', '()', '{', 'err', ':=', 'r', '.', 'Body.Close()', 'if', 'err', '!=', 'nil', '{', '//', 'fmt,', 'panic', 'or', 'whatever', '}', '}()']"
1663,40411832,"

It keeps showing me this 'error' Is anyone here familiar with the installation process? 
","['Andres', '-', 'Air', ':', 'iivri', '.', 'andre', '$', 'go', 'get', 'github', '.', 'co/beego/bee', 'package', 'github', '.', 'co/beego/bee: unrecognized import path ""github.co/beego/bee"" (https fetch: Get https://github.co/beego/bee?go-get=1: dial tcp 199.59.243.120:443: i/o', 'timeout', 'It', 'keeps', 'showing', 'me', 'this', ""'error'"", 'Is', 'anyone', 'here', 'familiar', 'with', 'the', 'installation', 'process?']"
1664,40468404,"

when running it with go run I want it to be written in a cleared bash window. Is it possible to do so without using any additional open-source repositories? 

Thanks in advance.
","['lets', 'say', 'I', 'have', 'this', 'code:', 'package', 'main', 'import', '(', '""io/ioutil""', '""fmt""', ')', 'func', 'check', '(', 'err', 'error', ')', '{', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', '}', 'func', 'main', '()', '{', 'file', ',', 'err', ':=', 'ioutil.ReadFile(""test.txt"")', 'check', '(', 'err', ')', 'fmt.Print(string(file))', '}', 'when', 'running', 'it', 'with', 'go', 'run', 'I', 'want', 'it', 'to', 'be', 'written', 'in', 'a', 'cleared', 'bash', 'window.', 'Is', 'it', 'possible', 'to', 'do', 'so', 'without', 'using', 'any', 'additional', 'open-source', 'repositories?', 'Thanks', 'in', 'advance.']"
1665,40502309,"I am using Go with logrus, however I found the time field is always formatted in local time. How can I change the time to UTC time for logrus?

Thanks
","['I', 'am', 'using', 'Go', 'with', 'logrus,', 'however', 'I', 'found', 'the', 'time', 'field', 'is', 'always', 'formatted', 'in', 'local', 'time.', 'How', 'can', 'I', 'change', 'the', 'time', 'to', 'UTC', 'time', 'for', 'logrus?', 'Thanks']"
1666,40505410,"

just after the server name that doesn't have a key outside, which again looks confusing to me. I tried a good number of combinations to understand how this could be unmarshalled, but I failed.

What is a working approach to get the json fields unmarshal into a struct? Can someone help me understand this please?

Thank you.
","['I', 'am', 'having', 'trouble', 'unmarshalling', 'a', 'json', 'data', 'of', 'the', 'below', 'format', 'to', 'a', 'struct.', 'The', 'structure', 'of', 'the', 'json', 'looks', 'a', 'bit', 'confusing', 'to', 'me,', 'so', 'apologies', 'for', 'all', 'the', 'dumb', 'things', 'I', 'am', 'doing', 'to', 'unmarshal', 'it.', '{', '""message""', ':', '{', '""Server1.example.com""', ':', '[', '{', '""application""', ':', '""Apache""', ',', '""host""', ':', '{', '""name""', ':', '""/^Server-[13456]/""', '},', '""owner""', ':', '""User1""', ',', '""project""', ':', '""Web""', ',', '""subowner""', ':', '""User2""', '}', '],', '""Server2.example.com""', ':', '[', '{', '""application""', ':', '""Mysql""', ',', '""host""', ':', '{', '""name""', ':', '""/^Server[23456]/""', '},', '""owner""', ':', '""User2""', ',', '""project""', ':', '""DB""', ',', '""subowner""', ':', '""User3""', '}', ']', '},', '""response_ms""', ':', '659', ',', '""success""', ':', 'true', '}', 'I', 'am', 'trying', 'to', 'unmarshal', 'it', 'using', 'the', 'following', 'struct.', 'type', 'ServerDetails', 'struct', '{', 'Message', 'struct', '{', 'Hostname', 'struct', '{', 'Details', 'struct', '{', 'Application', 'string', 'json', ':', '""application""', '}', 'json', ':', '""-""', '}', 'json', ':', '""-""', '}', 'json', ':', '""message""', '}', 'The', 'fields', 'Server', '[', '0', '-', '9', '].', 'example', '.', 'com', 'will', 'be', 'unknown', 'at', 'the', 'time', 'of', 'generating,', 'and', 'will', 'change,', 'and', 'there', 'is', 'this', 'field', '{', '""application""', ':', '""Apache""', ',', '""host""', ':', '{', '""name""', ':', '""/^Server-[13456]/""', '},', 'just', 'after', 'the', 'server', 'name', 'that', ""doesn't"", 'have', 'a', 'key', 'outside,', 'which', 'again', 'looks', 'confusing', 'to', 'me.', 'I', 'tried', 'a', 'good', 'number', 'of', 'combinations', 'to', 'understand', 'how', 'this', 'could', 'be', 'unmarshalled,', 'but', 'I', 'failed.', 'What', 'is', 'a', 'working', 'approach', 'to', 'get', 'the', 'json', 'fields', 'unmarshal', 'into', 'a', 'struct?', 'Can', 'someone', 'help', 'me', 'understand', 'this', 'please?', 'Thank', 'you.']"
1667,40540490,"

How do I define the types for such a parameter?
","[""I'm"", 'very', 'much', 'a', 'newb', 'in', 'Go', 'and', ""I'm"", 'trying', 'to', 'build', 'a', 'function', 'with', 'this', 'general', 'aspect:', 'map', 'OfResults', '=', 'ThingDoer', '([', '[', '""One""', ',', 'int', ',', '-', '1', ',', 'true', '],', '[', '""Flying""', ',', 'string', ',', '""""', ',', 'true', '],', '[', '""Banana""', ',', 'bool', ',', 'false', ',', 'true', ']', '])', 'But', 'I', 'cannot', 'even', 'figure', 'its', 'signature', '(is', 'signature', 'even', 'the', 'proper', 'term', 'for', 'it', 'in', 'Go?', 'the', 'definition', 'of', 'all', 'its', 'params', 'etc).', ""I'm"", 'talking', 'about', 'this', 'construct:', 'func', 'ThingDoer', '(', 'config', 'ThisIsWhatICannotFigure', ')', 'map', '[', 'string', ']', 'Results', '{', '//', 'the', 'body', 'of', 'my', 'function', '}', 'How', 'do', 'I', 'define', 'the', 'types', 'for', 'such', 'a', 'parameter?']"
1668,40575033,"

it's ok now.
","['when', 'I', 'run', 'the', 'code', 'snippet', 'bellow,', 'it', 'raise', 'a', 'error', 'a.test', 'undefined', '(type', 'interface', '{}', 'is', 'interface', 'with', 'no', 'methods)', 'It', 'seem', 'the', 'type', 'switch', 'does', 'not', 'take', 'effect.', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'A', 'struct', '{', 'a', 'int', '}', 'func', '(', 'this', '*', 'A', ')', 'test', '(){', 'fmt.Println(this)', '}', 'type', 'B', 'struct', '{', 'A', '}', 'func', 'main', '()', '{', 'var', 'foo', 'interface', '{}', 'foo', '=', 'A', '{}', 'switch', 'a', ':=', 'foo', '.(', 'type', '){', 'case', 'B', ',', 'A', ':', 'a.test()', '}', '}', 'If', 'I', 'change', 'it', 'to', 'switch', 'a', ':=', 'foo', '.(', 'type', '){', 'case', 'A', ':', 'a.test()', '}', ""it's"", 'ok', 'now.']"
1669,40589353,"

but with hours, minutes, and seconds.
","['How', 'do', 'I', 'add', 'hours,', 'minutes,', 'and', 'seconds', '(defined', 'as', 'ints)', 'to', 'the', 'current', 'time,', 'similar', 'to', 'AddDate?', 'timein', ':=', 'time.Now().Local().AddDate(Hours, Mins, Sec)', 'but', 'with', 'hours,', 'minutes,', 'and', 'seconds.']"
1670,40595563,"
","['Based', 'on', 'this', 'fairly', 'simple', 'code', 'based', 'on', 'the', 'sort', 'package.', 'The', 'response', 'index', 'of', 'o1', 'is', 'invalid', 'as', 'pointed', 'by', '@JimB', 'because', 'a', 'bigger', 'or', 'equals', 'operator', 'is', 'required', 'for', 'binary', 'search', 'l', ':=', '[]', 'string', '{', '""o1""', ',', '""o2""', ',', '""o3""', '}', 'i1', ':=', 'sort.Search(len(l), func(i int) bool { return strings.EqualFold(l[i], ""o1"") })', 'fmt.Println(""o1:"", i1)', '//PRINTS 3 - WRONG', 'https://play.golang.org/p/nUs-ozTYsY', 'The', 'working', 'solution', 'is:', 'l', ':=', '[]', 'string', '{', '""o1""', ',', '""o2""', ',', '""o3""', '}', 'i1', ':=', 'sort.Search(len(l), func(i int) bool { return l[i] >= ""o1"" })', 'fmt.Println(""o1:"", i1)', 'https://play.golang.org/p/WRsijy_xzV', 'However', 'this', 'still', ""it's"", 'important', 'to', 'bare', 'in', 'mind', 'a', 'important', 'last', 'check.', 'The', 'return', 'value', 'is', 'the', 'index', 'to', 'insert', 'x', ',', 'which', 'means', 'that', 'you', 'can', 'end', 'up', 'with', 'something', 'like:', 'o1', ':', '0', '(', 'index', '0', ')', 'o2', ':', '1', 'o3', ':', '2', 'o777', ':', '0', '(', 'Same', '0', 'index', '!)', 'Therefore', ""it's"", 'important', 'as', 'pointed', 'by', '@JimB', 'to', 'check', 'for', 'data[i]', '==', '23', 'separately.', 'if', 'i', 'data', '[', 'i', ']', '==', 'x', '<---', '{', 'x', 'is', 'present', 'at', 'data', '[', 'i', ']', '}', 'else', '{', '...', '}']"
1671,40643379,"
","['I', 'can', 'see', 'two', 'main', 'issues', 'in', 'the', 'example', 'code', 'below,', 'but', 'I', ""don't"", 'know', 'how', 'to', 'solve', 'them', 'correctly.', 'If', 'the', 'timeout', 'handler', 'does', 'not', 'get', 'the', 'signal', 'through', 'the', 'errCh', 'that', 'the', 'next', 'handler', 'has', 'completed', 'or', 'an', 'error', 'occured,', 'it', 'will', 'reply', '""408', 'Request', 'timeout""', 'to', 'the', 'request.', 'The', 'problem', 'here', 'is', 'that', 'the', 'ResponseWriter', 'is', 'not', 'safe', 'to', 'be', 'used', 'by', 'multiple', 'goroutines.', 'And', 'the', 'timeout', 'handler', 'starts', 'a', 'new', 'goroutine', 'when', 'executing', 'the', 'next', 'handler.', 'Issues:', 'How', 'to', 'prevent', 'the', 'next', 'handler', 'from', 'writing', 'into', 'the', 'ResponseWriter', 'when', 'the', ""ctx's"", 'Done', 'channel', 'times', 'out', 'in', 'the', 'timeout', 'handler.', 'How', 'to', 'prevent', 'the', 'timeout', 'handler', 'from', 'replying', '408', 'status', 'code', 'when', 'the', 'next', 'handler', 'is', 'writing', 'into', 'the', 'ResponseWriter', 'but', 'it', 'has', 'not', 'finished', 'yet', 'and', 'the', ""ctx's"", 'Done', 'channel', 'times', 'out', 'in', 'the', 'timeout', 'handler.', 'package', 'main', 'import', '(', '""context""', '""fmt""', '""net/http""', '""time""', ')', 'func', 'main', '()', '{', 'http.Handle(""/race"", handlerFunc(timeoutHandler))', 'http.ListenAndServe("":8080"", nil)', '}', 'func', 'timeoutHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', 'error', '{', 'const', 'seconds', '=', '1', 'ctx', ',', 'cancel', ':=', 'context.WithTimeout(r.Context(), time.Duration(seconds)*time.Second)', 'defer', 'cancel', '()', 'r', '=', 'r.WithContext(ctx)', 'errCh', ':=', 'make', '(', 'chan', 'error', ',', '1', ')', 'go', 'func', '()', '{', '//', 'w', 'is', 'not', 'safe', 'for', 'concurrent', 'use', 'by', 'multiple', 'goroutines', 'errCh', '<-', 'nextHandler', '(', 'w', ',', 'r', ')', '}()', 'select', '{', 'case', 'err', ':=', '<-', 'errCh', ':', 'return', 'err', 'case', '<-', 'ctx.Done()', ':', '//', 'w', 'is', 'not', 'safe', 'for', 'concurrent', 'use', 'by', 'multiple', 'goroutines', 'http.Error(w, ""Request timeout"", 408)', 'return', 'nil', '}', '}', 'func', 'nextHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', 'error', '{', '//', 'just', 'for', 'fun', 'to', 'simulate', 'a', 'better', 'race', 'condition', 'const', 'seconds', '=', '1', 'time.Sleep(time.Duration(seconds) * time.Second)', 'fmt.Fprint(w, ""nextHandler"")', 'return', 'nil', '}', 'type', 'handlerFunc', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', 'error', 'func', '(', 'fn', 'handlerFunc', ')', 'ServeHTTP', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'if', 'err', ':=', 'fn', '(', 'w', ',', 'r', ');', 'err', '!=', 'nil', '{', 'http.Error(w, ""Server error"", 500)', '}', '}']"
1672,40646106,"

question:

how to use -Xlinker in cgo?
","['env:', 'gcc3.4.5', 'go1.3', 'linux2.6.32', 'centos4', 'problem:', 'I', 'want', 'to', 'pass', '-Xlinker', '""-(""', 'and', '-Xlinker', '""-)""', 'to', 'cgo', 'LDFLAGS,', 'in', 'order', 'to', 'solve', 'static', 'library', 'order', 'problem.', 'But', 'it', 'seems', 'that', 'cgo', 'does', 'not', 'support', 'this,', 'failed', 'when', 'compile:', 'xxx', '.', 'go', ':', 'malformed', 'cgo', 'argument', ':', '-(', 'The', 'cgo', 'directive', 'which', 'sets', 'LDFLAGS', 'in', 'xxx.go:', '//', '#cgo', 'LDFLAGS:', '-Xlinker', '""-(""', 'libyyy.a', 'libzzz.a', '-lstdc++', '-Xlinker', '""-)""', 'import', '""C""', 'question:', 'how', 'to', 'use', '-Xlinker', 'in', 'cgo?']"
1673,40668910,"

But I don't get anything in s. It is always a blank struct.

What am I doing wrong here?
","['I', 'have', 'written', 'following', 'code', 'snippet', 'in', 'trial.go:', 'type', 'Mine', 'struct', '{', 'A', 'string', 'json', ':', '""a""', '}', 'func', 'main', '(){', 's', ':=', 'Mine', '{}', 'v', ':=', 'os', '.', 'Args', '[', '1', ']//', '{', '""a""', ':', '""1""', '}', 'fmt.Println(v)', 'fmt.Println(reflect.TypeOf(v))', 'json.Unmarshal([]byte(v), &s)', 'fmt.Println(s)', '}', 'I', 'am', 'running', 'this', 'file', 'as', 'below:', 'go', 'run', 'trial', '.', 'go', '{', '""A""', ':', '""1""', '}', 'But', 'I', ""don't"", 'get', 'anything', 'in', 's.', 'It', 'is', 'always', 'a', 'blank', 'struct.', 'What', 'am', 'I', 'doing', 'wrong', 'here?']"
1674,40688567,"

I'm not understanding how it can be finding all of the other Py* functions and types (PyArgs_ParseTuple and PyLong_FromLong work just fine), but can't find Py_None. The Python library is obviously being loaded. What's going on here?
","[""I'm"", 'wrapping', 'a', 'Go', 'library', 'for', 'Python.', 'I', 'need', 'to', 'be', 'able', 'to', 'return', 'None,', 'but', ""it's"", 'not', 'finding', 'it', 'at', 'compile', 'time:', '/*', 'cgo', 'pkg', '-', 'config', ':', 'python3', 'define', 'Py_LIMITED_API', 'include', '*/', 'import', '""C""', '//', 'export', 'Nothing', 'func', 'Nothing', '(', 'self', ',', 'args', '*', 'C', '.', 'PyObject', ')', '(', 'status', '*', 'C', '.', 'PyObject', ')', '{', 'C.Py_IncRef(C.Py_None)', 'return', 'C', '.', 'Py_None', '}', ""Here's"", 'the', 'output', 'of', 'go', 'build', 'go', 'build', '-', 'buildmode', '=', 'c', '-', 'shared', '-', 'o', 'mymodule', '.', 'so', 'example', '.', 'com/mywrapper', '/tmp/go-build293667616/example.com/mywrapper/_obj/_cgo_main.o:(.data.rel+0x0):', 'undefined', 'reference', 'to', 'Py_None', 'collect2', ':', 'error', ':', 'ld', 'return', 'ed', '1', 'exit', 'status', ""I'm"", 'not', 'understanding', 'how', 'it', 'can', 'be', 'finding', 'all', 'of', 'the', 'other', 'Py*', 'functions', 'and', 'types', '(PyArgs_ParseTuple', 'and', 'PyLong_FromLong', 'work', 'just', 'fine),', 'but', ""can't"", 'find', 'Py_None.', 'The', 'Python', 'library', 'is', 'obviously', 'being', 'loaded.', ""What's"", 'going', 'on', 'here?']"
1675,40708750,"

All I want is to create an http server. And then test it and connect to it from the code. What's wrong with Go? (or with me?)
","['When', 'trying', 'to', 'ListenAndServer', 'inside', 'a', 'go', 'routine', 'I', 'get', 'an', 'error:', 'package', 'main', 'import', '(', '""fmt""', '""io/ioutil""', '""net/http""', ')', 'func', 'main', '()', '{', 'http.HandleFunc(""/static/"", myHandler)', 'go', 'func', '()', '{', 'http.ListenAndServe(""localhost:80"", nil)', '}()', 'fmt.Printf(""we are here"")', 'resp', ',', '_', ':=', 'http.Get(""localhost:80/static"")', 'ans', ',', '_', ':=', 'ioutil.ReadAll(resp.Body)', 'fmt.Printf(""response: %s"", ans)', '}', 'func', 'myHandler', '(', 'rw', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{', 'fmt.Printf(req.URL.Path)', '}', 'The', 'error:', 'panic', ':', 'runtime', 'error', ':', 'invalid', 'memory', 'address', 'or', 'nil', 'pointer', 'dereference', '[', 'signal', '0xc', '0', '0', '0', '0', '0', '05', 'code', '=', '0', 'x0', 'addr', '=', '0x48', 'pc', '=', '0x4', '011', '02', ']', 'go', 'routine', '1', '[', 'running', ']:', 'panic', '(', '0x616', '0', 'c0', ',', '0xc', '042', '0', '0', '80', 'a0', ')', 'c', ':/', 'go', '/src/runtime/panic.go:500', '+', '0x1af', 'main.main()', 'C', ':/', 'go', 'work/src/exc/14.go:20', '+', '0xc2', 'exit', 'status', '2', 'All', 'I', 'want', 'is', 'to', 'create', 'an', 'http', 'server.', 'And', 'then', 'test', 'it', 'and', 'connect', 'to', 'it', 'from', 'the', 'code.', ""What's"", 'wrong', 'with', 'Go?', '(or', 'with', 'me?)']"
1676,40741357,"For my current project I am implementing a code (separate package) to be part of binary which (this package) can also be imported by other projects (binaries) as if it was a library. The reason why such package is not a part of shared library is that it's functionality is tied tightly with the mentioned project.

The problem is this package provides an interface with two implementations 


one with direct access to underlying database which should only be used within the current project
another with HTTP request to be imported in other projects (HTTP requests going to current project)


My question is: is there a mechanism in Go how to prevent certain part of package or it's sub-package from being imported by another projects?

It's mostly just an aesthetic issue since the DB-accessing implementation won't work at all (throwing errors) when used outside of current project.
","['For', 'my', 'current', 'project', 'I', 'am', 'implementing', 'a', 'code', '(separate', 'package)', 'to', 'be', 'part', 'of', 'binary', 'which', '(this', 'package)', 'can', 'also', 'be', 'imported', 'by', 'other', 'projects', '(binaries)', 'as', 'if', 'it', 'was', 'a', 'library.', 'The', 'reason', 'why', 'such', 'package', 'is', 'not', 'a', 'part', 'of', 'shared', 'library', 'is', 'that', ""it's"", 'functionality', 'is', 'tied', 'tightly', 'with', 'the', 'mentioned', 'project.', 'The', 'problem', 'is', 'this', 'package', 'provides', 'an', 'interface', 'with', 'two', 'implementations', 'one', 'with', 'direct', 'access', 'to', 'underlying', 'database', 'which', 'should', 'only', 'be', 'used', 'within', 'the', 'current', 'project', 'another', 'with', 'HTTP', 'request', 'to', 'be', 'imported', 'in', 'other', 'projects', '(HTTP', 'requests', 'going', 'to', 'current', 'project)', 'My', 'question', 'is:', 'is', 'there', 'a', 'mechanism', 'in', 'Go', 'how', 'to', 'prevent', 'certain', 'part', 'of', 'package', 'or', ""it's"", 'sub-package', 'from', 'being', 'imported', 'by', 'another', 'projects?', ""It's"", 'mostly', 'just', 'an', 'aesthetic', 'issue', 'since', 'the', 'DB-accessing', 'implementation', ""won't"", 'work', 'at', 'all', '(throwing', 'errors)', 'when', 'used', 'outside', 'of', 'current', 'project.']"
1677,40800343,"

However, using stdin/stdout like this prevents this piece of the code from being able to log to console, as the parent process is using stdouts handle. Ideally I'd use file descriptor 4 for this to take advantage of how Node uses it, Only problem with this is I'm clueless with the nitty gritty details of Windows. How might I be able to use the equivalent (if any) of /dev/fd/4 for IPC on Windows?

PS: if there's a better way to handle reading from stdin, that would also help me a lot.
","[""I've"", 'been', 'writing', 'a', 'Go', 'server', 'that', 'acts', 'as', 'the', 'child', 'process', 'of', 'a', 'chunk', 'of', 'Node.js.', 'package', 'main', 'import', '(', '""bufio""', '""encoding/json""', '""fmt""', '""os""', ')', '//', 'IPC', 'delimiter', 'const', 'EOT', 'byte', '=', '3', 'func', 'main', '()', '{', '//', 'Listen', 'on', 'stdin', 'for', 'messages', 'sent', 'from', 'the', 'parent', 'process.', 'reader', ':=', 'bufio.NewReader(os.Stdin)', 'for', '{', 'input', ',', 'err', ':=', 'reader.ReadString(EOT)', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""sockets: failed to read from stdin: %v"", err)', 'if', 'err', '==', 'io', '.', 'EOF', '{', 'return', '}', 'continue', '}', '//', 'Strip', 'EOT', 'bye', 'input', '=', 'input', '[:', 'len', '(', 'input', ')', '-', '1', ']', 'var', 'payload', 'Payload', 'if', 'err', ':=', 'json.Unmarshal([]byte(input), &payload)', ';', 'err', '!=', 'nil', '{', 'fmt.Printf(""sockets: failed to read from stdin: %v"", err)', 'continue', '}', '}', '}', 'However,', 'using', 'stdin/stdout', 'like', 'this', 'prevents', 'this', 'piece', 'of', 'the', 'code', 'from', 'being', 'able', 'to', 'log', 'to', 'console,', 'as', 'the', 'parent', 'process', 'is', 'using', 'stdouts', 'handle.', 'Ideally', ""I'd"", 'use', 'file', 'descriptor', '4', 'for', 'this', 'to', 'take', 'advantage', 'of', 'how', 'Node', 'uses', 'it,', 'Only', 'problem', 'with', 'this', 'is', ""I'm"", 'clueless', 'with', 'the', 'nitty', 'gritty', 'details', 'of', 'Windows.', 'How', 'might', 'I', 'be', 'able', 'to', 'use', 'the', 'equivalent', '(if', 'any)', 'of', '/dev/fd/4', 'for', 'IPC', 'on', 'Windows?', 'PS:', 'if', ""there's"", 'a', 'better', 'way', 'to', 'handle', 'reading', 'from', 'stdin,', 'that', 'would', 'also', 'help', 'me', 'a', 'lot.']"
1678,40832472,"

Can someone give me some idea on how to use binary to decode that into human readable ascii or strings.
","['How', 'to', 'convert', 'Datetime', 'Octetstring', 'to', 'ASCII.', 'I', 'read', 'through', 'one', 'of', 'the', 'example', 'in', 'python', 'netsnmp', 'but', 'still', 'not', 'able', 'to', 'solve', 'it.', 'This', 'is', 'what', 'I', 'received', 'from', 'gosnmp', 'as', 'slice', 'of', '[]uint8', '[', '7', '224', '1', '28', '20', '5', '42', '0', '43', '0', '0', ']', 'or', 'Go-syntax', 'representation', 'of', 'the', 'value', '[]', 'byte', '{', '0x7', ',', '0xe', '0', ',', '0x1', ',', '0x1c', ',', '0x14', ',', '0x4', ',', '0x2a', ',', '0', 'x0', ',', '0x2b', ',', '0', 'x0', ',', '0', 'x0', '}', 'And', 'output', 'in', 'datetime', 'should', 'be', 'something', 'like', 'this:', '2015', '-', '10', '-', '7', ',', '17', ':', '23', ':', '27', '.', '0', ',+', '0', ':', '0', 'here', 'is', 'the', 'mibs:oid:', 'HOST', '-', 'RESOURCES', '-', 'MIB', '::', 'hrSWInstalledDate', 'Can', 'someone', 'give', 'me', 'some', 'idea', 'on', 'how', 'to', 'use', 'binary', 'to', 'decode', 'that', 'into', 'human', 'readable', 'ascii', 'or', 'strings.']"
1679,40843808,"In some code I have a test ensuring that a string length is smaller than 2^32. But it is difficult to test since generating a bigger string for testing would probably crash the test program with an out of memory error.

How may I achieve 100% test coverage but still testing for such case just to be safe?
","['Can', 'someone', 'give', 'me', 'some', 'idea', 'on', 'how', 'to', 'use', 'binary', 'to', 'decode', 'that', 'into', 'human', 'readable', 'ascii', 'or', 'strings.']"
1680,40864840,"
","['What', 'is', 'the', 'way', 'to', 'get', 'the', 'json', 'field', 'names', 'of', 'this', 'struct', '?', 'type', 'example', 'struct', '{', 'Id', 'int', 'json', ':', '""id""', 'CreatedAt', 'string', 'json', ':', '""created_at""', 'Tag', 'string', 'json', ':', '""tag""', 'Text', 'string', 'json', ':', '""text""', 'AuthorId', 'int', 'json', ':', '""author_id""', '}', 'I', 'try', 'to', 'print', 'the', 'fields', 'with', 'this', 'function', ':', 'func', '(', 'b', 'example', ')', 'PrintFields', '()', '{', 'val', ':=', 'reflect.ValueOf(b)', 'for', 'i', ':=', '0', ';', 'i', '<', 'val.Type().NumField()', ';', 'i', '++', '{', 'fmt.Println(val.Type().Field(i).Name)', '}', '}', 'Of', 'course', 'I', 'get', ':', 'Id', 'CreatedAt', 'Tag', 'Text', 'AuthorId', 'But', 'I', 'would', 'like', 'something', 'like', ':', 'id', 'created_at', 'tag', 'text', 'author_id']"
1681,40939261,"

When I attempt to Parse the above date-time string I get the following error:


  0001-01-01 00:00:00 +0000 UTC parsing time ""DD-MM-YYYY hh:mm:ss"" as ""Wed Nov 23 23:26:10 2016"": cannot parse ""DD-MM-YYYY hh:mm:ss"" as ""Wed Nov ""


How am I able to get the parser to recognise this seemingly custom format, I will be saving this data to Mongo so I don't want to store the auction time as a string as I want to query the timestamps individually.
","[""I'm"", 'working', 'on', 'a', 'Parser', 'which', 'Parses', 'log', 'files', 'from', 'a', 'game', 'so', 'I', 'can', 'do', 'analysis', 'on', 'auctions', 'made', 'within', 'the', 'game,', 'however', 'the', 'date', 'format', ""that's"", 'being', 'written', 'by', 'the', 'logger', 'seems', 'to', 'be', 'causing', 'problems', 'as', 'the', 'format', 'seems', 'to', 'be', 'custom', 'written', 'for', 'the', 'logger,', 'an', 'example', 'datetime', 'stamp', 'looks', 'like:', '[', 'Wed', 'Nov', '23', '23', ':', '26', ':', '10', '2016', ']', 'I', 'try', 'to', 'Parse', 'it', 'with:', 'func', '(', 'r', '*', 'AuctionReader', ')', 'extractSaleInformation', '(', 'line', 'string', ')', '{', 'fmt.Println(""Extracting information from: "", line)', '//', 'Format', 'mask', 'for', 'output', 'layout', ':=', '""DD-MM-YYYY hh:mm:ss""', '//', 'Replace', 'the', 'square', 'brackets', 'so', ""we're"", 'just', 'left', 'with', 'the', 'date-time', 'string', 'date', ':=', 'strings.TrimSpace(strings.Replace((strings.Split(line, ""]"")[0]), ""["", """", -1))', 'fmt.Println(time.Parse(date, layout))', '}', 'When', 'I', 'attempt', 'to', 'Parse', 'the', 'above', 'date-time', 'string', 'I', 'get', 'the', 'following', 'error:', '0001-01-01', '00:00:00', '+0000', 'UTC', 'parsing', 'time', '""DD-MM-YYYY', 'hh:mm:ss""', 'as', '""Wed', 'Nov', '23', '23:26:10', '2016"":', 'cannot', 'parse', '""DD-MM-YYYY', 'hh:mm:ss""', 'as', '""Wed', 'Nov', '""', 'How', 'am', 'I', 'able', 'to', 'get', 'the', 'parser', 'to', 'recognise', 'this', 'seemingly', 'custom', 'format,', 'I', 'will', 'be', 'saving', 'this', 'data', 'to', 'Mongo', 'so', 'I', ""don't"", 'want', 'to', 'store', 'the', 'auction', 'time', 'as', 'a', 'string', 'as', 'I', 'want', 'to', 'query', 'the', 'timestamps', 'individually.']"
1682,40945136,"
","['For', 'some', 'reason', 'it', 'seems', 'the', 'default', 'for', 'vim', 'with', 'Go', 'files', 'is', 'to', 'highlight', 'trailing', 'whitespace', 'in', 'red.', 'In', 'a', 'way', 'this', 'is', 'nice,', 'but', 'mostly', 'I', 'find', 'it', 'annoying', 'because', 'every', 'time', 'I', 'type', 'a', 'space', 'it', 'starts', 'as', 'a', 'red', 'highlight.', 'Is', 'there', 'a', 'way', 'to', 'stop', 'this', 'behavior?', ""I've"", 'only', 'experienced', 'this', 'with', 'Go', 'files.', 'Below', 'is', 'my', 'vimrc,', 'but', 'I', ""don't"", 'think', 'I', 'put', 'anything', 'there', 'that', 'would', 'affect', 'it.', 'set', 'nocompatible', 'syntax', 'on', 'set', 'autoindent', 'set', 'tabstop', '=', '4', 'softtabstop', '=', '0', 'autocmd', 'FileType', 'go', 'set', 'tabstop', '=', '8', 'softtabstop', '=', '0', 'set', 'for', 'matoptions', '=', 'tcroql', 'set', 'relativenumber', 'set', 'incsearch', 'set', 'hlsearch', 'set', 'smartindent', 'filetype', 'indent', 'on']"
1683,40949178,"I have a Go package with multiple files. As of Go standard I am creating an associated test file for each source file in the package. 

In my case the different tests use the same test helping functions. I don't want these functions to be in the package source files because it is only used for testing purpose. I also would like avoiding replicating this code in each test file. 

Where should I put this code shared between all the test source files and not part of the package ?
","['I', 'have', 'a', 'Go', 'package', 'with', 'multiple', 'files.', 'As', 'of', 'Go', 'standard', 'I', 'am', 'creating', 'an', 'associated', 'test', 'file', 'for', 'each', 'source', 'file', 'in', 'the', 'package.', 'In', 'my', 'case', 'the', 'different', 'tests', 'use', 'the', 'same', 'test', 'helping', 'functions.', 'I', ""don't"", 'want', 'these', 'functions', 'to', 'be', 'in', 'the', 'package', 'source', 'files', 'because', 'it', 'is', 'only', 'used', 'for', 'testing', 'purpose.', 'I', 'also', 'would', 'like', 'avoiding', 'replicating', 'this', 'code', 'in', 'each', 'test', 'file.', 'Where', 'should', 'I', 'put', 'this', 'code', 'shared', 'between', 'all', 'the', 'test', 'source', 'files', 'and', 'not', 'part', 'of', 'the', 'package', '?']"
1684,41009376,"

That appears to me that there is an error within gcimporter itself, but that doesn't make sense that I would get this when it doesn't appear that others are. Why isn't it working?

I'm using Go 1.5.3.
","[""I'm"", 'trying', 'to', 'make', 'a', 'program', 'dependent', 'upon', 'gcimporter15', 'for', 'Go,', 'and', 'so', ""I'm"", 'using', 'the', 'command', '""go', 'get', 'golang.org/x/tools/go/gcimporter15"",', 'but', 'it', 'fails', 'with', 'the', 'error:', 'go', 'lang', '.', 'org/x/tools/go/gcimporter15', '../../', 'go', '/src/golang.org/x/tools/go/gcimporter15/bexport.go:557:', 'undefined', ':', 'const', 'ant', '.', 'ToFloat', '../../', 'go', '/src/golang.org/x/tools/go/gcimporter15/gcimporter.go:396:', 'pkg', '.', 'SetName', 'undefined', '(', 'type', '*', 'type', 's', '.', 'Package', 'has', 'no', 'field', 'or', 'method', 'SetName', ')', 'That', 'appears', 'to', 'me', 'that', 'there', 'is', 'an', 'error', 'within', 'gcimporter', 'itself,', 'but', 'that', ""doesn't"", 'make', 'sense', 'that', 'I', 'would', 'get', 'this', 'when', 'it', ""doesn't"", 'appear', 'that', 'others', 'are.', 'Why', ""isn't"", 'it', 'working?', ""I'm"", 'using', 'Go', '1.5.3.']"
1685,41028709,"

What is the best way to drop connections where the caller is not localhost?  Currently I'm considering inspecting the underlying connection information and ensuring that the IP Address is 127.0.0.1, but this wastes a whole lot of resources (and runs through a whole bunch of Go code) before ultimately dropping the connection.  Ideally, I can instrument the Golang server to drop the initial TCP SYN packet based on IP Address, and not create a TCP connection at all (or reveal that this port is listening).

What's the cleanest path forward here?
","['I', 'have', 'a', 'simple', 'HTTP', 'Server', 'standing', 'up', 'in', 'Golang:', 'h', ':=', 'http.NewServeMux()', 'h.Handle(""/somepath"", MyHandler)', 's', ':=', '&', 'http', '.', 'Server', '{', 'Addr', ':', '""1234""', ',', 'Handler', ':', 'h', ',', '}', 's.ListenAndServe()', ';', 'What', 'is', 'the', 'best', 'way', 'to', 'drop', 'connections', 'where', 'the', 'caller', 'is', 'not', 'localhost?', 'Currently', ""I'm"", 'considering', 'inspecting', 'the', 'underlying', 'connection', 'information', 'and', 'ensuring', 'that', 'the', 'IP', 'Address', 'is', '127.0.0.1,', 'but', 'this', 'wastes', 'a', 'whole', 'lot', 'of', 'resources', '(and', 'runs', 'through', 'a', 'whole', 'bunch', 'of', 'Go', 'code)', 'before', 'ultimately', 'dropping', 'the', 'connection.', 'Ideally,', 'I', 'can', 'instrument', 'the', 'Golang', 'server', 'to', 'drop', 'the', 'initial', 'TCP', 'SYN', 'packet', 'based', 'on', 'IP', 'Address,', 'and', 'not', 'create', 'a', 'TCP', 'connection', 'at', 'all', '(or', 'reveal', 'that', 'this', 'port', 'is', 'listening).', ""What's"", 'the', 'cleanest', 'path', 'forward', 'here?']"
1686,41061803,"

Example App
","['After', 'obtain', 'a', 'context', 'from', 'ctx', ',', 'ctxErr', ':=', 'appengine.Namespace(ctx, ""MyContext"")', 'I', 'would', 'expect', 'ctx', 'namespace', 'to', 'be', 'populated', 'with', 'MyContext', 'Code', 'import', '(', '...', '""golang.org/x/net/context""', '""google.golang.org/appengine""', ')', 'ctx', ':=', 'appengine.NewContext(r)', 'ctx', ',', 'ctxErr', ':=', 'appengine.Namespace(ctx, ""MyContext"")', 'if', 'ctxErr', '!=', 'nil', '{', 'log.Errorf(ctx, ""Failed to obtain custom namespace context, error:%s"", ctxErr.Error())', '//', 'use', 'default', 'if', 'all', 'else', 'fails', 'ctx', '=', 'appengine.NewContext(r)', '}', 'However', 'this', 'is', 'not', 'the', 'case,', 'thus', 'causing', 'all', 'namespace', 'aware', 'API', 'to', 'use', 'default', 'namespace.', 'Dump', 'of', 'ctx', 'produces', 'the', 'following', '(see', 'yellow', 'bordered', 'output)', 'Example', 'App', 'Populate', 'projectID', ':=', '""""', 'with', 'your', 'project', 'id,', 'ensure', 'you', 'have', 'performed', 'authentication', 'on', 'your', 'development', 'environment', 'and', 'run', 'go', 'run', '/example/app/main.go', 'Example', 'App']"
1687,41104049,"

I will receive inStream from a TCP connection and will want to deserialize the binary data and get a Message struct with the expected values ... 

Hope this will clarify my question.

Thanks again ;)
","['I', 'have', 'to', 'deserialize', 'some', 'binary', 'messages', 'coming', 'from', 'another', 'application.', 'I', 'would', 'love', 'to', 'use', 'restruct.io', 'but', 'some', 'fields', 'in', 'the', 'message', 'structure', 'use', 'a', '""non-standard""', 'number', 'of', 'bits', '(', '5', 'bits,', '3', 'bits,', '...', '10', 'bits', '...', ').', 'Is', 'there', 'any', 'way', 'to', 'handle', 'this', 'type', 'of', 'structs?', 'I', 'have', 'been', 'searching', 'for', 'some', 'time', 'without', 'any', 'success', 'so', 'any', 'help', 'will', 'be', 'very', 'welcomed.', 'thanks', 'in', 'advance', 'I', 'wil', 'try', 'to', 'give', 'an', 'example', 'to', 'clarify', 'my', 'question.', 'Given', 'the', 'code:', 'package', 'main', 'import', '(', '""encoding/binary""', '""fmt""', 'restruct', '""gopkg.in/restruct.v1""', ')', 'type', 'MessageType', 'uint8', 'const', '(', 'MessageTypeOne', 'MessageType', '=', 'iota', '+', '1', 'MessageTypeTwo', 'MessageTypeThree', ')', '//', 'Message', 'is', 'the', 'data', 'to', 'deserialize', 'from', 'the', 'binary', 'stream', 'type', 'Message', 'struct', '{', 'Length', 'uint32', 'struct', ':', '""uint32""', '// message size in bytes (including length)', 'Type', 'MessageType', 'struct', ':', '""uint8""', 'Version', 'uint8', 'struct', ':', '""uint8:4""', '// Just need 4 bits', 'Subversion', 'uint8', 'struct', ':', '""uint8:2""', '// just need 2 bits', 'Optional', 'uint8', 'struct', ':', '""uint8:1""', ""// just one bit --> '1' means next field is NOT present"", 'NodeName', 'string', 'ANumber', 'uint16', 'struct', ':', '""uint16:10""', '// just need 10 bits', '}', '//', '(length(4)+type(1)+(version(4bits)+Subversion(2bits)+Optional(1bit)))', '=', '6', 'bytes', '//', 'need', '32bit', 'alignment', 'func', 'main', '()', '{', 'var', 'inStream', '=', '[]', 'byte', '{', '0', 'x08', ',', '// just 8 bytes needed', '0', 'x01', ',', '// messge type = MessageTypeOne', '0x4a', ',', '// Version=0100 Subversion=10 Optional=1 ANumber = 0 (MSB bit)', '0', 'x00', ',', '0x6', '0', ',', '// ANumber(000 0000 011) Padding = 0 0000 for 32 bits alignment', '}', 'var', 'msg', 'Message', 'err', ':=', 'restruct.Unpack(inStream, binary.BigEndian, &msg)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'fmt.Println(msg)', '//', 'Expected:', '//', 'msg.Length', '=', '8', '//', 'msg.Type', '=', '1', '//', 'msg.Version', '=', '4', '//', 'msg.Subversion', '=', '2', '//', 'msg.Optional', '=', '1', '//', 'msg.NodeName', '=', '""""', '//', 'msg.ANumber', '=', '3', '}', 'I', 'will', 'receive', 'inStream', 'from', 'a', 'TCP', 'connection', 'and', 'will', 'want', 'to', 'deserialize', 'the', 'binary', 'data', 'and', 'get', 'a', 'Message', 'struct', 'with', 'the', 'expected', 'values', '...', 'Hope', 'this', 'will', 'clarify', 'my', 'question.', 'Thanks', 'again', ';)']"
1688,41157259,"I've got a Set function that wraps a users object (or variable) in my own struct called sessions. It assigns it to the Value field of my sessions struct. The Set function then marshalls this struct and assigns the string somewhere in storage. 

My problem is that I'm not sure how to implement my Get function to only return the unmarshalled struct stored in the Value field, opposed to the entire sessions wrapper struct.

I've made a very simple example demonstrating what I'm talking about.

I can't use a type assertion in the assignment in my Get func because I don't know what type the user is going to use in advance.

I suspect there may be a way using reflection to accomplish this?

Edit: The two provided answers so far are not what I'm looking for. I do not know what type the user will be using, it could be anything, so coding around that by hard coding their type or trying to ""guess"" what it may contain is not going to work.
","[""I've"", 'got', 'a', 'Set', 'function', 'that', 'wraps', 'a', 'users', 'object', '(or', 'variable)', 'in', 'my', 'own', 'struct', 'called', 'sessions.', 'It', 'assigns', 'it', 'to', 'the', 'Value', 'field', 'of', 'my', 'sessions', 'struct.', 'The', 'Set', 'function', 'then', 'marshalls', 'this', 'struct', 'and', 'assigns', 'the', 'string', 'somewhere', 'in', 'storage.', 'My', 'problem', 'is', 'that', ""I'm"", 'not', 'sure', 'how', 'to', 'implement', 'my', 'Get', 'function', 'to', 'only', 'return', 'the', 'unmarshalled', 'struct', 'stored', 'in', 'the', 'Value', 'field,', 'opposed', 'to', 'the', 'entire', 'sessions', 'wrapper', 'struct.', ""I've"", 'made', 'a', 'very', 'simple', 'example', 'demonstrating', 'what', ""I'm"", 'talking', 'about.', 'I', ""can't"", 'use', 'a', 'type', 'assertion', 'in', 'the', 'assignment', 'in', 'my', 'Get', 'func', 'because', 'I', ""don't"", 'know', 'what', 'type', 'the', 'user', 'is', 'going', 'to', 'use', 'in', 'advance.', 'I', 'suspect', 'there', 'may', 'be', 'a', 'way', 'using', 'reflection', 'to', 'accomplish', 'this?', 'Edit:', 'The', 'two', 'provided', 'answers', 'so', 'far', 'are', 'not', 'what', ""I'm"", 'looking', 'for.', 'I', 'do', 'not', 'know', 'what', 'type', 'the', 'user', 'will', 'be', 'using,', 'it', 'could', 'be', 'anything,', 'so', 'coding', 'around', 'that', 'by', 'hard', 'coding', 'their', 'type', 'or', 'trying', 'to', '""guess""', 'what', 'it', 'may', 'contain', 'is', 'not', 'going', 'to', 'work.']"
1689,41238879,"

I don't know why.
Thanks for your reply.
","[""I'm"", 'trying', 'to', 'parse', 'a', 'file', 'of', 'this', 'forme:', '12', '0', ',', '1', ',', '2', ',', '3', ',', '1', ',', '2', ',', '3', ',', '4', ',', '2', ',', '3', ',', '4', ',', '5', '1', ',', '0', ',', '1', ',', '2', ',', '2', ',', '1', ',', '2', ',', '3', ',', '3', ',', '2', ',', '3', ',', '4', '2', ',', '1', ',', '0', ',', '1', ',', '3', ',', '2', ',', '1', ',', '2', ',', '4', ',', '3', ',', '2', ',', '3', '3', ',', '2', ',', '1', ',', '0', ',', '4', ',', '3', ',', '2', ',', '1', ',', '5', ',', '4', ',', '3', ',', '2', '1', ',', '2', ',', '3', ',', '4', ',', '0', ',', '1', ',', '2', ',', '3', ',', '1', ',', '2', ',', '3', ',', '4', '2', ',', '1', ',', '2', ',', '3', ',', '1', ',', '0', ',', '1', ',', '2', ',', '2', ',', '1', ',', '2', ',', '3', '3', ',', '2', ',', '1', ',', '2', ',', '2', ',', '1', ',', '0', ',', '1', ',', '3', ',', '2', ',', '1', ',', '2', '4', ',', '3', ',', '2', ',', '1', ',', '3', ',', '2', ',', '1', ',', '0', ',', '4', ',', '3', ',', '2', ',', '1', '2', ',', '3', ',', '4', ',', '5', ',', '1', ',', '2', ',', '3', ',', '4', ',', '0', ',', '1', ',', '2', ',', '3', '3', ',', '2', ',', '3', ',', '4', ',', '2', ',', '1', ',', '2', ',', '3', ',', '1', ',', '0', ',', '1', ',', '2', '4', ',', '3', ',', '2', ',', '3', ',', '3', ',', '2', ',', '1', ',', '2', ',', '2', ',', '1', ',', '0', ',', '1', '5', ',', '4', ',', '3', ',', '2', ',', '4', ',', '3', ',', '2', ',', '1', ',', '3', ',', '2', ',', '1', ',', '0', '0', ',', '5', ',', '2', ',', '4', ',', '1', ',', '0', ',', '0', ',', '6', ',', '2', ',', '1', ',', '1', ',', '1', '5', ',', '0', ',', '3', ',', '0', ',', '2', ',', '2', ',', '2', ',', '0', ',', '4', ',', '5', ',', '0', ',', '0', '2', ',', '3', ',', '0', ',', '0', ',', '0', ',', '0', ',', '0', ',', '5', ',', '5', ',', '2', ',', '2', ',', '2', '4', ',', '0', ',', '0', ',', '0', ',', '5', ',', '2', ',', '2', ',', '10', ',', '0', ',', '0', ',', '5', ',', '5', '1', ',', '2', ',', '0', ',', '5', ',', '0', ',', '10', ',', '0', ',', '0', ',', '0', ',', '5', ',', '1', ',', '1', '0', ',', '2', ',', '0', ',', '2', ',', '10', ',', '0', ',', '5', ',', '1', ',', '1', ',', '5', ',', '4', ',', '0', '0', ',', '2', ',', '0', ',', '2', ',', '0', ',', '5', ',', '0', ',', '10', ',', '5', ',', '2', ',', '3', ',', '3', '6', ',', '0', ',', '5', ',', '10', ',', '0', ',', '1', ',', '10', ',', '0', ',', '0', ',', '0', ',', '5', ',', '0', '2', ',', '4', ',', '5', ',', '0', ',', '0', ',', '1', ',', '5', ',', '0', ',', '0', ',', '0', ',', '10', ',', '10', '1', ',', '5', ',', '2', ',', '0', ',', '5', ',', '5', ',', '2', ',', '0', ',', '0', ',', '0', ',', '5', ',', '0', '1', ',', '0', ',', '2', ',', '5', ',', '1', ',', '4', ',', '3', ',', '5', ',', '10', ',', '5', ',', '0', ',', '2', '1', ',', '0', ',', '2', ',', '5', ',', '1', ',', '0', ',', '3', ',', '0', ',', '10', ',', '0', ',', '2', ',', '0', 'Where', 'the', 'first', 'line', 'give', 'us', 'the', 'size', 'of', 'the', 'matrix:', 'n', 'x', 'n', 'The', 'n-following', 'lines', 'are', 'the', 'matrix', 'D.', 'Then', 'the', 'n-following', 'lines', 'are', 'the', 'matrix', 'W.', 'So', 'there', 'is', '2n', '+', '1', 'lines.', 'Here', 'is', 'the', 'code', 'to', 'parse', 'it', 'and', 'put', 'it', 'in', 'variables.', 'func', 'readFile', '(', 'path', 'string', ')', '(', 'int64', ',', 'Matrix', ',', 'Matrix', ')', '{', '//', 'open', 'the', 'file', 'f', ',', '_', ':=', 'os.Open(path)', 'defer', 'f.Close()', '//', 'init', 'the', 'new', 'reader', 'on', 'the', 'opened', 'file', 'r', ':=', 'bufio.NewReader(f)', '//', 'we', 'get', 'the', 'n', 'value', 'line', ',', '_', ':=', ""r.ReadString('\\n')"", 'splitedLine', ':=', 'strings.Fields(line)', 'tmp', ',', '_', ':=', 'strconv.ParseInt(splitedLine[0], 10, 64)', 'n', ':=', 'int64', '(', 'tmp', ')', '//', 'we', 'init', 'the', 'matrix', 'W', 'and', 'D', 'D', ':=', 'Matrix', '{}', 'D', '.', 'matrix', '=', 'make', '([][]', 'int64', ',', 'n', ')', 'for', 'i', ',', '_', ':=', 'range', 'D', '.', 'matrix', '{', 'D', '.', 'matrix', '[', 'i', ']', '=', 'make', '([]', 'int64', ',', 'n', ')', '}', 'W', ':=', 'Matrix', '{}', 'W', '.', 'matrix', '=', 'make', '([][]', 'int64', ',', 'n', ')', 'for', 'i', ',', '_', ':=', 'range', 'W', '.', 'matrix', '{', 'W', '.', 'matrix', '[', 'i', ']', '=', 'make', '([]', 'int64', ',', 'n', ')', '}', '//', 'loop', 'on', 'the', 'n', 'first', 'element', 'iter', ':=', 'int64', '(', '0', ')', 'for', 'iter', '<', 'n', '{', '//', 'we', 'get', 'the', 'n', 'following', 'elements', 'line', ',', '_', '=', ""r.ReadString('\\n')"", 'for', 'index', ',', 'ele', ':=', 'range', 'strings.Split(line, "","")', '{', 'D', '.', 'matrix', '[', 'iter', '][', 'index', '],', '_', '=', 'strconv.ParseInt(ele, 10, 64)', '}', 'iter', '++', '}', 'iter', '=', '0', 'for', 'iter', '<', 'n', '{', '//', 'we', 'get', 'the', 'n', 'following', 'elements', 'line', ',', '_', '=', ""r.ReadString('\\n')"", 'for', 'index', ',', 'ele', ':=', 'range', 'strings.Split(line, "","")', '{', 'W', '.', 'matrix', '[', 'iter', '][', 'index', '],', '_', '=', 'strconv.ParseInt(ele, 10, 64)', '}', 'iter', '++', '}', 'return', 'n', ',', 'W', ',', 'D', '}', 'The', 'resultat', 'for', 'W', 'should', 'be', 'like:', '[', '0', '.,', '1', '.,', '2', '.,', '3', '.,', '1', '.,', '2', '.,', '3', '.,', '4', '.,', '2', '.,', '3', '.,', '4', '.,', '5', '.],', '[', '1', '.,', '0', '.,', '1', '.,', '2', '.,', '2', '.,', '1', '.,', '2', '.,', '3', '.,', '3', '.,', '2', '.,', '3', '.,', '4', '.],', '[', '2', '.,', '1', '.,', '0', '.,', '1', '.,', '3', '.,', '2', '.,', '1', '.,', '2', '.,', '4', '.,', '3', '.,', '2', '.,', '3', '.],', '[', '3', '.,', '2', '.,', '1', '.,', '0', '.,', '4', '.,', '3', '.,', '2', '.,', '1', '.,', '5', '.,', '4', '.,', '3', '.,', '2', '.],', '[', '1', '.,', '2', '.,', '3', '.,', '4', '.,', '0', '.,', '1', '.,', '2', '.,', '3', '.,', '1', '.,', '2', '.,', '3', '.,', '4', '.],', '[', '2', '.,', '1', '.,', '2', '.,', '3', '.,', '1', '.,', '0', '.,', '1', '.,', '2', '.,', '2', '.,', '1', '.,', '2', '.,', '3', '.],', '[', '3', '.,', '2', '.,', '1', '.,', '2', '.,', '2', '.,', '1', '.,', '0', '.,', '1', '.,', '3', '.,', '2', '.,', '1', '.,', '2', '.],', '[', '4', '.,', '3', '.,', '2', '.,', '1', '.,', '3', '.,', '2', '.,', '1', '.,', '0', '.,', '4', '.,', '3', '.,', '2', '.,', '1', '.],', '[', '2', '.,', '3', '.,', '4', '.,', '5', '.,', '1', '.,', '2', '.,', '3', '.,', '4', '.,', '0', '.,', '1', '.,', '2', '.,', '3', '.],', '[', '3', '.,', '2', '.,', '3', '.,', '4', '.,', '2', '.,', '1', '.,', '2', '.,', '3', '.,', '1', '.,', '0', '.,', '1', '.,', '2', '.],', '[', '4', '.,', '3', '.,', '2', '.,', '3', '.,', '3', '.,', '2', '.,', '1', '.,', '2', '.,', '2', '.,', '1', '.,', '0', '.,', '1', '.],', '[', '5', '.,', '4', '.,', '3', '.,', '2', '.,', '4', '.,', '3', '.,', '2', '.,', '1', '.,', '3', '.,', '2', '.,', '1', '.,', '0', '.]', 'But', 'when', 'I', 'print', 'it;', 'it', 'gives', 'me', ':', '[', '0', '1', '2', '3', '1', '2', '3', '4', '2', '3', '4', '0', ']', '[', '1', '0', '1', '2', '2', '1', '2', '3', '3', '2', '3', '0', ']', '[', '2', '1', '0', '1', '3', '2', '1', '2', '4', '3', '2', '0', ']', '[', '3', '2', '1', '0', '4', '3', '2', '1', '5', '4', '3', '0', ']', '[', '1', '2', '3', '4', '0', '1', '2', '3', '1', '2', '3', '0', ']', '[', '2', '1', '2', '3', '1', '0', '1', '2', '2', '1', '2', '0', ']', '[', '3', '2', '1', '2', '2', '1', '0', '1', '3', '2', '1', '0', ']', '[', '4', '3', '2', '1', '3', '2', '1', '0', '4', '3', '2', '0', ']', '[', '2', '3', '4', '5', '1', '2', '3', '4', '0', '1', '2', '0', ']', '[', '3', '2', '3', '4', '2', '1', '2', '3', '1', '0', '1', '0', ']', '[', '4', '3', '2', '3', '3', '2', '1', '2', '2', '1', '0', '0', ']', '[', '5', '4', '3', '2', '4', '3', '2', '1', '3', '2', '1', '0', ']', 'I', ""don't"", 'know', 'why.', 'Thanks', 'for', 'your', 'reply.']"
1690,41250130,"

I send messages of 1000 bytes. In debug mode the message is always split in the same way: 1 byte, 999 bytes - I see it using PRINT 1. In this case everythong works fine.
The problem is that when the message is split to more parts in the Write function. In this case I see in PRINT1:

[first byte] : a

[next ~450 bytes] : b,c,d,...

[last ~550 bytes] : w,x,y,...

but in PRINT 2 I see different picture:

[first byte] : a

[ ~450 bytes but starting where last part starts] : w,x,y...

[last ~550 bytes] : w,x,y,...

I actually get the last past twice but not in the same size.

I have no idea why this is happening and will appreciate any help.
","['I', 'am', 'new', 'with', 'golang', 'channels', 'and', 'have', 'a', 'strange', 'behavior', 'I', 'cannot', 'explain.', 'I', 'am', 'getting', 'a', 'REST', 'command,', 'and', 'want', 'to', 'calculate', 'hash', 'function', 'on', ""it's"", 'body.', 'To', 'do', 'so', 'I', 'read', 'the', 'body', 'using', 'io.TeeReader(request.Body, &writerToHash)', 'where', 'I', 'pass', 'my', 'own', 'class', 'that', 'implements', 'io.Writer:', 'func', '(', 'self', '*', 'WriterToHash', ')', 'Write', '(', 'p', '[]', 'byte', ')', '(', 'n', 'int', ',', 'err', 'error', ')', '{', 'n', '=', 'len', '(', 'p', ')', 'fmt.println(""WriterToHash  len=%v, buff=%v"", n, p)', '//PRINT 1', 'self', '.', 'BodyChannel', '<-', 'p', 'return', 'n', ',', 'nil', '}', 'The', 'BodyChannel', 'is', 'defined:', 'BodyChannel', 'chan', '[]', 'byte', 'I', 'use', 'this', 'class', 'as', 'follows:', 'writerToHash', ':=', 'sisutils', '.', 'WriterToHash', '{', 'BodyChannel', ':', 'make', '(', 'chan', '[]', 'byte', ',', '1024', ')', '}', 'writerToHash.StartListen()', 'reqnew', ',', '_', ':=', 'http.NewRequest(""PUT"", url, io.TeeReader(request.Body, &writerToHash))', 'Listening', 'part:', 'func', '(', 'wth', '*', 'WriterToHash', ')', 'StartListen', '()', '{', 'wth', '.', 'OutChannel', '=', 'make', '(', 'chan', '[]', 'byte', ',', '1000', ')', 'go', 'func', '(', 'self', '*', 'WriterToHash', ')', '{', 'done', ':=', 'int64', '(', '0', ')', 'h', ':=', 'sha1.New()', 'for', 'done', '<', 'MessageSize', '{', 'buff', ':=', '<-', 'self', '.', 'BodyChannel', 'done', '+=', 'int64', '(', 'len', '(', 'buff', '))', 'DPrint', '(', '5', ',', '""AccamulateSha1 Done=: %v, buff=%v""', ',', 'done', ',', 'buff', ')', '//PRINT 2', 'actually_write', ',', 'err', ':=', 'h.Write(buff)', 'if', 'err', '!=', 'nil', '||', 'actually_write', '!=', 'len', '(', 'buff', ')', '{', 'log.Println(""Error in sha write:"" + err.Error())', 'break', '}', '}', 'bs', ':=', 'h.Sum(nil)', 'self', '.', 'OutChannel', '<-', 'bs', '}(', 'wth', ')', '}', 'I', 'send', 'messages', 'of', '1000', 'bytes.', 'In', 'debug', 'mode', 'the', 'message', 'is', 'always', 'split', 'in', 'the', 'same', 'way:', '1', 'byte,', '999', 'bytes', '-', 'I', 'see', 'it', 'using', 'PRINT', '1.', 'In', 'this', 'case', 'everythong', 'works', 'fine.', 'The', 'problem', 'is', 'that', 'when', 'the', 'message', 'is', 'split', 'to', 'more', 'parts', 'in', 'the', 'Write', 'function.', 'In', 'this', 'case', 'I', 'see', 'in', 'PRINT1:', '[first', 'byte]', ':', 'a', '[next', '~450', 'bytes]', ':', 'b,c,d,...', '[last', '~550', 'bytes]', ':', 'w,x,y,...', 'but', 'in', 'PRINT', '2', 'I', 'see', 'different', 'picture:', '[first', 'byte]', ':', 'a', '[', '~450', 'bytes', 'but', 'starting', 'where', 'last', 'part', 'starts]', ':', 'w,x,y...', '[last', '~550', 'bytes]', ':', 'w,x,y,...', 'I', 'actually', 'get', 'the', 'last', 'past', 'twice', 'but', 'not', 'in', 'the', 'same', 'size.', 'I', 'have', 'no', 'idea', 'why', 'this', 'is', 'happening', 'and', 'will', 'appreciate', 'any', 'help.']"
1691,41266630,"

But this is particularly awkward and verbose when there is other formatting and other variables that are intended to be printed before and/or after that value.
","['I', 'have', 'a', 'string', 'pointer', 'that', 'may', 'or', 'may', 'not', 'be', 'nil,', 'and', 'I', 'want', 'to', 'print', 'out', 'either', 'the', 'contents', 'of', 'the', 'string', 'if', 'contents', 'exist,', 'or', 'indicate', 'that', 'the', 'pointer', 'is', 'nil', 'if', 'it', 'is', 'nil.', 'Is', 'there', 'a', 'clever', 'way', 'to', 'do', 'this', 'that', ""doesn't"", 'involve', 'either', 'an', 'if', 'check', 'or', 'a', 'temporary', 'variable', '(preferably', 'a', 'single', 'line)?', 'Right', 'now', ""I'm"", 'using', 'something', 'like', 'this:', 'if', 'p', '==', 'nil', '{', 'fmt.Print(p)', '}', 'else', '{', 'fmt.Print(*p)', '}', 'But', 'this', 'is', 'particularly', 'awkward', 'and', 'verbose', 'when', 'there', 'is', 'other', 'formatting', 'and', 'other', 'variables', 'that', 'are', 'intended', 'to', 'be', 'printed', 'before', 'and/or', 'after', 'that', 'value.']"
1692,41297410,"I have an application which uses both bigquery and cloud datastore APIs. I use glide for go package management. I keep seeing build errors with either bigquery or datastore depending upon the version of golang/protobuf that I use. I am not able to find a version that is compatible with both bigquery and datastore. Either one of the packages keeps failing to build.

Build errors in datastore while using golang/protobuf version 7cc19b78d562895b13596ddce7aafb59dd789318:


  ../../vendor/google.golang.org/genproto/googleapis/api/annotations/annotations.pb.go:33:
  undefined: proto.ProtoPackageIsVersion2
  ../../vendor/google.golang.org/genproto/googleapis/api/annotations/annotations.pb.go:41:
  unknown proto.ExtensionDesc field 'Filename' in struct literal
  ../../vendor/google.golang.org/genproto/googleapis/api/annotations/annotations.pb.go:48:
  undefined: proto.RegisterFile
  ../../vendor/google.golang.org/genproto/googleapis/api/annotations/http.pb.go:540:
  undefined: proto.RegisterFile Build errors in bigquery while using
  golang/protobuf version 8ee79997227bf9b34611aee7946ae64735e6fd93:
  
  ../../vendor/cloud.google.com/go/bigquery/params.go:55: undefined:
  bigquery.QueryParameterType
  ../../vendor/cloud.google.com/go/bigquery/params.go:56: undefined:
  bigquery.QueryParameterType
  ../../vendor/cloud.google.com/go/bigquery/params.go:57: undefined:
  bigquery.QueryParameterType
  ../../vendor/cloud.google.com/go/bigquery/params.go:58: undefined:
  bigquery.QueryParameterType
  ../../vendor/cloud.google.com/go/bigquery/params.go:59: undefined:
  bigquery.QueryParameterType
  ../../vendor/cloud.google.com/go/bigquery/params.go:60: undefined:
  bigquery.QueryParameterType
  ../../vendor/cloud.google.com/go/bigquery/params.go:61: undefined:
  bigquery.QueryParameterType
  ../../vendor/cloud.google.com/go/bigquery/params.go:94: undefined:
  bigquery.QueryParameter
  ../../vendor/cloud.google.com/go/bigquery/params.go:110: undefined:
  bigquery.QueryParameterType
  ../../vendor/cloud.google.com/go/bigquery/params.go:178: undefined:
  bigquery.QueryParameter


Opened an issue here - https://github.com/GoogleCloudPlatform/google-cloud-go/issues/475. Any pointers would be appreciated. 
","['I', 'have', 'an', 'application', 'which', 'uses', 'both', 'bigquery', 'and', 'cloud', 'datastore', 'APIs.', 'I', 'use', 'glide', 'for', 'go', 'package', 'management.', 'I', 'keep', 'seeing', 'build', 'errors', 'with', 'either', 'bigquery', 'or', 'datastore', 'depending', 'upon', 'the', 'version', 'of', 'golang/protobuf', 'that', 'I', 'use.', 'I', 'am', 'not', 'able', 'to', 'find', 'a', 'version', 'that', 'is', 'compatible', 'with', 'both', 'bigquery', 'and', 'datastore.', 'Either', 'one', 'of', 'the', 'packages', 'keeps', 'failing', 'to', 'build.', 'Build', 'errors', 'in', 'datastore', 'while', 'using', 'golang/protobuf', 'version', '7cc19b78d562895b13596ddce7aafb59dd789318:', '../../vendor/google.golang.org/genproto/googleapis/api/annotations/annotations.pb.go:33:', 'undefined:', 'proto.ProtoPackageIsVersion2', '../../vendor/google.golang.org/genproto/googleapis/api/annotations/annotations.pb.go:41:', 'unknown', 'proto.ExtensionDesc', 'field', ""'Filename'"", 'in', 'struct', 'literal', '../../vendor/google.golang.org/genproto/googleapis/api/annotations/annotations.pb.go:48:', 'undefined:', 'proto.RegisterFile', '../../vendor/google.golang.org/genproto/googleapis/api/annotations/http.pb.go:540:', 'undefined:', 'proto.RegisterFile', 'Build', 'errors', 'in', 'bigquery', 'while', 'using', 'golang/protobuf', 'version', '8ee79997227bf9b34611aee7946ae64735e6fd93:', '../../vendor/cloud.google.com/go/bigquery/params.go:55:', 'undefined:', 'bigquery.QueryParameterType', '../../vendor/cloud.google.com/go/bigquery/params.go:56:', 'undefined:', 'bigquery.QueryParameterType', '../../vendor/cloud.google.com/go/bigquery/params.go:57:', 'undefined:', 'bigquery.QueryParameterType', '../../vendor/cloud.google.com/go/bigquery/params.go:58:', 'undefined:', 'bigquery.QueryParameterType', '../../vendor/cloud.google.com/go/bigquery/params.go:59:', 'undefined:', 'bigquery.QueryParameterType', '../../vendor/cloud.google.com/go/bigquery/params.go:60:', 'undefined:', 'bigquery.QueryParameterType', '../../vendor/cloud.google.com/go/bigquery/params.go:61:', 'undefined:', 'bigquery.QueryParameterType', '../../vendor/cloud.google.com/go/bigquery/params.go:94:', 'undefined:', 'bigquery.QueryParameter', '../../vendor/cloud.google.com/go/bigquery/params.go:110:', 'undefined:', 'bigquery.QueryParameterType', '../../vendor/cloud.google.com/go/bigquery/params.go:178:', 'undefined:', 'bigquery.QueryParameter', 'Opened', 'an', 'issue', 'here', '-', 'https://github.com/GoogleCloudPlatform/google-cloud-go/issues/475.', 'Any', 'pointers', 'would', 'be', 'appreciated.']"
1693,41332454,"

Parent is initialized by some automated process (as apart of unmarshalling flow), so I cannot initialize the embedded WithContext struct,

Is there any way to avoid the nil pointer in the 'SetContext' func ? I tried overriding the pointer receiver but it doesn't have any effect,

Thanks,

Asaf.
","['I', 'have', 'a', 'struct', 'such:', 'type', 'Parent', 'struct', '{', '*', 'WithContext', '}', 'type', 'WithContext', 'struct', '{', 'Ctx', 'context', '.', 'Context', '}', 'func', '(', 'wi', '*', 'WithContext', ')', 'SetContext', '(', 'ctx', 'context', '.', 'Context', ')', '{', '//', 'nil', 'pointer', 'wi', '.', 'Ctx', '=', 'ctx', '}', 'Parent', 'is', 'initialized', 'by', 'some', 'automated', 'process', '(as', 'apart', 'of', 'unmarshalling', 'flow),', 'so', 'I', 'cannot', 'initialize', 'the', 'embedded', 'WithContext', 'struct,', 'Is', 'there', 'any', 'way', 'to', 'avoid', 'the', 'nil', 'pointer', 'in', 'the', ""'SetContext'"", 'func', '?', 'I', 'tried', 'overriding', 'the', 'pointer', 'receiver', 'but', 'it', ""doesn't"", 'have', 'any', 'effect,', 'Thanks,', 'Asaf.']"
1694,41366347,"
","[""I'm"", 'following', 'the', 'golang.org', 'tutorial', 'on', 'building', 'a', 'wiki', 'page', '(https://golang.org/doc/articles/wiki/#tmp_4)', 'and', 'everything', 'runs', 'fine', 'until', ""I've"", 'gotten', 'the', 'above', 'error', 'message', 'during', 'step', '""Using', 'net/http', 'to', 'serve', 'wiki', 'pages"".', ""I've"", 'got', 'a', 'text.txt', 'file', 'in', 'src/github.com/user/gowiki/test.txt', 'but', 'loadPage(title)', ""doesn't"", 'seem', 'to', 'be', 'accessing', 'the', 'test.txt', 'file.', 'Any', 'help', 'is', 'greatly', 'appreciated.', 'Thanks!', 'package', 'main', 'import', '(', '""fmt""', '""io/ioutil""', '""net/http""', ')', 'type', 'Page', 'struct', '{', 'Title', 'string', 'Body', '[]', 'byte', '}', 'func', '(', 'p', '*', 'Page', ')', 'save', '()', 'error', '{', 'filename', ':=', 'p', '.', 'Title', '+', '"".txt""', 'return', 'ioutil.WriteFile(filename, p.Body, 0600)', '}', 'func', 'loadPage', '(', 'title', 'string', ')', '(*', 'Page', ',', 'error', ')', '{', 'filename', ':=', 'title', '+', '"".txt""', 'body', ',', 'err', ':=', 'ioutil.ReadFile(filename)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', '&', 'Page', '{', 'Title', ':', 'title', ',', 'Body', ':', 'body', '},', 'nil', '}', 'func', 'viewHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'title', ':=', 'r', '.', 'URL', '.', 'Path', '[', 'len', '(', '""/view/""', '):]', 'p', ',', '_', ':=', 'loadPage', '(', 'title', ')', 'fmt.Fprintf(w, ""%s%s"", p.Title, p.Body)', '}', 'func', 'main', '()', '{', 'http.HandleFunc(""/view/"", viewHandler)', 'http.ListenAndServe("":8080"", nil)', '}']"
1695,41422187,"Part of my Go program relies on a very large C codebase using import ""C"" that takes a few minutes to compile. Is there any way to precompile per-se that C library or create a branch of my Go program that will be precompiled along with the C code so that each time I compile the main program I don't have to wait for the entire C library to re-compile each time?
",[]
1696,41423272,"This short method in go's source code has a comment which implies that it's not allocating memory in an optimal way.


  ... could do better allocation-wise here ...


This is the source code for the Join method.

What exactly is inefficiently allocated here? I don't see a way around allocating the source string slice and the destination byte slice. The source being the slice of keys. The destination being the slice of bytes.
",[]
1697,41456777,"

I have no idea if this would work. There are so many black magic happened here. 

So the main question is, what is the correct Makefile that can be used to build a Postgres extension in cgo?

A specific question to these errors is, what can I do to defer those symbol resolution in cgo's linking process?
","['Here', 'is', 'what', ""I'm"", 'doing', 'right', 'now,', '.', 'helloworld', '--', '1', '.', '0', '.', 'sql', 'helloworld', '.', 'control', 'helloworld', '.', 'go', 'Makefile', 'helloworld.go', ':', 'package', 'helloworld', '/*', 'cgo', 'LDFLAGS', ':', '-', 'rdynamic', 'include', '""postgres.h""', 'include', '""fmgr.h""', 'include', '""utils/builtins.h""', 'PG_MODULE_MAGIC', ';', 'PG_FUNCTION_INFO_V1', '(', 'helloworld', ');', 'PG_FUNCTION_INFO_V1', '(', 'hello_text_arg', ');', 'PG_FUNCTION_INFO_V1', '(', 'hello_ereport', ');', 'Datum', 'hello_world', '(', 'PG_FUNCTION_ARGS', ')', '{', 'PG_RETURN_TEXT_P', '(', 'cstring_to_text', '(', '""Hello, World!""', '));', '}', 'Datum', 'hello_text_arg', '(', 'PG_FUNCTION_ARGS', ')', '{', 'text', '*', 'hello', '=', 'cstring_to_text', '(', '""Hello, ""', ');', 'int32', 'hello_sz', '=', 'VARSIZE', '(', 'hello', ')', '-', 'VARHDRSZ', ';', 'text', '*', 'name', '=', 'PG_GETARG_TEXT_P', '(', '0', ');', 'int32', 'name_sz', '=', 'VARSIZE', '(', 'name', ')', '-', 'VARHDRSZ', ';', 'text', '*', 'tail', '=', 'cstring_to_text', '(', '""!""', ');', 'int32', 'tail_sz', '=', 'VARSIZE', '(', 'tail', ')', '-', 'VARHDRSZ', ';', 'int32', 'out_sz', '=', 'hello_sz', '+', 'name_sz', '+', 'tail_sz', '+', 'VARHDRSZ', ';', 'text', '*', 'out', '=', '(', 'text', '*)', 'palloc', '(', 'out_sz', ');', 'SET_VARSIZE', '(', 'out', ',', 'out_sz', ');', 'memcpy', '(', 'VARDATA', '(', 'out', '),', 'VARDATA', '(', 'hello', '),', 'hello_sz', ');', 'memcpy', '(', 'VARDATA', '(', 'out', ')', '+', 'hello_sz', ',', 'VARDATA', '(', 'name', '),', 'name_sz', ');', 'memcpy', '(', 'VARDATA', '(', 'out', ')', '+', 'hello_sz', '+', 'name_sz', ',', 'VARDATA', '(', 'tail', '),', 'tail_sz', ');', 'PG_RETURN_TEXT_P', '(', 'out', ');', '}', 'Datum', 'hello_ereport', '(', 'PG_FUNCTION_ARGS', ')', '{', 'ereport', '(', 'ERROR', ',', '(', 'errcode', '(', 'ERRCODE_NULL_VALUE_NOT_ALLOWED', '),', 'errmsg', '(', '""null value not allowed""', ')));', 'PG_RETURN_VOID', '();', '}', '*/', 'import', '""C""', 'Makefile', ':', 'MODULES', '=', 'helloworld', 'EXTENSION', '=', 'helloworld', 'DATA', '=', 'helloworld', '--', '1', '.', '0', '.', 'sql', 'PGFILEDESC', '=', '""helloworld - example extension for postgresql""', 'REGRESS', '=', 'helloworld', 'PG_CONFIG', '=', 'pg_config', 'PGXS', ':=', '$(', 'shell', '$(', 'PG_CONFIG', ')', '--', 'pgxs', ')', 'INCLUDEDIR', '=', '$(', 'shell', '$(', 'PG_CONFIG', ')', '--', 'includedir', '-', 'server', ')', 'include', '$(', 'PGXS', ')', 'helloworld', '.', 'so', ':', 'CGO_CFLAGS', '=', '""-rdynamic -I$(INCLUDEDIR)""', 'CGO_LDFLAGS', '=', '""-rdynamic $(LDFLAGS)""', 'go', 'build', '-', 'v', '-', 'buildmode', '=', 'c', '-', 'shared', '-', 'o', 'helloworld', '.', 'so', '.', 'It', 'produced', 'these', 'errors', 'when', 'making', ':', '/tmp/go-build019341122/github.com/amosbird/rpctest/helloworld/_obj/helloworld.cgo2.o:', 'In', 'func', 'tion', 'hello_world', ':', 'helloworld', '.', 'cgo2', '.', 'c', ':(.', 'text', '+', '0x48', '):', 'undefined', 'reference', 'to', 'cstring_to_text', '/tmp/go-build019341122/github.com/amosbird/rpctest/helloworld/_obj/helloworld.cgo2.o:', 'In', 'func', 'tion', 'hello_text_arg', ':', 'helloworld', '.', 'cgo2', '.', 'c', ':(.', 'text', '+', '0x63', '):', 'undefined', 'reference', 'to', 'cstring_to_text', 'helloworld', '.', 'cgo2', '.', 'c', ':(.', 'text', '+', '0x86', '):', 'undefined', 'reference', 'to', 'pg_detoast_datum', 'helloworld', '.', 'cgo2', '.', 'c', ':(.', 'text', '+', '0xa5', '):', 'undefined', 'reference', 'to', 'cstring_to_text', 'helloworld', '.', 'cgo2', '.', 'c', ':(.', 'text', '+', '0xd7', '):', 'undefined', 'reference', 'to', 'palloc', '/tmp/go-build019341122/github.com/amosbird/rpctest/helloworld/_obj/helloworld.cgo2.o:', 'In', 'func', 'tion', 'hello_ereport', ':', 'helloworld', '.', 'cgo2', '.', 'c', ':(.', 'text', '+', '0x1a8', '):', 'undefined', 'reference', 'to', 'errstart', 'helloworld', '.', 'cgo2', '.', 'c', ':(.', 'text', '+', '0x1bd', '):', 'undefined', 'reference', 'to', 'errmsg', 'helloworld', '.', 'cgo2', '.', 'c', ':(.', 'text', '+', '0x1c9', '):', 'undefined', 'reference', 'to', 'errcode', 'helloworld', '.', 'cgo2', '.', 'c', ':(.', 'text', '+', '0x1d7', '):', 'undefined', 'reference', 'to', 'errfinish', 'collect2', ':', 'ld', 'return', 'ed', '1', 'exit', 'status', 'make', ':', '***', '[', 'helloworld', '.', 'so', ']', 'Error', '2', 'I', 'have', 'no', 'idea', 'if', 'this', 'would', 'work.', 'There', 'are', 'so', 'many', 'black', 'magic', 'happened', 'here.', 'So', 'the', 'main', 'question', 'is,', 'what', 'is', 'the', 'correct', 'Makefile', 'that', 'can', 'be', 'used', 'to', 'build', 'a', 'Postgres', 'extension', 'in', 'cgo?', 'A', 'specific', 'question', 'to', 'these', 'errors', 'is,', 'what', 'can', 'I', 'do', 'to', 'defer', 'those', 'symbol', 'resolution', 'in', ""cgo's"", 'linking', 'process?']"
1698,41492793,"I have troubles with performance when I get 20k-50k and more rows from SELECT * FROM table in rows.scan(&a, &b...). I don't know how to use concurrency in this case because I need to use rows.Next() for iterating, and I can't do it in concurrency.

Performance drops only when I scan results from rows to structure's fields in rows.Scan. 

The query takes 5-15 ms, but scanning takes (40k rows) 800-2000ms.

Thank you!
","['I', 'have', 'no', 'idea', 'if', 'this', 'would', 'work.', 'There', 'are', 'so', 'many', 'black', 'magic', 'happened', 'here.', 'So', 'the', 'main', 'question', 'is,', 'what', 'is', 'the', 'correct', 'Makefile', 'that', 'can', 'be', 'used', 'to', 'build', 'a', 'Postgres', 'extension', 'in', 'cgo?', 'A', 'specific', 'question', 'to', 'these', 'errors', 'is,', 'what', 'can', 'I', 'do', 'to', 'defer', 'those', 'symbol', 'resolution', 'in', ""cgo's"", 'linking', 'process?']"
1699,41521671,"

The output here is truncated but it's the same is the test.txt . As you can see it's always prefixed with random garbage.

What am I doing wrong? Is the forge implementation of AES-CFB wrong or Go's? Why are they incompatible? Or why is it that the decryption differs? And if AES-CFB is a standard why are there different implementations?

I also tried gopherjs as an alternative and that works just fine but a) the code size is too big (~3.7MB) and b) I wouldn't know how to play back the decrypted audio using gopherjs. But that's just as an aside.
","[""I'm"", 'trying', 'to', 'write', 'a', 'little', 'something', 'that', 'is', 'not', 'secure.', 'The', 'purpose', 'is', 'to', 'encrypt', 'server-side', 'mp3s', 'so', 'they', ""can't"", 'be', 'just', 'downloaded', 'with', 'wget', 'or', '""save', 'as""', 'and', 'used', 'by', 'the', 'average', 'Joe.', 'The', 'idea', 'is', 'on', 'the', 'server', 'side,', 'load', 'the', 'mp3,', 'aes-cfb', 'encrypt', 'it,', 'send', 'the', 'key', 'in', 'the', 'header,', 'send', 'the', 'encrypted', 'mp3', 'in', 'the', 'response', 'body.', 'Server', 'side', 'is', 'using', ""Go's"", 'stdlib', 'and', 'AES-CFB', 'encryption.', 'As', 'first', 'with', 'base64', 'encoding,', 'then', 'just', 'plain', 'output', 'of', 'the', 'encrypted', '[]byte-s.', 'Client', 'side', ""I'm"", 'using', 'forge', 'to', 'decrypt.', 'I', 'send', 'a', 'xhr,', 'read', 'the', 'arraybuffer,', 'decrypt', 'using', 'forge', 'and', 'write', 'output', 'to', 'the', 'console.', 'The', 'content', 'of', 'test.txt', 'is', '""this', 'is', 'just', 'a', 'test', 'and', 'maybe', ""it's"", 'working', 'maybe', 'not.""', 'main.go', 'package', 'main', 'import', '(', '""net/http""', '""io""', '""crypto/rand""', '""os""', '""crypto/aes""', '""crypto/cipher""', '""fmt""', ')', 'var', '(', 'key', '=', '""1234567890123456""', 'fn', '=', '""test.txt""', ')', 'func', 'main', '()', '{', 'http.Handle(""/file/"", http.HandlerFunc(serveFile))', 'http.Handle(""/"", http.FileServer(http.Dir(""public"")))', 'http.ListenAndServe("":8080"", nil)', '}', 'func', 'serveFile', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'file', ',', 'e', ':=', 'os.Open(fn)', 'if', 'e', '!=', 'nil', '{', 'fmt.Println(e.Error())', 'return', '}', 'defer', 'file.Close()', 'fi', ',', '_', ':=', 'file.Stat()', 'b', ':=', 'make', '([]', 'byte', ',', 'fi.Size())', 'io.ReadFull(file, b)', 'o', ':=', 'AESencrypt', '([]', 'byte', '(', 'key', '),', 'b', ')', 'w.Header().Set(""Access-Control-Allow-Origin"", ""*"")', '//', 'w.Header().Set(""Key"",', 'key)', 'fmt.Println(o)', 'fmt.Println(len(o))', 'w.Write(o)', '}', 'func', 'AESencrypt', '(', 'key', '[]', 'byte', ',', 'content', '[]', 'byte', ')', '[]', 'byte', '{', 'block', ',', 'err', ':=', 'aes.NewCipher(key)', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'ciphertext', ':=', 'make', '([]', 'byte', ',', 'aes', '.', 'BlockSize', '+', 'len', '(', 'content', '))', 'iv', ':=', 'ciphertext', '[:', 'aes', '.', 'BlockSize', ']', 'if', '_', ',', 'err', ':=', 'io.ReadFull(rand.Reader, iv)', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'stream', ':=', 'cipher.NewCFBEncrypter(block, iv)', 'stream.XORKeyStream(ciphertext[aes.BlockSize:], content)', 'return', 'ciphertext', '}', 'index.html', 'MP3', 'Player', 'Demo', 'Load', 'reader.js', 'func', 'tion', 'loadFile', '(', 'filename', ')', '{', '//', 'var', 'context', '=', 'new', 'AudioContext', '||', 'new', 'webkitAudioContext();', 'var', 'request', '=', 'new', 'XMLHttpRequest', '();', 'var', 'url', '=', '""http://localhost:8080/file/""', ';', 'request.open(""GET"", url + filename, true)', ';', 'request', '.', 'responseType', '=', '""arraybuffer""', ';', 'request', '.', 'onload', '=', 'func', 'tion', '()', '{', 'var', 'rt', '=', 'request', '.', 'response', ';', 'console.log(rt)', ';', 'var', 'decipher', '=', 'for', 'ge', '.', ""cipher.createDecipher('AES-CFB', forge.util.createBuffer('1234567890123456'))"", ';', ""decipher.start({iv: forge.util.createBuffer('1234567890123456')})"", ';', 'decipher.update(forge.util.createBuffer(rt))', ';', 'decipher.finish()', ';', 'console.log(decipher.output)', ';', 'console.log(decipher.output.bytes())', ';', ""console.log('--------------')"", ';', '};', 'request.send()', ';', '}', 'The', 'result', 'is', 'weird.', 'It', 'is', '""properly""', 'decrypted', 'however', ""there's"", 'a', 'prefix', 'or', 'garbage', 'of', 'random', 'length', 'with', 'each', 'decrypted', 'result.', '3', 'outputs:', 'ArrayBuffer', '{', 'byteLength', ':', '69', '}', 'reader', '.', 'js', ':', '10', ':', '9', 'Object', '{', 'data', ':', '""3~æÿK¥=®ªÿÂßthis is just a test…""', ',', 'read', ':', '0', ',', '_constructedStringLength', ':', '69', '}', 'reader', '.', 'js', ':', '16', ':', '9', '3', 'K', '=', 'this', 'is', 'just', 'a', 'test', 'and', 'maybe', 'it', 's', 'working', 'maybe', 'not', '.', 'reader', '.', 'js', ':', '17', ':', '9', '--------------', 'reader', '.', 'js', ':', '18', ':', '9', 'ArrayBuffer', '{', 'byteLength', ':', '69', '}', 'reader', '.', 'js', ':', '10', ':', '9', 'Object', '{', 'data', ':', '""ÅJÇ9Ë54«ÚV«this is just a test…""', ',', 'read', ':', '0', ',', '_constructedStringLength', ':', '69', '}', 'reader', '.', 'js', ':', '16', ':', '9', 'JÇ9Ë54', 'V', 'this', 'is', 'just', 'a', 'test', 'and', 'maybe', 'it', 's', 'working', 'maybe', 'not', '.', 'reader', '.', 'js', ':', '17', ':', '9', '--------------', 'reader', '.', 'js', ':', '18', ':', '9', 'ArrayBuffer', '{', 'byteLength', ':', '69', '}', 'reader', '.', 'js', ':', '10', ':', '9', 'Object', '{', 'data', ':', '""ªÕxïÂ`zqA   \\cýx#this is just a test…""', ',', 'read', ':', '0', ',', '_constructedStringLength', ':', '69', '}', 'reader', '.', 'js', ':', '16', ':', '9', 'xïÂ', 'zqA', 'cýx', 'this', 'is', 'just', 'a', 'test', 'and', 'maybe', 'it', 's', 'working', 'maybe', 'not', '.', 'reader', '.', 'js', ':', '17', ':', '9', '--------------', 'reader', '.', 'js', ':', '18', ':', '9', 'The', 'output', 'here', 'is', 'truncated', 'but', ""it's"", 'the', 'same', 'is', 'the', 'test.txt', '.', 'As', 'you', 'can', 'see', ""it's"", 'always', 'prefixed', 'with', 'random', 'garbage.', 'What', 'am', 'I', 'doing', 'wrong?', 'Is', 'the', 'forge', 'implementation', 'of', 'AES-CFB', 'wrong', 'or', ""Go's?"", 'Why', 'are', 'they', 'incompatible?', 'Or', 'why', 'is', 'it', 'that', 'the', 'decryption', 'differs?', 'And', 'if', 'AES-CFB', 'is', 'a', 'standard', 'why', 'are', 'there', 'different', 'implementations?', 'I', 'also', 'tried', 'gopherjs', 'as', 'an', 'alternative', 'and', 'that', 'works', 'just', 'fine', 'but', 'a)', 'the', 'code', 'size', 'is', 'too', 'big', '(~3.7MB)', 'and', 'b)', 'I', ""wouldn't"", 'know', 'how', 'to', 'play', 'back', 'the', 'decrypted', 'audio', 'using', 'gopherjs.', 'But', ""that's"", 'just', 'as', 'an', 'aside.']"
1700,41612944,"

How can I change this function to also work with a Pilot struct?
I tried using []interface{} without success.

Thank you 
","['I', 'have', 'this', 'function', 'to', 'read', 'a', 'JSON', 'file', 'into', 'a', 'Driver', 'struct:', 'func', 'getDrivers', '()', '[]', 'Driver', '{', 'raw', ',', 'err', ':=', 'ioutil.ReadFile(""/home/ubuntu/drivers.json"")', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err.Error())', 'os.Exit(1)', '}', 'var', 'd', '[]', 'Driver', 'json.Unmarshal(raw, &d)', 'return', 'd', '}', 'How', 'can', 'I', 'change', 'this', 'function', 'to', 'also', 'work', 'with', 'a', 'Pilot', 'struct?', 'I', 'tried', 'using', '[]interface{}', 'without', 'success.', 'Thank', 'you']"
1701,41616043,"

but got an ""error panic: interface conversion: interface is bson.Binary, not []uint8"".

Can some one point me an example how to convert bson.Binary to []byte, so I can save it to file.
","[""I'm"", 'writing', 'a', 'small', 'application', 'that', 'receives', 'message', 'in', 'BSON', 'format', 'from', 'network(its', 'not', 'MongoDB)', 'and', 'have', 'to', 'save', 'fields', 'in', 'files', 'on', 'local', 'machine.', ""I'm"", 'using', 'gopkg.in/mgo.v2/bson', 'for', 'message', 'unmarshaling', 'and', 'it', 'works', 'fine.', 'Almost', 'everything', 'works', 'except', 'one.', 'There', '""userdefined""', 'binary', 'field', 'in', 'message', 'and', 'I', 'have', 'to', 'save', 'it', 'to', 'separate', 'file.', 'I', 'tried', 'to', 'use:', 'var', 'pwr', '=', 'msg', '[', '""pwr""', '].([]', 'byte', ')', 'but', 'got', 'an', '""error', 'panic:', 'interface', 'conversion:', 'interface', 'is', 'bson.Binary,', 'not', '[]uint8"".', 'Can', 'some', 'one', 'point', 'me', 'an', 'example', 'how', 'to', 'convert', 'bson.Binary', 'to', '[]byte,', 'so', 'I', 'can', 'save', 'it', 'to', 'file.']"
1702,41647788,"
","['I', 'use', '""text/template""', 'module.', 'I', 'have', 'struct', 'like', 'this', 'to', 'parse', 'XML', 'from', 'Blogger', 'type', 'Media', 'struct', '{', 'ThumbnailUrl', 'string', 'xml', ':', '""url,attr""', '}', 'type', 'Entry', 'struct', '{', 'ID', 'string', 'xml', ':', '""id""', 'Published', 'Date', 'xml', ':', '""published""', 'Updated', 'Date', 'xml', ':', '""updated""', 'Draft', 'Draft', 'xml', ':', '""control>draft""', 'Title', 'string', 'xml', ':', '""title""', 'Content', 'string', 'xml', ':', '""content""', 'Tags', 'Tags', 'xml', ':', '""category""', 'Author', 'Author', 'xml', ':', '""author""', 'Media', 'Media', 'xml', ':', '""thumbnail""', 'Extra', 'string', '}', 'Then', 'I', 'create', 'Go', 'Template', 'like', 'this', '[', 'image', ']', 'src', '=', '""{{ replace .Media.ThumbnailUrl \'s72-c\' \'s1600\' }}""', 'link', '=', '""""', 'thumblink', '=', '""{{ .Media.ThumbnailUrl }}""', 'alt', '=', '""""', 'title', '=', '""""', 'author', '=', '""""', 'license', '=', '""""', 'licenseLink', '=', '""""', 'The', 'replace', 'function', 'not', 'defined.', 'I', 'want', 'to', 'replace', 'URL', 'from', '{{', '.', 'Media', '.', 'ThumbnailUrl', '}}', 'For', 'example:', 'from', 'this', 'URL', 'https', '://', '2', '.', 'bp', '.', 'blogspot', '.', 'com/-DEeRanrBa6s/WGWGwA2qW5I/AAAAAAAADg4/feGUc-g9rXc9B7hXpKr0ecG9UOMXU3_VQCK4B/s72-c/pemrograman%2Bjavascript%2B-%2Bpetanikode.png', 'To', 'this', 'URL', 'https', '://', '2', '.', 'bp', '.', 'blogspot', '.', 'com/-DEeRanrBa6s/WGWGwA2qW5I/AAAAAAAADg4/feGUc-g9rXc9B7hXpKr0ecG9UOMXU3_VQCK4B/s1600/pemrograman%2Bjavascript%2B-%2Bpetanikode.png']"
1703,41725118,"

I wrote a test function to test how long different operations on the tree take. It takes my Insert() function 34ms to insert 100,000 random integers, and it takes my Contains() function 33ms to check if the tree contains 100,000  random integers. If I bump the number of random integers up to 1,000,000, it takes my Insert() function 34ms to run, but my Contains() function suddenly takes 321ms to run.

Why does Contains() run time increase so drastically, while Insert() stays practically the same?
","[""I'm"", 'trying', 'to', 'learn/understand', 'some', 'basic', 'algorithms,', 'and', 'today', 'I', 'decided', 'to', 'write', 'a', 'binary', 'tree', 'in', 'Go.', 'This', 'is', 'what', 'the', 'structure', 'looks', 'like:', 'type', 'Node', 'struct', '{', 'Value', 'int', 'Left', '*', 'Node', 'Right', '*', 'Node', '}', ""Here's"", 'my', 'function', 'to', 'check', 'if', 'the', 'tree', 'contains', 'an', 'int:', 'func', '(', 'tree', '*', 'Node', ')', 'Contains', '(', 'val', 'int', ')', 'bool', '{', 'if', 'val', '==', 'tree', '.', 'Value', '{', 'return', 'true', '}', 'else', 'if', 'val', '>', 'tree', '.', 'Value', '{', 'if', 'tree', '.', 'Right', '!=', 'nil', '{', 'return', 'tree', '.', 'Right.Contains(val)', '}', 'else', '{', 'return', 'false', '}', '}', 'else', 'if', 'val', '<', 'tree', '.', 'Value', '{', 'if', 'tree', '.', 'Left', '!=', 'nil', '{', 'return', 'tree', '.', 'Left.Contains(val)', '}', 'else', '{', 'return', 'false', '}', '}', 'else', '{', '// huh', 'return', 'false', '}', '}', 'I', 'wrote', 'a', 'test', 'function', 'to', 'test', 'how', 'long', 'different', 'operations', 'on', 'the', 'tree', 'take.', 'It', 'takes', 'my', 'Insert()', 'function', '34ms', 'to', 'insert', '100,000', 'random', 'integers,', 'and', 'it', 'takes', 'my', 'Contains()', 'function', '33ms', 'to', 'check', 'if', 'the', 'tree', 'contains', '100,000', 'random', 'integers.', 'If', 'I', 'bump', 'the', 'number', 'of', 'random', 'integers', 'up', 'to', '1,000,000,', 'it', 'takes', 'my', 'Insert()', 'function', '34ms', 'to', 'run,', 'but', 'my', 'Contains()', 'function', 'suddenly', 'takes', '321ms', 'to', 'run.', 'Why', 'does', 'Contains()', 'run', 'time', 'increase', 'so', 'drastically,', 'while', 'Insert()', 'stays', 'practically', 'the', 'same?']"
1704,41728874,"

sockaddr_any is defined in the core of the Go language (from https://golang.org/src/syscall/types_linux.go). So, I believe it should be linked by default with my C code. But, it seems not to be true. Does someone know what line could I use to include headers from the go language itself (here the syscall structures). 

Thank you very much
","['I', 'would', 'like', 'to', 'be', 'able,', 'in', 'Go,', 'to', 'translate', 'one', 'host', 'address', ""(let's"", 'use', ""'www.google.be')"", 'to', 'a', 'sockaddr', 'structure', 'and', 'then', 'use', 'it', 'from', 'a', 'C', 'code.', 'Translating', 'the', 'host', 'address', 'to', 'a', 'sockaddr_any', 'structure', ""isn't"", 'too', 'hard', 'using', 'the', 'http://github.com/jbenet/go-sockaddr', 'module.', 'My', 'code', 'works', 'and', 'is', 'the', 'following:', 'ipAddr', ',', '_', ':=', 'net.ResolveIPAddr(""ip"", ""www.google.be"")', 'sockAddr', ':=', 'sockaddrnet.IPAddrToSockaddr(ipAddr)', 'rawSockaddr', ',', 'socklen', ',', '_', ':=', 'sockaddr.SockaddrToAny(sockAddr)', 'cStruct', ':=', 'sockaddr.AnyToCAny(rawSockaddr)', 'C.printPointer(cStruct)', 'But,', ""I'm"", 'not', 'able', 'to', 'use', 'this', '*', 'sockaddr', '.', 'C', '.', 'struct', '_sockaddr_any', 'variable:', 'cStruct,', 'from', 'my', 'C', 'code', '(it', 'has', 'incomplete', 'definition,', 'so', 'I', ""can't"", 'use', 'any', 'of', 'its', 'fields),', 'which', 'is', 'the', 'following:', '//', '#include', '//', 'void', 'printPointer(struct', 'sockaddr_any', '*p){', '//', 'printf(""::', '%p', '::', '"",', 'p);', '//', 'How', 'to', 'use', 'P', 'as', 'a', 'sockaddr?', '//', '}', 'import', '""C""', 'sockaddr_any', 'is', 'defined', 'in', 'the', 'core', 'of', 'the', 'Go', 'language', '(from', 'https://golang.org/src/syscall/types_linux.go).', 'So,', 'I', 'believe', 'it', 'should', 'be', 'linked', 'by', 'default', 'with', 'my', 'C', 'code.', 'But,', 'it', 'seems', 'not', 'to', 'be', 'true.', 'Does', 'someone', 'know', 'what', 'line', 'could', 'I', 'use', 'to', 'include', 'headers', 'from', 'the', 'go', 'language', 'itself', '(here', 'the', 'syscall', 'structures).', 'Thank', 'you', 'very', 'much']"
1705,41733469,"I git clone code from github.com/google/gxui
and then 


  cd samples/hello_word
  
  GOOS=windows go build


an error  occurred
it says


  /d01/gopath/src/github.com/goxjs/gl/gl_opengl.go:10:2: no buildable Go
  source files in /d01/gopath/src/github.com/go-gl/gl/v2.1/gl
  /d01/gopath/src/github.com/goxjs/glfw/desktop.go:10:2: no buildable Go
  source files in /d01/gopath/src/github.com/go-gl/glfw/v3.2/glfw


I try to 


  go get -u github.com/go-gl/gl/v2.1/gl go get -u
  github.com/go-gl/glfw/v3.2/glfw


no error  occurred

I try to run again


  GOOS=windows go build


The problem has not been solved
","['I', 'git', 'clone', 'code', 'from', 'github.com/google/gxui', 'and', 'then', 'cd', 'samples/hello_word', 'GOOS=windows', 'go', 'build', 'an', 'error', 'occurred', 'it', 'says', '/d01/gopath/src/github.com/goxjs/gl/gl_opengl.go:10:2:', 'no', 'buildable', 'Go', 'source', 'files', 'in', '/d01/gopath/src/github.com/go-gl/gl/v2.1/gl', '/d01/gopath/src/github.com/goxjs/glfw/desktop.go:10:2:', 'no', 'buildable', 'Go', 'source', 'files', 'in', '/d01/gopath/src/github.com/go-gl/glfw/v3.2/glfw', 'I', 'try', 'to', 'go', 'get', '-u', 'github.com/go-gl/gl/v2.1/gl', 'go', 'get', '-u', 'github.com/go-gl/glfw/v3.2/glfw', 'no', 'error', 'occurred', 'I', 'try', 'to', 'run', 'again', 'GOOS=windows', 'go', 'build', 'The', 'problem', 'has', 'not', 'been', 'solved']"
1706,41784825,"
","['How', 'to', 'add', '1', 'sec', 'to', 'the', 'date', 'in', 'golang', '?', 'I', 'have:', 't', ':=', 'time.Now().Format(""2006/02/01 03:04:05"")', 'and', 'want', 'something', 'like', 'below', 'but', 'so', 'far', 'getting', 'mismatched', 'types', 'string', 'and', 'time.Duration', 'error', 't1', ',', 't2', ',', 't3', '=', 't', '+', '1', '*', 'time', '.', 'Second', ',', 't', '+', '3', '*', 'time', '.', 'Second', ',', 't', '+', '2', '*', 'time', '.', 'Second']"
1707,41789498,"

I prepared a playground here.

If I have an array of Tags containing tag1 and tag2, I'd like to get gif1 and gif2 in &gifs.  

I read the documentation many times and found only the opposite of my question, i.e. fetching the tags for a given gif.

Do I need to change my models?
Is it possible to set up two Associations fields in a many-to-many relation?
","['I', 'have', 'this', 'models,', 'many-to-many,', 'and', ""I'd"", 'like', 'to', 'get', 'all', 'the', 'Gifs', 'that', 'matches', 'a', 'list', 'of', 'Tags.', 'type', 'Tag', 'struct', '{', 'ID', 'uint', 'go', 'rm', ':', '""primary_key""', 'json', ':', '""id,omitempty""', 'Name', 'string', 'go', 'rm', ':', '""not null;unique""', 'json', ':', '""name,omitempty""', '}', 'type', 'Gif', 'struct', '{', 'ID', 'uint', 'go', 'rm', ':', '""primary_key""', 'json', ':', '""id,omitempty""', 'Url', 'string', 'go', 'rm', ':', '""not null;unique""', 'json', ':', '""url,omitempty""', 'Tags', '[]', 'Tag', 'go', 'rm', ':', '""many2many:gif_tags;""', 'json', ':', '""tags,omitempty""', '}', 'I', 'prepared', 'a', 'playground', 'here.', 'If', 'I', 'have', 'an', 'array', 'of', 'Tags', 'containing', 'tag1', 'and', 'tag2,', ""I'd"", 'like', 'to', 'get', 'gif1', 'and', 'gif2', 'in', '&gifs.', 'I', 'read', 'the', 'documentation', 'many', 'times', 'and', 'found', 'only', 'the', 'opposite', 'of', 'my', 'question,', 'i.e.', 'fetching', 'the', 'tags', 'for', 'a', 'given', 'gif.', 'Do', 'I', 'need', 'to', 'change', 'my', 'models?', 'Is', 'it', 'possible', 'to', 'set', 'up', 'two', 'Associations', 'fields', 'in', 'a', 'many-to-many', 'relation?']"
1708,41858635,"
","['The', 'below', 'code', 'opens', '10,000', 'go', 'routines,', 'which', 'make', 'HTTP', 'calls,', 'get', 'the', 'response,', 'close', 'the', 'response,', 'and', 'write', 'to', 'a', 'channel', 'with', 'an', 'ID.', 'In', 'the', 'second', 'for', 'loop,', 'it', 'prints', 'out', 'from', 'that', 'buffered', 'channel', 'the', 'ID', 'of', 'the', 'previous', 'go', 'routine.', 'This', 'causes', 'a', 'segmentation', 'violation,', 'and', 'I', ""can't"", 'figure', 'out', 'why.', 'Panic:', 'panic', ':', 'runtime', 'error', ':', 'invalid', 'memory', 'address', 'or', 'nil', 'pointer', 'dereference', '[', 'signal', 'SIGSEGV', ':', 'segmentation', 'violation', 'code', '=', '0x1', 'addr', '=', '0x4', '0', 'pc', '=', '0x2293', ']', 'Code:', 'package', 'main', 'import', '(', '""fmt""', '""net/http""', ')', 'func', 'main', '()', '{', 'requests', ':=', '10000', 'ch', ':=', 'make', '(', 'chan', 'string', ',', 'requests', ')', 'for', 'i', ':=', '1', ';', 'i', '<=', 'requests', ';', 'i', '++', '{', 'go', 'func', '(', 'iter', 'int', ')', '{', 'fmt.Println(iter)', 'resp', ',', '_', ':=', 'http.Get(""http://localhost:8080/api/project"")', 'resp', '.', 'Body.Close()', 'ch', '<-', 'fmt.Sprint(""%i"", iter)', '}(', 'i', ')', '}', 'for', 'i', ':=', '1', ';', 'i', '<=', 'requests', ';', 'i', '++', '{', 'fmt.Println(<-ch)', '}', '}']"
1709,41887596,"I have this code: https://play.golang.org/p/ubwUH1llxc
This map will be update. Append new var and delete.

Sometime it print:

1 One

6 two

3 Three

5 Four

And can print:

5 Four

6 two

3 Three

1 One

Why it print that?
How I can print by newest? I don't use array for order, because element, that before need element, can be delete earlie. And I worry, that it delete another element.
","['I', 'have', 'this', 'code:', 'https://play.golang.org/p/ubwUH1llxc', 'This', 'map', 'will', 'be', 'update.', 'Append', 'new', 'var', 'and', 'delete.', 'Sometime', 'it', 'print:', '1', 'One', '6', 'two', '3', 'Three', '5', 'Four', 'And', 'can', 'print:', '5', 'Four', '6', 'two', '3', 'Three', '1', 'One', 'Why', 'it', 'print', 'that?', 'How', 'I', 'can', 'print', 'by', 'newest?', 'I', ""don't"", 'use', 'array', 'for', 'order,', 'because', 'element,', 'that', 'before', 'need', 'element,', 'can', 'be', 'delete', 'earlie.', 'And', 'I', 'worry,', 'that', 'it', 'delete', 'another', 'element.']"
1710,41894046,"
","['In', 'Go', 'I', 'can', 'create', 'goroutines', 'like', 'this', '(EDITED', 'as', 'reported', 'by', ""kelu-thatsall's"", 'answer):', '//', 'test.go', 'package', 'main', 'import', '(', '""fmt""', '""os""', '""strconv""', '""sync""', '""runtime""', ')', 'func', 'main', '()', '{', 'var', 'wg', 'sync', '.', 'WaitGroup', 'if', 'len', '(', 'os', '.', 'Args', ')', '<', '2', '{', 'os.Exit(1)', '}', 'k', ',', 'ok', ':=', 'strconv.Atoi(os.Args[1])', 'if', 'ok', '!=', 'nil', '{', 'os.Exit(2)', '}', 'wg.Add(k * 1000)', 'for', 'z', ':=', '0', ';', 'z', '<', 'k', '*', '1000', ';', 'z', '++', '{', 'go', 'func', '(', 'x', 'int', ')', '{', 'defer', 'wg.Done()', 'fmt.Println(x)', '}(', 'z', ')', 'if', 'z', '%', 'k', '==', 'k', '-', '1', '{', '//', '@mattn:', 'avoid', 'busy', 'loop,', 'so', 'Go', 'can', 'start', 'processing', 'like', 'BEAM', 'do', 'runtime.Gosched()', '}', '}', 'wg.Wait()', '}', 'The', 'result', 'in', 'Go', '1.8.0', '(64-bit):', 'shell', '$', 'go', 'build', 'test', '.', 'go', ';', 'for', 'k', 'in', '5', '50', '500', '5000', '50000', '500000', ';', 'do', 'echo', '-', 'n', '$', 'k', ';', 'time', './', 'test', '$', 'k', '>', '/dev/null;', 'done', '5', 'CPU', ':', '0', '.', '0', '0', 's', 'Real', ':', '0', '.', '0', '0', 's', 'RAM', ':', '2080', 'KB', '50', 'CPU', ':', '0', '.', '06', 's', 'Real', ':', '0', '.', '01', 's', 'RAM', ':', '3048', 'KB', '500', 'CPU', ':', '0', '.', '61', 's', 'Real', ':', '0', '.', '12', 's', 'RAM', ':', '7760', 'KB', '5000', 'CPU', ':', '6', '.', '02', 's', 'Real', ':', '1', '.', '23', 's', 'RAM', ':', '17712', 'KB', '17', 'MB', '50000', 'CPU', ':', '62', '.', '30', 's', 'Real', ':', '12', '.', '53', 's', 'RAM', ':', '207720', 'KB', '207', 'MB', '500000', 'CPU', ':', '649', '.', '47', 's', 'Real', ':', '131', '.', '53', 's', 'RAM', ':', '3008180', 'KB', '3', 'GB', ""What's"", 'the', 'equivalent', 'code', 'in', 'Erlang', 'or', 'Elixir?', '(EDITED', 'as', 'reported', 'by', ""patrick-oscity's"", 'comment)', 'What', ""I've"", 'tried', 'so', 'far', 'is', 'the', 'following:', 'test', '.', 'exs', 'defmodule', 'Recursion', 'do', 'def', 'print_multiple_times', '(', 'n', ')', 'when', 'n', '<=', '1', 'do', 'spawn', 'fn', '->', 'IO', '.', 'puts', 'n', 'end', 'end', 'def', 'print_multiple_times', '(', 'n', ')', 'do', 'spawn', 'fn', '->', 'IO', '.', 'puts', 'n', 'end', 'print_multiple_times', '(', 'n', '-', '1', ')', 'end', 'end', '[', 'x', ']=', 'System.argv()', '{', 'k', ',', '_', '}=', 'Integer.parse(x)', 'k', '=', 'k', '*', '1000', 'Recursion.print_multiple_times(k)', 'The', 'result', 'in', 'elixir', '1.4.2', '(erts-8.2.2):', 'shell', '$', 'for', 'k', 'in', '5', '50', '500', '5000', '50000', ';', 'do', 'echo', '-', 'n', '$', 'k', ';', 'time', 'elixir', '--', 'erl', '""+P 90000000""', 'test', '.', 'exs', '$', 'k', '>', '/dev/null;', 'done', '5', 'CPU', ':', '0', '.', '53', 's', 'Real', ':', '0', '.', '50', 's', 'RAM', ':', '842384', 'KB', '842', 'MB', '50', 'CPU', ':', '1', '.', '50', 's', 'Real', ':', '0', '.', '62', 's', 'RAM', ':', '934276', 'KB', '934', 'MB', '500', 'CPU', ':', '11', '.', '92', 's', 'Real', ':', '2', '.', '53', 's', 'RAM', ':', '1675872', 'KB', '1', '.', '6', 'GB', '5000', 'CPU', ':', '122', '.', '65', 's', 'Real', ':', '20', '.', '20', 's', 'RAM', ':', '4336116', 'KB', '4', '.', '3', 'GB', '50000', 'CPU', ':', '1288', '.', '65', 's', 'Real', ':', '209', '.', '66', 's', 'RAM', ':', '6573560', 'KB', '6', '.', '5', 'GB', 'But', ""I'm"", 'not', 'sure', 'if', 'the', 'two', 'are', 'equivalent.', 'Are', 'they', '?', 'EDIT', 'Shortened', 'version', 'as', ""mudasobwa's"", 'comment', 'does', 'not', 'give', 'correct', 'output', 'test2', '.', 'exs', '[', 'x', ']=', 'System.argv()', '{', 'k', ',', '_', '}=', 'Integer.parse(x)', 'k', '=', 'k', '*', '1000', '1', '..', 'k', '|>', 'Enum.each(fn n -> spawn fn -> IO.puts n end end)', 'The', 'result', 'for', 'k', 'in', '5', '50', '500', '5000', '50000', ';', 'do', 'echo', '-', 'n', '$', 'k', ';', 'time', 'elixir', '--', 'erl', '""+P 90000000""', 'test', '.', 'exs', '$', 'k', '|', 'wc', '-', 'l', ';', 'done', ':', '5', 'CPU', ':', '0', '.', '35', 's', 'Real', ':', '0', '.', '41', 's', 'RAM', ':', '1623344', 'KB', '1', '.', '6', 'GB', '2826', 'does', 'not', 'complete', ',', 'this', 'should', 'be', '5000', '50', 'CPU', ':', '1', '.', '0', '8', 's', 'Real', ':', '0', '.', '53', 's', 'RAM', ':', '1691060', 'KB', '1', '.', '6', 'GB', '35062', '500', 'CPU', ':', '8', '.', '69', 's', 'Real', ':', '1', '.', '70', 's', 'RAM', ':', '2340200', 'KB', '2', '.', '3', 'GB', '373193', '5000', 'CPU', ':', '109', '.', '95', 's', 'Real', ':', '18', '.', '49', 's', 'RAM', ':', '4980500', 'KB', '4', '.', '9', 'GB', '4487475', '50000', 'erl_child_setup', 'closed', 'Crash', 'dump', 'is', 'being', 'written', 'to', ':', 'erl_crash', '.', 'dump', '...', 'Command', 'terminated', 'by', 'signal', '9', 'CPU', ':', '891', '.', '35', 's', 'Real', ':', '157', '.', '52', 's', 'RAM', ':', '24361288', 'KB', '24', '.', '3', 'GB', 'Not', 'testing', '500m', 'for', 'elixir', 'because', 'it', 'took', 'too', 'long', 'and', '+P', '500000000', 'argument', 'is', 'bad', 'number', 'of', 'processes']"
1711,41908120,"

I am trying to pass the name of the file selected for uploaded to 'image' field of the struct 'Product'. Any suggestions on how this can be done?
","['My', 'application', 'uses', 'the', 'html', 'code', 'snippet', 'for', 'the', 'form', 'to', 'upload', 'a', 'file', '{{', 'with', '.', 'Errors', '.', 'image', '}}', '{{.}}', '{{', 'end', '}}', 'I', 'need', 'to', 'grab', 'the', 'filename', 'of', 'the', 'uploaded', 'file', 'and', 'pass', 'it', 'to', 'a', 'struct', 'field', 'in', 'Golang.', 'file', ',', 'header', ',', 'err', ':=', 'r.FormFile(""productimage"")', 'defer', 'file.Close()', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), http.StatusInternalServerError)', '}', 'var', 'pimage', '=', 'header', '.', 'Filename', 'p', ':=', '&', 'Product', '{', 'Puid', ':', 'Puid', '(),', 'Pname', ':', 'r.FormValue(""productName"")', ',', 'Quantity', ':', 'r.FormValue(""quantity"")', ',', 'Price', ':', 'r.FormValue(""price"")', ',', 'Image', ':', 'pimage', ',', '}', 'I', 'am', 'trying', 'to', 'pass', 'the', 'name', 'of', 'the', 'file', 'selected', 'for', 'uploaded', 'to', ""'image'"", 'field', 'of', 'the', 'struct', ""'Product'."", 'Any', 'suggestions', 'on', 'how', 'this', 'can', 'be', 'done?']"
1712,41943744,"

Thank you for your help
","['I', 'have', 'an', 'array', 'whose', 'contain', 'some', 'ID', ':', '[', '""4007fa1c-4e27-4d2e-9429-f3631171760c""', ',', '""a21649a3-1a64-45cf-b92a-e899a7ef4742""', ',', '""1903a571-b166-4f93-9c1c-93dc66067a49""', ',', '""2845d278-5ec4-45e9-ab9c-999178332c73""', ',', '""4e3ed481-a3d9-4689-8873-5c912668b26f""', ',', '""390e89fd-d680-4264-8806-8295b361d2f1""', ']', 'I', 'would', 'like', 'thanks', 'to', 'this', 'array,', 'find', 'all', 'the', 'posts', 'having', 'for', '""OriginID"",', 'one', 'of', 'the', 'Ids', 'present', 'in', 'the', 'table.', ""I've"", 'started', 'something', 'like', 'that,', 'but', 'I', ""don't"", 'know', 'how', 'to', 'complete', 'to', 'make', 'work', 'this', 'code.', 'curs', ',', '_', '=', 'r.Table(""posts"")', '.', 'Filter', '(', 'r', '.', 'Row.Field(""Validated"").Eq(false))', '.', 'Filter', '(', 'func', '(', 'customer', 'r', '.', 'Term', ')', 'interface', '{}{', 'for', '_', ',', 'id', ':=', 'range', 'listOriginID', '{', '//', 'I', ""don't"", 'know', 'how', 'to', 'finish', '}', '})', 'Thank', 'you', 'for', 'your', 'help']"
1713,42047889,"

I would like to understand that why is node = &newHead my InsertList method did not reference the node pointer to a different struct at all
","['I', 'am', 'trying', 'to', 'wrap', 'my', 'head', 'around', 'pointer', 'in', 'go.', 'I', 'have', 'this', 'code', 'right', 'here', 'package', 'main', 'import', '(', '""fmt""', ')', '//', 'LinkedList', 'type', 'type', 'LinkedList', 'struct', '{', 'data', 'int', 'next', '*', 'LinkedList', '}', '//', 'InsertList', 'will', 'insert', 'a', 'item', 'into', 'the', 'list', 'func', '(', 'node', '*', 'LinkedList', ')', 'InsertList', '(', 'data', 'int', ')', '{', 'newHead', ':=', 'LinkedList', '{', 'data', ',', 'node', '}', 'node', '=', '&', 'newHead', '}', 'func', 'main', '()', '{', 'node', ':=', '&', 'LinkedList', '{}', 'node.InsertList(4)', 'fmt.Printf(""node = %+v\\n"", node)', '}', 'and', 'The', 'output', 'is', 'node', '=', '&{', 'data', ':', '0', 'next', ':}', 'I', 'would', 'like', 'to', 'understand', 'that', 'why', 'is', 'node', '=', '&newHead', 'my', 'InsertList', 'method', 'did', 'not', 'reference', 'the', 'node', 'pointer', 'to', 'a', 'different', 'struct', 'at', 'all']"
1714,42069615,"

As you can see, the pairing is exactly correct. Each return code returns &ConfigMap and err and the function signature matches it. What am I missing?
","[""I've"", 'been', 'pulling', 'my', 'hair', 'out', 'as', 'to', 'why', 'this', 'code', 'throws', 'the', 'error:', 'package', 'util', 'import', '(', '""path/filepath""', '""sync""', '""github.com/go-ini/ini""', ')', '//', 'ConfigMap', 'is', 'map', 'for', 'config', 'values', 'type', 'ConfigMap', 'struct', '{', 'LogPath', 'string', 'PublicDir', 'string', 'SessionName', 'string', 'Debug', 'bool', 'DBUsersHost', 'string', 'DBUsersName', 'string', 'DBUsersUsername', 'string', 'DBUsersPassword', 'string', '}', 'var', 'once', 'sync', '.', 'Once', '//', 'Config', 'loads', 'and', 'return', 'config', 'object', 'func', 'Config', '()', '(*', 'ConfigMap', ',', 'error', ')', '{', 'once.Do(func()', '{', '//', 'Find', 'the', 'location', 'of', 'the', 'app.conf', 'file', 'configFilePath', ',', 'err', ':=', 'filepath.Abs(""../build/app.conf"")', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', '//', 'Load', 'app.conf', 'cfg', ',', 'err', ':=', 'ini.Load(configFilePath)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', '//', 'Get', 'app', 'mode', 'mode', ',', 'err', ':=', 'AppMode', '()', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'c', ':=', '&', 'ConfigMap', '{}', 'err', '=', 'cfg.Section(mode).MapTo(c)', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', 'c', ',', 'err', '})', '}', 'As', 'you', 'can', 'see,', 'the', 'pairing', 'is', 'exactly', 'correct.', 'Each', 'return', 'code', 'returns', '&ConfigMap', 'and', 'err', 'and', 'the', 'function', 'signature', 'matches', 'it.', 'What', 'am', 'I', 'missing?']"
1715,42197468,"
","['I', 'use', 'regexp.FindAll()', 'to', 'get', 'all', 'the', 'matches.', 'I', ""don't"", 'understand', 'the', 'parameter', 'of', 'n,', 'and', 'in', 'the', 'office', 'reference,', 'there', 'is', 'no', 'explanation.', 'How', 'can', 'I', 'set', 'the', 'parameter.', '//', 'FindAll', 'is', 'the', ""'All'"", 'version', 'of', 'Find;', 'it', 'returns', 'a', 'slice', 'of', 'all', 'successive', '//', 'matches', 'of', 'the', 'expression,', 'as', 'defined', 'by', 'the', ""'All'"", 'description', 'in', 'the', '//', 'package', 'comment.', '//', 'A', 'return', 'value', 'of', 'nil', 'indicates', 'no', 'match.', 'func', '(', 're', '*', 'Regexp', ')', 'FindAll', '(', 'b', '[]', 'byte', ',', 'n', 'int', ')', '[][]', 'byte', '{}']"
1716,42357204,"

Any help would be greatly appreciated 
","[""let's"", 'say', 'I', 'have', 'the', 'following', 'structure', 'content', '-', 'blog', '-', 'folder', '-', '1', '--', 'blog', '-', 'article', '-', '1', '-', '1', '.', 'md', '--', 'blog', '-', 'article', '-', '1', '-', '2', '.', 'md', '-', 'blog', '-', 'folder', '-', '2', '--', 'blog', '-', 'article', '-', '2', '-', '1', '.', 'md', '--', 'blog', '-', 'article', '-', '2', '-', '2', '.', 'md', 'Then', 'I', 'also', 'have', 'the', 'layouts/_default/list.html', 'file', 'which', 'will', 'be', 'called', 'every', 'time', 'I', 'visit', 'the', 'URLs', 'example.com/,', 'example', '.', 'com/blog-topic-1/', ',', 'and', 'example', '.', 'com/blod-topic-2/', 'So', 'the', 'problem', 'I', 'have', 'is', 'that', 'I', ""don't"", 'want', 'the', 'layouts/_default/list.html', 'file', 'to', 'generate', 'the', 'same', 'content', 'for', 'these', 'different', 'paths..', 'I', 'overcame', 'the', 'problem', 'of', 'only', 'displaying', 'certain', 'articles', 'in', 'the', 'homepage', 'by', 'adding', '++', 'displayHomepage', '=', '""true""', '++', 'to', 'the', '.md', 'files', 'and', '{{', 'range', '$', 'index', ',', '$', 'page', ':=', 'first', '50', '(', 'where', '.', 'Site', '.', 'Pages', '.', 'ByPublishDate', '"".Params.displayHomepage""', '""true""', ')', '}}', 'to', 'the', 'list.html', 'file,', 'but', 'I', ""can't"", 'figure', 'out', 'what', 'to', 'do', 'if', 'I', ""don't"", 'want', 'to', 'display', 'blog-article-2-1.md', 'when', 'visiting', 'example', '.', 'com/blog-folder-1/', 'Any', 'help', 'would', 'be', 'greatly', 'appreciated']"
1717,42375121,"

This only allows me to range through two levels of replies (and as you can see uses duplicate code), I need to be able to range through an arbitrary number of levels of Replies.
","[""I'm"", 'trying', 'to', 'build', 'a', 'web', 'forum', 'kind', 'of', 'like', 'Reddit.', 'There', 'are', 'top', 'level', 'posts', 'with', 'replies', 'and', 'the', 'replies', 'can', 'have', 'replies', 'and', 'so', 'on.', 'A', 'board', 'looks', 'like', 'this:', 'var', 'board', 'map', '[', 'string', ']*', 'Post', 'and', 'a', 'Post:', 'type', 'Post', 'struct', '{', 'Title', 'string', 'Body', 'string', 'ID', 'string', 'PostNum', 'int', 'Replies', '[]*', 'Post', '}', 'How', 'would', 'I', 'use', 'a', 'template', 'to', 'range', 'through', 'the', 'nested', 'Replies', 'slices', '(keeping', 'in', 'mind', 'that', 'each', '*Post', 'contains', 'a', 'Replies', 'slice', 'that', 'contains', '*Posts', 'that', 'contains', 'Replies', 'and', 'so', 'on)?', 'What', 'I', 'have', 'so', 'far:', '{{', '.', 'Title', '}}', '{{', '.', 'Body', '}}', '{{', 'range', '$', 'key', ',', '$', 'value', ':=', '.', 'Replies', '}}', '{{', '$', 'value', '.', 'ID', '}}', '{{', '$', 'value', '.', 'PostNum', '}}', '{{', 'range', '$', 'key', ',', '$', 'value', ':=', '$', 'value', '.', 'Replies', '}}', '{{', '$', 'value', '.', 'ID', '}}', '{{', '$', 'value', '.', 'PostNum', '}}', '{{', 'end', '}}', '{{', 'end', '}}', 'This', 'only', 'allows', 'me', 'to', 'range', 'through', 'two', 'levels', 'of', 'replies', '(and', 'as', 'you', 'can', 'see', 'uses', 'duplicate', 'code),', 'I', 'need', 'to', 'be', 'able', 'to', 'range', 'through', 'an', 'arbitrary', 'number', 'of', 'levels', 'of', 'Replies.']"
1718,42377057,"

Which somehow makes sense, because there are actually no sources in the  root directory and the project is compiled with the Prometheus utility tool.

Is there any way to deploy Prometheus to Cloud Foundry, like using another Buildpack or something?
","['I', 'want', 'to', 'deploy', 'Prometheus', 'to', 'Cloud', 'Foundry', 'without', 'using', 'Docker', 'container.', 'When', 'I', 'try', 'to', 'deploy', 'it', 'with', 'the', 'standard', 'Cloud', 'Foundry', 'Go', 'Buildpack', 'I', 'get', 'the', 'following', 'error:', 'can', 't', 'load', 'package', ':', 'package', 'prometheus', ':', 'no', 'buildable', 'Go', 'source', 'files', 'in', '/tmp/tmp.vv4iyDzMvE/.go/src/prometheus', 'Which', 'somehow', 'makes', 'sense,', 'because', 'there', 'are', 'actually', 'no', 'sources', 'in', 'the', 'root', 'directory', 'and', 'the', 'project', 'is', 'compiled', 'with', 'the', 'Prometheus', 'utility', 'tool.', 'Is', 'there', 'any', 'way', 'to', 'deploy', 'Prometheus', 'to', 'Cloud', 'Foundry,', 'like', 'using', 'another', 'Buildpack', 'or', 'something?']"
1719,42406445,"

finally, I find it caused by the git's version, the centos with git 1.8.3 and the alpine with git 2.11.0.
then I change the centos git's version with 2.11.0, becomes the same wrong with alpine.
I think I can modify golang or git source file solve this problem,
could someone help me? thinks~!
","['I', 'created', 'the', 'private', 'repository', 'using', 'the', 'coding.net.', 'I', 'use', 'docker', 'images', 'alpine', 'and', 'centos.', 'I', 'can', 'go', 'get', 'git', '.', 'coding', '.', 'net/alphayan/orionv2.git', 'successful', 'from', 'docker-centos,', 'but', 'I', ""can't"", 'go', 'get', 'git', '.', 'coding', '.', 'net/alphayan/test.git', 'from', 'docker-alpine.It', 'returns', 'an', 'error', 'stating:', '/go/src # go get -u -v  git.coding.net/alphayan/test.git', 'cd', '.;', 'git', 'ls', '-', 'remote', 'https', '://', 'git', '.', 'coding', '.', 'net/alphayan/test', 'fatal', ':', 'could', 'not', 'read', 'Username', 'for', ""'https://git.coding.net'"", ':', 'terminal', 'prompts', 'disabled', 'cd', '.;', 'git', 'ls', '-', 'remote', 'git', '+', 'ssh', '://', 'git', '.', 'coding', '.', 'net/alphayan/test', 'Permission', 'denied', '(', 'publickey', ').', 'fatal', ':', 'Could', 'not', 'read', 'from', 'remote', 'repository', '.', 'Please', 'make', 'sure', 'you', 'have', 'the', 'correct', 'access', 'rights', 'and', 'the', 'repository', 'exists', '.', 'cd', '.;', 'git', 'ls', '-', 'remote', 'ssh', '://', 'git', '.', 'coding', '.', 'net/alphayan/test', 'Permission', 'denied', '(', 'publickey', ').', 'fatal', ':', 'Could', 'not', 'read', 'from', 'remote', 'repository', '.', 'Please', 'make', 'sure', 'you', 'have', 'the', 'correct', 'access', 'rights', 'and', 'the', 'repository', 'exists', '.', 'package', 'git', '.', 'coding', '.', 'net/alphayan/test.git: cannot download, git.coding.net/alphayan/test', 'uses', 'insecure', 'protocol', 'From', 'centos', 'it', 'let', 'me', 'use', 'the', 'username', 'and', 'password:', '[', 'root', '83', 'fc8067fc95', '/]', 'go', 'get', '-', 'u', '-', 'v', 'git', '.', 'coding', '.', 'net/alphayan/test.git', 'Username', 'for', ""'https://git.coding.net'"", ':', 'finally,', 'I', 'find', 'it', 'caused', 'by', 'the', ""git's"", 'version,', 'the', 'centos', 'with', 'git', '1.8.3', 'and', 'the', 'alpine', 'with', 'git', '2.11.0.', 'then', 'I', 'change', 'the', 'centos', ""git's"", 'version', 'with', '2.11.0,', 'becomes', 'the', 'same', 'wrong', 'with', 'alpine.', 'I', 'think', 'I', 'can', 'modify', 'golang', 'or', 'git', 'source', 'file', 'solve', 'this', 'problem,', 'could', 'someone', 'help', 'me?', 'thinks~!']"
1720,42412935,"

How should I declare a slice of slice of interfaces? I see this as the only way. I tried without parenthesis like:

[][]interface{}


but it won't work either.

I tried to search for 'golang slice of slice' on google but very few things appear. For example I've only found how to create a simple one made of uint8, which is: [][]uint8.
","[""I'm"", 'trying', 'to', 'create', 'a', 'function', 'that', 'returns', 'the', 'all', 'the', 'key,', 'value', 'of', 'a', 'map', 'as', 'a', 'slice', 'of', 'slice', 'of', 'tuples', '(where', 'each', 'tuple', 'is', '{key,', 'value})', ""Here's"", 'the', 'code:', 'func', 'ReturnTuples', '(', 'map', '_', 'map', '[', 'interface', '{}]', 'interface', '{})', '[][]', 'interface', '{}', '{', 'toReturn', ':=', '[]([]', 'interface', '{})', '...', 'But', ""I'm"", 'getting', 'error', 'for', 'the', 'toReturn', 'line:', 'type', '[][]', 'interface', '{}', 'is', 'not', 'an', 'expression', 'How', 'should', 'I', 'declare', 'a', 'slice', 'of', 'slice', 'of', 'interfaces?', 'I', 'see', 'this', 'as', 'the', 'only', 'way.', 'I', 'tried', 'without', 'parenthesis', 'like:', '[][]interface{}', 'but', 'it', ""won't"", 'work', 'either.', 'I', 'tried', 'to', 'search', 'for', ""'golang"", 'slice', 'of', ""slice'"", 'on', 'google', 'but', 'very', 'few', 'things', 'appear.', 'For', 'example', ""I've"", 'only', 'found', 'how', 'to', 'create', 'a', 'simple', 'one', 'made', 'of', 'uint8,', 'which', 'is:', '[][]uint8.']"
1721,42473897,"
","['Just', 'curious,', 'is', 'there', 'a', 'way', 'to', 'export', 'a', 'function', 'whose', 'name', 'starts', 'with', 'a', 'lower', 'case', 'character,', 'like', '""print""', 'or', '""start""?', 'A', 'side', 'note:', 'just', 'like', 'you', 'do', 'with', 'JSON:', 'type', 'T', 'struct', '{', 'FieldA', 'int', 'json', ':', '""field_a""', 'FieldB', 'string', 'json', ':', '""field_b,omitempty""', '}']"
1722,42516717,"

How do I stop my routine? 
","['I', 'have', 'a', 'goroutine', 'that', 'calls', 'a', 'function', 'and', 'with', 'a', 'special', 'parameter', 'i', 'want', 'to', 'start', 'or', 'stop', 'this', 'goroutine.', 'My', 'problem', 'is', 'that', 'this', 'code', 'never', 'stops', 'my', 'goroutine,', 'it', 'creates', 'everytime', 'a', 'new', 'job.', 'quit', ':=', 'make', '(', 'chan', 'bool', ')', 'run', ':=', 'make', '(', 'chan', 'bool', ')', 'go', 'func', '()', '{', 'for', '{', 'select', '{', 'case', '<-', 'quit', ':', 'close', '(', 'run', ')', 'case', '<-', 'run', ':', 'myFunc', '(', 'c', ')', 'default', ':', '}', '}', '}()', 'if', 'x', '==', 'true', '{', 'quit', '<-', 'true', '}', 'else', '{', 'run', '<-', 'true', '}', 'How', 'do', 'I', 'stop', 'my', 'routine?']"
1723,42526950,"I'm writing a package in go that creates a connection to Kafka.

I create the connection in the init() function in the main file in the package. After the program that uses the package stops, I want to call a function called Close()

Is there a way to enforce it in the package level, instead of giving this responsibility to the user?

Assume that the connection should be available throughout the run of the user's program, I don't want to initialize it every time.
","['How', 'do', 'I', 'stop', 'my', 'routine?']"
1724,42566116,"

Will multiple go routines collide on the reads? In other words, could different go routine grab the same elem in the channel, or while one go routine is reading the buffer, the other go routines already read and processed some of the elements? How to block other go routines from reading while one go routine is reading?
","['I', 'have', 'a', 'buffered', 'channel', 'that', 'are', 'read', 'by', 'multiple', '(4', 'in', 'this', 'example)', 'go', 'routines.', 'queue', ':=', 'make', '(', 'chan', 'string', ',', '10000', ')', '// a large buffered channel', 'Each', 'go', 'routine', 'checks', 'the', 'number', 'of', 'elements', 'available', 'in', 'the', 'channel', 'and', 'process', 'them', 'all.', 'for', 'i', ':=', '0', ';', 'i', '<', '4', ';', 'i', '++{', '// spun 4 go routines', 'go', 'func', '()', '{', 'for', '{', 'for', 'elem', ':=', 'range', 'queue', '{', '//', 'do', 'something', 'with', 'the', 'elem', 'from', 'the', 'channel', '}', '}', '}', '}', 'Will', 'multiple', 'go', 'routines', 'collide', 'on', 'the', 'reads?', 'In', 'other', 'words,', 'could', 'different', 'go', 'routine', 'grab', 'the', 'same', 'elem', 'in', 'the', 'channel,', 'or', 'while', 'one', 'go', 'routine', 'is', 'reading', 'the', 'buffer,', 'the', 'other', 'go', 'routines', 'already', 'read', 'and', 'processed', 'some', 'of', 'the', 'elements?', 'How', 'to', 'block', 'other', 'go', 'routines', 'from', 'reading', 'while', 'one', 'go', 'routine', 'is', 'reading?']"
1725,42631255,"I want to build an application that displays the content that user types on the command prompt to the display like a presentation.
I am writing this application in golang. If there are existing libraries that I can use to do this great and if not would need direction how to approach solving this.
I did search on the internet for pointers but found none.
","['I', 'want', 'to', 'build', 'an', 'application', 'that', 'displays', 'the', 'content', 'that', 'user', 'types', 'on', 'the', 'command', 'prompt', 'to', 'the', 'display', 'like', 'a', 'presentation.', 'I', 'am', 'writing', 'this', 'application', 'in', 'golang.', 'If', 'there', 'are', 'existing', 'libraries', 'that', 'I', 'can', 'use', 'to', 'do', 'this', 'great', 'and', 'if', 'not', 'would', 'need', 'direction', 'how', 'to', 'approach', 'solving', 'this.', 'I', 'did', 'search', 'on', 'the', 'internet', 'for', 'pointers', 'but', 'found', 'none.']"
1726,42633651,"

I am using the tmp variable in countLines to get around the inability to assign directly to values in maps as outlined in the Go Github repo.
","[""I'm"", 'working', 'on', 'Exercise', '1.4', 'from', 'The', 'Go', 'Programming', 'Language.', 'The', 'program', 'reads', 'stdin', 'or', 'files', 'given', 'as', 'arguments', 'and', 'outputs', 'lines', 'that', 'have', 'duplicates.', 'I', 'have', 'working', 'code,', ""I'm"", 'just', 'wondering', 'if', 'there', 'is', 'a', 'better', 'way', 'to', 'use', 'maps', 'within', 'structs?', 'Right', 'now', 'I', 'have', 'a', 'new', 'map', 'being', 'made', 'in', 'the', 'struct', 'when', 'a', 'unique', 'line', 'is', 'found.', 'But', 'it', 'seems', 'clumsy,', 'and', 'I', 'want', 'to', 'know', 'if', 'I', 'should', 'approach', 'this', 'another', 'way.', 'type', 'dupCount', 'struct', '{', 'count', 'int', 'fileCount', 'map', '[', 'string', ']', 'int', '}', 'func', 'main', '()', '{', 'counts', ':=', 'make', '(', 'map', '[', 'string', ']', 'dupCount', ')', 'files', ':=', 'os', '.', 'Args', '[', '1', ':]', 'if', 'len', '(', 'files', ')', '==', '0', '{', 'countLines', '(', 'os', '.', 'Stdin', ',', 'counts', ',', '""stdin""', ')', '}', 'else', '{', 'for', '_', ',', 'arg', ':=', 'range', 'files', '{', 'f', ',', 'err', ':=', 'os.Open(arg)', 'if', 'err', '!=', 'nil', '{', 'fmt.Fprintf(os.Stderr, ""dup2: %v\\n"", err)', 'continue', '}', 'countLines', '(', 'f', ',', 'counts', ',', 'arg', ')', 'f.Close()', '}', '}', 'func', 'countLines', '(', 'f', '*', 'os', '.', 'File', ',', 'counts', 'map', '[', 'string', ']', 'dupCount', ',', 'filename', 'string', ')', '{', 'input', ':=', 'bufio.NewScanner(f)', 'for', 'input.Scan()', '{', 'var', 'tmp', '=', 'counts', '[', 'input.Text()', ']', 'if', 'tmp', '.', 'count', '==', '0', '{', 'tmp', '.', 'fileCount', '=', 'make', '(', 'map', '[', 'string', ']', 'int', ')', '}', 'tmp', '.', 'count', '++', 'tmp', '.', 'fileCount', '[', 'filename', ']++', 'counts', '[', 'input.Text()', ']', '=', 'tmp', '}', '}', 'I', 'am', 'using', 'the', 'tmp', 'variable', 'in', 'countLines', 'to', 'get', 'around', 'the', 'inability', 'to', 'assign', 'directly', 'to', 'values', 'in', 'maps', 'as', 'outlined', 'in', 'the', 'Go', 'Github', 'repo.']"
1727,42705505,"
","['I', 'wrote', 'a', 'test', 'code,', 'but', 'do', 'not', 'understand', 'why', 'I', 'get', 'this', 'result.', 'My', 'sub()', 'should', 'update', 'or', 'return', 'counter,', 'based', 'on', 'the', 'channel', 'value', 'send', '1', '=', 'counter', '++', 'send', '0', '=', 'return', 'counter', 'I', 'start', '10', 'go', 'routines', 'con().', 'They', 'should', 'simply', 'send', 'many', '1', 'to', 'channel', '(this', 'increase', 'counter)', 'I', 'wait', '1', 'sec', 'and', 'send', '0', 'to', 'channel.', 'What', 'value', 'should', 'I', 'get?', 'I', 'think', 'first,', 'I', 'get', 'a', '""random""', 'value,', 'but', 'i', 'get', '100000', '(ok', '10x', '10000', 'is', 'faster', 'than', '1', 'sec)', 'Now', 'I', 'change', 'for', 'i', ':=', '0', ';', 'i', '<', '10', ';', 'i', '++', '{', 'to', 'for', 'i', ':=', '0', ';', 'i', '<', '10000', ';', 'i', '++', '{', 'and', 'now', 'my', 'returned', 'value', 'is', '1', 'Why!?', 'Now', 'uncomment', 'fmt.Println(counter)', 'in', 'main().', 'As', 'you', 'see', 'counter', 'works', 'and', 'has', 'this', '""random""', 'number', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'var', 'ch', 'chan', 'int', '=', 'make', '(', 'chan', 'int', ')', 'var', 'counter', 'int', 'func', 'main', '()', '{', 'go', 'sub', '()', 'for', 'i', ':=', '0', ';', 'i', '<', '10', ';', 'i', '++', '{', '//change to 10000', 'go', 'con', '()', '}', 'time.Sleep(1000 * time.Millisecond)', 'ch', '<-', '0', 'fmt.Println(<- ch)', '//', 'fmt.Println(counter)', 'uncomment', 'this', '}', 'func', 'sub', '()', '{', 'for', 'c', ':=', 'range', 'ch', '{', 'if', 'c', '==', '0', '{', 'ch', '<-', 'counter', '}', 'if', 'c', '==', '1', '{', 'counter', '++', '}', '}', '}', 'func', 'con', '()', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '10000', ';', 'i', '++', '{', 'ch', '<-', '1', '}', '}']"
1728,42726635,"
","['What', 'is', 'going', 'wrong', 'here?', 'I', 'am', '100%', 'sure', 'I', 'am', 'sending', 'a', 'HTTP', 'POST', 'request,', 'but', 'somehow', 'the', 'OR', 'operator', 'is', 'not', 'working', 'as', 'I', 'am', 'expecting.', 'In', 'the', 'first', 'example', 'the', 'server', 'returns', 'a', '405', 'and', 'in', 'the', 'second', 'example', 'the', 'code', 'continues', 'executing.', 'not', 'working:', 'if', 'req', '.', 'Method', '!=', 'http', '.', 'MethodPost', '||', 'req', '.', 'Method', '!=', 'http', '.', 'MethodDelete', '{', 'http.Error(res, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)', 'return', '}', 'working:', 'if', 'req', '.', 'Method', '!=', 'http', '.', 'MethodPost', '{', 'http.Error(res, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)', 'return', '}']"
1729,42730854,"I have a simple Golang application with a HTTP API that controls the app, the api has a frontend over it powered by a React.js app. The frontend allows users to change settings and  POSTS a json object called settings directly to the API /api/settings endpoint (which has simple JWT authentication builtin). I take that object unmarshal it into a struct for the application to use, in case of an error the application uses the default struct and sends an error to the client. My question is; am I doing this correctly or is this insecure; sending the json directly to the app, without any server side validation, but a simple json.unmarshal? 

PS:I come from a PHP+MySQL web apps background, where accepting client input for the DB without escaping it was a very dangerous thing to do. 
",[]
1730,42758054,"

so how to fix this? im pretty new with Go language
 NOTE: i'm using GORM as well for my db ORM
","[""I'm"", 'using', 'GIN', 'as', 'GO', 'framework,', 'im', 'having', 'an', 'issue', 'when', 'uploading', 'file', 'and', 'directly', 'convert', 'image', 'as', 'byte', 'so', 'i', 'can', 'store', 'it', 'in', 'my', 'BLOB', 'field', 'inside', 'db', 'table,', 'so', 'i', 'have', 'my', 'piece', 'of', 'code', 'like', 'this', ':', 'func', '(', 'a', '*', 'AppHandler', ')', 'Upload', '(', 'ctx', '*', 'gin', '.', 'Context', ')', '{', 'for', 'm', ':=', '&', 'struct', '{', 'Name', 'string', 'for', 'm', ':', '""name""', 'validate', ':', '""required""', 'Token', 'string', 'for', 'm', ':', '""token""', 'validate', ':', '""required""', 'AppCode', 'string', 'for', 'm', ':', '""app_code""', 'validate', ':', '""required""', '}{}', 'ctx.Bind(form)', 'if', 'validationErrors', ':=', 'a', '.', 'ValidationService.ValidateForm(form)', ';', 'validationErrors', '!=', 'nil', '{', 'httpValidationErrorResponse', '(', 'ctx', ',', 'validationErrors', ')', 'return', '}', 'file', ',', 'header', ',', 'err', ':=', 'ctx', '.', 'Request.FormFile(""file"")', 'and', 'im', 'trying', 'to', 'store', 'it', 'in', 'db', 'like', 'this', 'app.SetFile(file)', 'a', '.', 'AppStore.Save(app)', 'and', 'it', 'returns', 'this', 'kind', 'of', 'error:', 'cannot', 'use', 'file', '(', 'type', 'multipart', '.', 'File', ')', 'as', 'type', '[]', 'byte', 'so', 'how', 'to', 'fix', 'this?', 'im', 'pretty', 'new', 'with', 'Go', 'language', 'NOTE:', ""i'm"", 'using', 'GORM', 'as', 'well', 'for', 'my', 'db', 'ORM']"
1731,42758392,"

Anybody, help me to understand what that error means & how to solve those?
","[""I'm"", 'new', 'to', 'golang.', 'Trying', 'to', 'implement', 'a', 'bulk', 'upload', 'to', 'Elasticsearch', 'by', 'golang.', ""I'm"", 'using', 'golang', 'library', '->', 'https://github.com/olivere/elastic', 'for', 'communication', 'with', 'Elasticsearch.', 'Also,', 'a', 'piece', 'of', 'sample', 'code', 'which', ""I'm"", 'trying', 'but', 'getting', 'following', 'error...', 'suresh', 'BLR', '-', '245', ':', '/Desktop/tools/golang/src$ go install github.com/crazyheart/elastic-bulk-upload', 'github', '.', 'com/crazyheart/elastic-bulk-upload', 'github', '.', 'com/crazyheart/elastic-bulk-upload/main.go:29:', 'not', 'enough', 'arguments', 'in', 'call', 'to', 'bulkRequest', '.', 'Do', 'have', '()', 'want', '(', '""golang.org/x/net/context""', '.', 'Context', ')', 'suresh', 'BLR', '-', '245', ':', '/Desktop/tools/golang/src$', 'My', 'Golang', 'Code(main.go)', 'package', 'main', 'import', '(', '""fmt""', '""gopkg.in/olivere/elastic.v5""', '""strconv""', ')', 'type', 'Tweet', 'struct', '{', 'User', 'string', 'json', ':', '""user""', 'Message', 'string', 'json', ':', '""message""', '}', 'func', 'main', '()', '{', 'client', ',', 'err', ':=', 'elastic.NewClient()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(""%v"", err)', '}', 'n', ':=', '0', 'for', 'i', ':=', '0', ';', 'i', '<', '1000', ';', 'i', '++', '{', 'bulkRequest', ':=', 'client.Bulk()', 'for', 'j', ':=', '0', ';', 'j', '<', '10000', ';', 'j', '++', '{', 'n', '++', 'tweet', ':=', 'Tweet', '{', 'User', ':', '""olivere""', ',', 'Message', ':', '""Package strconv implements conversions to and from string representations of basic data types. ""', '+', 'strconv.Itoa(n)', '}', 'req', ':=', 'elastic.NewBulkIndexRequest().Index(""twitter"").Type(""tweet"").Id(strconv.Itoa(n)).Doc(tweet)', 'bulkRequest', '=', 'bulkRequest.Add(req)', '}', 'bulkResponse', ',', 'err', ':=', 'bulkRequest.Do()', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'if', 'bulkResponse', '!=', 'nil', '{', '}', 'fmt.Println(i)', '}', '}', 'Anybody,', 'help', 'me', 'to', 'understand', 'what', 'that', 'error', 'means', '&', 'how', 'to', 'solve', 'those?']"
1732,42761820,"I have 2 repositories. Let say them repo_a and repo_b. I imported repo_a in repo_b

When I ran go get, it will get repo_a master branch.
Is there any way to get develop branch using go get or another command from repo_b?

I do not want to git pull on each specific package (in this case repo_a)
","['I', 'have', '2', 'repositories.', 'Let', 'say', 'them', 'repo_a', 'and', 'repo_b.', 'I', 'imported', 'repo_a', 'in', 'repo_b', 'When', 'I', 'ran', 'go', 'get,', 'it', 'will', 'get', 'repo_a', 'master', 'branch.', 'Is', 'there', 'any', 'way', 'to', 'get', 'develop', 'branch', 'using', 'go', 'get', 'or', 'another', 'command', 'from', 'repo_b?', 'I', 'do', 'not', 'want', 'to', 'git', 'pull', 'on', 'each', 'specific', 'package', '(in', 'this', 'case', 'repo_a)']"
1733,42770022,"
","['This', 'string', 'formatting', 'works', 'just', 'fine:', 'err', ':=', 'foo', '()', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""foo returned \'%s\' when called\\n"", err)', '}', 'Is', 'there', 'any', 'merit', 'do', 'calling', 'err.Error()', 'in', 'this', 'context?', 'fmt.Printf(""foo returned \'%s"" when called\\n"", err.Error())']"
1734,42798419,"
","['I', 'heard', 'that', 'http2', 'would', 'be', 'supported', 'in', 'the', 'latest', 'Go', 'versions.', 'How', 'can', 'I', 'put', 'up', 'a', 'http2', 'server', 'without', 'using', 'go', 'lang', '.', 'org/x/net/http2', '?', 'In', 'previous', 'versions', 'you', 'could', 'do', 'something', 'like', 'this:', 'package', 'main', 'import', '(', '""log""', '""net/http""', '""os""', '""golang.org/x/net/http2""', ')', 'func', 'main', '()', '{', 'cwd', ',', 'err', ':=', 'os.Getwd()', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', 'srv', ':=', '&', 'http', '.', 'Server', '{', 'Addr', ':', '"":443""', ',', 'Handler', ':', 'http.FileServer(http.Dir(cwd))', ',', '}', 'http2.ConfigureServer(srv, &http2.Server{})', 'log.Fatal(srv.ListenAndServeTLS(""server.crt"", ""server.key""))', '}']"
1735,42841854,"

but with reflection.
","[""I'm"", 'trying', 'to', 'use', 'the', 'type', 'of', 'a', 'struct', 'as', 'a', 'general', 'parameter', 'on', 'a', 'function', 'i', 'want', 'to', 'get', 'this:', 'type', 'comments', '[]', 'struct', '{', 'ID', 'string', 'json', ':', '""id""', 'Author', 'string', 'json', ':', '""author""', 'Text', 'string', 'json', ':', '""text""', '}', 'handleReadAll', '(', '""/getsome""', ')', 'func', 'handleReadAll', '(', 'getPath', 'string', '){', 'var', 'someVar', 'comments', '}', 'So', 'as', 'you', 'can', 'see', 'i', 'have', 'that', 'someVar', 'as', 'type', 'comments,', 'I', 'need', 'to', 'make', 'a', 'generic', 'use', 'of', 'that', 'type', 'so', 'I', 'can', 'use', 'the', 'handleReadAll', 'with', 'generic', 'type', 'structs', 'this', 'is', 'what', 'I', 'hvae', 'tried', 'so', 'far:', 'handleReadAll', '(', '""/getsome""', ',', 'comments', '{})', 'func', 'handleReadAll', '(', 'getPath', 'string', ',', 'struct', 'ToDecodeArray', 'interface', '{}){', 'var', 'object2', 'reflect.ValueOf(&structToDecodeArray)', 'var', 'object', '=', 'reflect.ValueOf(&structToDecodeArray)', 'fmt.Println(""var"",object)', 'fmt.Println(""var"",reflect.ValueOf(&structToDecodeArray).Interface())', 'fmt.Println(""var"",reflect.TypeOf(&structToDecodeArray))', 'fmt.Println(""var"",reflect.ValueOf(&structToDecodeArray).Type().Elem)', '}', 'I', 'cannot', 'make', 'this', 'work,', 'I', 'am', 'using', 'reflection', 'to', 'try', 'to', 'get', 'the', 'type', 'of', 'the', 'parameter', 'structToDecodeArray,', 'How', 'could', 'I', 'get', 'the', 'same', 'var', 'as.', 'var', 'someVar', 'comments', 'but', 'with', 'reflection.']"
1736,42881328,"

You can find it on Go Playground here. 

I understand that you can assign a method to a function type, but I do not understand how Error() is being called. 
","['I', 'have', 'been', 'reading', 'about', 'function', 'types', 'as', 'interface', 'values', 'in', 'go', 'and', 'I', 'came', 'across', 'an', 'example', 'that', 'I', 'have', 'not', 'been', 'able', 'to', 'figure', 'out.', 'Here', 'it', 'is:', 'type', 'binFunc', 'func', '(', 'int', ',', 'int', ')', 'int', 'func', 'add', '(', 'x', ',', 'y', 'int', ')', 'int', '{', 'return', 'x', '+', 'y', '}', 'func', '(', 'f', 'binFunc', ')', 'Error', '()', 'string', '{', 'return', '""binFunc error""', '}', 'func', 'main', '()', '{', 'var', 'err', 'error', 'err', '=', 'binFunc', '(', 'add', ')', 'fmt.Println(err)', '}', 'You', 'can', 'find', 'it', 'on', 'Go', 'Playground', 'here.', 'I', 'understand', 'that', 'you', 'can', 'assign', 'a', 'method', 'to', 'a', 'function', 'type,', 'but', 'I', 'do', 'not', 'understand', 'how', 'Error()', 'is', 'being', 'called.']"
1737,43039501,"

Any idea what's wrong?

Source Code
","['I', 'have', 'a', 'problem', 'trying', 'to', 'connect', 'to', 'redis', 'using', 'redis-golang', 'driver.', 'this', 'is', 'my', 'docker-compose.yml', 'file', ':', 'version', ':', '""3""', 'services', ':', 'driver', ':', 'build', ':', './', 'API', '-', 'Golang', 'command', ':', 'go', 'run', 'app', '.', 'go', 'volumes', ':', '-', './', 'API', '-', 'Golang', ':/', 'app', 'ports', ':', '-', '""8080:8080""', 'depends_on', ':', '-', 'db', '-', 'redis', 'links', ':', '-', 'redis', '-', 'db', 'redis', ':', 'image', ':', 'redis', 'container_name', ':', 'redis', 'ports', ':', '[', '""6379:6379""', ']', 'db', ':', 'image', ':', 'mongo', ':', '3', '.', '4', '.', '2', 'container_name', ':', 'mongodb', 'ports', ':', '[', '""27017:27017""', ']', 'and', 'this', 'the', 'code', 'where', 'I', 'try', 'to', 'connect', 'to', 'redis', '(API-Golang/database/allSystem.go):', 'redisConn', ':=', 'RedisHost', '{', 'Address', ':', '""localhost:6379""', ',', 'Password', ':', '""""', ',', 'DB', ':', '0', ',', '}', 'redisConnection', ',', 'err', ':=', 'redisConn.Connect()', 'if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'I', 'have', 'tried', 'to', 'change', 'localhost', 'to', 'redis', 'for', 'the', 'host', 'but', 'still', 'it', ""doesn't"", 'work.', 'Here', 'is', 'the', 'error', ':', 'driver_1', '|', 'panic', ':', 'dial', 'tcp', '[::', '1', ']:', '6379', ':', 'getsockopt', ':', 'connection', 'refused', 'driver_1', '|', 'driver_1', '|', 'go', 'routine', '1', '[', 'running', ']:', 'driver_1', '|', 'github', '.', 'com/Gujarats/API-Golang/database.SystemConnection(0x48)', 'driver_1', '|', '/go/src/github.com/Gujarats/API-Golang/database/allSystem.go:32', '+', '0x3d3', 'driver_1', '|', 'main.main()', 'driver_1', '|', '/go/src/github.com/Gujarats/API-Golang/app.go:24', '+', '0x34', 'driver_1', '|', 'exit', 'status', '2', 'Any', 'idea', ""what's"", 'wrong?', 'Source', 'Code']"
1738,43086360,"vim cannot fold test.cpp, vim prompts E490 no fold found, but rename this file to test.c or test.cc, vim can use zc to fold this same code.

I have set configure in .vimrc 
foldmethod=syntax set foldlevel=0 set foldnestmax=2 VIMRUNTIME=/usr/share/vim/vim80

in /usr/share/vim/vim80/ftplugin, there exits a cpp.vim file.
why vim cannot fold *.cpp and *.go
","['vim', 'cannot', 'fold', 'test.cpp,', 'vim', 'prompts', 'E490', 'no', 'fold', 'found,', 'but', 'rename', 'this', 'file', 'to', 'test.c', 'or', 'test.cc,', 'vim', 'can', 'use', 'zc', 'to', 'fold', 'this', 'same', 'code.', 'I', 'have', 'set', 'configure', 'in', '.vimrc', 'foldmethod=syntax', 'set', 'foldlevel=0', 'set', 'foldnestmax=2', 'VIMRUNTIME=/usr/share/vim/vim80', 'in', '/usr/share/vim/vim80/ftplugin,', 'there', 'exits', 'a', 'cpp.vim', 'file.', 'why', 'vim', 'cannot', 'fold', '*.cpp', 'and', '*.go']"
1739,43284894,"

and passing in a Status struct to Row.ScanStruct() and I get back either a ""Missing destination Name Source"" error or if I name the source member in Status, I get ""sql: Scan error on column index 0: unsupported Scan, storing driver.Value type []uint8 into type *v1.Source"".  Full disclosure, the sphinx schema has a few other columns as peers with StatusByCampaign, they come after it and I don't care about them in my use case. 

This seems like something that has to have been come across before, but I can't seem to find a solution outside of writing my own parser, which I am loath to do. 
","['I', 'am', 'trying', 'to', 'convert', 'a', 'sphinx', 'query', 'via', 'MySQL', 'into', 'a', 'golang', 'struct', 'and', 'am', 'having', 'a', 'hard', 'time.', 'It', 'seems', 'like', 'this', 'should', 'be', 'a', 'common', 'sort', 'of', 'problem,', 'but', 'so', 'far', ""I'm"", 'stuck', 'converting', 'it', 'to', 'a', 'map', 'or', 'parsing', 'output', 'myself.', 'Specifically,', 'I', 'have', 'a', 'schema', 'in', 'sphinx', 'that', 'looks', 'like', '{Source:', '{ID:string,', 'subId:string,', 'Campaigns:[]{CampaignID:string,', 'Status:string}}}', ""I've"", 'tried', 'using', 'the', 'simple', 'rows.scan', 'but', 'that', ""doesn't"", 'help', 'me', 'parse', 'the', 'repeating', 'field,', 'I', 'just', 'get', 'it', 'as', 'an', 'unparsed', 'string.', 'In', 'sphinx,', 'the', ""key's"", ""aren't"", 'in', 'quotation', 'marks,', 'so', 'JSON.unmarshal', ""doesn't"", 'seem', 'to', 'help', 'at', 'all.', 'And', 'using', 'sqlx,', ""I've"", 'tried', 'to', 'build', 'up', 'the', 'following', 'struct', 'type', 'CampaignStatus', 'struct', '{', 'CampaignId', 'string', 'Status', 'string', '}', 'type', 'Source', 'struct', '{', 'Id', 'string', 'SubId', 'string', 'StatusByCampaign', '[]', 'CampaignStatus', '}', 'type', 'Status', 'struct', '{', 'Source', '}', 'and', 'passing', 'in', 'a', 'Status', 'struct', 'to', 'Row.ScanStruct()', 'and', 'I', 'get', 'back', 'either', 'a', '""Missing', 'destination', 'Name', 'Source""', 'error', 'or', 'if', 'I', 'name', 'the', 'source', 'member', 'in', 'Status,', 'I', 'get', '""sql:', 'Scan', 'error', 'on', 'column', 'index', '0:', 'unsupported', 'Scan,', 'storing', 'driver.Value', 'type', '[]uint8', 'into', 'type', '*v1.Source"".', 'Full', 'disclosure,', 'the', 'sphinx', 'schema', 'has', 'a', 'few', 'other', 'columns', 'as', 'peers', 'with', 'StatusByCampaign,', 'they', 'come', 'after', 'it', 'and', 'I', ""don't"", 'care', 'about', 'them', 'in', 'my', 'use', 'case.', 'This', 'seems', 'like', 'something', 'that', 'has', 'to', 'have', 'been', 'come', 'across', 'before,', 'but', 'I', ""can't"", 'seem', 'to', 'find', 'a', 'solution', 'outside', 'of', 'writing', 'my', 'own', 'parser,', 'which', 'I', 'am', 'loath', 'to', 'do.']"
1740,43408646,"I am trying to write a unit test code form following code which has 3 level of function calling as below:

The main function calls function A() and then function A calls function B() and C() depending upon some condition and function B calls function E() and F(), whereas function C calls function G() and H() on some condition.
The above like the code I have developed, Here I want to mock function E() and F() for function B, and G() and H() for function C. Please suggest me how to do it using interface.
","['I', 'am', 'trying', 'to', 'write', 'a', 'unit', 'test', 'code', 'form', 'following', 'code', 'which', 'has', '3', 'level', 'of', 'function', 'calling', 'as', 'below:', 'The', 'main', 'function', 'calls', 'function', 'A()', 'and', 'then', 'function', 'A', 'calls', 'function', 'B()', 'and', 'C()', 'depending', 'upon', 'some', 'condition', 'and', 'function', 'B', 'calls', 'function', 'E()', 'and', 'F(),', 'whereas', 'function', 'C', 'calls', 'function', 'G()', 'and', 'H()', 'on', 'some', 'condition.', 'The', 'above', 'like', 'the', 'code', 'I', 'have', 'developed,', 'Here', 'I', 'want', 'to', 'mock', 'function', 'E()', 'and', 'F()', 'for', 'function', 'B,', 'and', 'G()', 'and', 'H()', 'for', 'function', 'C.', 'Please', 'suggest', 'me', 'how', 'to', 'do', 'it', 'using', 'interface.']"
1741,43424787,"
","['I', 'wrote', 'a', 'simple', 'web', 'server', 'to', 'listen', 'on', 'port', '8080.', 'But', 'I', ""don't"", 'want', 'to', 'use', 'a', 'hard', 'coded', 'port', 'number.', 'What', 'I', 'want', 'is', 'that', 'my', 'server', 'listen', 'on', 'any', 'available', 'port.', 'And', 'I', 'want', 'to', 'know', 'that', 'on', 'what', 'port', 'number', 'my', 'web', 'server', 'is', 'listening.', 'My', 'code', 'is', 'given', 'bellow:', 'package', 'main', 'import', '(', '""net/http""', ')', 'func', 'main', '()', '{', 'http.HandleFunc(""/"", handler)', 'http.ListenAndServe("":8080"", nil)', '}']"
1742,43425594,"

Am I missing something do I have to server css/js through server? or should the simple html work
","['In', 'my', 'html', ""I'm"", 'trying', 'to', 'include', 'JS', 'using', 'I', 'have', 'also', 'tried', 'relative', 'path', '(from', 'server', 'location)', 'and', 'relative', 'from', 'the', 'html', 'file', 'My', 'file', 'structure', '-', 'js', 'app', '.', 'js', '-', 'templates', 'index', '.', 'html', 'hub', '.', 'go', 'main', '.', 'go', 'main.go', 'is', 'the', 'server', 'func', 'main', '()', '{', 'http.HandleFunc(""/"", rootHandler)', 'http.ListenAndServe("":8080"", nil)', '}', 'func', 'rootHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'http.ServeFile(w, r, ""Templates/index.html"")', '}', 'Am', 'I', 'missing', 'something', 'do', 'I', 'have', 'to', 'server', 'css/js', 'through', 'server?', 'or', 'should', 'the', 'simple', 'html', 'work']"
1743,43430410,"
What does ""rune"" mean?
https://golang.org/pkg/unicode/utf8/#example_Valid Why is the answer is true in the first line?
The function Valid accepts only an array?

","['What', 'does', '""rune""', 'mean?', 'https://golang.org/pkg/unicode/utf8/#example_Valid', 'Why', 'is', 'the', 'answer', 'is', 'true', 'in', 'the', 'first', 'line?', 'The', 'function', 'Valid', 'accepts', 'only', 'an', 'array?']"
1744,43437729,"
","[""I'm"", 'writing', 'a', 'simple', 'program', 'that', 'takes', 'in', 'input', 'from', 'a', 'form,', 'populates', 'an', 'instance', 'of', 'a', 'struct', 'with', 'the', 'received', 'data', 'and', 'the', 'writes', 'this', 'received', 'data', 'to', 'a', 'file.', ""I'm"", 'a', 'bit', 'stuck', 'at', 'the', 'moment', 'with', 'figuring', 'out', 'the', 'best', 'way', 'to', 'iterate', 'over', 'the', 'populated', 'struct', 'and', 'write', 'its', 'contents', 'to', 'the', 'file.', 'The', 'struct', 'in', 'question', 'contains', '3', 'different', 'types', 'of', 'fields', '(ints,', 'strings,', '[]strings).', 'I', 'can', 'iterate', 'over', 'them', 'but', 'I', 'am', 'unable', 'to', 'get', 'their', 'actual', 'type.', 'Inspecting', 'my', 'posted', 'code', 'below', 'with', 'print', 'statements', 'reveals', 'that', 'each', 'of', 'their', 'types', 'is', 'coming', 'back', 'as', 'structs', 'rather', 'than', 'the', 'aforementioned', 'string,', 'int', 'etc.', 'The', 'desired', 'output', 'format', 'is', 'be', 'plain', 'text.', 'For', 'example:', 'field_1', '=', '""value_1""', 'field_2', '=', '10', 'field_3', '=[', '""a""', ',', '""b""', ',', '""c""', ']', 'Anyone', 'have', 'any', 'ideas?', 'Perhaps', ""I'm"", 'going', 'about', 'this', 'the', 'wrong', 'way', 'entirely?', 'func', '(', 'c', '*', 'Config', ')', 'writeConfigToFile', '(', 'file', '*', 'os', '.', 'File', ')', '{', 'listVal', ':=', 'reflect.ValueOf(c)', 'element', ':=', 'listVal.Elem()', 'for', 'i', ':=', '0', ';', 'i', '<', 'element.NumField()', ';', 'i', '++', '{', 'field', ':=', 'element.Field(i)', 'myType', ':=', 'reflect.TypeOf(field)', 'if', 'myType.Kind()', '==', 'reflect', '.', 'Int', '{', 'file.Write(field.Bytes())', '}', 'else', '{', 'file.WriteString(field.String())', '}', '}', '}']"
1745,43458792,"

I have tested and ran the application with no problems, however I have been told it has a potential race condition and I am not sure why. Is this true? 
","['I', 'have', 'a', 'very', 'basic', 'Golang', 'application', 'that', 'creates', 'and', 'runs', 'a', 'HTTP', 'server.', 'The', 'server', 'has', '2', 'endpoints,', 'one', 'to', 'send', 'data', 'and', 'one', 'to', 'receive.', 'Upon', 'each', 'POST', 'request', 'to', 'the', 'server,', 'parse', 'the', 'incoming', 'data', 'from', 'the', 'body', 'and', 'push', 'it', 'onto', 'a', 'channel.', 'I', 'then', 'have', 'a', 'function', 'that', 'reads', 'from', 'the', 'channel', 'and', 'saves', 'the', 'data', 'to', 'a', 'map.', 'Upon', 'each', 'GET', 'request', 'to', 'the', 'server,', 'JSON', 'marshal', 'the', 'map', 'and', 'send', 'it', 'to', 'the', 'client.', 'Each', 'request', 'to', 'the', 'HTTP', 'server', 'runs', 'asynchronously', 'and', 'the', 'worker', 'function', 'writes', 'to', 'the', 'map', 'synchronously', 'in', 'its', 'own', 'goroutine.', 'Basic', 'pseudo', 'code', 'is', 'as', 'follows:', 'package', 'main', 'import', '(', '""net/http""', ')', 'type', 'dataStore', 'map', '[', 'string', ']', 'string', 'func', 'listenHandler', '(', 'stream', 'chan', 'string', ')', 'http', '.', 'HandlerFunc', '{', 'return', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', '//', 'JSON', 'unmarshal', 'request', 'body', '//', 'push', 'data', 'onto', 'stream', 'stream', '<-', 'data', '}', '}', 'func', 'serveHandler', '(', 'store', '*', 'dataStore', ')', 'http', '.', 'HandlerFunc', '{', 'return', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', '//', 'JSON', 'marshal', 'data', 'store', '//', 'serve', 'to', 'client', '}', '}', 'func', 'worker', '(', 'stream', '<-', 'chan', 'string', ')', '*', 'dataStore', '{', 'store', ':=', 'make', '(', 'dataStore', ')', 'go', 'func', '()', '{', 'for', 'data', ':=', 'range', 'stream', '{', '//', 'process', 'and', 'write', 'data', 'to', 'map', '}', '}()', 'return', '&', 'store', '}', 'func', 'main', '()', '{', 'stream', ':=', 'make', '(', 'chan', 'string', ')', 'store', ':=', 'worker', '(', 'stream', ')', 'http.HandleFunc(""/listen"", listenHandler(stream))', 'http.HandleFunc(""/serve"", serveHandler(store))', 'http.ListenAndServe("":8080"", nil)', '}', 'I', 'have', 'tested', 'and', 'ran', 'the', 'application', 'with', 'no', 'problems,', 'however', 'I', 'have', 'been', 'told', 'it', 'has', 'a', 'potential', 'race', 'condition', 'and', 'I', 'am', 'not', 'sure', 'why.', 'Is', 'this', 'true?']"
1746,43459290,"I have a package I installed via go get github.com//. It was missing some features, so I have been working with the original author to add them to the package.

I made the changes to my local copy and committed them. Then I realized: derp, I don't have authorization to git push these changes.

Is there a way for me to salvage my changes and somehow submit a pull request to him? Or do I have to lose all my changes, fork his repository, re-implement my changes, and then submit a pull request?

And no matter what I do, is there a way for me to retain the ability to do this command?

go get -u 


Or do I have to just become a full-time contributor and continually update my fork with his repository?
","['I', 'have', 'tested', 'and', 'ran', 'the', 'application', 'with', 'no', 'problems,', 'however', 'I', 'have', 'been', 'told', 'it', 'has', 'a', 'potential', 'race', 'condition', 'and', 'I', 'am', 'not', 'sure', 'why.', 'Is', 'this', 'true?']"
1747,43485414,"I'm trying to get the temp folder of windows, other than a fixed path C:\Windows\Temp, I'd like to use some API similar to GetSpecialFolder in VBScript.

Is there anything like that?
","['I', 'have', 'tested', 'and', 'ran', 'the', 'application', 'with', 'no', 'problems,', 'however', 'I', 'have', 'been', 'told', 'it', 'has', 'a', 'potential', 'race', 'condition', 'and', 'I', 'am', 'not', 'sure', 'why.', 'Is', 'this', 'true?']"
1748,43549116,"
","['I', 'am', 'fairly', 'new', 'to', 'golang', 'and', 'am', 'finding', 'myself', 'frustrated', 'with', 'a', 'simple', 'file', 'service', 'program.', 'I', 'am', 'suspecting', 'that', 'there', 'is', 'something', 'wrong', 'with', 'my', 'file', 'prefix/', 'directory', 'in', 'the', 'handler', 'for', 'my', 'router', 'r.', 'I', 'have', 'tried', 'many', 'different', 'formats', 'for', 'the', 'directory.', 'the', 'html', 'file', 'i', 'would', 'like', 'serviced', 'is', '$HOME/Documents/TEST/Login', 'on', 'my', 'system.', 'Below', 'is', 'my', 'code,', 'note', 'the', '{address}', 'replaces', 'the', 'ip', 'address.', 'package', 'main', 'import', '(', '""log""', '""github.com/gorilla/mux""', '""net/http""', '""time""', ')', 'func', 'main', '()', '{', 'r', ':=', 'mux.NewRouter()', 'r.PathPrefix(""/Login/"")', '.', 'Handler', '(', 'http', '.', 'StripPrefix', '(', '""/Login/""', ',', 'http.FileServer(http.Dir(""$HOME/Documents/TEST/Login""))))', 'srv', ':=', '&', 'http', '.', 'Server', '{', 'Handler', ':', 'r', ',', 'Addr', ':', '""{address}:9999""', ',', 'WriteTimeout', ':', '600', '*', 'time', '.', 'Second', ',', 'ReadTimeout', ':', '600', '*', 'time', '.', 'Second', ',', '}', 'log.Fatal(srv.ListenAndServe())', '}']"
1749,43601858,"

How can I fix the second program?
","['The', 'following', 'program', 'runs', 'fine.', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'Person', 'interface', '{', 'Hello', '()', '}', 'type', 'Joker', 'struct', '{', 'Name', 'string', '}', 'func', '(', 'j', 'Joker', ')', 'Hello', '()', '{', 'fmt.Println(j.Name, ""says, \\""Hello!\\"""")', '}', 'func', 'main', '()', '{', 'var', 'j', 'Joker', '=', 'Joker', '{', '""Peter""', '}', 'invokeHello', '(', 'j', ')', '}', 'func', 'invokeHello', '(', 'p', 'Person', ')', '{', 'p.Hello()', '}', 'Here', 'is', 'the', 'output.', '$', 'go', 'run', 'foo', '.', 'go', 'Peter', 'says', ',', '""Hello!""', 'But', 'when', 'I', 'change', 'the', 'Hello', 'method', 'to', 'receive', 'a', 'pointer,', 'I', 'get', 'errors.', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'Person', 'interface', '{', 'Hello', '()', '}', 'type', 'Joker', 'struct', '{', 'Name', 'string', '}', 'func', '(', 'j', '*', 'Joker', ')', 'Hello', '()', '{', 'fmt.Println(j.Name, ""says, \\""Hello!\\"""")', '}', 'func', 'main', '()', '{', 'var', 'j', '*', 'Joker', '=', '&', 'Joker', '{', '""Peter""', '}', 'invokeHello', '(', 'j', ')', '}', 'func', 'invokeHello', '(', 'p', '*', 'Person', ')', '{', 'p.Hello()', '}', 'Here', 'are', 'the', 'errors.', '$', 'go', 'run', 'bar', '.', 'go', 'command', '-', 'line', '-', 'arguments', './', 'bar', '.', 'go', ':', '21', ':', 'cannot', 'use', 'j', '(', 'type', '*', 'Joker', ')', 'as', 'type', '*', 'Person', 'in', 'argument', 'to', 'invokeHello', ':', '*', 'Person', 'is', 'pointer', 'to', 'interface', ',', 'not', 'interface', './', 'bar', '.', 'go', ':', '25', ':', 'p', '.', 'Hello', 'undefined', '(', 'type', '*', 'Person', 'has', 'no', 'field', 'or', 'method', 'Hello', ')', 'How', 'can', 'I', 'fix', 'the', 'second', 'program?']"
1750,43607857,"

If I cast the types to an DocumentItem interface, I will lose access to specific functions, which in the case of one type may differ from the other. For example, add text to a paragraph and add a row of cells and then add text to cell for the table.

Is it possible at all?

Full example at https://play.golang.org/p/uJfKs5tJ98
","[""I'm"", 'writing', 'a', 'document', 'generator.', 'There', 'is', 'a', 'DocumentItem', 'interface', '-', 'this', 'is', 'part', 'of', 'the', 'document.', 'type', 'DocumentItem', 'interface', '{', 'compose', '()', 'string', '}', 'For', 'example,', 'a', 'document', 'consists', 'of', 'paragraphs', 'and', 'tables.', 'type', 'Paragraph', 'struct', '{', 'text', 'string', '}', 'type', 'Table', 'struct', '{}', 'The', 'Paragraph', 'and', 'Table', 'types', 'correspond', 'to', 'the', 'DocumentItem', 'interface.', 'func', '(', 'p', '*', 'Paragraph', ')', 'compose', '()', 'string', '{', 'return', '""""', '}', 'func', '(', 't', '*', 'Table', ')', 'compose', '()', 'string', '{', 'return', '""""', '}', 'The', 'Document', 'type', 'contains', 'the', 'content', '[]*', 'DocumentItem', 'field.', 'type', 'Document', 'struct', '{', 'content', '[]*', 'DocumentItem', '}', ""I'm"", 'looking', 'for', 'a', 'way', 'that', 'would', 'allow', 'NewParagraph()', 'and', 'NewTable()', 'functions', 'to', 'create', 'the', 'necessary', 'data', 'types', 'and', 'add', 'them', 'to', 'the', 'content', 'field.', 'func', '(', 'd', '*', 'Document', ')', 'NewParagraph', '()', '*', 'Paragraph', '{', 'p', ':=', 'Paragraph', '{}', 'd', '.', 'content', '=', 'append', '(', 'd', '.', 'content', ',', '&', 'p', ')', 'return', '&', 'p', '}', 'func', '(', 'd', '*', 'Document', ')', 'NewTable', '()', '*', 'Table', '{', 't', ':=', 'Table', '{}', 'd', '.', 'content', '=', 'append', '(', 'd', '.', 'content', ',', '&', 't', ')', 'return', '&', 't', '}', 'I', 'use', 'an', 'slice', 'of', 'interface', 'pointers', 'in', 'order', 'to', 'be', 'able', 'to', 'modify', 'the', 'data', 'in', 'the', 'corresponding', 'variables', 'after', 'they', 'are', 'included', 'in', 'the', 'document.', 'func', '(', 'p', '*', 'Paragraph', ')', 'SetText', '(', 'text', 'string', ')', '{', 'p', '.', 'text', '=', 'text', '}', 'func', 'main', '()', '{', 'd', ':=', 'Document', '{}', 'p', ':=', 'd.NewParagraph()', 'p.SetText(""lalala"")', 't', ':=', 'd.NewTable()', '//', '...', '}', 'But', 'I', 'get', 'compiler', 'errors:', 'cannot', 'use', '&', 'p', '(', 'type', '*', 'Paragraph', ')', 'as', 'type', '*', 'DocumentItem', 'in', 'append', 'cannot', 'use', '&', 't', '(', 'type', '*', 'Table', ')', 'as', 'type', '*', 'DocumentItem', 'in', 'append', 'If', 'I', 'cast', 'the', 'types', 'to', 'an', 'DocumentItem', 'interface,', 'I', 'will', 'lose', 'access', 'to', 'specific', 'functions,', 'which', 'in', 'the', 'case', 'of', 'one', 'type', 'may', 'differ', 'from', 'the', 'other.', 'For', 'example,', 'add', 'text', 'to', 'a', 'paragraph', 'and', 'add', 'a', 'row', 'of', 'cells', 'and', 'then', 'add', 'text', 'to', 'cell', 'for', 'the', 'table.', 'Is', 'it', 'possible', 'at', 'all?', 'Full', 'example', 'at', 'https://play.golang.org/p/uJfKs5tJ98']"
1751,43677530,"

My program program output:

{  }


How do I retrieve en.translatedName?

In the same program I get other nested bson from mongo and it's working with same way. I don't understand my mistake.
","['I', 'need', 'to', 'retrieve', 'a', 'nested', 'document', 'in', 'mongoDB', 'with', 'mgo.', 'Here', 'is', 'my', 'document', 'in', 'db:', '{', '""_id""', ':', '""packing_type_0000""', ',', '""name""', ':', '""packing""', ',', '""category""', ':', '""logistics""', ',', '""en""', ':', '{', '""translatedName""', ':', '""Packing and Order Prep""', ',', '},', '}', 'This', 'is', 'my', 'golang', 'structure:', 'type', 'jobTypeWording', 'struct', '{', 'translatedName', 'string', 'json', ':', '""translatedName""', 'bson', ':', '""translatedName""', '}', 'type', 'jobType', 'struct', '{', 'ID', 'string', 'json', ':', '""_id""', 'bson', ':', '""_id""', 'Name', 'string', 'json', ':', '""name""', 'bson', ':', '""name""', 'Category', 'string', 'json', ':', '""category""', 'bson', ':', '""category""', 'en', 'jobTypeWording', 'json', ':', '""en""', 'bson', ':', '""en""', '}', 'And', 'my', 'code:', 'result', ':=', 'jobType', '{}', 'sessionCopy', ':=', 'session.Copy()', 'defer', 'sessionCopy.Close()', 'c', ':=', 'sessionCopy.DB(os.Getenv(""DB_DATABASE"")).C(""jobTypes"")', 'err', ':=', 'c.Find(bson.M{""_id"": Id}).One(&result)', 'fmt.Println(result.en)', 'My', 'program', 'program', 'output:', '{', '}', 'How', 'do', 'I', 'retrieve', 'en.translatedName?', 'In', 'the', 'same', 'program', 'I', 'get', 'other', 'nested', 'bson', 'from', 'mongo', 'and', ""it's"", 'working', 'with', 'same', 'way.', 'I', ""don't"", 'understand', 'my', 'mistake.']"
1752,43695832,"

It works nicely.

I'm still pretty new to Go and haven't found any cleaner solution to that even after several researches and reads.

Is my approach correct or are there any better ones?
","[""I'm"", 'trying', 'to', 'get', 'my', 'hands', 'dirty', 'while', 'playing', 'with', 'some', 'Gorilla/Mux', 'and', 'Go-Redis', 'but', ""I'm"", 'facing', 'a', 'little', 'implementation', 'problem', 'here.', 'Essentially', 'I', 'have', 'a', 'project', 'structured', 'like', 'the', 'following:', 'Where', 'redismanager.go', 'handles', 'the', 'initialization', 'of', 'a', 'Redis', 'Client:', 'package', 'redismanager', 'import', '(', '""fmt""', '""github.com/go-redis/redis""', ')', 'func', 'InitRedisClient', '()', 'redis', '.', 'Client', '{', 'client', ':=', 'redis', '.', 'NewClient', '(&', 'redis', '.', 'Options', '{', 'Addr', ':', '""localhost:6379""', ',', 'Password', ':', '""""', ',', 'DB', ':', '0', ',', '//default', '})', 'pong', ',', 'err', ':=', 'client.Ping().Result()', 'if', '(', 'err', '!=', 'nil', '){', 'fmt.Println(""Cannot Initialize Redis Client "", err)', '}', 'fmt.Println(""Redis Client Successfully Initialized . . ."", pong)', 'return', '*', 'client', '}', 'Where', 'main.go', 'calls', 'redismanager', '.', 'InitRedisClient', 'and', 'initializes', 'mux.Handlers:', 'package', 'main', 'import', '(', '""github.com/gorilla/mux""', '""github.com/go-redis/redis""', '""net/http""', '""fmt""', '""log""', '""encoding/json""', '""io/ioutil""', '""../redismanager""', '""../api""', ')', 'type', 'RedisInstance', 'struct', '{', 'RInstance', '*', 'redis', '.', 'Client', '}', 'func', 'main', '()', '{', '//', 'Initialize', 'Redis', 'Client', 'client', ':=', 'redismanager.InitRedisClient()', '//', 'Get', 'current', 'redis', 'instance', 'to', 'get', 'passed', 'to', 'different', 'Gorilla-Mux', 'Handlers', 'redisHandler', ':=', '&', 'RedisInstance', '{', 'RInstance', ':&', 'client', '}', '//', 'Initialize', 'Router', 'Handlers', 'r', ':=', 'mux.NewRouter()', 'r.HandleFunc(""/todo"", redisHandler.AddTodoHandler)', '.', 'Methods', '(', '""POST""', ')', 'fmt.Println(""Listening on port :8000 . . ."")', '//', 'Bind', 'to', 'a', 'port', 'and', 'pass', 'our', 'router', 'in', 'log.Fatal(http.ListenAndServe("":8000"", r))', '}', 'Now,', 'I', 'can', 'easily', 'define', 'and', 'let', 'work', 'properly', 'AddTodoHandler', 'in', 'the', 'same', 'file', 'like:', 'func', '(', 'c', '*', 'RedisInstance', ')', 'AddTodoHandler', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', '.', '.', '.', 'doSomething', '}', 'But,', 'to', 'make', 'things', 'a', 'bit', 'more', 'modular,', ""I'm"", 'trying', 'to', 'move', 'all', 'of', 'these', 'RouteHandlers', 'inside', 'their', 'respective', 'files', 'in', 'api', 'package.', 'In', 'order', 'to', 'make', 'that,', 'I', 'need', 'to', 'pass', 'a', 'reference', 'to', 'redisHandler', 'but', ""I'm"", 'having', 'some', 'difficulties', 'when', 'trying', 'to', 'make', 'that', 'with', 'an', 'Handler', 'inside', 'api', 'package.', 'For', 'instance,', 'If', 'in', 'the', 'main', 'I', 'add:', 'r.HandleFunc(""/todo/{id}"", api.GetTodoHandler(&client))', '.', 'Methods', '(', '""GET""', ')', 'with', 'gettodo.go', 'package', 'api', 'import', '(', '""net/http""', '""github.com/gorilla/mux""', '""fmt""', '""encoding/json""', '""github.com/go-redis/redis""', ')', 'func', 'GetTodoHandler', '(', 'c', '*', 'RedisInstance', ')', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'func', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', '.', '.', '.', 'doSomething', '}', '}', 'It', 'works', 'nicely.', ""I'm"", 'still', 'pretty', 'new', 'to', 'Go', 'and', ""haven't"", 'found', 'any', 'cleaner', 'solution', 'to', 'that', 'even', 'after', 'several', 'researches', 'and', 'reads.', 'Is', 'my', 'approach', 'correct', 'or', 'are', 'there', 'any', 'better', 'ones?']"
1753,43852529,"

So, an array's length is inmutable and set when the array is declared. But then you can store strings of any size in it.

Why can you do this?
","['Following', 'the', 'tour', 'of', 'GO,', 'I', 'encountered', 'the', 'following', 'code:', 'var', 'a', '[', '2', ']', 'string', 'a', '[', '0', ']', '=', '""Hello""', 'a', '[', '1', ']', '=', '""World""', 'So,', 'an', ""array's"", 'length', 'is', 'inmutable', 'and', 'set', 'when', 'the', 'array', 'is', 'declared.', 'But', 'then', 'you', 'can', 'store', 'strings', 'of', 'any', 'size', 'in', 'it.', 'Why', 'can', 'you', 'do', 'this?']"
1754,43854117,"

My problem is that for bool or int option types, I can't tell whether or not a field value was set in the Options struct. For example, was BoolOption set to false or just not initialized?

One possible solution would be to use strings for all of my Options fields. For instance, BoolOption would be ""false"" rather than false. I could then check the length of the string to check if it was initialized.

Are there better solutions?
","['I', 'have', 'a', 'service,', 'written', 'in', 'golang,', 'that', 'can', 'be', 'initialized', 'with', 'some', 'options.', 'Options', 'are', 'passed', 'as', 'a', 'struct', 'to', 'a', 'constructor', 'function.', 'The', 'constructor', 'function', 'uses', 'default', 'values', 'for', 'option', 'fields', 'that', ""weren't"", 'included.', ""Here's"", 'an', 'example:', 'type', 'Service', 'struct', '{', 'options', 'Options', '}', 'type', 'Options', 'struct', '{', 'BoolOption', 'bool', 'StringOption', 'string', '}', 'const', '(', 'DefaultBoolOption', '=', 'true', 'DefaultStringOption', '=', '""bar""', ')', 'func', 'New', '(', 'opts', 'Options', ')', '*', 'Service', '{', 'if', '!', 'opts', '.', 'BoolOption', '{', 'opts', '.', 'BoolOption', '=', 'DefaultBoolOption', '}', 'if', 'len', '(', 'opts', '.', 'StringOption', ')', '<', '1', '{', 'opts', '.', 'StringOption', '=', 'DefaultStringOption', '}', 'return', '&', 'Service', '{', 'options', ':', 'opts', ',}', '}', '...', '//', 'elsewhere', 'in', 'my', 'code', 'o', ':=', 'Options', '{', 'BoolOption', ':', 'false', ',}', '//', 'sets', 's.options.BoolOption', 'to', 'true!!!', 's', ':=', 'New', '(', 'o', ')', 'My', 'problem', 'is', 'that', 'for', 'bool', 'or', 'int', 'option', 'types,', 'I', ""can't"", 'tell', 'whether', 'or', 'not', 'a', 'field', 'value', 'was', 'set', 'in', 'the', 'Options', 'struct.', 'For', 'example,', 'was', 'BoolOption', 'set', 'to', 'false', 'or', 'just', 'not', 'initialized?', 'One', 'possible', 'solution', 'would', 'be', 'to', 'use', 'strings', 'for', 'all', 'of', 'my', 'Options', 'fields.', 'For', 'instance,', 'BoolOption', 'would', 'be', '""false""', 'rather', 'than', 'false.', 'I', 'could', 'then', 'check', 'the', 'length', 'of', 'the', 'string', 'to', 'check', 'if', 'it', 'was', 'initialized.', 'Are', 'there', 'better', 'solutions?']"
1755,43936400,"

I would be grateful for any help. Thanks.
","['I', 'have', 'a', 'JSON:', '{', '""data""', ':', '[', '{', '""id""', ':', '1', ',', '""values""', ':', '[', '[', '{', '""id""', ':', '""11""', ',', '""keys""', ':', '[', '{', '""id""', ':', '""111""', '}', ']', '}', ']', ']', '}', ']', '}', 'I', 'want', 'to', 'parse', '""values""', 'and', '""keys""', 'into', 'structs,', 'but', 'I', ""don't"", 'known', 'what', 'type', 'should', 'i', 'use', 'in', '""Data""?:', 'type', 'Value', 'struct', '{', 'Id', 'string', 'json', ':', '""id""', 'Keys', '[]', 'Key', 'json', ':', '""keys""', '}', 'type', 'Key', 'struct', '{', 'Id', 'string', 'json', ':', '""id""', '}', 'type', 'Result', 'struct', '{', 'Data', '[]', 'Data', 'json', ':', '""data""', '}', 'type', 'Data', 'struct', '{', 'Id', 'int', 'json', ':', '""id""', 'Values', '[]', 'json', ':', '""values""', '}', 'I', 'would', 'be', 'grateful', 'for', 'any', 'help.', 'Thanks.']"
1756,44067030,"I'm using chromedp, which has features to focus on elements, fill in text, etc. Chrome 59 has cross-platform headless support. It allows running Chrome in a headless/server environment. To use via the DevTools remote debugging protocol, start a normal Chrome binary with the --headless command line flag (Linux-only for now):


  $ google-chrome --headless --disable-gpu --remote-debugging-port=9222 https://www.google.fr


How can I tell chromedp to send the --headless flag, along with other flags?
","['I', 'would', 'be', 'grateful', 'for', 'any', 'help.', 'Thanks.']"
1757,44078189,"

I start a http.server that responds with hello world, how do I kill it from kill_server function
Is this possible without rewritting everything?
","['package', 'main', 'import', '(', '""fmt""', '""log""', '""net/http""', '""time""', ')', 'func', 'handlerfunc', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{', 'fmt.Fprintf(w, ""Hello World"" )', '}', 'http.ServeContent(w, r, str , time.Now(), f)', '}', 'func', 'PleaseStart', '(){', 'http.HandleFunc(""/"" , handlerfunc )', 'log.Fatal(http.ListenAndServe("":80"", nil))', '}', 'func', 'kill_server', '()', '{', '//', 'How', 'do', 'I', 'kill', 'server', 'from', 'here', '}', 'func', 'main', '()', '{', 'go', 'PleaseStart', '()', 'kill_server', '()', '}', 'I', 'start', 'a', 'http.server', 'that', 'responds', 'with', 'hello', 'world,', 'how', 'do', 'I', 'kill', 'it', 'from', 'kill_server', 'function', 'Is', 'this', 'possible', 'without', 'rewritting', 'everything?']"
1758,44102971,"I've been searching for a while but cannot find a solution to this issue.

Because libraries like SDL2 are not part of the OpenBSD operating system, they are stored in /usr/local. Go seems to be looking for headers in /usr/include and not /usr/local/include. I see flags in go env  but I'm unable to edit them.

Is there a way to resolve this issue without symlinks? Perhaps a Go equivalent of the -I flag common in C compilers?
","['I', 'start', 'a', 'http.server', 'that', 'responds', 'with', 'hello', 'world,', 'how', 'do', 'I', 'kill', 'it', 'from', 'kill_server', 'function', 'Is', 'this', 'possible', 'without', 'rewritting', 'everything?']"
1759,44177972,"'Program arguments' is empty as below, 



but when I start debugging, there is a '--' parameter at end.

Where does the parameter come from, and how can I avoid it?



When I add some debug parameters, the '--' is still there , just between program name and the real parameters. It will break the debugging, because program doesn't know how to interpret it.

","[""'Program"", ""arguments'"", 'is', 'empty', 'as', 'below,', 'but', 'when', 'I', 'start', 'debugging,', 'there', 'is', 'a', ""'--'"", 'parameter', 'at', 'end.', 'Where', 'does', 'the', 'parameter', 'come', 'from,', 'and', 'how', 'can', 'I', 'avoid', 'it?', 'When', 'I', 'add', 'some', 'debug', 'parameters,', 'the', ""'--'"", 'is', 'still', 'there', ',', 'just', 'between', 'program', 'name', 'and', 'the', 'real', 'parameters.', 'It', 'will', 'break', 'the', 'debugging,', 'because', 'program', ""doesn't"", 'know', 'how', 'to', 'interpret', 'it.']"
1760,44240806,"

How can I get this value? The documentation is not so clear on this.
","['I', 'am', 'trying', 'to', 'get', 'the', 'OctetString', 'value', 'from', 'an', 'SNMP', 'PDU', 'returned', 'by', 'the', 'gosnmp', 'package.', 'Even', 'the', 'bytes', 'would', 'suffice.', 'Here', 'is', 'my', 'code:', 'package', 'snmp_abstract', 'import', '(', '""github.com/soniah/gosnmp""', '""time""', '""log""', '""os""', '""strings""', ')', 'type', 'Switch', 'struct', '{', 'Hostname', 'string', 'Connection', 'go', 'snmp', '.', 'GoSNMP', '}', 'var', 'ConnectionParams', '=', '&', 'go', 'snmp', '.', 'GoSNMP', '{', 'Target', ':', '""""', ',', 'Port', ':', '161', ',', 'Community', ':', '""community""', ',', 'Version', ':', 'go', 'snmp', '.', 'Version2c', ',', 'Timeout', ':', 'time.Duration(5)', '*', 'time', '.', 'Second', ',', 'Logger', ':', 'log.New(os.Stdout, """", 0)', ',', '}', 'type', 'Mibs', 'struct', '{', 'VtpVlanState', ',', 'Dot1dBasePortIfIndex', 'string', '}', 'var', 'Default', '=', '&', 'Mibs', '{', 'VtpVlanState', ':', '""1.3.6.1.4.1.9.9.46.1.3.1.1.2""', ',', 'Dot1dBasePortIfIndex', ':', '""1.3.6.1.2.1.17.1.4.1.2""', ',', '}', 'func', 'SNMPGet', '(', 'conn', '*', 'go', 'snmp', '.', 'GoSNMP', ',', 'host', 'string', ',', 'mib', '[]', 'string', ')', '{', 'conn', '.', 'Target', '=', 'host', 'log.Println(conn)', 'err', ':=', 'conn.Connect()', 'if', 'err', '!=', 'nil', '{', 'log.Printf(""Unable to connect to %s\\n"", host)', '}', 'defer', 'conn', '.', 'Conn.Close()', 'res', ',', 'err', ':=', 'conn.Get(mib)', 'if', 'err', '!=', 'nil', '{', 'log.Println(""GET error"")', 'log.Print(err)', '}', 'log.Println(res)', '}', 'func', 'SNMPWalk', '(', 'conn', '*', 'go', 'snmp', '.', 'GoSNMP', ',', 'host', 'string', ',', 'mib', 'string', ')', '[]', 'go', 'snmp', '.', 'SnmpPDU', '{', 'conn', '.', 'Target', '=', 'host', 'log.Println(conn)', 'err', ':=', 'conn.Connect()', 'if', 'err', '!=', 'nil', '{', 'log.Printf(""Unable to connect to %s\\n"", host)', '}', 'defer', 'conn', '.', 'Conn.Close()', 'res', ',', 'err', ':=', 'conn.BulkWalkAll(mib)', 'if', 'err', '!=', 'nil', '{', 'log.Println(""GET error"")', 'log.Print(err)', '}', 'return', 'res', '}', 'func', '(', 'sw', '*', 'Switch', ')', 'Vlans', '()', '[]', 'string', '{', 'res', ':=', 'SNMPWalk', '(&', 'sw', '.', 'Connection', ',', 'sw', '.', 'Hostname', ',', 'Default', '.', 'VtpVlanState', ')', 'var', 'vlans', '=', 'make', '([]', 'string', ',', 'len', '(', 'res', '))', 'for', 'i', ',', 'vlan', ':=', 'range', 'res', '{', 'oidSlice', ':=', 'strings.Split(vlan.Name, ""."")', 'v', ':=', 'oidSlice', '[', 'len', '(', 'oidSlice', ')-', '1', ']', 'vlans', '[', 'i', ']', '=', 'v', '}', 'return', 'vlans', '}', 'func', '(', 'sw', '*', 'Switch', ')', 'MapBPIIfindex', '(', 'vlan', 'string', ')', '{', 'log.Println(vlan)', 's', ':=', '*', 'sw', 's', '.', 'Connection', '.', 'Community', '+=', '""@""', '+', 'vlan', 'log.Println(s.Connection.Community)', 'res', ':=', 'SNMPWalk', '(&', 's', '.', 'Connection', ',', 's', '.', 'Hostname', ',', 'Default', '.', 'Dot1dBasePortIfIndex', ')', 'for', '_', ',', 'p', ':=', 'range', 'res', '{', 'log.Println(p.Name)', 'log.Println(p.Value)', '}', '}', 'When', 'I', 'use', 'the', 'MapBPIIfindex', 'method', 'I', 'get', 'the', 'following', 'output:', 'OID', ':', '[.', '1', '.', '3', '.', '6', '.', '1', '.', '2', '.', '1', '.', '31', '.', '1', '.', '1', '.', '1', '.', '1', '.', '10001', ']', '[', 'decodeValue', ':', 'type', 'is', 'OctetString', ']', 'decodeValue', ':', 'value', 'is', '[]', 'interface', '{}{[]', 'uint8', '{', '0x46', ',', '0x61', ',', '0x3', '0', ',', '0x2f', ',', '0x31', '}}', 'Now,', 'this', 'should', 'contain', 'an', 'OctetString.', 'The', 'uint8', 'bytes', 'should', 'decode', 'to', 'Fa0/1,', 'but', 'I', 'am', 'not', 'able', 'to', 'do', 'this.', 'When', 'I', 'change', 'log.Println(p.Value)', 'to', 'log.Println(p.Value.([]uint8))', ',', 'I', 'get', 'the', 'following', 'error:', '2017/05/29', '12', ':', '54', ':', '59', '.', '1', '.', '3', '.', '6', '.', '1', '.', '2', '.', '1', '.', '17', '.', '1', '.', '4', '.', '1', '.', '2', 'panic', ':', 'interface', 'conversion', ':', 'interface', '{}', 'is', 'nil', ',', 'not', '[]', 'uint8', 'How', 'can', 'I', 'get', 'this', 'value?', 'The', 'documentation', 'is', 'not', 'so', 'clear', 'on', 'this.']"
1761,44301262,"

I am new to golang, I'm not sure is most efficient way to do this. 
","['To', 'convert', '[][]byte', 'to', '[]string,', 'I', 'do', 'this', 'data', ',', 'err', ':=', 'ioutil.ReadFile(""test.txt"")', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'db', ':=', 'bytes.Split(data, []uint8(""\\n""))', '//', 'Convert', '[][]byte', 'to', '[]string', 's', ':=', 'make', '([]', 'string', ',', 'len', '(', 'db', '))', 'for', 'i', ',', 'val', ':=', 'range', 'db', '{', 's', '[', 'i', ']', '=', 'string', '(', 'val', ')', '}', 'fmt.Printf(""%v"", s)', 'I', 'am', 'new', 'to', 'golang,', ""I'm"", 'not', 'sure', 'is', 'most', 'efficient', 'way', 'to', 'do', 'this.']"
1762,44363911,"
","['Is', 'there', 'anyway', 'to', 'detect', 'if', 'the', 'host', 'operating', 'system', 'is', 'XP,', 'Vista,', '7,', '8,', 'or', '10?', 'runtime.GOOS', 'just', 'returns', '""windows"".', 'The', 'reason', 'for', 'this', 'is', 'because', ""I'm"", 'trying', 'to', 'manipulate', 'files', 'in', 'the', 'startup', 'folder.', 'On', 'windows', 'vista,', '7,', '8,', '10', ""it's"", 'located', 'at:', '%', 'appdata', '%', 'Roaming', 'Microsoft', 'Windows', 'Start', 'Menu', 'Programs', 'Startup', 'On', 'windows', 'XP', ""it's"", 'located', 'at:', 'Documents', 'and', 'Settings', '%', 'username', '%', 'Start', 'Menu', 'Programs', 'Startup']"
1763,44377492,"
","['I', 'just', 'got', 'access', 'to', 'a', 'powerful', 'Minski', 'IBM', 'machine', '(Linux)', 'and', 'intend', 'on', 'running', 'some', 'go', 'scripts', 'on', 'it.', 'I', 'have', 'gone', 'through', 'a', 'lot', 'of', 'the', 'versions', 'of', 'golang', 'and', 'tried', 'installing', 'and', 'using', 'them', 'on', 'the', 'machine', 'but', 'none', 'of', 'them', 'seem', 'to', 'work.', 'Is', 'there', 'some', 'special', 'version', 'of', 'GO', 'that', 'I', 'need', 'that', 'is', 'specially', 'designed', 'to', 'work', 'on', 'this', 'powerful', 'computer.', 'I', 'have', 'now', 'tried', 'installing', 'about', '4', 'or', '5', 'different', 'versions', 'but', 'still', 'keep', 'getting:', 'The', 'program', ""'go'"", 'is', 'currently', 'not', 'installed', '.', 'To', 'run', ""'go'"", 'please', 'ask', 'your', 'administrator', 'to', 'install', 'the', 'package', ""'golang-go'"", 'I', 'was', 'told', 'that', 'there', 'is', 'no', 'need', 'for', 'an', 'administrator', 'to', 'do', 'a', 'system', 'wide', 'install', 'and', 'to', 'just', 'install', 'golang', 'on', 'my', 'machine.', 'I', 'have', 'been', 'using', 'this', 'step-by-step', 'to', 'install', 'GO', 'on', 'this', 'machine:', 'https://www.digitalocean.com/community/tutorials/how-to-install-go-1-6-on-ubuntu-14-04', 'I', 'do', 'not', 'have', 'root', 'access', 'on', 'this', 'machine,', 'just', 'FYI', 'EDIT:', 'Problem', 'solved', 'Had', 'to', 'use:', 'curl', '-', 'O', 'storage', '.', 'go', 'ogleapis', '.', 'com/golang/go1.8.3.linux-ppc64le.tar.gz']"
1764,44398216,"I'm building a web application in Golang, and at the moment I'm struggling with the authentication/authorization mechanisms.

I want to deploy this app to different platforms (browsers, androids, etc). To achieve this I chosed to use oauth 2.0, namely this lib: https://github.com/golang/oauth2 .

The problem I'm facing is how to achieve this with my own database and users. The lib has a jwt package (https://github.com/golang/oauth2/tree/master/jwt) and also has a package clientcredentials (https://github.com/golang/oauth2/blob/master/clientcredentials/clientcredentials.go) that can be used for 2-legged Oauth 2.0, but I have no idea how to achieve this, and can't find any example showing it. Which package should I use? The token should be set when user sends a POST with its credentials at http://example.domain/login.

Can someone provide me some hints / show me a simple example?
","[""I'm"", 'building', 'a', 'web', 'application', 'in', 'Golang,', 'and', 'at', 'the', 'moment', ""I'm"", 'struggling', 'with', 'the', 'authentication/authorization', 'mechanisms.', 'I', 'want', 'to', 'deploy', 'this', 'app', 'to', 'different', 'platforms', '(browsers,', 'androids,', 'etc).', 'To', 'achieve', 'this', 'I', 'chosed', 'to', 'use', 'oauth', '2.0,', 'namely', 'this', 'lib:', 'https://github.com/golang/oauth2', '.', 'The', 'problem', ""I'm"", 'facing', 'is', 'how', 'to', 'achieve', 'this', 'with', 'my', 'own', 'database', 'and', 'users.', 'The', 'lib', 'has', 'a', 'jwt', 'package', '(https://github.com/golang/oauth2/tree/master/jwt)', 'and', 'also', 'has', 'a', 'package', 'clientcredentials', '(https://github.com/golang/oauth2/blob/master/clientcredentials/clientcredentials.go)', 'that', 'can', 'be', 'used', 'for', '2-legged', 'Oauth', '2.0,', 'but', 'I', 'have', 'no', 'idea', 'how', 'to', 'achieve', 'this,', 'and', ""can't"", 'find', 'any', 'example', 'showing', 'it.', 'Which', 'package', 'should', 'I', 'use?', 'The', 'token', 'should', 'be', 'set', 'when', 'user', 'sends', 'a', 'POST', 'with', 'its', 'credentials', 'at', 'http://example.domain/login.', 'Can', 'someone', 'provide', 'me', 'some', 'hints', '/', 'show', 'me', 'a', 'simple', 'example?']"
1765,44424331,"

The same issue occurs with recent API levels like 22.

I am using the golang-1.8-go package mentioned on https://github.com/golang/go/wiki/Ubuntu
","['CGO_CFLAGS', '=', '""--sysroot=android-sdk-linux/ndk-bundle/platforms/android-9/arch-arm/""', 'CGO_ENABLED', '=', '1', 'CC', '=', 'android', '-', 'sdk', '-', 'linux/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-g++ CXX=android-sdk-linux/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-g++', 'GOOS', '=', 'android', 'GOARCH', '=', 'arm', 'go', 'build', '-', 'buildmode', '=', 'c', '-', 'archive', '--', 'ldflags', '=', '""--sysroot=android-sdk-linux/ndk-bundle/platforms/android-9/arch-arm/""', 'runtime/cgo', '/usr/lib/go-1.8/src/runtime/cgo/gcc_android_arm.c:', 'In', 'func', 'tion', ""'void inittls(void**, void**)'"", ':', '/usr/lib/go-1.8/src/runtime/cgo/gcc_android_arm.c:30:34:', 'error', ':', 'invalid', 'conversion', 'from', ""'void*'"", 'to', ""'void (*)(void*)'"", '[-', 'fpermissive', ']', 'err', '=', 'pthread_key_create', '(&', 'k', ',', 'nil', ');', '^', 'In', 'file', 'included', 'from', '/usr/lib/go-1.8/src/runtime/cgo/gcc_android_arm.c:5:0:', '/home/janus/Desktop/android-sdk-linux/ndk-bundle/platforms/android-9/arch-arm/usr/include/pthread.h:265:5:', 'note', ':', 'initializing', 'argument', '2', 'of', ""'int pthread_key_create(pthread_key_t*, void (*)(void*))'"", 'int', 'pthread_key_create', '(', 'pthread_key_t', '*', 'key', ',', 'void', '(*', 'destructor_function', ')(', 'void', '*));', 'The', 'same', 'issue', 'occurs', 'with', 'recent', 'API', 'levels', 'like', '22.', 'I', 'am', 'using', 'the', 'golang-1.8-go', 'package', 'mentioned', 'on', 'https://github.com/golang/go/wiki/Ubuntu']"
1766,44480989,"

https://play.golang.org/p/R4gDO9MPBS
","[""Can't"", 'seem', 'to', 'use', 'append', 'for', 'this', 'case.', 'Any', 'help', 'would', 'be', 'appreciated.', 'First', 'argument', 'to', 'append', 'must', 'be', 'slice:', 'package', 'main', 'import', '(', '""fmt""', ')', 'type', 'C', 'struct', '{', 'value5', 'string', 'value6', 'string', '}', 'type', 'B', 'struct', '{', 'value3', 'string', 'value4', 'C', '}', 'type', 'A', 'struct', '{', 'value1', 'string', 'value2', 'B', '}', 'type', 'X', 'struct', '{', 'key', 'int', '}', 'func', 'main', '()', '{', 'letSee', ':=', 'map', '[', 'X', ']', 'A', '{}', 'letSee', '[', 'X', '{', '1', '}]=', 'A', '{', '""T""', ',', 'B', '{', '""T1""', ',', 'C', '{', '""T11""', ',', '""T12""', '}}}', 'letSee', '[', 'X', '{', '1', '}]=', 'append', '(', 'letSee', '[', 'X', '{', '1', '}],', 'A', '{', '""L""', ',', 'B', '{', '""L1""', ',', 'C', '{', '""L11""', ',', '""L12""', '}}})', 'fmt.Println(letSee)', '}', 'https://play.golang.org/p/R4gDO9MPBS']"
1767,44481659,"

I am trying to simulate communicate from one thread to two other thread, but it seems like the above code is running fine in my local but not in playground.

Is there a trick to make the program work?
","['Consider', 'this', 'playground', 'messages', ':=', 'make', '(', 'chan', 'int', ',', '1', ')', 'done', ':=', 'make', '(', 'chan', 'bool', ')', 'go', 'func', '()', '{', 'for', '{', 'select', '{', 'case', 'msg', ':=', '<-', 'messages', ':', 'fmt.Println(""receiver one"", msg)', 'case', 'signal', ':=', '<-', 'done', ':', 'fmt.Println(signal)', 'return', 'default', ':', 'fmt.Println(""no message received"")', '}', '}', '}()', 'go', 'func', '()', '{', 'for', '{', 'select', '{', 'case', 'msg', ':=', '<-', 'messages', ':', 'fmt.Println(""receiver two"", msg)', 'case', 'signal', ':=', '<-', 'done', ':', 'fmt.Println(signal)', 'return', 'default', ':', 'fmt.Println(""no message received"")', '}', '}', '}()', 'go', 'func', '()', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '2', ';', 'i', '++', '{', 'messages', '<-', 'i', '}', 'done', '<-', 'true', 'done', '<-', 'true', 'done', '<-', 'true', '}()', '<-', 'done', 'I', 'am', 'trying', 'to', 'simulate', 'communicate', 'from', 'one', 'thread', 'to', 'two', 'other', 'thread,', 'but', 'it', 'seems', 'like', 'the', 'above', 'code', 'is', 'running', 'fine', 'in', 'my', 'local', 'but', 'not', 'in', 'playground.', 'Is', 'there', 'a', 'trick', 'to', 'make', 'the', 'program', 'work?']"
1768,44515677,"

Any idea?
","['The', 'code', 'bellow', 'return', 'a', 'two', 'concated', 'JSON', 'strings', 'and', 'a', 'wrong', 'content-type', 'text/plain.', 'Should', 'be', 'application/vnd.api+json', 'package', 'main', 'import', '(', '""github.com/google/jsonapi""', '""github.com/labstack/echo""', '""net/http""', ')', 'type', 'Album', 'struct', '{', 'ID', 'int', 'jsonapi', ':', '""primary,albums""', 'Name', 'string', 'jsonapi', ':', '""attr,name""', '}', 'func', 'main', '()', '{', 'e', ':=', 'echo.New()', 'e.GET(""/"", func(c echo.Context)', 'error', '{', 'jsonapi.MarshalManyPayload(c.Response(), albumList())', 'return', 'c.JSON(http.StatusOK, c.Response())', '})', 'e', '.', 'Logger.Fatal(e.Start("":1323""))', '}', 'func', 'albumList', '()', '[]*', 'Album', '{', 'a1', ':=', 'Album', '{', '123', ',', '""allbum1""', '}', 'a2', ':=', 'Album', '{', '456', ',', '""allbum2""', '}', 'albums', ':=', '[]*', 'Album', '{&', 'a1', ',', '&', 'a2', '}', 'return', 'albums', '}', 'faulty', 'output', '(two', 'concated', 'jsons).', 'The', 'first', 'is', 'a', 'correct', 'jsonapi', 'structure', 'and', 'I', 'think', 'the', 'second', 'is', 'related', 'to', 'echo-framework:', '{', '""data""', ':', '[', '{', '""type""', ':', '""albums""', ',', '""id""', ':', '""123""', ',', '""attributes""', ':', '{', '""name""', ':', '""allbum1""', '}', '},', '{', '""type""', ':', '""albums""', ',', '""id""', ':', '""456""', ',', '""attributes""', ':', '{', '""name""', ':', '""allbum2""', '}', '}', ']', '}', '{', '""Writer""', ':', '{},', '""Status""', ':', '200', ',', '""Size""', ':', '133', ',', '""Committed""', ':', 'true', '}', 'This', 'code', 'fix', 'the', 'problem', 'but', 'is', 'seems', 'awkward.', 'I', 'have', 'the', 'feeling', 'there', 'is', 'a', 'better', 'way', 'to', 'facilitate', 'it', 'using', 'echo.', 'e.GET(""/"", func(c echo.Context)', 'error', '{', 'var', 'b', 'bytes', '.', 'Buffer', 'body', ':=', 'bufio.NewWriter(&b)', 'err', ':=', 'jsonapi.MarshalManyPayload(body, albumList())', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(err)', '}', 'body.Flush()', 'return', 'c.JSONBlob(http.StatusOK, b.Bytes())', '})', 'Any', 'idea?']"
1769,44524774,"

How might I declare a typed float const of arbitrary bit pattern?
","['In', 'Go', 'I', 'can', 'declare', 'a', 'typed', 'float', 'constant', 'like', 'this:', 'const', 'foo', 'float64', '=', '1', 'e100', 'or', 'a', 'float', 'variable', 'of', 'arbitrary', 'bit', 'pattern', 'like', 'this:', 'var', 'bar', '=', 'math.Float64frombits(0x7ff8c0c0ac0ffee1)', 'But', 'this', 'is', 'an', 'error', '(""const', 'initializer…', 'is', 'not', 'a', 'constant""):', 'const', 'baz', '=', 'math.Float64frombits(0x7ff8c0c0ac0ffee1)', 'How', 'might', 'I', 'declare', 'a', 'typed', 'float', 'const', 'of', 'arbitrary', 'bit', 'pattern?']"
1770,44589854,"

I think it must be the rebel binary the one to be run here, but I don't know how to pass the app path, should it go in ""args""?
","[""I'm"", 'trying', 'to', 'debug', 'a', 'revel', 'app', 'with', 'visual', 'studio', 'but', 'I', ""can't"", 'get', 'it', 'to', 'work.', ""I've"", 'seen', 'this', 'question', 'how', 'to', 'debug', 'revel', 'framework(golang)', 'application', 'in', 'visual', 'studio', 'code(vscode)', 'but', 'no', 'answers', 'yet...', ""I've"", 'tried', 'with', 'this', 'config:', '{', '""version""', ':', '""0.2.0""', ',', '""configurations""', ':', '[', '{', '""name""', ':', '""Launch""', ',', '""type""', ':', '""go""', ',', '""request""', ':', '""launch""', ',', '""mode""', ':', '""debug""', ',', '""remotePath""', ':', '""""', ',', '""port""', ':', '2345', ',', '""host""', ':', '""127.0.0.1""', ',', '""program""', ':', '""~/code/go/bin/revel""', ',', '""env""', ':', '{},', '""args""', ':', '[],', '""showLog""', ':', 'true', '}', ']', '}', 'But', ""I'm"", 'getting', 'this', 'error:', 'Failed', 'to', 'continue', ':', '""The program attribute must point to valid directory, .go file or executable.""', 'I', 'think', 'it', 'must', 'be', 'the', 'rebel', 'binary', 'the', 'one', 'to', 'be', 'run', 'here,', 'but', 'I', ""don't"", 'know', 'how', 'to', 'pass', 'the', 'app', 'path,', 'should', 'it', 'go', 'in', '""args""?']"
1771,44594289,"

How can I catch both cases?

I'd prefer to marshall it into a slice of Pets in the end, no matter what.
","['Say', 'I', 'want', 'to', 'be', 'able', 'to', 'handle', 'both', 'nested', 'and', 'unnested', 'jsons', 'of', 'the', 'following', 'form,', 'as', 'in', 'this', 'example:', 'source_json_1', ':=', '{', '""owner""', ':', '""John""', ',', '""nickname""', ':', '""Rose""', ',', '""species""', ':', '""Dog""', '}', 'source_json_2', ':=', '{', '""owner""', ':', '""Doe""', ',', '""Pet""', ':', '[{', '""nickname""', ':', '""Rose""', ',', '""species""', ':', '""Dog""', '},', '{', '""nickname""', ':', '""Max""', ',', '""species""', ':', '""Cat""', '}]}', 'If', 'I', 'define', 'Pet', 'as', 'an', 'embedded', 'struct', 'I', 'can', 'easily', 'unmarshal', 'it', 'with:', 'type', 'Owner', 'struct', '{', 'Name', 'string', 'Pet', '}', 'type', 'Pet', 'struct', '{', 'NickName', 'string', 'Species', 'string', '}', 'Resulting', 'in', ""John's"", 'pet', 'getting', 'adequately', 'marshalled.', '{', 'John', '{', 'Rose', 'Dog', '}}', '{', 'Doe', '{', '}}', 'But', 'since', 'Pet', 'can', 'actually', 'also', 'be', 'a', 'slice', 'of', 'Pets,', ""Doe's"", 'Pets', 'are', 'not', 'correctly', 'unmarshalled.', 'If', 'instead', 'go', 'with', 'type', 'Owner', 'struct', '{', 'Name', 'string', 'Pet', '[]', 'Pet', '}', 'Then', 'Doe', 'gets', 'marshalled', 'just', 'fine.', '{', 'John', '[]}', '{', 'Doe', '[{', 'Rose', 'Dog', '}', '{', 'Max', 'Cat', '}]}', 'How', 'can', 'I', 'catch', 'both', 'cases?', ""I'd"", 'prefer', 'to', 'marshall', 'it', 'into', 'a', 'slice', 'of', 'Pets', 'in', 'the', 'end,', 'no', 'matter', 'what.']"
1772,44650198,"

What would be the better way of unmarshalling this?
","['I', 'receive', 'dynamic', 'JSON', 'from', 'an', 'API', 'that', 'follows', 'this', 'pattern:', '{', '""ts""', ':', 'timestamp', ',', '""data""', ':', '[', '[', 'code1', ',', 'payload1', '],', '[', 'code2', ',', 'payload2', '],', '...', ']', '}', 'For', 'example', 'the', 'raw', 'data', 'will', 'be:', 'var', 'streamSnapshot', '=', '[]', 'byte', '(', '{', '""ts""', ':', '1496244373', '.', '04', ',', '""data""', ':[', '[', '""xrate""', ',', '{', '""rate""', ':', '1', '.', '2916', ',', '""ccy""', ':', '""USD""', '}],', '[', '""balance""', ',', '{', '""open_stake""', ':[', '""GBP""', ',', '0', '.', '0', '],', '""balance""', ':[', '""GBP""', ',', '0', '.', '0', ']', '}', '],', '[', '""event""', ',', '{', '""competition_id""', ':', '""545""', ',', '""ir_status""', ':', '""pre_event""', ',', '""start_time""', ':', '""2017-09-10T17:00:00+00:00""', ',', '""competition_name""', ':', '""USA NFL""', ',', '""event_id""', ':', '""2017-09-10,21617,21635""', ',', '""home""', ':', '""Buffalo Bills""', ',', '""away""', ':', '""New York Jets""', ',', '""sport""', ':', '""af""', ',', '""competition_country""', ':', '""US""', '}', '],', '[', '""sync""', ',', '{', '""Token""', ':', '""eb1c57132d004f8d8fb967c076921fac""', '}]', ']', '}', ')', 'Considering', 'that', 'we', 'want', 'to', 'avoid', 'unmarshalling', 'to', 'a', 'struct', 'like', 'this:', 'type', 'StreamMessage', 'struct', '{', 'Data', '[][]', 'interface', '{}', 'json', ':', '""data""', 'Ts', 'float64', 'json', ':', '""ts""', '}', 'where', 'we', 'would', 'have', 'to', 'cast', 'the', 'data', 'back', 'like:', 'm', ':=', 'raw', '.(', 'map', '[', 'string', ']', 'interface', '{})', 'switch', 'messageType', '{', 'case', 'XRATE', ':', 'xrate', ':=', 'XRate', '{', 'Message', ':', 'Message', '{', 'Type', ':', 'XRATE', ',', 'TimeStamp', ':', 'msg', '.', 'Ts', ',', '},', 'rate', ':', 'm', '[', '""rate""', '].(', 'float64', '),', 'ccy', ':', 'm', '[', '""ccy""', '].(', 'string', '),', '}', '...', 'What', 'would', 'be', 'the', 'better', 'way', 'of', 'unmarshalling', 'this?']"
1773,44675087," but this also gives me the same error.

Any idea?
","['I', 'have', 'created', 'a', 'function', 'to', 'check', 'if', 'a', 'variable', 'is', 'defined:', 'fm', '[', '""isset""', ']', '=', 'func', '(', 'a', 'interface', '{})', 'bool', '{', 'if', 'a', '==', 'nil', '||', 'a', '==', '""""', '||', 'a', '==', '0', '{', 'fmt.Println(""is not set"")', 'return', 'false', '}', 'fmt.Println(""is set"")', 'return', 'false', '}', 'tmpl', ':=', 'template.Must(template.New("""").Funcs(fm).ParseFiles(""templates/header.html""))', 'err', ':=', 'tmpl.ExecuteTemplate(w, ""header"", templateData)', 'In', 'the', 'template', 'I', 'have:', '{{', 'if', 'isset', '.', 'Email', '}}', 'email', 'is', 'set', '{{', 'end', '}}', 'This', 'function', 'works', 'if', 'the', 'variable', 'is', 'contained', 'by', 'the', 'templateData', '(which', 'is', 'a', 'custom', 'struct', 'that', 'contains', 'a', 'map', 'and', 'a', 'string),', 'but', 'it', 'gives', 'me', 'an', 'error', 'if', 'the', 'variable', ""doesn't"", 'exist.', 'The', 'error', 'is:', 'executing', '""header""', 'at', ':', 'can', 't', 'evaluate', 'field', 'Email', 'in', 'type', 'base', '.', 'customData', 'In', 'my', 'case', '""base.go""', 'is', 'the', 'handler', 'and', '""customData""', 'is', 'defined', 'by:', 'type', 'customData', 'struct', '{..}', '.', 'I', 'want', 'to', 'be', 'able', 'to', 'reuse', 'templates', 'and', 'to', 'display', 'some', 'sections', 'only', 'if', 'some', 'variables', 'are', 'sent', 'from', 'the', 'handler.', 'Any', 'idea', 'how', 'can', 'I', 'implement', 'a', 'variable', 'isset', 'check', 'on', 'the', 'template', 'side?', 'I', 'also', 'tried', 'using:', '{{', 'if', '.', 'Email', '}}', 'do', 'stuff', '{{', 'end', '}}', 'but', 'this', 'also', 'gives', 'me', 'the', 'same', 'error.', 'Any', 'idea?']"
1774,44687426,"

If the backend sends a message, but it is not actually sent to a worker in some period of time, I want it to expire and not ever be sent. Is there a socket option that can accomplish this? If not, what would I have to do to accomplish this?

Two ways I think I can do this without socket options are:

1) Have the backend wrap the message in a wrapper and send to a golang queue and not through zeromq. The wrapper contains the time that the message was ""sent"". The backend concurrently pulls from the front of the golang queue one at a time and checks if the message is expired. If so, don't send, if not, send the message. I could have the backend add the message to the golang queue first and then truly send it out after in the same block of code. That way, I don't need a lock.

2) Send the wrapper message through zeromq to a retriever and the retriever checks if its expired and returns early. I don't like this because it seems like its bad for performance.
","['I', 'have', 'an', 'application', 'running', 'on', 'a', 'server', 'which', 'takes', 'requests', 'from', 'a', 'phone', 'app', 'and', 'then', 'load', 'balances', 'the', 'request', 'across', 'worker', 'servers.', ""I'm"", 'trying', 'to', 'add', 'a', 'timeout', 'in', 'the', 'case', 'that', 'messages', 'on', 'the', 'main', 'server', 'that', 'have', 'been', 'in', 'the', 'outbound', 'queue', 'for', 'the', 'length', 'of', 'the', 'timeout', 'are', 'removed', 'from', 'the', 'queue.', 'More', 'specifically,', 'the', 'application', 'on', 'the', 'main', 'server', 'is', 'written', 'in', 'golang', 'and', 'implements', 'the', 'Paranoid', 'Pirate', 'Pattern', 'of', 'load', 'balancing.', 'The', 'code', 'I', 'currently', 'have', 'is:', 'import', '(', '""fmt""', 'zmq', '""github.com/pebbe/zmq4""', '""time""', ')', 'const', '(', 'HEARTBEAT_LIVENESS', '=', '3', 'HEARTBEAT_INTERVAL', '=', '1500', '*', 'time', '.', 'Millisecond', 'MESSAGE_READY', '=', '""\\001""', 'MESSAGE_HEARTBEAT', '=', '""\\002""', ')', 'var', '(', 'client', '*', 'zmq', '.', 'Socket', 'backend', '*', 'zmq', '.', 'Socket', 'frontend', '*', 'zmq', '.', 'Socket', 'workerPoller', '*', 'zmq', '.', 'Poller', 'brokerPoller', '*', 'zmq', '.', 'Poller', 'workerQueue', '[]', 'Worker', ')', 'type', 'Worker', 'struct', '{', 'Id', 'string', 'Expire', 'time', '.', 'Time', '}', 'type', 'RequestWrapper', '{', 'RequestToSend', 'Request', '}', 'func', 'NewWorker', '(', 'id', 'string', ')', 'Worker', '{', 'return', 'Worker', '{', 'Id', ':', 'id', ',', 'Expire', ':', 'time.Now().Add(HEARTBEAT_INTERVAL * HEARTBEAT_LIVENESS)', ',', '}', '}', 'func', 'AddReadyWorker', '(', 'workers', '[]', 'Worker', ',', 'worker', 'Worker', ')', '[]', 'Worker', '{', 'fmt.Println(worker.Id, "" joined"")', 'for', 'i', ',', 'w', ':=', 'range', 'workers', '{', 'if', 'worker', '.', 'Id', '==', 'w', '.', 'Id', '{', 'if', 'i', '==', '0', '{', 'workers', '=', 'workers', '[', '1', ':]', '}', 'else', 'if', 'i', '==', 'len', '(', 'workers', ')-', '1', '{', 'workers', '=', 'workers', '[:', 'i', ']', '}', 'else', '{', 'workers', '=', 'append', '(', 'workers', '[:', 'i', '],', 'workers', '[', 'i', '+', '1', ':]...)', '}', 'break', '}', '}', 'return', 'append', '(', 'workers', ',', 'worker', ')', '}', 'func', 'PurgeInactiveWorkers', '()', '{', 'now', ':=', 'time.Now()', 'for', 'i', ',', 'worker', ':=', 'range', 'workerQueue', '{', 'if', 'now.Before(worker.Expire)', '{', 'workerQueue', '=', 'workerQueue', '[', 'i', ':]', 'return', '}', '}', 'workerQueue', '=', 'workerQueue', '[', '0', ':', '0', ']', '}', 'func', 'LoadBalance', '()', '{', '//', 'Loop:', 'heartbeat', ':=', 'time.Tick(HEARTBEAT_INTERVAL)', 'for', '{', 'var', 'sockets', '[]', 'zmq', '.', 'Polled', '//', 'If', 'you', 'have', 'available', 'workers,', 'poll', 'on', 'the', 'both', 'front', 'and', 'backend', '//', 'If', 'not', 'poll', 'on', 'backend', 'with', 'infinite', 'timeout', 'if', 'len', '(', 'workerQueue', ')', '>', '0', '{', 'sockets', ',', '_', '=', 'brokerPoller.Poll(HEARTBEAT_INTERVAL)', '}', 'else', '{', 'sockets', ',', '_', '=', 'workerPoller.Poll(HEARTBEAT_INTERVAL)', '}', 'for', '_', ',', 'socket', ':=', 'range', 'sockets', '{', 'switch', 'socket', '.', 'Socket', '{', '//', 'backend', 'is', 'a', 'router', 'case', 'backend', ':', 'workerId', ',', '_', ':=', 'backend.Recv(0)', 'workerQueue', '=', 'AddReadyWorker', '(', 'workerQueue', ',', 'NewWorker', '(', 'workerId', '))', 'clientId', ',', '_', ':=', 'backend.Recv(0)', 'if', 'clientId', '!=', 'MESSAGE_READY', '&&', 'clientId', '!=', 'MESSAGE_HEARTBEAT', '{', 'route', ',', '_', ':=', 'backend.Recv(0)', 'message', ',', '_', ':=', 'backend.RecvBytes(0)', 'fmt.Println(""Received response"")', 'RouteResponse', '(', 'route', ',', 'message', ')', '//', 'frontend.Send(clientId,', 'zmq.SNDMORE)', '//', 'frontend.Send("""",', 'zmq.SNDMORE)', '//', 'frontend.SendBytes(message,', '0)', '}', '//', 'frontend', 'is', 'a', 'dealer', 'case', 'frontend', ':', 'clientId', ',', '_', ':=', 'frontend.Recv(0)', 'route', ',', '_', ':=', 'frontend.Recv(0)', 'message', ',', '_', ':=', 'frontend.RecvBytes(0)', 'backend.Send(workerQueue[0].Id, zmq.SNDMORE)', 'backend.Send(clientId, zmq.SNDMORE)', 'backend.Send(route, zmq.SNDMORE)', 'backend.SendBytes(message, 0)', 'workerQueue', '=', 'workerQueue', '[', '1', ':]', '}', '}', 'select', '{', 'case', '<-', 'heartbeat', ':', 'for', '_', ',', 'worker', ':=', 'range', 'workerQueue', '{', 'backend.Send(worker.Id, zmq.SNDMORE)', 'backend.Send(MESSAGE_HEARTBEAT, 0)', '}', 'break', 'default', ':', '}', 'PurgeInactiveWorkers', '()', '}', '}', 'If', 'the', 'backend', 'sends', 'a', 'message,', 'but', 'it', 'is', 'not', 'actually', 'sent', 'to', 'a', 'worker', 'in', 'some', 'period', 'of', 'time,', 'I', 'want', 'it', 'to', 'expire', 'and', 'not', 'ever', 'be', 'sent.', 'Is', 'there', 'a', 'socket', 'option', 'that', 'can', 'accomplish', 'this?', 'If', 'not,', 'what', 'would', 'I', 'have', 'to', 'do', 'to', 'accomplish', 'this?', 'Two', 'ways', 'I', 'think', 'I', 'can', 'do', 'this', 'without', 'socket', 'options', 'are:', '1)', 'Have', 'the', 'backend', 'wrap', 'the', 'message', 'in', 'a', 'wrapper', 'and', 'send', 'to', 'a', 'golang', 'queue', 'and', 'not', 'through', 'zeromq.', 'The', 'wrapper', 'contains', 'the', 'time', 'that', 'the', 'message', 'was', '""sent"".', 'The', 'backend', 'concurrently', 'pulls', 'from', 'the', 'front', 'of', 'the', 'golang', 'queue', 'one', 'at', 'a', 'time', 'and', 'checks', 'if', 'the', 'message', 'is', 'expired.', 'If', 'so,', ""don't"", 'send,', 'if', 'not,', 'send', 'the', 'message.', 'I', 'could', 'have', 'the', 'backend', 'add', 'the', 'message', 'to', 'the', 'golang', 'queue', 'first', 'and', 'then', 'truly', 'send', 'it', 'out', 'after', 'in', 'the', 'same', 'block', 'of', 'code.', 'That', 'way,', 'I', ""don't"", 'need', 'a', 'lock.', '2)', 'Send', 'the', 'wrapper', 'message', 'through', 'zeromq', 'to', 'a', 'retriever', 'and', 'the', 'retriever', 'checks', 'if', 'its', 'expired', 'and', 'returns', 'early.', 'I', ""don't"", 'like', 'this', 'because', 'it', 'seems', 'like', 'its', 'bad', 'for', 'performance.']"
1775,44759016,"I am quite new with Go, and I am struggling to import a package only if it exists. Is there a way to do this? I tried with ""_"" before the package name, but if the package does not exist the program won't compile. I am aware that I could be on the wrong road, but how else should I treat this case in which I want to import a package only if it exists?
","['I', 'am', 'quite', 'new', 'with', 'Go,', 'and', 'I', 'am', 'struggling', 'to', 'import', 'a', 'package', 'only', 'if', 'it', 'exists.', 'Is', 'there', 'a', 'way', 'to', 'do', 'this?', 'I', 'tried', 'with', '""_""', 'before', 'the', 'package', 'name,', 'but', 'if', 'the', 'package', 'does', 'not', 'exist', 'the', 'program', ""won't"", 'compile.', 'I', 'am', 'aware', 'that', 'I', 'could', 'be', 'on', 'the', 'wrong', 'road,', 'but', 'how', 'else', 'should', 'I', 'treat', 'this', 'case', 'in', 'which', 'I', 'want', 'to', 'import', 'a', 'package', 'only', 'if', 'it', 'exists?']"
1776,44812324,"

Should I define those handlers each in a separate package or should I just use structs and interfaces? Which method will allow me to have a good structure, avoid switch-case and let external developers to easier create handlers?

I think packages will be a better choice but I'm not sure how to register the handlers with the main bot. Would appreciate an example.
","[""I'm"", 'writing', 'a', 'chat', 'bot', 'in', 'Go', 'and', 'wondering', 'how', 'can', 'I', 'avoid', 'a', 'long', 'switch-case', 'statement', 'similar', 'to', 'this', 'one:', 'switch', '{', '//', '@bot', 'search', 'me', 'HMAC', 'case', 'strings.Contains(message, ""search me"")', ':', 'query', ':=', 'strings.Split(message, ""search me "")', '[', '1', ']', 'return', 'webSearch', '(', 'query', '),', '""html""', '//', '@bot', 'thesaurus', 'me', 'challenge', 'case', 'strings.Contains(message, ""thesaurus me"")', ':', 'query', ':=', 'strings.Split(message, ""thesaurus me "")', '[', '1', ']', 'return', 'synonyms', '(', 'query', '),', '""html""', 'Should', 'I', 'define', 'those', 'handlers', 'each', 'in', 'a', 'separate', 'package', 'or', 'should', 'I', 'just', 'use', 'structs', 'and', 'interfaces?', 'Which', 'method', 'will', 'allow', 'me', 'to', 'have', 'a', 'good', 'structure,', 'avoid', 'switch-case', 'and', 'let', 'external', 'developers', 'to', 'easier', 'create', 'handlers?', 'I', 'think', 'packages', 'will', 'be', 'a', 'better', 'choice', 'but', ""I'm"", 'not', 'sure', 'how', 'to', 'register', 'the', 'handlers', 'with', 'the', 'main', 'bot.', 'Would', 'appreciate', 'an', 'example.']"
1777,44833044,"

What am I doing wrong?
","[""I'm"", 'trying', 'to', 'call', 'a', 'built', 'in', 'command', 'for', 'the', 'command', 'prompt', 'and', ""I'm"", 'getting', 'errors', 'I', ""don't"", 'understand.', 'func', 'main', '()', '{', 'cmd', ':=', 'exec.Command(""del"", ""C:\\trial\\now.txt"")', '//', 'Reboot', 'if', 'needed', 'cmd', '.', 'Stdout', '=', 'os', '.', 'Stdout', 'if', 'err', ':=', 'cmd.Run()', ';', 'err', '!=', 'nil', '{', 'log.Fatal(err)', '}', '}', 'And', ""I'm"", 'getting', 'the', 'following', 'error:', 'exec', ':', '""del""', ':', 'executable', 'file', 'not', 'found', 'in', '%', 'PATH', '%', 'exit', 'status', '1', 'What', 'am', 'I', 'doing', 'wrong?']"
1778,44847607,"I'm using ""html/template"".

How do I convert the value of a template.JS object to a string? What about template.HTML?

I have a struct where I store some js scripts and css code/files, such as: ""HeaderCSS"", ""FooterJS"". I load them to the header/footer of my templates. The problem is that I need to check if they are loaded, so I won't load the same script twice (each reload means a new script load) because I'm using append, in order to be able to insert multiple scripts. In this way, each refresh will append the scripts to the existing scripts.

My idea is to check if they are allready loaded in order to prevent loading them multiple times. I was thinking about using strings.Contains() function. But I can't do that since I don't know to convert templates.HTML and templates.JS to string. 

Any idea?
","[""I'm"", 'using', '""html/template"".', 'How', 'do', 'I', 'convert', 'the', 'value', 'of', 'a', 'template.JS', 'object', 'to', 'a', 'string?', 'What', 'about', 'template.HTML?', 'I', 'have', 'a', 'struct', 'where', 'I', 'store', 'some', 'js', 'scripts', 'and', 'css', 'code/files,', 'such', 'as:', '""HeaderCSS"",', '""FooterJS"".', 'I', 'load', 'them', 'to', 'the', 'header/footer', 'of', 'my', 'templates.', 'The', 'problem', 'is', 'that', 'I', 'need', 'to', 'check', 'if', 'they', 'are', 'loaded,', 'so', 'I', ""won't"", 'load', 'the', 'same', 'script', 'twice', '(each', 'reload', 'means', 'a', 'new', 'script', 'load)', 'because', ""I'm"", 'using', 'append,', 'in', 'order', 'to', 'be', 'able', 'to', 'insert', 'multiple', 'scripts.', 'In', 'this', 'way,', 'each', 'refresh', 'will', 'append', 'the', 'scripts', 'to', 'the', 'existing', 'scripts.', 'My', 'idea', 'is', 'to', 'check', 'if', 'they', 'are', 'allready', 'loaded', 'in', 'order', 'to', 'prevent', 'loading', 'them', 'multiple', 'times.', 'I', 'was', 'thinking', 'about', 'using', 'strings.Contains()', 'function.', 'But', 'I', ""can't"", 'do', 'that', 'since', 'I', ""don't"", 'know', 'to', 'convert', 'templates.HTML', 'and', 'templates.JS', 'to', 'string.', 'Any', 'idea?']"
1779,44852289,"
","['How', 'can', 'I', 'decrypt', 'a', 'message', 'signed', 'with', 'a', 'private', 'key', 'in', 'golang?', '$', 'openssl', 'genrsa', '-', 'out', './', 'server/server.key', 'Generating', 'RSA', 'private', 'key', ',', '2048', 'bit', 'long', 'modulus', '..................+++', '.............................................+++', '$', 'openssl', 'rsa', '-', 'in', './', 'server/server.key -pubout -out ./client/client.pub', 'writing', 'RSA', 'key', '$', 'echo', '""secret""', '|', 'openssl', 'rsautl', '-', 'inkey', './', 'server/server.key -sign > ./secret', 'decrypt', 'with', 'public', 'key', '$', 'openssl', 'rsautl', '-', 'inkey', './', 'client/client.pub -pubin -in ./secret', 'secret']"
1780,44889128,"I'm trying to implement a client and server and define their interactions. The client is designed using Golang, the server is designed in Node.js, and they interact using gRPC.

So the basic gist is:


Client contacts server to update backend DB
Client receives success response from server
Client then itself changes the state of the overall system that the DB now reflects


But say something were to happen such that the process dies between steps 2 and 3 (Client process is terminated somehow). What is the best way to ensure that my backend DB doesn't reflect a system state that is inconsistent with reality? I'm sure this isn't a novel problem and would just like a couple pointers to how people typically cope with this type of design.


So I've already thought of redesigning this interaction such that the server is the entity that will handle the system changes— that way everything is handled in the same request and on the backend— but I'm using an open source technology that is designed in Go (so I can easily wrap it in my Go client). In other words, the client must be the entity that performs that system-change operation.

Thanks in advance!
","[""I'm"", 'trying', 'to', 'implement', 'a', 'client', 'and', 'server', 'and', 'define', 'their', 'interactions.', 'The', 'client', 'is', 'designed', 'using', 'Golang,', 'the', 'server', 'is', 'designed', 'in', 'Node.js,', 'and', 'they', 'interact', 'using', 'gRPC.', 'So', 'the', 'basic', 'gist', 'is:', 'Client', 'contacts', 'server', 'to', 'update', 'backend', 'DB', 'Client', 'receives', 'success', 'response', 'from', 'server', 'Client', 'then', 'itself', 'changes', 'the', 'state', 'of', 'the', 'overall', 'system', 'that', 'the', 'DB', 'now', 'reflects', 'But', 'say', 'something', 'were', 'to', 'happen', 'such', 'that', 'the', 'process', 'dies', 'between', 'steps', '2', 'and', '3', '(Client', 'process', 'is', 'terminated', 'somehow).', 'What', 'is', 'the', 'best', 'way', 'to', 'ensure', 'that', 'my', 'backend', 'DB', ""doesn't"", 'reflect', 'a', 'system', 'state', 'that', 'is', 'inconsistent', 'with', 'reality?', ""I'm"", 'sure', 'this', ""isn't"", 'a', 'novel', 'problem', 'and', 'would', 'just', 'like', 'a', 'couple', 'pointers', 'to', 'how', 'people', 'typically', 'cope', 'with', 'this', 'type', 'of', 'design.', 'So', ""I've"", 'already', 'thought', 'of', 'redesigning', 'this', 'interaction', 'such', 'that', 'the', 'server', 'is', 'the', 'entity', 'that', 'will', 'handle', 'the', 'system', 'changes—', 'that', 'way', 'everything', 'is', 'handled', 'in', 'the', 'same', 'request', 'and', 'on', 'the', 'backend—', 'but', ""I'm"", 'using', 'an', 'open', 'source', 'technology', 'that', 'is', 'designed', 'in', 'Go', '(so', 'I', 'can', 'easily', 'wrap', 'it', 'in', 'my', 'Go', 'client).', 'In', 'other', 'words,', 'the', 'client', 'must', 'be', 'the', 'entity', 'that', 'performs', 'that', 'system-change', 'operation.', 'Thanks', 'in', 'advance!']"
1781,44895535,"
","['I', 'am', 'new', 'to', 'Go.', 'I', 'am', 'working', 'with', 'a', 'weather', 'API.', 'I', 'have', 'commented', 'out', 'the', 'sections', 'that', 'cause', 'the', 'error.', 'I', 'have', 'seen', 'several', 'other', 'links', 'that', 'have', 'a', 'similar', 'problem,', 'however', 'none', 'of', 'them', 'seem', 'to', 'have', 'the', 'array', 'in', 'the', 'middle', 'of', 'the', 'JSON', 'string.', ""I'm"", 'sure', 'there', 'is', 'a', 'way', 'to', 'define', 'the', 'struct', 'with', 'a', 'slice.', 'I', ""can't"", 'seem', 'to', 'get', 'get', 'the', 'syntax', 'to', 'allow', 'it.', 'Here', 'is', 'where', ""I'm"", 'stuck:', 'package', 'main', 'import', '(', '""encoding/json""', '""fmt""', '""io/ioutil""', '""log""', '""net/http""', ')', '//', 'WeatherData', 'struct', 'to', 'collect', 'data', 'from', 'the', 'API', 'call', 'type', 'WeatherData', 'struct', '{', 'Wind', 'Wind', 'Sys', 'Sys', '//', 'Weather', 'Weather', 'Name', 'string', 'json', ':', '""name""', '}', '//', 'ERROR', 'when', 'unmarshalling', 'this', 'struct', '/', '//', 'Weather', 'provides', 'basic', 'weather', 'info', '//', 'type', 'Weather', 'struct', '{', '//', 'ID', 'int', '`json:""id""`', '//', 'Descrip', 'string', '`json:""description""`', '//', 'Icon', 'string', '`json:""icon""`', '//', '}', '//', '/', '//', 'Sys', 'includes', 'sunrise,', 'sunset,', 'country,', 'etc.', 'type', 'Sys', 'struct', '{', 'Country', 'string', 'json', ':', '""country""', '}', '//', 'Wind', 'struct', 'to', 'get', 'specific', 'wind', 'characteristics', 'type', 'Wind', 'struct', '{', 'Speed', 'float64', 'json', ':', '""speed""', 'Degree', 'float64', 'json', ':', '""deg""', 'Gust', 'float64', 'json', ':', '""gust""', '}', 'func', 'main', '()', '{', 'res', ',', 'getErr', ':=', 'http.Get(""http://api.openweathermap.org/data/2.5/weather?zip=REMOVED,us&appid=REMOVEDBUTWILLPOSTJSONData"")', 'if', 'getErr', '!=', 'nil', '{', 'log.Fatalln(""http.Get error: "", getErr)', '}', 'defer', 'res', '.', 'Body.Close()', 'body', ',', 'readErr', ':=', 'ioutil.ReadAll(res.Body)', 'if', 'readErr', '!=', 'nil', '{', 'log.Fatalln(""Read Error: "", readErr)', '}', '//', 'UNABLE', 'TO', 'UNMARSHAL', 'the', 'array', 'that', 'passes', 'through', 'here', 'var', 'data', 'WeatherData', 'if', 'err', ':=', 'json.Unmarshal(body, &data)', ';', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}', 'fmt.Println(""Wind gusts: "", data.Wind.Gust)', 'fmt.Println(""Wind speed: "", data.Wind.Speed)', 'fmt.Println(""Wind degrees: "", data.Wind.Degree)', 'fmt.Println(""Country is: "", data.Sys.Country)', 'fmt.Println(""City is: "", data.Name)', '//', '/', ""CAN'T"", 'ACCESS', 'Description...or', 'anything', 'in', 'Weather', '//', 'fmt.Println(""Country', 'is:', '"",', 'data.Weather.Descrip)', 'cannot', 'access', 'due', 'to', 'this', 'portion', 'being', 'inside', 'an', 'array', '}', '//', '/THIS', 'IS', 'THE', 'JSON', 'DATA', 'THAT', 'IS', 'AVAILABLE', '/', '{', '""coord""', ':', '{', '""lon""', ':', '-', '97', '.', '31', ',', '""lat""', ':', '32', '.', '94', '},', '""weather""', ':', '[', ""// CAN'T ACCESS THIS CORRECTLY"", '{', '""id""', ':', '800', ',', '""main""', ':', '""Clear""', ',', '""description""', ':', '""clear sky""', ',', '""icon""', ':', '""01d""', '}', '],', '""base""', ':', '""stations""', ',', '""main""', ':', '{', '""temp""', ':', '306', '.', '46', ',', '""pressure""', ':', '1014', ',', '""humidity""', ':', '55', ',', '""temp_min""', ':', '306', '.', '15', ',', '""temp_max""', ':', '307', '.', '15', '},', '""visibility""', ':', '16093', ',', '""wind""', ':', '{', '""speed""', ':', '5', '.', '1', ',', '""deg""', ':', '150', ',', '""gust""', ':', '7', '.', '2', '},', '""clouds""', ':', '{', '""all""', ':', '1', '},', '""dt""', ':', '1499120100', ',', '""sys""', ':', '{', '""type""', ':', '1', ',', '""id""', ':', '2597', ',', '""message""', ':', '0', '.', '0225', ',', '""country""', ':', '""US""', ',', '""sunrise""', ':', '1499081152', ',', '""sunset""', ':', '1499132486', '},', '""id""', ':', '0', ',', '""name""', ':', '""Fort Worth""', ',', '""cod""', ':', '200', '}']"
1782,44979398,". The Problem is that this Field is not public... Moreover, the .../rpc/server.go uses sync.Map which does not compile. My Version of Golang is too old? :)

Seems that for now the easiest Way is to manipulate a global Counter from all the RPC Action Functions. :-) If you know a better Solution, please, tell me. Thanks. :-)
","['I', 'am', 'writing', 'a', 'Shutdown', 'Handler', 'for', 'a', 'Program', 'which', 'uses', ""Golang's"", 'built-in', 'JSON-RPC', 'Server', 'and', 'I', 'have', 'faced', 'a', 'difficulty.', 'Could', 'you', 'help', 'me', 'with', 'it?', 'I', 'stop', 'accepting', 'incomming', 'Connections,', 'stop', 'accepting', 'incoming', 'Requests', 'for', 'existing', 'Connections', '(send', 'an', 'Error,', 'to', 'be', 'true)', 'but', 'I', 'have', 'a', 'Moment', 'which', 'I', 'can', 'not', 'control', 'or,', 'at', 'least,', 'I', 'do', 'not', 'know', 'how', 'to', 'control.', 'The', 'Question', 'is:', 'How', 'do', 'I', 'guarantee', 'that', 'Results', 'of', 'exisiting', 'Requests', 'of', 'existing', 'Connections', 'are', 'given', 'to', 'Clients', 'of', ""Golang's"", 'built-in', 'JSON-RPC', 'Server?', 'I', 'want', 'to', 'control', 'that', 'Structure', 'which', 'calls', 'RPC', 'Methods,', 'but', 'it', 'is', 'not', 'in', 'my', 'Code.', 'For', 'Example,', 'I', 'have', 'an', 'RPC', 'Action', ""'User.Get'."", 'I', 'have', 'a', 'function', 'named', ""'Get'"", 'which', 'I', 'control.', 'How', 'do', 'I', 'control', 'the', 'Code', 'which', 'starts', 'this', ""'Get'"", 'function?', 'Do', 'I', 'have', 'to', 'modify', ""Google's"", 'RPC', 'Server', 'or', 'is', 'there', 'any', 'more', 'effecient', 'way?', 'Maybe,', 'there', 'is', 'some', 'Variable', 'in', 'RPC', 'Server', 'which', 'holds', 'the', 'Number', 'of', 'active', 'Requests', 'being', 'processed?', 'I', 'see', 'a', 'NumCalls()', 'and', 'numCalls', 'in', 'the', 'methodType', 'in', 'https', '://', 'go', 'lang', '.', 'org/src/net/rpc/server.go', '.', 'The', 'Problem', 'is', 'that', 'this', 'Field', 'is', 'not', 'public...', 'Moreover,', 'the', '.../rpc/server.go', 'uses', 'sync.Map', 'which', 'does', 'not', 'compile.', 'My', 'Version', 'of', 'Golang', 'is', 'too', 'old?', ':)', 'Seems', 'that', 'for', 'now', 'the', 'easiest', 'Way', 'is', 'to', 'manipulate', 'a', 'global', 'Counter', 'from', 'all', 'the', 'RPC', 'Action', 'Functions.', ':-)', 'If', 'you', 'know', 'a', 'better', 'Solution,', 'please,', 'tell', 'me.', 'Thanks.', ':-)']"
1783,44986977,"

These are my data types, currently I have a function called LoadData and LookupPostCode(). Ideally I would want to import my package and it would automatically load the data if it was not already loaded.
","['I', 'am', 'writing', 'a', 'post', 'code', 'location', 'lookup', 'package,', 'it', 'loads', 'in', 'all', 'uk', 'postcodes', 'from', 'a', 'csv,', 'I', 'would', 'like', 'to', 'only', 'load', 'the', 'data', 'once', 'I', 'would', 'like', 'to', 'know', 'what', 'is', 'the', 'best', 'pattern', 'to', 'achieve', 'this', 'with', 'Go.', 'type', 'Location', 'struct', '{', 'Latitude', 'float64', 'Longitude', 'float64', '}', 'var', 'postCodeCache', '=', 'make', '(', 'map', '[', 'string', ']', 'Location', ')', 'These', 'are', 'my', 'data', 'types,', 'currently', 'I', 'have', 'a', 'function', 'called', 'LoadData', 'and', 'LookupPostCode().', 'Ideally', 'I', 'would', 'want', 'to', 'import', 'my', 'package', 'and', 'it', 'would', 'automatically', 'load', 'the', 'data', 'if', 'it', 'was', 'not', 'already', 'loaded.']"
1784,45024152," What exactly do I need to change?
","[""I'm"", 'trying', 'refactor', 'some', 'code', 'to', 'use', 'dependency', 'injection', 'for', 'the', 'Docker', 'client', 'library', 'I', 'use', 'in', 'my', 'code.', 'I', 'created', 'an', 'interface', 'with', 'the', 'method', 'I', 'want', 'to', 'be', 'able', 'to', 'mock', 'type', 'DockerClient', 'interface', '{', 'Ping', '(', 'context', '.', 'Context', ')', '(', 'type', 's', '.', 'Ping', ',', 'error', ')', '}', 'func', 'NewDockerUtil', '()', '(*', 'DockerUtil', ',', 'error', ')', '{', 'var', 'dockerClient', '*', 'DockerClient', 'var', 'err', 'error', 'dockerClient', ',', 'err', '=', 'client.NewEnvClient()', '//Reports incompatible types in binary and unary expressions.', 'if', 'err', '!=', 'nil', '{', 'return', 'nil', ',', 'err', '}', 'return', '&', 'DockerUtil', '{', 'Client', ':', 'dockerClient', ',', '},', 'nil', '}', 'type', 'DockerUtil', 'struct', '{', 'Client', '*', 'DockerClient', '}', 'But', 'when', 'I', 'try', 'to', 'assign', 'it', 'I', 'get', 'Reports', 'incompatible', 'type', 's', 'in', 'binary', 'and', 'unary', 'expressions', '.', 'What', 'exactly', 'do', 'I', 'need', 'to', 'change?']"
1785,45075598,"I tried to delete the DocumentDBDefaultIndex manually through mongo shell and also through my GO code but it still exists. I don't want to have those default indexes lying around which would consume unnecessary space; I actually only need some _id, unique and text indexes.
","['I', 'tried', 'to', 'delete', 'the', 'DocumentDBDefaultIndex', 'manually', 'through', 'mongo', 'shell', 'and', 'also', 'through', 'my', 'GO', 'code', 'but', 'it', 'still', 'exists.', 'I', ""don't"", 'want', 'to', 'have', 'those', 'default', 'indexes', 'lying', 'around', 'which', 'would', 'consume', 'unnecessary', 'space;', 'I', 'actually', 'only', 'need', 'some', '_id,', 'unique', 'and', 'text', 'indexes.']"
1786,45088229,"

If it was simple and easy to implement. I imagined it would already exist in the standard. However, it never hurts to get the advice from more seasoned professionals as to if what I am attempting to do is even possible.

Thank you for you time.
","['I', 'have', '3', 'slices', '(foos,', 'bars,', 'bazs)', 'that', 'are', 'each', 'populated', 'with', 'a', 'different', 'type', 'of', 'struct.', 'In', 'an', 'attempt', 'to', 'remove', 'some', 'boilerplate', 'code,', 'I', 'wanted', 'to', 'create', 'a', 'generic', 'remove(slice,', 'struct)', 'slice', 'function.', 'Similar', 'to', 'being', 'the', 'opposite', 'of', 'append()', 'provided', 'in', 'the', 'standard.', 'None', 'of', 'the', 'structs', 'will', 'be', 'pointers', 'so', ""there's"", 'no', 'need', 'to', 'nil', 'them.', ""I've"", 'flirted', 'with', 'the', 'idea', 'of', 'using', 'interface{}', 'to', 'get', 'the', 'desired', 'result', 'to', 'no', 'avail.', 'Current', 'implementation', 'uses', 'a', 'Type', 'Switch', 'and', 'then', 'has', 'a', 'near', 'copy-pasted', 'remove()', '(example', 'in', 'playground', 'link', 'below)', 'to', 'delete', 'from', 'the', 'slice.', 'As', 'I', 'continue', 'to', 'expand', 'the', 'project-', 'it', 'will', 'grow', 'to', 'more', 'boilerplate.', 'Example', 'of', 'what', 'is', 'being', 'attempted:', 'https://play.golang.org/p/9UPRIIp5M2', 'Function', 'input', ':', '[]', 'slices', ',', 'struct', 'Expected', 'output', ':', 'Modified', '(', 'removed', 'struct', ')', '[]', 'slices', 'if', 'struct', 'is', 'found', 'Or', ',', 'Unmodified', '[]', 'slices', 'if', 'it', 'isn', 't', '.', 'If', 'it', 'was', 'simple', 'and', 'easy', 'to', 'implement.', 'I', 'imagined', 'it', 'would', 'already', 'exist', 'in', 'the', 'standard.', 'However,', 'it', 'never', 'hurts', 'to', 'get', 'the', 'advice', 'from', 'more', 'seasoned', 'professionals', 'as', 'to', 'if', 'what', 'I', 'am', 'attempting', 'to', 'do', 'is', 'even', 'possible.', 'Thank', 'you', 'for', 'you', 'time.']"
1787,45108286,"
","['guys!', 'I', 'need', 'help.', 'I', 'tried', 'to', 'create', 'a', 'new', 'sftp', 'connection', 'over', 'existing', 'ssh', 'client', 'that', 'i', 'made', 'few', 'minutes', 'ago.', 'I', ""can't."", 'And', 'idk', 'why.', 'Here', 'is', 'a', 'pie', 'of', 'code:', 'config', ':=', '&', 'ssh', '.', 'ClientConfig', '{', 'User', ':', '*', 'loginArg', ',', 'Auth', ':', '[]', 'ssh', '.', 'AuthMethod', '{', 'ssh.Password(*passArg)', ',', '},', 'HostKeyCallback', ':', 'func', '(', 'hostname', 'string', ',', 'remote', 'net', '.', 'Addr', ',', 'key', 'ssh', '.', 'PublicKey', ')', 'error', '{', 'return', 'nil', '},', '}', 'addr', ':=', 'fmt.Sprintf(""%s:%d"", *ipArg, *portArg)', 'client', ',', 'err', ':=', 'ssh.Dial(""tcp"", addr, config)', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""Failed to dial: %s"", err)', '}', 'fmt.Println(""Successfully connected to "", *ipArg, "":"", *portArg)', 'session', ',', 'err', ':=', 'client.NewSession()', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""Failed to create a new session: %s"", err)', '}', 'defer', 'session.Close()', 'b', ',', 'err', ':=', 'session.CombinedOutput(""/system backup save name=BackUp dont-encrypt=yes"")', '// /system backup save name=BackUp dont-encrypt=yes', 'if', 'err', '!=', 'nil', '{', 'fmt.Printf(""Failed to send output command: %s"", err)', '}', 'fmt.Print(string(b))', '//', '*******************', 'var', 'conn', '*', 'ssh', '.', 'Client', 'sftp', ',', 'err', ':=', 'sftp.NewClient(conn)', '//', 'sftp,', 'err', ':=', 'sftp.NewClient(conn)', 'err', 'if', 'err', '!=', 'nil', '{', 'log.Fatal(err) //fmt.Printf(""Failed to create new sftp-client: %s"", err)', '}', 'defer', 'sftp.Close()']"
1788,45207920,"

str1 value comes from HTTP response, but read using ioutils.ReadAll, hence it contains the complete response.
","['How', 'does', 'golang', 'type', 'cast', 'internally', 'work?', 'What', 'is', 'the', 'memory', 'utilisation', 'for', 'a', 'type', 'cast?', 'For', 'example:', 'var', 'str1', 'string', 'str1', '=', '""26MB string data""', 'byt', ':=', '[]', 'byte', '(', 'str1', ')', 'str2', ':=', 'string', '(', 'byt', ')', 'whenever', 'I', 'type', 'cast', 'any', 'variable,', 'will', 'it', 'consume', 'more', 'memory?', 'Iam', 'concerned', 'about', 'this', 'because', 'when', 'I', 'try', 'to', 'unmarshall,', 'I', 'get', '""fatal', 'error:', 'runtime:', 'out', 'of', 'memory""', 'err', '=', 'json.Unmarshal([]byte(str1), &obj)', 'str1', 'value', 'comes', 'from', 'HTTP', 'response,', 'but', 'read', 'using', 'ioutils.ReadAll,', 'hence', 'it', 'contains', 'the', 'complete', 'response.']"
1789,45299133,"

By this way, I can only get o[""ret""]. What I really want is o[""ret""][""alias""] or o[""ret""][""all_parents""].

Any suggestions or tips will helps. Thanks.
","['How', 'can', 'I', 'map', 'each', 'element', 'to', 'struct', 'or', 'map.', 'Base', 'on', 'the', 'json', 'data', 'that', 'has', 'different', 'types.', '{', 'profile', ':', '{', 'execution_time', ':', '34', ',', 'server_name', ':', '""myServer.net""', '},', 'result', ':', '""ok""', ',', 'ret', ':', '[', '{', 'alias', ':', '""asda444444""', ',', 'all_parents', ':', '[', '123', ',', '2433369', ',', '243628', ',', '2432267', ',', '62', '],', 'bankrupt', ':', 'false', ',', 'block', ':', 'false', ',', 'card', ':', 'null', '}', ']', '}', 'I', 'had', 'tried', 'this', 'already.', 'But', 'not', 'work', 'as', 'expected.', 'var', 'o', 'map', '[', 'string', ']', 'interface', '{}', 'err', ':=', 'json.Unmarshal(data, &o)', 'if', 'err', '!=', 'nil', '{', 'revel', '.', 'INFO.Println(""Json Decode Error"", err)', '}', 'fmt.Println(o)', 'By', 'this', 'way,', 'I', 'can', 'only', 'get', 'o[""ret""].', 'What', 'I', 'really', 'want', 'is', 'o[""ret""][""alias""]', 'or', 'o[""ret""][""all_parents""].', 'Any', 'suggestions', 'or', 'tips', 'will', 'helps.', 'Thanks.']"
1790,45308108,"

So, based in this error, to me looks like the HTTP proxy  made by caddy is losing the HTTPS. What can I do?
","['I', 'am', 'working', 'with', 'a', 'Golang', 'app', 'and', 'Caddy', 'as', 'the', 'HTTP', 'server.', 'The', 'golang', 'app', 'rejects', 'every', 'http', 'connection,', 'it', 'only', 'can', 'be', 'used', 'over', 'HTTPS.', 'This', 'app', 'is', 'a', 'kind', 'of', 'API/service', 'that', 'is', 'consumed', 'by', 'other', 'apps.', 'As,', 'it', 'requires', 'HTTPS', 'I', 'installed', 'Caddy', 'so', 'I', 'can', 'take', 'advantage', 'of', 'the', 'automatic', 'SSL', 'certificate', 'and', 'use', 'proxy', 'to', 'switch', 'between', 'the', 'ports.', 'The', 'application', 'is', 'running', 'in', 'the', 'port', '9000,', 'so,', 'the', 'consumers', 'will', 'only', 'writte', 'mysite.com', 'and', 'caddy', 'should', 'be', 'in', 'charge', 'of', 'redirect', 'that', 'petitions', 'to', 'the', 'port', '9000', 'but', 'maintaining', 'the', 'HTTPS.', 'The', 'configuration', 'in', 'caddy', 'for', 'the', 'site', 'is:', 'mysite', '.', 'com', '{', 'proxy', '/', ':', '9000', '{', 'max_fails', '1', '}', 'log', 'logfile', '}', 'Nevertheless,', 'it', 'seems', 'like', 'when', 'the', 'proxy', 'is', 'made', 'the', 'HTTPS', 'is', 'lost.', 'I', 'checked', 'the', 'logs', 'for', 'the', 'application', '(no', 'the', 'logs', 'of', 'caddy)', 'and', 'I', 'get', 'this:', 'http', ':', 'TLS', 'handshake', 'error', 'from', 'xxx', '.', 'xxx', '.', 'xxx', '.', 'xxx', ':', 'xxxx', ':', 'tls', ':', 'oversized', 'record', 'received', 'with', 'length', '21536', 'So,', 'based', 'in', 'this', 'error,', 'to', 'me', 'looks', 'like', 'the', 'HTTP', 'proxy', 'made', 'by', 'caddy', 'is', 'losing', 'the', 'HTTPS.', 'What', 'can', 'I', 'do?']"
1791,45309657,"

The one-page.css is executed but not the bootstrap.
","['I', 'am', 'trying', 'to', 'render', 'a', 'template', 'using', 'the', 'html/template', 'module', 'of', 'Golang.', 'But', 'only', 'CSS', 'files', 'and', 'images', 'from', 'the', 'same', 'folder', 'as', 'the', 'page', 'i', 'am', 'rendering', 'are', 'executed,', 'those', 'located', 'in', 'a', 'different', 'folder', 'are', 'ignored.', 'Here', 'is', 'my', 'code:', 'func', 'render', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'filename', 'string', ',', 'data', 'interface', '{})', '{', 'tmpl', ',', 'err', ':=', 'template.ParseFiles(filename)', 'if', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), http.StatusInternalServerError)', '}', 'if', 'err', ':=', 'tmpl.Execute(w, data)', ';', 'err', '!=', 'nil', '{', 'http.Error(w, err.Error(), http.StatusInternalServerError)', '}', '}', 'For', 'this', 'page', 'for', 'example:', 'Start', 'Connect', 'The', 'one-page.css', 'is', 'executed', 'but', 'not', 'the', 'bootstrap.']"
1792,45317074,"

I know that they make empty []int but I wonder, is one syntax preferable to the others? Personally I find the first to be most readable but that's beside the point here. One key point of contention may be the array capacity, presumably the default capacity is the same between the three as it is unspecified. Is declaring arrays of unspecified capacity ""bad""? I can assume it comes with some performance cost but how ""bad"" is it really?


  /tldr



Is there any difference between the 3 ways to make an empty
array? 
What is the default capacity of an array when unspecified?
What is the performance cost of using arrays with unspecified capacity?

","[""I'm"", 'wondering', 'about', 'best', 'practices', 'when', 'initializing', 'empty', 'arrays.', 'i.e.', 'Is', 'there', 'any', 'difference', 'here', 'between', 'arr1,', 'arr2,', 'and', 'arr3?', 'myArr1', ':=', '[]', 'int', '{}', 'myArr2', ':=', 'make', '([]', 'int', ',', '0', ')', 'var', 'myArr3', '[]', 'int', 'I', 'know', 'that', 'they', 'make', 'empty', '[]int', 'but', 'I', 'wonder,', 'is', 'one', 'syntax', 'preferable', 'to', 'the', 'others?', 'Personally', 'I', 'find', 'the', 'first', 'to', 'be', 'most', 'readable', 'but', ""that's"", 'beside', 'the', 'point', 'here.', 'One', 'key', 'point', 'of', 'contention', 'may', 'be', 'the', 'array', 'capacity,', 'presumably', 'the', 'default', 'capacity', 'is', 'the', 'same', 'between', 'the', 'three', 'as', 'it', 'is', 'unspecified.', 'Is', 'declaring', 'arrays', 'of', 'unspecified', 'capacity', '""bad""?', 'I', 'can', 'assume', 'it', 'comes', 'with', 'some', 'performance', 'cost', 'but', 'how', '""bad""', 'is', 'it', 'really?', '/tldr', 'Is', 'there', 'any', 'difference', 'between', 'the', '3', 'ways', 'to', 'make', 'an', 'empty', 'array?', 'What', 'is', 'the', 'default', 'capacity', 'of', 'an', 'array', 'when', 'unspecified?', 'What', 'is', 'the', 'performance', 'cost', 'of', 'using', 'arrays', 'with', 'unspecified', 'capacity?']"
1793,45361846,"
","[""I'm"", 'trying', 'to', 'setup', 'docker', '&', 'compose', 'for', 'running', 'integration', 'tests', 'I', 'have', 'the', 'following', 'docker-compose.yml', 'version', ':', ""'3'"", 'services', ':', 'tests', ':', 'build', ':', 'context', ':', '.', 'dockerfile', ':', 'Dockerfile', '.', 'tests', 'links', ':', '-', 'web', '-', 'maindb', 'web', ':', 'build', ':', 'context', ':', '.', 'dockerfile', ':', 'Dockerfile', '.', 'web', 'ports', ':', '-', '""8080:8080""', 'volumes', ':', '-', '.:/', 'code', '-', 'logvolume01', ':/', 'var', '/', 'log', 'links', ':', '-', 'maindb', 'maindb', ':', 'image', ':', 'postgres', 'environment', ':', 'POSTGRES_PASSWORD', ':', 'example', 'volumes', ':', 'logvolume01', ':', '{}', 'web', 'container', 'itself', 'works', 'pretty', 'fine', '$', 'docker', '-', 'compose', '-', 'p', 'wh', 'run', 'web', 'Starting', 'wh_maindb_1', '...', 'done', '2017/07/27 22:05:34 [I] http server Running on http://:8080', 'But', 'when', 'I', 'run', 'tests', 'container,', 'I', 'get', 'the', 'error', '$', 'docker', '-', 'compose', '-', 'p', 'wh', 'run', 'tests', 'Starting', 'wh_maindb_1', '...', 'done', 'Starting', '6', 'faff07f7671_6faff07f7671_wh_web_1', '...', 'Starting', '6', 'faff07f7671_6faff07f7671_wh_web_1', '...', 'error', 'ERROR', ':', 'for', '6', 'faff07f7671_6faff07f7671_wh_web_1', 'Cannot', 'start', 'service', 'web', ':', 'oci', 'runtime', 'error', ':', 'container_linux', '.', 'go', ':', '262', ':', 'starting', 'container', 'process', 'caused', '""exec: \\""', 'web', '"": executable file not found in $PATH""', 'Here', 'is', 'my', 'Dockerfile.web', '$', 'cat', 'Dockerfile', '.', 'web', 'FROM', 'ubuntu', ':', 'xenial', 'WORKDIR', '/', 'app', 'ADD', 'bin/* /app/', 'CMD', '[', '""/app/web""', ']', '/app/web', 'is', 'dynamically', 'linked', 'daemon', 'written', 'in', 'Golang', '1.6', 'And', 'some', 'version', 'info', '$', 'docker', 'version', 'Client', ':', 'Version', ':', '17', '.', '06', '.', '0', '-', 'ce', 'API', 'version', ':', '1', '.', '30', 'Go', 'version', ':', 'go', '1', '.', '8', '.', '3', 'Git', 'commit', ':', '02', 'c1d87', 'Built', ':', 'Fri', 'Jun', '23', '21', ':', '23', ':', '31', '2017', 'OS/Arch:      linux/amd64', 'Server', ':', 'Version', ':', '17', '.', '06', '.', '0', '-', 'ce', 'API', 'version', ':', '1.30 (minimum version 1.12)', 'Go', 'version', ':', 'go', '1', '.', '8', '.', '3', 'Git', 'commit', ':', '02', 'c1d87', 'Built', ':', 'Fri', 'Jun', '23', '21', ':', '19', ':', '04', '2017', 'OS/Arch:      linux/amd64', 'Experimental', ':', 'false', '$', 'docker', '-', 'compose', 'version', 'docker', '-', 'compose', 'version', '1', '.', '14', '.', '0', ',', 'build', 'c7bdf9e', 'docker', '-', 'py', 'version', ':', '2', '.', '4', '.', '2', 'CPython', 'version', ':', '2', '.', '7', '.', '12', 'OpenSSL', 'version', ':', 'OpenSSL', '1', '.', '0', '.', '2', 'g', '1', 'Mar', '2016']"
1794,45368284,"

The challenge here is that since the first process is not a child process of the second one, it does not wait and directly exits. 
Please let me know if anyone has any ideas around this.

Thanks.
","['Hi', 'I', 'am', 'working', 'on', 'a', 'simple', 'code', 'that', 'will', 'monitor', 'a', 'process', 'and', 'restart', 'the', 'process', 'in', 'case', 'the', 'process', 'crashes.', 'I', 'have', 'written', 'a', 'small', 'sample', 'code.', 'This', 'is', 'my', 'external', 'process', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'main', '()', '{', 'for', '{', 'time.Sleep(1000 * time.Millisecond)', 'fmt.Println(""hello"")', '}', '}', 'This', 'is', 'the', 'code', 'that', 'monitors', 'it.', 'package', 'main', 'import', '(', '""fmt""', '""os""', ')', 'func', 'main', '()', '{', 'p', ',', 'e', ':=', 'os.FindProcess()', 'fmt.Println(e)', 'fmt.Println(p.Wait())', 'fmt.Println(""done"")', '}', 'The', 'challenge', 'here', 'is', 'that', 'since', 'the', 'first', 'process', 'is', 'not', 'a', 'child', 'process', 'of', 'the', 'second', 'one,', 'it', 'does', 'not', 'wait', 'and', 'directly', 'exits.', 'Please', 'let', 'me', 'know', 'if', 'anyone', 'has', 'any', 'ideas', 'around', 'this.', 'Thanks.']"
1795,45388814,"
","['What', 'is', 'the', 'use', 'case/advantage', 'of', 'defining', 'a', 'function', 'within', 'a', 'structure', 'in', 'go?', 'type', 'demo', 'struct', '{', 'F', 'func', '()', '}']"
1796,45427963,"
","['Can', 'you', 'read', 'a', 'goroutine', 'channel', 'into', 'nothing?', 'where', 'does', 'this', 'channel', 'read', 'go', 'to', 'in', 'this', 'statement?', 'go', 'func', '()', '{', '<-', 'ctx.Done()', 'logger.Errorf(""canceled: %v"", ctx.Err())', '}()', 'Addition:', 'Would', 'this', 'code', 'be', 'any', 'different', 'than', 'if', 'I', 'used', 'the', 'blank', 'identifier', 'go', 'func', '()', '{', '_', '=', '<-', 'ctx.Done()', 'logger.Errorf(""canceled: %v"", ctx.Err())', '}()']"
1797,45443848,"I'm building an application that will be downloading roughly 5000 CSV files concurrently using go routines and plain ol http get requests. Downloading the files in parallel.

I'm currently running into open file limits imposed by OS X.

The CSV files are served over http. Are there any other network protocols that I can use to batch each request into one? I don't have access to the server, so I can't zip them. I'd also prefer not to change the ulimit because once in production, I probably won't have access to that configuration.
","[""I'm"", 'building', 'an', 'application', 'that', 'will', 'be', 'downloading', 'roughly', '5000', 'CSV', 'files', 'concurrently', 'using', 'go', 'routines', 'and', 'plain', 'ol', 'http', 'get', 'requests.', 'Downloading', 'the', 'files', 'in', 'parallel.', ""I'm"", 'currently', 'running', 'into', 'open', 'file', 'limits', 'imposed', 'by', 'OS', 'X.', 'The', 'CSV', 'files', 'are', 'served', 'over', 'http.', 'Are', 'there', 'any', 'other', 'network', 'protocols', 'that', 'I', 'can', 'use', 'to', 'batch', 'each', 'request', 'into', 'one?', 'I', ""don't"", 'have', 'access', 'to', 'the', 'server,', 'so', 'I', ""can't"", 'zip', 'them.', ""I'd"", 'also', 'prefer', 'not', 'to', 'change', 'the', 'ulimit', 'because', 'once', 'in', 'production,', 'I', 'probably', ""won't"", 'have', 'access', 'to', 'that', 'configuration.']"
1798,45444880,"

...etc
","[""I'm"", 'very', 'new', 'to', 'go', 'and', ""I'm"", 'not', 'sure', 'why', 'this', 'code', 'has', 'this', 'output.', 'I', 'understand', 'that', 'sleep', 'will', 'cause', 'the', 'new', 'goroutine', 'to', 'start', 'the', 'other', 'thread', 'for', 'the', 'specified', 'amount', 'of', 'time.', ""I'm"", 'trying', 'to', 'sequentially', 'map', 'out', 'the', 'logic', 'and', 'it', 'looks', 'like', '""world""', 'should', 'always', 'print', 'before', '""hello"".', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'func', 'say', '(', 's', 'string', ')', '{', 'for', 'i', ':=', '0', ';', 'i', '<', '5', ';', 'i', '++', '{', 'time.Sleep(1 * time.Millisecond)', 'fmt.Println(s, i)', '}', '}', 'func', 'main', '()', '{', 'go', 'say', '(', '""world""', ')', 'say', '(', '""hello""', ')', '}', 'Actual', 'Output:', 'world', '0', 'hello', '0', 'hello', '1', 'world', '1', 'world', '2', 'hello', '2', 'hello', '3', 'world', '3', 'world', '4', 'hello', '4', 'Expected', 'Output:', 'world', '0', 'hello', '0', 'world', '1', 'hello', '1', 'world', '2', 'hello', '2', '...etc']"
1799,45596789,"

but it won't work, since 4 * len(mySlice) is not a constant.

Thank you.
","['I', 'have', 'slices', 'of', 'different', 'types,', 'and', 'I', 'need', 'to', 'send', 'them', 'with', 'TCP.', 'The', 'length', 'of', 'my', 'slices', 'is', 'large,', 'and', 'not', 'a', 'constant', 'value.', 'Is', 'there', 'any', 'way', 'that', 'I', 'can', 'convert', 'the', 'slices', 'into', '[]byte', 'without', 'looping', 'through', 'individual', 'elements?', 'For', 'example,', 'I', 'want', 'something', 'like', 'this', '(assuming', 'mySlice', 'elements', 'are', '4', 'Bytes', 'here):', 'byteSlice', ':=', '(*[', '4', '*', 'len', '(', 'mySlice', ')]', 'byte', ')(', 'unsafe.Pointer(&mySlice[0]))', 'but', 'it', ""won't"", 'work,', 'since', '4', '*', 'len(mySlice)', 'is', 'not', 'a', 'constant.', 'Thank', 'you.']"
1800,45618300,". This happens a lot, sometimes all the fields have this issue, sometimes only some of them, and sometimes none of them for a given request struct. 

The other difference is that the fileDescriptor at the bottom is completely different for the two versions. The Windows version is longer by about 40 lines. 
","['This', 'question', 'is', 'specifically', 'about', 'compiling', 'and', 'using', 'golang', 'protocol', 'buffers', '(with', 'gRPC)', 'on', 'different', 'OS', 'platforms', 'and', 'I', ""haven't"", 'seen', 'any', 'like', 'it.', 'Is', 'it', 'possible', 'to', 'compile', 'a', '.proto', 'file', 'on', 'Windows,', 'and', 'then', 'use', 'the', 'generated', 'file', 'on', 'Linux?', 'Or', 'vice', 'versa?', 'I', 'compiled', 'the', 'same', '.proto', 'file', 'on', 'both', 'Windows', 'and', 'Linux', 'and', 'diff', 'showed', 'different', 'results.', 'One', 'difference', 'is', 'that', 'the', 'Windows', 'compiled', 'version', 'sometimes', 'repeats', 'json', 'in', 'fields', 'of', 'request', 'structs', 'like', 'this:', 'Field1Name', '*', 'type', 'protobuf', ',', 'bytes', ',', '1', ',', 'opt', ',', 'name', '=', 'my_name', ',', 'json', '=', 'myName', '"" json:""', 'my_name', ',', 'omitempty', 'whereas', 'the', 'Linux', 'version', 'is:', 'Field1Name', '*', 'type', 'protobuf', ',', 'bytes', ',', '1', ',', 'opt', ',', 'name', '=', 'my_name', '"" json:""', 'my_name', ',', 'omitempty', '.', 'This', 'happens', 'a', 'lot,', 'sometimes', 'all', 'the', 'fields', 'have', 'this', 'issue,', 'sometimes', 'only', 'some', 'of', 'them,', 'and', 'sometimes', 'none', 'of', 'them', 'for', 'a', 'given', 'request', 'struct.', 'The', 'other', 'difference', 'is', 'that', 'the', 'fileDescriptor', 'at', 'the', 'bottom', 'is', 'completely', 'different', 'for', 'the', 'two', 'versions.', 'The', 'Windows', 'version', 'is', 'longer', 'by', 'about', '40', 'lines.']"
1801,45652560,"

Get compiler error:
cannot use Bar literal (type Bar) as type Foo in assignment:
    Bar does not implement Foo (foo method has pointer receiver)

I understand that compiler is doing some pointer conversion and de-referencing on our behalf in the first scenario. Why doesn't it do the same thing in the second scenario ?
","['I', 'am', 'newbie', 'gopher', 'and', 'trying', 'to', 'get', 'my', 'head', 'around', 'the', 'pointer', 'receivers', 'and', 'interfaces.', 'type', 'Foo', 'interface', '{', 'foo', '()', '}', 'type', 'Bar', 'struct', '{}', 'func', '(', 'b', '*', 'Bar', ')', 'foo', '()', '{}', 'based', 'on', 'the', 'above', 'definitions..', '---', 'Allowed', '---------', 'b', ':=', 'Bar', '{}', 'b.foo()', '---', 'Not', 'allowed', '-----', 'var', 'foo', 'Foo', '=', 'Bar', '{}', 'Get', 'compiler', 'error:', 'cannot', 'use', 'Bar', 'literal', '(type', 'Bar)', 'as', 'type', 'Foo', 'in', 'assignment:', 'Bar', 'does', 'not', 'implement', 'Foo', '(foo', 'method', 'has', 'pointer', 'receiver)', 'I', 'understand', 'that', 'compiler', 'is', 'doing', 'some', 'pointer', 'conversion', 'and', 'de-referencing', 'on', 'our', 'behalf', 'in', 'the', 'first', 'scenario.', 'Why', ""doesn't"", 'it', 'do', 'the', 'same', 'thing', 'in', 'the', 'second', 'scenario', '?']"
1802,45711053,"I'm working on a go project, my task is writing some tests for a package. The tests need to access a global variable in a different package. This global variable might be setup/access in different packages' testing. Because by default go testing runs in parallel for different packages. Therefore, setup/access to this variable might create race conditions. 

The easiest way to synchronize is to create a shared sync.Mutex which spans in the different packages. Having said that, I tried to put this sync.Mutex in the xxx_test.go of xxx.go in which the global variable is declared, unfortunately, another package was not able to access this Mutex due to scope limitation. Eventually, I figured out I have to put this sync.Mutex to a utility package which is dedicated to testing, then different packages can access this Mutex to achieve sync purpose for that global variable.

I'm new to go lang. I just felt it's awkward that I need to create a utility package to just achieve sync purpose in the testing, on the other hand, if another developer does some testing in another package, he/she probably doesn't know where to find this sync.Mutex. Is there any better way to achieve this sync purpose with an elegant solution. 

Many thanks!
","[""I'm"", 'working', 'on', 'a', 'go', 'project,', 'my', 'task', 'is', 'writing', 'some', 'tests', 'for', 'a', 'package.', 'The', 'tests', 'need', 'to', 'access', 'a', 'global', 'variable', 'in', 'a', 'different', 'package.', 'This', 'global', 'variable', 'might', 'be', 'setup/access', 'in', 'different', ""packages'"", 'testing.', 'Because', 'by', 'default', 'go', 'testing', 'runs', 'in', 'parallel', 'for', 'different', 'packages.', 'Therefore,', 'setup/access', 'to', 'this', 'variable', 'might', 'create', 'race', 'conditions.', 'The', 'easiest', 'way', 'to', 'synchronize', 'is', 'to', 'create', 'a', 'shared', 'sync.Mutex', 'which', 'spans', 'in', 'the', 'different', 'packages.', 'Having', 'said', 'that,', 'I', 'tried', 'to', 'put', 'this', 'sync.Mutex', 'in', 'the', 'xxx_test.go', 'of', 'xxx.go', 'in', 'which', 'the', 'global', 'variable', 'is', 'declared,', 'unfortunately,', 'another', 'package', 'was', 'not', 'able', 'to', 'access', 'this', 'Mutex', 'due', 'to', 'scope', 'limitation.', 'Eventually,', 'I', 'figured', 'out', 'I', 'have', 'to', 'put', 'this', 'sync.Mutex', 'to', 'a', 'utility', 'package', 'which', 'is', 'dedicated', 'to', 'testing,', 'then', 'different', 'packages', 'can', 'access', 'this', 'Mutex', 'to', 'achieve', 'sync', 'purpose', 'for', 'that', 'global', 'variable.', ""I'm"", 'new', 'to', 'go', 'lang.', 'I', 'just', 'felt', ""it's"", 'awkward', 'that', 'I', 'need', 'to', 'create', 'a', 'utility', 'package', 'to', 'just', 'achieve', 'sync', 'purpose', 'in', 'the', 'testing,', 'on', 'the', 'other', 'hand,', 'if', 'another', 'developer', 'does', 'some', 'testing', 'in', 'another', 'package,', 'he/she', 'probably', ""doesn't"", 'know', 'where', 'to', 'find', 'this', 'sync.Mutex.', 'Is', 'there', 'any', 'better', 'way', 'to', 'achieve', 'this', 'sync', 'purpose', 'with', 'an', 'elegant', 'solution.', 'Many', 'thanks!']"
1803,45718580,"
","[""I've"", 'a', 'game', 'analytics', 'rest', 'API', 'which', 'stores', 'the', 'average', 'performance', 'statistics', 'of', 'the', 'players.', 'When', 'a', 'new', 'statistic', 'arrives,', 'I', 'want', 'to', 'update', 'the', 'existing', 'game', 'record', 'in', 'Mongodb', 'by', 'merging', 'the', 'new', 'delta', 'onto', 'the', 'existing', 'document.', ""I'm"", 'storing', 'the', 'past', 'analytics', 'data', 'as', 'well.', 'So', 'that,', 'I', 'can', 'return', 'data', 'like', 'the', ""player's"", 'stats', 'are', 'decreasing', 'or', 'increasing', 'since', 'the', ""game's"", 'last', 'update.', 'The', 'problem', 'is:', 'When', 'I', 'want', 'to', 'upsert', 'my', 'new', 'game', 'data', 'into', 'Mongodb', 'with', 'mgo,', 'it', 'overwrites', 'all', 'of', 'a', ""player's"", 'stats', 'array.', 'Actually,', 'this', 'is', 'expected.', 'I', 'know', 'how', 'to', 'fix', 'it', 'if', 'I', 'can', 'modify', 'my', 'document', 'that', 'mgo', 'tries', 'to', 'upsert', 'into', 'Mongodb.', 'Question:', 'How', 'can', 'I', 'customize', 'mgo', 'upsert', 'behaviour?', 'So', 'that', 'I', 'can', 'add', 'a', '$push', 'operator', 'in', 'front', 'of', 'Player.Stats', 'to', 'prevent', 'Mongodb', 'erasing', 'the', 'stats', 'array', 'inside', 'the', 'document.', 'My', 'Real', 'Question:', 'It', ""doesn't"", 'matter', 'which', 'Mongo', 'commands', ""I'm"", 'going', 'to', 'use.', ""I'll"", 'figure', 'it', 'out', 'somehow.', 'What', 'I', 'actually', 'want', 'to', 'know', 'is:', 'How', 'can', 'I', 'customize', 'the', 'behaviour', 'of', 'mgo', 'before', 'upsert?', 'Some', 'Solutions:', ""I've"", 'tried', 'some', 'solutions', 'myself', 'before.', 'Like,', 'encoding/decoding', 'Game', 'struct', 'into', 'bson.M', 'to', 'customize', 'it.', 'However,', 'I', 'found', 'it', 'cumbersome', 'and', 'messy.', 'If', ""there's"", 'no', 'other', 'way,', ""I'd"", 'use', 'it.', 'Blocks:', 'I', ""don't"", 'want', 'to', 'hand-write', 'all', 'of', 'my', 'structs', 'fields', 'with', 'bson.M,', 'just', 'to', 'use', 'a', '$push', 'operator', 'on', 'one', 'field.', 'Because', 'there', 'are', 'dozens', 'of', 'fields,', 'that', 'would', 'be', 'error-prone', 'and', 'will', 'increase', 'my', 'code', 'complexity.', 'Example:', '//', 'Assume', 'that,', 'this', 'is', 'an', 'existing', 'game', 'in', 'Mongodb:', 'existingGame', ':=', 'Game', '{', 'ID', ':', '1', ',', 'Name', ':', '""Existing game""', ',', '//', 'The', 'game', 'has', 'just', 'one', 'player', 'Players', ':', '[]', 'Player', '{', '//', 'The', 'player', 'has', 'some', 'stats.', 'The', 'newest', 'one', 'is', '2.0.', '{', '1', ',', '""foo""', ',', '[]{', '3', '.', '5', ',', '2', '.', '0', '}},', '}', '}', '//', 'This', 'is', 'a', 'new', 'request', 'coming', 'to', 'my', 'API', '//', 'I', 'want', 'to', 'upsert', 'this', 'into', 'the', 'existing', 'Game', 'newGame', ':=', 'Game', '{', 'ID', ':', '1', ',', 'Players', ':', '[]', 'Player', '{', '//', 'As', 'expectedly,', 'this', 'will', 'reset', 'player', ""foo's"", 'stats', 'to', '5.0', '//', '//', 'After', 'upserting,', 'I', 'want', 'it', 'to', 'be', 'as:', '//', '//', '[]{3.5,', '2.0,', '5.0}', '//', '//', 'in', 'Mongodb', '{', '1', ',', '""foo""', ',', '[]{', '5', '.', '0', '}},', '}', '}', '//', 'Example', '2:', '//', 'If', 'new', 'Game', 'request', 'like', 'this:', 'newGame', ':=', 'Game', '{', 'ID', ':', '1', ',', 'Players', ':', '[]', 'Player', '{{', '1', ',', '""foo""', ',', '[]{', '5', '.', '0', '},{', '1', ',', '""bar""', ',', '[]{', '6', '.', '7', '}}}}', '//', ""I'm"", 'expecting', 'this', 'result:', 'Game', '{', 'ID', ':', '1', ',', 'Players', ':', '[]', 'Player', '{{', '1', ',', '""foo""', ',', '[]{', '3', '.', '5', ',', '2', '.', '0', ',', '5', '.', '0', '},{', '1', ',', '""bar""', ',', '[]{', '6', '.', '7', '}}}}', 'func', '(', 'db', '*', 'Store', ')', 'Merge', '(', 'newGame', '*', 'Game', ')', 'error', '{', 'sess', ':=', 'db', '.', 'session.Copy()', 'defer', 'sess.Close()', 'col', ':=', 'sess.DB(""foo"").C(""games"")', '//', 'I', 'want', 'to', 'modify', 'newGame', 'here', 'to', 'add', 'a', '$push', 'operator', '//', 'into', 'a', 'new', '`bson.M`', 'or', '`bson.D`', 'to', 'make', 'mgo', 'to', 'upsert', '//', 'my', 'new', 'delta', 'without', 'resetting', 'the', 'player', 'stats', '_', ',', 'err', ':=', 'col.UpsertId(newGame.ID, newGame)', 'return', 'err', '}', 'type', 'Game', 'struct', '{', 'ID', 'int', 'bson', ':', '""_id""', 'Name', 'string', 'Players', '[]', 'Player', 'bson', ':', '"",omitempty""', '//', '...I', 'omitted', 'other', 'details', 'for', 'simplicity', 'here...', '}', 'type', 'Player', 'struct', '{', '//', 'This', 'connects', 'the', 'player', 'to', 'the', 'game', 'GameID', 'int', 'bson', ':', '""game_id""', 'Name', 'string', '//', 'I', 'want', 'to', 'keep', 'the', 'previous', 'values', 'of', 'stats', '//', 'So,', ""that's"", 'why', ""I'm"", 'using', 'an', 'array', 'here', 'Stats', '[]', 'float64', '//', '...', '}', 'I', 'tried', 'this', 'Mongodb', 'command', 'in', 'the', 'console', 'to', 'update', 'the', 'specific', ""game's"", 'player:', 'db', '.', 'competitions', '.', 'update', '({', '_id', ':', '1', ',', '""players.game_id""', ':', '1', '},', '{', '$', 'push', ':', '{', '""players.$.stats""', ':', '3', '}', '},', '{', 'upsert', ':', 'true', '})']"
1804,45741209,"

Example: https://play.golang.org/p/P2FaUwbW-3 
","[""I'm"", 'trying', 'to', 'make', 'a', 'channel', 'with', 'never', 'ending', 'ticker,', 'but', 'it', 'works', 'only', '2', 'times.', 'Could', 'you', 'help', 'me', 'to', 'understand', 'where', 'is', 'the', 'problem?', 'Code:', 'package', 'main', 'import', '(', '""fmt""', '""time""', ')', 'var', 'mark', '=', '[', '2', ']', 'float64', '{', '8', '.', '9876', ',', '762', '.', '0', '98568', '}', 'func', 'tick', '(', 'out', 'chan', '<-', '[', '2', ']', 'float64', '){', 'c', ':=', 'time.NewTicker(time.Millisecond *500)', 'for', 'range', 'c', '.', 'C', '{', 'out', '<-', 'mark', '}', '}', 'func', 'main', '()', '{', 'fmt.Println(""Start"")', 'md', ':=', 'make', '(', 'chan', '[', '2', ']', 'float64', ')', 'go', 'tick', '(', 'md', ')', 'for', 'range', '<-', 'md', '{', 'fmt.Println(<-md)', '}', '}', 'Output:', 'Start', '[', '8', '.', '9876', '762', '.', '0', '98568', ']', '[', '8', '.', '9876', '762', '.', '0', '98568', ']', 'Example:', 'https://play.golang.org/p/P2FaUwbW-3']"
1805,45751869,"

I'm tempted to just slap a short delay on the test and call it a day, but I would like to know why it behaves like this.
","['I', 'have', 'an', 'issue', 'with', ""Go's"", 'http.Server,', 'which', ""I'm"", 'embedding', 'in', 'a', 'struct', 'that', 'is', 'supposed', 'to', 'control', 'the', 'server', 'startup', 'and', 'shutdown.', 'The', 'struct', 'looks', 'like', 'this:', 'type', 'HTTPListen', 'struct', '{', 'Consumers', '[]', 'pipeline', '.', 'Consumer', 'Cfg', 'HTTPListenConfig', 'Srv', '*', 'http', '.', 'Server', 'Logger', 'log', '.', 'Logger', 'wg', '*', 'sync', '.', 'WaitGroup', 'mu', 'sync', '.', 'Mutex', 'state', 'State', '}', 'The', 'issue', 'is', 'that', 'in', 'my', 'test', 'code,', 'I', 'call', 'my', ""struct's"", 'Start()', 'method', '(which', 'in', 'turn', 'runs', 'the', 'Serve()', 'method', 'on', 'the', 'http.Server),', 'check', 'a', 'few', 'vars,', 'and', 'then', 'call', 'Stop(),', 'whitch', 'Shutdown()s', 'the', 'server', 'and', 'then', 'waits', 'for', 'the', 'http.Server', 'to', 'exit', '(return', 'err', 'from', 'the', 'Serve()', 'method).', 'Now,', 'for', 'some', 'reason,', 'the', 'Serve()', 'method', 'seems', 'to', 'just', 'hang', 'on', 'the', 'WaitGroup.Wait(),', 'when', 'I', 'try', 'to', 'shutdown', 'the', 'server', 'immediately', 'after', 'starting.', 'When', 'I', 'add', 'a', 'short', 'pause', '(tried', '100ms),', 'or', 'when', 'running', 'the', 'tests', 'with', 'the', 'race', 'detector,', 'It', 'works', 'just', 'fine.', 'Not', 'sure', 'if', 'it', 'matters,', 'but', 'there', 'are', 'no', 'incoming', 'requests', 'between', 'calling', 'Serve()', 'and', 'Shutdown().', 'EDIT:', 'link', 'to', 'a', 'playground', 'minimal', 'example.', 'If', 'you', 'comment', 'out', 'the', 'time.Sleep', 'call,', 'the', 'program', 'hangs.', 'Here', 'is', 'the', 'relevant', 'code', 'for', 'the', 'two', 'methods:', 'func', '(', 'h', '*', 'HTTPListen', ')', 'Start', '()', 'error', '{', 'h', '.', 'Logger.Log(""msg"", ""starting HTTPListen input"")', 'addr', ':=', 'h', '.', 'Cfg', '.', 'ListenAddr', 'ln', ',', 'err', ':=', 'net.Listen(""tcp"", addr)', 'if', 'err', '!=', 'nil', '{', 'h', '.', 'Logger.Log(""msg"", ""failed to create listener on tcp/""+addr+"": ""+err.Error())', 'h.setState(StateFailed)', 'return', 'err', '}', 'h', '.', 'wg.Add(1)', 'go', 'func', '()', '{', 'defer', 'h', '.', 'wg.Done()', 'err', ':=', 'h', '.', 'Srv.Serve(ln)', 'h', '.', 'Logger.Log(""msg"", ""HTTP server stopped: ""+err.Error())', '}()', 'h.setState(StateStarted)', 'h', '.', 'Logger.Log(""msg"", ""HTTPListen input started"")', 'return', 'nil', '}', 'Stop', 'method:', 'func', '(', 'h', '*', 'HTTPListen', ')', 'Stop', '()', 'error', '{', 'h', '.', 'Logger.Log(""msg"", ""stopping HTTPListen input"")', 'ctx', ',', 'cancel', ':=', 'context.WithTimeout(context.Background(), time.Second*10)', 'defer', 'cancel', '()', 'if', 'err', ':=', 'h', '.', 'Srv.Shutdown(ctx)', ';', 'err', '!=', 'nil', '{', 'h', '.', 'Logger.Log(""msg"", ""HTTP server shutdown deadline expired"")', '}', 'h', '.', 'wg.Wait()', 'h.setState(StateStopped)', 'h', '.', 'Logger.Log(""msg"", ""HTTPListen input stopped"")', 'return', 'nil', '}', 'Log', 'output:', 'kwz', 'cyclone', '/s/stblogd> go test -v ./pkg/pipeline/input/', '-', 'run', 'TestHTTPListen_StartStop', '===', 'RUN', 'TestHTTPListen_StartStop', 'msg', '=', '""starting HTTPListen input""', 'msg', '=', '""HTTPListen input started""', 'msg', '=', '""stopping HTTPListen input""', '...', 'hangs', 'indefinitely', 'Log', 'output', 'when', 'running', 'tests', 'with', 'the', 'race', 'detector:', 'kwz', 'cyclone', '/s/stblogd> go test -race -v ./pkg/pipeline/input/', '-', 'run', 'TestHTTPListen_StartStop', '===', 'RUN', 'TestHTTPListen_StartStop', 'msg', '=', '""starting HTTPListen input""', 'msg', '=', '""HTTPListen input started""', 'msg', '=', '""stopping HTTPListen input""', 'msg', '=', '""HTTP server stopped: http: Server closed""', 'msg', '=', '""HTTPListen input stopped""', '---', 'PASS', ':', 'TestHTTPListen_StartStop', '(', '0', '.', '0', '0', 's', ')', 'PASS', 'ok', 'stblogd/pkg/pipeline/input', '1', '.', '0', '07', 's', ""I'm"", 'tempted', 'to', 'just', 'slap', 'a', 'short', 'delay', 'on', 'the', 'test', 'and', 'call', 'it', 'a', 'day,', 'but', 'I', 'would', 'like', 'to', 'know', 'why', 'it', 'behaves', 'like', 'this.']"
1806,45836683,"

I am trying to understand the reason why this is seen and what did var int int do such that int becomes an unavailable data type.  
","['I', 'am', 'new', 'to', 'Go', 'language', 'and', 'was', 'trying', 'out', 'few', 'examples', 'in', 'GO.', 'In', 'GO', 'int', 'is', 'not', 'a', 'keyword', 'so', 'I', 'declared', 'a', 'variable', 'with', 'name', 'as', 'int.', 'package', 'main', 'import', '""fmt""', 'func', 'main', '()', '{', 'var', 'int', 'int', '=', '8', 'fmt.Println(int)', 'var', 'number', 'int', '=', '10', 'fmt.Println(number)', '}', 'Now', 'when', 'I', 'build', 'this', 'code', 'I', 'get', 'following', 'error:', '[', 'dev', 'go', 'test', ']$', 'go', 'build', 'var', 'iables', '.', 'go', 'command', '-', 'line', '-', 'arguments', './', 'var', 'iables', '.', 'go', ':', '8', ':', 'int', 'is', 'not', 'a', 'type', 'I', 'am', 'trying', 'to', 'understand', 'the', 'reason', 'why', 'this', 'is', 'seen', 'and', 'what', 'did', 'var', 'int', 'int', 'do', 'such', 'that', 'int', 'becomes', 'an', 'unavailable', 'data', 'type.']"
1807,45836767,"

Is there way to do this without an actual File? Like getting a []byte or something?
","['I', 'am', 'using', 'a', 'third', 'party', 'library', 'to', 'generate', 'PDFs.', 'In', 'order', 'to', 'write', 'the', 'PDF', 'at', 'the', 'end', '(after', 'all', 'of', 'content', 'has', 'been', 'added', 'using', 'the', ""lib's"", 'API),', 'the', 'pdfWriter', 'type', 'has', 'a', 'Write', 'function', 'that', 'expects', 'an', 'io.WriteSeeker.', 'This', 'is', 'OK', 'if', 'I', 'want', 'to', 'work', 'with', 'files,', 'but', 'I', 'need', 'to', 'work', 'in-memory.', 'Trouble', 'is,', 'I', ""can't"", 'find', 'any', 'way', 'to', 'do', 'this', '-', 'the', 'only', 'native', 'type', 'I', 'found', 'that', 'implements', 'io.WriteSeeker', 'is', 'File.', 'This', 'is', 'the', 'part', 'that', 'works', 'by', 'using', 'File', 'for', 'the', 'io.Writer', 'in', 'the', 'Write', 'function', 'of', 'the', 'pdfWriter:', 'fWrite', ',', 'err', ':=', 'os.Create(outputPath)', 'if', 'err', '!=', 'nil', '{', 'return', 'err', '}', 'defer', 'fWrite.Close()', 'err', '=', 'pdfWriter.Write(fWrite)', 'Is', 'there', 'way', 'to', 'do', 'this', 'without', 'an', 'actual', 'File?', 'Like', 'getting', 'a', '[]byte', 'or', 'something?']"
1808,45855530,"

I got an error in the logs of:


  error: unexpected end of JSON input
  error: Unmarshal unexpected end of JSON input
  error: unexpected end of JSON input

","['I', 'am', 'trying', 'to', 'decode', 'an', 'array', 'of', 'strings', 'in', 'golang', 'and', 'cannot', 'unmarshall', 'this', 'json', 'in', 'golang', '""{\\""', 'keys', '"":[\\""', 'CovePDF', ':', 'metadata', ':', 'deadlineDate', ':', 'asfsdbdjh', '"",\\""', 'CovePDF', ':', 'metadata', ':', 'endedOnDate', ':', 'asfsdbdjh', '"",\\""', 'CovePDF', ':', 'metadata', ':', 'moderators', ':', 'asfsdbdjh', '"",\\""', 'CovePDF', ':', 'metadata', ':', 'reviewers', ':', 'asfsdbdjh', '"",\\""', 'CovePDF', ':', 'metadata', ':', 'title', ':', 'asfsdbdjh', '"",\\""', 'CovePDF', ':', 'metadata', ':', 'initiator', ':', 'asfsdbdjh', '"",\\""', 'CovePDF', ':', 'metadata', ':', 'startOnDate', ':', 'asfsdbdjh', '""]}""', 'my', 'struct', 'looks', 'like', 'this:', 'type', 'Keys', 'struct', '{', 'keys', '[]', 'string', 'json', ':', '""keys""', '}', 'and', 'than', 'trying', 'to', 'do', 'keys', ':=', 'args', '[', '0', ']', 'ks', ':=', 'Keys', '{}', 'err0', ':=', 'json.Unmarshal([]byte(keys), &ks)', 'I', 'got', 'an', 'error', 'in', 'the', 'logs', 'of:', 'error:', 'unexpected', 'end', 'of', 'JSON', 'input', 'error:', 'Unmarshal', 'unexpected', 'end', 'of', 'JSON', 'input', 'error:', 'unexpected', 'end', 'of', 'JSON', 'input']"
