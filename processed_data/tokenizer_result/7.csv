,text,token
0,"I'm sure that I'm doing something wrong, I have a Go program that parses in 3D models in OBJ format and outputs a json object.  When I run it without adding in goroutines I get the following output:

","[""I'm"", 'sure', 'that', ""I'm"", 'doing', 'something', 'wrong,', 'I', 'have', 'a', 'Go', 'program', 'that', 'parses', 'in', '3D', 'models', 'in', 'OBJ', 'format', 'and', 'outputs', 'a', 'json', 'object.', 'When', 'I', 'run', 'it', 'without', 'adding', 'in', 'goroutines', 'I', 'get', 'the', 'following', 'output:']"
1,$ go run objParser.go ak47.obj extincteur_obj.obj ,"['$', 'go', 'run', 'objParser', '.', 'go', 'ak47', '.', 'obj', 'extincteur_obj', '.', 'obj']"
2,--Creating ak47.json3d from ak47.obj,"['--', 'Creating', 'ak47', '.', 'json3d', 'from', 'ak47', '.', 'obj']"
3,--Exported 85772 faces with 89088 verticies,"['--', 'Exported', '85772', 'faces', 'with', '89088', 'verticies']"
4,--Creating extincteur_obj.json3d from extincteur_obj.obj,"['--', 'Creating', 'extincteur_obj', '.', 'json3d', 'from', 'extincteur_obj', '.', 'obj']"
5,--Exported 150316 faces with 151425 verticies,"['--', 'Exported', '150316', 'faces', 'with', '151425', 'verticies']"
6,Parsed 2 files in 8.4963s,"['Parsed', '2', 'files', 'in', '8', '.', '4963', 's']"
7,"

Then I added in the goroutines and I get this output:

","['Then', 'I', 'added', 'in', 'the', 'goroutines', 'and', 'I', 'get', 'this', 'output:']"
8,$ go run objParser.go ak47.obj extincteur_obj.obj ,"['$', 'go', 'run', 'objParser', '.', 'go', 'ak47', '.', 'obj', 'extincteur_obj', '.', 'obj']"
9,--Creating ak47.json3d from ak47.obj,"['--', 'Creating', 'ak47', '.', 'json3d', 'from', 'ak47', '.', 'obj']"
10,--Creating extincteur_obj.json3d from extincteur_obj.obj,"['--', 'Creating', 'extincteur_obj', '.', 'json3d', 'from', 'extincteur_obj', '.', 'obj']"
11,--Exported 85772 faces with 89088 verticies,"['--', 'Exported', '85772', 'faces', 'with', '89088', 'verticies']"
12,--Exported 150316 faces with 151425 verticies,"['--', 'Exported', '150316', 'faces', 'with', '151425', 'verticies']"
13,Parsed 2 files in 10.23137s,"['Parsed', '2', 'files', 'in', '10', '.', '23137', 's']"
14,"

The order of how it's printed is what I expected given the interlacing of the parsing but I have no idea why it actually takes longer!  The code is pretty long, I snipped what I could but it's still pretty long, sorry about that!

","['The', 'order', 'of', 'how', ""it's"", 'printed', 'is', 'what', 'I', 'expected', 'given', 'the', 'interlacing', 'of', 'the', 'parsing', 'but', 'I', 'have', 'no', 'idea', 'why', 'it', 'actually', 'takes', 'longer!', 'The', 'code', 'is', 'pretty', 'long,', 'I', 'snipped', 'what', 'I', 'could', 'but', ""it's"", 'still', 'pretty', 'long,', 'sorry', 'about', 'that!']"
15,package main,"['package', 'main']"
16,"func parseFile(name string, finished chan int) {","['func', 'parseFile', '(', 'name', 'string', ',', 'finished', 'chan', 'int', ')', '{']"
17,    var Verts []*Vertex,"['var', 'Verts', '[]*', 'Vertex']"
18,    var Texs []*TexCoord,"['var', 'Texs', '[]*', 'TexCoord']"
19,    var Faces []*Face,"['var', 'Faces', '[]*', 'Face']"
20,"    var objFile, mtlFile, jsonFile *os.File","['var', 'objFile', ',', 'mtlFile', ',', 'jsonFile', '*', 'os', '.', 'File']"
21,    var parseMaterial bool,"['var', 'parseMaterial', 'bool']"
22,    // Set up files and i/o,"['//', 'Set', 'up', 'files', 'and', 'i/o']"
23,    inName := name,"['inName', ':=', 'name']"
24,"    outName := strings.Replace(inName, "".obj"", "".json3d"", -1)","['outName', ':=', 'strings.Replace(inName, "".obj"", "".json3d"", -1)']"
25,    parseMaterial = false,"['parseMaterial', '=', 'false']"
26,"    fmt.Printf(""--""+FgGreen+""Creating""+Reset+"" %s from %s\n"", outName, inName)","['fmt.Printf(""--""+FgGreen+""Creating""+Reset+"" %s from %s\\n"", outName, inName)']"
27,    var err error,"['var', 'err', 'error']"
28,    var part []byte,"['var', 'part', '[]', 'byte']"
29,    var prefix bool,"['var', 'prefix', 'bool']"
30,"    if objFile, err = os.Open(inName); err != nil {","['if', 'objFile', ',', 'err', '=', 'os.Open(inName)', ';', 'err', '!=', 'nil', '{']"
31,"        fmt.Println(FgRed+""!!Failed to open input file!!""+Reset)","['fmt.Println(FgRed+""!!Failed to open input file!!""+Reset)']"
32,        return,['return']
33,    },['}']
34,"    if jsonFile, err = os.Create(outName); err != nil {","['if', 'jsonFile', ',', 'err', '=', 'os.Create(outName)', ';', 'err', '!=', 'nil', '{']"
35,"        fmt.Println(FgRed+""!!Failed to create output file!!""+Reset)","['fmt.Println(FgRed+""!!Failed to create output file!!""+Reset)']"
36,        return,['return']
37,    },['}']
38,    reader := bufio.NewReader(objFile),"['reader', ':=', 'bufio.NewReader(objFile)']"
39,    writer := bufio.NewWriter(jsonFile),"['writer', ':=', 'bufio.NewWriter(jsonFile)']"
40,"    buffer := bytes.NewBuffer(make([]byte, 1024))","['buffer', ':=', 'bytes.NewBuffer(make([]byte, 1024))']"
41,    // Read the file in and parse out what we need,"['//', 'Read', 'the', 'file', 'in', 'and', 'parse', 'out', 'what', 'we', 'need']"
42,    for {,"['for', '{']"
43,"        if part, prefix, err = reader.ReadLine(); err != nil {","['if', 'part', ',', 'prefix', ',', 'err', '=', 'reader.ReadLine()', ';', 'err', '!=', 'nil', '{']"
44,            break,['break']
45,        },['}']
46,        buffer.Write(part),['buffer.Write(part)']
47,        if !prefix {,"['if', '!', 'prefix', '{']"
48,            line := buffer.String(),"['line', ':=', 'buffer.String()']"
49,"            if(strings.Contains(line, ""v "")) {","['if', '(', 'strings.Contains(line, ""v ""))', '{']"
50,"                Verts = append(Verts, parseVertex(line))","['Verts', '=', 'append', '(', 'Verts', ',', 'parseVertex', '(', 'line', '))']"
51,"            } else if(strings.Contains(line, ""vt "")) {","['}', 'else', 'if', '(', 'strings.Contains(line, ""vt ""))', '{']"
52,"                Texs = append(Texs, parseTexCoord(line))","['Texs', '=', 'append', '(', 'Texs', ',', 'parseTexCoord', '(', 'line', '))']"
53,"            } else if(strings.Contains(line, ""f "")) {","['}', 'else', 'if', '(', 'strings.Contains(line, ""f ""))', '{']"
54,"                Faces = append(Faces, parseFace(line, Verts, Texs))","['Faces', '=', 'append', '(', 'Faces', ',', 'parseFace', '(', 'line', ',', 'Verts', ',', 'Texs', '))']"
55,"            } else if(strings.Contains(line, ""mtllib "")) {","['}', 'else', 'if', '(', 'strings.Contains(line, ""mtllib ""))', '{']"
56,"                mtlName := strings.Split(line, "" "")[1]","['mtlName', ':=', 'strings.Split(line, "" "")', '[', '1', ']']"
57,"                if mtlFile, err = os.Open(mtlName); err != nil {","['if', 'mtlFile', ',', 'err', '=', 'os.Open(mtlName)', ';', 'err', '!=', 'nil', '{']"
58,"                    fmt.Printf(""--""+FgRed+""Failed to find material file: %s\n""+Reset, mtlName)","['fmt.Printf(""--""+FgRed+""Failed to find material file: %s\\n""+Reset, mtlName)']"
59,                    parseMaterial = false,"['parseMaterial', '=', 'false']"
60,                } else {,"['}', 'else', '{']"
61,                    parseMaterial = true,"['parseMaterial', '=', 'true']"
62,                },['}']
63,            },['}']
64,            buffer.Reset(),['buffer.Reset()']
65,        },['}']
66,    },['}']
67,    if err == io.EOF {,"['if', 'err', '==', 'io', '.', 'EOF', '{']"
68,        err = nil,"['err', '=', 'nil']"
69,    },['}']
70,    objFile.Close(),['objFile.Close()']
71,    // Write out the data,"['//', 'Write', 'out', 'the', 'data']"
72,"    writer.WriteString(""{\""obj\"":[\n"");","['writer.WriteString(""{\\""obj\\"":[\\n"")', ';']"
73,    // Write out the verts,"['//', 'Write', 'out', 'the', 'verts']"
74,"    writer.WriteString(""{\""vrt\"":[\n"");","['writer.WriteString(""{\\""vrt\\"":[\\n"")', ';']"
75,"    for i, vert := range Verts {","['for', 'i', ',', 'vert', ':=', 'range', 'Verts', '{']"
76,        writer.WriteString(vert.String()),['writer.WriteString(vert.String())']
77,"        if i < len(Verts) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Verts', ')', '-', '1', '{', 'writer.WriteString("","")', '}']"
78,"        writer.WriteString(""\n"")","['writer.WriteString(""\\n"")']"
79,    },['}']
80,    // Write out the faces,"['//', 'Write', 'out', 'the', 'faces']"
81,"    writer.WriteString(""],\""fac\"":[\n"")","['writer.WriteString(""],\\""fac\\"":[\\n"")']"
82,"    for i, face := range Faces {","['for', 'i', ',', 'face', ':=', 'range', 'Faces', '{']"
83,        writer.WriteString(face.String(true)),['writer.WriteString(face.String(true))']
84,"        if i < len(Faces) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer.WriteString("","")', '}']"
85,"        writer.WriteString(""\n"")","['writer.WriteString(""\\n"")']"
86,    },['}']
87,    // Write out the normals,"['//', 'Write', 'out', 'the', 'normals']"
88,"    writer.WriteString(""],\""nrm\"":["")","['writer.WriteString(""],\\""nrm\\"":["")']"
89,"    for i, face := range Faces {","['for', 'i', ',', 'face', ':=', 'range', 'Faces', '{']"
90,"        writer.WriteString(""["")","['writer.WriteString(""["")']"
91,"        for j, vert := range face.verts {","['for', 'j', ',', 'vert', ':=', 'range', 'face', '.', 'verts', '{']"
92,            length := math.Sqrt((vert.X * vert.X) + (vert.Y * vert.Y) + (vert.Z * vert.Z)),"['length', ':=', 'math.Sqrt((vert.X * vert.X) + (vert.Y * vert.Y) + (vert.Z * vert.Z))']"
93,            x := vert.X / length,"['x', ':=', 'vert', '.', 'X', 'length']"
94,            y := vert.Y / length,"['y', ':=', 'vert', '.', 'Y', 'length']"
95,            z := vert.Z / length,"['z', ':=', 'vert', '.', 'Z', 'length']"
96,"            normal := fmt.Sprintf(""[%f,%f,%f]"", x, y, z)","['normal', ':=', 'fmt.Sprintf(""[%f,%f,%f]"", x, y, z)']"
97,            writer.WriteString(normal),['writer.WriteString(normal)']
98,"            if(j < len(face.verts)-1) { writer.WriteString("","") }","['if', '(', 'j', '<', 'len', '(', 'face', '.', 'verts', ')-', '1', ')', '{', 'writer.WriteString("","")', '}']"
99,        },['}']
100,"        writer.WriteString(""]"")","['writer.WriteString(""]"")']"
101,"        //writer.WriteString(""[0, 1, 0]"")","['//', 'writer.WriteString(""[0,', '1,', '0]"")']"
102,"        if i < len(Faces) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer.WriteString("","")', '}']"
103,"        writer.WriteString(""\n"")","['writer.WriteString(""\\n"")']"
104,    },['}']
105,    // Write out the tex coords,"['//', 'Write', 'out', 'the', 'tex', 'coords']"
106,"    writer.WriteString(""],\""tex\"":["")","['writer.WriteString(""],\\""tex\\"":["")']"
107,"    for i, face := range Faces {","['for', 'i', ',', 'face', ':=', 'range', 'Faces', '{']"
108,"        writer.WriteString(""["")","['writer.WriteString(""["")']"
109,        writer.WriteString(face.tex[0].String()),['writer.WriteString(face.tex[0].String())']
110,"        writer.WriteString("","")","['writer.WriteString("","")']"
111,        writer.WriteString(face.tex[1].String()),['writer.WriteString(face.tex[1].String())']
112,"        writer.WriteString("","")","['writer.WriteString("","")']"
113,        writer.WriteString(face.tex[2].String()),['writer.WriteString(face.tex[2].String())']
114,"        writer.WriteString(""]"")","['writer.WriteString(""]"")']"
115,"        if i < len(Faces) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer.WriteString("","")', '}']"
116,"        writer.WriteString(""\n"")","['writer.WriteString(""\\n"")']"
117,    },['}']
118,    // Close obj block,"['//', 'Close', 'obj', 'block']"
119,"    writer.WriteString(""]}]"");","['writer.WriteString(""]}]"")', ';']"
120,    if parseMaterial {,"['if', 'parseMaterial', '{']"
121,"        writer.WriteString("",mat:[{"");","['writer.WriteString("",mat:[{"")', ';']"
122,        reader := bufio.NewReader(mtlFile),"['reader', ':=', 'bufio.NewReader(mtlFile)']"
123,        // Read the file in and parse out what we need,"['//', 'Read', 'the', 'file', 'in', 'and', 'parse', 'out', 'what', 'we', 'need']"
124,        for {,"['for', '{']"
125,"            if part, prefix, err = reader.ReadLine(); err != nil {","['if', 'part', ',', 'prefix', ',', 'err', '=', 'reader.ReadLine()', ';', 'err', '!=', 'nil', '{']"
126,                break,['break']
127,            },['}']
128,            buffer.Write(part),['buffer.Write(part)']
129,            if !prefix {,"['if', '!', 'prefix', '{']"
130,                line := buffer.String(),"['line', ':=', 'buffer.String()']"
131,"                if(strings.Contains(line, ""map_Kd "")) {","['if', '(', 'strings.Contains(line, ""map_Kd ""))', '{']"
132,"                    parts := strings.Split(line, "" "")","['parts', ':=', 'strings.Split(line, "" "")']"
133,"                    entry := fmt.Sprintf(""\""t\"":\""%s\"","", parts[1])","['entry', ':=', 'fmt.Sprintf(""\\""t\\"":\\""%s\\"","", parts[1])']"
134,                    writer.WriteString(entry),['writer.WriteString(entry)']
135,"                    width, height := 256, 256","['width', ',', 'height', ':=', '256', ',', '256']"
136,                    var imageFile *os.File,"['var', 'imageFile', '*', 'os', '.', 'File']"
137,"                    if imageFile, err = os.Open(parts[1]); err != nil {","['if', 'imageFile', ',', 'err', '=', 'os.Open(parts[1])', ';', 'err', '!=', 'nil', '{']"
138,"                        fmt.Printf(""--""+FgRed+""Failed to find %s, defaulting to 256x256""+Reset+""\n"", parts[1])","['fmt.Printf(""--""+FgRed+""Failed to find %s, defaulting to 256x256""+Reset+""\\n"", parts[1])']"
139,                        return,['return']
140,                    } else {,"['}', 'else', '{']"
141,                        var config image.Config,"['var', 'config', 'image', '.', 'Config']"
142,                        imageReader := bufio.NewReader(imageFile),"['imageReader', ':=', 'bufio.NewReader(imageFile)']"
143,"                        config, err = jpeg.DecodeConfig(imageReader)","['config', ',', 'err', '=', 'jpeg.DecodeConfig(imageReader)']"
144,"                        width, height = config.Width, config.Height","['width', ',', 'height', '=', 'config', '.', 'Width', ',', 'config', '.', 'Height']"
145,"                        fmt.Printf(""--""+FgGreen+""Verifing""+Reset+"" that %s is %dpx x %dpx\n"", parts[1], width, height)","['fmt.Printf(""--""+FgGreen+""Verifing""+Reset+"" that %s is %dpx x %dpx\\n"", parts[1], width, height)']"
146,                    },['}']
147,"                    size := fmt.Sprintf(""\""w\"":%d,\""h\"":%d,"", width, height)","['size', ':=', 'fmt.Sprintf(""\\""w\\"":%d,\\""h\\"":%d,"", width, height)']"
148,                    writer.WriteString(size),['writer.WriteString(size)']
149,"                } else if(strings.Contains(line, ""Kd "")) {","['}', 'else', 'if', '(', 'strings.Contains(line, ""Kd ""))', '{']"
150,"                    parts := strings.Split(line, "" "")","['parts', ':=', 'strings.Split(line, "" "")']"
151,"                    entry := fmt.Sprintf(""\""r\"":%s, \""g\"":%s, \""b\"":%s,"", parts[1], parts[2], parts[3])","['entry', ':=', 'fmt.Sprintf(""\\""r\\"":%s, \\""g\\"":%s, \\""b\\"":%s,"", parts[1], parts[2], parts[3])']"
152,                    writer.WriteString(entry),['writer.WriteString(entry)']
153,                },['}']
154,                buffer.Reset(),['buffer.Reset()']
155,            },['}']
156,        },['}']
157,        if err == io.EOF {,"['if', 'err', '==', 'io', '.', 'EOF', '{']"
158,            err = nil,"['err', '=', 'nil']"
159,        },['}']
160,"        writer.WriteString(""\""res\"":100,\""uv\"":true}]"");","['writer.WriteString(""\\""res\\"":100,\\""uv\\"":true}]"")', ';']"
161,    },['}']
162,    // Close json,"['//', 'Close', 'json']"
163,"    writer.WriteString(""}"");","['writer.WriteString(""}"")', ';']"
164,    writer.Flush(),['writer.Flush()']
165,    jsonFile.Close(),['jsonFile.Close()']
166,"    fmt.Printf(""--""+FgGreen+""Exported""+Reset+"" %d faces with %d verticies\n"", len(Faces), len(Verts))","['fmt.Printf(""--""+FgGreen+""Exported""+Reset+"" %d faces with %d verticies\\n"", len(Faces), len(Verts))']"
167,    finished <- -1,"['finished', '<-', '-', '1']"
168,},['}']
169,func main(){,"['func', 'main', '(){']"
170,    // Verify we were called correctly,"['//', 'Verify', 'we', 'were', 'called', 'correctly']"
171,    if len(os.Args) < 2 {,"['if', 'len', '(', 'os', '.', 'Args', ')', '<', '2', '{']"
172,"        fmt.Println(""Usage: go run objParser.go "");","['fmt.Println(""Usage: go run objParser.go "")', ';']"
173,        return,['return']
174,    },['}']
175,    files := len(os.Args),"['files', ':=', 'len', '(', 'os', '.', 'Args', ')']"
176,    finished := make(chan int),"['finished', ':=', 'make', '(', 'chan', 'int', ')']"
177,    now := time.Now(),"['now', ':=', 'time.Now()']"
178,    for i := 1; i < files; i++ {,"['for', 'i', ':=', '1', ';', 'i', '<', 'files', ';', 'i', '++', '{']"
179,"        go parseFile(os.Args[i], finished)","['go', 'parseFile', '(', 'os', '.', 'Args', '[', 'i', '],', 'finished', ')']"
180,    },['}']
181,    for i := 1; i < files; i++ {,"['for', 'i', ':=', '1', ';', 'i', '<', 'files', ';', 'i', '++', '{']"
182,        <- finished,"['<-', 'finished']"
183,    },['}']
184,"    fmt.Printf(""Parsed %d files in %s\n"", files-1, time.Since(now))","['fmt.Printf(""Parsed %d files in %s\\n"", files-1, time.Since(now))']"
185,},['}']
