,text,token
0,"Another approach is using sync.Cond and atomic, something along the lines of:

","['Another', 'approach', 'is', 'using', 'sync.Cond', 'and', 'atomic', ',', 'something', 'along', 'the', 'lines', 'of', ':']"
1,type Server struct {,"['type', 'Server', 'struct', '{']"
2,    s     chan int,"['s', 'chan', 'int']"
3,    r     chan int,"['r', 'chan', 'int']"
4,    c     *sync.Cond,"['c', '*', 'sync', '.', 'Cond']"
5,    state uint32,"['state', 'uint32']"
6,},['}']
7,const (,"['const', '(']"
8,    sNormal       = 0,"['sNormal', '=', '0']"
9,    sQuitting     = 1,"['sQuitting', '=', '1']"
10,    sReconnecting = 2,"['sReconnecting', '=', '2']"
11,),[')']
12,func New() *Server {,"['func', 'New', '()', '*', 'Server', '{']"
13,    s := &Server{,"['s', ':=', '&', 'Server', '{']"
14,"        s: make(chan int),","['s', ':', 'make', '(', 'chan', 'int', '),']"
15,"        r: make(chan int),","['r', ':', 'make', '(', 'chan', 'int', '),']"
16,"        c: sync.NewCond(&sync.Mutex{}),","['c', ':', 'sync.NewCond(&sync.Mutex{})', ',']"
17,    },['}']
18,    go s.sender(),"['go', 's.sender()']"
19,    // go s.receiver(),"['//', 'go', 's.receiver(', ')']"
20,    return s,"['return', 's']"
21,},['}']
22,func (s *Server) sender() {,"['func', '(', 's', '*', 'Server', ')', 'sender', '()', '{']"
23,    //,['//']
24,    for {,"['for', '{']"
25,        select {,"['select', '{']"
26,        case data := <-s.s:,"['case', 'data', ':=', '<-', 's', '.', 's', ':']"
27,        //do stuff with data,"['//', 'do', 'stuff', 'with', 'data']"
28,        default:,"['default', ':']"
29,            s.c.L.Lock(),"['s', '.', 'c', '.', 'L.Lock()']"
30,        L:,"['L', ':']"
31,            for {,"['for', '{']"
32,                switch atomic.LoadUint32(&s.state) {,"['switch', 'atomic.LoadUint32(&s.state)', '{']"
33,                case sNormal:,"['case', 'sNormal', ':']"
34,                    break L,"['break', 'L']"
35,                case sReconnecting:,"['case', 'sReconnecting', ':']"
36,                case sQuitting:,"['case', 'sQuitting', ':']"
37,                    s.c.L.Unlock(),"['s', '.', 'c', '.', 'L.Unlock()']"
38,                    return,['return']
39,                },['}']
40,                s.c.Wait(),"['s', '.', 'c.Wait()']"
41,            },['}']
42,            s.c.L.Unlock(),"['s', '.', 'c', '.', 'L.Unlock()']"
43,        },['}']
44,    },['}']
45,},['}']
46,//repeat for receiver,"['//', 'repeat', 'for', 'receiver']"
47,func (s *Server) Reconnect() {,"['func', '(', 's', '*', 'Server', ')', 'Reconnect', '()', '{']"
48,    var cannotReconnect bool,"['var', 'cannotReconnect', 'bool']"
49,"    atomic.StoreUint32(&s.state, sReconnecting)","['atomic.StoreUint32(&s.state, sReconnecting)']"
50,    //keep trying to reconnect,"['//', 'keep', 'trying', 'to', 'reconnect']"
51,    if cannotReconnect {,"['if', 'cannotReconnect', '{']"
52,"        atomic.StoreUint32(&s.state, sQuitting)","['atomic.StoreUint32(&s.state, sQuitting)']"
53,    } else {,"['}', 'else', '{']"
54,"        atomic.StoreUint32(&s.state, sNormal)","['atomic.StoreUint32(&s.state, sNormal)']"
55,    },['}']
56,    s.c.Broadcast(),"['s', '.', 'c.Broadcast()']"
57,},['}']
58,"

playground
",['playground']
