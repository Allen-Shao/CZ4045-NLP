,text,token
0,"Maybe this will do what you want. Disclaimer: I am not an expert in openpgp; I don't know whether this is correct or not. But it does work with gpg --import.

","['Maybe', 'this', 'will', 'do', 'what', 'you', 'want', '.', 'Disclaimer', ':', 'I', 'am', 'not', 'an', 'expert', 'in', 'openpgp', ';', 'I', ""don't"", 'know', 'whether', 'this', 'is', 'correct', 'or', 'not', '.', 'But', 'it', 'does', 'work', 'with', 'gpg', '--import.']"
1,package main,"['package', 'main']"
2,import (,"['import', '(']"
3,"        ""fmt""","['""fmt""']"
4,"        ""os""","['""os""']"
5,"        ""golang.org/x/crypto/openpgp""","['""golang.org/x/crypto/openpgp""']"
6,"        ""golang.org/x/crypto/openpgp/armor""","['""golang.org/x/crypto/openpgp/armor""']"
7,),[')']
8,func main() {,"['func', 'main', '()', '{']"
9,        var e *openpgp.Entity,"['var', 'e', '*', 'openpgp', '.', 'Entity']"
10,"        e, err := openpgp.NewEntity(""itis"", ""test"", ""itis@itis3.com"", nil)","['e', ',', 'err', ':=', 'openpgp.NewEntity(""itis"", ""test"", ""itis@itis3.com"", nil)']"
11,        if err != nil {,"['if', 'err', '!=', 'nil', '{']"
12,                fmt.Println(err),['fmt.Println(err)']
13,                return,['return']
14,        },['}']
15,        // Add more identities here if you wish,"['//', 'Add', 'more', 'identities', 'here', 'if', 'you', 'wish']"
16,        // Sign all the identities,"['//', 'Sign', 'all', 'the', 'identities']"
17,"        for _, id := range e.Identities {","['for', '_', ',', 'id', ':=', 'range', 'e', '.', 'Identities', '{']"
18,"                err := id.SelfSignature.SignUserId(id.UserId.Id, e.PrimaryKey, e.PrivateKey, nil)","['err', ':=', 'id', '.', 'SelfSignature.SignUserId(id.UserId.Id, e.PrimaryKey, e.PrivateKey, nil)']"
19,                if err != nil {,"['if', 'err', '!=', 'nil', '{']"
20,                        fmt.Println(err),['fmt.Println(err)']
21,                        return,['return']
22,                },['}']
23,        },['}']
24,"        w, err := armor.Encode(os.Stdout, openpgp.PublicKeyType, nil)","['w', ',', 'err', ':=', 'armor.Encode(os.Stdout, openpgp.PublicKeyType, nil)']"
25,        if err != nil {,"['if', 'err', '!=', 'nil', '{']"
26,                fmt.Println(err),['fmt.Println(err)']
27,                return,['return']
28,        },['}']
29,        defer w.Close(),"['defer', 'w.Close()']"
30,        e.Serialize(w),['e.Serialize(w)']
31,},['}']
