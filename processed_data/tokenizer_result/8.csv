,text,token
0,"I tried the Go Tour exercise #71

If it is run like go run 71_hang.go ok, it works fine.

However, if you use ","['I', 'tried', 'the', 'Go', 'Tour', 'exercise', '#71', 'If', 'it', 'is', 'run', 'like', 'go', 'run', '71_hang.go', 'ok,', 'it', 'works', 'fine.', 'However,', 'if', 'you', 'use']"
1,go run 71_hang.go nogood,"['go', 'run', '71', '_hang', '.', 'go', 'nogood']"
2,", it will run forever.

The only difference is the extra fmt.Print("""") in the default in the select statement.

I'm not sure, but I suspect some sort of infinite loop and race-condition? And here is my solution.

Note: It's not deadlock as Go didn't ","[',', 'it', 'will', 'run', 'forever.', 'The', 'only', 'difference', 'is', 'the', 'extra', 'fmt.Print("""")', 'in', 'the', 'default', 'in', 'the', 'select', 'statement.', ""I'm"", 'not', 'sure,', 'but', 'I', 'suspect', 'some', 'sort', 'of', 'infinite', 'loop', 'and', 'race-condition?', 'And', 'here', 'is', 'my', 'solution.', 'Note:', ""It's"", 'not', 'deadlock', 'as', 'Go', ""didn't""]"
3,throw: all goroutines are asleep - deadlock!,"['throw', ':', 'all', 'go', 'routines', 'are', 'asleep', '-', 'deadlock', '!']"
4,"

",[]
5,package main,"['package', 'main']"
6,import (,"['import', '(']"
7,"    ""fmt""","['""fmt""']"
8,"    ""os""","['""os""']"
9,),[')']
10,type Fetcher interface {,"['type', 'Fetcher', 'interface', '{']"
11,    // Fetch returns the body of URL and,"['//', 'Fetch', 'returns', 'the', 'body', 'of', 'URL', 'and']"
12,    // a slice of URLs found on that page.,"['//', 'a', 'slice', 'of', 'URLs', 'found', 'on', 'that', 'page.']"
13,"    Fetch(url string) (body string, urls []string, err error)","['Fetch', '(', 'url', 'string', ')', '(', 'body', 'string', ',', 'urls', '[]', 'string', ',', 'err', 'error', ')']"
14,},['}']
15,"func crawl(todo Todo, fetcher Fetcher,","['func', 'crawl', '(', 'todo', 'Todo', ',', 'fetcher', 'Fetcher', ',']"
16,"    todoList chan Todo, done chan bool) {","['todoList', 'chan', 'Todo', ',', 'done', 'chan', 'bool', ')', '{']"
17,"    body, urls, err := fetcher.Fetch(todo.url)","['body', ',', 'urls', ',', 'err', ':=', 'fetcher.Fetch(todo.url)']"
18,    if err != nil {,"['if', 'err', '!=', 'nil', '{']"
19,        fmt.Println(err),['fmt.Println(err)']
20,    } else {,"['}', 'else', '{']"
21,"        fmt.Printf(""found: %s %q\n"", todo.url, body)","['fmt.Printf(""found: %s %q\\n"", todo.url, body)']"
22,"        for _, u := range urls {","['for', '_', ',', 'u', ':=', 'range', 'urls', '{']"
23,"            todoList <- Todo{u, todo.depth - 1}","['todoList', '<-', 'Todo', '{', 'u', ',', 'todo', '.', 'depth', '-', '1', '}']"
24,        },['}']
25,    },['}']
26,    done <- true,"['done', '<-', 'true']"
27,    return,['return']
28,},['}']
29,type Todo struct {,"['type', 'Todo', 'struct', '{']"
30,    url   string,"['url', 'string']"
31,    depth int,"['depth', 'int']"
32,},['}']
33,// Crawl uses fetcher to recursively crawl,"['//', 'Crawl', 'uses', 'fetcher', 'to', 'recursively', 'crawl']"
34,"// pages starting with url, to a maximum of depth.","['//', 'pages', 'starting', 'with', 'url,', 'to', 'a', 'maximum', 'of', 'depth.']"
35,"func Crawl(url string, depth int, fetcher Fetcher) {","['func', 'Crawl', '(', 'url', 'string', ',', 'depth', 'int', ',', 'fetcher', 'Fetcher', ')', '{']"
36,    visited := make(map[string]bool),"['visited', ':=', 'make', '(', 'map', '[', 'string', ']', 'bool', ')']"
37,"    doneCrawling := make(chan bool, 100)","['doneCrawling', ':=', 'make', '(', 'chan', 'bool', ',', '100', ')']"
38,"    toDoList := make(chan Todo, 100)","['toDoList', ':=', 'make', '(', 'chan', 'Todo', ',', '100', ')']"
39,"    toDoList <- Todo{url, depth}","['toDoList', '<-', 'Todo', '{', 'url', ',', 'depth', '}']"
40,    crawling := 0,"['crawling', ':=', '0']"
41,    for {,"['for', '{']"
42,        select {,"['select', '{']"
43,        case todo := <-toDoList:,"['case', 'todo', ':=', '<-', 'toDoList', ':']"
44,            if todo.depth > 0 && !visited[todo.url] {,"['if', 'todo', '.', 'depth', '>', '0', '&&', '!', 'visited', '[', 'todo', '.', 'url', ']', '{']"
45,                crawling++,"['crawling', '++']"
46,                visited[todo.url] = true,"['visited', '[', 'todo', '.', 'url', ']', '=', 'true']"
47,"                go crawl(todo, fetcher, toDoList, doneCrawling)","['go', 'crawl', '(', 'todo', ',', 'fetcher', ',', 'toDoList', ',', 'doneCrawling', ')']"
48,            },['}']
49,        case <-doneCrawling:,"['case', '<-', 'doneCrawling', ':']"
50,            crawling--,"['crawling', '--']"
51,        default:,"['default', ':']"
52,"            if os.Args[1]==""ok"" {   // *","['if', 'os', '.', 'Args', '[', '1', ']==', '""ok""', '{', '// *']"
53,"                fmt.Print("""")","['fmt.Print("""")']"
54,            },['}']
55,            if crawling == 0 {,"['if', 'crawling', '==', '0', '{']"
56,                goto END,"['go', 'to', 'END']"
57,            },['}']
58,        },['}']
59,    },['}']
60,END:,"['END', ':']"
61,    return,['return']
62,},['}']
63,func main() {,"['func', 'main', '()', '{']"
64,"    Crawl(""http://golang.org/"", 4, fetcher)","['Crawl', '(', '""http://golang.org/""', ',', '4', ',', 'fetcher', ')']"
65,},['}']
66,// fakeFetcher is Fetcher that returns canned results.,"['//', 'fakeFetcher', 'is', 'Fetcher', 'that', 'returns', 'canned', 'results.']"
67,type fakeFetcher map[string]*fakeResult,"['type', 'fakeFetcher', 'map', '[', 'string', ']*', 'fakeResult']"
68,type fakeResult struct {,"['type', 'fakeResult', 'struct', '{']"
69,    body string,"['body', 'string']"
70,    urls []string,"['urls', '[]', 'string']"
71,},['}']
72,"func (f *fakeFetcher) Fetch(url string) (string, []string, error) {","['func', '(', 'f', '*', 'fakeFetcher', ')', 'Fetch', '(', 'url', 'string', ')', '(', 'string', ',', '[]', 'string', ',', 'error', ')', '{']"
73,"    if res, ok := (*f)[url]; ok {","['if', 'res', ',', 'ok', ':=', '(*', 'f', ')[', 'url', '];', 'ok', '{']"
74,"        return res.body, res.urls, nil","['return', 'res', '.', 'body', ',', 'res', '.', 'urls', ',', 'nil']"
75,    },['}']
76,"    return """", nil, fmt.Errorf(""not found: %s"", url)","['return', '"""", nil, fmt.Errorf(""not found: %s""', ',', 'url', ')']"
77,},['}']
78,// fetcher is a populated fakeFetcher.,"['//', 'fetcher', 'is', 'a', 'populated', 'fakeFetcher.']"
79,var fetcher = &fakeFetcher{,"['var', 'fetcher', '=', '&', 'fakeFetcher', '{']"
80,"    ""http://golang.org/"": &fakeResult{","['""http://golang.org/""', ':', '&', 'fakeResult', '{']"
81,"        ""The Go Programming Language"",","['""The Go Programming Language""', ',']"
82,        []string{,"['[]', 'string', '{']"
83,"            ""http://golang.org/pkg/"",","['""http://golang.org/pkg/""', ',']"
84,"            ""http://golang.org/cmd/"",","['""http://golang.org/cmd/""', ',']"
85,"        },","['},']"
86,"    },","['},']"
87,"    ""http://golang.org/pkg/"": &fakeResult{","['""http://golang.org/pkg/""', ':', '&', 'fakeResult', '{']"
88,"        ""Packages"",","['""Packages""', ',']"
89,        []string{,"['[]', 'string', '{']"
90,"            ""http://golang.org/"",","['""http://golang.org/""', ',']"
91,"            ""http://golang.org/cmd/"",","['""http://golang.org/cmd/""', ',']"
92,"            ""http://golang.org/pkg/fmt/"",","['""http://golang.org/pkg/fmt/""', ',']"
93,"            ""http://golang.org/pkg/os/"",","['""http://golang.org/pkg/os/""', ',']"
94,"        },","['},']"
95,"    },","['},']"
96,"    ""http://golang.org/pkg/fmt/"": &fakeResult{","['""http://golang.org/pkg/fmt/""', ':', '&', 'fakeResult', '{']"
97,"        ""Package fmt"",","['""Package fmt""', ',']"
98,        []string{,"['[]', 'string', '{']"
99,"            ""http://golang.org/"",","['""http://golang.org/""', ',']"
100,"            ""http://golang.org/pkg/"",","['""http://golang.org/pkg/""', ',']"
101,"        },","['},']"
102,"    },","['},']"
103,"    ""http://golang.org/pkg/os/"": &fakeResult{","['""http://golang.org/pkg/os/""', ':', '&', 'fakeResult', '{']"
104,"        ""Package os"",","['""Package os""', ',']"
105,        []string{,"['[]', 'string', '{']"
106,"            ""http://golang.org/"",","['""http://golang.org/""', ',']"
107,"            ""http://golang.org/pkg/"",","['""http://golang.org/pkg/""', ',']"
108,"        },","['},']"
109,"    },","['},']"
110,},['}']
