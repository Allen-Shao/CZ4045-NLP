,text,token
0,"Admittedly, it's somewhat of a quirk, but there's an explanation for it.

Imagine an interface{} variable as a struct composed of two fields: one is the type and another is the data. ([]int and nil). Actually, it looks just like that in the Go runtime.

","['Admittedly,', ""it's"", 'somewhat', 'of', 'a', 'quirk,', 'but', ""there's"", 'an', 'explanation', 'for', 'it.', 'Imagine', 'an', 'interface{}', 'variable', 'as', 'a', 'struct', 'composed', 'of', 'two', 'fields:', 'one', 'is', 'the', 'type', 'and', 'another', 'is', 'the', 'data.', '([]int', 'and', 'nil).', 'Actually,', 'it', 'looks', 'just', 'like', 'that', 'in', 'the', 'Go', 'runtime.']"
1,struct Iface                                                                                                                   ,"['struct', 'Iface']"
2,{                                                                                                                              ,['{']
3,    Itab*   tab;                                                                                                               ,"['Itab', '*', 'tab', ';']"
4,    void*   data;                                                                                                              ,"['void', '*', 'data', ';']"
5,};   ,['};']
6,"

When you pass your nil slice to yes, only nil is passed as the value, so your comparison boils down to nil == nil. 

Meanwhile, calling no automatically wraps your variable in an interface{} type and the call becomes something akin to ","['When', 'you', 'pass', 'your', 'nil', 'slice', 'to', 'yes,', 'only', 'nil', 'is', 'passed', 'as', 'the', 'value,', 'so', 'your', 'comparison', 'boils', 'down', 'to', 'nil', '==', 'nil.', 'Meanwhile,', 'calling', 'no', 'automatically', 'wraps', 'your', 'variable', 'in', 'an', 'interface{}', 'type', 'and', 'the', 'call', 'becomes', 'something', 'akin', 'to']"
7,"no(interface{[]int, nil})","['no', '(', 'interface', '{[]', 'int', ',', 'nil', '})']"
8,. So the comparison in no could be seen as ,"['.', 'So', 'the', 'comparison', 'in', 'no', 'could', 'be', 'seen', 'as']"
9,"interface{[]int, nil} == nil","['interface', '{[]', 'int', ',', 'nil', '}', '==', 'nil']"
10,", which turns out to be false in go.

The issue is actually explained in the Go FAQ.
","[',', 'which', 'turns', 'out', 'to', 'be', 'false', 'in', 'go.', 'The', 'issue', 'is', 'actually', 'explained', 'in', 'the', 'Go', 'FAQ.']"
