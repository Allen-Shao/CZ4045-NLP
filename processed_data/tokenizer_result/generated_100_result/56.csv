,text,token
0,"As others have said, there are no guarantees you can assume about the order of execution.

The Go scheduler has an internal algorithm that decides how to allocate the processor and there is little you can do to control this without resorting to synchronization (which would be the right approach to take here).

If you are interested in learning how to control synchronization between tasks, take a look at the sync package, and also at how channels work:

https://golang.org/pkg/sync/

https://tour.golang.org/concurrency/2

However, I want to add something that others have not mentioned, and while it does not allow you to control execution order, it might be worth commenting due to the nature of the question.

There is a runtime.Gosched function that you can use to hint the scheduler. It would yield the processor so it is likely that other threads will execute.

https://golang.org/pkg/runtime/#Gosched

If you add a call to Gosched instead of sleeping, in my tests it is much more likely that ""hello"" and ""world"" would output in order (though again, there is no guarantee and they will appear in random order at times).

Try it like this:

","['As', 'others', 'have', 'said,', 'there', 'are', 'no', 'guarantees', 'you', 'can', 'assume', 'about', 'the', 'order', 'of', 'execution.', 'The', 'Go', 'scheduler', 'has', 'an', 'internal', 'algorithm', 'that', 'decides', 'how', 'to', 'allocate', 'the', 'processor', 'and', 'there', 'is', 'little', 'you', 'can', 'do', 'to', 'control', 'this', 'without', 'resorting', 'to', 'synchronization', '(which', 'would', 'be', 'the', 'right', 'approach', 'to', 'take', 'here).', 'If', 'you', 'are', 'interested', 'in', 'learning', 'how', 'to', 'control', 'synchronization', 'between', 'tasks,', 'take', 'a', 'look', 'at', 'the', 'sync', 'package,', 'and', 'also', 'at', 'how', 'channels', 'work:', 'https://golang.org/pkg/sync/', 'https://tour.golang.org/concurrency/2', 'However,', 'I', 'want', 'to', 'add', 'something', 'that', 'others', 'have', 'not', 'mentioned,', 'and', 'while', 'it', 'does', 'not', 'allow', 'you', 'to', 'control', 'execution', 'order,', 'it', 'might', 'be', 'worth', 'commenting', 'due', 'to', 'the', 'nature', 'of', 'the', 'question.', 'There', 'is', 'a', 'runtime.Gosched', 'function', 'that', 'you', 'can', 'use', 'to', 'hint', 'the', 'scheduler.', 'It', 'would', 'yield', 'the', 'processor', 'so', 'it', 'is', 'likely', 'that', 'other', 'threads', 'will', 'execute.', 'https://golang.org/pkg/runtime/#Gosched', 'If', 'you', 'add', 'a', 'call', 'to', 'Gosched', 'instead', 'of', 'sleeping,', 'in', 'my', 'tests', 'it', 'is', 'much', 'more', 'likely', 'that', '""hello""', 'and', '""world""', 'would', 'output', 'in', 'order', '(though', 'again,', 'there', 'is', 'no', 'guarantee', 'and', 'they', 'will', 'appear', 'in', 'random', 'order', 'at', 'times).', 'Try', 'it', 'like', 'this:']"
1,package main,"['package', 'main']"
2,import (,"['import', '(']"
3,"    ""fmt""","['""fmt""']"
4,"    ""runtime""","['""runtime""']"
5,),[')']
6,func say(s string) {,"['func', 'say', '(', 's', 'string', ')', '{']"
7,    for i := 0; i < 5; i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', '5', ';', 'i', '++', '{']"
8,"        fmt.Println(s, i)","['fmt.Println(s, i)']"
9,        runtime.Gosched(),['runtime.Gosched()']
10,    },['}']
11,},['}']
12,func main() {,"['func', 'main', '()', '{']"
13,"    go say(""world"")","['go', 'say', '(', '""world""', ')']"
14,"    say(""hello"")","['say', '(', '""hello""', ')']"
15,},['}']
16,"

Lastly, take a look at this article which you might find interesting as well:

http://container-solutions.com/surprise-golang-thread-scheduling/
","['Lastly,', 'take', 'a', 'look', 'at', 'this', 'article', 'which', 'you', 'might', 'find', 'interesting', 'as', 'well:', 'http://container-solutions.com/surprise-golang-thread-scheduling/']"
