,text,token,annotation
0,"I have an SDL2 go program which tries to write a pixel array to the screen. When I try and update the texture with the new pixels the program panics with a runtime error:

","['I', 'have', 'an', 'SDL2', 'go', 'program', 'which', 'tries', 'to', 'write', 'a', 'pixel', 'array', 'to', 'the', 'screen', '.', 'When', 'I', 'try', 'and', 'update', 'the', 'texture', 'with', 'the', 'new', 'pixels', 'the', 'program', 'panics', 'with', 'a', 'runtime', 'error', ':']","['PRP', 'VBP', 'DT', 'NNP', 'VBP', 'NN', 'WDT', 'VBZ', 'TO', 'VB', 'DT', 'JJ', 'NN', 'TO', 'DT', 'NN', '.', 'WRB', 'PRP', 'VBP', 'CC', 'VBP', 'DT', 'NN', 'IN', 'DT', 'JJ', 'NNS', 'DT', 'NN', 'NNS', 'IN', 'DT', 'JJ', 'NN', ':']"
1,fatal error: unexpected signal during runtime execution,"['fatal', 'error', ':', 'unexpected', 'signal', 'during', 'runtime', 'execution']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
2,"

Unfortunately I can find little to no documentation about how to pass around unsafe pointers in Go and I'm not sure if I'm approaching this correctly, here is some example code that exhibits the problem:

","['Unfortunately', 'I', 'can', 'find', 'little', 'to', 'no', 'documentation', 'about', 'how', 'to', 'pass', 'around', 'unsafe', 'pointers', 'in', 'Go', 'and', 'I', ""'m"", 'not', 'sure', 'if', 'I', ""'m"", 'approaching', 'this', 'correctly', ',', 'here', 'is', 'some', 'example', 'code', 'that', 'exhibits', 'the', 'problem', ':']","['RB', 'PRP', 'MD', 'VB', 'JJ', 'TO', 'DT', 'NN', 'IN', 'WRB', 'TO', 'VB', 'RP', 'JJ', 'NNS', 'IN', 'NNP', 'CC', 'PRP', 'VBP', 'RB', 'JJ', 'IN', 'PRP', 'VBP', 'VBG', 'DT', 'RB', ',', 'RB', 'VBZ', 'DT', 'NN', 'NN', 'WDT', 'VBZ', 'DT', 'NN', ':']"
3,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
4,"    window := sdl.CreateWindow(""test"", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,","['window', ':=', 'sdl', '.', 'CreateWindow', '(', '""test""', ',', 'sdl', '.', 'WINDOWPOS_UNDEFINED', ',', 'sdl', '.', 'WINDOWPOS_UNDEFINED', ',']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
5,"        800, 600, sdl.WINDOW_SHOWN)","['800', ',', '600', ',', 'sdl', '.', 'WINDOW_SHOWN', ')']","['DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
6,"    renderer := sdl.CreateRenderer(window, -1, 0)","['renderer', ':=', 'sdl.CreateRenderer(window, -1, 0)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
7,"    texture := sdl.CreateTexture(renderer, sdl.PIXELFORMAT_ARGB8888,","['texture', ':=', 'sdl', '.', 'CreateTexture', '(', 'renderer', ',', 'sdl', '.', 'PIXELFORMAT_ARGB8888', ',']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
8,"        sdl.TEXTUREACCESS_STATIC, 800, 600)","['sdl', '.', 'TEXTUREACCESS_STATIC', ',', '800', ',', '600', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
9,    defer renderer.Destroy(),"['defer', 'renderer.Destroy()']","['IDENTIFIER', 'FUNCTION_CALL']"
10,    defer texture.Destroy(),"['defer', 'texture.Destroy()']","['IDENTIFIER', 'FUNCTION_CALL']"
11,    defer window.Destroy(),"['defer', 'window.Destroy()']","['IDENTIFIER', 'FUNCTION_CALL']"
12,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
13,"        pixels := make([]uint32, 800*600)","['pixels', ':=', 'make', '([]', 'uint32', ',', '800', '*', '600', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
14,"        texture.Update(nil, unsafe.Pointer(&pixels), int(800*unsafe.Sizeof(pixels)))","['texture.Update(nil, unsafe.Pointer(&pixels), int(800*unsafe.Sizeof(pixels)))']",['FUNCTION_CALL']
15,        window.UpdateSurface(),['window.UpdateSurface()'],['FUNCTION_CALL']
16,        renderer.Clear(),['renderer.Clear()'],['FUNCTION_CALL']
17,"        renderer.Copy(texture, nil, nil)","['renderer.Copy(texture, nil, nil)']",['FUNCTION_CALL']
18,        renderer.Present(),['renderer.Present()'],['FUNCTION_CALL']
19,    },['}'],['PUNCTUATION']
20,    sdl.Delay(1000),['sdl.Delay(1000)'],['FUNCTION_CALL']
21,    sdl.Quit(),['sdl.Quit()'],['FUNCTION_CALL']
22,},['}'],['PUNCTUATION']
23,"

This code will compile with no errors, but when ran it will produce a runtime panic, but I can't see what would cause that in this code.

I am using these SDL2 Go bindings: https://github.com/veandco/go-sdl2
","['This', 'code', 'will', 'compile', 'with', 'no', 'errors', ',', 'but', 'when', 'ran', 'it', 'will', 'produce', 'a', 'runtime', 'panic', ',', 'but', 'I', 'ca', ""n't"", 'see', 'what', 'would', 'cause', 'that', 'in', 'this', 'code', '.', 'I', 'am', 'using', 'these', 'SDL2', 'Go', 'bindings', ':', 'https', ':', '//github.com/veandco/go-sdl2']","['DT', 'NN', 'MD', 'VB', 'IN', 'DT', 'NNS', ',', 'CC', 'WRB', 'VBD', 'PRP', 'MD', 'VB', 'DT', 'NN', 'NN', ',', 'CC', 'PRP', 'MD', 'RB', 'VB', 'WP', 'MD', 'VB', 'IN', 'IN', 'DT', 'NN', '.', 'PRP', 'VBP', 'VBG', 'DT', 'NNP', 'NNP', 'NNS', ':', 'NN', ':', 'JJ']"
