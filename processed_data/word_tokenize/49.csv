,text,token,annotation
0,"I've looked at the very similarly titled post (Is there a C equivalent to Perls' Dumper() method in Data::Dumper?), regarding a C equivalent to ","['I', ""'ve"", 'looked', 'at', 'the', 'very', 'similarly', 'titled', 'post', '(', 'Is', 'there', 'a', 'C', 'equivalent', 'to', 'Perls', ""'"", 'Dumper', '(', ')', 'method', 'in', 'Data', ':', ':Dumper', '?', ')', ',', 'regarding', 'a', 'C', 'equivalent', 'to']","['PRP', 'VBP', 'VBN', 'IN', 'DT', 'RB', 'RB', 'VBN', 'NN', '(', 'VBZ', 'RB', 'DT', 'NNP', 'NN', 'TO', 'NNP', 'POS', 'NNP', '(', ')', 'NN', 'IN', 'NNS', ':', 'VB', '.', ')', ',', 'VBG', 'DT', 'NNP', 'NN', 'TO']"
1,Data::Dumper::Dumper();,"['Data', '::', 'Dumper', '::', 'Dumper', '();']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
2,". I have a similar question for the Go language.

I'm a Perl Zealot by trade, and am a progamming hobbyist, and make use of Data::Dumper and similar offspring literally hundreds of times a day. I've taken up learning Go, because it looks like a fun and interesting language, something that will get me out of the Perl rut I'm in, while opening my eyes to new ways of doing stuffz... One of the things I really want is something like:

","['.', 'I', 'have', 'a', 'similar', 'question', 'for', 'the', 'Go', 'language', '.', 'I', ""'m"", 'a', 'Perl', 'Zealot', 'by', 'trade', ',', 'and', 'am', 'a', 'progamming', 'hobbyist', ',', 'and', 'make', 'use', 'of', 'Data', ':', ':Dumper', 'and', 'similar', 'offspring', 'literally', 'hundreds', 'of', 'times', 'a', 'day', '.', 'I', ""'ve"", 'taken', 'up', 'learning', 'Go', ',', 'because', 'it', 'looks', 'like', 'a', 'fun', 'and', 'interesting', 'language', ',', 'something', 'that', 'will', 'get', 'me', 'out', 'of', 'the', 'Perl', 'rut', 'I', ""'m"", 'in', ',', 'while', 'opening', 'my', 'eyes', 'to', 'new', 'ways', 'of', 'doing', 'stuffz', '...', 'One', 'of', 'the', 'things', 'I', 'really', 'want', 'is', 'something', 'like', ':']","['.', 'PRP', 'VBP', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NNP', 'NN', '.', 'PRP', 'VBP', 'DT', 'NNP', 'NNP', 'IN', 'NN', ',', 'CC', 'VBP', 'DT', 'NN', 'NN', ',', 'CC', 'VB', 'NN', 'IN', 'NNS', ':', 'NN', 'CC', 'JJ', 'VBG', 'RB', 'NNS', 'IN', 'NNS', 'DT', 'NN', '.', 'PRP', 'VBP', 'VBN', 'RP', 'VBG', 'NNP', ',', 'IN', 'PRP', 'VBZ', 'IN', 'DT', 'NN', 'CC', 'JJ', 'NN', ',', 'NN', 'WDT', 'MD', 'VB', 'PRP', 'IN', 'IN', 'DT', 'NNP', 'NN', 'PRP', 'VBP', 'IN', ',', 'IN', 'VBG', 'PRP$', 'NNS', 'TO', 'JJ', 'NNS', 'IN', 'VBG', 'NN', ':', 'CD', 'IN', 'DT', 'NNS', 'PRP', 'RB', 'VBP', 'VBZ', 'NN', 'IN', ':']"
3,fmt.Println(dump.Dumper(decoded_json)),['fmt.Println(dump.Dumper(decoded_json))'],['FUNCTION_CALL']
4,"

to see the resulting data structure, like Data::Dumper would turn the JSON into an Array of Hashes. Seeing this in Go, will help me to understand how to construct and work with the data. Something like this would be considered a major lightbulb moment in my learning of Go.

Contrary to the statements made in the C counterpart post, I believe we can write this, and since I'll be passing Dumper to Println, after compilation what ever JSON string or XML page I pass in and decode. I should be able to see the result of the decoding, in a Dumper like state... So, does any more know of anything like this that exists? or maybe some pointers to getting something like this done? 
","['to', 'see', 'the', 'resulting', 'data', 'structure', ',', 'like', 'Data', ':', ':Dumper', 'would', 'turn', 'the', 'JSON', 'into', 'an', 'Array', 'of', 'Hashes', '.', 'Seeing', 'this', 'in', 'Go', ',', 'will', 'help', 'me', 'to', 'understand', 'how', 'to', 'construct', 'and', 'work', 'with', 'the', 'data', '.', 'Something', 'like', 'this', 'would', 'be', 'considered', 'a', 'major', 'lightbulb', 'moment', 'in', 'my', 'learning', 'of', 'Go', '.', 'Contrary', 'to', 'the', 'statements', 'made', 'in', 'the', 'C', 'counterpart', 'post', ',', 'I', 'believe', 'we', 'can', 'write', 'this', ',', 'and', 'since', 'I', ""'ll"", 'be', 'passing', 'Dumper', 'to', 'Println', ',', 'after', 'compilation', 'what', 'ever', 'JSON', 'string', 'or', 'XML', 'page', 'I', 'pass', 'in', 'and', 'decode', '.', 'I', 'should', 'be', 'able', 'to', 'see', 'the', 'result', 'of', 'the', 'decoding', ',', 'in', 'a', 'Dumper', 'like', 'state', '...', 'So', ',', 'does', 'any', 'more', 'know', 'of', 'anything', 'like', 'this', 'that', 'exists', '?', 'or', 'maybe', 'some', 'pointers', 'to', 'getting', 'something', 'like', 'this', 'done', '?']","['TO', 'VB', 'DT', 'VBG', 'NNS', 'NN', ',', 'IN', 'NNS', ':', 'NN', 'MD', 'VB', 'DT', 'NNP', 'IN', 'DT', 'NNP', 'IN', 'NNP', '.', 'VBG', 'DT', 'IN', 'NNP', ',', 'MD', 'VB', 'PRP', 'TO', 'VB', 'WRB', 'TO', 'VB', 'CC', 'VB', 'IN', 'DT', 'NNS', '.', 'VBG', 'IN', 'DT', 'MD', 'VB', 'VBN', 'DT', 'JJ', 'NN', 'NN', 'IN', 'PRP$', 'NN', 'IN', 'NNP', '.', 'NNP', 'TO', 'DT', 'NNS', 'VBN', 'IN', 'DT', 'NNP', 'NN', 'NN', ',', 'PRP', 'VBP', 'PRP', 'MD', 'VB', 'DT', ',', 'CC', 'IN', 'PRP', 'MD', 'VB', 'VBG', 'NNP', 'TO', 'NNP', ',', 'IN', 'NN', 'WP', 'RB', 'NNP', 'NN', 'CC', 'JJ', 'NN', 'PRP', 'VBP', 'IN', 'CC', 'NN', '.', 'PRP', 'MD', 'VB', 'JJ', 'TO', 'VB', 'DT', 'NN', 'IN', 'DT', 'NN', ',', 'IN', 'DT', 'NNP', 'IN', 'NN', ':', 'RB', ',', 'VBZ', 'DT', 'JJR', 'NNS', 'IN', 'NN', 'IN', 'DT', 'WDT', 'VBZ', '.', 'CC', 'RB', 'DT', 'NNS', 'TO', 'VBG', 'NN', 'IN', 'DT', 'VBN', '.']"
