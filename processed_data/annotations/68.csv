,text,token,annotation
0,"I want to keep an asio connection responsive, that I mean to check the server every second till it become alive and then send and receive. Here is my code

---irunnable.h---

","['I', 'want', 'to', 'keep', 'an', 'asio', 'connection', 'responsive,', 'that', 'I', 'mean', 'to', 'check', 'the', 'server', 'every', 'second', 'till', 'it', 'become', 'alive', 'and', 'then', 'send', 'and', 'receive.', 'Here', 'is', 'my', 'code', '---irunnable.h---']","['PRP', 'VBP', 'TO', 'VB', 'DT', 'JJ', 'NN', 'NN', 'IN', 'PRP', 'VBP', 'TO', 'VB', 'DT', 'NN', 'DT', 'JJ', 'NN', 'PRP', 'VBD', 'JJ', 'CC', 'RB', 'VB', 'CC', 'VB', 'RB', 'VBZ', 'PRP$', 'NN', 'NN']"
1,#ifndef IRUNNABLE_H,"['if', 'ndef', 'IRUNNABLE_H']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
2,#define IRUNNABLE_H,"['define', 'IRUNNABLE_H']","['IDENTIFIER', 'IDENTIFIER']"
3,#include ,['include'],['IDENTIFIER']
4,#include ,['include'],['IDENTIFIER']
5,#include ,['include'],['IDENTIFIER']
6,class IRunnable,"['class', 'IRunnable']","['IDENTIFIER', 'IDENTIFIER']"
7,{,['{'],['PUNCTUATION']
8,public:,"['public', ':']","['IDENTIFIER', 'PUNCTUATION']"
9,    IRunnable(): mThread(nullptr) {,"['IRunnable', '():', 'mThread', '(', 'nullptr', ')', '{']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
10,        mRunning.store(false);,"['mRunning.store(false)', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
11,    },['}'],['PUNCTUATION']
12,    virtual ~IRunnable() {,"['virtual', 'IRunnable', '()', '{']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
13,        if (mRunning.load()),"['if', '(', 'mRunning.load())']","['KEYWORD', 'PUNCTUATION', 'FUNCTION_CALL']"
14,            Stop();,"['Stop', '();']","['IDENTIFIER', 'PUNCTUATION']"
15,        delete mThread;,"['delete', 'mThread', ';']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
16,    },['}'],['PUNCTUATION']
17,    virtual void Start() {,"['virtual', 'void', 'Start', '()', '{']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
18,        mRunning.store(true);,"['mRunning.store(true)', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
19,"        mThread = new std::thread(&IRunnable::Run, this);","['mThread', '=', 'new', 'std', '::', 'thread', '(&', 'IRunnable', '::', 'Run', ',', 'this', ');']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
20,    },['}'],['PUNCTUATION']
21,    virtual void Stop() {,"['virtual', 'void', 'Stop', '()', '{']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
22,        mRunning.store(false);,"['mRunning.store(false)', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
23,        if (mThread && mThread->joinable()),"['if', '(', 'mThread', '&&', 'mThread', '->', 'joinable', '())']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
24,            mThread->join();,"['mThread', '->', 'join', '();']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
25,    },['}'],['PUNCTUATION']
26,    virtual bool IsRunning() {return mRunning.load();},"['virtual', 'bool', 'IsRunning', '()', '{', 'return', 'mRunning.load()', ';}']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'KEYWORD', 'FUNCTION_CALL', 'PUNCTUATION']"
27,protected:,"['protected', ':']","['IDENTIFIER', 'PUNCTUATION']"
28,    virtual void Run() = 0;,"['virtual', 'void', 'Run', '()', '=', '0', ';']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION']"
29,    std::atomic mRunning;,"['std', '::', 'atomic', 'mRunning', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
30,private:,"['private', ':']","['IDENTIFIER', 'PUNCTUATION']"
31,    std::thread *mThread;,"['std', '::', 'thread', '*', 'mThread', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
32,};,['};'],['PUNCTUATION']
33,#endif // IRUNNABLE_H,"['endif', '//', 'IRUNNABLE_H']","['IDENTIFIER', 'COMMENT', 'NN']"
34,"

---mytcpconnection.h---

",['---mytcpconnection.h---'],['NN']
35,#ifndef MYTCPCONNECTION_H,"['if', 'ndef', 'MYTCPCONNECTION_H']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
36,#define MYTCPCONNECTION_H,"['define', 'MYTCPCONNECTION_H']","['IDENTIFIER', 'IDENTIFIER']"
37,#include ,['include'],['IDENTIFIER']
38,#include ,['include'],['IDENTIFIER']
39,"#include ""irunnable.h""","['include', '""irunnable.h""']","['IDENTIFIER', 'STRING_LITERAL']"
40,class MyTCPConnection : public IRunnable,"['class', 'MyTCPConnection', ':', 'public', 'IRunnable']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER']"
41,{,['{'],['PUNCTUATION']
42,public:,"['public', ':']","['IDENTIFIER', 'PUNCTUATION']"
43,"    MyTCPConnection(const std::string &ip, const std::string &port);","['MyTCPConnection', '(', 'const', 'std', '::', 'string', '&', 'ip', ',', 'const', 'std', '::', 'string', '&', 'port', ');']","['IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
44,    ~MyTCPConnection();,"['MyTCPConnection', '();']","['IDENTIFIER', 'PUNCTUATION']"
45,    void Stop();,"['void', 'Stop', '();']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
46,    void Write(const std::string &msg);,"['void', 'Write', '(', 'const', 'std', '::', 'string', '&', 'msg', ');']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
47,    void Connect();,"['void', 'Connect', '();']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
48,protected:,"['protected', ':']","['IDENTIFIER', 'PUNCTUATION']"
49,    void Run();,"['void', 'Run', '();']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
50,private:,"['private', ':']","['IDENTIFIER', 'PUNCTUATION']"
51,    void readHeader();,"['void', 'readHeader', '();']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
52,private:,"['private', ':']","['IDENTIFIER', 'PUNCTUATION']"
53,    std::string mIP;,"['std', '::', 'string', 'mIP', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
54,    std::string mPort;,"['std', '::', 'string', 'mPort', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
55,    asio::io_service mIOService;,"['asio', '::', 'io_service', 'mIOService', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
56,    asio::ip::tcp::socket mSocket;,"['asio', '::', 'ip', '::', 'tcp', '::', 'socket', 'mSocket', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
57,};,['};'],['PUNCTUATION']
58,#endif // MYTCPCONNECTION_H,"['endif', '//', 'MYTCPCONNECTION_H']","['IDENTIFIER', 'COMMENT', 'NN']"
59,"

---mytcpconnection.cpp

",['---mytcpconnection.cpp'],['NN']
60,"#include ""mytcpconnection.h""","['include', '""mytcpconnection.h""']","['IDENTIFIER', 'STRING_LITERAL']"
61,#include ,['include'],['IDENTIFIER']
62,#include ,['include'],['IDENTIFIER']
63,#include ,['include'],['IDENTIFIER']
64,#include ,['include'],['IDENTIFIER']
65,"MyTCPConnection::MyTCPConnection(const std::string &ip, const std::string &port):","['MyTCPConnection', '::', 'MyTCPConnection', '(', 'const', 'std', '::', 'string', '&', 'ip', ',', 'const', 'std', '::', 'string', '&', 'port', '):']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
66,"    mIP(ip),","['mIP', '(', 'ip', '),']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
67,"    mPort(port),","['mPort', '(', 'port', '),']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
68,    mSocket(mIOService),"['mSocket', '(', 'mIOService', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
69,{,['{'],['PUNCTUATION']
70,    Connect();,"['Connect', '();']","['IDENTIFIER', 'PUNCTUATION']"
71,},['}'],['PUNCTUATION']
72,MyTCPConnection::~MyTCPConnection(),"['MyTCPConnection', '::', 'MyTCPConnection', '()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
73,{,['{'],['PUNCTUATION']
74,    Stop();,"['Stop', '();']","['IDENTIFIER', 'PUNCTUATION']"
75,},['}'],['PUNCTUATION']
76,void MyTCPConnection::Stop(),"['void', 'MyTCPConnection', '::', 'Stop', '()']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
77,{,['{'],['PUNCTUATION']
78,    mIOService.stop();,"['mIOService.stop()', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
79,    mSocket.close();,"['mSocket.close()', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
80,    IRunnable::Stop();,"['IRunnable', '::', 'Stop', '();']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
81,},['}'],['PUNCTUATION']
82,void MyTCPConnection::Write(const std::string &msg),"['void', 'MyTCPConnection', '::', 'Write', '(', 'const', 'std', '::', 'string', '&', 'msg', ')']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
83,{,['{'],['PUNCTUATION']
84,"    asio::async_write(mSocket,","['asio', '::', 'async_write', '(', 'mSocket', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
85,"                    asio::buffer(msg.c_str(),","['asio', '::', 'buffer', '(', 'msg.c_str()', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
86,"                                msg.length()),","['msg.length())', ',']","['FUNCTION_CALL', 'PUNCTUATION']"
87,"                    [this, msg](std::error_code ec, std::size_t /*length*/)","['[', 'this', ',', 'msg', '](', 'std', '::', 'error_code', 'ec', ',', 'std', '::', 'size_t', '/*length*/)']","['PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'DIRECTORY']"
88,    {,['{'],['PUNCTUATION']
89,        if (!ec),"['if', '(!', 'ec', ')']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
90,        {,['{'],['PUNCTUATION']
91,            std::cout <<  msg << std::endl;,"['std', '::', 'cout', '<<', 'msg', '<<', 'std', '::', 'endl', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'IDENTIFIER', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
92,        },['}'],['PUNCTUATION']
93,        else,['else'],['KEYWORD']
94,        {,['{'],['PUNCTUATION']
95,            mSocket.close();,"['mSocket.close()', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
96,        },['}'],['PUNCTUATION']
97,    });,['});'],['PUNCTUATION']
98,},['}'],['PUNCTUATION']
99,void MyTCPConnection::Run(),"['void', 'MyTCPConnection', '::', 'Run', '()']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
100,{,['{'],['PUNCTUATION']
101,    while (mRunning.load()) {,"['while', '(', 'mRunning.load())', '{']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
102,        sleep(1);,"['sleep', '(', '1', ');']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
103,//        Connect();,"['//', 'Connect();']","['COMMENT', 'NN']"
104,"        std::cout << ""before run\n"";","['std', '::', 'cout', '<<', '""before run\\n""', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'STRING_LITERAL', 'PUNCTUATION']"
105,        mIOService.run();,"['mIOService.run()', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
106,"        std::cout << ""after run\n"";","['std', '::', 'cout', '<<', '""after run\\n""', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'STRING_LITERAL', 'PUNCTUATION']"
107,    },['}'],['PUNCTUATION']
108,},['}'],['PUNCTUATION']
109,void MyTCPConnection::Connect(),"['void', 'MyTCPConnection', '::', 'Connect', '()']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
110,{,['{'],['PUNCTUATION']
111,    asio::ip::tcp::resolver resolver(mIOService);,"['asio', '::', 'ip', '::', 'tcp', '::', 'resolver', 'resolver', '(', 'mIOService', ');']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
112,"    asio::async_connect(mSocket, resolver.resolve({mIP, mPort}),","['asio', '::', 'async_connect', '(', 'mSocket', ',', 'resolver.resolve({mIP, mPort})', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
113,"                        [this](std::error_code ec, asio::ip::tcp::resolver::iterator)","['[', 'this', '](', 'std', '::', 'error_code', 'ec', ',', 'asio', '::', 'ip', '::', 'tcp', '::', 'resolver', '::', 'iterator', ')']","['PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
114,    {,['{'],['PUNCTUATION']
115,        if (!ec),"['if', '(!', 'ec', ')']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
116,        {,['{'],['PUNCTUATION']
117,"            std::cout << ""readHeader called\n"";","['std', '::', 'cout', '<<', '""readHeader called\\n""', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'STRING_LITERAL', 'PUNCTUATION']"
118,            readHeader();,"['readHeader', '();']","['IDENTIFIER', 'PUNCTUATION']"
119,        },['}'],['PUNCTUATION']
120,        else {,"['else', '{']","['KEYWORD', 'PUNCTUATION']"
121,"            std::cout << ""can not connect\n"";","['std', '::', 'cout', '<<', '""can not connect\\n""', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'STRING_LITERAL', 'PUNCTUATION']"
122,            mSocket.close();,"['mSocket.close()', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
123,            mIOService.reset();,"['mIOService.reset()', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
124,"            std::cout << ""after stopping io_service\n"";","['std', '::', 'cout', '<<', '""after stopping io_service\\n""', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'STRING_LITERAL', 'PUNCTUATION']"
125,        },['}'],['PUNCTUATION']
126,    });,['});'],['PUNCTUATION']
127,},['}'],['PUNCTUATION']
128,void MyTCPConnection::readHeader(),"['void', 'MyTCPConnection', '::', 'readHeader', '()']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
129,{,['{'],['PUNCTUATION']
130,    const int header_length = 16;,"['const', 'int', 'header_length', '=', '16', ';']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
131,"    std::shared_ptr msg(new char[header_length]{0},","['std', '::', 'shared_ptr', 'msg', '(', 'new', 'char', '[', 'header_length', ']{', '0', '},']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION']"
132,        [](char *c) {,"['[](', 'char', '*', 'c', ')', '{']","['PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
133,            delete[] c;,"['delete', '[]', 'c', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
134,    });,['});'],['PUNCTUATION']
135,"    asio::async_read(mSocket,","['asio', '::', 'async_read', '(', 'mSocket', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
136,"                    asio::buffer(msg.get(), header_length),","['asio', '::', 'buffer', '(', 'msg.get(), header_length)', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
137,"                    [this, msg](std::error_code ec, std::size_t s/*length*/)","['[', 'this', ',', 'msg', '](', 'std', '::', 'error_code', 'ec', ',', 'std', '::', 'size_t', 's/*length*/)']","['PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'DIRECTORY']"
138,    {,['{'],['PUNCTUATION']
139,        if (!ec),"['if', '(!', 'ec', ')']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
140,        {,['{'],['PUNCTUATION']
141,"            std::cout << ""Message read "" << s << std::endl;","['std', '::', 'cout', '<<', '""Message read ""', '<<', 's', '<<', 'std', '::', 'endl', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'STRING_LITERAL', 'BITWISE_OPERATOR', 'IDENTIFIER', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
142,            readHeader();,"['readHeader', '();']","['IDENTIFIER', 'PUNCTUATION']"
143,        },['}'],['PUNCTUATION']
144,        else,['else'],['KEYWORD']
145,        {,['{'],['PUNCTUATION']
146,"            std::cout << ""closing socket\n"";","['std', '::', 'cout', '<<', '""closing socket\\n""', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'STRING_LITERAL', 'PUNCTUATION']"
147,            mSocket.close();,"['mSocket.close()', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
148,            mIOService.stop();,"['mIOService.stop()', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
149,        },['}'],['PUNCTUATION']
150,    });,['});'],['PUNCTUATION']
151,},['}'],['PUNCTUATION']
152,"

---main.cpp---

",['---main.cpp---'],['NN']
153,#include ,['include'],['IDENTIFIER']
154,"#include ""mytcpconnection.h""","['include', '""mytcpconnection.h""']","['IDENTIFIER', 'STRING_LITERAL']"
155,using namespace std;,"['using', 'namespace', 'std', ';']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
156,int main(),"['int', 'main', '()']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
157,{,['{'],['PUNCTUATION']
158,"    MyTCPConnection conn(""127.0.0.1"", ""12345"");","['MyTCPConnection', 'conn', '(', '""127.0.0.1""', ',', '""12345""', ');']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
159,    conn.Start();,"['conn.Start()', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
160,    while (true),"['while', '(', 'true', ')']","['IDENTIFIER', 'PUNCTUATION', 'BOOLEAN_LITERAL', 'PUNCTUATION']"
161,    {,['{'],['PUNCTUATION']
162,"        conn.Write(""Hello server"");","['conn.Write(""Hello server"")', ';']","['FUNCTION_CALL', 'PUNCTUATION']"
163,        sleep(1);,"['sleep', '(', '1', ');']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
164,    },['}'],['PUNCTUATION']
165,    return 0;,"['return', '0', ';']","['KEYWORD', 'OCTAL_LITERAL', 'PUNCTUATION']"
166,},['}'],['PUNCTUATION']
167,"

---server.go---

",['---server.go---'],['NN']
168,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
169,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
170,"        ""time""","['""time""']",['STRING_LITERAL']
171,"        ""fmt""","['""fmt""']",['STRING_LITERAL']
172,"        ""net""","['""net""']",['STRING_LITERAL']
173,),[')'],['PUNCTUATION']
174,func handle_conn(conn net.Conn) {,"['func', 'handle_conn', '(', 'conn', 'net', '.', 'Conn', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
175,"    b := make([]byte, 1028)","['b', ':=', 'make', '([]', 'byte', ',', '1028', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
176,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
177,"        n, err:= conn.Read(b)","['n', ',', 'err', ':=', 'conn.Read(b)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
178,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
179,            fmt.Println(err.Error()),['fmt.Println(err.Error())'],['FUNCTION_CALL']
180,            break,['break'],['KEYWORD']
181,        },['}'],['PUNCTUATION']
182,        fmt.Println(string(b[:n])),['fmt.Println(string(b[:n]))'],['FUNCTION_CALL']
183,"        _, _ = conn.Write([]byte(""hellohellohello1""))","['_', ',', '_', '=', 'conn.Write([]byte(""hellohellohello1""))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
184,        time.Sleep(time.Second*1),['time.Sleep(time.Second*1)'],['FUNCTION_CALL']
185,    },['}'],['PUNCTUATION']
186,},['}'],['PUNCTUATION']
187,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
188,"        ln, err := net.Listen(""tcp"", "":12345"")","['ln', ',', 'err', ':=', 'net.Listen(""tcp"", "":12345"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
189,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
190,                fmt.Println(err.Error()),['fmt.Println(err.Error())'],['FUNCTION_CALL']
191,        },['}'],['PUNCTUATION']
192,"        fmt.Println(""server started"")","['fmt.Println(""server started"")']",['FUNCTION_CALL']
193,        for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
194,"                conn, err := ln.Accept()","['conn', ',', 'err', ':=', 'ln.Accept()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
195,"        fmt.Println(""connection from"", conn.RemoteAddr())","['fmt.Println(""connection from"", conn.RemoteAddr())']",['FUNCTION_CALL']
196,                if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
197,                        fmt.Println(err.Error()),['fmt.Println(err.Error())'],['FUNCTION_CALL']
198,                        continue,['continue'],['KEYWORD']
199,                },['}'],['PUNCTUATION']
200,                go handle_conn(conn),"['go', 'handle_conn', '(', 'conn', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
201,        },['}'],['PUNCTUATION']
202,},['}'],['PUNCTUATION']
203,"

In this form, the client connects to the server (when the server is running) and keeps reading and writing. If I move the Connect() method in the mytcpconnection constructor to the Run() function (where it is commented now), the connection is not able to connect to the server. 

How can I fix this problem?
","['In', 'this', 'form,', 'the', 'client', 'connects', 'to', 'the', 'server', '(when', 'the', 'server', 'is', 'running)', 'and', 'keeps', 'reading', 'and', 'writing.', 'If', 'I', 'move', 'the', 'Connect()', 'method', 'in', 'the', 'mytcpconnection', 'constructor', 'to', 'the', 'Run()', 'function', '(where', 'it', 'is', 'commented', 'now),', 'the', 'connection', 'is', 'not', 'able', 'to', 'connect', 'to', 'the', 'server.', 'How', 'can', 'I', 'fix', 'this', 'problem?']","['IN', 'DT', 'NN', 'DT', 'NN', 'VBZ', 'TO', 'DT', 'NN', 'VBZ', 'DT', 'NN', 'VBZ', 'JJ', 'CC', 'VBZ', 'NN', 'CC', 'NN', 'IN', 'PRP', 'VBP', 'DT', 'NNP', 'NN', 'IN', 'DT', 'NN', 'NN', 'TO', 'DT', 'NNP', 'NN', 'WRB', 'PRP', 'VBZ', 'VBN', 'IN', 'DT', 'NN', 'VBZ', 'RB', 'JJ', 'TO', 'VB', 'TO', 'DT', 'JJ', 'NNP', 'MD', 'PRP', 'VB', 'DT', 'NN']"
