,text,token,annotation
0,"func ListenPacket(net, laddr string) (PacketConn, error) {","['func', 'ListenPacket', '(', 'net', ',', 'laddr', 'string', ')', '(', 'PacketConn', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
1,"    la, err := resolveAddr(""listen"", net, laddr, noDeadline)","['la', ',', 'err', ':=', 'resolveAddr', '(', '""listen""', ',', 'net', ',', 'laddr', ',', 'noDeadline', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
2,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
3,"        return nil, &OpError{Op: ""listen"", Net: net, Addr: nil, Err: err}","['return', 'nil', ',', '&', 'OpError', '{', 'Op', ':', '""listen""', ',', 'Net', ':', 'net', ',', 'Addr', ':', 'nil', ',', 'Err', ':', 'err', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
4,    },['}'],['OPERATOR']
5,    var l PacketConn,"['var', 'l', 'PacketConn']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
6,    switch la := la.toAddr().(type) {,"['switch', 'la', ':=', 'la', '.', 'toAddr', '().(', 'type', ')', '{']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'OPERATOR']"
7,    case *UDPAddr:,"['case', '*', 'UDPAddr', ':']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
8,"        l, err = ListenUDP(net, la)","['l', ',', 'err', '=', 'ListenUDP', '(', 'net', ',', 'la', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
9,    case *IPAddr:,"['case', '*', 'IPAddr', ':']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
10,"        l, err = ListenIP(net, la)","['l', ',', 'err', '=', 'ListenIP', '(', 'net', ',', 'la', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
11,    case *UnixAddr:,"['case', '*', 'UnixAddr', ':']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
12,"        l, err = ListenUnixgram(net, la)","['l', ',', 'err', '=', 'ListenUnixgram', '(', 'net', ',', 'la', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
13,    default:,"['default', ':']","['KEYWORD', 'OPERATOR']"
14,"        return nil, &OpError{Op: ""listen"", Net: net, Addr: la, Err: &AddrError{Err: ""unexpected address type"", Addr: laddr}}","['return', 'nil', ',', '&', 'OpError', '{', 'Op', ':', '""listen"", Net: net, Addr: la, Err: &AddrError{Err: ""unexpected address type""', ',', 'Addr', ':', 'laddr', '}}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
15,    },['}'],['OPERATOR']
16,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
17,"        return nil, err // l is non-nil interface containing nil pointer","['return', 'nil', ',', 'err', '// l is non-nil interface containing nil pointer']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'COMMENT', 'NN', 'VBZ', 'JJ', 'NN', 'VBG', 'JJ', 'NN']"
18,    },['}'],['OPERATOR']
19,"    return l, nil","['return', 'l', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
20,},['}'],['OPERATOR']
