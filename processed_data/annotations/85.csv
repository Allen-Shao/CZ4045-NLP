,text,token,annotation
0,package main,"['package', 'main']","['keyword', 'identifier']"
1,import (,"['import', '(']","['keyword', 'operator']"
2,"    ""fmt""","['""fmt""']",['string_literal']
3,"    ""math/rand""","['""math/rand""']",['string_literal']
4,),[')'],['operator']
5,type PersonID int,"['type', 'PersonID', 'int']","['keyword', 'identifier', 'identifier']"
6,"func contains(s []int, e int) bool {","['func', 'contains', '(', 's', '[]', 'int', ',', 'e', 'int', ')', 'bool', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator']"
7,"    for _, a := range s {","['for', '_', ',', 'a', ':=', 'range', 's', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator']"
8,        if a == e {,"['if', 'a', '==', 'e', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
9,            return true,"['return', 'true']","['keyword', 'identifier']"
10,        },['}'],['operator']
11,    },['}'],['operator']
12,    return false,"['return', 'false']","['keyword', 'identifier']"
13,},['}'],['operator']
14,"func Person(called_number chan int, claim_prize chan PersonID, received chan bool, coupon []int, person_id PersonID) {","['func', 'Person', '(', 'called_number', 'chan', 'int', ',', 'claim_prize', 'chan', 'PersonID', ',', 'received', 'chan', 'bool', ',', 'coupon', '[]', 'int', ',', 'person_id', 'PersonID', ')', '{']","['keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator']"
15,    numFound := 0,"['numFound', ':=', '0']","['identifier', 'operator', 'decimal_literal']"
16,    for i := 0; i < len(coupon); i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'coupon', ');', 'i', '++', '{']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
17,        current_number := <-called_number,"['current_number', ':=', '<-', 'called_number']","['identifier', 'operator', 'operator', 'identifier']"
18,"        found := contains(coupon, current_number)","['found', ':=', 'contains', '(', 'coupon', ',', 'current_number', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
19,        if found {,"['if', 'found', '{']","['keyword', 'identifier', 'operator']"
20,            numFound++,"['numFound', '++']","['identifier', 'operator']"
21,        },['}'],['operator']
22,        if numFound == len(coupon) {,"['if', 'numFound', '==', 'len', '(', 'coupon', ')', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
23,            claim_prize <- person_id,"['claim_prize', '<-', 'person_id']","['identifier', 'operator', 'identifier']"
24,        } else {,"['}', 'else', '{']","['operator', 'keyword', 'operator']"
25,            received <- true,"['received', '<-', 'true']","['identifier', 'operator', 'identifier']"
26,        },['}'],['operator']
27,    },['}'],['operator']
28,},['}'],['operator']
29,func main() {,"['func', 'main', '()', '{']","['keyword', 'identifier', 'operator', 'operator']"
30,    var called_number chan int,"['var', 'called_number', 'chan', 'int']","['keyword', 'identifier', 'keyword', 'identifier']"
31,    var claim_prize chan PersonID,"['var', 'claim_prize', 'chan', 'PersonID']","['keyword', 'identifier', 'keyword', 'identifier']"
32,    var received chan bool,"['var', 'received', 'chan', 'bool']","['keyword', 'identifier', 'keyword', 'identifier']"
33,"    tokens := make([][]int, 3)","['tokens', ':=', 'make', '([][]', 'int', ',', '3', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
34,    for i := 0; i < 3; i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', '3', ';', 'i', '++', '{']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator']"
35,"        tokens[i] = make([]int, 12)","['tokens', '[', 'i', ']', '=', 'make', '([]', 'int', ',', '12', ')']","['identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
36,        for j := 0; j < 12; j++ {,"['for', 'j', ':=', '0', ';', 'j', '<', '12', ';', 'j', '++', '{']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator']"
37,            num := rand.Intn(100) + 1,"['num', ':=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal']"
38,"            found := contains(tokens[i], num)","['found', ':=', 'contains', '(', 'tokens', '[', 'i', '],', 'num', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
39,            for found {,"['for', 'found', '{']","['keyword', 'identifier', 'operator']"
40,                num = rand.Intn(100) + 1,"['num', '=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal']"
41,"                found = contains(tokens[i], num)","['found', '=', 'contains', '(', 'tokens', '[', 'i', '],', 'num', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
42,            },['}'],['operator']
43,            tokens[i][j] = num,"['tokens', '[', 'i', '][', 'j', ']', '=', 'num']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier']"
44,        },['}'],['operator']
45,    },['}'],['operator']
46,"    go Person(called_number, claim_prize, received, tokens[0], 0)","['go', 'Person', '(', 'called_number', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '0', '],', '0', ')']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator']"
47,"    go Person(called_number, claim_prize, received, tokens[1], 1)","['go', 'Person', '(', 'called_number', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '1', '],', '1', ')']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator']"
48,"    go Person(called_number, claim_prize, received, tokens[2], 2)","['go', 'Person', '(', 'called_number', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '2', '],', '2', ')']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator']"
49,"    claimants := make([]PersonID, 0)","['claimants', ':=', 'make', '([]', 'PersonID', ',', '0', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
50,    prev_called := make(map[int]bool),"['prev_called', ':=', 'make', '(', 'map', '[', 'int', ']', 'bool', ')']","['identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
51,    for i := 0; i < 100; i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', '100', ';', 'i', '++', '{']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator']"
52,        if len(claimants) == 3 {,"['if', 'len', '(', 'claimants', ')', '==', '3', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator']"
53,            break,['break'],['keyword']
54,        },['}'],['operator']
55,        num := rand.Intn(100) + 1,"['num', ':=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal']"
56,"        _, ok := prev_called[num]","['_', ',', 'ok', ':=', 'prev_called', '[', 'num', ']']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
57,        for ok {,"['for', 'ok', '{']","['keyword', 'identifier', 'operator']"
58,            num = rand.Intn(100) + 1,"['num', '=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'decimal_literal']"
59,"            _, ok = prev_called[num]","['_', ',', 'ok', '=', 'prev_called', '[', 'num', ']']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
60,        },['}'],['operator']
61,        prev_called[num] = true,"['prev_called', '[', 'num', ']', '=', 'true']","['identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier']"
62,        called_number <- num,"['called_number', '<-', 'num']","['identifier', 'operator', 'identifier']"
63,        for j := 0; j < 3; j++ {,"['for', 'j', ':=', '0', ';', 'j', '<', '3', ';', 'j', '++', '{']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'operator']"
64,            select {,"['select', '{']","['keyword', 'operator']"
65,            case _ = <-received:,"['case', '_', '=', '<-', 'received', ':']","['keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator']"
66,                continue,['continue'],['keyword']
67,            case pid := <-claim_prize:,"['case', 'pid', ':=', '<-', 'claim_prize', ':']","['keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator']"
68,"                claimants = append(claimants, pid)","['claimants', '=', 'append', '(', 'claimants', ',', 'pid', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
69,            },['}'],['operator']
70,        },['}'],['operator']
71,    },['}'],['operator']
72,    fmt.Println(claimants),"['fmt', '.', 'Println', '(', 'claimants', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
73,},['}'],['operator']
