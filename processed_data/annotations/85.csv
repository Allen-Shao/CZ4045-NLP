,text,token,annotation
0,"Use binary shift operators to load seven bits at a time into a bit buffer, and whenever the bit buffer has eight bits, output that.  At the end, if there are any bits leftover, output a final byte with what's in the buffer.

So something like (don't know Go, but this should be close):

","['Use', 'binary', 'shift', 'operators', 'to', 'load', 'seven', 'bits', 'at', 'a', 'time', 'into', 'a', 'bit', 'buffer,', 'and', 'whenever', 'the', 'bit', 'buffer', 'has', 'eight', 'bits,', 'output', 'that.', 'At', 'the', 'end,', 'if', 'there', 'are', 'any', 'bits', 'leftover,', 'output', 'a', 'final', 'byte', 'with', ""what's"", 'in', 'the', 'buffer.', 'So', 'something', 'like', ""(don't"", 'know', 'Go,', 'but', 'this', 'should', 'be', 'close):']","['NNP', 'JJ', 'NN', 'NNS', 'TO', 'VB', 'CD', 'NNS', 'IN', 'DT', 'NN', 'IN', 'DT', 'NN', 'JJ', 'CC', 'WRB', 'DT', 'NN', 'NN', 'VBZ', 'CD', 'NN', 'NN', 'NN', 'IN', 'DT', 'NN', 'IN', 'EX', 'VBP', 'DT', 'NNS', 'VBP', 'NN', 'DT', 'JJ', 'NN', 'IN', 'NN', 'IN', 'DT', 'NN', 'RB', 'NN', 'IN', 'NNP', 'VBP', 'NNP', 'CC', 'DT', 'MD', 'VB', 'NN']"
1,bits = 0,"['bits', '=', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL']"
2,bitbuf = 0,"['bitbuf', '=', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL']"
3,... some loop ...,"['...', 'some', 'loop', '...']","['PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
4,    ...make your seven bits ...,"['...', 'make', 'your', 'seven', 'bits', '...']","['PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
5,    bitbuf |= sevenbits << bits,"['bitbuf', '|=', 'sevenbits', '<<', 'bits']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'BITWISE_OPERATOR', 'IDENTIFIER']"
6,    bits += 7,"['bits', '+=', '7']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
7,    if bits >= 8 {,"['if', 'bits', '>=', '8', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
8,        output(bitbuf & 0xff),"['output', '(', 'bitbuf', '&', '0xff', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'BITWISE_OPERATOR', 'HEX_LITERAL', 'PUNCTUATION']"
9,        bitbuf >>= 8;,"['bitbuf', '>>=', '8', ';']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
10,        bits -= 8;,"['bits', '-=', '8', ';']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
11,    },['}'],['PUNCTUATION']
12,...,['...'],['PUNCTUATION']
13,if bits > 0 {,"['if', 'bits', '>', '0', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION']"
14,    output(bitbuf),"['output', '(', 'bitbuf', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
15,},['}'],['PUNCTUATION']
