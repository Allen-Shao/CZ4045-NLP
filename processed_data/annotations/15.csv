,text,token,annotation
0,"I'm trying to sign a string and later on verifying it with the public key. My verified result is empty. What am I doing wrong?

","[""I'm"", 'trying', 'to', 'sign', 'a', 'string', 'and', 'later', 'on', 'verifying', 'it', 'with', 'the', 'public', 'key.', 'My', 'verified', 'result', 'is', 'empty.', 'What', 'am', 'I', 'doing', 'wrong?']","['NNP', 'VBG', 'TO', 'VB', 'DT', 'NN', 'CC', 'RB', 'IN', 'VBG', 'PRP', 'IN', 'DT', 'JJ', 'NN', 'NNP', 'VBD', 'NN', 'VBZ', 'JJ', 'WP', 'VBP', 'PRP', 'VBG', 'NN']"
1,    package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""crypto""","['""crypto""']",['STRING_LITERAL']
4,"    ""crypto/rand""","['""crypto/rand""']",['STRING_LITERAL']
5,"    ""crypto/rsa""","['""crypto/rsa""']",['STRING_LITERAL']
6,"    ""crypto/sha256""","['""crypto/sha256""']",['STRING_LITERAL']
7,"    ""crypto/x509""","['""crypto/x509""']",['STRING_LITERAL']
8,"    ""encoding/base64""","['""encoding/base64""']",['STRING_LITERAL']
9,"    ""encoding/pem""","['""encoding/pem""']",['STRING_LITERAL']
10,"    ""errors""","['""errors""']",['STRING_LITERAL']
11,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
12,"    ""io/ioutil""","['""io/ioutil""']",['STRING_LITERAL']
13,),[')'],['PUNCTUATION']
14,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
15,"    signer, err := loadPrivateKey(""private.pem"");","['signer', ',', 'err', ':=', 'loadPrivateKey', '(', '""private.pem""', ');']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
16,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
17,"        fmt.Errorf(""signer is damaged: %v"", err)","['fmt.Errorf(""signer is damaged: %v"", err)']",['FUNCTION_CALL']
18,    },['}'],['PUNCTUATION']
19,"    toSign := ""date: Thu, 05 Jan 2012 21:31:40 GMT"";","['toSign', ':=', '""date: Thu, 05 Jan 2012 21:31:40 GMT""', ';']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL', 'PUNCTUATION']"
20,"    signed, err := signer.Sign([]byte(toSign))","['signed', ',', 'err', ':=', 'signer.Sign([]byte(toSign))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
21,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
22,"        fmt.Errorf(""could not sign request: %v"", err)","['fmt.Errorf(""could not sign request: %v"", err)']",['FUNCTION_CALL']
23,    },['}'],['PUNCTUATION']
24,    sig := base64.StdEncoding.EncodeToString(signed),"['sig', ':=', 'base64', '.', 'StdEncoding.EncodeToString(signed)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
25,"    fmt.Printf(""Encoded: %v\n"", sig)","['fmt.Printf(""Encoded: %v\\n"", sig)']",['FUNCTION_CALL']
26,"    parser, perr := loadPublicKey(""public.pem"");","['parser', ',', 'perr', ':=', 'loadPublicKey', '(', '""public.pem""', ');']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
27,    if perr != nil {,"['if', 'perr', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
28,"        fmt.Errorf(""could not sign request: %v"", err)","['fmt.Errorf(""could not sign request: %v"", err)']",['FUNCTION_CALL']
29,    },['}'],['PUNCTUATION']
30,"    unsigned, err := parser.Unsign(signed);","['unsigned', ',', 'err', ':=', 'parser.Unsign(signed)', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION']"
31,     if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
32,"        fmt.Errorf(""could not sign request: %v"", err)","['fmt.Errorf(""could not sign request: %v"", err)']",['FUNCTION_CALL']
33,    },['}'],['PUNCTUATION']
34,"    fmt.Printf(""Decrypted: %v\n"", base64.StdEncoding.EncodeToString(unsigned))    ","['fmt.Printf(""Decrypted: %v\\n"", base64.StdEncoding.EncodeToString(unsigned))']",['FUNCTION_CALL']
35,},['}'],['PUNCTUATION']
36,// loadPrivateKey loads an parses a PEM encoded private key file.,"['//', 'loadPrivateKey', 'loads', 'an', 'parses', 'a', 'PEM', 'encoded', 'private', 'key', 'file.']","['COMMENT', 'NN', 'VBZ', 'DT', 'VBZ', 'DT', 'NNP', 'VBD', 'JJ', 'NN', 'NN']"
37,"func loadPublicKey(path string) (Unsigner, error) {","['func', 'loadPublicKey', '(', 'path', 'string', ')', '(', 'Unsigner', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
38,"        data, err := ioutil.ReadFile(path)","['data', ',', 'err', ':=', 'ioutil.ReadFile(path)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
39,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
40,"                return nil, err","['return', 'nil', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
41,        },['}'],['PUNCTUATION']
42,        return parsePublicKey(data),"['return', 'parsePublicKey', '(', 'data', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
43,},['}'],['PUNCTUATION']
44,// parsePublicKey parses a PEM encoded private key.,"['//', 'parsePublicKey', 'parses', 'a', 'PEM', 'encoded', 'private', 'key.']","['COMMENT', 'NN', 'VBZ', 'DT', 'NNP', 'JJ', 'JJ', 'NN']"
45,"func parsePublicKey(pemBytes []byte) (Unsigner, error) {","['func', 'parsePublicKey', '(', 'pemBytes', '[]', 'byte', ')', '(', 'Unsigner', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
46,"        block, _ := pem.Decode(pemBytes)","['block', ',', '_', ':=', 'pem.Decode(pemBytes)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
47,        if block == nil {,"['if', 'block', '==', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
48,"                return nil, errors.New(""ssh: no key found"")","['return', 'nil', ',', 'errors.New(""ssh: no key found"")']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
49,        },['}'],['PUNCTUATION']
50,        var rawkey interface{},"['var', 'rawkey', 'interface', '{}']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
51,        switch block.Type {,"['switch', 'block', '.', 'Type', '{']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
52,"        case ""PUBLIC KEY"":","['case', '""PUBLIC KEY""', ':']","['KEYWORD', 'STRING_LITERAL', 'PUNCTUATION']"
53,"                rsa, err := x509.ParsePKIXPublicKey(block.Bytes)","['rsa', ',', 'err', ':=', 'x509.ParsePKIXPublicKey(block.Bytes)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
54,                if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
55,"                        return nil, err","['return', 'nil', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
56,                },['}'],['PUNCTUATION']
57,                rawkey = rsa,"['rawkey', '=', 'rsa']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
58,        default:,"['default', ':']","['KEYWORD', 'PUNCTUATION']"
59,"                return nil, fmt.Errorf(""ssh: unsupported key type %q"", block.Type)","['return', 'nil', ',', 'fmt.Errorf(""ssh: unsupported key type %q"", block.Type)']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
60,        },['}'],['PUNCTUATION']
61,        return newUnsignerFromKey(rawkey),"['return', 'newUnsignerFromKey', '(', 'rawkey', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
62,},['}'],['PUNCTUATION']
63,// loadPrivateKey loads an parses a PEM encoded private key file.,"['//', 'loadPrivateKey', 'loads', 'an', 'parses', 'a', 'PEM', 'encoded', 'private', 'key', 'file.']","['COMMENT', 'NN', 'VBZ', 'DT', 'VBZ', 'DT', 'NNP', 'VBD', 'JJ', 'NN', 'NN']"
64,"func loadPrivateKey(path string) (Signer, error) {","['func', 'loadPrivateKey', '(', 'path', 'string', ')', '(', 'Signer', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
65,"        data, err := ioutil.ReadFile(path)","['data', ',', 'err', ':=', 'ioutil.ReadFile(path)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
66,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
67,"                return nil, err","['return', 'nil', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
68,        },['}'],['PUNCTUATION']
69,        return parsePrivateKey(data),"['return', 'parsePrivateKey', '(', 'data', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
70,},['}'],['PUNCTUATION']
71,// parsePublicKey parses a PEM encoded private key.,"['//', 'parsePublicKey', 'parses', 'a', 'PEM', 'encoded', 'private', 'key.']","['COMMENT', 'NN', 'VBZ', 'DT', 'NNP', 'JJ', 'JJ', 'NN']"
72,"func parsePrivateKey(pemBytes []byte) (Signer, error) {","['func', 'parsePrivateKey', '(', 'pemBytes', '[]', 'byte', ')', '(', 'Signer', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
73,"        block, _ := pem.Decode(pemBytes)","['block', ',', '_', ':=', 'pem.Decode(pemBytes)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
74,        if block == nil {,"['if', 'block', '==', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
75,"                return nil, errors.New(""ssh: no key found"")","['return', 'nil', ',', 'errors.New(""ssh: no key found"")']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
76,        },['}'],['PUNCTUATION']
77,        var rawkey interface{},"['var', 'rawkey', 'interface', '{}']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
78,        switch block.Type {,"['switch', 'block', '.', 'Type', '{']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
79,"        case ""RSA PRIVATE KEY"":","['case', '""RSA PRIVATE KEY""', ':']","['KEYWORD', 'STRING_LITERAL', 'PUNCTUATION']"
80,"                rsa, err := x509.ParsePKCS1PrivateKey(block.Bytes)","['rsa', ',', 'err', ':=', 'x509.ParsePKCS1PrivateKey(block.Bytes)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
81,                if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
82,"                        return nil, err","['return', 'nil', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
83,                },['}'],['PUNCTUATION']
84,                rawkey = rsa,"['rawkey', '=', 'rsa']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
85,        default:,"['default', ':']","['KEYWORD', 'PUNCTUATION']"
86,"                return nil, fmt.Errorf(""ssh: unsupported key type %q"", block.Type)","['return', 'nil', ',', 'fmt.Errorf(""ssh: unsupported key type %q"", block.Type)']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
87,        },['}'],['PUNCTUATION']
88,        return newSignerFromKey(rawkey),"['return', 'newSignerFromKey', '(', 'rawkey', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
89,},['}'],['PUNCTUATION']
90,// A Signer is can create signatures that verify against a public key.,"['//', 'A', 'Signer', 'is', 'can', 'create', 'signatures', 'that', 'verify', 'against', 'a', 'public', 'key.']","['COMMENT', 'DT', 'NNP', 'VBZ', 'MD', 'VB', 'NNS', 'WDT', 'VBP', 'IN', 'DT', 'JJ', 'NN']"
91,type Signer interface {,"['type', 'Signer', 'interface', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
92,        // Sign returns raw signature for the given data. This method,"['//', 'Sign', 'returns', 'raw', 'signature', 'for', 'the', 'given', 'data.', 'This', 'method']","['COMMENT', 'NNP', 'VBZ', 'JJ', 'NN', 'IN', 'DT', 'VBN', 'NN', 'DT', 'NN']"
93,        // will apply the hash specified for the keytype to the data.,"['//', 'will', 'apply', 'the', 'hash', 'specified', 'for', 'the', 'keytype', 'to', 'the', 'data.']","['COMMENT', 'MD', 'VB', 'DT', 'NN', 'VBD', 'IN', 'DT', 'NN', 'TO', 'DT', 'NN']"
94,"        Sign(data []byte) ([]byte, error)","['Sign', '(', 'data', '[]', 'byte', ')', '([]', 'byte', ',', 'error', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
95,},['}'],['PUNCTUATION']
96,// A Signer is can create signatures that verify against a public key.,"['//', 'A', 'Signer', 'is', 'can', 'create', 'signatures', 'that', 'verify', 'against', 'a', 'public', 'key.']","['COMMENT', 'DT', 'NNP', 'VBZ', 'MD', 'VB', 'NNS', 'WDT', 'VBP', 'IN', 'DT', 'JJ', 'NN']"
97,type Unsigner interface {,"['type', 'Unsigner', 'interface', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
98,        // Sign returns raw signature for the given data. This method,"['//', 'Sign', 'returns', 'raw', 'signature', 'for', 'the', 'given', 'data.', 'This', 'method']","['COMMENT', 'NNP', 'VBZ', 'JJ', 'NN', 'IN', 'DT', 'VBN', 'NN', 'DT', 'NN']"
99,        // will apply the hash specified for the keytype to the data.,"['//', 'will', 'apply', 'the', 'hash', 'specified', 'for', 'the', 'keytype', 'to', 'the', 'data.']","['COMMENT', 'MD', 'VB', 'DT', 'NN', 'VBD', 'IN', 'DT', 'NN', 'TO', 'DT', 'NN']"
100,"        Unsign(data []byte) ([]byte, error)","['Unsign', '(', 'data', '[]', 'byte', ')', '([]', 'byte', ',', 'error', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
101,},['}'],['PUNCTUATION']
102,"func newSignerFromKey(k interface{}) (Signer, error) {","['func', 'newSignerFromKey', '(', 'k', 'interface', '{})', '(', 'Signer', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
103,        var sshKey Signer,"['var', 'sshKey', 'Signer']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
104,        switch t := k.(type) {,"['switch', 't', ':=', 'k', '.(', 'type', ')', '{']","['IDENTIFIER', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
105,        case *rsa.PrivateKey:,"['case', '*', 'rsa', '.', 'PrivateKey', ':']","['KEYWORD', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
106,                sshKey = &rsaPrivateKey{t},"['sshKey', '=', '&', 'rsaPrivateKey', '{', 't', '}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
107,        default: ,"['default', ':']","['KEYWORD', 'PUNCTUATION']"
108,"                return nil, fmt.Errorf(""ssh: unsupported key type %T"", k)","['return', 'nil', ',', 'fmt.Errorf(""ssh: unsupported key type %T"", k)']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
109,        },['}'],['PUNCTUATION']
110,"        return sshKey, nil","['return', 'sshKey', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
111,},['}'],['PUNCTUATION']
112,"func newUnsignerFromKey(k interface{}) (Unsigner, error) {","['func', 'newUnsignerFromKey', '(', 'k', 'interface', '{})', '(', 'Unsigner', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
113,        var sshKey Unsigner,"['var', 'sshKey', 'Unsigner']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
114,        switch t := k.(type) {,"['switch', 't', ':=', 'k', '.(', 'type', ')', '{']","['IDENTIFIER', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
115,        case *rsa.PublicKey:,"['case', '*', 'rsa', '.', 'PublicKey', ':']","['KEYWORD', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
116,                sshKey = &rsaPublicKey{t},"['sshKey', '=', '&', 'rsaPublicKey', '{', 't', '}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
117,        default:,"['default', ':']","['KEYWORD', 'PUNCTUATION']"
118,"                return nil, fmt.Errorf(""ssh: unsupported key type %T"", k)","['return', 'nil', ',', 'fmt.Errorf(""ssh: unsupported key type %T"", k)']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
119,        },['}'],['PUNCTUATION']
120,"        return sshKey, nil","['return', 'sshKey', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
121,},['}'],['PUNCTUATION']
122,type rsaPublicKey struct {,"['type', 'rsaPublicKey', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
123,    *rsa.PublicKey,"['*', 'rsa', '.', 'PublicKey']","['POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
124,},['}'],['PUNCTUATION']
125,type rsaPrivateKey struct {,"['type', 'rsaPrivateKey', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
126,        *rsa.PrivateKey,"['*', 'rsa', '.', 'PrivateKey']","['POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
127,},['}'],['PUNCTUATION']
128,// Sign signs data with rsa-sha256,"['//', 'Sign', 'signs', 'data', 'with', 'rsa-sha256']","['COMMENT', 'NNP', 'NNS', 'NNS', 'IN', 'NN']"
129,"func (r *rsaPrivateKey) Sign(data []byte) ([]byte, error) {","['func', '(', 'r', '*', 'rsaPrivateKey', ')', 'Sign', '(', 'data', '[]', 'byte', ')', '([]', 'byte', ',', 'error', ')', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
130,        h := sha256.New(),"['h', ':=', 'sha256.New()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
131,        h.Write(data),['h.Write(data)'],['FUNCTION_CALL']
132,        d := h.Sum(nil),"['d', ':=', 'h.Sum(nil)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
133,"        return rsa.SignPKCS1v15(rand.Reader, r.PrivateKey, crypto.SHA256, d)","['return', 'rsa.SignPKCS1v15(rand.Reader, r.PrivateKey, crypto.SHA256, d)']","['KEYWORD', 'FUNCTION_CALL']"
134,},['}'],['PUNCTUATION']
135,// Unsign encrypts data with rsa-sha256,"['//', 'Unsign', 'encrypts', 'data', 'with', 'rsa-sha256']","['COMMENT', 'NNP', 'VBZ', 'NNS', 'IN', 'NN']"
136,"func (r *rsaPublicKey) Unsign(message []byte) ([]byte, error) {  ","['func', '(', 'r', '*', 'rsaPublicKey', ')', 'Unsign', '(', 'message', '[]', 'byte', ')', '([]', 'byte', ',', 'error', ')', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
137,"        return rsa.EncryptPKCS1v15(rand.Reader, r.PublicKey, message)        ","['return', 'rsa.EncryptPKCS1v15(rand.Reader, r.PublicKey, message)']","['KEYWORD', 'FUNCTION_CALL']"
138,},['}'],['PUNCTUATION']
139,"

private.pem looks like this:

","['private.pem', 'looks', 'like', 'this:']","['JJ', 'NNS', 'IN', 'NN']"
140,-----BEGIN RSA PRIVATE KEY-----,"['-----', 'BEGIN', 'RSA', 'PRIVATE', 'KEY', '-----']","['PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
141,MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF,"['MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj', '+', 'CvfSC8', '+', 'q28hxA161QF']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
142,NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F,['NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F'],['DIRECTORY']
143,UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB,"['UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc', '+', '2', 'xjJwoYi', '+', '1', 'hqp1fIekaxsyQIDAQAB']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER']"
144,AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA,"['AoGBAJR8ZkCUvx5kzv', '+', 'utdl7T5MnordT1TvoXXJGXK7ZZ', '+', 'UuvMNUCdN2QPc4sBiA']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
145,QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK,"['QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9', '+', 'xEpubyeW2oH4Zx71wqBtOK']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
146,kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg,['kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg'],['DIRECTORY']
147,f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u,['f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u'],['DIRECTORY']
148,412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc,['412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc'],['DIRECTORY']
149,mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7,['mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7'],['DIRECTORY']
150,kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA,['kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA'],['DIRECTORY']
151,gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW,['gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW'],['IDENTIFIER']
152,G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI,['G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI'],['DIRECTORY']
153,7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==,"['7', 'U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA', '==']","['DECIMAL_LITERAL', 'IDENTIFIER', 'RELATION_OPERATOR']"
154,-----END RSA PRIVATE KEY-----,"['-----', 'END', 'RSA', 'PRIVATE', 'KEY', '-----']","['PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
155,"

And public.pem:

","['And', 'public.pem:']","['CC', 'NN']"
156,-----BEGIN PUBLIC KEY-----,"['-----', 'BEGIN', 'PUBLIC', 'KEY', '-----']","['PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
157,MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCFENGw33yGihy92pDjZQhl0C3,['MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCFENGw33yGihy92pDjZQhl0C3'],['IDENTIFIER']
158,6rPJj+CvfSC8+q28hxA161QFNUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6,['6rPJj+CvfSC8+q28hxA161QFNUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6'],['DIRECTORY']
159,Z4UMR7EOcpfdUE9Hf3m/hs+FUR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJw,['Z4UMR7EOcpfdUE9Hf3m/hs+FUR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJw'],['DIRECTORY']
160,oYi+1hqp1fIekaxsyQIDAQAB,"['oYi', '+', '1', 'hqp1fIekaxsyQIDAQAB']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER']"
161,-----END PUBLIC KEY-----,"['-----', 'END', 'PUBLIC', 'KEY', '-----']","['PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
162,"

Thanks. 
",['Thanks.'],['NN']
