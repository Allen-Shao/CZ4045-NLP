,text,token,annotation
0,// Make a bridge between dstNet which is,['// Make a bridge between dstNet which is'],"['COMMENT', 'VB', 'DT', 'NN', 'IN', 'NN', 'WDT', 'VBZ']"
1,// usually behind NAT and srcNet which is usually a client,['// usually behind NAT and srcNet which is usually a client'],"['COMMENT', 'RB', 'IN', 'NNP', 'CC', 'NN', 'WDT', 'VBZ', 'RB', 'DT', 'NN']"
2,// which wants to route the traffic though the NAT machine.,['// which wants to route the traffic though the NAT machine.'],"['COMMENT', 'WDT', 'VBZ', 'TO', 'VB', 'DT', 'NN', 'IN', 'DT', 'NNP', 'NN', '.']"
3,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
4,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
5,"    log ""github.com/golang/glog""","['log', '""github.com/golang/glog""']","['IDENTIFIER', 'STRING_LITERAL']"
6,"    ""io""","['""io""']",['STRING_LITERAL']
7,"    ""net""","['""net""']",['STRING_LITERAL']
8,),[')'],['OPERATOR']
9,// listen on the dstNet so that we can,['// listen on the dstNet so that we can'],"['COMMENT', 'VBN', 'IN', 'DT', 'NN', 'RB', 'IN', 'PRP', 'MD']"
10,// create a connection with the NAT client,['// create a connection with the NAT client'],"['COMMENT', 'VB', 'DT', 'NN', 'IN', 'DT', 'NNP', 'NN']"
11,"var dstNet *net.TCPAddr = &net.TCPAddr{IP: net.ParseIP(""0.0.0.0""), Port: 9000}","['var', 'dstNet', '*', 'net', '.', 'TCPAddr', '=', '&', 'net', '.', 'TCPAddr', '{', 'IP', ':', 'net', '.', 'ParseIP', '(', '""0.0.0.0""', '),', 'Port', ':', '9000', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
12,// listen on srcNet so that we can get traffic,['// listen on srcNet so that we can get traffic'],"['COMMENT', 'VBN', 'IN', 'NN', 'RB', 'IN', 'PRP', 'MD', 'VB', 'NN']"
13,// to forward to dstNet,['// to forward to dstNet'],"['COMMENT', 'TO', 'VB', 'TO', 'VB']"
14,"var srcNet *net.TCPAddr = &net.TCPAddr{IP: net.ParseIP(""0.0.0.0""), Port: 9001}","['var', 'srcNet', '*', 'net', '.', 'TCPAddr', '=', '&', 'net', '.', 'TCPAddr', '{', 'IP', ':', 'net', '.', 'ParseIP', '(', '""0.0.0.0""', '),', 'Port', ':', '9001', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
15,"var errCh = make(chan error, 1)","['var', 'errCh', '=', 'make', '(', 'chan', 'error', ',', '1', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
16,// make a channel to send the reverse connections,['// make a channel to send the reverse connections'],"['COMMENT', 'VB', 'DT', 'NN', 'TO', 'VB', 'DT', 'NN', 'NNS']"
17,"var lrCh = make(chan *net.TCPConn, 1)","['var', 'lrCh', '=', 'make', '(', 'chan', '*', 'net', '.', 'TCPConn', ',', '1', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
18,"var lrNewCh = make(chan int, 1)","['var', 'lrNewCh', '=', 'make', '(', 'chan', 'int', ',', '1', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
19,func listenDst() {,"['func', 'listenDst', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
20,    // Listen on the dstNet,['// Listen on the dstNet'],"['COMMENT', 'VBN', 'IN', 'DT', 'NN']"
21,"    lr, err := net.ListenTCP(""tcp"", dstNet)","['lr', ',', 'err', ':=', 'net', '.', 'ListenTCP', '(', '""tcp""', ',', 'dstNet', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
22,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
23,        log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
24,        errCh <- err,"['errCh', '<-', 'err']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
25,        return,['return'],['KEYWORD']
26,    },['}'],['OPERATOR']
27,    // accept the connection,['// accept the connection'],"['COMMENT', 'IN', 'DT', 'NN']"
28,    for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
29,"        lrConn, err := lr.AcceptTCP()","['lrConn', ',', 'err', ':=', 'lr', '.', 'AcceptTCP', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
30,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
31,                log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
32,                //errCh <- err,['//errCh <- err'],"['COMMENT', 'NN', 'SYM', ':', 'NN']"
33,                //return,['//return'],"['COMMENT', 'NN']"
34,        },['}'],['OPERATOR']
35,        status := <-lrNewCh,"['status', ':=', '<-', 'lrNewCh']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
36,"            log.Errorf(""status request is %v"", status)","['log', '.', 'Errorf', '(', '""status request is %v""', ',', 'status', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
37,            if status == 1{,"['if', 'status', '==', '1', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
38,"                log.Errorf(""we close and restart the listener and the connection"")","['log', '.', 'Errorf', '(', '""we close and restart the listener and the connection""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
39,                if err =  lrConn.Close(); err !=nil{,"['if', 'err', '=', 'lrConn', '.', 'Close', '();', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
40,                    log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
41,                },['}'],['OPERATOR']
42,                if err =  lr.Close(); err !=nil{,"['if', 'err', '=', 'lr', '.', 'Close', '();', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
43,                    log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
44,                },['}'],['OPERATOR']
45,"                    lr, err = net.ListenTCP(""tcp"", dstNet)","['lr', ',', 'err', '=', 'net', '.', 'ListenTCP', '(', '""tcp""', ',', 'dstNet', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
46,                    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
47,                        log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
48,                        errCh <- err,"['errCh', '<-', 'err']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
49,                        return,['return'],['KEYWORD']
50,                    },['}'],['OPERATOR']
51,"                lrConn, err = lr.AcceptTCP()","['lrConn', ',', 'err', '=', 'lr', '.', 'AcceptTCP', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
52,                if err !=nil{,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
53,                    log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
54,                    errCh <- err,"['errCh', '<-', 'err']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
55,                },['}'],['OPERATOR']
56,            }else{,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
57,"                log.Errorf(""new connection on its way"")","['log', '.', 'Errorf', '(', '""new connection on its way""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
58,                lrCh <- lrConn,"['lrCh', '<-', 'lrConn']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
59,            },['}'],['OPERATOR']
60,    //  default:,['//  default:'],"['COMMENT', 'NN', ':']"
61,"            // log.Errorf(""accepting new connections"")","['// log.Errorf(""accepting new connections"")']","['COMMENT', 'NN', '(', '``', 'VBG', 'JJ', 'NNS', ""''"", ')']"
62,    },['}'],['OPERATOR']
63,},['}'],['OPERATOR']
64,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
65,    go func() {,"['go', 'func', '()', '{']","['KEYWORD', 'KEYWORD', 'OPERATOR', 'OPERATOR']"
66,        for err := range errCh {,"['for', 'err', ':=', 'range', 'errCh', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
67,            if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
68,                panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
69,            },['}'],['OPERATOR']
70,        },['}'],['OPERATOR']
71,    }(),['}()'],['OPERATOR']
72,    // listen for the nat server,['// listen for the nat server'],"['COMMENT', 'NN', 'IN', 'DT', 'NN', 'NN']"
73,    go listenDst(),"['go', 'listenDst', '()']","['KEYWORD', 'IDENTIFIER', 'OPERATOR']"
74,    // listen for clients to connect,['// listen for clients to connect'],"['COMMENT', 'NN', 'IN', 'NNS', 'TO', 'VB']"
75,"    l, err := net.ListenTCP(""tcp"", srcNet)","['l', ',', 'err', ':=', 'net', '.', 'ListenTCP', '(', '""tcp""', ',', 'srcNet', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
76,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
77,        log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
78,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
79,    },['}'],['OPERATOR']
80,    // accept the connection,['// accept the connection'],"['COMMENT', 'IN', 'DT', 'NN']"
81,    for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
82,"        conn, err := l.AcceptTCP()","['conn', ',', 'err', ':=', 'l', '.', 'AcceptTCP', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
83,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
84,            log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
85,            panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
86,        },['}'],['OPERATOR']
87,        // serve the connection,['// serve the connection'],"['COMMENT', 'VB', 'DT', 'NN']"
88,        go func(conn *net.TCPConn) {,"['go', 'func', '(', 'conn', '*', 'net', '.', 'TCPConn', ')', '{']","['KEYWORD', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
89,            defer conn.Close(),"['defer', 'conn', '.', 'Close', '()']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
90,            lrNewCh <- 0,"['lrNewCh', '<-', '0']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
91,            dst := <-lrCh,"['dst', ':=', '<-', 'lrCh']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
92,            defer dst.Close(),"['defer', 'dst', '.', 'Close', '()']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
93,"            proxy(dst, conn)","['proxy', '(', 'dst', ',', 'conn', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
94,        }(conn),"['}(', 'conn', ')']","['OPERATOR', 'IDENTIFIER', 'OPERATOR']"
95,    },['}'],['OPERATOR']
96,},['}'],['OPERATOR']
97,"func proxy(srvConn, cliConn *net.TCPConn) {","['func', 'proxy', '(', 'srvConn', ',', 'cliConn', '*', 'net', '.', 'TCPConn', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
98,    // channels to wait on the close event for each connection,['// channels to wait on the close event for each connection'],"['COMMENT', 'NNS', 'TO', 'VB', 'IN', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NN']"
99,"    serverClosed := make(chan struct{}, 1)","['serverClosed', ':=', 'make', '(', 'chan', 'struct', '{},', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'KEYWORD', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
100,"    clientClosed := make(chan struct{}, 1)","['clientClosed', ':=', 'make', '(', 'chan', 'struct', '{},', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'KEYWORD', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
101,"    go broker(srvConn, cliConn, clientClosed)","['go', 'broker', '(', 'srvConn', ',', 'cliConn', ',', 'clientClosed', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
102,"    go broker(cliConn, srvConn, serverClosed)","['go', 'broker', '(', 'cliConn', ',', 'srvConn', ',', 'serverClosed', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
103,"    // wait for one half of the proxy to exit, then trigger a shutdown of the","['// wait for one half of the proxy to exit, then trigger a shutdown of the']","['COMMENT', 'NN', 'IN', 'CD', 'NN', 'IN', 'DT', 'NN', 'TO', 'NN', ',', 'RB', 'VBZ', 'DT', 'NN', 'IN', 'DT']"
104,    // other half by calling CloseRead(). This will break the read loop in the,['// other half by calling CloseRead(). This will break the read loop in the'],"['COMMENT', 'JJ', 'NN', 'IN', 'VBG', 'NNP', '(', ')', '.', 'DT', 'MD', 'VB', 'DT', 'JJ', 'NN', 'IN', 'DT']"
105,    // broker and allow us to fully close the connection cleanly without a,['// broker and allow us to fully close the connection cleanly without a'],"['COMMENT', 'NN', 'CC', 'VB', 'PRP', 'TO', 'RB', 'VB', 'DT', 'NN', 'RB', 'IN', 'DT']"
106,"    // ""use of closed network connection"" error.","['// ""use of closed network connection"" error.']","['COMMENT', '``', 'NN', 'IN', 'JJ', 'NN', 'NN', ""''"", 'NN', '.']"
107,    var waitFor chan struct{},"['var', 'waitFor', 'chan', 'struct', '{}']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'KEYWORD', 'OPERATOR']"
108,    select {,"['select', '{']","['KEYWORD', 'OPERATOR']"
109,    case <-clientClosed:,"['case', '<-', 'clientClosed', ':']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
110,        // the client closed first and any more packets from the server aren't,"[""// the client closed first and any more packets from the server aren't""]","['COMMENT', 'DT', 'NN', 'VBD', 'RB', 'CC', 'DT', 'JJR', 'NNS', 'IN', 'DT', 'NN', 'VBP', 'RB']"
111,"        // useful, so we can optionally SetLinger(0) here to recycle the port","['// useful, so we can optionally SetLinger(0) here to recycle the port']","['COMMENT', 'JJ', ',', 'IN', 'PRP', 'MD', 'RB', 'NNP', '(', 'CD', ')', 'RB', 'TO', 'VB', 'DT', 'NN']"
112,        // faster.,['// faster.'],"['COMMENT', 'RBR', '.']"
113,        srvConn.SetLinger(0),"['srvConn', '.', 'SetLinger', '(', '0', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
114,        srvConn.CloseRead(),"['srvConn', '.', 'CloseRead', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
115,        waitFor = serverClosed,"['waitFor', '=', 'serverClosed']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
116,    case <-serverClosed:,"['case', '<-', 'serverClosed', ':']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
117,        cliConn.CloseRead(),"['cliConn', '.', 'CloseRead', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
118,        waitFor = clientClosed,"['waitFor', '=', 'clientClosed']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
119,    },['}'],['OPERATOR']
120,    // Wait for the other connection to close.,['// Wait for the other connection to close.'],"['COMMENT', 'NNP', 'IN', 'DT', 'JJ', 'NN', 'TO', 'VB', '.']"
121,"    // This ""waitFor"" pattern isn't required, but gives us a way to track the","['// This ""waitFor"" pattern isn\'t required, but gives us a way to track the']","['COMMENT', 'DT', '``', 'NN', ""''"", 'NN', 'VBZ', 'RB', 'VBN', ',', 'CC', 'VBZ', 'PRP', 'DT', 'NN', 'TO', 'VB', 'DT']"
122,    // connection and ensure all copies terminate correctly; we can trigger,['// connection and ensure all copies terminate correctly; we can trigger'],"['COMMENT', 'NN', 'CC', 'VB', 'DT', 'NNS', 'VBP', 'RB', ':', 'PRP', 'MD', 'VB']"
123,    // stats on entry and deferred exit of this function.,['// stats on entry and deferred exit of this function.'],"['COMMENT', 'NNS', 'IN', 'NN', 'CC', 'JJ', 'NN', 'IN', 'DT', 'NN', '.']"
124,    <-waitFor,"['<-', 'waitFor']","['OPERATOR', 'IDENTIFIER']"
125,},['}'],['OPERATOR']
126,// This does the actual data transfer.,['// This does the actual data transfer.'],"['COMMENT', 'DT', 'VBZ', 'DT', 'JJ', 'NN', 'NN', '.']"
127,// The broker only closes the Read side.,['// The broker only closes the Read side.'],"['COMMENT', 'DT', 'NN', 'RB', 'VBZ', 'DT', 'NNP', 'NN', '.']"
128,"func broker(dst, src net.Conn, srcClosed chan struct{}) {","['func', 'broker', '(', 'dst', ',', 'src', 'net', '.', 'Conn', ',', 'srcClosed', 'chan', 'struct', '{})', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'KEYWORD', 'OPERATOR', 'OPERATOR']"
129,    // We can handle errors in a finer-grained manner by inlining io.Copy (it's,"[""// We can handle errors in a finer-grained manner by inlining io.Copy (it's""]","['COMMENT', 'PRP', 'MD', 'VB', 'NNS', 'IN', 'DT', 'JJ', 'NN', 'IN', 'VBG', 'NN', '(', 'PRP', 'VBZ']"
130,"    // simple, and we drop the ReaderFrom or WriterTo checks for","['// simple, and we drop the ReaderFrom or WriterTo checks for']","['COMMENT', 'NN', ',', 'CC', 'PRP', 'VBP', 'DT', 'NNP', 'CC', 'NNP', 'NNS', 'IN']"
131,"    // net.Conn->net.Conn transfers, which aren't needed). This would also let","[""// net.Conn->net.Conn transfers, which aren't needed). This would also let""]","['COMMENT', 'JJ', 'NNP', 'NN', 'NNS', ',', 'WDT', 'VBP', 'RB', 'VBN', ')', '.', 'DT', 'MD', 'RB', 'VB']"
132,    // us adjust buffersize.,['// us adjust buffersize.'],"['COMMENT', 'PRP', 'VBP', 'VB', '.']"
133,"    n, err := io.Copy(dst, src)","['n', ',', 'err', ':=', 'io', '.', 'Copy', '(', 'dst', ',', 'src', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
134,"    log.Errorf("" %v bytes copied"", n)","['log', '.', 'Errorf', '(', '"" %v bytes copied""', ',', 'n', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
135,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
136,"        log.Errorf(""Copy error: %s"", err)","['log', '.', 'Errorf', '(', '""Copy error: %s""', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
137,        // errCh <- err,['// errCh <- err'],"['COMMENT', 'NN', 'SYM', ':', 'NN']"
138,    },['}'],['OPERATOR']
139,    if err := src.Close(); err != nil {,"['if', 'err', ':=', 'src', '.', 'Close', '();', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
140,"        log.Errorf(""Close error: %s"", err)","['log', '.', 'Errorf', '(', '""Close error: %s""', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
141,        errCh <- err,"['errCh', '<-', 'err']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
142,    },['}'],['OPERATOR']
143,    if n == 0 {,"['if', 'n', '==', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
144,        lrNewCh <- 1,"['lrNewCh', '<-', '1']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
145,    },['}'],['OPERATOR']
146,    srcClosed <- struct{}{},"['srcClosed', '<-', 'struct', '{}{}']","['IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR']"
147,},['}'],['OPERATOR']
