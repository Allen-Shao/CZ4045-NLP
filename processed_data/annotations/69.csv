,text,token,annotation
0,// Make a bridge between dstNet which is,['// Make a bridge between dstNet which is'],"['comment', 'Make', 'a', 'bridge', 'between', 'dstNet', 'which', 'is']"
1,// usually behind NAT and srcNet which is usually a client,['// usually behind NAT and srcNet which is usually a client'],"['comment', 'usually', 'behind', 'NAT', 'and', 'srcNet', 'which', 'is', 'usually', 'a', 'client']"
2,// which wants to route the traffic though the NAT machine.,['// which wants to route the traffic though the NAT machine.'],"['comment', 'which', 'wants', 'to', 'route', 'the', 'traffic', 'though', 'the', 'NAT', 'machine', '.']"
3,package main,"['package', 'main']","['keyword', 'identifier']"
4,import (,"['import', '(']","['keyword', 'operator']"
5,"    log ""github.com/golang/glog""","['log', '""github.com/golang/glog""']","['identifier', 'string_literal']"
6,"    ""io""","['""io""']",['string_literal']
7,"    ""net""","['""net""']",['string_literal']
8,),[')'],['operator']
9,// listen on the dstNet so that we can,['// listen on the dstNet so that we can'],"['comment', 'listen', 'on', 'the', 'dstNet', 'so', 'that', 'we', 'can']"
10,// create a connection with the NAT client,['// create a connection with the NAT client'],"['comment', 'create', 'a', 'connection', 'with', 'the', 'NAT', 'client']"
11,"var dstNet *net.TCPAddr = &net.TCPAddr{IP: net.ParseIP(""0.0.0.0""), Port: 9000}","['var', 'dstNet', '*', 'net', '.', 'TCPAddr', '=', '&', 'net', '.', 'TCPAddr', '{', 'IP', ':', 'net', '.', 'ParseIP', '(', '""0.0.0.0""', '),', 'Port', ':', '9000', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
12,// listen on srcNet so that we can get traffic,['// listen on srcNet so that we can get traffic'],"['comment', 'listen', 'on', 'srcNet', 'so', 'that', 'we', 'can', 'get', 'traffic']"
13,// to forward to dstNet,['// to forward to dstNet'],"['comment', 'to', 'forward', 'to', 'dstNet']"
14,"var srcNet *net.TCPAddr = &net.TCPAddr{IP: net.ParseIP(""0.0.0.0""), Port: 9001}","['var', 'srcNet', '*', 'net', '.', 'TCPAddr', '=', '&', 'net', '.', 'TCPAddr', '{', 'IP', ':', 'net', '.', 'ParseIP', '(', '""0.0.0.0""', '),', 'Port', ':', '9001', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
15,"var errCh = make(chan error, 1)","['var', 'errCh', '=', 'make', '(', 'chan', 'error', ',', '1', ')']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator']"
16,// make a channel to send the reverse connections,['// make a channel to send the reverse connections'],"['comment', 'make', 'a', 'channel', 'to', 'send', 'the', 'reverse', 'connections']"
17,"var lrCh = make(chan *net.TCPConn, 1)","['var', 'lrCh', '=', 'make', '(', 'chan', '*', 'net', '.', 'TCPConn', ',', '1', ')']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
18,"var lrNewCh = make(chan int, 1)","['var', 'lrNewCh', '=', 'make', '(', 'chan', 'int', ',', '1', ')']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'decimal_literal', 'operator']"
19,func listenDst() {,"['func', 'listenDst', '()', '{']","['keyword', 'identifier', 'operator', 'operator']"
20,    // Listen on the dstNet,['// Listen on the dstNet'],"['comment', 'Listen', 'on', 'the', 'dstNet']"
21,"    lr, err := net.ListenTCP(""tcp"", dstNet)","['lr', ',', 'err', ':=', 'net', '.', 'ListenTCP', '(', '""tcp""', ',', 'dstNet', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
22,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
23,        log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
24,        errCh <- err,"['errCh', '<-', 'err']","['identifier', 'operator', 'identifier']"
25,        return,['return'],['keyword']
26,    },['}'],['operator']
27,    // accept the connection,['// accept the connection'],"['comment', 'accept', 'the', 'connection']"
28,    for {,"['for', '{']","['keyword', 'operator']"
29,"        lrConn, err := lr.AcceptTCP()","['lrConn', ',', 'err', ':=', 'lr', '.', 'AcceptTCP', '()']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
30,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
31,                log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
32,                //errCh <- err,['//errCh <- err'],"['comment', 'errCh', '<', '-', 'err']"
33,                //return,['//return'],"['comment', 'return']"
34,        },['}'],['operator']
35,        status := <-lrNewCh,"['status', ':=', '<-', 'lrNewCh']","['identifier', 'operator', 'operator', 'identifier']"
36,"            log.Errorf(""status request is %v"", status)","['log', '.', 'Errorf', '(', '""status request is %v""', ',', 'status', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
37,            if status == 1{,"['if', 'status', '==', '1', '{']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator']"
38,"                log.Errorf(""we close and restart the listener and the connection"")","['log', '.', 'Errorf', '(', '""we close and restart the listener and the connection""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
39,                if err =  lrConn.Close(); err !=nil{,"['if', 'err', '=', 'lrConn', '.', 'Close', '();', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
40,                    log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
41,                },['}'],['operator']
42,                if err =  lr.Close(); err !=nil{,"['if', 'err', '=', 'lr', '.', 'Close', '();', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
43,                    log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
44,                },['}'],['operator']
45,"                    lr, err = net.ListenTCP(""tcp"", dstNet)","['lr', ',', 'err', '=', 'net', '.', 'ListenTCP', '(', '""tcp""', ',', 'dstNet', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
46,                    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
47,                        log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
48,                        errCh <- err,"['errCh', '<-', 'err']","['identifier', 'operator', 'identifier']"
49,                        return,['return'],['keyword']
50,                    },['}'],['operator']
51,"                lrConn, err = lr.AcceptTCP()","['lrConn', ',', 'err', '=', 'lr', '.', 'AcceptTCP', '()']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
52,                if err !=nil{,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
53,                    log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
54,                    errCh <- err,"['errCh', '<-', 'err']","['identifier', 'operator', 'identifier']"
55,                },['}'],['operator']
56,            }else{,"['}', 'else', '{']","['operator', 'keyword', 'operator']"
57,"                log.Errorf(""new connection on its way"")","['log', '.', 'Errorf', '(', '""new connection on its way""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
58,                lrCh <- lrConn,"['lrCh', '<-', 'lrConn']","['identifier', 'operator', 'identifier']"
59,            },['}'],['operator']
60,    //  default:,['//  default:'],"['comment', 'default', ':']"
61,"            // log.Errorf(""accepting new connections"")","['// log.Errorf(""accepting new connections"")']","['comment', 'log.Errorf', '(', '``', 'accepting', 'new', 'connections', ""''"", ')']"
62,    },['}'],['operator']
63,},['}'],['operator']
64,func main() {,"['func', 'main', '()', '{']","['keyword', 'identifier', 'operator', 'operator']"
65,    go func() {,"['go', 'func', '()', '{']","['keyword', 'keyword', 'operator', 'operator']"
66,        for err := range errCh {,"['for', 'err', ':=', 'range', 'errCh', '{']","['keyword', 'identifier', 'operator', 'keyword', 'identifier', 'operator']"
67,            if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
68,                panic(err),"['panic', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator']"
69,            },['}'],['operator']
70,        },['}'],['operator']
71,    }(),['}()'],['operator']
72,    // listen for the nat server,['// listen for the nat server'],"['comment', 'listen', 'for', 'the', 'nat', 'server']"
73,    go listenDst(),"['go', 'listenDst', '()']","['keyword', 'identifier', 'operator']"
74,    // listen for clients to connect,['// listen for clients to connect'],"['comment', 'listen', 'for', 'clients', 'to', 'connect']"
75,"    l, err := net.ListenTCP(""tcp"", srcNet)","['l', ',', 'err', ':=', 'net', '.', 'ListenTCP', '(', '""tcp""', ',', 'srcNet', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
76,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
77,        log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
78,        panic(err),"['panic', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator']"
79,    },['}'],['operator']
80,    // accept the connection,['// accept the connection'],"['comment', 'accept', 'the', 'connection']"
81,    for {,"['for', '{']","['keyword', 'operator']"
82,"        conn, err := l.AcceptTCP()","['conn', ',', 'err', ':=', 'l', '.', 'AcceptTCP', '()']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
83,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
84,            log.Error(err),"['log', '.', 'Error', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
85,            panic(err),"['panic', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator']"
86,        },['}'],['operator']
87,        // serve the connection,['// serve the connection'],"['comment', 'serve', 'the', 'connection']"
88,        go func(conn *net.TCPConn) {,"['go', 'func', '(', 'conn', '*', 'net', '.', 'TCPConn', ')', '{']","['keyword', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
89,            defer conn.Close(),"['defer', 'conn', '.', 'Close', '()']","['identifier', 'identifier', 'operator', 'identifier', 'operator']"
90,            lrNewCh <- 0,"['lrNewCh', '<-', '0']","['identifier', 'operator', 'decimal_literal']"
91,            dst := <-lrCh,"['dst', ':=', '<-', 'lrCh']","['identifier', 'operator', 'operator', 'identifier']"
92,            defer dst.Close(),"['defer', 'dst', '.', 'Close', '()']","['identifier', 'identifier', 'operator', 'identifier', 'operator']"
93,"            proxy(dst, conn)","['proxy', '(', 'dst', ',', 'conn', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
94,        }(conn),"['}(', 'conn', ')']","['operator', 'identifier', 'operator']"
95,    },['}'],['operator']
96,},['}'],['operator']
97,"func proxy(srvConn, cliConn *net.TCPConn) {","['func', 'proxy', '(', 'srvConn', ',', 'cliConn', '*', 'net', '.', 'TCPConn', ')', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
98,    // channels to wait on the close event for each connection,['// channels to wait on the close event for each connection'],"['comment', 'channels', 'to', 'wait', 'on', 'the', 'close', 'event', 'for', 'each', 'connection']"
99,"    serverClosed := make(chan struct{}, 1)","['serverClosed', ':=', 'make', '(', 'chan', 'struct', '{},', '1', ')']","['identifier', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'operator', 'decimal_literal', 'operator']"
100,"    clientClosed := make(chan struct{}, 1)","['clientClosed', ':=', 'make', '(', 'chan', 'struct', '{},', '1', ')']","['identifier', 'operator', 'identifier', 'operator', 'keyword', 'keyword', 'operator', 'decimal_literal', 'operator']"
101,"    go broker(srvConn, cliConn, clientClosed)","['go', 'broker', '(', 'srvConn', ',', 'cliConn', ',', 'clientClosed', ')']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
102,"    go broker(cliConn, srvConn, serverClosed)","['go', 'broker', '(', 'cliConn', ',', 'srvConn', ',', 'serverClosed', ')']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
103,"    // wait for one half of the proxy to exit, then trigger a shutdown of the","['// wait for one half of the proxy to exit, then trigger a shutdown of the']","['comment', 'wait', 'for', 'one', 'half', 'of', 'the', 'proxy', 'to', 'exit', ',', 'then', 'trigger', 'a', 'shutdown', 'of', 'the']"
104,    // other half by calling CloseRead(). This will break the read loop in the,['// other half by calling CloseRead(). This will break the read loop in the'],"['comment', 'other', 'half', 'by', 'calling', 'CloseRead', '(', ')', '.', 'This', 'will', 'break', 'the', 'read', 'loop', 'in', 'the']"
105,    // broker and allow us to fully close the connection cleanly without a,['// broker and allow us to fully close the connection cleanly without a'],"['comment', 'broker', 'and', 'allow', 'us', 'to', 'fully', 'close', 'the', 'connection', 'cleanly', 'without', 'a']"
106,"    // ""use of closed network connection"" error.","['// ""use of closed network connection"" error.']","['comment', '``', 'use', 'of', 'closed', 'network', 'connection', ""''"", 'error', '.']"
107,    var waitFor chan struct{},"['var', 'waitFor', 'chan', 'struct', '{}']","['keyword', 'identifier', 'keyword', 'keyword', 'operator']"
108,    select {,"['select', '{']","['keyword', 'operator']"
109,    case <-clientClosed:,"['case', '<-', 'clientClosed', ':']","['keyword', 'operator', 'identifier', 'operator']"
110,        // the client closed first and any more packets from the server aren't,"[""// the client closed first and any more packets from the server aren't""]","['comment', 'the', 'client', 'closed', 'first', 'and', 'any', 'more', 'packets', 'from', 'the', 'server', 'are', ""n't""]"
111,"        // useful, so we can optionally SetLinger(0) here to recycle the port","['// useful, so we can optionally SetLinger(0) here to recycle the port']","['comment', 'useful', ',', 'so', 'we', 'can', 'optionally', 'SetLinger', '(', '0', ')', 'here', 'to', 'recycle', 'the', 'port']"
112,        // faster.,['// faster.'],"['comment', 'faster', '.']"
113,        srvConn.SetLinger(0),"['srvConn', '.', 'SetLinger', '(', '0', ')']","['identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
114,        srvConn.CloseRead(),"['srvConn', '.', 'CloseRead', '()']","['identifier', 'operator', 'identifier', 'operator']"
115,        waitFor = serverClosed,"['waitFor', '=', 'serverClosed']","['identifier', 'operator', 'identifier']"
116,    case <-serverClosed:,"['case', '<-', 'serverClosed', ':']","['keyword', 'operator', 'identifier', 'operator']"
117,        cliConn.CloseRead(),"['cliConn', '.', 'CloseRead', '()']","['identifier', 'operator', 'identifier', 'operator']"
118,        waitFor = clientClosed,"['waitFor', '=', 'clientClosed']","['identifier', 'operator', 'identifier']"
119,    },['}'],['operator']
120,    // Wait for the other connection to close.,['// Wait for the other connection to close.'],"['comment', 'Wait', 'for', 'the', 'other', 'connection', 'to', 'close', '.']"
121,"    // This ""waitFor"" pattern isn't required, but gives us a way to track the","['// This ""waitFor"" pattern isn\'t required, but gives us a way to track the']","['comment', 'This', '``', 'waitFor', ""''"", 'pattern', 'is', ""n't"", 'required', ',', 'but', 'gives', 'us', 'a', 'way', 'to', 'track', 'the']"
122,    // connection and ensure all copies terminate correctly; we can trigger,['// connection and ensure all copies terminate correctly; we can trigger'],"['comment', 'connection', 'and', 'ensure', 'all', 'copies', 'terminate', 'correctly', ';', 'we', 'can', 'trigger']"
123,    // stats on entry and deferred exit of this function.,['// stats on entry and deferred exit of this function.'],"['comment', 'stats', 'on', 'entry', 'and', 'deferred', 'exit', 'of', 'this', 'function', '.']"
124,    <-waitFor,"['<-', 'waitFor']","['operator', 'identifier']"
125,},['}'],['operator']
126,// This does the actual data transfer.,['// This does the actual data transfer.'],"['comment', 'This', 'does', 'the', 'actual', 'data', 'transfer', '.']"
127,// The broker only closes the Read side.,['// The broker only closes the Read side.'],"['comment', 'The', 'broker', 'only', 'closes', 'the', 'Read', 'side', '.']"
128,"func broker(dst, src net.Conn, srcClosed chan struct{}) {","['func', 'broker', '(', 'dst', ',', 'src', 'net', '.', 'Conn', ',', 'srcClosed', 'chan', 'struct', '{})', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'keyword', 'operator', 'operator']"
129,    // We can handle errors in a finer-grained manner by inlining io.Copy (it's,"[""// We can handle errors in a finer-grained manner by inlining io.Copy (it's""]","['comment', 'We', 'can', 'handle', 'errors', 'in', 'a', 'finer-grained', 'manner', 'by', 'inlining', 'io.Copy', '(', 'it', ""'s""]"
130,"    // simple, and we drop the ReaderFrom or WriterTo checks for","['// simple, and we drop the ReaderFrom or WriterTo checks for']","['comment', 'simple', ',', 'and', 'we', 'drop', 'the', 'ReaderFrom', 'or', 'WriterTo', 'checks', 'for']"
131,"    // net.Conn->net.Conn transfers, which aren't needed). This would also let","[""// net.Conn->net.Conn transfers, which aren't needed). This would also let""]","['comment', 'net.Conn-', '>', 'net.Conn', 'transfers', ',', 'which', 'are', ""n't"", 'needed', ')', '.', 'This', 'would', 'also', 'let']"
132,    // us adjust buffersize.,['// us adjust buffersize.'],"['comment', 'us', 'adjust', 'buffersize', '.']"
133,"    n, err := io.Copy(dst, src)","['n', ',', 'err', ':=', 'io', '.', 'Copy', '(', 'dst', ',', 'src', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
134,"    log.Errorf("" %v bytes copied"", n)","['log', '.', 'Errorf', '(', '"" %v bytes copied""', ',', 'n', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
135,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
136,"        log.Errorf(""Copy error: %s"", err)","['log', '.', 'Errorf', '(', '""Copy error: %s""', ',', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
137,        // errCh <- err,['// errCh <- err'],"['comment', 'errCh', '<', '-', 'err']"
138,    },['}'],['operator']
139,    if err := src.Close(); err != nil {,"['if', 'err', ':=', 'src', '.', 'Close', '();', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
140,"        log.Errorf(""Close error: %s"", err)","['log', '.', 'Errorf', '(', '""Close error: %s""', ',', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
141,        errCh <- err,"['errCh', '<-', 'err']","['identifier', 'operator', 'identifier']"
142,    },['}'],['operator']
143,    if n == 0 {,"['if', 'n', '==', '0', '{']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator']"
144,        lrNewCh <- 1,"['lrNewCh', '<-', '1']","['identifier', 'operator', 'decimal_literal']"
145,    },['}'],['operator']
146,    srcClosed <- struct{}{},"['srcClosed', '<-', 'struct', '{}{}']","['identifier', 'operator', 'keyword', 'operator']"
147,},['}'],['operator']
