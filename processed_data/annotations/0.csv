,text,token,annotation
0,"With slice value type

map is a good choice if you need fast lookup, but since you want to store multiple values for the same key, that warrants for a slice as the value type:

","['With', 'slice', 'value', 'type', 'map', 'is', 'a', 'good', 'choice', 'if', 'you', 'need', 'fast', 'lookup,', 'but', 'since', 'you', 'want', 'to', 'store', 'multiple', 'values', 'for', 'the', 'same', 'key,', 'that', 'warrants', 'for', 'a', 'slice', 'as', 'the', 'value', 'type:']","['IN', 'JJ', 'NN', 'NN', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'IN', 'PRP', 'VBP', 'JJ', 'NN', 'CC', 'IN', 'PRP', 'VBP', 'TO', 'VB', 'JJ', 'NNS', 'IN', 'DT', 'JJ', 'NN', 'WDT', 'NNS', 'IN', 'DT', 'NN', 'IN', 'DT', 'NN', 'NN']"
1,m := map[int][]interface{}{},"['m', ':=', 'map', '[', 'int', '][]', 'interface', '{}{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
2,"m[1] = append(m[1], ""one"")","['m', '[', '1', ']', '=', 'append', '(', 'm', '[', '1', '],', '""one""', ')']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
3,"m[2] = append(m[2], ""two"")","['m', '[', '2', ']', '=', 'append', '(', 'm', '[', '2', '],', '""two""', ')']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
4,"m[1] = append(m[1], ""three"")","['m', '[', '1', ']', '=', 'append', '(', 'm', '[', '1', '],', '""three""', ')']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
5,fmt.Println(m[1]),['fmt.Println(m[1])'],['FUNCTION_CALL']
6,"

Output (try it on the Go Playground):

[one three]


Note that using this map is a little less convenient, as when you want to add a new value you don't (can't) just assign it but you have to append to the existing slice associated with the key, and you have to assign back the (potentially) new slice.

To ease this ""pain"", you may create your own type and provide helper methods to support different operations on the map. This is also true for the subsequent alternatives, so being a little more verbose does not necessarily mean you have to struggle with it.

With pointer to slice value type

Note that you could avoid having to reassign the new slice if you would store pointers in the map, for example:

","['Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):', '[one', 'three]', 'Note', 'that', 'using', 'this', 'map', 'is', 'a', 'little', 'less', 'convenient,', 'as', 'when', 'you', 'want', 'to', 'add', 'a', 'new', 'value', 'you', ""don't"", ""(can't)"", 'just', 'assign', 'it', 'but', 'you', 'have', 'to', 'append', 'to', 'the', 'existing', 'slice', 'associated', 'with', 'the', 'key,', 'and', 'you', 'have', 'to', 'assign', 'back', 'the', '(potentially)', 'new', 'slice.', 'To', 'ease', 'this', '""pain"",', 'you', 'may', 'create', 'your', 'own', 'type', 'and', 'provide', 'helper', 'methods', 'to', 'support', 'different', 'operations', 'on', 'the', 'map.', 'This', 'is', 'also', 'true', 'for', 'the', 'subsequent', 'alternatives,', 'so', 'being', 'a', 'little', 'more', 'verbose', 'does', 'not', 'necessarily', 'mean', 'you', 'have', 'to', 'struggle', 'with', 'it.', 'With', 'pointer', 'to', 'slice', 'value', 'type', 'Note', 'that', 'you', 'could', 'avoid', 'having', 'to', 'reassign', 'the', 'new', 'slice', 'if', 'you', 'would', 'store', 'pointers', 'in', 'the', 'map,', 'for', 'example:']","['NNP', 'VBD', 'PRP', 'IN', 'DT', 'NNP', 'NNP', 'NNP', 'NN', 'NN', 'IN', 'VBG', 'DT', 'NN', 'VBZ', 'DT', 'JJ', 'JJR', 'NN', 'IN', 'WRB', 'PRP', 'VBP', 'TO', 'VB', 'DT', 'JJ', 'NN', 'PRP', 'VBP', 'VB', 'RB', 'VB', 'PRP', 'CC', 'PRP', 'VBP', 'TO', 'VB', 'TO', 'DT', 'VBG', 'NN', 'VBN', 'IN', 'DT', 'NN', 'CC', 'PRP', 'VBP', 'TO', 'VB', 'RP', 'DT', 'NN', 'JJ', 'NN', 'TO', 'VB', 'DT', 'NN', 'PRP', 'MD', 'VB', 'PRP$', 'JJ', 'NN', 'CC', 'VB', 'JJR', 'NNS', 'TO', 'VB', 'JJ', 'NNS', 'IN', 'DT', 'NN', 'DT', 'VBZ', 'RB', 'JJ', 'IN', 'DT', 'JJ', 'NN', 'RB', 'VBG', 'DT', 'RB', 'RBR', 'JJ', 'VBZ', 'RB', 'RB', 'VB', 'PRP', 'VBP', 'TO', 'VB', 'IN', 'NN', 'IN', 'NN', 'TO', 'VB', 'NN', 'NN', 'NN', 'IN', 'PRP', 'MD', 'VB', 'VBG', 'TO', 'VB', 'DT', 'JJ', 'NN', 'IN', 'PRP', 'MD', 'VB', 'NNS', 'IN', 'DT', 'NN', 'IN', 'NN']"
7,m := map[int]*[]interface{}{},"['m', ':=', 'map', '[', 'int', ']*[]', 'interface', '{}{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
8,m[1] = &[]interface{}{},"['m', '[', '1', ']', '=', '&[]', 'interface', '{}{}']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
9,m[2] = &[]interface{}{},"['m', '[', '2', ']', '=', '&[]', 'interface', '{}{}']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
10,s := m[1],"['s', ':=', 'm', '[', '1', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
11,"*s = append(*s, ""one"")","['*', 's', '=', 'append', '(*', 's', ',', '""one""', ')']","['POINTER_OPERATOR', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
12,s = m[2],"['s', '=', 'm', '[', '2', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
13,"*s = append(*s, ""two"")","['*', 's', '=', 'append', '(*', 's', ',', '""two""', ')']","['POINTER_OPERATOR', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
14,s = m[1],"['s', '=', 'm', '[', '1', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
15,"*s = append(*s, ""three"")","['*', 's', '=', 'append', '(*', 's', ',', '""three""', ')']","['POINTER_OPERATOR', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
16,fmt.Println(m[1]),['fmt.Println(m[1])'],['FUNCTION_CALL']
17,"

Output (try it on the Go Playground):

&[one three]


You still have to assign back the slice returned by append(), but not to a map key but to the pointed value (acquired from / stored in the map).

But as you can see, handling it is more hassle, but may be more efficient if you add new elements frequently. Also note that since zero value for any pointer type is nil, before you could add an element for a key, you first have to initialize it with a pointer to an existing, non-nil slice (but if you create your own type, you can hide this check and initialization).

With map as value type

Previous solutions (with slices in keys) are good, but if you also have to support frequent removal operation, they lag behind, as whenever you have to remove an element, you index the map to get the slice, and you have to search this slice and remove the element from it (and removing from a slice includes slice header update and copying subsequent elements to 1-less indices). If this slice is not sorted, this is a linear search and so it has O(n) complexity (where n is the number of elements associated with the same key, not the number of keys in the map). May not be acceptable depending on your case.

To support fast element removal, you may keep the value slices sorted, and so finding the removable element in them is O(log(n)) complexity â€“ acceptable in most cases.

An even faster solution may use another map (as a set, see example #1 and example #2) as the value type, which will be O(1) complexity for removals too. Cool. It could look like this:

","['Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):', '&[one', 'three]', 'You', 'still', 'have', 'to', 'assign', 'back', 'the', 'slice', 'returned', 'by', 'append(),', 'but', 'not', 'to', 'a', 'map', 'key', 'but', 'to', 'the', 'pointed', 'value', '(acquired', 'from', '/', 'stored', 'in', 'the', 'map).', 'But', 'as', 'you', 'can', 'see,', 'handling', 'it', 'is', 'more', 'hassle,', 'but', 'may', 'be', 'more', 'efficient', 'if', 'you', 'add', 'new', 'elements', 'frequently.', 'Also', 'note', 'that', 'since', 'zero', 'value', 'for', 'any', 'pointer', 'type', 'is', 'nil,', 'before', 'you', 'could', 'add', 'an', 'element', 'for', 'a', 'key,', 'you', 'first', 'have', 'to', 'initialize', 'it', 'with', 'a', 'pointer', 'to', 'an', 'existing,', 'non-nil', 'slice', '(but', 'if', 'you', 'create', 'your', 'own', 'type,', 'you', 'can', 'hide', 'this', 'check', 'and', 'initialization).', 'With', 'map', 'as', 'value', 'type', 'Previous', 'solutions', '(with', 'slices', 'in', 'keys)', 'are', 'good,', 'but', 'if', 'you', 'also', 'have', 'to', 'support', 'frequent', 'removal', 'operation,', 'they', 'lag', 'behind,', 'as', 'whenever', 'you', 'have', 'to', 'remove', 'an', 'element,', 'you', 'index', 'the', 'map', 'to', 'get', 'the', 'slice,', 'and', 'you', 'have', 'to', 'search', 'this', 'slice', 'and', 'remove', 'the', 'element', 'from', 'it', '(and', 'removing', 'from', 'a', 'slice', 'includes', 'slice', 'header', 'update', 'and', 'copying', 'subsequent', 'elements', 'to', '1-less', 'indices).', 'If', 'this', 'slice', 'is', 'not', 'sorted,', 'this', 'is', 'a', 'linear', 'search', 'and', 'so', 'it', 'has', 'O(n)', 'complexity', '(where', 'n', 'is', 'the', 'number', 'of', 'elements', 'associated', 'with', 'the', 'same', 'key,', 'not', 'the', 'number', 'of', 'keys', 'in', 'the', 'map).', 'May', 'not', 'be', 'acceptable', 'depending', 'on', 'your', 'case.', 'To', 'support', 'fast', 'element', 'removal,', 'you', 'may', 'keep', 'the', 'value', 'slices', 'sorted,', 'and', 'so', 'finding', 'the', 'removable', 'element', 'in', 'them', 'is', 'O(log(n))', 'complexity', '\xe2\x80\x93', 'acceptable', 'in', 'most', 'cases.', 'An', 'even', 'faster', 'solution', 'may', 'use', 'another', 'map', '(as', 'a', 'set,', 'see', 'example', '#1', 'and', 'example', '#2)', 'as', 'the', 'value', 'type,', 'which', 'will', 'be', 'O(1)', 'complexity', 'for', 'removals', 'too.', 'Cool.', 'It', 'could', 'look', 'like', 'this:']","['NNP', 'VBD', 'PRP', 'IN', 'DT', 'NNP', 'NNP', 'NNP', 'NN', 'PRP', 'RB', 'VBP', 'TO', 'VB', 'RP', 'DT', 'NN', 'VBN', 'IN', 'NN', 'CC', 'RB', 'TO', 'DT', 'NN', 'NN', 'CC', 'TO', 'DT', 'VBN', 'NN', 'VBN', 'IN', 'NN', 'VBN', 'IN', 'DT', 'NN', 'CC', 'IN', 'PRP', 'MD', 'VB', 'VBG', 'PRP', 'VBZ', 'RBR', 'JJ', 'CC', 'MD', 'VB', 'RBR', 'JJ', 'IN', 'PRP', 'VBP', 'JJ', 'NNS', 'NN', 'RB', 'VBP', 'IN', 'IN', 'CD', 'NN', 'IN', 'DT', 'NN', 'NN', 'VBZ', 'JJ', 'IN', 'PRP', 'MD', 'VB', 'DT', 'NN', 'IN', 'DT', 'NN', 'PRP', 'RB', 'VBP', 'TO', 'VB', 'PRP', 'IN', 'DT', 'NN', 'TO', 'DT', 'JJ', 'JJ', 'NN', 'NN', 'IN', 'PRP', 'VBP', 'PRP$', 'JJ', 'NN', 'PRP', 'MD', 'VB', 'DT', 'NN', 'CC', 'NN', 'IN', 'NN', 'IN', 'NN', 'VBP', 'JJ', 'NNS', 'VBP', 'NNS', 'IN', 'NN', 'VBP', 'VBN', 'CC', 'IN', 'PRP', 'RB', 'VBP', 'TO', 'VB', 'JJ', 'NN', 'IN', 'PRP', 'VBP', 'RB', 'IN', 'NN', 'PRP', 'VBP', 'TO', 'VB', 'DT', 'NN', 'PRP', 'NN', 'DT', 'NN', 'TO', 'VB', 'DT', 'NN', 'CC', 'PRP', 'VBP', 'TO', 'VB', 'DT', 'NN', 'CC', 'VB', 'DT', 'NN', 'IN', 'PRP', 'VBZ', 'VBG', 'IN', 'DT', 'NN', 'VBZ', 'JJ', 'NN', 'NN', 'CC', 'VBG', 'JJ', 'NNS', 'TO', 'JJ', 'NN', 'IN', 'DT', 'NN', 'VBZ', 'RB', 'JJ', 'DT', 'VBZ', 'DT', 'JJ', 'NN', 'CC', 'RB', 'PRP', 'VBZ', 'VBN', 'NN', 'NNP', 'NN', 'VBZ', 'DT', 'NN', 'IN', 'NNS', 'VBN', 'IN', 'DT', 'JJ', 'NN', 'RB', 'DT', 'NN', 'IN', 'NNS', 'IN', 'DT', 'NN', 'NNP', 'RB', 'VB', 'JJ', 'VBG', 'IN', 'PRP$', 'NN', 'TO', 'VB', 'RB', 'JJ', 'NN', 'PRP', 'MD', 'VB', 'DT', 'NN', 'VBZ', 'JJ', 'CC', 'RB', 'VBG', 'DT', 'JJ', 'NN', 'IN', 'PRP', 'VBZ', 'NNP', 'NN', 'NNP', 'JJ', 'IN', 'JJS', 'VBP', 'DT', 'RB', 'JJR', 'NN', 'MD', 'VB', 'DT', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'NNP', 'CC', 'NN', 'NN', 'IN', 'DT', 'NN', 'NN', 'WDT', 'MD', 'VB', 'NNP', 'NN', 'IN', 'NNS', 'VBP', 'NNP', 'PRP', 'MD', 'VB', 'IN', 'NN']"
18,m := map[int]map[interface{}]bool{},"['m', ':=', 'map', '[', 'int', ']', 'map', '[', 'interface', '{}]', 'bool', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
19,m[1] = map[interface{}]bool{},"['m', '[', '1', ']', '=', 'map', '[', 'interface', '{}]', 'bool', '{}']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
20,m[2] = map[interface{}]bool{},"['m', '[', '2', ']', '=', 'map', '[', 'interface', '{}]', 'bool', '{}']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
21,"m[1][""one""] = true","['m', '[', '1', '][', '""one""', ']', '=', 'true']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
22,"m[2][""two""] = true","['m', '[', '2', '][', '""two""', ']', '=', 'true']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
23,"m[1][""three""] = true","['m', '[', '1', '][', '""three""', ']', '=', 'true']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
24,fmt.Println(m[1]),['fmt.Println(m[1])'],['FUNCTION_CALL']
25,"

Output (try it on the Go Playground):

","['Output', '(try', 'it', 'on', 'the', 'Go', 'Playground):']","['NNP', 'VBD', 'PRP', 'IN', 'DT', 'NNP', 'NNP']"
26,map[one:true three:true],"['map', '[', 'one', ':', 'true', 'three', ':', 'true', ']']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'BOOLEAN_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'BOOLEAN_LITERAL', 'PUNCTUATION']"
27,"

Just as with the pointer-to-slice value type, you first have to initialize a value for a key with a non-nil map before you can actually ""add"" values to it. Hide this by creating your own type and adding methods.
","['Just', 'as', 'with', 'the', 'pointer-to-slice', 'value', 'type,', 'you', 'first', 'have', 'to', 'initialize', 'a', 'value', 'for', 'a', 'key', 'with', 'a', 'non-nil', 'map', 'before', 'you', 'can', 'actually', '""add""', 'values', 'to', 'it.', 'Hide', 'this', 'by', 'creating', 'your', 'own', 'type', 'and', 'adding', 'methods.']","['RB', 'IN', 'IN', 'DT', 'JJ', 'NN', 'NN', 'PRP', 'RB', 'VBP', 'TO', 'VB', 'DT', 'NN', 'IN', 'DT', 'NN', 'IN', 'DT', 'JJ', 'NN', 'IN', 'PRP', 'MD', 'RB', 'VB', 'NNS', 'TO', 'VB', 'NNP', 'DT', 'IN', 'VBG', 'PRP$', 'JJ', 'NN', 'CC', 'VBG', 'NN']"
