,text,token,annotation
0,package main,"['package', 'main']","['keyword', 'identifier']"
1,"func parseFile(name string, finished chan int) {","['func', 'parseFile', '(', 'name', 'string', ',', 'finished', 'chan', 'int', ')', '{']","['keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'keyword', 'identifier', 'operator', 'operator']"
2,    var Verts []*Vertex,"['var', 'Verts', '[]*', 'Vertex']","['keyword', 'identifier', 'operator', 'identifier']"
3,    var Texs []*TexCoord,"['var', 'Texs', '[]*', 'TexCoord']","['keyword', 'identifier', 'operator', 'identifier']"
4,    var Faces []*Face,"['var', 'Faces', '[]*', 'Face']","['keyword', 'identifier', 'operator', 'identifier']"
5,"    var objFile, mtlFile, jsonFile *os.File","['var', 'objFile', ',', 'mtlFile', ',', 'jsonFile', '*', 'os', '.', 'File']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier']"
6,    var parseMaterial bool,"['var', 'parseMaterial', 'bool']","['keyword', 'identifier', 'identifier']"
7,    // Set up files and i/o,['// Set up files and i/o'],"['comment', 'Set', 'up', 'files', 'and', 'i/o']"
8,    inName := name,"['inName', ':=', 'name']","['identifier', 'operator', 'identifier']"
9,"    outName := strings.Replace(inName, "".obj"", "".json3d"", -1)","['outName', ':=', 'strings', '.', 'Replace', '(', 'inName', ',', '"".obj"", "".json3d""', ',', '-', '1', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'decimal_literal', 'operator']"
10,    parseMaterial = false,"['parseMaterial', '=', 'false']","['identifier', 'operator', 'identifier']"
11,"    fmt.Printf(""--""+FgGreen+""Creating""+Reset+"" %s from %s\n"", outName, inName)","['fmt', '.', 'Printf', '(', '""--""+FgGreen+""Creating""+Reset+"" %s from %s\\n""', ',', 'outName', ',', 'inName', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
12,    var err error,"['var', 'err', 'error']","['keyword', 'identifier', 'identifier']"
13,    var part []byte,"['var', 'part', '[]', 'byte']","['keyword', 'identifier', 'operator', 'identifier']"
14,    var prefix bool,"['var', 'prefix', 'bool']","['keyword', 'identifier', 'identifier']"
15,"    if objFile, err = os.Open(inName); err != nil {","['if', 'objFile', ',', 'err', '=', 'os', '.', 'Open', '(', 'inName', ');', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
16,"        fmt.Println(FgRed+""!!Failed to open input file!!""+Reset)","['fmt', '.', 'Println', '(', 'FgRed', '+', '""!!Failed to open input file!!""', '+', 'Reset', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
17,        return,['return'],['keyword']
18,    },['}'],['operator']
19,"    if jsonFile, err = os.Create(outName); err != nil {","['if', 'jsonFile', ',', 'err', '=', 'os', '.', 'Create', '(', 'outName', ');', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
20,"        fmt.Println(FgRed+""!!Failed to create output file!!""+Reset)","['fmt', '.', 'Println', '(', 'FgRed', '+', '""!!Failed to create output file!!""', '+', 'Reset', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
21,        return,['return'],['keyword']
22,    },['}'],['operator']
23,    reader := bufio.NewReader(objFile),"['reader', ':=', 'bufio', '.', 'NewReader', '(', 'objFile', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
24,    writer := bufio.NewWriter(jsonFile),"['writer', ':=', 'bufio', '.', 'NewWriter', '(', 'jsonFile', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
25,"    buffer := bytes.NewBuffer(make([]byte, 1024))","['buffer', ':=', 'bytes', '.', 'NewBuffer', '(', 'make', '([]', 'byte', ',', '1024', '))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
26,    // Read the file in and parse out what we need,['// Read the file in and parse out what we need'],"['comment', 'Read', 'the', 'file', 'in', 'and', 'parse', 'out', 'what', 'we', 'need']"
27,    for {,"['for', '{']","['keyword', 'operator']"
28,"        if part, prefix, err = reader.ReadLine(); err != nil {","['if', 'part', ',', 'prefix', ',', 'err', '=', 'reader', '.', 'ReadLine', '();', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
29,            break,['break'],['keyword']
30,        },['}'],['operator']
31,        buffer.Write(part),"['buffer', '.', 'Write', '(', 'part', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
32,        if !prefix {,"['if', '!', 'prefix', '{']","['keyword', 'operator', 'identifier', 'operator']"
33,            line := buffer.String(),"['line', ':=', 'buffer', '.', 'String', '()']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
34,"            if(strings.Contains(line, ""v "")) {","['if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""v ""', '))', '{']","['keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']"
35,"                Verts = append(Verts, parseVertex(line))","['Verts', '=', 'append', '(', 'Verts', ',', 'parseVertex', '(', 'line', '))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
36,"            } else if(strings.Contains(line, ""vt "")) {","['}', 'else', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""vt ""', '))', '{']","['operator', 'keyword', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']"
37,"                Texs = append(Texs, parseTexCoord(line))","['Texs', '=', 'append', '(', 'Texs', ',', 'parseTexCoord', '(', 'line', '))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
38,"            } else if(strings.Contains(line, ""f "")) {","['}', 'else', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""f ""', '))', '{']","['operator', 'keyword', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']"
39,"                Faces = append(Faces, parseFace(line, Verts, Texs))","['Faces', '=', 'append', '(', 'Faces', ',', 'parseFace', '(', 'line', ',', 'Verts', ',', 'Texs', '))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
40,"            } else if(strings.Contains(line, ""mtllib "")) {","['}', 'else', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""mtllib ""', '))', '{']","['operator', 'keyword', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']"
41,"                mtlName := strings.Split(line, "" "")[1]","['mtlName', ':=', 'strings', '.', 'Split', '(', 'line', ',', '"" ""', ')[', '1', ']']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'decimal_literal', 'operator']"
42,"                if mtlFile, err = os.Open(mtlName); err != nil {","['if', 'mtlFile', ',', 'err', '=', 'os', '.', 'Open', '(', 'mtlName', ');', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
43,"                    fmt.Printf(""--""+FgRed+""Failed to find material file: %s\n""+Reset, mtlName)","['fmt', '.', 'Printf', '(', '""--""+FgRed+""Failed to find material file: %s\\n""', '+', 'Reset', ',', 'mtlName', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
44,                    parseMaterial = false,"['parseMaterial', '=', 'false']","['identifier', 'operator', 'identifier']"
45,                } else {,"['}', 'else', '{']","['operator', 'keyword', 'operator']"
46,                    parseMaterial = true,"['parseMaterial', '=', 'true']","['identifier', 'operator', 'identifier']"
47,                },['}'],['operator']
48,            },['}'],['operator']
49,            buffer.Reset(),"['buffer', '.', 'Reset', '()']","['identifier', 'operator', 'identifier', 'operator']"
50,        },['}'],['operator']
51,    },['}'],['operator']
52,    if err == io.EOF {,"['if', 'err', '==', 'io', '.', 'EOF', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
53,        err = nil,"['err', '=', 'nil']","['identifier', 'operator', 'identifier']"
54,    },['}'],['operator']
55,    objFile.Close(),"['objFile', '.', 'Close', '()']","['identifier', 'operator', 'identifier', 'operator']"
56,    // Write out the data,['// Write out the data'],"['comment', 'Write', 'out', 'the', 'data']"
57,"    writer.WriteString(""{\""obj\"":[\n"");","['writer', '.', 'WriteString', '(', '""{\\""obj\\"":[\\n""', ');']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
58,    // Write out the verts,['// Write out the verts'],"['comment', 'Write', 'out', 'the', 'verts']"
59,"    writer.WriteString(""{\""vrt\"":[\n"");","['writer', '.', 'WriteString', '(', '""{\\""vrt\\"":[\\n""', ');']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
60,"    for i, vert := range Verts {","['for', 'i', ',', 'vert', ':=', 'range', 'Verts', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator']"
61,        writer.WriteString(vert.String()),"['writer', '.', 'WriteString', '(', 'vert', '.', 'String', '())']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
62,"        if i < len(Verts) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Verts', ')', '-', '1', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']"
63,"        writer.WriteString(""\n"")","['writer', '.', 'WriteString', '(', '""\\n""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
64,    },['}'],['operator']
65,    // Write out the faces,['// Write out the faces'],"['comment', 'Write', 'out', 'the', 'faces']"
66,"    writer.WriteString(""],\""fac\"":[\n"")","['writer', '.', 'WriteString', '(', '""],\\""fac\\"":[\\n""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
67,"    for i, face := range Faces {","['for', 'i', ',', 'face', ':=', 'range', 'Faces', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator']"
68,        writer.WriteString(face.String(true)),"['writer', '.', 'WriteString', '(', 'face', '.', 'String', '(', 'true', '))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
69,"        if i < len(Faces) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']"
70,"        writer.WriteString(""\n"")","['writer', '.', 'WriteString', '(', '""\\n""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
71,    },['}'],['operator']
72,    // Write out the normals,['// Write out the normals'],"['comment', 'Write', 'out', 'the', 'normals']"
73,"    writer.WriteString(""],\""nrm\"":["")","['writer', '.', 'WriteString', '(', '""],\\""nrm\\"":[""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
74,"    for i, face := range Faces {","['for', 'i', ',', 'face', ':=', 'range', 'Faces', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator']"
75,"        writer.WriteString(""["")","['writer', '.', 'WriteString', '(', '""[""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
76,"        for j, vert := range face.verts {","['for', 'j', ',', 'vert', ':=', 'range', 'face', '.', 'verts', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator', 'identifier', 'operator']"
77,            length := math.Sqrt((vert.X * vert.X) + (vert.Y * vert.Y) + (vert.Z * vert.Z)),"['length', ':=', 'math', '.', 'Sqrt', '((', 'vert', '.', 'X', '*', 'vert', '.', 'X', ')', '+', '(', 'vert', '.', 'Y', '*', 'vert', '.', 'Y', ')', '+', '(', 'vert', '.', 'Z', '*', 'vert', '.', 'Z', '))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
78,            x := vert.X / length,"['x', ':=', 'vert', '.', 'X', 'length']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier']"
79,            y := vert.Y / length,"['y', ':=', 'vert', '.', 'Y', 'length']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier']"
80,            z := vert.Z / length,"['z', ':=', 'vert', '.', 'Z', 'length']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier']"
81,"            normal := fmt.Sprintf(""[%f,%f,%f]"", x, y, z)","['normal', ':=', 'fmt', '.', 'Sprintf', '(', '""[%f,%f,%f]""', ',', 'x', ',', 'y', ',', 'z', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
82,            writer.WriteString(normal),"['writer', '.', 'WriteString', '(', 'normal', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
83,"            if(j < len(face.verts)-1) { writer.WriteString("","") }","['if', '(', 'j', '<', 'len', '(', 'face', '.', 'verts', ')-', '1', ')', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}']","['keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']"
84,        },['}'],['operator']
85,"        writer.WriteString(""]"")","['writer', '.', 'WriteString', '(', '""]""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
86,"        //writer.WriteString(""[0, 1, 0]"")","['//writer.WriteString(""[0, 1, 0]"")']","['comment', 'writer.WriteString', '(', '``', '[', '0', ',', '1', ',', '0', ']', ""''"", ')']"
87,"        if i < len(Faces) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']"
88,"        writer.WriteString(""\n"")","['writer', '.', 'WriteString', '(', '""\\n""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
89,    },['}'],['operator']
90,    // Write out the tex coords,['// Write out the tex coords'],"['comment', 'Write', 'out', 'the', 'tex', 'coords']"
91,"    writer.WriteString(""],\""tex\"":["")","['writer', '.', 'WriteString', '(', '""],\\""tex\\"":[""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
92,"    for i, face := range Faces {","['for', 'i', ',', 'face', ':=', 'range', 'Faces', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator']"
93,"        writer.WriteString(""["")","['writer', '.', 'WriteString', '(', '""[""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
94,        writer.WriteString(face.tex[0].String()),"['writer', '.', 'WriteString', '(', 'face', '.', 'tex', '[', '0', '].', 'String', '())']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator']"
95,"        writer.WriteString("","")","['writer', '.', 'WriteString', '(', '"",""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
96,        writer.WriteString(face.tex[1].String()),"['writer', '.', 'WriteString', '(', 'face', '.', 'tex', '[', '1', '].', 'String', '())']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator']"
97,"        writer.WriteString("","")","['writer', '.', 'WriteString', '(', '"",""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
98,        writer.WriteString(face.tex[2].String()),"['writer', '.', 'WriteString', '(', 'face', '.', 'tex', '[', '2', '].', 'String', '())']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator']"
99,"        writer.WriteString(""]"")","['writer', '.', 'WriteString', '(', '""]""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
100,"        if i < len(Faces) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']"
101,"        writer.WriteString(""\n"")","['writer', '.', 'WriteString', '(', '""\\n""', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
102,    },['}'],['operator']
103,    // Close obj block,['// Close obj block'],"['comment', 'Close', 'obj', 'block']"
104,"    writer.WriteString(""]}]"");","['writer', '.', 'WriteString', '(', '""]}]""', ');']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
105,    if parseMaterial {,"['if', 'parseMaterial', '{']","['keyword', 'identifier', 'operator']"
106,"        writer.WriteString("",mat:[{"");","['writer', '.', 'WriteString', '(', '"",mat:[{""', ');']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
107,        reader := bufio.NewReader(mtlFile),"['reader', ':=', 'bufio', '.', 'NewReader', '(', 'mtlFile', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
108,        // Read the file in and parse out what we need,['// Read the file in and parse out what we need'],"['comment', 'Read', 'the', 'file', 'in', 'and', 'parse', 'out', 'what', 'we', 'need']"
109,        for {,"['for', '{']","['keyword', 'operator']"
110,"            if part, prefix, err = reader.ReadLine(); err != nil {","['if', 'part', ',', 'prefix', ',', 'err', '=', 'reader', '.', 'ReadLine', '();', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
111,                break,['break'],['keyword']
112,            },['}'],['operator']
113,            buffer.Write(part),"['buffer', '.', 'Write', '(', 'part', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
114,            if !prefix {,"['if', '!', 'prefix', '{']","['keyword', 'operator', 'identifier', 'operator']"
115,                line := buffer.String(),"['line', ':=', 'buffer', '.', 'String', '()']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
116,"                if(strings.Contains(line, ""map_Kd "")) {","['if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""map_Kd ""', '))', '{']","['keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']"
117,"                    parts := strings.Split(line, "" "")","['parts', ':=', 'strings', '.', 'Split', '(', 'line', ',', '"" ""', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
118,"                    entry := fmt.Sprintf(""\""t\"":\""%s\"","", parts[1])","['entry', ':=', 'fmt', '.', 'Sprintf', '(', '""\\""t\\"":\\""%s\\"",""', ',', 'parts', '[', '1', '])']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
119,                    writer.WriteString(entry),"['writer', '.', 'WriteString', '(', 'entry', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
120,"                    width, height := 256, 256","['width', ',', 'height', ':=', '256', ',', '256']","['identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal']"
121,                    var imageFile *os.File,"['var', 'imageFile', '*', 'os', '.', 'File']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier']"
122,"                    if imageFile, err = os.Open(parts[1]); err != nil {","['if', 'imageFile', ',', 'err', '=', 'os', '.', 'Open', '(', 'parts', '[', '1', ']);', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
123,"                        fmt.Printf(""--""+FgRed+""Failed to find %s, defaulting to 256x256""+Reset+""\n"", parts[1])","['fmt', '.', 'Printf', '(', '""--""+FgRed+""Failed to find %s, defaulting to 256x256""+Reset+""\\n""', ',', 'parts', '[', '1', '])']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
124,                        return,['return'],['keyword']
125,                    } else {,"['}', 'else', '{']","['operator', 'keyword', 'operator']"
126,                        var config image.Config,"['var', 'config', 'image', '.', 'Config']","['keyword', 'identifier', 'identifier', 'operator', 'identifier']"
127,                        imageReader := bufio.NewReader(imageFile),"['imageReader', ':=', 'bufio', '.', 'NewReader', '(', 'imageFile', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
128,"                        config, err = jpeg.DecodeConfig(imageReader)","['config', ',', 'err', '=', 'jpeg', '.', 'DecodeConfig', '(', 'imageReader', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
129,"                        width, height = config.Width, config.Height","['width', ',', 'height', '=', 'config', '.', 'Width', ',', 'config', '.', 'Height']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier']"
130,"                        fmt.Printf(""--""+FgGreen+""Verifing""+Reset+"" that %s is %dpx x %dpx\n"", parts[1], width, height)","['fmt', '.', 'Printf', '(', '""--""+FgGreen+""Verifing""+Reset+"" that %s is %dpx x %dpx\\n""', ',', 'parts', '[', '1', '],', 'width', ',', 'height', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
131,                    },['}'],['operator']
132,"                    size := fmt.Sprintf(""\""w\"":%d,\""h\"":%d,"", width, height)","['size', ':=', 'fmt', '.', 'Sprintf', '(', '""\\""w\\"":%d,\\""h\\"":%d,""', ',', 'width', ',', 'height', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
133,                    writer.WriteString(size),"['writer', '.', 'WriteString', '(', 'size', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
134,"                } else if(strings.Contains(line, ""Kd "")) {","['}', 'else', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""Kd ""', '))', '{']","['operator', 'keyword', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator']"
135,"                    parts := strings.Split(line, "" "")","['parts', ':=', 'strings', '.', 'Split', '(', 'line', ',', '"" ""', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
136,"                    entry := fmt.Sprintf(""\""r\"":%s, \""g\"":%s, \""b\"":%s,"", parts[1], parts[2], parts[3])","['entry', ':=', 'fmt', '.', 'Sprintf', '(', '""\\""r\\"":%s, \\""g\\"":%s, \\""b\\"":%s,""', ',', 'parts', '[', '1', '],', 'parts', '[', '2', '],', 'parts', '[', '3', '])']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
137,                    writer.WriteString(entry),"['writer', '.', 'WriteString', '(', 'entry', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
138,                },['}'],['operator']
139,                buffer.Reset(),"['buffer', '.', 'Reset', '()']","['identifier', 'operator', 'identifier', 'operator']"
140,            },['}'],['operator']
141,        },['}'],['operator']
142,        if err == io.EOF {,"['if', 'err', '==', 'io', '.', 'EOF', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
143,            err = nil,"['err', '=', 'nil']","['identifier', 'operator', 'identifier']"
144,        },['}'],['operator']
145,"        writer.WriteString(""\""res\"":100,\""uv\"":true}]"");","['writer', '.', 'WriteString', '(', '""\\""res\\"":100,\\""uv\\"":true}]""', ');']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
146,    },['}'],['operator']
147,    // Close json,['// Close json'],"['comment', 'Close', 'json']"
148,"    writer.WriteString(""}"");","['writer', '.', 'WriteString', '(', '""}""', ');']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
149,    writer.Flush(),"['writer', '.', 'Flush', '()']","['identifier', 'operator', 'identifier', 'operator']"
150,    jsonFile.Close(),"['jsonFile', '.', 'Close', '()']","['identifier', 'operator', 'identifier', 'operator']"
151,"    fmt.Printf(""--""+FgGreen+""Exported""+Reset+"" %d faces with %d verticies\n"", len(Faces), len(Verts))","['fmt', '.', 'Printf', '(', '""--""+FgGreen+""Exported""+Reset+"" %d faces with %d verticies\\n""', ',', 'len', '(', 'Faces', '),', 'len', '(', 'Verts', '))']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
152,    finished <- -1,"['finished', '<-', '-', '1']","['identifier', 'operator', 'operator', 'decimal_literal']"
153,},['}'],['operator']
154,func main(){,"['func', 'main', '(){']","['keyword', 'identifier', 'operator']"
155,    // Verify we were called correctly,['// Verify we were called correctly'],"['comment', 'Verify', 'we', 'were', 'called', 'correctly']"
156,    if len(os.Args) < 2 {,"['if', 'len', '(', 'os', '.', 'Args', ')', '<', '2', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal', 'operator']"
157,"        fmt.Println(""Usage: go run objParser.go "");","['fmt', '.', 'Println', '(', '""Usage: go run objParser.go ""', ');']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
158,        return,['return'],['keyword']
159,    },['}'],['operator']
160,    files := len(os.Args),"['files', ':=', 'len', '(', 'os', '.', 'Args', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
161,    finished := make(chan int),"['finished', ':=', 'make', '(', 'chan', 'int', ')']","['identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator']"
162,    now := time.Now(),"['now', ':=', 'time', '.', 'Now', '()']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
163,    for i := 1; i < files; i++ {,"['for', 'i', ':=', '1', ';', 'i', '<', 'files', ';', 'i', '++', '{']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
164,"        go parseFile(os.Args[i], finished)","['go', 'parseFile', '(', 'os', '.', 'Args', '[', 'i', '],', 'finished', ')']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
165,    },['}'],['operator']
166,    for i := 1; i < files; i++ {,"['for', 'i', ':=', '1', ';', 'i', '<', 'files', ';', 'i', '++', '{']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
167,        <- finished,"['<-', 'finished']","['operator', 'identifier']"
168,    },['}'],['operator']
169,"    fmt.Printf(""Parsed %d files in %s\n"", files-1, time.Since(now))","['fmt', '.', 'Printf', '(', '""Parsed %d files in %s\\n""', ',', 'files', '-', '1', ',', 'time', '.', 'Since', '(', 'now', '))']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
170,},['}'],['operator']
