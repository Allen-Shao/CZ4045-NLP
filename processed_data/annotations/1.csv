,text,token,annotation
0,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
1,"func parseFile(name string, finished chan int) {","['func', 'parseFile', '(', 'name', 'string', ',', 'finished', 'chan', 'int', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
2,    var Verts []*Vertex,"['var', 'Verts', '[]*', 'Vertex']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
3,    var Texs []*TexCoord,"['var', 'Texs', '[]*', 'TexCoord']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
4,    var Faces []*Face,"['var', 'Faces', '[]*', 'Face']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
5,"    var objFile, mtlFile, jsonFile *os.File","['var', 'objFile', ',', 'mtlFile', ',', 'jsonFile', '*', 'os', '.', 'File']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
6,    var parseMaterial bool,"['var', 'parseMaterial', 'bool']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
7,    // Set up files and i/o,['// Set up files and i/o'],"['COMMENT', 'NNP', 'RP', 'NNS', 'CC', 'NN']"
8,    inName := name,"['inName', ':=', 'name']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
9,"    outName := strings.Replace(inName, "".obj"", "".json3d"", -1)","['outName', ':=', 'strings', '.', 'Replace', '(', 'inName', ',', '"".obj"", "".json3d""', ',', '-', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
10,    parseMaterial = false,"['parseMaterial', '=', 'false']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
11,"    fmt.Printf(""--""+FgGreen+""Creating""+Reset+"" %s from %s\n"", outName, inName)","['fmt', '.', 'Printf', '(', '""--""+FgGreen+""Creating""+Reset+"" %s from %s\\n""', ',', 'outName', ',', 'inName', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
12,    var err error,"['var', 'err', 'error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
13,    var part []byte,"['var', 'part', '[]', 'byte']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
14,    var prefix bool,"['var', 'prefix', 'bool']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
15,"    if objFile, err = os.Open(inName); err != nil {","['if', 'objFile', ',', 'err', '=', 'os', '.', 'Open', '(', 'inName', ');', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
16,"        fmt.Println(FgRed+""!!Failed to open input file!!""+Reset)","['fmt', '.', 'Println', '(', 'FgRed', '+', '""!!Failed to open input file!!""', '+', 'Reset', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
17,        return,['return'],['KEYWORD']
18,    },['}'],['OPERATOR']
19,"    if jsonFile, err = os.Create(outName); err != nil {","['if', 'jsonFile', ',', 'err', '=', 'os', '.', 'Create', '(', 'outName', ');', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
20,"        fmt.Println(FgRed+""!!Failed to create output file!!""+Reset)","['fmt', '.', 'Println', '(', 'FgRed', '+', '""!!Failed to create output file!!""', '+', 'Reset', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
21,        return,['return'],['KEYWORD']
22,    },['}'],['OPERATOR']
23,    reader := bufio.NewReader(objFile),"['reader', ':=', 'bufio', '.', 'NewReader', '(', 'objFile', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
24,    writer := bufio.NewWriter(jsonFile),"['writer', ':=', 'bufio', '.', 'NewWriter', '(', 'jsonFile', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
25,"    buffer := bytes.NewBuffer(make([]byte, 1024))","['buffer', ':=', 'bytes', '.', 'NewBuffer', '(', 'make', '([]', 'byte', ',', '1024', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
26,    // Read the file in and parse out what we need,['// Read the file in and parse out what we need'],"['COMMENT', 'VB', 'DT', 'NN', 'IN', 'CC', 'VB', 'RP', 'WP', 'PRP', 'VBP']"
27,    for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
28,"        if part, prefix, err = reader.ReadLine(); err != nil {","['if', 'part', ',', 'prefix', ',', 'err', '=', 'reader', '.', 'ReadLine', '();', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
29,            break,['break'],['KEYWORD']
30,        },['}'],['OPERATOR']
31,        buffer.Write(part),"['buffer', '.', 'Write', '(', 'part', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
32,        if !prefix {,"['if', '!', 'prefix', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
33,            line := buffer.String(),"['line', ':=', 'buffer', '.', 'String', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
34,"            if(strings.Contains(line, ""v "")) {","['if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""v ""', '))', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
35,"                Verts = append(Verts, parseVertex(line))","['Verts', '=', 'append', '(', 'Verts', ',', 'parseVertex', '(', 'line', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
36,"            } else if(strings.Contains(line, ""vt "")) {","['}', 'else', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""vt ""', '))', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
37,"                Texs = append(Texs, parseTexCoord(line))","['Texs', '=', 'append', '(', 'Texs', ',', 'parseTexCoord', '(', 'line', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
38,"            } else if(strings.Contains(line, ""f "")) {","['}', 'else', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""f ""', '))', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
39,"                Faces = append(Faces, parseFace(line, Verts, Texs))","['Faces', '=', 'append', '(', 'Faces', ',', 'parseFace', '(', 'line', ',', 'Verts', ',', 'Texs', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
40,"            } else if(strings.Contains(line, ""mtllib "")) {","['}', 'else', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""mtllib ""', '))', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
41,"                mtlName := strings.Split(line, "" "")[1]","['mtlName', ':=', 'strings', '.', 'Split', '(', 'line', ',', '"" ""', ')[', '1', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
42,"                if mtlFile, err = os.Open(mtlName); err != nil {","['if', 'mtlFile', ',', 'err', '=', 'os', '.', 'Open', '(', 'mtlName', ');', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
43,"                    fmt.Printf(""--""+FgRed+""Failed to find material file: %s\n""+Reset, mtlName)","['fmt', '.', 'Printf', '(', '""--""+FgRed+""Failed to find material file: %s\\n""', '+', 'Reset', ',', 'mtlName', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
44,                    parseMaterial = false,"['parseMaterial', '=', 'false']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
45,                } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
46,                    parseMaterial = true,"['parseMaterial', '=', 'true']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
47,                },['}'],['OPERATOR']
48,            },['}'],['OPERATOR']
49,            buffer.Reset(),"['buffer', '.', 'Reset', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
50,        },['}'],['OPERATOR']
51,    },['}'],['OPERATOR']
52,    if err == io.EOF {,"['if', 'err', '==', 'io', '.', 'EOF', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
53,        err = nil,"['err', '=', 'nil']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
54,    },['}'],['OPERATOR']
55,    objFile.Close(),"['objFile', '.', 'Close', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
56,    // Write out the data,['// Write out the data'],"['COMMENT', 'VB', 'RP', 'DT', 'NNS']"
57,"    writer.WriteString(""{\""obj\"":[\n"");","['writer', '.', 'WriteString', '(', '""{\\""obj\\"":[\\n""', ');']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
58,    // Write out the verts,['// Write out the verts'],"['COMMENT', 'VB', 'RP', 'DT', 'NNS']"
59,"    writer.WriteString(""{\""vrt\"":[\n"");","['writer', '.', 'WriteString', '(', '""{\\""vrt\\"":[\\n""', ');']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
60,"    for i, vert := range Verts {","['for', 'i', ',', 'vert', ':=', 'range', 'Verts', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
61,        writer.WriteString(vert.String()),"['writer', '.', 'WriteString', '(', 'vert', '.', 'String', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
62,"        if i < len(Verts) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Verts', ')', '-', '1', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
63,"        writer.WriteString(""\n"")","['writer', '.', 'WriteString', '(', '""\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
64,    },['}'],['OPERATOR']
65,    // Write out the faces,['// Write out the faces'],"['COMMENT', 'VB', 'RP', 'DT', 'VBZ']"
66,"    writer.WriteString(""],\""fac\"":[\n"")","['writer', '.', 'WriteString', '(', '""],\\""fac\\"":[\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
67,"    for i, face := range Faces {","['for', 'i', ',', 'face', ':=', 'range', 'Faces', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
68,        writer.WriteString(face.String(true)),"['writer', '.', 'WriteString', '(', 'face', '.', 'String', '(', 'true', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
69,"        if i < len(Faces) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
70,"        writer.WriteString(""\n"")","['writer', '.', 'WriteString', '(', '""\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
71,    },['}'],['OPERATOR']
72,    // Write out the normals,['// Write out the normals'],"['COMMENT', 'VB', 'RP', 'DT', 'NNS']"
73,"    writer.WriteString(""],\""nrm\"":["")","['writer', '.', 'WriteString', '(', '""],\\""nrm\\"":[""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
74,"    for i, face := range Faces {","['for', 'i', ',', 'face', ':=', 'range', 'Faces', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
75,"        writer.WriteString(""["")","['writer', '.', 'WriteString', '(', '""[""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
76,"        for j, vert := range face.verts {","['for', 'j', ',', 'vert', ':=', 'range', 'face', '.', 'verts', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
77,            length := math.Sqrt((vert.X * vert.X) + (vert.Y * vert.Y) + (vert.Z * vert.Z)),"['length', ':=', 'math', '.', 'Sqrt', '((', 'vert', '.', 'X', '*', 'vert', '.', 'X', ')', '+', '(', 'vert', '.', 'Y', '*', 'vert', '.', 'Y', ')', '+', '(', 'vert', '.', 'Z', '*', 'vert', '.', 'Z', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
78,            x := vert.X / length,"['x', ':=', 'vert', '.', 'X', 'length']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER']"
79,            y := vert.Y / length,"['y', ':=', 'vert', '.', 'Y', 'length']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER']"
80,            z := vert.Z / length,"['z', ':=', 'vert', '.', 'Z', 'length']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER']"
81,"            normal := fmt.Sprintf(""[%f,%f,%f]"", x, y, z)","['normal', ':=', 'fmt', '.', 'Sprintf', '(', '""[%f,%f,%f]""', ',', 'x', ',', 'y', ',', 'z', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
82,            writer.WriteString(normal),"['writer', '.', 'WriteString', '(', 'normal', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
83,"            if(j < len(face.verts)-1) { writer.WriteString("","") }","['if', '(', 'j', '<', 'len', '(', 'face', '.', 'verts', ')-', '1', ')', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
84,        },['}'],['OPERATOR']
85,"        writer.WriteString(""]"")","['writer', '.', 'WriteString', '(', '""]""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
86,"        //writer.WriteString(""[0, 1, 0]"")","['//writer.WriteString(""[0, 1, 0]"")']","['COMMENT', 'NN', '(', '``', 'RB', 'CD', ',', 'CD', ',', 'CD', 'NN', ""''"", ')']"
87,"        if i < len(Faces) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
88,"        writer.WriteString(""\n"")","['writer', '.', 'WriteString', '(', '""\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
89,    },['}'],['OPERATOR']
90,    // Write out the tex coords,['// Write out the tex coords'],"['COMMENT', 'VB', 'RP', 'DT', 'NN', 'NNS']"
91,"    writer.WriteString(""],\""tex\"":["")","['writer', '.', 'WriteString', '(', '""],\\""tex\\"":[""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
92,"    for i, face := range Faces {","['for', 'i', ',', 'face', ':=', 'range', 'Faces', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
93,"        writer.WriteString(""["")","['writer', '.', 'WriteString', '(', '""[""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
94,        writer.WriteString(face.tex[0].String()),"['writer', '.', 'WriteString', '(', 'face', '.', 'tex', '[', '0', '].', 'String', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
95,"        writer.WriteString("","")","['writer', '.', 'WriteString', '(', '"",""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
96,        writer.WriteString(face.tex[1].String()),"['writer', '.', 'WriteString', '(', 'face', '.', 'tex', '[', '1', '].', 'String', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
97,"        writer.WriteString("","")","['writer', '.', 'WriteString', '(', '"",""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
98,        writer.WriteString(face.tex[2].String()),"['writer', '.', 'WriteString', '(', 'face', '.', 'tex', '[', '2', '].', 'String', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
99,"        writer.WriteString(""]"")","['writer', '.', 'WriteString', '(', '""]""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
100,"        if i < len(Faces) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer', '.', 'WriteString', '(', '"",""', ')', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
101,"        writer.WriteString(""\n"")","['writer', '.', 'WriteString', '(', '""\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
102,    },['}'],['OPERATOR']
103,    // Close obj block,['// Close obj block'],"['COMMENT', 'NNP', 'PRP', 'NN']"
104,"    writer.WriteString(""]}]"");","['writer', '.', 'WriteString', '(', '""]}]""', ');']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
105,    if parseMaterial {,"['if', 'parseMaterial', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR']"
106,"        writer.WriteString("",mat:[{"");","['writer', '.', 'WriteString', '(', '"",mat:[{""', ');']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
107,        reader := bufio.NewReader(mtlFile),"['reader', ':=', 'bufio', '.', 'NewReader', '(', 'mtlFile', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
108,        // Read the file in and parse out what we need,['// Read the file in and parse out what we need'],"['COMMENT', 'VB', 'DT', 'NN', 'IN', 'CC', 'VB', 'RP', 'WP', 'PRP', 'VBP']"
109,        for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
110,"            if part, prefix, err = reader.ReadLine(); err != nil {","['if', 'part', ',', 'prefix', ',', 'err', '=', 'reader', '.', 'ReadLine', '();', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
111,                break,['break'],['KEYWORD']
112,            },['}'],['OPERATOR']
113,            buffer.Write(part),"['buffer', '.', 'Write', '(', 'part', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
114,            if !prefix {,"['if', '!', 'prefix', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
115,                line := buffer.String(),"['line', ':=', 'buffer', '.', 'String', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
116,"                if(strings.Contains(line, ""map_Kd "")) {","['if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""map_Kd ""', '))', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
117,"                    parts := strings.Split(line, "" "")","['parts', ':=', 'strings', '.', 'Split', '(', 'line', ',', '"" ""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
118,"                    entry := fmt.Sprintf(""\""t\"":\""%s\"","", parts[1])","['entry', ':=', 'fmt', '.', 'Sprintf', '(', '""\\""t\\"":\\""%s\\"",""', ',', 'parts', '[', '1', '])']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
119,                    writer.WriteString(entry),"['writer', '.', 'WriteString', '(', 'entry', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
120,"                    width, height := 256, 256","['width', ',', 'height', ':=', '256', ',', '256']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL']"
121,                    var imageFile *os.File,"['var', 'imageFile', '*', 'os', '.', 'File']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
122,"                    if imageFile, err = os.Open(parts[1]); err != nil {","['if', 'imageFile', ',', 'err', '=', 'os', '.', 'Open', '(', 'parts', '[', '1', ']);', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
123,"                        fmt.Printf(""--""+FgRed+""Failed to find %s, defaulting to 256x256""+Reset+""\n"", parts[1])","['fmt', '.', 'Printf', '(', '""--""+FgRed+""Failed to find %s, defaulting to 256x256""+Reset+""\\n""', ',', 'parts', '[', '1', '])']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
124,                        return,['return'],['KEYWORD']
125,                    } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
126,                        var config image.Config,"['var', 'config', 'image', '.', 'Config']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
127,                        imageReader := bufio.NewReader(imageFile),"['imageReader', ':=', 'bufio', '.', 'NewReader', '(', 'imageFile', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
128,"                        config, err = jpeg.DecodeConfig(imageReader)","['config', ',', 'err', '=', 'jpeg', '.', 'DecodeConfig', '(', 'imageReader', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
129,"                        width, height = config.Width, config.Height","['width', ',', 'height', '=', 'config', '.', 'Width', ',', 'config', '.', 'Height']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
130,"                        fmt.Printf(""--""+FgGreen+""Verifing""+Reset+"" that %s is %dpx x %dpx\n"", parts[1], width, height)","['fmt', '.', 'Printf', '(', '""--""+FgGreen+""Verifing""+Reset+"" that %s is %dpx x %dpx\\n""', ',', 'parts', '[', '1', '],', 'width', ',', 'height', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
131,                    },['}'],['OPERATOR']
132,"                    size := fmt.Sprintf(""\""w\"":%d,\""h\"":%d,"", width, height)","['size', ':=', 'fmt', '.', 'Sprintf', '(', '""\\""w\\"":%d,\\""h\\"":%d,""', ',', 'width', ',', 'height', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
133,                    writer.WriteString(size),"['writer', '.', 'WriteString', '(', 'size', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
134,"                } else if(strings.Contains(line, ""Kd "")) {","['}', 'else', 'if', '(', 'strings', '.', 'Contains', '(', 'line', ',', '""Kd ""', '))', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
135,"                    parts := strings.Split(line, "" "")","['parts', ':=', 'strings', '.', 'Split', '(', 'line', ',', '"" ""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
136,"                    entry := fmt.Sprintf(""\""r\"":%s, \""g\"":%s, \""b\"":%s,"", parts[1], parts[2], parts[3])","['entry', ':=', 'fmt', '.', 'Sprintf', '(', '""\\""r\\"":%s, \\""g\\"":%s, \\""b\\"":%s,""', ',', 'parts', '[', '1', '],', 'parts', '[', '2', '],', 'parts', '[', '3', '])']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
137,                    writer.WriteString(entry),"['writer', '.', 'WriteString', '(', 'entry', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
138,                },['}'],['OPERATOR']
139,                buffer.Reset(),"['buffer', '.', 'Reset', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
140,            },['}'],['OPERATOR']
141,        },['}'],['OPERATOR']
142,        if err == io.EOF {,"['if', 'err', '==', 'io', '.', 'EOF', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
143,            err = nil,"['err', '=', 'nil']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
144,        },['}'],['OPERATOR']
145,"        writer.WriteString(""\""res\"":100,\""uv\"":true}]"");","['writer', '.', 'WriteString', '(', '""\\""res\\"":100,\\""uv\\"":true}]""', ');']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
146,    },['}'],['OPERATOR']
147,    // Close json,['// Close json'],"['COMMENT', 'NNP', 'NN']"
148,"    writer.WriteString(""}"");","['writer', '.', 'WriteString', '(', '""}""', ');']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
149,    writer.Flush(),"['writer', '.', 'Flush', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
150,    jsonFile.Close(),"['jsonFile', '.', 'Close', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
151,"    fmt.Printf(""--""+FgGreen+""Exported""+Reset+"" %d faces with %d verticies\n"", len(Faces), len(Verts))","['fmt', '.', 'Printf', '(', '""--""+FgGreen+""Exported""+Reset+"" %d faces with %d verticies\\n""', ',', 'len', '(', 'Faces', '),', 'len', '(', 'Verts', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
152,    finished <- -1,"['finished', '<-', '-', '1']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
153,},['}'],['OPERATOR']
154,func main(){,"['func', 'main', '(){']","['KEYWORD', 'IDENTIFIER', 'OPERATOR']"
155,    // Verify we were called correctly,['// Verify we were called correctly'],"['COMMENT', 'IN', 'PRP', 'VBD', 'VBN', 'RB']"
156,    if len(os.Args) < 2 {,"['if', 'len', '(', 'os', '.', 'Args', ')', '<', '2', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
157,"        fmt.Println(""Usage: go run objParser.go "");","['fmt', '.', 'Println', '(', '""Usage: go run objParser.go ""', ');']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
158,        return,['return'],['KEYWORD']
159,    },['}'],['OPERATOR']
160,    files := len(os.Args),"['files', ':=', 'len', '(', 'os', '.', 'Args', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
161,    finished := make(chan int),"['finished', ':=', 'make', '(', 'chan', 'int', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
162,    now := time.Now(),"['now', ':=', 'time', '.', 'Now', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
163,    for i := 1; i < files; i++ {,"['for', 'i', ':=', '1', ';', 'i', '<', 'files', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
164,"        go parseFile(os.Args[i], finished)","['go', 'parseFile', '(', 'os', '.', 'Args', '[', 'i', '],', 'finished', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
165,    },['}'],['OPERATOR']
166,    for i := 1; i < files; i++ {,"['for', 'i', ':=', '1', ';', 'i', '<', 'files', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
167,        <- finished,"['<-', 'finished']","['OPERATOR', 'IDENTIFIER']"
168,    },['}'],['OPERATOR']
169,"    fmt.Printf(""Parsed %d files in %s\n"", files-1, time.Since(now))","['fmt', '.', 'Printf', '(', '""Parsed %d files in %s\\n""', ',', 'files', '-', '1', ',', 'time', '.', 'Since', '(', 'now', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
170,},['}'],['OPERATOR']
