,text,token,annotation
0,"I'd like to tail -f several log files in /var/log (I thing one goroutine per log would be fine) and every goroutine will keep on ""watching"" forever on log and send every new line with kafka client sarama.
Here is my code (does not work) :

","[""I'd"", 'like', 'to', 'tail', '-f', 'several', 'log', 'files', 'in', '/var/log', '(I', 'thing', 'one', 'goroutine', 'per', 'log', 'would', 'be', 'fine)', 'and', 'every', 'goroutine', 'will', 'keep', 'on', '""watching""', 'forever', 'on', 'log', 'and', 'send', 'every', 'new', 'line', 'with', 'kafka', 'client', 'sarama.', 'Here', 'is', 'my', 'code', '(does', 'not', 'work)', ':']","['NNP', 'IN', 'TO', 'VB', 'NNP', 'JJ', 'NN', 'NNS', 'IN', 'NNP', 'NNP', 'NN', 'CD', 'NN', 'IN', 'NN', 'MD', 'VB', 'JJ', 'CC', 'DT', 'NN', 'MD', 'VB', 'IN', 'JJ', 'NN', 'IN', 'NN', 'CC', 'VB', 'DT', 'JJ', 'NN', 'IN', 'JJ', 'NN', 'NN', 'RB', 'VBZ', 'PRP$', 'NN', 'VBZ', 'RB', 'JJ', ':']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""flag""","['""flag""']",['STRING_LITERAL']
4,"    ""github.com/Shopify/sarama""","['""github.com/Shopify/sarama""']",['STRING_LITERAL']
5,"    ""log""","['""log""']",['STRING_LITERAL']
6,"    ""os""","['""os""']",['STRING_LITERAL']
7,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
8,"    ""strings""","['""strings""']",['STRING_LITERAL']
9,"    ""github.com/hpcloud/tail""","['""github.com/hpcloud/tail""']",['STRING_LITERAL']
10,"    ""github.com/spf13/viper""","['""github.com/spf13/viper""']",['STRING_LITERAL']
11,"    //""io/ioutil""","['//', '""io/ioutil""']","['COMMENT', 'NN']"
12,"    ""reflect""","['""reflect""']",['STRING_LITERAL']
13,),[')'],['PUNCTUATION']
14,"func produce(producer sarama.SyncProducer, cfg *sarama.Config, brokers *string, topic string, logger *log.Logger, log string, t *tail.Tail){","['func', 'produce', '(', 'producer', 'sarama', '.', 'SyncProducer', ',', 'cfg', '*', 'sarama', '.', 'Config', ',', 'brokers', '*', 'string', ',', 'topic', 'string', ',', 'logger', '*', 'log', '.', 'Logger', ',', 'log', 'string', ',', 't', '*', 'tail', '.', 'Tail', '){
15,"    logger.Printf(""Entering produce"")","['logger.Printf(""Entering produce"")']",['FUNCTION_CALL']
16,"    logger.Println(strings.Split(*brokers, "",""))","['logger.Println(strings.Split(*brokers, "",""))']",['FUNCTION_CALL']
17,"    logger.Println(reflect.TypeOf(strings.Split(*brokers, "","")))","['logger.Println(reflect.TypeOf(strings.Split(*brokers, "","")))']",['FUNCTION_CALL']
18,    logger.Println(log),['logger.Println(log)'],['FUNCTION_CALL']
19,"    /*t, err := tail.TailFile(log, tail.Config{Follow: true, ReOpen: true})","['/*', 't', ',', 'err', ':=', 'tail.TailFile(log, tail.Config{Follow: true, ReOpen: true})']","['PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
20,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
21,"        fmt.Println(fmt.Errorf(""Error with tail: %v\n"", err.Error()))","['fmt.Println(fmt.Errorf(""Error with tail: %v\\n"", err.Error()))']",['FUNCTION_CALL']
22,    }*/,['}*/'],['PUNCTUATION']
23,    for line := range t.Lines {,"['for', 'line', ':=', 'range', 't', '.', 'Lines', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
24,        //logger.Println(line),"['//', 'logger.Println(line)']","['COMMENT', 'NN']"
25,        //logger.Println(line.Text),"['//', 'logger.Println(line.Text)']","['COMMENT', 'NN']"
26,"        msg := &sarama.ProducerMessage{Topic: topic, Value: sarama.StringEncoder(line.Text)}","['msg', ':=', '&', 'sarama', '.', 'ProducerMessage', '{', 'Topic', ':', 'topic', ',', 'Value', ':', 'sarama.StringEncoder(line.Text)', '}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
27,"        _, _, err := producer.SendMessage(msg)","['_', ',', '_', ',', 'err', ':=', 'producer.SendMessage(msg)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
28,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
29,"            logger.Printf(""FAILED to send message: %s\n"", err)","['logger.Printf(""FAILED to send message: %s\\n"", err)']",['FUNCTION_CALL']
30,        },['}'],['PUNCTUATION']
31,    },['}'],['PUNCTUATION']
32,},['}'],['PUNCTUATION']
33,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
34,    //Getting config file params,"['//', 'Getting', 'config', 'file', 'params']","['COMMENT', 'VBG', 'NN', 'NN', 'NNS']"
35,"    viper.SetConfigName(""config"") ","['viper.SetConfigName(""config"")']",['FUNCTION_CALL']
36,"    viper.AddConfigPath(""/root/work/src/linux2kafka/"")","['viper.AddConfigPath(""/root/work/src/linux2kafka/"")']",['FUNCTION_CALL']
37,    err := viper.ReadInConfig(),"['err', ':=', 'viper.ReadInConfig()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
38,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
39,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
40,    },['}'],['PUNCTUATION']
41,    viper.WatchConfig(),['viper.WatchConfig()'],['FUNCTION_CALL']
42,"    logList := viper.Get(""log_list"")","['logList', ':=', 'viper.Get(""log_list"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
43,"    //logListString, err := ioutil.ReadFile(logList.(string))","['//', 'logListString,', 'err', ':=', 'ioutil.ReadFile(logList.(string))']","['COMMENT', 'NN', 'NN', 'NNP', 'NN']"
44,    //fmt.Println(logList),"['//', 'fmt.Println(logList)']","['COMMENT', 'NN']"
45,    //fmt.Println(reflect.TypeOf(logList)),"['//', 'fmt.Println(reflect.TypeOf(logList))']","['COMMENT', 'NN']"
46,"    logsConfig := strings.Split(logList.(string),"","")","['logsConfig', ':=', 'strings.Split(logList.(string),"","")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
47,    // print logs to watch,"['//', 'print', 'logs', 'to', 'watch']","['COMMENT', 'NN', 'NNS', 'TO', 'VB']"
48,    /*for i := range logsConfig {,"['/*', 'for', 'i', ':=', 'range', 'logsConfig', '{']","['PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
49,        fmt.Println(logsConfig[i]),['fmt.Println(logsConfig[i])'],['FUNCTION_CALL']
50,    }*/,['}*/'],['PUNCTUATION']
51,"    brokerList := viper.Get(""brokerList"")","['brokerList', ':=', 'viper.Get(""brokerList"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
52,"    brokers := flag.String(""brokers"", brokerList.(string), ""Comma separated kafka brokers list"") //must be set in config.toml","['brokers', ':=', 'flag.String(""brokers"", brokerList.(string), ""Comma separated kafka brokers list"")', '//', 'must', 'be', 'set', 'in', 'config.toml']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'COMMENT', 'MD', 'VB', 'VBN', 'IN', 'NN']"
53,"    topic := flag.String(""topic"", ""test0"", ""Kafka topic to send messages to"")","['topic', ':=', 'flag.String(""topic"", ""test0"", ""Kafka topic to send messages to"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
54,    flag.Parse(),['flag.Parse()'],['FUNCTION_CALL']
55,"    logger := log.New(os.Stdout, ""producer "", log.Lmicroseconds)","['logger', ':=', 'log.New(os.Stdout, ""producer "", log.Lmicroseconds)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
56,    cfg := sarama.NewConfig(),"['cfg', ':=', 'sarama.NewConfig()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
57,    //Wait for replication,"['//', 'Wait', 'for', 'replication']","['COMMENT', 'NNP', 'IN', 'NN']"
58,    cfg.Producer.RequiredAcks = -1,"['cfg', '.', 'Producer', '.', 'RequiredAcks', '=', '-', '1']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL']"
59,    cfg.Producer.Flush.Frequency = 333,"['cfg', '.', 'Producer', '.', 'Flush', '.', 'Frequency', '=', '333']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
60,    cfg.Producer.Flush.Messages = 1000,"['cfg', '.', 'Producer', '.', 'Flush', '.', 'Messages', '=', '1000']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
61,    cfg.Producer.Flush.MaxMessages = 3000,"['cfg', '.', 'Producer', '.', 'Flush', '.', 'MaxMessages', '=', '3000']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
62,"    producer, err := sarama.NewSyncProducer(strings.Split(*brokers, "",""), cfg)","['producer', ',', 'err', ':=', 'sarama.NewSyncProducer(strings.Split(*brokers, "",""), cfg)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
63,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
64,        logger.Fatalln(err),['logger.Fatalln(err)'],['FUNCTION_CALL']
65,    },['}'],['PUNCTUATION']
66,    defer func() {,"['defer', 'func', '()', '{']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
67,        if err := producer.Close(); err != nil {,"['if', 'err', ':=', 'producer.Close()', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
68,            logger.Fatalln(err),['logger.Fatalln(err)'],['FUNCTION_CALL']
69,        },['}'],['PUNCTUATION']
70,    }(),['}()'],['PUNCTUATION']
71,    for i := range logsConfig {,"['for', 'i', ':=', 'range', 'logsConfig', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
72,"        fmt.Println(""go"")","['fmt.Println(""go"")']",['FUNCTION_CALL']
73,"        t, err := tail.TailFile(logsConfig[i], tail.Config{Follow: true, ReOpen: true})","['t', ',', 'err', ':=', 'tail.TailFile(logsConfig[i], tail.Config{Follow: true, ReOpen: true})']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
74,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
75,"            fmt.Println(fmt.Errorf(""Error with tail: %v\n"", err.Error()))","['fmt.Println(fmt.Errorf(""Error with tail: %v\\n"", err.Error()))']",['FUNCTION_CALL']
76,        },['}'],['PUNCTUATION']
77,"        go produce(producer, cfg, brokers, *topic, logger, logsConfig[i], t)","['go', 'produce', '(', 'producer', ',', 'cfg', ',', 'brokers', ',', '*', 'topic', ',', 'logger', ',', 'logsConfig', '[', 'i', '],', 't', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
78,        },['}'],['PUNCTUATION']
79,},['}'],['PUNCTUATION']
80,"

And here are my errors (nothing is received by the consumer):

","['And', 'here', 'are', 'my', 'errors', '(nothing', 'is', 'received', 'by', 'the', 'consumer):']","['CC', 'RB', 'VBP', 'PRP$', 'NNS', 'VBG', 'VBZ', 'VBN', 'IN', 'DT', 'NN']"
81,root@home:~/work/src/linux2kafka# go run main.go,"['root@home:~/work/src/linux2kafka#', 'go', 'run', 'main', '.', 'go']","['DIRECTORY', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD']"
82,go,['go'],['KEYWORD']
83,producer 15:54:44.297745 Entering produce,"['producer', '15', ':', '54', ':', '44', '.', '297745', 'Entering', 'produce']","['IDENTIFIER', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER']"
84,root@home:~/work/src/linux2kafka# go run main.go,"['root@home:~/work/src/linux2kafka#', 'go', 'run', 'main', '.', 'go']","['DIRECTORY', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD']"
85,go,['go'],['KEYWORD']
86,root@home:~/work/src/linux2kafka# go run main.go,"['root@home:~/work/src/linux2kafka#', 'go', 'run', 'main', '.', 'go']","['DIRECTORY', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD']"
87,go,['go'],['KEYWORD']
88,root@home:~/work/src/linux2kafka# go run main.go,"['root@home:~/work/src/linux2kafka#', 'go', 'run', 'main', '.', 'go']","['DIRECTORY', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD']"
89,go,['go'],['KEYWORD']
90,producer 15:55:01.951155 Entering produce,"['producer', '15', ':', '55', ':', '01', '.', '951155', 'Entering', 'produce']","['IDENTIFIER', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER']"
91,producer 15:55:01.951193 [localhost:9092 localhost:9092],"['producer', '15', ':', '55', ':', '01', '.', '951193', '[', 'localhost', ':', '9092', 'localhost', ':', '9092', ']']","['IDENTIFIER', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
92,producer 15:55:01.951205 []string,"['producer', '15', ':', '55', ':', '01', '.', '951205', '[]', 'string']","['IDENTIFIER', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER']"
93,producer 15:55:01.951214 /root/work/src/linux2kafka/test/log,"['producer', '15', ':', '55', ':', '01', '.', '951214', '/root/work/src/linux2kafka/test/log']","['IDENTIFIER', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'DIRECTORY']"
94,panic: send on closed channel,"['panic', ':', 'send', 'on', 'closed', 'chan', 'nel']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER']"
95,goroutine 56 [running]:,"['go', 'routine', '56', '[', 'running', ']:']","['KEYWORD', 'IDENTIFIER', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
96,"panic(0x756440, 0xc820164290)","['panic', '(', '0x75644', '0', ',', '0xc82', '01642', '90', ')']","['IDENTIFIER', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'DECIMAL_LITERAL', 'PUNCTUATION']"
97,    /usr/local/go/src/runtime/panic.go:464 +0x3e6,"['/usr/local/go/src/runtime/panic.go:464', '+', '0x3e6']","['DIRECTORY', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
98,"github.com/Shopify/sarama.(*syncProducer).SendMessage(0xc8201742a0, 0xc820176300, 0x0, 0x0, 0x0, 0x0)","['github.com/Shopify/sarama.(*syncProducer).SendMessage(0xc8201742a0,', '0xc82', '01763', '0', '0', ',', '0', 'x0', ',', '0', 'x0', ',', '0', 'x0', ',', '0', 'x0', ')']","['DIRECTORY', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
99,    /root/work/src/github.com/Shopify/sarama/sync_producer.go:66 +0x156,"['/root/work/src/github.com/Shopify/sarama/sync_producer.go:66', '+', '0x156']","['DIRECTORY', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
100,"main.produce(0x7f65528661b8, 0xc8201742a0, 0xc82008ea20, 0xc82000b230, 0x8855c0, 0x5, 0xc8200789b0, 0xc820011320, 0x23, 0xc82017e000)","['main.produce(0x7f65528661b8, 0xc8201742a0, 0xc82008ea20, 0xc82000b230, 0x8855c0, 0x5, 0xc8200789b0, 0xc820011320, 0x23, 0xc82017e000)']",['FUNCTION_CALL']
101,    /root/work/src/linux2kafka/main.go:31 +0x5d2,"['/root/work/src/linux2kafka/main.go:31', '+', '0x5d2']","['DIRECTORY', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
102,created by main.main,"['created', 'by', 'main', '.', 'main']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
103,    /root/work/src/linux2kafka/main.go:85 +0x9f7,"['/root/work/src/linux2kafka/main.go:85', '+', '0x9f7']","['DIRECTORY', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
104,exit status 2,"['exit', 'status', '2']","['IDENTIFIER', 'IDENTIFIER', 'DECIMAL_LITERAL']"
105,"

I cannot understand what I'm doing wrong. thx

Here is the modified code, is that ok ? :

package main

import (
    ""flag""
    ""github.com/Shopify/sarama""
    ""log""
    ""os""
    ""fmt""
    ""strings""
    ""github.com/hpcloud/tail""
    ""github.com/spf13/viper""
    //""io/ioutil""
    //""reflect""
)



//func produce(producer sarama.SyncProducer, cfg *sarama.Config, brokers *string, topic string, logger *log.Logger, log string, t *tail.Tail){
func produce(cfg *sarama.Config, brokers *string, topic string, logger *log.Logger, log string, t *tail.Tail){
    logger.Println(""Entering produce"")
    /*logger.Println(strings.Split(*brokers, "",""))
    logger.Println(reflect.TypeOf(strings.Split(*brokers, "","")))
    logger.Println(log)*/
    logger.Printf(""sarama.NewSyncProducer"")
    producer, err := sarama.NewSyncProducer(strings.Split(*brokers, "",""), cfg)
    if err != nil {
        logger.Fatalln(err)
    }
    defer func() {
        if err := producer.Close(); err != nil {
            logger.Fatalln(err)
        }
    }()

    /*t, err := tail.TailFile(log, tail.Config{Follow: true, ReOpen: true})
    if err != nil {
        fmt.Println(fmt.Errorf(""Error with tail: %v\n"", err.Error()))
    }*/
    for line := range t.Lines {
        //logger.Println(line)
        //logger.Println(line.Text)
        logger.Printf(""ProduceMessage"")
        msg := &sarama.ProducerMessage{Topic: topic, Value: sarama.StringEncoder(line.Text)}
        _, _, err := producer.SendMessage(msg)
        if err != nil {
            logger.Printf(""FAILED to send message: %s\n"", err)
        }
    }

}


func main() {
    //Getting config file params
    viper.SetConfigName(""config"") 
    viper.AddConfigPath(""/root/work/src/linux2kafka/"")
    err := viper.ReadInConfig()
    if err != nil {
        panic(err)
    }
    viper.WatchConfig()
    logList := viper.Get(""log_list"")
    //logListString, err := ioutil.ReadFile(logList.(string))
    //fmt.Println(logList)
    //fmt.Println(reflect.TypeOf(logList))
    logsConfig := strings.Split(logList.(string),"","")
    // print logs to watch
    /*for i := range logsConfig {
        fmt.Println(logsConfig[i])
    }*/
    brokerList := viper.Get(""brokerList"")
    brokers := flag.String(""brokers"", brokerList.(string), ""Comma separated kafka brokers list"") //must be set in config.toml
    topic := flag.String(""topic"", ""test0"", ""Kafka topic to send messages to"")
    flag.Parse()
    logger := log.New(os.Stdout, ""producer "", log.Lmicroseconds)
    cfg := sarama.NewConfig()
    //Wait for replication
    cfg.Producer.RequiredAcks = -1
    cfg.Producer.Flush.Frequency = 333
    cfg.Producer.Flush.Messages = 1000
    cfg.Producer.Flush.MaxMessages = 3000
    for i := range logsConfig {
        fmt.Println(""go"")
        t, err := tail.TailFile(logsConfig[i], tail.Config{Follow: true, ReOpen: true})
        if err != nil {
            fmt.Println(fmt.Errorf(""Error with tail: %v\n"", err.Error()))
        }
        go produce(cfg, brokers, *topic, logger, logsConfig[i], t)
        }
}


But still not working... it's not printing the first Println 

","['I', 'cannot', 'understand', 'what', ""I'm"", 'doing', 'wrong.', 'thx', 'Here', 'is', 'the', 'modified', 'code,', 'is', 'that', 'ok', '?', ':', 'package', 'main', 'import', '(', '""flag""', '""github.com/Shopify/sarama""', '""log""', '""os""', '""fmt""', '""strings""', '""github.com/hpcloud/tail""', '""github.com/spf13/viper""', '//""io/ioutil""', '//""reflect""', ')', '//func', 'produce(producer', 'sarama.SyncProducer,', 'cfg', '*sarama.Config,', 'brokers', '*string,', 'topic', 'string,', 'logger', '*log.Logger,', 'log', 'string,', 't', '*tail.Tail){', 'func', 'produce(cfg', '*sarama.Config,', 'brokers', '*string,', 'topic', 'string,', 'logger', '*log.Logger,', 'log', 'string,', 't', '*tail.Tail){', 'logger.Println(""Entering', 'produce"")', '/*logger.Println(strings.Split(*brokers,', '"",""))', 'logger.Println(reflect.TypeOf(strings.Split(*brokers,', '"","")))', 'logger.Println(log)*/', 'logger.Printf(""sarama.NewSyncProducer"")', 'producer,', 'err', ':=', 'sarama.NewSyncProducer(strings.Split(*brokers,', '"",""),', 'cfg)', 'if', 'err', '!=', 'nil', '{', 'logger.Fatalln(err)', '}', 'defer', 'func()', '{', 'if', 'err', ':=', 'producer.Close();', 'err', '!=', 'nil', '{', 'logger.Fatalln(err)', '}', '}()', '/*t,', 'err', ':=', 'tail.TailFile(log,', 'tail.Config{Follow:', 'true,', 'ReOpen:', 'true})', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(fmt.Errorf(""Error', 'with', 'tail:', '%v\\n"",', 'err.Error()))', '}*/', 'for', 'line', ':=', 'range', 't.Lines', '{', '//logger.Println(line)', '//logger.Println(line.Text)', 'logger.Printf(""ProduceMessage"")', 'msg', ':=', '&sarama.ProducerMessage{Topic:', 'topic,', 'Value:', 'sarama.StringEncoder(line.Text)}', '_,', '_,', 'err', ':=', 'producer.SendMessage(msg)', 'if', 'err', '!=', 'nil', '{', 'logger.Printf(""FAILED', 'to', 'send', 'message:', '%s\\n"",', 'err)', '}', '}', '}', 'func', 'main()', '{', '//Getting', 'config', 'file', 'params', 'viper.SetConfigName(""config"")', 'viper.AddConfigPath(""/root/work/src/linux2kafka/"")', 'err', ':=', 'viper.ReadInConfig()', 'if', 'err', '!=', 'nil', '{', 'panic(err)', '}', 'viper.WatchConfig()', 'logList', ':=', 'viper.Get(""log_list"")', '//logListString,', 'err', ':=', 'ioutil.ReadFile(logList.(string))', '//fmt.Println(logList)', '//fmt.Println(reflect.TypeOf(logList))', 'logsConfig', ':=', 'strings.Split(logList.(string),"","")', '//', 'print', 'logs', 'to', 'watch', '/*for', 'i', ':=', 'range', 'logsConfig', '{', 'fmt.Println(logsConfig[i])', '}*/', 'brokerList', ':=', 'viper.Get(""brokerList"")', 'brokers', ':=', 'flag.String(""brokers"",', 'brokerList.(string),', '""Comma', 'separated', 'kafka', 'brokers', 'list"")', '//must', 'be', 'set', 'in', 'config.toml', 'topic', ':=', 'flag.String(""topic"",', '""test0"",', '""Kafka', 'topic', 'to', 'send', 'messages', 'to"")', 'flag.Parse()', 'logger', ':=', 'log.New(os.Stdout,', '""producer', '"",', 'log.Lmicroseconds)', 'cfg', ':=', 'sarama.NewConfig()', '//Wait', 'for', 'replication', 'cfg.Producer.RequiredAcks', '=', '-1', 'cfg.Producer.Flush.Frequency', '=', '333', 'cfg.Producer.Flush.Messages', '=', '1000', 'cfg.Producer.Flush.MaxMessages', '=', '3000', 'for', 'i', ':=', 'range', 'logsConfig', '{', 'fmt.Println(""go"")', 't,', 'err', ':=', 'tail.TailFile(logsConfig[i],', 'tail.Config{Follow:', 'true,', 'ReOpen:', 'true})', 'if', 'err', '!=', 'nil', '{', 'fmt.Println(fmt.Errorf(""Error', 'with', 'tail:', '%v\\n"",', 'err.Error()))', '}', 'go', 'produce(cfg,', 'brokers,', '*topic,', 'logger,', 'logsConfig[i],', 't)', '}', '}', 'But', 'still', 'not', 'working...', ""it's"", 'not', 'printing', 'the', 'first', 'Println']","['PRP', 'VBP', 'VB', 'WP', 'NNP', 'VBG', 'JJ', 'NN', 'RB', 'VBZ', 'DT', 'JJ', 'NN', 'VBZ', 'IN', 'JJ', '.', ':', 'NN', 'JJ', 'NN', '(', 'JJ', 'NNP', 'NNP', 'NNP', 'NNP', 'NNP', 'NNP', 'NNP', 'NNP', 'NNP', ')', 'VBZ', 'JJ', 'NN', 'NN', 'NN', 'NNS', 'VBP', 'NN', 'NN', 'NN', 'NNP', 'NN', 'NN', 'NN', 'NNP', 'NN', 'NN', 'NN', 'NNS', 'VBP', 'NN', 'NN', 'NN', 'NNP', 'NN', 'NN', 'NN', 'NNP', 'VBG', 'NN', 'NNP', 'NNP', 'VBZ', 'NNP', 'NN', 'NN', 'NN', 'NN', 'NNP', 'NN', 'NNP', 'NN', 'IN', 'JJ', 'NNP', 'NN', '(', 'JJ', ')', 'VBP', 'JJ', '(', 'IN', 'VBN', 'NNP', 'NN', 'NN', 'NNP', 'RB', '(', 'NN', ')', 'NNP', 'NNP', 'VBZ', 'NNP', 'NN', 'NN', 'NN', 'NNP', 'NN', 'IN', 'JJ', 'NNP', 'NN', '(', 'NN', 'IN', 'JJ', 'NNP', 'NN', 'NN', 'IN', 'NN', 'NNP', 'NN', 'NNS', '(', 'JJ', 'NNP', 'NN', 'NN', 'NNP', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NNP', 'VBZ', 'NNP', 'NN', 'IN', 'JJ', 'NNP', 'NN', '(', 'NN', 'TO', 'VB', 'NN', 'NNP', 'NN', ')', ')', ')', 'JJ', 'JJ', '(', 'VBG', 'NN', 'NN', 'NNS', 'VBP', 'JJ', 'NN', 'NNP', 'NN', 'IN', 'JJ', 'NNP', 'NN', '(', 'NN', ')', 'FW', 'JJ', 'NNP', 'NN', 'NNP', 'VBZ', 'NNP', 'NN', 'NNP', 'NNP', 'VBZ', 'NNP', 'NN', 'NNP', 'NN', 'NNS', 'TO', 'VB', 'NNP', 'NN', 'VBP', 'NN', 'NN', '(', 'JJ', 'NNP', 'NN', 'NNP', 'NN', 'NNS', 'VBP', 'JJ', 'NN', 'NNP', 'VBD', 'JJ', 'NNS', 'VBD', 'RB', 'VB', 'VBN', 'IN', 'NN', 'NN', 'NNP', 'NN', 'NNP', 'NNP', 'NN', 'TO', 'VB', 'NNS', 'VBP', 'JJ', 'JJR', 'JJ', 'NN', 'NNP', 'NNP', 'VBZ', 'JJ', 'NNP', 'NN', 'NN', 'IN', 'NN', 'NNS', 'VBP', 'JJ', 'NN', 'VBD', 'CD', 'NNS', 'JJ', 'CD', 'NNS', 'VBP', 'CD', 'IN', 'NN', 'VBP', 'NN', 'NN', '(', 'JJ', 'NN', 'NN', 'NNP', 'NN', 'NN', 'NN', 'NNP', 'NN', 'IN', 'JJ', 'NNP', 'NN', '(', 'NN', 'IN', 'JJ', 'NNP', 'NN', ')', 'VB', 'JJ', 'NN', 'NNP', 'VBZ', 'JJ', 'NN', ')', ')', 'CC', 'RB', 'RB', 'VB', 'RB', 'RB', 'VBG', 'DT', 'JJ', 'NNP']"
106,root@home:~/work/src/linux2kafka# go run main.go,"['root@home:~/work/src/linux2kafka#', 'go', 'run', 'main', '.', 'go']","['DIRECTORY', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD']"
107,go,['go'],['KEYWORD']
108,root@home:~/work/src/linux2kafka# go run main.go,"['root@home:~/work/src/linux2kafka#', 'go', 'run', 'main', '.', 'go']","['DIRECTORY', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD']"
109,go,['go'],['KEYWORD']
110,root@home:~/work/src/linux2kafka# go run main.go,"['root@home:~/work/src/linux2kafka#', 'go', 'run', 'main', '.', 'go']","['DIRECTORY', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD']"
111,go,['go'],['KEYWORD']
112,"
",[],[]
113,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
114,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
115,"    ""flag""","['""flag""']",['STRING_LITERAL']
116,"    ""github.com/Shopify/sarama""","['""github.com/Shopify/sarama""']",['STRING_LITERAL']
117,"    ""log""","['""log""']",['STRING_LITERAL']
118,"    ""os""","['""os""']",['STRING_LITERAL']
119,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
120,"    ""strings""","['""strings""']",['STRING_LITERAL']
121,"    ""github.com/hpcloud/tail""","['""github.com/hpcloud/tail""']",['STRING_LITERAL']
122,"    ""github.com/spf13/viper""","['""github.com/spf13/viper""']",['STRING_LITERAL']
123,"    //""io/ioutil""","['//', '""io/ioutil""']","['COMMENT', 'NN']"
124,"    //""reflect""","['//', '""reflect""']","['COMMENT', 'NN']"
125,),[')'],['PUNCTUATION']
126,"//func produce(producer sarama.SyncProducer, cfg *sarama.Config, brokers *string, topic string, logger *log.Logger, log string, t *tail.Tail){","['//', 'func', 'produce(producer', 'sarama.SyncProducer,', 'cfg', '*sarama.Config,', 'brokers', '*string,', 'topic', 'string,', 'logger', '*log.Logger,', 'log', 'string,', 't', '*tail.Tail){']","['COMMENT', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NNS', 'VBP', 'NN', 'NN', 'NN', 'NNP', 'NN', 'NN', 'NN', 'NN']"
127,"func produce(cfg *sarama.Config, brokers *string, topic string, logger *log.Logger, log string, t *tail.Tail){","['func', 'produce', '(', 'cfg', '*', 'sarama', '.', 'Config', ',', 'brokers', '*', 'string', ',', 'topic', 'string', ',', 'logger', '*', 'log', '.', 'Logger', ',', 'log', 'string', ',', 't', '*', 'tail', '.', 'Tail', '){']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
128,"    logger.Println(""Entering produce"")","['logger.Println(""Entering produce"")']",['FUNCTION_CALL']
129,"    /*logger.Println(strings.Split(*brokers, "",""))","['/*', 'logger.Println(strings.Split(*brokers, "",""))']","['PUNCTUATION', 'FUNCTION_CALL']"
130,"    logger.Println(reflect.TypeOf(strings.Split(*brokers, "","")))","['logger.Println(reflect.TypeOf(strings.Split(*brokers, "","")))']",['FUNCTION_CALL']
131,    logger.Println(log)*/,"['logger.Println(log)', '*/']","['FUNCTION_CALL', 'PUNCTUATION']"
132,"    logger.Printf(""sarama.NewSyncProducer"")","['logger.Printf(""sarama.NewSyncProducer"")']",['FUNCTION_CALL']
133,"    producer, err := sarama.NewSyncProducer(strings.Split(*brokers, "",""), cfg)","['producer', ',', 'err', ':=', 'sarama.NewSyncProducer(strings.Split(*brokers, "",""), cfg)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
134,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
135,        logger.Fatalln(err),['logger.Fatalln(err)'],['FUNCTION_CALL']
136,    },['}'],['PUNCTUATION']
137,    defer func() {,"['defer', 'func', '()', '{']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
138,        if err := producer.Close(); err != nil {,"['if', 'err', ':=', 'producer.Close()', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
139,            logger.Fatalln(err),['logger.Fatalln(err)'],['FUNCTION_CALL']
140,        },['}'],['PUNCTUATION']
141,    }(),['}()'],['PUNCTUATION']
142,"    /*t, err := tail.TailFile(log, tail.Config{Follow: true, ReOpen: true})","['/*', 't', ',', 'err', ':=', 'tail.TailFile(log, tail.Config{Follow: true, ReOpen: true})']","['PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
143,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
144,"        fmt.Println(fmt.Errorf(""Error with tail: %v\n"", err.Error()))","['fmt.Println(fmt.Errorf(""Error with tail: %v\\n"", err.Error()))']",['FUNCTION_CALL']
145,    }*/,['}*/'],['PUNCTUATION']
146,    for line := range t.Lines {,"['for', 'line', ':=', 'range', 't', '.', 'Lines', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
147,        //logger.Println(line),"['//', 'logger.Println(line)']","['COMMENT', 'NN']"
148,        //logger.Println(line.Text),"['//', 'logger.Println(line.Text)']","['COMMENT', 'NN']"
149,"        logger.Printf(""ProduceMessage"")","['logger.Printf(""ProduceMessage"")']",['FUNCTION_CALL']
150,"        msg := &sarama.ProducerMessage{Topic: topic, Value: sarama.StringEncoder(line.Text)}","['msg', ':=', '&', 'sarama', '.', 'ProducerMessage', '{', 'Topic', ':', 'topic', ',', 'Value', ':', 'sarama.StringEncoder(line.Text)', '}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
151,"        _, _, err := producer.SendMessage(msg)","['_', ',', '_', ',', 'err', ':=', 'producer.SendMessage(msg)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
152,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
153,"            logger.Printf(""FAILED to send message: %s\n"", err)","['logger.Printf(""FAILED to send message: %s\\n"", err)']",['FUNCTION_CALL']
154,        },['}'],['PUNCTUATION']
155,    },['}'],['PUNCTUATION']
156,},['}'],['PUNCTUATION']
157,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
158,    //Getting config file params,"['//', 'Getting', 'config', 'file', 'params']","['COMMENT', 'VBG', 'NN', 'NN', 'NNS']"
159,"    viper.SetConfigName(""config"") ","['viper.SetConfigName(""config"")']",['FUNCTION_CALL']
160,"    viper.AddConfigPath(""/root/work/src/linux2kafka/"")","['viper.AddConfigPath(""/root/work/src/linux2kafka/"")']",['FUNCTION_CALL']
161,    err := viper.ReadInConfig(),"['err', ':=', 'viper.ReadInConfig()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
162,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
163,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
164,    },['}'],['PUNCTUATION']
165,    viper.WatchConfig(),['viper.WatchConfig()'],['FUNCTION_CALL']
166,"    logList := viper.Get(""log_list"")","['logList', ':=', 'viper.Get(""log_list"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
167,"    //logListString, err := ioutil.ReadFile(logList.(string))","['//', 'logListString,', 'err', ':=', 'ioutil.ReadFile(logList.(string))']","['COMMENT', 'NN', 'NN', 'NNP', 'NN']"
168,    //fmt.Println(logList),"['//', 'fmt.Println(logList)']","['COMMENT', 'NN']"
169,    //fmt.Println(reflect.TypeOf(logList)),"['//', 'fmt.Println(reflect.TypeOf(logList))']","['COMMENT', 'NN']"
170,"    logsConfig := strings.Split(logList.(string),"","")","['logsConfig', ':=', 'strings.Split(logList.(string),"","")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
171,    // print logs to watch,"['//', 'print', 'logs', 'to', 'watch']","['COMMENT', 'NN', 'NNS', 'TO', 'VB']"
172,    /*for i := range logsConfig {,"['/*', 'for', 'i', ':=', 'range', 'logsConfig', '{']","['PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
173,        fmt.Println(logsConfig[i]),['fmt.Println(logsConfig[i])'],['FUNCTION_CALL']
174,    }*/,['}*/'],['PUNCTUATION']
175,"    brokerList := viper.Get(""brokerList"")","['brokerList', ':=', 'viper.Get(""brokerList"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
176,"    brokers := flag.String(""brokers"", brokerList.(string), ""Comma separated kafka brokers list"") //must be set in config.toml","['brokers', ':=', 'flag.String(""brokers"", brokerList.(string), ""Comma separated kafka brokers list"")', '//', 'must', 'be', 'set', 'in', 'config.toml']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'COMMENT', 'MD', 'VB', 'VBN', 'IN', 'NN']"
177,"    topic := flag.String(""topic"", ""test0"", ""Kafka topic to send messages to"")","['topic', ':=', 'flag.String(""topic"", ""test0"", ""Kafka topic to send messages to"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
178,    flag.Parse(),['flag.Parse()'],['FUNCTION_CALL']
179,"    logger := log.New(os.Stdout, ""producer "", log.Lmicroseconds)","['logger', ':=', 'log.New(os.Stdout, ""producer "", log.Lmicroseconds)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
180,    cfg := sarama.NewConfig(),"['cfg', ':=', 'sarama.NewConfig()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
181,    //Wait for replication,"['//', 'Wait', 'for', 'replication']","['COMMENT', 'NNP', 'IN', 'NN']"
182,    cfg.Producer.RequiredAcks = -1,"['cfg', '.', 'Producer', '.', 'RequiredAcks', '=', '-', '1']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL']"
183,    cfg.Producer.Flush.Frequency = 333,"['cfg', '.', 'Producer', '.', 'Flush', '.', 'Frequency', '=', '333']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
184,    cfg.Producer.Flush.Messages = 1000,"['cfg', '.', 'Producer', '.', 'Flush', '.', 'Messages', '=', '1000']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
185,    cfg.Producer.Flush.MaxMessages = 3000,"['cfg', '.', 'Producer', '.', 'Flush', '.', 'MaxMessages', '=', '3000']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
186,    for i := range logsConfig {,"['for', 'i', ':=', 'range', 'logsConfig', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
187,"        fmt.Println(""go"")","['fmt.Println(""go"")']",['FUNCTION_CALL']
188,"        t, err := tail.TailFile(logsConfig[i], tail.Config{Follow: true, ReOpen: true})","['t', ',', 'err', ':=', 'tail.TailFile(logsConfig[i], tail.Config{Follow: true, ReOpen: true})']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
189,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
190,"            fmt.Println(fmt.Errorf(""Error with tail: %v\n"", err.Error()))","['fmt.Println(fmt.Errorf(""Error with tail: %v\\n"", err.Error()))']",['FUNCTION_CALL']
191,        },['}'],['PUNCTUATION']
192,"        go produce(cfg, brokers, *topic, logger, logsConfig[i], t)","['go', 'produce', '(', 'cfg', ',', 'brokers', ',', '*', 'topic', ',', 'logger', ',', 'logsConfig', '[', 'i', '],', 't', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
193,        },['}'],['PUNCTUATION']
194,},['}'],['PUNCTUATION']
