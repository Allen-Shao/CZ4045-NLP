,text,token,annotation
0,"I have a loop that is apparently causing a data race its near the bottom of this function and I will have it marked:

","['I', 'have', 'a', 'loop', 'that', 'is', 'apparently', 'causing', 'a', 'data', 'race', 'its', 'near', 'the', 'bottom', 'of', 'this', 'function', 'and', 'I', 'will', 'have', 'it', 'marked:']","['PRP', 'VBP', 'DT', 'NN', 'WDT', 'VBZ', 'RB', 'VBG', 'DT', 'NN', 'NN', 'PRP$', 'IN', 'DT', 'NN', 'IN', 'DT', 'NN', 'CC', 'PRP', 'MD', 'VB', 'PRP', 'VB']"
1,func (p *PartialParty) SendReadyCheck(party PartialParty) {,"['func', '(', 'p', '*', 'PartialParty', ')', 'SendReadyCheck', '(', 'party', 'PartialParty', ')', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
2,"    msg, err := json.Marshal(&ReadyCheckMsg{""ReadyCheck"", """"})","['msg', ',', 'err', ':=', 'json.Marshal(&ReadyCheckMsg{""ReadyCheck"", """"})']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
3,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
4,        log.Println(err),['log.Println(err)'],['FUNCTION_CALL']
5,    },['}'],['PUNCTUATION']
6,"    for _, member := range party.Members {","['for', '_', ',', 'member', ':=', 'range', 'party', '.', 'Members', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
7,        member.Conn.send <- msg,"['member', '.', 'Conn', '.', 'send', '<-', 'msg']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
8,    },['}'],['PUNCTUATION']
9,    counter := 0,"['counter', ':=', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL']"
10,    loopBreaker := true,"['loopBreaker', ':=', 'true']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
11,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
12,        select {,"['select', '{']","['KEYWORD', 'PUNCTUATION']"
13,        case <-p.Accept:,"['case', '<-', 'p', '.', 'Accept', ':']","['KEYWORD', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
14,            counter++,"['counter', '++']","['IDENTIFIER', 'ARITHMETIC_OPERATOR']"
15,"            resp, err := json.Marshal(&ReadyCheckMsg{""ReadyAccepted"", """"})","['resp', ',', 'err', ':=', 'json.Marshal(&ReadyCheckMsg{""ReadyAccepted"", """"})']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
16,            if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
17,                log.Println(err),['log.Println(err)'],['FUNCTION_CALL']
18,            },['}'],['PUNCTUATION']
19,"            for _, member := range party.Members {","['for', '_', ',', 'member', ':=', 'range', 'party', '.', 'Members', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
20,                member.Conn.send <- resp,"['member', '.', 'Conn', '.', 'send', '<-', 'resp']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
21,            },['}'],['PUNCTUATION']
22,            if counter == 2 {,"['if', 'counter', '==', '2', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
23,                // Create a new party with all members,"['//', 'Create', 'a', 'new', 'party', 'with', 'all', 'members']","['COMMENT', 'VB', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NNS']"
24,                partyid := PartyID(feeds.NewUUID().String()),"['partyid', ':=', 'PartyID', '(', 'feeds.NewUUID().String())']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
25,                db := common.Db(),"['db', ':=', 'common.Db()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
26,                newParty := &Party{,"['newParty', ':=', '&', 'Party', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
27,"                    Active:    true,","['Active', ':', 'true', ',']","['IDENTIFIER', 'PUNCTUATION', 'BOOLEAN_LITERAL', 'PUNCTUATION']"
28,"                    Members:   p.Members,","['Members', ':', 'p', '.', 'Members', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
29,"                    Broadcast: make(chan []byte),","['Broadcast', ':', 'make', '(', 'chan', '[]', 'byte', '),']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
30,"                    PartyID:   partyid,","['PartyID', ':', 'partyid', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
31,                },['}'],['PUNCTUATION']
32,                // Insert the new party into the database,"['//', 'Insert', 'the', 'new', 'party', 'into', 'the', 'database']","['COMMENT', 'NNP', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NN']"
33,"                _, err := db.Exec(""INSERT INTO party SET party_id = ?, active = ?"", partyid.String(), true)","['_', ',', 'err', ':=', 'db.Exec(""INSERT INTO party SET party_id = ?, active = ?"", partyid.String(), true)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
34,                if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
35,                    log.Println(err),['log.Println(err)'],['FUNCTION_CALL']
36,                },['}'],['PUNCTUATION']
37,                // Go through the members and update the database,"['//', 'Go', 'through', 'the', 'members', 'and', 'update', 'the', 'database']","['COMMENT', 'NNP', 'IN', 'DT', 'NNS', 'CC', 'VB', 'DT', 'NN']"
38,                var wg sync.WaitGroup,"['var', 'wg', 'sync', '.', 'WaitGroup']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
39,"                for _, member := range party.Members {","['for', '_', ',', 'member', ':=', 'range', 'party', '.', 'Members', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
40,                    wg.Add(1),['wg.Add(1)'],['FUNCTION_CALL']
41,                    m := member,"['m', ':=', 'member']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
42,                    go func() {,"['go', 'func', '()', '{']","['KEYWORD', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
43,"                        _, err := db.Exec(""UPDATE party_members SET active = ? WHERE steamid = ?"", false, m.SteamID)","['_', ',', 'err', ':=', 'db.Exec(""UPDATE party_members SET active = ? WHERE steamid = ?"", false, m.SteamID)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
44,                        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
45,                            log.Println(err),['log.Println(err)'],['FUNCTION_CALL']
46,                        },['}'],['PUNCTUATION']
47,"                        _, err = db.Exec(""INSERT INTO party_members SET belongs_to =?, active = ?, steamid = ?"", partyid.String(), true, m.SteamID)","['_', ',', 'err', '=', 'db.Exec(""INSERT INTO party_members SET belongs_to =?, active = ?, steamid = ?"", partyid.String(), true, m.SteamID)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
48,                        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
49,                            log.Println(err),['log.Println(err)'],['FUNCTION_CALL']
50,                        },['}'],['PUNCTUATION']
51,                        wg.Done(),['wg.Done()'],['FUNCTION_CALL']
52,                    }(),['}()'],['PUNCTUATION']
53,                },['}'],['PUNCTUATION']
54,                // Wait for all the database stuff to finish,"['//', 'Wait', 'for', 'all', 'the', 'database', 'stuff', 'to', 'finish']","['COMMENT', 'NNP', 'IN', 'PDT', 'DT', 'NN', 'NN', 'TO', 'VB']"
55,                wg.Wait(),['wg.Wait()'],['FUNCTION_CALL']
56,                PHub.AddNewParty(newParty),['PHub.AddNewParty(newParty)'],['FUNCTION_CALL']
57,                loopBreaker = false,"['loopBreaker', '=', 'false']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
58,                break,['break'],['KEYWORD']
59,            },['}'],['PUNCTUATION']
60,        case conn := <-p.Decline:,"['case', 'conn', ':=', '<-', 'p', '.', 'Decline', ':']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
61,            if conn.Ready {,"['if', 'conn', '.', 'Ready', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
62,                break,['break'],['KEYWORD']
63,            },['}'],['PUNCTUATION']
64,            conn.Ready = false,"['conn', '.', 'Ready', '=', 'false']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
65,            conn.InQueue = false,"['conn', '.', 'InQueue', '=', 'false']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
66,"            conn.CurrentParty = """"","['conn', '.', 'CurrentParty', '=', '""""']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL']"
67,"            resp, err := json.Marshal(&ReadyCheckMsg{""ReadyCheckDeclined"", """"})","['resp', ',', 'err', ':=', 'json.Marshal(&ReadyCheckMsg{""ReadyCheckDeclined"", """"})']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
68,            if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
69,                log.Println(err),['log.Println(err)'],['FUNCTION_CALL']
70,            },['}'],['PUNCTUATION']
71,            p.Accepting = true,"['p', '.', 'Accepting', '=', 'true']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
72,            identifier := conn.Identifier,"['identifier', ':=', 'conn', '.', 'Identifier']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
73,"            if _, ok := party.Members[identifier]; ok {","['if', '_', ',', 'ok', ':=', 'party', '.', 'Members', '[', 'identifier', '];', 'ok', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
74,"                delete(p.Members, identifier)","['delete', '(', 'p', '.', 'Members', ',', 'identifier', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
75,            },['}'],['PUNCTUATION']
76,"            for _, m := range party.Members {","['for', '_', ',', 'm', ':=', 'range', 'party', '.', 'Members', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
77,                member := m,"['member', ':=', 'm']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
78,                member.Conn.send <- resp,"['member', '.', 'Conn', '.', 'send', '<-', 'resp']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
79,            },['}'],['PUNCTUATION']
80,"            log.Println(""Here"")","['log.Println(""Here"")']",['FUNCTION_CALL']
81,            loopBreaker = false,"['loopBreaker', '=', 'false']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
82,            break,['break'],['KEYWORD']
83,        case <-time.After(30 * time.Second):,"['case', '<-', 'time.After(30 * time.Second)', ':']","['KEYWORD', 'CHANNEL_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION']"
84,            if counter == 2 {,"['if', 'counter', '==', '2', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
85,                return,['return'],['KEYWORD']
86,            },['}'],['PUNCTUATION']
87,            p.Accepting = true,"['p', '.', 'Accepting', '=', 'true']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
88,"            failedMsg, err := json.Marshal(&ReadyCheckMsg{""FailedToReady"", """"})","['failedMsg', ',', 'err', ':=', 'json.Marshal(&ReadyCheckMsg{""FailedToReady"", """"})']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
89,            if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
90,                log.Println(err),['log.Println(err)'],['FUNCTION_CALL']
91,            },['}'],['PUNCTUATION']
92,"            somebodyDeclinedMsg, err := json.Marshal(&ReadyCheckMsg{""ReadyCheckDeclined"", """"})","['somebodyDeclinedMsg', ',', 'err', ':=', 'json.Marshal(&ReadyCheckMsg{""ReadyCheckDeclined"", """"})']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
93,            if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
94,                log.Println(err),['log.Println(err)'],['FUNCTION_CALL']
95,            },['}'],['PUNCTUATION']
96,"    >>>>     for _, member := range party.Members { ***<<<< This Line***","['>>>>', 'for', '_', ',', 'member', ':=', 'range', 'party', '.', 'Members', '{', '***<<<<', 'This', 'Line', '***']","['PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
97,                m := member,"['m', ':=', 'member']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
98,                if !m.Conn.Ready {,"['if', '!', 'm', '.', 'Conn', '.', 'Ready', '{']","['KEYWORD', 'LOGICAL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
99,                    m.Conn.Ready = false,"['m', '.', 'Conn', '.', 'Ready', '=', 'false']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
100,                    m.Conn.InQueue = false,"['m', '.', 'Conn', '.', 'InQueue', '=', 'false']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
101,"                    m.Conn.CurrentParty = """"","['m', '.', 'Conn', '.', 'CurrentParty', '=', '""""']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL']"
102,                    m.Conn.send <- failedMsg,"['m', '.', 'Conn', '.', 'send', '<-', 'failedMsg']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
103,                } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
104,                    m.Conn.Ready = false,"['m', '.', 'Conn', '.', 'Ready', '=', 'false']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
105,                    m.Conn.send <- somebodyDeclinedMsg,"['m', '.', 'Conn', '.', 'send', '<-', 'somebodyDeclinedMsg']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
106,                },['}'],['PUNCTUATION']
107,            },['}'],['PUNCTUATION']
108,            loopBreaker = false,"['loopBreaker', '=', 'false']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
109,            break,['break'],['KEYWORD']
110,        },['}'],['PUNCTUATION']
111,        if !loopBreaker {,"['if', '!', 'loopBreaker', '{']","['KEYWORD', 'LOGICAL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
112,            break,['break'],['KEYWORD']
113,        },['}'],['PUNCTUATION']
114,    },['}'],['PUNCTUATION']
115,},['}'],['PUNCTUATION']
116,"

It is apparently conflicting with this:

","['It', 'is', 'apparently', 'conflicting', 'with', 'this:']","['PRP', 'VBZ', 'RB', 'VBG', 'IN', 'NN']"
117,// AddNewMember will add a new user to the party,"['//', 'AddNewMember', 'will', 'add', 'a', 'new', 'user', 'to', 'the', 'party']","['COMMENT', 'NNP', 'MD', 'VB', 'DT', 'JJ', 'NN', 'TO', 'DT', 'NN']"
118,"func (p *PartyHub) AddNewMember(member *Member, partyid PartyID) {","['func', '(', 'p', '*', 'PartyHub', ')', 'AddNewMember', '(', 'member', '*', 'Member', ',', 'partyid', 'PartyID', ')', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
119,    p.Lock(),['p.Lock()'],['FUNCTION_CALL']
120,    defer p.Unlock(),"['defer', 'p.Unlock()']","['IDENTIFIER', 'FUNCTION_CALL']"
121,>>> p.PartialPartys[partyid].Members[member.Conn.Identifier] = member,"['>>>', 'p', '.', 'PartialPartys', '[', 'partyid', '].', 'Members', '[', 'member', '.', 'Conn', '.', 'Identifier', ']', '=', 'member']","['PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
122,},['}'],['PUNCTUATION']
123,type PartialParty struct {,"['type', 'PartialParty', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
124,    Accepting bool,"['Accepting', 'bool']","['IDENTIFIER', 'IDENTIFIER']"
125,    Members   map[Identifier]*Member,"['Members', 'map', '[', 'Identifier', ']*', 'Member']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
126,    Accept    chan *Connection,"['Accept', 'chan', '*', 'Connection']","['IDENTIFIER', 'KEYWORD', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
127,    Decline   chan *Connection,"['Decline', 'chan', '*', 'Connection']","['IDENTIFIER', 'KEYWORD', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
128,    PartyID   PartyID,"['PartyID', 'PartyID']","['IDENTIFIER', 'IDENTIFIER']"
129,    sync.Mutex,"['sync', '.', 'Mutex']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
130,},['}'],['PUNCTUATION']
131,"

Right now it is impossible to AddNewMember if the goroutine SendReadyCheck  is running ``because it is protected by an if statement that checks if the goroutine is running, so I'm not sure why they are saying they are racing each other. Any help on clearing this up would be great. I've tried setting a variable inside the loop to try to get away from it but it doesn't seem to cause it
","['Right', 'now', 'it', 'is', 'impossible', 'to', 'AddNewMember', 'if', 'the', 'goroutine', 'SendReadyCheck', 'is', 'running', '``because', 'it', 'is', 'protected', 'by', 'an', 'if', 'statement', 'that', 'checks', 'if', 'the', 'goroutine', 'is', 'running,', 'so', ""I'm"", 'not', 'sure', 'why', 'they', 'are', 'saying', 'they', 'are', 'racing', 'each', 'other.', 'Any', 'help', 'on', 'clearing', 'this', 'up', 'would', 'be', 'great.', ""I've"", 'tried', 'setting', 'a', 'variable', 'inside', 'the', 'loop', 'to', 'try', 'to', 'get', 'away', 'from', 'it', 'but', 'it', ""doesn't"", 'seem', 'to', 'cause', 'it']","['RB', 'RB', 'PRP', 'VBZ', 'JJ', 'TO', 'NNP', 'IN', 'DT', 'NN', 'NNP', 'VBZ', 'VBG', 'IN', 'PRP', 'VBZ', 'VBN', 'IN', 'DT', 'IN', 'NN', 'IN', 'VBZ', 'IN', 'DT', 'NN', 'VBZ', 'VBN', 'RB', 'NNP', 'RB', 'JJ', 'WRB', 'PRP', 'VBP', 'VBG', 'PRP', 'VBP', 'VBG', 'DT', 'NN', 'NNP', 'NN', 'IN', 'VBG', 'DT', 'RP', 'MD', 'VB', 'JJ', 'NNP', 'VBD', 'VBG', 'DT', 'JJ', 'IN', 'DT', 'NN', 'TO', 'VB', 'TO', 'VB', 'RB', 'IN', 'PRP', 'CC', 'PRP', 'VBZ', 'VB', 'TO', 'VB', 'PRP']"
