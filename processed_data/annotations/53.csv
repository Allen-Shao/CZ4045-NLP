,text,token,annotation
0,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
1,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
2,"    ""bytes""","['""bytes""']",['STRING_LITERAL']
3,"    ""code.google.com/p/go.text/transform""","['""code.google.com/p/go.text/transform""']",['STRING_LITERAL']
4,"    ""code.google.com/p/go.text/unicode/norm""","['""code.google.com/p/go.text/unicode/norm""']",['STRING_LITERAL']
5,"    ""compress/zlib""","['""compress/zlib""']",['STRING_LITERAL']
6,"    ""encoding/gob""","['""encoding/gob""']",['STRING_LITERAL']
7,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
8,"    ""github.com/AlasdairF/BinSearch""","['""github.com/AlasdairF/BinSearch""']",['STRING_LITERAL']
9,"    ""io/ioutil""","['""io/ioutil""']",['STRING_LITERAL']
10,"    ""os""","['""os""']",['STRING_LITERAL']
11,"    ""regexp""","['""regexp""']",['STRING_LITERAL']
12,"    ""runtime""","['""runtime""']",['STRING_LITERAL']
13,"    ""strings""","['""strings""']",['STRING_LITERAL']
14,"    ""unicode""","['""unicode""']",['STRING_LITERAL']
15,"    ""unicode/utf8""","['""unicode/utf8""']",['STRING_LITERAL']
16,),[')'],['OPERATOR']
17,type TokensStruct struct {,"['type', 'TokensStruct', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
18,    binsearch.Key_string,"['binsearch', '.', 'Key_string']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
19,    Value [][5]uint32,"['Value', '[][', '5', ']', 'uint32']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER']"
20,},['}'],['OPERATOR']
21,type Trainer struct {,"['type', 'Trainer', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
22,    Tokens      TokensStruct,"['Tokens', 'TokensStruct']","['IDENTIFIER', 'IDENTIFIER']"
23,    TokensCount uint,"['TokensCount', 'uint']","['IDENTIFIER', 'IDENTIFIER']"
24,},['}'],['OPERATOR']
25,func checkErr(err error) {,"['func', 'checkErr', '(', 'err', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
26,    if err == nil {,"['if', 'err', '==', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
27,        return,['return'],['KEYWORD']
28,    },['}'],['OPERATOR']
29,"    fmt.Println(`Some Error:`, err)","['fmt', '.', 'Println', '(', 'Some', 'Error', ':', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
30,    panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
31,},['}'],['OPERATOR']
32,// Local helper function for normalization of UTF8 strings.,['// Local helper function for normalization of UTF8 strings.'],"['COMMENT', 'JJ', 'NN', 'NN', 'IN', 'NN', 'IN', 'NNP', 'NNS', '.']"
33,func isMn(r rune) bool {,"['func', 'isMn', '(', 'r', 'rune', ')', 'bool', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
34,"    return unicode.Is(unicode.Mn, r) // Mn: nonspacing marks","['return', 'unicode', '.', 'Is', '(', 'unicode', '.', 'Mn', ',', 'r', ')', '// Mn: nonspacing marks']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'COMMENT', 'NN', ':', 'NN', 'NNS']"
35,},['}'],['OPERATOR']
36,// This map is used by RemoveAccents function to convert non-accented characters.,['// This map is used by RemoveAccents function to convert non-accented characters.'],"['COMMENT', 'DT', 'NN', 'VBZ', 'VBN', 'IN', 'NNP', 'NN', 'TO', 'VB', 'JJ', 'NNS', '.']"
37,"var transliterations = map[rune]string{'Æ': ""E"", 'Ð': ""D"", 'Ł': ""L"", 'Ø': ""OE"", 'Þ': ""Th"", 'ß': ""ss"", 'æ': ""e"", 'ð': ""d"", 'ł': ""l"", 'ø': ""oe"", 'þ': ""th"", 'Œ': ""OE"", 'œ': ""oe""}","['var', 'transliterations', '=', 'map', '[', 'rune', ']', 'string', '{', ':', '""E"", \'\xc3\x90\': ""D"", \'\xc5\x81\': ""L"", \'\xc3\x98\': ""OE"", \'\xc3\x9e\': ""Th"", \'\xc3\x9f\': ""ss"", \'\xc3\xa6\': ""e"", \'\xc3\xb0\': ""d"", \'\xc5\x82\': ""l"", \'\xc3\xb8\': ""oe"", \'\xc3\xbe\': ""th"", \'\xc5\x92\': ""OE"", \'\xc5\x93\': ""oe""', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
38,"//  removeAccentsBytes converts accented UTF8 characters into their non-accented equivalents, from a []byte.","['//  removeAccentsBytes converts accented UTF8 characters into their non-accented equivalents, from a []byte.']","['COMMENT', 'NNS', 'NNS', 'VBD', 'NNP', 'NNS', 'IN', 'PRP$', 'JJ', 'NNS', ',', 'IN', 'DT', 'JJ', 'NN', 'NN', '.']"
39,"func removeAccentsBytesDashes(b []byte) ([]byte, error) {","['func', 'removeAccentsBytesDashes', '(', 'b', '[]', 'byte', ')', '([]', 'byte', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
40,"    mnBuf := make([]byte, len(b))","['mnBuf', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'b', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
41,"    t := transform.Chain(norm.NFD, transform.RemoveFunc(isMn), norm.NFC)","['t', ':=', 'transform', '.', 'Chain', '(', 'norm', '.', 'NFD', ',', 'transform', '.', 'RemoveFunc', '(', 'isMn', '),', 'norm', '.', 'NFC', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
42,"    n, _, err := t.Transform(mnBuf, b, true)","['n', ',', '_', ',', 'err', ':=', 't', '.', 'Transform', '(', 'mnBuf', ',', 'b', ',', 'true', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
43,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
44,"        return nil, err","['return', 'nil', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
45,    },['}'],['OPERATOR']
46,    mnBuf = mnBuf[:n],"['mnBuf', '=', 'mnBuf', '[:', 'n', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
47,"    tlBuf := bytes.NewBuffer(make([]byte, 0, len(mnBuf)*2))","['tlBuf', ':=', 'bytes', '.', 'NewBuffer', '(', 'make', '([]', 'byte', ',', '0', ',', 'len', '(', 'mnBuf', ')*', '2', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
48,"    for i, w := 0, 0; i < len(mnBuf); i += w {","['for', 'i', ',', 'w', ':=', '0', ',', '0', ';', 'i', '<', 'len', '(', 'mnBuf', ');', 'i', '+=', 'w', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
49,"        r, width := utf8.DecodeRune(mnBuf[i:])","['r', ',', 'width', ':=', 'utf8', '.', 'DecodeRune', '(', 'mnBuf', '[', 'i', ':])']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
50,        if r == '-' {,"['if', 'r', '==', '-', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'OPERATOR']"
51,            tlBuf.WriteByte(' '),"['tlBuf', '.', 'WriteByte', '(', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
52,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
53,"            if d, ok := transliterations[r]; ok {","['if', 'd', ',', 'ok', ':=', 'transliterations', '[', 'r', '];', 'ok', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
54,                tlBuf.WriteString(d),"['tlBuf', '.', 'WriteString', '(', 'd', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
55,            } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
56,                tlBuf.WriteRune(r),"['tlBuf', '.', 'WriteRune', '(', 'r', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
57,            },['}'],['OPERATOR']
58,        },['}'],['OPERATOR']
59,        w = width,"['w', '=', 'width']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
60,    },['}'],['OPERATOR']
61,"    return tlBuf.Bytes(), nil","['return', 'tlBuf', '.', 'Bytes', '(),', 'nil']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
62,},['}'],['OPERATOR']
63,"func LoadZip(filename string) ([]byte, error) {","['func', 'LoadZip', '(', 'filename', 'string', ')', '([]', 'byte', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
64,    // Open file for reading,['// Open file for reading'],"['COMMENT', 'NNP', 'NN', 'IN', 'NN']"
65,"    fi, err := os.Open(filename)","['fi', ',', 'err', ':=', 'os', '.', 'Open', '(', 'filename', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
66,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
67,"        return nil, err","['return', 'nil', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
68,    },['}'],['OPERATOR']
69,    defer fi.Close(),"['defer', 'fi', '.', 'Close', '()']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
70,    // Attach ZIP reader,['// Attach ZIP reader'],"['COMMENT', 'NNP', 'NNP', 'NN']"
71,"    fz, err := zlib.NewReader(fi)","['fz', ',', 'err', ':=', 'zlib', '.', 'NewReader', '(', 'fi', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
72,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
73,"        return nil, err","['return', 'nil', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
74,    },['}'],['OPERATOR']
75,    defer fz.Close(),"['defer', 'fz', '.', 'Close', '()']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
76,    // Pull,['// Pull'],"['COMMENT', 'NN']"
77,"    data, err := ioutil.ReadAll(fz)","['data', ',', 'err', ':=', 'ioutil', '.', 'ReadAll', '(', 'fz', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
78,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
79,"        return nil, err","['return', 'nil', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
80,    },['}'],['OPERATOR']
81,"    return norm.NFC.Bytes(data), nil // return normalized","['return', 'norm', '.', 'NFC', '.', 'Bytes', '(', 'data', '),', 'nil', '// return normalized']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'COMMENT', 'NN', 'VBD']"
82,},['}'],['OPERATOR']
83,func getTokens(pibn string) []string {,"['func', 'getTokens', '(', 'pibn', 'string', ')', '[]', 'string', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
84,    var data []byte,"['var', 'data', '[]', 'byte']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
85,    var err error,"['var', 'err', 'error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
86,"    data, err = LoadZip(`/storedir/` + pibn + `/text.zip`)","['data', ',', 'err', '=', 'LoadZip', '(', 'storedir', '+', 'pibn', '+', 'text', '.', 'zip', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
87,    checkErr(err),"['checkErr', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
88,"    data, err = removeAccentsBytesDashes(data)","['data', ',', 'err', '=', 'removeAccentsBytesDashes', '(', 'data', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
89,    checkErr(err),"['checkErr', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
90,    data = bytes.ToLower(data),"['data', '=', 'bytes', '.', 'ToLower', '(', 'data', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
91,"    data = reg2.ReplaceAll(data, []byte(""$2"")) // remove contractions","['data', '=', 'reg2', '.', 'ReplaceAll', '(', 'data', ',', '[]', 'byte', '(', '""$2""', '))', '// remove contractions']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'COMMENT', 'VB', 'NNS']"
92,"    data = reg.ReplaceAllLiteral(data, nil)","['data', '=', 'reg', '.', 'ReplaceAllLiteral', '(', 'data', ',', 'nil', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
93,    tokens := strings.Fields(string(data)),"['tokens', ':=', 'strings', '.', 'Fields', '(', 'string', '(', 'data', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
94,    return tokens,"['return', 'tokens']","['KEYWORD', 'IDENTIFIER']"
95,},['}'],['OPERATOR']
96,func (t *Trainer) Start() {,"['func', '(', 't', '*', 'Trainer', ')', 'Start', '()', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
97,"    data, err := ioutil.ReadFile(`list.txt`)","['data', ',', 'err', ':=', 'ioutil', '.', 'ReadFile', '(', 'list', '.', 'txt', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
98,    checkErr(err),"['checkErr', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
99,    pibns := bytes.Fields(data),"['pibns', ':=', 'bytes', '.', 'Fields', '(', 'data', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
100,"    for i, pibn := range pibns {","['for', 'i', ',', 'pibn', ':=', 'range', 'pibns', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
101,        tokens := getTokens(string(pibn)),"['tokens', ':=', 'getTokens', '(', 'string', '(', 'pibn', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
102,        t.addTokens(tokens),"['t', '.', 'addTokens', '(', 'tokens', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
103,        if i%100 == 0 {,"['if', 'i', '100', '==', '0', '{']","['KEYWORD', 'IDENTIFIER', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
104,"            runtime.GC() // I added this just to try to stop the memory craziness, but it makes no difference","['runtime', '.', 'GC', '()', '// I added this just to try to stop the memory craziness, but it makes no difference']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'COMMENT', 'PRP', 'VBD', 'DT', 'RB', 'TO', 'VB', 'TO', 'VB', 'DT', 'NN', 'NN', ',', 'CC', 'PRP', 'VBZ', 'DT', 'NN']"
105,        },['}'],['OPERATOR']
106,    },['}'],['OPERATOR']
107,},['}'],['OPERATOR']
108,func (t *Trainer) addTokens(tokens []string) {,"['func', '(', 't', '*', 'Trainer', ')', 'addTokens', '(', 'tokens', '[]', 'string', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
109,"    for _, tok := range tokens {","['for', '_', ',', 'tok', ':=', 'range', 'tokens', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
110,"        if _, ok := dictionary[tok]; ok {","['if', '_', ',', 'ok', ':=', 'dictionary', '[', 'tok', '];', 'ok', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
111,"            if indx, ok2 := t.Tokens.Find(tok); ok2 {","['if', 'indx', ',', 'ok2', ':=', 't', '.', 'Tokens', '.', 'Find', '(', 'tok', ');', 'ok2', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
112,                ar := t.Tokens.Value[indx],"['ar', ':=', 't', '.', 'Tokens', '.', 'Value', '[', 'indx', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
113,                ar[0]++,"['ar', '[', '0', ']++']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
114,                t.Tokens.Value[indx] = ar,"['t', '.', 'Tokens', '.', 'Value', '[', 'indx', ']', '=', 'ar']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
115,                t.TokensCount++,"['t', '.', 'TokensCount', '++']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
116,            } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
117,"                t.Tokens.AddKeyAt(tok, indx)","['t', '.', 'Tokens', '.', 'AddKeyAt', '(', 'tok', ',', 'indx', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
118,"                t.Tokens.Value = append(t.Tokens.Value, [5]uint32{0, 0, 0, 0, 0})","['t', '.', 'Tokens', '.', 'Value', '=', 'append', '(', 't', '.', 'Tokens', '.', 'Value', ',', '[', '5', ']', 'uint32', '{', '0', ',', '0', ',', '0', ',', '0', ',', '0', '})']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
119,"                copy(t.Tokens.Value[indx+1:], t.Tokens.Value[indx:])","['copy', '(', 't', '.', 'Tokens', '.', 'Value', '[', 'indx', '+', '1', ':],', 't', '.', 'Tokens', '.', 'Value', '[', 'indx', ':])']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
120,"                t.Tokens.Value[indx] = [5]uint32{1, 0, 0, 0, 0}","['t', '.', 'Tokens', '.', 'Value', '[', 'indx', ']', '=', '[', '5', ']', 'uint32', '{', '1', ',', '0', ',', '0', ',', '0', ',', '0', '}']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
121,                t.TokensCount++,"['t', '.', 'TokensCount', '++']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
122,            },['}'],['OPERATOR']
123,        },['}'],['OPERATOR']
124,    },['}'],['OPERATOR']
125,    return,['return'],['KEYWORD']
126,},['}'],['OPERATOR']
127,func LoadDictionary() {,"['func', 'LoadDictionary', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
128,    dictionary = make(map[string]bool),"['dictionary', '=', 'make', '(', 'map', '[', 'string', ']', 'bool', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
129,"    data, err := ioutil.ReadFile(`dictionary`)","['data', ',', 'err', ':=', 'ioutil', '.', 'ReadFile', '(', 'dictionary', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
130,    checkErr(err),"['checkErr', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
131,    words := bytes.Fields(data),"['words', ':=', 'bytes', '.', 'Fields', '(', 'data', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
132,"    for _, word := range words {","['for', '_', ',', 'word', ':=', 'range', 'words', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
133,        strword := string(word),"['strword', ':=', 'string', '(', 'word', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
134,        dictionary[strword] = false,"['dictionary', '[', 'strword', ']', '=', 'false']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
135,    },['}'],['OPERATOR']
136,},['}'],['OPERATOR']
137,var reg = regexp.MustCompile(`[^a-z0-9\s]`),"['var', 'reg', '=', 'regexp', '.', 'MustCompile', '(', '[^', 'a', '-', 'z0', '-', '9', 's', ']', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
138,var reg2 = regexp.MustCompile(`\b(c|l|all|dall|dell|nell|sull|coll|pell|gl|agl|dagl|degl|negl|sugl|un|m|t|s|v|d|qu|n|j)'([a-z])`) //contractions,"['var', 'reg2', '=', 'regexp', '.', 'MustCompile', '(', 'b', '(', 'c', '|', 'l', '|', 'all', '|', 'dall', '|', 'dell', '|', 'nell', '|', 'sull', '|', 'coll', '|', 'pell', '|', 'gl', '|', 'agl', '|', 'dagl', '|', 'degl', '|', 'negl', '|', 'sugl', '|', 'un', '|', 'm', '|', 't', '|', 's', '|', 'v', '|', 'd', '|', 'qu', '|', 'n', '|', 'j', ')', '([', 'a', '-', 'z', '])', ')', '//contractions
139,var dictionary map[string]bool,"['var', 'dictionary', 'map', '[', 'string', ']', 'bool']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
140,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
141,    trainer := new(Trainer),"['trainer', ':=', 'new', '(', 'Trainer', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
142,    LoadDictionary(),"['LoadDictionary', '()']","['IDENTIFIER', 'OPERATOR']"
143,    trainer.Start(),"['trainer', '.', 'Start', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
144,},['}'],['OPERATOR']
