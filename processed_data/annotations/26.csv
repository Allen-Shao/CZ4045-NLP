,text,token,annotation
0,import (    ,"['import', '(']","['KEYWORD', 'OPERATOR']"
1,"    ""errors""    ","['""errors""']",['STRING_LITERAL']
2,"    ""time""    ","['""time""']",['STRING_LITERAL']
3,"    ""appengine""    ","['""appengine""']",['STRING_LITERAL']
4,"    ""appengine/datastore""        ","['""appengine/datastore""']",['STRING_LITERAL']
5,"    pb ""appengine_internal/datastore""    ","['pb', '""appengine_internal/datastore""']","['IDENTIFIER', 'STRING_LITERAL']"
6,"    proto ""code.google.com/p/goprotobuf/proto""    ","['proto', '""code.google.com/p/goprotobuf/proto""']","['IDENTIFIER', 'STRING_LITERAL']"
7,)    ,[')'],['OPERATOR']
8,"func loadLocalStructuredProperty(dst interface{}, raw_proto []byte) error {    ","['func', 'loadLocalStructuredProperty', '(', 'dst', 'interface', '{},', 'raw_proto', '[]', 'byte', ')', 'error', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
9,    var val pb.EntityProto    ,"['var', 'val', 'pb', '.', 'EntityProto']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
10,"    err := proto.Unmarshal(raw_proto, &val)    ","['err', ':=', 'proto', '.', 'Unmarshal', '(', 'raw_proto', ',', '&', 'val', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
11,    if err != nil {    ,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
12,        return err    ,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
13,    }    ,['}'],['OPERATOR']
14,"    return loadEntity(dst, &val)    ","['return', 'loadEntity', '(', 'dst', ',', '&', 'val', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
15,},['}'],['OPERATOR']
16,//Copied from appengine/datastore since its not exported,['//Copied from appengine/datastore since its not exported'],"['COMMENT', 'VBN', 'IN', 'RB', 'IN', 'PRP$', 'RB', 'VBN']"
17,// loadEntity loads an EntityProto into PropertyLoadSaver or struct pointer.,['// loadEntity loads an EntityProto into PropertyLoadSaver or struct pointer.'],"['COMMENT', 'NN', 'VBZ', 'DT', 'NNP', 'IN', 'NNP', 'CC', 'NN', 'NN', '.']"
18,"func loadEntity(dst interface{}, src *pb.EntityProto) (err error) {","['func', 'loadEntity', '(', 'dst', 'interface', '{},', 'src', '*', 'pb', '.', 'EntityProto', ')', '(', 'err', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
19,"c := make(chan datastore.Property, 32)","['c', ':=', 'make', '(', 'chan', 'datastore', '.', 'Property', ',', '32', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
20," errc := make(chan error, 1)","['errc', ':=', 'make', '(', 'chan', 'error', ',', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
21, defer func() {,"['defer', 'func', '()', '{']","['IDENTIFIER', 'KEYWORD', 'OPERATOR', 'OPERATOR']"
22,    if err == nil {,"['if', 'err', '==', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
23,            err = <-errc,"['err', '=', '<-', 'errc']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
24,        },['}'],['OPERATOR']
25,    }(),['}()'],['OPERATOR']
26,"    go protoToProperties(c, errc, src)","['go', 'protoToProperties', '(', 'c', ',', 'errc', ',', 'src', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
27,"    if e, ok := dst.(datastore.PropertyLoadSaver); ok {","['if', 'e', ',', 'ok', ':=', 'dst', '.(', 'datastore', '.', 'PropertyLoadSaver', ');', 'ok', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
28,        return e.Load(c),"['return', 'e', '.', 'Load', '(', 'c', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
29,    },['}'],['OPERATOR']
30,"    return datastore.LoadStruct(dst, c)","['return', 'datastore', '.', 'LoadStruct', '(', 'dst', ',', 'c', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
31,},['}'],['OPERATOR']
32,"func protoToProperties(dst chan<- datastore.Property, errc chan<- error, src *pb.EntityProto) {","['func', 'protoToProperties', '(', 'dst', 'chan', '<-', 'datastore', '.', 'Property', ',', 'errc', 'chan', '<-', 'error', ',', 'src', '*', 'pb', '.', 'EntityProto', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
33,    defer close(dst),"['defer', 'close', '(', 'dst', ')']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
34,"    props, rawProps := src.Property, src.RawProperty","['props', ',', 'rawProps', ':=', 'src', '.', 'Property', ',', 'src', '.', 'RawProperty']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
35,    for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
36,        var (,"['var', '(']","['KEYWORD', 'OPERATOR']"
37,            x       *pb.Property,"['x', '*', 'pb', '.', 'Property']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
38,            noIndex bool,"['noIndex', 'bool']","['IDENTIFIER', 'IDENTIFIER']"
39,        ),[')'],['OPERATOR']
40,        if len(props) > 0 {,"['if', 'len', '(', 'props', ')', '>', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
41,"            x, props = props[0], props[1:]","['x', ',', 'props', '=', 'props', '[', '0', '],', 'props', '[', '1', ':]']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
42,        } else if len(rawProps) > 0 {,"['}', 'else', 'if', 'len', '(', 'rawProps', ')', '>', '0', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
43,"            x, rawProps = rawProps[0], rawProps[1:]","['x', ',', 'rawProps', '=', 'rawProps', '[', '0', '],', 'rawProps', '[', '1', ':]']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
44,            noIndex = true,"['noIndex', '=', 'true']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
45,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
46,            break,['break'],['KEYWORD']
47,        },['}'],['OPERATOR']
48,        var value interface{},"['var', 'value', 'interface', '{}']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
49,        if x.Meaning != nil && *x.Meaning == pb.Property_INDEX_VALUE {,"['if', 'x', '.', 'Meaning', '!=', 'nil', '&&', '*', 'x', '.', 'Meaning', '==', 'pb', '.', 'Property_INDEX_VALUE', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
50,            value = indexValue{x.Value},"['value', '=', 'indexValue', '{', 'x', '.', 'Value', '}']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
51,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
52,            var err error,"['var', 'err', 'error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
53,"            value, err = propValue(x.Value, x.GetMeaning())","['value', ',', 'err', '=', 'propValue', '(', 'x', '.', 'Value', ',', 'x', '.', 'GetMeaning', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
54,            if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
55,                errc <- err,"['errc', '<-', 'err']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
56,                return,['return'],['KEYWORD']
57,            },['}'],['OPERATOR']
58,        },['}'],['OPERATOR']
59,        dst <- datastore.Property{,"['dst', '<-', 'datastore', '.', 'Property', '{']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
60,"            Name:     x.GetName(),","['Name', ':', 'x', '.', 'GetName', '(),']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
61,"            Value:    value,","['Value', ':', 'value', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
62,"            NoIndex:  noIndex,","['NoIndex', ':', 'noIndex', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
63,"            Multiple: x.GetMultiple(),","['Multiple', ':', 'x', '.', 'GetMultiple', '(),']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
64,        },['}'],['OPERATOR']
65,    },['}'],['OPERATOR']
66,    errc <- nil,"['errc', '<-', 'nil']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
67,},['}'],['OPERATOR']
68,func fromUnixMicro(t int64) time.Time {,"['func', 'fromUnixMicro', '(', 't', 'int64', ')', 'time', '.', 'Time', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
69,"    return time.Unix(t/1e6, (t%1e6)*1e3)","['return', 'time', '.', 'Unix', '(', 't', '1', 'e6', ',', '(', 't', '1', 'e6', ')*', '1', 'e3', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER', 'OPERATOR']"
70,},['}'],['OPERATOR']
71,// propValue returns a Go value that combines the raw PropertyValue with a,['// propValue returns a Go value that combines the raw PropertyValue with a'],"['COMMENT', 'NN', 'VBZ', 'DT', 'NNP', 'NN', 'WDT', 'VBZ', 'DT', 'JJ', 'NNP', 'IN', 'DT']"
72,"// meaning. For example, an Int64Value with GD_WHEN becomes a time.Time.","['// meaning. For example, an Int64Value with GD_WHEN becomes a time.Time.']","['COMMENT', 'NN', '.', 'IN', 'NN', ',', 'DT', 'NNP', 'IN', 'NNP', 'VBZ', 'DT', 'NN', '.']"
73,"func propValue(v *pb.PropertyValue, m pb.Property_Meaning) (interface{}, error) {","['func', 'propValue', '(', 'v', '*', 'pb', '.', 'PropertyValue', ',', 'm', 'pb', '.', 'Property_Meaning', ')', '(', 'interface', '{},', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
74,    switch {,"['switch', '{']","['IDENTIFIER', 'OPERATOR']"
75,    case v.Int64Value != nil:,"['case', 'v', '.', 'Int64Value', '!=', 'nil', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
76,        if m == pb.Property_GD_WHEN {,"['if', 'm', '==', 'pb', '.', 'Property_GD_WHEN', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
77,"            return fromUnixMicro(*v.Int64Value), nil","['return', 'fromUnixMicro', '(*', 'v', '.', 'Int64Value', '),', 'nil']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
78,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
79,"            return *v.Int64Value, nil","['return', '*', 'v', '.', 'Int64Value', ',', 'nil']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
80,        },['}'],['OPERATOR']
81,    case v.BooleanValue != nil:,"['case', 'v', '.', 'BooleanValue', '!=', 'nil', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
82,"        return *v.BooleanValue, nil","['return', '*', 'v', '.', 'BooleanValue', ',', 'nil']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
83,    case v.StringValue != nil:,"['case', 'v', '.', 'StringValue', '!=', 'nil', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
84,        if m == pb.Property_BLOB {,"['if', 'm', '==', 'pb', '.', 'Property_BLOB', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
85,"            return []byte(*v.StringValue), nil","['return', '[]', 'byte', '(*', 'v', '.', 'StringValue', '),', 'nil']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
86,        } else if m == pb.Property_BLOBKEY {,"['}', 'else', 'if', 'm', '==', 'pb', '.', 'Property_BLOBKEY', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
87,"            return appengine.BlobKey(*v.StringValue), nil","['return', 'appengine', '.', 'BlobKey', '(*', 'v', '.', 'StringValue', '),', 'nil']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
88,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
89,"            return *v.StringValue, nil","['return', '*', 'v', '.', 'StringValue', ',', 'nil']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
90,        },['}'],['OPERATOR']
91,    case v.DoubleValue != nil:,"['case', 'v', '.', 'DoubleValue', '!=', 'nil', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
92,"        return *v.DoubleValue, nil","['return', '*', 'v', '.', 'DoubleValue', ',', 'nil']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
93,    case v.Referencevalue != nil:,"['case', 'v', '.', 'Referencevalue', '!=', 'nil', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
94,"        return nil, errors.New(""Not Implemented!"")","['return', 'nil', ',', 'errors', '.', 'New', '(', '""Not Implemented!""', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
95,    },['}'],['OPERATOR']
96,"    return nil, nil","['return', 'nil', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
97,},['}'],['OPERATOR']
98,// indexValue is a Property value that is created when entities are loaded from,['// indexValue is a Property value that is created when entities are loaded from'],"['COMMENT', 'NN', 'VBZ', 'DT', 'NNP', 'NN', 'WDT', 'VBZ', 'VBN', 'WRB', 'NNS', 'VBP', 'VBN', 'IN']"
99,"// an index, such as from a projection query.","['// an index, such as from a projection query.']","['COMMENT', 'DT', 'NN', ',', 'JJ', 'IN', 'IN', 'DT', 'NN', 'NN', '.']"
100,//,['//'],['COMMENT']
101,// Such Property values do not contain all of the metadata required to be,['// Such Property values do not contain all of the metadata required to be'],"['COMMENT', 'JJ', 'NNP', 'NNS', 'VBP', 'RB', 'VB', 'DT', 'IN', 'DT', 'NN', 'VBN', 'TO', 'VB']"
102,"// faithfully represented as a Go value, and are instead represented as an","['// faithfully represented as a Go value, and are instead represented as an']","['COMMENT', 'RB', 'VBN', 'IN', 'DT', 'NNP', 'NN', ',', 'CC', 'VBP', 'RB', 'VBN', 'IN', 'DT']"
103,// opaque indexValue. Load the properties into a concrete struct type (e.g. by,['// opaque indexValue. Load the properties into a concrete struct type (e.g. by'],"['COMMENT', 'JJ', 'NN', '.', 'VB', 'DT', 'NNS', 'IN', 'DT', 'JJ', 'NN', 'NN', '(', 'NN', '.', 'IN']"
104,// passing a struct pointer to Iterator.Next) to reconstruct actual Go values,['// passing a struct pointer to Iterator.Next) to reconstruct actual Go values'],"['COMMENT', 'VBG', 'DT', 'NN', 'NN', 'TO', 'NNP', ')', 'TO', 'VB', 'JJ', 'NNP', 'NNS']"
105,"// of type int, string, time.Time, etc.","['// of type int, string, time.Time, etc.']","['COMMENT', 'IN', 'NN', 'NN', ',', 'NN', ',', 'NN', ',', 'FW', '.']"
106,type indexValue struct {,"['type', 'indexValue', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
107,    value *pb.PropertyValue,"['value', '*', 'pb', '.', 'PropertyValue']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
108,},['}'],['OPERATOR']
