,text,token,annotation
0,"I have a go program which connects to a tcp server and publishes that message to web service. the application works fine in the first go and it panics after a week or so. I am not sure why. the stack trace isn't helpful either.
(I cross compile from mac os to linux; env GOOS=linux GOARCH=386  go build)
could some one give pointers on what might be the issue?

the tcp server connection might go off once in a while; I have build the reconnection logic by hand. 
the error condition would be applicable to posting as well. the internet connection might break at any time; so ""dns"" resolver which go uses by default ""cgo"" was panicking. I had recompile with the ""netgo"" to use pure go network implementation.

Stack trace

","['I', 'have', 'a', 'go', 'program', 'which', 'connects', 'to', 'a', 'tcp', 'server', 'and', 'publishes', 'that', 'message', 'to', 'web', 'service.', 'the', 'application', 'works', 'fine', 'in', 'the', 'first', 'go', 'and', 'it', 'panics', 'after', 'a', 'week', 'or', 'so.', 'I', 'am', 'not', 'sure', 'why.', 'the', 'stack', 'trace', ""isn't"", 'helpful', 'either.', '(I', 'cross', 'compile', 'from', 'mac', 'os', 'to', 'linux;', 'env', 'GOOS=linux', 'GOARCH=386', 'go', 'build)', 'could', 'some', 'one', 'give', 'pointers', 'on', 'what', 'might', 'be', 'the', 'issue?', 'the', 'tcp', 'server', 'connection', 'might', 'go', 'off', 'once', 'in', 'a', 'while;', 'I', 'have', 'build', 'the', 'reconnection', 'logic', 'by', 'hand.', 'the', 'error', 'condition', 'would', 'be', 'applicable', 'to', 'posting', 'as', 'well.', 'the', 'internet', 'connection', 'might', 'break', 'at', 'any', 'time;', 'so', '""dns""', 'resolver', 'which', 'go', 'uses', 'by', 'default', '""cgo""', 'was', 'panicking.', 'I', 'had', 'recompile', 'with', 'the', '""netgo""', 'to', 'use', 'pure', 'go', 'network', 'implementation.', 'Stack', 'trace']","['PRP', 'VBP', 'DT', 'NN', 'NN', 'WDT', 'VBZ', 'TO', 'DT', 'NN', 'NN', 'CC', 'NNS', 'WDT', 'VBP', 'TO', 'VB', 'PDT', 'DT', 'NN', 'VBZ', 'JJ', 'IN', 'DT', 'JJ', 'NN', 'CC', 'PRP', 'NNS', 'IN', 'DT', 'NN', 'CC', 'NN', 'PRP', 'VBP', 'RB', 'JJ', 'IN', 'DT', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NNP', 'NN', 'NN', 'IN', 'NN', 'NN', 'TO', 'VB', 'JJ', 'NNP', 'NNP', 'VBP', 'NN', 'MD', 'DT', 'CD', 'JJ', 'NNS', 'IN', 'WP', 'MD', 'VB', 'DT', 'NN', 'DT', 'NN', 'NN', 'NN', 'MD', 'VB', 'RP', 'RB', 'IN', 'DT', 'NN', 'PRP', 'VBP', 'VBN', 'DT', 'NN', 'NN', 'IN', 'VBG', 'DT', 'NN', 'NN', 'MD', 'VB', 'JJ', 'TO', 'VBG', 'IN', 'NN', 'DT', 'NN', 'NN', 'MD', 'VB', 'IN', 'DT', 'NN', 'RB', 'NNP', 'NN', 'WDT', 'VBP', 'NNS', 'IN', 'NN', 'NN', 'VBD', 'JJ', 'PRP', 'VBD', 'NN', 'IN', 'DT', 'NN', 'TO', 'VB', 'NN', 'VBP', 'NN', 'NN', 'NNP', 'NN']"
1,"net.runtime_pollWait(0xf75c12d8, 0x72, 0x18690000)","['net.runtime_pollWait(0xf75c12d8, 0x72, 0x18690000)']",['FUNCTION_CALL']
2,"    /usr/local/go/src/runtime/netpoll.go:157 +0x55 net.(*pollDesc).Wait(0x18a6bb38, 0x72, 0x0, 0x0)/usr/local/go/src/net/fd_poll_runtime.go:73 +0x35","['/usr/local/go/src/runtime/netpoll.go:157 +0x55 net.(*pollDesc).Wait(0x18a6bb38, 0x72, 0x0, 0x0)/usr/local/go/src/net/fd_poll_runtime.go:73', '+', '0x35']","['DIRECTORY', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
3,"    net.(*pollDesc).WaitRead(0x18a6bb38, 0x0, 0x0) _poll_runtime.go:78 +0x33","['net', '.(*', 'pollDesc', ').', 'WaitRead', '(', '0x18a6bb38', ',', '0', 'x0', ',', '0', 'x0', ')', '_poll_runtime', '.', 'go', ':', '78', '+', '0x33']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'HEX_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'DECIMAL_LITERAL', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
4,"    net.(*netFD).Read(0x18a6bb00, 0x18cd6000, 0x1000, 0x1000, 0x0, 0xf75bc018, 0x18690000)/usr/local/go/src/net/fd_unix.go:232 +0x19anet.(*conn).Read(0x18cd4d78, 0x18cd6000, 0x1000, 0x1000, 0x0, 0x0, 0x0)","['net', '.(*', 'netFD', ').', 'Read', '(', '0x18a6bb', '0', '0', ',', '0x18cd6', '0', '0', '0', ',', '0x1', '0', '0', '0', ',', '0x1', '0', '0', '0', ',', '0', 'x0', ',', '0xf75bc', '01', '8', ',', '0x1869', '0', '0', '0', '0', ')/', 'usr/local/go/src/net/fd_unix.go:232', '+', '0x19a', 'net', '.(*', 'conn', ').', 'Read', '(', '0x18cd4d78', ',', '0x18cd6', '0', '0', '0', ',', '0x1', '0', '0', '0', ',', '0x1', '0', '0', '0', ',', '0', 'x0', ',', '0', 'x0', ',', '0', 'x0', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'DECIMAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'DIRECTORY', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'HEX_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
5,    /usr/local/go/src/net/net.go:172 +0xb9,"['/usr/local/go/src/net/net.go:172', '+', '0xb9']","['DIRECTORY', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
6,"    net/http.noteEOFReader.Read(0xf75fc018, 0x18cd4d78, 0x1889770c, 0x18cd6000, 0x1000, 0x1000, 0x2c3620, 0x0, 0x0)","['net/http.noteEOFReader.Read(0xf75fc018,', '0x18cd4d78', ',', '0x188977', '0', 'c', ',', '0x18cd6', '0', '0', '0', ',', '0x1', '0', '0', '0', ',', '0x1', '0', '0', '0', ',', '0x2c362', '0', ',', '0', 'x0', ',', '0', 'x0', ')']","['DIRECTORY', 'HEX_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
7,    /usr/local/go/src/net/http/transport.go:1370 +0x55,"['/usr/local/go/src/net/http/transport.go:1370', '+', '0x55']","['DIRECTORY', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
8,"    net/http.(*noteEOFReader).Read(0x18cd29e0, 0x18cd6000, 0x1000, 0x1000, 0x8056f0c, 0x0, 0x0)","['net/http.(*noteEOFReader).Read(0x18cd29e0,', '0x18cd6', '0', '0', '0', ',', '0x1', '0', '0', '0', ',', '0x1', '0', '0', '0', ',', '0x8', '056', 'f0c', ',', '0', 'x0', ',', '0', 'x0', ')']","['DIRECTORY', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
9,    :126 +0xae,"[':', '126', '+', '0xae']","['PUNCTUATION', 'DECIMAL_LITERAL', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
10,    bufio.(*Reader).fill(0x1881b7d0),"['bufio', '.(*', 'Reader', ').', 'fill', '(', '0x1881b7d', '0', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION']"
11,    /usr/local/go/src/bufio/bufio.go:97 +0x172,"['/usr/local/go/src/bufio/bufio.go:97', '+', '0x172']","['DIRECTORY', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
12,"    bufio.(*Reader).Peek(0x1881b7d0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0)","['bufio', '.(*', 'Reader', ').', 'Peek', '(', '0x1881b7d', '0', ',', '0x1', ',', '0', 'x0', ',', '0', 'x0', ',', '0', 'x0', ',', '0', 'x0', ',', '0', 'x0', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
13,    /usr/local/go/src/bufio/bufio.go:132 +0xad,"['/usr/local/go/src/bufio/bufio.go:132', '+', '0xad']","['DIRECTORY', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
14,    net/http.(*persistConn).readLoop(0x188976e0),['net/http.(*persistConn).readLoop(0x188976e0)'],['DIRECTORY']
15,    /usr/local/go/src/net/http/transport.go:876 +0xe3,"['/usr/local/go/src/net/http/transport.go:876', '+', '0xe3']","['DIRECTORY', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
16,    created by net/http.(*Transport).dialConn,"['created', 'by', 'net/http.(*Transport).dialConn']","['IDENTIFIER', 'IDENTIFIER', 'DIRECTORY']"
17,    /usr/local/go/src/net/http/transport.go:685 +0xabc,"['/usr/local/go/src/net/http/transport.go:685', '+', '0xabc']","['DIRECTORY', 'ARITHMETIC_OPERATOR', 'HEX_LITERAL']"
18,"

GO program go program

","['GO', 'program', 'go', 'program']","['VB', 'NN', 'VBP', 'NN']"
19,  package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
20, import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
21,"  ""bufio""","['""bufio""']",['STRING_LITERAL']
22,"  ""bytes""","['""bytes""']",['STRING_LITERAL']
23,"  ""encoding/json""","['""encoding/json""']",['STRING_LITERAL']
24,"  ""flag""","['""flag""']",['STRING_LITERAL']
25,"  ""fmt""","['""fmt""']",['STRING_LITERAL']
26,"  ""net""","['""net""']",['STRING_LITERAL']
27,"  ""net/http""","['""net/http""']",['STRING_LITERAL']
28,"  ""time""","['""time""']",['STRING_LITERAL']
29,  ),[')'],['PUNCTUATION']
30,  var (,"['var', '(']","['KEYWORD', 'PUNCTUATION']"
31,"    server             = flag.String(""deamon"", ""127.0.0.1:7070"", ""AMQP URI"")","['server', '=', 'flag.String(""deamon"", ""127.0.0.1:7070"", ""AMQP URI"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
32,"    msgRoutingKey      = flag.String(""routingKey"", ""routingKey"", "" routing key"")","['msgRoutingKey', '=', 'flag.String(""routingKey"", ""routingKey"", "" routing key"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
33,"    msgexchange        = flag.String(""exchange"", ""exchange"", "" excahnge "")","['msgexchange', '=', 'flag.String(""exchange"", ""exchange"", "" excahnge "")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
34,"    mywebserviceServer = flag.String(""mywebservice-server"", ""127.0.0.1:8080"",      ""mywebserviceServer:port "")","['mywebserviceServer', '=', 'flag.String(""mywebservice-server"", ""127.0.0.1:8080"",      ""mywebserviceServer:port "")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
35,  ),[')'],['PUNCTUATION']
36,   func init() {,"['func', 'init', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
37,     flag.Parse(),['flag.Parse()'],['FUNCTION_CALL']
38,   },['}'],['PUNCTUATION']
39,   type TcpConnector struct {,"['type', 'TcpConnector', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
40,    Outbound      chan string,"['Outbound', 'chan', 'string']","['IDENTIFIER', 'KEYWORD', 'IDENTIFIER']"
41,    Inbound       chan string,"['Inbound', 'chan', 'string']","['IDENTIFIER', 'KEYWORD', 'IDENTIFIER']"
42,    Addr          string,"['Addr', 'string']","['IDENTIFIER', 'IDENTIFIER']"
43,    ReconnectTime time.Duration,"['ReconnectTime', 'time', '.', 'Duration']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
44,   },['}'],['PUNCTUATION']
45,type Message struct {,"['type', 'Message', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
46,"  RoutingKey string `json:""routingKey""`","['RoutingKey', 'string', 'json', ':', '""routingKey""']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL']"
47,"  Exchange   string `json:""exchange""`","['Exchange', 'string', 'json', ':', '""exchange""']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL']"
48,"  Data       string `json:""data""`","['Data', 'string', 'json', ':', '""data""']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL']"
49,},['}'],['PUNCTUATION']
50,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
51,  start := time.Now(),"['start', ':=', 'time.Now()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
52,  tcpClient := NewTcpConnector(*server),"['tcpClient', ':=', 'NewTcpConnector', '(*', 'server', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
53,  elapsed := time.Since(start),"['elapsed', ':=', 'time.Since(start)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
54,"  fmt.Println(""the connecting params are  %s"", *server, *msgexchange, *msgRoutingKey, *mywebserviceServer)","['fmt.Println(""the connecting params are  %s"", *server, *msgexchange, *msgRoutingKey, *mywebserviceServer)']",['FUNCTION_CALL']
55,"  fmt.Println(""connecting to daemon took %s"", elapsed)","['fmt.Println(""connecting to daemon took %s"", elapsed)']",['FUNCTION_CALL']
56,   go func() {,"['go', 'func', '()', '{']","['KEYWORD', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
57,    for msg := range tcpClient.Inbound {,"['for', 'msg', ':=', 'range', 'tcpClient', '.', 'Inbound', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
58,        fmt.Println(msg),['fmt.Println(msg)'],['FUNCTION_CALL']
59,        rabbitMessage := Message{,"['rabbitMessage', ':=', 'Message', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
60,"            RoutingKey: *msgRoutingKey,","['RoutingKey', ':', '*', 'msgRoutingKey', ',']","['IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
61,"            Exchange:   *msgexchange,","['Exchange', ':', '*', 'msgexchange', ',']","['IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
62,"            Data:       msg,","['Data', ':', 'msg', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
63,        },['}'],['PUNCTUATION']
64,"        mywebserviceMessageEndpoint :=    fmt.Sprintf(""http://%s/v1/messages/publish"", *mywebserviceServer)","['mywebserviceMessageEndpoint', ':=', 'fmt.Sprintf(""http://%s/v1/messages/publish"", *mywebserviceServer)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
65,"        doPut(mywebserviceMessageEndpoint, &rabbitMessage)","['doPut', '(', 'mywebserviceMessageEndpoint', ',', '&', 'rabbitMessage', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
66,      },['}'],['PUNCTUATION']
67,    }(),['}()'],['PUNCTUATION']
68,   select {},"['select', '{}']","['KEYWORD', 'PUNCTUATION']"
69, },['}'],['PUNCTUATION']
70,"func doPut(url string, rabbitMessage *Message) {","['func', 'doPut', '(', 'url', 'string', ',', 'rabbitMessage', '*', 'Message', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
71, start := time.Now(),"['start', ':=', 'time.Now()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
72," b, err := json.Marshal(rabbitMessage)","['b', ',', 'err', ':=', 'json.Marshal(rabbitMessage)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
73, client := &http.Client{},"['client', ':=', '&', 'http', '.', 'Client', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
74," request, err := http.NewRequest(""PUT"", url, bytes.NewBuffer(b))","['request', ',', 'err', ':=', 'http.NewRequest(""PUT"", url, bytes.NewBuffer(b))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
75," request.Header.Add(""Content-Type"", ""application/json"")","['request', '.', 'Header.Add(""Content-Type"", ""application/json"")']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
76," request.Header.Add(""accept"", ""application/json"")","['request', '.', 'Header.Add(""accept"", ""application/json"")']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
77," response, err := client.Do(request)","['response', ',', 'err', ':=', 'client.Do(request)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
78, if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
79,    fmt.Println(err),['fmt.Println(err)'],['FUNCTION_CALL']
80, } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
81,    defer response.Body.Close(),"['defer', 'response', '.', 'Body.Close()']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
82,"    fmt.Println(""   "", response.StatusCode)","['fmt.Println(""   "", response.StatusCode)']",['FUNCTION_CALL']
83,    hdr := response.Header,"['hdr', ':=', 'response', '.', 'Header']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
84,"    for key, value := range hdr {","['for', 'key', ',', 'value', ':=', 'range', 'hdr', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
85,"        fmt.Println(""   "", key, "":"", value)","['fmt.Println(""   "", key, "":"", value)']",['FUNCTION_CALL']
86,    },['}'],['PUNCTUATION']
87, },['}'],['PUNCTUATION']
88, elapsed := time.Since(start),"['elapsed', ':=', 'time.Since(start)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
89," fmt.Println(""posting to mywebservice took %s"", elapsed)","['fmt.Println(""posting to mywebservice took %s"", elapsed)']",['FUNCTION_CALL']
90,},['}'],['PUNCTUATION']
91,func NewTcpConnector(addr string) *TcpConnector {,"['func', 'NewTcpConnector', '(', 'addr', 'string', ')', '*', 'TcpConnector', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
92, tcpConnector := &TcpConnector{,"['tcpConnector', ':=', '&', 'TcpConnector', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
93,"    Addr:          addr,","['Addr', ':', 'addr', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
94,"    Outbound:      make(chan string, 100),","['Outbound', ':', 'make', '(', 'chan', 'string', ',', '100', '),']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
95,"    Inbound:       make(chan string, 100),","['Inbound', ':', 'make', '(', 'chan', 'string', ',', '100', '),']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
96,"    ReconnectTime: 30 * time.Second,","['ReconnectTime', ':', '30', '*', 'time', '.', 'Second', ',']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
97, },['}'],['PUNCTUATION']
98, tcpConnector.connect(),['tcpConnector.connect()'],['FUNCTION_CALL']
99, return tcpConnector,"['return', 'tcpConnector']","['KEYWORD', 'IDENTIFIER']"
100,},['}'],['PUNCTUATION']
101,"//keep connect private, will be in trouble if got called twice","['//', 'keep', 'connect', 'private,', 'will', 'be', 'in', 'trouble', 'if', 'got', 'called', 'twice']","['COMMENT', 'VB', 'NN', 'NN', 'MD', 'VB', 'IN', 'NN', 'IN', 'VBD', 'VBN', 'RB']"
102,func (tcpConnector *TcpConnector) connect() {,"['func', '(', 'tcpConnector', '*', 'TcpConnector', ')', 'connect', '()', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
103," conn, err := net.Dial(""tcp"", tcpConnector.Addr)","['conn', ',', 'err', ':=', 'net.Dial(""tcp"", tcpConnector.Addr)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
104, if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
105,"    fmt.Println(""Failed to make a connection"", err)","['fmt.Println(""Failed to make a connection"", err)']",['FUNCTION_CALL']
106,    time.Sleep(tcpConnector.ReconnectTime),['time.Sleep(tcpConnector.ReconnectTime)'],['FUNCTION_CALL']
107,    tcpConnector.connect(),['tcpConnector.connect()'],['FUNCTION_CALL']
108,    return,['return'],['KEYWORD']
109, },['}'],['PUNCTUATION']
110,go func() {,"['go', 'func', '()', '{']","['KEYWORD', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
111,    for msg := range tcpConnector.Outbound {,"['for', 'msg', ':=', 'range', 'tcpConnector', '.', 'Outbound', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
112,"        _, err = fmt.Fprintf(conn, msg+""\n"")","['_', ',', 'err', '=', 'fmt.Fprintf(conn, msg+""\\n"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
113,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
114,"            fmt.Println(""Failed sending event"", err)","['fmt.Println(""Failed sending event"", err)']",['FUNCTION_CALL']
115,            time.Sleep(tcpConnector.ReconnectTime),['time.Sleep(tcpConnector.ReconnectTime)'],['FUNCTION_CALL']
116,            tcpConnector.connect(),['tcpConnector.connect()'],['FUNCTION_CALL']
117,            break,['break'],['KEYWORD']
118,        },['}'],['PUNCTUATION']
119,    },['}'],['PUNCTUATION']
120,}(),['}()'],['PUNCTUATION']
121,go func() {,"['go', 'func', '()', '{']","['KEYWORD', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
122,"    reader := bufio.NewReaderSize(conn, 1024*1024)","['reader', ':=', 'bufio.NewReaderSize(conn, 1024*1024)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
123,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
124,"        message, err := reader.ReadBytes('\n')","['message', ',', 'err', ':=', ""reader.ReadBytes('\\n')""]","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
125,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
126,            break,['break'],['KEYWORD']
127,        },['}'],['PUNCTUATION']
128,"        fmt.Println(""Message Received: %s"", message)","['fmt.Println(""Message Received: %s"", message)']",['FUNCTION_CALL']
129,        tcpConnector.Inbound <- string(message),"['tcpConnector', '.', 'Inbound', '<-', 'string', '(', 'message', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
130,"        fmt.Println(""Message sent to chan"")","['fmt.Println(""Message sent to chan"")']",['FUNCTION_CALL']
131,    },['}'],['PUNCTUATION']
132,"    fmt.Println(""reconnecting..."")","['fmt.Println(""reconnecting..."")']",['FUNCTION_CALL']
133,    tcpConnector.connect(),['tcpConnector.connect()'],['FUNCTION_CALL']
134,}(),['}()'],['PUNCTUATION']
135,"fmt.Println(""Connected tcp"")","['fmt.Println(""Connected tcp"")']",['FUNCTION_CALL']
136,},['}'],['PUNCTUATION']
