,text,token,annotation
0,package main,"['package', 'main']","['keyword', 'identifier']"
1,import (,"['import', '(']","['keyword', 'operator']"
2,"    ""fmt""","['""fmt""']",['string_literal']
3,"    ""reflect""","['""reflect""']",['string_literal']
4,"    ""strings""","['""strings""']",['string_literal']
5,),[')'],['operator']
6,import (,"['import', '(']","['keyword', 'operator']"
7,"    //""encoding/json""","['//""encoding/json""']","['comment', '``', 'encoding/json', ""''""]"
8,"    ""encoding/json""","['""encoding/json""']",['string_literal']
9,"    ""encoding/xml""","['""encoding/xml""']",['string_literal']
10,"    ""errors""","['""errors""']",['string_literal']
11,),[')'],['operator']
12,type Query struct {,"['type', 'Query', 'struct', '{']","['keyword', 'identifier', 'keyword', 'operator']"
13,"    XMLName xml.Name `xml:""http://marklogic.com/appservices/search query"" json:""-""`","['XMLName', 'xml', '.', 'Name', 'xml', ':', '""http://marklogic.com/appservices/search query"" json:""-""']","['identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal']"
14,    Field1  string,"['Field1', 'string']","['identifier', 'identifier']"
15,    Field2  int64,"['Field2', 'int64']","['identifier', 'identifier']"
16,"    Queries []interface{} `xml:"",any"" json:""queries""`","['Queries', '[]', 'interface', '{}', 'xml', ':', '"",any"" json:""queries""']","['identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'string_literal']"
17,},['}'],['operator']
18,type TermQuery struct {,"['type', 'TermQuery', 'struct', '{']","['keyword', 'identifier', 'keyword', 'operator']"
19,"    XMLName xml.Name `xml:""http://marklogic.com/appservices/search term-query"" json:""-""`","['XMLName', 'xml', '.', 'Name', 'xml', ':', '""http://marklogic.com/appservices/search term-query"" json:""-""']","['identifier', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'string_literal']"
20,    Field3  string,"['Field3', 'string']","['identifier', 'identifier']"
21,    Field4  int64,"['Field4', 'int64']","['identifier', 'identifier']"
22,},['}'],['operator']
23,"func getXmlName(d interface{}, label string) (string, bool) {","['func', 'getXmlName', '(', 'd', 'interface', '{},', 'label', 'string', ')', '(', 'string', ',', 'bool', ')', '{']","['keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
24,    switch reflect.TypeOf(d).Kind() {,"['switch', 'reflect', '.', 'TypeOf', '(', 'd', ').', 'Kind', '()', '{']","['identifier', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
25,    case reflect.Struct:,"['case', 'reflect', '.', 'Struct', ':']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
26,"        v, _ := reflect.TypeOf(d).FieldByName(label)","['v', ',', '_', ':=', 'reflect', '.', 'TypeOf', '(', 'd', ').', 'FieldByName', '(', 'label', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
27,"        parts := strings.Split(v.Tag.Get(""xml""), "" "")","['parts', ':=', 'strings', '.', 'Split', '(', 'v', '.', 'Tag', '.', 'Get', '(', '""xml""), "" ""', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
28,"        return parts[1], true","['return', 'parts', '[', '1', '],', 'true']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier']"
29,    default:,"['default', ':']","['keyword', 'operator']"
30,        fmt.Println(reflect.TypeOf(d).Kind()),"['fmt', '.', 'Println', '(', 'reflect', '.', 'TypeOf', '(', 'd', ').', 'Kind', '())']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
31,    },['}'],['operator']
32,"    return """", false","['return', '""""', ',', 'false']","['keyword', 'string_literal', 'operator', 'identifier']"
33,},['}'],['operator']
34,"func wrapJson(item interface{}) (map[string]interface{}, error) {","['func', 'wrapJson', '(', 'item', 'interface', '{})', '(', 'map', '[', 'string', ']', 'interface', '{},', 'error', ')', '{']","['keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'operator']"
35,"    if n, ok := getXmlName(item, ""XMLName""); ok {","['if', 'n', ',', 'ok', ':=', 'getXmlName', '(', 'item', ',', '""XMLName""', ');', 'ok', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
36,"        if k := reflect.ValueOf(item).FieldByName(""Queries""); k.IsValid() {","['if', 'k', ':=', 'reflect', '.', 'ValueOf', '(', 'item', ').', 'FieldByName', '(', '""Queries""', ');', 'k', '.', 'IsValid', '()', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
37,            for i := 0; i < k.Len(); i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', 'k', '.', 'Len', '();', 'i', '++', '{']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
38,"                b, err1 := wrapJson(k.Index(i).Interface())","['b', ',', 'err1', ':=', 'wrapJson', '(', 'k', '.', 'Index', '(', 'i', ').', 'Interface', '())']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
39,                if err1 != nil {,"['if', 'err1', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
40,                    continue,['continue'],['keyword']
41,                },['}'],['operator']
42,                k.Index(i).Set(reflect.ValueOf(b)),"['k', '.', 'Index', '(', 'i', ').', 'Set', '(', 'reflect', '.', 'ValueOf', '(', 'b', '))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
43,            },['}'],['operator']
44,        },['}'],['operator']
45,"        return map[string]interface{}{n: item}, nil","['return', 'map', '[', 'string', ']', 'interface', '{}{', 'n', ':', 'item', '},', 'nil']","['keyword', 'keyword', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier']"
46,    },['}'],['operator']
47,"    return nil, errors.New(""You failed"")","['return', 'nil', ',', 'errors', '.', 'New', '(', '""You failed""', ')']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator']"
48,},['}'],['operator']
49,func asJson(i interface{}) []byte {,"['func', 'asJson', '(', 'i', 'interface', '{})', '[]', 'byte', '{']","['keyword', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'operator', 'identifier', 'operator']"
50,"    b, err := json.Marshal(i)","['b', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'i', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
51,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
52,"        return []byte(`{""error"": ""too bad""}`)","['return', '[]', 'byte', '(', '{', '""error"": ""too bad""', '}', ')']","['keyword', 'operator', 'identifier', 'operator', 'operator', 'string_literal', 'operator', 'operator']"
53,    },['}'],['operator']
54,    return b,"['return', 'b']","['keyword', 'identifier']"
55,},['}'],['operator']
56,func main() {,"['func', 'main', '()', '{']","['keyword', 'identifier', 'operator', 'operator']"
57,"    // create a TermQuery and encode it as {""term-query"": {struct}}","['// create a TermQuery and encode it as {""term-query"": {struct}}']","['comment', 'create', 'a', 'TermQuery', 'and', 'encode', 'it', 'as', '{', '``', 'term-query', ""''"", ':', '{', 'struct', '}', '}']"
58,"    tq := TermQuery{Field3: ""world"", Field4: 99}","['tq', ':=', 'TermQuery', '{', 'Field3', ':', '""world""', ',', 'Field4', ':', '99', '}']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
59,"    wrappedTQ, err := wrapJson(tq)","['wrappedTQ', ',', 'err', ':=', 'wrapJson', '(', 'tq', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
60,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
61,        fmt.Println(err),"['fmt', '.', 'Println', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
62,        return,['return'],['keyword']
63,    },['}'],['operator']
64,    fmt.Println(string(asJson(wrappedTQ))),"['fmt', '.', 'Println', '(', 'string', '(', 'asJson', '(', 'wrappedTQ', ')))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
65,"    // create a Query and encode it as {""query"": {struct}}","['// create a Query and encode it as {""query"": {struct}}']","['comment', 'create', 'a', 'Query', 'and', 'encode', 'it', 'as', '{', '``', 'query', ""''"", ':', '{', 'struct', '}', '}']"
66,    q := Query{,"['q', ':=', 'Query', '{']","['identifier', 'operator', 'identifier', 'operator']"
67,"        Field1: ""hello"", ","['Field1', ':', '""hello""', ',']","['identifier', 'operator', 'string_literal', 'operator']"
68,"        Field2: 42, ","['Field2', ':', '42', ',']","['identifier', 'operator', 'decimal_literal', 'operator']"
69,        Queries: []interface{}{,"['Queries', ':', '[]', 'interface', '{}{']","['identifier', 'operator', 'operator', 'keyword', 'operator']"
70,"            TermQuery{Field3: ""world"", Field4: 99},","['TermQuery', '{', 'Field3', ':', '""world""', ',', 'Field4', ':', '99', '},']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
71,"            TermQuery{Field3: ""yay, it works!"", Field4: 666},","['TermQuery', '{', 'Field3', ':', '""yay, it works!""', ',', 'Field4', ':', '666', '},']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
72,            Query{,"['Query', '{']","['identifier', 'operator']"
73,"                Field1: ""Hi"",","['Field1', ':', '""Hi""', ',']","['identifier', 'operator', 'string_literal', 'operator']"
74,"                Field2: 21,","['Field2', ':', '21', ',']","['identifier', 'operator', 'decimal_literal', 'operator']"
75,                Queries: []interface{}{,"['Queries', ':', '[]', 'interface', '{}{']","['identifier', 'operator', 'operator', 'keyword', 'operator']"
76,                    TermQuery{,"['TermQuery', '{']","['identifier', 'operator']"
77,"                        Field3: ""omg"",","['Field3', ':', '""omg""', ',']","['identifier', 'operator', 'string_literal', 'operator']"
78,"                        Field4: 1,","['Field4', ':', '1', ',']","['identifier', 'operator', 'decimal_literal', 'operator']"
79,"                    },","['},']",['operator']
80,"                },","['},']",['operator']
81,"            },","['},']",['operator']
82,"        },","['},']",['operator']
83,    },['}'],['operator']
84,"    wrappedQ, err := wrapJson(q)","['wrappedQ', ',', 'err', ':=', 'wrapJson', '(', 'q', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
85,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
86,        fmt.Println(err),"['fmt', '.', 'Println', '(', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
87,        return,['return'],['keyword']
88,    },['}'],['operator']
89,    fmt.Println(string(asJson(wrappedQ))),"['fmt', '.', 'Println', '(', 'string', '(', 'asJson', '(', 'wrappedQ', ')))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
90,},['}'],['operator']
