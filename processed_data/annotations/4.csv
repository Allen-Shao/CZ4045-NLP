,text,token,annotation
0,// Handle the reads,['// Handle the reads'],"['comment', 'Handle', 'the', 'reads']"
1,  var tbuf [81920]byte,"['var', 'tbuf', '[', '81920', ']', 'byte']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier']"
2,  for {,"['for', '{']","['keyword', 'operator']"
3,"    n, err := c.rwc.Read(tbuf[0:])","['n', ',', 'err', ':=', 'c', '.', 'rwc', '.', 'Read', '(', 'tbuf', '[', '0', ':])']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
4,    // Was there an error in reading ?,['// Was there an error in reading ?'],"['comment', 'Was', 'there', 'an', 'error', 'in', 'reading', '?']"
5,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
6,"        log.Printf(""Could not read packet : %s"", err.Error())","['log', '.', 'Printf', '(', '""Could not read packet : %s""', ',', 'err', '.', 'Error', '())']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
7,        break,['break'],['keyword']
8,    },['}'],['operator']
9,    log.Println(n),"['log', '.', 'Println', '(', 'n', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
10,},['}'],['operator']
11,return,['return'],['keyword']
