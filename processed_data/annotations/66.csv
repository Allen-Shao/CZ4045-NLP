,text,token,annotation
0,"My Google App Engine Go project creates a zip of multiple files in a ""folder"" that's in Google Cloud Storage.  It use to be pretty quick when it was implemented in the BlobStore using the now deprecated and removed Files API.  I recently converted the code to use Google Cloud Storage and performance is really bad and sometimes will timeout.  The files that are being zipped are between 1K and 2M in size.

Looking for any advice to improve zipping up file contents. The code below is what I wrote for compressing multiple files in the cloud to a new zip file in the cloud. It can take a long time to execute and requires loading the entire contents (See PERFORMANCE ISSUE below) of each file into memory before writing it to the zip.  There has to be a better way.

","['My', 'Google', 'App', 'Engine', 'Go', 'project', 'creates', 'a', 'zip', 'of', 'multiple', 'files', 'in', 'a', '""folder""', ""that's"", 'in', 'Google', 'Cloud', 'Storage.', 'It', 'use', 'to', 'be', 'pretty', 'quick', 'when', 'it', 'was', 'implemented', 'in', 'the', 'BlobStore', 'using', 'the', 'now', 'deprecated', 'and', 'removed', 'Files', 'API.', 'I', 'recently', 'converted', 'the', 'code', 'to', 'use', 'Google', 'Cloud', 'Storage', 'and', 'performance', 'is', 'really', 'bad', 'and', 'sometimes', 'will', 'timeout.', 'The', 'files', 'that', 'are', 'being', 'zipped', 'are', 'between', '1K', 'and', '2M', 'in', 'size.', 'Looking', 'for', 'any', 'advice', 'to', 'improve', 'zipping', 'up', 'file', 'contents.', 'The', 'code', 'below', 'is', 'what', 'I', 'wrote', 'for', 'compressing', 'multiple', 'files', 'in', 'the', 'cloud', 'to', 'a', 'new', 'zip', 'file', 'in', 'the', 'cloud.', 'It', 'can', 'take', 'a', 'long', 'time', 'to', 'execute', 'and', 'requires', 'loading', 'the', 'entire', 'contents', '(See', 'PERFORMANCE', 'ISSUE', 'below)', 'of', 'each', 'file', 'into', 'memory', 'before', 'writing', 'it', 'to', 'the', 'zip.', 'There', 'has', 'to', 'be', 'a', 'better', 'way.']","['PRP$', 'NNP', 'NNP', 'NNP', 'NNP', 'NN', 'VBZ', 'DT', 'NN', 'IN', 'JJ', 'NNS', 'IN', 'DT', 'JJ', 'NN', 'IN', 'NNP', 'NNP', 'NNP', 'PRP', 'NN', 'TO', 'VB', 'RB', 'JJ', 'WRB', 'PRP', 'VBD', 'VBN', 'IN', 'DT', 'NNP', 'VBG', 'DT', 'RB', 'VBN', 'CC', 'VBN', 'NNP', 'NNP', 'PRP', 'RB', 'VBD', 'DT', 'NN', 'TO', 'VB', 'NNP', 'NNP', 'NNP', 'CC', 'NN', 'VBZ', 'RB', 'JJ', 'CC', 'RB', 'MD', 'VB', 'DT', 'NNS', 'WDT', 'VBP', 'VBG', 'VBN', 'VBP', 'IN', 'CD', 'CC', 'CD', 'IN', 'NN', 'VBG', 'IN', 'DT', 'NN', 'TO', 'VB', 'VBG', 'RP', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'VBZ', 'WP', 'PRP', 'VBD', 'IN', 'VBG', 'JJ', 'NNS', 'IN', 'DT', 'NN', 'TO', 'DT', 'JJ', 'NN', 'NN', 'IN', 'DT', 'NN', 'PRP', 'MD', 'VB', 'DT', 'JJ', 'NN', 'TO', 'VB', 'CC', 'VBZ', 'VBG', 'DT', 'JJ', 'NNS', 'VBP', 'NNP', 'NNP', 'NN', 'IN', 'DT', 'NN', 'IN', 'NN', 'IN', 'VBG', 'PRP', 'TO', 'DT', 'NN', 'EX', 'VBZ', 'TO', 'VB', 'DT', 'JJR', 'NN']"
1,// Pack a folder into zip file,"['//', 'Pack', 'a', 'folder', 'into', 'zip', 'file']","['COMMENT', 'VB', 'DT', 'NN', 'IN', 'NN', 'NN']"
2,"func (cloud *Cloud) Pack(srcFolder string, fileName string, contentType string, metaData *map[string]string) {","['func', '(', 'cloud', '*', 'Cloud', ')', 'Pack', '(', 'srcFolder', 'string', ',', 'fileName', 'string', ',', 'contentType', 'string', ',', 'metaData', '*', 'map', '[', 'string', ']', 'string', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
3,"    log.Infof(cloud.c, ""Packing bucket %v folder %v to file %v"", cloud.bucket, srcFolder, fileName) ","['log', '.', 'Infof', '(', 'cloud', '.', 'c', ',', '""Packing bucket %v folder %v to file %v""', ',', 'cloud', '.', 'bucket', ',', 'srcFolder', ',', 'fileName', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
4,"    srcFolder = fmt.Sprintf(""%v/"", srcFolder)","['srcFolder', '=', 'fmt', '.', 'Sprintf', '(', '""%v/""', ',', 'srcFolder', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
5,"    query := &storage.Query{Prefix: srcFolder, Delimiter: ""/""}","['query', ':=', '&', 'storage', '.', 'Query', '{', 'Prefix', ':', 'srcFolder', ',', 'Delimiter', ':', '""/""', '}']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
6,"    objs, err := storage.ListObjects(cloud.ctx, cloud.bucket, query)","['objs', ',', 'err', ':=', 'storage', '.', 'ListObjects', '(', 'cloud', '.', 'ctx', ',', 'cloud', '.', 'bucket', ',', 'query', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
7,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
8,"        log.Errorf(cloud.c, ""Packing failed to list bucket %q: %v"", cloud.bucket, err)","['log', '.', 'Errorf', '(', 'cloud', '.', 'c', ',', '""Packing failed to list bucket %q: %v""', ',', 'cloud', '.', 'bucket', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
9,        return,['return'],['KEYWORD']
10,    },['}'],['OPERATOR']
11,    totalFiles := len(objs.Results),"['totalFiles', ':=', 'len', '(', 'objs', '.', 'Results', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
12,    if totalFiles == 0 {,"['if', 'totalFiles', '==', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
13,"        log.Errorf(cloud.c, ""Packing failed to find objects found in folder %q: %v"", cloud.bucket, srcFolder)","['log', '.', 'Errorf', '(', 'cloud', '.', 'c', ',', '""Packing failed to find objects found in folder %q: %v""', ',', 'cloud', '.', 'bucket', ',', 'srcFolder', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
14,        return,['return'],['KEYWORD']
15,    },['}'],['OPERATOR']
16,    // create storage file for writing,"['//', 'create', 'storage', 'file', 'for', 'writing']","['COMMENT', 'JJ', 'NN', 'NN', 'IN', 'VBG']"
17,"    log.Infof(cloud.c, ""Writing new zip file to %v/%v for %v files"", cloud.bucket, fileName, totalFiles)","['log', '.', 'Infof', '(', 'cloud', '.', 'c', ',', '""Writing new zip file to %v/%v for %v files""', ',', 'cloud', '.', 'bucket', ',', 'fileName', ',', 'totalFiles', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
18,"    storageWriter := storage.NewWriter(cloud.ctx, cloud.bucket, fileName)","['storageWriter', ':=', 'storage', '.', 'NewWriter', '(', 'cloud', '.', 'ctx', ',', 'cloud', '.', 'bucket', ',', 'fileName', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
19,    // add optional content type and meta data  ,"['//', 'add', 'optional', 'content', 'type', 'and', 'meta', 'data']","['COMMENT', 'JJ', 'JJ', 'NN', 'NN', 'CC', 'NN', 'NNS']"
20,    if len(contentType) > 0 { storageWriter.ContentType = contentType },"['if', 'len', '(', 'contentType', ')', '>', '0', '{', 'storageWriter', '.', 'ContentType', '=', 'contentType', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
21,    if metaData != nil { storageWriter.Metadata = *metaData },"['if', 'metaData', '!=', 'nil', '{', 'storageWriter', '.', 'Metadata', '=', '*', 'metaData', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
22,    // Create a buffer to write our archive to.,"['//', 'Create', 'a', 'buffer', 'to', 'write', 'our', 'archive', 'to.']","['COMMENT', 'VB', 'DT', 'NN', 'TO', 'VB', 'PRP$', 'JJ', 'NN']"
23,    buf := new(bytes.Buffer),"['buf', ':=', 'new', '(', 'bytes', '.', 'Buffer', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
24,    // Create a new zip archive to memory buffer,"['//', 'Create', 'a', 'new', 'zip', 'archive', 'to', 'memory', 'buffer']","['COMMENT', 'VB', 'DT', 'JJ', 'NN', 'NN', 'TO', 'NN', 'NN']"
25,    zipWriter := zip.NewWriter(buf),"['zipWriter', ':=', 'zip', '.', 'NewWriter', '(', 'buf', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
26,    // go through each file in the folder,"['//', 'go', 'through', 'each', 'file', 'in', 'the', 'folder']","['COMMENT', 'VB', 'IN', 'DT', 'NN', 'IN', 'DT', 'NN']"
27,"    for _, obj := range objs.Results {","['for', '_', ',', 'obj', ':=', 'range', 'objs', '.', 'Results', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
28,"        log.Infof(cloud.c, ""Packing file %v of size %v to zip file"", obj.Name, obj.Size)","['log', '.', 'Infof', '(', 'cloud', '.', 'c', ',', '""Packing file %v of size %v to zip file""', ',', 'obj', '.', 'Name', ',', 'obj', '.', 'Size', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
29,        //d.dumpStats(obj),"['//', 'd.dumpStats(obj)']","['COMMENT', 'NN']"
30,        // read file in our source folder from storage - io.ReadCloser returned from storage,"['//', 'read', 'file', 'in', 'our', 'source', 'folder', 'from', 'storage', '-', 'io.ReadCloser', 'returned', 'from', 'storage']","['COMMENT', 'NN', 'NN', 'IN', 'PRP$', 'NN', 'NN', 'IN', 'NN', ':', 'NN', 'VBD', 'IN', 'NN']"
31,"        storageReader, err := storage.NewReader(cloud.ctx, cloud.bucket, obj.Name)","['storageReader', ',', 'err', ':=', 'storage', '.', 'NewReader', '(', 'cloud', '.', 'ctx', ',', 'cloud', '.', 'bucket', ',', 'obj', '.', 'Name', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
32,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
33,"            log.Errorf(cloud.c, ""Packing failed to read from bucket %q file %q: %v"", cloud.bucket, obj.Name, err)","['log', '.', 'Errorf', '(', 'cloud', '.', 'c', ',', '""Packing failed to read from bucket %q file %q: %v""', ',', 'cloud', '.', 'bucket', ',', 'obj', '.', 'Name', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
34,            return  ,['return'],['KEYWORD']
35,        },['}'],['OPERATOR']
36,        defer storageReader.Close(),"['defer', 'storageReader', '.', 'Close', '()']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
37,        // PERFORMANCE ISSUE: have to load the entire file into memory to get random access from the cloud,"['//', 'PERFORMANCE', 'ISSUE:', 'have', 'to', 'load', 'the', 'entire', 'file', 'into', 'memory', 'to', 'get', 'random', 'access', 'from', 'the', 'cloud']","['COMMENT', 'NNP', 'NNP', 'VBP', 'TO', 'VB', 'DT', 'JJ', 'NN', 'IN', 'NN', 'TO', 'VB', 'JJ', 'NN', 'IN', 'DT', 'NN']"
38,"        slurp, err := ioutil.ReadAll(storageReader)","['slurp', ',', 'err', ':=', 'ioutil', '.', 'ReadAll', '(', 'storageReader', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
39,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
40,"            log.Errorf(cloud.c, ""Packing failed to read data from bucket %q file %q: %v"", cloud.bucket, obj.Name, err)","['log', '.', 'Errorf', '(', 'cloud', '.', 'c', ',', '""Packing failed to read data from bucket %q file %q: %v""', ',', 'cloud', '.', 'bucket', ',', 'obj', '.', 'Name', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
41,            return,['return'],['KEYWORD']
42,        },['}'],['OPERATOR']
43,        // grab just the filename from directory listing (don't want to store paths in zip),"['//', 'grab', 'just', 'the', 'filename', 'from', 'directory', 'listing', ""(don't"", 'want', 'to', 'store', 'paths', 'in', 'zip)']","['COMMENT', 'NN', 'RB', 'DT', 'NN', 'IN', 'NN', 'VBG', 'NNP', 'VBP', 'TO', 'VB', 'NNS', 'IN', 'NN']"
44,"        _, zipFileName := filepath.Split(obj.Name)","['_', ',', 'zipFileName', ':=', 'filepath', '.', 'Split', '(', 'obj', '.', 'Name', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
45,        newFileName := strings.ToLower(zipFileName),"['newFileName', ':=', 'strings', '.', 'ToLower', '(', 'zipFileName', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
46,        // add filename to zip,"['//', 'add', 'filename', 'to', 'zip']","['COMMENT', 'VB', 'NN', 'TO', 'VB']"
47,"        zipFile, err := zipWriter.Create(newFileName)","['zipFile', ',', 'err', ':=', 'zipWriter', '.', 'Create', '(', 'newFileName', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
48,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
49,"            log.Errorf(cloud.c, ""Packing failed to create zip file from bucket %q file %q: %v"", cloud.bucket, zipFileName, err)","['log', '.', 'Errorf', '(', 'cloud', '.', 'c', ',', '""Packing failed to create zip file from bucket %q file %q: %v""', ',', 'cloud', '.', 'bucket', ',', 'zipFileName', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
50,            return,['return'],['KEYWORD']
51,        },['}'],['OPERATOR']
52,        // write entire file into zip archive,"['//', 'write', 'entire', 'file', 'into', 'zip', 'archive']","['COMMENT', 'JJ', 'JJ', 'NN', 'IN', 'NN', 'NN']"
53,"        _, err = zipFile.Write(slurp)","['_', ',', 'err', '=', 'zipFile', '.', 'Write', '(', 'slurp', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
54,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
55,"            log.Errorf(cloud.c, ""Packing failed to write zip file from bucket %q file %q: %v"", cloud.bucket, zipFileName, err)","['log', '.', 'Errorf', '(', 'cloud', '.', 'c', ',', '""Packing failed to write zip file from bucket %q file %q: %v""', ',', 'cloud', '.', 'bucket', ',', 'zipFileName', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
56,            return,['return'],['KEYWORD']
57,        },['}'],['OPERATOR']
58,        // flush that to buffer so we can write it off now,"['//', 'flush', 'that', 'to', 'buffer', 'so', 'we', 'can', 'write', 'it', 'off', 'now']","['COMMENT', 'NN', 'WDT', 'TO', 'VB', 'IN', 'PRP', 'MD', 'VB', 'PRP', 'RP', 'RB']"
59,        //err = zipFile.Flush(),"['//', 'err', '=', 'zipFile.Flush()']","['COMMENT', 'NN', 'CD', 'NN']"
60,        //if err != nil {,"['//', 'if', 'err', '!=', 'nil', '{']","['COMMENT', 'IN', 'JJ', 'NNP', 'NN', '(']"
61,"        //  d.errorf(""pack: unable to flush write of zip file from bucket %q, file %q: %v"", cloud.bucket, zipFileName, err)","['//', 'd.errorf(""pack:', 'unable', 'to', 'flush', 'write', 'of', 'zip', 'file', 'from', 'bucket', '%q,', 'file', '%q:', '%v"",', 'cloud.bucket,', 'zipFileName,', 'err)']","['COMMENT', 'NN', 'JJ', 'TO', 'VB', 'NN', 'IN', 'NN', 'NN', 'IN', 'NN', 'NNP', 'NN', 'NNP', 'NNP', 'NN', 'NN', 'NN']"
62,        //  //return,"['//', 'return']","['COMMENT', 'NN']"
63,        //},"['//', '}']","['COMMENT', ')']"
64,        // now drain all that buffered zip data to the cloud storage file   ,"['//', 'now', 'drain', 'all', 'that', 'buffered', 'zip', 'data', 'to', 'the', 'cloud', 'storage', 'file']","['COMMENT', 'RB', 'VBP', 'PDT', 'DT', 'VBD', 'NN', 'NNS', 'TO', 'DT', 'JJ', 'NN', 'NN']"
65,"        log.Infof(cloud.c, ""Writing zip buffer of size %v to cloud storage file %v"", buf.Len(), fileName)   ","['log', '.', 'Infof', '(', 'cloud', '.', 'c', ',', '""Writing zip buffer of size %v to cloud storage file %v""', ',', 'buf', '.', 'Len', '(),', 'fileName', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
66,"        _, err = buf.WriteTo(storageWriter)","['_', ',', 'err', '=', 'buf', '.', 'WriteTo', '(', 'storageWriter', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
67,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
68,"            log.Errorf(cloud.c, ""Packing failed to write data to bucket %q file %q: %v"", cloud.bucket, fileName, err)   ","['log', '.', 'Errorf', '(', 'cloud', '.', 'c', ',', '""Packing failed to write data to bucket %q file %q: %v""', ',', 'cloud', '.', 'bucket', ',', 'fileName', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
69,            return          ,['return'],['KEYWORD']
70,        },['}'],['OPERATOR']
71,    },['}'],['OPERATOR']
72,    // Make sure to check the error on Close.,"['//', 'Make', 'sure', 'to', 'check', 'the', 'error', 'on', 'Close.']","['COMMENT', 'NNP', 'NN', 'TO', 'VB', 'DT', 'NN', 'IN', 'NNP']"
73,"    log.Infof(cloud.c, ""Closing zip writer"")    ","['log', '.', 'Infof', '(', 'cloud', '.', 'c', ',', '""Closing zip writer""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
74,    err = zipWriter.Close(),"['err', '=', 'zipWriter', '.', 'Close', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
75,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
76,"        log.Errorf(cloud.c, ""Packing failed to close zip file writer from bucket %q file %q : %v"", cloud.bucket, fileName, err)","['log', '.', 'Errorf', '(', 'cloud', '.', 'c', ',', '""Packing failed to close zip file writer from bucket %q file %q : %v""', ',', 'cloud', '.', 'bucket', ',', 'fileName', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
77,    },['}'],['OPERATOR']
78,    // write any leftover data,"['//', 'write', 'any', 'leftover', 'data']","['COMMENT', 'VB', 'DT', 'NN', 'NNS']"
79,    if buf.Len() > 0 {,"['if', 'buf', '.', 'Len', '()', '>', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
80,        // now drain all that buffered zip data to the cloud storage file   ,"['//', 'now', 'drain', 'all', 'that', 'buffered', 'zip', 'data', 'to', 'the', 'cloud', 'storage', 'file']","['COMMENT', 'RB', 'VBP', 'PDT', 'DT', 'VBD', 'NN', 'NNS', 'TO', 'DT', 'JJ', 'NN', 'NN']"
81,"        // log.Infof(cloud.c, ""Packing zip buffer of size %v to cloud storage file %v"", buf.Len(), fileName)    ","['//', 'log.Infof(cloud.c,', '""Packing', 'zip', 'buffer', 'of', 'size', '%v', 'to', 'cloud', 'storage', 'file', '%v"",', 'buf.Len(),', 'fileName)']","['COMMENT', 'NN', 'VBG', 'NN', 'NN', 'IN', 'NN', 'NN', 'TO', 'VB', 'NN', 'NN', 'NNP', 'NN', 'NN']"
82,"        _, err := buf.WriteTo(storageWriter)","['_', ',', 'err', ':=', 'buf', '.', 'WriteTo', '(', 'storageWriter', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
83,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
84,"            log.Errorf(cloud.c, ""Packing failed to write data to bucket %q file %q: %v"", cloud.bucket, fileName, err)               ","['log', '.', 'Errorf', '(', 'cloud', '.', 'c', ',', '""Packing failed to write data to bucket %q file %q: %v""', ',', 'cloud', '.', 'bucket', ',', 'fileName', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
85,        },['}'],['OPERATOR']
86,    },['}'],['OPERATOR']
87,    // close up final write file,"['//', 'close', 'up', 'final', 'write', 'file']","['COMMENT', 'VB', 'RP', 'JJ', 'NN', 'NN']"
88,"    //log.Infof(cloud.c, ""Closing cloud storage file %v"", fileName) ","['//', 'log.Infof(cloud.c,', '""Closing', 'cloud', 'storage', 'file', '%v"",', 'fileName)']","['COMMENT', 'NN', 'VBG', 'JJ', 'NN', 'NN', 'NNP', 'NN']"
89,    if err := storageWriter.Close(); err != nil {,"['if', 'err', ':=', 'storageWriter', '.', 'Close', '();', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
90,"        log.Errorf(cloud.c, ""Packing failed to close bucket %q file %q: %v"", cloud.bucket, fileName, err)","['log', '.', 'Errorf', '(', 'cloud', '.', 'c', ',', '""Packing failed to close bucket %q file %q: %v""', ',', 'cloud', '.', 'bucket', ',', 'fileName', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
91,        return,['return'],['KEYWORD']
92,    },['}'],['OPERATOR']
93,    // success!,"['//', 'success!']","['COMMENT', 'NN']"
94,"    log.Infof(cloud.c, ""Packed files to new cloud storage file %v successful!"", fileName)   ","['log', '.', 'Infof', '(', 'cloud', '.', 'c', ',', '""Packed files to new cloud storage file %v successful!""', ',', 'fileName', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
95,},['}'],['OPERATOR']
