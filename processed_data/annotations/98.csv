,text,token,annotation
0,"I am trying to communicate with a USB device (cottonwood RFID reader) with golang under Linux.

Here is where I am so far:


My computer sees the hardware: I see the device in my /dev/bus/usb
The hardware works fine: the demo software they provide works seemlessly (under windows, they don't have a Linux version)
It seems I can open the endpoints
It seems I can write to the device


Now, when I try to read from thehardware, I always get a timeout. I'm a total beginner on hardware, any help would be greatly appreciated, maybe the issue is actually very basic.

My very simple codebase is here: 

","['I', 'am', 'trying', 'to', 'communicate', 'with', 'a', 'USB', 'device', '(cottonwood', 'RFID', 'reader)', 'with', 'golang', 'under', 'Linux.', 'Here', 'is', 'where', 'I', 'am', 'so', 'far:', 'My', 'computer', 'sees', 'the', 'hardware:', 'I', 'see', 'the', 'device', 'in', 'my', '/dev/bus/usb', 'The', 'hardware', 'works', 'fine:', 'the', 'demo', 'software', 'they', 'provide', 'works', 'seemlessly', '(under', 'windows,', 'they', ""don't"", 'have', 'a', 'Linux', 'version)', 'It', 'seems', 'I', 'can', 'open', 'the', 'endpoints', 'It', 'seems', 'I', 'can', 'write', 'to', 'the', 'device', 'Now,', 'when', 'I', 'try', 'to', 'read', 'from', 'thehardware,', 'I', 'always', 'get', 'a', 'timeout.', ""I'm"", 'a', 'total', 'beginner', 'on', 'hardware,', 'any', 'help', 'would', 'be', 'greatly', 'appreciated,', 'maybe', 'the', 'issue', 'is', 'actually', 'very', 'basic.', 'My', 'very', 'simple', 'codebase', 'is', 'here:']","['PRP', 'VBP', 'VBG', 'TO', 'VB', 'IN', 'DT', 'NNP', 'NN', 'NN', 'NNP', 'NN', 'IN', 'NN', 'IN', 'NNP', 'RB', 'VBZ', 'WRB', 'PRP', 'VBP', 'RB', 'JJ', 'NNP', 'NN', 'VBZ', 'DT', 'NN', 'PRP', 'VBP', 'DT', 'NN', 'IN', 'PRP$', 'NN', 'DT', 'NN', 'VBZ', 'VBP', 'DT', 'NN', 'NN', 'PRP', 'VBP', 'VBZ', 'RB', 'VBN', 'NN', 'PRP', 'VBP', 'VBP', 'DT', 'NNP', 'NN', 'PRP', 'VBZ', 'PRP', 'MD', 'VB', 'DT', 'NNS', 'PRP', 'VBZ', 'PRP', 'MD', 'VB', 'TO', 'DT', 'NN', 'NNP', 'WRB', 'PRP', 'VBP', 'TO', 'VB', 'IN', 'NN', 'PRP', 'RB', 'VBP', 'DT', 'NN', 'NNP', 'DT', 'JJ', 'NN', 'IN', 'NN', 'DT', 'NN', 'MD', 'VB', 'RB', 'JJ', 'RB', 'DT', 'NN', 'VBZ', 'RB', 'RB', 'JJ', 'NNP', 'RB', 'JJ', 'NN', 'VBZ', 'JJ']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
4,"    ""log""","['""log""']",['STRING_LITERAL']
5,"    ""strconv""","['""strconv""']",['STRING_LITERAL']
6,"    ""github.com/jpoirier/gousb/usb""","['""github.com/jpoirier/gousb/usb""']",['STRING_LITERAL']
7,),[')'],['PUNCTUATION']
8,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
9,    // Only one context should be needed for an application.  It should always be closed.,"['//', 'Only', 'one', 'context', 'should', 'be', 'needed', 'for', 'an', 'application.', 'It', 'should', 'always', 'be', 'closed.']","['COMMENT', 'RB', 'CD', 'NN', 'MD', 'VB', 'VBN', 'IN', 'DT', 'NN', 'PRP', 'MD', 'RB', 'VB', 'JJ']"
10,    ctx := usb.NewContext(),"['ctx', ':=', 'usb.NewContext()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
11,    defer func() {,"['defer', 'func', '()', '{']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
12,        errCl := ctx.Close(),"['errCl', ':=', 'ctx.Close()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
13,        if errCl != nil {,"['if', 'errCl', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
14,            log.Fatal(errCl),['log.Fatal(errCl)'],['FUNCTION_CALL']
15,        },['}'],['PUNCTUATION']
16,    }(),['}()'],['PUNCTUATION']
17,    ctx.Debug(1),['ctx.Debug(1)'],['FUNCTION_CALL']
18,    // ListDevices is used to find the devices to open.,"['//', 'ListDevices', 'is', 'used', 'to', 'find', 'the', 'devices', 'to', 'open.']","['COMMENT', 'NNS', 'VBZ', 'VBN', 'TO', 'VB', 'DT', 'NNS', 'TO', 'VB']"
19,"    devs, err := ctx.ListDevices(","['devs', ',', 'err', ':=', 'ctx', '.', 'ListDevices', '(']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
20,        func(desc *usb.Descriptor) bool {,"['func', '(', 'desc', '*', 'usb', '.', 'Descriptor', ')', 'bool', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
21,            if desc.Vendor == GetCottonwoodVendor() && desc.Product == GetCottonwoodProduct() {,"['if', 'desc', '.', 'Vendor', '==', 'GetCottonwoodVendor', '()', '&&', 'desc', '.', 'Product', '==', 'GetCottonwoodProduct', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
22,                return true,"['return', 'true']","['KEYWORD', 'BOOLEAN_LITERAL']"
23,            },['}'],['PUNCTUATION']
24,            return false,"['return', 'false']","['KEYWORD', 'BOOLEAN_LITERAL']"
25,        }),['})'],['PUNCTUATION']
26,    // All Devices returned from ListDevices must be closed.,"['//', 'All', 'Devices', 'returned', 'from', 'ListDevices', 'must', 'be', 'closed.']","['COMMENT', 'DT', 'NNS', 'VBN', 'IN', 'NNS', 'MD', 'VB', 'NN']"
27,    defer func() {,"['defer', 'func', '()', '{']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
28,"        for _, dev := range devs {","['for', '_', ',', 'dev', ':=', 'range', 'devs', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
29,            errCl := dev.Close(),"['errCl', ':=', 'dev.Close()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
30,            if errCl != nil {,"['if', 'errCl', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
31,                log.Fatal(errCl),['log.Fatal(errCl)'],['FUNCTION_CALL']
32,            },['}'],['PUNCTUATION']
33,        },['}'],['PUNCTUATION']
34,    }(),['}()'],['PUNCTUATION']
35,"    // ListDevices can occasionally  fail, so be sure to check its return value.","['//', 'ListDevices', 'can', 'occasionally', 'fail,', 'so', 'be', 'sure', 'to', 'check', 'its', 'return', 'value.']","['COMMENT', 'NNS', 'MD', 'RB', 'VB', 'RB', 'VB', 'JJ', 'TO', 'VB', 'PRP$', 'NN', 'NN']"
36,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
37,"        log.Fatalf(""list: %s"", err)","['log.Fatalf(""list: %s"", err)']",['FUNCTION_CALL']
38,    },['}'],['PUNCTUATION']
39,"for _, dev := range devs {","['for', '_', ',', 'dev', ':=', 'range', 'devs', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
40,"    // Once the device has been selected from ListDevices, it is opened","['//', 'Once', 'the', 'device', 'has', 'been', 'selected', 'from', 'ListDevices,', 'it', 'is', 'opened']","['COMMENT', 'RB', 'DT', 'NN', 'VBZ', 'VBN', 'VBN', 'IN', 'NNP', 'PRP', 'VBZ', 'VBN']"
41,    // and can be interacted with.,"['//', 'and', 'can', 'be', 'interacted', 'with.']","['COMMENT', 'CC', 'MD', 'VB', 'VBN', 'NN']"
42,    // Open up two ep for read and write,"['//', 'Open', 'up', 'two', 'ep', 'for', 'read', 'and', 'write']","['COMMENT', 'VB', 'RP', 'CD', 'NN', 'IN', 'NN', 'CC', 'VB']"
43,"    epBulkWrite, err := dev.OpenEndpoint(1, 0, 0, 2|uint8(usb.ENDPOINT_DIR_OUT))","['epBulkWrite', ',', 'err', ':=', 'dev.OpenEndpoint(1, 0, 0, 2|uint8(usb.ENDPOINT_DIR_OUT))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
44,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
45,"        log.Fatalf(""OpenEndpoint Write error for %v: %v"", dev.Address, err)","['log.Fatalf(""OpenEndpoint Write error for %v: %v"", dev.Address, err)']",['FUNCTION_CALL']
46,    },['}'],['PUNCTUATION']
47,    // Poll Firmware/Hardware Version ID,"['//', 'Poll', 'Firmware/Hardware', 'Version', 'ID']","['COMMENT', 'NNP', 'NNP', 'NNP', 'NNP']"
48,    // AntennaOn,"['//', 'AntennaOn']","['COMMENT', 'NN']"
49,"    // outAntennaPowerOnCmd := []byte{0x18, 0x03, 0xFF}","['//', 'outAntennaPowerOnCmd', ':=', '[]byte{0x18,', '0x03,', '0xFF}']","['COMMENT', 'JJ', 'NNP', 'NNP', 'CD', 'CD']"
50,"    outFirmIdCmd := []byte{0x10, 0x03, 0x00}","['outFirmIdCmd', ':=', '[]', 'byte', '{', '0x1', '0', ',', '0', 'x03', ',', '0', 'x00', '}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'HEX_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
51,"    // outHardIdCmd := []byte{0x10, 0x03, 0x01}","['//', 'outHardIdCmd', ':=', '[]byte{0x10,', '0x03,', '0x01}']","['COMMENT', 'JJ', 'NNP', 'NNP', 'CD', 'CD']"
52,"    i, err := epBulkWrite.Write(outFirmIdCmd)","['i', ',', 'err', ':=', 'epBulkWrite.Write(outFirmIdCmd)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
53,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
54,"        log.Fatalf(""Cannot write command: %v\n"", err)","['log.Fatalf(""Cannot write command: %v\\n"", err)']",['FUNCTION_CALL']
55,    },['}'],['PUNCTUATION']
56,"    log.Printf(""%v bytes sent"", i)","['log.Printf(""%v bytes sent"", i)']",['FUNCTION_CALL']
57,    time.Sleep(1 * time.Second),['time.Sleep(1 * time.Second)'],['FUNCTION_CALL']
58,"    epBulkRead, err := dev.OpenEndpoint(1, 0, 0, 1|uint8(usb.ENDPOINT_DIR_IN))","['epBulkRead', ',', 'err', ':=', 'dev.OpenEndpoint(1, 0, 0, 1|uint8(usb.ENDPOINT_DIR_IN))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
59,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
60,"        log.Fatalf(""OpenEndpoint Read error for %v: %v"", dev.Address, err)","['log.Fatalf(""OpenEndpoint Read error for %v: %v"", dev.Address, err)']",['FUNCTION_CALL']
61,    },['}'],['PUNCTUATION']
62,"    readBuffer := make([]byte, 64)","['readBuffer', ':=', 'make', '([]', 'byte', ',', '64', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
63,"    n, errRead := epBulkRead.Read(readBuffer)","['n', ',', 'errRead', ':=', 'epBulkRead.Read(readBuffer)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
64,"    log.Printf(""read %d bytes: %v"", n, readBuffer)","['log.Printf(""read %d bytes: %v"", n, readBuffer)']",['FUNCTION_CALL']
65,    if errRead != nil {,"['if', 'errRead', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
66,"        log.Printf(""error reading: %v"", errRead)","['log.Printf(""error reading: %v"", errRead)']",['FUNCTION_CALL']
67,        break,['break'],['KEYWORD']
68,    },['}'],['PUNCTUATION']
69,},['}'],['PUNCTUATION']
70,// GetCottonwoodVendor returns the vendor ID of cottonwood UHF reader,"['//', 'GetCottonwoodVendor', 'returns', 'the', 'vendor', 'ID', 'of', 'cottonwood', 'UHF', 'reader']","['COMMENT', 'NNP', 'VBZ', 'DT', 'NN', 'NNP', 'IN', 'NN', 'NNP', 'NN']"
71,func GetCottonwoodVendor() usb.ID {,"['func', 'GetCottonwoodVendor', '()', 'usb', '.', 'ID', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
72,"    value, err := strconv.ParseUint(""1325"", 16, 16)","['value', ',', 'err', ':=', 'strconv.ParseUint(""1325"", 16, 16)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
73,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
74,        log.Fatal(err),['log.Fatal(err)'],['FUNCTION_CALL']
75,    },['}'],['PUNCTUATION']
76,    return usb.ID(value),"['return', 'usb.ID(value)']","['KEYWORD', 'FUNCTION_CALL']"
77,},['}'],['PUNCTUATION']
78,// GetCottonwoodProduct returns the product ID of cottonwood UHF reader,"['//', 'GetCottonwoodProduct', 'returns', 'the', 'product', 'ID', 'of', 'cottonwood', 'UHF', 'reader']","['COMMENT', 'NNP', 'VBZ', 'DT', 'NN', 'NNP', 'IN', 'NN', 'NNP', 'NN']"
79,func GetCottonwoodProduct() usb.ID {,"['func', 'GetCottonwoodProduct', '()', 'usb', '.', 'ID', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
80,"    value, err := strconv.ParseUint(""c029"", 16, 16)","['value', ',', 'err', ':=', 'strconv.ParseUint(""c029"", 16, 16)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
81,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
82,        log.Fatal(err),['log.Fatal(err)'],['FUNCTION_CALL']
83,    },['}'],['PUNCTUATION']
84,    return usb.ID(value),"['return', 'usb.ID(value)']","['KEYWORD', 'FUNCTION_CALL']"
85,},['}'],['PUNCTUATION']
86,"

First time I launch it, I get:

","['First', 'time', 'I', 'launch', 'it,', 'I', 'get:']","['JJ', 'NN', 'PRP', 'VBP', 'JJ', 'PRP', 'VBP']"
87,2016/12/14 19:19:18 3 bytes sent,"['2016/12/14', '19', ':', '19', ':', '18', '3', 'bytes', 'sent']","['DIRECTORY', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER']"
88,2016/12/14 19:19:20 read 0 bytes: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0],"['2016/12/14', '19', ':', '19', ':', '20', 'read', '0', 'bytes', ':', '[', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ']']","['DIRECTORY', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'IDENTIFIER', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'PUNCTUATION']"
89,2016/12/14 19:19:20 error reading: libusb: timeout [code -7],"['2016/12/14', '19', ':', '19', ':', '20', 'error', 'reading', ':', 'libusb', ':', 'timeout', '[', 'code', '-', '7', ']']","['DIRECTORY', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
90,"

Second time and all after:

","['Second', 'time', 'and', 'all', 'after:']","['JJ', 'NN', 'CC', 'DT', 'NN']"
91,2016/12/14 19:21:21 Cannot write command: libusb: timeout [code -7],"['2016/12/14', '19', ':', '21', ':', '21', 'Cannot', 'write', 'command', ':', 'libusb', ':', 'timeout', '[', 'code', '-', '7', ']']","['DIRECTORY', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
92,"

I tried with another library using hidraw, but it seems not to work either (probably detach usb device issue).
","['I', 'tried', 'with', 'another', 'library', 'using', 'hidraw,', 'but', 'it', 'seems', 'not', 'to', 'work', 'either', '(probably', 'detach', 'usb', 'device', 'issue).']","['PRP', 'VBD', 'IN', 'DT', 'NN', 'VBG', 'NN', 'CC', 'PRP', 'VBZ', 'RB', 'TO', 'VB', 'RB', 'RB', 'NN', 'JJ', 'NN', 'NN']"
