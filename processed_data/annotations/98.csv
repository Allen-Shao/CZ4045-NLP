,text,token,annotation
0,"I've just started learning go, and have been working through the tour. The last exercise is to edit a web crawler to crawl in parallel and without repeats.

Here is the link to the exercise: http://tour.golang.org/#70

Here is the code. I only changed the crawl and the main function. So I'll just post those to keep it neat.

","[""I've"", 'just', 'started', 'learning', 'go,', 'and', 'have', 'been', 'working', 'through', 'the', 'tour.', 'The', 'last', 'exercise', 'is', 'to', 'edit', 'a', 'web', 'crawler', 'to', 'crawl', 'in', 'parallel', 'and', 'without', 'repeats.', 'Here', 'is', 'the', 'link', 'to', 'the', 'exercise:', 'http://tour.golang.org/#70', 'Here', 'is', 'the', 'code.', 'I', 'only', 'changed', 'the', 'crawl', 'and', 'the', 'main', 'function.', 'So', ""I'll"", 'just', 'post', 'those', 'to', 'keep', 'it', 'neat.']","['NNP', 'RB', 'VBD', 'VBG', 'NN', 'CC', 'VBP', 'VBN', 'VBG', 'IN', 'DT', 'NN', 'DT', 'JJ', 'NN', 'VBZ', 'TO', 'VB', 'DT', 'NN', 'NN', 'TO', 'VB', 'IN', 'NN', 'CC', 'IN', 'NN', 'RB', 'VBZ', 'DT', 'NN', 'TO', 'DT', 'NN', 'NN', 'RB', 'VBZ', 'DT', 'NN', 'PRP', 'RB', 'VBD', 'DT', 'NN', 'CC', 'DT', 'JJ', 'NN', 'NNP', 'NNP', 'RB', 'RB', 'DT', 'TO', 'VB', 'PRP', 'JJ']"
1,    // Crawl uses fetcher to recursively crawl,"['//', 'Crawl', 'uses', 'fetcher', 'to', 'recursively', 'crawl']","['COMMENT', 'NNP', 'VBZ', 'RB', 'TO', 'RB', 'VB']"
2,"    // pages starting with url, to a maximum of depth.","['//', 'pages', 'starting', 'with', 'url,', 'to', 'a', 'maximum', 'of', 'depth.']","['COMMENT', 'NNS', 'VBG', 'IN', 'JJ', 'TO', 'DT', 'NN', 'IN', 'NN']"
3,    var used = make(map[string]bool),"['var', 'used', '=', 'make', '(', 'map', '[', 'string', ']', 'bool', ')']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
4,    var urlchan = make(chan string),"['var', 'urlchan', '=', 'make', '(', 'chan', 'string', ')']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
5,"    func Crawl(url string, depth int, fetcher Fetcher) {","['func', 'Crawl', '(', 'url', 'string', ',', 'depth', 'int', ',', 'fetcher', 'Fetcher', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
6,        // TODO: Fetch URLs in parallel.,"['//', 'TODO:', 'Fetch', 'URLs', 'in', 'parallel.']","['COMMENT', 'NNP', 'NNP', 'NNP', 'IN', 'NN']"
7,        // Done: Don't fetch the same URL twice.,"['//', 'Done:', ""Don't"", 'fetch', 'the', 'same', 'URL', 'twice.']","['COMMENT', 'NNP', 'NNP', 'VB', 'DT', 'JJ', 'NNP', 'NN']"
8,        // This implementation doesn't do either:,"['//', 'This', 'implementation', ""doesn't"", 'do', 'either:']","['COMMENT', 'DT', 'NN', 'NN', 'VBP', 'VB']"
9,        done := make(chan bool),"['done', ':=', 'make', '(', 'chan', 'bool', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
10,        if depth <= 0 {,"['if', 'depth', '<=', '0', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION']"
11,            return,['return'],['KEYWORD']
12,        },['}'],['PUNCTUATION']
13,"        body, urls, err := fetcher.Fetch(url)","['body', ',', 'urls', ',', 'err', ':=', 'fetcher.Fetch(url)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
14,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
15,            fmt.Println(err),['fmt.Println(err)'],['FUNCTION_CALL']
16,            return,['return'],['KEYWORD']
17,        },['}'],['PUNCTUATION']
18,"        fmt.Printf(""\nfound: %s %q\n\n"", url, body)","['fmt.Printf(""\\nfound: %s %q\\n\\n"", url, body)']",['FUNCTION_CALL']
19,        go func() {,"['go', 'func', '()', '{']","['KEYWORD', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
20,"            for _, i := range urls {","['for', '_', ',', 'i', ':=', 'range', 'urls', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
21,                urlchan <- i,"['urlchan', '<-', 'i']","['IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
22,            },['}'],['PUNCTUATION']
23,            done <- true,"['done', '<-', 'true']","['IDENTIFIER', 'CHANNEL_OPERATOR', 'BOOLEAN_LITERAL']"
24,        }(),['}()'],['PUNCTUATION']
25,        for u := range urlchan {,"['for', 'u', ':=', 'range', 'urlchan', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
26,            if used[u] == false {,"['if', 'used', '[', 'u', ']', '==', 'false', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'RELATION_OPERATOR', 'BOOLEAN_LITERAL', 'PUNCTUATION']"
27,                used[u] = true,"['used', '[', 'u', ']', '=', 'true']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
28,"                go Crawl(u, depth-1, fetcher)","['go', 'Crawl', '(', 'u', ',', 'depth', '-', '1', ',', 'fetcher', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
29,            },['}'],['PUNCTUATION']
30,            if <-done == true {,"['if', '<-', 'done', '==', 'true', '{']","['KEYWORD', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'RELATION_OPERATOR', 'BOOLEAN_LITERAL', 'PUNCTUATION']"
31,                break,['break'],['KEYWORD']
32,            },['}'],['PUNCTUATION']
33,        },['}'],['PUNCTUATION']
34,        return,['return'],['KEYWORD']
35,    },['}'],['PUNCTUATION']
36,    func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
37,"        used[""http://golang.org/""] = true","['used', '[', '""http://golang.org/""', ']', '=', 'true']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
38,"        Crawl(""http://golang.org/"", 4, fetcher)","['Crawl', '(', '""http://golang.org/""', ',', '4', ',', 'fetcher', ')']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
39,    },['}'],['PUNCTUATION']
40,"

The problem is that when I run the program the crawler stops after printing

","['The', 'problem', 'is', 'that', 'when', 'I', 'run', 'the', 'program', 'the', 'crawler', 'stops', 'after', 'printing']","['DT', 'NN', 'VBZ', 'IN', 'WRB', 'PRP', 'VBP', 'DT', 'NN', 'DT', 'NN', 'NN', 'IN', 'VBG']"
41,    not found: http://golang.org/cmd/,"['not', 'found', ':', 'http', '://', 'go', 'lang', '.', 'org/cmd/']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'DIRECTORY']"
42,"

This only happens when I try to make the program run in parallel. If I have it run linearly then all the urls are found correctly.

Note: If I am not doing this right (parallelism I mean) then I apologise.
","['This', 'only', 'happens', 'when', 'I', 'try', 'to', 'make', 'the', 'program', 'run', 'in', 'parallel.', 'If', 'I', 'have', 'it', 'run', 'linearly', 'then', 'all', 'the', 'urls', 'are', 'found', 'correctly.', 'Note:', 'If', 'I', 'am', 'not', 'doing', 'this', 'right', '(parallelism', 'I', 'mean)', 'then', 'I', 'apologise.']","['DT', 'JJ', 'VBZ', 'WRB', 'PRP', 'VBP', 'TO', 'VB', 'DT', 'NN', 'NN', 'IN', 'NN', 'IN', 'PRP', 'VBP', 'PRP', 'VB', 'RB', 'RB', 'PDT', 'DT', 'NNS', 'VBP', 'VBN', 'RB', 'NNP', 'IN', 'PRP', 'VBP', 'RB', 'VBG', 'DT', 'JJ', 'NN', 'PRP', 'VBP', 'RB', 'PRP', 'VBP']"
