,text,token,annotation
0,"I'm trying to detect sending failures by inspecting the error returned by golang TCPConn.Write, but it's nil. I also tried using TCPConn.SetWriteDeadline without success.

That's how things happen:


the server starts
a client connects
the server sends a message and the client receives it
the client shuts down
the server sends one more message: no error
the server sends the third message: only now the error appears


Question: why only the second message to a non-existing client results in an error? How should the case be handled properly?

The code follows:

","[""I'm"", 'trying', 'to', 'detect', 'sending', 'failures', 'by', 'inspecting', 'the', 'error', 'returned', 'by', 'golang', 'TCPConn.Write,', 'but', ""it's"", 'nil.', 'I', 'also', 'tried', 'using', 'TCPConn.SetWriteDeadline', 'without', 'success.', ""That's"", 'how', 'things', 'happen:', 'the', 'server', 'starts', 'a', 'client', 'connects', 'the', 'server', 'sends', 'a', 'message', 'and', 'the', 'client', 'receives', 'it', 'the', 'client', 'shuts', 'down', 'the', 'server', 'sends', 'one', 'more', 'message:', 'no', 'error', 'the', 'server', 'sends', 'the', 'third', 'message:', 'only', 'now', 'the', 'error', 'appears', 'Question:', 'why', 'only', 'the', 'second', 'message', 'to', 'a', 'non-existing', 'client', 'results', 'in', 'an', 'error?', 'How', 'should', 'the', 'case', 'be', 'handled', 'properly?', 'The', 'code', 'follows:']","['NNP', 'VBG', 'TO', 'VB', 'VBG', 'NNS', 'IN', 'VBG', 'DT', 'NN', 'VBN', 'IN', 'NN', 'NNP', 'CC', 'JJ', 'NN', 'PRP', 'RB', 'VBD', 'VBG', 'NNP', 'IN', 'NN', 'NNP', 'WRB', 'NNS', 'VBP', 'DT', 'NN', 'VBZ', 'DT', 'NN', 'VBZ', 'DT', 'NN', 'VBZ', 'DT', 'NN', 'CC', 'DT', 'NN', 'VBZ', 'PRP', 'DT', 'NN', 'VBZ', 'RP', 'DT', 'NN', 'VBZ', 'CD', 'JJR', 'NN', 'DT', 'NN', 'DT', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'RB', 'RB', 'DT', 'NN', 'VBZ', 'NNP', 'WRB', 'RB', 'DT', 'JJ', 'NN', 'TO', 'DT', 'JJ', 'NN', 'NNS', 'IN', 'DT', 'JJ', 'WRB', 'MD', 'DT', 'NN', 'VB', 'VBN', 'IN', 'DT', 'NN', 'NN']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""net""","['""net""']",['STRING_LITERAL']
4,"    ""os""","['""os""']",['STRING_LITERAL']
5,"    ""bufio""","['""bufio""']",['STRING_LITERAL']
6,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
7,"    ""time""","['""time""']",['STRING_LITERAL']
8,),[')'],['PUNCTUATION']
9,"func AcceptConnections(listener net.Listener, console <- chan string) {","['func', 'AcceptConnections', '(', 'listener', 'net', '.', 'Listener', ',', 'console', '<-', 'chan', 'string', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
10,"    msg := """"","['msg', ':=', '""""']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL']"
11,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
12,"        conn, err := listener.Accept()","['conn', ',', 'err', ':=', 'listener.Accept()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
13,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
14,            panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
15,        },['}'],['PUNCTUATION']
16,"        fmt.Printf(""client connected\n"")","['fmt.Printf(""client connected\\n"")']",['FUNCTION_CALL']
17,        for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
18,"            if msg == """" {","['if', 'msg', '==', '""""', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'STRING_LITERAL', 'PUNCTUATION']"
19,                msg = <- console,"['msg', '=', '<-', 'console']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
20,"                fmt.Printf(""read from console: %s"", msg)","['fmt.Printf(""read from console: %s"", msg)']",['FUNCTION_CALL']
21,            },['}'],['PUNCTUATION']
22,            err = conn.SetWriteDeadline(time.Now().Add(time.Second)),"['err', '=', 'conn.SetWriteDeadline(time.Now().Add(time.Second))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
23,            if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
24,"                fmt.Printf(""SetWriteDeadline failed: %v\n"", err)","['fmt.Printf(""SetWriteDeadline failed: %v\\n"", err)']",['FUNCTION_CALL']
25,            },['}'],['PUNCTUATION']
26,"            _, err = conn.Write([]byte(msg))","['_', ',', 'err', '=', 'conn.Write([]byte(msg))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
27,            if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
28,                // expecting an error after sending a message,"['//', 'expecting', 'an', 'error', 'after', 'sending', 'a', 'message']","['COMMENT', 'VBG', 'DT', 'NN', 'IN', 'VBG', 'DT', 'NN']"
29,                // to a non-existing client endpoint,"['//', 'to', 'a', 'non-existing', 'client', 'endpoint']","['COMMENT', 'TO', 'DT', 'JJ', 'NN', 'NN']"
30,"                fmt.Printf(""failed sending a message to network: %v\n"", err)","['fmt.Printf(""failed sending a message to network: %v\\n"", err)']",['FUNCTION_CALL']
31,                break,['break'],['KEYWORD']
32,            } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
33,"                fmt.Printf(""msg sent: %s"", msg)","['fmt.Printf(""msg sent: %s"", msg)']",['FUNCTION_CALL']
34,"                msg = """"","['msg', '=', '""""']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL']"
35,            },['}'],['PUNCTUATION']
36,        },['}'],['PUNCTUATION']
37,    },['}'],['PUNCTUATION']
38,},['}'],['PUNCTUATION']
39,func ReadConsole(network chan <- string) {,"['func', 'ReadConsole', '(', 'network', 'chan', '<-', 'string', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
40,    console := bufio.NewReader(os.Stdin),"['console', ':=', 'bufio.NewReader(os.Stdin)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
41,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
42,"        line, err := console.ReadString('\n')","['line', ',', 'err', ':=', ""console.ReadString('\\n')""]","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
43,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
44,            panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
45,        } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
46,            network <- line,"['network', '<-', 'line']","['IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
47,        },['}'],['PUNCTUATION']
48,    },['}'],['PUNCTUATION']
49,},['}'],['PUNCTUATION']
50,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
51,"    listener, err := net.Listen(""tcp"", ""localhost:6666"")","['listener', ',', 'err', ':=', 'net.Listen(""tcp"", ""localhost:6666"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
52,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
53,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
54,    },['}'],['PUNCTUATION']
55,"    println(""listening on "" + listener.Addr().String())","['println', '(', '""listening on ""', '+', 'listener.Addr().String())']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'FUNCTION_CALL']"
56,    consoleToNetwork := make(chan string),"['consoleToNetwork', ':=', 'make', '(', 'chan', 'string', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
57,"    go AcceptConnections(listener, consoleToNetwork)","['go', 'AcceptConnections', '(', 'listener', ',', 'consoleToNetwork', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
58,    ReadConsole(consoleToNetwork),"['ReadConsole', '(', 'consoleToNetwork', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
59,},['}'],['PUNCTUATION']
60,"

The server console looks like this:

","['The', 'server', 'console', 'looks', 'like', 'this:']","['DT', 'NN', 'JJ', 'NNS', 'IN', 'NN']"
61,listening on 127.0.0.1:6666,"['listening', 'on', '127', '.', '0', '.', '0', '.', '1', ':', '6666']","['IDENTIFIER', 'IDENTIFIER', 'DECIMAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL']"
62,client connected,"['client', 'connected']","['IDENTIFIER', 'IDENTIFIER']"
63,hi there!,"['hi', 'there', '!']","['IDENTIFIER', 'IDENTIFIER', 'LOGICAL_OPERATOR']"
64,read from console: hi there!,"['read', 'from', 'console', ':', 'hi', 'there', '!']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'LOGICAL_OPERATOR']"
65,msg sent: hi there!,"['msg', 'sent', ':', 'hi', 'there', '!']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'LOGICAL_OPERATOR']"
66,this one should fail,"['this', 'one', 'should', 'fail']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
67,read from console: this one should fail,"['read', 'from', 'console', ':', 'this', 'one', 'should', 'fail']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
68,msg sent: this one should fail,"['msg', 'sent', ':', 'this', 'one', 'should', 'fail']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
69,this one actually fails,"['this', 'one', 'actually', 'fails']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
70,read from console: this one actually fails,"['read', 'from', 'console', ':', 'this', 'one', 'actually', 'fails']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
71,failed sending a message to network: write tcp 127.0.0.1:51194: broken pipe,"['failed', 'sending', 'a', 'message', 'to', 'network', ':', 'write', 'tcp', '127', '.', '0', '.', '0', '.', '1', ':', '51194', ':', 'broken', 'pipe']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'DECIMAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER']"
72,"

The client looks like this:

","['The', 'client', 'looks', 'like', 'this:']","['DT', 'NN', 'VBZ', 'IN', 'NN']"
73,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
74,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
75,"    ""net""","['""net""']",['STRING_LITERAL']
76,"    ""os""","['""os""']",['STRING_LITERAL']
77,"    ""io""","['""io""']",['STRING_LITERAL']
78,"    //""bufio""","['//', '""bufio""']","['COMMENT', 'NN']"
79,"    //""fmt""","['//', '""fmt""']","['COMMENT', 'NN']"
80,),[')'],['PUNCTUATION']
81,"func cp(dst io.Writer, src io.Reader, errc chan<- error) {","['func', 'cp', '(', 'dst', 'io', '.', 'Writer', ',', 'src', 'io', '.', 'Reader', ',', 'errc', 'chan', '<-', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
82,    // -reads from src and writes to dst,"['//', '-reads', 'from', 'src', 'and', 'writes', 'to', 'dst']","['COMMENT', 'NNS', 'IN', 'NN', 'CC', 'VBZ', 'TO', 'VB']"
83,    // -blocks until EOF,"['//', '-blocks', 'until', 'EOF']","['COMMENT', 'NNS', 'IN', 'NNP']"
84,    // -EOF is not an error,"['//', '-EOF', 'is', 'not', 'an', 'error']","['COMMENT', 'NN', 'VBZ', 'RB', 'DT', 'NN']"
85,"    _, err :=  io.Copy(dst, src)","['_', ',', 'err', ':=', 'io.Copy(dst, src)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
86,    // push err to the channel when io.Copy returns,"['//', 'push', 'err', 'to', 'the', 'channel', 'when', 'io.Copy', 'returns']","['COMMENT', 'NN', 'NN', 'TO', 'DT', 'NN', 'WRB', 'NN', 'NNS']"
87,    errc <- err,"['errc', '<-', 'err']","['IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
88,},['}'],['PUNCTUATION']
89,func StartCommunication(conn net.Conn) {,"['func', 'StartCommunication', '(', 'conn', 'net', '.', 'Conn', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
90,    //create a channel for errors,"['//', 'create', 'a', 'channel', 'for', 'errors']","['COMMENT', 'VB', 'DT', 'NN', 'IN', 'NNS']"
91,    errc := make(chan error),"['errc', ':=', 'make', '(', 'chan', 'error', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
92,    //read connection and print to console,"['//', 'read', 'connection', 'and', 'print', 'to', 'console']","['COMMENT', 'JJ', 'NN', 'CC', 'NN', 'TO', 'VB']"
93,"    go cp(os.Stdout, conn, errc)","['go', 'cp', '(', 'os', '.', 'Stdout', ',', 'conn', ',', 'errc', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
94,    //read user input and write to connection,"['//', 'read', 'user', 'input', 'and', 'write', 'to', 'connection']","['COMMENT', 'VB', 'NN', 'NN', 'CC', 'NN', 'TO', 'NN']"
95,"    go cp(conn, os.Stdin, errc)","['go', 'cp', '(', 'conn', ',', 'os', '.', 'Stdin', ',', 'errc', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
96,    //wait until nil or an error arrives,"['//', 'wait', 'until', 'nil', 'or', 'an', 'error', 'arrives']","['COMMENT', 'NN', 'IN', 'FW', 'CC', 'DT', 'NN', 'VBZ']"
97,    err := <- errc,"['err', ':=', '<-', 'errc']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
98,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
99,"        println(""cp error: "", err.Error())","['println', '(', '""cp error: ""', ',', 'err.Error())']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'FUNCTION_CALL']"
100,    },['}'],['PUNCTUATION']
101,},['}'],['PUNCTUATION']
102,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
103,"    servAddr := ""localhost:6666""","['servAddr', ':=', '""localhost:6666""']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL']"
104,"    tcpAddr, err := net.ResolveTCPAddr(""tcp"", servAddr)","['tcpAddr', ',', 'err', ':=', 'net.ResolveTCPAddr(""tcp"", servAddr)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
105,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
106,"        println(""ResolveTCPAddr failed:"", err.Error())","['println', '(', '""ResolveTCPAddr failed:""', ',', 'err.Error())']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'FUNCTION_CALL']"
107,        os.Exit(1),['os.Exit(1)'],['FUNCTION_CALL']
108,    },['}'],['PUNCTUATION']
109,"    conn, err := net.DialTCP(""tcp"", nil, tcpAddr)","['conn', ',', 'err', ':=', 'net.DialTCP(""tcp"", nil, tcpAddr)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
110,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
111,"        println(""net.DialTCP failed:"", err.Error())","['println', '(', '""net.DialTCP failed:""', ',', 'err.Error())']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'FUNCTION_CALL']"
112,        os.Exit(1),['os.Exit(1)'],['FUNCTION_CALL']
113,    },['}'],['PUNCTUATION']
114,    defer conn.Close(),"['defer', 'conn.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
115,    StartCommunication(conn),"['StartCommunication', '(', 'conn', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
116,},['}'],['PUNCTUATION']
117,"

EDIT: Following JimB's suggestion I came up with a working example. Messages don't get lost any more and are re-sent in a new connection. I'm not quite sure though how safe is it to use a shared variable (connWrap.IsFaulted) between different go routines.

","['EDIT:', 'Following', ""JimB's"", 'suggestion', 'I', 'came', 'up', 'with', 'a', 'working', 'example.', 'Messages', ""don't"", 'get', 'lost', 'any', 'more', 'and', 'are', 're-sent', 'in', 'a', 'new', 'connection.', ""I'm"", 'not', 'quite', 'sure', 'though', 'how', 'safe', 'is', 'it', 'to', 'use', 'a', 'shared', 'variable', '(connWrap.IsFaulted)', 'between', 'different', 'go', 'routines.']","['NNP', 'NNP', 'NNP', 'NN', 'PRP', 'VBD', 'RP', 'IN', 'DT', 'VBG', 'NN', 'NNP', 'NN', 'VB', 'VBN', 'DT', 'JJR', 'CC', 'VBP', 'JJ', 'IN', 'DT', 'JJ', 'NN', 'NNP', 'RB', 'RB', 'JJ', 'IN', 'WRB', 'JJ', 'VBZ', 'PRP', 'TO', 'VB', 'DT', 'VBN', 'JJ', 'NN', 'IN', 'JJ', 'VBP', 'NN']"
118,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
119,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
120,"    ""net""","['""net""']",['STRING_LITERAL']
121,"    ""os""","['""os""']",['STRING_LITERAL']
122,"    ""bufio""","['""bufio""']",['STRING_LITERAL']
123,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
124,),[')'],['PUNCTUATION']
125,type Connection struct {,"['type', 'Connection', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
126,    IsFaulted bool,"['IsFaulted', 'bool']","['IDENTIFIER', 'IDENTIFIER']"
127,    Conn net.Conn,"['Conn', 'net', '.', 'Conn']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
128,},['}'],['PUNCTUATION']
129,"func StartWritingToNetwork(connWrap * Connection, errChannel chan <- error, msgStack chan string) {","['func', 'StartWritingToNetwork', '(', 'connWrap', '*', 'Connection', ',', 'errChannel', 'chan', '<-', 'error', ',', 'msgStack', 'chan', 'string', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
130,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
131,        msg := <- msgStack,"['msg', ':=', '<-', 'msgStack']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
132,        if connWrap.IsFaulted {,"['if', 'connWrap', '.', 'IsFaulted', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
133,            //put it back for another connection,"['//', 'put', 'it', 'back', 'for', 'another', 'connection']","['COMMENT', 'VBD', 'PRP', 'RP', 'IN', 'DT', 'NN']"
134,            msgStack <- msg,"['msgStack', '<-', 'msg']","['IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
135,            return,['return'],['KEYWORD']
136,        },['}'],['PUNCTUATION']
137,"        _, err := connWrap.Conn.Write([]byte(msg))","['_', ',', 'err', ':=', 'connWrap', '.', 'Conn.Write([]byte(msg))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
138,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
139,"            fmt.Printf(""failed sending a message to network: %v\n"", err)","['fmt.Printf(""failed sending a message to network: %v\\n"", err)']",['FUNCTION_CALL']
140,            connWrap.IsFaulted = true,"['connWrap', '.', 'IsFaulted', '=', 'true']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
141,            msgStack <- msg,"['msgStack', '<-', 'msg']","['IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
142,            errChannel <- err,"['errChannel', '<-', 'err']","['IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
143,            return,['return'],['KEYWORD']
144,        } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
145,"            fmt.Printf(""msg sent: %s"", msg)","['fmt.Printf(""msg sent: %s"", msg)']",['FUNCTION_CALL']
146,        },['}'],['PUNCTUATION']
147,    },['}'],['PUNCTUATION']
148,},['}'],['PUNCTUATION']
149,"func StartReadingFromNetwork(connWrap * Connection, errChannel chan <- error){","['func', 'StartReadingFromNetwork', '(', 'connWrap', '*', 'Connection', ',', 'errChannel', 'chan', '<-', 'error', '){']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
150,    network := bufio.NewReader(connWrap.Conn),"['network', ':=', 'bufio.NewReader(connWrap.Conn)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
151,    for (!connWrap.IsFaulted) {,"['for', '(!', 'connWrap', '.', 'IsFaulted', ')', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
152,"        line, err := network.ReadString('\n')","['line', ',', 'err', ':=', ""network.ReadString('\\n')""]","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
153,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
154,"            fmt.Printf(""failed reading from network: %v\n"", err)","['fmt.Printf(""failed reading from network: %v\\n"", err)']",['FUNCTION_CALL']
155,            connWrap.IsFaulted = true,"['connWrap', '.', 'IsFaulted', '=', 'true']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
156,            errChannel <- err,"['errChannel', '<-', 'err']","['IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
157,        } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
158,"            fmt.Printf(""%s"", line)","['fmt.Printf(""%s"", line)']",['FUNCTION_CALL']
159,        },['}'],['PUNCTUATION']
160,    },['}'],['PUNCTUATION']
161,},['}'],['PUNCTUATION']
162,"func AcceptConnections(listener net.Listener, console chan string) {","['func', 'AcceptConnections', '(', 'listener', 'net', '.', 'Listener', ',', 'console', 'chan', 'string', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
163,    errChannel := make(chan error),"['errChannel', ':=', 'make', '(', 'chan', 'error', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
164,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
165,"        conn, err := listener.Accept()","['conn', ',', 'err', ':=', 'listener.Accept()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
166,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
167,            panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
168,        },['}'],['PUNCTUATION']
169,"        fmt.Printf(""client connected\n"")","['fmt.Printf(""client connected\\n"")']",['FUNCTION_CALL']
170,"        connWrap := Connection{false, conn}","['connWrap', ':=', 'Connection', '{', 'false', ',', 'conn', '}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'BOOLEAN_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
171,"        go StartReadingFromNetwork(&connWrap, errChannel)","['go', 'StartReadingFromNetwork', '(&', 'connWrap', ',', 'errChannel', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
172,"        go StartWritingToNetwork(&connWrap, errChannel, console)","['go', 'StartWritingToNetwork', '(&', 'connWrap', ',', 'errChannel', ',', 'console', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
173,        //block until an error occurs,"['//', 'block', 'until', 'an', 'error', 'occurs']","['COMMENT', 'NN', 'IN', 'DT', 'NN', 'NN']"
174,        <- errChannel,"['<-', 'errChannel']","['CHANNEL_OPERATOR', 'IDENTIFIER']"
175,    },['}'],['PUNCTUATION']
176,},['}'],['PUNCTUATION']
177,func ReadConsole(network chan <- string) {,"['func', 'ReadConsole', '(', 'network', 'chan', '<-', 'string', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
178,    console := bufio.NewReader(os.Stdin),"['console', ':=', 'bufio.NewReader(os.Stdin)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
179,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
180,"        line, err := console.ReadString('\n')","['line', ',', 'err', ':=', ""console.ReadString('\\n')""]","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
181,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
182,            panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
183,        } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
184,            network <- line,"['network', '<-', 'line']","['IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
185,        },['}'],['PUNCTUATION']
186,    },['}'],['PUNCTUATION']
187,},['}'],['PUNCTUATION']
188,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
189,"    listener, err := net.Listen(""tcp"", ""localhost:6666"")","['listener', ',', 'err', ':=', 'net.Listen(""tcp"", ""localhost:6666"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
190,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
191,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
192,    },['}'],['PUNCTUATION']
193,"    println(""listening on "" + listener.Addr().String())","['println', '(', '""listening on ""', '+', 'listener.Addr().String())']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'FUNCTION_CALL']"
194,    consoleToNetwork := make(chan string),"['consoleToNetwork', ':=', 'make', '(', 'chan', 'string', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
195,"    go AcceptConnections(listener, consoleToNetwork)","['go', 'AcceptConnections', '(', 'listener', ',', 'consoleToNetwork', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
196,    ReadConsole(consoleToNetwork),"['ReadConsole', '(', 'consoleToNetwork', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
197,},['}'],['PUNCTUATION']
