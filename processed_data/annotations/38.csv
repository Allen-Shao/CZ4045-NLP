,text,token,annotation
0,"So, lets look at what's really going on in your source. You have two goroutines (there's more than two, but we're going to focus on the explicit ones), main and readFromChannel. 

Lets look at what readFromChannel does:

","['So,', 'lets', 'look', 'at', ""what's"", 'really', 'going', 'on', 'in', 'your', 'source.', 'You', 'have', 'two', 'goroutines', ""(there's"", 'more', 'than', 'two,', 'but', ""we're"", 'going', 'to', 'focus', 'on', 'the', 'explicit', 'ones),', 'main', 'and', 'readFromChannel.', 'Lets', 'look', 'at', 'what', 'readFromChannel', 'does:']","['NNP', 'VBZ', 'VBP', 'IN', 'NNS', 'RB', 'VBG', 'IN', 'IN', 'PRP$', 'NN', 'PRP', 'VBP', 'CD', 'NNS', 'RB', 'JJR', 'IN', 'NN', 'CC', 'VBZ', 'VBG', 'TO', 'VB', 'IN', 'DT', 'JJ', 'NN', 'JJ', 'CC', 'JJ', 'NNS', 'VBP', 'IN', 'WP', 'NN', 'NN']"
1,"if channel `c` is not empty before `ti` has expired, print its contents and return, after signalling its completion to wait group.","['if', 'chan', 'nel', 'c', 'is', 'not', 'empty', 'before', 'ti', 'has', 'expired', ',', 'print', 'its', 'contents', 'and', 'return', ',', 'after', 'signalling', 'its', 'completion', 'to', 'wait', 'group', '.']","['KEYWORD', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
2,"if `ti` has expired before `c` is not empty, print ""TIMED OUT"" and return, after signalling its completion to wait group.","['if', 'ti', 'has', 'expired', 'before', 'c', 'is', 'not', 'empty', ',', 'print', '""TIMED OUT""', 'and', 'return', ',', 'after', 'signalling', 'its', 'completion', 'to', 'wait', 'group', '.']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'STRING_LITERAL', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
3,"

now Main:

","['now', 'Main:']","['RB', 'NNP']"
4,adds to waitgroup ,"['adds', 'to', 'waitgroup']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
5,make a channel `c`,"['make', 'a', 'chan', 'nel', 'c']","['IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
6,start a goroutine `readFromChannel`,"['start', 'a', 'go', 'routine', 'readFromChannel']","['IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
7,sleep for 5 seconds,"['sleep', 'for', '5', 'seconds']","['IDENTIFIER', 'KEYWORD', 'DECIMAL_LITERAL', 'IDENTIFIER']"
8,send 10 to channel `c`,"['send', '10', 'to', 'chan', 'nel', 'c']","['IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
9,call wait for waitgroup,"['call', 'wait', 'for', 'waitgroup']","['IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER']"
10,"

Now, lets go through the flow of execution for your code, concurrently (your code may/ may not execute in this order every time, keep that in mind)

","['Now,', 'lets', 'go', 'through', 'the', 'flow', 'of', 'execution', 'for', 'your', 'code,', 'concurrently', '(your', 'code', 'may/', 'may', 'not', 'execute', 'in', 'this', 'order', 'every', 'time,', 'keep', 'that', 'in', 'mind)']","['NNP', 'NNS', 'VBP', 'IN', 'DT', 'NN', 'IN', 'NN', 'IN', 'PRP$', 'NN', 'RB', 'JJ', 'NN', 'NN', 'MD', 'RB', 'VB', 'IN', 'DT', 'NN', 'DT', 'NN', 'VB', 'IN', 'IN', 'NN']"
11,1) wg.Add(1),"['1', ')', 'wg.Add(1)']","['DECIMAL_LITERAL', 'PUNCTUATION', 'FUNCTION_CALL']"
12,2) c := make(chan int),"['2', ')', 'c', ':=', 'make', '(', 'chan', 'int', ')']","['DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
13,"3) go readFromChannel(c, time.After(time.Duration(2)*time.Second))","['3', ')', 'go', 'readFromChannel', '(', 'c', ',', 'time.After(time.Duration(2)*time.Second))']","['DECIMAL_LITERAL', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
14,#timer ti starts#,"['timer', 'ti', 'starts']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
15,4) time.Sleep(time.Duration(5) * time.Second),"['4', ')', 'time.Sleep(time.Duration(5) * time.Second)']","['DECIMAL_LITERAL', 'PUNCTUATION', 'FUNCTION_CALL']"
16,#MAIN Goroutine begins sleep,"['MAIN', 'Goroutine', 'begins', 'sleep']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
17,#timer ti expires#,"['timer', 'ti', 'expires']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
18,5) case <-ti:,"['5', ')', 'case', '<-', 'ti', ':']","['DECIMAL_LITERAL', 'PUNCTUATION', 'KEYWORD', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
19,"6) fmt.Println(""TIMED OUT"")","['6', ')', 'fmt.Println(""TIMED OUT"")']","['DECIMAL_LITERAL', 'PUNCTUATION', 'FUNCTION_CALL']"
20,7) wg.Done(),"['7', ')', 'wg.Done()']","['DECIMAL_LITERAL', 'PUNCTUATION', 'FUNCTION_CALL']"
21,# readFromChannel Goroutine returns #,"['readFromChannel', 'Goroutine', 'return', 's']","['IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER']"
22,#MAIN Goroutine exits sleep#,"['MAIN', 'Goroutine', 'exits', 'sleep']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
23,8) c<-10,"['8', ')', 'c', '<-', '10']","['DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'DECIMAL_LITERAL']"
24,9) ......#DEADLOCK#,"['9', ')', '......', 'DEADLOCK']","['DECIMAL_LITERAL', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER']"
25,"

Now you can guess why you got a deadlock. In go, non buffered channels will block until something happens on the other end of the channel, regardless of whether you're sending or receiving. So c  will block until something reads from the other end of c, but the goroutine you had for that has dropped out of the picture 2 seconds ago. Therefore, c blocks forever, and since main is the last goroutine left, you get a Deadlock.

How to prevent it? When using channels, ensure that there's always a receive at the other end of the channel for every send. You can also use a buffered channel, but in your code above, it would not be the ""right"" solution. 

Here's my fix for the deadlock:

","['Now', 'you', 'can', 'guess', 'why', 'you', 'got', 'a', 'deadlock.', 'In', 'go,', 'non', 'buffered', 'channels', 'will', 'block', 'until', 'something', 'happens', 'on', 'the', 'other', 'end', 'of', 'the', 'channel,', 'regardless', 'of', 'whether', ""you're"", 'sending', 'or', 'receiving.', 'So', 'c', 'will', 'block', 'until', 'something', 'reads', 'from', 'the', 'other', 'end', 'of', 'c,', 'but', 'the', 'goroutine', 'you', 'had', 'for', 'that', 'has', 'dropped', 'out', 'of', 'the', 'picture', '2', 'seconds', 'ago.', 'Therefore,', 'c', 'blocks', 'forever,', 'and', 'since', 'main', 'is', 'the', 'last', 'goroutine', 'left,', 'you', 'get', 'a', 'Deadlock.', 'How', 'to', 'prevent', 'it?', 'When', 'using', 'channels,', 'ensure', 'that', ""there's"", 'always', 'a', 'receive', 'at', 'the', 'other', 'end', 'of', 'the', 'channel', 'for', 'every', 'send.', 'You', 'can', 'also', 'use', 'a', 'buffered', 'channel,', 'but', 'in', 'your', 'code', 'above,', 'it', 'would', 'not', 'be', 'the', '""right""', 'solution.', ""Here's"", 'my', 'fix', 'for', 'the', 'deadlock:']","['RB', 'PRP', 'MD', 'VB', 'WRB', 'PRP', 'VBD', 'DT', 'NN', 'IN', 'NN', 'NN', 'VBD', 'NNS', 'MD', 'VB', 'IN', 'NN', 'NNS', 'IN', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NN', 'NN', 'IN', 'IN', 'NN', 'NN', 'CC', 'NN', 'NNP', 'NN', 'MD', 'VB', 'IN', 'NN', 'NNS', 'IN', 'DT', 'JJ', 'NN', 'IN', 'NN', 'CC', 'DT', 'NN', 'PRP', 'VBD', 'IN', 'DT', 'VBZ', 'VBN', 'IN', 'IN', 'DT', 'NN', 'CD', 'NNS', 'JJ', 'NNP', 'NN', 'NNS', 'NN', 'CC', 'IN', 'JJ', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'PRP', 'VBP', 'DT', 'NNP', 'NNP', 'TO', 'VB', 'NN', 'WRB', 'VBG', 'JJ', 'VB', 'IN', 'NN', 'RB', 'DT', 'NN', 'IN', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NN', 'IN', 'DT', 'NN', 'PRP', 'MD', 'RB', 'VB', 'DT', 'JJ', 'NN', 'CC', 'IN', 'PRP$', 'NN', 'IN', 'PRP', 'MD', 'RB', 'VB', 'DT', 'NNP', 'NN', 'NNP', 'PRP$', 'NN', 'IN', 'DT', 'NN']"
26,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
27,    wg.Add(1),['wg.Add(1)'],['FUNCTION_CALL']
28,    c := make(chan int),"['c', ':=', 'make', '(', 'chan', 'int', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
29,"    go readFromChannel(c, time.After(time.Duration(2)*time.Second))","['go', 'readFromChannel', '(', 'c', ',', 'time.After(time.Duration(2)*time.Second))']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
30,    time.Sleep(time.Duration(5) * time.Second),['time.Sleep(time.Duration(5) * time.Second)'],['FUNCTION_CALL']
31,    c <- 10,"['c', '<-', '10']","['IDENTIFIER', 'CHANNEL_OPERATOR', 'DECIMAL_LITERAL']"
32,    wg.Wait(),['wg.Wait()'],['FUNCTION_CALL']
33,},['}'],['PUNCTUATION']
34,"func readFromChannel(c chan int, ti <-chan time.Time) {","['func', 'readFromChannel', '(', 'c', 'chan', 'int', ',', 'ti', '<-', 'chan', 'time', '.', 'Time', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
35,        // the forloop will run forever,"['//', 'the', 'forloop', 'will', 'run', 'forever']","['COMMENT', 'DT', 'NN', 'MD', 'VB', 'RB']"
36,    loop: // **,"['loop', ':', '//', '**']","['IDENTIFIER', 'PUNCTUATION', 'COMMENT', 'NN']"
37,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
38,        select {,"['select', '{']","['KEYWORD', 'PUNCTUATION']"
39,            case x := <-c:,"['case', 'x', ':=', '<-', 'c', ':']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
40,"                    fmt.Println(""Read"", x)","['fmt.Println(""Read"", x)']",['FUNCTION_CALL']
41,                    break loop // breaks out of the for loop and the select **,"['break', 'loop', '//', 'breaks', 'out', 'of', 'the', 'for', 'loop', 'and', 'the', 'select', '**']","['KEYWORD', 'IDENTIFIER', 'COMMENT', 'NNS', 'IN', 'IN', 'DT', 'IN', 'NN', 'CC', 'DT', 'NN', 'NN']"
42,            case <-ti:,"['case', '<-', 'ti', ':']","['KEYWORD', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
43,"                    fmt.Println(""TIMED OUT"")","['fmt.Println(""TIMED OUT"")']",['FUNCTION_CALL']
44,            },['}'],['PUNCTUATION']
45,    },['}'],['PUNCTUATION']
46,    wg.Done(),['wg.Done()'],['FUNCTION_CALL']
47,} ,['}'],['PUNCTUATION']
48,"

** see this answer for details
","['**', 'see', 'this', 'answer', 'for', 'details']","['NN', 'VB', 'DT', 'NN', 'IN', 'NNS']"
