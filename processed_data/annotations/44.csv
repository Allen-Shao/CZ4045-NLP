,text,token,annotation
0,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
1,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
2,"    ""errors""","['""errors""']",['STRING_LITERAL']
3,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
4,"    ""os""","['""os""']",['STRING_LITERAL']
5,"    ""os/exec""","['""os/exec""']",['STRING_LITERAL']
6,"    ""regexp""","['""regexp""']",['STRING_LITERAL']
7,"    ""strings""","['""strings""']",['STRING_LITERAL']
8,"    ""github.com/codegangsta/cli""","['""github.com/codegangsta/cli""']",['STRING_LITERAL']
9,"    ""github.com/puerkitobio/goquery""","['""github.com/puerkitobio/goquery""']",['STRING_LITERAL']
10,),[')'],['OPERATOR']
11,const (,"['const', '(']","['KEYWORD', 'OPERATOR']"
12,"    MainSite        = ""https://parahumans.wordpress.com/""","['MainSite', '=', '""https://parahumans.wordpress.com/""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
13,"    TableOfContents = ""https://parahumans.wordpress.com/table-of-contents/""","['TableOfContents', '=', '""https://parahumans.wordpress.com/table-of-contents/""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
14,),[')'],['OPERATOR']
15,type Arc struct {,"['type', 'Arc', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
16,    Identifier string,"['Identifier', 'string']","['IDENTIFIER', 'IDENTIFIER']"
17,    Title      string,"['Title', 'string']","['IDENTIFIER', 'IDENTIFIER']"
18,    Chapters   []Chapter,"['Chapters', '[]', 'Chapter']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
19,},['}'],['OPERATOR']
20,type Chapter struct {,"['type', 'Chapter', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
21,    Title      string,"['Title', 'string']","['IDENTIFIER', 'IDENTIFIER']"
22,    Url        string,"['Url', 'string']","['IDENTIFIER', 'IDENTIFIER']"
23,    Tags       []string,"['Tags', '[]', 'string']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
24,    Paragraphs []Paragraph,"['Paragraphs', '[]', 'Paragraph']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
25,    Retries    int,"['Retries', 'int']","['IDENTIFIER', 'IDENTIFIER']"
26,    DatePosted string,"['DatePosted', 'string']","['IDENTIFIER', 'IDENTIFIER']"
27,},['}'],['OPERATOR']
28,type Paragraph string,"['type', 'Paragraph', 'string']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
29,// Format the paragraph,['// Format the paragraph'],"['COMMENT', 'IN', 'DT', 'NN']"
30,func (p *Paragraph) Format() {,"['func', '(', 'p', '*', 'Paragraph', ')', 'Format', '()', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
31,    s := string(*p),"['s', ':=', 'string', '(*', 'p', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
32,    // Handle emphasis,['// Handle emphasis'],"['COMMENT', 'NNP', 'NN']"
33,"    s = strings.Replace(s, """", ""*"", -1)","['s', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""*""', ',', '-', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
34,"    s = strings.Replace(s, """", ""*"", -1)","['s', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""*""', ',', '-', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
35,"    s = strings.Replace(s, """", ""*"", -1)","['s', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""*""', ',', '-', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
36,"    s = strings.Replace(s, """", ""*"", -1)","['s', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""*""', ',', '-', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
37,    // Handle bold,['// Handle bold'],"['COMMENT', 'NNP', 'VBD']"
38,"    s = strings.Replace(s, """", ""**"", -1)","['s', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""**""', ',', '-', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
39,"    s = strings.Replace(s, """", ""**"", -1)","['s', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""**""', ',', '-', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
40,"    s = strings.Replace(s, """", ""**"", -1)","['s', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""**""', ',', '-', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
41,"    s = strings.Replace(s, """", ""**"", -1)","['s', '=', 'strings', '.', 'Replace', '(', 's', ',', '"""", ""**""', ',', '-', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
42,    // Remove new lines,['// Remove new lines'],"['COMMENT', 'NNP', 'JJ', 'NNS']"
43,"    s = strings.Replace(s, ""\n"", """", -1)","['s', '=', 'strings', '.', 'Replace', '(', 's', ',', '""\\n"", """"', ',', '-', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
44,    // And random double spaces,['// And random double spaces'],"['COMMENT', 'CC', 'VB', 'JJ', 'NNS']"
45,"    s = strings.Replace(s, "".  "", "". "", -1)","['s', '=', 'strings', '.', 'Replace', '(', 's', ',', '"".  "", "". ""', ',', '-', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
46,    *p = Paragraph(s),"['*', 'p', '=', 'Paragraph', '(', 's', ')']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
47,},['}'],['OPERATOR']
48,// Return the Arc that the given chapter belongs to,['// Return the Arc that the given chapter belongs to'],"['COMMENT', 'VB', 'DT', 'NNP', 'IN', 'DT', 'VBN', 'NN', 'NNS', 'TO']"
49,"func (ch *Chapter) WhichArc(arcList []*Arc) (*Arc, error) {","['func', '(', 'ch', '*', 'Chapter', ')', 'WhichArc', '(', 'arcList', '[]*', 'Arc', ')', '(*', 'Arc', ',', 'error', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
50,"    for _, arc := range arcList {","['for', '_', ',', 'arc', ':=', 'range', 'arcList', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
51,"        if strings.Replace(ch.Title[:2], ""."", """", -1) == arc.Identifier {","['if', 'strings', '.', 'Replace', '(', 'ch', '.', 'Title', '[:', '2', '],', '""."", """"', ',', '-', '1', ')', '==', 'arc', '.', 'Identifier', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
52,"            return arc, nil","['return', 'arc', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
53,        },['}'],['OPERATOR']
54,    },['}'],['OPERATOR']
55,"    return &Arc{}, errors.New(""chapter '"" + ch.Title + ""' did not match any Arcs"")","['return', '&', 'Arc', '{},', 'errors', '.', 'New', '(', '""chapter \'"" + ch.Title + ""\' did not match any Arcs""', ')']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
56,},['}'],['OPERATOR']
57,// Parse a chapter and return it,['// Parse a chapter and return it'],"['COMMENT', 'VB', 'DT', 'NN', 'CC', 'VB', 'PRP']"
58,func (ch *Chapter) Parse(done chan bool) {,"['func', '(', 'ch', '*', 'Chapter', ')', 'Parse', '(', 'done', 'chan', 'bool', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
59,    if ch.Retries > 3 {,"['if', 'ch', '.', 'Retries', '>', '3', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
60,"        panic(""Chapter url '"" + ch.Url + ""' has timed out too many times"")","['panic', '(', '""Chapter url \'"" + ch.Url + ""\' has timed out too many times""', ')']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
61,    },['}'],['OPERATOR']
62,    // Get the chapter,['// Get the chapter'],"['COMMENT', 'VB', 'DT', 'NN']"
63,"    if strings.HasPrefix(ch.Url, ""http"") == false {","['if', 'strings', '.', 'HasPrefix', '(', 'ch', '.', 'Url', ',', '""http""', ')', '==', 'false', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
64,        // Make sure it begins with http so goquery can use it,['// Make sure it begins with http so goquery can use it'],"['COMMENT', 'NNP', 'NN', 'PRP', 'VBZ', 'IN', 'NNS', 'RB', 'RB', 'MD', 'VB', 'PRP']"
65,"        ch.Url = ""https://"" + ch.Url","['ch', '.', 'Url', '=', '""https://""', '+', 'ch', '.', 'Url']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
66,    },['}'],['OPERATOR']
67,"    doc, err := goquery.NewDocument(ch.Url)","['doc', ',', 'err', ':=', 'go', 'query', '.', 'NewDocument', '(', 'ch', '.', 'Url', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
68,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
69,        // Try again,['// Try again'],"['COMMENT', 'VB', 'RB']"
70,        ch.Retries++,"['ch', '.', 'Retries', '++']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
71,        go ch.Parse(done),"['go', 'ch', '.', 'Parse', '(', 'done', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
72,        return,['return'],['KEYWORD']
73,    },['}'],['OPERATOR']
74,    // Set the new chapter title,['// Set the new chapter title'],"['COMMENT', 'VB', 'DT', 'JJ', 'NN', 'NN']"
75,"    ch.Title = doc.Find(""h1.entry-title"").Text()","['ch', '.', 'Title', '=', 'doc', '.', 'Find', '(', '""h1.entry-title""', ').', 'Text', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
76,    // Set the tags,['// Set the tags'],"['COMMENT', 'NNP', 'DT', 'NN']"
77,"    doc.Find("".entry-meta a[rel=tag]"").Each(func(_ int, s *goquery.Selection) {","['doc', '.', 'Find', '(', '"".entry-meta a[rel=tag]""', ').', 'Each', '(', 'func', '(', '_', 'int', ',', 's', '*', 'go', 'query', '.', 'Selection', ')', '{']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
78,"        ch.Tags = append(ch.Tags, s.Text())","['ch', '.', 'Tags', '=', 'append', '(', 'ch', '.', 'Tags', ',', 's', '.', 'Text', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
79,        if len(ch.Tags) == 0 {,"['if', 'len', '(', 'ch', '.', 'Tags', ')', '==', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
80,"            ch.Tags = append(ch.Tags, ""NONE"")","['ch', '.', 'Tags', '=', 'append', '(', 'ch', '.', 'Tags', ',', '""NONE""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
81,        },['}'],['OPERATOR']
82,    }),['})'],['OPERATOR']
83,    // Get the date it was posted,['// Get the date it was posted'],"['COMMENT', 'VB', 'DT', 'NN', 'PRP', 'VBD', 'VBN']"
84,"    ch.DatePosted = doc.Find(""time.entry-date"").Text()","['ch', '.', 'DatePosted', '=', 'doc', '.', 'Find', '(', '""time.entry-date""', ').', 'Text', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
85,    // Now we'll get all the paragraphs,"[""// Now we'll get all the paragraphs""]","['COMMENT', 'RB', 'PRP', 'MD', 'VB', 'PDT', 'DT', 'NN']"
86,"    doc.Find("".entry-content > p"").Each(func(_ int, s *goquery.Selection) {","['doc', '.', 'Find', '(', '"".entry-content > p""', ').', 'Each', '(', 'func', '(', '_', 'int', ',', 's', '*', 'go', 'query', '.', 'Selection', ')', '{']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
87,        // Check for the previous/next links,['// Check for the previous/next links'],"['COMMENT', 'NN', 'IN', 'DT', 'JJ', 'NNS']"
88,"        if len(s.Find(""a"").Nodes) > 0 {","['if', 'len', '(', 's', '.', 'Find', '(', '""a""', ').', 'Nodes', ')', '>', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
89,            return,['return'],['KEYWORD']
90,        },['}'],['OPERATOR']
91,        // Get the paragraph HTML,['// Get the paragraph HTML'],"['COMMENT', 'VB', 'DT', 'NN', 'NNP']"
92,"        st, _ := s.Html()","['st', ',', '_', ':=', 's', '.', 'Html', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
93,"        para := Paragraph("""")","['para', ':=', 'Paragraph', '(', '""""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
94,        // Get the actual paragraph,['// Get the actual paragraph'],"['COMMENT', 'VB', 'DT', 'JJ', 'NN']"
95,"        if val, exists := s.Attr(""padding-left""); exists && val == ""30px"" {","['if', 'val', ',', 'exists', ':=', 's', '.', 'Attr', '(', '""padding-left""); exists && val == ""30px""', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
96,            // Check to see if the paragraph is special (indented) block,['// Check to see if the paragraph is special (indented) block'],"['COMMENT', 'NN', 'TO', 'VB', 'IN', 'DT', 'NN', 'VBZ', 'JJ', '(', 'VBN', ')', 'NN']"
97,"            para = Paragraph(""    "" + st)","['para', '=', 'Paragraph', '(', '""    ""', '+', 'st', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
98,"        } else if val, exists := s.Attr(""text-align""); exists && val == ""center"" {","['}', 'else', 'if', 'val', ',', 'exists', ':=', 's', '.', 'Attr', '(', '""text-align""); exists && val == ""center""', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
99,            // Otherwise check to see if it's a separator paragraph,"[""// Otherwise check to see if it's a separator paragraph""]","['COMMENT', 'RB', 'NN', 'TO', 'VB', 'IN', 'PRP', 'VBZ', 'DT', 'NN', 'NN']"
100,"            para = Paragraph(""----------"")","['para', '=', 'Paragraph', '(', '""----------""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
101,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
102,            // It's just a normal paragraph in this case,"[""// It's just a normal paragraph in this case""]","['COMMENT', 'PRP', 'VBZ', 'RB', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NN']"
103,            para = Paragraph(st),"['para', '=', 'Paragraph', '(', 'st', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
104,        },['}'],['OPERATOR']
105,        // And add the paragraph to the chapter,['// And add the paragraph to the chapter'],"['COMMENT', 'CC', 'VB', 'DT', 'NN', 'TO', 'DT', 'NN']"
106,        para.Format(),"['para', '.', 'Format', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
107,"        ch.Paragraphs = append(ch.Paragraphs, para)","['ch', '.', 'Paragraphs', '=', 'append', '(', 'ch', '.', 'Paragraphs', ',', 'para', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
108,    }),['})'],['OPERATOR']
109,"    // Finally, let's signal a success","[""// Finally, let's signal a success""]","['COMMENT', 'RB', ',', 'VB', 'POS', 'VB', 'DT', 'NN']"
110,    done <- true,"['done', '<-', 'true']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
111,},['}'],['OPERATOR']
112,// Return a slice of Arcs extracted from the table of contents,['// Return a slice of Arcs extracted from the table of contents'],"['COMMENT', 'VB', 'DT', 'NN', 'IN', 'NNP', 'VBD', 'IN', 'DT', 'NN', 'IN', 'NNS']"
113,func ParseArcs(s string) []*Arc {,"['func', 'ParseArcs', '(', 's', 'string', ')', '[]*', 'Arc', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
114,    arcs := []*Arc{},"['arcs', ':=', '[]*', 'Arc', '{}']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
115,"    r, _ := regexp.Compile(`[0-9]+`)","['r', ',', '_', ':=', 'regexp', '.', 'Compile', '(', '[', '0', '-', '9', ']+', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR']"
116,"    for _, line := range strings.Split(s, ""\n"") {","['for', '_', ',', 'line', ':=', 'range', 'strings', '.', 'Split', '(', 's', ',', '""\\n""', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
117,        line = strings.TrimSpace(line),"['line', '=', 'strings', '.', 'TrimSpace', '(', 'line', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
118,"        if strings.HasPrefix(line, ""Arc"") {","['if', 'strings', '.', 'HasPrefix', '(', 'line', ',', '""Arc""', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
119,"            arcs = append(arcs, &Arc{","['arcs', '=', 'append', '(', 'arcs', ',', '&', 'Arc', '{']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
120,"                Identifier: r.FindString(line),","['Identifier', ':', 'r', '.', 'FindString', '(', 'line', '),']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
121,"                Title:      line,","['Title', ':', 'line', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
122,            }),['})'],['OPERATOR']
123,"        } else if strings.HasPrefix(line, ""Epilogue"") {","['}', 'else', 'if', 'strings', '.', 'HasPrefix', '(', 'line', ',', '""Epilogue""', ')', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
124,"            arcs = append(arcs, &Arc{","['arcs', '=', 'append', '(', 'arcs', ',', '&', 'Arc', '{']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
125,"                Identifier: ""E"",","['Identifier', ':', '""E""', ',']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
126,"                Title:      line,","['Title', ':', 'line', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
127,            }),['})'],['OPERATOR']
128,        },['}'],['OPERATOR']
129,    },['}'],['OPERATOR']
130,    return arcs,"['return', 'arcs']","['KEYWORD', 'IDENTIFIER']"
131,},['}'],['OPERATOR']
132,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
133,    // Define the app,['// Define the app'],"['COMMENT', 'VB', 'DT', 'NN']"
134,    app := cli.NewApp(),"['app', ':=', 'cli', '.', 'NewApp', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
135,"    app.Name = ""Worm Scraper""","['app', '.', 'Name', '=', '""Worm Scraper""']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
136,"    app.Usage = ""A tool to let you get an updated EPUB copy of the serial web novel Worm, by Wildbow""","['app', '.', 'Usage', '=', '""A tool to let you get an updated EPUB copy of the serial web novel Worm, by Wildbow""']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
137,"    app.Version = ""1.0""","['app', '.', 'Version', '=', '""1.0""']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
138,"    app.Author = ""Benjamin Harris""","['app', '.', 'Author', '=', '""Benjamin Harris""']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
139,    // Define the application flags,['// Define the application flags'],"['COMMENT', 'VB', 'DT', 'NN', 'NNS']"
140,    app.Flags = []cli.Flag{,"['app', '.', 'Flags', '=', '[]', 'cli', '.', 'Flag', '{']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
141,"        cli.BoolFlag{""pdf"", ""Save the book as a PDF instead of an EPUB, if possible""},","['cli', '.', 'BoolFlag', '{', '""pdf"", ""Save the book as a PDF instead of an EPUB, if possible""', '},']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
142,"        cli.BoolFlag{""with-link"", ""Include a link to the chapter online""},","['cli', '.', 'BoolFlag', '{', '""with-link"", ""Include a link to the chapter online""', '},']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
143,"        cli.BoolFlag{""with-tags"", ""Include the tags each chapter was posted under""},","['cli', '.', 'BoolFlag', '{', '""with-tags"", ""Include the tags each chapter was posted under""', '},']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
144,"        cli.BoolFlag{""with-date"", ""Include the date each chapter was posted""},","['cli', '.', 'BoolFlag', '{', '""with-date"", ""Include the date each chapter was posted""', '},']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
145,    },['}'],['OPERATOR']
146,    // The heart of the application,['// The heart of the application'],"['COMMENT', 'DT', 'NN', 'IN', 'DT', 'NN']"
147,    app.Action = func(context *cli.Context) {,"['app', '.', 'Action', '=', 'func', '(', 'context', '*', 'cli', '.', 'Context', ')', '{']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
148,        // Starting the program,['// Starting the program'],"['COMMENT', 'VBG', 'DT', 'NN']"
149,"        fmt.Println(""Starting to scrape Worm"")","['fmt', '.', 'Println', '(', '""Starting to scrape Worm""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
150,        // Get the list of arcs from the table of contents,['// Get the list of arcs from the table of contents'],"['COMMENT', 'VB', 'DT', 'NN', 'IN', 'NN', 'IN', 'DT', 'NN', 'IN', 'NNS']"
151,"        fmt.Println(""Gathering links from table of contents..."")","['fmt', '.', 'Println', '(', '""Gathering links from table of contents...""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
152,"        contents, err := goquery.NewDocument(TableOfContents)","['contents', ',', 'err', ':=', 'go', 'query', '.', 'NewDocument', '(', 'TableOfContents', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
153,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
154,"            panic(""Failed to get the table of contents! "" + err.Error())","['panic', '(', '""Failed to get the table of contents! ""', '+', 'err', '.', 'Error', '())']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
155,        },['}'],['OPERATOR']
156,        // Parse the arcs,['// Parse the arcs'],"['COMMENT', 'VB', 'DT', 'NN']"
157,"        arcs := ParseArcs(contents.Find("".entry-content"").Text())","['arcs', ':=', 'ParseArcs', '(', 'contents', '.', 'Find', '(', '"".entry-content""', ').', 'Text', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
158,        // Now get the links for the arc chapters,['// Now get the links for the arc chapters'],"['COMMENT', 'RB', 'VB', 'DT', 'NNS', 'IN', 'DT', 'NN', 'NNS']"
159,"        contents.Find("".entry-content a:not([class*=share-icon])"").Each(func(_ int, s *goquery.Selection) {","['contents', '.', 'Find', '(', '"".entry-content a:not([class*=share-icon])""', ').', 'Each', '(', 'func', '(', '_', 'int', ',', 's', '*', 'go', 'query', '.', 'Selection', ')', '{']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
160,            ch := Chapter{},"['ch', ':=', 'Chapter', '{}']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
161,"            ch.Title = strings.Replace(strings.TrimSpace(s.Text()), ""\n"", """", -1)","['ch', '.', 'Title', '=', 'strings', '.', 'Replace', '(', 'strings', '.', 'TrimSpace', '(', 's', '.', 'Text', '()),', '""\\n"", """"', ',', '-', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
162,"            ch.Url, _ = s.Attr(""href"")","['ch', '.', 'Url', ',', '_', '=', 's', '.', 'Attr', '(', '""href""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
163,"            if ch.Title == """" {","['if', 'ch', '.', 'Title', '==', '""""', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
164,                return,['return'],['KEYWORD']
165,            },['}'],['OPERATOR']
166,"            arc, _ := ch.WhichArc(arcs)","['arc', ',', '_', ':=', 'ch', '.', 'WhichArc', '(', 'arcs', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
167,"            arc.Chapters = append(arc.Chapters, ch)","['arc', '.', 'Chapters', '=', 'append', '(', 'arc', '.', 'Chapters', ',', 'ch', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
168,        }),['})'],['OPERATOR']
169,        // Manually add missing chapter in Epilogue,['// Manually add missing chapter in Epilogue'],"['COMMENT', 'RB', 'VB', 'VBG', 'NN', 'IN', 'NNP']"
170,        c := Chapter{,"['c', ':=', 'Chapter', '{']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
171,"            Title: ""E.2"",","['Title', ':', '""E.2""', ',']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
172,"            Url:   ""https://parahumans.wordpress.com/2013/11/05/teneral-e-2/"",","['Url', ':', '""https://parahumans.wordpress.com/2013/11/05/teneral-e-2/""', ',']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
173,        },['}'],['OPERATOR']
174,"        a, _ := c.WhichArc(arcs)","['a', ',', '_', ':=', 'c', '.', 'WhichArc', '(', 'arcs', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
175,"        a.Chapters = append(a.Chapters, c)","['a', '.', 'Chapters', '=', 'append', '(', 'a', '.', 'Chapters', ',', 'c', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
176,"        copy(a.Chapters[1+1:], a.Chapters[1:])","['copy', '(', 'a', '.', 'Chapters', '[', '1', '+', '1', ':],', 'a', '.', 'Chapters', '[', '1', ':])']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
177,        a.Chapters[1] = c,"['a', '.', 'Chapters', '[', '1', ']', '=', 'c']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
178,        // Now start getting the chapters,['// Now start getting the chapters'],"['COMMENT', 'RB', 'VBZ', 'VBG', 'DT', 'NNS']"
179,        chapters := 0,"['chapters', ':=', '0']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
180,        done := make(chan bool),"['done', ':=', 'make', '(', 'chan', 'bool', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
181,"        for _, arc := range arcs {","['for', '_', ',', 'arc', ':=', 'range', 'arcs', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
182,"            for i, _ := range arc.Chapters {","['for', 'i', ',', '_', ':=', 'range', 'arc', '.', 'Chapters', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
183,                chapters++,"['chapters', '++']","['IDENTIFIER', 'OPERATOR']"
184,                go arc.Chapters[i].Parse(done),"['go', 'arc', '.', 'Chapters', '[', 'i', '].', 'Parse', '(', 'done', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
185,            },['}'],['OPERATOR']
186,        },['}'],['OPERATOR']
187,"        fmt.Println(""Starting to parse"", chapters, ""chapters"")","['fmt', '.', 'Println', '(', '""Starting to parse"", chapters, ""chapters""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
188,"        fmt.Print(""Finished: "")","['fmt', '.', 'Print', '(', '""Finished: ""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
189,        totalChapters := chapters,"['totalChapters', ':=', 'chapters']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
190,        for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
191,            select {,"['select', '{']","['KEYWORD', 'OPERATOR']"
192,            case <-done:,"['case', '<-', 'done', ':']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
193,                chapters--,"['chapters', '--']","['IDENTIFIER', 'OPERATOR']"
194,"                fmt.Print(totalChapters-chapters, "","")","['fmt', '.', 'Print', '(', 'totalChapters', '-', 'chapters', ',', '"",""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
195,            },['}'],['OPERATOR']
196,            if chapters == 0 {,"['if', 'chapters', '==', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
197,                // We're done with all the chapters,"[""// We're done with all the chapters""]","['COMMENT', 'PRP', 'VBP', 'VBN', 'IN', 'PDT', 'DT', 'NNS']"
198,                close(done),"['close', '(', 'done', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
199,                fmt.Println(),"['fmt', '.', 'Println', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
200,                break,['break'],['KEYWORD']
201,            },['}'],['OPERATOR']
202,        },['}'],['OPERATOR']
203,        // And let's write all this stuff to a file now,"[""// And let's write all this stuff to a file now""]","['COMMENT', 'CC', 'VB', 'POS', 'VB', 'PDT', 'DT', 'NN', 'TO', 'DT', 'NN', 'RB']"
204,"        fmt.Println(""Saving results to file..."")","['fmt', '.', 'Println', '(', '""Saving results to file...""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
205,"        f, err := os.OpenFile(""Worm.md"", os.O_RDWR|os.O_CREATE|os.O_EXCL, 0666)","['f', ',', 'err', ':=', 'os', '.', 'OpenFile', '(', '""Worm.md""', ',', 'os', '.', 'O_RDWR', '|', 'os', '.', 'O_CREATE', '|', 'os', '.', 'O_EXCL', ',', '0666', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
206,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
207,            panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
208,        },['}'],['OPERATOR']
209,        defer f.Close(),"['defer', 'f', '.', 'Close', '()']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
210,        // Define pagebreak,['// Define pagebreak'],"['COMMENT', 'NNP', 'NN']"
211,"        PageBreak := ""\n\n""","['PageBreak', ':=', '""\\n\\n""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
212,        // Write the cover,['// Write the cover'],"['COMMENT', 'IN', 'DT', 'NN']"
213,"        f.WriteString(""# Worm\n\n"")","['f', '.', 'WriteString', '(', '""# Worm\\n\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
214,"        f.WriteString(""By Wildbow\n\n"")","['f', '.', 'WriteString', '(', '""By Wildbow\\n\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
215,"        f.WriteString(""Website: "" + MainSite)","['f', '.', 'WriteString', '(', '""Website: ""', '+', 'MainSite', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
216,        // Now loop through the Arcs,['// Now loop through the Arcs'],"['COMMENT', 'RB', 'VBZ', 'IN', 'DT', 'NNP']"
217,"        for _, arc := range arcs {","['for', '_', ',', 'arc', ':=', 'range', 'arcs', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
218,"            f.WriteString(PageBreak + ""# "" + arc.Title)","['f', '.', 'WriteString', '(', 'PageBreak', '+', '""# ""', '+', 'arc', '.', 'Title', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
219,"            for _, chapter := range arc.Chapters {","['for', '_', ',', 'chapter', ':=', 'range', 'arc', '.', 'Chapters', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
220,"                f.WriteString(""\n\n"")","['f', '.', 'WriteString', '(', '""\\n\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
221,"                f.WriteString(""## "" + chapter.Title + ""\n\n"")","['f', '.', 'WriteString', '(', '""## "" + chapter.Title + ""\\n\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
222,"                if context.Bool(""with-tags"") {","['if', 'context', '.', 'Bool', '(', '""with-tags""', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
223,"                    f.WriteString(""**Tags:** "" + strings.Join(chapter.Tags, "", "") + ""  "")","['f', '.', 'WriteString', '(', '""**Tags:** "" + strings.Join(chapter.Tags, "", "") + ""  ""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
224,                },['}'],['OPERATOR']
225,"                if context.Bool(""with-date"") {","['if', 'context', '.', 'Bool', '(', '""with-date""', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
226,"                    f.WriteString(""**Date:** "" + chapter.DatePosted + ""  "")","['f', '.', 'WriteString', '(', '""**Date:** "" + chapter.DatePosted + ""  ""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
227,                },['}'],['OPERATOR']
228,"                if context.Bool(""with-link"") {","['if', 'context', '.', 'Bool', '(', '""with-link""', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
229,"                    f.WriteString(""**Link:** "" + chapter.Url + ""  "")","['f', '.', 'WriteString', '(', '""**Link:** "" + chapter.Url + ""  ""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
230,                },['}'],['OPERATOR']
231,"                f.WriteString(""\n\n"")","['f', '.', 'WriteString', '(', '""\\n\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
232,                // Now save the chapter's paragraphs,"[""// Now save the chapter's paragraphs""]","['COMMENT', 'RB', 'VBP', 'DT', 'NN', 'POS', 'NN']"
233,"                for _, p := range chapter.Paragraphs {","['for', '_', ',', 'p', ':=', 'range', 'chapter', '.', 'Paragraphs', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
234,"                    f.WriteString(string(p) + ""\n\n"")","['f', '.', 'WriteString', '(', 'string', '(', 'p', ')', '+', '""\\n\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
235,                },['}'],['OPERATOR']
236,            },['}'],['OPERATOR']
237,        },['}'],['OPERATOR']
238,"        // Now let's try to convert the markdown file into an ebook format (epub, pdf)","[""// Now let's try to convert the markdown file into an ebook format (epub, pdf)""]","['COMMENT', 'RB', 'VBP', 'PRP', 'VB', 'TO', 'VB', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NN', 'NN', '(', 'JJ', ',', 'NN', ')']"
239,"        fmt.Print(""Attempting to convert Markdown file... "")","['fmt', '.', 'Print', '(', '""Attempting to convert Markdown file... ""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
240,"        cmdText := []string{""-S"", ""Worm.md"", ""--epub-chapter-level"", ""2"", ""-o"", ""Worm.epub""}","['cmdText', ':=', '[]', 'string', '{', '""-S"", ""Worm.md"", ""--epub-chapter-level"", ""2"", ""-o"", ""Worm.epub""', '}']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
241,"        if context.Bool(""pdf"") {","['if', 'context', '.', 'Bool', '(', '""pdf""', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR']"
242,"            cmdText = []string{""Worm.md"", ""-o"", ""Worm.pdf""}","['cmdText', '=', '[]', 'string', '{', '""Worm.md"", ""-o"", ""Worm.pdf""', '}']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
243,            PageBreak = ``,"['PageBreak', '=']","['IDENTIFIER', 'OPERATOR']"
244,        },['}'],['OPERATOR']
245,"        cmd := exec.Command(""pandoc"", cmdText...)","['cmd', ':=', 'exec', '.', 'Command', '(', '""pandoc""', ',', 'cmdText', '...)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
246,        err = cmd.Run(),"['err', '=', 'cmd', '.', 'Run', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
247,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
248,"            fmt.Println(""Conversion failed! Make sure you've installed Pandoc (http://johnmacfarlane.net/pandoc/installing.html) if you want to convert the generated Markdown file to an ebook compatible format. In the meantime, we've left you the Markdown file."")","['fmt', '.', 'Println', '(', '""Conversion failed! Make sure you\'ve installed Pandoc (http://johnmacfarlane.net/pandoc/installing.html) if you want to convert the generated Markdown file to an ebook compatible format. In the meantime, we\'ve left you the Markdown file.""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
249,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
250,"            _ = os.Remove(""Worm.md"")","['_', '=', 'os', '.', 'Remove', '(', '""Worm.md""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
251,"            fmt.Println(""Completed!"")","['fmt', '.', 'Println', '(', '""Completed!""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
252,        },['}'],['OPERATOR']
253,    },['}'],['OPERATOR']
254,    // Run the application,['// Run the application'],"['COMMENT', 'VB', 'DT', 'NN']"
255,    app.Run(os.Args),"['app', '.', 'Run', '(', 'os', '.', 'Args', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
256,},['}'],['OPERATOR']
