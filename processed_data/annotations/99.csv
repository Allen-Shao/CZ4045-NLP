,text,token,annotation
0,package controllers,"['package', 'controllers']","['KEYWORD', 'IDENTIFIER']"
1,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
2,"    ""RESTMONGOMVC/models""","['""RESTMONGOMVC/models""']",['STRING_LITERAL']
3,"    ""encoding/json""","['""encoding/json""']",['STRING_LITERAL']
4,"    ""log""","['""log""']",['STRING_LITERAL']
5,"    ""net/http""","['""net/http""']",['STRING_LITERAL']
6,"    ""time""","['""time""']",['STRING_LITERAL']
7,"    ""github.com/gorilla/mux""","['""github.com/gorilla/mux""']",['STRING_LITERAL']
8,"    ""gopkg.in/mgo.v2""","['""gopkg.in/mgo.v2""']",['STRING_LITERAL']
9,"    ""gopkg.in/mgo.v2/bson""","['""gopkg.in/mgo.v2/bson""']",['STRING_LITERAL']
10,),[')'],['OPERATOR']
11,var (,"['var', '(']","['KEYWORD', 'OPERATOR']"
12,    session    *mgo.Session,"['session', '*', 'mgo', '.', 'Session']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
13,    collection *mgo.Collection,"['collection', '*', 'mgo', '.', 'Collection']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
14,    err        error,"['err', 'error']","['IDENTIFIER', 'IDENTIFIER']"
15,),[')'],['OPERATOR']
16,type (,"['type', '(']","['KEYWORD', 'OPERATOR']"
17,    // UserController represents the controller for operating on the User resource,['// UserController represents the controller for operating on the User resource'],"['COMMENT', 'NN', 'VBZ', 'DT', 'NN', 'IN', 'NN', 'IN', 'DT', 'NNP', 'NN']"
18,    NoteController struct {,"['NoteController', 'struct', '{']","['IDENTIFIER', 'KEYWORD', 'OPERATOR']"
19,        session *mgo.Session,"['session', '*', 'mgo', '.', 'Session']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
20,    },['}'],['OPERATOR']
21,),[')'],['OPERATOR']
22,// NewUserController provides a reference to a UserController with provided mongo session,['// NewUserController provides a reference to a UserController with provided mongo session'],"['COMMENT', 'NNP', 'VBZ', 'DT', 'NN', 'TO', 'DT', 'NNP', 'IN', 'JJ', 'NN', 'NN']"
23,func NewNoteController(s *mgo.Session) *NoteController {,"['func', 'NewNoteController', '(', 's', '*', 'mgo', '.', 'Session', ')', '*', 'NoteController', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
24,    return &NoteController{s},"['return', '&', 'NoteController', '{', 's', '}']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
25,},['}'],['OPERATOR']
26,"func (uc NoteController) GetNotes(w http.ResponseWriter, r *http.Request) {","['func', '(', 'uc', 'NoteController', ')', 'GetNotes', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
27,    var notes []models.Note,"['var', 'notes', '[]', 'models', '.', 'Note']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
28,    iter := collection.Find(nil).Iter(),"['iter', ':=', 'collection', '.', 'Find', '(', 'nil', ').', 'Iter', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
29,    result := models.Note{},"['result', ':=', 'models', '.', 'Note', '{}']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
30,    for iter.Next(&result) {,"['for', 'iter', '.', 'Next', '(&', 'result', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
31,"        notes = append(notes, result)","['notes', '=', 'append', '(', 'notes', ',', 'result', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
32,    },['}'],['OPERATOR']
33,"    w.Header().Set(""Content-Type"", ""application/json"")","['w', '.', 'Header', '().', 'Set', '(', '""Content-Type"", ""application/json""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
34,"    j, err := json.Marshal(models.NotesResource{Notes: notes})","['j', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'models', '.', 'NotesResource', '{', 'Notes', ':', 'notes', '})']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
35,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
36,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
37,    },['}'],['OPERATOR']
38,    w.Write(j),"['w', '.', 'Write', '(', 'j', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
39,},['}'],['OPERATOR']
40,"func (uc NoteController) CreateNote(w http.ResponseWriter, r *http.Request) {","['func', '(', 'uc', 'NoteController', ')', 'CreateNote', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
41,    var noteResource models.NoteResource,"['var', 'noteResource', 'models', '.', 'NoteResource']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
42,    err := json.NewDecoder(r.Body).Decode(¬eResource),"['err', ':=', 'json', '.', 'NewDecoder', '(', 'r', '.', 'Body', ').', 'Decode', '(', 'eResource', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
43,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
44,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
45,    },['}'],['OPERATOR']
46,    note := noteResource.Note,"['note', ':=', 'noteResource', '.', 'Note']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
47,    //get a new Id,['//get a new Id'],"['COMMENT', 'VB', 'DT', 'JJ', 'NNP']"
48,    obj_id := bson.NewObjectId(),"['obj_id', ':=', 'bson', '.', 'NewObjectId', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
49,    note.Id = obj_id,"['note', '.', 'Id', '=', 'obj_id']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
50,    note.CreatedOn = time.Now(),"['note', '.', 'CreatedOn', '=', 'time', '.', 'Now', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
51,    //Insert into document collection,['//Insert into document collection'],"['COMMENT', 'NNP', 'IN', 'NN', 'NN']"
52,    err = collection.Insert(¬e),"['err', '=', 'collection', '.', 'Insert', '(', 'e', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
53,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
54,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
55,    } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
56,"        log.Printf(""Inserted New Record with Title :%s"", note.Title)","['log', '.', 'Printf', '(', '""Inserted New Record with Title :%s""', ',', 'note', '.', 'Title', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
57,    },['}'],['OPERATOR']
58,"    j, err := json.Marshal(models.NoteResource{Note: note})","['j', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'models', '.', 'NoteResource', '{', 'Note', ':', 'note', '})']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
59,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
60,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
61,    },['}'],['OPERATOR']
62,"    w.Header().Set(""Content-Type"", ""application/json"")","['w', '.', 'Header', '().', 'Set', '(', '""Content-Type"", ""application/json""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
63,    w.Write(j),"['w', '.', 'Write', '(', 'j', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
64,},['}'],['OPERATOR']
65,"func (uc NoteController) UpdateNote(w http.ResponseWriter, r *http.Request) {","['func', '(', 'uc', 'NoteController', ')', 'UpdateNote', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
66,    var err error,"['var', 'err', 'error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
67,    //get id from incoming url,['//get id from incoming url'],"['COMMENT', 'VB', 'NN', 'IN', 'VBG', 'JJ']"
68,    vars := mux.Vars(r),"['var', 's', ':=', 'mux', '.', 'Vars', '(', 'r', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
69,"    id := bson.ObjectIdHex(vars[""id""])","['id', ':=', 'bson', '.', 'ObjectIdHex', '(', 'var', 's', '[', '""id""', '])']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
70,    //decode the incoming Note into json,['//decode the incoming Note into json'],"['COMMENT', 'VB', 'DT', 'JJ', 'NN', 'IN', 'NN']"
71,    var noteResource models.NoteResource,"['var', 'noteResource', 'models', '.', 'NoteResource']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
72,    err = json.NewDecoder(r.Body).Decode(¬eResource),"['err', '=', 'json', '.', 'NewDecoder', '(', 'r', '.', 'Body', ').', 'Decode', '(', 'eResource', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
73,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
74,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
75,    },['}'],['OPERATOR']
76,    //partial update on mongodb,['//partial update on mongodb'],"['COMMENT', 'JJ', 'NN', 'IN', 'NN']"
77,"    err = collection.Update(bson.M{""_id"": id},","['err', '=', 'collection', '.', 'Update', '(', 'bson', '.', 'M', '{', '""_id""', ':', 'id', '},']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
78,"        bson.M{""$set"": bson.M{","['bson', '.', 'M', '{', '""$set""', ':', 'bson', '.', 'M', '{']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
79,"            ""title"":      noteResource.Note.Title,","['""title""', ':', 'noteResource', '.', 'Note', '.', 'Title', ',']","['STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
80,"            ""decription"": noteResource.Note.Description,","['""decription""', ':', 'noteResource', '.', 'Note', '.', 'Description', ',']","['STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
81,        }}),['}})'],['OPERATOR']
82,    if err == nil {,"['if', 'err', '==', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
83,"        log.Printf(""Updated Note : %s"", id, noteResource.Note.Title)","['log', '.', 'Printf', '(', '""Updated Note : %s""', ',', 'id', ',', 'noteResource', '.', 'Note', '.', 'Title', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
84,    } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
85,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
86,    },['}'],['OPERATOR']
87,    w.WriteHeader(http.StatusNoContent),"['w', '.', 'WriteHeader', '(', 'http', '.', 'StatusNoContent', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
88,},['}'],['OPERATOR']
89,"func (uc NoteController) DeleteNote(w http.ResponseWriter, r *http.Request) {","['func', '(', 'uc', 'NoteController', ')', 'DeleteNote', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
90,    var err error,"['var', 'err', 'error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
91,    vars := mux.Vars(r),"['var', 's', ':=', 'mux', '.', 'Vars', '(', 'r', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
92,"    id := vars[""id""]","['id', ':=', 'var', 's', '[', '""id""', ']']","['IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
93,    //Remove from database,['//Remove from database'],"['COMMENT', 'VB', 'IN', 'NN']"
94,"    err = collection.Remove(bson.M{""_id"": bson.ObjectIdHex(id)})","['err', '=', 'collection', '.', 'Remove', '(', 'bson', '.', 'M', '{', '""_id""', ':', 'bson', '.', 'ObjectIdHex', '(', 'id', ')})']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
95,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
96,"        log.Printf(""Could not find the Note %s to delete"", id)","['log', '.', 'Printf', '(', '""Could not find the Note %s to delete""', ',', 'id', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
97,    },['}'],['OPERATOR']
98,    w.WriteHeader(http.StatusNoContent),"['w', '.', 'WriteHeader', '(', 'http', '.', 'StatusNoContent', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
99,},['}'],['OPERATOR']
