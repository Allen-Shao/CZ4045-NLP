,text,token,annotation
0,"I'm trying to encrypt some text inside a database to be loaded and decrypted during program startup.

I have tried a few methods, including a third party library https://github.com/richard-lyman/lithcrypt to no avail. Using the following method encrypts/decrypts 8/10 items, but it seems that some padding residue is left behind at some point in the encrypt/decrypt. As it stands my code is like this:

","[""I'm"", 'trying', 'to', 'encrypt', 'some', 'text', 'inside', 'a', 'database', 'to', 'be', 'loaded', 'and', 'decrypted', 'during', 'program', 'startup.', 'I', 'have', 'tried', 'a', 'few', 'methods,', 'including', 'a', 'third', 'party', 'library', 'https://github.com/richard-lyman/lithcrypt', 'to', 'no', 'avail.', 'Using', 'the', 'following', 'method', 'encrypts/decrypts', '8/10', 'items,', 'but', 'it', 'seems', 'that', 'some', 'padding', 'residue', 'is', 'left', 'behind', 'at', 'some', 'point', 'in', 'the', 'encrypt/decrypt.', 'As', 'it', 'stands', 'my', 'code', 'is', 'like', 'this:']","['NNP', 'VBG', 'TO', 'VB', 'DT', 'NN', 'IN', 'DT', 'NN', 'TO', 'VB', 'VBN', 'CC', 'VBN', 'IN', 'NN', 'NN', 'PRP', 'VBP', 'VBN', 'DT', 'JJ', 'NN', 'VBG', 'DT', 'JJ', 'NN', 'JJ', 'NN', 'TO', 'DT', 'NN', 'VBG', 'DT', 'JJ', 'NN', 'VBZ', 'CD', 'NN', 'CC', 'PRP', 'VBZ', 'IN', 'DT', 'NN', 'NN', 'VBZ', 'VBN', 'NN', 'IN', 'DT', 'NN', 'IN', 'DT', 'NN', 'IN', 'PRP', 'VBZ', 'PRP$', 'NN', 'VBZ', 'IN', 'NN']"
1,package client                                                                                                                                                                                              ,"['package', 'client']","['KEYWORD', 'IDENTIFIER']"
2,import (                                                                                                                                                                                                    ,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""encoding/base64""                                                                                                                                                                                       ","['""encoding/base64""']",['STRING_LITERAL']
4,"    ""crypto/aes""                                                                                                                                                                                            ","['""crypto/aes""']",['STRING_LITERAL']
5,"    ""crypto/cipher""                                                                                                                                                                                         ","['""crypto/cipher""']",['STRING_LITERAL']
6,"    ""fmt""                                                                                                                                                                                                   ","['""fmt""']",['STRING_LITERAL']
7,) ,[')'],['PUNCTUATION']
8,"var iv = []byte{34, 35, 35, 57, 68, 4, 35, 36, 7, 8, 35, 23, 35, 86, 35, 23}","['var', 'iv', '=', '[]', 'byte', '{', '34', ',', '35', ',', '35', ',', '57', ',', '68', ',', '4', ',', '35', ',', '36', ',', '7', ',', '8', ',', '35', ',', '23', ',', '35', ',', '86', ',', '35', ',', '23', '}']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
9,func encodeBase64(b []byte) string {                                                                                                                                                                        ,"['func', 'encodeBase64', '(', 'b', '[]', 'byte', ')', 'string', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
10,    return base64.StdEncoding.EncodeToString(b)                                                                                                                                                             ,"['return', 'base64', '.', 'StdEncoding.EncodeToString(b)']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
11,}                                                                                                                                                                                                           ,['}'],['PUNCTUATION']
12,func decodeBase64(s string) []byte {                                                                                                                                                                        ,"['func', 'decodeBase64', '(', 's', 'string', ')', '[]', 'byte', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
13,"    data, err := base64.StdEncoding.DecodeString(s)                                                                                                                                                         ","['data', ',', 'err', ':=', 'base64', '.', 'StdEncoding.DecodeString(s)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
14,    if err != nil { panic(err) }                                                                                                                                                                            ,"['if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
15,    return data                                                                                                                                                                                             ,"['return', 'data']","['KEYWORD', 'IDENTIFIER']"
16,}                                                                                                                                                                                                           ,['}'],['PUNCTUATION']
17,"func Encrypt(key, text string) string {                                                                                                                                                                     ","['func', 'Encrypt', '(', 'key', ',', 'text', 'string', ')', 'string', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
18,"    block, err := aes.NewCipher([]byte(key))                                                                                                                                                                ","['block', ',', 'err', ':=', 'aes.NewCipher([]byte(key))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
19,    if err != nil { panic(err) }                                                                                                                                                                            ,"['if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
20,    plaintext := []byte(text)                                                                                                                                                                               ,"['plaintext', ':=', '[]', 'byte', '(', 'text', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
21,"    cfb := cipher.NewCFBEncrypter(block, iv)                                                                                                                                                                ","['cfb', ':=', 'cipher.NewCFBEncrypter(block, iv)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
22,"    ciphertext := make([]byte, len(plaintext))                                                                                                                                                              ","['ciphertext', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'plaintext', '))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
23,"    cfb.XORKeyStream(ciphertext, plaintext)                                                                                                                                                                 ","['cfb.XORKeyStream(ciphertext, plaintext)']",['FUNCTION_CALL']
24,    return encodeBase64(ciphertext)                                                                                                                                                                         ,"['return', 'encodeBase64', '(', 'ciphertext', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
25,}                                                                                                                                                                                                           ,['}'],['PUNCTUATION']
26,"func Decrypt(key, text string) string {                                                                                                                                                                     ","['func', 'Decrypt', '(', 'key', ',', 'text', 'string', ')', 'string', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
27,"    block, err := aes.NewCipher([]byte(key))                                                                                                                                                                ","['block', ',', 'err', ':=', 'aes.NewCipher([]byte(key))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
28,    if err != nil { panic(err) }                                                                                                                                                                            ,"['if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
29,    ciphertext := decodeBase64(text)                                                                                                                                                                        ,"['ciphertext', ':=', 'decodeBase64', '(', 'text', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
30,"    cfb := cipher.NewCFBEncrypter(block, iv)                                                                                                                                                                ","['cfb', ':=', 'cipher.NewCFBEncrypter(block, iv)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
31,"    plaintext := make([]byte, len(ciphertext))                                                                                                                                                              ","['plaintext', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'ciphertext', '))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
32,"    cfb.XORKeyStream(plaintext, ciphertext)                                                                                                                                                                 ","['cfb.XORKeyStream(plaintext, ciphertext)']",['FUNCTION_CALL']
33,}                          ,['}'],['PUNCTUATION']
34,"

It was mentioned to me that I might need to pad the string, but it seems strange that I would have to pad a stream cipher.        

Below is an example of this error: http://play.golang.org/p/4FQBAeHgRs                                                                                                                                                           
","['It', 'was', 'mentioned', 'to', 'me', 'that', 'I', 'might', 'need', 'to', 'pad', 'the', 'string,', 'but', 'it', 'seems', 'strange', 'that', 'I', 'would', 'have', 'to', 'pad', 'a', 'stream', 'cipher.', 'Below', 'is', 'an', 'example', 'of', 'this', 'error:', 'http://play.golang.org/p/4FQBAeHgRs']","['PRP', 'VBD', 'VBN', 'TO', 'PRP', 'IN', 'PRP', 'MD', 'VB', 'TO', 'VB', 'DT', 'NN', 'CC', 'PRP', 'VBZ', 'JJ', 'IN', 'PRP', 'MD', 'VB', 'TO', 'VB', 'DT', 'NN', 'NN', 'NNP', 'VBZ', 'DT', 'NN', 'IN', 'DT', 'NN', 'NN']"
