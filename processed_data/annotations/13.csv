,text,token,annotation
0,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
1,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
2,"        ""fmt""","['""fmt""']",['STRING_LITERAL']
3,"        ""runtime""","['""runtime""']",['STRING_LITERAL']
4,"        ""unsafe""","['""unsafe""']",['STRING_LITERAL']
5,),[')'],['OPERATOR']
6,func Alloc() uint64 {,"['func', 'Alloc', '()', 'uint64', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
7,        var stats runtime.MemStats,"['var', 'stats', 'runtime', '.', 'MemStats']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
8,        runtime.GC(),"['runtime', '.', 'GC', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
9,        runtime.ReadMemStats(&stats),"['runtime', '.', 'ReadMemStats', '(&', 'stats', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
10,        return stats.Alloc - uint64(unsafe.Sizeof(hs[0]))*uint64(cap(hs)),"['return', 'stats', '.', 'Alloc', '-', 'uint64', '(', 'unsafe', '.', 'Sizeof', '(', 'hs', '[', '0', ']))*', 'uint64', '(', 'cap', '(', 'hs', '))']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
11,},['}'],['OPERATOR']
12,var hs = []*map[int16]byte{},"['var', 'hs', '=', '[]*', 'map', '[', 'int16', ']', 'byte', '{}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
13,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
14,        hs := []*map[int16]byte{},"['hs', ':=', '[]*', 'map', '[', 'int16', ']', 'byte', '{}']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
15,        n := 1000,"['n', ':=', '1000']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
16,        before := Alloc(),"['before', ':=', 'Alloc', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
17,        for i := 0; i < n; i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', 'n', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
18,                h := map[int16]byte{},"['h', ':=', 'map', '[', 'int16', ']', 'byte', '{}']","['IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
19,"                hs = append(hs, &h)","['hs', '=', 'append', '(', 'hs', ',', '&', 'h', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
20,        },['}'],['OPERATOR']
21,        after := Alloc(),"['after', ':=', 'Alloc', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
22,        emptyPerMap := float64(after-before) / float64(n),"['emptyPerMap', ':=', 'float64', '(', 'after', '-', 'before', ')', 'float64', '(', 'n', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
23,"        fmt.Printf(""Bytes used for %d empty maps: %d, bytes/map %.1f\n"", n, after-before, emptyPerMap)","['fmt', '.', 'Printf', '(', '""Bytes used for %d empty maps: %d, bytes/map %.1f\\n""', ',', 'n', ',', 'after', '-', 'before', ',', 'emptyPerMap', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
24,        hs = nil,"['hs', '=', 'nil']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
25,        k := 1,"['k', ':=', '1']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
26,        for p := 1; p < 16; p++ {,"['for', 'p', ':=', '1', ';', 'p', '<', '16', ';', 'p', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
27,                before = Alloc(),"['before', '=', 'Alloc', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
28,                for i := 0; i < n; i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', 'n', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
29,                        h := map[int16]byte{},"['h', ':=', 'map', '[', 'int16', ']', 'byte', '{}']","['IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
30,                        for j := 0; j < k; j++ {,"['for', 'j', ':=', '0', ';', 'j', '<', 'k', ';', 'j', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
31,                                h[int16(j)] = byte(j),"['h', '[', 'int16', '(', 'j', ')]', '=', 'byte', '(', 'j', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
32,                        },['}'],['OPERATOR']
33,"                        hs = append(hs, &h)","['hs', '=', 'append', '(', 'hs', ',', '&', 'h', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
34,                },['}'],['OPERATOR']
35,                after = Alloc(),"['after', '=', 'Alloc', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
36,                fullPerMap := float64(after-before) / float64(n),"['fullPerMap', ':=', 'float64', '(', 'after', '-', 'before', ')', 'float64', '(', 'n', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
37,"                fmt.Printf(""Bytes used for %d maps with %d entries: %d, bytes/map %.1f\n"", n, k, after-before, fullPerMap)","['fmt', '.', 'Printf', '(', '""Bytes used for %d maps with %d entries: %d, bytes/map %.1f\\n""', ',', 'n', ',', 'k', ',', 'after', '-', 'before', ',', 'fullPerMap', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
38,"                fmt.Printf(""Bytes per entry %.1f\n"", (fullPerMap-emptyPerMap)/float64(k))","['fmt', '.', 'Printf', '(', '""Bytes per entry %.1f\\n""', ',', '(', 'fullPerMap', '-', 'emptyPerMap', ')', 'float64', '(', 'k', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
39,                k *= 2,"['k', '*=', '2']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
40,        },['}'],['OPERATOR']
41,},['}'],['OPERATOR']
