,text,token,annotation
0,"You appear to have several different problems in your code.


There is no need to truncate the data to 128 characters in your PHP code as you are not doing the same in your go code. This discrepancy will cause the bytes to be different and therefore the computed signatures to be different. 
You are using the ","['You', 'appear', 'to', 'have', 'several', 'different', 'problems', 'in', 'your', 'code.', 'There', 'is', 'no', 'need', 'to', 'truncate', 'the', 'data', 'to', '128', 'characters', 'in', 'your', 'PHP', 'code', 'as', 'you', 'are', 'not', 'doing', 'the', 'same', 'in', 'your', 'go', 'code.', 'This', 'discrepancy', 'will', 'cause', 'the', 'bytes', 'to', 'be', 'different', 'and', 'therefore', 'the', 'computed', 'signatures', 'to', 'be', 'different.', 'You', 'are', 'using', 'the']","['PRP', 'VBP', 'TO', 'VB', 'JJ', 'JJ', 'NNS', 'IN', 'PRP$', 'NN', 'EX', 'VBZ', 'DT', 'NN', 'TO', 'VB', 'DT', 'NNS', 'TO', 'CD', 'NNS', 'IN', 'PRP$', 'NNP', 'NN', 'IN', 'PRP', 'VBP', 'RB', 'VBG', 'DT', 'JJ', 'IN', 'PRP$', 'NN', 'NN', 'DT', 'NN', 'MD', 'VB', 'DT', 'NNS', 'TO', 'VB', 'JJ', 'CC', 'RB', 'DT', 'JJ', 'NNS', 'TO', 'VB', 'VBN', 'PRP', 'VBP', 'VBG', 'DT']"
1,openssl_public_decrypt,['openssl_public_decrypt'],['IDENTIFIER']
2," function to sign the data. While this does work in theory it's error prone. You are also using a public-key to sign the data, which is wrong - only private-keys can sign. It's much better to use PHP's openssl_sign function. 


Another source of error could be your signing code that uses the private key, which is not shown here. 

PHP's and Go's public key cryptography should be entirely compatible. To test this I've created the following identical signing scripts in both PHP and Go.

","['function', 'to', 'sign', 'the', 'data.', 'While', 'this', 'does', 'work', 'in', 'theory', ""it's"", 'error', 'prone.', 'You', 'are', 'also', 'using', 'a', 'public-key', 'to', 'sign', 'the', 'data,', 'which', 'is', 'wrong', '-', 'only', 'private-keys', 'can', 'sign.', ""It's"", 'much', 'better', 'to', 'use', ""PHP's"", 'openssl_sign', 'function.', 'Another', 'source', 'of', 'error', 'could', 'be', 'your', 'signing', 'code', 'that', 'uses', 'the', 'private', 'key,', 'which', 'is', 'not', 'shown', 'here.', ""PHP's"", 'and', ""Go's"", 'public', 'key', 'cryptography', 'should', 'be', 'entirely', 'compatible.', 'To', 'test', 'this', ""I've"", 'created', 'the', 'following', 'identical', 'signing', 'scripts', 'in', 'both', 'PHP', 'and', 'Go.']","['NN', 'TO', 'VB', 'DT', 'NN', 'IN', 'DT', 'VBZ', 'VB', 'IN', 'JJ', 'JJ', 'NN', 'NN', 'PRP', 'VBP', 'RB', 'VBG', 'DT', 'JJ', 'TO', 'VB', 'DT', 'NN', 'WDT', 'VBZ', 'JJ', ':', 'RB', 'NNS', 'MD', 'VB', 'NNP', 'RB', 'JJR', 'TO', 'VB', 'NNP', 'NN', 'NN', 'DT', 'NN', 'IN', 'NN', 'MD', 'VB', 'PRP$', 'VBG', 'NN', 'WDT', 'VBZ', 'DT', 'JJ', 'NN', 'WDT', 'VBZ', 'RB', 'VBN', 'NN', 'NNP', 'CC', 'NNP', 'JJ', 'NN', 'NN', 'MD', 'VB', 'RB', 'JJ', 'TO', 'VB', 'DT', 'NNP', 'VBD', 'DT', 'JJ', 'JJ', 'VBG', 'NNS', 'IN', 'DT', 'NNP', 'CC', 'NNP']"
3,<?php,"['<', 'php']","['OPERATOR', 'IDENTIFIER']"
4,"$data = ""TEST DATA TO COMPUTE"";","['$', 'data', '=', '""TEST DATA TO COMPUTE""', ';']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
5,"$privKeyPEM = ""-----BEGIN RSA PRIVATE KEY-----","['$', 'privKeyPEM', '=', '-----', 'BEGIN', 'RSA', 'PRIVATE', 'KEY', '-----']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
6,MIIBOgIBAAJBAK3ADijXKw72+YbC5QKK2y7IosCp7rWOhTf8Ph07ZA0KjdbKtfL/,"['MIIBOgIBAAJBAK3ADijXKw72', '+', 'YbC5QKK2y7IosCp7rWOhTf8Ph07ZA0KjdbKtfL']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
7,7dmNKjSP6EkC/DJUWfZJNLIlGOtDLLA/AnsCAwEAAQJAQj9kJrZDuKT6ZyOQZfPD,"['7', 'dmNKjSP6EkC', 'DJUWfZJNLIlGOtDLLA', 'AnsCAwEAAQJAQj9kJrZDuKT6ZyOQZfPD']","['DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
8,tobRZ1xjo93/dWU72bF3aHDo4ILMy2Kigy5yhZU0ZGjOuPv5eUOLRe/yxYQf6B5J,"['tobRZ1xjo93', 'dWU72bF3aHDo4ILMy2Kigy5yhZU0ZGjOuPv5eUOLRe', 'yxYQf6B5J']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
9,AQIhANbhfZ4QJC8dLXAqcsxOXuLgztzbKixUre0gnhiVSd1hAiEAzv+sHJ4PMjKs,"['AQIhANbhfZ4QJC8dLXAqcsxOXuLgztzbKixUre0gnhiVSd1hAiEAzv', '+', 'sHJ4PMjKs']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
10,Iuf6/nUI9XFgQQRd+NGRovyHRZC18VsCIAX7AKQFjvxAs6MLi2ZkR//IgfljoCjb,"['//', 'IgfljoCjb']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'COMMENT', 'NN']"
11,snuHDN9iSEwBAiEAmAc1XCtGE+Mdg+GG+T3xn3pubDIN5oHcia0YmKIIzsMCIEy1,"['snuHDN9iSEwBAiEAmAc1XCtGE', '+', 'Mdg', '+', 'GG', '+', 'T3xn3pubDIN5oHcia0YmKIIzsMCIEy1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
12,fWM5cIJ9bAUExKB6MV8PF+9EjDvXzbSk1/Ycta8z,"['fWM5cIJ9bAUExKB6MV8PF', '+', '9', 'EjDvXzbSk1', 'Ycta8z']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER']"
13,"-----END RSA PRIVATE KEY-----"";","['-----', 'END', 'RSA', 'PRIVATE', 'KEY', '-----', ';']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
14,// Parse private key,"['//', 'Parse', 'private', 'key']","['COMMENT', 'NNP', 'JJ', 'NN']"
15,$privkey = openssl_pkey_get_private($privKeyPEM);,"['$', 'privkey', '=', 'openssl_pkey_get_private', '($', 'privKeyPEM', ');']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
16,if (!$privkey) {,"['if', '(!$', 'privkey', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
17,"    exit(""Could not parse private key"");","['exit', '(', '""Could not parse private key""', ');']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
18,},['}'],['OPERATOR']
19,// Compute the signature,"['//', 'Compute', 'the', 'signature']","['COMMENT', 'VB', 'DT', 'NN']"
20,$signature = '';,"['$', 'signature', '=', ';']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
21,"$ok = openssl_sign($data, $signature, $privkey, OPENSSL_ALGO_SHA1); //SHA1 of $data is computed automatically by this function","['//', 'SHA1', 'of', '$data', 'is', 'computed', 'automatically', 'by', 'this', 'function']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'COMMENT', 'NNP', 'IN', 'NNP', 'VBZ', 'VBN', 'RB', 'IN', 'DT', 'NN']"
22,if (!$ok) {,"['if', '(!$', 'ok', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
23,"    exit(""Could not compute signature"");","['exit', '(', '""Could not compute signature""', ');']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
24,},['}'],['OPERATOR']
25,// Print the output,"['//', 'Print', 'the', 'output']","['COMMENT', 'VB', 'DT', 'NN']"
26,print base64_encode($signature);,"['print', 'base64_encode', '($', 'signature', ');']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
27,"

And the same thing in Go:

","['And', 'the', 'same', 'thing', 'in', 'Go:']","['CC', 'DT', 'JJ', 'NN', 'IN', 'NNP']"
28,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
29,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
30,"    ""crypto""","['""crypto""']",['STRING_LITERAL']
31,"    ""crypto/rand""","['""crypto/rand""']",['STRING_LITERAL']
32,"    ""crypto/rsa""","['""crypto/rsa""']",['STRING_LITERAL']
33,"    ""crypto/sha1""","['""crypto/sha1""']",['STRING_LITERAL']
34,"    ""crypto/x509""","['""crypto/x509""']",['STRING_LITERAL']
35,"    ""encoding/base64""","['""encoding/base64""']",['STRING_LITERAL']
36,"    ""encoding/pem""","['""encoding/pem""']",['STRING_LITERAL']
37,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
38,"    ""log""","['""log""']",['STRING_LITERAL']
39,),[')'],['OPERATOR']
40,const (,"['const', '(']","['KEYWORD', 'OPERATOR']"
41,"    data = ""TEST DATA TO COMPUTE""","['data', '=', '""TEST DATA TO COMPUTE""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
42,    privKeyPEM = `-----BEGIN RSA PRIVATE KEY-----,"['privKeyPEM', '=', '-----', 'BEGIN', 'RSA', 'PRIVATE', 'KEY', '-----']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
43,MIIBOgIBAAJBAK3ADijXKw72+YbC5QKK2y7IosCp7rWOhTf8Ph07ZA0KjdbKtfL/,"['MIIBOgIBAAJBAK3ADijXKw72', '+', 'YbC5QKK2y7IosCp7rWOhTf8Ph07ZA0KjdbKtfL']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
44,7dmNKjSP6EkC/DJUWfZJNLIlGOtDLLA/AnsCAwEAAQJAQj9kJrZDuKT6ZyOQZfPD,"['7', 'dmNKjSP6EkC', 'DJUWfZJNLIlGOtDLLA', 'AnsCAwEAAQJAQj9kJrZDuKT6ZyOQZfPD']","['DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
45,tobRZ1xjo93/dWU72bF3aHDo4ILMy2Kigy5yhZU0ZGjOuPv5eUOLRe/yxYQf6B5J,"['tobRZ1xjo93', 'dWU72bF3aHDo4ILMy2Kigy5yhZU0ZGjOuPv5eUOLRe', 'yxYQf6B5J']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
46,AQIhANbhfZ4QJC8dLXAqcsxOXuLgztzbKixUre0gnhiVSd1hAiEAzv+sHJ4PMjKs,"['AQIhANbhfZ4QJC8dLXAqcsxOXuLgztzbKixUre0gnhiVSd1hAiEAzv', '+', 'sHJ4PMjKs']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
47,Iuf6/nUI9XFgQQRd+NGRovyHRZC18VsCIAX7AKQFjvxAs6MLi2ZkR//IgfljoCjb,"['//', 'IgfljoCjb']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'COMMENT', 'NN']"
48,snuHDN9iSEwBAiEAmAc1XCtGE+Mdg+GG+T3xn3pubDIN5oHcia0YmKIIzsMCIEy1,"['snuHDN9iSEwBAiEAmAc1XCtGE', '+', 'Mdg', '+', 'GG', '+', 'T3xn3pubDIN5oHcia0YmKIIzsMCIEy1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
49,fWM5cIJ9bAUExKB6MV8PF+9EjDvXzbSk1/Ycta8z,"['fWM5cIJ9bAUExKB6MV8PF', '+', '9', 'EjDvXzbSk1', 'Ycta8z']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER']"
50,-----END RSA PRIVATE KEY-----`,"['-----', 'END', 'RSA', 'PRIVATE', 'KEY', '-----']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
51,),[')'],['OPERATOR']
52,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
53,    // Parse private key into rsa.PrivateKey,"['//', 'Parse', 'private', 'key', 'into', 'rsa.PrivateKey']","['COMMENT', 'NNP', 'JJ', 'NN', 'IN', 'NN']"
54,"    PEMBlock, _ := pem.Decode([]byte(privKeyPEM))","['PEMBlock', ',', '_', ':=', 'pem', '.', 'Decode', '([]', 'byte', '(', 'privKeyPEM', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
55,    if PEMBlock == nil {,"['if', 'PEMBlock', '==', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
56,"        log.Fatal(""Could not parse Private Key PEM"")","['log', '.', 'Fatal', '(', '""Could not parse Private Key PEM""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
57,    },['}'],['OPERATOR']
58,"    if PEMBlock.Type != ""RSA PRIVATE KEY"" {","['if', 'PEMBlock', '.', 'Type', '!=', '""RSA PRIVATE KEY""', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
59,"        log.Fatal(""Found wrong key type"")","['log', '.', 'Fatal', '(', '""Found wrong key type""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
60,    },['}'],['OPERATOR']
61,"    privkey, err := x509.ParsePKCS1PrivateKey(PEMBlock.Bytes)","['privkey', ',', 'err', ':=', 'x509', '.', 'ParsePKCS1PrivateKey', '(', 'PEMBlock', '.', 'Bytes', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
62,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
63,        log.Fatal(err),"['log', '.', 'Fatal', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
64,    },['}'],['OPERATOR']
65,    // Compute the sha1,"['//', 'Compute', 'the', 'sha1']","['COMMENT', 'VB', 'DT', 'NN']"
66,    h := sha1.New(),"['h', ':=', 'sha1', '.', 'New', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
67,    h.Write([]byte(data)),"['h', '.', 'Write', '([]', 'byte', '(', 'data', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
68,    // Sign the data,"['//', 'Sign', 'the', 'data']","['COMMENT', 'NNP', 'DT', 'NN']"
69,"    signature, err := rsa.SignPKCS1v15(rand.Reader, privkey, crypto.SHA1, h.Sum(nil))","['signature', ',', 'err', ':=', 'rsa', '.', 'SignPKCS1v15', '(', 'rand', '.', 'Reader', ',', 'privkey', ',', 'crypto', '.', 'SHA1', ',', 'h', '.', 'Sum', '(', 'nil', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
70,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
71,        log.Fatal(err),"['log', '.', 'Fatal', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
72,    },['}'],['OPERATOR']
73,    // Print the results,"['//', 'Print', 'the', 'results']","['COMMENT', 'VB', 'DT', 'NNS']"
74,    fmt.Print(base64.StdEncoding.EncodeToString(signature)),"['fmt', '.', 'Print', '(', 'base64', '.', 'StdEncoding', '.', 'EncodeToString', '(', 'signature', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
75,},['}'],['OPERATOR']
76,"

You can verify that these do, indeed, produce the same output and sign the same data in the same way. 

We can also use both PHP and Go to verify the signatures. Here are a set of PHP and Go scripts that will both read a signature from standard input and verify it. 

","['You', 'can', 'verify', 'that', 'these', 'do,', 'indeed,', 'produce', 'the', 'same', 'output', 'and', 'sign', 'the', 'same', 'data', 'in', 'the', 'same', 'way.', 'We', 'can', 'also', 'use', 'both', 'PHP', 'and', 'Go', 'to', 'verify', 'the', 'signatures.', 'Here', 'are', 'a', 'set', 'of', 'PHP', 'and', 'Go', 'scripts', 'that', 'will', 'both', 'read', 'a', 'signature', 'from', 'standard', 'input', 'and', 'verify', 'it.']","['PRP', 'MD', 'VB', 'IN', 'DT', 'NNS', 'VBP', 'VBP', 'DT', 'JJ', 'NN', 'CC', 'VB', 'DT', 'JJ', 'NN', 'IN', 'DT', 'JJ', 'IN', 'PRP', 'MD', 'RB', 'VB', 'DT', 'NNP', 'CC', 'NNP', 'TO', 'VB', 'DT', 'NN', 'RB', 'VBP', 'DT', 'NN', 'IN', 'NNP', 'CC', 'NNP', 'VBP', 'WDT', 'MD', 'DT', 'VB', 'DT', 'NN', 'IN', 'JJ', 'NN', 'CC', 'VB', 'NN']"
77,<?php  ,"['<', 'php']","['OPERATOR', 'IDENTIFIER']"
78,"$data = ""TEST DATA TO COMPUTE"";","['$', 'data', '=', '""TEST DATA TO COMPUTE""', ';']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
79,"$pubKeyPEM = ""-----BEGIN PUBLIC KEY-----","['$', 'pubKeyPEM', '=', '-----', 'BEGIN', 'PUBLIC', 'KEY', '-----']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
80,MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAK3ADijXKw72+YbC5QKK2y7IosCp7rWO,"['MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAK3ADijXKw72', '+', 'YbC5QKK2y7IosCp7rWO']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
81,hTf8Ph07ZA0KjdbKtfL/7dmNKjSP6EkC/DJUWfZJNLIlGOtDLLA/AnsCAwEAAQ==,"['hTf8Ph07ZA0KjdbKtfL', '7', 'dmNKjSP6EkC', 'DJUWfZJNLIlGOtDLLA', 'AnsCAwEAAQ', '==']","['IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
82,"-----END PUBLIC KEY-----"";","['-----', 'END', 'PUBLIC', 'KEY', '-----', ';']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
83,// Parse public key,"['//', 'Parse', 'public', 'key']","['COMMENT', 'NNP', 'JJ', 'NN']"
84,$pubkey = openssl_pkey_get_public($pubKeyPEM);,"['$', 'pubkey', '=', 'openssl_pkey_get_public', '($', 'pubKeyPEM', ');']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
85,if (!$pubkey) {,"['if', '(!$', 'pubkey', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
86,"    exit(""Could not parse public key"");","['exit', '(', '""Could not parse public key""', ');']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
87,},['}'],['OPERATOR']
88,// Read the signature from stdin,"['//', 'Read', 'the', 'signature', 'from', 'stdin']","['COMMENT', 'VB', 'DT', 'NN', 'IN', 'NN']"
89,"$stdin = file_get_contents(""php://stdin"");","['$', 'stdin', '=', 'file_get_contents', '(', '""php://stdin""', ');']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
90,$signature = base64_decode($stdin);,"['$', 'signature', '=', 'base64_decode', '($', 'stdin', ');']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
91,// Verify the signature,"['//', 'Verify', 'the', 'signature']","['COMMENT', 'VB', 'DT', 'NN']"
92,"$ok = openssl_verify($data, $signature, $pubkey, OPENSSL_ALGO_SHA1); //SHA1 of $data is computed automatically by this function","['//', 'SHA1', 'of', '$data', 'is', 'computed', 'automatically', 'by', 'this', 'function']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'COMMENT', 'NNP', 'IN', 'NNP', 'VBZ', 'VBN', 'RB', 'IN', 'DT', 'NN']"
93,if ($ok == 1) {,"['if', '($', 'ok', '==', '1', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR']"
94,"    print ""OK\n""; // it worked!","['//', 'it', 'worked!']","['IDENTIFIER', 'STRING_LITERAL', 'OPERATOR', 'COMMENT', 'PRP', 'VBD']"
95,  exit(0);,"['exit', '(', '0', ');']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
96,},['}'],['OPERATOR']
97,else if ($ok == 0) {,"['else', 'if', '($', 'ok', '==', '0', ')', '{']","['KEYWORD', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR']"
98,"  exit(""Signature verification failed"");","['exit', '(', '""Signature verification failed""', ');']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
99,},['}'],['OPERATOR']
100,else {,"['else', '{']","['KEYWORD', 'OPERATOR']"
101,"  exit(""Error verifying signature"");","['exit', '(', '""Error verifying signature""', ');']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
102,},['}'],['OPERATOR']
103,"

And the same verification code in Go:

","['And', 'the', 'same', 'verification', 'code', 'in', 'Go:']","['CC', 'DT', 'JJ', 'NN', 'NN', 'IN', 'NNP']"
104,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
105,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
106,"    ""crypto""","['""crypto""']",['STRING_LITERAL']
107,"    ""crypto/rsa""","['""crypto/rsa""']",['STRING_LITERAL']
108,"    ""crypto/sha1""","['""crypto/sha1""']",['STRING_LITERAL']
109,"    ""crypto/x509""","['""crypto/x509""']",['STRING_LITERAL']
110,"    ""encoding/base64""","['""encoding/base64""']",['STRING_LITERAL']
111,"    ""encoding/pem""","['""encoding/pem""']",['STRING_LITERAL']
112,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
113,"    ""io/ioutil""","['""io/ioutil""']",['STRING_LITERAL']
114,"    ""log""","['""log""']",['STRING_LITERAL']
115,"    ""os""","['""os""']",['STRING_LITERAL']
116,),[')'],['OPERATOR']
117,const (,"['const', '(']","['KEYWORD', 'OPERATOR']"
118,"    data = ""TEST DATA TO COMPUTE""","['data', '=', '""TEST DATA TO COMPUTE""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
119,    pubKeyPEM = `-----BEGIN PUBLIC KEY-----,"['pubKeyPEM', '=', '-----', 'BEGIN', 'PUBLIC', 'KEY', '-----']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
120,MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAK3ADijXKw72+YbC5QKK2y7IosCp7rWO,"['MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAK3ADijXKw72', '+', 'YbC5QKK2y7IosCp7rWO']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
121,hTf8Ph07ZA0KjdbKtfL/7dmNKjSP6EkC/DJUWfZJNLIlGOtDLLA/AnsCAwEAAQ==,"['hTf8Ph07ZA0KjdbKtfL', '7', 'dmNKjSP6EkC', 'DJUWfZJNLIlGOtDLLA', 'AnsCAwEAAQ', '==']","['IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
122,-----END PUBLIC KEY-----`,"['-----', 'END', 'PUBLIC', 'KEY', '-----']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
123,),[')'],['OPERATOR']
124,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
125,    // Parse public key into rsa.PublicKey,"['//', 'Parse', 'public', 'key', 'into', 'rsa.PublicKey']","['COMMENT', 'NNP', 'JJ', 'NN', 'IN', 'NN']"
126,"    PEMBlock, _ := pem.Decode([]byte(pubKeyPEM))","['PEMBlock', ',', '_', ':=', 'pem', '.', 'Decode', '([]', 'byte', '(', 'pubKeyPEM', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
127,    if PEMBlock == nil {,"['if', 'PEMBlock', '==', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
128,"        log.Fatal(""Could not parse Public Key PEM"")","['log', '.', 'Fatal', '(', '""Could not parse Public Key PEM""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
129,    },['}'],['OPERATOR']
130,"    if PEMBlock.Type != ""PUBLIC KEY"" {","['if', 'PEMBlock', '.', 'Type', '!=', '""PUBLIC KEY""', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
131,"        log.Fatal(""Found wrong key type"")","['log', '.', 'Fatal', '(', '""Found wrong key type""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
132,    },['}'],['OPERATOR']
133,"    pubkey, err := x509.ParsePKIXPublicKey(PEMBlock.Bytes)","['pubkey', ',', 'err', ':=', 'x509', '.', 'ParsePKIXPublicKey', '(', 'PEMBlock', '.', 'Bytes', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
134,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
135,        log.Fatal(err),"['log', '.', 'Fatal', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
136,    },['}'],['OPERATOR']
137,    // compute the sha1,"['//', 'compute', 'the', 'sha1']","['COMMENT', 'VB', 'DT', 'NN']"
138,    h := sha1.New(),"['h', ':=', 'sha1', '.', 'New', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
139,    h.Write([]byte(data)),"['h', '.', 'Write', '([]', 'byte', '(', 'data', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
140,    // Read the signature from stdin,"['//', 'Read', 'the', 'signature', 'from', 'stdin']","['COMMENT', 'VB', 'DT', 'NN', 'IN', 'NN']"
141,"    b64 := base64.NewDecoder(base64.StdEncoding, os.Stdin)","['b64', ':=', 'base64', '.', 'NewDecoder', '(', 'base64', '.', 'StdEncoding', ',', 'os', '.', 'Stdin', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
142,"    signature, err := ioutil.ReadAll(b64)","['signature', ',', 'err', ':=', 'ioutil', '.', 'ReadAll', '(', 'b64', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
143,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
144,        log.Fatal(err),"['log', '.', 'Fatal', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
145,    },['}'],['OPERATOR']
146,    // Verify,"['//', 'Verify']","['COMMENT', 'VB']"
147,"    err = rsa.VerifyPKCS1v15(pubkey.(*rsa.PublicKey), crypto.SHA1, h.Sum(nil), signature)","['err', '=', 'rsa', '.', 'VerifyPKCS1v15', '(', 'pubkey', '.(*', 'rsa', '.', 'PublicKey', '),', 'crypto', '.', 'SHA1', ',', 'h', '.', 'Sum', '(', 'nil', '),', 'signature', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
148,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
149,        log.Fatal(err),"['log', '.', 'Fatal', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
150,    },['}'],['OPERATOR']
151,    // It verified!,"['//', 'It', 'verified!']","['COMMENT', 'PRP', 'VBD']"
152,"    fmt.Println(""OK"")","['fmt', '.', 'Println', '(', '""OK""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
153,},['}'],['OPERATOR']
154,"

We can mix and match these different scripts together and verify that PHP and Go are indeed fully compatible:

","['We', 'can', 'mix', 'and', 'match', 'these', 'different', 'scripts', 'together', 'and', 'verify', 'that', 'PHP', 'and', 'Go', 'are', 'indeed', 'fully', 'compatible:']","['PRP', 'MD', 'VB', 'CC', 'VB', 'DT', 'JJ', 'NNS', 'RB', 'CC', 'VB', 'DT', 'NNP', 'CC', 'NNP', 'VBP', 'RB', 'RB', 'VB']"
155,$ go run go-sign.go | go run go-verify.go,"['$', 'go', 'run', 'go', '-', 'sign', '.', 'go', '|', 'go', 'run', 'go', '-', 'verify', '.', 'go']","['OPERATOR', 'KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD']"
156,OK,['OK'],['IDENTIFIER']
157,$ go run go-sign.go | php php-verify.php,"['$', 'go', 'run', 'go', '-', 'sign', '.', 'go', '|', 'php', 'php', '-', 'verify', '.', 'php']","['OPERATOR', 'KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
158,OK,['OK'],['IDENTIFIER']
159,$ php php-sign.php | php php-verify.php,"['$', 'php', 'php', '-', 'sign', '.', 'php', '|', 'php', 'php', '-', 'verify', '.', 'php']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
160,OK,['OK'],['IDENTIFIER']
161,$ php php-sign.php | go run go-verify.go,"['$', 'php', 'php', '-', 'sign', '.', 'php', '|', 'go', 'run', 'go', '-', 'verify', '.', 'go']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD']"
162,OK,['OK'],['IDENTIFIER']
