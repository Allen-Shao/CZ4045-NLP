,text,token,annotation
0,"Your current code is not concurrent at all. All the alphanumeric codes are generated sequentially in a single for loop running in the sole goroutine you are creating besides main.

You are adding len(alphabets) == 26 to wg.Wait. That means you need to call 26 wg.Done for the call to wg.Wait to complete. Each wg.Done call reduces the waitgroup counter by one.

In your code, you are calling wg.Done only once. That means waitgroup counter stays at 25 once your goroutine returns and the call to wg.Wait would never return since no other goroutine is running that may reduce the waitgroup counter by making further calls to wg.Done.

To (vaguely) get what you want, you can try something like this:

","['Your', 'current', 'code', 'is', 'not', 'concurrent', 'at', 'all.', 'All', 'the', 'alphanumeric', 'codes', 'are', 'generated', 'sequentially', 'in', 'a', 'single', 'for', 'loop', 'running', 'in', 'the', 'sole', 'goroutine', 'you', 'are', 'creating', 'besides', 'main.', 'You', 'are', 'adding', 'len(alphabets)', '==', '26', 'to', 'wg.Wait.', 'That', 'means', 'you', 'need', 'to', 'call', '26', 'wg.Done', 'for', 'the', 'call', 'to', 'wg.Wait', 'to', 'complete.', 'Each', 'wg.Done', 'call', 'reduces', 'the', 'waitgroup', 'counter', 'by', 'one.', 'In', 'your', 'code,', 'you', 'are', 'calling', 'wg.Done', 'only', 'once.', 'That', 'means', 'waitgroup', 'counter', 'stays', 'at', '25', 'once', 'your', 'goroutine', 'returns', 'and', 'the', 'call', 'to', 'wg.Wait', 'would', 'never', 'return', 'since', 'no', 'other', 'goroutine', 'is', 'running', 'that', 'may', 'reduce', 'the', 'waitgroup', 'counter', 'by', 'making', 'further', 'calls', 'to', 'wg.Done.', 'To', '(vaguely)', 'get', 'what', 'you', 'want,', 'you', 'can', 'try', 'something', 'like', 'this:']","['PRP$', 'JJ', 'NN', 'VBZ', 'RB', 'JJ', 'IN', 'IN', 'PDT', 'DT', 'JJ', 'NNS', 'VBP', 'VBN', 'RB', 'IN', 'DT', 'JJ', 'IN', 'NN', 'VBG', 'IN', 'DT', 'JJ', 'NN', 'PRP', 'VBP', 'VBG', 'IN', 'NN', 'PRP', 'VBP', 'VBG', 'JJ', '$', 'CD', 'TO', 'VB', 'DT', 'VBZ', 'PRP', 'VBP', 'TO', 'VB', 'CD', 'NN', 'IN', 'DT', 'NN', 'TO', 'VB', 'TO', 'VB', 'DT', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'IN', 'NN', 'IN', 'PRP$', 'NN', 'PRP', 'VBP', 'VBG', 'NN', 'RB', 'VBZ', 'DT', 'VBZ', 'VBP', 'NN', 'NNS', 'IN', 'CD', 'RB', 'PRP$', 'NN', 'NNS', 'CC', 'DT', 'NN', 'TO', 'VB', 'MD', 'RB', 'VB', 'IN', 'DT', 'JJ', 'NN', 'VBZ', 'VBG', 'DT', 'MD', 'VB', 'DT', 'NN', 'NN', 'IN', 'VBG', 'JJ', 'NNS', 'TO', 'VB', 'TO', 'VB', 'VB', 'WP', 'PRP', 'VBP', 'PRP', 'MD', 'VB', 'NN', 'IN', 'NN']"
1,// ...,"['//', '...']","['COMMENT', ':']"
2,n := 10 // number of codes you want to print,"['n', ':=', '10', '//', 'number', 'of', 'codes', 'you', 'want', 'to', 'print']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL', 'COMMENT', 'NN', 'IN', 'NNS', 'PRP', 'VBP', 'TO', 'VB']"
3,wg.Add(n),['wg.Add(n)'],['FUNCTION_CALL']
4,for i := 0; i < n; i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', 'n', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'PUNCTUATION']"
5,"  go func(numbers []string, alphabets []string) {","['go', 'func', '(', 'numbers', '[]', 'string', ',', 'alphabets', '[]', 'string', ')', '{']","['KEYWORD', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
6,    defer wg.Done(),"['defer', 'wg.Done()']","['IDENTIFIER', 'FUNCTION_CALL']"
7,"    makeAleph(numbers, alphabets)","['makeAleph', '(', 'numbers', ',', 'alphabets', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
8,"  }(numbers, alphabets)","['}(', 'numbers', ',', 'alphabets', ')']","['PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
9,wg.Wait(),['wg.Wait()'],['FUNCTION_CALL']
10,// ...,"['//', '...']","['COMMENT', ':']"
11,"

Now, n goroutines will be spawned, each responsible for printing one code by calling makeAleph. As soon as a goroutine returns, wg.Done is called. A total n wg.Dones are called allowing call to wg.Wait in main to complete.
","['Now,', 'n', 'goroutines', 'will', 'be', 'spawned,', 'each', 'responsible', 'for', 'printing', 'one', 'code', 'by', 'calling', 'makeAleph.', 'As', 'soon', 'as', 'a', 'goroutine', 'returns,', 'wg.Done', 'is', 'called.', 'A', 'total', 'n', 'wg.Dones', 'are', 'called', 'allowing', 'call', 'to', 'wg.Wait', 'in', 'main', 'to', 'complete.']","['NNP', 'JJ', 'NNS', 'MD', 'VB', 'JJ', 'DT', 'JJ', 'IN', 'VBG', 'CD', 'NN', 'IN', 'VBG', 'NN', 'RB', 'RB', 'IN', 'DT', 'NN', 'NN', 'NN', 'VBZ', 'VBG', 'NNP', 'JJ', 'JJ', 'NNS', 'VBP', 'VBN', 'VBG', 'NN', 'TO', 'VB', 'IN', 'JJ', 'TO', 'VB']"
