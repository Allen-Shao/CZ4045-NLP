,text,token,annotation
0,"I'm commenting over a year later, but there is a solution here on github (and posted below for posterity).

","[""I'm"", 'commenting', 'over', 'a', 'year', 'later,', 'but', 'there', 'is', 'a', 'solution', 'here', 'on', 'github', '(and', 'posted', 'below', 'for', 'posterity).']","['NNP', 'VBG', 'RP', 'DT', 'NN', 'NN', 'CC', 'EX', 'VBZ', 'DT', 'NN', 'RB', 'IN', 'NN', 'NNP', 'VBD', 'IN', 'IN', 'NN']"
1,// +build windows,"['//', '+build', 'windows']","['COMMENT', 'JJ', 'NNS']"
2,/*,['/*'],['PUNCTUATION']
3,Package wmi provides a WQL interface for WMI on Windows.,"['Package', 'wmi', 'provides', 'a', 'WQL', 'interface', 'for', 'WMI', 'on', 'Windows', '.']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
4,Example code to print names of running processes:,"['Example', 'code', 'to', 'print', 'names', 'of', 'running', 'processes', ':']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
5,    type Win32_Process struct {,"['type', 'Win32_Process', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
6,        Name string,"['Name', 'string']","['IDENTIFIER', 'IDENTIFIER']"
7,    },['}'],['PUNCTUATION']
8,    func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
9,        var dst []Win32_Process,"['var', 'dst', '[]', 'Win32_Process']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
10,"        q := wmi.CreateQuery(&dst, """")","['q', ':=', 'wmi.CreateQuery(&dst, """")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
11,"        err := wmi.Query(q, &dst)","['err', ':=', 'wmi.Query(q, &dst)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
12,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
13,            log.Fatal(err),['log.Fatal(err)'],['FUNCTION_CALL']
14,        },['}'],['PUNCTUATION']
15,"        for i, v := range dst {","['for', 'i', ',', 'v', ':=', 'range', 'dst', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
16,"            println(i, v.Name)","['println', '(', 'i', ',', 'v', '.', 'Name', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
17,        },['}'],['PUNCTUATION']
18,    },['}'],['PUNCTUATION']
19,*/,['*/'],['PUNCTUATION']
20,package wmi,"['package', 'wmi']","['KEYWORD', 'IDENTIFIER']"
21,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
22,"    ""bytes""","['""bytes""']",['STRING_LITERAL']
23,"    ""errors""","['""errors""']",['STRING_LITERAL']
24,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
25,"    ""log""","['""log""']",['STRING_LITERAL']
26,"    ""os""","['""os""']",['STRING_LITERAL']
27,"    ""reflect""","['""reflect""']",['STRING_LITERAL']
28,"    ""runtime""","['""runtime""']",['STRING_LITERAL']
29,"    ""strconv""","['""strconv""']",['STRING_LITERAL']
30,"    ""strings""","['""strings""']",['STRING_LITERAL']
31,"    ""sync""","['""sync""']",['STRING_LITERAL']
32,"    ""time""","['""time""']",['STRING_LITERAL']
33,"    ""github.com/mattn/go-ole""","['""github.com/mattn/go-ole""']",['STRING_LITERAL']
34,"    ""github.com/mattn/go-ole/oleutil""","['""github.com/mattn/go-ole/oleutil""']",['STRING_LITERAL']
35,),[')'],['PUNCTUATION']
36,"var l = log.New(os.Stdout, """", log.LstdFlags)","['var', 'l', '=', 'log.New(os.Stdout, """", log.LstdFlags)']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
37,var (,"['var', '(']","['KEYWORD', 'PUNCTUATION']"
38,"    ErrInvalidEntityType = errors.New(""wmi: invalid entity type"")","['ErrInvalidEntityType', '=', 'errors.New(""wmi: invalid entity type"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
39,    lock                 sync.Mutex,"['lock', 'sync', '.', 'Mutex']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
40,),[')'],['PUNCTUATION']
41,// QueryNamespace invokes Query with the given namespace on the local machine.,"['//', 'QueryNamespace', 'invokes', 'Query', 'with', 'the', 'given', 'namespace', 'on', 'the', 'local', 'machine.']","['COMMENT', 'NNP', 'VBZ', 'NNP', 'IN', 'DT', 'VBN', 'NN', 'IN', 'DT', 'JJ', 'NN']"
42,"func QueryNamespace(query string, dst interface{}, namespace string) error {","['func', 'QueryNamespace', '(', 'query', 'string', ',', 'dst', 'interface', '{},', 'namespace', 'string', ')', 'error', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
43,"    return Query(query, dst, nil, namespace)","['return', 'Query', '(', 'query', ',', 'dst', ',', 'nil', ',', 'namespace', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
44,},['}'],['PUNCTUATION']
45,// Query runs the WQL query and appends the values to dst.,"['//', 'Query', 'runs', 'the', 'WQL', 'query', 'and', 'appends', 'the', 'values', 'to', 'dst.']","['COMMENT', 'NNP', 'VBZ', 'DT', 'NNP', 'NN', 'CC', 'VBZ', 'DT', 'NNS', 'TO', 'VB']"
46,//,['//'],['COMMENT']
47,"// dst must have type *[]S or *[]*S, for some struct type S. Fields selected in","['//', 'dst', 'must', 'have', 'type', '*[]S', 'or', '*[]*S,', 'for', 'some', 'struct', 'type', 'S.', 'Fields', 'selected', 'in']","['COMMENT', 'NN', 'MD', 'VB', 'NN', 'NN', 'CC', 'NN', 'IN', 'DT', 'NN', 'NN', 'NNP', 'NNP', 'VBD', 'IN']"
48,// the query must have the same name in dst. Supported types are all signed and,"['//', 'the', 'query', 'must', 'have', 'the', 'same', 'name', 'in', 'dst.', 'Supported', 'types', 'are', 'all', 'signed', 'and']","['COMMENT', 'DT', 'NN', 'MD', 'VB', 'DT', 'JJ', 'NN', 'IN', 'NN', 'NNP', 'NNS', 'VBP', 'DT', 'VBN', 'CC']"
49,"// unsigned integers, time.Time, string, bool, or a pointer to one of those.","['//', 'unsigned', 'integers,', 'time.Time,', 'string,', 'bool,', 'or', 'a', 'pointer', 'to', 'one', 'of', 'those.']","['COMMENT', 'JJ', 'NN', 'NN', 'NN', 'NN', 'CC', 'DT', 'NN', 'TO', 'CD', 'IN', 'NN']"
50,// Array types are not supported.,"['//', 'Array', 'types', 'are', 'not', 'supported.']","['COMMENT', 'NNP', 'NNS', 'VBP', 'RB', 'JJ']"
51,//,['//'],['COMMENT']
52,"// By default, the local machine and default namespace are used. These can be","['//', 'By', 'default,', 'the', 'local', 'machine', 'and', 'default', 'namespace', 'are', 'used.', 'These', 'can', 'be']","['COMMENT', 'IN', 'PDT', 'DT', 'JJ', 'NN', 'CC', 'NN', 'NN', 'VBP', 'JJ', 'DT', 'MD', 'VB']"
53,// changed using connectServerArgs. See,"['//', 'changed', 'using', 'connectServerArgs.', 'See']","['COMMENT', 'VBN', 'VBG', 'NN', 'VB']"
54,// http://msdn.microsoft.com/en-us/library/aa393720.aspx for details.,"['//', 'http:msdn.microsoft.com/en-us/library/aa393720.aspx', 'for', 'details.']","['COMMENT', 'NN', 'IN', 'NN']"
55,"func Query(query string, dst interface{}, connectServerArgs ...interface{}) error {","['func', 'Query', '(', 'query', 'string', ',', 'dst', 'interface', '{},', 'connectServerArgs', '...', 'interface', '{})', 'error', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
56,    dv := reflect.ValueOf(dst),"['dv', ':=', 'reflect.ValueOf(dst)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
57,    if dv.Kind() != reflect.Ptr || dv.IsNil() {,"['if', 'dv.Kind() != reflect.Ptr || dv.IsNil()', '{']","['KEYWORD', 'FUNCTION_CALL', 'PUNCTUATION']"
58,        return ErrInvalidEntityType,"['return', 'ErrInvalidEntityType']","['KEYWORD', 'IDENTIFIER']"
59,    },['}'],['PUNCTUATION']
60,    dv = dv.Elem(),"['dv', '=', 'dv.Elem()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
61,"    mat, elemType := checkMultiArg(dv)","['mat', ',', 'elemType', ':=', 'checkMultiArg', '(', 'dv', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
62,    if mat == multiArgTypeInvalid {,"['if', 'mat', '==', 'multiArgTypeInvalid', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
63,        return ErrInvalidEntityType,"['return', 'ErrInvalidEntityType']","['KEYWORD', 'IDENTIFIER']"
64,    },['}'],['PUNCTUATION']
65,    lock.Lock(),['lock.Lock()'],['FUNCTION_CALL']
66,    defer lock.Unlock(),"['defer', 'lock.Unlock()']","['IDENTIFIER', 'FUNCTION_CALL']"
67,    runtime.LockOSThread(),['runtime.LockOSThread()'],['FUNCTION_CALL']
68,    defer runtime.UnlockOSThread(),"['defer', 'runtime.UnlockOSThread()']","['IDENTIFIER', 'FUNCTION_CALL']"
69,"    err := ole.CoInitializeEx(0, ole.COINIT_MULTITHREADED)","['err', ':=', 'ole.CoInitializeEx(0, ole.COINIT_MULTITHREADED)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
70,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
71,        oleerr := err.(*ole.OleError),"['oleerr', ':=', 'err', '.(*', 'ole', '.', 'OleError', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
72,        // S_FALSE           = 0x00000001 // CoInitializeEx was already called on this thread,"['//', 'S_FALSE', '=', '0x00000001', 'CoInitializeEx', 'was', 'already', 'called', 'on', 'this', 'thread']","['COMMENT', 'NNP', 'VBZ', 'CD', 'NNP', 'VBD', 'RB', 'VBN', 'IN', 'DT', 'NN']"
73,        if oleerr.Code() != ole.S_OK && oleerr.Code() != 0x00000001 {,"['if', 'oleerr.Code() != ole.S_OK && oleerr.Code()', '!=', '0', 'x00000001', '{']","['KEYWORD', 'FUNCTION_CALL', 'RELATION_OPERATOR', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
74,            return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
75,        },['}'],['PUNCTUATION']
76,    } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
77,        // Only invoke CoUninitialize if the thread was not initizlied before.,"['//', 'Only', 'invoke', 'CoUninitialize', 'if', 'the', 'thread', 'was', 'not', 'initizlied', 'before.']","['COMMENT', 'RB', 'RB', 'VB', 'IN', 'DT', 'NN', 'VBD', 'RB', 'JJ', 'NN']"
78,        // This will allow other go packages based on go-ole play along,"['//', 'This', 'will', 'allow', 'other', 'go', 'packages', 'based', 'on', 'go-ole', 'play', 'along']","['COMMENT', 'DT', 'MD', 'VB', 'JJ', 'VB', 'NNS', 'VBN', 'IN', 'JJ', 'NN', 'IN']"
79,        // with this library.,"['//', 'with', 'this', 'library.']","['COMMENT', 'IN', 'DT', 'NN']"
80,        defer ole.CoUninitialize(),"['defer', 'ole.CoUninitialize()']","['IDENTIFIER', 'FUNCTION_CALL']"
81,    },['}'],['PUNCTUATION']
82,"    unknown, err := oleutil.CreateObject(""WbemScripting.SWbemLocator"")","['unknown', ',', 'err', ':=', 'oleutil.CreateObject(""WbemScripting.SWbemLocator"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
83,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
84,        return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
85,    },['}'],['PUNCTUATION']
86,    defer unknown.Release(),"['defer', 'unknown.Release()']","['IDENTIFIER', 'FUNCTION_CALL']"
87,"    wmi, err := unknown.QueryInterface(ole.IID_IDispatch)","['wmi', ',', 'err', ':=', 'unknown.QueryInterface(ole.IID_IDispatch)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
88,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
89,        return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
90,    },['}'],['PUNCTUATION']
91,    defer wmi.Release(),"['defer', 'wmi.Release()']","['IDENTIFIER', 'FUNCTION_CALL']"
92,    // service is a SWbemServices,"['//', 'service', 'is', 'a', 'SWbemServices']","['COMMENT', 'NN', 'VBZ', 'DT', 'NNS']"
93,"    serviceRaw, err := oleutil.CallMethod(wmi, ""ConnectServer"", connectServerArgs...)","['serviceRaw', ',', 'err', ':=', 'oleutil.CallMethod(wmi, ""ConnectServer"", connectServerArgs...)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
94,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
95,        return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
96,    },['}'],['PUNCTUATION']
97,    service := serviceRaw.ToIDispatch(),"['service', ':=', 'serviceRaw.ToIDispatch()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
98,    defer serviceRaw.Clear(),"['defer', 'serviceRaw.Clear()']","['IDENTIFIER', 'FUNCTION_CALL']"
99,    // result is a SWBemObjectSet,"['//', 'result', 'is', 'a', 'SWBemObjectSet']","['COMMENT', 'NN', 'VBZ', 'DT', 'NN']"
100,"    resultRaw, err := oleutil.CallMethod(service, ""ExecQuery"", query)","['resultRaw', ',', 'err', ':=', 'oleutil.CallMethod(service, ""ExecQuery"", query)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
101,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
102,        return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
103,    },['}'],['PUNCTUATION']
104,    result := resultRaw.ToIDispatch(),"['result', ':=', 'resultRaw.ToIDispatch()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
105,    defer resultRaw.Clear(),"['defer', 'resultRaw.Clear()']","['IDENTIFIER', 'FUNCTION_CALL']"
106,"    count, err := oleInt64(result, ""Count"")","['count', ',', 'err', ':=', 'oleInt64', '(', 'result', ',', '""Count""', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
107,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
108,        return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
109,    },['}'],['PUNCTUATION']
110,    // Initialize a slice with Count capacity,"['//', 'Initialize', 'a', 'slice', 'with', 'Count', 'capacity']","['COMMENT', 'VB', 'DT', 'NN', 'IN', 'NNP', 'NN']"
111,"    dv.Set(reflect.MakeSlice(dv.Type(), 0, int(count)))","['dv.Set(reflect.MakeSlice(dv.Type(), 0, int(count)))']",['FUNCTION_CALL']
112,    var errFieldMismatch error,"['var', 'errFieldMismatch', 'error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
113,    for i := int64(0); i < count; i++ {,"['for', 'i', ':=', 'int64', '(', '0', ');', 'i', '<', 'count', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'PUNCTUATION']"
114,        err := func() error {,"['err', ':=', 'func', '()', 'error', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
115,"            // item is a SWbemObject, but really a Win32_Process","['//', 'item', 'is', 'a', 'SWbemObject,', 'but', 'really', 'a', 'Win32_Process']","['COMMENT', 'NN', 'VBZ', 'DT', 'NNP', 'CC', 'RB', 'DT', 'NN']"
116,"            itemRaw, err := oleutil.CallMethod(result, ""ItemIndex"", i)","['itemRaw', ',', 'err', ':=', 'oleutil.CallMethod(result, ""ItemIndex"", i)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
117,            if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
118,                return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
119,            },['}'],['PUNCTUATION']
120,            item := itemRaw.ToIDispatch(),"['item', ':=', 'itemRaw.ToIDispatch()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
121,            defer itemRaw.Clear(),"['defer', 'itemRaw.Clear()']","['IDENTIFIER', 'FUNCTION_CALL']"
122,            ev := reflect.New(elemType),"['ev', ':=', 'reflect.New(elemType)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
123,"            if err = loadEntity(ev.Interface(), item); err != nil {","['if', 'err', '=', 'loadEntity', '(', 'ev.Interface(), item)', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
124,"                if _, ok := err.(*ErrFieldMismatch); ok {","['if', '_', ',', 'ok', ':=', 'err', '.(*', 'ErrFieldMismatch', ');', 'ok', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
125,                    // We continue loading entities even in the face of field mismatch errors.,"['//', 'We', 'continue', 'loading', 'entities', 'even', 'in', 'the', 'face', 'of', 'field', 'mismatch', 'errors.']","['COMMENT', 'PRP', 'VBP', 'VBG', 'NNS', 'RB', 'IN', 'DT', 'NN', 'IN', 'NN', 'NN', 'NN']"
126,"                    // If we encounter any other error, that other error is returned. Otherwise,","['//', 'If', 'we', 'encounter', 'any', 'other', 'error,', 'that', 'other', 'error', 'is', 'returned.', 'Otherwise,']","['COMMENT', 'IN', 'PRP', 'VBP', 'DT', 'JJ', 'NN', 'IN', 'JJ', 'NN', 'VBZ', 'JJ', 'NNP']"
127,                    // an ErrFieldMismatch is returned.,"['//', 'an', 'ErrFieldMismatch', 'is', 'returned.']","['COMMENT', 'DT', 'NN', 'VBZ', 'JJ']"
128,                    errFieldMismatch = err,"['errFieldMismatch', '=', 'err']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
129,                } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
130,                    return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
131,                },['}'],['PUNCTUATION']
132,            },['}'],['PUNCTUATION']
133,            if mat != multiArgTypeStructPtr {,"['if', 'mat', '!=', 'multiArgTypeStructPtr', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
134,                ev = ev.Elem(),"['ev', '=', 'ev.Elem()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
135,            },['}'],['PUNCTUATION']
136,"            dv.Set(reflect.Append(dv, ev))","['dv.Set(reflect.Append(dv, ev))']",['FUNCTION_CALL']
137,            return nil,"['return', 'nil']","['KEYWORD', 'IDENTIFIER']"
138,        }(),['}()'],['PUNCTUATION']
139,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
140,            return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
141,        },['}'],['PUNCTUATION']
142,    },['}'],['PUNCTUATION']
143,    return errFieldMismatch,"['return', 'errFieldMismatch']","['KEYWORD', 'IDENTIFIER']"
144,},['}'],['PUNCTUATION']
145,// ErrFieldMismatch is returned when a field is to be loaded into a different,"['//', 'ErrFieldMismatch', 'is', 'returned', 'when', 'a', 'field', 'is', 'to', 'be', 'loaded', 'into', 'a', 'different']","['COMMENT', 'NN', 'VBZ', 'VBN', 'WRB', 'DT', 'NN', 'VBZ', 'TO', 'VB', 'VBN', 'IN', 'DT', 'JJ']"
146,"// type than the one it was stored from, or when a field is missing or","['//', 'type', 'than', 'the', 'one', 'it', 'was', 'stored', 'from,', 'or', 'when', 'a', 'field', 'is', 'missing', 'or']","['COMMENT', 'NN', 'IN', 'DT', 'CD', 'PRP', 'VBD', 'VBN', 'NN', 'CC', 'WRB', 'DT', 'NN', 'VBZ', 'VBG', 'CC']"
147,// unexported in the destination struct.,"['//', 'unexported', 'in', 'the', 'destination', 'struct.']","['COMMENT', 'VBN', 'IN', 'DT', 'NN', 'NN']"
148,// StructType is the type of the struct pointed to by the destination argument.,"['//', 'StructType', 'is', 'the', 'type', 'of', 'the', 'struct', 'pointed', 'to', 'by', 'the', 'destination', 'argument.']","['COMMENT', 'NN', 'VBZ', 'DT', 'NN', 'IN', 'DT', 'NN', 'VBD', 'TO', 'IN', 'DT', 'NN', 'NN']"
149,type ErrFieldMismatch struct {,"['type', 'ErrFieldMismatch', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
150,    StructType reflect.Type,"['StructType', 'reflect', '.', 'Type']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
151,    FieldName  string,"['FieldName', 'string']","['IDENTIFIER', 'IDENTIFIER']"
152,    Reason     string,"['Reason', 'string']","['IDENTIFIER', 'IDENTIFIER']"
153,},['}'],['PUNCTUATION']
154,func (e *ErrFieldMismatch) Error() string {,"['func', '(', 'e', '*', 'ErrFieldMismatch', ')', 'Error', '()', 'string', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
155,"    return fmt.Sprintf(""wmi: cannot load field %q into a %q: %s"",","['return', 'fmt', '.', 'Sprintf', '(', '""wmi: cannot load field %q into a %q: %s""', ',']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
156,"        e.FieldName, e.StructType, e.Reason)","['e', '.', 'FieldName', ',', 'e', '.', 'StructType', ',', 'e', '.', 'Reason', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
157,},['}'],['PUNCTUATION']
158,var timeType = reflect.TypeOf(time.Time{}),"['var', 'timeType', '=', 'reflect.TypeOf(time.Time{})']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
159,// loadEntity loads a SWbemObject into a struct pointer.,"['//', 'loadEntity', 'loads', 'a', 'SWbemObject', 'into', 'a', 'struct', 'pointer.']","['COMMENT', 'NN', 'VBZ', 'DT', 'NNP', 'IN', 'DT', 'NN', 'NN']"
160,"func loadEntity(dst interface{}, src *ole.IDispatch) (errFieldMismatch error) {","['func', 'loadEntity', '(', 'dst', 'interface', '{},', 'src', '*', 'ole', '.', 'IDispatch', ')', '(', 'errFieldMismatch', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
161,    v := reflect.ValueOf(dst).Elem(),"['v', ':=', 'reflect.ValueOf(dst).Elem()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
162,    for i := 0; i < v.NumField(); i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', 'v.NumField()', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'PUNCTUATION']"
163,        f := v.Field(i),"['f', ':=', 'v.Field(i)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
164,        isPtr := f.Kind() == reflect.Ptr,"['isPtr', ':=', 'f.Kind()', '==', 'reflect', '.', 'Ptr']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
165,        if isPtr {,"['if', 'isPtr', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
166,            ptr := reflect.New(f.Type().Elem()),"['ptr', ':=', 'reflect.New(f.Type().Elem())']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
167,            f.Set(ptr),['f.Set(ptr)'],['FUNCTION_CALL']
168,            f = f.Elem(),"['f', '=', 'f.Elem()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
169,        },['}'],['PUNCTUATION']
170,        n := v.Type().Field(i).Name,"['n', ':=', 'v.Type().Field(i)', '.', 'Name']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION', 'IDENTIFIER']"
171,        if !f.CanSet() {,"['if', '!', 'f.CanSet()', '{']","['KEYWORD', 'LOGICAL_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION']"
172,            return &ErrFieldMismatch{,"['return', '&', 'ErrFieldMismatch', '{']","['KEYWORD', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
173,"                StructType: f.Type(),","['StructType', ':', 'f.Type()', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
174,"                FieldName:  n,","['FieldName', ':', 'n', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
175,"                Reason:     ""CanSet() is false"",","['Reason', ':', '""CanSet() is false""', ',']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
176,            },['}'],['PUNCTUATION']
177,        },['}'],['PUNCTUATION']
178,"        prop, err := oleutil.GetProperty(src, n)","['prop', ',', 'err', ':=', 'oleutil.GetProperty(src, n)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
179,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
180,            errFieldMismatch = &ErrFieldMismatch{,"['errFieldMismatch', '=', '&', 'ErrFieldMismatch', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
181,"                StructType: f.Type(),","['StructType', ':', 'f.Type()', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
182,"                FieldName:  n,","['FieldName', ':', 'n', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
183,"                Reason:     ""no such struct field"",","['Reason', ':', '""no such struct field""', ',']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
184,            },['}'],['PUNCTUATION']
185,            continue,['continue'],['KEYWORD']
186,        },['}'],['PUNCTUATION']
187,        defer prop.Clear(),"['defer', 'prop.Clear()']","['IDENTIFIER', 'FUNCTION_CALL']"
188,        switch val := prop.Value().(type) {,"['switch', 'val', ':=', 'prop.Value().(type)', '{']","['IDENTIFIER', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION']"
189,"        case int, int64:","['case', 'int', ',', 'int64', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
190,            var v int64,"['var', 'v', 'int64']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
191,            switch val := val.(type) {,"['switch', 'val', ':=', 'val', '.(', 'type', ')', '{']","['IDENTIFIER', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
192,            case int:,"['case', 'int', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
193,                v = int64(val),"['v', '=', 'int64', '(', 'val', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
194,            case int64:,"['case', 'int64', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
195,                v = val,"['v', '=', 'val']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
196,            default:,"['default', ':']","['KEYWORD', 'PUNCTUATION']"
197,"                panic(""unexpected type"")","['panic', '(', '""unexpected type""', ')']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
198,            },['}'],['PUNCTUATION']
199,            switch f.Kind() {,"['switch', 'f.Kind()', '{']","['IDENTIFIER', 'FUNCTION_CALL', 'PUNCTUATION']"
200,"            case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:","['case', 'reflect', '.', 'Int', ',', 'reflect', '.', 'Int8', ',', 'reflect', '.', 'Int16', ',', 'reflect', '.', 'Int32', ',', 'reflect', '.', 'Int64', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
201,                f.SetInt(v),['f.SetInt(v)'],['FUNCTION_CALL']
202,"            case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:","['case', 'reflect', '.', 'Uint', ',', 'reflect', '.', 'Uint8', ',', 'reflect', '.', 'Uint16', ',', 'reflect', '.', 'Uint32', ',', 'reflect', '.', 'Uint64', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
203,                f.SetUint(uint64(v)),['f.SetUint(uint64(v))'],['FUNCTION_CALL']
204,            default:,"['default', ':']","['KEYWORD', 'PUNCTUATION']"
205,                return &ErrFieldMismatch{,"['return', '&', 'ErrFieldMismatch', '{']","['KEYWORD', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
206,"                    StructType: f.Type(),","['StructType', ':', 'f.Type()', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
207,"                    FieldName:  n,","['FieldName', ':', 'n', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
208,"                    Reason:     ""not an integer class"",","['Reason', ':', '""not an integer class""', ',']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
209,                },['}'],['PUNCTUATION']
210,            },['}'],['PUNCTUATION']
211,        case string:,"['case', 'string', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
212,"            iv, err := strconv.ParseInt(val, 10, 64)","['iv', ',', 'err', ':=', 'strconv.ParseInt(val, 10, 64)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
213,            switch f.Kind() {,"['switch', 'f.Kind()', '{']","['IDENTIFIER', 'FUNCTION_CALL', 'PUNCTUATION']"
214,            case reflect.String:,"['case', 'reflect', '.', 'String', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
215,                f.SetString(val),['f.SetString(val)'],['FUNCTION_CALL']
216,"            case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:","['case', 'reflect', '.', 'Int', ',', 'reflect', '.', 'Int8', ',', 'reflect', '.', 'Int16', ',', 'reflect', '.', 'Int32', ',', 'reflect', '.', 'Int64', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
217,                if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
218,                    return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
219,                },['}'],['PUNCTUATION']
220,                f.SetInt(iv),['f.SetInt(iv)'],['FUNCTION_CALL']
221,"            case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:","['case', 'reflect', '.', 'Uint', ',', 'reflect', '.', 'Uint8', ',', 'reflect', '.', 'Uint16', ',', 'reflect', '.', 'Uint32', ',', 'reflect', '.', 'Uint64', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
222,                if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
223,                    return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
224,                },['}'],['PUNCTUATION']
225,                f.SetUint(uint64(iv)),['f.SetUint(uint64(iv))'],['FUNCTION_CALL']
226,            case reflect.Struct:,"['case', 'reflect', '.', 'Struct', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
227,                switch f.Type() {,"['switch', 'f.Type()', '{']","['IDENTIFIER', 'FUNCTION_CALL', 'PUNCTUATION']"
228,                case timeType:,"['case', 'timeType', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
229,                    if len(val) == 25 {,"['if', 'len', '(', 'val', ')', '==', '25', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
230,"                        mins, err := strconv.Atoi(val[22:])","['mins', ',', 'err', ':=', 'strconv.Atoi(val[22:])']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
231,                        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
232,                            return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
233,                        },['}'],['PUNCTUATION']
234,"                        val = val[:22] + fmt.Sprintf(""%02d%02d"", mins/60, mins%60)","['val', '=', 'val', '[:', '22', ']', '+', 'fmt.Sprintf(""%02d%02d"", mins/60, mins%60)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'ARITHMETIC_OPERATOR', 'FUNCTION_CALL']"
235,                    },['}'],['PUNCTUATION']
236,"                    t, err := time.Parse(""20060102150405.000000-0700"", val)","['t', ',', 'err', ':=', 'time.Parse(""20060102150405.000000-0700"", val)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
237,                    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
238,                        return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
239,                    },['}'],['PUNCTUATION']
240,                    f.Set(reflect.ValueOf(t)),['f.Set(reflect.ValueOf(t))'],['FUNCTION_CALL']
241,                },['}'],['PUNCTUATION']
242,            },['}'],['PUNCTUATION']
243,        case bool:,"['case', 'bool', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
244,            switch f.Kind() {,"['switch', 'f.Kind()', '{']","['IDENTIFIER', 'FUNCTION_CALL', 'PUNCTUATION']"
245,            case reflect.Bool:,"['case', 'reflect', '.', 'Bool', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
246,                f.SetBool(val),['f.SetBool(val)'],['FUNCTION_CALL']
247,            default:,"['default', ':']","['KEYWORD', 'PUNCTUATION']"
248,                return &ErrFieldMismatch{,"['return', '&', 'ErrFieldMismatch', '{']","['KEYWORD', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
249,"                    StructType: f.Type(),","['StructType', ':', 'f.Type()', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
250,"                    FieldName:  n,","['FieldName', ':', 'n', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
251,"                    Reason:     ""not a bool"",","['Reason', ':', '""not a bool""', ',']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
252,                },['}'],['PUNCTUATION']
253,            },['}'],['PUNCTUATION']
254,        default:,"['default', ':']","['KEYWORD', 'PUNCTUATION']"
255,            typeof := reflect.TypeOf(val),"['type', 'of', ':=', 'reflect.TypeOf(val)']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
256,            if isPtr && typeof == nil {,"['if', 'isPtr', '&&', 'type', 'of', '==', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
257,                break,['break'],['KEYWORD']
258,            },['}'],['PUNCTUATION']
259,            return &ErrFieldMismatch{,"['return', '&', 'ErrFieldMismatch', '{']","['KEYWORD', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
260,"                StructType: f.Type(),","['StructType', ':', 'f.Type()', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
261,"                FieldName:  n,","['FieldName', ':', 'n', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
262,"                Reason:     fmt.Sprintf(""unsupported type (%T)"", val),","['Reason', ':', 'fmt.Sprintf(""unsupported type (%T)"", val)', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
263,            },['}'],['PUNCTUATION']
264,        },['}'],['PUNCTUATION']
265,    },['}'],['PUNCTUATION']
266,    return errFieldMismatch,"['return', 'errFieldMismatch']","['KEYWORD', 'IDENTIFIER']"
267,},['}'],['PUNCTUATION']
268,type multiArgType int,"['type', 'multiArgType', 'int']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
269,const (,"['const', '(']","['KEYWORD', 'PUNCTUATION']"
270,    multiArgTypeInvalid multiArgType = iota,"['multiArgTypeInvalid', 'multiArgType', '=', 'iota']","['IDENTIFIER', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
271,    multiArgTypeStruct,['multiArgTypeStruct'],['IDENTIFIER']
272,    multiArgTypeStructPtr,['multiArgTypeStructPtr'],['IDENTIFIER']
273,),[')'],['PUNCTUATION']
274,"// checkMultiArg checks that v has type []S, []*S for some struct type S.","['//', 'checkMultiArg', 'checks', 'that', 'v', 'has', 'type', '[]S,', '[]*S', 'for', 'some', 'struct', 'type', 'S.']","['COMMENT', 'NN', 'NNS', 'WDT', 'NN', 'VBZ', 'VBN', 'NNP', 'NNP', 'IN', 'DT', 'NN', 'NN', 'NNP']"
275,//,['//'],['COMMENT']
276,"// It returns what category the slice's elements are, and the reflect.Type","['//', 'It', 'returns', 'what', 'category', 'the', ""slice's"", 'elements', 'are,', 'and', 'the', 'reflect.Type']","['COMMENT', 'PRP', 'VBZ', 'WP', 'VBZ', 'DT', 'JJ', 'NNS', 'NN', 'CC', 'DT', 'NN']"
277,// that represents S.,"['//', 'that', 'represents', 'S.']","['COMMENT', 'DT', 'VBZ', 'NNP']"
278,"func checkMultiArg(v reflect.Value) (m multiArgType, elemType reflect.Type) {","['func', 'checkMultiArg', '(', 'v', 'reflect', '.', 'Value', ')', '(', 'm', 'multiArgType', ',', 'elemType', 'reflect', '.', 'Type', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
279,    if v.Kind() != reflect.Slice {,"['if', 'v.Kind()', '!=', 'reflect', '.', 'Slice', '{']","['KEYWORD', 'FUNCTION_CALL', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
280,"        return multiArgTypeInvalid, nil","['return', 'multiArgTypeInvalid', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
281,    },['}'],['PUNCTUATION']
282,    elemType = v.Type().Elem(),"['elemType', '=', 'v.Type().Elem()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
283,    switch elemType.Kind() {,"['switch', 'elemType.Kind()', '{']","['IDENTIFIER', 'FUNCTION_CALL', 'PUNCTUATION']"
284,    case reflect.Struct:,"['case', 'reflect', '.', 'Struct', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
285,"        return multiArgTypeStruct, elemType","['return', 'multiArgTypeStruct', ',', 'elemType']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
286,    case reflect.Ptr:,"['case', 'reflect', '.', 'Ptr', ':']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
287,        elemType = elemType.Elem(),"['elemType', '=', 'elemType.Elem()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
288,        if elemType.Kind() == reflect.Struct {,"['if', 'elemType.Kind()', '==', 'reflect', '.', 'Struct', '{']","['KEYWORD', 'FUNCTION_CALL', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
289,"            return multiArgTypeStructPtr, elemType","['return', 'multiArgTypeStructPtr', ',', 'elemType']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
290,        },['}'],['PUNCTUATION']
291,    },['}'],['PUNCTUATION']
292,"    return multiArgTypeInvalid, nil","['return', 'multiArgTypeInvalid', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
293,},['}'],['PUNCTUATION']
294,"func oleInt64(item *ole.IDispatch, prop string) (int64, error) {","['func', 'oleInt64', '(', 'item', '*', 'ole', '.', 'IDispatch', ',', 'prop', 'string', ')', '(', 'int64', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
295,"    v, err := oleutil.GetProperty(item, prop)","['v', ',', 'err', ':=', 'oleutil.GetProperty(item, prop)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
296,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
297,"        return 0, err","['return', '0', ',', 'err']","['KEYWORD', 'OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER']"
298,    },['}'],['PUNCTUATION']
299,    defer v.Clear(),"['defer', 'v.Clear()']","['IDENTIFIER', 'FUNCTION_CALL']"
300,    i := int64(v.Val),"['i', ':=', 'int64', '(', 'v', '.', 'Val', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
301,"    return i, nil","['return', 'i', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
302,},['}'],['PUNCTUATION']
303,// CreateQuery returns a WQL query string that queries all columns of src. where,"['//', 'CreateQuery', 'returns', 'a', 'WQL', 'query', 'string', 'that', 'queries', 'all', 'columns', 'of', 'src.', 'where']","['COMMENT', 'NNP', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'WDT', 'VBZ', 'DT', 'NN', 'IN', 'NN', 'WRB']"
304,"// is an optional string that is appended to the query, to be used with WHERE","['//', 'is', 'an', 'optional', 'string', 'that', 'is', 'appended', 'to', 'the', 'query,', 'to', 'be', 'used', 'with', 'WHERE']","['COMMENT', 'VBZ', 'DT', 'JJ', 'NN', 'WDT', 'VBZ', 'VBN', 'TO', 'DT', 'NN', 'TO', 'VB', 'VBN', 'IN', 'NNP']"
305,"// clauses. In such a case, the ""WHERE"" string should appear at the beginning.","['//', 'clauses.', 'In', 'such', 'a', 'case,', 'the', '""WHERE""', 'string', 'should', 'appear', 'at', 'the', 'beginning.']","['COMMENT', 'NN', 'IN', 'JJ', 'DT', 'NN', 'DT', 'NN', 'NN', 'MD', 'VB', 'IN', 'DT', 'NN']"
306,"func CreateQuery(src interface{}, where string) string {","['func', 'CreateQuery', '(', 'src', 'interface', '{},', 'where', 'string', ')', 'string', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
307,    var b bytes.Buffer,"['var', 'b', 'bytes', '.', 'Buffer']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
308,"    b.WriteString(""SELECT "")","['b.WriteString(""SELECT "")']",['FUNCTION_CALL']
309,    s := reflect.Indirect(reflect.ValueOf(src)),"['s', ':=', 'reflect.Indirect(reflect.ValueOf(src))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
310,    t := s.Type(),"['t', ':=', 's.Type()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
311,    if s.Kind() == reflect.Slice {,"['if', 's.Kind()', '==', 'reflect', '.', 'Slice', '{']","['KEYWORD', 'FUNCTION_CALL', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
312,        t = t.Elem(),"['t', '=', 't.Elem()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
313,    },['}'],['PUNCTUATION']
314,    if t.Kind() != reflect.Struct {,"['if', 't.Kind()', '!=', 'reflect', '.', 'Struct', '{']","['KEYWORD', 'FUNCTION_CALL', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
315,"        return """"","['return', '""""']","['KEYWORD', 'STRING_LITERAL']"
316,    },['}'],['PUNCTUATION']
317,    var fields []string,"['var', 'fields', '[]', 'string']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
318,    for i := 0; i < t.NumField(); i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', 't.NumField()', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'PUNCTUATION']"
319,"        fields = append(fields, t.Field(i).Name)","['fields', '=', 'append', '(', 'fields', ',', 't.Field(i).Name)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
320,    },['}'],['PUNCTUATION']
321,"    b.WriteString(strings.Join(fields, "", ""))","['b.WriteString(strings.Join(fields, "", ""))']",['FUNCTION_CALL']
322,"    b.WriteString("" FROM "")","['b.WriteString("" FROM "")']",['FUNCTION_CALL']
323,    b.WriteString(t.Name()),['b.WriteString(t.Name())'],['FUNCTION_CALL']
324,"    b.WriteString("" "" + where)","['b.WriteString("" "" + where)']",['FUNCTION_CALL']
325,    return b.String(),"['return', 'b.String()']","['KEYWORD', 'FUNCTION_CALL']"
326,},['}'],['PUNCTUATION']
