,text,token,annotation
0,"You've got two things at work here.  The first of which is that Go is compiled to machine code and run directly on the CPU while Python is compiled to bytecode run against a (particularly slow) VM.

The second, and more significant, thing impacting performance is that the semantics of the two programs are actually significantly different.  The Go version makes a ""box"" called ""x"" that holds a number and increments that by 1 on each pass through the program.  The Python version actually has to create a new ""box"" (int object) on each cycle (and, eventually, has to throw them away).  We can demonstrate this by modifying your programs slightly:

","[""You've"", 'got', 'two', 'things', 'at', 'work', 'here.', 'The', 'first', 'of', 'which', 'is', 'that', 'Go', 'is', 'compiled', 'to', 'machine', 'code', 'and', 'run', 'directly', 'on', 'the', 'CPU', 'while', 'Python', 'is', 'compiled', 'to', 'bytecode', 'run', 'against', 'a', '(particularly', 'slow)', 'VM.', 'The', 'second,', 'and', 'more', 'significant,', 'thing', 'impacting', 'performance', 'is', 'that', 'the', 'semantics', 'of', 'the', 'two', 'programs', 'are', 'actually', 'significantly', 'different.', 'The', 'Go', 'version', 'makes', 'a', '""box""', 'called', '""x""', 'that', 'holds', 'a', 'number', 'and', 'increments', 'that', 'by', '1', 'on', 'each', 'pass', 'through', 'the', 'program.', 'The', 'Python', 'version', 'actually', 'has', 'to', 'create', 'a', 'new', '""box""', '(int', 'object)', 'on', 'each', 'cycle', '(and,', 'eventually,', 'has', 'to', 'throw', 'them', 'away).', 'We', 'can', 'demonstrate', 'this', 'by', 'modifying', 'your', 'programs', 'slightly:']","['NNP', 'VBD', 'CD', 'NNS', 'IN', 'NN', 'NN', 'DT', 'JJ', 'IN', 'WDT', 'VBZ', 'IN', 'NNP', 'VBZ', 'VBN', 'TO', 'NN', 'NN', 'CC', 'VB', 'RB', 'IN', 'DT', 'NNP', 'IN', 'NNP', 'VBZ', 'VBN', 'TO', 'VB', 'VB', 'IN', 'DT', 'JJ', 'NN', 'NNP', 'DT', 'NN', 'CC', 'JJR', 'JJ', 'NN', 'VBG', 'NN', 'VBZ', 'IN', 'DT', 'NNS', 'IN', 'DT', 'CD', 'NNS', 'VBP', 'RB', 'RB', 'VB', 'DT', 'NNP', 'NN', 'VBZ', 'DT', 'NN', 'VBN', 'NN', 'WDT', 'VBZ', 'DT', 'NN', 'CC', 'NNS', 'IN', 'IN', 'CD', 'IN', 'DT', 'NN', 'IN', 'DT', 'NN', 'DT', 'NNP', 'NN', 'RB', 'VBZ', 'TO', 'VB', 'DT', 'JJ', 'NN', 'NN', 'NN', 'IN', 'DT', 'NN', 'NNP', 'NN', 'VBZ', 'TO', 'VB', 'PRP', 'IN', 'PRP', 'MD', 'VB', 'DT', 'IN', 'VBG', 'PRP$', 'NNS', 'VBP']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
4,),[')'],['PUNCTUATION']
5,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
6,    for i := 0; i < 10; i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', '10', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'PUNCTUATION']"
7,"        fmt.Printf(""%d %p\n"", i, &i)","['fmt.Printf(""%d %p\\n"", i, &i)']",['FUNCTION_CALL']
8,    },['}'],['PUNCTUATION']
9,},['}'],['PUNCTUATION']
10,"

...and:

",['...and:'],['NN']
11,x = 0;,"['x', '=', '0', ';']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION']"
12,while x < 10:,"['while', 'x', '<', '10', ':']","['IDENTIFIER', 'IDENTIFIER', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
13,    x += 1,"['x', '+=', '1']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
14,"    print x, id(x)","['print', 'x', ',', 'id', '(', 'x', ')']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
15,"

This is because Go, due to it's C roots, takes a variable name to refer to a place, where Python takes variable names to refer to things.  Since an integer is considered a unique, immutable entity in python, we must constantly make new ones.  Python should be slower than Go but you've picked a worst-case scenario - in the Benchmarks Game, we see go being, on average, about 25x times faster (100x in the worst case).

You've probably read that, if your Python programs are too slow, you can speed them up by moving things into C.  Fortunately, in this case, somebody's already done this for you.  If you rewrite your empty loop to use xrange() like so:

","['This', 'is', 'because', 'Go,', 'due', 'to', ""it's"", 'C', 'roots,', 'takes', 'a', 'variable', 'name', 'to', 'refer', 'to', 'a', 'place,', 'where', 'Python', 'takes', 'variable', 'names', 'to', 'refer', 'to', 'things.', 'Since', 'an', 'integer', 'is', 'considered', 'a', 'unique,', 'immutable', 'entity', 'in', 'python,', 'we', 'must', 'constantly', 'make', 'new', 'ones.', 'Python', 'should', 'be', 'slower', 'than', 'Go', 'but', ""you've"", 'picked', 'a', 'worst-case', 'scenario', '-', 'in', 'the', 'Benchmarks', 'Game,', 'we', 'see', 'go', 'being,', 'on', 'average,', 'about', '25x', 'times', 'faster', '(100x', 'in', 'the', 'worst', 'case).', ""You've"", 'probably', 'read', 'that,', 'if', 'your', 'Python', 'programs', 'are', 'too', 'slow,', 'you', 'can', 'speed', 'them', 'up', 'by', 'moving', 'things', 'into', 'C.', 'Fortunately,', 'in', 'this', 'case,', ""somebody's"", 'already', 'done', 'this', 'for', 'you.', 'If', 'you', 'rewrite', 'your', 'empty', 'loop', 'to', 'use', 'xrange()', 'like', 'so:']","['DT', 'VBZ', 'IN', 'NNP', 'JJ', 'TO', 'VB', 'NNP', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'TO', 'VB', 'TO', 'DT', 'NN', 'WRB', 'NNP', 'VBZ', 'JJ', 'NNS', 'TO', 'VB', 'TO', 'VB', 'IN', 'DT', 'NN', 'VBZ', 'VBN', 'DT', 'JJ', 'JJ', 'NN', 'IN', 'NN', 'PRP', 'MD', 'RB', 'VB', 'JJ', 'NNS', 'NNP', 'MD', 'VB', 'JJR', 'IN', 'VB', 'CC', 'RB', 'VBD', 'DT', 'NN', 'NN', ':', 'IN', 'DT', 'NNP', 'NNP', 'PRP', 'VBP', 'JJ', 'NN', 'IN', 'NN', 'IN', 'CD', 'NNS', 'RBR', 'NN', 'IN', 'DT', 'JJS', 'NN', 'NNP', 'RB', 'VBD', 'JJ', 'IN', 'PRP$', 'NNP', 'NNS', 'VBP', 'RB', 'JJ', 'PRP', 'MD', 'VB', 'PRP', 'RP', 'IN', 'VBG', 'NNS', 'IN', 'NNP', 'NNP', 'IN', 'DT', 'NN', 'NN', 'RB', 'VBN', 'DT', 'IN', 'NN', 'IN', 'PRP', 'VBP', 'PRP$', 'JJ', 'NN', 'TO', 'VB', 'NNS', 'IN', 'NN']"
16,for x in xrange(1000000000):,"['for', 'x', 'in', 'xrange', '(', '1000000000', '):']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
17,    pass,['pass'],['IDENTIFIER']
18,"print ""Done.""","['print', '""Done.""']","['IDENTIFIER', 'STRING_LITERAL']"
19,"

...you'll see it run about twice as fast.  If you find loop counters to actually be a major bottleneck in your program, it might be time to investigate a new way of solving the problem.
","[""...you'll"", 'see', 'it', 'run', 'about', 'twice', 'as', 'fast.', 'If', 'you', 'find', 'loop', 'counters', 'to', 'actually', 'be', 'a', 'major', 'bottleneck', 'in', 'your', 'program,', 'it', 'might', 'be', 'time', 'to', 'investigate', 'a', 'new', 'way', 'of', 'solving', 'the', 'problem.']","['NNS', 'VBP', 'PRP', 'VB', 'RB', 'RB', 'IN', 'NN', 'IN', 'PRP', 'VBP', 'JJ', 'NNS', 'TO', 'RB', 'VB', 'DT', 'JJ', 'NN', 'IN', 'PRP$', 'NN', 'PRP', 'MD', 'VB', 'NN', 'TO', 'VB', 'DT', 'JJ', 'NN', 'IN', 'VBG', 'DT', 'NN']"
