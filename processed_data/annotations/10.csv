,text,token,annotation
0,"Using Windows DLLs is (in my opinion) the best way to directly use the Win32 API.

If you look in the src/syscall directory of your Go installation, you can find a file called mksyscall_windows.go. This seems to be how the Go team manages all their DLL wrappers.

Use go generate to generate your code

Take a look at how syscall_windows.go uses it. Specifically it has the following go generate command:


  //go:generate go run mksyscall_windows.go -output zsyscall_windows.go syscall_windows.go security_windows.go


Define the Win32 API types

They then define their types. You will need to do this yourself manually.

It is a challenge sometimes because it is vital you preserve the size and alignment of the struct fields. I use Visual Studio Community Edition to poke around at the plethora of Microsoft's defined basic types in an effort to determine their Go equivalents.

Windows uses UTF16 for strings. So you will be representing these as a *uint16. Use ","['Using', 'Windows', 'DLLs', 'is', '(in', 'my', 'opinion)', 'the', 'best', 'way', 'to', 'directly', 'use', 'the', 'Win32', 'API.', 'If', 'you', 'look', 'in', 'the', 'src/syscall', 'directory', 'of', 'your', 'Go', 'installation,', 'you', 'can', 'find', 'a', 'file', 'called', 'mksyscall_windows.go.', 'This', 'seems', 'to', 'be', 'how', 'the', 'Go', 'team', 'manages', 'all', 'their', 'DLL', 'wrappers.', 'Use', 'go', 'generate', 'to', 'generate', 'your', 'code', 'Take', 'a', 'look', 'at', 'how', 'syscall_windows.go', 'uses', 'it.', 'Specifically', 'it', 'has', 'the', 'following', 'go', 'generate', 'command:', '//go:generate', 'go', 'run', 'mksyscall_windows.go', '-output', 'zsyscall_windows.go', 'syscall_windows.go', 'security_windows.go', 'Define', 'the', 'Win32', 'API', 'types', 'They', 'then', 'define', 'their', 'types.', 'You', 'will', 'need', 'to', 'do', 'this', 'yourself', 'manually.', 'It', 'is', 'a', 'challenge', 'sometimes', 'because', 'it', 'is', 'vital', 'you', 'preserve', 'the', 'size', 'and', 'alignment', 'of', 'the', 'struct', 'fields.', 'I', 'use', 'Visual', 'Studio', 'Community', 'Edition', 'to', 'poke', 'around', 'at', 'the', 'plethora', 'of', ""Microsoft's"", 'defined', 'basic', 'types', 'in', 'an', 'effort', 'to', 'determine', 'their', 'Go', 'equivalents.', 'Windows', 'uses', 'UTF16', 'for', 'strings.', 'So', 'you', 'will', 'be', 'representing', 'these', 'as', 'a', '*uint16.', 'Use']","['VBG', 'NNP', 'NNP', 'VBZ', 'JJ', 'PRP$', 'IN', 'DT', 'JJS', 'NN', 'TO', 'RB', 'VB', 'DT', 'NNP', 'NNP', 'IN', 'PRP', 'VBP', 'IN', 'DT', 'JJ', 'NN', 'IN', 'PRP$', 'NNP', 'NN', 'PRP', 'MD', 'VB', 'DT', 'NN', 'VBN', 'NN', 'DT', 'VBZ', 'TO', 'VB', 'WRB', 'DT', 'NNP', 'NN', 'VBZ', 'DT', 'PRP$', 'NNP', 'NN', 'NNP', 'VBP', 'NN', 'TO', 'VB', 'PRP$', 'NNS', 'VBP', 'DT', 'NN', 'IN', 'WRB', 'JJ', 'VBZ', 'VBP', 'NNP', 'PRP', 'VBZ', 'DT', 'VBG', 'VB', 'JJ', 'NN', 'NNP', 'VBP', 'VB', 'RB', 'NNP', 'NNP', 'VBD', 'JJ', 'NNP', 'DT', 'NNP', 'NNP', 'VBZ', 'PRP', 'RB', 'VBP', 'PRP$', 'NN', 'PRP', 'MD', 'VB', 'TO', 'VB', 'DT', 'PRP', 'VB', 'PRP', 'VBZ', 'DT', 'NN', 'RB', 'IN', 'PRP', 'VBZ', 'JJ', 'PRP', 'VBP', 'DT', 'NN', 'CC', 'NN', 'IN', 'DT', 'NN', 'NN', 'PRP', 'VBP', 'JJ', 'NNP', 'NNP', 'NNP', 'TO', 'VB', 'RP', 'IN', 'DT', 'NN', 'IN', 'NNP', 'VBD', 'JJ', 'NNS', 'IN', 'DT', 'NN', 'TO', 'VB', 'PRP$', 'NNP', 'NN', 'NNP', 'VBZ', 'NNP', 'IN', 'NN', 'NNP', 'PRP', 'MD', 'VB', 'VBG', 'DT', 'IN', 'DT', 'NN', 'NN']"
1,syscall.UTF16PtrFromString,"['syscall', '.', 'UTF16PtrFromString']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
2," to generate one from a Go string.

Annotate Win32 API functions to export

The whole point of mksyscall_windows.go is to generate all the boilerplate code so you end up with a Go function that calls the DLL for you.

This is accomplished by adding annotations (Go comments).

For example, in syscall_windows.go you have these annotations:

","['to', 'generate', 'one', 'from', 'a', 'Go', 'string.', 'Annotate', 'Win32', 'API', 'functions', 'to', 'export', 'The', 'whole', 'point', 'of', 'mksyscall_windows.go', 'is', 'to', 'generate', 'all', 'the', 'boilerplate', 'code', 'so', 'you', 'end', 'up', 'with', 'a', 'Go', 'function', 'that', 'calls', 'the', 'DLL', 'for', 'you.', 'This', 'is', 'accomplished', 'by', 'adding', 'annotations', '(Go', 'comments).', 'For', 'example,', 'in', 'syscall_windows.go', 'you', 'have', 'these', 'annotations:']","['TO', 'VB', 'CD', 'IN', 'DT', 'NNP', 'NN', 'NNP', 'NNP', 'NNP', 'NNS', 'TO', 'VB', 'DT', 'JJ', 'NN', 'IN', 'NN', 'VBZ', 'TO', 'VB', 'PDT', 'DT', 'NN', 'NN', 'IN', 'PRP', 'VBP', 'RP', 'IN', 'DT', 'NNP', 'NN', 'WDT', 'VBZ', 'DT', 'NNP', 'IN', 'NN', 'DT', 'VBZ', 'VBN', 'IN', 'VBG', 'NNS', 'VBP', 'NN', 'IN', 'NN', 'IN', 'NN', 'PRP', 'VBP', 'DT', 'NNS']"
3,//sys   GetLastError() (lasterr error),"['//', 'sys', 'GetLastError()', '(lasterr', 'error)']","['COMMENT', 'NN', 'NNP', 'NNP', 'NN']"
4,//...,"['//', '...']","['COMMENT', ':']"
5,"//sys   CreateHardLink(filename *uint16, existingfilename *uint16, reserved uintptr) (err error) [failretval&0xff==0] = CreateHardLinkW","['//', 'sys', 'CreateHardLink(filename', '*uint16,', 'existingfilename', '*uint16,', 'reserved', 'uintptr)', '(err', 'error)', '[failretval&0xff==0]', '=', 'CreateHardLinkW']","['COMMENT', 'NN', 'NNP', 'NNP', 'NN', 'NNP', 'VBD', 'JJ', 'NNP', 'NN', 'NNP', 'NNP', 'NNP']"
6,"

mksyscall_windows.go has doc comments to help you figure out how this works. You can also look at the go-generated code in zsyscall_windows.go.

Run go generate

Its easy, just run:

go generate


Example:

For your example, create a file called win32_windows.go:

","['mksyscall_windows.go', 'has', 'doc', 'comments', 'to', 'help', 'you', 'figure', 'out', 'how', 'this', 'works.', 'You', 'can', 'also', 'look', 'at', 'the', 'go-generated', 'code', 'in', 'zsyscall_windows.go.', 'Run', 'go', 'generate', 'Its', 'easy,', 'just', 'run:', 'go', 'generate', 'Example:', 'For', 'your', 'example,', 'create', 'a', 'file', 'called', 'win32_windows.go:']","['NN', 'VBZ', 'VBN', 'NNS', 'TO', 'VB', 'PRP', 'VB', 'RP', 'WRB', 'DT', 'NN', 'PRP', 'MD', 'RB', 'VB', 'IN', 'DT', 'JJ', 'NN', 'IN', 'NN', 'NNP', 'VBP', 'VB', 'PRP$', 'NN', 'RB', 'VB', 'VB', 'JJ', 'NNP', 'IN', 'PRP$', 'NN', 'VB', 'DT', 'NN', 'VBN', 'NN']"
7,package win32,"['package', 'win32']","['KEYWORD', 'IDENTIFIER']"
8,//go generate go run mksyscall_windows.go -output zwin32_windows.go win32_windows.go,"['//', 'go', 'generate', 'go', 'run', 'mksyscall_windows.go', '-output', 'zwin32_windows.go', 'win32_windows.go']","['COMMENT', 'VB', 'NN', 'VB', 'VBN', 'RB', 'JJ', 'CD', 'NN']"
9,type (,"['type', '(']","['KEYWORD', 'PUNCTUATION']"
10,    LPVOID         uintptr,"['LPVOID', 'uintptr']","['IDENTIFIER', 'IDENTIFIER']"
11,    LMSTR          *uint16,"['LMSTR', '*', 'uint16']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
12,    DWORD          uint32,"['DWORD', 'uint32']","['IDENTIFIER', 'IDENTIFIER']"
13,    LPBYTE         *byte,"['LPBYTE', '*', 'byte']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
14,    LPDWORD        *uint32,"['LPDWORD', '*', 'uint32']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
15,    LPWSTR         *uint16,"['LPWSTR', '*', 'uint16']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
16,    NET_API_STATUS DWORD,"['NET_API_STATUS', 'DWORD']","['IDENTIFIER', 'IDENTIFIER']"
17,    USER_INFO_1 struct {,"['USER_INFO_1', 'struct', '{']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
18,        Usri1_name         LPWSTR,"['Usri1_name', 'LPWSTR']","['IDENTIFIER', 'IDENTIFIER']"
19,        Usri1_password     LPWSTR,"['Usri1_password', 'LPWSTR']","['IDENTIFIER', 'IDENTIFIER']"
20,        Usri1_password_age DWORD,"['Usri1_password_age', 'DWORD']","['IDENTIFIER', 'IDENTIFIER']"
21,        Usri1_priv         DWORD,"['Usri1_priv', 'DWORD']","['IDENTIFIER', 'IDENTIFIER']"
22,        Usri1_home_dir     LPWSTR,"['Usri1_home_dir', 'LPWSTR']","['IDENTIFIER', 'IDENTIFIER']"
23,        Usri1_comment      LPWSTR,"['Usri1_comment', 'LPWSTR']","['IDENTIFIER', 'IDENTIFIER']"
24,        Usri1_flags        DWORD,"['Usri1_flags', 'DWORD']","['IDENTIFIER', 'IDENTIFIER']"
25,        Usri1_script_path  LPWSTR,"['Usri1_script_path', 'LPWSTR']","['IDENTIFIER', 'IDENTIFIER']"
26,    },['}'],['PUNCTUATION']
27,    GROUP_USERS_INFO_0 struct {,"['GROUP_USERS_INFO_0', 'struct', '{']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
28,        Grui0_name LPWSTR,"['Grui0_name', 'LPWSTR']","['IDENTIFIER', 'IDENTIFIER']"
29,    },['}'],['PUNCTUATION']
30,    USER_INFO_1003 struct {,"['USER_INFO_1003', 'struct', '{']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
31,        Usri1003_password LPWSTR,"['Usri1003_password', 'LPWSTR']","['IDENTIFIER', 'IDENTIFIER']"
32,    },['}'],['PUNCTUATION']
33,),[')'],['PUNCTUATION']
34,const (,"['const', '(']","['KEYWORD', 'PUNCTUATION']"
35,    // from LMaccess.h,"['//', 'from', 'LMaccess.h']","['COMMENT', 'IN', 'NNP']"
36,    USER_PRIV_GUEST = 0,"['USER_PRIV_GUEST', '=', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL']"
37,    USER_PRIV_USER  = 1,"['USER_PRIV_USER', '=', '1']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
38,    USER_PRIV_ADMIN = 2,"['USER_PRIV_ADMIN', '=', '2']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
39,    UF_SCRIPT                          = 0x0001,"['UF_SCRIPT', '=', '0', 'x0001']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'IDENTIFIER']"
40,    UF_ACCOUNTDISABLE                  = 0x0002,"['UF_ACCOUNTDISABLE', '=', '0', 'x0002']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'IDENTIFIER']"
41,    UF_HOMEDIR_REQUIRED                = 0x0008,"['UF_HOMEDIR_REQUIRED', '=', '0', 'x0008']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'IDENTIFIER']"
42,    UF_LOCKOUT                         = 0x0010,"['UF_LOCKOUT', '=', '0', 'x0010']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'IDENTIFIER']"
43,    UF_PASSWD_NOTREQD                  = 0x0020,"['UF_PASSWD_NOTREQD', '=', '0', 'x0020']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'IDENTIFIER']"
44,    UF_PASSWD_CANT_CHANGE              = 0x0040,"['UF_PASSWD_CANT_CHANGE', '=', '0', 'x0040']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'IDENTIFIER']"
45,    UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = 0x0080,"['UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED', '=', '0', 'x0080']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'IDENTIFIER']"
46,    UF_TEMP_DUPLICATE_ACCOUNT    = 0x0100,"['UF_TEMP_DUPLICATE_ACCOUNT', '=', '0', 'x0100']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'IDENTIFIER']"
47,    UF_NORMAL_ACCOUNT            = 0x0200,"['UF_NORMAL_ACCOUNT', '=', '0', 'x0200']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'IDENTIFIER']"
48,    UF_INTERDOMAIN_TRUST_ACCOUNT = 0x0800,"['UF_INTERDOMAIN_TRUST_ACCOUNT', '=', '0', 'x0800']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'IDENTIFIER']"
49,    UF_WORKSTATION_TRUST_ACCOUNT = 0x1000,"['UF_WORKSTATION_TRUST_ACCOUNT', '=', '0x1', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
50,    UF_SERVER_TRUST_ACCOUNT      = 0x2000,"['UF_SERVER_TRUST_ACCOUNT', '=', '0x2', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
51,    UF_ACCOUNT_TYPE_MASK = UF_TEMP_DUPLICATE_ACCOUNT |,"['UF_ACCOUNT_TYPE_MASK', '=', 'UF_TEMP_DUPLICATE_ACCOUNT', '|']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'BITWISE_OPERATOR']"
52,        UF_NORMAL_ACCOUNT |,"['UF_NORMAL_ACCOUNT', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
53,        UF_INTERDOMAIN_TRUST_ACCOUNT |,"['UF_INTERDOMAIN_TRUST_ACCOUNT', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
54,        UF_WORKSTATION_TRUST_ACCOUNT |,"['UF_WORKSTATION_TRUST_ACCOUNT', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
55,        UF_SERVER_TRUST_ACCOUNT,['UF_SERVER_TRUST_ACCOUNT'],['IDENTIFIER']
56,    UF_DONT_EXPIRE_PASSWD                     = 0x10000,"['UF_DONT_EXPIRE_PASSWD', '=', '0x1', '0', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
57,    UF_MNS_LOGON_ACCOUNT                      = 0x20000,"['UF_MNS_LOGON_ACCOUNT', '=', '0x2', '0', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
58,    UF_SMARTCARD_REQUIRED                     = 0x40000,"['UF_SMARTCARD_REQUIRED', '=', '0x4', '0', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
59,    UF_TRUSTED_FOR_DELEGATION                 = 0x80000,"['UF_TRUSTED_FOR_DELEGATION', '=', '0x8', '0', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
60,    UF_NOT_DELEGATED                          = 0x100000,"['UF_NOT_DELEGATED', '=', '0x1', '0', '0', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
61,    UF_USE_DES_KEY_ONLY                       = 0x200000,"['UF_USE_DES_KEY_ONLY', '=', '0x2', '0', '0', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
62,    UF_DONT_REQUIRE_PREAUTH                   = 0x400000,"['UF_DONT_REQUIRE_PREAUTH', '=', '0x4', '0', '0', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
63,    UF_PASSWORD_EXPIRED                       = 0x800000,"['UF_PASSWORD_EXPIRED', '=', '0x8', '0', '0', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
64,    UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 0x1000000,"['UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION', '=', '0x1', '0', '0', '0', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
65,    UF_NO_AUTH_DATA_REQUIRED                  = 0x2000000,"['UF_NO_AUTH_DATA_REQUIRED', '=', '0x2', '0', '0', '0', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
66,    UF_PARTIAL_SECRETS_ACCOUNT                = 0x4000000,"['UF_PARTIAL_SECRETS_ACCOUNT', '=', '0x4', '0', '0', '0', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
67,    UF_USE_AES_KEYS                           = 0x8000000,"['UF_USE_AES_KEYS', '=', '0x8', '0', '0', '0', '0', '0', '0']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL', 'OCTAL_LITERAL']"
68,    UF_SETTABLE_BITS = UF_SCRIPT |,"['UF_SETTABLE_BITS', '=', 'UF_SCRIPT', '|']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'BITWISE_OPERATOR']"
69,        UF_ACCOUNTDISABLE |,"['UF_ACCOUNTDISABLE', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
70,        UF_LOCKOUT |,"['UF_LOCKOUT', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
71,        UF_HOMEDIR_REQUIRED |,"['UF_HOMEDIR_REQUIRED', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
72,        UF_PASSWD_NOTREQD |,"['UF_PASSWD_NOTREQD', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
73,        UF_PASSWD_CANT_CHANGE |,"['UF_PASSWD_CANT_CHANGE', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
74,        UF_ACCOUNT_TYPE_MASK |,"['UF_ACCOUNT_TYPE_MASK', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
75,        UF_DONT_EXPIRE_PASSWD |,"['UF_DONT_EXPIRE_PASSWD', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
76,        UF_MNS_LOGON_ACCOUNT |,"['UF_MNS_LOGON_ACCOUNT', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
77,        UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED |,"['UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
78,        UF_SMARTCARD_REQUIRED |,"['UF_SMARTCARD_REQUIRED', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
79,        UF_TRUSTED_FOR_DELEGATION |,"['UF_TRUSTED_FOR_DELEGATION', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
80,        UF_NOT_DELEGATED |,"['UF_NOT_DELEGATED', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
81,        UF_USE_DES_KEY_ONLY |,"['UF_USE_DES_KEY_ONLY', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
82,        UF_DONT_REQUIRE_PREAUTH |,"['UF_DONT_REQUIRE_PREAUTH', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
83,        UF_PASSWORD_EXPIRED |,"['UF_PASSWORD_EXPIRED', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
84,        UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION |,"['UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
85,        UF_NO_AUTH_DATA_REQUIRED |,"['UF_NO_AUTH_DATA_REQUIRED', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
86,        UF_USE_AES_KEYS |,"['UF_USE_AES_KEYS', '|']","['IDENTIFIER', 'BITWISE_OPERATOR']"
87,        UF_PARTIAL_SECRETS_ACCOUNT,['UF_PARTIAL_SECRETS_ACCOUNT'],['IDENTIFIER']
88,    FILTER_TEMP_DUPLICATE_ACCOUNT    = (0x0001),"['FILTER_TEMP_DUPLICATE_ACCOUNT', '=', '(', '0', 'x0001', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
89,    FILTER_NORMAL_ACCOUNT            = (0x0002),"['FILTER_NORMAL_ACCOUNT', '=', '(', '0', 'x0002', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
90,    FILTER_INTERDOMAIN_TRUST_ACCOUNT = (0x0008),"['FILTER_INTERDOMAIN_TRUST_ACCOUNT', '=', '(', '0', 'x0008', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
91,    FILTER_WORKSTATION_TRUST_ACCOUNT = (0x0010),"['FILTER_WORKSTATION_TRUST_ACCOUNT', '=', '(', '0', 'x0010', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
92,    FILTER_SERVER_TRUST_ACCOUNT      = (0x0020),"['FILTER_SERVER_TRUST_ACCOUNT', '=', '(', '0', 'x0020', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
93,    LG_INCLUDE_INDIRECT = (0x0001),"['LG_INCLUDE_INDIRECT', '=', '(', '0', 'x0001', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'OCTAL_LITERAL', 'IDENTIFIER', 'PUNCTUATION']"
94,    // etc...,"['//', 'etc...']","['COMMENT', 'NN']"
95,),[')'],['PUNCTUATION']
96,//sys NetApiBufferFree(Buffer LPVOID) (status NET_API_STATUS) = netapi32.NetApiBufferFree,"['//', 'sys', 'NetApiBufferFree(Buffer', 'LPVOID)', '(status', 'NET_API_STATUS)', '=', 'netapi32.NetApiBufferFree']","['COMMENT', 'NN', 'NNP', 'NNP', 'NNP', 'NNP', 'NNP', 'NN']"
97,"//sys NetUserAdd(servername LMSTR, level DWORD, buf LPBYTE, parm_err LPDWORD) (status NET_API_STATUS) = netapi32.NetUserAdd","['//', 'sys', 'NetUserAdd(servername', 'LMSTR,', 'level', 'DWORD,', 'buf', 'LPBYTE,', 'parm_err', 'LPDWORD)', '(status', 'NET_API_STATUS)', '=', 'netapi32.NetUserAdd']","['COMMENT', 'NN', 'NNP', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NNP', 'NNP', 'NNP', 'NN']"
98,"//sys NetUserChangePassword(domainname LPCWSTR, username LPCWSTR, oldpassword LPCWSTR, newpassword LPCWSTR) (status NET_API_STATUS) = netapi32.NetUserChangePassword","['//', 'sys', 'NetUserChangePassword(domainname', 'LPCWSTR,', 'username', 'LPCWSTR,', 'oldpassword', 'LPCWSTR,', 'newpassword', 'LPCWSTR)', '(status', 'NET_API_STATUS)', '=', 'netapi32.NetUserChangePassword']","['COMMENT', 'NN', 'NNP', 'NNP', 'JJ', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NNP', 'NNP', 'NNP', 'NN']"
99,"//sys NetUserDel(servername LPCWSTR, username LPCWSTR) (status NET_API_STATUS) = netapi32.NetUserDel","['//', 'sys', 'NetUserDel(servername', 'LPCWSTR,', 'username', 'LPCWSTR)', '(status', 'NET_API_STATUS)', '=', 'netapi32.NetUserDel']","['COMMENT', 'NN', 'NNP', 'NNP', 'JJ', 'NNP', 'NNP', 'NNP', 'NNP', 'NN']"
100,"//sys NetUserEnum(servername LPCWSTR, level DWORD, filter DWORD, bufptr *LPBYTE, prefmaxlen DWORD, entriesread LPDWORD, totalentries LPDWORD, resume_handle LPDWORD) (status NET_API_STATUS) = netapi32.NetUserEnum","['//', 'sys', 'NetUserEnum(servername', 'LPCWSTR,', 'level', 'DWORD,', 'filter', 'DWORD,', 'bufptr', '*LPBYTE,', 'prefmaxlen', 'DWORD,', 'entriesread', 'LPDWORD,', 'totalentries', 'LPDWORD,', 'resume_handle', 'LPDWORD)', '(status', 'NET_API_STATUS)', '=', 'netapi32.NetUserEnum']","['COMMENT', 'NN', 'NNP', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NNS', 'NNP', 'VBP', 'NNP', 'NNP', 'NNP', 'NNP', 'NN']"
101,"//sys NetUserGetGroups(servername LPCWSTR, username LPCWSTR, level DWORD, bufptr *LPBYTE, prefmaxlen DWORD, entriesread LPDWORD, totalentries LPDWORD) (status NET_API_STATUS) = netapi32.NetUserGetGroups","['//', 'sys', 'NetUserGetGroups(servername', 'LPCWSTR,', 'username', 'LPCWSTR,', 'level', 'DWORD,', 'bufptr', '*LPBYTE,', 'prefmaxlen', 'DWORD,', 'entriesread', 'LPDWORD,', 'totalentries', 'LPDWORD)', '(status', 'NET_API_STATUS)', '=', 'netapi32.NetUserGetGroups']","['COMMENT', 'NN', 'NNP', 'NNP', 'JJ', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NNS', 'NNP', 'NNP', 'NNP', 'NNP', 'NNS']"
102,"//sys NetUserSetGroups(servername LPCWSTR, username LPCWSTR, level DWORD, buf LPBYTE, num_entries DWORD) (status NET_API_STATUS) = netapi32.NetUserSetGroups","['//', 'sys', 'NetUserSetGroups(servername', 'LPCWSTR,', 'username', 'LPCWSTR,', 'level', 'DWORD,', 'buf', 'LPBYTE,', 'num_entries', 'DWORD)', '(status', 'NET_API_STATUS)', '=', 'netapi32.NetUserSetGroups']","['COMMENT', 'NN', 'NNP', 'NNP', 'JJ', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NNS', 'NNP', 'NNP', 'NNP', 'NNP', 'NNS']"
103,"//sys NetUserSetInfo(servername LPCWSTR, username LPCWSTR, level DWORD, buf LPBYTE, parm_err LPDWORD) (status NET_API_STATUS) = netapi32.NetUserSetInfo","['//', 'sys', 'NetUserSetInfo(servername', 'LPCWSTR,', 'username', 'LPCWSTR,', 'level', 'DWORD,', 'buf', 'LPBYTE,', 'parm_err', 'LPDWORD)', '(status', 'NET_API_STATUS)', '=', 'netapi32.NetUserSetInfo']","['COMMENT', 'NN', 'NNP', 'NNP', 'JJ', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NN', 'NNP', 'NNP', 'NNP', 'NNP', 'NN']"
104,"

After running go generate (so long as you copied mksyscall_windows.go to the same directory) you will have a file called ""zwin32_windows.go"" (something like this):

","['After', 'running', 'go', 'generate', '(so', 'long', 'as', 'you', 'copied', 'mksyscall_windows.go', 'to', 'the', 'same', 'directory)', 'you', 'will', 'have', 'a', 'file', 'called', '""zwin32_windows.go""', '(something', 'like', 'this):']","['IN', 'VBG', 'VB', 'JJ', 'NN', 'RB', 'IN', 'PRP', 'VBD', 'NN', 'TO', 'DT', 'JJ', 'NN', 'PRP', 'MD', 'VB', 'DT', 'NN', 'VBN', 'CD', 'VBG', 'IN', 'NN']"
105,// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT,"['//', 'MACHINE', 'GENERATED', 'BY', ""'go"", ""generate'"", 'COMMAND;', 'DO', 'NOT', 'EDIT']","['COMMENT', 'NN', 'NNP', 'NNP', 'POS', 'NN', 'NNP', 'NNP', 'NNP', 'NNP']"
106,package win32,"['package', 'win32']","['KEYWORD', 'IDENTIFIER']"
107,"import ""unsafe""","['import', '""unsafe""']","['KEYWORD', 'STRING_LITERAL']"
108,"import ""syscall""","['import', '""syscall""']","['KEYWORD', 'STRING_LITERAL']"
109,var _ unsafe.Pointer,"['var', '_', 'unsafe', '.', 'Pointer']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
110,var (,"['var', '(']","['KEYWORD', 'PUNCTUATION']"
111,"    modnetapi32 = syscall.NewLazyDLL(""netapi32.dll"")","['modnetapi32', '=', 'syscall.NewLazyDLL(""netapi32.dll"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
112,"    procNetApiBufferFree      = modnetapi32.NewProc(""NetApiBufferFree"")","['procNetApiBufferFree', '=', 'modnetapi32.NewProc(""NetApiBufferFree"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
113,"    procNetUserAdd            = modnetapi32.NewProc(""NetUserAdd"")","['procNetUserAdd', '=', 'modnetapi32.NewProc(""NetUserAdd"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
114,"    procNetUserChangePassword = modnetapi32.NewProc(""NetUserChangePassword"")","['procNetUserChangePassword', '=', 'modnetapi32.NewProc(""NetUserChangePassword"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
115,"    procNetUserDel            = modnetapi32.NewProc(""NetUserDel"")","['procNetUserDel', '=', 'modnetapi32.NewProc(""NetUserDel"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
116,"    procNetUserEnum           = modnetapi32.NewProc(""NetUserEnum"")","['procNetUserEnum', '=', 'modnetapi32.NewProc(""NetUserEnum"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
117,"    procNetUserGetGroups      = modnetapi32.NewProc(""NetUserGetGroups"")","['procNetUserGetGroups', '=', 'modnetapi32.NewProc(""NetUserGetGroups"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
118,"    procNetUserSetGroups      = modnetapi32.NewProc(""NetUserSetGroups"")","['procNetUserSetGroups', '=', 'modnetapi32.NewProc(""NetUserSetGroups"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
119,"    procNetUserSetInfo        = modnetapi32.NewProc(""NetUserSetInfo"")","['procNetUserSetInfo', '=', 'modnetapi32.NewProc(""NetUserSetInfo"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
120,),[')'],['PUNCTUATION']
121,func NetApiBufferFree(Buffer LPVOID) (status NET_API_STATUS) {,"['func', 'NetApiBufferFree', '(', 'Buffer', 'LPVOID', ')', '(', 'status', 'NET_API_STATUS', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
122,"    r0, _, _ := syscall.Syscall(procNetApiBufferFree.Addr(), 1, uintptr(Buffer), 0, 0)","['r0', ',', '_', ',', '_', ':=', 'syscall.Syscall(procNetApiBufferFree.Addr(), 1, uintptr(Buffer), 0, 0)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
123,    status = NET_API_STATUS(r0),"['status', '=', 'NET_API_STATUS', '(', 'r0', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
124,    return,['return'],['KEYWORD']
125,},['}'],['PUNCTUATION']
126,"func NetUserAdd(servername LMSTR, level DWORD, buf LPBYTE, parm_err LPDWORD) (status NET_API_STATUS) {","['func', 'NetUserAdd', '(', 'servername', 'LMSTR', ',', 'level', 'DWORD', ',', 'buf', 'LPBYTE', ',', 'parm_err', 'LPDWORD', ')', '(', 'status', 'NET_API_STATUS', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
127,"    r0, _, _ := syscall.Syscall6(procNetUserAdd.Addr(), 4, uintptr(servername), uintptr(level), uintptr(buf), uintptr(parm_err), 0, 0)","['r0', ',', '_', ',', '_', ':=', 'syscall.Syscall6(procNetUserAdd.Addr(), 4, uintptr(servername), uintptr(level), uintptr(buf), uintptr(parm_err), 0, 0)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
128,    status = NET_API_STATUS(r0),"['status', '=', 'NET_API_STATUS', '(', 'r0', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
129,    return,['return'],['KEYWORD']
130,},['}'],['PUNCTUATION']
131,"func NetUserChangePassword(domainname LPCWSTR, username LPCWSTR, oldpassword LPCWSTR, newpassword LPCWSTR) (status NET_API_STATUS) {","['func', 'NetUserChangePassword', '(', 'domainname', 'LPCWSTR', ',', 'username', 'LPCWSTR', ',', 'oldpassword', 'LPCWSTR', ',', 'newpassword', 'LPCWSTR', ')', '(', 'status', 'NET_API_STATUS', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
132,"    r0, _, _ := syscall.Syscall6(procNetUserChangePassword.Addr(), 4, uintptr(domainname), uintptr(username), uintptr(oldpassword), uintptr(newpassword), 0, 0)","['r0', ',', '_', ',', '_', ':=', 'syscall.Syscall6(procNetUserChangePassword.Addr(), 4, uintptr(domainname), uintptr(username), uintptr(oldpassword), uintptr(newpassword), 0, 0)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
133,    status = NET_API_STATUS(r0),"['status', '=', 'NET_API_STATUS', '(', 'r0', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
134,    return,['return'],['KEYWORD']
135,},['}'],['PUNCTUATION']
136,"func NetUserDel(servername LPCWSTR, username LPCWSTR) (status NET_API_STATUS) {","['func', 'NetUserDel', '(', 'servername', 'LPCWSTR', ',', 'username', 'LPCWSTR', ')', '(', 'status', 'NET_API_STATUS', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
137,"    r0, _, _ := syscall.Syscall(procNetUserDel.Addr(), 2, uintptr(servername), uintptr(username), 0)","['r0', ',', '_', ',', '_', ':=', 'syscall.Syscall(procNetUserDel.Addr(), 2, uintptr(servername), uintptr(username), 0)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
138,    status = NET_API_STATUS(r0),"['status', '=', 'NET_API_STATUS', '(', 'r0', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
139,    return,['return'],['KEYWORD']
140,},['}'],['PUNCTUATION']
141,"func NetUserEnum(servername LPCWSTR, level DWORD, filter DWORD, bufptr *LPBYTE, prefmaxlen DWORD, entriesread LPDWORD, totalentries LPDWORD, resume_handle LPDWORD) (status NET_API_STATUS) {","['func', 'NetUserEnum', '(', 'servername', 'LPCWSTR', ',', 'level', 'DWORD', ',', 'filter', 'DWORD', ',', 'bufptr', '*', 'LPBYTE', ',', 'prefmaxlen', 'DWORD', ',', 'entriesread', 'LPDWORD', ',', 'totalentries', 'LPDWORD', ',', 'resume_handle', 'LPDWORD', ')', '(', 'status', 'NET_API_STATUS', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
142,"    r0, _, _ := syscall.Syscall9(procNetUserEnum.Addr(), 8, uintptr(servername), uintptr(level), uintptr(filter), uintptr(unsafe.Pointer(bufptr)), uintptr(prefmaxlen), uintptr(entriesread), uintptr(totalentries), uintptr(resume_handle), 0)","['r0', ',', '_', ',', '_', ':=', 'syscall.Syscall9(procNetUserEnum.Addr(), 8, uintptr(servername), uintptr(level), uintptr(filter), uintptr(unsafe.Pointer(bufptr)), uintptr(prefmaxlen), uintptr(entriesread), uintptr(totalentries), uintptr(resume_handle), 0)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
143,    status = NET_API_STATUS(r0),"['status', '=', 'NET_API_STATUS', '(', 'r0', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
144,    return,['return'],['KEYWORD']
145,},['}'],['PUNCTUATION']
146,"func NetUserGetGroups(servername LPCWSTR, username LPCWSTR, level DWORD, bufptr *LPBYTE, prefmaxlen DWORD, entriesread LPDWORD, totalentries LPDWORD) (status NET_API_STATUS) {","['func', 'NetUserGetGroups', '(', 'servername', 'LPCWSTR', ',', 'username', 'LPCWSTR', ',', 'level', 'DWORD', ',', 'bufptr', '*', 'LPBYTE', ',', 'prefmaxlen', 'DWORD', ',', 'entriesread', 'LPDWORD', ',', 'totalentries', 'LPDWORD', ')', '(', 'status', 'NET_API_STATUS', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
147,"    r0, _, _ := syscall.Syscall9(procNetUserGetGroups.Addr(), 7, uintptr(servername), uintptr(username), uintptr(level), uintptr(unsafe.Pointer(bufptr)), uintptr(prefmaxlen), uintptr(entriesread), uintptr(totalentries), 0, 0)","['r0', ',', '_', ',', '_', ':=', 'syscall.Syscall9(procNetUserGetGroups.Addr(), 7, uintptr(servername), uintptr(username), uintptr(level), uintptr(unsafe.Pointer(bufptr)), uintptr(prefmaxlen), uintptr(entriesread), uintptr(totalentries), 0, 0)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
148,    status = NET_API_STATUS(r0),"['status', '=', 'NET_API_STATUS', '(', 'r0', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
149,    return,['return'],['KEYWORD']
150,},['}'],['PUNCTUATION']
151,"func NetUserSetGroups(servername LPCWSTR, username LPCWSTR, level DWORD, buf LPBYTE, num_entries DWORD) (status NET_API_STATUS) {","['func', 'NetUserSetGroups', '(', 'servername', 'LPCWSTR', ',', 'username', 'LPCWSTR', ',', 'level', 'DWORD', ',', 'buf', 'LPBYTE', ',', 'num_entries', 'DWORD', ')', '(', 'status', 'NET_API_STATUS', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
152,"    r0, _, _ := syscall.Syscall6(procNetUserSetGroups.Addr(), 5, uintptr(servername), uintptr(username), uintptr(level), uintptr(buf), uintptr(num_entries), 0)","['r0', ',', '_', ',', '_', ':=', 'syscall.Syscall6(procNetUserSetGroups.Addr(), 5, uintptr(servername), uintptr(username), uintptr(level), uintptr(buf), uintptr(num_entries), 0)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
153,    status = NET_API_STATUS(r0),"['status', '=', 'NET_API_STATUS', '(', 'r0', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
154,    return,['return'],['KEYWORD']
155,},['}'],['PUNCTUATION']
156,"func NetUserSetInfo(servername LPCWSTR, username LPCWSTR, level DWORD, buf LPBYTE, parm_err LPDWORD) (status NET_API_STATUS) {","['func', 'NetUserSetInfo', '(', 'servername', 'LPCWSTR', ',', 'username', 'LPCWSTR', ',', 'level', 'DWORD', ',', 'buf', 'LPBYTE', ',', 'parm_err', 'LPDWORD', ')', '(', 'status', 'NET_API_STATUS', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
157,"    r0, _, _ := syscall.Syscall6(procNetUserSetInfo.Addr(), 5, uintptr(servername), uintptr(username), uintptr(level), uintptr(buf), uintptr(parm_err), 0)","['r0', ',', '_', ',', '_', ':=', 'syscall.Syscall6(procNetUserSetInfo.Addr(), 5, uintptr(servername), uintptr(username), uintptr(level), uintptr(buf), uintptr(parm_err), 0)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
158,    status = NET_API_STATUS(r0),"['status', '=', 'NET_API_STATUS', '(', 'r0', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
159,    return,['return'],['KEYWORD']
160,},['}'],['PUNCTUATION']
161,"

Obviously most of the work is in translating the Win32 types to their Go equivalents.

Feel free to poke around in the syscall package - they often have already defined structs you may be interested in.

ZOMG sriously??1! 2 much work!

Its better than writing that code by hand. And no CGo required!

Disclamer: I have not tested the above code to verify it actually does what you want. Working with the Win32 API is its own barrel of fun.
","['Obviously', 'most', 'of', 'the', 'work', 'is', 'in', 'translating', 'the', 'Win32', 'types', 'to', 'their', 'Go', 'equivalents.', 'Feel', 'free', 'to', 'poke', 'around', 'in', 'the', 'syscall', 'package', '-', 'they', 'often', 'have', 'already', 'defined', 'structs', 'you', 'may', 'be', 'interested', 'in.', 'ZOMG', 'sriously??1!', '2', 'much', 'work!', 'Its', 'better', 'than', 'writing', 'that', 'code', 'by', 'hand.', 'And', 'no', 'CGo', 'required!', 'Disclamer:', 'I', 'have', 'not', 'tested', 'the', 'above', 'code', 'to', 'verify', 'it', 'actually', 'does', 'what', 'you', 'want.', 'Working', 'with', 'the', 'Win32', 'API', 'is', 'its', 'own', 'barrel', 'of', 'fun
