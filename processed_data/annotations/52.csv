,text,token,annotation
0,"So I'm trying to get the File Handle on a socket in windows.

Using like the following: 

","['So', ""I'm"", 'trying', 'to', 'get', 'the', 'File', 'Handle', 'on', 'a', 'socket', 'in', 'windows.', 'Using', 'like', 'the', 'following:']","['RB', 'NNP', 'VBG', 'TO', 'VB', 'DT', 'NNP', 'NNP', 'IN', 'DT', 'NN', 'IN', 'JJ', 'NNP', 'IN', 'DT', 'NN']"
1,"            address, err := net.ResolveTCPAddr(""tcp"", ""192.168.9.144:8080"")                                                                                                                                     ","['address', ',', 'err', ':=', 'net.ResolveTCPAddr(""tcp"", ""192.168.9.144:8080"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
2,            if err != nil {                                                                                                                                                                                     ,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
3,                    fmt.Println(err)                                                                                                                                                                            ,['fmt.Println(err)'],['FUNCTION_CALL']
4,            }                                                                                                                                                                                                   ,['}'],['PUNCTUATION']
5,"            conn, err := net.DialTCP(""tcp"", nil, address)                                                                                                                                                       ","['conn', ',', 'err', ':=', 'net.DialTCP(""tcp"", nil, address)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
6,"            fmt.Println(""Connected"")                                                                                                                                                                            ","['fmt.Println(""Connected"")']",['FUNCTION_CALL']
7,"            // conn, err := net.DialTCP(""tcp"", nil, address)                                                                                                                                                    ","['//', 'conn,', 'err', ':=', 'net.DialTCP(""tcp"",', 'nil,', 'address)']","['COMMENT', 'NN', 'NN', 'NNP', 'CC', 'JJ', 'NN']"
8,            if err != nil {                                                                                                                                                                                     ,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
9,"                    fmt.Println(""Can't conenct"")                                                                                                                                                                ","['fmt.Println(""Can\'t conenct"")']",['FUNCTION_CALL']
10,                    log.Fatal(err)                                                                                                                                                                              ,['log.Fatal(err)'],['FUNCTION_CALL']
11,     },['}'],['PUNCTUATION']
12,     conn.File() ,['conn.File()'],['FUNCTION_CALL']
13,     conn.Fd(),['conn.Fd()'],['FUNCTION_CALL']
14,"

conn.File() Fails and states it's not supported by windows

Next I tried to use the windows api function _get_osfhandle

","['conn.File()', 'Fails', 'and', 'states', ""it's"", 'not', 'supported', 'by', 'windows', 'Next', 'I', 'tried', 'to', 'use', 'the', 'windows', 'api', 'function', '_get_osfhandle']","['NN', 'NNP', 'CC', 'NNS', 'VBP', 'RB', 'VBN', 'IN', 'NNS', 'NNP', 'PRP', 'VBD', 'TO', 'VB', 'DT', 'NNS', 'VBP', 'NN', 'NN']"
15,var (,"['var', '(']","['KEYWORD', 'PUNCTUATION']"
16,"        procGetOSfHandle = msvcrt.NewProc(""_get_osfhandle"")                                                                                                                                                                                                                                                                                                         ","['procGetOSfHandle', '=', 'msvcrt.NewProc(""_get_osfhandle"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
17,)                                                                                                                                                                                                           ,[')'],['PUNCTUATION']
18,"func GetOSfHandle(fd uintptr) (uintptr, error) {                                                                                                                                                            ","['func', 'GetOSfHandle', '(', 'fd', 'uintptr', ')', '(', 'uintptr', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
19,"        value, _, err := procGetOSfHandle.Call(fd)                                                                                                                                                          ","['value', ',', '_', ',', 'err', ':=', 'procGetOSfHandle.Call(fd)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
20,"        return value, err                                                                                                                                                                                   ","['return', 'value', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
21,} ,['}'],['PUNCTUATION']
22,"hand, _ := GetOSfHandle(uintptr(unsafe.Pointer(conn)))","['hand', ',', '_', ':=', 'GetOSfHandle', '(', 'uintptr', '(', 'unsafe.Pointer(conn)))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
23,"

hand returns 4294967295 which turns out to be not real as in ""xff\xff\xff\xff""

I then tried just to use the windows API for socket and ran into an issue with WSARecv.  This is the following code used:

","['hand', 'returns', '4294967295', 'which', 'turns', 'out', 'to', 'be', 'not', 'real', 'as', 'in', '""xff\\xff\\xff\\xff""', 'I', 'then', 'tried', 'just', 'to', 'use', 'the', 'windows', 'API', 'for', 'socket', 'and', 'ran', 'into', 'an', 'issue', 'with', 'WSARecv.', 'This', 'is', 'the', 'following', 'code', 'used:']","['NN', 'NNS', 'CD', 'WDT', 'VBZ', 'RP', 'TO', 'VB', 'RB', 'JJ', 'IN', 'IN', 'NN', 'PRP', 'RB', 'VBD', 'RB', 'TO', 'VB', 'DT', 'NNS', 'NNP', 'IN', 'NN', 'CC', 'VBD', 'IN', 'DT', 'NN', 'IN', 'NNP', 'DT', 'VBZ', 'DT', 'JJ', 'NN', 'NN']"
24,       var d syscall.WSAData                                                                                                                                                                           ,"['var', 'd', 'syscall', '.', 'WSAData']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
25,"       syscall.WSAStartup(uint32(0x202), &d)                                                                                                                                                           ","['syscall.WSAStartup(uint32(0x202), &d)']",['FUNCTION_CALL']
26,"       fd, _ := syscall.Socket(syscall.AF_INET, syscall.SOCK_STREAM, 0)                                                                                                                                ","['fd', ',', '_', ':=', 'syscall.Socket(syscall.AF_INET, syscall.SOCK_STREAM, 0)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
27,"       addr := syscall.SockaddrInet4{Port: 8080, Addr: [4]byte{192, 168, 9, 144}}                                                                                                                      ","['addr', ':=', 'syscall', '.', 'SockaddrInet4', '{', 'Port', ':', '8080', ',', 'Addr', ':', '[', '4', ']', 'byte', '{', '192', ',', '168', ',', '9', ',', '144', '}}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
28,       var buf [4]byte                                                                                                                                                                                 ,"['var', 'buf', '[', '4', ']', 'byte']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER']"
29,"       syscall.Connect(fd, &addr)                                                                                                                                                                      ","['syscall.Connect(fd, &addr)']",['FUNCTION_CALL']
30,"       dataBuf := syscall.WSABuf{Len: uint32(4), Buf: &buf[0]}                                                                                                                                         ","['dataBuf', ':=', 'syscall', '.', 'WSABuf', '{', 'Len', ':', 'uint32', '(', '4', '),', 'Buf', ':', '&', 'buf', '[', '0', ']}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION']"
31,       o := syscall.Overlapped{}                                                                                                                                                                       ,"['o', ':=', 'syscall', '.', 'Overlapped', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
32,       flags := uint32(0)                                                                                                                                                                              ,"['flags', ':=', 'uint32', '(', '0', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION']"
33,       qty := uint32(0)                                                                                                                                                                                ,"['qty', ':=', 'uint32', '(', '0', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION']"
34,"       syscall.WSARecv(fd, &dataBuf, 1, &qty, &flags, &o, nil)                                                                                                                                         ","['syscall.WSARecv(fd, &dataBuf, 1, &qty, &flags, &o, nil)']",['FUNCTION_CALL']
35,       fmt.Println(buf)    ,['fmt.Println(buf)'],['FUNCTION_CALL']
36,"

The code connects but I don't see and data received.  It seems I don't seem to have the WSARecv options correct.

Any help would be greatly appreciated.              
","['The', 'code', 'connects', 'but', 'I', ""don't"", 'see', 'and', 'data', 'received.', 'It', 'seems', 'I', ""don't"", 'seem', 'to', 'have', 'the', 'WSARecv', 'options', 'correct.', 'Any', 'help', 'would', 'be', 'greatly', 'appreciated.']","['DT', 'NN', 'NNS', 'CC', 'PRP', 'VBP', 'VB', 'CC', 'VB', 'NN', 'PRP', 'VBZ', 'PRP', 'VBP', 'VBP', 'TO', 'VB', 'DT', 'NNP', 'NNS', 'VBP', 'DT', 'NN', 'MD', 'VB', 'RB', 'JJ']"
