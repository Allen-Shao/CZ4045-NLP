,text,token,annotation
0,Following is what I could come up with from whatever I read across the net.,"['Following', 'is', 'what', 'I', 'could', 'come', 'up', 'with', 'from', 'whatever', 'I', 'read', 'across', 'the', 'net', '.']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
1,"Working on local secondary indexes, range index and timestamps presently.","['Working', 'on', 'local', 'secondary', 'indexes', ',', 'range', 'index', 'and', 'timestamps', 'presently', '.']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
2,Thanks again!    ,"['Thanks', 'again', '!']","['IDENTIFIER', 'IDENTIFIER', 'LOGICAL_OPERATOR']"
3,    package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
4,    import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
5,"        ""github.com/aws/aws-sdk-go/aws""","['""github.com/aws/aws-sdk-go/aws""']",['STRING_LITERAL']
6,"        // ""github.com/aws/aws-sdk-go/aws/awserr""","['//', '""github.com/aws/aws-sdk-go/aws/awserr""']","['COMMENT', 'NN']"
7,"        ""github.com/aws/aws-sdk-go/aws/awsutil""","['""github.com/aws/aws-sdk-go/aws/awsutil""']",['STRING_LITERAL']
8,"        ""github.com/aws/aws-sdk-go/service/dynamodb""","['""github.com/aws/aws-sdk-go/service/dynamodb""']",['STRING_LITERAL']
9,"        ""log""","['""log""']",['STRING_LITERAL']
10,"        ""strconv""","['""strconv""']",['STRING_LITERAL']
11,"        ""time""","['""time""']",['STRING_LITERAL']
12,    ),[')'],['PUNCTUATION']
13,    type dynamo struct {,"['type', 'dynamo', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
14,        db            *dynamodb.DynamoDB,"['db', '*', 'dynamodb', '.', 'DynamoDB']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
15,        tableName     string,"['tableName', 'string']","['IDENTIFIER', 'IDENTIFIER']"
16,        readCapacity  int64,"['readCapacity', 'int64']","['IDENTIFIER', 'IDENTIFIER']"
17,        writeCapacity int64,"['writeCapacity', 'int64']","['IDENTIFIER', 'IDENTIFIER']"
18,    },['}'],['PUNCTUATION']
19,    type metadata struct {,"['type', 'metadata', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
20,        dynamoDb  *dynamo,"['dynamoDb', '*', 'dynamo']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
21,        batchID   string,"['batchID', 'string']","['IDENTIFIER', 'IDENTIFIER']"
22,        field1    string,"['field1', 'string']","['IDENTIFIER', 'IDENTIFIER']"
23,        field2    string,"['field2', 'string']","['IDENTIFIER', 'IDENTIFIER']"
24,        batchSize int //In Bytes,"['batchSize', 'int', '//', 'In', 'Bytes']","['IDENTIFIER', 'IDENTIFIER', 'COMMENT', 'IN', 'NNS']"
25,    },['}'],['PUNCTUATION']
26,"    func newDynamo(name string, readCapacity, writeCapacity int64) *dynamo {","['func', 'newDynamo', '(', 'name', 'string', ',', 'readCapacity', ',', 'writeCapacity', 'int64', ')', '*', 'dynamo', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
27,        cfg := aws.DefaultConfig,"['cfg', ':=', 'aws', '.', 'DefaultConfig']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
28,        return &dynamo{,"['return', '&', 'dynamo', '{']","['KEYWORD', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
29,"            db:            dynamodb.New(cfg),","['db', ':', 'dynamodb.New(cfg)', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
30,"            tableName:     name,","['tableName', ':', 'name', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
31,"            readCapacity:  readCapacity,","['readCapacity', ':', 'readCapacity', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
32,"            writeCapacity: writeCapacity,","['writeCapacity', ':', 'writeCapacity', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
33,        },['}'],['PUNCTUATION']
34,    },['}'],['PUNCTUATION']
35,"    func newMetadata(batchID, field1Val, field2Val string, batchSizeVal int) *metadata {","['func', 'newMetadata', '(', 'batchID', ',', 'field1Val', ',', 'field2Val', 'string', ',', 'batchSizeVal', 'int', ')', '*', 'metadata', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
36,        return &metadata{,"['return', '&', 'metadata', '{']","['KEYWORD', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
37,"            batchID:   batchID,","['batchID', ':', 'batchID', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
38,"            field1:    field1Val,","['field1', ':', 'field1Val', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
39,"            field2:    field2Val,","['field2', ':', 'field2Val', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
40,"            batchSize: batchSizeVal,","['batchSize', ':', 'batchSizeVal', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
41,        },['}'],['PUNCTUATION']
42,    },['}'],['PUNCTUATION']
43,    var dynDB *dynamo,"['var', 'dynDB', '*', 'dynamo']","['KEYWORD', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
44,    var m *metadata,"['var', 'm', '*', 'metadata']","['KEYWORD', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
45,"    func main() { //create the *metadata struct object, and it can then call writeToDynamo fn","['func', 'main', '()', '{', '//', 'create', 'the', '*metadata', 'struct', 'object,', 'and', 'it', 'can', 'then', 'call', 'writeToDynamo', 'fn']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'COMMENT', 'VB', 'DT', 'NNP', 'NN', 'NN', 'CC', 'PRP', 'MD', 'RB', 'VB', 'NN', 'NN']"
46,"        log.Println(""Entry"")","['log.Println(""Entry"")']",['FUNCTION_CALL']
47,"        dynDB = newDynamo(""tableName"", 1, 1) //make a new dynamo struct object","['dynDB', '=', 'newDynamo', '(', '""tableName""', ',', '1', ',', '1', ')', '//', 'make', 'a', 'new', 'dynamo', 'struct', 'object']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'COMMENT', 'VB', 'DT', 'JJ', 'NN', 'NN', 'NN']"
48,        dynDB.createTable(),['dynDB.createTable()'],['FUNCTION_CALL']
49,"        m = newMetadata(""field1Value"", ""field2Value"", 232)","['m', '=', 'newMetadata', '(', '""field1Value""', ',', '""field2Value""', ',', '232', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
50,        m.setDynamoDB(),['m.setDynamoDB()'],['FUNCTION_CALL']
51,        m.writeToDynamo(),['m.writeToDynamo()'],['FUNCTION_CALL']
52,"        log.Println(""Exit"")","['log.Println(""Exit"")']",['FUNCTION_CALL']
53,    },['}'],['PUNCTUATION']
54,    func (d *dynamo) createTable() (err error) {,"['func', '(', 'd', '*', 'dynamo', ')', 'createTable', '()', '(', 'err', 'error', ')', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
55,"        log.Println(""createTable Entry"")","['log.Println(""createTable Entry"")']",['FUNCTION_CALL']
56,        tableDefinition := &dynamodb.CreateTableInput{,"['tableDefinition', ':=', '&', 'dynamodb', '.', 'CreateTableInput', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
57,"            TableName: aws.String(d.tableName),","['TableName', ':', 'aws.String(d.tableName)', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
58,            AttributeDefinitions: []*dynamodb.AttributeDefinition{ // Required,"['AttributeDefinitions', ':', '[]*', 'dynamodb', '.', 'AttributeDefinition', '{', '//', 'Required']","['IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'COMMENT', 'VBN']"
59,                { // Required,"['{', '//', 'Required']","['PUNCTUATION', 'COMMENT', 'VBN']"
60,"                    AttributeName: aws.String(""batchID""),","['AttributeName', ':', 'aws.String(""batchID"")', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
61,"                    AttributeType: aws.String(""S""), // Required","['AttributeType', ':', 'aws.String(""S"")', ',', '//', 'Required']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION', 'COMMENT', 'VBN']"
62,"                },","['},']",['PUNCTUATION']
63,"            },","['},']",['PUNCTUATION']
64,            KeySchema: []*dynamodb.KeySchemaElement{ // Required,"['KeySchema', ':', '[]*', 'dynamodb', '.', 'KeySchemaElement', '{', '//', 'Required']","['IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'COMMENT', 'VBN']"
65,                { // Required,"['{', '//', 'Required']","['PUNCTUATION', 'COMMENT', 'VBN']"
66,"                    AttributeName: aws.String(""batchID""),","['AttributeName', ':', 'aws.String(""batchID"")', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
67,"                    KeyType:       aws.String(""HASH""), // Required","['KeyType', ':', 'aws.String(""HASH"")', ',', '//', 'Required']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION', 'COMMENT', 'VBN']"
68,"                },","['},']",['PUNCTUATION']
69,"            },","['},']",['PUNCTUATION']
70,            ProvisionedThroughput: &dynamodb.ProvisionedThroughput{,"['ProvisionedThroughput', ':', '&', 'dynamodb', '.', 'ProvisionedThroughput', '{']","['IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
71,"                ReadCapacityUnits:  aws.Long(d.readCapacity),","['ReadCapacityUnits', ':', 'aws.Long(d.readCapacity)', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
72,"                WriteCapacityUnits: aws.Long(d.writeCapacity),","['WriteCapacityUnits', ':', 'aws.Long(d.writeCapacity)', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
73,"            },","['},']",['PUNCTUATION']
74,        },['}'],['PUNCTUATION']
75,"        resp, err := dynDB.db.CreateTable(tableDefinition)","['resp', ',', 'err', ':=', 'dynDB', '.', 'db.CreateTable(tableDefinition)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
76,"        log.Println(""After CreateTable---"")","['log.Println(""After CreateTable---"")']",['FUNCTION_CALL']
77,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
78,"            log.Println(""create table failed"", err.Error())","['log.Println(""create table failed"", err.Error())']",['FUNCTION_CALL']
79,            return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
80,        },['}'],['PUNCTUATION']
81,        if resp != nil && resp.TableDescription != nil {,"['if', 'resp', '!=', 'nil', '&&', 'resp', '.', 'TableDescription', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
82,"            log.Println(""TableStatus:"", resp.TableDescription.TableStatus)","['log.Println(""TableStatus:"", resp.TableDescription.TableStatus)']",['FUNCTION_CALL']
83,        },['}'],['PUNCTUATION']
84,"        log.Println(""CreateTable Exit"")","['log.Println(""CreateTable Exit"")']",['FUNCTION_CALL']
85,"        //Sleep for 15 seconds, this is better when put in a function that validates the table that was created,","['//', 'Sleep', 'for', '15', 'seconds,', 'this', 'is', 'better', 'when', 'put', 'in', 'a', 'function', 'that', 'validates', 'the', 'table', 'that', 'was', 'created,']","['COMMENT', 'NNP', 'IN', 'CD', 'NN', 'DT', 'VBZ', 'RBR', 'WRB', 'VBN', 'IN', 'DT', 'NN', 'WDT', 'VBZ', 'DT', 'NN', 'WDT', 'VBD', 'NN']"
86,"        //But for testing, the program is put to sleep for 15 seconds. Program may fail if writeToDynamo is exedcuted","['//', 'But', 'for', 'testing,', 'the', 'program', 'is', 'put', 'to', 'sleep', 'for', '15', 'seconds.', 'Program', 'may', 'fail', 'if', 'writeToDynamo', 'is', 'exedcuted']","['COMMENT', 'CC', 'IN', 'JJ', 'DT', 'NN', 'VBZ', 'VBN', 'TO', 'VB', 'IN', 'CD', 'JJ', 'NNP', 'MD', 'VB', 'IN', 'NN', 'VBZ', 'VBN']"
87,        //without the table being in ACTIVE state.,"['//', 'without', 'the', 'table', 'being', 'in', 'ACTIVE', 'state.']","['COMMENT', 'IN', 'DT', 'NN', 'VBG', 'IN', 'NNP', 'NN']"
88,        time.Sleep(15 * time.Second),['time.Sleep(15 * time.Second)'],['FUNCTION_CALL']
89,        return,['return'],['KEYWORD']
90,    },['}'],['PUNCTUATION']
91,    func (m *metadata) writeToDynamo() {,"['func', '(', 'm', '*', 'metadata', ')', 'writeToDynamo', '()', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
92,"        log.Println(""writeToDynamo"")","['log.Println(""writeToDynamo"")']",['FUNCTION_CALL']
93,        //Not exactly able to figure out what was wrong with the prev code snippet,"['//', 'Not', 'exactly', 'able', 'to', 'figure', 'out', 'what', 'was', 'wrong', 'with', 'the', 'prev', 'code', 'snippet']","['COMMENT', 'RB', 'RB', 'JJ', 'TO', 'VB', 'RP', 'WP', 'VBD', 'JJ', 'IN', 'DT', 'NN', 'NN', 'NN']"
94,        params := &dynamodb.PutItemInput{,"['params', ':=', '&', 'dynamodb', '.', 'PutItemInput', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
95,"            TableName: aws.String(m.dynamoDb.tableName),","['TableName', ':', 'aws.String(m.dynamoDb.tableName)', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
96,            Item: map[string]*dynamodb.AttributeValue{,"['Item', ':', 'map', '[', 'string', ']*', 'dynamodb', '.', 'AttributeValue', '{']","['IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
97,"                ""batchID"": &dynamodb.AttributeValue{","['""batchID""', ':', '&', 'dynamodb', '.', 'AttributeValue', '{']","['STRING_LITERAL', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
98,"                    S: aws.String(m.batchID),","['S', ':', 'aws.String(m.batchID)', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
99,"                },","['},']",['PUNCTUATION']
100,"                ""field2"": &dynamodb.AttributeValue{","['""field2""', ':', '&', 'dynamodb', '.', 'AttributeValue', '{']","['STRING_LITERAL', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
101,"                    S: aws.String(m.field2),","['S', ':', 'aws.String(m.field2)', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
102,"                },","['},']",['PUNCTUATION']
103,"                ""field3"": &dynamodb.AttributeValue{","['""field3""', ':', '&', 'dynamodb', '.', 'AttributeValue', '{']","['STRING_LITERAL', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
104,"                    S: aws.String(m.field3),","['S', ':', 'aws.String(m.field3)', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
105,"                },","['},']",['PUNCTUATION']
106,"                ""batchSize"": &dynamodb.AttributeValue{","['""batchSize""', ':', '&', 'dynamodb', '.', 'AttributeValue', '{']","['STRING_LITERAL', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
107,"                    N: aws.String(strconv.Itoa(m.batchSize_Compressed)),","['N', ':', 'aws.String(strconv.Itoa(m.batchSize_Compressed))', ',']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION']"
108,"                },","['},']",['PUNCTUATION']
109,"            },","['},']",['PUNCTUATION']
110,        },['}'],['PUNCTUATION']
111,"        resp2, err2 := dynDB.db.PutItem(params)","['resp2', ',', 'err2', ':=', 'dynDB', '.', 'db.PutItem(params)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
112,        if err2 != nil {,"['if', 'err2', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
113,"            // if awsErr, ok := err2.(awserr.Error); ok { // Generic AWS error with Code, Message, and original error (if any)","['//', 'if', 'awsErr,', 'ok', ':=', 'err2.(awserr.Error);', 'ok', '{', 'Generic', 'AWS', 'error', 'with', 'Code,', 'Message,', 'and', 'original', 'error', '(if', 'any)']","['COMMENT', 'IN', 'JJ', 'JJ', 'NN', 'RB', 'JJ', '(', 'NNP', 'NNP', 'NN', 'IN', 'NNP', 'NNP', 'CC', 'JJ', 'NN', 'NNP', 'NN']"
114,"            //  log.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())","['//', 'log.Println(awsErr.Code(),', 'awsErr.Message(),', 'awsErr.OrigErr())']","['COMMENT', 'NN', 'NN', 'NN']"
115,"            //  if reqErr, ok := err.(awserr.RequestFailure); ok {","['//', 'if', 'reqErr,', 'ok', ':=', 'err.(awserr.RequestFailure);', 'ok', '{']","['COMMENT', 'IN', 'JJ', 'JJ', 'NN', 'RB', 'JJ', '(']"
116,            //      // A service error occurred,"['//', 'A', 'service', 'error', 'occurred']","['COMMENT', 'DT', 'NN', 'NN', 'VBD']"
117,"            //      log.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())","['//', 'log.Println(reqErr.Code(),', 'reqErr.Message(),', 'reqErr.StatusCode(),', 'reqErr.RequestID())']","['COMMENT', 'NN', 'NN', 'NN', 'NN']"
118,            //  },"['//', '}']","['COMMENT', ')']"
119,"            // } else { // This case should never be hit, the SDK should always return an //","['//', '}', 'else', '{', 'This', 'case', 'should', 'never', 'be', 'hit,', 'the', 'SDK', 'should', 'always', 'return', 'an']","['COMMENT', ')', 'RB', '(', 'DT', 'NN', 'MD', 'RB', 'VB', 'VBN', 'DT', 'NNP', 'MD', 'RB', 'VB', 'DT']"
120,            //  //error which satisfies the awserr.Error interface.,"['//', 'error', 'which', 'satisfies', 'the', 'awserr.Error', 'interface.']","['COMMENT', 'NN', 'WDT', 'VBZ', 'DT', 'NN', 'NN']"
121,            //  log.Println(err2.Error()),"['//', 'log.Println(err2.Error())']","['COMMENT', 'NN']"
122,            // },"['//', '}']","['COMMENT', ')']"
123,"            log.Println(""Error while Writing:"", err2.Error())","['log.Println(""Error while Writing:"", err2.Error())']",['FUNCTION_CALL']
124,        },['}'],['PUNCTUATION']
125,"        log.Println(""Response:"", awsutil.StringValue(resp2))","['log.Println(""Response:"", awsutil.StringValue(resp2))']",['FUNCTION_CALL']
126,    },['}'],['PUNCTUATION']
127,    func (m *metadata) setDynamoDB() {,"['func', '(', 'm', '*', 'metadata', ')', 'setDynamoDB', '()', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
128,        m.dynamoDb = dynDB,"['m', '.', 'dynamoDb', '=', 'dynDB']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
129,    },['}'],['PUNCTUATION']
