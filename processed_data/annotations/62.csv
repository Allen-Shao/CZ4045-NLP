,text,token,annotation
0,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
1,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
2,"    ""bufio""","['""bufio""']",['STRING_LITERAL']
3,"    ""bytes""","['""bytes""']",['STRING_LITERAL']
4,"    ""errors""","['""errors""']",['STRING_LITERAL']
5,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
6,"    ""os""","['""os""']",['STRING_LITERAL']
7,"    ""runtime""","['""runtime""']",['STRING_LITERAL']
8,"    ""sort""","['""sort""']",['STRING_LITERAL']
9,"    ""strconv""","['""strconv""']",['STRING_LITERAL']
10,),[')'],['OPERATOR']
11,type Edge struct {,"['type', 'Edge', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
12,"    U, V uint32","['U', ',', 'V', 'uint32']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER']"
13,},['}'],['OPERATOR']
14,func (e Edge) String() string {,"['func', '(', 'e', 'Edge', ')', 'String', '()', 'string', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
15,"    return fmt.Sprintf(""%d,%d"", e.U, e.V)","['return', 'fmt', '.', 'Sprintf', '(', '""%d,%d""', ',', 'e', '.', 'U', ',', 'e', '.', 'V', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
16,},['}'],['OPERATOR']
17,type ByKey []Edge,"['type', 'ByKey', '[]', 'Edge']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
18,func (a ByKey) Len() int      { return len(a) },"['func', '(', 'a', 'ByKey', ')', 'Len', '()', 'int', '{', 'return', 'len', '(', 'a', ')', '}']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
19,"func (a ByKey) Swap(i, j int) { a[i], a[j] = a[j], a[i] }","['func', '(', 'a', 'ByKey', ')', 'Swap', '(', 'i', ',', 'j', 'int', ')', '{', 'a', '[', 'i', '],', 'a', '[', 'j', ']', '=', 'a', '[', 'j', '],', 'a', '[', 'i', ']', '}']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
20,"func (a ByKey) Less(i, j int) bool {","['func', '(', 'a', 'ByKey', ')', 'Less', '(', 'i', ',', 'j', 'int', ')', 'bool', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
21,    if a[i].U < a[j].U {,"['if', 'a', '[', 'i', '].', 'U', '<', 'a', '[', 'j', '].', 'U', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
22,        return true,"['return', 'true']","['KEYWORD', 'IDENTIFIER']"
23,    },['}'],['OPERATOR']
24,    if a[i].U == a[j].U && a[i].V < a[j].V {,"['if', 'a', '[', 'i', '].', 'U', '==', 'a', '[', 'j', '].', 'U', '&&', 'a', '[', 'i', '].', 'V', '<', 'a', '[', 'j', '].', 'V', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
25,        return true,"['return', 'true']","['KEYWORD', 'IDENTIFIER']"
26,    },['}'],['OPERATOR']
27,    return false,"['return', 'false']","['KEYWORD', 'IDENTIFIER']"
28,},['}'],['OPERATOR']
29,func countEdges(scanner *bufio.Scanner) int {,"['func', 'countEdges', '(', 'scanner', '*', 'bufio', '.', 'Scanner', ')', 'int', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
30,"    var nNodes, nEdges int","['var', 'nNodes', ',', 'nEdges', 'int']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER']"
31,    for scanner.Scan() {,"['for', 'scanner', '.', 'Scan', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
32,        line := scanner.Bytes(),"['line', ':=', 'scanner', '.', 'Bytes', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
33,        if !(len(line) > 0 && line[0] == '#') {,"['if', '!(', 'len', '(', 'line', ')', '>', '0', '&&', 'line', '[', '0', ']', '==', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'OPERATOR', 'OPERATOR']"
34,            nEdges++,"['nEdges', '++']","['IDENTIFIER', 'OPERATOR']"
35,            continue,['continue'],['KEYWORD']
36,        },['}'],['OPERATOR']
37,"        n, err := fmt.Sscanf(string(line), ""# Nodes: %d Edges: %d"", &nNodes, &nEdges)","['n', ',', 'err', ':=', 'fmt', '.', 'Sscanf', '(', 'string', '(', 'line', '),', '""# Nodes: %d Edges: %d""', ',', '&', 'nNodes', ',', '&', 'nEdges', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
38,        if err != nil || n != 2 {,"['if', 'err', '!=', 'nil', '||', 'n', '!=', '2', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
39,"            n, err = fmt.Sscanf(string(line), ""# %d,%d"", &nNodes, &nEdges)","['n', ',', 'err', '=', 'fmt', '.', 'Sscanf', '(', 'string', '(', 'line', '),', '""# %d,%d""', ',', '&', 'nNodes', ',', '&', 'nEdges', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
40,            if err != nil || n != 2 {,"['if', 'err', '!=', 'nil', '||', 'n', '!=', '2', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
41,                continue,['continue'],['KEYWORD']
42,            },['}'],['OPERATOR']
43,        },['}'],['OPERATOR']
44,        fmt.Println(string(line)),"['fmt', '.', 'Println', '(', 'string', '(', 'line', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
45,        break,['break'],['KEYWORD']
46,    },['}'],['OPERATOR']
47,    if err := scanner.Err(); err != nil {,"['if', 'err', ':=', 'scanner', '.', 'Err', '();', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
48,        panic(err.Error()),"['panic', '(', 'err', '.', 'Error', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
49,    },['}'],['OPERATOR']
50,    fmt.Println(nEdges),"['fmt', '.', 'Println', '(', 'nEdges', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
51,    return nEdges,"['return', 'nEdges']","['KEYWORD', 'IDENTIFIER']"
52,},['}'],['OPERATOR']
53,func loadEdges(filename string) []Edge {,"['func', 'loadEdges', '(', 'filename', 'string', ')', '[]', 'Edge', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
54,"    file, err := os.Open(filename)","['file', ',', 'err', ':=', 'os', '.', 'Open', '(', 'filename', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
55,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
56,        panic(err.Error()),"['panic', '(', 'err', '.', 'Error', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
57,    },['}'],['OPERATOR']
58,    defer file.Close(),"['defer', 'file', '.', 'Close', '()']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
59,    scanner := bufio.NewScanner(file),"['scanner', ':=', 'bufio', '.', 'NewScanner', '(', 'file', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
60,    nEdges := countEdges(scanner),"['nEdges', ':=', 'countEdges', '(', 'scanner', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
61,"    edges := make([]Edge, 0, nEdges)","['edges', ':=', 'make', '([]', 'Edge', ',', '0', ',', 'nEdges', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
62,"    offset, err := file.Seek(0, os.SEEK_SET)","['offset', ',', 'err', ':=', 'file', '.', 'Seek', '(', '0', ',', 'os', '.', 'SEEK_SET', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
63,    if err != nil || offset != 0 {,"['if', 'err', '!=', 'nil', '||', 'offset', '!=', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
64,        panic(err.Error()),"['panic', '(', 'err', '.', 'Error', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
65,    },['}'],['OPERATOR']
66,    var sep byte = '\t',"['var', 'sep', 'byte', '=', 't']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
67,    scanner = bufio.NewScanner(file),"['scanner', '=', 'bufio', '.', 'NewScanner', '(', 'file', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
68,    for scanner.Scan() {,"['for', 'scanner', '.', 'Scan', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
69,        line := scanner.Bytes(),"['line', ':=', 'scanner', '.', 'Bytes', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
70,        if len(line) > 0 && line[0] == '#' {,"['if', 'len', '(', 'line', ')', '>', '0', '&&', 'line', '[', '0', ']', '==', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'OPERATOR']"
71,            continue,['continue'],['KEYWORD']
72,        },['}'],['OPERATOR']
73,"        i := bytes.IndexByte(line, sep)","['i', ':=', 'bytes', '.', 'IndexByte', '(', 'line', ',', 'sep', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
74,        if i = len(line) {,"['if', 'i', '=', 'len', '(', 'line', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
75,"            sep = ','","['sep', '=', ',']","['IDENTIFIER', 'OPERATOR', 'OPERATOR']"
76,"            i = bytes.IndexByte(line, sep)","['i', '=', 'bytes', '.', 'IndexByte', '(', 'line', ',', 'sep', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
77,            if i = len(line) {,"['if', 'i', '=', 'len', '(', 'line', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
78,"                err := errors.New(""Invalid line format: "" + string(line))","['err', ':=', 'errors', '.', 'New', '(', '""Invalid line format: ""', '+', 'string', '(', 'line', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
79,                panic(err.Error()),"['panic', '(', 'err', '.', 'Error', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
80,            },['}'],['OPERATOR']
81,        },['}'],['OPERATOR']
82,"        u, err := ParseUint(line[:i], 10, 32)","['u', ',', 'err', ':=', 'ParseUint', '(', 'line', '[:', 'i', '],', '10', ',', '32', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
83,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
84,            panic(err.Error()),"['panic', '(', 'err', '.', 'Error', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
85,        },['}'],['OPERATOR']
86,"        v, err := ParseUint(line[i+1:], 10, 32)","['v', ',', 'err', ':=', 'ParseUint', '(', 'line', '[', 'i', '+', '1', ':],', '10', ',', '32', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
87,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
88,            panic(err.Error()),"['panic', '(', 'err', '.', 'Error', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
89,        },['}'],['OPERATOR']
90,        if u > v {,"['if', 'u', '>', 'v', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
91,"            u, v = v, u","['u', ',', 'v', '=', 'v', ',', 'u']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
92,        },['}'],['OPERATOR']
93,"        edges = append(edges, Edge{uint32(u), uint32(v)})","['edges', '=', 'append', '(', 'edges', ',', 'Edge', '{', 'uint32', '(', 'u', '),', 'uint32', '(', 'v', ')})']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
94,    },['}'],['OPERATOR']
95,    if err := scanner.Err(); err != nil {,"['if', 'err', ':=', 'scanner', '.', 'Err', '();', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
96,        panic(err.Error()),"['panic', '(', 'err', '.', 'Error', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
97,    },['}'],['OPERATOR']
98,    if len(edges) <= 1 {,"['if', 'len', '(', 'edges', ')', '<=', '1', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
99,        return edges,"['return', 'edges']","['KEYWORD', 'IDENTIFIER']"
100,    },['}'],['OPERATOR']
101,    sort.Sort(ByKey(edges)),"['sort', '.', 'Sort', '(', 'ByKey', '(', 'edges', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
102,    j := 0,"['j', ':=', '0']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
103,    i := j + 1,"['i', ':=', 'j', '+', '1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
104,"    for ; i < len(edges); i, j = i+1, j+1 {","['for', ';', 'i', '<', 'len', '(', 'edges', ');', 'i', ',', 'j', '=', 'i', '+', '1', ',', 'j', '+', '1', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
105,        if edges[i] == edges[j] {,"['if', 'edges', '[', 'i', ']', '==', 'edges', '[', 'j', ']', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
106,            break,['break'],['KEYWORD']
107,        },['}'],['OPERATOR']
108,    },['}'],['OPERATOR']
109,    for ; i < len(edges); i++ {,"['for', ';', 'i', '<', 'len', '(', 'edges', ');', 'i', '++', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
110,        if edges[i] != edges[j] {,"['if', 'edges', '[', 'i', ']', '!=', 'edges', '[', 'j', ']', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
111,            j++,"['j', '++']","['IDENTIFIER', 'OPERATOR']"
112,            edges[j] = edges[i],"['edges', '[', 'j', ']', '=', 'edges', '[', 'i', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
113,        },['}'],['OPERATOR']
114,    },['}'],['OPERATOR']
115,    edges = edges[:j+1],"['edges', '=', 'edges', '[:', 'j', '+', '1', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
116,    return edges,"['return', 'edges']","['KEYWORD', 'IDENTIFIER']"
117,},['}'],['OPERATOR']
118,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
119,    if len(os.Args) <= 1 {,"['if', 'len', '(', 'os', '.', 'Args', ')', '<=', '1', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
120,"        err := errors.New(""Missing file name"")","['err', ':=', 'errors', '.', 'New', '(', '""Missing file name""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
121,        panic(err.Error()),"['panic', '(', 'err', '.', 'Error', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
122,    },['}'],['OPERATOR']
123,    filename := os.Args[1],"['filename', ':=', 'os', '.', 'Args', '[', '1', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
124,    fmt.Println(filename),"['fmt', '.', 'Println', '(', 'filename', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
125,    edges := loadEdges(filename),"['edges', ':=', 'loadEdges', '(', 'filename', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
126,    var ms runtime.MemStats,"['var', 'ms', 'runtime', '.', 'MemStats']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
127,    runtime.ReadMemStats(&ms),"['runtime', '.', 'ReadMemStats', '(&', 'ms', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
128,"    fmt.Println(ms.Alloc, ms.TotalAlloc, ms.Sys, ms.Mallocs, ms.Frees)","['fmt', '.', 'Println', '(', 'ms', '.', 'Alloc', ',', 'ms', '.', 'TotalAlloc', ',', 'ms', '.', 'Sys', ',', 'ms', '.', 'Mallocs', ',', 'ms', '.', 'Frees', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
129,"    fmt.Println(len(edges), cap(edges))","['fmt', '.', 'Println', '(', 'len', '(', 'edges', '),', 'cap', '(', 'edges', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
130,"    for i, e := range edges {","['for', 'i', ',', 'e', ':=', 'range', 'edges', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
131,        fmt.Println(e),"['fmt', '.', 'Println', '(', 'e', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
132,        if i >= 10 {,"['if', 'i', '>=', '10', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
133,            break,['break'],['KEYWORD']
134,        },['}'],['OPERATOR']
135,    },['}'],['OPERATOR']
136,},['}'],['OPERATOR']
137,// bytconv from strconv,['// bytconv from strconv'],"['COMMENT', 'NN', 'IN', 'NN']"
138,// Return the first number n such that n*base >= 1<<64.,['// Return the first number n such that n*base >= 1<<64.'],"['COMMENT', 'VB', 'DT', 'JJ', 'NN', 'NNS', 'JJ', 'IN', 'JJ', 'NNP', 'NNP', 'CD', 'NNP', 'VBD', 'CD', '.']"
139,func cutoff64(base int) uint64 {,"['func', 'cutoff64', '(', 'base', 'int', ')', 'uint64', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
140,    if base < 2 {,"['if', 'base', '<', '2', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
141,        return 0,"['return', '0']","['KEYWORD', 'DECIMAL_LITERAL']"
142,    },['}'],['OPERATOR']
143,    return (1<<64-1)/uint64(base) + 1,"['return', '(', '1', '<<', '64', '-', '1', ')', 'uint64', '(', 'base', ')', '+', '1']","['KEYWORD', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
144,},['}'],['OPERATOR']
145,// ParseUint is like ParseInt but for unsigned numbers.,['// ParseUint is like ParseInt but for unsigned numbers.'],"['COMMENT', 'NN', 'VBZ', 'IN', 'NNP', 'CC', 'IN', 'JJ', 'NNS', '.']"
146,"func ParseUint(s []byte, base int, bitSize int) (n uint64, err error) {","['func', 'ParseUint', '(', 's', '[]', 'byte', ',', 'base', 'int', ',', 'bitSize', 'int', ')', '(', 'n', 'uint64', ',', 'err', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
147,"    var cutoff, maxVal uint64","['var', 'cutoff', ',', 'maxVal', 'uint64']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER']"
148,    if bitSize == 0 {,"['if', 'bitSize', '==', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
149,        bitSize = int(strconv.IntSize),"['bitSize', '=', 'int', '(', 'strconv', '.', 'IntSize', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
150,    },['}'],['OPERATOR']
151,    s0 := s,"['s0', ':=', 's']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
152,    switch {,"['switch', '{']","['IDENTIFIER', 'OPERATOR']"
153,    case len(s) < 1:,"['case', 'len', '(', 's', ')', '<', '1', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
154,        err = strconv.ErrSyntax,"['err', '=', 'strconv', '.', 'ErrSyntax']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
155,        goto Error,"['go', 'to', 'Error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
156,    case 2 <= base && base <= 36:,"['case', '2', '<=', 'base', '&&', 'base', '<=', '36', ':']","['KEYWORD', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
157,        // valid base; nothing to do,['// valid base; nothing to do'],"['COMMENT', 'JJ', 'NN', ':', 'NN', 'TO', 'VB']"
158,    case base == 0:,"['case', 'base', '==', '0', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
159,"        // Look for octal, hex prefix.","['// Look for octal, hex prefix.']","['COMMENT', 'NN', 'IN', 'JJ', ',', 'JJ', 'NN', '.']"
160,        switch {,"['switch', '{']","['IDENTIFIER', 'OPERATOR']"
161,        case s[0] == '0' && len(s) > 1 && (s[1] == 'x' || s[1] == 'X'):,"['case', 's', '[', '0', ']', '==', '0', '&&', 'len', '(', 's', ')', '>', '1', '&&', '(', 's', '[', '1', ']', '==', 'x', '||', 's', '[', '1', ']', '==', 'X', '):']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
162,            base = 16,"['base', '=', '16']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
163,            s = s[2:],"['s', '=', 's', '[', '2', ':]']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
164,            if len(s) < 1 {,"['if', 'len', '(', 's', ')', '<', '1', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
165,                err = strconv.ErrSyntax,"['err', '=', 'strconv', '.', 'ErrSyntax']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
166,                goto Error,"['go', 'to', 'Error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
167,            },['}'],['OPERATOR']
168,        case s[0] == '0':,"['case', 's', '[', '0', ']', '==', '0', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
169,            base = 8,"['base', '=', '8']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
170,        default:,"['default', ':']","['KEYWORD', 'OPERATOR']"
171,            base = 10,"['base', '=', '10']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
172,        },['}'],['OPERATOR']
173,    default:,"['default', ':']","['KEYWORD', 'OPERATOR']"
174,"        err = errors.New(""invalid base "" + strconv.Itoa(base))","['err', '=', 'errors', '.', 'New', '(', '""invalid base ""', '+', 'strconv', '.', 'Itoa', '(', 'base', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
175,        goto Error,"['go', 'to', 'Error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
176,    },['}'],['OPERATOR']
177,    n = 0,"['n', '=', '0']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
178,    cutoff = cutoff64(base),"['cutoff', '=', 'cutoff64', '(', 'base', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
179,    maxVal = 1<<uint(bitSize) - 1,"['maxVal', '=', '1', '<<', 'uint', '(', 'bitSize', ')', '-', '1']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
180,    for i := 0; i < len(s); i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 's', ');', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
181,        var v byte,"['var', 'v', 'byte']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
182,        d := s[i],"['d', ':=', 's', '[', 'i', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
183,        switch {,"['switch', '{']","['IDENTIFIER', 'OPERATOR']"
184,        case '0' <= d && d <= '9':,"['case', '0', '<=', 'd', '&&', 'd', '<=', '9', ':']","['KEYWORD', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
185,            v = d - '0',"['v', '=', 'd', '-', '0']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
186,        case 'a' <= d && d <= 'z':,"['case', 'a', '<=', 'd', '&&', 'd', '<=', 'z', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
187,            v = d - 'a' + 10,"['v', '=', 'd', '-', 'a', '+', '10']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
188,        case 'A' <= d && d <= 'Z':,"['case', 'A', '<=', 'd', '&&', 'd', '<=', 'Z', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
189,            v = d - 'A' + 10,"['v', '=', 'd', '-', 'A', '+', '10']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
190,        default:,"['default', ':']","['KEYWORD', 'OPERATOR']"
191,            n = 0,"['n', '=', '0']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
192,            err = strconv.ErrSyntax,"['err', '=', 'strconv', '.', 'ErrSyntax']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
193,            goto Error,"['go', 'to', 'Error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
194,        },['}'],['OPERATOR']
195,        if int(v) >= base {,"['if', 'int', '(', 'v', ')', '>=', 'base', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
196,            n = 0,"['n', '=', '0']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
197,            err = strconv.ErrSyntax,"['err', '=', 'strconv', '.', 'ErrSyntax']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
198,            goto Error,"['go', 'to', 'Error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
199,        },['}'],['OPERATOR']
200,        if n >= cutoff {,"['if', 'n', '>=', 'cutoff', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
201,            // n*base overflows,['// n*base overflows'],"['COMMENT', 'NN', 'NNS']"
202,            n = 1<<64 - 1,"['n', '=', '1', '<<', '64', '-', '1']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL']"
203,            err = strconv.ErrRange,"['err', '=', 'strconv', '.', 'ErrRange']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
204,            goto Error,"['go', 'to', 'Error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
205,        },['}'],['OPERATOR']
206,        n *= uint64(base),"['n', '*=', 'uint64', '(', 'base', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
207,        n1 := n + uint64(v),"['n1', ':=', 'n', '+', 'uint64', '(', 'v', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
208,        if n1  maxVal {,"['if', 'n1', 'maxVal', '{']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
209,            // n+v overflows,['// n+v overflows'],"['COMMENT', 'NN', 'NNS']"
210,            n = 1<<64 - 1,"['n', '=', '1', '<<', '64', '-', '1']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL']"
211,            err = strconv.ErrRange,"['err', '=', 'strconv', '.', 'ErrRange']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
212,            goto Error,"['go', 'to', 'Error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
213,        },['}'],['OPERATOR']
214,        n = n1,"['n', '=', 'n1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
215,    },['}'],['OPERATOR']
216,"    return n, nil","['return', 'n', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
217,Error:,"['Error', ':']","['IDENTIFIER', 'OPERATOR']"
218,"    return n, &strconv.NumError{""ParseUint"", string(s0), err}","['return', 'n', ',', '&', 'strconv', '.', 'NumError', '{', '""ParseUint""', ',', 'string', '(', 's0', '),', 'err', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
219,},['}'],['OPERATOR']
