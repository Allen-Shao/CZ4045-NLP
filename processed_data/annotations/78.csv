,text,token,annotation
0,"Let's look at the basics of a TCP server in Go.

First, there is the ""listening"" part. We can set that up like this:

","[""Let's"", 'look', 'at', 'the', 'basics', 'of', 'a', 'TCP', 'server', 'in', 'Go.', 'First,', 'there', 'is', 'the', '""listening""', 'part.', 'We', 'can', 'set', 'that', 'up', 'like', 'this:']","['JJ', 'NN', 'IN', 'DT', 'NNS', 'IN', 'DT', 'NNP', 'NN', 'IN', 'NNP', 'NNP', 'EX', 'VBZ', 'DT', 'JJ', 'NN', 'PRP', 'MD', 'VB', 'DT', 'IN', 'IN', 'NN']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
4,"    ""io""","['""io""']",['STRING_LITERAL']
5,"    ""net""","['""net""']",['STRING_LITERAL']
6,"    ""time""","['""time""']",['STRING_LITERAL']
7,),[')'],['PUNCTUATION']
8,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
9,"    ln, err := net.Listen(""tcp"", "":9000"")","['ln', ',', 'err', ':=', 'net.Listen(""tcp"", "":9000"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
10,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
11,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
12,    },['}'],['PUNCTUATION']
13,    defer ln.Close(),"['defer', 'ln.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
14,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
15,"        conn, err := ln.Accept()","['conn', ',', 'err', ':=', 'ln.Accept()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
16,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
17,            panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
18,        },['}'],['PUNCTUATION']
19,"        io.WriteString(conn, fmt.Sprint(""Hello World\n"", time.Now(), ""\n""))","['io.WriteString(conn, fmt.Sprint(""Hello World\\n"", time.Now(), ""\\n""))']",['FUNCTION_CALL']
20,        conn.Close(),['conn.Close()'],['FUNCTION_CALL']
21,    },['}'],['PUNCTUATION']
22,},['}'],['PUNCTUATION']
23,"

Notice the infinite for loop. It is always running and looping over that code. What does the code that is being looped over do? If a connection comes in on the port which is being listened on, then that connection is accepted. We then do something with that connection. In this case, we write back to it with io.WriteString. To this one connection, we are sending a response. We then close the connection. And if there are more connections, we're ready to accept them.

Now let's create a client to connect to the TCP server. This is known as ""dialing"" in to the TCP server.

To run all of this code on your machine, run the TCP server code above. To run the code, go to your terminal and enter: go run main.go

Now put the code directly below into another file. Launch another tab in your terminal. Run that code also by entering: go run main.go

The code below which ""dials"" in to your TCP server will connect to the server and the TCP server will respond, then close the connection.

Here is the code for dialing into a TCP server as a client:

","['Notice', 'the', 'infinite', 'for', 'loop.', 'It', 'is', 'always', 'running', 'and', 'looping', 'over', 'that', 'code.', 'What', 'does', 'the', 'code', 'that', 'is', 'being', 'looped', 'over', 'do?', 'If', 'a', 'connection', 'comes', 'in', 'on', 'the', 'port', 'which', 'is', 'being', 'listened', 'on,', 'then', 'that', 'connection', 'is', 'accepted.', 'We', 'then', 'do', 'something', 'with', 'that', 'connection.', 'In', 'this', 'case,', 'we', 'write', 'back', 'to', 'it', 'with', 'io.WriteString.', 'To', 'this', 'one', 'connection,', 'we', 'are', 'sending', 'a', 'response.', 'We', 'then', 'close', 'the', 'connection.', 'And', 'if', 'there', 'are', 'more', 'connections,', ""we're"", 'ready', 'to', 'accept', 'them.', 'Now', ""let's"", 'create', 'a', 'client', 'to', 'connect', 'to', 'the', 'TCP', 'server.', 'This', 'is', 'known', 'as', '""dialing""', 'in', 'to', 'the', 'TCP', 'server.', 'To', 'run', 'all', 'of', 'this', 'code', 'on', 'your', 'machine,', 'run', 'the', 'TCP', 'server', 'code', 'above.', 'To', 'run', 'the', 'code,', 'go', 'to', 'your', 'terminal', 'and', 'enter:', 'go', 'run', 'main.go', 'Now', 'put', 'the', 'code', 'directly', 'below', 'into', 'another', 'file.', 'Launch', 'another', 'tab', 'in', 'your', 'terminal.', 'Run', 'that', 'code', 'also', 'by', 'entering:', 'go', 'run', 'main.go', 'The', 'code', 'below', 'which', '""dials""', 'in', 'to', 'your', 'TCP', 'server', 'will', 'connect', 'to', 'the', 'server', 'and', 'the', 'TCP', 'server', 'will', 'respond,', 'then', 'close', 'the', 'connection.', 'Here', 'is', 'the', 'code', 'for', 'dialing', 'into', 'a', 'TCP', 'server', 'as', 'a', 'client:']","['NNP', 'DT', 'NN', 'IN', 'NN', 'PRP', 'VBZ', 'RB', 'VBG', 'CC', 'VBG', 'RP', 'DT', 'VBZ', 'WP', 'VBZ', 'DT', 'NN', 'WDT', 'VBZ', 'VBG', 'VBN', 'IN', 'NN', 'IN', 'DT', 'NN', 'VBZ', 'IN', 'IN', 'DT', 'NN', 'WDT', 'VBZ', 'VBG', 'VBN', 'RP', 'RB', 'DT', 'NN', 'VBZ', 'IN', 'PRP', 'RB', 'VBP', 'NN', 'IN', 'DT', 'NN', 'IN', 'DT', 'NN', 'PRP', 'VBP', 'RB', 'TO', 'PRP', 'IN', 'NN', 'TO', 'DT', 'CD', 'NN', 'PRP', 'VBP', 'VBG', 'DT', 'NN', 'PRP', 'RB', 'VBD', 'DT', 'NN', 'CC', 'IN', 'EX', 'VBP', 'JJR', 'JJ', 'NN', 'JJ', 'TO', 'VB', 'RB', 'RB', 'JJ', 'VBP', 'DT', 'NN', 'TO', 'VB', 'TO', 'DT', 'NNP', 'NN', 'DT', 'VBZ', 'VBN', 'IN', 'NN', 'IN', 'TO', 'DT', 'NNP', 'NN', 'TO', 'VB', 'DT', 'IN', 'DT', 'NN', 'IN', 'PRP$', 'NN', 'VB', 'DT', 'NNP', 'NN', 'NN', 'NN', 'TO', 'VB', 'DT', 'NN', 'VBP', 'TO', 'PRP$', 'NN', 'CC', 'NN', 'VBP', 'VB', 'RB', 'RB', 'VBP', 'DT', 'NN', 'RB', 'IN', 'IN', 'DT', 'NN', 'NNP', 'DT', 'NN', 'IN', 'PRP$', 'NN', 'NNP', 'IN', 'NN', 'RB', 'IN', 'NNS', 'VBP', 'VB', 'RB', 'DT', 'NN', 'IN', 'WDT', 'NN', 'IN', 'TO', 'PRP$', 'NNP', 'NN', 'MD', 'VB', 'TO', 'DT', 'NN', 'CC', 'DT', 'NNP', 'NN', 'MD', 'VB', 'RB', 'RB', 'DT', 'NN', 'RB', 'VBZ', 'DT', 'NN', 'IN', 'VBG', 'IN', 'DT', 'NNP', 'NN', 'IN', 'DT', 'NN']"
24,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
25,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
26,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
27,"    ""io/ioutil""","['""io/ioutil""']",['STRING_LITERAL']
28,"    ""net""","['""net""']",['STRING_LITERAL']
29,),[')'],['PUNCTUATION']
30,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
31,"    conn, err := net.Dial(""tcp"", ""localhost:9000"")","['conn', ',', 'err', ':=', 'net.Dial(""tcp"", ""localhost:9000"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
32,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
33,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
34,    },['}'],['PUNCTUATION']
35,    defer conn.Close(),"['defer', 'conn.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
36,"    bs, _ := ioutil.ReadAll(conn)","['bs', ',', '_', ':=', 'ioutil.ReadAll(conn)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
37,    fmt.Println(string(bs)),['fmt.Println(string(bs))'],['FUNCTION_CALL']
38,},['}'],['PUNCTUATION']
39,"

We can take these basics and start having fun.

Let's create an ""echo"" server.

This will illustrate accepting many connections.

","['We', 'can', 'take', 'these', 'basics', 'and', 'start', 'having', 'fun.', ""Let's"", 'create', 'an', '""echo""', 'server.', 'This', 'will', 'illustrate', 'accepting', 'many', 'connections.']","['PRP', 'MD', 'VB', 'DT', 'NNS', 'CC', 'VB', 'VBG', 'JJ', 'NNP', 'NN', 'DT', 'JJ', 'NN', 'DT', 'MD', 'VB', 'VBG', 'JJ', 'NNS']"
40,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
41,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
42,"    ""io""","['""io""']",['STRING_LITERAL']
43,"    ""net""","['""net""']",['STRING_LITERAL']
44,),[')'],['PUNCTUATION']
45,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
46,"    ln, err := net.Listen(""tcp"", "":9000"")","['ln', ',', 'err', ':=', 'net.Listen(""tcp"", "":9000"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
47,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
48,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
49,    },['}'],['PUNCTUATION']
50,    defer ln.Close(),"['defer', 'ln.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
51,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
52,"        conn, err := ln.Accept()","['conn', ',', 'err', ':=', 'ln.Accept()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
53,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
54,            panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
55,        },['}'],['PUNCTUATION']
56,        // handles unlimited connections,"['//', 'handles', 'unlimited', 'connections']","['COMMENT', 'NNS', 'JJ', 'NNS']"
57,        go func() {,"['go', 'func', '()', '{']","['KEYWORD', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
58,"            io.Copy(conn, conn)","['io.Copy(conn, conn)']",['FUNCTION_CALL']
59,            conn.Close(),['conn.Close()'],['FUNCTION_CALL']
60,        }(),['}()'],['PUNCTUATION']
61,    },['}'],['PUNCTUATION']
62,},['}'],['PUNCTUATION']
63,"

Run the file above the same way as before: go run main.go

If you get an error, make sure you have closed the TCP server we were running from the previous example. You close the TCP server with ctrl+c in the terminal.

Now that your new TCP server is running, let's connect to it using Telnet.

On windows you can install telnet; on Mac, it should already be there. Use this command to run telnet and connect to your TCP server: telnet localhost 9000

Now for one more example - an in-memory database like Redis:

","['Run', 'the', 'file', 'above', 'the', 'same', 'way', 'as', 'before:', 'go', 'run', 'main.go', 'If', 'you', 'get', 'an', 'error,', 'make', 'sure', 'you', 'have', 'closed', 'the', 'TCP', 'server', 'we', 'were', 'running', 'from', 'the', 'previous', 'example.', 'You', 'close', 'the', 'TCP', 'server', 'with', 'ctrl+c', 'in', 'the', 'terminal.', 'Now', 'that', 'your', 'new', 'TCP', 'server', 'is', 'running,', ""let's"", 'connect', 'to', 'it', 'using', 'Telnet.', 'On', 'windows', 'you', 'can', 'install', 'telnet;', 'on', 'Mac,', 'it', 'should', 'already', 'be', 'there.', 'Use', 'this', 'command', 'to', 'run', 'telnet', 'and', 'connect', 'to', 'your', 'TCP', 'server:', 'telnet', 'localhost', '9000', 'Now', 'for', 'one', 'more', 'example', '-', 'an', 'in-memory', 'database', 'like', 'Redis:']","['VB', 'DT', 'NN', 'IN', 'DT', 'JJ', 'NN', 'IN', 'NN', 'VBP', 'VB', 'RB', 'IN', 'PRP', 'VBP', 'DT', 'JJ', 'NN', 'NN', 'PRP', 'VBP', 'VBN', 'DT', 'NNP', 'NN', 'PRP', 'VBD', 'VBG', 'IN', 'DT', 'JJ', 'NN', 'PRP', 'VBP', 'DT', 'NNP', 'NN', 'IN', 'NN', 'IN', 'DT', 'NN', 'RB', 'IN', 'PRP$', 'JJ', 'NNP', 'NN', 'VBZ', 'JJ', 'JJ', 'NN', 'TO', 'PRP', 'VBG', 'NNP', 'IN', 'NNS', 'PRP', 'MD', 'VB', 'VB', 'IN', 'NNP', 'PRP', 'MD', 'RB', 'VB', 'VBN', 'NNP', 'DT', 'NN', 'TO', 'VB', 'NN', 'CC', 'NN', 'TO', 'PRP$', 'NNP', 'NN', 'NN', 'NN', 'CD', 'RB', 'IN', 'CD', 'JJR', 'NN', ':', 'DT', 'JJ', 'NN', 'IN', 'NNP']"
64,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
65,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
66,"    ""bufio""","['""bufio""']",['STRING_LITERAL']
67,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
68,"    ""io""","['""io""']",['STRING_LITERAL']
69,"    ""log""","['""log""']",['STRING_LITERAL']
70,"    ""net""","['""net""']",['STRING_LITERAL']
71,"    ""strings""","['""strings""']",['STRING_LITERAL']
72,),[')'],['PUNCTUATION']
73,var data = make(map[string]string),"['var', 'data', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
74,func handle(conn net.Conn) {,"['func', 'handle', '(', 'conn', 'net', '.', 'Conn', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
75,    defer conn.Close(),"['defer', 'conn.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
76,    scanner := bufio.NewScanner(conn),"['scanner', ':=', 'bufio.NewScanner(conn)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
77,    for scanner.Scan() {,"['for', 'scanner.Scan()', '{']","['KEYWORD', 'FUNCTION_CALL', 'PUNCTUATION']"
78,        ln := scanner.Text(),"['ln', ':=', 'scanner.Text()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
79,        fs := strings.Fields(ln),"['fs', ':=', 'strings.Fields(ln)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
80,        if len(fs) < 2 {,"['if', 'len', '(', 'fs', ')', '<', '2', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
81,"            io.WriteString(conn, ""This is an in-memory database \n"" +","['io', '.', 'WriteString', '(', 'conn', ',', '""This is an in-memory database \\n""', '+']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR']"
82,"            ""Use SET, GET, DEL like this: \n"" +","['""Use SET, GET, DEL like this: \\n""', '+']","['STRING_LITERAL', 'ARITHMETIC_OPERATOR']"
83,"            ""SET key value \n"" +","['""SET key value \\n""', '+']","['STRING_LITERAL', 'ARITHMETIC_OPERATOR']"
84,"            ""GET key \n"" +","['""GET key \\n""', '+']","['STRING_LITERAL', 'ARITHMETIC_OPERATOR']"
85,"            ""DEL key \n\n"" +","['""DEL key \\n\\n""', '+']","['STRING_LITERAL', 'ARITHMETIC_OPERATOR']"
86,"            ""For example - try these commands: \n"" +","['""For example - try these commands: \\n""', '+']","['STRING_LITERAL', 'ARITHMETIC_OPERATOR']"
87,"            ""SET fav chocolate \n"" +","['""SET fav chocolate \\n""', '+']","['STRING_LITERAL', 'ARITHMETIC_OPERATOR']"
88,"            ""GET fav \n\n\n"")","['""GET fav \\n\\n\\n""', ')']","['STRING_LITERAL', 'PUNCTUATION']"
89,            continue,['continue'],['KEYWORD']
90,        },['}'],['PUNCTUATION']
91,        switch fs[0] {,"['switch', 'fs', '[', '0', ']', '{']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'PUNCTUATION']"
92,"        case ""GET"":","['case', '""GET""', ':']","['KEYWORD', 'STRING_LITERAL', 'PUNCTUATION']"
93,            key := fs[1],"['key', ':=', 'fs', '[', '1', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
94,            value := data[key],"['value', ':=', 'data', '[', 'key', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
95,"            fmt.Fprintf(conn, ""%s\n"", value)","['fmt.Fprintf(conn, ""%s\\n"", value)']",['FUNCTION_CALL']
96,"        case ""SET"":","['case', '""SET""', ':']","['KEYWORD', 'STRING_LITERAL', 'PUNCTUATION']"
97,            if len(fs) != 3 {,"['if', 'len', '(', 'fs', ')', '!=', '3', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
98,"                io.WriteString(conn, ""EXPECTED VALUE\n"")","['io.WriteString(conn, ""EXPECTED VALUE\\n"")']",['FUNCTION_CALL']
99,                continue,['continue'],['KEYWORD']
100,            },['}'],['PUNCTUATION']
101,            key := fs[1],"['key', ':=', 'fs', '[', '1', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
102,            value := fs[2],"['value', ':=', 'fs', '[', '2', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
103,            data[key] = value,"['data', '[', 'key', ']', '=', 'value']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
104,"        case ""DEL"":","['case', '""DEL""', ':']","['KEYWORD', 'STRING_LITERAL', 'PUNCTUATION']"
105,            key := fs[1],"['key', ':=', 'fs', '[', '1', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
106,"            delete(data, key)","['delete', '(', 'data', ',', 'key', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
107,        default:,"['default', ':']","['KEYWORD', 'PUNCTUATION']"
108,"            io.WriteString(conn, ""INVALID COMMAND ""+fs[0]+""\n"")","['io.WriteString(conn, ""INVALID COMMAND ""+fs[0]+""\\n"")']",['FUNCTION_CALL']
109,        },['}'],['PUNCTUATION']
110,    },['}'],['PUNCTUATION']
111,},['}'],['PUNCTUATION']
112,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
113,"    li, err := net.Listen(""tcp"", "":9000"")","['li', ',', 'err', ':=', 'net.Listen(""tcp"", "":9000"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
114,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
115,        log.Fatalln(err),['log.Fatalln(err)'],['FUNCTION_CALL']
116,    },['}'],['PUNCTUATION']
117,    defer li.Close(),"['defer', 'li.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
118,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
119,"        conn, err := li.Accept()","['conn', ',', 'err', ':=', 'li.Accept()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
120,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
121,            log.Fatalln(err),['log.Fatalln(err)'],['FUNCTION_CALL']
122,        },['}'],['PUNCTUATION']
123,        handle(conn),"['handle', '(', 'conn', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
124,    },['}'],['PUNCTUATION']
125,},['}'],['PUNCTUATION']
126,"

And adding in concurrency:

","['And', 'adding', 'in', 'concurrency:']","['CC', 'VBG', 'IN', 'NN']"
127,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
128,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
129,"    ""bufio""","['""bufio""']",['STRING_LITERAL']
130,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
131,"    ""io""","['""io""']",['STRING_LITERAL']
132,"    ""log""","['""log""']",['STRING_LITERAL']
133,"    ""net""","['""net""']",['STRING_LITERAL']
134,"    ""strings""","['""strings""']",['STRING_LITERAL']
135,),[')'],['PUNCTUATION']
136,type Command struct {,"['type', 'Command', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
137,    Fields []string,"['Fields', '[]', 'string']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
138,    Result chan string,"['Result', 'chan', 'string']","['IDENTIFIER', 'KEYWORD', 'IDENTIFIER']"
139,},['}'],['PUNCTUATION']
140,func redisServer(commands chan Command) {,"['func', 'redisServer', '(', 'commands', 'chan', 'Command', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
141,    var data = make(map[string]string),"['var', 'data', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
142,    for cmd := range commands {,"['for', 'cmd', ':=', 'range', 'commands', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
143,        if len(cmd.Fields) < 2 {,"['if', 'len', '(', 'cmd', '.', 'Fields', ')', '<', '2', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
144,"            cmd.Result <- ""Expected at least 2 arguments""","['cmd', '.', 'Result', '<-', '""Expected at least 2 arguments""']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'STRING_LITERAL']"
145,            continue,['continue'],['KEYWORD']
146,        },['}'],['PUNCTUATION']
147,"        fmt.Println(""GOT COMMAND"", cmd)","['fmt.Println(""GOT COMMAND"", cmd)']",['FUNCTION_CALL']
148,        switch cmd.Fields[0] {,"['switch', 'cmd', '.', 'Fields', '[', '0', ']', '{']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'PUNCTUATION']"
149,        // GET ,"['//', 'GET']","['COMMENT', 'VB']"
150,"        case ""GET"":","['case', '""GET""', ':']","['KEYWORD', 'STRING_LITERAL', 'PUNCTUATION']"
151,            key := cmd.Fields[1],"['key', ':=', 'cmd', '.', 'Fields', '[', '1', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
152,            value := data[key],"['value', ':=', 'data', '[', 'key', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
153,            cmd.Result <- value,"['cmd', '.', 'Result', '<-', 'value']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER']"
154,        // SET  ,"['//', 'SET']","['COMMENT', 'NN']"
155,"        case ""SET"":","['case', '""SET""', ':']","['KEYWORD', 'STRING_LITERAL', 'PUNCTUATION']"
156,            if len(cmd.Fields) != 3 {,"['if', 'len', '(', 'cmd', '.', 'Fields', ')', '!=', '3', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
157,"                cmd.Result <- ""EXPECTED VALUE""","['cmd', '.', 'Result', '<-', '""EXPECTED VALUE""']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'STRING_LITERAL']"
158,                continue,['continue'],['KEYWORD']
159,            },['}'],['PUNCTUATION']
160,            key := cmd.Fields[1],"['key', ':=', 'cmd', '.', 'Fields', '[', '1', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
161,            value := cmd.Fields[2],"['value', ':=', 'cmd', '.', 'Fields', '[', '2', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
162,            data[key] = value,"['data', '[', 'key', ']', '=', 'value']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
163,"            cmd.Result <- """"","['cmd', '.', 'Result', '<-', '""""']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'STRING_LITERAL']"
164,        // DEL ,"['//', 'DEL']","['COMMENT', 'NN']"
165,"        case ""DEL"":","['case', '""DEL""', ':']","['KEYWORD', 'STRING_LITERAL', 'PUNCTUATION']"
166,            key := cmd.Fields[1],"['key', ':=', 'cmd', '.', 'Fields', '[', '1', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
167,"            delete(data, key)","['delete', '(', 'data', ',', 'key', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
168,"            cmd.Result <- """"","['cmd', '.', 'Result', '<-', '""""']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'STRING_LITERAL']"
169,        default:,"['default', ':']","['KEYWORD', 'PUNCTUATION']"
170,"            cmd.Result <- ""INVALID COMMAND "" + cmd.Fields[0] + ""\n""","['cmd', '.', 'Result', '<-', '""INVALID COMMAND ""', '+', 'cmd', '.', 'Fields', '[', '0', ']', '+', '""\\n""']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL']"
171,        },['}'],['PUNCTUATION']
172,    },['}'],['PUNCTUATION']
173,},['}'],['PUNCTUATION']
174,"func handle(commands chan Command, conn net.Conn) {","['func', 'handle', '(', 'commands', 'chan', 'Command', ',', 'conn', 'net', '.', 'Conn', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
175,    defer conn.Close(),"['defer', 'conn.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
176,    scanner := bufio.NewScanner(conn),"['scanner', ':=', 'bufio.NewScanner(conn)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
177,    for scanner.Scan() {,"['for', 'scanner.Scan()', '{']","['KEYWORD', 'FUNCTION_CALL', 'PUNCTUATION']"
178,        ln := scanner.Text(),"['ln', ':=', 'scanner.Text()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
179,        fs := strings.Fields(ln),"['fs', ':=', 'strings.Fields(ln)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
180,        result := make(chan string),"['result', ':=', 'make', '(', 'chan', 'string', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
181,        commands <- Command{,"['commands', '<-', 'Command', '{']","['IDENTIFIER', 'CHANNEL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
182,"            Fields: fs,","['Fields', ':', 'fs', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
183,"            Result: result,","['Result', ':', 'result', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
184,        },['}'],['PUNCTUATION']
185,"        io.WriteString(conn, <-result+""\n"")","['io.WriteString(conn, <-result+""\\n"")']",['FUNCTION_CALL']
186,    },['}'],['PUNCTUATION']
187,},['}'],['PUNCTUATION']
188,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
189,"    li, err := net.Listen(""tcp"", "":9000"")","['li', ',', 'err', ':=', 'net.Listen(""tcp"", "":9000"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
190,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
191,        log.Fatalln(err),['log.Fatalln(err)'],['FUNCTION_CALL']
192,    },['}'],['PUNCTUATION']
193,    defer li.Close(),"['defer', 'li.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
194,    commands := make(chan Command),"['commands', ':=', 'make', '(', 'chan', 'Command', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
195,    go redisServer(commands),"['go', 'redisServer', '(', 'commands', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
196,    for {,"['for', '{']","['KEYWORD', 'PUNCTUATION']"
197,"        conn, err := li.Accept()","['conn', ',', 'err', ':=', 'li.Accept()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
198,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
199,            log.Fatalln(err),['log.Fatalln(err)'],['FUNCTION_CALL']
200,        },['}'],['PUNCTUATION']
201,"        go handle(commands, conn)","['go', 'handle', '(', 'commands', ',', 'conn', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
202,    },['}'],['PUNCTUATION']
203,},['}'],['PUNCTUATION']
204,"

See my lectures from my CSUF class describing all of this here. And one more great resource.
","['See', 'my', 'lectures', 'from', 'my', 'CSUF', 'class', 'describing', 'all', 'of', 'this', 'here.', 'And', 'one', 'more', 'great', 'resource.']","['VB', 'PRP$', 'NNS', 'IN', 'PRP$', 'NNP', 'NN', 'VBG', 'DT', 'IN', 'DT', 'NN', 'CC', 'CD', 'JJR', 'JJ', 'NN']"
