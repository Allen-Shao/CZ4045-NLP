,text,token,annotation
0,"There are 2 major problems with this code.


You are not handling the client stalling or using keep alives (handled below by getTimeoutServer)
You are not handling the server (what your http.Client is talking to) timing out (handled below by TimeoutConn).


This is probably why you are exhausting your local ports. I know from past experience node.js will keep-alive you very aggressively.

There are lots of little issues, creating objects every-time when you don't need to. Creating unneeded goroutines (each incoming request is in its own goroutine before you handle it).

Here is a quick stab (that I don't have time to test well). Hopefully it will put you on the right track: (You will want to upgrade this to not buffer the responses locally)

","['There', 'are', '2', 'major', 'problems', 'with', 'this', 'code.', 'You', 'are', 'not', 'handling', 'the', 'client', 'stalling', 'or', 'using', 'keep', 'alives', '(handled', 'below', 'by', 'getTimeoutServer)', 'You', 'are', 'not', 'handling', 'the', 'server', '(what', 'your', 'http.Client', 'is', 'talking', 'to)', 'timing', 'out', '(handled', 'below', 'by', 'TimeoutConn).', 'This', 'is', 'probably', 'why', 'you', 'are', 'exhausting', 'your', 'local', 'ports.', 'I', 'know', 'from', 'past', 'experience', 'node.js', 'will', 'keep-alive', 'you', 'very', 'aggressively.', 'There', 'are', 'lots', 'of', 'little', 'issues,', 'creating', 'objects', 'every-time', 'when', 'you', ""don't"", 'need', 'to.', 'Creating', 'unneeded', 'goroutines', '(each', 'incoming', 'request', 'is', 'in', 'its', 'own', 'goroutine', 'before', 'you', 'handle', 'it).', 'Here', 'is', 'a', 'quick', 'stab', '(that', 'I', ""don't"", 'have', 'time', 'to', 'test', 'well).', 'Hopefully', 'it', 'will', 'put', 'you', 'on', 'the', 'right', 'track:', '(You', 'will', 'want', 'to', 'upgrade', 'this', 'to', 'not', 'buffer', 'the', 'responses', 'locally)']","['EX', 'VBP', 'CD', 'JJ', 'NNS', 'IN', 'DT', 'NN', 'PRP', 'VBP', 'RB', 'VBG', 'DT', 'NN', 'NN', 'CC', 'VBG', 'JJ', 'NNS', 'VBN', 'IN', 'IN', 'NN', 'PRP', 'VBP', 'RB', 'VBG', 'DT', 'NN', 'IN', 'PRP$', 'NN', 'VBZ', 'VBG', 'JJ', 'VBG', 'RP', 'VBN', 'IN', 'IN', 'NNP', 'DT', 'VBZ', 'RB', 'WRB', 'PRP', 'VBP', 'VBG', 'PRP$', 'JJ', 'NN', 'PRP', 'VBP', 'IN', 'JJ', 'NN', 'NN', 'MD', 'VB', 'PRP', 'RB', 'IN', 'EX', 'VBP', 'NNS', 'IN', 'JJ', 'JJ', 'VBG', 'NNS', 'RB', 'WRB', 'PRP', 'VBP', 'VB', 'JJ', 'NNP', 'JJ', 'NNS', 'VBP', 'VBG', 'NN', 'VBZ', 'IN', 'PRP$', 'JJ', 'NN', 'IN', 'PRP', 'VBP', 'VB', 'RB', 'VBZ', 'DT', 'JJ', 'NN', 'WP', 'PRP', 'VBP', 'VB', 'NN', 'TO', 'VB', 'NN', 'NNP', 'PRP', 'MD', 'VB', 'PRP', 'IN', 'DT', 'JJ', 'NN', 'NNP', 'MD', 'VB', 'TO', 'VB', 'DT', 'TO', 'RB', 'VB', 'DT', 'NNS', 'VBP']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""bytes""","['""bytes""']",['STRING_LITERAL']
4,"    ""errors""","['""errors""']",['STRING_LITERAL']
5,"    ""flag""","['""flag""']",['STRING_LITERAL']
6,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
7,"    ""log""","['""log""']",['STRING_LITERAL']
8,"    ""net""","['""net""']",['STRING_LITERAL']
9,"    ""net/http""","['""net/http""']",['STRING_LITERAL']
10,"    ""net/url""","['""net/url""']",['STRING_LITERAL']
11,"    ""runtime""","['""runtime""']",['STRING_LITERAL']
12,"    ""strconv""","['""strconv""']",['STRING_LITERAL']
13,"    ""time""","['""time""']",['STRING_LITERAL']
14,),[')'],['PUNCTUATION']
15,const DEFAULT_IDLE_TIMEOUT = 5 * time.Second,"['const', 'DEFAULT_IDLE_TIMEOUT', '=', '5', '*', 'time', '.', 'Second']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
16,var (,"['var', '(']","['KEYWORD', 'PUNCTUATION']"
17,    listen       string,"['listen', 'string']","['IDENTIFIER', 'IDENTIFIER']"
18,    logOn        bool,"['logOn', 'bool']","['IDENTIFIER', 'IDENTIFIER']"
19,"    localhost, _ = url.Parse(""http://localhost:8080/"")","['localhost', ',', '_', '=', 'url.Parse(""http://localhost:8080/"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
20,    client       = &http.Client{,"['client', '=', '&', 'http', '.', 'Client', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
21,        Transport: &http.Transport{,"['Transport', ':', '&', 'http', '.', 'Transport', '{']","['IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
22,"            Proxy: NoProxyAllowed,","['Proxy', ':', 'NoProxyAllowed', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
23,"            Dial: func(network, addr string) (net.Conn, error) {","['Dial', ':', 'func', '(', 'network', ',', 'addr', 'string', ')', '(', 'net', '.', 'Conn', ',', 'error', ')', '{']","['IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
24,"                return NewTimeoutConnDial(network, addr, DEFAULT_IDLE_TIMEOUT)","['return', 'NewTimeoutConnDial', '(', 'network', ',', 'addr', ',', 'DEFAULT_IDLE_TIMEOUT', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
25,"            },","['},']",['PUNCTUATION']
26,"        },","['},']",['PUNCTUATION']
27,    },['}'],['PUNCTUATION']
28,),[')'],['PUNCTUATION']
29,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
30,    runtime.GOMAXPROCS(runtime.NumCPU()),['runtime.GOMAXPROCS(runtime.NumCPU())'],['FUNCTION_CALL']
31,"    flag.StringVar(&listen, ""listen"", ""0.0.0.0:9000"", ""listen on address"")","['flag.StringVar(&listen, ""listen"", ""0.0.0.0:9000"", ""listen on address"")']",['FUNCTION_CALL']
32,"    flag.BoolVar(&logOn, ""log"", true, ""enable logging"")","['flag.BoolVar(&logOn, ""log"", true, ""enable logging"")']",['FUNCTION_CALL']
33,    flag.Parse(),['flag.Parse()'],['FUNCTION_CALL']
34,"    server := getTimeoutServer(listen, http.HandlerFunc(proxyHandlerFunc))","['server', ':=', 'getTimeoutServer', '(', 'listen', ',', 'http.HandlerFunc(proxyHandlerFunc))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
35,"    log.Printf(""Starting router-server on %s\n"", listen)","['log.Printf(""Starting router-server on %s\\n"", listen)']",['FUNCTION_CALL']
36,    log.Fatal(server.ListenAndServe()),['log.Fatal(server.ListenAndServe())'],['FUNCTION_CALL']
37,},['}'],['PUNCTUATION']
38,"func proxyHandlerFunc(w http.ResponseWriter, req *http.Request) {","['func', 'proxyHandlerFunc', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
39,    if logOn {,"['if', 'logOn', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
40,"        log.Printf(""%+v\n"", req)","['log.Printf(""%+v\\n"", req)']",['FUNCTION_CALL']
41,    },['}'],['PUNCTUATION']
42,    // Setup request URL,"['//', 'Setup', 'request', 'URL']","['COMMENT', 'NNP', 'NN', 'NN']"
43,    origURL := req.URL,"['origURL', ':=', 'req', '.', 'URL']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
44,    req.URL = new(url.URL),"['req', '.', 'URL', '=', 'new', '(', 'url', '.', 'URL', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
45,    *req.URL = *localhost,"['*', 'req', '.', 'URL', '=', '*', 'localhost']","['POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER']"
46,"    req.URL.Path, req.URL.RawQuery, req.URL.Fragment = origURL.Path, origURL.RawQuery, origURL.Fragment","['req', '.', 'URL', '.', 'Path', ',', 'req', '.', 'URL', '.', 'RawQuery', ',', 'req', '.', 'URL', '.', 'Fragment', '=', 'origURL', '.', 'Path', ',', 'origURL', '.', 'RawQuery', ',', 'origURL', '.', 'Fragment']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
47,"    req.RequestURI, req.Host = """", req.URL.Host","['req', '.', 'RequestURI', ',', 'req', '.', 'Host', '=', '""""', ',', 'req', '.', 'URL', '.', 'Host']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
48,    // Perform request,"['//', 'Perform', 'request']","['COMMENT', 'VB', 'NN']"
49,"    resp, err := client.Do(req)","['resp', ',', 'err', ':=', 'client.Do(req)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
50,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
51,        w.WriteHeader(http.StatusBadGateway),['w.WriteHeader(http.StatusBadGateway)'],['FUNCTION_CALL']
52,"        w.Write([]byte(fmt.Sprintf(""%d - StatusBadGateway: %s"", http.StatusBadGateway, err)))","['w.Write([]byte(fmt.Sprintf(""%d - StatusBadGateway: %s"", http.StatusBadGateway, err)))']",['FUNCTION_CALL']
53,        return,['return'],['KEYWORD']
54,    },['}'],['PUNCTUATION']
55,    defer resp.Body.Close(),"['defer', 'resp', '.', 'Body.Close()']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
56,    var respBuffer *bytes.Buffer,"['var', 'respBuffer', '*', 'bytes', '.', 'Buffer']","['KEYWORD', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
57,    if resp.ContentLength != -1 {,"['if', 'resp', '.', 'ContentLength', '!=', '-', '1', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
58,"        respBuffer = bytes.NewBuffer(make([]byte, 0, resp.ContentLength))","['respBuffer', '=', 'bytes.NewBuffer(make([]byte, 0, resp.ContentLength))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
59,    } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
60,        respBuffer = new(bytes.Buffer),"['respBuffer', '=', 'new', '(', 'bytes', '.', 'Buffer', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
61,    },['}'],['PUNCTUATION']
62,"    if _, err = respBuffer.ReadFrom(resp.Body); err != nil {","['if', '_', ',', 'err', '=', 'respBuffer.ReadFrom(resp.Body)', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
63,        w.WriteHeader(http.StatusBadGateway),['w.WriteHeader(http.StatusBadGateway)'],['FUNCTION_CALL']
64,"        w.Write([]byte(fmt.Sprintf(""%d - StatusBadGateway: %s"", http.StatusBadGateway, err)))","['w.Write([]byte(fmt.Sprintf(""%d - StatusBadGateway: %s"", http.StatusBadGateway, err)))']",['FUNCTION_CALL']
65,        return,['return'],['KEYWORD']
66,    },['}'],['PUNCTUATION']
67,    // Write result of request,"['//', 'Write', 'result', 'of', 'request']","['COMMENT', 'NNP', 'NN', 'IN', 'NN']"
68,    headers := w.Header(),"['headers', ':=', 'w.Header()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
69,    var key string,"['var', 'key', 'string']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
70,    var val []string,"['var', 'val', '[]', 'string']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
71,"    for key, val = range resp.Header {","['for', 'key', ',', 'val', '=', 'range', 'resp', '.', 'Header', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
72,        headers[key] = val,"['headers', '[', 'key', ']', '=', 'val']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
73,    },['}'],['PUNCTUATION']
74,"    headers.Set(""Content-Length"", strconv.Itoa(respBuffer.Len()))","['headers.Set(""Content-Length"", strconv.Itoa(respBuffer.Len()))']",['FUNCTION_CALL']
75,    w.WriteHeader(resp.StatusCode),['w.WriteHeader(resp.StatusCode)'],['FUNCTION_CALL']
76,    w.Write(respBuffer.Bytes()),['w.Write(respBuffer.Bytes())'],['FUNCTION_CALL']
77,},['}'],['PUNCTUATION']
78,"func getTimeoutServer(addr string, handler http.Handler) *http.Server {","['func', 'getTimeoutServer', '(', 'addr', 'string', ',', 'handler', 'http', '.', 'Handler', ')', '*', 'http', '.', 'Server', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
79,    //keeps people who are slow or are sending keep-alives from eating all our sockets,"['//', 'keeps', 'people', 'who', 'are', 'slow', 'or', 'are', 'sending', 'keep-alives', 'from', 'eating', 'all', 'our', 'sockets']","['COMMENT', 'NNS', 'NNS', 'WP', 'VBP', 'JJ', 'CC', 'VBP', 'VBG', 'NNS', 'IN', 'VBG', 'DT', 'PRP$', 'NNS']"
80,    const (,"['const', '(']","['KEYWORD', 'PUNCTUATION']"
81,        HTTP_READ_TO  = DEFAULT_IDLE_TIMEOUT,"['HTTP_READ_TO', '=', 'DEFAULT_IDLE_TIMEOUT']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
82,        HTTP_WRITE_TO = DEFAULT_IDLE_TIMEOUT,"['HTTP_WRITE_TO', '=', 'DEFAULT_IDLE_TIMEOUT']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
83,    ),[')'],['PUNCTUATION']
84,    return &http.Server{,"['return', '&', 'http', '.', 'Server', '{']","['KEYWORD', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
85,"        Addr:         addr,","['Addr', ':', 'addr', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
86,"        Handler:      handler,","['Handler', ':', 'handler', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
87,"        ReadTimeout:  HTTP_READ_TO,","['ReadTimeout', ':', 'HTTP_READ_TO', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
88,"        WriteTimeout: HTTP_WRITE_TO,","['WriteTimeout', ':', 'HTTP_WRITE_TO', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
89,    },['}'],['PUNCTUATION']
90,},['}'],['PUNCTUATION']
91,"func NoProxyAllowed(request *http.Request) (*url.URL, error) {","['func', 'NoProxyAllowed', '(', 'request', '*', 'http', '.', 'Request', ')', '(*', 'url', '.', 'URL', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
92,"    return nil, nil","['return', 'nil', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
93,},['}'],['PUNCTUATION']
94,//TimeoutConn-------------------------,"['//', 'TimeoutConn-------------------------']","['COMMENT', 'NN']"
95,//Put me in my own TimeoutConn.go ?,"['//', 'Put', 'me', 'in', 'my', 'own', 'TimeoutConn.go', '?']","['COMMENT', 'VB', 'PRP', 'IN', 'PRP$', 'JJ', 'NNP', '.']"
96,type TimeoutConn struct {,"['type', 'TimeoutConn', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
97,    net.Conn,"['net', '.', 'Conn']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
98,"    readTimeout, writeTimeout time.Duration","['readTimeout', ',', 'writeTimeout', 'time', '.', 'Duration']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
99,},['}'],['PUNCTUATION']
100,"var invalidOperationError = errors.New(""TimeoutConn does not support or allow .SetDeadline operations"")","['var', 'invalidOperationError', '=', 'errors.New(""TimeoutConn does not support or allow .SetDeadline operations"")']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
101,"func NewTimeoutConn(conn net.Conn, ioTimeout time.Duration) (*TimeoutConn, error) {","['func', 'NewTimeoutConn', '(', 'conn', 'net', '.', 'Conn', ',', 'ioTimeout', 'time', '.', 'Duration', ')', '(*', 'TimeoutConn', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
102,"    return NewTimeoutConnReadWriteTO(conn, ioTimeout, ioTimeout)","['return', 'NewTimeoutConnReadWriteTO', '(', 'conn', ',', 'ioTimeout', ',', 'ioTimeout', ')']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
103,},['}'],['PUNCTUATION']
104,"func NewTimeoutConnReadWriteTO(conn net.Conn, readTimeout, writeTimeout time.Duration) (*TimeoutConn, error) {","['func', 'NewTimeoutConnReadWriteTO', '(', 'conn', 'net', '.', 'Conn', ',', 'readTimeout', ',', 'writeTimeout', 'time', '.', 'Duration', ')', '(*', 'TimeoutConn', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
105,    this := &TimeoutConn{,"['this', ':=', '&', 'TimeoutConn', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
106,"        Conn:         conn,","['Conn', ':', 'conn', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
107,"        readTimeout:  readTimeout,","['readTimeout', ':', 'readTimeout', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
108,"        writeTimeout: writeTimeout,","['writeTimeout', ':', 'writeTimeout', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
109,    },['}'],['PUNCTUATION']
110,    now := time.Now(),"['now', ':=', 'time.Now()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
111,    err := this.Conn.SetReadDeadline(now.Add(this.readTimeout)),"['err', ':=', 'this', '.', 'Conn.SetReadDeadline(now.Add(this.readTimeout))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
112,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
113,"        return nil, err","['return', 'nil', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
114,    },['}'],['PUNCTUATION']
115,    err = this.Conn.SetWriteDeadline(now.Add(this.writeTimeout)),"['err', '=', 'this', '.', 'Conn.SetWriteDeadline(now.Add(this.writeTimeout))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
116,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
117,"        return nil, err","['return', 'nil', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
118,    },['}'],['PUNCTUATION']
119,"    return this, nil","['return', 'this', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
120,},['}'],['PUNCTUATION']
121,"func NewTimeoutConnDial(network, addr string, ioTimeout time.Duration) (net.Conn, error) {","['func', 'NewTimeoutConnDial', '(', 'network', ',', 'addr', 'string', ',', 'ioTimeout', 'time', '.', 'Duration', ')', '(', 'net', '.', 'Conn', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
122,"    conn, err := net.DialTimeout(network, addr, ioTimeout)","['conn', ',', 'err', ':=', 'net.DialTimeout(network, addr, ioTimeout)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
123,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
124,"        return nil, err","['return', 'nil', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
125,    },['}'],['PUNCTUATION']
126,"    if conn, err = NewTimeoutConn(conn, ioTimeout); err != nil {","['if', 'conn', ',', 'err', '=', 'NewTimeoutConn', '(', 'conn', ',', 'ioTimeout', ');', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
127,"        return nil, err","['return', 'nil', ',', 'err']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
128,    },['}'],['PUNCTUATION']
129,"    return conn, nil","['return', 'conn', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
130,},['}'],['PUNCTUATION']
131,"func (this *TimeoutConn) Read(data []byte) (int, error) {","['func', '(', 'this', '*', 'TimeoutConn', ')', 'Read', '(', 'data', '[]', 'byte', ')', '(', 'int', ',', 'error', ')', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
132,    this.Conn.SetReadDeadline(time.Now().Add(this.readTimeout)),"['this', '.', 'Conn.SetReadDeadline(time.Now().Add(this.readTimeout))']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
133,    return this.Conn.Read(data),"['return', 'this', '.', 'Conn.Read(data)']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
134,},['}'],['PUNCTUATION']
135,"func (this *TimeoutConn) Write(data []byte) (int, error) {","['func', '(', 'this', '*', 'TimeoutConn', ')', 'Write', '(', 'data', '[]', 'byte', ')', '(', 'int', ',', 'error', ')', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
136,    this.Conn.SetWriteDeadline(time.Now().Add(this.writeTimeout)),"['this', '.', 'Conn.SetWriteDeadline(time.Now().Add(this.writeTimeout))']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
137,    return this.Conn.Write(data),"['return', 'this', '.', 'Conn.Write(data)']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
138,},['}'],['PUNCTUATION']
139,func (this *TimeoutConn) SetDeadline(time time.Time) error {,"['func', '(', 'this', '*', 'TimeoutConn', ')', 'SetDeadline', '(', 'time', 'time', '.', 'Time', ')', 'error', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
140,    return invalidOperationError,"['return', 'invalidOperationError']","['KEYWORD', 'IDENTIFIER']"
141,},['}'],['PUNCTUATION']
142,func (this *TimeoutConn) SetReadDeadline(time time.Time) error {,"['func', '(', 'this', '*', 'TimeoutConn', ')', 'SetReadDeadline', '(', 'time', 'time', '.', 'Time', ')', 'error', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
143,    return invalidOperationError,"['return', 'invalidOperationError']","['KEYWORD', 'IDENTIFIER']"
144,},['}'],['PUNCTUATION']
145,func (this *TimeoutConn) SetWriteDeadline(time time.Time) error {,"['func', '(', 'this', '*', 'TimeoutConn', ')', 'SetWriteDeadline', '(', 'time', 'time', '.', 'Time', ')', 'error', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
146,    return invalidOperationError,"['return', 'invalidOperationError']","['KEYWORD', 'IDENTIFIER']"
147,},['}'],['PUNCTUATION']
