,text,token,annotation
0,"Ok. First off, I don't believe you that the code compiles.

Let's look at some mistakes, shall we?

","['Ok.', 'First', 'off,', 'I', ""don't"", 'believe', 'you', 'that', 'the', 'code', 'compiles.', ""Let's"", 'look', 'at', 'some', 'mistakes,', 'shall', 'we?']","['NNP', 'NNP', 'NN', 'PRP', 'VBP', 'VB', 'PRP', 'IN', 'DT', 'NN', 'NN', 'NNP', 'NN', 'IN', 'DT', 'CD', 'MD', 'VB']"
1,"db, err := sql.Open(""mysql"", ""dbconnectinfo"")","['db', ',', 'err', ':=', 'sql.Open(""mysql"", ""dbconnectinfo"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
2,"

This line opens a database connection. It should only be used once, preferably inside an init() function. For example,

","['This', 'line', 'opens', 'a', 'database', 'connection.', 'It', 'should', 'only', 'be', 'used', 'once,', 'preferably', 'inside', 'an', 'init()', 'function.', 'For', 'example,']","['DT', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'PRP', 'MD', 'RB', 'VB', 'VBN', 'PRP', 'RB', 'IN', 'DT', 'JJ', 'NN', 'IN', 'NN']"
3,var db *sql.DB,"['var', 'db', '*', 'sql', '.', 'DB']","['KEYWORD', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
4,func init() {,"['func', 'init', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
5,    var err error,"['var', 'err', 'error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
6,    // Now the db variable above is automagically set to the left value (db),"['//', 'Now', 'the', 'db', 'variable', 'above', 'is', 'automagically', 'set', 'to', 'the', 'left', 'value', '(db)']","['COMMENT', 'RB', 'DT', 'NN', 'JJ', 'NN', 'VBZ', 'RB', 'VBN', 'TO', 'DT', 'VBN', 'NN', 'NN']"
7,"    // of sql.Open and the ""var err error"" above is the right value (err)","['//', 'of', 'sql.Open', 'and', 'the', '""var', 'err', 'error""', 'above', 'is', 'the', 'right', 'value', '(err)']","['COMMENT', 'IN', 'JJ', 'CC', 'DT', 'NNP', 'NN', 'NN', 'IN', 'VBZ', 'DT', 'JJ', 'NN', 'NN']"
8,"    db, err = sql.Open(""mysql"", ""root@tcp(127.0.0.1:3306)"")","['db', ',', 'err', '=', 'sql.Open(""mysql"", ""root@tcp(127.0.0.1:3306)"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
9,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
10,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
11,    },['}'],['PUNCTUATION']
12,},['}'],['PUNCTUATION']
13,"

Bang. Now you're connected to your MySQL database.

Now what?

Well this (from Get) is gross:

","['Bang.', 'Now', ""you're"", 'connected', 'to', 'your', 'MySQL', 'database.', 'Now', 'what?', 'Well', 'this', '(from', 'Get)', 'is', 'gross:']","['NNP', 'RB', 'RB', 'VBN', 'TO', 'PRP$', 'NNP', 'NN', 'RB', 'RB', 'RB', 'DT', 'NN', 'NNP', 'VBZ', 'JJ']"
14,"db, err := sql.Query(""mysql"", ""db:connectinfo"")","['db', ',', 'err', ':=', 'sql.Query(""mysql"", ""db:connectinfo"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
15,    errCheck(err),"['errCheck', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
16,    var sdi = new(SimpleDiscoveredInfo),"['var', 'sdi', '=', 'new', '(', 'SimpleDiscoveredInfo', ')']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
17,"    err = db.QueryRow(""SELECT opendpoint, oplocalid, claimedid FROM discovery_cache WHERE id=?"", id).Scan(&sdi)","['err', '=', 'db.QueryRow(""SELECT opendpoint, oplocalid, claimedid FROM discovery_cache WHERE id=?"", id).Scan(&sdi)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
18,    errCheck(err),"['errCheck', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
19,"

Instead, it should be this:

","['Instead,', 'it', 'should', 'be', 'this:']","['IN', 'PRP', 'MD', 'VB', 'NNS']"
20,// No need for a pointer...,"['//', 'No', 'need', 'for', 'a', 'pointer...']","['COMMENT', 'DT', 'NN', 'IN', 'DT', 'NN']"
21,var sdi SimpleDiscoveredInfo,"['var', 'sdi', 'SimpleDiscoveredInfo']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
22,// Because we take the address of 'sdi' right here (inside Scan),"['//', 'Because', 'we', 'take', 'the', 'address', 'of', ""'sdi'"", 'right', 'here', '(inside', 'Scan)']","['COMMENT', 'IN', 'PRP', 'VBP', 'DT', 'NN', 'IN', 'JJ', 'NN', 'RB', 'RB', 'NNP']"
23,// And that's a useless (and potentially problematic) layer of indirection.,"['//', 'And', ""that's"", 'a', 'useless', '(and', 'potentially', 'problematic)', 'layer', 'of', 'indirection.']","['COMMENT', 'CC', 'VB', 'DT', 'JJ', 'NNP', 'RB', 'VBZ', 'NN', 'IN', 'NN']"
24,"// Notice how I dropped the other ""db, err := sql.Query"" part? We don't","['//', 'Notice', 'how', 'I', 'dropped', 'the', 'other', '""db,', 'err', ':=', 'sql.Query""', 'part?', 'We', ""don't""]","['COMMENT', 'NNP', 'WRB', 'PRP', 'VBD', 'DT', 'JJ', 'NNP', 'NN', 'NNP', 'NN', 'NN', 'PRP', 'VBP']"
25,"// need it because we've already declared ""db"" as you saw in the first","['//', 'need', 'it', 'because', ""we've"", 'already', 'declared', '""db""', 'as', 'you', 'saw', 'in', 'the', 'first']","['COMMENT', 'VB', 'PRP', 'IN', 'NN', 'RB', 'VBD', 'CC', 'IN', 'PRP', 'VBD', 'IN', 'DT', 'JJ']"
26,// part of my answer.,"['//', 'part', 'of', 'my', 'answer.']","['COMMENT', 'NN', 'IN', 'PRP$', 'NN']"
27,"err := db.QueryRow(""SELECT ..."").Scan(&sdi)","['err', ':=', 'db.QueryRow(""SELECT ..."").Scan(&sdi)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
28,if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
29,    panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
30,},['}'],['PUNCTUATION']
31,"// Return the address of sdi, which means we're returning a pointer","['//', 'Return', 'the', 'address', 'of', 'sdi,', 'which', 'means', ""we're"", 'returning', 'a', 'pointer']","['COMMENT', 'VB', 'DT', 'NN', 'IN', 'NN', 'WDT', 'VBZ', 'NN', 'VBG', 'DT', 'NN']"
32,// do wherever sdi is inside the heap.,"['//', 'do', 'wherever', 'sdi', 'is', 'inside', 'the', 'heap.']","['COMMENT', 'VB', 'WRB', 'NN', 'VBZ', 'IN', 'DT', 'NN']"
33,return &sdi,"['return', '&', 'sdi']","['KEYWORD', 'BITWISE_OPERATOR', 'IDENTIFIER']"
34,"

Up next is this:

","['Up', 'next', 'is', 'this:']","['IN', 'JJ', 'VBZ', 'JJ']"
35,  /*,['/*'],['PUNCTUATION']
36,"       db, err := sql.Query(""mysql"", ""db:connectinfo"")","['db', ',', 'err', ':=', 'sql.Query(""mysql"", ""db:connectinfo"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
37,         errCheck(err),"['errCheck', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
38,"         rows, err := db.Query(""SELECT opendpoint, oplocalid, claimedid FROM discovery_cache"")","['rows', ',', 'err', ':=', 'db.Query(""SELECT opendpoint, oplocalid, claimedid FROM discovery_cache"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
39,         errCheck(err),"['errCheck', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
40,       was unsure what to do here because I'm not sure how to ,"['was', 'unsure', 'what', 'to', 'do', 'here', 'because', 'I', 'm', 'not', 'sure', 'how', 'to']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
41,       return the info properly ,"['return', 'the', 'info', 'properly']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
42,    */,['*/'],['PUNCTUATION']
43,"

If you've been paying attention, we can drop the first sql.Query line.

Great, now we just have:

","['If', ""you've"", 'been', 'paying', 'attention,', 'we', 'can', 'drop', 'the', 'first', 'sql.Query', 'line.', 'Great,', 'now', 'we', 'just', 'have:']","['IN', 'RB', 'VBN', 'VBG', 'IN', 'PRP', 'MD', 'VB', 'DT', 'JJ', 'NN', 'NN', 'NNP', 'RB', 'PRP', 'RB', 'VB']"
44,"rows, err := db.Query(""SELECT ..."")","['rows', ',', 'err', ':=', 'db.Query(""SELECT ..."")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
45,"

So, why don't you do what you did inside the Accept method and parse the rows using for rows.Next()... ?
","['So,', 'why', ""don't"", 'you', 'do', 'what', 'you', 'did', 'inside', 'the', 'Accept', 'method', 'and', 'parse', 'the', 'rows', 'using', 'for', 'rows.Next()...', '?']","['NNP', 'WRB', 'NN', 'PRP', 'VBP', 'WP', 'PRP', 'VBD', 'VB', 'DT', 'NNP', 'NN', 'CC', 'VB', 'DT', 'NNS', 'VBG', 'IN', 'NN', '.']"
