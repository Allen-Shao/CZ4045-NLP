,text,token,annotation
0,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
1,"import ""fmt""","['import', '""fmt""']","['KEYWORD', 'STRING_LITERAL']"
2,"import ""time""","['import', '""time""']","['KEYWORD', 'STRING_LITERAL']"
3,"import ""code.google.com/p/go-sqlite/go1/sqlite3""","['import', '""code.google.com/p/go-sqlite/go1/sqlite3""']","['KEYWORD', 'STRING_LITERAL']"
4,"import ""crypto/rand""","['import', '""crypto/rand""']","['KEYWORD', 'STRING_LITERAL']"
5,"import ""encoding/base64"" ","['import', '""encoding/base64""']","['KEYWORD', 'STRING_LITERAL']"
6,func getrandomtext() (string) {,"['func', 'getrandomtext', '()', '(', 'string', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
7,"    b := make([]byte, 12)","['b', ':=', 'make', '([]', 'byte', ',', '12', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
8,    rand.Read(b),"['rand', '.', 'Read', '(', 'b', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
9,    en := base64.StdEncoding // or URLEncoding,"['en', ':=', 'base64', '.', 'StdEncoding', '// or URLEncoding']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'COMMENT', 'CC', 'VBG']"
10,    enclen := en.EncodedLen(len(b)),"['enclen', ':=', 'en', '.', 'EncodedLen', '(', 'len', '(', 'b', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
11,"    d := make([]byte, enclen)","['d', ':=', 'make', '([]', 'byte', ',', 'enclen', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
12,"    en.Encode(d, b)","['en', '.', 'Encode', '(', 'd', ',', 'b', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
13,    returntext := string(d[:enclen]),"['return', 'text', ':=', 'string', '(', 'd', '[:', 'enclen', '])']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
14,"    //fmt.Printf(""getrandomtext() : '""+returntext+""'\n"")","['//fmt.Printf(""getrandomtext() : \'""+returntext+""\'\\n"")']","['COMMENT', 'NN', '(', '``', 'NN', '(', ')', ':', ""''"", ""''"", 'NN', ""''"", 'CC', ""''"", ')']"
15,    return returntext,"['return', 'return', 'text']","['KEYWORD', 'KEYWORD', 'IDENTIFIER']"
16,},['}'],['OPERATOR']
17,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
18,"    dbname := ""multitasking.db""","['dbname', ':=', '""multitasking.db""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
19,"    tablename := ""multiwrite""","['tablename', ':=', '""multiwrite""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
20,    defer time.Sleep(5000 * time.Millisecond),"['defer', 'time', '.', 'Sleep', '(', '5000', '*', 'time', '.', 'Millisecond', ')']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
21,"    db, err := sqlite3.Open(""file:""+dbname+""?file:locked.sqlite?cache=shared&mode=rwc"")","['db', ',', 'err', ':=', 'sqlite3', '.', 'Open', '(', '""file:""+dbname+""?file:locked.sqlite?cache=shared&mode=rwc""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
22,    defer db.Close(),"['defer', 'db', '.', 'Close', '()']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
23,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
24,"        fmt.Printf(""failed to open database, error: "" + err.Error() + ""\n"") ","['fmt', '.', 'Printf', '(', '""failed to open database, error: "" + err.Error() + ""\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
25,        return,['return'],['KEYWORD']
26,    } ,['}'],['OPERATOR']
27,"    err = db.Exec(""DROP TABLE IF EXISTS ""+tablename+"";"")","['err', '=', 'db', '.', 'Exec', '(', '""DROP TABLE IF EXISTS ""+tablename+"";""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
28,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
29,"        fmt.Printf(""error dropping table ""+tablename+"": ""+err.Error()+""\n"")","['fmt', '.', 'Printf', '(', '""error dropping table ""+tablename+"": ""+err.Error()+""\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
30,    },['}'],['OPERATOR']
31,"    err = db.Exec(""CREATE TABLE ""+tablename+"" (id INTEGER PRIMARY KEY AUTOINCREMENT, text VARCHAR(200));"")","['err', '=', 'db', '.', 'Exec', '(', '""CREATE TABLE ""+tablename+"" (id INTEGER PRIMARY KEY AUTOINCREMENT, text VARCHAR(200));""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
32,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
33,"        fmt.Printf(""error creating table ""+tablename+"": ""+err.Error()+""\n"") ","['fmt', '.', 'Printf', '(', '""error creating table ""+tablename+"": ""+err.Error()+""\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
34,        return,['return'],['KEYWORD']
35,    } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
36,"        fmt.Printf(""successfully created table ""+tablename+""!\n"") ","['fmt', '.', 'Printf', '(', '""successfully created table ""+tablename+""!\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
37,    },['}'],['OPERATOR']
38,    var insertcount int = 128,"['var', 'insertcount', 'int', '=', '128']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
39,"    fmt.Printf(""inserting %d random text rows ...\n"", insertcount) ","['fmt', '.', 'Printf', '(', '""inserting %d random text rows ...\\n""', ',', 'insertcount', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
40,    var counter int = 0,"['var', 'counter', 'int', '=', '0']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
41,    insertloop:,"['insertloop', ':']","['IDENTIFIER', 'OPERATOR']"
42,    if counter < insertcount {,"['if', 'counter', '<', 'insertcount', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
43,        counter++,"['counter', '++']","['IDENTIFIER', 'OPERATOR']"
44,        go func(count int) {,"['go', 'func', '(', 'count', 'int', ')', '{']","['KEYWORD', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
45,"            if db.Exec(""INSERT INTO ""+tablename+""(text) VALUES(\""""+getrandomtext()+""\"");"") !=nil {","['if', 'db', '.', 'Exec', '(', '""INSERT INTO ""+tablename+""(text) VALUES(\\""""+getrandomtext()+""\\"");""', ')', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
46,"                fmt.Printf("" -%d"", count)","['fmt', '.', 'Printf', '(', '"" -%d""', ',', 'count', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
47,            } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
48,"                fmt.Printf("" +%d"", count)","['fmt', '.', 'Printf', '(', '"" +%d""', ',', 'count', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
49,            },['}'],['OPERATOR']
50,        }(counter),"['}(', 'counter', ')']","['OPERATOR', 'IDENTIFIER', 'OPERATOR']"
51,        goto insertloop,"['go', 'to', 'insertloop']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
52,    },['}'],['OPERATOR']
53,"    fmt.Printf(""\nExecuted! Waiting some seconds...\n"")","['fmt', '.', 'Printf', '(', '""\\nExecuted! Waiting some seconds...\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
54,    time.Sleep(3000 * time.Millisecond)         ,"['time', '.', 'Sleep', '(', '3000', '*', 'time', '.', 'Millisecond', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
55,"    fmt.Printf(""\nRequesting...\n"")","['fmt', '.', 'Printf', '(', '""\\nRequesting...\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
56,"    ReadTable, err := db.Prepare(""SELECT id, text FROM ""+tablename+"";"")","['ReadTable', ',', 'err', ':=', 'db', '.', 'Prepare', '(', '""SELECT id, text FROM ""+tablename+"";""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
57,    err = ReadTable.Query(),"['err', '=', 'ReadTable', '.', 'Query', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
58,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
59,"        fmt.Printf(""failed to read '""+tablename+""' table, error: "" + err.Error() + ""\n"")","['fmt', '.', 'Printf', '(', '""failed to read \'""+tablename+""\' table, error: "" + err.Error() + ""\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
60,        return,['return'],['KEYWORD']
61,    } ,['}'],['OPERATOR']
62,    Readloop:,"['Readloop', ':']","['IDENTIFIER', 'OPERATOR']"
63,    var RowId int,"['var', 'RowId', 'int']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
64,    var RowText string,"['var', 'RowText', 'string']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
65,"    err = ReadTable.Scan(&RowId, &RowText)","['err', '=', 'ReadTable', '.', 'Scan', '(&', 'RowId', ',', '&', 'RowText', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
66,    if err == nil {,"['if', 'err', '==', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
67,"        fmt.Printf(""> %d | %s\n"", RowId, RowText)","['fmt', '.', 'Printf', '(', '""> %d | %s\\n""', ',', 'RowId', ',', 'RowText', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
68,        ReadTable.Next() ,"['ReadTable', '.', 'Next', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
69,        goto Readloop,"['go', 'to', 'Readloop']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
70,    },['}'],['OPERATOR']
71,"    fmt.Printf(""Sqlite3 test done! :)\n"")","['fmt', '.', 'Printf', '(', '""Sqlite3 test done! :)\\n""', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
72,},['}'],['OPERATOR']
