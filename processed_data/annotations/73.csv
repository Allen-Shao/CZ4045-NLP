,text,token,annotation
0,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
1,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
2,"    ""io""","['""io""']",['STRING_LITERAL']
3,"    ""encoding/binary""","['""encoding/binary""']",['STRING_LITERAL']
4,"    ""encoding/json""","['""encoding/json""']",['STRING_LITERAL']
5,"    ""github.com/felixge/tcpkeepalive""","['""github.com/felixge/tcpkeepalive""']",['STRING_LITERAL']
6,"    ""net""","['""net""']",['STRING_LITERAL']
7,"    ""sanguo/base/log""","['""sanguo/base/log""']",['STRING_LITERAL']
8,"    ""strings""","['""strings""']",['STRING_LITERAL']
9,"    ""sync""","['""sync""']",['STRING_LITERAL']
10,"    ""time""","['""time""']",['STRING_LITERAL']
11,),[')'],['OPERATOR']
12,type Session struct {,"['type', 'Session', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
13,    conn *net.TCPConn //the tcp connection from client,"['conn', '*', 'net', '.', 'TCPConn', '//the tcp connection from client']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'COMMENT', 'DT', 'JJ', 'NN', 'IN', 'NN']"
14,    recvChan      chan *bufferedManager.Token //data from client,"['recvChan', 'chan', '*', 'bufferedManager', '.', 'Token', '//data from client']","['IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'COMMENT', 'NNS', 'IN', 'NN']"
15,    closeNotiChan chan bool   //,"['closeNotiChan', 'chan', 'bool', '//']","['IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'COMMENT']"
16,    ok   bool,"['ok', 'bool']","['IDENTIFIER', 'IDENTIFIER']"
17,    lock sync.Mutex,"['lock', 'sync', '.', 'Mutex']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
18,},['}'],['OPERATOR']
19,func NewSession(connection *net.TCPConn) (sess *Session) {,"['func', 'NewSession', '(', 'connection', '*', 'net', '.', 'TCPConn', ')', '(', 'sess', '*', 'Session', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
20,    var client Session,"['var', 'client', 'Session']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
21,    client.conn = connection,"['client', '.', 'conn', '=', 'connection']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
22,"    client.recvChan = make(chan []byte, 1024)","['client', '.', 'recvChan', '=', 'make', '(', 'chan', '[]', 'byte', ',', '1024', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
23,    client.closeNotiChan = make(chan bool),"['client', '.', 'closeNotiChan', '=', 'make', '(', 'chan', 'bool', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
24,    client.ok = true,"['client', '.', 'ok', '=', 'true']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
25,"    log.Debug(""New Connection"", &client)","['log', '.', 'Debug', '(', '""New Connection""', ',', '&', 'client', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
26,"    kaConn, err := tcpkeepalive.EnableKeepAlive(connection)","['kaConn', ',', 'err', ':=', 'tcpkeepalive', '.', 'EnableKeepAlive', '(', 'connection', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
27,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
28,"        log.Debug(""EnableKeepAlive err "", err)","['log', '.', 'Debug', '(', '""EnableKeepAlive err ""', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
29,    } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
30,        kaConn.SetKeepAliveIdle(120 * time.Second),"['kaConn', '.', 'SetKeepAliveIdle', '(', '120', '*', 'time', '.', 'Second', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
31,        kaConn.SetKeepAliveCount(4),"['kaConn', '.', 'SetKeepAliveCount', '(', '4', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
32,        kaConn.SetKeepAliveInterval(5 * time.Second),"['kaConn', '.', 'SetKeepAliveInterval', '(', '5', '*', 'time', '.', 'Second', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
33,    },['}'],['OPERATOR']
34,    return &client,"['return', '&', 'client']","['KEYWORD', 'OPERATOR', 'IDENTIFIER']"
35,},['}'],['OPERATOR']
36,func (sess *Session) Close() {,"['func', '(', 'sess', '*', 'Session', ')', 'Close', '()', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
37,    sess.lock.Lock(),"['sess', '.', 'lock', '.', 'Lock', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
38,    if sess.ok {,"['if', 'sess', '.', 'ok', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
39,        sess.ok = false,"['sess', '.', 'ok', '=', 'false']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
40,        close(sess.closeNotiChan),"['close', '(', 'sess', '.', 'closeNotiChan', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
41,        sess.conn.Close(),"['sess', '.', 'conn', '.', 'Close', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
42,"        log.Trace(""Sess Close Succ"", sess, sess.uid)","['log', '.', 'Trace', '(', '""Sess Close Succ""', ',', 'sess', ',', 'sess', '.', 'uid', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
43,    },['}'],['OPERATOR']
44,    sess.lock.Unlock(),"['sess', '.', 'lock', '.', 'Unlock', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
45,},['}'],['OPERATOR']
46,func (sess *Session) handleRecv() {,"['func', '(', 'sess', '*', 'Session', ')', 'handleRecv', '()', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
47,    defer func(){,"['defer', 'func', '(){']","['IDENTIFIER', 'KEYWORD', 'OPERATOR']"
48,        if err := recover(); err != nil {,"['if', 'err', ':=', 'recover', '();', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
49,"            log.Critical(""Panic"", err)","['log', '.', 'Critical', '(', '""Panic""', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
50,        },['}'],['OPERATOR']
51,"        log.Trace(""Session Recv Exit"", sess, sess.uid)","['log', '.', 'Trace', '(', '""Session Recv Exit""', ',', 'sess', ',', 'sess', '.', 'uid', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
52,        sess.Close(),"['sess', '.', 'Close', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
53,    }(),['}()'],['OPERATOR']
54,    ch := sess.recvChan,"['ch', ':=', 'sess', '.', 'recvChan']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
55,"    header := make([]byte, 2)","['header', ':=', 'make', '([]', 'byte', ',', '2', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
56,    for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
57,        /**block until recieve len(header)**/,"['**', 'block', 'until', 'recieve', 'len', '(', 'header', ')**']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
58,"        n, err := io.ReadFull(sess.conn, header)","['n', ',', 'err', ':=', 'io', '.', 'ReadFull', '(', 'sess', '.', 'conn', ',', 'header', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
59,        if n == 0 && err == io.EOF {,"['if', 'n', '==', '0', '&&', 'err', '==', 'io', '.', 'EOF', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
60,            //Opposite socket is closed,['//Opposite socket is closed'],"['COMMENT', 'NNP', 'NN', 'VBZ', 'VBN']"
61,"            log.Warn(""Socket Read EOF And Close"", sess)","['log', '.', 'Warn', '(', '""Socket Read EOF And Close""', ',', 'sess', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
62,            break,['break'],['KEYWORD']
63,        } else if err != nil {,"['}', 'else', 'if', 'err', '!=', 'nil', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
64,            //Sth wrong with this socket,['//Sth wrong with this socket'],"['COMMENT', 'NNP', 'JJ', 'IN', 'DT', 'NN']"
65,"            log.Warn(""Socket Wrong:"", err)","['log', '.', 'Warn', '(', '""Socket Wrong:""', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
66,            break,['break'],['KEYWORD']
67,        },['}'],['OPERATOR']
68,        size := binary.LittleEndian.Uint16(header) + 4,"['size', ':=', 'binary', '.', 'LittleEndian', '.', 'Uint16', '(', 'header', ')', '+', '4']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
69,"        data := make([]byte, size)","['data', ':=', 'make', '([]', 'byte', ',', 'size', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
70,"        n, err = io.ReadFull(sess.conn, t.Data)","['n', ',', 'err', '=', 'io', '.', 'ReadFull', '(', 'sess', '.', 'conn', ',', 't', '.', 'Data', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
71,        if n == 0 && err == io.EOF {,"['if', 'n', '==', '0', '&&', 'err', '==', 'io', '.', 'EOF', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
72,"            log.Warn(""Socket Read EOF And Close"", sess)","['log', '.', 'Warn', '(', '""Socket Read EOF And Close""', ',', 'sess', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
73,            break,['break'],['KEYWORD']
74,        } else if err != nil {,"['}', 'else', 'if', 'err', '!=', 'nil', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
75,"            log.Warn(""Socket Wrong:"", err)","['log', '.', 'Warn', '(', '""Socket Wrong:""', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
76,            break,['break'],['KEYWORD']
77,        },['}'],['OPERATOR']
78,        ch <- data //send data to Client to process,"['ch', '<-', 'data', '//send data to Client to process']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'COMMENT', 'VB', 'NNS', 'TO', 'NNP', 'TO', 'VB']"
79,    },['}'],['OPERATOR']
80,},['}'],['OPERATOR']
81,func (sess *Session) handleDispatch() {,"['func', '(', 'sess', '*', 'Session', ')', 'handleDispatch', '()', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
82,    defer func(){,"['defer', 'func', '(){']","['IDENTIFIER', 'KEYWORD', 'OPERATOR']"
83,"        log.Trace(""Session Dispatch Exit"",  sess, sess.uid)","['log', '.', 'Trace', '(', '""Session Dispatch Exit""', ',', 'sess', ',', 'sess', '.', 'uid', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
84,        sess.Close(),"['sess', '.', 'Close', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
85,    }(),['}()'],['OPERATOR']
86,    for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
87,        select {,"['select', '{']","['KEYWORD', 'OPERATOR']"
88,"        case msg, _ := <-sess.recvChan:","['case', 'msg', ',', '_', ':=', '<-', 'sess', '.', 'recvChan', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
89,"            log.Debug(""msg"", msg)","['log', '.', 'Debug', '(', '""msg""', ',', 'msg', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
90,"            sess.SendDirectly(""helloworldhellowor"", 1)","['sess', '.', 'SendDirectly', '(', '""helloworldhellowor""', ',', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
91,        case <-sess.closeNotiChan:,"['case', '<-', 'sess', '.', 'closeNotiChan', ':']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
92,                return,['return'],['KEYWORD']
93,        },['}'],['OPERATOR']
94,    },['}'],['OPERATOR']
95,},['}'],['OPERATOR']
96,func (sess *Session) Start() {,"['func', '(', 'sess', '*', 'Session', ')', 'Start', '()', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
97,    defer func() {,"['defer', 'func', '()', '{']","['IDENTIFIER', 'KEYWORD', 'OPERATOR', 'OPERATOR']"
98,        if err := recover(); err != nil {,"['if', 'err', ':=', 'recover', '();', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
99,"            log.Critical(""Panic"", err)","['log', '.', 'Critical', '(', '""Panic""', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
100,        },['}'],['OPERATOR']
101,    }(),['}()'],['OPERATOR']
102,    go sess.handleRecv(),"['go', 'sess', '.', 'handleRecv', '()']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
103,    sess.handleDispatch(),"['sess', '.', 'handleDispatch', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
104,    close(sess.recvChan),"['close', '(', 'sess', '.', 'recvChan', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
105,"    log.Warn(""Session Start Exit"", sess, sess.uid)","['log', '.', 'Warn', '(', '""Session Start Exit""', ',', 'sess', ',', 'sess', '.', 'uid', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
106,},['}'],['OPERATOR']
107,"func (sess *Session) SendDirectly(back interface{}, op int) bool {","['func', '(', 'sess', '*', 'Session', ')', 'SendDirectly', '(', 'back', 'interface', '{},', 'op', 'int', ')', 'bool', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
108,"    back_json, err := json.Marshal(back)","['back_json', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'back', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
109,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
110,"        log.Error(""Can't encode json message "", err, back)","['log', '.', 'Error', '(', '""Can\'t encode json message ""', ',', 'err', ',', 'back', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
111,        return false,"['return', 'false']","['KEYWORD', 'IDENTIFIER']"
112,    },['}'],['OPERATOR']
113,"    log.Debug(sess.uid, ""OUT cmd:"", op, string(back_json))","['log', '.', 'Debug', '(', 'sess', '.', 'uid', ',', '""OUT cmd:""', ',', 'op', ',', 'string', '(', 'back_json', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
114,"    _, err = sess.conn.Write(back_json)","['_', ',', 'err', '=', 'sess', '.', 'conn', '.', 'Write', '(', 'back_json', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
115,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
116,"        log.Error(""send fail"", err)","['log', '.', 'Error', '(', '""send fail""', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
117,        return false,"['return', 'false']","['KEYWORD', 'IDENTIFIER']"
118,    },['}'],['OPERATOR']
119,    return true,"['return', 'true']","['KEYWORD', 'IDENTIFIER']"
120,},['}'],['OPERATOR']
