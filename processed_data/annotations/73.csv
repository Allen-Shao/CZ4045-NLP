,text,token,annotation
0,package main,"['package', 'main']","['keyword', 'identifier']"
1,import (,"['import', '(']","['keyword', 'operator']"
2,"    ""io""","['""io""']",['string_literal']
3,"    ""encoding/binary""","['""encoding/binary""']",['string_literal']
4,"    ""encoding/json""","['""encoding/json""']",['string_literal']
5,"    ""github.com/felixge/tcpkeepalive""","['""github.com/felixge/tcpkeepalive""']",['string_literal']
6,"    ""net""","['""net""']",['string_literal']
7,"    ""sanguo/base/log""","['""sanguo/base/log""']",['string_literal']
8,"    ""strings""","['""strings""']",['string_literal']
9,"    ""sync""","['""sync""']",['string_literal']
10,"    ""time""","['""time""']",['string_literal']
11,),[')'],['operator']
12,type Session struct {,"['type', 'Session', 'struct', '{']","['keyword', 'identifier', 'keyword', 'operator']"
13,    conn *net.TCPConn //the tcp connection from client,"['conn', '*', 'net', '.', 'TCPConn', '//the tcp connection from client']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'the', 'tcp', 'connection', 'from', 'client']"
14,    recvChan      chan *bufferedManager.Token //data from client,"['recvChan', 'chan', '*', 'bufferedManager', '.', 'Token', '//data from client']","['identifier', 'keyword', 'operator', 'identifier', 'operator', 'identifier', 'comment', 'data', 'from', 'client']"
15,    closeNotiChan chan bool   //,"['closeNotiChan', 'chan', 'bool', '//']","['identifier', 'keyword', 'identifier', 'comment']"
16,    ok   bool,"['ok', 'bool']","['identifier', 'identifier']"
17,    lock sync.Mutex,"['lock', 'sync', '.', 'Mutex']","['identifier', 'identifier', 'operator', 'identifier']"
18,},['}'],['operator']
19,func NewSession(connection *net.TCPConn) (sess *Session) {,"['func', 'NewSession', '(', 'connection', '*', 'net', '.', 'TCPConn', ')', '(', 'sess', '*', 'Session', ')', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
20,    var client Session,"['var', 'client', 'Session']","['keyword', 'identifier', 'identifier']"
21,    client.conn = connection,"['client', '.', 'conn', '=', 'connection']","['identifier', 'operator', 'identifier', 'operator', 'identifier']"
22,"    client.recvChan = make(chan []byte, 1024)","['client', '.', 'recvChan', '=', 'make', '(', 'chan', '[]', 'byte', ',', '1024', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
23,    client.closeNotiChan = make(chan bool),"['client', '.', 'closeNotiChan', '=', 'make', '(', 'chan', 'bool', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'keyword', 'identifier', 'operator']"
24,    client.ok = true,"['client', '.', 'ok', '=', 'true']","['identifier', 'operator', 'identifier', 'operator', 'identifier']"
25,"    log.Debug(""New Connection"", &client)","['log', '.', 'Debug', '(', '""New Connection""', ',', '&', 'client', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'operator', 'identifier', 'operator']"
26,"    kaConn, err := tcpkeepalive.EnableKeepAlive(connection)","['kaConn', ',', 'err', ':=', 'tcpkeepalive', '.', 'EnableKeepAlive', '(', 'connection', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
27,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
28,"        log.Debug(""EnableKeepAlive err "", err)","['log', '.', 'Debug', '(', '""EnableKeepAlive err ""', ',', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
29,    } else {,"['}', 'else', '{']","['operator', 'keyword', 'operator']"
30,        kaConn.SetKeepAliveIdle(120 * time.Second),"['kaConn', '.', 'SetKeepAliveIdle', '(', '120', '*', 'time', '.', 'Second', ')']","['identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
31,        kaConn.SetKeepAliveCount(4),"['kaConn', '.', 'SetKeepAliveCount', '(', '4', ')']","['identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
32,        kaConn.SetKeepAliveInterval(5 * time.Second),"['kaConn', '.', 'SetKeepAliveInterval', '(', '5', '*', 'time', '.', 'Second', ')']","['identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
33,    },['}'],['operator']
34,    return &client,"['return', '&', 'client']","['keyword', 'operator', 'identifier']"
35,},['}'],['operator']
36,func (sess *Session) Close() {,"['func', '(', 'sess', '*', 'Session', ')', 'Close', '()', '{']","['keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
37,    sess.lock.Lock(),"['sess', '.', 'lock', '.', 'Lock', '()']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
38,    if sess.ok {,"['if', 'sess', '.', 'ok', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
39,        sess.ok = false,"['sess', '.', 'ok', '=', 'false']","['identifier', 'operator', 'identifier', 'operator', 'identifier']"
40,        close(sess.closeNotiChan),"['close', '(', 'sess', '.', 'closeNotiChan', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
41,        sess.conn.Close(),"['sess', '.', 'conn', '.', 'Close', '()']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
42,"        log.Trace(""Sess Close Succ"", sess, sess.uid)","['log', '.', 'Trace', '(', '""Sess Close Succ""', ',', 'sess', ',', 'sess', '.', 'uid', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
43,    },['}'],['operator']
44,    sess.lock.Unlock(),"['sess', '.', 'lock', '.', 'Unlock', '()']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
45,},['}'],['operator']
46,func (sess *Session) handleRecv() {,"['func', '(', 'sess', '*', 'Session', ')', 'handleRecv', '()', '{']","['keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
47,    defer func(){,"['defer', 'func', '(){']","['identifier', 'keyword', 'operator']"
48,        if err := recover(); err != nil {,"['if', 'err', ':=', 'recover', '();', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
49,"            log.Critical(""Panic"", err)","['log', '.', 'Critical', '(', '""Panic""', ',', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
50,        },['}'],['operator']
51,"        log.Trace(""Session Recv Exit"", sess, sess.uid)","['log', '.', 'Trace', '(', '""Session Recv Exit""', ',', 'sess', ',', 'sess', '.', 'uid', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
52,        sess.Close(),"['sess', '.', 'Close', '()']","['identifier', 'operator', 'identifier', 'operator']"
53,    }(),['}()'],['operator']
54,    ch := sess.recvChan,"['ch', ':=', 'sess', '.', 'recvChan']","['identifier', 'operator', 'identifier', 'operator', 'identifier']"
55,"    header := make([]byte, 2)","['header', ':=', 'make', '([]', 'byte', ',', '2', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator']"
56,    for {,"['for', '{']","['keyword', 'operator']"
57,        /**block until recieve len(header)**/,"['**', 'block', 'until', 'recieve', 'len', '(', 'header', ')**']","['operator', 'identifier', 'identifier', 'identifier', 'identifier', 'operator', 'identifier', 'operator']"
58,"        n, err := io.ReadFull(sess.conn, header)","['n', ',', 'err', ':=', 'io', '.', 'ReadFull', '(', 'sess', '.', 'conn', ',', 'header', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
59,        if n == 0 && err == io.EOF {,"['if', 'n', '==', '0', '&&', 'err', '==', 'io', '.', 'EOF', '{']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
60,            //Opposite socket is closed,['//Opposite socket is closed'],"['comment', 'Opposite', 'socket', 'is', 'closed']"
61,"            log.Warn(""Socket Read EOF And Close"", sess)","['log', '.', 'Warn', '(', '""Socket Read EOF And Close""', ',', 'sess', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
62,            break,['break'],['keyword']
63,        } else if err != nil {,"['}', 'else', 'if', 'err', '!=', 'nil', '{']","['operator', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator']"
64,            //Sth wrong with this socket,['//Sth wrong with this socket'],"['comment', 'Sth', 'wrong', 'with', 'this', 'socket']"
65,"            log.Warn(""Socket Wrong:"", err)","['log', '.', 'Warn', '(', '""Socket Wrong:""', ',', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
66,            break,['break'],['keyword']
67,        },['}'],['operator']
68,        size := binary.LittleEndian.Uint16(header) + 4,"['size', ':=', 'binary', '.', 'LittleEndian', '.', 'Uint16', '(', 'header', ')', '+', '4']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'decimal_literal']"
69,"        data := make([]byte, size)","['data', ':=', 'make', '([]', 'byte', ',', 'size', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
70,"        n, err = io.ReadFull(sess.conn, t.Data)","['n', ',', 'err', '=', 'io', '.', 'ReadFull', '(', 'sess', '.', 'conn', ',', 't', '.', 'Data', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
71,        if n == 0 && err == io.EOF {,"['if', 'n', '==', '0', '&&', 'err', '==', 'io', '.', 'EOF', '{']","['keyword', 'identifier', 'operator', 'decimal_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
72,"            log.Warn(""Socket Read EOF And Close"", sess)","['log', '.', 'Warn', '(', '""Socket Read EOF And Close""', ',', 'sess', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
73,            break,['break'],['keyword']
74,        } else if err != nil {,"['}', 'else', 'if', 'err', '!=', 'nil', '{']","['operator', 'keyword', 'keyword', 'identifier', 'operator', 'identifier', 'operator']"
75,"            log.Warn(""Socket Wrong:"", err)","['log', '.', 'Warn', '(', '""Socket Wrong:""', ',', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
76,            break,['break'],['keyword']
77,        },['}'],['operator']
78,        ch <- data //send data to Client to process,"['ch', '<-', 'data', '//send data to Client to process']","['identifier', 'operator', 'identifier', 'comment', 'send', 'data', 'to', 'Client', 'to', 'process']"
79,    },['}'],['operator']
80,},['}'],['operator']
81,func (sess *Session) handleDispatch() {,"['func', '(', 'sess', '*', 'Session', ')', 'handleDispatch', '()', '{']","['keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
82,    defer func(){,"['defer', 'func', '(){']","['identifier', 'keyword', 'operator']"
83,"        log.Trace(""Session Dispatch Exit"",  sess, sess.uid)","['log', '.', 'Trace', '(', '""Session Dispatch Exit""', ',', 'sess', ',', 'sess', '.', 'uid', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
84,        sess.Close(),"['sess', '.', 'Close', '()']","['identifier', 'operator', 'identifier', 'operator']"
85,    }(),['}()'],['operator']
86,    for {,"['for', '{']","['keyword', 'operator']"
87,        select {,"['select', '{']","['keyword', 'operator']"
88,"        case msg, _ := <-sess.recvChan:","['case', 'msg', ',', '_', ':=', '<-', 'sess', '.', 'recvChan', ':']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
89,"            log.Debug(""msg"", msg)","['log', '.', 'Debug', '(', '""msg""', ',', 'msg', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
90,"            sess.SendDirectly(""helloworldhellowor"", 1)","['sess', '.', 'SendDirectly', '(', '""helloworldhellowor""', ',', '1', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'decimal_literal', 'operator']"
91,        case <-sess.closeNotiChan:,"['case', '<-', 'sess', '.', 'closeNotiChan', ':']","['keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
92,                return,['return'],['keyword']
93,        },['}'],['operator']
94,    },['}'],['operator']
95,},['}'],['operator']
96,func (sess *Session) Start() {,"['func', '(', 'sess', '*', 'Session', ')', 'Start', '()', '{']","['keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
97,    defer func() {,"['defer', 'func', '()', '{']","['identifier', 'keyword', 'operator', 'operator']"
98,        if err := recover(); err != nil {,"['if', 'err', ':=', 'recover', '();', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
99,"            log.Critical(""Panic"", err)","['log', '.', 'Critical', '(', '""Panic""', ',', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
100,        },['}'],['operator']
101,    }(),['}()'],['operator']
102,    go sess.handleRecv(),"['go', 'sess', '.', 'handleRecv', '()']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
103,    sess.handleDispatch(),"['sess', '.', 'handleDispatch', '()']","['identifier', 'operator', 'identifier', 'operator']"
104,    close(sess.recvChan),"['close', '(', 'sess', '.', 'recvChan', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
105,"    log.Warn(""Session Start Exit"", sess, sess.uid)","['log', '.', 'Warn', '(', '""Session Start Exit""', ',', 'sess', ',', 'sess', '.', 'uid', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
106,},['}'],['operator']
107,"func (sess *Session) SendDirectly(back interface{}, op int) bool {","['func', '(', 'sess', '*', 'Session', ')', 'SendDirectly', '(', 'back', 'interface', '{},', 'op', 'int', ')', 'bool', '{']","['keyword', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'keyword', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator']"
108,"    back_json, err := json.Marshal(back)","['back_json', ',', 'err', ':=', 'json', '.', 'Marshal', '(', 'back', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
109,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
110,"        log.Error(""Can't encode json message "", err, back)","['log', '.', 'Error', '(', '""Can\'t encode json message ""', ',', 'err', ',', 'back', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
111,        return false,"['return', 'false']","['keyword', 'identifier']"
112,    },['}'],['operator']
113,"    log.Debug(sess.uid, ""OUT cmd:"", op, string(back_json))","['log', '.', 'Debug', '(', 'sess', '.', 'uid', ',', '""OUT cmd:""', ',', 'op', ',', 'string', '(', 'back_json', '))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
114,"    _, err = sess.conn.Write(back_json)","['_', ',', 'err', '=', 'sess', '.', 'conn', '.', 'Write', '(', 'back_json', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
115,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
116,"        log.Error(""send fail"", err)","['log', '.', 'Error', '(', '""send fail""', ',', 'err', ')']","['identifier', 'operator', 'identifier', 'operator', 'string_literal', 'operator', 'identifier', 'operator']"
117,        return false,"['return', 'false']","['keyword', 'identifier']"
118,    },['}'],['operator']
119,    return true,"['return', 'true']","['keyword', 'identifier']"
120,},['}'],['operator']
