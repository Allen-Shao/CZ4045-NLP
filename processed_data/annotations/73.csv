,text,token,annotation
0,"Can anyone tell my why this wouldn't compile?

","['Can', 'anyone', 'tell', 'my', 'why', 'this', ""wouldn't"", 'compile?']","['MD', 'NN', 'VB', 'PRP$', 'WRB', 'DT', 'NN', 'NN']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,type myint int,"['type', 'myint', 'int']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
3,func set(a **myint) {,"['func', 'set', '(', 'a', '**', 'myint', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
4,    i := myint(5),"['i', ':=', 'myint', '(', '5', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
5,    *a = &i ,"['*', 'a', '=', '&', 'i']","['POINTER_OPERATOR', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER']"
6,},['}'],['PUNCTUATION']
7,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
8,    var k *int,"['var', 'k', '*', 'int']","['KEYWORD', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
9,    set( (**myint)(&k) ) // cannot convert &k (type **int) to type **myint,"['set', '(', '(**', 'myint', ')(&', 'k', ')', ')', '//', 'cannot', 'convert', '&k', '(type', '**int)', 'to', 'type', '**myint']","['IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'COMMENT', 'NN', 'NN', 'NNP', 'NNP', 'NN', 'TO', 'VB', 'NN']"
10,    print( *k ),"['print', '(', '*', 'k', ')']","['IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
11,},['}'],['PUNCTUATION']
12,"

My reasoning so far is this. All types in Golang are different, but it allows to convert from one type to another with C-like cast syntax as long as underlying types are identical. In my example, converting 'int' to 'myint' is not a problem. '*int' to '*myint' isn't either. It's when you have pointer to pointer problems arise. I've been stuck on this for the second day now. Any help is appreciated.
","['My', 'reasoning', 'so', 'far', 'is', 'this.', 'All', 'types', 'in', 'Golang', 'are', 'different,', 'but', 'it', 'allows', 'to', 'convert', 'from', 'one', 'type', 'to', 'another', 'with', 'C-like', 'cast', 'syntax', 'as', 'long', 'as', 'underlying', 'types', 'are', 'identical.', 'In', 'my', 'example,', 'converting', ""'int'"", 'to', ""'myint'"", 'is', 'not', 'a', 'problem.', ""'*int'"", 'to', ""'*myint'"", ""isn't"", 'either.', ""It's"", 'when', 'you', 'have', 'pointer', 'to', 'pointer', 'problems', 'arise.', ""I've"", 'been', 'stuck', 'on', 'this', 'for', 'the', 'second', 'day', 'now.', 'Any', 'help', 'is', 'appreciated.']","['PRP$', 'VBG', 'RB', 'RB', 'VBZ', 'JJ', 'NNP', 'NNS', 'IN', 'NNP', 'VBP', 'JJ', 'CC', 'PRP', 'VBZ', 'TO', 'VB', 'IN', 'CD', 'NN', 'TO', 'DT', 'IN', 'NNP', 'NN', 'NN', 'RB', 'RB', 'IN', 'JJ', 'NNS', 'VBP', 'VBN', 'IN', 'PRP$', 'NN', 'VBG', 'CD', 'TO', 'VB', 'VBZ', 'RB', 'DT', 'NN', 'POS', 'TO', 'VB', 'JJ', 'NNS', 'NNP', 'WRB', 'PRP', 'VBP', 'VBN', 'TO', 'VB', 'NNS', 'JJ', 'NNP', 'VBN', 'VBN', 'IN', 'DT', 'IN', 'DT', 'JJ', 'NN', 'IN', 'NNP', 'NN', 'VBZ', 'JJ']"
