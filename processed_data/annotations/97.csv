,text,token,annotation
0,"You might try working directly with templates.  Example:

","['You', 'might', 'try', 'working', 'directly', 'with', 'templates.', 'Example:']","['PRP', 'MD', 'VB', 'VBG', 'RB', 'IN', 'NN', 'NNP']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""bytes""","['""bytes""']",['STRING_LITERAL']
4,"    ""encoding/xml""","['""encoding/xml""']",['STRING_LITERAL']
5,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
6,"    ""text/template""","['""text/template""']",['STRING_LITERAL']
7,),[')'],['PUNCTUATION']
8,type ele struct {,"['type', 'ele', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
9,    Name  string,"['Name', 'string']","['IDENTIFIER', 'IDENTIFIER']"
10,    Attrs []attr,"['Attrs', '[]', 'attr']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
11,},['}'],['PUNCTUATION']
12,type attr struct {,"['type', 'attr', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
13,"    Name, Value string","['Name', ',', 'Value', 'string']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER']"
14,},['}'],['PUNCTUATION']
15,var x = `,"['var', 'x', '=']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR']"
16,`,[],[]
17,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
18,"    // template function ""xml"" defined here does basic escaping,","['//', 'template', 'function', '""xml""', 'defined', 'here', 'does', 'basic', 'escaping,']","['COMMENT', 'NN', 'NN', 'NN', 'VBN', 'RB', 'VBZ', 'JJ', 'VB']"
19,"    // important for handling special characters such as "".","['//', 'important', 'for', 'handling', 'special', 'characters', 'such', 'as', '"".']","['COMMENT', 'JJ', 'IN', 'VBG', 'JJ', 'NNS', 'JJ', 'IN', 'NN']"
20,"    t := template.New("""").Funcs(template.FuncMap{""xml"": func(s string) string {","['t', ':=', 'template.New("""").Funcs(template.FuncMap{""xml"": func(s string)', 'string', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'IDENTIFIER', 'PUNCTUATION']"
21,        var b bytes.Buffer,"['var', 'b', 'bytes', '.', 'Buffer']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
22,"        xml.Escape(&b, []byte(s))","['xml.Escape(&b, []byte(s))']",['FUNCTION_CALL']
23,        return b.String(),"['return', 'b.String()']","['KEYWORD', 'FUNCTION_CALL']"
24,    }}),['}})'],['PUNCTUATION']
25,    template.Must(t.Parse(x)),['template.Must(t.Parse(x))'],['FUNCTION_CALL']
26,    e := ele{,"['e', ':=', 'ele', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
27,"        Name: ""Meh"",","['Name', ':', '""Meh""', ',']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
28,        Attrs: []attr{,"['Attrs', ':', '[]', 'attr', '{']","['IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
29,"            {""hi"", ""there""},","['{', '""hi""', ',', '""there""', '},']","['PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
30,"            {""um"", `I said ""hello?""`},","['{', '""um""', ',', 'I', 'said', '""hello?""', '},']","['PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'STRING_LITERAL', 'PUNCTUATION']"
31,"        },","['},']",['PUNCTUATION']
32,    },['}'],['PUNCTUATION']
33,    b := new(bytes.Buffer),"['b', ':=', 'new', '(', 'bytes', '.', 'Buffer', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
34,"    err := t.Execute(b, e)","['err', ':=', 't.Execute(b, e)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
35,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
36,        fmt.Println(err),['fmt.Println(err)'],['FUNCTION_CALL']
37,        return,['return'],['KEYWORD']
38,    },['}'],['PUNCTUATION']
39,    fmt.Println(b),['fmt.Println(b)'],['FUNCTION_CALL']
40,},['}'],['PUNCTUATION']
41,"

Output:




",['Output:'],['NN']
