,text,token,annotation
0,package client                                                                                                                                                                                              ,"['package', 'client']","['keyword', 'identifier']"
1,import (                                                                                                                                                                                                    ,"['import', '(']","['keyword', 'operator']"
2,"    ""encoding/base64""                                                                                                                                                                                       ","['""encoding/base64""']",['string_literal']
3,"    ""crypto/aes""                                                                                                                                                                                            ","['""crypto/aes""']",['string_literal']
4,"    ""crypto/cipher""                                                                                                                                                                                         ","['""crypto/cipher""']",['string_literal']
5,"    ""fmt""                                                                                                                                                                                                   ","['""fmt""']",['string_literal']
6,) ,[')'],['operator']
7,"var iv = []byte{34, 35, 35, 57, 68, 4, 35, 36, 7, 8, 35, 23, 35, 86, 35, 23}","['var', 'iv', '=', '[]', 'byte', '{', '34', ',', '35', ',', '35', ',', '57', ',', '68', ',', '4', ',', '35', ',', '36', ',', '7', ',', '8', ',', '35', ',', '23', ',', '35', ',', '86', ',', '35', ',', '23', '}']","['keyword', 'identifier', 'operator', 'operator', 'identifier', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator', 'decimal_literal', 'operator']"
8,func encodeBase64(b []byte) string {                                                                                                                                                                        ,"['func', 'encodeBase64', '(', 'b', '[]', 'byte', ')', 'string', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
9,    return base64.StdEncoding.EncodeToString(b)                                                                                                                                                             ,"['return', 'base64', '.', 'StdEncoding', '.', 'EncodeToString', '(', 'b', ')']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
10,}                                                                                                                                                                                                           ,['}'],['operator']
11,func decodeBase64(s string) []byte {                                                                                                                                                                        ,"['func', 'decodeBase64', '(', 's', 'string', ')', '[]', 'byte', '{']","['keyword', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'operator', 'identifier', 'operator']"
12,"    data, err := base64.StdEncoding.DecodeString(s)                                                                                                                                                         ","['data', ',', 'err', ':=', 'base64', '.', 'StdEncoding', '.', 'DecodeString', '(', 's', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
13,    if err != nil { panic(err) }                                                                                                                                                                            ,"['if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
14,    return data                                                                                                                                                                                             ,"['return', 'data']","['keyword', 'identifier']"
15,}                                                                                                                                                                                                           ,['}'],['operator']
16,"func Encrypt(key, text string) string {                                                                                                                                                                     ","['func', 'Encrypt', '(', 'key', ',', 'text', 'string', ')', 'string', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator']"
17,"    block, err := aes.NewCipher([]byte(key))                                                                                                                                                                ","['block', ',', 'err', ':=', 'aes', '.', 'NewCipher', '([]', 'byte', '(', 'key', '))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
18,    if err != nil { panic(err) }                                                                                                                                                                            ,"['if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
19,    plaintext := []byte(text)                                                                                                                                                                               ,"['plaintext', ':=', '[]', 'byte', '(', 'text', ')']","['identifier', 'operator', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
20,"    cfb := cipher.NewCFBEncrypter(block, iv)                                                                                                                                                                ","['cfb', ':=', 'cipher', '.', 'NewCFBEncrypter', '(', 'block', ',', 'iv', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
21,"    ciphertext := make([]byte, len(plaintext))                                                                                                                                                              ","['ciphertext', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'plaintext', '))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
22,"    cfb.XORKeyStream(ciphertext, plaintext)                                                                                                                                                                 ","['cfb', '.', 'XORKeyStream', '(', 'ciphertext', ',', 'plaintext', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
23,    return encodeBase64(ciphertext)                                                                                                                                                                         ,"['return', 'encodeBase64', '(', 'ciphertext', ')']","['keyword', 'identifier', 'operator', 'identifier', 'operator']"
24,}                                                                                                                                                                                                           ,['}'],['operator']
25,"func Decrypt(key, text string) string {                                                                                                                                                                     ","['func', 'Decrypt', '(', 'key', ',', 'text', 'string', ')', 'string', '{']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'identifier', 'operator', 'identifier', 'operator']"
26,"    block, err := aes.NewCipher([]byte(key))                                                                                                                                                                ","['block', ',', 'err', ':=', 'aes', '.', 'NewCipher', '([]', 'byte', '(', 'key', '))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
27,    if err != nil { panic(err) }                                                                                                                                                                            ,"['if', 'err', '!=', 'nil', '{', 'panic', '(', 'err', ')', '}']","['keyword', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'operator']"
28,    ciphertext := decodeBase64(text)                                                                                                                                                                        ,"['ciphertext', ':=', 'decodeBase64', '(', 'text', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
29,"    cfb := cipher.NewCFBEncrypter(block, iv)                                                                                                                                                                ","['cfb', ':=', 'cipher', '.', 'NewCFBEncrypter', '(', 'block', ',', 'iv', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
30,"    plaintext := make([]byte, len(ciphertext))                                                                                                                                                              ","['plaintext', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'ciphertext', '))']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
31,"    cfb.XORKeyStream(plaintext, ciphertext)                                                                                                                                                                 ","['cfb', '.', 'XORKeyStream', '(', 'plaintext', ',', 'ciphertext', ')']","['identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator', 'identifier', 'operator']"
32,},['}'],['operator']
