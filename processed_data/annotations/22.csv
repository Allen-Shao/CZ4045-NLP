,text,token,annotation
0,"Session Variables are not maintained across request while using gorilla sessions web toolkit.
When  I start the server and type localhost:8100/ page is directed to login.html since session values do not exist.After I login I set the session variable in the store and the page is redirected to home.html. But when I open a new tab and type localhost:8100/ the page should be directed to home.html using already stored session variables, but the page is instead redirected to login.html.
Following is the code.

","['Session', 'Variables', 'are', 'not', 'maintained', 'across', 'request', 'while', 'using', 'gorilla', 'sessions', 'web', 'toolkit.', 'When', 'I', 'start', 'the', 'server', 'and', 'type', 'localhost:8100/', 'page', 'is', 'directed', 'to', 'login.html', 'since', 'session', 'values', 'do', 'not', 'exist.After', 'I', 'login', 'I', 'set', 'the', 'session', 'variable', 'in', 'the', 'store', 'and', 'the', 'page', 'is', 'redirected', 'to', 'home.html.', 'But', 'when', 'I', 'open', 'a', 'new', 'tab', 'and', 'type', 'localhost:8100/', 'the', 'page', 'should', 'be', 'directed', 'to', 'home.html', 'using', 'already', 'stored', 'session', 'variables,', 'but', 'the', 'page', 'is', 'instead', 'redirected', 'to', 'login.html.', 'Following', 'is', 'the', 'code.']","['NN', 'NNS', 'VBP', 'RB', 'VBN', 'IN', 'NN', 'IN', 'VBG', 'JJ', 'NNS', 'VBP', 'IN', 'WRB', 'PRP', 'VBP', 'DT', 'NN', 'CC', 'NN', 'NN', 'NN', 'VBZ', 'VBN', 'TO', 'VB', 'IN', 'NN', 'NNS', 'VBP', 'RB', 'VB', 'PRP', 'VBP', 'PRP', 'VBP', 'DT', 'NN', 'NN', 'IN', 'DT', 'NN', 'CC', 'DT', 'NN', 'VBZ', 'VBN', 'TO', 'VB', 'CC', 'WRB', 'PRP', 'VBP', 'DT', 'JJ', 'NN', 'CC', 'NN', 'VBP', 'DT', 'NN', 'MD', 'VB', 'VBN', 'TO', 'VB', 'VBG', 'RB', 'VBN', 'NN', 'NN', 'CC', 'DT', 'NN', 'VBZ', 'RB', 'VBN', 'TO', 'VB', 'NNP', 'VBZ', 'DT', 'NN']"
1,    package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""crypto/md5""","['""crypto/md5""']",['STRING_LITERAL']
4,"    ""encoding/hex""","['""encoding/hex""']",['STRING_LITERAL']
5,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
6,"    ""github.com/gocql/gocql""","['""github.com/gocql/gocql""']",['STRING_LITERAL']
7,"    ""github.com/gorilla/mux""","['""github.com/gorilla/mux""']",['STRING_LITERAL']
8,"    ""github.com/gorilla/sessions""","['""github.com/gorilla/sessions""']",['STRING_LITERAL']
9,"    ""net/http""","['""net/http""']",['STRING_LITERAL']
10,"    ""time""","['""time""']",['STRING_LITERAL']
11,),[')'],['PUNCTUATION']
12,"var store = sessions.NewCookieStore([]byte(""something-very-secret""))","['var', 'store', '=', 'sessions.NewCookieStore([]byte(""something-very-secret""))']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
13,var router = mux.NewRouter(),"['var', 'router', '=', 'mux.NewRouter()']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
14,func init() {,"['func', 'init', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
15,    store.Options = &sessions.Options{,"['store', '.', 'Options', '=', '&', 'sessions', '.', 'Options', '{']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
16,"        Domain:   ""localhost"",","['Domain', ':', '""localhost""', ',']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
17,"        Path:     ""/"",","['Path', ':', '""/""', ',']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
18,"        MaxAge:   3600 * 1, // 1 hour","['MaxAge', ':', '3600', '*', '1', ',', '//', '1', 'hour']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'COMMENT', 'CD', 'NN']"
19,"        HttpOnly: true,","['HttpOnly', ':', 'true', ',']","['IDENTIFIER', 'PUNCTUATION', 'BOOLEAN_LITERAL', 'PUNCTUATION']"
20,    },['}'],['PUNCTUATION']
21,},['}'],['PUNCTUATION']
22,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
23,    //session handling,"['//', 'session', 'handling']","['COMMENT', 'NN', 'VBG']"
24,"    router.HandleFunc(""/"", SessionHandler)","['router.HandleFunc(""/"", SessionHandler)']",['FUNCTION_CALL']
25,"    router.HandleFunc(""/signIn"", SignInHandler)","['router.HandleFunc(""/signIn"", SignInHandler)']",['FUNCTION_CALL']
26,"    router.HandleFunc(""/signUp"", SignUpHandler)","['router.HandleFunc(""/signUp"", SignUpHandler)']",['FUNCTION_CALL']
27,"    router.HandleFunc(""/logOut"", LogOutHandler)","['router.HandleFunc(""/logOut"", LogOutHandler)']",['FUNCTION_CALL']
28,"    http.Handle(""/"", router)","['http.Handle(""/"", router)']",['FUNCTION_CALL']
29,"    http.ListenAndServe("":8100"", nil)","['http.ListenAndServe("":8100"", nil)']",['FUNCTION_CALL']
30,},['}'],['PUNCTUATION']
31,//handler for signIn,"['//', 'handler', 'for', 'signIn']","['COMMENT', 'NN', 'IN', 'NN']"
32,"func SignInHandler(res http.ResponseWriter, req *http.Request) {","['func', 'SignInHandler', '(', 'res', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
33,"    email := req.FormValue(""email"")","['email', ':=', 'req.FormValue(""email"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
34,"    password := req.FormValue(""password"")","['password', ':=', 'req.FormValue(""password"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
35,    //Generate hash of password,"['//', 'Generate', 'hash', 'of', 'password']","['COMMENT', 'NNP', 'NN', 'IN', 'NN']"
36,    hasher := md5.New(),"['hasher', ':=', 'md5.New()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
37,    hasher.Write([]byte(password)),['hasher.Write([]byte(password))'],['FUNCTION_CALL']
38,    encrypted_password := hex.EncodeToString(hasher.Sum(nil)),"['encrypted_password', ':=', 'hex.EncodeToString(hasher.Sum(nil))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
39,    //cassandra connection,"['//', 'cassandra', 'connection']","['COMMENT', 'NN', 'NN']"
40,"    cluster := gocql.NewCluster(""localhost"")","['cluster', ':=', 'go', 'cql.NewCluster(""localhost"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'FUNCTION_CALL']"
41,"    cluster.Keyspace = ""gbuy""","['cluster', '.', 'Keyspace', '=', '""gbuy""']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL']"
42,    cluster.DefaultPort = 9042,"['cluster', '.', 'DefaultPort', '=', '9042']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
43,    cluster.Consistency = gocql.Quorum,"['cluster', '.', 'Consistency', '=', 'go', 'cql', '.', 'Quorum']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
44,"    session, _ := cluster.CreateSession()","['session', ',', '_', ':=', 'cluster.CreateSession()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
45,    defer session.Close(),"['defer', 'session.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
46,    //select query,"['//', 'select', 'query']","['COMMENT', 'JJ', 'NN']"
47,    var firstname string,"['var', 'firstname', 'string']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
48,"    stmt := ""SELECT firstname FROM USER WHERE email= '"" + email + ""' and password ='"" + encrypted_password + ""';""","['stmt', ':=', '""SELECT firstname FROM USER WHERE email= \'""', '+', 'email', '+', '""\' and password =\'""', '+', 'encrypted_password', '+', '""\';""']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL']"
49,    err := session.Query(stmt).Scan(&firstname),"['err', ':=', 'session.Query(stmt).Scan(&firstname)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
50,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
51,"        fmt.Fprintf(res, ""failed"")","['fmt.Fprintf(res, ""failed"")']",['FUNCTION_CALL']
52,    } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
53,"        if firstname == """" {","['if', 'firstname', '==', '""""', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'STRING_LITERAL', 'PUNCTUATION']"
54,"            fmt.Fprintf(res, ""failed"")","['fmt.Fprintf(res, ""failed"")']",['FUNCTION_CALL']
55,        } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
56,"            fmt.Fprintf(res, firstname)","['fmt.Fprintf(res, firstname)']",['FUNCTION_CALL']
57,        },['}'],['PUNCTUATION']
58,    },['}'],['PUNCTUATION']
59,    //store in session variable,"['//', 'store', 'in', 'session', 'variable']","['COMMENT', 'NN', 'IN', 'NN', 'NN']"
60,"    sessionNew, _ := store.Get(req, ""loginSession"")","['sessionNew', ',', '_', ':=', 'store.Get(req, ""loginSession"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
61,    // Set some session values.,"['//', 'Set', 'some', 'session', 'values.']","['COMMENT', 'NNP', 'DT', 'NN', 'NN']"
62,"    sessionNew.Values[""email""] = email","['sessionNew', '.', 'Values', '[', '""email""', ']', '=', 'email']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
63,"    sessionNew.Values[""name""] = firstname","['sessionNew', '.', 'Values', '[', '""name""', ']', '=', 'firstname']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
64,    // Save it.,"['//', 'Save', 'it.']","['COMMENT', 'NNP', 'NN']"
65,"    sessionNew.Save(req, res)","['sessionNew.Save(req, res)']",['FUNCTION_CALL']
66,"    //store.Save(req,res,sessionNew)","['//', 'store.Save(req,res,sessionNew)']","['COMMENT', 'NN']"
67,"    fmt.Println(""Session after logging:"")","['fmt.Println(""Session after logging:"")']",['FUNCTION_CALL']
68,    fmt.Println(sessionNew),['fmt.Println(sessionNew)'],['FUNCTION_CALL']
69,},['}'],['PUNCTUATION']
70,//handler for signUp,"['//', 'handler', 'for', 'signUp']","['COMMENT', 'NN', 'IN', 'NN']"
71,"func SignUpHandler(res http.ResponseWriter, req *http.Request) {","['func', 'SignUpHandler', '(', 'res', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
72,"    fName := req.FormValue(""fName"")","['fName', ':=', 'req.FormValue(""fName"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
73,"    lName := req.FormValue(""lName"")","['lName', ':=', 'req.FormValue(""lName"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
74,"    email := req.FormValue(""email"")","['email', ':=', 'req.FormValue(""email"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
75,"    password := req.FormValue(""passwd"")","['password', ':=', 'req.FormValue(""passwd"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
76,"    birthdate := req.FormValue(""date"")","['birthdate', ':=', 'req.FormValue(""date"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
77,"    city := req.FormValue(""city"")","['city', ':=', 'req.FormValue(""city"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
78,"    gender := req.FormValue(""gender"")","['gender', ':=', 'req.FormValue(""gender"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
79,    //Get current timestamp and format it.,"['//', 'Get', 'current', 'timestamp', 'and', 'format', 'it.']","['COMMENT', 'NNP', 'JJ', 'NN', 'CC', 'NN', 'NN']"
80,"    sysdate := time.Now().Format(""2006-01-02 15:04:05-0700"")","['sysdate', ':=', 'time.Now().Format(""2006-01-02 15:04:05-0700"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
81,    //Generate hash of password,"['//', 'Generate', 'hash', 'of', 'password']","['COMMENT', 'NNP', 'NN', 'IN', 'NN']"
82,    hasher := md5.New(),"['hasher', ':=', 'md5.New()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
83,    hasher.Write([]byte(password)),['hasher.Write([]byte(password))'],['FUNCTION_CALL']
84,    encrypted_password := hex.EncodeToString(hasher.Sum(nil)),"['encrypted_password', ':=', 'hex.EncodeToString(hasher.Sum(nil))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
85,    //cassandra connection,"['//', 'cassandra', 'connection']","['COMMENT', 'NN', 'NN']"
86,"    cluster := gocql.NewCluster(""localhost"")","['cluster', ':=', 'go', 'cql.NewCluster(""localhost"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'FUNCTION_CALL']"
87,"    cluster.Keyspace = ""gbuy""","['cluster', '.', 'Keyspace', '=', '""gbuy""']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL']"
88,    cluster.DefaultPort = 9042,"['cluster', '.', 'DefaultPort', '=', '9042']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
89,    cluster.Consistency = gocql.Quorum,"['cluster', '.', 'Consistency', '=', 'go', 'cql', '.', 'Quorum']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
90,"    session, _ := cluster.CreateSession()","['session', ',', '_', ':=', 'cluster.CreateSession()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
91,    defer session.Close(),"['defer', 'session.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
92,    //Insert the data into the Table,"['//', 'Insert', 'the', 'data', 'into', 'the', 'Table']","['COMMENT', 'IN', 'DT', 'NN', 'IN', 'DT', 'NN']"
93,"    stmt := ""INSERT INTO USER (email,firstname,lastname,birthdate,city,gender,password,creation_date) VALUES ('"" + email + ""','"" + fName + ""','"" + lName + ""','"" + birthdate + ""','"" + city + ""','"" + gender + ""','"" + encrypted_password + ""','"" + sysdate + ""');""","['stmt', ':=', '""INSERT INTO USER (email,firstname,lastname,birthdate,city,gender,password,creation_date) VALUES (\'""', '+', 'email', '+', '""\',\'""', '+', 'fName', '+', '""\',\'""', '+', 'lName', '+', '""\',\'""', '+', 'birthdate', '+', '""\',\'""', '+', 'city', '+', '""\',\'""', '+', 'gender', '+', '""\',\'""', '+', 'encrypted_password', '+', '""\',\'""', '+', 'sysdate', '+', '""\');""']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL']"
94,    fmt.Println(stmt),['fmt.Println(stmt)'],['FUNCTION_CALL']
95,    err := session.Query(stmt).Exec(),"['err', ':=', 'session.Query(stmt).Exec()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
96,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
97,"        fmt.Fprintf(res, ""failed"")","['fmt.Fprintf(res, ""failed"")']",['FUNCTION_CALL']
98,    } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
99,"        fmt.Fprintf(res, fName)","['fmt.Fprintf(res, fName)']",['FUNCTION_CALL']
100,    },['}'],['PUNCTUATION']
101,},['}'],['PUNCTUATION']
102,//handler for logOut,"['//', 'handler', 'for', 'logOut']","['COMMENT', 'NN', 'IN', 'NN']"
103,"func LogOutHandler(res http.ResponseWriter, req *http.Request) {","['func', 'LogOutHandler', '(', 'res', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
104,"    sessionOld, err := store.Get(req, ""loginSession"")","['sessionOld', ',', 'err', ':=', 'store.Get(req, ""loginSession"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
105,"    fmt.Println(""Session in logout"")","['fmt.Println(""Session in logout"")']",['FUNCTION_CALL']
106,    fmt.Println(sessionOld),['fmt.Println(sessionOld)'],['FUNCTION_CALL']
107,"    if err = sessionOld.Save(req, res); err != nil {","['if', 'err', '=', 'sessionOld.Save(req, res)', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
108,"        fmt.Println(""Error saving session: %v"", err)","['fmt.Println(""Error saving session: %v"", err)']",['FUNCTION_CALL']
109,    },['}'],['PUNCTUATION']
110,},['}'],['PUNCTUATION']
111,//handler for Session,"['//', 'handler', 'for', 'Session']","['COMMENT', 'NN', 'IN', 'NN']"
112,"func SessionHandler(res http.ResponseWriter, req *http.Request) {","['func', 'SessionHandler', '(', 'res', 'http', '.', 'ResponseWriter', ',', 'req', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
113,"    router.PathPrefix(""/"").Handler(http.FileServer(http.Dir(""../static/"")))","['router.PathPrefix(""/"").Handler(http.FileServer(http.Dir(""../static/"")))']",['FUNCTION_CALL']
114,"    session, _ := store.Get(req, ""loginSession"")","['session', ',', '_', ':=', 'store.Get(req, ""loginSession"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
115,"    fmt.Println(""Session in SessionHandler"")","['fmt.Println(""Session in SessionHandler"")']",['FUNCTION_CALL']
116,    fmt.Println(session),['fmt.Println(session)'],['FUNCTION_CALL']
117,"    if val, ok := session.Values[""email""].(string); ok {","['if', 'val', ',', 'ok', ':=', 'session', '.', 'Values', '[', '""email""', '].(', 'string', ');', 'ok', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
118,        // if val is a string,"['//', 'if', 'val', 'is', 'a', 'string']","['COMMENT', 'IN', 'NN', 'VBZ', 'DT', 'NN']"
119,        switch val {,"['switch', 'val', '{']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
120,"        case """": {","['case', '""""', ':', '{']","['KEYWORD', 'STRING_LITERAL', 'PUNCTUATION', 'PUNCTUATION']"
121,"            http.Redirect(res, req, ""html/login.html"", http.StatusFound) }","['http.Redirect(res, req, ""html/login.html"", http.StatusFound)', '}']","['FUNCTION_CALL', 'PUNCTUATION']"
122,        default:,"['default', ':']","['KEYWORD', 'PUNCTUATION']"
123,"            http.Redirect(res, req, ""html/home.html"", http.StatusFound)","['http.Redirect(res, req, ""html/home.html"", http.StatusFound)']",['FUNCTION_CALL']
124,        },['}'],['PUNCTUATION']
125,    } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
126,        // if val is not a string type,"['//', 'if', 'val', 'is', 'not', 'a', 'string', 'type']","['COMMENT', 'IN', 'NN', 'VBZ', 'RB', 'DT', 'NN', 'NN']"
127,"        http.Redirect(res, req, ""html/login.html"", http.StatusFound)","['http.Redirect(res, req, ""html/login.html"", http.StatusFound)']",['FUNCTION_CALL']
128,    },['}'],['PUNCTUATION']
129,},['}'],['PUNCTUATION']
130,"

Can somebody tell me what I am doing wrong. Thanks in advance.
","['Can', 'somebody', 'tell', 'me', 'what', 'I', 'am', 'doing', 'wrong.', 'Thanks', 'in', 'advance.']","['MD', 'NN', 'VB', 'PRP', 'WP', 'PRP', 'VBP', 'VBG', 'JJ', 'NNS', 'IN', 'NN']"
