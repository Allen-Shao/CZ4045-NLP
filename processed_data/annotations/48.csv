,text,token,annotation
0,"For example,

","['For', 'example,']","['IN', 'NN']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""flag""","['""flag""']",['STRING_LITERAL']
4,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
5,"    ""os""","['""os""']",['STRING_LITERAL']
6,"    ""strconv""","['""strconv""']",['STRING_LITERAL']
7,),[')'],['PUNCTUATION']
8,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
9,    flag.Parse(),['flag.Parse()'],['FUNCTION_CALL']
10,    s := flag.Arg(0),"['s', ':=', 'flag.Arg(0)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
11,    // string to int,"['//', 'string', 'to', 'int']","['COMMENT', 'VBG', 'TO', 'VB']"
12,"    i, err := strconv.Atoi(s)","['i', ',', 'err', ':=', 'strconv.Atoi(s)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
13,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
14,        // handle error,"['//', 'handle', 'error']","['COMMENT', 'NN', 'NN']"
15,        fmt.Println(err),['fmt.Println(err)'],['FUNCTION_CALL']
16,        os.Exit(2),['os.Exit(2)'],['FUNCTION_CALL']
17,    },['}'],['PUNCTUATION']
18,"    fmt.Println(s, i)","['fmt.Println(s, i)']",['FUNCTION_CALL']
19,},['}'],['PUNCTUATION']
