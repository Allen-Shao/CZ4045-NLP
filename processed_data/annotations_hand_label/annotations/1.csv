,text,token,annotation
0,"I'm sure that I'm doing something wrong, I have a Go program that parses in 3D models in OBJ format and outputs a json object.  When I run it without adding in goroutines I get the following output:

","[""I'm"", 'sure', 'that', ""I'm"", 'doing', 'something', 'wrong,', 'I', 'have', 'a', 'Go', 'program', 'that', 'parses', 'in', '3D', 'models', 'in', 'OBJ', 'format', 'and', 'outputs', 'a', 'json', 'object.', 'When', 'I', 'run', 'it', 'without', 'adding', 'in', 'goroutines', 'I', 'get', 'the', 'following', 'output:']","['NNP', 'NN', 'WDT', 'NNP', 'VBG', 'NN', 'NN', 'PRP', 'VBP', 'DT', 'NNP', 'NN', 'WDT', 'VBZ', 'IN', 'CD', 'NNS', 'IN', 'NNP', 'NN', 'CC', 'VBZ', 'DT', 'NN', 'NN', 'WRB', 'PRP', 'VBP', 'PRP', 'IN', 'VBG', 'IN', 'NNS', 'PRP', 'VBP', 'DT', 'JJ', 'NN']"
1,$ go run objParser.go ak47.obj extincteur_obj.obj ,"['$', 'go', 'run', 'objParser', '.', 'go', 'ak47', '.', 'obj', 'extincteur_obj', '.', 'obj']","['OPERATOR', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
2,--Creating ak47.json3d from ak47.obj,"['--', 'Creating', 'ak47', '.', 'json3d', 'from', 'ak47', '.', 'obj']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
3,--Exported 85772 faces with 89088 verticies,"['--', 'Exported', '85772', 'faces', 'with', '89088', 'verticies']","['OPERATOR', 'IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER']"
4,--Creating extincteur_obj.json3d from extincteur_obj.obj,"['--', 'Creating', 'extincteur_obj', '.', 'json3d', 'from', 'extincteur_obj', '.', 'obj']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
5,--Exported 150316 faces with 151425 verticies,"['--', 'Exported', '150316', 'faces', 'with', '151425', 'verticies']","['OPERATOR', 'IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER']"
6,Parsed 2 files in 8.4963s,"['Parsed', '2', 'files', 'in', '8', '.', '4963', 's']","['IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER']"
7,"

Then I added in the goroutines and I get this output:

","['Then', 'I', 'added', 'in', 'the', 'goroutines', 'and', 'I', 'get', 'this', 'output:']","['RB', 'PRP', 'VBD', 'IN', 'DT', 'NNS', 'CC', 'PRP', 'VBP', 'DT', 'NN']"
8,$ go run objParser.go ak47.obj extincteur_obj.obj ,"['$', 'go', 'run', 'objParser', '.', 'go', 'ak47', '.', 'obj', 'extincteur_obj', '.', 'obj']","['OPERATOR', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
9,--Creating ak47.json3d from ak47.obj,"['--', 'Creating', 'ak47', '.', 'json3d', 'from', 'ak47', '.', 'obj']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
10,--Creating extincteur_obj.json3d from extincteur_obj.obj,"['--', 'Creating', 'extincteur_obj', '.', 'json3d', 'from', 'extincteur_obj', '.', 'obj']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
11,--Exported 85772 faces with 89088 verticies,"['--', 'Exported', '85772', 'faces', 'with', '89088', 'verticies']","['OPERATOR', 'IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER']"
12,--Exported 150316 faces with 151425 verticies,"['--', 'Exported', '150316', 'faces', 'with', '151425', 'verticies']","['OPERATOR', 'IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER']"
13,Parsed 2 files in 10.23137s,"['Parsed', '2', 'files', 'in', '10', '.', '23137', 's']","['IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER']"
14,"

The order of how it's printed is what I expected given the interlacing of the parsing but I have no idea why it actually takes longer!  The code is pretty long, I snipped what I could but it's still pretty long, sorry about that!

","['The', 'order', 'of', 'how', ""it's"", 'printed', 'is', 'what', 'I', 'expected', 'given', 'the', 'interlacing', 'of', 'the', 'parsing', 'but', 'I', 'have', 'no', 'idea', 'why', 'it', 'actually', 'takes', 'longer!', 'The', 'code', 'is', 'pretty', 'long,', 'I', 'snipped', 'what', 'I', 'could', 'but', ""it's"", 'still', 'pretty', 'long,', 'sorry', 'about', 'that!']","['DT', 'NN', 'IN', 'WRB', 'JJ', 'VBN', 'VBZ', 'WP', 'PRP', 'VBD', 'VBN', 'DT', 'NN', 'IN', 'DT', 'NN', 'CC', 'PRP', 'VBP', 'DT', 'NN', 'WRB', 'PRP', 'RB', 'VBZ', 'IN', 'DT', 'NN', 'VBZ', 'JJ', 'NN', 'PRP', 'VBD', 'WP', 'PRP', 'MD', 'CC', 'VB', 'RB', 'RB', 'JJ', 'NN', 'IN', 'NN']"
15,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
16,"func parseFile(name string, finished chan int) {","['func', 'parseFile', '(', 'name', 'string', ',', 'finished', 'chan', 'int', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
17,    var Verts []*Vertex,"['var', 'Verts', '[]*', 'Vertex']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
18,    var Texs []*TexCoord,"['var', 'Texs', '[]*', 'TexCoord']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
19,    var Faces []*Face,"['var', 'Faces', '[]*', 'Face']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
20,"    var objFile, mtlFile, jsonFile *os.File","['var', 'objFile', ',', 'mtlFile', ',', 'jsonFile', '*', 'os', '.', 'File']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
21,    var parseMaterial bool,"['var', 'parseMaterial', 'bool']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
22,    // Set up files and i/o,"['//', 'Set', 'up', 'files', 'and', 'i/o']","['COMMENT', 'NNP', 'RP', 'NNS', 'CC', 'NN']"
23,    inName := name,"['inName', ':=', 'name']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
24,"    outName := strings.Replace(inName, "".obj"", "".json3d"", -1)","['outName', ':=', 'strings.Replace(inName, "".obj"", "".json3d"", -1)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
25,    parseMaterial = false,"['parseMaterial', '=', 'false']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
26,"    fmt.Printf(""--""+FgGreen+""Creating""+Reset+"" %s from %s\n"", outName, inName)","['fmt.Printf(""--""+FgGreen+""Creating""+Reset+"" %s from %s\\n"", outName, inName)']",['FUNCTION_CALL']
27,    var err error,"['var', 'err', 'error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
28,    var part []byte,"['var', 'part', '[]', 'byte']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
29,    var prefix bool,"['var', 'prefix', 'bool']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
30,"    if objFile, err = os.Open(inName); err != nil {","['if', 'objFile', ',', 'err', '=', 'os.Open(inName)', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
31,"        fmt.Println(FgRed+""!!Failed to open input file!!""+Reset)","['fmt.Println(FgRed+""!!Failed to open input file!!""+Reset)']",['FUNCTION_CALL']
32,        return,['return'],['KEYWORD']
33,    },['}'],['OPERATOR']
34,"    if jsonFile, err = os.Create(outName); err != nil {","['if', 'jsonFile', ',', 'err', '=', 'os.Create(outName)', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
35,"        fmt.Println(FgRed+""!!Failed to create output file!!""+Reset)","['fmt.Println(FgRed+""!!Failed to create output file!!""+Reset)']",['FUNCTION_CALL']
36,        return,['return'],['KEYWORD']
37,    },['}'],['OPERATOR']
38,    reader := bufio.NewReader(objFile),"['reader', ':=', 'bufio.NewReader(objFile)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
39,    writer := bufio.NewWriter(jsonFile),"['writer', ':=', 'bufio.NewWriter(jsonFile)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
40,"    buffer := bytes.NewBuffer(make([]byte, 1024))","['buffer', ':=', 'bytes.NewBuffer(make([]byte, 1024))']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
41,    // Read the file in and parse out what we need,"['//', 'Read', 'the', 'file', 'in', 'and', 'parse', 'out', 'what', 'we', 'need']","['COMMENT', 'VB', 'DT', 'NN', 'IN', 'CC', 'VB', 'RP', 'WP', 'PRP', 'VBP']"
42,    for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
43,"        if part, prefix, err = reader.ReadLine(); err != nil {","['if', 'part', ',', 'prefix', ',', 'err', '=', 'reader.ReadLine()', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
44,            break,['break'],['KEYWORD']
45,        },['}'],['OPERATOR']
46,        buffer.Write(part),['buffer.Write(part)'],['FUNCTION_CALL']
47,        if !prefix {,"['if', '!', 'prefix', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
48,            line := buffer.String(),"['line', ':=', 'buffer.String()']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
49,"            if(strings.Contains(line, ""v "")) {","['if', '(', 'strings.Contains(line, ""v ""))', '{']","['KEYWORD', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR']"
50,"                Verts = append(Verts, parseVertex(line))","['Verts', '=', 'append', '(', 'Verts', ',', 'parseVertex', '(', 'line', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
51,"            } else if(strings.Contains(line, ""vt "")) {","['}', 'else', 'if', '(', 'strings.Contains(line, ""vt ""))', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR']"
52,"                Texs = append(Texs, parseTexCoord(line))","['Texs', '=', 'append', '(', 'Texs', ',', 'parseTexCoord', '(', 'line', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
53,"            } else if(strings.Contains(line, ""f "")) {","['}', 'else', 'if', '(', 'strings.Contains(line, ""f ""))', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR']"
54,"                Faces = append(Faces, parseFace(line, Verts, Texs))","['Faces', '=', 'append', '(', 'Faces', ',', 'parseFace', '(', 'line', ',', 'Verts', ',', 'Texs', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
55,"            } else if(strings.Contains(line, ""mtllib "")) {","['}', 'else', 'if', '(', 'strings.Contains(line, ""mtllib ""))', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR']"
56,"                mtlName := strings.Split(line, "" "")[1]","['mtlName', ':=', 'strings.Split(line, "" "")', '[', '1', ']']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
57,"                if mtlFile, err = os.Open(mtlName); err != nil {","['if', 'mtlFile', ',', 'err', '=', 'os.Open(mtlName)', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
58,"                    fmt.Printf(""--""+FgRed+""Failed to find material file: %s\n""+Reset, mtlName)","['fmt.Printf(""--""+FgRed+""Failed to find material file: %s\\n""+Reset, mtlName)']",['FUNCTION_CALL']
59,                    parseMaterial = false,"['parseMaterial', '=', 'false']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
60,                } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
61,                    parseMaterial = true,"['parseMaterial', '=', 'true']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
62,                },['}'],['OPERATOR']
63,            },['}'],['OPERATOR']
64,            buffer.Reset(),['buffer.Reset()'],['FUNCTION_CALL']
65,        },['}'],['OPERATOR']
66,    },['}'],['OPERATOR']
67,    if err == io.EOF {,"['if', 'err', '==', 'io', '.', 'EOF', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
68,        err = nil,"['err', '=', 'nil']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
69,    },['}'],['OPERATOR']
70,    objFile.Close(),['objFile.Close()'],['FUNCTION_CALL']
71,    // Write out the data,"['//', 'Write', 'out', 'the', 'data']","['COMMENT', 'VB', 'RP', 'DT', 'NNS']"
72,"    writer.WriteString(""{\""obj\"":[\n"");","['writer.WriteString(""{\\""obj\\"":[\\n"")', ';']","['FUNCTION_CALL', 'OPERATOR']"
73,    // Write out the verts,"['//', 'Write', 'out', 'the', 'verts']","['COMMENT', 'VB', 'RP', 'DT', 'NNS']"
74,"    writer.WriteString(""{\""vrt\"":[\n"");","['writer.WriteString(""{\\""vrt\\"":[\\n"")', ';']","['FUNCTION_CALL', 'OPERATOR']"
75,"    for i, vert := range Verts {","['for', 'i', ',', 'vert', ':=', 'range', 'Verts', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
76,        writer.WriteString(vert.String()),['writer.WriteString(vert.String())'],['FUNCTION_CALL']
77,"        if i < len(Verts) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Verts', ')', '-', '1', '{', 'writer.WriteString("","")', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR']"
78,"        writer.WriteString(""\n"")","['writer.WriteString(""\\n"")']",['FUNCTION_CALL']
79,    },['}'],['OPERATOR']
80,    // Write out the faces,"['//', 'Write', 'out', 'the', 'faces']","['COMMENT', 'VB', 'RP', 'DT', 'VBZ']"
81,"    writer.WriteString(""],\""fac\"":[\n"")","['writer.WriteString(""],\\""fac\\"":[\\n"")']",['FUNCTION_CALL']
82,"    for i, face := range Faces {","['for', 'i', ',', 'face', ':=', 'range', 'Faces', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
83,        writer.WriteString(face.String(true)),['writer.WriteString(face.String(true))'],['FUNCTION_CALL']
84,"        if i < len(Faces) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer.WriteString("","")', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR']"
85,"        writer.WriteString(""\n"")","['writer.WriteString(""\\n"")']",['FUNCTION_CALL']
86,    },['}'],['OPERATOR']
87,    // Write out the normals,"['//', 'Write', 'out', 'the', 'normals']","['COMMENT', 'VB', 'RP', 'DT', 'NNS']"
88,"    writer.WriteString(""],\""nrm\"":["")","['writer.WriteString(""],\\""nrm\\"":["")']",['FUNCTION_CALL']
89,"    for i, face := range Faces {","['for', 'i', ',', 'face', ':=', 'range', 'Faces', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
90,"        writer.WriteString(""["")","['writer.WriteString(""["")']",['FUNCTION_CALL']
91,"        for j, vert := range face.verts {","['for', 'j', ',', 'vert', ':=', 'range', 'face', '.', 'verts', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
92,            length := math.Sqrt((vert.X * vert.X) + (vert.Y * vert.Y) + (vert.Z * vert.Z)),"['length', ':=', 'math.Sqrt((vert.X * vert.X) + (vert.Y * vert.Y) + (vert.Z * vert.Z))']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
93,            x := vert.X / length,"['x', ':=', 'vert', '.', 'X', 'length']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER']"
94,            y := vert.Y / length,"['y', ':=', 'vert', '.', 'Y', 'length']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER']"
95,            z := vert.Z / length,"['z', ':=', 'vert', '.', 'Z', 'length']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER']"
96,"            normal := fmt.Sprintf(""[%f,%f,%f]"", x, y, z)","['normal', ':=', 'fmt.Sprintf(""[%f,%f,%f]"", x, y, z)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
97,            writer.WriteString(normal),['writer.WriteString(normal)'],['FUNCTION_CALL']
98,"            if(j < len(face.verts)-1) { writer.WriteString("","") }","['if', '(', 'j', '<', 'len', '(', 'face', '.', 'verts', ')-', '1', ')', '{', 'writer.WriteString("","")', '}']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR']"
99,        },['}'],['OPERATOR']
100,"        writer.WriteString(""]"")","['writer.WriteString(""]"")']",['FUNCTION_CALL']
101,"        //writer.WriteString(""[0, 1, 0]"")","['//', 'writer.WriteString(""[0,', '1,', '0]"")']","['COMMENT', 'NN', 'CD', 'CD']"
102,"        if i < len(Faces) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer.WriteString("","")', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR']"
103,"        writer.WriteString(""\n"")","['writer.WriteString(""\\n"")']",['FUNCTION_CALL']
104,    },['}'],['OPERATOR']
105,    // Write out the tex coords,"['//', 'Write', 'out', 'the', 'tex', 'coords']","['COMMENT', 'VB', 'RP', 'DT', 'NN', 'NNS']"
106,"    writer.WriteString(""],\""tex\"":["")","['writer.WriteString(""],\\""tex\\"":["")']",['FUNCTION_CALL']
107,"    for i, face := range Faces {","['for', 'i', ',', 'face', ':=', 'range', 'Faces', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
108,"        writer.WriteString(""["")","['writer.WriteString(""["")']",['FUNCTION_CALL']
109,        writer.WriteString(face.tex[0].String()),['writer.WriteString(face.tex[0].String())'],['FUNCTION_CALL']
110,"        writer.WriteString("","")","['writer.WriteString("","")']",['FUNCTION_CALL']
111,        writer.WriteString(face.tex[1].String()),['writer.WriteString(face.tex[1].String())'],['FUNCTION_CALL']
112,"        writer.WriteString("","")","['writer.WriteString("","")']",['FUNCTION_CALL']
113,        writer.WriteString(face.tex[2].String()),['writer.WriteString(face.tex[2].String())'],['FUNCTION_CALL']
114,"        writer.WriteString(""]"")","['writer.WriteString(""]"")']",['FUNCTION_CALL']
115,"        if i < len(Faces) - 1 { writer.WriteString("","") }","['if', 'i', '<', 'len', '(', 'Faces', ')', '-', '1', '{', 'writer.WriteString("","")', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR']"
116,"        writer.WriteString(""\n"")","['writer.WriteString(""\\n"")']",['FUNCTION_CALL']
117,    },['}'],['OPERATOR']
118,    // Close obj block,"['//', 'Close', 'obj', 'block']","['COMMENT', 'NNP', 'PRP', 'NN']"
119,"    writer.WriteString(""]}]"");","['writer.WriteString(""]}]"")', ';']","['FUNCTION_CALL', 'OPERATOR']"
120,    if parseMaterial {,"['if', 'parseMaterial', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR']"
121,"        writer.WriteString("",mat:[{"");","['writer.WriteString("",mat:[{"")', ';']","['FUNCTION_CALL', 'OPERATOR']"
122,        reader := bufio.NewReader(mtlFile),"['reader', ':=', 'bufio.NewReader(mtlFile)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
123,        // Read the file in and parse out what we need,"['//', 'Read', 'the', 'file', 'in', 'and', 'parse', 'out', 'what', 'we', 'need']","['COMMENT', 'VB', 'DT', 'NN', 'IN', 'CC', 'VB', 'RP', 'WP', 'PRP', 'VBP']"
124,        for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
125,"            if part, prefix, err = reader.ReadLine(); err != nil {","['if', 'part', ',', 'prefix', ',', 'err', '=', 'reader.ReadLine()', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
126,                break,['break'],['KEYWORD']
127,            },['}'],['OPERATOR']
128,            buffer.Write(part),['buffer.Write(part)'],['FUNCTION_CALL']
129,            if !prefix {,"['if', '!', 'prefix', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
130,                line := buffer.String(),"['line', ':=', 'buffer.String()']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
131,"                if(strings.Contains(line, ""map_Kd "")) {","['if', '(', 'strings.Contains(line, ""map_Kd ""))', '{']","['KEYWORD', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR']"
132,"                    parts := strings.Split(line, "" "")","['parts', ':=', 'strings.Split(line, "" "")']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
133,"                    entry := fmt.Sprintf(""\""t\"":\""%s\"","", parts[1])","['entry', ':=', 'fmt.Sprintf(""\\""t\\"":\\""%s\\"","", parts[1])']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
134,                    writer.WriteString(entry),['writer.WriteString(entry)'],['FUNCTION_CALL']
135,"                    width, height := 256, 256","['width', ',', 'height', ':=', '256', ',', '256']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL']"
136,                    var imageFile *os.File,"['var', 'imageFile', '*', 'os', '.', 'File']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
137,"                    if imageFile, err = os.Open(parts[1]); err != nil {","['if', 'imageFile', ',', 'err', '=', 'os.Open(parts[1])', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
138,"                        fmt.Printf(""--""+FgRed+""Failed to find %s, defaulting to 256x256""+Reset+""\n"", parts[1])","['fmt.Printf(""--""+FgRed+""Failed to find %s, defaulting to 256x256""+Reset+""\\n"", parts[1])']",['FUNCTION_CALL']
139,                        return,['return'],['KEYWORD']
140,                    } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
141,                        var config image.Config,"['var', 'config', 'image', '.', 'Config']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
142,                        imageReader := bufio.NewReader(imageFile),"['imageReader', ':=', 'bufio.NewReader(imageFile)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
143,"                        config, err = jpeg.DecodeConfig(imageReader)","['config', ',', 'err', '=', 'jpeg.DecodeConfig(imageReader)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
144,"                        width, height = config.Width, config.Height","['width', ',', 'height', '=', 'config', '.', 'Width', ',', 'config', '.', 'Height']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
145,"                        fmt.Printf(""--""+FgGreen+""Verifing""+Reset+"" that %s is %dpx x %dpx\n"", parts[1], width, height)","['fmt.Printf(""--""+FgGreen+""Verifing""+Reset+"" that %s is %dpx x %dpx\\n"", parts[1], width, height)']",['FUNCTION_CALL']
146,                    },['}'],['OPERATOR']
147,"                    size := fmt.Sprintf(""\""w\"":%d,\""h\"":%d,"", width, height)","['size', ':=', 'fmt.Sprintf(""\\""w\\"":%d,\\""h\\"":%d,"", width, height)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
148,                    writer.WriteString(size),['writer.WriteString(size)'],['FUNCTION_CALL']
149,"                } else if(strings.Contains(line, ""Kd "")) {","['}', 'else', 'if', '(', 'strings.Contains(line, ""Kd ""))', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR']"
150,"                    parts := strings.Split(line, "" "")","['parts', ':=', 'strings.Split(line, "" "")']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
151,"                    entry := fmt.Sprintf(""\""r\"":%s, \""g\"":%s, \""b\"":%s,"", parts[1], parts[2], parts[3])","['entry', ':=', 'fmt.Sprintf(""\\""r\\"":%s, \\""g\\"":%s, \\""b\\"":%s,"", parts[1], parts[2], parts[3])']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
152,                    writer.WriteString(entry),['writer.WriteString(entry)'],['FUNCTION_CALL']
153,                },['}'],['OPERATOR']
154,                buffer.Reset(),['buffer.Reset()'],['FUNCTION_CALL']
155,            },['}'],['OPERATOR']
156,        },['}'],['OPERATOR']
157,        if err == io.EOF {,"['if', 'err', '==', 'io', '.', 'EOF', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
158,            err = nil,"['err', '=', 'nil']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
159,        },['}'],['OPERATOR']
160,"        writer.WriteString(""\""res\"":100,\""uv\"":true}]"");","['writer.WriteString(""\\""res\\"":100,\\""uv\\"":true}]"")', ';']","['FUNCTION_CALL', 'OPERATOR']"
161,    },['}'],['OPERATOR']
162,    // Close json,"['//', 'Close', 'json']","['COMMENT', 'NNP', 'NN']"
163,"    writer.WriteString(""}"");","['writer.WriteString(""}"")', ';']","['FUNCTION_CALL', 'OPERATOR']"
164,    writer.Flush(),['writer.Flush()'],['FUNCTION_CALL']
165,    jsonFile.Close(),['jsonFile.Close()'],['FUNCTION_CALL']
166,"    fmt.Printf(""--""+FgGreen+""Exported""+Reset+"" %d faces with %d verticies\n"", len(Faces), len(Verts))","['fmt.Printf(""--""+FgGreen+""Exported""+Reset+"" %d faces with %d verticies\\n"", len(Faces), len(Verts))']",['FUNCTION_CALL']
167,    finished <- -1,"['finished', '<-', '-', '1']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
168,},['}'],['OPERATOR']
169,func main(){,"['func', 'main', '(){']","['KEYWORD', 'IDENTIFIER', 'OPERATOR']"
170,    // Verify we were called correctly,"['//', 'Verify', 'we', 'were', 'called', 'correctly']","['COMMENT', 'IN', 'PRP', 'VBD', 'VBN', 'RB']"
171,    if len(os.Args) < 2 {,"['if', 'len', '(', 'os', '.', 'Args', ')', '<', '2', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
172,"        fmt.Println(""Usage: go run objParser.go "");","['fmt.Println(""Usage: go run objParser.go "")', ';']","['FUNCTION_CALL', 'OPERATOR']"
173,        return,['return'],['KEYWORD']
174,    },['}'],['OPERATOR']
175,    files := len(os.Args),"['files', ':=', 'len', '(', 'os', '.', 'Args', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
176,    finished := make(chan int),"['finished', ':=', 'make', '(', 'chan', 'int', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
177,    now := time.Now(),"['now', ':=', 'time.Now()']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
178,    for i := 1; i < files; i++ {,"['for', 'i', ':=', '1', ';', 'i', '<', 'files', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
179,"        go parseFile(os.Args[i], finished)","['go', 'parseFile', '(', 'os', '.', 'Args', '[', 'i', '],', 'finished', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
180,    },['}'],['OPERATOR']
181,    for i := 1; i < files; i++ {,"['for', 'i', ':=', '1', ';', 'i', '<', 'files', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
182,        <- finished,"['<-', 'finished']","['OPERATOR', 'IDENTIFIER']"
183,    },['}'],['OPERATOR']
184,"    fmt.Printf(""Parsed %d files in %s\n"", files-1, time.Since(now))","['fmt.Printf(""Parsed %d files in %s\\n"", files-1, time.Since(now))']",['FUNCTION_CALL']
185,},['}'],['OPERATOR']
