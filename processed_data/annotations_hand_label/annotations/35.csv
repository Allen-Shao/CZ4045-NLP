,text,token,annotation
0,"I'm working on a little program with Go (v1.0.2). I'm trying to load lines into memory, which I can recall by index (the first column of a line).
To save space, I compress every line with zlib. Lines are grouped by blocks.

Items are loaded from a file. An item is represented by a line. This line has many properties separated by tabulation.

It's working just fine, but it's currently really slow. It took me almost 50 sec to just load a 40 Mb file! (Note that if I disable the ""compress"" part, it takes only 0.87 sec). I'm obviously doing something wrong, but I can't find what. Please note that I'm a beginner in this language.

Note: I'm stuck with Go 1.0.2 and can't update.

","[""I'm"", 'working', 'on', 'a', 'little', 'program', 'with', 'Go', '(v1.0.2).', ""I'm"", 'trying', 'to', 'load', 'lines', 'into', 'memory,', 'which', 'I', 'can', 'recall', 'by', 'index', '(the', 'first', 'column', 'of', 'a', 'line).', 'To', 'save', 'space,', 'I', 'compress', 'every', 'line', 'with', 'zlib.', 'Lines', 'are', 'grouped', 'by', 'blocks.', 'Items', 'are', 'loaded', 'from', 'a', 'file.', 'An', 'item', 'is', 'represented', 'by', 'a', 'line.', 'This', 'line', 'has', 'many', 'properties', 'separated', 'by', 'tabulation.', ""It's"", 'working', 'just', 'fine,', 'but', ""it's"", 'currently', 'really', 'slow.', 'It', 'took', 'me', 'almost', '50', 'sec', 'to', 'just', 'load', 'a', '40', 'Mb', 'file!', '(Note', 'that', 'if', 'I', 'disable', 'the', '""compress""', 'part,', 'it', 'takes', 'only', '0.87', 'sec).', ""I'm"", 'obviously', 'doing', 'something', 'wrong,', 'but', 'I', ""can't"", 'find', 'what.', 'Please', 'note', 'that', ""I'm"", 'a', 'beginner', 'in', 'this', 'language.', 'Note:', ""I'm"", 'stuck', 'with', 'Go', '1.0.2', 'and', ""can't"", 'update.']","['NNP', 'VBG', 'IN', 'DT', 'JJ', 'NN', 'IN', 'NNP', 'NNP', 'NNP', 'VBG', 'TO', 'VB', 'NNS', 'IN', 'NN', 'WDT', 'PRP', 'MD', 'VB', 'IN', 'NN', 'NNP', 'JJ', 'NN', 'IN', 'DT', 'NN', 'TO', 'VB', 'NN', 'PRP', 'VBP', 'DT', 'NN', 'IN', 'NN', 'NNS', 'VBP', 'VBN', 'IN', 'NN', 'NNS', 'VBP', 'VBN', 'IN', 'DT', 'NN', 'DT', 'NN', 'VBZ', 'VBN', 'IN', 'DT', 'NN', 'DT', 'NN', 'VBZ', 'JJ', 'NNS', 'VBN', 'IN', 'NN', 'NNP', 'VBG', 'RB', 'VBN', 'CC', 'VBP', 'RB', 'RB', 'VB', 'PRP', 'VBD', 'PRP', 'RB', 'CD', 'NN', 'TO', 'RB', 'VB', 'DT', 'CD', 'NNP', 'JJ', 'VBP', 'IN', 'IN', 'PRP', 'VBP', 'DT', 'NN', 'NN', 'PRP', 'VBZ', 'RB', 'CD', 'JJ', 'NNP', 'RB', 'VBG', 'NN', 'NNS', 'CC', 'PRP', 'VBP', 'VB', 'JJ', 'NNP', 'NN', 'WDT', 'VBZ', 'DT', 'NN', 'IN', 'DT', 'NN', 'NNP', 'NNP', 'VBD', 'IN', 'NNP', 'CD', 'CC', 'VB', 'JJ']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
3,"    ""bytes""","['""bytes""']",['STRING_LITERAL']
4,"    ""compress/zlib""","['""compress/zlib""']",['STRING_LITERAL']
5,"    ""encoding/json""","['""encoding/json""']",['STRING_LITERAL']
6,"    ""flag""","['""flag""']",['STRING_LITERAL']
7,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
8,"    ""gotwcc/mylib""","['""gotwcc/mylib""']",['STRING_LITERAL']
9,"    ""io""","['""io""']",['STRING_LITERAL']
10,"    ""net/http""","['""net/http""']",['STRING_LITERAL']
11,"    ""os""","['""os""']",['STRING_LITERAL']
12,),[')'],['OPERATOR']
13,type Block struct {,"['type', 'Block', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
14,    data []byte,"['data', '[]', 'byte']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
15,},['}'],['OPERATOR']
16,type Row struct {,"['type', 'Row', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
17,"    offset, len uint32","['offset', ',', 'len', 'uint32']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER']"
18,    block       *Block,"['block', '*', 'Block']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
19,},['}'],['OPERATOR']
20,type Cache struct {,"['type', 'Cache', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
21,    blocks          []Block,"['blocks', '[]', 'Block']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
22,    indexes         map[string]*Row,"['indexes', 'map', '[', 'string', ']*', 'Row']","['IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
23,    enable_compress bool,"['enable_compress', 'bool']","['IDENTIFIER', 'IDENTIFIER']"
24,    maxRowGroup     uint,"['maxRowGroup', 'uint']","['IDENTIFIER', 'IDENTIFIER']"
25,},['}'],['OPERATOR']
26,func (this *Cache) dump() {,"['func', '(', 'this', '*', 'Cache', ')', 'dump', '()', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
27,"    for key, value := range this.indexes {","['for', 'key', ',', 'value', ':=', 'range', 'this', '.', 'indexes', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
28,"        fmt.Printf(""[%s] = \""%s\""\n"", key, value.block)","['fmt.Printf(""[%s] = \\""%s\\""\\n"", key, value.block)']",['FUNCTION_CALL']
29,    },['}'],['OPERATOR']
30,},['}'],['OPERATOR']
31,func (this *Cache) search(item_id string) string {,"['func', '(', 'this', '*', 'Cache', ')', 'search', '(', 'item_id', 'string', ')', 'string', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
32,    row := this.indexes[item_id],"['row', ':=', 'this', '.', 'indexes', '[', 'item_id', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
33,    if row == nil {,"['if', 'row', '==', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
34,"        return ""(Not found)""","['return', '""(Not found)""']","['KEYWORD', 'STRING_LITERAL']"
35,    },['}'],['OPERATOR']
36,    block := this.uncompress(row.block.data),"['block', ':=', 'this.uncompress(row.block.data)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
37,    slice := block[row.offset : row.offset+row.len],"['slice', ':=', 'block', '[', 'row', '.', 'offset', ':', 'row', '.', 'offset', '+', 'row', '.', 'len', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
38,    return string(slice),"['return', 'string', '(', 'slice', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
39,},['}'],['OPERATOR']
40,func (this *Cache) compress(data []byte) []byte {,"['func', '(', 'this', '*', 'Cache', ')', 'compress', '(', 'data', '[]', 'byte', ')', '[]', 'byte', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
41,    if !this.enable_compress {,"['if', '!', 'this', '.', 'enable_compress', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
42,        return data,"['return', 'data']","['KEYWORD', 'IDENTIFIER']"
43,    },['}'],['OPERATOR']
44,    var b bytes.Buffer,"['var', 'b', 'bytes', '.', 'Buffer']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
45,    w := zlib.NewWriter(&b),"['w', ':=', 'zlib.NewWriter(&b)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
46,    w.Write(data),['w.Write(data)'],['FUNCTION_CALL']
47,    w.Close(),['w.Close()'],['FUNCTION_CALL']
48,    return b.Bytes(),"['return', 'b.Bytes()']","['KEYWORD', 'FUNCTION_CALL']"
49,},['}'],['OPERATOR']
50,func (this *Cache) uncompress(data []byte) []byte {,"['func', '(', 'this', '*', 'Cache', ')', 'uncompress', '(', 'data', '[]', 'byte', ')', '[]', 'byte', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
51,    if !this.enable_compress {,"['if', '!', 'this', '.', 'enable_compress', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
52,        return data,"['return', 'data']","['KEYWORD', 'IDENTIFIER']"
53,    },['}'],['OPERATOR']
54,    var res bytes.Buffer,"['var', 'res', 'bytes', '.', 'Buffer']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
55,    b := bytes.NewReader(data),"['b', ':=', 'bytes.NewReader(data)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
56,"    r, err := zlib.NewReader(b)","['r', ',', 'err', ':=', 'zlib.NewReader(b)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
57,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
58,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
59,    },['}'],['OPERATOR']
60,"    io.Copy(&res, r)","['io.Copy(&res, r)']",['FUNCTION_CALL']
61,    r.Close(),['r.Close()'],['FUNCTION_CALL']
62,    return res.Bytes(),"['return', 'res.Bytes()']","['KEYWORD', 'FUNCTION_CALL']"
63,},['}'],['OPERATOR']
64,func (this *Cache) loadFile(s string) {,"['func', '(', 'this', '*', 'Cache', ')', 'loadFile', '(', 's', 'string', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
65,    type TempRowBuf struct {,"['type', 'TempRowBuf', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
66,        item_id     []byte,"['item_id', '[]', 'byte']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
67,"        offset, len uint32","['offset', ',', 'len', 'uint32']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER']"
68,    },['}'],['OPERATOR']
69,"    file, err := os.Open(s)","['file', ',', 'err', ':=', 'os.Open(s)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
70,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
71,        panic(err.Error()),"['panic', '(', 'err.Error())']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
72,    },['}'],['OPERATOR']
73,    defer file.Close(),"['defer', 'file.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
74,    scanner := mybufio.NewScanner(file),"['scanner', ':=', 'mybufio.NewScanner(file)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
75,    scanner.Split(mybufio.ScanLines),['scanner.Split(mybufio.ScanLines)'],['FUNCTION_CALL']
76,    var tmp_buf bytes.Buffer,"['var', 'tmp_buf', 'bytes', '.', 'Buffer']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
77,    var buffer bytes.Buffer,"['var', 'buffer', 'bytes', '.', 'Buffer']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
78,    var tmp_list []TempRowBuf,"['var', 'tmp_list', '[]', 'TempRowBuf']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
79,    this.indexes = make(map[string]*Row),"['this', '.', 'indexes', '=', 'make', '(', 'map', '[', 'string', ']*', 'Row', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
80,    var offset uint32 = 0,"['var', 'offset', 'uint32', '=', '0']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OCTAL_LITERAL']"
81,    nb := this.maxRowGroup,"['nb', ':=', 'this', '.', 'maxRowGroup']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
82,    for scanner.Scan() {,"['for', 'scanner.Scan()', '{']","['KEYWORD', 'FUNCTION_CALL', 'OPERATOR']"
83,        nb--,"['nb', '--']","['IDENTIFIER', 'OPERATOR']"
84,        tmp_buf.Reset(),['tmp_buf.Reset()'],['FUNCTION_CALL']
85,        tmp_buf.Write(scanner.Bytes()),['tmp_buf.Write(scanner.Bytes())'],['FUNCTION_CALL']
86,        line := tmp_buf.Bytes(),"['line', ':=', 'tmp_buf.Bytes()']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
87,"        item_id, _ := tmp_buf.ReadBytes('\t')","['item_id', ',', '_', ':=', ""tmp_buf.ReadBytes('\\t')""]","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
88,        item_id = item_id[0 : len(item_id)-1],"['item_id', '=', 'item_id', '[', '0', ':', 'len', '(', 'item_id', ')-', '1', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OCTAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
89,        size := uint32(len(line)),"['size', ':=', 'uint32', '(', 'len', '(', 'line', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
90,        buffer.Write(line),['buffer.Write(line)'],['FUNCTION_CALL']
91,"        tmp_list = append(tmp_list, TempRowBuf{item_id, offset, size})","['tmp_list', '=', 'append', '(', 'tmp_list', ',', 'TempRowBuf', '{', 'item_id', ',', 'offset', ',', 'size', '})']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
92,        offset += size,"['offset', '+=', 'size']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
93,        if nb <= 0 {,"['if', 'nb', '<=', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OCTAL_LITERAL', 'OPERATOR']"
94,            compressed := this.compress(buffer.Bytes()),"['compressed', ':=', 'this.compress(buffer.Bytes())']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
95,"            buff := make([]byte, len(compressed))","['buff', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'compressed', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
96,"            copy(buff, compressed)","['copy', '(', 'buff', ',', 'compressed', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
97,            var block *Block = &Block{buff},"['var', 'block', '*', 'Block', '=', '&', 'Block', '{', 'buff', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
98,"            for _, tmp := range tmp_list {","['for', '_', ',', 'tmp', ':=', 'range', 'tmp_list', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
99,"                this.indexes[string(tmp.item_id)] = &Row{tmp.offset, tmp.len, block}","['this', '.', 'indexes', '[', 'string', '(', 'tmp', '.', 'item_id', ')]', '=', '&', 'Row', '{', 'tmp', '.', 'offset', ',', 'tmp', '.', 'len', ',', 'block', '}']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
100,            },['}'],['OPERATOR']
101,            nb = this.maxRowGroup,"['nb', '=', 'this', '.', 'maxRowGroup']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
102,            offset = 0,"['offset', '=', '0']","['IDENTIFIER', 'OPERATOR', 'OCTAL_LITERAL']"
103,            tmp_list = nil,"['tmp_list', '=', 'nil']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
104,            buffer.Reset(),['buffer.Reset()'],['FUNCTION_CALL']
105,        },['}'],['OPERATOR']
106,    },['}'],['OPERATOR']
107,    if nb > 0 {,"['if', 'nb', '>', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OCTAL_LITERAL', 'OPERATOR']"
108,        compressed := this.compress(buffer.Bytes()),"['compressed', ':=', 'this.compress(buffer.Bytes())']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
109,"        buff := make([]byte, len(compressed))","['buff', ':=', 'make', '([]', 'byte', ',', 'len', '(', 'compressed', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
110,"        copy(buff, compressed)","['copy', '(', 'buff', ',', 'compressed', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
111,        var block *Block = &Block{buff},"['var', 'block', '*', 'Block', '=', '&', 'Block', '{', 'buff', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
112,"        for _, tmp := range tmp_list {","['for', '_', ',', 'tmp', ':=', 'range', 'tmp_list', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
113,"            this.indexes[string(tmp.item_id)] = &Row{tmp.offset, tmp.len, block}","['this', '.', 'indexes', '[', 'string', '(', 'tmp', '.', 'item_id', ')]', '=', '&', 'Row', '{', 'tmp', '.', 'offset', ',', 'tmp', '.', 'len', ',', 'block', '}']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
114,        },['}'],['OPERATOR']
115,    },['}'],['OPERATOR']
116,},['}'],['OPERATOR']
117,"func wsCacheHandler(cache *Cache, writer http.ResponseWriter, request *http.Request) {","['func', 'wsCacheHandler', '(', 'cache', '*', 'Cache', ',', 'writer', 'http', '.', 'ResponseWriter', ',', 'request', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
118,    var value map[string]string = make(map[string]string),"['var', 'value', 'map', '[', 'string', ']', 'string', '=', 'make', '(', 'map', '[', 'string', ']', 'string', ')']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
119,"    item_id := request.FormValue(""item_id"")","['item_id', ':=', 'request.FormValue(""item_id"")']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
120,"    value[""item_id""] = item_id","['value', '[', '""item_id""', ']', '=', 'item_id']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
121,"    value[""raw""] = cache.search(item_id)","['value', '[', '""raw""', ']', '=', 'cache.search(item_id)']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'OPERATOR', 'FUNCTION_CALL']"
122,"    jsonResp, err := json.Marshal(value)","['jsonResp', ',', 'err', ':=', 'json.Marshal(value)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
123,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
124,"        fmt.Println(""error:"", err)","['fmt.Println(""error:"", err)']",['FUNCTION_CALL']
125,    } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
126,"        fmt.Fprintf(writer, ""%s"", string(jsonResp))","['fmt.Fprintf(writer, ""%s"", string(jsonResp))']",['FUNCTION_CALL']
127,    },['}'],['OPERATOR']
128,},['}'],['OPERATOR']
129,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
130,"    filename := flag.String(""data"", ""default.txt"", ""The data filename"")","['filename', ':=', 'flag.String(""data"", ""default.txt"", ""The data filename"")']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
131,"    no_http := flag.Bool(""no-http"", false, ""Do not start an http server"")","['no_http', ':=', 'flag.Bool(""no-http"", false, ""Do not start an http server"")']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
132,"    dumpMap := flag.Bool(""dump"", false, ""If we should dump the map to stdout"")","['dumpMap', ':=', 'flag.Bool(""dump"", false, ""If we should dump the map to stdout"")']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
133,"    noCompression := flag.Bool(""no-compress"", false, ""Disable compression"")","['noCompression', ':=', 'flag.Bool(""no-compress"", false, ""Disable compression"")']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
134,"    maxRowGroup := flag.Uint(""max-row-group"", 100, ""How much line to group when doing compression"")","['maxRowGroup', ':=', 'flag.Uint(""max-row-group"", 100, ""How much line to group when doing compression"")']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
135,    flag.Parse(),['flag.Parse()'],['FUNCTION_CALL']
136,    var cache Cache,"['var', 'cache', 'Cache']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
137,    cache.enable_compress = !*noCompression,"['cache', '.', 'enable_compress', '=', '!*', 'noCompression']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
138,    cache.maxRowGroup = *maxRowGroup,"['cache', '.', 'maxRowGroup', '=', '*', 'maxRowGroup']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
139,    cache.loadFile(*filename),['cache.loadFile(*filename)'],['FUNCTION_CALL']
140,    if *dumpMap {,"['if', '*', 'dumpMap', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
141,        cache.dump(),['cache.dump()'],['FUNCTION_CALL']
142,"        fmt.Println(cache.search(""100001""))","['fmt.Println(cache.search(""100001""))']",['FUNCTION_CALL']
143,"        fmt.Println(cache.search(""100002""))","['fmt.Println(cache.search(""100002""))']",['FUNCTION_CALL']
144,"        fmt.Println(cache.search(""100003""))","['fmt.Println(cache.search(""100003""))']",['FUNCTION_CALL']
145,"        fmt.Println(cache.search(""100004""))","['fmt.Println(cache.search(""100004""))']",['FUNCTION_CALL']
146,"        fmt.Println(cache.search(""100005""))","['fmt.Println(cache.search(""100005""))']",['FUNCTION_CALL']
147,"        fmt.Println(cache.search(""100006""))","['fmt.Println(cache.search(""100006""))']",['FUNCTION_CALL']
148,"        fmt.Println(cache.search(""100007""))","['fmt.Println(cache.search(""100007""))']",['FUNCTION_CALL']
149,"        fmt.Println(cache.search(""100008""))","['fmt.Println(cache.search(""100008""))']",['FUNCTION_CALL']
150,"        fmt.Println(cache.search(""100009""))","['fmt.Println(cache.search(""100009""))']",['FUNCTION_CALL']
151,"        fmt.Println(cache.search(""100010""))","['fmt.Println(cache.search(""100010""))']",['FUNCTION_CALL']
152,    },['}'],['OPERATOR']
153,    if !*no_http {,"['if', '!*', 'no_http', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
154,"        http.HandleFunc(""/"", func(writer http.ResponseWriter, request *http.Request) {","['http.HandleFunc(""/"", func(writer http.ResponseWriter, request *http.Request)', '{']","['FUNCTION_CALL', 'OPERATOR']"
155,"            wsCacheHandler(&cache, writer, request)","['wsCacheHandler', '(&', 'cache', ',', 'writer', ',', 'request', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
156,        }),['})'],['OPERATOR']
157,"        fmt.Println(""Cache loaded, now listening on port 8585..."")","['fmt.Println(""Cache loaded, now listening on port 8585..."")']",['FUNCTION_CALL']
158,"        http.ListenAndServe("":8585"", nil)","['http.ListenAndServe("":8585"", nil)']",['FUNCTION_CALL']
159,    },['}'],['OPERATOR']
160,},['}'],['OPERATOR']
161,"

This is the test file I use (I'm not pasting the 40 Mo file here :p):

data.txt:

","['This', 'is', 'the', 'test', 'file', 'I', 'use', ""(I'm"", 'not', 'pasting', 'the', '40', 'Mo', 'file', 'here', ':p):', 'data.txt:']","['DT', 'VBZ', 'DT', 'NN', 'NN', 'PRP', 'VBP', 'JJ', 'RB', 'VBG', 'DT', 'CD', 'NNP', 'NN', 'RB', 'VBZ', 'NN']"
162,100001  bar,"['100001', 'bar']","['DECIMAL_LITERAL', 'IDENTIFIER']"
163,100002  foo,"['100002', 'foo']","['DECIMAL_LITERAL', 'IDENTIFIER']"
164,100003  bob,"['100003', 'bob']","['DECIMAL_LITERAL', 'IDENTIFIER']"
165,100004  nuts,"['100004', 'nuts']","['DECIMAL_LITERAL', 'IDENTIFIER']"
166,100005  gogopowran,"['100005', 'go', 'go', 'powran']","['DECIMAL_LITERAL', 'KEYWORD', 'KEYWORD', 'IDENTIFIER']"
167,100006  green,"['100006', 'green']","['DECIMAL_LITERAL', 'IDENTIFIER']"
168,100007  test,"['100007', 'test']","['DECIMAL_LITERAL', 'IDENTIFIER']"
169,100008  alongwordwithlotofletters,"['100008', 'alongwordwithlotofletters']","['DECIMAL_LITERAL', 'IDENTIFIER']"
170,100009  ,['100009'],['DECIMAL_LITERAL']
171,100010  space space space,"['100010', 'space', 'space', 'space']","['DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
172,"

I launch my application like this:

","['I', 'launch', 'my', 'application', 'like', 'this:']","['PRP', 'VBP', 'PRP$', 'NN', 'IN', 'NN']"
173,time ./mybin -data=data.txt -no-http -no-compress => ok (0.6 sec to load),"['time', './mybin', '-', 'data', '=', 'data', '.', 'txt', '-', 'no', '-', 'http', '-', 'no', '-', 'compress', '=>', 'ok', '(', '0', '.', '6', 'sec', 'to', 'load', ')']","['IDENTIFIER', 'DIRECTORY', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OCTAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
174,time ./mybin -data=data.txt -no-http --max_row_group=100 => slow (12.1 sec to load),"['time', './mybin', '-', 'data', '=', 'data', '.', 'txt', '-', 'no', '-', 'http', '--', 'max_row_group', '=', '100', '=>', 'slow', '(', '12', '.', '1', 'sec', 'to', 'load', ')']","['IDENTIFIER', 'DIRECTORY', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
175,time ./mybin -data=data.txt -no-http --max_row_group=1000 => still slow (10.9 sec to load),"['time', './mybin', '-', 'data', '=', 'data', '.', 'txt', '-', 'no', '-', 'http', '--', 'max_row_group', '=', '1000', '=>', 'still', 'slow', '(', '10', '.', '9', 'sec', 'to', 'load', ')']","['IDENTIFIER', 'DIRECTORY', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
176,time ./mybin -data=data.txt -no-http --max_row_group=10000 => still slow (10.6 sec to load),"['time', './mybin', '-', 'data', '=', 'data', '.', 'txt', '-', 'no', '-', 'http', '--', 'max_row_group', '=', '10000', '=>', 'still', 'slow', '(', '10', '.', '6', 'sec', 'to', 'load', ')']","['IDENTIFIER', 'DIRECTORY', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
177,"

Edit: Apply go fmt on the code. Add an option to choose the size of the packing. Test 3 different sizes.
","['Edit:', 'Apply', 'go', 'fmt', 'on', 'the', 'code.', 'Add', 'an', 'option', 'to', 'choose', 'the', 'size', 'of', 'the', 'packing.', 'Test', '3', 'different', 'sizes.']","['NNP', 'NNP', 'VBP', 'NN', 'IN', 'DT', 'NN', 'NNP', 'DT', 'NN', 'TO', 'VB', 'DT', 'NN', 'IN', 'DT', 'JJ', 'NNP', 'CD', 'JJ', 'NN']"
