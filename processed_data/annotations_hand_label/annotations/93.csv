,text,token,annotation
0,"First of all I would like to discuss the ""impossible"" part.

","['First', 'of', 'all', 'I', 'would', 'like', 'to', 'discuss', 'the', '""impossible""', 'part.']","['NNP', 'IN', 'DT', 'PRP', 'MD', 'VB', 'TO', 'VB', 'DT', 'NN', 'NN']"
1,"import ""fmt""","['import', '""fmt""']","['KEYWORD', 'STRING_LITERAL']"
2,type Animal interface {,"['type', 'Animal', 'interface', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
3,    Say() string,"['Say', '()', 'string']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
4,},['}'],['PUNCTUATION']
5,type Cat struct {},"['type', 'Cat', 'struct', '{}']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
6,func (cat Cat) Say() string {,"['func', '(', 'cat', 'Cat', ')', 'Say', '()', 'string', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
7,"    return ""miao""","['return', '""miao""']","['KEYWORD', 'STRING_LITERAL']"
8,},['}'],['PUNCTUATION']
9,type Sheep struct {},"['type', 'Sheep', 'struct', '{}']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
10,func (sheep Sheep) Say() string {,"['func', '(', 'sheep', 'Sheep', ')', 'Say', '()', 'string', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
11,"    return ""bahh""","['return', '""bahh""']","['KEYWORD', 'STRING_LITERAL']"
12,},['}'],['PUNCTUATION']
13,type Cow struct {},"['type', 'Cow', 'struct', '{}']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
14,func (cow Cow) Say() string {,"['func', '(', 'cow', 'Cow', ')', 'Say', '()', 'string', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
15,"    return ""moo""","['return', '""moo""']","['KEYWORD', 'STRING_LITERAL']"
16,},['}'],['PUNCTUATION']
17,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
18,    cat := Cat{},"['cat', ':=', 'Cat', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
19,    sheep := Sheep{},"['sheep', ':=', 'Sheep', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
20,    cow := Cow{},"['cow', ':=', 'Cow', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
21,    fmt.Println(cat.Say()),['fmt.Println(cat.Say())'],['FUNCTION_CALL']
22,    fmt.Println(sheep.Say()),['fmt.Println(sheep.Say())'],['FUNCTION_CALL']
23,    fmt.Println(cow.Say()),['fmt.Println(cow.Say())'],['FUNCTION_CALL']
24,},['}'],['PUNCTUATION']
25,"

This will work exactly as you would expect. So there is a polymorphism in terms of ""different structs responding differently to same method"".

The intention of Exhibit#1 demonstrates that what Go does is actually similar to Java castings before @Overrides.

Just add the following method to the first example and see how that will work:

","['This', 'will', 'work', 'exactly', 'as', 'you', 'would', 'expect.', 'So', 'there', 'is', 'a', 'polymorphism', 'in', 'terms', 'of', '""different', 'structs', 'responding', 'differently', 'to', 'same', 'method"".', 'The', 'intention', 'of', 'Exhibit#1', 'demonstrates', 'that', 'what', 'Go', 'does', 'is', 'actually', 'similar', 'to', 'Java', 'castings', 'before', '@Overrides.', 'Just', 'add', 'the', 'following', 'method', 'to', 'the', 'first', 'example', 'and', 'see', 'how', 'that', 'will', 'work:']","['DT', 'MD', 'VB', 'RB', 'IN', 'PRP', 'MD', 'VB', 'RB', 'EX', 'VBZ', 'DT', 'NN', 'IN', 'NNS', 'IN', 'NN', 'NNS', 'VBG', 'RB', 'TO', 'JJ', 'PDT', 'DT', 'NN', 'IN', 'NNP', 'VBZ', 'IN', 'WP', 'NNP', 'VBZ', 'VBZ', 'RB', 'JJ', 'TO', 'NNP', 'NNS', 'IN', 'NN', 'NNP', 'VB', 'DT', 'JJ', 'NN', 'TO', 'DT', 'JJ', 'NN', 'CC', 'VB', 'WRB', 'DT', 'MD', 'VB']"
26,func (this B) strange() {,"['func', '(', 'this', 'B', ')', 'strange', '()', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
27,"    fmt.Printf(""my string is %q\n"", this.str())","['fmt.Printf(""my string is %q\\n"", this.str())']",['FUNCTION_CALL']
28,},['}'],['PUNCTUATION']
