,text,token,annotation
0,"You need to account for the number of bytes returned from ReadAt, otherwise the last fileBuffer you send will have extra garbage bytes.

Example:

","['You', 'need', 'to', 'account', 'for', 'the', 'number', 'of', 'bytes', 'returned', 'from', 'ReadAt,', 'otherwise', 'the', 'last', 'fileBuffer', 'you', 'send', 'will', 'have', 'extra', 'garbage', 'bytes.', 'Example:']","['PRP', 'VBP', 'TO', 'VB', 'IN', 'DT', 'NN', 'IN', 'NNS', 'VBN', 'IN', 'NNP', 'RB', 'DT', 'JJ', 'NN', 'PRP', 'VBP', 'MD', 'VB', 'JJ', 'NN', 'NN', 'NNP']"
1,"n, err := file.ReadAt(fileBuffer, currentByte)","['n', ',', 'err', ':=', 'file.ReadAt(fileBuffer, currentByte)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
2,connection.Write(fileBuffer[:n]),['connection.Write(fileBuffer[:n])'],['FUNCTION_CALL']
3,"

Also ",['Also'],['RB']
4,"bytes.Trim(fileBuffer, ""\x00"")","['bytes.Trim(fileBuffer, ""\\x00"")']",['FUNCTION_CALL']
5," will destroy almost any binary file since usually they use null bytes to fill space.

Also the proper way of doing this is just using io.Copy:

","['will', 'destroy', 'almost', 'any', 'binary', 'file', 'since', 'usually', 'they', 'use', 'null', 'bytes', 'to', 'fill', 'space.', 'Also', 'the', 'proper', 'way', 'of', 'doing', 'this', 'is', 'just', 'using', 'io.Copy:']","['MD', 'VB', 'RB', 'DT', 'JJ', 'NN', 'IN', 'RB', 'PRP', 'VBP', 'JJ', 'NNS', 'TO', 'VB', 'NN', 'RB', 'DT', 'JJ', 'NN', 'IN', 'VBG', 'DT', 'VBZ', 'RB', 'VBG', 'NN']"
6,"file, err := os.Open(strings.TrimSpace(fileName)) // For read access.","['file', ',', 'err', ':=', 'os.Open(strings.TrimSpace(fileName))', '//', 'For', 'read', 'access.']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'COMMENT', 'IN', 'JJ', 'NN']"
7,if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
8,    log.Fatal(err),['log.Fatal(err)'],['FUNCTION_CALL']
9,},['}'],['PUNCTUATION']
10,defer file.Close() // make sure to close the file even if we panic.,"['defer', 'file.Close()', '//', 'make', 'sure', 'to', 'close', 'the', 'file', 'even', 'if', 'we', 'panic.']","['IDENTIFIER', 'FUNCTION_CALL', 'COMMENT', 'VB', 'JJ', 'TO', 'VB', 'DT', 'NN', 'RB', 'IN', 'PRP', 'VBP']"
11,"n, err = io.Copy(connection, file)","['n', ',', 'err', '=', 'io.Copy(connection, file)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
12,if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
13,    log.Fatal(err),['log.Fatal(err)'],['FUNCTION_CALL']
14,},['}'],['PUNCTUATION']
15,"fmt.Println(n, ""bytes sent"")","['fmt.Println(n, ""bytes sent"")']",['FUNCTION_CALL']
