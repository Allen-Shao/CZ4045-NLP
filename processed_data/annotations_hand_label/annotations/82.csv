,text,token,annotation
0,"Benchmarks are hard to get right, and it's easy to think you're measuring one thing (cost of goroutines/threads) when you're measuring something else. I think that's what's happening here.

For example, the inner loop in the threads/goroutines aren't the same in the two programs. Rewriting the goroutine to be more like the java code:

","['Benchmarks', 'are', 'hard', 'to', 'get', 'right,', 'and', ""it's"", 'easy', 'to', 'think', ""you're"", 'measuring', 'one', 'thing', '(cost', 'of', 'goroutines/threads)', 'when', ""you're"", 'measuring', 'something', 'else.', 'I', 'think', ""that's"", ""what's"", 'happening', 'here.', 'For', 'example,', 'the', 'inner', 'loop', 'in', 'the', 'threads/goroutines', ""aren't"", 'the', 'same', 'in', 'the', 'two', 'programs.', 'Rewriting', 'the', 'goroutine', 'to', 'be', 'more', 'like', 'the', 'java', 'code:']","['NNS', 'VBP', 'JJ', 'TO', 'VB', 'JJ', 'CC', 'JJ', 'JJ', 'TO', 'VB', 'RB', 'VBG', 'CD', 'NN', 'NN', 'IN', 'NN', 'WRB', 'NN', 'VBG', 'NN', 'NN', 'PRP', 'VBP', 'JJ', 'NN', 'VBG', 'NN', 'IN', 'WP', 'DT', 'NN', 'NN', 'IN', 'DT', 'NNS', 'VBP', 'DT', 'JJ', 'IN', 'DT', 'CD', 'NN', 'VBG', 'DT', 'NN', 'TO', 'VB', 'RBR', 'IN', 'DT', 'NN', 'NN']"
1,for j := 0; j != 10*1000*1000; j++ {},"['for', 'j', ':=', '0', ';', 'j', '!=', '10', '*', '1000', '*', '1000', ';', 'j', '++', '{}']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'PUNCTUATION']"
2,chanSignal <- true,"['chan', 'Signal', '<-', 'true']","['KEYWORD', 'IDENTIFIER', 'CHANNEL_OPERATOR', 'BOOLEAN_LITERAL']"
3,"

results in a 2x speedup for the go.

That still leaves a significant performance gap when I run it on my machine -- the go code takes 663ms with 1000 goroutines, and the java code 55ms with 1000 threads. Perhaps what's happening is that the JVM is JITting away the useless loop in the run method of the thread after it's been executed a few times.

Here's some evidence that the cost of goroutines aren't relevant. Just executing the code serially gives a runtime of 2.55 seconds on my machine:

","['results', 'in', 'a', '2x', 'speedup', 'for', 'the', 'go.', 'That', 'still', 'leaves', 'a', 'significant', 'performance', 'gap', 'when', 'I', 'run', 'it', 'on', 'my', 'machine', '--', 'the', 'go', 'code', 'takes', '663ms', 'with', '1000', 'goroutines,', 'and', 'the', 'java', 'code', '55ms', 'with', '1000', 'threads.', 'Perhaps', ""what's"", 'happening', 'is', 'that', 'the', 'JVM', 'is', 'JITting', 'away', 'the', 'useless', 'loop', 'in', 'the', 'run', 'method', 'of', 'the', 'thread', 'after', ""it's"", 'been', 'executed', 'a', 'few', 'times.', ""Here's"", 'some', 'evidence', 'that', 'the', 'cost', 'of', 'goroutines', ""aren't"", 'relevant.', 'Just', 'executing', 'the', 'code', 'serially', 'gives', 'a', 'runtime', 'of', '2.55', 'seconds', 'on', 'my', 'machine:']","['NNS', 'IN', 'DT', 'CD', 'NN', 'IN', 'DT', 'NN', 'WDT', 'RB', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'WRB', 'PRP', 'VBP', 'PRP', 'IN', 'PRP$', 'NN', ':', 'DT', 'JJ', 'NN', 'VBZ', 'CD', 'IN', 'CD', 'NN', 'CC', 'DT', 'NN', 'NN', 'CD', 'IN', 'CD', 'NN', 'RB', 'JJ', 'NN', 'VBZ', 'IN', 'DT', 'NNP', 'VBZ', 'VBG', 'RB', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NN', 'NN', 'IN', 'DT', 'NN', 'IN', 'NN', 'VBN', 'VBN', 'DT', 'JJ', 'NN', 'NNP', 'DT', 'NN', 'IN', 'DT', 'NN', 'IN', 'NNS', 'JJ', 'VB', 'NNP', 'VBG', 'DT', 'NN', 'RB', 'VBZ', 'DT', 'NN', 'IN', 'CD', 'NNS', 'IN', 'PRP$', 'NN']"
4,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
5,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
6,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
7,"    ""time""","['""time""']",['STRING_LITERAL']
8,),[')'],['PUNCTUATION']
9,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
10,    goroutineNum := 1000,"['go', 'routineNum', ':=', '1000']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
11,    startTime := time.Now(),"['startTime', ':=', 'time.Now()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
12,    for i := 0; i < goroutineNum; i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', 'go', 'routineNum', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'PUNCTUATION']"
13,        for j := 0; j < 1000*1000*10; j++ {,"['for', 'j', ':=', '0', ';', 'j', '<', '1000', '*', '1000', '*', '10', ';', 'j', '++', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'PUNCTUATION']"
14,        },['}'],['PUNCTUATION']
15,    },['}'],['PUNCTUATION']
16,    fmt.Println(time.Since(startTime)),['fmt.Println(time.Since(startTime))'],['FUNCTION_CALL']
17,},['}'],['PUNCTUATION']
18,"

The goroutine-based version of this code, on 4 processors, runs in 663ms, which is only slightly more than one quarter of the 2.55 seconds the serial code takes (on my machine). So this is really quite efficient parallelism, and the cost of the goroutines is negligible.

So mostly I think you're benchmarking how efficiently java and go execute empty loops. It looks like this is a perfect use-case for JIT, and you're seeing that in the excellent run-time performance of the Java code.
","['The', 'goroutine-based', 'version', 'of', 'this', 'code,', 'on', '4', 'processors,', 'runs', 'in', '663ms,', 'which', 'is', 'only', 'slightly', 'more', 'than', 'one', 'quarter', 'of', 'the', '2.55', 'seconds', 'the', 'serial', 'code', 'takes', '(on', 'my', 'machine).', 'So', 'this', 'is', 'really', 'quite', 'efficient', 'parallelism,', 'and', 'the', 'cost', 'of', 'the', 'goroutines', 'is', 'negligible.', 'So', 'mostly', 'I', 'think', ""you're"", 'benchmarking', 'how', 'efficiently', 'java', 'and', 'go', 'execute', 'empty', 'loops.', 'It', 'looks', 'like', 'this', 'is', 'a', 'perfect', 'use-case', 'for', 'JIT,', 'and', ""you're"", 'seeing', 'that', 'in', 'the', 'excellent', 'run-time', 'performance', 'of', 'the', 'Java', 'code.']","['DT', 'JJ', 'NN', 'IN', 'DT', 'NN', 'IN', 'CD', 'NN', 'NNS', 'IN', 'CD', 'WDT', 'VBZ', 'RB', 'RB', 'JJR', 'IN', 'CD', 'NN', 'IN', 'DT', 'CD', 'VBZ', 'DT', 'JJ', 'NN', 'VBZ', 'JJ', 'PRP$', 'NN', 'IN', 'DT', 'VBZ', 'RB', 'JJ', 'JJ', 'NN', 'CC', 'DT', 'NN', 'IN', 'DT', 'NNS', 'VBZ', 'RB', 'RB', 'RB', 'PRP', 'VBP', 'RB', 'VBG', 'WRB', 'RB', 'NN', 'CC', 'VB', 'JJ', 'JJ', 'NN', 'PRP', 'VBZ', 'IN', 'DT', 'VBZ', 'DT', 'JJ', 'NN', 'IN', 'NNP', 'CC', 'VB', 'VBG', 'IN', 'IN', 'DT', 'JJ', 'JJ', 'NN', 'IN', 'DT', 'NNP', 'NN']"
