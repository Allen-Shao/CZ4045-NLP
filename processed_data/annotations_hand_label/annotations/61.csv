,text,token,annotation
0,"I'm porting an app from Play (Scala) to Go and wondering how to implement dependency injection. In Scala I used the cake pattern, while in Go I implemented a DAO interface along with an implementation for Mongo.

Here below is how I tried to implement a pattern that let me change the DAO implementation as needed (e.g. test, different DB, etc.):

1. entity.go

","[""I'm"", 'porting', 'an', 'app', 'from', 'Play', '(Scala)', 'to', 'Go', 'and', 'wondering', 'how', 'to', 'implement', 'dependency', 'injection.', 'In', 'Scala', 'I', 'used', 'the', 'cake', 'pattern,', 'while', 'in', 'Go', 'I', 'implemented', 'a', 'DAO', 'interface', 'along', 'with', 'an', 'implementation', 'for', 'Mongo.', 'Here', 'below', 'is', 'how', 'I', 'tried', 'to', 'implement', 'a', 'pattern', 'that', 'let', 'me', 'change', 'the', 'DAO', 'implementation', 'as', 'needed', '(e.g.', 'test,', 'different', 'DB,', 'etc.):', '1.', 'entity.go']","['NNP', 'VBG', 'DT', 'NN', 'IN', 'NNP', 'NNP', 'TO', 'VB', 'CC', 'VBG', 'WRB', 'TO', 'VB', 'NN', 'NN', 'IN', 'NNP', 'PRP', 'VBD', 'DT', 'NN', 'NN', 'IN', 'IN', 'NNP', 'PRP', 'VBD', 'DT', 'NNP', 'NN', 'IN', 'IN', 'DT', 'NN', 'IN', 'NNP', 'RB', 'IN', 'VBZ', 'WRB', 'PRP', 'VBD', 'TO', 'VB', 'DT', 'NN', 'WDT', 'VBD', 'PRP', 'VB', 'DT', 'NNP', 'NN', 'IN', 'VBN', 'NN', 'NN', 'JJ', 'NNP', 'NN', 'CD', 'NN']"
1,package models,"['package', 'models']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""time""","['""time""']",['STRING_LITERAL']
4,"    ""gopkg.in/mgo.v2/bson""","['""gopkg.in/mgo.v2/bson""']",['STRING_LITERAL']
5,),[')'],['PUNCTUATION']
6,type (,"['type', '(']","['KEYWORD', 'PUNCTUATION']"
7,    Entity struct {,"['Entity', 'struct', '{']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
8,"        Id        bson.ObjectId `json:""id,omitempty"" bson:""_id,omitempty""`","['Id', 'bson', '.', 'ObjectId', 'json', ':', '""id,omitempty""', 'bson', ':', '""_id,omitempty""']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL']"
9,"        CreatedAt time.Time     `json:""createdAt,omitempty"" bson:""createdAt,omitempty""`","['CreatedAt', 'time', '.', 'Time', 'json', ':', '""createdAt,omitempty""', 'bson', ':', '""createdAt,omitempty""']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL']"
10,"        LastUpdate time.Time    `json:""lastUpdate,omitempty"" bson:""lastUpdate,omitempty""`","['LastUpdate', 'time', '.', 'Time', 'json', ':', '""lastUpdate,omitempty""', 'bson', ':', '""lastUpdate,omitempty""']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL']"
11,    },['}'],['PUNCTUATION']
12,),[')'],['PUNCTUATION']
13,"

2. user.go

","['2.', 'user.go']","['CD', 'JJ']"
14,package models,"['package', 'models']","['KEYWORD', 'IDENTIFIER']"
15,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
16,"    ""time""","['""time""']",['STRING_LITERAL']
17,),[')'],['PUNCTUATION']
18,type (,"['type', '(']","['KEYWORD', 'PUNCTUATION']"
19,    User struct {,"['User', 'struct', '{']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
20,"        Entity                  `bson:"",inline""`","['Entity', 'bson', ':', '"",inline""']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL']"
21,"        Name      string        `json:""name,omitempty"" bson:""name,omitempty""`","['Name', 'string', 'json', ':', '""name,omitempty""', 'bson', ':', '""name,omitempty""']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL']"
22,"        BirthDate time.Time     `json:""birthDate,omitempty"" bson:""birthDate,omitempty""`","['BirthDate', 'time', '.', 'Time', 'json', ':', '""birthDate,omitempty""', 'bson', ':', '""birthDate,omitempty""']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL']"
23,    },['}'],['PUNCTUATION']
24,),[')'],['PUNCTUATION']
25,"

3. dao.go

","['3.', 'dao.go']","['CD', 'NN']"
26,package persistence,"['package', 'persistence']","['KEYWORD', 'IDENTIFIER']"
27,type (,"['type', '(']","['KEYWORD', 'PUNCTUATION']"
28,    DAO interface {,"['DAO', 'interface', '{']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
29,        Insert(entity interface{}) error,"['Insert', '(', 'entity', 'interface', '{})', 'error']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER']"
30,"        List(result interface{}, sort string) error","['List', '(', 'result', 'interface', '{},', 'sort', 'string', ')', 'error']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
31,"        Find(id string, result interface{}) error","['Find', '(', 'id', 'string', ',', 'result', 'interface', '{})', 'error']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER']"
32,"        Update(id string, update interface{}) error","['Update', '(', 'id', 'string', ',', 'update', 'interface', '{})', 'error']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER']"
33,        Remove(id string) error,"['Remove', '(', 'id', 'string', ')', 'error']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
34,        Close(),"['Close', '()']","['IDENTIFIER', 'PUNCTUATION']"
35,    },['}'],['PUNCTUATION']
36,    daoFactory func() DAO,"['daoFactory', 'func', '()', 'DAO']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER']"
37,),[')'],['PUNCTUATION']
38,var (,"['var', '(']","['KEYWORD', 'PUNCTUATION']"
39,    New daoFactory,"['New', 'daoFactory']","['IDENTIFIER', 'IDENTIFIER']"
40,),[')'],['PUNCTUATION']
41,"

4. mongoDao.go (DB info and collection name are hard-coded since it's just an example)

","['4.', 'mongoDao.go', '(DB', 'info', 'and', 'collection', 'name', 'are', 'hard-coded', 'since', ""it's"", 'just', 'an', 'example)']","['CD', 'NN', 'NNP', 'NN', 'CC', 'NN', 'NN', 'VBP', 'JJ', 'IN', 'NN', 'RB', 'DT', 'NN']"
42,package persistence,"['package', 'persistence']","['KEYWORD', 'IDENTIFIER']"
43,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
44,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
45,"    ""time""","['""time""']",['STRING_LITERAL']
46,"    ""errors""","['""errors""']",['STRING_LITERAL']
47,"    ""gopkg.in/mgo.v2""","['""gopkg.in/mgo.v2""']",['STRING_LITERAL']
48,"    ""gopkg.in/mgo.v2/bson""","['""gopkg.in/mgo.v2/bson""']",['STRING_LITERAL']
49,"    ""github.com/fatih/structs""","['""github.com/fatih/structs""']",['STRING_LITERAL']
50,"    ""cmd/server/models""","['""cmd/server/models""']",['STRING_LITERAL']
51,),[')'],['PUNCTUATION']
52,type (,"['type', '(']","['KEYWORD', 'PUNCTUATION']"
53,    mongoDAO struct{,"['mongoDAO', 'struct', '{']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
54,        session *mgo.Session,"['session', '*', 'mgo', '.', 'Session']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
55,    },['}'],['PUNCTUATION']
56,),[')'],['PUNCTUATION']
57,func NewMongoDAO() DAO {,"['func', 'NewMongoDAO', '()', 'DAO', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
58,    dialInfo := &mgo.DialInfo{,"['dialInfo', ':=', '&', 'mgo', '.', 'DialInfo', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
59,"        Addrs:      []string{""localhost:27017""},","['Addrs', ':', '[]', 'string', '{', '""localhost:27017""', '},']","['IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
60,"        Timeout:    60 * time.Second,","['Timeout', ':', '60', '*', 'time', '.', 'Second', ',']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
61,"        Database:   ""test"",","['Database', ':', '""test""', ',']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
62,    },['}'],['PUNCTUATION']
63,"    session, err := mgo.DialWithInfo(dialInfo)","['session', ',', 'err', ':=', 'mgo.DialWithInfo(dialInfo)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
64,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
65,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
66,    },['}'],['PUNCTUATION']
67,"    session.SetMode(mgo.Monotonic, true)","['session.SetMode(mgo.Monotonic, true)']",['FUNCTION_CALL']
68,    return &mongoDAO{session},"['return', '&', 'mongoDAO', '{', 'session', '}']","['KEYWORD', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
69,},['}'],['PUNCTUATION']
70,func (dao *mongoDAO) Insert(entity interface{}) error {,"['func', '(', 'dao', '*', 'mongoDAO', ')', 'Insert', '(', 'entity', 'interface', '{})', 'error', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
71,    doc := entity.(*models.User),"['doc', ':=', 'entity', '.(*', 'models', '.', 'User', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
72,    doc.Id = bson.NewObjectId(),"['doc', '.', 'Id', '=', 'bson.NewObjectId()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
73,    doc.CreatedAt = time.Now().UTC(),"['doc', '.', 'CreatedAt', '=', 'time.Now().UTC()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
74,    doc.LastUpdate = time.Now().UTC(),"['doc', '.', 'LastUpdate', '=', 'time.Now().UTC()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
75,"    return dao.session.DB(""test"").C(""users"").Insert(doc)","['return', 'dao', '.', 'session.DB(""test"").C(""users"").Insert(doc)']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
76,},['}'],['PUNCTUATION']
77,"func (dao *mongoDAO) List(result interface{}, sort string) error {","['func', '(', 'dao', '*', 'mongoDAO', ')', 'List', '(', 'result', 'interface', '{},', 'sort', 'string', ')', 'error', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
78,"    return dao.session.DB(""test"").C(""users"").Find(nil).Sort(sort).All(result)","['return', 'dao', '.', 'session.DB(""test"").C(""users"").Find(nil).Sort(sort).All(result)']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
79,},['}'],['PUNCTUATION']
80,"func (dao *mongoDAO) Find(id string, result interface{}) error {","['func', '(', 'dao', '*', 'mongoDAO', ')', 'Find', '(', 'id', 'string', ',', 'result', 'interface', '{})', 'error', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
81,    if !bson.IsObjectIdHex(id) {,"['if', '!', 'bson.IsObjectIdHex(id)', '{']","['KEYWORD', 'LOGICAL_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION']"
82,"        return errors.New(fmt.Sprintf(""%s is not a valid hex id"", id))","['return', 'errors.New(fmt.Sprintf(""%s is not a valid hex id"", id))']","['KEYWORD', 'FUNCTION_CALL']"
83,    },['}'],['PUNCTUATION']
84,    oid := bson.ObjectIdHex(id),"['oid', ':=', 'bson.ObjectIdHex(id)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
85,"    return dao.session.DB(""test"").C(""users"").FindId(oid).One(result)","['return', 'dao', '.', 'session.DB(""test"").C(""users"").FindId(oid).One(result)']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
86,},['}'],['PUNCTUATION']
87,"func (dao *mongoDAO) Update(id string, update interface{}) error {","['func', '(', 'dao', '*', 'mongoDAO', ')', 'Update', '(', 'id', 'string', ',', 'update', 'interface', '{})', 'error', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
88,    if !bson.IsObjectIdHex(id) {,"['if', '!', 'bson.IsObjectIdHex(id)', '{']","['KEYWORD', 'LOGICAL_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION']"
89,"        return errors.New(fmt.Sprintf(""%s is not a valid hex id"", id))","['return', 'errors.New(fmt.Sprintf(""%s is not a valid hex id"", id))']","['KEYWORD', 'FUNCTION_CALL']"
90,    },['}'],['PUNCTUATION']
91,    oid := bson.ObjectIdHex(id),"['oid', ':=', 'bson.ObjectIdHex(id)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
92,    doc := update.(*models.User),"['doc', ':=', 'update', '.(*', 'models', '.', 'User', ')']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
93,    doc.LastUpdate = time.Now().UTC(),"['doc', '.', 'LastUpdate', '=', 'time.Now().UTC()']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
94,"    return dao.session.DB(""test"").C(""users"").Update(oid, bson.M{""$set"": structs.Map(update)})","['return', 'dao', '.', 'session.DB(""test"").C(""users"").Update(oid, bson.M{""$set"": structs.Map(update)})']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
95,},['}'],['PUNCTUATION']
96,func (dao *mongoDAO) Remove(id string) error {,"['func', '(', 'dao', '*', 'mongoDAO', ')', 'Remove', '(', 'id', 'string', ')', 'error', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
97,    if !bson.IsObjectIdHex(id) {,"['if', '!', 'bson.IsObjectIdHex(id)', '{']","['KEYWORD', 'LOGICAL_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION']"
98,"        return errors.New(fmt.Sprintf(""%s is not a valid hex id"", id))","['return', 'errors.New(fmt.Sprintf(""%s is not a valid hex id"", id))']","['KEYWORD', 'FUNCTION_CALL']"
99,    },['}'],['PUNCTUATION']
100,    oid := bson.ObjectIdHex(id),"['oid', ':=', 'bson.ObjectIdHex(id)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
101,"    return dao.session.DB(""test"").C(""users"").RemoveId(oid)","['return', 'dao', '.', 'session.DB(""test"").C(""users"").RemoveId(oid)']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
102,},['}'],['PUNCTUATION']
103,func (dao *mongoDAO) Close() {,"['func', '(', 'dao', '*', 'mongoDAO', ')', 'Close', '()', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
104,    dao.session.Close(),"['dao', '.', 'session.Close()']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
105,},['}'],['PUNCTUATION']
106,func init() {,"['func', 'init', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
107,    New = NewMongoDAO,"['New', '=', 'NewMongoDAO']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
108,},['}'],['PUNCTUATION']
109,"

Finally, here is how I use the types above:

5. userController.go

","['Finally,', 'here', 'is', 'how', 'I', 'use', 'the', 'types', 'above:', '5.', 'userController.go']","['NNP', 'RB', 'VBZ', 'WRB', 'PRP', 'VBP', 'DT', 'NNS', 'VBP', 'CD', 'JJ']"
110,package controllers,"['package', 'controllers']","['KEYWORD', 'IDENTIFIER']"
111,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
112,"    ""net/http""","['""net/http""']",['STRING_LITERAL']
113,"    ""github.com/labstack/echo""","['""github.com/labstack/echo""']",['STRING_LITERAL']
114,"    ""cmd/server/models""","['""cmd/server/models""']",['STRING_LITERAL']
115,"    ""cmd/server/persistence""","['""cmd/server/persistence""']",['STRING_LITERAL']
116,),[')'],['PUNCTUATION']
117,type (,"['type', '(']","['KEYWORD', 'PUNCTUATION']"
118,    UserController struct {,"['UserController', 'struct', '{']","['IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
119,        dao persistence.DAO,"['dao', 'persistence', '.', 'DAO']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
120,    },['}'],['PUNCTUATION']
121,),[')'],['PUNCTUATION']
122,func NewUserController(dao persistence.DAO) *UserController {,"['func', 'NewUserController', '(', 'dao', 'persistence', '.', 'DAO', ')', '*', 'UserController', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
123,    return &UserController{dao},"['return', '&', 'UserController', '{', 'dao', '}']","['KEYWORD', 'BITWISE_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
124,},['}'],['PUNCTUATION']
125,func (userController *UserController) CreateUser() echo.HandlerFunc {,"['func', '(', 'userController', '*', 'UserController', ')', 'CreateUser', '()', 'echo', '.', 'HandlerFunc', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
126,    return func(context echo.Context) error {,"['return', 'func', '(', 'context', 'echo', '.', 'Context', ')', 'error', '{']","['KEYWORD', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
127,        user := &models.User{},"['user', ':=', '&', 'models', '.', 'User', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
128,        if err := context.Bind(user); err != nil {,"['if', 'err', ':=', 'context.Bind(user)', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
129,            return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
130,        },['}'],['PUNCTUATION']
131,        if err := userController.dao.Insert(user); err != nil {,"['if', 'err', ':=', 'userController', '.', 'dao.Insert(user)', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
132,            return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
133,        },['}'],['PUNCTUATION']
134,"        return context.JSON(http.StatusCreated, user)","['return', 'context.JSON(http.StatusCreated, user)']","['KEYWORD', 'FUNCTION_CALL']"
135,    },['}'],['PUNCTUATION']
136,},['}'],['PUNCTUATION']
137,func (userController *UserController) UpdateUser() echo.HandlerFunc {,"['func', '(', 'userController', '*', 'UserController', ')', 'UpdateUser', '()', 'echo', '.', 'HandlerFunc', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
138,    return func(context echo.Context) error {,"['return', 'func', '(', 'context', 'echo', '.', 'Context', ')', 'error', '{']","['KEYWORD', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
139,        user := &models.User{},"['user', ':=', '&', 'models', '.', 'User', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
140,        if err := context.Bind(user); err != nil {,"['if', 'err', ':=', 'context.Bind(user)', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
141,            return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
142,        },['}'],['PUNCTUATION']
143,"        id := context.Param(""id"")","['id', ':=', 'context.Param(""id"")']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
144,"        if err := userController.dao.Update(id, user); err != nil {","['if', 'err', ':=', 'userController', '.', 'dao.Update(id, user)', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
145,            return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
146,        },['}'],['PUNCTUATION']
147,"        return context.JSON(http.StatusOK, user)","['return', 'context.JSON(http.StatusOK, user)']","['KEYWORD', 'FUNCTION_CALL']"
148,    },['}'],['PUNCTUATION']
149,},['}'],['PUNCTUATION']
150,....,['....'],['PUNCTUATION']
151,"

The code above is 90% fine... I've just a problem in mongoDao.go with methods Insert and Update where the compiler forces me to cast input entity to a specific type (*models.User), but this prevents me from having a generic DAO component that works for all types. How do I fix this issue?
","['The', 'code', 'above', 'is', '90%', 'fine...', ""I've"", 'just', 'a', 'problem', 'in', 'mongoDao.go', 'with', 'methods', 'Insert', 'and', 'Update', 'where', 'the', 'compiler', 'forces', 'me', 'to', 'cast', 'input', 'entity', 'to', 'a', 'specific', 'type', '(*models.User),', 'but', 'this', 'prevents', 'me', 'from', 'having', 'a', 'generic', 'DAO', 'component', 'that', 'works', 'for', 'all', 'types.', 'How', 'do', 'I', 'fix', 'this', 'issue?']","['DT', 'NN', 'IN', 'VBZ', 'CD', 'JJ', 'NNP', 'RB', 'DT', 'NN', 'IN', 'NN', 'IN', 'NNS', 'NNP', 'CC', 'NNP', 'WRB', 'DT', 'NN', 'NNS', 'PRP', 'TO', 'VB', 'NN', 'NN', 'TO', 'DT', 'JJ', 'NN', 'NN', 'CC', 'DT', 'VBZ', 'PRP', 'IN', 'VBG', 'DT', 'JJ', 'NNP', 'NN', 'WDT', 'VBZ', 'IN', 'DT', 'NN', 'NNP', 'VBP', 'PRP', 'VB', 'DT', 'NN']"
