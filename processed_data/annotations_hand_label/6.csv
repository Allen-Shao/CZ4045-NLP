,text,token,annotation
0,"I try to write a function that validate data. Look at the following code:","['I', 'try', 'to', 'write', 'a', 'function', 'that', 'validate', 'data', '.', 'Look', 'at', 'the', 'following', 'code', ':']","['PRP', 'VBP', 'TO', 'VB', 'DT', 'NN', 'WDT', 'VB', 'NNS', '.', 'VB', 'IN', 'DT', 'JJ', 'NN', ':']"
1,"func Create(name, email, password, local string, termOf bool) map[string]string {","['func', 'Create', '(', 'name', ',', 'email', ',', 'password', ',', 'local', 'string', ',', 'termOf', 'bool', ')', 'map', '[', 'string', ']', 'string', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
2,    wait := new(sync.WaitGroup),"['wait', ':=', 'new(sync.WaitGroup)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
3,    mutex := new(sync.Mutex),"['mutex', ':=', 'new(sync.Mutex)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
4,    errMsg := make(map[string]string),"['errMsg', ':=', 'make(map[string]string)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
5,    if !termOf {,"['if', '!', 'termOf', '{']","['KEYWORD', 'LOGICAL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
6,        mutex.Lock(),['mutex.Lock()'],['FUNCTION_CALL']
7,"        errMsg[""termOf""] = translate(local, ""text06"")","['errMsg', '[', '""termOf""', ']', '=', 'translate(local, ""text06"")']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
8,        mutex.Unlock(),['mutex.Unlock()'],['FUNCTION_CALL']
9,    },['}'],['PUNCTUATION']
10,    wait.Add(1),['wait.Add(1)'],['FUNCTION_CALL']
11,    go func() {,"['go', 'func', '()', '{']","['KEYWORD', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
12,"        err := ValidateName(name, local)","['err', ':=', 'ValidateName(name, local)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
13,        mutex.Lock(),['mutex.Lock()'],['FUNCTION_CALL']
14,"        errMsg[""name""] = err.Error()","['errMsg', '[', '""name""', ']', '=', 'err.Error()']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
15,        mutex.Unlock(),['mutex.Unlock()'],['FUNCTION_CALL']
16,        wait.Done(),['wait.Done()'],['FUNCTION_CALL']
17,    }(),['}()'],['PUNCTUATION']
18,    wait.Add(1),['wait.Add(1)'],['FUNCTION_CALL']
19,    go func() {,"['go', 'func', '()', '{']","['KEYWORD', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
20,"        err := ValidateEmail(email, local)","['err', ':=', 'ValidateEmail(email, local)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
21,        mutex.Lock(),['mutex.Lock()'],['FUNCTION_CALL']
22,"        errMsg[""email""] = err.Error()","['errMsg', '[', '""email""', ']', '=', 'err.Error()']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
23,        mutex.Unlock(),['mutex.Unlock()'],['FUNCTION_CALL']
24,        wait.Done(),['wait.Done()'],['FUNCTION_CALL']
25,    }(),['}()'],['PUNCTUATION']
26,    wait.Add(1),['wait.Add(1)'],['FUNCTION_CALL']
27,    go func() {,"['go', 'func', '()', '{']","['KEYWORD', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
28,"        err := ValidatePassword(password, local)","['err', ':=', 'ValidatePassword(password, local)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
29,        mutex.Lock(),['mutex.Lock()'],['FUNCTION_CALL']
30,"        errMsg[""password""] = err.Error()","['errMsg', '[', '""password""', ']', '=', 'err.Error()']","['IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
31,        mutex.Unlock(),['mutex.Unlock()'],['FUNCTION_CALL']
32,        wait.Done(),['wait.Done()'],['FUNCTION_CALL']
33,    }(),['}()'],['PUNCTUATION']
34,    wait.Wait(),['wait.Wait()'],['FUNCTION_CALL']
35,    // If errors appear,"['//', 'If', 'errors', 'appear']","['COMMENT', 'IN', 'NNS', 'VBP']"
36,    if len(errMsg) > 0 {,"['if', 'len', '(', 'errMsg', ')', '>', '0', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
37,        return errMsg,"['return', 'errMsg']","['KEYWORD', 'IDENTIFIER']"
38,    },['}'],['PUNCTUATION']
39,    return nil,"['return', 'nil']","['KEYWORD', 'RESERVED']"
40,},['}'],['PUNCTUATION']
41,"As you can see here, I use three goroutines and in the goroutine I lock it to change errMsg variable map type. When I run the function, I've got compiler error","['As', 'you', 'can', 'see', 'here', ',', 'I', 'use', 'three', 'goroutines', 'and', 'in', 'the', 'goroutine', 'I', 'lock', 'it', 'to', 'change', 'errMsg', 'variable', 'map', 'type', '.', 'When', 'I', 'run', 'the', 'function', ',', 'I', ""'ve"", 'got', 'compiler', 'error']","['IN', 'PRP', 'MD', 'VB', 'RB', ',', 'PRP', 'VBP', 'CD', 'NNS', 'CC', 'IN', 'DT', 'NN', 'PRP', 'VBP', 'PRP', 'TO', 'VB', 'NNP', 'NN', 'NN', 'NN', '.', 'WRB', 'PRP', 'VBP', 'DT', 'NN', ',', 'PRP', 'VBP', 'VBN', 'NN', 'NN']"
42,runtime error: invalid memory address or nil pointer dereference,"['runtime', 'error', ':', 'invalid', 'memory', 'address', 'or', 'nil', 'pointer', 'dereference']","['NN', 'NN', ':', 'JJ', 'INN', 'NN', 'CC', 'RESERVED', 'NN', 'NN']"
43,[signal 0xc0000005 code=0x0 addr=0x14 pc=0x44206a],"['[', 'signal', '0xc0000005', 'code', '=', '0x0', 'addr', '=', '0x14', 'pc', '=', '0x44206a', ']']","['PUNCTUATION', 'IDENTIFIER', 'HEX_LITERAL', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'PUNCTUATION']"
44,"But when I remove in the goroutine all errMsg inserts, then the function works. I do not know the reason what I do wrong.","['But', 'when', 'I', 'remove', 'in', 'the', 'goroutine', 'all', 'errMsg', 'inserts', ',', 'then', 'the', 'function', 'works', '.', 'I', 'do', 'not', 'know', 'the', 'reason', 'what', 'I', 'do', 'wrong', '.']","['CC', 'WRB', 'PRP', 'VBP', 'IN', 'DT', 'NN', 'DT', 'NNP', 'NNS', ',', 'RB', 'DT', 'NN', 'VBZ', '.', 'PRP', 'VBP', 'RB', 'VB', 'DT', 'NN', 'WP', 'PRP', 'VBP', 'RB', '.']"