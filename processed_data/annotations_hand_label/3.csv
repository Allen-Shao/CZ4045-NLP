,text,token,annotation
0,"I have just seen an implementation of a priority queue in a generic kind of way in which any
type satisfying an interface can be put into the queue. Is this the way to go with go or does this introduces any issues?

","['I', 'have', 'just', 'seen', 'an', 'implementation', 'of', 'a', 'priority', 'queue', 'in', 'a', 'generic', 'kind', 'of', 'way', 'in', 'which', 'any', 'type', 'satisfying', 'an', 'interface', 'can', 'be', 'put', 'into', 'the', 'queue.', 'Is', 'this', 'the', 'way', 'to', 'go', 'with', 'go', 'or', 'does', 'this', 'introduces', 'any', 'issues?']","['PRP', 'VBP', 'RB', 'VBN', 'DT', 'NN', 'IN', 'DT', 'NN', 'NN', 'IN', 'DT', 'JJ', 'NN', 'IN', 'NN', 'IN', 'WDT', 'DT', 'NN', 'VBG', 'DT', 'NN', 'MD', 'VB', 'VBN', 'IN', 'DT', 'NN', 'VBZ', 'DT', 'DT', 'NN', 'TO', 'VB', 'IN', 'NN', 'CC', 'VBZ', 'DT', 'VBZ', 'DT', 'NN']"
1,// Copyright 2012 Stefan Nilsson,"['//', 'Copyright', '2012', 'Stefan', 'Nilsson']","['COMMENT', 'JJ', 'CD', 'NNP', 'NNP']"
2,//,['//'],['COMMENT']
3,"// Licensed under the Apache License, Version 2.0 (the ""License"");","['//', 'Licensed', 'under', 'the', 'Apache', 'License,', 'Version', '2.0', '(the', '""License"");']","['COMMENT', 'VBN', 'IN', 'DT', 'NNP', 'NNP', 'NNP', 'CD', 'NNP', 'NN']"
4,// you may not use this file except in compliance with the License.,"['//', 'you', 'may', 'not', 'use', 'this', 'file', 'except', 'in', 'compliance', 'with', 'the', 'License.']","['COMMENT', 'PRP', 'MD', 'RB', 'VB', 'DT', 'NN', 'IN', 'IN', 'NN', 'IN', 'DT', 'NNP']"
5,// You may obtain a copy of the License at,"['//', 'You', 'may', 'obtain', 'a', 'copy', 'of', 'the', 'License', 'at']","['COMMENT', 'PRP', 'MD', 'VB', 'DT', 'NN', 'IN', 'DT', 'NNP', 'IN']"
6,//,['//'],['COMMENT']
7,//     http://www.apache.org/licenses/LICENSE-2.0,"['//', 'http:www.apache.org/licenses/LICENSE-2.0']","['COMMENT', 'NN']"
8,//,['//'],['COMMENT']
9,"// Unless required by applicable law or agreed to in writing, software","['//', 'Unless', 'required', 'by', 'applicable', 'law', 'or', 'agreed', 'to', 'in', 'writing,', 'software']","['COMMENT', 'IN', 'VBN', 'IN', 'JJ', 'NN', 'CC', 'VBN', 'TO', 'IN', 'NN', 'NN']"
10,"// distributed under the License is distributed on an ""AS IS"" BASIS,","['//', 'distributed', 'under', 'the', 'License', 'is', 'distributed', 'on', 'an', '""AS', 'IS""', 'BASIS,']","['COMMENT', 'VBN', 'IN', 'DT', 'NNP', 'VBZ', 'VBN', 'IN', 'DT', 'JJ', 'NNP', 'NNP']"
11,"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","['//', 'WITHOUT', 'WARRANTIES', 'OR', 'CONDITIONS', 'OF', 'ANY', 'KIND,', 'either', 'express', 'or', 'implied.']","['COMMENT', 'JJ', 'NNP', 'NNP', 'NNP', 'IN', 'NNP', 'NNP', 'CC', 'NN', 'CC', 'NN']"
12,// See the License for the specific language governing permissions and,"['//', 'See', 'the', 'License', 'for', 'the', 'specific', 'language', 'governing', 'permissions', 'and']","['COMMENT', 'VB', 'DT', 'NNP', 'IN', 'DT', 'JJ', 'NN', 'NN', 'NNS', 'CC']"
13,// limitations under the License.,"['//', 'limitations', 'under', 'the', 'License.']","['COMMENT', 'NNS', 'IN', 'DT', 'NNP']"
14,// Package prio provides a priority queue.,"['//', 'Package', 'prio', 'provides', 'a', 'priority', 'queue.']","['COMMENT', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN']"
15,// The queue can hold elements that implement the two methods of prio.Interface.,"['//', 'The', 'queue', 'can', 'hold', 'elements', 'that', 'implement', 'the', 'two', 'methods', 'of', 'prio.Interface.']","['COMMENT', 'DT', 'NN', 'MD', 'VB', 'NNS', 'WDT', 'VBP', 'DT', 'CD', 'NNS', 'IN', 'NN']"
16,package prio,"['package', 'prio']","['KEYWORD', 'IDENTIFIER']"
17,/*,['*'],['OPERATOR']
18,A type that implements prio.Interface can be inserted into a priority queue.,"['A', 'type', 'that', 'implements', 'prio', '.', 'Interface', 'can', 'be', 'inserted', 'into', 'a', 'priority', 'queue', '.']","['IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
19,The simplest use case looks like this:,"['The', 'simplest', 'use', 'case', 'looks', 'like', 'this', ':']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
20,        type myInt int,"['type', 'myInt', 'int']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
21,        func (x myInt) Less(y prio.Interface) bool { return x < y.(myInt) },"['func', '(', 'x', 'myInt', ')', 'Less', '(', 'y', 'prio', '.', 'Interface', ')', 'bool', '{', 'return', 'x', '<', 'y', '.(', 'myInt', ')', '}']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
22,        func (x myInt) Index(i int)                {},"['func', '(', 'x', 'myInt', ')', 'Index', '(', 'i', 'int', ')', '{}']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
23,To use the Remove method you need to keep track of the index of elements,"['To', 'use', 'the', 'Remove', 'method', 'you', 'need', 'to', 'keep', 'track', 'of', 'the', 'index', 'of', 'elements']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
24,"in the heap, e.g. like this:","['in', 'the', 'heap', ',', 'e', '.', 'g', '.', 'like', 'this', ':']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
25,        type myType struct {,"['type', 'myType', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
26,                value int,"['value', 'int']","['IDENTIFIER', 'IDENTIFIER']"
27,                index int // index in heap,"['//', 'index', 'in', 'heap']","['IDENTIFIER', 'IDENTIFIER', 'COMMENT', 'NN', 'IN', 'NN']"
28,        },['}'],['OPERATOR']
29,        func (x *myType) Less(y prio.Interface) bool { return x.value < y.(*myType).value },"['func', '(', 'x', '*', 'myType', ')', 'Less', '(', 'y', 'prio', '.', 'Interface', ')', 'bool', '{', 'return', 'x', '.', 'value', '<', 'y', '.(*', 'myType', ').', 'value', '}']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
30,        func (x *myType) Index(i int)                { x.index = i },"['func', '(', 'x', '*', 'myType', ')', 'Index', '(', 'i', 'int', ')', '{', 'x', '.', 'index', '=', 'i', '}']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
31,*/,['*'],['OPERATOR']
32,type Interface interface {,"['type', 'Interface', 'interface', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
33,        // Less returns whether this element should sort before element x.,"['//', 'Less', 'returns', 'whether', 'this', 'element', 'should', 'sort', 'before', 'element', 'x.']","['COMMENT', 'NNP', 'VBZ', 'IN', 'DT', 'NN', 'MD', 'VB', 'IN', 'NN', 'NN']"
34,        Less(x Interface) bool,"['Less', '(', 'x', 'Interface', ')', 'bool']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
35,        // Index is called by the priority queue when this element is moved to index i.,"['//', 'Index', 'is', 'called', 'by', 'the', 'priority', 'queue', 'when', 'this', 'element', 'is', 'moved', 'to', 'index', 'i.']","['COMMENT', 'NN', 'VBZ', 'VBN', 'IN', 'DT', 'NN', 'NN', 'WRB', 'DT', 'NN', 'VBZ', 'VBN', 'TO', 'NN', 'NN']"
36,        Index(i int),"['Index', '(', 'i', 'int', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR']"
37,},['}'],['OPERATOR']
38,// Queue represents a priority queue.,"['//', 'Queue', 'represents', 'a', 'priority', 'queue.']","['COMMENT', 'NNP', 'VBZ', 'DT', 'NN', 'NN']"
39,// The zero value for Queue is an empty queue ready to use.,"['//', 'The', 'zero', 'value', 'for', 'Queue', 'is', 'an', 'empty', 'queue', 'ready', 'to', 'use.']","['COMMENT', 'DT', 'CD', 'NN', 'IN', 'NNP', 'VBZ', 'DT', 'JJ', 'NN', 'JJ', 'TO', 'VB']"
40,type Queue struct {,"['type', 'Queue', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
41,        h []Interface,"['h', '[]', 'Interface']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
42,},['}'],['OPERATOR']
43,// New returns an initialized priority queue with the given elements.,"['//', 'New', 'returns', 'an', 'initialized', 'priority', 'queue', 'with', 'the', 'given', 'elements.']","['COMMENT', 'NNP', 'NNS', 'DT', 'JJ', 'NN', 'NN', 'IN', 'DT', 'VBN', 'NN']"
44,// A call of the form New(x...) uses the underlying array of x to implement,"['//', 'A', 'call', 'of', 'the', 'form', 'New(x...)', 'uses', 'the', 'underlying', 'array', 'of', 'x', 'to', 'implement']","['COMMENT', 'DT', 'NN', 'IN', 'DT', 'NN', 'NNP', 'VBZ', 'DT', 'JJ', 'NN', 'IN', 'NN', 'TO', 'VB']"
45,// the queue and hence might change the elements of x.,"['//', 'the', 'queue', 'and', 'hence', 'might', 'change', 'the', 'elements', 'of', 'x.']","['COMMENT', 'DT', 'NN', 'CC', 'NN', 'MD', 'VB', 'DT', 'NNS', 'IN', 'NN']"
46,"// The complexity is O(n), where n = len(x).","['//', 'The', 'complexity', 'is', 'O(n),', 'where', 'n', '=', 'len(x).']","['COMMENT', 'DT', 'NN', 'VBZ', 'NNP', 'WRB', 'JJ', 'NN', 'NN']"
47,func New(x ...Interface) Queue {,"['func', 'New', '(', 'x', '...', 'Interface', ')', 'Queue', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
48,        q := Queue{x},"['q', ':=', 'Queue', '{', 'x', '}']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
49,        heapify(q.h),"['heapify', '(', 'q', '.', 'h', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
50,        return q,"['return', 'q']","['KEYWORD', 'IDENTIFIER']"
51,},['}'],['OPERATOR']
52,// Push pushes the element x onto the queue.,"['//', 'Push', 'pushes', 'the', 'element', 'x', 'onto', 'the', 'queue.']","['COMMENT', 'NN', 'VBZ', 'DT', 'NN', 'NNP', 'IN', 'DT', 'NN']"
53,// The complexity is O(log(n)) where n = q.Len().,"['//', 'The', 'complexity', 'is', 'O(log(n))', 'where', 'n', '=', 'q.Len().']","['COMMENT', 'DT', 'NN', 'VBZ', 'NNP', 'WRB', 'JJ', 'NN', 'NN']"
54,func (q *Queue) Push(x Interface) {,"['func', '(', 'q', '*', 'Queue', ')', 'Push', '(', 'x', 'Interface', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
55,        n := len(q.h),"['n', ':=', 'len', '(', 'q', '.', 'h', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
56,"        q.h = append(q.h, x)","['q', '.', 'h', '=', 'append', '(', 'q', '.', 'h', ',', 'x', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
57,"        up(q.h, n) // x.Index(n) is done by up.","['//', 'x.Index(n)', 'is', 'done', 'by', 'up.']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'COMMENT', 'NN', 'VBZ', 'VBN', 'IN', 'NN']"
58,},['}'],['OPERATOR']
59,// Pop removes a minimum element (according to Less) from the queue and returns it.,"['//', 'Pop', 'removes', 'a', 'minimum', 'element', '(according', 'to', 'Less)', 'from', 'the', 'queue', 'and', 'returns', 'it.']","['COMMENT', 'NNP', 'VBZ', 'DT', 'JJ', 'NN', 'VBG', 'TO', 'NNP', 'IN', 'DT', 'NN', 'CC', 'NNS', 'VBP']"
60,"// The complexity is O(log(n)), where n = q.Len().","['//', 'The', 'complexity', 'is', 'O(log(n)),', 'where', 'n', '=', 'q.Len().']","['COMMENT', 'DT', 'NN', 'VBZ', 'NNP', 'WRB', 'JJ', 'NN', 'NN']"
61,func (q *Queue) Pop() Interface {,"['func', '(', 'q', '*', 'Queue', ')', 'Pop', '()', 'Interface', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
62,        h := q.h,"['h', ':=', 'q', '.', 'h']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
63,        n := len(h) - 1,"['n', ':=', 'len', '(', 'h', ')', '-', '1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
64,        x := h[0],"['x', ':=', 'h', '[', '0', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
65,"        h[0], h[n] = h[n], nil","['h', '[', '0', '],', 'h', '[', 'n', ']', '=', 'h', '[', 'n', '],', 'nil']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
66,        h = h[:n],"['h', '=', 'h', '[:', 'n', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
67,        if n > 0 {,"['if', 'n', '>', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
68,"                down(h, 0) // h[0].Index(0) is done by down.","['//', 'h[0].Index(0)', 'is', 'done', 'by', 'down.']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'COMMENT', 'NN', 'VBZ', 'VBN', 'IN', 'NN']"
69,        },['}'],['OPERATOR']
70,        q.h = h,"['q', '.', 'h', '=', 'h']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
71,        x.Index(-1) // for safety,"['//', 'for', 'safety']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'COMMENT', 'IN', 'NN']"
72,        return x,"['return', 'x']","['KEYWORD', 'IDENTIFIER']"
73,},['}'],['OPERATOR']
74,"// Peek returns, but does not remove, a minimum element (according to Less) of the queue.","['//', 'Peek', 'returns,', 'but', 'does', 'not', 'remove,', 'a', 'minimum', 'element', '(according', 'to', 'Less)', 'of', 'the', 'queue.']","['COMMENT', 'JJ', 'NN', 'CC', 'VBZ', 'RB', 'VB', 'DT', 'JJ', 'NN', 'VBG', 'TO', 'NNP', 'IN', 'DT', 'NN']"
75,func (q *Queue) Peek() Interface {,"['func', '(', 'q', '*', 'Queue', ')', 'Peek', '()', 'Interface', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
76,        return q.h[0],"['return', 'q', '.', 'h', '[', '0', ']']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
77,},['}'],['OPERATOR']
78,// Remove removes the element at index i from the queue and returns it.,"['//', 'Remove', 'removes', 'the', 'element', 'at', 'index', 'i', 'from', 'the', 'queue', 'and', 'returns', 'it.']","['COMMENT', 'NNP', 'VBZ', 'DT', 'NN', 'IN', 'NN', 'NN', 'IN', 'DT', 'NN', 'CC', 'NNS', 'VBP']"
79,"// The complexity is O(log(n)), where n = q.Len().","['//', 'The', 'complexity', 'is', 'O(log(n)),', 'where', 'n', '=', 'q.Len().']","['COMMENT', 'DT', 'NN', 'VBZ', 'NNP', 'WRB', 'JJ', 'NN', 'NN']"
80,func (q *Queue) Remove(i int) Interface {,"['func', '(', 'q', '*', 'Queue', ')', 'Remove', '(', 'i', 'int', ')', 'Interface', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
81,        h := q.h,"['h', ':=', 'q', '.', 'h']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
82,        n := len(h) - 1,"['n', ':=', 'len', '(', 'h', ')', '-', '1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
83,        x := h[i],"['x', ':=', 'h', '[', 'i', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
84,"        h[i], h[n] = h[n], nil","['h', '[', 'i', '],', 'h', '[', 'n', ']', '=', 'h', '[', 'n', '],', 'nil']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
85,        h = h[:n],"['h', '=', 'h', '[:', 'n', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
86,        if i < n {,"['if', 'i', '<', 'n', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
87,"                down(h, i) // h[i].Index(i) is done by down.","['//', 'h[i].Index(i)', 'is', 'done', 'by', 'down.']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'COMMENT', 'NN', 'VBZ', 'VBN', 'IN', 'NN']"
88,"                up(h, i)","['up', '(', 'h', ',', 'i', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
89,        },['}'],['OPERATOR']
90,        q.h = h,"['q', '.', 'h', '=', 'h']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
91,        x.Index(-1) // for safety,"['//', 'for', 'safety']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'COMMENT', 'IN', 'NN']"
92,        return x,"['return', 'x']","['KEYWORD', 'IDENTIFIER']"
93,},['}'],['OPERATOR']
94,// Len returns the number of elements in the queue.,"['//', 'Len', 'returns', 'the', 'number', 'of', 'elements', 'in', 'the', 'queue.']","['COMMENT', 'NNP', 'VBZ', 'DT', 'NN', 'IN', 'NNS', 'IN', 'DT', 'NN']"
95,func (q *Queue) Len() int {,"['func', '(', 'q', '*', 'Queue', ')', 'Len', '()', 'int', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
96,        return len(q.h),"['return', 'len', '(', 'q', '.', 'h', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
97,},['}'],['OPERATOR']
98,// Establishes the heap invariant in O(n) time.,"['//', 'Establishes', 'the', 'heap', 'invariant', 'in', 'O(n)', 'time.']","['COMMENT', 'NNS', 'DT', 'NN', 'NN', 'IN', 'NNP', 'NN']"
99,func heapify(h []Interface) {,"['func', 'heapify', '(', 'h', '[]', 'Interface', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
100,        n := len(h),"['n', ':=', 'len', '(', 'h', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
101,        for i := n - 1; i >= n/2; i-- {,"['for', 'i', ':=', 'n', '-', '1', ';', 'i', '>=', 'n', '2', ';', 'i', '--', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
102,                h[i].Index(i),"['h', '[', 'i', '].', 'Index', '(', 'i', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
103,        },['}'],['OPERATOR']
104,        for i := n/2 - 1; i >= 0; i-- { // h[i].Index(i) is done by down.,"['//', 'h[i].Index(i)', 'is', 'done', 'by', 'down.']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'COMMENT', 'NN', 'VBZ', 'VBN', 'IN', 'NN']"
105,"                down(h, i)","['down', '(', 'h', ',', 'i', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
106,        },['}'],['OPERATOR']
107,},['}'],['OPERATOR']
108,// Moves element at position i towards top of heap to restore invariant.,"['//', 'Moves', 'element', 'at', 'position', 'i', 'towards', 'top', 'of', 'heap', 'to', 'restore', 'invariant.']","['COMMENT', 'NNS', 'VBP', 'IN', 'NN', 'NN', 'VBP', 'NN', 'IN', 'NN', 'TO', 'VB', 'NN']"
109,"func up(h []Interface, i int) {","['func', 'up', '(', 'h', '[]', 'Interface', ',', 'i', 'int', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
110,        for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
111,                parent := (i - 1) / 2,"['parent', ':=', '(', 'i', '-', '1', ')', '2']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL']"
112,                if i == 0 || h[parent].Less(h[i]) {,"['if', 'i', '==', '0', '||', 'h', '[', 'parent', '].', 'Less', '(', 'h', '[', 'i', '])', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
113,                        h[i].Index(i),"['h', '[', 'i', '].', 'Index', '(', 'i', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
114,                        break,['break'],['KEYWORD']
115,                },['}'],['OPERATOR']
116,"                h[parent], h[i] = h[i], h[parent]","['h', '[', 'parent', '],', 'h', '[', 'i', ']', '=', 'h', '[', 'i', '],', 'h', '[', 'parent', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
117,                h[i].Index(i),"['h', '[', 'i', '].', 'Index', '(', 'i', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
118,                i = parent,"['i', '=', 'parent']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
119,        },['}'],['OPERATOR']
120,},['}'],['OPERATOR']
121,// Moves element at position i towards bottom of heap to restore invariant.,"['//', 'Moves', 'element', 'at', 'position', 'i', 'towards', 'bottom', 'of', 'heap', 'to', 'restore', 'invariant.']","['COMMENT', 'NNS', 'VBP', 'IN', 'NN', 'NN', 'VBP', 'NN', 'IN', 'NN', 'TO', 'VB', 'NN']"
122,"func down(h []Interface, i int) {","['func', 'down', '(', 'h', '[]', 'Interface', ',', 'i', 'int', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
123,        for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
124,                n := len(h),"['n', ':=', 'len', '(', 'h', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
125,                left := 2*i + 1,"['left', ':=', '2', '*', 'i', '+', '1']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
126,                if left >= n {,"['if', 'left', '>=', 'n', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
127,                        h[i].Index(i),"['h', '[', 'i', '].', 'Index', '(', 'i', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
128,                        break,['break'],['KEYWORD']
129,                },['}'],['OPERATOR']
130,                j := left,"['j', ':=', 'left']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
131,                if right := left + 1; right < n && h[right].Less(h[left]) {,"['if', 'right', ':=', 'left', '+', '1', ';', 'right', '<', 'n', '&&', 'h', '[', 'right', '].', 'Less', '(', 'h', '[', 'left', '])', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
132,                        j = right,"['j', '=', 'right']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
133,                },['}'],['OPERATOR']
134,                if h[i].Less(h[j]) {,"['if', 'h', '[', 'i', '].', 'Less', '(', 'h', '[', 'j', '])', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
135,                        h[i].Index(i),"['h', '[', 'i', '].', 'Index', '(', 'i', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
136,                        break,['break'],['KEYWORD']
137,                },['}'],['OPERATOR']
138,"                h[i], h[j] = h[j], h[i]","['h', '[', 'i', '],', 'h', '[', 'j', ']', '=', 'h', '[', 'j', '],', 'h', '[', 'i', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
139,                h[i].Index(i),"['h', '[', 'i', '].', 'Index', '(', 'i', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
140,                i = j,"['i', '=', 'j']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
141,        },['}'],['OPERATOR']
142,},['}'],['OPERATOR']
