,text,token,annotation
0,"As mentioned by Anonymous, you need a topological sort for this. Tarjan's strongly connected components algorithm has the property that SCCs are returned in reverse topological sort order. This means it can be used as a topological sort algorithm.

Here is an implementation of Tarjan's algorithm (runnable here and originally posted by me to the golang-nuts list) based on the pseudocode at wikipedia (more generally implemented here but using essentially the same underlying code):

","['As', 'mentioned', 'by', 'Anonymous,', 'you', 'need', 'a', 'topological', 'sort', 'for', 'this.', ""Tarjan's"", 'strongly', 'connected', 'components', 'algorithm', 'has', 'the', 'property', 'that', 'SCCs', 'are', 'returned', 'in', 'reverse', 'topological', 'sort', 'order.', 'This', 'means', 'it', 'can', 'be', 'used', 'as', 'a', 'topological', 'sort', 'algorithm.', 'Here', 'is', 'an', 'implementation', 'of', ""Tarjan's"", 'algorithm', '(runnable', 'here', 'and', 'originally', 'posted', 'by', 'me', 'to', 'the', 'golang-nuts', 'list)', 'based', 'on', 'the', 'pseudocode', 'at', 'wikipedia', '(more', 'generally', 'implemented', 'here', 'but', 'using', 'essentially', 'the', 'same', 'underlying', 'code):']","['IN', 'VBN', 'IN', 'NNP', 'PRP', 'VBP', 'DT', 'JJ', 'NN', 'IN', 'NN', 'NNP', 'RB', 'VBD', 'NNS', 'NN', 'VBZ', 'DT', 'NN', 'IN', 'NNP', 'VBP', 'VBN', 'IN', 'NN', 'JJ', 'NN', 'IN', 'DT', 'VBZ', 'PRP', 'MD', 'VB', 'VBN', 'IN', 'DT', 'JJ', 'NN', 'NN', 'RB', 'VBZ', 'DT', 'NN', 'IN', 'NNP', 'NN', 'NN', 'RB', 'CC', 'RB', 'VBN', 'IN', 'PRP', 'TO', 'DT', 'NNS', 'VBP', 'VBN', 'IN', 'DT', 'NN', 'IN', 'NN', 'NNP', 'RB', 'VBD', 'RB', 'CC', 'VBG', 'RB', 'DT', 'JJ', 'JJ', 'NN']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
3,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
4,"    ""log""","['""log""']",['STRING_LITERAL']
5,),[')'],['OPERATOR']
6,type Stmt struct {,"['type', 'Stmt', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
7,    Name  string,"['Name', 'string']","['IDENTIFIER', 'IDENTIFIER']"
8,    After []string,"['After', '[]', 'string']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
9,},['}'],['OPERATOR']
10,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
11,    stmts := []Stmt{,"['stmts', ':=', '[]', 'Stmt', '{']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
12,"        {Name: ""app"", After: []string{""app_user""}},","['{', 'Name', ':', '""app"", After: []string{""app_user""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
13,"        {Name: ""billingplan"", After: []string{}},","['{', 'Name', ':', '""billingplan""', ',', 'After', ':', '[]', 'string', '{}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
14,"        {Name: ""campaign"", After: []string{""app_user""}},","['{', 'Name', ':', '""campaign"", After: []string{""app_user""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
15,"        {Name: ""campaign_app"", After: []string{""campaign"", ""app""}},","['{', 'Name', ':', '""campaign_app"", After: []string{""campaign"", ""app""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
16,"        {Name: ""campaign_ip"", After: []string{""campaign"", ""ip""}},","['{', 'Name', ':', '""campaign_ip"", After: []string{""campaign"", ""ip""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
17,"        {Name: ""campaign_operator"", After: []string{""campaign"", ""operator""}},","['{', 'Name', ':', '""campaign_operator"", After: []string{""campaign"", ""operator""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
18,"        {Name: ""campaign_sponsor"", After: []string{""campaign"", ""sponsor""}},","['{', 'Name', ':', '""campaign_sponsor"", After: []string{""campaign"", ""sponsor""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
19,"        {Name: ""campaign_subscriberfilter"", After: []string{""campaign"", ""subscriber_filters""}},","['{', 'Name', ':', '""campaign_subscriberfilter"", After: []string{""campaign"", ""subscriber_filters""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
20,"        {Name: ""campaign_url"", After: []string{""campaign"", ""url""}},","['{', 'Name', ':', '""campaign_url"", After: []string{""campaign"", ""url""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
21,"        {Name: ""contentpartner"", After: []string{""app_user""}},","['{', 'Name', ':', '""contentpartner"", After: []string{""app_user""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
22,"        {Name: ""filter_criteria"", After: []string{""campaign"", ""subscriber_filters""}},","['{', 'Name', ':', '""filter_criteria"", After: []string{""campaign"", ""subscriber_filters""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
23,"        {Name: ""ip"", After: []string{""app_user""}},","['{', 'Name', ':', '""ip"", After: []string{""app_user""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
24,"        {Name: ""mobile_registered"", After: []string{""campaign"", ""app""}},","['{', 'Name', ':', '""mobile_registered"", After: []string{""campaign"", ""app""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
25,"        {Name: ""operator"", After: []string{}},","['{', 'Name', ':', '""operator""', ',', 'After', ':', '[]', 'string', '{}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
26,"        {Name: ""passwords"", After: []string{""app_user""}},","['{', 'Name', ':', '""passwords"", After: []string{""app_user""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
27,"        {Name: ""publish_package"", After: []string{}},","['{', 'Name', ':', '""publish_package""', ',', 'After', ':', '[]', 'string', '{}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
28,"        {Name: ""role"", After: []string{}},","['{', 'Name', ':', '""role""', ',', 'After', ':', '[]', 'string', '{}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
29,"        {Name: ""passwords"", After: []string{""app_user""}},","['{', 'Name', ':', '""passwords"", After: []string{""app_user""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
30,"        {Name: ""sponsor"", After: []string{""app_user""}},","['{', 'Name', ':', '""sponsor"", After: []string{""app_user""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
31,"        {Name: ""subscriber_dbs"", After: []string{}},","['{', 'Name', ':', '""subscriber_dbs""', ',', 'After', ':', '[]', 'string', '{}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
32,"        {Name: ""subscriber_filters"", After: []string{""subscriber_dbs""}},","['{', 'Name', ':', '""subscriber_filters"", After: []string{""subscriber_dbs""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
33,"        {Name: ""timezone"", After: []string{}},","['{', 'Name', ':', '""timezone""', ',', 'After', ':', '[]', 'string', '{}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
34,"        {Name: ""url"", After: []string{""app_user""}},","['{', 'Name', ':', '""url"", After: []string{""app_user""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
35,"        {Name: ""app_user"", After: []string{}},","['{', 'Name', ':', '""app_user""', ',', 'After', ':', '[]', 'string', '{}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
36,"        {Name: ""user_role"", After: []string{""app_user"", ""role""}},","['{', 'Name', ':', '""user_role"", After: []string{""app_user"", ""role""', '}},']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
37,    },['}'],['OPERATOR']
38,    g := make(graph),"['g', ':=', 'make', '(', 'graph', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
39,"    for _, s := range stmts {","['for', '_', ',', 's', ':=', 'range', 'stmts', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
40,        g[s.Name] = after(s.After),"['g', '[', 's', '.', 'Name', ']', '=', 'after', '(', 's', '.', 'After', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
41,    },['}'],['OPERATOR']
42,"    sorted, err := topoSort(g)","['sorted', ',', 'err', ':=', 'topoSort', '(', 'g', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
43,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
44,"        log.Fatalf(""could not sort: %v"", err)","['log', '.', 'Fatalf', '(', '""could not sort: %v""', ',', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
45,    },['}'],['OPERATOR']
46,"    for _, s := range sorted {","['for', '_', ',', 's', ':=', 'range', 'sorted', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
47,        fmt.Println(s),"['fmt', '.', 'Println', '(', 's', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
48,    },['}'],['OPERATOR']
49,},['}'],['OPERATOR']
50,"func topoSort(g graph) ([]string, error) {","['func', 'topoSort', '(', 'g', 'graph', ')', '([]', 'string', ',', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
51,    sccs := tarjanSCC(g),"['sccs', ':=', 'tarjanSCC', '(', 'g', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
52,"    sorted := make([]string, len(sccs))","['sorted', ':=', 'make', '([]', 'string', ',', 'len', '(', 'sccs', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
53,"    for i, s := range sccs {","['for', 'i', ',', 's', ':=', 'range', 'sccs', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
54,        if len(s) != 1 {,"['if', 'len', '(', 's', ')', '!=', '1', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
55,"            return nil, fmt.Errorf(""found directed cycle: %q"", s)","['return', 'nil', ',', 'fmt', '.', 'Errorf', '(', '""found directed cycle: %q""', ',', 's', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
56,        },['}'],['OPERATOR']
57,        sorted[i] = s[0],"['sorted', '[', 'i', ']', '=', 's', '[', '0', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
58,    },['}'],['OPERATOR']
59,"    return sorted, nil","['return', 'sorted', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
60,},['}'],['OPERATOR']
61,// graph is an edge list representation of a directed graph.,"['//', 'graph', 'is', 'an', 'edge', 'list', 'representation', 'of', 'a', 'directed', 'graph.']","['COMMENT', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'IN', 'DT', 'JJ', 'NN']"
62,type graph map[string]set,"['type', 'graph', 'map', '[', 'string', ']', 'set']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
63,// set is an string set.,"['//', 'set', 'is', 'an', 'string', 'set.']","['COMMENT', 'NN', 'VBZ', 'DT', 'NN', 'NN']"
64,type set map[string]struct{},"['type', 'set', 'map', '[', 'string', ']', 'struct', '{}']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR']"
65,func after(i []string) set {,"['func', 'after', '(', 'i', '[]', 'string', ')', 'set', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
66,    if len(i) == 0 {,"['if', 'len', '(', 'i', ')', '==', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
67,        return nil,"['return', 'nil']","['KEYWORD', 'IDENTIFIER']"
68,    },['}'],['OPERATOR']
69,    s := make(set),"['s', ':=', 'make', '(', 'set', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
70,"    for _, v := range i {","['for', '_', ',', 'v', ':=', 'range', 'i', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
71,        s[v] = struct{}{},"['s', '[', 'v', ']', '=', 'struct', '{}{}']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'KEYWORD', 'OPERATOR']"
72,    },['}'],['OPERATOR']
73,    return s,"['return', 's']","['KEYWORD', 'IDENTIFIER']"
74,},['}'],['OPERATOR']
75,// tarjanSCC returns a the strongly connected components of the,"['//', 'tarjanSCC', 'returns', 'a', 'the', 'strongly', 'connected', 'components', 'of', 'the']","['COMMENT', 'NN', 'VBZ', 'DT', 'DT', 'RB', 'JJ', 'NNS', 'IN', 'DT']"
76,// directed graph g.,"['//', 'directed', 'graph', 'g.']","['COMMENT', 'VBN', 'NN', 'NN']"
77,func tarjanSCC(g graph) [][]string {,"['func', 'tarjanSCC', '(', 'g', 'graph', ')', '[][]', 'string', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
78,    t := tarjan{,"['t', ':=', 'tarjan', '{']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
79,"        g: g,","['g', ':', 'g', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
80,"        indexTable: make(map[string]int, len(g)),","['indexTable', ':', 'make', '(', 'map', '[', 'string', ']', 'int', ',', 'len', '(', 'g', ')),']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
81,"        lowLink:    make(map[string]int, len(g)),","['lowLink', ':', 'make', '(', 'map', '[', 'string', ']', 'int', ',', 'len', '(', 'g', ')),']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
82,"        onStack:    make(map[string]bool, len(g)),","['onStack', ':', 'make', '(', 'map', '[', 'string', ']', 'bool', ',', 'len', '(', 'g', ')),']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
83,    },['}'],['OPERATOR']
84,    for v := range t.g {,"['for', 'v', ':=', 'range', 't', '.', 'g', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
85,        if t.indexTable[v] == 0 {,"['if', 't', '.', 'indexTable', '[', 'v', ']', '==', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
86,            t.strongconnect(v),"['t', '.', 'strongconnect', '(', 'v', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
87,        },['}'],['OPERATOR']
88,    },['}'],['OPERATOR']
89,    return t.sccs,"['return', 't', '.', 'sccs']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
90,},['}'],['OPERATOR']
91,// tarjan implements Tarjan's strongly connected component finding,"['//', 'tarjan', 'implements', ""Tarjan's"", 'strongly', 'connected', 'component', 'finding']","['COMMENT', 'NN', 'NNS', 'NNP', 'RB', 'VBD', 'NN', 'NN']"
92,// algorithm. The implementation is from the pseudocode at,"['//', 'algorithm.', 'The', 'implementation', 'is', 'from', 'the', 'pseudocode', 'at']","['COMMENT', 'IN', 'DT', 'NN', 'VBZ', 'IN', 'DT', 'NN', 'IN']"
93,//,['//'],['COMMENT']
94,// http://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm,"['//', 'http:en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm']","['COMMENT', 'NN']"
95,//,['//'],['COMMENT']
96,type tarjan struct {,"['type', 'tarjan', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
97,    g graph,"['g', 'graph']","['IDENTIFIER', 'IDENTIFIER']"
98,    index      int,"['index', 'int']","['IDENTIFIER', 'IDENTIFIER']"
99,    indexTable map[string]int,"['indexTable', 'map', '[', 'string', ']', 'int']","['IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
100,    lowLink    map[string]int,"['lowLink', 'map', '[', 'string', ']', 'int']","['IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
101,    onStack    map[string]bool,"['onStack', 'map', '[', 'string', ']', 'bool']","['IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
102,    stack []string,"['stack', '[]', 'string']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
103,    sccs [][]string,"['sccs', '[][]', 'string']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
104,},['}'],['OPERATOR']
105,// strongconnect is the strongconnect function described in the,"['//', 'strongconnect', 'is', 'the', 'strongconnect', 'function', 'described', 'in', 'the']","['COMMENT', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'VBN', 'IN', 'DT']"
106,// wikipedia article.,"['//', 'wikipedia', 'article.']","['COMMENT', 'NN', 'NN']"
107,func (t *tarjan) strongconnect(v string) {,"['func', '(', 't', '*', 'tarjan', ')', 'strongconnect', '(', 'v', 'string', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
108,    // Set the depth index for v to the smallest unused index.,"['//', 'Set', 'the', 'depth', 'index', 'for', 'v', 'to', 'the', 'smallest', 'unused', 'index.']","['COMMENT', 'NNP', 'DT', 'NN', 'NN', 'IN', 'NN', 'TO', 'DT', 'JJS', 'JJ', 'NN']"
109,    t.index++,"['t', '.', 'index', '++']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
110,    t.indexTable[v] = t.index,"['t', '.', 'indexTable', '[', 'v', ']', '=', 't', '.', 'index']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
111,    t.lowLink[v] = t.index,"['t', '.', 'lowLink', '[', 'v', ']', '=', 't', '.', 'index']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
112,"    t.stack = append(t.stack, v)","['t', '.', 'stack', '=', 'append', '(', 't', '.', 'stack', ',', 'v', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
113,    t.onStack[v] = true,"['t', '.', 'onStack', '[', 'v', ']', '=', 'true']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
114,    // Consider successors of v.,"['//', 'Consider', 'successors', 'of', 'v.']","['COMMENT', 'VB', 'NNS', 'IN', 'NN']"
115,    for w := range t.g[v] {,"['for', 'w', ':=', 'range', 't', '.', 'g', '[', 'v', ']', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
116,        if t.indexTable[w] == 0 {,"['if', 't', '.', 'indexTable', '[', 'w', ']', '==', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
117,            // Successor w has not yet been visited; recur on it.,"['//', 'Successor', 'w', 'has', 'not', 'yet', 'been', 'visited;', 'recur', 'on', 'it.']","['COMMENT', 'NNP', 'NN', 'VBZ', 'RB', 'RB', 'VBN', 'JJ', 'NN', 'IN', 'NN']"
118,            t.strongconnect(w),"['t', '.', 'strongconnect', '(', 'w', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
119,"            t.lowLink[v] = min(t.lowLink[v], t.lowLink[w])","['t', '.', 'lowLink', '[', 'v', ']', '=', 'min', '(', 't', '.', 'lowLink', '[', 'v', '],', 't', '.', 'lowLink', '[', 'w', '])']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
120,        } else if t.onStack[w] {,"['}', 'else', 'if', 't', '.', 'onStack', '[', 'w', ']', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
121,            // Successor w is in stack s and hence in the current SCC.,"['//', 'Successor', 'w', 'is', 'in', 'stack', 's', 'and', 'hence', 'in', 'the', 'current', 'SCC.']","['COMMENT', 'NNP', 'NN', 'VBZ', 'IN', 'NN', 'NN', 'CC', 'NN', 'IN', 'DT', 'JJ', 'NN']"
122,"            t.lowLink[v] = min(t.lowLink[v], t.indexTable[w])","['t', '.', 'lowLink', '[', 'v', ']', '=', 'min', '(', 't', '.', 'lowLink', '[', 'v', '],', 't', '.', 'indexTable', '[', 'w', '])']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
123,        },['}'],['OPERATOR']
124,    },['}'],['OPERATOR']
125,"    // If v is a root node, pop the stack and generate an SCC.","['//', 'If', 'v', 'is', 'a', 'root', 'node,', 'pop', 'the', 'stack', 'and', 'generate', 'an', 'SCC.']","['COMMENT', 'IN', 'NN', 'VBZ', 'DT', 'NN', 'JJ', 'NN', 'DT', 'NN', 'CC', 'VB', 'DT', 'NN']"
126,    if t.lowLink[v] == t.indexTable[v] {,"['if', 't', '.', 'lowLink', '[', 'v', ']', '==', 't', '.', 'indexTable', '[', 'v', ']', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
127,        // Start a new strongly connected component.,"['//', 'Start', 'a', 'new', 'strongly', 'connected', 'component.']","['COMMENT', 'VB', 'DT', 'JJ', 'RB', 'VBN', 'NN']"
128,        var (,"['var', '(']","['KEYWORD', 'OPERATOR']"
129,            scc []string,"['scc', '[]', 'string']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
130,            w   string,"['w', 'string']","['IDENTIFIER', 'IDENTIFIER']"
131,        ),[')'],['OPERATOR']
132,        for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
133,"            w, t.stack = t.stack[len(t.stack)-1], t.stack[:len(t.stack)-1]","['w', ',', 't', '.', 'stack', '=', 't', '.', 'stack', '[', 'len', '(', 't', '.', 'stack', ')-', '1', '],', 't', '.', 'stack', '[:', 'len', '(', 't', '.', 'stack', ')-', '1', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
134,            t.onStack[w] = false,"['t', '.', 'onStack', '[', 'w', ']', '=', 'false']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
135,            // Add w to current strongly connected component.,"['//', 'Add', 'w', 'to', 'current', 'strongly', 'connected', 'component.']","['COMMENT', 'NNP', 'VBP', 'TO', 'JJ', 'RB', 'VBN', 'NN']"
136,"            scc = append(scc, w)","['scc', '=', 'append', '(', 'scc', ',', 'w', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
137,            if w == v {,"['if', 'w', '==', 'v', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
138,                break,['break'],['KEYWORD']
139,            },['}'],['OPERATOR']
140,        },['}'],['OPERATOR']
141,        // Output the current strongly connected component.,"['//', 'Output', 'the', 'current', 'strongly', 'connected', 'component.']","['COMMENT', 'IN', 'DT', 'JJ', 'RB', 'VBN', 'NN']"
142,"        t.sccs = append(t.sccs, scc)","['t', '.', 'sccs', '=', 'append', '(', 't', '.', 'sccs', ',', 'scc', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
143,    },['}'],['OPERATOR']
144,},['}'],['OPERATOR']
145,"func min(a, b int) int {","['func', 'min', '(', 'a', ',', 'b', 'int', ')', 'int', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
146,    if a < b {,"['if', 'a', '<', 'b', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
147,        return a,"['return', 'a']","['KEYWORD', 'IDENTIFIER']"
148,    },['}'],['OPERATOR']
149,    return b,"['return', 'b']","['KEYWORD', 'IDENTIFIER']"
150,},['}'],['OPERATOR']
151,"

Note that running this code repeatedly will not result in the same strict ordering of output since a number of the paths are not definitively orderable relative to each other (this won't show up in the playground since the results are cached - you can see this though by wrapping the call to tarjanSCC).

Although it may be easier to directly implement a topological sort, by using Tarjan's SCC algorithm, we are able to find the cause of a sort failure, for example here (cf with the same data here).
","['Note', 'that', 'running', 'this', 'code', 'repeatedly', 'will', 'not', 'result', 'in', 'the', 'same', 'strict', 'ordering', 'of', 'output', 'since', 'a', 'number', 'of', 'the', 'paths', 'are', 'not', 'definitively', 'orderable', 'relative', 'to', 'each', 'other', '(this', ""won't"", 'show', 'up', 'in', 'the', 'playground', 'since', 'the', 'results', 'are', 'cached', '-', 'you', 'can', 'see', 'this', 'though', 'by', 'wrapping', 'the', 'call', 'to', 'tarjanSCC).', 'Although', 'it', 'may', 'be', 'easier', 'to', 'directly', 'implement', 'a', 'topological', 'sort,', 'by', 'using', ""Tarjan's"", 'SCC', 'algorithm,', 'we', 'are', 'able', 'to', 'find', 'the', 'cause', 'of', 'a', 'sort', 'failure,', 'for', 'example', 'here', '(cf', 'with', 'the', 'same', 'data', 'here).']","['NN', 'IN', 'VBG', 'DT', 'NN', 'RB', 'MD', 'RB', 'VB', 'IN', 'DT', 'JJ', 'JJ', 'NN', 'IN', 'NN', 'IN', 'DT', 'NN', 'IN', 'DT', 'NNS', 'VBP', 'RB', 'RB', 'JJ', 'JJ', 'TO', 'DT', 'JJ', 'VBP', 'NN', 'VB', 'RP', 'IN', 'DT', 'NN', 'IN', 'DT', 'NNS', 'VBP', 'VBN', ':', 'PRP', 'MD', 'VB', 'DT', 'IN', 'IN', 'VBG', 'DT', 'NN', 'TO', 'VB', 'IN', 'PRP', 'MD', 'VB', 'JJR', 'TO', 'RB', 'VB', 'DT', 'JJ', 'NN', 'IN', 'VBG', 'NNP', 'NNP', 'IN', 'PRP', 'VBP', 'JJ', 'TO', 'VB', 'DT', 'NN', 'IN', 'DT', 'NN', 'NN', 'IN', 'NN', 'RB', 'VBZ', 'IN', 'DT', 'JJ', 'NNS', 'NN']"
