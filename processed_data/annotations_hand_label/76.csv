,text,token,annotation
0,"I promised to provide my example, here it comes. Basically my solution establishes an ssh tunnel to the remote server and queries the remote database through this tunnel. The ssh tunnel is part of the solution.

The first thing I had to do is to convert my PuTTY .ppk private key file into a valid OpenSSH .pem key file. This can easily be done using the Export feature in PuTTYgen. As I wanted to support password encrypted private keys I also needed a function to decrypt the key and reformat it from its decrypted raw format into a valid format accepted by golang.org/x/crypto/ssh/ParsePrivateKey, which is needed to get the list of signers for authentication.

The solution itself consists of a package contained in two files. The main part of the application is done in main.go which contains all relevant data assignments as well as the code related to the database query. Everything related to ssh tunneling and key handling is contained in sshTunnel.go.

The solution does not provide a mechanismn for a secure password store, nor does it ask for a password. The password is provided in the code. However, it would not be too complicated to implement a callback method for password requests.

Please note: from a performance perspective this is not an ideal solution. It also lacks of proper error handling. I have provided this as an example.

The example is a tested and working example. I developed and used this from a Windows 8.1 PC. The database server is on a remote Linux system. All you need to change is the data and the query part in main.go.

Here is the first part contained in main.go:

","['I', 'promised', 'to', 'provide', 'my', 'example,', 'here', 'it', 'comes.', 'Basically', 'my', 'solution', 'establishes', 'an', 'ssh', 'tunnel', 'to', 'the', 'remote', 'server', 'and', 'queries', 'the', 'remote', 'database', 'through', 'this', 'tunnel.', 'The', 'ssh', 'tunnel', 'is', 'part', 'of', 'the', 'solution.', 'The', 'first', 'thing', 'I', 'had', 'to', 'do', 'is', 'to', 'convert', 'my', 'PuTTY', '.ppk', 'private', 'key', 'file', 'into', 'a', 'valid', 'OpenSSH', '.pem', 'key', 'file.', 'This', 'can', 'easily', 'be', 'done', 'using', 'the', 'Export', 'feature', 'in', 'PuTTYgen.', 'As', 'I', 'wanted', 'to', 'support', 'password', 'encrypted', 'private', 'keys', 'I', 'also', 'needed', 'a', 'function', 'to', 'decrypt', 'the', 'key', 'and', 'reformat', 'it', 'from', 'its', 'decrypted', 'raw', 'format', 'into', 'a', 'valid', 'format', 'accepted', 'by', 'golang.org/x/crypto/ssh/ParsePrivateKey,', 'which', 'is', 'needed', 'to', 'get', 'the', 'list', 'of', 'signers', 'for', 'authentication.', 'The', 'solution', 'itself', 'consists', 'of', 'a', 'package', 'contained', 'in', 'two', 'files.', 'The', 'main', 'part', 'of', 'the', 'application', 'is', 'done', 'in', 'main.go', 'which', 'contains', 'all', 'relevant', 'data', 'assignments', 'as', 'well', 'as', 'the', 'code', 'related', 'to', 'the', 'database', 'query.', 'Everything', 'related', 'to', 'ssh', 'tunneling', 'and', 'key', 'handling', 'is', 'contained', 'in', 'sshTunnel.go.', 'The', 'solution', 'does', 'not', 'provide', 'a', 'mechanismn', 'for', 'a', 'secure', 'password', 'store,', 'nor', 'does', 'it', 'ask', 'for', 'a', 'password.', 'The', 'password', 'is', 'provided', 'in', 'the', 'code.', 'However,', 'it', 'would', 'not', 'be', 'too', 'complicated', 'to', 'implement', 'a', 'callback', 'method', 'for', 'password', 'requests.', 'Please', 'note:', 'from', 'a', 'performance', 'perspective', 'this', 'is', 'not', 'an', 'ideal', 'solution.', 'It', 'also', 'lacks', 'of', 'proper', 'error', 'handling.', 'I', 'have', 'provided', 'this', 'as', 'an', 'example.', 'The', 'example', 'is', 'a', 'tested', 'and', 'working', 'example.', 'I', 'developed', 'and', 'used', 'this', 'from', 'a', 'Windows', '8.1', 'PC.', 'The', 'database', 'server', 'is', 'on', 'a', 'remote', 'Linux', 'system.', 'All', 'you', 'need', 'to', 'change', 'is', 'the', 'data', 'and', 'the', 'query', 'part', 'in', 'main.go.', 'Here', 'is', 'the', 'first', 'part', 'contained', 'in', 'main.go:']","['PRP', 'VBD', 'TO', 'VB', 'PRP$', 'NN', 'RB', 'PRP', 'VBZ', 'NNP', 'PRP$', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'TO', 'DT', 'JJ', 'NN', 'CC', 'VBZ', 'DT', 'JJ', 'NN', 'IN', 'DT', 'VBZ', 'DT', 'JJ', 'NN', 'VBZ', 'NN', 'IN', 'DT', 'NN', 'DT', 'JJ', 'NN', 'PRP', 'VBD', 'TO', 'VB', 'VBZ', 'TO', 'VB', 'PRP$', 'NNP', 'NNP', 'JJ', 'NN', 'NN', 'IN', 'DT', 'JJ', 'NNP', 'NNP', 'JJ', 'NN', 'DT', 'MD', 'RB', 'VB', 'VBN', 'VBG', 'DT', 'NNP', 'NN', 'IN', 'NNP', 'IN', 'PRP', 'VBD', 'TO', 'VB', 'NN', 'VBN', 'JJ', 'NNS', 'PRP', 'RB', 'VBD', 'DT', 'NN', 'TO', 'VB', 'DT', 'NN', 'CC', 'VB', 'PRP', 'IN', 'PRP$', 'JJ', 'JJ', 'NN', 'IN', 'DT', 'JJ', 'NN', 'VBN', 'IN', 'NN', 'WDT', 'VBZ', 'VBN', 'TO', 'VB', 'DT', 'NN', 'IN', 'NNS', 'IN', 'IN', 'DT', 'NN', 'PRP', 'VBZ', 'IN', 'DT', 'NN', 'VBN', 'IN', 'CD', 'VBP', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NN', 'VBZ', 'VBN', 'IN', 'NN', 'WDT', 'VBZ', 'DT', 'JJ', 'NNS', 'NNS', 'RB', 'RB', 'IN', 'DT', 'NN', 'VBN', 'TO', 'DT', 'NN', 'NN', 'NNP', 'VBD', 'TO', 'VB', 'NN', 'CC', 'JJ', 'NN', 'VBZ', 'VBN', 'IN', 'NN', 'DT', 'NN', 'VBZ', 'RB', 'VB', 'DT', 'NN', 'IN', 'DT', 'NN', 'NN', 'NN', 'CC', 'VBZ', 'PRP', 'VB', 'IN', 'DT', 'NN', 'DT', 'NN', 'VBZ', 'VBN', 'IN', 'DT', 'NN', 'NNP', 'PRP', 'MD', 'RB', 'VB', 'RB', 'VBN', 'TO', 'VB', 'DT', 'NN', 'NN', 'IN', 'NN', 'NN', 'NNP', 'RB', 'IN', 'DT', 'NN', 'NN', 'DT', 'VBZ', 'RB', 'DT', 'NN', 'NN', 'PRP', 'RB', 'VBZ', 'IN', 'JJ', 'NN', 'NN', 'PRP', 'VBP', 'VBN', 'DT', 'IN', 'DT', 'NN', 'DT', 'NN', 'VBZ', 'DT', 'JJ', 'CC', 'VBG', 'NN', 'PRP', 'VBD', 'CC', 'VBD', 'DT', 'IN', 'DT', 'NNP', 'CD', 'NNP', 'DT', 'NN', 'NN', 'VBZ', 'IN', 'DT', 'JJ', 'NNP', 'NN', 'NNP', 'PRP', 'VBP', 'TO', 'VB', 'VBZ', 'DT', 'NN', 'CC', 'DT', 'JJ', 'NN', 'IN', 'NN', 'RB', 'VBZ', 'DT', 'JJ', 'NN', 'VBN', 'IN', 'NN']"
1,// mysqlSSHtunnel project main.go,"['//', 'mysqlSSHtunnel', 'project', 'main.go']","['COMMENT', 'NNS', 'NN', 'NN']"
2,// Establish an ssh tunnel and connect to a remote mysql server using,"['//', 'Establish', 'an', 'ssh', 'tunnel', 'and', 'connect', 'to', 'a', 'remote', 'mysql', 'server', 'using']","['COMMENT', 'VB', 'DT', 'JJ', 'NN', 'CC', 'NN', 'TO', 'DT', 'JJ', 'NN', 'NN', 'VBG']"
3,// go-sql-driver for database queries. Encrypted private key pem files,"['//', 'go-sql-driver', 'for', 'database', 'queries.', 'Encrypted', 'private', 'key', 'pem', 'files']","['COMMENT', 'NN', 'IN', 'NN', 'NN', 'NNP', 'JJ', 'NN', 'NN', 'NNS']"
4,// are supported.,"['//', 'are', 'supported.']","['COMMENT', 'VBP', 'JJ']"
5,//,['//'],['COMMENT']
6,// This is an example to give an idea. It's far from a performant solution. It ,"['//', 'This', 'is', 'an', 'example', 'to', 'give', 'an', 'idea.', ""It's"", 'far', 'from', 'a', 'performant', 'solution.', 'It']","['COMMENT', 'DT', 'VBZ', 'DT', 'NN', 'TO', 'VB', 'DT', 'NN', 'NNP', 'RB', 'IN', 'DT', 'JJ', 'NN', 'PRP']"
7,// lacks of proper error handling and I'm sure it could really be much better ,"['//', 'lacks', 'of', 'proper', 'error', 'handling', 'and', ""I'm"", 'sure', 'it', 'could', 'really', 'be', 'much', 'better']","['COMMENT', 'NNS', 'IN', 'JJ', 'NN', 'NN', 'CC', 'NNP', 'VBP', 'PRP', 'MD', 'RB', 'VB', 'RB', 'JJR']"
8,"// implemented. Please forgive me, as I just started with Go about 2 weeks ago.","['//', 'implemented.', 'Please', 'forgive', 'me,', 'as', 'I', 'just', 'started', 'with', 'Go', 'about', '2', 'weeks', 'ago.']","['COMMENT', 'JJ', 'NNP', 'JJ', 'NN', 'IN', 'PRP', 'RB', 'VBD', 'IN', 'NNP', 'IN', 'CD', 'NNS', 'NN']"
9,//,['//'],['COMMENT']
10,// The database used in this example is from a real Opensimulator installation.,"['//', 'The', 'database', 'used', 'in', 'this', 'example', 'is', 'from', 'a', 'real', 'Opensimulator', 'installation.']","['COMMENT', 'DT', 'NN', 'VBN', 'IN', 'DT', 'NN', 'VBZ', 'IN', 'DT', 'JJ', 'NN', 'NN']"
11,// It queries the migrations table in the opensim database.,"['//', 'It', 'queries', 'the', 'migrations', 'table', 'in', 'the', 'opensim', 'database.']","['COMMENT', 'PRP', 'VBZ', 'DT', 'NNS', 'NN', 'IN', 'DT', 'NN', 'NN']"
12,//,['//'],['COMMENT']
13,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
14,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
15,"    ""database/sql""","['""database/sql""']",['STRING_LITERAL']
16,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
17,"    _ ""github.com/go-sql-driver/mysql""","['_', '""github.com/go-sql-driver/mysql""']","['IDENTIFIER', 'STRING_LITERAL']"
18,"    ""os""","['""os""']",['STRING_LITERAL']
19,),[')'],['OPERATOR']
20,// Declare your connection data and user credentials here,"['//', 'Declare', 'your', 'connection', 'data', 'and', 'user', 'credentials', 'here']","['COMMENT', 'NNP', 'PRP$', 'NN', 'NNS', 'CC', 'NN', 'NNS', 'RB']"
21,const (,"['const', '(']","['KEYWORD', 'OPERATOR']"
22,    // ssh connection related data,"['//', 'ssh', 'connection', 'related', 'data']","['COMMENT', 'JJ', 'NN', 'VBN', 'NNS']"
23,"    sshServerHost     = ""test.example.com""","['sshServerHost', '=', '""test.example.com""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
24,    sshServerPort     = 22,"['sshServerPort', '=', '22']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
25,"    sshUserName       = ""tester""","['sshUserName', '=', '""tester""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
26,"    sshPrivateKeyFile = ""testkey.pem"" // exported as OpenSSH key from .ppk","['sshPrivateKeyFile', '=', '""testkey.pem""', '//', 'exported', 'as', 'OpenSSH', 'key', 'from', '.ppk']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'COMMENT', 'VBN', 'IN', 'NNP', 'NN', 'IN', 'NN']"
27,"    sshKeyPassphrase  = ""testoster0n"" // key file encrytion password","['sshKeyPassphrase', '=', '""testoster0n""', '//', 'key', 'file', 'encrytion', 'password']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'COMMENT', 'JJ', 'NN', 'NN', 'NN']"
28,    // ssh tunneling related data,"['//', 'ssh', 'tunneling', 'related', 'data']","['COMMENT', 'NNS', 'VBG', 'VBN', 'NNS']"
29,"    sshLocalHost  = ""localhost"" // local localhost ip (client side)","['sshLocalHost', '=', '""localhost""', '//', 'local', 'localhost', 'ip', '(client', 'side)']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'COMMENT', 'JJ', 'NN', 'NN', 'NN', 'NN']"
30,    sshLocalPort  = 9000        // local port used to forward the connection,"['sshLocalPort', '=', '9000', '//', 'local', 'port', 'used', 'to', 'forward', 'the', 'connection']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'COMMENT', 'JJ', 'NN', 'VBN', 'TO', 'VB', 'DT', 'NN']"
31,"    sshRemoteHost = ""127.0.0.1"" // remote local ip (server side)","['sshRemoteHost', '=', '""127.0.0.1""', '//', 'remote', 'local', 'ip', '(server', 'side)']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'COMMENT', 'VB', 'JJ', 'NN', 'NN', 'NN']"
32,    sshRemotePort = 3306        // remote MySQL port,"['sshRemotePort', '=', '3306', '//', 'remote', 'MySQL', 'port']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'COMMENT', 'JJ', 'NNP', 'NN']"
33,    // MySQL access data,"['//', 'MySQL', 'access', 'data']","['COMMENT', 'NNP', 'NN', 'NNS']"
34,"    mySqlUsername = ""opensim""","['mySqlUsername', '=', '""opensim""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
35,"    mySqlPassword = ""h0tgrits""","['mySqlPassword', '=', '""h0tgrits""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
36,"    mySqlDatabase = ""opensimdb""","['mySqlDatabase', '=', '""opensimdb""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
37,),[')'],['OPERATOR']
38,// The main entry point of the application,"['//', 'The', 'main', 'entry', 'point', 'of', 'the', 'application']","['COMMENT', 'DT', 'JJ', 'NN', 'NN', 'IN', 'DT', 'NN']"
39,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
40,"    fmt.Println(""-> mysqlSSHtunnel"")","['fmt.Println(""-> mysqlSSHtunnel"")']",['FUNCTION_CALL']
41,    tunnel := sshTunnel() // Initialize sshTunnel,"['tunnel', ':=', 'sshTunnel', '()', '//', 'Initialize', 'sshTunnel']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'COMMENT', 'NNP', 'NN']"
42,    go tunnel.Start()     // Start the sshTunnel,"['go', 'tunnel.Start()', '//', 'Start', 'the', 'sshTunnel']","['KEYWORD', 'FUNCTION_CALL', 'COMMENT', 'VB', 'DT', 'NN']"
43,    // Declare the dsn (aka database connection string),"['//', 'Declare', 'the', 'dsn', '(aka', 'database', 'connection', 'string)']","['COMMENT', 'NNP', 'DT', 'NN', 'NNP', 'NN', 'NN', 'NN']"
44,"    // dsn := ""opensim:h0tgrits@tcp(localhost:9000)/opensimdb""","['//', 'dsn', ':=', '""opensim:h0tgrits@tcp(localhost:9000)/opensimdb""']","['COMMENT', 'NN', 'CD', 'NN']"
45,"    dsn := fmt.Sprintf(""%s:%s@tcp(%s:%d)/%s"",","['dsn', ':=', 'fmt.Sprintf(""%s:%s@tcp(%s:%d)', 's', ',']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL', 'IDENTIFIER', 'OPERATOR']"
46,"        mySqlUsername, mySqlPassword, sshLocalHost, sshLocalPort, mySqlDatabase)","['mySqlUsername', ',', 'mySqlPassword', ',', 'sshLocalHost', ',', 'sshLocalPort', ',', 'mySqlDatabase', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
47,    // Open the database,"['//', 'Open', 'the', 'database']","['COMMENT', 'VB', 'DT', 'NN']"
48,"    db, err := sql.Open(""mysql"", dsn)","['db', ',', 'err', ':=', 'sql.Open(""mysql"", dsn)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
49,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
50,        dbErrorHandler(err),"['dbErrorHandler', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
51,    },['}'],['OPERATOR']
52,    defer db.Close() // keep it open until we are finished,"['defer', 'db.Close()', '//', 'keep', 'it', 'open', 'until', 'we', 'are', 'finished']","['IDENTIFIER', 'FUNCTION_CALL', 'COMMENT', 'VB', 'PRP', 'JJ', 'IN', 'PRP', 'VBP', 'VBN']"
53,    // Simple select query to check migrations (provided here as an example),"['//', 'Simple', 'select', 'query', 'to', 'check', 'migrations', '(provided', 'here', 'as', 'an', 'example)']","['COMMENT', 'JJ', 'JJ', 'NN', 'TO', 'VB', 'NNS', 'VBN', 'RB', 'IN', 'DT', 'NN']"
54,"    rows, err := db.Query(""SELECT * FROM migrations"")","['rows', ',', 'err', ':=', 'db.Query(""SELECT * FROM migrations"")']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
55,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
56,        dbErrorHandler(err),"['dbErrorHandler', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
57,    },['}'],['OPERATOR']
58,    defer rows.Close(),"['defer', 'rows.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
59,    // Iterate though the rows returned and print them,"['//', 'Iterate', 'though', 'the', 'rows', 'returned', 'and', 'print', 'them']","['COMMENT', 'NNP', 'IN', 'DT', 'NNS', 'VBD', 'CC', 'VB', 'PRP']"
60,    for rows.Next() {,"['for', 'rows.Next()', '{']","['KEYWORD', 'FUNCTION_CALL', 'OPERATOR']"
61,        var version int,"['var', 'version', 'int']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
62,        var name string,"['var', 'name', 'string']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
63,"        if err := rows.Scan(&name, &version); err != nil {","['if', 'err', ':=', 'rows.Scan(&name, &version)', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
64,            dbErrorHandler(err),"['dbErrorHandler', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
65,        },['}'],['OPERATOR']
66,"        fmt.Printf(""%s, %d\n"", name, version)","['fmt.Printf(""%s, %d\\n"", name, version)']",['FUNCTION_CALL']
67,    },['}'],['OPERATOR']
68,    if err := rows.Err(); err != nil {,"['if', 'err', ':=', 'rows.Err()', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
69,        dbErrorHandler(err),"['dbErrorHandler', '(', 'err', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
70,    },['}'],['OPERATOR']
71,    // Done for now,"['//', 'Done', 'for', 'now']","['COMMENT', 'NN', 'IN', 'RB']"
72,"    fmt.Println(""<- mysqlSSHtunnel"")","['fmt.Println(""<- mysqlSSHtunnel"")']",['FUNCTION_CALL']
73,},['}'],['OPERATOR']
74,// Simple mySql error handling (yet to implement),"['//', 'Simple', 'mySql', 'error', 'handling', '(yet', 'to', 'implement)']","['COMMENT', 'JJ', 'NN', 'NN', 'VBG', 'RB', 'TO', 'VB']"
75,func dbErrorHandler(err error) {,"['func', 'dbErrorHandler', '(', 'err', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
76,    switch err := err.(type) {,"['switch', 'err', ':=', 'err', '.(', 'type', ')', '{']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'OPERATOR']"
77,    default:,"['default', ':']","['KEYWORD', 'OPERATOR']"
78,"        fmt.Printf(""Error %s\n"", err)","['fmt.Printf(""Error %s\\n"", err)']",['FUNCTION_CALL']
79,        os.Exit(-1),['os.Exit(-1)'],['FUNCTION_CALL']
80,    },['}'],['OPERATOR']
81,},['}'],['OPERATOR']
82,"

Now the second part in sshTunnel.go:    

","['Now', 'the', 'second', 'part', 'in', 'sshTunnel.go:']","['RB', 'DT', 'JJ', 'NN', 'IN', 'NN']"
83,// mysqlSSHtunnel project sshTunnel.go,"['//', 'mysqlSSHtunnel', 'project', 'sshTunnel.go']","['COMMENT', 'NNS', 'NN', 'NN']"
84,//,['//'],['COMMENT']
85,// Everything regarding the ssh tunnel goes here. Credits go to Svett Ralchev.,"['//', 'Everything', 'regarding', 'the', 'ssh', 'tunnel', 'goes', 'here.', 'Credits', 'go', 'to', 'Svett', 'Ralchev.']","['COMMENT', 'VBG', 'VBG', 'DT', 'NN', 'NN', 'VBZ', 'JJ', 'NNP', 'VBP', 'TO', 'NNP', 'NNP']"
86,// Look at http://blog.ralch.com/tutorial/golang-ssh-tunneling for an excellent,"['//', 'Look', 'at', 'http:blog.ralch.com/tutorial/golang-ssh-tunneling', 'for', 'an', 'excellent']","['COMMENT', 'VB', 'IN', 'NN', 'IN', 'DT', 'NN']"
87,// explanation and most ssh-tunneling related details used in this code.,"['//', 'explanation', 'and', 'most', 'ssh-tunneling', 'related', 'details', 'used', 'in', 'this', 'code.']","['COMMENT', 'NN', 'CC', 'RBS', 'JJ', 'JJ', 'NNS', 'VBN', 'IN', 'DT', 'NN']"
88,//,['//'],['COMMENT']
89,// PEM key decryption is valid for password proected SSH-2 RSA Keys generated as,"['//', 'PEM', 'key', 'decryption', 'is', 'valid', 'for', 'password', 'proected', 'SSH-2', 'RSA', 'Keys', 'generated', 'as']","['COMMENT', 'NNP', 'JJ', 'NN', 'VBZ', 'JJ', 'IN', 'NN', 'VBN', 'NNP', 'NNP', 'NNP', 'VBD', 'IN']"
90,// .ppk files for putty and exported as OpenSSH .pem keyfile using PuTTYgen.,"['//', '.ppk', 'files', 'for', 'putty', 'and', 'exported', 'as', 'OpenSSH', '.pem', 'keyfile', 'using', 'PuTTYgen.']","['COMMENT', 'JJ', 'NNS', 'IN', 'NN', 'CC', 'VBD', 'IN', 'NNP', 'NNP', 'NN', 'VBG', 'NNP']"
91,//,['//'],['COMMENT']
92,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
93,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
94,"    ""bytes""","['""bytes""']",['STRING_LITERAL']
95,"    ""crypto/x509""","['""crypto/x509""']",['STRING_LITERAL']
96,"    ""encoding/base64""","['""encoding/base64""']",['STRING_LITERAL']
97,"    ""encoding/pem""","['""encoding/pem""']",['STRING_LITERAL']
98,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
99,"    ""golang.org/x/crypto/ssh""","['""golang.org/x/crypto/ssh""']",['STRING_LITERAL']
100,"    ""io""","['""io""']",['STRING_LITERAL']
101,"    ""io/ioutil""","['""io/ioutil""']",['STRING_LITERAL']
102,"    ""net""","['""net""']",['STRING_LITERAL']
103,),[')'],['OPERATOR']
104,// Define an endpoint with ip and port,"['//', 'Define', 'an', 'endpoint', 'with', 'ip', 'and', 'port']","['COMMENT', 'NNP', 'DT', 'NN', 'IN', 'NN', 'CC', 'NN']"
105,type Endpoint struct {,"['type', 'Endpoint', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
106,    Host string,"['Host', 'string']","['IDENTIFIER', 'IDENTIFIER']"
107,    Port int,"['Port', 'int']","['IDENTIFIER', 'IDENTIFIER']"
108,},['}'],['OPERATOR']
109,// Returns an endpoint as ip:port formatted string,"['//', 'Returns', 'an', 'endpoint', 'as', 'ip:port', 'formatted', 'string']","['COMMENT', 'NNP', 'DT', 'NN', 'IN', 'NN', 'VBD', 'NN']"
110,func (endpoint *Endpoint) String() string {,"['func', '(', 'endpoint', '*', 'Endpoint', ')', 'String', '()', 'string', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
111,"    return fmt.Sprintf(""%s:%d"", endpoint.Host, endpoint.Port)","['return', 'fmt.Sprintf(""%s:%d"", endpoint.Host, endpoint.Port)']","['KEYWORD', 'FUNCTION_CALL']"
112,},['}'],['OPERATOR']
113,// Define the endpoints along the tunnel,"['//', 'Define', 'the', 'endpoints', 'along', 'the', 'tunnel']","['COMMENT', 'VB', 'DT', 'NNS', 'IN', 'DT', 'NN']"
114,type SSHtunnel struct {,"['type', 'SSHtunnel', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
115,    Local  *Endpoint,"['Local', '*', 'Endpoint']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
116,    Server *Endpoint,"['Server', '*', 'Endpoint']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
117,    Remote *Endpoint,"['Remote', '*', 'Endpoint']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
118,    Config *ssh.ClientConfig,"['Config', '*', 'ssh', '.', 'ClientConfig']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
119,},['}'],['OPERATOR']
120,// Start the tunnel,"['//', 'Start', 'the', 'tunnel']","['COMMENT', 'VB', 'DT', 'NN']"
121,func (tunnel *SSHtunnel) Start() error {,"['func', '(', 'tunnel', '*', 'SSHtunnel', ')', 'Start', '()', 'error', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
122,"    listener, err := net.Listen(""tcp"", tunnel.Local.String())","['listener', ',', 'err', ':=', 'net.Listen(""tcp"", tunnel.Local.String())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
123,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
124,        return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
125,    },['}'],['OPERATOR']
126,    defer listener.Close(),"['defer', 'listener.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
127,    for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
128,"        conn, err := listener.Accept()","['conn', ',', 'err', ':=', 'listener.Accept()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
129,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
130,            return err,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
131,        },['}'],['OPERATOR']
132,        go tunnel.forward(conn),"['go', 'tunnel.forward(conn)']","['KEYWORD', 'FUNCTION_CALL']"
133,    },['}'],['OPERATOR']
134,},['}'],['OPERATOR']
135,// Port forwarding,"['//', 'Port', 'forwarding']","['COMMENT', 'NNP', 'NN']"
136,func (tunnel *SSHtunnel) forward(localConn net.Conn) {,"['func', '(', 'tunnel', '*', 'SSHtunnel', ')', 'for', 'ward', '(', 'localConn', 'net', '.', 'Conn', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
137,    // Establish connection to the intermediate server,"['//', 'Establish', 'connection', 'to', 'the', 'intermediate', 'server']","['COMMENT', 'JJ', 'NN', 'TO', 'DT', 'JJ', 'NN']"
138,"    serverConn, err := ssh.Dial(""tcp"", tunnel.Server.String(), tunnel.Config)","['serverConn', ',', 'err', ':=', 'ssh.Dial(""tcp"", tunnel.Server.String(), tunnel.Config)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
139,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
140,"        fmt.Printf(""Server dial error: %s\n"", err)","['fmt.Printf(""Server dial error: %s\\n"", err)']",['FUNCTION_CALL']
141,        return,['return'],['KEYWORD']
142,    },['}'],['OPERATOR']
143,    // access the target server,"['//', 'access', 'the', 'target', 'server']","['COMMENT', 'NN', 'DT', 'NN', 'NN']"
144,"    remoteConn, err := serverConn.Dial(""tcp"", tunnel.Remote.String())","['remoteConn', ',', 'err', ':=', 'serverConn.Dial(""tcp"", tunnel.Remote.String())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
145,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
146,"        fmt.Printf(""Remote dial error: %s\n"", err)","['fmt.Printf(""Remote dial error: %s\\n"", err)']",['FUNCTION_CALL']
147,        return,['return'],['KEYWORD']
148,    },['}'],['OPERATOR']
149,    // Transfer the data between  and the remote server,"['//', 'Transfer', 'the', 'data', 'between', 'and', 'the', 'remote', 'server']","['COMMENT', 'VB', 'DT', 'NN', 'IN', 'CC', 'DT', 'JJ', 'NN']"
150,"    copyConn := func(writer, reader net.Conn) {","['copyConn', ':=', 'func', '(', 'writer', ',', 'reader', 'net', '.', 'Conn', ')', '{']","['IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
151,"        _, err := io.Copy(writer, reader)","['_', ',', 'err', ':=', 'io.Copy(writer, reader)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
152,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
153,"            fmt.Printf(""io.Copy error: %s"", err)","['fmt.Printf(""io.Copy error: %s"", err)']",['FUNCTION_CALL']
154,        },['}'],['OPERATOR']
155,    },['}'],['OPERATOR']
156,"    go copyConn(localConn, remoteConn)","['go', 'copyConn', '(', 'localConn', ',', 'remoteConn', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
157,"    go copyConn(remoteConn, localConn)","['go', 'copyConn', '(', 'remoteConn', ',', 'localConn', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
158,},['}'],['OPERATOR']
159,// Decrypt encrypted PEM key data with a passphrase and embed it to key prefix,"['//', 'Decrypt', 'encrypted', 'PEM', 'key', 'data', 'with', 'a', 'passphrase', 'and', 'embed', 'it', 'to', 'key', 'prefix']","['COMMENT', 'NNP', 'VBD', 'NNP', 'JJ', 'NNS', 'IN', 'DT', 'NN', 'CC', 'VBD', 'PRP', 'TO', 'VB', 'NN']"
160,// and postfix header data to make it valid for further private key parsing.,"['//', 'and', 'postfix', 'header', 'data', 'to', 'make', 'it', 'valid', 'for', 'further', 'private', 'key', 'parsing.']","['COMMENT', 'CC', 'VB', 'JJR', 'NNS', 'TO', 'VB', 'PRP', 'VB', 'IN', 'JJ', 'JJ', 'NN', 'NN']"
161,"func DecryptPEMkey(buffer []byte, passphrase string) []byte {","['func', 'DecryptPEMkey', '(', 'buffer', '[]', 'byte', ',', 'passphrase', 'string', ')', '[]', 'byte', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
162,"    block, _ := pem.Decode(buffer)","['block', ',', '_', ':=', 'pem.Decode(buffer)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
163,"    der, err := x509.DecryptPEMBlock(block, []byte(passphrase))","['der', ',', 'err', ':=', 'x509.DecryptPEMBlock(block, []byte(passphrase))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
164,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
165,"        fmt.Println(""decrypt failed: "", err)","['fmt.Println(""decrypt failed: "", err)']",['FUNCTION_CALL']
166,    },['}'],['OPERATOR']
167,    encoded := base64.StdEncoding.EncodeToString(der),"['encoded', ':=', 'base64', '.', 'StdEncoding.EncodeToString(der)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
168,"    encoded = ""-----BEGIN RSA PRIVATE KEY-----\n"" + encoded +","['encoded', '=', '""-----BEGIN RSA PRIVATE KEY-----\\n""', '+', 'encoded', '+']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
169,"        ""\n-----END RSA PRIVATE KEY-----\n""","['""\\n-----END RSA PRIVATE KEY-----\\n""']",['STRING_LITERAL']
170,    return []byte(encoded),"['return', '[]', 'byte', '(', 'encoded', ')']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
171,},['}'],['OPERATOR']
172,// Get the signers from the OpenSSH key file (.pem) and return them for use in,"['//', 'Get', 'the', 'signers', 'from', 'the', 'OpenSSH', 'key', 'file', '(.pem)', 'and', 'return', 'them', 'for', 'use', 'in']","['COMMENT', 'VB', 'DT', 'NNS', 'IN', 'DT', 'NNP', 'NN', 'NN', 'NN', 'CC', 'VB', 'PRP', 'IN', 'NN', 'IN']"
173,// the Authentication method. Decrypt encrypted key data with the passphrase.,"['//', 'the', 'Authentication', 'method.', 'Decrypt', 'encrypted', 'key', 'data', 'with', 'the', 'passphrase.']","['COMMENT', 'DT', 'NNP', 'NN', 'NNP', 'VBD', 'JJ', 'NNS', 'IN', 'DT', 'NN']"
174,"func PublicKeyFile(file string, passphrase string) ssh.AuthMethod {","['func', 'PublicKeyFile', '(', 'file', 'string', ',', 'passphrase', 'string', ')', 'ssh', '.', 'AuthMethod', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
175,"    buffer, err := ioutil.ReadFile(file)","['buffer', ',', 'err', ':=', 'ioutil.ReadFile(file)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
176,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
177,        return nil,"['return', 'nil']","['KEYWORD', 'IDENTIFIER']"
178,    },['}'],['OPERATOR']
179,"    if bytes.Contains(buffer, []byte(""ENCRYPTED"")) {","['if', 'bytes.Contains(buffer, []byte(""ENCRYPTED""))', '{']","['KEYWORD', 'FUNCTION_CALL', 'OPERATOR']"
180,        // Decrypt the key with the passphrase if it has been encrypted,"['//', 'Decrypt', 'the', 'key', 'with', 'the', 'passphrase', 'if', 'it', 'has', 'been', 'encrypted']","['COMMENT', 'NNP', 'DT', 'NN', 'IN', 'DT', 'NN', 'IN', 'PRP', 'VBZ', 'VBN', 'VBN']"
181,"        buffer = DecryptPEMkey(buffer, passphrase)","['buffer', '=', 'DecryptPEMkey', '(', 'buffer', ',', 'passphrase', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
182,    },['}'],['OPERATOR']
183,    // Get the signers from the key,"['//', 'Get', 'the', 'signers', 'from', 'the', 'key']","['COMMENT', 'VB', 'DT', 'NNS', 'IN', 'DT', 'NN']"
184,"    signers, err := ssh.ParsePrivateKey(buffer)","['signers', ',', 'err', ':=', 'ssh.ParsePrivateKey(buffer)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
185,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
186,        return nil,"['return', 'nil']","['KEYWORD', 'IDENTIFIER']"
187,    },['}'],['OPERATOR']
188,    return ssh.PublicKeys(signers),"['return', 'ssh.PublicKeys(signers)']","['KEYWORD', 'FUNCTION_CALL']"
189,},['}'],['OPERATOR']
190,// Define the ssh tunnel using its endpoint and config data,"['//', 'Define', 'the', 'ssh', 'tunnel', 'using', 'its', 'endpoint', 'and', 'config', 'data']","['COMMENT', 'VB', 'DT', 'NN', 'NN', 'VBG', 'PRP$', 'NN', 'CC', 'NN', 'NNS']"
191,func sshTunnel() *SSHtunnel {,"['func', 'sshTunnel', '()', '*', 'SSHtunnel', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
192,    localEndpoint := &Endpoint{,"['localEndpoint', ':=', '&', 'Endpoint', '{']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
193,"        Host: sshLocalHost,","['Host', ':', 'sshLocalHost', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
194,"        Port: sshLocalPort,","['Port', ':', 'sshLocalPort', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
195,    },['}'],['OPERATOR']
196,    serverEndpoint := &Endpoint{,"['serverEndpoint', ':=', '&', 'Endpoint', '{']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
197,"        Host: sshServerHost,","['Host', ':', 'sshServerHost', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
198,"        Port: sshServerPort,","['Port', ':', 'sshServerPort', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
199,    },['}'],['OPERATOR']
200,    remoteEndpoint := &Endpoint{,"['remoteEndpoint', ':=', '&', 'Endpoint', '{']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
201,"        Host: sshRemoteHost,","['Host', ':', 'sshRemoteHost', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
202,"        Port: sshRemotePort,","['Port', ':', 'sshRemotePort', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
203,    },['}'],['OPERATOR']
204,    sshConfig := &ssh.ClientConfig{,"['sshConfig', ':=', '&', 'ssh', '.', 'ClientConfig', '{']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
205,"        User: sshUserName,","['User', ':', 'sshUserName', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
206,        Auth: []ssh.AuthMethod{,"['Auth', ':', '[]', 'ssh', '.', 'AuthMethod', '{']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
207,"            PublicKeyFile(sshPrivateKeyFile, sshKeyPassphrase)},","['PublicKeyFile', '(', 'sshPrivateKeyFile', ',', 'sshKeyPassphrase', ')},']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
208,    },['}'],['OPERATOR']
209,    return &SSHtunnel{,"['return', '&', 'SSHtunnel', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
210,"        Config: sshConfig,","['Config', ':', 'sshConfig', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
211,"        Local:  localEndpoint,","['Local', ':', 'localEndpoint', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
212,"        Server: serverEndpoint,","['Server', ':', 'serverEndpoint', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
213,"        Remote: remoteEndpoint,","['Remote', ':', 'remoteEndpoint', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
214,    },['}'],['OPERATOR']
215,},['}'],['OPERATOR']
