,text,token,annotation
0,"I've boiled this down to the simplest test case I can. I need to take RSASSA-PSS signatures that were generated in Python and validate them in Go. The Python code to create the RSA keypair and sign with it is as follows:

","[""I've"", 'boiled', 'this', 'down', 'to', 'the', 'simplest', 'test', 'case', 'I', 'can.', 'I', 'need', 'to', 'take', 'RSASSA-PSS', 'signatures', 'that', 'were', 'generated', 'in', 'Python', 'and', 'validate', 'them', 'in', 'Go.', 'The', 'Python', 'code', 'to', 'create', 'the', 'RSA', 'keypair', 'and', 'sign', 'with', 'it', 'is', 'as', 'follows:']","['NNP', 'VBD', 'DT', 'NN', 'TO', 'DT', 'JJS', 'NN', 'NN', 'PRP', 'VBP', 'PRP', 'VBP', 'TO', 'VB', 'JJ', 'NNS', 'WDT', 'VBD', 'VBN', 'IN', 'NNP', 'CC', 'VB', 'PRP', 'IN', 'NNP', 'DT', 'NNP', 'NN', 'TO', 'VB', 'DT', 'NNP', 'NN', 'CC', 'NN', 'IN', 'PRP', 'VBZ', 'IN', 'NN']"
1,>>> from tuf import pycrypto_keys as k,"['>>>', 'from', 'tuf', 'import', 'pycrypto_keys', 'as', 'k']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER']"
2,">>> pub, priv = k.generate_rsa_public_and_private()","['>>>', 'pub', ',', 'priv', '=', 'k.generate_rsa_public_and_private()']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
3,">>> sig, method = k.create_rsa_signature(priv, ""The quick brown fox jumps over the lazy dog."")","['>>>', 'sig', ',', 'method', '=', 'k.create_rsa_signature(priv, ""The quick brown fox jumps over the lazy dog."")']","['OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
4,">>> sig.encode(""hex"")","['>>>', 'sig.encode(""hex"")']","['OPERATOR', 'FUNCTION_CALL']"
5,'4e05ee9e435653549ac4eddbc43e1a6868636e8ea6dbec2564435afcb0de47e0824cddbd88776ddb20728c53ecc90b5d543d5c37575fda8bd0317025fc07de62ee8084b1a75203b1a23d1ef4ac285da3d1fc63317d5b2cf1aafa3e522acedd366ccd5fe4a7f02a42922237426ca3dc154c57408638b9bfaf0d0213855d4e9ee621db204151bcb13d4dbb18f930ec601469c992c84b14e9e0b6f91ac9517bb3b749dd117e1cbac2e4acb0e549f44558a2005898a226d5b6c8b9291d7abae0d9e0a16858b89662a085f74a202deb867acab792bdbd2c36731217caea8b17bd210c29b890472f11e5afdd1dd7b69004db070e04201778f2c49f5758643881403d45a58d08f51b5c63910c6185892f0b590f191d760b669eff2464456f130239bba94acf54a0cb98f6939ff84ae26a37f9b890be259d9b5d636f6eb367b53e895227d7d79a3a88afd6d28c198ee80f6527437c5fbf63accb81709925c4e03d1c9eaee86f58e4bd1c669d6af042dbd412de0d13b98b1111e2fadbe34b45de52125e9a',"[""'4e05ee9e435653549ac4eddbc43e1a6868636e8ea6dbec2564435afcb0de47e0824cddbd88776ddb20728c53ecc90b5d543d5c37575fda8bd0317025fc07de62ee8084b1a75203b1a23d1ef4ac285da3d1fc63317d5b2cf1aafa3e522acedd366ccd5fe4a7f02a42922237426ca3dc154c57408638b9bfaf0d0213855d4e9ee621db204151bcb13d4dbb18f930ec601469c992c84b14e9e0b6f91ac9517bb3b749dd117e1cbac2e4acb0e549f44558a2005898a226d5b6c8b9291d7abae0d9e0a16858b89662a085f74a202deb867acab792bdbd2c36731217caea8b17bd210c29b890472f11e5afdd1dd7b69004db070e04201778f2c49f5758643881403d45a58d08f51b5c63910c6185892f0b590f191d760b669eff2464456f130239bba94acf54a0cb98f6939ff84ae26a37f9b890be259d9b5d636f6eb367b53e895227d7d79a3a88afd6d28c198ee80f6527437c5fbf63accb81709925c4e03d1c9eaee86f58e4bd1c669d6af042dbd412de0d13b98b1111e2fadbe34b45de52125e9a'""]",['STRING_LITERAL']
6,"

The pycrypto_keys library referenced there can be found here for reference of the specific implementation of the functions ","['The', 'pycrypto_keys', 'library', 'referenced', 'there', 'can', 'be', 'found', 'here', 'for', 'reference', 'of', 'the', 'specific', 'implementation', 'of', 'the', 'functions']","['DT', 'NNS', 'VBP', 'VBN', 'EX', 'MD', 'VB', 'VBN', 'RB', 'IN', 'NN', 'IN', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NNS']"
7,generate_rsa_public_and_private,['generate_rsa_public_and_private'],['IDENTIFIER']
8," and create_rsa_signature.

My Go test consists of 2 simple files that only rely on core packages. First the verification function, in verify.go:

","['and', 'create_rsa_signature.', 'My', 'Go', 'test', 'consists', 'of', '2', 'simple', 'files', 'that', 'only', 'rely', 'on', 'core', 'packages.', 'First', 'the', 'verification', 'function,', 'in', 'verify.go:']","['CC', 'VB', 'NNP', 'NNP', 'JJS', 'NNS', 'IN', 'CD', 'JJ', 'NNS', 'IN', 'RB', 'VB', 'IN', 'NN', 'NN', 'NNP', 'DT', 'NN', 'NN', 'IN', 'NN']"
9,package example,"['package', 'example']","['KEYWORD', 'IDENTIFIER']"
10,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
11,"    ""crypto""","['""crypto""']",['STRING_LITERAL']
12,"    ""crypto/rsa""","['""crypto/rsa""']",['STRING_LITERAL']
13,"    ""crypto/sha256""","['""crypto/sha256""']",['STRING_LITERAL']
14,"    ""crypto/x509""","['""crypto/x509""']",['STRING_LITERAL']
15,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
16,),[')'],['OPERATOR']
17,"func Verify(key []byte, sig []byte, msg []byte) error {","['func', 'Verify', '(', 'key', '[]', 'byte', ',', 'sig', '[]', 'byte', ',', 'msg', '[]', 'byte', ')', 'error', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
18,    digest := sha256.Sum256(msg),"['digest', ':=', 'sha256.Sum256(msg)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
19,"    pub, err := x509.ParsePKIXPublicKey(key)","['pub', ',', 'err', ':=', 'x509.ParsePKIXPublicKey(key)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
20,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
21,"        return fmt.Errorf(""Failed to parse key"")","['return', 'fmt.Errorf(""Failed to parse key"")']","['KEYWORD', 'FUNCTION_CALL']"
22,    },['}'],['OPERATOR']
23,"    rsaPub, ok := pub.(*rsa.PublicKey)","['rsaPub', ',', 'ok', ':=', 'pub', '.(*', 'rsa', '.', 'PublicKey', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
24,    if !ok {,"['if', '!', 'ok', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
25,"        return fmt.Errorf(""Invalid value returned from ParsePKIXPublicKey"")","['return', 'fmt.Errorf(""Invalid value returned from ParsePKIXPublicKey"")']","['KEYWORD', 'FUNCTION_CALL']"
26,    },['}'],['OPERATOR']
27,"    opts := rsa.PSSOptions{SaltLength: 16, Hash: crypto.SHA256}","['opts', ':=', 'rsa', '.', 'PSSOptions', '{', 'SaltLength', ':', '16', ',', 'Hash', ':', 'crypto', '.', 'SHA256', '}']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
28,"    if err = rsa.VerifyPSS(rsaPub, crypto.SHA256, digest[:], sig, &opts); err != nil {","['if', 'err', '=', 'rsa.VerifyPSS(rsaPub, crypto.SHA256, digest[:], sig, &opts)', ';', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
29,"        return fmt.Errorf(""Failed Verification"")","['return', 'fmt.Errorf(""Failed Verification"")']","['KEYWORD', 'FUNCTION_CALL']"
30,    },['}'],['OPERATOR']
31,    return nil,"['return', 'nil']","['KEYWORD', 'IDENTIFIER']"
32,},['}'],['OPERATOR']
33,"

And second, a test case. The key pair and signature were generated using the Python commands at the top and copied in here to create a static set of parameters to use for compatibility testing.

","['And', 'second,', 'a', 'test', 'case.', 'The', 'key', 'pair', 'and', 'signature', 'were', 'generated', 'using', 'the', 'Python', 'commands', 'at', 'the', 'top', 'and', 'copied', 'in', 'here', 'to', 'create', 'a', 'static', 'set', 'of', 'parameters', 'to', 'use', 'for', 'compatibility', 'testing.']","['CC', 'VB', 'DT', 'NN', 'NN', 'DT', 'JJ', 'NN', 'CC', 'NN', 'VBD', 'VBN', 'VBG', 'DT', 'NNP', 'NNS', 'IN', 'DT', 'JJ', 'CC', 'VBD', 'IN', 'RB', 'TO', 'VB', 'DT', 'JJ', 'NN', 'IN', 'NNS', 'TO', 'VB', 'IN', 'NN', 'NN']"
34,package example,"['package', 'example']","['KEYWORD', 'IDENTIFIER']"
35,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
36,"    ""encoding/hex""","['""encoding/hex""']",['STRING_LITERAL']
37,"    ""encoding/pem""","['""encoding/pem""']",['STRING_LITERAL']
38,"    ""testing""","['""testing""']",['STRING_LITERAL']
39,),[')'],['OPERATOR']
40,func TestPyCryptoRSACompatVerify(t *testing.T) {,"['func', 'TestPyCryptoRSACompatVerify', '(', 't', '*', 'testing', '.', 'T', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
41,"    pubPem := ""-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAnKuXZeefa2LmgxaL5NsM\nzKOHNe+x/nL6ik+lDBCTV6OdcwAhHQS+PONGhrChIUVR6Vth3hUCrreLzPO73Oo5\nVSCuRJ53UronENl6lsa5mFKP8StYLvIDITNvkoT3j52BJIjyNUK9UKY9As2TNqDf\nBEPIRp28ev/NViwGOEkBu2UAbwCIdnDXm8JQErCZA0Ydm7PKGgjLbFsFGrVzqXHK\n6pdzJXlhr9yap3UpgQ/iO9JtoEYB2EXsnSrPc9JRjR30bNHHtnVql3fvinXrAEwq\n3xmN4p+R4VGzfdQN+8Kl/IPjqWB535twhFYEG/B7Ze8IwbygBjK3co/KnOPqMUrM\nBI8ztvPiogz+MvXb8WvarZ6TMTh8ifZI96r7zzqyzjR1hJulEy3IsMGvz8XS2J0X\n7sXoaqszEtXdq5ef5zKVxkiyIQZcbPgmpHLq4MgfdryuVVc/RPASoRIXG4lKaTJj\n1ANMFPxDQpHudCLxwCzjCb+sVa20HBRPTnzo8LSZkI6jAgMBAAE=\n-----END PUBLIC KEY-----""","['pubPem', ':=', '""-----BEGIN PUBLIC KEY-----\\nMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAnKuXZeefa2LmgxaL5NsM\\nzKOHNe+x/nL6ik+lDBCTV6OdcwAhHQS+PONGhrChIUVR6Vth3hUCrreLzPO73Oo5\\nVSCuRJ53UronENl6lsa5mFKP8StYLvIDITNvkoT3j52BJIjyNUK9UKY9As2TNqDf\\nBEPIRp28ev/NViwGOEkBu2UAbwCIdnDXm8JQErCZA0Ydm7PKGgjLbFsFGrVzqXHK\\n6pdzJXlhr9yap3UpgQ/iO9JtoEYB2EXsnSrPc9JRjR30bNHHtnVql3fvinXrAEwq\\n3xmN4p+R4VGzfdQN+8Kl/IPjqWB535twhFYEG/B7Ze8IwbygBjK3co/KnOPqMUrM\\nBI8ztvPiogz+MvXb8WvarZ6TMTh8ifZI96r7zzqyzjR1hJulEy3IsMGvz8XS2J0X\\n7sXoaqszEtXdq5ef5zKVxkiyIQZcbPgmpHLq4MgfdryuVVc/RPASoRIXG4lKaTJj\\n1ANMFPxDQpHudCLxwCzjCb+sVa20HBRPTnzo8LSZkI6jAgMBAAE=\\n-----END PUBLIC KEY-----""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
42,"    //privPem := ""-----BEGIN RSA PRIVATE KEY-----\n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\n-----END RSA PRIVATE KEY-----""","['//', 'privPem', ':=', '""-----BEGIN', 'RSA', 'PRIVATE', 'KEY-----\\n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\\n-----END', 'RSA', 'PRIVATE', 'KEY-----""']","['COMMENT', 'JJ', 'NNP', 'JJ', 'NNP', 'NNP', 'NNP', 'NNP', 'NNP', 'NNP']"
43,"    testStr := ""The quick brown fox jumps over the lazy dog.""","['testStr', ':=', '""The quick brown fox jumps over the lazy dog.""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
44,"    sigHex := ""4e05ee9e435653549ac4eddbc43e1a6868636e8ea6dbec2564435afcb0de47e0824cddbd88776ddb20728c53ecc90b5d543d5c37575fda8bd0317025fc07de62ee8084b1a75203b1a23d1ef4ac285da3d1fc63317d5b2cf1aafa3e522acedd366ccd5fe4a7f02a42922237426ca3dc154c57408638b9bfaf0d0213855d4e9ee621db204151bcb13d4dbb18f930ec601469c992c84b14e9e0b6f91ac9517bb3b749dd117e1cbac2e4acb0e549f44558a2005898a226d5b6c8b9291d7abae0d9e0a16858b89662a085f74a202deb867acab792bdbd2c36731217caea8b17bd210c29b890472f11e5afdd1dd7b69004db070e04201778f2c49f5758643881403d45a58d08f51b5c63910c6185892f0b590f191d760b669eff2464456f130239bba94acf54a0cb98f6939ff84ae26a37f9b890be259d9b5d636f6eb367b53e895227d7d79a3a88afd6d28c198ee80f6527437c5fbf63accb81709925c4e03d1c9eaee86f58e4bd1c669d6af042dbd412de0d13b98b1111e2fadbe34b45de52125e9a""","['sigHex', ':=', '""4e05ee9e435653549ac4eddbc43e1a6868636e8ea6dbec2564435afcb0de47e0824cddbd88776ddb20728c53ecc90b5d543d5c37575fda8bd0317025fc07de62ee8084b1a75203b1a23d1ef4ac285da3d1fc63317d5b2cf1aafa3e522acedd366ccd5fe4a7f02a42922237426ca3dc154c57408638b9bfaf0d0213855d4e9ee621db204151bcb13d4dbb18f930ec601469c992c84b14e9e0b6f91ac9517bb3b749dd117e1cbac2e4acb0e549f44558a2005898a226d5b6c8b9291d7abae0d9e0a16858b89662a085f74a202deb867acab792bdbd2c36731217caea8b17bd210c29b890472f11e5afdd1dd7b69004db070e04201778f2c49f5758643881403d45a58d08f51b5c63910c6185892f0b590f191d760b669eff2464456f130239bba94acf54a0cb98f6939ff84ae26a37f9b890be259d9b5d636f6eb367b53e895227d7d79a3a88afd6d28c198ee80f6527437c5fbf63accb81709925c4e03d1c9eaee86f58e4bd1c669d6af042dbd412de0d13b98b1111e2fadbe34b45de52125e9a""']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
45,"    testKey, _ := pem.Decode([]byte(pubPem))","['testKey', ',', '_', ':=', 'pem.Decode([]byte(pubPem))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
46,"    sigBytes, err := hex.DecodeString(sigHex)","['sigBytes', ',', 'err', ':=', 'hex.DecodeString(sigHex)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
47,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
48,        t.Fatal(err),['t.Fatal(err)'],['FUNCTION_CALL']
49,    },['}'],['OPERATOR']
50,"    err = Verify(testKey.Bytes, sigBytes, []byte(testStr))","['err', '=', 'Verify', '(', 'testKey', '.', 'Bytes', ',', 'sigBytes', ',', '[]', 'byte', '(', 'testStr', '))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
51,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
52,        t.Fatal(err),['t.Fatal(err)'],['FUNCTION_CALL']
53,    },['}'],['OPERATOR']
54,},['}'],['OPERATOR']
55,"

The code fails in the final check of the Verify function, outputting the error Failed verification. I've had a look at the Go PSS verification code and if anything goes wrong, a generic verification error is returned so it's not that helpful. Even if it was more specific, either there is a compatibility problem here, a bug in one of the language implementations, or my code is wrong.

Much thanks for any help.
","['The', 'code', 'fails', 'in', 'the', 'final', 'check', 'of', 'the', 'Verify', 'function,', 'outputting', 'the', 'error', 'Failed', 'verification.', ""I've"", 'had', 'a', 'look', 'at', 'the', 'Go', 'PSS', 'verification', 'code', 'and', 'if', 'anything', 'goes', 'wrong,', 'a', 'generic', 'verification', 'error', 'is', 'returned', 'so', ""it's"", 'not', 'that', 'helpful.', 'Even', 'if', 'it', 'was', 'more', 'specific,', 'either', 'there', 'is', 'a', 'compatibility', 'problem', 'here,', 'a', 'bug', 'in', 'one', 'of', 'the', 'language', 'implementations,', 'or', 'my', 'code', 'is', 'wrong.', 'Much', 'thanks', 'for', 'any', 'help.']","['DT', 'NN', 'VBZ', 'IN', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NNP', 'NN', 'VBG', 'DT', 'NN', 'VBD', 'JJ', 'NNP', 'VBD', 'DT', 'NN', 'IN', 'DT', 'NNP', 'NNP', 'NN', 'NN', 'CC', 'IN', 'NN', 'VBZ', 'VB', 'DT', 'JJ', 'NN', 'NN', 'VBZ', 'VBN', 'RB', 'JJ', 'RB', 'IN', 'VB', 'RB', 'IN', 'PRP', 'VBD', 'RBR', 'JJ', 'CC', 'EX', 'VBZ', 'DT', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'IN', 'CD', 'IN', 'DT', 'NN', 'NN', 'CC', 'PRP$', 'NN', 'VBZ', 'JJ', 'JJ', 'NNS', 'IN', 'DT', 'NN']"
