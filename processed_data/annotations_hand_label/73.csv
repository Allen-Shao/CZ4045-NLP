,text,token,annotation
0,"Can anyone tell my why this wouldn't compile?

","['Can', 'anyone', 'tell', 'my', 'why', 'this', 'would', ""n't"", 'compile', '?']","['MD', 'NN', 'VB', ‘PRP', 'WRB', 'DT', 'MD', 'RB', 'VB', '.']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,type myint int,"['type', 'myint', 'int']","['KEYWORD', 'IDENTIFIER', ‘RESERVED']"
3,func set(a **myint) {,"['func', 'set', '(', 'a', '**', 'myint', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', ‘POINTER_OPERATOR’, 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
4,i := myint(5),"['i', ':=', 'myint(5)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', ‘FUNCTION_CALL’]"
5,    *a = &i ,"['*', 'a', '=', '&', 'i']","['POINTER_OPERATOR', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER']"
6,},['}'],['PUNCTUATION']
7,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
8,    var k *int,"['var', 'k', '*', 'int']","['KEYWORD', 'IDENTIFIER', ‘POINTER_OPERATOR', 'IDENTIFIER']"
9,    set( (**myint)(&k) ) // cannot convert &k (type **int) to type **myint,"['set((**myint)(&k))', '//', 'can', 'not', 'convert', '&', 'k', ‘(‘, ‘type’,  ‘**’, ‘int’, ‘)’, 'to', 'type', ‘**’, ‘myint']","[‘FUNCTION_CALL’, 'COMMENT', 'MD', 'RB', 'VB', 'POINTER_OPERATOR', ‘IDENTIFIER', '(', 'NN', 'POINTER_OPERATOR', ‘RESERVED’, ’)', 'TO', ‘NN', ‘POINTER_OPERATOR’, ‘IDENTIFIER’]"
10,    print( *k ),['print(*k)'],[‘FUNCTION_CALL’]
11,},['}'],['PUNCTUATION']
12,"

My reasoning so far is this. All types in Golang are different, but it allows to convert from one type to another with C-like cast syntax as long as underlying types are identical. In my example, converting 'int' to 'myint' is not a problem. '*int' to '*myint' isn't either. It's when you have pointer to pointer problems arise. I've been stuck on this for the second day now. Any help is appreciated.
","['My', 'reasoning', 'so', 'far', 'is', 'this', '.', 'All', 'types', 'in', 'Golang', 'are', 'different', ',', 'but', 'it', 'allows', 'to', 'convert', 'from', 'one', 'type', 'to', 'another', 'with', 'C-like', 'cast', 'syntax', 'as', 'long', 'as', 'underlying', 'types', 'are', 'identical', '.', 'In', 'my', 'example', ',', 'converting', “‘“, “int"", ""'"", 'to', “‘“, “myint"", ""'"", 'is', 'not', 'a', 'problem', '.', “‘“, “*int"", ""'"", 'to', “‘”, “*myint"", “'"", 'is', ""n't"", 'either', '.', 'It', ""'s"", 'when', 'you', 'have', 'pointer', 'to', 'pointer', 'problems', 'arise', '.', 'I', ""'ve"", 'been', 'stuck', 'on', 'this', 'for', 'the', 'second', 'day', 'now', '.', 'Any', 'help', 'is', 'appreciated', '.']","['PRP$', 'VBG', 'RB', 'RB', 'VBZ', 'DT', '.', 'DT', 'NNS', 'IN', 'NNP', 'VBP', 'JJ', ',', 'CC', 'PRP', 'VBZ', 'TO', 'VB', 'IN', 'CD', 'NN', 'TO', 'DT', 'IN', 'JJ', 'NN', 'NN', 'RB', 'RB', 'IN', 'JJ', 'NNS', 'VBP', 'JJ', '.', 'IN', 'PRP$', 'NN', ',', ‘VBG', ""''"", 'NN', “’”, ‘TO’, “‘”, “NN”, “’”, ’VBZ’, 'RB', 'DT', 'NN', '.', “‘”’, ‘NN', ""'"", 'TO', “‘”, “NN”, “’”, 'VBZ', 'RB', 'RB', '.', 'PRP', 'VBZ', 'WRB', 'PRP', 'VBP', 'VBN', 'TO', 'VB', 'NNS', 'VB', '.', 'PRP', 'VBP', 'VBN', 'VBN', 'IN', 'DT', 'IN', 'DT', 'JJ', 'NN', 'RB', '.', 'DT', 'NN', 'VBZ', 'VBN', '.']"