,text,token,annotation
0,"My server runned for a time and about 200 connection created and did some calculations and closed, I found that it took up about 2,7G memory and never decreased after serveral days. The program itself didn't occupy that much , And I checked it by memstats. by ","['My', 'server', 'runned', 'for', 'a', 'time', 'and', 'about', '200', 'connection', 'created', 'and', 'did', 'some', 'calculations', 'and', 'closed,', 'I', 'found', 'that', 'it', 'took', 'up', 'about', '2,7G', 'memory', 'and', 'never', 'decreased', 'after', 'serveral', 'days.', 'The', 'program', 'itself', ""didn't"", 'occupy', 'that', 'much', ',', 'And', 'I', 'checked', 'it', 'by', 'memstats.', 'by']","['PRP$', 'NN', 'VBN', 'IN', 'DT', 'NN', 'CC', 'IN', 'CD', 'NN', 'VBD', 'CC', 'VBD', 'DT', 'NNS', 'CC', 'NN', 'PRP', 'VBD', 'IN', 'PRP', 'VBD', 'RP', 'IN', 'CD', 'NN', 'CC', 'RB', 'VBN', 'IN', 'JJ', 'VBD', 'DT', 'NN', 'PRP', 'VBZ', 'VB', 'IN', 'JJ', ',', 'CC', 'PRP', 'VBD', 'PRP', 'IN', 'NN', 'IN']"
1,cat /proc/11686/status  | grep -i threads,"['cat', '/proc/11686/status', '|', 'grep', '-', 'i', 'threads']","['IDENTIFIER', 'DIRECTORY', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER']"
2,"  I got Threads:  177,so I think the reason that it took up so much memory is that it created to many threads .Why go create so much threads? Is it because I use too many go func()? And I'm sure goroutines didn't increase and they exited normally.

PS 

There is so many code in my program, so I exclude the details, just keep the main

And my problem is when go create a thread to do something. and is it normal to have so many thread? I think it is not concerned much to the code.

main.go

","['I', 'got', 'Threads:', '177,so', 'I', 'think', 'the', 'reason', 'that', 'it', 'took', 'up', 'so', 'much', 'memory', 'is', 'that', 'it', 'created', 'to', 'many', 'threads', '.Why', 'go', 'create', 'so', 'much', 'threads?', 'Is', 'it', 'because', 'I', 'use', 'too', 'many', 'go', 'func()?', 'And', ""I'm"", 'sure', 'goroutines', ""didn't"", 'increase', 'and', 'they', 'exited', 'normally.', 'PS', 'There', 'is', 'so', 'many', 'code', 'in', 'my', 'program,', 'so', 'I', 'exclude', 'the', 'details,', 'just', 'keep', 'the', 'main', 'And', 'my', 'problem', 'is', 'when', 'go', 'create', 'a', 'thread', 'to', 'do', 'something.', 'and', 'is', 'it', 'normal', 'to', 'have', 'so', 'many', 'thread?', 'I', 'think', 'it', 'is', 'not', 'concerned', 'much', 'to', 'the', 'code.', 'main.go']","['PRP', 'VBD', 'NNP', 'CD', 'PRP', 'VBP', 'DT', 'NN', 'IN', 'PRP', 'VBD', 'RP', 'RB', 'JJ', 'NN', 'VBZ', 'IN', 'PRP', 'VBD', 'TO', 'JJ', 'NNS', 'VBP', 'VB', 'VB', 'RB', 'JJ', 'NN', 'VBZ', 'PRP', 'IN', 'PRP', 'VBP', 'RB', 'JJ', 'VBP', 'JJ', 'CC', 'NNP', 'JJ', 'NNS', 'JJ', 'NN', 'CC', 'PRP', 'VBD', 'JJ', 'NNP', 'EX', 'VBZ', 'RB', 'JJ', 'NN', 'IN', 'PRP$', 'NN', 'RB', 'PRP', 'VBP', 'DT', 'NN', 'RB', 'VB', 'DT', 'JJ', 'CC', 'PRP$', 'NN', 'VBZ', 'WRB', 'VB', 'VBP', 'DT', 'NN', 'TO', 'VB', 'NNS', 'CC', 'VBZ', 'PRP', 'JJ', 'TO', 'VB', 'RB', 'JJ', 'VBP', 'PRP', 'VBP', 'PRP', 'VBZ', 'RB', 'JJ', 'RB', 'TO', 'DT', 'NN', 'NN']"
3,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
4,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
5,"    ""sanguo/base/log""","['""sanguo/base/log""']",['STRING_LITERAL']
6,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
7,"    ""runtime""","['""runtime""']",['STRING_LITERAL']
8,"    ""math/rand""","['""math/rand""']",['STRING_LITERAL']
9,"    ""time""","['""time""']",['STRING_LITERAL']
10,"    ""net""","['""net""']",['STRING_LITERAL']
11,"    ""os""","['""os""']",['STRING_LITERAL']
12,),[')'],['OPERATOR']
13,type GameServer struct {,"['type', 'GameServer', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
14,    Host   string,"['Host', 'string']","['IDENTIFIER', 'IDENTIFIER']"
15,},['}'],['OPERATOR']
16,func (server *GameServer) Start() {,"['func', '(', 'server', '*', 'GameServer', ')', 'Start', '()', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
17,    // load system data,"['//', 'load', 'system', 'data']","['COMMENT', 'NN', 'NN', 'NNS']"
18,"    log.Debug(""/*************************SREVER START********************************/"")","['log.Debug(""/*************************SREVER START********************************/"")']",['FUNCTION_CALL']
19,"    tcpAddr, err := net.ResolveTCPAddr(""tcp4"", server.Host)","['tcpAddr', ',', 'err', ':=', 'net.ResolveTCPAddr(""tcp4"", server.Host)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
20,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
21,        log.Error(err.Error()),['log.Error(err.Error())'],['FUNCTION_CALL']
22,        os.Exit(-1),['os.Exit(-1)'],['FUNCTION_CALL']
23,    },['}'],['OPERATOR']
24,    go func(){,"['go', 'func', '(){']","['KEYWORD', 'KEYWORD', 'OPERATOR']"
25,        for{,"['for', '{']","['KEYWORD', 'OPERATOR']"
26,            select {,"['select', '{']","['KEYWORD', 'OPERATOR']"
27,            case <-time.After(30*time.Second):,"['case', '<-', 'time.After(30*time.Second)', ':']","['KEYWORD', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR']"
28,"                LookUp(""read memstats"")","['LookUp', '(', '""read memstats""', ')']","['IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
29,            },['}'],['OPERATOR']
30,        },['}'],['OPERATOR']
31,    }(),['}()'],['OPERATOR']
32,"    listener, err := net.ListenTCP(""tcp"", tcpAddr)","['listener', ',', 'err', ':=', 'net.ListenTCP(""tcp"", tcpAddr)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
33,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
34,        log.Error(err.Error()),['log.Error(err.Error())'],['FUNCTION_CALL']
35,        os.Exit(-1),['os.Exit(-1)'],['FUNCTION_CALL']
36,    },['}'],['OPERATOR']
37,"    log.Debug(""/*************************SERVER SUCC********************************/"")","['log.Debug(""/*************************SERVER SUCC********************************/"")']",['FUNCTION_CALL']
38,    for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
39,"        conn, err := listener.AcceptTCP()","['conn', ',', 'err', ':=', 'listener.AcceptTCP()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
40,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
41,            continue,['continue'],['KEYWORD']
42,        },['}'],['OPERATOR']
43,"        log.Debug(""Accept a new connection "", conn.RemoteAddr())","['log.Debug(""Accept a new connection "", conn.RemoteAddr())']",['FUNCTION_CALL']
44,        go handleClient(conn),"['go', 'handleClient', '(', 'conn', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
45,    },['}'],['OPERATOR']
46,},['}'],['OPERATOR']
47,func handleClient(conn *net.TCPConn) {,"['func', 'handleClient', '(', 'conn', '*', 'net', '.', 'TCPConn', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
48,    sess := NewSession(conn),"['sess', ':=', 'NewSession', '(', 'conn', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
49,    sess.Start(),['sess.Start()'],['FUNCTION_CALL']
50,},['}'],['OPERATOR']
51,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
52,    rand.Seed(time.Now().Unix()),['rand.Seed(time.Now().Unix())'],['FUNCTION_CALL']
53,    runtime.GOMAXPROCS(runtime.NumCPU()),['runtime.GOMAXPROCS(runtime.NumCPU())'],['FUNCTION_CALL']
54,    log.SetLevel(0),['log.SetLevel(0)'],['FUNCTION_CALL']
55,"    filew := log.NewFileWriter(""log"", true)","['filew', ':=', 'log.NewFileWriter(""log"", true)']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
56,    err := filew.StartLogger(),"['err', ':=', 'filew.StartLogger()']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
57,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
58,"        fmt.Println(""Failed start log"",err)","['fmt.Println(""Failed start log"",err)']",['FUNCTION_CALL']
59,        return,['return'],['KEYWORD']
60,    },['}'],['OPERATOR']
61,    var server GameServer,"['var', 'server', 'GameServer']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
62,"    server.Host = ""127.0.0.1:9999""","['server', '.', 'Host', '=', '""127.0.0.1:9999""']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
63,    server.Start(),['server.Start()'],['FUNCTION_CALL']
64,},['}'],['OPERATOR']
65,"

session.go

",['session.go'],['NN']
66,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
67,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
68,"    ""io""","['""io""']",['STRING_LITERAL']
69,"    ""encoding/binary""","['""encoding/binary""']",['STRING_LITERAL']
70,"    ""encoding/json""","['""encoding/json""']",['STRING_LITERAL']
71,"    ""github.com/felixge/tcpkeepalive""","['""github.com/felixge/tcpkeepalive""']",['STRING_LITERAL']
72,"    ""net""","['""net""']",['STRING_LITERAL']
73,"    ""sanguo/base/log""","['""sanguo/base/log""']",['STRING_LITERAL']
74,"    ""strings""","['""strings""']",['STRING_LITERAL']
75,"    ""sync""","['""sync""']",['STRING_LITERAL']
76,"    ""time""","['""time""']",['STRING_LITERAL']
77,),[')'],['OPERATOR']
78,type Session struct {,"['type', 'Session', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
79,    conn *net.TCPConn //the tcp connection from client,"['conn', '*', 'net', '.', 'TCPConn', '//', 'the', 'tcp', 'connection', 'from', 'client']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'COMMENT', 'DT', 'JJ', 'NN', 'IN', 'NN']"
80,    recvChan      chan *bufferedManager.Token //data from client,"['recvChan', 'chan', '*', 'bufferedManager', '.', 'Token', '//', 'data', 'from', 'client']","['IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'COMMENT', 'NNS', 'IN', 'NN']"
81,    closeNotiChan chan bool   //,"['closeNotiChan', 'chan', 'bool', '//']","['IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'COMMENT']"
82,    ok   bool,"['ok', 'bool']","['IDENTIFIER', 'IDENTIFIER']"
83,    lock sync.Mutex,"['lock', 'sync', '.', 'Mutex']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
84,},['}'],['OPERATOR']
85,func NewSession(connection *net.TCPConn) (sess *Session) {,"['func', 'NewSession', '(', 'connection', '*', 'net', '.', 'TCPConn', ')', '(', 'sess', '*', 'Session', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
86,    var client Session,"['var', 'client', 'Session']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
87,    client.conn = connection,"['client', '.', 'conn', '=', 'connection']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
88,"    client.recvChan = make(chan []byte, 1024)","['client', '.', 'recvChan', '=', 'make', '(', 'chan', '[]', 'byte', ',', '1024', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
89,    client.closeNotiChan = make(chan bool),"['client', '.', 'closeNotiChan', '=', 'make', '(', 'chan', 'bool', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
90,    client.ok = true,"['client', '.', 'ok', '=', 'true']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
91,"    log.Debug(""New Connection"", &client)","['log.Debug(""New Connection"", &client)']",['FUNCTION_CALL']
92,"    kaConn, err := tcpkeepalive.EnableKeepAlive(connection)","['kaConn', ',', 'err', ':=', 'tcpkeepalive.EnableKeepAlive(connection)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
93,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
94,"        log.Debug(""EnableKeepAlive err "", err)","['log.Debug(""EnableKeepAlive err "", err)']",['FUNCTION_CALL']
95,    } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
96,        kaConn.SetKeepAliveIdle(120 * time.Second),['kaConn.SetKeepAliveIdle(120 * time.Second)'],['FUNCTION_CALL']
97,        kaConn.SetKeepAliveCount(4),['kaConn.SetKeepAliveCount(4)'],['FUNCTION_CALL']
98,        kaConn.SetKeepAliveInterval(5 * time.Second),['kaConn.SetKeepAliveInterval(5 * time.Second)'],['FUNCTION_CALL']
99,    },['}'],['OPERATOR']
100,    return &client,"['return', '&', 'client']","['KEYWORD', 'OPERATOR', 'IDENTIFIER']"
101,},['}'],['OPERATOR']
102,func (sess *Session) Close() {,"['func', '(', 'sess', '*', 'Session', ')', 'Close', '()', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
103,    sess.lock.Lock(),"['sess', '.', 'lock.Lock()']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
104,    if sess.ok {,"['if', 'sess', '.', 'ok', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
105,        sess.ok = false,"['sess', '.', 'ok', '=', 'false']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
106,        close(sess.closeNotiChan),"['close', '(', 'sess', '.', 'closeNotiChan', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
107,        sess.conn.Close(),"['sess', '.', 'conn.Close()']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
108,"        log.Trace(""Sess Close Succ"", sess, sess.uid)","['log.Trace(""Sess Close Succ"", sess, sess.uid)']",['FUNCTION_CALL']
109,    },['}'],['OPERATOR']
110,    sess.lock.Unlock(),"['sess', '.', 'lock.Unlock()']","['IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
111,},['}'],['OPERATOR']
112,func (sess *Session) handleRecv() {,"['func', '(', 'sess', '*', 'Session', ')', 'handleRecv', '()', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
113,    defer func(){,"['defer', 'func', '(){']","['IDENTIFIER', 'KEYWORD', 'OPERATOR']"
114,        if err := recover(); err != nil {,"['if', 'err', ':=', 'recover', '();', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
115,"            log.Critical(""Panic"", err)","['log.Critical(""Panic"", err)']",['FUNCTION_CALL']
116,        },['}'],['OPERATOR']
117,"        log.Trace(""Session Recv Exit"", sess, sess.uid)","['log.Trace(""Session Recv Exit"", sess, sess.uid)']",['FUNCTION_CALL']
118,        sess.Close(),['sess.Close()'],['FUNCTION_CALL']
119,    }(),['}()'],['OPERATOR']
120,    ch := sess.recvChan,"['ch', ':=', 'sess', '.', 'recvChan']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
121,"    header := make([]byte, 2)","['header', ':=', 'make', '([]', 'byte', ',', '2', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
122,    for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
123,        /**block until recieve len(header)**/,"['**', 'block', 'until', 'recieve', 'len', '(', 'header', ')**']","['OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
124,"        n, err := io.ReadFull(sess.conn, header)","['n', ',', 'err', ':=', 'io.ReadFull(sess.conn, header)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
125,        if n == 0 && err == io.EOF {,"['if', 'n', '==', '0', '&&', 'err', '==', 'io', '.', 'EOF', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OCTAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
126,            //Opposite socket is closed,"['//', 'Opposite', 'socket', 'is', 'closed']","['COMMENT', 'NNP', 'NN', 'VBZ', 'VBN']"
127,"            log.Warn(""Socket Read EOF And Close"", sess)","['log.Warn(""Socket Read EOF And Close"", sess)']",['FUNCTION_CALL']
128,            break,['break'],['KEYWORD']
129,        } else if err != nil {,"['}', 'else', 'if', 'err', '!=', 'nil', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
130,            //Sth wrong with this socket,"['//', 'Sth', 'wrong', 'with', 'this', 'socket']","['COMMENT', 'NNP', 'JJ', 'IN', 'DT', 'NN']"
131,"            log.Warn(""Socket Wrong:"", err)","['log.Warn(""Socket Wrong:"", err)']",['FUNCTION_CALL']
132,            break,['break'],['KEYWORD']
133,        },['}'],['OPERATOR']
134,        size := binary.LittleEndian.Uint16(header) + 4,"['size', ':=', 'binary', '.', 'LittleEndian.Uint16(header)', '+', '4']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL', 'OPERATOR', 'DECIMAL_LITERAL']"
135,"        data := make([]byte, size)","['data', ':=', 'make', '([]', 'byte', ',', 'size', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
136,"        n, err = io.ReadFull(sess.conn, t.Data)","['n', ',', 'err', '=', 'io.ReadFull(sess.conn, t.Data)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
137,        if n == 0 && err == io.EOF {,"['if', 'n', '==', '0', '&&', 'err', '==', 'io', '.', 'EOF', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OCTAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
138,"            log.Warn(""Socket Read EOF And Close"", sess)","['log.Warn(""Socket Read EOF And Close"", sess)']",['FUNCTION_CALL']
139,            break,['break'],['KEYWORD']
140,        } else if err != nil {,"['}', 'else', 'if', 'err', '!=', 'nil', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
141,"            log.Warn(""Socket Wrong:"", err)","['log.Warn(""Socket Wrong:"", err)']",['FUNCTION_CALL']
142,            break,['break'],['KEYWORD']
143,        },['}'],['OPERATOR']
144,        ch <- data //send data to Client to process,"['ch', '<-', 'data', '//', 'send', 'data', 'to', 'Client', 'to', 'process']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'COMMENT', 'VB', 'NNS', 'TO', 'NNP', 'TO', 'VB']"
145,    },['}'],['OPERATOR']
146,},['}'],['OPERATOR']
147,func (sess *Session) handleDispatch() {,"['func', '(', 'sess', '*', 'Session', ')', 'handleDispatch', '()', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
148,    defer func(){,"['defer', 'func', '(){']","['IDENTIFIER', 'KEYWORD', 'OPERATOR']"
149,"        log.Trace(""Session Dispatch Exit"",  sess, sess.uid)","['log.Trace(""Session Dispatch Exit"",  sess, sess.uid)']",['FUNCTION_CALL']
150,        sess.Close(),['sess.Close()'],['FUNCTION_CALL']
151,    }(),['}()'],['OPERATOR']
152,    for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
153,        select {,"['select', '{']","['KEYWORD', 'OPERATOR']"
154,"        case msg, _ := <-sess.recvChan:","['case', 'msg', ',', '_', ':=', '<-', 'sess', '.', 'recvChan', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
155,"            log.Debug(""msg"", msg)","['log.Debug(""msg"", msg)']",['FUNCTION_CALL']
156,"            sess.SendDirectly(""helloworldhellowor"", 1)","['sess.SendDirectly(""helloworldhellowor"", 1)']",['FUNCTION_CALL']
157,        case <-sess.closeNotiChan:,"['case', '<-', 'sess', '.', 'closeNotiChan', ':']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
158,                return,['return'],['KEYWORD']
159,        },['}'],['OPERATOR']
160,    },['}'],['OPERATOR']
161,},['}'],['OPERATOR']
162,func (sess *Session) Start() {,"['func', '(', 'sess', '*', 'Session', ')', 'Start', '()', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
163,    defer func() {,"['defer', 'func', '()', '{']","['IDENTIFIER', 'KEYWORD', 'OPERATOR', 'OPERATOR']"
164,        if err := recover(); err != nil {,"['if', 'err', ':=', 'recover', '();', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
165,"            log.Critical(""Panic"", err)","['log.Critical(""Panic"", err)']",['FUNCTION_CALL']
166,        },['}'],['OPERATOR']
167,    }(),['}()'],['OPERATOR']
168,    go sess.handleRecv(),"['go', 'sess.handleRecv()']","['KEYWORD', 'FUNCTION_CALL']"
169,    sess.handleDispatch(),['sess.handleDispatch()'],['FUNCTION_CALL']
170,    close(sess.recvChan),"['close', '(', 'sess', '.', 'recvChan', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
171,"    log.Warn(""Session Start Exit"", sess, sess.uid)","['log.Warn(""Session Start Exit"", sess, sess.uid)']",['FUNCTION_CALL']
172,},['}'],['OPERATOR']
173,"func (sess *Session) SendDirectly(back interface{}, op int) bool {","['func', '(', 'sess', '*', 'Session', ')', 'SendDirectly', '(', 'back', 'interface', '{},', 'op', 'int', ')', 'bool', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
174,"    back_json, err := json.Marshal(back)","['back_json', ',', 'err', ':=', 'json.Marshal(back)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
175,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
176,"        log.Error(""Can't encode json message "", err, back)","['log.Error(""Can\'t encode json message "", err, back)']",['FUNCTION_CALL']
177,        return false,"['return', 'false']","['KEYWORD', 'IDENTIFIER']"
178,    },['}'],['OPERATOR']
179,"    log.Debug(sess.uid, ""OUT cmd:"", op, string(back_json))","['log.Debug(sess.uid, ""OUT cmd:"", op, string(back_json))']",['FUNCTION_CALL']
180,"    _, err = sess.conn.Write(back_json)","['_', ',', 'err', '=', 'sess', '.', 'conn.Write(back_json)']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'FUNCTION_CALL']"
181,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
182,"        log.Error(""send fail"", err)","['log.Error(""send fail"", err)']",['FUNCTION_CALL']
183,        return false,"['return', 'false']","['KEYWORD', 'IDENTIFIER']"
184,    },['}'],['OPERATOR']
185,    return true,"['return', 'true']","['KEYWORD', 'IDENTIFIER']"
186,},['}'],['OPERATOR']
