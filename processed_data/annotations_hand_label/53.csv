,text,token,annotation
0,"I am trying to implement a housie game where a goroutine produces numbers, 3 other goroutines check if these are in their tokens and inform the producer if all their numbers were produced. I have implemented it in golang in the following way. This results in a deadlock. Any idea why this is happening? This is a ""homework problem"", I am just implementing it in go to learn go better. 

","['I', 'am', 'trying', 'to', 'implement', 'a', 'housie', 'game', 'where', 'a', 'goroutine', 'produces', 'numbers,', '3', 'other', 'goroutines', 'check', 'if', 'these', 'are', 'in', 'their', 'tokens', 'and', 'inform', 'the', 'producer', 'if', 'all', 'their', 'numbers', 'were', 'produced.', 'I', 'have', 'implemented', 'it', 'in', 'golang', 'in', 'the', 'following', 'way.', 'This', 'results', 'in', 'a', 'deadlock.', 'Any', 'idea', 'why', 'this', 'is', 'happening?', 'This', 'is', 'a', '""homework', 'problem"",', 'I', 'am', 'just', 'implementing', 'it', 'in', 'go', 'to', 'learn', 'go', 'better.']","['PRP', 'VBP', 'VBG', 'TO', 'VB', 'DT', 'NN', 'NN', 'WRB', 'DT', 'NN', 'VBZ', 'RB', 'CD', 'JJ', 'NNS', 'VB', 'IN', 'DT', 'VBP', 'IN', 'PRP$', 'NNS', 'CC', 'VB', 'DT', 'NN', 'IN', 'DT', 'PRP$', 'NNS', 'VBD', 'JJ', 'PRP', 'VBP', 'VBN', 'PRP', 'IN', 'NN', 'IN', 'DT', 'JJ', 'NN', 'DT', 'NNS', 'IN', 'DT', 'NN', 'NNP', 'NN', 'WRB', 'DT', 'VBZ', 'JJ', 'DT', 'VBZ', 'DT', 'NN', 'NN', 'PRP', 'VBP', 'RB', 'VBG', 'PRP', 'IN', 'NN', 'TO', 'VB', 'VB', 'NN']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
3,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
4,"    ""math/rand""","['""math/rand""']",['STRING_LITERAL']
5,),[')'],['OPERATOR']
6,type PersonID int,"['type', 'PersonID', 'int']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
7,"func contains(s []int, e int) bool {","['func', 'contains', '(', 's', '[]', 'int', ',', 'e', 'int', ')', 'bool', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
8,"    for _, a := range s {","['for', '_', ',', 'a', ':=', 'range', 's', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
9,        if a == e {,"['if', 'a', '==', 'e', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
10,            return true,"['return', 'true']","['KEYWORD', 'IDENTIFIER']"
11,        },['}'],['OPERATOR']
12,    },['}'],['OPERATOR']
13,    return false,"['return', 'false']","['KEYWORD', 'IDENTIFIER']"
14,},['}'],['OPERATOR']
15,"func Person(called_number chan int, claim_prize chan PersonID, received chan bool, coupon []int, person_id PersonID) {","['func', 'Person', '(', 'called_number', 'chan', 'int', ',', 'claim_prize', 'chan', 'PersonID', ',', 'received', 'chan', 'bool', ',', 'coupon', '[]', 'int', ',', 'person_id', 'PersonID', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
16,    numFound := 0,"['numFound', ':=', '0']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
17,    for i := 0; i < len(coupon); i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'coupon', ');', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
18,        current_number := <-called_number,"['current_number', ':=', '<-', 'called_number']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
19,"        found := contains(coupon, current_number)","['found', ':=', 'contains', '(', 'coupon', ',', 'current_number', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
20,        if found {,"['if', 'found', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR']"
21,            numFound++,"['numFound', '++']","['IDENTIFIER', 'OPERATOR']"
22,        },['}'],['OPERATOR']
23,        if numFound == len(coupon) {,"['if', 'numFound', '==', 'len', '(', 'coupon', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
24,            claim_prize <- person_id,"['claim_prize', '<-', 'person_id']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
25,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
26,            received <- true,"['received', '<-', 'true']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
27,        },['}'],['OPERATOR']
28,    },['}'],['OPERATOR']
29,},['}'],['OPERATOR']
30,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
31,    var called_number chan int,"['var', 'called_number', 'chan', 'int']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER']"
32,    var claim_prize chan PersonID,"['var', 'claim_prize', 'chan', 'PersonID']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER']"
33,    var received chan bool,"['var', 'received', 'chan', 'bool']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER']"
34,"    tokens := make([][]int, 3)","['tokens', ':=', 'make', '([][]', 'int', ',', '3', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
35,    for i := 0; i < 3; i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', '3', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
36,"        tokens[i] = make([]int, 12)","['tokens', '[', 'i', ']', '=', 'make', '([]', 'int', ',', '12', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
37,        for j := 0; j < 12; j++ {,"['for', 'j', ':=', '0', ';', 'j', '<', '12', ';', 'j', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
38,            num := rand.Intn(100) + 1,"['num', ':=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
39,"            found := contains(tokens[i], num)","['found', ':=', 'contains', '(', 'tokens', '[', 'i', '],', 'num', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
40,            for found {,"['for', 'found', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR']"
41,                num = rand.Intn(100) + 1,"['num', '=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
42,"                found = contains(tokens[i], num)","['found', '=', 'contains', '(', 'tokens', '[', 'i', '],', 'num', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
43,            },['}'],['OPERATOR']
44,            tokens[i][j] = num,"['tokens', '[', 'i', '][', 'j', ']', '=', 'num']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
45,        },['}'],['OPERATOR']
46,    },['}'],['OPERATOR']
47,"    go Person(called_number, claim_prize, received, tokens[0], 0)","['go', 'Person', '(', 'called_number', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '0', '],', '0', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
48,"    go Person(called_number, claim_prize, received, tokens[1], 1)","['go', 'Person', '(', 'called_number', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '1', '],', '1', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
49,"    go Person(called_number, claim_prize, received, tokens[2], 2)","['go', 'Person', '(', 'called_number', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '2', '],', '2', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
50,"    claimants := make([]PersonID, 0)","['claimants', ':=', 'make', '([]', 'PersonID', ',', '0', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
51,    prev_called := make(map[int]bool),"['prev_called', ':=', 'make', '(', 'map', '[', 'int', ']', 'bool', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
52,    for i := 0; i < 100; i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', '100', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
53,        if len(claimants) == 3 {,"['if', 'len', '(', 'claimants', ')', '==', '3', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
54,            break,['break'],['KEYWORD']
55,        },['}'],['OPERATOR']
56,        num := rand.Intn(100) + 1,"['num', ':=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
57,"        _, ok := prev_called[num]","['_', ',', 'ok', ':=', 'prev_called', '[', 'num', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
58,        for ok {,"['for', 'ok', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR']"
59,            num = rand.Intn(100) + 1,"['num', '=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
60,"            _, ok = prev_called[num]","['_', ',', 'ok', '=', 'prev_called', '[', 'num', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
61,        },['}'],['OPERATOR']
62,        prev_called[num] = true,"['prev_called', '[', 'num', ']', '=', 'true']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
63,        called_number <- num,"['called_number', '<-', 'num']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
64,        for j := 0; j < 3; j++ {,"['for', 'j', ':=', '0', ';', 'j', '<', '3', ';', 'j', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
65,            select {,"['select', '{']","['KEYWORD', 'OPERATOR']"
66,            case _ = <-received:,"['case', '_', '=', '<-', 'received', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
67,                continue,['continue'],['KEYWORD']
68,            case pid := <-claim_prize:,"['case', 'pid', ':=', '<-', 'claim_prize', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
69,"                claimants = append(claimants, pid)","['claimants', '=', 'append', '(', 'claimants', ',', 'pid', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
70,            },['}'],['OPERATOR']
71,        },['}'],['OPERATOR']
72,    },['}'],['OPERATOR']
73,    fmt.Println(claimants),"['fmt', '.', 'Println', '(', 'claimants', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
74,},['}'],['OPERATOR']
75,"

EDIT:
The exact problem is that that the producer needs to send the number to each of the consumers. When a consumer receives all the numbers in it's token, it can claim the prize. Based on what @OneOfOne said, I have made some changes to the program. The changes are that now there is a separate channels for each of the consumers and I am closing it after it claims a prize. Below is the new program, it still deadlocks. 

","['EDIT:', 'The', 'exact', 'problem', 'is', 'that', 'that', 'the', 'producer', 'needs', 'to', 'send', 'the', 'number', 'to', 'each', 'of', 'the', 'consumers.', 'When', 'a', 'consumer', 'receives', 'all', 'the', 'numbers', 'in', ""it's"", 'token,', 'it', 'can', 'claim', 'the', 'prize.', 'Based', 'on', 'what', '@OneOfOne', 'said,', 'I', 'have', 'made', 'some', 'changes', 'to', 'the', 'program.', 'The', 'changes', 'are', 'that', 'now', 'there', 'is', 'a', 'separate', 'channels', 'for', 'each', 'of', 'the', 'consumers', 'and', 'I', 'am', 'closing', 'it', 'after', 'it', 'claims', 'a', 'prize.', 'Below', 'is', 'the', 'new', 'program,', 'it', 'still', 'deadlocks.']","['NNP', 'DT', 'JJ', 'NN', 'VBZ', 'IN', 'IN', 'DT', 'NN', 'VBZ', 'TO', 'VB', 'DT', 'NN', 'TO', 'DT', 'IN', 'DT', 'NN', 'WRB', 'DT', 'NN', 'VBZ', 'PDT', 'DT', 'NNS', 'IN', 'NN', 'IN', 'PRP', 'MD', 'VB', 'DT', 'NN', 'VBN', 'IN', 'WP', 'NNP', 'NN', 'PRP', 'VBP', 'VBN', 'DT', 'NNS', 'TO', 'DT', 'NN', 'DT', 'NNS', 'VBP', 'IN', 'RB', 'EX', 'VBZ', 'DT', 'JJ', 'NNS', 'IN', 'DT', 'IN', 'DT', 'NNS', 'CC', 'PRP', 'VBP', 'VBG', 'PRP', 'IN', 'PRP', 'VBZ', 'DT', 'NN', 'NNP', 'VBZ', 'DT', 'JJ', 'NN', 'PRP', 'RB', 'VB']"
76,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
77,import (,"['import', '(']","['KEYWORD', 'OPERATOR']"
78,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
79,"    ""math/rand""","['""math/rand""']",['STRING_LITERAL']
80,),[')'],['OPERATOR']
81,"func contains(s []int, e int) bool {","['func', 'contains', '(', 's', '[]', 'int', ',', 'e', 'int', ')', 'bool', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
82,"    for _, a := range s {","['for', '_', ',', 'a', ':=', 'range', 's', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
83,        if a == e {,"['if', 'a', '==', 'e', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
84,            return true,"['return', 'true']","['KEYWORD', 'IDENTIFIER']"
85,        },['}'],['OPERATOR']
86,    },['}'],['OPERATOR']
87,    return false,"['return', 'false']","['KEYWORD', 'IDENTIFIER']"
88,},['}'],['OPERATOR']
89,"func Person(called_number chan int, claim_prize chan int, received chan bool, coupon []int, person_id int) {","['func', 'Person', '(', 'called_number', 'chan', 'int', ',', 'claim_prize', 'chan', 'int', ',', 'received', 'chan', 'bool', ',', 'coupon', '[]', 'int', ',', 'person_id', 'int', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
90,    numFound := 0,"['numFound', ':=', '0']","['IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL']"
91,    for current_number := range called_number {,"['for', 'current_number', ':=', 'range', 'called_number', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
92,"        if contains(coupon, current_number) {","['if', 'contains', '(', 'coupon', ',', 'current_number', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
93,            numFound++,"['numFound', '++']","['IDENTIFIER', 'OPERATOR']"
94,        },['}'],['OPERATOR']
95,        if numFound == len(coupon) {,"['if', 'numFound', '==', 'len', '(', 'coupon', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
96,            fmt.Println(person_id),"['fmt', '.', 'Println', '(', 'person_id', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
97,            claim_prize <- person_id,"['claim_prize', '<-', 'person_id']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
98,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
99,            received <- true,"['received', '<-', 'true']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
100,        },['}'],['OPERATOR']
101,    },['}'],['OPERATOR']
102,},['}'],['OPERATOR']
103,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
104,    var (,"['var', '(']","['KEYWORD', 'OPERATOR']"
105,"        called_number1 = make(chan int, 1)","['called_number1', '=', 'make', '(', 'chan', 'int', ',', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
106,"        called_number2 = make(chan int, 1)","['called_number2', '=', 'make', '(', 'chan', 'int', ',', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
107,"        called_number3 = make(chan int, 1)","['called_number3', '=', 'make', '(', 'chan', 'int', ',', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
108,"        claim_prize    = make(chan int, 1)","['claim_prize', '=', 'make', '(', 'chan', 'int', ',', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
109,"        received       = make(chan bool, 1)","['received', '=', 'make', '(', 'chan', 'bool', ',', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
110,    ),[')'],['OPERATOR']
111,"    tokens := make([][]int, 3)","['tokens', ':=', 'make', '([][]', 'int', ',', '3', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
112,    for i := 0; i < 3; i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', '3', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
113,"        tokens[i] = make([]int, 12)","['tokens', '[', 'i', ']', '=', 'make', '([]', 'int', ',', '12', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
114,        for j := 0; j < 12; j++ {,"['for', 'j', ':=', '0', ';', 'j', '<', '12', ';', 'j', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
115,            num := rand.Intn(100) + 1,"['num', ':=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
116,"            found := contains(tokens[i], num)","['found', ':=', 'contains', '(', 'tokens', '[', 'i', '],', 'num', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
117,            for found {,"['for', 'found', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR']"
118,                num = rand.Intn(100) + 1,"['num', '=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
119,"                found = contains(tokens[i], num)","['found', '=', 'contains', '(', 'tokens', '[', 'i', '],', 'num', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
120,            },['}'],['OPERATOR']
121,            tokens[i][j] = num,"['tokens', '[', 'i', '][', 'j', ']', '=', 'num']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
122,        },['}'],['OPERATOR']
123,    },['}'],['OPERATOR']
124,"    go Person(called_number1, claim_prize, received, tokens[0], 0)","['go', 'Person', '(', 'called_number1', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '0', '],', '0', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
125,"    go Person(called_number2, claim_prize, received, tokens[1], 1)","['go', 'Person', '(', 'called_number2', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '1', '],', '1', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
126,"    go Person(called_number3, claim_prize, received, tokens[2], 2)","['go', 'Person', '(', 'called_number3', ',', 'claim_prize', ',', 'received', ',', 'tokens', '[', '2', '],', '2', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
127,"    claimants := make([]int, 0)","['claimants', ':=', 'make', '([]', 'int', ',', '0', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
128,    prev_called := make(map[int]bool),"['prev_called', ':=', 'make', '(', 'map', '[', 'int', ']', 'bool', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
129,    for i := 0; i < 100; i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', '100', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
130,        if len(claimants) == 3 {,"['if', 'len', '(', 'claimants', ')', '==', '3', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
131,            break,['break'],['KEYWORD']
132,        },['}'],['OPERATOR']
133,        num := rand.Intn(100) + 1,"['num', ':=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
134,"        _, ok := prev_called[num]","['_', ',', 'ok', ':=', 'prev_called', '[', 'num', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
135,        for ok {,"['for', 'ok', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR']"
136,            num = rand.Intn(100) + 1,"['num', '=', 'rand', '.', 'Intn', '(', '100', ')', '+', '1']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL']"
137,"            _, ok = prev_called[num]","['_', ',', 'ok', '=', 'prev_called', '[', 'num', ']']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
138,        },['}'],['OPERATOR']
139,        prev_called[num] = true,"['prev_called', '[', 'num', ']', '=', 'true']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
140,"        if !contains(claimants, 0) {","['if', '!', 'contains', '(', 'claimants', ',', '0', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR']"
141,            called_number1 <- num,"['called_number1', '<-', 'num']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
142,        },['}'],['OPERATOR']
143,"        if !contains(claimants, 1) {","['if', '!', 'contains', '(', 'claimants', ',', '1', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR']"
144,            called_number2 <- num,"['called_number2', '<-', 'num']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
145,        },['}'],['OPERATOR']
146,"        if !contains(claimants, 2) {","['if', '!', 'contains', '(', 'claimants', ',', '2', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'OPERATOR']"
147,            called_number3 <- num,"['called_number3', '<-', 'num']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
148,        },['}'],['OPERATOR']
149,        for j := 0; j < 3; j++ {,"['for', 'j', ':=', '0', ';', 'j', '<', '3', ';', 'j', '++', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
150,            select {,"['select', '{']","['KEYWORD', 'OPERATOR']"
151,            case _ = <-received:,"['case', '_', '=', '<-', 'received', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
152,                continue,['continue'],['KEYWORD']
153,            case pid := <-claim_prize:,"['case', 'pid', ':=', '<-', 'claim_prize', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
154,                if pid == 0 { close(called_number1) },"['if', 'pid', '==', '0', '{', 'close', '(', 'called_number1', ')', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
155,                if pid == 1 { close(called_number2) },"['if', 'pid', '==', '1', '{', 'close', '(', 'called_number2', ')', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
156,                if pid == 2 { close(called_number3) },"['if', 'pid', '==', '2', '{', 'close', '(', 'called_number3', ')', '}']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
157,"                claimants = append(claimants, pid)","['claimants', '=', 'append', '(', 'claimants', ',', 'pid', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
158,            },['}'],['OPERATOR']
159,        },['}'],['OPERATOR']
160,    },['}'],['OPERATOR']
161,    fmt.Println(claimants),"['fmt', '.', 'Println', '(', 'claimants', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
162,},['}'],['OPERATOR']
163,"

EDIT2: This still deadlocked because I was not reducing the number of channels to wait for even after the goroutines were completed. Did that and everything works. 
","['EDIT2:', 'This', 'still', 'deadlocked', 'because', 'I', 'was', 'not', 'reducing', 'the', 'number', 'of', 'channels', 'to', 'wait', 'for', 'even', 'after', 'the', 'goroutines', 'were', 'completed.', 'Did', 'that', 'and', 'everything', 'works.']","['NN', 'DT', 'RB', 'VBN', 'IN', 'PRP', 'VBD', 'RB', 'VBG', 'DT', 'NN', 'IN', 'NNS', 'TO', 'VB', 'IN', 'RB', 'IN', 'DT', 'NNS', 'VBD', 'NNS', 'NNP', 'IN', 'CC', 'NN', 'NN']"
