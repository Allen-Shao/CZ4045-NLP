,text,token,annotation
0,"I am starting to learn OpenGL now, using the Go programming language (I just couldn't get working with C/C++ on my Windows machine), and so far I've managed to display some rotating cubes in the screen with textures mainly copying and pasting code from tutorials. I've learned a lot, though, but I just can't get some text on the screen with this code that I wrote on my own. I've looked up many tutorials and questions but nothing seems to work, and I suspect there is something wrong with the vertices because I'm pretty sure the textures coordinates are correct and still there's nothing showing up in the screen. Here's the code:

","['I', 'am', 'starting', 'to', 'learn', 'OpenGL', 'now,', 'using', 'the', 'Go', 'programming', 'language', '(I', 'just', ""couldn't"", 'get', 'working', 'with', 'C/C++', 'on', 'my', 'Windows', 'machine),', 'and', 'so', 'far', ""I've"", 'managed', 'to', 'display', 'some', 'rotating', 'cubes', 'in', 'the', 'screen', 'with', 'textures', 'mainly', 'copying', 'and', 'pasting', 'code', 'from', 'tutorials.', ""I've"", 'learned', 'a', 'lot,', 'though,', 'but', 'I', 'just', ""can't"", 'get', 'some', 'text', 'on', 'the', 'screen', 'with', 'this', 'code', 'that', 'I', 'wrote', 'on', 'my', 'own.', ""I've"", 'looked', 'up', 'many', 'tutorials', 'and', 'questions', 'but', 'nothing', 'seems', 'to', 'work,', 'and', 'I', 'suspect', 'there', 'is', 'something', 'wrong', 'with', 'the', 'vertices', 'because', ""I'm"", 'pretty', 'sure', 'the', 'textures', 'coordinates', 'are', 'correct', 'and', 'still', ""there's"", 'nothing', 'showing', 'up', 'in', 'the', 'screen.', ""Here's"", 'the', 'code:']","['PRP', 'VBP', 'VBG', 'TO', 'VB', 'NNP', 'CC', 'VBG', 'DT', 'NNP', 'JJ', 'NN', 'NN', 'RB', 'JJ', 'VB', 'VBG', 'IN', 'NNP', 'IN', 'PRP$', 'NNP', 'NN', 'CC', 'RB', 'RB', 'NNP', 'VBD', 'TO', 'VB', 'DT', 'VBG', 'NNS', 'IN', 'DT', 'NN', 'IN', 'NNS', 'RB', 'VBG', 'CC', 'VBG', 'NN', 'IN', 'JJ', 'NNP', 'VBD', 'DT', 'JJ', 'NN', 'CC', 'PRP', 'RB', 'VB', 'VB', 'DT', 'NN', 'IN', 'DT', 'NN', 'IN', 'DT', 'NN', 'IN', 'PRP', 'VBD', 'IN', 'PRP$', 'JJ', 'NNP', 'VBD', 'RP', 'JJ', 'NNS', 'CC', 'NNS', 'CC', 'NN', 'VBZ', 'TO', 'VB', 'CC', 'PRP', 'VBP', 'EX', 'VBZ', 'NN', 'JJ', 'IN', 'DT', 'NNS', 'IN', 'NNP', 'RB', 'VBD', 'DT', 'NNS', 'NNS', 'VBP', 'JJ', 'CC', 'RB', 'VB', 'NN', 'VBG', 'RP', 'IN', 'DT', 'NN', 'NNP', 'DT', 'NN']"
1,package game,"['package', 'game']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"  ""fmt""","['""fmt""']",['STRING_LITERAL']
4,"  ""io/ioutil""","['""io/ioutil""']",['STRING_LITERAL']
5,"  ""image""","['""image""']",['STRING_LITERAL']
6,"  ""image/draw""","['""image/draw""']",['STRING_LITERAL']
7,"  ""github.com/go-gl/gl/v3.3-core/gl""","['""github.com/go-gl/gl/v3.3-core/gl""']",['STRING_LITERAL']
8,"  mgl ""github.com/go-gl/mathgl/mgl32""","['mgl', '""github.com/go-gl/mathgl/mgl32""']","['IDENTIFIER', 'STRING_LITERAL']"
9,"  ""github.com/golang/freetype/truetype""","['""github.com/golang/freetype/truetype""']",['STRING_LITERAL']
10,"  ""golang.org/x/image/font""","['""golang.org/x/image/font""']",['STRING_LITERAL']
11,"  ""golang.org/x/image/math/fixed""","['""golang.org/x/image/math/fixed""']",['STRING_LITERAL']
12,),[')'],['PUNCTUATION']
13,type GameFont struct {,"['type', 'GameFont', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
14,  loaded bool,"['loaded', 'bool']","['IDENTIFIER', 'IDENTIFIER']"
15,  vao uint32,"['vao', 'uint32']","['IDENTIFIER', 'IDENTIFIER']"
16,  vbo VBOData,"['vbo', 'VBOData']","['IDENTIFIER', 'IDENTIFIER']"
17,  pix float32,"['pix', 'float32']","['IDENTIFIER', 'IDENTIFIER']"
18,  Texture *Texture,"['Texture', '*', 'Texture']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER']"
19,  Shader ShaderProgram,"['Shader', 'ShaderProgram']","['IDENTIFIER', 'IDENTIFIER']"
20,},['}'],['PUNCTUATION']
21,// Load a TrueType font from a file and generate a texture ,"['//', 'Load', 'a', 'TrueType', 'font', 'from', 'a', 'file', 'and', 'generate', 'a', 'texture']","['COMMENT', 'VB', 'DT', 'NNP', 'NN', 'IN', 'DT', 'NN', 'CC', 'VB', 'DT', 'NN']"
22,// with all important characters.,"['//', 'with', 'all', 'important', 'characters.']","['COMMENT', 'IN', 'DT', 'JJ', 'NNS']"
23,"func (f *GameFont) Load(path string, pix float32) {","['func', '(', 'f', '*', 'GameFont', ')', 'Load', '(', 'path', 'string', ',', 'pix', 'float32', ')', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
24,"  contents, err := ioutil.ReadFile(path)","['contents', ',', 'err', ':=', 'ioutil.ReadFile(path)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
25,  if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
26,"    fmt.Println(""Could not read font file: "" + path)","['fmt.Println(""Could not read font file: "" + path)']",['FUNCTION_CALL']
27,    panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
28,  },['}'],['PUNCTUATION']
29,"  fontFace, err := truetype.Parse(contents)","['fontFace', ',', 'err', ':=', 'truetype.Parse(contents)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
30,  if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
31,"    fmt.Println(""Could not parse font file: "" + path)","['fmt.Println(""Could not parse font file: "" + path)']",['FUNCTION_CALL']
32,    panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
33,  },['}'],['PUNCTUATION']
34,  // Create a texture for the characters,"['//', 'Create', 'a', 'texture', 'for', 'the', 'characters']","['COMMENT', 'VB', 'DT', 'NN', 'IN', 'DT', 'NNS']"
35,  // Find the next power of 2 for the texture size,"['//', 'Find', 'the', 'next', 'power', 'of', '2', 'for', 'the', 'texture', 'size']","['COMMENT', 'IN', 'DT', 'JJ', 'NN', 'IN', 'CD', 'IN', 'DT', 'NN', 'NN']"
36,  size := nextP2(int(pix * 16)),"['size', ':=', 'nextP2', '(', 'int', '(', 'pix', '*', '16', '))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
37,"  fg, bg := image.White, image.Black","['fg', ',', 'bg', ':=', 'image', '.', 'White', ',', 'image', '.', 'Black']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
38,"  rgba := image.NewRGBA(image.Rect(0, 0, size, size))","['rgba', ':=', 'image.NewRGBA(image.Rect(0, 0, size, size))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
39,"  draw.Draw(rgba, rgba.Bounds(), bg, image.ZP, draw.Src)","['draw.Draw(rgba, rgba.Bounds(), bg, image.ZP, draw.Src)']",['FUNCTION_CALL']
40,  d := &font.Drawer{,"['d', ':=', '&', 'font', '.', 'Drawer', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
41,"    Dst: rgba,","['Dst', ':', 'rgba', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
42,"    Src: fg,","['Src', ':', 'fg', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
43,"    Face: truetype.NewFace(fontFace, &truetype.Options{","['Face', ':', 'truetype', '.', 'NewFace', '(', 'fontFace', ',', '&', 'truetype', '.', 'Options', '{']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
44,"      Size: float64(pix),","['Size', ':', 'float64', '(', 'pix', '),']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
45,"      DPI: 72,","['DPI', ':', '72', ',']","['IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
46,"      Hinting: font.HintingNone,","['Hinting', ':', 'font', '.', 'HintingNone', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
47,"    }),","['}),']",['PUNCTUATION']
48,  },['}'],['PUNCTUATION']
49,  // Some GL preps,"['//', 'Some', 'GL', 'preps']","['COMMENT', 'DT', 'NNP', 'NNS']"
50,"  gl.GenVertexArrays(1, &f.vao)","['gl.GenVertexArrays(1, &f.vao)']",['FUNCTION_CALL']
51,  gl.BindVertexArray(f.vao),['gl.BindVertexArray(f.vao)'],['FUNCTION_CALL']
52,  f.vbo.Create(),"['f', '.', 'vbo.Create()']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
53,  f.vbo.Bind(),"['f', '.', 'vbo.Bind()']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
54,"  f.Shader = newShaderProgram(""data/shaders/font.vert"", ""data/shaders/font.frag"")","['f', '.', 'Shader', '=', 'newShaderProgram', '(', '""data/shaders/font.vert""', ',', '""data/shaders/font.frag""', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
55,  f.Shader.Use(),"['f', '.', 'Shader.Use()']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
56,"  f.Shader.SetUniform(""tex"", 0)","['f', '.', 'Shader.SetUniform(""tex"", 0)']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
57,  // Create vertex data (and coordinates in the texture) for each character,"['//', 'Create', 'vertex', 'data', '(and', 'coordinates', 'in', 'the', 'texture)', 'for', 'each', 'character']","['COMMENT', 'NNP', 'NN', 'NNS', 'VBP', 'NNS', 'IN', 'DT', 'NN', 'IN', 'DT', 'NN']"
58,  // All characters below 32 are useless,"['//', 'All', 'characters', 'below', '32', 'are', 'useless']","['COMMENT', 'DT', 'NNS', 'IN', 'CD', 'VBP', 'JJ']"
59,  for i := 32; i < 128; i++ {,"['for', 'i', ':=', '32', ';', 'i', '<', '128', ';', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'PUNCTUATION']"
60,    c := string(rune(i)),"['c', ':=', 'string', '(', 'rune', '(', 'i', '))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
61,"    x, y := i % 16, i / 16","['x', ',', 'y', ':=', 'i', '%', '16', ',', 'i', '/', '16']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL']"
62,    // Draw the character on the texture,"['//', 'Draw', 'the', 'character', 'on', 'the', 'texture']","['COMMENT', 'VB', 'DT', 'NN', 'IN', 'DT', 'NN']"
63,"    d.Dot = fixed.P(x * int(pix), y * int(pix))","['d', '.', 'Dot', '=', 'fixed.P(x * int(pix), y * int(pix))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
64,    d.DrawString(c),['d.DrawString(c)'],['FUNCTION_CALL']
65,    // Vertices,"['//', 'Vertices']","['COMMENT', 'NNS']"
66,    quads := []float32{,"['quads', ':=', '[]', 'float32', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
67,"      0,    0,","['0', ',', '0', ',']","['OCTAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION']"
68,"      0,    pix,","['0', ',', 'pix', ',']","['OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
69,"      pix,  0,","['pix', ',', '0', ',']","['IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION']"
70,"      pix,  pix,","['pix', ',', 'pix', ',']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
71,    },['}'],['PUNCTUATION']
72,    norm := func(n int) float32 {,"['norm', ':=', 'func', '(', 'n', 'int', ')', 'float32', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
73,      return float32(n) / 16.0,"['return', 'float32', '(', 'n', ')', '/', '16', '.', '0']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL']"
74,    },['}'],['PUNCTUATION']
75,    // Texture coordinates (normalized),"['//', 'Texture', 'coordinates', '(normalized)']","['COMMENT', 'NN', 'VBZ', 'NNS']"
76,    texQuads := []float32{,"['texQuads', ':=', '[]', 'float32', '{']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
77,"      norm(x),      1.0 - norm(y + 1),","['norm', '(', 'x', '),', '1', '.', '0', '-', 'norm', '(', 'y', '+', '1', '),']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
78,"      norm(x),      1.0 - norm(y),","['norm', '(', 'x', '),', '1', '.', '0', '-', 'norm', '(', 'y', '),']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
79,"      norm(x + 1),  1.0 - norm(y + 1),","['norm', '(', 'x', '+', '1', '),', '1', '.', '0', '-', 'norm', '(', 'y', '+', '1', '),']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
80,"      norm(x + 1),  1.0 - norm(y),","['norm', '(', 'x', '+', '1', '),', '1', '.', '0', '-', 'norm', '(', 'y', '),']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'OCTAL_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
81,    },['}'],['PUNCTUATION']
82,    for v := 0; v < 8; v += 2 {,"['for', 'v', ':=', '0', ';', 'v', '<', '8', ';', 'v', '+=', '2', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
83,"      vQuads, vTexQuads := quads[v:(v+2)], texQuads[v:(v+2)]","['vQuads', ',', 'vTexQuads', ':=', 'quads', '[', 'v', ':(', 'v', '+', '2', ')],', 'texQuads', '[', 'v', ':(', 'v', '+', '2', ')]']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
84,"      // Data is like (X, Y, U, V)","['//', 'Data', 'is', 'like', '(X,', 'Y,', 'U,', 'V)']","['COMMENT', 'NNP', 'VBZ', 'IN', 'NNP', 'NNP', 'NNP', 'NNP']"
85,"      f.vbo.AppendData(vQuads, 2)","['f', '.', 'vbo.AppendData(vQuads, 2)']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
86,"      f.vbo.AppendData(vTexQuads, 2)","['f', '.', 'vbo.AppendData(vTexQuads, 2)']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
87,    },['}'],['PUNCTUATION']
88,  },['}'],['PUNCTUATION']
89,  // Upload data to GPU and we're done,"['//', 'Upload', 'data', 'to', 'GPU', 'and', ""we're"", 'done']","['COMMENT', 'NNP', 'NNS', 'TO', 'NNP', 'CC', 'VB', 'VBN']"
90,  f.Texture = newTextureFromRGBA(rgba),"['f', '.', 'Texture', '=', 'newTextureFromRGBA', '(', 'rgba', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
91,  f.Texture.Bind(),"['f', '.', 'Texture.Bind()']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
92,"  f.Texture.SetGLParam(gl.TEXTURE_MIN_FILTER, gl.LINEAR)","['f', '.', 'Texture.SetGLParam(gl.TEXTURE_MIN_FILTER, gl.LINEAR)']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
93,"  f.Texture.SetGLParam(gl.TEXTURE_MAG_FILTER, gl.LINEAR)","['f', '.', 'Texture.SetGLParam(gl.TEXTURE_MAG_FILTER, gl.LINEAR)']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
94,  f.Texture.Upload(),"['f', '.', 'Texture.Upload()']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
95,  f.vbo.UploadData(gl.STATIC_DRAW),"['f', '.', 'vbo.UploadData(gl.STATIC_DRAW)']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
96,  gl.EnableVertexAttribArray(0),['gl.EnableVertexAttribArray(0)'],['FUNCTION_CALL']
97,"  gl.VertexAttribPointer(0, 2, gl.FLOAT, false, 4*4, gl.PtrOffset(0))","['gl.VertexAttribPointer(0, 2, gl.FLOAT, false, 4*4, gl.PtrOffset(0))']",['FUNCTION_CALL']
98,  gl.EnableVertexAttribArray(1),['gl.EnableVertexAttribArray(1)'],['FUNCTION_CALL']
99,"  gl.VertexAttribPointer(1, 2, gl.FLOAT, false, 4*4, gl.PtrOffset(2*4))","['gl.VertexAttribPointer(1, 2, gl.FLOAT, false, 4*4, gl.PtrOffset(2*4))']",['FUNCTION_CALL']
100,  f.loaded = true,"['f', '.', 'loaded', '=', 'true']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'BOOLEAN_LITERAL']"
101,},['}'],['PUNCTUATION']
102,// Render a text using the font,"['//', 'Render', 'a', 'text', 'using', 'the', 'font']","['COMMENT', 'VB', 'DT', 'NN', 'VBG', 'DT', 'NN']"
103,"func (f *GameFont) Render(text string, x, y int, pix float32, color mgl.Vec4) {","['func', '(', 'f', '*', 'GameFont', ')', 'Render', '(', 'text', 'string', ',', 'x', ',', 'y', 'int', ',', 'pix', 'float32', ',', 'color', 'mgl', '.', 'Vec4', ')', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
104,  if !f.loaded {,"['if', '!', 'f', '.', 'loaded', '{']","['KEYWORD', 'LOGICAL_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
105,    return,['return'],['KEYWORD']
106,  },['}'],['PUNCTUATION']
107,  gl.Disable(gl.DEPTH_TEST),['gl.Disable(gl.DEPTH_TEST)'],['FUNCTION_CALL']
108,  gl.Enable(gl.BLEND),['gl.Enable(gl.BLEND)'],['FUNCTION_CALL']
109,"  gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)","['gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)']",['FUNCTION_CALL']
110,  gl.BindVertexArray(f.vao),['gl.BindVertexArray(f.vao)'],['FUNCTION_CALL']
111,  f.Shader.Use(),"['f', '.', 'Shader.Use()']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
112,"  f.Shader.SetUniform(""projection"", mgl.Ortho2D(0, _screen.Width, 0, _screen.Height))","['f', '.', 'Shader.SetUniform(""projection"", mgl.Ortho2D(0, _screen.Width, 0, _screen.Height))']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
113,"  f.Shader.SetUniform(""color"", color)","['f', '.', 'Shader.SetUniform(""color"", color)']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
114,  f.Texture.Bind(),"['f', '.', 'Texture.Bind()']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
115,  scale := pix / f.pix,"['scale', ':=', 'pix', '/', 'f', '.', 'pix']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
116,  for i := 0; i < len(text); i++ {,"['for', 'i', ':=', '0', ';', 'i', '<', 'len', '(', 'text', ');', 'i', '++', '{']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'PUNCTUATION']"
117,    index := rune(text[i]),"['index', ':=', 'rune', '(', 'text', '[', 'i', '])']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
118,"    model := mgl.Ident4().Mul4(mgl.Scale3D(scale, scale, 0))","['model', ':=', 'mgl.Ident4().Mul4(mgl.Scale3D(scale, scale, 0))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
119,"    model = model.Add(mgl.Translate3D(float32(x) + float32(i) * pix, float32(y), 0))","['model', '=', 'model.Add(mgl.Translate3D(float32(x) + float32(i) * pix, float32(y), 0))']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
120,"    f.Shader.SetUniform(""model"", model)","['f', '.', 'Shader.SetUniform(""model"", model)']","['IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
121,"    gl.DrawArrays(gl.TRIANGLE_STRIP, (32-index)*4, 4)","['gl.DrawArrays(gl.TRIANGLE_STRIP, (32-index)*4, 4)']",['FUNCTION_CALL']
122,  },['}'],['PUNCTUATION']
123,  gl.Enable(gl.DEPTH_TEST),['gl.Enable(gl.DEPTH_TEST)'],['FUNCTION_CALL']
124,  gl.Disable(gl.BLEND),['gl.Disable(gl.BLEND)'],['FUNCTION_CALL']
125,},['}'],['PUNCTUATION']
126,"

Here's the shaders:

Vertex shader

","[""Here's"", 'the', 'shaders:', 'Vertex', 'shader']","['NNP', 'DT', 'NN', 'NNP', 'NN']"
127,#version 330,"['version', '330']","['IDENTIFIER', 'DECIMAL_LITERAL']"
128,uniform mat4 projection;,"['uniform', 'mat4', 'projection', ';']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
129,uniform mat4 model;,"['uniform', 'mat4', 'model', ';']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
130,layout (location = 0) in vec2 vert;,"['layout', '(', 'location', '=', '0', ')', 'in', 'vec2', 'vert', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'OCTAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
131,layout (location = 1) in vec2 vertTexCoord;,"['layout', '(', 'location', '=', '1', ')', 'in', 'vec2', 'vertTexCoord', ';']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
132,out vec2 fragTexCoord;,"['out', 'vec2', 'fragTexCoord', ';']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
133,void main() {,"['void', 'main', '()', '{']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
134,  fragTexCoord = vertTexCoord;,"['fragTexCoord', '=', 'vertTexCoord', ';']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
135,"  gl_Position = projection * model * vec4(vert, 0, 1);","['gl_Position', '=', 'projection', '*', 'model', '*', 'vec4', '(', 'vert', ',', '0', ',', '1', ');']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'OCTAL_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
136,},['}'],['PUNCTUATION']
137,"

Fragment shader

","['Fragment', 'shader']","['NN', 'NN']"
138,#version 330,"['version', '330']","['IDENTIFIER', 'DECIMAL_LITERAL']"
139,uniform sampler2D tex;,"['uniform', 'sampler2D', 'tex', ';']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
140,uniform vec4 color;,"['uniform', 'vec4', 'color', ';']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
141,in vec2 fragTexCoord;,"['in', 'vec2', 'fragTexCoord', ';']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
142,out vec4 outputColor;,"['out', 'vec4', 'outputColor', ';']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION']"
143,void main() {,"['void', 'main', '()', '{']","['IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
144,"  outputColor = color * texture(tex, fragTexCoord);","['outputColor', '=', 'color', '*', 'texture', '(', 'tex', ',', 'fragTexCoord', ');']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
145,},['}'],['PUNCTUATION']
146,"

Every ""component"" of the GameFont struct is working properly (I've used them with the rotating cubes), so every function calls the GL corresponding one.

Also the texture is being drawed correctly, I've saved it to the disk and it looks like this:



And still, there's no text on the screen.
","['Every', '""component""', 'of', 'the', 'GameFont', 'struct', 'is', 'working', 'properly', ""(I've"", 'used', 'them', 'with', 'the', 'rotating', 'cubes),', 'so', 'every', 'function', 'calls', 'the', 'GL', 'corresponding', 'one.', 'Also', 'the', 'texture', 'is', 'being', 'drawed', 'correctly,', ""I've"", 'saved', 'it', 'to', 'the', 'disk', 'and', 'it', 'looks', 'like', 'this:', 'And', 'still,', ""there's"", 'no', 'text', 'on', 'the', 'screen.']","['DT', 'NN', 'IN', 'DT', 'NNP', 'NN', 'VBZ', 'VBG', 'RB', 'VBN', 'VBN', 'PRP', 'IN', 'DT', 'VBG', 'NN', 'RB', 'DT', 'NN', 'VBZ', 'DT', 'NNP', 'NN', 'NN', 'RB', 'DT', 'NN', 'VBZ', 'VBG', 'VBN', 'NN', 'NNP', 'VBD', 'PRP', 'TO', 'DT', 'NN', 'CC', 'PRP', 'VBZ', 'IN', 'NN', 'CC', 'NN', 'NN', 'DT', 'NN', 'IN', 'DT', 'NN']"
