,text,token,annotation
0,You may use one ,"['You', 'may', 'use', 'one']","['PRP', 'MD', 'VB', 'CD']"
1,func Save(d interface{}),"['func', 'Save', '(', 'd', 'interface', '{})']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
2," like this:","['like', 'this', ':']","['IN', 'DT', ':']"
3,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
4,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
5,"    ""encoding/json""","['""encoding/json""']",['STRING_LITERAL']
6,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
7,),[')'],['PUNCTUATION']
8,type User struct {,"['type', 'User', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
9,    ID   int,"['ID', 'int']","['IDENTIFIER', 'IDENTIFIER']"
10,    Name string,"['Name', 'string']","['IDENTIFIER', 'IDENTIFIER']"
11,},['}'],['PUNCTUATION']
12,type Admin struct {,"['type', 'Admin', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
13,    User,['User'],['IDENTIFIER']
14,    Level int,"['Level', 'int']","['IDENTIFIER', 'IDENTIFIER']"
15,},['}'],['PUNCTUATION']
16,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
17,    Save(User{}),['Save(User{})'],['FUNCTION_CALL']
18,    Save(Admin{}),"['Save', '(', 'Admin', '{})']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
19,},['}'],['PUNCTUATION']
20,func Save(d interface{}) {,"['func', 'Save', '(', 'd', 'interface', '{})', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'PUNCTUATION']"
21,"    body, err := json.Marshal(d)","['body', ',', 'err', ':=', 'json.Marshal(d)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
22,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'RESERVED', 'PUNCTUATION']"
23,        panic(err),['panic(err)'],['FUNCTION_CALL']
24,    },['}'],['PUNCTUATION']
25,    st := string(body),"['st', ':=', 'string(body)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
26,    fmt.Println(st),['fmt.Println(st)'],['FUNCTION_CALL']
27,},['}'],['PUNCTUATION']
28,"output:","['output', ':']","['NN', ':']"
29,"{""ID"":0,""Name"":""""}","['{', '""ID""', ':', '0', ',', '""Name""', ':', '""""', '}']","['PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
30,"{""ID"":0,""Name"":"""",""Level"":0}","['{', '""ID""', ':', '0', ',', '""Name""', ':', '""""', ',', '""Level""', ':', '0', '}']","['PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
31,"for your case, use this one function for all types:","['for', 'your', 'case', ',', 'use', 'this', 'one', 'function', 'for', 'all', 'types', ':']","['IN', 'PRP$', 'NN', ',', 'VBP', 'DT', 'CD', 'NN', 'IN', 'DT', 'NNS', ':']"
32,"func Save(i interface{}, id int) {","['func', 'Save', '(', 'i', 'interface', '{},', 'id', 'int', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
33,"    data, err := json.Marshal(i)","['data', ',', 'err', ':=', 'json.Marshal(i)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
34,    check(err),['check(err)'],['FUNCTION_CALL']
35,    if id == 0 {,"['if', 'id', '==', '0', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
36,"        _, err = app.DB.Exec(`INSERT INTO users(data) VALUES ($1) `, string(data))","['_', ',', 'err', '=', 'app', '.', 'DB.Exec(`INSERT INTO users(data) VALUES ($1) `, string(data))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
37,    } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
38,"        _, err = app.DB.Exec(`UPDATE users SET data = $1 WHERE id=$2`, string(data), id)","['_', ',', 'err', '=', 'app', '.', 'DB.Exec(`UPDATE users SET data = $1 WHERE id=$2`, string(data), id)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
39,    },['}'],['PUNCTUATION']
40,    check(err),['check(err)'],['FUNCTION_CALL']
41,},['}'],['PUNCTUATION']
42,"And call it like this:","['And', 'call', 'it', 'like', 'this', ':']","['CC', 'VB', 'PRP', 'IN', 'DT', ':']"
43,u := User{},"['u', ':=', 'User', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
44,a := Admin{},"['a', ':=', 'Admin', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
45,"Save(u, u.ID)","['Save(u, u.ID)']",['FUNCTION_CALL']
46,"Save(a, a.ID)","['Save(a, a.ID)']",['FUNCTION_CALL']
47,"And Yes, this is even simplifies call to Save to one parameter:","['And', 'Yes', ',', 'this', 'is', 'even', 'simplifies', 'call', 'to', 'Save', 'to', 'one', 'parameter', ':']","['CC', 'UH', ',', 'DT', 'VBZ', 'RB', 'NNS', 'VBP', 'TO', 'VB', 'TO', 'CD', 'NN', ':']"
48,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
49,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
50,"    ""encoding/json""","['""encoding/json""']",['STRING_LITERAL']
51,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
52,),[')'],['PUNCTUATION']
53,type Model interface {,"['type', 'Model', 'interface', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
54,    ID() int,"['ID', '()', 'int']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
55,    setID(int),['setID(int)'],['FUNCTION_CALL']
56,},['}'],['PUNCTUATION']
57,type User struct {,"['type', 'User', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
58,    Id   int,"['Id', 'int']","['IDENTIFIER', 'IDENTIFIER']"
59,    Name string,"['Name', 'string']","['IDENTIFIER', 'RESERVED']"
60,},['}'],['PUNCTUATION']
61,func (t User) ID() int      { return t.Id },"['func', '(', 't', 'User', ')', 'ID', '()', 'int', '{', 'return', 't', '.', 'Id', '}']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
62,func (t User) setID(id int) { t.Id = id },"['func', '(', 't', 'User', ')', 'setID', '(', 'id', 'int', ')', '{', 't', '.', 'Id', '=', 'id', '}']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
63,type Admin struct {,"['type', 'Admin', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
64,    User,['User'],['IDENTIFIER']
65,    Level int,"['Level', 'int']","['IDENTIFIER', 'RESERVED']"
66,},['}'],['PUNCTUATION']
67,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
68,    Save(User{}),['Save(User{})'],['FUNCTION_CALL']
69,    Save(Admin{}),['Save(Admin{})'],['FUNCTION_CALL']
70,},['}'],['PUNCTUATION']
71,func Save(d Model) {,"['func', 'Save', '(', 'd', 'Model', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
72,"    body, err := json.Marshal(d)","['body', ',', 'err', ':=', 'json.Marshal(d)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
73,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'RESERVED', 'PUNCTUATION']"
74,        panic(err),['panic(err)'],['FUNCTION_CALL']
75,    },['}'],['PUNCTUATION']
76,    st := string(body),"['st', ':=', 'string(body)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
77,    fmt.Println(st),['fmt.Println(st)'],['FUNCTION_CALL']
78,"    fmt.Println(""ID is "", d.ID())","['fmt.Println(""ID is "", d.ID())']",['FUNCTION_CALL']
79,},['}'],['PUNCTUATION']
80,"output:","['output', ':']","['NN', ':']"
81,"{""Id"":0,""Name"":""""}","['{', '""Id""', ':', '0', ',', '""Name""', ':', '""""', '}']","['PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
82,ID is  0,"['ID', 'is', '0']","['IDENTIFIER', 'IDENTIFIER', 'DECIMAL_LITERAL']"
83,"{""Id"":0,""Name"":"""",""Level"":0}","['{', '""Id""', ':', '0', ',', '""Name""', ':', '""""', ',', '""Level""', ':', '0', '}']","['PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION', 'DECIMAL_LITERAL', 'PUNCTUATION']"
84,ID is  0,"['ID', 'is', '0']","['IDENTIFIER', 'IDENTIFIER', 'DECIMAL_LITERAL']"
85,"Now You may use this one function for all types:","['Now', 'You', 'may', 'use', 'this', 'one', 'function', 'for', 'all', 'types', ':']","['RB', 'PRP', 'MD', 'VB', 'DT', 'CD', 'NN', 'IN', 'DT', 'NNS', ':']"
86,func Save(i Model) {,"['func', 'Save', '(', 'i', 'Model', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
87,"    data, err := json.Marshal(i)","['data', ',', 'err', ':=', 'json.Marshal(i)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
88,    check(err),['check(err)'],['FUNCTION_CALL']
89,    id := i.ID(),"['id', ':=', 'i.ID()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
90,    if id == 0 {,"['if', 'id', '==', '0', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'DECIMAL_LITERAL', 'PUNCTUATION']"
91,"        _, err = app.DB.Exec(`INSERT INTO users(data) VALUES ($1) `, string(data))","['_', ',', 'err', '=', 'app', '.', 'DB.Exec(`INSERT INTO users(data) VALUES ($1) `, string(data))']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
92,    } else {,"['}', 'else', '{']","['PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
93,"        _, err = app.DB.Exec(`UPDATE users SET data = $1 WHERE id=$2`, string(data), id)","['_', ',', 'err', '=', 'app', '.', 'DB.Exec(`UPDATE users SET data = $1 WHERE id=$2`, string(data), id)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'FUNCTION_CALL']"
94,    },['}'],['PUNCTUATION']
95,    check(err),['check(err)'],['FUNCTION_CALL']
96,},['}'],['PUNCTUATION']
97,"And call it like this:","['And', 'call', 'it', 'like', 'this', ':']","['CC', 'VB', 'PRP', 'IN', 'DT', ':']"
98,u := User{},"['u', ':=', 'User', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
99,a := Admin{},"['a', ':=', 'Admin', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
100,Save(u),['Save(u)'],['FUNCTION_CALL']
101,Save(a),['Save(a)'],['FUNCTION_CALL']
102,"Effective Go:  Getters    Go doesn't provide automatic support for getters and setters. There's  nothing wrong with providing getters and setters yourself, and it's  often appropriate to do so, but it's neither idiomatic nor necessary  to put Get into the getter's name. If you have a field called owner  (lower case, unexported), the getter method should be called Owner  (upper case, exported), not GetOwner. The use of upper-case names for  export provides the hook to discriminate the field from the method. A  setter function, if needed, will likely be called SetOwner. Both names  read well in practice:","['Effective', 'Go', ':', 'Getters', 'Go', 'does', ""n't"", 'provide', 'automatic', 'support', 'for', 'getters', 'and', 'setters', '.', 'There', ''s', 'nothing', 'wrong', 'with', 'providing', 'getters', 'and', 'setters', 'yourself', ',', 'and', 'it', 's', 'often', 'appropriate', 'to', 'do', 'so', ',', 'but', 'it', ""'s"", 'neither', 'idiomatic', 'nor', 'necessary', 'to', 'put', 'Get', 'into', 'the', 'getter', ""'s"", 'name', '.', 'If', 'you', 'have', 'a', 'field', 'called', 'owner', '(', 'lower', 'case', ',', 'unexported', ')', ',', 'the', 'getter', 'method', 'should', 'be', 'called', 'Owner', '(', 'upper', 'case', ',', 'exported', ')', ',', 'not', 'GetOwner', '.', 'The', 'use', 'of', 'upper-case', 'names', 'for', 'export', 'provides', 'the', 'hook', 'to', 'discriminate', 'the', 'field', 'from', 'the', 'method', '.', 'A', 'setter', 'function', ',', 'if', 'needed', ',', 'will', 'likely', 'be', 'called', 'SetOwner', '.', 'Both', 'names', 'read', 'well', 'in', 'practice', ':']","['JJ', 'NNP', ':', 'NNS', 'NNP', 'VBZ', 'RB', 'VB', 'JJ', 'NN', 'IN', 'NNS', 'CC', 'NNS', '.', 'EX', 'VB', 'NN', 'JJ', 'IN', 'VBG', 'NNS', 'CC', 'NNS', 'PRP', ',', 'CC', 'PRP', 'VB', 'RB', 'JJ', 'TO', 'VB', 'RB', ',', 'CC', 'PRP', 'VBZ', 'CC', 'JJ', 'CC', 'JJ', 'TO', 'VB', 'NNP', 'IN', 'DT', 'NN', 'POS', 'NN', '.', 'IN', 'PRP', 'VBP', 'DT', 'NN', 'VBN', 'NN', '(', 'JJR', 'NN', ',', 'VBN', ')', ',', 'DT', 'NN', 'NN', 'MD', 'VB', 'VBN', 'NNP', '(', 'JJ', 'NN', ',', 'VBN', ')', ',', 'RB', 'NNP', '.', 'DT', 'NN', 'IN', 'JJ', 'NNS', 'IN', 'NN', 'VBZ', 'DT', 'NN', 'TO', 'VB', 'DT', 'NN', 'IN', 'DT', 'NN', '.', 'DT', 'NN', 'NN', ',', 'IN', 'VBN', ',', 'MD', 'RB', 'VB', 'VBN', 'NNP', '.', 'DT', 'NNS', 'VBP', 'RB', 'IN', 'NN', ':']"
103,owner := obj.Owner(),"['owner', ':=', 'obj.Owner()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
104,if owner != user {,"['if', 'owner', '!=', 'user', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
105,    obj.SetOwner(user),['obj.SetOwner(user)'],['FUNCTION_CALL']
106,},['}'],['PUNCTUATION']