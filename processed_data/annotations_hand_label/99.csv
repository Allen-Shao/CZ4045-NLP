,text,token,annotation
0,"Admittedly, it's somewhat of a quirk, but there's an explanation for it.

Imagine an interface{} variable as a struct composed of two fields: one is the type and another is the data. ([]int and nil). Actually, it looks just like that in the Go runtime.

","['Admittedly,', ""it's"", 'somewhat', 'of', 'a', 'quirk,', 'but', ""there's"", 'an', 'explanation', 'for', 'it.', 'Imagine', 'an', 'interface{}', 'variable', 'as', 'a', 'struct', 'composed', 'of', 'two', 'fields:', 'one', 'is', 'the', 'type', 'and', 'another', 'is', 'the', 'data.', '([]int', 'and', 'nil).', 'Actually,', 'it', 'looks', 'just', 'like', 'that', 'in', 'the', 'Go', 'runtime.']","['NNP', 'VBZ', 'RB', 'IN', 'DT', 'NN', 'CC', 'VBP', 'DT', 'NN', 'IN', 'JJ', 'NNP', 'DT', 'NN', 'NN', 'IN', 'DT', 'NN', 'VBN', 'IN', 'CD', 'JJ', 'CD', 'VBZ', 'DT', 'NN', 'CC', 'DT', 'VBZ', 'DT', 'JJ', 'NN', 'CC', 'JJ', 'NNP', 'PRP', 'VBZ', 'RB', 'IN', 'DT', 'IN', 'DT', 'NNP', 'NN']"
1,struct Iface                                                                                                                   ,"['struct', 'Iface']","['KEYWORD', 'IDENTIFIER']"
2,{                                                                                                                              ,['{'],['PUNCTUATION']
3,    Itab*   tab;                                                                                                               ,"['Itab', '*', 'tab', ';']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
4,    void*   data;                                                                                                              ,"['void', '*', 'data', ';']","['IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
5,};   ,['};'],['PUNCTUATION']
6,"

When you pass your nil slice to yes, only nil is passed as the value, so your comparison boils down to nil == nil. 

Meanwhile, calling no automatically wraps your variable in an interface{} type and the call becomes something akin to ","['When', 'you', 'pass', 'your', 'nil', 'slice', 'to', 'yes,', 'only', 'nil', 'is', 'passed', 'as', 'the', 'value,', 'so', 'your', 'comparison', 'boils', 'down', 'to', 'nil', '==', 'nil.', 'Meanwhile,', 'calling', 'no', 'automatically', 'wraps', 'your', 'variable', 'in', 'an', 'interface{}', 'type', 'and', 'the', 'call', 'becomes', 'something', 'akin', 'to']","['WRB', 'PRP', 'VBP', 'PRP$', 'JJ', 'NN', 'TO', 'VB', 'RB', 'NN', 'VBZ', 'VBN', 'IN', 'DT', 'NN', 'RB', 'PRP$', 'NN', 'VBZ', 'RB', 'TO', 'VB', 'NNP', 'JJ', 'NNP', 'VBG', 'DT', 'RB', 'VBZ', 'PRP$', 'JJ', 'IN', 'DT', 'NN', 'NN', 'CC', 'DT', 'NN', 'VBZ', 'NN', 'JJ', 'TO']"
7,"no(interface{[]int, nil})","['no', '(', 'interface', '{[]', 'int', ',', 'nil', '})']","['IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
8,. So the comparison in no could be seen as ,"['.', 'So', 'the', 'comparison', 'in', 'no', 'could', 'be', 'seen', 'as']","['.', 'IN', 'DT', 'NN', 'IN', 'DT', 'MD', 'VB', 'VBN', 'IN']"
9,"interface{[]int, nil} == nil","['interface', '{[]', 'int', ',', 'nil', '}', '==', 'nil']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'RELATION_OPERATOR', 'IDENTIFIER']"
10,", which turns out to be false in go.

The issue is actually explained in the Go FAQ.
","[',', 'which', 'turns', 'out', 'to', 'be', 'false', 'in', 'go.', 'The', 'issue', 'is', 'actually', 'explained', 'in', 'the', 'Go', 'FAQ.']","[',', 'WDT', 'VBZ', 'RP', 'TO', 'VB', 'JJ', 'IN', 'NN', 'DT', 'NN', 'VBZ', 'RB', 'VBN', 'IN', 'DT', 'NNP', 'NNP']"
