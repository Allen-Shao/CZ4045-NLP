,text,token,annotation
0,"I like the answers here so far and I want to add one that allows you to do static type checking on the interface you pass in using an interface:","['I', 'like', 'the', 'answers', 'here', 'so', 'far', 'and', 'I', 'want', 'to', 'add', 'one', 'that', 'allows', 'you', 'to', 'do', 'static', 'type', 'checking', 'on', 'the', 'interface', 'you', 'pass', 'in', 'using', 'an', 'interface', ':']","['PRP', 'VBP', 'DT', 'NNS', 'RB', 'RB', 'RB', 'CC', 'PRP', 'VBP', 'TO', 'VB', 'CD', 'WDT', 'VBZ', 'PRP', 'TO', 'VB', 'JJ', 'NN', 'VBG', 'IN', 'DT', 'NN', 'PRP', 'VBP', 'IN', 'VBG', 'DT', 'NN', ':']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
4,),[')'],['PUNCTUATION']
5,type Animalizer interface {,"['type', 'Animalizer', 'interface', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
6,    GetColour() string,"['GetColour', '()', 'string']","['IDENTIFIER', 'PUNCTUATION', 'RESERVED']"
7,},['}'],['PUNCTUATION']
8,type Animal struct {,"['type', 'Animal', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
9,    Colour string,"['Colour', 'string']","['IDENTIFIER', 'RESERVED']"
10,    Name   string,"['Name', 'string']","['IDENTIFIER', 'RESERVED']"
11,},['}'],['PUNCTUATION']
12,type Dog struct {,"['type', 'Dog', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
13,    Animal,['Animal'],['IDENTIFIER']
14,},['}'],['PUNCTUATION']
15,func (a *Animal) GetColour() string {,"['func', '(', 'a', '*', 'Animal', ')', 'GetColour', '()', 'string', '{']","['KEYWORD', 'PUNCTUATION', 'IDENTIFIER', â€˜POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'RESERVED', 'PUNCTUATION']"
16,    return a.Colour,"['return', 'a', '.', 'Colour']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER']"
17,},['}'],['PUNCTUATION']
18,func PrintColour(a Animalizer) {,"['func', 'PrintColour', '(', 'a', 'Animalizer', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
19,    fmt.Print(a.GetColour()),['fmt.Print(a.GetColour())'],['FUNCTION_CALL']
20,},['}'],['PUNCTUATION']
21,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
22,    a := new(Animal),"['a', ':=', 'new(Animal)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
23,"    a.Colour = ""Void""","['a', '.', 'Colour', '=', '""Void""']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL']"
24,    d := new(Dog),"['d', ':=', 'new(Dog)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
25,"    d.Colour = ""Black""","['d', '.', 'Colour', '=', '""Black""']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL']"
26,    PrintColour(a),['PrintColour(a)'],['FUNCTION_CALL']
27,    PrintColour(d),['PrintColour(d)'],['FUNCTION_CALL']
28,},['}'],['PUNCTUATION']
29,"On the playgroundIt will be possible to add further fields to Dog. The difference to Uriel's Answer is that calls to PrintColour will fail at compile time if something else than a struct implementing Animalizer is passed in. Also you won't have to use a typeswitch since the compiler knows an Animalizer is implementing GetColour.And, finally, the behaviour (printing) is separated from the struct, GetColour just returns the colour.","['On', 'the', 'playground', 'It', 'will', 'be', 'possible', 'to', 'add', 'further', 'fields', 'to', 'Dog', '.', 'The', 'difference', 'to', 'Uriel', ""'s"", 'Answer', 'is', 'that', 'calls', 'to', 'PrintColour', 'will', 'fail', 'at', 'compile', 'time', 'if', 'something', 'else', 'than', 'a', 'struct', 'implementing', 'Animalizer', 'is', 'passed', 'in', '.', 'Also', 'you', 'wo', ""n't"", 'have', 'to', 'use', 'a', 'typeswitch', 'since', 'the', 'compiler', 'knows', 'an', 'Animalizer', 'is', 'implementing', 'GetColour', '.', 'And', ',', 'finally', ',', 'the', 'behaviour', '(', 'printing', ')', 'is', 'separated', 'from', 'the', 'struct', ',', 'GetColour', 'just', 'returns', 'the', 'colour', '.']","['IN', 'DT', 'NN', 'PRP', 'MD', 'VB', 'JJ', 'TO', 'VB', 'JJ', 'NNS', 'TO', 'NNP', '.', 'DT', 'NN', 'TO', 'NNP', 'POS', 'NNP', 'VBZ', 'WDT', 'VBZ', 'TO', 'NNP', 'MD', 'VB', 'IN', 'JJ', 'NN', 'IN', 'NN', 'RB', 'IN', 'DT', 'KEYWORD', 'VBG', 'NNP', 'VBZ', 'VBN', 'IN', '.', 'RB', 'PRP', 'MD', 'RB', 'VB', 'TO', 'VB', 'DT', 'NN', 'IN', 'DT', 'NN', 'VBZ', 'DT', 'NNP', 'VBZ', 'VBG', 'NNP', '.', 'CC', ',', 'RB', ',', 'DT', 'NN', '(', 'VBG', ')', 'VBZ', 'VBN', 'IN', 'DT', 'KEYWORD', ',', 'NNP', 'RB', 'VBZ', 'DT', 'NN', '.']"