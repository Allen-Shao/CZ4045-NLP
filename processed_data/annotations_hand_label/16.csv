,text,token,annotation
0,"I guess if you dig enough you'll find the answer:

First off, when defining the LocalStructuredProperty properties in Python, you need to set keep_keys=True

","['I', 'guess', 'if', 'you', 'dig', 'enough', ""you'll"", 'find', 'the', 'answer:', 'First', 'off,', 'when', 'defining', 'the', 'LocalStructuredProperty', 'properties', 'in', 'Python,', 'you', 'need', 'to', 'set', 'keep_keys=True']","['PRP', 'VBP', 'IN', 'PRP', 'VBP', 'JJ', 'NN', 'VB', 'DT', 'NN', 'NNP', 'NN', 'WRB', 'VBG', 'DT', 'NNP', 'NNS', 'IN', 'NNP', 'PRP', 'VBP', 'TO', 'VB', 'NN']"
1,class ModelB(ndb.Model):,"['class', 'ModelB', '(', 'ndb', '.', 'Model', '):']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
2,    msg_id = ndb.StringProperty(indexed=False),"['msg_id', '=', 'ndb', '.', 'StringProperty', '(', 'indexed', '=', 'False', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
3,"    cat_ids = ndb.StringProperty(repeated=True, indexed=False)","['cat_ids', '=', 'ndb', '.', 'StringProperty', '(', 'repeated', '=', 'True', ',', 'indexed', '=', 'False', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
4,"    list_ids = ndb.StringProperty(repeated=True, indexed=False)","['list_ids', '=', 'ndb', '.', 'StringProperty', '(', 'repeated', '=', 'True', ',', 'indexed', '=', 'False', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
5,    default_list_id_index = ndb.IntegerProperty(indexed=False),"['default', '_list_id_index', '=', 'ndb', '.', 'IntegerProperty', '(', 'indexed', '=', 'False', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
6,class ModelA(ndb.Model):,"['class', 'ModelA', '(', 'ndb', '.', 'Model', '):']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
7,    date_join = ndb.DateTimeProperty(auto_now_add=True),"['date_join', '=', 'ndb', '.', 'DateTimeProperty', '(', 'auto_now_add', '=', 'True', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
8,    name = ndb.StringProperty(),"['name', '=', 'ndb', '.', 'StringProperty', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
9,    owner_salutation = ndb.StringProperty(indexed=False),"['owner_salutation', '=', 'ndb', '.', 'StringProperty', '(', 'indexed', '=', 'False', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
10,    owner_email_address = ndb.StringProperty(),"['owner_email_address', '=', 'ndb', '.', 'StringProperty', '()']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
11,    logo_url = ndb.StringProperty(indexed=False),"['logo_url', '=', 'ndb', '.', 'StringProperty', '(', 'indexed', '=', 'False', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
12,    ...,['...'],['OPERATOR']
13,"    messages = ndb.LocalStructuredProperty(ModelB, name='bm', repeated=True, keep_keys=True)","['messages', '=', 'ndb', '.', 'LocalStructuredProperty', '(', 'ModelB', ',', 'name', '=', 'bm', ',', 'repeated', '=', 'True', ',', 'keep_keys', '=', 'True', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
14,"

A simple redefinition in my code and mapping over my entities doing a put() on each fixed up the representation.

Then in my Go Code:

","['A', 'simple', 'redefinition', 'in', 'my', 'code', 'and', 'mapping', 'over', 'my', 'entities', 'doing', 'a', 'put()', 'on', 'each', 'fixed', 'up', 'the', 'representation.', 'Then', 'in', 'my', 'Go', 'Code:']","['DT', 'JJ', 'NN', 'IN', 'PRP$', 'NN', 'CC', 'NN', 'IN', 'PRP$', 'NNS', 'VBG', 'DT', 'NN', 'IN', 'DT', 'VBN', 'RP', 'DT', 'NN', 'RB', 'IN', 'PRP$', 'NNP', 'NNP']"
15,type ModelB struct {,"['type', 'ModelB', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
16,"    MessageID          string   `datastore:""msg_id,noindex""`","['MessageID', 'string', 'datastore', ':', '""msg_id,noindex""']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
17,"    CategoryIDs        []string `datastore:""cat_ids,noindex""`","['CategoryIDs', '[]', 'string', 'datastore', ':', '""cat_ids,noindex""']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
18,"    ListIDs            []string `datastore:""list_ids,noindex""`","['ListIDs', '[]', 'string', 'datastore', ':', '""list_ids,noindex""']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
19,"    DefaultListIDIndex int      `datastore:""default_list_id_index,noindex""`","['DefaultListIDIndex', 'int', 'datastore', ':', '""default_list_id_index,noindex""']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
20,},['}'],['OPERATOR']
21,type ModelA struct {,"['type', 'ModelA', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
22,"    DateJoin          time.Time `datastore:""date_join,""`","['DateJoin', 'time', '.', 'Time', 'datastore', ':', '""date_join,""']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
23,"    Name              string    `datastore:""name,""`","['Name', 'string', 'datastore', ':', '""name,""']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
24,"    OwnerSalutation   string    `datastore:""owner_salutation,noindex""`","['OwnerSalutation', 'string', 'datastore', ':', '""owner_salutation,noindex""']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
25,"    OwnerEmailAddress string    `datastore:""owner_email_address,""`","['OwnerEmailAddress', 'string', 'datastore', ':', '""owner_email_address,""']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
26,"    LogoURL           string    `datastore:""logo_url,noindex""`","['LogoURL', 'string', 'datastore', ':', '""logo_url,noindex""']","['IDENTIFIER', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
27,"    Messages          []ModelB  `datastore:""-""`","['Messages', '[]', 'ModelB', 'datastore', ':', '""-""']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL']"
28,},['}'],['OPERATOR']
29,// Load is implemented for the PropertyLoaderSaver interface.,"['//', 'Load', 'is', 'implemented', 'for', 'the', 'PropertyLoaderSaver', 'interface.']","['COMMENT', 'NN', 'VBZ', 'VBN', 'IN', 'DT', 'NNP', 'NN']"
30,func (s *ModelA) Load(c <-chan datastore.Property) (err error) {,"['func', '(', 's', '*', 'ModelA', ')', 'Load', '(', 'c', '<-', 'chan', 'datastore', '.', 'Property', ')', '(', 'err', 'error', ')', '{']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
31,"    f := make(chan datastore.Property, 32)","['f', ':=', 'make', '(', 'chan', 'datastore', '.', 'Property', ',', '32', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
32,"    errc := make(chan error, 1)","['errc', ':=', 'make', '(', 'chan', 'error', ',', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
33,    defer func() {,"['defer', 'func', '()', '{']","['IDENTIFIER', 'KEYWORD', 'OPERATOR', 'OPERATOR']"
34,        if err == nil {,"['if', 'err', '==', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
35,            err = <-errc,"['err', '=', '<-', 'errc']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
36,        },['}'],['OPERATOR']
37,    }(),['}()'],['OPERATOR']
38,    go func() {,"['go', 'func', '()', '{']","['KEYWORD', 'KEYWORD', 'OPERATOR', 'OPERATOR']"
39,        defer close(f),"['defer', 'close', '(', 'f', ')']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
40,        for p := range c {,"['for', 'p', ':=', 'range', 'c', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR']"
41,"            if p.Name == ""bm"" {","['if', 'p', '.', 'Name', '==', '""bm""', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
42,                var b ModelB,"['var', 'b', 'ModelB']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
43,"                err := loadLocalStructuredProperty(&b, []byte(p.Value.(string)))","['err', ':=', 'loadLocalStructuredProperty', '(&', 'b', ',', '[]', 'byte', '(', 'p', '.', 'Value', '.(', 'string', ')))']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
44,                if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
45,                    errc <- err,"['errc', '<-', 'err']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
46,                    return,['return'],['KEYWORD']
47,                },['}'],['OPERATOR']
48,"                s.Messages = append(s.Messages, b)","['s', '.', 'Messages', '=', 'append', '(', 's', '.', 'Messages', ',', 'b', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
49,            } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
50,                f <- p,"['f', '<-', 'p']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
51,            },['}'],['OPERATOR']
52,        },['}'],['OPERATOR']
53,        errc <- nil,"['errc', '<-', 'nil']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
54,    }(),['}()'],['OPERATOR']
55,"    return datastore.LoadStruct(s, f)","['return', 'datastore', '.', 'LoadStruct', '(', 's', ',', 'f', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
56,},['}'],['OPERATOR']
57,"

I had to copy a bunch from the appengine/datastore package as a key function wasn't exported and to simplify the amount of code I needed to copy, I dropped support for Reference types. I opened a ticket on the issue tracker to see if we can get the loadEntity function exported: https://code.google.com/p/googleappengine/issues/detail?id=10426

","['I', 'had', 'to', 'copy', 'a', 'bunch', 'from', 'the', 'appengine/datastore', 'package', 'as', 'a', 'key', 'function', ""wasn't"", 'exported', 'and', 'to', 'simplify', 'the', 'amount', 'of', 'code', 'I', 'needed', 'to', 'copy,', 'I', 'dropped', 'support', 'for', 'Reference', 'types.', 'I', 'opened', 'a', 'ticket', 'on', 'the', 'issue', 'tracker', 'to', 'see', 'if', 'we', 'can', 'get', 'the', 'loadEntity', 'function', 'exported:', 'https://code.google.com/p/googleappengine/issues/detail?id=10426']","['PRP', 'VBD', 'TO', 'VB', 'DT', 'NN', 'IN', 'DT', 'NN', 'NN', 'IN', 'DT', 'JJ', 'NN', 'NN', 'VBD', 'CC', 'TO', 'VB', 'DT', 'NN', 'IN', 'NN', 'PRP', 'VBD', 'TO', 'VB', 'PRP', 'VBD', 'NN', 'IN', 'NNP', 'NN', 'PRP', 'VBD', 'DT', 'NN', 'IN', 'DT', 'NN', 'NN', 'TO', 'VB', 'IN', 'PRP', 'MD', 'VB', 'DT', 'NN', 'NN', 'NN', 'NN']"
58,import (    ,"['import', '(']","['KEYWORD', 'OPERATOR']"
59,"    ""errors""    ","['""errors""']",['STRING_LITERAL']
60,"    ""time""    ","['""time""']",['STRING_LITERAL']
61,"    ""appengine""    ","['""appengine""']",['STRING_LITERAL']
62,"    ""appengine/datastore""        ","['""appengine/datastore""']",['STRING_LITERAL']
63,"    pb ""appengine_internal/datastore""    ","['pb', '""appengine_internal/datastore""']","['IDENTIFIER', 'STRING_LITERAL']"
64,"    proto ""code.google.com/p/goprotobuf/proto""    ","['proto', '""code.google.com/p/goprotobuf/proto""']","['IDENTIFIER', 'STRING_LITERAL']"
65,)    ,[')'],['OPERATOR']
66,"func loadLocalStructuredProperty(dst interface{}, raw_proto []byte) error {    ","['func', 'loadLocalStructuredProperty', '(', 'dst', 'interface', '{},', 'raw_proto', '[]', 'byte', ')', 'error', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
67,    var val pb.EntityProto    ,"['var', 'val', 'pb', '.', 'EntityProto']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
68,"    err := proto.Unmarshal(raw_proto, &val)    ","['err', ':=', 'proto', '.', 'Unmarshal', '(', 'raw_proto', ',', '&', 'val', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
69,    if err != nil {    ,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
70,        return err    ,"['return', 'err']","['KEYWORD', 'IDENTIFIER']"
71,    }    ,['}'],['OPERATOR']
72,"    return loadEntity(dst, &val)    ","['return', 'loadEntity', '(', 'dst', ',', '&', 'val', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
73,},['}'],['OPERATOR']
74,//Copied from appengine/datastore since its not exported,"['//', 'Copied', 'from', 'appengine/datastore', 'since', 'its', 'not', 'exported']","['COMMENT', 'VBN', 'IN', 'RB', 'IN', 'PRP$', 'RB', 'VBN']"
75,// loadEntity loads an EntityProto into PropertyLoadSaver or struct pointer.,"['//', 'loadEntity', 'loads', 'an', 'EntityProto', 'into', 'PropertyLoadSaver', 'or', 'struct', 'pointer.']","['COMMENT', 'NN', 'VBZ', 'DT', 'NNP', 'IN', 'NNP', 'CC', 'NN', 'NN']"
76,"func loadEntity(dst interface{}, src *pb.EntityProto) (err error) {","['func', 'loadEntity', '(', 'dst', 'interface', '{},', 'src', '*', 'pb', '.', 'EntityProto', ')', '(', 'err', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
77,"c := make(chan datastore.Property, 32)","['c', ':=', 'make', '(', 'chan', 'datastore', '.', 'Property', ',', '32', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
78," errc := make(chan error, 1)","['errc', ':=', 'make', '(', 'chan', 'error', ',', '1', ')']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
79, defer func() {,"['defer', 'func', '()', '{']","['IDENTIFIER', 'KEYWORD', 'OPERATOR', 'OPERATOR']"
80,    if err == nil {,"['if', 'err', '==', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
81,            err = <-errc,"['err', '=', '<-', 'errc']","['IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER']"
82,        },['}'],['OPERATOR']
83,    }(),['}()'],['OPERATOR']
84,"    go protoToProperties(c, errc, src)","['go', 'protoToProperties', '(', 'c', ',', 'errc', ',', 'src', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
85,"    if e, ok := dst.(datastore.PropertyLoadSaver); ok {","['if', 'e', ',', 'ok', ':=', 'dst', '.(', 'datastore', '.', 'PropertyLoadSaver', ');', 'ok', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
86,        return e.Load(c),"['return', 'e', '.', 'Load', '(', 'c', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
87,    },['}'],['OPERATOR']
88,"    return datastore.LoadStruct(dst, c)","['return', 'datastore', '.', 'LoadStruct', '(', 'dst', ',', 'c', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
89,},['}'],['OPERATOR']
90,"func protoToProperties(dst chan<- datastore.Property, errc chan<- error, src *pb.EntityProto) {","['func', 'protoToProperties', '(', 'dst', 'chan', '<-', 'datastore', '.', 'Property', ',', 'errc', 'chan', '<-', 'error', ',', 'src', '*', 'pb', '.', 'EntityProto', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
91,    defer close(dst),"['defer', 'close', '(', 'dst', ')']","['IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
92,"    props, rawProps := src.Property, src.RawProperty","['props', ',', 'rawProps', ':=', 'src', '.', 'Property', ',', 'src', '.', 'RawProperty']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
93,    for {,"['for', '{']","['KEYWORD', 'OPERATOR']"
94,        var (,"['var', '(']","['KEYWORD', 'OPERATOR']"
95,            x       *pb.Property,"['x', '*', 'pb', '.', 'Property']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
96,            noIndex bool,"['noIndex', 'bool']","['IDENTIFIER', 'IDENTIFIER']"
97,        ),[')'],['OPERATOR']
98,        if len(props) > 0 {,"['if', 'len', '(', 'props', ')', '>', '0', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
99,"            x, props = props[0], props[1:]","['x', ',', 'props', '=', 'props', '[', '0', '],', 'props', '[', '1', ':]']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
100,        } else if len(rawProps) > 0 {,"['}', 'else', 'if', 'len', '(', 'rawProps', ')', '>', '0', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
101,"            x, rawProps = rawProps[0], rawProps[1:]","['x', ',', 'rawProps', '=', 'rawProps', '[', '0', '],', 'rawProps', '[', '1', ':]']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'OPERATOR']"
102,            noIndex = true,"['noIndex', '=', 'true']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
103,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
104,            break,['break'],['KEYWORD']
105,        },['}'],['OPERATOR']
106,        var value interface{},"['var', 'value', 'interface', '{}']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
107,        if x.Meaning != nil && *x.Meaning == pb.Property_INDEX_VALUE {,"['if', 'x', '.', 'Meaning', '!=', 'nil', '&&', '*', 'x', '.', 'Meaning', '==', 'pb', '.', 'Property_INDEX_VALUE', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
108,            value = indexValue{x.Value},"['value', '=', 'indexValue', '{', 'x', '.', 'Value', '}']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
109,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
110,            var err error,"['var', 'err', 'error']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
111,"            value, err = propValue(x.Value, x.GetMeaning())","['value', ',', 'err', '=', 'propValue', '(', 'x', '.', 'Value', ',', 'x', '.', 'GetMeaning', '())']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
112,            if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
113,                errc <- err,"['errc', '<-', 'err']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
114,                return,['return'],['KEYWORD']
115,            },['}'],['OPERATOR']
116,        },['}'],['OPERATOR']
117,        dst <- datastore.Property{,"['dst', '<-', 'datastore', '.', 'Property', '{']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
118,"            Name:     x.GetName(),","['Name', ':', 'x', '.', 'GetName', '(),']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
119,"            Value:    value,","['Value', ':', 'value', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
120,"            NoIndex:  noIndex,","['NoIndex', ':', 'noIndex', ',']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
121,"            Multiple: x.GetMultiple(),","['Multiple', ':', 'x', '.', 'GetMultiple', '(),']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
122,        },['}'],['OPERATOR']
123,    },['}'],['OPERATOR']
124,    errc <- nil,"['errc', '<-', 'nil']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
125,},['}'],['OPERATOR']
126,func fromUnixMicro(t int64) time.Time {,"['func', 'fromUnixMicro', '(', 't', 'int64', ')', 'time', '.', 'Time', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
127,"    return time.Unix(t/1e6, (t%1e6)*1e3)","['return', 'time', '.', 'Unix', '(', 't', '1', 'e6', ',', '(', 't', '1', 'e6', ')*', '1', 'e3', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'IDENTIFIER', 'DECIMAL_LITERAL', 'IDENTIFIER', 'OPERATOR', 'DECIMAL_LITERAL', 'IDENTIFIER', 'OPERATOR']"
128,},['}'],['OPERATOR']
129,// propValue returns a Go value that combines the raw PropertyValue with a,"['//', 'propValue', 'returns', 'a', 'Go', 'value', 'that', 'combines', 'the', 'raw', 'PropertyValue', 'with', 'a']","['COMMENT', 'NN', 'VBZ', 'DT', 'NNP', 'NN', 'WDT', 'VBZ', 'DT', 'JJ', 'NNP', 'IN', 'DT']"
130,"// meaning. For example, an Int64Value with GD_WHEN becomes a time.Time.","['//', 'meaning.', 'For', 'example,', 'an', 'Int64Value', 'with', 'GD_WHEN', 'becomes', 'a', 'time.Time.']","['COMMENT', 'NN', 'IN', 'NN', 'DT', 'NNP', 'IN', 'NNP', 'VBZ', 'DT', 'NN']"
131,"func propValue(v *pb.PropertyValue, m pb.Property_Meaning) (interface{}, error) {","['func', 'propValue', '(', 'v', '*', 'pb', '.', 'PropertyValue', ',', 'm', 'pb', '.', 'Property_Meaning', ')', '(', 'interface', '{},', 'error', ')', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR', 'KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'OPERATOR']"
132,    switch {,"['switch', '{']","['IDENTIFIER', 'OPERATOR']"
133,    case v.Int64Value != nil:,"['case', 'v', '.', 'Int64Value', '!=', 'nil', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
134,        if m == pb.Property_GD_WHEN {,"['if', 'm', '==', 'pb', '.', 'Property_GD_WHEN', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
135,"            return fromUnixMicro(*v.Int64Value), nil","['return', 'fromUnixMicro', '(*', 'v', '.', 'Int64Value', '),', 'nil']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
136,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
137,"            return *v.Int64Value, nil","['return', '*', 'v', '.', 'Int64Value', ',', 'nil']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
138,        },['}'],['OPERATOR']
139,    case v.BooleanValue != nil:,"['case', 'v', '.', 'BooleanValue', '!=', 'nil', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
140,"        return *v.BooleanValue, nil","['return', '*', 'v', '.', 'BooleanValue', ',', 'nil']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
141,    case v.StringValue != nil:,"['case', 'v', '.', 'StringValue', '!=', 'nil', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
142,        if m == pb.Property_BLOB {,"['if', 'm', '==', 'pb', '.', 'Property_BLOB', '{']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
143,"            return []byte(*v.StringValue), nil","['return', '[]', 'byte', '(*', 'v', '.', 'StringValue', '),', 'nil']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
144,        } else if m == pb.Property_BLOBKEY {,"['}', 'else', 'if', 'm', '==', 'pb', '.', 'Property_BLOBKEY', '{']","['OPERATOR', 'KEYWORD', 'KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
145,"            return appengine.BlobKey(*v.StringValue), nil","['return', 'appengine', '.', 'BlobKey', '(*', 'v', '.', 'StringValue', '),', 'nil']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
146,        } else {,"['}', 'else', '{']","['OPERATOR', 'KEYWORD', 'OPERATOR']"
147,"            return *v.StringValue, nil","['return', '*', 'v', '.', 'StringValue', ',', 'nil']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
148,        },['}'],['OPERATOR']
149,    case v.DoubleValue != nil:,"['case', 'v', '.', 'DoubleValue', '!=', 'nil', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
150,"        return *v.DoubleValue, nil","['return', '*', 'v', '.', 'DoubleValue', ',', 'nil']","['KEYWORD', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
151,    case v.Referencevalue != nil:,"['case', 'v', '.', 'Referencevalue', '!=', 'nil', ':']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR']"
152,"        return nil, errors.New(""Not Implemented!"")","['return', 'nil', ',', 'errors', '.', 'New', '(', '""Not Implemented!""', ')']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'STRING_LITERAL', 'OPERATOR']"
153,    },['}'],['OPERATOR']
154,"    return nil, nil","['return', 'nil', ',', 'nil']","['KEYWORD', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
155,},['}'],['OPERATOR']
156,// indexValue is a Property value that is created when entities are loaded from,"['//', 'indexValue', 'is', 'a', 'Property', 'value', 'that', 'is', 'created', 'when', 'entities', 'are', 'loaded', 'from']","['COMMENT', 'NN', 'VBZ', 'DT', 'NNP', 'NN', 'WDT', 'VBZ', 'VBN', 'WRB', 'NNS', 'VBP', 'VBN', 'IN']"
157,"// an index, such as from a projection query.","['//', 'an', 'index,', 'such', 'as', 'from', 'a', 'projection', 'query.']","['COMMENT', 'DT', 'NN', 'JJ', 'IN', 'IN', 'DT', 'NN', 'NN']"
158,//,['//'],['COMMENT']
159,// Such Property values do not contain all of the metadata required to be,"['//', 'Such', 'Property', 'values', 'do', 'not', 'contain', 'all', 'of', 'the', 'metadata', 'required', 'to', 'be']","['COMMENT', 'JJ', 'NNP', 'NNS', 'VBP', 'RB', 'VB', 'DT', 'IN', 'DT', 'NN', 'VBN', 'TO', 'VB']"
160,"// faithfully represented as a Go value, and are instead represented as an","['//', 'faithfully', 'represented', 'as', 'a', 'Go', 'value,', 'and', 'are', 'instead', 'represented', 'as', 'an']","['COMMENT', 'RB', 'VBN', 'IN', 'DT', 'NNP', 'NN', 'CC', 'VBP', 'RB', 'VBN', 'IN', 'DT']"
161,// opaque indexValue. Load the properties into a concrete struct type (e.g. by,"['//', 'opaque', 'indexValue.', 'Load', 'the', 'properties', 'into', 'a', 'concrete', 'struct', 'type', '(e.g.', 'by']","['COMMENT', 'JJ', 'NN', 'NNP', 'DT', 'NNS', 'IN', 'DT', 'JJ', 'NN', 'NN', 'NN', 'IN']"
162,// passing a struct pointer to Iterator.Next) to reconstruct actual Go values,"['//', 'passing', 'a', 'struct', 'pointer', 'to', 'Iterator.Next)', 'to', 'reconstruct', 'actual', 'Go', 'values']","['COMMENT', 'VBG', 'DT', 'NN', 'NN', 'TO', 'NNP', 'TO', 'VB', 'JJ', 'NNP', 'NNS']"
163,"// of type int, string, time.Time, etc.","['//', 'of', 'type', 'int,', 'string,', 'time.Time,', 'etc.']","['COMMENT', 'IN', 'NN', 'NN', 'NN', 'NN', 'NN']"
164,type indexValue struct {,"['type', 'indexValue', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'OPERATOR']"
165,    value *pb.PropertyValue,"['value', '*', 'pb', '.', 'PropertyValue']","['IDENTIFIER', 'OPERATOR', 'IDENTIFIER', 'OPERATOR', 'IDENTIFIER']"
166,},['}'],['OPERATOR']
