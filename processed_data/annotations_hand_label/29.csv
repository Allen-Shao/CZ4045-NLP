,text,token,annotation
0,"I don't see you populate the ID field anywhere so of course it's going to be 0 since that's the zero value for that field. AppEngine won't modify your struct when it stores it. The newly created key you get back when you Put the struct contains the generated IntId() when an incomplete key is used. I think your confusion was caused by assuming something the docs never said. Namely that AppEngine would auto-populate ID fields in your stored data for you.

Since in your case you want the ID field of the struct to store the id used in the key you probably want to generate you're own unique ids for when you create a Key instead of using incomplete keys.

When the doc says a string can be zero it's referring to the zero value of a string type which would the empty string """". You can read more about zero values here: http://golang.org/ref/spec#The_zero_value","['I', 'do', ""n't"", 'see', 'you', 'populate', 'the', 'ID', 'field', 'anywhere', 'so', 'of', 'course', 'it', ""'s"", 'going', 'to', 'be', '0', 'since', 'that', ""'s"", 'the', 'zero', 'value', 'for', 'that', 'field', '.', 'AppEngine', 'wo', ""n't"", 'modify', 'your', 'struct', 'when', 'it', 'stores', 'it', '.', 'The', 'newly', 'created', 'key', 'you', 'get', 'back', 'when', 'you', 'Put', 'the', 'struct', 'contains', 'the', 'generated', 'IntId', '(', ')', 'when', 'an', 'incomplete', 'key', 'is', 'used', '.', 'I', 'think', 'your', 'confusion', 'was', 'caused', 'by', 'assuming', 'something', 'the', 'docs', 'never', 'said', '.', 'Namely', 'that', 'AppEngine', 'would', 'auto-populate', 'ID', 'fields', 'in', 'your', 'stored', 'data', 'for', 'you', '.', 'Since', 'in', 'your', 'case', 'you', 'want', 'the', 'ID', 'field', 'of', 'the', 'struct', 'to', 'store', 'the', 'id', 'used', 'in', 'the', 'key', 'you', 'probably', 'want', 'to', 'generate', 'you', ""'re"", 'own', 'unique', 'ids', 'for', 'when', 'you', 'create', 'a', 'Key', 'instead', 'of', 'using', 'incomplete', 'keys', '.', 'When', 'the', 'doc', 'says', 'a', 'string', 'can', 'be', 'zero', 'it', ""'s"", 'referring', 'to', 'the', 'zero', 'value', 'of', 'a', 'string', 'type', 'which', 'would', 'the', 'empty', 'string', '``', ""''"", '.', 'You', 'can', 'read', 'more', 'about', 'zero', 'values', 'here', ':', 'http://golang.org/ref/spec#The_zero_value']","['PRP', 'VBP', 'RB', 'VB', 'PRP', 'VB', 'DT', 'NNP', 'NN', 'RB', 'RB', 'IN', 'NN', 'PRP', 'VBZ', 'VBG', 'TO', 'VB', 'CD', 'IN', 'DT', 'VBZ', 'DT', 'NN', 'NN', 'IN', 'DT', 'NN', '.', 'NNP', 'MD', 'RB', 'VB', 'PRP$', 'NN', 'WRB', 'PRP', 'VBZ', 'PRP', '.', 'DT', 'RB', 'VBN', 'NN', 'PRP', 'VBP', 'RB', 'WRB', 'PRP', 'VBD', 'DT', 'NN', 'VBZ', 'DT', 'JJ', 'NNP', '(', ')', 'WRB', 'DT', 'JJ', 'NN', 'VBZ', 'VBN', '.', 'PRP', 'VBP', 'PRP$', 'NN', 'VBD', 'VBN', 'IN', 'VBG', 'NN', 'DT', 'NN', 'RB', 'VBD', '.', 'RB', 'IN', 'NNP', 'MD', 'VB', 'NNP', 'NNS', 'IN', 'PRP$', 'JJ', 'NNS', ‘IN', 'PRP', '.', 'IN', 'IN', 'PRP$', 'NN', 'PRP', 'VBP', 'DT', 'NNP', 'NN', 'IN', 'DT', 'NN', 'TO', 'VB', 'DT', 'NN', 'VBN', 'IN', 'DT', 'NN', 'PRP', 'RB', 'VBP', 'TO', 'VB', 'PRP', 'VBP', 'JJ', 'JJ', 'NNS', 'IN', 'WRB', 'PRP', 'VBP', 'DT', 'NNP', 'RB', 'IN', 'VBG', 'JJ', 'NNS', '.', 'WRB', 'DT', 'NN', 'VBZ', 'DT', 'NN', 'MD', 'VB', 'CD', 'PRP', 'VBZ', 'VBG', 'TO', 'DT', 'NN', 'NN', 'IN', 'DT', 'NN', 'NN', 'WDT', 'MD', 'DT', 'JJ', 'NN', '``', ""''"", '.', 'PRP', 'MD', 'VB', 'RBR', 'IN', 'CD', 'NNS', 'RB', ':', ‘DIRECTORY']"