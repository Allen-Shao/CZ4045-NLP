,text,token,annotation
0,"I'm trying to retrieve a record from mysql table and marshal it to json.
But i gotted the error that says : "".\main.go:67: no new variables on left sife of :=""
I'm new in Golang Plz! help me to solve out this error!
My Code is :

","[""I'm"", 'trying', 'to', 'retrieve', 'a', 'record', 'from', 'mysql', 'table', 'and', 'marshal', 'it', 'to', 'json.', 'But', 'i', 'gotted', 'the', 'error', 'that', 'says', ':', '"".\\main.go:67:', 'no', 'new', 'variables', 'on', 'left', 'sife', 'of', ':=""', ""I'm"", 'new', 'in', 'Golang', 'Plz!', 'help', 'me', 'to', 'solve', 'out', 'this', 'error!', 'My', 'Code', 'is', ':']","['NNP', 'VBG', 'TO', 'VB', 'DT', 'NN', 'IN', 'NN', 'NN', 'CC', 'VB', 'PRP', 'TO', 'VB', 'CC', 'VB', 'VBD', 'DT', 'NN', 'WDT', 'VBZ', ':', 'NN', 'DT', 'JJ', 'NNS', 'IN', 'JJ', 'NN', 'IN', 'NNP', 'NNP', 'JJ', 'IN', 'NNP', 'NNP', 'VB', 'PRP', 'TO', 'VB', 'RP', 'DT', 'NN', 'NNP', 'NNP', 'VBZ', ':']"
1,"func GetUser(w http.ResponseWriter, r *http.Request) {","['func', 'GetUser', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
2,  urlParams   := mux.Vars(r),"['urlParams', ':=', 'mux.Vars(r)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
3,"  id       := urlParams[""id""]","['id', ':=', 'urlParams', '[', '""id""', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
4,  ReadUser := User{},"['ReadUser', ':=', 'User', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
5,"  con, err := sql.Open(""mysql"", ""root:YES@/social_network?charset=utf8"")","['con', ',', 'err', ':=', 'sql.Open(""mysql"", ""root:YES@/social_network?charset=utf8"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
6,"  err := con.QueryRow(""select * from users where user_id=?"",id).Scan(&ReadUser.ID, &ReadUser.Name, &ReadUser.First, &ReadUser.Last, &ReadUser.Email )","['err', ':=', 'con.QueryRow(""select * from users where user_id=?"",id).Scan(&ReadUser.ID, &ReadUser.Name, &ReadUser.First, &ReadUser.Last, &ReadUser.Email )']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
7,  switch {,"['switch', '{']","['IDENTIFIER', 'PUNCTUATION']"
8,      case err == sql.ErrNoRows:,"['case', 'err', '==', 'sql', '.', 'ErrNoRows', ':']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
9,"              fmt.Fprintf(w,""No such user"")","['fmt.Fprintf(w,""No such user"")']",['FUNCTION_CALL']
10,      case err != nil:,"['case', 'err', '!=', 'nil', ':']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
11,              log.Fatal(err),['log.Fatal(err)'],['FUNCTION_CALL']
12,      default:,"['default', ':']","['KEYWORD', 'PUNCTUATION']"
13,"        output, _ := json.Marshal(ReadUser)","['output', ',', '_', ':=', 'json.Marshal(ReadUser)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
14,"        fmt.Fprintf(w,string(output))","['fmt.Fprintf(w,string(output))']",['FUNCTION_CALL']
15,  },['}'],['PUNCTUATION']
16,},['}'],['PUNCTUATION']
17,"

and Routes in main:

","['and', 'Routes', 'in', 'main:']","['CC', 'NNP', 'IN', 'NN']"
18,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
19,  gorillaRoute := mux.NewRouter(),"['go', 'rillaRoute', ':=', 'mux.NewRouter()']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
20,"  gorillaRoute.HandleFunc(""/api/user/create"", CreateUser)","['go', 'rillaRoute.HandleFunc(""/api/user/create"", CreateUser)']","['KEYWORD', 'FUNCTION_CALL']"
21,"  gorillaRoute.HandleFunc(""/api/user/read/:id"", GetUser)","['go', 'rillaRoute.HandleFunc(""/api/user/read/:id"", GetUser)']","['KEYWORD', 'FUNCTION_CALL']"
22,"  http.Handle(""/"", gorillaRoute)","['http.Handle(""/"", gorillaRoute)']",['FUNCTION_CALL']
23,"  http.ListenAndServe("":8080"", nil)","['http.ListenAndServe("":8080"", nil)']",['FUNCTION_CALL']
24,},['}'],['PUNCTUATION']
25,"

Here is my new Code , but again not able to get record from database table, plz help me to figure out the error OR what things i do wrong?
package main

","['Here', 'is', 'my', 'new', 'Code', ',', 'but', 'again', 'not', 'able', 'to', 'get', 'record', 'from', 'database', 'table,', 'plz', 'help', 'me', 'to', 'figure', 'out', 'the', 'error', 'OR', 'what', 'things', 'i', 'do', 'wrong?', 'package', 'main']","['RB', 'VBZ', 'PRP$', 'JJ', 'NNP', ',', 'CC', 'RB', 'RB', 'JJ', 'TO', 'VB', 'NN', 'IN', 'NN', 'NN', 'NN', 'VB', 'PRP', 'TO', 'VB', 'RP', 'DT', 'NN', 'NNP', 'WP', 'NNS', 'VBP', 'VBP', 'JJ', 'NN', 'JJ']"
26,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
27,"    ""database/sql""","['""database/sql""']",['STRING_LITERAL']
28,"    ""encoding/json""","['""encoding/json""']",['STRING_LITERAL']
29,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
30,"    ""log""","['""log""']",['STRING_LITERAL']
31,"    ""net/http""","['""net/http""']",['STRING_LITERAL']
32,"    _ ""github.com/go-sql-driver/mysql""","['_', '""github.com/go-sql-driver/mysql""']","['IDENTIFIER', 'STRING_LITERAL']"
33,"    ""github.com/gorilla/mux""","['""github.com/gorilla/mux""']",['STRING_LITERAL']
34,),[')'],['PUNCTUATION']
35,type API struct {,"['type', 'API', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
36,"    Message string ""json:message""","['Message', 'string', '""json:message""']","['IDENTIFIER', 'IDENTIFIER', 'STRING_LITERAL']"
37,},['}'],['PUNCTUATION']
38,type User struct {,"['type', 'User', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
39,"    ID    int    ""json:id""","['ID', 'int', '""json:id""']","['IDENTIFIER', 'IDENTIFIER', 'STRING_LITERAL']"
40,"    Name  string ""json:username""","['Name', 'string', '""json:username""']","['IDENTIFIER', 'IDENTIFIER', 'STRING_LITERAL']"
41,"    Email string ""json:email""","['Email', 'string', '""json:email""']","['IDENTIFIER', 'IDENTIFIER', 'STRING_LITERAL']"
42,"    First string ""json:first""","['First', 'string', '""json:first""']","['IDENTIFIER', 'IDENTIFIER', 'STRING_LITERAL']"
43,"    Last  string ""json:last""","['Last', 'string', '""json:last""']","['IDENTIFIER', 'IDENTIFIER', 'STRING_LITERAL']"
44,},['}'],['PUNCTUATION']
45,"func Hello(w http.ResponseWriter, r *http.Request) {","['func', 'Hello', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
46,    // urlParams := mux.Vars(r),"['//', 'urlParams', ':=', 'mux.Vars(r)']","['COMMENT', 'JJ', 'NNP', 'NN']"
47,"    // name := urlParams[""user""]","['//', 'name', ':=', 'urlParams[""user""]']","['COMMENT', 'NN', 'NNP', 'NN']"
48,"    HelloMessage := ""User Creation page""","['HelloMessage', ':=', '""User Creation page""']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL']"
49,    message := API{HelloMessage},"['message', ':=', 'API', '{', 'HelloMessage', '}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
50,"    output, err := json.Marshal(message)","['output', ',', 'err', ':=', 'json.Marshal(message)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
51,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
52,"        fmt.Println(""Something went wrong!"")","['fmt.Println(""Something went wrong!"")']",['FUNCTION_CALL']
53,    },['}'],['PUNCTUATION']
54,"    fmt.Fprintf(w, string(output))","['fmt.Fprintf(w, string(output))']",['FUNCTION_CALL']
55,},['}'],['PUNCTUATION']
56,//POST A USER INTO DB,"['//', 'POST', 'A', 'USER', 'INTO', 'DB']","['COMMENT', 'VB', 'DT', 'NNP', 'NNP', 'NNP']"
57,"func CreateUser(w http.ResponseWriter, r *http.Request) {","['func', 'CreateUser', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
58,    NewUser := User{},"['NewUser', ':=', 'User', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
59,"    NewUser.Name = r.FormValue(""user"")","['NewUser', '.', 'Name', '=', 'r.FormValue(""user"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
60,"    NewUser.Email = r.FormValue(""email"")","['NewUser', '.', 'Email', '=', 'r.FormValue(""email"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
61,"    NewUser.First = r.FormValue(""first"")","['NewUser', '.', 'First', '=', 'r.FormValue(""first"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
62,"    NewUser.Last = r.FormValue(""last"")","['NewUser', '.', 'Last', '=', 'r.FormValue(""last"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
63,"    output, err := json.Marshal(NewUser)","['output', ',', 'err', ':=', 'json.Marshal(NewUser)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
64,    fmt.Println(string(output)),['fmt.Println(string(output))'],['FUNCTION_CALL']
65,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
66,"        fmt.Println(""Something went wrong!"")","['fmt.Println(""Something went wrong!"")']",['FUNCTION_CALL']
67,    },['}'],['PUNCTUATION']
68,"    con, err := sql.Open(""mysql"", ""root:YES@/social_network?charset=utf8"")","['con', ',', 'err', ':=', 'sql.Open(""mysql"", ""root:YES@/social_network?charset=utf8"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
69,"    sqlQuery := ""INSERT INTO users set user_nickname='"" + NewUser.Name + ""', user_first='"" + NewUser.First + ""', user_last='"" + NewUser.Last + ""', user_email='"" + NewUser.Email + ""'""","['sqlQuery', ':=', '""INSERT INTO users set user_nickname=\'""', '+', 'NewUser', '.', 'Name', '+', '""\', user_first=\'""', '+', 'NewUser', '.', 'First', '+', '""\', user_last=\'""', '+', 'NewUser', '.', 'Last', '+', '""\', user_email=\'""', '+', 'NewUser', '.', 'Email', '+', '""\'""']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'STRING_LITERAL']"
70,"    q, err := con.Exec(sqlQuery)","['q', ',', 'err', ':=', 'con.Exec(sqlQuery)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
71,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
72,        fmt.Println(err),['fmt.Println(err)'],['FUNCTION_CALL']
73,    },['}'],['PUNCTUATION']
74,    fmt.Println(q),['fmt.Println(q)'],['FUNCTION_CALL']
75,},['}'],['PUNCTUATION']
76,//GET USERS FROM DB,"['//', 'GET', 'USERS', 'FROM', 'DB']","['COMMENT', 'NNP', 'NNP', 'NNP', 'NNP']"
77,"func GetUsers(w http.ResponseWriter, r *http.Request) {","['func', 'GetUsers', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
78,"    db, err := sql.Open(""mysql"", ""root:YES@/social_network?charset=utf8"")","['db', ',', 'err', ':=', 'sql.Open(""mysql"", ""root:YES@/social_network?charset=utf8"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
79,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
80,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
81,    },['}'],['PUNCTUATION']
82,    err = db.Ping(),"['err', '=', 'db.Ping()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
83,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
84,        panic(err),"['panic', '(', 'err', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
85,    },['}'],['PUNCTUATION']
86,    defer db.Close(),"['defer', 'db.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
87,"    rows, err := db.Query(""select * from users "")","['rows', ',', 'err', ':=', 'db.Query(""select * from users "")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
88,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
89,        log.Fatal(err),['log.Fatal(err)'],['FUNCTION_CALL']
90,    },['}'],['PUNCTUATION']
91,    defer rows.Close(),"['defer', 'rows.Close()']","['IDENTIFIER', 'FUNCTION_CALL']"
92,"    var rowBuf, _ = rows.Columns()","['var', 'rowBuf', ',', '_', '=', 'rows.Columns()']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
93,"    var cols = make([]string, len(rowBuf))","['var', 'cols', '=', 'make', '([]', 'string', ',', 'len', '(', 'rowBuf', '))']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
94,"    copy(cols, rowBuf)","['copy', '(', 'cols', ',', 'rowBuf', ')']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
95,    fmt.Println(rowBuf),['fmt.Println(rowBuf)'],['FUNCTION_CALL']
96,"    var vals = make([]interface{}, len(rowBuf))","['var', 'vals', '=', 'make', '([]', 'interface', '{},', 'len', '(', 'rowBuf', '))']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
97,"    for i, _ := range rowBuf {","['for', 'i', ',', '_', ':=', 'range', 'rowBuf', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
98,        vals[i] = &rowBuf[i],"['vals', '[', 'i', ']', '=', '&', 'rowBuf', '[', 'i', ']']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'POINTER_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
99,    },['}'],['PUNCTUATION']
100,    for rows.Next() {,"['for', 'rows.Next()', '{']","['KEYWORD', 'FUNCTION_CALL', 'PUNCTUATION']"
101,        err := rows.Scan(vals...),"['err', ':=', 'rows.Scan(vals...)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
102,        if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
103,            log.Fatal(err),['log.Fatal(err)'],['FUNCTION_CALL']
104,        },['}'],['PUNCTUATION']
105,        var m = map[string]interface{}{},"['var', 'm', '=', 'map', '[', 'string', ']', 'interface', '{}{}']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'KEYWORD', 'PUNCTUATION']"
106,"        for i, col := range cols {","['for', 'i', ',', 'col', ':=', 'range', 'cols', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'KEYWORD', 'IDENTIFIER', 'PUNCTUATION']"
107,            m[col] = vals[i],"['m', '[', 'col', ']', '=', 'vals', '[', 'i', ']']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION']"
108,        },['}'],['PUNCTUATION']
109,"        obj, _ := json.Marshal(m)","['obj', ',', '_', ':=', 'json.Marshal(m)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
110,        //,['//'],['COMMENT']
111,"        fmt.Fprintf(w, string(obj))","['fmt.Fprintf(w, string(obj))']",['FUNCTION_CALL']
112,    },['}'],['PUNCTUATION']
113,    err = rows.Err(),"['err', '=', 'rows.Err()']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
114,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
115,        log.Fatal(err),['log.Fatal(err)'],['FUNCTION_CALL']
116,    },['}'],['PUNCTUATION']
117,},['}'],['PUNCTUATION']
118,"func GetUser(w http.ResponseWriter, r *http.Request) {","['func', 'GetUser', '(', 'w', 'http', '.', 'ResponseWriter', ',', 'r', '*', 'http', '.', 'Request', ')', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
119,    urlParams := mux.Vars(r),"['urlParams', ':=', 'mux.Vars(r)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
120,"    id := urlParams[""id""]","['id', ':=', 'urlParams', '[', '""id""', ']']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION', 'STRING_LITERAL', 'PUNCTUATION']"
121,    ReadUser := User{},"['ReadUser', ':=', 'User', '{}']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
122,"    db, err := sql.Open(""mysql"", ""root:YES@/social_network?charset=utf8"")","['db', ',', 'err', ':=', 'sql.Open(""mysql"", ""root:YES@/social_network?charset=utf8"")']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
123,"    stmt := db.QueryRow(""select * from users where id = ?"", id)","['stmt', ':=', 'db.QueryRow(""select * from users where id = ?"", id)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
124,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
125,        log.Fatal(err),['log.Fatal(err)'],['FUNCTION_CALL']
126,    },['}'],['PUNCTUATION']
127,"    err = stmt.Scan(&ReadUser.ID, &ReadUser.Name, &ReadUser.First, &ReadUser.Last, &ReadUser.Email)","['err', '=', 'stmt.Scan(&ReadUser.ID, &ReadUser.Name, &ReadUser.First, &ReadUser.Last, &ReadUser.Email)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
128,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'IDENTIFIER', 'PUNCTUATION']"
129,        log.Fatal(err),['log.Fatal(err)'],['FUNCTION_CALL']
130,    },['}'],['PUNCTUATION']
131,"    result, err := json.Marshal(ReadUser)","['result', ',', 'err', ':=', 'json.Marshal(ReadUser)']","['IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
132,"    fmt.Fprintf(w, string(result))","['fmt.Fprintf(w, string(result))']",['FUNCTION_CALL']
133,},['}'],['PUNCTUATION']
134,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
135,    gorillaRoute := mux.NewRouter(),"['go', 'rillaRoute', ':=', 'mux.NewRouter()']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
136,"    gorillaRoute.HandleFunc(""/api/user/create"", CreateUser)","['go', 'rillaRoute.HandleFunc(""/api/user/create"", CreateUser)']","['KEYWORD', 'FUNCTION_CALL']"
137,"    gorillaRoute.HandleFunc(""/api/user/read"", GetUsers)","['go', 'rillaRoute.HandleFunc(""/api/user/read"", GetUsers)']","['KEYWORD', 'FUNCTION_CALL']"
138,"    gorillaRoute.HandleFunc(""/api/user/:id"", GetUser)","['go', 'rillaRoute.HandleFunc(""/api/user/:id"", GetUser)']","['KEYWORD', 'FUNCTION_CALL']"
139,"    http.Handle(""/"", gorillaRoute)","['http.Handle(""/"", gorillaRoute)']",['FUNCTION_CALL']
140,"    http.ListenAndServe("":8080"", nil)","['http.ListenAndServe("":8080"", nil)']",['FUNCTION_CALL']
141,},['}'],['PUNCTUATION']
