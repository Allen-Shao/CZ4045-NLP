,text,token,annotation
0,"I have to deserialize some binary messages coming from another application. I would love to use restruct.io but some fields in the message structure use a ""non-standard"" number of bits ( 5 bits, 3 bits, ... 10 bits ... ).

Is there any way to handle this type of structs? I have been searching for some time without any success so any help will be very welcomed. 

thanks in advance

I wil try to give an example to clarify my question. Given the code:","['I', 'have', 'to', 'deserialize', 'some', 'binary', 'messages', 'coming', 'from', 'another', 'application', '.', 'I', 'would', 'love', 'to', 'use', 'restruct.io', 'but', 'some', 'fields', 'in', 'the', 'message', 'structure', 'use', 'a', '""', 'non-standard', '""', 'number', 'of', 'bits', '(', '5', 'bits', ',', '3', 'bits', ',', '...', '10', 'bits', '...', ')', '.', 'Is', 'there', 'any', 'way', 'to', 'handle', 'this', 'type', 'of', 'structs', '?', 'I', 'have', 'been', 'searching', 'for', 'some', 'time', 'without', 'any', 'success', 'so', 'any', 'help', 'will', 'be', 'very', 'welcomed', '.', 'thanks', 'in', 'advance', 'I', 'wil', 'try', 'to', 'give', 'an', 'example', 'to', 'clarify', 'my', 'question', '.', 'Given', 'the', 'code', ':']","['PRP', 'VBP', 'TO', 'VB', 'DT', 'JJ', 'NNS', 'VBG', 'IN', 'DT', 'NN', '.', 'PRP', 'MD', 'VB', 'TO', 'VB', 'NN', 'CC', 'DT', 'NNS', 'IN', 'DT', 'NN', 'NN', 'VBP', 'DT', '""', 'JJ', '""', 'NN', 'IN', 'NNS', '(', 'CD', 'NNS', ',', 'CD', 'NNS', ',', ':', 'CD', 'NNS', ':', ')', '.', 'VBZ', 'EX', 'DT', 'NN', 'TO', 'VB', 'DT', 'NN', 'IN', 'NNS', '.', 'PRP', 'VBP', 'VBN', 'VBG', 'IN', 'DT', 'NN', 'IN', 'DT', 'NN', 'RB', 'DT', 'NN', 'MD', 'VB', 'RB', 'JJ', '.', 'NNS', 'IN', 'NN', 'PRP', 'VBP', 'VB', 'TO', 'VB', 'DT', 'NN', 'TO', 'VB', 'PRP$', 'NN', '.', 'VBN', 'DT', 'NN', ':']"
1,package main,"['package', 'main']","['KEYWORD', 'IDENTIFIER']"
2,import (,"['import', '(']","['KEYWORD', 'PUNCTUATION']"
3,"    ""encoding/binary""","['""encoding/binary""']",['STRING_LITERAL']
4,"    ""fmt""","['""fmt""']",['STRING_LITERAL']
5,"restruct ""gopkg.in/restruct.v1""","['restruct', '""gopkg.in/restruct.v1""']","['IDENTIFIER', 'STRING_LITERAL']"
6,),[')'],['PUNCTUATION']
7,type MessageType uint8,"['type', 'MessageType', 'uint8']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
8,const (,"['const', '(']","['KEYWORD', 'PUNCTUATION']"
9,MessageTypeOne MessageType = iota + 1,"['MessageTypeOne', 'MessageType', '=', 'iota', '+', '1']","['IDENTIFIER', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER', 'ARITHMETIC_OPERATOR', 'DECIMAL_LITERAL']"
10,    MessageTypeTwo,['MessageTypeTwo'],['IDENTIFIER']
11,    MessageTypeThree,['MessageTypeThree'],['IDENTIFIER']
12,),[')'],['PUNCTUATION']
13,// Message is the data to deserialize from the binary stream,"['//', 'Message', 'is', 'the', 'data', 'to', 'deserialize', 'from', 'the', 'binary', 'stream']","['COMMENT', 'NN', 'VBZ', 'DT', 'NN', 'TO', 'VB', 'IN', 'DT', 'JJ', 'NN']"
14,type Message struct {,"['type', 'Message', 'struct', '{']","['KEYWORD', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION']"
15,"Length     uint32      `struct:""uint32""` // message size in bytes (including length)","['Length', 'uint32', 'struct', ':', '""uint32""', '//', 'message', 'size', 'in', 'bytes', '(', 'including', 'length', ')']","['IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'STRING_LITERAL', 'COMMENT', 'NN', 'NN', 'IN', 'NNS', '(', 'VBG', 'NN', ')']"
16,"Type       MessageType `struct:""uint8""`","['Type', 'MessageType', 'struct', ':', '""uint8""']","['IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'STRING_LITERAL']"
17,"Version    uint8       `struct:""uint8:4""` // Just need 4 bits","['Version', 'uint8', 'struct', ':', '""uint8:4""', '//', 'Just', 'need', '4', 'bits']","['IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'STRING_LITERAL', 'COMMENT', 'RB', 'VB', 'CD', 'NNS']"
18,"Subversion uint8       `struct:""uint8:2""` // just need 2 bits","['Subversion', 'uint8', 'struct', ':', '""uint8:2""', '//', 'just', 'need', '2', 'bits']","['IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'STRING_LITERAL', 'COMMENT', 'RB', 'VB', 'CD', 'NNS']"
19,"Optional   uint8       `struct:""uint8:1""` // just one bit --> '1' means next field is NOT present","['Optional', 'uint8', 'struct', ':', '""uint8:1""', '//', 'just', 'one', 'bit', '-->', ""'1'"", 'means', 'next', 'field', 'is', 'NOT', 'present']","['IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'STRING_LITERAL', 'COMMENT', 'RB', 'CD', ‘NN', 'SYM', ‘NN’, 'VBZ', 'IN', 'NN', 'VBZ', 'RB', 'JJ']"
20,    NodeName   string      ``,"['NodeName', 'string']","['IDENTIFIER', 'RESERVED']"
21,"ANumber    uint16      `struct:""uint16:10""` // just need 10 bits","['ANumber', 'uint16', 'struct', ':', '""uint16:10""', '//', 'just', 'need', '10', 'bits']","['IDENTIFIER', 'IDENTIFIER', 'KEYWORD', 'PUNCTUATION', 'STRING_LITERAL', 'COMMENT', 'RB', 'VB', 'CD', 'NNS']"
22,},['}'],['PUNCTUATION']
23,// (length(4)+type(1)+(version(4bits)+Subversion(2bits)+Optional(1bit))) = 6 bytes,"['//', '(length(4)+type(1)+(version(4bits)+Subversion(2bits)+Optional(1bit)))', '=', '6', 'bytes']","['COMMENT', 'FUNCTION_CALL', 'ASSIGNMENT_OPERATOR', 'CD', 'NNS']"
24,// need 32bit alignment,"['//', 'need', '32', 'bit', 'alignment']","['COMMENT', 'VB', 'CD', 'NN', 'NN']"
25,func main() {,"['func', 'main', '()', '{']","['KEYWORD', 'IDENTIFIER', 'PUNCTUATION', 'PUNCTUATION']"
26,"var inStream = []byte{0x08, // just 8 bytes needed","['var', 'inStream', '=', '[]', 'byte', '{', '0x08', ',', '//', 'just', '8', 'bytes', 'needed']","['KEYWORD', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'PUNCTUATION', 'IDENTIFIER', 'PUNCTUATION', 'HEX_LITERAL', 'PUNCTUATION', 'COMMENT', 'RB', 'CD', 'NNS', 'VBD']"
27,"0x01,       // messge type = MessageTypeOne","['0x01', ',', '//', 'messge', 'type', '=', 'MessageTypeOne']","['HEX_LITERAL', 'PUNCTUATION', 'COMMENT', 'IDENTIFIER', 'KEYWORD', 'ASSIGNMENT_OPERATOR', 'IDENTIFIER']"
28,"0x4a,       // Version=0100 Subversion=10 Optional=1 ANumber = 0 (MSB bit)","['0x4a', ',', '//', 'Version', '=', '0100', 'Subversion', '=', '10', 'Optional', '=', '1', 'ANumber', '=', '0', '(', 'MSB', 'bit', ')']","['HEX_LITERAL', 'PUNCTUATION', 'COMMENT', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', '(', 'NNP', 'NN', ')']"
29,"0x00, 0x60, // ANumber(000 0000 011) Padding = 0 0000 for 32 bits alignment","['0x00', ',', '0x60', ',', '//', 'ANumber', '(', '000 0000 011', ')', 'Padding', '=', '0 0000', 'for', '32', 'bits', 'alignment']","['HEX_LITERAL', 'PUNCTUATION', 'HEX_LITERAL', 'PUNCTUATION', 'COMMENT', 'IDENTIFIER', '(', 'HEX_LITERAL', ')', 'VBG', 'ASSIGNMENT_OPERATOR', 'HEX_LITERAL', 'IN', 'CD', 'NNS', 'NN']"
30,    },['}'],['PUNCTUATION']
31,    var msg Message,"['var', 'msg', 'Message']","['KEYWORD', 'IDENTIFIER', 'IDENTIFIER']"
32,"    err := restruct.Unpack(inStream, binary.BigEndian, &msg)","['err', ':=', 'restruct.Unpack(inStream, binary.BigEndian, &msg)']","['IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'FUNCTION_CALL']"
33,    if err != nil {,"['if', 'err', '!=', 'nil', '{']","['KEYWORD', 'IDENTIFIER', 'RELATION_OPERATOR', 'RESERVED', 'PUNCTUATION']"
34,        panic(err),[“panic'(err)”],['FUNCTION_CALL']
35,    },['}'],['PUNCTUATION']
36,    fmt.Println(msg),['fmt.Println(msg)'],['FUNCTION_CALL']
37,    // Expected:,"['//', 'Expected', ':']","['COMMENT', 'VBN', ':']"
38,// msg.Length = 8,"['//', 'msg', '.', 'Length', '=', '8']","['COMMENT', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
39,// msg.Type = 1,"['//', 'msg', '.', 'Type', '=', '1']","['COMMENT', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
40,// msg.Version = 4,"['//', 'msg', '.', 'Version', '=', '4']","['COMMENT', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
41,// msg.Subversion = 2,"['//', 'msg', '.', 'Subversion', '=', '2']","['COMMENT', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
42,// msg.Optional = 1,"['//', 'msg', '.', 'Optional', '=', '1']","['COMMENT', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
43,"    // msg.NodeName = """"","['//', 'msg', '.', 'NodeName', '=', '""""']","['COMMENT', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'STRING_LITERAL']"
44,// msg.ANumber = 3,"['//', 'msg', '.', 'ANumber', '=', '3']","['COMMENT', 'IDENTIFIER', 'PUNCTUATION', 'IDENTIFIER', 'ASSIGNMENT_OPERATOR', 'DECIMAL_LITERAL']"
45,},['}'],['PUNCTUATION']
46,"

I will receive inStream from a TCP connection and will want to deserialize the binary data and get a Message struct with the expected values ... 

Hope this will clarify my question.

Thanks again ;)
","['I', 'will', 'receive', 'inStream', 'from', 'a', 'TCP', 'connection', 'and', 'will', 'want', 'to', 'deserialize', 'the', 'binary', 'data', 'and', 'get', 'a', 'Message', 'struct', 'with', 'the', 'expected', 'values', '...', 'Hope', 'this', 'will', 'clarify', 'my', 'question', '.', 'Thanks', 'again', ';', ')']","['PRP', 'MD', 'VB', 'NNP', 'IN', 'DT', 'NNP', 'NN', 'CC', 'MD', 'VB', 'TO', 'VB', 'DT', 'JJ', 'NNS', 'CC', 'VB', 'DT', 'NNP', 'NN', 'IN', 'DT', 'JJ', 'NNS', ':', 'VBP', 'DT', 'MD', 'VB', 'PRP$', 'NN', '.', 'NNS', 'RB', ':', ')']"