,question,answer,answerID
44252852,"44252852      <row Id=""44252852"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44253556"" PostTypeId=""2"" ParentId=""44252852"" CreationDate=""2017-05-30T04:40:58.283"" Score=""4"" Body=""&lt;p&gt;Use a &lt;a href=&quot;http://godoc.org/sync#Mutex&quot; rel=&quot;nofollow noreferrer&quot;&gt;mutex&lt;/a&gt; to protect the map. A mutex is often simpler than using channels &amp;amp; goroutines to protect a resource.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var (&#xA;  mu sync.Mutex&#xA;  cache = make(map[string]*SessionData)&#xA;)&#xA;&#xA;func GetSessionFromCache(sessTkn string) *SessionData {&#xA;  mu.Lock()&#xA;  defer mu.Unlock()&#xA;  sd := cache[sessTkn]&#xA;  if sd != nil {&#xA;      return sd&#xA;  }&#xA;  sd := &amp;amp;SessionData{&#xA;     // initialize new value here&#xA;  }&#xA;  cache[sessTkn] = sd&#xA;  return sd&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Use it like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sd := session.GetSessionFromCache(sessTkn) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-05-30T15:19:15.350"" LastActivityDate=""2017-05-30T15:19:15.350"" CommentCount=""1"" />
",44253556
44255814,"44255814      <row Id=""44255814"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44256314"" PostTypeId=""2"" ParentId=""44255814"" CreationDate=""2017-05-30T07:40:19.777"" Score=""6"" Body=""&lt;p&gt;You may do concurrent processing by modifying your &lt;code&gt;visit()&lt;/code&gt; function to not go into subfolders, but launch a new goroutine for each subfolder.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In order to do that, return the special &lt;code&gt;filepath.SkipDir&lt;/code&gt; error from your &lt;code&gt;visit()&lt;/code&gt; function if the entry is a directory. Don't forget to check if the &lt;code&gt;path&lt;/code&gt; inside &lt;code&gt;visit()&lt;/code&gt; is the subfolder the goroutine is ought to process, because that is also passed to &lt;code&gt;visit()&lt;/code&gt;, and without this check you would launch goroutines endlessly for the initial folder.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also you will need some kind of &quot;counter&quot; of how many goroutines are still working in the background, for that you may use &lt;a href=&quot;https://golang.org/pkg/sync/#WaitGroup&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sync.WaitGroup&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's a simple implementation of this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var wg sync.WaitGroup&#xA;&#xA;func walkDir(dir string) {&#xA;    defer wg.Done()&#xA;&#xA;    visit := func(path string, f os.FileInfo, err error) error {&#xA;        if f.IsDir() &amp;amp;&amp;amp; path != dir {&#xA;            wg.Add(1)&#xA;            go walkDir(path)&#xA;            return filepath.SkipDir&#xA;        }&#xA;        if f.Mode().IsRegular() {&#xA;            fmt.Printf(&quot;Visited: %s File name: %s Size: %d bytes\n&quot;,&#xA;                path, f.Name(), f.Size())&#xA;        }&#xA;        return nil&#xA;    }&#xA;&#xA;    filepath.Walk(dir, visit)&#xA;}&#xA;&#xA;func main() {&#xA;    flag.Parse()&#xA;    root := &quot;folder/to/walk&quot; //flag.Arg(0)&#xA;&#xA;    wg.Add(1)&#xA;    walkDir(root)&#xA;    wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Some notes:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Depending on the &quot;distribution&quot; of files among subfolders, this may not fully utilize your CPU / storage, as if for example 99% of all the files are in one subfolder, that goroutine will still take the majority of time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that &lt;code&gt;fmt.Printf()&lt;/code&gt; calls are serialized, so that will also slow down the process. I assume this was just an example, and in reality you will do some kind of processing / statistics in-memory. Don't forget to also protect concurrent access to variables accessed from your &lt;code&gt;visit()&lt;/code&gt; function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Don't worry about the high number of subfolders. It is normal and the Go runtime is capable of handling even hundreds of thousands of goroutines.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that most likely the performance bottleneck will be your storage / hard disk speed, so you may not gain the performance you wish. After a certain point (your hard disk limit), you won't be able to improve performance.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also launching a new goroutine for each subfolder may not be optimal, it may be that you get better performance by limiting the number of goroutines walking your folders. For that, check out and use a worker pool:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/38170852/is-this-an-idiomatic-worker-thread-pool-in-go/38172204#38172204&quot;&gt;Is this an idiomatic worker thread pool in Go?&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-05-30T07:52:21.813"" LastActivityDate=""2017-05-30T07:52:21.813"" CommentCount=""2"" />
",44256314
44256484,"44256484      <row Id=""44256484"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44256618"" PostTypeId=""2"" ParentId=""44256484"" CreationDate=""2017-05-30T07:55:43.740"" Score=""3"" Body=""&lt;p&gt;The json you have posted in your example looks like it is missing &lt;code&gt;F1&lt;/code&gt; in the body?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/Fl-lhH2y3X&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/Fl-lhH2y3X&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;&#xA;b := []byte(`{&quot;F1&quot;:{&quot;Val&quot;:13}}`)&#xA;&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""14019"" LastActivityDate=""2017-05-30T07:55:43.740"" CommentCount=""3"" />
",44256618
44257729,"44257729      <row Id=""44257729"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44257987"" PostTypeId=""2"" ParentId=""44257729"" CreationDate=""2017-05-30T09:08:19.570"" Score=""3"" Body=""&lt;p&gt;&lt;code&gt;consensus.Block&lt;/code&gt; and &lt;code&gt;chain.Block&lt;/code&gt; are two separate types but since you are embeddding &lt;code&gt;chain.Block&lt;/code&gt; in &lt;code&gt;consensus.Block&lt;/code&gt;, you can access one from another.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Just pass &lt;code&gt;consensus.Block&lt;/code&gt; in &lt;code&gt;AddBlockToChain()&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;`func AddBlockToChain(block consensus.Block)`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and then access it by: &lt;code&gt;block.Block&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;type ChainBlock struct {&#xA;    id int&#xA;}&#xA;&#xA;type ConsensusBlock struct {&#xA;    ChainBlock&#xA;    idCons int&#xA;}&#xA;&#xA;func printChainBlockId(consBlock ConsensusBlock) {&#xA;    fmt.Println(consBlock.ChainBlock.id)&#xA;}&#xA;&#xA;func main() {&#xA;    test := ConsensusBlock{&#xA;        ChainBlock: ChainBlock{&#xA;            id: 42,&#xA;        },&#xA;        idCons: 44,&#xA;    }&#xA;&#xA;    printChainBlockId(admin)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""963881"" LastActivityDate=""2017-05-30T09:08:19.570"" CommentCount=""3"" />
",44257987
44257522,"44257522      <row Id=""44257522"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44258164"" PostTypeId=""2"" ParentId=""44257522"" CreationDate=""2017-05-30T09:15:48.733"" Score=""2"" Body=""&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/unsafe/#Sizeof&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;unsafe.SizeOf()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;reflect.Type.Size()&lt;/code&gt; only return the size of the passed value without recursively traversing the data structure and adding sizes of pointed values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The slice is relatively a simple struct: &lt;a href=&quot;https://golang.org/pkg/reflect/#SliceHeader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;reflect.SliceHeader&lt;/code&gt;&lt;/a&gt;, and since we know it references a backing array, we can easily compute its size &quot;manually&quot;, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;s := make([]int32, 1000)&#xA;&#xA;fmt.Println(&quot;Size of []int32:&quot;, unsafe.Sizeof(s))&#xA;fmt.Println(&quot;Size of [1000]int32:&quot;, unsafe.Sizeof([1000]int32{}))&#xA;fmt.Println(&quot;Real size of s:&quot;, unsafe.Sizeof(s)+unsafe.Sizeof([1000]int32{}))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/r2ejk8JPx2&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Size of []int32: 12&#xA;Size of [1000]int32: 4000&#xA;Real size of s: 4012&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Maps are a lot more complex data structures, I won't go into details, but check out this question+answer: &lt;a href=&quot;https://stackoverflow.com/questions/31847549/golang-computing-the-memory-footprint-or-byte-length-of-a-map&quot;&gt;Golang: computing the memory footprint (or byte length) of a map&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want &quot;real&quot; numbers, you may take advantage of the testing tool of Go, which can also perform memory benchmarking. Pass the &lt;code&gt;-benchmem&lt;/code&gt; argument, and inside the benchmark function allocate only whose memory you want to measure:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func BenchmarkSlice100(b *testing.B) {&#xA;    for i := 0; i &amp;lt; b.N; i++ { getSlice(100) }&#xA;}&#xA;func BenchmarkSlice1000(b *testing.B) {&#xA;    for i := 0; i &amp;lt; b.N; i++ { getSlice(1000) }&#xA;}&#xA;func BenchmarkSlice10000(b *testing.B) {&#xA;    for i := 0; i &amp;lt; b.N; i++ { getSlice(10000) }&#xA;}&#xA;func BenchmarkMap100(b *testing.B) {&#xA;    for i := 0; i &amp;lt; b.N; i++ { getMap(100) }&#xA;}&#xA;func BenchmarkMap1000(b *testing.B) {&#xA;    for i := 0; i &amp;lt; b.N; i++ { getMap(1000) }&#xA;}&#xA;func BenchmarkMap10000(b *testing.B) {&#xA;    for i := 0; i &amp;lt; b.N; i++ { getMap(10000) }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Remove the timing and printing calls from &lt;code&gt;getSlice()&lt;/code&gt; and &lt;code&gt;getMap()&lt;/code&gt; of course.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Running with&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go test -bench . -benchmem&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;BenchmarkSlice100-4    3000000        471 ns/op        1792 B/op      1 allocs/op&#xA;BenchmarkSlice1000-4    300000       3944 ns/op       16384 B/op      1 allocs/op&#xA;BenchmarkSlice10000-4    50000      39293 ns/op      163840 B/op      1 allocs/op&#xA;BenchmarkMap100-4       200000      11651 ns/op        2843 B/op      9 allocs/op&#xA;BenchmarkMap1000-4       10000     111040 ns/op       41823 B/op     12 allocs/op&#xA;BenchmarkMap10000-4       1000    1152011 ns/op      315450 B/op    135 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;B/op&lt;/code&gt; values tell you how many bytes were allocated per op. &lt;code&gt;allocs/op&lt;/code&gt; tells how many (distinct) memory allocations occurred per op.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On my 64-bit architecture (where the size of &lt;code&gt;int&lt;/code&gt; is 8 bytes) it tells that the size of a slice having 2000 elements is roughly 16 KB (in line with 2000 * 8 bytes). A map with 1000 &lt;code&gt;int-int&lt;/code&gt; pairs required approximately to allocate 42 KB.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-05-30T09:34:26.243"" LastActivityDate=""2017-05-30T09:34:26.243"" CommentCount=""0"" />
",44258164
44263381,"44263381      <row Id=""44263381"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44263573"" PostTypeId=""2"" ParentId=""44263381"" CreationDate=""2017-05-30T13:24:58.237"" Score=""3"" Body=""&lt;p&gt;Because the literal &lt;code&gt;0&lt;/code&gt; is not the same type. If you do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if v != int32(0) {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;When the value is an &lt;code&gt;int32&lt;/code&gt;, it works as expected. Unfortunately, you're combining all the int types in a single case, which will make this difficult/unwieldy to handle correctly. You could probably work something out using reflection to compare the value against the zero value for its type at runtime, using &lt;a href=&quot;https://golang.org/pkg/reflect/#Zero&quot; rel=&quot;nofollow noreferrer&quot;&gt;reflect.Zero&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-05-30T13:24:58.237"" CommentCount=""2"" />
",44263573
44263835,"44263835      <row Id=""44263835"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44265022"" PostTypeId=""2"" ParentId=""44263835"" CreationDate=""2017-05-30T14:28:06.080"" Score=""0"" Body=""&lt;p&gt;It is not the problem of &lt;code&gt;encoding/base64&lt;/code&gt;. When using &lt;a href=&quot;https://golang.org/pkg/io/#Reader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.Reader&lt;/code&gt;&lt;/a&gt;, it's not guaranteed that number of bytes read exactly equal to the buffer size (i.e. &lt;code&gt;blocksize&lt;/code&gt; in your example code). The documentation states:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Read reads up to len(p) bytes into p. It returns the number of bytes read (0 &amp;lt;= n &amp;lt;= len(p)) and any error encountered. Even if Read returns n &amp;lt; len(p), it may use all of p as scratch space during the call. If some data is available but not len(p) bytes, Read conventionally returns what is available instead of waiting for more. &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;In your example, change &lt;code&gt;PrintBytes&lt;/code&gt; to &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func PrintBytes(reader io.Reader, blocksize int) {&#xA;    block := make([]byte, blocksize)&#xA;    for {&#xA;        n, err := reader.Read(block)&#xA;        //Process the data if n &amp;gt; 0, even when err != nil&#xA;        if n &amp;gt; 0 {&#xA;            log.Printf(&quot;%x\tblocksize=%d&quot;, block[:n], blocksize)&#xA;        }&#xA;&#xA;        //Check for error&#xA;        if err != nil {&#xA;            if err != io.EOF {&#xA;                log.Fatal(err)&#xA;            } else if err == io.EOF {&#xA;                break&#xA;            }&#xA;        } else if n == 0 {&#xA;            //Considered as nothing happened&#xA;            log.Printf(&quot;WARNING: read return 0,nil&quot;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Correct usage of &lt;code&gt;io.Reader&lt;/code&gt;, modify code to always process the data if &lt;code&gt;n &amp;gt; 0&lt;/code&gt; even when error occurs. &lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-05-30T15:06:34.753"" LastActivityDate=""2017-05-30T15:06:34.753"" CommentCount=""0"" />
",44265022
44269142,"44269142      <row Id=""44269142"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44269276"" PostTypeId=""2"" ParentId=""44269142"" CreationDate=""2017-05-30T18:20:01.643"" Score=""2"" Body=""&lt;p&gt;The behavior of nil for HostKeyCallback was changed: &lt;a href=&quot;https://github.com/golang/go/issues/19767&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/golang/go/issues/19767&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to allow any host:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;HostKeyCallback: ssh.InsecureIgnoreHostKey()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""10322"" LastActivityDate=""2017-05-30T18:20:01.643"" CommentCount=""2"" />
",44269276
44148184,"44148184      <row Id=""44148184"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44274727"" PostTypeId=""2"" ParentId=""44148184"" CreationDate=""2017-05-31T02:35:03.317"" Score=""2"" Body=""&lt;p&gt;From the VTune traces I can conclude that TBB queue does not sleep, spending a lot time spinning, while Go version has light green areas indicating threads sleeping on OS synchronization. Why is it better? Usually, it indicates that you have oversubscription on your machine, thus communication through OS pays off.&#xA;So, do you oversubscribe it? If yes, I'd say this is rather expected behavior which fits into philosophy of corresponding libraries. TBB is designed for compute parallelism, it does not handle IO tasks well while playing against oversubscription. Go is designed exactly for IO tasks, thus built-in concurrency with FIFO policy of the scheduler that is unfriendly to parallel number crunching. Oversubscription is rather recommend for IO tasks while it affects or even kills computational parallelism.&lt;/p&gt;&#xA;"" OwnerUserId=""2527797"" LastEditorUserId=""2527797"" LastEditDate=""2017-05-31T02:46:33.673"" LastActivityDate=""2017-05-31T02:46:33.673"" CommentCount=""0"" />
",44274727
44275403,"44275403      <row Id=""44275403"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44276686"" PostTypeId=""2"" ParentId=""44275403"" CreationDate=""2017-05-31T05:51:43.643"" Score=""4"" Body=""&lt;p&gt;If you can get a reference to something in the package, you can use reflect to get the import path.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's an example on &lt;a href=&quot;https://play.golang.org/p/Ug3RkqLtBT&quot; rel=&quot;nofollow noreferrer&quot;&gt;Play&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;bytes&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;reflect&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    var b bytes.Buffer&#xA;    fmt.Println(reflect.TypeOf(b).PkgPath())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""121631"" LastActivityDate=""2017-05-31T05:51:43.643"" CommentCount=""1"" />
",44276686
44274221,"44274221      <row Id=""44274221"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44276988"" PostTypeId=""2"" ParentId=""44274221"" CreationDate=""2017-05-31T06:12:54.817"" Score=""3"" Body=""&lt;p&gt;The problem is in the endianness of variable &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;encrypted&lt;/code&gt;. In the C code, &lt;code&gt;data&lt;/code&gt; (8-bytes) is converted from byte array to &lt;code&gt;unsigned int&lt;/code&gt;(32-bit little-endian), then being encrypted in place. It affects the endianness of both input and encrypted result. To get same result in Golang, you must perform endian conversion, e.g.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;bytes&quot;&#xA;    &quot;fmt&quot;&#xA;&#xA;    &quot;encoding/binary&quot;&#xA;&#xA;    &quot;golang.org/x/crypto/blowfish&quot;&#xA;)&#xA;&#xA;func convertEndian(in []byte) ([]byte, error) {&#xA;    //Read byte array as uint32 (little-endian)&#xA;    var v1, v2 uint32&#xA;    buf := bytes.NewReader(in)&#xA;    if err := binary.Read(buf, binary.LittleEndian, &amp;amp;v1); err != nil {&#xA;        return nil, err&#xA;    }&#xA;    if err := binary.Read(buf, binary.LittleEndian, &amp;amp;v2); err != nil {&#xA;        return nil, err&#xA;    }&#xA;&#xA;    //convert uint32 to byte array&#xA;    out := make([]byte, 8)&#xA;    binary.BigEndian.PutUint32(out, v1)&#xA;    binary.BigEndian.PutUint32(out[4:], v2)&#xA;&#xA;    return out, nil&#xA;}&#xA;&#xA;func main() {&#xA;    key := []byte{0xc9, 0x04, 0xa7, 0xa8, 0x5b, 0xbd, 0x97, 0x53, 0x24, 0xc5, 0x08, 0x3e, 0xd9, 0x6f, 0xf0, 0x22, 0xf2, 0x5e, 0x06, 0x2d, 0xa1, 0xd5, 0x75, 0xb2, 0x46, 0x2c, 0x2c, 0x98, 0xd8, 0xd6, 0x4d, 0x9d}&#xA;    data := []byte{0x53, 0x8b, 0x77, 0x59, 0x83, 0x4d, 0x34, 0x18}&#xA;&#xA;    //Add: This is equal to: (unsigned int *)data in C&#xA;    cdata, _ := convertEndian(data)&#xA;&#xA;    cipher, err := blowfish.NewCipher(key)&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    fmt.Printf(&quot;key: %x\n&quot;, key)&#xA;    fmt.Printf(&quot;data: %x\n&quot;, cdata)&#xA;&#xA;    encrypted := make([]byte, 8)&#xA;    cipher.Encrypt(encrypted, cdata)&#xA;    fmt.Printf(&quot;encrypted-1: %x\n&quot;, encrypted)&#xA;&#xA;    //Add: This is equal to {uint32, uint32} --&amp;gt; byte array&#xA;    ce, _ := convertEndian(encrypted)&#xA;    fmt.Printf(&quot;encrypted-2: %02x\n&quot;, ce)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-05-31T06:12:54.817"" CommentCount=""0"" />
",44276988
44000686,"44000686      <row Id=""44000686"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44278364"" PostTypeId=""2"" ParentId=""44000686"" CreationDate=""2017-05-31T07:28:38.140"" Score=""1"" Body=""&lt;p&gt;I asked the go team and the answer was:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;a href=&quot;https://github.com/bazelbuild/rules_go/blob/master/proto/go_proto_library.bzl&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/bazelbuild/rules_go/blob/master/proto/go_proto_library.bzl&lt;/a&gt; does not have a good solution for this case where the .proto is in a  completely different location from the .pb.go files other than using a genrule to copy the .proto file from its source and then a go_proto_library to operate on it.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;a href=&quot;https://github.com/pubref/rules_protobuf/blob/master/go/rules.bzl&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/pubref/rules_protobuf/blob/master/go/rules.bzl&lt;/a&gt; has a go_proto_library that allows the .proto from one place and the .pb.go from another, but disclaimer: this code is not owned or maintained by Google.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;As to the questions:&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;1) No&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;2) No idea&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;3) See 2&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;4) bazel always recommends generating from the source (in this case the .proto files)&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;5) Not yet&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""1009896"" LastActivityDate=""2017-05-31T07:28:38.140"" CommentCount=""0"" />
",44278364
44277222,"44277222      <row Id=""44277222"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44282136"" PostTypeId=""2"" ParentId=""44277222"" CreationDate=""2017-05-31T10:21:43.970"" Score=""2"" Body=""&lt;p&gt;This is not using regex but is just an example of how to achieve the same by using &lt;a href=&quot;https://golang.org/pkg/strings/#FieldsFunc&quot; rel=&quot;nofollow noreferrer&quot;&gt;strings.FieldsFunc&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/rr6U8xTJZT&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/rr6U8xTJZT&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;strings&quot;&#xA;    &quot;unicode&quot;&#xA;)&#xA;&#xA;const foo = `time=&quot;2017-05-30T19:02:08-05:00&quot; level=info msg=&quot;some log message&quot; app=sample size=10`&#xA;&#xA;func main() {&#xA;    lastQuote := rune(0)&#xA;    f := func(c rune) bool {&#xA;        switch {&#xA;        case c == lastQuote:&#xA;            lastQuote = rune(0)&#xA;            return false&#xA;        case lastQuote != rune(0):&#xA;            return false&#xA;        case unicode.In(c, unicode.Quotation_Mark):&#xA;            lastQuote = c&#xA;            return false&#xA;        default:&#xA;            return unicode.IsSpace(c)&#xA;&#xA;        }&#xA;    }&#xA;&#xA;    // splitting string by space but considering quoted section&#xA;    items := strings.FieldsFunc(foo, f)&#xA;&#xA;    // create and fill the map&#xA;    m := make(map[string]string)&#xA;    for _, item := range items {&#xA;        x := strings.Split(item, &quot;=&quot;)&#xA;        m[x[0]] = x[1]&#xA;    }&#xA;&#xA;    // print the map&#xA;    for k, v := range m {&#xA;        fmt.Printf(&quot;%s: %s\n&quot;, k, v)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1135424"" LastActivityDate=""2017-05-31T10:21:43.970"" CommentCount=""1"" />
",44282136
44284754,"44284754      <row Id=""44284754"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44284873"" PostTypeId=""2"" ParentId=""44284754"" CreationDate=""2017-05-31T12:30:06.490"" Score=""2"" Body=""&lt;p&gt;It seems like you're running this on the Go playground (play.golang.org). The time is fixed on the Go playground, try running it locally instead.&lt;/p&gt;&#xA;"" OwnerUserId=""293581"" LastActivityDate=""2017-05-31T12:30:06.490"" CommentCount=""0"" />
",44284873
44208305,"44208305      <row Id=""44208305"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44285400"" PostTypeId=""2"" ParentId=""44208305"" CreationDate=""2017-05-31T12:53:51.823"" Score=""2"" Body=""&lt;p&gt;I only used an older version of appengine sdk, but I believe below is still true.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The main issue is that you have google-cloud-sdk inside your GOPATH. This should not be necessary. I have it installed in my path. But even if not installed it should be resolving it's location relative to the executable or script you are running and should find all required sdk files properly. At the same time SDK is roughly 7500 files and you only need to have more than 10000 (approx) in your GOPATH to get that &quot;to many files&quot; warning. So, if you have another (e.g. older) copy of SDK or other big project inside same GOPATH, you are pretty much guaranteed to exceed the threshold. Just locate /Users/Bryan/go in Finder and use &quot;Get Info&quot; to count files.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, either move appengine SDK outside of your GOPATH. Or make a new folder, export it as your new GOPATH and move your project files (but not SDK) to that new folder. This should fix the &quot;too many files issue&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The other issue is that your app actually fails to build. And as you have already figured out yourself the (immediate) issue is missing appengine package.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But the correct way of getting google.golang.org/appengine is as follows:&#xA;&lt;code&gt;&#xA;go get google.golang.org/appengine&#xA;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Though keep in mind that GOPATH must be set correctly &lt;em&gt;before&lt;/em&gt; running the above command. It will fetch google.golang.org/appengine and all it's dependencies.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Once you have retrieved all required packages (and fixed errors, if any) it should compile and run without issues.&lt;/p&gt;&#xA;"" OwnerUserId=""6375498"" LastActivityDate=""2017-05-31T12:53:51.823"" CommentCount=""5"" />
",44285400
44283880,"44283880      <row Id=""44283880"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44286169"" PostTypeId=""2"" ParentId=""44283880"" CreationDate=""2017-05-31T13:29:18.927"" Score=""0"" Body=""&lt;p&gt;If you want to go beyond porting a bash script to Go (which is often more trouble than it's worth), you can use the &lt;a href=&quot;https://godoc.org/gopkg.in/mgo.v2&quot; rel=&quot;nofollow noreferrer&quot;&gt;mgo library&lt;/a&gt; to actually connect to a MongoDB instance and check if it is healthy:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;gopkg.in/mgo.v2&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;os&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    sess, err := mgo.Dial(&quot;localhost&quot;)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        os.Exit(1)&#xA;    }&#xA;    defer sess.Close()&#xA;    err = sess.Ping()&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        os.Exit(1)&#xA;    }&#xA;    fmt.Println(&quot;MongoDB server is healthy.&quot;)&#xA;    os.Exit(0)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7426"" LastEditorUserId=""7426"" LastEditDate=""2017-05-31T13:38:15.553"" LastActivityDate=""2017-05-31T13:38:15.553"" CommentCount=""4"" />
",44286169
44289704,"44289704      <row Id=""44289704"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44289780"" PostTypeId=""2"" ParentId=""44289704"" CreationDate=""2017-05-31T16:12:32.700"" Score=""2"" Body=""&lt;p&gt;You can use a cancellation channel:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cancel := make(chan struct{})&#xA;for {&#xA;    timer = time.NewTimer(30 * time.Second)&#xA;    select {&#xA;    case &amp;lt;- timer.C:&#xA;        doSomething()&#xA;    case &amp;lt;- cancel:&#xA;        doSomething()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;When you want to ignore the timer and execute immediately, just send a message on the &lt;code&gt;cancel&lt;/code&gt; channel:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cancel &amp;lt;- struct{}{}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-05-31T16:12:32.700"" CommentCount=""0"" />
",44289780
44295820,"44295820      <row Id=""44295820"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44296206"" PostTypeId=""2"" ParentId=""44295820"" CreationDate=""2017-05-31T23:29:32.733"" Score=""1"" Body=""&lt;p&gt;You would pass a &lt;code&gt;tls.Config&lt;/code&gt; struct with your own &lt;code&gt;VerifyPeerCertificate&lt;/code&gt; function, and then you would check the certificate yourself.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;VerifyPeerCertificate func(rawCerts [][]byte, verifiedChains [][]*x509.Certificate) error&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;If normal verification fails then the handshake will abort before&#xA;  considering this callback. If normal verification is disabled by&#xA;  setting InsecureSkipVerify then this callback will be considered but&#xA;  the verifiedChains argument will always be nil.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;You can look &lt;a href=&quot;https://golang.org/pkg/crypto/x509/#example_Certificate_Verify&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; for an example of how to verify a certificate.  Iif you look &lt;a href=&quot;https://golang.org/pkg/crypto/x509/#VerifyOptions&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;, you'll see that part of even this verification process includes checking the hostname, but luckily you'll see that it &lt;a href=&quot;https://golang.org/src/crypto/x509/verify.go?s=8414:8499#L298&quot; rel=&quot;nofollow noreferrer&quot;&gt;skips it&lt;/a&gt; if it's set to the empty string.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, basically you write your own &lt;code&gt;VerifyPeerCertificate&lt;/code&gt; function, convert the &lt;code&gt;rawCerts [][]byte&lt;/code&gt;, which I think would look something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;customVerify := func(rawCerts [][]byte, verifiedChains [][]*x509.Certificate) error {&#xA;    roots := x509.NewCertPool()&#xA;    for _, rawCert := range rawCerts {&#xA;        cert, _ := x509.ParseCertificate(rawCert)&#xA;        roots.AddCert(cert)&#xA;    }&#xA;    opts := x509.VerifyOptions{&#xA;        Roots:   roots,&#xA;    }&#xA;    _, err := cert.Verify(opts)&#xA;    return err&#xA;}&#xA;&#xA;conf := tls.Config{&#xA;    //...&#xA;    VerifyPeerCertificate: customVerify,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2082673"" LastActivityDate=""2017-05-31T23:29:32.733"" CommentCount=""3"" />
",44296206
44299808,"44299808      <row Id=""44299808"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44300473"" PostTypeId=""2"" ParentId=""44299808"" CreationDate=""2017-06-01T06:53:05.280"" Score=""5"" Body=""&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/y-I6Fb_61R&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/y-I6Fb_61R&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hope you can live with the additional outer &lt;code&gt;{}&lt;/code&gt; pair.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And without the outer &lt;code&gt;{}&lt;/code&gt; pair: &lt;a href=&quot;https://play.golang.org/p/SSTgln0qJc&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/SSTgln0qJc&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To not just have a bunch of links and to enable easy criticism of my solution by others, I include the code here, slightly redacted:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;encoding/json&quot;&#xA;    &quot;log&quot;&#xA;    &quot;strings&quot;&#xA;)&#xA;&#xA;var dataAsString = `` //put data between the ``&#xA;&#xA;type Item struct {&#xA;    Id          int    `json:&quot;id&quot;`&#xA;    Category    string `json:&quot;category&quot;`&#xA;    Name        string `json:&quot;name&quot;`&#xA;    Description string `json:&quot;description&quot;`&#xA;}&#xA;&#xA;type CategoryToItemSliceMap map[string][]Item&#xA;type CategoryToIndexItemMap map[string]map[int]Item&#xA;&#xA;func main() {&#xA;    // first read the data, we use a decoder as the input was given&#xA;    // as a stream of seperate json objects and not a big single one.&#xA;&#xA;    decoder := json.NewDecoder(strings.NewReader(dataAsString))&#xA;    var ourData []Item&#xA;    for decoder.More() {&#xA;        var it Item&#xA;        err := decoder.Decode(&amp;amp;it)&#xA;        if err != nil {&#xA;            log.Fatalln(err)&#xA;        }&#xA;        ourData = append(ourData, it)&#xA;    }&#xA;&#xA;    // collect items according to categories&#xA;    catToItemSlice := CategoryToItemSliceMap{}&#xA;    for _,v := range ourData {&#xA;        catToItemSlice[v.Category] = append(catToItemSlice[v.Category],v)&#xA;    }&#xA;&#xA;    // turn those slices into int -&amp;gt; Item maps so we get the index numbers&#xA;    // in the encoded json&#xA;    catToIndexItemMap := CategoryToIndexItemMap{}&#xA;    for k,v := range catToItemSlice {&#xA;        if catToIndexItemMap[k] == nil {&#xA;            catToIndexItemMap[k] = map[int]Item{}&#xA;        }&#xA;        for index, item := range v {&#xA;           catToIndexItemMap[k][index] = item&#xA;        }&#xA;    }&#xA;&#xA;    // easiest way to get the &quot;elements: &quot; without an additional outer {} &#xA;    // brace pair&#xA;    fmt.Printf(&quot;elements: &quot;)&#xA;&#xA;    // We only have one json object in the output and that is a map, so we&#xA;    // can use Unmarshal and don't need a streaming encoder. And get nice&#xA;    // indentation with MarshalIndent.&#xA;    out, err := json.MarshalIndent(catToIndexItemMap, &quot;&quot;, &quot;    &quot;)&#xA;    if err != nil {&#xA;        log.Fatalln(err)&#xA;    }&#xA;    fmt.Println(string(out))&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7824574"" LastEditorUserId=""7824574"" LastEditDate=""2017-06-01T07:25:23.573"" LastActivityDate=""2017-06-01T07:25:23.573"" CommentCount=""4"" />
",44300473
44297057,"44297057      <row Id=""44297057"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44300781"" PostTypeId=""2"" ParentId=""44297057"" CreationDate=""2017-06-01T07:08:51.377"" Score=""3"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;What am I missing here?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;In Java, size of the &lt;code&gt;int&lt;/code&gt; type is fixed 4 bytes. In Go &lt;code&gt;int&lt;/code&gt; is an architecture dependent type, on 32-bit architectures it's 32 bits (4 bytes), and on 64-bit architectures it's 64 bits (8 bytes).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Most likely you're running it on a 64-bit arch. Which means the size of the Go slice / array you allocate is 8 * 1 GB = 8 GB, while in Java it's only 4 * 1 GB = 4 GB.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Moreover, since you're using &lt;code&gt;int&lt;/code&gt; in your loop, Java only has to increment and set 4-byte values, while in Go you're incrementing and setting 8-byte values (type of &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; will be &lt;code&gt;int&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Change your Go code to use &lt;code&gt;int32&lt;/code&gt;, and give it a go again.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that your memory usage measurement is flawed, as just the array size in Java is 4 GB and 8 GB in Go, so that 3 GB for Java and 5-8 GB in Go is not the total memory usage!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that &lt;code&gt;[]int&lt;/code&gt; in Go is a &lt;a href=&quot;https://golang.org/ref/spec#Slice_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;slice&lt;/a&gt; and not an &lt;a href=&quot;https://golang.org/ref/spec#Array_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;array&lt;/a&gt;, they are not the same. Slices in Go are struct-like headers containing a pointer to a backing array (see &lt;a href=&quot;https://golang.org/pkg/reflect/#SliceHeader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;reflect.SliceHeader&lt;/code&gt;&lt;/a&gt; for details), so there is an implicit indirection step involved using them. For details see &lt;a href=&quot;https://stackoverflow.com/questions/38645175/why-have-arrays-in-go/38645895#38645895&quot;&gt;Why have arrays in Go?&lt;/a&gt; Also related: &lt;a href=&quot;https://stackoverflow.com/questions/30525184/array-vs-slice-accessing-speed&quot;&gt;Array vs Slice: accessing speed&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One last note: your code does not measure memory allocation, as that is just the tiny part of the app's execution time. The majority (like 99.99999%) of the execution time is to increment the loop variable a billion times and to fill the arrays with a billion elements.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-01T09:24:22.203"" LastActivityDate=""2017-06-01T09:24:22.203"" CommentCount=""0"" />
",44300781
44302790,"44302790      <row Id=""44302790"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44303024"" PostTypeId=""2"" ParentId=""44302790"" CreationDate=""2017-06-01T09:02:40.193"" Score=""5"" Body=""&lt;p&gt;&lt;a href=&quot;https://godoc.org/gopkg.in/mgo.v2#Query.All&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Query.All()&lt;/code&gt;&lt;/a&gt; never returns &lt;code&gt;mgo.ErrNotFound&lt;/code&gt;, so it's useless to check for that. If there are no results, the length of &lt;code&gt;results&lt;/code&gt; will be 0, so that's how you can detect that &lt;em&gt;if&lt;/em&gt; there were no errors:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;err := c.Find(selectQuery).All(&amp;amp;results)&#xA;if err != nil { {&#xA;    // error handling&#xA;    return&#xA;}&#xA;// If you must detect &quot;not found&quot; case:&#xA;if len(results) == 0 {&#xA;    // No results&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;mgo.ErrNotFound&lt;/code&gt; is used / returned by other methods, usually by those which ought to operate on a single document, such as &lt;a href=&quot;https://godoc.org/gopkg.in/mgo.v2#Query.One&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Query.One()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://godoc.org/gopkg.in/mgo.v2#Query.Apply&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Query.Apply()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastActivityDate=""2017-06-01T09:02:40.193"" CommentCount=""3"" />
",44303024
44301592,"44301592      <row Id=""44301592"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44303451"" PostTypeId=""2"" ParentId=""44301592"" CreationDate=""2017-06-01T09:18:53.250"" Score=""0"" Body=""&lt;p&gt;We are using docker to deliver our products nowadays, and just like you said, we develop and debug them from the host machine. And if we meet some issue which is hard to repo with the runtime enviroment staff, we attach the debug binary to the docker image to replace the built in ones.&lt;/p&gt;&#xA;"" OwnerUserId=""3765983"" LastActivityDate=""2017-06-01T09:18:53.250"" CommentCount=""0"" />
",44303451
44305617,"44305617      <row Id=""44305617"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44305711"" PostTypeId=""2"" ParentId=""44305617"" CreationDate=""2017-06-01T10:57:40.357"" Score=""1"" Body=""&lt;p&gt;The &lt;a href=&quot;https://golang.org/ref/spec#The_zero_value&quot; rel=&quot;nofollow noreferrer&quot;&gt;zero value&lt;/a&gt; for map types is &lt;code&gt;nil&lt;/code&gt;. It is not yet initialized. You cannot index &lt;code&gt;nil&lt;/code&gt; maps, that's a runtime panic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your last example you initialize the (outer) &lt;code&gt;data&lt;/code&gt; map, but it has no entries. When you index it like &lt;code&gt;data[&quot;a&quot;]&lt;/code&gt;, since there is no entry with &lt;code&gt;&quot;a&quot;&lt;/code&gt; key in it yet, indexing it returns the zero value of the value type which is &lt;code&gt;nil&lt;/code&gt; for maps. So attempting to index it like &lt;code&gt;data[&quot;a&quot;][&quot;w&quot;]&lt;/code&gt; is a runtime panic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You have to initialize a map first before indexing it, for example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var data = map[string]map[string]string{}&#xA;&#xA;data[&quot;a&quot;] = map[string]string{}&#xA;data[&quot;b&quot;] = make(map[string]string)&#xA;data[&quot;c&quot;] = make(map[string]string)&#xA;&#xA;data[&quot;a&quot;][&quot;w&quot;] = &quot;x&quot;&#xA;data[&quot;b&quot;][&quot;w&quot;] = &quot;x&quot;&#xA;data[&quot;c&quot;][&quot;w&quot;] = &quot;x&quot;&#xA;fmt.Println(data)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/-w-tf4G7dF&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;map[a:map[w:x] b:map[w:x] c:map[w:x]]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that when you declare a variable of map type and initialize it with a &lt;a href=&quot;https://golang.org/ref/spec#Composite_literals&quot; rel=&quot;nofollow noreferrer&quot;&gt;composite literal&lt;/a&gt; (as in &lt;code&gt;var data = map[string]string{}&lt;/code&gt;), that also counts as initializing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that you may also initialize your nested maps with a composite literal:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var data = map[string]map[string]string{&#xA;    &quot;a&quot;: map[string]string{},&#xA;    &quot;b&quot;: map[string]string{},&#xA;    &quot;c&quot;: map[string]string{},&#xA;}&#xA;&#xA;data[&quot;a&quot;][&quot;w&quot;] = &quot;x&quot;&#xA;data[&quot;b&quot;][&quot;w&quot;] = &quot;x&quot;&#xA;data[&quot;c&quot;][&quot;w&quot;] = &quot;x&quot;&#xA;fmt.Println(data)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output is the same. Try it on the &lt;a href=&quot;https://play.golang.org/p/FpXvrYpwDW&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-01T11:03:26.757"" LastActivityDate=""2017-06-01T11:03:26.757"" CommentCount=""1"" />
",44305711
44305170,"44305170      <row Id=""44305170"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44305910"" PostTypeId=""2"" ParentId=""44305170"" CreationDate=""2017-06-01T11:09:14.433"" Score=""0"" Body=""&lt;h2&gt;Observable behavior&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;nil&lt;/code&gt; and empty slices (with 0 capacity) are not the same, but their observable behavior is the same. By this I mean:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can pass them to the builtin &lt;a href=&quot;https://golang.org/pkg/builtin/#len&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;len()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/builtin/#cap&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;cap()&lt;/code&gt;&lt;/a&gt; functions&lt;/li&gt;&#xA;&lt;li&gt;You can &lt;code&gt;for range&lt;/code&gt; over them (will be 0 iterations)&lt;/li&gt;&#xA;&lt;li&gt;You can slice them (by not violating the restrictions outlined at &lt;a href=&quot;https://golang.org/ref/spec#Slice_expressions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: Slice expressions&lt;/a&gt;; so the result will also be an empty slice)&lt;/li&gt;&#xA;&lt;li&gt;Since their length is 0, you can't change their content (appending a value creates a new slice value)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;See this simple example (a &lt;code&gt;nil&lt;/code&gt; slice and 2 non-&lt;code&gt;nil&lt;/code&gt; empty slices):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var s1 []int         // nil slice&#xA;s2 := []int{}        // non-nil, empty slice&#xA;s3 := make([]int, 0) // non-nil, empty slice&#xA;&#xA;fmt.Println(&quot;s1&quot;, len(s1), cap(s1), s1 == nil, s1[:], s1[:] == nil)&#xA;fmt.Println(&quot;s2&quot;, len(s2), cap(s2), s2 == nil, s2[:], s2[:] == nil)&#xA;fmt.Println(&quot;s3&quot;, len(s3), cap(s3), s3 == nil, s3[:], s3[:] == nil)&#xA;&#xA;for _ = range s1 {}&#xA;for _ = range s2 {}&#xA;for _ = range s3 {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/_EjBzoz0Ed&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;s1 0 0 true [] true&#xA;s2 0 0 false [] false&#xA;s3 0 0 false [] false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Note that slicing a &lt;code&gt;nil&lt;/code&gt; slice results in a &lt;code&gt;nil&lt;/code&gt; slice, slicing a non-&lt;code&gt;nil&lt;/code&gt; slice results in a non-&lt;code&gt;nil&lt;/code&gt; slice.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can only tell the difference by comparing the slice value to the predeclared identifier &lt;code&gt;nil&lt;/code&gt;, they behave the same in every other aspect.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To tell if a slice is empty, simply compare its length to &lt;code&gt;0&lt;/code&gt;: &lt;code&gt;len(s) == 0&lt;/code&gt;. It doesn't matter if it's the &lt;code&gt;nil&lt;/code&gt; slice or a non-&lt;code&gt;nil&lt;/code&gt; slice, it also doesn't matter if it has a positive capacity; if it has no elements, it's empty.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;s := make([]int, 0, 100)&#xA;fmt.Println(&quot;Empty:&quot;, len(s) == 0, &quot;, but capacity:&quot;, cap(s))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Prints (try it on the &lt;a href=&quot;https://play.golang.org/p/T29nh9hVpd&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Empty: true , but capacity: 100&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;Under the hood&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;A slice value is represented by a struct defined in &lt;a href=&quot;https://golang.org/pkg/reflect/#SliceHeader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;reflect.SliceHeader&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type SliceHeader struct {&#xA;    Data uintptr&#xA;    Len  int&#xA;    Cap  int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In case of a &lt;code&gt;nil&lt;/code&gt; slice, this struct will have its zero value which is all its fields will be their zero value, that is: &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Having a non-&lt;code&gt;nil&lt;/code&gt; slice with both capacity and length equal to &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;Len&lt;/code&gt; and &lt;code&gt;Cap&lt;/code&gt; fields will most certainly be &lt;code&gt;0&lt;/code&gt;, but the &lt;code&gt;Data&lt;/code&gt; pointer may not be. It &lt;em&gt;will&lt;/em&gt; not be, that is what differentiates it from the &lt;code&gt;nil&lt;/code&gt; slice. It will point to a zero-sized underlying array.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that the Go spec allows for values of different types having 0 size to have the same memory address. &lt;a href=&quot;https://golang.org/ref/spec#Size_and_alignment_guarantees&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: System considerations: Size and alignment guarantees:&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;A struct or array type has size zero if it contains no fields (or elements, respectively) that have a size greater than zero. &lt;strong&gt;Two distinct zero-size variables may have the same address in memory.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Let's check this. For this we call the help of the &lt;a href=&quot;https://golang.org/pkg/unsafe/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; package, and &quot;obtain&quot; the &lt;code&gt;reflect.SliceHeader&lt;/code&gt; struct &quot;view&quot; of our slice values:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var s1 []int&#xA;s2 := []int{}&#xA;s3 := make([]int, 0)&#xA;&#xA;fmt.Printf(&quot;s1 (addr: %p): %+8v\n&quot;,&#xA;    &amp;amp;s1, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;amp;s1)))&#xA;fmt.Printf(&quot;s2 (addr: %p): %+8v\n&quot;,&#xA;    &amp;amp;s2, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;amp;s2)))&#xA;fmt.Printf(&quot;s3 (addr: %p): %+8v\n&quot;,&#xA;    &amp;amp;s3, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;amp;s3)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/49I_2os91G&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;s1 (addr: 0x1040a130): {Data:       0 Len:       0 Cap:       0}&#xA;s2 (addr: 0x1040a140): {Data: 1535812 Len:       0 Cap:       0}&#xA;s3 (addr: 0x1040a150): {Data: 1535812 Len:       0 Cap:       0}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What do we see?&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;All slices (slice headers) have different memory addresses&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;nil&lt;/code&gt; slice has &lt;code&gt;0&lt;/code&gt; data pointer&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;s2&lt;/code&gt; and &lt;code&gt;s3&lt;/code&gt; slices do have the same data pointer, sharing / pointing to the same 0-sized memory value &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-02T05:55:48.687"" LastActivityDate=""2017-06-02T05:55:48.687"" CommentCount=""3"" />
",44305910
44302374,"44302374      <row Id=""44302374"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44306160"" PostTypeId=""2"" ParentId=""44302374"" CreationDate=""2017-06-01T11:22:26.170"" Score=""0"" Body=""&lt;p&gt;Now, I am very happy with the mood to share my solution&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func NewPostFile(url string, paramTexts map[string]interface{}, paramFile FileItem) ([]byte, error) {&#xA;// if paramFiles ==nil {&#xA;//  return NewPost(url,paramTexts,header,transport)&#xA;// }&#xA;&#xA;bodyBuf := &amp;amp;bytes.Buffer{}&#xA;bodyWriter := multipart.NewWriter(bodyBuf)&#xA;&#xA;for k, v := range paramTexts {&#xA;    bodyWriter.WriteField(k, v.(string))&#xA;}&#xA;fileWriter, err := bodyWriter.CreateFormFile(paramFile.Key, paramFile.FileName)&#xA;if err != nil {&#xA;    fmt.Println(err)&#xA;    //fmt.Println(&quot;Create form file error: &quot;, error)&#xA;    return nil, err&#xA;}&#xA;fileWriter.Write(paramFile.Content)&#xA;contentType := bodyWriter.FormDataContentType()&#xA;bodyWriter.Close()&#xA;fmt.Println(bodyBuf.String())&#xA;&#xA;resp, err := http.Post(url, contentType, bodyBuf)&#xA;if err != nil {&#xA;    return nil, err&#xA;}&#xA;defer resp.Body.Close()&#xA;fmt.Println(resp)&#xA;&#xA;if resp.StatusCode &amp;lt; 200 || resp.StatusCode &amp;gt;= 300 {&#xA;    b, _ := ioutil.ReadAll(resp.Body)&#xA;    return nil, fmt.Errorf(&quot;[%d %s]%s&quot;, resp.StatusCode, resp.Status, string(b))&#xA;}&#xA;respData, err := ioutil.ReadAll(resp.Body)&#xA;if err != nil {&#xA;    return nil, err&#xA;}&#xA;fmt.Println(string(respData))&#xA;return respData, nil&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;}&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type FileItem struct {&#xA;Key      string //image_content&#xA;FileName string //test.jpg&#xA;Content  []byte //[]byte&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;}&lt;/p&gt;&#xA;"" OwnerUserId=""8095085"" LastActivityDate=""2017-06-01T11:22:26.170"" CommentCount=""0"" />
",44306160
44307219,"44307219      <row Id=""44307219"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44308109"" PostTypeId=""2"" ParentId=""44307219"" CreationDate=""2017-06-01T12:53:48.040"" Score=""4"" Body=""&lt;p&gt;Decoding a JSON stream is possible with the &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Decoder&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json.Decoder&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Decoder.Decode&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Decoder.Decode()&lt;/code&gt;&lt;/a&gt;, we may read (unmarshal) a single value without consuming and unmarshaling the complete stream. This is cool, but your input is a &quot;single&quot; JSON object, not a series of JSON objects, which means a call to &lt;code&gt;Decoder.Decode()&lt;/code&gt; would attempt to unmarshal the complete JSON object with all items (large objects).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What we want is partially, on-the-fly processing of a single JSON object. For this, we may use &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Decoder.Token&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Decoder.Token()&lt;/code&gt;&lt;/a&gt; which parses (advances) only the next subsequent token in the JSON input stream and returns it. This is called &lt;em&gt;event-driven&lt;/em&gt; parsing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Of course we have to &quot;process&quot; (interpret and act upon) the tokens and build a &quot;state machine&quot; that keeps track of where we're in the JSON structure we're processing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's an implementation that solves your problem.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We will use the following JSON input:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &quot;somefield&quot;: &quot;value&quot;,&#xA;    &quot;otherfield&quot;: &quot;othervalue&quot;,&#xA;    &quot;items&quot;: [&#xA;        { &quot;id&quot;: &quot;1&quot;, &quot;data&quot;: &quot;data1&quot; },&#xA;        { &quot;id&quot;: &quot;2&quot;, &quot;data&quot;: &quot;data2&quot; },&#xA;        { &quot;id&quot;: &quot;3&quot;, &quot;data&quot;: &quot;data3&quot; },&#xA;        { &quot;id&quot;: &quot;4&quot;, &quot;data&quot;: &quot;data4&quot; }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And read the &lt;code&gt;items&lt;/code&gt;, the &quot;large objects&quot; modeled by this type:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type LargeObject struct {&#xA;    Id   string `json:&quot;id&quot;`&#xA;    Data string `json:&quot;data&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We will also parse and interpret other fields in the JSON object, but we will only log / print them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For brevity and easy error handling, We'll use this helper error handler function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;he := func(err error) {&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And now let's see some action. In the example below for brevity and to have a working demonstration on the Go Playground, we'll read from a &lt;code&gt;string&lt;/code&gt; value. To read from an actual HTTP response body, we only have to change a single line, which is how we create the &lt;code&gt;json.Decoder&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;dec := json.NewDecoder(res.Body)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So the demonstration:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;dec := json.NewDecoder(strings.NewReader(jsonStream))&#xA;// We expect an object&#xA;t, err := dec.Token()&#xA;he(err)&#xA;if delim, ok := t.(json.Delim); !ok || delim != '{' {&#xA;    log.Fatal(&quot;Expected object&quot;)&#xA;}&#xA;&#xA;// Read props&#xA;for dec.More() {&#xA;    t, err = dec.Token()&#xA;    he(err)&#xA;    prop := t.(string)&#xA;    if t != &quot;items&quot; {&#xA;        var v interface{}&#xA;        he(dec.Decode(&amp;amp;v))&#xA;        log.Printf(&quot;Property '%s' = %v&quot;, prop, v)&#xA;        continue&#xA;    }&#xA;&#xA;    // It's the &quot;items&quot;. We expect it to be an array&#xA;    t, err := dec.Token()&#xA;    he(err)&#xA;    if delim, ok := t.(json.Delim); !ok || delim != '[' {&#xA;        log.Fatal(&quot;Expected array&quot;)&#xA;    }&#xA;    // Read items (large objects)&#xA;    for dec.More() {&#xA;        // Read next item (large object)&#xA;        lo := LargeObject{}&#xA;        he(dec.Decode(&amp;amp;lo))&#xA;        fmt.Printf(&quot;Item: %+v\n&quot;, lo)&#xA;    }&#xA;    // Array closing delim&#xA;    t, err = dec.Token()&#xA;    he(err)&#xA;    if delim, ok := t.(json.Delim); !ok || delim != ']' {&#xA;        log.Fatal(&quot;Expected array closing&quot;)&#xA;    }&#xA;}&#xA;&#xA;// Object closing delim&#xA;t, err = dec.Token()&#xA;he(err)&#xA;if delim, ok := t.(json.Delim); !ok || delim != '}' {&#xA;    log.Fatal(&quot;Expected object closing&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will produce the following output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;2009/11/10 23:00:00 Property 'somefield' = value&#xA;2009/11/10 23:00:00 Property 'otherfield' = othervalue&#xA;Item: {Id:1 Data:data1}&#xA;Item: {Id:2 Data:data2}&#xA;Item: {Id:3 Data:data3}&#xA;Item: {Id:4 Data:data4}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Try the full, working example on the &lt;a href=&quot;https://play.golang.org/p/zHXe-4a4Za&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-01T15:42:13.550"" LastActivityDate=""2017-06-01T15:42:13.550"" CommentCount=""1"" />
",44308109
44308536,"44308536      <row Id=""44308536"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44308833"" PostTypeId=""2"" ParentId=""44308536"" CreationDate=""2017-06-01T13:26:13.720"" Score=""1"" Body=""&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/net/http/#Request&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;http.Request&lt;/code&gt;&lt;/a&gt; is a struct, whose &lt;code&gt;URL&lt;/code&gt; field is a &lt;strong&gt;pointer&lt;/strong&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;URL *url.URL&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In your code you have a single &lt;code&gt;uri&lt;/code&gt; variable holding a pointer of type &lt;code&gt;*url.URL&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then you create 2 requests, storing the pointers in &lt;code&gt;request1&lt;/code&gt; and &lt;code&gt;request2&lt;/code&gt; variables, but you assign the same value, the same pointer to their &lt;code&gt;URL&lt;/code&gt; field.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So there is a single &lt;a href=&quot;https://golang.org/pkg/net/url/#URL&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;url.URL&lt;/code&gt;&lt;/a&gt; value, and you assign its address to both &lt;code&gt;request1.URL&lt;/code&gt; and &lt;code&gt;request2.URL&lt;/code&gt;. Then you print the addresses of &lt;code&gt;request1.URL.Host&lt;/code&gt; and &lt;code&gt;request2.URL.Host&lt;/code&gt;, but since both &lt;code&gt;request1.URL&lt;/code&gt; and &lt;code&gt;request2.URL&lt;/code&gt; point to the same and only &lt;code&gt;url.URL&lt;/code&gt; (struct) value, the address of the &lt;code&gt;Host&lt;/code&gt; field of that struct will be the same. There are no distinct &lt;code&gt;url.URL&lt;/code&gt; values for the 2 request structs.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastActivityDate=""2017-06-01T13:26:13.720"" CommentCount=""4"" />
",44308833
44294959,"44294959      <row Id=""44294959"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44309922"" PostTypeId=""2"" ParentId=""44294959"" CreationDate=""2017-06-01T14:12:33.967"" Score=""1"" Body=""&lt;p&gt;You don't &quot;model shared state using messages&quot;, you use messages &lt;em&gt;instead of&lt;/em&gt; shared state, which requires designing the application based on different fundamentals. It is generally not a matter of rewriting a mutex as a channel, but a completely different implementation approach, and that approach won't be applicable to all scenarios where you need to synchronize operations. If a shared map is the best approach for your situation, then a mutex is the correct way to synchronize access to it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As an example from my own experience, I've developed applications that allow for changing their configuration at runtime. Rather than having a shared Config object and synchronizing access to it, I give each main goroutine a channel on which it can receive configuration updates. When the config changes, the update is sent to all the listeners. When a listener gets a config change, it can complete its current operation, then deal with the config change in whatever way is appropriate to that routine - it may just update its local copy of the config, it may close connections to external resources and open new ones, etc. Instead of sharing data, I'm sending and receiving events, which is a fundamentally different design.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-01T14:12:33.967"" CommentCount=""3"" />
",44309922
44306554,"44306554      <row Id=""44306554"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44310259"" PostTypeId=""2"" ParentId=""44306554"" CreationDate=""2017-06-01T14:28:17.487"" Score=""1"" Body=""&lt;p&gt;You need to import &lt;code&gt;_ &quot;k8s.io/client-go/pkg/apis/extensions/install&quot;&lt;/code&gt; otherwise the schema is empty, see also &lt;a href=&quot;https://godoc.org/k8s.io/client-go/pkg/apis/extensions/install&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The complete working example is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ go get -u github.com/golang/dep/cmd/dep&#xA;$ dep init&#xA;$ go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With the following &lt;code&gt;main.go&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;&#xA;    &quot;k8s.io/client-go/pkg/api&quot;&#xA;    _ &quot;k8s.io/client-go/pkg/api/install&quot;&#xA;    _ &quot;k8s.io/client-go/pkg/apis/extensions/install&quot;&#xA;)&#xA;&#xA;var deployment = `&#xA;apiVersion: extensions/v1beta1&#xA;kind: Deployment&#xA;metadata:&#xA;name: my-nginx&#xA;spec:&#xA;replicas: 2&#xA;template:&#xA;  metadata:&#xA;    labels:&#xA;      run: my-nginx&#xA;  spec:&#xA;    containers:&#xA;    - name: my-nginx&#xA;      image: nginx&#xA;      ports:&#xA;      - containerPort: 80&#xA;`&#xA;&#xA;func main() {&#xA;    // decode := api.Codecs.UniversalDecoder().Decode&#xA;    decode := api.Codecs.UniversalDeserializer().Decode&#xA;&#xA;    obj, _, err := decode([]byte(deployment), nil, nil)&#xA;    if err != nil {&#xA;        fmt.Printf(&quot;%#v&quot;, err)&#xA;    }&#xA;&#xA;    fmt.Printf(&quot;%#v\n&quot;, obj)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that I also imported &lt;code&gt;_ &quot;k8s.io/client-go/pkg/api/install&quot;&lt;/code&gt; for you so that you can use objects in &lt;code&gt;v1&lt;/code&gt; such as pods or services.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;EDIT: Kudos to my colleague &lt;a href=&quot;https://twitter.com/the1stein&quot; rel=&quot;nofollow noreferrer&quot;&gt;Stefan Schimanski&lt;/a&gt; who proposed the initial solution.&lt;/p&gt;&#xA;"" OwnerUserId=""396567"" LastActivityDate=""2017-06-01T14:28:17.487"" CommentCount=""2"" />
",44310259
44313364,"44313364      <row Id=""44313364"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44313480"" PostTypeId=""2"" ParentId=""44313364"" CreationDate=""2017-06-01T17:12:58.617"" Score=""1"" Body=""&lt;p&gt;If the function takes a &lt;code&gt;[]Base&lt;/code&gt; parameter, you must pass a &lt;code&gt;[]Base&lt;/code&gt; parameter. Not a &lt;code&gt;[]interface{}&lt;/code&gt;, not a &lt;code&gt;[]thingThatImplementsBase&lt;/code&gt;, but specifically a &lt;code&gt;[]Base&lt;/code&gt;. A slice of interfaces isn't an interface - it isn't &quot;implemented by&quot; a slice of any other type. The elements of a slice of interfaces can be anything that implements the interface, but the slice itself is of a strict and specific type.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-01T17:12:58.617"" CommentCount=""0"" />
",44313480
44315096,"44315096      <row Id=""44315096"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44315254"" PostTypeId=""2"" ParentId=""44315096"" CreationDate=""2017-06-01T19:05:20.807"" Score=""3"" Body=""&lt;p&gt;Use &lt;code&gt;fmt.Sprintf()&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    i := 42&#xA;    ip := &amp;amp;i&#xA;    strValue := fmt.Sprintf(&quot;%p&quot;, &amp;amp;ip)&#xA;    fmt.Println(strValue)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""963881"" LastActivityDate=""2017-06-01T19:05:20.807"" CommentCount=""1"" />
",44315254
44320960,"44320960      <row Id=""44320960"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44321451"" PostTypeId=""2"" ParentId=""44320960"" CreationDate=""2017-06-02T05:31:03.473"" Score=""2"" Body=""&lt;p&gt;From the &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Marshal&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Struct values encode as JSON objects. Each exported struct field becomes a member of the object unless&lt;/p&gt;&#xA;  &#xA;  &lt;ul&gt;&#xA;  &lt;li&gt;the field's tag is &quot;-&quot;, or&lt;/li&gt;&#xA;  &lt;li&gt;the field is empty and its tag specifies the &quot;omitempty&quot; option.&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &#xA;  &lt;p&gt;The empty values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The reason it is not omitting is stated &lt;a href=&quot;https://golang.org/doc/faq#nil_error&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;An interface value is nil only if the inner value and type are both&#xA;  unset, (nil, nil). In particular, a nil interface will always hold a&#xA;  nil type. If we store a nil pointer of type *int inside an interface&#xA;  value, the inner type will be *int regardless of the value of the&#xA;  pointer: (*int, nil). Such an interface value will therefore be&#xA;  non-nil even when the pointer inside is nil.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/q297qL5vjF&quot; rel=&quot;nofollow noreferrer&quot;&gt;eg&lt;/a&gt;: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var s []string&#xA;s = nil&#xA;var temp interface{}&#xA;fmt.Println(temp==nil) // true&#xA;temp = s&#xA;fmt.Println(temp==nil) // false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For your case, you can do&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/ZZ_Vzwq4QF&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/ZZ_Vzwq4QF&lt;/a&gt;&lt;br&gt;&#xA;or&lt;br&gt;&#xA;&lt;a href=&quot;https://play.golang.org/p/S5lMgqVXuB&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/S5lMgqVXuB&lt;/a&gt;  &lt;/p&gt;&#xA;"" OwnerUserId=""2809739"" LastEditorUserId=""2809739"" LastEditDate=""2017-06-02T06:39:10.743"" LastActivityDate=""2017-06-02T06:39:10.743"" CommentCount=""2"" />
",44321451
44310982,"44310982      <row Id=""44310982"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44322300"" PostTypeId=""2"" ParentId=""44310982"" CreationDate=""2017-06-02T06:33:26.357"" Score=""2"" Body=""&lt;p&gt;Depending on the nature of this writer and how you use it, keeping everything in memory (to be able to re-play everything for readers joining later) is very risky and might demand a lot of memory, or cause your app to crash due to out of memory.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Using it for a &quot;low-traffic&quot; logger keeping everything in memory is probably ok, but for example streaming some audio or video is most likely not.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the reader implementations below read all the data that was written to the buffer, their &lt;code&gt;Read()&lt;/code&gt; method will report &lt;code&gt;io.EOF&lt;/code&gt;, properly. Care must be taken as some constructs (such as &lt;a href=&quot;https://golang.org/pkg/bufio/#Scanner&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;bufio.Scanner&lt;/code&gt;&lt;/a&gt;) may not read more data once &lt;code&gt;io.EOF&lt;/code&gt; is encountered (but this is not the flaw of our implementation).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want the readers of our buffer to wait if no more data is available in the buffer, to wait until new data is written instead of returning &lt;code&gt;io.EOF&lt;/code&gt;, you may wrap the returned readers in a &quot;tail reader&quot; presented here: &lt;a href=&quot;https://stackoverflow.com/questions/31120987/go-tail-f-like-generator/31122253#31122253&quot;&gt;Go: &amp;quot;tail -f&amp;quot;-like generator&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;&quot;Memory-safe&quot; file implementation&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Here is an extremely simple and elegant solution. It uses a file to write to, and also uses files to read from. The synchronization is basically provided by the operating system. This does not risk out of memory error, as the data is solely stored on the disk. Depending on the nature of your writer, this may or may not be sufficient.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I will rather use the following interface, because &lt;code&gt;Close()&lt;/code&gt; is important in case of files.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type MyBuf interface {&#xA;    io.WriteCloser&#xA;    NewReader() (io.ReadCloser, error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And the implementation is extremely simple:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type mybuf struct {&#xA;    *os.File&#xA;}&#xA;&#xA;func (mb *mybuf) NewReader() (io.ReadCloser, error) {&#xA;    f, err := os.Open(mb.Name())&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    return f, nil&#xA;}&#xA;&#xA;func NewMyBuf(name string) (MyBuf, error) {&#xA;    f, err := os.Create(name)&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    return &amp;amp;mybuf{File: f}, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Our &lt;code&gt;mybuf&lt;/code&gt; type embeds &lt;a href=&quot;https://golang.org/pkg/os/#File&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;*os.File&lt;/code&gt;&lt;/a&gt;, so we get the &lt;code&gt;Write()&lt;/code&gt; and &lt;code&gt;Close()&lt;/code&gt; methods for &quot;free&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;NewReader()&lt;/code&gt; simply opens the existing, backing file for reading (in read-only mode) and returns it, again taking advantage of that it implements &lt;code&gt;io.ReadCloser&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Creating a new &lt;code&gt;MyBuf&lt;/code&gt; value is implementing in the &lt;code&gt;NewMyBuf()&lt;/code&gt; function which may also return an &lt;code&gt;error&lt;/code&gt; if creating the file fails.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that since &lt;code&gt;mybuf&lt;/code&gt; embeds &lt;code&gt;*os.File&lt;/code&gt;, it is possible with a &lt;a href=&quot;https://golang.org/ref/spec#Type_assertions&quot; rel=&quot;nofollow noreferrer&quot;&gt;type assertion&lt;/a&gt; to &quot;reach&quot; other exported methods of &lt;code&gt;os.File&lt;/code&gt; even though they are not part of the &lt;code&gt;MyBuf&lt;/code&gt; interface. I do not consider this a flaw, but if you want to disallow this, you have to change the implementation of &lt;code&gt;mybuf&lt;/code&gt; to not embed &lt;code&gt;os.File&lt;/code&gt; but rather have it as a named field (but then you have to add the &lt;code&gt;Write()&lt;/code&gt; and &lt;code&gt;Close()&lt;/code&gt; methods yourself, properly forwarding to the &lt;code&gt;os.File&lt;/code&gt; field).&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;In-memory implementation&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;If the file implementation is not sufficient, here comes an in-memory implementation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since we're now in-memory only, we will use the following interface:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type MyBuf interface {&#xA;    io.Writer&#xA;    NewReader() io.Reader&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The idea is to store all byte slices that is ever passed to our buffer. Readers will provide the stored slices when &lt;code&gt;Read()&lt;/code&gt; is called, each reader will keep track of how many of the stored slices were served by its &lt;code&gt;Read()&lt;/code&gt; method. Synchronization must be dealt with, we will use a simple &lt;a href=&quot;https://golang.org/pkg/sync/#RWMutex&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sync.RWMutex&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Without further ado, here is the implementation:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type mybuf struct {&#xA;    data [][]byte&#xA;    sync.RWMutex&#xA;}&#xA;&#xA;func (mb *mybuf) Write(p []byte) (n int, err error) {&#xA;    if len(p) == 0 {&#xA;        return 0, nil&#xA;    }&#xA;    // Cannot retain p, so we must copy it:&#xA;    p2 := make([]byte, len(p))&#xA;    copy(p2, p)&#xA;    mb.Lock()&#xA;    mb.data = append(mb.data, p2)&#xA;    mb.Unlock()&#xA;    return len(p), nil&#xA;}&#xA;&#xA;type mybufReader struct {&#xA;    mb   *mybuf // buffer we read from&#xA;    i    int    // next slice index&#xA;    data []byte // current data slice to serve&#xA;}&#xA;&#xA;func (mbr *mybufReader) Read(p []byte) (n int, err error) {&#xA;    if len(p) == 0 {&#xA;        return 0, nil&#xA;    }&#xA;    // Do we have data to send?&#xA;    if len(mbr.data) == 0 {&#xA;        mb := mbr.mb&#xA;        mb.RLock()&#xA;        if mbr.i &amp;lt; len(mb.data) {&#xA;            mbr.data = mb.data[mbr.i]&#xA;            mbr.i++&#xA;        }&#xA;        mb.RUnlock()&#xA;    }&#xA;    if len(mbr.data) == 0 {&#xA;        return 0, io.EOF&#xA;    }&#xA;&#xA;    n = copy(p, mbr.data)&#xA;    mbr.data = mbr.data[n:]&#xA;    return n, nil&#xA;}&#xA;&#xA;func (mb *mybuf) NewReader() io.Reader {&#xA;    return &amp;amp;mybufReader{mb: mb}&#xA;}&#xA;&#xA;func NewMyBuf() MyBuf {&#xA;    return &amp;amp;mybuf{}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that the general contract of &lt;code&gt;Writer.Write()&lt;/code&gt; is that it must not retain the passed slice, so we have make a copy of it before &quot;storing&quot; it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that the &lt;code&gt;Read()&lt;/code&gt; of readers attempts to lock for minimal amount of time. That is, it only locks if we need new data slice from buffer, and only does read-locking, meaning if the reader has a partial data slice, will send that in &lt;code&gt;Read()&lt;/code&gt; without locking and touching the buffer.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-02T09:35:50.107"" LastActivityDate=""2017-06-02T09:35:50.107"" CommentCount=""1"" />
",44322300
44323087,"44323087      <row Id=""44323087"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44323647"" PostTypeId=""2"" ParentId=""44323087"" CreationDate=""2017-06-02T07:55:20.997"" Score=""2"" Body=""&lt;p&gt;You are calling your method &lt;code&gt;Scan&lt;/code&gt; of type &lt;code&gt;*custMap&lt;/code&gt; on a unitialised map. Initialize &lt;code&gt;d.vals&lt;/code&gt; either like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;d.vals = custMap{}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;d.vals = make(custMap)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Other answers already provide an explanation.&lt;/p&gt;&#xA;"" OwnerUserId=""7824574"" LastActivityDate=""2017-06-02T07:55:20.997"" CommentCount=""0"" />
",44323647
44319906,"44319906      <row Id=""44319906"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44323999"" PostTypeId=""2"" ParentId=""44319906"" CreationDate=""2017-06-02T08:14:56.647"" Score=""2"" Body=""&lt;p&gt;&lt;code&gt;interface{}&lt;/code&gt; is stored as a two word pair, one word describing the underlying type information and one word describing the data within that interface:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/lrSQz.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/lrSQz.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://research.swtch.com/interfaces&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://research.swtch.com/interfaces&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here we see the first word stores the type information and the second the data within &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Struct types are stored differently, they do not have this pairing. Their fields of a struct are laid out next to one another in memory.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/MbeRi.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/MbeRi.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://research.swtch.com/godata&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://research.swtch.com/godata&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You cannot convert one to the other because they do not have the same representation in memory. &lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;It is necessary to copy the elements individually to the destination&#xA;  slice.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/doc/faq#convert_slice_of_interface&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/doc/faq#convert_slice_of_interface&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To answer your last question, you could have &lt;code&gt;[]interface&lt;/code&gt; which is a slice of interfaces, where each interface is represented as above, or just &lt;code&gt;interface{}&lt;/code&gt; where the underlying type held in that interface is &lt;code&gt;[]MyStruct&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var y interface{}&#xA;y = x &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;y := make([]interface{}, len(x))&#xA;for i, v := range x {&#xA;    y[i] = v&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6376471"" LastEditorUserId=""6376471"" LastEditDate=""2017-06-02T08:20:01.623"" LastActivityDate=""2017-06-02T08:20:01.623"" CommentCount=""0"" />
",44323999
44324792,"44324792      <row Id=""44324792"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44325051"" PostTypeId=""2"" ParentId=""44324792"" CreationDate=""2017-06-02T09:11:02.437"" Score=""4"" Body=""&lt;p&gt;This is an implementation detail.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this line&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Println(&quot;In two days.&quot;, today + 2)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;today&lt;/code&gt; is of type &lt;a href=&quot;https://golang.org/pkg/time/#Weekday&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;time.Weekday&lt;/code&gt;&lt;/a&gt; which has &lt;code&gt;int&lt;/code&gt; as its underlying type, &lt;code&gt;2&lt;/code&gt; is an untyped integer constant, which will be converted to &lt;code&gt;time.Weekday&lt;/code&gt; and the addition will be carried out.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The implementation of &lt;a href=&quot;https://golang.org/pkg/fmt/#Println&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;fmt.Println()&lt;/code&gt;&lt;/a&gt; will check if values passed to it implement &lt;a href=&quot;https://golang.org/pkg/fmt/#Stringer&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;fmt.Stringer&lt;/code&gt;&lt;/a&gt;, and because &lt;code&gt;time.Weekday&lt;/code&gt; does, its &lt;a href=&quot;https://golang.org/pkg/time/#Weekday.String&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;String()&lt;/code&gt;&lt;/a&gt; method will be called whose implementation is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// String returns the English name of the day (&quot;Sunday&quot;, &quot;Monday&quot;, ...).&#xA;func (d Weekday) String() string { return days[d] }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Where &lt;code&gt;days&lt;/code&gt; is an array of 7 elements:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var days = [...]string{&#xA;    &quot;Sunday&quot;,&#xA;    &quot;Monday&quot;,&#xA;    &quot;Tuesday&quot;,&#xA;    &quot;Wednesday&quot;,&#xA;    &quot;Thursday&quot;,&#xA;    &quot;Friday&quot;,&#xA;    &quot;Saturday&quot;,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There is no range check in &lt;code&gt;Weekday.String()&lt;/code&gt; because &lt;code&gt;time.Saturday + 2&lt;/code&gt; for example is not a weekday. &lt;code&gt;Weekday.String()&lt;/code&gt; only guarantees to work properly for the constants defined in the &lt;code&gt;time&lt;/code&gt; package:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Weekday int&#xA;&#xA;const (&#xA;    Sunday Weekday = iota&#xA;    Monday&#xA;    Tuesday&#xA;    Wednesday&#xA;    Thursday&#xA;    Friday&#xA;    Saturday&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you want to make it work, you have to use the remainder after dividing by 7, like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;switch day {&#xA;case (today + 0) % 7:&#xA;    fmt.Println(&quot;Today.&quot;)&#xA;case (today + 1) % 7:&#xA;    fmt.Println(&quot;Tomorrow.&quot;, (today+1)%7)&#xA;case (today + 2) % 7:&#xA;    fmt.Println(&quot;In two days.&quot;, (today+2)%7)&#xA;default:&#xA;    fmt.Println(&quot;Too far away.&quot;, (today+2)%7)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-02T14:27:19.653"" LastActivityDate=""2017-06-02T14:27:19.653"" CommentCount=""4"" />
",44325051
44325232,"44325232      <row Id=""44325232"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44326377"" PostTypeId=""2"" ParentId=""44325232"" CreationDate=""2017-06-02T10:11:50.853"" Score=""3"" Body=""&lt;p&gt;It's really easy to test it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func Test1(t *testing.T) {&#xA;    fmt.Println(&quot;Test1 start&quot;)&#xA;    time.Sleep(time.Second * 2)&#xA;    fmt.Println(&quot;Test1 end&quot;)&#xA;}&#xA;&#xA;func Test2(t *testing.T) {&#xA;    fmt.Println(&quot;Test2 start&quot;)&#xA;    time.Sleep(time.Second * 2)&#xA;    fmt.Println(&quot;Test2 end&quot;)&#xA;}&#xA;&#xA;func Test3(t *testing.T) {&#xA;    fmt.Println(&quot;Test3 start&quot;)&#xA;    time.Sleep(time.Second * 2)&#xA;    fmt.Println(&quot;Test3 end&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Running it with &lt;code&gt;go test&lt;/code&gt;, the output shows it's sequential:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Test1 start&#xA;Test1 end&#xA;Test2 start&#xA;Test2 end&#xA;Test3 start&#xA;Test3 end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So normal tests are executed one after the other, sequentially, but don't forget that order is not defined: &lt;a href=&quot;https://stackoverflow.com/questions/31201858/how-to-run-golang-tests-sequentially/31204016#31204016&quot;&gt;How to run golang tests sequentially?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that a test function can mark itself eligible for parallel execution, paralell with other tests that also do the same using the &lt;a href=&quot;https://golang.org/pkg/testing/#T.Parallel&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;T.Parallel()&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Parallel signals that this test is to be run in parallel with (and only with) other parallel tests.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So if we modify the above testing code to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func Test1(t *testing.T) {&#xA;    t.Parallel()&#xA;    fmt.Println(&quot;Test1 start&quot;)&#xA;    time.Sleep(time.Second * 2)&#xA;    fmt.Println(&quot;Test1 end&quot;)&#xA;}&#xA;&#xA;func Test2(t *testing.T) {&#xA;    t.Parallel()&#xA;    fmt.Println(&quot;Test2 start&quot;)&#xA;    time.Sleep(time.Second * 2)&#xA;    fmt.Println(&quot;Test2 end&quot;)&#xA;}&#xA;&#xA;func Test3(t *testing.T) {&#xA;    fmt.Println(&quot;Test3 start&quot;)&#xA;    time.Sleep(time.Second * 2)&#xA;    fmt.Println(&quot;Test3 end&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Running it again with &lt;code&gt;go test&lt;/code&gt;, the output is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Test3 start&#xA;Test3 end&#xA;Test1 start&#xA;Test2 start&#xA;Test2 end&#xA;Test1 end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What does this prove? The order of tests is not defined, &lt;code&gt;Test3&lt;/code&gt; was executed first this time. And then &lt;code&gt;Test1&lt;/code&gt; and &lt;code&gt;Test2&lt;/code&gt; were run &lt;em&gt;parallel&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are some testing flags that control parallel execution. For example the &lt;code&gt;-parallel&lt;/code&gt; flag specifies how many of these may run parallel. If you execute it with &lt;code&gt;go test -parallel=1&lt;/code&gt;, the output will again become sequential, but the order will be &lt;code&gt;Test3&lt;/code&gt;, &lt;code&gt;Test1&lt;/code&gt;, &lt;code&gt;Test2&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that &lt;a href=&quot;https://golang.org/doc/go1.7#testing&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go 1.7 introduced subtests and subbenchmarks&lt;/a&gt;. You can read more about this in blog post &lt;a href=&quot;https://blog.golang.org/subtests&quot; rel=&quot;nofollow noreferrer&quot;&gt;Using Subtests and Sub-benchmarks&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;In Go 1.7, the &lt;code&gt;testing&lt;/code&gt; package introduces a Run method on the &lt;a href=&quot;https://golang.org/pkg/testing/#T.Run&quot; rel=&quot;nofollow noreferrer&quot;&gt;T&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/testing/#B.Run&quot; rel=&quot;nofollow noreferrer&quot;&gt;B&lt;/a&gt; types that allows for the creation of subtests and sub-benchmarks. The introduction of subtests and sub-benchmarks enables better handling of failures, fine-grained control of which tests to run from the command line, control of parallelism, and often results in simpler and more maintainable code.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Subtests and subbenchmarks may run parallel, and there are a number of flags that may control their execution, e.g. &lt;code&gt;-parallel&lt;/code&gt;, &lt;code&gt;-p&lt;/code&gt;, &lt;code&gt;-cpu&lt;/code&gt;. Run &lt;code&gt;go help testflag&lt;/code&gt; to see the complete list of testing flags.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-02T11:39:57.023"" LastActivityDate=""2017-06-02T11:39:57.023"" CommentCount=""0"" />
",44326377
44301262,"44301262      <row Id=""44301262"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44326496"" PostTypeId=""2"" ParentId=""44301262"" CreationDate=""2017-06-02T10:17:57.693"" Score=""1"" Body=""&lt;p&gt;If you actually want to convert a file content to a &lt;code&gt;[]string&lt;/code&gt;, you can use &lt;code&gt;bufio.Scanner&lt;/code&gt; which is cleaner (IMO) and more efficient than the code you posted:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func readFile(filename string) ([]string, error) {&#xA;    file, err := os.Open(filename)&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }   &#xA;    defer file.Close()&#xA;&#xA;    scanner := bufio.NewScanner(file)&#xA;&#xA;    var data []string&#xA;&#xA;    for scanner.Scan() {&#xA;        line := scanner.Text()&#xA;        data = append(data, line)&#xA;    }   &#xA;    if err = scanner.Err(); err != nil {&#xA;        return nil, err&#xA;    }   &#xA;&#xA;    return data, nil &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here's a benchmark* comparing the original function (&lt;code&gt;readFile1&lt;/code&gt;) and my function (&lt;code&gt;readFile2&lt;/code&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;BenchmarkReadFile1-8         300       4632189 ns/op     3035552 B/op      10570 allocs/op&#xA;BenchmarkReadFile2-8        1000       1695820 ns/op     2169655 B/op      10587 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;*the benchmark read a sample file of 1.2 MiB and ~10K lines&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The new code runs in 36% of the time and 71% of the memory used by the original function.&lt;/p&gt;&#xA;"" OwnerUserId=""38333"" LastActivityDate=""2017-06-02T10:17:57.693"" CommentCount=""0"" />
",44326496
44330146,"44330146      <row Id=""44330146"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44330549"" PostTypeId=""2"" ParentId=""44330146"" CreationDate=""2017-06-02T13:49:02.650"" Score=""0"" Body=""&lt;p&gt;On top of @Adrian's suggestions, if you have to ensure one way communication on a channel, you can always use an anonymous function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for a:=0; a &amp;lt;=2; a++{&#xA;  go func f(ch &amp;lt;-string) {&#xA;    SomeFunc(ch)&#xA;  }(slcChanStruct[a].chMessages)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that you'll have to pass the channel to &lt;code&gt;SomeFunc&lt;/code&gt; instead of the struct.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you still want to perform both way communication on your channel, you can re assign the channel to a one directional type:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type ChanStruct struct {&#xA;    chMessages chan string&#xA;}&#xA;&#xA;type ChanStructRecv struct {&#xA;    chMessages &amp;lt;-chan string&#xA;}&#xA;&#xA;// Update SomeFunc type:&#xA;&#xA;func SomeFunc(s ChanStructRecv) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Finally, the loop can be modified similarly:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for a:=0; a &amp;lt;=2; a++{&#xA;  go func f(s ChanStruct) {&#xA;    var sr ChanStructRecv&#xA;    sr.chMessages = s.chMessages&#xA;    SomeFunc(sr)&#xA;  }(slcChanStruct[a])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""3129778"" LastEditorUserId=""3129778"" LastEditDate=""2017-06-02T13:58:22.977"" LastActivityDate=""2017-06-02T13:58:22.977"" CommentCount=""0"" />
",44330549
44324800,"44324800      <row Id=""44324800"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44331242"" PostTypeId=""2"" ParentId=""44324800"" CreationDate=""2017-06-02T14:22:54.427"" Score=""6"" Body=""&lt;p&gt;You just need to teach your &lt;code&gt;MyT&lt;/code&gt; type that you want it to consider equality in terms of its composite fields:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;julia&amp;gt; immutable MyT&#xA;           A::String&#xA;           B::Int64&#xA;       end&#xA;       import Base: ==, hash&#xA;       ==(x::MyT, y::MyT) = x.A == y.A &amp;amp;&amp;amp; x.B == y.B&#xA;       hash(x::MyT, h::UInt) = hash(x.A, hash(x.B, hash(0x7d6979235cb005d0, h)))&#xA;&#xA;julia&amp;gt; a = Dict(MyT(&quot;Tom&quot;,191)=&amp;gt;1,MyT(&quot;Bob&quot;,20)=&amp;gt;1,MyT(&quot;Jo&quot;,315)=&amp;gt;1,MyT(&quot;Luc&quot;,493)=&amp;gt;1)&#xA;Dict{MyT,Int64} with 4 entries:&#xA;  MyT(&quot;Jo&quot;, 315)  =&amp;gt; 1&#xA;  MyT(&quot;Luc&quot;, 493) =&amp;gt; 1&#xA;  MyT(&quot;Tom&quot;, 191) =&amp;gt; 1&#xA;  MyT(&quot;Bob&quot;, 20)  =&amp;gt; 1&#xA;&#xA;julia&amp;gt; haskey(a, MyT(&quot;Tom&quot;,191))&#xA;true&#xA;&#xA;julia&amp;gt; in((MyT(&quot;Tom&quot;,191) =&amp;gt; 1), a)&#xA;true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""176071"" LastActivityDate=""2017-06-02T14:22:54.427"" CommentCount=""2"" />
",44331242
44331078,"44331078      <row Id=""44331078"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44331759"" PostTypeId=""2"" ParentId=""44331078"" CreationDate=""2017-06-02T14:50:25.097"" Score=""1"" Body=""&lt;p&gt;As @JimB noted, converting a relative path to an absolute path is not only OS-specific, it's context-specific: the same relative path on different systems (regardless of OS) can yield different paths; in fact, even on &lt;em&gt;the same system&lt;/em&gt;, converting relative to absolute from different working directories can yield different paths. Again as @JimB noted, you can use &lt;a href=&quot;https://golang.org/pkg/path/#Clean&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;path.Clean&lt;/code&gt;&lt;/a&gt; to remove any unnecessary or reduntant relative path components (e.g. turn &lt;code&gt;/dir/../otherDir/./subDir/&lt;/code&gt; into &lt;code&gt;/otherDir/subDir/&lt;/code&gt;), but that's the closest you'll get to anything not context-sensitive.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you just want to convert the &lt;em&gt;representation&lt;/em&gt;, there's &lt;a href=&quot;https://golang.org/pkg/path/filepath/#ToSlash&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;filepath.ToSlash&lt;/code&gt;&lt;/a&gt; which will replace all platform-specific separators with forward slashes. If you're trying to re-use a path across systems, you could run &lt;code&gt;ToSlash&lt;/code&gt; on the input, store the &quot;generic&quot; path using forward slashes, then on the target system use &lt;a href=&quot;https://golang.org/pkg/path/filepath/#FromSlash&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;filepath.FromSlash&lt;/code&gt;&lt;/a&gt; to convert it back to the platform-specific path separator.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-02T14:50:25.097"" CommentCount=""1"" />
",44331759
44333467,"44333467      <row Id=""44333467"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44334620"" PostTypeId=""2"" ParentId=""44333467"" CreationDate=""2017-06-02T17:41:15.573"" Score=""2"" Body=""&lt;p&gt;You can use the &lt;a href=&quot;https://golang.org/pkg/text/template/#hdr-Functions&quot; rel=&quot;nofollow noreferrer&quot;&gt;index&lt;/a&gt; function to access a map.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{{ range .Database }} &#xA;    {{ index $.Status . }}&#xA;{{ end }}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://play.golang.org/p/cJebtPvRMX&quot; rel=&quot;nofollow noreferrer&quot;&gt;play&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""8023512"" LastActivityDate=""2017-06-02T17:41:15.573"" CommentCount=""0"" />
",44334620
44338582,"44338582      <row Id=""44338582"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44338853"" PostTypeId=""2"" ParentId=""44338582"" CreationDate=""2017-06-02T23:49:31.090"" Score=""2"" Body=""&lt;p&gt;You just need to parse the time using the input layout and then print it using the output layout. The layout always specifies how the reference time (Mon Jan 2 15:04:05 MST 2006) would look in the given format. I think this is what you want:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    value := &quot;April 20, 1996&quot;&#xA;    layout := &quot;January 2, 2006&quot;&#xA;    t, _ := time.Parse(layout, value)&#xA;    fmt.Println(t)&#xA;    fmt.Println(&quot;time:&quot;, t.Format(&quot;2006-01-02&quot;))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://golang.org/pkg/time/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/time/&lt;/a&gt; for more information.&lt;/p&gt;&#xA;"" OwnerUserId=""3068258"" LastActivityDate=""2017-06-02T23:49:31.090"" CommentCount=""1"" />
",44338853
44196113,"44196113      <row Id=""44196113"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44342358"" PostTypeId=""2"" ParentId=""44196113"" CreationDate=""2017-06-03T09:20:46.323"" Score=""1"" Body=""&lt;p&gt;Thanks to @alex-blex's answer which gave me the start. But this is what finally worked for me:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;session, err := mgo.Dial(&quot;rs1.example.net?connect=direct&quot;)&#xA;if err != nil {&#xA;    panic(err)&#xA;}&#xA;defer session.Close()&#xA;session.SetMode(mgo.Monotonic, true)&#xA;&#xA;config := bson.M{&#xA;    &quot;_id&quot;: &quot;my_replica_set&quot;,&#xA;    &quot;members&quot;: []bson.M{&#xA;        {&quot;_id&quot;: 0, &quot;host&quot;: &quot;rs1.example.net:27017&quot;},&#xA;        {&quot;_id&quot;: 1, &quot;host&quot;: &quot;rs2.example.net:27017&quot;, &quot;priority&quot;: 2},&#xA;        {&quot;_id&quot;: 2, &quot;host&quot;: &quot;rs3.example.net&quot;, &quot;arbiterOnly&quot;: true},&#xA;    },&#xA;}&#xA;result := bson.M{}&#xA;if err := session.Run(bson.M{&quot;replSetInitiate&quot;: config}, &amp;amp;result); err != nil {&#xA;    panic(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Notice the following:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;?connect=direct&lt;/code&gt; in the connection string. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;If not specified, the connection will timeout, probably because the replica set has not been initialized yet.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;session.SetMode(mgo.Monotonic, true)&lt;/code&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Session mode should be &lt;code&gt;monotonic&lt;/code&gt; as the default session used by mgo is &lt;code&gt;primary&lt;/code&gt; which performs all operations on primary. Since the replica set has not been initialized yet, there wont be a primary and the operation (in this case, &lt;code&gt;replSetInitiate&lt;/code&gt;) will just timeout&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;&quot;_id&quot;: &quot;my_replica_set&quot;&lt;/code&gt; in the config&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For this to work, the mongo servers will have to be started with the replica set name &lt;code&gt;my_replica_set&lt;/code&gt;. One way of doing that would be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mongod --replSet my_replica_set&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;As per &lt;a href=&quot;https://godoc.org/gopkg.in/mgo.v2#Session.Run&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mgo docs&lt;/a&gt; use session.Run() for commands on the &quot;admin&quot; database&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""1351876"" LastActivityDate=""2017-06-03T09:20:46.323"" CommentCount=""0"" />
",44342358
44341662,"44341662      <row Id=""44341662"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44342940"" PostTypeId=""2"" ParentId=""44341662"" CreationDate=""2017-06-03T10:31:28.067"" Score=""3"" Body=""&lt;p&gt;You're using a capture variable &lt;code&gt;fn&lt;/code&gt; across &lt;code&gt;goroutine&lt;/code&gt;, in which the variable will be overridden during iteration. What is seen by all &lt;code&gt;goroutines&lt;/code&gt; is the latest job in the &lt;code&gt;funcs&lt;/code&gt;. Change your code in &lt;code&gt;Pipe&lt;/code&gt; function to the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for _, fn := range funcs {&#xA;    out = make(chan interface{})&#xA;    wg.Add(1)&#xA;    go func(f job, inx, outx chan interface{}) {&#xA;        f(inx, outx)&#xA;        close(outx)&#xA;        wg.Done()&#xA;    }(fn, in, out)&#xA;&#xA;    in = out&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It's one of &lt;a href=&quot;https://github.com/golang/go/wiki/CommonMistakes&quot; rel=&quot;nofollow noreferrer&quot;&gt;common mistake&lt;/a&gt; in golang. &lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-06-03T10:31:28.067"" CommentCount=""1"" />
",44342940
44290770,"44290770      <row Id=""44290770"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44343600"" PostTypeId=""2"" ParentId=""44290770"" CreationDate=""2017-06-03T11:50:17.417"" Score=""0"" Body=""&lt;p&gt;As the connection is instantly closed after sending the message the close handshake is not completed. One way to fix it is by adding a &lt;code&gt;sleep&lt;/code&gt; call. Though it would be better to implement the close handshake correctly.&lt;/p&gt;&#xA;"" OwnerUserId=""562465"" LastEditorUserId=""562465"" LastEditDate=""2017-06-03T17:01:05.533"" LastActivityDate=""2017-06-03T17:01:05.533"" CommentCount=""0"" />
",44343600
44340192,"44340192      <row Id=""44340192"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44345955"" PostTypeId=""2"" ParentId=""44340192"" CreationDate=""2017-06-03T16:09:41.163"" Score=""3"" Body=""&lt;p&gt;When you upgrade HTTP connection to a WebSocket connection using Gorilla, it hijacks that connection and net/http server stops serving it. This means, that you can't rely on a net/http events from that moment.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Check this: &lt;a href=&quot;https://github.com/gorilla/websocket/issues/123&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/gorilla/websocket/issues/123&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, what you can do here is to start new goroutine for every new WebSocket connection, which will read data from this connection and write a message to a &lt;code&gt;quit&lt;/code&gt; channel on a failure.&lt;/p&gt;&#xA;"" OwnerUserId=""8099995"" LastActivityDate=""2017-06-03T16:09:41.163"" CommentCount=""2"" />
",44345955
44346123,"44346123      <row Id=""44346123"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44348099"" PostTypeId=""2"" ParentId=""44346123"" CreationDate=""2017-06-03T20:03:39.027"" Score=""1"" Body=""&lt;p&gt;You would generally define different types that implement your &lt;code&gt;Solver&lt;/code&gt; interface and then define the &lt;code&gt;Solve&lt;/code&gt; function on those types.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (s *BackTrackSolver) Solve() { … }&#xA;func (s *PermutateSolver) Solve() { … }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Because the types have distinct names there is no name clash. &#xA;You can try it out online in &lt;a href=&quot;https://play.golang.org/p/39Mgo9rkSh&quot; rel=&quot;nofollow noreferrer&quot;&gt;the go playground&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;About your package convention question: I think a good approach is to start with all code in a single package and only export the types and functions you actually want to expose to your callers. Then later when you your &lt;a href=&quot;https://en.wikipedia.org/wiki/Cohesion_(computer_science)&quot; rel=&quot;nofollow noreferrer&quot;&gt;code cohesion&lt;/a&gt; drops you should start splitting out code into multiple packages.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also have a look at the &quot;Organizing Go code&quot; article from the &lt;a href=&quot;https://blog.golang.org/organizing-go-code&quot; rel=&quot;nofollow noreferrer&quot;&gt;go blog&lt;/a&gt;, subsection &quot;What to put into a package&quot; (short read).&lt;/p&gt;&#xA;"" OwnerUserId=""645974"" LastActivityDate=""2017-06-03T20:03:39.027"" CommentCount=""0"" />
",44348099
44347100,"44347100      <row Id=""44347100"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44349462"" PostTypeId=""2"" ParentId=""44347100"" CreationDate=""2017-06-03T23:33:34.663"" Score=""2"" Body=""&lt;p&gt;Use gin's &lt;a href=&quot;https://godoc.org/github.com/gin-gonic/gin#Context.File&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Context.File&lt;/code&gt;&lt;/a&gt; to serve file content. This method internally calls &lt;a href=&quot;https://golang.org/pkg/net/http/#ServeFile&quot; rel=&quot;nofollow noreferrer&quot;&gt;http.ServeFile&lt;/a&gt; builtin function. The code snippets will be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import &quot;path/filepath&quot;&#xA;&#xA;&#xA;// ...&#xA;router := gin.Default()&#xA;// ... &#xA;&#xA;router.GET(&quot;/book/cover/:filename&quot;, func(c *gin.Context) {&#xA;    rootDir := &quot;/uploads/img/&quot;&#xA;    name := c.Param(&quot;filename&quot;)&#xA;    filePath, err :=  filepath.Abs(rootDir + name)&#xA;    if err != nil {&#xA;        c.AbortWithStatus(404)&#xA;    }&#xA;&#xA;    //Only allow access to file/directory under rootDir&#xA;    //The following code is for ilustration since HasPrefix is deprecated.&#xA;    //Replace with correct one when https://github.com/golang/dep/issues/296 fixed&#xA;    if !filepath.HasPrefix(filePath, rootDir) {&#xA;        c.AbortWithStatus(404)&#xA;    }&#xA;&#xA;    c.File(filePath)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As pointed by zerkms, the path name &lt;strong&gt;must be sanitized&lt;/strong&gt; before passing it &lt;code&gt;Context.File&lt;/code&gt;. Simple sanitizer is added in the snippet. Please adapt to your needs. &lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-06-04T03:34:03.940"" LastActivityDate=""2017-06-04T03:34:03.940"" CommentCount=""2"" />
",44349462
44347093,"44347093      <row Id=""44347093"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44350662"" PostTypeId=""2"" ParentId=""44347093"" CreationDate=""2017-06-04T04:02:07.133"" Score=""2"" Body=""&lt;p&gt;Go doesn't support this directly like C, partially because you should be reading a line and using something like &lt;code&gt;strings.FieldsFunc&lt;/code&gt;. But that's naturally a very simplistic view. For data formatted in a homogeneous manner, you could use &lt;code&gt;bufio.Scanner&lt;/code&gt; to essentially do the same thing with any &lt;code&gt;io.Reader&lt;/code&gt;. However, if you had to deal with something like this format:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Name; email@domain&#xA;//&#xA;// Anything other than ';' is valid for name.&#xA;// Anything before '@' is valid for email.&#xA;// For domain, only A-Z, a-z, and 0-9, as well as '-' and '.' are valid.&#xA;sscanf(&quot;%[^;]; %[^@]@%[-.&quot; ALNUM &quot;]&quot;, name, email, domain);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then you'd run into trouble because you're now dealing with a particular state. In such a case, you might prefer working with &lt;code&gt;bufio.Reader&lt;/code&gt; to manually parse things. There's also the option of implementing &lt;code&gt;fmt.Scanner&lt;/code&gt;. Here's some sample code to give you an idea of how easy it can be to implement &lt;code&gt;fmt.Scanner&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Scanset acts as a filter when scanning strings.&#xA;// The zero value of a Scanset will discard all non-whitespace characters.&#xA;type Scanset struct {&#xA;    ps        *string&#xA;    delimFunc func(rune) bool&#xA;}&#xA;&#xA;// Create a new Scanset to filter delimiter characters.&#xA;// Once f(delimChar) returns false, scanning will end.&#xA;// If s is nil, characters for which f(delimChar) returns true are discarded.&#xA;// If f is nil, !unicode.IsSpace(delimChar) is used&#xA;// (i.e. read until unicode.IsSpace(delimChar) returns true).&#xA;func NewScanset(s *string, f func(r rune) bool) *Scanset {&#xA;    return &amp;amp;Scanset{&#xA;        ps:        s,&#xA;        delimFunc: f,&#xA;    }&#xA;}&#xA;&#xA;// Scan implements the fmt.Scanner interface for the Scanset type.&#xA;func (s *Scanset) Scan(state fmt.ScanState, verb rune) error {&#xA;    if verb != 'v' &amp;amp;&amp;amp; verb != 's' {&#xA;        return errors.New(&quot;scansets only work with %v and %s verbs&quot;)&#xA;    }&#xA;    tok, err := state.Token(false, s.delimFunc)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;    if s.ps != nil {&#xA;        *s.ps = string(tok)&#xA;    }&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/Y2vLSOk7ob&quot; rel=&quot;nofollow noreferrer&quot;&gt;Playground example&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's not C's scansets, but it's close enough. As mentioned, you should be validating your data anyway, even with formatted input, because formatting lacks context (and adding it while dealing with formatting violates the KISS principle and worsens the readability of your code).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, a short regex like &lt;code&gt;[A-Za-z]([A-Za-z0-9-]?.)[A-Za-z0-9]&lt;/code&gt; isn't enough to validate a domain name, and a simplistic scanset would simply be the equivalent of &lt;code&gt;[A-Za-z0-9.-]&lt;/code&gt;. The scanset, however, would be enough to scan the string from a file or whatever other reader you might be using, but it wouldn't be enough to validate the string alone. For that, a regex or even a proper library would be a much better option.&lt;/p&gt;&#xA;"" OwnerUserId=""539810"" LastActivityDate=""2017-06-04T04:02:07.133"" CommentCount=""0"" />
",44350662
44351159,"44351159      <row Id=""44351159"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44351176"" PostTypeId=""2"" ParentId=""44351159"" CreationDate=""2017-06-04T05:54:28.500"" Score=""4"" Body=""&lt;p&gt;It usually not good practice to use pointers to channels.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The size of a channel value is equal to the size of a pointer. The size is independent of the number of values in the channel. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You do not reduce copying by using a pointer to a channel because copying the pointer has the same cost as copying the channel.&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-06-04T06:03:26.200"" LastActivityDate=""2017-06-04T06:03:26.200"" CommentCount=""0"" />
",44351176
44349115,"44349115      <row Id=""44349115"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44353086"" PostTypeId=""2"" ParentId=""44349115"" CreationDate=""2017-06-04T10:32:30.367"" Score=""2"" Body=""&lt;p&gt;Let's say you want to fetch a set of &lt;a href=&quot;https://api.github.com/users?since=135&quot; rel=&quot;nofollow noreferrer&quot;&gt;github users&lt;/a&gt; and want to print their nicknames (&lt;code&gt;Login&lt;/code&gt; field in &lt;code&gt;api.github.com&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Given a User array example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[{&#xA;  &quot;login&quot;: &quot;simonjefford&quot;,&#xA;  &quot;id&quot;: 136,&#xA;  &quot;avatar_url&quot;: &quot;https://avatars1.githubusercontent.com/u/136?v=3&quot;,&#xA;  &quot;gravatar_id&quot;: &quot;&quot;,&#xA;  &quot;url&quot;: &quot;https://api.github.com/users/simonjefford&quot;,&#xA;  &quot;html_url&quot;: &quot;https://github.com/simonjefford&quot;,&#xA;  &quot;followers_url&quot;: &quot;https://api.github.com/users/simonjefford/followers&quot;,&#xA;  &quot;following_url&quot;: &quot;https://api.github.com/users/simonjefford/following{/other_user}&quot;,&#xA;  &quot;gists_url&quot;: &quot;https://api.github.com/users/simonjefford/gists{/gist_id}&quot;,&#xA;  &quot;starred_url&quot;: &quot;https://api.github.com/users/simonjefford/starred{/owner}{/repo}&quot;,&#xA;  &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/simonjefford/subscriptions&quot;,&#xA;  &quot;organizations_url&quot;: &quot;https://api.github.com/users/simonjefford/orgs&quot;,&#xA;  &quot;repos_url&quot;: &quot;https://api.github.com/users/simonjefford/repos&quot;,&#xA;  &quot;events_url&quot;: &quot;https://api.github.com/users/simonjefford/events{/privacy}&quot;,&#xA;  &quot;received_events_url&quot;: &quot;https://api.github.com/users/simonjefford/received_events&quot;,&#xA;  &quot;type&quot;: &quot;User&quot;,&#xA;  &quot;site_admin&quot;: false&#xA;}]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You need a proper struct to handle it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Users []struct {&#xA;  Login string `json:&quot;login&quot;`&#xA;  ID int `json:&quot;id&quot;`&#xA;  AvatarURL string `json:&quot;avatar_url&quot;`&#xA;  GravatarID string `json:&quot;gravatar_id&quot;`&#xA;  URL string `json:&quot;url&quot;`&#xA;  HTMLURL string `json:&quot;html_url&quot;`&#xA;  FollowersURL string `json:&quot;followers_url&quot;`&#xA;  FollowingURL string `json:&quot;following_url&quot;`&#xA;  GistsURL string `json:&quot;gists_url&quot;`&#xA;  StarredURL string `json:&quot;starred_url&quot;`&#xA;  SubscriptionsURL string `json:&quot;subscriptions_url&quot;`&#xA;  OrganizationsURL string `json:&quot;organizations_url&quot;`&#xA;  ReposURL string `json:&quot;repos_url&quot;`&#xA;  EventsURL string `json:&quot;events_url&quot;`&#xA;  ReceivedEventsURL string `json:&quot;received_events_url&quot;`&#xA;  Type string `json:&quot;type&quot;`&#xA;  SiteAdmin bool `json:&quot;site_admin&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I suggest you to use &lt;a href=&quot;https://mholt.github.io/json-to-go/&quot; rel=&quot;nofollow noreferrer&quot;&gt;json-to-go&lt;/a&gt; to have a nice a clean struct given a json.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then you can do the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;  &quot;fmt&quot;&#xA;  &quot;encoding/json&quot;&#xA;  &quot;net/http&quot;&#xA;  &quot;log&quot;&#xA;  &quot;io/ioutil&quot;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;  response, err := http.Get(&quot;https://api.github.com/users?since=135&quot;)&#xA;  if err != nil {&#xA;     log.Fatal(err)&#xA;  } else {&#xA;&#xA;    defer response.Body.Close()&#xA;    users := UnmarshalUsers(response)&#xA;    for _, u := range users {&#xA;        //Print each user's Login nickname&#xA;        fmt.Println(u.Login)&#xA;    }&#xA;&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Where &lt;code&gt;UnmarshalUsers&lt;/code&gt; is&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func UnmarshalUsers(r *http.Response) Users {&#xA;    body, err := ioutil.ReadAll(r.Body)&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;    var users Users&#xA;    err = json.Unmarshal(body, &amp;amp;users)&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    return users&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4684539"" LastActivityDate=""2017-06-04T10:32:30.367"" CommentCount=""1"" />
",44353086
44359812,"44359812      <row Id=""44359812"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44359942"" PostTypeId=""2"" ParentId=""44359812"" CreationDate=""2017-06-04T23:49:38.203"" Score=""4"" Body=""&lt;p&gt;String literals are not &lt;a href=&quot;https://golang.org/ref/spec#Address_operators&quot; rel=&quot;nofollow noreferrer&quot;&gt;addressable&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Take the address of variable containing the empty string:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;s := &quot;&quot;&#xA;t.value = &amp;amp;s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or use new:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t.value = new(string)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-06-04T23:57:15.823"" LastActivityDate=""2017-06-04T23:57:15.823"" CommentCount=""0"" />
",44359942
44359916,"44359916      <row Id=""44359916"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44359968"" PostTypeId=""2"" ParentId=""44359916"" CreationDate=""2017-06-04T23:55:17.920"" Score=""5"" Body=""&lt;p&gt;You need to allocate memory for the &lt;code&gt;Student&lt;/code&gt; &lt;code&gt;struct&lt;/code&gt;. For example,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;type Student struct {&#xA;    Name string&#xA;}&#xA;&#xA;func main() {&#xA;    var newStudent *Student&#xA;&#xA;    newStudent = new(Student)&#xA;    newStudent.Name = &quot;John&quot;&#xA;    fmt.Println(*newStudent)&#xA;&#xA;    newStudent = &amp;amp;Student{}&#xA;    newStudent.Name = &quot;Jane&quot;&#xA;    fmt.Println(*newStudent)&#xA;&#xA;    newStudent = &amp;amp;Student{Name: &quot;Jill&quot;}&#xA;    fmt.Println(*newStudent)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{John}&#xA;{Jane}&#xA;{Jill}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-06-05T05:41:15.527"" LastActivityDate=""2017-06-05T05:41:15.527"" CommentCount=""0"" />
",44359968
44361778,"44361778      <row Id=""44361778"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44361889"" PostTypeId=""2"" ParentId=""44361778"" CreationDate=""2017-06-05T04:55:06.127"" Score=""2"" Body=""&lt;pre&gt;&lt;code&gt;//Crypto is the currency object&#xA;type Crypto struct {&#xA;    Iso           string //this is the key (ex: BTC_BCN)&#xA;    Id            int&#xA;    Last          string&#xA;    LowestAsk     string&#xA;    HighestBid    string&#xA;    PercentChange string&#xA;    BaseVolume    string&#xA;    QuoteVolume   string&#xA;    IsFrozen      int&#xA;    High24hr      string&#xA;    Low24hr       string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You need to to export the fields by capitalising first character. On top of that, your &lt;code&gt;float64&lt;/code&gt; datas are in type: &lt;code&gt;string&lt;/code&gt;,hence either you read as string or format before assign to object  &lt;code&gt;Crypto&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As pointed by @skomp, you may use a tag to annotate the type you're receiving from json file.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Crypto struct {&#xA;    CryptoKey&#xA;    Id            int&#xA;    Last          float64 `json:&quot;last,string&quot;`&#xA;    LowestAsk     float64 `json:&quot;lowestAsk,string&quot;`&#xA;    HighestBid    float64 `json:&quot;highestBid,string&quot;`&#xA;    PercentChange float64 `json:&quot;percentChange,string&quot;`&#xA;    BaseVolume    float64 `json:&quot;baseVolume,string&quot;`&#xA;    QuoteVolume   float64 `json:&quot;quoteVolume,string&quot;`&#xA;    IsFrozen      int&#xA;    High24hr      float64 `json:&quot;high24hr,string&quot;`&#xA;    Low24hr       float64 `json:&quot;low24hr,string&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1248913"" LastEditorUserId=""1248913"" LastEditDate=""2017-06-06T00:47:01.247"" LastActivityDate=""2017-06-06T00:47:01.247"" CommentCount=""2"" />
",44361889
44363096,"44363096      <row Id=""44363096"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44364375"" PostTypeId=""2"" ParentId=""44363096"" CreationDate=""2017-06-05T08:03:21.300"" Score=""1"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;waiting indefinitely for connections to return to idle&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;refers to HTTP Handlers that have already been called as part of incoming connections. All these handlers need to be closed / returned, usually by calling &lt;a href=&quot;https://golang.org/pkg/net/http/#ResponseWriter&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;w.Write or w.WriteHeader&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""2285935"" LastActivityDate=""2017-06-05T08:03:21.300"" CommentCount=""0"" />
",44364375
44358275,"44358275      <row Id=""44358275"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44365728"" PostTypeId=""2"" ParentId=""44358275"" CreationDate=""2017-06-05T09:26:12.343"" Score=""0"" Body=""&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/users/6207052/&quot; title=&quot;@putu&quot;&gt;@putu&lt;/a&gt; pointed me to the right direction, all I had to do was tune &lt;code&gt;CFLAGS&lt;/code&gt; to include &lt;code&gt;musl&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Cleaned up &lt;code&gt;C&lt;/code&gt; comment in &lt;code&gt;lua.go&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/*&#xA;#cgo CFLAGS: -I/usr/include/luajit-2.0 -I/usr/local/musl/include/&#xA;#cgo LDFLAGS: -L/usr/local/lib -lluajit-5.1&#xA;#include &amp;lt;lua.h&amp;gt;&#xA;#include &amp;lt;stdlib.h&amp;gt;&#xA;#include &quot;golua.h&quot;&#xA;*/&#xA;import &quot;C&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Looks like everything builds just fine:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ CC=&quot;/usr/local/musl/bin/musl-gcc&quot; go build --ldflags '-linkmode external -extldflags &quot;-static&quot;' basic.go&#xA;$ file basic&#xA;basic: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped&#xA;$ ./basic &#xA;Hello World!&#xA;test2 arg: 42&#xA;from bottom: 42&#xA;hello world! from go!&#xA;hello world! from go!&#xA;hello world! from go!&#xA;Ciao [string &quot;test2(42)&quot;]:1: attempt to call global 'test2' (a nil value)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1011543"" LastActivityDate=""2017-06-05T09:26:12.343"" CommentCount=""0"" />
",44365728
44368901,"44368901      <row Id=""44368901"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44368984"" PostTypeId=""2"" ParentId=""44368901"" CreationDate=""2017-06-05T12:29:45.763"" Score=""1"" Body=""&lt;p&gt;You only read from &lt;code&gt;operationOutcomes&lt;/code&gt; up to &lt;code&gt;writeOpCount&lt;/code&gt; times, even though in &lt;code&gt;writeWorker&lt;/code&gt; each execution can result in up to 3 messages being written on that channel (none of your error cases causes the function to return, to it continues processing). Because it's unbuffered and it stops being read, at some point the workers writing to it can no longer add messages and so lock forever.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, since you only call &lt;code&gt;WriteC&lt;/code&gt; once and it does not loop, it will only ever read and process one message from the &lt;code&gt;inputs&lt;/code&gt;. If &lt;code&gt;writeOpCount&lt;/code&gt; is &gt; 1, then it will lock forever within the first loop when it tries to queue a second message.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastEditorUserId=""7426"" LastEditDate=""2017-06-05T12:32:57.820"" LastActivityDate=""2017-06-05T12:32:57.820"" CommentCount=""3"" />
",44368984
44364959,"44364959      <row Id=""44364959"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44369171"" PostTypeId=""2"" ParentId=""44364959"" CreationDate=""2017-06-05T12:41:21.200"" Score=""0"" Body=""&lt;p&gt;The problem here is that you are using &lt;code&gt;attr&lt;/code&gt; where you shouldn't.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You are treating the &lt;code&gt;XMLEntry&lt;/code&gt; and &lt;code&gt;XMLLink&lt;/code&gt; tags as attributes.&lt;/p&gt;&#xA;"" OwnerUserId=""745235"" LastActivityDate=""2017-06-05T12:41:21.200"" CommentCount=""0"" />
",44369171
44371865,"44371865      <row Id=""44371865"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44372148"" PostTypeId=""2"" ParentId=""44371865"" CreationDate=""2017-06-05T15:16:35.913"" Score=""1"" Body=""&lt;p&gt;Posts is an array of Post struct but you defined Post as array it is your first mistake, also Unmarshal doesn't returns result it returns only error and fills given parameter.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;net/http&quot;&#xA;    &quot;log&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;io/ioutil&quot;&#xA;    &quot;encoding/json&quot;&#xA;)&#xA;&#xA;type Post struct {&#xA;        UserId int `json:&quot;userId&quot;`&#xA;        ID int `json:&quot;id&quot;`&#xA;        Title string `json:&quot;title&quot;`&#xA;        Body string `json:&quot;body&quot;`&#xA;}&#xA;&#xA;type Posts []Post&#xA;&#xA;&#xA;func main (){&#xA;    resp, err := http.Get(&quot;https://jsonplaceholder.typicode.com/posts&quot;)&#xA;&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    content, _ := ioutil.ReadAll(resp.Body)&#xA;&#xA;    var posts Posts&#xA;&#xA;    err = json.Unmarshal(content, &amp;amp;posts)&#xA;&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;&#xA;    fmt.Println(posts[0].Body)&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2232794"" LastActivityDate=""2017-06-05T15:16:35.913"" CommentCount=""0"" />
",44372148
44334020,"44334020      <row Id=""44334020"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44372521"" PostTypeId=""2"" ParentId=""44334020"" CreationDate=""2017-06-05T15:38:12.123"" Score=""0"" Body=""&lt;p&gt;I was able to use a combination of xml parsing with &lt;a href=&quot;https://github.com/antchfx/xquery&quot; rel=&quot;nofollow noreferrer&quot;&gt;Xquery&lt;/a&gt; and json parsing with &lt;a href=&quot;https://github.com/Jeffail/gabs&quot; rel=&quot;nofollow noreferrer&quot;&gt;Gabs&lt;/a&gt; to manually construct the struct I wanted. Probably not the cleanest solution but it allowed me to customize the struct to the degree I wanted.&lt;/p&gt;&#xA;"" OwnerUserId=""6411846"" LastActivityDate=""2017-06-05T15:38:12.123"" CommentCount=""0"" />
",44372521
44371691,"44371691      <row Id=""44371691"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44372936"" PostTypeId=""2"" ParentId=""44371691"" CreationDate=""2017-06-05T16:00:37.367"" Score=""0"" Body=""&lt;p&gt;Looking at @jimt's answer on &lt;a href=&quot;https://stackoverflow.com/questions/6807590/how-to-stop-a-goroutine&quot;&gt;how to stop a goroutine&lt;/a&gt; and the helpful comments by @JimB. I figured out what I needed to do to translate my example to Go.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is a pseudo-go implementation of my example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;main() {&#xA;    numworkers := 10&#xA;    jobqueue := make(string[])&#xA;&#xA;    loop numworkers&#xA;        go checkwork(jobqueue)&#xA;&#xA;    findwork('/home/work/todo')&#xA;    //join goroutines&#xA;    close(jobqueue)&#xA;}&#xA;&#xA;checkwork(jobqueue chan) {&#xA;    for j := range jobqueue {&#xA;        dowork(j)&#xA;    }&#xA;}&#xA;&#xA;dowork(job) {&#xA;    //huray, we have work!&#xA;}&#xA;&#xA;findwork(rootPath) {&#xA;    recurse files f in rootPath&#xA;        if isdir(f) == false&#xA;            jobqueue &amp;lt;- f.path&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4135670"" LastEditorUserId=""4135670"" LastEditDate=""2017-06-05T21:34:54.677"" LastActivityDate=""2017-06-05T21:34:54.677"" CommentCount=""16"" />
",44372936
44370277,"44370277      <row Id=""44370277"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44372954"" PostTypeId=""2"" ParentId=""44370277"" CreationDate=""2017-06-05T16:01:37.447"" Score=""5"" Body=""&lt;p&gt;So you're confusing two concepts here.  A pointer to a struct and a pointer to an interface are not the same.  An interface can store either a struct directly &lt;em&gt;or&lt;/em&gt; a pointer to a struct.  In the latter case, you still just use the interface directly, &lt;em&gt;not&lt;/em&gt; a pointer to the interface.  For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Fooer interface {&#xA;    Foo()&#xA;}&#xA;&#xA;type Foo struct{}&#xA;&#xA;func (f Foo) Foo() {}&#xA;&#xA;func main() {&#xA;    var f1 Foo&#xA;    var f2 *Foo = &amp;amp;Foo{}&#xA;&#xA;    DoFoo(f1)&#xA;    DoFoo(f2)&#xA;}&#xA;&#xA;func DoFoo(f Fooer) {&#xA;    fmt.Printf(&quot;[%T] %+v\n&quot;, f, f)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/BGV9d1-IRW&quot; rel=&quot;noreferrer&quot;&gt;https://play.golang.org/p/BGV9d1-IRW&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In both cases, the &lt;code&gt;f&lt;/code&gt; variable in &lt;code&gt;DoFoo&lt;/code&gt; is just an interface, &lt;em&gt;not&lt;/em&gt; a pointer to an interface.  However, when storing &lt;code&gt;f2&lt;/code&gt;, the interface &lt;em&gt;holds&lt;/em&gt; a pointer to a &lt;code&gt;Foo&lt;/code&gt; structure.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Pointers to interfaces are almost &lt;em&gt;never&lt;/em&gt; useful.  In fact, the Go runtime was specifically changed a few versions back to no longer automatically dereference interface pointers (like it does for structure pointers), to discourage their use.  In the overwhelming majority of cases, a pointer to an interface reflects a misunderstanding of how interfaces are supposed to work.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, there is a limitation on interfaces.  If you pass a structure directly into an interface, only &lt;em&gt;value&lt;/em&gt; methods of that type (ie. &lt;code&gt;func (f Foo) Foo()&lt;/code&gt;, not &lt;code&gt;func (f *Foo) Foo()&lt;/code&gt;) can be used to fulfill the interface.  This is because you're storing a copy of the original structure in the interface, so pointer methods would have unexpected effects (ie. unable to alter the original structure).  Thus the default rule of thumb is to &lt;strong&gt;store pointers to structures in interfaces&lt;/strong&gt;, unless there's a compelling reason not to.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Specifically with your code, if you change the AddFilter function signature to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (fp *FilterMap) AddFilter(f FilterInterface) uuid.UUID&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And the GetFilterByID signature to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (fp *FilterMap) GetFilterByID(i uuid.UUID) FilterInterface&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your code will work as expected.  &lt;code&gt;fieldfilter&lt;/code&gt; is of type &lt;code&gt;*FieldFilter&lt;/code&gt;, which fullfills the &lt;code&gt;FilterInterface&lt;/code&gt; interface type, and thus &lt;code&gt;AddFilter&lt;/code&gt; will accept it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's a couple of good references for understanding how methods, types, and interfaces work and integrate with each other in Go:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://www.goinggo.net/2014/05/methods-interfaces-and-embedded-types.html&quot; rel=&quot;noreferrer&quot;&gt;https://www.goinggo.net/2014/05/methods-interfaces-and-embedded-types.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://blog.golang.org/laws-of-reflection&quot; rel=&quot;noreferrer&quot;&gt;https://blog.golang.org/laws-of-reflection&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""4551301"" LastActivityDate=""2017-06-05T16:01:37.447"" CommentCount=""1"" />
",44372954
44374829,"44374829      <row Id=""44374829"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44374878"" PostTypeId=""2"" ParentId=""44374829"" CreationDate=""2017-06-05T17:56:04.703"" Score=""2"" Body=""&lt;p&gt;&lt;code&gt;pic.Show&lt;/code&gt; takes a single argument of type &lt;code&gt;func(int, int) [][]uint8&lt;/code&gt; - you need to pass it a function. You're passing the &lt;em&gt;result of executing&lt;/em&gt; a &lt;code&gt;func(int, int) [][]uint8&lt;/code&gt;, i.e. a &lt;code&gt;[][]uint8&lt;/code&gt;. What you want would be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;pic.Show(Pic)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Passing in your function &lt;code&gt;Pic&lt;/code&gt; itself, which meets the requirements.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-05T17:56:04.703"" CommentCount=""2"" />
",44374878
44339166,"44339166      <row Id=""44339166"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44375650"" PostTypeId=""2"" ParentId=""44339166"" CreationDate=""2017-06-05T18:45:00.827"" Score=""1"" Body=""&lt;p&gt;I finally fixed it before uninstalling go. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I removed the /usr/local/go folder and reinstalled. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; collider folder in /usr/local/go/collider had my changes previously and still collidermain didn't link properly with it. Must have been a cached build intermediates?&lt;/p&gt;&#xA;"" OwnerUserId=""376742"" LastActivityDate=""2017-06-05T18:45:00.827"" CommentCount=""0"" />
",44375650
44368841,"44368841      <row Id=""44368841"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44376030"" PostTypeId=""2"" ParentId=""44368841"" CreationDate=""2017-06-05T19:09:33.767"" Score=""1"" Body=""&lt;p&gt;The function you're trying to use doesn't exist (&lt;a href=&quot;https://godoc.org/github.com/Azure/azure-sdk-for-go/arm/notificationhubs&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://godoc.org/github.com/Azure/azure-sdk-for-go/arm/notificationhubs&lt;/a&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You're probably trying to use the function &lt;a href=&quot;https://godoc.org/github.com/Azure/azure-sdk-for-go/arm/notificationhubs#GroupClient.Get&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;GroupClient.Get&lt;/code&gt;&lt;/a&gt;; if that's the case, you need to get an object of type &lt;code&gt;GroupClient&lt;/code&gt; and then call the function &lt;code&gt;Get&lt;/code&gt; on it.&lt;/p&gt;&#xA;"" OwnerUserId=""38333"" LastActivityDate=""2017-06-05T19:09:33.767"" CommentCount=""0"" />
",44376030
44376517,"44376517      <row Id=""44376517"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44377226"" PostTypeId=""2"" ParentId=""44376517"" CreationDate=""2017-06-05T20:32:54.423"" Score=""3"" Body=""&lt;p&gt;You may use a simple &lt;code&gt;\b&quot;\b&lt;/code&gt; regex that matches a double quote only when preceded &lt;em&gt;and&lt;/em&gt; followed with word boundaries:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;regexp&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    var a = &quot;\&quot;test1\&quot;,\&quot;test2\&quot;,\&quot;tes\&quot;t3\&quot;&quot;&#xA;    fmt.Println(RemoveQuotes(a))&#xA;}&#xA;&#xA;func RemoveQuotes(s string) string {&#xA;    re := regexp.MustCompile(`\b&quot;\b`)&#xA;    return re.ReplaceAllString(s, &quot;&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See the &lt;a href=&quot;https://play.golang.org/p/3WS3Bgxr-E&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go demo&lt;/a&gt; printing &lt;code&gt;&quot;test1&quot;,&quot;test2&quot;,&quot;test3&quot;&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, see the &lt;a href=&quot;https://regex101.com/r/AjJPLy/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;online regex demo&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""3832970"" LastActivityDate=""2017-06-05T20:32:54.423"" CommentCount=""1"" />
",44377226
44377492,"44377492      <row Id=""44377492"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44378550"" PostTypeId=""2"" ParentId=""44377492"" CreationDate=""2017-06-05T22:17:53.783"" Score=""2"" Body=""&lt;p&gt;&lt;a href=&quot;https://golang.org/dl/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Downloads&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;PowerPC architecture: ppc64le (64-bit PowerPC little-endian). For example, for Go 1.8.3,&lt;/p&gt;&#xA;&#xA;&lt;p&gt;go1.8.3.linux-ppc64le.tar.gz: &lt;a href=&quot;https://storage.googleapis.com/golang/go1.8.3.linux-ppc64le.tar.gz&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://storage.googleapis.com/golang/go1.8.3.linux-ppc64le.tar.gz&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-06-05T22:23:09.747"" LastActivityDate=""2017-06-05T22:23:09.747"" CommentCount=""0"" />
",44378550
44380836,"44380836      <row Id=""44380836"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44380935"" PostTypeId=""2"" ParentId=""44380836"" CreationDate=""2017-06-06T03:27:42.703"" Score=""4"" Body=""&lt;p&gt;The &lt;code&gt;Init&lt;/code&gt; method receiver &lt;code&gt;(fb foobar)&lt;/code&gt; is a value. It should be a pointer &lt;code&gt;(fb *foobar)&lt;/code&gt;. For example,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;type profile map[string]float64&#xA;&#xA;type foobar struct {&#xA;    foo profile&#xA;    bar map[string]profile&#xA;}&#xA;&#xA;func (fb *foobar) Init() {&#xA;    fb.foo = make(profile)&#xA;    fb.bar = make(map[string]profile)&#xA;}&#xA;&#xA;func (fb foobar) Set() {&#xA;    fb.bar[&quot;foo1&quot;] = make(profile)&#xA;}&#xA;&#xA;func main() {&#xA;    test := foobar{}&#xA;    test.Init()&#xA;    test.Set()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Reference:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/doc/faq#methods_on_values_or_pointers&quot; rel=&quot;nofollow noreferrer&quot;&gt;Should I define methods on values or pointers?&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-06-06T03:33:56.467"" LastActivityDate=""2017-06-06T03:33:56.467"" CommentCount=""1"" />
",44380935
44381350,"44381350      <row Id=""44381350"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44381489"" PostTypeId=""2"" ParentId=""44381350"" CreationDate=""2017-06-06T04:36:12.550"" Score=""3"" Body=""&lt;p&gt;The token is defined by the scanner's &lt;a href=&quot;https://godoc.org/bufio#SplitFunc&quot; rel=&quot;nofollow noreferrer&quot;&gt;split function&lt;/a&gt;. Scan() returns when the split function finds a token or there's an error.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The String() and Bytes() methods both return the current token. The String() method &lt;a href=&quot;https://github.com/golang/go/blob/2d86f4942868c1309051062237cf4d424d588e9c/src/bufio/scan.go#L107&quot; rel=&quot;nofollow noreferrer&quot;&gt;returns a copy of the token&lt;/a&gt;. The Bytes() method does not allocate memory and &lt;a href=&quot;https://github.com/golang/go/blob/2d86f4942868c1309051062237cf4d424d588e9c/src/bufio/scan.go#L101&quot; rel=&quot;nofollow noreferrer&quot;&gt;returns a slice&lt;/a&gt; that may use a backing array that's overwritten on a subsequent call to Scan().&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/golang/go/wiki/SliceTricks#copy&quot; rel=&quot;nofollow noreferrer&quot;&gt;Copy the slice&lt;/a&gt; returned from Bytes() to avoid this issue:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for scanner.Scan() {&#xA;    bs = append(bs, append([]byte(nil), scanner.Bytes()...))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-06-06T11:11:22.837"" LastActivityDate=""2017-06-06T11:11:22.837"" CommentCount=""0"" />
",44381489
44380031,"44380031      <row Id=""44380031"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44382863"" PostTypeId=""2"" ParentId=""44380031"" CreationDate=""2017-06-06T06:33:24.877"" Score=""2"" Body=""&lt;p&gt;Capture the symbols you need to keep and replace with &lt;code&gt;$1&lt;/code&gt; backreference to restore the captured part in the resulting string:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;regexp&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    s := &quot;^Hello, my #friend @Даниил%% 中英 字 典!!.&quot;&#xA;    re := regexp.MustCompile(`([#@])|[\p{P}\p{S}\d]`)&#xA;    s = re.ReplaceAllString(s, &quot;$1&quot;)&#xA;    fmt.Println(s)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://play.golang.org/p/LLUEtpmUby&quot; rel=&quot;nofollow noreferrer&quot;&gt;this Go demo&lt;/a&gt; printing &lt;code&gt;Hello my #friend @Даниил 中英 字 典&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that &lt;code&gt;^&lt;/code&gt; does not belong to the &lt;code&gt;\p{P}&lt;/code&gt;  category, thus, I added &lt;code&gt;\p{S}&lt;/code&gt; one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The pattern is &lt;code&gt;([#@])|[\p{P}\p{S}\d]&lt;/code&gt;, see &lt;a href=&quot;https://regex101.com/r/VQ2ZZh/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;its online demo&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;([#@])&lt;/code&gt; - Capturing group 1 (referred to with &lt;code&gt;$1&lt;/code&gt; / &lt;code&gt;${1}&lt;/code&gt; from the replacement pattern) matching a &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;@&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;|&lt;/code&gt; - or &lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;[\p{P}\p{S}\d]&lt;/code&gt; - a punctuation, symbol or digit char.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""3832970"" LastActivityDate=""2017-06-06T06:33:24.877"" CommentCount=""1"" />
",44382863
44385203,"44385203      <row Id=""44385203"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44385285"" PostTypeId=""2"" ParentId=""44385203"" CreationDate=""2017-06-06T08:41:34.633"" Score=""4"" Body=""&lt;p&gt;You have 2 JSON inputs, and you're trying to unmarshal one into the other. That doesn't make any sense.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Model your JSON input (the object) with a type (struct), and unmarshal into that. For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Obj struct {&#xA;    Num  float64  `json:&quot;num&quot;`&#xA;    Strs []string `json:&quot;strs&quot;`&#xA;}&#xA;&#xA;func main() {&#xA;    byt := []byte(`{&quot;num&quot;:6.13,&quot;strs&quot;:[&quot;a&quot;,&quot;b&quot;]}`)&#xA;&#xA;    var obj Obj&#xA;    if err := json.Unmarshal(byt, &amp;amp;obj); err != nil {&#xA;        panic(err)&#xA;    }&#xA;    fmt.Println(obj)&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/NJrNBUogGn&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{6.13 [a b]}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastActivityDate=""2017-06-06T08:41:34.633"" CommentCount=""0"" />
",44385285
44379851,"44379851      <row Id=""44379851"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44385791"" PostTypeId=""2"" ParentId=""44379851"" CreationDate=""2017-06-06T09:05:51.397"" Score=""1"" Body=""&lt;p&gt;Try using &lt;code&gt;pq.StringArray&lt;/code&gt; type for []string&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type MyStruct struct {&#xA;    Id   int&#xA;    Data pq.StringArray&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2180770"" LastActivityDate=""2017-06-06T09:05:51.397"" CommentCount=""1"" />
",44385791
44380054,"44380054      <row Id=""44380054"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44385800"" PostTypeId=""2"" ParentId=""44380054"" CreationDate=""2017-06-06T09:06:13.990"" Score=""3"" Body=""&lt;p&gt;I think, you should implement it by yourself, because &lt;code&gt;filepath.Walk&lt;/code&gt; doesn't allow you to set order.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Look at &lt;a href=&quot;https://github.com/golang/go/blob/34b455da4484dee20e8c355b50d24680224b58f2/src/path/filepath/path.go#L393&quot; rel=&quot;nofollow noreferrer&quot;&gt;Walk&lt;/a&gt; method. It calls &lt;a href=&quot;https://github.com/golang/go/blob/34b455da4484dee20e8c355b50d24680224b58f2/src/path/filepath/path.go#L350&quot; rel=&quot;nofollow noreferrer&quot;&gt;walk&lt;/a&gt;, which is relying on file names from &lt;a href=&quot;https://github.com/golang/go/blob/34b455da4484dee20e8c355b50d24680224b58f2/src/path/filepath/path.go#L408&quot; rel=&quot;nofollow noreferrer&quot;&gt;readDirNames&lt;/a&gt;. So basically, you should make your own &lt;code&gt;Walk&lt;/code&gt; method with another &lt;code&gt;readDirNames&lt;/code&gt; logic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's how you get files in the order of last-modified date (note, that I'm ignoring errors):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;os&quot;&#xA;    &quot;sort&quot;&#xA;)&#xA;&#xA;type ByModTime []os.FileInfo&#xA;&#xA;func (fis ByModTime) Len() int {&#xA;    return len(fis)&#xA;}&#xA;&#xA;func (fis ByModTime) Swap(i, j int) {&#xA;    fis[i], fis[j] = fis[j], fis[i]&#xA;}&#xA;&#xA;func (fis ByModTime) Less(i, j int) bool {&#xA;    return fis[i].ModTime().Before(fis[j].ModTime())&#xA;}&#xA;&#xA;func main() {&#xA;    f, _ := os.Open(&quot;/&quot;)&#xA;    fis, _ := f.Readdir(-1)&#xA;    f.Close()&#xA;    sort.Sort(ByModTime(fis))&#xA;&#xA;    for _, fi := range fis {&#xA;        fmt.Println(fi.Name())&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8099995"" LastActivityDate=""2017-06-06T09:06:13.990"" CommentCount=""1"" />
",44385800
44388292,"44388292      <row Id=""44388292"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44391691"" PostTypeId=""2"" ParentId=""44388292"" CreationDate=""2017-06-06T13:42:04.473"" Score=""0"" Body=""&lt;p&gt;Gorilla &lt;code&gt;mux.Router&lt;/code&gt; is supposed to be used to create mapping between a set of predefined rules (e.g. host, path, protocol, scheme, etc...) and it's handler (&lt;code&gt;http.Handler&lt;/code&gt; or &lt;code&gt;http.HandlerFunc&lt;/code&gt;). Gorilla mux can be used to replace standard server mux. If you combine &lt;code&gt;gorilla/mux&lt;/code&gt; with built in http server mux as your original question, i.e.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main () {&#xA;    http.Handle(&quot;/v1&quot;, controllers.V1Router)&#xA;    if err := http.ListenAndServe(&quot;:8000&quot;, nil); err != nil {&#xA;        log.Fatal(&quot;Serving error.&quot;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;what actually happen when a client access &lt;code&gt;/v1&lt;/code&gt; is &lt;code&gt;controllers.V1Router&lt;/code&gt; will be called with request path &lt;code&gt;/v1&lt;/code&gt; passed to &lt;code&gt;V1Router1&lt;/code&gt;. In the &lt;code&gt;controllers.V1Router&lt;/code&gt;, you defined that &lt;code&gt;/&lt;/code&gt; will be handled by &lt;code&gt;BaseHandler&lt;/code&gt;. However, since incoming request path is &lt;code&gt;/v1&lt;/code&gt;, it won't match to your routing table. If you want to define sub routing, you can do as follows (this is what I mean in first comment):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main () {&#xA;    r := mux.NewRouter()&#xA;    v1 := r.PathPrefix(&quot;/v1&quot;).Subrouter()&#xA;    controllers.RegisterHandlers(v1)&#xA;&#xA;    if err := http.ListenAndServe(&quot;:8000&quot;, r); err != nil {&#xA;        log.Fatal(&quot;Serving error.&quot;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then in the controllers (&lt;code&gt;base.controllers.go&lt;/code&gt;) define&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//Register handlers and it's sub router&#xA;func RegisterHandlers(r *mux.Router) {&#xA;    //base handler, i.e. /v1&#xA;    r.StrictSlash(true)&#xA;    r.HandleFunc(&quot;/&quot;, BaseHandler)&#xA;&#xA;    //example sub-router, i.e. /v1/example&#xA;    ex := r.PathPrefix(&quot;/example&quot;).Subrouter()&#xA;    ex.HandleFunc(&quot;/&quot;, ExampleHandler)&#xA;&#xA;    //other handlers...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-06-06T14:53:29.860"" LastActivityDate=""2017-06-06T14:53:29.860"" CommentCount=""1"" />
",44391691
44390244,"44390244      <row Id=""44390244"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44393134"" PostTypeId=""2"" ParentId=""44390244"" CreationDate=""2017-06-06T14:44:53.717"" Score=""0"" Body=""&lt;p&gt;I'm able to do this successfully,&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have constructed structs like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type AS struct {&#xA;    Description string `json:&quot;description&quot;`&#xA;    Processors []ASP `json:&quot;processors&quot;`&#xA;}&#xA;&#xA;type ASP struct {&#xA;    Attachment ASPA `json:&quot;attachment&quot;`&#xA;}&#xA;&#xA;type ASPA struct {&#xA;    Field string `json:&quot;field&quot;`&#xA;    IndexedChars int64 `json:&quot;indexed_chars&quot;`&#xA;}&#xA;&#xA;attachment := &amp;amp;AS{&#xA;    Description: &quot;Process documents&quot;,&#xA;    Processors: []ASP{&#xA;        ASP{&#xA;            Attachment: ASPA{&#xA;                Field: &quot;thedata&quot;,&#xA;                IndexedChars: -1,&#xA;            },&#xA;        },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then I sent a put request similar to this &#xA;&lt;a href=&quot;https://github.com/DaddyOh/golang-samples/blob/master/httpClient.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/DaddyOh/golang-samples/blob/master/httpClient.go&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I got the result:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{&quot;acknowledged&quot;:true}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""615120"" LastActivityDate=""2017-06-06T14:44:53.717"" CommentCount=""0"" />
",44393134
44393995,"44393995      <row Id=""44393995"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44394873"" PostTypeId=""2"" ParentId=""44393995"" CreationDate=""2017-06-06T16:05:08.783"" Score=""7"" Body=""&lt;p&gt;If you fail to cancel the context, the &lt;a href=&quot;https://golang.org/src/context/context.go?s=9162:9288&quot; rel=&quot;noreferrer&quot;&gt;goroutine that WithCancel or WithTimeout created&lt;/a&gt; will be retained in memory indefinitely (until the program shuts down), causing a memory leak.  If you do this a lot, your memory will balloon significantly.  It's best practice to use a &lt;code&gt;defer cancel()&lt;/code&gt; immediately after calling &lt;code&gt;WithCancel()&lt;/code&gt; or &lt;code&gt;WithTimeout()&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4551301"" LastActivityDate=""2017-06-06T16:05:08.783"" CommentCount=""0"" />
",44394873
44395946,"44395946      <row Id=""44395946"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44396164"" PostTypeId=""2"" ParentId=""44395946"" CreationDate=""2017-06-06T17:23:16.107"" Score=""1"" Body=""&lt;p&gt;You can add a Go source directory to your project.  For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;~/&#xA;   GloriousMomolith/&#xA;      thedjangoapp/&#xA;      src/&#xA;         services/&#xA;            someservice/&#xA;               service.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Set &lt;code&gt;GOPATH&lt;/code&gt; to &lt;code&gt;$HOME/GloriousMomolith:$HOME&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can now import relative to the the &lt;code&gt;src&lt;/code&gt; directory:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import (&#xA;   &quot;services/someservice&quot;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-06-06T17:23:16.107"" CommentCount=""2"" />
",44396164
44396155,"44396155      <row Id=""44396155"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44396616"" PostTypeId=""2"" ParentId=""44396155"" CreationDate=""2017-06-06T17:49:40.737"" Score=""1"" Body=""&lt;p&gt;Using &lt;a href=&quot;https://github.com/google/google-api-go-client/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Auto-generated Google APIs for Go&lt;/a&gt; is only recommended if there is a &lt;a href=&quot;https://github.com/GoogleCloudPlatform/google-cloud-go&quot; rel=&quot;nofollow noreferrer&quot;&gt;Google Client Library for Go&lt;/a&gt; developed for the service you are calling. There is not a client library yet for Dataflow.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To launch a Dataflow template from a Go app using default credentials:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ctx := context.Background()&#xA;oauthClient, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)&#xA;&#xA;dataflowService, err := dataflow.New(oauthClient)&#xA;&#xA;if err != nil {&#xA;  panic(err)&#xA;}&#xA;&#xA;templateRequest := dataflow.CreateJobFromTemplateRequest{&#xA;  GcsPath: &quot;gcs path to template here&quot;,&#xA;  JobName: &quot;choose a unique job name here&quot;,&#xA;  Parameters: map[string]string{&#xA;    &quot;parameters&quot;: &quot;for job&quot;,&#xA;  },&#xA;}&#xA;&#xA;result, err := dataflowService.Projects.Templates.Create(&quot;project id&quot;, &amp;amp;templateRequest).Do()&#xA;&#xA;if err != nil {&#xA;  panic(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1017244"" LastActivityDate=""2017-06-06T17:49:40.737"" CommentCount=""0"" />
",44396616
41510003,"41510003      <row Id=""41510003"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44398628"" PostTypeId=""2"" ParentId=""41510003"" CreationDate=""2017-06-06T19:47:56.163"" Score=""2"" Body=""&lt;p&gt;Please check my self-invented bicycle to mock Gorm for tests here &lt;a href=&quot;https://github.com/Selvatico/go-mocket&quot; rel=&quot;nofollow noreferrer&quot;&gt;go-mocket&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""660895"" LastActivityDate=""2017-06-06T19:47:56.163"" CommentCount=""0"" />
",44398628
44391148,"44391148      <row Id=""44391148"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44399665"" PostTypeId=""2"" ParentId=""44391148"" CreationDate=""2017-06-06T20:55:08.687"" Score=""2"" Body=""&lt;p&gt;So you'll need to send it to the &lt;code&gt;IP&lt;/code&gt; address and &lt;code&gt;port&lt;/code&gt; as provided by the &lt;code&gt;.torrent&lt;/code&gt; metafile (&lt;code&gt;announce&lt;/code&gt; field).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And once you open the &lt;code&gt;net.Conn&lt;/code&gt; you can &lt;code&gt;conn.Write()&lt;/code&gt; to the socket and similarly &lt;code&gt;conn.Read()&lt;/code&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;So you've just about gotten i:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    conn, err := net.Dial(&quot;udp&quot;, announceAddr:Port)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;When connecting with &lt;code&gt;HTTP&lt;/code&gt;, yeah you use the &lt;code&gt;/announce&lt;/code&gt; endpoint, but not with &lt;code&gt;UDP&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;a href=&quot;http://www.bittorrent.org/beps/bep_0015.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;specs&lt;/a&gt; explain how many bytes to read and write (it is fixed at first, but later dynamic when it comes to reading the peer list). I've found this link, rather, the most useful: &lt;a href=&quot;https://github.com/naim94a/udpt/wiki/The-BitTorrent-UDP-tracker-protocol&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/naim94a/udpt/wiki/The-BitTorrent-UDP-tracker-protocol&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4443226"" LastActivityDate=""2017-06-06T20:55:08.687"" CommentCount=""0"" />
",44399665
44400384,"44400384      <row Id=""44400384"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44400404"" PostTypeId=""2"" ParentId=""44400384"" CreationDate=""2017-06-06T21:55:09.973"" Score=""2"" Body=""&lt;p&gt;&lt;code&gt;*Dialer&lt;/code&gt; and &lt;code&gt;*gomail.Dialer&lt;/code&gt; are 2 different types. The specific error is because you don't have a &lt;code&gt;Dialer&lt;/code&gt; type defined in your package, but you need to match the types in the signature, not just the name. Since &lt;code&gt;gomail.NewDialer&lt;/code&gt; returns a &lt;code&gt;*gomail.Dialer&lt;/code&gt;, use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func MyDialer() *gomail.Dialer {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""32880"" LastEditorUserId=""32880"" LastEditDate=""2017-06-06T22:00:46.647"" LastActivityDate=""2017-06-06T22:00:46.647"" CommentCount=""2"" />
",44400404
44406213,"44406213      <row Id=""44406213"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44407622"" PostTypeId=""2"" ParentId=""44406213"" CreationDate=""2017-06-07T08:38:31.937"" Score=""1"" Body=""&lt;p&gt;The problem is related to the type of &lt;code&gt;children&lt;/code&gt; map. You are using &lt;code&gt;node&lt;/code&gt; values in this map. As a result, you get new values every time you access a key and the changes are not reflected into the original 'parent' node.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The fault lies with this line:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;child, ok := mm[v]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;child&lt;/code&gt; is a &lt;em&gt;new variable&lt;/em&gt; that is equal to the value of &lt;code&gt;node&lt;/code&gt; &lt;code&gt;mm[v]&lt;/code&gt;. The changes you make happen to this value while the &lt;code&gt;node&lt;/code&gt; value in &lt;code&gt;mm&lt;/code&gt; remains unchanged.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To fix this problem, you can use &lt;code&gt;*node&lt;/code&gt; for values in &lt;code&gt;children&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type node struct {&#xA;    end      bool&#xA;    char     string&#xA;    children map[int32]*node&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And fix the code accordingly:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// ...&#xA;mm := current.children&#xA;if nil == mm {&#xA;    mm = make(map[int32]*node)&#xA;    current.children = mm&#xA;}&#xA;child, ok := mm[v]&#xA;if !ok {&#xA;    child = &amp;amp;node{false, string(v), nil}&#xA;    mm[v] = child&#xA;}&#xA;current = child&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Working example: &lt;a href=&quot;https://play.golang.org/p/XcmPY4Nx-O&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/XcmPY4Nx-O&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""3129778"" LastActivityDate=""2017-06-07T08:38:31.937"" CommentCount=""0"" />
",44407622
44409010,"44409010      <row Id=""44409010"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44410622"" PostTypeId=""2"" ParentId=""44409010"" CreationDate=""2017-06-07T10:52:41.627"" Score=""3"" Body=""&lt;p&gt;For example,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;bytes&quot;&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    b := []byte{50, 48, 50, 53, 10}&#xA;    fmt.Println(b)&#xA;    b = bytes.TrimSuffix(b, []byte{10}) // Line Feed&#xA;    fmt.Println(b)&#xA;&#xA;    b = []byte{50, 48, 50, 53, 10}&#xA;    fmt.Println(b)&#xA;    b = bytes.TrimSuffix(b, []byte(&quot;\n&quot;)) // Line Feed&#xA;    fmt.Println(b)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[50 48 50 53 10]&#xA;[50 48 50 53]&#xA;[50 48 50 53 10]&#xA;[50 48 50 53]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-06-07T11:04:18.523"" LastActivityDate=""2017-06-07T11:04:18.523"" CommentCount=""0"" />
",44410622
44406077,"44406077      <row Id=""44406077"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44412899"" PostTypeId=""2"" ParentId=""44406077"" CreationDate=""2017-06-07T12:39:42.543"" Score=""2"" Body=""&lt;p&gt;You can't declare a new type with a pointer TypeSpec. Also declaring a new type is used specifically to remove the entire method set, so you won't have any of the original methods from the &lt;code&gt;*ssh.Client&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What you want is to use composition by embedding the &lt;code&gt;*ssh.Client&lt;/code&gt; in your own struct type:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Connection struct {&#xA;    *ssh.Client&#xA;}&#xA;&#xA;func Connect(addr, user, password string) (*Connection, error) {&#xA;    sshConfig := &amp;amp;ssh.ClientConfig{&#xA;        User: user,&#xA;        Auth: []ssh.AuthMethod{&#xA;            ssh.Password(password),&#xA;        },&#xA;        HostKeyCallback: ssh.HostKeyCallback(func(hostname string, remote net.Addr, key ssh.PublicKey) error { return nil }),&#xA;    }&#xA;&#xA;    conn, err = ssh.Dial(&quot;tcp&quot;, addr, sshConfig)&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;&#xA;    return &amp;amp;Connection{conn}, nil&#xA;}&#xA;&#xA;func (conn *Connection) SendCommand() ([]byte, error) {&#xA;    session, err := conn.NewSession()&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""32880"" LastEditorUserId=""32880"" LastEditDate=""2017-06-07T16:52:52.873"" LastActivityDate=""2017-06-07T16:52:52.873"" CommentCount=""2"" />
",44412899
44402160,"44402160      <row Id=""44402160"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44414202"" PostTypeId=""2"" ParentId=""44402160"" CreationDate=""2017-06-07T13:32:58.357"" Score=""2"" Body=""&lt;p&gt;A &lt;code&gt;compute.Instance&lt;/code&gt; is a &lt;code&gt;json.Marshaler&lt;/code&gt;, so by embedding that type you are in essence giving your &lt;code&gt;CreateInstance&lt;/code&gt; the &lt;code&gt;MarshalJSON&lt;/code&gt; method from &lt;code&gt;compute.Instance&lt;/code&gt;, which of course isn't going to output any of the fields in your &lt;code&gt;CreateInstance&lt;/code&gt; struct.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You could define your own &lt;code&gt;MarshalJSON&lt;/code&gt; method, and try to marshal the &lt;code&gt;Instance&lt;/code&gt; manually or re-assign it to a new type that will use the default json output, but the API may be relying on the internal &lt;code&gt;MarshalJSON&lt;/code&gt; behavior, so that's not guaranteed to be compatible, currently or with future versions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Embedding types for json marshaling is is best avoided because it's all too easy to create confusing bugs like this. I would try to compose them in a different manner.&lt;/p&gt;&#xA;"" OwnerUserId=""32880"" LastActivityDate=""2017-06-07T13:32:58.357"" CommentCount=""1"" />
",44414202
44404052,"44404052      <row Id=""44404052"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44414567"" PostTypeId=""2"" ParentId=""44404052"" CreationDate=""2017-06-07T13:49:46.727"" Score=""2"" Body=""&lt;p&gt;Add the following line to your &lt;a href=&quot;http://vimhelp.appspot.com/starting.txt.html#vimrc&quot; rel=&quot;nofollow noreferrer&quot;&gt;vimrc&lt;/a&gt; file:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;autocmd FileType go setlocal syntax=OFF&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-06-07T13:49:46.727"" CommentCount=""1"" />
",44414567
44321199,"44321199      <row Id=""44321199"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44414983"" PostTypeId=""2"" ParentId=""44321199"" CreationDate=""2017-06-07T14:06:59.333"" Score=""0"" Body=""&lt;p&gt;Got answer to this from golang nuts group.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    conn := `user=someone password=something host=superduperhost&#xA;sslmode=something`&#xA;    data := rex.FindAllStringSubmatch(conn, -1)&#xA;&#xA;    res := make(map[string]string)&#xA;    for _, kv := range data {&#xA;        k := kv[1]&#xA;        v := kv[2]&#xA;        res[k] = v&#xA;    }&#xA;    fmt.Println(res)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Golang Playground url: &lt;a href=&quot;https://play.golang.org/p/xSEX1CAcQE&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/xSEX1CAcQE&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""153586"" LastActivityDate=""2017-06-07T14:06:59.333"" CommentCount=""2"" />
",44414983
44415349,"44415349      <row Id=""44415349"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44415489"" PostTypeId=""2"" ParentId=""44415349"" CreationDate=""2017-06-07T14:29:09.713"" Score=""4"" Body=""&lt;p&gt;The recommended thing to do is to simply access the slice as a struct field:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Item struct {&#xA;    Name string&#xA;}&#xA;&#xA;type ItemList struct {&#xA;    PackDate time.Time&#xA;    Items    []Item&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Accessing the values:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;myItemList.Items[0].Name&#xA;myItemList.PackDate&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Iterating over the slice:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for _, item := range myItemList.Items {&#xA;    // do something with item.Name&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""142162"" LastActivityDate=""2017-06-07T14:29:09.713"" CommentCount=""1"" />
",44415489
44416645,"44416645      <row Id=""44416645"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44416790"" PostTypeId=""2"" ParentId=""44416645"" CreationDate=""2017-06-07T15:22:29.667"" Score=""4"" Body=""&lt;p&gt;See the documentation on &lt;code&gt;Truncate&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Truncate changes the size of the file. &lt;strong&gt;It does not change the I/O offset&lt;/strong&gt;. If there is an error, it will be of type *PathError. &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So you also need to seek to the beginning of the file before you write:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;configFile.Truncate(0)&#xA;configFile.Seek(0,0)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""495504"" LastEditorUserId=""495504"" LastEditDate=""2017-06-07T15:30:57.810"" LastActivityDate=""2017-06-07T15:30:57.810"" CommentCount=""2"" />
",44416790
44417913,"44417913      <row Id=""44417913"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44418231"" PostTypeId=""2"" ParentId=""44417913"" CreationDate=""2017-06-07T16:30:59.440"" Score=""3"" Body=""&lt;p&gt;Without more context, I would dump the separate array of distinct values - generating it takes time, and using it necessitates the nested loop. Assuming there's no other purpose to the second array, I'd use something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;counter := make( map[string]int )    &#xA;for _, row := range StrArray {&#xA;    counter[row]++&#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you need the list of distinct strings without the counts for some separate purpose, you can easily get it afterward:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;distinctStrings := make([]string, len(counter))&#xA;i := 0&#xA;for k := range counter {&#xA;    distinctStrings[i] = k&#xA;    i++&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Iterating the array of distinct strings is O(n), while map access by key is O(log(n)). That takes your overall from O(n^2) to O(n*log(n)), which should be a significant improvement with larger datasets. But, as with any optimization: test, measure, analyze, optimize.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-07T16:30:59.440"" CommentCount=""2"" />
",44418231
44418361,"44418361      <row Id=""44418361"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44418411"" PostTypeId=""2"" ParentId=""44418361"" CreationDate=""2017-06-07T16:41:13.617"" Score=""0"" Body=""&lt;p&gt;If you want to read line by line, and you're using a buffered reader, use the buffered reader's &lt;a href=&quot;https://golang.org/pkg/bufio/#Reader.ReadBytes&quot; rel=&quot;nofollow noreferrer&quot;&gt;ReadBytes method&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;line,err := reader.ReadBytes('\n')&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will give you a full line, one line at a time, regardless of byte length.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-07T16:41:13.617"" CommentCount=""2"" />
",44418411
44418576,"44418576      <row Id=""44418576"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44418893"" PostTypeId=""2"" ParentId=""44418576"" CreationDate=""2017-06-07T17:10:46.357"" Score=""1"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;It's not working since it's not even loading &quot;handlers/handler_one.go&quot;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Do you mean that the &lt;code&gt;init&lt;/code&gt; function in &lt;code&gt;handlers/handler_one.go&lt;/code&gt; is not being executed?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That would be expected since in the code you pasted you are not importing that package anywhere.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try importing that package in your &lt;code&gt;main.go&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can import as &lt;code&gt;_&lt;/code&gt; if the only reason for importing it would be for the &lt;code&gt;init&lt;/code&gt; function to run.&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-06-07T17:10:46.357"" CommentCount=""0"" />
",44418893
44420826,"44420826      <row Id=""44420826"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44421114"" PostTypeId=""2"" ParentId=""44420826"" CreationDate=""2017-06-07T19:19:10.583"" Score=""2"" Body=""&lt;p&gt;You cannot &lt;code&gt;import&lt;/code&gt; the &lt;code&gt;main&lt;/code&gt; package. Any shared code should go in a separate package, which can be imported by &lt;code&gt;main&lt;/code&gt; (and other packages).&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-07T19:19:10.583"" CommentCount=""0"" />
",44421114
44036416,"44036416      <row Id=""44036416"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44422345"" PostTypeId=""2"" ParentId=""44036416"" CreationDate=""2017-06-07T20:39:26.277"" Score=""1"" Body=""&lt;p&gt;If I read your code correctly, you are searching all captures. What you can do to save work, is to prune the hopeless captures move. It turns out that it is quite common that moves are so bad that it is safe to skip them, so the technique is quite safe.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, take a look at this position:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ZLKu9.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ZLKu9.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;FEN: &lt;code&gt;rnbqkbnr/pppppppp/8/8/8/8/1PP1PPP1/RNBQKBNR w KQkq - 0 1&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are three captures:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Rxa7&lt;/li&gt;&#xA;&lt;li&gt;Qxd7+&lt;/li&gt;&#xA;&lt;li&gt;Rxh7&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Let us assume the engine first tries the capture move with the queen. Black has four ways to capture back, but any of these moves will likely result in a cutoff.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For instance, black plays Bxd7. Now white has two captures in the resulting position, Rxa7 or Rxh7.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here, most engines will recognize that white has already fallen back in material (in comparison to beta) that even capturing a pawn will not help. So, both of this rook captures are unlikely to result in a cutoff.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here, your current search would still continue to search these moves. Detecting such cases and skipping these moves will save a lot of work.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are further optimizations. For example, strong engines with &lt;a href=&quot;https://chessprogramming.wikispaces.com/Static+Exchange+Evaluation&quot; rel=&quot;nofollow noreferrer&quot;&gt;static exchange evaluation&lt;/a&gt; will immediately see that Qxd7 will win one pawn but will loose the queen. As this is a bad trade, the engine can immediately skip this move. The same goes for the other two rook captures.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As always, there is a trade-off, though. If you prune too aggressively, you will eventually prune good moves, too. In general, I would recommend to spend more time in the normal search, not in the quiescence search, so aggressive pruning should be fine.&lt;/p&gt;&#xA;"" OwnerUserId=""783510"" LastActivityDate=""2017-06-07T20:39:26.277"" CommentCount=""0"" />
",44422345
44426606,"44426606      <row Id=""44426606"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44426944"" PostTypeId=""2"" ParentId=""44426606"" CreationDate=""2017-06-08T04:58:56.967"" Score=""1"" Body=""&lt;p&gt;If the browser cleanly closes the connection, then read on the webssocket connection returns an error.  Cleanup the websocket connection as you would on any read error.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The application must PING the connection and expect the corresponding PONGs to detect other situations.  The &lt;a href=&quot;https://github.com/gorilla/websocket/tree/master/examples/chat&quot; rel=&quot;nofollow noreferrer&quot;&gt;chat example&lt;/a&gt; shows how to send PINGs and receive PONGs.&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-06-08T04:58:56.967"" CommentCount=""2"" />
",44426944
44427587,"44427587      <row Id=""44427587"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44428341"" PostTypeId=""2"" ParentId=""44427587"" CreationDate=""2017-06-08T06:36:43.033"" Score=""7"" Body=""&lt;p&gt;You don't test in Go using &lt;code&gt;main&lt;/code&gt;. Go has its own test framework.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First, read &lt;a href=&quot;https://golang.org/doc/code.html&quot; rel=&quot;noreferrer&quot;&gt;&quot;How to Write Go Code&quot;&lt;/a&gt; which will explain Go's package layout and testing tools. It's best to go with them because so much of the Go tools expect that layout.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When creating a package, put it somewhere in &lt;code&gt;~/go/src&lt;/code&gt;. I'd recommend following the convention using the repository you like to use, even for things you aren't necessarily going to upload. It makes for better organization; &lt;code&gt;go get&lt;/code&gt; will put other external packages in &lt;code&gt;~/go/src/&lt;/code&gt; as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, I'd use &lt;code&gt;~/go/src/github.com/schwern/newpackage/&lt;/code&gt; even though I don't intend to upload this to Github. &lt;code&gt;github.com/schwern&lt;/code&gt; acts as my &quot;organization&quot; within the Go source tree.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Put the functions into &lt;code&gt;newpackage.go&lt;/code&gt; under &lt;code&gt;package newpackage&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ cat ~/go/src/github.com/schwern/newpackage/newpackage.go &#xA;package newpackage&#xA;&#xA;func MyNewFunc() string {&#xA;    return &quot;Hello!&quot;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then tests go in &lt;code&gt;newpackage_test.go&lt;/code&gt; right next to &lt;code&gt;newpackage.go&lt;/code&gt;. These should be familiar from Python, write a bunch of Test* functions. Unlike Python it doesn't use asserts.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ cat ~/go/src/github.com/schwern/newpackage/newpackage_test.go &#xA;package newpackage_test&#xA;&#xA;import(&#xA;    &quot;testing&quot;&#xA;    &quot;github.com/schwern/newpackage&quot;&#xA;)&#xA;&#xA;func TestMyNewFunc( t *testing.T ) {&#xA;    want := &quot;Hello!&quot;&#xA;    have := newpackage.MyNewFunc()&#xA;&#xA;    if have != want {&#xA;        t.Errorf(&quot;MyNewFunc(): have: '%v', want: '%v'&quot;, have, want )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you run &lt;code&gt;go test&lt;/code&gt; inside the package directory it will compile the current package and its dependencies, find and compile all &lt;code&gt;*_test.go&lt;/code&gt; files in the package directory, and execute their &lt;code&gt;Test*&lt;/code&gt; functions.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ pwd&#xA;/Users/schwern/go/src/github.com/schwern/newpackage&#xA;$ go test -v&#xA;=== RUN   TestMyNewFunc&#xA;--- PASS: TestMyNewFunc (0.00s)&#xA;PASS&#xA;ok      github.com/schwern/newpackage   0.013s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that the test is in a different package than what its testing. That makes it a blackbox test, it can only see the exported (ie. UpperCase) functions. You can make a glassbox test by putting the tests in the same package, it's best to do that in a separate file like &lt;code&gt;newpackage_internal_test.go&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately Go doesn't come with assert functions, the above &lt;code&gt;if&lt;/code&gt; and call to &lt;code&gt;t.Errorf&lt;/code&gt; is the equivalent. Rather than constantly hand-roll them, there's libraries out there which provide assert functions like &lt;a href=&quot;https://github.com/stvp/assert&quot; rel=&quot;noreferrer&quot;&gt;stvp/assert&lt;/a&gt;. After running &lt;code&gt;go get github.com/stvp/assert&lt;/code&gt; you could write...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package newpackage_test&#xA;&#xA;import(&#xA;    &quot;testing&quot;&#xA;    &quot;github.com/schwern/newpackage&quot;&#xA;    &quot;github.com/stvp/assert&quot;&#xA;)&#xA;&#xA;func TestMyNewFunc( t *testing.T ) {&#xA;    assert.Equal( t, newpackage.MyNewFunc(), &quot;Hello!&quot; )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;If you want an executable that uses &lt;code&gt;newpackage&lt;/code&gt;, it should probably go in its own package. Unless it's an integral part of &lt;code&gt;newpackage&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ cat ~/go/src/github.com/schwern/newexec/main.go &#xA;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;github.com/schwern/newpackage&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    fmt.Println(newpackage.MyNewFunc())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you want to test &lt;code&gt;main&lt;/code&gt;, &lt;a href=&quot;https://golang.org/pkg/testing/#hdr-Main&quot; rel=&quot;noreferrer&quot;&gt;the &lt;code&gt;testing&lt;/code&gt; package provides a special &lt;code&gt;TestMain&lt;/code&gt; function&lt;/a&gt;... though I admit I do not fully understand it. Like any other language, it's best to put as much functionality as possible into library calls and have &lt;code&gt;main&lt;/code&gt; be a thin wrapper.&lt;/p&gt;&#xA;"" OwnerUserId=""14660"" LastEditorUserId=""14660"" LastEditDate=""2017-06-08T06:57:55.190"" LastActivityDate=""2017-06-08T06:57:55.190"" CommentCount=""0"" />
",44428341
44033191,"44033191      <row Id=""44033191"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44428886"" PostTypeId=""2"" ParentId=""44033191"" CreationDate=""2017-06-08T07:07:20.160"" Score=""0"" Body=""&lt;p&gt;I think this may be Working as Intended. Google just updated the documentation today (about an hour ago).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/compute/docs/load-balancing/http/#websocket_proxy_support&quot; rel=&quot;nofollow noreferrer&quot;&gt;LB Proxy Support docs&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/compute/docs/load-balancing/http/backend-service#backend_service_components&quot; rel=&quot;nofollow noreferrer&quot;&gt;Backend Service Components docs&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Cheers,&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Matt&lt;/p&gt;&#xA;"" OwnerUserId=""8096214"" LastActivityDate=""2017-06-08T07:07:20.160"" CommentCount=""0"" />
",44428886
44428816,"44428816      <row Id=""44428816"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44429422"" PostTypeId=""2"" ParentId=""44428816"" CreationDate=""2017-06-08T07:35:14.203"" Score=""1"" Body=""&lt;p&gt;The error is pretty clear:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;ld: library not found for -ltensorflow&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;When you run &lt;code&gt;go test&lt;/code&gt; you're invoking the go compiler that compiles the required libraries, your test files and then executes them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you compile a program that uses a &quot;non-pure&quot; go library, you have to make the compiler (and the linker) aware of the library.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the compilation phase, the compiler looks for the libraries (also) in the paths listed into the environment variable:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;LIBRARY_PATH&lt;/code&gt; on OS X &amp;amp; Linux.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thus you have to add into this variable the location of the compiled library.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example I have:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;TFGOLIB=&quot;${GOPATH}/src/github.com/tensorflow/tensorflow/bazel-bin/tensorflow&quot;&#xA;export LIBRARY_PATH=&quot;${TFGOLIB}:${LIBRARY_PATH}&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;During the runtime, instead, the os looks for the library in order to perform dynamic linking.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thus you have to set this other variable (&lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; on Linux and &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; on OS X) to the same location.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Moreover I suggest  you to also add the CUDA library path to this variable, in order to make it available at runtime.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;export LD_LIBRARY_PATH=&quot;$LD_LIBRARY_PATH:/opt/cuda/lib64:/opt/cuda/extras/CUPTI/lib64:/opt/cudnn5.1/cuda/lib64:${TFGOLIB}&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2891324"" LastActivityDate=""2017-06-08T07:35:14.203"" CommentCount=""3"" />
",44429422
44430621,"44430621      <row Id=""44430621"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44430812"" PostTypeId=""2"" ParentId=""44430621"" CreationDate=""2017-06-08T08:44:12.293"" Score=""3"" Body=""&lt;p&gt;You just mistyped the header names:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;w.Header().Set(&quot;Allow-Control-Allow-Origin&quot;, &quot;*&quot;)&#xA;                ^^^^^&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Instead of &lt;em&gt;Allow-Control&lt;/em&gt; there, you need &lt;em&gt;Access-Control&lt;/em&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;w.Header().Set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;…and same of course for the other three headers you’re setting there.&lt;/p&gt;&#xA;"" OwnerUserId=""441757"" LastActivityDate=""2017-06-08T08:44:12.293"" CommentCount=""0"" />
",44430812
44434544,"44434544      <row Id=""44434544"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44434664"" PostTypeId=""2"" ParentId=""44434544"" CreationDate=""2017-06-08T11:37:27.023"" Score=""2"" Body=""&lt;p&gt;Calling any function (or method) and passing values makes a copy of the values, and inside the function (or method) you can only modify the &lt;em&gt;copy&lt;/em&gt;. Hence if you don't assign the return values in your first example to the fields of &lt;code&gt;Time&lt;/code&gt;, changes made in &lt;code&gt;init_Time()&lt;/code&gt; are lost when the function returns. This also answers your 2nd question.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want the caller to observe the changes, you must pass a &lt;em&gt;pointer&lt;/em&gt; to your value, and have the function modify the &lt;em&gt;pointed&lt;/em&gt; value. In this case it is not even required to return the (modified) value:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func InitTime(t *Time) {&#xA;  t.hour, t.min, t.sec = time.Now().Clock()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t := Time{}&#xA;InitTime(&amp;amp;t)&#xA;fmt.Printf(&quot;Time: %d:%d:%d\n&quot;, t.hour, t.min, t.sec)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/2sUxefJj9q&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Time: 23:0:0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Note that the current time on the Go Playground always starts at 23:00:00.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also it's idiomatic to create a &quot;constructor&quot; like function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func NewTime() *Time {&#xA;    t := &amp;amp;Time{}&#xA;    t.hour, t.min, t.sec = time.Now().Clock()&#xA;    return t&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t2 := NewTime()&#xA;fmt.Printf(&quot;Time: %d:%d:%d\n&quot;, t2.hour, t2.min, t2.sec)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output is the same.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See related questions:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/33040495/golang-operator-overloading/33040529#33040529&quot;&gt;Golang Operator Overloading&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/41477624/copy-instances-of-type-t-when-any-of-the-methods-of-a-named-type-t-have-a-point/41482152#41482152&quot;&gt;Copy instances of type T, when any of the methods of a named type T have a pointer receiver&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-08T11:49:51.133"" LastActivityDate=""2017-06-08T11:49:51.133"" CommentCount=""0"" />
",44434664
44439087,"44439087      <row Id=""44439087"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44439192"" PostTypeId=""2"" ParentId=""44439087"" CreationDate=""2017-06-08T14:57:50.720"" Score=""4"" Body=""&lt;p&gt;This is how embedding works, there's nothing you can do about it. &lt;em&gt;(Actually there is, see dirty trick at the end.)&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What you want may be achieved with interfaces though. Make your structs unexported, (&lt;code&gt;B&lt;/code&gt; =&gt; &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; =&gt; &lt;code&gt;c&lt;/code&gt;), and create &quot;constructor&quot; like functions, which return interface types, containing only the methods you wish to publish:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type b struct {&#xA;    A&#xA;}&#xA;&#xA;type c struct {&#xA;    A&#xA;}&#xA;&#xA;type Helloer interface {&#xA;    Hello()&#xA;}&#xA;&#xA;type HelloWorlder interface {&#xA;    Helloer&#xA;    World()&#xA;}&#xA;&#xA;func NewB() Helloer {&#xA;    return &amp;amp;b{}&#xA;}&#xA;&#xA;func NewC() HelloWorlder {&#xA;    return &amp;amp;c{}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You might want to call the interfaces and functions different, this is just for demonstration.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that while the returned &lt;code&gt;Helloer&lt;/code&gt; interface does not include the &lt;code&gt;World()&lt;/code&gt; method, it is still possible to &quot;reach&quot; it using &lt;a href=&quot;https://golang.org/ref/spec#Type_assertions&quot; rel=&quot;nofollow noreferrer&quot;&gt;type assertion&lt;/a&gt;, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;h := NewB() // h is of type Helloer&#xA;if hw, ok := h.(HelloWorlder); ok {&#xA;    hw.World() // This will succeed with the above implementations&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Try this on the &lt;a href=&quot;https://play.golang.org/p/reRB7l1z7n&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Dirty trick&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;If a type embeds the type &lt;code&gt;A&lt;/code&gt;, (fields and) methods of &lt;code&gt;A&lt;/code&gt; that get &lt;em&gt;promoted&lt;/em&gt; will become part of the &lt;a href=&quot;https://golang.org/ref/spec#Method_sets&quot; rel=&quot;nofollow noreferrer&quot;&gt;method set&lt;/a&gt; of the embedder type (and thus become methods of type &lt;code&gt;A&lt;/code&gt;). This is detailed in &lt;a href=&quot;https://golang.org/ref/spec#Struct_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: Struct types:&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;A field or &lt;a href=&quot;https://golang.org/ref/spec#Method_declarations&quot; rel=&quot;nofollow noreferrer&quot;&gt;method&lt;/a&gt; &lt;code&gt;f&lt;/code&gt; of an anonymous field in a struct &lt;code&gt;x&lt;/code&gt; is called &lt;em&gt;promoted&lt;/em&gt; if &lt;code&gt;x.f&lt;/code&gt; is a legal &lt;a href=&quot;https://golang.org/ref/spec#Selectors&quot; rel=&quot;nofollow noreferrer&quot;&gt;selector&lt;/a&gt; that denotes that field or method &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The focus is on the &lt;em&gt;promotion&lt;/em&gt;, for which the selector must be &lt;strong&gt;legal&lt;/strong&gt;. &lt;a href=&quot;https://golang.org/ref/spec#Selectors&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: Selectors&lt;/a&gt; describes how &lt;code&gt;x.f&lt;/code&gt; is resolved:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The following rules apply to selectors:&lt;/p&gt;&#xA;  &#xA;  &lt;ol&gt;&#xA;  &lt;li&gt;For a value &lt;code&gt;x&lt;/code&gt; of type &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;*T&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is not a pointer or interface type, &lt;code&gt;x.f&lt;/code&gt; denotes the field or method at the shallowest depth in &lt;code&gt;T&lt;/code&gt; where there is such an &lt;code&gt;f&lt;/code&gt;. If there is not exactly &lt;a href=&quot;https://golang.org/ref/spec#Uniqueness_of_identifiers&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;one f&lt;/code&gt;&lt;/a&gt; with shallowest depth, the selector expression is illegal.&lt;/li&gt;&#xA;  &lt;/ol&gt;&#xA;  &#xA;  &lt;p&gt;[...]&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;What does this mean? Simply by embedding, &lt;code&gt;B.World&lt;/code&gt; will denote the &lt;code&gt;B.A.World&lt;/code&gt; method as that is at the shallowest depth. But if we can &lt;em&gt;achieve&lt;/em&gt; so that &lt;code&gt;B.A.World&lt;/code&gt; won't be the shallowest, the type &lt;code&gt;B&lt;/code&gt; won't have this &lt;code&gt;World()&lt;/code&gt; method, because &lt;code&gt;B.A.World&lt;/code&gt; won't get promoted.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How can we achieve that? We may add a field with name &lt;code&gt;World&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type B struct {&#xA;    A&#xA;    World int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This &lt;code&gt;B&lt;/code&gt; type (or rather &lt;code&gt;*B&lt;/code&gt;) will not have a &lt;code&gt;World()&lt;/code&gt; method, as &lt;code&gt;B.World&lt;/code&gt; denotes the &lt;em&gt;field&lt;/em&gt; and not &lt;code&gt;B.A.World&lt;/code&gt; as the former is at the shallowest depth. Try this on the &lt;a href=&quot;https://play.golang.org/p/0umHLGO7EP&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Again, this does not prevent anyone to explicitly refer to &lt;code&gt;B.A.World()&lt;/code&gt;, so that method can be &quot;reached&quot; and called, all we achieved is that the type &lt;code&gt;B&lt;/code&gt; or &lt;code&gt;*B&lt;/code&gt; does not have a &lt;code&gt;World()&lt;/code&gt; method.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another variant of this &quot;dirty trick&quot; is to exploit the end of the first rule: &lt;em&gt;&quot;If there is &lt;strong&gt;not exactly one&lt;/strong&gt; &lt;code&gt;f&lt;/code&gt; with shallowest depth&quot;&lt;/em&gt;. This can be achieved to also embed another type, another struct which also has a &lt;code&gt;World&lt;/code&gt; field or method, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type hideWorld struct{ World int }&#xA;&#xA;type B struct {&#xA;    A&#xA;    hideWorld&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Try this variant on the &lt;a href=&quot;https://play.golang.org/p/p82ttZWb8W&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-08T19:34:43.960"" LastActivityDate=""2017-06-08T19:34:43.960"" CommentCount=""0"" />
",44439192
44441091,"44441091      <row Id=""44441091"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44445143"" PostTypeId=""2"" ParentId=""44441091"" CreationDate=""2017-06-08T20:39:22.943"" Score=""0"" Body=""&lt;p&gt;&lt;strong&gt;Something Like This?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;rows, err := db.Query(&quot;SELECT name FROM names&quot;)&#xA;if err != nil {&#xA;    // Handle error&#xA;}&#xA;&#xA;names := make([]string, 0)&#xA;&#xA;for rows.Next() {&#xA;    var name string&#xA;&#xA;    err := rows.Scan(&amp;amp;name)&#xA;    if err != nil {&#xA;        // Handle error&#xA;        continue&#xA;    }&#xA;&#xA;    names = append(names, name)&#xA;}&#xA;&#xA;t := template.New(&quot;index&quot;)&#xA;t, _ = t.Parse(`{{range .}}{{.}} {{end}}`)&#xA;t.Execute(w, names)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Things to Note&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You should generally avoid using &lt;code&gt;*&lt;/code&gt; in your sql queries to make it clear what fields are being selected&lt;/li&gt;&#xA;&lt;li&gt;If any fields in your database table &lt;strong&gt;can be&lt;/strong&gt; &lt;code&gt;NULL&lt;/code&gt;, then use &lt;code&gt;sql.NullBool&lt;/code&gt;, &lt;code&gt;sql.NullFloat64&lt;/code&gt;, &lt;code&gt;sql.NullInt64&lt;/code&gt; or &lt;code&gt;sql.NullString&lt;/code&gt; to avoid possible errors&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Possible Output&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Bob Jim David Henry Jerry &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4988637"" LastEditorUserId=""4988637"" LastEditDate=""2017-06-08T20:47:02.327"" LastActivityDate=""2017-06-08T20:47:02.327"" CommentCount=""2"" />
",44445143
44445958,"44445958      <row Id=""44445958"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44445991"" PostTypeId=""2"" ParentId=""44445958"" CreationDate=""2017-06-08T21:38:06.807"" Score=""1"" Body=""&lt;p&gt;The fields of CellValue are unexported (start with a lowercase character). &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Marshal&quot; rel=&quot;nofollow noreferrer&quot;&gt;Per the documentation&lt;/a&gt; (emphasis mine), &quot;Each &lt;strong&gt;exported&lt;/strong&gt; struct field becomes a member of the object&quot; - meaning unexported values are ignored when marshaling or unmarshaling.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-08T21:38:06.807"" CommentCount=""1"" />
",44445991
44401356,"44401356      <row Id=""44401356"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44446281"" PostTypeId=""2"" ParentId=""44401356"" CreationDate=""2017-06-08T22:03:58.480"" Score=""1"" Body=""&lt;p&gt;I ended up obtaining the certs from: &lt;a href=&quot;https://certbot.eff.org/#ubuntuxenial-other&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://certbot.eff.org/#ubuntuxenial-other&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;certbot certonly --standalone -d example.com -d www.example.com&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I had to use fullchain.pem instead of cert.pem for this collider to work:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/webrtc/apprtc/issues/442&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/webrtc/apprtc/issues/442&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""376742"" LastActivityDate=""2017-06-08T22:03:58.480"" CommentCount=""0"" />
",44446281
44446371,"44446371      <row Id=""44446371"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44446435"" PostTypeId=""2"" ParentId=""44446371"" CreationDate=""2017-06-08T22:17:43.813"" Score=""1"" Body=""&lt;p&gt;Your function could be implemented in a simpler, more efficient manner:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func binToString(s []byte) string {&#xA;    output := make([]byte, len(s)/8)&#xA;    for i := 0; i &amp;lt; len(output); i++ {&#xA;        val, err := strconv.ParseInt(string(s[i*8:(i+1)*8]), 2, 64)&#xA;        if err == nil {&#xA;            output[i] = byte(val)&#xA;        }&#xA;    }&#xA;    return string(output)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/Fmo7I-rN3c&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/Fmo7I-rN3c&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""142162"" LastEditorUserId=""142162"" LastEditDate=""2017-06-08T22:23:17.850"" LastActivityDate=""2017-06-08T22:23:17.850"" CommentCount=""1"" />
",44446435
44069432,"44069432      <row Id=""44069432"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44447165"" PostTypeId=""2"" ParentId=""44069432"" CreationDate=""2017-06-08T23:42:34.457"" Score=""0"" Body=""&lt;p&gt;It seems that for the Admin SDK I need to ask for the user (the administrator) permissions to access the Directory API. This is quite different from the other APIs where I simply just set the user email address to access the specified user's data.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's understandable I guess since the Admin SDK is a far more powerful API affecting the domain and not just the individual user.&lt;/p&gt;&#xA;"" OwnerUserId=""1075283"" LastActivityDate=""2017-06-08T23:42:34.457"" CommentCount=""0"" />
",44447165
44447271,"44447271      <row Id=""44447271"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44447357"" PostTypeId=""2"" ParentId=""44447271"" CreationDate=""2017-06-09T00:05:38.397"" Score=""4"" Body=""&lt;p&gt;&lt;code&gt;append(foo[:i], foo[i+1:]...)&lt;/code&gt; does the following:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;It takes the &lt;code&gt;foo[:i]&lt;/code&gt; slice, which is &lt;code&gt;foo[:0]&lt;/code&gt; and basically a slice with length &lt;code&gt;0&lt;/code&gt; and capacity (at least) &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;As soon as the capacity is enough to append the values - the underlying array is reused&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;You write &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; into the indexes &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; correspondingly of the underlying array.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Then you check the &lt;code&gt;foo&lt;/code&gt; variable that uses the underlying array we just modified and that contains the &lt;code&gt;b c c&lt;/code&gt; values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Compare with the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;noop(append(foo[:i], &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here the list of values to append is longer than the current capacity. So the runtime allocates a new underlying array. And you don't mutate the &lt;code&gt;foo&lt;/code&gt;. &lt;a href=&quot;https://play.golang.org/p/RooYG_p9Z8&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/RooYG_p9Z8&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""251311"" LastActivityDate=""2017-06-09T00:05:38.397"" CommentCount=""8"" />
",44447357
44442336,"44442336      <row Id=""44442336"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44447831"" PostTypeId=""2"" ParentId=""44442336"" CreationDate=""2017-06-09T01:16:32.483"" Score=""1"" Body=""&lt;p&gt;If you don't want to use nested loop, one solution is using recursive call and reflection to inject the attributes/properties into a struct. In the following implementation, attributes/properties to be injected is wrapped in a struct implement &lt;code&gt;Injectable&lt;/code&gt; interface. Working example can be found at &lt;a href=&quot;https://play.golang.org/p/b7_ZSqmrE4&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;Define the interface.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Injectable interface {&#xA;    InjectTo(v interface{})&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Define data structure that holds properties/attributes to be injected, e.g.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Property struct {&#xA;    AID int&#xA;    BID int&#xA;}&#xA;&#xA;type C struct {&#xA;    // The properties will be injected here&#xA;    Property&#xA;    CID int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Implement &lt;code&gt;InjectTo&lt;/code&gt; using reflection and recursive call.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//Method must be pointer receiver since p will be used &#xA;//as temporary placeholder for parent properties/attributes.&#xA;func (p *Property) injectRecursive(v reflect.Value, it reflect.Type, pv reflect.Value) {&#xA;    switch v.Kind() {&#xA;    case reflect.Struct:&#xA;        vt := v.Type()&#xA;        //Embedded struct is a 'value' type implement Injectable&#xA;        if vt.Implements(it) {&#xA;            //Inject value to embedded struct&#xA;            ot := pv.Type()&#xA;            for k := 0; k &amp;lt; pv.NumField(); k++ {&#xA;                name := ot.Field(k).Name&#xA;                f := v.FieldByName(name)&#xA;                if f.CanSet() {&#xA;                    f.Set(pv.Field(k))&#xA;                }&#xA;            }&#xA;        } else {&#xA;            for k := 0; k &amp;lt; v.NumField(); k++ {&#xA;                fv := v.Field(k)&#xA;&#xA;                //Match by field name.&#xA;                //For more robust and generic solution&#xA;                //consider using other approach, e.g. tag&#xA;                f := pv.FieldByName(vt.Field(k).Name)&#xA;                if f.CanSet() {&#xA;                    f.Set(fv)&#xA;                } else {&#xA;                    p.injectRecursive(fv, it, pv)&#xA;                }&#xA;            }&#xA;        }&#xA;    case reflect.Slice, reflect.Array:&#xA;        for k := 0; k &amp;lt; v.Len(); k++ {&#xA;            p.injectRecursive(v.Index(k), it, pv)&#xA;        }&#xA;    case reflect.Ptr:&#xA;        if v.IsValid() {&#xA;            p.injectRecursive(v.Elem(), it, pv)&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;//InjectTo must be Value (not pointer) receiver&#xA;func (p Property) InjectTo(s interface{}) {&#xA;    sv := reflect.Indirect(reflect.ValueOf(s))&#xA;    pv := reflect.Indirect(reflect.ValueOf(&amp;amp;p))&#xA;    it := reflect.TypeOf((*Injectable)(nil)).Elem()&#xA;    p.injectRecursive(sv, it, pv)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;You can inject the properties by:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;res := Input{...}&#xA;prop := Property{}&#xA;prop.InjectTo(&amp;amp;res)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-06-09T01:23:04.990"" LastActivityDate=""2017-06-09T01:23:04.990"" CommentCount=""1"" />
",44447831
44448384,"44448384      <row Id=""44448384"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44448443"" PostTypeId=""2"" ParentId=""44448384"" CreationDate=""2017-06-09T02:40:29.333"" Score=""2"" Body=""&lt;p&gt;You can slice off the last character:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;read_line = read_line[:len(read_line)-1]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Perhaps a better approach is to use the strings library:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;read_line = strings.TrimSuffix(read_line, &quot;\n&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1931098"" LastEditorUserId=""1931098"" LastEditDate=""2017-06-09T02:49:21.610"" LastActivityDate=""2017-06-09T02:49:21.610"" CommentCount=""4"" />
",44448443
44448472,"44448472      <row Id=""44448472"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44448631"" PostTypeId=""2"" ParentId=""44448472"" CreationDate=""2017-06-09T03:03:21.797"" Score=""1"" Body=""&lt;p&gt;This is an issue inherent in the design of most hash tables. Here's a simple explanation hand waving a lot of unnecessary detail.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Under the hood, a hash table is an array. Each key is mapped onto an element in the array using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash_table#Collision_resolution&quot; rel=&quot;nofollow noreferrer&quot;&gt;hash function&lt;/a&gt;. For example, &quot;foo&quot; might map to element 8, &quot;bar&quot; might map to element 4, and so on. Some elements are empty.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;for k,v := range hash&lt;/code&gt; iterates through this array in whatever order they happen to appear. The ordering is unpredictable to avoid a &lt;a href=&quot;https://en.wikipedia.org/wiki/Collision_attack&quot; rel=&quot;nofollow noreferrer&quot;&gt;collision attack&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you add to a hash, it adds to the underlying array. It might even have to allocate a new, larger array. It's unpredictable where that new key will land in the hash's array.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So if you add more pairs while you're iterating through the hash, any pair that gets put into the array before the current index won't be seen; the iteration has already past that point. Anything that gets put after &lt;em&gt;might&lt;/em&gt; be seen; the iteration has yet to reach that point, but the array might get reallocated and the pairs possibly rehashed.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;em&gt;but I wonder why on my local it never prints more than 8&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Because the underlying array is probably of length 8. Go likely allocates the underlying array in powers of 2 and probably starts at 8. The &lt;code&gt;range hash&lt;/code&gt; probably starts by checking the length of the underlying array and will not go further, even if it's grown.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Long story short: don't add keys to a hash while iterating through it.&lt;/p&gt;&#xA;"" OwnerUserId=""14660"" LastEditorUserId=""14660"" LastEditDate=""2017-06-09T03:16:02.747"" LastActivityDate=""2017-06-09T03:16:02.747"" CommentCount=""1"" />
",44448631
44452499,"44452499      <row Id=""44452499"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44452603"" PostTypeId=""2"" ParentId=""44452499"" CreationDate=""2017-06-09T08:10:12.820"" Score=""3"" Body=""&lt;p&gt;You can use virtually the same construct as in Go:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&#xD;&#xA;&lt;div class=&quot;snippet-code&quot;&gt;&#xD;&#xA;&lt;pre class=&quot;snippet-code-js lang-js prettyprint-override&quot;&gt;&lt;code&gt;var now = new Date();&#xD;&#xA;&#xD;&#xA;switch (true) {&#xD;&#xA;  case now.getHours() &amp;lt; 12:&#xD;&#xA;    console.log('Good morning');&#xD;&#xA;    break;&#xD;&#xA;  case now.getHours() &amp;lt; 17:&#xD;&#xA;    console.log('Good afternoon');&#xD;&#xA;    break;&#xD;&#xA;  default:&#xD;&#xA;    console.log('Good evening');&#xD;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;/p&gt;&#xA;"" OwnerUserId=""3558960"" LastActivityDate=""2017-06-09T08:10:12.820"" CommentCount=""5"" />
",44452603
44441665,"44441665      <row Id=""44441665"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44454014"" PostTypeId=""2"" ParentId=""44441665"" CreationDate=""2017-06-09T09:21:16.230"" Score=""0"" Body=""&lt;p&gt;As indicated by @Eric Pauley, I look at &lt;code&gt;TextTokens&lt;/code&gt; &amp;amp; &lt;code&gt;StartTagTokens&lt;/code&gt;. &#xA;Here is my solution&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    s := `&#xA;&amp;lt;p&amp;gt;Links:&amp;lt;/p&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;foo&quot;&amp;gt;Foo&amp;lt;/a&amp;gt;&amp;lt;li&amp;gt;&#xA;&amp;lt;a href=&quot;/bar/baz&quot;&amp;gt;BarBaz&amp;lt;/a&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;span&amp;gt;TEXT &amp;lt;b&amp;gt;I&amp;lt;/b&amp;gt; WANT&amp;lt;/span&amp;gt;&#xA;&amp;lt;script type='text/javascript'&amp;gt;&#xA;/* &amp;lt;![CDATA[ */&#xA;var post_notif_widget_ajax_obj = {&quot;ajax_url&quot;:&quot;http:\/\/site.com\/wp-admin\/admin-ajax.php&quot;,&quot;nonce&quot;:&quot;9b8270e2ef&quot;,&quot;processing_msg&quot;:&quot;Processing...&quot;};&#xA;/* ]]&amp;gt; */&#xA;&amp;lt;/script&amp;gt;`&#xA;&#xA;    domDocTest := html.NewTokenizer(strings.NewReader(s))&#xA;    previousStartTokenTest := domDocTest.Token()&#xA;loopDomTest:&#xA;    for {&#xA;        tt := domDocTest.Next()&#xA;        switch {&#xA;        case tt == html.ErrorToken:&#xA;            break loopDomTest // End of the document,  done&#xA;        case tt == html.StartTagToken:&#xA;            previousStartTokenTest = domDocTest.Token()&#xA;        case tt == html.TextToken:&#xA;            if previousStartTokenTest.Data == &quot;script&quot; {&#xA;                continue&#xA;            }&#xA;            TxtContent := strings.TrimSpace(html.UnescapeString(string(domDocTest.Text())))&#xA;            if len(TxtContent) &amp;gt; 0 {&#xA;                fmt.Printf(&quot;%s\n&quot;, TxtContent)&#xA;            }&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""710955"" LastActivityDate=""2017-06-09T09:21:16.230"" CommentCount=""0"" />
",44454014
44455197,"44455197      <row Id=""44455197"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44456075"" PostTypeId=""2"" ParentId=""44455197"" CreationDate=""2017-06-09T11:00:06.843"" Score=""1"" Body=""&lt;p&gt;In general for any type that can be &lt;code&gt;nil&lt;/code&gt; you can generate whatever string representation you like! It's because when implementing &lt;code&gt;fmt.Stringer&lt;/code&gt; interface (see &lt;a href=&quot;https://golang.org/pkg/fmt/#Stringer&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;) - or any function on a type that can be &lt;code&gt;nil&lt;/code&gt; - you can have a &lt;code&gt;nil&lt;/code&gt; for receiver value. In other words you can call methods on &lt;code&gt;nil&lt;/code&gt; objects in contrast with OOP languages. In &lt;a href=&quot;https://play.golang.org/p/XMGSiJJLtx&quot; rel=&quot;nofollow noreferrer&quot;&gt;this&lt;/a&gt; sample code, you'll see &lt;code&gt;ʕ◔ϖ◔ʔ hey nilo!&lt;/code&gt; for a &lt;code&gt;nil&lt;/code&gt; value of the second type, but &lt;code&gt;BOO DATA!!! :: Hi! :)&lt;/code&gt; when you have an element inside (it prints just the first element as a sample code).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And again keep in mind &lt;code&gt;nil&lt;/code&gt; &lt;a href=&quot;https://www.gmarik.info/blog/2016/understanding-golang-nil-value/&quot; rel=&quot;nofollow noreferrer&quot;&gt;is typed&lt;/a&gt; in go.&lt;/p&gt;&#xA;"" OwnerUserId=""54467"" LastEditorUserId=""54467"" LastEditDate=""2017-06-09T11:09:44.920"" LastActivityDate=""2017-06-09T11:09:44.920"" CommentCount=""0"" />
",44456075
44455853,"44455853      <row Id=""44455853"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44459305"" PostTypeId=""2"" ParentId=""44455853"" CreationDate=""2017-06-09T13:38:17.917"" Score=""2"" Body=""&lt;p&gt;You're operating too low by unmarshalling at the Text Level - you're still Unmarshalling 2 Texts elements which is why you are seeing an empty second element. You could try something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/xml&quot;&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type Root struct {&#xA;    Translation Text `xml:&quot;Texts&amp;gt;Text&amp;gt;Text&quot;`&#xA;}&#xA;&#xA;type Text []struct {&#xA;    Language string `xml:&quot;Language,attr&quot;`&#xA;    Value    string `xml:&quot;Value&quot;`&#xA;}&#xA;&#xA;func main() {&#xA;    foo := `&#xA;        &amp;lt;Root&amp;gt;&#xA;            &amp;lt;Texts&amp;gt;&#xA;                &amp;lt;Text&amp;gt;&#xA;                    &amp;lt;Text Language=&quot;EN&quot;&amp;gt;&#xA;                        &amp;lt;Value&amp;gt;One&amp;lt;/Value&amp;gt;&#xA;                    &amp;lt;/Text&amp;gt;&#xA;                    &amp;lt;Text Language=&quot;de&quot;&amp;gt;&#xA;                        &amp;lt;Value&amp;gt;Eins&amp;lt;/Value&amp;gt;&#xA;                    &amp;lt;/Text&amp;gt;&#xA;                &amp;lt;/Text&amp;gt;&#xA;            &amp;lt;/Texts&amp;gt;&#xA;        &amp;lt;/Root&amp;gt;&#xA;        `&#xA;&#xA;    var root Root&#xA;    e := xml.Unmarshal([]byte(foo), &amp;amp;root)&#xA;    if e != nil {&#xA;        panic(e)&#xA;    }&#xA;&#xA;    fmt.Printf(&quot;%+v\n&quot;, root)&#xA;}&#xA;&#xA;func (t *Text) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {&#xA;    tx := []struct{&#xA;        Language string `xml:&quot;Language,attr&quot;`&#xA;        Value    string `xml:&quot;Value&quot;`&#xA;    }{}&#xA;    d.DecodeElement(&amp;amp;tx, &amp;amp;start)&#xA;&#xA;&#xA;    tSl := *t&#xA;    for _, elem := range tx {&#xA;        switch elem.Language {&#xA;        case &quot;EN&quot;:&#xA;            tSl = append(tSl, struct{&#xA;                Language string `xml:&quot;Language,attr&quot;`&#xA;                Value    string `xml:&quot;Value&quot;`}{elem.Language, elem.Value})&#xA;        default:&#xA;            d.Skip()&#xA;        }&#xA;    }&#xA;    *t = tSl&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{Translation:[{Language:EN Value:One}]}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1652623"" LastActivityDate=""2017-06-09T13:38:17.917"" CommentCount=""2"" />
",44459305
44447458,"44447458      <row Id=""44447458"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44459369"" PostTypeId=""2"" ParentId=""44447458"" CreationDate=""2017-06-09T13:41:21.980"" Score=""0"" Body=""&lt;p&gt;From the comments, I tested this code myself without error (admittedly on 17.06-rc2 but the behavior shouldn't change). Given that a restart solved this, there appears to have been some corruption inside of docker that needed a bounce to correct (while rare, it wouldn't be the first time I've seen this). For others encountering problems in the future, I like to try the following in order:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Pull fresh images and/or rebuild without caching for any issues with the layers&lt;/li&gt;&#xA;&lt;li&gt;Restart docker for possible corruption inside the daemon&lt;/li&gt;&#xA;&lt;li&gt;Restart the entire host for runtime configuration issues that persist outside of the docker daemon&lt;/li&gt;&#xA;&lt;li&gt;With dockerd stopped, wipe &lt;code&gt;/var/lib/docker&lt;/code&gt; which will destroy all containers, images, and volumes (so backup first) and start clean&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""596285"" LastActivityDate=""2017-06-09T13:41:21.980"" CommentCount=""0"" />
",44459369
44461407,"44461407      <row Id=""44461407"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44461997"" PostTypeId=""2"" ParentId=""44461407"" CreationDate=""2017-06-09T15:50:29.173"" Score=""3"" Body=""&lt;p&gt;Using the global functions in &lt;code&gt;flag&lt;/code&gt; actually passes through to a global &lt;code&gt;flag.FlagSet&lt;/code&gt; called &lt;code&gt;flag.CommandLine&lt;/code&gt;. Internally, this prints errors to an output, which is stderr by default. You can suppress the messages by setting this explicitly to, for example, &lt;code&gt;ioutil.Discard&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;flag.CommandLine.SetOutput(ioutil.Discard)&#xA;flag.Parse()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will discard all messages output internally by &lt;code&gt;flag.Parse()&lt;/code&gt;. You could also log it to anywhere else you choose by passing in an appropriate &lt;code&gt;io.Writer&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-09T15:50:29.173"" CommentCount=""0"" />
",44461997
44425067,"44425067      <row Id=""44425067"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44464194"" PostTypeId=""2"" ParentId=""44425067"" CreationDate=""2017-06-09T18:04:29.093"" Score=""1"" Body=""&lt;p&gt;AQL is an admin and data browsing tool. It's not really Aerospike's SQL, as Aerospike doesn't natively implement a query language. Instead, all the Aerospike clients give you an API to make direct get, put, scan, query calls, and those are procedural, not declarative like SQL (where you state how you want the result and the server figures out a query plan). Piyush mentioned the predicate filtering API which is fantastic and lets you create complex queries over scans and secondary-index queries.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Specifically to your question about getting all the indexes, that's the type of thing you should use the info command for. Aerospike allows you to get and set config parameters through it, and get a wide range of metrics, run microbenchmark, etc. Everything you need for admin and monitoring.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can run &lt;a href=&quot;http://www.aerospike.com/docs/reference/info#sindex&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sindex&lt;/code&gt;&lt;/a&gt; through the standalone &lt;a href=&quot;http://www.aerospike.com/docs/tools/asinfo&quot; rel=&quot;nofollow noreferrer&quot;&gt;asinfo&lt;/a&gt; tool, or you can call it using the &lt;a href=&quot;https://github.com/aerospike/aerospike-client-go/blob/master/info.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;info command&lt;/a&gt; that any client provides.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;asinfo -v &quot;sindex&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""582436"" LastActivityDate=""2017-06-09T18:04:29.093"" CommentCount=""1"" />
",44464194
44464351,"44464351      <row Id=""44464351"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44464880"" PostTypeId=""2"" ParentId=""44464351"" CreationDate=""2017-06-09T18:51:09.933"" Score=""3"" Body=""&lt;p&gt;You can't in all cases.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Tests are compiled and executed by the &lt;code&gt;go test&lt;/code&gt; process. The stdout and stderr are captured by the parent process, and only displayed in verbose mode.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The exceptions are documented in the test code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// stream test output (no buffering) when no package has&#xA;// been given on the command line (implicit current directory)&#xA;// or when benchmarking.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So if you are in the package directory, or running benchmarks, the stdout and stderr will be streamed through the parent process. &lt;/p&gt;&#xA;"" OwnerUserId=""32880"" LastActivityDate=""2017-06-09T18:51:09.933"" CommentCount=""1"" />
",44464880
44250700,"44250700      <row Id=""44250700"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44466040"" PostTypeId=""2"" ParentId=""44250700"" CreationDate=""2017-06-09T20:14:41.573"" Score=""1"" Body=""&lt;p&gt;Broadly speaking, yes, the behavior of Clojure's &lt;code&gt;go&lt;/code&gt; macro is similar to &quot;goroutines&quot; when using the &quot;parking&quot; &lt;code&gt;&amp;lt;!&lt;/code&gt; and &lt;code&gt;&amp;gt;!&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, any performance effects are likely to be highly-specific to both the workload and the environment: operating system, number of cores, heap size, etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Clojure's &lt;code&gt;go&lt;/code&gt; macro compiles its contents into a state machine composed of lots of little functions, which are &lt;a href=&quot;https://github.com/clojure/core.async/blob/105acd5b40a66b6d1c80271a30ae273c6933c5bd/src/main/clojure/clojure/core/async/impl/dispatch.clj#L18&quot; rel=&quot;nofollow noreferrer&quot;&gt;dispatched&lt;/a&gt; through a standard Java &lt;a href=&quot;https://github.com/clojure/core.async/blob/105acd5b40a66b6d1c80271a30ae273c6933c5bd/src/main/clojure/clojure/core/async/impl/exec/threadpool.clj#L24&quot; rel=&quot;nofollow noreferrer&quot;&gt;thread pool&lt;/a&gt;. There isn't any other scheduling implemented in the Clojure implementation right now.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Go language has its own internal scheduler for &quot;goroutines,&quot; which may be able to do more sophisticated scheduling based on internal runtime knowledge. It also provides runtime inspection of &quot;goroutines&quot; which is not possible with Clojure's &lt;code&gt;go&lt;/code&gt; macro.&lt;/p&gt;&#xA;"" OwnerUserId=""63009"" LastActivityDate=""2017-06-09T20:14:41.573"" CommentCount=""0"" />
",44466040
44468048,"44468048      <row Id=""44468048"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44468091"" PostTypeId=""2"" ParentId=""44468048"" CreationDate=""2017-06-09T23:50:25.877"" Score=""2"" Body=""&lt;p&gt;Yes, this is possible. Here is your code updated:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func DoThing(fn interface{}) {&#xA;    // Get first arg of the function&#xA;    firstArg := reflect.TypeOf(fn).In(0)&#xA;&#xA;    // Get the PtrTo to the first function parameter&#xA;    structPtr := reflect.New(firstArg)&#xA;&#xA;    // Convert to Interface&#xA;    // Note that I can't assert this to .(myStruct) type&#xA;    instance := structPtr.Interface()&#xA;&#xA;    // Unmarshal the JSON&#xA;    json.Unmarshal(jsonData, instance)&#xA;&#xA;    // Call the function&#xA;    vfn := reflect.ValueOf(fn)&#xA;    vfn.Call([]reflect.Value{structPtr.Elem()})&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Changes made:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Pass &lt;code&gt;structPtr&lt;/code&gt; (a pointer) to &lt;code&gt;json.Unmarshal&lt;/code&gt;; pass a value and you will not see the changes&lt;/li&gt;&#xA;&lt;li&gt;Remove taking the address of &lt;code&gt;instance&lt;/code&gt; when passing to &lt;code&gt;json.Unmarshal&lt;/code&gt;; &lt;a href=&quot;https://golang.org/doc/faq#pointer_to_interface&quot; rel=&quot;nofollow noreferrer&quot;&gt;there is usually never a good reason to have a pointer to an interface&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;code&gt;structPtr&lt;/code&gt; instead of &lt;code&gt;instance&lt;/code&gt; when calling &lt;code&gt;fn&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/POmOyQBJYC&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/POmOyQBJYC&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""142162"" LastActivityDate=""2017-06-09T23:50:25.877"" CommentCount=""6"" />
",44468091
44468995,"44468995      <row Id=""44468995"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44469062"" PostTypeId=""2"" ParentId=""44468995"" CreationDate=""2017-06-10T02:53:37.837"" Score=""2"" Body=""&lt;p&gt;One trick is by waiting user input at the end of your application. Once user press any key, exit the application. The snippet:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    //Your original code...&#xA;&#xA;    fmt.Printf(&quot;Press any key to exit...&quot;)&#xA;    b := make([]byte, 1)&#xA;    os.Stdin.Read(b)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-06-10T02:53:37.837"" CommentCount=""1"" />
",44469062
44467121,"44467121      <row Id=""44467121"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44469349"" PostTypeId=""2"" ParentId=""44467121"" CreationDate=""2017-06-10T03:58:18.500"" Score=""0"" Body=""&lt;p&gt;I'm guessing you are just typing &lt;code&gt;go build&lt;/code&gt; from the &lt;code&gt;cmd/codenames&lt;/code&gt; directory, creating a binary called 'codenames' in that directory and running from there. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately the app is hard-coded to look for its assets in a ./assets/ directory relative to the binary. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;So you want your binary in the root of the app: &lt;/p&gt;&#xA;&#xA;&lt;p&gt;i.e&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;from the &lt;code&gt;cmd/codenames&lt;/code&gt; directory &lt;code&gt;go build -o ../../run-me-from-here&lt;/code&gt;  &lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;then from the root of the app &lt;code&gt;./run-me-from-here&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""1146094"" LastActivityDate=""2017-06-10T03:58:18.500"" CommentCount=""1"" />
",44469349
44473471,"44473471      <row Id=""44473471"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44474781"" PostTypeId=""2"" ParentId=""44473471"" CreationDate=""2017-06-10T15:03:54.007"" Score=""3"" Body=""&lt;p&gt;You may simply use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func myvariadic(ip ...string) {&#xA;    ip1, ip2 := ip[0], &quot;&quot;&#xA;    if len(ip) &amp;gt; 1 {&#xA;        ip2 = ip[1]&#xA;    }&#xA;    fmt.Println(ip1, ip2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But don't forget that variadic functions may be called with 0 arguments specified / passed as the value for the variadic parameter. What this means is that it is also legal (not a compile-time error) to call &lt;code&gt;myvariadic()&lt;/code&gt; with zero arguments, and then even &lt;code&gt;ip[0]&lt;/code&gt; will cause a runtime panic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If your function must receive at least one string and optionally a second, you should change the signature of your function to this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func myvariadic(ip1 string, ips ...string) {&#xA;    ip2 := &quot;&quot;&#xA;    if len(ips) &amp;gt; 1 {&#xA;        ip2 = ips[1]&#xA;    }&#xA;    fmt.Println(ip1, ip2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What this guarantees is that 1 &lt;code&gt;string&lt;/code&gt; will surely be passed (else it would be a compile-time error). This is also more efficient if only one argument is passed, as no slice allocation will be needed (&lt;code&gt;nil&lt;/code&gt; will be used for &lt;code&gt;ips&lt;/code&gt;). See more details on this here: &lt;a href=&quot;https://stackoverflow.com/questions/37270743/is-it-possible-to-trigger-compile-time-error-with-custom-library-in-golang/37271129#37271129&quot;&gt;Is it possible to trigger compile time error with custom library in golang?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If parameters are always 1 or 2 &lt;code&gt;string&lt;/code&gt; values, I'm not sure variadic parameters is justified at all, you may simply use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func myNonVariadic(ip1, ip2 string) {&#xA;    fmt.Println(ip1, ip2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And simply pass the empty string &lt;code&gt;&quot;&quot;&lt;/code&gt; at the caller if &lt;code&gt;ip2&lt;/code&gt; is not available.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you still want to stick to variadic function, another option would be to not introduce &lt;code&gt;ip1&lt;/code&gt; and &lt;code&gt;ip2&lt;/code&gt; inside the function, but simply use &lt;code&gt;ip[0]&lt;/code&gt; and &lt;code&gt;ip[1]&lt;/code&gt;. And to avoid runtime panic if less than 2 arguments is passed, you may append an empty string yourself, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func myvariadic(ip ...string) {&#xA;    if len(ip) &amp;lt; 2 {&#xA;        ip = append(ip, &quot;&quot;)&#xA;    }&#xA;    fmt.Println(ip[0], ip[1])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And the version that also deals with 0 arguments:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func myvariadic(ip ...string) {&#xA;    for len(ip) &amp;lt; 2 {&#xA;        ip = append(ip, &quot;&quot;)&#xA;    }&#xA;    fmt.Println(ip[0], ip[1])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This latter version makes sure the &lt;code&gt;ip&lt;/code&gt; variable (of slice type) will have at least 2 elements, even if 0 is passed.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-10T15:10:53.110"" LastActivityDate=""2017-06-10T15:10:53.110"" CommentCount=""0"" />
",44474781
44458410,"44458410      <row Id=""44458410"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44475583"" PostTypeId=""2"" ParentId=""44458410"" CreationDate=""2017-06-10T16:28:18.310"" Score=""5"" Body=""&lt;p&gt;Ok I followed step by step this post &lt;a href=&quot;http://moonlightbox.logdown.com/posts/2016/09/12/gitlab-ci-runner-register-x509-error&quot; rel=&quot;noreferrer&quot;&gt;http://moonlightbox.logdown.com/posts/2016/09/12/gitlab-ci-runner-register-x509-error&lt;/a&gt; and then it worked like a charm.&#xA;To prevent dead link i copy the steps below:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First edit ssl configuration on the Gitlab server (not the runner)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;vim /etc/pki/tls/openssl.cnf&#xA;&#xA;[ v3_ca ]&#xA;subjectAltName=IP:192.168.1.1 &amp;lt;---- Add this line. 192.168.1.1 is your GitLab server IP.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Re-generate self-signed certificate&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cd /etc/gitlab/ssl&#xA;sudo openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/gitlab/ssl/192.168.1.1.key -out /etc/gitlab/ssl/192.168.1.1.crt&#xA;sudo openssl dhparam -out /etc/gitlab/ssl/dhparam.pem 2048&#xA;sudo gitlab-ctl restart&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Copy the new CA to the Gutlab-CI runner&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;scp /etc/gitlab/ssl/192.168.1.1.crt root@192.168.1.2:/etc/gitlab-runner/certs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Thanks @Moon Light @Wassim Dhif&lt;/p&gt;&#xA;"" OwnerUserId=""6766644"" LastActivityDate=""2017-06-10T16:28:18.310"" CommentCount=""0"" />
",44475583
44476388,"44476388      <row Id=""44476388"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44476728"" PostTypeId=""2"" ParentId=""44476388"" CreationDate=""2017-06-10T18:30:48.160"" Score=""5"" Body=""&lt;p&gt;No, that would be a really poor design (&lt;em&gt;read exception at the end&lt;/em&gt;). By the way, it is very easy to check this, create a package named &lt;code&gt;a&lt;/code&gt;, consisting of 2 files: &lt;code&gt;aa.go&lt;/code&gt; and &lt;code&gt;ab.go&lt;/code&gt;. Have both import &lt;code&gt;fmt&lt;/code&gt;. Produce the executable (e.g. &lt;code&gt;go build&lt;/code&gt;, must called on the &lt;code&gt;main&lt;/code&gt; package) and check its size. Now move all code from &lt;code&gt;ab.go&lt;/code&gt; that uses the &lt;code&gt;fmt&lt;/code&gt; package to &lt;code&gt;aa.go&lt;/code&gt;, and remove the &lt;code&gt;fmt&lt;/code&gt; import from &lt;code&gt;ab.go&lt;/code&gt;. Produce the executable again. They will have the same size.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Packages are identified by their full path. No matter how many &lt;em&gt;files&lt;/em&gt; (of the same package) or how many (different) &lt;em&gt;packages&lt;/em&gt; refer to a package, the package will only be included once in the final executable binary.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that not everything will be included from used packages in the executable binary. Certain things that are not used / referred to may be excluded. For details see &lt;a href=&quot;https://stackoverflow.com/questions/38875016/splitting-client-server-code/38875901#38875901&quot;&gt;Splitting client/server code&lt;/a&gt;; and &lt;a href=&quot;https://stackoverflow.com/questions/42825926/how-to-remove-unused-code-at-compile-time?noredirect=1&amp;amp;lq=1&quot;&gt;How to remove unused code at compile time?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is one exception though, which is the &lt;a href=&quot;https://golang.org/pkg/plugin/&quot; rel=&quot;nofollow noreferrer&quot;&gt;plugins&lt;/a&gt; introduced in Go 1.8. Packages referred to by plugins will be included in the compiled plugin –they have to be–, because the plugin has no guarantee what packages will be available in the executable binary that will load it. So if the &lt;code&gt;fmt&lt;/code&gt; package is referred to by package &lt;code&gt;main&lt;/code&gt;, and also by a plugin, the code of the &lt;code&gt;fmt&lt;/code&gt; package will be included in both (in the executable binary and in the compiled plugin). It should be noted that even though the &lt;code&gt;fmt&lt;/code&gt; package's code will be present twice (once in the executable and once in the plugin), there will still be only one &quot;instance&quot; of the package in the runtime (in memory) (e.g. its global variables will have one instance, and it will only be initialized once).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;An &quot;edge&quot; case is &lt;a href=&quot;https://golang.org/cmd/go/#hdr-Vendor_Directories&quot; rel=&quot;nofollow noreferrer&quot;&gt;vendored packages&lt;/a&gt;. If a package is vendored in a &lt;code&gt;vendor&lt;/code&gt; folder, and a package refers to this vendored package, that is considered distinct from the original (that is vendored), and if the original is also referred to by another package, both will be included in the executable binary (but they are not considered the same, the full path of the vendored is different from the full path of the original).&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-11T16:39:07.273"" LastActivityDate=""2017-06-11T16:39:07.273"" CommentCount=""1"" />
",44476728
44475474,"44475474      <row Id=""44475474"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44477842"" PostTypeId=""2"" ParentId=""44475474"" CreationDate=""2017-06-10T20:39:29.793"" Score=""1"" Body=""&lt;p&gt;One thing to consider before getting into the answer is your example code will not compile. To define a type of struct in Go, you would need to change your syntax to &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type output struct {&#xA;    index       int&#xA;    description string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In terms of a potential solution to your problem - if you already reliably have unique index's as well as the expected count of the result set - you should not have to do any sorting at all. Instead synchronize the go routines over a channel and insert the output in an allocated slice at the respective index. You can then iterate over that slice to write the contents to a file. For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ch := make(chan output) //each go routine will write to this channel&#xA;wg := new(sync.WaitGroup) //wait group to sync all go routines&#xA;&#xA;//execute 16 goroutines &#xA;for i := 0; i &amp;lt; 16; i++ {&#xA;    wg.Add(1)&#xA;    go worker(ch, wg) //this is expecting each worker func to call wg.Done() when completing its portion of work&#xA;}&#xA;&#xA;//create a &quot;quit&quot; channel that will be used to signal to the select statement below that your go routines are all done&#xA;quit := make(chan bool)&#xA;go func() {&#xA;    wg.Wait()&#xA;    quit &amp;lt;- true&#xA;}()&#xA;&#xA;//initialize a slice with length and capacity to 1mil, the expected result size mentioned in your question&#xA;sorted := make([]string, 1000000, 1000000)&#xA;&#xA;//use the for loop, select pattern to sync the results from your 16 go routines and insert them into the sorted slice&#xA;for {&#xA;    select {&#xA;        case output := &amp;lt;-ch:&#xA;            //this is not robust - check notes below example&#xA;            sorted[output.index] = output.description&#xA;        case &amp;lt;-quit:&#xA;            //implement a function you could pass the sorted slice to that will write the results&#xA;            // Ex:  writeToFile(sorted)&#xA;            return&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;A couple notes on this solution: it is dependent upon you knowing the size of the expected result set. If you do not know what the size of the result set is - in the select statement you will need to check if the index is read from &lt;code&gt;ch&lt;/code&gt; exceeds the length of the &lt;code&gt;sorted&lt;/code&gt; slice and allocate additional space before inserting our you program will crash as a result of an out of bounds error&lt;/p&gt;&#xA;"" OwnerUserId=""1694885"" LastEditorUserId=""1694885"" LastEditDate=""2017-06-10T20:45:36.000"" LastActivityDate=""2017-06-10T20:45:36.000"" CommentCount=""0"" />
",44477842
44467219,"44467219      <row Id=""44467219"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44478060"" PostTypeId=""2"" ParentId=""44467219"" CreationDate=""2017-06-10T21:02:57.647"" Score=""0"" Body=""&lt;p&gt;I found the problem. It sat before the monitor.The data was inserted actually. Sqlite client handles the blob as text and terminates printing at the &quot;0&quot;. Inspecting the database with sqlitebrowser showed the complete entry. &lt;/p&gt;&#xA;"" OwnerUserId=""921051"" LastActivityDate=""2017-06-10T21:02:57.647"" CommentCount=""0"" />
",44478060
44477897,"44477897      <row Id=""44477897"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44478116"" PostTypeId=""2"" ParentId=""44477897"" CreationDate=""2017-06-10T21:10:49.563"" Score=""2"" Body=""&lt;p&gt;So your C &lt;code&gt;normalize&lt;/code&gt; macro assigns &lt;code&gt;c&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is not equal to &lt;code&gt;0xffffffff&lt;/code&gt;, or to &lt;code&gt;0&lt;/code&gt; otherwise. I'm not sure what kind of normalization it is, but it's not my concern now.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So given the Go function signature you provided, this would work:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func normalize(a uint32, c *uint32) {&#xA;    if a != 0xffffffff {&#xA;        *c = a&#xA;    } else {&#xA;        *c = 0&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, I'm not sure why not just return a value instead of writing it via &lt;code&gt;c&lt;/code&gt; pointer?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func normalize(a uint32) {&#xA;    if a != 0xffffffff {&#xA;        return a&#xA;    }&#xA;    return 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Side note: the same applies to your C macro. By the way, the macro evaluates &lt;code&gt;a&lt;/code&gt; twice, this might come as a surprise if you ever pass some function with side effects as &lt;code&gt;a&lt;/code&gt;. Any reason not to use (inline) function instead of a macro, or at least make it so that it evaluates to a new value, instead of assigning &lt;code&gt;c&lt;/code&gt; to it?&lt;/p&gt;&#xA;"" OwnerUserId=""1099240"" LastActivityDate=""2017-06-10T21:10:49.563"" CommentCount=""2"" />
",44478116
44478920,"44478920      <row Id=""44478920"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44478956"" PostTypeId=""2"" ParentId=""44478920"" CreationDate=""2017-06-10T23:16:42.993"" Score=""1"" Body=""&lt;p&gt;when you increment both j and k on the last loop go doesn't like it&lt;/p&gt;&#xA;&#xA;&lt;p&gt;so try to change your code to &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func naive(z, x, y []uint32, n int) {&#xA;    var i, j, k int&#xA;    var A, B uint32&#xA;&#xA;    for i = 0; i &amp;lt; n; i++ {&#xA;        B = 0&#xA;&#xA;        for j = 1; j &amp;lt;= i; j++ {&#xA;            muladd(x[j], y[i-j], &amp;amp;A)&#xA;        }&#xA;&#xA;        for k = 1; j &amp;lt; n; j++ {&#xA;            muladd(x[j], y[n-k], &amp;amp;B)&#xA;            k++&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;pay attention to the last loop I just moved the &lt;code&gt;k++&lt;/code&gt; statement inside the loop&lt;/p&gt;&#xA;"" OwnerUserId=""3553432"" LastEditorUserId=""3553432"" LastEditDate=""2017-06-12T00:02:35.463"" LastActivityDate=""2017-06-12T00:02:35.463"" CommentCount=""1"" />
",44478956
44479847,"44479847      <row Id=""44479847"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44480085"" PostTypeId=""2"" ParentId=""44479847"" CreationDate=""2017-06-11T03:21:18.160"" Score=""2"" Body=""&lt;p&gt;You have asked a good question.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The command's order in the Dockerfile really matters. Put first the things that don't change frecuently, and later those that are most likely to change in every build:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;FROM golang:1.8&#xA;&#xA;RUN go get -d -v ./...&#xA;RUN go install -v ./...&#xA;&#xA;COPY . /go/src/github.com/codeblooded/test1&#xA;WORKDIR /go/src/github.com/codeblooded/test1&#xA;&#xA;RUN echo $PATH&#xA;&#xA;RUN go build -o test1 .&#xA;CMD [&quot;test1&quot;]&#xA;EXPOSE 3470&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;When a layer change regarding previous build, docker discards the following cached layers an runs them again, sometimes wasting your time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Pay attention to the &quot;Using cache&quot; sentence that docker output in each layer that is re-used from previous build.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another recommendation, for your dev work, use &lt;a href=&quot;https://github.com/pilu/fresh&quot; rel=&quot;nofollow noreferrer&quot;&gt;fresh&lt;/a&gt; to re-build your go app automatically every time you change the code. Just installing it in the container and simply using &lt;code&gt;command: fresh&lt;/code&gt; in your docker-compose.yml&lt;/p&gt;&#xA;"" OwnerUserId=""1094246"" LastEditorUserId=""1094246"" LastEditDate=""2017-06-16T18:57:20.213"" LastActivityDate=""2017-06-16T18:57:20.213"" CommentCount=""0"" />
",44480085
44475923,"44475923      <row Id=""44475923"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44480324"" PostTypeId=""2"" ParentId=""44475923"" CreationDate=""2017-06-11T04:18:41.577"" Score=""1"" Body=""&lt;p&gt;Go's garbage collector will not try to reclaim memory allocated using the C memory allocator.  What you are describing should be safe.  Of course, you may not be able to free the C memory, because you don't know when Go will be done with it.&lt;/p&gt;&#xA;"" OwnerUserId=""2774002"" LastActivityDate=""2017-06-11T04:18:41.577"" CommentCount=""0"" />
",44480324
44480524,"44480524      <row Id=""44480524"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44480736"" PostTypeId=""2"" ParentId=""44480524"" CreationDate=""2017-06-11T05:39:29.483"" Score=""2"" Body=""&lt;p&gt;Yes you can pass structs. But that's not the problem in your OP. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Channels expect the &lt;code&gt;receiver&lt;/code&gt; to be blocking, waiting for the &lt;code&gt;sender&lt;/code&gt;.  This is done with Goroutines.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You sent a value on a channel, when there was no receiver ready to receive.  That is what caused your deadlock.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So wrap your sender in a goroutine, which will not execute right away. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type name struct {&#xA;    name string&#xA;    age  int&#xA;}&#xA;&#xA;func main() {&#xA;    c := make(chan name)&#xA;&#xA;    go func() {&#xA;        c &amp;lt;- name{&quot;sfsaf&quot;, 1}&#xA;        close(c)&#xA;    }()&#xA;&#xA;    for n := range c {&#xA;        fmt.Println(n)&#xA;    }&#xA;&#xA;    fmt.Println(&quot;channel was closed (all done!).&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See it in the playground: &lt;a href=&quot;https://play.golang.org/p/uaSuCaB4Ms&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/uaSuCaB4Ms&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This works because the sender's goroutine is not executing yet.  Not until the current goroutine executing gets blocked.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;And we get blocked on the &lt;code&gt;for n := range c&lt;/code&gt; loop.  This is the receiver, sitting and waiting for values.  (It is a common pattern to use the for loop to iterate over channel values as it will sit and block, waiting for values).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So now that we are blocked waiting to receive values in the &lt;code&gt;for&lt;/code&gt; loop, the inline gorouting will now execute, to send our value on the channel.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In addition, we follow safe practices and tidy up after ourselves and &lt;code&gt;close(c)&lt;/code&gt; the channel, signalling the &lt;code&gt;for&lt;/code&gt; loop or &lt;code&gt;select&lt;/code&gt; statement that there will be no more values sent.  &lt;strong&gt;&lt;em&gt;The sender always closes, never the receiver&lt;/em&gt;&lt;/strong&gt;. This is the pattern the &lt;code&gt;for&lt;/code&gt; range loop uses to exit the for loop, and continue executing the rest of your code.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;As a side note, you did well by passing the value of the struct - not a pointer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you passed a pointer, you'd have to implement some mutex lock around the object to prevent a R/W panic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.golang.org/share-memory-by-communicating&quot; rel=&quot;nofollow noreferrer&quot;&gt;Do not communicate by sharing memory; instead, share memory by communicating.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Stick to passing values, not pointers, around your channels and goroutines and reap the benefits.&lt;/p&gt;&#xA;"" OwnerUserId=""56693"" LastEditorUserId=""56693"" LastEditDate=""2017-06-11T06:03:22.437"" LastActivityDate=""2017-06-11T06:03:22.437"" CommentCount=""0"" />
",44480736
44480989,"44480989      <row Id=""44480989"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44481041"" PostTypeId=""2"" ParentId=""44480989"" CreationDate=""2017-06-11T06:33:46.260"" Score=""1"" Body=""&lt;p&gt;If in a map you want to store multiple values associated with the same key, the value type must be suitable for that. A struct isn't, but a &lt;a href=&quot;https://golang.org/ref/spec#Slice_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;slice&lt;/a&gt; is a perfect choice.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So change your value type to &lt;code&gt;[]A&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;letSee := map[X][]A{}&#xA;letSee[X{1}] = []A{A{&quot;T&quot;, B{&quot;T1&quot;, C{&quot;T11&quot;, &quot;T12&quot;}}}}&#xA;letSee[X{1}] = append(letSee[X{1}], A{&quot;L&quot;, B{&quot;L1&quot;, C{&quot;L11&quot;, &quot;L12&quot;}}})&#xA;&#xA;fmt.Printf(&quot;%+v&quot;, letSee)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/g1-aWge1IA&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;map[{key:1}:[{value1:T value2:{value3:T1 value4:{value5:T11 value6:T12}}}&#xA;    {value1:L value2:{value3:L1 value4:{value5:L11 value6:L12}}}]]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-11T06:55:34.380"" LastActivityDate=""2017-06-11T06:55:34.380"" CommentCount=""1"" />
",44481041
44481659,"44481659      <row Id=""44481659"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44482304"" PostTypeId=""2"" ParentId=""44481659"" CreationDate=""2017-06-11T09:29:51.550"" Score=""2"" Body=""&lt;p&gt;You should remove the &lt;code&gt;default&lt;/code&gt; clauses from the &lt;code&gt;select&lt;/code&gt; statements. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since your &lt;code&gt;select&lt;/code&gt; statement is within a &lt;code&gt;for&lt;/code&gt; loop and the &lt;code&gt;default&lt;/code&gt; clause prevents it from blocking, the loop has to go through a lot of cycles before any message will be received. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Looks like Playground detects it and stops the program.&lt;/p&gt;&#xA;"" OwnerUserId=""4283005"" LastEditorUserId=""4283005"" LastEditDate=""2017-06-11T09:37:05.717"" LastActivityDate=""2017-06-11T09:37:05.717"" CommentCount=""2"" />
",44482304
44482738,"44482738      <row Id=""44482738"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44482777"" PostTypeId=""2"" ParentId=""44482738"" CreationDate=""2017-06-11T10:28:53.983"" Score=""1"" Body=""&lt;p&gt;You can generate a random number with &lt;a href=&quot;https://godoc.org/crypto/rand#Read&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;crypto.Rand&lt;/code&gt;&lt;/a&gt;, and then convert those bytes to an int64 using the &lt;a href=&quot;https://godoc.org/encoding/binary&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;binary&lt;/code&gt;&lt;/a&gt; package:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func randint64() (int64, error) {&#xA;    var b [8]byte&#xA;    if _, err := rand.Read(b[:]); err != nil {&#xA;        return 0, err&#xA;    }&#xA;    return int64(binary.LittleEndian.Uint64(b[:])), nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/2Q8tvttqbJ&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/2Q8tvttqbJ&lt;/a&gt; (result is cached)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you look at the &lt;a href=&quot;https://golang.org/src/encoding/binary/binary.go#L75&quot; rel=&quot;nofollow noreferrer&quot;&gt;source code for &lt;code&gt;LittleEndian.Uint64&lt;/code&gt;&lt;/a&gt;, you can see it's simply performing a few bit operations on the data; something that you could implemented for yourself.&lt;/p&gt;&#xA;"" OwnerUserId=""142162"" LastActivityDate=""2017-06-11T10:28:53.983"" CommentCount=""1"" />
",44482777
44482683,"44482683      <row Id=""44482683"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44482948"" PostTypeId=""2"" ParentId=""44482683"" CreationDate=""2017-06-11T10:47:30.380"" Score=""0"" Body=""&lt;p&gt;I think you not only installed the &lt;code&gt;Golang&lt;/code&gt; but also install/configure &lt;code&gt;Visual Studio Code&lt;/code&gt; IDE with Go Extension. Those &lt;em&gt;alien&lt;/em&gt; repositories were created when the extension installs needed tools. The full list of tools can be found &lt;a href=&quot;https://github.com/Microsoft/vscode-go/wiki/Go-tools-that-the-Go-extension-depends-on&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;. Or probably other similar IDE/extension which depends on those tools.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Yes you can clear the sources, since the IDE depends only on the compiled binary, and the sources are only needed during compilation.&lt;/li&gt;&#xA;&lt;li&gt;Same as (1). Refers to &lt;a href=&quot;https://github.com/golang/go/wiki/SubRepositories&quot; rel=&quot;nofollow noreferrer&quot;&gt;Golang SubRepositories&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Same as (1)&lt;/li&gt;&#xA;&lt;li&gt;For now, you can clear the content of &lt;code&gt;pkg&lt;/code&gt; directory but don't remove the directory. In the future, when you install some packages/libraries, the compiled version may be created under the directories, so don't remove it. For &lt;code&gt;bin&lt;/code&gt; directory, don't remove the files inside it, because the IDE (Go Extension) depends on them. &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;But, since I don't know exactly what else you've done, I think before you completely remove them, try just to move them outside your &lt;code&gt;GOPATH&lt;/code&gt; or take a backup and see whether your &lt;code&gt;dev environment&lt;/code&gt; works as expected. &lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-06-11T10:47:30.380"" CommentCount=""1"" />
",44482948
44483409,"44483409      <row Id=""44483409"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44483576"" PostTypeId=""2"" ParentId=""44483409"" CreationDate=""2017-06-11T11:56:29.643"" Score=""3"" Body=""&lt;p&gt;Your &lt;code&gt;cmplt&lt;/code&gt; is expecting a &lt;code&gt;uint64&lt;/code&gt; slice, and not a 3 element array. &lt;a href=&quot;https://golang.org/ref/spec#Slice_expressions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Taking a slice&lt;/a&gt; of &lt;code&gt;table[i]&lt;/code&gt; will fix the error:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cmplt(in, table[i][:])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""142162"" LastActivityDate=""2017-06-11T11:56:29.643"" CommentCount=""0"" />
",44483576
44365009,"44365009      <row Id=""44365009"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44484256"" PostTypeId=""2"" ParentId=""44365009"" CreationDate=""2017-06-11T13:14:19.650"" Score=""1"" Body=""&lt;p&gt;I tried with this and works:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Foo struct {                                                                                                                                                    &#xA;    mock.Mock                                                                                                                                                          &#xA;}                                                                                                                                                                    &#xA;&#xA;func (m *Foo) Bar() {                                                                                                                                                &#xA;    m.Called()                                                                                                                                                         &#xA;}                                                                                                                                                                    &#xA;&#xA;func TestFoo(t *testing.T) {                                                                                                                                         &#xA;    m := &amp;amp;Foo{}                                                                                                                                                        &#xA;    m.On(&quot;Bar&quot;).Return(nil)                                                                                                                                            &#xA;&#xA;    m.Bar()                                                                                                                                                            &#xA;    m.AssertCalled(t, &quot;Bar&quot;)                                                                                                                                           &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As stated by &lt;strong&gt;Chris Drew&lt;/strong&gt;, you've to use a receiver pointer on &lt;em&gt;Bar&lt;/em&gt; method's declaration.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Additionally, you've to istantiate a new structure as pointer and mock the method to return a value.&lt;/p&gt;&#xA;"" OwnerUserId=""5285360"" LastActivityDate=""2017-06-11T13:14:19.650"" CommentCount=""1"" />
",44484256
44486749,"44486749      <row Id=""44486749"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44486854"" PostTypeId=""2"" ParentId=""44486749"" CreationDate=""2017-06-11T17:45:00.620"" Score=""3"" Body=""&lt;p&gt;There is no such thing as passing by reference in Go. Whenever you pass anything (pointer, slice header, map) it is always passed by value. The question is what exactly is being passed by value (i.e. what is the actual &lt;code&gt;value&lt;/code&gt; of the type).  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;When u pass a map, you pass a copy of &lt;strong&gt;the pointer&lt;/strong&gt; to its header, which contains a set pointers to the buckets, as in the implementation of the HashTable. &lt;a href=&quot;https://github.com/golang/go/blob/master/src/runtime/hashmap.go#L106&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/golang/go/blob/master/src/runtime/hashmap.go#L106&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Therefore it rarely makes sense to pass a pointer to the map, because the operation of copying a map header pointer is extremely cheap. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now why the order is different, this is simply due to internal implementation of the map, ranging over the keys occurs in a random fashion. Again this is just an implementation details. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;As @icza correctly pointed out, passing a map is actually passing a copy of a &lt;em&gt;pointer&lt;/em&gt; to the map header, not the map header itself. Sorry for the confusion&lt;/p&gt;&#xA;"" OwnerUserId=""1597656"" LastEditorUserId=""1597656"" LastEditDate=""2017-06-11T20:42:38.167"" LastActivityDate=""2017-06-11T20:42:38.167"" CommentCount=""2"" />
",44486854
44478623,"44478623      <row Id=""44478623"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44487252"" PostTypeId=""2"" ParentId=""44478623"" CreationDate=""2017-06-11T18:27:06.577"" Score=""1"" Body=""&lt;p&gt;Found it why your snippet doesn't work as expected.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Typically &lt;code&gt;CombinedOutput()&lt;/code&gt; and &lt;code&gt;Output()&lt;/code&gt; returns the result after completion of given command.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here &lt;code&gt;gcloud&lt;/code&gt; command didn't finish the execution, so we have to read it realtime. I have tested the below code snippet, it works.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cmd := exec.Command(&quot;bash&quot;, &quot;-c&quot;, &quot;gcloud auth application-default login&quot;)&#xA;stderr, err := cmd.StderrPipe()&#xA;if err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&#xA;// Start command&#xA;if err = cmd.Start(); err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&#xA;// prevent main() to exit before cmd completes&#xA;defer cmd.Wait()&#xA;&#xA;// read cmd output and send it to stdout&#xA;// repalce os.Stderr as per your need&#xA;go io.Copy(os.Stdout, stderr)&#xA;&#xA;fmt.Println(&quot;Standby to read...&quot;)&#xA;fmt.Println()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is just an approach, implement yours. Good luck!&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-06-11T18:27:06.577"" CommentCount=""1"" />
",44487252
44487910,"44487910      <row Id=""44487910"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44488037"" PostTypeId=""2"" ParentId=""44487910"" CreationDate=""2017-06-11T19:43:51.857"" Score=""1"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;em&gt;Which one of the following methods are better performance-wise?&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Definitely not this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;str := &quot;large text&quot;&#xA;str2 := []byte(str)&#xA;for _, s := range str2 {&#xA;  // use s&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Strings are immutable. &lt;code&gt;[]byte&lt;/code&gt; is mutable. That means &lt;code&gt;[]byte(str)&lt;/code&gt; makes a copy. So the above will copy the entire string. I've found being unaware of when strings are copied to be a major source of performance problems for large strings.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If &lt;code&gt;str2&lt;/code&gt; is never altered, the compiler &lt;em&gt;may&lt;/em&gt; optimize away the copy. For this reason, it's better to write the above like so to ensure the byte array is never altered.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;str := &quot;large text&quot;&#xA;for _, s := range []byte(str) {&#xA;  // use s&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That way there's no &lt;code&gt;str2&lt;/code&gt; to possibly be modified later and ruin the optimization.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But this is a bad idea because it will corrupt any multi-byte characters. See below.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;As for the byte/rune conversion, performance is not a consideration as they are not equivalent. &lt;code&gt;c&lt;/code&gt; will be a rune, and &lt;code&gt;str[i]&lt;/code&gt; will be a byte. If your string contains multi-byte characters, you have to use runes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import(&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    str := &quot;snow ☃ man&quot;&#xA;    for i, c := range str {&#xA;        fmt.Printf(&quot;c:%c str[i]:%c\n&quot;, c, str[i])&#xA;    }&#xA;}&#xA;&#xA;$ go run ~/tmp/test.go&#xA;c:s str[i]:s&#xA;c:n str[i]:n&#xA;c:o str[i]:o&#xA;c:w str[i]:w&#xA;c:  str[i]: &#xA;c:☃ str[i]:â&#xA;c:  str[i]: &#xA;c:m str[i]:m&#xA;c:a str[i]:a&#xA;c:n str[i]:n&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that using &lt;code&gt;str[i]&lt;/code&gt; corrupts the multi-byte Unicode snowman, it only contains the first byte of the multi-byte character.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There's no performance difference anyway as &lt;code&gt;range str&lt;/code&gt; already must do the work to go character-by-character, not byte by byte.&lt;/p&gt;&#xA;"" OwnerUserId=""14660"" LastEditorUserId=""14660"" LastEditDate=""2017-06-11T21:09:07.677"" LastActivityDate=""2017-06-11T21:09:07.677"" CommentCount=""3"" />
",44488037
44488012,"44488012      <row Id=""44488012"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44488092"" PostTypeId=""2"" ParentId=""44488012"" CreationDate=""2017-06-11T19:48:35.697"" Score=""2"" Body=""&lt;p&gt;Include the full import path from your go source folder so something like this :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import(&#xA;    &quot;fmt&quot;&#xA;    &quot;project/folder&quot;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I also highly recommend you restructure your GOPATH directory for organisation purposes so you can find importing your own projects much easier. &lt;a href=&quot;https://astaxie.gitbooks.io/build-web-application-with-golang/en/01.2.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://astaxie.gitbooks.io/build-web-application-with-golang/en/01.2.html&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8067560"" LastEditorUserId=""8067560"" LastEditDate=""2017-06-11T20:43:23.040"" LastActivityDate=""2017-06-11T20:43:23.040"" CommentCount=""2"" />
",44488092
44475783,"44475783      <row Id=""44475783"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44489565"" PostTypeId=""2"" ParentId=""44475783"" CreationDate=""2017-06-11T23:11:11.160"" Score=""0"" Body=""&lt;p&gt;OK, so, to answer my own question in case this stuff comes up again.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The problem is poorly javascript side and I'm afraid it has to do with the fact that the web apis for form&amp;amp;files aren't really up to scruff.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is the solution I came up with javascript side:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;const uploadFile = (form_id: string) =&amp;gt; {&#xA;    const uploadForm: HTMLFormElement = &amp;lt;HTMLFormElement&amp;gt;document.getElementById(form_id);&#xA;    document.getElementById(&quot;submit_form&quot;).addEventListener(&quot;click&quot;, function(e) {&#xA;        e.preventDefault()&#xA;&#xA;        let reader: FileReader = new FileReader();&#xA;        reader.readAsArrayBuffer((&amp;lt;HTMLInputElement&amp;gt;document.getElementById('file')).files[0]);&#xA;&#xA;        reader.onload = function(evt) {&#xA;&#xA;            const formData = new FormData(uploadForm);&#xA;            const isPublic: boolean = (&amp;lt;HTMLInputElement&amp;gt;document.getElementById('public_switch')).checked;&#xA;            formData.append('file', (&amp;lt;any&amp;gt;evt.target).result);&#xA;            formData.append('compression', (&amp;lt;HTMLInputElement&amp;gt;document.getElementById('compression')).value);&#xA;            formData.append('public', String(isPublic));&#xA;            const xhr = new XMLHttpRequest();&#xA;            xhr.open(&quot;POST&quot;, &quot;/upload/&quot;);&#xA;            xhr.send(formData);&#xA;            xhr.onreadystatechange = function() {&#xA;                console.log(xhr.responseText + '  \n status is: ' + xhr.statusText);&#xA;            }&#xA;&#xA;        };&#xA;    });&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Quite simple really, but it took a long time to find since in the typical javascipt-community spirit all online examples are cluttered with shit.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The handling of large files should be done using a FileReader object which is basically called as such:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; let reader = new FileReader();&#xA;        reader.readAsArrayBuffer(dom_element_with_file_input.files[0]);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then its used much like any other async web api:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    reader.onload = function(e) {&#xA;const your_file = e.target.result&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The variable 'your_file' is then used for whatever you want to do with the file. In my case it was appending to form data which is done like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;        reader.onload = function(e) {&#xA;    const your_file = e.target.result&#xA;const formData = new FormData(dom_element_of_type_form);&#xA;formData.append('my_file', your_file);&#xA;formData.append('other_stuff', 'a string with metadata');&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'm leaving this as an example since I could not actually find any so post with a clear example of the file Reader API, expect for ones cluttered in literally hundreds of lines of code. The example I followed almost to the T is the one here:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&lt;/a&gt;. But I used 'readAsArrayBuffer' instead for speed purposes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One last note is that the reader API seems to be very slow and consumes a lot of ressource, which means that for arbitrary file sizes browser may simply crash, I had this problem with chromioum and I still can't fix it, so I'm open to suggestions, if I find a fix for browser crashes (or at least a way to handle them gracefully) I will update the question and mark it as the answer, in the meanwhile if anyone find a duplicate of my answer or a way to fix the browser crashes please tell me.&lt;/p&gt;&#xA;"" OwnerUserId=""7156008"" LastActivityDate=""2017-06-11T23:11:11.160"" CommentCount=""0"" />
",44489565
44488888,"44488888      <row Id=""44488888"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44489637"" PostTypeId=""2"" ParentId=""44488888"" CreationDate=""2017-06-11T23:24:19.070"" Score=""1"" Body=""&lt;p&gt;For example,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;bytes&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;image&quot;&#xA;    &quot;os&quot;&#xA;&#xA;    _ &quot;image/jpeg&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    fName := &quot;ggk3Z.jpg&quot;&#xA;    f, err := os.Open(fName)&#xA;    if err != nil {&#xA;        fmt.Fprintln(os.Stderr, err)&#xA;        os.Exit(1)&#xA;    }&#xA;    defer f.Close()&#xA;    img, _, err := image.Decode(f)&#xA;    if err != nil {&#xA;        fmt.Fprintln(os.Stderr, err)&#xA;        os.Exit(1)&#xA;    }&#xA;&#xA;    // http://www.dcode.fr/binary-image&#xA;    var txt bytes.Buffer&#xA;    bounds := img.Bounds()&#xA;    for y := bounds.Min.Y; y &amp;lt; bounds.Max.Y; y++ {&#xA;        for x := bounds.Min.X; x &amp;lt; bounds.Max.X; x++ {&#xA;            r, g, b, _ := img.At(x, y).RGBA()&#xA;            bin := &quot;0&quot;&#xA;            if float64((r+g+b))/3 &amp;gt; 0.5 {&#xA;                bin = &quot;1&quot;&#xA;            }&#xA;            txt.WriteString(bin)&#xA;        }&#xA;        txt.WriteString(&quot;\n&quot;)&#xA;    }&#xA;    fmt.Fprint(os.Stdout, txt.String())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-06-12T00:45:41.477"" LastActivityDate=""2017-06-12T00:45:41.477"" CommentCount=""6"" />
",44489637
44490565,"44490565      <row Id=""44490565"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44490652"" PostTypeId=""2"" ParentId=""44490565"" CreationDate=""2017-06-12T02:34:16.320"" Score=""0"" Body=""&lt;p&gt;Instead of &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;const options = new RequestOptions(headers);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;const options = new RequestOptions({ headers: headers });&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;a href=&quot;https://github.com/angular/angular/blob/4.0.0/packages/http/src/base_request_options.ts#L84&quot; rel=&quot;nofollow noreferrer&quot;&gt;constructor for &lt;code&gt;RequestOptions&lt;/code&gt;&lt;/a&gt; requires a &lt;code&gt;RequestOptionsArgs&lt;/code&gt;, not a &lt;code&gt;Headers&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Also, it seems you are not quite understanding CORS. You don't really need to send any header from the front-end to the back end (the browser will append what you need automatically when it notices it is a CORS request). Those headers (&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;) should be sent by the server only.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For your back-end, here's an improved suggestion (should handle most cases):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func Cors() gin.HandlerFunc {&#xA;    log.Println(&quot;CORS Middleware&quot;)&#xA;    return func(c *gin.Context) {&#xA;        c.Writer.Header().Set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;)&#xA;        c.Writer.Header().Set(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, OPTIONS, PUT, DELETE, UPDATE&quot;)&#xA;        c.Writer.Header().Set(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization&quot;)&#xA;        c.Writer.Header().Set(&quot;Access-Control-Expose-Headers&quot;, &quot;Content-Length&quot;)&#xA;        c.Writer.Header().Set(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;)&#xA;        c.Writer.Header().Set(&quot;Access-Control-Max-Age&quot;, &quot;86400&quot;)&#xA;        // c.Writer.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;) // uncomment if needed&#xA;&#xA;         if c.Request.Method == &quot;OPTIONS&quot; {&#xA;             fmt.Println(&quot;OPTIONS&quot;)&#xA;             c.AbortWithStatus(200)&#xA;         } else {&#xA;             c.Next()&#xA;         }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1850609"" LastEditorUserId=""1850609"" LastEditDate=""2017-06-12T02:45:24.647"" LastActivityDate=""2017-06-12T02:45:24.647"" CommentCount=""5"" />
",44490652
44492930,"44492930      <row Id=""44492930"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44493165"" PostTypeId=""2"" ParentId=""44492930"" CreationDate=""2017-06-12T07:00:49.353"" Score=""2"" Body=""&lt;p&gt;Just run, &lt;code&gt;-u&lt;/code&gt; is used for update.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go get -u github.com/kahing/goofys&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then run (optional step, if you see a binary &lt;code&gt;goofys&lt;/code&gt; in &lt;code&gt;$GOPATH/bin&lt;/code&gt;; go install is not required. See comments why)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go install github.com/kahing/goofys&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-06-12T18:35:13.403"" LastActivityDate=""2017-06-12T18:35:13.403"" CommentCount=""7"" />
",44493165
44495489,"44495489      <row Id=""44495489"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44495620"" PostTypeId=""2"" ParentId=""44495489"" CreationDate=""2017-06-12T09:13:03.123"" Score=""0"" Body=""&lt;p&gt;I think the doc is pretty clear on this. Both &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Marshal&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json.Marshal()&lt;/code&gt;&lt;/a&gt;&#xA;and &lt;a href=&quot;https://golang.org/pkg/encoding/json/#MarshalIndent&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json.MarshalIndent()&lt;/code&gt;&lt;/a&gt; produces a JSON text result (in the form of a &lt;code&gt;[]byte&lt;/code&gt;), but while the former does a compact output without indentation, the latter applies (somewhat customizable) indent. Quoting from doc of &lt;code&gt;json.MarshalIndent()&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;MarshalIndent is like Marshal but applies Indent to format the output.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;See this simple example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Entry struct {&#xA;    Key string `json:&quot;key&quot;`&#xA;}&#xA;&#xA;e := Entry{Key: &quot;value&quot;}&#xA;res, err := json.Marshal(e)&#xA;fmt.Println(string(res), err)&#xA;&#xA;res, err = json.MarshalIndent(e, &quot;&quot;, &quot;  &quot;)&#xA;fmt.Println(string(res), err)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The output is (try it on the &lt;a href=&quot;https://play.golang.org/p/ASeuLtLWa0&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{&quot;key&quot;:&quot;value&quot;} &amp;lt;nil&amp;gt;&#xA;{&#xA;  &quot;key&quot;: &quot;value&quot;&#xA;} &amp;lt;nil&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There is also &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Encoder&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json.Encoder&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Entry struct {&#xA;    Key string `json:&quot;key&quot;`&#xA;}&#xA;e := Entry{Key: &quot;value&quot;}&#xA;&#xA;enc := json.NewEncoder(os.Stdout)&#xA;if err := enc.Encode(e); err != nil {&#xA;    panic(err)&#xA;}&#xA;&#xA;enc.SetIndent(&quot;&quot;, &quot;  &quot;)&#xA;if err := enc.Encode(e); err != nil {&#xA;    panic(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try this one on the &lt;a href=&quot;https://play.golang.org/p/v1s9YkwA8w&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{&quot;key&quot;:&quot;value&quot;}&#xA;{&#xA;  &quot;key&quot;: &quot;value&quot;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastActivityDate=""2017-06-12T09:13:03.123"" CommentCount=""6"" />
",44495620
44471749,"44471749      <row Id=""44471749"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44501303"" PostTypeId=""2"" ParentId=""44471749"" CreationDate=""2017-06-12T13:59:08.433"" Score=""0"" Body=""&lt;p&gt;I managed to fix this issue by making use of the &lt;code&gt;session.StdoutPipe()&lt;/code&gt; and &lt;code&gt;session.StdinPipe()&lt;/code&gt;. I wrote a go routine which scans each byte and checks if the last written line starts with &lt;code&gt;&quot;[sudo] password for &quot;&lt;/code&gt; and ends with &lt;code&gt;&quot;: &quot;&lt;/code&gt;. It will write the &lt;code&gt;password + &quot;\n&quot;&lt;/code&gt; to the &lt;code&gt;session.StdinPipe()&lt;/code&gt; which continues execution of the script.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Here's all of the code I have for this.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package ssh&#xA;&#xA;import (&#xA;    &quot;bufio&quot;&#xA;    &quot;io&quot;&#xA;    &quot;log&quot;&#xA;    &quot;net&quot;&#xA;    &quot;strings&quot;&#xA;&#xA;    &quot;golang.org/x/crypto/ssh&quot;&#xA;)&#xA;&#xA;type Connection struct {&#xA;    *ssh.Client&#xA;    password string&#xA;}&#xA;&#xA;func Connect(addr, user, password string) (*Connection, error) {&#xA;    sshConfig := &amp;amp;ssh.ClientConfig{&#xA;        User: user,&#xA;        Auth: []ssh.AuthMethod{&#xA;            ssh.Password(password),&#xA;        },&#xA;        HostKeyCallback: ssh.HostKeyCallback(func(hostname string, remote net.Addr, key ssh.PublicKey) error { return nil }),&#xA;    }&#xA;&#xA;    conn, err := ssh.Dial(&quot;tcp&quot;, addr, sshConfig)&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;&#xA;    return &amp;amp;Connection{conn, password}, nil&#xA;&#xA;}&#xA;&#xA;func (conn *Connection) SendCommands(cmds ...string) ([]byte, error) {&#xA;    session, err := conn.NewSession()&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    defer session.Close()&#xA;&#xA;    modes := ssh.TerminalModes{&#xA;        ssh.ECHO:          0,     // disable echoing&#xA;        ssh.TTY_OP_ISPEED: 14400, // input speed = 14.4kbaud&#xA;        ssh.TTY_OP_OSPEED: 14400, // output speed = 14.4kbaud&#xA;    }&#xA;&#xA;    err = session.RequestPty(&quot;xterm&quot;, 80, 40, modes)&#xA;    if err != nil {&#xA;        return []byte{}, err&#xA;    }&#xA;&#xA;    in, err := session.StdinPipe()&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    out, err := session.StdoutPipe()&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    var output []byte&#xA;&#xA;    go func(in io.WriteCloser, out io.Reader, output *[]byte) {&#xA;        var (&#xA;            line string&#xA;            r    = bufio.NewReader(out)&#xA;        )&#xA;        for {&#xA;            b, err := r.ReadByte()&#xA;            if err != nil {&#xA;                break&#xA;            }&#xA;&#xA;            *output = append(*output, b)&#xA;&#xA;            if b == byte('\n') {&#xA;                line = &quot;&quot;&#xA;                continue&#xA;            }&#xA;&#xA;            line += string(b)&#xA;&#xA;            if strings.HasPrefix(line, &quot;[sudo] password for &quot;) &amp;amp;&amp;amp; strings.HasSuffix(line, &quot;: &quot;) {&#xA;                _, err = in.Write([]byte(conn.password + &quot;\n&quot;))&#xA;                if err != nil {&#xA;                    break&#xA;                }&#xA;            }&#xA;        }&#xA;    }(in, out, &amp;amp;output)&#xA;&#xA;    cmd := strings.Join(cmds, &quot;; &quot;)&#xA;    _, err = session.Output(cmd)&#xA;    if err != nil {&#xA;        return []byte{}, err&#xA;    }&#xA;&#xA;    return output, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;And an example of how you could use it.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// ssh refers to the custom package above&#xA;conn, err := ssh.Connect(&quot;0.0.0.0:22&quot;, &quot;username&quot;, &quot;password&quot;)&#xA;if err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&#xA;output, err := conn.SendCommands(&quot;sleep 2&quot;, &quot;echo Hello!&quot;)&#xA;if err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&#xA;fmt.Println(string(output))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4988637"" LastActivityDate=""2017-06-12T13:59:08.433"" CommentCount=""0"" />
",44501303
44501660,"44501660      <row Id=""44501660"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44501756"" PostTypeId=""2"" ParentId=""44501660"" CreationDate=""2017-06-12T14:20:44.623"" Score=""2"" Body=""&lt;p&gt;If you don't want to initialize the slice, don't use &lt;code&gt;make&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var result [][]SyntaxCommand&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""32880"" LastActivityDate=""2017-06-12T14:20:44.623"" CommentCount=""4"" />
",44501756
44504354,"44504354      <row Id=""44504354"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44505268"" PostTypeId=""2"" ParentId=""44504354"" CreationDate=""2017-06-12T17:21:34.427"" Score=""1"" Body=""&lt;p&gt;From &lt;a href=&quot;https://dave.cheney.net/2012/01/18/why-go-gets-exceptions-right&quot; rel=&quot;nofollow noreferrer&quot;&gt;Dave Cheney&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;code&gt;panics&lt;/code&gt; are always fatal to your program. In panicing you never assume&#xA;  that your caller can solve the problem. Hence &lt;code&gt;panic&lt;/code&gt; is only used in&#xA;  exceptional circumstances, ones where it is not possible for your&#xA;  code, or anyone integrating your code to continue.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;You should assume that a panic will be immediately fatal, for the entire program, or at the very least for the current goroutine. Ask yourself &quot;when this happens, should the application immediately crash?&quot; If yes, use a panic; otherwise, use an error.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastEditorUserId=""7426"" LastEditDate=""2017-06-13T13:09:37.967"" LastActivityDate=""2017-06-13T13:09:37.967"" CommentCount=""2"" />
",44505268
44502449,"44502449      <row Id=""44502449"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44506125"" PostTypeId=""2"" ParentId=""44502449"" CreationDate=""2017-06-12T18:15:11.413"" Score=""3"" Body=""&lt;p&gt;As of Go 1.8, the default GOPATH value is /go. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;GOPATH is where your source code will live. You can either use the default one or use a custom one, for example, I use D:\go. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The IDE has not detected the GOPATH because none was set. When you download Go you are also presented with the installation instructions, please have a look at that as well.&lt;/p&gt;&#xA;"" OwnerUserId=""8067560"" LastEditorUserId=""951414"" LastEditDate=""2017-06-13T18:04:31.677"" LastActivityDate=""2017-06-13T18:04:31.677"" CommentCount=""5"" />
",44506125
44507106,"44507106      <row Id=""44507106"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44507300"" PostTypeId=""2"" ParentId=""44507106"" CreationDate=""2017-06-12T19:26:37.737"" Score=""1"" Body=""&lt;p&gt;As far as I know there is no such a tool.&#xA;But in your case you may use 'go get', just remove .git from the end of the line.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go get git.schwanenlied.me/yawning/chacha20&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;same for import statement&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import (&#xA;    &quot;git.schwanenlied.me/yawning/chacha20&quot;&#xA;    &quot;golang.org/x/crypto/sha3&quot;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1682093"" LastActivityDate=""2017-06-12T19:26:37.737"" CommentCount=""8"" />
",44507300
44507189,"44507189      <row Id=""44507189"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44508113"" PostTypeId=""2"" ParentId=""44507189"" CreationDate=""2017-06-12T20:22:52.240"" Score=""2"" Body=""&lt;p&gt;Drafted answer from my comment for SO users.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Repeat field name with values:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;curl -X POST 'http://localhost:4000/url?X=val1&amp;amp;Y=val2&amp;amp;x=1&amp;amp;x=2'&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Separated by commas:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;curl -X POST 'http://localhost:4000/url?X=val1&amp;amp;Y=val2&amp;amp;x=1,2'&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-06-12T20:22:52.240"" CommentCount=""0"" />
",44508113
44452679,"44452679      <row Id=""44452679"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44509434"" PostTypeId=""2"" ParentId=""44452679"" CreationDate=""2017-06-12T22:05:38.783"" Score=""0"" Body=""&lt;p&gt;@radoslav-stoyanov before use my example do&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;# docker rmi busybox&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;then run code&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;lang-golang prettyprint-override&quot;&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;github.com/docker/distribution/context&quot;&#xA;    docker &quot;github.com/docker/engine-api/client&quot;&#xA;    &quot;github.com/docker/engine-api/types&quot;&#xA;    &quot;io&quot;&#xA;    &quot;strings&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    // DOCKER&#xA;    cli, err := docker.NewClient(&quot;unix:///var/run/docker.sock&quot;, &quot;v1.28&quot;, nil, map[string]string{&quot;User-Agent&quot;: &quot;engine-api-cli-1.0&quot;})&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    imageName := &quot;busybox:latest&quot;&#xA;&#xA;    events, err := cli.ImagePull(context.Background(), imageName, types.ImagePullOptions{})&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    d := json.NewDecoder(events)&#xA;&#xA;    type Event struct {&#xA;        Status         string `json:&quot;status&quot;`&#xA;        Error          string `json:&quot;error&quot;`&#xA;        Progress       string `json:&quot;progress&quot;`&#xA;        ProgressDetail struct {&#xA;            Current int `json:&quot;current&quot;`&#xA;            Total   int `json:&quot;total&quot;`&#xA;        } `json:&quot;progressDetail&quot;`&#xA;    }&#xA;&#xA;    var event *Event&#xA;    for {&#xA;        if err := d.Decode(&amp;amp;event); err != nil {&#xA;            if err == io.EOF {&#xA;                break&#xA;            }&#xA;&#xA;            panic(err)&#xA;        }&#xA;&#xA;        fmt.Printf(&quot;EVENT: %+v\n&quot;, event)&#xA;    }&#xA;&#xA;    // Latest event for new image&#xA;    // EVENT: {Status:Status: Downloaded newer image for busybox:latest Error: Progress:[==================================================&amp;gt;]  699.2kB/699.2kB ProgressDetail:{Current:699243 Total:699243}}&#xA;    // Latest event for up-to-date image&#xA;    // EVENT: {Status:Status: Image is up to date for busybox:latest Error: Progress: ProgressDetail:{Current:0 Total:0}}&#xA;    if event != nil {&#xA;        if strings.Contains(event.Status, fmt.Sprintf(&quot;Downloaded newer image for %s&quot;, imageName)) {&#xA;            // new&#xA;            fmt.Println(&quot;new&quot;)&#xA;        }&#xA;&#xA;        if strings.Contains(event.Status, fmt.Sprintf(&quot;Image is up to date for %s&quot;, imageName)) {&#xA;            // up-to-date&#xA;            fmt.Println(&quot;up-to-date&quot;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can see API formats to create your structures (like my &lt;code&gt;Event&lt;/code&gt;) to read them here &lt;a href=&quot;https://docs.docker.com/engine/api/v1.27/#operation/ImageCreate&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://docs.docker.com/engine/api/v1.27/#operation/ImageCreate&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hope it helps you solve your problem, thanks.&lt;/p&gt;&#xA;"" OwnerUserId=""1653085"" LastEditorUserId=""1653085"" LastEditDate=""2017-06-19T10:14:29.250"" LastActivityDate=""2017-06-19T10:14:29.250"" CommentCount=""4"" />
",44509434
44510661,"44510661      <row Id=""44510661"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44510724"" PostTypeId=""2"" ParentId=""44510661"" CreationDate=""2017-06-13T00:45:40.627"" Score=""4"" Body=""&lt;p&gt;Set the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition&quot; rel=&quot;nofollow noreferrer&quot;&gt;content disposition&lt;/a&gt; header before serving the content:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;f, err := os.Open(file.Path)&#xA;if err != nil {&#xA;    // handle error&#xA;}&#xA;defer f.Close()&#xA;fi, err := f.Stat()&#xA;if err != nil {&#xA;     // handle error&#xA;}&#xA;w.Header().Set(&quot;Content-Disposition&quot;, &quot;attachment; filename=YOURNAME&quot;)&#xA;http.ServeContent(w, r, file.Name, fi.ModTime(), f)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that this code passes an *os.File directly to ServeContent instead of reading the entire file to memory.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The code can be simplified further by calling &lt;a href=&quot;https://godoc.org/net/http#ServeFile&quot; rel=&quot;nofollow noreferrer&quot;&gt;ServeFile&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;w.Header().Set(&quot;Content-Disposition&quot;, &quot;attachment; filename=YOURNAME&quot;)&#xA;http.ServeFile(w, r, file.Name)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""142162"" LastEditDate=""2017-06-13T12:52:23.977"" LastActivityDate=""2017-06-13T12:52:23.977"" CommentCount=""1"" />
",44510724
44512567,"44512567      <row Id=""44512567"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44513396"" PostTypeId=""2"" ParentId=""44512567"" CreationDate=""2017-06-13T06:00:56.510"" Score=""1"" Body=""&lt;p&gt;Duplicate of &lt;a href=&quot;https://stackoverflow.com/questions/13255907/in-go-http-handlers-why-is-the-responsewriter-a-value-but-the-request-a-pointer&quot;&gt;In Go HTTP handlers, why is the ResponseWriter a value but the Request a pointer?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Mainly the ResponseWriter is an interface (you may want to understand more about interfaces, just in case you haven't gone over it). Just to add, the request is a pointer to a struct - there's no point in having a copy of the request struct (which happens when passed by value), so it's not passed as a struct (think of it esp. when you pass it downstream to other functions, you can just pass this down directly)&lt;/p&gt;&#xA;"" OwnerUserId=""2969090"" LastActivityDate=""2017-06-13T06:00:56.510"" CommentCount=""2"" />
",44513396
44515710,"44515710      <row Id=""44515710"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44516160"" PostTypeId=""2"" ParentId=""44515710"" CreationDate=""2017-06-13T08:31:11.743"" Score=""2"" Body=""&lt;p&gt;The root element of XML is unmarshalled into the type of the pointer provided. In your case, this is &lt;code&gt;XMLCS&lt;/code&gt;. Since &lt;code&gt;version&lt;/code&gt; is an attribute of the root element, it will go into a field named &lt;code&gt;version&lt;/code&gt; in &lt;code&gt;XMLCS&lt;/code&gt;, if present.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So changing your struct as below should fix the problem,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type XMLCS struct {&#xA;    XMLName string `xml:&quot;container&quot;`&#xA;    Version string `xml:&quot;version,attr&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Read the &lt;a href=&quot;https://golang.org/pkg/encoding/xml/#Marshal&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation of Marshal&lt;/a&gt; for details on how XML is mapped to structs.&lt;/p&gt;&#xA;"" OwnerUserId=""195130"" LastEditorUserId=""195130"" LastEditDate=""2017-06-15T05:17:47.707"" LastActivityDate=""2017-06-15T05:17:47.707"" CommentCount=""0"" />
",44516160
44516601,"44516601      <row Id=""44516601"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44518998"" PostTypeId=""2"" ParentId=""44516601"" CreationDate=""2017-06-13T10:32:34.303"" Score=""2"" Body=""&lt;p&gt;You need to be more precise when defining the regex. &lt;code&gt;.*&lt;/code&gt; is too greedy and matches across commas and other stuff.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I suggest using&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var latencyPattern = regexp.MustCompile(`(round-trip|rtt)\s+\S+\s*=\s*([0-9.]+)/([0-9.]+)/([0-9.]+)/([0-9.]+)\s*ms`)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See the &lt;a href=&quot;https://regex101.com/r/B2ESZj/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;regex demo&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/drI2b8poLK&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go lang demo&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;regexp&quot;&#xA;    &quot;strings&quot;&#xA;    &quot;strconv&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    strOutput := `1-&amp;gt;5 packets transmitted, 5 packets received, 0.0% packet loss&#xA;round-trip min/avg/max/stddev = 0.067/0.078/0.087/0.007 ms &#xA;        2-&amp;gt;5 packets transmitted, 5 received, 0% packet loss, time 801ms&#xA;rtt min/avg/max/stddev = 0.019/0.034/0.044/0.010 ms, ipg/ewma 200.318/0.038 ms`&#xA;    latencyPattern := regexp.MustCompile(`(round-trip|rtt)\s+\S+\s*=\s*([0-9.]+)/([0-9.]+)/([0-9.]+)/([0-9.]+)\s*ms`)&#xA;    matches := latencyPattern.FindAllStringSubmatch(strOutput, -1)&#xA;    for _, item := range matches {&#xA;        latency, _ := strconv.ParseFloat(strings.TrimSpace(item[3]), 64)&#xA;            jitter, _ := strconv.ParseFloat(strings.TrimSpace(item[5]), 64)&#xA;            fmt.Printf(&quot;AVG = %.3f, STDDEV = %.3f\n&quot;, latency, jitter)&#xA;&#xA;        }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Result:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;AVG = 0.078, STDDEV = 0.007&#xA;AVG = 0.034, STDDEV = 0.010&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Pattern details&lt;/strong&gt;:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;(round-trip|rtt)&lt;/code&gt; - &lt;code&gt;round-trip&lt;/code&gt; or &lt;code&gt;rtt&lt;/code&gt; substrings&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\s+&lt;/code&gt; - 1+ whitespaces&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\S+&lt;/code&gt; - 1+ non-whitespace symbols&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\s*=\s*&lt;/code&gt; - a &lt;code&gt;=&lt;/code&gt; enclosed with 0+ whitespaces&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;([0-9.]+)&lt;/code&gt; - Group 1: the first number&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/&lt;/code&gt; - a &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;([0-9.]+)&lt;/code&gt; - Group 2: the second number&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/&lt;/code&gt; - a &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;([0-9.]+)&lt;/code&gt; - Group 3: the third number&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/&lt;/code&gt; - a &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;([0-9.]+)&lt;/code&gt; - Group 4: the fourth number&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\s*&lt;/code&gt; - 0+ whitespaces&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ms&lt;/code&gt; - a substring &lt;code&gt;ms&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""3832970"" LastEditorUserId=""3832970"" LastEditDate=""2017-06-13T11:03:24.890"" LastActivityDate=""2017-06-13T11:03:24.890"" CommentCount=""0"" />
",44518998
44512577,"44512577      <row Id=""44512577"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44523442"" PostTypeId=""2"" ParentId=""44512577"" CreationDate=""2017-06-13T13:47:47.503"" Score=""1"" Body=""&lt;p&gt;According to &lt;a href=&quot;https://github.com/shirou/gopsutil/issues/339&quot; rel=&quot;nofollow noreferrer&quot;&gt;similar issue&lt;/a&gt;, and also in &lt;a href=&quot;https://github.com/golang/go/issues/19734&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Golang issue #19734&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;cgo&lt;/code&gt; command broken on darwin after performing c tool-chain (Xcode 8.3) update from Apple.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The solution: &lt;code&gt;upgrade to go1.8.1 or above&lt;/code&gt; or add &lt;code&gt;-ldflags=-s&lt;/code&gt; to &lt;code&gt;build&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt; command, e.g. &lt;code&gt;go build -ldflags=-s&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-06-13T13:47:47.503"" CommentCount=""0"" />
",44523442
44523559,"44523559      <row Id=""44523559"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44523831"" PostTypeId=""2"" ParentId=""44523559"" CreationDate=""2017-06-13T14:02:50.623"" Score=""0"" Body=""&lt;p&gt;The Go code is correct so as long as there is a GoSDK is defined in WebStorm it should be okay. Make sure that Golang settings are in place. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Click on &lt;strong&gt;WebStorm&lt;/strong&gt; -&gt; &lt;strong&gt;Preferences&lt;/strong&gt; -&gt; &lt;strong&gt;Languages&lt;/strong&gt; &lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;strong&gt;Frameworks&lt;/strong&gt; -&gt; &lt;strong&gt;Go&lt;/strong&gt; and make sure everything is set there. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Refer to: &lt;a href=&quot;https://plugins.jetbrains.com/plugin/5047-go-language-golang-org-support-plugin&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go language (golang.org) support plugin&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4996722"" LastActivityDate=""2017-06-13T14:02:50.623"" CommentCount=""0"" />
",44523831
44527223,"44527223      <row Id=""44527223"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44527543"" PostTypeId=""2"" ParentId=""44527223"" CreationDate=""2017-06-13T17:03:06.710"" Score=""3"" Body=""&lt;p&gt;Go's &lt;code&gt;string&lt;/code&gt; type stores the UTF-8 encoded byte sequence of the text. This is a design decision that has been made and it won't change.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to efficiently get a &lt;code&gt;rune&lt;/code&gt; from it at an arbitrary index, you have to decode the bytes, you can't do anything about that (the &lt;code&gt;for ... range&lt;/code&gt; does this decoding). There is no &quot;shortcut&quot;. The chosen representation just doesn't provide this out of the box.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you have to do this frequently / many times, you should change your input and not use &lt;code&gt;string&lt;/code&gt; but a &lt;code&gt;[]rune&lt;/code&gt;, as it's a slice and can be efficiently indexed. &lt;code&gt;string&lt;/code&gt; in Go is not &lt;code&gt;[]rune&lt;/code&gt;. &lt;code&gt;string&lt;/code&gt; in Go is effectively a read-only &lt;code&gt;[]byte&lt;/code&gt; (UTF-8). Period.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you can't change the input type, you may build an internal cache mapped from &lt;code&gt;string&lt;/code&gt; to its &lt;code&gt;[]rune&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var cache = map[string][]rune{}&#xA;&#xA;func RuneAt(s string, idx int) rune {&#xA;    rs := cache[s]&#xA;    if rs == nil {&#xA;        rs = []rune(s)&#xA;        cache[s] = []rune(s)&#xA;    }&#xA;    if idx &amp;gt;= len(rs) {&#xA;        return 0&#xA;    }&#xA;    return rs[idx]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It depends on case whether this is worth it: if &lt;code&gt;RuneAt()&lt;/code&gt; is called with a small set of &lt;code&gt;string&lt;/code&gt;s, this may improve performance a lot. If the passed strings are more-or-less unique, this will result in worse performance and a lot of memory usage. Also this implementation is not safe for concurrent use.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-14T04:36:05.057"" LastActivityDate=""2017-06-14T04:36:05.057"" CommentCount=""0"" />
",44527543
44515677,"44515677      <row Id=""44515677"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44528288"" PostTypeId=""2"" ParentId=""44515677"" CreationDate=""2017-06-13T17:47:47.527"" Score=""1"" Body=""&lt;p&gt;You're code looks alright. However it can be simplified-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var b bytes.Buffer // you could use buffer pool here&#xA;err := jsonapi.MarshalManyPayload(&amp;amp;b, albumList())&#xA;if err != nil {&#xA;    return err&#xA;}&#xA;return c.JSONBlob(http.StatusOK, b.Bytes())&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Following approaches for your thoughts:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Approach 1 -&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;c.Response().Header().Set(echo.HeaderContentType, jsonapi.MediaType)&#xA;c.Response().WriteHeader(http.StatusOK)&#xA;return jsonapi.MarshalManyPayload(c.Response(), albumList())&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Approach 2 -&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var b bytes.Buffer // you could use buffer pool here&#xA;err := jsonapi.MarshalManyPayload(&amp;amp;b, albumList())&#xA;if err != nil {&#xA;    return err&#xA;}&#xA;c.Response().Header().Set(echo.HeaderContentType, jsonapi.MediaType)&#xA;c.Response().WriteHeader(http.StatusOK)&#xA;_, err := b.WriteTo(c.Response())&#xA;return err&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""434792"" LastEditDate=""2017-06-14T12:00:59.140"" LastActivityDate=""2017-06-14T12:00:59.140"" CommentCount=""2"" />
",44528288
43796314,"43796314      <row Id=""43796314"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44529216"" PostTypeId=""2"" ParentId=""43796314"" CreationDate=""2017-06-13T18:43:41.387"" Score=""1"" Body=""&lt;p&gt;[Disclaimer: I work at &lt;a href=&quot;http://www.lightstep.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;LightStep]&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Sorry you're having trouble getting Java and Go to play well together.  I suspect this is caused by time-correction being enabled in Java but not being used in Go.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can disable time correction in Java using the &lt;code&gt;withClockSkewCorrection(boolean clockCorrection)&lt;/code&gt; &#xA;option to turn off clockCorrection when passing in options to the LightStep tracer&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is the updated &lt;a href=&quot;https://github.com/lightstep/lightstep-tracer-java#disabling-default-clock-correction&quot; rel=&quot;nofollow noreferrer&quot;&gt;README&lt;/a&gt; and a link to the &lt;a href=&quot;https://github.com/lightstep/lightstep-tracer-java/blob/271ab07d6757c160273d37d3564ea2e8698aa38e/common/src/main/java/com/lightstep/tracer/shared/Options.java#L289&quot; rel=&quot;nofollow noreferrer&quot;&gt;option code&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you contact us via the [Support] button in LightStep, we should be able to get you sorted out.  Please send us a note so that we can confirm that this is solved for you.   &lt;/p&gt;&#xA;&#xA;&lt;p&gt;We'll start monitoring SO more carefully so that we catch these things earlier.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thanks and happy tracing!  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Will&lt;/p&gt;&#xA;"" OwnerUserId=""1359408"" LastEditorUserId=""1359408"" LastEditDate=""2017-06-13T20:47:13.053"" LastActivityDate=""2017-06-13T20:47:13.053"" CommentCount=""1"" />
",44529216
44530376,"44530376      <row Id=""44530376"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44531095"" PostTypeId=""2"" ParentId=""44530376"" CreationDate=""2017-06-13T20:37:41.167"" Score=""3"" Body=""&lt;p&gt;&quot;Any extra spaces around either the variable name or the string, will not be ignored, SET is not forgiving of extra spaces like many other scripting languages.&quot;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Change &lt;code&gt;set GOOS = darwin&lt;/code&gt; to &lt;code&gt;set GOOS=darwin&lt;/code&gt; - i.e., the same format you see in the output of &lt;code&gt;go env&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-13T20:37:41.167"" CommentCount=""1"" />
",44531095
44531857,"44531857      <row Id=""44531857"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44532120"" PostTypeId=""2"" ParentId=""44531857"" CreationDate=""2017-06-13T21:47:05.453"" Score=""2"" Body=""&lt;p&gt;&lt;code&gt;error&lt;/code&gt; is a built-in interface, and &lt;code&gt;*MyError&lt;/code&gt; implements that interface. Even though the value of &lt;code&gt;err2&lt;/code&gt; is nil, when you pass it to &lt;code&gt;isNil&lt;/code&gt;, the function gets a non-nil interface value. That value contains information about the type (&lt;code&gt;*MyError&lt;/code&gt;) and the value itself, which is a nil pointer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you try printing &lt;code&gt;err&lt;/code&gt; in &lt;code&gt;isNil&lt;/code&gt;, you'll see that in the second case, you get &quot;some error&quot; even though &lt;code&gt;err2&lt;/code&gt; is nil. This demonstrates why &lt;code&gt;err&lt;/code&gt; is not nil in that case (it has to contain the type information).&lt;/p&gt;&#xA;"" OwnerUserId=""3068258"" LastActivityDate=""2017-06-13T21:47:05.453"" CommentCount=""0"" />
",44532120
44532365,"44532365      <row Id=""44532365"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44532400"" PostTypeId=""2"" ParentId=""44532365"" CreationDate=""2017-06-13T22:09:12.787"" Score=""3"" Body=""&lt;p&gt;You &lt;em&gt;are&lt;/em&gt; doubling &lt;code&gt;i&lt;/code&gt;, but you're creating a new &lt;code&gt;i&lt;/code&gt; every iteration, with with the value from the &lt;code&gt;i&lt;/code&gt; used in the for loop clause.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You probably want something like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;x := 1&#xA;for i := 1; i &amp;lt; 10; i++ {&#xA;    fmt.Println(x)&#xA;    x *= 2&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""32880"" LastEditorUserId=""32880"" LastEditDate=""2017-06-13T22:26:44.133"" LastActivityDate=""2017-06-13T22:26:44.133"" CommentCount=""1"" />
",44532400
44532848,"44532848      <row Id=""44532848"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44532959"" PostTypeId=""2"" ParentId=""44532848"" CreationDate=""2017-06-13T23:09:16.443"" Score=""1"" Body=""&lt;p&gt;I have modified your sample here &lt;a href=&quot;https://play.golang.org/p/rbcoL0ayeb&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/rbcoL0ayeb&lt;/a&gt;. Change your definition to following:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Series:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Series struct {&#xA;   Name []Name `xml:&quot;name&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Website:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Website struct {&#xA;   Url []Url `xml:&quot;url&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-06-13T23:09:16.443"" CommentCount=""0"" />
",44532959
44533029,"44533029      <row Id=""44533029"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44533130"" PostTypeId=""2"" ParentId=""44533029"" CreationDate=""2017-06-13T23:30:53.843"" Score=""3"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;which shows that the channel is holding 2 values at a time.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Thats not the case. This is how the code executes:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The &lt;strong&gt;main&lt;/strong&gt; goroutine blocks on a read on the channel&lt;/li&gt;&#xA;&lt;li&gt;The second goroutine writes to the channel &lt;em&gt;and continues executing&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The second goroutine blocks &lt;em&gt;at the second write attempt&lt;/em&gt; because noone is reading&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;main&lt;/strong&gt; goroutine continues executing, prints the read number&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;main&lt;/strong&gt; goroutine reads another number since someone is writing to it&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;main&lt;/strong&gt; goroutine prints the read number and blocks on the next read&lt;/li&gt;&#xA;&lt;li&gt;The second goroutine continues executing at step &lt;strong&gt;2.&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;There is no buffer, just concurrency.&lt;/p&gt;&#xA;"" OwnerUserId=""1080064"" LastActivityDate=""2017-06-13T23:30:53.843"" CommentCount=""1"" />
",44533130
44532017,"44532017      <row Id=""44532017"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44533710"" PostTypeId=""2"" ParentId=""44532017"" CreationDate=""2017-06-14T00:52:21.027"" Score=""2"" Body=""&lt;p&gt;Another solution is by changing the template definition to&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Define Template&#xA;t := template.Must(template.New(&quot;t2&quot;).Parse(`&#xA;    Hello World!&#xA;    The table name is {{with .table_name}}{{index . 0}}{{else}}DefaultTableName{{end}}&#xA;`))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But, the value won't be stored in a variable, so if you want to reuse it in other places, you need to write it again. The main purpose of the standard template package is for rendering &lt;em&gt;precomputed&lt;/em&gt; value, and &lt;em&gt;logic&lt;/em&gt; related operations/functions have limited capability. However, you can define your own &lt;code&gt;function&lt;/code&gt; then register it to the template's &lt;a href=&quot;https://golang.org/pkg/text/template/#FuncMap&quot; rel=&quot;nofollow noreferrer&quot;&gt;FuncMap&lt;/a&gt; e.g. the &lt;code&gt;default&lt;/code&gt; function mentioned by @jeevatkm.&lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-06-14T00:52:21.027"" CommentCount=""1"" />
",44533710
44535260,"44535260      <row Id=""44535260"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44536004"" PostTypeId=""2"" ParentId=""44535260"" CreationDate=""2017-06-14T05:19:11.213"" Score=""1"" Body=""&lt;p&gt;A better way to solve your problem would be to use closures.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, change the type of &lt;code&gt;retryer&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func retryer(f func() error, maxRetry int, waitBetween time.Duration) error {&#xA;    // retry and wait logic&#xA;    err := f()&#xA;    // error handling, retry, and wait logic&#xA;    return err&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now call functions to be retried as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// ...&#xA;classId := &quot;some value&quot;&#xA;// ...&#xA;&#xA;var st []Student&#xA;var errors []error&#xA;err := retryer(func() error {&#xA;    st, errors = GetTopStudent(classId)&#xA;    // handle errors&#xA;    return nil&#xA;}, numTries, waitTime)&#xA;// use st here&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""3129778"" LastActivityDate=""2017-06-14T05:19:11.213"" CommentCount=""0"" />
",44536004
44535143,"44535143      <row Id=""44535143"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44536480"" PostTypeId=""2"" ParentId=""44535143"" CreationDate=""2017-06-14T05:53:01.023"" Score=""0"" Body=""&lt;p&gt;Per &lt;a href=&quot;https://stripe.com/docs/api#customer_object&quot; rel=&quot;nofollow noreferrer&quot;&gt;the Stripe documentation&lt;/a&gt;, the &lt;code&gt;default_card&lt;/code&gt; field is not expanded by default. You can expand it by adding this line to &lt;code&gt;CreateUserID&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;customerParams.Expand(&quot;default_source&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""94559"" LastActivityDate=""2017-06-14T05:53:01.023"" CommentCount=""0"" />
",44536480
44539107,"44539107      <row Id=""44539107"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44539590"" PostTypeId=""2"" ParentId=""44539107"" CreationDate=""2017-06-14T08:36:42.543"" Score=""1"" Body=""&lt;p&gt;Given that it's not known the implementation of &lt;code&gt;hub&lt;/code&gt;, sending messages to the &lt;code&gt;hub.Broadcast&lt;/code&gt; channel is blocking, therefore if nobody is consuming messages from it it will wait, preventing the loop to continue.&lt;/p&gt;&#xA;"" OwnerUserId=""4186443"" LastActivityDate=""2017-06-14T08:36:42.543"" CommentCount=""1"" />
",44539590
44539789,"44539789      <row Id=""44539789"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44540053"" PostTypeId=""2"" ParentId=""44539789"" CreationDate=""2017-06-14T08:56:33.880"" Score=""1"" Body=""&lt;p&gt;You may use &lt;code&gt;fmt.Sprint&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;fmt.Sprint&lt;/code&gt; retunrs string format of any vriable passed to it&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Sample&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;func main() {&#xA;        f := fmt.Sprint(5.03)&#xA;        i := fmt.Sprint(5)&#xA;    fmt.Println(&quot;float:&quot;,f,&quot;\nint:&quot;,i)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/8ZgjjO2k3X&quot; rel=&quot;nofollow noreferrer&quot;&gt;play link&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1898494"" LastActivityDate=""2017-06-14T08:56:33.880"" CommentCount=""0"" />
",44540053
44536740,"44536740      <row Id=""44536740"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44543414"" PostTypeId=""2"" ParentId=""44536740"" CreationDate=""2017-06-14T11:24:37.107"" Score=""2"" Body=""&lt;p&gt;Your proposed solution is not valid code, it has multiple errors.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example &lt;code&gt;GetSize()&lt;/code&gt; has no result type, so you couldn't return anything.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Next, the expression you return is also a syntax error, it attempts to convert an &lt;code&gt;*int&lt;/code&gt; pointer to &lt;code&gt;int&lt;/code&gt; which is not valid.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You need to dereference the pointer first, so the correct syntax would be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func GetSize(T interface{}) int {&#xA;    size := reflect.TypeOf(T).Size()&#xA;    return int(*(*int)(unsafe.Pointer(size)))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;But.&lt;/strong&gt; It makes no sense. &lt;a href=&quot;https://golang.org/pkg/reflect/#Type&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;reflect.Type.Size()&lt;/code&gt;&lt;/a&gt; already returns the size (the number of bytes needed to store a value of the given type), so there is no need of that &lt;code&gt;unsafe&lt;/code&gt; magic. What may be confusing is that its return type is &lt;code&gt;uintptr&lt;/code&gt;, but you may simply use that value after converting it to &lt;code&gt;int&lt;/code&gt; for example.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Simply use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func GetSize(v interface{}) int {&#xA;    return int(reflect.TypeOf(v).Size())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Testing it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Println(&quot;Size of int:&quot;, GetSize(int(0)))&#xA;fmt.Println(&quot;Size of int64:&quot;, GetSize(int64(0)))&#xA;fmt.Println(&quot;Size of [100]byte:&quot;, GetSize([100]byte{}))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/vaKGKyMuFp&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Size of int: 4&#xA;Size of int64: 8&#xA;Size of [100]byte: 100&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;One thing you must not forget: this &lt;code&gt;GetSize()&lt;/code&gt; will not recurisvely examine the size of the passed value. So for example if it's a struct with a pointer field, it will not &quot;count&quot; the size of the pointed value, only the size of the pointer field.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Constructing a &lt;code&gt;GetSize()&lt;/code&gt; that recurisvely counts the total size of a complex data structure is non-trivial due to types like &lt;code&gt;map&lt;/code&gt;. For details, see &lt;a href=&quot;https://stackoverflow.com/questions/44257522/how-to-get-variable-memory-size-of-variable-in-golang/44258164#44258164&quot;&gt;How to get variable memory size of variable in golang?&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-14T11:47:11.233"" LastActivityDate=""2017-06-14T11:47:11.233"" CommentCount=""0"" />
",44543414
44543374,"44543374      <row Id=""44543374"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44543748"" PostTypeId=""2"" ParentId=""44543374"" CreationDate=""2017-06-14T11:39:44.397"" Score=""3"" Body=""&lt;p&gt;The &lt;code&gt;Vector3.Normalize()&lt;/code&gt; method has a &lt;em&gt;pointer&lt;/em&gt; receiver, so in order to call this method, a pointer to &lt;code&gt;Vector3&lt;/code&gt; value is required (&lt;code&gt;*Vector3&lt;/code&gt;). In your first example you store the return value of &lt;code&gt;Vector3.Minus()&lt;/code&gt; in a variable, which will be of type &lt;code&gt;Vector3&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Variables in Go are addressable, and when you write &lt;code&gt;diff.Normalize()&lt;/code&gt;, this is a shortcut, and the compiler will automatically take the address of the &lt;code&gt;diff&lt;/code&gt; variable to have the required receiver value of type &lt;code&gt;*Vector3&lt;/code&gt; in order to call &lt;code&gt;Normalize()&lt;/code&gt;. So the compiler will &quot;transform&quot; it to&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(&amp;amp;diff).Normalize()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is detailed in &lt;a href=&quot;https://golang.org/ref/spec#Calls&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: Calls:&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;A method call &lt;code&gt;x.m()&lt;/code&gt; is valid if the &lt;a href=&quot;https://golang.org/ref/spec#Method_sets&quot; rel=&quot;nofollow noreferrer&quot;&gt;method set&lt;/a&gt; of (the type of) &lt;code&gt;x&lt;/code&gt; contains &lt;code&gt;m&lt;/code&gt; and the argument list can be assigned to the parameter list of &lt;code&gt;m&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is &lt;a href=&quot;https://golang.org/ref/spec#Address_operators&quot; rel=&quot;nofollow noreferrer&quot;&gt;addressable&lt;/a&gt; and &lt;code&gt;&amp;amp;x&lt;/code&gt;'s method set contains &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;x.m()&lt;/code&gt; is shorthand for &lt;code&gt;(&amp;amp;x).m()&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The reason why your second example doesn't work is because return values of function and method calls are &lt;strong&gt;not addressable&lt;/strong&gt;, so the compiler is not able to do the same here, the compiler is not able to take the address of the return value of the &lt;code&gt;Vector3.Minus()&lt;/code&gt; call.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What is addressable is exactly listed in the &lt;a href=&quot;https://golang.org/ref/spec#Address_operators&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: Address operators:&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The operand must be &lt;em&gt;addressable&lt;/em&gt;, that is, either a variable, pointer indirection, or slice indexing operation; or a field selector of an addressable struct operand; or an array indexing operation of an addressable array. As an exception to the addressability requirement, &lt;code&gt;x&lt;/code&gt; [in the expression of &lt;code&gt;&amp;amp;x&lt;/code&gt;] may also be a (possibly parenthesized) &lt;a href=&quot;http://golang.org/ref/spec#Composite_literals&quot; rel=&quot;nofollow noreferrer&quot;&gt;composite literal&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;See related questions:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/30744965/how-to-get-the-pointer-of-return-value-from-function-call/30751102#30751102&quot;&gt;How to get the pointer of return value from function call?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/34197248/how-can-i-store-reference-to-the-result-of-an-operation-in-go/34197367#34197367&quot;&gt;How can I store reference to the result of an operation in Go?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Possible &quot;workarounds&quot;&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&quot;Easiest&quot; (requiring the least change) is simply to assign to a variable, and call the method after that. This is your first working solution.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another way is to modify the methods to have a value receiver (instead of pointer receiver), so that there is no need to take the address of the return values of the methods, so calls can be &quot;chained&quot;. Note that this might not be viable if a method needs to modify the receiver, as that is only possible if it is a pointer (as the receiver is passed just like any other parameters – by making a copy –, and if it's not a pointer, you could only modify the copy).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another way is to modify the return values to return pointers (&lt;code&gt;*Vector3&lt;/code&gt;) instead of &lt;code&gt;Vector3&lt;/code&gt;. If the return value is already a pointer, no need to take its address as it's good as-is for the receiver to a method that requires a pointer receiver.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may also create a simple helper function which returns its address. It could look something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func pv(v Vector3) *Vector3 {&#xA;    return &amp;amp;v&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;dir := pv(projected.Minus(c.Origin)).Normalize()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This could also be a method of &lt;code&gt;Vector3&lt;/code&gt;, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (v Vector3) pv() *Vector3 {&#xA;    return &amp;amp;v&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And then using it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;dir := projected.Minus(c.Origin).pv().Normalize()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Some notes:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If your type consists of 3 &lt;code&gt;float64&lt;/code&gt; values only, you should not see significant performance differences. But you should be consistent about your receiver and result types. If most of your methods have pointer receivers, so should all of them. If most of your methods return pointers, so should all of them.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-14T19:54:14.043"" LastActivityDate=""2017-06-14T19:54:14.043"" CommentCount=""2"" />
",44543748
44546106,"44546106      <row Id=""44546106"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44546724"" PostTypeId=""2"" ParentId=""44546106"" CreationDate=""2017-06-14T13:49:28.090"" Score=""0"" Body=""&lt;p&gt;If you're mocking out clients for HTTP APIs, you might want to just use &lt;a href=&quot;https://golang.org/pkg/net/http/httptest/#Server&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;httptest.Server&lt;/code&gt;&lt;/a&gt;, which would simplify this tremendously. Rather than mocking out the client, mock out the server the client connects to. It's really easy to use, and you can still record the request method, path, body, etc., as well as returning arbitrary response values the same way you're doing with the mock client.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If that's not an option, you can abstract out your mock method to make it reusable:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type TestClient struct {&#xA;     recordedArgs [][]interface{}&#xA;     returnValues []interface{}&#xA;}&#xA;&#xA;func (c *TestClient) mock(args ...interface{}) interface{} {&#xA;    c.recordedArgs = append(c.recordedArgs, args)&#xA;    if len(c.returnValues) != 0 {&#xA;        last := c.returnValues[0]&#xA;        c.returnValues = c.returnValues[1:]&#xA;        return last&#xA;    }&#xA;    return nil&#xA;}&#xA;&#xA;func (c *TestClient) Request(body io.Reader, method string, endpoint string, headers []Header) ([]byte, error) {&#xA;    return c.mock(body,method,endpoint,headers).([]byte), nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This cuts your usage-specific method down to one line.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-14T13:49:28.090"" CommentCount=""0"" />
",44546724
44552057,"44552057      <row Id=""44552057"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44552180"" PostTypeId=""2"" ParentId=""44552057"" CreationDate=""2017-06-14T18:32:32.897"" Score=""1"" Body=""&lt;p&gt;Yes, you can use the &lt;a href=&quot;https://golang.org/pkg/runtime/#Stack&quot; rel=&quot;nofollow noreferrer&quot;&gt;runtime.Stack&lt;/a&gt; to print the stack of all goroutines:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Stack formats a stack trace of the calling goroutine into buf and returns the number of bytes written to buf. If all is true, Stack formats stack traces of all other goroutines into buf after the trace for the current goroutine.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Simple GoPlay here:&lt;br&gt;&#xA;&lt;a href=&quot;https://play.golang.org/p/sB-ynAVwmU&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/sB-ynAVwmU&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It also looks like you can print out the stack of a specific goroutine by using debug.PrintStack in conjunction with the runtime library. Credit from another S.O. answer here: &lt;a href=&quot;https://stackoverflow.com/questions/19094099/how-to-dump-goroutine-stacktraces&quot;&gt;How to dump goroutine stacktraces?&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4746361"" LastEditorUserId=""4746361"" LastEditDate=""2017-06-14T19:20:59.517"" LastActivityDate=""2017-06-14T19:20:59.517"" CommentCount=""0"" />
",44552180
44552481,"44552481      <row Id=""44552481"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44552814"" PostTypeId=""2"" ParentId=""44552481"" CreationDate=""2017-06-14T19:07:55.440"" Score=""0"" Body=""&lt;p&gt;The request is valid JSON, so you won't get a JSON error. If the zero value for your struct is allowed by the schema, that's also valid, so you won't get an error from gorm. By all measures you're using, your input is valid. If you want additional validation, you'll have to write it into your handler.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-14T19:07:55.440"" CommentCount=""0"" />
",44552814
44552209,"44552209      <row Id=""44552209"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44552820"" PostTypeId=""2"" ParentId=""44552209"" CreationDate=""2017-06-14T19:08:13.363"" Score=""0"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;It seems jQuery slim build, &lt;a href=&quot;https://blog.jquery.com/2017/03/20/jquery-3-2-1-now-available/&quot; rel=&quot;nofollow noreferrer&quot;&gt;doesn't support ajax function&lt;/a&gt;. So include&#xA;  &lt;code&gt;jquery-3.2.1.min.js&lt;/code&gt; try, it will work.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;SO post: Read about &lt;a href=&quot;https://stackoverflow.com/questions/35424053/what-are-the-differences-between-normal-and-slim-package-of-jquery&quot;&gt;normal vs slim build&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Can you try this jquery ajax call?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$.ajax({&#xA;  type: 'GET', // default is GET, so you can exclude if you want&#xA;  url : '/editnote', // don't hard the host address&#xA;  dataType: 'html',&#xA;  success: function(data) {&#xA;     console.log(data);&#xA;  },&#xA;  error: function(e){&#xA;     console.log(e);&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-06-14T19:30:27.127"" LastActivityDate=""2017-06-14T19:30:27.127"" CommentCount=""2"" />
",44552820
44553318,"44553318      <row Id=""44553318"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44553408"" PostTypeId=""2"" ParentId=""44553318"" CreationDate=""2017-06-14T19:42:12.577"" Score=""2"" Body=""&lt;p&gt;Couple of issues:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You have to make a slice with a length of 5 before you can access elements in it. You'll panic if you simply do var tempArr1 []int&lt;/li&gt;&#xA;&lt;li&gt;You can use slices instead of arrays, and your return types will match with []int&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;You'll find your fix here:&lt;br&gt;&#xA;&lt;a href=&quot;https://play.golang.org/p/5E2hL0796o&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/5E2hL0796o&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit: to allow you to keep your data types as an array, simply change your return types to match. Your function signature should look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func reverseReverse(first [5]int, second [5]int) ([5]int, [5]int)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;GoPlay here:&lt;br&gt;&#xA;&lt;a href=&quot;https://play.golang.org/p/_eV3Q0kspQ&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/_eV3Q0kspQ&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To answer your question, you cannot have a function take in an array of arbitrary size. You would have to specify the length. There is a fundamental difference in Go for []int and [5]int.&lt;/p&gt;&#xA;"" OwnerUserId=""4746361"" LastEditorUserId=""4746361"" LastEditDate=""2017-06-14T20:03:38.727"" LastActivityDate=""2017-06-14T20:03:38.727"" CommentCount=""8"" />
",44553408
44554951,"44554951      <row Id=""44554951"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44555137"" PostTypeId=""2"" ParentId=""44554951"" CreationDate=""2017-06-14T21:36:25.417"" Score=""2"" Body=""&lt;p&gt;This can be done much simpler by realizing there's no need to actually swap the individual elements. Instead, reverse each array and swap their order. Much simpler!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func reverseReverse( a, b []int ) ([]int, []int) {&#xA;    return reverse(b), reverse(a)&#xA;}&#xA;&#xA;func reverse( a []int ) []int {&#xA;    end := len(a) - 1&#xA;&#xA;    // Allocate a new array slice of the same length to copy to.&#xA;    ret := make( []int, len(a) )&#xA;&#xA;    // Copy each element of a into ret, reversed.&#xA;    for i := range a {&#xA;        ret[end-i] = a[i]&#xA;    }&#xA;&#xA;    return ret&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With that revelation, there's little need for the very specialized &lt;code&gt;reverseReverse&lt;/code&gt; function. Swap the order yourself.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Println(reverse(sliceH), reverse(sliceF))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Note that if you just want to take a slice of an array, it's sufficient to write &lt;code&gt;sliceH []int := h[:]&lt;/code&gt; without specifying the start and end. The start is assumed to be 0 and the end is the end. Also note there's no need to declare the type, &lt;code&gt;:=&lt;/code&gt; takes care of that for you.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Even better, you can declare and initialize them directly.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sliceF:= []int{1,2,3,4,5}&#xA;sliceH:= []int{6,7,8,9,10}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""14660"" LastEditorUserId=""14660"" LastEditDate=""2017-06-14T21:42:46.743"" LastActivityDate=""2017-06-14T21:42:46.743"" CommentCount=""3"" />
",44555137
44488526,"44488526      <row Id=""44488526"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44555600"" PostTypeId=""2"" ParentId=""44488526"" CreationDate=""2017-06-14T22:19:12.163"" Score=""0"" Body=""&lt;p&gt;I updated my code, as per the comment from @AniSkywalker to the following code, using the UnmarshalText:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type Priority int&#xA;&#xA;const (&#xA;    VERYLOW = Priority(iota)&#xA;    LOW&#xA;    MEDIUM&#xA;    HIGH&#xA;    VERYHIGH&#xA;)&#xA;&#xA;const (&#xA;    verylow  = &quot;verylow&quot;&#xA;    low      = &quot;low&quot;&#xA;    medium   = &quot;medium&quot;&#xA;    high     = &quot;high&quot;&#xA;    veryhigh = &quot;veryhigh&quot;&#xA;&#xA;    // ANSI color constants.&#xA;    RESET      = &quot;\x1b[0m&quot;&#xA;    BRIGHT     = &quot;\x1b[1m&quot;&#xA;    DIM        = &quot;\x1b[2m&quot;&#xA;    UNDERSCORE = &quot;\x1b[4m&quot;&#xA;    BLINK      = &quot;\x1b[5m&quot;&#xA;    REVERSE    = &quot;\x1b[7m&quot;&#xA;    HIDDEN     = &quot;\x1b[8m&quot;&#xA;    FGBLACK    = &quot;\x1b[30m&quot;&#xA;    FGRED      = &quot;\x1b[31m&quot;&#xA;    FGGREEN    = &quot;\x1b[32m&quot;&#xA;    FGYELLOW   = &quot;\x1b[33m&quot;&#xA;    FGBLUE     = &quot;\x1b[34m&quot;&#xA;    FGMAGENTA  = &quot;\x1b[35m&quot;&#xA;    FGCYAN     = &quot;\x1b[36m&quot;&#xA;    FGWHITE    = &quot;\x1b[37m&quot;&#xA;    BGBLACK    = &quot;\x1b[40m&quot;&#xA;    BGRED      = &quot;\x1b[41m&quot;&#xA;    BGGREEN    = &quot;\x1b[42m&quot;&#xA;    BGYELLOW   = &quot;\x1b[43m&quot;&#xA;    BGBLUE     = &quot;\x1b[44m&quot;&#xA;    BGMAGENTA  = &quot;\x1b[45m&quot;&#xA;    BGCYAN     = &quot;\x1b[46m&quot;&#xA;    BGWHITE    = &quot;\x1b[47m&quot;&#xA;&#xA;    TITLE_COLOUR = BRIGHT + FGGREEN&#xA;    NUMBER_COLOR = FGGREEN&#xA;&#xA;    //color constants&#xA;    BLACK         = &quot;BLACK&quot;&#xA;    RED           = &quot;RED&quot;&#xA;    GREEN         = &quot;GREEN&quot;&#xA;    YELLOW        = &quot;YELLOW&quot;&#xA;    BLUE          = &quot;BLUE&quot;&#xA;    MAGENTA       = &quot;MAGENTA&quot;&#xA;    CYAN          = &quot;CYAN&quot;&#xA;    WHITE         = &quot;WHITE&quot;&#xA;    BRIGHTBLACK   = &quot;BRIGHTBLACK&quot;&#xA;    BRIGHTRED     = &quot;BRIGHTRED&quot;&#xA;    BRIGHTGREEN   = &quot;BRIGHTGREEN&quot;&#xA;    BRIGHTYELLOW  = &quot;BRIGHTYELLOW&quot;&#xA;    BRIGHTBLUE    = &quot;BRIGHTBLUE&quot;&#xA;    BRIGHTMAGENTA = &quot;BRIGHTMAGENTA&quot;&#xA;    BRIGHTCYAN    = &quot;BRIGHTCYAN&quot;&#xA;    BRIGHTWHITE   = &quot;BRIGHTWHITE&quot;&#xA;    NOCOLOR       = &quot;&quot;&#xA;)&#xA;&#xA;type Config struct {&#xA;    Name     string&#xA;    FGColors map[Priority]string&#xA;}&#xA;&#xA;type MarshalableConfig struct {&#xA;    Name     string&#xA;    FGColors map[string]string&#xA;}&#xA;&#xA;var priorityMapFromString = map[string]Priority{&#xA;    veryhigh: VERYHIGH,&#xA;    high:     HIGH,&#xA;    medium:   MEDIUM,&#xA;    low:      LOW,&#xA;    verylow:  VERYLOW,&#xA;}&#xA;&#xA;var priorityToString = map[Priority]string{&#xA;    VERYHIGH: veryhigh,&#xA;    HIGH:     high,&#xA;    MEDIUM:   medium,&#xA;    VERYLOW:  verylow,&#xA;    LOW:      low,&#xA;}&#xA;&#xA;func (p Priority) String() string {&#xA;    return priorityToString[p]&#xA;}&#xA;&#xA;func PriorityFromString(priority string) Priority {&#xA;    if p, ok := priorityMapFromString[priority]; ok {&#xA;        return p&#xA;    }&#xA;    return MEDIUM&#xA;}&#xA;&#xA;func (priority *Priority) UnmarshalText(data []byte) error {&#xA;    *priority = PriorityFromString(string(data))&#xA;    return nil&#xA;}&#xA;&#xA;func main() {&#xA;    fgColors := map[string]string{&#xA;        verylow:  RED,&#xA;        low:      BLUE,&#xA;        medium:   GREEN,&#xA;        high:     BRIGHTBLUE,&#xA;        veryhigh: BRIGHTMAGENTA,&#xA;    }&#xA;&#xA;    m := MarshalableConfig{&quot;Alice&quot;, fgColors}&#xA;    b, err := json.Marshal(m)&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    emptyConfig := Config{}&#xA;    err = json.Unmarshal(b, &amp;amp;emptyConfig)&#xA;    if err != nil {&#xA;        fmt.Printf(&quot;Got a error from unmarshalling: %+v \n&quot;, err)&#xA;        panic(err)&#xA;    }&#xA;    fmt.Printf(&quot;%+v \n&quot;, emptyConfig)&#xA;    var x interface{} = emptyConfig.FGColors[VERYHIGH]&#xA;    fmt.Println(x.(string))&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2992311"" LastActivityDate=""2017-06-14T22:19:12.163"" CommentCount=""0"" />
",44555600
44557109,"44557109      <row Id=""44557109"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44558055"" PostTypeId=""2"" ParentId=""44557109"" CreationDate=""2017-06-15T03:31:14.990"" Score=""4"" Body=""&lt;p&gt;Yes, it is possible. If you are going to modify the value, you must define &lt;code&gt;Add&lt;/code&gt; method on pointer receiver, e.g. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (c *Clock) Add(minutes int) Clock{&#xA;    *c =New(0,minutes + int(*c))&#xA;&#xA;    return *c&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Basic rule is: use pointer receiver if you're going to change the receiver value (except for &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; which act as reference). Take a look at the following materials for better understanding on method receiver:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;The Go tour on &lt;a href=&quot;https://tour.golang.org/methods/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;FAQ: &lt;a href=&quot;https://golang.org/doc/faq#methods_on_values_or_pointers&quot; rel=&quot;nofollow noreferrer&quot;&gt;Should I define methods on values or pointers?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-06-15T03:31:14.990"" CommentCount=""3"" />
",44558055
44559516,"44559516      <row Id=""44559516"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44559883"" PostTypeId=""2"" ParentId=""44559516"" CreationDate=""2017-06-15T06:13:27.420"" Score=""0"" Body=""&lt;p&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/29954/&quot; rel=&quot;nofollow noreferrer&quot;&gt;It's checking for overflow&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// bytes.Repeat(make([]byte, 255), int((^uint(0))/255+1)) panics with the test.&#xA;// Without the test, it returns a bad result.&#xA;&#xA;b := make([]byte, 255)&#xA;count := int((^uint(0))/255 + 1)&#xA;&#xA;fmt.Println(&quot;count:&quot;, count)    // prints 16843010 on the playground&#xA;fmt.Println(&quot;len(b):&quot;, len(b))  // prints 255&#xA;fmt.Println(&quot;count * len(b): &quot;, count*len(b))  // prints 254 &#xA;fmt.Println(&quot;len(b) * count / count != len(b):&quot;, len(b)*count/count != len(b)) // prints false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/3OQ0vB0WC4&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/3OQ0vB0WC4&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-06-15T06:22:23.083"" LastActivityDate=""2017-06-15T06:22:23.083"" CommentCount=""1"" />
",44559883
44560390,"44560390      <row Id=""44560390"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44563025"" PostTypeId=""2"" ParentId=""44560390"" CreationDate=""2017-06-15T08:52:59.040"" Score=""1"" Body=""&lt;p&gt;Drafting answer from my comments discussion with @Glavić.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Utilize the &lt;code&gt;SetMaxOpenConns&lt;/code&gt; and &lt;code&gt;SetMaxIdleConns&lt;/code&gt; settings to keep &lt;code&gt;TIME_WAIT&lt;/code&gt; status and connections under control. If needed use &lt;code&gt;SetConnMaxLifetime&lt;/code&gt; too, generally it's not needed.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-06-15T08:52:59.040"" CommentCount=""0"" />
",44563025
44563029,"44563029      <row Id=""44563029"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44564082"" PostTypeId=""2"" ParentId=""44563029"" CreationDate=""2017-06-15T09:37:57.073"" Score=""2"" Body=""&lt;p&gt;Yes, there might be a huge performance difference (might be several order of magnitude depending on the nature of queries you run and on system and server configuration).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;a href=&quot;https://godoc.org/github.com/jmoiron/sqlx#DB&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sqlx.DB&lt;/code&gt;&lt;/a&gt; type wraps (embeds) an &lt;a href=&quot;https://golang.org/pkg/database/sql/#DB&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sql.DB&lt;/code&gt;&lt;/a&gt; type, which manages a pool of connections:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;DB is a database handle representing a pool of zero or more underlying connections. It's safe for concurrent use by multiple goroutines.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;The sql package creates and frees connections automatically; it also maintains a free pool of idle connections. If the database has a concept of per-connection state, such state can only be reliably observed within a transaction. &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Every time you open a new connection, a lot of things have to happen in the &quot;background&quot;: connection string has to be parsed, a TCP connection has to be estabilished, authentication / authorization must be performed, resources must be allocated at both sides (client and server) etc. These are just the main, obvious things. Even though some of these may be provided / implemented optimized, cached, there is still a significant overhead compared to having a single &lt;code&gt;DB&lt;/code&gt; instance which might have multiple established, authenticated connections ready in a pool, waiting to be used / utilized.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also quoting from &lt;a href=&quot;https://golang.org/pkg/database/sql/#Open&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sql.Open()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The returned DB is safe for concurrent use by multiple goroutines and maintains its own pool of idle connections. &lt;strong&gt;Thus, the Open function should be called just once. It is rarely necessary to close a DB.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://godoc.org/github.com/jmoiron/sqlx#Connect&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sqlx.Connect()&lt;/code&gt;&lt;/a&gt; which you used calls &lt;a href=&quot;https://godoc.org/github.com/jmoiron/sqlx#Open&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sqlx.Open()&lt;/code&gt;&lt;/a&gt; which is &lt;em&gt;&quot;the same as sql.Open, but returns an *sqlx.DB instead&quot;&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So all in all, use a single, global &lt;code&gt;sqlx.DB&lt;/code&gt; or &lt;code&gt;sql.DB&lt;/code&gt; instance, and share / use that everywhere. It provides you automatic connection- and connection pool management. This will provide you the best performance. You may fine-tune the connection pool with the &lt;a href=&quot;https://golang.org/pkg/database/sql/#DB.SetConnMaxLifetime&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;DB.SetConnMaxLifetime()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/database/sql/#DB.SetMaxIdleConns&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;DB.SetMaxIdleConns()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/database/sql/#DB.SetMaxOpenConns&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;DB.SetMaxOpenConns()&lt;/code&gt;&lt;/a&gt; methods.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Idle connections (&lt;code&gt;DB.SetMaxIdleConns()&lt;/code&gt;) are those that are not in-use currently, but sitting in the pool, waiting for someone to pick them up. You should definitely have some of these, e.g. 5 or 10 of them, or even more. &lt;code&gt;DB.SetConnMaxLifetime()&lt;/code&gt; controls how long a new connection may be used. Once it grows older than this, it will be closed (and a new one will be opened if needed). You shouldn't change this, default behavior is never to expire connections. Basically all defaults are sensible, you should only play with them if you experience performance problems. Also, read docs of these methods to have a clear picture.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See this similar, possible duplicate question:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/40999637/mgo-query-performance-seems-consistently-slow-500-650ms/41000876#41000876&quot;&gt;mgo - query performance seems consistently slow (500-650ms)&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-15T11:31:06.327"" LastActivityDate=""2017-06-15T11:31:06.327"" CommentCount=""4"" />
",44564082
44563162,"44563162      <row Id=""44563162"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44567211"" PostTypeId=""2"" ParentId=""44563162"" CreationDate=""2017-06-15T12:13:10.160"" Score=""1"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;What should I use to implement DropColumn (if the column exists, otherwise not.)&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;To answer your question...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Go ahead with that. You can use &lt;code&gt;db.Model(&amp;amp;User{}).DropColumn(&quot;description&quot;)&lt;/code&gt;.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Just handle the errors gracefully.&lt;/strong&gt;  Remember, in Golang, &lt;a href=&quot;https://blog.golang.org/errors-are-values&quot; rel=&quot;nofollow noreferrer&quot;&gt;Errors are values&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    db.AutoMigrate(&amp;amp;User{})&#xA;&#xA;    err := db.Model(&amp;amp;User{}).DropColumn(&quot;description&quot;).Error&#xA;    if err != nil {&#xA;        // Do whatever you want to do!&#xA;        log.Print(&quot;ERROR: We expect the description column to be &#xA;drop-able&quot;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Under the Hood, gorm will &lt;a href=&quot;https://github.com/jinzhu/gorm/blob/2a041971f90398b736ee91c32503d4563d1d0d9e/scope.go#L348&quot; rel=&quot;nofollow noreferrer&quot;&gt;execute&lt;/a&gt; raw postgresql &lt;a href=&quot;https://github.com/jinzhu/gorm/blob/2a041971f90398b736ee91c32503d4563d1d0d9e/scope.go#L1136&quot; rel=&quot;nofollow noreferrer&quot;&gt;query&lt;/a&gt; if it &lt;a href=&quot;https://github.com/jinzhu/gorm/blob/2a041971f90398b736ee91c32503d4563d1d0d9e/scope.go#L351&quot; rel=&quot;nofollow noreferrer&quot;&gt;has no error&lt;/a&gt;. Otherwise, it will &lt;a href=&quot;https://github.com/jinzhu/gorm/blob/2a041971f90398b736ee91c32503d4563d1d0d9e/scope.go#L93&quot; rel=&quot;nofollow noreferrer&quot;&gt;return the error&lt;/a&gt;.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hope this will answer your question. :)&lt;/p&gt;&#xA;"" OwnerUserId=""4039768"" LastActivityDate=""2017-06-15T12:13:10.160"" CommentCount=""2"" />
",44567211
44566297,"44566297      <row Id=""44566297"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44567702"" PostTypeId=""2"" ParentId=""44566297"" CreationDate=""2017-06-15T12:35:43.803"" Score=""1"" Body=""&lt;p&gt;This will pull out the &lt;code&gt;img&lt;/code&gt; element from the read in file and then unmarshal the src attribute from the element. This is making the assumption that you will only ever need to grab the first &lt;code&gt;img&lt;/code&gt; element from the file.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;XMLContent, err = ioutil.ReadFile(&quot;./uploads/moby-dick/OPS/cover.xhtml&quot;)&#xA;CheckError(err)&#xA;&#xA;//Parse the XMLContent to grab just the img element&#xA;strContent := string(XMLContent)&#xA;imgLoc := strings.Index(strContent, &quot;&amp;lt;img&quot;)&#xA;prefixRem := strContent[imgLoc:]&#xA;endImgLoc := strings.Index(prefixRem, &quot;/&amp;gt;&quot;)&#xA;//Move over by 2 to recover the '/&amp;gt;'&#xA;trimmed := prefixRem[:endImgLoc+2]&#xA;&#xA;var coverFile CPSRCS&#xA;err = xml.Unmarshal([]byte(trimmed), &amp;amp;coverFile)&#xA;CheckError(err)&#xA;fmt.Println(coverFile)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will produce the result of {covers/9781449328030_lrg.jpg} for the first input file and {@public@vhost@g@gutenberg@html@files@54869@54869-h@images@cover.jpg} for the second input file you provided.&lt;/p&gt;&#xA;"" OwnerUserId=""2483507"" LastActivityDate=""2017-06-15T12:35:43.803"" CommentCount=""1"" />
",44567702
44567728,"44567728      <row Id=""44567728"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44567980"" PostTypeId=""2"" ParentId=""44567728"" CreationDate=""2017-06-15T12:49:30.577"" Score=""5"" Body=""&lt;p&gt;It is not possible for you to create such functions. Functions that have this generic, magic &quot;gene&quot; are builtin functions covered by the &lt;a href=&quot;https://golang.org/ref/spec&quot; rel=&quot;noreferrer&quot;&gt;language specification&lt;/a&gt;, listed in section &lt;a href=&quot;https://golang.org/ref/spec#Predeclared_identifiers&quot; rel=&quot;noreferrer&quot;&gt;Predeclared identifiers&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Quoting from &lt;a href=&quot;https://golang.org/doc/effective_go.html#append&quot; rel=&quot;noreferrer&quot;&gt;Effective Go: Append:&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The signature of &lt;code&gt;append&lt;/code&gt; [...] schematically, it's like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func append(slice []T, elements ...T) []T&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;where &lt;code&gt;T&lt;/code&gt; is a placeholder for any given type. &lt;strong&gt;You can't actually write a function in Go where the type &lt;code&gt;T&lt;/code&gt; is determined by the caller. That's why &lt;code&gt;append&lt;/code&gt; is built in: it needs support from the compiler.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;See related questions:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/39073756/go-functions-accessed-through-variables/39073811#39073811&quot;&gt;Go functions accessed through variables&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28487036/return-map-like-ok-in-golang-on-normal-functions/28487270#28487270&quot;&gt;Return map like &amp;#39;ok&amp;#39; in Golang on normal functions&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-15T12:55:23.180"" LastActivityDate=""2017-06-15T12:55:23.180"" CommentCount=""0"" />
",44567980
44512343,"44512343      <row Id=""44512343"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44568708"" PostTypeId=""2"" ParentId=""44512343"" CreationDate=""2017-06-15T13:22:26.120"" Score=""3"" Body=""&lt;p&gt;In go1.9 the &lt;code&gt;go test&lt;/code&gt; command accepts a new &lt;code&gt;-list&lt;/code&gt; flag, which takes a regular expression as an argument and prints to stdout the name of any tests, benchmarks, or examples that match it, without running them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;a href=&quot;https://tip.golang.org/cmd/go/#hdr-Description_of_testing_flags&quot; rel=&quot;nofollow noreferrer&quot;&gt;test flags documentation&lt;/a&gt; can be found under &lt;a href=&quot;https://tip.golang.org&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://tip.golang.org&lt;/a&gt; until the official go1.9 release. &lt;/p&gt;&#xA;"" OwnerUserId=""32880"" LastActivityDate=""2017-06-15T13:22:26.120"" CommentCount=""0"" />
",44568708
44563088,"44563088      <row Id=""44563088"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44570361"" PostTypeId=""2"" ParentId=""44563088"" CreationDate=""2017-06-15T14:38:37.473"" Score=""0"" Body=""&lt;p&gt;I believe you are looking for &lt;a href=&quot;https://golang.org/pkg/path/#Base&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;path.Base&lt;/code&gt;&lt;/a&gt;: &quot;Base returns the last element of path.&quot;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;r,_ := http.NewRequest(&quot;GET&quot;, &quot;http://localhost/slow/one.json&quot;, nil)&#xA;fmt.Println(path.Base(r.URL.Path))&#xA;// one.json&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/hlaR3R3cUO&quot; rel=&quot;nofollow noreferrer&quot;&gt;Playground link&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-15T14:38:37.473"" CommentCount=""0"" />
",44570361
44567386,"44567386      <row Id=""44567386"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44571596"" PostTypeId=""2"" ParentId=""44567386"" CreationDate=""2017-06-15T15:35:52.847"" Score=""1"" Body=""&lt;p&gt;Try this approach based on the &lt;a href=&quot;https://github.com/gorilla/websocket/tree/master/examples/chat#chat-example&quot; rel=&quot;nofollow noreferrer&quot;&gt;Gorilla Chat Example&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the server main loop:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;select {&#xA;    case player.sendChan &amp;lt;- somepacket:&#xA;    default:&#xA;       // The player cannot receive the packet. Close channel to&#xA;       // signal the player to exit. &#xA;       close(player.sendChan)&#xA;&#xA;       // Remove the player from server's collection of players&#xA;       // to avoid sending to closed channel.&#xA;       ...&#xA;&#xA;       // Let the player's sending loop close the connection &#xA;       // and do other cleanup.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is sendChan:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;p.sendChan := make(chan Packet, 100)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In server player's sending loop (in their own goroutine):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Loop will exit when p.sendChan is closed.&#xA;for packet := range p.sendChan {&#xA;    // Always write with a deadline.&#xA;    p.conn.SetWriteDeadline(time.Now().Add(writeWait))&#xA;    err := sendPacket(packet)&#xA;    // Break out of write loop on any error.&#xA;    if err != nil {&#xA;       break&#xA;    }&#xA;}&#xA;// We reach this point on error sending packet or close on p.sendChan.&#xA;// Remove the player from the server's collection, close the connection and&#xA;// do any necessary cleanup for the player.&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-06-15T15:35:52.847"" CommentCount=""0"" />
",44571596
44572067,"44572067      <row Id=""44572067"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44572492"" PostTypeId=""2"" ParentId=""44572067"" CreationDate=""2017-06-15T16:22:56.903"" Score=""6"" Body=""&lt;p&gt;You're not doing what you think you're doing; it looks like you WANT to call a method on a memory struct, but the compiler is looking for a function named WriteRam within the memory package because of how you're calling that method.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Look at your signature in memory.go:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (memory *Memories) WriteRAM(position uint16, value uint8)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You have a receiver &lt;code&gt;func (memory *Memories)&lt;/code&gt;. This means that in order to call this method, you need to have a memory.Memories variable declared somewhere.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think you might want your main to look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;gogoboy/cpu&quot;&#xA;    &quot;gogoboy/memory&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    cpu.InitializeRegisters()&#xA;    mem := memory.Memories{}&#xA;    mem.WriteRAM(0x00, 0xFF)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4746361"" LastEditorUserId=""4746361"" LastEditDate=""2017-06-15T16:30:55.187"" LastActivityDate=""2017-06-15T16:30:55.187"" CommentCount=""2"" />
",44572492
44573301,"44573301      <row Id=""44573301"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44573342"" PostTypeId=""2"" ParentId=""44573301"" CreationDate=""2017-06-15T17:19:07.940"" Score=""1"" Body=""&lt;p&gt;You can convert an &lt;code&gt;[]string&lt;/code&gt; to a string` by doing:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import &quot;strings&quot;&#xA;&#xA;//...&#xA;&#xA;if strings.Join(s, &quot;&quot;) == &quot;a10&quot; {&#xA;      fmt.Println(&quot;Worked&quot;, s)&#xA;} else {&#xA;      fmt.Println(s)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You also need to convert &lt;code&gt;i&lt;/code&gt; (an int) to a &lt;code&gt;string&lt;/code&gt;, most likely you would use &lt;code&gt;strconv.Itoa&lt;/code&gt;.  In the end, you code would look something like this: &lt;a href=&quot;https://play.golang.org/p/gD5b5XFimJ&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/gD5b5XFimJ&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;strconv&quot;&#xA;    &quot;strings&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    var s []string&#xA;    s = append(s, &quot;a&quot;)&#xA;    fmt.Println(s)&#xA;    for i := 0; i &amp;lt;= 1000; i++ {&#xA;        s = append(s, strconv.Itoa(i))&#xA;        if strings.Join(s, &quot;&quot;) == &quot;a01&quot; {&#xA;            fmt.Println(&quot;Worked&quot;, s)&#xA;            return&#xA;        } else {&#xA;            fmt.Println(s)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Although, you could also just not use an array and append to the string (or an []byte) directly...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;strconv&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    var s := &quot;a&quot;&#xA;    fmt.Println(s)&#xA;    for i := 0; i &amp;lt;= 1000; i++ {&#xA;        s += strconv.Itoa(i)&#xA;        if s == &quot;a01&quot; {&#xA;            fmt.Println(&quot;Worked&quot;, s)&#xA;            return&#xA;        } else {&#xA;            fmt.Println(s)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To reset the array every time, just make the main method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for i := 0; i &amp;lt;= 1000; i++ {&#xA;    s := []string{&quot;a&quot;}&#xA;    s = append(s, strconv.Itoa(i))&#xA;    if strings.Join(s, &quot;&quot;) == &quot;a10&quot; {&#xA;        fmt.Println(&quot;Worked&quot;, s)&#xA;        return&#xA;    } else {&#xA;        fmt.Println(s)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2082673"" LastEditorUserId=""2082673"" LastEditDate=""2017-06-15T17:50:24.423"" LastActivityDate=""2017-06-15T17:50:24.423"" CommentCount=""3"" />
",44573342
44575225,"44575225      <row Id=""44575225"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44575837"" PostTypeId=""2"" ParentId=""44575225"" CreationDate=""2017-06-15T19:50:27.390"" Score=""0"" Body=""&lt;p&gt;With &lt;a href=&quot;https://godoc.org/gopkg.in/mgo.v2#Query.Select&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Query.Select()&lt;/code&gt;&lt;/a&gt; you may specify which fields of the queried document(s) you want to retrieve, but the retrieved entities &lt;strong&gt;will not be the values of the selected fields, they will still be the values of the queried documents!&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So since you are querying the &lt;code&gt;&quot;users&quot;&lt;/code&gt; collection, you should pass a value of &lt;code&gt;*User&lt;/code&gt; to &lt;a href=&quot;https://godoc.org/gopkg.in/mgo.v2#Query.One&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Query.One()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;name := &quot;anything&quot;&#xA;u := models.User{}&#xA;c := s.DB(&quot;ep2&quot;).C(&quot;users&quot;)&#xA;err := c.Find(bson.M{&quot;name&quot;: name}).Select(bson.M{&quot;wallet&quot;: 1}).One(&amp;amp;u)&#xA;if err != nil {&#xA;    // Handle error&#xA;    return&#xA;}&#xA;&#xA;// Wallet is in u.Wallet&#xA;fmt.Printf(&quot;Result wallet: %+v&quot;, u.Wallet)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastActivityDate=""2017-06-15T19:50:27.390"" CommentCount=""3"" />
",44575837
44575201,"44575201      <row Id=""44575201"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44576369"" PostTypeId=""2"" ParentId=""44575201"" CreationDate=""2017-06-15T20:20:49.533"" Score=""0"" Body=""&lt;p&gt;&lt;strong&gt;Short answer:&lt;/strong&gt; You shouldn't do that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Combining tests like that makes your code easier to write, but &lt;em&gt;less readable&lt;/em&gt;.  More importantly, it makes a test failure harder to diagnose.  Suppose that 6 months from now, one of those tests starts failing. How will you know if the failure is due to &lt;code&gt;c.operation&lt;/code&gt; not matching expectations, or &lt;code&gt;c.change&lt;/code&gt;?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Longer answer:&lt;/strong&gt; Consider doing a deep-equal comparison, with a textual diff output.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;By combining &lt;code&gt;reflect.DeepEqual&lt;/code&gt;, &lt;a href=&quot;https://godoc.org/github.com/davecgh/go-spew/spew&quot; rel=&quot;nofollow noreferrer&quot;&gt;go-spew&lt;/a&gt;, and a diff library, you can easily put together an assertion method that does a deep equal comparison of two structs, and if they don't match, produces a textual diff output that will make it easy to diagnose a failure.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have a library that does this for use in my own personal projects. &lt;a href=&quot;http://godoc.org/github.com/flimzy/diff&quot; rel=&quot;nofollow noreferrer&quot;&gt;github.com/flimzy/diff&lt;/a&gt; It's not really intended for public consumption--I suggest just using it only for inspiration. But using it as an example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;row := tx.QueryRow(&quot;select operation, primary_key, before_change, change, changed_at from foo.bar = 'I' order by 1 desc limit 1;&quot;)&#xA;&#xA;c := columns{}&#xA;row.Scan(&amp;amp;c.operation, &amp;amp;c.primaryKey, &amp;amp;c.beforeChange, &amp;amp;c.change, &amp;amp;c.changedAt)&#xA;expected := columns{&#xA;    operation: &quot;I&quot;,&#xA;}&#xA;if d := diff.Interface(expected, c); d != &quot;&quot; {&#xA;    t.Error(d)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I leave it as an exercise for the reader how to handle the &lt;code&gt;changedAt&lt;/code&gt; column in such tests.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-06-15T20:20:49.533"" CommentCount=""0"" />
",44576369
44577539,"44577539      <row Id=""44577539"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44577611"" PostTypeId=""2"" ParentId=""44577539"" CreationDate=""2017-06-15T21:51:51.170"" Score=""7"" Body=""&lt;p&gt;You can do it the same way it's done with e.g. &lt;code&gt;http.Pusher&lt;/code&gt; or &lt;code&gt;io.Closer&lt;/code&gt;. You create a new interface with the &quot;optional&quot; method, and pass around the original interface. When you want to execute the optional method, you use a type assertion to check if the value you have implements the other interface, and if it does, call the method.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; type eventHandle interface {&#xA;     eventHookTypeA&#xA;     eventHookTypeB&#xA;     // DON'T add TypeC interface.&#xA;     someOtherMethod() results&#xA; }&#xA; type eventHookTypeA interface {&#xA;     // method definitions&#xA;     HandleEventA() results&#xA; }&#xA; type eventHookTypeB interface {&#xA;     // method definitions&#xA;     HandleEventB() results&#xA; }&#xA; type eventHookTypeC interface {&#xA;     HandleEventC() results&#xA; }&#xA;&#xA; func handleEvents(eventType string, handle eventHandle) results {&#xA;      if eventType == &quot;eventA&quot; {&#xA;         return handle.HandleEventA()&#xA;      } else if eventType == &quot;eventB&quot; {&#xA;         return handle.HandleEventB()&#xA;      } else if eventType == &quot;eventC&quot; {&#xA;         if c,ok := handle.(eventHookTypeC); ok {&#xA;             return c.HandleEventC()&#xA;         } else {&#xA;             log.Println(&quot;somewhat bad happen&quot;)&#xA;         }&#xA;      }&#xA;      return nil&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7426"" LastEditorUserId=""7426"" LastEditDate=""2017-06-15T22:04:58.280"" LastActivityDate=""2017-06-15T22:04:58.280"" CommentCount=""0"" />
",44577611
44571744,"44571744      <row Id=""44571744"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44580206"" PostTypeId=""2"" ParentId=""44571744"" CreationDate=""2017-06-16T03:14:20.780"" Score=""0"" Body=""&lt;p&gt;Let's read how the golang official guys look at strings in go(&lt;a href=&quot;https://blog.golang.org/strings&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://blog.golang.org/strings&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;In Go, a string is in effect a read-only slice of bytes. If you're at all uncertain about what a slice of bytes is or how it works, please read the previous blog post; we'll assume here that you have.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;It's important to state right up front that a string holds arbitrary bytes. It is not required to hold Unicode text, UTF-8 text, or any other predefined format. As far as the content of a string is concerned, it is exactly equivalent to a slice of bytes.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So, apparently in your case, s[0] is a byte type, you need explicit case if you really need the assignment.&lt;/p&gt;&#xA;"" OwnerUserId=""3765983"" LastActivityDate=""2017-06-16T03:14:20.780"" CommentCount=""0"" />
",44580206
44580389,"44580389      <row Id=""44580389"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44580715"" PostTypeId=""2"" ParentId=""44580389"" CreationDate=""2017-06-16T04:14:59.043"" Score=""0"" Body=""&lt;p&gt;Issue is struct you're passing doesn't have element in the XML hierarchy (&lt;code&gt;XMLName  xml.Name&lt;/code&gt; mapping).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Change these two lines to-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var rpc Rpc_reply&#xA;err2 := xml.Unmarshal(b, &amp;amp;rpc)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-06-16T04:41:42.160"" LastActivityDate=""2017-06-16T04:41:42.160"" CommentCount=""1"" />
",44580715
44586280,"44586280      <row Id=""44586280"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44586468"" PostTypeId=""2"" ParentId=""44586280"" CreationDate=""2017-06-16T10:03:14.430"" Score=""2"" Body=""&lt;p&gt;You are creating a new &lt;code&gt;Queue&lt;/code&gt; instead of accessing the one in the &lt;code&gt;Config&lt;/code&gt; structure, and this new value prevents modification to the &lt;code&gt;Queue&lt;/code&gt; in &lt;code&gt;Config.Queues&lt;/code&gt;. Try direct assignment:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// ...&#xA;&#xA;t.Config.Queues[j].Connections = make([]*redis.Client, queue.Concurrent)&#xA;&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or if you want to use an auxillary variable, change &lt;code&gt;Config.Queues&lt;/code&gt; type to &lt;code&gt;[]*Queue&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Config struct {&#xA;  Queues    []*Queue&#xA;  RedisAddr string&#xA;  RedisDB   int&#xA;}&#xA;&#xA;// ...&#xA;&#xA;config := Config{&#xA;  RedisAddr: &quot;10.1.1.59:6379&quot;,&#xA;  RedisDB:   8,&#xA;  Queues: []*Queue{&#xA;    &amp;amp;Queue{Name: &quot;default&quot;, Concurrent: 1},&#xA;    &amp;amp;Queue{Name: &quot;mail&quot;, Concurrent: 2},&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now your original code should work.&lt;/p&gt;&#xA;"" OwnerUserId=""3129778"" LastEditorUserId=""3129778"" LastEditDate=""2017-06-16T10:08:21.717"" LastActivityDate=""2017-06-16T10:08:21.717"" CommentCount=""0"" />
",44586468
44588674,"44588674      <row Id=""44588674"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44588877"" PostTypeId=""2"" ParentId=""44588674"" CreationDate=""2017-06-16T12:06:14.383"" Score=""2"" Body=""&lt;p&gt;Yes, you can 'cause &lt;code&gt;request&lt;/code&gt; is a regular variable.&#xA;It's passed by pointer, so if you will change &lt;code&gt;request&lt;/code&gt; in &lt;code&gt;getName&lt;/code&gt; it will change in &lt;code&gt;Say&lt;/code&gt; too.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;net/http&quot;&#xA;&#xA;func main() {&#xA;    http.HandleFunc(&quot;saySomething&quot;, Say)&#xA;}&#xA;&#xA;func Say(responseW http.ResponseWriter, request *http.Request) {&#xA;    name := getName(request) // passing request value to another function&#xA;    println(name)&#xA;}&#xA;&#xA;func getName(request *http.Request) string {&#xA;    request.ParseForm()&#xA;    return request.Form.Get(&quot;name&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See Golang tour &lt;a href=&quot;https://tour.golang.org/moretypes/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://tour.golang.org/moretypes/1&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""433041"" LastActivityDate=""2017-06-16T12:06:14.383"" CommentCount=""0"" />
",44588877
44588826,"44588826      <row Id=""44588826"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44589101"" PostTypeId=""2"" ParentId=""44588826"" CreationDate=""2017-06-16T12:18:55.893"" Score=""3"" Body=""&lt;p&gt;The language specification says:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;If the capacity of s is not large enough to fit the additional values, append allocates a new, sufficiently large underlying array that fits both the existing slice elements and the additional values. Otherwise, append re-uses the underlying array.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;If you want the slice to point to a different underlying array you need to always make a copy.&lt;/p&gt;&#xA;"" OwnerUserId=""939410"" LastActivityDate=""2017-06-16T12:18:55.893"" CommentCount=""3"" />
",44589101
44594289,"44594289      <row Id=""44594289"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44594347"" PostTypeId=""2"" ParentId=""44594289"" CreationDate=""2017-06-16T16:52:31.787"" Score=""2"" Body=""&lt;p&gt;You're looking at two separate data structures, so to unmarshal them with a single &lt;code&gt;struct&lt;/code&gt; type, you'd need to account for both:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Owner struct {&#xA;    Name string&#xA;    Pet&#xA;    Pets []Pet `json:&quot;Pet&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then, if you want the slice to be authoritative, after you unmarshall, move the embedded to the slice:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// owner := unmarshall blah blah&#xA;if owner.Pet != Pet{} {&#xA;    owner.Pets = append(owner.Pets, owner.Pet)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-16T16:52:31.787"" CommentCount=""3"" />
",44594347
44589854,"44589854      <row Id=""44589854"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44594408"" PostTypeId=""2"" ParentId=""44589854"" CreationDate=""2017-06-16T16:56:04.310"" Score=""1"" Body=""&lt;p&gt;Yes it's possible. &lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Suppose that the &lt;code&gt;GOPATH&lt;/code&gt; is &lt;code&gt;C:\Work\golang&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Revel project name is &lt;code&gt;myapp&lt;/code&gt;, thus the location of the project (workspace) will be &lt;code&gt;C:\Work\golang\src\myapp&lt;/code&gt;. &lt;/li&gt;&#xA;&lt;li&gt;Make some changes to the controllers etc...&lt;/li&gt;&#xA;&lt;li&gt;Run the application with &lt;code&gt;revel run myapp&lt;/code&gt;, then press &lt;code&gt;CTRL+C&lt;/code&gt; to exit. This step is necessary to generate corresponding go files. The generated file, i.e. the &lt;code&gt;main&lt;/code&gt; package will be available under &lt;code&gt;${workspaceRoot}/app/tmp/main.go&lt;/code&gt; &lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Configure &lt;code&gt;launch.json&lt;/code&gt; as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &quot;version&quot;: &quot;0.2.0&quot;,&#xA;    &quot;configurations&quot;: [&#xA;        {&#xA;            &quot;name&quot;: &quot;Launch&quot;,&#xA;            &quot;type&quot;: &quot;go&quot;,&#xA;            &quot;request&quot;: &quot;launch&quot;,&#xA;            &quot;mode&quot;: &quot;debug&quot;,&#xA;            &quot;remotePath&quot;: &quot;&quot;,&#xA;            &quot;port&quot;: 2345,&#xA;            &quot;host&quot;: &quot;127.0.0.1&quot;,&#xA;            &quot;env&quot;: {},&#xA;            &quot;showLog&quot;: true,&#xA;            &quot;program&quot;: &quot;${workspaceRoot}/app/tmp/&quot;,&#xA;            &quot;args&quot;: [&quot;-importPath&quot;, &quot;myapp&quot;, &quot;-srcPath&quot;, &quot;c:\\work\\golang\\src&quot;,  &quot;-runMode&quot;, &quot;dev&quot;]&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;The important parts are &lt;code&gt;program&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; parameters, while the other parameters are unmodified. &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Set &lt;code&gt;breakpoint&lt;/code&gt; and start the &lt;code&gt;delve&lt;/code&gt; debugger...&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/CW1XT.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/CW1XT.jpg&quot; alt=&quot;Debug revel application&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;EDIT:&lt;/h2&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Setting &lt;code&gt;args&lt;/code&gt; parameter to &lt;code&gt;[&quot;-importPath&quot;, &quot;myapp&quot;, &quot;-srcPath&quot;, &quot;${workspaceRoot}/..&quot;,  &quot;-runMode&quot;, &quot;dev&quot;]&lt;/code&gt; also work, and I think this should work in other platforms (Mac, Linux) too. &lt;/li&gt;&#xA;&lt;li&gt;The error message is related to &lt;code&gt;delve&lt;/code&gt; issue. See &lt;a href=&quot;https://github.com/Microsoft/vscode-go/issues/986&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/Microsoft/vscode-go/issues/986&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-06-17T01:07:37.997"" LastActivityDate=""2017-06-17T01:07:37.997"" CommentCount=""5"" />
",44594408
44594659,"44594659      <row Id=""44594659"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44594682"" PostTypeId=""2"" ParentId=""44594659"" CreationDate=""2017-06-16T17:13:13.997"" Score=""2"" Body=""&lt;p&gt;There's no difference. The interface is the type of your variable/field/parameter; the value is still (most likely) a struct. This is the same as in Java, where you can specify that a method argument is of an interface type, but you must still pass in a concretion. Calling methods on the interface-typed argument is the same as calling the method on a concrete type.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-16T17:13:13.997"" CommentCount=""1"" />
",44594682
44596373,"44596373      <row Id=""44596373"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44596771"" PostTypeId=""2"" ParentId=""44596373"" CreationDate=""2017-06-16T19:36:50.593"" Score=""1"" Body=""&lt;p&gt;It seems you have problem at this line-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t := A{B_j: []B{X: name.text, Y: name.type }}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You're not creating a slice properly. Try following-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t := A{B_j: []B{{X: name.text, Y: name.type}}}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Let's do it better way-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var bj []B&#xA;for _, name := range t.name{&#xA;  bj = append(bj, B{X: name.text,Y: name.type})&#xA;}&#xA;&#xA;t := A{B_j: bj}&#xA;s, _ := json.MarshalIndent(t,&quot;&quot;, &quot; &quot;)      &#xA;os.Stdout.Write(s)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Sample program with static values &lt;a href=&quot;https://play.golang.org/p/a2ZDV8lgWP&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/a2ZDV8lgWP&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note: &lt;code&gt;type&lt;/code&gt; is language keyword, do not use it as variable name.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-06-16T20:07:40.507"" LastActivityDate=""2017-06-16T20:07:40.507"" CommentCount=""3"" />
",44596771
42690138,"42690138      <row Id=""42690138"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44598106"" PostTypeId=""2"" ParentId=""42690138"" CreationDate=""2017-06-16T21:14:34.887"" Score=""1"" Body=""&lt;p&gt;you can solve this with &lt;a href=&quot;https://golang.org/pkg/sync/#WaitGroup&quot; rel=&quot;nofollow noreferrer&quot;&gt;sync.WaitGroup&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;You can start listening your channels in separate goroutines.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;WaitGroup&lt;/code&gt; will coordinate how many goroutines do you have.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;wg.Add(1)&lt;/code&gt; says that we're going to start new goroutine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;wg.Done()&lt;/code&gt; says that goroutine is finished.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;wg.Wait()&lt;/code&gt; blocks goroutine, until all started goroutines aren't finished yet.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This 3 methods allows you to coordinate goroutines.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/HnFG366v-C&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go playground link&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;PS. you might be interested in &lt;a href=&quot;https://golang.org/pkg/sync/#RWMutex&quot; rel=&quot;nofollow noreferrer&quot;&gt;sync.RWMutex&lt;/a&gt; for your &lt;code&gt;SafeCache&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""433041"" LastActivityDate=""2017-06-16T21:14:34.887"" CommentCount=""1"" />
",44598106
44597248,"44597248      <row Id=""44597248"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44598343"" PostTypeId=""2"" ParentId=""44597248"" CreationDate=""2017-06-16T21:35:20.803"" Score=""2"" Body=""&lt;p&gt;ListenAndServe is a helper function that opens a listening socket and then serves connections on that socket. Write the code directly in your application to signal when the socket is open:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;l, err := net.Listen(&quot;tcp&quot;, &quot;:8080&quot;)&#xA;if err != nil {&#xA;    // handle error&#xA;}&#xA;&#xA;// Signal that server is open for business. &#xA;&#xA;if err := http.Serve(l, rootHandler); err != nil {&#xA;    // handle error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If the signalling step does not block, then http.Serve will easily consume any backlog on the listening socket.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Related question: &lt;a href=&quot;https://stackoverflow.com/a/32742904/5728991&quot;&gt;https://stackoverflow.com/a/32742904/5728991&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-06-16T23:05:55.720"" LastActivityDate=""2017-06-16T23:05:55.720"" CommentCount=""1"" />
",44598343
44600570,"44600570      <row Id=""44600570"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44600685"" PostTypeId=""2"" ParentId=""44600570"" CreationDate=""2017-06-17T04:13:27.013"" Score=""1"" Body=""&lt;p&gt;Drafting answer based on conversation from my comments.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Method &lt;code&gt;session.Get(&quot;email&quot;)&lt;/code&gt; returns &lt;code&gt;interface{}&lt;/code&gt; type.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And method &lt;code&gt;e._GetUserId()&lt;/code&gt; accepts string parameter, so you need to do type assertion as &lt;code&gt;string&lt;/code&gt; like -&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;e._GetUserId(email.(string))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-06-17T04:13:27.013"" CommentCount=""0"" />
",44600685
44531822,"44531822      <row Id=""44531822"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44600783"" PostTypeId=""2"" ParentId=""44531822"" CreationDate=""2017-06-17T04:30:33.140"" Score=""1"" Body=""&lt;p&gt;I use VSCode 1.13.1 on Windows 10, and I launch or debug without any issue.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Launching involves in your workspace a &lt;code&gt;${workspaceroot}/.vscode/tasks.json&lt;/code&gt; file.&lt;br&gt;&#xA;To be sure of the GOPATH value, mine includes:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    // See https://go.microsoft.com/fwlink/?LinkId=733558&#xA;    // for the documentation about the tasks.json format&#xA;    &quot;version&quot;: &quot;0.1.0&quot;,&#xA;    &quot;command&quot;: &quot;build&quot;,&#xA;    &quot;isShellCommand&quot;: true,&#xA;    &quot;showOutput&quot;: &quot;always&quot;,&#xA;    &quot;tasks&quot;: [&#xA;        {&#xA;            &quot;options&quot;: {&#xA;                &quot;env&quot;: {&#xA;                    &quot;GOROOT&quot;: &quot;D:/prgs/go/latest&quot;,&#xA;                    &quot;GOPATH&quot;: &quot;${workspaceRoot}&quot;&#xA;                }&#xA;            },&#xA;            &quot;echoCommand&quot;: false,&#xA;            &quot;taskName&quot;: &quot;install&quot;,&#xA;            &quot;isBuildCommand&quot;: true&#xA;        },&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can replace &lt;code&gt;&quot;${workspaceRoot}&quot;&lt;/code&gt; by &lt;code&gt;C:/work/go&lt;/code&gt; in your case.&lt;br&gt;&#xA;That way, a &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;B&lt;/kbd&gt; triggers a compilation+installation (&lt;code&gt;go install&lt;/code&gt;)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And the debugger involves:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;having a &lt;code&gt;dlv.exe&lt;/code&gt; in the %PATH%&lt;/li&gt;&#xA;&lt;li&gt;a &lt;code&gt;${workspaceroot}/.vscode/launch.json&lt;/code&gt; file&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Here is mine&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &quot;version&quot;: &quot;0.2.0&quot;,&#xA;    &quot;configurations&quot;: [&#xA;        {&#xA;            &quot;stopOnEntry&quot;: false,&#xA;            &quot;cwd&quot;: &quot;${workspaceRoot}&quot;,&#xA;            &quot;name&quot;: &quot;Launch&quot;,&#xA;            &quot;type&quot;: &quot;go&quot;,&#xA;            &quot;request&quot;: &quot;launch&quot;,&#xA;            &quot;mode&quot;: &quot;debug&quot;,&#xA;            &quot;remotePath&quot;: &quot;&quot;,&#xA;            &quot;port&quot;: 2345,&#xA;            &quot;host&quot;: &quot;127.0.0.1&quot;,&#xA;            &quot;program&quot;: &quot;${fileDirname}&quot;,&#xA;            &quot;env&quot;: {&#xA;                &quot;GOPATH&quot;: &quot;${workspaceRoot}&quot;&#xA;            },&#xA;            &quot;args&quot;: [],&#xA;            &quot;showLog&quot;: true&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Again you can replace &lt;code&gt;&quot;${workspaceRoot}&quot;&lt;/code&gt; by &lt;code&gt;C:/work/go&lt;/code&gt; in your case (both in &lt;code&gt;GOPATH&lt;/code&gt; and &lt;code&gt;cwd&lt;/code&gt;). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that I specificy GOPATH &lt;em&gt;as well as&lt;/em&gt; cwd (current working directory)&#xA;I open my file relative from the workspace root (that way, the breakpoints are recognized). A simple &lt;kbd&gt;F5&lt;/kbd&gt; from &lt;code&gt;main.go&lt;/code&gt; does run delve successfully (on Windows!)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With that, I can launch VSCode from a &lt;code&gt;cmd&lt;/code&gt; Windows shell which has no &lt;code&gt;GOROOT&lt;/code&gt; or &lt;code&gt;GOPATH&lt;/code&gt; set, and it still works. (because my local user settings do include &lt;code&gt;&quot;go.goroot&quot;: &quot;D:/prgs/go/latest&quot;&lt;/code&gt;)&lt;/p&gt;&#xA;"" OwnerUserId=""6309"" LastActivityDate=""2017-06-17T04:30:33.140"" CommentCount=""2"" />
",44600783
44602568,"44602568      <row Id=""44602568"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44602970"" PostTypeId=""2"" ParentId=""44602568"" CreationDate=""2017-06-17T09:33:55.713"" Score=""4"" Body=""&lt;p&gt;I think you're looking for the &lt;a href=&quot;https://golang.org/pkg/fmt/#Stringer&quot; rel=&quot;nofollow noreferrer&quot;&gt;Stringer&lt;/a&gt; interface.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Stringer interface {&#xA;    String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Any type that implements this interface will be automatically stringified using it by many different libraries, obviously including the &lt;code&gt;fmt&lt;/code&gt; package, and will indeed work in your example of &lt;code&gt;fmt.Println&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-06-17T09:33:55.713"" CommentCount=""1"" />
",44602970
44602985,"44602985      <row Id=""44602985"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44603925"" PostTypeId=""2"" ParentId=""44602985"" CreationDate=""2017-06-17T11:13:41.823"" Score=""1"" Body=""&lt;p&gt;You might be interested in &lt;a href=&quot;https://atom.io/packages/go-plus&quot; rel=&quot;nofollow noreferrer&quot;&gt;go-plus&lt;/a&gt; package.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It has desired feature: &lt;code&gt;Find usages of an identifier using guru&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;guru: a tool for answering questions about Go source code.&lt;/p&gt;&#xA;"" OwnerUserId=""433041"" LastActivityDate=""2017-06-17T11:13:41.823"" CommentCount=""2"" />
",44603925
44604800,"44604800      <row Id=""44604800"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44605969"" PostTypeId=""2"" ParentId=""44604800"" CreationDate=""2017-06-17T14:49:54.510"" Score=""0"" Body=""&lt;p&gt;@rahul you need to keep layout format string like string you want to parse, look at code:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;lang-golang prettyprint-override&quot;&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;time&quot;&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    time, err := time.Parse(&quot;Jan 2006&quot;, &quot;Feb 2020&quot;)&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;    fmt.Println(time)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;layout format you could find &lt;a href=&quot;https://golang.org/src/time/format.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1653085"" LastEditorUserId=""1653085"" LastEditDate=""2017-06-17T16:10:30.483"" LastActivityDate=""2017-06-17T16:10:30.483"" CommentCount=""0"" />
",44605969
44606374,"44606374      <row Id=""44606374"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44606582"" PostTypeId=""2"" ParentId=""44606374"" CreationDate=""2017-06-17T16:02:18.970"" Score=""2"" Body=""&lt;p&gt;When using &lt;a href=&quot;https://golang.org/cmd/cgo/&quot; rel=&quot;nofollow noreferrer&quot;&gt;cgo&lt;/a&gt;, which is how Go links to C programs, which can of course use dynamically-linked libraries.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-06-17T16:02:18.970"" CommentCount=""6"" />
",44606582
44602741,"44602741      <row Id=""44602741"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44606795"" PostTypeId=""2"" ParentId=""44602741"" CreationDate=""2017-06-17T16:23:53.800"" Score=""2"" Body=""&lt;p&gt;In addition to Go's refusal to convert slices along these variance relationships addressed in other answers here, it's useful to think through &lt;em&gt;why&lt;/em&gt; Go refuses to do so, even when the in-memory representation would be the same between the two types.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your example, supplying a slice of &lt;code&gt;woofRunners&lt;/code&gt;s as a parameter of type &lt;code&gt;[]woofer&lt;/code&gt; is asking for &lt;a href=&quot;https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)#Arrays&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;covariant&lt;/em&gt; treatment&lt;/a&gt; of the slice's element type. When &lt;strong&gt;reading&lt;/strong&gt; from the slice, indeed, since a &lt;code&gt;woofRunner&lt;/code&gt; &lt;em&gt;is a&lt;/em&gt; &lt;code&gt;woofer&lt;/code&gt;, you know that every element present in a &lt;code&gt;[]woofRunner&lt;/code&gt; will satisfy a reader looking for &lt;code&gt;[]woofer&lt;/code&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, in Go, a slice is a reference type. When passing a slice as an argument to a function, the slice is copied, but the copy used in the invoked function body continues to refer to the same backing array (absent reallocation necessary before &lt;code&gt;append&lt;/code&gt;ing beyond its capacity). The mutable view of an array—more generally, inserting an item into a collection—requires &lt;em&gt;contravariant&lt;/em&gt; treatment of the element type. That is, when it comes to demanding a function parameter with the intention of &lt;strong&gt;inserting into&lt;/strong&gt; or &lt;strong&gt;overwriting&lt;/strong&gt; an element of type &lt;code&gt;woofRunner&lt;/code&gt;, it's acceptable to supply a &lt;code&gt;[]woofer&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The question is whether the function is demanding the slice parameter for&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;reading from it (for reading &lt;code&gt;woofer&lt;/code&gt;s, a &lt;code&gt;[]woofRunner&lt;/code&gt; is just as good as a &lt;code&gt;[]woofer&lt;/code&gt;),&lt;/li&gt;&#xA;&lt;li&gt;writing to it (for writing &lt;code&gt;woofRunner&lt;/code&gt;s, a &lt;code&gt;[]woofer&lt;/code&gt; is just as good as a &lt;code&gt;[]woofRunner&lt;/code&gt;),&lt;/li&gt;&#xA;&lt;li&gt;or both (neither is an acceptable substitute for the other).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Consider what would happen if Go did accept slice parameters in covariant fashion, and someone came along and changed &lt;code&gt;allWoof&lt;/code&gt; as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Another type satisfying `woofRunner`:&#xA;type wolf struct{}&#xA;func (*wolf) run()  {}&#xA;func (*wolf) woof() {}&#xA;&#xA;func allWoof(ws []woofer) {&#xA;  if len(ws) &amp;gt; 0 {&#xA;    ws[0] = &amp;amp;wolf{}&#xA;  }&#xA;}&#xA;&#xA;dogs := []*dog{&amp;amp;dog{}, &amp;amp;dog{}}&#xA;allWoof(dogs)  // Doesn't compile, but what if it did?&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Even if Go was willing to treat a &lt;code&gt;[]*dog&lt;/code&gt; as a &lt;code&gt;[]woofer&lt;/code&gt;, we would wind up with a &lt;code&gt;*wolf&lt;/code&gt; in our array of &lt;code&gt;*dog&lt;/code&gt; here. Some languages defend against such an accident with run-time type checks on the attempted array insertion or overwrite, but because Go precludes us from even making it this far, it doesn't need these additional checks.&lt;/p&gt;&#xA;"" OwnerUserId=""31818"" LastEditorUserId=""31818"" LastEditDate=""2017-06-17T18:40:37.483"" LastActivityDate=""2017-06-17T18:40:37.483"" CommentCount=""1"" />
",44606795
44606910,"44606910      <row Id=""44606910"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44607216"" PostTypeId=""2"" ParentId=""44606910"" CreationDate=""2017-06-17T17:05:06.713"" Score=""2"" Body=""&lt;p&gt;You can do this &lt;a href=&quot;https://play.golang.org/p/27eKFmBCHY&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/27eKFmBCHY&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;encoding/json&quot;&#xA;&#xA;)&#xA;&#xA;func main() {&#xA;    const input = `{&#xA;        &quot;kind&quot;: &quot;ServiceAccount&quot;,&#xA;        &quot;apiVersion&quot;: &quot;v1&quot;,&#xA;        &quot;metadata&quot;: {&#xA;            &quot;name&quot;: &quot;default&quot;,&#xA;            &quot;namespace&quot;: &quot;mynamespace&quot;,&#xA;            &quot;selfLink&quot;:      &quot;/api/v1/namespaces/mynamespace/serviceaccounts/default&quot;,&#xA;            &quot;uid&quot;: &quot;483d1043-4d68-11e7-be08-3a3f3b149220&quot;,&#xA;            &quot;resourceVersion&quot;: &quot;425039&quot;,&#xA;            &quot;creationTimestamp&quot;: &quot;2017-06-09T23:06:34Z&quot;&#xA;        },&#xA;        &quot;secrets&quot;: [&#xA;            {&#xA;                &quot;name&quot;: &quot;default-token-k99mq&quot;&#xA;            }&#xA;         ]&#xA;    }`&#xA;    type NameStruct struct {&#xA;        Name string `json:&quot;name&quot;`&#xA;    }&#xA;    type Secret struct {&#xA;        Secrets []NameStruct `json:&quot;secrets&quot;`&#xA;    }&#xA;&#xA;    secret := Secret{}&#xA;    json.Unmarshal([]byte(input), &amp;amp;secret)&#xA;    fmt.Println(secret.Secrets[0].Name)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""615120"" LastEditorUserId=""615120"" LastEditDate=""2017-06-17T17:16:53.707"" LastActivityDate=""2017-06-17T17:16:53.707"" CommentCount=""1"" />
",44607216
44608929,"44608929      <row Id=""44608929"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44609465"" PostTypeId=""2"" ParentId=""44608929"" CreationDate=""2017-06-17T21:18:06.047"" Score=""6"" Body=""&lt;p&gt;You're not just benchmarking Go vs D. You're also benchmarking your particular choice of non-standard Go and D libraries against each other: &lt;code&gt;cbor&lt;/code&gt;, &lt;code&gt;vibe&lt;/code&gt;, &lt;code&gt;iris&lt;/code&gt;, etc. And you're benchmarking your particular implementation &lt;a href=&quot;https://github.com/schwern/adventofcode.go/commit/60a05776c4c6ff7b9af9867ceaa88ee371955c2a&quot; rel=&quot;noreferrer&quot;&gt;which can easily vary by 1000x in performance&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With this many variables, the raw benchmark numbers are pretty meaningless for comparing the performance of two languages. It's possible any one of those 3rd party libraries are causing a performance problem. Really you're comparing just those two particular programs. This is the core problem of trying to compare anything but trivial programs across languages: there's too many variables.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;You can reduce the impact of some of these variables with &lt;a href=&quot;https://en.wikipedia.org/wiki/Profiling_(computer_programming)&quot; rel=&quot;noreferrer&quot;&gt;performance profiling&lt;/a&gt;; in Go this would be &lt;code&gt;go tool pprof&lt;/code&gt;. This will tell you what functions and lines are being called how many times and taking how much resources. With that you can find bottlenecks, places in the code which are consuming a lot of resources, and focus optimization efforts there.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As you do profile and optimization rounds for each version, you'll get closer to comparing real, optimized implementations. Or you'll have a better understanding of what each language and library does efficiently, and what they don't.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;The problem of comparing languages is heavily influenced by the particular problem and the particular programmer. X programmers invariably find X to be the best language not because X is the best language, but because X programmers are their best when writing in X and probably chose a problem they're comfortable with. Because of this, there are a number of projects to crowd source the best implementation for each language.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The one which immediately comes to mind is &lt;a href=&quot;http://benchmarksgame.alioth.debian.org/&quot; rel=&quot;noreferrer&quot;&gt;The Computer Language Benchmarks Game&lt;/a&gt;. They do Go, but not D. Maybe you can add it?&lt;/p&gt;&#xA;"" OwnerUserId=""14660"" LastActivityDate=""2017-06-17T21:18:06.047"" CommentCount=""0"" />
",44609465
44611696,"44611696      <row Id=""44611696"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44611754"" PostTypeId=""2"" ParentId=""44611696"" CreationDate=""2017-06-18T04:30:24.170"" Score=""3"" Body=""&lt;p&gt;Issue is &lt;code&gt;InventoryItem&lt;/code&gt; struct fields have to be exported -&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type InventoryItem struct {&#xA;   ID                 int    `json:&quot;id&quot;`&#xA;   ProductID          string `json:&quot;product_id&quot;`&#xA;   ProductCost        int    `json:&quot;product_cost&quot;`&#xA;   ProductAvailabilty int    `json:&quot;product_availability&quot;`&#xA;   ProductSubcat      string `json:&quot;product_subact&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Read more about &lt;a href=&quot;https://www.goinggo.net/2014/03/exportedunexported-identifiers-in-go.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;exported and un-exported fields&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-06-18T04:53:00.067"" LastActivityDate=""2017-06-18T04:53:00.067"" CommentCount=""1"" />
",44611754
44612487,"44612487      <row Id=""44612487"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44613109"" PostTypeId=""2"" ParentId=""44612487"" CreationDate=""2017-06-18T08:27:34.823"" Score=""1"" Body=""&lt;p&gt;With glide you can specify a certain version of the package you want to install. This is done in the glide.yaml&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;TIP: The version is either VCS dependent and can be anything that can&#xA;  be checked out or a semantic version constraint that can be parsed by&#xA;  the github.com/ Masterminds/semver package. For example, with Git this&#xA;  can be a branch, tag, or hash. This varies and depends on what's&#xA;  supported in the VCS.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package: github.com/YOUR/PACKAGE&#xA;import:&#xA;  - package: github.com/onsi/ginkgo/ginkgo&#xA;    version: master&#xA;    repo: git@github.com:onsi/ginkgo.git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will download the latest master commit.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://glide.readthedocs.io/en/latest/versions/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&lt;/a&gt; are further information about versioning with glide. &lt;/p&gt;&#xA;"" OwnerUserId=""8167759"" LastActivityDate=""2017-06-18T08:27:34.823"" CommentCount=""2"" />
",44613109
44604261,"44604261      <row Id=""44604261"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44613689"" PostTypeId=""2"" ParentId=""44604261"" CreationDate=""2017-06-18T09:41:35.890"" Score=""0"" Body=""&lt;p&gt;Here's an example of &lt;b&gt;bad&lt;/b&gt; code just to illustrate the issue:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;sync&quot;&#xA;)&#xA;&#xA;type SafeCounter struct {&#xA;    lock      sync.Mutex&#xA;    count     int&#xA;    enabled   bool&#xA;    NextValue func(int) int&#xA;}&#xA;&#xA;const maxCount = 10&#xA;&#xA;func (c *SafeCounter) Count() int {&#xA;    return c.count&#xA;}&#xA;&#xA;func (c *SafeCounter) Increment() {&#xA;    c.lock.Lock()&#xA;    if c.enabled {&#xA;        c.count = c.NextValue(c.count)&#xA;    }&#xA;    c.lock.Unlock()&#xA;}&#xA;&#xA;func (c *SafeCounter) SetEnabled(enabled bool) {&#xA;    c.lock.Lock()&#xA;    c.enabled = enabled&#xA;    if !enabled {&#xA;        c.count = 0&#xA;    }&#xA;    c.lock.Unlock()&#xA;}&#xA;&#xA;func main() {&#xA;    var counter SafeCounter&#xA;    counter.SetEnabled(true)&#xA;    counter.NextValue = func(value int) int {&#xA;        if counter.Count() &amp;gt; maxCount {&#xA;            // Safe counter doesn't expect this here!&#xA;            // The program will panic in SetEnabled&#xA;            counter.SetEnabled(false)&#xA;        }&#xA;        return value + 1&#xA;    }&#xA;    for i := 0; i &amp;lt; 100; i++ {&#xA;        doAction()&#xA;        counter.Increment()&#xA;    }&#xA;    fmt.Println(counter.Count())&#xA;}&#xA;&#xA;func doAction() {&#xA;    // some action&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Both &lt;code&gt;Increment&lt;/code&gt; and &lt;code&gt;SetEnabled&lt;/code&gt; acquire locks because they can't allow the values of &lt;code&gt;enabled&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; to change while they're in the middle of something. However, if the lock was re-entrant (recursive), then it would be allowed (since both calls run on the same goroutine).&lt;/p&gt;&#xA;"" OwnerUserId=""4283005"" LastEditorUserId=""4283005"" LastEditDate=""2017-06-18T21:45:03.713"" LastActivityDate=""2017-06-18T21:45:03.713"" CommentCount=""0"" />
",44613689
44613920,"44613920      <row Id=""44613920"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44614124"" PostTypeId=""2"" ParentId=""44613920"" CreationDate=""2017-06-18T10:39:05.070"" Score=""1"" Body=""&lt;p&gt;You're not closing your &lt;code&gt;gz&lt;/code&gt; writer. It's possible issue. &lt;code&gt;gzip.Writer&lt;/code&gt; &lt;a href=&quot;https://golang.org/pkg/compress/gzip/#NewWriter&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation&lt;/a&gt; says:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;It is the caller's responsibility to call Close on the WriteCloser when done. Writes may be buffered and not flushed until Close.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So, try to add &lt;code&gt;gz.Close()&lt;/code&gt; after you've completed writing data.&lt;/p&gt;&#xA;"" OwnerUserId=""8099995"" LastActivityDate=""2017-06-18T10:39:05.070"" CommentCount=""0"" />
",44614124
44614413,"44614413      <row Id=""44614413"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44614615"" PostTypeId=""2"" ParentId=""44614413"" CreationDate=""2017-06-18T11:44:31.247"" Score=""5"" Body=""&lt;p&gt;From the &lt;a href=&quot;https://github.com/rzcoder/node-rsa&quot; rel=&quot;noreferrer&quot;&gt;Node-RSA pages&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;signingScheme — scheme used for signing and verifying. Can be &lt;code&gt;'pkcs1'&lt;/code&gt; or &lt;code&gt;'pss'&lt;/code&gt; or 'scheme-hash' format string (eg &lt;code&gt;'pss-sha1'&lt;/code&gt;). &lt;strong&gt;Default &lt;code&gt;'pkcs1-sha256'&lt;/code&gt;&lt;/strong&gt;, or, if chosen pss: &lt;code&gt;'pss-sha1'&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So the NodeJS implementation uses PKCS#1 v1.5 padding with SHA-256 while Go uses PSS padding with SHA-256.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You basically need to make sure that your signature algorithms and their parameters match. Note that you may also want to make sure that the hash function used for MGF1 (the mask generation function within PSS) matches if you go for PSS and the code keeps failing.&lt;/p&gt;&#xA;"" OwnerUserId=""589259"" LastActivityDate=""2017-06-18T11:44:31.247"" CommentCount=""1"" />
",44614615
44619606,"44619606      <row Id=""44619606"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44619735"" PostTypeId=""2"" ParentId=""44619606"" CreationDate=""2017-06-18T21:33:33.293"" Score=""2"" Body=""&lt;p&gt;Updates: Just referred &lt;a href=&quot;https://dev.twitter.com/rest/reference/post/media/upload#Parameters&quot; rel=&quot;nofollow noreferrer&quot;&gt;Twitter API Upload parameter&lt;/a&gt;. As per your code snippet you're using both fields &lt;code&gt;media&lt;/code&gt; and &lt;code&gt;media_data&lt;/code&gt;. You have to use only one -&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Upload using base64 -&gt; field name is &lt;code&gt;media_data&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Upload using raw -&gt; field name is &lt;code&gt;media&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;And, you have to add &lt;code&gt;Content-Type&lt;/code&gt; header.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;req, err := http.NewRequest(&quot;POST&quot;,&#xA;    &quot;https://upload.twitter.com/1.1/media/upload.json&quot;,&#xA;    body)&#xA;req.Header.Set(&quot;Content-Type&quot;, writer.FormDataContentType())&#xA;if err := writer.Close(); err != nil {&#xA;   log.Println(err)&#xA;}&#xA;// Now fire the http request&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;PS: While composing an answer, in 30 secs gap, @cerise-limón added comment, also close the multipart writer as mentioned by @cerise-limón.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Asked in the comment:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Twitter accepts application/octet-stream, you may not need below approach.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Adding multi-part with user supplied &lt;code&gt;Content-Type&lt;/code&gt; instead of &lt;code&gt;application/octet-stream&lt;/code&gt;. Basically you have to do same implementation as convenience wrapper with your content-type.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;writer := multipart.NewWriter(body)&#xA;h := make(textproto.MIMEHeader)&#xA;h.Set(&quot;Content-Disposition&quot;, fmt.Sprintf(`form-data; name=&quot;%s&quot;; filename=&quot;%s&quot;`,&#xA;        escapeQuotes(fieldname), escapeQuotes(filename)))&#xA;h.Set(&quot;Content-Type&quot;, &quot;image/png&quot;)&#xA;part, err := writer.CreatePart(h)&#xA;// use part same as before&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Definition of &lt;code&gt;escapeQuotes&lt;/code&gt; from multiple-part package.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var quoteEscaper = strings.NewReplacer(&quot;\\&quot;, &quot;\\\\&quot;, `&quot;`, &quot;\\\&quot;&quot;)&#xA;func escapeQuotes(s string) string {&#xA;    return quoteEscaper.Replace(s)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-06-18T22:39:57.110"" LastActivityDate=""2017-06-18T22:39:57.110"" CommentCount=""9"" />
",44619735
44626931,"44626931      <row Id=""44626931"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44627139"" PostTypeId=""2"" ParentId=""44626931"" CreationDate=""2017-06-19T09:43:11.673"" Score=""0"" Body=""&lt;p&gt;From the &lt;a href=&quot;https://golang.org/src/net/http/server.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation&lt;/a&gt;, address value should be a string.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// ListenAndServe always returns a non-nil error.&#xA;func ListenAndServe(addr string, handler Handler) error {&#xA;    server := &amp;amp;Server{Addr: addr, Handler: handler}&#xA;    return server.ListenAndServe()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Can you try?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;external := http.Server{&#xA;    Addr:    &quot;:10001&quot;,&#xA;    Handler: stack,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""615120"" LastEditorUserId=""615120"" LastEditDate=""2017-06-19T12:19:45.577"" LastActivityDate=""2017-06-19T12:19:45.577"" CommentCount=""0"" />
",44627139
44629731,"44629731      <row Id=""44629731"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44629839"" PostTypeId=""2"" ParentId=""44629731"" CreationDate=""2017-06-19T11:51:27.433"" Score=""5"" Body=""&lt;p&gt;Your &lt;code&gt;json&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/questions/10858787/what-are-the-uses-for-tags-in-go/30889373#30889373&quot;&gt;tag specification&lt;/a&gt; is incorrect, that's why the &lt;a href=&quot;https://golang.org/pkg/encoding/json/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;encoding/json&lt;/code&gt;&lt;/a&gt; library defaults to the field name which is &lt;code&gt;Name&lt;/code&gt;. But since there is no JSON field with &lt;code&gt;&quot;Name&quot;&lt;/code&gt; key, &lt;code&gt;Animal.Name&lt;/code&gt; will remain its zero value (which is the empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unmarshaling &lt;code&gt;Order&lt;/code&gt; will still work, because the &lt;code&gt;json&lt;/code&gt; package will use the field name if &lt;code&gt;json&lt;/code&gt; tag specification is missing (tries with both lower and upper-case). Since the field name is identical to the JSON key, it works without extra JSON tag mapping.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can't have a space in the tag specification after the colon and before the quotation mark:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Animal struct {&#xA;    Name  string `json:&quot;Na me&quot;`&#xA;    Order string `json:&quot;Order,omitempty&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With this simple change, it works (try it on the &lt;a href=&quot;https://play.golang.org/p/ij_EunyeJB&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground)&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[{Name:Platypus Order:Monotremata} {Name:Quoll Order:Dasyuromorphia}]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-19T15:19:43.823"" LastActivityDate=""2017-06-19T15:19:43.823"" CommentCount=""4"" />
",44629839
44470806,"44470806      <row Id=""44470806"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44631932"" PostTypeId=""2"" ParentId=""44470806"" CreationDate=""2017-06-19T13:29:01.007"" Score=""0"" Body=""&lt;p&gt;Ok, looks like I really didn't understand the go-way of doing this. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The buzzwords that helped me to move on:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ORM&lt;/li&gt;&#xA;&lt;li&gt;go generate&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Projects that look like solving my issue:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://github.com/jinzhu/gorm&quot; rel=&quot;nofollow noreferrer&quot;&gt;GORM&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://github.com/vattle/sqlboiler&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQLBoiler&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Thanks for the answers, anyway!&lt;/p&gt;&#xA;"" OwnerUserId=""3004786"" LastActivityDate=""2017-06-19T13:29:01.007"" CommentCount=""0"" />
",44631932
44633523,"44633523      <row Id=""44633523"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44633607"" PostTypeId=""2"" ParentId=""44633523"" CreationDate=""2017-06-19T14:45:42.980"" Score=""2"" Body=""&lt;p&gt;Your issue isn't with the variable declarations, it's with the fmt.Println line. You must move this inside of a function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    fmt.Println(words, length)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;GoPlay here:&lt;br&gt;&#xA;&lt;a href=&quot;https://play.golang.org/p/JhUnNEIxIY&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/JhUnNEIxIY&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4746361"" LastActivityDate=""2017-06-19T14:45:42.980"" CommentCount=""1"" />
",44633607
44633596,"44633596      <row Id=""44633596"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44633658"" PostTypeId=""2"" ParentId=""44633596"" CreationDate=""2017-06-19T14:47:59.477"" Score=""3"" Body=""&lt;p&gt;&quot;string&quot; is a builtin. You don't need to do strings.string:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Docs: &lt;a href=&quot;https://golang.org/pkg/builtin/#string&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/builtin/#string&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4746361"" LastActivityDate=""2017-06-19T14:47:59.477"" CommentCount=""0"" />
",44633658
44592333,"44592333      <row Id=""44592333"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44637860"" PostTypeId=""2"" ParentId=""44592333"" CreationDate=""2017-06-19T18:50:04.550"" Score=""1"" Body=""&lt;p&gt;You can try and follow the &lt;a href=&quot;https://stackoverflow.com/a/43641355/6309&quot;&gt;recommendation of this answer&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;If your install is messed up beyond reason (happened to me once), just remove the cloud SDK and any references to it in your &lt;code&gt;$PATH&lt;/code&gt;. Also completely uninstall the regular Go installation. &lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Then start from scratch. &lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/go/download&quot; rel=&quot;nofollow noreferrer&quot;&gt;Install Go, unpack google-cloud-sdk&lt;/a&gt;, run installer (add to &lt;code&gt;$PATH&lt;/code&gt; if needed), &lt;code&gt;gcloud components install app-engine-go&lt;/code&gt;.&lt;br&gt;&#xA;  Voila.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;As mentioned in that same answer, you don't set &lt;code&gt;GOROOT&lt;/code&gt; anywhere, &lt;a href=&quot;https://dave.cheney.net/2013/06/14/you-dont-need-to-set-goroot-really&quot; rel=&quot;nofollow noreferrer&quot;&gt;it is set for you&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""6309"" LastActivityDate=""2017-06-19T18:50:04.550"" CommentCount=""5"" />
",44637860
44637932,"44637932      <row Id=""44637932"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44638530"" PostTypeId=""2"" ParentId=""44637932"" CreationDate=""2017-06-19T19:33:58.257"" Score=""3"" Body=""&lt;p&gt;You should get used to using '?' placeholders in your sql to allow for proper escaping and prevent any potential SQL injection attacks. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You should always check the error in Go before using the returned value. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ip := &quot;192.168.0.1&quot;&#xA;rows, err := db.Query(&quot;SELECT * FROM Ip_ipdata WHERE ipHost=?&quot;, ip)&#xA;if err != nil {&#xA;    // handle error&#xA;}&#xA;// this will ensure that the DB connection gets put back into the pool&#xA;defer rows.Close()&#xA;&#xA;for rows.Next() {&#xA;    // scan here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1817176"" LastActivityDate=""2017-06-19T19:33:58.257"" CommentCount=""0"" />
",44638530
44638610,"44638610      <row Id=""44638610"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44638706"" PostTypeId=""2"" ParentId=""44638610"" CreationDate=""2017-06-19T19:44:23.413"" Score=""0"" Body=""&lt;p&gt;Found the solution, &lt;code&gt;Scanner&lt;/code&gt; and &lt;code&gt;Valuer&lt;/code&gt; should be implemented on the actual value and not a pointer to the &lt;code&gt;customTime&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (ct customTime) Scan(value interface{}) error {&#xA;    ct.Time = value.(time.Time)&#xA;    return nil&#xA;}&#xA;&#xA;func (ct customTime) Value() (driver.Value, error) {&#xA;    return ct.Time, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2171758"" LastActivityDate=""2017-06-19T19:44:23.413"" CommentCount=""0"" />
",44638706
38176290,"38176290      <row Id=""38176290"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44639090"" PostTypeId=""2"" ParentId=""38176290"" CreationDate=""2017-06-19T20:09:47.540"" Score=""0"" Body=""&lt;p&gt;This has been fixed in recent versions of &lt;a href=&quot;https://github.com/pressly/goose&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/pressly/goose&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""385548"" LastActivityDate=""2017-06-19T20:09:47.540"" CommentCount=""0"" />
",44639090
44641199,"44641199      <row Id=""44641199"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44641440"" PostTypeId=""2"" ParentId=""44641199"" CreationDate=""2017-06-19T23:29:05.967"" Score=""2"" Body=""&lt;p&gt;I have not used the bigquery, however I had a look at the &lt;a href=&quot;https://godoc.org/cloud.google.com/go/bigquery#hdr-Schemas&quot; rel=&quot;nofollow noreferrer&quot;&gt;godoc&lt;/a&gt; and &lt;a href=&quot;https://github.com/GoogleCloudPlatform/google-cloud-go/blob/master/bigquery/schema.go#L202&quot; rel=&quot;nofollow noreferrer&quot;&gt;source code&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It seems, you have to use data type &lt;code&gt;civil.DateTime&lt;/code&gt; &lt;a href=&quot;https://github.com/GoogleCloudPlatform/google-cloud-go/blob/master/civil/civil.go#L196&quot; rel=&quot;nofollow noreferrer&quot;&gt;reference&lt;/a&gt; in the struct.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;For e.g:&lt;/strong&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;As per godoc and source code, following should create &lt;a href=&quot;https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#datetime-type&quot; rel=&quot;nofollow noreferrer&quot;&gt;DateTime&lt;/a&gt; field.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type data_pix struct {&#xA;   Id      string&#xA;   IdC     string&#xA;   Stamp   civil.DateTime&#xA;   Tag     []string&#xA;}&#xA;&#xA;schema, err := bigquery.InferSchema(data_pix{})&#xA;// now schema should represent DateTime Field&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There is a &lt;a href=&quot;https://github.com/GoogleCloudPlatform/google-cloud-go/blob/9aed268b14ec7c57a2aa86795c0e63e138084524/civil/civil.go#L204&quot; rel=&quot;nofollow noreferrer&quot;&gt;function&lt;/a&gt; to get &lt;code&gt;civil.DateTime&lt;/code&gt; from &lt;code&gt;time.Time&lt;/code&gt;. I would suggest you have a look at this &lt;a href=&quot;https://github.com/GoogleCloudPlatform/google-cloud-go/blob/master/civil/civil.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;go sourcecode&lt;/a&gt; to know more.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-06-19T23:29:05.967"" CommentCount=""0"" />
",44641440
44641643,"44641643      <row Id=""44641643"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44641834"" PostTypeId=""2"" ParentId=""44641643"" CreationDate=""2017-06-20T00:20:30.457"" Score=""6"" Body=""&lt;p&gt;Default printing verb &lt;code&gt;fmt.Println&lt;/code&gt; uses is &lt;code&gt;%v&lt;/code&gt;. While printing it &lt;a href=&quot;https://golang.org/src/fmt/print.go?s=7388:7437#L841&quot; rel=&quot;nofollow noreferrer&quot;&gt;differentiates&lt;/a&gt; value vs pointer value, that's why you see &lt;code&gt;&amp;amp;&lt;/code&gt; in front of &lt;code&gt;cx&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Println(cx)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Next, you specifically tell &lt;code&gt;fmt.Printf&lt;/code&gt; to use the verb &lt;code&gt;%p&lt;/code&gt;, refer to &lt;a href=&quot;https://golang.org/pkg/fmt/#hdr-Printing&quot; rel=&quot;nofollow noreferrer&quot;&gt;printing&lt;/a&gt; section and it prints &lt;code&gt;base 16 notation, with leading 0x&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Printf(&quot;%p\n&quot;, cx)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""147175"" LastEditDate=""2017-06-21T14:06:10.590"" LastActivityDate=""2017-06-21T14:06:10.590"" CommentCount=""0"" />
",44641834
44641663,"44641663      <row Id=""44641663"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44641923"" PostTypeId=""2"" ParentId=""44641663"" CreationDate=""2017-06-20T00:32:30.187"" Score=""3"" Body=""&lt;p&gt;You're modifying the slice, but you never assign it back to the pointer. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (ptr *Set) AppendElements(elements []*Element) {&#xA;    set := *ptr&#xA;    set = append(set, elements...)&#xA;    *ptr = set&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Usually though, one would dereference the pointer directly in the &lt;code&gt;append&lt;/code&gt; statement: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (set *Set) AppendElements(elements []*Element) {&#xA;    *set = append(*set, elements...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""32880"" LastEditorUserId=""32880"" LastEditDate=""2017-06-20T00:37:18.350"" LastActivityDate=""2017-06-20T00:37:18.350"" CommentCount=""1"" />
",44641923
44642132,"44642132      <row Id=""44642132"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44642209"" PostTypeId=""2"" ParentId=""44642132"" CreationDate=""2017-06-20T01:08:17.543"" Score=""1"" Body=""&lt;p&gt;To achieve your output, define struct as follows-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Identification struct {&#xA;   ID    string&#xA;   Phone int64&#xA;   Email string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And perform operation as follows-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// define slice of Identification&#xA;var idents []Identification&#xA;&#xA;// Unmarshall it&#xA;err := json.Unmarshal([]byte(jsonText), &amp;amp;idents)&#xA;&#xA;// add further value into it&#xA;idents = append(idents, Identification{ID: &quot;ID&quot;, Phone: 15555555555, Email: &quot;Email&quot;})&#xA;&#xA;// now Marshal it&#xA;result, error := json.Marshal(idents)&#xA;&#xA;// now result has your targeted JSON structure&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Sample program of above explanation &lt;a href=&quot;https://play.golang.org/p/67dqOaCWHI&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/67dqOaCWHI&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-06-20T01:19:08.783"" LastActivityDate=""2017-06-20T01:19:08.783"" CommentCount=""5"" />
",44642209
44642241,"44642241      <row Id=""44642241"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44642449"" PostTypeId=""2"" ParentId=""44642241"" CreationDate=""2017-06-20T01:37:50.113"" Score=""2"" Body=""&lt;p&gt;You need to include the hostname in the dial function, otherwise it's looking at localhost which is unique to each container (docker creates a separate networking namespace for containers by default). Change the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;backendPort := &quot;neo4bacon:50051&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Edit: you also need to setup a network and connect the containers to that network because the default bridge does not include DNS discovery:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;docker network create baconnet&#xA;docker run --rm -d --net baconnet --name neo4bacon neo4bacon&#xA;docker run --rm -d --net baconnet -p 8080:8080 --name bacon-api bacon-api&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""596285"" LastEditorUserId=""596285"" LastEditDate=""2017-06-20T01:43:11.463"" LastActivityDate=""2017-06-20T01:43:11.463"" CommentCount=""0"" />
",44642449
44641989,"44641989      <row Id=""44641989"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44642481"" PostTypeId=""2"" ParentId=""44641989"" CreationDate=""2017-06-20T01:41:10.347"" Score=""2"" Body=""&lt;p&gt;You can refer current file as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//go:generate sometool $GOFILE&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;$GOFILE&lt;/code&gt; get expanded to be name of the file processed by go generate.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-06-20T01:47:56.617"" LastActivityDate=""2017-06-20T01:47:56.617"" CommentCount=""0"" />
",44642481
44641615,"44641615      <row Id=""44641615"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44643234"" PostTypeId=""2"" ParentId=""44641615"" CreationDate=""2017-06-20T03:12:50.127"" Score=""1"" Body=""&lt;p&gt;Ok, The solution for above problem is at this link &lt;a href=&quot;https://github.com/rs/cors/blob/master/README.md&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Cors Handler&lt;/a&gt;. It does the trick. &lt;/p&gt;&#xA;"" OwnerUserId=""5906464"" LastActivityDate=""2017-06-20T03:12:50.127"" CommentCount=""0"" />
",44643234
44643839,"44643839      <row Id=""44643839"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44644123"" PostTypeId=""2"" ParentId=""44643839"" CreationDate=""2017-06-20T04:57:45.330"" Score=""1"" Body=""&lt;p&gt;Yes. As per the documentation for &lt;a href=&quot;https://golang.org/pkg/encoding/xml/#Marshal&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;xml.Marshal&lt;/code&gt;&lt;/a&gt;, you can use the tag &lt;code&gt;&quot;,chardata&quot;&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type number struct {&#xA;    Number int64 `xml:&quot;,chardata&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This outputs &lt;code&gt;&amp;lt;number&amp;gt;2&amp;lt;/number&amp;gt;&lt;/code&gt;, as seen at &lt;a href=&quot;https://play.golang.org/p/Aoqfs04OTx&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/Aoqfs04OTx&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""790070"" LastActivityDate=""2017-06-20T04:57:45.330"" CommentCount=""1"" />
",44644123
44642570,"44642570      <row Id=""44642570"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44644832"" PostTypeId=""2"" ParentId=""44642570"" CreationDate=""2017-06-20T05:53:39.823"" Score=""10"" Body=""&lt;h2&gt;Summary&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;This code is slower because of the type assertion, and reduntant data.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Go doesn't encourage you to write type assertions in hot places:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;tree.Value.(int) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Take out this type assertion (and accordingly change &lt;code&gt;Value&lt;/code&gt; to an &lt;code&gt;int&lt;/code&gt; type), and your code will perform about twice as fast (which should be around the speed of your node example). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Take out the redundant data as well, and your code will perform about three times as fast. See the playground example at the end of the post. &lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Details&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;I think this is a mistake of design, rather than implementation. Reading your question, I think there is some confusion about how Go's type system works.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Go's object model doesn't encourage you to do polymorphism using catch-all types (see the top half of &lt;a href=&quot;https://stackoverflow.com/a/41592747/790070&quot;&gt;this excellent answer&lt;/a&gt; for a discussion of Go's polymorphism). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;In a JavaScript world, each object is a specific type. In Go, a &lt;code&gt;struct&lt;/code&gt; can be treated as a specific interface type if it fulfils the &lt;code&gt;interface&lt;/code&gt;'s contract. Note that &lt;code&gt;structs&lt;/code&gt; are not objects - what you called constructors are just &lt;code&gt;struct&lt;/code&gt; initialisers. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;It is possible to write Go code that operates on &lt;code&gt;interface{}&lt;/code&gt; as a placeholder for all types, but the language doesn't really encourage you to write code this way (as you pointed out in your question, it was a challenge to write clean code in the way you would write it in JavaScript).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Because Go doesn't really have objects, trying to write code that feels very object-oriented in Go will be challenging (additionally, Go doesn't have standard inheritance or method overloading). For this reason, I don't think that your code is the kind of code that Go encourages the programmer to write. So, it's not a fair test.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28024884/does-a-type-assertion-type-switch-have-bad-performance-is-slow-in-go&quot;&gt;Type assertion is slow&lt;/a&gt;. (I'm not across the design of Go's internals, but certainly this indicates that the programmer is not expected to write a lot of type assertions). Because of this, it's not surprising that your code is not performant. I changed your code to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Tree struct {&#xA;  IsLeaf bool&#xA;  Left *Tree&#xA;  Value int&#xA;  Right *Tree&#xA;} &#xA; .....&#xA;func sum(tree *Tree) int {&#xA;  if (tree.IsLeaf) {&#xA;    return tree.Value&#xA;  } else {&#xA;    return sum(tree.Left) + sum(tree.Right)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And achieved a 2x speed up on my machine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are probably other optimisations - you might be able to remove &lt;code&gt;IsLeaf&lt;/code&gt;, and you don't need to store values at non-leaf nodes (or alternatively, you could distribute values throughout the tree, so never waste the &lt;code&gt;Value&lt;/code&gt;). I don't know whether JavaScript optimises out these unnecessary &lt;code&gt;Value&lt;/code&gt;s, but I don't believe Go does. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, I think your code is using much more memory than it needs, which won't help performance either.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Does it matter?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;I'm not personally convinced by &quot;I wrote this program in X and Y, and found that Y was slower&quot;, especially as it's hard to compare fairly across frameworks. There are so many other sources of variance - programmer knowledge, machine load, spin-up time, etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To do a fair test you'd need to write code that's idiomatic in each language, but also use the same code. I don't think it's realistic to achieve both.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If this code is your specific scenario, and performance is the primary goal, then this test might be helpful. But, otherwise I don't think it's a very meaningful comparison.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;At scale, I would expect other considerations to beat how fast you can create and traverse a tree. There are technical concerns like data throughput and performance under load, but also softer concerns like programmer time, and maintenance effort.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The academic exercise is interesting, though. And writing code like this is a good way to find the edges of a framework.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Edit: I tried making your code more Go-like, which has the added advantage of a 3x speedup over the original.:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/mWaO3WR6pw&quot; rel=&quot;noreferrer&quot;&gt;https://play.golang.org/p/mWaO3WR6pw&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The tree is a bit heavy for the playground, but you can copy and paste the code to run locally.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are more optimisations possible that I haven't tried, such as parallel construction of the tree.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may be able to extend this design to have the polymorphic behaviour that you want (by providing alternative &lt;code&gt;Leaf&lt;/code&gt; implementations), but I'm not sure what &lt;code&gt;Sum()&lt;/code&gt; means for non-number types. Not knowing how to define &lt;code&gt;Sum()&lt;/code&gt; is a good example of the kind of thinking that leads to not deciding to include polymorphism through generics.&lt;/p&gt;&#xA;"" OwnerUserId=""790070"" LastEditorUserId=""790070"" LastEditDate=""2017-06-20T07:25:55.303"" LastActivityDate=""2017-06-20T07:25:55.303"" CommentCount=""11"" />
",44644832
44646378,"44646378      <row Id=""44646378"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44646637"" PostTypeId=""2"" ParentId=""44646378"" CreationDate=""2017-06-20T07:32:55.010"" Score=""7"" Body=""&lt;p&gt;&lt;a href=&quot;https://golang.org/doc/faq#generics&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go doesn't have generic types&lt;/a&gt;, so you're stuck with the options you listed. Sorry.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Meanwhile, Go's built-in maps and slices, plus the ability to use the empty interface to construct containers (with explicit unboxing) mean in many cases it is possible to write code that does what generics would enable, if less smoothly.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;If you know more about the elements you want to store in the container, you may use a more specialized interface type (instead of the empty interface &lt;code&gt;interface{}&lt;/code&gt;), which&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;could help you avoid using &lt;a href=&quot;https://golang.org/ref/spec#Type_assertions&quot; rel=&quot;nofollow noreferrer&quot;&gt;type assertions&lt;/a&gt; (&lt;strong&gt;keep good performance&lt;/strong&gt;)&lt;/li&gt;&#xA;&lt;li&gt;and still &lt;strong&gt;keep type safety&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;and it can be used for all types that (implicitly) implement your interface (&lt;strong&gt;code &quot;re-usability&quot;&lt;/strong&gt;, no need to duplicate for multiple types).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;But that's about it. See an example of this here: &lt;a href=&quot;https://stackoverflow.com/questions/39092925/why-are-interfaces-needed-in-golang/39100038#39100038&quot;&gt;Why are interfaces needed in Golang?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also just in case you missed it, the standard library already has a doubly linked list implementation in the &lt;a href=&quot;https://golang.org/pkg/container/list/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;container/list&lt;/code&gt;&lt;/a&gt; package (which also uses &lt;code&gt;interface{}&lt;/code&gt; type for the values).&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-20T08:36:03.433"" LastActivityDate=""2017-06-20T08:36:03.433"" CommentCount=""0"" />
",44646637
44647225,"44647225      <row Id=""44647225"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44647299"" PostTypeId=""2"" ParentId=""44647225"" CreationDate=""2017-06-20T08:05:05.367"" Score=""3"" Body=""&lt;p&gt;You can write a function that accepts a function, runs it and prints the time:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import (&#xA;  &quot;time&quot;&#xA;  &quot;fmt&quot;&#xA;)&#xA;&#xA;func TimeIt(f func(), description string) {&#xA;   start := time.Now()&#xA;   f()&#xA;   fmt.Printf(&quot;Running %s took %v\n&quot;, description, time.Since(start))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And then trigger it like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    TimeIt(doSomething, &quot;Doing something&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or just sprinkle it on pieces of code as a closure:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;TimeIt(func() {&#xA;     do()&#xA;     some()&#xA;     stuff()&#xA;   },&#xA;   &quot;whatever&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1239701"" LastEditorUserId=""1239701"" LastEditDate=""2017-06-20T08:14:21.680"" LastActivityDate=""2017-06-20T08:14:21.680"" CommentCount=""2"" />
",44647299
44647342,"44647342      <row Id=""44647342"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44647417"" PostTypeId=""2"" ParentId=""44647342"" CreationDate=""2017-06-20T08:11:16.090"" Score=""0"" Body=""&lt;p&gt;Those two lines in your main function shadow your global variable declaration:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;optQuit := getopt.BoolLong(&quot;quit&quot;, 0, &quot;Help&quot;)&#xA;optRun  := getopt.BoolLong(&quot;run&quot;, 'r', &quot;Help&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you only use them, to get a nice usage, why not create a usage function&#xA;yourself?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you insist on using &lt;code&gt;getopt&lt;/code&gt; just to create a usage, do&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;_ = getopt.BoolLong(&quot;quit&quot;, 0, &quot;Help&quot;)&#xA;_ = getopt.BoolLong(&quot;run&quot;, 'r', &quot;Help&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;instead.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You also need to call &lt;code&gt;getopt.Parse()&lt;/code&gt; before using &lt;code&gt;*optHelp&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The resulting message&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Usage: test [-hr] [--quit] [parameters ...]&#xA; -h, --help  Help&#xA;     --quit  Help&#xA; -r, --run   Help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;seems to be less than helpful. Why not just do&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Printf(`&#xA;Usage: test&#xA;  This program will start a daemon service, which you can use like this ...&#xA;`)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7824574"" LastEditorUserId=""7824574"" LastEditDate=""2017-06-20T08:31:00.000"" LastActivityDate=""2017-06-20T08:31:00.000"" CommentCount=""1"" />
",44647417
41277465,"41277465      <row Id=""41277465"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44648319"" PostTypeId=""2"" ParentId=""41277465"" CreationDate=""2017-06-20T08:54:35.357"" Score=""1"" Body=""&lt;p&gt;As of now there is no direct way to do that in Go; I would recommend using &lt;code&gt;net use&lt;/code&gt;, which of course limits the functionality to Windows, but that's actually what you need.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, when you open a command prompt in Windows you can map network shares to Windows drives by using:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;net use Q: \\SERVER\SHARE /user:Alice pa$$word /P&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;Q:&lt;/code&gt; represents your windows drive, &lt;code&gt;\\SERVER\SHARE&lt;/code&gt; is the network address, &lt;code&gt;/user:Alice pa$$word&lt;/code&gt; are your credentials, and &lt;code&gt;/P&lt;/code&gt; is for persistence.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Executing this in Go would look something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func mapDrive(letter string, address string, user string, pw string) ([]byte, error) {&#xA;  // return combined output for std and err&#xA;  return exec.Command(&quot;net use&quot;, letter, address, fmt.Sprintf(&quot;/user:%s&quot;, user), pw, &quot;/P&quot;).CombinedOutput()&#xA;}&#xA;&#xA;func main() {&#xA;  out, err := mapDrive(&quot;Q:&quot;, `\\SERVER\SHARE`, &quot;Alice&quot;, &quot;pa$$word&quot;)&#xA;  if err != nil {&#xA;    log.Fatal(err)&#xA;  }&#xA;  // print whatever comes out&#xA;  log.Println(string(out))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1188357"" LastActivityDate=""2017-06-20T08:54:35.357"" CommentCount=""0"" />
",44648319
44648409,"44648409      <row Id=""44648409"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44650954"" PostTypeId=""2"" ParentId=""44648409"" CreationDate=""2017-06-20T10:47:14.260"" Score=""0"" Body=""&lt;ol&gt;&#xA;&lt;li&gt;Copy the &lt;code&gt;asm_amd64.s&lt;/code&gt; contents over to your package&lt;/li&gt;&#xA;&lt;li&gt;Define the functions somewehere in that package&lt;/li&gt;&#xA;&lt;li&gt;Use those functions in the package&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Example (with the asm_amd64.s in the same package):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;func encryptBlockAsm(nr int, xk *uint32, dst, src *byte)&#xA;func decryptBlockAsm(nr int, xk *uint32, dst, src *byte)&#xA;func expandKeyAsm(nr int, key *byte, enc *uint32, dec *uint32)&#xA;&#xA;func main() {&#xA;    var nr int&#xA;    var xk uint32&#xA;    var dst byte&#xA;    var src byte&#xA;&#xA;    fmt.Printf(&quot;Before:\t%v, %v, %v, %v\n&quot;, nr, xk, dst, src)&#xA;&#xA;    encryptBlockAsm(nr, &amp;amp;xk, &amp;amp;dst, &amp;amp;src)&#xA;&#xA;    fmt.Printf(&quot;After:\t%v, %v, %v, %v\n&quot;, nr, xk, dst, src)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Yields:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Before: 0, 0, 0, 0&#xA;After:  0, 0, 231, 173&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I have no idea what the inputs should be but at least it demonstrates this does something :)&lt;/p&gt;&#xA;"" OwnerUserId=""248922"" LastActivityDate=""2017-06-20T10:47:14.260"" CommentCount=""0"" />
",44650954
44651266,"44651266      <row Id=""44651266"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44654689"" PostTypeId=""2"" ParentId=""44651266"" CreationDate=""2017-06-20T13:38:32.273"" Score=""1"" Body=""&lt;p&gt;You can stub functions like &lt;code&gt;time.Now()&lt;/code&gt; in your &lt;code&gt;_test.go&lt;/code&gt; files, via the &lt;code&gt;init()&lt;/code&gt; function, this will give deterministic time values:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;var timeNow = time.Now&#xA;&#xA;func main() {&#xA;    fmt.Println(timeNow())&#xA;}&#xA;&#xA;func init() {&#xA;    // Uncomment and add to _test.go init()&#xA;    // timeNow = func() time.Time {&#xA;    //  t, _ := time.Parse(&quot;2006-01-02 15:04:05&quot;, &quot;2017-01-20 01:02:03&quot;)&#xA;    //  return t&#xA;    // }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See: &lt;a href=&quot;https://play.golang.org/p/hI6MrQGyDA&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/hI6MrQGyDA&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""687438"" LastActivityDate=""2017-06-20T13:38:32.273"" CommentCount=""1"" />
",44654689
44655150,"44655150      <row Id=""44655150"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44655596"" PostTypeId=""2"" ParentId=""44655150"" CreationDate=""2017-06-20T14:17:39.127"" Score=""0"" Body=""&lt;p&gt;The error means you do not have Go installed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You need to install &lt;code&gt;go&lt;/code&gt;, also known as &lt;a href=&quot;https://golang.org/doc/install&quot; rel=&quot;nofollow noreferrer&quot;&gt;Golang&lt;/a&gt; to run that example code they provide on Step 4.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Make sure to follow the installation instructions as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It was just an example.  You can write the code in any language as well.&lt;/p&gt;&#xA;"" OwnerUserId=""56693"" LastEditorUserId=""13860"" LastEditDate=""2017-06-20T15:05:32.173"" LastActivityDate=""2017-06-20T15:05:32.173"" CommentCount=""2"" />
",44655596
44652207,"44652207      <row Id=""44652207"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44655676"" PostTypeId=""2"" ParentId=""44652207"" CreationDate=""2017-06-20T14:21:20.230"" Score=""1"" Body=""&lt;p&gt;The issue was that Emacs was not aware of my &lt;code&gt;GOPATH&lt;/code&gt; environment variable, this was resolved by adding this to &lt;code&gt;exec-path-from-shell-copy-envs&lt;/code&gt; in my initialization files, like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(exec-path-from-shell-copy-envs '(&quot;PATH&quot; &quot;GOPATH&quot;))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""3461506"" LastActivityDate=""2017-06-20T14:21:20.230"" CommentCount=""1"" />
",44655676
44657806,"44657806      <row Id=""44657806"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44657909"" PostTypeId=""2"" ParentId=""44657806"" CreationDate=""2017-06-20T16:01:51.920"" Score=""1"" Body=""&lt;p&gt;You need to use CTRL+ALT+V for Windows / Linux (or CMD+ALT+V on OS X) or invoke the Refactor | Extract | Variable and then select the function call from the list and the variables will be inserted for you.&lt;/p&gt;&#xA;"" OwnerUserId=""951414"" LastEditorUserId=""951414"" LastEditDate=""2017-06-20T16:37:06.913"" LastActivityDate=""2017-06-20T16:37:06.913"" CommentCount=""0"" />
",44657909
44648735,"44648735      <row Id=""44648735"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44659126"" PostTypeId=""2"" ParentId=""44648735"" CreationDate=""2017-06-20T17:04:26.797"" Score=""3"" Body=""&lt;p&gt;The new Go 1.8 feature only works if the structures have the same field names and &lt;em&gt;types&lt;/em&gt;. Despite the fact that your Test2 and Test4 structures are identical by fields, they are two separate types, and thus the compiler disallows their assignment. One might argue that structures should be deep-compared instead of a simple type comparison, but that's not how it's implemented currently. You have three options: use the same struct type for the struct field in each, use an anonymous struct in each (&lt;a href=&quot;https://play.golang.org/p/Hw7HANwqbZ&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/Hw7HANwqbZ&lt;/a&gt;), or make a helper function to convert the two manually.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There's currently a proposal out to allow deeply-equivalent structures to be converted without a field-by-field helper method, but it is currently slated for Go 2.x: &lt;a href=&quot;https://github.com/golang/go/issues/20621&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/golang/go/issues/20621&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4551301"" LastActivityDate=""2017-06-20T17:04:26.797"" CommentCount=""0"" />
",44659126
44656095,"44656095      <row Id=""44656095"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44659129"" PostTypeId=""2"" ParentId=""44656095"" CreationDate=""2017-06-20T17:04:35.883"" Score=""2"" Body=""&lt;p&gt;This is a perfect use case for the &lt;code&gt;MULTI-EXEC&lt;/code&gt; functionality:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;MULTI&#xA;GET key&#xA;DELETE key&#xA;EXEC&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or in go:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;pipe := client.TxPipeline()&#xA;&#xA;get := pipe.Get(&quot;key&quot;)&#xA;pipe.Del(&quot;key&quot;)&#xA;&#xA;_, err := pipe.Exec()&#xA;fmt.Println(incr.Val(), err)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will ensure that both commands execute in a transaction, so the key will either be retrieved and deleted or not retrieved at all.&lt;/p&gt;&#xA;"" OwnerUserId=""495504"" LastActivityDate=""2017-06-20T17:04:35.883"" CommentCount=""0"" />
",44659129
44659210,"44659210      <row Id=""44659210"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44659348"" PostTypeId=""2"" ParentId=""44659210"" CreationDate=""2017-06-20T17:18:38.740"" Score=""2"" Body=""&lt;p&gt;A semaphore or mutex controls synchronization, not order of operations. The order of concurrent operations, regardless of whether or not they're synchronized, is not controllable or predictable. If you need a controlled order of operations, you should not execute those operations concurrently.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-20T17:18:38.740"" CommentCount=""3"" />
",44659348
44659343,"44659343      <row Id=""44659343"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44659426"" PostTypeId=""2"" ParentId=""44659343"" CreationDate=""2017-06-20T17:22:52.850"" Score=""1"" Body=""&lt;p&gt;You need to &quot;Seed&quot; the random number generator. This is like the code that tells the pseudo random number generator how to generate your numbers. Now, you can't just give this any number, or you are going to generate the same set every time. Often a good practice is to seed with the current time.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;math/rand&quot;&#xA;    &quot;time&quot;    #ADDED&#xA;)&#xA;&#xA;func main() {&#xA;    // Seed should be set once, better spot is func init()&#xA;    rand.Seed(time.Now().UTC().UnixNano())   #ADDED&#xA;    fmt.Println(randInt(1, 1000))&#xA;}&#xA;&#xA;func randInt(min int, max int) int {&#xA;    return min + rand.Intn(max-min)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now every time you call your &lt;code&gt;randInt()&lt;/code&gt; function, it will use the time from when the seed function was called to generate the random number. &lt;/p&gt;&#xA;"" OwnerUserId=""8121683"" LastEditorUserId=""8121683"" LastEditDate=""2017-06-22T14:16:30.927"" LastActivityDate=""2017-06-22T14:16:30.927"" CommentCount=""2"" />
",44659426
44659422,"44659422      <row Id=""44659422"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44659479"" PostTypeId=""2"" ParentId=""44659422"" CreationDate=""2017-06-20T17:26:15.710"" Score=""4"" Body=""&lt;p&gt;Theoretically, &lt;code&gt;struct{}{}&lt;/code&gt; should be the most efficient because it requires no memory. In practice, a) results may vary between Go versions, operating systems, and system architectures; and b) I can't think of any case where maximizing the execution-time efficiency of empty values is relevant.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-20T17:26:15.710"" CommentCount=""5"" />
",44659479
44641773,"44641773      <row Id=""44641773"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44662067"" PostTypeId=""2"" ParentId=""44641773"" CreationDate=""2017-06-20T20:03:37.100"" Score=""1"" Body=""&lt;p&gt;I had a look on your &lt;a href=&quot;https://github.com/utiq/go-in-5-minutes/commit/268f2d3adc8a90b643ff5dfed34205a92d25e6b4#diff-4c44d7542df3ff4221e5fcf36d8ef0b4&quot; rel=&quot;nofollow noreferrer&quot;&gt;commit changes&lt;/a&gt; of &lt;code&gt;episode4&lt;/code&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;My observations as follows:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You're creating &lt;code&gt;hub&lt;/code&gt; instance on every incoming request at &lt;a href=&quot;https://github.com/utiq/go-in-5-minutes/blob/master/episode4/connection.go#L52&quot; rel=&quot;nofollow noreferrer&quot;&gt;stream handler&lt;/a&gt;. &lt;code&gt;hub&lt;/code&gt; instance used to keeps track connections, etc. so you're losing it on every request.&lt;/li&gt;&#xA;&lt;li&gt;You have removed index/home handler (may be you wanted to convert to gin handler or something, I don't know).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Now, let's bring &lt;code&gt;episode4&lt;/code&gt; into action. Please do following changes (as always improve it as you like). I have tested your &lt;code&gt;episode4&lt;/code&gt; with below changes, it's working fine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Make &lt;code&gt;/ws&lt;/code&gt; handler work on &lt;code&gt;server.go&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;h := newHub()&#xA;wsh := wsHandler{h: h}&#xA;r.GET(&quot;/ws&quot;, func(c *gin.Context) {&#xA;    wsh.ServeHTTP(c.Writer, c.Request)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Remove the stream handler on &lt;code&gt;connection.go&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func stream(c *gin.Context) {&#xA;    h := newHub()&#xA;    wsHandler{h: h}.ServeHTTP(c.Writer, c.Request)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Adding index HTML handler on &lt;code&gt;server.go&lt;/code&gt;: (added it to test episode4 at my end)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;r.SetHTMLTemplate(template.Must(template.ParseFiles(&quot;index.html&quot;)))&#xA;r.GET(&quot;/&quot;, func(c *gin.Context) {&#xA;    c.HTML(200, &quot;index.html&quot;, nil)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-06-20T20:26:41.610"" LastActivityDate=""2017-06-20T20:26:41.610"" CommentCount=""6"" />
",44662067
44662456,"44662456      <row Id=""44662456"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44662633"" PostTypeId=""2"" ParentId=""44662456"" CreationDate=""2017-06-20T20:42:24.527"" Score=""5"" Body=""&lt;p&gt;This line: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;router.Handle(&quot;/files/&quot;, http.StripPrefix(&quot;/files/&quot;, http.FileServer(http.Dir(&quot;.&quot;))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Means that requests coming in for URLs under &quot;/files/&quot; will be served from files on disk in the current directory, with the &quot;/files/&quot; prefix removed.&#xA;So if you want a file in the current directory named &lt;code&gt;app2.js&lt;/code&gt;, then the URL must be &lt;code&gt;/files/app2.js&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;router.Handle&lt;/code&gt; defines what handler will handle a given path. In this case, that path is &lt;code&gt;/files/&lt;/code&gt;. Because of the trailing slash, the same handler will be used for all URLs beginning with &lt;code&gt;/files/&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;http.StripPrefix&lt;/code&gt; is a handler &lt;em&gt;wrapper&lt;/em&gt;. It takes the incomming request, strips of the given prefix (in this case, &lt;code&gt;/files/&lt;/code&gt;), removes it from the URL path, and then passes the request on to the handler passed to &lt;code&gt;StripPrefix&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;http.FileServer&lt;/code&gt; serves files out of a &lt;code&gt;http.FileSystem&lt;/code&gt;, in this case provided by &lt;code&gt;http.Dir&lt;/code&gt;. &lt;code&gt;http.Dir&lt;/code&gt; exposes the files in a directory, in this case the current working directory (&lt;code&gt;&quot;.&quot;&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, in total: requests beginning with &lt;code&gt;/files/&lt;/code&gt;, will have the &lt;code&gt;/files/&lt;/code&gt; part removed, then whatever is left, that file path will be looked for in the current working directory, and if it is found, it will be served. So, &lt;code&gt;/files/app2.js&lt;/code&gt; will serve &lt;code&gt;./app2.js&lt;/code&gt;. Your HTML must reference &lt;code&gt;/files/app2.js&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;app.js&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-20T20:42:24.527"" CommentCount=""0"" />
",44662633
44663496,"44663496      <row Id=""44663496"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44663794"" PostTypeId=""2"" ParentId=""44663496"" CreationDate=""2017-06-20T22:07:35.253"" Score=""1"" Body=""&lt;p&gt;&lt;a href=&quot;https://github.com/pressly/chi/blob/master/render/render.go#L20&quot; rel=&quot;nofollow noreferrer&quot;&gt;render.Bind&lt;/a&gt;'s purpose is to perform decode and execute &lt;code&gt;Bind(r)&lt;/code&gt; to do post decode operations.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For eg.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Test struct {&#xA;   Name string `json:&quot;name&quot;`&#xA;}&#xA;&#xA;func (p *Test) Bind(r *http.Request) error {&#xA;   // At this point, Decode is already done by `chi`&#xA;   p.Name = p.Name + &quot; after decode&quot;&#xA;  return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you have to do only JSON decode no other actions needs to be done after decode with respect to decoded values. Just use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Use Directly JSON decoder of std pkg&#xA;err := json.NewDecoder(r.Body).Decode(&amp;amp;p)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;OR&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Use wrapper method from chi DecodeJSON&#xA;err := render.DecodeJSON(r.Body, &amp;amp;p)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""13860"" LastEditDate=""2017-06-21T09:16:25.537"" LastActivityDate=""2017-06-21T09:16:25.537"" CommentCount=""2"" />
",44663794
44665834,"44665834      <row Id=""44665834"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44666860"" PostTypeId=""2"" ParentId=""44665834"" CreationDate=""2017-06-21T04:23:40.057"" Score=""2"" Body=""&lt;p&gt;&lt;em&gt;Access permission&lt;/em&gt; is checked when&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;You're creating/declaring a variable. The compiler will check the visibility of &lt;em&gt;the name of the type identifier&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Using &lt;a href=&quot;https://golang.org/pkg/reflect/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; package to modify a variable. &lt;/li&gt;&#xA;&lt;li&gt;Calling a constant, global variable, or a function. The visibility of constant/variable/function name will be checked.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Once the variable is created/defined, and when you pass this variable as a function/method argument, the copy (If it is a value, the value is being copied. If it is a pointer, the address is being copied) will be passed to the function/method, and &lt;strong&gt;always accessible&lt;/strong&gt; from the function body through the argument name and type. In &lt;code&gt;encoding/json&lt;/code&gt; package, the &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Decoder.Decode&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Decoder.Decode&lt;/code&gt;&lt;/a&gt; method is defined as,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (dec *Decoder) Decode(v interface{}) error&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;thus, anything you passed to the &lt;code&gt;Decoder.Decode&lt;/code&gt; method, is always accessible from inside the method body through argument &lt;code&gt;v&lt;/code&gt;. Note that the type of &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;interface{}&lt;/code&gt; not &lt;code&gt;_Sample&lt;/code&gt; struct. The visibility is checked when you defined the variable as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var sample _Sample&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which was &lt;em&gt;OK&lt;/em&gt; since it is done from within the same package. Even an anonymous struct (i.e. no type name identifier is defined for the struct)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;aSample := struct {&#xA;    first  string // this will not be filled because it starts with lower case letter&#xA;    Second string // it is OK.&#xA;}{}&#xA;&#xA;//...&#xA;err := decoder.Decode(&amp;amp;aSample)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;will works. Next, when the &lt;code&gt;decoder&lt;/code&gt; fills the struct (through reflection), the visibility of struct members will be checked, and &lt;code&gt;_Sample.first&lt;/code&gt; is not visible from inside the &lt;code&gt;json&lt;/code&gt; package. &lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-06-21T04:23:40.057"" CommentCount=""1"" />
",44666860
44667733,"44667733      <row Id=""44667733"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44668669"" PostTypeId=""2"" ParentId=""44667733"" CreationDate=""2017-06-21T06:47:14.417"" Score=""0"" Body=""&lt;p&gt;By default, &lt;a href=&quot;https://golang.org/pkg/os/#File&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;os.File&lt;/code&gt;&lt;/a&gt; will be finalized by the Garbage Collector (GC) when application exit. From &lt;a href=&quot;https://golang.org/pkg/runtime/#SetFinalizer&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;SetFinalizer&lt;/code&gt;&lt;/a&gt; documentation&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The finalizer for obj is scheduled to run at some arbitrary time after obj becomes unreachable. There is no guarantee that finalizers will run before a program exits, so typically they are useful only for releasing non-memory resources associated with an object during a long-running program. For example, an os.File object could use a finalizer to close the associated operating system file descriptor when a program discards an os.File without calling Close, but it would be a mistake to depend on a finalizer to flush an in-memory I/O buffer such as a bufio.Writer, because the buffer would not be flushed at program exit.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;If you don't want to rely on GC, you can close it manually in the &lt;code&gt;main&lt;/code&gt; function as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    //Close log writer when exit&#xA;    defer func(){&#xA;        if file, ok := Logger.Out.(*os.File); ok {&#xA;            file.Sync()&#xA;            file.Close()&#xA;        } else if handler, ok := Logger.Out.(io.Closer); ok {&#xA;            handler.Close()&#xA;        }&#xA;    }()&#xA;&#xA;    //Your original codes&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In the above code, we use &lt;code&gt;defer&lt;/code&gt; statement to ensure the &lt;em&gt;handler&lt;/em&gt; will be closed when the application exit. Since &lt;code&gt;Logger.Out&lt;/code&gt; may be defined as &lt;code&gt;io.Writer&lt;/code&gt;, we need to test whether the &lt;code&gt;Logger.Out&lt;/code&gt; also implements &lt;code&gt;io.Closer&lt;/code&gt;, and if yes, it will be closed. If &lt;code&gt;Logger.Out&lt;/code&gt; is an &lt;code&gt;os.File&lt;/code&gt;, we also call &lt;code&gt;Sync()&lt;/code&gt; to ensure all the content is written to disk.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;br&gt;&#xA;Quote documentation and add &lt;code&gt;file.Sync()&lt;/code&gt; to ensure file content is written to disk. &lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-06-21T07:01:39.190"" LastActivityDate=""2017-06-21T07:01:39.190"" CommentCount=""0"" />
",44668669
44669384,"44669384      <row Id=""44669384"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44670306"" PostTypeId=""2"" ParentId=""44669384"" CreationDate=""2017-06-21T08:08:34.527"" Score=""2"" Body=""&lt;p&gt;Refer to &lt;a href=&quot;http://docs.aws.amazon.com/sdk-for-go/api/service/ses/#example_SES_SendRawEmail_shared00&quot; rel=&quot;nofollow noreferrer&quot;&gt;AWS example&lt;/a&gt; for Sending RAW email with attachment.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Implementation Suggestion: for an easy to compose email and get email as bytes and send it to SES as mentioned in the above reference example.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Use library &lt;code&gt;gopkg.in/gomail.v2&lt;/code&gt; to compose your email message with attachment and then call &lt;a href=&quot;https://godoc.org/gopkg.in/gomail.v2#Message.WriteTo&quot; rel=&quot;nofollow noreferrer&quot;&gt;WriteTo&lt;/a&gt; method.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var emailRaw bytes.Buffer&#xA;emailMessage.WriteTo(emailRaw)&#xA;&#xA;// while create instance of RawMessage&#xA;RawMessage: &amp;amp;ses.RawMessage{&#xA;    Data: emailRaw.Bytes(),&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Good luck!&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; For the comment.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Compose the email-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;msg := gomail.NewMessage()&#xA;msg.SetHeader(&quot;From&quot;, &quot;alex@example.com&quot;)&#xA;msg.SetHeader(&quot;To&quot;, &quot;bob@example.com&quot;, &quot;cora@example.com&quot;)&#xA;msg.SetHeader(&quot;Subject&quot;, &quot;Hello!&quot;)&#xA;msg.SetBody(&quot;text/html&quot;, &quot;Hello &amp;lt;b&amp;gt;Bob&amp;lt;/b&amp;gt; and &amp;lt;i&amp;gt;Cora&amp;lt;/i&amp;gt;!&quot;)&#xA;msg.Attach(&quot;/home/Alex/lolcat.jpg&quot;)&#xA;&#xA;var emailRaw bytes.Buffer&#xA;msg.WriteTo(emailRaw)&#xA;&#xA;message := ses.RawMessage{ Data: emailRaw.Bytes() }&#xA;&#xA;// Remaining is same as what you mentioned the question.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-06-23T06:07:32.620"" LastActivityDate=""2017-06-23T06:07:32.620"" CommentCount=""3"" />
",44670306
44669550,"44669550      <row Id=""44669550"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44671550"" PostTypeId=""2"" ParentId=""44669550"" CreationDate=""2017-06-21T09:05:14.560"" Score=""1"" Body=""&lt;p&gt;Channels are just variables in Go, like &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;[]byte&lt;/code&gt; or &lt;code&gt;bool&lt;/code&gt;.  If you can pass any variables between packages, you can obviously then pass channels between packages as well.  And once you've passed a channel from one package to another, you are of course free to use it there, just as you would any other variable.  That means you can send data in one package, and receive it in another.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Ultimately channels wouldn't be very useful if they couldn't be shared between packages.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-06-21T09:05:14.560"" CommentCount=""1"" />
",44671550
44673830,"44673830      <row Id=""44673830"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44674730"" PostTypeId=""2"" ParentId=""44673830"" CreationDate=""2017-06-21T11:22:36.433"" Score=""1"" Body=""&lt;p&gt;int in func&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;import &quot;fmt&quot;&#xA;&#xA;func zero(x int) int {&#xA;    x = 0&#xA;    return x&#xA;}&#xA;func main() {&#xA;    x := 5&#xA;    x = zero(x)&#xA;    fmt.Println(x)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""3798618"" LastActivityDate=""2017-06-21T11:22:36.433"" CommentCount=""0"" />
",44674730
44675087,"44675087      <row Id=""44675087"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44676179"" PostTypeId=""2"" ParentId=""44675087"" CreationDate=""2017-06-21T12:29:47.933"" Score=""2"" Body=""&lt;h2&gt;The recommended way&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;First, the recommended way is &lt;strong&gt;not to rely on whether a struct field exists&lt;/strong&gt;. Of course there might be optional parts of the template, but the condition to decide whether to render a part should rely on fields that exist in all cases.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The issue, and avoiding it using a map&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;If the type of the template data is a &lt;code&gt;struct&lt;/code&gt; (or a pointer to a struct) and there is no field or method with the given name, the template engine returns an error for that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You could easily get rid of this error if you were to use a map, as maps can be indexed with keys they don't contain, and the result of that &lt;a href=&quot;https://golang.org/ref/spec#Index_expressions&quot; rel=&quot;nofollow noreferrer&quot;&gt;index expression&lt;/a&gt; is the &lt;a href=&quot;https://golang.org/ref/spec#The_zero_value&quot; rel=&quot;nofollow noreferrer&quot;&gt;zero value&lt;/a&gt; of the value type (and not an error).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To demonstrate, see this example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;s := `{{if .Email}}Email is: {{.Email}}{{else}}Email is NOT set.{{end}}`&#xA;&#xA;t := template.Must(template.New(&quot;&quot;).Parse(s))&#xA;exec := func(name string, param interface{}) {&#xA;    fmt.Printf(&quot;\n%s:\n  &quot;, name)&#xA;    if err := t.Execute(os.Stdout, param); err != nil {&#xA;        fmt.Println(&quot;Error:&quot;, err)&#xA;    }&#xA;}&#xA;&#xA;exec(&quot;Filled map&quot;, map[string]interface{}{&quot;Email&quot;: &quot;as@as&quot;})&#xA;exec(&quot;Empty map&quot;, map[string]interface{}{})&#xA;&#xA;exec(&quot;Filled struct&quot;, struct {&#xA;    Email string&#xA;}{Email: &quot;as@as.com&quot;})&#xA;exec(&quot;Empty struct&quot;, struct{}{})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/_nT3IvT5GW&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Filled map:&#xA;  Email is: as@as&#xA;Empty map:&#xA;  Email is NOT set.&#xA;Filled struct:&#xA;  Email is: as@as.com&#xA;Empty struct:&#xA;  Error: template: :1:5: executing &quot;&quot; at &amp;lt;.Email&amp;gt;: can't evaluate field Email in type struct {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;Sticking to &lt;code&gt;struct&lt;/code&gt; and providing &quot;isset&quot;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;If you must or want to stick to a &lt;code&gt;struct&lt;/code&gt;, this &quot;isset&quot; can be implemented and provided, I'll call it &lt;code&gt;avail()&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This implementation uses reflection, and in order to check if the field given by its name exists (is available), the (wrapper) data must also be passed to it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func avail(name string, data interface{}) bool {&#xA;    v := reflect.ValueOf(data)&#xA;    if v.Kind() == reflect.Ptr {&#xA;        v = v.Elem()&#xA;    }&#xA;    if v.Kind() != reflect.Struct {&#xA;        return false&#xA;    }&#xA;    return v.FieldByName(name).IsValid()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Example using it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;s := `{{if (avail &quot;Email&quot; .)}}Email is: {{.Email}}{{else}}Email is unavailable.{{end}}`&#xA;&#xA;t := template.Must(template.New(&quot;&quot;).Funcs(template.FuncMap{&#xA;    &quot;avail&quot;: avail,&#xA;}).Parse(s))&#xA;exec := func(name string, param interface{}) {&#xA;    fmt.Printf(&quot;\n%s:\n  &quot;, name)&#xA;    if err := t.Execute(os.Stdout, param); err != nil {&#xA;        fmt.Println(&quot;Error:&quot;, err)&#xA;    }&#xA;}&#xA;&#xA;exec(&quot;Filled struct&quot;, struct {&#xA;    Email string&#xA;}{Email: &quot;as@as.com&quot;})&#xA;exec(&quot;Empty struct&quot;, struct{}{})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/43hIY_Vfzf&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Filled struct:&#xA;  Email is: as@as.com&#xA;Empty struct:&#xA;  Email is unavailable.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-21T17:25:35.080"" LastActivityDate=""2017-06-21T17:25:35.080"" CommentCount=""1"" />
",44676179
44678216,"44678216      <row Id=""44678216"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44678217"" PostTypeId=""2"" ParentId=""44678216"" CreationDate=""2017-06-21T13:57:27.583"" Score=""0"" Body=""&lt;p&gt;Thanks to @JimB, I understand the nature of the problem better. Here's what he said:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The actual error is because you're calling Read from an unbounded number of goroutines. The net package assumes there's no reason to ever have more than 1&amp;lt;&amp;lt;20 concurrent operations on a net.Conn. – JimB&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Some bad code was here, which wasn't quite a fix for the problem at hand. I removed it so it won't mislead anyone, as advised by JimB. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;What I learned from JimB:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;You shouldn't use goroutines unless it is necessary (&lt;code&gt;echo&lt;/code&gt; function shouldn't be a goroutine, as reading is a blocking operation, and we can't really do anything with the connection until we understand what the client is sending to us, so no concurrency is needed; &lt;code&gt;handleConnection&lt;/code&gt;, on the other hand, is run inside a goroutine because it's supposed to handle multiple connections simultaneously).&lt;/li&gt;&#xA;&lt;li&gt;Errors are precious things, handle them gracefully, do not ignore them.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""7459528"" LastEditorUserId=""7459528"" LastEditDate=""2017-06-22T13:45:56.207"" LastActivityDate=""2017-06-22T13:45:56.207"" CommentCount=""4"" />
",44678217
44676895,"44676895      <row Id=""44676895"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44683482"" PostTypeId=""2"" ParentId=""44676895"" CreationDate=""2017-06-21T18:20:29.530"" Score=""2"" Body=""&lt;p&gt;When you want to send HTTP response to client not immediately but after some event, it's called &lt;a href=&quot;https://en.wikipedia.org/wiki/Push_technology#Long_polling&quot; rel=&quot;nofollow noreferrer&quot;&gt;long polling&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's simple example of long polling with request cancellation on client disconnect:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;context&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;net/http&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;func doLongOperation(w http.ResponseWriter, ctx context.Context, done chan&amp;lt;- bool) {&#xA;    flusher, ok := w.(http.Flusher)&#xA;    if !ok {&#xA;        panic(&quot;Expected http.ResponseWriter to be an http.Flusher&quot;)&#xA;    }&#xA;&#xA;    select {&#xA;    case &amp;lt;-time.After(time.Second * 3):&#xA;    case &amp;lt;-ctx.Done():&#xA;        done &amp;lt;- false // Cancel job.&#xA;        return&#xA;    }&#xA;&#xA;    fmt.Fprint(w, &quot;Sup dude?&quot;) // Write chunk.&#xA;    flusher.Flush()            // Send it to client.&#xA;    done &amp;lt;- true               // Finish job.&#xA;}&#xA;&#xA;func handler(w http.ResponseWriter, r *http.Request) {&#xA;    done := make(chan bool)&#xA;    closeNotifier, ok := w.(http.CloseNotifier)&#xA;    if !ok {&#xA;        panic(&quot;Expected http.ResponseWriter to be an http.CloseNotifier&quot;)&#xA;    }&#xA;&#xA;    ctx, cancel := context.WithCancel(context.Background())&#xA;    defer cancel()&#xA;&#xA;    go doLongOperation(w, ctx, done)&#xA;    select {&#xA;    case &amp;lt;-done:&#xA;    case &amp;lt;-time.After(time.Second * 10):&#xA;        cancel()&#xA;        if !&amp;lt;-done {&#xA;            fmt.Fprint(w, &quot;Server is busy.&quot;)&#xA;        }&#xA;    case &amp;lt;-closeNotifier.CloseNotify():&#xA;        cancel()&#xA;        fmt.Println(&quot;Client has disconnected.&quot;)&#xA;        &amp;lt;-done&#xA;    }&#xA;}&#xA;&#xA;func main() {&#xA;    http.HandleFunc(&quot;/&quot;, handler)&#xA;    http.ListenAndServe(&quot;localhost:8080&quot;, nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Additional links:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/20793568/golang-anonymous-struct-and-empty-struct&quot;&gt;Golang : anonymous struct and empty struct&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/26769626/send-a-chunked-http-response-from-a-go-server&quot;&gt;Send a chunked HTTP response from a Go server&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://blog.golang.org/context&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Concurrency Patterns: Context&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Gists:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/berserkk/5bd1bd8fd8e78bb8b8dd536de0a9a3ff&quot; rel=&quot;nofollow noreferrer&quot;&gt;Simple example of long polling in Go&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/berserkk/9f8b32413c24c620271004fed264a12f&quot; rel=&quot;nofollow noreferrer&quot;&gt;Simple example of long polling in Go with request cancellation&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""8099995"" LastEditorUserId=""8099995"" LastEditDate=""2017-06-21T21:19:32.853"" LastActivityDate=""2017-06-21T21:19:32.853"" CommentCount=""5"" />
",44683482
44654020,"44654020      <row Id=""44654020"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44684143"" PostTypeId=""2"" ParentId=""44654020"" CreationDate=""2017-06-21T18:56:10.143"" Score=""0"" Body=""&lt;p&gt;To get the database object (db) from the gin context (c) &lt;code&gt;c.MustGet(&quot;db&quot;).(*mgo.Database)&lt;/code&gt; you have to first set it using a gin middleware function&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func ConnectMiddleware(c *gin.Context) {&#xA;    c.Set(&quot;db&quot;, Session.DB(Mongo.Database))&#xA;    c.Next()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and then use this middleware through the following code&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;router := gin.Default()&#xA;router.Use(ConnectMiddleware)&#xA;router.GET(&quot;/&quot;, func(c *gin.Context) {&#xA;    c.JSON(http.StatusOK, gin.H{&quot;message&quot;: &quot;OK&quot;})&#xA;&#xA;})&#xA;router.GET(&quot;/polls&quot;, allPolls)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You are using a outdated version of gin library other things are fine in your code&lt;/p&gt;&#xA;&#xA;&lt;p&gt;import the latest package form &lt;code&gt;github.com/gin-gonic/gin&lt;/code&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Use this to get the data from the database&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func allPolls(c *gin.Context) {&#xA;    db := c.MustGet(&quot;db&quot;).(*mgo.Database)&#xA;    polls := []Poll{}&#xA;    err := db.C(CollectionPoll).Find(nil).All(&amp;amp;polls)&#xA;    if err != nil {&#xA;        c.Error(err)&#xA;    }&#xA;    result := gin.H{&quot;payload&quot;: polls}&#xA;    c.Writer.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)&#xA;    c.JSON(200, result)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7190910"" LastEditorUserId=""7190910"" LastEditDate=""2017-06-22T20:33:52.157"" LastActivityDate=""2017-06-22T20:33:52.157"" CommentCount=""5"" />
",44684143
44685206,"44685206      <row Id=""44685206"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44685274"" PostTypeId=""2"" ParentId=""44685206"" CreationDate=""2017-06-21T20:00:23.793"" Score=""4"" Body=""&lt;p&gt;A go binary only includes code reachable from its &lt;code&gt;main()&lt;/code&gt; entry point. For test binaries &lt;code&gt;main()&lt;/code&gt; is the test runner.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As to &quot;how much of a problem&quot; it is if it were included... none. It would increase the binary size and compilation time somewhat but otherwise have no impact - code that isn't executed, by definition, does nothing.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-21T20:00:23.793"" CommentCount=""0"" />
",44685274
44684788,"44684788      <row Id=""44684788"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44685647"" PostTypeId=""2"" ParentId=""44684788"" CreationDate=""2017-06-21T20:24:33.440"" Score=""1"" Body=""&lt;p&gt;Issue is the way you create an sub routes &lt;code&gt;/admin&lt;/code&gt;. Complete reference code is here &lt;a href=&quot;https://play.golang.org/p/zb_79oHJed&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/zb_79oHJed&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Admin&#xA;adminBase := mux.NewRouter()&#xA;router.PathPrefix(&quot;/admin&quot;).Handler(negroni.New(&#xA;    // This logger only applicable to /admin routes&#xA;    negroni.HandlerFunc(justTestLogger),&#xA;    // add your handlers here which is only appilcable to `/admin` routes&#xA;    negroni.Wrap(adminBase),&#xA;))&#xA;&#xA;adminRoutes := adminBase.PathPrefix(&quot;/admin&quot;).Subrouter()&#xA;adminRoutes.HandleFunc(&quot;/articles/new&quot;, articleNewHandler).Methods(&quot;GET&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, access these URLs. You will see logs only for &lt;code&gt;/admin&lt;/code&gt; sub routes.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-06-21T20:24:33.440"" CommentCount=""3"" />
",44685647
44667906,"44667906      <row Id=""44667906"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44686822"" PostTypeId=""2"" ParentId=""44667906"" CreationDate=""2017-06-21T21:49:17.040"" Score=""0"" Body=""&lt;p&gt;Your code looks ok, but check, how you receive and store files. If you store them in memory, then you shouldn't call &lt;code&gt;Seek&lt;/code&gt; method.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to calculate hash of uploaded file and in the same time save it locally or upload to the cloud, then you can use &lt;a href=&quot;https://golang.org/pkg/io/#MultiWriter&quot; rel=&quot;nofollow noreferrer&quot;&gt;MultiWriter&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""8099995"" LastActivityDate=""2017-06-21T21:49:17.040"" CommentCount=""0"" />
",44686822
44690196,"44690196      <row Id=""44690196"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44690327"" PostTypeId=""2"" ParentId=""44690196"" CreationDate=""2017-06-22T04:44:20.987"" Score=""4"" Body=""&lt;p&gt;You can do this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Car interface { IAmACar() }&#xA;&#xA;type MyCarA struct {&#xA;  specificToA int&#xA;}&#xA;func (MyCarA) IAmACar() {}&#xA;&#xA;type MyCarB struct {&#xA;  specificToB int&#xA;}&#xA;func (MyCarB) IAmACar() {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You test for the marker using a &lt;a href=&quot;https://golang.org/ref/spec#Type_assertions&quot; rel=&quot;nofollow noreferrer&quot;&gt;type assertion&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;_, itIsACar := v.(Car)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/J0rfOjztAV&quot; rel=&quot;nofollow noreferrer&quot;&gt;playground example&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Car interface can also be used to detect errors statically:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var c Car&#xA;c = MyCarA{0} // ok&#xA;c = 0 // error, int is not a car&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;a href=&quot;http://godoc.org/go/ast&quot; rel=&quot;nofollow noreferrer&quot;&gt;go/ast&lt;/a&gt; package does something similar. See uses of the function &lt;a href=&quot;https://github.com/golang/go/blob/b3301865a025fda72b8d327fad4461bb7bf68600/src/go/ast/ast.go#L488-L489&quot; rel=&quot;nofollow noreferrer&quot;&gt;exprNode&lt;/a&gt; in the file &lt;a href=&quot;https://github.com/golang/go/blob/master/src/go/ast/ast.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;ast.go&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-06-22T14:03:57.930"" LastActivityDate=""2017-06-22T14:03:57.930"" CommentCount=""0"" />
",44690327
44693552,"44693552      <row Id=""44693552"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44693825"" PostTypeId=""2"" ParentId=""44693552"" CreationDate=""2017-06-22T08:14:52.230"" Score=""1"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;Is there an alternative solution to this by not using pointers?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;No.&lt;/p&gt;&#xA;"" OwnerUserId=""1266756"" LastActivityDate=""2017-06-22T08:14:52.230"" CommentCount=""0"" />
",44693825
44695088,"44695088      <row Id=""44695088"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44696422"" PostTypeId=""2"" ParentId=""44695088"" CreationDate=""2017-06-22T10:11:55.197"" Score=""0"" Body=""&lt;p&gt;first check that your binary is executable (run &lt;code&gt;ls -l) and check that &quot;x&quot; is part of the permission of your user (if you're not sure, just run&lt;/code&gt;chmod +x bee)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Second, to execute a binary in unix you should type &lt;code&gt;./bee&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5722950"" LastActivityDate=""2017-06-22T10:11:55.197"" CommentCount=""0"" />
",44696422
44696881,"44696881      <row Id=""44696881"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44697073"" PostTypeId=""2"" ParentId=""44696881"" CreationDate=""2017-06-22T10:41:07.320"" Score=""2"" Body=""&lt;p&gt;You are comparing the &lt;a href=&quot;https://golang.org/ref/spec#Pointer_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;pointers&lt;/a&gt; to the &lt;code&gt;big.Int&lt;/code&gt; values, and not the internal &lt;code&gt;big.Int&lt;/code&gt; values. Comparing &lt;code&gt;big.Int&lt;/code&gt; values must be done using the &lt;a href=&quot;https://godoc.org/math/big#Int.Cmp&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Int.Cmp&lt;/code&gt; method&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;func (x *Int) Cmp(y *Int) (r int)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;Cmp compares x and y and returns:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;-1 if x &amp;lt;  y&#xA;0 if x == y&#xA;+1 if x &amp;gt;  y&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if a.Cmp(b) != 0 {&#xA;    fmt.Println(&quot;foo&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""142162"" LastActivityDate=""2017-06-22T10:41:07.320"" CommentCount=""0"" />
",44697073
44697906,"44697906      <row Id=""44697906"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44699604"" PostTypeId=""2"" ParentId=""44697906"" CreationDate=""2017-06-22T12:36:16.430"" Score=""8"" Body=""&lt;p&gt;The signature of &lt;code&gt;Do&lt;/code&gt; is:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;Do(commandName string, args ...interface{}) (reply interface{}, err error)&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Because &lt;code&gt;args&lt;/code&gt; is a variadic (slice of) &lt;code&gt;interface{}&lt;/code&gt; it's heap allocated.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I believe there could be some optimisations in the pipeline for simple cases like this in future versions of Go: &lt;a href=&quot;https://github.com/golang/go/issues/15528&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/golang/go/issues/15528&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""687438"" LastActivityDate=""2017-06-22T12:36:16.430"" CommentCount=""0"" />
",44699604
39518237,"39518237      <row Id=""39518237"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44700761"" PostTypeId=""2"" ParentId=""39518237"" CreationDate=""2017-06-22T13:26:27.593"" Score=""0"" Body=""&lt;p&gt;The server requires a token string without added strings in my case I have added Bearer string to the token string in the header when sending request to the web server i.e. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;'Authorization':'Bearer' + localStorage.getItem('id_token')&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;At the web server we need to split only the valid token without the Bearer string&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;reqToken := r.Header.Get(&quot;Authorization&quot;)&#xA;splitToken := strings.Split(reqToken, &quot;Bearer&quot;)&#xA;reqToken = splitToken[1]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As a result it becomes valid token without nil. &lt;/p&gt;&#xA;"" OwnerUserId=""6814094"" LastActivityDate=""2017-06-22T13:26:27.593"" CommentCount=""0"" />
",44700761
44695539,"44695539      <row Id=""44695539"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44700821"" PostTypeId=""2"" ParentId=""44695539"" CreationDate=""2017-06-22T13:28:59.087"" Score=""1"" Body=""&lt;p&gt;Per &lt;a href=&quot;https://golang.org/pkg/cmd/go/#hdr-Generate_Go_files_by_processing_source&quot; rel=&quot;nofollow noreferrer&quot;&gt;the documentation&lt;/a&gt;: &lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The generator is run in the package's source directory.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So, whatever command is run with generate will be run in the same directory as the file containing the generate directive.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Multiple generate directives in one file are executed one at a time in source code order.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-22T13:28:59.087"" CommentCount=""0"" />
",44700821
44705094,"44705094      <row Id=""44705094"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44705529"" PostTypeId=""2"" ParentId=""44705094"" CreationDate=""2017-06-22T17:08:01.053"" Score=""1"" Body=""&lt;p&gt;The problem is that the decoder can buffer data from the next message. When this happens, the next new decoder starts in the middle of a message.  The fix is to use a single encoder and decoder.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    ...&#xA;    dec := gob.NewDecoder(conn) // Will read from network.&#xA;    enc := gob.NewEncoder(serverConn)&#xA;    go func() {&#xA;        for !done {&#xA;            recieveMessage(dec)&#xA;        }&#xA;    }()&#xA;&#xA;    for i := 1; i &amp;lt; 1000; i++ {&#xA;        sent := Message{strconv.Itoa(i)}&#xA;        sendMessage(sent, enc)&#xA;    }&#xA;    ...&#xA;}&#xA;&#xA;func sendMessage(msg Message, enc *gob.Encoder) {&#xA;    err := enc.Encode(msg)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;}&#xA;&#xA;func recieveMessage(dec *gob.Decoder) {&#xA;    msg := new(Message)&#xA;    err := dec.Decode(msg)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;    fmt.Println(&quot;Client recieved:&quot;, msg.Msg)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/nKuMozXYd6&quot; rel=&quot;nofollow noreferrer&quot;&gt;Run it in the playground&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-06-22T17:15:14.017"" LastActivityDate=""2017-06-22T17:15:14.017"" CommentCount=""0"" />
",44705529
44705817,"44705817      <row Id=""44705817"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44707002"" PostTypeId=""2"" ParentId=""44705817"" CreationDate=""2017-06-22T18:33:59.423"" Score=""1"" Body=""&lt;p&gt;I had the same problem and ended up creating a custom type for &lt;code&gt;time.Time&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package genericfields&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;time&quot;&#xA;    &quot;strings&quot;&#xA;&#xA;    &quot;gopkg.in/mgo.v2/bson&quot;&#xA;)&#xA;&#xA;// ANYTIME //&#xA;&#xA;// AnyTime accepts any time format for its unmarshaling //&#xA;type AnyTime struct{ time.Time }&#xA;&#xA;func (t AnyTime) MarshalJSON() ([]byte, error) {&#xA;    return json.Marshal(t.Time)&#xA;}&#xA;&#xA;func (t *AnyTime) UnmarshalJSON(b []byte) error {&#xA;    err := json.Unmarshal(b, &amp;amp;t.Time)&#xA;    if err != nil { //assume non tz time input&#xA;        bstr := strings.Trim(string(b), `&quot;`)&#xA;        t.Time, err = time.Parse(&quot;2006-01-02T15:04:05&quot;, bstr)&#xA;        if err != nil {&#xA;            return err //TODO add more formats to try&#xA;        }&#xA;    }&#xA;    return nil&#xA;}&#xA;&#xA;func (t AnyTime) GetBSON() (interface{}, error) {&#xA;    return t.Time, nil&#xA;}&#xA;&#xA;func (t *AnyTime) SetBSON(raw bson.Raw) error {&#xA;    var tm time.Time&#xA;    err := raw.Unmarshal(&amp;amp;tm)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;    t.Time = tm.UTC()&#xA;    return nil&#xA;}&#xA;&#xA;func (t AnyTime) ToTime() time.Time {&#xA;    return t.Time&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Usage:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type MyStruct struct {&#xA;  StartedAt genericfields.AnyTime `json:&quot;startedAt&quot; bson:&quot;startedAt&quot;`&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You might need to tweak the input for &lt;code&gt;time.Parse&lt;/code&gt; somewhat.&lt;/p&gt;&#xA;"" OwnerUserId=""248922"" LastEditorUserId=""248922"" LastEditDate=""2017-06-22T19:35:24.903"" LastActivityDate=""2017-06-22T19:35:24.903"" CommentCount=""3"" />
",44707002
44699307,"44699307      <row Id=""44699307"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44709520"" PostTypeId=""2"" ParentId=""44699307"" CreationDate=""2017-06-22T21:15:41.053"" Score=""0"" Body=""&lt;p&gt;You need to do &lt;code&gt;f.Seek&lt;/code&gt; to jump over first bytes and than do regular reading, see example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;io&quot;&#xA;    &quot;io/ioutil&quot;&#xA;    &quot;os&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    f, err := os.Open(os.Args[1])            // open file from argument&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;&#xA;    var skipBytes int64 = 5                  // how many bytes to skip&#xA;&#xA;    _, err = f.Seek(skipBytes, io.SeekStart) // skipping first bytes&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;&#xA;    buffer := make([]byte, 1024)               // allocating buffer to read&#xA;    for {&#xA;        n, err := f.Read(buffer)               // reading&#xA;        fmt.Print(string(buffer[:n]))          // writing to console&#xA;        if err != nil {&#xA;            fmt.Printf(&quot;Err: %v\n&quot;, err)&#xA;            return&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""433041"" LastActivityDate=""2017-06-22T21:15:41.053"" CommentCount=""3"" />
",44709520
44709489,"44709489      <row Id=""44709489"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44709534"" PostTypeId=""2"" ParentId=""44709489"" CreationDate=""2017-06-22T21:16:48.090"" Score=""2"" Body=""&lt;p&gt;The golang &lt;code&gt;ecdsa.Sign&lt;/code&gt; and &lt;code&gt;ecdsa.Verify&lt;/code&gt; functions are expected to take the output of a cryptographic hash function, rather than the message itself. So you are correct that only the first 32 bytes are being examined, in this case.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To resolve the problem first hash the messages using a cryptographic hash function such as SHA-2&lt;/p&gt;&#xA;"" OwnerUserId=""152148"" LastActivityDate=""2017-06-22T21:16:48.090"" CommentCount=""0"" />
",44709534
44709945,"44709945      <row Id=""44709945"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44710073"" PostTypeId=""2"" ParentId=""44709945"" CreationDate=""2017-06-22T22:07:54.223"" Score=""1"" Body=""&lt;p&gt;&lt;code&gt;syslog&lt;/code&gt; is a platform-specific service, so &lt;a href=&quot;https://github.com/sirupsen/logrus/blob/master/hooks/syslog/syslog.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;the Logrus syslog hook code&lt;/a&gt; has a special comment, called a &lt;a href=&quot;https://golang.org/pkg/go/build/#hdr-Build_Constraints&quot; rel=&quot;nofollow noreferrer&quot;&gt;build tag&lt;/a&gt;, to &#xA;tell the Go tools not to build it on Windows (or Native Client or &lt;a href=&quot;https://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs&quot; rel=&quot;nofollow noreferrer&quot;&gt;Plan9&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// +build !windows,!nacl,!plan9&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Unless you don't want syslog integration even on Linux, you probably want to fork the application code that currently always imports &lt;code&gt;hooks/syslog&lt;/code&gt; into two versions, one for platforms with syslog, one for those without. If the file importing &lt;code&gt;hooks/syslog&lt;/code&gt; is currently, say, &lt;code&gt;logconfig.go&lt;/code&gt;, you could create two files &lt;code&gt;logconfig_syslog.go&lt;/code&gt; and &lt;code&gt;logconfig_nosyslog.go&lt;/code&gt;, the &lt;code&gt;syslog&lt;/code&gt; version with a constraint like the one above, and the &lt;code&gt;nosyslog&lt;/code&gt; version with the opposite (&lt;code&gt;// +build windows,nacl,plan9&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool&quot; rel=&quot;nofollow noreferrer&quot;&gt;Dave Cheney wrote a bit more about build tags and the various flavors of Go conditional compilation.&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""2714852"" LastEditorUserId=""2714852"" LastEditDate=""2017-06-23T19:01:29.593"" LastActivityDate=""2017-06-23T19:01:29.593"" CommentCount=""0"" />
",44710073
44709898,"44709898      <row Id=""44709898"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44710371"" PostTypeId=""2"" ParentId=""44709898"" CreationDate=""2017-06-22T22:36:33.073"" Score=""3"" Body=""&lt;p&gt;When you do this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; http.FileServer(http.Dir(&quot;.&quot;))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You are telling it to serve files from the current directory (where all your source code lives).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What I typically do is have a folder &lt;code&gt;/public&lt;/code&gt;, where any static, web accessible files will live.  Then you can do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;router.PathPrefix(&quot;/tmpfiles/&quot;).Handler(&#xA;    http.StripPrefix(&quot;/tmpfiles/&quot;, http.FileServer(http.Dir(&quot;./public&quot;))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Which will remove the &lt;code&gt;/tmpfiles/&lt;/code&gt; from the url, and then serve that file from the &lt;code&gt;public&lt;/code&gt; directory.&lt;/p&gt;&#xA;"" OwnerUserId=""2082673"" LastActivityDate=""2017-06-22T22:36:33.073"" CommentCount=""3"" />
",44710371
35850753,"35850753      <row Id=""35850753"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44710498"" PostTypeId=""2"" ParentId=""35850753"" CreationDate=""2017-06-22T22:49:24.203"" Score=""1"" Body=""&lt;p&gt;Instead of generating your own palette, you can also use on of the predefined (&lt;a href=&quot;https://golang.org/pkg/image/color/palette/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/image/color/palette/&lt;/a&gt;)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;...&#xA;palettedImage := image.NewPaletted(bounds, palette.Plan9)&#xA;draw.Draw(palettedImage, palettedImage.Rect, simage, bounds.Min, draw.Over)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4628047"" LastActivityDate=""2017-06-22T22:49:24.203"" CommentCount=""0"" />
",44710498
44699710,"44699710      <row Id=""44699710"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44711760"" PostTypeId=""2"" ParentId=""44699710"" CreationDate=""2017-06-23T01:37:30.713"" Score=""1"" Body=""&lt;p&gt;According to documentation, the latest parameter of &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa814450(v=vs.85).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;NotifyIpInterfaceChange&lt;/a&gt; is both &lt;code&gt;in/out&lt;/code&gt; and need to be &lt;strong&gt;a pointer&lt;/strong&gt; to &lt;code&gt;HANDLE&lt;/code&gt;. Change the system call to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ret, _, errNum := procNotifyIpInterfaceChange.Call(syscall.AF_UNSPEC,&#xA;    syscall.NewCallback(callback),&#xA;    uintptr(unsafe.Pointer(context)), &#xA;    0, &#xA;    uintptr(unsafe.Pointer(&amp;amp;interfaceChange)))   //this must be pointer&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;br&gt;&#xA;As mentioned in the comment and &lt;a href=&quot;https://groups.google.com/forum/#!msg/golang-nuts/h91eDx27vrQ/PJ0rveQ9vRYJ&quot; rel=&quot;nofollow noreferrer&quot;&gt;this go-nuts discussion&lt;/a&gt;, for multi-threaded callback, &lt;code&gt;import &quot;C&quot;&lt;/code&gt; need to be added, even if we don't use &lt;code&gt;cgo&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-06-23T03:15:23.190"" LastActivityDate=""2017-06-23T03:15:23.190"" CommentCount=""2"" />
",44711760
44706042,"44706042      <row Id=""44706042"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44711856"" PostTypeId=""2"" ParentId=""44706042"" CreationDate=""2017-06-23T01:52:28.630"" Score=""1"" Body=""&lt;p&gt;Create type alias to the struct with &lt;code&gt;typedef&lt;/code&gt; as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/*&#xA;&#xA;typedef const struct libvlc_event_t clibvlc_event_t;&#xA;extern void goCallback(clibvlc_event_t*, void*);&#xA;*/&#xA;import &quot;C&quot;&#xA;&#xA;//export goCallback&#xA;func goCallback(event *C.clibvlc_event_t, userData unsafe.Pointer) {&#xA;    log.Fatal(&quot;TODO goCallback&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you want to know &lt;code&gt;go&lt;/code&gt; type definition which is compatible to &lt;code&gt;C.clibvlc_event_t&lt;/code&gt;, run &lt;code&gt;cgo&lt;/code&gt; with &lt;code&gt;-godefs&lt;/code&gt; options, i.e.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go tool cgo -godefs &amp;lt;YOUR-GO-FILE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For example, if the struct is defined as in &lt;a href=&quot;https://docs.libreoffice.org/avmedia/html/Types_8hxx_source.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://docs.libreoffice.org/avmedia/html/Types_8hxx_source.html&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;struct libvlc_event_t&#xA;{&#xA;    int   type;  // event type&#xA;    void *p_obj; // object emitting that event&#xA;&#xA;    union // so far we don't need this.&#xA;    {&#xA;     struct {&#xA;        const char *dummy1;&#xA;        const char *dummy2;&#xA;      } padding;&#xA;    } u;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then, the compatible struct in &lt;code&gt;go&lt;/code&gt; will be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type VLCEvent struct {&#xA;    Type      int32&#xA;    Pad_cgo_0 [4]byte&#xA;    Obj       *byte&#xA;    U         [16]byte&#xA;}&#xA;&#xA;//Cast C struct to Go struct&#xA;ev := (*VLCEvent)(unsafe.Pointer(event))&#xA;&#xA;//Cast Go struct to C struct&#xA;p := (*C.clibvlc_event_t)(unsafe.Pointer(&amp;amp;VLCEvent{}))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;br&gt;&#xA;Add example struct.&lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-06-23T02:39:16.963"" LastActivityDate=""2017-06-23T02:39:16.963"" CommentCount=""3"" />
",44711856
44712481,"44712481      <row Id=""44712481"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44712720"" PostTypeId=""2"" ParentId=""44712481"" CreationDate=""2017-06-23T03:42:34.583"" Score=""0"" Body=""&lt;p&gt;Yes you can, define the out parameter as pointer &lt;code&gt;*VoucherUsageEvent&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func detectVoucherUsageEvent(_ uint64, changeset changelog.Changeset) (*VoucherUsageEvent, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Return as reference or nil.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return &amp;amp;VoucherUsageEvent{m}, nil&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;OR&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return &amp;amp;event, eventNotDetected&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;OR&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return nil, err&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-06-23T03:42:34.583"" CommentCount=""2"" />
",44712720
44715882,"44715882      <row Id=""44715882"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44716068"" PostTypeId=""2"" ParentId=""44715882"" CreationDate=""2017-06-23T07:57:45.033"" Score=""3"" Body=""&lt;p&gt;The problem with &lt;code&gt;loop1()&lt;/code&gt; is that you store a function literal in the &lt;code&gt;actions&lt;/code&gt; map that references the &lt;strong&gt;loop variable&lt;/strong&gt; &lt;code&gt;cmd&lt;/code&gt;. There is only one instance of this loop variable, so when after the loop you call the functions stored in the &lt;code&gt;actions&lt;/code&gt; map, all will refer to this single loop variable (which is kept because the functions / closures still have a reference to it), but its value &lt;em&gt;at the time of execution&lt;/em&gt; will be the last value set by the &lt;code&gt;for&lt;/code&gt; loop, which is the last value in the &lt;code&gt;cmds&lt;/code&gt; slice (that is, &lt;code&gt;&quot;update&quot;&lt;/code&gt;, so you'll see &lt;code&gt;&quot;update&quot;&lt;/code&gt; printed 3 times).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;An easy workaround is to make a copy of this loop variable, so each iteration, each function literal will have its own copy, which is &quot;detached&quot; from the loop variable:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func loop1() {&#xA;    actions := make(map[string]func())&#xA;&#xA;    for _, cmd := range cmds {&#xA;        cmd2 := cmd&#xA;        actions[cmd] = func() {&#xA;            fmt.Println(cmd2) // Refer to the detached, copy variable!&#xA;        }&#xA;    }&#xA;    for _, action := range actions {&#xA;        action()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With this, output of &lt;code&gt;loop1()&lt;/code&gt; (try it on the &lt;a href=&quot;https://play.golang.org/p/TZEsDyFMfz&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;update&#xA;create&#xA;delete&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This it's not an issue of the &lt;code&gt;for ... range&lt;/code&gt;, it's because the closures refer to the same variable, and you don't use the value of the variable right away, only after the loop. And when you print the value of this variable, all print the same, last value of it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also see this possible duplicate: &lt;a href=&quot;https://stackoverflow.com/questions/44044245/golang-register-multiple-routes-using-range-for-loop-slices-map/44045012#44045012&quot;&gt;Golang: Register multiple routes using range for loop slices/map&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-23T08:04:16.963"" LastActivityDate=""2017-06-23T08:04:16.963"" CommentCount=""4"" />
",44716068
44716125,"44716125      <row Id=""44716125"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44716350"" PostTypeId=""2"" ParentId=""44716125"" CreationDate=""2017-06-23T08:13:43.383"" Score=""5"" Body=""&lt;p&gt;&lt;code&gt;[2]int&lt;/code&gt; is an &lt;a href=&quot;https://golang.org/ref/spec#Array_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;array&lt;/a&gt;, &lt;code&gt;[]int&lt;/code&gt; is a &lt;a href=&quot;https://golang.org/ref/spec#Slice_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;slice&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Arrays and slices are completely different types: you can't pass an array where a slice is required, and you can't pass a slice where an array is expected. Since the length is part of the array type, you can't even use array values where the length differs, e.g. you can't use an array value of type &lt;code&gt;[3]int&lt;/code&gt; for something that expects &lt;code&gt;[2]int&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Everything in Go is passed by value. Slices too. But a slice value is a &lt;em&gt;header&lt;/em&gt;, describing a contiguous section of a backing array, and a slice value only contains a pointer to the array where the elements are actually stored. The slice value does not include its elements (unlike arrays). When you pass a slice, only the slice header is copied (pointing to the same backing array), and so modifying its elements modifies elements in the same backing array, so the caller will observe the changes. Read more about this here: &lt;a href=&quot;https://stackoverflow.com/questions/39993688/are-golang-slices-pass-by-value/39993797#39993797&quot;&gt;Are golang slices pass by value?&lt;/a&gt; To see what's in a slice header: &lt;a href=&quot;https://golang.org/pkg/reflect/#SliceHeader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;reflect.SliceHeader&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unlike slices, arrays are not headers. An array value means all its elements, so when you pass an array value, all its elements are copied, and inside the function it is passed to you can only modify this copy array; the caller won't observe the changes made to the array (e.g. changing its elements).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that however it is very easy to obtain a slice value from an array, you may simply use &lt;a href=&quot;https://golang.org/ref/spec#Slice_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;slicing&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var a [2]int = [2]int{1, 2}&#xA;var s []int = a[:]&#xA;fmt.Println(s) // Prints [1 2]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Recommended blog post: &lt;a href=&quot;https://blog.golang.org/go-slices-usage-and-internals&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Slices: usage and internals&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;More insight into arrays vs slices: &lt;a href=&quot;https://stackoverflow.com/questions/38645175/why-have-arrays-in-go/38645895#38645895&quot;&gt;Why have arrays in Go?&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-23T12:17:21.263"" LastActivityDate=""2017-06-23T12:17:21.263"" CommentCount=""1"" />
",44716350
44719156,"44719156      <row Id=""44719156"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44719269"" PostTypeId=""2"" ParentId=""44719156"" CreationDate=""2017-06-23T10:32:49.237"" Score=""7"" Body=""&lt;p&gt;You need some kind of random information, and based on its value, you can return &lt;code&gt;true&lt;/code&gt; in half of its possible cases, and &lt;code&gt;false&lt;/code&gt; in the other half of the cases.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A very simple example using &lt;a href=&quot;https://golang.org/pkg/math/rand/#Float32&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;rand.Float32()&lt;/code&gt;&lt;/a&gt; of the &lt;a href=&quot;https://golang.org/pkg/math/rand/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; package:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func rand1() bool {&#xA;    return rand.Float32() &amp;lt; 0.5&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Don't forget to properly seed the &lt;code&gt;math/rand&lt;/code&gt; package for it to be different on each app run using &lt;a href=&quot;https://golang.org/pkg/math/rand/#Seed&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;rand.Seed()&lt;/code&gt;&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    rand.Seed(time.Now().UnixNano())&#xA;    fmt.Println(rand1())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is mentioned in the package doc of &lt;code&gt;math/rand&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Use the Seed function to initialize the default Source if different behavior is required for each run.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;If you don't seed, the same pseudo-random information is returned on each application run.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Some variations:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func rand2() bool {&#xA;    return rand.Int31()&amp;amp;0x01 == 0&#xA;}&#xA;&#xA;func rand3() bool {&#xA;    return rand.Intn(2) == 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And an interesting solution without using the &lt;code&gt;math/rand&lt;/code&gt; package. It uses  the &lt;a href=&quot;https://golang.org/ref/spec#Select_statements&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; statement:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func rand9() bool {&#xA;    c := make(chan struct{})&#xA;    close(c)&#xA;    select {&#xA;    case &amp;lt;-c:&#xA;        return true&#xA;    case &amp;lt;-c:&#xA;        return false&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;select&lt;/code&gt; statement chooses one &lt;em&gt;random&lt;/em&gt; case from the ones that can proceed without blocking. Since &lt;a href=&quot;https://golang.org/ref/spec#Receive_operator&quot; rel=&quot;nofollow noreferrer&quot;&gt;receiving&lt;/a&gt; from a closed channel can proceed immediately, one of the 2 cases will be chosen randomly, returning either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Note that however this is far from being perfectly random, as that is not a requirement of the &lt;code&gt;select&lt;/code&gt; statement.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The channel can also be moved to a global variable, so no need to create one and close one in each call:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var c = make(chan struct{})&#xA;&#xA;func init() {&#xA;    close(c)&#xA;}&#xA;&#xA;func rand9() bool {&#xA;    select {&#xA;    case &amp;lt;-c:&#xA;        return true&#xA;    case &amp;lt;-c:&#xA;        return false&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-23T11:01:42.500"" LastActivityDate=""2017-06-23T11:01:42.500"" CommentCount=""2"" />
",44719269
44719451,"44719451      <row Id=""44719451"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44719794"" PostTypeId=""2"" ParentId=""44719451"" CreationDate=""2017-06-23T11:00:13.613"" Score=""1"" Body=""&lt;p&gt;There is no specific guideline for this and even stdlib packages does not follow the same way. But as a rule of thumb you should:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Put exported, global constants and variables (like errors) near the top.&lt;/li&gt;&#xA;&lt;li&gt;Keep structs together with their methods rather than grouping structs together and then their methods separately.&lt;/li&gt;&#xA;&lt;li&gt;Group logical parts together (whenever structs, their methods, package functions (exported or not)). It will make easier splitting your package into multiple files later on. It makes reading easier as well as you don't have to jump all over the file.&lt;/li&gt;&#xA;&lt;li&gt;Last, but not least: if you generate documentation from your package with &lt;code&gt;godoc&lt;/code&gt; and can read it from top to bottom with understanding, then your order is probably correct :)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;When in doubt, check some popular stdlib packages, like &lt;a href=&quot;https://golang.org/src/net/http/server.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/src/net/http/server.go&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Other useful code style guidelines can be found here:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://blog.golang.org/organizing-go-code&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://blog.golang.org/organizing-go-code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://github.com/golang/go/wiki/CodeReviewComments&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/golang/go/wiki/CodeReviewComments&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://golang.org/doc/effective_go.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/doc/effective_go.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""3201908"" LastActivityDate=""2017-06-23T11:00:13.613"" CommentCount=""0"" />
",44719794
44723188,"44723188      <row Id=""44723188"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44723209"" PostTypeId=""2"" ParentId=""44723188"" CreationDate=""2017-06-23T13:56:18.270"" Score=""4"" Body=""&lt;p&gt;You must first initialize your map:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;keyval := make(map[string]int)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;According to &lt;a href=&quot;https://blog.golang.org/go-maps-in-action&quot; rel=&quot;nofollow noreferrer&quot;&gt;this&lt;/a&gt; blog post:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Map types are reference types, like pointers or slices, and so the&#xA;  value of m above is nil; it doesn't point to an initialized map.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;GoPlay here:&lt;br&gt;&#xA;&lt;a href=&quot;https://play.golang.org/p/2JuPS1J7KK&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/2JuPS1J7KK&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit to answer OP's followup. If you're looking to use the strings from your slice as the key to the map, you need to make an additional change:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;keyval[x[i]] = 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;GoPlay here:&lt;br&gt;&#xA;&lt;a href=&quot;https://play.golang.org/p/feMSwvbEGS&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/feMSwvbEGS&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4746361"" LastEditorUserId=""4746361"" LastEditDate=""2017-06-23T14:12:24.800"" LastActivityDate=""2017-06-23T14:12:24.800"" CommentCount=""2"" />
",44723209
44722580,"44722580      <row Id=""44722580"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44723383"" PostTypeId=""2"" ParentId=""44722580"" CreationDate=""2017-06-23T14:04:30.933"" Score=""1"" Body=""&lt;p&gt;You need to add the xml tags to your &lt;code&gt;interface{}&lt;/code&gt;, ie.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Content interface{} `xml:&quot;http://e-conomic.com Debtor_GetNameResponse&quot;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;Address interface{}&lt;/code&gt; in your other example works because its name is the same of the xml tag &lt;code&gt;&amp;lt;Address&amp;gt;&amp;lt;/Address&amp;gt;&lt;/code&gt; and &lt;code&gt;Unmarshal&lt;/code&gt; lookups by it.&lt;/p&gt;&#xA;"" OwnerUserId=""3658660"" LastActivityDate=""2017-06-23T14:04:30.933"" CommentCount=""1"" />
",44723383
44727616,"44727616      <row Id=""44727616"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44728209"" PostTypeId=""2"" ParentId=""44727616"" CreationDate=""2017-06-23T18:53:25.780"" Score=""2"" Body=""&lt;p&gt;You need to install the dependencies using the &quot;go get&quot; command.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You don't have the dependencies installed, as stated in the error message.&#xA;Look a little closer at the error messages, you are getting three different errors.  One for each package that is not part of the go standard libary.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you try to import a package that is not part of the go standard library, the go compiler looks under the $GOROOT path and the $GOPATH path to try to find a package matching the name that you tried to import.  If it is not found the compiler throws the error that you were seeing above.  As @Adrian said, you can run:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;go get ./...&lt;/code&gt;&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;to automatically download all of your dependencies.&lt;/p&gt;&#xA;"" OwnerUserId=""8157369"" LastActivityDate=""2017-06-23T18:53:25.780"" CommentCount=""0"" />
",44728209
44728201,"44728201      <row Id=""44728201"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44728247"" PostTypeId=""2"" ParentId=""44728201"" CreationDate=""2017-06-23T18:55:37.250"" Score=""3"" Body=""&lt;p&gt;Run your tests with the &lt;a href=&quot;https://golang.org/doc/articles/race_detector.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Race detector&lt;/a&gt;.  In short, run:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go test -race&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or to build a normal binary, such as to run on a staging server, use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go build -race&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But there are many more options, so best to read up on it :)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If your goal is to test under realistic load, your best option is to compile your code with &lt;code&gt;go build -race&lt;/code&gt;, then run it under realistic load. This probably means on a staging server.  But don't confuse this with unit testing!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unit testing is for testing units--small parts of code, usually individual functions. Load/race testing is a different beast, and requires different tools and an entirely different approach.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The fact that Go will easily run unit tests with the race detector is nice, and often catches races. But it will not, nor should not be expected to, catch &lt;em&gt;all&lt;/em&gt; races, since the nature of unit test execution is entirely different from that of production execution.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastEditorUserId=""13860"" LastEditDate=""2017-06-23T19:07:48.247"" LastActivityDate=""2017-06-23T19:07:48.247"" CommentCount=""1"" />
",44728247
44729587,"44729587      <row Id=""44729587"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44730447"" PostTypeId=""2"" ParentId=""44729587"" CreationDate=""2017-06-23T21:55:19.590"" Score=""3"" Body=""&lt;p&gt;I appreciate @KelvinS' approach, there already exists a &lt;code&gt;math.Pow&lt;/code&gt; (though it deals in float64s.  Never-the-less, his approach breaks down what you are really after, which is raising each successive number (from the right) by an order of magnitude and summing the numbers.  As such, the most straight forward approach I can think of is&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func sliceToInt(s []int) int {&#xA;    res := 0&#xA;    op := 1&#xA;    for i := len(s) - 1; i &amp;gt;= 0; i-- {&#xA;        res += s[i] * op&#xA;        op *= 10&#xA;    }&#xA;    return res&#xA;}&#xA;&#xA;func main() {&#xA;    nums := []int{1, 2, 3}&#xA;    fmt.Println(sliceToInt(nums))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;sliceToInt&lt;/code&gt; is poorly named, but you should get the idea.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/JS96Nq_so-&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/JS96Nq_so-&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It may be a micro optimization to try to get this as fast as possible, but if it happens to be in a hot path it might be worth it&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;BenchmarkPow-8              100000000           13.5 ns/op         0 B/op          0 allocs/op&#xA;BenchmarkJoin-8              5000000           272 ns/op           8 B/op          5 allocs/op&#xA;BenchmarkBuffer-8            2000000           782 ns/op         160 B/op          8 allocs/op&#xA;BenchmarkSliceToInt-8       200000000            8.65 ns/op        0 B/op          0 allocs/op&#xA;PASS&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""141555"" LastEditorUserId=""141555"" LastEditDate=""2017-06-23T22:09:46.663"" LastActivityDate=""2017-06-23T22:09:46.663"" CommentCount=""3"" />
",44730447
44732508,"44732508      <row Id=""44732508"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44732655"" PostTypeId=""2"" ParentId=""44732508"" CreationDate=""2017-06-24T04:09:53.223"" Score=""4"" Body=""&lt;p&gt;If you have read &lt;code&gt;resp.Body&lt;/code&gt; before the JSON &lt;code&gt;Decode&lt;/code&gt; then it has no input to decode.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try only -&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;response := &amp;amp;Response{}&#xA;json.NewDecoder(resp.Body).Decode(response)&#xA;fmt.Println(&quot;response struct:&quot;, response)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-06-24T04:09:53.223"" CommentCount=""3"" />
",44732655
44734529,"44734529      <row Id=""44734529"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44734585"" PostTypeId=""2"" ParentId=""44734529"" CreationDate=""2017-06-24T08:43:42.107"" Score=""3"" Body=""&lt;p&gt;The problem is that the &lt;code&gt;{{range}}&lt;/code&gt; action changes (sets) the dot (&lt;code&gt;.&lt;/code&gt;) even if you use loop variables (&lt;code&gt;$key&lt;/code&gt; and &lt;code&gt;$value&lt;/code&gt;) in your case. Inside a &lt;code&gt;{{range}}&lt;/code&gt; the dot is set to the current element.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And inside &lt;code&gt;{{range}}&lt;/code&gt; you write:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{{ if eq $key .Res.Type }}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Since values in your loop are &lt;code&gt;string&lt;/code&gt; values, &lt;code&gt;.Res.Type&lt;/code&gt; is an error, because there is no &lt;code&gt;Res&lt;/code&gt; field or method of a &lt;code&gt;string&lt;/code&gt; value (the current element denoted by the dot &lt;code&gt;.&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Use the &lt;code&gt;$&lt;/code&gt; sign to not refer to the loop value, but to the param passed to the template execution:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{{ if eq $key $.Res.Type }}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will work, but won't give you the desired output, as you have a typo:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;res := &amp;amp;Result{Type: &quot;findAllString&quot;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Use capital letter in &lt;code&gt;Result&lt;/code&gt; as your &lt;code&gt;types&lt;/code&gt; map also contains values with capital letter:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;res := &amp;amp;Result{Type: &quot;FindAllString&quot;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With this you get the desired output (try it on the &lt;a href=&quot;https://play.golang.org/p/ZtZAoeOtF3&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;2009/11/10 23:00:00 &#xA;    &amp;lt;select name=&quot;type&quot;&amp;gt;&#xA;                &amp;lt;option value=&quot;FindAllString&quot; selected&amp;gt;FindAllString&amp;lt;/option&amp;gt;&#xA;                &amp;lt;option value=&quot;FindString&quot;&amp;gt;FindString&amp;lt;/option&amp;gt;&#xA;                &amp;lt;option value=&quot;FindStringSubmatch&quot;&amp;gt;FindStringSubmatch&amp;lt;/option&amp;gt;&#xA;    &amp;lt;/select&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also note that you could simply write the loop like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{{range $key, $value := .Types}}&#xA;    &amp;lt;option value=&quot;{{$key}}&quot;{{if eq $key $.Res.Type}} selected{{end}}&amp;gt;{{.}}&amp;lt;/option&amp;gt;&#xA;{{end}}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also note that for testing purposes you may simply pass &lt;code&gt;os.Stdout&lt;/code&gt; as the writer for template execution, and you'll see the result on your console without having to create and use a buffer, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;err = t.Execute(os.Stdout, struct {&#xA;    Types map[string]string&#xA;    Res   *Result&#xA;}{types, res})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Try the simplified version on the &lt;a href=&quot;https://play.golang.org/p/pEvOsU-bNS&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Read this answer for more insights: &lt;a href=&quot;https://stackoverflow.com/questions/42507958/golang-template-engine-pipelines/42508255#42508255&quot;&gt;golang template engine pipelines&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-24T09:39:07.123"" LastActivityDate=""2017-06-24T09:39:07.123"" CommentCount=""0"" />
",44734585
44735281,"44735281      <row Id=""44735281"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44735512"" PostTypeId=""2"" ParentId=""44735281"" CreationDate=""2017-06-24T10:42:42.890"" Score=""1"" Body=""&lt;p&gt;One thing to remember while you were defining methods is:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Methods are like normal functions, and when you were calling &lt;code&gt;setValue()&lt;/code&gt; function, what's happening is this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;type vertex struct {&#xA;    x int&#xA;    y int&#xA;}&#xA;&#xA;func main() {&#xA;    var v vertex&#xA;    fmt.Println(v.setVertex(1, 2))&#xA;    fmt.Println(v)&#xA;/*  v = v.setVertex(1,2)&#xA;    // we are assigning the returned variable address to v.&#xA;    fmt.Println(v)&#xA;*/&#xA;&#xA;}&#xA;&#xA;&#xA;// With a value receiver, the setVertex method operates on a copy of the &#xA;// original vertex value. (This is the same behavior as for any other&#xA;// function argument.) &#xA;// This methods has a value as a reciver, so it gets the copy not the &#xA;// original vertex.&#xA;&#xA;func (v vertex) setVertex(x, y int) vertex {&#xA;// Here it is similar to creating a new variable with name 'v',&#xA;// Go is lexically scoped using blocks, so this variable exists only &#xA;// in this block, while it is returned we are printing it but we didn't&#xA;// store it in another variable.&#xA;    v.x = x&#xA;    v.y = y&#xA;    return v&#xA;}&#xA;&#xA;// If you want to change any variable or struct, we need to pass its &#xA;// address, else only copy of that variable is received by the called&#xA;// function.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is clearly explained in &lt;a href=&quot;https://tour.golang.org/methods/4&quot; rel=&quot;nofollow noreferrer&quot;&gt;gotour&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerDisplayName=""user5952594"" LastActivityDate=""2017-06-24T10:42:42.890"" CommentCount=""0"" />
",44735512
44738878,"44738878      <row Id=""44738878"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44739875"" PostTypeId=""2"" ParentId=""44738878"" CreationDate=""2017-06-24T18:53:19.360"" Score=""0"" Body=""&lt;p&gt;You can utilize the Go conditional build via build tags and target your compilation of main.go. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Refer this &lt;a href=&quot;https://dave.cheney.net/2014/09/28/using-build-to-switch-between-debug-and-release&quot; rel=&quot;nofollow noreferrer&quot;&gt;article&lt;/a&gt; and put your thoughts into action.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;For Example:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Directory structure &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;build-tags&#xA;├── build-tags&#xA;├── dummy&#xA;│   └── dummy.go&#xA;├── main_dummy.go&#xA;├── main_postgres.go&#xA;└── postgres&#xA;    └── postgres.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Sample implementation:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;dummy/dummy.go&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package dummy&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;func PrintName() {&#xA;    fmt.Println(&quot;My name is dummy package&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;postgres/postgres.go&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package postgres&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;func PrintName() {&#xA;    fmt.Println(&quot;My name is postgres package&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;main_dummy.go&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// +build dummy&#xA;&#xA;package main&#xA;&#xA;import &quot;build-tags/dummy&quot;&#xA;&#xA;func main() {&#xA;    dummy.PrintName()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;postgres.go&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// +build postgres&#xA;&#xA;package main&#xA;&#xA;import &quot;build-tags/postgres&quot;&#xA;&#xA;func main() {&#xA;    postgres.PrintName()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now let's build targeting &lt;code&gt;dummy&lt;/code&gt; tag, same way you can do for &lt;code&gt;postgres&lt;/code&gt; tag.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go build --tags=&quot;dummy&quot;&#xA;&#xA;# run the program&#xA;./build-tags&#xA;&#xA;My name is dummy package&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-06-24T21:51:48.803"" LastActivityDate=""2017-06-24T21:51:48.803"" CommentCount=""0"" />
",44739875
44741975,"44741975      <row Id=""44741975"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44742254"" PostTypeId=""2"" ParentId=""44741975"" CreationDate=""2017-06-25T00:59:49.623"" Score=""2"" Body=""&lt;p&gt;Both of your examples has data race issue. You can find out data race in following ways.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;go run -race program.go&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;go test -race &amp;lt;package-name&amp;gt;&lt;/code&gt; or &lt;code&gt;go test -race -run=&amp;lt;testcase-func-name&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;go build -race program.go&lt;/code&gt; then execute the program&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;go install -race &amp;lt;package-name&amp;gt;&lt;/code&gt; then execute the program&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; data race info&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ go build -race datarace-try1.go&#xA;$ ./datarace-try1&#xA;8&#xA;==================&#xA;WARNING: DATA RACE&#xA;Read at 0x00c4200761a8 by goroutine 7:&#xA;  main.main.func1()&#xA;      /Users/jeeva/go_playground/datarace-try1.go:23 +0x74&#xA;&#xA;Previous write at 0x00c4200761a8 by goroutine 6:&#xA;  main.main.func1()&#xA;      /Users/jeeva/go_playground/datarace-try1.go:23 +0x8d&#xA;&#xA;Goroutine 7 (running) created at:&#xA;  main.main()&#xA;      /Users/jeeva/go_playground/datarace-try1.go:25 +0xee&#xA;&#xA;Goroutine 6 (running) created at:&#xA;  main.main()&#xA;      /Users/jeeva/go_playground/datarace-try1.go:25 +0xee&#xA;==================&#xA;187410&#xA;Found 1 data race(s)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; data race info&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ go build -race datarace-try2.go&#xA;$ ./datarace-try2&#xA;==================&#xA;WARNING: DATA RACE&#xA;Read at 0x00c420078178 by main goroutine:&#xA;  main.main()&#xA;      /Users/jeeva/go_playground/datarace-try2.go:10 +0x12e&#xA;&#xA;Previous write at 0x00c420078178 by goroutine 6:&#xA;  main.main.func1()&#xA;      /Users/jeeva/go_playground/datarace-try2.go:15 +0xd4&#xA;&#xA;Goroutine 6 (finished) created at:&#xA;  main.main()&#xA;      /Users/jeeva/go_playground/datarace-try2.go:17 +0xf1&#xA;==================&#xA;==================&#xA;WARNING: DATA RACE&#xA;Read at 0x00c420078178 by goroutine 7:&#xA;  main.main.func2()&#xA;      /Users/jeeva/go_playground/datarace-try2.go:20 +0x3f&#xA;&#xA;Previous write at 0x00c420078178 by goroutine 6:&#xA;  main.main.func1()&#xA;      /Users/jeeva/go_playground/datarace-try2.go:15 +0xd4&#xA;&#xA;Goroutine 7 (running) created at:&#xA;  main.main()&#xA;      /Users/jeeva/go_playground/datarace-try2.go:23 +0x11d&#xA;&#xA;Goroutine 6 (finished) created at:&#xA;  main.main()&#xA;      /Users/jeeva/go_playground/datarace-try2.go:17 +0xf1&#xA;==================&#xA;finish&#xA;Found 2 data race(s)&#xA;exit status 66&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-06-25T01:05:24.653"" LastActivityDate=""2017-06-25T01:05:24.653"" CommentCount=""2"" />
",44742254
44746083,"44746083      <row Id=""44746083"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44746197"" PostTypeId=""2"" ParentId=""44746083"" CreationDate=""2017-06-25T12:06:03.357"" Score=""0"" Body=""&lt;p&gt;Ok apparently &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;-gocron.Start()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;will start jobs that were already startet again so to fix my issue, I had to change the script to this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    for i := 0; i &amp;lt; 3; i++ {&#xA;        taskCron(i)&#xA;    }&#xA;    channel2 := make(chan int)&#xA;    go startCron(channel2)&#xA;&#xA;    time.Sleep(time.Second * 5)&#xA;    gocron.Clear()&#xA;    fmt.Println(&quot;stop this&quot;)&#xA;}&#xA;&#xA;func task(i int) {&#xA;    fmt.Println(&quot;still running...&quot;, i)&#xA;}&#xA;&#xA;func taskCron(i int) {&#xA;    gocron.Every(4).Seconds().Do(task, i)&#xA;}&#xA;&#xA;func startCron(channel chan int) {&#xA;    &amp;lt;-gocron.Start()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I hope this helps anybody who had the same Problem!&lt;/p&gt;&#xA;"" OwnerUserId=""5799860"" LastActivityDate=""2017-06-25T12:06:03.357"" CommentCount=""0"" />
",44746197
44755089,"44755089      <row Id=""44755089"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44755496"" PostTypeId=""2"" ParentId=""44755089"" CreationDate=""2017-06-26T08:15:52.423"" Score=""3"" Body=""&lt;p&gt;The current implementation is deterministic, e.g. for structs see &lt;a href=&quot;https://golang.org/src/encoding/json/encode.go#L629&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/src/encoding/json/encode.go#L629&lt;/a&gt; which gives struct order (and maps are by sorted keys).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But as this is &lt;em&gt;not&lt;/em&gt; guaranteed by the documentation you should consider this an implementation detail.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to hash the output you'll face more problems, e.g. there are several equivalent representations of characters in strings and JSON has no notion of an int (floats only). It really depends on what you try to do wirh that hash.&lt;/p&gt;&#xA;"" OwnerUserId=""1266756"" LastActivityDate=""2017-06-26T08:15:52.423"" CommentCount=""0"" />
",44755496
44755921,"44755921      <row Id=""44755921"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44756120"" PostTypeId=""2"" ParentId=""44755921"" CreationDate=""2017-06-26T08:56:46.353"" Score=""4"" Body=""&lt;p&gt;First, your code is invalid.  You need a valid array expression for your &lt;code&gt;aData&lt;/code&gt; declaration, and you need to specify the type when assigning to &lt;code&gt;bData&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;aData := []A{{&quot;bob&quot;, 3, 4}, {&quot;mary&quot;, 5, 2}}&#xA;bData := make([]B, len(aData))&#xA;&#xA;for i, aItem := range aData {&#xA;    bData[i] = B{&#xA;        Field1: aItem.Field1,&#xA;        Field2: aItem.Field2,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So aside from your syntax errors, this is more idiomatic because:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;It uses &lt;code&gt;range&lt;/code&gt; instead of a &lt;code&gt;for&lt;/code&gt; loop, which is perfect for iterating over an array, and more readable.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;bData&lt;/code&gt; is preallocated to the exact size needed.&lt;/li&gt;&#xA;&lt;li&gt;Field names are specified in the declaration of &lt;code&gt;bData&lt;/code&gt;'s values.  It would be more idiomatic to do the same for &lt;code&gt;aData&lt;/code&gt; as well, but it gets a bit verbose.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-06-26T08:56:46.353"" CommentCount=""0"" />
",44756120
35997995,"35997995      <row Id=""35997995"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44757772"" PostTypeId=""2"" ParentId=""35997995"" CreationDate=""2017-06-26T10:32:59.943"" Score=""1"" Body=""&lt;p&gt;Here a solution to make cross-compile super easy even with CGO.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I stumbled upon it recently after wasting a lot of time getting a new windows build server to build my Go app.&#xA;Now I just compile it on my Mac and will create a Linux build server with it:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/karalabe/xgo&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/karalabe/xgo&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Many thanks to Péter Szilágyi alias karalabe for this really great package!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How to use:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;have Docker running&lt;/li&gt;&#xA;&lt;li&gt;go get github.com/karalabe/xgo&lt;/li&gt;&#xA;&lt;li&gt;xgo --targets=windows/amd64 ./&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;There are lots more options!&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-06-26T10:32:59.943"" CommentCount=""0"" />
",44757772
44759185,"44759185      <row Id=""44759185"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44759462"" PostTypeId=""2"" ParentId=""44759185"" CreationDate=""2017-06-26T12:13:39.670"" Score=""2"" Body=""&lt;p&gt;As the error describes, you are trying to store a &lt;code&gt;*io.PipeReader&lt;/code&gt; value in a &lt;code&gt;io.PipeReader&lt;/code&gt; field. You can fix this by updating your struct definition to the correct type:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type ProgressPipeReader struct {&#xA;        *io.PipeReader&#xA;        progress int64&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""142162"" LastActivityDate=""2017-06-26T12:13:39.670"" CommentCount=""0"" />
",44759462
44759016,"44759016      <row Id=""44759016"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44759792"" PostTypeId=""2"" ParentId=""44759016"" CreationDate=""2017-06-26T12:30:26.997"" Score=""3"" Body=""&lt;p&gt;This is not possible with Go. As a statically compiled language you can only compile a binary if all its dependencies exist.&#xA;Can you give us some more details on why you need this in the first place? Maybe there is a simpler or more idiomatic way to achieve your idea.&lt;/p&gt;&#xA;"" OwnerUserId=""11792"" LastActivityDate=""2017-06-26T12:30:26.997"" CommentCount=""2"" />
",44759792
44763440,"44763440      <row Id=""44763440"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44763544"" PostTypeId=""2"" ParentId=""44763440"" CreationDate=""2017-06-26T15:46:45.477"" Score=""4"" Body=""&lt;p&gt;It is defined in assembly for various architectures in the &lt;code&gt;*.s&lt;/code&gt; files located in the same package.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Per &lt;a href=&quot;https://golang.org/ref/spec#Function_declarations&quot; rel=&quot;nofollow noreferrer&quot;&gt;the spec&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;A function declaration may omit the body. Such a declaration provides the signature for a function implemented outside Go, such as an assembly routine.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""7426"" LastEditorUserId=""7426"" LastEditDate=""2017-06-26T15:59:42.703"" LastActivityDate=""2017-06-26T15:59:42.703"" CommentCount=""3"" />
",44763544
44764596,"44764596      <row Id=""44764596"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44764648"" PostTypeId=""2"" ParentId=""44764596"" CreationDate=""2017-06-26T16:49:54.273"" Score=""2"" Body=""&lt;p&gt;You have a couple of issues. First, you want to accept your incoming connections &lt;em&gt;inside&lt;/em&gt; your for loop. Then, you're likely going want to spawn off a goroutine to handle the requests coming in.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for {&#xA;    // Listen for an incoming connection.&#xA;    conn, err := l.Accept()&#xA;    if err != nil {&#xA;        log.Println(&quot;Error accepting: &quot;, err.Error())&#xA;        continue&#xA;    }&#xA;&#xA;    // Handle connections in a new goroutine.&#xA;    go myHandler(conn)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Resources:&lt;br&gt;&#xA;&lt;a href=&quot;https://tour.golang.org/concurrency&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://tour.golang.org/concurrency&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;GoPlay:&lt;br&gt;&#xA;&lt;a href=&quot;https://play.golang.org/p/7EovqNWJIx&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/7EovqNWJIx&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4746361"" LastEditorUserId=""4746361"" LastEditDate=""2017-06-26T17:18:52.647"" LastActivityDate=""2017-06-26T17:18:52.647"" CommentCount=""0"" />
",44764648
44764485,"44764485      <row Id=""44764485"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44765128"" PostTypeId=""2"" ParentId=""44764485"" CreationDate=""2017-06-26T17:18:05.377"" Score=""0"" Body=""&lt;p&gt;This code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;lenghts3:= int64(len(buffer.Bytes()))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is a concurrency problem: two routines may get the length at the same time, getting the same start position, and both proceed to write to the buffer with the same start position, stepping on each other's toes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since you're already retrieving whole objects in memory and not streaming to the combined buffer, you may as well just send the full contents of each file on a channel, and have a receiver on that channel append each result to a shared byte buffer as they come in, synchronously.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-26T17:18:05.377"" CommentCount=""1"" />
",44765128
44766284,"44766284      <row Id=""44766284"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44766472"" PostTypeId=""2"" ParentId=""44766284"" CreationDate=""2017-06-26T18:37:45.160"" Score=""5"" Body=""&lt;p&gt;So you're using an interface, and you need some sort of guarantee that you can set the value of a member of the struct?  Sounds like you should make that guarantee part of the interface, so something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Settable interface {&#xA;    SetVal(val int)&#xA;}&#xA;&#xA;func (c *check) SetVal(val int) {&#xA;    c.Val = val&#xA;}&#xA;&#xA;func some(te Settable) {&#xA;    te.SetVal(20)&#xA;}&#xA;&#xA;type check struct {&#xA;    Val int&#xA;}&#xA;&#xA;func main() {&#xA;    a := check{Val: 100}&#xA;    p := &amp;amp;a&#xA;    some(p)&#xA;    fmt.Println(*p)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2082673"" LastActivityDate=""2017-06-26T18:37:45.160"" CommentCount=""1"" />
",44766472
44767424,"44767424      <row Id=""44767424"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44767697"" PostTypeId=""2"" ParentId=""44767424"" CreationDate=""2017-06-26T19:56:04.823"" Score=""2"" Body=""&lt;p&gt;Your desired XML has 2 elements: &lt;code&gt;&amp;lt;environment&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;temperature&amp;gt;&lt;/code&gt;, so you should have 2 types (structs) to model them. And you may use the tag &lt;code&gt;&quot;,chardata&quot;&lt;/code&gt; to tell the encoder to write the field's value as character data and not as an XML element.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type environment struct {&#xA;    Temperature temperature `xml:&quot;temperature&quot;`&#xA;}&#xA;&#xA;type temperature struct {&#xA;    Temperature string `xml:&quot;,chardata&quot;`&#xA;    Type        string `xml:&quot;type,attr&quot;`&#xA;    Units       string `xml:&quot;unit,attr&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Testing it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;x := &amp;amp;environment{&#xA;    Temperature: temperature{Temperature: &quot;-11.3&quot;, Type: &quot;float&quot;, Units: &quot;c&quot;},&#xA;}&#xA;&#xA;enc := xml.NewEncoder(os.Stdout)&#xA;enc.Indent(&quot;&quot;, &quot;  &quot;)&#xA;if err := enc.Encode(x); err != nil {&#xA;    fmt.Printf(&quot;error: %v\n&quot;, err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It produces the desired output (try it on the &lt;a href=&quot;https://play.golang.org/p/oicKa9U38K&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;environment&amp;gt;&#xA;  &amp;lt;temperature type=&quot;float&quot; unit=&quot;c&quot;&amp;gt;-11.3&amp;lt;/temperature&amp;gt;&#xA;&amp;lt;/environment&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that you get the same result if you use the &lt;code&gt;&quot;,innerxml&quot;&lt;/code&gt; tag which tells the encoder to write the value verbatim, not subject to the usual marshaling procedure:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type temperature struct {&#xA;    Temperature string `xml:&quot;,innerxml&quot;`&#xA;    Type        string `xml:&quot;type,attr&quot;`&#xA;    Units       string `xml:&quot;unit,attr&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output is the same. Try this one on the &lt;a href=&quot;https://play.golang.org/p/lWQlohI3RT&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-26T20:01:23.613"" LastActivityDate=""2017-06-26T20:01:23.613"" CommentCount=""0"" />
",44767697
44769538,"44769538      <row Id=""44769538"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44770471"" PostTypeId=""2"" ParentId=""44769538"" CreationDate=""2017-06-27T00:09:20.283"" Score=""1"" Body=""&lt;p&gt;It's just a matter of casting the unsafe.Pointer back to an array (which is indexable) in the proper way.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;After trying various casts, this is the one that worked (assuming &lt;code&gt;wid&lt;/code&gt; and &lt;code&gt;hgt&lt;/code&gt; are each declare as &lt;code&gt;const&lt;/code&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;pixels := (*[wid*hgt*4]uint8)(ptr)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then I was able to change them with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;pixels[(y*wid+x)*4+0] = 0x00 // Blue&#xA;pixels[(y*wid+x)*4+1] = 0x00 // Green&#xA;pixels[(y*wid+x)*4+2] = 0x00 // Red&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1475548"" LastEditorUserId=""1475548"" LastEditDate=""2017-07-06T16:25:01.577"" LastActivityDate=""2017-07-06T16:25:01.577"" CommentCount=""0"" />
",44770471
44768451,"44768451      <row Id=""44768451"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44770957"" PostTypeId=""2"" ParentId=""44768451"" CreationDate=""2017-06-27T01:16:48.827"" Score=""1"" Body=""&lt;p&gt;Have a look at some http tests I've written: &lt;a href=&quot;https://github.com/eamonnmcevoy/go_web_server/blob/master/pkg/server/user_router_test.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/eamonnmcevoy/go_web_server/blob/master/pkg/server/user_router_test.go&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    // Arrange&#xA;    us := mock.UserService{}&#xA;    testUserRouter := NewUserRouter(&amp;amp;us, mux.NewRouter())&#xA;...&#xA;    w := httptest.NewRecorder()&#xA;    r, _ := http.NewRequest(&quot;PUT&quot;, &quot;/&quot;, payload)&#xA;    r.Header.Set(&quot;Content-Type&quot;, &quot;application/json&quot;)&#xA;    testUserRouter.ServeHTTP(w, r)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Simply create an instance of your router and call the endpoints using go's &lt;code&gt;httptest&lt;/code&gt;. This snippet will perform a &lt;code&gt;PUT&lt;/code&gt; request at the default endpoint &lt;code&gt;/&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""588734"" LastActivityDate=""2017-06-27T01:16:48.827"" CommentCount=""3"" />
",44770957
44770962,"44770962      <row Id=""44770962"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44771040"" PostTypeId=""2"" ParentId=""44770962"" CreationDate=""2017-06-27T01:29:18.587"" Score=""6"" Body=""&lt;p&gt;The difference between expressions and statements is that expressions produce a value and thus can be used in places where values are required. So expressions can be used as values for variables, arguments to functions or operands to operators. Statements can't.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;and what does he mean that &quot;you need values rather than variables&quot; in his question?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I assume that by vals he means constants (which are called &lt;code&gt;val&lt;/code&gt;s in Scala for example).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If &lt;code&gt;if&lt;/code&gt; were an expression, you could do this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;const myValue = if condition { value1 } else { value2 }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As it is, you have to do this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var myValue&#xA;if condition {&#xA;    myValue = value1&#xA;} else {&#xA;    myValue = value2&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So you needed to make your variable mutable (use &lt;code&gt;var&lt;/code&gt; instead of &lt;code&gt;const&lt;/code&gt;), which is what the person asking the question likely meant.&lt;/p&gt;&#xA;"" OwnerUserId=""149392"" LastActivityDate=""2017-06-27T01:29:18.587"" CommentCount=""0"" />
",44771040
44771078,"44771078      <row Id=""44771078"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44771757"" PostTypeId=""2"" ParentId=""44771078"" CreationDate=""2017-06-27T03:19:18.700"" Score=""4"" Body=""&lt;p&gt;You have to experiment a bit with this stuff, but I don't think the main concern is &lt;em&gt;goroutines running at once&lt;/em&gt;. As the answer @reticentroot linked to says, &lt;a href=&quot;https://stackoverflow.com/questions/8509152/max-number-of-goroutines&quot;&gt;it's not necessarily a problem to run a lot of simultaneous goroutines&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think your main concern should be &lt;em&gt;total number of goroutine launches&lt;/em&gt;. The current implementation could theoretically start a goroutine to sort just a few items, and that goroutine would spend a lot more time on startup/coordination than actual sorting. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The ideal is you only start as many goroutines as you need to get good utilization of all your CPUs. If your work items are ~equal size and your cores are ~equally busy, then starting one task per core is perfect. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here, tasks &lt;em&gt;aren't&lt;/em&gt; evenly sized, so you might split the sort into &lt;em&gt;somewhat&lt;/em&gt; more tasks than you have CPUs and distribute them. (In production you would typically use a &lt;a href=&quot;https://gobyexample.com/worker-pools&quot; rel=&quot;nofollow noreferrer&quot;&gt;worker pool&lt;/a&gt; to distribute work without starting a new goroutine for every task, but I think we can get away with skipping that here.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To get a workable number of tasks--enough to keep all cores busy, but not so many that you create lots of overhead--you can set a minimum size (initial array size/100 or whatever), and only split off sorts of arrays larger than that. &lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;In slightly more detail, there is a bit of cost every time you send a task off to the background. For starters:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Each goroutine &lt;em&gt;launch&lt;/em&gt; spends a little time setting up the stack and doing scheduler bookkeeping&lt;/li&gt;&#xA;&lt;li&gt;Each &lt;em&gt;task switch&lt;/em&gt; spends some time in the scheduler and may incur &lt;a href=&quot;https://en.wikipedia.org/wiki/CPU_cache#CACHE-MISS&quot; rel=&quot;nofollow noreferrer&quot;&gt;cache misses&lt;/a&gt; when the two goroutines are looking at different code or data&lt;/li&gt;&#xA;&lt;li&gt;Your own &lt;em&gt;coordination code&lt;/em&gt; (channel sends and &lt;code&gt;sync&lt;/code&gt; ops) takes time&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Other things can prevent ideal speedups from happening: you could hit a systemwide limit on e.g. memory bandwidth as Volker pointed out, some sync costs can increase as you add cores, and you can run into &lt;a href=&quot;https://en.wikipedia.org/wiki/False_sharing&quot; rel=&quot;nofollow noreferrer&quot;&gt;various&lt;/a&gt; trickier &lt;a href=&quot;https://en.wikipedia.org/wiki/Non-uniform_memory_access&quot; rel=&quot;nofollow noreferrer&quot;&gt;issues&lt;/a&gt; sometimes. But the setup, switching, and coordination costs are a good place to start.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The benefit that can outweigh the coordination costs is, of course, other CPUs getting work done when they'd otherwise sit idle.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think, but haven't tested, that your problems at 50 goroutines are 1) you already reached nearly-full utilization long ago, so adding more tasks adds more coordination work without making things go faster, and 2) you're creating goroutines for &lt;em&gt;tiny&lt;/em&gt; sorts, which may spend more of their time setting up and coordinating than they actually do sorting. And at 10 goroutines your problem might be that you're no longer achieving full CPU utilization. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you wanted, you could test those theories by counting the number of total goroutine launches at various goroutine limits (in &lt;a href=&quot;https://golang.org/pkg/sync/atomic/#AddInt64&quot; rel=&quot;nofollow noreferrer&quot;&gt;an atomic global counter&lt;/a&gt;) and measuring CPU utilization at various limits (e.g. by running your program under the Linux/UNIX &lt;code&gt;time&lt;/code&gt; utility).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The approach I'd suggest for a divide-and-conquer problem like this is &lt;em&gt;only fork off a goroutine for large enough subproblems&lt;/em&gt; (for quicksort, that means large enough subarrays). You can try different limits: maybe you only start goroutines for pieces that are more than 1/64th of the original array, or pieces above some static threshold like 1000 items.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;And you meant this sort routine as an exercise, I suspect, but there are various things you can do to make your sorts faster or more robust against weird inputs. &lt;a href=&quot;https://golang.org/src/sort/sort.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;The standard libary sort&lt;/a&gt; falls back to insertion sort for small subarrays and uses heapsort for the unusual data patterns that cause quicksort problems. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can also look at other algorithms like radix sort for all or part of the sorting, &lt;a href=&quot;https://github.com/twotwotwo/sorts/&quot; rel=&quot;nofollow noreferrer&quot;&gt;which I played with&lt;/a&gt;. That sorting library is also parallel. I wound up using a minimum cutoff of 127 items before I'd hand a subarray off for other goroutines to sort, and I used &lt;a href=&quot;https://github.com/twotwotwo/sorts/blob/master/parallel.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;an arrangement with a fixed pool of goroutines and a buffered chan to pass tasks between them&lt;/a&gt;. That produced decent practical speedups at the time, though I'm far from sure I found the optimal approach, and Go's scheduler has evolved since I wrote the package. Experimentation is interesting!&lt;/p&gt;&#xA;"" OwnerUserId=""2714852"" LastEditorUserId=""2714852"" LastEditDate=""2017-06-27T20:32:30.443"" LastActivityDate=""2017-06-27T20:32:30.443"" CommentCount=""5"" />
",44771757
44772499,"44772499      <row Id=""44772499"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44772562"" PostTypeId=""2"" ParentId=""44772499"" CreationDate=""2017-06-27T05:01:36.233"" Score=""6"" Body=""&lt;p&gt;The problem is that the filename ends in a newline:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;panic: open a.jpg&#xA;: no such file or directory&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That should be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;panic: open a.jpg: no such file or directory&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is because &lt;a href=&quot;https://golang.org/pkg/bufio/#Reader.ReadString&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;ReadString()&lt;/code&gt;&lt;/a&gt; (emphasis mine):&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;reads until the first occurrence of delim in the input, returning a string containing the data up to and &lt;strong&gt;including the delimiter&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Use &lt;code&gt;input = strings.TrimSpace(input)&lt;/code&gt; to remove the newline.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Extra tip 1: Instead of using &lt;code&gt;fmt.Println(input)&lt;/code&gt; to debug stuff, you should use &lt;code&gt;fmt.Printf(&quot;%#v\n&quot;, input)&lt;/code&gt;. This will show whitespace and unprintable characters clearer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Extra tip 2: Go 1.2.1 is quite old; you should consider using a more recent version. &lt;a href=&quot;https://golang.org/doc/go1compat&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go is very compatible&lt;/a&gt; and upgrading to a newer version is usually not a problem.&lt;/p&gt;&#xA;"" OwnerUserId=""660921"" LastEditorUserId=""660921"" LastEditDate=""2017-06-27T05:46:31.437"" LastActivityDate=""2017-06-27T05:46:31.437"" CommentCount=""1"" />
",44772562
44771474,"44771474      <row Id=""44771474"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44772811"" PostTypeId=""2"" ParentId=""44771474"" CreationDate=""2017-06-27T05:29:51.550"" Score=""1"" Body=""&lt;p&gt;Like the error message says, you need to implement the &lt;a href=&quot;https://golang.org/pkg/encoding/#BinaryMarshaler&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;BinaryMarshaler&lt;/code&gt;&lt;/a&gt; interface for your &lt;code&gt;ArticleCovers&lt;/code&gt; type:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type ArticleCovers struct {&#xA;    ID             int&#xA;    Covers         ArticleCovers&#xA;    ArticleTypeID  int&#xA;    Address        Address     `gorm:&quot;ForeignKey:AddressID&quot;`&#xA;}&#xA;&#xA;func (ac ArticleCovers) MarshalBinary() ([]byte, error) {&#xA;    return []byte(fmt.Sprintf(&quot;%v-%v&quot;, ac.ID, ac.ArticleTypeID)), nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that this only adds the &lt;code&gt;ID&lt;/code&gt; and &lt;code&gt;ArticleTypeID&lt;/code&gt; fields. I don't know what&#xA;the &lt;code&gt;ArticleCovers&lt;/code&gt; and &lt;code&gt;Address&lt;/code&gt; types look like, but often you want to call&#xA;the same methods on that:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (ac ArticleCovers) MarshalBinary() ([]byte, error) {&#xA;    covers, err := ac.Covers.MarshalBinary()&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    address, err := ac.Address.MarshalBinary()&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;&#xA;    return []byte(fmt.Sprintf(&quot;%v-%v-%v-%v&quot;,&#xA;        ac.ID, ac.ArticleTypeID, covers, address)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I don't know if this format makes sense for your data. You may want to use a&#xA;defined encoding format such as json.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You will probably also want to implement the &lt;code&gt;BinaryUnmarshaler&lt;/code&gt; interface.&#xA;Doing that is left as an exercise ;-)&lt;/p&gt;&#xA;"" OwnerUserId=""660921"" LastActivityDate=""2017-06-27T05:29:51.550"" CommentCount=""0"" />
",44772811
44773082,"44773082      <row Id=""44773082"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44773645"" PostTypeId=""2"" ParentId=""44773082"" CreationDate=""2017-06-27T06:33:54.260"" Score=""1"" Body=""&lt;ul&gt;&#xA;&lt;li&gt;If you don't know the keys, you can use &lt;code&gt;map[string]interface{}&lt;/code&gt; to unmarshal your JSON payload.&lt;/li&gt;&#xA;&lt;li&gt;If you use &lt;code&gt;json:&quot;-&quot;&lt;/code&gt; tag for the &lt;code&gt;struct&lt;/code&gt; fields, those fields will be ignored during JSON Marshal/Unmarshal.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;You can try following options: &lt;a href=&quot;https://play.golang.org/p/30ko3Z14Mx&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground link&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Option 1:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var grades map[string]interface{}&#xA;&#xA;err := json.Unmarshal([]byte(jsonString), &amp;amp;grades)&#xA;fmt.Println(err)&#xA;&#xA;fmt.Printf(&quot;%#v\n&quot;, grades)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Option 2:&lt;/strong&gt; if you want have &lt;code&gt;struct&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var gradesData GradeData&#xA;err := json.Unmarshal([]byte(jsonString), &amp;amp;gradesData.Grades)&#xA;fmt.Println(err)&#xA;&#xA;fmt.Printf(&quot;%#v\n&quot;, gradesData)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-06-27T06:33:54.260"" CommentCount=""0"" />
",44773645
44774514,"44774514      <row Id=""44774514"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44774651"" PostTypeId=""2"" ParentId=""44774514"" CreationDate=""2017-06-27T07:36:41.077"" Score=""2"" Body=""&lt;p&gt;If I understand correctly, the issue you're having is that the random number appears to always have the same number of digits as the maximum allowed value, right? When I run the code, this is not the case. Here's an output I just observed:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;3859736307910539847452366166956263595094585475969163479420172104717272049811&#xA;65719900872761032562423535702578352960653752260368991759410130265294153783&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In the playground, I believe the random seed and clock time are fixed, so you'll see the same result repeatedly. But running locally, I see the expected variation in the length of the output.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may wonder why you can run this code a bunch of times and observe that the length of the random number is very often close to the length of the maximum value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A little math explains this. Let's imagine we're picking a number between 0 and 999. How many numbers in that range have:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;3 digits? 900 (100-999)&lt;/li&gt;&#xA;&lt;li&gt;2 digits? 90 (10-99)&lt;/li&gt;&#xA;&lt;li&gt;1 digit? 10 (0-9)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Similarly, with your very large maximum value, most of the numbers that can be picked will be very close to that maximum length. It will be rare to see a number two digits short of that length. (You should see them on the order of 1% of the time.)&lt;/p&gt;&#xA;"" OwnerUserId=""94559"" LastEditorUserId=""94559"" LastEditDate=""2017-06-27T07:45:33.953"" LastActivityDate=""2017-06-27T07:45:33.953"" CommentCount=""3"" />
",44774651
44779319,"44779319      <row Id=""44779319"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44779409"" PostTypeId=""2"" ParentId=""44779319"" CreationDate=""2017-06-27T11:41:43.793"" Score=""3"" Body=""&lt;p&gt;The &lt;a href=&quot;https://golang.org/pkg/encoding/json/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;encoding/json&lt;/code&gt;&lt;/a&gt; package can't magically guess what type you want the result unmarshaled into, unless you tell it to.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One way of telling what to unmarsal into is to pass value of that type to the &lt;code&gt;json.Unmarshal()&lt;/code&gt; function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And unfortunately there is no other way. If you pass a value of &lt;code&gt;interface{}&lt;/code&gt; type, the &lt;code&gt;json&lt;/code&gt; package implementation is free to choose a type of its choice, and it will choose &lt;code&gt;map[string]interface{}&lt;/code&gt; for JSON objects, and &lt;code&gt;[]interface{}&lt;/code&gt; for JSON arrays. This is documented at &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Unmarshal&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json.Unmarshal()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;To unmarshal JSON into an interface value, Unmarshal stores one of these in the interface value:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bool, for JSON booleans&#xA;float64, for JSON numbers&#xA;string, for JSON strings&#xA;[]interface{}, for JSON arrays&#xA;map[string]interface{}, for JSON objects&#xA;nil for JSON null&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;If you know the type beforehand, create a value of that type, and pass that for unmarshaling. Whether your store this in an &lt;code&gt;interface{}&lt;/code&gt; variable beforehand does not matter; if the passed value is suitable for unmarshaling, it will be used. Note that the passed value will be wrapped in an &lt;code&gt;interface{}&lt;/code&gt; if not already of that type, as that is the parameter type of &lt;code&gt;json.Unmarshal()&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The problem why your code fails is because you pass a value of type &lt;code&gt;*interface{}&lt;/code&gt; which wraps a non-pointer &lt;code&gt;Foo&lt;/code&gt; value. Since the &lt;code&gt;json&lt;/code&gt; package can't use this, it creates a new value of its choice (a map).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead you should wrap a &lt;code&gt;*Foo&lt;/code&gt; value in an &lt;code&gt;interface{}&lt;/code&gt;, and pass that:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func getFoo() interface{} {&#xA;    return &amp;amp;Foo{&quot;bar&quot;}&#xA;}&#xA;&#xA;func main() {&#xA;    fooInterface := getFoo()&#xA;&#xA;    myJSON := `{&quot;bar&quot;:&quot;This is the new value of bar&quot;}`&#xA;    jsonBytes := []byte(myJSON)&#xA;&#xA;    err := json.Unmarshal(jsonBytes, fooInterface)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;    fmt.Printf(&quot;%T %+v&quot;, fooInterface, fooInterface)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This results in (try it on the &lt;a href=&quot;https://play.golang.org/p/Ys4AesTgAA&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;*main.Foo &amp;amp;{Bar:This is the new value of bar}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-27T12:02:39.843"" LastActivityDate=""2017-06-27T12:02:39.843"" CommentCount=""3"" />
",44779409
44780166,"44780166      <row Id=""44780166"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44780779"" PostTypeId=""2"" ParentId=""44780166"" CreationDate=""2017-06-27T12:51:27.070"" Score=""2"" Body=""&lt;p&gt;The Go template is executed and rendered at &lt;strong&gt;server side&lt;/strong&gt;, in / by your Go app.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;When&lt;/em&gt; you select something in the School drop-down list, that happens at &lt;strong&gt;client side&lt;/strong&gt;, in the browser.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The browser cannot execute Go templates. So basically you have 2 options:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1) When the user changes selection of the Schools drop-down, re-render the page. This involves sending a new HTTP request, you may provide the ID of the selected Scool in a URL parameter for example, and the Go template may render only the Students of the selected school in the 2nd drop-down list.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2) You may implement this at client side, using JavaScript code. For this, you would need to include all students of all schools in the rendered HTML page, e.g. in JavaScript arrays, and use JavaScript code to change the content of the Students drop-down list.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Read related questions:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28751637/referencing-go-array-in-javascript/28753476#28753476&quot;&gt;Referencing Go array in Javascript&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/41197376/interactive-web-pages-in-go/41198615#41198615&quot;&gt;Interactive web pages in Go&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/37118281/dynamically-refresh-a-part-of-the-template-when-a-variable-is-updated-golang/37119014#37119014&quot;&gt;Dynamically refresh a part of the template when a variable is updated golang&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/41136000/creating-load-more-button-in-golang-with-templates/41138344#41138344&quot;&gt;Creating load more button in Golang with templates&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-06-27T13:55:26.550"" LastActivityDate=""2017-06-27T13:55:26.550"" CommentCount=""4"" />
",44780779
44782807,"44782807      <row Id=""44782807"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44783161"" PostTypeId=""2"" ParentId=""44782807"" CreationDate=""2017-06-27T14:39:58.130"" Score=""1"" Body=""&lt;p&gt;You have a few issues.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;You aren't importing the &lt;strong&gt;testing&lt;/strong&gt; package. This should be in the bootstrap file generated by Ginkgo.&lt;/li&gt;&#xA;&lt;li&gt;The bootstrap file should also include as a parameter the testing.T function. e.g. &lt;code&gt;(t *testing.T)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;It looks like you skipped a step or two in the Ginkgo process, resulting in a prior dependency not existing. e.g. the bootstrap/stub.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Additionally, after a lot of comments by several people. You likely need to read the Ginkgo docs, to be sure you are following their process properly to get your tests setup properly.&lt;/p&gt;&#xA;"" OwnerUserId=""584547"" LastEditorUserId=""584547"" LastEditDate=""2017-06-27T15:24:11.990"" LastActivityDate=""2017-06-27T15:24:11.990"" CommentCount=""7"" />
",44783161
44782680,"44782680      <row Id=""44782680"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44783465"" PostTypeId=""2"" ParentId=""44782680"" CreationDate=""2017-06-27T14:52:41.417"" Score=""0"" Body=""&lt;p&gt;Does the directory &lt;code&gt;/assets&lt;/code&gt; exist? Note that &lt;code&gt;/assets&lt;/code&gt; is an absolute path, so it must be at the root of your filesystem. If you want something in the working directory where you're executing your program, you should use &lt;code&gt;./assets&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-27T14:52:41.417"" CommentCount=""1"" />
",44783465
44784676,"44784676      <row Id=""44784676"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44784809"" PostTypeId=""2"" ParentId=""44784676"" CreationDate=""2017-06-27T15:54:45.730"" Score=""1"" Body=""&lt;p&gt;When doing this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;now := MysqlTime(time.Now())&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It tries to convert a &lt;code&gt;Time&lt;/code&gt; to your &lt;code&gt;MysqlTime&lt;/code&gt; type (which throws an error).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Did you mean to actually initialize the inner &lt;code&gt;Time&lt;/code&gt; attribute, like so?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;now := MysqlTime{time.Now()}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-06-27T15:54:45.730"" CommentCount=""0"" />
",44784809
44786643,"44786643      <row Id=""44786643"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44786690"" PostTypeId=""2"" ParentId=""44786643"" CreationDate=""2017-06-27T17:44:35.087"" Score=""2"" Body=""&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/os/exec/#Command&quot; rel=&quot;nofollow noreferrer&quot;&gt;Per the documentation&lt;/a&gt;, the first argument passed to &lt;code&gt;exec.Command&lt;/code&gt; is the name of an executable - that's it. It's not interpreted by the shell; it's the name of an executable you want to fork. If you need to pass in arguments, you can pass them in as &lt;em&gt;additional&lt;/em&gt; parameters to &lt;code&gt;Command&lt;/code&gt;, or you can pass them to the returned object afterward.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your case, you're using two commands and piping the stdout of one to the stdin of another. You could do this in pure Go (piping the Stdout reader of one to the Stdin writer of the other), or you could rely on the shell to do it. In the latter case, your executable would be &lt;code&gt;sh&lt;/code&gt; or &lt;code&gt;bash&lt;/code&gt;, and the arguments would be &lt;code&gt;[&quot;-c&quot;, &quot;pidof tor | xargs kill -HUP&quot;]&lt;/code&gt;. For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cmd := exec.Command(&quot;bash&quot;, &quot;-c&quot;, &quot;pidof tor | xargs kill -HUP&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-27T17:44:35.087"" CommentCount=""0"" />
",44786690
44787465,"44787465      <row Id=""44787465"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44787609"" PostTypeId=""2"" ParentId=""44787465"" CreationDate=""2017-06-27T18:40:50.350"" Score=""1"" Body=""&lt;pre&gt;&lt;code&gt; gofmt -w -r '&quot;FOO_common/server/src/foo/bar&quot; -&amp;gt; &quot;foo/bar&quot;' *.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will just look for the strings as they are, and replace them with the new string.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you need more advanced functionality such as wildcards, you might want to look at this other tool:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/rogpeppe/govers&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/rogpeppe/govers&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastEditorUserId=""4907630"" LastEditDate=""2017-06-27T18:45:39.207"" LastActivityDate=""2017-06-27T18:45:39.207"" CommentCount=""2"" />
",44787609
44789336,"44789336      <row Id=""44789336"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44789675"" PostTypeId=""2"" ParentId=""44789336"" CreationDate=""2017-06-27T20:54:24.863"" Score=""8"" Body=""&lt;p&gt;This seems to work&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;unicode.Is(unicode.Cyrillic, r) // r is a rune&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2210667"" LastActivityDate=""2017-06-27T20:54:24.863"" CommentCount=""1"" />
",44789675
44790504,"44790504      <row Id=""44790504"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44790925"" PostTypeId=""2"" ParentId=""44790504"" CreationDate=""2017-06-27T22:28:28.463"" Score=""0"" Body=""&lt;p&gt;Thanks to @JimB's comment I realized my Mac had an old version of the &lt;code&gt;ipv4&lt;/code&gt; package installed. After updating I was able to fix the code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's a complete working version:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;  &quot;fmt&quot;&#xA;  &quot;net&quot;&#xA;  &quot;bufio&quot;&#xA;  &quot;golang.org/x/net/ipv4&quot;&#xA;)&#xA;&#xA;const Host = &quot;google.com&quot;&#xA;&#xA;func main() {&#xA;  var err error&#xA;  conn, err := net.Dial(&quot;tcp4&quot;, Host + &quot;:80&quot;)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  defer conn.Close()&#xA;&#xA;  if err = ipv4.NewConn(conn).SetTTL(5); err != nil {&#xA;      panic(err)&#xA;  }&#xA;&#xA;  fmt.Fprint(conn, fmt.Sprintf(&quot;GET / HTTP/1.1\r\nHost: %v\r\n\r\n&quot;, Host))&#xA;  firstLine, err := bufio.NewReader(conn).ReadString('\n')&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  fmt.Println(firstLine)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here is the output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;HTTP/1.1 301 Moved Permanently&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8222849"" LastEditorUserId=""8222849"" LastEditDate=""2017-06-28T00:07:26.853"" LastActivityDate=""2017-06-28T00:07:26.853"" CommentCount=""0"" />
",44790925
44699463,"44699463      <row Id=""44699463"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44791273"" PostTypeId=""2"" ParentId=""44699463"" CreationDate=""2017-06-27T23:04:23.303"" Score=""2"" Body=""&lt;p&gt;The context you received contains the cancellation and timeout, so it would be good to use the same context to make the new RPC. Otherwise you need to manually pass these signals.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A side on the metadata, metadata in the received context will not be automatically forwarded to the new RPC, see:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/grpc/grpc-go/issues/1148&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/grpc/grpc-go/issues/1148&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/grpc/grpc-go/pull/1157&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/grpc/grpc-go/pull/1157&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""7371810"" LastActivityDate=""2017-06-27T23:04:23.303"" CommentCount=""0"" />
",44791273
44785181,"44785181      <row Id=""44785181"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44791823"" PostTypeId=""2"" ParentId=""44785181"" CreationDate=""2017-06-28T00:12:31.423"" Score=""0"" Body=""&lt;p&gt;I hope this helps! Runnable version is at &lt;a href=&quot;https://play.golang.org/p/-8shx_IcLV&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/-8shx_IcLV&lt;/a&gt;. Also note that you'll need to fix your &lt;code&gt;%x&lt;/code&gt; (should be &lt;code&gt;%s&lt;/code&gt;) so you're sending the right challenge down to the client. Right now I think you're trying to hex-encode your base64 string.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Once you've fixed that, I believe this code should help you to construct the right response string on the server and compare it to what the client sent.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Example values taken from http://susam.in/blog/auth-cram-md5/&#xA;&#xA;challenge := []byte(&quot;&amp;lt;17893.1320679123@tesseract.susam.in&amp;gt;&quot;)&#xA;username := []byte(&quot;alice&quot;)&#xA;password := []byte(&quot;wonderland&quot;)&#xA;clientResponse := []byte(&quot;YWxpY2UgNjRiMmE0M2MxZjZlZDY4MDZhOTgwOTE0ZTIzZTc1ZjA=&quot;)&#xA;&#xA;// hash the challenge with the user's password&#xA;h := hmac.New(md5.New, password)&#xA;h.Write(challenge)&#xA;hash := h.Sum(nil)&#xA;&#xA;// encode the result in lowercase hexadecimal&#xA;hexEncoded := hex.EncodeToString(hash)&#xA;&#xA;// prepend the username and a space&#xA;toEncode := []byte(string(username) + &quot; &quot; + hexEncoded)&#xA;&#xA;// base64-encode the whole thing&#xA;b64Result := make([]byte, base64.StdEncoding.EncodedLen(len(toEncode)))&#xA;base64.StdEncoding.Encode(b64Result, toEncode)&#xA;&#xA;// check that this is equal to what the client sent&#xA;if hmac.Equal(b64Result, clientResponse) {&#xA;    fmt.Println(&quot;Matches!&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""94559"" LastActivityDate=""2017-06-28T00:12:31.423"" CommentCount=""1"" />
",44791823
44793019,"44793019      <row Id=""44793019"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44794861"" PostTypeId=""2"" ParentId=""44793019"" CreationDate=""2017-06-28T06:11:50.137"" Score=""2"" Body=""&lt;p&gt;As &lt;a href=&quot;https://golang.org/pkg/time/#Ticker.Stop&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation&lt;/a&gt; says, ticker.Stop doesn't close channel. So you must not expect break-loop. You can add new channel for quit.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    intChan := make(chan int, 2)&#xA;    ticker := time.NewTicker(time.Second)&#xA;    quit := make(chan bool)&#xA;    go func() {&#xA;    loop:&#xA;        for {&#xA;            select {&#xA;            case &amp;lt;-ticker.C:&#xA;                select {&#xA;                case intChan &amp;lt;- 1:&#xA;                case intChan &amp;lt;- 2:&#xA;                case intChan &amp;lt;- 3:&#xA;                }&#xA;            case &amp;lt;-quit:&#xA;                break loop&#xA;            }&#xA;        }&#xA;        /*defer */&#xA;        fmt.Println(&quot;End. [sender]&quot;)&#xA;        close(intChan)&#xA;    }()&#xA;    var sum int&#xA;    for e := range intChan {&#xA;        fmt.Printf(&quot;Received: %v\n&quot;, e)&#xA;        sum += e&#xA;        if sum &amp;gt; 10 {&#xA;            fmt.Printf(&quot;Got: %v\n&quot;, sum)&#xA;            quit &amp;lt;- true&#xA;            //break&#xA;            //ticker.Stop()&#xA;        }&#xA;    }&#xA;    fmt.Println(&quot;End. [receiver]&quot;)&#xA;    //time.Sleep(10)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""720391"" LastActivityDate=""2017-06-28T06:11:50.137"" CommentCount=""0"" />
",44794861
44795041,"44795041      <row Id=""44795041"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44796528"" PostTypeId=""2"" ParentId=""44795041"" CreationDate=""2017-06-28T07:47:26.993"" Score=""1"" Body=""&lt;p&gt;You're using two different &lt;code&gt;logrus.Logger&lt;/code&gt; variables in your code. The first, which is called in &lt;code&gt;init()&lt;/code&gt; is the global default Logger that gets exported from logrus. Later, in your custom initialization function &lt;code&gt;Init(logLevel int)&lt;/code&gt;, you're creating a new Logger via &lt;code&gt;logrus.New()&lt;/code&gt; which is from then on used for logging — but hasn't been configured to use a different output.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'd suggest to get rid of the init() function and do all the initialization in your &lt;code&gt;Init(logLevel int)&lt;/code&gt; (please note the different API for setting the output).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func Init(logLevl int) {&#xA;    log = logrus.New()&#xA;    log.Formatter = &amp;amp;logrus.TextFormatter{FullTimestamp: true}&#xA;    switch logLevl {&#xA;    case DEBUG:&#xA;        log.Level = logrus.DebugLevel&#xA;    case INFO:&#xA;        log.Level = logrus.InfoLevel&#xA;    case WARNING:&#xA;        log.Level = logrus.WarnLevel&#xA;    case ERROR:&#xA;        log.Level = logrus.ErrorLevel&#xA;    }&#xA;&#xA;    env := os.Getenv(&quot;ENV&quot;)&#xA;    if env != &quot;test&quot; {&#xA;        return&#xA;    }&#xA;    log.Out = ioutil.Discard&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4445"" LastActivityDate=""2017-06-28T07:47:26.993"" CommentCount=""0"" />
",44796528
44797043,"44797043      <row Id=""44797043"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44797934"" PostTypeId=""2"" ParentId=""44797043"" CreationDate=""2017-06-28T08:54:53.987"" Score=""1"" Body=""&lt;p&gt;So I figured out what I was doing wrong. I initially had the data as a &lt;code&gt;string&lt;/code&gt;, but if I cast it to a &lt;code&gt;byte[]&lt;/code&gt; then I can update it in place. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This allowed me to use a simple &lt;code&gt;for&lt;/code&gt; loop below to solve the issue without relying on any other metric other than nth character instance&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for i := 0; i &amp;lt; len(dat); i++ {&#xA;    if dat[i] == ',' {&#xA;        count += 1&#xA;    }&#xA;    if count%6 == 0 &amp;amp;&amp;amp; dat[i] == ',' {&#xA;        dat[i] = '\n'&#xA;        count = 0&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5050584"" LastActivityDate=""2017-06-28T08:54:53.987"" CommentCount=""3"" />
",44797934
44723936,"44723936      <row Id=""44723936"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44800187"" PostTypeId=""2"" ParentId=""44723936"" CreationDate=""2017-06-28T10:39:29.290"" Score=""0"" Body=""&lt;p&gt;go path is not set.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;find installed directory of go lang. (e.g linux )&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;whereis go&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;then export below var.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;export GOPATH=$HOME/go export PATH=$PATH:$GOPATH/bin&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;these exported variable scope is limited to current terminal only so better to set into file &lt;strong&gt;~/.bashrc&lt;/strong&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5234133"" LastActivityDate=""2017-06-28T10:39:29.290"" CommentCount=""0"" />
",44800187
44800093,"44800093      <row Id=""44800093"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44800253"" PostTypeId=""2"" ParentId=""44800093"" CreationDate=""2017-06-28T10:42:52.740"" Score=""1"" Body=""&lt;p&gt;The Go documentation of the &lt;code&gt;html/template&lt;/code&gt; package explains the behaviour (&lt;a href=&quot;https://golang.org/pkg/html/template/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/html/template/&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The security model used by this package assumes that template authors are trusted, while Execute's data parameter is not. More details are provided below.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The thing about this is that you should really think twice about &lt;strong&gt;why&lt;/strong&gt; you don't want Go to apply this security behaviour to your template.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then, if you're really sure you don't want to escape the string use &lt;code&gt;template.URL&lt;/code&gt; intead of a string: &lt;a href=&quot;https://play.golang.org/p/kfv2tH6WDG&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/kfv2tH6WDG&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""302646"" LastEditorUserId=""302646"" LastEditDate=""2017-06-28T11:13:17.363"" LastActivityDate=""2017-06-28T11:13:17.363"" CommentCount=""3"" />
",44800253
44803367,"44803367      <row Id=""44803367"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44803578"" PostTypeId=""2"" ParentId=""44803367"" CreationDate=""2017-06-28T13:14:56.893"" Score=""4"" Body=""&lt;p&gt;This is the exact purpose behind cancellable contexts. Take a look at the example for &lt;a href=&quot;https://golang.org/pkg/context/#WithCancel&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;context.WithCancel&lt;/code&gt;&lt;/a&gt;, it shows how to do exactly what you describe.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-28T13:14:56.893"" CommentCount=""1"" />
",44803578
44804276,"44804276      <row Id=""44804276"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44804675"" PostTypeId=""2"" ParentId=""44804276"" CreationDate=""2017-06-28T13:59:55.627"" Score=""0"" Body=""&lt;p&gt;The results in PHP and Go are different because, as the documentation for each states, &lt;a href=&quot;http://php.net/manual/en/function.chr.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;PHP's chr&lt;/a&gt; returns the ASCII character for its argument, whereas &lt;a href=&quot;https://golang.org/ref/spec#Conversions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go's rune&lt;/a&gt; &lt;a href=&quot;https://golang.org/ref/spec#Rune_literals&quot; rel=&quot;nofollow noreferrer&quot;&gt;uses UTF-8&lt;/a&gt;. Below 127, ASCII and UTF-8 are the same, but above that, they differ.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-28T13:59:55.627"" CommentCount=""0"" />
",44804675
44805907,"44805907      <row Id=""44805907"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44806148"" PostTypeId=""2"" ParentId=""44805907"" CreationDate=""2017-06-28T14:59:53.933"" Score=""0"" Body=""&lt;p&gt;If you're already using Nginx, you can very easily set up named-based reverse proxy vhosts for the apps that aren't on port 80:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;server {&#xA;    listen *:80;&#xA;    server_name nodeapp.mydomain.com;&#xA;    location / {&#xA;        proxy_pass http://localhost:3000;&#xA;    }&#xA;}&#xA;&#xA;server {&#xA;    listen *:80;&#xA;    server_name goapp.mydomain.com;&#xA;    location / {&#xA;        proxy_pass http://localhost:5000;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""453002"" LastActivityDate=""2017-06-28T14:59:53.933"" CommentCount=""6"" />
",44806148
44806115,"44806115      <row Id=""44806115"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44806421"" PostTypeId=""2"" ParentId=""44806115"" CreationDate=""2017-06-28T15:11:25.137"" Score=""2"" Body=""&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/net/#FileListener&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;net.FileListener&lt;/code&gt;&lt;/a&gt; is used to turn a file descriptor into a &lt;code&gt;net.Listener&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;f := os.NewFile(sockfd, &quot;from parent&quot;)&#xA;l, err := net.FileListener(f)&#xA;if err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""32880"" LastActivityDate=""2017-06-28T15:11:25.137"" CommentCount=""0"" />
",44806421
44807030,"44807030      <row Id=""44807030"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44807809"" PostTypeId=""2"" ParentId=""44807030"" CreationDate=""2017-06-28T16:18:20.493"" Score=""0"" Body=""&lt;p&gt;As pointed in the comments by Adrian, the 'problem' is simply solved by sorting by cumulative instead of flat, for example using &lt;code&gt;top10 -cum&lt;/code&gt; &lt;/p&gt;&#xA;"" OwnerUserId=""5817539"" LastActivityDate=""2017-06-28T16:18:20.493"" CommentCount=""0"" />
",44807809
44806362,"44806362      <row Id=""44806362"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44807928"" PostTypeId=""2"" ParentId=""44806362"" CreationDate=""2017-06-28T16:24:11.633"" Score=""2"" Body=""&lt;p&gt;I think the error you're making is treating binary as character data and using character data APIs. Many of those APIs &lt;strong&gt;stop&lt;/strong&gt; at the first nil byte (0), but that is a totally valid value in protobuf binary.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You need to make sure you don't use any such APIs basically - stick purely to binary safe APIs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since you indicate that &lt;code&gt;size&lt;/code&gt; is 27, this all fits.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Basically, the binary representation of 5.0 includes 0 bytes, but you could easily have seen the same problem for other values in time.&lt;/p&gt;&#xA;"" OwnerUserId=""23354"" LastActivityDate=""2017-06-28T16:24:11.633"" CommentCount=""2"" />
",44807928
44810434,"44810434      <row Id=""44810434"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44810458"" PostTypeId=""2"" ParentId=""44810434"" CreationDate=""2017-06-28T18:54:39.307"" Score=""2"" Body=""&lt;p&gt;You need to set the correct working directory in your script using &lt;code&gt;WorkingDirectory=&lt;/code&gt; - presumably:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;WorkingDirectory=/var/www/html/scarga.local&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-28T18:54:39.307"" CommentCount=""1"" />
",44810458
44790847,"44790847      <row Id=""44790847"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44811887"" PostTypeId=""2"" ParentId=""44790847"" CreationDate=""2017-06-28T20:21:33.037"" Score=""1"" Body=""&lt;p&gt;Vertex attributes are conceptually always 4 component vectors. There is no requirement that the number of components you use in the shader and the one you set up for the attribute pointer have to match. If your array has more components than your shader consumes, the additional components are just ignored. If your array supplies less components, the attribute is filled to a vector of the form (0,0,0,1) (which makes sense for homogeneous position vectors as well as RGBA colors).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the usual case, you want &lt;code&gt;w=1&lt;/code&gt; for every input position anyway, there is no need to store that in an array. But you usually need the full 4D form when applying the transformation matrices (or even when directly forwarding the value as &lt;code&gt;gl_Position&lt;/code&gt;). So your shader could conceptually do&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;in vec3 pos;&#xA;gl_Position=vec4(pos,1);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;but that would be equivalent of just writing&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;in vec4 pos;&#xA;gl_Position=pos;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2327517"" LastActivityDate=""2017-06-28T20:21:33.037"" CommentCount=""0"" />
",44811887
44812324,"44812324      <row Id=""44812324"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44812828"" PostTypeId=""2"" ParentId=""44812324"" CreationDate=""2017-06-28T21:27:38.280"" Score=""7"" Body=""&lt;p&gt;You could use a &lt;code&gt;map[string]command&lt;/code&gt; similar to how the &lt;code&gt;net/http&lt;/code&gt; package registers handlers. Something akin to this:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/9YzHyLodAQ&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/9YzHyLodAQ&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;errors&quot;&#xA;)&#xA;&#xA;type BotFunc func(string) (string, error)&#xA;&#xA;type BotMap map[string]BotFunc&#xA;&#xA;var Bot = BotMap{}&#xA;&#xA;func (b BotMap) RegisterCommand(command string, f BotFunc) error {&#xA;    if _, exists := b[command]; exists {&#xA;        return errors.New(&quot;command already exists&quot;)&#xA;    }&#xA;    b[command] = f&#xA;    return nil&#xA;}&#xA;&#xA;func (b BotMap) Execute(statement string) (string, error) {&#xA;    // parse out command and query however you choose (not this way obviously)&#xA;    command := statement[:9]&#xA;    query := statement[10:]&#xA;&#xA;    return b.ExecuteQuery(command, query)&#xA;}&#xA;&#xA;func (b BotMap) ExecuteQuery(command, query string) (string, error) {&#xA;    if com, exists := b[command]; exists {&#xA;        return com(query)&#xA;    }&#xA;    return &quot;&quot;, errors.New(&quot;command doesn't exist&quot;)&#xA;&#xA;}&#xA;&#xA;func main() {&#xA;    err := Bot.RegisterCommand(&quot;search me&quot;, func(query string) (string, error) {&#xA;        fmt.Println(&quot;search&quot;, query)&#xA;        return &quot;searched&quot;, nil&#xA;    })&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    err = Bot.RegisterCommand(&quot;thesaurus me&quot;, func(query string) (string, error) {&#xA;        fmt.Println(&quot;thesaurus&quot;, query)&#xA;        return &quot;thesaurused&quot;, nil&#xA;    })&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;&#xA;    result, err := Bot.Execute(&quot;search me please&quot;)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    fmt.Println(result)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Obviously there's a lot of checks missing here, but this is the basic idea.&lt;/p&gt;&#xA;"" OwnerUserId=""1276480"" LastEditorUserId=""1276480"" LastEditDate=""2017-06-30T11:19:50.253"" LastActivityDate=""2017-06-30T11:19:50.253"" CommentCount=""5"" />
",44812828
44805984,"44805984      <row Id=""44805984"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44813472"" PostTypeId=""2"" ParentId=""44805984"" CreationDate=""2017-06-28T22:22:32.787"" Score=""2"" Body=""&lt;p&gt;Adrian is correct. To take it a step further, you can only do anything with interfaces if you know the type that implements that interface. The empty interface, &lt;code&gt;interface{}&lt;/code&gt; isn't really an &quot;anything&quot; value like is commonly misunderstood; it is just an interface that is immediately satisfied by all types.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Therefore, you can only get values from it or create a new &quot;interface&quot; with added values by knowing the type satisfying the empty interface before and after the addition.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The closest you can come to doing what you want, given the static typing, is by embedding the before type in the after type, so that everything can still be accessed at the root of the after type. The following illustrates this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/JdF7Uevlqp&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/JdF7Uevlqp&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type Before struct {&#xA;    m map[string]string&#xA;}&#xA;&#xA;type After struct {&#xA;    Before&#xA;    s []string&#xA;}&#xA;&#xA;func contrivedAfter(b interface{}) interface{} {&#xA;    return After{b.(Before), []string{&quot;new value&quot;}}&#xA;}&#xA;&#xA;func main() {&#xA;    b := Before{map[string]string{&quot;some&quot;: &quot;value&quot;}}&#xA;    a := contrivedAfter(b).(After)&#xA;    fmt.Println(a.m)&#xA;    fmt.Println(a.s)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Additionally, since the data you are passing to the template does not require you to specify the type, you could use an anonymous struct to accomplish something very similar.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/3KUfHULR84&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/3KUfHULR84&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type Before struct {&#xA;    m map[string]string&#xA;}&#xA;&#xA;func contrivedAfter(b interface{}) interface{} {&#xA;    return struct{&#xA;        Before&#xA;        s []string&#xA;    }{b.(Before), []string{&quot;new value&quot;}}&#xA;}&#xA;&#xA;func main() {&#xA;    b := Before{map[string]string{&quot;some&quot;: &quot;value&quot;}}&#xA;    a := contrivedAfter(b)&#xA;    fmt.Println(a)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2081835"" LastEditorUserId=""2081835"" LastEditDate=""2017-06-28T22:29:45.630"" LastActivityDate=""2017-06-28T22:29:45.630"" CommentCount=""1"" />
",44813472
44813598,"44813598      <row Id=""44813598"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44813913"" PostTypeId=""2"" ParentId=""44813598"" CreationDate=""2017-06-28T23:09:07.883"" Score=""0"" Body=""&lt;p&gt;You have two problems:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;A variadic function takes multiple args (fmt.Println, for example, takes multiple interface{}). You're sending an array.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;An array which is size [2] is not the same as size [] (yes, size of array is part of the type in go).&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;What you want is something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    for n := range merge(res[:]) {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func merge(cs []&amp;lt;-chan int) &amp;lt;-chan int {&#xA;out := make(chan int)&#xA;var wg sync.WaitGroup&#xA;wg.Add(len(cs))&#xA;for _, c := range cs {&#xA;    go func(ch &amp;lt;-chan int) {&#xA;        for n := range ch {&#xA;            out &amp;lt;- n&#xA;        }&#xA;        wg.Done()&#xA;    }(c)&#xA;}&#xA;go func() {&#xA;    wg.Wait()&#xA;    close(out)&#xA;}()&#xA;return out&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;}&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/zTrrsRkKJV&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/zTrrsRkKJV&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5849285"" LastEditorUserId=""5849285"" LastEditDate=""2017-06-28T23:12:31.900"" LastActivityDate=""2017-06-28T23:12:31.900"" CommentCount=""1"" />
",44813913
44814963,"44814963      <row Id=""44814963"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44815038"" PostTypeId=""2"" ParentId=""44814963"" CreationDate=""2017-06-29T01:40:45.473"" Score=""1"" Body=""&lt;p&gt;The &lt;code&gt;InitStmt&lt;/code&gt; (initialization statement) of your &lt;a href=&quot;https://golang.org/ref/spec#For_statements&quot; rel=&quot;nofollow noreferrer&quot;&gt;For Statement&lt;/a&gt; isn't actually doing any initialization.  You're asking the compiler to evaluate &lt;code&gt;n&lt;/code&gt; but not do anything with it, which is what the compiler is complaining about.  Since you don't need to initialize &lt;code&gt;n&lt;/code&gt; for you loop, just do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for ; n &amp;lt; localMax; n++ {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1427098"" LastActivityDate=""2017-06-29T01:40:45.473"" CommentCount=""1"" />
",44815038
44818867,"44818867      <row Id=""44818867"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44820581"" PostTypeId=""2"" ParentId=""44818867"" CreationDate=""2017-06-29T08:57:48.643"" Score=""1"" Body=""&lt;p&gt;It's intended behavior, and is configurable. By default, &lt;code&gt;Gorilla&lt;/code&gt; mux will do path cleaning, i.e. removing double slash etc. for new router. You can left the double slash as is by:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;router.SkipClean(true)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;a href=&quot;https://godoc.org/github.com/gorilla/mux#Router.SkipClean&quot; rel=&quot;nofollow noreferrer&quot;&gt;SkipClean&lt;/a&gt; documentation says:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;...&lt;br&gt;&#xA;  When true, if the route path is &quot;/path//to&quot;, it will remain with the double slash. This is helpful if you have a route like: &lt;code&gt;/fetch/http://xkcd.com/534/&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-06-29T08:57:48.643"" CommentCount=""0"" />
",44820581
44822381,"44822381      <row Id=""44822381"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44822438"" PostTypeId=""2"" ParentId=""44822381"" CreationDate=""2017-06-29T10:19:24.303"" Score=""2"" Body=""&lt;p&gt;Check the bool value return from &lt;a href=&quot;https://godoc.org/context#Context&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;context.Deadline&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Deadline returns the time when work done on behalf of this context&#xA;  should be canceled. Deadline returns ok==false when no deadline is&#xA;  set. Successive calls to Deadline return the same results.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (c *Client) Send(ctx context.Context, r *http.Request) (int, []byte, error) {&#xA;    if _, deadlineSet := ctx.Deadline(); !deadlineSet {&#xA;        ctx, _ = context.WithTimeout(ctx, c.timeout)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""142162"" LastActivityDate=""2017-06-29T10:19:24.303"" CommentCount=""0"" />
",44822438
44829665,"44829665      <row Id=""44829665"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44829959"" PostTypeId=""2"" ParentId=""44829665"" CreationDate=""2017-06-29T15:56:09.710"" Score=""1"" Body=""&lt;p&gt;As far as I know, It's impossible since go can't unload shared library. When created some objects in the plugin, and it's referenced from program, it can't do garbage collect. See this issue: &lt;a href=&quot;https://github.com/golang/go/issues/11100&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/golang/go/issues/11100&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""720391"" LastActivityDate=""2017-06-29T15:56:09.710"" CommentCount=""0"" />
",44829959
44833044,"44833044      <row Id=""44833044"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44833099"" PostTypeId=""2"" ParentId=""44833044"" CreationDate=""2017-06-29T19:06:17.913"" Score=""6"" Body=""&lt;p&gt;&lt;code&gt;del&lt;/code&gt; is not an executable, it's a built-in command. &lt;code&gt;exec.Command&lt;/code&gt; allows you to fork out to another executable. To use shell commands, you would have to call the shell executable, and pass in the built-in command (and parameters) you want executed:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cmd := exec.Command(&quot;cmd.exe&quot;, &quot;/C&quot;, &quot;del C:\\trial\\now.txt&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that you also have to escape backslashes in strings as above, or use backtick-quoted strings:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cmd := exec.Command(&quot;cmd.exe&quot;, &quot;/C&quot;, `del C:\trial\now.txt`)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, if you just want to delete a file, you're probably better off using &lt;a href=&quot;https://golang.org/pkg/os/#Remove&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;os.Remove&lt;/code&gt;&lt;/a&gt; to directly delete a file rather than forking out to the shell to do so.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastEditorUserId=""7426"" LastEditDate=""2017-06-29T19:34:37.690"" LastActivityDate=""2017-06-29T19:34:37.690"" CommentCount=""2"" />
",44833099
44726753,"44726753      <row Id=""44726753"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44835443"" PostTypeId=""2"" ParentId=""44726753"" CreationDate=""2017-06-29T21:41:10.343"" Score=""1"" Body=""&lt;p&gt;According with this link: &lt;a href=&quot;http://github.com/golang/go/wiki/SettingGOPATH&quot; rel=&quot;nofollow noreferrer&quot;&gt;github.com/golang/go/wiki/SettingGOPATH&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is needed to set GOBIN path in bash file: &lt;code&gt;export GOBIN=$HOME/work/bin&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1527024"" LastActivityDate=""2017-06-29T21:41:10.343"" CommentCount=""0"" />
",44835443
44565052,"44565052      <row Id=""44565052"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44835951"" PostTypeId=""2"" ParentId=""44565052"" CreationDate=""2017-06-29T22:32:21.383"" Score=""0"" Body=""&lt;p&gt;IBM Bluemix Compose for Mongodb has a documentation available online here: &lt;a href=&quot;https://console.bluemix.net/docs/services/ComposeForMongoDB/index.html#getting-started-with-compose-for-mongodb&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://console.bluemix.net/docs/services/ComposeForMongoDB/index.html#getting-started-with-compose-for-mongodb&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Step 2 talks about connecting to your compose mongo db. There is a nodejs sample code provided in step 2. You will have to check connection string to mongodb in golang i.e. the syntax in golang. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I found out this article which explains connecting to IBM Compose mongodb from goland: &lt;a href=&quot;https://www.compose.com/articles/connect-to-mongo-3-2-on-compose-from-golang/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.compose.com/articles/connect-to-mongo-3-2-on-compose-from-golang/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;hope this helps.&lt;/p&gt;&#xA;"" OwnerUserId=""63534"" LastActivityDate=""2017-06-29T22:32:21.383"" CommentCount=""0"" />
",44835951
44816003,"44816003      <row Id=""44816003"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44839876"" PostTypeId=""2"" ParentId=""44816003"" CreationDate=""2017-06-30T06:22:26.920"" Score=""2"" Body=""&lt;p&gt;I think the example code you're referring to uses an outdated API of &lt;a href=&quot;https://github.com/dgrijalva/jwt-go/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jwt-go&lt;/a&gt;. The RS256 signing method requires the key to be a &lt;code&gt;rsa.PrivateKey&lt;/code&gt; and not a byte buffer. This means, that the private key first has to be parsed using the &lt;code&gt;jwt.ParseRSAPrivateKeyFromPEM&lt;/code&gt;function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I've updated your example below:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    tokenString, err := createSignedTokenString()&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;    fmt.Printf(&quot;Signed token string:\n%v\n&quot;, tokenString)&#xA;&#xA;    token, err := parseTokenFromSignedTokenString(tokenString)&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;    fmt.Printf(&quot;Parsed token valid = %v, raw token:\n%v\n&quot;, token.Valid, token.Raw)&#xA;}&#xA;&#xA;func createSignedTokenString() (string, error) {&#xA;    privateKey, err := ioutil.ReadFile(&quot;demo.rsa&quot;)&#xA;    if err != nil {&#xA;        return &quot;&quot;, fmt.Errorf(&quot;error reading private key file: %v\n&quot;, err)&#xA;    }&#xA;&#xA;    key, err := jwt.ParseRSAPrivateKeyFromPEM(privateKey)&#xA;    if err != nil {&#xA;        return &quot;&quot;, fmt.Errorf(&quot;error parsing RSA private key: %v\n&quot;, err)&#xA;    }&#xA;&#xA;    token := jwt.New(jwt.SigningMethodRS256)&#xA;    tokenString, err := token.SignedString(key)&#xA;    if err != nil {&#xA;        return &quot;&quot;, fmt.Errorf(&quot;error signing token: %v\n&quot;, err)&#xA;    }&#xA;&#xA;    return tokenString, nil&#xA;}&#xA;&#xA;func parseTokenFromSignedTokenString(tokenString string) (*jwt.Token, error) {&#xA;    publicKey, err := ioutil.ReadFile(&quot;demo.rsa.pub&quot;)&#xA;    if err != nil {&#xA;        return nil, fmt.Errorf(&quot;error reading public key file: %v\n&quot;, err)&#xA;    }&#xA;&#xA;    key, err := jwt.ParseRSAPublicKeyFromPEM(publicKey)&#xA;    if err != nil {&#xA;        return nil, fmt.Errorf(&quot;error parsing RSA public key: %v\n&quot;, err)&#xA;    }&#xA;&#xA;    parsedToken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {&#xA;        if _, ok := token.Method.(*jwt.SigningMethodRSA); !ok {&#xA;            return nil, fmt.Errorf(&quot;unexpected signing method: %v&quot;, token.Header[&quot;alg&quot;])&#xA;        }&#xA;        return key, nil&#xA;    })&#xA;    if err != nil {&#xA;        return nil, fmt.Errorf(&quot;error parsing token: %v&quot;, err)&#xA;    }&#xA;&#xA;    return parsedToken, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4445"" LastEditorUserId=""4445"" LastEditDate=""2017-06-30T20:08:18.583"" LastActivityDate=""2017-06-30T20:08:18.583"" CommentCount=""2"" />
",44839876
44842132,"44842132      <row Id=""44842132"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44842353"" PostTypeId=""2"" ParentId=""44842132"" CreationDate=""2017-06-30T08:48:52.887"" Score=""1"" Body=""&lt;p&gt;The API paginates the results. You should fetch the whole list in multiple requests by specifying &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;limit&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;E.g. request the list of first 30 documents with &lt;code&gt;start=0&amp;amp;limit=30&lt;/code&gt;, then the next 30 with &lt;code&gt;start=30&amp;amp;limit=30&lt;/code&gt;, and so on, until you get a response with empty list.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can read more details in &lt;a href=&quot;https://developer.atlassian.com/confdev/confluence-server-rest-api/pagination-in-the-rest-api&quot; rel=&quot;nofollow noreferrer&quot;&gt;the docs on pagination&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""6444852"" LastActivityDate=""2017-06-30T08:48:52.887"" CommentCount=""3"" />
",44842353
44842722,"44842722      <row Id=""44842722"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44843162"" PostTypeId=""2"" ParentId=""44842722"" CreationDate=""2017-06-30T09:30:28.753"" Score=""4"" Body=""&lt;p&gt;&lt;code&gt;*Item&lt;/code&gt; is a golang pointer to a struct. It cannot contain a &lt;code&gt;int16&lt;/code&gt; (that is a &quot;pointer&quot; in your json semantic).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can handle this programmatically &lt;em&gt;after&lt;/em&gt; Unmarshaling.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Struct must be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Item struct {&#xA;    ID         int16 `json:&quot;id&quot;`&#xA;    SubItem    *Item&#xA;    SubItemInt int16 `json:&quot;sub_item&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and then you should do something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;items := make(map[int16]*Item)&#xA;[...]&#xA;for k := range items {&#xA;    items[k].SubItem = items[items[k].SubItemInt]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1273924"" LastEditorUserId=""1273924"" LastEditDate=""2017-06-30T09:58:22.167"" LastActivityDate=""2017-06-30T09:58:22.167"" CommentCount=""0"" />
",44843162
44823580,"44823580      <row Id=""44823580"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44843649"" PostTypeId=""2"" ParentId=""44823580"" CreationDate=""2017-06-30T09:54:38.730"" Score=""0"" Body=""&lt;p&gt;It seems, like to reference system libs of another OS, &#xA;for example linux system libs when compiling from windows - &#xA;the linux system libs must be present on the windows system.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The same would be the case, when using special libs, for example when calling c-libs using &quot;cgo&quot;, which maybe could implement some device specific functions.&#xA;For example on a coffee machine - the functions which starts making coffee or cleaning the machine.&lt;/p&gt;&#xA;"" OwnerUserId=""513393"" LastActivityDate=""2017-06-30T09:54:38.730"" CommentCount=""0"" />
",44843649
44844654,"44844654      <row Id=""44844654"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44847571"" PostTypeId=""2"" ParentId=""44844654"" CreationDate=""2017-06-30T13:22:37.237"" Score=""2"" Body=""&lt;p&gt;Here is an example producer-consumer type. I only use the &lt;code&gt;WaitGroup&lt;/code&gt; here so that the main goroutine wouldn't exit instantly. Theoretically your application could either wait, or do some other interesting stuff in the mean time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that you could also use a buffered channel using &lt;code&gt;c := make(chan(*Feed, n))&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the number you want buffered. Just be aware that in a typical producer-consumer scenario, there is sometimes a lot of resources allocated per job. So depending on that you could buffer just a few, or all of them if you wanted. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Without a buffered channel, it acts as a sync between the goroutines. Producers block at &lt;code&gt;c &amp;lt;-&lt;/code&gt; waiting for a consumer's &lt;code&gt;&amp;lt;- c&lt;/code&gt; to hand off to, so only one of each routine execute these lines at a time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; I added a pause before printing &quot;started&quot; to make the output less synchronized. It previously always output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;created&#xA;started&#xA;created&#xA;started&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/FmWqegr-CR&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/FmWqegr-CR&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;math/rand&quot;&#xA;    &quot;sync&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;type Feed struct {&#xA;    title, descr, link string&#xA;    published          time.Time&#xA;}&#xA;&#xA;func CreateFeed() *Feed {&#xA;    r := rand.Int() % 500&#xA;    time.Sleep(1000 + time.Duration(r)*time.Millisecond)&#xA;    fmt.Println(&quot;Feed created&quot;)&#xA;    return &amp;amp;Feed{&#xA;        published: time.Now(),&#xA;    }&#xA;}&#xA;&#xA;func UseFeed(f *Feed) {&#xA;    time.Sleep(100 * time.Millisecond)&#xA;    fmt.Println(&quot;Feed started&quot;)&#xA;    time.Sleep(1600 * time.Millisecond)&#xA;    fmt.Printf(&quot;Feed consumed: %s\n&quot;, f.published)&#xA;}&#xA;&#xA;func main() {&#xA;    numFeeds := 10&#xA;&#xA;    var wg sync.WaitGroup&#xA;    wg.Add(10)&#xA;&#xA;    c := make(chan (*Feed))&#xA;    for i := 0; i &amp;lt; numFeeds; i++ {&#xA;        go func() { c &amp;lt;- CreateFeed() }()&#xA;    }&#xA;&#xA;    for i := 0; i &amp;lt; numFeeds; i++ {&#xA;        go func() {&#xA;            f := &amp;lt;-c&#xA;            UseFeed(f)&#xA;            wg.Done()&#xA;        }()&#xA;    }&#xA;&#xA;    wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'm hoping this is what you are looking for.&lt;/p&gt;&#xA;"" OwnerUserId=""1276480"" LastEditorUserId=""1276480"" LastEditDate=""2017-06-30T13:34:59.437"" LastActivityDate=""2017-06-30T13:34:59.437"" CommentCount=""3"" />
",44847571
44847607,"44847607      <row Id=""44847607"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44847651"" PostTypeId=""2"" ParentId=""44847607"" CreationDate=""2017-06-30T13:26:49.560"" Score=""2"" Body=""&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/html/template/#JS&quot; rel=&quot;nofollow noreferrer&quot;&gt;Per the documentation, they're strings&lt;/a&gt;. Just type cast to string:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;asStr := string(myTplJsObj)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-06-30T13:26:49.560"" CommentCount=""4"" />
",44847651
44848112,"44848112      <row Id=""44848112"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44848233"" PostTypeId=""2"" ParentId=""44848112"" CreationDate=""2017-06-30T13:55:25.293"" Score=""2"" Body=""&lt;p&gt;This part of the function signature is exactly what the function returns.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(*PutRecordOutput, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So this one will return a pointer to a &lt;code&gt;PutRecordOutput&lt;/code&gt; plus an &lt;code&gt;error&lt;/code&gt; (which by convention is returned as &lt;code&gt;nil&lt;/code&gt; if no error occurred).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you look at the source code for the function, &lt;code&gt;return&lt;/code&gt; statements will have to be consistent with that, so that can also help you understand how the return values are built.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But, please note that in some cases you could have named output arguments, like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(output *PutRecordOutput, err error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In that case, &lt;code&gt;output&lt;/code&gt; and &lt;code&gt;err&lt;/code&gt; will be valid local variables inside the function, and you might see a plain return statement like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Just keep in mind that one would implicitly be like doing:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return output, err&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-06-30T13:55:25.293"" CommentCount=""0"" />
",44848233
44847460,"44847460      <row Id=""44847460"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44848560"" PostTypeId=""2"" ParentId=""44847460"" CreationDate=""2017-06-30T14:13:20.963"" Score=""1"" Body=""&lt;p&gt;You're using different variant (the constructor that takes UTF-8 &lt;code&gt;string&lt;/code&gt;) when initializing C# instance. In addition, as already pointed by zaph, you need to use same iteration count for both C# and &lt;code&gt;golang&lt;/code&gt; codes. The &lt;code&gt;golang&lt;/code&gt; version takes &lt;code&gt;[]byte&lt;/code&gt; arguments both for &lt;em&gt;password&lt;/em&gt; and &lt;em&gt;salt&lt;/em&gt;, and the C# counterpart is &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms148161(v=vs.110).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Rfc2898DeriveBytes Constructor (Byte[] password, Byte[] salt, Int32 iterations)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;byte[] passBytes = new byte[]&#xA;    {164,176,124,62,244,154,226,211,177,90,202,180,12,142,25,225};&#xA;&#xA;byte[] saltBytes = new byte[]&#xA;    {173,205,190,172,239,190,242,63,219,205,173,196,218,171,142,214};&#xA;&#xA;var pbkdf2 = new Rfc2898DeriveBytes(passBytes, saltBytes, 1000);&#xA;var key = Convert.ToBase64String(pbkdf2.GetBytes(16));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The output of above code is the same with &lt;code&gt;golang&lt;/code&gt; version.&lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-06-30T14:48:02.400"" LastActivityDate=""2017-06-30T14:48:02.400"" CommentCount=""2"" />
",44848560
44848595,"44848595      <row Id=""44848595"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44849043"" PostTypeId=""2"" ParentId=""44848595"" CreationDate=""2017-06-30T14:38:45.003"" Score=""3"" Body=""&lt;p&gt;Looking at the assembly output (&lt;code&gt;go run -gcflags '-S' test.go&lt;/code&gt;) there is some difference:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Bool:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;0x0075 00117 (test.go:11)   MOVBLZX (AX)(BX*1), DI&#xA;0x0079 00121 (test.go:11)   TESTB   DIB, DIB&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Int:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;0x0075 00117 (test.go:28)   MOVQ    (AX)(BX*8), DI&#xA;0x0079 00121 (test.go:28)   CMPQ    DI, $1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Byte/uint8:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;0x0075 00117 (test.go:28)   MOVBLZX (AX)(BX*1), DI&#xA;0x0079 00121 (test.go:28)   CMPB    DIB, $1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The rest of the assembly is near-identical for me on Go 1.8.*.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So: 1) data types are sized different 2) operations are different&lt;/p&gt;&#xA;"" OwnerUserId=""687438"" LastEditorUserId=""687438"" LastEditDate=""2017-06-30T15:04:56.083"" LastActivityDate=""2017-06-30T15:04:56.083"" CommentCount=""9"" />
",44849043
44850023,"44850023      <row Id=""44850023"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44852808"" PostTypeId=""2"" ParentId=""44850023"" CreationDate=""2017-06-30T18:28:09.213"" Score=""3"" Body=""&lt;p&gt;Try encrypting from Python like this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The result can then be unencrypted from Go successfully.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; #!/usr/bin/env python3&#xA;import base64&#xA;from Crypto.Cipher import AES&#xA;&#xA;MODE = AES.MODE_CFB&#xA;BLOCK_SIZE = 16&#xA;SEGMENT_SIZE = 128&#xA;&#xA;def _pad_string(value):&#xA;    length = len(value)&#xA;    pad_size = BLOCK_SIZE - (length % BLOCK_SIZE)&#xA;    return value.ljust(length + pad_size, '\x00')&#xA;&#xA;def encrypt(key, iv, plaintext):&#xA;    aes = AES.new(key, MODE, iv, segment_size=SEGMENT_SIZE)&#xA;    plaintext = _pad_string(plaintext)&#xA;    encrypted_text = aes.encrypt(plaintext)&#xA;    return encrypted_text&#xA;&#xA;key = 'TfvY7I358yospfWKcoviZizOShpm5hyH'&#xA;iv = 'mb13KcoviZizvYhp'&#xA;original_message = 'This is not encrypted'&#xA;&#xA;encryptedpayload = base64.b64encode(encrypt(key, iv, original_message))&#xA;&#xA;print('Going to encrypt and base64 &quot;{}&quot; result:\n{}\n'.format(original_message,encryptedpayload))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Source: &lt;a href=&quot;http://chase-seibert.github.io/blog/2016/01/29/cryptojs-pycrypto-ios-aes256.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://chase-seibert.github.io/blog/2016/01/29/cryptojs-pycrypto-ios-aes256.html&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-06-30T18:28:09.213"" CommentCount=""4"" />
",44852808
44853839,"44853839      <row Id=""44853839"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44854439"" PostTypeId=""2"" ParentId=""44853839"" CreationDate=""2017-06-30T20:33:21.280"" Score=""1"" Body=""&lt;p&gt;I really didn't like how &lt;code&gt;nextPassword&lt;/code&gt; was written, so I made a variation. Rather than starting at 0 and repeatedly returning the next value, this one takes an integer and converts it to the corresponding &quot;password.&quot; E.g. &lt;code&gt;toPassword(0, 2, []rune(&quot;ABCDE&quot;))&lt;/code&gt; is &lt;code&gt;AA&lt;/code&gt;, and &lt;code&gt;toPassword(5, ...)&lt;/code&gt; is &lt;code&gt;BA&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;From there, it's easy to loop over whatever range you want. But I also wrote a &lt;code&gt;nextPassword&lt;/code&gt; wrapper around it that behaves similarly to the one in the original code. This one uses &lt;code&gt;toPassword&lt;/code&gt; under the cover and takes a starting &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Runnable version here: &lt;a href=&quot;https://play.golang.org/p/fBo6mx4Mji&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/fBo6mx4Mji&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Code below:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;func toPassword(n, length int, alphabet []rune) string {&#xA;    base := len(alphabet)&#xA;&#xA;    // This will be our output&#xA;    result := make([]rune, length)&#xA;&#xA;    // Start filling from the right&#xA;    i := length - 1&#xA;&#xA;    // This is essentially a conversion to base-b, where b is&#xA;    // the number of possible letters (5 in the case of &quot;ABCDE&quot;)&#xA;    for n &amp;gt; 0 {&#xA;        // Filling from the right, put the right digit mod b&#xA;        result[i] = alphabet[n%base]&#xA;&#xA;        // Divide the number by the base so we're ready for&#xA;        // the next digit&#xA;        n /= base&#xA;&#xA;        // Move to the left&#xA;        i -= 1&#xA;    }&#xA;&#xA;    // Fill anything that's left with &quot;zeros&quot; (first letter of&#xA;    // the alphabet)&#xA;    for i &amp;gt;= 0 {&#xA;        result[i] = alphabet[0]&#xA;        i -= 1&#xA;    }&#xA;&#xA;    return string(result)&#xA;}&#xA;&#xA;// Convenience function that just returns successive values from&#xA;// toPassword starting at start&#xA;func nextPassword(start, length int, alphabet []rune) func() string {&#xA;    n := start&#xA;    return func() string {&#xA;        result := toPassword(n, length, alphabet)&#xA;        n += 1&#xA;        return result&#xA;    }&#xA;}&#xA;&#xA;func main() {&#xA;    for i := 5; i &amp;lt; 11; i++ {&#xA;        fmt.Println(toPassword(i, 2, []rune(&quot;ABCDE&quot;)))&#xA;    } // BA, BB, BC, BD, BE, CA&#xA;&#xA;    // Now do the same thing using nextPassword&#xA;    np := nextPassword(5, 2, []rune(&quot;ABCDE&quot;))&#xA;    for i := 0; i &amp;lt; 6; i++ {&#xA;        fmt.Println(np())&#xA;    } // BA, BB, BC, BD, BE, CA&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""94559"" LastEditorUserId=""94559"" LastEditDate=""2017-06-30T20:41:01.387"" LastActivityDate=""2017-06-30T20:41:01.387"" CommentCount=""0"" />
",44854439
43421062,"43421062      <row Id=""43421062"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44857027"" PostTypeId=""2"" ParentId=""43421062"" CreationDate=""2017-07-01T03:14:26.470"" Score=""0"" Body=""&lt;p&gt;&lt;strong&gt;fmt.Scanln stops reading after the spaces.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Two Approaches to solve this Problem &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;1st Approach: USE Scanf&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var in string&#xA;fmt.Scanf(&quot;%q&quot;, &amp;amp;in)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But then your input should be enclosed within the double quotes like &lt;code&gt;&quot;2 3&quot;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;2nd Approach: USE bufio&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The best way I consider&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;scanner := bufio.NewScanner(os.Stdin)&#xA;for scanner.Scan(){&#xA;   in = scanner.Text()&#xA;   break  //optional line if your input has a single line&#xA;}&#xA;fmt.Println(in)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This shall solve the problem in the best way&lt;/p&gt;&#xA;"" OwnerUserId=""6789776"" LastActivityDate=""2017-07-01T03:14:26.470"" CommentCount=""0"" />
",44857027
44857538,"44857538      <row Id=""44857538"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44857672"" PostTypeId=""2"" ParentId=""44857538"" CreationDate=""2017-07-01T05:29:43.400"" Score=""6"" Body=""&lt;p&gt;That will install any &quot;&lt;code&gt;main&lt;/code&gt;&quot; packages found in the current or subdirectories, &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&quot;subdirectories&quot;: that is what the &lt;code&gt;./...&lt;/code&gt; syntax means.&lt;br&gt;&#xA;It forces &lt;code&gt;go install&lt;/code&gt; to consider not just the current folder/package ('.'), but also the ones in the sub-folders: &quot;&lt;code&gt;...&lt;/code&gt;&quot;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See &quot;&lt;a href=&quot;https://stackoverflow.com/a/14870666/6309&quot;&gt;What is a sensible way to layout a Go project&lt;/a&gt;&quot;: you can have multiple packages &quot;&lt;code&gt;main&lt;/code&gt;&quot;, in a library driven development:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Moving the &lt;code&gt;main.go&lt;/code&gt; file out of your root allows you to build your application from the perspective of a library. Your application binary is simply a client of your application’s library.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Sometimes you might want users to interact in multiple ways so you create multiple binaries.&lt;br&gt;&#xA;  For example, if you had an “adder” package that that let users add numbers together, you may want to release a command line version as well as a web version.&lt;br&gt;&#xA;  You can easily do this by organizing your project like this:&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;adder/&#xA;  adder.go&#xA;  cmd/&#xA;    adder/&#xA;      main.go&#xA;    adder-server/&#xA;      main.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Users can install your “adder” application binaries with “go get” using an ellipsis:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ go get github.com/benbjohnson/adder/...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;And voila, your user has “adder” and “adder-server” installed!&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Similarly, a &lt;code&gt;go install -v ./...&lt;/code&gt; would install “adder” and “adder-server” as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note: the &lt;code&gt;-v&lt;/code&gt; print the names of packages as they are compiled.&lt;/p&gt;&#xA;"" OwnerUserId=""6309"" LastEditorUserId=""6309"" LastEditDate=""2017-07-01T05:36:37.207"" LastActivityDate=""2017-07-01T05:36:37.207"" CommentCount=""0"" />
",44857672
44857638,"44857638      <row Id=""44857638"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44857811"" PostTypeId=""2"" ParentId=""44857638"" CreationDate=""2017-07-01T05:51:57.263"" Score=""1"" Body=""&lt;p&gt;There is a problem in your &lt;code&gt;golang&lt;/code&gt; code, the following lines:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;decoder := json.NewDecoder(r.Body)&#xA;Info.Println(r.Body)&#xA;err := decoder.Decode(&amp;amp;geoRec)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Both &lt;code&gt;Info.Println&lt;/code&gt; and &lt;code&gt;decoder.Decode&lt;/code&gt; read from request body which is an &lt;code&gt;io.Reader&lt;/code&gt;. After the execution of &lt;code&gt;Info.Println&lt;/code&gt;, the reader is at &lt;code&gt;EOF&lt;/code&gt; state. From this point, any further &lt;code&gt;Read&lt;/code&gt; will result in &lt;code&gt;EOF&lt;/code&gt; error, the error you saw in your application. If you remove (comment out) &lt;code&gt;Info.Println&lt;/code&gt;, you will be able to decode the data to the struct. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;br&gt;&#xA;I forgot and didn't paying attention that JSONP is &lt;code&gt;GET&lt;/code&gt; request. The JSON data is embedded in the query. Try the following approach to extract JSON data (please adapt to your need).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//snippet inside recordGeo function&#xA;//...&#xA;&#xA;callback := &quot;&quot;&#xA;geoRec := geoData{}&#xA;queries := r.URL.Query()&#xA;&#xA;//See http://api.jquery.com/jQuery.ajax/&#xA;//for 'jsonp' data type parameters.&#xA;for key, val := range queries {&#xA;    if key == &quot;callback&quot; {&#xA;        callback = val[0]&#xA;    } else if key == &quot;_&quot; {&#xA;        //the Timestamp&#xA;    } else {&#xA;        //JSON data in the key&#xA;        dec := json.NewDecoder(bytes.NewBufferString(key))&#xA;        err := dec.Decode(&amp;amp;geoRec)&#xA;        if err != nil {&#xA;            log.Println(err)&#xA;        }&#xA;        log.Printf(&quot;DATA=%#v&quot;, geoRec)&#xA;    }&#xA;}&#xA;&#xA;//...&#xA;//do some processing&#xA;response := &quot;{YOUR RESPONSE DATA}&quot;&#xA;if callback != &quot;&quot; {&#xA;    w.Header().Set(&quot;Content-Type&quot;, &quot;application/javascript&quot;)&#xA;    response = fmt.Printf(&quot;%s(%s);&quot;, callback, response)&#xA;}&#xA;w.Write([]byte(response))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If in the client side you set the data as &lt;code&gt;data: pfg&lt;/code&gt; (without &lt;code&gt;JSON.stringify&lt;/code&gt;), then in the server side, each parameter will be accessible through query parameter: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//&#xA;lon := queries.Get(&quot;lo&quot;)&#xA;lat := queries.Get(&quot;la&quot;)&#xA;acc := queries.Get(&quot;ac&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;OR, if you set the AJAX request data as &lt;code&gt;data: &quot;mydata=&quot; + JSON.stringify(pfg)&lt;/code&gt;, then you can extract the data as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mydata := queries.Get(&quot;mydata&quot;)&#xA;dec := json.NewDecoder(bytes.NewBufferString(mydata))&#xA;err := dec.Decode(&amp;amp;geoRec)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;After processing, you need to send a proper JSONP response to the client, i.e. &lt;code&gt;callback(DATA);&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-07-01T14:35:50.820"" LastActivityDate=""2017-07-01T14:35:50.820"" CommentCount=""4"" />
",44857811
44859156,"44859156      <row Id=""44859156"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44859459"" PostTypeId=""2"" ParentId=""44859156"" CreationDate=""2017-07-01T09:37:45.623"" Score=""0"" Body=""&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;    &quot;net&quot;&#xA;)&#xA;&#xA;func getMacAddr() ([]string, error) {&#xA;    ifas, err := net.Interfaces()&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    var as []string&#xA;    for _, ifa := range ifas {&#xA;        a := ifa.HardwareAddr.String()&#xA;        if a != &quot;&quot; {&#xA;            as = append(as, a)&#xA;        }&#xA;    }&#xA;    return as, nil&#xA;}&#xA;&#xA;func main() {&#xA;    as, err := getMacAddr()&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    for _, a := range as {&#xA;        fmt.Println(a)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""720391"" LastActivityDate=""2017-07-01T09:37:45.623"" CommentCount=""0"" />
",44859459
44860050,"44860050      <row Id=""44860050"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44860164"" PostTypeId=""2"" ParentId=""44860050"" CreationDate=""2017-07-01T11:00:24.870"" Score=""1"" Body=""&lt;p&gt;Easy to do. Simply convert.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;)&#xA;&#xA;const s = `&#xA;{&#xA;         &quot;localhost&quot;:&#xA;        {&#xA;                &quot;tag&quot;: &quot;dev_latest&quot;,&#xA;                &quot;vhost&quot;: &quot;localhost.com&quot;&#xA;        },&#xA;        &quot;development&quot;:&#xA;        {&#xA;                &quot;tag&quot;: &quot;dev_latest&quot;,&#xA;                &quot;vhost&quot;: &quot;dev.com&quot;&#xA;        }&#xA;}&#xA;`&#xA;&#xA;func main() {&#xA;    var m map[string]interface{}&#xA;    err := json.Unmarshal([]byte(s), &amp;amp;m)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    mm := make(map[string]string)&#xA;    for k, v := range m {&#xA;        mm[k] = fmt.Sprint(v)&#xA;    }&#xA;    fmt.Println(mm)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;UPDATE&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Wrote flatten (maybe works as charm)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;    &quot;reflect&quot;&#xA;)&#xA;&#xA;const s = `&#xA;{&#xA;         &quot;localhost&quot;:&#xA;        {&#xA;                &quot;tag&quot;: &quot;dev_latest&quot;,&#xA;                &quot;vhost&quot;: &quot;localhost.com&quot;&#xA;        },&#xA;        &quot;development&quot;:&#xA;        {&#xA;                &quot;tag&quot;: &quot;dev_latest&quot;,&#xA;                &quot;vhost&quot;: &quot;dev.com&quot;&#xA;        }&#xA;}&#xA;`&#xA;&#xA;func flatten(m map[string]interface{}) map[string]string {&#xA;    mm := make(map[string]string)&#xA;    for k, v := range m {&#xA;        switch reflect.TypeOf(v).Kind() {&#xA;        case reflect.Map:&#xA;            mv := flatten(v.(map[string]interface{}))&#xA;            for kk, vv := range mv {&#xA;                mm[k+&quot;-&quot;+kk] = vv&#xA;            }&#xA;        case reflect.Array, reflect.Slice:&#xA;            for kk, vv := range m {&#xA;                if reflect.TypeOf(vv).Kind() == reflect.Map {&#xA;                    mv := flatten(vv.(map[string]interface{}))&#xA;                    for kkk, vvv := range mv {&#xA;                        mm[k+&quot;-&quot;+kkk] = vvv&#xA;                    }&#xA;                } else {&#xA;                    mm[k+&quot;-&quot;+kk] = fmt.Sprint(vv)&#xA;                }&#xA;            }&#xA;        default:&#xA;            mm[k] = fmt.Sprint(v)&#xA;        }&#xA;    }&#xA;    return mm&#xA;}&#xA;&#xA;func main() {&#xA;    var m map[string]interface{}&#xA;    err := json.Unmarshal([]byte(s), &amp;amp;m)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    b, _ := json.MarshalIndent(flatten(m), &quot;&quot;, &quot;  &quot;)&#xA;    println(string(b))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""720391"" LastEditorUserId=""720391"" LastEditDate=""2017-07-01T14:34:42.420"" LastActivityDate=""2017-07-01T14:34:42.420"" CommentCount=""6"" />
",44860164
44861213,"44861213      <row Id=""44861213"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44861519"" PostTypeId=""2"" ParentId=""44861213"" CreationDate=""2017-07-01T13:32:06.070"" Score=""0"" Body=""&lt;p&gt;I finally figured it out!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I needed to use the &lt;code&gt;copy&lt;/code&gt; function instead of initializing my local slices using &lt;code&gt;:=&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Go Playground Link: &lt;a href=&quot;https://play.golang.org/p/N9RzHOibdI&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/N9RzHOibdI&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""7824245"" LastActivityDate=""2017-07-01T13:32:06.070"" CommentCount=""0"" />
",44861519
44863386,"44863386      <row Id=""44863386"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44864577"" PostTypeId=""2"" ParentId=""44863386"" CreationDate=""2017-07-01T19:20:01.453"" Score=""0"" Body=""&lt;p&gt;Your issue might be, the way you handle &lt;a href=&quot;https://golang.org/pkg/time/#Since&quot; rel=&quot;nofollow noreferrer&quot;&gt;time.Since&lt;/a&gt; return value for comparison.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;time.Since&lt;/code&gt; method returns type &lt;a href=&quot;https://golang.org/pkg/time/#Duration&quot; rel=&quot;nofollow noreferrer&quot;&gt;Duration&lt;/a&gt; and internally represented as type &lt;code&gt;int64&lt;/code&gt;. Value is in Nanoseconds.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try this-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;elapsedHours := int64(time.Since(SecureDevice.Token.StartingDate).Hours())&#xA;if elapsedHours &amp;gt;= 168 {&#xA;    //...&#xA;} else if elapsedHours &amp;gt;= 30 {&#xA;   //...&#xA;} else if elapsedHours &amp;lt;= 1 {&#xA;   //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-07-01T19:20:01.453"" CommentCount=""2"" />
",44864577
39162054,"39162054      <row Id=""39162054"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44864836"" PostTypeId=""2"" ParentId=""39162054"" CreationDate=""2017-07-01T19:51:00.710"" Score=""0"" Body=""&lt;p&gt;I asked the guys from go-ole, like @kostix suggested.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is the solution:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;d3d9 doesn't have generally COM vtbl. for example, it doesn't have&#xA;  IDispatch interface. So you can't use go-ole for d3d9. But you can do&#xA;  it with writing all interface in go.  &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;    &quot;syscall&quot;&#xA;    &quot;unsafe&quot;&#xA;)&#xA;&#xA;const (&#xA;    D3D9_SDK_VERSION = 32&#xA;)&#xA;&#xA;var (&#xA;    libd3d9             = syscall.NewLazyDLL(&quot;d3d9.dll&quot;)&#xA;    procDirect3DCreate9 = libd3d9.NewProc(&quot;Direct3DCreate9&quot;)&#xA;)&#xA;&#xA;type IDirect3D struct {&#xA;    lpVtbl *IDirect3DVtbl&#xA;}&#xA;&#xA;type IDirect3DVtbl struct {&#xA;    QueryInterface uintptr&#xA;    AddRef         uintptr&#xA;    Release        uintptr&#xA;&#xA;    RegisterSoftwareDevice      uintptr&#xA;    GetAdapterCount             uintptr&#xA;    GetAdapterIdentifier        uintptr&#xA;    GetAdapterModeCount         uintptr&#xA;    EnumAdapterModes            uintptr&#xA;    GetAdapterDisplayMode       uintptr&#xA;    CheckDeviceType             uintptr&#xA;    CheckDeviceFormat           uintptr&#xA;    CheckDeviceMultiSampleType  uintptr&#xA;    CheckDepthStencilMatch      uintptr&#xA;    CheckDeviceFormatConversion uintptr&#xA;    GetDeviceCaps               uintptr&#xA;    GetAdapterMonitor           uintptr&#xA;    CreateDevice                uintptr&#xA;}&#xA;&#xA;func (v *IDirect3D) AddRef() int32 {&#xA;    ret, _, _ := syscall.Syscall(&#xA;        v.lpVtbl.AddRef,&#xA;        1,&#xA;        uintptr(unsafe.Pointer(v)),&#xA;        0,&#xA;        0)&#xA;    return int32(ret)&#xA;}&#xA;&#xA;func (v *IDirect3D) Release() int32 {&#xA;    ret, _, _ := syscall.Syscall(&#xA;        v.lpVtbl.Release,&#xA;        1,&#xA;        uintptr(unsafe.Pointer(v)),&#xA;        0,&#xA;        0)&#xA;    return int32(ret)&#xA;}&#xA;&#xA;func (v *IDirect3D) GetAdapterCount() uint32 {&#xA;    ret, _, _ := syscall.Syscall(&#xA;        v.lpVtbl.GetAdapterCount,&#xA;        1,&#xA;        uintptr(unsafe.Pointer(v)),&#xA;        0,&#xA;        0)&#xA;    return uint32(ret)&#xA;}&#xA;&#xA;func main() {&#xA;    v, r, err := procDirect3DCreate9.Call(uintptr(D3D9_SDK_VERSION))&#xA;    if r != 0 &amp;amp;&amp;amp; err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    d3d := *((**IDirect3D)(unsafe.Pointer(&amp;amp;v)))&#xA;&#xA;    d3d.AddRef()&#xA;    defer d3d.Release()&#xA;&#xA;    fmt.Println(d3d.GetAdapterCount())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/go-ole/go-ole/issues/140&quot; rel=&quot;nofollow noreferrer&quot;&gt;(c) mattn&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""6276385"" LastEditorUserId=""4850916"" LastEditDate=""2017-07-03T20:53:34.547"" LastActivityDate=""2017-07-03T20:53:34.547"" CommentCount=""0"" />
",44864836
44864972,"44864972      <row Id=""44864972"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44865080"" PostTypeId=""2"" ParentId=""44864972"" CreationDate=""2017-07-01T20:19:45.917"" Score=""1"" Body=""&lt;p&gt;The cursor is modified by {{range}}.  Assign the cursor to a variable and use that variable inside the range.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;...&#xA;&amp;lt;div&amp;gt;&#xA;    &amp;lt;p&amp;gt;{{.Something}}&amp;lt;/p&amp;gt;        &#xA;    {{$x := .}}    &amp;lt;!-- assign cursor to variable $x --&amp;gt;&#xA;    {{range ...}}&#xA;        &amp;lt;p&amp;gt;{{$x.Something}}&amp;lt;/p&amp;gt;    &#xA;    {{end}}&#xA;&amp;lt;/div&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/tQnOzB78VE&quot; rel=&quot;nofollow noreferrer&quot;&gt;playground example&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the starting cursor in this snippet is the starting value of the template, then use the &lt;code&gt;$&lt;/code&gt; variable:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;...&#xA;&amp;lt;div&amp;gt;&#xA;    &amp;lt;p&amp;gt;{{$.Something}}&amp;lt;/p&amp;gt;     &amp;lt;!-- the variable $ is the starting value for the template --&amp;gt;    &#xA;    {{range ...}}&#xA;        &amp;lt;p&amp;gt;{{$.Something}}&amp;lt;/p&amp;gt;    &#xA;    {{end}}&#xA;&amp;lt;/div&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-07-01T20:27:53.083"" LastActivityDate=""2017-07-01T20:27:53.083"" CommentCount=""2"" />
",44865080
44675948,"44675948      <row Id=""44675948"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44865332"" PostTypeId=""2"" ParentId=""44675948"" CreationDate=""2017-07-01T20:55:38.957"" Score=""0"" Body=""&lt;p&gt;Rate limit dial attempts after a failure:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    var (&#xA;       nextDial time.Time&#xA;       mu sync.Mutex&#xA;    )&#xA;    state.redisPool = &amp;amp;redis.Pool{&#xA;        MaxIdle:     200,&#xA;        MaxActive:   9000,&#xA;        IdleTimeout: time.Minute,&#xA;        Dial: func() (redis.Conn, error) {&#xA;            mu.Lock()   // Dial can be called concurrently&#xA;            defer mu.Unlock()&#xA;            if time.Now().Before(nextDial) {&#xA;               return nil, errors.New(&quot;waiting for dial&quot;)&#xA;            }&#xA;            c, err := redis.Dial(&quot;tcp&quot;, *redisAddress,&#xA;                redis.DialConnectTimeout(1*time.Second),&#xA;                redis.DialReadTimeout(100*time.Millisecond),&#xA;                redis.DialWriteTimeout(100*time.Millisecond),&#xA;            )&#xA;            if err == nil {&#xA;               nextDial = time.Time{}&#xA;            } else {&#xA;               nextDial = time.Now().Add(time.Second) // don't attempt dial for one second&#xA;            }&#xA;            return c, err&#xA;        },&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-07-01T20:55:38.957"" CommentCount=""0"" />
",44865332
44864790,"44864790      <row Id=""44864790"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44865347"" PostTypeId=""2"" ParentId=""44864790"" CreationDate=""2017-07-01T20:57:22.043"" Score=""3"" Body=""&lt;p&gt;The genericity of interface types in Go is not passed on to derived types. This applies to pointers (as you noticed), and also to slices, channels, etc. For example, you can't assign a &lt;code&gt;[]string&lt;/code&gt; to a &lt;code&gt;[]interface{}&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are various ways to explain this. For a Haskell programmer:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Go does not have covariant or contravariant types. All type constructors (such as the &lt;code&gt;*&lt;/code&gt; that creates a pointer type) are invariant. So even though &lt;code&gt;Account&lt;/code&gt; and &lt;code&gt;*Account&lt;/code&gt; (and all other types) are subtypes of &lt;code&gt;interface{}&lt;/code&gt;, nothing is a subtype of &lt;code&gt;*interface{}&lt;/code&gt; or &lt;code&gt;[]interface{}&lt;/code&gt;. This is sometimes inconvenient, but it keeps Go's type system and assignability rules much simpler.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For a C programmer:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;An &lt;code&gt;interface{}&lt;/code&gt; can hold a value of any type, but it does not hold it directly. Rather than being a variable-sized magic container, it is just a struct consisting of a pointer to a type and a pointer to a value. When you assign a concrete type to an &lt;code&gt;interface{}&lt;/code&gt;, both of these fields are filled in. &lt;code&gt;*interface{}&lt;/code&gt; is a pointer to one of these structs. When you try to assign a &lt;code&gt;*Account&lt;/code&gt; to a &lt;code&gt;*interface{}&lt;/code&gt;, there is nowhere to put the type information, because the &lt;code&gt;*interface{}&lt;/code&gt; is a single machine word that just holds a pointer. So the compiler won't let you do that.&lt;/p&gt;&#xA;"" OwnerUserId=""1097065"" LastActivityDate=""2017-07-01T20:57:22.043"" CommentCount=""1"" />
",44865347
44865693,"44865693      <row Id=""44865693"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44865723"" PostTypeId=""2"" ParentId=""44865693"" CreationDate=""2017-07-01T21:54:37.510"" Score=""1"" Body=""&lt;p&gt;&lt;a href=&quot;https://github.com/golang/go/wiki/CommonMistakes&quot; rel=&quot;nofollow noreferrer&quot;&gt;Using goroutines on loop iterator variables is a common mistake.&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Call &lt;code&gt;.Start&lt;/code&gt; on the element of &lt;code&gt;Fl2&lt;/code&gt; by the range index, instead of the range value (&lt;a href=&quot;https://play.golang.org/p/T7LzoWSscv&quot; rel=&quot;nofollow noreferrer&quot;&gt;playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for i := range Fl2 {&#xA;    Fl2[i].Start()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, the output might still not become exactly as you expect,&#xA;due to the scheduling of the goroutines,&#xA;for example it might be like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;F1  &amp;amp;{1}&#xA;F1  &amp;amp;{2}&#xA;F1  &amp;amp;{3}&#xA;F2  &amp;amp;{3}&#xA;F2  &amp;amp;{1}&#xA;F2  &amp;amp;{2}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""641955"" LastEditorUserId=""641955"" LastEditDate=""2017-07-01T22:01:31.383"" LastActivityDate=""2017-07-01T22:01:31.383"" CommentCount=""1"" />
",44865723
44866396,"44866396      <row Id=""44866396"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44866526"" PostTypeId=""2"" ParentId=""44866396"" CreationDate=""2017-07-02T00:33:52.570"" Score=""2"" Body=""&lt;p&gt;Yes, its enabled by default when you use with SSL certs.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/net/http/#pkg-overview&quot; rel=&quot;nofollow noreferrer&quot;&gt;Doc Reference&lt;/a&gt;: Starting with Go 1.6, the http package has transparent&#xA;  support for the HTTP/2 protocol when using HTTPS.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;err := http.ListenAndServeTLS(&quot;:8081&quot;, &quot;server.crt&quot;, &quot;server.key&quot;, handler)&#xA;if err != nil &amp;amp;&amp;amp; err != http.ErrServerClosed {&#xA;    log.Fatal(&quot;ListenAndServe: &quot;, err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then, access it via&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;https://localhost:8081/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-02T00:41:03.257"" LastActivityDate=""2017-07-02T00:41:03.257"" CommentCount=""0"" />
",44866526
44866837,"44866837      <row Id=""44866837"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44867077"" PostTypeId=""2"" ParentId=""44866837"" CreationDate=""2017-07-02T02:56:01.577"" Score=""0"" Body=""&lt;p&gt;The issue I see in your code&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;r.Handle(&quot;/&quot;, RedirectRoot(ServeFiles))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It will match every route, may produce unexpected results. Instead map your routes clearly and explicitly then it will work as you expect.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;For eg.:&lt;/strong&gt; Let's maps the handler with responsibility. This approach based on your directory structure.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It will only expose &lt;code&gt;static&lt;/code&gt; directory via file server, remaining files and root directory is safe.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main()  {&#xA;   r := mux.NewRouter()&#xA;   r.Handle(&quot;/static/&quot;, http.StripPrefix(&quot;/static/&quot;,    http.FileServer(http.Dir(&quot;static&quot;))))&#xA;   r.HandleFunc(&quot;/home&quot;, Home)&#xA;   r.NotFoundHandler = http.HandlerFunc(NotFound)&#xA;&#xA;   fmt.Printf(&quot;Listening ...&quot;)&#xA;   IfError(http.ListenAndServe(&quot;:8081&quot;, r), true)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;RedirectRoot&lt;/code&gt; may not be needed for your purpose.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now, &lt;code&gt;/static/*&lt;/code&gt; served by &lt;code&gt;http.FileServer&lt;/code&gt; and &lt;code&gt;/home&lt;/code&gt; handled by &lt;code&gt;Home&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As asked in the comment. To map root &lt;code&gt;/&lt;/code&gt; to home handler and &lt;code&gt;/favicon.ico&lt;/code&gt;, add following in-addition to above code snippet.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func favIcon(w http.ResponseWriter, r *http.Request) {&#xA;    http.ServeFile(w, r, &quot;static/favicon.ico&quot;)&#xA;} &#xA;&#xA;r.HandleFunc(&quot;/favicon.ico&quot;, favIcon)&#xA;r.HandleFunc(&quot;/&quot;, Home)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;favicon.ico&lt;/code&gt; served from &lt;code&gt;static&lt;/code&gt; directory.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-02T03:35:59.087"" LastActivityDate=""2017-07-02T03:35:59.087"" CommentCount=""2"" />
",44867077
44863276,"44863276      <row Id=""44863276"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44867509"" PostTypeId=""2"" ParentId=""44863276"" CreationDate=""2017-07-02T04:36:50.850"" Score=""1"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;so I am having to install these tools into every single project so that I can lint or have auto completions.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;No you don't: see how Visual Studio Code does it through its &lt;a href=&quot;https://github.com/Microsoft/vscode-go&quot; rel=&quot;nofollow noreferrer&quot;&gt;Microsoft &lt;code&gt;vscode-go&lt;/code&gt;&lt;/a&gt; plugin (since its 0.6.53 version, January 2017).&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;New setting &lt;code&gt;go.toolsGopath&lt;/code&gt;,  for providing an alternate location to install all the Go tools that the extension depends on, if you don't want them cluttering your &lt;code&gt;GOPATH&lt;/code&gt;.&lt;br&gt;&#xA;  See &lt;a href=&quot;https://github.com/Microsoft/vscode-go/pull/351&quot; rel=&quot;nofollow noreferrer&quot;&gt;PR 351&lt;/a&gt; and &lt;a href=&quot;https://github.com/Microsoft/vscode-go/pull/737&quot; rel=&quot;nofollow noreferrer&quot;&gt;PR 737&lt;/a&gt;  &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The tools installed in that one common `` folder are:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;'gocode': 'github.com/nsf/gocode',&#xA;'gopkgs': 'github.com/tpng/gopkgs',&#xA;'go-outline': 'github.com/ramya-rao-a/go-outline',&#xA;'go-symbols': 'github.com/acroca/go-symbols',&#xA;'guru': 'golang.org/x/tools/cmd/guru',&#xA;'gorename': 'golang.org/x/tools/cmd/gorename',&#xA;'gomodifytags': 'github.com/fatih/gomodifytags',&#xA;'impl': 'github.com/josharian/impl'&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(and a few others, around &lt;code&gt;godoc&lt;/code&gt;, &lt;code&gt;goimports&lt;/code&gt; or &lt;code&gt;goreturns&lt;/code&gt;, &lt;code&gt;dlv&lt;/code&gt;, ...), &lt;/p&gt;&#xA;&#xA;&lt;p&gt;That means your &lt;code&gt;GOPATH&lt;/code&gt; is composed of:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;your project-specific workspace folder&lt;/li&gt;&#xA;&lt;li&gt;a global &lt;code&gt;go.toolsGopath&lt;/code&gt; workspace folder dedicated to tools used by all projects.&lt;br&gt;&#xA;The tools are installed/updated in the &lt;code&gt;bin/&lt;/code&gt; subfolder of that latter workspace.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;You can do that manually too (without Visual Studio Code): simply set &lt;code&gt;GOPATH&lt;/code&gt; to that global tools folder whenever you want to install/update the tools.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then reset &lt;code&gt;GOPATH&lt;/code&gt; to &lt;code&gt;my/project/dedicated/workspace;/tools/workspace&lt;/code&gt;, and add both &lt;code&gt;bin/&lt;/code&gt; subfolders to your &lt;code&gt;$PATH&lt;/code&gt;/&lt;code&gt;%PATH%&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;a href=&quot;https://stackoverflow.com/users/1351876/nithin&quot;&gt;OP Nithin&lt;/a&gt; adds &lt;a href=&quot;https://stackoverflow.com/questions/44863276/why-are-golang-tools-installed-like-libraries-and-not-as-binaries-somewhere-glob/44867509#comment76726509_44867509&quot;&gt;in the comments&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;these tools can be compiled to binaries and if those binaries are available in &lt;code&gt;$PATH&lt;/code&gt;, most editors, as far as I tested (based on your post), both vscode and atom (go-plus) will work and wont &lt;code&gt;go get&lt;/code&gt; them again. &lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;It is easier to update if they are treated like libraries. (I mean &lt;code&gt;go get&lt;/code&gt;)&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""6309"" LastEditorUserId=""6309"" LastEditDate=""2017-07-02T18:48:17.927"" LastActivityDate=""2017-07-02T18:48:17.927"" CommentCount=""5"" />
",44867509
44867052,"44867052      <row Id=""44867052"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44867551"" PostTypeId=""2"" ParentId=""44867052"" CreationDate=""2017-07-02T04:44:36.697"" Score=""1"" Body=""&lt;p&gt;If you want to serve static contents with URL pattern &lt;code&gt;/*&lt;/code&gt; to a specific directory, then use the answer provided by jeevatkm. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you need slightly customizable version, you need a kind of &lt;em&gt;adapter&lt;/em&gt; that map the URL path to static file handler (&lt;code&gt;http.FileServer&lt;/code&gt;). The example code looks like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;log&quot;&#xA;    &quot;net/http&quot;&#xA;    &quot;regexp&quot;&#xA;)&#xA;&#xA;func helloHandler(w http.ResponseWriter, r *http.Request) {&#xA;    w.Write([]byte(&quot;Hello world!&quot;))&#xA;}&#xA;&#xA;func adaptFileServer(fs http.Handler, mux http.Handler) http.Handler {&#xA;    fn := func(w http.ResponseWriter, req *http.Request) {&#xA;        //Use your Path matcher here.&#xA;        //For demonstration, REGEX match is used&#xA;        //and it's probably not the most efficient.&#xA;        staticRegex := regexp.MustCompile(&quot;^/static-page-[0-9]+/&quot;)&#xA;        if matches := staticRegex.FindStringSubmatch(req.URL.Path); matches != nil {&#xA;            log.Printf(&quot;Match: %v, %v&quot;, req.URL.Path, matches[0])&#xA;            fsHandler := http.StripPrefix(matches[0], fs)&#xA;            fsHandler.ServeHTTP(w, req)&#xA;        } else if mux != nil {&#xA;            log.Printf(&quot;Doesn't match, pass to other MUX: %v&quot;, req.URL.Path)&#xA;            mux.ServeHTTP(w, req)&#xA;        } else {&#xA;            http.Error(w, &quot;Page Not Found&quot;, http.StatusNotFound)&#xA;        }&#xA;    }&#xA;    return http.HandlerFunc(fn)&#xA;}&#xA;&#xA;func init() {&#xA;    //Usual routing definition with MUX&#xA;    mux := http.NewServeMux()&#xA;    mux.HandleFunc(&quot;/hello&quot;, helloHandler)&#xA;&#xA;    //&quot;Dynamic&quot; static file server.&#xA;    fs := http.FileServer(http.Dir(&quot;web&quot;))&#xA;    http.Handle(&quot;/&quot;, adaptFileServer(fs, mux))&#xA;}&#xA;&#xA;func main() {&#xA;    log.Fatal(http.ListenAndServe(&quot;:8080&quot;, nil))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In the above adapter example, if request path match to a specific &lt;em&gt;pattern&lt;/em&gt; (&lt;code&gt;/static-page-*/&lt;/code&gt; in the above example), it will be passed to &lt;code&gt;http.FileServer&lt;/code&gt;. If doesn't match, and if a multiplexer is specified, it will call &lt;code&gt;mux.ServeHTTP&lt;/code&gt;. Otherwise it will return &lt;code&gt;404&lt;/code&gt; error. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want another matching rule, just change the &lt;code&gt;regex&lt;/code&gt; pattern (or use your custom matcher). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br&gt;&#xA;Please don't use a same handler instance for &lt;code&gt;FileServer&lt;/code&gt; and &lt;code&gt;mux&lt;/code&gt;. For example, when you call &lt;code&gt;http.Handle&lt;/code&gt;, it use &lt;code&gt;http.DefaultServeMux&lt;/code&gt; to handle routing. If you pass &lt;code&gt;http.DefaultServeMux&lt;/code&gt; as the second argument of &lt;code&gt;adaptFileServer&lt;/code&gt; you may end up with endless recursion.&lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-07-02T04:51:56.183"" LastActivityDate=""2017-07-02T04:51:56.183"" CommentCount=""1"" />
",44867551
44858531,"44858531      <row Id=""44858531"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44868208"" PostTypeId=""2"" ParentId=""44858531"" CreationDate=""2017-07-02T06:52:26.697"" Score=""1"" Body=""&lt;p&gt;I had the problem alike: I had a lots of steps in one transaction. &#xA;After starting transaction:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;BEGIN&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;In loop:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SAVEPOINT s1&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Some actions ....&lt;/li&gt;&#xA;&lt;li&gt;If I get an error: &lt;code&gt;ROLLBACK TO SAVEPOINT s1&lt;/code&gt;  &lt;/li&gt;&#xA;&lt;li&gt;If OK go to next step&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Finally &lt;code&gt;COMMIT&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;This approach gives me ability to perform all steps one-by-one. If some steps got failed I can throw away only them, keeping others. And finally commit all &quot;good&quot; work.&lt;/p&gt;&#xA;"" OwnerUserId=""5165332"" LastActivityDate=""2017-07-02T06:52:26.697"" CommentCount=""0"" />
",44868208
44868580,"44868580      <row Id=""44868580"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44868666"" PostTypeId=""2"" ParentId=""44868580"" CreationDate=""2017-07-02T08:04:07.647"" Score=""1"" Body=""&lt;p&gt;The &lt;a href=&quot;https://www.youtube.com/watch?v=fKmRemtmi0Y&amp;amp;feature=youtu.be&quot; rel=&quot;nofollow noreferrer&quot;&gt;screencast&lt;/a&gt; starts with &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go get -u -t github.com/vattle/sqlboiler&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That step alone should compile and install &lt;code&gt;sqlboiler&lt;/code&gt; in your &lt;code&gt;$GOPATH/bin&lt;/code&gt; folder. Make sure that folder is part of your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""6309"" LastActivityDate=""2017-07-02T08:04:07.647"" CommentCount=""1"" />
",44868666
44870022,"44870022      <row Id=""44870022"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44870250"" PostTypeId=""2"" ParentId=""44870022"" CreationDate=""2017-07-02T11:20:34.033"" Score=""3"" Body=""&lt;p&gt;Look at the error type. For example,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/base64&quot;&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    encoded := &quot;XXXXXaGVsbG8=&quot; // corrupt&#xA;    decoded, err := base64.StdEncoding.DecodeString(encoded)&#xA;    if err != nil {&#xA;        if _, ok := err.(base64.CorruptInputError); ok {&#xA;            panic(&quot;\nbase64 input is corrupt, check service Key&quot;)&#xA;        }&#xA;        panic(err)&#xA;    }&#xA;    fmt.Println(string(decoded))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;panic: &#xA;base64 input is corrupt, check service Key&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""221700"" LastActivityDate=""2017-07-02T11:20:34.033"" CommentCount=""1"" />
",44870250
44853505,"44853505      <row Id=""44853505"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44871428"" PostTypeId=""2"" ParentId=""44853505"" CreationDate=""2017-07-02T13:41:26.613"" Score=""0"" Body=""&lt;p&gt;Ok, found myself the solution, small but that made the code work:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;prep := &quot;C0644 &quot; + strconv.Itoa(len(o)) + &quot; test.txt\n&quot;&#xA;connection.Write([]byte(prep))&#xA;connection.Write([]byte(o))&#xA;connection.Write([]byte(&quot;\x00&quot;))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I was missing a space in prep variable after length, the length was not converted correctly and the closing &quot;\x00&quot; is working better this way. Now I am able to receive a fake file with content :)&lt;/p&gt;&#xA;"" OwnerUserId=""6262157"" LastActivityDate=""2017-07-02T13:41:26.613"" CommentCount=""0"" />
",44871428
44871357,"44871357      <row Id=""44871357"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44871903"" PostTypeId=""2"" ParentId=""44871357"" CreationDate=""2017-07-02T14:33:43.187"" Score=""1"" Body=""&lt;p&gt;Thought that way to distinguish whether the json is Circle or Rectangle. In your JSON, there is no identify for the struct which can detect kind of objects. So let's make rules.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Rectangle have base and height both greater than 0&lt;/li&gt;&#xA;&lt;li&gt;Circle have radius greater than 0&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;To unmarshal JSON, it should have commonly fields like below.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Object struct {&#xA;    Base   float32 `json:&quot;base,omitempty&quot;`&#xA;    Radius float32 `json:&quot;radius,omitempty&quot;`&#xA;    Height float32 `json:&quot;height,omitempty&quot;`&#xA;    X      float32 `json:&quot;x&quot;`&#xA;    Y      float32 `json:&quot;y&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This struct can be stored Rectangle or Circle both. Then, add method IsCircle and IsRectangle.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (obj *Object) IsCircle() bool {&#xA;    return obj.Radius &amp;gt; 0&#xA;}&#xA;&#xA;func (obj *Object) IsRectangle() bool {&#xA;    return obj.Base &amp;gt; 0 &amp;amp;&amp;amp; obj.Height &amp;gt; 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can make method like Kind() to return identity of struct instead. As you think best. Finally, you should add ToCircle/ToRectangle methods.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (obj *Object) ToCircle() *Circle {&#xA;    return &amp;amp;Circle{&#xA;        Radius: obj.Radius,&#xA;        X:      obj.X,&#xA;        Y:      obj.Y,&#xA;    }&#xA;}&#xA;&#xA;func (obj *Object) ToRectangle() *Rectangle {&#xA;    return &amp;amp;Rectangle{&#xA;        Base:   obj.Base,&#xA;        Height: obj.Height,&#xA;        X:      obj.X,&#xA;        Y:      obj.Y,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you want slice of Polygon interface, you should convert this slice of Object to the slice of Polygon like below.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var polygons []Polygon&#xA;for _, obj := range newSlice {&#xA;    if obj.IsCircle() {&#xA;        polygons = append(polygons, obj.ToCircle())&#xA;    } else if obj.IsRectangle() {&#xA;        polygons = append(polygons, obj.ToRectangle())&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/kO_F4GTYdA&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/kO_F4GTYdA&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;UPDATE&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;One another approach. Make converters which convert from map[string]interface{}. The converter can detect the struct with looking fields exists.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var converters = []func(map[string]interface{}) Polygon{&#xA;    func(m map[string]interface{}) Polygon {&#xA;        rectangle := new(Rectangle)&#xA;        if base, ok := m[&quot;base&quot;]; ok {&#xA;            rectangle.Base = toFloat32(base)&#xA;        } else {&#xA;            return nil&#xA;        }&#xA;        if height, ok := m[&quot;height&quot;]; ok {&#xA;            rectangle.Height = toFloat32(height)&#xA;        } else {&#xA;            return nil&#xA;        }&#xA;        if x, ok := m[&quot;x&quot;]; ok {&#xA;            rectangle.X = toFloat32(x)&#xA;        }&#xA;        if y, ok := m[&quot;y&quot;]; ok {&#xA;            rectangle.Y = toFloat32(y)&#xA;        }&#xA;        return rectangle&#xA;    },&#xA;    func(m map[string]interface{}) Polygon {&#xA;        circle := new(Circle)&#xA;        if radius, ok := m[&quot;radius&quot;]; ok {&#xA;            circle.Radius = toFloat32(radius)&#xA;        } else {&#xA;            return nil&#xA;        }&#xA;        if x, ok := m[&quot;x&quot;]; ok {&#xA;            circle.X = toFloat32(x)&#xA;        }&#xA;        if y, ok := m[&quot;y&quot;]; ok {&#xA;            circle.Y = toFloat32(y)&#xA;        }&#xA;        return circle&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And do convert&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var polygons []Polygon&#xA;for _, obj := range newSlice {&#xA;    m, ok := obj.(map[string]interface{})&#xA;    if !ok {&#xA;        panic(&quot;invalid struct&quot;)&#xA;    }&#xA;    var p Polygon&#xA;    for _, converter := range converters {&#xA;        p = converter(m)&#xA;        if p != nil {&#xA;            break&#xA;        }&#xA;    }&#xA;    if p == nil {&#xA;        panic(&quot;unknown polygon&quot;)&#xA;    }&#xA;    polygons = append(polygons, p)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/PrxiMOa_1F&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/PrxiMOa_1F&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""720391"" LastEditorUserId=""720391"" LastEditDate=""2017-07-02T15:14:09.020"" LastActivityDate=""2017-07-02T15:14:09.020"" CommentCount=""7"" />
",44871903
44872595,"44872595      <row Id=""44872595"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44872832"" PostTypeId=""2"" ParentId=""44872595"" CreationDate=""2017-07-02T16:16:30.050"" Score=""1"" Body=""&lt;p&gt;The error message is telling you that the timestamp is more than 20 seconds away from the current time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The API expects time in seconds, not nanoseconds.  Use &lt;a href=&quot;http://godoc.org/time#Time.Unix&quot; rel=&quot;nofollow noreferrer&quot;&gt;Unix&lt;/a&gt; to get the time in seconds.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;     nonce := time.Now().Unix()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Unix time is is seconds since Jan 01 1970 UTC.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If this fails, then check that your system time is set correctly down to the second.&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-07-02T18:41:01.833"" LastActivityDate=""2017-07-02T18:41:01.833"" CommentCount=""5"" />
",44872832
44872665,"44872665      <row Id=""44872665"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44872993"" PostTypeId=""2"" ParentId=""44872665"" CreationDate=""2017-07-02T16:36:39.670"" Score=""0"" Body=""&lt;p&gt;I think you want to first extract your data into a &lt;code&gt;[]interface{}&lt;/code&gt;, and then call into AddLinePoints. Roughly (I didn't test):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;lines := make([]interface{},0)&#xA;for i, v := range processes { &#xA;    lines = append(lines, &quot;Title&quot; + strconv.Itoa(i))&#xA;    lines = append(lines, getPoints(v))&#xA;}&#xA;plotutil.AddLinePoints(p, lines...)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1695784"" LastActivityDate=""2017-07-02T16:36:39.670"" CommentCount=""1"" />
",44872993
44872739,"44872739      <row Id=""44872739"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44873573"" PostTypeId=""2"" ParentId=""44872739"" CreationDate=""2017-07-02T17:45:15.807"" Score=""4"" Body=""&lt;p&gt;There's only one way of passing arguments in Go and that is &lt;strong&gt;by value&lt;/strong&gt;. What that means is that always when passing an argument, a copy of the value is created and passed to the function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you pass a pointer as argument, what happens under the hood is that a copy of that pointer is created and passed to the underlying function. It should not be confused with pass-by-reference.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let's look at an example to better grasp it:&#xA;package main&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type Point struct {&#xA;    x int&#xA;    y int&#xA;}&#xA;&#xA;func (p Point) String() string {&#xA;    return fmt.Sprintf(&quot;(%d, %d)&quot;, p.x, p.y)&#xA;}&#xA;&#xA;func modifyValue(point Point) {&#xA;    point.x += 10&#xA;}&#xA;&#xA;func modifyPointer(point *Point) {&#xA;    point.x = 5&#xA;    point.y = 5&#xA;}&#xA;&#xA;func modifyReference(point *Point) {&#xA;    point = &amp;amp;Point{5, 5}&#xA;}&#xA;&#xA;func main() {&#xA;    p := Point{0, 0}&#xA;    fmt.Println(p) // prints (0, 0)&#xA;&#xA;    modifyValue(p)&#xA;    fmt.Println(p) // prints (0, 0)&#xA;&#xA;    modifyPointer(&amp;amp;p)&#xA;    fmt.Println(p) // prints (5, 5)&#xA;&#xA;    modifyReference(&amp;amp;p)&#xA;    fmt.Println(p) // prints (0, 0)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What happens inside &lt;strong&gt;modifyValue&lt;/strong&gt; function is that a totally different instance of Point structure is modified, so the value passed when calling the function is unaffected.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the second example, a pointer to the structure is passed so the fields of the structure can be modified in way that is visible from outside.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The most interesting point is made by the last function, &lt;strong&gt;modifyReference&lt;/strong&gt;. If you are familiar with the pass by reference paradigm available in other languages, you would expect being able to modify the referenced object altogether. Anyway, this doesn't happens. It's because you're modifying a &lt;strong&gt;copy&lt;/strong&gt; of the pointer passed as argument.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may wander, if everything is pass by value, when should you pass pointers and when values. Passing values assures the caller function that the passed structure cannot suffer any changes, so when needing this, go for the value. The downside of this is that a copy of the entire object is made and if it is too big, memory becomes a concern.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you're passing a big structure as argument, using a pointer is better because it saves space, but you lose the guarantee that the object won't suffer any changes.&lt;/p&gt;&#xA;"" OwnerUserId=""1513091"" LastEditorUserId=""1513091"" LastEditDate=""2017-07-03T18:21:26.083"" LastActivityDate=""2017-07-03T18:21:26.083"" CommentCount=""0"" />
",44873573
44873825,"44873825      <row Id=""44873825"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44873901"" PostTypeId=""2"" ParentId=""44873825"" CreationDate=""2017-07-02T18:21:51.157"" Score=""5"" Body=""&lt;p&gt;&lt;code&gt;Unix()&lt;/code&gt; always returns the number of seconds elapsed since January 1, 1970 UTC. So it does not matter whether you give it &lt;code&gt;time.Now()&lt;/code&gt; or &lt;code&gt;time.Now().UTC()&lt;/code&gt;, it is the same UTC time, just in different places on Earth. What you get as the result is correct.&lt;/p&gt;&#xA;"" OwnerUserId=""6444852"" LastActivityDate=""2017-07-02T18:21:51.157"" CommentCount=""0"" />
",44873901
44810708,"44810708      <row Id=""44810708"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44874097"" PostTypeId=""2"" ParentId=""44810708"" CreationDate=""2017-07-02T18:45:58.710"" Score=""3"" Body=""&lt;p&gt;This is due to different ed25519 private key formats. An ed25519 key starts out as a 32 byte &lt;em&gt;seed&lt;/em&gt;. This seed is hashed with SHA512 to produce 64 bytes (a couple of bits are flipped too). The first 32 bytes of these are used to generate the public key (which is also 32 bytes), and the last 32 bytes are used in the generation of the signature.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Golang private key format is the 32 byte seed concatenated with the 32 byte public key. The private keys in the Bittorrent document you are using are the 64 byte result of the hash (or possibly just 64 random bytes that are used the same way as the hash result).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since it’s not possible to reverse the hash, you can’t convert the Bittorrent keys to a format that the Golang API will accept.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can produce a version of the Golang lib based on the existing package.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The following code depends on the internal package &lt;code&gt;golang.org/x/crypto/ed25519/internal/edwards25519&lt;/code&gt;, so if you want to use it you will need to copy that package out so that it is available to you code. It’s also very “rough and ready”, I’ve basically just copied the chunks of code needed from the existing code to get this to work.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that the public key and signature formats are the same, so as long as you are not sharing private keys you don’t need to use this code to get a working implementation. You will only need it if you want to check the test vectors.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First generating the public key from a private key:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Generate the public key corresponding to the already hashed private&#xA;// key.&#xA;//&#xA;// This code is mostly copied from GenerateKey in the&#xA;// golang.org/x/crypto/ed25519 package, from after the SHA512&#xA;// calculation of the seed.&#xA;func getPublicKey(privateKey []byte) []byte {&#xA;    var A edwards25519.ExtendedGroupElement&#xA;    var hBytes [32]byte&#xA;    copy(hBytes[:], privateKey)&#xA;    edwards25519.GeScalarMultBase(&amp;amp;A, &amp;amp;hBytes)&#xA;    var publicKeyBytes [32]byte&#xA;    A.ToBytes(&amp;amp;publicKeyBytes)&#xA;&#xA;    return publicKeyBytes[:]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Next generating a signature:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Calculate the signature from the (pre hashed) private key, public key&#xA;// and message.&#xA;//&#xA;// This code is mostly copied from the Sign function from&#xA;// golang.org/x/crypto/ed25519, from after the SHA512 calculation of the&#xA;// seed.&#xA;func sign(privateKey, publicKey, message []byte) []byte {&#xA;&#xA;    var privateKeyA [32]byte&#xA;    copy(privateKeyA[:], privateKey) // we need this in an array later&#xA;    var messageDigest, hramDigest [64]byte&#xA;&#xA;    h := sha512.New()&#xA;    h.Write(privateKey[32:])&#xA;    h.Write(message)&#xA;    h.Sum(messageDigest[:0])&#xA;&#xA;    var messageDigestReduced [32]byte&#xA;    edwards25519.ScReduce(&amp;amp;messageDigestReduced, &amp;amp;messageDigest)&#xA;    var R edwards25519.ExtendedGroupElement&#xA;    edwards25519.GeScalarMultBase(&amp;amp;R, &amp;amp;messageDigestReduced)&#xA;&#xA;    var encodedR [32]byte&#xA;    R.ToBytes(&amp;amp;encodedR)&#xA;&#xA;    h.Reset()&#xA;    h.Write(encodedR[:])&#xA;    h.Write(publicKey)&#xA;    h.Write(message)&#xA;    h.Sum(hramDigest[:0])&#xA;    var hramDigestReduced [32]byte&#xA;    edwards25519.ScReduce(&amp;amp;hramDigestReduced, &amp;amp;hramDigest)&#xA;&#xA;    var s [32]byte&#xA;    edwards25519.ScMulAdd(&amp;amp;s, &amp;amp;hramDigestReduced, &amp;amp;privateKeyA, &amp;amp;messageDigestReduced)&#xA;&#xA;    signature := make([]byte, 64)&#xA;    copy(signature[:], encodedR[:])&#xA;    copy(signature[32:], s[:])&#xA;&#xA;    return signature&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Finally we can use these two functions to demonstrate the test vectors:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;privateKeyHex := &quot;e06d3183d14159228433ed599221b80bd0a5ce8352e4bdf0262f76786ef1c74db7e7a9fea2c0eb269d61e3b38e450a22e754941ac78479d6c54e1faf6037881d&quot;&#xA;&#xA;expectedPublicKey := &quot;77ff84905a91936367c01360803104f92432fcd904a43511876df5cdf3e7e548&quot;&#xA;expectedSig := &quot;6834284b6b24c3204eb2fea824d82f88883a3d95e8b4a21b8c0ded553d17d17ddf9a8a7104b1258f30bed3787e6cb896fca78c58f8e03b5f18f14951a87d9a08&quot;&#xA;&#xA;privateKey, _ := hex.DecodeString(privateKeyHex)&#xA;publicKey := getPublicKey(privateKey)&#xA;&#xA;fmt.Printf(&quot;Calculated key: %x\n&quot;, publicKey)&#xA;fmt.Printf(&quot;Expected key:   %s\n&quot;, expectedPublicKey)&#xA;keyMatches := expectedPublicKey == hex.EncodeToString(publicKey)&#xA;fmt.Printf(&quot;Public key matches expected: %v\n&quot;, keyMatches)&#xA;&#xA;buffer := []byte(&quot;4:salt6:foobar3:seqi1e1:v12:Hello World!&quot;)&#xA;calculatedSig := sign(privateKey, publicKey, buffer)&#xA;&#xA;fmt.Printf(&quot;Calculated sig: %x\n&quot;, calculatedSig)&#xA;fmt.Printf(&quot;Expected sig:   %s\n&quot;, expectedSig)&#xA;sigMatches := expectedSig == hex.EncodeToString(calculatedSig)&#xA;fmt.Printf(&quot;Signature matches expected: %v\n&quot;, sigMatches)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""214790"" LastActivityDate=""2017-07-02T18:45:58.710"" CommentCount=""1"" />
",44874097
44873287,"44873287      <row Id=""44873287"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44875736"" PostTypeId=""2"" ParentId=""44873287"" CreationDate=""2017-07-02T22:27:20.597"" Score=""1"" Body=""&lt;p&gt;&lt;code&gt;GetWindowRect()&lt;/code&gt; writes the geometry to the &lt;code&gt;RECT&lt;/code&gt; structure you pass the pointer to in. It operates exactly like the &lt;code&gt;GetWindowText()&lt;/code&gt; call you already have; the difference is you have to provide the &lt;code&gt;RECT&lt;/code&gt; structure yourself.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You &lt;em&gt;should&lt;/em&gt; be able to just get away with copying the structure verbatim. To substitute data types, use &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;this page&lt;/a&gt;. The definition for &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/dd162897(v=vs.85).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;RECT&lt;/code&gt;&lt;/a&gt; says all the fields are &lt;code&gt;LONG&lt;/code&gt;, which that page says is &quot;[a] 32-bit signed integer&quot;. So this &lt;em&gt;should&lt;/em&gt; suffice:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type RECT struct {&#xA;    left   int32 // or Left, Top, etc. if this type is to be exported&#xA;    top    int32&#xA;    right  int32&#xA;    bottom int32&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Most likely irrelevant, but it's worth pointing out that &lt;code&gt;RECT&lt;/code&gt; operates identically to &lt;code&gt;image.Rectangle&lt;/code&gt;, with &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; being &lt;code&gt;Min&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; being &lt;code&gt;Max&lt;/code&gt;. They are not identical because &lt;code&gt;image.Rectangle&lt;/code&gt; uses &lt;code&gt;int&lt;/code&gt;, so you may want to consider providing conversion functions if you want to use &lt;code&gt;image&lt;/code&gt;'s geometry functions to manipulate rectangles instead of GDI's.)&lt;/p&gt;&#xA;"" OwnerUserId=""3408572"" LastEditorUserId=""3408572"" LastEditDate=""2017-07-02T22:33:26.677"" LastActivityDate=""2017-07-02T22:33:26.677"" CommentCount=""1"" />
",44875736
44876315,"44876315      <row Id=""44876315"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44876353"" PostTypeId=""2"" ParentId=""44876315"" CreationDate=""2017-07-03T00:32:22.200"" Score=""3"" Body=""&lt;p&gt;It seems there is a three issues in your provided code snippet.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Struct field have to be exported, refer to &lt;a href=&quot;https://www.goinggo.net/2014/03/exportedunexported-identifiers-in-go.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Exported vs Unexported&lt;/a&gt; identifiers&lt;/li&gt;&#xA;&lt;li&gt;Your JSON data is invalid &lt;code&gt;invalid character '[' after array element {[]}&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Field data type definition&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I have updated your code here &lt;a href=&quot;https://play.golang.org/p/zX7KEPKB8H&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/zX7KEPKB8H&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Output &lt;code&gt;{[[1 2] [3 4]]}&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-07-03T00:32:22.200"" CommentCount=""0"" />
",44876353
44876666,"44876666      <row Id=""44876666"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44876827"" PostTypeId=""2"" ParentId=""44876666"" CreationDate=""2017-07-03T02:03:43.547"" Score=""2"" Body=""&lt;p&gt;Channel usage looks alright, however retrieving value from channel would overwrite previously read value at &lt;code&gt;buf := &amp;lt;-read&lt;/code&gt; since your waiting for newline.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also you can use &lt;code&gt;bufio.Reader&lt;/code&gt; to read string upto newline.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your code snippet is partial so its not feasible to execute, try and let me know:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func reader(r io.Reader, channel chan&amp;lt;- string) {&#xA;    bufReader := bufio.NewReader(conn)&#xA;    for {&#xA;        msg, err := bufReader.ReadString('\n')&#xA;        if err != nil { // connection error or connection reset error, etc&#xA;           break&#xA;        }&#xA;        channel &amp;lt;- msg&#xA;    }&#xA;}&#xA;&#xA;func client(e *gowd.Element) {&#xA;    f, err := os.Create(&quot;/tmp/dat2&quot;)&#xA;    if err != nil {&#xA;        log.Fatal()&#xA;    }&#xA;    read := make(chan string)&#xA;    c, err := net.Dial(&quot;tcp&quot;, &quot;127.0.0.1:4242&quot;)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    go reader(c, read)&#xA;    for {&#xA;        msg := &amp;lt;-read&#xA;        if msg == &quot;WELCOME&quot; {&#xA;            fmt.Fprint(c, &quot;GRAPHIC\n&quot;)&#xA;        }&#xA;        f.WriteString(msg + &quot;\n&quot;)&#xA;    }&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Please find example of generic TCP client to read data. Also I have removed scanner from above code snippet and added buffer reader.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    conn, err := net.Dial(&quot;tcp&quot;, &quot;127.0.0.1:4242&quot;)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    reader := bufio.NewReader(conn)&#xA;    for {&#xA;        msg, err := reader.ReadString('\n')&#xA;        if err != nil {&#xA;            break&#xA;        }&#xA;        fmt.Println(msg)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-03T20:43:52.943"" LastActivityDate=""2017-07-03T20:43:52.943"" CommentCount=""8"" />
",44876827
44882827,"44882827      <row Id=""44882827"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44882993"" PostTypeId=""2"" ParentId=""44882827"" CreationDate=""2017-07-03T10:13:47.563"" Score=""2"" Body=""&lt;p&gt;use &lt;code&gt;reflect.MakeSlice&lt;/code&gt; instead.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;reflect&quot;&#xA;)&#xA;&#xA;func resetSlice(slice interface{}) {&#xA;    v := reflect.ValueOf(slice)&#xA;    v.Elem().Set(reflect.MakeSlice(v.Type().Elem(), 0, v.Elem().Cap()))&#xA;}&#xA;&#xA;&#xA;func main() {&#xA;    a := []string{&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;}  &#xA;    resetSlice(&amp;amp;a)&#xA;    fmt.Println(a)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/JNWE0hCsQp&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/JNWE0hCsQp&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""720391"" LastActivityDate=""2017-07-03T10:13:47.563"" CommentCount=""0"" />
",44882993
44883077,"44883077      <row Id=""44883077"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44884018"" PostTypeId=""2"" ParentId=""44883077"" CreationDate=""2017-07-03T11:07:18.753"" Score=""2"" Body=""&lt;p&gt;Your project structure isn't the one Go expects.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;area_test/&lt;/code&gt; are not the tests for &lt;code&gt;area&lt;/code&gt;. I'm going to guess you ran &lt;code&gt;go test ./area_test&lt;/code&gt;. That tells Go that &lt;code&gt;./area_test&lt;/code&gt; is a project. It tried to compile &lt;code&gt;area_mock.go&lt;/code&gt; and tried to use &lt;code&gt;area_mock_test.go&lt;/code&gt; and &lt;code&gt;area_suite_test.go&lt;/code&gt; as its tests. The error you got is Go's awkward way of telling you that it did not expect to find a package named &lt;code&gt;*_test&lt;/code&gt; in a project file.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;area.go&lt;/code&gt; is also a problem. You have it using &lt;code&gt;package main&lt;/code&gt;, but then try to test with &lt;code&gt;package area_test&lt;/code&gt;. They don't match and Go won't like it. A package directory contains &lt;strong&gt;&lt;em&gt;one package&lt;/em&gt;&lt;/strong&gt;. Its tests must use either that package or &lt;code&gt;thatpackage_test&lt;/code&gt;. This enforces that a package directory does one thing. Its either a library to import, or its a program to run. Not both.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also the project directory is called &lt;code&gt;square&lt;/code&gt;, but the package is &lt;code&gt;area&lt;/code&gt;. It's ok to have files that don't match the project name, and its fine to have multiple files in one package, but using a package than the project directory name is not good practice.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;There's another problem. Go expects source files to be in &lt;code&gt;$GOPATH/src&lt;/code&gt;. You have them directly in &lt;code&gt;$GOPATH&lt;/code&gt;. Import statements won't find them.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Go's project structure can take a bit of getting used to, and it has very firm ideas about how projects and packages are to be structured (Go has very firm ideas about how code is to be written, and how it isn't). Don't fight it. Do yourself a favor and use the default &lt;code&gt;GOPATH&lt;/code&gt; of &lt;code&gt;~/go&lt;/code&gt; and put your code in &lt;code&gt;~/go/src/&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You'd write the square library like so.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;~/go/src/square/&#xA;|--- square.go&#xA;|--- square_test.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;square.go might look like this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package square&#xA;&#xA;type Square struct {&#xA;    Side float32&#xA;}&#xA;&#xA;func (s Square) Area() float32 {&#xA;    return s.Side * s.Side&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that &lt;code&gt;Side&lt;/code&gt; must be capitalized for it to be a public data member. Also note that its passed by value, in Go the style is to only pass by pointer if you intend to modify the struct.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;square_test.go might look like this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package square_test&#xA;&#xA;import(&#xA;    &quot;testing&quot;&#xA;    &quot;square&quot;&#xA;    &quot;github.com/stvp/assert&quot;&#xA;)&#xA;&#xA;func TestArea( t *testing.T ) {&#xA;    sq := square.Square{Side: 5}&#xA;&#xA;    assert.Equal( t, sq.Area(), float32(25) )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Go does not come with any asserts. &lt;a href=&quot;https://github.com/stvp/assert&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;github.com/stvp/assert&lt;/code&gt;&lt;/a&gt; provides the basics and removes a lot of tedium. You can get it with &lt;code&gt;go get github.com/stvp/assert&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that it is in &lt;code&gt;package square_test&lt;/code&gt; to make this a blackbox test which can only use the public interface of &lt;code&gt;square&lt;/code&gt;. If you wanted a glassbox/internal test, it would use &lt;code&gt;package square&lt;/code&gt; and go in its own file like &lt;code&gt;square_internal_test.go&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want a program that uses square, that would be in its own separate package directory. It would have a &lt;code&gt;main.go&lt;/code&gt; with &lt;code&gt;package main&lt;/code&gt; and &lt;code&gt;import &quot;square&quot;&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/doc/code.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;How To Write Go&lt;/a&gt; explains this in more detail.&lt;/p&gt;&#xA;"" OwnerUserId=""14660"" LastEditorUserId=""14660"" LastEditDate=""2017-07-03T11:12:54.857"" LastActivityDate=""2017-07-03T11:12:54.857"" CommentCount=""3"" />
",44884018
44884766,"44884766      <row Id=""44884766"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44884981"" PostTypeId=""2"" ParentId=""44884766"" CreationDate=""2017-07-03T11:57:03.240"" Score=""1"" Body=""&lt;p&gt;The problem is that the &quot;content&quot; produced by the reader you pass to &lt;code&gt;gz.NewReader()&lt;/code&gt; is not a valid gzip stream (data). If &lt;code&gt;gzip.NewReader()&lt;/code&gt; returns a non-&lt;code&gt;nil&lt;/code&gt; error (as it does in your case), the returned &lt;code&gt;gzReader&lt;/code&gt; may be &lt;code&gt;nil&lt;/code&gt; (and it usually is).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you pass a valid gzip stream to &lt;code&gt;gzip.NewReader()&lt;/code&gt;, the returned &lt;code&gt;gzReader&lt;/code&gt; will not be &lt;code&gt;nil&lt;/code&gt;, and decoding will succeed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example the gzip encoded form of the text &lt;code&gt;&quot;hello&quot;&lt;/code&gt; is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[31 139 8 0 0 0 0 0 0 255 203 72 205 201 201 7 0 134 166 16 54 5 0 0 0]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using this as the input:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;data := []byte{31, 139, 8, 0, 0, 0, 0, 0, 0,&#xA;    255, 203, 72, 205, 201, 201, 7, 0, 134, 166, 16, 54, 5, 0, 0, 0}&#xA;reader := bytes.NewReader(data)&#xA;// The rest is unchanged&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It works, and the output is (try it on the &lt;a href=&quot;https://play.golang.org/p/wvjlodJOWq&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;amp;{[31 139 8 0 0 0 0 0 0 255 203 72 205 201 201 7 0 134 166 16 54 5 0 0 0] 0 -1}&#xA;&amp;amp;{{ [] 0001-01-01 00:00:00 +0000 UTC  255} 0x10440260 0x10462000 0 0 [31 139 8 0 0 0 0 0 0 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] &amp;lt;nil&amp;gt; true}&#xA;hello&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastActivityDate=""2017-07-03T11:57:03.240"" CommentCount=""3"" />
",44884981
44885848,"44885848      <row Id=""44885848"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44885877"" PostTypeId=""2"" ParentId=""44885848"" CreationDate=""2017-07-03T12:42:02.403"" Score=""2"" Body=""&lt;pre&gt;&lt;code&gt;func Print(d Displayable) {&#xA;     d.Display()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""142162"" LastActivityDate=""2017-07-03T12:42:02.403"" CommentCount=""1"" />
",44885877
44886135,"44886135      <row Id=""44886135"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44886153"" PostTypeId=""2"" ParentId=""44886135"" CreationDate=""2017-07-03T12:55:04.460"" Score=""1"" Body=""&lt;p&gt;Use &lt;a href=&quot;https://godoc.org/os#NewFile&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;os.NewFile&lt;/code&gt;&lt;/a&gt; to &quot;open&quot; an existing file by its file descriptor:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;func NewFile(fd uintptr, name string) *File&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;NewFile returns a new File with the given file descriptor and name.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;file := os.NewFile(5, &quot;pipe&quot;)&#xA;_, err := file.Write([]byte(`my data`))&#xA;if err != nil {&#xA;    panic(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""142162"" LastEditorUserId=""142162"" LastEditDate=""2017-07-03T13:48:03.317"" LastActivityDate=""2017-07-03T13:48:03.317"" CommentCount=""0"" />
",44886153
44887356,"44887356      <row Id=""44887356"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44887583"" PostTypeId=""2"" ParentId=""44887356"" CreationDate=""2017-07-03T14:02:58.837"" Score=""2"" Body=""&lt;p&gt;The error means exactly what it says: you're trying to assign the return value of a function to a variable that's of a different type than the return value, which is invalid. When you define a new type, it's a new type, and not directly assignable. You can &lt;em&gt;cast&lt;/em&gt; between them, but there is &lt;em&gt;no implicit casting in Go&lt;/em&gt; - the cast &lt;em&gt;must&lt;/em&gt; be done explicitly:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    var args CmdArgs&#xA;    normalArgs := cmd.Args()&#xA;    args = CmdArgs(normalArgs)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Though I have to wonder why you're creating a new type &lt;code&gt;CmdArgs&lt;/code&gt; to begin with, but I assume there's some reason that's not indicated in the code example. You might have an easier time embedding rather than aliasing, however.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-03T14:02:58.837"" CommentCount=""1"" />
",44887583
44889361,"44889361      <row Id=""44889361"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44890106"" PostTypeId=""2"" ParentId=""44889361"" CreationDate=""2017-07-03T16:15:55.133"" Score=""3"" Body=""&lt;p&gt;Maybe this is your expected. It's possible to implement custom MarshalJSON/UnmarshalJSON.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;errors&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;)&#xA;&#xA;type Timestamp struct {&#xA;    Zero []string&#xA;    One  []float32&#xA;    Two  []float32&#xA;}&#xA;&#xA;func (t *Timestamp) UnmarshalJSON(b []byte) error {&#xA;    var arr [][3]interface{}&#xA;    err := json.Unmarshal(b, &amp;amp;arr)&#xA;    if err != nil {&#xA;        return nil&#xA;    }&#xA;    t.Zero = nil&#xA;    t.One = nil&#xA;    t.Two = nil&#xA;    for _, v := range arr {&#xA;        if len(v) != 3 {&#xA;            return errors.New(&quot;invalid json&quot;)&#xA;        }&#xA;        if s, ok := v[0].(string); ok {&#xA;            t.Zero = append(t.Zero, s)&#xA;        }&#xA;        if f, ok := v[1].(float64); ok {&#xA;            t.One = append(t.One, float32(f))&#xA;        }&#xA;        if f, ok := v[2].(float64); ok {&#xA;            t.Two = append(t.Two, float32(f))&#xA;        }&#xA;    }&#xA;    return nil&#xA;}&#xA;&#xA;func (t *Timestamp) MarshalJSON() ([]byte, error) {&#xA;    var arr [][3]interface{}&#xA;    var max int&#xA;    if max &amp;lt; len(t.Zero) {&#xA;        max = len(t.Zero)&#xA;    }&#xA;    if max &amp;lt; len(t.One) {&#xA;        max = len(t.One)&#xA;    }&#xA;    if max &amp;lt; len(t.Two) {&#xA;        max = len(t.Two)&#xA;    }&#xA;    for i := 0; i &amp;lt; max; i++ {&#xA;        var v [3]interface{}&#xA;        if i &amp;lt; len(t.Zero) {&#xA;            v[0] = t.Zero[i]&#xA;        }&#xA;        if i &amp;lt; len(t.One) {&#xA;            v[1] = t.One[i]&#xA;        }&#xA;        if i &amp;lt; len(t.Two) {&#xA;            v[2] = t.Two[i]&#xA;        }&#xA;        arr = append(arr, v)&#xA;    }&#xA;    return json.Marshal(arr)&#xA;}&#xA;&#xA;const j = `[[&quot;my&quot;,257.14,257.24],[&quot;txt&quot;, 121.11, 65.555]]`&#xA;&#xA;func main() {&#xA;    var ts Timestamp&#xA;    err := json.Unmarshal([]byte(j), &amp;amp;ts)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    b, err := json.Marshal(&amp;amp;ts)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    fmt.Println(string(b))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/WtVEja1JDY&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/WtVEja1JDY&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""720391"" LastActivityDate=""2017-07-03T16:15:55.133"" CommentCount=""2"" />
",44890106
44890827,"44890827      <row Id=""44890827"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44890997"" PostTypeId=""2"" ParentId=""44890827"" CreationDate=""2017-07-03T17:17:32.210"" Score=""1"" Body=""&lt;p&gt;Here you are.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;bytes&quot;&#xA;    &quot;encoding/json&quot;&#xA;    &quot;io&quot;&#xA;    &quot;log&quot;&#xA;    &quot;net/http&quot;&#xA;    &quot;os&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;type Elememt struct {&#xA;    ID int `json:&quot;id&quot;`&#xA;    FirstName string `json:&quot;first_name&quot;`&#xA;    LastName string `json:&quot;last_name&quot;`&#xA;    Time time.Time `json:&quot;time&quot;`&#xA;    Count int `json:&quot;count&quot;`&#xA;    Payout string `json:&quot;payout&quot;`&#xA;}&#xA;&#xA;func main() {&#xA;    elements := []Elememt {&#xA;        {&#xA;            ID: 1,&#xA;            FirstName: &quot;Dmitriy&quot;,&#xA;            LastName: &quot;Groschovskiy&quot;,&#xA;            Time: time.Now(),&#xA;            Count: 1,&#xA;            Payout: &quot;200&quot;,&#xA;        },&#xA;        {&#xA;            ID: 2,&#xA;            FirstName: &quot;Yasuhiro&quot;,&#xA;            LastName: &quot;Matsumoto&quot;,&#xA;            Time: time.Now(),&#xA;            Count: 2,&#xA;            Payout: &quot;150&quot;,&#xA;        },&#xA;    }&#xA;&#xA;    var buf bytes.Buffer&#xA;    err := json.NewEncoder(&amp;amp;buf).Encode(elements)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    req, err := http.NewRequest(&quot;POST&quot;, &quot;http://httpbin.org/post&quot;, &amp;amp;buf)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    resp, err := http.DefaultClient.Do(req)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    defer resp.Body.Close()&#xA;&#xA;    io.Copy(os.Stdout, resp.Body)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""720391"" LastActivityDate=""2017-07-03T17:17:32.210"" CommentCount=""2"" />
",44890997
44892236,"44892236      <row Id=""44892236"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44892588"" PostTypeId=""2"" ParentId=""44892236"" CreationDate=""2017-07-03T19:16:35.687"" Score=""1"" Body=""&lt;p&gt;Your code seems fine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But in the request, &lt;code&gt;params&lt;/code&gt; is expected to be an array containing the actual parameters.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try with the following payload and it should work:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{ &#xA;  &quot;jsonrpc&quot;:&quot;2.0&quot;,&#xA;  &quot;method&quot;:&quot;Arithmetic.Multiply&quot;, &#xA;  &quot;params&quot;: [ { &quot;A&quot;: 5, &quot;B&quot;: 6 } ], &#xA;  &quot;id&quot;:1 &#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Note the &quot;[&quot; and &quot;]&quot; enclosing the actual param)&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-03T19:16:35.687"" CommentCount=""1"" />
",44892588
44893202,"44893202      <row Id=""44893202"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44894148"" PostTypeId=""2"" ParentId=""44893202"" CreationDate=""2017-07-03T21:34:39.663"" Score=""2"" Body=""&lt;p&gt;Cross-posting my answer from &lt;a href=&quot;https://github.com/Knetic/govaluate/issues/62&quot; rel=&quot;nofollow noreferrer&quot;&gt;the associated github issue&lt;/a&gt;, for future googlers;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The library doesn't try to parse string parameters as dates - it expects that &lt;code&gt;birth_date&lt;/code&gt; will be the &lt;a href=&quot;https://golang.org/pkg/time/#Time.Unix&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Unix()&lt;/code&gt;&lt;/a&gt; value of that date. This means you'll have to parse the date before passing it to govaluate.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you're getting &lt;code&gt;birth_date&lt;/code&gt; as part of a REST api, I'd suggest settling on one specific date format (such as ISO8601) and doing something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var birthDateString string // &amp;lt;-- the birth_date string you get from the request&#xA;&#xA;iso8601 := &quot;2006-01-02T15:04:05Z0700&quot;&#xA;&#xA;birthDate, err := time.ParseInLocation(iso8601, birthDateString, &#xA;time.Local)&#xA;parameters[&quot;birth_date&quot;] = birthDate.Unix()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""860453"" LastEditorUserId=""860453"" LastEditDate=""2017-07-03T22:18:03.593"" LastActivityDate=""2017-07-03T22:18:03.593"" CommentCount=""0"" />
",44894148
44895535,"44895535      <row Id=""44895535"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44895648"" PostTypeId=""2"" ParentId=""44895535"" CreationDate=""2017-07-04T01:21:22.887"" Score=""2"" Body=""&lt;p&gt;You have to define slice of &lt;code&gt;Weather&lt;/code&gt; struct in &lt;code&gt;WeatherData&lt;/code&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Uncomment &lt;code&gt;Weather&lt;/code&gt; struct and update &lt;code&gt;WeatherData&lt;/code&gt; struct to following.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// WeatherData struct to collect data from the API call&#xA;type WeatherData struct {&#xA;    Wind    Wind      `json:&quot;wind&quot;`&#xA;    Sys     Sys       `json:&quot;sys&quot;`&#xA;    Weather []Weather `json:&quot;weather&quot;`&#xA;    Name    string    `json:&quot;name&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Please have a look on example code: &lt;a href=&quot;https://play.golang.org/p/4KFqRuxcx2&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/4KFqRuxcx2&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-07-04T01:21:22.887"" CommentCount=""3"" />
",44895648
44895454,"44895454      <row Id=""44895454"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44896302"" PostTypeId=""2"" ParentId=""44895454"" CreationDate=""2017-07-04T02:57:44.670"" Score=""2"" Body=""&lt;p&gt;I am not sure if this is what you need, but you can take a look at this one &lt;a href=&quot;https://github.com/goreleaser/goreleaser&quot; rel=&quot;nofollow noreferrer&quot;&gt;goreleaser&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;GoReleaser builds Go binaries for several platforms, creates a GitHub&#xA;  release and then pushes a Homebrew formula to a repository. All that&#xA;  wrapped in your favorite CI.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""2160958"" LastActivityDate=""2017-07-04T02:57:44.670"" CommentCount=""1"" />
",44896302
44715768,"44715768      <row Id=""44715768"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44896646"" PostTypeId=""2"" ParentId=""44715768"" CreationDate=""2017-07-04T03:39:30.277"" Score=""0"" Body=""&lt;p&gt;I found there is at least one method: embedded into index.tpl.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bee new newapp&#xA;cd $GOPATH/src/newapp&#xA;bee run  # you will see the favicon of a bee.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Modify the embedded text in $GOPATH/src/view/index.tpl to yours, here is a linux script&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cd views&#xA;# assume you have put the favicon.ico in this directory&#xA;base64 -w0 favicon.ico &amp;gt; favicon.b64&#xA;cp index.tpl index.tpl.old&#xA;sed 's/base64,.*&quot;/base64,\n&quot;/' index.tpl.old | sed '7r favicon.b64' &amp;gt; index.tpl&#xA;# rm favicon.ico favicon.b64  index.tpl.old # remove the temp file&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""730346"" LastActivityDate=""2017-07-04T03:39:30.277"" CommentCount=""0"" />
",44896646
44898833,"44898833      <row Id=""44898833"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44898923"" PostTypeId=""2"" ParentId=""44898833"" CreationDate=""2017-07-04T06:55:40.183"" Score=""2"" Body=""&lt;p&gt;Adding a new block will create a new variable scope, and variables declared in that block will not be available outside of it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var endpoints s.Endpoints&#xA;{&#xA;    repository := acl.NewRepository(db)&#xA;    service := stat.NewService(repository)&#xA;    endpoints = s.Endpoints{&#xA;        GetEndpoint: s.MakeEndpoint(service),&#xA;    }&#xA;}&#xA;&#xA;// service and repository  variables are not defined here!&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In your specific simplified example it makes little sense, but if you have other blocks with the same variables it makes more sense. For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var endpoints s.Endpoints&#xA;{&#xA;    repository := acl.NewRepository(db)&#xA;    service := stat.NewService(repository)&#xA;    endpoints = s.Endpoints{&#xA;        GetEndpoint: s.MakeEndpoint(service),&#xA;    }&#xA;}&#xA;&#xA; // Get another repository&#xA;{&#xA;    repository := otherRepo.NewRepository(db)&#xA;    repository.DoSomething()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Some people consider this &quot;good hygiene&quot;. Personally, I don't think it's worth the decrease in readability.&lt;/p&gt;&#xA;"" OwnerUserId=""660921"" LastActivityDate=""2017-07-04T06:55:40.183"" CommentCount=""2"" />
",44898923
44900065,"44900065      <row Id=""44900065"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44900370"" PostTypeId=""2"" ParentId=""44900065"" CreationDate=""2017-07-04T08:07:11.583"" Score=""1"" Body=""&lt;p&gt;Everything you pass to &lt;a href=&quot;https://golang.org/pkg/reflect/#DeepEqual&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;reflect.DeepEqual()&lt;/code&gt;&lt;/a&gt; is wrapped in an &lt;code&gt;interface{}&lt;/code&gt; value (if it's not already that):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func DeepEqual(x, y interface{}) bool&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;interface{}&lt;/code&gt; values will be compared, where the first parameter value &lt;strong&gt;is not &lt;code&gt;nil&lt;/code&gt;&lt;/strong&gt;, only the value wrapped in it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;An interface value is represented as a &lt;code&gt;(type; value)&lt;/code&gt; pair. The first value you pass to &lt;code&gt;reflect.DeepEqual()&lt;/code&gt; is a pair of &lt;code&gt;(type; value)&lt;/code&gt; being &lt;code&gt;(*Obj, nil)&lt;/code&gt;, and the 2nd value is &lt;code&gt;nil&lt;/code&gt;. They are not equal. The second value lacks type information.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you compare it to a &quot;typed&quot; &lt;code&gt;nil&lt;/code&gt;, it will be &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;reflect.DeepEqual(c.O, (*Obj)(nil)) // This is true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See this example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Println(&quot;c.O:&quot;, c.O)&#xA;fmt.Println(&quot;c.O == nil:&quot;, c.O == nil)&#xA;fmt.Println(&quot;c.O deep equal to nil:&quot;, reflect.DeepEqual(c.O, nil))&#xA;fmt.Println(&quot;c.O deep equal to (*Obj)(nil):&quot;, reflect.DeepEqual(c.O, (*Obj)(nil)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/vqXVOZpxNN&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;c.O: &amp;lt;nil&amp;gt;&#xA;c.O == nil: true&#xA;c.O deep equal to nil: false&#xA;c.O deep equal to (*Obj)(nil): true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See this question for a deeper insight:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/29138591/hiding-nil-values-understanding-why-golang-fails-here/29138676#29138676&quot;&gt;Hiding nil values, understanding why golang fails here&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to check if the value wrapped inside a non-&lt;code&gt;nil&lt;/code&gt; interface is &lt;code&gt;nil&lt;/code&gt;, you can use reflection: &lt;a href=&quot;https://golang.org/pkg/reflect/#Value.IsNil&quot; rel=&quot;nofollow noreferrer&quot;&gt;reflect.Value.IsNil()&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For more details see: &lt;a href=&quot;https://stackoverflow.com/questions/43895862/why-interface-type-doesnt-provide-an-isnil-method/43896204#43896204&quot;&gt;Why interface type doesn&amp;#39;t provide an &amp;quot;IsNil&amp;quot; method?&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-04T08:14:57.163"" LastActivityDate=""2017-07-04T08:14:57.163"" CommentCount=""1"" />
",44900370
44893435,"44893435      <row Id=""44893435"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44904743"" PostTypeId=""2"" ParentId=""44893435"" CreationDate=""2017-07-04T11:27:24.723"" Score=""0"" Body=""&lt;p&gt;No, this is not possible.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to use folders inside your go project you have to use several packages.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;NOT VALID&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;myproject&#xA;| -- main.go (package main)&#xA;| -- routes.go (package main)&#xA;+ -- models&#xA;     | -- db.go (package main)&#xA;     | -- mymodel.go (package main)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;VALID&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;myproject&#xA;| -- main.go (package main)&#xA;| -- routes.go (package main)&#xA;+ -- models&#xA;     | -- db.go (package models)&#xA;     | -- mymodel.go (package models)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1322651"" LastActivityDate=""2017-07-04T11:27:24.723"" CommentCount=""0"" />
",44904743
44905386,"44905386      <row Id=""44905386"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44905592"" PostTypeId=""2"" ParentId=""44905386"" CreationDate=""2017-07-04T12:08:00.523"" Score=""2"" Body=""&lt;p&gt;Don't pass a pointer to interface. Instead the &lt;code&gt;interface{}&lt;/code&gt; value should contain the pointer. And simply just hand over this &lt;code&gt;interface{}&lt;/code&gt; value:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func LoadTemplate(templateData interface) {&#xA;  appendCustomData(templateData)&#xA;  ... //other functionality that is not relevant&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Even if you can't use a more concrete type than &lt;code&gt;interface{}&lt;/code&gt; (because you must allow multiple types), you can still use &lt;a href=&quot;https://golang.org/ref/spec#Type_assertions&quot; rel=&quot;nofollow noreferrer&quot;&gt;type assertion&lt;/a&gt;, it will be &quot;super&quot; easy:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func appendCustomData(d interface{}) {&#xA;    if ps, ok := d.(*pageStruct); ok {&#xA;        ps.TemplateData.HeaderCSS += &quot;+new&quot;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Try this one on the &lt;a href=&quot;https://play.golang.org/p/7c7ctLx4mf&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you must or want to use reflection, this is how &lt;code&gt;appendCustomData()&lt;/code&gt; can be implemented:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Data struct {&#xA;    Name  string&#xA;    Age   int&#xA;    Marks []int&#xA;}&#xA;&#xA;func appendCustomData(d interface{}) {&#xA;    v := reflect.ValueOf(d).Elem()&#xA;&#xA;    if f := v.FieldByName(&quot;Name&quot;); f.IsValid() {&#xA;        f.SetString(f.Interface().(string) + &quot;2&quot;)&#xA;    }&#xA;&#xA;    if f := v.FieldByName(&quot;Age&quot;); f.IsValid() {&#xA;        f.SetInt(f.Int() + 2)&#xA;    }&#xA;&#xA;    if f := v.FieldByName(&quot;Marks&quot;); f.IsValid() {&#xA;        f.Set(reflect.ValueOf(append(f.Interface().([]int), 2)))&#xA;    }&#xA;&#xA;    if f := v.FieldByName(&quot;Invalid&quot;); f.IsValid() {&#xA;        f.Set(reflect.ValueOf(append(f.Interface().([]int), 2)))&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Testing it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;d := &amp;amp;Data{&#xA;    Name:  &quot;Bob&quot;,&#xA;    Age:   22,&#xA;    Marks: []int{5, 4, 3},&#xA;}&#xA;fmt.Printf(&quot;%+v\n&quot;, d)&#xA;appendCustomData(d)&#xA;fmt.Printf(&quot;%+v\n&quot;, d)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/ggvUqNV6IO&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;amp;{Name:Bob Age:22 Marks:[5 4 3]}&#xA;&amp;amp;{Name:Bob2 Age:24 Marks:[5 4 3 2]}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To answer your edited question: there is no difference when the value passed is a struct that embeds another struct. But the value wrapped in the &lt;code&gt;interface{}&lt;/code&gt; still must be a pointer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Example &lt;code&gt;appendCustomData()&lt;/code&gt; that appends content to &lt;code&gt;pageStruct.TemplateData.HeaderCSS&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func appendCustomData(d interface{}) {&#xA;    v := reflect.ValueOf(d).Elem()&#xA;&#xA;    if f := v.FieldByName(&quot;TemplateData&quot;); f.IsValid() {&#xA;        if f = f.FieldByName(&quot;HeaderCSS&quot;); f.IsValid() {&#xA;            f.Set(reflect.ValueOf(f.Interface().(template.HTML) + &quot;+new&quot;))&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Testing it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ps := &amp;amp;pageStruct{&#xA;    TemplateData: TemplateData{&#xA;        HeaderCSS: template.HTML(&quot;old&quot;),&#xA;    },&#xA;}&#xA;fmt.Printf(&quot;%+v\n&quot;, ps)&#xA;appendCustomData(ps)&#xA;fmt.Printf(&quot;%+v\n&quot;, ps)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/qLNAnV2OxL&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;amp;{TemplateData:{FooterJS: HeaderJS: HeaderCSS:old} Form:}&#xA;&amp;amp;{TemplateData:{FooterJS: HeaderJS: HeaderCSS:old+new} Form:}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-04T12:43:49.150"" LastActivityDate=""2017-07-04T12:43:49.150"" CommentCount=""5"" />
",44905592
44907323,"44907323      <row Id=""44907323"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44907984"" PostTypeId=""2"" ParentId=""44907323"" CreationDate=""2017-07-04T14:00:59.540"" Score=""2"" Body=""&lt;p&gt;When you think you're &quot;trimming the padding&quot;, you're removing three zeros that belong on the end of the gzip stream. Just because it's a zero doesn't mean it's padding. Keep the three zeros after the 153.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you're not trimming the padding, a gzip decoder will look for another gzip stream after it successfully decompresses the first one. Seeing zeros instead of a gzip header results in the invalid gzip header error.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You need to keep track of the size of the gzip stream, so that you know what's padding and what isn't. Or you can decode a gzip stream at a time, and when you see following zeros, you can conclude that that's padding.&lt;/p&gt;&#xA;"" OwnerUserId=""1180620"" LastActivityDate=""2017-07-04T14:00:59.540"" CommentCount=""2"" />
",44907984
44911726,"44911726      <row Id=""44911726"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44911964"" PostTypeId=""2"" ParentId=""44911726"" CreationDate=""2017-07-04T18:09:04.513"" Score=""1"" Body=""&lt;p&gt;Get new context from context.WithDeadline. See &lt;a href=&quot;https://golang.org/pkg/context/#WithDeadline&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation&lt;/a&gt;.&#xA;WithTimeout just returns WithDeadline(parent, time.Now().Add(timeout)).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;context&quot;&#xA;    &quot;io&quot;&#xA;    &quot;log&quot;&#xA;    &quot;net/http&quot;&#xA;    &quot;os&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;func getContent(ctx context.Context) {&#xA;    req, err := http.NewRequest(&quot;GET&quot;, &quot;http://example.com&quot;, nil)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    ctx, cancel := context.WithDeadline(ctx, time.Now().Add(3 * time.Second))&#xA;    defer cancel()&#xA;&#xA;    req.WithContext(ctx)&#xA;&#xA;    resp, err := http.DefaultClient.Do(req)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    defer resp.Body.Close()&#xA;    io.Copy(os.Stdout, resp.Body)&#xA;}&#xA;&#xA;func main() {&#xA;    ctx := context.Background()&#xA;    getContent(ctx)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you want to make cancel trigger on main:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    ctx := context.Background()&#xA;    ctx, cancel := context.WithCancel(ctx)&#xA;&#xA;    sc := make(chan os.Signal, 1)&#xA;    signal.Notify(sc, os.Interrupt)&#xA;    go func(){&#xA;        &amp;lt;-sc&#xA;        cancel()&#xA;    }()&#xA;&#xA;    getContent(ctx)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""720391"" LastActivityDate=""2017-07-04T18:09:04.513"" CommentCount=""2"" />
",44911964
44912001,"44912001      <row Id=""44912001"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44912155"" PostTypeId=""2"" ParentId=""44912001"" CreationDate=""2017-07-04T18:23:49.120"" Score=""3"" Body=""&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;type Mappings []struct {&#xA;    PropA       string  &#xA;    PropB       string &#xA;}&#xA;&#xA;func main() {&#xA;    var test Mappings&#xA;    test = Mappings{&#xA;        {PropA: &quot;foo&quot;, PropB: &quot;bar&quot;},&#xA;        {PropA: &quot;bar&quot;, PropB: &quot;baz&quot;},&#xA;    }&#xA;    fmt.Println(test)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""720391"" LastActivityDate=""2017-07-04T18:23:49.120"" CommentCount=""5"" />
",44912155
44911902,"44911902      <row Id=""44911902"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44912429"" PostTypeId=""2"" ParentId=""44911902"" CreationDate=""2017-07-04T18:46:43.027"" Score=""2"" Body=""&lt;p&gt;You don't have to learn these methods and functions by heart, whenever you look for something, check the package documentation. The doc of the package in question can be found here: &lt;a href=&quot;https://golang.org/pkg/math/big/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;math/big&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As you can see in the doc, there is a &lt;a href=&quot;https://golang.org/pkg/math/big/#Rat.SetString&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Rat.SetString()&lt;/code&gt;&lt;/a&gt; method for the &lt;a href=&quot;https://golang.org/pkg/math/big/#Rat&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;big.Rat&lt;/code&gt;&lt;/a&gt; type too which you can use for this purpose:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;func (z *Rat) SetString(s string) (*Rat, bool)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;SetString sets z to the value of s and returns z and a boolean indicating success. s can be given as a fraction &quot;a/b&quot; or as a floating-point number optionally followed by an exponent. The entire string (not just a prefix) must be valid for success. If the operation failed, the value of z is un- defined but the returned value is nil.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Example using it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;r := big.NewRat(1, 1)&#xA;if _, ok := r.SetString(&quot;2023930943509509&quot;); !ok {&#xA;    fmt.Println(&quot;Failed to parse the string!&quot;)&#xA;}&#xA;fmt.Println(r)&#xA;fmt.Println(r.FloatString(2))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/XRr_Hajhui&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;2023930943509509/1&#xA;2023930943509509.00&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastActivityDate=""2017-07-04T18:46:43.027"" CommentCount=""0"" />
",44912429
44895747,"44895747      <row Id=""44895747"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44913616"" PostTypeId=""2"" ParentId=""44895747"" CreationDate=""2017-07-04T20:26:14.437"" Score=""1"" Body=""&lt;p&gt;Let's assume your tree has &lt;code&gt;N&lt;/code&gt; nodes on the final (most numerous) row.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you do store the nodes that are only propagated upwards, your tree has between &lt;code&gt;2*N-1&lt;/code&gt; and &lt;code&gt;2*N-1+log2(N)&lt;/code&gt; nodes, total. The exact total number of nodes is given by &lt;a href=&quot;http://oeis.org/A120511&quot; rel=&quot;nofollow noreferrer&quot;&gt;OEIS A120511&lt;/a&gt;. Of these, at most &lt;code&gt;floor(2 + log2(N-1))&lt;/code&gt; are copied/propagated nodes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The tree has &lt;code&gt;floor(2 + log2(N-1))&lt;/code&gt; rows. The number of rows as a function of  &lt;code&gt;N&lt;/code&gt; (the number of elements on the final row) is &lt;a href=&quot;http://oeis.org/A070941&quot; rel=&quot;nofollow noreferrer&quot;&gt;OEIS A070941&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The number of rows in such trees is quite low. For example, if you have 2&lt;sup&gt;40&lt;/sup&gt; ≈ 1,000,000,000,000 nodes in the final row, you only have 42 rows in the tree. For 2&lt;sup&gt;64&lt;/sup&gt; nodes, you have just 66. Therefore, if you need some operation per row, it is not a high overhead.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A simple logarithmic-time function can compute the number of rows and the total number of nodes, given the number of nodes in the final row &lt;code&gt;N&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# Account for the root node&#xA;rows = 1&#xA;total = 1&#xA;&#xA;curr_left = N&#xA;While (curr_left &amp;gt; 1):&#xA;    rows = rows + 1&#xA;    total = total + curr_left&#xA;    curr_left = (curr_left + 1) / 2&#xA;End While&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;where &lt;code&gt;/&lt;/code&gt; denotes integer division, i.e. any fractional part is discarded/truncated/rounded towards zero. Again, for 2&lt;sup&gt;64&lt;/sup&gt; nodes in the final row, the above loops only 65 times.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When we know the total number of nodes in the tree, and the number of rows, we can use another logarithmic-time loop to compute the offset of the first element on each row of the tree, and the number of nodes on that row:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;first_offset = []&#xA;nodes = []&#xA;&#xA;curr_row = rows - 1&#xA;curr_offset = total - N&#xA;curr_left = N&#xA;&#xA;While (curr_left &amp;gt; 1):&#xA;    nodes[curr_row] = curr_left&#xA;    first_offset[curr_row] = curr_offset&#xA;    curr_row = curr_row - 1&#xA;    curr_left = (curr_left + 1) / 2&#xA;    curr_offset = curr_offset - curr_left&#xA;}&#xA;&#xA;first_offset[0] = 0&#xA;nodes[0] = 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As before, for 2&lt;sup&gt;64&lt;/sup&gt; nodes in the final row, the above loops only 65 times.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;All elements on a row are consecutive in memory, and if we use zero-based indexing, and &lt;code&gt;N&lt;/code&gt; is the number of nodes on the final row, and we apply the above, then&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;rows&lt;/code&gt; is the number of rows in the tree&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;total&lt;/code&gt; is the total number of nodes in the tree&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;There are &lt;code&gt;nodes[r]&lt;/code&gt; nodes on row &lt;code&gt;r&lt;/code&gt;, if &lt;code&gt;r &amp;gt;= 0&lt;/code&gt; and &lt;code&gt;r &amp;lt; rows&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Array index for node on row &lt;code&gt;r&lt;/code&gt;, column &lt;code&gt;c&lt;/code&gt; is &lt;code&gt;first_offset[r] + c&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Node on row &lt;code&gt;r&lt;/code&gt;, column &lt;code&gt;c&lt;/code&gt;, with &lt;code&gt;r &amp;gt; 0&lt;/code&gt;, has a parent on row &lt;code&gt;r-1&lt;/code&gt;, column &lt;code&gt;c/2&lt;/code&gt;, at array index &lt;code&gt;first_offset[r-1] + c/2&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Node on row &lt;code&gt;r&lt;/code&gt;, column &lt;code&gt;c&lt;/code&gt;, with &lt;code&gt;r &amp;lt; rows - 1&lt;/code&gt;, has a left child on row &lt;code&gt;r+1&lt;/code&gt;, column &lt;code&gt;2*c&lt;/code&gt;, at array index &lt;code&gt;first_offset[r+1] + 2*c&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Node on row &lt;code&gt;r&lt;/code&gt;, column &lt;code&gt;c&lt;/code&gt;, with &lt;code&gt;r &amp;lt; rows - 1&lt;/code&gt; and &lt;code&gt;c &amp;lt; nodes[r] - 1&lt;/code&gt;, has a right child on row &lt;code&gt;r+1&lt;/code&gt;, column &lt;code&gt;2*c+1&lt;/code&gt;, at array index &lt;code&gt;first_offset[r+1] + 2*c + 1&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Node on row &lt;code&gt;r&lt;/code&gt;, column &lt;code&gt;c&lt;/code&gt;, with &lt;code&gt;r &amp;lt; rows - 1&lt;/code&gt; and &lt;code&gt;c &amp;lt; nodes[r] - 1&lt;/code&gt;, has both a left and a right child&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;This array is compact, and other than the nodes that get propagated upwards (so, maybe a few dozen nodes for a terabyte-sized dataset), wastes no storage.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the number of nodes in the final row is stored with the array (for example, as an extra &lt;code&gt;uint64_t&lt;/code&gt; following the array data), all readers can recover &lt;code&gt;total&lt;/code&gt;, &lt;code&gt;rows&lt;/code&gt;, &lt;code&gt;first_offset[]&lt;/code&gt;, and &lt;code&gt;nodes[]&lt;/code&gt;, and easily navigate the tree. (However, note that instead of just the array index, you use the &quot;column&quot; and &quot;row&quot; instead, and derive the array index using those.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Because &lt;code&gt;first_offset[]&lt;/code&gt; and &lt;code&gt;nodes[]&lt;/code&gt; arrays have at most a few dozen entries, they should stay hot in caches, and using them should not harm performance.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that not all tree sizes are valid for the rules stated in the second paragraph above. For example, a tree with two nodes makes no sense: why would you duplicate the root node?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you do know that the tree size (&lt;code&gt;total&lt;/code&gt;) is valid, you can find &lt;code&gt;N&lt;/code&gt; based on &lt;code&gt;total&lt;/code&gt; in &lt;code&gt;O(log2(total)*log2log2(total))&lt;/code&gt; time complexity using a binary search, or in &lt;code&gt;O((log2(total))²)&lt;/code&gt; if you use a simple loop. Remember, &lt;code&gt;total&lt;/code&gt; is between &lt;code&gt;2*N-1&lt;/code&gt; and &lt;code&gt;2*N-1+log2(N)&lt;/code&gt;. Conversely, &lt;code&gt;N&lt;/code&gt; cannot be greater than &lt;code&gt;(N + 1)/2&lt;/code&gt;, or smaller than &lt;code&gt;(N + 1)/2 - log2(total)&lt;/code&gt;, because &lt;code&gt;total&lt;/code&gt; is greater than &lt;code&gt;N&lt;/code&gt;, and therefore &lt;code&gt;log2(N)&lt;/code&gt; is less than &lt;code&gt;log2(total)&lt;/code&gt;. So, a binary search could be implemented as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Function Find_N(total):&#xA;    Nmax = (total + 1) / 2&#xA;    Nmin = Nmax - log2(total)&#xA;&#xA;    t = Total(Nmin)&#xA;    If t == total:&#xA;        Return Nmin&#xA;    Else if t &amp;lt; total:&#xA;        Return &quot;Bug!&quot;&#xA;    End if&#xA;&#xA;    t = Total(Nmax)&#xA;    if t == total:&#xA;        Return Nmax&#xA;    Else if t &amp;gt; total:&#xA;        Return &quot;Bug!&quot;&#xA;    End if&#xA;&#xA;    Loop:&#xA;&#xA;        N = (Nmin + Nmax) / 2&#xA;        If N == Nmin:&#xA;            Return &quot;Invalid tree size!&quot;&#xA;        End If&#xA;&#xA;        t = Total(N)&#xA;        If t &amp;gt; total:&#xA;            Nmax = N&#xA;        Else if t &amp;lt; total:&#xA;            Nmin = N&#xA;        Else:&#xA;            return N&#xA;        End If            &#xA;    End Loop&#xA;End Function&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Keep in mind that even with 2&lt;sup&gt;64&lt;/sup&gt; nodes in the tree, the above function makes at most &lt;code&gt;1 + log2(64)&lt;/code&gt; = 6 calls to &lt;code&gt;Total&lt;/code&gt;, a function implementing the first pseudocode snippet in this answer. Since you typically need this only once per program invocation, the overhead is truly irrelevant.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can calculate &lt;code&gt;log2(x)&lt;/code&gt; using &lt;code&gt;log(x)/log(2)&lt;/code&gt;, using the &lt;code&gt;log2()&lt;/code&gt; function from &lt;code&gt;&amp;lt;math.h&amp;gt;&lt;/code&gt; since C99 (but since &lt;code&gt;double&lt;/code&gt; has less precision than &lt;code&gt;uint64_t&lt;/code&gt;, I would add &lt;code&gt;+1&lt;/code&gt; to the result, or round it towards positive infinity using &lt;code&gt;ceil()&lt;/code&gt;, just to be sure), or even using a simple loop:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Function ulog2(value):&#xA;    result = 0&#xA;    While (value &amp;gt; 0):&#xA;        result = result + 1&#xA;        value = value / 2&#xA;    End While&#xA;    Return result&#xA;End Function&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;where once again, &lt;code&gt;/&lt;/code&gt; denotes integer division.&lt;/p&gt;&#xA;"" OwnerUserId=""1475978"" LastEditorUserId=""1475978"" LastEditDate=""2017-07-09T02:40:48.997"" LastActivityDate=""2017-07-09T02:40:48.997"" CommentCount=""5"" />
",44913616
44911961,"44911961      <row Id=""44911961"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44914055"" PostTypeId=""2"" ParentId=""44911961"" CreationDate=""2017-07-04T21:12:58.213"" Score=""1"" Body=""&lt;p&gt;First to make things easier:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As far as I can see you do not need a global register for the quit channels. Just create a &lt;code&gt;ch := make(chan bool)&lt;/code&gt; in main, pass it to &lt;code&gt;ListenToTable&lt;/code&gt; (instead of the whole map of channels) and use it in the select. In main &lt;code&gt;close(ch)&lt;/code&gt; it if you want to exit. But as you said, that doesn't solve your problem.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Theoretically you are on the right track with closing the go routine. I took your sample code and made the following runnable code from it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;    chClose := make(chan bool)&#xA;    channel := make(chan string)&#xA;&#xA;    ListenToTable(&quot;somestring&quot;, channel, chClose)&#xA;&#xA;    time.Sleep(3 * time.Second)&#xA;    chClose &amp;lt;- true&#xA;    time.Sleep(1 * time.Second)&#xA;}&#xA;&#xA;func ListenToTable(name string, ch chan string, chClose chan bool) {&#xA;    go func(name string) {&#xA;        for {&#xA;            select {&#xA;            case &amp;lt;-chClose:&#xA;                fmt.Println(&quot;QUIT GOROUTINE&quot;)&#xA;                return  // VERY IMPORTANT: not break!&#xA;            default:&#xA;            }&#xA;        }&#xA;    }(name)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The problem must be with something else in you code, probably blocked by something in the &lt;code&gt;default&lt;/code&gt; section and not even executing the select. Try printing &lt;code&gt;fmt.Println(&quot;something&quot;)&lt;/code&gt; before the &lt;code&gt;select {&lt;/code&gt;. If that is not printed regularly then you have your answer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One more thing: As commented in the code above you cannot break out of a &lt;code&gt;for { select { ... } }&lt;/code&gt; with a single &lt;code&gt;break&lt;/code&gt;. You need to use a &lt;code&gt;return&lt;/code&gt; (to exit the function) or another tactic (like a break with a label as Adrian suggested in the comments). The &lt;code&gt;break&lt;/code&gt; will only exit the &lt;code&gt;select&lt;/code&gt;, but not the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastEditorUserId=""6220193"" LastEditDate=""2017-07-06T08:53:49.780"" LastActivityDate=""2017-07-06T08:53:49.780"" CommentCount=""2"" />
",44914055
44915201,"44915201      <row Id=""44915201"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44915321"" PostTypeId=""2"" ParentId=""44915201"" CreationDate=""2017-07-04T23:54:18.237"" Score=""2"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;./main.go:40: homePage(db) used as value&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;homePage is void function. So you can't use it in function arguments.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;./main.go:50: func literal evaluated but not used&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func homePage(db *sql.DB) {&#xA;    func(ctx context.Context) {&#xA;        ...&#xA;    }&#xA;    return &quot;&quot;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is broken syntax. I suggest you to go &lt;a href=&quot;https://tour.golang.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://tour.golang.org/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;./main.go:79: too many arguments to return&#xA;      have (string)&#xA;      want ()&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;As I said in above, homePage is void function. So you can't use return with value. Below is code which I could suppose your code should be.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;database/sql&quot;&#xA;    &quot;log&quot;&#xA;&#xA;    &quot;github.com/get-ion/ion&quot;&#xA;    &quot;github.com/get-ion/ion/context&quot;&#xA;    &quot;github.com/get-ion/ion/view&quot;&#xA;    _ &quot;github.com/go-sql-driver/mysql&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    app := ion.New()&#xA;    app.RegisterView(view.HTML(&quot;./templates&quot;, &quot;.html&quot;))&#xA;&#xA;    db, err := sql.Open(&quot;mysql&quot;, &quot;root:password@/database?charset=utf8&amp;amp;parseTime=true&amp;amp;loc=Local&quot;)&#xA;    if err != nil {&#xA;        log.Fatalln(err)&#xA;        panic(&quot;There was an error handling mysql connection!&quot;)&#xA;    }&#xA;    defer db.Close()&#xA;&#xA;    allRoutes := app.Party(&quot;/&quot;, logThisMiddleware)&#xA;    {&#xA;        allRoutes.Get(&quot;/&quot;, homePage(db))&#xA;    }&#xA;&#xA;    //app.Run(ion.Addr(&quot;:8080&quot;))&#xA;}&#xA;&#xA;func logThisMiddleware(ctx context.Context) {&#xA;    ctx.Application().Logger().Infof(&quot;Path: %s | IP: %s\n&quot;, ctx.Path(), ctx.RemoteAddr())&#xA;    ctx.Next()&#xA;}&#xA;&#xA;func homePage(db *sql.DB) context.Handler {&#xA;    return func(ctx context.Context) {&#xA;        var (&#xA;            id             int&#xA;            title          string&#xA;            featured_image string&#xA;            created_at     string&#xA;        )&#xA;        rows, err := db.Query(&quot;SELECT id, title, featured_image, created_at from blogs order by crated_at desc limit 0,5&quot;)&#xA;        if err != nil {&#xA;            ctx.Application().Logger().Fatalf(&quot;MySQL Error fetching row %s\n&quot;, err)&#xA;        }&#xA;        defer rows.Close()&#xA;        blogData := map[int]map[int]string{}&#xA;        for rows.Next() {&#xA;            err := rows.Scan(&amp;amp;id, &amp;amp;title, &amp;amp;featured_image, &amp;amp;created_at)&#xA;            if err != nil {&#xA;                ctx.Application().Logger().Fatalf(&quot;Error while fetching row from blog: %s\n&quot;, err)&#xA;            }&#xA;            blogData[id][0] = title&#xA;            blogData[id][1] = featured_image&#xA;            blogData[id][2] = created_at&#xA;        }&#xA;        err = rows.Err()&#xA;        if err != nil {&#xA;            ctx.Application().Logger().Fatalf(&quot;Error while scanning Row : %s\n&quot;, err)&#xA;        }&#xA;        ctx.ViewData(&quot;blog&quot;, blogData)&#xA;        ctx.View(&quot;homepage.html&quot;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""720391"" LastEditorUserId=""3767643"" LastEditDate=""2017-07-05T00:21:36.587"" LastActivityDate=""2017-07-05T00:21:36.587"" CommentCount=""7"" />
",44915321
44921193,"44921193      <row Id=""44921193"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44921845"" PostTypeId=""2"" ParentId=""44921193"" CreationDate=""2017-07-05T09:12:53.617"" Score=""3"" Body=""&lt;p&gt;It is precision issue of 32bit variable. This is not an issue of Go. See following URLs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754&quot; rel=&quot;nofollow noreferrer&quot;&gt;IEEE 754 - Wikipedia&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision_floating-point_format&quot; rel=&quot;nofollow noreferrer&quot;&gt;Single-precision floating-point format - Wikipedia&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You will understand what happen with 1.59 in this C code.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;&#xA;int&#xA;main(int argc, char* argv[]) {&#xA;  float f = 1.59;&#xA;  if (f == 1.59) {&#xA;    puts(&quot;float: equal!&quot;);&#xA;  } else {&#xA;    puts(&quot;float: not equal!&quot;);&#xA;  }&#xA;&#xA;  double d = 1.59;&#xA;  if (d == 1.59) {&#xA;    puts(&quot;double: equal!&quot;);&#xA;  } else {&#xA;    puts(&quot;double: not equal!&quot;);&#xA;  }&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://ideone.com/WobYbU&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://ideone.com/WobYbU&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1.590000033378601 is 1.59 in 32bit variables. So you can use the value with cast to float32. i.e. float32(1.590000033378601)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;strconv&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    str := `1.59`&#xA;    f64, err := strconv.ParseFloat(str, 32)&#xA;    if err != nil {&#xA;        fmt.Println(&quot;err: &quot;, err)&#xA;    }&#xA;    f32 := float32(f64)&#xA;    fmt.Printf(&quot;%T -&amp;gt; %+v\n&quot;, f32, f32)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/ml4O8CtjOK&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;UPDATE&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;On Most of computer, floating point value is stored as following elements.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sign (zero or one)&lt;/li&gt;&#xA;&lt;li&gt;Significand (Coefficient)&lt;/li&gt;&#xA;&lt;li&gt;Exponent&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;For example, representations 0.75 is &lt;code&gt;+1.1 x 2^-1&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;+&lt;/code&gt; is Sign, &lt;code&gt;.1&lt;/code&gt; is Significand, &lt;code&gt;-1&lt;/code&gt; is Exponent. This is stored like below on 32bit memory space. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Sign                                 Significand&#xA;+-+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |&#xA;  +-+-+-+-+-+-+-+-+&#xA;      Exponent&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For example, &lt;code&gt;0.75&lt;/code&gt; is stored like below&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;0-01111110-10000000000000000000000&#xA;&#xA;     +- Significand&#xA;     |&#xA;+ 1[.1] x 2 ^ -1&#xA;|         |    |&#xA;+- Sign   |    +- Exponent&#xA;          |&#xA;          +------ Base&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;+ 1.1 x 2^-1 = 1 x 2^0 + 1 x 2^-1 x 2^-1 = 0.75&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Since floating point value is represented as above, it is different between the mathematical value and the computer's value. This is precision issue.&lt;/p&gt;&#xA;"" OwnerUserId=""720391"" LastEditorUserId=""720391"" LastEditDate=""2017-07-05T10:12:55.660"" LastActivityDate=""2017-07-05T10:12:55.660"" CommentCount=""3"" />
",44921845
44878486,"44878486      <row Id=""44878486"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44922169"" PostTypeId=""2"" ParentId=""44878486"" CreationDate=""2017-07-05T09:25:37.273"" Score=""0"" Body=""&lt;p&gt;It worked by using os.Getwd() and runtime.caller  with a variable to diffrentiate between testing and normal running.  &lt;/p&gt;&#xA;"" OwnerUserId=""5449397"" LastActivityDate=""2017-07-05T09:25:37.273"" CommentCount=""0"" />
",44922169
44923323,"44923323      <row Id=""44923323"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44924219"" PostTypeId=""2"" ParentId=""44923323"" CreationDate=""2017-07-05T10:51:52.517"" Score=""1"" Body=""&lt;p&gt;You can DRY it using closures:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func GetUser2(i int, s string) (*User, error) {&#xA;    var u *User&#xA;    err := do(func() error {&#xA;        var err error&#xA;        u, err = getUser(i, s)&#xA;        return err&#xA;    })&#xA;    return u, err&#xA;}&#xA;&#xA;func CheckUser2(i int) (bool, error) {&#xA;    var b bool&#xA;    err := do(func() error {&#xA;        var err error&#xA;        b, err = checkUser(i)&#xA;        return err&#xA;    })&#xA;    return b, err&#xA;}&#xA;&#xA;func do(f func() error) error {&#xA;    CommonMethod1()&#xA;    CommonMethod2()&#xA;&#xA;    err := f()&#xA;    if err != nil {&#xA;        CommonMethod3()&#xA;    }&#xA;    return err&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1892060"" LastActivityDate=""2017-07-05T10:51:52.517"" CommentCount=""0"" />
",44924219
44921623,"44921623      <row Id=""44921623"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44925130"" PostTypeId=""2"" ParentId=""44921623"" CreationDate=""2017-07-05T11:34:54.250"" Score=""1"" Body=""&lt;p&gt;The methods are defined in a big generated file that is not indexed by Gogland. To change the limit you should change &lt;a href=&quot;https://intellij-support.jetbrains.com/hc/en-us/articles/206544869-Configuring-JVM-options-and-platform-properties&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;idea.max.intellisense.filesize&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To do this, open custom properties file via &lt;code&gt;Help | Edit Custom Properties&lt;/code&gt; menu and add something like this: &lt;code&gt;idea.max.intellisense.filesize=4500&lt;/code&gt; for 4.5 MB limit. The size is in Kilobytes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Please use carefully, indexing large files may influence index update speed dramatically.&lt;/p&gt;&#xA;"" OwnerUserId=""5462132"" LastActivityDate=""2017-07-05T11:34:54.250"" CommentCount=""1"" />
",44925130
44932806,"44932806      <row Id=""44932806"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44933147"" PostTypeId=""2"" ParentId=""44932806"" CreationDate=""2017-07-05T18:05:42.717"" Score=""1"" Body=""&lt;p&gt;The error message indicates that &lt;code&gt;ClientID&lt;/code&gt; is not initialized.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That looks consistent with the code, since &lt;code&gt;var&lt;/code&gt; declarations are executed before the &lt;code&gt;init&lt;/code&gt; functions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So when your &lt;code&gt;var&lt;/code&gt; requests &lt;code&gt;os.Getenv(&quot;CLIENT_ID&quot;)&lt;/code&gt; the value is blank since &lt;code&gt;init&lt;/code&gt; has not executed yet.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;From the documentation:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;A package with no imports is initialized by assigning initial values to all its package-level variables followed by calling all init functions in the order they appear in the source, possibly in multiple files, as presented to the compiler&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Package_initialization&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/ref/spec#Package_initialization&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To fix this, either put the string directly in the &lt;code&gt;var&lt;/code&gt; initialization, or trigger the initialization from the &lt;code&gt;init&lt;/code&gt; after you set the values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var (&#xA;    googleOauthConfig *oauth2.Config&#xA;)&#xA;&#xA;func init() {&#xA;     // init ENV&#xA;     // initialize the variable using ENV values&#xA;     googleOauthConfig = &amp;amp;oauth2.Config{ ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Alternatively, you can set those &lt;code&gt;ENV&lt;/code&gt; values at the OS level before executing the actual Go program. &lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastEditorUserId=""4907630"" LastEditDate=""2017-07-05T19:02:20.680"" LastActivityDate=""2017-07-05T19:02:20.680"" CommentCount=""7"" />
",44933147
44933295,"44933295      <row Id=""44933295"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44933584"" PostTypeId=""2"" ParentId=""44933295"" CreationDate=""2017-07-05T18:32:48.720"" Score=""2"" Body=""&lt;p&gt;The common idiom is to have a &lt;code&gt;Done&lt;/code&gt; channel shared between the calling code and the goroutines.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then each goroutine would check that channel via a &lt;code&gt;select&lt;/code&gt; each time they &#xA;send a new value to the calling code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can find a good example in Go's blog:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://blog.golang.org/pipelines&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://blog.golang.org/pipelines&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(look for &quot;Explicit Cancellation&quot; there)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Later, they incorporated a &lt;code&gt;context&lt;/code&gt; package to the standard library, and that is now the most &quot;standard&quot; way to manage cancellation of goroutines.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can find a good example in the documentation for the package itself:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/context/#example_WithCancel&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/context/#example_WithCancel&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-05T18:32:48.720"" CommentCount=""0"" />
",44933584
44933674,"44933674      <row Id=""44933674"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44933956"" PostTypeId=""2"" ParentId=""44933674"" CreationDate=""2017-07-05T18:54:09.203"" Score=""1"" Body=""&lt;p&gt;If it works then it's not wrong, but it doesn't validate much, only that the response body is non-empty - not even that it's successful. I'm not sure why it prints out &lt;code&gt;http.StatusOK&lt;/code&gt;, which is a constant, and doesn't tell you what the status code in the response was.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Personally when I do this level of test I check, at the very least, that the response code is as expected, the response body unmarshals correctly (if it's JSON or XML), the response data is basically sane, etc. For more complex payloads I might use a &lt;a href=&quot;http://jonnyreeves.co.uk/2016/integration-testing-with-golden-masters/&quot; rel=&quot;nofollow noreferrer&quot;&gt;golden file&lt;/a&gt; test. For critical code I might use a &lt;a href=&quot;https://en.wikipedia.org/wiki/Fuzzing&quot; rel=&quot;nofollow noreferrer&quot;&gt;fuzz (aka monte carlo) test&lt;/a&gt;. For performance-critical code I'll likely add benchmarks and load tests. There are practically infinite ways to test code. You'll have to figure out what your needs are and how to meet them.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-05T18:54:09.203"" CommentCount=""1"" />
",44933956
44928032,"44928032      <row Id=""44928032"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44933965"" PostTypeId=""2"" ParentId=""44928032"" CreationDate=""2017-07-05T18:54:37.107"" Score=""0"" Body=""&lt;p&gt;You need to &lt;a href=&quot;https://godoc.org/github.com/jinzhu/gorm#DB.Preload&quot; rel=&quot;nofollow noreferrer&quot;&gt;Preload&lt;/a&gt; the resources field before querying for services:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;services := []model.Service{}&#xA;db.Preload(&quot;Resources&quot;).Find(&amp;amp;services) // error checking ommited&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This correctly populates the &lt;code&gt;Resources&lt;/code&gt; field of every service.&lt;/p&gt;&#xA;"" OwnerUserId=""4322228"" LastEditorUserId=""4322228"" LastEditDate=""2017-07-05T19:00:51.443"" LastActivityDate=""2017-07-05T19:00:51.443"" CommentCount=""0"" />
",44933965
44928478,"44928478      <row Id=""44928478"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44933999"" PostTypeId=""2"" ParentId=""44928478"" CreationDate=""2017-07-05T18:56:13.913"" Score=""3"" Body=""&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/testing/#hdr-Main&quot; rel=&quot;nofollow noreferrer&quot;&gt;TestMain&lt;/a&gt; is only executed in test files (suffix &lt;code&gt;_test.go&lt;/code&gt;). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Move the function to the repository_test.go file to fix this.&lt;/p&gt;&#xA;"" OwnerUserId=""8261044"" LastActivityDate=""2017-07-05T18:56:13.913"" CommentCount=""0"" />
",44933999
44934457,"44934457      <row Id=""44934457"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44934634"" PostTypeId=""2"" ParentId=""44934457"" CreationDate=""2017-07-05T19:37:33.423"" Score=""1"" Body=""&lt;p&gt;To access your struct field on template, it must be exported fields. Update your struct to-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type blogs struct {&#xA;    ID             int&#xA;    Title          string&#xA;    Featured_image string&#xA;    Created_at     string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Read more about &lt;a href=&quot;https://www.goinggo.net/2014/03/exportedunexported-identifiers-in-go.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Exported/Unexported Identifiers In Go&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-05T19:46:47.987"" LastActivityDate=""2017-07-05T19:46:47.987"" CommentCount=""3"" />
",44934634
44937567,"44937567      <row Id=""44937567"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44938501"" PostTypeId=""2"" ParentId=""44937567"" CreationDate=""2017-07-06T01:43:13.623"" Score=""1"" Body=""&lt;p&gt;No real workaround there, that's the nature of the beast.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The language was designed after struggling with C++ for some time, and the idea of the creators was simplifying all non-vital things but at the same time make key additions to make the language more expressive.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can read a bit about their reasoning here, which I believe is quite interesting even if you don't agree with all the decisions they made:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://commandcenter.blogspot.com.ar/2012/06/less-is-exponentially-more.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://commandcenter.blogspot.com.ar/2012/06/less-is-exponentially-more.html&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your example, if you wanted to, you could make your maps and functions use &lt;code&gt;interface{}&lt;/code&gt; (which by the way is called the empty interface and not &quot;nil&quot; interface).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But of course you would lose compile-time type checking and would have to add casts all around.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can also try to find an interface to express the commonalities of the types you want to use (which might not be so easy or even possible at all), and then build your mapping API around that interface.&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-06T01:43:13.623"" CommentCount=""5"" />
",44938501
44938050,"44938050      <row Id=""44938050"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44938513"" PostTypeId=""2"" ParentId=""44938050"" CreationDate=""2017-07-06T01:45:22.647"" Score=""0"" Body=""&lt;p&gt;I'm slightly confused by your question, but think you're trying to do the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;replace      printf(&quot;yada yada yada&quot;) with println(&quot;yada yada yada&quot;)&#xA;not replace  printf(&quot;print speed = %d&quot;, speed)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If that is the case, I would do something like the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sed -i '/Printf(\&quot;.*\&quot;)/ s/Printf/Println/g' *.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That should leave cases intact where you actually want to use formatting. Here is an example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[sborza@msandn]:~$ cat tester.go&#xA;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;func main() {&#xA;        speed = 1&#xA;        fmt.Printf(&quot;vim-go&quot;)&#xA;        fmt.Printf(&quot;speed = %d\n&quot;, speed)&#xA;}&#xA;&#xA;[sborza@msandn]:~$ sed '/Printf(\&quot;.*\&quot;)/ s/Printf/Println/g' tester.go&#xA;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;func main() {&#xA;        speed = 1&#xA;        fmt.Println(&quot;vim-go&quot;)&#xA;        fmt.Printf(&quot;speed = %d\n&quot;, speed)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8092543"" LastActivityDate=""2017-07-06T01:45:22.647"" CommentCount=""2"" />
",44938513
44934156,"44934156      <row Id=""44934156"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44938834"" PostTypeId=""2"" ParentId=""44934156"" CreationDate=""2017-07-06T02:25:27.747"" Score=""0"" Body=""&lt;p&gt;In golang, there is only one iteration construct and that's the for loop. There are multiple ways to configure the for loop itself, but overall there is just the single construct:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://tour.golang.org/flowcontrol/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://tour.golang.org/flowcontrol/1&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/wBSGJqHuLK&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/wBSGJqHuLK&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;The C method -- for i := 0; i &amp;lt; 10; i++ { }&#xA;The python method -- for k, v := range map[string]string{&quot;key&quot;: &quot;val&quot;} { }&#xA;The python method -- for idx, val := range []string{&quot;one&quot;, &quot;two&quot;} { }&#xA;The empty for -- for { }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8092543"" LastActivityDate=""2017-07-06T02:25:27.747"" CommentCount=""0"" />
",44938834
44939881,"44939881      <row Id=""44939881"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44940030"" PostTypeId=""2"" ParentId=""44939881"" CreationDate=""2017-07-06T04:50:23.030"" Score=""3"" Body=""&lt;p&gt;The &lt;a href=&quot;https://golang.org/pkg/math/#Sqrt&quot; rel=&quot;nofollow noreferrer&quot;&gt;math.Sqrt&lt;/a&gt; function signature:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func Sqrt(x float64) float64&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;requires that you pass &lt;code&gt;float64&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this case:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var f float64 = math.Sqrt(float64(x*x + y*y))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You are converting to &lt;code&gt;float64&lt;/code&gt; directly&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this case:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var f = math.Sqrt(x*x + y*y)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;you are passing an &lt;code&gt;int&lt;/code&gt;, when &lt;code&gt;float64&lt;/code&gt; is required.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this case:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var f = math.Sqrt(9 + 16)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The compiler is able to infer the type, and pass &lt;code&gt;float64&lt;/code&gt; for you.&lt;/p&gt;&#xA;"" OwnerUserId=""1078084"" LastActivityDate=""2017-07-06T04:50:23.030"" CommentCount=""2"" />
",44940030
44940822,"44940822      <row Id=""44940822"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44940966"" PostTypeId=""2"" ParentId=""44940822"" CreationDate=""2017-07-06T06:07:06.880"" Score=""3"" Body=""&lt;p&gt;No, there isn't any better way than looping. Not only is it cleaner than any other approach, it's also the fastest.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;values := []int{4, 20, 0, -11, -10}&#xA;&#xA;min := values[0]&#xA;for _, v := range values {&#xA;        if (v &amp;lt; min) {&#xA;            min = v&#xA;        }&#xA;}&#xA;&#xA;fmt.Println(min)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since there has been some discussion in the comments about error handling and how to handle empty slices, here is a basic function that determines the minimum value. Remember to import &lt;code&gt;errors&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func Min(values []int) (min int, e error) {&#xA;    if len(values) == 0 {&#xA;        return 0, errors.New(&quot;Cannot detect a minimum value in an empty slice&quot;)&#xA;    }&#xA;&#xA;    min = values[0]&#xA;    for _, v := range values {&#xA;            if (v &amp;lt; min) {&#xA;                min = v&#xA;            }&#xA;    }&#xA;&#xA;    return min, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2329663"" LastEditorUserId=""2329663"" LastEditDate=""2017-07-06T07:02:48.830"" LastActivityDate=""2017-07-06T07:02:48.830"" CommentCount=""6"" />
",44940966
44944959,"44944959      <row Id=""44944959"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44944960"" PostTypeId=""2"" ParentId=""44944959"" CreationDate=""2017-07-06T09:28:02.463"" Score=""3"" Body=""&lt;p&gt;As far as I can find there is no simple check for this, but when &lt;code&gt;-race&lt;/code&gt; is enabled the &lt;code&gt;race&lt;/code&gt; &lt;a href=&quot;https://golang.org/pkg/go/build/#hdr-Build_Constraints&quot; rel=&quot;nofollow noreferrer&quot;&gt;build tag&lt;/a&gt; is set, so you can take advantage of that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I made a new directory &lt;code&gt;israce&lt;/code&gt;, and put two files there:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;israce/race.go&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// +build race&#xA;&#xA;// Package israce reports if the Go race detector is enabled.&#xA;package israce&#xA;&#xA;// Enabled reports if the race detector is enabled.&#xA;const Enabled = true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;israce/norace.go&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// +build !race&#xA;&#xA;// Package israce reports if the Go race detector is enabled.&#xA;package israce&#xA;&#xA;// Enabled reports if the race detector is enabled.&#xA;const Enabled = false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Due to the build tag only one of the two files will get compiled.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As far as I've been able to find this is the easiest way.&lt;/p&gt;&#xA;"" OwnerUserId=""660921"" LastEditorUserId=""660921"" LastEditDate=""2017-07-07T07:31:50.177"" LastActivityDate=""2017-07-07T07:31:50.177"" CommentCount=""0"" />
",44944960
44947464,"44947464      <row Id=""44947464"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44948988"" PostTypeId=""2"" ParentId=""44947464"" CreationDate=""2017-07-06T12:32:13.313"" Score=""1"" Body=""&lt;p&gt;Have you tried to replace all line endings from \r\n or \r to \n ?&lt;/p&gt;&#xA;"" OwnerUserId=""130341"" LastActivityDate=""2017-07-06T12:32:13.313"" CommentCount=""1"" />
",44948988
44949467,"44949467      <row Id=""44949467"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44950096"" PostTypeId=""2"" ParentId=""44949467"" CreationDate=""2017-07-06T13:17:56.060"" Score=""2"" Body=""&lt;p&gt;It's good practice to keep the mutex close to the data it destined to protect. If a mutex ought to protect concurrent access to fields of a struct value, it's very convenient to add the mutex as a field of that struct, so its purpose is obvious.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If in your app there is only a single &quot;instance&quot; of &lt;code&gt;A&lt;/code&gt;, it's fine to make the mutex a global variable too.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If your app is to create multiple values of &lt;code&gt;A&lt;/code&gt;, all of which needs to be protected from concurrent access (but only individually, multiple values may be accessed concurrently), then obviously a global mutex is a bad choice, it would limit the concurrent access to a single value of &lt;code&gt;A&lt;/code&gt; in any point in time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Adding the mutex to the struct as a field, you will &lt;em&gt;naturally&lt;/em&gt; have a separate mutex for each distinct struct values, responsible to guard that single, containing struct value (or its fields).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Although adding a mutex as in your example is not embedding, it's a regular, named field. An &lt;a href=&quot;https://golang.org/ref/spec#Struct_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;embedded field declaration&lt;/a&gt; omits the field name.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's known and used to a lesser extent, but it's also handy that you can &quot;truly&quot; embed a mutex in a struct, and you can call &lt;code&gt;Lock()&lt;/code&gt; and &lt;code&gt;Unlock()&lt;/code&gt; as if they would be part of the struct itself. It looks like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var hits struct {&#xA;    sync.Mutex&#xA;    n int&#xA;}&#xA;&#xA;hits.Lock()&#xA;hits.n++&#xA;hits.Unlock()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(This example is taken from &lt;a href=&quot;https://talks.golang.org/2012/10things.slide#3&quot; rel=&quot;nofollow noreferrer&quot;&gt;10 things you (probably) don't know about Go, slide #3&lt;/a&gt;.)&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-06T17:39:38.017"" LastActivityDate=""2017-07-06T17:39:38.017"" CommentCount=""0"" />
",44950096
44954705,"44954705      <row Id=""44954705"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44955022"" PostTypeId=""2"" ParentId=""44954705"" CreationDate=""2017-07-06T17:02:12.227"" Score=""3"" Body=""&lt;p&gt;Use the &lt;a href=&quot;http://www.gorillatoolkit.org/pkg/mux#Router.Walk&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Walk&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;router.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {&#xA;    tpl, err1 := route.GetPathTemplate()&#xA;    met, err2 := route.GetMethods()&#xA;    fmt.Println(tpl, err1, met, err2)&#xA;    return nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Alternatively, you can just put all your routes into a slice of structs and just do&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for _, r := range routes {&#xA;    router.HandleFunc(r.tpl, r.func).Methods(r.methods...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;on the initialisation step.&lt;/p&gt;&#xA;"" OwnerUserId=""1892060"" LastEditorUserId=""1892060"" LastEditDate=""2017-07-06T17:15:53.820"" LastActivityDate=""2017-07-06T17:15:53.820"" CommentCount=""0"" />
",44955022
44956031,"44956031      <row Id=""44956031"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44956924"" PostTypeId=""2"" ParentId=""44956031"" CreationDate=""2017-07-06T18:59:29.403"" Score=""1"" Body=""&lt;p&gt;Yes there are a few different ways to go about it.. Here's an example that can be optimized.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;func intersection(a []string, b []string) (inter []string) {&#xA;    // interacting on the smallest list first can potentailly be faster...but not by much, worse case is the same&#xA;    low, high := a, b&#xA;    if len(a) &amp;gt; len(b) {&#xA;        low = b&#xA;        high = a&#xA;    }&#xA;&#xA;    done := false&#xA;    for i, l := range low {&#xA;        for j, h := range high {&#xA;            // get future index values&#xA;            f1 := i + 1&#xA;            f2 := j + 1&#xA;            if l == h {&#xA;                inter = append(inter, h)&#xA;                if f1 &amp;lt; len(low) &amp;amp;&amp;amp; f2 &amp;lt; len(high) {&#xA;                    // if the future values aren't the same then that's the end of the intersection&#xA;                    if low[f1] != high[f2] {&#xA;                        done = true&#xA;                    }&#xA;                }&#xA;                // we don't want to interate on the entire list everytime, so remove the parts we already looped on will make it faster each pass&#xA;                high = high[:j+copy(high[j:], high[j+1:])]&#xA;                break&#xA;            }&#xA;        }&#xA;        // nothing in the future so we are done&#xA;        if done {&#xA;            break&#xA;        }&#xA;    }&#xA;    return&#xA;}&#xA;&#xA;func main() {&#xA;    slice1 := []string{&quot;foo&quot;, &quot;bar&quot;, &quot;hello&quot;, &quot;bar&quot;}&#xA;    slice2 := []string{&quot;foo&quot;, &quot;bar&quot;}&#xA;    fmt.Printf(&quot;%+v\n&quot;, intersection(slice1, slice2))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now the intersection method defined above will only operate on &lt;code&gt;slices&lt;/code&gt; of &lt;code&gt;strings&lt;/code&gt;, like your example.. You can in theory create a definition that looks like this &lt;code&gt;func intersection(a []interface, b []interface) (inter []interface)&lt;/code&gt;, however you would be relying on reflection and type casting so that you can compare, which will add latency and make your code harder to read. It's probably easier to maintain and read to write a separate function for each type you care about.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;func intersectionString(a []string, b []string) (inter []string)&lt;/code&gt;,&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;func intersectionInt(a []int, b []int) (inter []int)&lt;/code&gt;,&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;func intersectionFloat64(a []Float64, b []Float64) (inter []Float64)&lt;/code&gt;, ..ect&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can then create your own package and reuse once you settle how you want to implement it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package intersection&#xA;&#xA;func String(a []string, b []string) (inter []string)&#xA;&#xA;func Int(a []int, b []int) (inter []int)&#xA;&#xA;func Float64(a []Float64, b []Float64) (inter []Float64)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4639336"" LastActivityDate=""2017-07-06T18:59:29.403"" CommentCount=""0"" />
",44956924
44957724,"44957724      <row Id=""44957724"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44957799"" PostTypeId=""2"" ParentId=""44957724"" CreationDate=""2017-07-06T19:56:28.720"" Score=""2"" Body=""&lt;p&gt;The &lt;code&gt;ListObjects&lt;/code&gt; calls return a &lt;code&gt;[]Object&lt;/code&gt; for the actual object list in the result, and &lt;code&gt;Object&lt;/code&gt; does not include the expiration. However, &lt;code&gt;GetObject&lt;/code&gt; returns &lt;a href=&quot;http://docs.aws.amazon.com/sdk-for-go/api/service/s3/#GetObjectOutput&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;GetObjectOutput&lt;/code&gt;&lt;/a&gt; which does have an &lt;code&gt;Expiration&lt;/code&gt; field. So you could iterate your returned &lt;code&gt;Object&lt;/code&gt;s and get the expiration for each, though this could be time-consuming if there are many of them.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-06T19:56:28.720"" CommentCount=""4"" />
",44957799
44687426,"44687426      <row Id=""44687426"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44960239"" PostTypeId=""2"" ParentId=""44687426"" CreationDate=""2017-07-06T23:15:52.030"" Score=""0"" Body=""&lt;p&gt;In the end, the solution was to add an expires-at property like @colini and @bazza mentioned, and to drop timed out messages from the queue after each heartbeat. However, doing so and satisfying all requirements of my application was proving to be more difficult than first glance, so I ended up using RabbitMQ, whose ttl-expires argument provided the desired functionality.&lt;/p&gt;&#xA;"" OwnerUserId=""6865003"" LastActivityDate=""2017-07-06T23:15:52.030"" CommentCount=""0"" />
",44960239
44960183,"44960183      <row Id=""44960183"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44960557"" PostTypeId=""2"" ParentId=""44960183"" CreationDate=""2017-07-06T23:57:09.673"" Score=""1"" Body=""&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; After comment interaction. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Yes you can. Let's say&lt;/p&gt;&#xA;&#xA;&lt;p&gt;XML:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;series&amp;gt;&#xA;    &amp;lt;value&amp;gt;123456&amp;lt;/value&amp;gt;&#xA;&amp;lt;/series&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Struct definition:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type FloatHolder struct {&#xA;    Value float32 `xml:&quot;,chardata&quot;`&#xA;}&#xA;&#xA;type pv struct {&#xA;    XMLName xml.Name    `xml:&quot;series&quot;`&#xA;    Test2   FloatHolder `xml:&quot;value&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Go Playground link: &lt;a href=&quot;https://play.golang.org/p/9sWQaw0HlS&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/9sWQaw0HlS&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Actually it's not a nested field, as per your XML. It belongs to &lt;code&gt;series&lt;/code&gt; element.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Update your struct to following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type pv struct {&#xA;    XMLName xml.Name    `xml:&quot;series&quot;`&#xA;    Test1   float32     `xml:&quot;value&quot;`&#xA;    Test2   FloatHolder `xml:&quot;nested&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Go Playground Link: &lt;a href=&quot;https://play.golang.org/p/-mWrUMJXxX&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/-mWrUMJXxX&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-07T04:55:31.487"" LastActivityDate=""2017-07-07T04:55:31.487"" CommentCount=""5"" />
",44960557
44964648,"44964648      <row Id=""44964648"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44964773"" PostTypeId=""2"" ParentId=""44964648"" CreationDate=""2017-07-07T07:17:06.943"" Score=""2"" Body=""&lt;p&gt;You have problem with your struct definition. You need use Exported identifier, like-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Documents struct {&#xA;    UserID    string    `json:&quot;user_id&quot;`&#xA;    PartnerID []string  `json:&quot;partner_id&quot;`&#xA;    LastLogin int       `json:&quot;last_login&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;For your question, refer to format &lt;a href=&quot;https://golang.org/pkg/fmt/#pkg-overview&quot; rel=&quot;nofollow noreferrer&quot;&gt;printing verbs&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To print values of body-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;log.Printf(&quot;Received a message: %v&quot;, body)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To print values along with variable name -&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;log.Printf(&quot;Received a message: %#v&quot;, body)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-07-07T07:17:06.943"" CommentCount=""2"" />
",44964773
44970723,"44970723      <row Id=""44970723"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44971508"" PostTypeId=""2"" ParentId=""44970723"" CreationDate=""2017-07-07T13:04:42.387"" Score=""2"" Body=""&lt;p&gt;Here are the issues I spotted in the code, and below a working version based on your implementation.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;If a goroutine tries to write to an &quot;unbuffered&quot; channel, it will block until someone reads from it. Since you are not reading until they finish writing to the channel, you have a deadlock there.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Closing the channel while they are blocked breaks the deadlock, but gives an error since they now can't write to a closed channel.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Solution involves:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;Creating a buffered channel so that they can write without blocking.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Using a &lt;code&gt;sync.WaitGroup&lt;/code&gt; so that you wait for the goroutines to finish before closing the channel.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Reading from the channel at the end, when all is done.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;See here, with comments:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    package main&#xA;&#xA;    import (&#xA;        &quot;fmt&quot;&#xA;        &quot;time&quot;&#xA;        &quot;sync&quot;&#xA;    )&#xA;&#xA;    func addCount(num int, counter chan&amp;lt;- int, wg *sync.WaitGroup) {&#xA;        // clear one from the sync group&#xA;        defer wg.Done()&#xA;        time.Sleep(time.Second * 2)&#xA;        counter &amp;lt;- num * 2&#xA;    }&#xA;&#xA;    func main() {&#xA;        int_slice := []int{2, 4}&#xA;        // make the slice buffered using the slice size, so that they can write without blocking&#xA;        counter := make(chan int, len(int_slice))&#xA;&#xA;        var wg sync.WaitGroup&#xA;&#xA;        for _, item := range int_slice {&#xA;            // add one to the sync group, to mark we should wait for one more&#xA;            wg.Add(1)&#xA;            go addCount(item, counter, &amp;amp;wg)&#xA;        }&#xA;&#xA;        // wait for all goroutines to end&#xA;        wg.Wait()&#xA;&#xA;        // close the channel so that we not longer expect writes to it&#xA;        close(counter)&#xA;&#xA;        // read remaining values in the channel&#xA;        for item := range counter {&#xA;            fmt.Println(item)&#xA;        }&#xA;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-07T13:04:42.387"" CommentCount=""2"" />
",44971508
44601971,"44601971      <row Id=""44601971"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44972334"" PostTypeId=""2"" ParentId=""44601971"" CreationDate=""2017-07-07T13:42:34.977"" Score=""0"" Body=""&lt;p&gt;I found an solution with some help of the developers at GitHub. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may see the processing of the config in the following way, similar to an if statement with AND and OR declarations. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Alertmanager applies the config to a up-down, left-right principle. Where the up-down is similar to the OR statement you will use in a regular if statement. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you're going from left to right, you could compare it with the AND statement in if commands.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Further you should keep in mind that when the first statement matches, and there are no 'AND' parts declared, alertmanager pushes the alert to the receiver without looking further for any other match. So in the example above, if prometheus fires an alert with the following labels {severity: &quot;warning&quot;, application: &quot;barfoo&quot;}, the alert is sent to hipchat-teamX.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note the following, the label value of application matches the route for hipchat-teamY. So why it isn't sent to that route? The answer is not that diffucult, it's because the first one matches, and there are no subroutes declared, so it will stop looking for any other match. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, if the alertmanager has config like the code below, the alert will be sent to the receiver 'hipchat-teamY'.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;routes:&#xA;&#xA;match:&#xA;  severity:&quot;warning&quot;&#xA;receiver: &quot;hipchat-teamX&quot;&#xA;&#xA;  routes:&#xA;  match_re:&#xA;    application:&quot;(barfoo.*)&quot;&#xA;  receiver: &quot;hipchat-teamY&quot;&#xA;&#xA;match_re:&#xA;  application:&quot;(foo|bar)&quot;&#xA;receiver: &quot;hipchat-teamX&quot;&#xA;&#xA;match_re:&#xA;  application:&quot;(barfoo.*)&quot;&#xA;receiver: &quot;hipchat-teamY&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To make it a bit more advanced, asume prometheus sends a new alert with the following labels {severity: &quot;critical&quot;, application: &quot;barfoo&quot;}. With the following config, the alert is routed to hipchat-teamX.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And with the labels {severity: &quot;critical&quot;, application: &quot;foo&quot;}, the alert is sent to hipchat-teamY.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;routes:&#xA;&#xA;match:&#xA;  severity:&quot;warning&quot;&#xA;receiver: &quot;hipchat-teamX&quot;&#xA;&#xA;  routes:&#xA;  match_re:&#xA;    application:&quot;(barfoo.*)&quot;&#xA;  receiver: &quot;hipchat-teamY&quot;&#xA;&#xA;  match_re:&#xA;    application:&quot;(foo|bar)&quot;&#xA;  receiver: &quot;hipchat-teamX&quot;&#xA;&#xA;match:&#xA;  severity:&quot;critical&quot;&#xA;receiver: &quot;hipchat-teamY&quot;&#xA;&#xA;  routes: &#xA;  match_re:&#xA;    application:&quot;(barfoo.*)&quot;&#xA;  receiver: &quot;hipchat-teamX&quot;&#xA;&#xA;  match_re:&#xA;    application:&quot;(foo|bar)&quot;&#xA;  receiver: &quot;hipchat-teamY&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I hope this explanation will help others who are experiencing the same issue or question.&lt;/p&gt;&#xA;"" OwnerUserId=""8026626"" LastActivityDate=""2017-07-07T13:42:34.977"" CommentCount=""0"" />
",44972334
44972209,"44972209      <row Id=""44972209"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44973810"" PostTypeId=""2"" ParentId=""44972209"" CreationDate=""2017-07-07T14:52:00.267"" Score=""2"" Body=""&lt;p&gt;Use the Microsoft Windows API: &lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa365522.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;Retrieving and Changing File Attributes&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;An application can retrieve the file attributes by using the&#xA;  GetFileAttributes or GetFileAttributesEx function. The CreateFile and&#xA;  SetFileAttributes functions can set many of the attributes.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;a href=&quot;https://godoc.org/golang.org/x/sys/windows&quot; rel=&quot;nofollow noreferrer&quot;&gt;package windows&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;code&gt;import &quot;golang.org/x/sys/windows&quot;&lt;/code&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;a href=&quot;https://godoc.org/golang.org/x/sys/windows#GetFileAttributes&quot; rel=&quot;nofollow noreferrer&quot;&gt;func GetFileAttributes&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;a href=&quot;https://godoc.org/golang.org/x/sys/windows#GetFileAttributesEx&quot; rel=&quot;nofollow noreferrer&quot;&gt;func GetFileAttributesEx&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;a href=&quot;https://godoc.org/golang.org/x/sys/windows#SetFileAttributes&quot; rel=&quot;nofollow noreferrer&quot;&gt;func SetFileAttributes&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""221700"" LastActivityDate=""2017-07-07T14:52:00.267"" CommentCount=""0"" />
",44973810
44959143,"44959143      <row Id=""44959143"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44974428"" PostTypeId=""2"" ParentId=""44959143"" CreationDate=""2017-07-07T15:21:35.053"" Score=""0"" Body=""&lt;p&gt;Looking at the JSON output you quoted, it looks like the error is being encoded correctly, but null is being output after the JSON, indicating a separate write operation. The function that calls EncodeErrorResponse, after it calls it, is writing additional output to the ResponseWriter.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-07T15:21:35.053"" CommentCount=""0"" />
",44974428
44975129,"44975129      <row Id=""44975129"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44975221"" PostTypeId=""2"" ParentId=""44975129"" CreationDate=""2017-07-07T16:01:18.393"" Score=""0"" Body=""&lt;p&gt;Looks like the makefile has a hard-coded absolute path to the go binary at &lt;code&gt;/usr/bin/go&lt;/code&gt; (bad makefile, no biscuit!) - if your binary is not there, create a symlink to it at that location.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-07T16:01:18.393"" CommentCount=""0"" />
",44975221
44976862,"44976862      <row Id=""44976862"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44976881"" PostTypeId=""2"" ParentId=""44976862"" CreationDate=""2017-07-07T17:49:25.897"" Score=""2"" Body=""&lt;p&gt;It assigns a nil pointer to a concrete type to a variable of the interface type. This is a common practice to prove that the concrete type fulfills the interface - if it doesn't, that line won't compile, giving an error that the concrete type can't be assigned to a variable of the interface type and why.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As @JimB noted, &quot;interface assertion&quot; is a term made up by the author. Go has no such term. This is, specifically, a &lt;a href=&quot;https://golang.org/ref/spec#Conversions&quot; rel=&quot;nofollow noreferrer&quot;&gt;type conversion&lt;/a&gt;, converting &lt;code&gt;nil&lt;/code&gt; to a pointer to &lt;code&gt;tmLogger&lt;/code&gt;, then assigning the typed nil pointer to a &lt;a href=&quot;https://golang.org/ref/spec#Blank_identifier&quot; rel=&quot;nofollow noreferrer&quot;&gt;blank identifier&lt;/a&gt; variable of the interface type &lt;code&gt;Logger&lt;/code&gt;. If &lt;code&gt;*tmLogger&lt;/code&gt; does not satisfy &lt;code&gt;Logger&lt;/code&gt;, the assignment won't compile; but, at runtime, this takes no memory because it's using a nil value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Presumably the author uses this term more in the unit-testing sense of &quot;assertion&quot; than the &quot;type assertion&quot; sense - that line of code asserts that the type implements the interface, and if it doesn't, the line will fail.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastEditorUserId=""7426"" LastEditDate=""2017-07-07T18:00:49.443"" LastActivityDate=""2017-07-07T18:00:49.443"" CommentCount=""0"" />
",44976881
44979276,"44979276      <row Id=""44979276"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44979550"" PostTypeId=""2"" ParentId=""44979276"" CreationDate=""2017-07-07T21:01:19.603"" Score=""1"" Body=""&lt;p&gt;First a little about the &quot;template&quot; concept:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A &lt;a href=&quot;https://golang.org/pkg/text/template/#Template&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;template.Template&lt;/code&gt;&lt;/a&gt; value is &lt;em&gt;&quot;the representation of a parsed template&quot;&lt;/em&gt;. But the wording here is a little &quot;imperfect&quot;. A &lt;code&gt;template.Template&lt;/code&gt; value may be (and usually is) a &lt;em&gt;collection of multiple, associated templates&lt;/em&gt;. &lt;code&gt;template.Template&lt;/code&gt; has an unexported field:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;tmpl   map[string]*Template // Map from name to defined templates.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This &lt;code&gt;tmpl&lt;/code&gt; field holds all other associated templates, templates that are visible to the template, and which can be referred to by their names.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can read more about this in this answer: &lt;a href=&quot;https://stackoverflow.com/questions/41176355/go-template-name/41187671#41187671&quot;&gt;Go template name&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Back to the &lt;a href=&quot;https://golang.org/pkg/text/template/#Template.ParseFiles&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Template.ParseFiles()&lt;/code&gt;&lt;/a&gt; method. This method parses multiple templates from the files passed to it as parameters. The templates parsed form the files will be named after the file names (without folders, just the file name), and they will be added to the internal, associated templates map of the &lt;code&gt;t&lt;/code&gt; template designated by the method receiver.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The parsed templates will not be appended. Multiple, separate &lt;code&gt;template.Template&lt;/code&gt; values will be created for them, but they will be associated (so they can refer to each other, e.g. they can include each other).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let's see an example. Let's assume we have these 2 template files:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;a.html&lt;/code&gt; is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;I'm a.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And &lt;code&gt;b.html&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;I'm b.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And an example code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t := template.New(&quot;a.html&quot;)&#xA;if _, err := t.ParseFiles(&quot;a.html&quot;, &quot;b.html&quot;); err != nil {&#xA;    panic(err)&#xA;}&#xA;if err := t.Execute(os.Stdout, nil); err != nil {&#xA;    panic(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This example creates a new, empty template named &lt;code&gt;a.html&lt;/code&gt;, then parses 2 files: &lt;code&gt;a.html&lt;/code&gt; and &lt;code&gt;b.html&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What will be the result? &lt;code&gt;t&lt;/code&gt; will denote the &lt;code&gt;a.html&lt;/code&gt; template, because we created it prior with that specific name. Running the code, the output will be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;I'm a.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now if we change the first line to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t := template.New(&quot;x.html&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And leave the rest unchanged, running it we see something similar:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;panic: template: &quot;x.html&quot; is an incomplete or empty template&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The reason is that &lt;code&gt;t&lt;/code&gt; denotes a template named &lt;code&gt;x.html&lt;/code&gt; but it's empty, as we didn't parse anything &quot;into&quot; it, and the parsed files also didn't match the name &lt;code&gt;x.html&lt;/code&gt;. So attempting to execute it results in an error.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now if we try to execute one of its associated, named template:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if err := t.ExecuteTemplate(os.Stdout, &quot;a.html&quot;, nil); err != nil {&#xA;    panic(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It succeeds, and again gives:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;I'm a.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-07T22:42:33.800"" LastActivityDate=""2017-07-07T22:42:33.800"" CommentCount=""1"" />
",44979550
44980906,"44980906      <row Id=""44980906"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44981208"" PostTypeId=""2"" ParentId=""44980906"" CreationDate=""2017-07-08T00:05:08.847"" Score=""1"" Body=""&lt;p&gt;&lt;code&gt;Improving speed?&lt;/code&gt; this is subjective one; depends on many factors such as server uplink, client uplink, etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Instead, I will provide my inputs to improve your code snippets:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Let's start with &lt;code&gt;sync.WaitGroup&lt;/code&gt; - I do not see a benefit as per your code flow, you just create and wait for goroutine to complete. Instead use without WaitGroup. &lt;code&gt;Tip:&lt;/code&gt; Do not use feature for sake/buzz; use it when needed.&lt;/li&gt;&#xA;&lt;li&gt;Do not create multiple &lt;code&gt;bytes.Buffer&lt;/code&gt; and &lt;code&gt;Reader&lt;/code&gt;, when you can accomplish without it. For e.g. getting fileSize after the resize, just do &lt;code&gt;buf.Len()&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;If you want to offload the AWS upload then extract upload code part into separate &lt;code&gt;func&lt;/code&gt; and call it as goroutine.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;I have updated your code snippet (I have not tested your code, so please fix/improve it as required):&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func UploadStreamImage(w http.ResponseWriter, r *http.Request) {&#xA;    file, handler, err := r.FormFile(&quot;file&quot;)&#xA;    if err != nil {&#xA;        log_errors(&quot; error on upload&quot;, err.Error(), w)&#xA;        fmt.Println(&quot;Error Uploading Image&quot;)&#xA;        return&#xA;    }&#xA;    defer file.Close()&#xA;&#xA;    // Suggestion: You can calculate the file size from bytes.&#xA;    // instead getting it from form; since after resize image will change&#xA;    imgSize, err := strconv.Atoi(r.FormValue(&quot;imgsize&quot;))&#xA;    if err != nil {&#xA;        println(&quot;Error converting to integer&quot;)&#xA;        log_errors(&quot;Error converting to integer&quot;, err.Error(), w)&#xA;        return&#xA;    }&#xA;&#xA;    img, err := imaging.Decode(file)&#xA;    if err != nil {&#xA;        print(&quot;Imaging Open error&quot;)&#xA;        log_errors(&quot;Error decoding&quot;, err.Error(), w)&#xA;        return&#xA;    }&#xA;&#xA;    b := img.Bounds()&#xA;    heightImg := b.Max.Y&#xA;    widthImg := b.Max.X&#xA;&#xA;    // resize image&#xA;    height := int(float64(heightImg) * .23)&#xA;    width := int(float64(widthImg) * .23)&#xA;&#xA;    if imgSize &amp;lt; 401 {&#xA;        height = int(float64(heightImg) * 1)&#xA;        width = int(float64(widthImg) * 1)&#xA;&#xA;    } else if imgSize &amp;gt;= 401 &amp;amp;&amp;amp; imgSize &amp;lt; 900 {&#xA;        height = int(float64(heightImg) * .68)&#xA;        width = int(float64(widthImg) * .68)&#xA;        println(&quot;Middle Image&quot;)&#xA;    } else if imgSize &amp;gt;= 900 &amp;amp;&amp;amp; imgSize &amp;lt; 1300 {&#xA;        height = int(float64(heightImg) * .45)&#xA;        width = int(float64(widthImg) * .45)&#xA;    } else if imgSize &amp;gt;= 1301 &amp;amp;&amp;amp; imgSize &amp;lt; 1700 {&#xA;        height = int(float64(heightImg) * .40)&#xA;        width = int(float64(widthImg) * .40)&#xA;    }&#xA;&#xA;    new_img := imaging.Resize(img, width, height, imaging.Lanczos)&#xA;    // end resize&#xA;&#xA;    var buf bytes.Buffer&#xA;    err = imaging.Encode(&amp;amp;buf, new_img, imaging.JPEG)&#xA;    if err != nil {&#xA;        log.Println(err)&#xA;        log_errors(&quot; error encoding file&quot;, err.Error(), w)&#xA;        return&#xA;    }&#xA;&#xA;    fileType := http.DetectContentType(buf.Bytes())&#xA;    fileSize := buf.Len()&#xA;    path := handler.Filename&#xA;    params := &amp;amp;s3.PutObjectInput{&#xA;        Bucket: aws.String(&quot;bucket name&quot;),&#xA;        Key:    aws.String(path),&#xA;        Body:   bytes.NewReader(buf.Bytes()),&#xA;&#xA;        ContentLength: aws.Int64(fileSize),&#xA;        ContentType:   aws.String(fileType),&#xA;    }&#xA;&#xA;    resp, err := svc.PutObject(params)&#xA;    if err != nil {&#xA;        fmt.Printf(&quot;bad response: %s&quot;, err)&#xA;        log_errors(&quot;error in putObject&quot;, err.Error(), w)&#xA;        return&#xA;    }&#xA;&#xA;    fmt.Println(&quot;Done&quot;, resp)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-07-08T00:05:08.847"" CommentCount=""4"" />
",44981208
44980953,"44980953      <row Id=""44980953"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44981225"" PostTypeId=""2"" ParentId=""44980953"" CreationDate=""2017-07-08T00:08:08.873"" Score=""0"" Body=""&lt;p&gt;Yes, you should create a temporary array to Unmarshal the contents of each JSON, then append the items to your final result array in order to return the whole collection as one item.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See here an example of doing that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your case &lt;code&gt;input&lt;/code&gt; would come from each of the S3 files you mention. Also, you would probably put that unmarshal logic in its own function to be able to call it for each input JSON.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;)&#xA;&#xA;type Record struct {&#xA;    Author string `json:&quot;author&quot;`&#xA;    Title  string `json:&quot;title&quot;`&#xA;}&#xA;&#xA;func main() {&#xA;    var allRecords []Record&#xA;&#xA;    input := []byte(`[{&#xA;      &quot;author&quot;: &quot;Nirvana&quot;,&#xA;      &quot;title&quot;:  &quot;Smells like teen spirit&quot;&#xA;    }, {&#xA;      &quot;author&quot;: &quot;The Beatles&quot;,&#xA;      &quot;title&quot;:  &quot;Help&quot;&#xA;    }]`)&#xA;&#xA;    var tmpRecords []Record&#xA;    err := json.Unmarshal(input, &amp;amp;tmpRecords)&#xA;    if (err != nil) {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    allRecords = append(allRecords, tmpRecords...)  &#xA;&#xA;    fmt.Println(&quot;RECORDS:&quot;, allRecords)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/ZZGhy4UNhP&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/ZZGhy4UNhP&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastEditorUserId=""4907630"" LastEditDate=""2017-07-08T00:16:47.237"" LastActivityDate=""2017-07-08T00:16:47.237"" CommentCount=""2"" />
",44981225
43748751,"43748751      <row Id=""43748751"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44981367"" PostTypeId=""2"" ParentId=""43748751"" CreationDate=""2017-07-08T00:31:29.197"" Score=""4"" Body=""&lt;p&gt;In the case of a REST API, you'll typically deal with at least three different implementation layers:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HTTP handler&lt;/li&gt;&#xA;&lt;li&gt;some sort of business logic/use case&lt;/li&gt;&#xA;&lt;li&gt;persistent storage/database interface&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;You can treat and build each of these separately which does not only decouple it but makes it just a lot more testable, too. These parts then are put together by injecting the necessary bits since they conform to interfaces you define. Usually this ends up leaving the &lt;code&gt;main&lt;/code&gt; or a separate configuration mechanism the only place that's aware of &lt;em&gt;what&lt;/em&gt; is combined and injected &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The article &lt;a href=&quot;http://manuel.kiessling.net/2012/09/28/applying-the-clean-architecture-to-go-applications&quot; rel=&quot;nofollow noreferrer&quot;&gt;Applying The Clean Architecture to Go applications&lt;/a&gt; illustrates very well how the various parts can be separated. How strictly you should follow this approach depends a little on the complexity of your project.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Below is a very basic breakdown, separating the handler from logic and database layer.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;HTTP handler&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The handler does nothing else than mapping the request values into local variables or possibly custom data structures if needed. In addition to that it just runs the use case logic and maps the result before writing it to the response. This is also a good place to map different errors to different response objects.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Interactor interface {&#xA;    Bar(foo string) ([]usecases.Bar, error)&#xA;}&#xA;&#xA;type MyHandler struct {&#xA;    Interactor Interactor&#xA;}&#xA;&#xA;func (handler MyHandler) Bar(w http.ResponseWriter, r *http.Request) {&#xA;    foo := r.FormValue(&quot;foo&quot;)&#xA;    res, _ := handler.Interactor.Bar(foo)&#xA;&#xA;    // you may want to map/cast res to a different type that is encoded&#xA;    // according to your spec&#xA;    json.NewEncoder(w).Encode(res)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Unit tests are a great way to test that the HTTP response contains the correct data for different results and errors.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Use case / business logic&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Since the repository is just specified as an interface it's very easy to create unit tests for the business logic with different results returned by a mock repository implementation that also conforms to &lt;code&gt;DataRepository&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type DataRepository interface {&#xA;    Find(f string) (Bar, error)&#xA;}&#xA;&#xA;type Bar struct {&#xA;    Identifier string&#xA;    FooBar     int&#xA;}&#xA;&#xA;type Interactor struct {&#xA;    DataRepository DataRepository&#xA;}&#xA;&#xA;func (interactor *Interactor) Bar(f string) (Bar, error) {&#xA;    b := interactor.DataRepository.Find(f)&#xA;&#xA;    // ... custom logic&#xA;&#xA;    return b&#xA;}   &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;Database interface&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The part talking to the database implements the &lt;code&gt;DataRepository&lt;/code&gt; interface but is otherwise totally independent on how it turns the data into the expected types.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Repo {&#xA;    db sql.DB&#xA;}&#xA;&#xA;func NewDatabaseRepo(db sql.DB) *Repo {&#xA;    // config if necessary...&#xA;&#xA;    return &amp;amp;Repo{db: db}&#xA;}&#xA;&#xA;func (r Repo)Find(f string) (usecases.Bar, error) {&#xA;    rows, err := db.Query(&quot;SELECT id, foo_bar FROM bar WHERE foo=?&quot;, f)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    defer rows.Close()&#xA;&#xA;    for rows.Next() {&#xA;        var id string, fooBar int&#xA;        if err := rows.Scan(&amp;amp;id, &amp;amp;fooBar); err != nil {&#xA;            log.Fatal(err)&#xA;        }&#xA;        // map row value to desired structure&#xA;        return usecases.Bar{Identifier: id, FooBar: fooBar}&#xA;    }&#xA;&#xA;    return errors.New(&quot;not found&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Again, this allows testing the database operations separately without the need of any mock SQL statements.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The code above is very much pseudo code and incomplete.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""486998"" LastActivityDate=""2017-07-08T00:31:29.197"" CommentCount=""1"" />
",44981367
44980688,"44980688      <row Id=""44980688"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44983360"" PostTypeId=""2"" ParentId=""44980688"" CreationDate=""2017-07-08T06:45:32.713"" Score=""1"" Body=""&lt;p&gt;There are probably many ways to approach this. Here's one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Bleve indexes documents which are collections of key/value metadata pairs. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your case, a document could be represented by 2 key/value pairs: name of .xml file (to uniquely identify the document) and content of the file.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Doc struct {&#xA;    Name string&#xA;    Body string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The issue is that body is XML and Bleve doesn't support XML out-of-the-box.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A way to address it would be to pre-process XML file by stripping unwanted tags and content. You can do it using &lt;a href=&quot;https://golang.org/pkg/encoding/xml/&quot; rel=&quot;nofollow noreferrer&quot;&gt;encoding/xml&lt;/a&gt; standard library.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For an example of a similar task you can see the code of &lt;a href=&quot;https://github.com/blevesearch/fosdem-search/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/blevesearch/fosdem-search/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In there they index file in custom format (&lt;a href=&quot;https://github.com/blevesearch/fosdem-search/blob/master/fosdem.ical&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/blevesearch/fosdem-search/blob/master/fosdem.ical&lt;/a&gt;) by parsing it into a format they can submit to Bleve for indexing (&lt;a href=&quot;https://github.com/blevesearch/fosdem-search/blob/master/ical.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/blevesearch/fosdem-search/blob/master/ical.go&lt;/a&gt;).&lt;/p&gt;&#xA;"" OwnerUserId=""2898"" LastActivityDate=""2017-07-08T06:45:32.713"" CommentCount=""0"" />
",44983360
44986340,"44986340      <row Id=""44986340"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44987471"" PostTypeId=""2"" ParentId=""44986340"" CreationDate=""2017-07-08T14:56:17.460"" Score=""1"" Body=""&lt;p&gt;&lt;code&gt;jobWG.Wait()&lt;/code&gt; is inside the &lt;code&gt;for _, job := range jobs&lt;/code&gt; loop when it should be outside.&#xA;Here is a fixed version &lt;a href=&quot;https://play.golang.org/p/KNLS0y8xLg&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/KNLS0y8xLg&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""7331997"" LastActivityDate=""2017-07-08T14:56:17.460"" CommentCount=""0"" />
",44987471
44988903,"44988903      <row Id=""44988903"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44989457"" PostTypeId=""2"" ParentId=""44988903"" CreationDate=""2017-07-08T18:25:11.027"" Score=""1"" Body=""&lt;p&gt;This appears to be a bug in Cloud SDK which is affecting &lt;code&gt;dev_appserver.py&lt;/code&gt; when using with &lt;code&gt;App Engine Managed VMs&lt;/code&gt;. It does not seem to be affecting App Engine Standard or App Engine Flex environments.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Until Google releases a new Cloud SDK with the fix, you can modify the &lt;code&gt;CLOUD_SDK_INSTALL_DIR//platform/google_appengine/google/appengine/tools/devappserver2/go_managedvm.py&lt;/code&gt; file locally as shown below (added both the patchable unified diff as well as before/after just for convenience).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also consider moving to App Engine Flex since &lt;a href=&quot;https://cloud.google.com/appengine/docs/flexible/go/upgrading&quot; rel=&quot;nofollow noreferrer&quot;&gt;Managed VMs are deprecated and will not be supported after October 27, 2017&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: The Managed VMs beta environment (applications deployed with&#xA;  &lt;code&gt;vm:true&lt;/code&gt;) is deprecated and will be decommissioned. This page is for&#xA;  users who are already using the flexible environment with &lt;code&gt;vm:true&lt;/code&gt; in&#xA;  their &lt;code&gt;app.yaml&lt;/code&gt; and want to upgrade to the latest release. If you are&#xA;  updating your application from the standard environment, see the&#xA;  &lt;a href=&quot;https://cloud.google.com/appengine/docs/flexible/go/migrating&quot; rel=&quot;nofollow noreferrer&quot;&gt;Migrating Services from the Standard Environment to the Flexible&#xA;  Environment instead&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h2&gt;Diff in patchable format&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;--- /Users/tuxdude/google-cloud-sdk-orig/platform/google_appengine/google/appengine/tools/devappserver2go_managedvm.py     2017-07-08 11:11:11.000000000 -0700&#xA;+++ /Users/tuxdude/google-cloud-sdk/platform/google_appengine/google/appengine/tools/devappserver2/go_managedvm.py      2017-07-08 11:11:11.000000000 -0700&#xA;@@ -152,15 +152,9 @@&#xA;     logging.debug('Build succeeded:\n%s\n%s', stdout, stderr)&#xA;     self._go_executable = exe_name&#xA;&#xA;-  def maybe_build(self, maybe_modified_since_last_build):&#xA;+  def maybe_build(self):&#xA;     &quot;&quot;&quot;Builds an executable for the application if necessary.&#xA;&#xA;-    Args:&#xA;-      maybe_modified_since_last_build: True if any files in the application root&#xA;-          or the GOPATH have changed since the last call to maybe_build, False&#xA;-          otherwise. This argument is used to decide whether a build is Required&#xA;-          or not.&#xA;-&#xA;     Returns:&#xA;       True if compilation was successfully performed (will raise&#xA;         an exception if compilation was attempted but failed).&#xA;@@ -173,9 +167,6 @@&#xA;       self._work_dir = tempfile.mkdtemp('appengine-go-bin')&#xA;       atexit.register(_rmtree, self._work_dir)&#xA;&#xA;-    if self._go_executable and not maybe_modified_since_last_build:&#xA;-      return False&#xA;-&#xA;     if self._go_executable:&#xA;       logging.debug('Rebuilding Go application due to source modification')&#xA;     else:&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;Before:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  def maybe_build(self, maybe_modified_since_last_build):&#xA;    &quot;&quot;&quot;Builds an executable for the application if necessary.&#xA;&#xA;    Args:&#xA;      maybe_modified_since_last_build: True if any files in the application root&#xA;          or the GOPATH have changed since the last call to maybe_build, False&#xA;          otherwise. This argument is used to decide whether a build is Required&#xA;          or not.&#xA;&#xA;    Returns:&#xA;      True if compilation was successfully performed (will raise&#xA;        an exception if compilation was attempted but failed).&#xA;      False if compilation was not attempted.&#xA;&#xA;    Raises:&#xA;      BuildError: if building the executable fails for any reason.&#xA;    &quot;&quot;&quot;&#xA;    if not self._work_dir:&#xA;      self._work_dir = tempfile.mkdtemp('appengine-go-bin')&#xA;      atexit.register(_rmtree, self._work_dir)&#xA;&#xA;    if self._go_executable and not maybe_modified_since_last_build:&#xA;      return False&#xA;&#xA;    if self._go_executable:&#xA;      logging.debug('Rebuilding Go application due to source modification')&#xA;    else:&#xA;      logging.debug('Building Go application')&#xA;    self._build()&#xA;    return True&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;After:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  def maybe_build(self):&#xA;    &quot;&quot;&quot;Builds an executable for the application if necessary.&#xA;&#xA;    Returns:&#xA;      True if compilation was successfully performed (will raise&#xA;        an exception if compilation was attempted but failed).&#xA;      False if compilation was not attempted.&#xA;&#xA;    Raises:&#xA;      BuildError: if building the executable fails for any reason.&#xA;    &quot;&quot;&quot;&#xA;    if not self._work_dir:&#xA;      self._work_dir = tempfile.mkdtemp('appengine-go-bin')&#xA;      atexit.register(_rmtree, self._work_dir)&#xA;&#xA;    if self._go_executable:&#xA;      logging.debug('Rebuilding Go application due to source modification')&#xA;    else:&#xA;      logging.debug('Building Go application')&#xA;    self._build()&#xA;    return True&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""380757"" LastActivityDate=""2017-07-08T18:25:11.027"" CommentCount=""5"" />
",44989457
44989924,"44989924      <row Id=""44989924"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44990051"" PostTypeId=""2"" ParentId=""44989924"" CreationDate=""2017-07-08T19:31:40.473"" Score=""7"" Body=""&lt;p&gt;Because &lt;a href=&quot;https://golang.org/pkg/builtin/#error&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; is just an interface. It may hold a value of any concrete type that implements it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your example you used &lt;a href=&quot;https://golang.org/pkg/fmt/#Errorf&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;fmt.Errorf()&lt;/code&gt;&lt;/a&gt; to create an &lt;code&gt;error&lt;/code&gt; value. That calls &lt;a href=&quot;https://golang.org/pkg/errors/#example_New&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;errors.New()&lt;/code&gt;&lt;/a&gt; which returns a pointer to a value of the unexported &lt;code&gt;errors.errorString&lt;/code&gt; struct. Its definition is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type errorString struct {&#xA;    s string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This struct value will be marshaled, but since it has no exported fields (only exported fields are marshaled), it will be an empty JSON object: &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &quot;fix&quot; is: don't marshal values of &quot;general&quot; interfaces, relying on that the dynamic values can be marshaled into JSON meaningfully. Instead you should add a field that stores the error string (the result of &lt;code&gt;error.Error()&lt;/code&gt;), and omit the &lt;code&gt;Error error&lt;/code&gt; field from marshaling, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type TemplateResponse struct {&#xA;    Message  string&#xA;    Error    error `json:&quot;-&quot;`&#xA;    ErrorMsg string&#xA;    Template Template&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Of course then you also need to set / fill the &lt;code&gt;ErrorMsg&lt;/code&gt; field before marshaling.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Or if you don't need to store the &lt;code&gt;error&lt;/code&gt; value in the struct, remove that field completely:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type TemplateResponse struct {&#xA;    Message  string&#xA;    ErrorMsg string&#xA;    Template Template&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you still want to keep the &lt;code&gt;Error error&lt;/code&gt; field (and not the &lt;code&gt;ErrorMsg&lt;/code&gt; field), then you need to implement a custom marshaling logic by implementing the &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Marshaler&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json.Marshaler&lt;/code&gt;&lt;/a&gt; interface where you can &quot;convert&quot; the &lt;code&gt;error&lt;/code&gt; value to a meaningful &lt;code&gt;string&lt;/code&gt; for example (or into another value that can be marshaled properly).&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""734040"" LastEditDate=""2017-07-09T06:54:19.667"" LastActivityDate=""2017-07-09T06:54:19.667"" CommentCount=""1"" />
",44990051
44988530,"44988530      <row Id=""44988530"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44990195"" PostTypeId=""2"" ParentId=""44988530"" CreationDate=""2017-07-08T19:51:50.153"" Score=""1"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;Is there a relation between Sleep() and synchronization?&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;NO&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Synchronization happens between value sent to channel and retrieve from channel.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var c = make(chan string)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Channel &lt;code&gt;c&lt;/code&gt; can hold one value of type string at a time. Until the value is retrieve from channel &lt;code&gt;&amp;lt;- c&lt;/code&gt;; function &lt;code&gt;pinger&lt;/code&gt;, &lt;code&gt;ponger&lt;/code&gt; cannot send value to channel &lt;code&gt;c&lt;/code&gt; (i.e. pinger and ponger is waiting to send value to channel till the time you read from printer function).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So in your example, you introduced the time delay via &lt;code&gt;Sleep&lt;/code&gt; func to read the value from channel &lt;code&gt;c&lt;/code&gt; on printer function. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;That's why you get nice and slow read with the help of &lt;code&gt;Sleep&lt;/code&gt; func :) &lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-08T22:50:58.827"" LastActivityDate=""2017-07-08T22:50:58.827"" CommentCount=""6"" />
",44990195
44991854,"44991854      <row Id=""44991854"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44991933"" PostTypeId=""2"" ParentId=""44991854"" CreationDate=""2017-07-09T00:36:22.187"" Score=""3"" Body=""&lt;p&gt;I would say option 1 you mention is the more idiomatic way to define such functions, if they don't need any state that would warrant to tie them to an underlying struct.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If there is some state you'd like to have as context for the function, then option 2 would be the way to go.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that in Go, functions are &quot;first class citizens&quot;, so you don't have Java's constraints of needing to define a class for static methods.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And yes, if you want a separate namespace you'd need to define separate packages (just as in Java you'd need to define separate classes and/or packages).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want your implementation to be idiomatic, I'd suggest you take a look at Go's standard libraries (pick a few packages and explore how they implement their functions) to get a better feeling of the usual ways to structure this.&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-09T00:36:22.187"" CommentCount=""2"" />
",44991933
44979398,"44979398      <row Id=""44979398"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44992313"" PostTypeId=""2"" ParentId=""44979398"" CreationDate=""2017-07-09T02:01:07.553"" Score=""0"" Body=""&lt;p&gt;In &lt;code&gt;net/rpc&lt;/code&gt; godoc example it just shows how to use global defaults. Instead create your own rpc and http server instances.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import &quot;net/rpc&quot;&#xA;import &quot;net/http&quot;&#xA;&#xA;rpcServer := rpc.NewServer()&#xA;// rpc stuff&#xA;httpServer := &amp;amp;http.Server{&#xA;    Handler: rpcServer,&#xA;}&#xA;// graceful shutdown stuff&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For graceful shutdown, there's a few packages. I know of this one. &lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://github.com/tylerb/graceful&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/tylerb/graceful&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""824377"" LastActivityDate=""2017-07-09T02:01:07.553"" CommentCount=""0"" />
",44992313
44997314,"44997314      <row Id=""44997314"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44997821"" PostTypeId=""2"" ParentId=""44997314"" CreationDate=""2017-07-09T15:04:59.057"" Score=""4"" Body=""&lt;p&gt;Because the spec allows converting a &lt;code&gt;string&lt;/code&gt; value to a &lt;code&gt;rune&lt;/code&gt; slice (&lt;code&gt;[]rune&lt;/code&gt;), and &lt;code&gt;rune&lt;/code&gt; is an &lt;a href=&quot;https://golang.org/ref/spec#Numeric_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;alias&lt;/a&gt; to &lt;code&gt;int32&lt;/code&gt; (they are one and the same). This is what the first &lt;a href=&quot;https://golang.org/ref/spec#Conversions&quot; rel=&quot;nofollow noreferrer&quot;&gt;conversion&lt;/a&gt;&#xA; does:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Converting a value of a string type to a slice of runes type yields a slice containing the individual Unicode code points of the string.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Basically a &lt;code&gt;string&lt;/code&gt; =&gt; &lt;code&gt;[]rune&lt;/code&gt; conversion decodes the UTF-8 bytes of the text (this is how Go stores strings in memory) to Unicode code points (&lt;code&gt;rune&lt;/code&gt;s).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And the spec does not allow converting a &lt;code&gt;string&lt;/code&gt; to an &lt;code&gt;int&lt;/code&gt; slice, so the second is a compile-time error.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-09T16:09:09.757"" LastActivityDate=""2017-07-09T16:09:09.757"" CommentCount=""1"" />
",44997821
44874705,"44874705      <row Id=""44874705"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""44999537"" PostTypeId=""2"" ParentId=""44874705"" CreationDate=""2017-07-09T18:12:11.473"" Score=""0"" Body=""&lt;p&gt;In your playground example, you're using &lt;code&gt;for {}&lt;/code&gt; to keep the server running for forever.&#xA;This seems to deprive the goroutines from ever getting to run.&#xA;Try using e.g. a &lt;code&gt;WaitGroup&lt;/code&gt; to yield control from the &lt;code&gt;main()&lt;/code&gt; routine and let the &lt;code&gt;flow()&lt;/code&gt; routines handle the incoming UDP packets.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import (&#xA;    ...&#xA;    &quot;sync&quot;&#xA;    ...&#xA;)&#xA;&#xA;...&#xA;&#xA;func main() {&#xA;&#xA;    fmt.Print(&quot;Starting server.&quot;)&#xA;    for i := *Start; i &amp;lt;= *End; i++ {&#xA;        x := strconv.Itoa(i)&#xA;        go flow(x)&#xA;    }&#xA;&#xA;    var wg sync.WaitGroup&#xA;    wg.Add(1)&#xA;    wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2350684"" LastActivityDate=""2017-07-09T18:12:11.473"" CommentCount=""2"" />
",44999537
44999853,"44999853      <row Id=""44999853"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45000214"" PostTypeId=""2"" ParentId=""44999853"" CreationDate=""2017-07-09T19:30:05.710"" Score=""0"" Body=""&lt;p&gt;Give to printf the expected format, in most cases, &lt;code&gt;%v&lt;/code&gt; is fine.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;strings&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    str := &quot;fulltext&quot;&#xA;    var slice []string&#xA;    slice = strings.Split(str, &quot;&quot;)&#xA;&#xA;    fmt.Printf(&quot;anwer: %v&quot;, slice)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;see &lt;a href=&quot;https://golang.org/pkg/fmt/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/fmt/&lt;/a&gt; for more info.&lt;/p&gt;&#xA;"" OwnerUserId=""7925197"" LastActivityDate=""2017-07-09T19:30:05.710"" CommentCount=""0"" />
",45000214
45000982,"45000982      <row Id=""45000982"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45001093"" PostTypeId=""2"" ParentId=""45000982"" CreationDate=""2017-07-09T21:16:11.847"" Score=""2"" Body=""&lt;p&gt;Little endian:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;n := int(uint(b[0]) | uint(b[1])&amp;lt;&amp;lt;8 | uint(b[2])&amp;lt;&amp;lt;16))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Big endian:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;n := int(uint(b[2]) | uint(b[1])&amp;lt;&amp;lt;8 | uint(b[0])&amp;lt;&amp;lt;16))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-07-09T21:16:11.847"" CommentCount=""0"" />
",45001093
45001221,"45001221      <row Id=""45001221"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45001256"" PostTypeId=""2"" ParentId=""45001221"" CreationDate=""2017-07-09T21:35:49.323"" Score=""1"" Body=""&lt;p&gt;Defining variable is &lt;code&gt;var &amp;lt;variable-name&amp;gt; &amp;lt;type&amp;gt;&lt;/code&gt;, learn more &lt;a href=&quot;https://www.golang-book.com/books/intro/4&quot; rel=&quot;nofollow noreferrer&quot;&gt;about variables&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var file *os.File&#xA;var err error&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your updated code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;  path := &quot;list.txt&quot;&#xA;&#xA;  var file *os.File&#xA;  var err error&#xA;&#xA;  // Check if file exists&#xA;  if err = os.Stat(path); os.IsNotExist(err) {&#xA;    file, err = os.Create(path)&#xA;  } else { // If file exists, open it&#xA;    file, err = os.Open(path)&#xA;  }&#xA;&#xA;  // Check errors opening and creating file&#xA;  if err != nil {&#xA;    log.Fatal(err)&#xA;    return&#xA;  }&#xA;&#xA;  // Defer closing file&#xA;  defer file.Close()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-09T21:41:24.153"" LastActivityDate=""2017-07-09T21:41:24.153"" CommentCount=""2"" />
",45001256
45004854,"45004854      <row Id=""45004854"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45005304"" PostTypeId=""2"" ParentId=""45004854"" CreationDate=""2017-07-10T06:41:47.533"" Score=""2"" Body=""&lt;p&gt;Refer: &lt;a href=&quot;https://golang.org/ref/spec#Appending_and_copying_slices&quot; rel=&quot;nofollow noreferrer&quot;&gt;Appending to and copying slices&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In Go, arguments are passed by value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Typical &lt;code&gt;append&lt;/code&gt; usage is:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;a = append(a, x)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You need to write:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main(){&#xA;    var array [10]int&#xA;    sliceA := array[0:5]&#xA;    // append(sliceA, 4)  // discard&#xA;    sliceA = append(sliceA, 4)  // keep&#xA;    fmt.Println(sliceA)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[0 0 0 0 0 4]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I hope it helps.&lt;/p&gt;&#xA;"" OwnerUserId=""4039768"" LastActivityDate=""2017-07-10T06:41:47.533"" CommentCount=""1"" />
",45005304
45006269,"45006269      <row Id=""45006269"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45006409"" PostTypeId=""2"" ParentId=""45006269"" CreationDate=""2017-07-10T07:46:09.243"" Score=""1"" Body=""&lt;p&gt;Error message says pretty much everything :). Get() method is not intended to scan into slice, use Select() instead&lt;/p&gt;&#xA;"" OwnerUserId=""498109"" LastActivityDate=""2017-07-10T07:46:09.243"" CommentCount=""0"" />
",45006409
45007100,"45007100      <row Id=""45007100"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45007271"" PostTypeId=""2"" ParentId=""45007100"" CreationDate=""2017-07-10T08:32:40.013"" Score=""3"" Body=""&lt;p&gt;You could do something like this to avoid having to explicitly pass &lt;code&gt;frob&lt;/code&gt; over and over, while still being able to avoid making those functions methods on &lt;code&gt;frob&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type frobChecker struct {&#xA;    frob some.Frob&#xA;}&#xA;&#xA;func (fc frobChecker) discountLimit(maxDiscount float64) (RuleStatus, string) &#xA;func (fc frobChecker) discountPercentageLimit(maxDiscountPercentage float64) (RuleStatus, string) &#xA;func (fc frobChecker) usageLimit(interval valueInterval) (RuleStatus, string) &#xA;func (fc frobChecker) permanentExpiryLimit() (RuleStatus, string) &#xA;func (fc frobChecker) voucherValidity(maxValidityDays uint) (RuleStatus, string) &#xA;&#xA;func doChecks(frob some.Frob) {&#xA;    fc := frobChcker{frob}&#xA;&#xA;    status, message := fc.discountLimit(100)&#xA;&#xA;    if status != PASSED {&#xA;       ....&#xA;    }&#xA;&#xA;    ... evaluate all remaining rules here ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""10322"" LastEditorUserId=""10322"" LastEditDate=""2017-07-10T08:40:43.587"" LastActivityDate=""2017-07-10T08:40:43.587"" CommentCount=""1"" />
",45007271
45002024,"45002024      <row Id=""45002024"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45007571"" PostTypeId=""2"" ParentId=""45002024"" CreationDate=""2017-07-10T08:49:44.547"" Score=""1"" Body=""&lt;p&gt;The code is compiled only once, when you deploy the app. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Quote from the The App Engine Standard Environment &lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/&quot; rel=&quot;nofollow noreferrer&quot;&gt;doc&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Your app is automatically re-built on the server side whenever you upload new code, and if you are running the local development server the SDK automatically recompiles sources on-the-fly when you change them.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Also, the Go Runtime Environment &lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/go/runtime&quot; rel=&quot;nofollow noreferrer&quot;&gt;doc&lt;/a&gt; states:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;And—as with the Python SDK—your app will be automatically re-built whenever you change the source.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;When an instance is started, app engine only loads and runs the executable binary. This fact doesn't seem to be mentioned in the documentation, but it's indicated by the following known &lt;a href=&quot;https://issuetracker.google.com/issues/35892182&quot; rel=&quot;nofollow noreferrer&quot;&gt;issue&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Request failed because the app binary was missing&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""4283005"" LastActivityDate=""2017-07-10T08:49:44.547"" CommentCount=""0"" />
",45007571
44975330,"44975330      <row Id=""44975330"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45007579"" PostTypeId=""2"" ParentId=""44975330"" CreationDate=""2017-07-10T08:50:11.023"" Score=""0"" Body=""&lt;p&gt;Turns out the a OpenGL context was created after the function call instead of before. Very strange that the empty scene still worked and only crashed after trying to generate buffers.&lt;/p&gt;&#xA;"" OwnerUserId=""4214582"" LastActivityDate=""2017-07-10T08:50:11.023"" CommentCount=""0"" />
",45007579
45002130,"45002130      <row Id=""45002130"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45010309"" PostTypeId=""2"" ParentId=""45002130"" CreationDate=""2017-07-10T11:00:21.763"" Score=""0"" Body=""&lt;p&gt;change your code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;lines, err := reader.ReadAll()&#xA;if err == io.EOF {&#xA;    fmt.Println(&quot;Error:&quot;, err)&#xA;    return&#xA;} else {&#xA;&#xA;}&#xA;&#xA;    totalResults=len(lines)&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;to: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    lines, err := reader.ReadAll()&#xA;if err == io.EOF {&#xA;    totalResults=len(lines)&#xA;} else {&#xA;    fmt.Println(&quot;Error:&quot;, err)&#xA;    return&#xA;}&#xA;    fmt.Println(&quot;total results:&quot;, totalResults)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8096201"" LastEditorUserId=""8096201"" LastEditDate=""2017-07-10T11:14:37.290"" LastActivityDate=""2017-07-10T11:14:37.290"" CommentCount=""0"" CommunityOwnedDate=""2017-07-10T11:00:21.763"" />
",45010309
45010627,"45010627      <row Id=""45010627"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45010850"" PostTypeId=""2"" ParentId=""45010627"" CreationDate=""2017-07-10T11:28:02.813"" Score=""0"" Body=""&lt;p&gt;This is not supported by &lt;code&gt;go get&lt;/code&gt;, you need to download the files manually to your &lt;code&gt;GOPATH&lt;/code&gt; or to your &lt;code&gt;vendor/&lt;/code&gt; folder.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A vendor solution:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:mattes/migrate.git&#xA;    vendor/github.com/mattes/migrate;&#xA;cd vendor/github.com/mattes/migrate;&#xA;git checkout BRANCH_NAME;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1334796"" LastActivityDate=""2017-07-10T11:28:02.813"" CommentCount=""0"" />
",45010850
45016646,"45016646      <row Id=""45016646"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45019509"" PostTypeId=""2"" ParentId=""45016646"" CreationDate=""2017-07-10T18:43:08.487"" Score=""2"" Body=""&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/45016810/14660&quot;&gt;@Adrian already explained what's wrong with using &lt;code&gt;interface{}&lt;/code&gt; here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead, use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Adapter_pattern&quot; rel=&quot;nofollow noreferrer&quot;&gt;Adapter Pattern&lt;/a&gt;. Create your own Shape interface and make adapters for the pre-made shapes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Shape interface (it should probably be called Shape2D because 3D shapes behave differently) might look like this. This gives you the advantages of the type system, and having a unified shape interface.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Shape interface {&#xA;    Area() float32&#xA;    Perimeter() float32&#xA;    X() int&#xA;    Y() int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then create adapters around the existing objects. No wrapper is necessary, you can define an alias for the type. (&lt;code&gt;external&lt;/code&gt; here represents that Circle and Square come from some other package).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type ShapeCircle external.Circle&#xA;&#xA;func (self ShapeCircle) Area() float32 {&#xA;    return math.Pi * float32(self.Radius) * float32(self.Radius)&#xA;}&#xA;&#xA;...and so on...&#xA;&#xA;type ShapeSquare external.Square&#xA;&#xA;func (self ShapeSquare) Area() float32 {&#xA;    return float32(self.W) * float32(self.H)&#xA;}&#xA;&#xA;...and so on...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now you can &lt;em&gt;copy&lt;/em&gt; Circle and Square objects to their Shape adapters and use them as Shape.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;c := external.Circle{ Radius: 10, X: 0, Y: 0 }&#xA;&#xA;shape := ShapeCircle(c)&#xA;&#xA;fmt.Println(shape.Area())&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can also go the other way.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;external.Function( external.Circle(shape) )&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Again, this creates a copy.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Alternatively, if you don't like the copying, you can embed Circle inside ShapeCircle and Square inside ShapeSquare.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type ShapeCircle struct {&#xA;    external.Circle&#xA;}&#xA;type ShapeSquare struct {&#xA;    external.Square&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then you can use ShapeCircle as before, but you have to give it a Circle. Might want to make New function to take care of that.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;c := ShapeCircle{&#xA;    Circle: external.Circle{ Radius: 10, X: 0, Y: 0 }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It can be used as a Shape.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Println(c.Area())&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And &lt;code&gt;c.Circle&lt;/code&gt; can be used as a Circle. No copying necessary.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;external.Function( c.Circle )&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""14660"" LastEditorUserId=""14660"" LastEditDate=""2017-07-11T21:31:36.203"" LastActivityDate=""2017-07-11T21:31:36.203"" CommentCount=""5"" />
",45019509
45020481,"45020481      <row Id=""45020481"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45020558"" PostTypeId=""2"" ParentId=""45020481"" CreationDate=""2017-07-10T19:57:25.603"" Score=""2"" Body=""&lt;p&gt;Range only stops when the channel is closed. You're hitting a deadlock because nothing is writing to the channel, but you're sitting waiting for something to be written. You could add a &lt;a href=&quot;https://golang.org/pkg/sync/#WaitGroup&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sync.WaitGroup&lt;/code&gt;&lt;/a&gt; and close the channel after all of the goroutines writing to it have finished.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You should probably also change the loop as there is potential for the wrong values to be passed because you're closing over the loop variable which can change concurrently; this will be more reliable:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for _, s := range l {&#xA;    go func(s rune) {&#xA;        ch &amp;lt;- Frequency(s)&#xA;    }(s)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-10T19:57:25.603"" CommentCount=""0"" />
",45020558
45024152,"45024152      <row Id=""45024152"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45024418"" PostTypeId=""2"" ParentId=""45024152"" CreationDate=""2017-07-11T02:32:54.717"" Score=""1"" Body=""&lt;p&gt;Let's start with using &lt;code&gt;interface{}&lt;/code&gt;, when you define interface don't use pointer definition, &lt;a href=&quot;https://medium.com/@agileseeker/go-interfaces-pointers-4d1d98d5c9c6&quot; rel=&quot;nofollow noreferrer&quot;&gt;good read here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type DockerUtil struct{&#xA;    Client        DockerClient&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And moby &lt;a href=&quot;https://godoc.org/github.com/moby/moby/client#Client&quot; rel=&quot;nofollow noreferrer&quot;&gt;Client&lt;/a&gt; implements lot of methods and you would like to do &lt;code&gt;interface&lt;/code&gt; for selective methods.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Right way to do is via Type assertion. Good read &lt;a href=&quot;https://golang.org/doc/effective_go.html#interface_conversions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Effective Go - Type assertions&lt;/a&gt; and &lt;a href=&quot;https://golang.org/ref/spec#Type_assertions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec - Type assertion&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/strong&gt; try this code, I don't have docker env in my machine to test.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func NewDockerUtil() (*DockerUtil, error) {&#xA;    dockerClient, err := client.NewEnvClient()&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    return &amp;amp;DockerUtil{&#xA;        Client:        dockerClient.(DockerClient),&#xA;    }, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Using &lt;code&gt;DockerUtil.Client&lt;/code&gt;, you can call only &lt;code&gt;Ping&lt;/code&gt; method since your interface &lt;code&gt;DockerClient&lt;/code&gt; has definition of &lt;code&gt;Ping&lt;/code&gt; method.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;If you would like to call all the methods supported by &lt;code&gt;client.Client&lt;/code&gt; later on then you have to do type assertion-&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;dockerClient := DockerUtil.Client.(*client.Client)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-07-11T02:32:54.717"" CommentCount=""6"" />
",45024418
45024526,"45024526      <row Id=""45024526"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45024588"" PostTypeId=""2"" ParentId=""45024526"" CreationDate=""2017-07-11T02:52:58.537"" Score=""3"" Body=""&lt;p&gt;You could &lt;a href=&quot;https://golang.org/pkg/time/#Time.Truncate&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Truncate&lt;/code&gt;&lt;/a&gt; the times to make them round to a multiple of a day.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;oneDay := 24 * time.Hour&#xA;a = a.Truncate(oneDay)&#xA;b = b.Truncate(oneDay)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Find a playground with the adapted code here: &lt;a href=&quot;https://play.golang.org/p/yWIYt3UkiT&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/yWIYt3UkiT&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-11T02:52:58.537"" CommentCount=""2"" />
",45024588
45025456,"45025456      <row Id=""45025456"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45025820"" PostTypeId=""2"" ParentId=""45025456"" CreationDate=""2017-07-11T05:06:17.373"" Score=""1"" Body=""&lt;p&gt;You can see the code producing this error in &lt;a href=&quot;https://github.com/astaxie/beego/blob/7452151beec2f43c42122fd91b7523bcbccf05be/template.go#L52-L76&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;template.go&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/astaxie/beego/issues/1989&quot; rel=&quot;nofollow noreferrer&quot;&gt;This issue&lt;/a&gt; mentions:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Please use the &lt;code&gt;bee run&lt;/code&gt;, as &lt;code&gt;go get&lt;/code&gt; install the binary into the &lt;code&gt;gopath/bin&lt;/code&gt;, while the static file still in the &lt;code&gt;gopath/src/myproject&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""6309"" LastActivityDate=""2017-07-11T05:06:17.373"" CommentCount=""0"" />
",45025820
45025447,"45025447      <row Id=""45025447"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45026053"" PostTypeId=""2"" ParentId=""45025447"" CreationDate=""2017-07-11T05:29:10.943"" Score=""0"" Body=""&lt;p&gt;In two ways you can do, as per &lt;a href=&quot;https://www.firebase.com/docs/rest/guide/saving-data.html#section-update&quot; rel=&quot;nofollow noreferrer&quot;&gt;Firebase doc&lt;/a&gt; with firego client library. Drafted answer based on from firego &lt;a href=&quot;https://github.com/zabawaba99/firego/blob/v1/README.md&quot; rel=&quot;nofollow noreferrer&quot;&gt;README.md&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Note: You have not provided the complete path of the structure, I have drafted the answer based on screenshot. So update your JSON path accordingly.&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Approach 1:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;f := firego.New(&quot;https://my-firebase-app.firebaseIO.com/active-chat/Koja8GuFpIEN3kjbfPO.json&quot;, nil)&#xA;&#xA;x := map[string]string{&#xA;   &quot;Status&quot;: &quot;OFF&quot;,&#xA;}&#xA;if err := f.Update(x); err != nil {&#xA;  log.Fatal(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Approach 2:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;f := firego.New(&quot;https://my-firebase-app.firebaseIO.com&quot;, nil)&#xA;f = f.Ref(&quot;/active-chat/Koja8GuFpIEN3kjbfPO.json&quot;)&#xA;&#xA;x := map[string]string{&#xA;   &quot;Status&quot;: &quot;OFF&quot;,&#xA;}&#xA;if err := f.Update(x); err != nil {&#xA;  log.Fatal(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-07-11T05:29:10.943"" CommentCount=""4"" />
",45026053
45026520,"45026520      <row Id=""45026520"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45026651"" PostTypeId=""2"" ParentId=""45026520"" CreationDate=""2017-07-11T06:09:26.833"" Score=""1"" Body=""&lt;p&gt;Here is a good read on &lt;a href=&quot;https://medium.com/golangspec/variadic-functions-in-go-13c33182b851&quot; rel=&quot;nofollow noreferrer&quot;&gt;Variadic Functions&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Take a look at the function signature of Render, &lt;a href=&quot;https://github.com/gizak/termui/blob/master/render.go#L161&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/gizak/termui/blob/master/render.go#L161&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func Render(bs ...Bufferer) {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;All you need to do is&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;termui.Render(chatList...)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;assuming &lt;code&gt;chartList&lt;/code&gt; is a &lt;code&gt;[]Bufferer&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;&lt;br&gt;&#xA;You are only seeing one because they are stacking on top of one-another.  To see this add&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;g0.Height = 3&#xA;g0.Y = i * g0.Height            // &amp;lt;-- add this line&#xA;g0.BorderLabel = &quot;Slim Gauge&quot; &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;From a quick review of the project, it appears there are ways for auto-arranging that have to do with creating rows (and probably columns).  So you might want to explore that, or you will need to manually position your elements.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/daGvd.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/daGvd.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""141555"" LastEditorUserId=""141555"" LastEditDate=""2017-07-11T13:47:58.683"" LastActivityDate=""2017-07-11T13:47:58.683"" CommentCount=""2"" />
",45026651
45030884,"45030884      <row Id=""45030884"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45031316"" PostTypeId=""2"" ParentId=""45030884"" CreationDate=""2017-07-11T10:00:29.210"" Score=""2"" Body=""&lt;p&gt;I guess&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;slice = slice[0:l+len(data)] &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;changes &lt;code&gt;slice&lt;/code&gt; length, so you can add new elements.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;You can extend a slice's length by re-slicing it, provided it has sufficient capacity.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://tour.golang.org/moretypes/11&quot; rel=&quot;nofollow noreferrer&quot;&gt;reference&lt;/a&gt; &lt;/p&gt;&#xA;"" OwnerUserId=""4390959"" LastActivityDate=""2017-07-11T10:00:29.210"" CommentCount=""0"" />
",45031316
45030618,"45030618      <row Id=""45030618"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45031417"" PostTypeId=""2"" ParentId=""45030618"" CreationDate=""2017-07-11T10:04:06.317"" Score=""1"" Body=""&lt;p&gt;Examples of how to generate a random &lt;code&gt;bool&lt;/code&gt; value can be found here (not necessarily the fastest solutions, as that wasn't a requirement there):&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/44719156/how-can-i-let-a-function-randomly-return-either-a-true-or-a-false-in-go/44719269#44719269&quot;&gt;How can I let a function randomly return either a true or a false in go&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The slowest part of such algorithms is always getting the random data (random information). For example a &lt;a href=&quot;https://golang.org/pkg/math/rand/#Int31&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;rand.Int31()&lt;/code&gt;&lt;/a&gt; call returns 31 random bits, but if we only use it to &quot;generate&quot; a random &lt;code&gt;bool&lt;/code&gt; value (which is 1 bit of information), we waste 30 bits (which could be 30 additional random &lt;code&gt;bool&lt;/code&gt; values!).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Using &lt;a href=&quot;https://golang.org/pkg/math/rand/#Source&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;rand.Source&lt;/code&gt;&lt;/a&gt; is a good choice, as we don't need all the &quot;code kung-fu&quot; that &lt;a href=&quot;https://golang.org/pkg/math/rand/#Rand&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;rand.Rand&lt;/code&gt;&lt;/a&gt; does on the random data. We just need a source of random information.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;rand.Source&lt;/code&gt; defines one method to obtain random information:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Int63() int64&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This &lt;code&gt;Source.Int63()&lt;/code&gt; method returns 63 random bits; to be fast(est), we should use all. Of course to generate a single &lt;code&gt;bool&lt;/code&gt; value requires only 1 of its bits, but we should store the remaining and use them when subsequent random &lt;code&gt;bool&lt;/code&gt;s are asked from us.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is how it can be done:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type boolgen struct {&#xA;    src       rand.Source&#xA;    cache     int64&#xA;    remaining int&#xA;}&#xA;&#xA;func (b *boolgen) Bool() bool {&#xA;    if b.remaining == 0 {&#xA;        b.cache, b.remaining = b.src.Int63(), 63&#xA;    }&#xA;&#xA;    result := b.cache&amp;amp;0x01 == 1&#xA;    b.cache &amp;gt;&amp;gt;= 1&#xA;    b.remaining--&#xA;&#xA;    return result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Creating such a &lt;code&gt;boolgen&lt;/code&gt; is like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func New() *boolgen {&#xA;    return &amp;amp;boolgen{src: rand.NewSource(time.Now().UnixNano())}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Example usage:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;r := New()&#xA;for i := 0; i &amp;lt; 100; i++ {&#xA;    if i%10 == 0 {&#xA;        fmt.Println()&#xA;    }&#xA;    fmt.Print(r.Bool(), &quot; &quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Example output (try it on the &lt;a href=&quot;https://play.golang.org/p/oucs3zxcr_&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;false false true true false false false false false false &#xA;false false false true false false true false true true &#xA;false false true false true false false true true true &#xA;false false false false false false false true true false &#xA;true true true true false false false false true false &#xA;true true true false true true true true true true &#xA;true true false true true false false true false true &#xA;true true false false false true true true true false &#xA;true false false true true true true false false true &#xA;true false false false false false false false true false &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Some notes:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;Source&lt;/code&gt; returned by &lt;a href=&quot;https://golang.org/pkg/math/rand/#NewSource&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;rand.NewSource()&lt;/code&gt;&lt;/a&gt; is not safe for concurrent use by multiple goroutines, so our &lt;code&gt;boolgen&lt;/code&gt; is also not safe for concurrent use. On one hand this is &lt;em&gt;good&lt;/em&gt;, as it will be faster (as no synchronization takes place) than using the default source of the &lt;code&gt;rand&lt;/code&gt; package which is safe in this manner (which is by the way unexported, so can only be &quot;reached&quot; indirectly through functions of the &lt;code&gt;rand&lt;/code&gt; package).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you need to use this from multiple goroutines, &lt;em&gt;fastest&lt;/em&gt; (as in spirit of the question) would be for all goroutines to create their own &lt;code&gt;boolgen&lt;/code&gt;, so no synchronization is needed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If &lt;code&gt;boolgen&lt;/code&gt; itself must be made safe for concurrent use, simply its &lt;code&gt;Bool()&lt;/code&gt; method should be protected with a &lt;a href=&quot;https://golang.org/pkg/sync/#Mutex&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sync.Mutex&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-11T10:22:29.800"" LastActivityDate=""2017-07-11T10:22:29.800"" CommentCount=""0"" />
",45031417
45029816,"45029816      <row Id=""45029816"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45032040"" PostTypeId=""2"" ParentId=""45029816"" CreationDate=""2017-07-11T10:32:56.503"" Score=""0"" Body=""&lt;p&gt;I would like to help you as it seems you are genuinely trying to learn go. I've made few changes in your code. I've moved the menu listing in each handler. You may keep it global. Find the changed code below.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;io&quot;&#xA;    &quot;net/http&quot;&#xA;    &quot;net/url&quot;&#xA;    &quot;strconv&quot;&#xA;)&#xA;&#xA;type Menu struct {&#xA;    Name        string&#xA;    Price       int&#xA;    description string&#xA;}&#xA;&#xA;func (m Menu) String() string {&#xA;    return fmt.Sprintf(&quot;%s: %s&quot;, m.Name, m.Price)&#xA;}&#xA;&#xA;func main() {&#xA;    fmt.Println(x)&#xA;&#xA;    http.HandleFunc(&quot;/getall&quot;, getall)&#xA;    http.HandleFunc(&quot;/get&quot;, get)&#xA;    http.ListenAndServe(&quot;:8080&quot;, nil)&#xA;&#xA;}&#xA;&#xA;func getall(w http.ResponseWriter, r *http.Request) {&#xA;&#xA;    x := []Menu{&#xA;        {Name: &quot;Crispy&quot;, Price: 31},&#xA;        {Name: &quot;Burger&quot;, Price: 42},&#xA;        {Name: &quot;Superstar&quot;, Price: 17},&#xA;    }&#xA;&#xA;    for _, m := range x {&#xA;&#xA;        io.WriteString(w, &quot;&amp;lt;p&amp;gt;&quot;+m.Name+&quot; Price &quot;+strconv.Itoa(m.Price)+&quot;&amp;lt;/p&amp;gt;&quot;)&#xA;    }&#xA;&#xA;}&#xA;&#xA;func get(w http.ResponseWriter, r *http.Request) {&#xA;&#xA;    x := []Menu{&#xA;        {Name: &quot;Crispy&quot;, Price: 31},&#xA;        {Name: &quot;Burger&quot;, Price: 42},&#xA;        {Name: &quot;Superstar&quot;, Price: 17},&#xA;    }&#xA;&#xA;    url := url.URL{}&#xA;    println(url.String())&#xA;    attr := r.URL.Query()&#xA;    fmt.Println(attr)&#xA;    id := attr[&quot;id&quot;][0]&#xA;    fmt.Println(&quot;id of request &quot; + id)&#xA;    v := id&#xA;    if a, err := strconv.Atoi(v); err == nil {&#xA;        io.WriteString(w, &quot;&amp;lt;p&amp;gt; &quot;+x[a-1].Name+&quot; price &quot;+strconv.Itoa(x[a-1].Price)+&quot;&amp;lt;/p&amp;gt;&quot;)&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Try visiting: &lt;a href=&quot;http://localhost:8080/getall&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://localhost:8080/getall&lt;/a&gt; OR &lt;a href=&quot;http://localhost:8080/get?id=1&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://localhost:8080/get?id=1&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""387670"" LastEditorUserId=""387670"" LastEditDate=""2017-07-11T11:10:24.850"" LastActivityDate=""2017-07-11T11:10:24.850"" CommentCount=""1"" />
",45032040
44968397,"44968397      <row Id=""44968397"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45033827"" PostTypeId=""2"" ParentId=""44968397"" CreationDate=""2017-07-11T11:52:22.203"" Score=""2"" Body=""&lt;p&gt;When using syscall make sure the to include &lt;code&gt;import &quot;C&quot;&lt;/code&gt;  at the top of your file. Glad it helped you. &lt;/p&gt;&#xA;"" OwnerUserId=""4639336"" LastActivityDate=""2017-07-11T11:52:22.203"" CommentCount=""0"" />
",45033827
45046093,"45046093      <row Id=""45046093"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45046353"" PostTypeId=""2"" ParentId=""45046093"" CreationDate=""2017-07-12T00:16:08.707"" Score=""1"" Body=""&lt;p&gt;A &lt;code&gt;Scanner&lt;/code&gt; is a complicated structure, and one that embeds a buffer.  The buffer can grow dynamically (depending on what the &lt;code&gt;scan&lt;/code&gt; function requests) up to 64kB (&lt;code&gt;MaxScanTokenSize&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So in general it is not a good idea to keep redundant &lt;code&gt;Scanner&lt;/code&gt;s around, as the buffers cannot be released until the &lt;code&gt;Scanner&lt;/code&gt;s are discarded.  But perhaps a few extra kilobytes of memory don't matter much in your case.&lt;/p&gt;&#xA;"" OwnerUserId=""4127569"" LastActivityDate=""2017-07-12T00:16:08.707"" CommentCount=""2"" />
",45046353
45046680,"45046680      <row Id=""45046680"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45046927"" PostTypeId=""2"" ParentId=""45046680"" CreationDate=""2017-07-12T01:37:51.140"" Score=""1"" Body=""&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I just did &lt;code&gt;go get -v github.com/bitly/oauth2_proxy&lt;/code&gt; on my machine. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Verbose Details: &lt;a href=&quot;http://pasted.co/60e2b56d&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://pasted.co/60e2b56d&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Binary is produced under &lt;code&gt;$GOPATH/bin/oauth2_proxy&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;-rwxr-xr-x  1 jeeva  staff    10M Jul 11 19:02 oauth2_proxy&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Let's start from basis. First setup your Go workspace (&lt;a href=&quot;https://golang.org/doc/code.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;How to Write Go Code&lt;/a&gt;) pick a directory for GOPATH. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example: /Users/matt/dev&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;export GOPATH=/Users/matt/dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then do &lt;code&gt;go get&lt;/code&gt; to get the &lt;code&gt;oauth2_proxy&lt;/code&gt;. Typically go get is git clone of that repository.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go get github.com/bitly/oauth2_proxy&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It will get the source code and runs &lt;code&gt;go install&lt;/code&gt;. After successful execution of this command. You will see binary file in &lt;code&gt;$GOPATH/bin&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now modified the source code as you need and run go install to build the binary.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go install github.com/bitly/oauth2_proxy&#xA;&#xA;OR&#xA;cd $GOPATH/src/github.com/bitly/oauth2_proxy&#xA;go install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;If you would like to manually instead of &lt;code&gt;go get&lt;/code&gt;. Then pick a directory for &lt;code&gt;GOPATH&lt;/code&gt; and export it (as mentioned above) then&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mkdir -p $GOPATH/src/github.com/bitly&#xA;cd $GOPATH/src/github.com/bitly&#xA;git clone https://github.com/bitly/oauth2_proxy.git&#xA;cd oauth2_proxy&#xA;go get ./...&#xA;go install &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now binary will be in &lt;code&gt;$GOPATH/bin&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-12T02:05:21.543"" LastActivityDate=""2017-07-12T02:05:21.543"" CommentCount=""7"" />
",45046927
45052597,"45052597      <row Id=""45052597"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45053535"" PostTypeId=""2"" ParentId=""45052597"" CreationDate=""2017-07-12T09:18:39.457"" Score=""2"" Body=""&lt;p&gt;Use recover().&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func Testgood_PanicStatement(t *testing.T) {&#xA;  Convey(&quot;And Invalid Json return error&quot;,t, func() {&#xA;    defer func() {&#xA;      if r := recover(); r != nil {&#xA;        So(func() {},shouldPanic)&#xA;        So(actual ,ShouldEqual,&quot;&quot;)&#xA;      }&#xA;    }()&#xA;    actual := good(&quot;garbage json&quot;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Lear more about:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://blog.golang.org/defer-panic-and-recover&quot; rel=&quot;nofollow noreferrer&quot;&gt;Golang blog&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""3476121"" LastActivityDate=""2017-07-12T09:18:39.457"" CommentCount=""0"" />
",45053535
45048049,"45048049      <row Id=""45048049"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45054213"" PostTypeId=""2"" ParentId=""45048049"" CreationDate=""2017-07-12T09:47:59.800"" Score=""5"" Body=""&lt;p&gt;This is due to a &lt;em&gt;tricky&lt;/em&gt; padding.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First please allow me to slightly rename the structs and fields so it'll be easier to talk about them:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type bar1 struct {&#xA;    A [0]byte&#xA;    I int&#xA;}&#xA;&#xA;type bar2 struct {&#xA;    I int&#xA;    A [0]byte&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This of course doesn't change the size and offsets as can be verified on the &lt;a href=&quot;https://play.golang.org/p/NcTeFpDrJi&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bar1 size:     4&#xA;bar1.A offset: 0&#xA;bar1.I offset: 0&#xA;&#xA;bar2 size:     8&#xA;bar2.I offset: 0&#xA;bar2.A offset: 4&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The size of a value of type &lt;code&gt;[0]byte&lt;/code&gt; is zero, so it is perfectly valid in  &lt;code&gt;bar1&lt;/code&gt; to not reserve any space for the first field (&lt;code&gt;bar1.A&lt;/code&gt;), and lay out the &lt;code&gt;bar1.I&lt;/code&gt; field with 0 offset.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The question is: why can't the compiler do the same in the 2nd case (with &lt;code&gt;bar2&lt;/code&gt;)?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A field must have an address that must be after the memory area reserved for the previous field. In the first case the first field &lt;code&gt;bar1.A&lt;/code&gt; has 0 size, so the 2nd field may have 0 offset, it will not &quot;overlap&quot; with the first field.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In case of &lt;code&gt;bar2&lt;/code&gt;, the second field cannot have an address (and therefore an offset) that overlaps with the first field, so its offset cannot be less than the size of &lt;code&gt;int&lt;/code&gt; which is 4 bytes in case of 32-bit architectures (and 8 bytes in case of 64-bit arch).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This still seems ok. But since &lt;code&gt;bar2.A&lt;/code&gt; has zero size, why can't the size of the struct &lt;code&gt;bar2&lt;/code&gt; be just that: 4 bytes (or 8 in 64-bit arch)?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is because it is perfectly &lt;strong&gt;valid to take the address of fields (and variables) that have 0 size&lt;/strong&gt;. Ok, so what?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In case of &lt;code&gt;bar2&lt;/code&gt;, the compiler has to insert a 4 (or 8) byte padding, else taking the address of a &lt;code&gt;bar2.A&lt;/code&gt; field would point &lt;strong&gt;outside of the memory area&lt;/strong&gt; reserved for a value of type &lt;code&gt;bar2&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As an example, &lt;strong&gt;without padding&lt;/strong&gt; a value of &lt;code&gt;bar2&lt;/code&gt; may have an address of &lt;code&gt;0x100&lt;/code&gt;, size 4, so memory reserved for the struct value has address range &lt;code&gt;0x100 .. 0x103&lt;/code&gt;. Address of &lt;code&gt;bar2.A&lt;/code&gt; would be &lt;code&gt;0x104&lt;/code&gt;, that is outside of the struct's memory. In case of an array of this struct (e.g. &lt;code&gt;x [5]bar2&lt;/code&gt;), if the array starts at &lt;code&gt;0x100&lt;/code&gt;, address of &lt;code&gt;x[0]&lt;/code&gt; would be &lt;code&gt;0x100&lt;/code&gt;, address of &lt;code&gt;x[0].A&lt;/code&gt; would be &lt;code&gt;0x104&lt;/code&gt;, and address of the subsequent element &lt;code&gt;x[1]&lt;/code&gt; would also be &lt;code&gt;0x104&lt;/code&gt; but that's the address of another struct value! Not cool.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To avoid this, the compiler inserts a padding (which will be 4 or 8 bytes depending on the arch), so that taking the address of &lt;code&gt;bar2.A&lt;/code&gt; will not result in an address being outside of the struct's memory, which otherwise could raise questions and cause problems regarding garbage collection (e.g. if only address of &lt;code&gt;bar2.A&lt;/code&gt; is kept but not the struct or another pointer to it or its other fields, the whole struct should not be garbage collected, but since no pointer points to its memory area, it would seem to be valid to do so). The inserted padding will be 4 (or 8) bytes, because &lt;a href=&quot;https://golang.org/ref/spec#Size_and_alignment_guarantees&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: Size and alignment guarantees:&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;For a variable &lt;code&gt;x&lt;/code&gt; of struct type: &lt;code&gt;unsafe.Alignof(x)&lt;/code&gt; is the largest of all the values &lt;code&gt;unsafe.Alignof(x.f)&lt;/code&gt; for each field &lt;code&gt;f&lt;/code&gt; of &lt;code&gt;x&lt;/code&gt;, but at least &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;If this is so, adding an additional &lt;code&gt;int&lt;/code&gt; field would make the size of both structs equal:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type bar1 struct {&#xA;    I int&#xA;    A [0]byte&#xA;    X int&#xA;}&#xA;&#xA;type bar2 struct {&#xA;    A [0]byte&#xA;    I int&#xA;    X int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And truly they both have 8 bytes on 32-bit arch (and 16 bytes on 64-bit arch) (try it on the &lt;a href=&quot;https://play.golang.org/p/SBweaAzE2b&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bar1 size:     8&#xA;bar1.I offset: 0&#xA;bar1.A offset: 4&#xA;bar1.X offset: 4&#xA;&#xA;bar2 size:     8&#xA;bar2.A offset: 0&#xA;bar2.I offset: 0&#xA;bar2.X offset: 4&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See related question: &lt;a href=&quot;https://stackoverflow.com/questions/34219232/struct-has-different-size-if-the-field-order-is-different/34219916#34219916&quot;&gt;Struct has different size if the field order is different&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-15T09:11:50.720"" LastActivityDate=""2017-07-15T09:11:50.720"" CommentCount=""0"" />
",45054213
45054533,"45054533      <row Id=""45054533"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45054765"" PostTypeId=""2"" ParentId=""45054533"" CreationDate=""2017-07-12T10:11:38.453"" Score=""2"" Body=""&lt;p&gt;&lt;code&gt;pattern&lt;/code&gt; and &lt;code&gt;handler&lt;/code&gt; are parameter/variable names. Unlike C, the declaration of types in Go is left to right. i.e. name of variable comes first and then its type. Read more at &lt;a href=&quot;https://blog.golang.org/gos-declaration-syntax&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go's declaration syntax&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Yes, the &lt;code&gt;handler&lt;/code&gt; is like JavaScript callback function. Read more at &quot;&lt;a href=&quot;https://blog.golang.org/first-class-functions-in-go-and-new-go&quot; rel=&quot;nofollow noreferrer&quot;&gt;First class functions in Go&lt;/a&gt;&quot;&lt;/p&gt;&#xA;"" OwnerUserId=""387670"" LastEditorUserId=""387670"" LastEditDate=""2017-07-12T10:17:40.203"" LastActivityDate=""2017-07-12T10:17:40.203"" CommentCount=""1"" />
",45054765
45053785,"45053785      <row Id=""45053785"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45055502"" PostTypeId=""2"" ParentId=""45053785"" CreationDate=""2017-07-12T10:45:19.590"" Score=""0"" Body=""&lt;p&gt;All files in one folder belong to the same package (must have the same package name at the top of the file!).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You do not need to import other files that belong to the same package (the same folder).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Just remove the import and you should still have access to product in user_product and vice versa.&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-07-12T10:45:19.590"" CommentCount=""1"" />
",45055502
45055327,"45055327      <row Id=""45055327"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45056888"" PostTypeId=""2"" ParentId=""45055327"" CreationDate=""2017-07-12T11:48:46.147"" Score=""3"" Body=""&lt;p&gt;There is a proposal for golang 1.9 on this: &lt;a href=&quot;https://github.com/golang/go/issues/15314&quot; rel=&quot;nofollow noreferrer&quot;&gt;proposal: some way to reject unknown fields in encoding/json.Decoder&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Till then you could try something like this &lt;a href=&quot;https://play.golang.org/p/Ia_zOMdlXT&quot; rel=&quot;nofollow noreferrer&quot;&gt;playground&lt;/a&gt; (code also below).&#xA;The key idea is to parse the json into a map[string]interface{} and then work with the keys. This will of course get much more complicated if you have nested structs.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type Foo struct {&#xA;    Bar int `json:&quot;id,omitempty&quot;`&#xA;}&#xA;var allowedFooKeys = []string{&quot;id&quot;}&#xA;&#xA;func main() {&#xA;    b := []byte(`{&#xA;      &quot;id&quot;: 12,&#xA;      &quot;hey&quot;: &quot;hey&quot;&#xA;    }`)&#xA;    m := map[string]interface{}{}&#xA;&#xA;    if err := json.Unmarshal(b, &amp;amp;m); err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    for k, _ := range m {&#xA;        if !keyExists(k, allowedFooKeys) {&#xA;            fmt.Println(&quot;Disallowed key in JSON:&quot;, k)&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;func keyExists(key string, keys []string) bool {&#xA;    for _, k := range keys {&#xA;        if k == key {&#xA;            return true&#xA;        }&#xA;    }&#xA;    return false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can even get rid of the variable &lt;code&gt;allowedFooKeys&lt;/code&gt; by getting the allowed keys directly from the &lt;code&gt;Foo&lt;/code&gt; struct using reflect. For more info on that see here: &lt;a href=&quot;https://stackoverflow.com/questions/23840362/how-to-read-struct-field-decorators&quot;&gt;How to read struct field ` ` decorators?&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-07-12T11:48:46.147"" CommentCount=""0"" />
",45056888
45055953,"45055953      <row Id=""45055953"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45057403"" PostTypeId=""2"" ParentId=""45055953"" CreationDate=""2017-07-12T12:12:57.507"" Score=""2"" Body=""&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; achieve it in this way:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Generatorer interface {&#xA;    getValue() interface{}&#xA;}&#xA;&#xA;type StringGenerator struct {&#xA;    length         int&#xA;}&#xA;&#xA;type IntGenerator struct {&#xA;    min            int&#xA;    max            int&#xA;}&#xA;&#xA;func (g StringGenerator) getValue() interface{} {&#xA;    return &quot;randomString&quot;&#xA;}&#xA;&#xA;func (g IntGenerator) getValue() interface{} {&#xA;    return 1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The empty interface allows every value. This allows for generic code but basically stops you from using the very powerful type system of Go.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your example if you use the &lt;code&gt;getValue&lt;/code&gt; function, you will get a variable of type &lt;code&gt;interface{}&lt;/code&gt; and if you want to work with it, you need to know if it actually is a string or an int: you will need a lot of &lt;code&gt;reflect&lt;/code&gt; making your code slow.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Coming from Python I was used to code very generic. When learning Go I had to stop thinking that way.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What that means in your specific case I can't say because I don't know what &lt;code&gt;StringGenerator&lt;/code&gt; and &lt;code&gt;IntGenerator&lt;/code&gt; are being used for.&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastEditorUserId=""6220193"" LastEditDate=""2017-07-12T14:32:55.447"" LastActivityDate=""2017-07-12T14:32:55.447"" CommentCount=""0"" />
",45057403
45059243,"45059243      <row Id=""45059243"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45059339"" PostTypeId=""2"" ParentId=""45059243"" CreationDate=""2017-07-12T13:39:25.567"" Score=""2"" Body=""&lt;p&gt;You may &quot;reverse&quot; the regex to &lt;em&gt;match&lt;/em&gt; the strings you need. You want to match any 1+ chars other than &lt;code&gt;;&lt;/code&gt; followed with &lt;code&gt;;&lt;/code&gt; that are not followed with &lt;code&gt;I&lt;/code&gt; or &lt;code&gt;D&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Use&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[^;]+(?:;[^ID;][^;]*)*&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See the &lt;a href=&quot;https://regex101.com/r/w7zf2w/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;regex demo&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;[^;]+&lt;/code&gt; - 1 or more chars other than &lt;code&gt;;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;(?:;[^ID;][^;]*)*&lt;/code&gt; - zero or more sequences of:&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;;&lt;/code&gt; - a &lt;code&gt;;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;[^ID;]&lt;/code&gt; - a char other than &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; or &lt;code&gt;;&lt;/code&gt; (that is in order not to match empty values)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;[^;]*&lt;/code&gt; - zero or more chars other than &lt;code&gt;;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;See a &lt;a href=&quot;https://play.golang.org/p/ccd52O_rus&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go demo&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;regexp&quot;&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    var re = regexp.MustCompile(`[^;]+(?:;[^ID;][^;]*)*`)&#xA;    var str = `I.E.viewability:-2;D.ua:Mozilla/5.0 (Linux; Android 7.0; SM-G920W8 Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.125 Mobile Safari/537.36;D.G.city:Burnaby;D.G.zip:V5C;D.G.region:BC;D.G.E.country_code2:CA;`&#xA;&#xA;    for _, match := range re.FindAllString(str, -1) {&#xA;        fmt.Println(match)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;I.E.viewability:-2&#xA;D.ua:Mozilla/5.0 (Linux; Android 7.0; SM-G920W8 Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.125 Mobile Safari/537.36&#xA;D.G.city:Burnaby&#xA;D.G.zip:V5C&#xA;D.G.region:BC&#xA;D.G.E.country_code2:CA&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""3832970"" LastEditorUserId=""3832970"" LastEditDate=""2017-07-12T13:44:59.457"" LastActivityDate=""2017-07-12T13:44:59.457"" CommentCount=""0"" />
",45059339
45061019,"45061019      <row Id=""45061019"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45061125"" PostTypeId=""2"" ParentId=""45061019"" CreationDate=""2017-07-12T14:53:35.730"" Score=""3"" Body=""&lt;p&gt;Don't use &lt;a href=&quot;https://golang.org/pkg/log/#Fatal&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;log.Fatal&lt;/code&gt;&lt;/a&gt; - by using that function you're explicitly telling it to crash when it encounters an error:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Fatal is equivalent to Print() followed by a call to os.Exit(1).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&quot;Fatal&quot; means what it says, it kills the process.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-12T14:53:35.730"" CommentCount=""9"" />
",45061125
45061595,"45061595      <row Id=""45061595"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45061738"" PostTypeId=""2"" ParentId=""45061595"" CreationDate=""2017-07-12T15:19:57.530"" Score=""2"" Body=""&lt;p&gt;Receiving from 2 channels is not atomic. You can check the number of elements queued in a channel's buffer using the builtin &lt;a href=&quot;https://golang.org/pkg/builtin/#len&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;len()&lt;/code&gt;&lt;/a&gt; function, but you can't do a 2-channel atomic receive.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Meaning by the time you receive a value from one channel, the other channel might not be ready to receive from (e.g. another goroutine might already have received from it).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If there is only one goroutine that consumes and processes these values, simply receive a value from both channels, it will block if a value is not ready (if channel is not ready to receive from):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;v1 := &amp;lt;- ch1&#xA;v2 := &amp;lt;- ch2&#xA;&#xA;// process v1 and v2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also note that receiving also succeeds if the channel is closed.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-12T16:26:20.470"" LastActivityDate=""2017-07-12T16:26:20.470"" CommentCount=""1"" />
",45061738
45061568,"45061568      <row Id=""45061568"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45062472"" PostTypeId=""2"" ParentId=""45061568"" CreationDate=""2017-07-12T15:52:55.233"" Score=""2"" Body=""&lt;p&gt;Try this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var x *Foo&#xA;var y interface{} = x&#xA;fmt.Printf(&quot;Before: %#v\n&quot;, y)&#xA;fmt.Printf(&quot;Goal: %#v\n&quot;, interface{}(&amp;amp;Foo{}))&#xA;&#xA;// Must take address of y to set it. Dereference with Elem() to get value for y&#xA;rv := reflect.ValueOf(&amp;amp;y).Elem()&#xA;&#xA;// Interface element type is *main.Foo, dereference with Elem() to get main.Foo&#xA;t := rv.Elem().Type().Elem()&#xA;rv.Set(reflect.New(t))&#xA;fmt.Printf(&quot;After: %#v\n&quot;, y)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/n39yPzJVpe&quot; rel=&quot;nofollow noreferrer&quot;&gt;playground example&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can also assign &lt;code&gt;y&lt;/code&gt; instead of setting it via reflection:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var x *Foo&#xA;var y interface{} = x&#xA;fmt.Printf(&quot;Before: %#v\n&quot;, y)&#xA;fmt.Printf(&quot;Goal: %#v\n&quot;, interface{}(&amp;amp;Foo{}))&#xA;rv := reflect.ValueOf(y)&#xA;t := rv.Type().Elem()&#xA;y = reflect.New(t).Interface()&#xA;fmt.Printf(&quot;After: %#v\n&quot;, y)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/qDlmg32z4c&quot; rel=&quot;nofollow noreferrer&quot;&gt;playground example&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-07-12T16:33:14.010"" LastActivityDate=""2017-07-12T16:33:14.010"" CommentCount=""1"" />
",45062472
45065678,"45065678      <row Id=""45065678"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45067198"" PostTypeId=""2"" ParentId=""45065678"" CreationDate=""2017-07-12T20:43:56.963"" Score=""1"" Body=""&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;After comment interaction and with updated question. Before we move forward, I would like to mention.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;I just looked at your &lt;code&gt;example-2&lt;/code&gt; Remember one thing. Mapping is from one form to another form. Basically &lt;code&gt;one known format to targeted format&lt;/code&gt;. Each data type have to handled. You cannot do &lt;code&gt;generic&lt;/code&gt; to &lt;code&gt;generic&lt;/code&gt; mapping logically (technically feasible though, would take more time &amp;amp; efforts, you can play around on this).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I have created sample working program of one approach; it does a mapping of source to targeted format. Refer this program as a start point and use your creativity to implement yours.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Playground link: &lt;a href=&quot;https://play.golang.org/p/MEk_nGcPjZ&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/MEk_nGcPjZ&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; Sample program achieves two different source format to one target format. The program consist of -&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Targeted Mapping definition of Provider 1&lt;/li&gt;&#xA;&lt;li&gt;Targeted Mapping definition of Provider 2&lt;/li&gt;&#xA;&lt;li&gt;Provider 1 JSON&lt;/li&gt;&#xA;&lt;li&gt;Provider 2 JSON&lt;/li&gt;&#xA;&lt;li&gt;Mapping function&lt;/li&gt;&#xA;&lt;li&gt;Targeted JSON marshal&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Key elements from program:&lt;/strong&gt; refer play link for complete program.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type MappingInfo struct {&#xA;    TargetKey     string&#xA;    SourceKeyPath string&#xA;    DataType      string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Map function:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func mapIt(mapping []*MappingInfo, parsedResult gjson.Result) map[string]interface{} {&#xA;    mappedData := make(map[string]interface{})&#xA;    for _, m := range mapping {&#xA;        switch m.DataType {&#xA;        case &quot;time&quot;:&#xA;            mappedData[m.TargetKey] = parsedResult.Get(m.SourceKeyPath).Time()&#xA;        case &quot;string&quot;:&#xA;            mappedData[m.TargetKey] = parsedResult.Get(m.SourceKeyPath).String()&#xA;        }&#xA;    }&#xA;    return mappedData&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Provider 1 Result: map[date:2017-05-17 08:52:36.024 +0000 UTC clientName:provider1 username]&#xA;Provider 1 JSON: {&#xA;  &quot;clientName&quot;: &quot;provider1 username&quot;,&#xA;  &quot;date&quot;: &quot;2017-05-17T08:52:36.024Z&quot;&#xA;}&#xA;&#xA;Provider 2 Result: map[date:2017-05-12 06:32:46.014 +0000 UTC clientName:provider2 username]&#xA;Provider 2 JSON: {&#xA;  &quot;clientName&quot;: &quot;provider2 username&quot;,&#xA;  &quot;date&quot;: &quot;2017-05-12T06:32:46.014Z&quot;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Good luck, happy coding!&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Typically Converting/Transforming one structure to another structure, you will have to handle this with application logic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As you mentioned in the question:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;my problem is I have different apis, every api have own json schema&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;This is true for every &lt;code&gt;aggregation&lt;/code&gt; system.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;One approach to handle this requirement effectively; is to keep mapping of keys for each provider JSON structure and targeted JSON structure.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt; This is an approach, please go with your design as you see fit.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;JSON structures from various provider:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Provider 1 : JSON structrure&#xA;{&#xA;  &quot;createdAt&quot;: &quot;2017-05-17T08:52:36.024Z&quot;,&#xA;  &quot;data&quot;: {&#xA;    &quot;user&quot;: {&#xA;      &quot;name&quot;: &quot;xxx&quot;&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;// Provider 2 : JSON structrure&#xA;{&#xA;  &quot;username&quot;: &quot;yyy&quot;&#xA;  &quot;since&quot;: &quot;2017-05-17T08:52:36.024Z&quot;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Mapping for target JSON structure:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;jsonMappingByProvider := make(map[string]string)&#xA;&#xA;// Targeted Mapping for Provider 1&#xA;jsonMappingByProvider[&quot;provider1&quot;] = `&#xA;{&#xA;    &quot;date&quot;: &quot;createdAt&quot;,&#xA;    &quot;clientName&quot;: &quot;data.user.name&quot;&#xA;}&#xA;`&#xA;&#xA;// Targeted Mapping for Provider 2&#xA;jsonMappingByProvider[&quot;provider2&quot;] = `&#xA;{&#xA;    &quot;date&quot;: &quot;since&quot;,&#xA;    &quot;clientName&quot;: &quot;username&quot;&#xA;}&#xA;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, based the on the provider you're handling, get the mapping and map the response JSON into targeted structure.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// get the mapping info by provider&#xA;mapping := jsonMappingByProvider[&quot;provider1&quot;]&#xA;&#xA;// Parse the response JSON &#xA;// Do the mapping&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way you can control each provider and it's mapping effectively.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-14T18:13:36.550"" LastActivityDate=""2017-07-14T18:13:36.550"" CommentCount=""4"" />
",45067198
45067382,"45067382      <row Id=""45067382"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45067544"" PostTypeId=""2"" ParentId=""45067382"" CreationDate=""2017-07-12T21:08:09.683"" Score=""1"" Body=""&lt;p&gt;Type assertions:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;type Test struct {&#xA;    foo int&#xA;}&#xA;&#xA;func isTest(t interface{}) bool {&#xA;    switch t.(type) {&#xA;    case Test:&#xA;        return true&#xA;    default:&#xA;        return false&#xA;    }&#xA;}&#xA;&#xA;func main() {&#xA;    t := Test{5}&#xA;    fmt.Println(isTest(t))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/dotXc8BTcU&quot; rel=&quot;nofollow noreferrer&quot;&gt;Playground&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""3521243"" LastEditorUserId=""3521243"" LastEditDate=""2017-07-13T16:47:41.187"" LastActivityDate=""2017-07-13T16:47:41.187"" CommentCount=""2"" />
",45067544
45068666,"45068666      <row Id=""45068666"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45068974"" PostTypeId=""2"" ParentId=""45068666"" CreationDate=""2017-07-12T23:16:33.300"" Score=""3"" Body=""&lt;p&gt;Use &lt;a href=&quot;https://golang.org/pkg/reflect/#New&quot; rel=&quot;nofollow noreferrer&quot;&gt;reflect.New&lt;/a&gt; with &lt;code&gt;struct&lt;/code&gt; type. In Go you have to use type to create a new instance dynamically not string.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Example: To create struct instance dynamically, you can do&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;reflect&quot;&#xA;&#xA;import (&#xA;   &quot;github.com/collector/package1&quot;&#xA;   &quot;github.com/collector/package2&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    sliceOfCollector := make([]reflect.Type, 0)&#xA;    sliceOfCollector = append(sliceOfCollector, reflect.TypeOf((*package1.NewRule)(nil)).Elem()})&#xA;    sliceOfCollector = append(sliceOfCollector, reflect.TypeOf((*package2.OldRule)(nil)).Elem()})&#xA;&#xA;    for _, collectorType := range slice sliceOfCollector {&#xA;        col := reflect.New(collectorType)&#xA;        fmt.Printf(&quot;%#v\n&quot;, col)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can use &lt;a href=&quot;https://golang.org/ref/spec#Type_assertions&quot; rel=&quot;nofollow noreferrer&quot;&gt;type assertions&lt;/a&gt; after that &lt;code&gt;col.Interface().(*package1.NewRule)&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;After comment interaction, added following.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Creating a instance using factory method. Just an idea.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    sliceOfCollector := []string{&quot;NewRule&quot;, &quot;OldRule&quot;}&#xA;&#xA;    for _, col := range sliceOfCollector {&#xA;        rule := CreateRuleByName(col)&#xA;        fmt.Printf(&quot;%#v\n&quot;, rule)&#xA;    }&#xA;}&#xA;&#xA;func CreateRuleByName(name string) interface{} {&#xA;    switch name {&#xA;    case &quot;NewRule&quot;:&#xA;       return &amp;amp;package1.NewRule{}&#xA;    case &quot;OldRule&quot;:&#xA;       return &amp;amp;package2.OldRule{}&#xA;    default:&#xA;       return nil&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-13T00:40:23.653"" LastActivityDate=""2017-07-13T00:40:23.653"" CommentCount=""5"" />
",45068974
45071362,"45071362      <row Id=""45071362"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45071441"" PostTypeId=""2"" ParentId=""45071362"" CreationDate=""2017-07-13T04:32:04.493"" Score=""3"" Body=""&lt;p&gt;You get this error because &lt;code&gt;else&lt;/code&gt; statement must be on the same line as the closing &lt;code&gt;}&lt;/code&gt; of the first condition.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func getKeyNameFromDeploymentAndSubnet(subnetType SubnetType, deploymentType DeploymentType, keyNameMap map[SubnetType]string) string {&#xA;    if deploymentType == NoDeployment || deploymentType == PDBAWindows || deploymentType == AgentDeployment {&#xA;        return keyNameMap[subnetType]&#xA;    } else if deploymentType == AnsibleDeployment {&#xA;        return &quot;bar&quot;&#xA;    }&#xA;    return &quot;foo&quot;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""290339"" LastActivityDate=""2017-07-13T04:32:04.493"" CommentCount=""0"" />
",45071441
45071659,"45071659      <row Id=""45071659"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45071716"" PostTypeId=""2"" ParentId=""45071659"" CreationDate=""2017-07-13T04:58:24.950"" Score=""1"" Body=""&lt;p&gt;Try this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t := reflect.TypeOf((*FooService)(nil)).Elem()&#xA;var s []string&#xA;for i := 0; i &amp;lt; t.NumMethod(); i++ {&#xA;    s = append(s, t.Method(i).Name)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/-AHYGJnxvb&quot; rel=&quot;nofollow noreferrer&quot;&gt;playground example&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Getting the reflect.Type for the interface type is the tricky part. See &lt;a href=&quot;https://stackoverflow.com/questions/7132848/how-to-get-the-reflect-type-of-an-interface&quot;&gt;How to get the reflect.Type of an interface?&lt;/a&gt; for an explanation.&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-07-13T05:04:29.027"" LastActivityDate=""2017-07-13T05:04:29.027"" CommentCount=""0"" />
",45071716
45074481,"45074481      <row Id=""45074481"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45074594"" PostTypeId=""2"" ParentId=""45074481"" CreationDate=""2017-07-13T07:52:48.603"" Score=""0"" Body=""&lt;p&gt;For it to be &lt;code&gt;time.RFC1123Z&lt;/code&gt; the day must be &lt;code&gt;02&lt;/code&gt; not &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    d := &quot;Thu, 02 Mar 2017 10:44:13 +0100&quot;&#xA;    da, _ := time.Parse(time.RFC1123Z, d)&#xA;    fmt.Println(da)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/JFtErfZTtk&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/JFtErfZTtk&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you cannot change the source time string you can alternatively parse it with the &lt;code&gt;Mon, 2 Jan 2006 15:04:05 -0700&lt;/code&gt; format:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;da, _ := time.Parse(&quot;Mon, 2 Jan 2006 15:04:05 -0700&quot;, d)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;References:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://golang.org/pkg/time/#pkg-constants&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/time/#pkg-constants&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""251311"" LastEditorUserId=""251311"" LastEditDate=""2017-07-13T08:01:17.977"" LastActivityDate=""2017-07-13T08:01:17.977"" CommentCount=""4"" />
",45074594
45074998,"45074998      <row Id=""45074998"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45075461"" PostTypeId=""2"" ParentId=""45074998"" CreationDate=""2017-07-13T08:35:13.967"" Score=""2"" Body=""&lt;pre&gt;&lt;code&gt;for {&#xA;    command := GetCommandFromUser()&#xA;    if command == ExitCommand {&#xA;        break&#xA;    }&#xA;&#xA;    ProcessCommand(command)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""734040"" LastActivityDate=""2017-07-13T08:35:13.967"" CommentCount=""3"" />
",45075461
45050191,"45050191      <row Id=""45050191"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45076738"" PostTypeId=""2"" ParentId=""45050191"" CreationDate=""2017-07-13T09:33:29.040"" Score=""2"" Body=""&lt;p&gt;Assuming you are facing difficulty to mock http.Client, I would like to suggest following options.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;1. Refactor the code&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You need to refactor the code in such a way that you can pass the mockable dependencies to function that you would like to test. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example,&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Refactor &lt;code&gt;func send_api(client *http.Client,url string) map[string]string,error&lt;/code&gt; so that it does api request and getting/parsing data, but call another function from it, which does the further processing (that actually you would like to test and not the http.Client part).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But, with this approach, you may not be able to test end to end flow. But you can test those functions separately.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;2. Mock http.Client&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Again, you may need to refactor your code. Some related article can be found &lt;a href=&quot;http://webiphany.com/2014/06/23/mocking-out-client-http-requests-with-go.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;   &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Update: Recommending to watch &lt;a href=&quot;https://www.youtube.com/watch?v=hVFEV-ieeew&quot; rel=&quot;nofollow noreferrer&quot;&gt;justforfunc #16: unit testing HTTP servers&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""387670"" LastEditorUserId=""387670"" LastEditDate=""2017-08-04T11:50:11.817"" LastActivityDate=""2017-08-04T11:50:11.817"" CommentCount=""0"" />
",45076738
45076887,"45076887      <row Id=""45076887"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45077588"" PostTypeId=""2"" ParentId=""45076887"" CreationDate=""2017-07-13T10:09:24.640"" Score=""5"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;The append built-in function appends elements to the end of a slice.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Read more in &lt;a href=&quot;https://golang.org/pkg/builtin/#append&quot; rel=&quot;nofollow noreferrer&quot;&gt;the docs&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;...&lt;/code&gt; is used in variadic functions (of which &lt;code&gt;append&lt;/code&gt; is an example), to pass all of the elements of the preceding variable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So given a variable &lt;code&gt;x := []int{1, 2, 3}&lt;/code&gt;, the expression &lt;code&gt;foo(x...)&lt;/code&gt; will pass it to a function as if you had called &lt;code&gt;foo(1, 2, 3)&lt;/code&gt; in contrast to &lt;code&gt;foo(x)&lt;/code&gt; which would equivalent to &lt;code&gt;foo([]int{1, 2, 3})&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastEditorUserId=""13860"" LastEditDate=""2017-07-13T11:09:23.297"" LastActivityDate=""2017-07-13T11:09:23.297"" CommentCount=""0"" />
",45077588
45004791,"45004791      <row Id=""45004791"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45078797"" PostTypeId=""2"" ParentId=""45004791"" CreationDate=""2017-07-13T11:05:53.263"" Score=""1"" Body=""&lt;p&gt;Yes, by default all http requests can be executed concurrently. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you are executing a python script, then indeed a separate process will be spawned and they will execute concurrently. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Please note that this carries the potential risk of spawning too many processes and running out of resources.&lt;/p&gt;&#xA;"" OwnerUserId=""326736"" LastActivityDate=""2017-07-13T11:05:53.263"" CommentCount=""0"" />
",45078797
45082449,"45082449      <row Id=""45082449"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45082700"" PostTypeId=""2"" ParentId=""45082449"" CreationDate=""2017-07-13T13:51:51.433"" Score=""0"" Body=""&lt;p&gt;From Golang's &lt;a href=&quot;https://golang.org/pkg/io/#Reader&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reader documentation&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Read reads up to len(p) bytes into p. It returns the number of bytes read (0 &amp;lt;= n &amp;lt;= len(p)) and any error encountered. Even if Read returns n &amp;lt; len(p), it may use all of p as scratch space during the call. If some data is available but not len(p) bytes, Read conventionally returns what is available instead of waiting for more.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;When Read encounters an error or end-of-file condition after successfully reading n &gt; 0 bytes, it returns the number of bytes read. It may return the (non-nil) error from the same call or return the error (and n == 0) from a subsequent call. An instance of this general case is that a Reader returning a non-zero number of bytes at the end of the input stream may return either err == EOF or err == nil. The next Read should return 0, EOF. &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//Reader interface from package documentation showing 'p' is the input byte slice.&#xA;type Reader interface {&#xA;    Read(p []byte) (n int, err error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Since you are never initializing your slice, &lt;code&gt;len(bytes)&lt;/code&gt; is always 0 so it only reads 0 bytes. To do it manually like you are trying to do, you would have to initialize the slice to be non-empty and then call read multiple times until it finally returns 0 and EOF while appending bytes to some buffer that you maintain. That is why &lt;a href=&quot;http://godoc.org/io/ioutil#ReadAll&quot; rel=&quot;nofollow noreferrer&quot;&gt;ioutil.ReadAll&lt;/a&gt; is desired, it guarantees that everything is read correctly and you don't have to worry about handling that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note &lt;code&gt;defer resp.Body.Close()&lt;/code&gt; in the example. It is important to always remember to close Readers and Writers after using them.&lt;/p&gt;&#xA;"" OwnerUserId=""1495050"" LastActivityDate=""2017-07-13T13:51:51.433"" CommentCount=""0"" />
",45082700
45084301,"45084301      <row Id=""45084301"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45084445"" PostTypeId=""2"" ParentId=""45084301"" CreationDate=""2017-07-13T15:01:05.950"" Score=""0"" Body=""&lt;p&gt;Some people say that this code work&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In bash:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go get golang.org/x/net/idna&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Example code go:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;golang.org/x/net/idna&quot;&#xA;)&#xA;&#xA;var p *idna.Profile&#xA;&#xA;func main() {&#xA;    // Raw Punycode has no restrictions and does no mappings.&#xA;    p = idna.New()&#xA;    fmt.Println(p.ToUnicode(&quot;xn--d1abbgf6aiiy.xn--p1ai&quot;))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But i'm still hope that another way exist. I unlike to do local copy of package into $GOROOT path.&lt;/p&gt;&#xA;"" OwnerUserId=""7461978"" LastEditorUserId=""7461978"" LastEditDate=""2017-07-13T15:55:29.790"" LastActivityDate=""2017-07-13T15:55:29.790"" CommentCount=""0"" />
",45084445
45084622,"45084622      <row Id=""45084622"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45084931"" PostTypeId=""2"" ParentId=""45084622"" CreationDate=""2017-07-13T15:19:54.987"" Score=""6"" Body=""&lt;p&gt;It's not the limit of the &lt;a href=&quot;https://golang.org/pkg/fmt/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt; package or &lt;a href=&quot;https://golang.org/pkg/fmt/#Scanf&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;fmt.Scanf()&lt;/code&gt;&lt;/a&gt;, this example properly scans more than 3KB:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// src is a looooong text (&amp;gt;3KB)&#xA;&#xA;var s string&#xA;fmt.Println(len(src))&#xA;fmt.Sscanf(src, &quot;%s&quot;, &amp;amp;s)&#xA;fmt.Println(len(s))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Try it on the &lt;a href=&quot;https://play.golang.org/p/dK7SE2gCo0&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's most likely the limit of your terminal. I also tried your unmodified version, pasted more than 10KB of text, and the result was 4096 bytes (Ubuntu linux 16.04, Bash).&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-13T17:13:24.977"" LastActivityDate=""2017-07-13T17:13:24.977"" CommentCount=""1"" />
",45084931
45073014,"45073014      <row Id=""45073014"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45085020"" PostTypeId=""2"" ParentId=""45073014"" CreationDate=""2017-07-13T15:23:36.647"" Score=""1"" Body=""&lt;p&gt;Use a &lt;a href=&quot;http://godoc.org/github.com/garyburd/redigo/redis#DialNetDial&quot; rel=&quot;nofollow noreferrer&quot;&gt;network dial&lt;/a&gt; function like this with &lt;a href=&quot;http://godoc.org/github.com/garyburd/redigo/redis&quot; rel=&quot;nofollow noreferrer&quot;&gt;Redigo&lt;/a&gt;: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func dial(network, addr string) (net.Conn, error) {&#xA;        user := &quot;user&quot;&#xA;        password := &quot;password&quot;&#xA;        sshAddr := &quot;example.com:22&quot;&#xA;        redisAddr := &quot;:6379&quot;&#xA;        config := &amp;amp;ssh.ClientConfig{&#xA;            User: user,&#xA;            Auth: []ssh.AuthMethod{&#xA;                ssh.Password(passord),&#xA;            },&#xA;        }&#xA;        netConn, err := net.Dial(&quot;tcp&quot;, sshAddr)&#xA;        if err != nil {&#xA;            return nil, err&#xA;        }&#xA;        clientConn, chans, reqs, err := ssh.NewClientConn(netConn, sshAddr, config)&#xA;        if err != nil {&#xA;            netConn.Close()&#xA;            return nil, err&#xA;        }&#xA;        client := ssh.NewClient(clientConn, chans, reqs)&#xA;        conn, err := client.Dial(&quot;tcp&quot;, redisAddr)&#xA;        if err != nil {&#xA;            client.Close()&#xA;            return nil, err&#xA;        }&#xA;        conn, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If the application creates multiple connections to the server, then create &lt;code&gt;client&lt;/code&gt; once and reuse on each dial.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The code above is uncompiled and untested.&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-07-13T15:23:36.647"" CommentCount=""1"" />
",45085020
45022651,"45022651      <row Id=""45022651"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45085569"" PostTypeId=""2"" ParentId=""45022651"" CreationDate=""2017-07-13T15:47:38.077"" Score=""0"" Body=""&lt;p&gt;So turns out the log were there but not where I'd expect them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Using the gcloud CLI I could see those logs got the resource type &lt;code&gt;gce_instance&lt;/code&gt; and therefore appears in the &lt;code&gt;GCE VM Instance&lt;/code&gt; category&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To figure this out:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  $ gcloud beta logging logs list&#xA;  projects/&amp;lt;PROJECT&amp;gt;/logs/&amp;lt;LOG_NAME&amp;gt;&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ gcloud beta logging read projects/&amp;lt;PROJECT&amp;gt;/logs/&amp;lt;LOG_NAME&amp;gt;&#xA;---&#xA;insertId: ...&#xA;jsonPayload:&#xA;   ...&#xA;logName: ...&#xA;receiveTimestamp: ...&#xA;resource:&#xA;  labels:&#xA;    instance_id: ...&#xA;    project_id: ...&#xA;    zone: ...&#xA;  type: gce_instance&#xA;timestamp: ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note &lt;code&gt;type&lt;/code&gt; being &lt;code&gt;gce_instance&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""101969"" LastActivityDate=""2017-07-13T15:47:38.077"" CommentCount=""0"" />
",45085569
45086082,"45086082      <row Id=""45086082"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45086175"" PostTypeId=""2"" ParentId=""45086082"" CreationDate=""2017-07-13T16:18:11.900"" Score=""4"" Body=""&lt;p&gt;It's possible if you omit the type:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var i, s = 2, &quot;hi&quot;&#xA;fmt.Println(i, s)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/A8oVANLTQn&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;2 hi&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that the &lt;a href=&quot;https://golang.org/ref/spec#Short_variable_declarations&quot; rel=&quot;nofollow noreferrer&quot;&gt;short variable declaration&lt;/a&gt; is exactly a shorthand for this:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;A &lt;em&gt;short variable declaration&lt;/em&gt; uses the syntax:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ShortVarDecl = IdentifierList &quot;:=&quot; ExpressionList .&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;It is shorthand for a regular &lt;a href=&quot;https://golang.org/ref/spec#Variable_declarations&quot; rel=&quot;nofollow noreferrer&quot;&gt;variable declaration&lt;/a&gt; with initializer expressions but no types:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&quot;var&quot; IdentifierList = ExpressionList .&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Without omitting the type it's not possible, because the syntax of the &lt;a href=&quot;https://golang.org/ref/spec#Variable_declarations&quot; rel=&quot;nofollow noreferrer&quot;&gt;variable declaration&lt;/a&gt; is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;VarSpec = IdentifierList ( Type [ &quot;=&quot; ExpressionList ] | &quot;=&quot; ExpressionList ) .&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(There is only one optional type for an identifier list with an expression list.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also I assume you don't count this as 1 line (which otherwise is valid syntax, but gofmt breaks it into multiple lines):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var (i int = 2; s string = &quot;hi&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also if you only want to be able to explicitly state the types, you may provide them on the right side:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var i, s = int(2), string(&quot;hi&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But all in all, just use 2 lines for 2 different types, nothing to lose, readability to win.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-13T16:45:07.730"" LastActivityDate=""2017-07-13T16:45:07.730"" CommentCount=""6"" />
",45086175
45089248,"45089248      <row Id=""45089248"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45089362"" PostTypeId=""2"" ParentId=""45089248"" CreationDate=""2017-07-13T19:22:57.873"" Score=""3"" Body=""&lt;p&gt;That's what the &lt;a href=&quot;https://golang.org/pkg/bufio&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;bufio&lt;/code&gt;&lt;/a&gt; package is for. It lets you turn any &lt;code&gt;io.Reader&lt;/code&gt; into a buffered reader with &lt;a href=&quot;https://golang.org/pkg/bufio/#NewReader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;NewReader&lt;/code&gt;&lt;/a&gt;, or any &lt;code&gt;io.Writer&lt;/code&gt; into a buffered writer with &lt;a href=&quot;https://golang.org/pkg/bufio/#NewWriter&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;NewWriter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(Whether buffered IO will actually help with your specific problem, I have no idea...)&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-07-13T19:22:57.873"" CommentCount=""1"" />
",45089362
45088229,"45088229      <row Id=""45088229"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45089928"" PostTypeId=""2"" ParentId=""45088229"" CreationDate=""2017-07-13T20:00:01.720"" Score=""2"" Body=""&lt;p&gt;Trying to make Go generic is one of the great pitfalls for new Go devs. Stop. You're saving &lt;a href=&quot;https://play.golang.org/p/VYzzSS92Yi&quot; rel=&quot;nofollow noreferrer&quot;&gt;five of lines of code&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for i := len(foos) - 1; i &amp;gt;= 0; i-- {&#xA;    if foos[i] == foo1 {&#xA;        foos = append(foos[:i], foos[i+1:]...)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Yes, in generic languages, you would wrap those five lines up in to a nice stdlib method, but Go is not a generic language. Trying to do this with reflection is slow, but that's not the reason to avoid it. Reflection is very complicated. It's hard to get it right. You'll spend much more time figuring out &lt;code&gt;Value&lt;/code&gt; and chasing weird corner cases than you'll spend rewriting those five lines of code 12 times (including fixing the time you accidentally cut/paste it wrong, and the one time you mess up &lt;code&gt;i--&lt;/code&gt;). Just write them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Just writing the code lets you decide what equality means. It lets you decide whether to stop searching at the first match, or keep going through the whole list. It lets you do what this program needs rather than focusing on what some generic program might someday need.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I love generic programming. Few things make me happier than creating an elegant fold in Haskell. But that's not the way of Go. In Go you generally just write the code, keep it simple and obvious, and move on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Andy makes a good point that if you have to do this a lot, &lt;code&gt;list&lt;/code&gt; may be a better data structure. And I often find that when I have three types that all seem to have parallel methods, it turns out that they should all have been part of a single struct (do you really need separate lists here at all?) But in any case, stay away from reflection unless you have a very specialized problem where you really mean &quot;anything&quot; rather than &quot;one of these short list of things.&quot;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(It's noteworthy that you call out &lt;code&gt;append()&lt;/code&gt;. I don't think it's possible to write &lt;code&gt;append()&lt;/code&gt; in Go. That's why it had to be part of the language rather than a stdlib function. When I started working in Go, I took that as a significant flaw in the language. The longer I've worked in Go, the more I've found it not to matter so much. You just write the code and move on.)&lt;/p&gt;&#xA;"" OwnerUserId=""97337"" LastActivityDate=""2017-07-13T20:00:01.720"" CommentCount=""3"" />
",45089928
45045839,"45045839      <row Id=""45045839"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45090923"" PostTypeId=""2"" ParentId=""45045839"" CreationDate=""2017-07-13T21:08:03.997"" Score=""2"" Body=""&lt;p&gt;Drafting answer from my comment. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Per library codebase, &lt;code&gt;ID&lt;/code&gt; is getting in your way even though &lt;code&gt;Name&lt;/code&gt; is defined as primary key.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you would like to keep &lt;code&gt;Name&lt;/code&gt; as primary key, can you please remove the field &lt;code&gt;ID&lt;/code&gt; from struct &lt;code&gt;Component&lt;/code&gt; and then try method &lt;code&gt;db.One&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-07-13T21:08:03.997"" CommentCount=""0"" />
",45090923
45079074,"45079074      <row Id=""45079074"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45091261"" PostTypeId=""2"" ParentId=""45079074"" CreationDate=""2017-07-13T21:33:47.170"" Score=""1"" Body=""&lt;p&gt;Your best bet is the use the standard library's strconv.. You can make your own wrappers and locale stuff.. Eventually I'd add more error checking and turn this into it's own package, but here is an idea.  If you haven't found a package yet there is a good chance you will have to write your own. For a more general solution, you'd have to think about every possible input.. normalize that per locale and enforce those rules when others are using your tools... That would be a more complex solution given the number of if statements and pieces of logic.. The good part is that you know the type of input &lt;code&gt;strconv.ParseFloat&lt;/code&gt; expects.. So all you really have to do is take the user input and transform it to the programmic  standard &lt;a href=&quot;http://floating-point-gui.de/formats/fp/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://floating-point-gui.de/formats/fp/&lt;/a&gt;. Given numbers are mostly universal, with the exception of commas and decimal points, there shouldn't be many use cases.  You might even be able to generalize further and say there are two main formats.. &lt;a href=&quot;https://www.quora.com/Why-do-some-countries-use-a-period-and-others-use-a-comma-to-separate-large-numbers&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.quora.com/Why-do-some-countries-use-a-period-and-others-use-a-comma-to-separate-large-numbers&lt;/a&gt;, which is largely broken down to Europe et al and British/American.. where German uses the standard almost all of Europe does. Under that assumption there isn't really much to do as the use cases comes down to 2.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;    &quot;strconv&quot;&#xA;    &quot;strings&quot;&#xA;)&#xA;&#xA;func normalizeGerman(old string) string {&#xA;    s := strings.Replace(old, &quot;,&quot;, &quot;.&quot;, -1)&#xA;    return strings.Replace(s, &quot;.&quot;, &quot;&quot;, 1)&#xA;}&#xA;func normalizeAmerican(old string) string {&#xA;    return strings.Replace(old, &quot;,&quot;, &quot;&quot;, -1)&#xA;}&#xA;&#xA;var locale map[string]func(string) string&#xA;&#xA;func init() {&#xA;    locale = make(map[string]func(string) string)&#xA;    locale[&quot;DE-DE&quot;] = normalizeGerman&#xA;    locale[&quot;US&quot;] = normalizeAmerican&#xA;}&#xA;&#xA;func main() {&#xA;    var f, f2 float64&#xA;    var err error&#xA;    // german&#xA;    if val, ok := locale[&quot;DE-DE&quot;]; ok {&#xA;        f, err = strconv.ParseFloat(val(&quot;1.234,87&quot;), 64)&#xA;        if err != nil {&#xA;            log.Fatal(&quot;german fail&quot;, err)&#xA;        }&#xA;    }&#xA;    //american&#xA;    if val, ok := locale[&quot;US&quot;]; ok {&#xA;        f2, err = strconv.ParseFloat(val(&quot;1,234.87&quot;), 64)&#xA;        if err != nil {&#xA;            log.Fatal(&quot;american fail&quot;, err)&#xA;        }&#xA;    }&#xA;&#xA;    fmt.Println(f, f2)&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4639336"" LastEditorUserId=""4639336"" LastEditDate=""2017-07-13T21:48:05.880"" LastActivityDate=""2017-07-13T21:48:05.880"" CommentCount=""2"" />
",45091261
45093551,"45093551      <row Id=""45093551"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45093638"" PostTypeId=""2"" ParentId=""45093551"" CreationDate=""2017-07-14T02:23:31.677"" Score=""2"" Body=""&lt;p&gt;Declare methods on A that satisfy the interface:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (a *A) SetName(s string) {&#xA;    a.Name = s&#xA;}&#xA;&#xA;func (a *A) SetAddress(s string) {&#xA;    a.Address = s&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Use a slice of that interface in the range:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for _, s := range []myinterface{&amp;amp;B{}, &amp;amp;C{}, &amp;amp;D{}} {&#xA;   ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/eJV-jnF5jD&quot; rel=&quot;nofollow noreferrer&quot;&gt;playground example&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-07-14T02:23:31.677"" CommentCount=""0"" />
",45093638
45093908,"45093908      <row Id=""45093908"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45093934"" PostTypeId=""2"" ParentId=""45093908"" CreationDate=""2017-07-14T03:09:08.897"" Score=""1"" Body=""&lt;p&gt;The code in the question is updating the local variable &lt;code&gt;v&lt;/code&gt;.  Either change the slice to *model.Post or update the value in the slice using the index operator. The former requires changes to the caller.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func incrementViews(posts []*model.Post) []*model.Post {&#xA;    for _, v := range posts { &#xA;        v.Views++&#xA;    }&#xA;    return posts&#xA;}&#xA;&#xA;func incrementViews(posts []model.Post) []model.Post {&#xA;    for i := range posts { &#xA;        posts[i].Views++&#xA;    }&#xA;    return posts&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Both approaches works, see here: &lt;a href=&quot;https://play.golang.org/p/90BNOFYaKL&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/90BNOFYaKL&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-07-14T04:27:18.150"" LastActivityDate=""2017-07-14T04:27:18.150"" CommentCount=""8"" />
",45093934
45093599,"45093599      <row Id=""45093599"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45094163"" PostTypeId=""2"" ParentId=""45093599"" CreationDate=""2017-07-14T03:35:39.123"" Score=""3"" Body=""&lt;p&gt;The operator &lt;code&gt;:=&lt;/code&gt; is used for &lt;a href=&quot;https://golang.org/ref/spec#Short_variable_declarations&quot; rel=&quot;nofollow noreferrer&quot;&gt;short variable declaration&lt;/a&gt;. It declares and initializes the variable. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your first example, you have declared &lt;code&gt;Session&lt;/code&gt; variable in global scope and in &lt;code&gt;main&lt;/code&gt; function you've declared a new variable having same name in the main scope (as you have used &lt;code&gt;:=&lt;/code&gt; operator). Therefore, the &lt;code&gt;Session&lt;/code&gt; variable declared in the global scope is unused and hence the error.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your second example, you have assigned global variable a value using assignment operator &lt;code&gt;=&lt;/code&gt; and hence it is not declaring a new &lt;code&gt;Session&lt;/code&gt; variable but assigning a value to existing global variable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Please find an &lt;a href=&quot;https://play.golang.org/p/3p1o7ji3yI&quot; rel=&quot;nofollow noreferrer&quot;&gt;example&lt;/a&gt; showing difference between global and local variable.&lt;/p&gt;&#xA;"" OwnerUserId=""387670"" LastEditorUserId=""387670"" LastEditDate=""2017-07-14T06:56:37.257"" LastActivityDate=""2017-07-14T06:56:37.257"" CommentCount=""0"" />
",45094163
45075598,"45075598      <row Id=""45075598"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45098675"" PostTypeId=""2"" ParentId=""45075598"" CreationDate=""2017-07-14T08:51:10.277"" Score=""2"" Body=""&lt;p&gt;It seems that mongo wire protocol does not support the feature of indexing policy change. As @DavidMakogon said, please refer to the document &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/cosmos-db/indexing-policies&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;How does Azure Cosmos DB index data?&lt;/code&gt;&lt;/a&gt; to change the settings of indexing policy on Azure portal as the figure below, or using REST API &lt;a href=&quot;https://docs.microsoft.com/en-us/rest/api/documentdb/replace-a-collection&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Replace a Collection&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/3zuJa.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/3zuJa.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hope it helps.&lt;/p&gt;&#xA;"" OwnerUserId=""4989676"" LastActivityDate=""2017-07-14T08:51:10.277"" CommentCount=""0"" />
",45098675
45099221,"45099221      <row Id=""45099221"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45099524"" PostTypeId=""2"" ParentId=""45099221"" CreationDate=""2017-07-14T09:33:38.600"" Score=""5"" Body=""&lt;p&gt;There is an &lt;a href=&quot;https://golang.org/pkg/crypto/md5/#example_New_file&quot; rel=&quot;noreferrer&quot;&gt;example&lt;/a&gt; in the Golang documentation, which covers your case.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;crypto/md5&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;io&quot;&#xA;    &quot;log&quot;&#xA;    &quot;os&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    f, err := os.Open(&quot;file.txt&quot;)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    defer f.Close()&#xA;&#xA;    h := md5.New()&#xA;    if _, err := io.Copy(h, f); err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    fmt.Printf(&quot;%x&quot;, h.Sum(nil))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For your case, just make sure to close the files in the loop and not defer them. Or put the logic into a function.&lt;/p&gt;&#xA;"" OwnerUserId=""1188357"" LastActivityDate=""2017-07-14T09:33:38.600"" CommentCount=""0"" />
",45099524
45100021,"45100021      <row Id=""45100021"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45101194"" PostTypeId=""2"" ParentId=""45100021"" CreationDate=""2017-07-14T10:53:10.997"" Score=""1"" Body=""&lt;p&gt;here is example how you can Unmarshal to string list without any struct.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;import &quot;encoding/json&quot;&#xA;&#xA;func main() {&#xA;    src_json := []byte(`{&quot;fruits&quot;:[&quot;apple&quot;,&quot;banana&quot;,&quot;cherry&quot;,&quot;date&quot;]}`)&#xA;    var m map[string][]string&#xA;    err := json.Unmarshal(src_json, &amp;amp;m)&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;    fmt.Printf(&quot;%v&quot;, m[&quot;fruits&quot;][0]) //apple&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or instead of String list you can use&#xA;&lt;code&gt;map[string][]interface{}&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4015178"" LastActivityDate=""2017-07-14T10:53:10.997"" CommentCount=""0"" />
",45101194
45105177,"45105177      <row Id=""45105177"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45105255"" PostTypeId=""2"" ParentId=""45105177"" CreationDate=""2017-07-14T14:20:20.367"" Score=""2"" Body=""&lt;p&gt;For example,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;math&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    const f = math.MaxFloat64&#xA;    fmt.Printf(&quot;%[1]T %[1]v\n&quot;, f)&#xA;    const c = complex(math.MaxFloat64, math.MaxFloat64)&#xA;    fmt.Printf(&quot;%[1]T %[1]v\n&quot;, c)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;float64 1.7976931348623157e+308&#xA;complex128 (1.7976931348623157e+308+1.7976931348623157e+308i)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/math/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Package math&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import &quot;math&quot; &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;Floating-point limit values. Max is the largest finite value&#xA;  representable by the type. SmallestNonzero is the smallest positive,&#xA;  non-zero value representable by the type.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;const (&#xA;        MaxFloat32             = 3.40282346638528859811704183484516925440e+38  // 2**127 * (2**24 - 1) / 2**23&#xA;        SmallestNonzeroFloat32 = 1.401298464324817070923729583289916131280e-45 // 1 / 2**(127 - 1 + 23)&#xA;&#xA;        MaxFloat64             = 1.797693134862315708145274237317043567981e+308 // 2**1023 * (2**53 - 1) / 2**52&#xA;        SmallestNonzeroFloat64 = 4.940656458412465441765687928682213723651e-324 // 1 / 2**(1023 - 1 + 52)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Numeric_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;Numeric types&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;A numeric type represents sets of integer or floating-point values.&#xA;  The predeclared architecture-independent numeric types are:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;uint8       the set of all unsigned  8-bit integers (0 to 255)&#xA;uint16      the set of all unsigned 16-bit integers (0 to 65535)&#xA;uint32      the set of all unsigned 32-bit integers (0 to 4294967295)&#xA;uint64      the set of all unsigned 64-bit integers (0 to 18446744073709551615)&#xA;&#xA;int8        the set of all signed  8-bit integers (-128 to 127)&#xA;int16       the set of all signed 16-bit integers (-32768 to 32767)&#xA;int32       the set of all signed 32-bit integers (-2147483648 to 2147483647)&#xA;int64       the set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807)&#xA;&#xA;float32     the set of all IEEE-754 32-bit floating-point numbers&#xA;float64     the set of all IEEE-754 64-bit floating-point numbers&#xA;&#xA;complex64   the set of all complex numbers with float32 real and imaginary parts&#xA;complex128  the set of all complex numbers with float64 real and imaginary parts&#xA;&#xA;byte        alias for uint8&#xA;rune        alias for int32&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;The value of an n-bit integer is n bits wide and represented using&#xA;  two's complement arithmetic.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;There is also a set of predeclared numeric types with&#xA;  implementation-specific sizes:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;uint     either 32 or 64 bits&#xA;int      same size as uint&#xA;uintptr  an unsigned integer large enough to store the uninterpreted bits of a pointer value&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;To avoid portability issues all numeric types are distinct except&#xA;  byte, which is an alias for uint8, and rune, which is an alias for&#xA;  int32. Conversions are required when different numeric types are mixed&#xA;  in an expression or assignment. For instance, int32 and int are not&#xA;  the same type even though they may have the same size on a particular&#xA;  architecture.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-07-14T14:54:53.060"" LastActivityDate=""2017-07-14T14:54:53.060"" CommentCount=""0"" />
",45105255
45106090,"45106090      <row Id=""45106090"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45106183"" PostTypeId=""2"" ParentId=""45106090"" CreationDate=""2017-07-14T15:03:55.697"" Score=""4"" Body=""&lt;p&gt;&quot;Reading&quot; has more meanings, one of which is reading the contents of a file.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another meaning is if the file denotes a directory, you may read its content, which is the list of the files / subfolders in it, using &lt;a href=&quot;https://golang.org/pkg/os/#File.Readdir&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;File.Readdir()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://golang.org/pkg/os/#File.Readdirnames&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;File.Readdirnames()&lt;/code&gt;&lt;/a&gt;. This is perfectly valid for an opened file whose name denotes a directory.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also you may do a lot more with an opened &lt;a href=&quot;https://golang.org/pkg/os/#File&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;os.File&lt;/code&gt;&lt;/a&gt; even if it denotes a folder, e.g. call its &lt;a href=&quot;https://golang.org/pkg/os/#File.Chdir&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;File.Chdir()&lt;/code&gt;&lt;/a&gt; (exclusive for directories) or &lt;a href=&quot;https://golang.org/pkg/os/#File.Chmod&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;File.Chmod()&lt;/code&gt;&lt;/a&gt; methods, or get statistics about it using &lt;a href=&quot;https://golang.org/pkg/os/#File.Stat&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;File.Stat()&lt;/code&gt;&lt;/a&gt;. I don't see why &quot;opening&quot; a folder should be disallowed. The wording in the doc may not be perfect (or it could be extended to mention this though).&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-14T15:13:00.563"" LastActivityDate=""2017-07-14T15:13:00.563"" CommentCount=""3"" />
",45106183
45085866,"45085866      <row Id=""45085866"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45106524"" PostTypeId=""2"" ParentId=""45085866"" CreationDate=""2017-07-14T15:21:10.400"" Score=""2"" Body=""&lt;p&gt;When using JWT, the client typically have to specify the token itself. To make the token handling to be seamless for the client, you can send the token back as a cookie. You can configure echo's middleware to extract the token from a cookie:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// ...&#xA;r.Use(middleware.JWTWithConfig(middleware.JWTConfig{&#xA;    SigningKey: []byte(&quot;secret&quot;),&#xA;    TokenLookup: &quot;cookie:Authorization&quot;,&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For this to work you will need to send the token back as a cookie in your login handler:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// ...&#xA;c.SetCookie(http.Cookie{&#xA;    Name: &quot;Authorization&quot;,&#xA;    Value: t,&#xA;    Path: &quot;/root/path&quot;,&#xA;    Domain: &quot;your.domain.com&quot;,&#xA;    HttpOnly: true,&#xA;})&#xA;return c.JSON(http.StatusOK, map[string]string{&#xA;    &quot;token&quot;: t,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1147580"" LastActivityDate=""2017-07-14T15:21:10.400"" CommentCount=""1"" />
",45106524
45106922,"45106922      <row Id=""45106922"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45107236"" PostTypeId=""2"" ParentId=""45106922"" CreationDate=""2017-07-14T16:00:25.143"" Score=""2"" Body=""&lt;pre&gt;&lt;code&gt;fmt.Printf(string([]byte{0x1b,'[', '3', 'J'}))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;should suffice. But you really should use a terminal library, which knows which codes to use depending on the terminal emulator in use.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Something like &lt;a href=&quot;https://github.com/nsf/termbox-go&quot; rel=&quot;nofollow noreferrer&quot;&gt;termbox-go&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For the usually available codes and their byte values, you can&#xA;try &lt;a href=&quot;https://www.xfree86.org/4.8.0/ctlseqs.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;xterm-docu&lt;/a&gt; but your&#xA;mileage may vary, as you use different terminal emulators.&lt;/p&gt;&#xA;"" OwnerUserId=""7824574"" LastEditorUserId=""7824574"" LastEditDate=""2017-07-14T16:08:06.737"" LastActivityDate=""2017-07-14T16:08:06.737"" CommentCount=""0"" />
",45107236
45105654,"45105654      <row Id=""45105654"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45107659"" PostTypeId=""2"" ParentId=""45105654"" CreationDate=""2017-07-14T16:24:52.953"" Score=""1"" Body=""&lt;p&gt;Use a map for dynamic keys:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type ElvisEvent struct {&#xA;    Timestamp int64  `json:&quot;timestamp&quot;`&#xA;    Type      string `json:&quot;type&quot;`&#xA;    AssetID   string `json:&quot;assetId&quot;`&#xA;    Metadata  struct {&#xA;    } `json:&quot;metadata&quot;`&#xA;&#xA;    ChangedMetadata map[string]struct {&#xA;        OldValue interface{} `json:&quot;oldValue&quot;`&#xA;        NewValue interface{} `json:&quot;newValue&quot;`&#xA;    } `json:&quot;changedMetadata&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/7_9VS_hcfM&quot; rel=&quot;nofollow noreferrer&quot;&gt;playground example&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-07-17T00:55:47.337"" LastActivityDate=""2017-07-17T00:55:47.337"" CommentCount=""3"" />
",45107659
45108777,"45108777      <row Id=""45108777"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45109737"" PostTypeId=""2"" ParentId=""45108777"" CreationDate=""2017-07-14T18:42:07.393"" Score=""4"" Body=""&lt;p&gt;Writing unit tests consists of:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Providing known state for all of your inputs.&lt;/li&gt;&#xA;&lt;li&gt;Testing that, given all meaning combinations of those inputs, you receive the expected outputs.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;So you need to first identify your inputs:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;s Summoner&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;name string&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;region string&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Plus a &quot;hidden&quot; inputs, by way of globals:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;client := &amp;amp;http.Client{}&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;And your outputs are:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;summoner *Summoner&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;err error&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;(There can also be &quot;hidden&quot; outputs, if you write files, or change global variables, but you don't appear to do that here).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now the first three inputs are easy to create from scratch for your tests:  Just provide an empty &lt;code&gt;Summoner{}&lt;/code&gt; (since you don't read or set that at all in your function, there's no need to set it other than to an empty value).  &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;region&lt;/code&gt; can simply be set to strings.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The only part remaining is your &lt;code&gt;http.Client&lt;/code&gt;.  At minimum, you should probably pass that in as an argument. Not only does this give you control over your tests, but it allows you to use easily use different client in production in the future.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But to ease testing, you might consider actually passing in a client-like interface, which you can easily mock. The only method you call on &lt;code&gt;client&lt;/code&gt; is &lt;code&gt;Do&lt;/code&gt;, so you could easily create a &lt;code&gt;Doer&lt;/code&gt; interface:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type doer interface {&#xA;    Do(req *Request) (*Response, error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then change your function signature to take that as one argument:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (s Summoner) ByName(client doer, name string, region string) (summoner *Summoner, err error) {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, in your test you can create a custom type that fulfills the &lt;code&gt;doer&lt;/code&gt; interface, and responds with any &lt;code&gt;http.Response&lt;/code&gt; you like, without needing to use a server in your tests.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-07-14T18:42:07.393"" CommentCount=""1"" />
",45109737
45107175,"45107175      <row Id=""45107175"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45109903"" PostTypeId=""2"" ParentId=""45107175"" CreationDate=""2017-07-14T18:54:19.827"" Score=""1"" Body=""&lt;p&gt;The &lt;code&gt;c-shared&lt;/code&gt; &lt;a href=&quot;https://golang.org/cmd/go/#hdr-Description_of_build_modes&quot; rel=&quot;nofollow noreferrer&quot;&gt;buildmode&lt;/a&gt; is currently only supported on Linux. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;As seen here, &lt;a href=&quot;https://stackoverflow.com/questions/40573401/building-a-dll-with-go-1-7&quot;&gt;Building a dll with Go 1.7&lt;/a&gt;, you may be able to build a DLL or shared lib using gcc, but it's not supported directly by the Go toolchain.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, if you're looking to create a &quot;plugin&quot; architecture, you don't want to create a C shared library, in which each instance creates a new Go runtime. There is already a &lt;a href=&quot;https://golang.org/pkg/plugin/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;plugin&lt;/code&gt; package&lt;/a&gt; which is intended for that purpose. &lt;/p&gt;&#xA;"" OwnerUserId=""32880"" LastActivityDate=""2017-07-14T18:54:19.827"" CommentCount=""0"" />
",45109903
45110223,"45110223      <row Id=""45110223"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45110421"" PostTypeId=""2"" ParentId=""45110223"" CreationDate=""2017-07-14T19:34:04.867"" Score=""2"" Body=""&lt;p&gt;You can use &lt;a href=&quot;https://golang.org/doc/effective_go.html#embedding&quot; rel=&quot;nofollow noreferrer&quot;&gt;struct embeding&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type foo struct {&#xA;    a int&#xA;}&#xA;&#xA;func (f *foo) bar() {&#xA;    f.a = 42&#xA;}&#xA;&#xA;type foo2 struct {&#xA;    foo&#xA;}&#xA;&#xA;func main() {&#xA;    f := foo{12}&#xA;    f.bar()&#xA;    f2 := foo2{}&#xA;    f2.a = 0&#xA;    f2.bar()&#xA;    fmt.Println(f)&#xA;    fmt.Println(f2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Just create struct and use foo as one of its members. Don't give it explicit name&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type foo2 struct {&#xA;    foo&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That way all methods of foo will be available for foo2.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that output of this program will be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{42}&#xA;{{42}}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;More effective way of achieving what I suppose you want to do, will come with new Go 1.9: &lt;a href=&quot;https://tip.golang.org/doc/go1.9#language&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://tip.golang.org/doc/go1.9#language&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8307258"" LastActivityDate=""2017-07-14T19:34:04.867"" CommentCount=""1"" />
",45110421
45111605,"45111605      <row Id=""45111605"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45114054"" PostTypeId=""2"" ParentId=""45111605"" CreationDate=""2017-07-15T03:02:33.613"" Score=""4"" Body=""&lt;p&gt;Yes. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's an example of having 2 fields in json and only decoding one:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;jsonString := `{&quot;a&quot;: 1, &quot;b&quot;: 2}`&#xA;var rec struct {&#xA;    A int `json:&quot;a&quot;`&#xA;}&#xA;err := json.Unmarshal([]byte(jsonString), &amp;amp;rec)&#xA;if err != nil {&#xA;    log.Fatalf(&quot;json.Unmarshal() failed with '%s'\n&quot;, err)&#xA;}&#xA;fmt.Printf(&quot;rec: %+v\n&quot;, rec)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;When run it prints:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;rec: {A:1}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;i.e. field &quot;a&quot; in json was decoded and field &quot;b&quot; was discarded.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://play.golang.org/p/89tu-ZC4pR&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/89tu-ZC4pR&lt;/a&gt; for full example.&lt;/p&gt;&#xA;"" OwnerUserId=""2898"" LastActivityDate=""2017-07-15T03:02:33.613"" CommentCount=""1"" />
",45114054
45115860,"45115860      <row Id=""45115860"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45116062"" PostTypeId=""2"" ParentId=""45115860"" CreationDate=""2017-07-15T08:15:18.707"" Score=""1"" Body=""&lt;p&gt;Go-kit and go-micro are for writing microservices, it won't solve your problem.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You should use a reverse proxy in front of your applications, for instance Nginx: &lt;a href=&quot;https://www.nginx.com/resources/admin-guide/reverse-proxy/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.nginx.com/resources/admin-guide/reverse-proxy/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is an example of a nginx configuration file that does what you want:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;server {&#xA;   listen 80 default_server;&#xA;   server_name your-domain;&#xA;&#xA;   location /app1 {&#xA;      proxy_set_header X-Real-IP $remote_addr;&#xA;      proxy_pass http://localhost:3000;&#xA;   }&#xA;&#xA;   location /app2 {&#xA;      proxy_set_header X-Real-IP $remote_addr;&#xA;      proxy_pass http://localhost:4000;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way, you still deploy your applications on different ports, but they will only be exposed through the port 80.&lt;/p&gt;&#xA;"" OwnerUserId=""1061579"" LastEditorUserId=""1061579"" LastEditDate=""2017-07-15T10:52:47.507"" LastActivityDate=""2017-07-15T10:52:47.507"" CommentCount=""1"" />
",45116062
45116232,"45116232      <row Id=""45116232"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45116673"" PostTypeId=""2"" ParentId=""45116232"" CreationDate=""2017-07-15T09:32:14.350"" Score=""2"" Body=""&lt;p&gt;The instruction&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var points = make(chan float64)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;creates an unbuffered channel, which in turn means that &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;points &amp;lt;- contributions_sum(input, distance, input[i][x_ln])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;will block until another go-routine reads from points.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Considering that all the go-routines in the code you posted perform a send on the channel before reading from it, they will all block waiting for a read on the same channel that will never happen (unless this is done in the code you didn't post, which you should have). As a result, you have a deadlock (which is usually written, is the error you quoted everything the console displays?). &lt;/p&gt;&#xA;"" OwnerUserId=""4866324"" LastActivityDate=""2017-07-15T09:32:14.350"" CommentCount=""1"" />
",45116673
45113907,"45113907      <row Id=""45113907"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45116926"" PostTypeId=""2"" ParentId=""45113907"" CreationDate=""2017-07-15T10:01:23.300"" Score=""1"" Body=""&lt;p&gt;The problem appears to be the &lt;code&gt;,&lt;/code&gt; char in your first regex.  You can see in the validator &lt;a href=&quot;https://github.com/go-validator/validator/blob/v2/validator.go#L332&quot; rel=&quot;nofollow noreferrer&quot;&gt;source code&lt;/a&gt; that the tag is split on &lt;code&gt;,&lt;/code&gt;. By UTSLing, I see no support for escaped commas in the tags; this is probably an oversight on the part of the project author. I suggest filing a bug/feature request.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-07-15T10:01:23.300"" CommentCount=""1"" />
",45116926
45117214,"45117214      <row Id=""45117214"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45117401"" PostTypeId=""2"" ParentId=""45117214"" CreationDate=""2017-07-15T10:58:51.370"" Score=""3"" Body=""&lt;p&gt;The way to fix this is to force colors from the minecraft server. It's not a problem with your Go program at all.  It's very common for command-line programs to detect whether they're running on an interactive terminal, and disable certain features (such as color output, paging, etc) when they are not, under the assumption that they're being passed through a script (as indeed it is, in your case).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the minecraft server doesn't have this option, you may be able to &lt;a href=&quot;https://stackoverflow.com/q/1401002/13860&quot;&gt;fool it into thinking it's running on an interactive terminal&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-07-15T10:58:51.370"" CommentCount=""2"" />
",45117401
45109397,"45109397      <row Id=""45109397"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45118253"" PostTypeId=""2"" ParentId=""45109397"" CreationDate=""2017-07-15T12:33:09.463"" Score=""2"" Body=""&lt;p&gt;you can do what you want by using, this packages &lt;a href=&quot;https://github.com/tidwall/gjson&quot; rel=&quot;nofollow noreferrer&quot;&gt;gjson&lt;/a&gt;,  and &lt;a href=&quot;https://github.com/tidwall/sjson&quot; rel=&quot;nofollow noreferrer&quot;&gt;sjson&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;example: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;    &quot;strconv&quot;&#xA;&#xA;    &quot;github.com/tidwall/gjson&quot;&#xA;    &quot;github.com/tidwall/sjson&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    bJSON := []byte(`       &#xA;            [&#xA;                {&#xA;                    &quot;name&quot;: &quot;abc&quot;,&#xA;                    &quot;age&quot;: 25&#xA;                },&#xA;                {&#xA;                    &quot;name&quot;: &quot;xyz&quot;,&#xA;                    &quot;age&quot;: 26&#xA;                }&#xA;            ]&#xA;    `)&#xA;&#xA;    newJSON := bJSON&#xA;    var err error&#xA;&#xA;    result := gjson.GetBytes(bJSON, &quot;#.age&quot;)&#xA;&#xA;    for i := range result.Array() {&#xA;        newJSON, err = sjson.DeleteBytes(newJSON, strconv.Itoa(i)+&quot;.age&quot;)&#xA;        if err != nil {&#xA;            log.Println(err)&#xA;        }&#xA;    }&#xA;&#xA;    fmt.Println(string(newJSON))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[&#xA;  {&#xA;    &quot;name&quot;: &quot;abc&quot;&#xA;  },&#xA;  {&#xA;    &quot;name&quot;: &quot;xyz&quot;&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5427367"" LastEditorUserId=""5427367"" LastEditDate=""2017-07-23T13:43:43.953"" LastActivityDate=""2017-07-23T13:43:43.953"" CommentCount=""1"" />
",45118253
45113209,"45113209      <row Id=""45113209"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45120498"" PostTypeId=""2"" ParentId=""45113209"" CreationDate=""2017-07-15T16:36:47.933"" Score=""0"" Body=""&lt;p&gt;VSCode uses go.gopath i used for tools like go vet and go import... You will have to export the GOPATH on the integrate terminal with each use or set it in the bashrc... the integrate terminal is just a &quot;clone&quot; of the systems actual terminal. If you read the thread you provided you'll notice that what you want is a feature requests and not a current feature&lt;/p&gt;&#xA;"" OwnerUserId=""4639336"" LastActivityDate=""2017-07-15T16:36:47.933"" CommentCount=""0"" />
",45120498
45084909,"45084909      <row Id=""45084909"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45120513"" PostTypeId=""2"" ParentId=""45084909"" CreationDate=""2017-07-15T16:38:21.683"" Score=""1"" Body=""&lt;p&gt;You can only set the gopath once and you'll have to reset it every time you change packages. Think of it as a virtualenv. One way around it is to install the packages global or by using something like gvm&lt;/p&gt;&#xA;"" OwnerUserId=""4639336"" LastActivityDate=""2017-07-15T16:38:21.683"" CommentCount=""0"" />
",45120513
45120927,"45120927      <row Id=""45120927"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45121313"" PostTypeId=""2"" ParentId=""45120927"" CreationDate=""2017-07-15T18:10:31.070"" Score=""2"" Body=""&lt;p&gt;Are you sure key is &lt;code&gt;artists&lt;/code&gt; in the yaml? Do you mean to supply &lt;code&gt;artist&lt;/code&gt;?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Working example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;str := []byte(`artist:&#xA;  name: The Beatles&#xA;  albums:&#xA;  - name: The White Album&#xA;    year: 1968&#xA;  - name: Abbey Road&#xA;    year: 1969&#xA;`)&#xA;&#xA;    viper.SetConfigType(&quot;yaml&quot;)&#xA;    viper.ReadConfig(bytes.NewBuffer(str))&#xA;&#xA;    var artist Artist&#xA;    err := viper.UnmarshalKey(&quot;artist&quot;, &amp;amp;artist)&#xA;&#xA;    fmt.Printf(&quot;%v, %#v\n&quot;, err, artist)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;nil&amp;gt;, main.Artist{Name:&quot;The Beatles&quot;, Albums:[]main.Album{main.Album{Name:&quot;The White Album&quot;, Year:1968}, main.Album{Name:&quot;Abbey Road&quot;, Year:1969}}}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-07-15T18:10:31.070"" CommentCount=""1"" />
",45121313
44961304,"44961304      <row Id=""44961304"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45122016"" PostTypeId=""2"" ParentId=""44961304"" CreationDate=""2017-07-15T19:29:02.410"" Score=""0"" Body=""&lt;p&gt;After hours of reading BeeGo and Sentry codes I figured out how to implement this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;errors&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;net/http&quot;&#xA;    &quot;runtime&quot;&#xA;&#xA;    &quot;github.com/astaxie/beego&quot;&#xA;    &quot;github.com/astaxie/beego/context&quot;&#xA;    &quot;github.com/astaxie/beego/logs&quot;&#xA;    &quot;github.com/getsentry/raven-go&quot;&#xA;)&#xA;&#xA;func init() {&#xA;    raven.SetDSN(beego.AppConfig.String(&quot;SentryDSN&quot;))&#xA;&#xA;    if !beego.BConfig.RecoverPanic {&#xA;        beego.BConfig.RecoverFunc = recoverPanic&#xA;    }&#xA;}&#xA;&#xA;func recoverPanic(ctx *context.Context) {&#xA;    if err := recover(); err != nil {&#xA;        if err == beego.ErrAbort {&#xA;            return&#xA;        }&#xA;        if !beego.BConfig.RecoverPanic {&#xA;            errStr := fmt.Sprint(err)&#xA;            packet := raven.NewPacket(errStr, raven.NewException(errors.New(errStr), raven.NewStacktrace(2, 3, nil)), raven.NewHttp(ctx.Request))&#xA;            raven.Capture(packet, nil)&#xA;            ctx.ResponseWriter.WriteHeader(http.StatusInternalServerError)&#xA;        }&#xA;&#xA;        //if beego.BConfig.EnableErrorsShow {&#xA;        //  if _, ok := beego.ErrorMaps[fmt.Sprint(err)]; ok {&#xA;        //      exception(fmt.Sprint(err), ctx)&#xA;        //      return&#xA;        //  }&#xA;        //}&#xA;        var stack string&#xA;        logs.Critical(&quot;the request url is &quot;, ctx.Input.URL())&#xA;        logs.Critical(&quot;Handler crashed with error&quot;, err)&#xA;        for i := 1; ; i++ {&#xA;            _, file, line, ok := runtime.Caller(i)&#xA;            if !ok {&#xA;                break&#xA;            }&#xA;            logs.Critical(fmt.Sprintf(&quot;%s:%d&quot;, file, line))&#xA;            stack = stack + fmt.Sprintln(fmt.Sprintf(&quot;%s:%d&quot;, file, line))&#xA;        }&#xA;        //if beego.BConfig.RunMode == beego.DEV &amp;amp;&amp;amp; beego.BConfig.EnableErrorsRender {&#xA;        //  showErr(err, ctx, stack)&#xA;        //}&#xA;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2837388"" LastActivityDate=""2017-07-15T19:29:02.410"" CommentCount=""0"" />
",45122016
45122513,"45122513      <row Id=""45122513"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45122607"" PostTypeId=""2"" ParentId=""45122513"" CreationDate=""2017-07-15T20:48:40.440"" Score=""3"" Body=""&lt;p&gt;You write to &lt;code&gt;io.Pipe&lt;/code&gt; but you never read from it (in a parallel go routine), hence the deadlock. Here is what the docs say:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Reads and Writes on the pipe are matched one to one except when multiple Reads are needed to consume a single Write. That is, &lt;strong&gt;each Write to the PipeWriter blocks until it has satisfied one or more Reads from the PipeReader&lt;/strong&gt; that fully consume the written data. The data is copied directly from the Write to the corresponding Read (or Reads); there is no internal buffering.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/io/#Pipe&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/io/#Pipe&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""2788297"" LastActivityDate=""2017-07-15T20:48:40.440"" CommentCount=""1"" />
",45122607
45064827,"45064827      <row Id=""45064827"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45122748"" PostTypeId=""2"" ParentId=""45064827"" CreationDate=""2017-07-15T21:08:38.517"" Score=""0"" Body=""&lt;p&gt;Generally speaking validation functions are meant to validate any configs (possibly combined with variables). These run as part of &lt;code&gt;terraform plan&lt;/code&gt;, &lt;code&gt;terraform apply&lt;/code&gt; and &lt;code&gt;terraform destroy&lt;/code&gt;. The user can also trigger explicit validation via &lt;code&gt;terraform validate&lt;/code&gt; which is commonly used in CI.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Assuming that &quot;Range&quot; is meant to limit minimum &amp;amp; maximum number of characters in a given string you can use &lt;a href=&quot;https://github.com/hashicorp/terraform/blob/master/helper/validation/validation.go#L93&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;StringLenBetween&lt;/code&gt; from the validation package&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Schema: map[string]*schema.Schema{&#xA;    &quot;number_of_servers&quot;: {&#xA;        Type:     schema.TypeString,&#xA;        Required: true,&#xA;        ValidateFunc: validation.StringLenBetween(1, 5),&#xA;    },&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can see it being used in practice here:&#xA;&lt;a href=&quot;https://github.com/terraform-providers/terraform-provider-aws/blob/46bff11/aws/resource_aws_cloudwatch_event_target.go#L71-L75&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/terraform-providers/terraform-provider-aws/blob/46bff11/aws/resource_aws_cloudwatch_event_target.go#L71-L75&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""335717"" LastActivityDate=""2017-07-15T21:08:38.517"" CommentCount=""0"" />
",45122748
45122905,"45122905      <row Id=""45122905"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45123114"" PostTypeId=""2"" ParentId=""45122905"" CreationDate=""2017-07-15T22:05:06.470"" Score=""7"" Body=""&lt;p&gt;&lt;code&gt;struct&lt;/code&gt; is a &lt;a href=&quot;https://golang.org/ref/spec#Keywords&quot; rel=&quot;nofollow noreferrer&quot;&gt;keyword&lt;/a&gt; in Go. It is used to define &lt;a href=&quot;https://golang.org/ref/spec#Struct_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;struct types&lt;/a&gt;, which is a sequence of named elements.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Person struct {&#xA;    Name string&#xA;    Age  int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;struct{}&lt;/code&gt; is a &lt;code&gt;struct&lt;/code&gt; type with zero elements. It is often used when no information is to be stored. It has the benefits of being 0-sized, so usually no memory is required to store a value of type &lt;code&gt;struct{}&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;struct{}{}&lt;/code&gt; on the other hand is a &lt;a href=&quot;https://golang.org/ref/spec#Composite_literals&quot; rel=&quot;nofollow noreferrer&quot;&gt;composite literal&lt;/a&gt;, it constructs a value of type &lt;code&gt;struct{}&lt;/code&gt;. A composite literal constructs values for types such as structs, arrays, maps and slices. Its syntax is the type followed by the elements in braces. Since the &quot;empty&quot; struct (&lt;code&gt;struct{}&lt;/code&gt;) has no fields, the elements list is also empty:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; struct{}  {}&#xA;|  ^     | ^&#xA;  type     empty element list&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As an example let's create a &quot;set&quot; in Go. Go does not have a builtin set data structure, but it has a builtin map. We can use a map as a set, as a map can only have at most one entry with a given key. And since we want to only store keys (elements) in the map, we may choose the map value type to be &lt;code&gt;struct{}&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A map with &lt;code&gt;string&lt;/code&gt; elements:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var set map[string]struct{}&#xA;// Initialize the set&#xA;set = make(map[string]struct{})&#xA;&#xA;// Add some values to the set:&#xA;set[&quot;red&quot;] = struct{}{}&#xA;set[&quot;blue&quot;] = struct{}{}&#xA;&#xA;// Check if a value is in the map:&#xA;_, ok := set[&quot;red&quot;]&#xA;fmt.Println(&quot;Is red in the map?&quot;, ok)&#xA;_, ok = set[&quot;green&quot;]&#xA;fmt.Println(&quot;Is green in the map?&quot;, ok)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/zvQU9E6m6J&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Is red in the map? true&#xA;Is green in the map? false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that however it may be more convenient to use &lt;code&gt;bool&lt;/code&gt; as the value type when creating a set out of a map, as the syntax to check if an element is in it is simpler. For details, see &lt;a href=&quot;https://stackoverflow.com/questions/33207197/how-can-i-create-an-array-that-contains-unique-strings/33207265#33207265&quot;&gt;How can I create an array that contains unique strings?&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-15T23:15:49.487"" LastActivityDate=""2017-07-15T23:15:49.487"" CommentCount=""0"" />
",45123114
45122496,"45122496      <row Id=""45122496"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45123370"" PostTypeId=""2"" ParentId=""45122496"" CreationDate=""2017-07-15T22:40:50.307"" Score=""3"" Body=""&lt;p&gt;As stated in the documentation:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Unmarshal uses the inverse of the encodings that Marshal uses, allocating maps, slices, and pointers as necessary, with ... &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;Unmarshal&lt;/code&gt; may allocates the variable(map, slice, etc.). If we pass a &lt;code&gt;map&lt;/code&gt; instead of &lt;em&gt;pointer&lt;/em&gt; to a &lt;code&gt;map&lt;/code&gt;, then the newly allocated &lt;code&gt;map&lt;/code&gt; won't be visible to the caller. The following examples (&lt;a href=&quot;https://play.golang.org/p/LHBEFiK_Hj&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;) demonstrates this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;func mapFunc(m map[string]interface{}) {&#xA;    m = make(map[string]interface{})&#xA;    m[&quot;abc&quot;] = &quot;123&quot;&#xA;}&#xA;&#xA;func mapPtrFunc(mp *map[string]interface{}) {&#xA;    m := make(map[string]interface{})&#xA;    m[&quot;abc&quot;] = &quot;123&quot;&#xA;&#xA;    *mp = m&#xA;}&#xA;&#xA;func main() {&#xA;    var m1, m2 map[string]interface{}&#xA;    mapFunc(m1)&#xA;    mapPtrFunc(&amp;amp;m2)&#xA;&#xA;    fmt.Printf(&quot;%+v, %+v\n&quot;, m1, m2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;in which the output is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;map[], map[abc:123]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If the requirement says that a function/method may allocate a variable when necessary and the newly allocated variable need to be visible to the caller, the solution will be: (a) the variable must be in function's &lt;em&gt;return&lt;/em&gt; statement &lt;strong&gt;or&lt;/strong&gt; (b) the variable can be assigned to the function/method argument. Since in &lt;code&gt;go&lt;/code&gt; &lt;em&gt;everything&lt;/em&gt; is pass by value, in case of (b), the argument must be a &lt;em&gt;pointer&lt;/em&gt;. The following diagram illustrates what happen in the above example:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/J3WUp.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/J3WUp.jpg&quot; alt=&quot;Illustration of variable allocation&quot;&gt;&lt;/a&gt;   &lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;At first, both map &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; point to &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Calling &lt;code&gt;mapFunc&lt;/code&gt; will copy the value pointed by &lt;code&gt;m1&lt;/code&gt; to &lt;code&gt;m&lt;/code&gt; resulting &lt;code&gt;m&lt;/code&gt; will also point to &lt;code&gt;nil&lt;/code&gt; map.&lt;/li&gt;&#xA;&lt;li&gt;If in (1) the map already allocated, then in (2) the address of &lt;em&gt;underlying map data structure&lt;/em&gt; pointed by &lt;code&gt;m1&lt;/code&gt; (&lt;em&gt;not the address of &lt;code&gt;m1&lt;/code&gt;&lt;/em&gt;) will be copied to &lt;code&gt;m&lt;/code&gt;. In this case both &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt; point to the same &lt;em&gt;map data structure&lt;/em&gt;, thus modifying map items through &lt;code&gt;m1&lt;/code&gt; will also be &lt;em&gt;visible&lt;/em&gt; to &lt;code&gt;m&lt;/code&gt;. &lt;/li&gt;&#xA;&lt;li&gt;In the &lt;code&gt;mapFunc&lt;/code&gt; function, new map is allocated and assigned to &lt;code&gt;m&lt;/code&gt;. There is no way to assign it to &lt;code&gt;m1&lt;/code&gt;. &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;In case of pointer:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;When calling &lt;code&gt;mapPtrFunc&lt;/code&gt;, the address of &lt;code&gt;m2&lt;/code&gt; will be copied to &lt;code&gt;mp&lt;/code&gt;.  &lt;/li&gt;&#xA;&lt;li&gt;In the &lt;code&gt;mapPtrFunc&lt;/code&gt;, new map is allocated and assigned to &lt;code&gt;*mp&lt;/code&gt; (not &lt;code&gt;mp&lt;/code&gt;). Since &lt;code&gt;mp&lt;/code&gt; is pointer to &lt;code&gt;m2&lt;/code&gt;, assigning the new map to &lt;code&gt;*mp&lt;/code&gt; will change the value pointed by &lt;code&gt;m2&lt;/code&gt;. Note that the value of &lt;code&gt;mp&lt;/code&gt; is unchanged, i.e. the address of &lt;code&gt;m2&lt;/code&gt;.  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-07-16T00:58:21.930"" LastActivityDate=""2017-07-16T00:58:21.930"" CommentCount=""1"" />
",45123370
45124213,"45124213      <row Id=""45124213"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45124551"" PostTypeId=""2"" ParentId=""45124213"" CreationDate=""2017-07-16T02:58:10.910"" Score=""2"" Body=""&lt;p&gt;About (1), I think the issue is related to your benchmarks not doing what the Go tools expect them to do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;From the documentation (&lt;a href=&quot;https://golang.org/pkg/testing/#hdr-Benchmarks&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/testing/#hdr-Benchmarks&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The benchmark function must run the target code b.N times. During benchmark execution, b.N is adjusted until the benchmark function lasts long enough to be timed reliably.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I don't see your code using &lt;code&gt;b.N&lt;/code&gt;, so while the benchmark tool &lt;em&gt;thinks&lt;/em&gt; you run the code &lt;code&gt;b.N&lt;/code&gt; times, you are managing the repeats by yourself. Depending on the values the tools are actually using for &lt;code&gt;b.N&lt;/code&gt;, the results will vary unexpectedly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can actually do things 10, 100 and 1,000 times, but in all cases do them &lt;code&gt;b.N&lt;/code&gt; times (make that &lt;code&gt;b.N * 10&lt;/code&gt;, &lt;code&gt;b.N * 100&lt;/code&gt;, etc) so that the reported benchmark is adjusted properly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;About (2), when some systems rather use a sequential log to store operations to the replay them, it's not because appending to a file is faster than overwriting a single file.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In a database system, if you need to update a specific record, you must first find what's the actual file (and position in the file) you need to update.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That might require several index lookups, and once you update the record, you might need to update those indexes to reflect the new values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So the right comparison is appending to a single log vs making several reads plus then several writes.&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-16T02:58:10.910"" CommentCount=""1"" />
",45124551
45125118,"45125118      <row Id=""45125118"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45125756"" PostTypeId=""2"" ParentId=""45125118"" CreationDate=""2017-07-16T06:30:19.543"" Score=""0"" Body=""&lt;p&gt;Firebase is the simplest way to deploy your frontend on Google's infrastructure.  It handles certificate provisioning for you, so you get HTTPS out of the box.  I'm not sure why you think Cloud Functions is the only backend you can use with it.  You can use any backend you like, including Amazon's ElasticBeanstalk.  I use both App Engine and Compute Engine backends with a Firebase frontend.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You could also do it the &quot;old way&quot; (how it was done when App Engine was Google's only cloud offering), and deploy your frontend to App Engine; it handles static content just fine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There's not a single right way to do it.  Your options are vast, and choosing one service to serve your frontend content in no way limits your choice for running your backend.&lt;/p&gt;&#xA;"" OwnerUserId=""1427098"" LastActivityDate=""2017-07-16T06:30:19.543"" CommentCount=""1"" />
",45125756
45125542,"45125542      <row Id=""45125542"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45125797"" PostTypeId=""2"" ParentId=""45125542"" CreationDate=""2017-07-16T06:35:41.790"" Score=""1"" Body=""&lt;p&gt;You may use the &lt;a href=&quot;https://golang.org/pkg/path/filepath/#Glob&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;filepath.Glob()&lt;/code&gt;&lt;/a&gt; function where you can specify a &lt;em&gt;pattern&lt;/em&gt; to list files.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The pattern to be used is basically the name you wish to check if used, extended with the &lt;em&gt;any extension&lt;/em&gt; pattern.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func filenameUsed(name string) (bool, error) {&#xA;    matches, err := filepath.Glob(name + &quot;.*&quot;)&#xA;    if err != nil {&#xA;        return false, err&#xA;    }&#xA;    return len(matches) &amp;gt; 0, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using / testing it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Print(&quot;Filename foo used: &quot;)&#xA;fmt.Println(filenameUsed(&quot;uploads/foo&quot;))&#xA;fmt.Print(&quot;Filename bar used: &quot;)&#xA;fmt.Println(filenameUsed(&quot;uploads/bar&quot;))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Example output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Filename foo used: true &amp;lt;nil&amp;gt;&#xA;Filename bar used: false &amp;lt;nil&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, note that &lt;code&gt;filenameUsed()&lt;/code&gt; returning &lt;code&gt;false&lt;/code&gt; (and &lt;code&gt;nil&lt;/code&gt; error) does not mean a file with that name won't exist if you attempt to create one after. Meaning checking it and attempting to create such a file does not guarantee atomicity. If your purpose is to create a file if the name is not used, then simply try to create the file in the proper mode (do not overwrite if exists), and handle the (creation) error returned by that call.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-16T06:41:40.723"" LastActivityDate=""2017-07-16T06:41:40.723"" CommentCount=""0"" />
",45125797
45126312,"45126312      <row Id=""45126312"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45126402"" PostTypeId=""2"" ParentId=""45126312"" CreationDate=""2017-07-16T08:08:38.317"" Score=""1"" Body=""&lt;p&gt;You may create and use an &lt;a href=&quot;https://golang.org/pkg/net/http/#Request&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;http.Request&lt;/code&gt;&lt;/a&gt; forged by you, which deliberately returns an error when reading its body. You don't necessarily need a whole new request, a faulty body is enough (which is an &lt;a href=&quot;https://golang.org/pkg/io/#ReadCloser&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.ReadCloser&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Simplest achieved by using the &lt;a href=&quot;https://golang.org/pkg/net/http/httptest/#NewRequest&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;httptest.NewRequest()&lt;/code&gt;&lt;/a&gt; function where you can pass an &lt;a href=&quot;https://golang.org/pkg/io/#Reader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.Reader&lt;/code&gt;&lt;/a&gt; value which will be used (wrapped to be an &lt;code&gt;io.ReadCloser&lt;/code&gt;) as the request body.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's an example &lt;code&gt;io.Reader&lt;/code&gt; which deliberately returns an error when attempting to read from it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type errReader int&#xA;&#xA;func (errReader) Read(p []byte) (n int, err error) {&#xA;    return 0, errors.New(&quot;test error&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Example that will cover your error case:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func HandlePostRequest(w http.ResponseWriter, r *http.Request) {&#xA;    body, err := ioutil.ReadAll(r.Body)&#xA;    if err != nil {&#xA;        fmt.Printf(&quot;Error reading the body: %v\n&quot;, err)&#xA;        return&#xA;    }&#xA;    defer r.Body.Close()&#xA;    fmt.Printf(&quot;No error, body: %s\n&quot;, body)&#xA;}&#xA;&#xA;func main() {&#xA;    testRequest := httptest.NewRequest(http.MethodPost, &quot;/something&quot;, errReader(0))&#xA;    HandlePostRequest(nil, testRequest)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/i0Rd9Z6rnE&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;): &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Error reading the body: test error&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""797194"" LastEditDate=""2017-07-23T07:37:50.740"" LastActivityDate=""2017-07-23T07:37:50.740"" CommentCount=""1"" />
",45126402
45127882,"45127882      <row Id=""45127882"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45128040"" PostTypeId=""2"" ParentId=""45127882"" CreationDate=""2017-07-16T11:30:40.587"" Score=""1"" Body=""&lt;p&gt;The &lt;a href=&quot;https://golang.org/pkg/strings/#Join&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;strings.Join&lt;/strong&gt;&lt;/a&gt; method expects a slice of strings as first argument, but you are giving it a rune type.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can use the &lt;a href=&quot;https://golang.org/pkg/strings/#Split&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;strings.Split&lt;/strong&gt;&lt;/a&gt; method to obtain a slice of strings from a string. &lt;a href=&quot;https://play.golang.org/p/P4Bfac30uJ&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here is an example&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1513091"" LastEditorUserId=""1513091"" LastEditDate=""2017-07-16T11:45:16.457"" LastActivityDate=""2017-07-16T11:45:16.457"" CommentCount=""0"" />
",45128040
44826376,"44826376      <row Id=""44826376"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45128688"" PostTypeId=""2"" ParentId=""44826376"" CreationDate=""2017-07-16T12:36:21.367"" Score=""0"" Body=""&lt;p&gt;Following my own question, I researched how one could implement UnmarshalJSON for interface lists. Ultimately this led me to publish a blog post on how to do this properly. Basically there are 2 main solutions:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Parse the required JSON string into a &lt;code&gt;map[string]*json.RawMessage&lt;/code&gt; and work your way from there.&lt;/li&gt;&#xA;&lt;li&gt;Make an alias for the interface list and implement UnmarshalJSON for that alias. However, you'll still need to work with &lt;code&gt;map[string]*json.RawMessage&lt;/code&gt; and some manual work. Nothing comes without a price!&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;I highly suggest taking the seconds approach. While these two solutions may result in the same amount of code lines, taking advantage of type aliasing and being less dependent on &lt;code&gt;json.RawMessage&lt;/code&gt; types will make a more easy to manage code, especially when it is required to support multiple interfaces on the UnmarshalJSON implementation&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To directly answer the question, start with making a type alias for the interface list:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Filterers []Filterer&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now continue with implementing the decoding of the JSON:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (f *Filterers) UnmarshalJSON(b []byte) error {&#xA;    var FilterFields map[string]*json.RawMessage&#xA;    if err := json.Unmarshal(b, &amp;amp;FilterFields); err != nil {&#xA;        return err&#xA;    }&#xA;    for LFKey, LFValue := range FilterFields {&#xA;        if LFKey == &quot;FieldFilter&quot; {&#xA;            var MyFieldFilters []*json.RawMessage&#xA;            if err := json.Unmarshal(*LFValue, &amp;amp;MyFieldFilters); err != nil {&#xA;                return err&#xA;            }&#xA;            for _, MyFieldFilter := range MyFieldFilters {&#xA;                var filter FieldFilter&#xA;                if err := json.Unmarshal(*MyFieldFilter, &amp;amp;filter); err != nil {&#xA;                    return err&#xA;                }&#xA;                *f = append(*f, &amp;amp;filter)&#xA;            }&#xA;        }&#xA;    }&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;A detailed explanation (with some examples and a full working code snippets) of the second approach is available &lt;a href=&quot;https://0rka.blog/2017/07/13/unmarshalling-json-structs-containing-interfaces-in-go/&quot; rel=&quot;nofollow noreferrer&quot;&gt;on my own blog&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""6691722"" LastEditorUserId=""6691722"" LastEditDate=""2017-07-16T12:51:12.963"" LastActivityDate=""2017-07-16T12:51:12.963"" CommentCount=""0"" />
",45128688
45119930,"45119930      <row Id=""45119930"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45130123"" PostTypeId=""2"" ParentId=""45119930"" CreationDate=""2017-07-16T15:13:00.887"" Score=""1"" Body=""&lt;p&gt;Based on the comments and discussion with the OP It was determined that a linked list was probably the best route in trying to control how to go forward and backwards with a bit less effort. Since Go is being used and the modules that are being used require goroutines the linked list also would have to be safe to use within goroutines. &lt;/p&gt;&#xA;"" OwnerUserId=""4639336"" LastActivityDate=""2017-07-16T15:13:00.887"" CommentCount=""0"" />
",45130123
45130826,"45130826      <row Id=""45130826"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45133431"" PostTypeId=""2"" ParentId=""45130826"" CreationDate=""2017-07-16T21:24:09.617"" Score=""1"" Body=""&lt;p&gt;AFAIK there is no ready solution yet to access location on both Android and iOS in  a platform independent way. But in theory you could make separate packages using the &lt;code&gt;gomobile&lt;/code&gt; tool to generate bindings for each platform. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example on Android you would use something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import &quot;Java/android/content/Context&quot;&#xA;import &quot;Java/android/location/LocationManager&quot;&#xA;&#xA;locationManager := ctx.GetSystemService(Context.LOCATION_SERVICE)&#xA;// nil check omitted.&#xA;location := locationManager.GetLastKnownLocation(LocationManager.GPS_PROVIDER)&#xA;// nil check omitted.&#xA;lat := location.GetLatitude()&#xA;lng := location.GetLongitude()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Where &lt;code&gt;ctx&lt;/code&gt; is the context (an activity, service, etc.) that you receive in one of their lifecycle callbacks.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also you can use other providers (network, fused).&lt;/p&gt;&#xA;"" OwnerUserId=""4283005"" LastEditorUserId=""4283005"" LastEditDate=""2017-07-16T21:39:06.013"" LastActivityDate=""2017-07-16T21:39:06.013"" CommentCount=""0"" />
",45133431
45134172,"45134172      <row Id=""45134172"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45134241"" PostTypeId=""2"" ParentId=""45134172"" CreationDate=""2017-07-16T23:35:15.323"" Score=""1"" Body=""&lt;p&gt;You can compare function like this, Read more about the representation of functions here: &lt;a href=&quot;http://golang.org/s/go11func&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://golang.org/s/go11func&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func funcEqual(a, b interface{}) bool {&#xA;    av := reflect.ValueOf(&amp;amp;a).Elem()&#xA;    bv := reflect.ValueOf(&amp;amp;b).Elem()&#xA;    return av.InterfaceData() == bv.InterfaceData()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt; This is just an idea for your start point.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    a := []someFunc{sf1, sf2}&#xA;    b := []someFunc{sf1, sf2}&#xA;&#xA;    for idx, f := range a {&#xA;        fmt.Println(&quot;Index: &quot;, idx, funcEqual(f, b[idx]))&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Index:  0 true&#xA;Index:  1 true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Play link: &lt;a href=&quot;https://play.golang.org/p/6cSVXSYfa5&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/6cSVXSYfa5&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-17T01:30:13.747"" LastActivityDate=""2017-07-17T01:30:13.747"" CommentCount=""2"" />
",45134241
45134378,"45134378      <row Id=""45134378"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45134481"" PostTypeId=""2"" ParentId=""45134378"" CreationDate=""2017-07-17T00:20:59.477"" Score=""4"" Body=""&lt;p&gt;Typically import path starts after &lt;code&gt;$GOPATH/src&lt;/code&gt;, refer to &lt;a href=&quot;https://golang.org/doc/code.html#ImportPaths&quot; rel=&quot;nofollow noreferrer&quot;&gt;doc&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let's say you have directory structure:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$GOPATH/src/github.com/hithubuser/app/utils&#xA;&#xA;# your import path is 'github.com/hithubuser/app/utils'&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Do you write a full the path for all the imports or you avoid to make it?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Yes, generally full import is used, since it enables you to distribute your code as go library. So that you can develop reusable code and import it in any project as needed or you can publish it to Go community.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Let's say you have standalone project, not referred to any other Go project and you're distributing as binary instead of go library. Then you can to something like this (it is not commonly used/recommended though).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Just git clone your repo at &lt;code&gt;$GOPATH/src&lt;/code&gt; like &lt;code&gt;git clone github.com/hithubuser/app&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$GOPATH/src/app/utils&#xA;&#xA;# then import path is app/utils&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-17T06:52:48.290"" LastActivityDate=""2017-07-17T06:52:48.290"" CommentCount=""0"" />
",45134481
45134127,"45134127      <row Id=""45134127"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45135395"" PostTypeId=""2"" ParentId=""45134127"" CreationDate=""2017-07-17T03:06:58.760"" Score=""3"" Body=""&lt;p&gt;In order to be able to modify what &lt;code&gt;t.A&lt;/code&gt; points to, you need to send a reference to it to your &lt;code&gt;CopyValue&lt;/code&gt; function.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;CopyValue(vptr, &amp;amp;t.A) // (note the &amp;amp;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can then assign the pointer to the new address:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func CopyValue(src interface{}, dest interface{}) {&#xA;    srcRef := reflect.ValueOf(src)&#xA;    vp := reflect.ValueOf(dest)&#xA;    vp.Elem().Set(srcRef)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See the 3rd &quot;law of reflection&quot; here: &lt;a href=&quot;https://blog.golang.org/laws-of-reflection&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://blog.golang.org/laws-of-reflection&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Full working code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;reflect&quot;&#xA;)&#xA;&#xA;type T struct {&#xA;    A *int&#xA;}&#xA;&#xA;func main() {&#xA;    t := &amp;amp;T{}&#xA;    v := 1&#xA;    vptr := &amp;amp;v&#xA;    CopyValue(vptr, &amp;amp;t.A) // we pass a reference to t.A since we want to modify it&#xA;    fmt.Printf(&quot;%v\n&quot;, *t.A)&#xA;}&#xA;&#xA;func CopyValue(src interface{}, dest interface{}) {&#xA;    srcRef := reflect.ValueOf(src)&#xA;    vp := reflect.ValueOf(dest)&#xA;    vp.Elem().Set(srcRef)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-17T03:06:58.760"" CommentCount=""0"" />
",45135395
45140270,"45140270      <row Id=""45140270"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45140610"" PostTypeId=""2"" ParentId=""45140270"" CreationDate=""2017-07-17T09:33:16.880"" Score=""1"" Body=""&lt;p&gt;You can try this: ( &lt;a href=&quot;http://ideone.com/ncDO0t&quot; rel=&quot;nofollow noreferrer&quot;&gt;Run here&lt;/a&gt; )&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;regexp&quot;&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    var re = regexp.MustCompile(`payload:\\&quot;(\{[^\}]+\})`)&#xA;    var str = `version:1 response:&amp;lt;status:200 message:\&quot;OK\&quot; payload:\&quot;{\\\&quot;id\\\&quot;:\\\&quot;ll2.card_4U45pAWUMCLhsu\\\&quot;,\\\&quot;uid\\\&quot;:\\\&quot;ll2.acc_727V8M6GjPJ9I26CqZHgxN\\\&quot;}\\\&quot;\\013\\022\\006ll2-cc\\032\\0019\&quot; endorsement:&amp;lt;endorser:\&quot;\\n\\007PASSKIT\\022\\224\\010&amp;gt;`&#xA;    rawJSON := re.FindStringSubmatch(str)&#xA;    fmt.Println(rawJSON[1])    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""761132"" LastActivityDate=""2017-07-17T09:33:16.880"" CommentCount=""0"" />
",45140610
45139954,"45139954      <row Id=""45139954"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45140983"" PostTypeId=""2"" ParentId=""45139954"" CreationDate=""2017-07-17T09:50:11.710"" Score=""1"" Body=""&lt;p&gt;You could use an interface like this and an if statement to get it back to whatever struct it orginated as tho.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type ReturnValue struct {&#xA;   Status string&#xA;   CustomStruct interface{}&#xA;} &#xA;&#xA;func GetReturn(status string, class interface{}){&#xA;   var result = ReturnValue {Status : status, CustomStruct: class}&#xA;&#xA;   fmt.Println(result)&#xA;&#xA;   msg, ok := result.CustomStruct.(Message1)&#xA;   if ok {&#xA;      fmt.Printf(&quot;Message1 is %s\n&quot;, msg.message)&#xA;   }&#xA;}&#xA;&#xA;type Message1 struct {&#xA;   message string&#xA;}&#xA;&#xA;type Message2 struct {&#xA;   message string&#xA;}&#xA;&#xA;func main(){&#xA;   var m1 = Message1 {message: &quot;Hello1&quot;}&#xA;   GetReturn(&quot;success&quot;,  m1)&#xA;&#xA;   var m2 = Message2 {message: &quot;Hello2&quot;}&#xA;   GetReturn(&quot;success&quot;,  m2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/L6VYV80x27&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/L6VYV80x27&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""450333"" LastEditorUserId=""436560"" LastEditDate=""2017-07-17T10:17:20.430"" LastActivityDate=""2017-07-17T10:17:20.430"" CommentCount=""0"" />
",45140983
45145873,"45145873      <row Id=""45145873"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45146212"" PostTypeId=""2"" ParentId=""45145873"" CreationDate=""2017-07-17T13:55:46.147"" Score=""-1"" Body=""&lt;p&gt;&quot;c&quot; is an interface{} type, Having an interface in function parameter, you can able to pass any struct or any data types into it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;In your case you want c to use the function write&#xA;if err := c.Write(bp); err != nil {&#xA;        log.Print(&quot;write failed &quot; + err)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The compiler doesn't know the type of c, so you need to type assert it.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try this, It will work  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;newC,ok:=  c.(type of c)    type of C -&amp;gt; a struct or any type which has a method write&#xA;&#xA;if ok {&#xA;    if err := newC.Write(bp); err != nil {&#xA;            log.Print(&quot;write failed &quot; + err)&#xA;        }&#xA;&#xA;}     &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or Change your function like this&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func writeToInflux(c client.Client, host string, service string, state string) bool&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7064515"" LastEditorUserId=""1147580"" LastEditDate=""2017-07-17T16:14:45.220"" LastActivityDate=""2017-07-17T16:14:45.220"" CommentCount=""3"" />
",45146212
45148775,"45148775      <row Id=""45148775"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45148776"" PostTypeId=""2"" ParentId=""45148775"" CreationDate=""2017-07-17T16:02:10.547"" Score=""4"" Body=""&lt;p&gt;This can be achieved using the &lt;a href=&quot;https://golang.org/pkg/flag/#VisitAll&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;VisitAll&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;VisitAll visits the command-line flags in lexicographical order, calling fn for each. It visits all flags, even those not set.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Sample code (add after &lt;code&gt;flag.Parse()&lt;/code&gt;): &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;flag.VisitAll(func (f *flag.Flag) {&#xA;    if f.Value.String()==&quot;&quot; {&#xA;        fmt.Println(f.Name, &quot;not set!&quot;)&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4926817"" LastActivityDate=""2017-07-17T16:02:10.547"" CommentCount=""0"" />
",45148776
45084589,"45084589      <row Id=""45084589"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45151842"" PostTypeId=""2"" ParentId=""45084589"" CreationDate=""2017-07-17T19:06:49.477"" Score=""0"" Body=""&lt;p&gt;For the sake of ensuring this has a marked answer, I'll take the advice of @reticentroot and format the comment into an answer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It would be more idiomatic for your POST endpoint to accept the request regardless of whether a corresponding /v1/photo or /v1/data entry has been created. The process that's interfacing with these pieces of data could easily check whether it has both pieces of data, and act accordingly.&lt;/p&gt;&#xA;"" OwnerUserId=""4746361"" LastActivityDate=""2017-07-17T19:06:49.477"" CommentCount=""0"" />
",45151842
45142452,"45142452      <row Id=""45142452"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45151974"" PostTypeId=""2"" ParentId=""45142452"" CreationDate=""2017-07-17T19:14:57.380"" Score=""2"" Body=""&lt;p&gt;It is because you try to use a pointer to the interface to unmarshal into. You need return a pointer in a function &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func newAnchor() resource {&#xA;    return &amp;amp;anchor{}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And you don't need to get address in this line:&#xA;&lt;code&gt;err := dcdr.Decode(&amp;amp;res)&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is small working example: &lt;a href=&quot;https://play.golang.org/p/3E0RmGTURO&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/3E0RmGTURO&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastEditorUserId=""142162"" LastEditDate=""2017-07-21T18:24:00.907"" LastActivityDate=""2017-07-21T18:24:00.907"" CommentCount=""1"" />
",45151974
45158059,"45158059      <row Id=""45158059"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45158178"" PostTypeId=""2"" ParentId=""45158059"" CreationDate=""2017-07-18T05:24:39.013"" Score=""0"" Body=""&lt;p&gt;The assignment &lt;code&gt;cdf[i] = s&lt;/code&gt; performs an implicit conversion to &lt;code&gt;uint64_t&lt;/code&gt;.  It's hard to tell if this is intended without the calculations you omitted.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In practice, &lt;code&gt;long double&lt;/code&gt; as a type has considerable variance across architectures.  Whether Go's &lt;code&gt;float64&lt;/code&gt; is an appropriate replacement depends on the architecture you are porting from.  For example, on x86, &lt;code&gt;long double&lt;/code&gt; is an 80-byte extended precision type, but &lt;a href=&quot;https://github.com/Microsoft/BashOnWindows/issues/830&quot; rel=&quot;nofollow noreferrer&quot;&gt;Windows systems are usually configured in such a way to compute results only with the 53-bit mantissa&lt;/a&gt;, which means that &lt;code&gt;float64&lt;/code&gt; could still be equivalent for your purposes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; In this particular case, the values computed by the sources appear to be static and independent of the input.  I would just use &lt;code&gt;float64&lt;/code&gt; on the Go side and see if the computed values are identical to those of the C version, when run on a x86 machine under real GNU/Linux (virtualization should be okay), to work around the Windows FPU issues.  The choice of x86 is just a guess because it is likely what the original author used.  I do not understand the underlying cryptography, so I can't say whether a difference in the computed values impact the security.  (Also note that the C code does not seem to properly seed its PRNG.)&lt;/p&gt;&#xA;"" OwnerUserId=""8316315"" LastEditorUserId=""8316315"" LastEditDate=""2017-07-18T12:11:38.993"" LastActivityDate=""2017-07-18T12:11:38.993"" CommentCount=""2"" />
",45158178
45156553,"45156553      <row Id=""45156553"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45159309"" PostTypeId=""2"" ParentId=""45156553"" CreationDate=""2017-07-18T06:39:37.487"" Score=""1"" Body=""&lt;p&gt;You need to change your &quot;ColInfo&quot; struct keys so that &quot;json&quot; package can read them. I'm attaching a working code snippet&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;io/ioutil&quot;&#xA;    &quot;os&quot;&#xA;)&#xA;&#xA;type ColInfo struct {&#xA;    Key string `json:&quot;key&quot;`&#xA;    Col []int  `json:&quot;data&quot;`&#xA;}&#xA;type Config struct {&#xA;    colInfos []ColInfo&#xA;}&#xA;&#xA;func main() {&#xA;    file, err := ioutil.ReadFile(&quot;configurtaion.txt&quot;)&#xA;    if err != nil {&#xA;        fmt.Printf(&quot;File error: %v\n&quot;, err)&#xA;        os.Exit(1)&#xA;    }&#xA;    cfg := Config{}&#xA;    json.Unmarshal(file, &amp;amp;cfg.colInfos)&#xA;    fmt.Println(cfg.colInfos[0])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2488951"" LastActivityDate=""2017-07-18T06:39:37.487"" CommentCount=""0"" />
",45159309
45147353,"45147353      <row Id=""45147353"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45162597"" PostTypeId=""2"" ParentId=""45147353"" CreationDate=""2017-07-18T09:23:13.027"" Score=""2"" Body=""&lt;p&gt;You wrote that &lt;code&gt;CalcualteBallCycle()&lt;/code&gt; modifies the slice by design.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I can't speak to correctness of that approach, but it is why benchmark time of &lt;code&gt;BenchmarkCalculateBallCycle123&lt;/code&gt; is so different.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On first run it does the expected thing but on subsequent runs it does something completely different, because you're passing different data as input.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Benchmark this modified code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func BenchmarkCalculateBallCycle123v2(b *testing.B) {&#xA;    m := []int{8, 62, 42, 87, 108, 35, 17, 6, 22, 75, 116, 112, 39, 119, 52, 60, 30, 88, 56, 36, 38, 26, 51, 31, 55, 120, 33, 99, 111, 24, 45, 21, 23, 34, 43, 41, 67, 65, 66, 85, 82, 89, 9, 25, 109, 47, 40, 0, 83, 46, 73, 13, 12, 63, 15, 90, 121, 2, 69, 53, 28, 72, 97, 3, 4, 94, 106, 61, 96, 18, 80, 74, 44, 84, 107, 98, 93, 103, 5, 91, 32, 76, 20, 68, 81, 95, 29, 27, 86, 104, 7, 64, 113, 78, 105, 58, 118, 117, 50, 70, 10, 101, 110, 19, 1, 115, 102, 71, 79, 57, 77, 122, 48, 114, 54, 37, 59, 49, 100, 11, 14, 92, 16}&#xA;    for n := 0; n &amp;lt; b.N; n++ {&#xA;        tmp := append([]int{}, m...)&#xA;        CalculateBallCycle(tmp)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This works-around this behavior by making a copy of m, so that &lt;code&gt;CalculateBallCycle&lt;/code&gt; modifies a local copy.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The running time becomes more like the others:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;BenchmarkCalculateBallCycle123-8         3000000           500 ns/op&#xA;BenchmarkCalculateBallCycle123v2-8           100      10483347 ns/op&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2898"" LastActivityDate=""2017-07-18T09:23:13.027"" CommentCount=""1"" />
",45162597
45161844,"45161844      <row Id=""45161844"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45162786"" PostTypeId=""2"" ParentId=""45161844"" CreationDate=""2017-07-18T09:31:06.327"" Score=""1"" Body=""&lt;p&gt;Go to:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;File&lt;/strong&gt; -&gt; &lt;strong&gt;Settings&lt;/strong&gt; -&gt; &lt;strong&gt;Editor&lt;/strong&gt; -&gt; &lt;strong&gt;General&lt;/strong&gt; -&gt; &lt;strong&gt;Editor Tabs&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In section &lt;strong&gt;Tab Appearance&lt;/strong&gt; find &lt;strong&gt;Placement&lt;/strong&gt; drop down list.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If is it set to &lt;strong&gt;None&lt;/strong&gt; then change it to &lt;strong&gt;Top&lt;/strong&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Confirm with &lt;strong&gt;OK&lt;/strong&gt; button&lt;/p&gt;&#xA;"" OwnerUserId=""8307258"" LastActivityDate=""2017-07-18T09:31:06.327"" CommentCount=""1"" />
",45162786
43460604,"43460604      <row Id=""43460604"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45163493"" PostTypeId=""2"" ParentId=""43460604"" CreationDate=""2017-07-18T10:01:50.900"" Score=""0"" Body=""&lt;p&gt;On very large Sizes the Plus Operator (&quot;+&quot;) is faster than other Methods.&lt;/p&gt;&#xA;"" OwnerUserId=""5672542"" LastActivityDate=""2017-07-18T10:01:50.900"" CommentCount=""0"" />
",45163493
45164649,"45164649      <row Id=""45164649"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45165250"" PostTypeId=""2"" ParentId=""45164649"" CreationDate=""2017-07-18T11:16:45.437"" Score=""1"" Body=""&lt;p&gt;First of all, values are &lt;strong&gt;not&lt;/strong&gt; passed by reference for slices/arrays.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;At the same time, if you were passing a slice value to some function, the receiver would be able to modify the same underlying array, because a slice value contains a pointer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your case, you are not passing a slice itself, but rather copies of the dereferenced &lt;code&gt;int64&lt;/code&gt; values. And &lt;code&gt;fmt.Scanf&lt;/code&gt; is not updating &lt;code&gt;mapIsh&lt;/code&gt;. Only passing addresses are you able to use the scanned values. &lt;/p&gt;&#xA;"" OwnerUserId=""4283005"" LastActivityDate=""2017-07-18T11:16:45.437"" CommentCount=""1"" />
",45165250
45158754,"45158754      <row Id=""45158754"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45168144"" PostTypeId=""2"" ParentId=""45158754"" CreationDate=""2017-07-18T13:26:03.383"" Score=""2"" Body=""&lt;p&gt;See the &lt;a href=&quot;https://github.com/gorilla/websocket/tree/master/examples/chat&quot; rel=&quot;nofollow noreferrer&quot;&gt;Gorilla Chat Application&lt;/a&gt; for an example of how to avoid blocking on a client.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The key parts are:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gorilla/websocket/blob/462d5c5828f6203e4047c47be2920315937be380/examples/chat/client.go#L130&quot; rel=&quot;nofollow noreferrer&quot;&gt;Use a buffered channel for sending to the client&lt;/a&gt;. Your application is already doing this.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gorilla/websocket/blob/462d5c5828f6203e4047c47be2920315937be380/examples/chat/hub.go#L43-L49&quot; rel=&quot;nofollow noreferrer&quot;&gt;Send to the client using select/default&lt;/a&gt; to avoid blocking. Assume that the client is blocked on write when the client cannot immediately receive a message. Close the client's channel in this situation to cause the client's write loop to exit.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gorilla/websocket/blob/462d5c5828f6203e4047c47be2920315937be380/examples/chat/client.go#L91&quot; rel=&quot;nofollow noreferrer&quot;&gt;Write with a deadline&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-07-18T13:54:41.330"" LastActivityDate=""2017-07-18T13:54:41.330"" CommentCount=""1"" />
",45168144
45088651,"45088651      <row Id=""45088651"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45169415"" PostTypeId=""2"" ParentId=""45088651"" CreationDate=""2017-07-18T14:17:49.373"" Score=""5"" Body=""&lt;p&gt;At least on the second page, all of the paths seem wrong. You supplied the path to the &lt;em&gt;source code&lt;/em&gt; where the dialog asks for the path to the &lt;em&gt;executable&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To make sure you have all the tools installed run the following commands in the terminal:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go get -u github.com/nsf/gocode&#xA;go get -u golang.org/x/tools/cmd/guru&#xA;go get -u github.com/rogpeppe/godef&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, for each of the tools run&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;which &amp;lt;tool&amp;gt;&#xA;# example:&#xA;which guru&#xA;# =&amp;gt; /Users/user/gocode/bin/gocode&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Copy the output into the &lt;code&gt;Executable:&lt;/code&gt; field in the config screen.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For gofmt you should be able to simply tick &quot;Use default location&quot;&lt;/p&gt;&#xA;"" OwnerUserId=""405454"" LastActivityDate=""2017-07-18T14:17:49.373"" CommentCount=""1"" />
",45169415
45171642,"45171642      <row Id=""45171642"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45172168"" PostTypeId=""2"" ParentId=""45171642"" CreationDate=""2017-07-18T16:13:45.340"" Score=""5"" Body=""&lt;p&gt;If you come from Java, the empty interface (&lt;code&gt;interface{}&lt;/code&gt;) is actually closer to working with &lt;code&gt;Object&lt;/code&gt; variables in Java than with generics.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can assign anything to an &lt;code&gt;interface{}&lt;/code&gt; (like you can do with an &lt;code&gt;Object&lt;/code&gt; variable in Java).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But you should then &quot;cast&quot; or &quot;type assert&quot; back if you want to use the actual type you stored there (same that you need to do with &lt;code&gt;Object&lt;/code&gt; variables in Java).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Generics in Java are quite different, since they allow you to keep type checking at compile time. The different is precisely that you don't need to resort to reflection or type switches if you work with Generics.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can read more about Java generics here:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/generics/&quot; rel=&quot;noreferrer&quot;&gt;https://docs.oracle.com/javase/tutorial/java/generics/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And then follow this and the next 2 or 3 steps of the Go tour here for more on how the empty interface works:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://tour.golang.org/methods/14&quot; rel=&quot;noreferrer&quot;&gt;https://tour.golang.org/methods/14&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastEditorUserId=""4907630"" LastEditDate=""2017-07-18T16:18:55.773"" LastActivityDate=""2017-07-18T16:18:55.773"" CommentCount=""5"" />
",45172168
45177878,"45177878      <row Id=""45177878"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45179938"" PostTypeId=""2"" ParentId=""45177878"" CreationDate=""2017-07-19T02:22:49.117"" Score=""4"" Body=""&lt;p&gt;If you are converting your &lt;code&gt;byt&lt;/code&gt; to &lt;code&gt;map[string]interfaec{}&lt;/code&gt; the default value of the number will be &lt;code&gt;float64&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main(){&#xA;    byt := []byte(`{&quot;status&quot;: &quot;USER_MOVED_LEFT&quot;, &quot;id&quot;:1, &quot;x&quot;:5, &quot;y&quot;:3}`)&#xA;    var dat map[string]interface{}&#xA;    if err := json.Unmarshal(byt, &amp;amp;dat); err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    fmt.Println(reflect.TypeOf(dat[&quot;id&quot;])) // print the type of value&#xA;    num := dat[&quot;id&quot;].(float64)&#xA;    fmt.Println(num)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But you can also change this behavior by converting your &lt;code&gt;byt&lt;/code&gt; which is your data to a &lt;code&gt;struct&lt;/code&gt; like this :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type myStruct struct {&#xA;    Status string&#xA;    Id     int&#xA;    x      int&#xA;    y      int&#xA;}&#xA;&#xA;func main() {&#xA;    byt := []byte(`{&quot;status&quot;: &quot;USER_MOVED_LEFT&quot;, &quot;id&quot;:1, &quot;x&quot;:5, &quot;y&quot;:3}`)&#xA;    dat := myStruct{}&#xA;    if err := json.Unmarshal(byt, &amp;amp;dat); err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    fmt.Println(reflect.TypeOf(dat.Id))&#xA;    fmt.Printf(&quot;%+v\n&quot;, dat.Id)&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2652524"" LastEditorUserId=""2652524"" LastEditDate=""2017-07-19T13:43:14.070"" LastActivityDate=""2017-07-19T13:43:14.070"" CommentCount=""0"" />
",45179938
45180082,"45180082      <row Id=""45180082"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45182039"" PostTypeId=""2"" ParentId=""45180082"" CreationDate=""2017-07-19T05:58:17.487"" Score=""6"" Body=""&lt;p&gt;It is explained in the Go os package source code comments.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, this is safe:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;os&quot;&#xA;&#xA;func main() {&#xA;    f, err := os.Create(&quot;/tmp/atestfile&quot;)&#xA;    if err != nil {&#xA;        *f = os.File{}&#xA;    }&#xA;    // finalizer runs&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Package os&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go/src/os/types.go:&#xA;&#xA;// File represents an open file descriptor.&#xA;type File struct {&#xA;  *file // os specific&#xA;}&#xA;&#xA;go/src/os/file_plan9.go:&#xA;&#xA;// file is the real representation of *File.&#xA;// The extra level of indirection ensures that no clients of os&#xA;// can overwrite this data, which could cause the finalizer&#xA;// to close the wrong file descriptor.&#xA;type file struct {&#xA;  fd      int&#xA;  name    string&#xA;  dirinfo *dirInfo // nil unless directory being read&#xA;}&#xA;&#xA;go/src/os/file_unix.go:&#xA;&#xA;// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris&#xA;&#xA;// file is the real representation of *File.&#xA;// The extra level of indirection ensures that no clients of os&#xA;// can overwrite this data, which could cause the finalizer&#xA;// to close the wrong file descriptor.&#xA;type file struct {&#xA;  pfd      poll.FD&#xA;  name     string&#xA;  dirinfo  *dirInfo // nil unless directory being read&#xA;  nonblock bool     // whether we set nonblocking mode&#xA;}&#xA;&#xA;go/src/os/file_windows.go:&#xA;&#xA;// file is the real representation of *File.&#xA;// The extra level of indirection ensures that no clients of os&#xA;// can overwrite this data, which could cause the finalizer&#xA;// to close the wrong file descriptor.&#xA;type file struct {&#xA;  pfd     poll.FD&#xA;  name    string&#xA;  dirinfo *dirInfo // nil unless directory being read&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-07-19T07:10:36.337"" LastActivityDate=""2017-07-19T07:10:36.337"" CommentCount=""0"" />
",45182039
45183253,"45183253      <row Id=""45183253"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45184001"" PostTypeId=""2"" ParentId=""45183253"" CreationDate=""2017-07-19T07:40:57.933"" Score=""3"" Body=""&lt;p&gt;&lt;code&gt;os.Stdin&lt;/code&gt; is an exported variable of the &lt;a href=&quot;https://golang.org/pkg/os/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; package, it is of type &lt;a href=&quot;https://golang.org/pkg/os/#File&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;*os.File&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may call &lt;a href=&quot;https://golang.org/pkg/os/#File.Stat&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;File.Stat()&lt;/code&gt;&lt;/a&gt; on it to see if it's available and also to get additional info about it (e.g. if it is being piped or its source is a terminal):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if _, err := os.Stdin.Stat(); err != nil {&#xA;    fmt.Println(&quot;Stdin not available:&quot;, err)&#xA;} else {&#xA;    fmt.Println(&quot;Stdin available.&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Let's see an example when it's not available. It won't be if we close it first e.g. with the &lt;a href=&quot;https://golang.org/pkg/os/#File.Close&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;File.Close()&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Println(&quot;Closing:&quot;, os.Stdin.Close())&#xA;&#xA;if _, err := os.Stdin.Stat(); err != nil {&#xA;    fmt.Println(&quot;Stdin not available:&quot;, err)&#xA;} else {&#xA;    fmt.Println(&quot;Stdin available.&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/r_R5MAWNqi&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Stdin available.&#xA;Closing: &amp;lt;nil&amp;gt;&#xA;Stdin not available: stat /dev/stdin: Bad file number&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also check related question: &lt;a href=&quot;https://stackoverflow.com/questions/22744443/check-if-there-is-something-to-read-on-stdin-in-golang&quot;&gt;Check if there is something to read on STDIN in Golang&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastActivityDate=""2017-07-19T07:40:57.933"" CommentCount=""6"" />
",45184001
45151679,"45151679      <row Id=""45151679"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45185777"" PostTypeId=""2"" ParentId=""45151679"" CreationDate=""2017-07-19T09:03:08.237"" Score=""0"" Body=""&lt;p&gt;I got answer here: &lt;a href=&quot;https://github.com/vmware/govmomi/issues/790&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/vmware/govmomi/issues/790&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Working code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;spec := types.VirtualMachineConfigSpec{}&#xA;config := &amp;amp;types.VirtualDeviceConfigSpec{&#xA;    Device:    disk,&#xA;    Operation: types.VirtualDeviceConfigSpecOperationAdd,&#xA;}&#xA;spec.DeviceChange = append(spec.DeviceChange, config)&#xA;&#xA;result, err := vm.Reconfigure(ctx, spec)&#xA;if err != nil {&#xA;    log.Fatal(fmt.Sprintf(&quot;err: %s&quot;, err.Error()))&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4337531"" LastActivityDate=""2017-07-19T09:03:08.237"" CommentCount=""0"" />
",45185777
45181087,"45181087      <row Id=""45181087"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45186174"" PostTypeId=""2"" ParentId=""45181087"" CreationDate=""2017-07-19T09:19:03.463"" Score=""1"" Body=""&lt;h1&gt;Correctness&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;As discussed in the comment section, there are a family of string matching algorithms, which normally categorized into single pattern and multiple pattern matching algorithm. In your case it belongs to single pattern string matching problem. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;From my knowledge, the most well-known algorithm is KMP algorithm which uses dynamic programming, and an alternative named Rabin-Karp's algorithm which uses rolling hash technique to speed up the process. Both runs in &lt;code&gt;O(max(a,b))&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, your code is not very alike to these algorithm's normal implementation, at least to my experience. Therefore I suspect the correctness of your code at the first place. You can try cases like &lt;code&gt;a = {1, 2, 1, 2, 1}, b { 1, 1, 2, 2, 1, 2, 1 }&lt;/code&gt; to see it is not giving correct result.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Therefore you can&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Abandon current algorithm and learn those standard one, implement them&lt;/li&gt;&#xA;&lt;li&gt;Outline the logic and sketch a proof of your current algorithm, compared it with the logic behind those standard algorithms to verify its correctness&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;I will leave this part to you&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;Complexity&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;To directly answer your OP: &lt;/p&gt;&#xA;&#xA;&lt;p&gt;No, &lt;code&gt;O(max(a,b))&lt;/code&gt; is the optimal you can achieve in this problem, which is also the complexity of the standard known algorithms mentioned above.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My understanding is that, it actually makes sense as at worst case, you HAVE TO read each character of the longer string at least 1 time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your current algorithm is also &lt;code&gt;O(b)&lt;/code&gt; clearly, as you loop using &lt;code&gt;i&lt;/code&gt; from 0 to length of &lt;code&gt;b&lt;/code&gt;, and no matter which condition you fall into &lt;code&gt;i&lt;/code&gt; will increase by 1, giving total &lt;code&gt;O(b)&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Therefore complexity is actually not the problem, the correctness is the problem.&lt;/p&gt;&#xA;"" OwnerUserId=""2185825"" LastActivityDate=""2017-07-19T09:19:03.463"" CommentCount=""0"" />
",45186174
45189605,"45189605      <row Id=""45189605"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45189658"" PostTypeId=""2"" ParentId=""45189605"" CreationDate=""2017-07-19T11:48:47.623"" Score=""4"" Body=""&lt;p&gt;Embedded types are (unnamed) fields, referred to by the unqualified type name.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Struct_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: Struct types:&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;A field declared with a type but no explicit field name is an &lt;em&gt;anonymous field&lt;/em&gt;, also called an &lt;em&gt;embedded&lt;/em&gt; field or an embedding of the type in the struct. An embedded type must be specified as a type name &lt;code&gt;T&lt;/code&gt; or as a pointer to a non-interface type name &lt;code&gt;*T&lt;/code&gt;, and &lt;code&gt;T&lt;/code&gt; itself may not be a pointer type. &lt;strong&gt;The unqualified type name acts as the field name.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So try:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;e := ErrorValue{NamedValue: NamedValue{Name: &quot;fine&quot;, Value: 33}, Error: err}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also works if you omit the field names in the composite literal:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;e := ErrorValue{NamedValue{&quot;fine&quot;, 33}, err}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Try the examples on the &lt;a href=&quot;https://play.golang.org/p/Nn9Myd3nb5&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-19T11:53:48.627"" LastActivityDate=""2017-07-19T11:53:48.627"" CommentCount=""0"" />
",45189658
45195127,"45195127      <row Id=""45195127"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45195333"" PostTypeId=""2"" ParentId=""45195127"" CreationDate=""2017-07-19T15:44:28.297"" Score=""2"" Body=""&lt;p&gt;Turn &lt;code&gt;result&lt;/code&gt; into an array of &lt;code&gt;*Volume&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;result := []*Volume{}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and then append new &lt;code&gt;Volume&lt;/code&gt; records:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;result = append(result, &amp;amp;Volume{Id: id,Name:name,Description: description})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and in the end use &lt;code&gt;Marshal(result)&lt;/code&gt; to get the JSON result.&lt;/p&gt;&#xA;"" OwnerUserId=""2350684"" LastActivityDate=""2017-07-19T15:44:28.297"" CommentCount=""1"" />
",45195333
45196950,"45196950      <row Id=""45196950"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45197671"" PostTypeId=""2"" ParentId=""45196950"" CreationDate=""2017-07-19T17:50:23.107"" Score=""1"" Body=""&lt;p&gt;I would have had the same assumptions you did, and browsing the source, it looks like it should work as you described. You might try debugging and stepping through it, particularly the &lt;code&gt;New&lt;/code&gt; method for the store you're using (e.g. &lt;a href=&quot;https://github.com/gorilla/sessions/blob/master/store.go#L189&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;FilesystemStore.New&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/boj/redistore/blob/v1.2/redistore.go#L232&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;RediStore.New&lt;/code&gt;&lt;/a&gt;). If that method successfully reads the cookie and finds the session in the store, it should set &lt;code&gt;IsNew = false&lt;/code&gt;, according to the source.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that just checking the session ID is not a good way of validating this behavior. If you look at the source, it decodes the session ID from the cookie, &lt;em&gt;then&lt;/em&gt; tries to look that up in the backing store. If the lookup fails, then the session ID will match, but &lt;code&gt;IsNew&lt;/code&gt; will be &lt;code&gt;true&lt;/code&gt; and there won't be any values in the session. Make sure you're setting some value in the session and check for that instead of the session ID. The behavior is different for the &lt;code&gt;CookieStore&lt;/code&gt; since it stores the session data in the cookie itself.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-19T17:50:23.107"" CommentCount=""2"" />
",45197671
45196147,"45196147      <row Id=""45196147"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45197769"" PostTypeId=""2"" ParentId=""45196147"" CreationDate=""2017-07-19T17:55:02.140"" Score=""0"" Body=""&lt;p&gt;The problem I am seeing , which I may be incorrect, you are creating tokenAuth for each user that is logging in. There should be one instance of tokenAuth and you encode and decode using that instance. I believe the sign key should be the same for all the users, so you can verify from the tokenAuth instance. You might also want to look into signing it with RS256, because of issues in the past with HS256.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://auth0.com/blog/brute-forcing-hs256-is-possible-the-importance-of-using-strong-keys-to-sign-jwts/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://auth0.com/blog/brute-forcing-hs256-is-possible-the-importance-of-using-strong-keys-to-sign-jwts/&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4807063"" LastEditorUserId=""4807063"" LastEditDate=""2017-07-19T18:02:19.737"" LastActivityDate=""2017-07-19T18:02:19.737"" CommentCount=""0"" />
",45197769
45200078,"45200078      <row Id=""45200078"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45200160"" PostTypeId=""2"" ParentId=""45200078"" CreationDate=""2017-07-19T20:11:30.513"" Score=""4"" Body=""&lt;p&gt;It would be&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(*x.Bar)[0]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You use parentheses to change the precedence of operators: &lt;code&gt;[]&lt;/code&gt; has a higher precedence than &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""251311"" LastActivityDate=""2017-07-19T20:11:30.513"" CommentCount=""0"" />
",45200160
45200429,"45200429      <row Id=""45200429"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45200690"" PostTypeId=""2"" ParentId=""45200429"" CreationDate=""2017-07-19T20:45:27.280"" Score=""3"" Body=""&lt;p&gt;The definitive section is &lt;a href=&quot;https://golang.org/ref/spec#Primary_expressions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Primary Expressions&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Primary expressions are the operands for unary and binary expressions.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;It goes on to define primary expressions, but basically, this includes slice expressions, meaning that the slice expression &lt;code&gt;a[0]&lt;/code&gt; is the operand for the unary operator &lt;code&gt;*&lt;/code&gt;. A special case was made for pointers to arrays (see below).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;According to &lt;a href=&quot;https://golang.org/ref/spec#Address_operators&quot; rel=&quot;nofollow noreferrer&quot;&gt;Address Operators&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;For an operand x of type T, the address operation &amp;amp;x generates a pointer of type *T to x. The operand must be addressable, that is, either a variable, pointer indirection, or slice indexing operation; or a field selector of an addressable struct operand; or an array indexing operation of an addressable array. As an exception to the addressability requirement, x may also be a (possibly parenthesized) composite literal. If the evaluation of x would cause a run-time panic, then the evaluation of &amp;amp;x does too.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;For an operand x of pointer type *T, the pointer indirection *x denotes the variable of type T pointed to by x. If x is nil, an attempt to evaluate *x will cause a run-time panic.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;This &lt;em&gt;implies&lt;/em&gt;, but does not explicitly state, that a slice indexing expression or field selector expression to the right of the pointer indirection operator is evaluated as a whole before the indirection is evaluated.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, pointer indirection (&lt;code&gt;*x&lt;/code&gt;) &lt;em&gt;is&lt;/em&gt; an operator, specifically, an &lt;a href=&quot;https://golang.org/ref/spec#Address_operators&quot; rel=&quot;nofollow noreferrer&quot;&gt;Address Operator&lt;/a&gt;. The slice index reference is &lt;em&gt;not&lt;/em&gt; an operator but rather an &lt;a href=&quot;https://golang.org/ref/spec#Index_expressions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Index &lt;em&gt;Expression&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;For a of pointer to array type:&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;code&gt;a[x]&lt;/code&gt; is shorthand for &lt;code&gt;(*a)[x]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Though the same cannot be said of pointers to slice types.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastEditorUserId=""7426"" LastEditDate=""2017-07-20T13:18:45.170"" LastActivityDate=""2017-07-20T13:18:45.170"" CommentCount=""12"" />
",45200690
45201570,"45201570      <row Id=""45201570"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45201659"" PostTypeId=""2"" ParentId=""45201570"" CreationDate=""2017-07-19T21:52:02.217"" Score=""5"" Body=""&lt;p&gt;One common way to distinguish between the zero value and an unset value is with pointers:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Test struct {&#xA;    FieldInt    *int&#xA;    FieldBool   *bool&#xA;    FieldString *string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This won't be an appropriate solution for every situation, though, but since you haven't told us your precise situation, I offer this simply as one possible solution.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-07-19T21:52:02.217"" CommentCount=""5"" />
",45201659
45203052,"45203052      <row Id=""45203052"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45203310"" PostTypeId=""2"" ParentId=""45203052"" CreationDate=""2017-07-20T00:43:49.640"" Score=""4"" Body=""&lt;p&gt;In your example there are no real differences as you are Sprintf to simply concaternate strings. That is indeed something which can be solved more easily by using the '+' operator.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Take the following example, where you want to print a clear error message like &quot;Product with ID '42' could not be found.&quot;. How does that look with your bottom approach?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;productID := 42;&#xA;myString := &quot;Product with ID '&quot; + productID + &quot;' could not be found.&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This would give an error (mismatched types string and int), because Go does not have support for concatenate different types together. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;So you would have to transform the type to a string first.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;productID := 42&#xA;myString := &quot;Product with ID '&quot; + strconv.Itoa(productID) + &quot;' could not be found.&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And, this you would have to do for every single data type other than strings.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;fmt&lt;/code&gt; package in Go and similar formatting packages in almost any other language solve this by helping you with the conversions and keeping your strings clear of mass '+' operators.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is how the example would look like using &lt;code&gt;fmt&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;product := 42&#xA;myString := fmt.Sprintf(&quot;Product with ID '%d' could not be found.&quot;, product)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here &lt;code&gt;%d&lt;/code&gt; is the formatting verb for 'print the argument as a number'. See &lt;a href=&quot;https://golang.org/pkg/fmt/#hdr-Printing&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/fmt/#hdr-Printing&lt;/a&gt; the various other ways of printing other types. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Compared to concatenating &lt;code&gt;fmt&lt;/code&gt; allows you to write your strings in a clear way, separating the template/text from the variables. And, it simplifies printing data types other than strings a lot.&lt;/p&gt;&#xA;"" OwnerUserId=""1716567"" LastActivityDate=""2017-07-20T00:43:49.640"" CommentCount=""0"" />
",45203310
45177958,"45177958      <row Id=""45177958"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45204797"" PostTypeId=""2"" ParentId=""45177958"" CreationDate=""2017-07-20T03:49:38.250"" Score=""1"" Body=""&lt;p&gt;Your problem is twofold:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Improperly configured &lt;code&gt;libsecp256k1&lt;/code&gt; package&lt;/li&gt;&#xA;&lt;li&gt;Your C compiler not searching &lt;code&gt;/usr/local&lt;/code&gt; directories for installed headers/libs&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2&gt;Fixing the improperly libsecp256k1 configured package&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Your &quot;undefined symbols&quot; issue when it comes to linking C libraries sometimes points to an improperly configured package (in the sense of an Autotools package or a CMake package, not a Go package). Running &lt;code&gt;./configure --help&lt;/code&gt;, I see there is an option named &lt;code&gt;--enable-module-recovery&lt;/code&gt;. Judging by names like &lt;code&gt;_secp256k1_ecdsa_sign_&lt;strong&gt;recoverable&lt;/strong&gt;&lt;/code&gt; and &lt;code&gt;_secp256k1_ecdsa_&lt;strong&gt;recover&lt;/strong&gt;&lt;/code&gt;, you need to add that option when configuring, meaning instead of executing the simpler &lt;code&gt;./configure&lt;/code&gt;, you should execute this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;./configure --enable-module-recovery&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;Is the C compiler broken?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Since the &lt;code&gt;secp256k1.h&lt;/code&gt; header file isn't found in &lt;code&gt;/usr/local/include&lt;/code&gt;, despite the fact that the header file most definitely exists after &lt;code&gt;sudo make install&lt;/code&gt; is finished, it means &lt;a href=&quot;https://stackoverflow.com/q/23905661/539810&quot;&gt;your compiler doesn't search &lt;code&gt;/usr/local&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Barring any fixes in the linked question, you can work around the issue by altering the source of the Go package as needed to add/modify the &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; used when dealing with &lt;code&gt;import &quot;C&quot;&lt;/code&gt; statements like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// #cgo CFLAGS: -I/usr/local/include&#xA;// #cgo LDFLAGS: -L/usr/local/lib -lsecp256k1&#xA;// #include &amp;lt;secp256k1.h&amp;gt;&#xA;import &quot;C&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you have &lt;code&gt;pkg-config&lt;/code&gt; installed, you can use that instead of setting &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; manually:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Export the &lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt; environment variable with a custom set of paths. Because no prefix (i.e. directory serving as the install root) was specified, &lt;code&gt;/usr/local&lt;/code&gt; is assumed, meaning &lt;code&gt;/usr/local/include&lt;/code&gt; will contain headers and &lt;code&gt;/usr/local/lib&lt;/code&gt; will contain libraries. This means you need to export &lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt; on your command line as in &lt;code&gt;export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig&lt;/code&gt;. The default setting of &lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt; when unset includes &lt;code&gt;/usr/lib/pkgconfig&lt;/code&gt; and &lt;code&gt;/usr/share/pkgconfig&lt;/code&gt; in that order on Linux and are specified as a fallback for other packages that might be used, though it may not be necessary in this case. The default set of paths may differ on OS X, so consult your &lt;code&gt;pkg-config&lt;/code&gt; man page for reference.&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;code&gt;// #cgo pkg-config: libsecp256k1&lt;/code&gt;, and &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; will be set as necessary without you needing to do anything to them. Since not all systems have &lt;code&gt;pkg-config&lt;/code&gt; installed, relying on this is perhaps a bad idea if you want a package to remain portable. Then again, I think it'd be preferable to the mess you dealt with since &lt;code&gt;pkg-config&lt;/code&gt; simply wouldn't be found.&lt;/li&gt;&#xA;&lt;li&gt;Change to the upvote directory and type &lt;code&gt;make&lt;/code&gt; to build a working upvote binary.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2&gt;Additional customization&lt;/h2&gt;&#xA;&#xA;&lt;h3&gt;Custom prefix&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;If you use something other than &lt;code&gt;/usr/local&lt;/code&gt; as your prefix (e.g. &lt;code&gt;./configure --enable-module-recovery --prefix=/opt/libsecp256k1&lt;/code&gt;), then you'll need to adjust some things accordingly:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// #cgo CFLAGS: -I/opt/libsecp256k1/include&#xA;// #cgo LDFLAGS: -L/opt/libsecp256k1/lib -lsecp256k1&#xA;// #include &quot;secp256k1.h&quot;&#xA;import &quot;C&quot;&#xA;&#xA;// or just use pkg-config and export the PKG_CONFIG_PATH environment&#xA;// variable containing the following paths:&#xA;//   /opt/libsecp256k1/lib/pkgconfig&#xA;//   /opt/libsecp256k1/share/pkgconfig&#xA;//   /usr/lib/pkgconfig&#xA;//   /usr/share/pkgconfig&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You'll also need to modify the provided Makefile in the upvote directory to set the runtime path of the binary that gets built, else &lt;code&gt;libsecp256k1.0.dylib&lt;/code&gt; will not be found:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# If you copy and paste this, replace the spaces in front of `go build`&#xA;# with a single horizontal tab character, else `make` will fail.&#xA;#&#xA;# Note that the &quot;ldflags&quot; specified are for the Go linker (go tool link),&#xA;# not the system's linker (ld).&#xA;build:&#xA;    go build -ldflags=&quot;-r /opt/libsecp256k1/lib&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For more information about working with cgo, check out the following resources:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://blog.golang.org/c-go-cgo&quot; rel=&quot;nofollow noreferrer&quot;&gt;&quot;C? Go? Cgo!&quot; introduction to cgo on The Go Blog&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://golang.org/cmd/cgo/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cgo documentation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""539810"" LastEditorUserId=""539810"" LastEditDate=""2017-07-20T03:57:00.583"" LastActivityDate=""2017-07-20T03:57:00.583"" CommentCount=""0"" />
",45204797
45204814,"45204814      <row Id=""45204814"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45205399"" PostTypeId=""2"" ParentId=""45204814"" CreationDate=""2017-07-20T04:48:04.220"" Score=""1"" Body=""&lt;p&gt;Welcome to Go, happy learning.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You're doing good, you can improve your program many ways (such as json decoder, less no of chan, etc). Following is one of the approach. Execution time is between 352-446ms (take it with grain of salt, since network call is involved in your code. Might vary based on server response time).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your updated code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;    &quot;net/http&quot;&#xA;    &quot;sync&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;type user struct {&#xA;    User userData `json:&quot;user&quot;`&#xA;}&#xA;&#xA;type userData struct {&#xA;    Followers count `json:&quot;followed_by&quot;`&#xA;}&#xA;&#xA;type count struct {&#xA;    Count int `json:&quot;count&quot;`&#xA;}&#xA;&#xA;func getFollowerCount(username string, result chan&amp;lt;- int, wg *sync.WaitGroup) {&#xA;    defer wg.Done()&#xA;    reqURL := &quot;https://www.instagram.com/&quot; + username + &quot;/?__a=1&quot;&#xA;    resp, err := http.Get(reqURL)&#xA;    if err != nil {&#xA;        log.Println(err)&#xA;        return&#xA;    }&#xA;    defer resp.Body.Close()&#xA;&#xA;    var u user&#xA;    if err := json.NewDecoder(resp.Body).Decode(&amp;amp;u); err != nil {&#xA;        log.Println(err)&#xA;        return&#xA;    }&#xA;    result &amp;lt;- u.User.Followers.Count&#xA;}&#xA;&#xA;func execute(users []string, result chan&amp;lt;- int) {&#xA;    wg := &amp;amp;sync.WaitGroup{}&#xA;    for _, username := range users {&#xA;        wg.Add(1)&#xA;        go getFollowerCount(username, result, wg)&#xA;    }&#xA;    wg.Wait()&#xA;    result &amp;lt;- -1&#xA;}&#xA;&#xA;func main() {&#xA;    start := time.Now()&#xA;    fmt.Println(&quot;STARTING UP&quot;)&#xA;    usrs := []string{&quot;kanywest&quot;, &quot;kimkardashian&quot;, &quot;groovyq&quot;, &quot;kendricklamar&quot;, &quot;barackobama&quot;, &quot;asaprocky&quot;, &quot;champagnepapi&quot;, &quot;eminem&quot;, &quot;drdre&quot;, &quot;g_eazy&quot;, &quot;skrillex&quot;}&#xA;&#xA;    result := make(chan int)&#xA;    go execute(usrs, result)&#xA;&#xA;    for v := range result {&#xA;        if v == -1 {&#xA;            break&#xA;        }&#xA;        fmt.Println(v)&#xA;    }&#xA;&#xA;    elapsed := time.Since(start)&#xA;    fmt.Println(&quot;runtime:&quot;, elapsed)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-07-20T04:48:04.220"" CommentCount=""0"" />
",45205399
45205475,"45205475      <row Id=""45205475"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45205576"" PostTypeId=""2"" ParentId=""45205475"" CreationDate=""2017-07-20T05:03:39.393"" Score=""2"" Body=""&lt;p&gt;The examples would me in the mariadb docs. What you are missing is the &lt;code&gt;on&lt;/code&gt; clause that tells mariadb how to join the 2 tables. You cannot use the old-school join syntax with &lt;code&gt;left join&lt;/code&gt; putting the join criteria into the &lt;code&gt;where&lt;/code&gt; clause.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;SELECT * FROM joke&#xA;LEFT JOIN jokevote ON joke.user_id=jokevote.user_id&#xA;WHERE jokevote.vote=?&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5389997"" LastActivityDate=""2017-07-20T05:03:39.393"" CommentCount=""2"" />
",45205576
45204275,"45204275      <row Id=""45204275"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45208227"" PostTypeId=""2"" ParentId=""45204275"" CreationDate=""2017-07-20T07:32:21.677"" Score=""2"" Body=""&lt;p&gt;The line&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;a = append(a[:i], a[i+1:]...)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;creates a new slice by removing the item at position &lt;code&gt;i&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt;, by combining the items from 0 to i (not included), and from i+1 to the end.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your second question is what is the purpose of &lt;code&gt;...&lt;/code&gt;. &lt;code&gt;append&lt;/code&gt; accepts a slice as first argument, and an unlimited number of arguments, all with a type &lt;a href=&quot;https://golang.org/ref/spec#Assignability&quot; rel=&quot;nofollow noreferrer&quot;&gt;assignable&lt;/a&gt; to the type of its elements.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/builtin/#append&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt; is defined as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func append(slice []Type, elems ...Type) []Type&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Writing &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;a = append(a[:i], a[i+1:]...)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;is equivalent as writing&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;a = append(a[:i], a[i+1], a[i+2], a[i+3], a[i+4]) //and so on, until the end of the slice.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using &lt;code&gt;a[i+1:]...&lt;/code&gt; is basically a shorthand syntax, as the Go spec describes in &lt;a href=&quot;https://golang.org/ref/spec#Passing_arguments_to_..._parameters&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/ref/spec#Passing_arguments_to_..._parameters&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;If f is variadic with a final parameter p of type ...T, then within f the type of p is equivalent to type []T. If f is invoked with no actual arguments for p, the value passed to p is nil. Otherwise, the value passed is a new slice of type []T with a new underlying array whose successive elements are the actual arguments, which all must be assignable to T&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/cqeMkemn62&quot; rel=&quot;nofollow noreferrer&quot;&gt;Playground&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""205039"" LastActivityDate=""2017-07-20T07:32:21.677"" CommentCount=""0"" />
",45208227
45207920,"45207920      <row Id=""45207920"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45209033"" PostTypeId=""2"" ParentId=""45207920"" CreationDate=""2017-07-20T08:11:09.563"" Score=""2"" Body=""&lt;p&gt;It's called &lt;em&gt;conversion&lt;/em&gt; in Go (not casting), and this is covered in &lt;a href=&quot;https://golang.org/ref/spec#Conversions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: Conversions:&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Specific rules apply to (non-constant) conversions between numeric types or to and from a string type. These conversions may change the representation of &lt;code&gt;x&lt;/code&gt; and incur a run-time cost. All other conversions only change the type but not the representation of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So generally converting does not make a copy, only changes the type. Converting to / from &lt;code&gt;string&lt;/code&gt; usually does, as &lt;code&gt;string&lt;/code&gt; values are immutable, and for example if converting a &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;[]byte&lt;/code&gt; would not make a copy, you could change the content of the &lt;code&gt;string&lt;/code&gt; by changing elements of the resulting byte slice.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See related question: &lt;a href=&quot;https://stackoverflow.com/questions/32253768/does-convertion-between-alias-types-in-go-create-copies/32253871#32253871&quot;&gt;Does convertion between alias types in Go create copies?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are some exceptions (compiler optimizations) when converting to / from &lt;code&gt;string&lt;/code&gt; does not make a copy, for details see &lt;a href=&quot;https://stackoverflow.com/questions/43470284/golang-bytestring-vs-bytestring/43470344#43470344&quot;&gt;golang: []byte(string) vs []byte(*string)&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you already have your JSON content as a &lt;code&gt;string&lt;/code&gt; value which you want to unmarshal, you should not convert it to &lt;code&gt;[]byte&lt;/code&gt; just for the sake of unmarshaling. Instead use &lt;a href=&quot;https://golang.org/pkg/strings/#NewReader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;strings.NewReader()&lt;/code&gt;&lt;/a&gt; to obtain an &lt;a href=&quot;https://golang.org/pkg/io/#Reader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.Reader&lt;/code&gt;&lt;/a&gt; which reads from the passed &lt;code&gt;string&lt;/code&gt; value, and pass this reader to &lt;a href=&quot;https://golang.org/pkg/encoding/json/#NewDecoder&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json.NewDecoder()&lt;/code&gt;&lt;/a&gt;, so you can unmarshal without having to make a copy of your big input JSON string.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is how it could look like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;input := &quot;BIG JSON INPUT&quot;&#xA;dec := json.NewDecoder(strings.NewReader(input))&#xA;&#xA;var result YourResultType&#xA;if err := dec.Decode(&amp;amp;result); err != nil {&#xA;    // Handle error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also note that this solution can further be optimized if the big JSON string is read from an &lt;code&gt;io.Reader&lt;/code&gt;, in which case you can completely omit reading it first, just pass that to &lt;code&gt;json.NewDecoder()&lt;/code&gt; directly, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;dec := json.NewDecoder(jsonSource)&#xA;&#xA;var result YourResultType&#xA;if err := dec.Decode(&amp;amp;result); err != nil {&#xA;    // Handle error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-20T09:08:20.753"" LastActivityDate=""2017-07-20T09:08:20.753"" CommentCount=""3"" />
",45209033
45208178,"45208178      <row Id=""45208178"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45209909"" PostTypeId=""2"" ParentId=""45208178"" CreationDate=""2017-07-20T08:54:20.657"" Score=""0"" Body=""&lt;p&gt;The key point in this quote is &lt;code&gt;method set consistency&lt;/code&gt;. Types T and *T are different types in Go and may have different method sets (explanation is also in the &lt;a href=&quot;https://golang.org/doc/faq#different_method_sets&quot; rel=&quot;nofollow noreferrer&quot;&gt;FAQ&lt;/a&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One of the reasons it's important, is because interface satisfaction is implicit in Go. So if some of your type's methods have a pointer receiver, while others don't, this can result in a situation, when you expect that your object satisfies some interface, but now that depends on whether you are using it's pointer or value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So it's good practice to avoid this kind of confusion.&lt;/p&gt;&#xA;"" OwnerUserId=""4283005"" LastEditorUserId=""4283005"" LastEditDate=""2017-07-20T12:21:02.037"" LastActivityDate=""2017-07-20T12:21:02.037"" CommentCount=""5"" />
",45209909
45185191,"45185191      <row Id=""45185191"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45210241"" PostTypeId=""2"" ParentId=""45185191"" CreationDate=""2017-07-20T09:09:24.233"" Score=""0"" Body=""&lt;p&gt;this was a bug in which is fixed in v6.4.6.&#xA;here's the relevant issue - &lt;a href=&quot;https://github.com/go-pg/pg/issues/583&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/go-pg/pg/issues/583&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""2140732"" LastActivityDate=""2017-07-20T09:09:24.233"" CommentCount=""0"" />
",45210241
45208654,"45208654      <row Id=""45208654"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45210683"" PostTypeId=""2"" ParentId=""45208654"" CreationDate=""2017-07-20T09:27:07.463"" Score=""1"" Body=""&lt;p&gt;&lt;code&gt;sqlx&lt;/code&gt; is just a wrapper around &lt;code&gt;database/sql&lt;/code&gt; package. The query you're trying to perform is driver specific. Thus, it depends on the driver you're using to connect to the MSSQL server. If you're using &lt;a href=&quot;https://github.com/denisenkom/go-mssqldb&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/denisenkom/go-mssqldb&lt;/a&gt;, based on &lt;a href=&quot;https://github.com/denisenkom/go-mssqldb/issues/78&quot; rel=&quot;nofollow noreferrer&quot;&gt;issue #78&lt;/a&gt;, you can try the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;rows, err := db.Queryx(`EXEC [SP_NAME] @Input, @Result OUTPUT; &#xA;          SELECT Result = @Result;`, sql.Named(&quot;Input&quot;, &quot;Some Text&quot;))&#xA;//do something with rows...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-07-20T09:27:07.463"" CommentCount=""0"" />
",45210683
45213365,"45213365      <row Id=""45213365"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45213441"" PostTypeId=""2"" ParentId=""45213365"" CreationDate=""2017-07-20T11:30:10.100"" Score=""2"" Body=""&lt;p&gt;You can only use &lt;a href=&quot;https://golang.org/ref/spec#Composite_literals&quot; rel=&quot;nofollow noreferrer&quot;&gt;composite literals&lt;/a&gt; to create values of struct types defined in another package if you use &lt;em&gt;keyed values&lt;/em&gt; in the literal, because then you are not required to provide initial values for all fields, and so you can leave out unexported fields (which only the declaring package can set / change).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the type is declared in the same package, you can set unexported fields too:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t := Thing{&#xA;    Name:           &quot;the name&quot;,&#xA;    someUnexported: 23,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But you can only provide initial values for exported fields if the type is declared in another package, which is not a surprise I guess:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t := otherpackage.Thing{&#xA;    Name: &quot;the name&quot;,&#xA;    // someUnexported will implicitly be its zero value&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you need values of the struct where the unexported fields have values other than the zero value of their types, the package itself must export some kind of constructor or initializer (or setter method), because from the outside (of the package), you can't change / set unexported fields.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See related question: &lt;a href=&quot;https://stackoverflow.com/questions/38369350/how-to-clone-a-structure-with-unexported-field/38370382#38370382&quot;&gt;How to clone a structure with unexported field?&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-20T11:41:32.030"" LastActivityDate=""2017-07-20T11:41:32.030"" CommentCount=""0"" />
",45213441
45214860,"45214860      <row Id=""45214860"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45215205"" PostTypeId=""2"" ParentId=""45214860"" CreationDate=""2017-07-20T12:46:31.697"" Score=""2"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;it is the fact that the response body is of type io.closer&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;No, it is not. Declaration of &lt;code&gt;Request.Body&lt;/code&gt; is at &lt;a href=&quot;https://golang.org/pkg/net/http/#Request&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;http.Request&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Body io.ReadCloser&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;Request.Body&lt;/code&gt; field is of type &lt;a href=&quot;https://golang.org/pkg/io/#ReadCloser&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.ReadCloser&lt;/code&gt;&lt;/a&gt;, it is both an &lt;a href=&quot;https://golang.org/pkg/io/#Reader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.Reader&lt;/code&gt;&lt;/a&gt; and an &lt;a href=&quot;https://golang.org/pkg/io/#Closer&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.Closer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since it is an &lt;code&gt;io.Reader&lt;/code&gt; (dynamic value of &lt;code&gt;Request.Body&lt;/code&gt; implements &lt;code&gt;io.Reader&lt;/code&gt;), you may use / pass it where an &lt;code&gt;io.Reader&lt;/code&gt; is required, e.g. to &lt;a href=&quot;https://golang.org/pkg/io/ioutil/#ReadAll&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;ioutil.ReadAll()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since it also implements &lt;code&gt;io.Closer&lt;/code&gt;, you can also pass it where &lt;code&gt;io.Closer&lt;/code&gt; is required, like your &lt;code&gt;convert()&lt;/code&gt; function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But inside convert the &lt;code&gt;closer&lt;/code&gt; param has static type &lt;code&gt;io.Closer&lt;/code&gt;, you can't use &lt;code&gt;closer&lt;/code&gt; where an &lt;code&gt;in.Reader&lt;/code&gt; is required. It might be (and in your case it is) that the dynamic type stored in &lt;code&gt;closer&lt;/code&gt; also implements &lt;code&gt;io.Reader&lt;/code&gt;, but there is no guarantee for this. Like in this example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type mycloser int&#xA;&#xA;func (mycloser) Close() error { return nil }&#xA;&#xA;func main() {&#xA;    var m io.Closer = mycloser(0)&#xA;    convert(m)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In the above example &lt;code&gt;closer&lt;/code&gt; inside &lt;code&gt;convert()&lt;/code&gt; will hold a value of type &lt;code&gt;mycloser&lt;/code&gt;, which truly does not implement &lt;code&gt;io.Reader&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If your &lt;code&gt;convert()&lt;/code&gt; function intends to treat its parameter also as an &lt;code&gt;io.Reader&lt;/code&gt;, the parameter type should be &lt;code&gt;io.ReadCloser&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func convert(rc io.ReadCloser) ([]byte, error) {&#xA;    body, err := ioutil.ReadAll(rc)&#xA;    if err != nil {&#xA;        return body, err&#xA;    }&#xA;    err = rc.Close()&#xA;    return body, err&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-20T13:03:22.253"" LastActivityDate=""2017-07-20T13:03:22.253"" CommentCount=""0"" />
",45215205
45209168,"45209168      <row Id=""45209168"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45216548"" PostTypeId=""2"" ParentId=""45209168"" CreationDate=""2017-07-20T13:43:19.717"" Score=""1"" Body=""&lt;p&gt;The server is closing the connection for some reason; the backend closed, timed out, etc. There's not much you can do except retry, just as if you had any other connection error. There is some discussion in a arelated issue (&lt;a href=&quot;https://golang.org/issue/18639&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/issue/18639&lt;/a&gt;) about retrying this automatically, but it generally looks like the client is working as intended. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;Response.Body.Close&lt;/code&gt; does not close a connection, otherwise it would defeat the purpose of http1.1 and http2 using persistent connections. Reading and closing the response body is how you allow the connection to be reused by the http client. &lt;/p&gt;&#xA;"" OwnerUserId=""32880"" LastActivityDate=""2017-07-20T13:43:19.717"" CommentCount=""1"" />
",45216548
45216349,"45216349      <row Id=""45216349"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45216989"" PostTypeId=""2"" ParentId=""45216349"" CreationDate=""2017-07-20T14:01:17.740"" Score=""4"" Body=""&lt;p&gt;No, that's the way to do it. You're basically doing a pivot, there's no way I know of to do that automagically. Given that you've done it in just a couple of lines of code, I don't see a problem with your solution.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since you're scanning into a variable per column, you don't actually need the &lt;code&gt;StructSingle&lt;/code&gt; type at all - you could just use two local &lt;code&gt;string&lt;/code&gt; variables, which would make it even simpler:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for rows.Next() {&#xA;    var col1, col2 string&#xA;    db.Scan(&amp;amp;col1, &amp;amp;col2)&#xA;&#xA;    s.Column1 = append(s.Column1, col1)&#xA;    s.Column2 = append(s.Column2, col2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And get rid of the &lt;code&gt;StructSingle&lt;/code&gt; type entirely.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-20T14:01:17.740"" CommentCount=""2"" />
",45216989
45214857,"45214857      <row Id=""45214857"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45217221"" PostTypeId=""2"" ParentId=""45214857"" CreationDate=""2017-07-20T14:11:11.957"" Score=""2"" Body=""&lt;p&gt;You are declaring &lt;code&gt;sq&lt;/code&gt; as a function, not a method. If you want to attach &lt;code&gt;sq&lt;/code&gt; to &lt;code&gt;MyFloat&lt;/code&gt;, you should declare it like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (f MyFloat) sq() string {&#xA;    return fmt.Sprintln(&quot;The square is: &quot;, f*f)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way you will be able to do &lt;code&gt;a.sq()&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1147580"" LastActivityDate=""2017-07-20T14:11:11.957"" CommentCount=""5"" />
",45217221
45216783,"45216783      <row Id=""45216783"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45217550"" PostTypeId=""2"" ParentId=""45216783"" CreationDate=""2017-07-20T14:24:36.340"" Score=""2"" Body=""&lt;p&gt;When you execute &quot;SELECT * FROM joke INNER JOIN jokevote&quot; you will get columns from both joke and jokevote tables. &#xA;Try to query &quot;SELECT joke.* FROM joke INNER JOIN jokevote&quot; to get only columns from joke table.&lt;/p&gt;&#xA;"" OwnerUserId=""4071273"" LastActivityDate=""2017-07-20T14:24:36.340"" CommentCount=""1"" />
",45217550
45221912,"45221912      <row Id=""45221912"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45226598"" PostTypeId=""2"" ParentId=""45221912"" CreationDate=""2017-07-20T23:13:44.003"" Score=""1"" Body=""&lt;p&gt;It seems you hit a subtle issue with the &lt;code&gt;append&lt;/code&gt; function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You should not be using &lt;code&gt;append&lt;/code&gt; to create new arrays as you are doing in your function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead, copy them and append the values to the copied array.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you replace your calls to &lt;code&gt;append&lt;/code&gt; to &lt;code&gt;copyAndAppend&lt;/code&gt; as defined here:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func copyAndAppend(i []int, vals ...int) []int {&#xA;    j := make([]int, len(i), len(i)+len(vals))&#xA;    copy(j, i)&#xA;    return append(j, vals...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your code seems to work correctly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See here for more details:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/35276022/unexpected-slice-append-behaviour&quot;&gt;unexpected slice append behaviour&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastEditorUserId=""4907630"" LastEditDate=""2017-07-20T23:43:10.193"" LastActivityDate=""2017-07-20T23:43:10.193"" CommentCount=""1"" />
",45226598
45222362,"45222362      <row Id=""45222362"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45227087"" PostTypeId=""2"" ParentId=""45222362"" CreationDate=""2017-07-21T00:20:47.333"" Score=""1"" Body=""&lt;p&gt;Unfortunately no, you can't recover from a call to os.Exit(). The documentation says that it exits immediately, and not even differed functions are called. I recommend to not use a package if it has an exit in it, as that is a pretty bad design.&lt;/p&gt;&#xA;"" OwnerUserId=""6398020"" LastActivityDate=""2017-07-21T00:20:47.333"" CommentCount=""0"" />
",45227087
45227703,"45227703      <row Id=""45227703"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45227818"" PostTypeId=""2"" ParentId=""45227703"" CreationDate=""2017-07-21T02:00:22.177"" Score=""1"" Body=""&lt;p&gt;It seems your server is using old codebase of gin. Just checked the gin commit history.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The method &lt;code&gt;SaveUploadedFile&lt;/code&gt; added &lt;a href=&quot;https://github.com/gin-gonic/gin/commit/93b3a0d7ec95c33dc327397ab1756c36853328ee&quot; rel=&quot;nofollow noreferrer&quot;&gt;5 days ago&lt;/a&gt;. So execute below command to pull the latest codebase on your server.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go get -u github.com/gin-gonic/gin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then compile it.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-07-21T02:00:22.177"" CommentCount=""7"" />
",45227818
45226991,"45226991      <row Id=""45226991"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45231694"" PostTypeId=""2"" ParentId=""45226991"" CreationDate=""2017-07-21T07:32:18.003"" Score=""4"" Body=""&lt;p&gt;To extend putu's answer, comparing the returned color model to the &quot;prepared&quot; models of the &lt;a href=&quot;https://golang.org/pkg/image/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;image&lt;/code&gt;&lt;/a&gt; package only works if one of those models is used, else all comparison will result in &lt;code&gt;false&lt;/code&gt;. Also it is quite inconvenient to list and compare to all possible models.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead to find out a talkative form of the color model, we may use this little trick: try to convert any color using the color model of the image. A concrete color model converts all color values (implementations) to the color type / implementation used by the image. Printing the type of the resulting color will tell you what you are looking for.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;col := color.RGBA{} // This is the &quot;any&quot; color we convert&#xA;var img image.Image&#xA;&#xA;img = &amp;amp;image.NRGBA{}&#xA;fmt.Printf(&quot;%T\n&quot;, img.ColorModel().Convert(col))&#xA;&#xA;img = &amp;amp;image.Gray16{}&#xA;fmt.Printf(&quot;%T\n&quot;, img.ColorModel().Convert(col))&#xA;&#xA;img = &amp;amp;image.NYCbCrA{}&#xA;fmt.Printf(&quot;%T\n&quot;, img.ColorModel().Convert(col))&#xA;&#xA;img = &amp;amp;image.Paletted{}&#xA;fmt.Printf(&quot;%T\n&quot;, img.ColorModel().Convert(col))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/nLpXPe-h4l&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;color.NRGBA&#xA;color.Gray16&#xA;color.NYCbCrA&#xA;&amp;lt;nil&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As can be seen, an image of type &lt;a href=&quot;https://golang.org/pkg/image/#NRGBA&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;*image.NRGBA&lt;/code&gt;&lt;/a&gt; models colors using &lt;a href=&quot;https://golang.org/pkg/image/color/#NRGBA&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;color.NRGBA&lt;/code&gt;&lt;/a&gt;, an image of type &lt;a href=&quot;https://golang.org/pkg/image/#Gray16&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;*image.Gray16&lt;/code&gt;&lt;/a&gt; models colors using &lt;a href=&quot;https://golang.org/pkg/image/color/#Gray16&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;color.Gray16&lt;/code&gt;&lt;/a&gt; etc. As a last example I used &lt;a href=&quot;https://golang.org/pkg/image/#Paletted&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;*image.Paletted&lt;/code&gt;&lt;/a&gt;, where the result was &lt;code&gt;nil&lt;/code&gt;, because the image's palette was empty.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To quickly fix the &lt;code&gt;nil&lt;/code&gt; palette, let's provide an initial palette:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;img = &amp;amp;image.Paletted{Palette: []color.Color{color.Gray16{}}}&#xA;fmt.Printf(&quot;%T\n&quot;, img.ColorModel().Convert(col))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now the output will be (try this on the &lt;a href=&quot;https://play.golang.org/p/N8MaWzDCc2&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;color.Gray16&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-21T07:50:04.347"" LastActivityDate=""2017-07-21T07:50:04.347"" CommentCount=""1"" />
",45231694
45233208,"45233208      <row Id=""45233208"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45233749"" PostTypeId=""2"" ParentId=""45233208"" CreationDate=""2017-07-21T09:14:42.407"" Score=""1"" Body=""&lt;p&gt;You don't need to call &lt;code&gt;http.ListenAndServeTLS&lt;/code&gt; on App Engine.  If you have your &lt;code&gt;app.yaml&lt;/code&gt; set up correctly, traffic will be served over SSL for you.  A minimal App Engine app might be something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;net/http&quot;&#xA;)&#xA;&#xA;func init() {&#xA;    http.HandleFunc(&quot;/&quot;, handler)&#xA;}&#xA;&#xA;func handler(w http.ResponseWriter, r *http.Request) {&#xA;    fmt.Fprint(w, &quot;Hi&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1427098"" LastEditorUserId=""1427098"" LastEditDate=""2017-07-21T09:20:00.503"" LastActivityDate=""2017-07-21T09:20:00.503"" CommentCount=""1"" />
",45233749
45224545,"45224545      <row Id=""45224545"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45234484"" PostTypeId=""2"" ParentId=""45224545"" CreationDate=""2017-07-21T09:49:21.427"" Score=""2"" Body=""&lt;p&gt;You need to define &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; method in &lt;code&gt;mather&lt;/code&gt; interface, i.e.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type mather interface {&#xA;    add(mather) mather&#xA;    sub(mather) mather&#xA;    get() interface{}&#xA;    clone() mather&#xA;    set(v mather)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The implementation of &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;clone&lt;/code&gt; in &lt;code&gt;float&lt;/code&gt; type looks like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (f *float) get() interface{} {&#xA;    return f.value&#xA;}&#xA;&#xA;func (f *float) clone() mather {&#xA;    return &amp;amp;float{f.value}&#xA;}&#xA;&#xA;func (f *float) set(v mather) {&#xA;    switch v := v.(type) {&#xA;    case *float:&#xA;        f.value = v.value&#xA;    //handle other possible types...&#xA;    default:&#xA;        //handle unknown types&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://play.golang.org/p/NaORzziSwh&quot; rel=&quot;nofollow noreferrer&quot;&gt;working example in Playground&lt;/a&gt;. The only complicated parts is &lt;code&gt;set&lt;/code&gt; in which you should determined the underlying type. Here you can use &lt;code&gt;type switch&lt;/code&gt; to get underlying type, then assign it to &lt;code&gt;float&lt;/code&gt;. Similar codes need to be added in the other underlying types (you mention that there are 10 possible types). &lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-07-21T09:49:21.427"" CommentCount=""4"" />
",45234484
45236350,"45236350      <row Id=""45236350"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45236766"" PostTypeId=""2"" ParentId=""45236350"" CreationDate=""2017-07-21T11:40:52.893"" Score=""1"" Body=""&lt;p&gt;When you build reusable pieces of code, you will develop a package as a shared library. But when you develop executable programs, you will use the package “main” for making the package as an executable program. The package “main” tells the Go compiler that the package should compile as an executable program instead of a shared library. The main function in the package “main” will be the entry point of our executable program.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That's why you should use the following structure:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;awsomeProject&#xA;    -&amp;gt;src&#xA;        -&amp;gt;awsomeProject&#xA;            -&amp;gt;configuration.go&#xA;        -&amp;gt;main.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;with &lt;em&gt;main.go&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;func main(){&#xA;    var cfg awsomeProject.Config&#xA;    cfg.Data = 1&#xA;    fmt.Println(&quot;lalala&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and &lt;em&gt;configuration.go&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package awsomeProject&#xA;&#xA;type Config struct {&#xA;    Data int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For more details:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://golang.org/doc/code.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/doc/code.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://thenewstack.io/understanding-golang-packages&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://thenewstack.io/understanding-golang-packages&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""3805062"" LastEditorUserId=""3805062"" LastEditDate=""2017-07-21T13:20:38.973"" LastActivityDate=""2017-07-21T13:20:38.973"" CommentCount=""4"" />
",45236766
45216035,"45216035      <row Id=""45216035"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45238171"" PostTypeId=""2"" ParentId=""45216035"" CreationDate=""2017-07-21T12:50:53.183"" Score=""0"" Body=""&lt;p&gt;Thanks again Imperalix for the hint. The basic idea is to use the exact parameters which were used to create the record. This is what is now working for me to delete &lt;code&gt;CNAME&lt;/code&gt; records.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func deleteRecord(svc *route53.Route53) {&#xA;    dnsName := &quot;vikas027.something.net&quot;&#xA;&#xA;    request := &amp;amp;route53.ChangeResourceRecordSetsInput{&#xA;        ChangeBatch: &amp;amp;route53.ChangeBatch{&#xA;            Changes: []*route53.Change{&#xA;                {&#xA;                    Action: aws.String(&quot;DELETE&quot;),&#xA;                    ResourceRecordSet: &amp;amp;route53.ResourceRecordSet{&#xA;                        Name: aws.String(dnsName),&#xA;                        Type: aws.String(&quot;CNAME&quot;),&#xA;                        ResourceRecords: []*route53.ResourceRecord{&#xA;                            {&#xA;                                Value: aws.String(AliasName),&#xA;                            },&#xA;                        },&#xA;                        TTL:           aws.Int64(ttl),&#xA;                        Weight:        aws.Int64(weight),&#xA;                        SetIdentifier: aws.String(setIdentifier),&#xA;                    },&#xA;                },&#xA;            },&#xA;        },&#xA;        HostedZoneId: aws.String(zoneID),&#xA;    }&#xA;    resp, err := svc.ChangeResourceRecordSets(request)&#xA;    if err != nil {&#xA;        fmt.Println(&quot;Unable to delete DNS Record&quot;, err)&#xA;    }&#xA;    fmt.Println(resp)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""3438276"" LastActivityDate=""2017-07-21T12:50:53.183"" CommentCount=""0"" />
",45238171
45232107,"45232107      <row Id=""45232107"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45239352"" PostTypeId=""2"" ParentId=""45232107"" CreationDate=""2017-07-21T13:46:50.550"" Score=""0"" Body=""&lt;p&gt;In the code you posted:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;c := datadog.Client{}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This seems to be creating an empty client object.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Shouldn't you be creating a client with your keys using &lt;code&gt;datadog.NewClient(&quot;...&quot;, &quot;...&quot;)&lt;/code&gt; as in the first code snippet you posted?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;c := datadog.NewClient(&quot;...&quot;, &quot;...&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also, you should check the error returned as that will give you more hints to troubleshoot the issue:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;_, err := c.PostEvent(&amp;amp;e)&#xA;if err != nil {&#xA;  log.Fatalf(&quot;fatal: %s\n&quot;, err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;`&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-21T13:46:50.550"" CommentCount=""0"" />
",45239352
45239409,"45239409      <row Id=""45239409"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45239509"" PostTypeId=""2"" ParentId=""45239409"" CreationDate=""2017-07-21T13:52:59.147"" Score=""5"" Body=""&lt;p&gt;The function uses a &quot;named&quot; return value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;From &lt;a href=&quot;https://golang.org/ref/spec#Return_statements&quot; rel=&quot;nofollow noreferrer&quot;&gt;the spec&lt;/a&gt; on return statements:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The expression list may be empty if the function's result type&#xA;  specifies names for its result parameters. The result parameters act&#xA;  as ordinary local variables and the function may assign values to them&#xA;  as necessary. The &quot;return&quot; statement returns the values of these&#xA;  variables.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Regardless of how they are declared, all the result values are&#xA;  initialized to the zero values for their type upon entry to the&#xA;  function. A &quot;return&quot; statement that specifies results sets the result&#xA;  parameters before any deferred functions are executed.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Using named returns allows you to save some code on manually allocating local variables, and can sometimes clean up messy if/else statements or long lists of return values. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func a()(x []string, err error){&#xA;    return&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;is really just shorthand for&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func a() ([]string,error){&#xA;  var x []string&#xA;  var err error&#xA;  return x,err&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Its a bit shorter, and I agree that it may be less obvious.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Named returns are sometimes needed, as it allows things like accessing them inside a deferred function, but the naked return is just syntactic sugar as far as I can tell, and is never strictly required.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One place I see it commonly is in error return cases in functions that have many return values. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(err != nil){&#xA;   return&#xA;}&#xA;return a,b,c,nil&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;is easier than &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(err != nil){&#xA;   return nil,nil,nil,err&#xA;}&#xA;return a,b,c,nil&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;when you have to write it a bunch of times. And you don't have to modify those returns if you change the signature to have additional &quot;real&quot; return values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Most places I am using them in the codebase I just searched, they definitely seem to be hiding other smells, like overly complex multi-purpose functions, too deep if/else nesting and stuff like that.&lt;/p&gt;&#xA;"" OwnerUserId=""121660"" LastEditorUserId=""121660"" LastEditDate=""2017-07-21T14:10:52.687"" LastActivityDate=""2017-07-21T14:10:52.687"" CommentCount=""3"" />
",45239509
45229951,"45229951      <row Id=""45229951"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45239520"" PostTypeId=""2"" ParentId=""45229951"" CreationDate=""2017-07-21T13:53:19.740"" Score=""0"" Body=""&lt;p&gt;Solution.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may test function &lt;code&gt;main()&lt;/code&gt; from package &lt;code&gt;main&lt;/code&gt; the same way, just do not name it &lt;code&gt;TestMain&lt;/code&gt;. I launch it as a separate goroutine, than try to connect to it and perform any request.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I decided to connect to auxilary handler which should respond with a simple json &lt;code&gt;{&quot;status&quot;: &quot;ok&quot;}&lt;/code&gt;.&#xA;In my case:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func TestMainExecution(t *testing.T) {&#xA;    go main()&#xA;    resp, err := http.Get(&quot;http://127.0.0.1:8080/checkHealth&quot;) &#xA;    if err != nil {&#xA;            t.Fatalf(&quot;Cannot make get: %v\n&quot;, err)&#xA;    }&#xA;    bodySb, err := ioutil.ReadAll(resp.Body)&#xA;    if err != nil {&#xA;            t.Fatalf(&quot;Error reading body: %v\n&quot;, err)&#xA;    }&#xA;    body := string(bodySb)&#xA;    fmt.Printf(&quot;Body: %v\n&quot;, body)&#xA;    var decodedResponse interface{}&#xA;    err = json.Unmarshal(bodySb, &amp;amp;decodedResponse)&#xA;    if err != nil {&#xA;            t.Fatalf(&quot;Cannot decode response &amp;lt;%p&amp;gt; from server. Err: %v&quot;, bodySb, err)&#xA;    }&#xA;    assert.Equal(t, map[string]interface{}{&quot;status&quot;: &quot;ok&quot;}, decodedResponse,&#xA;            &quot;Should return status:ok&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5165332"" LastActivityDate=""2017-07-21T13:53:19.740"" CommentCount=""0"" />
",45239520
45242755,"45242755      <row Id=""45242755"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45242858"" PostTypeId=""2"" ParentId=""45242755"" CreationDate=""2017-07-21T16:49:55.227"" Score=""3"" Body=""&lt;p&gt;Go does not support inheritance, and the only polymorphism it supports is interfaces. What you've got in the example code is called embedding, and it does not offer polymorphism; if you embed &lt;code&gt;Parent&lt;/code&gt; in &lt;code&gt;Foo&lt;/code&gt;, that does not let you assign a &lt;code&gt;Foo&lt;/code&gt;-type value to a &lt;code&gt;Parent&lt;/code&gt;-type variable or slice.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The closest you can get to what you describe would be using interfaces. If &lt;code&gt;Parent&lt;/code&gt; implements some interface (let's say &lt;code&gt;Baz&lt;/code&gt;), then embedding &lt;code&gt;Parent&lt;/code&gt; in &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; means that both will also implement that same interface. This in turn means that you can have a slice of the interface type &lt;code&gt;[]Baz&lt;/code&gt; into which you could put values of type &lt;code&gt;Parent&lt;/code&gt;, &lt;code&gt;Foo&lt;/code&gt;, or &lt;code&gt;Bar&lt;/code&gt;. Note that interfaces can only specify methods, not fields, so when using values of the interface type, you'll only be able to access the methods of the interface, not any fields that might be specified in &lt;code&gt;Parent&lt;/code&gt;, &lt;code&gt;Foo&lt;/code&gt;, or &lt;code&gt;Bar&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-21T16:49:55.227"" CommentCount=""1"" />
",45242858
45240642,"45240642      <row Id=""45240642"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45243755"" PostTypeId=""2"" ParentId=""45240642"" CreationDate=""2017-07-21T17:45:36.893"" Score=""0"" Body=""&lt;p&gt;As pointed out, &lt;code&gt;Do&lt;/code&gt; does not work with maps.  This is one way you could fix it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;} else if e.Command == &quot;HMSET&quot; {&#xA;    // Build up a string slice to hold the key value pairs&#xA;    args := make([]string, 0, len(e.MapData) * 2)&#xA;    for k, v := range e.MapData {&#xA;        args = append(args, k, v)&#xA;    }&#xA;    _,err := redis.StringMap(client.Do(&quot;HMSET&quot;, e.Key, args...))&#xA;    checkErr(err, &quot;hmset error:&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The Do method maps to the Redis command set and arguments are expected in the same way.  For example.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; HMSET myKey foo bar baz boff&#xA;OK&#xA;127.0.0.1:6379&amp;gt; HGETALL myKey&#xA;1) &quot;foo&quot;&#xA;2) &quot;bar&quot;&#xA;3) &quot;baz&quot;&#xA;4) &quot;boff&quot;&#xA;127.0.0.1:6379&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The same map-set operation using the redis client in your code would be&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;client.Do(&quot;HMSET&quot;, &quot;myKey&quot;, &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;boff&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;When the arguments for keys and values of the map are dynamic, the most straight forward way is&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;client.Do(&quot;HMSET&quot;, &quot;myKey&quot;, []string{&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;boff&quot;}...)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which is exactly what the first code block above does.&lt;/p&gt;&#xA;"" OwnerUserId=""141555"" LastEditorUserId=""141555"" LastEditDate=""2017-07-21T17:52:36.773"" LastActivityDate=""2017-07-21T17:52:36.773"" CommentCount=""2"" />
",45243755
45248144,"45248144      <row Id=""45248144"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45250332"" PostTypeId=""2"" ParentId=""45248144"" CreationDate=""2017-07-22T03:23:52.057"" Score=""2"" Body=""&lt;p&gt;From the &lt;a href=&quot;https://golang.org/pkg/os/exec/#Command&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Command&lt;/code&gt; documentation&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The returned Cmd's Args field is constructed from the command name followed by the elements of arg, so arg should not include the command name itself. For example, Command(&quot;echo&quot;, &quot;hello&quot;). Args[0] is always name, not the possibly resolved Path. &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So, you should do something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;argChatID := fmt.Sprintf(`'set mybuddy to a reference to text chat id &quot;%s&quot;'`, chatid)&#xA;argMessage := fmt.Sprintf(`'send &quot;%s&quot; to mybuddy'`, message)&#xA;&#xA;exec.Command(&quot;/usr/bin/osascript&quot;, &quot;-e&quot;, `'tell application &quot;Messages&quot;'`, &#xA;    &quot;-e&quot;, argChatID, &quot;-e&quot;, argMessage,  &quot;-e&quot;, &quot;'end tell'&quot;).Run()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-07-22T04:02:58.853"" LastActivityDate=""2017-07-22T04:02:58.853"" CommentCount=""0"" />
",45250332
45250120,"45250120      <row Id=""45250120"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45250515"" PostTypeId=""2"" ParentId=""45250120"" CreationDate=""2017-07-22T04:00:14.553"" Score=""2"" Body=""&lt;p&gt;I think instead of &lt;em&gt;fasthttp is single process?&lt;/em&gt;, you're asking whether fasthttp handles client requests concurrently or not?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm pretty sure that any server (including &lt;em&gt;fasthttp&lt;/em&gt;) package will handle client requests concurrently. You should write a test/benchmark instead of manually access the server through &lt;em&gt;several&lt;/em&gt; browsers. The following is an example of such test code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main_test&#xA;&#xA;import (&#xA;    &quot;io/ioutil&quot;&#xA;    &quot;net/http&quot;&#xA;    &quot;sync&quot;&#xA;    &quot;testing&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;func doRequest(uri string) error {&#xA;    resp, err := http.Get(uri)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;    defer resp.Body.Close()&#xA;&#xA;    _, err = ioutil.ReadAll(resp.Body)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;&#xA;    return nil&#xA;}&#xA;&#xA;func TestGet(t *testing.T) {&#xA;    N := 1000&#xA;    wg := sync.WaitGroup{}&#xA;    wg.Add(N)&#xA;&#xA;    start := time.Now()&#xA;    for i := 0; i &amp;lt; N; i++ {&#xA;        go func() {&#xA;            if err := doRequest(&quot;http://127.0.0.1:82&quot;); err != nil {&#xA;                t.Error(err)&#xA;            }&#xA;            wg.Done()&#xA;        }()&#xA;    }&#xA;    wg.Wait()&#xA;&#xA;    t.Logf(&quot;Total duration for %d concurrent request(s) is %v&quot;, N, time.Since(start))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And the result (in my computer) is&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;fasthttp_test.go:42: Total duration for 1000 concurrent request(s) is 10.6066411s&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;You can see that the answer to your question is &lt;strong&gt;No, it handles the request concurrently&lt;/strong&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;In case the requested URL is the same, your browser may perform the request sequentially. See &lt;a href=&quot;https://stackoverflow.com/questions/9189591/multiple-ajax-requests-for-same-url&quot;&gt;Multiple Ajax requests for same URL&lt;/a&gt;. This explains why the response times are &lt;code&gt;X*10s&lt;/code&gt;. &lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-07-22T04:50:55.270"" LastActivityDate=""2017-07-22T04:50:55.270"" CommentCount=""1"" />
",45250515
45247226,"45247226      <row Id=""45247226"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45252978"" PostTypeId=""2"" ParentId=""45247226"" CreationDate=""2017-07-22T09:35:26.540"" Score=""3"" Body=""&lt;p&gt;Because &lt;code&gt;p&lt;/code&gt; points to nothing (&lt;code&gt;nil&lt;/code&gt;). You must first allocate some memory and make &lt;code&gt;p&lt;/code&gt; point to it before being allowed to deference &lt;code&gt;p&lt;/code&gt;. You can use the &lt;a href=&quot;https://golang.org/ref/spec#Allocation&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; builtin to allocate memory initialised to the zero value of the pointed type.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;p = &amp;amp;box{val: 2}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;has the same result as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;p = new(box)&#xA;*p = box{val: 2}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""328115"" LastActivityDate=""2017-07-22T09:35:26.540"" CommentCount=""0"" />
",45252978
45252693,"45252693      <row Id=""45252693"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45252998"" PostTypeId=""2"" ParentId=""45252693"" CreationDate=""2017-07-22T09:36:37.630"" Score=""1"" Body=""&lt;p&gt;You can create an instance of your new &lt;code&gt;Vertex&lt;/code&gt; type in a variety of ways:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1: &lt;code&gt;var c Circle&lt;/code&gt;  You can access fields using the &lt;code&gt;.&lt;/code&gt; operator:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;type Vertex struct {&#xA;    X, Y int&#xA;}&#xA;func main() {&#xA;    var f Vertex&#xA;    f.X = 1&#xA;    f.Y = 2&#xA;    fmt.Println(f) // should be {1, 2}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;2: Using &lt;code&gt;:=&lt;/code&gt; operator&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;type Vertex struct {&#xA;    X, Y int&#xA;}&#xA;func main() {&#xA;    f := Vertex{1, 2}&#xA;    fmt.Println(f) // should be {1, 2}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6422317"" LastActivityDate=""2017-07-22T09:36:37.630"" CommentCount=""0"" />
",45252998
45253939,"45253939      <row Id=""45253939"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45254046"" PostTypeId=""2"" ParentId=""45253939"" CreationDate=""2017-07-22T11:32:51.273"" Score=""2"" Body=""&lt;p&gt;For the purpose of variable scoping, files have no meaning in Go. Think of all files in a package as if they would be concatenated, which (simplified) is exactly what happens before compilation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That means: No, there is no way of scoping a variable to a file.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you need two global &lt;code&gt;WaitGroup&lt;/code&gt;s, you need to define them as individual variables.&lt;/p&gt;&#xA;"" OwnerUserId=""1296707"" LastActivityDate=""2017-07-22T11:32:51.273"" CommentCount=""4"" />
",45254046
45244386,"45244386      <row Id=""45244386"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45254815"" PostTypeId=""2"" ParentId=""45244386"" CreationDate=""2017-07-22T12:55:52.750"" Score=""0"" Body=""&lt;p&gt;I have wrote a small function that might be helpful for you. &#xA;Please take a look at &lt;a href=&quot;https://play.golang.org/p/P3hb7FzJUD&quot; rel=&quot;nofollow noreferrer&quot;&gt;limited parallel operations&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastEditorUserId=""8279560"" LastEditDate=""2017-07-22T13:08:40.800"" LastActivityDate=""2017-07-22T13:08:40.800"" CommentCount=""0"" />
",45254815
45256166,"45256166      <row Id=""45256166"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45256366"" PostTypeId=""2"" ParentId=""45256166"" CreationDate=""2017-07-22T15:43:16.967"" Score=""1"" Body=""&lt;p&gt;Your call to &lt;code&gt;srv.ListenAndServe&lt;/code&gt; can be, and apparently is, called after &lt;code&gt;srv.Shutdown&lt;/code&gt;. You can verify this by adding a logging statement the goroutine just before the call to &lt;code&gt;srv.ListenAndServe&lt;/code&gt;. To see that the shutdown works when called after &lt;code&gt;ListenAndServe&lt;/code&gt;, you can uncomment your &lt;code&gt;time.Sleep(1 * time.Second)&lt;/code&gt;. Here a typical use of &lt;code&gt;Shutdown&lt;/code&gt; would be to call it right after your &lt;code&gt;&amp;lt;-quit&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    // stop on ^c&#xA;    quit := make(chan os.Signal)&#xA;    signal.Notify(quit, os.Interrupt)&#xA;&#xA;    // router&#xA;    mux := http.NewServeMux()&#xA;    mux.HandleFunc(&quot;/&quot;, func(w http.ResponseWriter, r *http.Request) {&#xA;        log.Println(&quot;serving request&quot;)&#xA;        io.WriteString(w, &quot;Hello, world!\n&quot;)&#xA;    })&#xA;&#xA;    // start server&#xA;    srv := &amp;amp;http.Server{Addr: &quot;:8080&quot;, Handler: mux}&#xA;    go func() {&#xA;        log.Println(&quot;server starting&quot;)&#xA;        if err := srv.ListenAndServe(); err != nil {&#xA;            log.Fatalf(&quot;listenAndServe failed: %v&quot;, err)&#xA;        }&#xA;    }()&#xA;    fmt.Println(&quot;server started&quot;)&#xA;&#xA;    &amp;lt;-quit&#xA;    // gracefully stop server&#xA;    ctx, cancel := context.WithTimeout(context.Background(), 60 * time.Second)&#xA;    defer cancel()&#xA;    if err := srv.Shutdown(ctx); err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    log.Println(&quot;server stopped&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1147580"" LastActivityDate=""2017-07-22T15:43:16.967"" CommentCount=""3"" />
",45256366
45256433,"45256433      <row Id=""45256433"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45257068"" PostTypeId=""2"" ParentId=""45256433"" CreationDate=""2017-07-22T16:56:33.023"" Score=""1"" Body=""&lt;p&gt;I think you mean the Fluent API design pattern. You return the same Object, or struct in Go, over and over.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This pattern does not allow you to return a tuple, or multiple return types though.  You can only return one object.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/9PceZwi1a3&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/9PceZwi1a3&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type Object struct {&#xA;    Value string&#xA;    Error error&#xA;}&#xA;&#xA;func (o *Object) Before(s string) *Object {&#xA;    o.Value = s + o.Value&#xA;    // add an error if you like&#xA;    // o.Error = error.New(...)&#xA;    return o&#xA;}&#xA;&#xA;func (o *Object) After(s string) *Object {&#xA;    // could check for errors too&#xA;    if o.Error != nil {&#xA;        o.Value = o.Value + s&#xA;    }&#xA;    return o&#xA;}&#xA;&#xA;func main() {&#xA;    x := Object{}&#xA;&#xA;    x.&#xA;        Before(&quot;123&quot;).&#xA;        After(&quot;456&quot;).&#xA;        After(&quot;789&quot;).&#xA;        Before(&quot;0&quot;)&#xA;&#xA;    if x.Error != nil {&#xA;        // handle error&#xA;    }&#xA;    fmt.Println(x.Value)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Edit: sberry's answer had a good idea.  Add an Error state on the &lt;code&gt;Object&lt;/code&gt; struct itself which could allow u to check for errors in each func call.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Since you are new, please remember to evaluate all answers and mark the best one you believe lead you the answer.&lt;/p&gt;&#xA;"" OwnerUserId=""56693"" LastEditorUserId=""56693"" LastEditDate=""2017-07-22T17:10:16.093"" LastActivityDate=""2017-07-22T17:10:16.093"" CommentCount=""0"" />
",45257068
45257237,"45257237      <row Id=""45257237"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45257463"" PostTypeId=""2"" ParentId=""45257237"" CreationDate=""2017-07-22T17:39:55.617"" Score=""4"" Body=""&lt;p&gt;The key here is that you are using a pointer receiver in your definition of &lt;code&gt;Simplify()&lt;/code&gt; with respect to &lt;code&gt;UnaryExpression&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (a *UnaryExpression) Simplify()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The other methods you are implementing don't use a pointer receiver:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// One example&#xA;func (a IdentExpression) Simplify() {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Typically, in Go, it is considered best practice to have all methods on the same type use the same type of receiver (i.e. if one method uses a pointer receiver, they all should. Likewise, if one method uses a non-pointer receiver, they all should for that particular type).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this case, the code will compile if you remove the pointer receiver from the &lt;code&gt;Simplify&lt;/code&gt; method of &lt;code&gt;UnaryExpression&lt;/code&gt;. Hope this helps!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit: &lt;a href=&quot;https://stackoverflow.com/a/40824044/2909262&quot;&gt;Here is a more comprehensive answer that explains exactly why this error happens, it's really a good read.&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""2909262"" LastEditorUserId=""2909262"" LastEditDate=""2017-07-22T17:51:36.560"" LastActivityDate=""2017-07-22T17:51:36.560"" CommentCount=""1"" />
",45257463
45258055,"45258055      <row Id=""45258055"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45258190"" PostTypeId=""2"" ParentId=""45258055"" CreationDate=""2017-07-22T19:05:13.217"" Score=""3"" Body=""&lt;p&gt;No, that is not safe. It doesn't matter if the keys are unique. You need to avoid concurrent writes or writes concurrent with reads. Concurrent reads are OK.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can use the race detector to find problems like this by running &lt;code&gt;go run -race myprog.go&lt;/code&gt;. See &lt;a href=&quot;https://golang.org/doc/articles/race_detector.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/doc/articles/race_detector.html&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""3068258"" LastEditorUserId=""3068258"" LastEditDate=""2017-07-22T19:10:54.940"" LastActivityDate=""2017-07-22T19:10:54.940"" CommentCount=""3"" />
",45258190
45254738,"45254738      <row Id=""45254738"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45258790"" PostTypeId=""2"" ParentId=""45254738"" CreationDate=""2017-07-22T20:16:30.193"" Score=""1"" Body=""&lt;p&gt;I think that it is probably better to write your own converter, because you will always have some cases that are not covered by existing libs\tools for that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My initial implementation of it would be something like this: &lt;a href=&quot;https://play.golang.org/p/UBCq0waIEe&quot; rel=&quot;nofollow noreferrer&quot;&gt;basic impl of structs merger&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastActivityDate=""2017-07-22T20:16:30.193"" CommentCount=""2"" />
",45258790
45261101,"45261101      <row Id=""45261101"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45262453"" PostTypeId=""2"" ParentId=""45261101"" CreationDate=""2017-07-23T07:09:33.347"" Score=""0"" Body=""&lt;p&gt;Here is the solution.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# detect GOPATH if not set&#xA;ifndef $(GOPATH)&#xA;    $(info GOPATH is not set, autodetecting..)&#xA;    TESTPATH := $(dir $(abspath ../../..))&#xA;    DIRS := bin pkg src&#xA;    # create a ; separated line of tests and pass it to shell&#xA;    MISSING_DIRS := $(shell $(foreach entry,$(DIRS),test -d &quot;$(TESTPATH)$(entry)&quot; || echo &quot;$(entry)&quot;;))&#xA;    ifeq ($(MISSING_DIRS),)&#xA;        $(info Found GOPATH: $(TESTPATH))&#xA;        export GOPATH := $(TESTPATH)&#xA;    else&#xA;        $(info ..missing dirs &quot;$(MISSING_DIRS)&quot; in &quot;$(TESTDIR)&quot;)&#xA;        $(info GOPATH autodetection failed)&#xA;    endif&#xA;endif&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What I've learned:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;variables are defines in a separate block&lt;/li&gt;&#xA;&lt;li&gt;tabs are not allowed in the block that defines variables&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;echo&lt;/code&gt; doesn't work in this block, need to use &lt;code&gt;$(info)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""239247"" LastActivityDate=""2017-07-23T07:09:33.347"" CommentCount=""2"" />
",45262453
45262846,"45262846      <row Id=""45262846"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45263383"" PostTypeId=""2"" ParentId=""45262846"" CreationDate=""2017-07-23T09:06:23.343"" Score=""1"" Body=""&lt;p&gt;In order to mock the &lt;code&gt;userRepository&lt;/code&gt; dependency of your &lt;code&gt;UserService&lt;/code&gt;, you are correct in thinking the best approach would be to use an interface.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Firstly, create your interface:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type UserRepository interface {&#xA;    FindAll() []Users&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then build a mock:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type MockUserRepository struct{}&#xA;&#xA;func (mock MockUserRepository) FindAll() []Users {&#xA;    // here you would manually build a slice of users and return it&#xA;    return []Users&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Finally, use this mock as as a dependency in your test case:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func TestMaleUsers(t *testing.T) {&#xA;    // compose service using mock&#xA;    service := UserService {&#xA;        userRepository: MockUserRepository,&#xA;    }&#xA;&#xA;    // get output of method call&#xA;    users := service.MaleUsers()&#xA;&#xA;    // perform assertions on output&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way you have created a mock of your interface which can be used in your tests without having to perform any database calls on your repository.&lt;/p&gt;&#xA;"" OwnerUserId=""4506781"" LastActivityDate=""2017-07-23T09:06:23.343"" CommentCount=""2"" />
",45263383
45264265,"45264265      <row Id=""45264265"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45264464"" PostTypeId=""2"" ParentId=""45264265"" CreationDate=""2017-07-23T11:16:50.607"" Score=""1"" Body=""&lt;p&gt;You appear to be executing an invalid or nil template. The error you're ignoring is probably the missing clue:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t, _ := template.ParseFiles(&quot;login.gtpl&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Never ignore errors.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-07-23T11:16:50.607"" CommentCount=""5"" />
",45264464
45266784,"45266784      <row Id=""45266784"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45266785"" PostTypeId=""2"" ParentId=""45266784"" CreationDate=""2017-07-23T15:27:38.663"" Score=""3"" Body=""&lt;p&gt;Use the function &lt;code&gt;Contains&lt;/code&gt; from the &lt;code&gt;strings&lt;/code&gt; package.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import {&#xA;    &quot;strings&quot;&#xA;}&#xA;strings.Contains(&quot;something&quot;, &quot;some&quot;) // true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5749914"" LastEditorUserId=""5749914"" LastEditDate=""2017-07-23T15:39:18.727"" LastActivityDate=""2017-07-23T15:39:18.727"" CommentCount=""0"" />
",45266785
45266393,"45266393      <row Id=""45266393"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45266853"" PostTypeId=""2"" ParentId=""45266393"" CreationDate=""2017-07-23T15:34:38.030"" Score=""2"" Body=""&lt;p&gt;Race conditions are, by definition, nondeterministic. This means that while you may get a particular answer most of the time, it will not always be so.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;By running racy code on multiple cores you greatly increases the number of possibilities, hence you get a broader selection of results.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/questions/34510/what-is-a-race-condition&quot;&gt;this post&lt;/a&gt; or &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Race_condition&quot; rel=&quot;nofollow noreferrer&quot;&gt;this Wikipedia article&lt;/a&gt; for more information on race conditions.&lt;/p&gt;&#xA;"" OwnerUserId=""1094529"" LastActivityDate=""2017-07-23T15:34:38.030"" CommentCount=""5"" />
",45266853
45267409,"45267409      <row Id=""45267409"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45267644"" PostTypeId=""2"" ParentId=""45267409"" CreationDate=""2017-07-23T16:55:42.130"" Score=""4"" Body=""&lt;p&gt;Expanding my comment with example.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It is feasible, you have to implement &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Marshaler&quot; rel=&quot;nofollow noreferrer&quot;&gt;Marshal&lt;/a&gt; interface.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (u *MyStruct) MarshalJSON() ([]byte, error) {&#xA;    return json.Marshal(&amp;amp;struct {&#xA;        Name   string `json:&quot;name&quot;`&#xA;        Scheme string `json:&quot;scheme&quot;`&#xA;    }{&#xA;        Name:   u.Name,&#xA;        Scheme: u.Scheme,&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Play Link: &lt;a href=&quot;https://play.golang.org/p/LLchuOdYvf&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/LLchuOdYvf&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{&quot;name&quot;:&quot;Bob&quot;,&quot;scheme&quot;:&quot;http&quot;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-07-23T16:55:42.130"" CommentCount=""0"" />
",45267644
45268293,"45268293      <row Id=""45268293"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45268398"" PostTypeId=""2"" ParentId=""45268293"" CreationDate=""2017-07-23T18:13:44.067"" Score=""4"" Body=""&lt;p&gt;You cannot use a variable before it is declared, and it is not yet declared inside its initialization statement.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So yes, the declaration line is required, and no, there is no way to avoid it.&lt;/p&gt;&#xA;"" OwnerUserId=""1094529"" LastActivityDate=""2017-07-23T18:13:44.067"" CommentCount=""0"" />
",45268398
45267983,"45267983      <row Id=""45267983"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45268501"" PostTypeId=""2"" ParentId=""45267983"" CreationDate=""2017-07-23T18:25:33.313"" Score=""0"" Body=""&lt;p&gt;The problem with your program is not the algorithm itself but this line:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;newSet := append(existingSet, element)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You should not &lt;code&gt;append&lt;/code&gt; and assign to a different variable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As the &lt;a href=&quot;https://godoc.org/builtin#append&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation&lt;/a&gt; states (emphasis mine), &quot;The append built-in function appends elements to the end of a slice. &lt;strong&gt;If it has sufficient capacity, the destination is resliced to accommodate the new elements&lt;/strong&gt;. If it does not, a new underlying array will be allocated.&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, there might be cases where &lt;code&gt;newSet := append(existingSet, element)&lt;/code&gt; will actually modify &lt;code&gt;existingSet&lt;/code&gt; itself, which would break your logic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you change that to instead create a new array and append to that one, it works as you expect it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;newSet := make([]string, 0)&#xA;newSet = append(newSet, existingSet...) &#xA;newSet = append(newSet, element)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4907630"" LastEditorUserId=""4907630"" LastEditDate=""2017-07-23T18:38:22.177"" LastActivityDate=""2017-07-23T18:38:22.177"" CommentCount=""1"" />
",45268501
45268998,"45268998      <row Id=""45268998"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45269323"" PostTypeId=""2"" ParentId=""45268998"" CreationDate=""2017-07-23T19:53:59.127"" Score=""3"" Body=""&lt;p&gt;By default &lt;code&gt;rand.Intn&lt;/code&gt; uses the &lt;a href=&quot;https://github.com/golang/go/blob/master/src/math/rand/rand.go#L277&quot; rel=&quot;nofollow noreferrer&quot;&gt;globalRand.Intn&lt;/a&gt;. Its created internally, &lt;a href=&quot;https://github.com/golang/go/blob/master/src/math/rand/rand.go#L236&quot; rel=&quot;nofollow noreferrer&quot;&gt;refer here&lt;/a&gt;. So when you set via &lt;a href=&quot;https://github.com/golang/go/blob/master/src/math/rand/rand.go#L243&quot; rel=&quot;nofollow noreferrer&quot;&gt;rand.Seed&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;rand.Seed(time.Now().UTC().UnixNano())&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then &lt;code&gt;globalRand&lt;/code&gt; uses the new seed value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When needed you can create your own rand generator with seed value. Refer to &lt;a href=&quot;https://golang.org/pkg/math/rand/#example__rand&quot; rel=&quot;nofollow noreferrer&quot;&gt;godoc example&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Play Link (without seed): &lt;a href=&quot;https://play.golang.org/p/2yg7xjvHoJ&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/2yg7xjvHoJ&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;My favorite number is 1&#xA;My favorite number is 7&#xA;My favorite number is 7&#xA;My favorite number is 9&#xA;My favorite number is 1&#xA;My favorite number is 8&#xA;My favorite number is 5&#xA;My favorite number is 0&#xA;My favorite number is 6&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Play Link (with seed): &lt;a href=&quot;https://play.golang.org/p/EpW6R5rvM4&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/EpW6R5rvM4&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;My favorite number is 0&#xA;My favorite number is 8&#xA;My favorite number is 7&#xA;My favorite number is 2&#xA;My favorite number is 3&#xA;My favorite number is 9&#xA;My favorite number is 4&#xA;My favorite number is 7&#xA;My favorite number is 8&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As @AlexanderTrakhimenok mentioned, in playground program execution is &lt;code&gt;deterministic&lt;/code&gt;. However playground is doest stop you from supplying &lt;code&gt;rand.Seed&lt;/code&gt; value. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Remember Seed value is &lt;code&gt;int64&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you &lt;code&gt;rand.Intn&lt;/code&gt;, it uses default seed value &lt;code&gt;1&lt;/code&gt; for &lt;code&gt;globalRand&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var globalRand = New(&amp;amp;lockedSource{src: NewSource(1).(Source64)})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And in playground &lt;code&gt;time.Now().UTC().UnixNano()&lt;/code&gt; gives you same value &lt;code&gt;1257894000000000000&lt;/code&gt; since &lt;code&gt;the start time is locked to a constant&lt;/code&gt;. But it is different from default seed value, &lt;strong&gt;&lt;em&gt;that's why second playground link produces the different result&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So above two would produce the same result always.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;How should we change the result in playground?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Yes, we can. Let's supply &lt;code&gt;UnixNano()&lt;/code&gt; value &lt;code&gt;1500909006430687579&lt;/code&gt; to &lt;code&gt;rand.Seed&lt;/code&gt;, which is generated from my machine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Play Link: &lt;a href=&quot;https://play.golang.org/p/-nTydej8YF&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/-nTydej8YF&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;My favorite number is 3&#xA;My favorite number is 5&#xA;My favorite number is 3&#xA;My favorite number is 8&#xA;My favorite number is 0&#xA;My favorite number is 5&#xA;My favorite number is 4&#xA;My favorite number is 7&#xA;My favorite number is 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-24T15:27:05.743"" LastActivityDate=""2017-07-24T15:27:05.743"" CommentCount=""8"" />
",45269323
45269506,"45269506      <row Id=""45269506"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45269823"" PostTypeId=""2"" ParentId=""45269506"" CreationDate=""2017-07-23T20:54:26.337"" Score=""4"" Body=""&lt;p&gt;&lt;strong&gt;Option 1&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Return a new slice as suggested by @zerkms.&lt;br&gt;&#xA;&lt;a href=&quot;https://play.golang.org/p/uGJiD3WApS&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/uGJiD3WApS&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;import &quot;fmt&quot;&#xA;&#xA;func main() {&#xA;    a := []int{0, 1, 1, 3, 3, 3}&#xA;    a = removeDup(a)&#xA;    fmt.Println(a)&#xA;}&#xA;&#xA;func removeDup(s []int) []int {&#xA;    n := len(s)&#xA;    tmp := make([]int, 0, n)&#xA;    tmp = append(tmp, s[0])&#xA;    for i := 1; i &amp;lt; n; i++ {&#xA;        if s[i] != s[i-1] {&#xA;            tmp = append(tmp, s[i])&#xA;        }&#xA;    }&#xA;    return tmp&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Option 2&lt;/strong&gt;&lt;br&gt;&#xA;Use pointers for pass-by-reference.&lt;br&gt;&#xA;The same thing in effect as that of option1.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/80bE5Qkuuj&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/80bE5Qkuuj&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;func main() {&#xA;    a := []int{0, 1, 1, 3, 3, 3}&#xA;    removeDup(&amp;amp;a)&#xA;    fmt.Println(a)&#xA;}&#xA;&#xA;func removeDup(sp *[]int) {&#xA;    s := *sp&#xA;    n := len(s)&#xA;    tmp := make([]int, 0, n)&#xA;    tmp = append(tmp, s[0])&#xA;    for i := 1; i &amp;lt; n; i++ {&#xA;        if s[i] != s[i-1] {&#xA;            tmp = append(tmp, s[i])&#xA;        }&#xA;    }&#xA;    *sp = tmp&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also, refer to following SO thread:&#xA;&lt;a href=&quot;https://stackoverflow.com/questions/16748330/does-go-have-no-real-way-to-shrink-a-slice-is-that-an-issue&quot;&gt;Does Go have no real way to shrink a slice? Is that an issue?&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""2837627"" LastEditorUserId=""2837627"" LastEditDate=""2017-07-23T21:49:05.547"" LastActivityDate=""2017-07-23T21:49:05.547"" CommentCount=""2"" />
",45269823
45270023,"45270023      <row Id=""45270023"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45270134"" PostTypeId=""2"" ParentId=""45270023"" CreationDate=""2017-07-23T21:38:38.457"" Score=""4"" Body=""&lt;p&gt;&lt;code&gt;Open&lt;/code&gt; opens a file in read-only mode.&lt;br&gt;&#xA;Refer to documentation: &lt;a href=&quot;https://golang.org/pkg/os/#Open&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/os/#Open&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead, use &lt;a href=&quot;https://golang.org/pkg/os/#OpenFile&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;OpenFile&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, always check for errors whenever you code. It'll save you at least weeks of work-hours in your lifetime.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is a working code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;bufio&quot;&#xA;    &quot;bytes&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;os&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    fn := os.Args[1]&#xA;    var input bytes.Buffer&#xA;    scanner := bufio.NewScanner(os.Stdin)&#xA;&#xA;    for scanner.Scan() {&#xA;        fmt.Fprintf(&amp;amp;input, scanner.Text())&#xA;        fmt.Fprintf(&amp;amp;input, &quot;\n&quot;)&#xA;    }&#xA;&#xA;    fmt.Println(input.Bytes())&#xA;    fi, err := os.OpenFile(fn, os.O_RDWR|os.O_CREATE, 0755)&#xA;&#xA;    if err != nil {&#xA;        fmt.Println(&quot;Error with Open()&quot;,err)&#xA;    }&#xA;    defer fi.Close()&#xA;&#xA;    n, err := fi.Write(input.Bytes())&#xA;    if err != nil {&#xA;        fmt.Println(&quot;Error with Write()&quot;, err)&#xA;    }&#xA;    fmt.Println(&quot;Bytes written to file: &quot;,n)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a class='doc-link' href=&quot;https://stackoverflow.com/documentation/go/1033/file-i-o#t=201707232252120358363&quot;&gt;Stack overflow documentation&lt;/a&gt; for this will also help you.&lt;/p&gt;&#xA;"" OwnerUserId=""2837627"" LastEditorUserId=""2837627"" LastEditDate=""2017-07-23T22:53:55.750"" LastActivityDate=""2017-07-23T22:53:55.750"" CommentCount=""1"" />
",45270134
45267060,"45267060      <row Id=""45267060"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45270754"" PostTypeId=""2"" ParentId=""45267060"" CreationDate=""2017-07-23T23:25:13.820"" Score=""1"" Body=""&lt;p&gt;At the moment this is not possible. Nor do I see how it could be possible in the future. Mounting a volume in docker means you &quot;hide&quot; the contents of that folder from the container and use the files on the host instead. As such, any time you'll mount the directory from your machine, your container files from that instance won't be available to the machine. This means you can't have Go installed in the container and then mount a folder and use that location for the Go sources. If you are thinking: I'll just mount things in another place, do some symlink magic / copy files around, that's just a bad idea that leads to nowhere.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Gogland supports remote debugging as of EAP 10, released a a few weeks ago. This allows you to debug applications running in containers or on remote hosts. As such, you can install Go, and the source code on your machine but have them running in containers.&lt;/p&gt;&#xA;"" OwnerUserId=""951414"" LastActivityDate=""2017-07-23T23:25:13.820"" CommentCount=""0"" />
",45270754
45271052,"45271052      <row Id=""45271052"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45271090"" PostTypeId=""2"" ParentId=""45271052"" CreationDate=""2017-07-24T00:24:50.420"" Score=""4"" Body=""&lt;p&gt;It seems to be because &lt;code&gt;Parse&lt;/code&gt; is returning a pointer to the struct.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try with this (note the &lt;code&gt;*&lt;/code&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Printf(&quot;%+v\n&quot;, *u)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Modified playground:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/Grjrp2QriK&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/Grjrp2QriK&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To expand on this, the reason for this is that &lt;code&gt;fmt&lt;/code&gt; treats structs that implement &lt;code&gt;Stringer&lt;/code&gt; differently when doing &lt;code&gt;%+v&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is the relevant code: &lt;a href=&quot;https://golang.org/src/fmt/print.go?s=4772:4849#L577&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/src/fmt/print.go?s=4772:4849#L577&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since &lt;code&gt;*URL&lt;/code&gt; implements Stringer: &lt;a href=&quot;https://golang.org/pkg/net/url/#URL.String&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/net/url/#URL.String&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That's the string being used.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;By dereferencing the pointer, we get an &lt;code&gt;URL&lt;/code&gt;, which does not implement the interface (cause the receiver in the &lt;code&gt;String&lt;/code&gt; method is a pointer).&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastEditorUserId=""4907630"" LastEditDate=""2017-07-24T19:32:47.623"" LastActivityDate=""2017-07-24T19:32:47.623"" CommentCount=""2"" />
",45271090
45272267,"45272267      <row Id=""45272267"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45274110"" PostTypeId=""2"" ParentId=""45272267"" CreationDate=""2017-07-24T06:41:01.467"" Score=""1"" Body=""&lt;p&gt;See how you build the &lt;code&gt;nameComponentRegexp&lt;/code&gt;: you start with &lt;code&gt;alphaNumericRegexp&lt;/code&gt; and then match 1 or 0 occurrences of 1 or more sequences of &lt;code&gt;separatorRegexp&lt;/code&gt;+&lt;code&gt;alphaNumericRegexp&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/docker/distribution/blob/master/reference/regexp.go#L118&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;optional()&lt;/code&gt;&lt;/a&gt; does the following:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;// optional wraps the expression in a non-capturing group and makes the&lt;br/&gt;&#xA;  // production optional.&lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;func optional(res ...*regexp.Regexp) *regexp.Regexp {&#xA;  return match(group(expression(res...)).String() + `?`)&#xA;}&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/docker/distribution/blob/master/reference/regexp.go#L118&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;repeated()&lt;/code&gt;&lt;/a&gt; does this:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;// repeated wraps the regexp in a non-capturing group to get one or more&lt;br/&gt;&#xA;  // matches.&lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;func repeated(res ...*regexp.Regexp) *regexp.Regexp {&#xA;  return match(group(expression(res...)).String() + `+`)&#xA;}&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Thus, what you need is&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/^[a-z0-9]+(?:(?:[._]|__|-*)[a-z0-9]+)*$/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See the &lt;a href=&quot;https://regex101.com/r/cm1qY3/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;regex demo&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;^&lt;/code&gt; - start of string&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;[a-z0-9]+&lt;/code&gt; - 1 or more alphanumeric symbols&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;(?:(?:[._]|__|-*)[a-z0-9]+)*&lt;/code&gt; - zero or more sequences of:&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;(?:[._]|__|-*)&lt;/code&gt; - a &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;__&lt;/code&gt;, or 0+ hyphens&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;[a-z0-9]+&lt;/code&gt;- 1 or more alphanumeric symbols&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;If you want to disallow strings like &lt;code&gt;aaaa&lt;/code&gt;, you need to replace all &lt;code&gt;*&lt;/code&gt; in the pattern (2 occurrences) with &lt;code&gt;+&lt;/code&gt; (&lt;a href=&quot;https://regex101.com/r/Bcmdjb/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;demo&lt;/a&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;JS demo:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&#xD;&#xA;&lt;div class=&quot;snippet-code&quot;&gt;&#xD;&#xA;&lt;pre class=&quot;snippet-code-js lang-js prettyprint-override&quot;&gt;&lt;code&gt;var ss = ['a.a','a_a','a__a','a-a','a--a','a---a'];&#xD;&#xA;var rx = /^[a-z0-9]+(?:(?:[._]|__|-*)[a-z0-9]+)*$/;&#xD;&#xA;for (var s of ss) {&#xD;&#xA; console.log(s,&quot;=&amp;gt;&quot;, rx.test(s));&#xD;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;/p&gt;&#xA;"" OwnerUserId=""3832970"" LastActivityDate=""2017-07-24T06:41:01.467"" CommentCount=""0"" />
",45274110
45273724,"45273724      <row Id=""45273724"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45274122"" PostTypeId=""2"" ParentId=""45273724"" CreationDate=""2017-07-24T06:41:45.060"" Score=""2"" Body=""&lt;p&gt;It's because you &lt;strong&gt;do not&lt;/strong&gt; have &lt;em&gt;any&lt;/em&gt; dedicated route that handles requests for &lt;em&gt;any&lt;/em&gt; images.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My recommendation would be to initialize an HTTP handler that serves file based on the URI pathname. You can use that handler as a way to serve images.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fs := http.FileServer(http.Dir(&quot;images&quot;))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And then to bind it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;http.Handle(&quot;/images/&quot;, http.StripPrefix(&quot;/images/&quot;, fs))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here's your full code with my suggestions:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;  &quot;fmt&quot;&#xA;  &quot;html/template&quot;&#xA;  &quot;net/http&quot;&#xA;)&#xA;&#xA;func main() {&#xA;  // We're creating a file handler, here.&#xA;  fs := http.FileServer(http.Dir(&quot;images&quot;))&#xA;&#xA;  http.HandleFunc(&quot;/images&quot;, images)&#xA;&#xA;  // We're binding the handler to the `/images` route, here.&#xA;  http.Handle(&quot;/images/&quot;, http.StripPrefix(&quot;/images/&quot;, fs))&#xA;&#xA;  http.ListenAndServe(&quot;:8080&quot;, nil)&#xA;}&#xA;&#xA;func images(w http.ResponseWriter, r *http.Request) {&#xA;  t, err := template.ParseFiles(&quot;templates/link.html&quot;)&#xA;  if err != nil {&#xA;    fmt.Fprintf(w, err.Error())&#xA;    return&#xA;  }&#xA;&#xA;  t.ExecuteTemplate(w, &quot;link&quot;, nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""538570"" LastActivityDate=""2017-07-24T06:41:45.060"" CommentCount=""1"" />
",45274122
45275185,"45275185      <row Id=""45275185"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45275278"" PostTypeId=""2"" ParentId=""45275185"" CreationDate=""2017-07-24T08:07:15.203"" Score=""4"" Body=""&lt;p&gt;The message you send:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;message := `{&quot;status&quot;: &quot;OK&quot;}`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is already a valid JSON text, you don't need any further JSON encoding / processing on it. Just send it as-is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func Index(w http.ResponseWriter, r *http.Request){&#xA;    message := `{&quot;status&quot;: &quot;OK&quot;}`&#xA;    w.Header().Set(&quot;Content-Type&quot;, &quot;application/json;charset=UTF-8&quot;)&#xA;    io.WriteString(w, message)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also note that if your response code is &lt;code&gt;http.StatusOK&lt;/code&gt;, you don't need to set that explicitly, as that is the default if you don't set it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And then simply expect the following response:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;expected := `{&quot;status&quot;: &quot;OK&quot;}`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Explaining your original code:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your original code you JSON-marshaled a single &lt;code&gt;string&lt;/code&gt; value, whose content was &lt;code&gt;{&quot;status&quot;: &quot;OK&quot;}&lt;/code&gt;. JSON encoding will quote this text into a valid JSON string (prefix quotation marks with a backslash), put inside quotes, and also appends a newline character. So this becomes the raw string:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;expected := `&quot;{\&quot;status\&quot;: \&quot;OK\&quot;}&quot;&#xA;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using this &lt;code&gt;expected&lt;/code&gt; value, your test passes, but again, what you want is in the first part of this answer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to use an interpreted string literal to describe the &lt;code&gt;expected&lt;/code&gt; value, this is how it could look like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;expected := &quot;\&quot;{\\\&quot;status\\\&quot;: \\\&quot;OK\\\&quot;}\&quot;\n&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-24T08:34:12.793"" LastActivityDate=""2017-07-24T08:34:12.793"" CommentCount=""2"" />
",45275278
45278540,"45278540      <row Id=""45278540"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45278760"" PostTypeId=""2"" ParentId=""45278540"" CreationDate=""2017-07-24T10:54:28.740"" Score=""8"" Body=""&lt;p&gt;This question may be somewhat opinion based, but using multiple package &lt;code&gt;init()&lt;/code&gt; functions can make your code easier to read and maintain.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If your source files are large, usually you arrange their content (e.g. types, variable declarations, methods etc.) in some logical order. Allowance of multiple &lt;code&gt;init()&lt;/code&gt; functions give you the possibility to put initialization code near to the parts they ought to initialize. If this would not be allowed, you would be forced to use a single &lt;code&gt;init()&lt;/code&gt; function per package, and put everything in it, far from the variables they need to initialize.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Yes, having multiple &lt;code&gt;init()&lt;/code&gt; functions may require some care regarding to execution order, but know that using multiple &lt;code&gt;init()&lt;/code&gt; functions is not a requirement, it's just a possibility. And you can write &lt;code&gt;init()&lt;/code&gt; functions to not have &quot;side&quot; effects, to not rely on the completion of other &lt;code&gt;init()&lt;/code&gt; functions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If that is unavoidable, you can create one &quot;master&quot; &lt;code&gt;init()&lt;/code&gt; which explicitly controls the order of other, &quot;child&quot; &lt;code&gt;init()&lt;/code&gt; functions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Relevant section from spec: &lt;a href=&quot;https://golang.org/ref/spec#Program_initialization_and_execution&quot; rel=&quot;noreferrer&quot;&gt;Package initialization&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also see related question: &lt;a href=&quot;https://stackoverflow.com/questions/31650965/what-does-lexical-file-name-order-mean/31651094#31651094&quot;&gt;What does lexical file name order mean?&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-24T12:05:47.530"" LastActivityDate=""2017-07-24T12:05:47.530"" CommentCount=""0"" />
",45278760
45278840,"45278840      <row Id=""45278840"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45279233"" PostTypeId=""2"" ParentId=""45278840"" CreationDate=""2017-07-24T11:16:48.560"" Score=""0"" Body=""&lt;p&gt;In Go you can use a slice for a variadic parameter. However, the slice must contain all the parameters you need to pass to the function. You cannot expand a slice and pass additional parameters as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hence your code should be something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;args := make([]interface{}, 0, len(e.MapData) * 2 + 1)&#xA;args = append(args, e.Key)&#xA;for k, v := range e.MapData {&#xA;    args = append(args, k, v)&#xA;}&#xA;_,err := redis.StringMap(client.Do(&quot;HMSET&quot;, args...))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8356442"" LastEditorUserId=""8356442"" LastEditDate=""2017-07-24T11:37:16.240"" LastActivityDate=""2017-07-24T11:37:16.240"" CommentCount=""0"" />
",45279233
45211395,"45211395      <row Id=""45211395"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45279330"" PostTypeId=""2"" ParentId=""45211395"" CreationDate=""2017-07-24T11:22:17.723"" Score=""0"" Body=""&lt;p&gt;In the end I've just realized that I needed to invert the order:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;r.Methods(&quot;GET&quot;).Path(&quot;/general/baz/bro&quot;).Handler(bazBroHandler)&#xA;r.Methods(&quot;GET&quot;).PathPrefix(&quot;/general&quot;).Handler(defaultHandler)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;now everything is working!&lt;/p&gt;&#xA;"" OwnerUserId=""847818"" LastActivityDate=""2017-07-24T11:22:17.723"" CommentCount=""0"" />
",45279330
45282409,"45282409      <row Id=""45282409"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45282661"" PostTypeId=""2"" ParentId=""45282409"" CreationDate=""2017-07-24T14:02:34.357"" Score=""3"" Body=""&lt;p&gt;Unfortunately you can't pass C types between packages. You'll need to perform any necessary type conversions within the package that is importing the C types. As per the &lt;a href=&quot;https://golang.org/cmd/cgo/&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Cgo translates C types into equivalent unexported Go types. Because&#xA;  the translations are unexported, a Go package should not expose C&#xA;  types in its exported API: a C type used in one Go package is&#xA;  different from the same C type used in another.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;If you have common C translation methods that you use, consider using &lt;code&gt;go generate&lt;/code&gt; with a helper script to create these in each package where it is required from a master source file. Not as nice as solution as having a common library but much better than manually updating files in multiple packages. &lt;/p&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-07-24T14:02:34.357"" CommentCount=""1"" />
",45282661
45282854,"45282854      <row Id=""45282854"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45283308"" PostTypeId=""2"" ParentId=""45282854"" CreationDate=""2017-07-24T14:34:11.047"" Score=""1"" Body=""&lt;p&gt;You need to create a service account in your project and furnish a new JSON private key. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then ensure that the &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt; environmental variable is set to the full path of this file. For example, on Linux:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS=/home/user/Downloads/key.json go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As an aside, it is best practice to make sure you protect access to this private key file and ensure the service account has the minimum privileges required to perform its role.&lt;/p&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-07-24T14:34:11.047"" CommentCount=""3"" />
",45283308
45286540,"45286540      <row Id=""45286540"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45286582"" PostTypeId=""2"" ParentId=""45286540"" CreationDate=""2017-07-24T17:26:07.307"" Score=""5"" Body=""&lt;p&gt;Through the closures all the goroutines share the same variable &lt;code&gt;i&lt;/code&gt;. Try that instead:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;sync&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    a := []string{&#xA;        &quot;apple&quot;,&#xA;        &quot;orange&quot;,&#xA;        &quot;grape&quot;,&#xA;        &quot;peach&quot;,&#xA;        &quot;lemon&quot;,&#xA;    }&#xA;&#xA;    wg := sync.WaitGroup{}&#xA;    wg.Add(len(a))&#xA;    for i, v := range a {&#xA;        go func(a string, j int) {&#xA;            fmt.Println(a, j)&#xA;            wg.Done()&#xA;        }(v,j)&#xA;    }&#xA;    wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Generally: In the program you posted you are reading &lt;code&gt;i&lt;/code&gt; and writing &lt;code&gt;i&lt;/code&gt; from different goroutines without any synchronisation. That is a data race. Anything could happen in that scenario.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The go race detector even yells at you&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go run -race test.go&#xA;apple 0&#xA;==================&#xA;WARNING: DATA RACE&#xA;Read at 0x00c420010268 by goroutine 7:&#xA;  main.main.func1()&#xA;      /home/erwo/test.go:22 +0x6d&#xA;&#xA;Previous write at 0x00c420010268 by goroutine 6:&#xA;  main.main.func1()&#xA;      /home/erwo/test.go:23 +0x191&#xA;&#xA;Goroutine 7 (running) created at:&#xA;  main.main()&#xA;      /home/erwo/test.go:25 +0x15f&#xA;&#xA;Goroutine 6 (finished) created at:&#xA;  main.main()&#xA;      /home/erwo/test.go:25 +0x15f&#xA;==================&#xA;orange 1&#xA;==================&#xA;WARNING: DATA RACE&#xA;Read at 0x00c420010268 by goroutine 8:&#xA;  main.main.func1()&#xA;      /home/erwo/test.go:22 +0x6d&#xA;&#xA;Previous write at 0x00c420010268 by goroutine 6:&#xA;  main.main.func1()&#xA;      /home/erwo/test.go:23 +0x191&#xA;&#xA;Goroutine 8 (running) created at:&#xA;  main.main()&#xA;      /home/erwo/test.go:25 +0x15f&#xA;&#xA;Goroutine 6 (finished) created at:&#xA;  main.main()&#xA;      /home/erwo/test.go:25 +0x15f&#xA;==================&#xA;peach 2&#xA;grape 2&#xA;lemon 4&#xA;Found 2 data race(s)&#xA;exit status 66&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7824574"" LastActivityDate=""2017-07-24T17:26:07.307"" CommentCount=""1"" />
",45286582
45287348,"45287348      <row Id=""45287348"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45288698"" PostTypeId=""2"" ParentId=""45287348"" CreationDate=""2017-07-24T19:35:52.913"" Score=""1"" Body=""&lt;p&gt;Your first option is fine and perhaps simplest to do. However, it could lead to poor performance with many readers as it could struggle to obtain a write lock.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As the comments on your question have stated, your second option (as-is) can cause a race condition and lead to unpredictable behaviour.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You could implement your second option by using &lt;a href=&quot;https://golang.org/pkg/sync/atomic/#Value&quot; rel=&quot;nofollow noreferrer&quot;&gt;atomic.Value&lt;/a&gt;. This would allow you to store the pointer to some data struct and atomically update this for the next readers to use. For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Data shared with readers&#xA;type data struct {&#xA;   // all the fields&#xA;}&#xA;&#xA;// Manager&#xA;type manager struct {&#xA;    v atomic.Value&#xA;}&#xA;&#xA;// Method used by readers to obtain a fresh copy of data to &#xA;// work with, e.g. inside loop&#xA;func (m *manager) Data() *data {&#xA;    return m.v.Load().(*data)&#xA;}&#xA;&#xA;// Internal method called to set new data for readers&#xA;func (m *manager) update() {&#xA;    d:=&amp;amp;data{&#xA;        // ... set values here&#xA;    }&#xA;    m.v.Store(d)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-07-24T19:35:52.913"" CommentCount=""0"" />
",45288698
45287088,"45287088      <row Id=""45287088"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45289727"" PostTypeId=""2"" ParentId=""45287088"" CreationDate=""2017-07-24T20:44:06.467"" Score=""1"" Body=""&lt;p&gt;Maybe this will work for you. Now you can get rid of your concurrent map. Here is a code snippet: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func myFunc() {&#xA;    //10 concurrent API calls&#xA;    sem := make(chan bool, 10)&#xA;    respCh := make(chan YOUR_RESP_TYPE, 10)&#xA;    var responses []YOUR_RESP_TYPE&#xA;&#xA;    for i := 0; i &amp;lt; N; i++ {&#xA;        sem &amp;lt;- true&#xA;        go func(i int) {&#xA;            defer func() {&#xA;                &amp;lt;-sem&#xA;            }()&#xA;            resp := slowAPICall(fmt.Sprintf(&quot;http://slow-api.me?%d&quot;,i))&#xA;            respCh &amp;lt;- resp&#xA;        }(i)&#xA;    }&#xA;&#xA;    respCollected := make(chan struct{})&#xA;    go func() {&#xA;        for i := 0; i &amp;lt; N; i++ {&#xA;            responses = append(responses, &amp;lt;-respCh)&#xA;        }&#xA;        close(respCollected)&#xA;    }()&#xA;&#xA;    &amp;lt;-respCollected&#xA;    tx,_ := db.Begin()&#xA;    for _, data := range responses {&#xA;        tx.Exec(&quot;Insert data into database&quot;)&#xA;    }&#xA;    tx.Commit()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Than we need to use one more goroutine that will collect all responses in some slice or map from a response channel.&lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastEditorUserId=""8279560"" LastEditDate=""2017-07-25T08:00:22.380"" LastActivityDate=""2017-07-25T08:00:22.380"" CommentCount=""3"" />
",45289727
45228766,"45228766      <row Id=""45228766"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45290518"" PostTypeId=""2"" ParentId=""45228766"" CreationDate=""2017-07-24T21:38:53.150"" Score=""0"" Body=""&lt;p&gt;Solution:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1) Remove the &quot;context&quot; import&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2) Import &quot;google.golang.org/appengine&quot;; see&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    [https://github.com/golang/appengine/blob/master/README.md][1]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;for more details re: the local appengine package installation&lt;/p&gt;&#xA;&#xA;&lt;p&gt;3) This function&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    http.HandleFunc(&quot;/&quot;, bqPage)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;calls&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    bqPage(w http.ResponseWriter, req *http.Request)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;as the handler function. Pass that second req parameter down to the code that builds / calls the bigquery client:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    ctx := appengine.NewContext(req)&#xA;&#xA;    // Get the projectID value from the Google Cloud Console:&#xA;&#xA;    projectID := &quot;--------------&quot;&#xA;&#xA;    // Create a client.&#xA;&#xA;    client, err := bigquery.NewClient(ctx, projectID)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Once you have the client object, you're in business.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;4) From a DOS window pointed to the directory hosting the main.go file, run&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    gcloud app deploy&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and then run the app with&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    gcloud app browse&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""3176071"" LastActivityDate=""2017-07-24T21:38:53.150"" CommentCount=""0"" />
",45290518
45290144,"45290144      <row Id=""45290144"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45291474"" PostTypeId=""2"" ParentId=""45290144"" CreationDate=""2017-07-24T23:11:20.427"" Score=""3"" Body=""&lt;p&gt;Below is a working example. The crux is to declare a struct type that matches your JSON.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You need to use a map type for your item since the key is not consistent.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;    &quot;net/http&quot;&#xA;)&#xA;&#xA;type Inventory struct {&#xA;    Success      bool                    `json:&quot;success&quot;`&#xA;    Items        map[string]*Item        `json:&quot;rgInventory&quot;`&#xA;    Descriptions map[string]*Description `json:&quot;rgDescriptions&quot;`&#xA;}&#xA;&#xA;type Item struct {&#xA;    ID         string `json:&quot;id&quot;`&#xA;    ClassID    string `json:&quot;classid&quot;`&#xA;    InstanceID string `json:&quot;instanceid&quot;`&#xA;    Amount     string `json:&quot;amount&quot;`&#xA;    Pos        int    `json:&quot;pos&quot;`&#xA;}&#xA;&#xA;type Description struct {&#xA;    Descriptions []struct {&#xA;        Value string `json:&quot;value&quot;`&#xA;    } `json:&quot;descriptions&quot;`&#xA;}&#xA;&#xA;func main() {&#xA;    res, err := http.Get(&quot;http://steamcommunity.com/profiles/76561198096365603/inventory/json/730/2&quot;)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    inventory := &amp;amp;Inventory{}&#xA;    if err := json.NewDecoder(res.Body).Decode(&amp;amp;inventory); err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    for _, item := range inventory.Descriptions {&#xA;        for _, d := range item.Descriptions {&#xA;            fmt.Printf(d.Value)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1817176"" LastEditorUserId=""1817176"" LastEditDate=""2017-07-24T23:19:57.620"" LastActivityDate=""2017-07-24T23:19:57.620"" CommentCount=""2"" />
",45291474
45293123,"45293123      <row Id=""45293123"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45294505"" PostTypeId=""2"" ParentId=""45293123"" CreationDate=""2017-07-25T05:21:25.297"" Score=""1"" Body=""&lt;p&gt;Plan internal data format to suit purpose of your application first, it should be convenient for next operations. All the application should work with internal data format and only specific input-output adapters should know about specific customers formats.&#xA;Then write adapters from custom data formats A, B, C, ... to convert to basic internal format. These adapters should be as thin as possible, they should have minimal logics - just convert data and nothing more. This way it will be easier to maintain them. &#xA;You are right - if you change internal format you have to review and possibly change all adapters. That's why they should be very thin.&#xA;Think which defaults can you have?&#xA;I recommend to start with few customer formats to debug all concepts. &#xA;Wheather make the solution as a set of microservices of as modules in a single monilith - has no much sense in this way. &lt;/p&gt;&#xA;"" OwnerUserId=""5165332"" LastActivityDate=""2017-07-25T05:21:25.297"" CommentCount=""0"" />
",45294505
45295185,"45295185      <row Id=""45295185"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45295960"" PostTypeId=""2"" ParentId=""45295185"" CreationDate=""2017-07-25T06:54:14.510"" Score=""2"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;Is there such a mechanism in go that allows me to do that?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;No there is not.&lt;/p&gt;&#xA;"" OwnerUserId=""1266756"" LastActivityDate=""2017-07-25T06:54:14.510"" CommentCount=""0"" />
",45295960
45288751,"45288751      <row Id=""45288751"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45297016"" PostTypeId=""2"" ParentId=""45288751"" CreationDate=""2017-07-25T07:46:54.397"" Score=""4"" Body=""&lt;p&gt;The goal to pass a pointer to something is if there is &lt;em&gt;need&lt;/em&gt; to modify the pointed value. (We also use pointers to avoid copying large data structures when passing, but that is just for optimization.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Like in this example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    var i int&#xA;    fmt.Println(i)&#xA;    inc(&amp;amp;i)&#xA;    fmt.Println(i)&#xA;}&#xA;&#xA;func inc(i *int) {&#xA;    *i++&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output is the expected (try it on the &lt;a href=&quot;https://play.golang.org/p/r339Y4Z5N6&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;0&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If parameter of &lt;code&gt;inc()&lt;/code&gt; would receive an &lt;code&gt;int&lt;/code&gt; only, it could only modify the copy and not the original value, and so the caller would not observe the changed value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Same goes with pointer to pointer to something. We use pointer to pointer to something, if we need to modify the pointed value, that is the pointed pointer. Like in this example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    var i *int&#xA;    fmt.Println(i)&#xA;    alloc(&amp;amp;i, 1)&#xA;    fmt.Println(i, *i)&#xA;&#xA;    setToNil(&amp;amp;i)&#xA;    fmt.Println(i)&#xA;}&#xA;&#xA;func alloc(i **int, initial int) {&#xA;    *i = new(int)&#xA;    **i = initial&#xA;}&#xA;&#xA;func setToNil(i **int) {&#xA;    *i = nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/97eCWAp8H2&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;nil&amp;gt;&#xA;0x1040a130 1&#xA;&amp;lt;nil&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The reason why pointer to pointer is not really used is because modifying a pointed value can be substituted by returning the value, and assigning it at the caller:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    var i *int&#xA;    fmt.Println(i)&#xA;    i = alloc(1)&#xA;    fmt.Println(i, *i)&#xA;&#xA;    i = setToNil()&#xA;    fmt.Println(i)&#xA;}&#xA;&#xA;func alloc(initial int) *int {&#xA;    i := new(int)&#xA;    *i = initial&#xA;    return i&#xA;}&#xA;&#xA;func setToNil() *int {&#xA;    return nil // Nothing to do here, assignment happens at the caller!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output is the same (address might be different) (try it on the &lt;a href=&quot;https://play.golang.org/p/Ajog_7R37I&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;nil&amp;gt;&#xA;0x1040a130 1&#xA;&amp;lt;nil&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This variant is easier to read and maintain, so this is clearly the favored and wide-spread alternative to functions having to modify a pointer value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In languages where functions and methods can only have 1 return value, it usually requires additional &quot;work&quot; if the function also wants to return other values besides the pointer, e.g. a wrapper is to be created to accommodate the multiple return values. But since Go supports multiple return values, need for pointer to pointer basically drops to zero as it can be substituted with returning the pointer that would be set to the pointed pointer; and it does not require additional work and does not make code less readable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is a very similar case to the builtin &lt;a href=&quot;https://golang.org/pkg/builtin/#append&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;append()&lt;/code&gt;&lt;/a&gt; function: it appends values to a slice. And since the slice value changes (its length increases, also the pointer in it may also change if a new backing array needs to be allocated), &lt;code&gt;append()&lt;/code&gt; returns the new slice value which you need to assign (if you want to keep the new slice).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See this related question where a pointer to pointer is proposed (but also returning a pointer is also viable / preferred): &lt;a href=&quot;https://stackoverflow.com/questions/35421495/golang-can-the-pointer-in-a-struct-pointer-method-be-reassigned-to-another-inst/35426997#35426997&quot;&gt;Golang: Can the pointer in a struct pointer method be reassigned to another instance?&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-25T08:01:50.743"" LastActivityDate=""2017-07-25T08:01:50.743"" CommentCount=""2"" />
",45297016
45296230,"45296230      <row Id=""45296230"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45297485"" PostTypeId=""2"" ParentId=""45296230"" CreationDate=""2017-07-25T08:10:31.897"" Score=""2"" Body=""&lt;p&gt;There are two possible approaches. Unit testing a handler isn't really viable as you would need to create a &lt;a href=&quot;https://godoc.org/github.com/valyala/fasthttp#RequestCtx&quot; rel=&quot;nofollow noreferrer&quot;&gt;RequestCtx&lt;/a&gt; and stub/mock all necessary fields.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead, I would unit test the code that your fasthttp handlers call out &#xA;to. I would do e2e testing of the actual handlers themselves. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is an &lt;a href=&quot;https://godoc.org/github.com/valyala/fasthttp/fasthttputil#InmemoryListener&quot; rel=&quot;nofollow noreferrer&quot;&gt;in memory listener&lt;/a&gt; implementation that you could use to avoid actually listening on a TCP port or Unix socket. You would initialise the server but serve on this listener instead of on a network connection.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You would then create a HTTP client and call the relevant methods as normal but use this listener as the transport.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you stub/fake anything that your handlers interact with then you could make this in-memory only with no external dependencies, i.e. like a unit test but it will actually doing a full system test. &lt;/p&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-07-25T08:10:31.897"" CommentCount=""1"" />
",45297485
45293485,"45293485      <row Id=""45293485"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45299068"" PostTypeId=""2"" ParentId=""45293485"" CreationDate=""2017-07-25T09:22:56.033"" Score=""3"" Body=""&lt;p&gt;You can use the &lt;code&gt;&quot;bytes&quot;.Join&lt;/code&gt; function from the standard library:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;result := bytes.Join(chunks, nil)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;First argument is your slice of slices (&lt;code&gt;[][]byte&lt;/code&gt;), second argument is the separator (aka glue). In your case, the separator is an empty slice of bytes (&lt;code&gt;nil&lt;/code&gt; works as well).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the playground: &lt;a href=&quot;https://play.golang.org/p/8pquRk7PDo&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/8pquRk7PDo&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1147580"" LastActivityDate=""2017-07-25T09:22:56.033"" CommentCount=""0"" />
",45299068
45299133,"45299133      <row Id=""45299133"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45299316"" PostTypeId=""2"" ParentId=""45299133"" CreationDate=""2017-07-25T09:33:06.777"" Score=""2"" Body=""&lt;p&gt;You can use the &lt;code&gt;map[string]interface{}&lt;/code&gt; result and typecast the relevant parts, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;o[&quot;ret&quot;].([]interface{})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;would get the array and continue so on. However, this is tedious and you need to check for values being set etc as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead, I'd recommend you use the handy &lt;a href=&quot;https://mholt.github.io/json-to-go/&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSON to Go tool&lt;/a&gt; that can automatically generate a struct definition for you to paste into your Go code when given some input JSON. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Obviously you might need to amend this to suit your needs as you know what valid formats the input can take. However, this tool saves a lot of tedious boilerplate code writing!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, for the JSON above, it generates:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type AutoGenerated struct {&#xA;    Profile struct {&#xA;        ExecutionTime int `json:&quot;execution_time&quot;`&#xA;        ServerName string `json:&quot;server_name&quot;`&#xA;    } `json:&quot;profile&quot;`&#xA;    Result string `json:&quot;result&quot;`&#xA;    Ret []struct {&#xA;        Alias string `json:&quot;alias&quot;`&#xA;        AllParents []int `json:&quot;all_parents&quot;`&#xA;        Bankrupt bool `json:&quot;bankrupt&quot;`&#xA;        Block bool `json:&quot;block&quot;`&#xA;        Card interface{} `json:&quot;card&quot;`&#xA;    } `json:&quot;ret&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-07-25T09:33:06.777"" CommentCount=""1"" />
",45299316
45279385,"45279385      <row Id=""45279385"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45302415"" PostTypeId=""2"" ParentId=""45279385"" CreationDate=""2017-07-25T11:50:09.750"" Score=""1"" Body=""&lt;p&gt;&lt;strong&gt;Use -trimpath flags to remove path information:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;CGO_ENABLED=0 go build -v -a -ldflags=&quot;-w -s&quot; \&#xA;    -gcflags=-trimpath=/Users/myuser/dev/go/src \&#xA;    -asmflags=-trimpath=/Users/myuser/dev/go/src \&#xA;    -o ./fooapi spikes/mongoapi.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;More Information:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Passing &lt;code&gt;-trimpath&lt;/code&gt; to &lt;code&gt;-gcflags&lt;/code&gt; and &lt;code&gt;-asmflags&lt;/code&gt; will remove any path information from the elf binary.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ go tool asm -help 2&amp;gt;&amp;amp;1 | grep -A1 trimpath&#xA;-trimpath string&#xA;    remove prefix from recorded source file paths&#xA;&#xA;$ go tool compile -help|grep -A1 trimpath&#xA;-trimpath string&#xA;    remove prefix from recorded source file paths&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;You can check the result with &lt;code&gt;go tool objdump&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ go tool objdump ./fooapi&#xA;.&#xA;.&#xA;TEXT main.init(SB) api/spikes/mongoapi.go&#xA;mongoapi.go:60  0x12768c0   65488b0c25a0080000  GS MOVQ GS:0x8a0, CX&#xA;mongoapi.go:60  0x12768c9   483b6110        CMPQ 0x10(CX), SP&#xA;mongoapi.go:60  0x12768cd   7663            JBE 0x1276932&#xA;.&#xA;.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Using &lt;code&gt;strip&lt;/code&gt; tool has still some controversies in go community, although it's been said that it's been fixed. Some say that unknown and unpredictable bugs occur sometimes. Read &lt;a href=&quot;https://github.com/moby/moby/blob/2a95488f7843a773de2b541a47d9b971a635bfff/project/PACKAGERS.md#stripping-binaries&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://go-review.googlesource.com/c/20584/3&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; for examples.&lt;/p&gt;&#xA;"" OwnerUserId=""115363"" LastActivityDate=""2017-07-25T11:50:09.750"" CommentCount=""0"" />
",45302415
45300938,"45300938      <row Id=""45300938"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45302652"" PostTypeId=""2"" ParentId=""45300938"" CreationDate=""2017-07-25T12:00:56.027"" Score=""3"" Body=""&lt;p&gt;You can use the &lt;code&gt;ioutil.ReadFile&lt;/code&gt; function for this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;io/ioutil&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    fd, err := ioutil.ReadFile(&quot;/var/run/utmpx&quot;)&#xA;    fmt.Println(string(fd), err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The problem in your original code is that you read into &lt;code&gt;data&lt;/code&gt; that is 0 bytes long. Since the reader interface reads only reads up to &lt;code&gt;len(data)&lt;/code&gt;, it reads nothing. More on that: &lt;a href=&quot;https://golang.org/pkg/io/#Reader&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/io/#Reader&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""248922"" LastEditorUserId=""248922"" LastEditDate=""2017-07-25T12:07:28.767"" LastActivityDate=""2017-07-25T12:07:28.767"" CommentCount=""0"" />
",45302652
45268681,"45268681      <row Id=""45268681"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45302920"" PostTypeId=""2"" ParentId=""45268681"" CreationDate=""2017-07-25T12:11:48.693"" Score=""1"" Body=""&lt;p&gt;Switch is not a bunch of ifs. It's more akin to &lt;code&gt;if {} else if {}&lt;/code&gt; construct, but with a couple of twists - namely &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;fallthrough&lt;/code&gt;. It's not possible to make switch execute first and third cases - a switch does not check each condition, it finds first match and executes it. That's all.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's primary purpose is to walk through a list of possible values and execute a different code for each value. In fact, in C (where switch statement came from) switch expression can only be of integral type and case values can only be constants that switch expression will be compared too. It's only relatively recently, languages started adding support for strings, boolean expressions etc in switch cases.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As to fallthrough logic it also comes from C. There is no fallthrough operator in C. In C execution falls through into next case (without checking case values) unless break operator encountered. The reason for this design is that sometimes you need to do something special and then do same steps as in another case. So, this design merely allows that. Unfortunately, it's rather rarely useful, so falling through by default was causing more trouble when programmer forgotten to put a break statement in, then actually helping when truly omitted that break intentionally. So, many modern languages change this logic to never fall through by default and to require explicit fallthrough statement if falling through is actually required.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately, it's a it hard to come up with a non contrived example of fallthrough being useful that would be short enough to fit into an answer. As I said it's relatively rare. But sometimes you need to write code similar to this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if x == a || x == b {&#xA;  if x == a {&#xA;    // do action a&#xA;  }&#xA;  // do action ab&#xA;} else if x == c {&#xA;   // do action c&#xA;} else if x == d {&#xA;  // do action d&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In fact, I needed code of similar structure quite recently in one of my projects. So, I used switch statement instead. And it looked like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;switch x {&#xA;  case a: // do action a&#xA;          fallthrough&#xA;  case b: // do action ab&#xA;  case c: // do action c&#xA;  case d: // do action d&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And your switch from the question is functionally equivalent to this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if 1 == 1 || 2 == 1 {&#xA;    if 1 == 1 {&#xA;        fmt.Println(&quot;1 == 1&quot;)&#xA;    }&#xA;    fmt.Println(&quot;2 == 1&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6375498"" LastActivityDate=""2017-07-25T12:11:48.693"" CommentCount=""1"" />
",45302920
45302935,"45302935      <row Id=""45302935"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45302980"" PostTypeId=""2"" ParentId=""45302935"" CreationDate=""2017-07-25T12:14:43.713"" Score=""6"" Body=""&lt;p&gt;If you want it to work on values, don't call &lt;code&gt;Type.Elem()&lt;/code&gt; on the reflect type. To handle both (pointers and non-pointers), check if it is of pointer type, and only then call &lt;code&gt;Type.Elem()&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;elemsType := reflect.TypeOf(obj)&#xA;if elemsType.Kind() == reflect.Ptr {&#xA;    elemsType = elemsType.Elem()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastActivityDate=""2017-07-25T12:14:43.713"" CommentCount=""1"" />
",45302980
45302931,"45302931      <row Id=""45302931"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45303050"" PostTypeId=""2"" ParentId=""45302931"" CreationDate=""2017-07-25T12:17:17.933"" Score=""3"" Body=""&lt;p&gt;It's because you you don't close the stdin. Add &lt;code&gt;stdin.Close()&lt;/code&gt; after &lt;code&gt;io.Copy&lt;/code&gt;. &lt;code&gt;cat&lt;/code&gt; will then terminate.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, I know it's just an example but there is absolutely no error checking. I assume that's just for illustration purposes. :-)&lt;/p&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-07-25T12:17:17.933"" CommentCount=""1"" />
",45303050
45302708,"45302708      <row Id=""45302708"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45303524"" PostTypeId=""2"" ParentId=""45302708"" CreationDate=""2017-07-25T12:37:12.073"" Score=""3"" Body=""&lt;p&gt;Slices in Go are dynamically-sized, you shouldn't treat them like arrays.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the first loop don't use &lt;code&gt;len(dadhu)&lt;/code&gt; to initialize the slice if you don't know the exact size. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead, make an empty slice:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;patu[c.DadID] = make([]map[string]string, 0)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In the second loop, append maps to it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;patu[c.DadID] = append(patu[c.DadID], map[string]string{&quot;id&quot;: cID, &quot;name&quot;: c.Name})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4283005"" LastEditorUserId=""4283005"" LastEditDate=""2017-07-26T07:43:38.567"" LastActivityDate=""2017-07-26T07:43:38.567"" CommentCount=""1"" />
",45303524
45303326,"45303326      <row Id=""45303326"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45304122"" PostTypeId=""2"" ParentId=""45303326"" CreationDate=""2017-07-25T12:59:05.140"" Score=""5"" Body=""&lt;p&gt;That's a case when you need to implement custom marshal und unmarshal functions.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;UnmarshalJSON(b []byte) error { ... }&#xA;&#xA;MarshalJSON() ([]byte, error) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;By following the example in the Golang documentation of &lt;a href=&quot;https://golang.org/pkg/encoding/json/#pkg-overview&quot; rel=&quot;nofollow noreferrer&quot;&gt;json package&lt;/a&gt; you get something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// first create a type alias&#xA;type JsonBirthDate time.Time&#xA;&#xA;// Add that to your struct&#xA;type Person struct {&#xA;    Name string `json:&quot;name&quot;`&#xA;    BirthDate JsonBirthDate `json:&quot;birth_date&quot;`&#xA;}&#xA;&#xA;// imeplement Marshaler und Unmarshalere interface&#xA;func (j *JsonBirthDate) UnmarshalJSON(b []byte) error {&#xA;    s := strings.Trim(string(b), &quot;\&quot;&quot;)&#xA;    t, err := time.Parse(&quot;2006-01-02&quot;, s)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;    *j = JB(t)&#xA;    return nil&#xA;}&#xA;&#xA;func (j JsonBirthDate) MarshalJSON() ([]byte, error) {&#xA;    return json.Marshal(j)&#xA;}&#xA;&#xA;// Maybe a Format function for printing your date&#xA;func (j JsonBirthDate) Format(s string) string {&#xA;    t := time.Time(j)&#xA;    return t.Format(s)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1188357"" LastEditorUserId=""1188357"" LastEditDate=""2017-07-25T13:12:30.263"" LastActivityDate=""2017-07-25T13:12:30.263"" CommentCount=""5"" />
",45304122
45306497,"45306497      <row Id=""45306497"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45306574"" PostTypeId=""2"" ParentId=""45306497"" CreationDate=""2017-07-25T14:41:59.153"" Score=""5"" Body=""&lt;p&gt;Deadlock may easily occur if one method of &lt;code&gt;cache&lt;/code&gt; calls another method, and both contain the &lt;code&gt;Lock()&lt;/code&gt; call.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See this example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (this *cache) f1() {&#xA;    this.mutex.Lock()&#xA;    defer this.mutex.Unlock()&#xA;    this.f2()&#xA;}&#xA;&#xA;func (this *cache) f2() {&#xA;    this.mutex.Lock()&#xA;    defer this.mutex.Unlock()&#xA;}&#xA;&#xA;func main() {&#xA;    c := &amp;amp;cache{}&#xA;    c.Init()&#xA;    c.f1()&#xA;    fmt.Println(&quot;Hello, playground&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/RR_ohOhnot&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fatal error: all goroutines are asleep - deadlock!&#xA;&#xA;goroutine 1 [semacquire]:&#xA;sync.runtime_SemacquireMutex(0x1040a12c, 0x8)&#xA;    /usr/local/go/src/runtime/sema.go:62 +0x40&#xA;sync.(*Mutex).Lock(0x1040a128, 0x10429f5c)&#xA;    /usr/local/go/src/sync/mutex.go:87 +0xa0&#xA;main.(*cache).f2(0x10429f94, 0x1100c0)&#xA;    /tmp/sandbox647646735/main.go:23 +0x40&#xA;main.(*cache).f1(0x10429f94, 0xdf6e0)&#xA;    /tmp/sandbox647646735/main.go:19 +0xa0&#xA;main.main()&#xA;    /tmp/sandbox647646735/main.go:30 +0x60&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that there does not need to have a direct call from one method to the other, it may also be a transitive call. For example &lt;code&gt;cache.f1()&lt;/code&gt; may call &lt;code&gt;foo()&lt;/code&gt; which may be a &quot;standalone&quot; function, and if &lt;code&gt;foo()&lt;/code&gt; calls &lt;code&gt;cache.f2()&lt;/code&gt;, we're at the same deadlock.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Improvements:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Don't name your receiver &lt;code&gt;this&lt;/code&gt;, it is not idiomatic. You may simply call it &lt;code&gt;c&lt;/code&gt;. Read more about it here: &lt;a href=&quot;https://stackoverflow.com/questions/23482068/in-go-is-naming-the-receiver-variable-self-misleading-or-good-practice/23494386#23494386&quot;&gt;In Go is naming the receiver variable &amp;#39;self&amp;#39; misleading or good practice?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may embed mutexes, making it convenient to use and eliminate the need for initialization. Read more about it here: &lt;a href=&quot;https://stackoverflow.com/questions/44949467/when-do-you-embed-mutex-in-struct-in-go/44950096#44950096&quot;&gt;When do you embed mutex in struct in Go?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type cache struct {&#xA;    sync.Mutex&#xA;}&#xA;&#xA;func (c *cache) f1() {&#xA;    c.Lock()&#xA;    defer c.Unlock()&#xA;    c.f2()&#xA;}&#xA;&#xA;func (c *cache) f2() {&#xA;    c.Lock()&#xA;    defer c.Unlock()&#xA;}&#xA;&#xA;func main() {&#xA;    c := &amp;amp;cache{}&#xA;    c.f1()&#xA;    fmt.Println(&quot;Hello, playground&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Of course this also causes a deadlock. Try it on the &lt;a href=&quot;https://play.golang.org/p/6RICGd0Fwm&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;. Also note that this inherently exposes the mutex (as the embedded type starts with lowecae letter), so anyone will be able to call the &lt;code&gt;Lock()&lt;/code&gt; and &lt;code&gt;Unlock()&lt;/code&gt; methods. Depends on case whether this is a problem.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-25T15:31:50.147"" LastActivityDate=""2017-07-25T15:31:50.147"" CommentCount=""5"" />
",45306574
45308108,"45308108      <row Id=""45308108"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45308172"" PostTypeId=""2"" ParentId=""45308108"" CreationDate=""2017-07-25T15:52:29.743"" Score=""6"" Body=""&lt;p&gt;From the &lt;a href=&quot;https://caddyserver.com/docs/proxy&quot; rel=&quot;noreferrer&quot;&gt;caddy docs&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;strong&gt;to&lt;/strong&gt; is the destination endpoint to proxy to. At least one is required,&#xA;  but multiple may be specified. If a scheme (http/https) is not&#xA;  specified, http is used. Unix sockets may also be used by prefixing&#xA;  &quot;unix:&quot;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So maybe it is sending &lt;strong&gt;http&lt;/strong&gt; requests to the proxied &lt;strong&gt;https&lt;/strong&gt; endpoint.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Does &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mysite.com {&#xA;    proxy / https://localhost:9000 {&#xA;        max_fails 1&#xA;    }&#xA;    log logfile&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;fix it?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If that is the case, you may not strictly need your app on :9000 to listen https. It may simplify your deployment or cert management to just have it listen http and have caddy manage all the certs.&lt;/p&gt;&#xA;"" OwnerUserId=""121660"" LastActivityDate=""2017-07-25T15:52:29.743"" CommentCount=""4"" />
",45308172
45310156,"45310156      <row Id=""45310156"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45310432"" PostTypeId=""2"" ParentId=""45310156"" CreationDate=""2017-07-25T17:53:08.537"" Score=""2"" Body=""&lt;p&gt;That definitely won't work. GOPATH isn't just the path of some project; it's the root of a directory, which contains &lt;code&gt;bin&lt;/code&gt;, &lt;code&gt;pkg&lt;/code&gt;, and &lt;code&gt;src&lt;/code&gt; directories; the &lt;code&gt;src&lt;/code&gt; directory contains package-named directories for projects. So you should be running &lt;code&gt;godep&lt;/code&gt; from your project directory, which (given your current GOPATH) should be &lt;code&gt;/Users/sarath/project/src/&amp;lt;repopath&amp;gt;&lt;/code&gt; - e.g. &lt;code&gt;/Users/sarath/project/src/github.com/sarath/myproject&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-25T17:53:08.537"" CommentCount=""0"" />
",45310432
45310329,"45310329      <row Id=""45310329"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45310587"" PostTypeId=""2"" ParentId=""45310329"" CreationDate=""2017-07-25T18:01:32.390"" Score=""3"" Body=""&lt;p&gt;They are related but not identical.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;InDelta&lt;/code&gt; receives an absolute value and checks that the difference is less than that value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;InEpsilon&lt;/code&gt; receives a % of difference that would be acceptable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The behaviour of &lt;code&gt;InDelta&lt;/code&gt; is quite straightforward:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;InDelta(t, 100, 101, 2) // that's OK&#xA;InDelta(t, 100, 103, 2) // fail!&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But sometimes, you just care that the actual value is not too far away from the expected value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Depending on how small or large the expected value is &quot;not too far away&quot; might get tricky with &lt;code&gt;InDelta&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It might be a problem to use the same &lt;code&gt;delta&lt;/code&gt; value for any number:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;InDelta(t, 100, 101, 2) // ok, 101 is &quot;not too far away&quot; from 100&#xA;InDelta(t,   1,   2, 2) // hm, 2 sounds &quot;too far away&quot; from 1...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you use &lt;code&gt;InEpsilon&lt;/code&gt;, you can always use the same %:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;InEpsilon(t, 100, 101, 0.02) // ok, up to 102 would be acceptable&#xA;InEpsilon(t,   1,   2, 0.02) // will not pass.. this time up to 1.02 would be acceptable&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In summary, the use case for &lt;code&gt;ÌnEpsilon&lt;/code&gt; is to discard small differences (and making &quot;small&quot; relative to the actual values compared).&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-25T18:01:32.390"" CommentCount=""1"" />
",45310587
45287975,"45287975      <row Id=""45287975"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45310694"" PostTypeId=""2"" ParentId=""45287975"" CreationDate=""2017-07-25T18:06:38.353"" Score=""0"" Body=""&lt;p&gt;I like to do this way:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;Establish Continuous Integration. If your project is Open Source, you may use services like &lt;a href=&quot;https://travis-ci.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Travis CI&lt;/a&gt; - it has very easy installation. This helps you to see how changes affect code.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Set code test coverage. It allows you to see what  source code lines are covered with tests and what are not and where very possible bugs will emerge. Of course, code coverage tool is not a panacea. And if line was checked it doesn't mean it is absolutely ok, and it will not fail with other input. But it helps much to maintain good code and look for bugs. For open source you may use coveralls.io. There's a special &lt;a href=&quot;https://github.com/mattn/goveralls&quot; rel=&quot;nofollow noreferrer&quot;&gt;goveralls&lt;/a&gt; plugin for it.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;To help the problem above you may use so-called Fuzzy testing - exploratory tests with random input to find a root cause. There're standard &lt;a href=&quot;https://golang.org/pkg/testing/quick/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/testing/quick/&lt;/a&gt; and non-standard packages &lt;a href=&quot;https://github.com/dvyukov/go-fuzz&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/dvyukov/go-fuzz&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Then I experiment with tests, they are both positive and negative. I try check situation with errors, timeouts, incorrect replies.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For my tests I've used as usual client &lt;code&gt;http&lt;/code&gt; so &lt;code&gt;httptest&lt;/code&gt; package.&lt;/p&gt;&#xA;"" OwnerUserId=""5165332"" LastActivityDate=""2017-07-25T18:06:38.353"" CommentCount=""0"" />
",45310694
45313167,"45313167      <row Id=""45313167"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45313209"" PostTypeId=""2"" ParentId=""45313167"" CreationDate=""2017-07-25T20:47:24.290"" Score=""2"" Body=""&lt;p&gt;Fields need to be exported (declared with an uppercase first letter) or the reflection library cannot edit them. Since the JSON (un)marshaller uses reflection, it cannot read or write unexported fields.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So yes, it is expected, and no, you cannot change it. Sorry.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can add tags to a field to change the name the marshaller uses:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Model string `json:&quot;model&quot;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://golang.org/pkg/encoding/json/&quot; rel=&quot;nofollow noreferrer&quot;&gt;the documentation&lt;/a&gt; for more info on the field tags &quot;encoding/json&quot; supports.&lt;/p&gt;&#xA;"" OwnerUserId=""1094529"" LastActivityDate=""2017-07-25T20:47:24.290"" CommentCount=""2"" />
",45313209
45313231,"45313231      <row Id=""45313231"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45313967"" PostTypeId=""2"" ParentId=""45313231"" CreationDate=""2017-07-25T21:41:06.023"" Score=""1"" Body=""&lt;p&gt;I think you want:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for _ , i := range result {&#xA;    for  _, j := range i.Host {&#xA;        if j.Status == &quot;good&quot; {&#xA;            server := j.Ip&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1094529"" LastEditorUserId=""1094529"" LastEditDate=""2017-07-25T21:48:18.460"" LastActivityDate=""2017-07-25T21:48:18.460"" CommentCount=""0"" />
",45313967
45314609,"45314609      <row Id=""45314609"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45314992"" PostTypeId=""2"" ParentId=""45314609"" CreationDate=""2017-07-25T23:24:32.303"" Score=""1"" Body=""&lt;p&gt;Your problem here is that the test engine is not running your executable with the working directory you expect. Instead of using the working directory defined by your shell or IDE, it is setting it to the source directory of the code being tested. (I had this bite me too once, long ago :) I had almost forgotten about that...)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The simple solution is to change &lt;code&gt;DerivePath&lt;/code&gt; so that you can set the prefix externally, then change it to a the path you need at the beginning of your tests. There are other (possibly better?) solutions of course.&lt;/p&gt;&#xA;"" OwnerUserId=""1094529"" LastActivityDate=""2017-07-25T23:24:32.303"" CommentCount=""1"" />
",45314992
45317074,"45317074      <row Id=""45317074"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45317241"" PostTypeId=""2"" ParentId=""45317074"" CreationDate=""2017-07-26T04:03:06.360"" Score=""1"" Body=""&lt;p&gt;First, it's a slice not an array. Arrays and slices in Go are very different, arrays have a fixed size that is part of the type. I had trouble with this at first too :)&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Not really. Any if the three is correct, and any difference should be too small to worry about. In my own code I generally use whatever is easiest in a particular case.&lt;/li&gt;&#xA;&lt;li&gt;0&lt;/li&gt;&#xA;&lt;li&gt;Nothing, until you need to add an item, then whatever it costs to allocate the storage needed.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""1094529"" LastActivityDate=""2017-07-26T04:03:06.360"" CommentCount=""4"" />
",45317241
45316699,"45316699      <row Id=""45316699"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45319489"" PostTypeId=""2"" ParentId=""45316699"" CreationDate=""2017-07-26T06:50:12.503"" Score=""0"" Body=""&lt;p&gt;You do not need to create a local variables for each field, just create a struct and use it to read data into and use a slice to accumulate results:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// struct definition must be out of functions body&#xA;type newR struct {&#xA;    id string&#xA;    eventid string&#xA;    excel_id string&#xA;    userid string&#xA;    hallid string&#xA;}&#xA;&#xA;var newRs []newR&#xA;for rows.Next() {&#xA;    var current newR&#xA;    err = rows.Scan(&amp;amp;current.id, &amp;amp;current.eventid, &amp;amp;current.excel_id, &amp;amp;current.userid, &amp;amp;current.hallid)&#xA;    newRs = append(newRs, r)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And also it is better to check for errors after &lt;code&gt;rows.Next()&lt;/code&gt; and &lt;code&gt;rows.Scan(...)&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastActivityDate=""2017-07-26T06:50:12.503"" CommentCount=""0"" />
",45319489
45318603,"45318603      <row Id=""45318603"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45321654"" PostTypeId=""2"" ParentId=""45318603"" CreationDate=""2017-07-26T08:39:24.917"" Score=""2"" Body=""&lt;p&gt;I think you're going about this the wrong way. If you were wanting to use the C library, you would use the C library to read the file.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Don't use cgo purely to have struct definitions, you should create these in Go yourself. You could then write the appropriate marshal / unmarshal code to read from the raw bytes. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;A quick Google shows that someone has already done the work required to convert a look of the relevant C library to Go. See the &lt;a href=&quot;https://github.com/ericlagergren/go-gnulib/tree/master/utmp&quot; rel=&quot;nofollow noreferrer&quot;&gt;utmp repository&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A short example of how this could be used is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;bytes&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;&#xA;    &quot;github.com/ericlagergren/go-gnulib/utmp&quot;&#xA;)&#xA;&#xA;func handleError(err error) {&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;}&#xA;&#xA;func byteToStr(b []byte) string {&#xA;    i := bytes.IndexByte(b, 0)&#xA;    if i == -1 {&#xA;        i = len(b)&#xA;    }&#xA;    return string(b[:i])&#xA;}&#xA;&#xA;func main() {&#xA;    list, err := utmp.ReadUtmp(utmp.UtmpxFile, 0)&#xA;    handleError(err)&#xA;    for _, u := range list {&#xA;        fmt.Println(byteToStr(u.User[:]))&#xA;    }&#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can view the &lt;a href=&quot;https://godoc.org/github.com/ericlagergren/go-gnulib/utmp&quot; rel=&quot;nofollow noreferrer&quot;&gt;GoDoc&lt;/a&gt; for the &lt;code&gt;utmp&lt;/code&gt; package for more information.&lt;/p&gt;&#xA;"" OwnerUserId=""8356442"" LastEditorUserId=""8356442"" LastEditDate=""2017-07-26T09:09:51.767"" LastActivityDate=""2017-07-26T09:09:51.767"" CommentCount=""6"" />
",45321654
45307076,"45307076      <row Id=""45307076"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45322390"" PostTypeId=""2"" ParentId=""45307076"" CreationDate=""2017-07-26T09:10:20.563"" Score=""0"" Body=""&lt;p&gt;Okay! &#xA;The problem come from the imports. In the code some imports was calling old version of the code. &lt;/p&gt;&#xA;"" OwnerUserId=""5899150"" LastActivityDate=""2017-07-26T09:10:20.563"" CommentCount=""0"" />
",45322390
45321981,"45321981      <row Id=""45321981"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45322853"" PostTypeId=""2"" ParentId=""45321981"" CreationDate=""2017-07-26T09:28:43.843"" Score=""1"" Body=""&lt;p&gt;On the assumption that your input is space separated signed integers (in base 10), try the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;s := bufio.NewScanner(os.StdIn)&#xA;s.Split(bufio.ScanWords)&#xA;i := 0&#xA;for s.Scan() &amp;amp;&amp;amp; i &amp;lt; n {&#xA;    dest[i], _ = strconv.ParseInt(s.Text(), 10, 64)&#xA;    i++&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This shows with a quick benchmark to be about 5 times faster than using &lt;code&gt;fmt.Scanf&lt;/code&gt;. It could probably be further optimised by writing a custom split function that did not worry about parsing UTF-8 runes and simply split on &lt;code&gt;' '&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-07-26T09:28:43.843"" CommentCount=""0"" />
",45322853
45323772,"45323772      <row Id=""45323772"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45323824"" PostTypeId=""2"" ParentId=""45323772"" CreationDate=""2017-07-26T10:07:49.050"" Score=""3"" Body=""&lt;p&gt;You have to use forward slashes &lt;code&gt;/&lt;/code&gt; in import paths (of import declarations), even if you're on Windows.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Import_declarations&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: Import declarations:&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Implementation restriction: A compiler may restrict ImportPaths to non-empty strings using only characters belonging to &lt;a href=&quot;http://www.unicode.org/versions/Unicode6.3.0/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Unicode's&lt;/a&gt; L, M, N, P, and S general categories (the Graphic characters without spaces) and &lt;strong&gt;may also exclude the characters &lt;code&gt;!&quot;#$%&amp;amp;'()*,:;&amp;lt;=&amp;gt;?[\]^&lt;/code&gt;{|}` and the Unicode replacement character U+FFFD&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Any compiler may exclude the backslash &lt;code&gt;\&lt;/code&gt; character among others. Even if you would use one that doesn't, your code would not be portable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So instead try:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import (&#xA;    pb &quot;github.com/sewelol/sgx-decryption-service/decryptionservice&quot;&#xA;    dev &quot;github.com/sewelol/sgx-decryption-service/device&quot;&#xA;    &quot;google.golang.org/rpc&quot;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-26T13:03:58.267"" LastActivityDate=""2017-07-26T13:03:58.267"" CommentCount=""0"" />
",45323824
45314871,"45314871      <row Id=""45314871"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45324345"" PostTypeId=""2"" ParentId=""45314871"" CreationDate=""2017-07-26T10:29:14.587"" Score=""0"" Body=""&lt;p&gt;Make sure you have your sort pipeline stage &lt;em&gt;before&lt;/em&gt; your limit &amp;amp; skip stages. You can only reliably obtain the same results with limit/skip on sorted input. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Realised that you are using &lt;code&gt;bson.M {&quot;pro&quot;: -1, &quot;check&quot;: -1}&lt;/code&gt; to define your sort order. The iteration order of a map is unspecified in Go and can change. Hence this is probably why you are getting inconsistent results.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try changing this to a &lt;code&gt;bson.D&lt;/code&gt; so that the order of columns to sort by is maintained.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It make help to see how the query &lt;a href=&quot;http://bazaar.launchpad.net/+branch/mgo/v2/view/head:/session.go#L2130&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sort&lt;/a&gt; method constructs this from the strings you provide.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For your use case, you would change the &lt;code&gt;or&lt;/code&gt; variable to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;or := bson.M{&#xA;    &quot;$sort&quot;: bson.D{&#xA;        bson.DocElem{Name: &quot;pro&quot;, Value: -1},&#xA;        bson.DocElem{Name: &quot;check&quot;, Value: -1},&#xA;     },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8356442"" LastEditorUserId=""8356442"" LastEditDate=""2017-07-26T13:39:50.383"" LastActivityDate=""2017-07-26T13:39:50.383"" CommentCount=""7"" />
",45324345
45326078,"45326078      <row Id=""45326078"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45326273"" PostTypeId=""2"" ParentId=""45326078"" CreationDate=""2017-07-26T11:56:33.607"" Score=""2"" Body=""&lt;p&gt;You can find a few examples in the &lt;a href=&quot;https://github.com/olivere/elastic/blob/504b3df94cbedf3cd45dc543e93fd33f603d1809/bulk_test.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;test classes&lt;/a&gt; and is pretty well &lt;a href=&quot;https://github.com/olivere/elastic/wiki/BulkIndex&quot; rel=&quot;nofollow noreferrer&quot;&gt;explained in the wiki&lt;/a&gt;. It goes like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;indexName := &quot;someindex&quot;&#xA;typeName  := &quot;sometype&quot;&#xA;index1Req := NewBulkIndexRequest().Index(indexName).Type(typeName).Id(&quot;existing_id&quot;).Doc({...})&#xA;index2Req := NewBulkIndexRequest().Index(indexName).Type(typeName).Id(&quot;existing_id2&quot;).Doc({...})&#xA;&#xA;bulkRequest := client.Bulk()&#xA;bulkRequest = bulkRequest.Add(index1Req)&#xA;bulkRequest = bulkRequest.Add(index2Req)&#xA;&#xA;bulkResponse, err := bulkRequest.Do(context.TODO())&#xA;if err != nil {&#xA;    t.Fatal(err)&#xA;}&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4604579"" LastActivityDate=""2017-07-26T11:56:33.607"" CommentCount=""0"" />
",45326273
45328119,"45328119      <row Id=""45328119"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45328195"" PostTypeId=""2"" ParentId=""45328119"" CreationDate=""2017-07-26T13:17:42.363"" Score=""5"" Body=""&lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Struct_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;Embedding&lt;/a&gt; a type in a struct adds a field to the struct, and you can use the unqualified type name to refer to it (unqualified means omit the package name and the optional pointer sign).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;box := rated.Box&#xA;fmt.Printf(&quot;%T %+v&quot;, box, box)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/JCd4XNt2rC&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;main.Box {Name:foo}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that &lt;a href=&quot;https://golang.org/ref/spec#Assignments&quot; rel=&quot;nofollow noreferrer&quot;&gt;assignment&lt;/a&gt; copies the value, so the &lt;code&gt;box&lt;/code&gt; local variable will hold a copy of the value of the &lt;code&gt;RatedBox.Box&lt;/code&gt; field. If you want them to be the &quot;same&quot; (to point to the same &lt;code&gt;Box&lt;/code&gt; value), use a pointer, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;box := &amp;amp;rated.Box&#xA;fmt.Printf(&quot;%T %+v&quot;, box, box)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But here of course type of &lt;code&gt;box&lt;/code&gt; will be &lt;code&gt;*Box&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Or you may choose to embed the pointer type:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type RatedBox struct {&#xA;    *Box&#xA;    Points int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And then (try it on the &lt;a href=&quot;https://play.golang.org/p/HkVjCyb3e4&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;rated := RatedBox{Box: &amp;amp;Box{Name: &quot;foo&quot;}, Points: 10}&#xA;&#xA;box := rated.Box&#xA;fmt.Printf(&quot;%T %+v&quot;, box, box)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output of the last 2:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;*main.Box &amp;amp;{Name:foo}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-26T13:25:38.467"" LastActivityDate=""2017-07-26T13:25:38.467"" CommentCount=""1"" />
",45328195
45309074,"45309074      <row Id=""45309074"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45333234"" PostTypeId=""2"" ParentId=""45309074"" CreationDate=""2017-07-26T17:01:49.873"" Score=""0"" Body=""&lt;p&gt;Looks like updating to 1.9rc1 fixed it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I no longer have &lt;code&gt;[evm-specifiation-miner]&lt;/code&gt; in the profile (for the record, the top functions do not even come from my own package, so it is even weirder than they did not appear before).&lt;/p&gt;&#xA;"" OwnerUserId=""8362465"" LastEditorUserId=""4076315"" LastEditDate=""2017-07-27T02:52:56.343"" LastActivityDate=""2017-07-27T02:52:56.343"" CommentCount=""0"" />
",45333234
45333364,"45333364      <row Id=""45333364"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45333669"" PostTypeId=""2"" ParentId=""45333364"" CreationDate=""2017-07-26T17:23:07.967"" Score=""2"" Body=""&lt;p&gt;Its important to check the returned error always. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if err := xml.Unmarshal([]byte(xmlRawData), &amp;amp;xmlData); err != nil {&#xA;    fmt.Println(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The error you're getting is&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cannot unmarshal into interface {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Empty interface cannot be unmarshalled since the empty interface doesn't have any exported fields to map the xml keys/values to.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However there is way to get around. Implementing &lt;a href=&quot;https://golang.org/pkg/encoding/xml/#Unmarshaler&quot; rel=&quot;nofollow noreferrer&quot;&gt;xml.Unmarshaler&lt;/a&gt; interface on your &lt;code&gt;VendorMapInfo&lt;/code&gt; struct.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Example: Your updated code&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type VendorMapInfo struct {&#xA;    MapHierarchyString string      `xml:&quot;mapHierarchyString,attr&quot;`&#xA;    FloorRefID         interface{} `xml:&quot;floorRefId,attr&quot;`&#xA;    Image              Image       `xml:&quot;Image&quot;`&#xA;    FloorDimension     VendorFloorDimension&#xA;}&#xA;&#xA;type Image struct {&#xA;    Name string `xml:&quot;imageName,attr&quot;`&#xA;}&#xA;&#xA;func (mf *VendorMapInfo) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {&#xA;    // Attributes&#xA;    for _, attr := range start.Attr {&#xA;        switch attr.Name.Local {&#xA;        case &quot;mapHierarchyString&quot;:&#xA;            mf.MapHierarchyString = attr.Value&#xA;        case &quot;floorRefId&quot;:&#xA;            mf.FloorRefID = findFloorRefIDType(attr.Value)&#xA;        }&#xA;    }&#xA;&#xA;    for {&#xA;        token, err := d.Token()&#xA;        if err != nil {&#xA;            return err&#xA;        }&#xA;&#xA;        switch el := token.(type) {&#xA;        case xml.StartElement:&#xA;            if el.Name.Local == &quot;Image&quot; {&#xA;                item := new(Image)&#xA;                if err = d.DecodeElement(item, &amp;amp;el); err != nil {&#xA;                    return err&#xA;                }&#xA;                mf.Image = *item&#xA;            }&#xA;        case xml.EndElement:&#xA;            if el == start.End() {&#xA;                return nil&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Complete code, play link: &lt;a href=&quot;https://play.golang.org/p/wZQOsQv0Nq&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/wZQOsQv0Nq&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{Locations:{Space: Local:} WirelessClientLocation:[{MacAddress:00:00:00:00:00:00 MapInfo:{MapHierarchyString:Head office&amp;gt;Ground floor&amp;gt;Store FloorRefID:-1122334455667789 Image:{Name:floorPlan1.png} FloorDimension:{Length:0 Width:0 Height:0 OffsetX:0 OffsetY:0 Unit:}}} {MacAddress:11:11:11:11:11:11 MapInfo:{MapHierarchyString:Head office&amp;gt;Ground floor&amp;gt;Store FloorRefID:-1122334455667789 Image:{Name:floorPlan1.png} FloorDimension:{Length:0 Width:0 Height:0 OffsetX:0 OffsetY:0 Unit:}}} {MacAddress:26:cd:96:46:0b:2b MapInfo:{MapHierarchyString: FloorRefID:0 Image:{Name:} FloorDimension:{Length:0 Width:0 Height:0 OffsetX:0 OffsetY:0 Unit:}}}]}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-07-26T18:30:21.990"" LastActivityDate=""2017-07-26T18:30:21.990"" CommentCount=""0"" />
",45333669
45334244,"45334244      <row Id=""45334244"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45334395"" PostTypeId=""2"" ParentId=""45334244"" CreationDate=""2017-07-26T18:03:46.717"" Score=""3"" Body=""&lt;p&gt;If you need to support arbitrary levels of pointers then you can use reflection to get the value object:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;v:=reflect.ValueOf(obj)&#xA;for v.Kind() == reflect.Ptr {&#xA;    v = v.Elem()&#xA;}&#xA;v.Interface()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, this is quite unusual to actually need to do in practice. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;For your function, this could work as something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func TestFunc(obj interface{}){&#xA;    rv := reflect.ValueOf(obj)&#xA;    switch rv.Kind() {&#xA;        case reflect.Struct:&#xA;            // code here&#xA;            return&#xA;        case reflect.Ptr:&#xA;            TestFunc(rv.Elm().Interface()) &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8356442"" LastEditorUserId=""8356442"" LastEditDate=""2017-07-26T18:24:55.503"" LastActivityDate=""2017-07-26T18:24:55.503"" CommentCount=""0"" />
",45334395
45334968,"45334968      <row Id=""45334968"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45335515"" PostTypeId=""2"" ParentId=""45334968"" CreationDate=""2017-07-26T19:09:09.453"" Score=""1"" Body=""&lt;p&gt;What's going to be calling these? At some point there is an actual consumer, and that consumer will (presumably, based on your code) be using an interface (either &lt;code&gt;layer&lt;/code&gt; or an identical interface). If there's middleware, that interface will &lt;em&gt;necessarily be as generic as the middleware&lt;/em&gt; - i.e., taking a &lt;code&gt;interface{}&lt;/code&gt; as a parameter to &lt;code&gt;Run&lt;/code&gt;. So making something downstream more specific (besides not compiling as you've seen) doesn't make any sense: the actual consumer won't see the more-specific interface, it will see &lt;code&gt;Run(Context,interface{}) (interface{},error)&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-26T19:09:09.453"" CommentCount=""5"" />
",45335515
45335327,"45335327      <row Id=""45335327"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45337334"" PostTypeId=""2"" ParentId=""45335327"" CreationDate=""2017-07-26T20:59:57.497"" Score=""1"" Body=""&lt;p&gt;This is possibly the answer you are looking for. First off, you aren't using &lt;code&gt;termui&lt;/code&gt; correctly. You need to call it's &lt;code&gt;Loop&lt;/code&gt; function to start the &lt;code&gt;Event&lt;/code&gt; loop so that it can actually start listening for the &lt;code&gt;q&lt;/code&gt; key. &lt;code&gt;Loop&lt;/code&gt; is called last because it essentially takes control of the main goroutine from then on until &lt;code&gt;StopLoop&lt;/code&gt; is called and it quits.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In order to stop the goroutines, it is common to have a &quot;stop&quot; channel. Usually it is a &lt;code&gt;chan struct{}&lt;/code&gt; to save memory because you don't ever have to put anything in it. Wherever you want the goroutine to possibly stop and shutoff (or do something else perhaps), you use a &lt;code&gt;select&lt;/code&gt; statement with the &lt;code&gt;channel&lt;/code&gt;s you are using. This &lt;code&gt;select&lt;/code&gt; is ordered, so it will take from them in order unless they block, in which case it tries the next one, so the &lt;code&gt;stop&lt;/code&gt; &lt;code&gt;channel&lt;/code&gt; usually goes first. The &lt;code&gt;stop&lt;/code&gt; channel normally blocks, but to get it to take this path, simply &lt;code&gt;close()&lt;/code&gt;ing it will cause this path to be chosen in the &lt;code&gt;select&lt;/code&gt;. So we &lt;code&gt;close()&lt;/code&gt; it in the &lt;code&gt;q&lt;/code&gt; keyboard handler.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;github.com/gizak/termui&quot;&#xA;    &quot;strconv&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;func getData(ch chan string, stop chan struct{}) {&#xA;    i := 0&#xA;    for {&#xA;        select {&#xA;        case &amp;lt;-stop:&#xA;            break&#xA;        case ch &amp;lt;- strconv.Itoa(i):&#xA;        }&#xA;        i++&#xA;        time.Sleep(time.Second)&#xA;        if i == 20 {&#xA;            break&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;func Display(ch chan string, stop chan struct{}) {&#xA;&#xA;    for {&#xA;        var elem string&#xA;        select {&#xA;        case &amp;lt;-stop:&#xA;            break&#xA;        case elem = &amp;lt;-ch:&#xA;        }&#xA;        par := termui.NewPar(elem)&#xA;        par.Height = 5&#xA;        par.Width = 37&#xA;        par.Y = 4&#xA;        par.BorderLabel = &quot;term ui example with chan&quot;&#xA;        par.BorderFg = termui.ColorYellow&#xA;        termui.Render(par)&#xA;    }&#xA;}&#xA;&#xA;func main() {&#xA;    ch := make(chan string)&#xA;    stop := make(chan struct{})&#xA;    err := termui.Init()&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;    defer termui.Close()&#xA;    termui.Handle(&quot;/sys/kbd/q&quot;, func(termui.Event) {&#xA;        fmt.Println(&quot;q captured&quot;)&#xA;        close(stop)&#xA;        termui.StopLoop()&#xA;    })&#xA;    go getData(ch, stop)&#xA;    go Display(ch, stop)&#xA;    termui.Loop()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1276480"" LastActivityDate=""2017-07-26T20:59:57.497"" CommentCount=""4"" />
",45337334
45337881,"45337881      <row Id=""45337881"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45338208"" PostTypeId=""2"" ParentId=""45337881"" CreationDate=""2017-07-26T22:05:07.210"" Score=""1"" Body=""&lt;p&gt;I might do something like this..&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func sendUser(user string, ch chan&amp;lt;- string, wg *sync.WaitGroup) {&#xA;    defer wg.Done()&#xA;    resp, err := http.Get(&quot;URL/&quot; + user)&#xA;    if err != nil {&#xA;        log.Println(&quot;err handle it&quot;)&#xA;    }&#xA;    defer resp.Body.Close()&#xA;    b, err := ioutil.ReadAll(resp.Body)&#xA;    if err != nil {&#xA;        log.Println(&quot;err handle it&quot;)&#xA;    }&#xA;    ch &amp;lt;- string(b)&#xA;}&#xA;&#xA;func AsyncHTTP(users []string) ([]string, error) {&#xA;    ch := make(chan string)&#xA;    var responses []string&#xA;    var user string&#xA;    var wg sync.WaitGroup&#xA;    for _, user = range users {&#xA;        wg.Add(1)&#xA;        go sendUser(user, ch, &amp;amp;wg)&#xA;    }&#xA;&#xA;    // close the channel in the background&#xA;    go func() {&#xA;        wg.Wait()&#xA;        close(ch)&#xA;    }()&#xA;    // read from channel as they come in until its closed&#xA;    for res := range ch {&#xA;        responses = append(responses, res)&#xA;    }&#xA;&#xA;    return responses, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It allows to read from the channel as they are sent.  By using a waitgroup I'll know when to close the channel. By putting the waitgroup and close in a goroutine I can read from the channel in &quot;realtime&quot; without blocking.&lt;/p&gt;&#xA;"" OwnerUserId=""4639336"" LastActivityDate=""2017-07-26T22:05:07.210"" CommentCount=""4"" />
",45338208
45338830,"45338830      <row Id=""45338830"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45339705"" PostTypeId=""2"" ParentId=""45338830"" CreationDate=""2017-07-27T01:02:25.447"" Score=""1"" Body=""&lt;p&gt;No, the best way is to serve the template then populate it using ajax calls to an endpoint that returns json with the data you want to use.&lt;/p&gt;&#xA;"" OwnerUserId=""145587"" LastActivityDate=""2017-07-27T01:02:25.447"" CommentCount=""1"" />
",45339705
45342640,"45342640      <row Id=""45342640"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45342748"" PostTypeId=""2"" ParentId=""45342640"" CreationDate=""2017-07-27T06:18:28.013"" Score=""3"" Body=""&lt;p&gt;You should create a Repository struct by cloning a repo: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import {&#xA;  git &quot;github.com/src-d/go-git&quot;&#xA;}&#xA;&#xA;repo, err := git.Clone(memory.NewStorage(), nil, &amp;amp;git.CloneOptions{&#xA;    URL: &quot;https://github.com/src-d/go-siva&quot;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And then on the repo struct call Pull.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;err := repo.Pull(&amp;amp;git.PullOptions{&#xA;    RemoteName: &quot;origin&quot;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You cannot call &lt;code&gt;git.Pull&lt;/code&gt; directly.&lt;/p&gt;&#xA;"" OwnerUserId=""3310285"" LastEditorUserId=""3310285"" LastEditDate=""2017-07-27T06:57:13.740"" LastActivityDate=""2017-07-27T06:57:13.740"" CommentCount=""1"" />
",45342748
45345006,"45345006      <row Id=""45345006"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45346007"" PostTypeId=""2"" ParentId=""45345006"" CreationDate=""2017-07-27T09:00:43.043"" Score=""1"" Body=""&lt;p&gt;What are you passing into &lt;code&gt;NewSession&lt;/code&gt; as the &lt;code&gt;ca&lt;/code&gt; parameter? This needs to be the PEM encoded CA certificate bytes, not the file name of the CA certificate.  &lt;code&gt;AppendCertsFromPEM&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt; if it managed to add any certificates to the pool.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The article already shows code to do this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if ca, err := ioutil.ReadFile(&quot;myPEM&quot;); err == nil { &#xA;    roots.AppendCertsFromPEM(ca)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The SSL error means that the client is rejecting the server certificate. I suspect it is because your self-signed certificate was not added to the pool correctly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I ran a copy of mongo locally with your config. Using docker, this was:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -ti -v $(pwd):/data/mongo --net=host mongo -f /data/mongo/mongo.yaml&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;When ran from where your configuration was extracted&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Using your &lt;code&gt;NewSession&lt;/code&gt; func inside Go showed that the &lt;code&gt;tls.Dial&lt;/code&gt; was returning an error due to the lack of any Subject Access Name (SAN) extensions as per my comment below.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You will need to correct your server certificate to have the appropriate host name (or IP address) SAN entries required. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can debug this and any other TLS connection errors that occur with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;dialInfo.DialServer = func(addr *mgo.ServerAddr) (net.Conn, error) {&#xA;    conn, err := tls.Dial(&quot;tcp&quot;, addr.String(), tlsConfig)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;    return conn, err&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8356442"" LastEditorUserId=""8356442"" LastEditDate=""2017-07-27T11:47:02.230"" LastActivityDate=""2017-07-27T11:47:02.230"" CommentCount=""6"" />
",45346007
45347894,"45347894      <row Id=""45347894"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45348025"" PostTypeId=""2"" ParentId=""45347894"" CreationDate=""2017-07-27T10:24:13.497"" Score=""3"" Body=""&lt;p&gt;There is an &lt;a href=&quot;https://golang.org/pkg/crypto/sha1/#New&quot; rel=&quot;nofollow noreferrer&quot;&gt;example&lt;/a&gt; of how to use it properly. You should do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;c := sha1.New()&#xA;io.WriteString(c, &quot;hello&quot;)&#xA;myBytes := c.Sum(nil)&#xA;fmt.Println(base64.StdEncoding.EncodeToString(myBytes))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/sELsWTcrdd&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/sELsWTcrdd&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1892060"" LastActivityDate=""2017-07-27T10:24:13.497"" CommentCount=""1"" />
",45348025
45350097,"45350097      <row Id=""45350097"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45350225"" PostTypeId=""2"" ParentId=""45350097"" CreationDate=""2017-07-27T12:01:33.807"" Score=""5"" Body=""&lt;p&gt;An interface value is a wrapper under the hood, a pair of the concrete value stored in the interface value and its type descriptor.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Read this for more information: &lt;a href=&quot;https://blog.golang.org/laws-of-reflection#TOC_3.&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Laws of Reflection #The representation of an interface&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So if you want to return a value of &lt;code&gt;interface{}&lt;/code&gt; type, an &lt;code&gt;interface{}&lt;/code&gt; value will be implicitly created (if the value being returned is not already of that type), which will hold the integer number and its type descriptor denoting the &lt;code&gt;int64&lt;/code&gt; type. You can't avoid this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;interface{}&lt;/code&gt; is a special interface type (having 0 methods). Its value is only 8 bytes as you see on the benchmark output. Other interface types have larger size (double) as they also have to identify the static method set of the interface type (besides the dynamic type and value).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also be sure to check out this informative answer: &lt;a href=&quot;https://stackoverflow.com/questions/23148812/go-whats-the-meaning-of-interface/23148998#23148998&quot;&gt;Go: What&amp;#39;s the meaning of interface{}?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want more information about the implementation / internals, I recommend this post: &lt;a href=&quot;http://www.tapirgames.com/blog/golang-interface-implementation&quot; rel=&quot;nofollow noreferrer&quot;&gt;How Interfaces Work in Golang&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-27T16:30:03.400"" LastActivityDate=""2017-07-27T16:30:03.400"" CommentCount=""1"" />
",45350225
45351208,"45351208      <row Id=""45351208"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45351271"" PostTypeId=""2"" ParentId=""45351208"" CreationDate=""2017-07-27T12:47:47.997"" Score=""4"" Body=""&lt;p&gt;If you want to capture the bytes as they are written, use an &lt;a href=&quot;https://golang.org/pkg/io/#MultiWriter&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.MultiWriter&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;bytes.Buffer&lt;/code&gt; as the second writer.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var buf bytes.Buffer&#xA;w := io.MultiWriter(codeFile, &amp;amp;buf)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or to see the file on stdout as it's written:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;w := io.MultiWriter(codeFile, os.Stdout)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Otherwise, if you want to re-read the same file, you need to seek back to the start after writing:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;codeFile.Seek(0, 0)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""32880"" LastEditorUserId=""32880"" LastEditDate=""2017-07-27T14:06:46.717"" LastActivityDate=""2017-07-27T14:06:46.717"" CommentCount=""2"" />
",45351271
45332625,"45332625      <row Id=""45332625"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45352445"" PostTypeId=""2"" ParentId=""45332625"" CreationDate=""2017-07-27T13:36:51.473"" Score=""1"" Body=""&lt;p&gt;You've stumbled onto a non-trivial problem. There are a lot of possible solutions, with different user experiences, implementation complexities, and side effects. This is a pretty big topic so this answer is intended mostly as a starting point for further research.&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;The Simplest Option&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;First, pretty much regardless of solution, you're going to have to give each long-running task a unique ID that the browser can use to get status updates later. The task runner itself can just flag jobs as complete, or it can periodically issue progress updates if you want to present progress to the user.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The easiest to implement is likely to have your form submission immediately respond with a page, with the task ID included in the URL, whose handler checks the task status and either a) returns a page with &quot;still working&quot; or something to that effect and auto-refreshes after a few seconds, or b) returns a page saying &quot;completed&quot; and does not refresh. This isn't terribly difficult to implement, but it's not particularly smooth, either. If this is a simple internal-use project with simple UX and operational requirements, I'd just do this. Otherwise, further down the rabbit hole we go!&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;Live Updates&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;You could do live updates without reloading the page by a few different methods:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Regular AJAX requests to check the status of the task, updating the UI based on the response. This would have a REST-style handler on the back end.&lt;/li&gt;&#xA;&lt;li&gt;You can use &lt;a href=&quot;https://godoc.org/golang.org/x/net/websocket&quot; rel=&quot;nofollow noreferrer&quot;&gt;WebSockets&lt;/a&gt; to do the same thing over a single connection.&lt;/li&gt;&#xA;&lt;li&gt;You can use HTTP long-polling to simulate WebSocket-like behavior, but this has generally been supplanted by WebSockets.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Either option will require both a handler to serve the status update information and some JavaScript wizardry on the front-end to call the handler, parse the response, and update the page.&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;Side-Effects&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Depending on the scale and requirements of this service, there are some side-effects to consider; mainly that a long-running task is effectively a kind of application state, making your application stateful, which has some severe operational downsides when it comes to availability, scaling, and deployment. If you're running multiple load-balanced instances you'll have to use sticky sessions or share task status between instances somehow.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The most common way to handle long-running tasks at scale is to separate the worker from the web application, using some kind of work queue (either in a database or a dedicated message broker like Rabbit or Kafka) to manage the tasks. This makes it a little more complicated to get status updates because you're working across processes, but it gives you a lot more flexibility operationally.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm guessing this is a more complicated answer than you expected to &quot;requests are timing out&quot;, but this is a case of a trivial issue with a non-trivial solution. You're certainly not alone in tackling this issue; researching handling long-running tasks in web applications will yield a ton of information you can leverage.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-07-27T13:36:51.473"" CommentCount=""1"" />
",45352445
45351644,"45351644      <row Id=""45351644"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45353346"" PostTypeId=""2"" ParentId=""45351644"" CreationDate=""2017-07-27T14:12:14.017"" Score=""1"" Body=""&lt;p&gt;Since you're dealing with ids from your own database and if you are certain there is no way someone could inject malicious &quot;ids&quot; into that code, don't use the placeholder &lt;code&gt;?&lt;/code&gt; and just use the &lt;code&gt;fmt&lt;/code&gt; package.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Sprintf(&quot;SELECT * from table2 where id in (%s)&quot;, asID)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;this will result in &lt;code&gt;SELECT * from table2 where id in (1,2,3,4...)&lt;/code&gt; as opposed to &lt;code&gt;SELECT * from table2 where id in ('1,2,3,4...')&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""965900"" LastActivityDate=""2017-07-27T14:12:14.017"" CommentCount=""1"" />
",45353346
45346641,"45346641      <row Id=""45346641"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45354151"" PostTypeId=""2"" ParentId=""45346641"" CreationDate=""2017-07-27T14:45:51.027"" Score=""0"" Body=""&lt;p&gt;The only reason your slice is sorted is because you're appending items in already sorted order. If you appended items in an unsorted order like this&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var mySlice = make([]string, 0)&#xA;mySlice = append(mySlice, &quot;mnop&quot;)&#xA;mySlice = append(mySlice, &quot;efgh&quot;)&#xA;mySlice = append(mySlice, &quot;uvwxyz&quot;)&#xA;mySlice = append(mySlice, &quot;ijkl&quot;)&#xA;mySlice = append(mySlice, &quot;abcd&quot;)&#xA;mySlice = append(mySlice, &quot;qrst&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(or populated a slice by pulling keys from a map, which would be unsorted), then the order on iteration would be unsorted (consistent, yes, but consistently unsorted). So, if your objective is to use the slice to pull items from a map in sorted order, then you need to first sort the slice, unless you can guarantee the slice items were inserted in an already sorted order.&lt;/p&gt;&#xA;"" OwnerUserId=""1949322"" LastActivityDate=""2017-07-27T14:45:51.027"" CommentCount=""0"" />
",45354151
45355483,"45355483      <row Id=""45355483"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45355593"" PostTypeId=""2"" ParentId=""45355483"" CreationDate=""2017-07-27T15:52:09.447"" Score=""4"" Body=""&lt;p&gt;The best practices is to &quot;mock&quot; or fake all the external dependencies. For example, all the calls of the gmail API should be to a faked interface. You only test that the API has been called with the proper arguments... There a lot of librairies to do the mocks....&lt;/p&gt;&#xA;"" OwnerUserId=""4641455"" LastActivityDate=""2017-07-27T15:52:09.447"" CommentCount=""0"" />
",45355593
45348256,"45348256      <row Id=""45348256"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45357522"" PostTypeId=""2"" ParentId=""45348256"" CreationDate=""2017-07-27T17:36:07.480"" Score=""1"" Body=""&lt;p&gt;With regard to your last comment (for which I don't have enough reputation to reply to):&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Ok, this works: &lt;a href=&quot;http://[play.golang.org/p/TYk67p6i_b&quot; rel=&quot;nofollow noreferrer&quot;&gt;play.golang.org/p/TYk67p6i_b&lt;/a&gt; But then I have a mix of&#xA;  string and *string in my struct definition. And I also can't &quot;fill&quot;&#xA;  the value without having the &lt;code&gt;var emptyString = &quot;&quot;&lt;/code&gt;, right?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/questions/44359812/golang-set-nil-string-pointer-to-empty-string#44359942&quot;&gt;this (Golang: set nil string pointer to empty string)&lt;/a&gt; post&lt;/p&gt;&#xA;"" OwnerUserId=""2061202"" LastActivityDate=""2017-07-27T17:36:07.480"" CommentCount=""0"" />
",45357522
45359250,"45359250      <row Id=""45359250"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45359304"" PostTypeId=""2"" ParentId=""45359250"" CreationDate=""2017-07-27T19:19:36.117"" Score=""4"" Body=""&lt;p&gt;There is no real limit on the number of matches. The reason your regex is not getting more matches is because it needs to be &lt;code&gt;regexp.MustCompile(&quot; [0-9]+ &quot;)&lt;/code&gt; to match numbers with more than one digit, surrounded by spaces. Right now it only matches &lt;code&gt;&quot; 0 &quot;&lt;/code&gt; through to &lt;code&gt;&quot; 9 &quot;&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""119081"" LastActivityDate=""2017-07-27T19:19:36.117"" CommentCount=""1"" />
",45359304
45360045,"45360045      <row Id=""45360045"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45360553"" PostTypeId=""2"" ParentId=""45360045"" CreationDate=""2017-07-27T20:35:43.327"" Score=""2"" Body=""&lt;p&gt;You can take use the fact that &lt;code&gt;r.PostForm&lt;/code&gt; is actually a map where keys are the field names and values are an array of strings, so you can do something along these lines (I didn't test it, but the concept should work).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We iterate over all values for the &lt;code&gt;&quot;userid&quot;&lt;/code&gt; field to know how many users there are. Also, you can use &lt;code&gt;append&lt;/code&gt; to add users dynamically to the slice.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;userFormData := []UserFormData{}&#xA;for i, userId := range r.PostForm[&quot;userid&quot;] {&#xA;     user := UserFormData{&#xA;        UserID: userId,&#xA;        Thumbnail: r.PostForm[&quot;thumbnail&quot;][i],&#xA;     }&#xA;     userFormData = append(userFormData, user)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-27T20:35:43.327"" CommentCount=""3"" />
",45360553
45360582,"45360582      <row Id=""45360582"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45360689"" PostTypeId=""2"" ParentId=""45360582"" CreationDate=""2017-07-27T20:45:07.750"" Score=""3"" Body=""&lt;p&gt;I sounds like you need &lt;code&gt;map[string]reflect.Type&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;val := map[string]reflect.Type{}{}&#xA;&#xA;val[&quot;int&quot;] = reflect.TypeOf(int(0))&#xA;pointer_to_new_item := reflect.New(val[&quot;int&quot;])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you need a non-pointer value you then use &lt;code&gt;Indirect&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;new_item := reflect.Indirect(pointer_to_new_item)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using reflect to create a value will give you a &lt;code&gt;reflect.Value&lt;/code&gt;, which you then need to unpack the actual value you want from using other reflect functions. See &lt;a href=&quot;http://golang.org/pkg/reflect&quot; rel=&quot;nofollow noreferrer&quot;&gt;The reflect documentation&lt;/a&gt; for more info.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Keep in mind that &lt;code&gt;reflect.New&lt;/code&gt; only makes simple types, structures, etc. If you need channels, maps, or slices there are other, similar functions that work like the &lt;code&gt;make&lt;/code&gt; builtin.&lt;/p&gt;&#xA;"" OwnerUserId=""1094529"" LastEditorUserId=""1094529"" LastEditDate=""2017-07-27T21:45:06.210"" LastActivityDate=""2017-07-27T21:45:06.210"" CommentCount=""8"" />
",45360689
45361921,"45361921      <row Id=""45361921"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45362091"" PostTypeId=""2"" ParentId=""45361921"" CreationDate=""2017-07-27T22:34:52.197"" Score=""3"" Body=""&lt;p&gt;See &lt;a href=&quot;https://blog.golang.org/errors-are-values&quot; rel=&quot;nofollow noreferrer&quot;&gt;Errors are values&lt;/a&gt; on &lt;em&gt;The Go Blog&lt;/em&gt;. This article, written by Rob Pike, has an interesting and powerful method of handling errors in a group of functions that works very well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have used this technique before several times, and it really works.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For reference, the code used for this technique looks like this (copied from the article):&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Helper type&#xA;type errWriter struct {&#xA;    w   io.Writer&#xA;    err error&#xA;}&#xA;&#xA;func (ew *errWriter) write(buf []byte) {&#xA;    if ew.err != nil {&#xA;        return&#xA;    }&#xA;    _, ew.err = ew.w.Write(buf)&#xA;}&#xA;&#xA;//Usage:&#xA;ew := &amp;amp;errWriter{w: fd}&#xA;ew.write(p0[a:b])&#xA;ew.write(p1[c:d])&#xA;ew.write(p2[e:f])&#xA;// and so on&#xA;if ew.err != nil {&#xA;    return ew.err&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""1094529"" LastEditorUserId=""366904"" LastEditDate=""2017-08-25T09:58:59.387"" LastActivityDate=""2017-08-25T09:58:59.387"" CommentCount=""0"" />
",45362091
45363790,"45363790      <row Id=""45363790"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45363829"" PostTypeId=""2"" ParentId=""45363790"" CreationDate=""2017-07-28T02:19:27.057"" Score=""1"" Body=""&lt;p&gt;To put it simply, you goofed the syntax of a slice literal slightly. Your mistake is fairly logical, but sadly it doesn't work.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The following is a fixed version:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;v := &amp;amp;important{ client: &quot;xyz&quot;, Response: []Summary{&#xA;        {&#xA;            Name: &quot;test&quot;,&#xA;            Metadata: Clientdata { &quot;404040&quot;},&#xA;        },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;A slice literal is defined like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[]type{ items... }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1094529"" LastActivityDate=""2017-07-28T02:19:27.057"" CommentCount=""0"" />
",45363829
45366954,"45366954      <row Id=""45366954"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45367783"" PostTypeId=""2"" ParentId=""45366954"" CreationDate=""2017-07-28T07:48:05.103"" Score=""1"" Body=""&lt;p&gt;You can create two types of channels: buffered channels and unbuffered channels.&lt;br&gt;&#xA;Buffered channel are those that has capacity: &lt;code&gt;make(chan int, 10)&lt;/code&gt;&lt;br&gt;&#xA;Buffered channels allow you to send into them same amount of messages as their capacity without being blocked.&lt;br&gt;&#xA;Unbuffered channels has no capacity and that is why your sending goroutine will be blocked until another goroutine receive from it.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; It is unbuffered channel. You main goroutine is blocked on receiving from channel until new goroutine send message to it.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Because you are using unbuffered channel your sending goroutine is blocked until another receive from it, but you have no other goroutines except that main one, so the program is in deadlock.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Because of buffered goroutine. It has capacity of 1, so it is won't be problem to send one message to it and then receive it in the same goroutine. But you will be blocked if you try to send more than 1 message to it. &lt;code&gt;ch &amp;lt;- 233; ch &amp;lt;- 233&lt;/code&gt; - this code will cause a deadlock.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Did get what you mean..., but if you try to receive or send to a nil channel you will be blocked: &lt;code&gt;var ch chan int; &amp;lt;-ch&lt;/code&gt; or &lt;code&gt;var ch chan int; ch &amp;lt;- 1&lt;/code&gt; &lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastEditorUserId=""141555"" LastEditDate=""2017-07-28T08:23:18.703"" LastActivityDate=""2017-07-28T08:23:18.703"" CommentCount=""1"" />
",45367783
45367649,"45367649      <row Id=""45367649"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45367825"" PostTypeId=""2"" ParentId=""45367649"" CreationDate=""2017-07-28T07:50:23.740"" Score=""1"" Body=""&lt;p&gt;It is a type assertion:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;A type assertion provides access to an interface value's underlying concrete value.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;t := i.(T)&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://tour.golang.org/methods/15&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://tour.golang.org/methods/15&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the asserion does not hold it will trigger a panic. To test if the value is of specific type T you can use this:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;t, ok := i.(T)&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Ok is a boolean that is &lt;code&gt;true&lt;/code&gt; if the assertion holds and &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;&#xA;"" OwnerUserId=""128186"" LastActivityDate=""2017-07-28T07:50:23.740"" CommentCount=""1"" />
",45367825
45368204,"45368204      <row Id=""45368204"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45368455"" PostTypeId=""2"" ParentId=""45368204"" CreationDate=""2017-07-28T08:23:47.357"" Score=""3"" Body=""&lt;p&gt;There's not really a &quot;nicer&quot; way of doing this. To convert a slice you have to basically do what you've already discovered.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you are simply returning these errors to a client, you could probably avoid the need to typecast this at all. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Implement the JSON &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Marshaler&quot; rel=&quot;nofollow noreferrer&quot;&gt;Marshaler&lt;/a&gt; interface and you can make your type will automatically output the JSON in the format you desire. For example, for the format you gave above this would be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (e BadField)  MarshalJSON() ([]byte, error) {&#xA;   return json.Marshal([]string{&quot;field_name&quot;,e.Field,e.Err.Error()})&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I suspect however that you would probably rather have a response something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[  &#xA;   {  &#xA;      &quot;field&quot;:&quot;age&quot;,&#xA;      &quot;error&quot;:&quot;msg1&quot;&#xA;   },&#xA;   {  &#xA;      &quot;field&quot;:&quot;name&quot;,&#xA;      &quot;error&quot;:&quot;msg2&quot;&#xA;   }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To do this, you could simply add the JSON tags to the struct definition, e.g.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type BadField struct {&#xA;    Field string `json:&quot;field&quot;`&#xA;    Err   error `json:&quot;error&quot;`&#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This would mean calling &lt;code&gt;json.Marshal&lt;/code&gt; on a slice of &lt;code&gt;[]error&lt;/code&gt; which contains &lt;code&gt;BadField&lt;/code&gt; instances would result in the JSON above.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It might be helpful to read more about &lt;a href=&quot;https://blog.golang.org/json-and-go&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSON &amp;amp; Go&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;PS Consider if you want your methods to be &lt;a href=&quot;https://golang.org/doc/faq#methods_on_values_or_pointers&quot; rel=&quot;nofollow noreferrer&quot;&gt;value or pointer receivers&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-07-28T08:23:47.357"" CommentCount=""1"" />
",45368455
45365972,"45365972      <row Id=""45365972"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45369003"" PostTypeId=""2"" ParentId=""45365972"" CreationDate=""2017-07-28T08:52:01.507"" Score=""3"" Body=""&lt;p&gt;The problem is that you have created a buffered channel with &lt;code&gt;var record = make(chan List, 3)&lt;/code&gt;. Hence this code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;record &amp;lt;- *list&#xA;pool.Put(list)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;May return immediately and the entry will be placed back into the pool before it has been consumed. Hence the underlying slice will likely be modified in another loop iteration before your consumer has had a chance to consume it. Although you are sending &lt;code&gt;List&lt;/code&gt; as a value object, remember that the &lt;code&gt;[]bson.M&lt;/code&gt; is a pointer to an allocated array and will still be pointing to the same memory when you send a new &lt;code&gt;List&lt;/code&gt; value. Hence why you are seeing the duplicate output.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To fix, modify your channel to send the List pointer &lt;code&gt;make(chan *List, 3)&lt;/code&gt; and change your consumer to put the entry back in the pool once finished, e.g:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for r := range record {&#xA;    fmt.Printf(&quot;first: %v\n&quot;, r.L[0])&#xA;    // do the insert etc&#xA;    pool.Put(r) // Even if error occurs&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your producer should then sent the pointer with the &lt;code&gt;pool.Put&lt;/code&gt; removed, i.e.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;record &amp;lt;- list&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-07-28T08:52:01.507"" CommentCount=""0"" />
",45369003
45372490,"45372490      <row Id=""45372490"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45372998"" PostTypeId=""2"" ParentId=""45372490"" CreationDate=""2017-07-28T12:00:56.483"" Score=""2"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/time/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Package time&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;These are predefined layouts for use in Time.Format and Time.Parse.&#xA;  The reference time used in the layouts is the specific time:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Mon Jan 2 15:04:05 MST 2006&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;which is Unix time 1136239445. Since MST is GMT-0700, the reference&#xA;  time can be thought of as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;01/02 03:04:05PM '06 -0700&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;To define your own format, write down what the reference time would&#xA;  look like formatted your way; see the values of constants like ANSIC,&#xA;  StampMicro or Kitchen for examples.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Use &lt;code&gt;format := &quot;2006-01-02&quot;&lt;/code&gt; for yyyy-mm-dd.&lt;/p&gt;&#xA;"" OwnerUserId=""221700"" LastActivityDate=""2017-07-28T12:00:56.483"" CommentCount=""0"" />
",45372998
45374658,"45374658      <row Id=""45374658"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45375727"" PostTypeId=""2"" ParentId=""45374658"" CreationDate=""2017-07-28T14:14:19.513"" Score=""1"" Body=""&lt;p&gt;From the sounds of it, you want to your result to look like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[&#xA;  {&quot;Name&quot;:&quot;QA1&quot;,&quot;Server&quot;:&quot;BOT1&quot;,&quot;Description&quot;:&quot;Tools&quot;,&quot;Apps&quot;: [&quot;Duo&quot;,&quot;Git&quot;,&quot;php&quot;]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Hence you want your Volumes struct to look like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Volume struct {&#xA;    Name        string&#xA;    Server      string&#xA;    Description string&#xA;    Services    []Apps&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;If you want the Apps to actually output&lt;/em&gt; &lt;code&gt;Duo|Git|php&lt;/code&gt; &lt;em&gt;then you could create a custom type instead of &lt;code&gt;[]Apps&lt;/code&gt; with a JSON &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Marshaler&quot; rel=&quot;nofollow noreferrer&quot;&gt;Marshaler&lt;/a&gt; implementation. This could simply return &lt;code&gt;json.Marshal(strings.join(names,&quot;|&quot;))&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Rather than run two separate queries, it would be more efficient to run a single query that selects the product of volumes &amp;amp; apps together. It is important that this query is sorted by volume so all volume rows are contiguous. Example query output would be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Name | Server | Desc  | App&#xA;---- | ------ | ----- | ---&#xA;Vol1 | Srv1   | Desc1 | App1 &#xA;Vol1 | Srv1   | Desc1 | App2&#xA;Vol2 | Srv2   | Desc2 | App3&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You would then loop over this and detect if you are looking at a new volume. If so, create a new entry in the result. If not, add the App to the list of apps. For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var (&#xA;   volnm string &#xA;   srvrnm string&#xA;   descr string&#xA;   appnm string &#xA;   v     *Volume&#xA;   result []*Volume&#xA;)&#xA;&#xA;for srvrrows.Next() {&#xA;    if err = srvcrows.Scan(&amp;amp;volnm, &amp;amp;srvrnm, &amp;amp;descr, &amp;amp;appnm);err!=nil {&#xA;       // Handle error&#xA;    }&#xA;&#xA;    // Add App to current volume if same, otherwise start a new volume&#xA;    if v!=nil &amp;amp;&amp;amp; v.Name == volnm {&#xA;       v.Services = append(v.Services,Apps{appnm}) &#xA;    } else {&#xA;       v = &amp;amp;Volume{&#xA;          Name: volnm, &#xA;          Server: svrnm, &#xA;          Description: descr, &#xA;          Services: []Apps{appnm}}&#xA;       result = append(result,v)&#xA;    }&#xA;}&#xA;&#xA;// Finished, return result etc...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;When taking this approach, you need an appropriate parent record discriminator. I'd just used &lt;code&gt;v.Name == volnm&lt;/code&gt; for illustration purposes but this should really be checking the &lt;strong&gt;primary key&lt;/strong&gt;. You can make this an unexported (lowercase) field in the struct if you do not wish to export it through the API.&lt;/p&gt;&#xA;"" OwnerUserId=""8356442"" LastEditorUserId=""8356442"" LastEditDate=""2017-07-28T14:23:43.203"" LastActivityDate=""2017-07-28T14:23:43.203"" CommentCount=""2"" />
",45375727
44928638,"44928638      <row Id=""44928638"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45376318"" PostTypeId=""2"" ParentId=""44928638"" CreationDate=""2017-07-28T14:42:19.760"" Score=""0"" Body=""&lt;p&gt;After some digging in dbx package code I have found that it's quite easy:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;err := rs.Tx().Select().InnerJoin(&quot;table2&quot;, dbx.NewExp(&quot;table2.id = table1.id&quot;).OrderBy(&quot;name&quot;).Offset(int64(offset)).Limit(int64(limit)).All(&amp;amp;bikes)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7095173"" LastActivityDate=""2017-07-28T14:42:19.760"" CommentCount=""0"" />
",45376318
45377224,"45377224      <row Id=""45377224"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45378004"" PostTypeId=""2"" ParentId=""45377224"" CreationDate=""2017-07-28T16:08:22.463"" Score=""0"" Body=""&lt;p&gt;I think it is because you are using &lt;code&gt;DefaultServer&lt;/code&gt; as your RPC server. Instead you should create different servers for each: RICHARD and BENNY.&#xA;Please take a look on your code modified by me to work as expected here: &lt;a href=&quot;https://play.golang.org/p/cS5mITDafw&quot; rel=&quot;nofollow noreferrer&quot;&gt;RPC calls on one machine&lt;/a&gt; &lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastActivityDate=""2017-07-28T16:08:22.463"" CommentCount=""2"" />
",45378004
45377132,"45377132      <row Id=""45377132"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45378010"" PostTypeId=""2"" ParentId=""45377132"" CreationDate=""2017-07-28T16:08:30.343"" Score=""0"" Body=""&lt;p&gt;That's a PEM encoded key, it's just missing the BEGIN &amp;amp; END headers. The key is simple Base64 encoded, you can decode and unmarshal into a RSA key as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;base64Data := []byte(`MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsFWkb/eSl6I3DRVhaonW3DFy8EnL0yaPiDzCcOLuYfBjN9zZIR1wXmnMJFle1K89qHGg42wgweVTIwA1XFTfoUKSziwsjF6FscZX5H56ZYyS/wWiO3rWWynlfbSZt+ga71+ndsu+A0Dy7Nn7ZgP8kRsu4UM5vE7QQTRERNiUKpzScN1cgZUFUqSddQmkwTEN8hH1mFX1Mum54NGqWIlmQxQDrOyogmMXIaaakhabcmuIPMULVVDVwUJC9sSDsc/j05qcZn3kkiEBRyiYB6ZLY2W7WfiV+dB7/icPONsYSD0FxHWEGNnbqtiGoNf9WZWtaP+o8WMR9sB3GKGVnbLvbQIDAQAB`)&#xA;d := make([]byte, base64.StdEncoding.DecodedLen(len(base64Data)))&#xA;n, err := base64.StdEncoding.Decode(d, base64Data)&#xA;if err != nil {&#xA;    // Handle error&#xA;}&#xA;d = d[:n]&#xA;key,err:=x509.ParsePKIXPublicKey(d)&#xA;if err != nil {&#xA;    // Handle error&#xA;}&#xA;fmt.Println(key)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you need the key in PEM encoded form, simple add the appropriate header and footer, e.g. &lt;code&gt;-----BEGIN PUBLIC KEY-----&lt;/code&gt; &amp;amp; &lt;code&gt;-----END PUBLIC KEY-----&lt;/code&gt;. Note that the BEGIN header must start on its own line and end in a new line (&lt;code&gt;&quot;\n&quot;&lt;/code&gt;). The END header must also be proceeded by a new line.&lt;/p&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-07-28T16:08:30.343"" CommentCount=""1"" />
",45378010
45378157,"45378157      <row Id=""45378157"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45378527"" PostTypeId=""2"" ParentId=""45378157"" CreationDate=""2017-07-28T16:39:05.720"" Score=""0"" Body=""&lt;p&gt;I think this &lt;a href=&quot;https://play.golang.org/p/P2a8RLEYlF&quot; rel=&quot;nofollow noreferrer&quot;&gt;solution&lt;/a&gt; can give you a hint what you suppose to do to extract &lt;code&gt;key&lt;/code&gt;s from this JSON without any additional &lt;code&gt;type&lt;/code&gt; creation.&lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastActivityDate=""2017-07-28T16:39:05.720"" CommentCount=""2"" />
",45378527
45378566,"45378566      <row Id=""45378566"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45378656"" PostTypeId=""2"" ParentId=""45378566"" CreationDate=""2017-07-28T16:47:38.947"" Score=""0"" Body=""&lt;p&gt;I would just register your handler twice.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;router.Path(&quot;/articles/{id:[0-9]+}&quot;).Queries(&quot;key&quot;, &quot;{[0-&#xA;9]*?}&quot;).HandlerFunc(YourHandler).Name(&quot;YourHandler&quot;)&#xA;&#xA;router.Path(&quot;/articles/{id:[0-9]+}&quot;).HandlerFunc(YourHandler)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here is a working program to demonstrate. Notice that I am using &lt;code&gt;r.FormValue&lt;/code&gt; to get the query parameter. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Note: make sure you have an up to date version &lt;code&gt;go get -u github.com/gorilla/mux&lt;/code&gt; since a bug of query params not getting added the built URLs was fixed recently.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;    &quot;net/http&quot;&#xA;&#xA;    &quot;github.com/gorilla/mux&quot;&#xA;)&#xA;&#xA;var router = mux.NewRouter()&#xA;&#xA;func main() {&#xA;    router.Path(&quot;/articles/{id:[0-9]+}&quot;).Queries(&quot;key&quot;, &quot;{key}&quot;).HandlerFunc(YourHandler).Name(&quot;YourHandler&quot;)&#xA;    router.Path(&quot;/articles/{id:[0-9]+}&quot;).HandlerFunc(YourHandler)&#xA;&#xA;    if err := http.ListenAndServe(&quot;:9000&quot;, router); err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;}&#xA;&#xA;func YourHandler(w http.ResponseWriter, r *http.Request) {&#xA;    id := mux.Vars(r)[&quot;id&quot;]&#xA;    key := r.FormValue(&quot;key&quot;)&#xA;&#xA;    u, err := router.Get(&quot;YourHandler&quot;).URL(&quot;id&quot;, id, &quot;key&quot;, key)&#xA;    if err != nil {&#xA;        http.Error(w, err.Error(), 500)&#xA;        return&#xA;    }&#xA;&#xA;    // Output:&#xA;    // /articles/10?key=[key]&#xA;    w.Write([]byte(u.String()))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1817176"" LastEditorUserId=""1817176"" LastEditDate=""2017-07-28T19:49:21.273"" LastActivityDate=""2017-07-28T19:49:21.273"" CommentCount=""5"" />
",45378656
45378537,"45378537      <row Id=""45378537"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45379296"" PostTypeId=""2"" ParentId=""45378537"" CreationDate=""2017-07-28T17:31:41.073"" Score=""1"" Body=""&lt;p&gt;OK let me clarify some things and help you.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You don' t need to return modified map from here because your&#xA;function gets reference to map not copy of it. (Let's silence the fact&#xA;that you are completly ignoring return value)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func add_to_map(m map[string] string, word string) map[string]string {&#xA;    added_word := word + &quot; plus more letters&quot;&#xA;    m[word] = added_word&#xA;    return m&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Next thing is that you need to synchronize access to map. You can use&#xA;&lt;a href=&quot;https://golang.org/pkg/sync/#Mutex&quot; rel=&quot;nofollow noreferrer&quot;&gt;mutex&lt;/a&gt; for this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import &quot;sync&quot;&#xA;&#xA;var mutex sync.Mutex //glabal variable but can be created as local also&#xA;&#xA;func add_to_map(m map[string] string, word string) {&#xA;    added_word := word + &quot; plus more letters&quot;&#xA;    // here you can do long to compute task and calculate result&#xA;    // calc here&#xA;    mutex.Lock() //result ready lock mutex&#xA;    defer mutex.Unlock() // unlock mutex when we return from function&#xA;    m[word] = added_word // result write to shared map&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that in Go 1.9 there will be &lt;a href=&quot;https://tip.golang.org/doc/go1.9#sync-map&quot; rel=&quot;nofollow noreferrer&quot;&gt;Concurrent Map&lt;/a&gt; type.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;:&#xA;You need to wait for all gorutines to finish beacause your main now finishes beafore them. You can do this by using &lt;a href=&quot;https://golang.org/pkg/sync/#WaitGroup&quot; rel=&quot;nofollow noreferrer&quot;&gt;WaitGroup&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;sync&quot;&#xA;)&#xA;&#xA;var mutex sync.Mutex&#xA;var wg sync.WaitGroup&#xA;&#xA;func add_to_map(m map[string] string, word string) {&#xA;    defer wg.Done()&#xA;    added_word := word + &quot; plus more letters&quot;&#xA;    // do heavy work here&#xA;    //&#xA;    mutex.Lock()&#xA;    defer mutex.Unlock()&#xA;    m[word] = added_word&#xA;}&#xA;&#xA;&#xA;func main() {&#xA;    words_map := make(map[string]string)&#xA;    words := []string{&quot;giraffe&quot;, &quot;cat&quot;, &quot;dog&quot;, &quot;turtle&quot;}&#xA;    for _, this_word := range words {&#xA;        wg.Add(1)&#xA;        go add_to_map(words_map, this_word)&#xA;    }&#xA;    wg.Wait()&#xA;    fmt.Println(words_map)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8307258"" LastEditorUserId=""8307258"" LastEditDate=""2017-07-28T19:05:00.723"" LastActivityDate=""2017-07-28T19:05:00.723"" CommentCount=""5"" />
",45379296
45379494,"45379494      <row Id=""45379494"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45379652"" PostTypeId=""2"" ParentId=""45379494"" CreationDate=""2017-07-28T17:55:45.820"" Score=""0"" Body=""&lt;p&gt;If you want to write to the sub-process standard input, you should use &lt;code&gt;StdinPipe&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;subStdin, err := cmd.StdinPipe()&#xA;// check err&#xA;defer subStdin.Close()&#xA;io.WriteString(subStdin, &quot;Hello World&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See the docs for a complete example:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/os/exec/#Cmd.StdinPipe&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/os/exec/#Cmd.StdinPipe&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-28T17:55:45.820"" CommentCount=""2"" />
",45379652
45361846,"45361846      <row Id=""45361846"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45379942"" PostTypeId=""2"" ParentId=""45361846"" CreationDate=""2017-07-28T18:15:03.453"" Score=""0"" Body=""&lt;p&gt;This is maybe related to some docker-compose bug.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try cleaning containers&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;docker-compose down&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Alternatively this (you will lose your container data):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;docker rm -f $(docker ps -a -q)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1094246"" LastActivityDate=""2017-07-28T18:15:03.453"" CommentCount=""0"" />
",45379942
45381407,"45381407      <row Id=""45381407"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45381522"" PostTypeId=""2"" ParentId=""45381407"" CreationDate=""2017-07-28T19:59:36.493"" Score=""1"" Body=""&lt;p&gt;I'd remove the &lt;code&gt;vendor&lt;/code&gt; folder below &lt;code&gt;B&lt;/code&gt;, and put &lt;code&gt;C&lt;/code&gt; in the root &lt;code&gt;vendor&lt;/code&gt; folder (for application &lt;code&gt;A&lt;/code&gt; if I am getting your structure correctly).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That way, you only end up with one place for each type.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Not sure why &lt;code&gt;B&lt;/code&gt; would have a &lt;code&gt;vendor&lt;/code&gt; folder in the first place, since Glide's recommendations are clear on this:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://glide.readthedocs.io/en/latest/vendor/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://glide.readthedocs.io/en/latest/vendor/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Libraries (codebases without a main package) should not store outside packages in a vendor/ folder&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;and&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;In applications (codebases with a main package) there should only be one vendor/ directory at the top level&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-07-28T19:59:36.493"" CommentCount=""0"" />
",45381522
45381104,"45381104      <row Id=""45381104"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45382150"" PostTypeId=""2"" ParentId=""45381104"" CreationDate=""2017-07-28T20:46:58.703"" Score=""1"" Body=""&lt;p&gt;Directives in Go are kinda fragile, you need to get them exactly right or they will fail silently.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this case you have this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// export add_all_items_to_map&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But need this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//export add_all_items_to_map&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://golang.org/cmd/cgo/&quot; rel=&quot;nofollow noreferrer&quot;&gt;the cgo docs&lt;/a&gt; for more information.&lt;/p&gt;&#xA;"" OwnerUserId=""1094529"" LastActivityDate=""2017-07-28T20:46:58.703"" CommentCount=""1"" />
",45382150
45383927,"45383927      <row Id=""45383927"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45383955"" PostTypeId=""2"" ParentId=""45383927"" CreationDate=""2017-07-29T00:06:51.167"" Score=""0"" Body=""&lt;p&gt;Maybe I'm not seeing something, but this is usually how I do it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;actual, err := GetKey(v.Key)&#xA;if err != v.Err {&#xA;    t.Errorf(&quot;Unexpected error: %s&quot;, err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or, if the returned error might not be a specific known error value, I might flatten to a string:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;actual, err := GetKey(v.Key)&#xA;var errMsg string&#xA;if err != nil {&#xA;    errMsg = err.Error()&#xA;}&#xA;if errMsg != v.errMsg {&#xA;    t.Errorf(&quot;Unexpected error: %s&quot;, errMsg)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-07-29T00:06:51.167"" CommentCount=""0"" />
",45383955
45379453,"45379453      <row Id=""45379453"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45385166"" PostTypeId=""2"" ParentId=""45379453"" CreationDate=""2017-07-29T04:10:43.067"" Score=""1"" Body=""&lt;p&gt;The issue comes from the fact that your using &lt;code&gt;elastic.v3&lt;/code&gt; which &lt;a href=&quot;https://github.com/olivere/elastic#elastic-30&quot; rel=&quot;nofollow noreferrer&quot;&gt;targets ES 2.x&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since you're using ES 5.3.1, you need to use &lt;a href=&quot;https://github.com/olivere/elastic#elastic-50&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;elastic.v5&lt;/code&gt;&lt;/a&gt;, so simply replace this line&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;elastic &quot;gopkg.in/olivere/elastic.v3&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;by &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;elastic &quot;gopkg.in/olivere/elastic.v5&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and you should be fine.&lt;/p&gt;&#xA;"" OwnerUserId=""4604579"" LastActivityDate=""2017-07-29T04:10:43.067"" CommentCount=""2"" />
",45385166
45386644,"45386644      <row Id=""45386644"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45386720"" PostTypeId=""2"" ParentId=""45386644"" CreationDate=""2017-07-29T07:38:20.627"" Score=""2"" Body=""&lt;p&gt;The fields in &lt;code&gt;pingDataFormat&lt;/code&gt; need to be exported (start with a capital letter)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type pingDataFormat struct {&#xA;    UserAccessToken          string `json:&quot;userAccessToken&quot;`&#xA;    UploadStartTimeInSeconds int    `json:&quot;uploadStartTimeInSeconds&quot;`&#xA;    UploadEndTimeInSeconds   int    `json:&quot;uploadEndTimeInSeconds&quot;`&#xA;    CallbackURL              string `json:&quot;callbackURL&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That should solve your problem&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/Z3yszFl01L&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/Z3yszFl01L&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""141555"" LastEditorUserId=""141555"" LastEditDate=""2017-07-29T07:57:42.760"" LastActivityDate=""2017-07-29T07:57:42.760"" CommentCount=""1"" />
",45386720
45387108,"45387108      <row Id=""45387108"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45387452"" PostTypeId=""2"" ParentId=""45387108"" CreationDate=""2017-07-29T09:02:44.793"" Score=""1"" Body=""&lt;p&gt;NTLM Authentication and Basic Authentication are not the same. NTLM is a protocol which is more complicated than just user:password string in header.&lt;br&gt;&#xA;If you want to make a request from Golang code to authenticate you should use one of existing libraries, like: &lt;a href=&quot;https://github.com/Azure/go-ntlmssp&quot; rel=&quot;nofollow noreferrer&quot;&gt;go-ntlmssp&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also you can read more about NTLM protocol itself &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/cc236621.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastActivityDate=""2017-07-29T09:02:44.793"" CommentCount=""1"" />
",45387452
45388963,"45388963      <row Id=""45388963"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45389058"" PostTypeId=""2"" ParentId=""45388963"" CreationDate=""2017-07-29T12:03:47.193"" Score=""1"" Body=""&lt;p&gt;I don't understand why to do &lt;code&gt;SET @query&lt;/code&gt; and pass it inside of it when You can do it by using bind parameter using &lt;code&gt;?&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So here is solution (I'm not familiar with &lt;code&gt;go&lt;/code&gt; so please sorry if something wrong with &lt;code&gt;go&lt;/code&gt; code):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var taxes []Tax&#xA;query := &quot;%something%youre%looking%for%&quot;&#xA;err := r.db.Select(&amp;amp;taxes, `&#xA;&#xA;    SELECT tax.*&#xA;    FROM tax&#xA;    JOIN user_tax&#xA;        ON user_tax.tax_id = tax.id&#xA;    WHERE user_tax.user_id = ?&#xA;        AND tax.deleted_at IS NULL&#xA;        AND user_tax.deleted_at IS NULL&#xA;        AND (&#xA;              tax.name LIKE ? &#xA;              OR &#xA;              tax.rate LIKE ?&#xA;            )&#xA;&#xA;`, q, userId, query, query)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;OR try this (I'm not sure if it will work) :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var taxes []Tax&#xA;query := &quot;something&quot;&#xA;err := r.db.Select(&amp;amp;taxes, `&#xA;    SET @query = CONCAT('%', ?, '%');&#xA;&#xA;    SELECT tax.*&#xA;    FROM tax&#xA;    JOIN user_tax&#xA;        ON user_tax.tax_id = tax.id&#xA;    WHERE user_tax.user_id = ?&#xA;        AND tax.deleted_at IS NULL&#xA;        AND user_tax.deleted_at IS NULL&#xA;        AND (&#xA;              tax.name LIKE @query&#xA;              OR &#xA;              tax.rate LIKE @query&#xA;            )&#xA;&#xA;`, q, query, userId)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""3706693"" LastEditorUserId=""3706693"" LastEditDate=""2017-07-29T12:19:15.577"" LastActivityDate=""2017-07-29T12:19:15.577"" CommentCount=""11"" />
",45389058
45389802,"45389802      <row Id=""45389802"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45390194"" PostTypeId=""2"" ParentId=""45389802"" CreationDate=""2017-07-29T14:08:08.937"" Score=""2"" Body=""&lt;p&gt;There is not a way to concatenate strings with an operator because Go templates do not have operators.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Use the &lt;code&gt;printf&lt;/code&gt; function as shown in the question or combine the calls in a single template expression:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{{ TestFunc (printf &quot;%s%s&quot; &quot;x&quot; &quot;y&quot;) }}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you always need to concatenate strings for the TestFunc argument, then write TestFunc to handle the concatenation:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func TestFunc(strs ...string) string {&#xA;   return strings.Trim(strings.Join(strs, &quot;&quot;), &quot; &quot;)&#xA;}&#xA;&#xA;{{ TestFunc &quot;x&quot;  $var }}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-07-29T14:12:56.067"" LastActivityDate=""2017-07-29T14:12:56.067"" CommentCount=""1"" />
",45390194
44781327,"44781327      <row Id=""44781327"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45390729"" PostTypeId=""2"" ParentId=""44781327"" CreationDate=""2017-07-29T15:03:25.117"" Score=""0"" Body=""&lt;p&gt;The problem here is related with the abbreviation change for &lt;code&gt;Europe/Istanbul&lt;/code&gt;. &lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Turkey switched from EET/EEST (+02/+03) to permanent +03,&#xA;  effective 2016-09-07. (Thanks to Burak AYDIN.) Use &quot;+03&quot; rather&#xA;  than an invented abbreviation for the new time.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Time package currently does not accept +03 as EET/EEST and this problem occurs when using a datetime string that contains &lt;code&gt;+03&lt;/code&gt; as timezone to parse in form of &lt;code&gt;2006-01-02 15:04:05.999999999 -0700 MST&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""3416136"" LastActivityDate=""2017-07-29T15:03:25.117"" CommentCount=""0"" />
",45390729
45391686,"45391686      <row Id=""45391686"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45394312"" PostTypeId=""2"" ParentId=""45391686"" CreationDate=""2017-07-29T21:38:42.633"" Score=""0"" Body=""&lt;p&gt;As I can see you have a bunch f dependencies in your code. I have found that library &lt;code&gt;github.com/tendermint/tmlibs/log&lt;/code&gt; has a dependency to a package &lt;code&gt;testing&lt;/code&gt; from standard library: &lt;a href=&quot;https://github.com/tendermint/tmlibs/search?utf8=%E2%9C%93&amp;amp;q=testing&amp;amp;type=&quot; rel=&quot;nofollow noreferrer&quot;&gt;searches for testing&lt;/a&gt;. And this standard library has all flags you are wondered about: &lt;a href=&quot;https://golang.org/src/testing/testing.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;testing package&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastActivityDate=""2017-07-29T21:38:42.633"" CommentCount=""1"" />
",45394312
45286908,"45286908      <row Id=""45286908"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45394395"" PostTypeId=""2"" ParentId=""45286908"" CreationDate=""2017-07-29T21:50:54.440"" Score=""0"" Body=""&lt;p&gt;Change polls from an array:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; polls := []Poll{}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;TO:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;polls := Poll{}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8359202"" LastEditorUserId=""8359202"" LastEditDate=""2017-07-30T05:14:05.063"" LastActivityDate=""2017-07-30T05:14:05.063"" CommentCount=""0"" />
",45394395
45394684,"45394684      <row Id=""45394684"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45394743"" PostTypeId=""2"" ParentId=""45394684"" CreationDate=""2017-07-29T22:43:22.307"" Score=""9"" Body=""&lt;p&gt;A couple of reasons why you'll see the same result in the playground&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Golang playground will cache the results &lt;/li&gt;&#xA;&lt;li&gt;The time in the playground always starts at the same time to make the playground deterministic. &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Last but not least, the &lt;code&gt;rand&lt;/code&gt; package default seed is &lt;code&gt;1&lt;/code&gt; which will make the result deterministic. If you place a &lt;code&gt;rand.Seed(time.Now().UnixNano())&lt;/code&gt; you'll receive different results at each execution. Note that this won't work on the playground for the second reason above. &lt;/p&gt;&#xA;"" OwnerUserId=""1261399"" LastEditorUserId=""1261399"" LastEditDate=""2017-07-29T22:54:53.993"" LastActivityDate=""2017-07-29T22:54:53.993"" CommentCount=""3"" />
",45394743
45372101,"45372101      <row Id=""45372101"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45395394"" PostTypeId=""2"" ParentId=""45372101"" CreationDate=""2017-07-30T00:54:47.757"" Score=""0"" Body=""&lt;p&gt;I found the solution. Turns out creating a new pseudo-TTY was the wrong approach and I can actually use the standard Go libraries to achieve what I wanted:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cmd := exec.Command(name, parameters...)&#xA;&#xA;cmd.SysProcAttr = &amp;amp;syscall.SysProcAttr{&#xA;    Ctty: int(os.Stdout.Fd()) // set the TTY&#xA;}&#xA;&#xA;// These must be the respective Std os.File as using a Reader/Writer &#xA;// wouldn't work if you're trying to assign a TTY to your terminal&#xA;// emulator.&#xA;cmd.Stdin = os.Stdin&#xA;cmd.Stdout = os.Stdout&#xA;cmd.Stderr = os.Stderr&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2236853"" LastActivityDate=""2017-07-30T00:54:47.757"" CommentCount=""0"" />
",45395394
45395861,"45395861      <row Id=""45395861"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45395923"" PostTypeId=""2"" ParentId=""45395861"" CreationDate=""2017-07-30T02:57:10.960"" Score=""1"" Body=""&lt;p&gt;The variable &lt;code&gt;inner&lt;/code&gt; is declared using a &lt;a href=&quot;https://golang.org/ref/spec#Short_variable_declarations&quot; rel=&quot;nofollow noreferrer&quot;&gt;short variable declaration&lt;/a&gt;.  The variable &lt;code&gt;inner&lt;/code&gt; has type &lt;code&gt;func(in []reflect.Value) []reflect.Value&lt;/code&gt;. The value is the function literal in the code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The type  &lt;code&gt;func(in []reflect.Value) []reflect.Value&lt;/code&gt; represents a generic function implemented by reflection. The function takes a possibly empty slice of arguments and returns a possibly empty slice of results.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;reflect.Value&lt;/code&gt; for a function is not directly callable. The &lt;code&gt;Call&lt;/code&gt; method is used to call the function in the value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;.(func(a, b int) int)&lt;/code&gt; is a type assertion.&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-07-30T02:57:10.960"" CommentCount=""4"" />
",45395923
45389410,"45389410      <row Id=""45389410"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45399504"" PostTypeId=""2"" ParentId=""45389410"" CreationDate=""2017-07-30T11:53:12.757"" Score=""2"" Body=""&lt;p&gt;You can do it as documented at &lt;a href=&quot;https://godoc.org/labix.org/v2/mgo#Collection.EnsureIndex&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;Collection.EnsureIndex&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Other kinds of indexes are also supported through that API. Here is an example:&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;index := Index{&#xA;    Key: []string{&quot;$2d:loc&quot;},&#xA;    Bits: 26,&#xA;}&#xA;err := collection.EnsureIndex(index)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The example above requests the creation of a &quot;2d&quot; index for the &quot;loc&quot; field.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So basically, you have the format &lt;strong&gt;&lt;code&gt;$&amp;lt;indexType&amp;gt;:&amp;lt;indexedField&amp;gt;&lt;/code&gt;&lt;/strong&gt;, as shown below:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import mgo &quot;gopkg.in/mgo.v2&quot;&#xA;&#xA;const (&#xA;    db   = &quot;so_hashed_idx&quot;&#xA;    coll = &quot;testcoll&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    var s *mgo.Session&#xA;    var err error&#xA;&#xA;    if s, err = mgo.Dial(&quot;127.0.0.1:27017&quot;); err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    // An index spec is nothing more than a fancy word for the keys&#xA;    // or the key/value pairs handed over to the Key slice of the&#xA;    // Index type.&#xA;    idx := mgo.Index{&#xA;        Key: []string{&quot;$hashed:_id&quot;},&#xA;    }&#xA;&#xA;    if err := s.DB(db).C(coll).EnsureIndex(idx); err != nil {&#xA;        panic(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Building and running the above results in &lt;code&gt;so_hashed_idx.testcoll&lt;/code&gt; showing its indices as follows&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; db.testcoll.getIndices()&#xA;[&#xA;    {&#xA;        &quot;v&quot; : 1,&#xA;        &quot;key&quot; : {&#xA;            &quot;_id&quot; : 1&#xA;        },&#xA;        &quot;name&quot; : &quot;_id_&quot;,&#xA;        &quot;ns&quot; : &quot;so_hashed_idx.testcoll&quot;&#xA;    },&#xA;    {&#xA;        &quot;v&quot; : 1,&#xA;        &quot;key&quot; : {&#xA;            &quot;_id&quot; : &quot;hashed&quot;&#xA;        },&#xA;        &quot;name&quot; : &quot;_id_hashed&quot;,&#xA;        &quot;ns&quot; : &quot;so_hashed_idx.testcoll&quot;&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1296707"" LastActivityDate=""2017-07-30T11:53:12.757"" CommentCount=""0"" />
",45399504
45395982,"45395982      <row Id=""45395982"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45400830"" PostTypeId=""2"" ParentId=""45395982"" CreationDate=""2017-07-30T14:24:57.483"" Score=""2"" Body=""&lt;p&gt;Look for inspiration in &lt;a href=&quot;https://golang.org/src/io/io.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/src/io/io.go&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You will see: &lt;/p&gt;&#xA;&#xA;&lt;p&gt;a. &quot;Atomic&quot; interfaces: &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;Writer&lt;/code&gt;, &lt;code&gt;Closer&lt;/code&gt;, &lt;code&gt;Seeker&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;b. Composed interfaces: &lt;code&gt;ReaderWriter&lt;/code&gt;, &lt;code&gt;ReaderWriterSeeker&lt;/code&gt;, &lt;code&gt;ReaderSeekerCloser&lt;/code&gt; etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Golang will not complaint about gigantic interfaces, it's you and your collegues will have complaints about big monolithic interfaces. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I recomend  divide your interface to 4 (maybe 2) interfaces: &lt;code&gt;FooOps&lt;/code&gt;, &lt;code&gt;FoosOps&lt;/code&gt;, &lt;code&gt;BarOps&lt;/code&gt;, &lt;code&gt;BarsOps&lt;/code&gt; and then define composed interfaces from them.&lt;/p&gt;&#xA;"" OwnerUserId=""1168212"" LastActivityDate=""2017-07-30T14:24:57.483"" CommentCount=""1"" />
",45400830
45407283,"45407283      <row Id=""45407283"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45407483"" PostTypeId=""2"" ParentId=""45407283"" CreationDate=""2017-07-31T04:31:46.610"" Score=""0"" Body=""&lt;p&gt;Docker passes signals to PID 1 process. In your case, since you are spawning a child process, you are not getting the signal.&#xA;If there is only 1 processing in CMD, you can do something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;CMD [&quot;/bin/ping&quot;,&quot;localhost&quot;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you are doing multiple operations like what you have put above, you can run a script in CMD and have signal processing in the script and pass it to your background process. The other option is to have only 1 command processing in CMD. You can do &quot;go install&quot; in previous step and just run executable in CMD. &lt;/p&gt;&#xA;"" OwnerUserId=""2998542"" LastActivityDate=""2017-07-31T04:31:46.610"" CommentCount=""2"" />
",45407483
45405626,"45405626      <row Id=""45405626"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45408538"" PostTypeId=""2"" ParentId=""45405626"" CreationDate=""2017-07-31T06:08:23.510"" Score=""1"" Body=""&lt;p&gt;Function &lt;a href=&quot;https://godoc.org/github.com/dgrijalva/jwt-go#ParseWithClaims&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;jwt.ParseWithClaims&lt;/code&gt;&lt;/a&gt; accept an interface of &lt;code&gt;jwt.Claims&lt;/code&gt; as the second argument. Besides struct-based custom claims, the package also provides &lt;code&gt;map&lt;/code&gt;-based claims, i.e. &lt;a href=&quot;https://godoc.org/github.com/dgrijalva/jwt-go#MapClaims&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;jwt.MapClaims&lt;/code&gt;&lt;/a&gt;. &#xA;So, you can simply decode the token into a &lt;code&gt;MapClaims&lt;/code&gt;, e.g.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;tokenString := &quot;&amp;lt;YOUR TOKEN STRING&amp;gt;&quot;    &#xA;claims := jwt.MapClaims{}&#xA;token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {&#xA;    return []byte(&quot;&amp;lt;YOUR VERIFICATION KEY&amp;gt;&quot;), nil&#xA;})&#xA;// ... error handling&#xA;&#xA;// do something with decoded claims&#xA;for key, val := range claims {&#xA;    fmt.Printf(&quot;Key: %v, value: %v\n&quot;, key, val)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-07-31T06:08:23.510"" CommentCount=""0"" />
",45408538
45410178,"45410178      <row Id=""45410178"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45410401"" PostTypeId=""2"" ParentId=""45410178"" CreationDate=""2017-07-31T08:04:36.897"" Score=""2"" Body=""&lt;p&gt;You can make it as a string variable and than parse it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;string strDate = &quot;07 31 2017&quot;; //example&#xA;DateFormat df = new SimpleDateFormat(&quot;dd MM yyyy&quot;);&#xA;Date date = df.parse(strDate);&#xA;Calendar cal =  new GregorianCalendar();&#xA;cal.setTime(date);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6683533"" LastActivityDate=""2017-07-31T08:04:36.897"" CommentCount=""5"" />
",45410401
45410176,"45410176      <row Id=""45410176"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45411203"" PostTypeId=""2"" ParentId=""45410176"" CreationDate=""2017-07-31T08:45:48.170"" Score=""0"" Body=""&lt;p&gt;Here instead of following &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;err = t.Execute(res, &quot;/city_update&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;pass data to be used to fill your template as send arguement to &lt;code&gt;Execute&lt;/code&gt; not string. &lt;a href=&quot;https://golang.org/pkg/html/template/#Template.Execute&quot; rel=&quot;nofollow noreferrer&quot;&gt;link to doc&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example .&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;err = t.Execute(res,struct{ID string}{Person_id})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1898494"" LastActivityDate=""2017-07-31T08:45:48.170"" CommentCount=""2"" />
",45411203
45405468,"45405468      <row Id=""45405468"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45412153"" PostTypeId=""2"" ParentId=""45405468"" CreationDate=""2017-07-31T09:31:54.320"" Score=""3"" Body=""&lt;p&gt;You're using the wrong command: &lt;code&gt;:read&lt;/code&gt; &lt;em&gt;appends&lt;/em&gt; lines to the buffer (with &lt;code&gt;! {cmd}&lt;/code&gt;: from an external command). Instead, you want to &lt;em&gt;filter&lt;/em&gt; the current buffer contents through an external command. This is done via &lt;code&gt;:help :range!&lt;/code&gt;. The &lt;code&gt;gofmt&lt;/code&gt; command reads from stdin when no file is passed (some other commands take a special &lt;code&gt;-&lt;/code&gt; argument for that. Ergo:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:nnoremap &amp;lt;C-r&amp;gt; :%! gofmt&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Notes&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://learnvimscriptthehardway.stevelosh.com/chapters/05.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;You should use &lt;code&gt;:noremap&lt;/code&gt;&lt;/a&gt;; it makes the mapping immune to remapping and recursion.&lt;/li&gt;&#xA;&lt;li&gt;I've limited the mapping to &lt;em&gt;normal mode&lt;/em&gt;; I don't think is necessary to directly launch this from visual mode or operator-pending mode.&lt;/li&gt;&#xA;&lt;li&gt;As mentioned in the comments, there's probably a plugin that already provides this out of the box.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""813602"" LastActivityDate=""2017-07-31T09:31:54.320"" CommentCount=""0"" />
",45412153
45412089,"45412089      <row Id=""45412089"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45412336"" PostTypeId=""2"" ParentId=""45412089"" CreationDate=""2017-07-31T09:40:55.810"" Score=""2"" Body=""&lt;p&gt;There is no support for this in the standard lib. You have to make one yourself.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A simple implementation can be like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func split(s string, size int) []string {&#xA;    ss := make([]string, 0, len(s)/size+1)&#xA;    for len(s) &amp;gt; 0 {&#xA;        if len(s) &amp;lt; size {&#xA;            size = len(s)&#xA;        }&#xA;        ss, s = append(ss, s[:size]), s[size:]&#xA;&#xA;    }&#xA;    return ss&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This loops until the string is consumed, and in each iteration cuts of &lt;code&gt;size&lt;/code&gt; chars (bytes) from the beginning.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that this works on base64 texts as that only uses characters which map 1-to-1 to bytes in the UTF-8 encoded form (which is how Go stores strings in memory). If you would want to use this on arbitrary strings, slicing could break valid UTF-8 sequences, and also chunks would not necessarily be &lt;code&gt;size&lt;/code&gt; characters.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Testing it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;s := strings.Repeat(&quot;1&quot;, 2*76+3)&#xA;for _, chunk := range split(s, 76) {&#xA;    fmt.Println(chunk)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/lsGRJn3B92&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1111111111111111111111111111111111111111111111111111111111111111111111111111&#xA;1111111111111111111111111111111111111111111111111111111111111111111111111111&#xA;111&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-07-31T10:38:59.493"" LastActivityDate=""2017-07-31T10:38:59.493"" CommentCount=""0"" />
",45412336
45410422,"45410422      <row Id=""45410422"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45412604"" PostTypeId=""2"" ParentId=""45410422"" CreationDate=""2017-07-31T09:52:19.267"" Score=""0"" Body=""&lt;p&gt;Because the correct package name is a full path starting from &lt;code&gt;/src&lt;/code&gt; directory in you project you should use &lt;code&gt;&quot;go_test/long&quot;&lt;/code&gt; instead on just &lt;code&gt;&quot;long&quot;&lt;/code&gt; in you &lt;code&gt;import&lt;/code&gt; statement. And because it is your own code and not a vendor dependency it must not be under &lt;code&gt;vendor&lt;/code&gt; directory.&lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastActivityDate=""2017-07-31T09:52:19.267"" CommentCount=""1"" />
",45412604
45324473,"45324473      <row Id=""45324473"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45413716"" PostTypeId=""2"" ParentId=""45324473"" CreationDate=""2017-07-31T10:43:16.173"" Score=""0"" Body=""&lt;p&gt;Because you are using regexp to check &lt;code&gt;PhoneNumber&lt;/code&gt; that won't be matching if the value is empty it is better to remove &lt;code&gt;nonzero&lt;/code&gt; from the validation.&lt;br&gt;&#xA;I have checked out documentation and haven't found examples where you can use both: &lt;code&gt;nonzero&lt;/code&gt; and &lt;code&gt;regexp&lt;/code&gt;.&lt;br&gt;&#xA;Also you need to make your regex symbol-escaped, otherwise it won't be detected by reflection. It means you should use &lt;code&gt;(0|\\+62|062|62)[0-9]+$&lt;/code&gt; in your code. Here is example where problem is: &lt;a href=&quot;https://play.golang.org/p/h0xIzZiXpP&quot; rel=&quot;nofollow noreferrer&quot;&gt;symbol escaping in struct tags&lt;/a&gt;&lt;br&gt;&#xA;And also, please try to use this regexp: &lt;code&gt;^\\+{0,1}0{0,1}62[0-9]+$&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastEditorUserId=""8279560"" LastEditDate=""2017-08-01T05:57:11.873"" LastActivityDate=""2017-08-01T05:57:11.873"" CommentCount=""1"" />
",45413716
45423667,"45423667      <row Id=""45423667"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45423692"" PostTypeId=""2"" ParentId=""45423667"" CreationDate=""2017-07-31T19:18:19.283"" Score=""10"" Body=""&lt;p&gt;A slice is really just a fancy way to manage an underlying array. It automatically tracks size, and re-allocates new space as needed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As you append to a slice, its capacity doubles in size every time it exceeds its current capacity. It has to copy all of the elements to do that. If you know how big it will be before you start, you can avoid a few copy operations and memory allocations by grabbing it all up front.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you &lt;code&gt;make&lt;/code&gt; a slice providing capacity, you set tht &lt;strong&gt;initial capacity&lt;/strong&gt;, not any kind of &lt;strong&gt;limit&lt;/strong&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://blog.golang.org/go-slices-usage-and-internals#TOC_5.&quot; rel=&quot;nofollow noreferrer&quot;&gt;this blog post on slices&lt;/a&gt; for some interesting internal details of slices.&lt;/p&gt;&#xA;"" OwnerUserId=""121660"" LastEditorUserId=""121660"" LastEditDate=""2017-08-01T12:56:20.513"" LastActivityDate=""2017-08-01T12:56:20.513"" CommentCount=""2"" />
",45423692
45426891,"45426891      <row Id=""45426891"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45427032"" PostTypeId=""2"" ParentId=""45426891"" CreationDate=""2017-08-01T00:03:23.227"" Score=""2"" Body=""&lt;p&gt;if you have golang installed correctly just issue this in the dir where your golang code lives&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go get -v -t ./...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which will install the upstream libraries ...  then you can compile your code ... for details issue&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go help packages&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;the short of it is &lt;code&gt;./...&lt;/code&gt; will install all packages [ and recursively its upstream packages, etc, etc.] mentioned in any go file's &lt;code&gt;import&lt;/code&gt; in your current dir&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you have ever spent days manually installing upstream libraries for any other language you will appreciate how much of a lifesaver this really is&lt;/p&gt;&#xA;"" OwnerUserId=""147175"" LastEditorUserId=""147175"" LastEditDate=""2017-08-01T01:23:06.650"" LastActivityDate=""2017-08-01T01:23:06.650"" CommentCount=""3"" />
",45427032
45428126,"45428126      <row Id=""45428126"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45428754"" PostTypeId=""2"" ParentId=""45428126"" CreationDate=""2017-08-01T04:00:48.703"" Score=""1"" Body=""&lt;p&gt;Use package &lt;a href=&quot;https://golang.org/pkg/math/big/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;math/big&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/crypto/rand/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;crypto/rand&lt;/code&gt;&lt;/a&gt;. The snippet looks like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//Max random value, a 130-bits integer, i.e 2^130 - 1&#xA;max := new(big.Int)&#xA;max.Exp(big.NewInt(2), big.NewInt(130), nil).Sub(max, big.NewInt(1))&#xA;&#xA;//Generate cryptographically strong pseudo-random between 0 - max&#xA;n, err := rand.Int(rand.Reader, max)&#xA;if err != nil {&#xA;    //error handling&#xA;}&#xA;&#xA;//String representation of n in base 32&#xA;nonce := n.Text(32)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;A working example can be found at &lt;a href=&quot;https://play.golang.org/p/ssET5KZQuj&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Go Playground&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastEditorUserId=""6207052"" LastEditDate=""2017-08-01T06:13:31.463"" LastActivityDate=""2017-08-01T06:13:31.463"" CommentCount=""0"" />
",45428754
45428744,"45428744      <row Id=""45428744"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45429321"" PostTypeId=""2"" ParentId=""45428744"" CreationDate=""2017-08-01T05:05:37.347"" Score=""3"" Body=""&lt;p&gt;See &lt;a href=&quot;https://github.com/golang/go/wiki/GithubCodeLayout&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub code layout&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;code&gt;$GOPATH&lt;/code&gt; is the root of the project - each of your Github repos will be checked out several folders below &lt;code&gt;$GOPATH&lt;/code&gt;.&lt;br&gt;&#xA;  Your &lt;code&gt;$GOPATH&lt;/code&gt; variable will point to the root of your Go workspace, as described in &lt;a href=&quot;http://golang.org/doc/code.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;How to Write Go Code&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;In your case, below your &lt;code&gt;GOPATH&lt;/code&gt; folder, you should have&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;src/github.com/minio/minio&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Anf only &lt;em&gt;then&lt;/em&gt; &quot;all minio directories, including vendor&quot;&lt;/p&gt;&#xA;"" OwnerUserId=""6309"" LastActivityDate=""2017-08-01T05:05:37.347"" CommentCount=""4"" />
",45429321
45430207,"45430207      <row Id=""45430207"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45431068"" PostTypeId=""2"" ParentId=""45430207"" CreationDate=""2017-08-01T07:03:26.227"" Score=""2"" Body=""&lt;p&gt;Because the function is a reference you do not need to use any pointers or try to take an address of the function.&lt;br&gt;&#xA;Just declare    &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (wm *WM) AddListener(listener MessageListener) error {&#xA;...&#xA;}&#xA;// and get rid of taken address of function&#xA;wm.AddListener(service.receiveMessage)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8279560"" LastActivityDate=""2017-08-01T07:03:26.227"" CommentCount=""1"" />
",45431068
45430126,"45430126      <row Id=""45430126"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45431290"" PostTypeId=""2"" ParentId=""45430126"" CreationDate=""2017-08-01T07:16:41.033"" Score=""1"" Body=""&lt;p&gt;You are sending the content of summary as a string so, instead you need to send it as a slice of maps&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;k := [...]common.MapStr{&#xA;    {&quot;name&quot;: &quot;cpu&quot;, &quot;status&quot;: m.cpu_status},&#xA;    {&quot;name&quot;: &quot;LTE&quot;, &quot;status&quot;: m.lte_status},&#xA;    {&quot;name&quot;: &quot;Network&quot;, &quot;status&quot;: m.network_status},&#xA;    {&quot;name&quot;: &quot;Memory&quot;, &quot;status&quot;: m.memory_status},&#xA;}&#xA;event := common.MapStr{&#xA;    &quot;cpu_status&quot;:     (m.cpu_status % 4),&#xA;    &quot;memory_status&quot;:  (m.memory_status % 4),&#xA;    &quot;lte_status&quot;:     (m.lte_status % 4),&#xA;    &quot;network_status&quot;: (m.network_status % 4),&#xA;    &quot;summary&quot;:        k,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://play.golang.org/p/yTSXnNKclG&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/yTSXnNKclG&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""7616"" LastActivityDate=""2017-08-01T07:16:41.033"" CommentCount=""0"" />
",45431290
45429276,"45429276      <row Id=""45429276"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45431649"" PostTypeId=""2"" ParentId=""45429276"" CreationDate=""2017-08-01T07:35:05.710"" Score=""1"" Body=""&lt;p&gt;In the method &lt;code&gt;ContainerCreate&lt;/code&gt; the third parameter is &lt;a href=&quot;https://godoc.org/github.com/moby/moby/api/types/container#HostConfig&quot; rel=&quot;nofollow noreferrer&quot;&gt;HostConfig&lt;/a&gt; that you need to use. If you are interested in setting ports then you should take a look at &lt;code&gt;PortBindings&lt;/code&gt; field. Also you need to specify exposed ports for container. You can do this by providing &lt;code&gt;ExposedPorts&lt;/code&gt; into &lt;a href=&quot;https://godoc.org/github.com/moby/moby/api/types/container#Config&quot; rel=&quot;nofollow noreferrer&quot;&gt;container configuration&lt;/a&gt; (second parameter).&lt;br&gt;&#xA;And I assume that you container will be started in a &lt;code&gt;daemon&lt;/code&gt; mode by default because you are using API instead of &lt;code&gt;cli&lt;/code&gt; tool.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is a working example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;context&quot;&#xA;&#xA;    &quot;github.com/docker/docker/api/types&quot;&#xA;    &quot;github.com/docker/docker/api/types/container&quot;&#xA;    &quot;github.com/docker/docker/client&quot;&#xA;    &quot;github.com/docker/go-connections/nat&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    cli, err := client.NewEnvClient()&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    ctx := context.Background()&#xA;    resp, err := cli.ContainerCreate(ctx, &amp;amp;container.Config{&#xA;        Image:        &quot;mongo&quot;,&#xA;        ExposedPorts: nat.PortSet{&quot;8080&quot;: struct{}{}},&#xA;    }, &amp;amp;container.HostConfig{&#xA;        PortBindings: map[nat.Port][]nat.PortBinding{nat.Port(&quot;8080&quot;): {{HostIP: &quot;127.0.0.1&quot;, HostPort: &quot;8080&quot;}}},&#xA;    }, nil, &quot;mongo-go-cli&quot;)&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    if err := cli.ContainerStart(ctx, resp.ID, types.ContainerStartOptions{}); err != nil {&#xA;        panic(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And in the output for &lt;code&gt;docker ps --all&lt;/code&gt; I can see my port: &lt;code&gt;PORTS 127.0.0.1:8080-&amp;gt;8080/tcp, 27017/tcp&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8279560"" LastEditorUserId=""8279560"" LastEditDate=""2017-08-01T17:37:30.917"" LastActivityDate=""2017-08-01T17:37:30.917"" CommentCount=""3"" />
",45431649
45432483,"45432483      <row Id=""45432483"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45432623"" PostTypeId=""2"" ParentId=""45432483"" CreationDate=""2017-08-01T08:24:54.297"" Score=""-1"" Body=""&lt;p&gt;Access embeded field explicitly:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; session, mongoerr := mgo.DialWithInfo(mongoConfig.DialInfo)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""498109"" LastEditorUserId=""498109"" LastEditDate=""2017-08-01T10:08:38.713"" LastActivityDate=""2017-08-01T10:08:38.713"" CommentCount=""2"" />
",45432623
45432924,"45432924      <row Id=""45432924"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45433106"" PostTypeId=""2"" ParentId=""45432924"" CreationDate=""2017-08-01T08:47:41.713"" Score=""2"" Body=""&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/time/#Time&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;time.Time&lt;/code&gt;&lt;/a&gt; has no exported field &lt;code&gt;Second&lt;/code&gt;, so &lt;code&gt;startTime.Second&lt;/code&gt; is invalid.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is a &lt;a href=&quot;https://golang.org/pkg/time/#Time.Add&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Time.Add()&lt;/code&gt;&lt;/a&gt; method which you may use to add a &lt;a href=&quot;https://golang.org/pkg/time/#Duration&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;time.Duration&lt;/code&gt;&lt;/a&gt; value to a &lt;code&gt;time.Time&lt;/code&gt; value. And to subtract a duration from it, simply multiply the value you add with &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (bt *Hc34) getStartDate(endTime time.Time, duration int) time.Time {&#xA;    return endTime.Add(time.Duration(-duration) * time.Second)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Example with a &lt;code&gt;getStartDate()&lt;/code&gt; function (not method):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;now := time.Now()&#xA;fmt.Println(now)&#xA;fmt.Println(getStartDate(now, 60))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output on the &lt;a href=&quot;https://play.golang.org/p/4sBbetvX92&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;2009-11-10 23:00:00 +0000 UTC&#xA;2009-11-10 22:59:00 +0000 UTC&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I also recommend to read this answer about using &lt;code&gt;time.Duration&lt;/code&gt; values constructed from integers: &lt;a href=&quot;https://stackoverflow.com/questions/41503758/conversion-of-time-duration-type-microseconds-value-to-milliseconds-in-golang/41503910#41503910&quot;&gt;Conversion of time.Duration type microseconds value to milliseconds&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-08-01T11:20:39.227"" LastActivityDate=""2017-08-01T11:20:39.227"" CommentCount=""1"" />
",45433106
45433505,"45433505      <row Id=""45433505"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45433618"" PostTypeId=""2"" ParentId=""45433505"" CreationDate=""2017-08-01T09:10:06.927"" Score=""4"" Body=""&lt;p&gt;1 &amp;lt;&amp;lt; 0 means:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Take 1 and don't shift it. The result should be the original number: 1&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-01T09:10:06.927"" CommentCount=""2"" />
",45433618
45432904,"45432904      <row Id=""45432904"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45433958"" PostTypeId=""2"" ParentId=""45432904"" CreationDate=""2017-08-01T09:26:14.833"" Score=""2"" Body=""&lt;p&gt;For &quot;why&quot; see the &lt;a href=&quot;https://stackoverflow.com/questions/12753805/type-converting-slices-of-interfaces-in-go&quot;&gt;link posted by mkopriva&lt;/a&gt;. The following answer is regarding your original case.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the first case you could cast each &lt;code&gt;map[string]interface{}&lt;/code&gt; individually (looping over them) and then cast &lt;code&gt;[]Row&lt;/code&gt; to &lt;code&gt;Rows&lt;/code&gt;. You cannot cast the whole thing at once. The cast from []Row to Rows can be done implicitly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here your &lt;a href=&quot;https://play.golang.org/p/WDWl7W070I&quot; rel=&quot;nofollow noreferrer&quot;&gt;test snippet&lt;/a&gt; with the described ways to cast it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;type (&#xA;    Row  map[string]interface{}&#xA;    Rows []Row&#xA;)&#xA;&#xA;func do(data Rows) {}&#xA;&#xA;func main() {&#xA;    var (&#xA;        data []map[string]interface{}&#xA;        rws []Row&#xA;        rows Rows&#xA;    )&#xA;    for _, r := range data {&#xA;        rws = append(rws, Row(r))&#xA;        rows = append(rows, Row(r))&#xA;    }&#xA;    do(Rows(rws))  // possible but not necessary&#xA;    do(rws)        // this works just fine&#xA;    do(rows)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-01T09:26:14.833"" CommentCount=""0"" />
",45433958
45433986,"45433986      <row Id=""45433986"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45434916"" PostTypeId=""2"" ParentId=""45433986"" CreationDate=""2017-08-01T10:07:24.243"" Score=""0"" Body=""&lt;p&gt;have a look at &lt;a href=&quot;https://play.golang.org/p/T-8l0voCDC&quot; rel=&quot;nofollow noreferrer&quot;&gt;this solution&lt;/a&gt;. It is one possible solution.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Generally: you want to work with interfaces here. In the sample I use the interface &lt;code&gt;DataRow&lt;/code&gt; to store data of a row of any table. All table structs have to implement 2 functions as you can see in my example. (Also see my note about a general function in a base class with generics)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here the code again:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;type Foo struct {&#xA;    Id string&#xA;}&#xA;&#xA;func (s *Foo) Fill(m map[string]string) {&#xA;    // If you want to build a general Fill you can build a base struct for Foo, Bar, etc. that works with reflect. &#xA;    // Note that it will be slower than implementing the function here! Ask me if you want one I built recently.&#xA;&#xA;    s.Id = m[&quot;id&quot;]&#xA;}&#xA;&#xA;func (s *Foo) GetRow() interface{} {&#xA;    return nil&#xA;}&#xA;&#xA;type Bar struct {&#xA;    Id string&#xA;}&#xA;&#xA;func (s *Bar) Fill(m map[string]string) {&#xA;    s.Id = m[&quot;id&quot;]&#xA;}&#xA;&#xA;func (s *Bar) GetRow() interface{} {&#xA;    return nil&#xA;}&#xA;&#xA;type DataRow interface {&#xA;    Fill(m map[string]string)&#xA;    GetRow() interface{}&#xA;}&#xA;&#xA;type Changeset struct {&#xA;    Table   string&#xA;    Type    string&#xA;    OldData map[string]string&#xA;    NewData map[string]string&#xA;}&#xA;&#xA;type ChangesetTyped struct {&#xA;    Table   string&#xA;    Type    string&#xA;    OldData DataRow&#xA;    NewData DataRow&#xA;}&#xA;&#xA;func doMap(c Changeset) ChangesetTyped {&#xA;    ct := ChangesetTyped{&#xA;        Table:   c.Table,&#xA;        Type:    c.Type,&#xA;        OldData: parseRow(c.Table, c.OldData),&#xA;    }&#xA;&#xA;    if c.Type == &quot;UPDATE&quot; {&#xA;        ct.NewData = parseRow(c.Table, c.NewData)&#xA;    }&#xA;&#xA;    return ct&#xA;}&#xA;&#xA;func parseRow(table string, data map[string]string) (row DataRow) {&#xA;    if table == &quot;foo&quot; {&#xA;        row = &amp;amp;Foo{}&#xA;    } else if table == &quot;bar&quot; {&#xA;        row = &amp;amp;Bar{}&#xA;    }&#xA;&#xA;    row.Fill(data)&#xA;    return&#xA;}&#xA;&#xA;func main() {&#xA;    i := Changeset{&#xA;        Table:   &quot;foo&quot;,&#xA;        Type:    &quot;INSERT&quot;,&#xA;        NewData: map[string]string{&quot;id&quot;: &quot;1&quot;},&#xA;    }&#xA;&#xA;    u1 := Changeset{&#xA;        Table:   &quot;foo&quot;,&#xA;        Type:    &quot;UPDATE&quot;,&#xA;        OldData: map[string]string{&quot;id&quot;: &quot;20&quot;},&#xA;        NewData: map[string]string{&quot;id&quot;: &quot;21&quot;},&#xA;    }&#xA;&#xA;    u2 := Changeset{&#xA;        Table:   &quot;bar&quot;,&#xA;        Type:    &quot;UPDATE&quot;,&#xA;        OldData: map[string]string{&quot;id&quot;: &quot;30&quot;},&#xA;        NewData: map[string]string{&quot;id&quot;: &quot;31&quot;},&#xA;    }&#xA;&#xA;    m1 := doMap(i)&#xA;    m2 := doMap(u1)&#xA;    m3 := doMap(u2)&#xA;&#xA;    fmt.Println(m1, m1.OldData)&#xA;    fmt.Println(m2, m2.OldData, m2.NewData)&#xA;    fmt.Println(m3, m3.OldData, m3.NewData)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you want to get the actual row from &lt;code&gt;DataRow&lt;/code&gt; cast to the correct type use (of type Foo in this example):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foo, ok := dt.GetRow().(Foo)&#xA;if !ok {&#xA;    fmt.Println(&quot;it wasn't of type Foo after all&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Hope this helps you in you golang quest!&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-01T10:07:24.243"" CommentCount=""2"" />
",45434916
45439343,"45439343      <row Id=""45439343"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45439443"" PostTypeId=""2"" ParentId=""45439343"" CreationDate=""2017-08-01T13:37:15.490"" Score=""0"" Body=""&lt;p&gt;Annotated:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;   // format string. This returns MMdd&#xA;    final SimpleDateFormat sdf = new SimpleDateFormat(&quot;MMdd&quot;);&#xA;&#xA;    //redundant re-declaration of function parameter&#xA;    final int dayOfYear = quant;&#xA;&#xA;    // make a date and set DAY_OF_YEAR to quant&#xA;    final Calendar calendar = Calendar.getInstance();&#xA;    calendar.set(Calendar.DAY_OF_YEAR, dayOfYear);&#xA;&#xA;    // get date and return it in the correct format&#xA;    final Date dat = calendar.getTime();&#xA;    return sdf.format(dat);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Looks like the funtion takes a number, converts it to a date, and formats it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;1&lt;/code&gt; would yield &lt;code&gt;0101&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;13&lt;/code&gt; would give &lt;code&gt;0113&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;32&lt;/code&gt; would give &lt;code&gt;0201&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;and so forth.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It is not clear though, how this handles leap years and other variables like that. It does not seem like very high quality code, and I'd recommend analyzing your problem, and coming up with a good spec.&lt;/p&gt;&#xA;"" OwnerUserId=""121660"" LastEditorUserId=""121660"" LastEditDate=""2017-08-01T13:43:58.540"" LastActivityDate=""2017-08-01T13:43:58.540"" CommentCount=""1"" />
",45439443
45439883,"45439883      <row Id=""45439883"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45440202"" PostTypeId=""2"" ParentId=""45439883"" CreationDate=""2017-08-01T14:10:14.960"" Score=""0"" Body=""&lt;p&gt;Here's my solution. It involves a few different tips:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; the shared struct in the individual structs.&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;code&gt;encoding/binary&lt;/code&gt; package to load bytes into structs.&lt;/li&gt;&#xA;&lt;li&gt;Fill header struct with first two bytes, then make a decision on which subtype to make and fill.&lt;/li&gt;&#xA;&lt;li&gt;Always use fixed length int types for this kind of thing.&lt;/li&gt;&#xA;&lt;li&gt;Your field names must be &lt;code&gt;UpperCase&lt;/code&gt; to be fillable from &lt;code&gt;encoding/binary&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;This is a pretty brittle way to manage marshalling.unmarshalling of data, but I'm sure you know that.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Here's my solution:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;bytes&quot;&#xA;    &quot;encoding/binary&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;)&#xA;&#xA;type A struct {&#xA;    X&#xA;    Data1 int32&#xA;    Data2 int32&#xA;    Data3 int32&#xA;}&#xA;&#xA;type B struct {&#xA;    X&#xA;    Data1 int32&#xA;}&#xA;&#xA;type X struct {&#xA;    Tag byte&#xA;    Ver byte&#xA;}&#xA;&#xA;func main() {&#xA;    var err error&#xA;    data := []byte{1, 1, 0, 0, 0, 42}&#xA;    hdr := X{}&#xA;&#xA;    err = binary.Read(bytes.NewReader(data[:2]), binary.BigEndian, &amp;amp;hdr)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    fmt.Println(hdr.Tag, hdr.Ver)&#xA;&#xA;    if hdr.Tag == 1 {&#xA;        b := B{}&#xA;        err = binary.Read(bytes.NewReader(data), binary.BigEndian, &amp;amp;b)&#xA;        if err != nil {&#xA;            log.Fatal(err)&#xA;        }&#xA;        fmt.Println(b.Data1)&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/4Djx9UYTLF&quot; rel=&quot;nofollow noreferrer&quot;&gt;playground link&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""121660"" LastActivityDate=""2017-08-01T14:10:14.960"" CommentCount=""0"" />
",45440202
45441783,"45441783      <row Id=""45441783"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45442065"" PostTypeId=""2"" ParentId=""45441783"" CreationDate=""2017-08-01T15:36:24.870"" Score=""1"" Body=""&lt;p&gt;According to the &lt;a href=&quot;https://godoc.org/github.com/jinzhu/gorm#DB.Create&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs&lt;/a&gt;, &lt;code&gt;Create&lt;/code&gt; returns a &lt;code&gt;*DB&lt;/code&gt;, not an error. So your code should be more like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if tx = tx.Create(name); tx.Error != nil { /* ... */ }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1892060"" LastActivityDate=""2017-08-01T15:36:24.870"" CommentCount=""0"" />
",45442065
45441735,"45441735      <row Id=""45441735"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45442842"" PostTypeId=""2"" ParentId=""45441735"" CreationDate=""2017-08-01T16:15:05.550"" Score=""1"" Body=""&lt;p&gt;Here what you are looking for:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func getHostKey(host string) (ssh.PublicKey, error) {&#xA;    file, err := os.Open(filepath.Join(os.Getenv(&quot;HOME&quot;), &quot;.ssh&quot;, &quot;known_hosts&quot;))&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    defer file.Close()&#xA;&#xA;    scanner := bufio.NewScanner(file)&#xA;    var hostKey ssh.PublicKey&#xA;    for scanner.Scan() {&#xA;        fields := strings.Split(scanner.Text(), &quot; &quot;)&#xA;        if len(fields) != 3 {&#xA;            continue&#xA;        }&#xA;        if strings.Contains(fields[0], host) {&#xA;            var err error&#xA;            hostKey, _, _, _, err = ssh.ParseAuthorizedKey(scanner.Bytes())&#xA;            if err != nil {&#xA;                return nil, errors.New(fmt.Sprintf(&quot;error parsing %q: %v&quot;, fields[2], err))&#xA;            }&#xA;            break&#xA;        }&#xA;    }&#xA;&#xA;    if hostKey == nil {&#xA;        return nil, errors.New(fmt.Sprintf(&quot;no hostkey for %s&quot;, host))&#xA;    }&#xA;    return hostKey, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then replace your hostKey definition line with&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;hostKey, err := getHostKey(&quot;host.com&quot;)&#xA;if err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For more information on the subject:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://github.com/golang/crypto/blob/master/ssh/example_test.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;official sample&lt;/a&gt; where I took parts of the code from&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://github.com/golang/go/issues/19767&quot; rel=&quot;nofollow noreferrer&quot;&gt;why a hostKey is necessary now&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-01T16:15:05.550"" CommentCount=""6"" />
",45442842
45443414,"45443414      <row Id=""45443414"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45443906"" PostTypeId=""2"" ParentId=""45443414"" CreationDate=""2017-08-01T17:09:20.693"" Score=""2"" Body=""&lt;p&gt;A named pipe reader will receive EOF when there are no writers left. The solution outside of this code is to make sure there is always one writer process holding the file descriptor, though it doesn't need to write anything. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Within the Go program, if you want to wait for a new writer, you will have to poll the &lt;code&gt;io.Reader&lt;/code&gt; in your for loop. Your current code does this with a busy loop, which will consume 100% of 1 cpu core. Adding a sleep and a way to return on other errors will work around the issue:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for {&#xA;    err := io.Copy(&amp;amp;buff, fpipe)&#xA;    if buff.Len() &amp;gt; 0 {&#xA;        buff.WriteTo(f)&#xA;    }&#xA;&#xA;    if err != nil {&#xA;        // something other than EOF happened&#xA;        return&#xA;    }&#xA;&#xA;    time.Sleep(100 * time.Millisecond)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""32880"" LastActivityDate=""2017-08-01T17:09:20.693"" CommentCount=""4"" />
",45443906
44089111,"44089111      <row Id=""44089111"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45444023"" PostTypeId=""2"" ParentId=""44089111"" CreationDate=""2017-08-01T17:15:26.130"" Score=""2"" Body=""&lt;p&gt;There is a bug in the golang standard library &lt;code&gt;net/http&lt;/code&gt; that fails to handle the &lt;code&gt;REFUSED_STREAM&lt;/code&gt; http/2 error properly.  This is what is likely going on:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;golang client opens a TCP connection to the HTTP/2 www server, sets the maximum number of HTTP streams in the connection to 1000 and starts uploading immediately.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;The HTTP/2 www server tells the golang client to only use a given number of streams, but the golang client has already started more than that amount of streams.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;The HTTP/2 www server reacts to this by resetting the excess streams.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;The lack of proper support for a retry in the golang &lt;code&gt;net/http&lt;/code&gt; code causes the stream to fail after being reset by the server, and eventually the upload fails as well.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;There is a ticket open about this issue on github: &lt;a href=&quot;https://github.com/golang/go/issues/20985/&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;x/net/http2: retry requests rejected with REFUSED_STREAM&quot;&gt;x/net/http2: retry requests rejected with REFUSED_STREAM - golang/go/issues/20985&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;**This issue has been closed in the master branch, the fix will be included in future Golang version 1.10&lt;/p&gt;&#xA;"" OwnerUserId=""5535550"" LastEditorUserId=""5535550"" LastEditDate=""2017-08-21T21:42:20.667"" LastActivityDate=""2017-08-21T21:42:20.667"" CommentCount=""0"" />
",45444023
45445263,"45445263      <row Id=""45445263"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45445313"" PostTypeId=""2"" ParentId=""45445263"" CreationDate=""2017-08-01T18:34:50.940"" Score=""6"" Body=""&lt;p&gt;You should do &lt;code&gt;i = increment(i)&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Otherwise, the &lt;code&gt;i&lt;/code&gt; used in the loop is not modified.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for i := 1; condition_true(i); i = increment(i) {&#xA;    fmt.Println(i)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That one works as you'd expect.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/dwHbV1iY0_&quot; rel=&quot;noreferrer&quot;&gt;https://play.golang.org/p/dwHbV1iY0_&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Alternatively, allow &lt;code&gt;increment&lt;/code&gt; to modify &lt;code&gt;i&lt;/code&gt; by receiving a pointer to it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func increment(i *int) {&#xA;   *i++&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And then use it like this in the loop:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for i := 1; condition_true(i); increment(&amp;amp;i) {&#xA;    fmt.Println(i)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-08-01T18:34:50.940"" CommentCount=""0"" />
",45445313
45446429,"45446429      <row Id=""45446429"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45446477"" PostTypeId=""2"" ParentId=""45446429"" CreationDate=""2017-08-01T19:46:59.027"" Score=""4"" Body=""&lt;p&gt;You never send any values to &lt;code&gt;stuff&lt;/code&gt;, you execute all the default cases before you get to any of the receive operations in the &lt;code&gt;fmt.Println&lt;/code&gt; statements. The &lt;code&gt;default&lt;/code&gt; case is taken immediately if there is no other operation than can proceed, which means that your loop will execute and return as quickly as possible.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You want to block the loop, so you don't need the &lt;code&gt;default&lt;/code&gt; case. You don't need the &lt;code&gt;close&lt;/code&gt; at the end either, because you're not relying on the closed channel unblocking a receive or breaking from a &lt;code&gt;range&lt;/code&gt; clause. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;stuff := make(chan int)&#xA;go func() {&#xA;    for i := 0; i &amp;lt; 5; i++ {&#xA;        select {&#xA;        case stuff &amp;lt;- i:&#xA;            fmt.Printf(&quot;Sent %v\n&quot;, i)&#xA;        }&#xA;    }&#xA;    println(&quot;Closing&quot;)&#xA;}()&#xA;time.Sleep(time.Second)&#xA;fmt.Println(&amp;lt;-stuff)&#xA;fmt.Println(&amp;lt;-stuff)&#xA;fmt.Println(&amp;lt;-stuff)&#xA;fmt.Println(&amp;lt;-stuff)&#xA;fmt.Println(&amp;lt;-stuff)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/k2rmRDP38f&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/k2rmRDP38f&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Notice also that the last &quot;Sent&quot; and the &quot;Closing&quot; line aren't printed, because you have no other synchronization waiting for the goroutine to finish, however that doesn't effect the outcome of this example. &lt;/p&gt;&#xA;"" OwnerUserId=""32880"" LastEditorUserId=""32880"" LastEditDate=""2017-08-01T20:08:01.647"" LastActivityDate=""2017-08-01T20:08:01.647"" CommentCount=""2"" />
",45446477
45450569,"45450569      <row Id=""45450569"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45450994"" PostTypeId=""2"" ParentId=""45450569"" CreationDate=""2017-08-02T03:33:05.970"" Score=""0"" Body=""&lt;p&gt;It seems I was missing &lt;code&gt;libpcap-dev&lt;/code&gt;. Now why Go or the package didn't throw a proper error message is beyond me.&lt;/p&gt;&#xA;"" OwnerUserId=""216212"" LastActivityDate=""2017-08-02T03:33:05.970"" CommentCount=""0"" />
",45450994
45451402,"45451402      <row Id=""45451402"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45451560"" PostTypeId=""2"" ParentId=""45451402"" CreationDate=""2017-08-02T04:35:53.147"" Score=""2"" Body=""&lt;p&gt;You should add '&amp;amp;' before arr[i]&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main(){&#xA;  var n int&#xA;  fmt.Scanf(&quot;%d&quot;, &amp;amp;n)&#xA;  var arr [200] int&#xA;&#xA;  for i := 0; i &amp;lt; n; i++ {&#xA;    fmt.Printf(&quot;\nEnter %d:&quot;, i)&#xA;    fmt.Scanf(&quot;%d&quot;, &amp;amp;arr[i])&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8284461"" LastActivityDate=""2017-08-02T04:35:53.147"" CommentCount=""2"" />
",45451560
45451539,"45451539      <row Id=""45451539"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45451737"" PostTypeId=""2"" ParentId=""45451539"" CreationDate=""2017-08-02T04:54:09.893"" Score=""1"" Body=""&lt;p&gt;Please make sure that the &lt;code&gt;k8s-oidc-helper&lt;/code&gt; is exists in &lt;code&gt;/usr/share/go/bin&lt;/code&gt;, and &lt;code&gt;/usr/share/go/bin&lt;/code&gt; has been added into PATH environment variable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Check:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ls /usr/share/go/bin | grep k8s-oidc-helper&#xA;&#xA;echo $PATH | grep /usr/share/go/bin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7377118"" LastActivityDate=""2017-08-02T04:54:09.893"" CommentCount=""6"" />
",45451737
45452729,"45452729      <row Id=""45452729"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45456046"" PostTypeId=""2"" ParentId=""45452729"" CreationDate=""2017-08-02T08:54:23.510"" Score=""0"" Body=""&lt;p&gt;I have resolved this issue. The path set was incorrect for `go'&#xA;I checked the environment of go and accordingly set the path.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;export GOPATH=/usr/lib/go&#xA;export PATH=$PATH:$GOPATH/bin&#xA;sudo go get -u github.com/micahhausler/k8s-oidc-helper&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;now the helper package works&lt;/p&gt;&#xA;"" OwnerUserId=""6380294"" LastActivityDate=""2017-08-02T08:54:23.510"" CommentCount=""0"" />
",45456046
45442034,"45442034      <row Id=""45442034"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45456407"" PostTypeId=""2"" ParentId=""45442034"" CreationDate=""2017-08-02T09:10:23.700"" Score=""0"" Body=""&lt;p&gt;You need to install the libvirt development package, eg libvirt-devel on Fedora/RHEL/Centos, or libvirt-dev on Debian/Ubuntu.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The libvirt-go build process will just query 'pkg-config' to find out where it is installed, so if you did have it installed in a non-standard location (eg /opt/libvirt), then you would do   'export PKG_CONFIG_PATH=/opt/libvirt/lib/pkgconfig' and then libvirt-go would find that.&lt;/p&gt;&#xA;"" OwnerUserId=""7126113"" LastActivityDate=""2017-08-02T09:10:23.700"" CommentCount=""0"" />
",45456407
45456344,"45456344      <row Id=""45456344"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45456829"" PostTypeId=""2"" ParentId=""45456344"" CreationDate=""2017-08-02T09:28:16.747"" Score=""4"" Body=""&lt;p&gt;Just use &lt;code&gt;xml:&quot;UsernameToken&quot;&lt;/code&gt; instead of &lt;code&gt;xml:&quot;wsse:UsernameToken&quot;&lt;/code&gt;, &lt;code&gt;xml:&quot;wsse:Security&quot;&lt;/code&gt; -&gt; &lt;code&gt;xml:&quot;Security&quot;&lt;/code&gt;, etc.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;encoding/xml&quot;&#xA;)&#xA;&#xA;type Envelope struct {&#xA;    XMLName xml.Name&#xA;    Header  Header&#xA;}&#xA;&#xA;type Header struct {&#xA;    XMLName  xml.Name `xml:&quot;Header&quot;`&#xA;    Security Security `xml:&quot;Security&quot;`&#xA;}&#xA;&#xA;type Security struct {&#xA;    XMLName        xml.Name `xml:&quot;Security&quot;`&#xA;    MustUnderstand string `xml:&quot;mustUnderstand,attr&quot;`&#xA;    WSSE           string `xml:&quot;wsse,attr&quot;`&#xA;    SOAP           string `xml:&quot;soap,attr&quot;`&#xA;    UsernameToken struct {&#xA;        XMLName  xml.Name `xml:&quot;UsernameToken&quot;`&#xA;        Username string `xml:&quot;Username&quot;`&#xA;        Password string `xml:&quot;Password&quot;`&#xA;    }&#xA;}&#xA;&#xA;func main() {&#xA;&#xA;    Soap := []byte(`&amp;lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&amp;gt;&#xA;&#xA;  &amp;lt;SOAP-ENV:Header xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&amp;gt;&#xA;    &amp;lt;wsse:Security soap:mustUnderstand=&quot;1&quot; xmlns:wsse=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&amp;gt;&#xA;      &amp;lt;wsse:UsernameToken&amp;gt;&#xA;        &amp;lt;wsse:Username&amp;gt;USERNAME&amp;lt;/wsse:Username&amp;gt;&#xA;        &amp;lt;wsse:Password Type=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText&quot;&amp;gt;SECRET&amp;lt;/wsse:Password&amp;gt;&#xA;      &amp;lt;/wsse:UsernameToken&amp;gt;&#xA;    &amp;lt;/wsse:Security&amp;gt;&#xA;  &amp;lt;/SOAP-ENV:Header&amp;gt;&#xA;&#xA;  &amp;lt;SOAP-ENV:Body xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&amp;gt;&#xA;    &amp;lt;OTA_HotelAvailNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;abc123&quot; Version=&quot;1.0&quot; TimeStamp=&quot;2005-08-01T09:30:47+08:00&quot;&amp;gt;&#xA;      &amp;lt;AvailStatusMessages HotelCode=&quot;HOTEL&quot;&amp;gt;&#xA;        &amp;lt;AvailStatusMessage BookingLimit=&quot;10&quot;&amp;gt;&#xA;          &amp;lt;StatusApplicationControl Start=&quot;2010-01-01&quot; End=&quot;2010-01-14&quot; InvTypeCode=&quot;A1K&quot; RatePlanCode=&quot;GLD&quot;/&amp;gt;&#xA;        &amp;lt;/AvailStatusMessage&amp;gt;&#xA;      &amp;lt;/AvailStatusMessages&amp;gt;&#xA;    &amp;lt;/OTA_HotelAvailNotifRQ&amp;gt;&#xA;  &amp;lt;/SOAP-ENV:Body&amp;gt;&#xA;&#xA;&amp;lt;/SOAP-ENV:Envelope&amp;gt;`)&#xA;&#xA;    res := &amp;amp;Envelope{}&#xA;    err := xml.Unmarshal(Soap, res)&#xA;&#xA;    fmt.Println(res.Header.Security.UsernameToken.Username, err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output: &lt;code&gt;USERNAME &amp;lt;nil&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""3805062"" LastActivityDate=""2017-08-02T09:28:16.747"" CommentCount=""3"" />
",45456829
45457397,"45457397      <row Id=""45457397"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45457468"" PostTypeId=""2"" ParentId=""45457397"" CreationDate=""2017-08-02T09:54:17.937"" Score=""3"" Body=""&lt;p&gt;You are right: &lt;code&gt;strings.Spit()&lt;/code&gt; will never return a nil value. The result will be of type &lt;code&gt;[]string&lt;/code&gt; with at least one element containing the given string.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Whether you can remove the if block depends: Does your code have a problem if &lt;code&gt;len(ips) &amp;lt; 2&lt;/code&gt;? If it does not you can safely remove the if block.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If however e.g. you are only interested in &lt;code&gt;ips[1]&lt;/code&gt; then you definitely need to check first.&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastEditorUserId=""6220193"" LastEditDate=""2017-08-02T11:09:58.563"" LastActivityDate=""2017-08-02T11:09:58.563"" CommentCount=""3"" />
",45457468
45455144,"45455144      <row Id=""45455144"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45457928"" PostTypeId=""2"" ParentId=""45455144"" CreationDate=""2017-08-02T10:12:42.553"" Score=""1"" Body=""&lt;p&gt;You need to return empty &lt;code&gt;model.Model&lt;/code&gt; object in order for protobufs to be able to properly serialise the message.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import &quot;google.golang.org/grpc/status&quot;&#xA;&#xA;func (Abcd) Dosomethink(c context.Context, sessionRequest *model.MyModel) (*model.Model, error) {&#xA;&#xA;   return &amp;amp;model.Model{}, status.New(400,&quot;Default error message for 400&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""563158"" LastActivityDate=""2017-08-02T10:12:42.553"" CommentCount=""1"" />
",45457928
45436158,"45436158      <row Id=""45436158"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45462051"" PostTypeId=""2"" ParentId=""45436158"" CreationDate=""2017-08-02T13:19:39.300"" Score=""1"" Body=""&lt;p&gt;On Windows, your first step is to try &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa373208(v=vs.85).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;SetThreadExecutionState&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Enables an application to inform the system that it is in use, thereby preventing the system from entering sleep or turning off the display while the application is running&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;This is not a perfect solution but I assume this is not an issue for you:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The SetThreadExecutionState function cannot be used to prevent the user from putting the computer to sleep. Applications should respect that the user expects a certain behavior when they close the lid on their laptop or press the power button&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The Windows 8 connected standby feature is also something you might need to consider. Looking at the power related APIs we find this description of &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/dd405534(v=vs.85).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;PowerRequestSystemRequired&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The system continues to run instead of entering sleep after a period of user inactivity. &lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;This request type is not honored on systems capable of connected standby. Applications should use PowerRequestExecutionRequired requests instead.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;If you are dealing with tablets and other small devices then you can try to call &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/dd405534(v=vs.85).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;PowerSetRequest&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;PowerRequestExecutionRequired&lt;/code&gt; to prevent this although the description of that is also not ideal:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The calling process continues to run instead of being suspended or terminated by process lifetime management mechanisms. When and how long the process is allowed to run depends on the operating system and power policy settings.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;You might also want to use &lt;code&gt;ShutdownBlockReasonCreate&lt;/code&gt; but I'm not sure if it blocks sleep/hibernate.&lt;/p&gt;&#xA;"" OwnerUserId=""3501"" LastActivityDate=""2017-08-02T13:19:39.300"" CommentCount=""2"" />
",45462051
45337471,"45337471      <row Id=""45337471"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45464607"" PostTypeId=""2"" ParentId=""45337471"" CreationDate=""2017-08-02T15:10:00.323"" Score=""0"" Body=""&lt;p&gt;This details what was happening: &lt;a href=&quot;https://github.com/aws/aws-sdk-go/issues/1438&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/aws/aws-sdk-go/issues/1438&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The main issue was that &lt;code&gt;CopySource&lt;/code&gt; needs to be url-encoded and &lt;em&gt;not&lt;/em&gt; the &lt;code&gt;Key&lt;/code&gt; field, which was surprising to me. (I was url-encoding both.)&lt;/li&gt;&#xA;&lt;li&gt;The other issue was that I was using &lt;code&gt;path.Join&lt;/code&gt; which strips out trailing &lt;code&gt;\&lt;/code&gt;. This is a problem because s3 keys can have trailing &lt;code&gt;\&lt;/code&gt; - which represents a sort of folder.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""1168364"" LastActivityDate=""2017-08-02T15:10:00.323"" CommentCount=""0"" />
",45464607
45465368,"45465368      <row Id=""45465368"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45465853"" PostTypeId=""2"" ParentId=""45465368"" CreationDate=""2017-08-02T16:06:59.443"" Score=""3"" Body=""&lt;p&gt;You can use copy for the inner loop (which should be more efficient) and range for the outer loop (which results in nicer code).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Result:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;duplicate := make([][]int, len(matrix))&#xA;for i := range matrix {&#xA;    duplicate[i] = make([]int, len(matrix[i]))&#xA;    copy(duplicate[i], matrix[i])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;If your goal is efficiency, it may make sense to do more allocation up front. This doesn't lead to more readable code but will lead to more efficient code if you are doing this often. This code assumes you have at least one row and that all rows are of the same length. You will need to add tests for that.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;n := len(matrix)&#xA;m := len(matrix[0])&#xA;duplicate := make([][]int, n)&#xA;data := make([]int, n*m)&#xA;for i := range matrix {&#xA;    start := i*m&#xA;    end := start + m&#xA;    duplicate[i] = data[start:end:end]&#xA;    copy(duplicate[i], matrix[i])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Depending on what you are doing, it may make sense to make a &quot;matrix type&quot; that is implemented using only a single slice. A slice of slices is not the most efficient data structure, even if it is simpler to work with.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Before deciding if you need to be efficient, make sure that you are spending a lot of time doing copying using profiling. Then, after you have determined this is in fact a hotspot, start running benchmarks. See &lt;a href=&quot;https://golang.org/pkg/testing/#hdr-Benchmarks&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/testing/#hdr-Benchmarks&lt;/a&gt; for details.&lt;/p&gt;&#xA;"" OwnerUserId=""727643"" LastEditorUserId=""727643"" LastEditDate=""2017-08-02T17:51:23.927"" LastActivityDate=""2017-08-02T17:51:23.927"" CommentCount=""4"" />
",45465853
45466440,"45466440      <row Id=""45466440"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45466540"" PostTypeId=""2"" ParentId=""45466440"" CreationDate=""2017-08-02T16:43:08.693"" Score=""1"" Body=""&lt;p&gt;Use a struct that contains the func and any metadata instead of just a func. Something like this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type NewHandler struct {&#xA;    Handler func(*indexer.Document) error&#xA;    Data string // or whatever data&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also make sure your slice holds pointers because go is pass-by-value.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var NewHandlers []*NewHandler&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then when you for loop, it goes like this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for i, handler := range NewHandlers {&#xA;        err = handler.Handler(document)&#xA;        ....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And you can include your Data in the error.&lt;/p&gt;&#xA;"" OwnerUserId=""1276480"" LastEditorUserId=""1276480"" LastEditDate=""2017-08-02T17:56:53.220"" LastActivityDate=""2017-08-02T17:56:53.220"" CommentCount=""0"" />
",45466540
45466614,"45466614      <row Id=""45466614"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45466847"" PostTypeId=""2"" ParentId=""45466614"" CreationDate=""2017-08-02T16:59:19.323"" Score=""2"" Body=""&lt;p&gt;In &lt;code&gt;appendStruct&lt;/code&gt;, &lt;code&gt;container&lt;/code&gt; is a local variable, so it's not accessible outside that function call. You could return it, which would make it accessible from the caller (in this case, &lt;code&gt;main&lt;/code&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func appendStruct() DataContainer {&#xA;    //...&#xA;    return container&#xA;}&#xA;&#xA;func main() {&#xA;    container := appendStruct()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The answer you linked is an excellent starting point. A code example shouldn't really be necessary - they're basically recommending that you create a helper method/function that takes all the fields of the struct and puts them into a slice in whatever order you want them to appear in the CSV, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (c DataItem) ToSlice() []string {&#xA;    row := make([]string, 1, 1) // Since you only have 1 field in the struct&#xA;    row[0] = c.name&#xA;    return row&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then you can loop over these to write them to a CSV file.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The error output you're getting is because you're using &lt;code&gt;Sprintf&lt;/code&gt;, which expects a format string as the first parameter with a reference for each other argument. You're passing an empty format string, which would only work with no other arguments (and be pointless). Perhaps you meant &lt;code&gt;Sprintf(&quot;%v&quot;, container)&lt;/code&gt; or just &lt;code&gt;Sprint(container)&lt;/code&gt;?&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-02T16:59:19.323"" CommentCount=""0"" />
",45466847
45468089,"45468089      <row Id=""45468089"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45468253"" PostTypeId=""2"" ParentId=""45468089"" CreationDate=""2017-08-02T18:18:17.020"" Score=""5"" Body=""&lt;p&gt;That's because when you use the pointers you are adding &lt;code&gt;&amp;amp;w&lt;/code&gt; to the array.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that &lt;code&gt;w&lt;/code&gt; is actually the local variable used in the loop, so that's not the address you want to add to the &lt;code&gt;matches&lt;/code&gt; array.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(even though the &lt;em&gt;value&lt;/em&gt; of the variable &lt;code&gt;w&lt;/code&gt; changes through the loop, it's &lt;em&gt;address&lt;/em&gt; stays the same)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When the loop ends, &lt;code&gt;w&lt;/code&gt; ends up with the last value so that's why it prints &lt;code&gt;12&lt;/code&gt; two times.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You need to add the address of the element that matched instead.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you do this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;matches = append(matches, &amp;amp;widgets[i])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then it'd work fine with pointers as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Modified Go playground for you to test it:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/YE-cokyEHu&quot; rel=&quot;noreferrer&quot;&gt;https://play.golang.org/p/YE-cokyEHu&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-08-02T18:18:17.020"" CommentCount=""2"" />
",45468253
45471843,"45471843      <row Id=""45471843"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45472101"" PostTypeId=""2"" ParentId=""45471843"" CreationDate=""2017-08-02T22:37:30.303"" Score=""1"" Body=""&lt;p&gt;You should just check return value of Row.Scan method, just like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;row := db.QueryRow(&#xA;    `SELECT &#xA;        json_build_object('Profile', array_to_json(array_agg(t))) &#xA;    FROM&#xA;        (&#xA;            SELECT &#xA;                p.id,&#xA;                p.fullname,&#xA;                z.thirtylatmin as latmin,&#xA;                z.thirtylatmax as latmax,&#xA;                z.thirtylonmin as lonmin,&#xA;                z.thirtylonmax as lonmax,&#xA;                p.latitudes,&#xA;                p.longitudes,&#xA;                p.location as location,&#xA;                p.picture,&#xA;                p.is_gold &#xA;            FROM &#xA;                profiles p &#xA;            JOIN zips z on (z.city='Boston'AND z.state='MA') &#xA;            WHERE &#xA;                email=$1&#xA;        ) t`,&#xA;    email,&#xA;)&#xA;&#xA;var result string&#xA;if err := Scan(&amp;amp;result); err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&#xA;fmt.Fprint(w, result)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8075949"" LastActivityDate=""2017-08-02T22:37:30.303"" CommentCount=""1"" />
",45472101
45472816,"45472816      <row Id=""45472816"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45473728"" PostTypeId=""2"" ParentId=""45472816"" CreationDate=""2017-08-03T02:16:14.790"" Score=""3"" Body=""&lt;p&gt;You can do that using Method Expressions:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Method_expressions&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/ref/spec#Method_expressions&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The call is a bit different, since the method expression takes the receiver as the first argument.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's your example modified:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;type someStruct struct {&#xA;    x int&#xA;}&#xA;&#xA;func (s someStruct) someFunc() int {&#xA;    return s.x&#xA;}&#xA;&#xA;func main() {&#xA;    m := make(map[string]func(someStruct)int, 0)&#xA;    s := someStruct{56}&#xA;    m[&quot;1&quot;] = (someStruct).someFunc&#xA;    print(m[&quot;1&quot;](s))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And here's a Go playground for you to test it:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/PLi5A9of-U&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/PLi5A9of-U&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-08-03T02:16:14.790"" CommentCount=""1"" />
",45473728
45474896,"45474896      <row Id=""45474896"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45474995"" PostTypeId=""2"" ParentId=""45474896"" CreationDate=""2017-08-03T04:43:26.360"" Score=""1"" Body=""&lt;p&gt;the line &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;done = strings.Contains(webSlices[theSlice], string(counter))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;string(counter)&lt;/code&gt; can't work here, use &lt;code&gt;strconv.Itoa(counter)&lt;/code&gt; instead&lt;/p&gt;&#xA;"" OwnerUserId=""2791115"" LastActivityDate=""2017-08-03T04:43:26.360"" CommentCount=""2"" />
",45474995
45474948,"45474948      <row Id=""45474948"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45475191"" PostTypeId=""2"" ParentId=""45474948"" CreationDate=""2017-08-03T05:00:25.923"" Score=""0"" Body=""&lt;p&gt;As @volker mentioned; you cannot as the empty interface has no methods.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Please note: &lt;code&gt;fmt.Sprint&lt;/code&gt;, &lt;code&gt;fmt.Sprintf&lt;/code&gt; etc. does call Stringer interface first if its exists. It is elegant way.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Example of calling stringer interface after type assertion.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var a SomeType&#xA;if v, ok := a.(fmt.Stringer); ok {&#xA;    fmt.Println(v.String())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-08-03T05:00:25.923"" CommentCount=""0"" />
",45475191
45476506,"45476506      <row Id=""45476506"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45477148"" PostTypeId=""2"" ParentId=""45476506"" CreationDate=""2017-08-03T07:06:34.787"" Score=""1"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;Is there a better, or more idiomatic way of doing this?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Yes: Handle the error. Log.Fatal is not error handling. If fataling is really the right thing: Encapsulate fataling only.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Make fataling on error a function, not the calling and please stay away from &lt;code&gt;interface{}&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func abortOnError(err error) {&#xA;    if err == nil {return}&#xA;    log.Fatal(err)&#xA;}&#xA;&#xA;func whatever() int {&#xA;    x, err := someOp()&#xA;    abortOnError(err)&#xA;    return x+2&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1266756"" LastEditorUserId=""1266756"" LastEditDate=""2017-08-03T10:17:50.980"" LastActivityDate=""2017-08-03T10:17:50.980"" CommentCount=""2"" />
",45477148
45479236,"45479236      <row Id=""45479236"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45479446"" PostTypeId=""2"" ParentId=""45479236"" CreationDate=""2017-08-03T08:56:54.400"" Score=""0"" Body=""&lt;p&gt;each time you copy a session, you should close it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;rewrite your &lt;code&gt;GetCollection&lt;/code&gt; and &lt;code&gt;GetAllRows&lt;/code&gt;, use one function like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func FetchData(session mgo.Session, queueName string) ([]Data, error) {&#xA;  fmt.Println(&quot;Creating collection ...&quot;)&#xA;  sess := session.Copy()&#xA;  collection := sess.DB(dbName).C(queueName)&#xA;  fmt.Println(&quot;Collection created!&quot;)&#xA;&#xA;  defer  sess.Close() &#xA;&#xA;   var results []Data&#xA;&#xA;   err := collection.Find(nil).All(&amp;amp;results)&#xA;   if err != nil {&#xA;       panic(err)&#xA;       return nil, err&#xA;   }&#xA;   return results, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;note the line &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; defer  sess.Close() &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2791115"" LastEditorUserId=""2791115"" LastEditDate=""2017-08-03T09:02:19.467"" LastActivityDate=""2017-08-03T09:02:19.467"" CommentCount=""2"" />
",45479446
45481001,"45481001      <row Id=""45481001"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45481705"" PostTypeId=""2"" ParentId=""45481001"" CreationDate=""2017-08-03T10:33:39.337"" Score=""1"" Body=""&lt;p&gt;It's obviously not on the path. It's a bit weird as I believe Windows installer adds it properly. You can fix it though, by going to Control Panel -&gt; System -&gt; Advanced (Tab) -&gt; Environment Variables. (Actual names will likely differ in your version of windows, but should be recognizably close. In worst case, search Setting environment variables for your version of windows in google.). Then find PATH variable and add path to the go executable. You'll also need to have GOROOT variable set as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, I have Go installed in C:\Go folder. So, I have GOROOT variable set as C:\Go and C:\Go\bin added to PATH variable. You can have them as either User or System variables. User ones will be visible only to you, while System ones will be for everyone. That's the only difference.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Keep in mind though that it will only affect programs started &lt;em&gt;after&lt;/em&gt; you have updated environment variables settings. So, you'll have to restart VS Code for it to take effect.&lt;/p&gt;&#xA;"" OwnerUserId=""6375498"" LastActivityDate=""2017-08-03T10:33:39.337"" CommentCount=""1"" />
",45481705
45480412,"45480412      <row Id=""45480412"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45482855"" PostTypeId=""2"" ParentId=""45480412"" CreationDate=""2017-08-03T11:26:46.657"" Score=""1"" Body=""&lt;p&gt;Your kernel reports the &lt;code&gt;ppc64&lt;/code&gt; architecture.  This means it is 64-bit POWER in &lt;em&gt;big endian&lt;/em&gt; mode.  The Go project only publishes &lt;code&gt;ppc64le&lt;/code&gt; (64-bit POWER in &lt;em&gt;little endian&lt;/em&gt; mode) builds: &lt;a href=&quot;https://golang.org/dl/#stable&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go stable downloads&lt;/a&gt; only offers a &lt;code&gt;go1.8.3.linux-ppc64le.tar.gz&lt;/code&gt; download.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Go sources contain a 64-bit POWER big-endian port, but you need to compile it yourself.  (But this is definitely off the beaten path, so you might run into issues.)  Note that Go 1.9 will require POWER8 even in big-endian mode, so depending on the hardware you have, even a self-compiled version could be a dead-end.  (&lt;code&gt;e6500&lt;/code&gt; in the &lt;code&gt;/proc/cpuinfo&lt;/code&gt; output suggests that this platform is &lt;em&gt;not&lt;/em&gt; POWER8-compatibile.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another option is the GCC Go compiler (&lt;code&gt;gccgo&lt;/code&gt;).  This Go compiler will work with many GCC targets, and the chances are good that it will remain supported to some degree in the foreseeable future.  However, few Go programmers care about &lt;code&gt;gccgo&lt;/code&gt;, so you might encounter packages which do not work with it.&lt;/p&gt;&#xA;"" OwnerUserId=""8316315"" LastEditorUserId=""8316315"" LastEditDate=""2017-08-03T11:46:14.417"" LastActivityDate=""2017-08-03T11:46:14.417"" CommentCount=""4"" />
",45482855
45483655,"45483655      <row Id=""45483655"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45483718"" PostTypeId=""2"" ParentId=""45483655"" CreationDate=""2017-08-03T12:06:12.103"" Score=""1"" Body=""&lt;p&gt;So you want a json array instead of a json object?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead of loading a &lt;code&gt;map[int]string&lt;/code&gt;, why not simply make a &lt;code&gt;[]Division&lt;/code&gt;?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;list := []Division{}&#xA;for divisions.Next() {&#xA;    var d Division&#xA;    err := divisions.Scan(&amp;amp;d.id, &amp;amp;d.name)&#xA;    list = append(list, d)&#xA;    if err != nil {&#xA;        panic(err.Error())&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You'll need to change the field names to &lt;code&gt;ID&lt;/code&gt; and &lt;code&gt;Name&lt;/code&gt; so that the json package can serialize them, but you should end up with somthing more like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[&#xA;  {&quot;ID&quot;:1,&quot;Name&quot;:&quot;Games},&#xA;  ...&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""121660"" LastActivityDate=""2017-08-03T12:06:12.103"" CommentCount=""1"" />
",45483718
45479641,"45479641      <row Id=""45479641"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45486637"" PostTypeId=""2"" ParentId=""45479641"" CreationDate=""2017-08-03T14:08:01.257"" Score=""1"" Body=""&lt;ol&gt;&#xA;&lt;li&gt;Try with increased connection timeout&lt;/li&gt;&#xA;&lt;li&gt;Check your firewall configuration&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""2893513"" LastActivityDate=""2017-08-03T14:08:01.257"" CommentCount=""0"" />
",45486637
45486817,"45486817      <row Id=""45486817"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45486922"" PostTypeId=""2"" ParentId=""45486817"" CreationDate=""2017-08-03T14:19:38.077"" Score=""3"" Body=""&lt;p&gt;When &lt;code&gt;v&lt;/code&gt; is a slice, there is no difference between &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;v[:]&lt;/code&gt;. When &lt;code&gt;v&lt;/code&gt; is an array, &lt;code&gt;v[:]&lt;/code&gt; is a slice covering the entirety of the array.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-03T14:19:38.077"" CommentCount=""5"" />
",45486922
45488393,"45488393      <row Id=""45488393"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45488562"" PostTypeId=""2"" ParentId=""45488393"" CreationDate=""2017-08-03T15:26:37.720"" Score=""3"" Body=""&lt;p&gt;First, you must use the &lt;a href=&quot;https://golang.org/pkg/html/template/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;html/template&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://golang.org/pkg/text/template/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;text/template&lt;/code&gt;&lt;/a&gt;, as the former provides context-sensitive escaping.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Second, in the template the context must be clear that it is JavaScript code, e.g. it must be inside HTML &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See this working example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Point struct {&#xA;    Name string&#xA;    X, Y int&#xA;}&#xA;&#xA;func main() {&#xA;    t := template.Must(template.New(&quot;&quot;).Parse(src))&#xA;&#xA;    p := Point{&quot;Center&quot;, 100, 200}&#xA;    pj, err := json.Marshal(p)&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    if err = t.Execute(os.Stdout, string(pj)); err != nil {&#xA;        panic(err)&#xA;    }&#xA;}&#xA;&#xA;const src = `&amp;lt;script&amp;gt;&#xA;var point = {{.}};&#xA;alert(point);&#xA;&amp;lt;/script&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/EmMR3MQYxi&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;&#xA;var point = &quot;{\&quot;Name\&quot;:\&quot;Center\&quot;,\&quot;X\&quot;:100,\&quot;Y\&quot;:200}&quot;;&#xA;alert(point);&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As you can see, the &lt;code&gt;point&lt;/code&gt; JavaScript variable contains a valid JSON text, properly escaped.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-08-03T18:15:33.880"" LastActivityDate=""2017-08-03T18:15:33.880"" CommentCount=""0"" />
",45488562
45490107,"45490107      <row Id=""45490107"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45490356"" PostTypeId=""2"" ParentId=""45490107"" CreationDate=""2017-08-03T16:52:40.917"" Score=""4"" Body=""&lt;p&gt;Always run your tests with -race. In your case, you forgot to recreate &lt;code&gt;f&lt;/code&gt; on each iteration in &lt;code&gt;RunInParallel&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func RunInParallel(funcs ...func() error) error {&#xA;    var errcList [](&amp;lt;-chan error)&#xA;    for _, f := range funcs {&#xA;&#xA;        f := f // &amp;lt;&amp;lt; HERE&#xA;&#xA;        errc := make(chan error, 1)&#xA;        errcList = append(errcList, errc)&#xA;        go func() {&#xA;            err := f()&#xA;            if err != nil {&#xA;                errc &amp;lt;- err&#xA;            }&#xA;            close(errc)&#xA;        }()&#xA;    }&#xA;    return WaitForPipeline(errcList...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As a result, you always launched the last &lt;code&gt;f&lt;/code&gt; instead of each one.&lt;/p&gt;&#xA;"" OwnerUserId=""1892060"" LastActivityDate=""2017-08-03T16:52:40.917"" CommentCount=""2"" />
",45490356
45491043,"45491043      <row Id=""45491043"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45491970"" PostTypeId=""2"" ParentId=""45491043"" CreationDate=""2017-08-03T18:29:58.843"" Score=""2"" Body=""&lt;p&gt;The field needs to be visible (so uppercase) in order to be included in the JSON marshalling.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;At the same time, the DB expects the JSON document to contain a &lt;code&gt;_key&lt;/code&gt; attribute.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So you should specify it as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type doc struct {&#xA;    Key string `json:&quot;_key&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Alternatively, you can try sending a &lt;code&gt;map&lt;/code&gt; to the method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;coll.CreateDocument(nil, map[string]string{&quot;_key&quot;: &quot;mykey&quot;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-08-03T18:29:58.843"" CommentCount=""1"" />
",45491970
45487377,"45487377      <row Id=""45487377"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45494246"" PostTypeId=""2"" ParentId=""45487377"" CreationDate=""2017-08-03T20:48:35.380"" Score=""2"" Body=""&lt;p&gt;You need to declare your own type which implements the Value interface. Here is an example.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Created so that multiple inputs can be accecpted&#xA;type arrayFlags []string&#xA;&#xA;func (i *arrayFlags) String() string {&#xA;    // change this, this is just can example to satisfy the interface&#xA;    return &quot;my string representation&quot;&#xA;}&#xA;&#xA;func (i *arrayFlags) Set(value string) error {&#xA;    *i = append(*i, strings.TrimSpace(value))&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then in the main function where you are parsing the flags&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var myFlags arrayFlags&#xA;&#xA;flag.Var(&amp;amp;myFlags, &quot;term&quot;, &quot;my terms&quot;)&#xA;flag.Parse()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now all the terms are contained in the slice &lt;code&gt;myFlags&lt;/code&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4639336"" LastActivityDate=""2017-08-03T20:48:35.380"" CommentCount=""4"" />
",45494246
45492320,"45492320      <row Id=""45492320"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45494261"" PostTypeId=""2"" ParentId=""45492320"" CreationDate=""2017-08-03T20:49:44.627"" Score=""1"" Body=""&lt;p&gt;The root of the problem stems from how interfaces in Go are implicitly satisfied.&lt;br&gt;&#xA;In this particular case, the &lt;code&gt;json.Marshal&lt;/code&gt; method uses type assertion at runtime to see if the given value implements &lt;code&gt;json.Marshaler&lt;/code&gt;. Effective Go &lt;a href=&quot;https://golang.org/doc/effective_go.html#blank_implements&quot; rel=&quot;nofollow noreferrer&quot;&gt;mentions this very case&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You could have satisfied the &lt;code&gt;json.Marshaler&lt;/code&gt; for the &lt;code&gt;*TextOutput&lt;/code&gt; type using a pointer-receiver like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (t *TextOutput) MarshalJSON() ([]byte, error) {&#xA;    return []byte(fmt.Sprintf(`{&quot;data&quot;:&quot;%s&quot;}`, *t)), nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And for this to work properly, pass the reference to the &lt;code&gt;json.Marshal&lt;/code&gt; function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var t TextOutput&#xA;t = `Test test`&#xA;output, err := json.Marshal(&amp;amp;t) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, implementing it using a value-receiver ensures that both &lt;code&gt;TextOutput&lt;/code&gt; and &lt;code&gt;*TextOutput&lt;/code&gt; types implement &lt;code&gt;json.Marshaler&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (t TextOutput) MarshalJSON() ([]byte, error) {&#xA;    return []byte(fmt.Sprintf(`{&quot;data&quot;: &quot;%s&quot;}`, t)), nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1649295"" LastActivityDate=""2017-08-03T20:49:44.627"" CommentCount=""0"" />
",45494261
45472324,"45472324      <row Id=""45472324"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45494634"" PostTypeId=""2"" ParentId=""45472324"" CreationDate=""2017-08-03T21:15:25.293"" Score=""1"" Body=""&lt;p&gt;This is an example of how to set up a concurrent downloader. Things to be aware of are bandwidth, memory, and disk space.  You can kill your bandwidth by trying to do to much at once, the same goes for memory.  Your downloading pretty big files so memory can be an issue.  Another thing to note is that by using gorountines you are losing request order. So if the order of the returned bytes matter, then this will not work because you will have to know the byte order to assemble the file in the end, which would mean that a downloading one at a time is best, unless you implement a way to keep track of the order (maybe some kind of global map[order int][]bytes with mutex to prevent race conditions).  An alternative that doesn't involve &lt;code&gt;Go&lt;/code&gt; (assuming you have a unix machine for ease) is to use &lt;code&gt;Curl&lt;/code&gt; see here &lt;a href=&quot;http://osxdaily.com/2014/02/13/download-with-curl/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://osxdaily.com/2014/02/13/download-with-curl/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;bytes&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;io&quot;&#xA;    &quot;io/ioutil&quot;&#xA;    &quot;log&quot;&#xA;    &quot;net/http&quot;&#xA;    &quot;sync&quot;&#xA;)&#xA;&#xA;// now your going to have to be careful because you can potentially run out of memory downloading to many files at once..&#xA;// however here is an example that can be modded&#xA;func downloader(wg *sync.WaitGroup, sema chan struct{}, fileNum int, URL string) {&#xA;    sema &amp;lt;- struct{}{}&#xA;    defer func() {&#xA;        &amp;lt;-sema&#xA;        wg.Done()&#xA;    }()&#xA;&#xA;    client := &amp;amp;http.Client{Timeout: 10}&#xA;    res, err := client.Get(URL)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    defer res.Body.Close()&#xA;    var buf bytes.Buffer&#xA;    io.Copy(&amp;amp;buf, res.Body)&#xA;    // write the bytes to file&#xA;    ioutil.WriteFile(fmt.Sprintf(&quot;file%d.txt&quot;, fileNum), buf.Bytes(), 0644)&#xA;    return&#xA;}&#xA;&#xA;func main() {&#xA;    links := []string{&#xA;        &quot;url1&quot;,&#xA;        &quot;url2&quot;, // etc...&#xA;    }&#xA;    var wg sync.WaitGroup&#xA;    // limit to four downloads at a time, this is called a semaphore&#xA;    limiter := make(chan struct{}, 4)&#xA;    for i, link := range links {&#xA;        wg.Add(1)&#xA;        go downloader(&amp;amp;wg, limiter, i, link)&#xA;    }&#xA;    wg.Wait()&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4639336"" LastEditorUserId=""4639336"" LastEditDate=""2017-08-03T21:35:38.230"" LastActivityDate=""2017-08-03T21:35:38.230"" CommentCount=""5"" />
",45494634
45498036,"45498036      <row Id=""45498036"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45498528"" PostTypeId=""2"" ParentId=""45498036"" CreationDate=""2017-08-04T04:56:08.157"" Score=""2"" Body=""&lt;p&gt;Where should I start? Let's start with your first code snippet and make it work properly.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func init() {&#xA;    connectionString := &quot;host=172.17.0.3 dbname=postgres user=postgres password=postgres port=5432 sslmode=disable&quot;&#xA;&#xA;    var err error&#xA;    connection, err = sql.Open(&#xA;        &quot;postgres&quot;,&#xA;        connectionString,&#xA;    )&#xA;    check(err)&#xA;&#xA;    err = connection.Ping()&#xA;    check(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In the above code snippet &lt;code&gt;err&lt;/code&gt; is local variable and &lt;code&gt;connection&lt;/code&gt; is package variable.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;In your second code snippet &lt;code&gt;err&lt;/code&gt; is defined as part &lt;code&gt;connectionString, err := ...&lt;/code&gt; and you have &lt;code&gt;connection&lt;/code&gt; package variable defined. So it works.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Using short declaration operator &lt;code&gt;:=&lt;/code&gt; defines local scoped variable. Such as: &lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If you define within &lt;code&gt;func&lt;/code&gt; then it is function scope.&lt;/li&gt;&#xA;&lt;li&gt;If you define in &lt;code&gt;if&lt;/code&gt; then it is &lt;code&gt;if else&lt;/code&gt; scope.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I hope it helps.&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-08-04T04:56:08.157"" CommentCount=""2"" />
",45498528
45498274,"45498274      <row Id=""45498274"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45498587"" PostTypeId=""2"" ParentId=""45498274"" CreationDate=""2017-08-04T05:02:02.860"" Score=""3"" Body=""&lt;p&gt;Try instead a dependency manager: the most recent and actively developed one is &lt;strong&gt;&lt;a href=&quot;https://github.com/golang/dep&quot; rel=&quot;nofollow noreferrer&quot;&gt;golang/dep&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;&#xA;Reading &lt;a href=&quot;https://github.com/golang/dep/issues/943&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;dep&lt;/strong&gt; &quot;issue&quot; 943&lt;/a&gt;, use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;dep ensure&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That will set up vendored dependencies through import analysis, and you can configure locking those down if need be.&lt;/p&gt;&#xA;"" OwnerUserId=""6309"" LastEditorUserId=""6309"" LastEditDate=""2017-08-04T06:25:10.180"" LastActivityDate=""2017-08-04T06:25:10.180"" CommentCount=""3"" />
",45498587
45500420,"45500420      <row Id=""45500420"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45500563"" PostTypeId=""2"" ParentId=""45500420"" CreationDate=""2017-08-04T07:22:02.057"" Score=""-1"" Body=""&lt;p&gt;This line looks problematic:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nanoDayOfYear:=string(quant*24*60*60*1000*1000*1000) + &quot;ns&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Specifically, &lt;code&gt;string(...)&lt;/code&gt; doesn't do what you want. Presumably you want to convert that number to a base-10 string. Try this instead:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nanoDayOfYear:=strconv.FormatInt(quant*24*60*60*1000*1000*1000, 10) + &quot;ns&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""94559"" LastActivityDate=""2017-08-04T07:22:02.057"" CommentCount=""2"" />
",45500563
45500836,"45500836      <row Id=""45500836"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45502591"" PostTypeId=""2"" ParentId=""45500836"" CreationDate=""2017-08-04T09:04:14.517"" Score=""6"" Body=""&lt;p&gt;You may use the &lt;a href=&quot;https://golang.org/pkg/context/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; package which was created for things like this (&lt;em&gt;&quot;carries deadlines, cancelation signals...&quot;&lt;/em&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You create a context capable of publishing cancelation signals with &lt;a href=&quot;https://golang.org/pkg/context/#WithCancel&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;context.WithCancel()&lt;/code&gt;&lt;/a&gt; (parent context may be the one returned by &lt;a href=&quot;https://golang.org/pkg/context/#Background&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;context.Background()&lt;/code&gt;&lt;/a&gt;). This will return you a &lt;code&gt;cancel()&lt;/code&gt; function which may be used to cancel (or more precisely &lt;em&gt;signal&lt;/em&gt; the cancel intent) to the worker goroutines.&lt;br&gt;&#xA;And in the worker goroutines you have to check if such intent has been initiated, by checking if the channel returned by &lt;code&gt;Context.Done()&lt;/code&gt; is closed, easiest done by attempting to receive from it (which proceeds immediately if it is closed). And to do a non-blocking check (so you can continue if it is not closed), use the &lt;code&gt;select&lt;/code&gt; statement with a &lt;code&gt;default&lt;/code&gt; branch.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I will use the following &lt;code&gt;work()&lt;/code&gt; implementation, which simulates a 10% failure chance, and simulates 1 second of work:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func work(i int) (int, error) {&#xA;    if rand.Intn(100) &amp;lt; 10 { // 10% of failure&#xA;        return 0, errors.New(&quot;random error&quot;)&#xA;    }&#xA;    time.Sleep(time.Second)&#xA;    return 100 + i, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And the &lt;code&gt;doAllWork()&lt;/code&gt; may look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func doAllWork() error {&#xA;    var wg sync.WaitGroup&#xA;&#xA;    ctx, cancel := context.WithCancel(context.Background())&#xA;    defer cancel() // Make sure it's called to release resources even if no errors&#xA;&#xA;    for i := 0; i &amp;lt; 2; i++ {&#xA;        wg.Add(1)&#xA;        go func(i int) {&#xA;            defer wg.Done()&#xA;&#xA;            for j := 0; j &amp;lt; 10; j++ {&#xA;                // Check if any error occurred in any other gorouties:&#xA;                select {&#xA;                case &amp;lt;-ctx.Done():&#xA;                    return // Error somewhere, terminate&#xA;                default: // Default is must to avoid blocking&#xA;                }&#xA;                result, err := work(j)&#xA;                if err != nil {&#xA;                    fmt.Printf(&quot;Worker #%d during %d, error: %v\n&quot;, i, j, err)&#xA;                    cancel()&#xA;                    return&#xA;                }&#xA;                fmt.Printf(&quot;Worker #%d finished %d, result: %d.\n&quot;, i, j, result)&#xA;            }&#xA;        }(i)&#xA;    }&#xA;    wg.Wait()&#xA;&#xA;    return ctx.Err()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is how it can be tested:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    rand.Seed(time.Now().UnixNano() + 1) // +1 'cause Playground's time is fixed&#xA;    fmt.Printf(&quot;doAllWork: %v\n&quot;, doAllWork())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/od8ShySgMM&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Worker #0 finished 0, result: 100.&#xA;Worker #1 finished 0, result: 100.&#xA;Worker #1 finished 1, result: 101.&#xA;Worker #0 finished 1, result: 101.&#xA;Worker #0 finished 2, result: 102.&#xA;Worker #1 finished 2, result: 102.&#xA;Worker #1 finished 3, result: 103.&#xA;Worker #1 during 4, error: random error&#xA;Worker #0 finished 3, result: 103.&#xA;doAllWork: context canceled&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If there would be no errors, e.g. when using the following &lt;code&gt;work()&lt;/code&gt; function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func work(i int) (int, error) {&#xA;    time.Sleep(time.Second)&#xA;    return 100 + i, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The output would be like (try it on the &lt;a href=&quot;https://play.golang.org/p/gZKXSAa4F-&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Worker #0 finished 0, result: 100.&#xA;Worker #1 finished 0, result: 100.&#xA;Worker #1 finished 1, result: 101.&#xA;Worker #0 finished 1, result: 101.&#xA;Worker #0 finished 2, result: 102.&#xA;Worker #1 finished 2, result: 102.&#xA;Worker #1 finished 3, result: 103.&#xA;Worker #0 finished 3, result: 103.&#xA;Worker #0 finished 4, result: 104.&#xA;Worker #1 finished 4, result: 104.&#xA;Worker #1 finished 5, result: 105.&#xA;Worker #0 finished 5, result: 105.&#xA;Worker #0 finished 6, result: 106.&#xA;Worker #1 finished 6, result: 106.&#xA;Worker #1 finished 7, result: 107.&#xA;Worker #0 finished 7, result: 107.&#xA;Worker #0 finished 8, result: 108.&#xA;Worker #1 finished 8, result: 108.&#xA;Worker #1 finished 9, result: 109.&#xA;Worker #0 finished 9, result: 109.&#xA;doAllWork: &amp;lt;nil&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Basically we just used the &lt;code&gt;Done()&lt;/code&gt; channel of the context, so it seems we could just as easily (if not even easier) use a &lt;code&gt;done&lt;/code&gt; channel instead of the &lt;code&gt;Context&lt;/code&gt;, closing the channel to do what &lt;code&gt;cancel()&lt;/code&gt; does in the above solution.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is not true. &lt;strong&gt;This can only be used if only one goroutine may close the channel, but in our case any of the workers may do so.&lt;/strong&gt; And attempting to close an already closed channel panics (see details here: &lt;a href=&quot;https://stackoverflow.com/questions/39015602/how-does-a-non-initialized-channel-behave/39016004#39016004&quot;&gt;How does a non initialized channel behave?&lt;/a&gt;). So you would have to ensure some kind of synchronization / exclusion around the &lt;code&gt;close(done)&lt;/code&gt;, which will make it less readable and even more complex. Actually this is exactly what the &lt;code&gt;cancel()&lt;/code&gt; function does under the hood, hidden / abstracted away from your eyes, so &lt;code&gt;cancel()&lt;/code&gt; may be called multiple times to make your code / use of it simpler.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;How to get and return the error(s) from the workers?&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;For this you may use an error channel:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;errs := make(chan error, 2) // Buffer for 2 errors&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And inside the workers when an error is encountered, send it on the channel instead of printing it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;result, err := work(j)&#xA;if err != nil {&#xA;    errs &amp;lt;- fmt.Errorf(&quot;Worker #%d during %d, error: %v\n&quot;, i, j, err)&#xA;    cancel()&#xA;    return&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And after the loop, if there was an error, return that (and &lt;code&gt;nil&lt;/code&gt; otherwise):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Return (first) error, if any:&#xA;if ctx.Err() != nil {&#xA;    return &amp;lt;-errs&#xA;}&#xA;return nil&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output this time (try this on the &lt;a href=&quot;https://play.golang.org/p/J2wMOuxiTm&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Worker #0 finished 0, result: 100.&#xA;Worker #1 finished 0, result: 100.&#xA;Worker #1 finished 1, result: 101.&#xA;Worker #0 finished 1, result: 101.&#xA;Worker #0 finished 2, result: 102.&#xA;Worker #1 finished 2, result: 102.&#xA;Worker #1 finished 3, result: 103.&#xA;Worker #0 finished 3, result: 103.&#xA;doAllWork: Worker #1 during 4, error: random error&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that I used a buffered channel with a buffer size equal to the number of workers, which ensures sending on it is always non-blocking. This also gives you the possibility to receive and process all errors, not just one (e.g. the first). Another option could be to use a buffered channel to hold only 1, and do a non-blocking send on it, which could look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;errs := make(chan error, 1) // Buffered only for the first error&#xA;&#xA;// ...and inside the worker:&#xA;&#xA;result, err := work(j)&#xA;if err != nil {&#xA;    // Non-blocking send:&#xA;    select {&#xA;    case errs &amp;lt;- fmt.Errorf(&quot;Worker #%d during %d, error: %v\n&quot;, i, j, err):&#xA;    default:&#xA;    }&#xA;    cancel()&#xA;    return&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-08-04T10:07:24.177"" LastActivityDate=""2017-08-04T10:07:24.177"" CommentCount=""3"" />
",45502591
45500781,"45500781      <row Id=""45500781"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45503575"" PostTypeId=""2"" ParentId=""45500781"" CreationDate=""2017-08-04T09:48:48.223"" Score=""2"" Body=""&lt;p&gt;You can add the json-mapping directly to the structure definition and use the encoder, decoder to marshal and unmarshal it. It's all built in and easier than in other languages, imho.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type ServiceResponse struct {&#xA;    Value string`json:&quot;nameInJsonResponse&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;here is a good example from the playground: &lt;a href=&quot;https://play.golang.org/p/4L2wMVv7tW&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/4L2wMVv7tW&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;For your particular case it should be something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type ServiceResult struct {&#xA;    Status ServiceResultStatus`json:&quot;status&quot;`&#xA;    Type string`json:&quot;type&quot;`&#xA;    Hash string`json:&quot;hash&quot;`&#xA;    Destination string`json:&quot;destination&quot;`&#xA;    Metadata map[string]Metadata metadata`json:&quot;metadata&quot;`&#xA;}&#xA;&#xA;type ExplizitServiceResult struct {&#xA;    ServiceResult&#xA;    Content SomeStruct`json:&quot;content&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/FFfiq6LxVt&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/FFfiq6LxVt&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you don't want to derive every user struct from the ServiceResult you can define the content as &lt;code&gt;interface{}&lt;/code&gt; so every struct can be inserted. I've updated my example for this. Maybe this is the easiest solution to your problem.&#xA;&lt;a href=&quot;https://play.golang.org/p/LNgreqrnnw&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/LNgreqrnnw&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8383919"" LastEditorUserId=""8383919"" LastEditDate=""2017-08-04T13:17:51.667"" LastActivityDate=""2017-08-04T13:17:51.667"" CommentCount=""7"" />
",45503575
45504011,"45504011      <row Id=""45504011"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45504143"" PostTypeId=""2"" ParentId=""45504011"" CreationDate=""2017-08-04T10:14:23.153"" Score=""1"" Body=""&lt;pre&gt;&lt;code&gt;db.collection.aggregate([&#xA;  {$match:&#xA;    {'actionName': 'clear'},&#xA;  {$group:&#xA;     {_id: &quot;$actionName&quot;,&#xA;     total_count:{ $sum: &quot;$countUse&quot;}}}&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1078108"" LastActivityDate=""2017-08-04T10:14:23.153"" CommentCount=""2"" />
",45504143
45508642,"45508642      <row Id=""45508642"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45508761"" PostTypeId=""2"" ParentId=""45508642"" CreationDate=""2017-08-04T13:58:47.347"" Score=""4"" Body=""&lt;p&gt;You must export fields of structs, else they are ignored by the &lt;code&gt;mgo&lt;/code&gt; package. Change fields of &lt;code&gt;users&lt;/code&gt; to &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Data&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type users struct {&#xA;    User string `bson:&quot;user&quot; json:&quot;user&quot;`&#xA;    Data string `bson:&quot;data&quot; json:&quot;data&quot;` &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;By default when a struct value is transformed / stored / retrieved from MongoDB, the field name is used. If you want to use different names, you may use &lt;a href=&quot;https://stackoverflow.com/questions/10858787/what-are-the-uses-for-tags-in-go/30889373#30889373&quot;&gt;tags&lt;/a&gt; to tell what names should the fields map to.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-08-04T15:29:53.210"" LastActivityDate=""2017-08-04T15:29:53.210"" CommentCount=""3"" />
",45508761
45509538,"45509538      <row Id=""45509538"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45509642"" PostTypeId=""2"" ParentId=""45509538"" CreationDate=""2017-08-04T14:42:48.653"" Score=""5"" Body=""&lt;p&gt;First I recommend to read the following questions / answers:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/42345060/freeosmemory-in-production/42345554#42345554&quot;&gt;FreeOSMemory() in production&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/37382600/golang-cannot-free-memory-once-occupied-by-bytes-buffer/37383604#37383604&quot;&gt;Golang - Cannot free memory once occupied by bytes.Buffer&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may trigger a gc to free unused objects with &lt;a href=&quot;https://golang.org/pkg/runtime/#GC&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;runtime.GC()&lt;/code&gt;&lt;/a&gt; and you may urge your Go runtime to release memory back to OS with &lt;a href=&quot;https://golang.org/pkg/runtime/debug/#FreeOSMemory&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;debug.FreeOSMemory()&lt;/code&gt;&lt;/a&gt;, but all these are just fire fighting. A well-written Go app should never have to call these.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What you should do is prevent the runtime having to allocate large amount of memory.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How may you achieve this? Some means (you can even combine these solutions):&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;Limit serving the requests requiring large memory, more about it: &lt;a href=&quot;https://stackoverflow.com/questions/37529511/process-management-for-the-go-webserver/37531953#37531953&quot;&gt;Process Management for the Go Webserver&lt;/a&gt;; also &lt;a href=&quot;https://stackoverflow.com/questions/38170852/is-this-an-idiomatic-worker-thread-pool-in-go/38172204#38172204&quot;&gt;Is this an idiomatic worker thread pool in Go?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Use memory / buffer pools, do not allocate big arrays / slices all the time, more about it: &lt;a href=&quot;https://stackoverflow.com/questions/38505830/how-to-implement-memory-pooling-in-golang/38506367#38506367&quot;&gt;How to implement Memory Pooling in Golang&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Create / change your processing units not to operate on byte slices but on &lt;a href=&quot;https://golang.org/pkg/io/#Reader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.Reader&lt;/code&gt;&lt;/a&gt;s, so you don't need to read all content into memory, you can just pass &lt;code&gt;resp.Body&lt;/code&gt; on. Note that even if multiple units have to read / inspect the body, it is still possible to only read and process it once, and not keep it in memory. Means may be &lt;a href=&quot;https://golang.org/pkg/io/#Pipe&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.Pipe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/io/#TeeReader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.TeeReader()&lt;/code&gt;&lt;/a&gt; or custom solutions.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-08-04T15:04:11.527"" LastActivityDate=""2017-08-04T15:04:11.527"" CommentCount=""0"" />
",45509642
45510787,"45510787      <row Id=""45510787"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45511137"" PostTypeId=""2"" ParentId=""45510787"" CreationDate=""2017-08-04T15:59:52.813"" Score=""1"" Body=""&lt;p&gt;Unmask takes a pointer to a pointer, let's say pointer X to pointer Y, pointer Y points to the string value. Unmask then &lt;strong&gt;changes&lt;/strong&gt; the pointer to which X is pointing to, Y is unchanged and points still to the same old string.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can do this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func UnMask(n **string, k string) {&#xA;    **n = k&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func UnMask(n *string, k string) {&#xA;    *n = k&#xA;}&#xA;// ....&#xA;UnMask(n1, &quot;Joe&quot;) // drop the '&amp;amp;'&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""965900"" LastActivityDate=""2017-08-04T15:59:52.813"" CommentCount=""2"" />
",45511137
45506424,"45506424      <row Id=""45506424"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45512643"" PostTypeId=""2"" ParentId=""45506424"" CreationDate=""2017-08-04T17:40:52.093"" Score=""1"" Body=""&lt;p&gt;You can possibly use bytes.Equal or bytes.Contains to compare with a zero initialized byte slice, see &lt;a href=&quot;https://play.golang.org/p/mvUXaTwKjP&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/mvUXaTwKjP&lt;/a&gt;, I haven't checked for performance, but hopefully it's been optimized. You might want to try out other solutions and compare the performance numbers, if needed.&lt;/p&gt;&#xA;"" OwnerUserId=""2969090"" LastActivityDate=""2017-08-04T17:40:52.093"" CommentCount=""0"" />
",45512643
45510348,"45510348      <row Id=""45510348"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45513018"" PostTypeId=""2"" ParentId=""45510348"" CreationDate=""2017-08-04T18:05:08.090"" Score=""1"" Body=""&lt;p&gt;If you look at how &lt;code&gt;(*http.Server).Serve()&lt;/code&gt; is implemented &lt;a href=&quot;https://golang.org/src/net/http/server.go?m=text&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;, it is clear that you can just define your own class that implements &lt;code&gt;net.Listener&lt;/code&gt; and give it to the &lt;code&gt;Serve()&lt;/code&gt; function, instead of using &lt;code&gt;ListenAndServe()&lt;/code&gt;, which puts a default listener there. Make it &lt;code&gt;panic&lt;/code&gt; on error and later &lt;code&gt;recover&lt;/code&gt; from that panic in your code, or implement any other error handling logic.&lt;/p&gt;&#xA;"" OwnerUserId=""6444852"" LastActivityDate=""2017-08-04T18:05:08.090"" CommentCount=""4"" />
",45513018
45515604,"45515604      <row Id=""45515604"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45516325"" PostTypeId=""2"" ParentId=""45515604"" CreationDate=""2017-08-04T22:29:04.053"" Score=""3"" Body=""&lt;p&gt;Even though you could figure it out yourself by reading the &lt;a href=&quot;https://golang.org/ref/spec#Switch_statements&quot; rel=&quot;nofollow noreferrer&quot;&gt;doc&lt;/a&gt; here is what you should write:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;switch a.Type {&#xA;case &quot;v1&quot;:&#xA;    // ...&#xA;    // no need to 'break' in go&#xA;case &quot;v2&quot;:&#xA;    // ...&#xA;default:&#xA;    // usual 'else' clause statements&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5016244"" LastActivityDate=""2017-08-04T22:29:04.053"" CommentCount=""0"" />
",45516325
45515809,"45515809      <row Id=""45515809"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45517192"" PostTypeId=""2"" ParentId=""45515809"" CreationDate=""2017-08-05T00:47:44.410"" Score=""4"" Body=""&lt;p&gt;If all you do is reading the content of variable - then no, you do not need mutex. However, if you ever mutate its state, then you need to protect it. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Two concurrent writes or concurrent write and read can cause problems. If your writes are rare, you might want to use &lt;a href=&quot;https://golang.org/pkg/sync/#RWMutex&quot; rel=&quot;nofollow noreferrer&quot;&gt;RWMutex&lt;/a&gt;. It will allow multiple readers to access, but not together with a writer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, check out &lt;a href=&quot;https://blog.golang.org/race-detector&quot; rel=&quot;nofollow noreferrer&quot;&gt;race detector&lt;/a&gt;. It is best effort detector, so it does not guarantee that you do not have race condition, but it can detect some use cases. Also note that you need to cause race in order for race detector to detect it, so writing tests that use your &lt;code&gt;bus&lt;/code&gt; concurrently or simulating real conditions has to be done.&lt;/p&gt;&#xA;"" OwnerUserId=""61363"" LastActivityDate=""2017-08-05T00:47:44.410"" CommentCount=""0"" />
",45517192
45517523,"45517523      <row Id=""45517523"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45517723"" PostTypeId=""2"" ParentId=""45517523"" CreationDate=""2017-08-05T02:51:50.443"" Score=""2"" Body=""&lt;p&gt;For example, the &lt;code&gt;main&lt;/code&gt; goroutine blocks forever,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;func forever() {&#xA;    for {&#xA;        fmt.Println(time.Now().UTC())&#xA;        time.Sleep(time.Second)&#xA;    }&#xA;}&#xA;&#xA;func main() {&#xA;    go forever()&#xA;    select {} // block forever&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;2017-08-05 02:50:10.138353286 +0000 UTC&#xA;2017-08-05 02:50:11.138504194 +0000 UTC&#xA;2017-08-05 02:50:12.138618149 +0000 UTC&#xA;2017-08-05 02:50:13.138753477 +0000 UTC&#xA;2017-08-05 02:50:14.13888856 +0000 UTC&#xA;2017-08-05 02:50:15.139027355 +0000 UTC&#xA;...&#xA;...&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""221700"" LastActivityDate=""2017-08-05T02:51:50.443"" CommentCount=""0"" />
",45517723
45519669,"45519669      <row Id=""45519669"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45520100"" PostTypeId=""2"" ParentId=""45519669"" CreationDate=""2017-08-05T08:57:40.363"" Score=""0"" Body=""&lt;p&gt;Let me explain:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First of all in this function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (predator Cat) eatingVictim(victim *Mouse) {&#xA;    fmt.Println(predator.name + &quot;'s eating victim &quot; + victim.name)&#xA;    predator.hungry = false&#xA;    victim.alive = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You want to pass Herbivore. This is a bad solution because you will not&#xA;use methods from Herbivore interface here. Better approach is to define&#xA;another interface.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Animal interface {&#xA;    GetName() string&#xA;    SetAlive(bool)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And implement it for Mouse (and Cat if you wish):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (m *Mouse) GetName() string {&#xA;    return m.name&#xA;}&#xA;&#xA;func (m *Mouse) SetAlive(alive bool) {&#xA;    m.alive = alive&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then change interface Predator to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Predator interface {&#xA;    eatingVictim(victim Animal)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and implement it for Cat&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (predator *Cat) eatingVictim(victim Animal) {&#xA;    fmt.Println(predator.name + &quot;'s eating victim &quot; + victim.GetName())&#xA;    predator.hungry = false&#xA;    victim.SetAlive(false)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I need to mention  that if you want your original structs to&#xA;be modified then you need to pass a pointer to struct, not a struct as&#xA;receiver argument:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here Mouse struct will not be modified. Only a copy of it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (herbivore Mouse) eatingGrass() {&#xA;    fmt.Println(herbivore.name + &quot;'s eating a grass.. ^___^&quot;)&#xA;    herbivore.hungry = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And here is the fixed version:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (herbivore *Mouse) eatingGrass() {&#xA;    fmt.Println(herbivore.name + &quot;'s eating a grass.. ^___^&quot;)&#xA;    herbivore.hungry = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you want better explanation for this - then visit&#xA;&lt;a href=&quot;https://www.writeingo.com/blog/method-receiver-types-in-go/&quot; rel=&quot;nofollow noreferrer&quot;&gt;my blog post&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The last thing - as best practice - if you used Struct pointer in one of the methods of your&#xA;type then all of them should take a pointer to it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Final solution:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;type Predator interface {&#xA;    eatingVictim(victim Animal)&#xA;}&#xA;&#xA;type Herbivore interface {&#xA;    eatingGrass()&#xA;}&#xA;&#xA;type Animal interface {&#xA;    GetName() string&#xA;    SetAlive(bool)&#xA;}&#xA;&#xA;type Cat struct {&#xA;    name   string&#xA;    hungry bool&#xA;    alive  bool&#xA;}&#xA;&#xA;type Mouse struct {&#xA;    name   string&#xA;    hungry bool&#xA;    alive  bool&#xA;}&#xA;&#xA;func (herbivore *Mouse) eatingGrass() {&#xA;    fmt.Println(herbivore.name + &quot;'s eating a grass.. ^___^&quot;)&#xA;    herbivore.hungry = false&#xA;}&#xA;&#xA;func (m *Mouse) GetName() string {&#xA;    return m.name&#xA;}&#xA;&#xA;func (m *Mouse) SetAlive(alive bool) {&#xA;    m.alive = alive&#xA;}&#xA;&#xA;func (predator *Cat) eatingVictim(victim Animal) {&#xA;    fmt.Println(predator.name + &quot;'s eating victim &quot; + victim.GetName())&#xA;    predator.hungry = false&#xA;    victim.SetAlive(false)&#xA;}&#xA;&#xA;func main() {&#xA;    cat := Cat{&quot;cat&quot;, true, true}&#xA;    mouse := Mouse{&quot;mouse&quot;, true, true}&#xA;&#xA;    fmt.Println(cat)&#xA;    fmt.Println(mouse)&#xA;&#xA;    mouse.eatingGrass()&#xA;    cat.eatingVictim(&amp;amp;mouse)&#xA;&#xA;    fmt.Println(cat)&#xA;    fmt.Println(mouse)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8307258"" LastEditorUserId=""8307258"" LastEditDate=""2017-08-05T09:11:02.427"" LastActivityDate=""2017-08-05T09:11:02.427"" CommentCount=""0"" />
",45520100
45520191,"45520191      <row Id=""45520191"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45520296"" PostTypeId=""2"" ParentId=""45520191"" CreationDate=""2017-08-05T09:22:19.157"" Score=""2"" Body=""&lt;p&gt;Given that the input is a single byte probably a lookup table is the best option... only takes 256 bytes and you get code like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var count = bitcount[input];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""320726"" LastActivityDate=""2017-08-05T09:22:19.157"" CommentCount=""0"" />
",45520296
45520813,"45520813      <row Id=""45520813"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45521249"" PostTypeId=""2"" ParentId=""45520813"" CreationDate=""2017-08-05T11:12:45.693"" Score=""2"" Body=""&lt;p&gt;The MySQL client-server protocol returns the value of &lt;code&gt;LAST_INSERT_ID()&lt;/code&gt; in response packets to queries performing an &lt;code&gt;INSERT&lt;/code&gt; operation. Generally the client APIs give that back to client code using methods like &lt;code&gt;sql.Result.LastInsertId()&lt;/code&gt; in the SQL API. No round-trip query is required.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So the answer to your question is &quot;the first INSERT.&quot;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To be clear, MySQL connections aren't thread safe in the broad sense. Instead, they are serially reusable resources. Multi-threaded client environments make them appear thread-safe by managing the serial reuse. You have described how that works for &lt;code&gt;golang&lt;/code&gt; in your question.&lt;/p&gt;&#xA;"" OwnerUserId=""205608"" LastEditorUserId=""205608"" LastEditDate=""2017-08-05T11:22:08.507"" LastActivityDate=""2017-08-05T11:22:08.507"" CommentCount=""1"" />
",45521249
45519075,"45519075      <row Id=""45519075"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45523001"" PostTypeId=""2"" ParentId=""45519075"" CreationDate=""2017-08-05T14:27:04.480"" Score=""1"" Body=""&lt;p&gt;Don't use Curl if you are not using HTTP protocol. Curl is expecting certain format of the message that is compatible with HTTP protocol.&#xA;If you send text &quot;true&quot;, that is for sure not valid HTTP Header.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To test TCP server use Netcat instead:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nc localhost port&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8307258"" LastActivityDate=""2017-08-05T14:27:04.480"" CommentCount=""0"" />
",45523001
44764400,"44764400      <row Id=""44764400"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45524409"" PostTypeId=""2"" ParentId=""44764400"" CreationDate=""2017-08-05T17:02:17.717"" Score=""0"" Body=""&lt;p&gt;This issue could be solved by configuring the host machine mount to be private which &lt;em&gt;does not receive or forward any propagation events to other mounts&lt;/em&gt;, vide  &lt;a href=&quot;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/sect-Using_the_mount_Command-Mounting-Bind.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;RedHat - Sharing Mounts&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This command should be executed on your host machine before your create the container:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ mount --make-rprivate /&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1253306"" LastActivityDate=""2017-08-05T17:02:17.717"" CommentCount=""2"" />
",45524409
45525332,"45525332      <row Id=""45525332"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45525909"" PostTypeId=""2"" ParentId=""45525332"" CreationDate=""2017-08-05T20:01:45.480"" Score=""6"" Body=""&lt;p&gt;The echo context exposes the HTTP request, which has a context tied to the server request already.  Just get that context, and check it for cancellation, and/or pass it along to methods that take a context.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ctx := c.Request().Context()&#xA;select {&#xA;case &amp;lt;-ctx.Done():&#xA;    return ctx.Err()&#xA;default:&#xA;    // Continue handling the request&#xA;}&#xA;&#xA;// and pass along to the db or whatever else:&#xA;rows, err := db.QueryContext(ctx, ...)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If the client aborts the connection, the Request-scoped context will automatically be cancelled.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to add your own cancellation conditions, (timeouts, or whatever) you can do that, too:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;req := c.Request()&#xA;ctx, cancel := context.WithCancel(req.Context())&#xA;req.WithContext(ctx)&#xA;defer cancel()&#xA;// do stuff, which may conditionally call cancel() to cancel the context early&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""13860"" LastEditorUserId=""13860"" LastEditDate=""2017-08-07T09:11:16.357"" LastActivityDate=""2017-08-07T09:11:16.357"" CommentCount=""2"" />
",45525909
45526926,"45526926      <row Id=""45526926"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45527050"" PostTypeId=""2"" ParentId=""45526926"" CreationDate=""2017-08-05T22:54:12.387"" Score=""12"" Body=""&lt;p&gt;Yes. From the &lt;a href=&quot;https://golang.org/ref/spec#Assignments&quot; rel=&quot;noreferrer&quot;&gt;language spec&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The assignment proceeds in two phases. First, the operands of index expressions and pointer indirections (including implicit pointer indirections in selectors) on the left and the expressions on the right are all evaluated in the usual order. Second, the assignments are carried out in left-to-right order.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So in your example, &lt;code&gt;child&lt;/code&gt; and &lt;code&gt;child.child&lt;/code&gt; will be evaluated first, then assigned to &lt;code&gt;parent&lt;/code&gt; and &lt;code&gt;child&lt;/code&gt; respectively. &lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastEditorUserId=""13860"" LastEditDate=""2017-08-06T17:07:41.697"" LastActivityDate=""2017-08-06T17:07:41.697"" CommentCount=""2"" />
",45527050
45525539,"45525539      <row Id=""45525539"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45527603"" PostTypeId=""2"" ParentId=""45525539"" CreationDate=""2017-08-06T00:41:25.047"" Score=""1"" Body=""&lt;p&gt;There is a bug in &lt;a href=&quot;https://github.com/fragmenta/query&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;https://github.com/fragmenta/query&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;TimeString&lt;/code&gt; method in &lt;code&gt;query/adapters/database.go&lt;/code&gt; is not valid for all DBMS adapters.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// TimeString - given a time, return the standard string representation&#xA;func (db *Adapter) TimeString(t time.Time) string {&#xA;    return t.Format(&quot;2006-01-02 15:04:05.000 -0700&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It's not valid for a MySQL timestamp: &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/datetime.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;MySQL 5.7 Reference Manual, 11.3.1 The DATE, DATETIME, and TIMESTAMP Types&lt;/a&gt;. The MySQL &lt;code&gt;TimeString&lt;/code&gt; method in &lt;code&gt;query/adapters/database_mysql.go&lt;/code&gt; should be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// TimeString - given a time, return the MySQL standard string representation&#xA;func (db *MysqlAdapter) TimeString(t time.Time) string {&#xA;    return t.Format(&quot;2006-01-02 15:04:05.999999&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-08-06T04:31:18.477"" LastActivityDate=""2017-08-06T04:31:18.477"" CommentCount=""0"" />
",45527603
45526476,"45526476      <row Id=""45526476"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45527888"" PostTypeId=""2"" ParentId=""45526476"" CreationDate=""2017-08-06T01:50:06.737"" Score=""6"" Body=""&lt;p&gt;As stated in the comments, problem here is once your interface has this signature:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Greeter interface {&#xA;    Greet() Greeting&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The any valid implementation must use exactly &lt;code&gt;Greeting&lt;/code&gt; as the return type.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But, as the documentation shows, you don't need to give the interface a name:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Interface_types&quot; rel=&quot;noreferrer&quot;&gt;https://golang.org/ref/spec#Interface_types&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In order to be able to implement what you need, you might declare the interface directly in the return value, without giving it a name.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Greeter greets with anything that has a String() method&#xA;type Greeter interface {&#xA;    Greet() interface{ String() string }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then your &lt;code&gt;Greet()&lt;/code&gt; function for &lt;code&gt;Hello&lt;/code&gt; can do this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Hello greets by returning itself...&#xA;func (h *Hello) Greet() interface{ String() string } {&#xA;   return h&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Find here a modified playground showing the working example:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/HteA_9jFd4&quot; rel=&quot;noreferrer&quot;&gt;https://play.golang.org/p/HteA_9jFd4&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-08-06T01:50:06.737"" CommentCount=""0"" />
",45527888
45534941,"45534941      <row Id=""45534941"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45535827"" PostTypeId=""2"" ParentId=""45534941"" CreationDate=""2017-08-06T19:31:18.633"" Score=""1"" Body=""&lt;p&gt;If you look at the source code for the method &lt;a href=&quot;https://github.com/golang/text/blob/master/language/language.go#L452&quot; rel=&quot;nofollow noreferrer&quot;&gt;tag{}.Region()&lt;/a&gt; you'll see that if region is not specified it tries to add tags and sets the likelihood to low. &lt;a href=&quot;https://github.com/golang/text/blob/2bf8f2a19ec09c670e931282edfe6567f6be21c9/language/match.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;addTags()&lt;/a&gt; If you look at the implementation for addTags() you'll see&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if t.lang == 0 {&#xA;  t.lang = _en // default language&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;where the default language is set to English. Cheers.&lt;/p&gt;&#xA;"" OwnerUserId=""4639336"" LastEditorUserId=""4639336"" LastEditDate=""2017-08-06T19:45:36.117"" LastActivityDate=""2017-08-06T19:45:36.117"" CommentCount=""0"" />
",45535827
45536116,"45536116      <row Id=""45536116"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45536307"" PostTypeId=""2"" ParentId=""45536116"" CreationDate=""2017-08-06T20:29:00.353"" Score=""0"" Body=""&lt;p&gt;You are sending some json data with the wrong &lt;code&gt;Content-Type&lt;/code&gt;.&#xA;I see 2 options, either change &lt;code&gt;Content-Type&lt;/code&gt; in your header to:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;'Content-type' : 'application/json'&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;or transform your payload to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;data: &quot;email=check@onet.pl&amp;amp;nick=borysxoxo&amp;amp;password=admin12312&amp;amp;password_confirmation=admin12312&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1407939"" LastActivityDate=""2017-08-06T20:29:00.353"" CommentCount=""1"" />
",45536307
45537134,"45537134      <row Id=""45537134"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45537161"" PostTypeId=""2"" ParentId=""45537134"" CreationDate=""2017-08-06T22:18:37.500"" Score=""4"" Body=""&lt;p&gt;Anchor part is not even (generally) sent by a client to the server.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Eg, browsers don't send it.&lt;/p&gt;&#xA;"" OwnerUserId=""251311"" LastActivityDate=""2017-08-06T22:18:37.500"" CommentCount=""0"" />
",45537161
45537320,"45537320      <row Id=""45537320"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45537434"" PostTypeId=""2"" ParentId=""45537320"" CreationDate=""2017-08-06T23:02:22.570"" Score=""2"" Body=""&lt;p&gt;You want to be slicing &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;, which you can do in the following way:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func func1(r []byte) {&#xA;    for i := 0; i &amp;lt; CONSTANT; i++ {&#xA;        func2(r[i*OTHER_CONSTANT:])&#xA;    }&#xA;}&#xA;func func2(a []byte) {&#xA;    for i := 0; i &amp;lt; CONSTANT; i += 8 {&#xA;        // do some stuff&#xA;        a = a[3:]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""142162"" LastActivityDate=""2017-08-06T23:02:22.570"" CommentCount=""0"" />
",45537434
45538573,"45538573      <row Id=""45538573"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45539166"" PostTypeId=""2"" ParentId=""45538573"" CreationDate=""2017-08-07T03:52:40.337"" Score=""5"" Body=""&lt;pre&gt;&lt;code&gt;var a, b int&#xA;n, err := fmt.Sscanf(&quot;1003450020170804890000000022344&quot;, &quot;%4d%3d&quot;, &amp;amp;a, &amp;amp;b)&#xA;if err != nil {&#xA;   // ...&#xA;}&#xA;&#xA;fmt.Println(a) // 1003&#xA;fmt.Println(b) // 450&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then you could create a structure with these.&lt;/p&gt;&#xA;"" OwnerUserId=""290339"" LastActivityDate=""2017-08-07T03:52:40.337"" CommentCount=""3"" />
",45539166
45536166,"45536166      <row Id=""45536166"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45541753"" PostTypeId=""2"" ParentId=""45536166"" CreationDate=""2017-08-07T07:45:18.037"" Score=""4"" Body=""&lt;p&gt;It's called reverse proxy. Each application uses it's own port to listen. And then you just point to them in nginx config:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;server {&#xA;    listen 80;&#xA;    server_name turalasgar.pro;&#xA;    location / {&#xA;        proxy_pass http://localhost:8080;&#xA;        ...&#xA;    }&#xA;}&#xA;&#xA;server {&#xA;    listen 80;&#xA;    server_name engossip.com;&#xA;    location / {&#xA;        proxy_pass http://localhost:8081;&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5040388"" LastActivityDate=""2017-08-07T07:45:18.037"" CommentCount=""5"" />
",45541753
45541656,"45541656      <row Id=""45541656"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45541764"" PostTypeId=""2"" ParentId=""45541656"" CreationDate=""2017-08-07T07:45:48.393"" Score=""2"" Body=""&lt;p&gt;&lt;code&gt;os.Open&lt;/code&gt; will open a file, since the file doesn't exist you will get an error.&#xA;Use &lt;code&gt;os.Create&lt;/code&gt; instead it will create a new file and open it. (ref: &lt;a href=&quot;https://golang.org/pkg/os/#Open&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/os/#Open&lt;/a&gt;)&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;strong&gt;func Open&lt;/strong&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;code&gt;func Open(name string) (*File, error)&lt;/code&gt; &lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Open opens the named file for&#xA;  reading. If successful, methods on the returned file can be used for&#xA;  reading; the associated file descriptor has mode O_RDONLY. If there is&#xA;  an error, it will be of type *PathError.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;strong&gt;func Create&lt;/strong&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;code&gt;func Create(name string) (*File, error)&lt;/code&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Create creates the named file with mode 0666 (before umask),&#xA;  truncating it if it already exists. If successful, methods on the&#xA;  returned File can be used for I/O; the associated file descriptor has&#xA;  mode O_RDWR. If there is an error, it will be of type *PathError.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Made a new handler as an example:&#xA;And also using OpenFile as mentioned by: &lt;a href=&quot;https://stackoverflow.com/questions/45541656/golang-send-file-via-post-request/45541764?noredirect=1#comment78043634_45541764&quot;&gt;GoLang send file via POST request&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func Upload(w http.ResponseWriter, r *http.Request) {&#xA;    io.WriteString(w, &quot;Upload files\n&quot;)&#xA;&#xA;    file, handler, err := r.FormFile(&quot;file&quot;)&#xA;    if err != nil {&#xA;        panic(err) //dont do this&#xA;    }&#xA;    defer file.Close()&#xA;&#xA;    // copy example&#xA;    f, err := os.OpenFile(handler.Filename, os.O_WRONLY|os.O_CREATE, 0666)&#xA;    if err != nil {&#xA;        panic(err) //please dont&#xA;    }&#xA;    defer f.Close()&#xA;    io.Copy(f, file)&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8405576"" LastEditorUserId=""8405576"" LastEditDate=""2017-08-07T08:33:20.230"" LastActivityDate=""2017-08-07T08:33:20.230"" CommentCount=""3"" />
",45541764
45537444,"45537444      <row Id=""45537444"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45542325"" PostTypeId=""2"" ParentId=""45537444"" CreationDate=""2017-08-07T08:18:12.737"" Score=""1"" Body=""&lt;p&gt;Writing unit tests is relatively easy. &lt;strong&gt;Writing good unit tests is hard&lt;/strong&gt;. This isn't helped because we are introduced to unit testing with trivial code examples that don't mimic real life usage.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try to avoid mocking unless you need to verify the invocations of a dependency. Prefer using stubs, fakes or real implementations. Knowing when to use each is a matter of experience and where the difficulty comes in. Also, think about your design. If you are finding it difficult to unit test, this could be because you need to redesign.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unit tests take time to write and maintain. You will always be quicker writing code without unit tests. However, we write unit tests to give us some assurance that our code works correctly and confidence to re-factor. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hence it's important to try to write the test against the behaviour (black box) instead of the implementation (white-box). This isn't always possible but unit tests that are tied to the implementation are fragile, discourage refactoring and can also sometimes mask unexpected behaviour.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Some unit testing resources worth reading:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://martinfowler.com/articles/mocksArentStubs.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mocks Aren't Stubs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://testing.googleblog.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Testing on the Toilet Blog&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/tdd-original&quot; rel=&quot;nofollow noreferrer&quot;&gt;TDD - Where it all went wrong&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;As way as an example, think of writing a unit test for a simple email address validator. We want to write a function that will take a string and return true/false based on whether a valid email address was supplied.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A trivial example implementation would be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var re = regexp.MustCompile(&quot;[regular expression]&quot;)&#xA;func ValidateEmail(s string) bool {&#xA;   return re.MatchString(s)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We would then write a table driven test with the various inputs, e.g. &lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;good@example.com&lt;/code&gt;, &lt;code&gt;bad&lt;/code&gt; etc and verify the result was correct.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now this is a bit of a trivial example but illustrates my point. One may argue that this is easy because the function has no dependencies but it does! We are relying on the regexp implementation and the regular expression we are passing it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is testing the desired behaviour, not how we implement it. We don't care how it validates an email address, simply that it does. If we were to tweak the regular expression or completely change the implementation then none of this would &lt;em&gt;break&lt;/em&gt; the tests unless the result was incorrect.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Very few would suggest that we should isolate the dependency and test the validation function by mocking the regexp and ensuring that it is called with the regular expression we expect. This would be far more fragile but also less useful, i.e. how would we know the regular expression is actually going to work?&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;For your specific example, you could easily avoid mocking &amp;amp; use a trivial fake to test both normal results and the error cases. This would be something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Used to test error result, &#xA;var errFail = errors.New(&quot;Failed&quot;)&#xA;&#xA;// Fake type&#xA;type fakeD func(input int) (int, error)&#xA;&#xA;// Implements Dinterface&#xA;func (f fakeD) DoSomethingWithD(input int) (int, error) {&#xA;    return f(input)&#xA;}&#xA;&#xA;// Fake implementation. Returns error on input 5, otherwise input * input&#xA;var fake fakeD = func(input int) (int, error) {&#xA;    if input == 5 {&#xA;        return nil, errFail&#xA;    }&#xA;    return input * input, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then simply use &lt;code&gt;fake&lt;/code&gt; as your dependency and run your table based tests as normal. &lt;/p&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-08-07T08:18:12.737"" CommentCount=""2"" />
",45542325
45544133,"45544133      <row Id=""45544133"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45544387"" PostTypeId=""2"" ParentId=""45544133"" CreationDate=""2017-08-07T10:08:11.387"" Score=""1"" Body=""&lt;p&gt;How about only starting e.g. 10 goroutines and pass the values in from one for loop in another go routine. The channels have a small buffer to decrease synchronisation time.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;chIn := make(chan label.Label, 20)&#xA;chOut := make(chan label.Label, 20)&#xA;&#xA;for i:=0;i&amp;lt;10;i++ {&#xA;    go func(gClient *gmail.Client, chIn chan label.Label, chOut chan&amp;lt;- label.Label) {&#xA;&#xA;        for gmailLabels := range chIn {&#xA;            d, err := s.gClient.Service.Users.Labels.Get(s.gClient.User, l.Id).Do()&#xA;&#xA;            if err != nil {&#xA;                panic(err)&#xA;            }&#xA;&#xA;            // Performs some operation with the label `d`&#xA;            preparedLabel := ....&#xA;&#xA;            chOut &amp;lt;- preparedLabel&#xA;&#xA;        }&#xA;&#xA;    }(s.gClient, chIn, chOut)&#xA;&#xA;}&#xA;&#xA;go func(chIn chan label.Label) {&#xA;    defer close(chIn)&#xA;    for _, l := range r.Labels {&#xA;        chIn &amp;lt;- l&#xA;    }&#xA;}(chIn)&#xA;&#xA;for i := 0; i &amp;lt; len(r.Labels); i++ {&#xA;    lab := &amp;lt;-chOut&#xA;    fmt.Printf(&quot;Processed %v\n&quot;, lab.LabelID)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;EDIT:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here a &lt;a href=&quot;https://play.golang.org/p/R4b296QOrk&quot; rel=&quot;nofollow noreferrer&quot;&gt;playground sample&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastEditorUserId=""6220193"" LastEditDate=""2017-08-07T10:44:40.237"" LastActivityDate=""2017-08-07T10:44:40.237"" CommentCount=""7"" />
",45544387
45547169,"45547169      <row Id=""45547169"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45547634"" PostTypeId=""2"" ParentId=""45547169"" CreationDate=""2017-08-07T13:04:26.837"" Score=""1"" Body=""&lt;p&gt;What exactly is your target type supposed to be? It can't be a struct since you do not know the fields beforehand.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The only fitting type to me seems to be a &lt;code&gt;map&lt;/code&gt; of type &lt;code&gt;map[string]interface{}&lt;/code&gt;: with it any nested structure can be achieved:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;a := map[string]interface{}{&#xA;    &quot;item.field1&quot;: &quot;val1&quot;,&#xA;    &quot;item.field2&quot;: &quot;val2&quot;,&#xA;    &quot;item.fieldN&quot;: &quot;valN&quot;,&#xA;    &quot;custom_fields&quot;: map[string]interface{}{&#xA;        &quot;fields.field1&quot;: &quot;cval1&quot;,&#xA;        &quot;fields.field2&quot;: &quot;cval2&quot;,&#xA;    },&#xA;}&#xA;b, err := json.Marshal(a)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See playground sample &lt;a href=&quot;https://play.golang.org/p/kw_OZWTMGS&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Filling this structure from a database as you hinted at should probably be a custom script (not using json).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note: &lt;code&gt;custom_fields&lt;/code&gt; can also be of other types depending on what type the value column is in the database. If the value column is a string use &lt;code&gt;map[string]string&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-07T13:04:26.837"" CommentCount=""4"" />
",45547634
45526086,"45526086      <row Id=""45526086"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45547741"" PostTypeId=""2"" ParentId=""45526086"" CreationDate=""2017-08-07T13:10:03.910"" Score=""0"" Body=""&lt;p&gt;With the help of several commenters, I know have it all figured out.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Linux version is as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    “bytes”&#xA;    “encoding/binary”&#xA;    “fmt”&#xA;    “os”&#xA;    “os/exec”&#xA;    “syscall”&#xA;)&#xA;&#xA;// parses through the /proc/bus/input/devices file for keyboard devices.&#xA;// Copied from `github.com/gearmover/keylogger` with trivial modification.&#xA;func dumpDevices() ([]string, error) {&#xA;    cmd := exec.Command(“/bin/sh”, “-c”, “/bin/grep -E ‘Handlers|EV=’ /proc/bus/input/devices | /bin/grep -B1 ‘EV=120013’ | /bin/grep -Eo ‘event[0-9]+’”)&#xA;&#xA;    output, err := cmd.Output()&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;&#xA;    buf := bytes.NewBuffer(output)&#xA;&#xA;    var devices []string&#xA;&#xA;    for line, err := buf.ReadString(‘\n’); err == nil; {&#xA;        devices = append(devices, “/dev/input/”+line[:len(line)-1])&#xA;&#xA;        line, err = buf.ReadString(‘\n’)&#xA;    }&#xA;&#xA;    return devices, nil&#xA;}&#xA;&#xA;// Using MS names, just because I don’t feel like looking up the Linux versions.&#xA;var keys = map[uint16]string{&#xA;    0xa3: “VK_MEDIA_NEXT_TRACK”,&#xA;    0xa5: “VK_MEDIA_PREV_TRACK”,&#xA;    0xa6: “VK_MEDIA_STOP”,&#xA;    0xa4: “VK_MEDIA_PLAY_PAUSE”,&#xA;}&#xA;&#xA;// Most of the code here comes from `github.com/gearmover/keylogger`.&#xA;func main() {&#xA;    // drop privileges when executing other programs&#xA;    syscall.Setgid(65534)&#xA;    syscall.Setuid(65534)&#xA;&#xA;    // dump our keyboard devices from /proc/bus/input/devices&#xA;    devices, err := dumpDevices()&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;    if len(devices) == 0 {&#xA;        fmt.Println(“No input devices found”)&#xA;        return&#xA;    }&#xA;&#xA;    // bring back our root privs&#xA;    syscall.Setgid(0)&#xA;    syscall.Setuid(0)&#xA;&#xA;    // Open the first keyboard device.&#xA;    input, err := os.OpenFile(devices[0], os.O_RDONLY, 0600)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    defer input.Close()&#xA;&#xA;    // Log media keys&#xA;    var buffer = make([]byte, 24)&#xA;    for {&#xA;        // read the input events as they come in&#xA;        n, err := input.Read(buffer)&#xA;        if err != nil {&#xA;            return&#xA;        }&#xA;&#xA;        if n != 24 {&#xA;            fmt.Println(“Weird Input Event Size: “, n)&#xA;            continue&#xA;        }&#xA;&#xA;        // parse the input event according to the &amp;lt;linux/input.h&amp;gt; header struct&#xA;        binary.LittleEndian.Uint64(buffer[0:8]) // Time stamp stuff I could care less about&#xA;        binary.LittleEndian.Uint64(buffer[8:16])&#xA;        etype := binary.LittleEndian.Uint16(buffer[16:18])        // Event Type. Always 1 for keyboard events&#xA;        code := binary.LittleEndian.Uint16(buffer[18:20])         // Key scan code&#xA;        value := int32(binary.LittleEndian.Uint32(buffer[20:24])) // press(1), release(0), or repeat(2)&#xA;&#xA;        if etype == 1 &amp;amp;&amp;amp; value == 1 &amp;amp;&amp;amp; keys[code] != “” {&#xA;            // In a real application I would send a message here.&#xA;            fmt.Println(keys[code])&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And the Windows version:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    “fmt”&#xA;    “syscall”&#xA;    “time”&#xA;)&#xA;&#xA;var user32 = syscall.NewLazyDLL(“user32.dll”)&#xA;var procGAKS = user32.NewProc(“GetAsyncKeyState”)&#xA;&#xA;// Key codes from MSDN&#xA;var keys = [4]uint{&#xA;    0xb0, // VK_MEDIA_NEXT_TRACK&#xA;    0xb1, // VK_MEDIA_PREV_TRACK&#xA;    0xb2, // VK_MEDIA_STOP&#xA;    0xb3, // VK_MEDIA_PLAY_PAUSE&#xA;}&#xA;&#xA;var names = [4]string{&#xA;    “VK_MEDIA_NEXT_TRACK”,&#xA;    “VK_MEDIA_PREV_TRACK”,&#xA;    “VK_MEDIA_STOP”,&#xA;    “VK_MEDIA_PLAY_PAUSE”,&#xA;}&#xA;&#xA;func main() {&#xA;    fmt.Println(“Running…”)&#xA;&#xA;    // Since I don’t want to trigger dozens of times for each key I need to track state.&#xA;    // I could check the bits of GAKS’ return value, but that is not reliable.&#xA;    down := [4]bool{false, false, false, false}&#xA;&#xA;    for {&#xA;        time.Sleep(1 * time.Millisecond)&#xA;        for i, key := range keys {&#xA;            // val is not a simple boolean!&#xA;            // 0 means “not pressed” (also certain errors)&#xA;            // If LSB is set the key was just pressed (this may not be reliable)&#xA;            // If MSB is set the key is currently down.&#xA;            val, _, _ := procGAKS.Call(uintptr(key))&#xA;&#xA;            // Turn a press into a transition and track key state.&#xA;            goingdown := false&#xA;            if int(val) != 0 &amp;amp;&amp;amp; !down[i] {&#xA;                goingdown = true&#xA;                down[i] = true&#xA;            }&#xA;            if int(val) == 0 &amp;amp;&amp;amp; down[i] {&#xA;                down[i] = false&#xA;            }&#xA;            if goingdown {&#xA;                // In a real application I would send a message here.&#xA;                fmt.Println(names[i])&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The only &quot;issue&quot; is that the Linux version must be run as root. For me this is not a problem. If running as root is a problem I think there is a way that involves X11...&lt;/p&gt;&#xA;"" OwnerUserId=""1094529"" LastEditorUserId=""1094529"" LastEditDate=""2017-08-07T13:22:20.510"" LastActivityDate=""2017-08-07T13:22:20.510"" CommentCount=""0"" />
",45547741
45549682,"45549682      <row Id=""45549682"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45551937"" PostTypeId=""2"" ParentId=""45549682"" CreationDate=""2017-08-07T16:47:59.453"" Score=""2"" Body=""&lt;p&gt;I decided to add an answer showing a type assertion instead of the &lt;code&gt;reflect&lt;/code&gt; package. You can decide which is best for your application. I personally prefer the builtin functions over the complexity of the &lt;code&gt;reflect&lt;/code&gt; package.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var data = `&#xA;array:&#xA;  - name: myvar&#xA;    val: 1&#xA;  - name: mymap&#xA;    val: [1, 2]&#xA;`&#xA;&#xA;type Data struct {&#xA;    Array []struct {&#xA;        Name string&#xA;        Val  interface{}&#xA;    }&#xA;}&#xA;&#xA;func main() {&#xA;    d := Data{}&#xA;    err := yaml.Unmarshal([]byte(data), &amp;amp;d)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    for i := range d.Array {&#xA;        switch val := d.Array[i].(type) {&#xA;        case int:&#xA;            fmt.Println(val) // is integer&#xA;        case []int:&#xA;            fmt.Println(val) // is []int&#xA;        case []string:&#xA;            fmt.Println(val) // is []string&#xA;            //  .... you get the idea&#xA;        default:&#xA;            log.Fatalf(&quot;Type unaccounted for: %+v\n&quot;, d.Array[i])&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1276480"" LastEditorUserId=""1276480"" LastEditDate=""2017-08-07T20:50:12.080"" LastActivityDate=""2017-08-07T20:50:12.080"" CommentCount=""6"" />
",45551937
45552207,"45552207      <row Id=""45552207"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45552238"" PostTypeId=""2"" ParentId=""45552207"" CreationDate=""2017-08-07T17:10:14.510"" Score=""2"" Body=""&lt;p&gt;Simplest way is probably to make new slices and write some loops:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var orig [][]interface&#xA;var strs = make([][]string, len(orig))&#xA;for i := range orig {&#xA;   strs[i] = make([]string, len(orig[i]))&#xA;   for j := range orig[i]{&#xA;     strs[i][j] = fmt.Sprint(orig[i][j])&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""121660"" LastActivityDate=""2017-08-07T17:10:14.510"" CommentCount=""1"" />
",45552238
45532809,"45532809      <row Id=""45532809"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45554648"" PostTypeId=""2"" ParentId=""45532809"" CreationDate=""2017-08-07T19:47:56.673"" Score=""0"" Body=""&lt;p&gt;Write a program that runs on each node which reads the nodes location and then updates the node's label or (annotation) in the kubernetes node API. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You don't need to modify the kubernetes source to accomplish this.  If you modify the kubernetes source, it will be harder to pickup future changes and you won't be able to use standard releases..&lt;/p&gt;&#xA;"" OwnerUserId=""4215254"" LastActivityDate=""2017-08-07T19:47:56.673"" CommentCount=""2"" />
",45554648
45558049,"45558049      <row Id=""45558049"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45558262"" PostTypeId=""2"" ParentId=""45558049"" CreationDate=""2017-08-08T02:12:29.933"" Score=""2"" Body=""&lt;p&gt;you can use httputil's &lt;a href=&quot;https://golang.org/pkg/net/http/httputil/#ReverseProxy&quot; rel=&quot;nofollow noreferrer&quot;&gt;ReverseProxy&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;here's an example code&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;log&quot;&#xA;    &quot;net/http&quot;&#xA;    &quot;net/http/httputil&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    director := func(req *http.Request) {&#xA;        switch req.Host {&#xA;        case &quot;address001.com&quot;:&#xA;            req.URL.Host = &quot;localhost:4444&quot;&#xA;            req.URL.Scheme = &quot;http&quot;&#xA;        case &quot;address002.com&quot;:&#xA;            req.URL.Host = &quot;localhost:5555&quot;&#xA;            req.URL.Scheme = &quot;http&quot;&#xA;        default:&#xA;            log.Println(&quot;error&quot;)&#xA;        }&#xA;    }&#xA;    proxy := &amp;amp;httputil.ReverseProxy{Director: director}&#xA;    log.Fatalln(http.ListenAndServe(&quot;:8080&quot;, proxy))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2427222"" LastActivityDate=""2017-08-08T02:12:29.933"" CommentCount=""0"" />
",45558262
45558505,"45558505      <row Id=""45558505"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45561196"" PostTypeId=""2"" ParentId=""45558505"" CreationDate=""2017-08-08T06:51:01.310"" Score=""2"" Body=""&lt;p&gt;Lookup order:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The vendor folder.&lt;/li&gt;&#xA;&lt;li&gt;The standard packages.&lt;/li&gt;&#xA;&lt;li&gt;GOPATH folder.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Run &lt;code&gt;go help gopath&lt;/code&gt; to learn more on how &lt;code&gt;Go&lt;/code&gt; search each directory.  &lt;/p&gt;&#xA;"" OwnerUserId=""1280320"" LastActivityDate=""2017-08-08T06:51:01.310"" CommentCount=""0"" />
",45561196
45558773,"45558773      <row Id=""45558773"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45561202"" PostTypeId=""2"" ParentId=""45558773"" CreationDate=""2017-08-08T06:51:21.253"" Score=""0"" Body=""&lt;p&gt;Welp, seems it was my application's fault all along! My Echo api seems fine... for now!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If someone has the same problem, perhaps this &lt;a href=&quot;https://stackoverflow.com/questions/45543099/vuejs-with-axios-request-in-vuex-store-cant-make-more-than-one-request-why/#45561091&quot;&gt;Vuejs with axios request in vuex store: can&amp;#39;t make more than one request, why?&lt;/a&gt; will help.&lt;/p&gt;&#xA;"" OwnerUserId=""8427577"" LastActivityDate=""2017-08-08T06:51:21.253"" CommentCount=""0"" />
",45561202
45563495,"45563495      <row Id=""45563495"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45563919"" PostTypeId=""2"" ParentId=""45563495"" CreationDate=""2017-08-08T09:01:04.380"" Score=""0"" Body=""&lt;p&gt;Your question is very unspecific and you do not show us what you have done so far.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since I don't know where your actual problem lies I will just post my &lt;code&gt;WriteRecord&lt;/code&gt; function I wrote a while back when testing cassandra with the gocql package:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (cs *cassandra) WriteRecord(table string, fields []string, values ...interface{}) error {&#xA;    var placeholder []string&#xA;&#xA;    for range fields {&#xA;        placeholder = append(placeholder, &quot;?&quot;)&#xA;    }&#xA;    querystring := fmt.Sprintf(insertstring, table, strings.Join(fields, &quot;, &quot;), strings.Join(placeholder, &quot;, &quot;))&#xA;    return cassandraSession.Query(querystring, values...).Exec()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As you can see the values are of type &lt;code&gt;interface{}&lt;/code&gt;. So they can be anything including of type &lt;code&gt;[]byte&lt;/code&gt;. Note that the following condition must be met: &lt;code&gt;len(fields) = len(values)&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hope this helps you on your journey of becoming a &lt;code&gt;golang&lt;/code&gt; expert :)&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-08T09:01:04.380"" CommentCount=""0"" />
",45563919
45570947,"45570947      <row Id=""45570947"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45571006"" PostTypeId=""2"" ParentId=""45570947"" CreationDate=""2017-08-08T14:25:21.430"" Score=""7"" Body=""&lt;p&gt;Simplest way would be to just iterate the map, since in Go the syntax would allow direct access to keys and values and dump them into the array.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;m := map[string]string { &quot;1&quot;:&quot;a&quot;, &quot;2&quot;:&quot;b&quot; }&#xA;arr := []string{}&#xA;for k, v := range m { &#xA;   arr = append(arr, k, v)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;One caveat here: In Go, map iteration order is randomized, as you can see here, under &quot;Iteration Order&quot;:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://blog.golang.org/go-maps-in-action&quot; rel=&quot;noreferrer&quot;&gt;https://blog.golang.org/go-maps-in-action&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So if you want your resulting array to have a particular ordering, you should first dump the keys and order (as shown in that same blog entry).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Playground (without the sorting part):&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/mCe6eEy25A&quot; rel=&quot;noreferrer&quot;&gt;https://play.golang.org/p/mCe6eEy25A&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastEditorUserId=""4907630"" LastEditDate=""2017-08-08T14:31:42.877"" LastActivityDate=""2017-08-08T14:31:42.877"" CommentCount=""0"" />
",45571006
45571318,"45571318      <row Id=""45571318"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45571612"" PostTypeId=""2"" ParentId=""45571318"" CreationDate=""2017-08-08T14:52:34.450"" Score=""1"" Body=""&lt;p&gt;Sure:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if r.URL.Path == &quot;/&quot; {&#xA;    // Render default/index/whatever page&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-08T14:52:34.450"" CommentCount=""1"" />
",45571612
45573392,"45573392      <row Id=""45573392"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45573469"" PostTypeId=""2"" ParentId=""45573392"" CreationDate=""2017-08-08T16:24:19.497"" Score=""2"" Body=""&lt;p&gt;You use &lt;code&gt;$$&lt;/code&gt; which is exactly what the documentation tells you. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The godoc section for &lt;code&gt;ReplaceAll&lt;/code&gt; (&lt;a href=&quot;https://godoc.org/regexp#Regexp.ReplaceAll&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://godoc.org/regexp#Regexp.ReplaceAll&lt;/a&gt;) tells you:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;$ signs are interpreted as in Expand&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So reading the section for &lt;code&gt;Expand&lt;/code&gt; has the answer. &lt;a href=&quot;https://godoc.org/regexp#Regexp.Expand&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://godoc.org/regexp#Regexp.Expand&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Please throughly read all relevant documentation for the package and functions you are using before posting a question.&lt;/p&gt;&#xA;"" OwnerUserId=""1276480"" LastEditorUserId=""1276480"" LastEditDate=""2017-08-08T16:40:54.157"" LastActivityDate=""2017-08-08T16:40:54.157"" CommentCount=""1"" />
",45573469
45571628,"45571628      <row Id=""45571628"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45573993"" PostTypeId=""2"" ParentId=""45571628"" CreationDate=""2017-08-08T16:55:48.307"" Score=""2"" Body=""&lt;p&gt;The reason is because you have created synchronous channel and you push here 1 message and then you could read it only once as well. That is because you get only 1 (random) read from &lt;code&gt;done&lt;/code&gt; channel.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The way you can shut down your goroutines is to use &lt;code&gt;WaitGroup&lt;/code&gt;:&lt;br&gt;&#xA;main.go:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var (&#xA;    done            chan bool&#xA;)&#xA;&#xA;func main() {&#xA;    cameras := client.CameraConfig()&#xA;    client.DrawUserControls(cameras)&#xA;    operator := client.NewOperator(cameras)&#xA;&#xA;    done = make(chan bool, 1)&#xA;    wg := &amp;amp;sync.WaitGroup{}&#xA;    wg.Add(2)&#xA;    go operator.UserInputListener(done, wg)&#xA;    go operator.ParseAndExecuteUserCommand(done, wg)&#xA;&#xA;    handleShutdown()&#xA;    wg.Wait()&#xA;}&#xA;&#xA;&#xA;func handleShutdown() {&#xA;    ch := make(chan os.Signal, 1)&#xA;    go func() {&#xA;        &amp;lt;-ch //wait for application terminating&#xA;        log.Println(&quot;Shutdown received.&quot;)&#xA;        close(done)&#xA;    }()&#xA;    signal.Notify(ch, os.Interrupt, syscall.SIGTERM, syscall.SIGHUP)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;client.go:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (o *Operator) UserInputListener(done &amp;lt;-chan bool, wg *sync.WaitGroup) {&#xA;    defer wg.Done()&#xA;    for {&#xA;        select {&#xA;        case &amp;lt;-done:&#xA;            log.Println(&quot;Keyboard listener shutting down.&quot;) &#xA;            return&#xA;        ........&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;func (o *Operator) ParseAndExecuteUserCommand(done &amp;lt;-chan bool, wg *sync.WaitGroup) {&#xA;    defer wg.Done()&#xA;    for {&#xA;        select {&#xA;        case &amp;lt;-done:&#xA;            log.Println(&quot;Command operator shutting down.&quot;) &#xA;            return&#xA;        ........&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Use this &lt;a href=&quot;http://www.hydrogen18.com/blog/stopping-it-all-in-go.html&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;link&quot;&gt;link&lt;/a&gt; for details&lt;/p&gt;&#xA;"" OwnerUserId=""2706190"" LastActivityDate=""2017-08-08T16:55:48.307"" CommentCount=""0"" />
",45573993
45575942,"45575942      <row Id=""45575942"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45578319"" PostTypeId=""2"" ParentId=""45575942"" CreationDate=""2017-08-08T21:28:03.200"" Score=""1"" Body=""&lt;p&gt;For testing purposes, I tend to use the mocking approach you described instead of creating new interfaces. One of the reasons being, AFAIK, there are &lt;a href=&quot;https://stackoverflow.com/questions/31759184/golang-documentation-on-all-known-implementation-of-interfaces&quot;&gt;no direct ways to identify which structs implement an interface&lt;/a&gt;, which is important to me if I wanted to know whether the mocks are doing the right thing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The main drawback of this approach is that the variable is essentially a package-level global variable (even though it's unexported). So all the drawbacks with declaring global variables apply.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your tests, you will definitely want to use &lt;code&gt;defer&lt;/code&gt; to re-assign &lt;code&gt;storeFunc&lt;/code&gt; back to its original concrete implementation once the tests completed. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var storeFunc = func *Store {&#xA;    // concrete implementation for opening store&#xA;}&#xA;&#xA;// and in the testing file…&#xA;func TestParse(t *testing.T) {&#xA;    storeFuncOriginal := storeFunc&#xA;    defer func() {&#xA;        storeFunc = storeFuncOriginal&#xA;    }()&#xA;&#xA;    storeFunc := func() {&#xA;        // set contents of mock…&#xA;    } &#xA;&#xA;    parse()&#xA;&#xA;    // etc...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;By the way, &lt;code&gt;var storeFunc = func openStore() *Store&lt;/code&gt; won't compile.&lt;/p&gt;&#xA;"" OwnerUserId=""1144203"" LastActivityDate=""2017-08-08T21:28:03.200"" CommentCount=""0"" />
",45578319
45578172,"45578172      <row Id=""45578172"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45579190"" PostTypeId=""2"" ParentId=""45578172"" CreationDate=""2017-08-08T22:52:33.443"" Score=""2"" Body=""&lt;p&gt;Pay attention to details and efficiency. Check for errors. You asked for files so skip directories and other things. Allow for multiple files with the same modified time stamp (for example, Windows file times have a resolution of, at best, 100-nanoseconds). You already have ModTime() so don't call os.Stat(). Use time.Time methods directly. And so on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;io/ioutil&quot;&#xA;    &quot;os&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    dir := `C:\temp\` // Windows directory&#xA;    files, err := ioutil.ReadDir(dir)&#xA;    if err != nil {&#xA;        fmt.Fprintln(os.Stderr, err)&#xA;        os.Exit(1)&#xA;    }&#xA;    var modTime time.Time&#xA;    var names []string&#xA;    for _, fi := range files {&#xA;        if fi.Mode().IsRegular() {&#xA;            if !fi.ModTime().Before(modTime) {&#xA;                if fi.ModTime().After(modTime) {&#xA;                    modTime = fi.ModTime()&#xA;                    names = names[:0]&#xA;                }&#xA;                names = append(names, fi.Name())&#xA;            }&#xA;        }&#xA;    }&#xA;    if len(names) &amp;gt; 0 {&#xA;        fmt.Println(modTime, names)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""221700"" LastActivityDate=""2017-08-08T22:52:33.443"" CommentCount=""1"" />
",45579190
45580151,"45580151      <row Id=""45580151"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45580232"" PostTypeId=""2"" ParentId=""45580151"" CreationDate=""2017-08-09T01:18:39.840"" Score=""6"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec&quot; rel=&quot;noreferrer&quot;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Select_statements&quot; rel=&quot;noreferrer&quot;&gt;Select statements&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Execution of a &quot;select&quot; statement proceeds in several steps:&lt;/p&gt;&#xA;  &#xA;  &lt;ol&gt;&#xA;  &lt;li&gt;For all the cases in the statement, the channel operands of receive operations and the channel and right-hand-side expressions of send&#xA;  statements are evaluated exactly once, in source order, upon entering&#xA;  the &quot;select&quot; statement. The result is a set of channels to receive&#xA;  from or send to, and the corresponding values to send. Any side&#xA;  effects in that evaluation will occur irrespective of which (if any)&#xA;  communication operation is selected to proceed. Expressions on the&#xA;  left-hand side of a RecvStmt with a short variable declaration or&#xA;  assignment are not yet evaluated.&lt;/li&gt;&#xA;  &lt;li&gt;If one or more of the communications can proceed, a single one that can proceed is chosen via a uniform pseudo-random selection.&#xA;  Otherwise, if there is a default case, that case is chosen. If there&#xA;  is no default case, the &quot;select&quot; statement blocks until at least one&#xA;  of the communications can proceed.&lt;/li&gt;&#xA;  &lt;li&gt;Unless the selected case is the default case, the respective communication operation is executed.&lt;/li&gt;&#xA;  &lt;li&gt;If the selected case is a RecvStmt with a short variable declaration or an assignment, the left-hand side expressions are&#xA;  evaluated and the received value (or values) are assigned.&lt;/li&gt;&#xA;  &lt;li&gt;The statement list of the selected case is executed.&lt;/li&gt;&#xA;  &lt;/ol&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&quot;What I'm most concerned about is that the branch of a select that is&#xA;  chosen could be non-deterministic, so that default may be chosen even&#xA;  if one of the cases is ready. Is this possible?&quot;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;No. See step 2 of the &lt;code&gt;select&lt;/code&gt; specification.&lt;/p&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-08-09T01:24:05.403"" LastActivityDate=""2017-08-09T01:24:05.403"" CommentCount=""1"" />
",45580232
45582678,"45582678      <row Id=""45582678"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45583982"" PostTypeId=""2"" ParentId=""45582678"" CreationDate=""2017-08-09T07:16:26.847"" Score=""1"" Body=""&lt;p&gt;The &lt;code&gt;&amp;lt;nil&amp;gt;&lt;/code&gt; pinted above is the output of &lt;code&gt;session.Run&lt;/code&gt;, which returns an &lt;code&gt;error&lt;/code&gt; (as per &lt;a href=&quot;https://godoc.org/golang.org/x/crypto/ssh#Session.Run&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs&lt;/a&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The output of the command is already being displayed on your console by the following goroutine:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go io.Copy(os.Stdout, stdout)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You don't need to print the &lt;code&gt;output&lt;/code&gt;, which is &lt;code&gt;nil&lt;/code&gt; since no error occurs when &lt;code&gt;session.Run&lt;/code&gt; is call complete. A better thing to do would be to check the error:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// ...&#xA;if err := session.Run(input); err != nil {&#xA;  // handle error&#xA;}&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""3129778"" LastActivityDate=""2017-08-09T07:16:26.847"" CommentCount=""1"" />
",45583982
45583641,"45583641      <row Id=""45583641"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45584340"" PostTypeId=""2"" ParentId=""45583641"" CreationDate=""2017-08-09T07:35:34.523"" Score=""2"" Body=""&lt;p&gt;&lt;code&gt;go run&lt;/code&gt; is getting the signal, not the program that is being run.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Compile the program ahead of time and run the binary directly in docker, and it will work as expected.&lt;/p&gt;&#xA;"" OwnerUserId=""59511"" LastActivityDate=""2017-08-09T07:35:34.523"" CommentCount=""0"" />
",45584340
45586944,"45586944      <row Id=""45586944"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45587010"" PostTypeId=""2"" ParentId=""45586944"" CreationDate=""2017-08-09T09:40:12.997"" Score=""6"" Body=""&lt;p&gt;You could just use&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if strings.HasSuffix(strings.ToLower(s), &quot;suffix&quot;) {&#xA;    // do something &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can also write your own wrapper function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func hasSuffix(s, suffix string, caseSensitive bool) bool {&#xA;    if caseSensitive {&#xA;        return strings.HasSuffix(s, suffix)&#xA;    }&#xA;    return strings.HasSuffix(strings.ToLower(s), suffix)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For file names or paths you can use (see answer of PeterSO):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if strings.ToLower(filepath.Ext(s)) == &quot;.fileending&quot; {&#xA;    // do something&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6220193"" LastEditorUserId=""6220193"" LastEditDate=""2017-08-09T11:09:24.117"" LastActivityDate=""2017-08-09T11:09:24.117"" CommentCount=""1"" />
",45587010
45590236,"45590236      <row Id=""45590236"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45590498"" PostTypeId=""2"" ParentId=""45590236"" CreationDate=""2017-08-09T12:17:39.680"" Score=""5"" Body=""&lt;p&gt;Are you looking for this setting?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/T5SG4.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/T5SG4.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Setting this to &lt;code&gt;go imports&lt;/code&gt; will do both:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;code formatting&lt;/li&gt;&#xA;&lt;li&gt;updating imports&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""6220193"" LastEditorUserId=""6220193"" LastEditDate=""2017-08-09T12:38:23.843"" LastActivityDate=""2017-08-09T12:38:23.843"" CommentCount=""3"" />
",45590498
45592817,"45592817      <row Id=""45592817"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45592870"" PostTypeId=""2"" ParentId=""45592817"" CreationDate=""2017-08-09T13:59:13.370"" Score=""7"" Body=""&lt;p&gt;The parameters that specify a length (e.g. &lt;code&gt;[SharedKeyBytes]byte&lt;/code&gt;) are arrays, not slices; therefor, you cannot pass a slice, hence the type mismatch error. You can either:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Change the parameter type to slice (&lt;code&gt;[]byte&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Copy the slice to an appropriately-sized array prior to calling the function, then pass the array to the function instead of the slice (&lt;a href=&quot;https://play.golang.org/p/KEr23NVvUo&quot; rel=&quot;noreferrer&quot;&gt;playground example&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""7426"" LastEditorUserId=""7426"" LastEditDate=""2017-08-09T14:09:59.413"" LastActivityDate=""2017-08-09T14:09:59.413"" CommentCount=""0"" />
",45592870
45585013,"45585013      <row Id=""45585013"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45593476"" PostTypeId=""2"" ParentId=""45585013"" CreationDate=""2017-08-09T14:25:48.813"" Score=""1"" Body=""&lt;p&gt;User Magik6k answered my question in &lt;a href=&quot;https://discuss.ipfs.io/t/error-command-not-found-when-im-using-go-ipfs-api/916&quot; rel=&quot;nofollow noreferrer&quot;&gt;another forum&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;You can't use the public IPFS gateway to add content. For this you&#xA;  need locally running daemon and pass it's API endpoint to NewShell&#xA;  (localhost:5001 by default).&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Public gateways(ipfs.io, localhost:8080) only support a limited API&#xA;  subset, see&#xA;  &lt;a href=&quot;https://github.com/ipfs/go-ipfs/blob/master/core/commands/root.go#L1412&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/ipfs/go-ipfs/blob/master/core/commands/root.go#L1412&lt;/a&gt;&#xA;  for what is available&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""3440266"" LastActivityDate=""2017-08-09T14:25:48.813"" CommentCount=""0"" />
",45593476
45594286,"45594286      <row Id=""45594286"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45594384"" PostTypeId=""2"" ParentId=""45594286"" CreationDate=""2017-08-09T15:06:55.517"" Score=""6"" Body=""&lt;p&gt;If you use the &lt;a href=&quot;https://www.gnu.org/software/gdb/&quot; rel=&quot;noreferrer&quot;&gt;gdb&lt;/a&gt; debugger to debug your program, loading that script improves its features for working with Go programs, such as being able to look at the values inside of maps and slices (instead of seeing them as opaque pointers) and being able to list and inspect goroutines (instead of native threads). gdb uses Python for extensions.&lt;/p&gt;&#xA;"" OwnerUserId=""152948"" LastActivityDate=""2017-08-09T15:06:55.517"" CommentCount=""3"" />
",45594384
45567710,"45567710      <row Id=""45567710"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45597204"" PostTypeId=""2"" ParentId=""45567710"" CreationDate=""2017-08-09T17:33:49.927"" Score=""0"" Body=""&lt;p&gt;When we look up &lt;a href=&quot;https://github.com/golang/exp/blob/master/shiny/widget/widget.go#L56-L58&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; we see that &lt;code&gt;widget.RunWindow( ... )&lt;/code&gt; doesn't handle such external requests from the caller.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A workaraound could be to implement an analogous function &lt;code&gt;MyRunWindow( ... )&lt;/code&gt; and assign the &lt;code&gt;Window&lt;/code&gt; to an global Interface. Like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func MyRunWindow(s screen.Screen, root node.Node, opts *RunWindowOptions) (err error) {&#xA;    var nwo *screen.NewWindowOptions&#xA;&#xA;    // ... assign window options ...&#xA;&#xA;    if MyWindow, err = s.NewWindow(nwo); err != nil {&#xA;        return err&#xA;    }&#xA;&#xA;    // event loop, processing 'lifecycle.Event', 'input.Event', etc.&#xA;    // and you can process own 'Events' in a type switch&#xA;    for {&#xA;        e := MyWindow.NextEvent()&#xA;&#xA;        if e = gef.Filter(e); e == nil {&#xA;            continue&#xA;        }&#xA;&#xA;        switch e := e.(type) {&#xA;        case MyEvent:&#xA;        // ... call on 'root' here&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;On the caller side you can use your global &lt;code&gt;Interface&lt;/code&gt; like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;MyWindow.Send(paint.Event{}) // for a needed call to root.Paint()&#xA;MyWindow.Send(MyEvent{})     // for your own event to be processed&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4831421"" LastActivityDate=""2017-08-09T17:33:49.927"" CommentCount=""0"" />
",45597204
24770235,"24770235      <row Id=""24770235"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45599165"" PostTypeId=""2"" ParentId=""24770235"" CreationDate=""2017-08-09T19:30:14.170"" Score=""1"" Body=""&lt;p&gt;I developed a library which can help you in this regard: &lt;a href=&quot;https://github.com/liip/sheriff&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;Sheriff&quot;&gt;Sheriff&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can annotate your struct fields with special tags and call Sheriff to transform the given struct into a subset of it. After that you can call &lt;code&gt;json.Marshal()&lt;/code&gt; or whatever else you want to marshal into.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your example would become as simple as:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;lang-golang prettyprint-override&quot;&gt;&lt;code&gt;type Community struct {&#xA;    Name          string      `json:&quot;name&quot; groups:&quot;trending,detail&quot;`&#xA;    Description   string      `json:&quot;description&quot; groups:&quot;trending,detail&quot;`&#xA;    Sources       []Source    `json:&quot;sources&quot; groups:&quot;detail&quot;`&#xA;    Popularity    int         `json:&quot;popularity&quot; groups:&quot;trending,detail&quot;`&#xA;    FavoriteCount int         `json:&quot;favorite_count&quot; groups:&quot;trending,detail&quot;`&#xA;    Moderators    []string    `json:&quot;moderators&quot; groups:&quot;detail&quot;`&#xA;    Children      []Community `json:&quot;children&quot; groups:&quot;detail&quot;`&#xA;    Tracks        []Track     `json:&quot;tracks&quot; groups:&quot;detail&quot;`&#xA;}&#xA;&#xA;communities := []Community{&#xA;    // communities&#xA;}&#xA;&#xA;o := sheriff.Options{&#xA;    Groups: []string{&quot;trending&quot;},&#xA;}&#xA;&#xA;d, err := sheriff.Marshal(&amp;amp;o, communities)&#xA;if err != nil {&#xA;    panic(err)&#xA;}&#xA;&#xA;out, _ := json.Marshal(d)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""315242"" LastActivityDate=""2017-08-09T19:30:14.170"" CommentCount=""0"" />
",45599165
45592701,"45592701      <row Id=""45592701"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45599437"" PostTypeId=""2"" ParentId=""45592701"" CreationDate=""2017-08-09T19:47:15.213"" Score=""1"" Body=""&lt;p&gt;In go a framework cannot really limit you. Let's take the example of the martini framework.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here the first sample from their github page:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;github.com/go-martini/martini&quot;&#xA;&#xA;func main() {&#xA;    m := martini.Classic()&#xA;    m.Get(&quot;/&quot;, func() string {&#xA;        return &quot;Hello world!&quot;&#xA;    })&#xA;    m.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Before executing &lt;code&gt;m.Run()&lt;/code&gt; you can start whatever cli job you want. All you have to do is start it in another goroutine:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;github.com/go-martini/martini&quot;&#xA;&#xA;func main() {&#xA;    // start some function doing background stuff&#xA;    go someCliFunc()        &#xA;&#xA;    // initiate a struct and start a job in the background&#xA;    go func(){&#xA;        cli := MyPackage.SomeCli{}&#xA;        cli.Start()&#xA;    }()&#xA;&#xA;    m := martini.Classic()&#xA;    m.Get(&quot;/&quot;, func() string {&#xA;        return &quot;Hello world!&quot;&#xA;    })&#xA;    m.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The function actually doing the background stuff could have a structure like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func someCliFunc() {&#xA;    // do some initial stuff&#xA;&#xA;    defer func() {&#xA;        // do some stuff on exit&#xA;    }()&#xA;&#xA;    // start the loop&#xA;    for {&#xA;        // do stuff regularly&#xA;&#xA;        // make sure the loop does not use the entire cpu&#xA;        time.Sleep(5*time.Second)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-09T19:47:15.213"" CommentCount=""2"" />
",45599437
45599637,"45599637      <row Id=""45599637"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45599707"" PostTypeId=""2"" ParentId=""45599637"" CreationDate=""2017-08-09T20:04:42.343"" Score=""3"" Body=""&lt;p&gt;Use escape sequences preceded by &lt;code&gt;\&lt;/code&gt; to show literal special characters in a formatted string &lt;code&gt;\\&lt;/code&gt; for &lt;code&gt;\&lt;/code&gt; and &lt;code&gt;\&quot;&lt;/code&gt; for &lt;code&gt;&quot;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    x := &quot;hello&quot;&#xA;    q := fmt.Sprintf(&quot;\\\&quot;%s\&quot;\\&quot;, x)&#xA;    fmt.Println(q)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2790047"" LastEditorUserId=""2790047"" LastEditDate=""2017-08-09T20:06:24.433"" LastActivityDate=""2017-08-09T20:06:24.433"" CommentCount=""1"" />
",45599707
45596651,"45596651      <row Id=""45596651"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45600231"" PostTypeId=""2"" ParentId=""45596651"" CreationDate=""2017-08-09T20:37:34.440"" Score=""0"" Body=""&lt;p&gt;This is considered the cornerstone (or more of a limitation) of Go's type system. &lt;code&gt;struct{}&lt;/code&gt; is an unnamed type that is different from &lt;code&gt;struct{ field1 int }&lt;/code&gt; and of course is not the same as &lt;code&gt;OrderRevenue{}&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Go emphasizes abstraction through interfaces, and perhaps you should try that. Here is the first take:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  type OrderRevenue interface {&#xA;          MarshalMyself() ([]byte, error)&#xA;  }&#xA;&#xA;  type Anonymous struct {}&#xA;  func (a Anonymous) MarshalMyself() ([]byte, error) {&#xA;          // implementation's up to you&#xA;          return []byte{}, nil&#xA;  }&#xA;&#xA;  // the function signature&#xA;  generateResponse(rows *sqlx.Rows, structSlice []OrderRevenue, structBody Body) ([]Body, error) {&#xA;          // ...&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In this case you can also use empty interface &lt;code&gt;interface{}&lt;/code&gt;, which all types implement, but you'll have to recursively go through the structure to do manual type assertion. The best approach in Go is to know the shape of your data in advance, at least partially.&lt;/p&gt;&#xA;"" OwnerUserId=""1965774"" LastActivityDate=""2017-08-09T20:37:34.440"" CommentCount=""0"" />
",45600231
45601338,"45601338      <row Id=""45601338"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45601525"" PostTypeId=""2"" ParentId=""45601338"" CreationDate=""2017-08-09T22:22:08.407"" Score=""1"" Body=""&lt;p&gt;If you want to use a struct receiver, remove the * from before Group in the definition of your function on line 8. As a convenience they do work the other way round (defined on struct works on a pointer receiver). See effective go for an explanation. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/doc/effective_go.html#pointers_vs_values&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/doc/effective_go.html#pointers_vs_values&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Modified version: &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/ww6IYVPtIE&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/ww6IYVPtIE&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1601137"" LastActivityDate=""2017-08-09T22:22:08.407"" CommentCount=""0"" />
",45601525
45601402,"45601402      <row Id=""45601402"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45601936"" PostTypeId=""2"" ParentId=""45601402"" CreationDate=""2017-08-09T23:05:57.127"" Score=""2"" Body=""&lt;p&gt;To control whether timing information is output in instructions.go, yes you could add a boolean variable to the file instructions.go (perhaps something like):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var Debug bool&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and wrap the logging in a check on it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if Debug {&#xA;   // log ellapsed execution time&#xA;fmt.Println(&quot;execute opAdd consume = &quot;,(time.Now().UnixNano() - startTime))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and then set it somewhere (for example in your api pkg) with &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import &quot;.../core/vm&quot;&#xA;vm.Debug = true &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;this is not goroutine safe so would have to be set once on startup depending on conditions or protected with a mutex. It's also pretty horrible but as a quick hack to see it work you could do this (sorry not familiar with this particular code base) . &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm not clear on how opAdd is triggered by your other code if it was directly called you could of course just add a parameter to the function to control the output from the calling site, this would be preferable. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Normally this sort of thing you'd either:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Pass in whether to debug or not to the function call opAdd &lt;/li&gt;&#xA;&lt;li&gt;Set a global debugging level on startup once to control whether logging takes place or at what level globally and this would affect all such tracing. &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;They do have a log package, I don't know why it's not used here:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/ethereum/go-ethereum/blob/master/log/logger.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/ethereum/go-ethereum/blob/master/log/logger.go&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;EDIT &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would just always allocate startTime , but if you wish to avoid that, you need to declare it at the top level, compare this to your code above:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// wrap the logging in a check&#xA;var startTime time.Time&#xA;if OpcodeTrigger {&#xA;    // begin execution time tracking&#xA;    startTime = time.Now().UnixNano();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;NB if this is concurrent at all you should be adding a mutex to the vm pkg and only mutating OpCodeTrigger with a function which wraps the access with a mu.Lock - at that point you might start to ask yourself if there are better ways to do this :)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Better if you get stuck again to ask on a forum like forum.golangbridge.org as stackoverflow is not designed for extensive back and forth. &lt;/p&gt;&#xA;"" OwnerUserId=""1601137"" LastEditorUserId=""1601137"" LastEditDate=""2017-08-10T20:20:45.663"" LastActivityDate=""2017-08-10T20:20:45.663"" CommentCount=""10"" />
",45601936
45607483,"45607483      <row Id=""45607483"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45607559"" PostTypeId=""2"" ParentId=""45607483"" CreationDate=""2017-08-10T07:49:11.843"" Score=""3"" Body=""&lt;p&gt;It's due to the scope of your variable declarations. You are shadowing the variable declaration inside the switch statement.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Simply change &lt;code&gt;car:=&lt;/code&gt; to &lt;code&gt;car=&lt;/code&gt; and you will be fine. You might also want to change &lt;code&gt;car:=&amp;amp;Car{}&lt;/code&gt; to &lt;code&gt;var car *Car&lt;/code&gt;. This will make your intent clearer and avoid an unnecessary allocation (as you are creating a new object which is never used).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Read about &lt;a href=&quot;http://www.tapirgames.com/blog/golang-block-and-scope&quot; rel=&quot;nofollow noreferrer&quot;&gt;blocks &amp;amp; scopes&lt;/a&gt; and see the &lt;a href=&quot;https://golang.org/ref/spec#Declarations_and_scope&quot; rel=&quot;nofollow noreferrer&quot;&gt;scoping&lt;/a&gt; section of the Go language reference.&lt;/p&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-08-10T07:49:11.843"" CommentCount=""2"" />
",45607559
45610700,"45610700      <row Id=""45610700"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45610758"" PostTypeId=""2"" ParentId=""45610700"" CreationDate=""2017-08-10T10:10:17.987"" Score=""1"" Body=""&lt;p&gt;Only the fields that starts with an upper case letter are public visible.&lt;br&gt;&#xA;To solve your problem you can create getter and setter for each field or rename your fields' struct as follow:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type OperatInfo struct {&#xA;    EventId string&#xA;    HallId string&#xA;    UserId string&#xA;    Operating string&#xA;    OperatingID string&#xA;    Ip string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2606098"" LastActivityDate=""2017-08-10T10:10:17.987"" CommentCount=""0"" />
",45610758
45611344,"45611344      <row Id=""45611344"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45612142"" PostTypeId=""2"" ParentId=""45611344"" CreationDate=""2017-08-10T11:13:33.107"" Score=""3"" Body=""&lt;p&gt;Using only template code you can't. You need some kind of support from the executing Go code to do that. By design philosophy, templates should not contain complex logic. You may argue whether this is complex, but the template syntax has no support for this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Simplest solution would be to add a &lt;code&gt;Version()&lt;/code&gt; method to the &lt;code&gt;templateData&lt;/code&gt; struct, which would simply return the version for a given environment and service:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (t *templateData) Version(environment, service string) string {&#xA;    return t.Versions[versionKey{&#xA;        Environment: environment,&#xA;        Service:     service,&#xA;    }]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using this from the template:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{{range $service := $services -}}&#xA;  {{range $environment := $environments}}&#xA;    {{$environment}} - {{$service}} version: {{$.Version $environment $service}}&#xA;  {{end}}&#xA;{{end}}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Testing it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t := template.Must(template.New(&quot;&quot;).Parse(templ))&#xA;td := &amp;amp;templateData{&#xA;    Environments: []string{&quot;EnvA&quot;, &quot;EnvB&quot;},&#xA;    Services:     []string{&quot;ServA&quot;, &quot;ServB&quot;},&#xA;    Versions: map[versionKey]string{&#xA;        {&quot;EnvA&quot;, &quot;ServA&quot;}: &quot;1.0.0&quot;,&#xA;        {&quot;EnvA&quot;, &quot;ServB&quot;}: &quot;1.0.1&quot;,&#xA;        {&quot;EnvB&quot;, &quot;ServA&quot;}: &quot;1.0.2&quot;,&#xA;    },&#xA;}&#xA;if err := t.Execute(os.Stdout, td); err != nil {&#xA;    panic(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/7ytztACizl&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;EnvA - ServA version: 1.0.0&#xA;&#xA;EnvB - ServA version: 1.0.2&#xA;&#xA;&#xA;EnvA - ServB version: 1.0.1&#xA;&#xA;EnvB - ServB version: &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Alternatives&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Instead of the &lt;code&gt;templateData.Version()&lt;/code&gt; method you could just as easily register a function which could create and return a value of type &lt;code&gt;versionKey&lt;/code&gt; from a given environment and service. See &lt;a href=&quot;https://golang.org/pkg/html/template/#Template.Funcs&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Template.Funcs()&lt;/code&gt;&lt;/a&gt; for details. This would be more complicated though, but more flexible as this could be reused elsewhere. See an example of this here: &lt;a href=&quot;https://stackoverflow.com/questions/35550326/golang-templates-and-passing-funcs-to-template/35550730#35550730&quot;&gt;Golang templates (and passing funcs to template)&lt;/a&gt;. A slight variation of this would be to pass a function value as any other template data instead of registering it as a named function, which can be called.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another alternative would be to &quot;transform&quot; your &lt;code&gt;Versions&lt;/code&gt; field into a map of maps, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Versions map[string]map[string]string&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Which first could be indexed by environment, then by service, which in the template you can achieve by 2 &lt;code&gt;{{index}}&lt;/code&gt; actions. You would have to check if the first indexing yields any results though.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-08-10T19:56:26.730"" LastActivityDate=""2017-08-10T19:56:26.730"" CommentCount=""3"" />
",45612142
45614430,"45614430      <row Id=""45614430"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45614530"" PostTypeId=""2"" ParentId=""45614430"" CreationDate=""2017-08-10T13:04:52.237"" Score=""3"" Body=""&lt;p&gt;You are declaring this as a global variable in your package:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var product_out []ProductOut&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That way, the slice is just created once, and you are sharing it between requests.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to declare a new slice for each request, you should move that line inside your &lt;code&gt;GetProductInfo&lt;/code&gt; function.&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-08-10T13:04:52.237"" CommentCount=""1"" />
",45614530
45616552,"45616552      <row Id=""45616552"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45616587"" PostTypeId=""2"" ParentId=""45616552"" CreationDate=""2017-08-10T14:31:27.083"" Score=""5"" Body=""&lt;p&gt;The &lt;code&gt;go/format&lt;/code&gt; package makes a function available to format arbitrary text:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/go/format/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/go/format/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Should be as simple as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;content, err := format.Source(content)&#xA;// check error&#xA;file.Write(content)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""121660"" LastEditorUserId=""121660"" LastEditDate=""2017-08-10T14:51:30.363"" LastActivityDate=""2017-08-10T14:51:30.363"" CommentCount=""0"" />
",45616587
45617758,"45617758      <row Id=""45617758"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45617791"" PostTypeId=""2"" ParentId=""45617758"" CreationDate=""2017-08-10T15:25:14.983"" Score=""6"" Body=""&lt;p&gt;The whole point of &lt;code&gt;defer&lt;/code&gt; is that it does not execute until the function returns, so the appropriate place to put it would be immediately after the resource you want to close is opened. However, since you're creating the resource inside the loop, you should not use defer at all - otherwise, you're not going to close any of the resources created inside the loop until the function exits, so they'll pile up until then. Instead, you should close them at the end of each loop iteration, &lt;em&gt;without&lt;/em&gt; &lt;code&gt;defer&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for rows.Next() {&#xA;&#xA;   fields, err := db.Query(.....)&#xA;   if err != nil {&#xA;      // ...&#xA;   }&#xA;&#xA;   // do something with `fields`&#xA;&#xA;   fields.Close()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-10T15:25:14.983"" CommentCount=""2"" />
",45617791
45618300,"45618300      <row Id=""45618300"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45619883"" PostTypeId=""2"" ParentId=""45618300"" CreationDate=""2017-08-10T17:18:51.467"" Score=""1"" Body=""&lt;p&gt;If you're using the same version of the same Go-based tool to compile the proto, you should get the same output. I would double-check that both are identical versions.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-10T17:18:51.467"" CommentCount=""0"" />
",45619883
45622348,"45622348      <row Id=""45622348"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45622721"" PostTypeId=""2"" ParentId=""45622348"" CreationDate=""2017-08-10T20:12:13.120"" Score=""0"" Body=""&lt;p&gt;As you have discovered, there are no macros and are unlikely to be. There may be generics at some point which could be helpful. In the meantime, there are a few options for code generation. You can use go generate for this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// add a magic comment to your go file &#xA;// which needs some extra generated code&#xA;// this calls a tool called stringer to generate, &#xA;// but it could be yacc or some homemade tool. &#xA;//go:generate stringer -type=Pill&#xA;&#xA;// call go generate to generate the methods:&#xA;go generate&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://blog.golang.org/generate&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://blog.golang.org/generate&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But it really requires you to have a tool to generate the code you want like stringer. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Or you could just use text/template, build your own template, and run a simple tool that substitutes values into this template (from a config file, or perhaps arguments on the command line). &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mytool generate -type=thing -field=type...&#xA;... mytool loads a tmplate file, &#xA;runs it through text/template and outputs it. &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is pretty straightforward and you could easily build a custom system with it, though you'll probably want to generate once, then use the code. Here are some examples of this approach:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://clipperhouse.github.io/gen/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://clipperhouse.github.io/gen/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/fragmenta/fragmenta&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/fragmenta/fragmenta&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Finally, you can use tools like grpc which generate structs in multiple languages in order to ease cross-language communication, which sounds like exactly the use case you are looking for:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://grpc.io/docs/quickstart/go.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://grpc.io/docs/quickstart/go.html&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'd look at something like grpc first. &lt;/p&gt;&#xA;"" OwnerUserId=""1601137"" LastActivityDate=""2017-08-10T20:12:13.120"" CommentCount=""2"" />
",45622721
45621902,"45621902      <row Id=""45621902"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45622734"" PostTypeId=""2"" ParentId=""45621902"" CreationDate=""2017-08-10T20:12:49.660"" Score=""1"" Body=""&lt;p&gt;What you are probably experiencing is the result of this code or something similar (your code does not compile):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;net/http&quot;&#xA;)&#xA;&#xA;var Content struct {&#xA;    Data map[interface{}]interface{}&#xA;}&#xA;&#xA;func main() {&#xA;    mux := http.NewServeMux()&#xA;&#xA;    mux.Handle(&quot;/favicon.ico&quot;, http.NotFoundHandler())&#xA;    mux.HandleFunc(&quot;/&quot;, Index)&#xA;    mux.HandleFunc(&quot;/test&quot;, Testhandler)&#xA;    http.ListenAndServe(&quot;:8080&quot;, mux)&#xA;}&#xA;&#xA;func Index(w http.ResponseWriter, r *http.Request) {&#xA;    if r.URL.Path != &quot;/&quot; {&#xA;        fmt.Println(&quot;404&quot;)&#xA;        return&#xA;    }&#xA;    fmt.Println(&quot;index content &quot;, Content)&#xA;}&#xA;&#xA;func Testhandler(w http.ResponseWriter, r *http.Request) {&#xA;    data := make(map[interface{}]interface{})&#xA;    data[&quot;data1&quot;] = &quot;data 1 content&quot;&#xA;    data[&quot;data2&quot;] = &quot;data 2 content&quot;&#xA;    Content.Data = data&#xA;    fmt.Println(&quot;test content &quot;, Content)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Solution&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;With this you are creating a global variable &lt;code&gt;Content&lt;/code&gt; that keeps its state across calls to the webserver. What you probably intended is this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;net/http&quot;&#xA;)&#xA;&#xA;type Content struct {&#xA;    Data map[interface{}]interface{}&#xA;}&#xA;&#xA;func main() {&#xA;    mux := http.NewServeMux()&#xA;&#xA;    mux.Handle(&quot;/favicon.ico&quot;, http.NotFoundHandler())&#xA;    mux.HandleFunc(&quot;/&quot;, Index)&#xA;    mux.HandleFunc(&quot;/test&quot;, Testhandler)&#xA;    http.ListenAndServe(&quot;:8080&quot;, mux)&#xA;}&#xA;&#xA;func Index(w http.ResponseWriter, r *http.Request) {&#xA;    var c Content&#xA;    if r.URL.Path != &quot;/&quot; {&#xA;        fmt.Println(&quot;404&quot;)&#xA;        return&#xA;    }&#xA;    fmt.Println(&quot;index content &quot;, c)&#xA;}&#xA;&#xA;func Testhandler(w http.ResponseWriter, r *http.Request) {&#xA;    var c Content&#xA;    data := make(map[interface{}]interface{})&#xA;    data[&quot;data1&quot;] = &quot;data 1 content&quot;&#xA;    data[&quot;data2&quot;] = &quot;data 2 content&quot;&#xA;    c.Data = data&#xA;    fmt.Println(&quot;test content &quot;, c)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Changes made&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;make &lt;code&gt;Content&lt;/code&gt; a type as you already did in your sample (that way it is not a global variable any more but defining a type we can reuse)&lt;/li&gt;&#xA;&lt;li&gt;declare &lt;code&gt;Content&lt;/code&gt; in each call where it is needed (not globally as we do not want it to keep its content across server calls)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h3&gt;Essence&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;You cannot use a type without declaring a variable from it first. That is why your sample did not build. If you try go will complain that &lt;code&gt;Content&lt;/code&gt; is not an expression.&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-10T20:12:49.660"" CommentCount=""0"" />
",45622734
38724556,"38724556      <row Id=""38724556"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45625408"" PostTypeId=""2"" ParentId=""38724556"" CreationDate=""2017-08-11T00:52:55.050"" Score=""0"" Body=""&lt;p&gt;I'm find the package,Generate .proto files from Go source code:&#xA;&lt;a href=&quot;https://github.com/src-d/proteus&quot; rel=&quot;nofollow noreferrer&quot;&gt;proteus (https://github.com/src-d/proteus)&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Proteus /proʊtiəs/ is a tool to generate protocol buffers version 3 compatible .proto files from your Go structs, types and functions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The motivation behind this library is to use Go as a source of truth for your models instead of the other way around and then generating Go code from a .proto file, which does not generate idiomatic code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Generate protobuf messages&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  //proteus:generate&#xA;  type User struct {&#xA;        Model&#xA;        Username string&#xA;  }&#xA;&#xA;  type Model struct {&#xA;        ID int&#xA;        CreatedAt time.Time&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This example will generate the following protobuf message.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  message User {&#xA;          int32 id = 1;&#xA;          google.protobuf.Timestamp created_at = 2;&#xA;          string username = 3;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; go get -v gopkg.in/src-d/proteus.v1/...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are two requirements for the full process.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; protoc binary installed on your path&#xA; go get -u github.com/gogo/protobuf/...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can generate the proto files, the marshal/unmarshal and the rest of protobuf stuff for your Go types, the RPC client and server interface and the RPC server implementation for your packages. That is, the whole process.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; proteus -f /path/to/protos/folder \&#xA;    -p my/go/package \&#xA;    -p my/other/go/package&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can generate proto files only using the command line tool provided with proteus.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; proteus proto -f /path/to/output/folder \&#xA;    -p my/go/package \&#xA;    -p my/other/go/package&#xA;    --verbose&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can also only generate gRPC server implementations for your packages.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  proteus rpc -p my/go/package \&#xA;    -p my/other/go/package&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;NOTE: Of course, if the defaults don't suit your needs, until proteus is extensible via plugins, you can hack together your own generator command using the provided components. Check out the godoc documentation of the package.&lt;/p&gt;&#xA;"" OwnerUserId=""4152293"" LastEditorUserId=""4152293"" LastEditDate=""2017-08-11T03:41:23.087"" LastActivityDate=""2017-08-11T03:41:23.087"" CommentCount=""3"" />
",45625408
45626184,"45626184      <row Id=""45626184"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45626399"" PostTypeId=""2"" ParentId=""45626184"" CreationDate=""2017-08-11T03:16:09.583"" Score=""1"" Body=""&lt;p&gt;For your JSON structure following might suit well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Play Link: &lt;a href=&quot;https://play.golang.org/p/ygXsdYALCb&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/ygXsdYALCb&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Create a &lt;code&gt;struct&lt;/code&gt; called &lt;code&gt;Info&lt;/code&gt; or name you prefer also customize your field names as you like.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Info struct {&#xA;    EntityID               string `json:&quot;entity_id&quot;`&#xA;    WebsiteID              string `json:&quot;website_id&quot;`&#xA;    Email                  string `json:&quot;email&quot;`&#xA;    GroupID                string `json:&quot;group_id&quot;`&#xA;    CreatedAt              string `json:&quot;created_at&quot;`&#xA;    DisableAutoGroupChange string `json:&quot;disable_auto_group_change&quot;`&#xA;    Firstname              string `json:&quot;firstname&quot;`&#xA;    Lastname               string `json:&quot;lastname&quot;`&#xA;    CreatedIn              string `json:&quot;created_in&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And create &lt;code&gt;map&lt;/code&gt; of &lt;code&gt;Info&lt;/code&gt; struct and the unmarshal it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var result map[string]Info&#xA;if err := json.Unmarshal(jsonBytes, &amp;amp;result); err != nil {&#xA;    fmt.Println(err)&#xA;}&#xA;fmt.Printf(&quot;%+v&quot;, result)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As asked in the comment, adding &lt;code&gt;for&lt;/code&gt; example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fmt.Println(&quot;Accessing unmarshal values:&quot;)&#xA;for key, info := range result {&#xA;    fmt.Println(&quot;Key:&quot;, key)&#xA;    fmt.Printf(&quot;Complete Object: %+v\n&quot;, info)&#xA;    fmt.Println(&quot;Individual value, typical object field access:&quot;)&#xA;    fmt.Println(&quot;EntityID:&quot;, info.EntityID)&#xA;    fmt.Println(&quot;Email:&quot;, info.Email)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1343356"" LastEditorUserId=""1343356"" LastEditDate=""2017-08-11T04:56:43.330"" LastActivityDate=""2017-08-11T04:56:43.330"" CommentCount=""1"" />
",45626399
45628094,"45628094      <row Id=""45628094"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45628177"" PostTypeId=""2"" ParentId=""45628094"" CreationDate=""2017-08-11T06:14:36.543"" Score=""3"" Body=""&lt;p&gt;Just change the delimiters on the Go side to something else before parsing (for example you could use [[ ]] ).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See the docs:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/text/template/#Template.Delims&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/text/template/#Template.Delims&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1601137"" LastActivityDate=""2017-08-11T06:14:36.543"" CommentCount=""2"" />
",45628177
45628831,"45628831      <row Id=""45628831"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45629091"" PostTypeId=""2"" ParentId=""45628831"" CreationDate=""2017-08-11T07:13:21.823"" Score=""1"" Body=""&lt;p&gt;Create a request:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;req, err := http.NewRequest(&quot;GET&quot;, path, nil)&#xA;if err != nil {&#xA;     // handle error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Set the headers:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;req.Header.Add(&quot;Accept&quot;, &quot;application/json&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Run the request using client as configured in the question:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;resp, err := httpClient.Do(req)&#xA;if err != nil {&#xA;     // handle error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Example that worked for me: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;io/ioutil&quot;&#xA;    &quot;log&quot;&#xA;    &quot;net/http&quot;&#xA;&#xA;    &quot;github.com/dghubble/oauth1&quot;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;    config := oauth1.NewConfig(&quot;consumer key&quot;, &quot;consumer secret&quot;)&#xA;    token := oauth1.NewToken(&quot;token key&quot;, &quot;token secret&quot;)&#xA;&#xA;    httpClient := config.Client(oauth1.NoContext, token)&#xA;&#xA;    path := &quot;https://www.example.com/api/rest/customers?limit=2&amp;amp;order=created_at&amp;amp;dir=DESC&quot;&#xA;    req, err := http.NewRequest(&quot;GET&quot;, path, nil)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    req.Header.Add(&quot;Accept&quot;, &quot;application/json&quot;)&#xA;&#xA;    resp, err := httpClient.Do(req)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    defer resp.Body.Close()&#xA;    body, _ := ioutil.ReadAll(resp.Body)&#xA;    fmt.Printf(&quot;Raw Resonse Body:\n%v\n&quot;, string(body))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Raw Resonse Body:&#xA;&amp;lt;!doctype html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;      &amp;lt;title&amp;gt;Example Domain&amp;lt;/title&amp;gt;&#xA;      ...&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;&amp;lt;div&amp;gt;&#xA;    &amp;lt;h1&amp;gt;Example Domain&amp;lt;/h1&amp;gt;&#xA;    &amp;lt;p&amp;gt;This domain is established to be used for illustrative examples in documents. You may use this&#xA;    domain in examples without prior coordination or asking for permission.&amp;lt;/p&amp;gt;&#xA;    &amp;lt;p&amp;gt;&amp;lt;a href=&quot;http://www.iana.org/domains/example&quot;&amp;gt;More information...&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;      ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""3310285"" LastEditorUserId=""3310285"" LastEditDate=""2017-08-11T10:25:57.627"" LastActivityDate=""2017-08-11T10:25:57.627"" CommentCount=""6"" />
",45629091
40353070,"40353070      <row Id=""40353070"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45633604"" PostTypeId=""2"" ParentId=""40353070"" CreationDate=""2017-08-11T11:01:33.790"" Score=""0"" Body=""&lt;p&gt;So I ended up using GPG and my service has one unique private key and I share the public one with my users.&lt;/p&gt;&#xA;"" OwnerUserId=""1067688"" LastActivityDate=""2017-08-11T11:01:33.790"" CommentCount=""0"" />
",45633604
45635839,"45635839      <row Id=""45635839"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45636408"" PostTypeId=""2"" ParentId=""45635839"" CreationDate=""2017-08-11T13:27:48.767"" Score=""1"" Body=""&lt;p&gt;As mentioned in the comments, embedding is not inheritance but composition, so you'll probably have to either:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Re-think your design to use the tools Go has available&lt;/li&gt;&#xA;&lt;li&gt;Resort to extensive hacking to get the results you want&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;In the particular case you are showing (trying to get &lt;code&gt;GetJSON()&lt;/code&gt; to include also the fields of the outer struct, here is a possible way of getting that to work that does not require many changes (just storing a pointer to the outer struct in Base when creating the struct):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type Base struct {&#xA;    Type  string      `json:&quot;$type&quot;`&#xA;    selfP interface{} // this will store a pointer to the actual sub struct&#xA;}&#xA;&#xA;func (b *Base) SetSelfP(p interface{}) {&#xA;    b.selfP = p&#xA;}&#xA;&#xA;func (b *Base) GetJSON() ([]byte, error) {&#xA;    return json.Marshal(b.selfP)&#xA;}&#xA;&#xA;func (b *Base) SetType(typeStr string) {&#xA;    b.Type = typeStr&#xA;}&#xA;&#xA;type Auth struct {&#xA;    Base&#xA;    Username string&#xA;    Password string&#xA;}&#xA;&#xA;func main() {&#xA;    a := &amp;amp;Auth{&#xA;        Username: &quot;Test&quot;,&#xA;        Password: &quot;test&quot;,&#xA;    }&#xA;    a.SetSelfP(a) // this line does the trick&#xA;    a.SetType(&quot;testtype&quot;)&#xA;    j, _ := a.GetJSON()&#xA;    fmt.Println(string(j))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Playground link: &lt;a href=&quot;https://play.golang.org/p/npuy6XMk_t&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/npuy6XMk_t&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-08-11T13:27:48.767"" CommentCount=""1"" />
",45636408
45634812,"45634812      <row Id=""45634812"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45636982"" PostTypeId=""2"" ParentId=""45634812"" CreationDate=""2017-08-11T13:55:03.890"" Score=""0"" Body=""&lt;p&gt;Assuming you already had a look at the &lt;a href=&quot;https://github.com/kubernetes/client-go/tree/master/examples/create-update-delete-deployment&quot; rel=&quot;nofollow noreferrer&quot;&gt;update example&lt;/a&gt;?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In any case, the &lt;code&gt;dp&lt;/code&gt; variable here contains all you need:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;dp, err := clientset.ExtensionsV1beta1Client.Deployments(&quot;default&quot;).Get(&quot;nginx-deployment&quot;, metav1.GetOptions{})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So &lt;code&gt;dp&lt;/code&gt; is of type &lt;code&gt;v1beta1.Deployment&lt;/code&gt; which contains a variable of type &lt;code&gt;metav1.ObjectMeta&lt;/code&gt; which has the &lt;code&gt;ResourceVersion&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""396567"" LastActivityDate=""2017-08-11T13:55:03.890"" CommentCount=""2"" />
",45636982
45638189,"45638189      <row Id=""45638189"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45638307"" PostTypeId=""2"" ParentId=""45638189"" CreationDate=""2017-08-11T15:02:54.400"" Score=""2"" Body=""&lt;p&gt;try this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type shape interface {&#xA;    area() int&#xA;}&#xA;&#xA;type traingle struct {&#xA;    height int&#xA;    base   int&#xA;}&#xA;&#xA;func (a traingle) area() int {&#xA;    return a.height * a.base / 2    &#xA;}&#xA;&#xA;func main() {&#xA;    var p1 shape = traingle{height: 3, base: 4}&#xA;    fmt.Println(p1.area())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;6&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and see this thread example on shape: &lt;a href=&quot;https://stackoverflow.com/a/38818437/8208215&quot;&gt;https://stackoverflow.com/a/38818437/8208215&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hope this helps.&lt;/p&gt;&#xA;"" OwnerUserId=""8208215"" LastEditorUserId=""8208215"" LastEditDate=""2017-08-11T15:09:39.503"" LastActivityDate=""2017-08-11T15:09:39.503"" CommentCount=""1"" />
",45638307
45638871,"45638871      <row Id=""45638871"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45639488"" PostTypeId=""2"" ParentId=""45638871"" CreationDate=""2017-08-11T16:10:00.190"" Score=""2"" Body=""&lt;p&gt;Google Cloud Storage does not currently support the ListObjectsV2 API.&lt;/p&gt;&#xA;"" OwnerUserId=""624900"" LastActivityDate=""2017-08-11T16:10:00.190"" CommentCount=""4"" />
",45639488
45630401,"45630401      <row Id=""45630401"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45639914"" PostTypeId=""2"" ParentId=""45630401"" CreationDate=""2017-08-11T16:36:06.673"" Score=""2"" Body=""&lt;p&gt;The problem is has to do with the 'data.' metadata envelope that Fabric injects into the document that is persisted into CouchDB state database.  From the chaincode author's perspective, there is no 'data' envelope, and as such the 'data' envelope should be excluded from any queries that are passed in.  The Fabric will inject the 'data' envelope, both upon save and upon query.  If you utilize the Fauxton UI for trial queries directly against CouchDB (without the benefit of the Fabric injection code), you will need to include the 'data' envelope.  Just remember to exclude the 'data' envelope when writing chaincode queries.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See the &lt;a href=&quot;https://github.com/hyperledger/fabric/blob/master/examples/chaincode/go/marbles02/marbles_chaincode.go#L37&quot; rel=&quot;nofollow noreferrer&quot;&gt;example queries&lt;/a&gt; that correspond to the marbles02 example, note that there is no data envelope provided.&lt;/p&gt;&#xA;"" OwnerUserId=""8205919"" LastActivityDate=""2017-08-11T16:36:06.673"" CommentCount=""0"" />
",45639914
45640144,"45640144      <row Id=""45640144"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45640476"" PostTypeId=""2"" ParentId=""45640144"" CreationDate=""2017-08-11T17:11:29.163"" Score=""5"" Body=""&lt;p&gt;@RayfenWindspear has the easiest to use and read answer, but is correct about the performance hit. If performance is more important than maintainability, you can do the same thing using iterative division to get the most-significant base-10 digit:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var i int&#xA;for i = n; i &amp;gt;= 10; i = i / 10 {}&#xA;// i == most significant digit&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that you have to declare &lt;code&gt;i&lt;/code&gt; outside the loop to be able to use it after the loop finds the most-significant digit. I'd also benchmark both with your own data set to see what the real performance impact is in your particular situation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/ozFw_ll6Y3&quot; rel=&quot;nofollow noreferrer&quot;&gt;Full playground example, courtesy of Rayfen&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastEditorUserId=""7426"" LastEditDate=""2017-08-11T17:23:16.717"" LastActivityDate=""2017-08-11T17:23:16.717"" CommentCount=""5"" />
",45640476
45645900,"45645900      <row Id=""45645900"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45645923"" PostTypeId=""2"" ParentId=""45645900"" CreationDate=""2017-08-12T02:22:42.670"" Score=""4"" Body=""&lt;p&gt;It looks like you are trying to use string formatters, which aren't supported by &lt;code&gt;fmt.Println&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;According to the &lt;a href=&quot;https://golang.org/pkg/fmt/&quot; rel=&quot;nofollow noreferrer&quot;&gt;godocs&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Printf formats according to a format specifier &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;whereas&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Println formats using the default formats&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The following will give the output you are trying to get:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &quot;fmt&quot;&#xA;&#xA;func main() {&#xA;    kvs := map[string]string{&#xA;        &quot;a&quot;: &quot;apple&quot;,&#xA;        &quot;b&quot;: &quot;banana&quot;,&#xA;    }&#xA;    for k, v := range kvs {&#xA;        fmt.Printf(&quot;%s -&amp;gt; %s\n&quot;, k, v)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that maps in Go do not have a specific ordering so you may get any arbitrary key-value pair before another.&lt;/p&gt;&#xA;"" OwnerUserId=""2631732"" LastEditorUserId=""2631732"" LastEditDate=""2017-08-12T20:42:33.273"" LastActivityDate=""2017-08-12T20:42:33.273"" CommentCount=""0"" />
",45645923
45646198,"45646198      <row Id=""45646198"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45646340"" PostTypeId=""2"" ParentId=""45646198"" CreationDate=""2017-08-12T03:55:30.493"" Score=""4"" Body=""&lt;p&gt;Check out this link. &lt;a href=&quot;https://golang.org/doc/install?download=go1.8.3.windows-amd64.msi&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/doc/install?download=go1.8.3.windows-amd64.msi&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You will find all the information you need there. &lt;/p&gt;&#xA;"" OwnerUserId=""4548643"" LastActivityDate=""2017-08-12T03:55:30.493"" CommentCount=""0"" />
",45646340
45647958,"45647958      <row Id=""45647958"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45647970"" PostTypeId=""2"" ParentId=""45647958"" CreationDate=""2017-08-12T08:03:09.883"" Score=""4"" Body=""&lt;p&gt;When you use &lt;code&gt;:=&lt;/code&gt;, you declare new variables. An &lt;code&gt;s&lt;/code&gt; is created inside the loop unrelated to the &lt;code&gt;s&lt;/code&gt; outside it. Assign instead:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for len(s) != 0 {&#xA;    j := len(s) - 1&#xA;    &lt;b&gt;var top int&#xA;    top, s = s[j], s[:j]&lt;/b&gt;&#xA;    fmt.Printf(&quot;top = %+v\n&quot;, top)&#xA;    fmt.Printf(&quot;s = %+v\n&quot;, s)&#xA;    fmt.Printf(&quot;len(s) = %+v\n&quot;, len(s))&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""707111"" LastActivityDate=""2017-08-12T08:03:09.883"" CommentCount=""5"" CommunityOwnedDate=""2017-08-12T08:03:09.883"" />
",45647970
45648262,"45648262      <row Id=""45648262"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45648864"" PostTypeId=""2"" ParentId=""45648262"" CreationDate=""2017-08-12T09:49:55.647"" Score=""2"" Body=""&lt;p&gt;Use &lt;a href=&quot;https://www.postgresql.org/docs/9.1/static/sql-update.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;PostgreSQL's &lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/a&gt; and &lt;code&gt;db.Query/db.Select&lt;/code&gt; variants instead of &lt;code&gt;Exec&lt;/code&gt;, e.g. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//get the primary key of updated rows&#xA;db := s.getDB(tx)&#xA;&#xA;results := []int{}&#xA;err = db.Select(&amp;amp;results, &quot;UPDATE mytable SET var_name = 0 WHERE var_name = 1 RETURNING id&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To retrieve more than one columns, just list the column names after &lt;code&gt;RETURNING&lt;/code&gt;, e.g.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;rows, err := db.Queryx(&quot;UPDATE mytable SET var_name = 0 WHERE var_name = 1 RETURNING id,var_name,other_columns&quot;)&#xA;for rows.Next() {&#xA;    //do something with the result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-08-12T09:49:55.647"" CommentCount=""0"" />
",45648864
45651387,"45651387      <row Id=""45651387"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45651488"" PostTypeId=""2"" ParentId=""45651387"" CreationDate=""2017-08-12T14:43:33.310"" Score=""2"" Body=""&lt;p&gt;if you read the code of worker carefully, you will notice&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;w.WorkerPool &amp;lt;- w.JobChannel&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;each time a loop begin, the channel of worker itself has been put back&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I copy the whole function below:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (w Worker) Start() {&#xA;    go func() {&#xA;        for {&#xA;            // register the current worker into the worker queue.&#xA;            w.WorkerPool &amp;lt;- w.JobChannel&#xA;&#xA;            select {&#xA;            case job := &amp;lt;-w.JobChannel:&#xA;                // we have received a work request.&#xA;                if err := job.Payload.UploadToS3(); err != nil {&#xA;                    log.Errorf(&quot;Error uploading to S3: %s&quot;, err.Error())&#xA;                }&#xA;&#xA;            case &amp;lt;-w.quit:&#xA;                // we have received a signal to stop&#xA;                return&#xA;            }&#xA;        }&#xA;    }()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2791115"" LastActivityDate=""2017-08-12T14:43:33.310"" CommentCount=""2"" />
",45651488
45653222,"45653222      <row Id=""45653222"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45654290"" PostTypeId=""2"" ParentId=""45653222"" CreationDate=""2017-08-12T19:47:19.217"" Score=""0"" Body=""&lt;p&gt;Is this what you are looking for?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can test the code &lt;a href=&quot;https://play.golang.org/p/Qx3hkUR6vu&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    // test input (json.Unmarshal expects []byte)&#xA;    b := []byte(&quot;[[{\&quot;client\&quot;: \&quot; 321\&quot;}], [{\&quot;number\&quot;: \&quot;3123\&quot;}]]&quot;)&#xA;&#xA;    // declare the target variable in the correct format&#xA;    var f [][]map[string]string&#xA;&#xA;    // unmarshal the json&#xA;    err := json.Unmarshal(b, &amp;amp;f)&#xA;    if err != nil {&#xA;        // handle error&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    // output result&#xA;    fmt.Println(f)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For details see the comments in the code. Feel free to ask.&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-12T19:47:19.217"" CommentCount=""1"" />
",45654290
45652717,"45652717      <row Id=""45652717"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45655153"" PostTypeId=""2"" ParentId=""45652717"" CreationDate=""2017-08-12T21:38:36.327"" Score=""1"" Body=""&lt;p&gt;The input you have is definitely invalid XML. There is a bug in the creation routine of the XML.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Idea&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Since you say you have to deal with it the way it is... here a suggestion:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;replace all closing tags via regex to something you will basically never have in your input (e.g. &lt;code&gt;@#lt#@/tagname@#gt#@&lt;/code&gt;). While doing that save all the distinct tag names to a slice.&lt;/li&gt;&#xA;&lt;li&gt;With the slice of tag names replace the start tags&lt;/li&gt;&#xA;&lt;li&gt;Now escape all remaining &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Last but not least replace the original tags back: &lt;code&gt;@#lt#@&lt;/code&gt; to &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;@#gt#@&lt;/code&gt; to &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Now you should have valid xml that is parseable.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Proof of Concept&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/Ht_Igi67kX&quot; rel=&quot;nofollow noreferrer&quot;&gt;Playground&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;bytes&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;    &quot;regexp&quot;&#xA;    &quot;sort&quot;&#xA;)&#xA;&#xA;var (&#xA;    rlt = []byte(&quot;@#lt#@&quot;)&#xA;    rgt = []byte(&quot;@#gt#@&quot;)&#xA;    lt  = []byte(&quot;&amp;amp;lt;&quot;)&#xA;    gt  = []byte(&quot;&amp;amp;gt;&quot;)&#xA;)&#xA;&#xA;// used for sorting strings by length&#xA;type ByLength []string&#xA;&#xA;func (s ByLength) Len() int {&#xA;    return len(s)&#xA;}&#xA;func (s ByLength) Swap(i, j int) {&#xA;    s[i], s[j] = s[j], s[i]&#xA;}&#xA;func (s ByLength) Less(i, j int) bool {&#xA;    return len(s[i]) &amp;lt; len(s[j])&#xA;}&#xA;&#xA;func main() {&#xA;    s := `&amp;lt;Shop&amp;gt;&#xA;    &amp;lt;ShopName&amp;gt;Fresh Fruit &amp;lt;Fruit Shop&amp;gt;&amp;lt;/ShopName&amp;gt;&#xA;    &amp;lt;ShopName attr=&quot;val1&quot;&amp;gt;Fresh Fruit &amp;lt;Shop test&amp;gt;&amp;lt;/ShopName&amp;gt;&#xA;&amp;lt;/Shop&amp;gt;`&#xA;&#xA;    r1, err := regexp.Compile(&quot;&amp;lt;/([^&amp;lt;&amp;gt;]*)&amp;gt;&quot;)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    names := []string{}&#xA;    out := r1.ReplaceAllFunc([]byte(s), func(b []byte) []byte {&#xA;        name := b[2 : len(b)-1]&#xA;&#xA;        // TODO: only append name if not already in list&#xA;        names = append(names, string(name))&#xA;&#xA;        // probably optimizable&#xA;        bytes := make([]byte, 0, len(name)+12)&#xA;        bytes = append(bytes, rlt...)&#xA;        bytes = append(bytes, name...)&#xA;        bytes = append(bytes, rgt...)&#xA;        return bytes&#xA;    })&#xA;&#xA;    // sort names descending by length otherwise we risk replacing parts of names like with &amp;lt;Shop and &amp;lt;ShopName&#xA;    sort.Sort(sort.Reverse(ByLength(names)))&#xA;&#xA;    for _, name := range names {&#xA;        // replace only exact start tags&#xA;        out = bytes.Replace(out, []byte(fmt.Sprintf(&quot;&amp;lt;%s&amp;gt;&quot;, name)), []byte(fmt.Sprintf(&quot;@#lt#@%s@#gt#@&quot;, name)), -1)&#xA;&#xA;        // replace start tags with attributes&#xA;        r3, err := regexp.Compile(fmt.Sprintf(&quot;&amp;lt;%s( [^&amp;lt;&amp;gt;=]+=\&quot;[^&amp;lt;&amp;gt;]+)&amp;gt;&quot;, name))&#xA;        if err != nil {&#xA;            // handle error&#xA;        }&#xA;        out = r3.ReplaceAll(out, []byte(fmt.Sprintf(&quot;@#lt#@%s$1@#gt#@&quot;, name)))&#xA;    }&#xA;&#xA;    out = bytes.Replace(out, []byte{'&amp;lt;'}, lt, -1)&#xA;    out = bytes.Replace(out, []byte{'&amp;gt;'}, gt, -1)&#xA;&#xA;    out = bytes.Replace(out, rlt, []byte{'&amp;lt;'}, -1)&#xA;    out = bytes.Replace(out, rgt, []byte{'&amp;gt;'}, -1)&#xA;&#xA;    fmt.Println(string(out))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Notes&lt;/h3&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;this is a proof of concept. This is not optimised for performance.&lt;/li&gt;&#xA;&lt;li&gt;you might still run into content that might not be escaped properly. Then you will need to further optimise. If there is something like this in the content it will be falsely considered a tag: &lt;code&gt;&amp;lt;tagname&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;tagname something =&quot;something&amp;gt;&lt;/code&gt;. Therefore expect some xml to still to be invalid. Log invalid xml so you can improve the algorithm.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;"" OwnerUserId=""6220193"" LastEditorUserId=""6220193"" LastEditDate=""2017-08-12T21:50:59.173"" LastActivityDate=""2017-08-12T21:50:59.173"" CommentCount=""1"" />
",45655153
45650875,"45650875      <row Id=""45650875"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45655266"" PostTypeId=""2"" ParentId=""45650875"" CreationDate=""2017-08-12T21:57:03.033"" Score=""1"" Body=""&lt;p&gt;You can declare new types which represent slice of your models. For example,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type ModelAList []ModelA&#xA;type ModelBList []ModelB&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then when you pass variables of these new types into your &lt;code&gt;r.GetDocumentBySlug()&lt;/code&gt;, the functions in the &lt;code&gt;encoding/json&lt;/code&gt; package will unmarshal the slices accordingly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can find working examples &lt;a href=&quot;https://play.golang.org/p/MRz2vLJHGp&quot; rel=&quot;nofollow noreferrer&quot;&gt;here (marshaling)&lt;/a&gt; and &lt;a href=&quot;https://play.golang.org/p/H5ODIZIdWJ&quot; rel=&quot;nofollow noreferrer&quot;&gt;here (unmarshaling)&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1144203"" LastEditorUserId=""1144203"" LastEditDate=""2017-08-12T22:07:34.520"" LastActivityDate=""2017-08-12T22:07:34.520"" CommentCount=""2"" />
",45655266
45654383,"45654383      <row Id=""45654383"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45655373"" PostTypeId=""2"" ParentId=""45654383"" CreationDate=""2017-08-12T22:14:47.673"" Score=""2"" Body=""&lt;p&gt;Your namespace is not correctly set. See also &lt;a href=&quot;https://www.w3.org/XML/1998/namespace&quot; rel=&quot;nofollow noreferrer&quot;&gt;xml namespace&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Add the namespace here:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;elementToSign := &amp;amp;etree.Element{&#xA;    Tag: &quot;ExampleElement&quot;,&#xA;    Space: &quot;xml&quot;,&#xA;}&#xA;elementToSign.CreateAttr(&quot;ID&quot;, &quot;id1234&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With the added line it will pass validation. Tested with &lt;a href=&quot;https://www.w3schools.com/xml/xml_validator.asp&quot; rel=&quot;nofollow noreferrer&quot;&gt;XML Validator&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-12T22:14:47.673"" CommentCount=""0"" />
",45655373
45656937,"45656937      <row Id=""45656937"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45656975"" PostTypeId=""2"" ParentId=""45656937"" CreationDate=""2017-08-13T04:10:06.833"" Score=""1"" Body=""&lt;p&gt;&lt;code&gt;http.Dir(&quot;/tmp&quot;)&lt;/code&gt; is actually a type conversion where you convert the string &lt;code&gt;/tmp&lt;/code&gt; into the &lt;code&gt;http.Dir&lt;/code&gt; type. Looking at the &lt;a href=&quot;https://golang.org/pkg/net/http/#Dir&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs&lt;/a&gt;, you will see that &lt;code&gt;http.Dir&lt;/code&gt; is actually a string type. Hence, this type conversion works. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;In addition, the &lt;code&gt;http.Dir&lt;/code&gt; type also implements the &lt;code&gt;func Open(name string) (File, error)&lt;/code&gt; function. Hence, it can be used anywhere where a &lt;a href=&quot;https://golang.org/pkg/net/http/#FileSystem&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;FileSystem&lt;/code&gt;&lt;/a&gt; interface is used.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can also check out the &lt;a href=&quot;https://golang.org/pkg/net/http/#ServeFile&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;func ServeFile(w ResponseWriter, r *Request, name string)&lt;/code&gt;&lt;/a&gt; function in the &lt;code&gt;net/http&lt;/code&gt; package.&lt;/p&gt;&#xA;"" OwnerUserId=""1144203"" LastActivityDate=""2017-08-13T04:10:06.833"" CommentCount=""0"" />
",45656975
45660762,"45660762      <row Id=""45660762"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45661001"" PostTypeId=""2"" ParentId=""45660762"" CreationDate=""2017-08-13T13:43:34.977"" Score=""2"" Body=""&lt;p&gt;May be like this?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;sync&quot;&#xA;    &quot;time&quot;&#xA;&#xA;    &quot;github.com/davecgh/go-spew/spew&quot;&#xA;)&#xA;&#xA;func callbackWithTimeout(cbFunc func() ([]byte, error), timeout time.Duration) {&#xA;    time.Sleep(timeout)&#xA;    d, e := cbFunc()&#xA;    spew.Dump(d)&#xA;    spew.Dump(e)&#xA;}&#xA;&#xA;func main() {&#xA;    var wg sync.WaitGroup&#xA;&#xA;    wg.Add(1)&#xA;&#xA;    go func() {&#xA;        defer wg.Done() // move it here&#xA;        cbFunc := func() ([]byte, error) {&#xA;            //I feel like I should be able to defer here instead&#xA;            return nil, nil&#xA;        }&#xA;        callbackWithTimeout(cbFunc, time.Duration(4*time.Second))&#xA;    }()&#xA;&#xA;    println(&quot;some line&quot;)&#xA;&#xA;    wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""8075949"" LastActivityDate=""2017-08-13T13:43:34.977"" CommentCount=""0"" />
",45661001
45662612,"45662612      <row Id=""45662612"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45662780"" PostTypeId=""2"" ParentId=""45662612"" CreationDate=""2017-08-13T17:00:02.307"" Score=""2"" Body=""&lt;p&gt;&lt;code&gt;go run *.go&lt;/code&gt; will work in unix like system, and in Windows try to list all files in &lt;code&gt;main&lt;/code&gt; package&lt;/p&gt;&#xA;"" OwnerUserId=""2791115"" LastActivityDate=""2017-08-13T17:00:02.307"" CommentCount=""0"" />
",45662780
45665698,"45665698      <row Id=""45665698"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45666636"" PostTypeId=""2"" ParentId=""45665698"" CreationDate=""2017-08-14T02:18:37.953"" Score=""1"" Body=""&lt;p&gt;Take a look at &lt;a href=&quot;https://golang.org/doc/code.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;How to Write Go Code&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;From the documentation, this is how a workspace should look in practice:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bin/&#xA;    hello                          # command executable&#xA;    outyet                         # command executable&#xA;pkg/&#xA;    linux_amd64/&#xA;        github.com/golang/example/&#xA;            stringutil.a           # package object&#xA;src/&#xA;    github.com/golang/example/&#xA;        .git/                      # Git repository metadata&#xA;    hello/&#xA;        hello.go               # command source&#xA;    outyet/&#xA;        main.go                # command source&#xA;        main_test.go           # test source&#xA;    stringutil/&#xA;        reverse.go             # package source&#xA;        reverse_test.go        # test source&#xA;    golang.org/x/image/&#xA;        .git/                      # Git repository metadata&#xA;    bmp/&#xA;        reader.go              # package source&#xA;        writer.go              # package source&#xA;    ... (many more repositories and packages omitted) ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I would probably create a CSV and an XML package, and put their corresponding importers/exporters there, or have an importer and an exporter package.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Update:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Suggested project structure -&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;app&#xA;|- main.go&#xA;|- config&#xA;    |- config.go&#xA;|- importer&#xA;    |- importer.go&#xA;    |- csv.go&#xA;    |- xml.go&#xA;|- exporter&#xA;    |- exporter.go&#xA;    |- csv.go&#xA;    |- xml.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5395709"" LastEditorUserId=""5395709"" LastEditDate=""2017-08-14T15:13:13.817"" LastActivityDate=""2017-08-14T15:13:13.817"" CommentCount=""11"" />
",45666636
45675092,"45675092      <row Id=""45675092"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45675210"" PostTypeId=""2"" ParentId=""45675092"" CreationDate=""2017-08-14T13:06:01.433"" Score=""1"" Body=""&lt;p&gt;The mutexes are protecting data structures, they are both captured in the closure given to the &lt;code&gt;replyFunc&lt;/code&gt; callback.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;wait&lt;/code&gt; mutex blocks until the callback returns, and the &lt;code&gt;change&lt;/code&gt; mutex protects the &lt;code&gt;replyData&lt;/code&gt; and &lt;code&gt;replyErr&lt;/code&gt; values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The commit that added those only says:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Make SimpleQuery race safe, irrespective of what the server does.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So this may be extra protection against some unintended or legacy behavior, which is why it's using multiple mutexes rather than a single primitive to synchronize the operation. &lt;/p&gt;&#xA;"" OwnerUserId=""32880"" LastEditorUserId=""32880"" LastEditDate=""2017-08-14T13:15:12.720"" LastActivityDate=""2017-08-14T13:15:12.720"" CommentCount=""0"" />
",45675210
45557831,"45557831      <row Id=""45557831"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45675560"" PostTypeId=""2"" ParentId=""45557831"" CreationDate=""2017-08-14T13:24:45.610"" Score=""1"" Body=""&lt;p&gt;This happens due to mount events propagation between namespaces. The propagation type of your mount point is &lt;code&gt;MS_SHARED&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;code&gt;MS_SHARED&lt;/code&gt;: This mount point shares mount and unmount events with other mount points that are members of its &quot;peer group&quot;. When a mount point is added or removed under this mount point, this change will propagate to the peer group, so that the mount or unmount will also take place under each of the peer mount points. Propagation also occurs in the reverse direction, so that mount and unmount events on a peer mount will also propagate to this mount point.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Source - &lt;a href=&quot;https://lwn.net/Articles/689856/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://lwn.net/Articles/689856/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;shared:N&lt;/code&gt; tag in &lt;code&gt;/proc/self/mountinfo&lt;/code&gt; indicates that the mount is sharing propagation events with a peer group:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo go run namespace-1.go&#xA;[root@localhost]# mount --bind /home/andrii/test /mnt&#xA;# The propagation type is MS_SHARED&#xA;[root@localhost]# grep '/mnt' /proc/self/mountinfo&#xA;264 175 254:0 /home/andrii/test /mnt rw,noatime shared:1 - ext4 &#xA;/dev/mapper/cryptroot rw,data=ordered&#xA;[root@localhost]# exit&#xA;$ ls /mnt&#xA;test_file&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;On most Linux distributions the default propagation type is &lt;code&gt;MS_SHARED&lt;/code&gt; which is set by &lt;code&gt;systemd&lt;/code&gt;. See &lt;code&gt;NOTES&lt;/code&gt; in &lt;code&gt;man 7 mount_namespaces&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Notwithstanding the fact that the default propagation type for new &#xA;  mount points is in many cases MS_PRIVATE, MS_SHARED is typically more &#xA;  useful. For this reason, systemd(1) automatically remounts all mount &#xA;  points as MS_SHARED on system startup. Thus, on most modern systems, &#xA;  the default propagation type is in practice MS_SHARED.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;If you want a fully isolated namespace, you can make all mount points private this way:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo go run namespace-1.go&#xA;[root@localhost]# mount --make-rprivate /&#xA;[root@localhost]# mount --bind /home/andrii/test /mnt&#xA;# The propagation type is MS_PRIVATE now&#xA;[root@localhost]# grep '/mnt' /proc/self/mountinfo&#xA;264 175 254:0 /home/andrii/test /mnt rw,noatime - ext4 &#xA;/dev/mapper/cryptroot rw,data=ordered&#xA;[root@localhost]# exit&#xA;$ ls /mnt&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5737938"" LastActivityDate=""2017-08-14T13:24:45.610"" CommentCount=""1"" />
",45675560
45679529,"45679529      <row Id=""45679529"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45679626"" PostTypeId=""2"" ParentId=""45679529"" CreationDate=""2017-08-14T17:13:39.040"" Score=""5"" Body=""&lt;p&gt;Rather than converting this to a string, you'll want to convert it to a &lt;code&gt;time.Time&lt;/code&gt; and from there to a string. You can use the handy &lt;code&gt;Unix&lt;/code&gt; method to get a &lt;code&gt;Time&lt;/code&gt; object back for that time stamp.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import &quot;time&quot;&#xA;import &quot;fmt&quot;&#xA;&#xA;t := time.Unix(0, 1502712864232)&#xA;fmt.Println(t.Format(&quot;02/01/2006, 15:04:05&quot;))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Edit: added format to the println - note, testing your unix stamp in go playground, that value is neither nano seconds nor seconds, in both cases the time value produced is way off of what it should be. The code above still demonstrates the basic idea of what you want to do but it seems an additional step is necessary or the sample &lt;code&gt;int64&lt;/code&gt; you gave just does not correspond to the string you provided.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;relevant docs:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/time/#Unix&quot; rel=&quot;noreferrer&quot;&gt;https://golang.org/pkg/time/#Unix&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/fmt/&quot; rel=&quot;noreferrer&quot;&gt;https://golang.org/pkg/fmt/&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""763585"" LastEditorUserId=""763585"" LastEditDate=""2017-08-14T17:19:55.037"" LastActivityDate=""2017-08-14T17:19:55.037"" CommentCount=""2"" />
",45679626
45679408,"45679408      <row Id=""45679408"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45680060"" PostTypeId=""2"" ParentId=""45679408"" CreationDate=""2017-08-14T17:43:47.160"" Score=""1"" Body=""&lt;p&gt;The problem here is that if you omit the type assertion here:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;new := v.Elem().Interface()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; is inferred to have a &lt;code&gt;interface{}&lt;/code&gt; type.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then when you take the address to unmarshal, the type of &lt;code&gt;&amp;amp;new&lt;/code&gt; is &lt;code&gt;*interface{}&lt;/code&gt; (pointer to interface{}) and unmarshal does not work as you expect.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can avoid the type assertion if instead of getting the &lt;code&gt;Elem()&lt;/code&gt; you work directly with the pointer reference.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;  //Original struct&#xA;  orig := new(Employee)&#xA;&#xA;  t := reflect.TypeOf(orig)&#xA;  v := reflect.New(t.Elem())&#xA;&#xA;  // reflected pointer&#xA;  newP := v.Interface()&#xA;&#xA;  // Unmarshal to reflected struct pointer&#xA;  json.Unmarshal([]byte(&quot;{\&quot;firstname\&quot;: \&quot;bender\&quot;}&quot;), newP)&#xA;&#xA;  fmt.Printf(&quot;%+v\n&quot;, newP)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Playground: &lt;a href=&quot;https://play.golang.org/p/lTBU-1PqM4&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/lTBU-1PqM4&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastEditorUserId=""5728991"" LastEditDate=""2017-08-14T19:28:13.093"" LastActivityDate=""2017-08-14T19:28:13.093"" CommentCount=""1"" />
",45680060
45682353,"45682353      <row Id=""45682353"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45682537"" PostTypeId=""2"" ParentId=""45682353"" CreationDate=""2017-08-14T20:27:01.360"" Score=""2"" Body=""&lt;p&gt;As indicated in the documentation, &lt;a href=&quot;https://golang.org/pkg/net/http/httptest/#NewRequest&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;httptest.NewRequest&lt;/code&gt;&lt;/a&gt; &quot;returns a new incoming server Request, suitable for passing to an http.Handler for testing&quot;, while &lt;a href=&quot;https://golang.org/pkg/net/http/#NewRequest&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;http.NewRequest&lt;/code&gt;&lt;/a&gt; &quot;returns a Request suitable for use with Client.Do or Transport.RoundTrip.&quot; So, if you're passing the request directly to the handler in a unit test, use &lt;code&gt;httptest.NewRequest&lt;/code&gt;, and if you're executing a full round-trip using &lt;code&gt;http.Client&lt;/code&gt;, use &lt;code&gt;http.NewRequest&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-14T20:27:01.360"" CommentCount=""0"" />
",45682537
45682512,"45682512      <row Id=""45682512"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45683067"" PostTypeId=""2"" ParentId=""45682512"" CreationDate=""2017-08-14T21:08:58.310"" Score=""1"" Body=""&lt;p&gt;Typically it is best to use XML decoder for large XML, it uses the stream and Go with selective binding (like &lt;code&gt;WantThisElement&amp;gt;Bar&lt;/code&gt;) then XML decoder follows that path.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let's use XML content from your question to create an example.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;XML Content:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;Report&amp;gt;&#xA;    &amp;lt;ElementOne Blah=&quot;bleh&quot;&amp;gt;&#xA;        &amp;lt;IgnoreElement&amp;gt;&#xA;            &amp;lt;Foo&amp;gt;&#xA;                &amp;lt;FooValue&amp;gt;example foo value&amp;lt;/FooValue&amp;gt;&#xA;            &amp;lt;/Foo&amp;gt;&#xA;        &amp;lt;/IgnoreElement&amp;gt;&#xA;&#xA;        &amp;lt;WantThisElement&amp;gt;&#xA;            &amp;lt;Bar Baz=&quot;test&quot;&amp;gt;&#xA;                 &amp;lt;BarValue&amp;gt;example bar value 1&amp;lt;/BarValue&amp;gt;&#xA;            &amp;lt;/Bar&amp;gt;&#xA;            &amp;lt;Bar Baz=&quot;test2&quot;&amp;gt;&#xA;                &amp;lt;BarValue&amp;gt;example bar value 2&amp;lt;/BarValue&amp;gt;&#xA;            &amp;lt;/Bar&amp;gt;&#xA;        &amp;lt;/WantThisElement&amp;gt;&#xA;    &amp;lt;/ElementOne&amp;gt;&#xA;&amp;lt;/Report&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Structures:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Report struct {&#xA;    XMLName    xml.Name `xml:&quot;Report&quot;`&#xA;    ElementOne ElementOne&#xA;}&#xA;&#xA;type ElementOne struct {&#xA;    XMLName xml.Name `xml:&quot;ElementOne&quot;`&#xA;    Blah    string   `xml:&quot;Blah,attr&quot;`&#xA;    Bar     []Bar    `xml:&quot;WantThisElement&amp;gt;Bar&quot;`&#xA;}&#xA;&#xA;type Bar struct {&#xA;    XMLName  xml.Name `xml:&quot;Bar&quot;`&#xA;    Baz      string   `xml:&quot;Baz,attr&quot;`&#xA;    BarValue string   `xml:&quot;BarValue&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Play Link: &lt;a href=&quot;https://play.golang.org/p/26xDkojeUp&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/26xDkojeUp&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1343356"" LastActivityDate=""2017-08-14T21:08:58.310"" CommentCount=""2"" />
",45683067
45683207,"45683207      <row Id=""45683207"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45683350"" PostTypeId=""2"" ParentId=""45683207"" CreationDate=""2017-08-14T21:31:16.123"" Score=""2"" Body=""&lt;p&gt;Because you can shadow outer-scope variables in an inner scope, such as a closure or loop; the compiler cannot infer purely based on whether the variable existed before or not. Having to explicitly define variables also helps to reduce defects which are commonplace in languages like PHP and JavaScript that allow you to just &lt;code&gt;foo = bar&lt;/code&gt; without any consideration of whether &lt;code&gt;foo&lt;/code&gt; has been defined. That kind of loose compilation paves over common mistakes &lt;em&gt;like typos&lt;/em&gt; such that they're no longer caught at compile time, they show up as &quot;weird behavior&quot; at runtime, which is much, much harder to track down and fix.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-14T21:31:16.123"" CommentCount=""4"" />
",45683350
45684996,"45684996      <row Id=""45684996"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45685121"" PostTypeId=""2"" ParentId=""45684996"" CreationDate=""2017-08-15T01:03:52.840"" Score=""1"" Body=""&lt;p&gt;&lt;code&gt;GOPATH&lt;/code&gt; is a variable that indicates where the dependencies of your application are installed. It is basically a path to a directory where you store the packages your application might use.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Any application of a reasonable size has dependencies. In golang, these come in the form of packages. At compile time, the location of the dependencies (i.e. packages you use) needs to be known such that your executable can be built.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;They can either be stored at a fixed, predefined location or make somehow the user be able to specify the location himself. The first approach has a lot of downsides (for example, it would be impossible to support operating systems with different directory structure). Thus, the designers of the go tool decided to make it user configurable by the means of this variable. This also gives the user much more flexibility, such as the ability to group the dependencies for different projects in different directories.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The usage of a environment variable (as &lt;code&gt;GOPATH&lt;/code&gt;) is not limited to golang. Java has its &lt;code&gt;CLASSPATH&lt;/code&gt;, Python its &lt;code&gt;PYTHONPATH&lt;/code&gt; and so on (each of them with their quirks, but with the same basic role).&lt;/p&gt;&#xA;"" OwnerUserId=""2896626"" LastActivityDate=""2017-08-15T01:03:52.840"" CommentCount=""0"" />
",45685121
45685024,"45685024      <row Id=""45685024"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45685393"" PostTypeId=""2"" ParentId=""45685024"" CreationDate=""2017-08-15T01:45:05.310"" Score=""0"" Body=""&lt;p&gt;To do it using channels you'll have to refactor your code quite a bit.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Smallest change would be to do the assignment in the goroutine:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go func(){&#xA;    person.WillDieAt = slowExternalFunction(i)&#xA;}()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, to make this work we'd need to make some other changes as well:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use an array of pointers so that you can add the person before the assignment finishes.&lt;/li&gt;&#xA;&lt;li&gt;Implement a wait group so that you wait for all goroutines to finish before printing the results.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Here's the complete &lt;code&gt;main&lt;/code&gt; function with the changes:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    var persons []*Person&#xA;    var wg sync.WaitGroup&#xA;&#xA;    for i := 0; i &amp;lt;= 100; i++{&#xA;        person := &amp;amp;Person{}&#xA;        person.Id = i&#xA;        person.Name = fastInternalFunction(i)&#xA;        wg.Add(1)&#xA;        go func(){&#xA;            person.WillDieAt = slowExternalFunction(i)&#xA;            wg.Done()&#xA;        }()&#xA;&#xA;        persons = append(persons,person)&#xA;    }&#xA;    wg.Wait()&#xA;    for _, person := range persons {&#xA;        fmt.Printf(&quot;%v &quot;, person )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Playground: &lt;a href=&quot;https://play.golang.org/p/8GWYD29inC&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/8GWYD29inC&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-08-15T01:45:05.310"" CommentCount=""0"" />
",45685393
45686163,"45686163      <row Id=""45686163"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45686455"" PostTypeId=""2"" ParentId=""45686163"" CreationDate=""2017-08-15T04:21:55.750"" Score=""5"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;I was thinking of using strconv ParseInt and ParseFloat but not sure&#xA;  if that is the right way.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Well, it's certainly &lt;em&gt;a&lt;/em&gt; right way.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You don't need to use ParseInt, though. ParseFloat will do the job.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func isNumeric(s string) bool {&#xA;    _, err := strconv.ParseFloat(s, 64)&#xA;    return err == nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See an example here: &lt;a href=&quot;https://play.golang.org/p/D53HRS-KIL&quot; rel=&quot;noreferrer&quot;&gt;https://play.golang.org/p/D53HRS-KIL&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1949322"" LastActivityDate=""2017-08-15T04:21:55.750"" CommentCount=""0"" />
",45686455
45686269,"45686269      <row Id=""45686269"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45686466"" PostTypeId=""2"" ParentId=""45686269"" CreationDate=""2017-08-15T04:23:06.227"" Score=""2"" Body=""&lt;p&gt;The error you are getting is due to the way you are defining your &lt;code&gt;OrderAddresses&lt;/code&gt; struct. Instead of&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type OrderAddresses []struct {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you use&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type OrderAddresses struct {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;without the braces, your compile error should go away. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;That being said, I'm not sure if your json will parse as you expect given the blob I'm looking at. It appears that &lt;code&gt;addresses&lt;/code&gt; in the json blob is an array. This means that instead of representing it as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Addresses map[string]OrderAddresses `json:&quot;addresses&quot;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You should simply make it a slice of &lt;code&gt;OrderAddresses&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Addresses []OrderAddresses `json:&quot;addresses&quot;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6621535"" LastActivityDate=""2017-08-15T04:23:06.227"" CommentCount=""2"" />
",45686466
45685547,"45685547      <row Id=""45685547"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45686610"" PostTypeId=""2"" ParentId=""45685547"" CreationDate=""2017-08-15T04:43:00.810"" Score=""3"" Body=""&lt;p&gt;You should separate the &lt;em&gt;logic&lt;/em&gt; (function) from &lt;em&gt;presentation&lt;/em&gt; (template). &#xA;The function registered in &lt;code&gt;template.FuncMap&lt;/code&gt; should not depends on template as its input to produce an output. If you want to return HTML template as the function output, you should generate it manually (using &lt;code&gt;fmt.Sprintf&lt;/code&gt;, etc.). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your case, you can simply register a function to check the media type, then generate different output using template's &lt;a href=&quot;https://golang.org/pkg/text/template/#hdr-Actions&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;{{if}}&lt;/code&gt;&lt;/a&gt;  action. The function may looks like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func matchType(ext, s string) bool {&#xA;    return strings.ToLower(ext) == strings.ToLower(path.Ext(s))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and the template looks like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{{ range .Media }}&amp;lt;p&amp;gt;&#xA;    {{if . | matchType &quot;.jpg&quot;}}&amp;lt;img src={{.}}&amp;gt;&#xA;    {{else if . | matchType &quot;.mp4&quot;}}&amp;lt;video controls src={{.}}&amp;gt;&amp;lt;/video&amp;gt;&#xA;    {{else}}{{.}}&#xA;    {{end}}&amp;lt;/p&amp;gt;&#xA;{{ end }}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;A working example based on your reduced example: &lt;a href=&quot;https://play.golang.org/p/U64_7UHZQU&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/U64_7UHZQU&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-08-15T04:43:00.810"" CommentCount=""1"" />
",45686610
45694512,"45694512      <row Id=""45694512"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45695868"" PostTypeId=""2"" ParentId=""45694512"" CreationDate=""2017-08-15T15:14:16.287"" Score=""2"" Body=""&lt;p&gt;An explicit type is required in a type assertion. The type cannot be constructed through reflection.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unless the argument is a []interface{}, the slice or array must be copied to produce a []interface{}.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func AnythingToSlice(a interface{}) []interface{} {&#xA;    v := reflect.ValueOf(a)&#xA;    switch v.Kind() {&#xA;    case reflect.Slice, reflect.Array:&#xA;        result := make([]interface{}, v.Len())&#xA;        for i := 0; i &amp;lt; v.Len(); i++ {&#xA;            result[i] = v.Index(i).Interface()&#xA;        }&#xA;        return result&#xA;    default:&#xA;        panic(&quot;not supported&quot;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/3bXxnHOK8_&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/3bXxnHOK8_&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-08-15T15:14:16.287"" CommentCount=""1"" />
",45695868
45696665,"45696665      <row Id=""45696665"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45696673"" PostTypeId=""2"" ParentId=""45696665"" CreationDate=""2017-08-15T15:56:59.223"" Score=""1"" Body=""&lt;p&gt;No, that is the very definition of not safe, and would be caught by the &lt;a href=&quot;https://golang.org/doc/articles/race_detector.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;race detector&lt;/a&gt; if you tested it. You will absolutely need to synchronize access, for example using &lt;a href=&quot;https://golang.org/pkg/sync/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sync.Mutex&lt;/code&gt; or &lt;code&gt;sync.RWMutex&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If it is not critical to always have the latest values, you can also allow each goroutine to cache a &lt;em&gt;copy&lt;/em&gt; of the struct, and then regularly update their copy from the &quot;master&quot; copy every so often. If there is frequent access to the struct, this can help avoid some performance issues due to lock contention.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-15T15:56:59.223"" CommentCount=""0"" />
",45696673
45698298,"45698298      <row Id=""45698298"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45698461"" PostTypeId=""2"" ParentId=""45698298"" CreationDate=""2017-08-15T17:43:04.877"" Score=""5"" Body=""&lt;p&gt;What you are asking about is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Short-circuit_evaluation&quot; rel=&quot;noreferrer&quot;&gt;Short Circuiting,&lt;/a&gt; and yes, Go does it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the &lt;a href=&quot;https://golang.org/ref/spec#Logical_operators&quot; rel=&quot;noreferrer&quot;&gt;language spec,&lt;/a&gt; it says that&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Logical operators apply to boolean values and yield a result of the same type as the operands. The right operand is evaluated conditionally.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;This means that, in your case, if &lt;code&gt;function1&lt;/code&gt; returned false, &lt;code&gt;function2&lt;/code&gt; would not be called.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See an example for &lt;a href=&quot;https://play.golang.org/p/RAMY4386Ct&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; here&lt;/a&gt; and for &lt;a href=&quot;https://play.golang.org/p/vCU3K-J2t6&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;||&lt;/code&gt; here.&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4099287"" LastActivityDate=""2017-08-15T17:43:04.877"" CommentCount=""0"" />
",45698461
45698552,"45698552      <row Id=""45698552"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45698612"" PostTypeId=""2"" ParentId=""45698552"" CreationDate=""2017-08-15T17:53:09.973"" Score=""1"" Body=""&lt;p&gt;You're almost there - I think the confusion is you're using piping &lt;em&gt;to call bash&lt;/em&gt;, which means you actually need to call bash &lt;em&gt;using bash&lt;/em&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;exec.Command(&quot;bash&quot;, &quot;-c&quot;, `bash --rcfile &amp;lt;(echo &quot;export PS1='&amp;gt; ' &amp;amp;&amp;amp; ls&quot;)`)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-15T17:53:09.973"" CommentCount=""0"" />
",45698612
45698651,"45698651      <row Id=""45698651"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45698725"" PostTypeId=""2"" ParentId=""45698651"" CreationDate=""2017-08-15T18:00:04.043"" Score=""5"" Body=""&lt;p&gt;This one is easy. This is why you never use WaitGroup's Add in a goroutine. Always call it before starting a goroutine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The problem is that you stack up a bunch of goroutine's and then call Wait immediately. Go does not promise to run your goroutines at any particular time, just like POSIX or Windows threads are not guaranteed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, in this case, you gave the scheduler a bunch of goroutines to run in the future, but it decided to finish your code first. So it ran &lt;code&gt;wg.Wait()&lt;/code&gt; and &lt;code&gt;close(out)&lt;/code&gt; before ever doing &lt;code&gt;wg.Add()&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""13422"" LastActivityDate=""2017-08-15T18:00:04.043"" CommentCount=""0"" />
",45698725
45702591,"45702591      <row Id=""45702591"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45703012"" PostTypeId=""2"" ParentId=""45702591"" CreationDate=""2017-08-15T23:33:16.727"" Score=""0"" Body=""&lt;p&gt;It looks like Go is using system's native DNS resolution code (via a C library) when compiling locally, but Go's own resolver written in Go when cross-compiled. As confirmation, sounds like it's slow when &lt;code&gt;CGO_ENABLED=0&lt;/code&gt;. Although it isn't specifically about what you're experiencing here, &lt;a href=&quot;https://github.com/golang/go/issues/16345&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/golang/go/issues/16345&lt;/a&gt; came up in a quick search and refers to how CGO_ENABLED determines which resolver runs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm not sure, though, how you either compile a binary you want to use the cgo native resolver cross-platform (probably need to at least install C cross-compilers) or get the resolver in Go to work well under your Darwin VPN setup. &lt;/p&gt;&#xA;"" OwnerUserId=""2714852"" LastActivityDate=""2017-08-15T23:33:16.727"" CommentCount=""0"" />
",45703012
45705921,"45705921      <row Id=""45705921"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45706182"" PostTypeId=""2"" ParentId=""45705921"" CreationDate=""2017-08-16T06:07:36.327"" Score=""2"" Body=""&lt;p&gt;Those are &lt;a href=&quot;https://golang.org/ref/spec#Slice_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;slices&lt;/a&gt;, not &lt;a href=&quot;https://golang.org/ref/spec#Array_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;arrays&lt;/a&gt;. It's important to emphasize as arrays are comparable but slices are not. See &lt;a href=&quot;https://golang.org/ref/spec#Comparison_operators&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: Comparision operators&lt;/a&gt;. And since slices are not comparable, structs composed of them (structs with fields having slice types) are also not comparable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may use &lt;a href=&quot;https://golang.org/pkg/reflect/#DeepEqual&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;reflect.DeepEqual()&lt;/code&gt;&lt;/a&gt; for this. Example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Foo struct {&#xA;    A []int&#xA;    B []string&#xA;}&#xA;&#xA;f := Foo{}&#xA;fmt.Println(&quot;Zero:&quot;, reflect.DeepEqual(f, Foo{}))&#xA;f.A = []int{1}&#xA;fmt.Println(&quot;Zero:&quot;, reflect.DeepEqual(f, Foo{}))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/qQSydTe4uk&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Zero: true&#xA;Zero: false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastActivityDate=""2017-08-16T06:07:36.327"" CommentCount=""1"" />
",45706182
45700232,"45700232      <row Id=""45700232"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45709116"" PostTypeId=""2"" ParentId=""45700232"" CreationDate=""2017-08-16T08:53:26.813"" Score=""0"" Body=""&lt;p&gt;Here is your &quot;while&quot; loop. Go simply doesn't have a while loop because it's &lt;code&gt;for&lt;/code&gt; loop already covers that.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for !(intN &amp;gt; 0 &amp;amp;&amp;amp; intN &amp;lt;= 12) {&#xA;    fmt.Println(&quot;Enter a number (0 &amp;lt; N &amp;lt;= 12): &quot;)&#xA;    fmt.Scanf(&quot;%d&quot;, &amp;amp;intN)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Not sure if you wanted the 12 included or not (the print statement suggests it should be included, so I did include it).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hope this helps.&lt;/p&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-16T08:53:26.813"" CommentCount=""2"" />
",45709116
45705930,"45705930      <row Id=""45705930"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45709646"" PostTypeId=""2"" ParentId=""45705930"" CreationDate=""2017-08-16T09:17:56.637"" Score=""1"" Body=""&lt;p&gt;Here some ways to access the data:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;&#xA;    &quot;github.com/yvasiyarov/php_session_decoder/php_serialize&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    // this string is generated from php code&#xA;    str := `a:3:{s:4:&quot;name&quot;;s:3:&quot;tom&quot;;s:3:&quot;age&quot;;s:2:&quot;23&quot;;s:7:&quot;friends&quot;;a:2:{i:0;a:1:{s:4:&quot;name&quot;;s:5:&quot;jerry&quot;;}i:1;a:1:{s:4:&quot;name&quot;;s:4:&quot;jack&quot;;}}}`&#xA;&#xA;    decoder := php_serialize.NewUnSerializer(str)&#xA;&#xA;    result, err := decoder.Decode()&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;    fmt.Println(result)&#xA;&#xA;    // simple assert&#xA;    t := result.(php_serialize.PhpArray)&#xA;    // use php_seriale build in function to get string&#xA;    strVal := php_serialize.PhpValueString(t[&quot;name&quot;])&#xA;    fmt.Println(strVal)&#xA;&#xA;    // type switch in case of different valid types&#xA;    switch t := result.(type) {&#xA;    default:&#xA;        fmt.Printf(&quot;unexpected type %T\n&quot;, t) // %T prints whatever type t has&#xA;    case php_serialize.PhpArray:&#xA;        fmt.Println(t)&#xA;        fmt.Println(t[&quot;name&quot;])&#xA;        fmt.Println(t[&quot;age&quot;])&#xA;&#xA;        // should be done recursively...&#xA;        switch f := t[&quot;friends&quot;].(type) {&#xA;        default:&#xA;            fmt.Printf(&quot;unexpected type %T\n&quot;, f) // %T prints whatever type t has&#xA;        case php_serialize.PhpArray:&#xA;            fmt.Println(f)&#xA;            fmt.Println(f[0])&#xA;            fmt.Println(f[1])&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I hope this gives you some ideas.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Basic concept&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;php_serialize&lt;/code&gt; has built in functions to convert primitives.&lt;/li&gt;&#xA;&lt;li&gt;Variable structures are represented with built in types which need to be used to access the structure.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-16T09:17:56.637"" CommentCount=""1"" />
",45709646
45710188,"45710188      <row Id=""45710188"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45710447"" PostTypeId=""2"" ParentId=""45710188"" CreationDate=""2017-08-16T09:55:56.957"" Score=""2"" Body=""&lt;p&gt;This is not possible. The best you can do is use a constructor method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type abc struct {&#xA;    prop1 int&#xA;    prop2 int  // default value: 0&#xA;}&#xA;&#xA;func New(prop1 int) abc {&#xA;    return abc{&#xA;        prop1: prop1,&#xA;        prop2: someDefaultValue,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But also note that all values in Go &lt;em&gt;automatically&lt;/em&gt; default to their zero value. The zero value for an &lt;code&gt;int&lt;/code&gt; is already &lt;code&gt;0&lt;/code&gt;. So if the default value you want is literally &lt;code&gt;0&lt;/code&gt;, you already get that for free.  You only need a constructor if you want some default value other than the zero value for a type.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-08-16T09:55:56.957"" CommentCount=""0"" />
",45710447
45637267,"45637267      <row Id=""45637267"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45715958"" PostTypeId=""2"" ParentId=""45637267"" CreationDate=""2017-08-16T14:13:49.937"" Score=""1"" Body=""&lt;p&gt;Try &lt;code&gt;*[]*VM.VirtualMachineCdrom&lt;/code&gt; (or just &lt;code&gt;*[]VM.VirtualMachineCdrom&lt;/code&gt; if you don't actually need the elements to be pointers). A &lt;code&gt;nil&lt;/code&gt; slice == a zero length slice, but a &lt;code&gt;nil&lt;/code&gt; &lt;em&gt;pointer to a slice&lt;/em&gt; does not.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-16T14:13:49.937"" CommentCount=""0"" />
",45715958
45718681,"45718681      <row Id=""45718681"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45718815"" PostTypeId=""2"" ParentId=""45718681"" CreationDate=""2017-08-16T16:33:30.513"" Score=""3"" Body=""&lt;p&gt;The error message is telling you that WriteHeader is called more than once (either directly or indirectly by a call to Write). The header can only be written to the network once. Both snippets have a call to WriteHeader.&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-08-16T16:33:30.513"" CommentCount=""0"" />
",45718815
45719297,"45719297      <row Id=""45719297"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45719395"" PostTypeId=""2"" ParentId=""45719297"" CreationDate=""2017-08-16T17:10:07.663"" Score=""4"" Body=""&lt;p&gt;Both your JSON input, and your &quot;manual&quot; example are using maps of slices, not slices of maps.  Change your target type to &lt;code&gt;map[string][]string&lt;/code&gt; and you should be good to go:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;encoding/json&quot;&#xA;)&#xA;&#xA;var file = []byte(`{&#xA;    &quot;recordType1&quot;: [&#xA;        &quot;field1&quot;, &quot;field2&quot;, &quot;field3&quot;, &quot;field4&quot;, &quot;field5&quot;&#xA;    ],&#xA;    &quot;recordType2&quot;: [&#xA;        &quot;field1&quot;, &quot;field2&quot;, &quot;field3&quot;, &quot;field4&quot;, &quot;field5&quot;, &quot;field6&quot;, &quot;field7&quot;&#xA;    ]&#xA;}`)&#xA;&#xA;func main() {&#xA;    output := map[string][]string{}&#xA;    if err := json.Unmarshal(file, &amp;amp;output); err != nil {&#xA;        panic(err)&#xA;    }&#xA;    fmt.Println(output)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Produces the following output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;map[recordType1:[field1 field2 field3 field4 field5] recordType2:[field1 field2 field3 field4 field5 field6 field7]]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/q7noWrlzy9&quot; rel=&quot;nofollow noreferrer&quot;&gt;Playground link&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-08-16T17:10:07.663"" CommentCount=""0"" />
",45719395
45721470,"45721470      <row Id=""45721470"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45721570"" PostTypeId=""2"" ParentId=""45721470"" CreationDate=""2017-08-16T19:29:57.867"" Score=""4"" Body=""&lt;p&gt;If you want to control how a type is unmarshaled, you can implement &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Unmarshaler&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json.Unmarshaler&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since a map allows you to tell the difference between an unset value, and a &lt;code&gt;null&lt;/code&gt; value, unmarshaling first into a generic &lt;code&gt;map[string]interface{}&lt;/code&gt; will allow you to inspect the values without tokenizing the JSON. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Item struct {&#xA;    Value *int&#xA;}&#xA;&#xA;&#xA;func (i *Item) UnmarshalJSON(b []byte) error {&#xA;    tmp := make(map[string]interface{})&#xA;&#xA;    err := json.Unmarshal(b, &amp;amp;tmp)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;&#xA;    val, ok := tmp[&quot;Value&quot;]&#xA;    if ok &amp;amp;&amp;amp; val == nil {&#xA;        return errors.New(&quot;Value cannot be nil&quot;)&#xA;&#xA;    }&#xA;    if !ok {&#xA;        return nil&#xA;    }&#xA;&#xA;    f, ok := val.(float64)&#xA;    if !ok {&#xA;        return fmt.Errorf(&quot;unexpected type %T for Value&quot;, val)&#xA;    }&#xA;&#xA;    n := int(f)&#xA;    i.Value = &amp;amp;n&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/MNDsQpfEJA&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/MNDsQpfEJA&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""32880"" LastEditorUserId=""32880"" LastEditDate=""2017-08-16T20:03:12.277"" LastActivityDate=""2017-08-16T20:03:12.277"" CommentCount=""10"" />
",45721570
45722785,"45722785      <row Id=""45722785"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45722910"" PostTypeId=""2"" ParentId=""45722785"" CreationDate=""2017-08-16T20:59:30.190"" Score=""3"" Body=""&lt;p&gt;The scratch image contains nothing. No files. But actually, that can work to your advantage. It turns out, Go binaries built with &lt;code&gt;CGO_ENABLED=0&lt;/code&gt; require absolutely nothing, other than what they use. There are a couple things to keep in mind:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;With &lt;code&gt;CGO_ENABLED=0&lt;/code&gt;, you can't use any C code. Actually not too hard.&lt;/li&gt;&#xA;&lt;li&gt;With &lt;code&gt;CGO_ENABLED=0&lt;/code&gt;, your app will not use the system DNS resolver. I don't think it does by default anyways because it's blocking and Go's native DNS resolver is non-blocking.&lt;/li&gt;&#xA;&lt;li&gt;Your app may depend on some things that are not present:&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Apps that make HTTPS calls (as in, to other services, i.e. Amazon S3, or the Stripe API) will need ca-certs in order to confirm HTTPS certificate authenticity. This also has to be updated over time. This is not needed for serving HTTPS content.&lt;/li&gt;&#xA;&lt;li&gt;Apps that need timezone awareness will need the timezone info files.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;A nice alternative to &lt;code&gt;FROM scratch&lt;/code&gt; is &lt;code&gt;FROM alpine&lt;/code&gt;, which will include a base Alpine image - which is very tiny (5 MiB I believe) and includes musl libc, which is compatible with Go and will allow you to link to C libraries as well as compile without setting &lt;code&gt;CGO_ENABLED=0&lt;/code&gt;. You can also leverage the fact that alpine is regularly updated, using its tzinfo and ca-certs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(It's worth noting that the overhead of Docker layers is amortized a bit because of Docker's deduplication, though of course that is negated by how often your base image is updated. Still, it helps sell the idea of using the quite small Alpine image.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may not need tzinfo or ca-certs now, but it's better to be safe than sorry; you can accidentally add a dependency without realizing it breaks your build. So I recommend using &lt;code&gt;alpine&lt;/code&gt; as your base. &lt;code&gt;alpine:latest&lt;/code&gt; should be fine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Bonus: If you want the advantages of reproducible builds inside Docker, but with small image sizes, you can use the new Docker multi-stage builds available in Docker 17.06+.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It works a bit like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;FROM golang:alpine&#xA;ADD . /go/src/github.com/some/gorepo  # may need some go getting if you don't vendor&#xA;RUN go build -o /app github.com/some/gorepo&#xA;&#xA;FROM scratch  # or alpine&#xA;COPY --from=0 /app /app&#xA;ENTRYPOINT [&quot;/app&quot;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(I apologize if I've made any mistakes, I'm typing that from memory.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that when using &lt;code&gt;FROM scratch&lt;/code&gt; you must use the exec form of &lt;code&gt;ENTRYPOINT&lt;/code&gt;, because the shell form won't work (it depends on the Docker image having &lt;code&gt;/bin/sh&lt;/code&gt;, which it won't.) This will work fine in Alpine.&lt;/p&gt;&#xA;"" OwnerUserId=""610744"" LastEditorUserId=""610744"" LastEditDate=""2017-08-16T21:03:31.403"" LastActivityDate=""2017-08-16T21:03:31.403"" CommentCount=""1"" />
",45722910
45655516,"45655516      <row Id=""45655516"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45725592"" PostTypeId=""2"" ParentId=""45655516"" CreationDate=""2017-08-17T02:13:46.003"" Score=""1"" Body=""&lt;p&gt;It seems the problem is related to including this attribute in some of your elements:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;xml:lang=&quot;en&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For example in:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;OrganizationName xml:lang=&quot;en&quot;&amp;gt;Your Identities&amp;lt;/OrganizationName&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you remove the &lt;code&gt;xml:lang=&quot;en&quot;&lt;/code&gt; for all elements, the generated signature turns to be valid and correctly verified.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As far as I can see, when you include that attribute, the elements written on the actual XML document seem to turn into this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;OrganizationName xmlns:xml=&quot;http://www.w3.org/XML/1998/namespace&quot; xml:lang=&quot;en&quot;&amp;gt;Your Identities&amp;lt;/OrganizationName&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And that makes the signature invalid.&lt;/p&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-08-17T02:13:46.003"" CommentCount=""3"" />
",45725592
45666306,"45666306      <row Id=""45666306"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45725831"" PostTypeId=""2"" ParentId=""45666306"" CreationDate=""2017-08-17T02:46:14.040"" Score=""0"" Body=""&lt;p&gt;Thanks for the responses but they were not satisfactory. I had to do some reading on this topic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;The correct answer is that the login prompt/dialog is a response built into the user-agent/browser and cannot be changed by the server. This also explains why some browsers show realm while others don't.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;According to Wikipedia Basic access authentication all the server does is:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;When the server wants the user agent to authenticate itself towards the server, it must respond appropriately to unauthenticated requests.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Unauthenticated requests should return a response whose header contains a HTTP 401 Unauthorized status[4] and a WWW-Authenticate field.[5]&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;The WWW-Authenticate field for basic authentication (used most often) is constructed as following:&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;WWW-Authenticate: Basic realm=&quot;User Visible Realm&quot;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""4984574"" LastActivityDate=""2017-08-17T02:46:14.040"" CommentCount=""0"" />
",45725831
45725795,"45725795      <row Id=""45725795"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45725928"" PostTypeId=""2"" ParentId=""45725795"" CreationDate=""2017-08-17T02:59:49.917"" Score=""3"" Body=""&lt;p&gt;Try this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func splitOutput(outs []byte) {&#xA;    outputStr := string(outs[:])&#xA;    split := strings.Split(outputStr, &quot;\n&quot;)&#xA;    fmt.Printf(&quot;Splitted result: %q\n&quot;, split)&#xA;    for index, line := range split {&#xA;        fmt.Printf(&quot;Line %d: %s\n&quot;, index, line)&#xA;        if len(line) &amp;gt;= 9 &amp;amp;&amp;amp; line[0:9] == &quot;Users of &quot; {&#xA;            lineSplit := strings.Split(line, &quot; &quot;)&#xA;            if len(lineSplit) == 16 {&#xA;                name := lineSplit[2]&#xA;                name = name[0:len(name) - 1]&#xA;                fmt.Printf(&quot;%s %s %s\n&quot;, name, lineSplit[6], lineSplit[12])&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Test it online: &lt;a href=&quot;https://play.golang.org/p/m6JIBytU0m&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/m6JIBytU0m&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""6482303"" LastActivityDate=""2017-08-17T02:59:49.917"" CommentCount=""2"" />
",45725928
45718580,"45718580      <row Id=""45718580"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45732044"" PostTypeId=""2"" ParentId=""45718580"" CreationDate=""2017-08-17T09:58:57.097"" Score=""1"" Body=""&lt;p&gt;To answer the &quot;&lt;strong&gt;My Real Question: How can I customize the behaviour of mgo before upsert?&lt;/strong&gt;&quot; - you can customise bson marshalling by defining &lt;a href=&quot;https://godoc.org/labix.org/v2/mgo/bson#Getter&quot; rel=&quot;nofollow noreferrer&quot;&gt;bson Getter&lt;/a&gt; to the model. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;To illustrate how it works, lets simplify the model to avoid nested documents:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Game struct {&#xA;    ID int `bson:&quot;_id&quot;`&#xA;    Name string&#xA;    Stats [] float64&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With newGame as following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;newGame := Game{&#xA;    ID: 1,&#xA;    Name: &quot;foo&quot;,&#xA;    Stats: []{5.0}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The update &lt;code&gt;col.UpsertId(newGame.ID, newGame)&lt;/code&gt; by default marshals &lt;code&gt;newGame&lt;/code&gt; into JSON, producing mongo query like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;update({_id:1}, {name: &quot;foo&quot;, stats: [5]}, {upsert: true});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To make use of &lt;code&gt;$set&lt;/code&gt;, &lt;code&gt;$push&lt;/code&gt; etc, you can define a custom bson getter. E.g.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (g Game) GetBSON() (interface{}, error) {&#xA;    return bson.M{&#xA;        &quot;$set&quot;: bson.M{&quot;name&quot;: g.Name}, &#xA;        &quot;$push&quot;: bson.M{&quot;stats&quot;: bson.M{&quot;$each&quot;: g.Stats}},&#xA;    }, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So the update &lt;code&gt;col.UpsertId(newGame.ID, newGame)&lt;/code&gt; will produce a mongodb query &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;update({_id:1}, {$set: {name: &quot;foo&quot;}, $push: {stats: {$each: [5]}}}, {upsert: true});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To make it crystal clear - the custom marshaler will be used in all mgo queries, so you probably don't want to define it directly to the model, but to its derivative to use in upsert operations only:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type UpdatedGame struct {&#xA;    Game&#xA;}&#xA;&#xA;func (g UpdatedGame) GetBSON() (interface{}, error) {&#xA;    return bson.M{....}&#xA;}&#xA;&#xA;.....&#xA;&#xA;newGame := Game{&#xA;    ID: 1,&#xA;    Name: &quot;foo&quot;,&#xA;    Stats: []{5.0}&#xA;}&#xA;&#xA;col.UpsertId(newGame.ID, UpdatedGame{newGame})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1110423"" LastEditorUserId=""1110423"" LastEditDate=""2017-08-17T10:31:40.097"" LastActivityDate=""2017-08-17T10:31:40.097"" CommentCount=""7"" />
",45732044
45727904,"45727904      <row Id=""45727904"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45732913"" PostTypeId=""2"" ParentId=""45727904"" CreationDate=""2017-08-17T10:39:58.113"" Score=""1"" Body=""&lt;p&gt;Your problem is here:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//push single code on the block&#xA;func (s *SmartContract) pushCode(APIstub shim.ChaincodeStubInterface, args []string) sc.Response {&#xA;&#xA;    hsCode := args[0]&#xA;    lenChk := checkHashLen(hsCode)&#xA;    if lenChk == false {&#xA;        fmt.Println(&quot;Length should be 32&quot;)&#xA;        continue&#xA;    }&#xA;    codeBytes, _ := json.Marshal(hsCode)&#xA;    APIstub.PutState(strconv.FormatInt(makeTimestamp(), 10), codeBytes)&#xA;    return shim.Success(nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The error explains what is going wrong. You're using the keyword continue when not in a for loop, this function doesn't contain a for loop. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;initCodeLedger contains a for loop, so you are getting distracted by that, but that's not the line no given in the error which is around line 86/87/88. Ideally post code on play.golang.org if asking a question like this. &lt;/p&gt;&#xA;"" OwnerUserId=""1601137"" LastActivityDate=""2017-08-17T10:39:58.113"" CommentCount=""3"" />
",45732913
45734988,"45734988      <row Id=""45734988"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45735476"" PostTypeId=""2"" ParentId=""45734988"" CreationDate=""2017-08-17T12:43:50.817"" Score=""1"" Body=""&lt;p&gt;This is because your &lt;code&gt;elec&lt;/code&gt; and &lt;code&gt;gas&lt;/code&gt; fields are lowercase. &lt;code&gt;json.Unmarshal&lt;/code&gt; will only touch the fields starting with an uppercase. Renaming them to &lt;code&gt;Elec&lt;/code&gt; and &lt;code&gt;Gas&lt;/code&gt; should probably fix the issue.&lt;/p&gt;&#xA;"" OwnerUserId=""6444852"" LastActivityDate=""2017-08-17T12:43:50.817"" CommentCount=""1"" />
",45735476
45734686,"45734686      <row Id=""45734686"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45735956"" PostTypeId=""2"" ParentId=""45734686"" CreationDate=""2017-08-17T13:06:16.887"" Score=""1"" Body=""&lt;p&gt;Perhaps your server is on port 8086 and the tls challenge is on port 443?&#xA; Try instead serving on port 443 (You may have to setcap your binary to allow it to do this).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See this issue on lets encrypt:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/letsencrypt/acme-spec/issues/33&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/letsencrypt/acme-spec/issues/33&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1601137"" LastActivityDate=""2017-08-17T13:06:16.887"" CommentCount=""1"" />
",45735956
45737715,"45737715      <row Id=""45737715"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45737921"" PostTypeId=""2"" ParentId=""45737715"" CreationDate=""2017-08-17T14:30:11.743"" Score=""1"" Body=""&lt;p&gt;&lt;code&gt;sqlx.Open&lt;/code&gt; return a &lt;code&gt;sqlx.DB&lt;/code&gt; struct (&lt;a href=&quot;https://github.com/jmoiron/sqlx/blob/d9bd385d68c068f1fabb5057e3dedcbcbb039d0f/sqlx.go#L238&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; the definition) that is different from the DB struct definition inside the &lt;code&gt;package databqase/sql&lt;/code&gt;.&lt;br&gt;&#xA;Change the &lt;code&gt;Conn&lt;/code&gt; type to &lt;code&gt;sqlx.DB&lt;/code&gt; and it should work.&lt;/p&gt;&#xA;"" OwnerUserId=""2606098"" LastActivityDate=""2017-08-17T14:30:11.743"" CommentCount=""0"" />
",45737921
45739102,"45739102      <row Id=""45739102"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45740350"" PostTypeId=""2"" ParentId=""45739102"" CreationDate=""2017-08-17T16:20:36.903"" Score=""1"" Body=""&lt;p&gt;The way you're reading the result, it has no idea what the JSON field names are. In order for it to use those tags, it must actually deserialize into the struct where the tags have been specified. When you do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    resp := []bson.M{}&#xA;    db.C(common.C_TRAINING).Pipe(pipeline).All(&amp;amp;resp)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You're explicitly telling &lt;code&gt;mgo&lt;/code&gt; to return BSON results. The object you pass in (a slice of &lt;code&gt;bson.M&lt;/code&gt;) has no json tags on it. In order to control the serialization to JSON, you must pass a struct with the JSON tags specified to &lt;code&gt;All&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    resp := []Training&#xA;    db.C(common.C_TRAINING).Pipe(pipeline).All(&amp;amp;resp)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-17T16:20:36.903"" CommentCount=""3"" />
",45740350
45741018,"45741018      <row Id=""45741018"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45741122"" PostTypeId=""2"" ParentId=""45741018"" CreationDate=""2017-08-17T17:02:03.190"" Score=""5"" Body=""&lt;p&gt;Two problems. First, you've created a race condition. By closing over the loop variable, you're sharing it between the thread running the loop and the thread running the goroutine, which is causing your described problem: by the time the goroutine that was started for the first URL tries to run, the value of the variable has changed. You need to either copy it to a local variable, or pass it as an argument, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for _, url := range urls {&#xA;    go func(url string) {&#xA;     fmt.Println(IsReachable(url)) &#xA;     }(url)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Second, you said you wanted to display them &quot;in order&quot;, which is not a goal generally compatible with concurrency/parallism, because you cannot control the order of parallel operations. If you want them in order, you should do them in order in a single thread. Otherwise, you'll have to collect the results, wait for all them to come back, then sort the results back into the desired order before printing them.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastEditorUserId=""1080064"" LastEditDate=""2017-08-17T17:05:12.863"" LastActivityDate=""2017-08-17T17:05:12.863"" CommentCount=""1"" />
",45741122
45741209,"45741209      <row Id=""45741209"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45741268"" PostTypeId=""2"" ParentId=""45741209"" CreationDate=""2017-08-17T17:12:04.560"" Score=""8"" Body=""&lt;p&gt;This:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for range &amp;lt;-md{&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;is not the same as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for range md{&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The latter ranges over the channel (what you want), while the former ranges over &lt;em&gt;the value received from the channel when the loop starts&lt;/em&gt;, which happens to be a two-element array, hence the two executions. You're also ignoring the value received from the channel in the &lt;code&gt;for&lt;/code&gt; statement, and reading from it &lt;em&gt;again&lt;/em&gt; in the loop body, ignoring every other message on the channel (though this makes no difference in the example, since every value is identical, it would make a significant difference in practice). What you really want is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for foo := range md{&#xA;    fmt.Println(foo)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here's a working version of your playground example, slightly modified to avoid &quot;program took too long&quot; errors because in its current form it never stops: &lt;a href=&quot;https://play.golang.org/p/RSUJFvluU5&quot; rel=&quot;noreferrer&quot;&gt;https://play.golang.org/p/RSUJFvluU5&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-17T17:12:04.560"" CommentCount=""1"" />
",45741268
45740042,"45740042      <row Id=""45740042"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45741285"" PostTypeId=""2"" ParentId=""45740042"" CreationDate=""2017-08-17T17:12:47.370"" Score=""0"" Body=""&lt;p&gt;Here an example based on your code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func sqlQueryHandler(response http.ResponseWriter, request *http.Request) {&#xA;    var (&#xA;        userName   = getUserName(request)&#xA;        sqlCommand = request.FormValue(&quot;sqlQuery&quot;)&#xA;    )&#xA;&#xA;    db, err := sql.Open(&quot;mysql&quot;, userName)&#xA;    if err != nil {&#xA;        fmt.Fprintf(response, &quot;\n\nAn error occured during your MySQL command: %s&quot;, err)&#xA;        // if you panic you stop here anyway. no else needed&#xA;        panic(err)&#xA;    }&#xA;    rows, err := db.Query(sqlCommand)&#xA;    if err != nil {&#xA;        http.Redirect(response, request, &quot;/error&quot;, 302)&#xA;        // return, so no else is needed&#xA;        return&#xA;    }&#xA;&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;    defer rows.Close()&#xA;    for rows.Next() {&#xA;        var (&#xA;            name string&#xA;            age  int&#xA;        )&#xA;        if err := rows.Scan(&amp;amp;name, &amp;amp;age); err != nil {&#xA;            panic(err)&#xA;        }&#xA;        fmt.Printf(&quot;%s is %d\n&quot;, name, age)&#xA;    }&#xA;    if err := rows.Err(); err != nil {&#xA;        panic(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There are several problems however with this approach:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You are passing the sql from outside the server. Anyone accessing this can read all the data from your server.&lt;/li&gt;&#xA;&lt;li&gt;One of Go's strengths is being a typed language. Here you are building a general sql query function which contradicts the &lt;code&gt;typed language&lt;/code&gt; paradigm. You can write general function dealing with differently structured data (like &lt;code&gt;json.Unmarshal()&lt;/code&gt;) -- but especially early in programming go you shouldn't.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""6220193"" LastActivityDate=""2017-08-17T17:12:47.370"" CommentCount=""1"" />
",45741285
45744165,"45744165      <row Id=""45744165"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45744248"" PostTypeId=""2"" ParentId=""45744165"" CreationDate=""2017-08-17T20:16:54.283"" Score=""5"" Body=""&lt;p&gt;A mutex does not need initialization.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also that could just be var mutex sync.Mutex, there's no need for a pointer, same for the int values, there's no need to set them to 0, so that example you found could be improved. In all these cases the zero value is fine. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;See this bit of effective go: &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/doc/effective_go.html#data&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/doc/effective_go.html#data&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Since the memory returned by new is zeroed, it's helpful to arrange&#xA;  when designing your data structures that the zero value of each type&#xA;  can be used without further initialization. This means a user of the&#xA;  data structure can create one with new and get right to work. For&#xA;  example, the documentation for bytes.Buffer states that &quot;the zero&#xA;  value for Buffer is an empty buffer ready to use.&quot; Similarly,&#xA;  sync.Mutex does not have an explicit constructor or Init method.&#xA;  Instead, the zero value for a sync.Mutex is defined to be an unlocked&#xA;  mutex.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""1601137"" LastEditorUserId=""1601137"" LastEditDate=""2017-08-17T20:20:59.913"" LastActivityDate=""2017-08-17T20:20:59.913"" CommentCount=""7"" />
",45744248
45744683,"45744683      <row Id=""45744683"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45744803"" PostTypeId=""2"" ParentId=""45744683"" CreationDate=""2017-08-17T20:55:12.980"" Score=""4"" Body=""&lt;p&gt;You need to derefence the pointer:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    count := 0&#xA;    for i:=0; i&amp;lt;10; i++ {&#xA;        counting(&amp;amp;count)&#xA;    }&#xA;}&#xA;&#xA;func counting(count *int) {&#xA;    fmt.Println(*count)&#xA;    *count++&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1412534"" LastEditorUserId=""53212"" LastEditDate=""2017-08-17T23:27:49.320"" LastActivityDate=""2017-08-17T23:27:49.320"" CommentCount=""1"" />
",45744803
45747849,"45747849      <row Id=""45747849"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45747875"" PostTypeId=""2"" ParentId=""45747849"" CreationDate=""2017-08-18T03:07:07.370"" Score=""5"" Body=""&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/sync/#WaitGroup&quot; rel=&quot;nofollow noreferrer&quot;&gt;sync.WaitGroup&lt;/a&gt; is what you want here. You &lt;code&gt;wg.Add(1)&lt;/code&gt; before starting each goroutine (or &lt;code&gt;wg.Add(n)&lt;/code&gt; if you know the count up front), &lt;code&gt;wg.Done()&lt;/code&gt; in each routine when finished, and  &lt;code&gt;wg.Wait()&lt;/code&gt; in &lt;code&gt;main&lt;/code&gt; to wait untill all finish. The linked docs have an example, and as the docs note, copying it won't do what you want; you may want to make the variable a pointer (&lt;code&gt;wg := new(sync.WaitGroup)&lt;/code&gt;).&lt;/p&gt;&#xA;"" OwnerUserId=""2714852"" LastEditorUserId=""2714852"" LastEditDate=""2017-08-18T03:17:56.030"" LastActivityDate=""2017-08-18T03:17:56.030"" CommentCount=""0"" />
",45747875
45749030,"45749030      <row Id=""45749030"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45751266"" PostTypeId=""2"" ParentId=""45749030"" CreationDate=""2017-08-18T07:48:05.383"" Score=""1"" Body=""&lt;p&gt;You need to use &lt;code&gt;$cond&lt;/code&gt; to do conditional counting. For example the following counts all tests, failed ones and successful ones in one step:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;o2 := bson.M{&#xA;    &quot;$group&quot; :bson.M{&#xA;        &quot;_id&quot;: &quot;$channel&quot;,&#xA;        &quot;Total&quot;: bson.M{&#xA;            &quot;$sum&quot;: 1,&#xA;        },&#xA;        &quot;Success&quot;: bson.M{&quot;$sum&quot;: bson.M{&#xA;            &quot;$cond&quot;: []interface{}{&#xA;                bson.M{ &quot;$eq&quot;: []interface{}{&quot;$teststatus&quot;, &quot;Pass&quot;}},&#xA;                1, 0,&#xA;            },&#xA;        }},&#xA;        &quot;Fail&quot;: bson.M{&quot;$sum&quot;: bson.M{&#xA;            &quot;$cond&quot;: []interface{}{&#xA;                bson.M{&quot;$eq&quot;: []interface{}{&quot;$teststatus&quot;, &quot;Fail&quot;}},&#xA;                1, 0,&#xA;            },&#xA;        }},&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-08-18T11:59:16.003"" LastActivityDate=""2017-08-18T11:59:16.003"" CommentCount=""7"" />
",45751266
45751608,"45751608      <row Id=""45751608"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45751833"" PostTypeId=""2"" ParentId=""45751608"" CreationDate=""2017-08-18T08:16:42.340"" Score=""5"" Body=""&lt;p&gt;I would really take the &lt;a href=&quot;https://tour.golang.org/welcome/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Tour&lt;/a&gt; to get a feeling of the language and its basic syntax first.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The type declaration you quoted only contains the &lt;em&gt;fields&lt;/em&gt; of the struct, but not its &lt;em&gt;methods&lt;/em&gt;. Methods are defined elsewhere, like functions but with a &lt;em&gt;receiver&lt;/em&gt; added which designates the type they belong to. For example the definition of &lt;code&gt;Client.Get()&lt;/code&gt; method is this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (c *Client) Get(url string) (resp *Response, err error) {&#xA;    req, err := NewRequest(&quot;GET&quot;, url, nil)&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    return c.Do(req)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The part before the method name is called the receiver, and that designates the type the method belogns to (&lt;code&gt;*Client&lt;/code&gt; in this example). See &lt;a href=&quot;https://golang.org/ref/spec#Method_declarations&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: Method declarations&lt;/a&gt; for more details.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;&amp;amp;&lt;/code&gt; is an &lt;a href=&quot;https://golang.org/ref/spec#Address_operators&quot; rel=&quot;nofollow noreferrer&quot;&gt;address operator&lt;/a&gt;, it takes the address of its operand. In this case the local variable &lt;code&gt;client&lt;/code&gt; will be of type &lt;a href=&quot;https://golang.org/pkg/net/http/#Client&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;*http.Client&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;http.Client{}&lt;/code&gt; is a &lt;a href=&quot;https://golang.org/ref/spec#Composite_literals&quot; rel=&quot;nofollow noreferrer&quot;&gt;composite literal&lt;/a&gt; which creates a value of the struct type &lt;code&gt;http.Client&lt;/code&gt;, and &lt;code&gt;&amp;amp;&lt;/code&gt; takes the address of the anonymous variable where this struct value is stored:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Address_operators&quot; rel=&quot;nofollow noreferrer&quot;&gt;Taking the address&lt;/a&gt; of a composite literal generates a pointer to a unique &lt;a href=&quot;https://golang.org/ref/spec#Variables&quot; rel=&quot;nofollow noreferrer&quot;&gt;variable&lt;/a&gt; initialized with the literal's value.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;It is used so that the &lt;code&gt;client&lt;/code&gt; variable will be a pointer to an &lt;code&gt;http.Client&lt;/code&gt; value, one that is encouraged to be shared and reused:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The Client's Transport typically has internal state (cached TCP connections), so Clients should be reused instead of created as needed. Clients are safe for concurrent use by multiple goroutines.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;And if &lt;code&gt;client&lt;/code&gt; is a pointer, you are free to pass it around to other functions, only the pointer value will be copied, not the pointed &lt;code&gt;http.Client&lt;/code&gt; struct, so the struct itself (the &lt;code&gt;http.Client&lt;/code&gt; value) will be reused. Should you not use a pointer, if you would pass it to other functions, the struct itself would be copied and not reused.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that in this simple example it doesn't really matter, as even though all methods of &lt;code&gt;http.Client&lt;/code&gt; are declared with pointer receiver, you can still call pointer methods on non-pointer variables, as &lt;code&gt;client.Get()&lt;/code&gt; would be a shorthand for &lt;code&gt;(&amp;amp;client).Get()&lt;/code&gt;. This is mentioned in &lt;a href=&quot;https://golang.org/ref/spec#Calls&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spec: Calls:&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;If &lt;code&gt;x&lt;/code&gt; is &lt;a href=&quot;https://golang.org/ref/spec#Address_operators&quot; rel=&quot;nofollow noreferrer&quot;&gt;addressable&lt;/a&gt; and &lt;code&gt;&amp;amp;x&lt;/code&gt;'s method set contains &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;x.m()&lt;/code&gt; is shorthand for &lt;code&gt;(&amp;amp;x).m()&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So even though the &lt;code&gt;&amp;amp;&lt;/code&gt; address operator is not needed in this simple example, it's good to keep the habit of using it, should the example grow or should you write code where this does matter (e.g. you pass around the created client).&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-08-18T13:48:39.487"" LastActivityDate=""2017-08-18T13:48:39.487"" CommentCount=""1"" />
",45751833
45753397,"45753397      <row Id=""45753397"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45753506"" PostTypeId=""2"" ParentId=""45753397"" CreationDate=""2017-08-18T09:42:18.857"" Score=""5"" Body=""&lt;p&gt;By calling the &lt;a href=&quot;https://golang.org/pkg/math/rand/#Seed&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;rand.Seed()&lt;/code&gt;&lt;/a&gt; function, passing it a (random) seed (typically the current unix timestamp). Quoting from &lt;a href=&quot;https://golang.org/pkg/math/rand/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; package doc:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Top-level functions, such as Float64 and Int, use a default shared Source that produces a deterministic sequence of values each time a program is run. Use the Seed function to initialize the default Source if different behavior is required for each run. &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;rand.Seed(time.Now().UnixNano())&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If &lt;code&gt;rand.Seed()&lt;/code&gt; is not called, the generator behaves as if seeded by 1:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Seed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-08-18T09:57:26.430"" LastActivityDate=""2017-08-18T09:57:26.430"" CommentCount=""2"" />
",45753506
45751869,"45751869      <row Id=""45751869"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45754815"" PostTypeId=""2"" ParentId=""45751869"" CreationDate=""2017-08-18T10:47:07.313"" Score=""2"" Body=""&lt;p&gt;This is a known issue, see this thread:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/golang/go/issues/20239&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/golang/go/issues/20239&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hopefully they will fix it soon but for now it sounds like adding a short delay in your test is the simplest solution - it probably doesn't come up in real world use much because you won't trigger a shutdown so soon after starting. &lt;/p&gt;&#xA;"" OwnerUserId=""1601137"" LastActivityDate=""2017-08-18T10:47:07.313"" CommentCount=""1"" />
",45754815
45746753,"45746753      <row Id=""45746753"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45757940"" PostTypeId=""2"" ParentId=""45746753"" CreationDate=""2017-08-18T13:31:44.873"" Score=""1"" Body=""&lt;p&gt;If you want your test to represent reality, you need to use it in the same manner that you do outside of tests. In this case you're not reading any of the responses, and the transport happens to be preventing lost connections because it's discarding them as quickly as possible since they can't be reused.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Reading the response will use the connection, and get it into a state where it's &quot;leaked&quot;. You also need to properly handle errors in all cases, and you always need to &lt;code&gt;Close()&lt;/code&gt; the response body. The pattern to handle an http response and make sure it's closed is very simple, and doesn't necessarily require testing (see &lt;a href=&quot;https://stackoverflow.com/questions/33238518/what-could-happen-if-i-dont-close-response-body-in-golang/33238755#33238755&quot;&gt;What could happen if I don&amp;#39;t close response.Body in golang?&lt;/a&gt;)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    resp, err := GetWithTimeout(s.URL)&#xA;    if err != nil {&#xA;        t.Fatal(err)&#xA;    }&#xA;    ioutil.ReadAll(resp.Body)&#xA;    resp.Body.Close()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is arguably of limited usefulness, since the most common bugs would result from improper error and response handling, and you're not testing that because the test needs to do it correctly in the first place.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The remaining problem here is that your &lt;code&gt;GetWithTimeout&lt;/code&gt; method returns an error value &lt;em&gt;and&lt;/em&gt; a valid http response, which contradicts the http package documentation as well as most user's expectations. If you're going to insert an error, it would be better to also handle the response at the same point to ensure the body is closed and discarded.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Finally, most of &lt;code&gt;GetWithTimeout&lt;/code&gt; is superfluous, since not only is creating Transports every time incorrect, but creating an http.Client every request is usually unnecessary as they are meant to be reused and are safe for concurrent use.&lt;/p&gt;&#xA;"" OwnerUserId=""32880"" LastEditorUserId=""32880"" LastEditDate=""2017-08-18T15:20:05.723"" LastActivityDate=""2017-08-18T15:20:05.723"" CommentCount=""16"" />
",45757940
45756011,"45756011      <row Id=""45756011"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45758022"" PostTypeId=""2"" ParentId=""45756011"" CreationDate=""2017-08-18T13:35:51.017"" Score=""5"" Body=""&lt;p&gt;You can create structs to mimic your json structure and then decode your json.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;bytes&quot;&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;)&#xA;&#xA;type Example struct {&#xA;    Type    string   `json:&quot;type,omitempty&quot;`&#xA;    Subsets []Subset `json:&quot;subsets,omitempty&quot;`&#xA;}&#xA;&#xA;type Subset struct {&#xA;    Addresses []Address `json:&quot;addresses,omitempty&quot;`&#xA;}&#xA;&#xA;type Address struct {&#xA;    IP string `json:&quot;IP,omitempty&quot;`&#xA;}&#xA;&#xA;    func main() {&#xA;&#xA;    m := []byte(`{&quot;type&quot;:&quot;example&quot;,&quot;data&quot;: {&quot;name&quot;: &quot;abc&quot;,&quot;labels&quot;: {&quot;key&quot;: &quot;value&quot;}},&quot;subsets&quot;: [{&quot;addresses&quot;: [{&quot;ip&quot;: &quot;192.168.103.178&quot;}],&quot;ports&quot;: [{&quot;port&quot;: 80}]}]}`)&#xA;&#xA;    r := bytes.NewReader(m)&#xA;    decoder := json.NewDecoder(r)&#xA;&#xA;    val := &amp;amp;Example{}&#xA;    err := decoder.Decode(val)&#xA;&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    // If you want to read a response body&#xA;    // decoder := json.NewDecoder(res.Body)&#xA;    // err := decoder.Decode(val)&#xA;&#xA;    // Subsets is a slice so you must loop over it&#xA;    for _, s := range val.Subsets {&#xA;        // within Subsets, address is also a slice&#xA;        // then you can access each IP from type Address&#xA;        for _, a := range s.Addresses {&#xA;            fmt.Println(a.IP)&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The output would be:&#xA;    &lt;code&gt;192.168.103.178&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;By decoding this to a struct, you can loop over any slice and not limit yourself to one IP&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Example here:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/sWA9qBWljA&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/sWA9qBWljA&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1793374"" LastEditorUserId=""1793374"" LastEditDate=""2017-08-18T19:37:03.337"" LastActivityDate=""2017-08-18T19:37:03.337"" CommentCount=""8"" />
",45758022
45755110,"45755110      <row Id=""45755110"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45758094"" PostTypeId=""2"" ParentId=""45755110"" CreationDate=""2017-08-18T13:39:19.947"" Score=""3"" Body=""&lt;p&gt;As Tim Cooper stated in his comment, you're comparing two different representations of the same data. &lt;code&gt;aligncheck&lt;/code&gt; tells you how much space is occupied in memory (heap/stack) by an instance of a struct, which is affected by struct field alignment and padding, for reasons &lt;a href=&quot;https://dave.cheney.net/2015/10/09/padding-is-hard&quot; rel=&quot;nofollow noreferrer&quot;&gt;explained at length elsewhere&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;binary.Read&lt;/code&gt; and &lt;code&gt;.Write&lt;/code&gt;, on the other hand, are not trying to store objects in memory with boundary alignment; they're just writing a stream of contiguous bytes. Therefor these will output the same size struct regardless of the order of fields, and it will always be the minimum size of the struct (because there is no padding added).&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-18T13:39:19.947"" CommentCount=""0"" />
",45758094
45764315,"45764315      <row Id=""45764315"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45764558"" PostTypeId=""2"" ParentId=""45764315"" CreationDate=""2017-08-18T20:23:45.933"" Score=""2"" Body=""&lt;p&gt;What decides what the backend is? That should help guide you. I've done something similar with support for multiple databases on a project, and what I did was basically:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;config&lt;/code&gt; package reads in config file, which determines what backend is being used&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;store&lt;/code&gt; package offers the generic interface and has a function that takes a config, and returns an implementation&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;server&lt;/code&gt; package references only the interface&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;main&lt;/code&gt; package reads the config, passes it to the factory function in &lt;code&gt;store&lt;/code&gt;, then injects the result into the server on creation&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;So when I create my server (which actually uses the data store), I pass the config to the factory function in &lt;code&gt;store&lt;/code&gt;, which returns an interface, and then inject that into the server. The only thing that has to know about the different concrete implementations is the same package that exposes the interface and factory; the &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;config&lt;/code&gt;, and &lt;code&gt;main&lt;/code&gt; packages see it as a black box.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-18T20:23:45.933"" CommentCount=""2"" />
",45764558
45765046,"45765046      <row Id=""45765046"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45765166"" PostTypeId=""2"" ParentId=""45765046"" CreationDate=""2017-08-18T21:16:38.113"" Score=""2"" Body=""&lt;p&gt;You need to either pre-size the slice with&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ma := make(movingaverage.MovingAverage, 5)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Which gives a slice of capacity 5 and length 5 with each entry set to the zero value &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Better though to initialise it as you did but then to add new entries with&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ma = append(ma, movingaverage.New(15)) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you know how big your eventual slice will be you can pre-allocate the underlying array with &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ma := make(movingaverage.MovingAverage, 0, 5)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which will give you a slice of length 0 but capacity 5 so you don't have to do repeated memory allocations and moves&lt;/p&gt;&#xA;"" OwnerUserId=""176300"" LastEditorUserId=""176300"" LastEditDate=""2017-08-19T11:20:01.793"" LastActivityDate=""2017-08-19T11:20:01.793"" CommentCount=""4"" />
",45765166
45766572,"45766572      <row Id=""45766572"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45766707"" PostTypeId=""2"" ParentId=""45766572"" CreationDate=""2017-08-19T01:02:08.337"" Score=""6"" Body=""&lt;p&gt;If you are timing an entire function, then you can use &lt;code&gt;defer&lt;/code&gt; to eliminate some of the repetitive code.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func elapsed(what string) func() {&#xA;    start := time.Now()&#xA;    return func() {&#xA;        fmt.Printf(&quot;%s took %v\n&quot;, what, time.Since(start))&#xA;    }&#xA;}&#xA;&#xA;func main() {&#xA;    defer elapsed(&quot;page&quot;)()&#xA;    time.Sleep(time.Second * 2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/8sKNmOdoEM&quot; rel=&quot;noreferrer&quot;&gt;playground example&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-08-19T01:02:08.337"" CommentCount=""1"" />
",45766707
45767208,"45767208      <row Id=""45767208"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45767259"" PostTypeId=""2"" ParentId=""45767208"" CreationDate=""2017-08-19T03:11:08.230"" Score=""4"" Body=""&lt;p&gt;You're not misunderstanding anything really, you just can't do that. The &lt;a href=&quot;https://golang.org/ref/spec#Passing_arguments_to_..._parameters&quot; rel=&quot;nofollow noreferrer&quot;&gt;spec&lt;/a&gt; says:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;If the final argument is assignable to a slice type &lt;code&gt;[]T&lt;/code&gt;, it may be passed unchanged as the value for a &lt;code&gt;...T&lt;/code&gt; parameter if the argument is followed by &lt;code&gt;...&lt;/code&gt;. In this case no new slice is created.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;In short, &lt;code&gt;p...&lt;/code&gt; can only be used as the &lt;em&gt;entire&lt;/em&gt; variadic part of the arguments, because when you do that, it simply re-uses &lt;code&gt;p&lt;/code&gt; as the parameter slice within the function, instead of making a new one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to add some arguments at the beginning, you would have to construct your own slice with all of the arguments first, something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;p := []string{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}&#xA;p2 := append([]string{&quot;d&quot;}, p...)&#xA;fmt.Println(path.Join(p2...))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which works alright and prints &quot;d/a/b/c&quot;.&lt;/p&gt;&#xA;"" OwnerUserId=""152948"" LastEditorUserId=""152948"" LastEditDate=""2017-08-19T03:33:50.470"" LastActivityDate=""2017-08-19T03:33:50.470"" CommentCount=""0"" />
",45767259
45768347,"45768347      <row Id=""45768347"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45768512"" PostTypeId=""2"" ParentId=""45768347"" CreationDate=""2017-08-19T06:37:58.120"" Score=""2"" Body=""&lt;p&gt;I have no clue about Go, but I can &lt;a href=&quot;https://github.com/go-sql-driver/mysql#dsn-data-source-name&quot; rel=&quot;nofollow noreferrer&quot;&gt;read the documentation&lt;/a&gt;, which suggests that you need to use this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;root:root@tcp(newserver)/metro&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or possibly:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mysql://root:root@tcp(newserver)/metro&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""893780"" LastActivityDate=""2017-08-19T06:37:58.120"" CommentCount=""1"" />
",45768512
45750135,"45750135      <row Id=""45750135"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45768844"" PostTypeId=""2"" ParentId=""45750135"" CreationDate=""2017-08-19T07:19:00.610"" Score=""1"" Body=""&lt;p&gt;You are looking for &lt;code&gt;editor.action.showHover&lt;/code&gt; shortcut:&lt;br&gt;&#xA;The default key is: &lt;code&gt;Ctrl+K Ctrl+I&lt;/code&gt; but not works with vim enabled, so you may change it to e.g.: &lt;code&gt;Ctrl+K Ctrl+K&lt;/code&gt;, this works for me:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can open this editor by going to the menu under File &gt; Preferences &gt; Keyboard Shortcuts. (Code &gt; Preferences &gt; Keyboard Shortcuts on Mac)&lt;br&gt;&#xA;then search for Show Hover (or just Hover) and change shortcut for  &lt;code&gt;editor.action.showHover&lt;/code&gt;, see:   &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/AdUXC.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/AdUXC.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;see:&#xA;&lt;a href=&quot;https://i.stack.imgur.com/3xB0y.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/3xB0y.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8208215"" LastEditorUserId=""8208215"" LastEditDate=""2017-08-19T07:24:47.943"" LastActivityDate=""2017-08-19T07:24:47.943"" CommentCount=""1"" />
",45768844
45771734,"45771734      <row Id=""45771734"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45772091"" PostTypeId=""2"" ParentId=""45771734"" CreationDate=""2017-08-19T13:26:23.553"" Score=""3"" Body=""&lt;p&gt;Your path when cloning the source must be on the golang PATH like : &#xA;&lt;code&gt;/home/gujarat/golang/src/github.com/lucapette/fakedata&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;as you can see my Path to golang path is : &lt;code&gt;/home/gujarat/golang/&lt;/code&gt;.&#xA;You can also print your golang path in your terminal by entering : &lt;code&gt;$GOPATH&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And the &lt;code&gt;git clone&lt;/code&gt; should be in the following the exact as above path : &lt;code&gt;src/github.com/lucapette/&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/&#xA;mkdir lucaptte&#xA;cd lucapette&#xA;git clone https://github.com/lucapette/fakedata.git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;When you are running the &lt;code&gt;make&lt;/code&gt; command which trigger &lt;code&gt;go build&lt;/code&gt; this command will look the &lt;code&gt;$GOPATH&lt;/code&gt; and your &lt;code&gt;$GOROOT&lt;/code&gt; folder.&lt;/p&gt;&#xA;"" OwnerUserId=""2652524"" LastActivityDate=""2017-08-19T13:26:23.553"" CommentCount=""1"" />
",45772091
45776043,"45776043      <row Id=""45776043"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45776499"" PostTypeId=""2"" ParentId=""45776043"" CreationDate=""2017-08-19T21:35:39.790"" Score=""2"" Body=""&lt;p&gt;Export var:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;CC_TEST_REPORTER_ID=...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Run:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for pkg in $(go list ./... | grep -v vendor); do&#xA;    go test -coverprofile=$(echo $pkg | tr / -).cover $pkg&#xA;done&#xA;echo &quot;mode: set&quot; &amp;gt; c.out&#xA;grep -h -v &quot;^mode:&quot; ./*.cover &amp;gt;&amp;gt; c.out&#xA;rm -f *.cover&#xA;&#xA;./cc-test-reporter after-build&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""551932"" LastActivityDate=""2017-08-19T21:35:39.790"" CommentCount=""2"" />
",45776499
45777113,"45777113      <row Id=""45777113"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45777356"" PostTypeId=""2"" ParentId=""45777113"" CreationDate=""2017-08-20T00:11:50.847"" Score=""5"" Body=""&lt;p&gt;This is not currently possible with the go-sqlite3 library. &lt;a href=&quot;https://github.com/mattn/go-sqlite3/blob/1828334c4a7937cf4d957e36e995b9d6ba4fc535/sqlite3.go#L689-L693&quot; rel=&quot;noreferrer&quot;&gt;Looking at the source&lt;/a&gt;, you can see &lt;code&gt;SQLITE_OPEN_CREATE&lt;/code&gt; is always passed to the open function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;rv := C._sqlite3_open_v2(name, &amp;amp;db,&#xA;    C.SQLITE_OPEN_FULLMUTEX|&#xA;        C.SQLITE_OPEN_READWRITE|&#xA;        C.SQLITE_OPEN_CREATE,&#xA;    nil)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I would suggest you &lt;a href=&quot;https://github.com/mattn/go-sqlite3/issues/new&quot; rel=&quot;noreferrer&quot;&gt;open a ticket&lt;/a&gt; on the package to add such functionality.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the mean time, you could add the following code before your DB is created (keep in mind that a race condition exists, which is why you should still request this feature in the library itself):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;_, err := os.Stat(&quot;db.sqlite3&quot;)&#xA;if os.IsNotExist(err) {&#xA;    panic(&quot;database doesn't exist&quot;)&#xA;}&#xA;// TODO: create db&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""142162"" LastActivityDate=""2017-08-20T00:11:50.847"" CommentCount=""0"" />
",45777356
45776238,"45776238      <row Id=""45776238"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45777570"" PostTypeId=""2"" ParentId=""45776238"" CreationDate=""2017-08-20T00:58:31.007"" Score=""3"" Body=""&lt;p&gt;The other answer here advocates putting each microservice into its own repository. There may be valid reasons for splitting things up that way, but there may be equally valid reasons from wanting to keep everything in one repository as well (it really depends on your project / circumstances)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want all the code in one repository, you can- you just need to follow Go's package rules. (this is a good read: &lt;a href=&quot;https://golang.org/doc/code.html#Workspaces&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/doc/code.html#Workspaces&lt;/a&gt;)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you have a mix of commands and libraries, the directory structure you proposed in your question comes close, but you probably don't need the &lt;code&gt;src&lt;/code&gt; directories in there. Here's an example of how a directory structure within a repo with libraries and commands might look:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;lib1/&#xA;-- some.go&#xA;-- source.go&#xA;lib2/&#xA;-- more.go&#xA;-- source.go&#xA;cmd/&#xA;-- microservice1/&#xA;   -- main.go&#xA;-- microservice2/&#xA;   -- anothermain.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To use this repository, you would clone it inside a Go workspace on your system (see the link I shared above). Assuming your repository lives in github.com/mybiz/project, and your &lt;code&gt;GOPATH&lt;/code&gt; was &lt;code&gt;~/go&lt;/code&gt;, the workspace would look as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;~/go/src/github.com/mybiz/&#xA;  -- project/&#xA;     &amp;lt;clone repo in here&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The file &lt;code&gt;cmd/microservice1/main.go&lt;/code&gt; would include the library &lt;code&gt;lib1&lt;/code&gt; via a path it expects it in relative to &lt;code&gt;$GOPATH/src&lt;/code&gt; as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import &quot;github.com/mybiz/project/lib1&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, your code has access to the exported symbols in that package using the package name declared in the files under &lt;code&gt;lib1&lt;/code&gt;... usually just:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package lib1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In &lt;code&gt;cmd/microservice1/main.go&lt;/code&gt;, with the import above, you could use &lt;code&gt;lib1&lt;/code&gt; symbols as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;lib1.CallMe()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I hope that helps clear up how Go's directory structure works.&lt;/p&gt;&#xA;"" OwnerUserId=""4648046"" LastActivityDate=""2017-08-20T00:58:31.007"" CommentCount=""1"" />
",45777570
45777038,"45777038      <row Id=""45777038"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45777951"" PostTypeId=""2"" ParentId=""45777038"" CreationDate=""2017-08-20T02:36:28.633"" Score=""2"" Body=""&lt;p&gt;The &lt;a href=&quot;https://golang.org/ref/spec#Declarations_and_scope&quot; rel=&quot;nofollow noreferrer&quot;&gt;specification says&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The scope of the package name of an imported package is the file block of the file containing the import declaration.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Because imports do not have package scope, imports are not merged together and are required in each file that uses the import.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The scoping for imports is unrelated to how the compiler and linker load imported packages. These tools are smart enough to load any given package once.&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastEditorUserId=""5728991"" LastEditDate=""2017-08-20T14:54:44.610"" LastActivityDate=""2017-08-20T14:54:44.610"" CommentCount=""4"" />
",45777951
45781644,"45781644      <row Id=""45781644"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45782606"" PostTypeId=""2"" ParentId=""45781644"" CreationDate=""2017-08-20T13:21:33.010"" Score=""0"" Body=""&lt;p&gt;Here is the solution which I found &lt;a href=&quot;https://stackoverflow.com/a/12206584/5799860&quot;&gt;here&lt;/a&gt; (thank you &lt;a href=&quot;https://stackoverflow.com/users/362021/malcolm&quot;&gt;Malcolm&lt;/a&gt;)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func Readln(r *bufio.Reader) (string, error) {&#xA;    var (&#xA;        isPrefix = true&#xA;        err      error&#xA;        line, ln []byte&#xA;    )&#xA;    for isPrefix &amp;amp;&amp;amp; err == nil {&#xA;        line, isPrefix, err = r.ReadLine()&#xA;        ln = append(ln, line...)&#xA;    }&#xA;    return string(ln), err&#xA;}&#xA;&#xA;func handle(s string) {&#xA;    //Do something with your string&#xA;}&#xA;&#xA;func main() {&#xA;    c := exec.Command(&quot;sh&quot;, &quot;./tmuxpipe.sh&quot;)&#xA;    err := c.Run()&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    f, err := os.Open(&quot;/tmp/tmuxpipe&quot;)&#xA;    if err != nil {&#xA;        fmt.Printf(&quot;error opening file: %v\n&quot;, err)&#xA;        os.Exit(1)&#xA;    }&#xA;    r := bufio.NewReader(f)&#xA;    s, e := Readln(r)&#xA;    for e == nil {&#xA;        handle(s)&#xA;        log.Println(s)&#xA;        s, e = Readln(r)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;here is the tmuxpipe.sh:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mkfifo /tmp/tmuxpipe&#xA;tmux pipe-pane -o -t tmuxSession 'cat &amp;gt;&amp;gt; /tmp/tmuxpipe'&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The reason I did not just use &lt;code&gt;exec.Command()&lt;/code&gt; there, is because for some reason beyond my comprehension this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;c := exec.Command(&quot;tmux&quot;, &quot;pipe-pane&quot;, &quot;-o&quot;, &quot;-t&quot;, &quot;tmuxSession&quot;, 'cat &amp;gt;&amp;gt; /tmp/tmuxpipe'&quot;) &#xA;err := c.Run()&#xA;handleError(err)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;did not work (for me).&#xA;There was no error occuring, but the output of the tmux session wasn't displayd either.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hope this helps anybody&lt;/p&gt;&#xA;"" OwnerUserId=""5799860"" LastActivityDate=""2017-08-20T13:21:33.010"" CommentCount=""0"" />
",45782606
45785639,"45785639      <row Id=""45785639"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45785661"" PostTypeId=""2"" ParentId=""45785639"" CreationDate=""2017-08-20T18:43:28.337"" Score=""2"" Body=""&lt;p&gt;The outer dimension is just &lt;code&gt;len(x)&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is the slice of slices you pass to the function (your example &lt;code&gt;[][]float64{{11, 5, 14, 1}, {11, 5, 14, 1}}&lt;/code&gt;).&#xA;However, the inner dimensions are not guaranteed to be equal so you will have to go through each element and check what &lt;code&gt;len&lt;/code&gt; they have.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you have the guarantee than each element of &lt;code&gt;x&lt;/code&gt; has the same number of elements, just find &lt;code&gt;len(x[0])&lt;/code&gt; if &lt;code&gt;len(x) &amp;gt; 0&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""4236078"" LastActivityDate=""2017-08-20T18:43:28.337"" CommentCount=""2"" />
",45785661
45786042,"45786042      <row Id=""45786042"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45786193"" PostTypeId=""2"" ParentId=""45786042"" CreationDate=""2017-08-20T19:47:35.743"" Score=""2"" Body=""&lt;p&gt;&lt;strong&gt;1. For the first point, the infinite loop:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Citing from &lt;a href=&quot;https://golang.org/ref/spec#Receive_operator&quot; rel=&quot;nofollow noreferrer&quot;&gt;golang language spec&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;A receive operation on a closed channel can always proceed&#xA;  immediately, yielding the element type's zero value after any&#xA;  previously sent values have been received.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So in this function&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func errorChannelWatch(ch chan error, list []error) {&#xA;    for {&#xA;        select {&#xA;        case err := &amp;lt;- ch:&#xA;&#xA;            list = append(list, err)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;after ch gets closed this turns into an infinite loop adding &lt;code&gt;nil&lt;/code&gt; values to &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try this instead:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func errorChannelWatch(ch chan error, list []error) {&#xA;    for err := range ch {&#xA;            list = append(list, err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;2. For the second point, why you don't see anything in your error list:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The problem is this call:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;errorChannel := make(chan error)&#xA;errorList := []error{}&#xA;&#xA;go errorChannelWatch(errorChannel, errorList)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here you hand &lt;code&gt;errorChannelWatch&lt;/code&gt; the &lt;code&gt;errorList&lt;/code&gt; as a value. So the slice &lt;code&gt;errorList&lt;/code&gt; will not be changed by the function. What is changed, is the underlying array, as long as the &lt;code&gt;append&lt;/code&gt; calls don't need to allocate a new one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To remedy the situation, either hand a slice pointer to &lt;code&gt;errorChannelWatch&lt;/code&gt; or rewrite it as a call to a closure, capturing&#xA;&lt;code&gt;errorList&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For the first proposed solution, change &lt;code&gt;errorChannelWatch&lt;/code&gt; to&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func errorChannelWatch(ch chan error, list *[]error) {&#xA;    for err := range ch {&#xA;            *list = append(*list, err)&#xA;    }&#xA;}    &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and the call to&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;errorChannel := make(chan error)&#xA;errorList := []error{}&#xA;&#xA;go errorChannelWatch(errorChannel, &amp;amp;errorList)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For the second proposed solution, just change the call to&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;   errorChannel := make(chan error)&#xA;   errorList := []error{}&#xA;&#xA;   go func() {&#xA;      for err := range errorChannel {&#xA;          errorList = append(errorList, err)&#xA;      }&#xA;   } () &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;3. A minor remark:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One could think, that there is a synchronisation problem here:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fileWaitGroup.Wait()&#xA;&#xA;close(errorChannel)&#xA;&#xA;log.Println(errorList)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;How can you be sure, that errorList isn't modified, after the call to close? One could reason, that you can't know, how many values the goroutine &lt;code&gt;errorChannelWatch&lt;/code&gt; still has to process.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your synchronisation seems correct to me, as you do the &lt;code&gt;wg.Done()&lt;/code&gt;&#xA;after the send to the error channel and so all error values will&#xA;be sent, when &lt;code&gt;fileWaitGroup.Wait()&lt;/code&gt; returns.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But that can change, if someone later adds a buffering to the error&#xA;channel or alters the code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So I would advise to at least explain the synchronisation in a comment.&lt;/p&gt;&#xA;"" OwnerUserId=""7824574"" LastEditorUserId=""7824574"" LastEditDate=""2017-08-20T20:06:45.700"" LastActivityDate=""2017-08-20T20:06:45.700"" CommentCount=""0"" />
",45786193
45786756,"45786756      <row Id=""45786756"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45786786"" PostTypeId=""2"" ParentId=""45786756"" CreationDate=""2017-08-20T21:03:04.883"" Score=""4"" Body=""&lt;p&gt;You'll want to use &lt;a href=&quot;https://godoc.org/regexp#Regexp.ReplaceAllStringFunc&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Regexp.ReplaceAllStringFunc&lt;/code&gt;&lt;/a&gt;, which allows you to use a function result as the replacement of a substring:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;    &quot;regexp&quot;&#xA;    &quot;strings&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    logLine := `Date=2017-06-29 03:10:01.140 -700 PDT,clientDataRate=&quot;12.0,18.0,24.0,36.0,48.0,54.0&quot;,host=superawesomehost.foo,foo=bar`&#xA;    fmt.Println(&quot;logLine:        &quot;, logLine)&#xA;&#xA;    reg, err := regexp.Compile(`&quot;([^&quot;]*)&quot;`)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    repairedLogLine := reg.ReplaceAllStringFunc(logLine, func(entry string) string {&#xA;        return strings.Replace(entry, &quot;,&quot;, &quot; &quot;, -1)&#xA;    })&#xA;    fmt.Println(&quot;repairedLogLine:&quot;, repairedLogLine)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/BsZxcrrvaR&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/BsZxcrrvaR&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""142162"" LastActivityDate=""2017-08-20T21:03:04.883"" CommentCount=""1"" />
",45786786
45791233,"45791233      <row Id=""45791233"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45791340"" PostTypeId=""2"" ParentId=""45791233"" CreationDate=""2017-08-21T07:19:55.470"" Score=""3"" Body=""&lt;p&gt;Just get the &lt;code&gt;len&lt;/code&gt; of &lt;code&gt;array&lt;/code&gt; and the &lt;code&gt;len&lt;/code&gt; of any element of &lt;code&gt;array&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;len(array) // 4&#xA;len(array[0]) // 5&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As a note, you are using a 2d slice, not array. Read more about Go slices &lt;a href=&quot;https://blog.golang.org/slices&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""816892"" LastEditorUserId=""816892"" LastEditDate=""2017-08-21T08:16:48.653"" LastActivityDate=""2017-08-21T08:16:48.653"" CommentCount=""0"" />
",45791340
45791241,"45791241      <row Id=""45791241"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45791377"" PostTypeId=""2"" ParentId=""45791241"" CreationDate=""2017-08-21T07:21:56.143"" Score=""12"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/time/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Package time&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Monotonic Clocks&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Operating systems provide both a “wall clock,” which is subject to&#xA;  changes for clock synchronization, and a “monotonic clock,” which is&#xA;  not. The general rule is that the wall clock is for telling time and&#xA;  the monotonic clock is for measuring time. Rather than split the API,&#xA;  in this package the Time returned by time.Now contains both a wall&#xA;  clock reading and a monotonic clock reading; later time-telling&#xA;  operations use the wall clock reading, but later time-measuring&#xA;  operations, specifically comparisons and subtractions, use the&#xA;  monotonic clock reading.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;For example, this code always computes a positive elapsed time of&#xA;  approximately 20 milliseconds, even if the wall clock is changed&#xA;  during the operation being timed:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;start := time.Now()&#xA;... operation that takes 20 milliseconds ...&#xA;t := time.Now()&#xA;elapsed := t.Sub(start)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;Other idioms, such as time.Since(start), time.Until(deadline), and&#xA;  time.Now().Before(deadline), are similarly robust against wall clock&#xA;  resets.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Starting with Go 1.9 (released August 24, 2017), Go uses a monotonic clock for durations.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://golang.org/design/12914-monotonic&quot; rel=&quot;nofollow noreferrer&quot;&gt;Proposal: Monotonic Elapsed Time Measurements in Go&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-08-25T00:04:10.980"" LastActivityDate=""2017-08-25T00:04:10.980"" CommentCount=""3"" />
",45791377
45791820,"45791820      <row Id=""45791820"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45792195"" PostTypeId=""2"" ParentId=""45791820"" CreationDate=""2017-08-21T08:12:24.697"" Score=""2"" Body=""&lt;p&gt;Start by seeding the pseudorandom number generator. For example,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;math/rand&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    rand.Seed(time.Now().UnixNano())&#xA;    const letterBytes = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;&#xA;    b := make([]byte, 7)&#xA;    for i := range b {&#xA;        b[i] = letterBytes[rand.Intn(len(letterBytes))]&#xA;    }&#xA;    fmt.Println(string(b))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;jfXtySC&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;a href=&quot;https://play.golang.org&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Go Playground&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;About the Playground&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;In the playground the time begins at 2009-11-10 23:00:00 UTC&#xA;  (determining the significance of this date is an exercise for the&#xA;  reader). This makes it easier to cache programs by giving them&#xA;  deterministic output.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Therefore, in the Go playground, &lt;code&gt;time.Now().UnixNano()&lt;/code&gt; always returns the same value. For a random seed value, run the code on your computer.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;For any Unicode code point (Go rune),&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;math/rand&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;math/rand&quot;&#xA;    &quot;time&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    rand.Seed(time.Now().UnixNano())&#xA;    chars := []rune(&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ世界!@=&quot;)&#xA;    r := make([]rune, 50)&#xA;    for i := range r {&#xA;        r[i] = chars[rand.Intn(len(chars))]&#xA;    }&#xA;    fmt.Println(string(r))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;世QRYSp=@giJMIKly=tXRefjtVkeE!yHhTSQHvLyUYdRNIBbILW&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-08-21T13:21:55.657"" LastActivityDate=""2017-08-21T13:21:55.657"" CommentCount=""6"" />
",45792195
45793299,"45793299      <row Id=""45793299"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45794023"" PostTypeId=""2"" ParentId=""45793299"" CreationDate=""2017-08-21T09:46:23.443"" Score=""2"" Body=""&lt;p&gt;Yes &lt;code&gt;tlsHandshakeTimeoutError&lt;/code&gt; - is not exported and the only one &#xA;possibility to check on this error is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import &quot;net/url&quot;&#xA;&#xA;// ....&#xA;&#xA;if urlError,ok :=  err.(*url.Error)  ; ok {&#xA;    if urlError.Error() == &quot;net/http: TLS handshake timeout&quot; {&#xA;        // handle the error&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here is open ticket with discussion about it:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/golang/go/issues/15935&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/golang/go/issues/15935&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;By the way &lt;code&gt;http&lt;/code&gt; errors (and &lt;code&gt;tlsHandshakeTimeoutError&lt;/code&gt; also) provide also:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type WithTimeout interface {&#xA;   Timeout() bool&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can use it for you check if you don't like string comparsion. &lt;a href=&quot;https://github.com/grpc/grpc-go/blob/25b4a426b40c26c07c80af674b03db90b5bd4a60/transport/http2_client.go#L125&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&lt;/a&gt; is example of isTemporary implementation from http2 package.&lt;/p&gt;&#xA;"" OwnerUserId=""1209451"" LastEditorUserId=""1209451"" LastEditDate=""2017-08-22T09:52:53.227"" LastActivityDate=""2017-08-22T09:52:53.227"" CommentCount=""3"" />
",45794023
45797858,"45797858      <row Id=""45797858"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45798099"" PostTypeId=""2"" ParentId=""45797858"" CreationDate=""2017-08-21T13:14:13.243"" Score=""4"" Body=""&lt;p&gt;Use &lt;code&gt;log.Print&lt;/code&gt; instead of &lt;code&gt;log.Fatal&lt;/code&gt; and return the error value that you declared in signature of function &lt;code&gt;checkIfReadable&lt;/code&gt;. Or don't the error it and return it to some place that knows better how to handle it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The function &lt;code&gt;log.Fatal&lt;/code&gt; is strictly for reporting your program's &lt;em&gt;final breath&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Calling &lt;code&gt;log.Fatal&lt;/code&gt; is a bit worse than calling panic (there is also &lt;code&gt;log.panic&lt;/code&gt;), because it does not execute deferred calls. Remember, that overusing &lt;code&gt;panic&lt;/code&gt; in Go is considered a bad style. &lt;/p&gt;&#xA;"" OwnerUserId=""450989"" LastEditorUserId=""450989"" LastEditDate=""2017-08-21T13:31:04.500"" LastActivityDate=""2017-08-21T13:31:04.500"" CommentCount=""3"" />
",45798099
44044556,"44044556      <row Id=""44044556"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45798318"" PostTypeId=""2"" ParentId=""44044556"" CreationDate=""2017-08-21T13:25:11.670"" Score=""0"" Body=""&lt;h2&gt;My solution.&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;To eliminate the warnings I configured vim and git to work the way golang likes.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;git&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The following command stops git from trying to do what is normally the right thing: standard line-endings in repo, platform line-endings on each developers working directory, convert as needed.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git config core.autocrlf false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now git won't change &lt;code&gt;lf&lt;/code&gt; to &lt;code&gt;crlf&lt;/code&gt; on checkout or bleat about line-endings.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;vim&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;In &lt;code&gt;_vimrc&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;au FileType go setl ts=3 sw=3 nowrap nu syntax=go ruler fileformat=unix&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;fileformat=unix&lt;/code&gt; seems to keep vim complaint-free regarding line-endings that are not native to the platform.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;h3&gt;Footnote&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;3 months after posting the above question I haven't come across any drawbacks or problems - at least not the way I use &lt;code&gt;go&lt;/code&gt;, &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt;. &lt;/p&gt;&#xA;"" OwnerUserId=""477035"" LastEditorUserId=""477035"" LastEditDate=""2017-08-21T13:31:52.457"" LastActivityDate=""2017-08-21T13:31:52.457"" CommentCount=""0"" />
",45798318
45801809,"45801809      <row Id=""45801809"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45802094"" PostTypeId=""2"" ParentId=""45801809"" CreationDate=""2017-08-21T16:45:46.937"" Score=""2"" Body=""&lt;p&gt;A slice is a struct with a pointer to an underlying array, a length, and a capacity.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type slice struct {&#xA;    array unsafe.Pointer&#xA;    len   int&#xA;    cap   int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You are changing the underlying array after you have appended the slice struct. &lt;code&gt;ia.Next()&lt;/code&gt; reuses its return buffer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;&#xA;    &quot;golang.org/x/text/unicode/norm&quot;&#xA;)&#xA;&#xA;func Normalizer(s string) (ss [][]byte) {&#xA;    ss = make([][]byte, 0)&#xA;    var ia norm.Iter&#xA;    ia.InitString(norm.NFC, s)&#xA;    for !ia.Done() {&#xA;        next := ia.Next()&#xA;        fmt.Println(string(next), &amp;amp;next[0])&#xA;        ss = append(ss, next)&#xA;    }&#xA;    fmt.Println()&#xA;    for i := range ss {&#xA;        fmt.Println(string(ss[i]), &amp;amp;ss[i][0])&#xA;    }&#xA;    fmt.Println()&#xA;    return&#xA;}&#xA;&#xA;func main() {&#xA;    ss := Normalizer(&quot;abc&quot;)&#xA;    fmt.Printf(&quot;%s\n&quot;, ss)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;a 0xc420092228&#xA;b 0xc420092228&#xA;c 0xc420092228&#xA;&#xA;c 0xc420092228&#xA;c 0xc420092228&#xA;c 0xc420092228&#xA;&#xA;[c c c]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Replace a copy of a slice struct&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;next := ia.Next()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;with a new slice struct with a new underlying array&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;next := append([]byte(nil), ia.Next()...)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For example,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;&#xA;    &quot;golang.org/x/text/unicode/norm&quot;&#xA;)&#xA;&#xA;func Normalizer(s string) (ss [][]byte) {&#xA;    ss = make([][]byte, 0)&#xA;    var ia norm.Iter&#xA;    ia.InitString(norm.NFC, s)&#xA;    for !ia.Done() {&#xA;        next := append([]byte(nil), ia.Next()...)&#xA;        fmt.Println(string(next), &amp;amp;next[0])&#xA;        ss = append(ss, next)&#xA;    }&#xA;    fmt.Println()&#xA;    for i := range ss {&#xA;        fmt.Println(string(ss[i]), &amp;amp;ss[i][0])&#xA;    }&#xA;    fmt.Println()&#xA;    return&#xA;}&#xA;&#xA;func main() {&#xA;    ss := Normalizer(&quot;abc&quot;)&#xA;    fmt.Printf(&quot;%s\n&quot;, ss)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;a 0xc4200120d0&#xA;b 0xc4200120e8&#xA;c 0xc420012108&#xA;&#xA;a 0xc4200120d0&#xA;b 0xc4200120e8&#xA;c 0xc420012108&#xA;&#xA;[a b c]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;References:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Slice_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;Slice types&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://blog.golang.org/go-slices-usage-and-internals&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Slices: usage and internals&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://blog.golang.org/slices&quot; rel=&quot;nofollow noreferrer&quot;&gt;Arrays, slices (and strings): The mechanics of 'append'&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-08-21T22:40:44.687"" LastActivityDate=""2017-08-21T22:40:44.687"" CommentCount=""2"" />
",45802094
45802492,"45802492      <row Id=""45802492"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45802962"" PostTypeId=""2"" ParentId=""45802492"" CreationDate=""2017-08-21T17:48:07.703"" Score=""1"" Body=""&lt;p&gt;You can't. You can find this in net/http source, it only happens if the request was malformed:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/golang/go/blob/master/src/net/http/server.go#L1744&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/golang/go/blob/master/src/net/http/server.go#L1744&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think your problem might be a new line in the header you're adding in curl?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;401, 403, 404, 500 errors you'll be able to respond with json, but bad requests or bad headers (too long, malformed) are handled within server.go. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is at present no way to intercept such errors though it is under &lt;a href=&quot;https://github.com/golang/go/issues/18997&quot; rel=&quot;nofollow noreferrer&quot;&gt;consideration&lt;/a&gt;, so your only solution in go would be to patch the stdlib source (I don't recommend this). However, since this error only presents if the client has made a mistake and the request is malformed, it's probably not a huge problem.  The reason for the text response is so that a browser or similar client (like curl without -v) doesn't just see an empty response. You could put a proxy like nginx in front of your app but then you'd never see the request either as it is a bad request, your proxy would handle it. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Possibly you'd be able to do it with a proxy like nginx in front though if you set a specific static error page for it to serve for 400 errors and serve a 400.json file that you specify? That's the only solution I can think of. A directive something like this might work for nginx:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;error_page 400 /400.json;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you'd like to be able to customise these errors, perhaps add a comment to the issue linked to let them know you had this specific problem. &lt;/p&gt;&#xA;"" OwnerUserId=""1601137"" LastEditorUserId=""1601137"" LastEditDate=""2017-08-21T19:28:19.947"" LastActivityDate=""2017-08-21T19:28:19.947"" CommentCount=""1"" />
",45802962
45803373,"45803373      <row Id=""45803373"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45803440"" PostTypeId=""2"" ParentId=""45803373"" CreationDate=""2017-08-21T18:22:22.010"" Score=""3"" Body=""&lt;p&gt;I don't know of any possible way for this to fail, and if it is possible, it would result in a panic (and therefor application crash). I have never seen it happen, and I'm aware of examples of applications running &lt;em&gt;millions&lt;/em&gt; of goroutines. The only limiting factor is available memory to allocate the goroutine stack.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;go foo()&lt;/code&gt; is not like &lt;code&gt;pthread_create&lt;/code&gt;. Goroutines are lightweight green threads handled by the Go runtime, and scheduled to run on OS threads. Starting a goroutine does not start a new OS thread.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-21T18:22:22.010"" CommentCount=""4"" />
",45803440
45789101,"45789101      <row Id=""45789101"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45803548"" PostTypeId=""2"" ParentId=""45789101"" CreationDate=""2017-08-21T18:30:10.183"" Score=""0"" Body=""&lt;p&gt;I got the solution for this...&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Is the global value not getting set? Or the changes to that global var is not getting updated in TestHelperProcess?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Since in &lt;code&gt;TestPrintDate()&lt;/code&gt;, &lt;code&gt;fakeExecCommand&lt;/code&gt; is called instead of exec.Command, and calling &lt;code&gt;fakeExecCommand&lt;/code&gt; runs &lt;code&gt;go test&lt;/code&gt; to run only &lt;code&gt;TestHelperProcess()&lt;/code&gt;, it's altogether a new invocation where only &lt;code&gt;TestHelperProcess()&lt;/code&gt; will be executed. Since only &lt;code&gt;TestHelperProcess()&lt;/code&gt; is called, the global variables aren't being set.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The solution would be to set the Env in the &lt;code&gt;fakeExecCommand&lt;/code&gt;, and retrieve that in &lt;code&gt;TestHelperProcess()&lt;/code&gt; and return those values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;PS&gt; &lt;code&gt;TestHelperProcess&lt;/code&gt; is renamed to &lt;code&gt;TestExecCommandHelper&lt;/code&gt;&lt;/em&gt;, And few variables are renamed.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;os&quot;&#xA;    &quot;os/exec&quot;&#xA;    &quot;strconv&quot;&#xA;    &quot;testing&quot;&#xA;)&#xA;&#xA;var mockedExitStatus = 0&#xA;var mockedStdout string&#xA;&#xA;func fakeExecCommand(command string, args ...string) *exec.Cmd {&#xA;    cs := []string{&quot;-test.run=TestExecCommandHelper&quot;, &quot;--&quot;, command}&#xA;    cs = append(cs, args...)&#xA;    cmd := exec.Command(os.Args[0], cs...)&#xA;    es := strconv.Itoa(mockedExitStatus)&#xA;    cmd.Env = []string{&quot;GO_WANT_HELPER_PROCESS=1&quot;,&#xA;        &quot;STDOUT=&quot; + mockedStdout,&#xA;        &quot;EXIT_STATUS=&quot; + es}&#xA;    return cmd&#xA;}&#xA;&#xA;func TestExecCommandHelper(t *testing.T) {&#xA;    if os.Getenv(&quot;GO_WANT_HELPER_PROCESS&quot;) != &quot;1&quot; {&#xA;        return&#xA;    }&#xA;&#xA;    // println(&quot;Mocked stdout:&quot;, os.Getenv(&quot;STDOUT&quot;))&#xA;    fmt.Fprintf(os.Stdout, os.Getenv(&quot;STDOUT&quot;))&#xA;    i, _ := strconv.Atoi(os.Getenv(&quot;EXIT_STATUS&quot;))&#xA;    os.Exit(i)&#xA;}&#xA;&#xA;func TestPrintDate(t *testing.T) {&#xA;    mockedExitStatus = 1&#xA;    mockedStdout = &quot;Sun Aug 201&quot;&#xA;    execCommand = fakeExecCommand&#xA;    defer func() { execCommand = exec.Command }()&#xA;    expDate := &quot;Sun Aug 20&quot;&#xA;&#xA;    out, _ := printDate()&#xA;    if string(out) != expDate {&#xA;        t.Errorf(&quot;Expected %q, got %q&quot;, expDate, string(out))&#xA;    }&#xA;}&#xA;&#xA;func TestPrintDateUnableToRunError(t *testing.T) {&#xA;    mockedExitStatus = 1&#xA;    mockedStdout = &quot;Unable to run date command&quot;&#xA;    execCommand = fakeExecCommand&#xA;    defer func() { execCommand = exec.Command }()&#xA;&#xA;    expDate := &quot;Unable to run date command&quot;&#xA;&#xA;    out, _ := printDate()&#xA;    // println(&quot;Stdout: &quot;, string(out))&#xA;    if string(out) != expDate {&#xA;        t.Errorf(&quot;Expected %q, got %q&quot;, expDate, string(out))&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;go test&lt;/code&gt; results as below...&lt;/strong&gt; &#xA;&lt;em&gt;(Purposely failing one test to show that the mock is working properly).&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; go test hello&#xA;--- FAIL: TestPrintDate (0.01s)&#xA;        hello_test.go:45: Expected &quot;Sun Aug 20&quot;, got &quot;Sun Aug 201&quot;&#xA;FAIL&#xA;FAIL    hello   0.018s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""3141044"" LastActivityDate=""2017-08-21T18:30:10.183"" CommentCount=""0"" />
",45803548
45800136,"45800136      <row Id=""45800136"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45804366"" PostTypeId=""2"" ParentId=""45800136"" CreationDate=""2017-08-21T19:33:59.847"" Score=""1"" Body=""&lt;p&gt;I use templates for this and it works well. You can generate the views and potentially the handlers and model with basic admin views for CRUD actions very quickly, which is nice. Obviously for each admin view you're going to want to customise it to some extent but as a starting point it works very well. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/fragmenta&quot; rel=&quot;nofollow noreferrer&quot;&gt;This&lt;/a&gt; is the tool I'm using (if you've used rails it should be familiar), you should also be able to knock something together with go generate (for code), a tool like &lt;a href=&quot;https://github.com/cheekybits/genny&quot; rel=&quot;nofollow noreferrer&quot;&gt;genny&lt;/a&gt;, or just your own solution using &lt;a href=&quot;https://golang.org/pkg/text/template/&quot; rel=&quot;nofollow noreferrer&quot;&gt;text/template&lt;/a&gt; to output what you need. I've used this approach on a few projects now, I recommend if you find yourself creating dashboards which then need to be customised later. Most apps have a certain amount of boilerplate for each resource (create, update, delete, index).&lt;/p&gt;&#xA;"" OwnerUserId=""1601137"" LastEditorUserId=""1601137"" LastEditDate=""2017-08-22T14:29:50.773"" LastActivityDate=""2017-08-22T14:29:50.773"" CommentCount=""0"" />
",45804366
45803618,"45803618      <row Id=""45803618"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45804467"" PostTypeId=""2"" ParentId=""45803618"" CreationDate=""2017-08-21T19:41:44.683"" Score=""1"" Body=""&lt;p&gt;With unpredictable structures, deserializing into a struct is not going to work. Instead, you'll be better off using the streaming mode of the XML parser using &lt;a href=&quot;https://golang.org/pkg/encoding/xml/#Decoder.Token&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;xml.Decoder.Token&lt;/code&gt;&lt;/a&gt; to parse elements in order and handle them as necessary.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;decoder := xml.NewDecoder(xmlFile) &#xA;solutions := make([]string,0,0)&#xA;&#xA;for { &#xA;    t, _ := decoder.Token() &#xA;    if t == nil { &#xA;        break &#xA;    }&#xA;    switch se := t.(type) { &#xA;    case xml.StartElement: &#xA;        if se.Name.Local == &quot;Paragraph&quot; {&#xA;            // Get the next token after the Paragraph start element, which will be the tag contents&#xA;            innerText,ok := decoder.Token().(xml.CharData)&#xA;            if !ok {&#xA;                continue&#xA;            }&#xA;            solutions = append(solutions, string(innerText))&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This code is untested but should provide a decent starting point.&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-21T19:41:44.683"" CommentCount=""0"" />
",45804467
45804868,"45804868      <row Id=""45804868"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45804997"" PostTypeId=""2"" ParentId=""45804868"" CreationDate=""2017-08-21T20:23:20.960"" Score=""3"" Body=""&lt;p&gt;Per the &lt;a href=&quot;https://golang.org/pkg/encoding/xml/#Unmarshal&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;If the XML element contains character data, that data is&#xA;     accumulated in the first struct field that has tag &quot;,chardata&quot;.&#xA;     The struct field may have type []byte or string.&#xA;     If there is no such field, the character data is discarded.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So, you can decode it with a struct as such:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Book struct {&#xA;    Title   string   `xml:&quot;title&quot;`&#xA;    Price   string   `xml:&quot;price&quot;`&#xA;    Year    string   `xml:&quot;year&quot;`&#xA;    Author  string   `xml:&quot;author&quot;`&#xA;    Body    string   `xml:&quot;,chardata&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Note that fields you're unmarshaling into &lt;strong&gt;must be exported&lt;/strong&gt;, i.e., must start with an uppercase letter, or they cannot be unmarshaled into.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can see an example here: &lt;a href=&quot;https://play.golang.org/p/OlwSqnHsT7&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/OlwSqnHsT7&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""7426"" LastActivityDate=""2017-08-21T20:23:20.960"" CommentCount=""1"" />
",45804997
45808394,"45808394      <row Id=""45808394"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45808753"" PostTypeId=""2"" ParentId=""45808394"" CreationDate=""2017-08-22T04:08:23.360"" Score=""2"" Body=""&lt;p&gt;In Go, a name is exported if it begins with a capital letter. You should make first letters of fields UPPERCASED to make sure they're exported, like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type UserInfo struct {&#xA;    Gender     string            `dynamo:&quot;gender&quot;`&#xA;    Product    string            `dynamo:&quot;product&quot;`&#xA;    Id         string            `dynamo:&quot;id&quot;`&#xA;    CreateTime int               `dynamo:&quot;create_time&quot;`&#xA;    Name       string            `dynamo:&quot;name&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;more info: &lt;a href=&quot;https://www.goinggo.net/2014/03/exportedunexported-identifiers-in-go.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.goinggo.net/2014/03/exportedunexported-identifiers-in-go.html&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""391464"" LastActivityDate=""2017-08-22T04:08:23.360"" CommentCount=""2"" />
",45808753
45808852,"45808852      <row Id=""45808852"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45809232"" PostTypeId=""2"" ParentId=""45808852"" CreationDate=""2017-08-22T05:03:03.847"" Score=""4"" Body=""&lt;p&gt;Assuming that you're pulling back 2 separate values from the DB, you can use &lt;code&gt;fmt.Sprintf&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; pad &lt;code&gt;timeString&lt;/code&gt;. Combining it with the &lt;code&gt;date&lt;/code&gt; string, you can use the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;value := fmt.Sprintf(&quot;%s %08s&quot;, date, timeString)[:15]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In your code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    date := &quot;20170228&quot;&#xA;    timeString := &quot;5013756&quot;&#xA;    value := fmt.Sprintf(&quot;%s %08s&quot;, date, timeString)[:15]&#xA;    layout := &quot;20060102 150405&quot;&#xA;&#xA;    t, _ := time.Parse(layout, value)&#xA;    fmt.Println(t)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Results:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;2017-02-28 05:01:37 +0000 UTC&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This approach is useful because it will also correctly pad any shorter value of time, e.g. &lt;code&gt;13756&lt;/code&gt; will be converted to &lt;code&gt;00013756&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;fmt.Sprintf&lt;/code&gt; function is useful to format arguments into a string using the formatting you desire as specified by a format string and a list of arguments (&lt;code&gt;...interface{}&lt;/code&gt;). The format string tells the function how to render the arguments.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This format string uses two items of note:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;String verb (&lt;code&gt;%s&lt;/code&gt;): The format string uses a variety of &lt;code&gt;verbs&lt;/code&gt; that are used for string substitutions. &lt;code&gt;%s&lt;/code&gt; is specifically to render a string or a slice. Other popular verbs include &lt;code&gt;%d&lt;/code&gt; for base 10 integer and &lt;code&gt;%f&lt;/code&gt; for float with a complete list in the docs. The &lt;code&gt;%v&lt;/code&gt; verb is very useful can also be used here as it will render an argument's default value.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;0&lt;/code&gt; left padding: To &lt;code&gt;0&lt;/code&gt; left pad an argument, use &lt;code&gt;0&lt;/code&gt; followed by a length number in the verb after the &lt;code&gt;%&lt;/code&gt;. This will prepended the argument with a maximum number of &lt;code&gt;0&lt;/code&gt;s specified in the length number. For example, &lt;code&gt;%08s&lt;/code&gt; will render a string with up to 8 prepended zeros. This means a string &lt;code&gt;&quot;&quot;&lt;/code&gt; will be &lt;code&gt;&quot;00000000&quot;&lt;/code&gt; while a string &lt;code&gt;&quot;1234567&quot;&lt;/code&gt; will result in &lt;code&gt;&quot;01234567&quot;&lt;/code&gt;. If the string is longer than the length, nothing will be prepended.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;From the documentation:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;%s  the uninterpreted bytes of the string or slice&#xA;&#xA;0   pad with leading zeros rather than spaces;&#xA;    for numbers, this moves the padding after the sign&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;More detailed is available in the documentation: &lt;a href=&quot;https://golang.org/pkg/fmt/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/fmt/&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""1908967"" LastEditorUserId=""1908967"" LastEditDate=""2017-08-22T08:53:42.297"" LastActivityDate=""2017-08-22T08:53:42.297"" CommentCount=""3"" />
",45809232
33968213,"33968213      <row Id=""33968213"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45810406"" PostTypeId=""2"" ParentId=""33968213"" CreationDate=""2017-08-22T06:32:24.423"" Score=""0"" Body=""&lt;p&gt;Posting elithrar comment as answer&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Sockets, yes. You may need to increase your fd limit (via ulimit or sysctl).&lt;/p&gt;&#xA;"" OwnerUserId=""4057655"" LastActivityDate=""2017-08-22T06:32:24.423"" CommentCount=""0"" CommunityOwnedDate=""2017-08-22T06:32:24.423"" />
",45810406
45807184,"45807184      <row Id=""45807184"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45810521"" PostTypeId=""2"" ParentId=""45807184"" CreationDate=""2017-08-22T06:39:25.297"" Score=""1"" Body=""&lt;p&gt;If the crash is being caused by your &lt;code&gt;log.Fatal(err)&lt;/code&gt;, you can avoid this by checking and avoiding it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;_, err := orm.NewOrm().Insert(product)&#xA;&#xA;if err != nil {&#xA;    if err.Error() == &quot;no LastInsertId available&quot; {&#xA;        log.Println(err)&#xA;    } else {&#xA;        log.Fatal(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1908967"" LastActivityDate=""2017-08-22T06:39:25.297"" CommentCount=""1"" />
",45810521
45811933,"45811933      <row Id=""45811933"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45812276"" PostTypeId=""2"" ParentId=""45811933"" CreationDate=""2017-08-22T08:11:22.757"" Score=""6"" Body=""&lt;p&gt;As you can see &lt;a href=&quot;https://golang.org/ref/spec#Logical_operators&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;, the right operand of &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; is evaluated conditionally.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This means that &lt;code&gt;result =  result &amp;amp;&amp;amp; &amp;lt;-in&lt;/code&gt; will only evaluate &lt;code&gt;&amp;lt;-in&lt;/code&gt; if &lt;code&gt;result&lt;/code&gt; is true. So, the coodrinator reads only one &lt;code&gt;false&lt;/code&gt; from that channel, and skips reading messages from the other workers. If you switch the operands of &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; places, then the &lt;code&gt;&amp;lt;-in&lt;/code&gt; will evaluate every time and the deadlock goes away.&lt;/p&gt;&#xA;"" OwnerUserId=""6444852"" LastActivityDate=""2017-08-22T08:11:22.757"" CommentCount=""1"" />
",45812276
45806377,"45806377      <row Id=""45806377"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45812612"" PostTypeId=""2"" ParentId=""45806377"" CreationDate=""2017-08-22T08:28:58.703"" Score=""0"" Body=""&lt;p&gt;According to your description and the error information &lt;code&gt;SSHException: No existing session&lt;/code&gt;, it sounds like you were using &lt;code&gt;os/exec&lt;/code&gt; for calling your shell script file,  but failed because command &lt;code&gt;az&lt;/code&gt; needs to use something like &lt;code&gt;azureProfile.json&lt;/code&gt; at the path &lt;code&gt;.azure&lt;/code&gt; within a ssh session.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So I suggested you can try to use the code below with &lt;code&gt;golang.org/x/crypto/ssh&lt;/code&gt; package to do it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is my sample code for Linux which I think the same as on MacOS.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;bufio&quot;&#xA;    &quot;bytes&quot;&#xA;    &quot;errors&quot;&#xA;    &quot;fmt&quot;&#xA;    &quot;log&quot;&#xA;    &quot;os&quot;&#xA;    &quot;path/filepath&quot;&#xA;    &quot;strings&quot;&#xA;&#xA;    &quot;golang.org/x/crypto/ssh&quot;&#xA;)&#xA;&#xA;func getHostKey(host string) (ssh.PublicKey, error) {&#xA;    file, err := os.Open(filepath.Join(os.Getenv(&quot;HOME&quot;), &quot;.ssh&quot;, &quot;known_hosts&quot;))&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    defer file.Close()&#xA;&#xA;    scanner := bufio.NewScanner(file)&#xA;    var hostKey ssh.PublicKey&#xA;    for scanner.Scan() {&#xA;        fields := strings.Split(scanner.Text(), &quot; &quot;)&#xA;        if len(fields) != 3 {&#xA;            continue&#xA;        }&#xA;        if strings.Contains(fields[0], host) {&#xA;            var err error&#xA;            hostKey, _, _, _, err = ssh.ParseAuthorizedKey(scanner.Bytes())&#xA;            if err != nil {&#xA;                return nil, errors.New(fmt.Sprintf(&quot;error parsing %q: %v&quot;, fields[2], err))&#xA;            }&#xA;            break&#xA;        }&#xA;    }&#xA;&#xA;    if hostKey == nil {&#xA;        return nil, errors.New(fmt.Sprintf(&quot;no hostkey for %s&quot;, host))&#xA;    }&#xA;    return hostKey, nil&#xA;}&#xA;&#xA;func main() {&#xA;    hostKey, err := getHostKey(&quot;localhost&quot;)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    config := &amp;amp;ssh.ClientConfig{&#xA;        User: &quot;peter&quot;,&#xA;        Auth: []ssh.AuthMethod{&#xA;            ssh.Password(&quot;peter ssh password&quot;),&#xA;        },&#xA;        HostKeyCallback: ssh.FixedHostKey(hostKey),&#xA;    }&#xA;    // Dial your ssh server.&#xA;    conn, err := ssh.Dial(&quot;tcp&quot;, &quot;localhost:22&quot;, config)&#xA;    if err != nil {&#xA;        log.Fatal(&quot;unable to connect: &quot;, err)&#xA;    }&#xA;    defer conn.Close()&#xA;    session, err := conn.NewSession()&#xA;    if err != nil {&#xA;        log.Fatal(&quot;Failed to create session: &quot;, err)&#xA;    }&#xA;    defer session.Close()&#xA;&#xA;    // Once a Session is created, you can execute a single command on&#xA;    // the remote side using the Run method.&#xA;    var b bytes.Buffer&#xA;    session.Stdout = &amp;amp;b&#xA;    if err := session.Run(&quot;./test.sh&quot;); err != nil {&#xA;        log.Fatal(&quot;Failed to run: &quot; + err.Error())&#xA;    }&#xA;    fmt.Println(b.String())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;: There must be a record like the content below for &lt;code&gt;localhost&lt;/code&gt; in your &lt;code&gt;.ssh/known_hosts&lt;/code&gt; file. If not, you can first login via ssh to generate it and change the host with &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;|localhost|qx8q1geNHGyRFp8Ttu+m2xY4OpU=|noyfrjpDRvtIzP2gzWEV77VZULo= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBKXlyt/EFLnqwlNDimn73+wZVgCh3dhXi2YMWN6tHUj5LMirrUt0AtmQQVHex2b2ur79L5P6/L2J28NID569qAA=&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Hope it helps.&lt;/p&gt;&#xA;"" OwnerUserId=""4989676"" LastActivityDate=""2017-08-22T08:28:58.703"" CommentCount=""0"" />
",45812612
45817640,"45817640      <row Id=""45817640"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45817853"" PostTypeId=""2"" ParentId=""45817640"" CreationDate=""2017-08-22T12:36:45.090"" Score=""2"" Body=""&lt;p&gt;Yes, you can fetch the precise structure of the type, if that's what you mean with &quot;root type&quot;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var item M&#xA;t := reflect.TypeOf(item)&#xA;fmt.Println(t.Kind()) // map&#xA;fmt.Println(t.Key())  // string&#xA;fmt.Println(t.Elem()) // interface {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/BEfWYyJ4Ne&quot; rel=&quot;nofollow noreferrer&quot;&gt;test it&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;From there you're free to display it as you want.&lt;/p&gt;&#xA;"" OwnerUserId=""263525"" LastActivityDate=""2017-08-22T12:36:45.090"" CommentCount=""0"" />
",45817853
45818964,"45818964      <row Id=""45818964"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45819780"" PostTypeId=""2"" ParentId=""45818964"" CreationDate=""2017-08-22T14:00:30.373"" Score=""2"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;Is it guaranteed that the order of the pointers remains the same? (For&#xA;  example, I can imagine some GC trickery which also reorders the data.)&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;In answer to this part of your question, it doesn't look like it. See pkg unsafe linked below. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want the memory address of a pointer, try the unsafe package:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/unsafe/#Pointer&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/pkg/unsafe/#Pointer&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;unsafe&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    var a,b int&#xA;    var pa,pb *int&#xA;    pa = &amp;amp;a&#xA;    pb = &amp;amp;b&#xA;&#xA;    //var c int&#xA;    //pa = &amp;amp;c&#xA;&#xA;    if uintptr(unsafe.Pointer(pa)) &amp;lt; uintptr(unsafe.Pointer(pb)) {&#xA;      fmt.Printf(&quot;a:%p &amp;gt; b:%p&quot;,pa,pb)   &#xA;    } else {&#xA;      fmt.Printf(&quot;b:%p &amp;gt; a:%p&quot;,pb,pa)&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will let you get an arbitrary Pointer type and then the &lt;em&gt;current&lt;/em&gt; memory address of that pointer (as printf would). Note the caveats there though, you cannot rely on this address:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Converting a Pointer to a uintptr produces the memory address of the&#xA;  value pointed at, as an integer. The usual use for such a uintptr is&#xA;  to print it. Conversion of a uintptr back to Pointer is not valid in&#xA;  general. A uintptr is an integer, not a reference. Converting a&#xA;  Pointer to a uintptr creates an integer value with no pointer&#xA;  semantics. Even if a uintptr holds the address of some object, the&#xA;  garbage collector will not update that uintptr's value if the object&#xA;  moves, nor will that uintptr keep the object from being reclaimed.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;This bypasses the Go type system and memory security so it's unsafe and you probably don't want to do it&lt;/strong&gt;, unless you're just experimenting. I can't think of a reason to do it in tests, but if you want to be sure to read that entire document and be very sure you know that what you are doing will work as you expect.  &lt;/p&gt;&#xA;"" OwnerUserId=""1601137"" LastEditorUserId=""1601137"" LastEditDate=""2017-08-22T14:07:10.387"" LastActivityDate=""2017-08-22T14:07:10.387"" CommentCount=""4"" />
",45819780
45820737,"45820737      <row Id=""45820737"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45821375"" PostTypeId=""2"" ParentId=""45820737"" CreationDate=""2017-08-22T15:12:28.367"" Score=""3"" Body=""&lt;p&gt;The short answer is no, you cannot use a query as part of a transaction unless you are querying a specific entity group. Global queries are alway eventually consistent. However, to put everything in a single entity group would likely limit write throughput too much.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A workaround is you can have another Kind with entities that map email addresses to users. Then you can, in a transaction, check the email Entity and if it doesn't exist or it points to a bad location, set the email Entity and the user Entity all as a single transaction.&lt;/p&gt;&#xA;"" OwnerUserId=""727643"" LastEditorUserId=""727643"" LastEditDate=""2017-08-22T15:23:58.600"" LastActivityDate=""2017-08-22T15:23:58.600"" CommentCount=""1"" />
",45821375
45823531,"45823531      <row Id=""45823531"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45823718"" PostTypeId=""2"" ParentId=""45823531"" CreationDate=""2017-08-22T17:30:14.200"" Score=""3"" Body=""&lt;p&gt;Yes, you can use them interchangeably.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As you already noticed, the &lt;code&gt;context&lt;/code&gt; variables returned by &lt;code&gt;WithCancel&lt;/code&gt;, etc, are actually pointers, so both &lt;code&gt;localCtx&lt;/code&gt; and &lt;code&gt;ctx&lt;/code&gt; will be pointing to the same thing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;About &lt;code&gt;emptyCtx&lt;/code&gt; being an &lt;code&gt;int&lt;/code&gt;, it should not change things as it is also being used as a pointer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;background&lt;/code&gt; variable you mention is actually a pointer to an &lt;code&gt;emptyCtx&lt;/code&gt;, as it is initialized by using the &lt;code&gt;new&lt;/code&gt; keyword:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;background = new(emptyCtx)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4907630"" LastActivityDate=""2017-08-22T17:30:14.200"" CommentCount=""1"" />
",45823718
45823566,"45823566      <row Id=""45823566"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45824081"" PostTypeId=""2"" ParentId=""45823566"" CreationDate=""2017-08-22T17:54:19.093"" Score=""1"" Body=""&lt;p&gt;Just collect the non-nil values in a slice and then use that slice with &lt;code&gt;...&lt;/code&gt; when executing the query.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var values []interface{}&#xA;for i := range m {&#xA;    if v := m[i]; v != &quot;&quot; &amp;amp;&amp;amp; v != 0 &amp;amp;&amp;amp; v != 0.0 &amp;amp;&amp;amp; /* you're missing a condition here */{&#xA;        j++&#xA;        query = query + strings.ToLower(i) + &quot;=$&quot; + strconv.Itoa(j) + &quot;,&quot;&#xA;        values = append(values, v)&#xA;    }&#xA;}&#xA;&#xA;// ....&#xA;&#xA;database.DB.QueryRow(query_string, values...)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""965900"" LastActivityDate=""2017-08-22T17:54:19.093"" CommentCount=""1"" />
",45824081
45824062,"45824062      <row Id=""45824062"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45824109"" PostTypeId=""2"" ParentId=""45824062"" CreationDate=""2017-08-22T17:56:09.480"" Score=""1"" Body=""&lt;p&gt;The issue is caused by you wrapping the map in an object, the YAML has no such nesting.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;map := map[string]string{}&#xA;err := yaml.Unmarshal([]byte(val), &amp;amp;map)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can actually just unmarshal directly into the map itself&lt;/p&gt;&#xA;&#xA;&lt;p&gt;EDIT: hard to tell with your formatting but if those integer keys are nested under &lt;code&gt;A&lt;/code&gt; then you will need a different structure as well, it would actually be a &lt;code&gt;map[string]map[string]string&lt;/code&gt; -- however that is rather ugly so I would recommend moving to a different paradigm at that point... You could either use a &lt;code&gt;map[string]interface{}&lt;/code&gt; which wouldn't care what types go into the map and then you could deal with it later or you could define the object more statically, using actually keys such a &lt;code&gt;A&lt;/code&gt; in a struct to denote where each item goes, if that were the case you'd have an object like the following;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type TranslationVal struct {&#xA;    A map[string]string&#xA;    B string&#xA;    C string&#xA;    // and so on&#xA;    F string `yaml:f` // necessary because f would be unexported&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""763585"" LastEditorUserId=""763585"" LastEditDate=""2017-08-22T18:02:08.637"" LastActivityDate=""2017-08-22T18:02:08.637"" CommentCount=""1"" />
",45824109
45824738,"45824738      <row Id=""45824738"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45824776"" PostTypeId=""2"" ParentId=""45824738"" CreationDate=""2017-08-22T18:41:54.230"" Score=""7"" Body=""&lt;p&gt;I would suggest using &lt;a href=&quot;https://godoc.org/strings#Map&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;strings.Map&lt;/code&gt;&lt;/a&gt; for this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;s = strings.Map(func(r rune) rune {&#xA;   switch r {&#xA;     case 'a':&#xA;       return '3'&#xA;     case 'e':&#xA;       return '2'&#xA;     // etc.&#xA;     default:&#xA;       return r&#xA;   }&#xA;}, s)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/D66J5hZsNs&quot; rel=&quot;noreferrer&quot;&gt;https://play.golang.org/p/D66J5hZsNs&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With a slight modification, if you need to dynamically set the replacement values, you could store the vowels in a map. For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;vowels := map[rune]rune{&#xA;    'a': '3',&#xA;    'e': '2',&#xA;}&#xA;&#xA;s = strings.Map(func(r rune) rune {&#xA;    if u, ok := vowels[r]; ok {&#xA;        return u&#xA;    }&#xA;    return r&#xA;}, s)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""142162"" LastActivityDate=""2017-08-22T18:41:54.230"" CommentCount=""8"" />
",45824776
45815938,"45815938      <row Id=""45815938"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45826152"" PostTypeId=""2"" ParentId=""45815938"" CreationDate=""2017-08-22T20:07:52.167"" Score=""1"" Body=""&lt;p&gt;Hope this can help you as a start point:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;---&#xA;- hosts: all&#xA;  connection: local &#xA;&#xA;  tasks:&#xA;  - name: check go version&#xA;    command: go version&#xA;    register: result&#xA;    changed_when: no&#xA;    ignore_errors: true&#xA;&#xA;  - set_fact:&#xA;      go_path: &quot;{{ lookup('env', 'GOPATH') | default(ansible_env.HOME+'/go', true) }}&quot;&#xA;    when: not result|failed&#xA;&#xA;  - name: go get gogs&#xA;    shell: go get -u github.com/gogits/gogs&#xA;    environment:&#xA;      GOPATH: &quot;{{ go_path }}&quot;&#xA;    register: gogs&#xA;    when: not result|failed&#xA;&#xA;  - debug: var=gogs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Try to run this on your remote server by typing:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ansible-playbook gogs.yml -i localhost,&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If that works then just later try remotely.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Normally you don't want to do this since you want to execute this remotely over ssh, but since you had tried so far and are getting some errors, probably by trying locally &lt;code&gt;connection: local&lt;/code&gt; could help to debug more in details this issue.&lt;/p&gt;&#xA;"" OwnerUserId=""1135424"" LastActivityDate=""2017-08-22T20:07:52.167"" CommentCount=""4"" />
",45826152
45817797,"45817797      <row Id=""45817797"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45826181"" PostTypeId=""2"" ParentId=""45817797"" CreationDate=""2017-08-22T20:09:55.647"" Score=""1"" Body=""&lt;p&gt;It seems that you do not have your chaincode in the $GOPATH, you need to run:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go get github.com/myuserId/fabrcicV1_chaincodes/mychaincode&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Before trying to install the chaincode on peer, in your case where you are using &lt;strong&gt;build your first network&lt;/strong&gt;, you need to make sure your new chaincode inside &lt;code&gt;fabric-samples/chaincode&lt;/code&gt; folder. And also note that you need to mount folder with your chaincode into docker cli container, see example of current &lt;code&gt;docker-compose-cli.yaml&lt;/code&gt; file:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;volumes:&#xA;    - /var/run/:/host/var/run/&#xA;    - ./../chaincode/:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go&#xA;    - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/&#xA;    - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/&#xA;    - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In particular, you probably need to replace here with your chaincode or make sure to mount an additional folder within &lt;code&gt;$GOPATH&lt;/code&gt; of cli container:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;- ./../chaincode/:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""104014"" LastActivityDate=""2017-08-22T20:09:55.647"" CommentCount=""1"" />
",45826181
45828485,"45828485      <row Id=""45828485"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45828623"" PostTypeId=""2"" ParentId=""45828485"" CreationDate=""2017-08-23T00:02:21.160"" Score=""1"" Body=""&lt;p&gt;The import path maps directly to the filesystem path, relative to &lt;code&gt;$GOPATH/src/&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://golang.org/doc/code.html#ImportPaths&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/doc/code.html#ImportPaths&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It seems that you can do a relative import like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;../other-pkg&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But it's &lt;a href=&quot;https://stackoverflow.com/questions/10687627/relative-import-from-parent-directory&quot;&gt;not idiomatic or recommended&lt;/a&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""966798"" LastEditorUserId=""966798"" LastEditDate=""2017-08-23T00:08:34.167"" LastActivityDate=""2017-08-23T00:08:34.167"" CommentCount=""1"" />
",45828623
45828996,"45828996      <row Id=""45828996"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45829567"" PostTypeId=""2"" ParentId=""45828996"" CreationDate=""2017-08-23T02:10:44.537"" Score=""1"" Body=""&lt;p&gt;You check if the current field is a struct &lt;strong&gt;value&lt;/strong&gt;, but you never account for the case when it is a &lt;code&gt;reflect.Ptr&lt;/code&gt; to a struct or something else, so your function never recurses for that case. Here is your function with the missing piece.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/FdLxeee9UU&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/FdLxeee9UU&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// ContainsNil returns true if any fields within the supplied structure are nil.&#xA;//&#xA;// If the supplied object is not a struct, the method will panic.&#xA;// Nested structs are inspected recursively.&#xA;// Maps and slices are not inspected deeply. This may change.&#xA;func ContainsNil(obj interface{}) bool {&#xA;    if obj == nil {&#xA;        return true&#xA;    }&#xA;    s := reflect.Indirect(reflect.ValueOf(obj))&#xA;    for i := 0; i &amp;lt; s.NumField(); i++ {&#xA;        f := s.Type().Field(i)&#xA;        field := s.Field(i)&#xA;        if fieldIsExported(f) { // Exported-check must be evaluated first to avoid panic.&#xA;            if field.Kind() == reflect.Ptr { // case when it's a pointer or struct pointer&#xA;                if field.IsNil() {&#xA;                    return true&#xA;                }&#xA;                if ContainsNil(field.Interface()) {&#xA;                    return true&#xA;                }&#xA;            }&#xA;            if field.Kind() == reflect.Struct {&#xA;                if ContainsNil(field.Addr()) {&#xA;                    return true&#xA;                }&#xA;            } else {&#xA;                if field.IsNil() {&#xA;                    return true&#xA;                }&#xA;                if field.Interface() == nil {&#xA;                    return true&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;    return false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1276480"" LastEditorUserId=""1276480"" LastEditDate=""2017-08-23T02:18:58.053"" LastActivityDate=""2017-08-23T02:18:58.053"" CommentCount=""1"" />
",45829567
45830855,"45830855      <row Id=""45830855"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45831260"" PostTypeId=""2"" ParentId=""45830855"" CreationDate=""2017-08-23T05:26:51.800"" Score=""2"" Body=""&lt;p&gt;Instead of statically defining each subject, how about simply using a map from subject name =&gt; array of class details ?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One way you can get very close to the JSON you want by using a map like I described above, and by embedding the map into a struct as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type ClassDetails struct {&#xA;    ClassNumber int      `json:&quot;classNumber&quot;`&#xA;    Names       []string `json:names`&#xA;}&#xA;&#xA;type Subjects map[string][]ClassDetails&#xA;&#xA;type Classes struct {&#xA;    School string `json:&quot;school&quot;`&#xA;    Subjects&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;An instance of the &lt;code&gt;Classes&lt;/code&gt; struct above would fill in the following part of your desired JSON:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &quot;classes&quot;: {&#xA;    ... the Classes instance goes here...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The remaining outer object can just be constructed as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;c := Classes{...}&#xA;outer := map[string]Classes{&quot;classes&quot;: c}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;A JSON marshal of the &lt;code&gt;outer&lt;/code&gt; object, with the right data initialized, arrives at almost exactly your JSON above (to match it exactly you'd have to turn the &lt;code&gt;ClassNumber&lt;/code&gt; into a string type).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is a Go Playground link that initializes these structs with the exact data you want and pretty-prints your JSON: &lt;a href=&quot;https://play.golang.org/p/HFMbHtY2os&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/HFMbHtY2os&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;EDIT: This still doesn't exactly match the JSON in your question, as it will add a new object in there called &quot;Subjects&quot;. The problem is that the object inside of &lt;code&gt;&quot;classes&quot;&lt;/code&gt; in your JSON mixes types, and Go can't declare dynamic struct fields.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you really have to use that JSON structure, you'll need to go with the more generic &lt;code&gt;map[string]interface{}&lt;/code&gt; to allow mixed types at the same level in your object hierarchy. Here's another Go Playground link that has the correct implementation: &lt;a href=&quot;https://play.golang.org/p/rlYTYGofSI&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/rlYTYGofSI&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""4648046"" LastEditorUserId=""4648046"" LastEditDate=""2017-08-23T05:41:52.137"" LastActivityDate=""2017-08-23T05:41:52.137"" CommentCount=""3"" />
",45831260
45834542,"45834542      <row Id=""45834542"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45834733"" PostTypeId=""2"" ParentId=""45834542"" CreationDate=""2017-08-23T08:39:25.360"" Score=""2"" Body=""&lt;p&gt;This is not an issue of the &lt;a href=&quot;https://golang.org/pkg/bufio/#Reader.ReadByte&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Reader.ReadByte()&lt;/code&gt;&lt;/a&gt; implementation, nor that of &lt;a href=&quot;https://golang.org/pkg/bufio/#NewReader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;bufio.NewReader()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See this example to prove it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;buf := bytes.NewBufferString(&quot;Hello World!\n&quot;)&#xA;in := bufio.NewReader(buf)&#xA;for {&#xA;    c, err := in.ReadByte()&#xA;    if err == io.EOF {&#xA;        break&#xA;    }&#xA;    fmt.Print(string(c))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;When running, the above prints&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Hello World!&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And terminates properly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your issue is with &lt;code&gt;os.Stdin&lt;/code&gt;. Reading from it is specific to its source. If it is your terminal, reading from it simply blocks and does not report &lt;code&gt;io.EOF&lt;/code&gt;. See this example to prove it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;in := bufio.NewReader(os.Stdin)&#xA;for {&#xA;    fmt.Println(&quot;Reading.&quot;)&#xA;    c, err := in.ReadByte()&#xA;    if err == io.EOF {&#xA;        break&#xA;    }&#xA;    fmt.Print(string(c))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Its output is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Reading.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And nothing happens. There is no new iteration, it is blocked. Now if you enter a line and press &lt;kbd&gt;Enter&lt;/kbd&gt;, e.g. you enter &lt;code&gt;Go!&lt;/code&gt;, output will be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Go!&#xA;GReading.&#xA;oReading.&#xA;!Reading.&#xA;&#xA;Reading.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And again, waits for new input. As you can see, data is fed / available per line. This is what your terminal does: while you enter your line, it is not sent to &lt;code&gt;os.Stdin&lt;/code&gt;. Once you press &lt;kbd&gt;Enter&lt;/kbd&gt;, the whole line is fed and is available from &lt;code&gt;os.Stdin&lt;/code&gt;. This is what we see: each letter of the input &lt;code&gt;Go!&lt;/code&gt; and a newline character. And we see the &lt;code&gt;Reading.&lt;/code&gt; text printed for each iteration. After the input is consumed, &lt;code&gt;in.ReadByte()&lt;/code&gt; is blocked again, waiting for new input. It does not report &lt;code&gt;io.EOF&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now try the following: create a file e.g. &lt;code&gt;a.txt&lt;/code&gt; and edit it to have one line: &lt;code&gt;Go!&lt;/code&gt; and a newline. Now feed this file as the standard input to your program:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go run play.go &amp;lt; a.txt&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Running it we'll see:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Reading.&#xA;GReading.&#xA;oReading.&#xA;!Reading.&#xA;&#xA;Reading.&#xA;&#xA;Reading.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And it terminates so it works! It works because this time the source of &lt;code&gt;os.Stdin&lt;/code&gt; is not your console / terminal, but the contents of a file, and once it's consumed, attempting to read from &lt;code&gt;os.Stdin&lt;/code&gt; will properly report &lt;code&gt;io.EOF&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-08-23T09:01:15.283"" LastActivityDate=""2017-08-23T09:01:15.283"" CommentCount=""0"" />
",45834733
45836767,"45836767      <row Id=""45836767"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45837752"" PostTypeId=""2"" ParentId=""45836767"" CreationDate=""2017-08-23T10:56:19.857"" Score=""3"" Body=""&lt;p&gt;Unfortunately there is no ready solution for an in-memory &lt;a href=&quot;https://golang.org/pkg/io/#WriteSeeker&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.WriteSeeker&lt;/code&gt;&lt;/a&gt; implementation in the standard lib.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But as always, you can always implement your own. It's not that hard.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;An &lt;code&gt;io.WriteSeeker&lt;/code&gt; is an &lt;a href=&quot;https://golang.org/pkg/io/#Writer&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.Writer&lt;/code&gt;&lt;/a&gt; and an &lt;a href=&quot;https://golang.org/pkg/io/#Seeker&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;io.Seeker&lt;/code&gt;&lt;/a&gt;, so basically you only need to implement 2 methods:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Write(p []byte) (n int, err error)&#xA;Seek(offset int64, whence int) (int64, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Read the general contract of these methods in their documentation how they should behave.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's a simple implementation which uses an in-memory byte slice (&lt;code&gt;[]byte&lt;/code&gt;). It's not optimized for speed, this is just a &quot;demo&quot; implementation.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type mywriter struct {&#xA;    buf []byte&#xA;    pos int&#xA;}&#xA;&#xA;func (m *mywriter) Write(p []byte) (n int, err error) {&#xA;    minCap := m.pos + len(p)&#xA;    if minCap &amp;gt; cap(m.buf) { // Make sure buf has enough capacity:&#xA;        buf2 := make([]byte, len(m.buf), minCap+len(p)) // add some extra&#xA;        copy(buf2, m.buf)&#xA;        m.buf = buf2&#xA;    }&#xA;    if minCap &amp;gt; len(m.buf) {&#xA;        m.buf = m.buf[:minCap]&#xA;    }&#xA;    copy(m.buf[m.pos:], p)&#xA;    m.pos += len(p)&#xA;    return len(p), nil&#xA;}&#xA;&#xA;func (m *mywriter) Seek(offset int64, whence int) (int64, error) {&#xA;    newPos, offs := 0, int(offset)&#xA;    switch whence {&#xA;    case io.SeekStart:&#xA;        newPos = offs&#xA;    case io.SeekCurrent:&#xA;        newPos = m.pos + offs&#xA;    case io.SeekEnd:&#xA;        newPos = len(m.buf) + offs&#xA;    }&#xA;    if newPos &amp;lt; 0 {&#xA;        return 0, errors.New(&quot;negative result pos&quot;)&#xA;    }&#xA;    m.pos = newPos&#xA;    return int64(newPos), nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Yes, and that's it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Testing it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;my := &amp;amp;mywriter{}&#xA;var ws io.WriteSeeker = my&#xA;&#xA;ws.Write([]byte(&quot;hello&quot;))&#xA;fmt.Println(string(my.buf))&#xA;&#xA;ws.Write([]byte(&quot; world&quot;))&#xA;fmt.Println(string(my.buf))&#xA;&#xA;ws.Seek(-2, io.SeekEnd)&#xA;ws.Write([]byte(&quot;k!&quot;))&#xA;fmt.Println(string(my.buf))&#xA;&#xA;ws.Seek(6, io.SeekStart)&#xA;ws.Write([]byte(&quot;gopher&quot;))&#xA;fmt.Println(string(my.buf))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output (try it on the &lt;a href=&quot;https://play.golang.org/p/TjXBLd3E5m&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;hello&#xA;hello world&#xA;hello work!&#xA;hello gopher&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Things that can be improved:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;Create a &lt;code&gt;mywriter&lt;/code&gt; value with an initial empty &lt;code&gt;buf&lt;/code&gt; slice, but with a capacity that will most likely cover the size of the result PDF document. E.g. if you estimate the result PDFs are around 1 MB, create a buffer with capacity for 2 MB like this:&lt;br&gt;&#xA;&lt;code&gt;my := &amp;amp;mywriter{buf: make([]byte, 0, 2&amp;lt;&amp;lt;20)}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Inside &lt;code&gt;mywriter.Write()&lt;/code&gt; when capacity needs to be increased (and existing content copied over), it may be profitable to use bigger increment, e.g. double the current capacity to a certain extent, which reserves space for future appends and minimizes the reallocations.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-08-24T13:22:49.920"" LastActivityDate=""2017-08-24T13:22:49.920"" CommentCount=""2"" />
",45837752
45713666,"45713666      <row Id=""45713666"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45837827"" PostTypeId=""2"" ParentId=""45713666"" CreationDate=""2017-08-23T10:59:39.310"" Score=""0"" Body=""&lt;p&gt;I have the GO exe deployed in Program Files, I changed the LogOnAs attribute of Windows Service to &quot;Local Service&quot; and gave &quot;Local Service&quot; complete Access to the installation folder in &quot;Folder Security&quot;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This seems to fix the issue for windows10. The service starts on windows restart, But this fix still does not work for windows 7 and windows8.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Making the service &quot;Automatic Delayed&quot; works, however you have to wait for the service start after boot which takes 2-3 minutes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The answer mentioned here helped: &lt;a href=&quot;https://serverfault.com/questions/697608/automatic-windows-service-not-starting/697852#697852?newreg=788f7ab0bb084fec85d1ce2e51bf8317&quot;&gt;https://serverfault.com/questions/697608/automatic-windows-service-not-starting/697852#697852?newreg=788f7ab0bb084fec85d1ce2e51bf8317&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""5604249"" LastEditorUserId=""5604249"" LastEditDate=""2017-08-26T14:27:55.007"" LastActivityDate=""2017-08-26T14:27:55.007"" CommentCount=""0"" />
",45837827
45836981,"45836981      <row Id=""45836981"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45837940"" PostTypeId=""2"" ParentId=""45836981"" CreationDate=""2017-08-23T11:04:02.920"" Score=""3"" Body=""&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;a href=&quot;https://github.com/golang/go/wiki&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Wiki&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;a href=&quot;https://github.com/golang/go/wiki/CompilerOptimizations&quot; rel=&quot;nofollow noreferrer&quot;&gt;CompilerOptimizations&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Function Inlining&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Only short and simple functions are inlined. To be inlined a function&#xA;  must contain less than ~40 expressions and does not contain complex&#xA;  things like function calls, loops, labels, closures, panic's,&#xA;  recover's, select's, switch'es, etc.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Currently, functions with loops are not inlined.&lt;/p&gt;&#xA;"" OwnerUserId=""221700"" LastEditorUserId=""221700"" LastEditDate=""2017-08-23T11:09:02.973"" LastActivityDate=""2017-08-23T11:09:02.973"" CommentCount=""0"" />
",45837940
45835134,"45835134      <row Id=""45835134"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45840675"" PostTypeId=""2"" ParentId=""45835134"" CreationDate=""2017-08-23T13:09:22.110"" Score=""0"" Body=""&lt;p&gt;I believe, it is not ARMv5. I was trying to do the same on MAC OS and 'file' command on Mac is saying v7, but the 'file' command on Linux don't. However, I do know that v7 has some good improvements and may boost the performance of your program. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;But, that is out of scope of this question and you may need to dig deeper into what you're doing and why a performance improvement in expected.&#xA;All I can say is, it is compiled for v7. &lt;/p&gt;&#xA;"" OwnerUserId=""1280320"" LastEditorUserId=""1280320"" LastEditDate=""2017-08-24T16:36:26.760"" LastActivityDate=""2017-08-24T16:36:26.760"" CommentCount=""0"" />
",45840675
45842551,"45842551      <row Id=""45842551"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45842582"" PostTypeId=""2"" ParentId=""45842551"" CreationDate=""2017-08-23T14:29:36.073"" Score=""6"" Body=""&lt;p&gt;You can get the length of a slice with &lt;code&gt;len(employees)&lt;/code&gt;. Generally, if you know the size up front, &lt;code&gt;ids := make([]int64, length)&lt;/code&gt; is preferrable to &lt;code&gt;ids := []int64{}&lt;/code&gt; because it will result in fewer allocations as the slice grows.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ids := make([]int64, len(employees))&#xA;for i,e := range employees{&#xA;   ids[i] = e.ID&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or a slightly alternate style:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ids := make([]int64, 0, len(employees)) // declare capacity, but not length&#xA;for _ , e := range employees{&#xA;   ids = append(ids, e.ID)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""121660"" LastEditorUserId=""121660"" LastEditDate=""2017-08-23T14:32:21.023"" LastActivityDate=""2017-08-23T14:32:21.023"" CommentCount=""0"" />
",45842582
45843390,"45843390      <row Id=""45843390"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45843669"" PostTypeId=""2"" ParentId=""45843390"" CreationDate=""2017-08-23T15:20:04.647"" Score=""1"" Body=""&lt;p&gt;You should first perform a Type assertions on weather as an array of interface{}.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then do the same on the first element as a map[string]interface{} &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;temps := parsedMap[&quot;weather&quot;].([]interface{})&#xA;mainTemp := temps[0].(map[string]interface{})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can see a full example here &lt;a href=&quot;https://play.golang.org/p/JIfCGrsYl9&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/JIfCGrsYl9&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""905927"" LastEditorUserId=""905927"" LastEditDate=""2017-08-23T15:35:37.943"" LastActivityDate=""2017-08-23T15:35:37.943"" CommentCount=""3"" />
",45843669
45845181,"45845181      <row Id=""45845181"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45846743"" PostTypeId=""2"" ParentId=""45845181"" CreationDate=""2017-08-23T18:12:35.647"" Score=""2"" Body=""&lt;p&gt;Alright, I propose a solution that will give you the maximum code reuse and minimum code copying. This, in my opinion, is by far the most generic solution. We will also take into account the answer given by &lt;a href=&quot;https://stackoverflow.com/users/7426/adrian&quot;&gt;https://stackoverflow.com/users/7426/adrian&lt;/a&gt; to complete the solution. You only have to define a single function which will be a higher order function &lt;code&gt;CreateHandler&lt;/code&gt; which will return a function of the following signature: &#xA;&lt;br /&gt;&lt;code&gt;func(*AppContext, http.ResponseWriter, http.Request) (int, error)&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This signature is the actual signature of the handler that is to be used as a mux end point. The solution involves defining a &lt;code&gt;Handler&lt;/code&gt; type which is a struct having three fields:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;• &lt;code&gt;handlerType&lt;/code&gt;: Think of it as an enum having either a value of &lt;code&gt;&quot;CREATE&quot;&lt;/code&gt; or &lt;code&gt;&quot;GET&quot;&lt;/code&gt;. This will decide which among the two blocks of code that you pasted in your question should we use.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;• &lt;code&gt;handlerActionName&lt;/code&gt;: This will tell the &lt;code&gt;&quot;CREATE&quot;&lt;/code&gt; or &lt;code&gt;&quot;GET&quot;&lt;/code&gt; which Elastible to use. Value should either be &lt;code&gt;&quot;flow&quot;&lt;/code&gt; or &lt;code&gt;&quot;process&quot;&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;• &lt;code&gt;elastible&lt;/code&gt;: This will the Interface type &lt;code&gt;Elastible&lt;/code&gt; that will have the &lt;code&gt;SetESID&lt;/code&gt; function. We will use this to send our &lt;code&gt;Flow&lt;/code&gt; or &lt;code&gt;Process&lt;/code&gt; types to our &lt;code&gt;Handler&lt;/code&gt;. Thus both &lt;code&gt;Flow&lt;/code&gt; and &lt;code&gt;Process&lt;/code&gt; should satisfy our interface.&#xA;This will make the solution even more generic and will only calling &lt;code&gt;handler.elastible.SetESID()&lt;/code&gt; and we will have inserted the ESID irrespective of that fact the underlying type in 'elastible' can either be 'Flow' or a 'Process'&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I also define a &lt;code&gt;sendResponse(response interface{})&lt;/code&gt; function that we will resuse to send the response. It acquires &lt;code&gt;w http.ResponseWriter&lt;/code&gt; using closure. &lt;code&gt;response&lt;/code&gt; can thus be anything, a &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;struct {&#xA;    Highest int `json:&quot;id&quot;`&#xA;}{highest} &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or a &lt;code&gt;Flow&lt;/code&gt; or a &lt;code&gt;Process&lt;/code&gt;. This will make this function generic too.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The complete solution would now be.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// This is the type that will be used to build our handlers.&#xA;type Handler struct {&#xA;    handlerType       string    // Can be &quot;CREATE&quot; or &quot;GET&quot;&#xA;    handlerActionName string    // Can be &quot;flow&quot; or &quot;process&quot;&#xA;    elastible         Elastible // Can be *Flow or *Process&#xA;}&#xA;&#xA;// Your ESID Type.&#xA;type ESIDType string&#xA;&#xA;// Solution proposed by https://stackoverflow.com/users/7426/adrian.&#xA;type Elastible interface {&#xA;    SetESID(id ESIDType)&#xA;}&#xA;&#xA;// Make the Flow and Process pointers implement the Elastible interface.&#xA;func (flow *Flow) SetESID(id ESIDType) {&#xA;    flow.ESID = id&#xA;}&#xA;&#xA;func (process *Process) SetESID(id ESIDType) {&#xA;    process.ESID = id&#xA;}&#xA;&#xA;// Create a Higher Order Function which will return the actual handler.&#xA;func CreateHandler(handler Handler) func(*AppContext, http.ResponseWriter, http.Request) (int, error) {&#xA;&#xA;    return func(a *AppContext, w http.ResponseWriter, r http.Request) (int, error) {&#xA;&#xA;        // Define a sendResponse function so that we may not need to copy paste it later.&#xA;        // It captures w using closure and takes an interface argument that we use to call .Encode() with.&#xA;&#xA;        sendResponse := func(response interface{}) (int, error) {&#xA;            b := new(bytes.Buffer)&#xA;            json.NewEncoder(b).Encode(response)&#xA;            w.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)&#xA;            w.Write(b.Bytes())&#xA;            return 200, nil&#xA;        }&#xA;&#xA;        // Define these variables beforehand since we'll be using them&#xA;        // in both the if and else block. Not necessary really.&#xA;        var code int&#xA;        var err error&#xA;&#xA;        // Check the handlerType. Is it create or get?&#xA;        if handler.handlerType == &quot;CREATE&quot; {&#xA;            var highest int&#xA;&#xA;            // Creates the thing using handler.handlerActionName which may be &quot;flow&quot; or &quot;process&quot;&#xA;            highest, code, err = a.Create(handler.handlerActionName, r)&#xA;            if code != 200 || err != nil {&#xA;                return code, err&#xA;            }&#xA;&#xA;            // Send the response using the above defined function and return.&#xA;            return sendResponse(struct {&#xA;                Highest int `json:&quot;id&quot;`&#xA;            }{highest})&#xA;&#xA;        } else {&#xA;&#xA;            // This is GET handlerType.&#xA;            var hit HitType&#xA;&#xA;            // Get the hit using again the handler.handlerActionName which may be &quot;flow&quot; or &quot;process&quot;&#xA;            hit, code, err = a.GetByID(handler.handlerActionName, mux.Vars(r)[&quot;id&quot;], r)&#xA;            if code != 200 || err != nil {&#xA;                return code, err&#xA;            }&#xA;&#xA;            // Do the un-marshalling.&#xA;            err = json.Unmarshal(*hit.Source, ob)&#xA;            if err != nil {&#xA;                return 500, err&#xA;            }&#xA;&#xA;            // We have set the handler.elastible to be an interface type&#xA;            // which will have the SetESID function that will set the ESID in the&#xA;            // underlying type that will be passed on runtime.&#xA;            // So the ESID will be set for both the Flow and the Process types.&#xA;            // This interface idea was given inside an earlier answer by&#xA;            // https://stackoverflow.com/users/7426/adrian&#xA;&#xA;            handler.elastible.SetESID(hit.id)&#xA;            return sendResponse(handler.elastible)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And you would setup your mux end points using the following code.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    // This was your first function. &quot;CreateFlow&quot;&#xA;    api.Handle(&quot;/createFlow/{id:[0-9]+}&quot;, handlers.AppHandler{&#xA;        context, CreateHandler(Handler{&#xA;            elastible:         &amp;amp;Flow{},&#xA;            handlerActionName: &quot;flow&quot;,&#xA;            handlerType:       &quot;CREATE&quot;,&#xA;        }),&#xA;    }).Methods(&quot;GET&quot;)&#xA;&#xA;    // This was your second function. &quot;CreateProcess&quot;&#xA;    api.Handle(&quot;/createProcess/{id:[0-9]+}&quot;, handlers.AppHandler{&#xA;        context, CreateHandler(Handler{&#xA;            elastible:         &amp;amp;Process{},&#xA;            handlerActionName: &quot;process&quot;,&#xA;            handlerType:       &quot;CREATE&quot;,&#xA;        }),&#xA;    }).Methods(&quot;GET&quot;)&#xA;&#xA;    // This was your third function. &quot;GetFlow&quot;&#xA;    api.Handle(&quot;/getFlow/{id:[0-9]+}&quot;, handlers.AppHandler{&#xA;        context, CreateHandler(Handler{&#xA;            elastible:         &amp;amp;Flow{},&#xA;            handlerActionName: &quot;flow&quot;,&#xA;            handlerType:       &quot;GET&quot;,&#xA;        }),&#xA;    }).Methods(&quot;GET&quot;)&#xA;&#xA;    // This was your fourth function. &quot;GetProcess&quot;&#xA;    api.Handle(&quot;/getProcess/{id:[0-9]+}&quot;, handlers.AppHandler{&#xA;        context, CreateHandler(Handler{&#xA;            elastible:         &amp;amp;Process{},&#xA;            handlerActionName: &quot;process&quot;,&#xA;            handlerType:       &quot;GET&quot;,&#xA;        }),&#xA;    }).Methods(&quot;GET&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;br /&gt;&#xA;Hope it helps!&lt;/p&gt;&#xA;"" OwnerUserId=""7641174"" LastActivityDate=""2017-08-23T18:12:35.647"" CommentCount=""3"" />
",45846743
45849468,"45849468      <row Id=""45849468"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45849851"" PostTypeId=""2"" ParentId=""45849468"" CreationDate=""2017-08-23T21:53:01.000"" Score=""0"" Body=""&lt;p&gt;Use something like this to capture groups, you may want to limit the characters accepted with [], note the use of ` and the use of \ escaping for () within the regexp:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func main() {&#xA;    re := regexp.MustCompile(`(.+)\((.+),\s?(.+)\)`)&#xA;    for _, t := range tests {&#xA;        fmt.Println(&quot;result&quot;, re.FindStringSubmatch(t))&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/43YLTafgQt&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/43YLTafgQt&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;output: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;result [contains(field, value) contains field value]&#xA;result [contains(name, Joe) contains name Joe]&#xA;result [lt(quantity, 2.5) lt quantity 2.5]&#xA;result [plus(no,44) plus no 44]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Depending on how strict you want to be you could use [a-z]+ or similar instead of .+ to match only certain characters but if you are not worried about bogus values this would probably be fine. &lt;/p&gt;&#xA;"" OwnerUserId=""1601137"" LastActivityDate=""2017-08-23T21:53:01.000"" CommentCount=""0"" />
",45849851
45852398,"45852398      <row Id=""45852398"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45852529"" PostTypeId=""2"" ParentId=""45852398"" CreationDate=""2017-08-24T03:36:42.400"" Score=""2"" Body=""&lt;p&gt;Object is part of S3, so I created struct as below and I was able to read key &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Root struct {&#xA;    Records []Record `json:&quot;Records&quot;`&#xA;}&#xA;&#xA;&#xA;type Record struct {&#xA;    S3 SS3 `json:&quot;s3&quot;`&#xA;}&#xA;&#xA;type SS3 struct {&#xA;    Obj Object `json:&quot;object&quot;`&#xA;}&#xA;&#xA;type Object struct {&#xA;    Key string `json:&quot;key&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1768567"" LastEditorUserId=""251311"" LastEditDate=""2017-08-24T03:45:20.020"" LastActivityDate=""2017-08-24T03:45:20.020"" CommentCount=""1"" />
",45852529
45854441,"45854441      <row Id=""45854441"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45855074"" PostTypeId=""2"" ParentId=""45854441"" CreationDate=""2017-08-24T07:06:29.943"" Score=""1"" Body=""&lt;p&gt;You can just use query parameters like in your question and handle any known fields as criteria to narrow your search.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The way you actually search these fields depends on where / how your data is stored- you didn't specify this in your question, so I don't know if you're going to query MongoDB, an SQL DB, a map in memory...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can iterate over your query parameters as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;http.HandleFunc(&quot;/news&quot;, func(w http.ResponseWriter, r *http.Request) {&#xA;  params := r.URL.Query()&#xA;&#xA;  for field, values := range params {&#xA;      value := values[len(values)-1] // the last given value of this type&#xA;      // gradually build your query using field / value&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you provide more information about how your data is stored, I can give you a more specific answer to help you build your query and retrieve the matching records.&lt;/p&gt;&#xA;"" OwnerUserId=""4648046"" LastActivityDate=""2017-08-24T07:06:29.943"" CommentCount=""2"" />
",45855074
45855530,"45855530      <row Id=""45855530"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45855822"" PostTypeId=""2"" ParentId=""45855530"" CreationDate=""2017-08-24T07:46:53.453"" Score=""1"" Body=""&lt;p&gt;The JSON package can only process exported struct fields (e.g. start with a capital letter). That's why you use the JSON tag so you can change the tag name/case to use. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Otherwise, this works as you would expect. See example:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/pRVKNrekWe&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/pRVKNrekWe&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""8356442"" LastActivityDate=""2017-08-24T07:46:53.453"" CommentCount=""0"" />
",45855822
45856464,"45856464      <row Id=""45856464"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45856760"" PostTypeId=""2"" ParentId=""45856464"" CreationDate=""2017-08-24T08:36:10.260"" Score=""3"" Body=""&lt;p&gt;The &lt;a href=&quot;https://golang.org/pkg/regexp/#Regexp.FindAllStringSubmatch&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;func (*Regexp) FindAllStringSubmatch&lt;/code&gt;&lt;/a&gt; extracts matches and &lt;em&gt;captured&lt;/em&gt; submatches. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;A submatch is a part of the text that is matched by the regex part that is enclosed with a pair of unescaped parentheses (a so called &lt;a href=&quot;http://www.regular-expressions.info/brackets.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;capturing group&lt;/strong&gt;&lt;/a&gt;). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your case, &lt;code&gt;^.*(mes).*$&lt;/code&gt; matches:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;^&lt;/code&gt; - start of string&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;.*&lt;/code&gt; - any 0+ chars as many as possible&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;(mes)&lt;/code&gt; - &lt;strong&gt;Capturing group 1&lt;/strong&gt;: a &lt;code&gt;mes&lt;/code&gt; substring&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;.*$&lt;/code&gt;  - the rest of the string.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;So, the match value is the whole string. It will be the first value in the output. Then, since there is a capturing group, there must be a place for it in the results, hence, &lt;code&gt;mes&lt;/code&gt; is placed as the second item in the list.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since there may be more matches than 1, we need a list of lists.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A better example may be the one with several match / submatch extraction (and maybe an optional group, too):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;fmt&quot;&#xA;    &quot;regexp&quot;&#xA;)&#xA;&#xA;func main() {&#xA;    someRegex, _ := regexp.Compile(`[^aouiye]([aouiye])([^aouiye])?`)&#xA;    matches := someRegex.FindAllStringSubmatch(&quot;somestri&quot;, -1)&#xA;    fmt.Printf(&quot;%q\n&quot;, matches)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;[^aouiye]([aouiye])([^aouiye])?&lt;/code&gt; matches a non-vowel, a vowel, and a non-vowel, capturing the last 2 into separate groups  #1 and #2.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The results are &lt;code&gt;[[&quot;som&quot; &quot;o&quot; &quot;m&quot;] [&quot;ri&quot; &quot;i&quot; &quot;&quot;]]&lt;/code&gt;. There are 2 matches, and each contains a match value, Group 1 value and Group 2 value. Since the &lt;code&gt;ri&lt;/code&gt; match has no text captured into Group 2 (&lt;code&gt;([^aouiye])?&lt;/code&gt;), it is empty, but it is still there since the group is defined in the regex pattern.&lt;/p&gt;&#xA;"" OwnerUserId=""3832970"" LastEditorUserId=""3832970"" LastEditDate=""2017-08-24T08:43:39.377"" LastActivityDate=""2017-08-24T08:43:39.377"" CommentCount=""0"" />
",45856760
45859471,"45859471      <row Id=""45859471"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45859629"" PostTypeId=""2"" ParentId=""45859471"" CreationDate=""2017-08-24T10:49:02.163"" Score=""2"" Body=""&lt;p&gt;Here's a Playground solving your problem (Quick and Dirty, there may be better solutions out there, but this one works.): &lt;a href=&quot;https://play.golang.org/p/7vTXLtaGNh&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/7vTXLtaGNh&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This Problem sounds like a simple homework, with a bit tinkering you could've solved it yourself i guess.&lt;/p&gt;&#xA;"" OwnerUserId=""1419028"" LastActivityDate=""2017-08-24T10:49:02.163"" CommentCount=""0"" />
",45859629
45867532,"45867532      <row Id=""45867532"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45867582"" PostTypeId=""2"" ParentId=""45867532"" CreationDate=""2017-08-24T17:21:02.800"" Score=""3"" Body=""&lt;p&gt;As soon as the main goroutine returns, the program exits. So you need to make sure to &lt;em&gt;not&lt;/em&gt; return from &lt;code&gt;main&lt;/code&gt; early. One way to do this is to execute the write-loop to the channel in the main goroutine:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var mq chan string&#xA;&#xA;func main() {&#xA;        mq = make(chan string)&#xA;        for i := 0; i &amp;lt; 4; i++ {&#xA;                go dequeue()&#xA;        }&#xA;        for {&#xA;            mq &amp;lt;- &quot;ping&quot; &#xA;        }&#xA;}&#xA;&#xA;func dequeue() {&#xA;        for m := range mq {&#xA;                fmt.Println(m)&#xA;        }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1080064"" LastActivityDate=""2017-08-24T17:21:02.800"" CommentCount=""0"" />
",45867582
45870518,"45870518      <row Id=""45870518"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45870654"" PostTypeId=""2"" ParentId=""45870518"" CreationDate=""2017-08-24T20:50:45.260"" Score=""4"" Body=""&lt;p&gt;It does work if you define your method on a struct rather than a pointer: &lt;a href=&quot;https://play.golang.org/p/zU4sbFe2RB&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/zU4sbFe2RB&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you can't do that in real code, I'm afraid you can't accomplish what you want. These two pointers will be different values, even if they point to similar data.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can add an &lt;code&gt;Equals(Object) bool&lt;/code&gt; method to the &lt;code&gt;Object&lt;/code&gt; interface and roll out your own implementation of a map. Alternatively, you can define &lt;code&gt;Hash() string&lt;/code&gt; method and use a &lt;code&gt;map[string]whatever&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""1892060"" LastActivityDate=""2017-08-24T20:50:45.260"" CommentCount=""1"" />
",45870654
45870273,"45870273      <row Id=""45870273"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45870668"" PostTypeId=""2"" ParentId=""45870273"" CreationDate=""2017-08-24T20:51:48.753"" Score=""0"" Body=""&lt;p&gt;Your &lt;code&gt;UnmarshalJSON&lt;/code&gt; function calls itself recursively, which will cause the stack to explode in size.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (t *Tags) UnmarshalJSON(b []byte) (err error) {&#xA;    str := string(b)&#xA;    if str == &quot;&quot; {&#xA;        t = &amp;amp;Tags{}&#xA;        return nil&#xA;    }&#xA;&#xA;    err = json.Unmarshal(b, t) &amp;lt;--- here it calls itself again&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you have a reason to call &lt;code&gt;json.Unmarshal&lt;/code&gt; from within a &lt;code&gt;UnmarshalJSON&lt;/code&gt; function, it must be on a different type.  A common way to do this is to use a local alias:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    type tagsAlias Tags&#xA;    var ta = &amp;amp;tagsAlias&#xA;    err = json.Unmarshal(b, ta)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;&#xA;    *t = Tags(ta)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also note that &lt;code&gt;t = &amp;amp;Tags{}&lt;/code&gt; does nothing in your function; it assigns a new value to &lt;code&gt;t&lt;/code&gt;, but that value is lost as soon as the function exits.  If you really want to assign to &lt;code&gt;t&lt;/code&gt;, you need &lt;code&gt;*t&lt;/code&gt;; but you also don't need that at all, unless you're trying to unsset a previously set instance of &lt;code&gt;*Tags&lt;/code&gt;.&lt;/p&gt;&#xA;"" OwnerUserId=""13860"" LastActivityDate=""2017-08-24T20:51:48.753"" CommentCount=""0"" />
",45870668
45871203,"45871203      <row Id=""45871203"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45872636"" PostTypeId=""2"" ParentId=""45871203"" CreationDate=""2017-08-25T00:10:26.467"" Score=""3"" Body=""&lt;p&gt;The runtime panics with the &quot;all go routines are a sleep - deadlock error&quot; error when all goroutines are blocked on channel and mutex operations.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The sleeping goroutine does not block on one of these operations. There is no deadlock and therefore no panic.&lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-08-25T00:10:26.467"" CommentCount=""0"" />
",45872636
45872614,"45872614      <row Id=""45872614"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45872676"" PostTypeId=""2"" ParentId=""45872614"" CreationDate=""2017-08-25T00:17:35.687"" Score=""4"" Body=""&lt;p&gt;You cannot reference the anonymous type of the &lt;code&gt;Data&lt;/code&gt; field using a field selector. The fix is to declare a named type for the &lt;code&gt;Data&lt;/code&gt; field:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type GetRecipesPaginatedResponse struct {&#xA;    ...&#xA;    Data        []DataItem&#xA;    ...&#xA;}&#xA;&#xA;type DataItem struct {&#xA;    ID               int       `json:&quot;id&quot;`&#xA;    ParentRecipeID   int       `json:&quot;parent_recipe_id&quot;`&#xA;    UserID           int       `json:&quot;user_id&quot;`&#xA;    Name             string    `json:&quot;name&quot;`&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Use it like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func insertIntoRecipes(db *sql.DB, exists bool, newRecipe DataItem) {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There's probably a better name for &lt;code&gt;DataItem&lt;/code&gt;.  &lt;/p&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-08-25T00:17:35.687"" CommentCount=""1"" />
",45872676
45874311,"45874311      <row Id=""45874311"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45874481"" PostTypeId=""2"" ParentId=""45874311"" CreationDate=""2017-08-25T04:32:53.550"" Score=""2"" Body=""&lt;p&gt;You are passing the structures by value. This works fine so long as you are not modifying the structure, but if you do modify it you are actually only modifying a copy. To make this work you need to use &lt;em&gt;pointers&lt;/em&gt; to the structures you need to modify.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead of:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (this MockConnector) sendCommand(payload map[string]string)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (this *MockConnector) sendCommand(payload map[string]string)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also, it is considered a bad idea to use &lt;code&gt;this&lt;/code&gt; (or &lt;code&gt;self&lt;/code&gt;) as a receiver name in Go, as a receiver is not the same thing as a &lt;code&gt;this&lt;/code&gt; pointer/reference in other languages.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another best practice, is if one method for a given type needs a pointer receiver, all methods for that type should have pointer receivers. This is so that the method set remains consistent no matter if the value is a pointer or not.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;https://golang.org/ref/spec#Method_sets&quot; rel=&quot;nofollow noreferrer&quot;&gt;method sets&lt;/a&gt;, and &lt;a href=&quot;https://golang.org/doc/faq#methods_on_values_or_pointers&quot; rel=&quot;nofollow noreferrer&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;https://golang.org/doc/faq#different_method_sets&quot; rel=&quot;nofollow noreferrer&quot;&gt;FAQ&lt;/a&gt; &lt;a href=&quot;https://golang.org/doc/faq#pass_by_value&quot; rel=&quot;nofollow noreferrer&quot;&gt;answers&lt;/a&gt; for more information.&lt;/p&gt;&#xA;"" OwnerUserId=""1094529"" LastActivityDate=""2017-08-25T04:32:53.550"" CommentCount=""3"" />
",45874481
45861848,"45861848      <row Id=""45861848"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45876312"" PostTypeId=""2"" ParentId=""45861848"" CreationDate=""2017-08-25T07:25:29.387"" Score=""1"" Body=""&lt;p&gt;First off, I would suggest reading this &lt;a href=&quot;https://blog.golang.org/go-slices-usage-and-internals&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go blog post&lt;/a&gt; to clarify the difference between &lt;em&gt;arrays&lt;/em&gt; and &lt;em&gt;slices&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Simply put:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;Arrays&lt;/em&gt; are a numbered sequence of elements.&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Slices&lt;/em&gt; contains a pointer to an underlying array element, a length and a capacity.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;What you normally do with pointer arithmetic in languages like C, you do with slices in Go. Actually, you very seldom use arrays directly in Go.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Slicing&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your example, you can do the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;data := make([]byte, 10) // Create a slice with length of 10&#xA;row := data[3:]          // Slicing a new slice starting from index 3. Length is 6&#xA;row[0] = 42&#xA;fmt.Println(data[3])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;42&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Using slicing, you pass different sections of an underlying array/slice to different Go routines to work on, without any races.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But if you instead want to have them work on the same slice, you can always protect it with a &lt;a href=&quot;https://golang.org/pkg/sync/#Mutex&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sync.Mutex&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt;&#xA;"" OwnerUserId=""694331"" LastActivityDate=""2017-08-25T07:25:29.387"" CommentCount=""0"" />
",45876312
45875444,"45875444      <row Id=""45875444"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45877934"" PostTypeId=""2"" ParentId=""45875444"" CreationDate=""2017-08-25T09:03:27.283"" Score=""0"" Body=""&lt;p&gt;The best way to do this is to use the builder pattern.&#xA;In the first image you download all the dependencies and build the executable.&#xA;In the second you copy the executable into a new image. You can use the scratch image as a base, but alpine is maybe better because it is also small but provides a shell and a packet manager for something like certificates for https.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you first copy the sources and the install the dependencies, they will be downloaded with every source change, so it ist better to use something like go dep. With it you can copy the Gopkg file, install your dependencies and then copy the sources.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Official article &lt;a href=&quot;https://docs.docker.com/engine/userguide/eng-image/multistage-build/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://docs.docker.com/engine/userguide/eng-image/multistage-build/&lt;/a&gt;&#xA;and in more detail&#xA;&lt;a href=&quot;https://blog.alexellis.io/mutli-stage-docker-builds/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://blog.alexellis.io/mutli-stage-docker-builds/&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""6540936"" LastActivityDate=""2017-08-25T09:03:27.283"" CommentCount=""0"" />
",45877934
45877980,"45877980      <row Id=""45877980"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45878151"" PostTypeId=""2"" ParentId=""45877980"" CreationDate=""2017-08-25T09:15:04.010"" Score=""2"" Body=""&lt;p&gt;The preferred way is the same as in any other cases.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Either use a mutex when the shared struct is read / updated:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var shared = &amp;amp;SharedStruct{}&#xA;var mux = &amp;amp;sync.RWMutex{}&#xA;&#xA;func someHandler(w http.ResponseWriter, r *http.Request) {&#xA;    mux.RLock()&#xA;    defer mux.RUnlock()&#xA;    t.ExecuteTemplate(w, &quot;page.html&quot;, shared)&#xA;}&#xA;&#xA;// Code that modifies shared:&#xA;mux.Lock()&#xA;shared.Counter++&#xA;mux.Unlock()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or if the template execution takes long time, it may be protitable to make a copy of the &lt;code&gt;shared&lt;/code&gt; struct and pass the copy when executing the template, so that during template execution access to &lt;code&gt;shared&lt;/code&gt; is not blocked. Note that while making the copy you still have to use a mutex. Also if not only the pointers but the pointed values may change, you also have to make a copy of those:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func someHandler(w http.ResponseWriter, r *http.Request) {&#xA;    mux.RLock()&#xA;    shared2 := &amp;amp;SharedStruct{}&#xA;    *shared2 = *shared&#xA;    shared2.Status_ = new(Status)&#xA;    *shared2.Status_ = *shared.Status_&#xA;    mux.RUnlock()&#xA;&#xA;    t.ExecuteTemplate(w, &quot;page.html&quot;, shared2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If the template only uses a small subset of the &lt;code&gt;shared&lt;/code&gt; fields, it is enough to make only a copy of those of course.&lt;/p&gt;&#xA;"" OwnerUserId=""1705598"" LastEditorUserId=""1705598"" LastEditDate=""2017-08-25T09:23:54.773"" LastActivityDate=""2017-08-25T09:23:54.773"" CommentCount=""0"" />
",45878151
45871304,"45871304      <row Id=""45871304"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45880478"" PostTypeId=""2"" ParentId=""45871304"" CreationDate=""2017-08-25T11:34:28.197"" Score=""0"" Body=""&lt;p&gt;You need to use the runner options for this&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cdp, err := cdp.New(ctxt, cdp.WithRunnerOptions(&#xA;            runner.UserDataDir(&quot;&amp;lt;your path&amp;gt;&quot;),&#xA;        ))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can look for all available options at below link&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/knq/chromedp/blob/dc08ecc7272dd745adc3494fb675c76174cbb2b3/runner/runner.go&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/knq/chromedp/blob/dc08ecc7272dd745adc3494fb675c76174cbb2b3/runner/runner.go&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""2830850"" LastActivityDate=""2017-08-25T11:34:28.197"" CommentCount=""6"" />
",45880478
45880883,"45880883      <row Id=""45880883"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45881151"" PostTypeId=""2"" ParentId=""45880883"" CreationDate=""2017-08-25T12:11:39.827"" Score=""1"" Body=""&lt;p&gt;You can &quot;reset&quot; a slice by setting it to nil. Also, you may not be aware that nil-slices work just fine with append:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var sc []SubContainer&#xA;c := Container{}&#xA;&#xA;for k, v := range commits {&#xA;    sc = append(sc, SubContainer{Key: k, Value: v})&#xA;    if len(sc) == 2 {&#xA;        c.Collection = append(c.Collection, sc...)&#xA;        sc = nil&#xA;    }&#xA;}&#xA;if len(sc) &amp;gt; 0 {&#xA;    c.Collection = append(c.Collection, sc...)&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/ecj52fkwpO&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/ecj52fkwpO&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""603316"" LastActivityDate=""2017-08-25T12:11:39.827"" CommentCount=""4"" />
",45881151
45882192,"45882192      <row Id=""45882192"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45882428"" PostTypeId=""2"" ParentId=""45882192"" CreationDate=""2017-08-25T13:20:54.653"" Score=""1"" Body=""&lt;p&gt;You are sharing &lt;code&gt;buf&lt;/code&gt; between two goroutines.&lt;/p&gt;&#xA;"" OwnerUserId=""450989"" LastActivityDate=""2017-08-25T13:20:54.653"" CommentCount=""0"" />
",45882428
45881894,"45881894      <row Id=""45881894"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45886114"" PostTypeId=""2"" ParentId=""45881894"" CreationDate=""2017-08-25T16:48:11.980"" Score=""1"" Body=""&lt;p&gt;The issue is that the &lt;code&gt;balance()&lt;/code&gt; goroutine eventually gets blocked in &lt;code&gt;dispatch()&lt;/code&gt; on &lt;code&gt;w.requests &amp;lt;- req&lt;/code&gt; at the same time that specific &lt;code&gt;Worker&lt;/code&gt; is blocking in &lt;code&gt;work()&lt;/code&gt; on &lt;code&gt;done &amp;lt;- w&lt;/code&gt;, producing a deadlock for the goroutine running &lt;code&gt;balance()&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is the fix you need. &lt;code&gt;balance()&lt;/code&gt; needs to utilize goroutines internally. This will fix the issue because now it doesn't matter if the routine blocks in &lt;code&gt;dispatch()&lt;/code&gt; or &lt;code&gt;completed()&lt;/code&gt;, the main routine for &lt;code&gt;balance()&lt;/code&gt; will continue &lt;code&gt;select&lt;/code&gt;ing from the &lt;code&gt;channel&lt;/code&gt;s.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;NOTE: This does not work on the playground because it goes on forever.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (b *Balancer) balance(work chan Request) {&#xA;    for {&#xA;        select {&#xA;        case req := &amp;lt;-work:&#xA;            go func() {&#xA;                b.dispatch(req)&#xA;                b.printStatus()&#xA;            }()&#xA;        case w := &amp;lt;-b.done:&#xA;            go func() {&#xA;                b.completed(w)&#xA;                b.printStatus()&#xA;            }()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now that &lt;code&gt;printStatus&lt;/code&gt; calls can be done concurrently, it needs to make use of the &lt;code&gt;mutex&lt;/code&gt; as well, or you will get random &lt;code&gt;panic&lt;/code&gt;s.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (b *Balancer) printStatus() {&#xA;    b.mu.Lock()&#xA;    fmt.Fprintf(os.Stderr, &quot;Status: %v %v %v %v %v %v\n&quot;, b.pool[0].pending, b.pool[1].pending, b.pool[2].pending, b.pool[3].pending, b.pool[4].pending, b.pool[5].pending)&#xA;    b.mu.Unlock()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now if I could just figure out why the &lt;code&gt;pending&lt;/code&gt; values just keep increasing... As far as I can tell, &lt;code&gt;Worker.work()&lt;/code&gt; should only ever allow &lt;code&gt;pending&lt;/code&gt; to be &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; because the &lt;code&gt;Worker&lt;/code&gt; has to wait on &lt;code&gt;done &amp;lt;- w&lt;/code&gt; before it can get another &lt;code&gt;Request&lt;/code&gt; from &lt;code&gt;dispatch()&lt;/code&gt;. I believe this is the desired result though isn't it?&lt;/p&gt;&#xA;"" OwnerUserId=""1276480"" LastEditorUserId=""1276480"" LastEditDate=""2017-08-25T17:55:19.523"" LastActivityDate=""2017-08-25T17:55:19.523"" CommentCount=""2"" />
",45886114
45889437,"45889437      <row Id=""45889437"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45889524"" PostTypeId=""2"" ParentId=""45889437"" CreationDate=""2017-08-25T21:16:29.437"" Score=""1"" Body=""&lt;p&gt;No point in marshalling the &lt;strong&gt;body&lt;/strong&gt; separately from the &lt;code&gt;HttpResp&lt;/code&gt;. Instead change the &lt;code&gt;Body&lt;/code&gt; field's type to &lt;code&gt;interface{}&lt;/code&gt; and then set the field to any value of a concrete type as opposed to a json string, e.g. &lt;code&gt;[]Article&lt;/code&gt; and then marshal the resp once.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type HttpResp struct{&#xA;    Status      int         `json:&quot;status&quot;`&#xA;    Description string      `json:&quot;description&quot;`&#xA;    Body        interface{} `json:&quot;body&quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And the rest...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;net/http&quot;&#xA;    &quot;log&quot;&#xA;)&#xA;&#xA;type Article struct{&#xA;    Id          string  `json:&quot;id&quot;`&#xA;    Title       string  `json:&quot;title&quot;`&#xA;    Body        string  `json:&quot;body&quot;`&#xA;    Description string  `json:&quot;description&quot;`&#xA;}&#xA;&#xA;func AllArticles(w http.ResponseWriter, r *http.Request){&#xA;    log.Print(&quot;/articles - GET&quot;)&#xA;    db := connect()&#xA;    defer db.Close()&#xA;&#xA;    var articles []Article&#xA;    results, err := db.Query(&quot;SELECT * FROM Articles&quot;)&#xA;&#xA;    if err != nil{&#xA;        log.Print(err)&#xA;        return&#xA;    }&#xA;&#xA;    for results.Next(){&#xA;        var article Article&#xA;        err = results.Scan(&amp;amp;article.Title, &amp;amp;article.Description, &amp;amp;article.Body, &amp;amp;article.Id)&#xA;&#xA;        if err != nil{&#xA;            serr, _ := json.Marshal(err)&#xA;            json.NewEncoder(w).Encode(HttpResp{Status: 500, Description: &quot;Failed to retrieve all articles&quot;, Body: string(serr)})&#xA;        }&#xA;&#xA;        articles = append(articles, article)&#xA;    }&#xA;&#xA;    w.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)&#xA;    json.NewEncoder(w).Encode(HttpResp{Status: 200, Body: articles})&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""965900"" LastActivityDate=""2017-08-25T21:16:29.437"" CommentCount=""1"" />
",45889524
45890244,"45890244      <row Id=""45890244"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45890888"" PostTypeId=""2"" ParentId=""45890244"" CreationDate=""2017-08-26T00:33:45.343"" Score=""1"" Body=""&lt;p&gt;The data stored in &lt;code&gt;val&lt;/code&gt; is not null-terminated. In your C code, when you make a copy using &lt;code&gt;memcpy&lt;/code&gt;, the null terminator is not included. In the C code, change the code to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Generate memory for picture data&#xA;char* val = new char[len+1];&#xA;memcpy (val, apicBase64.data(), len);&#xA;val[len] = '\0';&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""6207052"" LastActivityDate=""2017-08-26T00:33:45.343"" CommentCount=""0"" />
",45890888
45891600,"45891600      <row Id=""45891600"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45891610"" PostTypeId=""2"" ParentId=""45891600"" CreationDate=""2017-08-26T03:17:34.290"" Score=""4"" Body=""&lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Conversions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Convert&lt;/a&gt; the value to a string:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func SomeFunction() string {&#xA;        return string(Foobar)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""5728991"" LastActivityDate=""2017-08-26T03:17:34.290"" CommentCount=""0"" />
",45891610
45891799,"45891799      <row Id=""45891799"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45892056"" PostTypeId=""2"" ParentId=""45891799"" CreationDate=""2017-08-26T04:52:58.577"" Score=""1"" Body=""&lt;p&gt;Not sure what you're trying to do with &lt;code&gt;lll&lt;/code&gt; but without using it your code should not event compile.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;When &lt;code&gt;range&lt;/code&gt;ing over slices/arrays with a &lt;em&gt;single iteration variable&lt;/em&gt; on the left of &lt;code&gt;:=&lt;/code&gt; it will be assigned the index of the iteration. So in your case &lt;code&gt;ccc&lt;/code&gt; is the index.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One thing you can do is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for ccc := range connections {&#xA;    websocket.Message.Send(connections[ccc], &quot;Another connection!!!&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But what you probably really want is, drop the index and get the element right away which you can do using two iteration variables with the &lt;code&gt;_&lt;/code&gt; as the first one if you don't inted to use the index at all.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for _, ccc := range connections {&#xA;    websocket.Message.Send(ccc, &quot;Another connection!!!&quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;read more here: &lt;a href=&quot;https://golang.org/ref/spec#For_range&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://golang.org/ref/spec#For_range&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""965900"" LastActivityDate=""2017-08-26T04:52:58.577"" CommentCount=""0"" />
",45892056
45896605,"45896605      <row Id=""45896605"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45896783"" PostTypeId=""2"" ParentId=""45896605"" CreationDate=""2017-08-26T15:06:45.840"" Score=""1"" Body=""&lt;p&gt;Go templates support js and css and the evaluation of &lt;em&gt;actions&lt;/em&gt; (&lt;code&gt;{{ ... }}&lt;/code&gt;) is contextual so you can iterate over schools in js the same as you do in html. Although I have no idea what smarty is, so if this isn't working you need to check smarty's documentation.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;events: [&#xA;    {{range $.Schools}}&#xA;    {&#xA;        title: {{.Course}},&#xA;        start: {{.Duration}}&#xA;    },&#xA;    {{end}}&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/LBDBAMY4cL&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://play.golang.org/p/LBDBAMY4cL&lt;/a&gt;&lt;/p&gt;&#xA;"" OwnerUserId=""965900"" LastActivityDate=""2017-08-26T15:06:45.840"" CommentCount=""9"" />
",45896783
45896910,"45896910      <row Id=""45896910"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45897360"" PostTypeId=""2"" ParentId=""45896910"" CreationDate=""2017-08-26T16:12:52.557"" Score=""0"" Body=""&lt;p&gt;use &lt;a href=&quot;https://golang.org/pkg/regexp/#Regexp.FindAllString&quot; rel=&quot;nofollow noreferrer&quot;&gt;FindAllString&lt;/a&gt;  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  regexp.MustCompile(`[-+\?=]?([0-9]|x)`).FindAllString(&quot;x+5-3+x=6+x-2&quot;, -1)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2791115"" LastActivityDate=""2017-08-26T16:12:52.557"" CommentCount=""0"" />
",45897360
45897476,"45897476      <row Id=""45897476"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45897536"" PostTypeId=""2"" ParentId=""45897476"" CreationDate=""2017-08-26T16:34:22.580"" Score=""0"" Body=""&lt;p&gt;Try this&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func DeleteUser(ID int){&#xA;    err = nil&#xA;    res, err := DB.Exec(&quot;DELETE FROM Users WHERE user_id=$1&quot;, ID)&#xA;&#xA;    if err == nil {&#xA;&#xA;       count, err := res.RowsAffected()  &#xA;       if err == nil {&#xA;          /* check count and return true/false */&#xA;       }&#xA;&#xA;    }&#xA;&#xA;    return false&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""2830850"" LastActivityDate=""2017-08-26T16:34:22.580"" CommentCount=""0"" />
",45897536
45897371,"45897371      <row Id=""45897371"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45897635"" PostTypeId=""2"" ParentId=""45897371"" CreationDate=""2017-08-26T16:47:41.817"" Score=""0"" Body=""&lt;p&gt;@simon_xia is right and it looks like you &lt;em&gt;might&lt;/em&gt; be a little new to Go.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First off, welcome to the community!!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now to expand a bit on his comment... instead of providing public/private scope for a member/method, Go has the concept of &lt;a href=&quot;https://tour.golang.org/basics/3&quot; rel=&quot;nofollow noreferrer&quot;&gt;Exporting&lt;/a&gt;. So if you want to allow a method to be accessed from another package, just capitalize the method's signature :)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Most of the &lt;em&gt;basic&lt;/em&gt; features of OOP are satisfied in some way by Go, but it's important to understand that &lt;a href=&quot;https://golang.org/doc/faq#Is_Go_an_object-oriented_language&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go is not an object-oriented language&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'd &lt;strong&gt;highly recommend&lt;/strong&gt; working your way through the entire &lt;a href=&quot;https://tour.golang.org/list&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tour of Go&lt;/a&gt; since it hits this concept of Exporting as well as many, many other key features of the Go language. The entire tour can be finished in an afternoon and it did &lt;strong&gt;a lot&lt;/strong&gt; to get me up to speed on the language a few years back.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you're still hungry for more after that, I found &lt;a href=&quot;https://gobyexample.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go By Example&lt;/a&gt; to be an awesome point of reference for a bit of a deeper study into some major topics.&lt;/p&gt;&#xA;"" OwnerUserId=""8345637"" LastActivityDate=""2017-08-26T16:47:41.817"" CommentCount=""0"" />
",45897635
45896930,"45896930      <row Id=""45896930"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45897737"" PostTypeId=""2"" ParentId=""45896930"" CreationDate=""2017-08-26T17:00:19.790"" Score=""1"" Body=""&lt;p&gt;You can unmarshall bottom half in json.RawMessage first, something like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;    &quot;encoding/json&quot;&#xA;    &quot;fmt&quot;&#xA;)&#xA;&#xA;type Message struct {&#xA;    Code    int&#xA;    Payload json.RawMessage // delay parsing until we know the code&#xA;}&#xA;type Range struct {&#xA;    Start int&#xA;    End   int&#xA;}&#xA;type User struct {&#xA;    ID   int&#xA;    Pass int&#xA;}&#xA;&#xA;func MyUnmarshall(m []byte) {&#xA;    var message Message&#xA;    var payload interface{}&#xA;    json.Unmarshal(m, &amp;amp;message) // delay parsing until we know the color space&#xA;    switch message.Code {&#xA;    case 3:&#xA;        payload = new(User)&#xA;    case 4:&#xA;        payload = new(Range)&#xA;    }&#xA;    json.Unmarshal(message.Payload, payload) //err check ommited for readability&#xA;    fmt.Printf(&quot;\n%v%+v&quot;, message.Code, payload) //do something with data&#xA;}&#xA;&#xA;func main() {&#xA;    json := []byte(`{&quot;Code&quot;: 4, &quot;Payload&quot;: {&quot;Start&quot;: 1, &quot;End&quot;: 10}}`)&#xA;    MyUnmarshall(json)&#xA;    json = []byte(`{&quot;Code&quot;: 3, &quot;Payload&quot;: {&quot;ID&quot;: 1, &quot;Pass&quot;: 1234}}`)&#xA;    MyUnmarshall(json)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""4374109"" LastActivityDate=""2017-08-26T17:00:19.790"" CommentCount=""1"" />
",45897737
45899868,"45899868      <row Id=""45899868"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45899902"" PostTypeId=""2"" ParentId=""45899868"" CreationDate=""2017-08-26T21:41:09.450"" Score=""3"" Body=""&lt;p&gt;The usual type conversions work for function types just as well as they work for non-function types:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;pkg1.PkgApiCall(SomeFuncType(x))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;"" OwnerUserId=""1080064"" LastActivityDate=""2017-08-26T21:41:09.450"" CommentCount=""0"" />
",45899902
45900081,"45900081      <row Id=""45900081"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45900145"" PostTypeId=""2"" ParentId=""45900081"" CreationDate=""2017-08-26T22:24:39.833"" Score=""1"" Body=""&lt;p&gt;Change line number two to &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;t := map[string]map[string]interface{}{&quot;internal&quot;:internal_map}&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Access it like this &lt;code&gt;t[&quot;internal&quot;][&quot;key_in_internal_map&quot;]&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is essentially a map of maps. You can add as many embedded levels as you want.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Goplayground &lt;a href=&quot;https://play.golang.org/p/0644j5qz1i&quot; rel=&quot;nofollow noreferrer&quot;&gt;example&lt;/a&gt;.&#xA;Although I would recommend making nested structs to avoid map chaining.&lt;/p&gt;&#xA;"" OwnerUserId=""7641174"" LastActivityDate=""2017-08-26T22:24:39.833"" CommentCount=""0"" />
",45900145
45899964,"45899964      <row Id=""45899964"" PostTypeId=""1"" AcceptedAn...
Name: question, dtype: object","  <row Id=""45900290"" PostTypeId=""2"" ParentId=""45899964"" CreationDate=""2017-08-26T22:49:44.853"" Score=""1"" Body=""&lt;p&gt;&lt;code&gt;DB.Where(&amp;amp;Pokemon{Type: t}).Find(&amp;amp;retData.Poke)&lt;/code&gt; esentially returns back the &lt;code&gt;*db&lt;/code&gt; pointer which you can use to chain further methods.&#xA;You're already deserializing postgre rows into your struct slice when you do &lt;code&gt;.Find(&amp;amp;retData.Poke)&lt;/code&gt;. Thus, &lt;code&gt;pokemon&lt;/code&gt; isn't actually what you think it is. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The only thing left now is to chain &lt;code&gt;.Find()&lt;/code&gt; with a &lt;code&gt;.Error()&lt;/code&gt; so that you can return and check any error in your query. Just like this :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for _, t := range pokemonTypes {&#xA;    err := DB.Where(&amp;amp;Pokemon{Type: t}).Find(&amp;amp;retData.Poke).Error()&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    p, _ := json.Marshal(retData.Poke)&#xA;    err = json.Unmarshal(p, &amp;amp;retData.Poke) &#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    m[category] = retData.Poke&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Hope it helps!&lt;/p&gt;&#xA;"" OwnerUserId=""7641174"" LastActivityDate=""2017-08-26T22:49:44.853"" CommentCount=""1"" />
",45900290
